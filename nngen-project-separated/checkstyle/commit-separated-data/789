BLEU SCORE: 0.08066974340737668

TEST MSG: minor : change url for qaplug web site to more stable link ( base on failure of link - check - plugin )
GENERATED MSG: minor : fix link to bluej web site to avoid a violation from linkcheck

TEST DIFF (one line): diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm <nl> index adbc978 . . 32f8a18 100644 <nl> - - - a / src / xdocs / index . xml . vm <nl> + + + b / src / xdocs / index . xml . vm <nl> @ @ - 272 , 7 + 272 , 7 @ @ <nl> < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > <nl> < td > Jakub Slawinski < / td > <nl> < td > <nl> - < a href = " http : / / qaplug . com / " > QAPlug < / a > <nl> + < a href = " https : / / plugins . jetbrains . com / plugin / 4594 - qaplug " > QAPlug < / a > <nl> < / td > <nl> < td > Provides quality assurance features . < / td > <nl> < / tr >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> index 6a3a015 . . 7c54a7f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> @ @ - 187 , 6 + 187 , 8 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> private boolean allowEmptyLoops ; <nl> / * * Whether or not empty lambda blocks are allowed . * / <nl> private boolean allowEmptyLambdas ; <nl> + / * * Whether or not empty catch blocks are allowed . * / <nl> + private boolean allowEmptyCatches ; <nl> / * * Whether or not to ignore a colon in a enhanced for loop . * / <nl> private boolean ignoreEnhancedForColon = true ; <nl> <nl> @ @ - 362 , 6 + 364 , 14 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> allowEmptyLambdas = allow ; <nl> } <nl> <nl> + / * * <nl> + * Sets whether or not empty catch blocks are allowed . <nl> + * @ param allow { @ code true } to allow empty catch blocks . <nl> + * / <nl> + public void setAllowEmptyCatches ( boolean allow ) { <nl> + allowEmptyCatches = allow ; <nl> + } <nl> + <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> final int currentType = ast . getType ( ) ; <nl> @ @ - 478 , 7 + 488 , 8 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> return isEmptyMethodBlock ( ast , parentType ) <nl> | | isEmptyCtorBlock ( ast , parentType ) <nl> | | isEmptyLoop ( ast , parentType ) <nl> - | | isEmptyLambda ( ast , parentType ) ; <nl> + | | isEmptyLambda ( ast , parentType ) <nl> + | | isEmptyCatch ( ast , parentType ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 600 , 6 + 611 , 18 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> + * Tests if the given { @ code DetailAst } is part of an allowed empty <nl> + * catch block . <nl> + * @ param ast the { @ code DetailAst } to test . <nl> + * @ param parentType the token type of { @ code ast } ' s parent <nl> + * @ return { @ code true } if { @ code ast } makes up part of an <nl> + * allowed empty catch block . <nl> + * / <nl> + private boolean isEmptyCatch ( DetailAST ast , int parentType ) { <nl> + return allowEmptyCatches & & isEmptyBlock ( ast , parentType , TokenTypes . LITERAL _ CATCH ) ; <nl> + } <nl> + <nl> + / * * <nl> * Test if the given { @ code DetailAST } is part of an empty block . <nl> * An example empty block might look like the following <nl> * < p > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java <nl> index 8d498f2 . . b26a8b3 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java <nl> @ @ - 405 , 4 + 405 , 12 @ @ public class WhitespaceAroundCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputWhitespaceAroundLambda . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testWhitespaceAroundEmptyCatchBlock ( ) throws Exception { <nl> + checkConfig . addAttribute ( " allowEmptyCatches " , " true " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputWhitespaceAroundCatch . java " ) , <nl> + expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAroundCatch . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAroundCatch . java <nl> new file mode 100644 <nl> index 0000000 . . 3815255 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAroundCatch . java <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> + <nl> + public class InputWhitespaceAroundCatch { <nl> + public int case1 ( int i ) { <nl> + int k = 1 ; <nl> + try { <nl> + k = 5 / i ; <nl> + } catch ( ArithmeticException ex ) { } <nl> + return k ; <nl> + } <nl> + <nl> + public int case2 ( int i ) { <nl> + int k = 1 ; <nl> + try { <nl> + k = 10 / i ; <nl> + } catch ( ArithmeticException ex ) { } <nl> + return k ; <nl> + } <nl> + <nl> + public int case3 ( int i ) { <nl> + int k = 1 ; <nl> + try { <nl> + k = 15 / i ; <nl> + } catch ( ArithmeticException ex ) { <nl> + <nl> + } <nl> + return k ; <nl> + } <nl> + <nl> + public int case4 ( int i ) { <nl> + int k = 1 ; <nl> + try { <nl> + k = 20 / i ; <nl> + } catch ( ArithmeticException ex ) { <nl> + / / This is expected <nl> + } <nl> + return k ; <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml <nl> index cf85229 . . d8c8a32 100644 <nl> - - - a / src / xdocs / config _ whitespace . xml <nl> + + + b / src / xdocs / config _ whitespace . xml <nl> @ @ - 2018 , 8 + 2018 , 9 @ @ public @ interface Beta { } / / empty annotation type <nl> < p > <nl> may optionally be exempted from the policy using the < code > <nl> allowEmptyMethods < / code > , < code > allowEmptyConstructors <nl> - < / code > , < code > allowEmptyTypes < / code > , < code > allowEmptyLoops < / code > and <nl> - < code > allowEmptyLambdas < / code > properties . <nl> + < / code > , < code > allowEmptyTypes < / code > , < code > allowEmptyLoops < / code > <nl> + < code > allowEmptyLambdas < / code > and < code > allowEmptyCatches < / code > <nl> + properties . <nl> < / p > <nl> < p > This check does not flag as violation double brace initialization like : < / p > <nl> < pre > < code > <nl> @ @ - 2027 , 6 + 2028 , 17 @ @ new Properties ( ) { { <nl> setProperty ( " key " , " value " ) ; <nl> } } ; <nl> < / code > < / pre > <nl> + < p > Parameter allowEmptyCatches allows to suppress violations when token <nl> + list contains SLIST to check if beginning of block is surrounded by <nl> + whitespace and catch block is empty , for example : < / p > <nl> + < pre > < code > <nl> + try { <nl> + k = 5 / i ; <nl> + } catch ( ArithmeticException ex ) { } <nl> + < / code > < / pre > <nl> + With this property turned off , this raises violation because the beginning of the <nl> + catch block ( left curly bracket ) is not separated from the end of the catch <nl> + block ( right curly bracket ) . <nl> < / subsection > <nl> <nl> < subsection name = " Properties " > <nl> @ @ - 2068 , 6 + 2080 , 12 @ @ new Properties ( ) { { <nl> < td > < code > false < / code > < / td > <nl> < / tr > <nl> < tr > <nl> + < td > allowEmptyCatches < / td > <nl> + < td > allow empty catch bodies < / td > <nl> + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> + < td > < code > false < / code > < / td > <nl> + < / tr > <nl> + < tr > <nl> < td > ignoreEnhancedForColon < / td > <nl> < td > ignore whitespace around colon in for - each loops < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td >

TEST DIFF:
diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm 
 index adbc978 . . 32f8a18 100644 
 - - - a / src / xdocs / index . xml . vm 
 + + + b / src / xdocs / index . xml . vm 
 @ @ - 272 , 7 + 272 , 7 @ @ 
 < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > 
 < td > Jakub Slawinski < / td > 
 < td > 
 - < a href = " http : / / qaplug . com / " > QAPlug < / a > 
 + < a href = " https : / / plugins . jetbrains . com / plugin / 4594 - qaplug " > QAPlug < / a > 
 < / td > 
 < td > Provides quality assurance features . < / td > 
 < / tr >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 index 6a3a015 . . 7c54a7f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 @ @ - 187 , 6 + 187 , 8 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 private boolean allowEmptyLoops ; 
 / * * Whether or not empty lambda blocks are allowed . * / 
 private boolean allowEmptyLambdas ; 
 + / * * Whether or not empty catch blocks are allowed . * / 
 + private boolean allowEmptyCatches ; 
 / * * Whether or not to ignore a colon in a enhanced for loop . * / 
 private boolean ignoreEnhancedForColon = true ; 
 
 @ @ - 362 , 6 + 364 , 14 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 allowEmptyLambdas = allow ; 
 } 
 
 + / * * 
 + * Sets whether or not empty catch blocks are allowed . 
 + * @ param allow { @ code true } to allow empty catch blocks . 
 + * / 
 + public void setAllowEmptyCatches ( boolean allow ) { 
 + allowEmptyCatches = allow ; 
 + } 
 + 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 final int currentType = ast . getType ( ) ; 
 @ @ - 478 , 7 + 488 , 8 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 return isEmptyMethodBlock ( ast , parentType ) 
 | | isEmptyCtorBlock ( ast , parentType ) 
 | | isEmptyLoop ( ast , parentType ) 
 - | | isEmptyLambda ( ast , parentType ) ; 
 + | | isEmptyLambda ( ast , parentType ) 
 + | | isEmptyCatch ( ast , parentType ) ; 
 } 
 
 / * * 
 @ @ - 600 , 6 + 611 , 18 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 } 
 
 / * * 
 + * Tests if the given { @ code DetailAst } is part of an allowed empty 
 + * catch block . 
 + * @ param ast the { @ code DetailAst } to test . 
 + * @ param parentType the token type of { @ code ast } ' s parent 
 + * @ return { @ code true } if { @ code ast } makes up part of an 
 + * allowed empty catch block . 
 + * / 
 + private boolean isEmptyCatch ( DetailAST ast , int parentType ) { 
 + return allowEmptyCatches & & isEmptyBlock ( ast , parentType , TokenTypes . LITERAL _ CATCH ) ; 
 + } 
 + 
 + / * * 
 * Test if the given { @ code DetailAST } is part of an empty block . 
 * An example empty block might look like the following 
 * < p > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java 
 index 8d498f2 . . b26a8b3 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java 
 @ @ - 405 , 4 + 405 , 12 @ @ public class WhitespaceAroundCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputWhitespaceAroundLambda . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testWhitespaceAroundEmptyCatchBlock ( ) throws Exception { 
 + checkConfig . addAttribute ( " allowEmptyCatches " , " true " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputWhitespaceAroundCatch . java " ) , 
 + expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAroundCatch . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAroundCatch . java 
 new file mode 100644 
 index 0000000 . . 3815255 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAroundCatch . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 + 
 + public class InputWhitespaceAroundCatch { 
 + public int case1 ( int i ) { 
 + int k = 1 ; 
 + try { 
 + k = 5 / i ; 
 + } catch ( ArithmeticException ex ) { } 
 + return k ; 
 + } 
 + 
 + public int case2 ( int i ) { 
 + int k = 1 ; 
 + try { 
 + k = 10 / i ; 
 + } catch ( ArithmeticException ex ) { } 
 + return k ; 
 + } 
 + 
 + public int case3 ( int i ) { 
 + int k = 1 ; 
 + try { 
 + k = 15 / i ; 
 + } catch ( ArithmeticException ex ) { 
 + 
 + } 
 + return k ; 
 + } 
 + 
 + public int case4 ( int i ) { 
 + int k = 1 ; 
 + try { 
 + k = 20 / i ; 
 + } catch ( ArithmeticException ex ) { 
 + / / This is expected 
 + } 
 + return k ; 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml 
 index cf85229 . . d8c8a32 100644 
 - - - a / src / xdocs / config _ whitespace . xml 
 + + + b / src / xdocs / config _ whitespace . xml 
 @ @ - 2018 , 8 + 2018 , 9 @ @ public @ interface Beta { } / / empty annotation type 
 < p > 
 may optionally be exempted from the policy using the < code > 
 allowEmptyMethods < / code > , < code > allowEmptyConstructors 
 - < / code > , < code > allowEmptyTypes < / code > , < code > allowEmptyLoops < / code > and 
 - < code > allowEmptyLambdas < / code > properties . 
 + < / code > , < code > allowEmptyTypes < / code > , < code > allowEmptyLoops < / code > 
 + < code > allowEmptyLambdas < / code > and < code > allowEmptyCatches < / code > 
 + properties . 
 < / p > 
 < p > This check does not flag as violation double brace initialization like : < / p > 
 < pre > < code > 
 @ @ - 2027 , 6 + 2028 , 17 @ @ new Properties ( ) { { 
 setProperty ( " key " , " value " ) ; 
 } } ; 
 < / code > < / pre > 
 + < p > Parameter allowEmptyCatches allows to suppress violations when token 
 + list contains SLIST to check if beginning of block is surrounded by 
 + whitespace and catch block is empty , for example : < / p > 
 + < pre > < code > 
 + try { 
 + k = 5 / i ; 
 + } catch ( ArithmeticException ex ) { } 
 + < / code > < / pre > 
 + With this property turned off , this raises violation because the beginning of the 
 + catch block ( left curly bracket ) is not separated from the end of the catch 
 + block ( right curly bracket ) . 
 < / subsection > 
 
 < subsection name = " Properties " > 
 @ @ - 2068 , 6 + 2080 , 12 @ @ new Properties ( ) { { 
 < td > < code > false < / code > < / td > 
 < / tr > 
 < tr > 
 + < td > allowEmptyCatches < / td > 
 + < td > allow empty catch bodies < / td > 
 + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 + < td > < code > false < / code > < / td > 
 + < / tr > 
 + < tr > 
 < td > ignoreEnhancedForColon < / td > 
 < td > ignore whitespace around colon in for - each loops < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td >
