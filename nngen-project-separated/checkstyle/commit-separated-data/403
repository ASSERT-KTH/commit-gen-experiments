BLEU SCORE: 0.02775638555723182

TEST MSG: config : Disabled as it result in svn : E175002 : Unexpected HTTP status 429 ' Too Many Requests ' , even for checkout from my local
GENERATED MSG: config : skip failed CI build to let us pass release

TEST DIFF (one line): diff - - git a / wercker . yml b / wercker . yml <nl> index 464f2f4 . . cc61001 100644 <nl> - - - a / wercker . yml <nl> + + + b / wercker . yml <nl> @ @ - 81 , 14 + 81 , 16 @ @ build : <nl> echo " build is skipped . . . " <nl> fi <nl> <nl> - - script : <nl> - name : NoErrorTest - HtmlUnit <nl> - code : | <nl> - if [ [ $ SKIP _ CI = = ' false ' ] ] ; then <nl> - . / . ci / wercker . sh no - error - htmlunit <nl> - else <nl> - echo " build is skipped . . . " <nl> - fi <nl> + # Disabled as it result in " svn : E175002 : Unexpected HTTP status 429 ' Too Many Requests ' " <nl> + # even for " svn checkout - r 14923 . . . . " <nl> + # - script : <nl> + # name : NoErrorTest - HtmlUnit <nl> + # code : | <nl> + # if [ [ $ SKIP _ CI = = ' false ' ] ] ; then <nl> + # . / . ci / wercker . sh no - error - htmlunit <nl> + # else <nl> + # echo " build is skipped . . . " <nl> + # fi <nl> <nl> - script : <nl> name : NoErrorTest - checkstyle ' s sevntu
NEAREST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> index 946f797 . . ed43f89 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> @ @ - 87 , 7 + 87 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * Returns test logger . <nl> * @ return logger test logger <nl> * / <nl> - public BriefUtLogger getBriefUtLogger ( ) { <nl> + public final BriefUtLogger getBriefUtLogger ( ) { <nl> return new BriefUtLogger ( stream ) ; <nl> } <nl> <nl> @ @ - 122 , 7 + 122 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ return { @ link Checker } instance based on the given { @ link Configuration } instance . <nl> * @ throws Exception if an exception occurs during checker configuration . <nl> * / <nl> - public Checker createChecker ( Configuration moduleConfig ) <nl> + public final Checker createChecker ( Configuration moduleConfig ) <nl> throws Exception { <nl> if ( checkstyleModules = = null ) { <nl> checkstyleModules = CheckUtil . getCheckstyleModules ( ) ; <nl> @ @ - 153 , 7 + 153 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ return { @ link Checker } instance . <nl> * @ throws CheckstyleException if an exception occurs during checker configuration . <nl> * / <nl> - protected Checker createChecker ( Configuration moduleConfig , <nl> + protected final Checker createChecker ( Configuration moduleConfig , <nl> ModuleCreationOption moduleCreationOption ) <nl> throws Exception { <nl> final DefaultConfiguration dc ; <nl> @ @ - 183 , 7 + 183 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ param config { @ link Configuration } instance . <nl> * @ return { @ link DefaultConfiguration } for the { @ link Checker } . <nl> * / <nl> - protected DefaultConfiguration createTreeWalkerConfig ( Configuration config ) { <nl> + protected static DefaultConfiguration createTreeWalkerConfig ( Configuration config ) { <nl> final DefaultConfiguration dc = <nl> new DefaultConfiguration ( " configuration " ) ; <nl> final DefaultConfiguration twConf = createModuleConfig ( TreeWalker . class ) ; <nl> @ @ - 199 , 7 + 199 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ param config { @ link Configuration } instance . <nl> * @ return { @ link DefaultConfiguration } for the given { @ link Configuration } instance . <nl> * / <nl> - protected DefaultConfiguration createRootConfig ( Configuration config ) { <nl> + protected static DefaultConfiguration createRootConfig ( Configuration config ) { <nl> final DefaultConfiguration dc = new DefaultConfiguration ( " root " ) ; <nl> dc . addChild ( config ) ; <nl> return dc ; <nl> @ @ - 218 , 7 + 218 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ param warnsExpected an array of expected warning numbers . <nl> * @ throws Exception if exception occurs during verification process . <nl> * / <nl> - protected void verify ( Configuration config , String fileName , String [ ] expected , <nl> + protected final void verify ( Configuration config , String fileName , String [ ] expected , <nl> Integer . . . warnsExpected ) throws Exception { <nl> verify ( createChecker ( config ) , <nl> new File [ ] { new File ( fileName ) } , <nl> @ @ - 234 , 7 + 234 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ param warnsExpected an array of expected warning line numbers . <nl> * @ throws Exception if exception occurs during verification process . <nl> * / <nl> - protected void verify ( Checker checker , <nl> + protected final void verify ( Checker checker , <nl> File [ ] processedFiles , <nl> String messageFileName , <nl> String [ ] expected , <nl> @ @ - 284 , 7 + 284 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ param messageKey the key of message in ' messages . properties ' file . <nl> * @ param arguments the arguments of message in ' messages . properties ' file . <nl> * / <nl> - protected String getCheckMessage ( Class < ? extends AbstractViolationReporter > aClass , <nl> + protected static String getCheckMessage ( Class < ? extends AbstractViolationReporter > aClass , <nl> String messageKey , Object . . . arguments ) { <nl> String checkMessage ; <nl> try { <nl> @ @ - 305 , 7 + 305 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ param messageKey the key of message in ' messages . properties ' file . <nl> * @ param arguments the arguments of message in ' messages . properties ' file . <nl> * / <nl> - protected String getCheckMessage ( Map < String , String > messages , String messageKey , <nl> + protected static String getCheckMessage ( Map < String , String > messages , String messageKey , <nl> Object . . . arguments ) { <nl> String checkMessage = null ; <nl> for ( Map . Entry < String , String > entry : messages . entrySet ( ) ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java <nl> index b3e708a . . 84e0518 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java <nl> @ @ - 81 , 7 + 81 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * Returns test logger . <nl> * @ return logger for tests <nl> * / <nl> - public BriefUtLogger getBriefUtLogger ( ) { <nl> + public final BriefUtLogger getBriefUtLogger ( ) { <nl> return new BriefUtLogger ( stream ) ; <nl> } <nl> <nl> @ @ - 95 , 7 + 95 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ return { @ link Checker } instance based on the given { @ link Configuration } instance . <nl> * @ throws Exception if an exception occurs during checker configuration . <nl> * / <nl> - public Checker createChecker ( Configuration moduleConfig ) <nl> + public final Checker createChecker ( Configuration moduleConfig ) <nl> throws Exception { <nl> ModuleCreationOption moduleCreationOption = ModuleCreationOption . IN _ CHECKER ; <nl> <nl> @ @ - 124 , 7 + 124 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ return { @ link Checker } instance based on the given { @ link Configuration } instance . <nl> * @ throws Exception if an exception occurs during checker configuration . <nl> * / <nl> - public Checker createChecker ( Configuration moduleConfig , <nl> + public final Checker createChecker ( Configuration moduleConfig , <nl> ModuleCreationOption moduleCreationOption ) <nl> throws Exception { <nl> final Checker checker = new Checker ( ) ; <nl> @ @ - 152 , 7 + 152 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ return { @ link DefaultConfiguration } for the { @ link TreeWalker } <nl> * based on the given { @ link Configuration } instance . <nl> * / <nl> - protected DefaultConfiguration createTreeWalkerConfig ( Configuration config ) { <nl> + protected static DefaultConfiguration createTreeWalkerConfig ( Configuration config ) { <nl> final DefaultConfiguration dc = <nl> new DefaultConfiguration ( " configuration " ) ; <nl> final DefaultConfiguration twConf = createModuleConfig ( TreeWalker . class ) ; <nl> @ @ - 168 , 7 + 168 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ param config { @ link Configuration } instance . <nl> * @ return { @ link DefaultConfiguration } for the given { @ link Configuration } instance . <nl> * / <nl> - protected DefaultConfiguration createRootConfig ( Configuration config ) { <nl> + protected static DefaultConfiguration createRootConfig ( Configuration config ) { <nl> final DefaultConfiguration dc = new DefaultConfiguration ( ROOT _ MODULE _ NAME ) ; <nl> if ( config ! = null ) { <nl> dc . addChild ( config ) ; <nl> @ @ - 198 , 7 + 198 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ param filename file name . <nl> * @ return URI - representation of the path for the file with the given file name . <nl> * / <nl> - protected String getUriString ( String filename ) { <nl> + protected final String getUriString ( String filename ) { <nl> return new File ( " src / test / resources / " + getPackageLocation ( ) + " / " + filename ) . toURI ( ) <nl> . toString ( ) ; <nl> } <nl> @ @ - 213 , 7 + 213 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ param expected an array of expected messages . <nl> * @ throws Exception if exception occurs during verification process . <nl> * / <nl> - protected void verify ( Configuration aConfig , String fileName , String . . . expected ) <nl> + protected final void verify ( Configuration aConfig , String fileName , String . . . expected ) <nl> throws Exception { <nl> verify ( createChecker ( aConfig ) , fileName , fileName , expected ) ; <nl> } <nl> @ @ - 246 , 7 + 246 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ param expected an array of expected messages . <nl> * @ throws Exception if exception occurs during verification process . <nl> * / <nl> - protected void verify ( Checker checker , <nl> + protected final void verify ( Checker checker , <nl> String processedFilename , <nl> String messageFileName , <nl> String . . . expected ) <nl> @ @ - 299 , 7 + 299 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ param expectedViolations a map of expected violations per files . <nl> * @ throws Exception if exception occurs during verification process . <nl> * / <nl> - protected void verify ( Checker checker , <nl> + protected final void verify ( Checker checker , <nl> File [ ] processedFiles , <nl> Map < String , List < String > > expectedViolations ) <nl> throws Exception { <nl> @ @ - 384 , 7 + 384 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ param messageKey the key of message in ' messages . properties ' file . <nl> * @ param arguments the arguments of message in ' messages . properties ' file . <nl> * / <nl> - protected String getCheckMessage ( String messageKey , Object . . . arguments ) { <nl> + protected final String getCheckMessage ( String messageKey , Object . . . arguments ) { <nl> return internalGetCheckMessage ( getMessageBundle ( ) , messageKey , arguments ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / wercker . yml b / wercker . yml 
 index 464f2f4 . . cc61001 100644 
 - - - a / wercker . yml 
 + + + b / wercker . yml 
 @ @ - 81 , 14 + 81 , 16 @ @ build : 
 echo " build is skipped . . . " 
 fi 
 
 - - script : 
 - name : NoErrorTest - HtmlUnit 
 - code : | 
 - if [ [ $ SKIP _ CI = = ' false ' ] ] ; then 
 - . / . ci / wercker . sh no - error - htmlunit 
 - else 
 - echo " build is skipped . . . " 
 - fi 
 + # Disabled as it result in " svn : E175002 : Unexpected HTTP status 429 ' Too Many Requests ' " 
 + # even for " svn checkout - r 14923 . . . . " 
 + # - script : 
 + # name : NoErrorTest - HtmlUnit 
 + # code : | 
 + # if [ [ $ SKIP _ CI = = ' false ' ] ] ; then 
 + # . / . ci / wercker . sh no - error - htmlunit 
 + # else 
 + # echo " build is skipped . . . " 
 + # fi 
 
 - script : 
 name : NoErrorTest - checkstyle ' s sevntu

NEAREST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 index 946f797 . . ed43f89 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 @ @ - 87 , 7 + 87 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * Returns test logger . 
 * @ return logger test logger 
 * / 
 - public BriefUtLogger getBriefUtLogger ( ) { 
 + public final BriefUtLogger getBriefUtLogger ( ) { 
 return new BriefUtLogger ( stream ) ; 
 } 
 
 @ @ - 122 , 7 + 122 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ return { @ link Checker } instance based on the given { @ link Configuration } instance . 
 * @ throws Exception if an exception occurs during checker configuration . 
 * / 
 - public Checker createChecker ( Configuration moduleConfig ) 
 + public final Checker createChecker ( Configuration moduleConfig ) 
 throws Exception { 
 if ( checkstyleModules = = null ) { 
 checkstyleModules = CheckUtil . getCheckstyleModules ( ) ; 
 @ @ - 153 , 7 + 153 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ return { @ link Checker } instance . 
 * @ throws CheckstyleException if an exception occurs during checker configuration . 
 * / 
 - protected Checker createChecker ( Configuration moduleConfig , 
 + protected final Checker createChecker ( Configuration moduleConfig , 
 ModuleCreationOption moduleCreationOption ) 
 throws Exception { 
 final DefaultConfiguration dc ; 
 @ @ - 183 , 7 + 183 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ param config { @ link Configuration } instance . 
 * @ return { @ link DefaultConfiguration } for the { @ link Checker } . 
 * / 
 - protected DefaultConfiguration createTreeWalkerConfig ( Configuration config ) { 
 + protected static DefaultConfiguration createTreeWalkerConfig ( Configuration config ) { 
 final DefaultConfiguration dc = 
 new DefaultConfiguration ( " configuration " ) ; 
 final DefaultConfiguration twConf = createModuleConfig ( TreeWalker . class ) ; 
 @ @ - 199 , 7 + 199 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ param config { @ link Configuration } instance . 
 * @ return { @ link DefaultConfiguration } for the given { @ link Configuration } instance . 
 * / 
 - protected DefaultConfiguration createRootConfig ( Configuration config ) { 
 + protected static DefaultConfiguration createRootConfig ( Configuration config ) { 
 final DefaultConfiguration dc = new DefaultConfiguration ( " root " ) ; 
 dc . addChild ( config ) ; 
 return dc ; 
 @ @ - 218 , 7 + 218 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ param warnsExpected an array of expected warning numbers . 
 * @ throws Exception if exception occurs during verification process . 
 * / 
 - protected void verify ( Configuration config , String fileName , String [ ] expected , 
 + protected final void verify ( Configuration config , String fileName , String [ ] expected , 
 Integer . . . warnsExpected ) throws Exception { 
 verify ( createChecker ( config ) , 
 new File [ ] { new File ( fileName ) } , 
 @ @ - 234 , 7 + 234 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ param warnsExpected an array of expected warning line numbers . 
 * @ throws Exception if exception occurs during verification process . 
 * / 
 - protected void verify ( Checker checker , 
 + protected final void verify ( Checker checker , 
 File [ ] processedFiles , 
 String messageFileName , 
 String [ ] expected , 
 @ @ - 284 , 7 + 284 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ param messageKey the key of message in ' messages . properties ' file . 
 * @ param arguments the arguments of message in ' messages . properties ' file . 
 * / 
 - protected String getCheckMessage ( Class < ? extends AbstractViolationReporter > aClass , 
 + protected static String getCheckMessage ( Class < ? extends AbstractViolationReporter > aClass , 
 String messageKey , Object . . . arguments ) { 
 String checkMessage ; 
 try { 
 @ @ - 305 , 7 + 305 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ param messageKey the key of message in ' messages . properties ' file . 
 * @ param arguments the arguments of message in ' messages . properties ' file . 
 * / 
 - protected String getCheckMessage ( Map < String , String > messages , String messageKey , 
 + protected static String getCheckMessage ( Map < String , String > messages , String messageKey , 
 Object . . . arguments ) { 
 String checkMessage = null ; 
 for ( Map . Entry < String , String > entry : messages . entrySet ( ) ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java 
 index b3e708a . . 84e0518 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java 
 @ @ - 81 , 7 + 81 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * Returns test logger . 
 * @ return logger for tests 
 * / 
 - public BriefUtLogger getBriefUtLogger ( ) { 
 + public final BriefUtLogger getBriefUtLogger ( ) { 
 return new BriefUtLogger ( stream ) ; 
 } 
 
 @ @ - 95 , 7 + 95 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ return { @ link Checker } instance based on the given { @ link Configuration } instance . 
 * @ throws Exception if an exception occurs during checker configuration . 
 * / 
 - public Checker createChecker ( Configuration moduleConfig ) 
 + public final Checker createChecker ( Configuration moduleConfig ) 
 throws Exception { 
 ModuleCreationOption moduleCreationOption = ModuleCreationOption . IN _ CHECKER ; 
 
 @ @ - 124 , 7 + 124 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ return { @ link Checker } instance based on the given { @ link Configuration } instance . 
 * @ throws Exception if an exception occurs during checker configuration . 
 * / 
 - public Checker createChecker ( Configuration moduleConfig , 
 + public final Checker createChecker ( Configuration moduleConfig , 
 ModuleCreationOption moduleCreationOption ) 
 throws Exception { 
 final Checker checker = new Checker ( ) ; 
 @ @ - 152 , 7 + 152 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ return { @ link DefaultConfiguration } for the { @ link TreeWalker } 
 * based on the given { @ link Configuration } instance . 
 * / 
 - protected DefaultConfiguration createTreeWalkerConfig ( Configuration config ) { 
 + protected static DefaultConfiguration createTreeWalkerConfig ( Configuration config ) { 
 final DefaultConfiguration dc = 
 new DefaultConfiguration ( " configuration " ) ; 
 final DefaultConfiguration twConf = createModuleConfig ( TreeWalker . class ) ; 
 @ @ - 168 , 7 + 168 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ param config { @ link Configuration } instance . 
 * @ return { @ link DefaultConfiguration } for the given { @ link Configuration } instance . 
 * / 
 - protected DefaultConfiguration createRootConfig ( Configuration config ) { 
 + protected static DefaultConfiguration createRootConfig ( Configuration config ) { 
 final DefaultConfiguration dc = new DefaultConfiguration ( ROOT _ MODULE _ NAME ) ; 
 if ( config ! = null ) { 
 dc . addChild ( config ) ; 
 @ @ - 198 , 7 + 198 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ param filename file name . 
 * @ return URI - representation of the path for the file with the given file name . 
 * / 
 - protected String getUriString ( String filename ) { 
 + protected final String getUriString ( String filename ) { 
 return new File ( " src / test / resources / " + getPackageLocation ( ) + " / " + filename ) . toURI ( ) 
 . toString ( ) ; 
 } 
 @ @ - 213 , 7 + 213 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ param expected an array of expected messages . 
 * @ throws Exception if exception occurs during verification process . 
 * / 
 - protected void verify ( Configuration aConfig , String fileName , String . . . expected ) 
 + protected final void verify ( Configuration aConfig , String fileName , String . . . expected ) 
 throws Exception { 
 verify ( createChecker ( aConfig ) , fileName , fileName , expected ) ; 
 } 
 @ @ - 246 , 7 + 246 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ param expected an array of expected messages . 
 * @ throws Exception if exception occurs during verification process . 
 * / 
 - protected void verify ( Checker checker , 
 + protected final void verify ( Checker checker , 
 String processedFilename , 
 String messageFileName , 
 String . . . expected ) 
 @ @ - 299 , 7 + 299 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ param expectedViolations a map of expected violations per files . 
 * @ throws Exception if exception occurs during verification process . 
 * / 
 - protected void verify ( Checker checker , 
 + protected final void verify ( Checker checker , 
 File [ ] processedFiles , 
 Map < String , List < String > > expectedViolations ) 
 throws Exception { 
 @ @ - 384 , 7 + 384 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ param messageKey the key of message in ' messages . properties ' file . 
 * @ param arguments the arguments of message in ' messages . properties ' file . 
 * / 
 - protected String getCheckMessage ( String messageKey , Object . . . arguments ) { 
 + protected final String getCheckMessage ( String messageKey , Object . . . arguments ) { 
 return internalGetCheckMessage ( getMessageBundle ( ) , messageKey , arguments ) ; 
 } 

