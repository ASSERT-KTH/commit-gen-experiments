BLEU SCORE: 0.018738883683389617

TEST MSG: Issue # 4843 : TreeWalkerFilter needs to be added to ModuleReflectionUtils
GENERATED MSG: consolidate charset handling .

TEST DIFF (one line): diff - - git a / config / import - control . xml b / config / import - control . xml <nl> index 85fb034 . . f3e38d5 100644 <nl> - - - a / config / import - control . xml <nl> + + + b / config / import - control . xml <nl> @ @ - 55 , 7 + 55 , 7 @ @ <nl> < subpackage name = " utils " > <nl> < allow pkg = " java . lang . reflect " local - only = " true " / > <nl> < allow pkg = " java . nio " local - only = " true " / > <nl> - <nl> + < allow class = " com . puppycrawl . tools . checkstyle . TreeWalkerFilter " / > <nl> < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > <nl> < allow class = " com . google . common . collect . ImmutableMap " local - only = " true " / > <nl> < allow class = " com . google . common . reflect . ClassPath " local - only = " true " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtils . java <nl> index c07bc53 . . 33cc516 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtils . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . Set ; <nl> import java . util . stream . Collectors ; <nl> <nl> import com . google . common . reflect . ClassPath ; <nl> + import com . puppycrawl . tools . checkstyle . TreeWalkerFilter ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; <nl> @ @ - 64 , 7 + 65 , 7 @ @ public final class ModuleReflectionUtils { <nl> / * * <nl> * Checks whether a class may be considered as a checkstyle module . Checkstyle ' s modules are <nl> * non - abstract classes , which are either checkstyle ' s checks , file sets , filters , file filters , <nl> - * or root module . <nl> + * { @ code TreeWalker } filters or root module . <nl> * @ param clazz class to check . <nl> * @ return true if the class may be considered as the checkstyle module . <nl> * / <nl> @ @ - 74 , 6 + 75 , 7 @ @ public final class ModuleReflectionUtils { <nl> | | isFileSetModule ( clazz ) <nl> | | isFilterModule ( clazz ) <nl> | | isFileFilterModule ( clazz ) <nl> + | | isTreeWalkerFilterModule ( clazz ) <nl> | | isRootModule ( clazz ) ) ; <nl> } <nl> <nl> @ @ - 136 , 4 + 138 , 15 @ @ public final class ModuleReflectionUtils { <nl> public static boolean isRootModule ( Class < ? > clazz ) { <nl> return RootModule . class . isAssignableFrom ( clazz ) ; <nl> } <nl> + <nl> + / * * <nl> + * Checks whether a class may be considered as the checkstyle { @ code TreeWalker } filter . <nl> + * Checkstyle ' s { @ code TreeWalker } filters are classes which implement ' TreeWalkerFilter ' <nl> + * interface . <nl> + * @ param clazz class to check . <nl> + * @ return true if a class may be considered as the checkstyle { @ code TreeWalker } filter . <nl> + * / <nl> + public static boolean isTreeWalkerFilterModule ( Class < ? > clazz ) { <nl> + return TreeWalkerFilter . class . isAssignableFrom ( clazz ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> index d33cc5e . . c98e793 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> @ @ - 28 , 6 + 28 , 8 @ @ import java . util . List ; <nl> <nl> import org . junit . Test ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . TreeWalkerAuditEvent ; <nl> + import com . puppycrawl . tools . checkstyle . TreeWalkerFilter ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> @ @ - 55 , 6 + 57 , 8 @ @ public class ModuleReflectionUtilsTest { <nl> assertTrue ( " Should return true when checkstyle module is passed " , <nl> ModuleReflectionUtils . isCheckstyleModule ( FilterClass . class ) ) ; <nl> assertTrue ( " Should return true when checkstyle module is passed " , <nl> + ModuleReflectionUtils . isCheckstyleModule ( TreeWalkerFilterClass . class ) ) ; <nl> + assertTrue ( " Should return true when checkstyle module is passed " , <nl> ModuleReflectionUtils . isCheckstyleModule ( FileFilterModuleClass . class ) ) ; <nl> assertTrue ( " Should return true when checkstyle module is passed " , <nl> ModuleReflectionUtils . isCheckstyleModule ( RootModuleClass . class ) ) ; <nl> @ @ - 104 , 6 + 108 , 14 @ @ public class ModuleReflectionUtilsTest { <nl> } <nl> <nl> @ Test <nl> + public void testIsTreeWalkerFilterModule ( ) { <nl> + assertTrue ( " Should return true when valid checkstyle TreeWalker filter module is passed " , <nl> + ModuleReflectionUtils . isTreeWalkerFilterModule ( TreeWalkerFilterClass . class ) ) ; <nl> + assertFalse ( " Should return false when invalid class is passed " , <nl> + ModuleReflectionUtils . isTreeWalkerFilterModule ( NotCheckstyleCheck . class ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testIsRootModule ( ) { <nl> assertTrue ( " Should return true when valid checkstyle root module is passed " , <nl> ModuleReflectionUtils . isRootModule ( RootModuleClass . class ) ) ; <nl> @ @ - 196 , 6 + 208 , 13 @ @ public class ModuleReflectionUtilsTest { <nl> } <nl> } <nl> <nl> + private static class TreeWalkerFilterClass extends AutomaticBean implements TreeWalkerFilter { <nl> + @ Override <nl> + public boolean accept ( TreeWalkerAuditEvent treeWalkerAuditEvent ) { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> private static class NotCheckstyleCheck { <nl> protected NotCheckstyleCheck ( ) { <nl> / / keep pmd calm and happy
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> index 1e3f88b . . 55b2681 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> + import com . google . common . collect . Lists ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditListener ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> @ @ - 27 , 7 + 28 , 6 @ @ import java . io . FileNotFoundException ; <nl> import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> import java . io . OutputStream ; <nl> - import java . util . LinkedList ; <nl> import java . util . List ; <nl> import java . util . Properties ; <nl> import org . apache . commons . cli . CommandLine ; <nl> @ @ - 153 , 7 + 153 , 7 @ @ public final class Main <nl> * / <nl> private static List < File > getFilesToProcess ( CommandLine aLine ) <nl> { <nl> - final List < File > files = new LinkedList < File > ( ) ; <nl> + final List < File > files = Lists . newLinkedList ( ) ; <nl> if ( aLine . hasOption ( " r " ) ) { <nl> final String [ ] values = aLine . getOptionValues ( " r " ) ; <nl> for ( String element : values ) { <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Utils . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Utils . java <nl> index f54ed61 . . abc0ddb 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Utils . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Utils . java <nl> @ @ - 27 , 7 + 27 , 6 @ @ import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> import java . io . LineNumberReader ; <nl> import java . io . UnsupportedEncodingException ; <nl> - import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . regex . Pattern ; <nl> @ @ - 300 , 7 + 299 , 7 @ @ public final class Utils <nl> } <nl> } <nl> <nl> - final List < File > files = new ArrayList < File > ( aFiles . size ( ) ) ; <nl> + final List < File > files = Lists . newArrayList ( ) ; <nl> for ( final File f : aFiles ) { <nl> final String fileName = f . getName ( ) ; <nl> for ( final String fileExtension : withDotExtensions ) { <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java <nl> index 2c9d202 . . d510c72 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> + import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Sets ; <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> @ @ - 216 , 7 + 217 , 7 @ @ class FrameStack <nl> / * * Creates an empty FrameStack . * / <nl> FrameStack ( ) <nl> { <nl> - mFrameList = new LinkedList < LexicalFrame > ( ) ; <nl> + mFrameList = Lists . newLinkedList ( ) ; <nl> this . enter ( new GlobalFrame ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> index 91d191c . . 564ce31 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import antlr . collections . AST ; <nl> + import com . google . common . collect . Lists ; <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; <nl> @ @ - 89 , 8 + 90 , 7 @ @ public abstract class AbstractSuperCheck <nl> } <nl> <nl> / * * stack of methods * / <nl> - private final LinkedList < MethodNode > mMethodStack = <nl> - new LinkedList < MethodNode > ( ) ; <nl> + private final LinkedList < MethodNode > mMethodStack = Lists . newLinkedList ( ) ; <nl> <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> index 8cd6e91 . . 8b36ed1 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> @ @ - 18 , 12 + 18 , 12 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> + import com . google . common . collect . Lists ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . checks . AbstractTypeAwareCheck ; <nl> import java . util . Iterator ; <nl> - import java . util . LinkedList ; <nl> import java . util . List ; <nl> <nl> / * * <nl> @ @ - 92 , 7 + 92 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck <nl> @ Override <nl> protected final void processAST ( DetailAST aAST ) <nl> { <nl> - final List < ClassInfo > knownExcs = new LinkedList < ClassInfo > ( ) ; <nl> + final List < ClassInfo > knownExcs = Lists . newLinkedList ( ) ; <nl> final DetailAST throwsAST = <nl> aAST . findFirstToken ( TokenTypes . LITERAL _ THROWS ) ; <nl> if ( throwsAST ! = null ) { <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java <nl> index 8a9dd66 . . e417ca2 100755 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java <nl> @ @ - 32 , 7 + 32 , 7 @ @ import java . util . List ; <nl> class PkgControl <nl> { <nl> / * * List of { @ link Guard } objects to check . * / <nl> - private final LinkedList < Guard > mGuards = new LinkedList < Guard > ( ) ; <nl> + private final LinkedList < Guard > mGuards = Lists . newLinkedList ( ) ; <nl> / * * List of children { @ link PkgControl } objects . * / <nl> private final List < PkgControl > mChildren = Lists . newArrayList ( ) ; <nl> / * * The parent . Null indicates we are the root node . * / <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java <nl> index fcae398 . . 7d4bbc9 100755 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java <nl> @ @ - 18 , 7 + 18 , 7 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks . javadoc ; <nl> <nl> - import java . util . LinkedList ; <nl> + import com . google . common . collect . Lists ; <nl> import java . util . List ; <nl> <nl> / * * <nl> @ @ - 45 , 7 + 45 , 7 @ @ import java . util . List ; <nl> class TagParser <nl> { <nl> / * * List of HtmlTags found on the input line of text . * / <nl> - private final List < HtmlTag > mTags = new LinkedList < HtmlTag > ( ) ; <nl> + private final List < HtmlTag > mTags = Lists . newLinkedList ( ) ; <nl> <nl> / * * <nl> * Constructs a TagParser and finds the first tag if any . <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java b / src / tests / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> index 685984d . . 63eedff 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . filters ; <nl> <nl> + import com . google . common . collect . Lists ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> @ @ - 14 , 7 + 15 , 6 @ @ import com . puppycrawl . tools . checkstyle . checks . FileContentsHolder ; <nl> import com . puppycrawl . tools . checkstyle . checks . coding . IllegalCatchCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> - import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collection ; <nl> import java . util . Locale ; <nl> @ @ - 199 , 7 + 199 , 8 @ @ public class SuppressionCommentFilterTest <nl> <nl> private String [ ] removeSuppressed ( String [ ] aFrom , String [ ] aRemove ) <nl> { <nl> - final Collection < String > coll = new ArrayList < String > ( Arrays . asList ( aFrom ) ) ; <nl> + final Collection < String > coll = <nl> + Lists . newArrayList ( Arrays . asList ( aFrom ) ) ; <nl> coll . removeAll ( Arrays . asList ( aRemove ) ) ; <nl> return coll . toArray ( new String [ coll . size ( ) ] ) ; <nl> }

TEST DIFF:
diff - - git a / config / import - control . xml b / config / import - control . xml 
 index 85fb034 . . f3e38d5 100644 
 - - - a / config / import - control . xml 
 + + + b / config / import - control . xml 
 @ @ - 55 , 7 + 55 , 7 @ @ 
 < subpackage name = " utils " > 
 < allow pkg = " java . lang . reflect " local - only = " true " / > 
 < allow pkg = " java . nio " local - only = " true " / > 
 - 
 + < allow class = " com . puppycrawl . tools . checkstyle . TreeWalkerFilter " / > 
 < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > 
 < allow class = " com . google . common . collect . ImmutableMap " local - only = " true " / > 
 < allow class = " com . google . common . reflect . ClassPath " local - only = " true " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtils . java 
 index c07bc53 . . 33cc516 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtils . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . Set ; 
 import java . util . stream . Collectors ; 
 
 import com . google . common . reflect . ClassPath ; 
 + import com . puppycrawl . tools . checkstyle . TreeWalkerFilter ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; 
 @ @ - 64 , 7 + 65 , 7 @ @ public final class ModuleReflectionUtils { 
 / * * 
 * Checks whether a class may be considered as a checkstyle module . Checkstyle ' s modules are 
 * non - abstract classes , which are either checkstyle ' s checks , file sets , filters , file filters , 
 - * or root module . 
 + * { @ code TreeWalker } filters or root module . 
 * @ param clazz class to check . 
 * @ return true if the class may be considered as the checkstyle module . 
 * / 
 @ @ - 74 , 6 + 75 , 7 @ @ public final class ModuleReflectionUtils { 
 | | isFileSetModule ( clazz ) 
 | | isFilterModule ( clazz ) 
 | | isFileFilterModule ( clazz ) 
 + | | isTreeWalkerFilterModule ( clazz ) 
 | | isRootModule ( clazz ) ) ; 
 } 
 
 @ @ - 136 , 4 + 138 , 15 @ @ public final class ModuleReflectionUtils { 
 public static boolean isRootModule ( Class < ? > clazz ) { 
 return RootModule . class . isAssignableFrom ( clazz ) ; 
 } 
 + 
 + / * * 
 + * Checks whether a class may be considered as the checkstyle { @ code TreeWalker } filter . 
 + * Checkstyle ' s { @ code TreeWalker } filters are classes which implement ' TreeWalkerFilter ' 
 + * interface . 
 + * @ param clazz class to check . 
 + * @ return true if a class may be considered as the checkstyle { @ code TreeWalker } filter . 
 + * / 
 + public static boolean isTreeWalkerFilterModule ( Class < ? > clazz ) { 
 + return TreeWalkerFilter . class . isAssignableFrom ( clazz ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 index d33cc5e . . c98e793 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 @ @ - 28 , 6 + 28 , 8 @ @ import java . util . List ; 
 
 import org . junit . Test ; 
 
 + import com . puppycrawl . tools . checkstyle . TreeWalkerAuditEvent ; 
 + import com . puppycrawl . tools . checkstyle . TreeWalkerFilter ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 @ @ - 55 , 6 + 57 , 8 @ @ public class ModuleReflectionUtilsTest { 
 assertTrue ( " Should return true when checkstyle module is passed " , 
 ModuleReflectionUtils . isCheckstyleModule ( FilterClass . class ) ) ; 
 assertTrue ( " Should return true when checkstyle module is passed " , 
 + ModuleReflectionUtils . isCheckstyleModule ( TreeWalkerFilterClass . class ) ) ; 
 + assertTrue ( " Should return true when checkstyle module is passed " , 
 ModuleReflectionUtils . isCheckstyleModule ( FileFilterModuleClass . class ) ) ; 
 assertTrue ( " Should return true when checkstyle module is passed " , 
 ModuleReflectionUtils . isCheckstyleModule ( RootModuleClass . class ) ) ; 
 @ @ - 104 , 6 + 108 , 14 @ @ public class ModuleReflectionUtilsTest { 
 } 
 
 @ Test 
 + public void testIsTreeWalkerFilterModule ( ) { 
 + assertTrue ( " Should return true when valid checkstyle TreeWalker filter module is passed " , 
 + ModuleReflectionUtils . isTreeWalkerFilterModule ( TreeWalkerFilterClass . class ) ) ; 
 + assertFalse ( " Should return false when invalid class is passed " , 
 + ModuleReflectionUtils . isTreeWalkerFilterModule ( NotCheckstyleCheck . class ) ) ; 
 + } 
 + 
 + @ Test 
 public void testIsRootModule ( ) { 
 assertTrue ( " Should return true when valid checkstyle root module is passed " , 
 ModuleReflectionUtils . isRootModule ( RootModuleClass . class ) ) ; 
 @ @ - 196 , 6 + 208 , 13 @ @ public class ModuleReflectionUtilsTest { 
 } 
 } 
 
 + private static class TreeWalkerFilterClass extends AutomaticBean implements TreeWalkerFilter { 
 + @ Override 
 + public boolean accept ( TreeWalkerAuditEvent treeWalkerAuditEvent ) { 
 + return false ; 
 + } 
 + } 
 + 
 private static class NotCheckstyleCheck { 
 protected NotCheckstyleCheck ( ) { 
 / / keep pmd calm and happy

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 index 1e3f88b . . 55b2681 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle ; 
 
 + import com . google . common . collect . Lists ; 
 import com . puppycrawl . tools . checkstyle . api . AuditListener ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 @ @ - 27 , 7 + 28 , 6 @ @ import java . io . FileNotFoundException ; 
 import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 import java . io . OutputStream ; 
 - import java . util . LinkedList ; 
 import java . util . List ; 
 import java . util . Properties ; 
 import org . apache . commons . cli . CommandLine ; 
 @ @ - 153 , 7 + 153 , 7 @ @ public final class Main 
 * / 
 private static List < File > getFilesToProcess ( CommandLine aLine ) 
 { 
 - final List < File > files = new LinkedList < File > ( ) ; 
 + final List < File > files = Lists . newLinkedList ( ) ; 
 if ( aLine . hasOption ( " r " ) ) { 
 final String [ ] values = aLine . getOptionValues ( " r " ) ; 
 for ( String element : values ) { 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Utils . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Utils . java 
 index f54ed61 . . abc0ddb 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Utils . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Utils . java 
 @ @ - 27 , 7 + 27 , 6 @ @ import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 import java . io . LineNumberReader ; 
 import java . io . UnsupportedEncodingException ; 
 - import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . regex . Pattern ; 
 @ @ - 300 , 7 + 299 , 7 @ @ public final class Utils 
 } 
 } 
 
 - final List < File > files = new ArrayList < File > ( aFiles . size ( ) ) ; 
 + final List < File > files = Lists . newArrayList ( ) ; 
 for ( final File f : aFiles ) { 
 final String fileName = f . getName ( ) ; 
 for ( final String fileExtension : withDotExtensions ) { 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java 
 index 2c9d202 . . d510c72 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 + import com . google . common . collect . Lists ; 
 import com . google . common . collect . Sets ; 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 @ @ - 216 , 7 + 217 , 7 @ @ class FrameStack 
 / * * Creates an empty FrameStack . * / 
 FrameStack ( ) 
 { 
 - mFrameList = new LinkedList < LexicalFrame > ( ) ; 
 + mFrameList = Lists . newLinkedList ( ) ; 
 this . enter ( new GlobalFrame ( ) ) ; 
 } 
 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 index 91d191c . . 564ce31 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import antlr . collections . AST ; 
 + import com . google . common . collect . Lists ; 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; 
 @ @ - 89 , 8 + 90 , 7 @ @ public abstract class AbstractSuperCheck 
 } 
 
 / * * stack of methods * / 
 - private final LinkedList < MethodNode > mMethodStack = 
 - new LinkedList < MethodNode > ( ) ; 
 + private final LinkedList < MethodNode > mMethodStack = Lists . newLinkedList ( ) ; 
 
 @ Override 
 public int [ ] getDefaultTokens ( ) 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 index 8cd6e91 . . 8b36ed1 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 @ @ - 18 , 12 + 18 , 12 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 + import com . google . common . collect . Lists ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . checks . AbstractTypeAwareCheck ; 
 import java . util . Iterator ; 
 - import java . util . LinkedList ; 
 import java . util . List ; 
 
 / * * 
 @ @ - 92 , 7 + 92 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck 
 @ Override 
 protected final void processAST ( DetailAST aAST ) 
 { 
 - final List < ClassInfo > knownExcs = new LinkedList < ClassInfo > ( ) ; 
 + final List < ClassInfo > knownExcs = Lists . newLinkedList ( ) ; 
 final DetailAST throwsAST = 
 aAST . findFirstToken ( TokenTypes . LITERAL _ THROWS ) ; 
 if ( throwsAST ! = null ) { 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java 
 index 8a9dd66 . . e417ca2 100755 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java 
 @ @ - 32 , 7 + 32 , 7 @ @ import java . util . List ; 
 class PkgControl 
 { 
 / * * List of { @ link Guard } objects to check . * / 
 - private final LinkedList < Guard > mGuards = new LinkedList < Guard > ( ) ; 
 + private final LinkedList < Guard > mGuards = Lists . newLinkedList ( ) ; 
 / * * List of children { @ link PkgControl } objects . * / 
 private final List < PkgControl > mChildren = Lists . newArrayList ( ) ; 
 / * * The parent . Null indicates we are the root node . * / 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java 
 index fcae398 . . 7d4bbc9 100755 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java 
 @ @ - 18 , 7 + 18 , 7 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks . javadoc ; 
 
 - import java . util . LinkedList ; 
 + import com . google . common . collect . Lists ; 
 import java . util . List ; 
 
 / * * 
 @ @ - 45 , 7 + 45 , 7 @ @ import java . util . List ; 
 class TagParser 
 { 
 / * * List of HtmlTags found on the input line of text . * / 
 - private final List < HtmlTag > mTags = new LinkedList < HtmlTag > ( ) ; 
 + private final List < HtmlTag > mTags = Lists . newLinkedList ( ) ; 
 
 / * * 
 * Constructs a TagParser and finds the first tag if any . 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java b / src / tests / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 index 685984d . . 63eedff 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 @ @ - 4 , 6 + 4 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . filters ; 
 
 + import com . google . common . collect . Lists ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 @ @ - 14 , 7 + 15 , 6 @ @ import com . puppycrawl . tools . checkstyle . checks . FileContentsHolder ; 
 import com . puppycrawl . tools . checkstyle . checks . coding . IllegalCatchCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 - import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collection ; 
 import java . util . Locale ; 
 @ @ - 199 , 7 + 199 , 8 @ @ public class SuppressionCommentFilterTest 
 
 private String [ ] removeSuppressed ( String [ ] aFrom , String [ ] aRemove ) 
 { 
 - final Collection < String > coll = new ArrayList < String > ( Arrays . asList ( aFrom ) ) ; 
 + final Collection < String > coll = 
 + Lists . newArrayList ( Arrays . asList ( aFrom ) ) ; 
 coll . removeAll ( Arrays . asList ( aRemove ) ) ; 
 return coll . toArray ( new String [ coll . size ( ) ] ) ; 
 }
