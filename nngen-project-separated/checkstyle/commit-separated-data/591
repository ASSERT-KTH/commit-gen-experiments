BLEU SCORE: 0.05847275578505035

TEST MSG: Issue # 5003 : increased coverage of pitest - checks - whitespace to 98 %
GENERATED MSG: Issue # 3958 : Modified GenericWhitespaceCheckTest . java and moved its input files to genericwhitespace subdirectory

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 91ceeba . . ebc1250 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2044 , 7 + 2044 , 7 @ @ <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . checks . whitespace . * < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 95 < / mutationThreshold > <nl> + < mutationThreshold > 98 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> index 080bb73 . . 3b25204 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> @ @ - 328 , 7 + 328 , 7 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { <nl> * / <nl> private void processMultipleLinesInside ( DetailAST ast ) { <nl> final int astType = ast . getType ( ) ; <nl> - if ( isClassMemberBlock ( astType ) ) { <nl> + if ( astType ! = TokenTypes . CLASS _ DEF & & isClassMemberBlock ( astType ) ) { <nl> final List < Integer > emptyLines = getEmptyLines ( ast ) ; <nl> final List < Integer > emptyLinesToLog = getEmptyLinesToLog ( emptyLines ) ; <nl> <nl> @ @ - 360 , 12 + 360 , 14 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { <nl> final DetailAST lastToken = ast . getLastChild ( ) . getLastChild ( ) ; <nl> int lastTokenLineNo = 0 ; <nl> if ( lastToken ! = null ) { <nl> - lastTokenLineNo = lastToken . getLineNo ( ) ; <nl> + / / - 1 as count starts from 0 <nl> + / / - 2 as last token line cannot be empty , because it is a RCURLY <nl> + lastTokenLineNo = lastToken . getLineNo ( ) - 2 ; <nl> } <nl> final List < Integer > emptyLines = new ArrayList < > ( ) ; <nl> final FileContents fileContents = getFileContents ( ) ; <nl> <nl> - for ( int lineNo = ast . getLineNo ( ) ; lineNo < lastTokenLineNo ; lineNo + + ) { <nl> + for ( int lineNo = ast . getLineNo ( ) ; lineNo < = lastTokenLineNo ; lineNo + + ) { <nl> if ( fileContents . lineIsBlank ( lineNo ) ) { <nl> emptyLines . add ( lineNo ) ; <nl> } <nl> @ @ - 380 , 7 + 382 , 7 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { <nl> * / <nl> private static List < Integer > getEmptyLinesToLog ( List < Integer > emptyLines ) { <nl> final List < Integer > emptyLinesToLog = new ArrayList < > ( ) ; <nl> - if ( emptyLines . size ( ) > 1 ) { <nl> + if ( emptyLines . size ( ) > = 2 ) { <nl> int previousEmptyLineNo = emptyLines . get ( 0 ) ; <nl> for ( int emptyLineNo : emptyLines ) { <nl> if ( previousEmptyLineNo + 1 = = emptyLineNo ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> index 789204a . . 79c031f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> @ @ - 150 , 7 + 150 , 7 @ @ public class GenericWhitespaceCheck extends AbstractCheck { <nl> final int after = ast . getColumnNo ( ) + 1 ; <nl> <nl> if ( before > = 0 & & Character . isWhitespace ( line . charAt ( before ) ) <nl> - & & ! CommonUtils . hasWhitespaceBefore ( before , line ) ) { <nl> + & & ! containsWhitespaceBefore ( before , line ) ) { <nl> log ( ast . getLineNo ( ) , before , MSG _ WS _ PRECEDED , CLOSE _ ANGLE _ BRACKET ) ; <nl> } <nl> <nl> @ @ - 183 , 7 + 183 , 7 @ @ public class GenericWhitespaceCheck extends AbstractCheck { <nl> / / should be whitespace if followed by & - + <nl> / / <nl> final int indexOfAmp = line . indexOf ( ' & ' , after ) ; <nl> - if ( indexOfAmp > = 0 <nl> + if ( indexOfAmp > = 1 <nl> & & containsWhitespaceBetween ( after , indexOfAmp , line ) ) { <nl> if ( indexOfAmp - after = = 0 ) { <nl> log ( ast . getLineNo ( ) , after , MSG _ WS _ NOT _ PRECEDED , " & " ) ; <nl> @ @ - 271 , 7 + 271 , 7 @ @ public class GenericWhitespaceCheck extends AbstractCheck { <nl> } <nl> / / Whitespace not required <nl> else if ( Character . isWhitespace ( line . charAt ( before ) ) <nl> - & & ! CommonUtils . hasWhitespaceBefore ( before , line ) ) { <nl> + & & ! containsWhitespaceBefore ( before , line ) ) { <nl> log ( ast . getLineNo ( ) , before , MSG _ WS _ PRECEDED , OPEN _ ANGLE _ BRACKET ) ; <nl> } <nl> } <nl> @ @ - 303 , 6 + 303 , 18 @ @ public class GenericWhitespaceCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> + * Returns whether the specified string contains only whitespace up to specified index . <nl> + * <nl> + * @ param before the index to start the search from . Inclusive <nl> + * @ param line the index to finish the search . Exclusive <nl> + * @ return { @ code true } if there are only whitespaces , <nl> + * false if there is nothing before or some other characters <nl> + * / <nl> + private static boolean containsWhitespaceBefore ( int before , String line ) { <nl> + return before ! = 0 & & CommonUtils . hasWhitespaceBefore ( before , line ) ; <nl> + } <nl> + <nl> + / * * <nl> * Checks whether given character is valid to be right after generic ends . <nl> * @ param charAfter character to check <nl> * @ return checks if given character is valid <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java <nl> index 3fc287e . . 64386b2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java <nl> @ @ - 108 , 12 + 108 , 12 @ @ public class NoWhitespaceBeforeCheck <nl> final String line = getLine ( ast . getLineNo ( ) - 1 ) ; <nl> final int before = ast . getColumnNo ( ) - 1 ; <nl> <nl> - if ( ( before < 0 | | Character . isWhitespace ( line . charAt ( before ) ) ) <nl> + if ( ( before = = - 1 | | Character . isWhitespace ( line . charAt ( before ) ) ) <nl> & & ! isInEmptyForInitializer ( ast ) ) { <nl> <nl> boolean flag = ! allowLineBreaks ; <nl> / / verify all characters before ' . ' are whitespace <nl> - for ( int i = 0 ; ! flag & & i < before ; i + + ) { <nl> + for ( int i = 0 ; ! flag & & i < = before - 1 ; i + + ) { <nl> if ( ! Character . isWhitespace ( line . charAt ( i ) ) ) { <nl> flag = true ; <nl> break ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> index ad01f13 . . 59d3e4e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> @ @ - 166 , 6 + 166 , 31 @ @ public class EmptyLineSeparatorCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testPrePreviousLineIsEmpty ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( EmptyLineSeparatorCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowMultipleEmptyLines " , " false " ) ; <nl> + final String [ ] expected = { <nl> + " 3 : " + getCheckMessage ( MSG _ MULTIPLE _ LINES , " package " ) , <nl> + } ; <nl> + verify ( checkConfig , <nl> + getPath ( " InputEmptyLineSeparatorPrePreviousLineIsEmpty . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testPreviousLineEmptiness ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( EmptyLineSeparatorCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowMultipleEmptyLinesInsideClassMembers " , " false " ) ; <nl> + final String [ ] expected = { <nl> + " 11 : " + getCheckMessage ( MSG _ MULTIPLE _ LINES _ INSIDE ) , <nl> + " 16 : " + getCheckMessage ( MSG _ MULTIPLE _ LINES _ INSIDE ) , <nl> + " 22 : " + getCheckMessage ( MSG _ MULTIPLE _ LINES _ INSIDE ) , <nl> + " 31 : " + getCheckMessage ( MSG _ MULTIPLE _ LINES _ INSIDE ) , <nl> + } ; <nl> + verify ( checkConfig , <nl> + getPath ( " InputEmptyLineSeparatorPreviousLineEmptiness . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testDisAllowMultipleEmptyLinesInsideClassMembers ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( EmptyLineSeparatorCheck . class ) ; <nl> checkConfig . addAttribute ( " allowMultipleEmptyLinesInsideClassMembers " , " false " ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> index 0008b4f . . af324da 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> @ @ - 96 , 6 + 96 , 23 @ @ public class GenericWhitespaceCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testAtTheStartOfTheLine ( ) throws Exception { <nl> + final String [ ] expected = { <nl> + " 10 : 1 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> + " 12 : 1 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputGenericWhitespaceAtStartOfTheLine . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNestedGeneric ( ) throws Exception { <nl> + final String [ ] expected = { <nl> + " 11 : 2 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " & " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputGenericWhitespaceNested . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testList ( ) throws Exception { <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , getPath ( " InputGenericWhitespaceList . java " ) , expected ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java <nl> index b6c57a9 . . 39d096f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java <nl> @ @ - 95 , 4 + 95 , 23 @ @ public class NoWhitespaceBeforeCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeMethodRef . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testDotAtTheStartOfTheLine ( ) throws Exception { <nl> + checkConfig . addAttribute ( " tokens " , " DOT " ) ; <nl> + final String [ ] expected = { <nl> + " 2 : 1 : " + getCheckMessage ( MSG _ KEY , " . " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeAtStartOfTheLine . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMethodRefAtTheStartOfTheLine ( ) throws Exception { <nl> + checkConfig . addAttribute ( " tokens " , " METHOD _ REF " ) ; <nl> + checkConfig . addAttribute ( " allowLineBreaks " , " yes " ) ; <nl> + final String [ ] expected = { <nl> + " 14 : 2 : " + getCheckMessage ( MSG _ KEY , " : : " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeAtStartOfTheLine . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> index 8107926 . . 1537765 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> @ @ - 435 , 4 + 435 , 14 @ @ public class ParenPadCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputParenPadLambdaOnlyWithSpace . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testLambdaCheckOnlyWithSpace1 ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ParenPadCheck . class ) ; <nl> + checkConfig . addAttribute ( " option " , PadOption . SPACE . toString ( ) ) ; <nl> + final String [ ] expected = { <nl> + " 5 : 2 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " ) " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputParenPadStartOfTheLine . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java <nl> index d1324b0 . . 0a283d7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java <nl> @ @ - 112 , 6 + 112 , 15 @ @ public class WhitespaceAroundCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testStartOfTheLine ( ) <nl> + throws Exception { <nl> + final String [ ] expected = { <nl> + " 5 : 2 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " { " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputWhitespaceAroundStartOfTheLine . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testBraces ( ) <nl> throws Exception { <nl> final String [ ] expected = { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorPrePreviousLineIsEmpty . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorPrePreviousLineIsEmpty . java <nl> new file mode 100644 <nl> index 0000000 . . a80435c <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorPrePreviousLineIsEmpty . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . emptylineseparator ; <nl> + <nl> + public class InputEmptyLineSeparatorPrePreviousLineIsEmpty { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorPreviousLineEmptiness . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorPreviousLineEmptiness . java <nl> new file mode 100644 <nl> index 0000000 . . d8ab51d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorPreviousLineEmptiness . java <nl> @ @ - 0 , 0 + 1 , 34 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . emptylineseparator ; <nl> + <nl> + public class InputEmptyLineSeparatorPreviousLineEmptiness { <nl> + private static final int MULTIPLICATOR ; <nl> + <nl> + private int base ; <nl> + <nl> + static { <nl> + MULTIPLICATOR = 5 ; <nl> + <nl> + <nl> + } <nl> + <nl> + { <nl> + <nl> + <nl> + base = 33 ; <nl> + } <nl> + <nl> + public InputEmptyLineSeparatorPreviousLineEmptiness ( int base ) { <nl> + <nl> + <nl> + this . base = base ; <nl> + } <nl> + <nl> + public InputEmptyLineSeparatorPreviousLineEmptiness ( ) { <nl> + } <nl> + <nl> + public static int increment ( int value ) { <nl> + <nl> + <nl> + return value * MULTIPLICATOR + 1 ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace / InputGenericWhitespaceAtStartOfTheLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace / InputGenericWhitespaceAtStartOfTheLine . java <nl> new file mode 100644 <nl> index 0000000 . . 466a0f8 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace / InputGenericWhitespaceAtStartOfTheLine . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . genericwhitespace ; <nl> + <nl> + import java . util . Collections ; <nl> + <nl> + class InputGenericWhitespaceAtStartOfTheLine { <nl> + <nl> + public String getConstructor ( Class < ? > . . . parameterTypes ) <nl> + { <nl> + Collections . < Object <nl> + > emptySet ( ) ; <nl> + Collections . <nl> + < Object > emptySet ( ) ; <nl> + return " pitest makes me cry " ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace / InputGenericWhitespaceNested . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace / InputGenericWhitespaceNested . java <nl> new file mode 100644 <nl> index 0000000 . . 79fd3f7 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace / InputGenericWhitespaceNested . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . genericwhitespace ; <nl> + <nl> + public class InputGenericWhitespaceNested { <nl> + interface IntEnum { / * inner enum * / } <nl> + <nl> + interface NumberEnum < T > { / * inner enum * / } <nl> + <nl> + static class IntEnumValue implements IntEnum , NumberEnum < Integer > { } <nl> + <nl> + static class IntEnumValueType < E extends Enum < E <nl> + > & IntEnum & NumberEnum < E > > { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeAtStartOfTheLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeAtStartOfTheLine . java <nl> new file mode 100644 <nl> index 0000000 . . f79da88 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeAtStartOfTheLine . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace <nl> + . nowhitespacebefore ; <nl> + <nl> + import java . util . function . Supplier ; <nl> + <nl> + public class InputNoWhitespaceBeforeAtStartOfTheLine { <nl> + public static class A { <nl> + private A ( ) { <nl> + } <nl> + } <nl> + <nl> + public < V > void methodName ( V value ) { <nl> + Supplier < ? > t = <nl> + A : : new ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad / InputParenPadStartOfTheLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad / InputParenPadStartOfTheLine . java <nl> new file mode 100644 <nl> index 0000000 . . 7ebcd6e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad / InputParenPadStartOfTheLine . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . parenpad ; <nl> + <nl> + public class InputParenPadStartOfTheLine { <nl> + public String checkSmth ( String <nl> + a ) { <nl> + return a + 1 ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / whitespacearound / InputWhitespaceAroundStartOfTheLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / whitespacearound / InputWhitespaceAroundStartOfTheLine . java <nl> new file mode 100644 <nl> index 0000000 . . 0833d9e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / whitespacearound / InputWhitespaceAroundStartOfTheLine . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . whitespacearound ; <nl> + <nl> + public class InputWhitespaceAroundStartOfTheLine { <nl> + public void checkSmth ( <nl> + ) { <nl> + final int SOMETHING = 1 ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java <nl> index 5960490 . . f6a6b1b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java <nl> @ @ - 23 , 8 + 23 , 8 @ @ import java . util . regex . Pattern ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> - import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 82 , 7 + 82 , 16 @ @ public class IllegalTokenTextCheck <nl> <nl> @ Override <nl> public int [ ] getAcceptableTokens ( ) { <nl> - return TokenUtils . getAllTokenIds ( ) ; <nl> + return new int [ ] { <nl> + TokenTypes . NUM _ DOUBLE , <nl> + TokenTypes . NUM _ FLOAT , <nl> + TokenTypes . NUM _ INT , <nl> + TokenTypes . NUM _ LONG , <nl> + TokenTypes . IDENT , <nl> + TokenTypes . COMMENT _ CONTENT , <nl> + TokenTypes . STRING _ LITERAL , <nl> + TokenTypes . CHAR _ LITERAL , <nl> + } ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java <nl> index 85d3ae0 . . aad1d56 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java <nl> @ @ - 103 , 6 + 103 , 14 @ @ public final class TokenUtils { <nl> } <nl> <nl> / * * <nl> + * Get total number of TokenTypes . <nl> + * @ return total number of TokenTypes . <nl> + * / <nl> + public static int getTokenTypesTotalNumber ( ) { <nl> + return TOKEN _ IDS . length ; <nl> + } <nl> + <nl> + / * * <nl> * Get all token IDs that are available in TokenTypes . <nl> * @ return array of token IDs <nl> * / <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java <nl> index bc4843a . . afb5055 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java <nl> @ @ - 23 , 12 + 23 , 16 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalTokenTextChec <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> <nl> public class IllegalTokenTextCheckTest <nl> extends BaseCheckTestSupport { <nl> @ @ - 122 , 4 + 126 , 29 @ @ public class IllegalTokenTextCheckTest <nl> verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testAcceptableTokensMakeSense ( ) { <nl> + final int expectedTokenTypesTotalNumber = 169 ; <nl> + Assert . assertEquals ( " Total number of TokenTypes has changed , acceptable tokens in " <nl> + + " IllegalTokenTextCheck need to be reconsidered . " , <nl> + expectedTokenTypesTotalNumber , TokenUtils . getTokenTypesTotalNumber ( ) ) ; <nl> + <nl> + final IllegalTokenTextCheck check = new IllegalTokenTextCheck ( ) ; <nl> + final int [ ] allowedTokens = check . getAcceptableTokens ( ) ; <nl> + final List < Integer > tokenTypesWithMutableText = Arrays . asList ( <nl> + TokenTypes . NUM _ DOUBLE , <nl> + TokenTypes . NUM _ FLOAT , <nl> + TokenTypes . NUM _ INT , <nl> + TokenTypes . NUM _ LONG , <nl> + TokenTypes . IDENT , <nl> + TokenTypes . COMMENT _ CONTENT , <nl> + TokenTypes . STRING _ LITERAL , <nl> + TokenTypes . CHAR _ LITERAL <nl> + ) ; <nl> + for ( int tokenType : allowedTokens ) { <nl> + Assert . assertTrue ( TokenUtils . getTokenName ( tokenType ) + " should not be allowed " <nl> + + " in this check as its text is a constant ( IllegalTokenCheck should be used for " <nl> + + " such cases ) . " , tokenTypesWithMutableText . contains ( tokenType ) ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> index cafb4e6 . . 4ef7b73 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> @ @ - 119 , 43 + 119 , 9 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> Collectors . toSet ( ) ) ) ; <nl> / / we have no need to block specific token text <nl> CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " IllegalTokenText " , <nl> - Stream . of ( " LITERAL _ SUPER " , " LITERAL _ ASSERT " , " ENUM _ CONSTANT _ DEF " , <nl> - " TYPE _ PARAMETERS " , " TYPE _ UPPER _ BOUNDS " , " NUM _ DOUBLE " , " LITERAL _ SWITCH " , <nl> - " ANNOTATIONS " , " LITERAL _ SHORT " , " LITERAL _ PROTECTED " , " FOR _ CONDITION " , <nl> - " FOR _ INIT " , " LITERAL _ LONG " , " MINUS " , " OBJBLOCK " , " LITERAL _ NULL " , <nl> - " ANNOTATION " , " LITERAL _ TRUE " , " COMMENT _ CONTENT " , " LITERAL _ CHAR " , <nl> - " PARAMETER _ DEF " , " POST _ DEC " , " ANNOTATION _ FIELD _ DEF " , " BLOCK _ COMMENT _ END " , <nl> - " TYPE " , " LITERAL _ INT " , " BSR " , " ENUM " , " LABELED _ STAT " , <nl> - " ANNOTATION _ MEMBER _ VALUE _ PAIR " , " TYPECAST " , " LITERAL _ SYNCHRONIZED " , <nl> - " PLUS _ ASSIGN " , " DOT " , " LPAREN " , " LITERAL _ IF " , " LITERAL _ CATCH " , " BAND " , <nl> - " INTERFACE _ DEF " , " LOR " , " BNOT " , " METHOD _ CALL " , " AT " , " ELLIPSIS " , <nl> - " ARRAY _ INIT " , " FOR _ EACH _ CLAUSE " , " LITERAL _ THROWS " , " CHAR _ LITERAL " , <nl> - " CASE _ GROUP " , " POST _ INC " , " SEMI " , " LITERAL _ FINALLY " , " ASSIGN " , <nl> - " RESOURCE _ SPECIFICATION " , " STATIC _ IMPORT " , " GENERIC _ START " , " IMPORT " , " SL " , <nl> - " VARIABLE _ DEF " , " LITERAL _ DOUBLE " , " RCURLY " , " RESOURCE " , " SR " , " COMMA " , <nl> - " BAND _ ASSIGN " , " METHOD _ DEF " , " LITERAL _ VOID " , " NUM _ LONG " , <nl> - " LITERAL _ TRANSIENT " , " LITERAL _ THIS " , " LCURLY " , " MINUS _ ASSIGN " , <nl> - " TYPE _ LOWER _ BOUNDS " , " TYPE _ ARGUMENT " , " LITERAL _ CLASS " , " INSTANCE _ INIT " , <nl> - " DIV " , " LITERAL _ VOLATILE " , " STAR " , " UNARY _ MINUS " , " FOR _ ITERATOR " , <nl> - " NOT _ EQUAL " , " LE " , " LITERAL _ INTERFACE " , " LITERAL _ FLOAT " , <nl> - " LITERAL _ INSTANCEOF " , " BOR _ ASSIGN " , " LT " , " SL _ ASSIGN " , " ELIST " , <nl> - " ANNOTATION _ ARRAY _ INIT " , " MODIFIERS " , " LITERAL _ BREAK " , " EXTENDS _ CLAUSE " , <nl> - " TYPE _ PARAMETER " , " LITERAL _ DEFAULT " , " STATIC _ INIT " , " BSR _ ASSIGN " , <nl> - " TYPE _ EXTENSION _ AND " , " BOR " , " LITERAL _ PRIVATE " , " LITERAL _ THROW " , <nl> - " LITERAL _ BYTE " , " BXOR " , " WILDCARD _ TYPE " , " FINAL " , " PARAMETERS " , " RPAREN " , <nl> - " SR _ ASSIGN " , " UNARY _ PLUS " , " EMPTY _ STAT " , " LITERAL _ STATIC " , <nl> - " LITERAL _ CONTINUE " , " STAR _ ASSIGN " , " LAMBDA " , " RBRACK " , " BXOR _ ASSIGN " , <nl> - " CTOR _ CALL " , " LITERAL _ FALSE " , " DO _ WHILE " , " LITERAL _ PUBLIC " , <nl> - " LITERAL _ WHILE " , " PLUS " , " INC " , " CTOR _ DEF " , " GENERIC _ END " , " DIV _ ASSIGN " , <nl> - " SLIST " , " LNOT " , " LAND " , " LITERAL _ ELSE " , " ABSTRACT " , " STRICTFP " , <nl> - " QUESTION " , " LITERAL _ NEW " , " LITERAL _ RETURN " , " SINGLE _ LINE _ COMMENT " , <nl> - " INDEX _ OP " , " EXPR " , " BLOCK _ COMMENT _ BEGIN " , " PACKAGE _ DEF " , <nl> - " IMPLEMENTS _ CLAUSE " , " NUM _ FLOAT " , " LITERAL _ DO " , " EOF " , " GE " , " RESOURCES " , <nl> - " MOD " , " DEC " , " EQUAL " , " LITERAL _ BOOLEAN " , " CLASS _ DEF " , " COLON " , <nl> - " LITERAL _ TRY " , " ENUM _ DEF " , " GT " , " NUM _ INT " , " ANNOTATION _ DEF " , <nl> - " LITERAL _ NATIVE " , " METHOD _ REF " , " TYPE _ ARGUMENTS " , " DOUBLE _ COLON " , " IDENT " , <nl> - " MOD _ ASSIGN " , " LITERAL _ FOR " , " SUPER _ CTOR _ CALL " , " STRING _ LITERAL " , <nl> - " ARRAY _ DECLARATOR " , " LITERAL _ CASE " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + Stream . of ( " NUM _ DOUBLE " , " NUM _ FLOAT " , " NUM _ INT " , " NUM _ LONG " , " IDENT " , <nl> + " COMMENT _ CONTENT " , " STRING _ LITERAL " , " CHAR _ LITERAL " ) <nl> + . collect ( Collectors . toSet ( ) ) ) ; <nl> / / we do not use this check as it is deprecated <nl> CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " WriteTag " , <nl> Stream . of ( " ENUM _ CONSTANT _ DEF " , " METHOD _ DEF " , " CTOR _ DEF " , " ANNOTATION _ FIELD _ DEF " ) <nl> @ @ - 234 , 37 + 200 , 8 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> . collect ( Collectors . toSet ( ) ) ) ; <nl> GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " IllegalTokenText " , Stream . of ( <nl> / / all other java tokens and text are allowed <nl> - " LITERAL _ SUPER " , " LITERAL _ ASSERT " , " ENUM _ CONSTANT _ DEF " , " TYPE _ PARAMETERS " , <nl> - " TYPE _ UPPER _ BOUNDS " , " NUM _ DOUBLE " , " LITERAL _ SWITCH " , " ANNOTATIONS " , <nl> - " LITERAL _ SHORT " , " LITERAL _ PROTECTED " , " FOR _ CONDITION " , " FOR _ INIT " , " LITERAL _ LONG " , <nl> - " MINUS " , " OBJBLOCK " , " LITERAL _ NULL " , " ANNOTATION " , " LITERAL _ TRUE " , <nl> - " COMMENT _ CONTENT " , " LITERAL _ CHAR " , " PARAMETER _ DEF " , " POST _ DEC " , <nl> - " ANNOTATION _ FIELD _ DEF " , " BLOCK _ COMMENT _ END " , " TYPE " , " LITERAL _ INT " , " BSR " , " ENUM " , <nl> - " LABELED _ STAT " , " ANNOTATION _ MEMBER _ VALUE _ PAIR " , " TYPECAST " , " LITERAL _ SYNCHRONIZED " , <nl> - " PLUS _ ASSIGN " , " DOT " , " LPAREN " , " LITERAL _ IF " , " LITERAL _ CATCH " , " BAND " , <nl> - " INTERFACE _ DEF " , " LOR " , " BNOT " , " METHOD _ CALL " , " AT " , " ELLIPSIS " , " ARRAY _ INIT " , <nl> - " FOR _ EACH _ CLAUSE " , " LITERAL _ THROWS " , " CASE _ GROUP " , " POST _ INC " , " SEMI " , <nl> - " LITERAL _ FINALLY " , " ASSIGN " , " RESOURCE _ SPECIFICATION " , " STATIC _ IMPORT " , <nl> - " GENERIC _ START " , " IMPORT " , " SL " , " VARIABLE _ DEF " , " LITERAL _ DOUBLE " , " RCURLY " , <nl> - " RESOURCE " , " SR " , " COMMA " , " BAND _ ASSIGN " , " METHOD _ DEF " , " LITERAL _ VOID " , <nl> - " NUM _ LONG " , " LITERAL _ TRANSIENT " , " LITERAL _ THIS " , " LCURLY " , " MINUS _ ASSIGN " , <nl> - " TYPE _ LOWER _ BOUNDS " , " TYPE _ ARGUMENT " , " LITERAL _ CLASS " , " INSTANCE _ INIT " , " DIV " , <nl> - " LITERAL _ VOLATILE " , " STAR " , " UNARY _ MINUS " , " FOR _ ITERATOR " , " NOT _ EQUAL " , " LE " , <nl> - " LITERAL _ INTERFACE " , " LITERAL _ FLOAT " , " LITERAL _ INSTANCEOF " , " BOR _ ASSIGN " , " LT " , <nl> - " SL _ ASSIGN " , " ELIST " , " ANNOTATION _ ARRAY _ INIT " , " MODIFIERS " , " LITERAL _ BREAK " , <nl> - " EXTENDS _ CLAUSE " , " TYPE _ PARAMETER " , " LITERAL _ DEFAULT " , " STATIC _ INIT " , " BSR _ ASSIGN " , <nl> - " TYPE _ EXTENSION _ AND " , " BOR " , " LITERAL _ PRIVATE " , " LITERAL _ THROW " , " LITERAL _ BYTE " , <nl> - " BXOR " , " WILDCARD _ TYPE " , " FINAL " , " PARAMETERS " , " RPAREN " , " SR _ ASSIGN " , <nl> - " UNARY _ PLUS " , " EMPTY _ STAT " , " LITERAL _ STATIC " , " LITERAL _ CONTINUE " , " STAR _ ASSIGN " , <nl> - " LAMBDA " , " RBRACK " , " BXOR _ ASSIGN " , " CTOR _ CALL " , " LITERAL _ FALSE " , " DO _ WHILE " , <nl> - " LITERAL _ PUBLIC " , " LITERAL _ WHILE " , " PLUS " , " INC " , " CTOR _ DEF " , " GENERIC _ END " , <nl> - " DIV _ ASSIGN " , " SLIST " , " LNOT " , " LAND " , " LITERAL _ ELSE " , " ABSTRACT " , " STRICTFP " , <nl> - " QUESTION " , " LITERAL _ NEW " , " LITERAL _ RETURN " , " SINGLE _ LINE _ COMMENT " , " INDEX _ OP " , <nl> - " EXPR " , " BLOCK _ COMMENT _ BEGIN " , " PACKAGE _ DEF " , " IMPLEMENTS _ CLAUSE " , " NUM _ FLOAT " , <nl> - " LITERAL _ DO " , " EOF " , " GE " , " RESOURCES " , " MOD " , " DEC " , " EQUAL " , " LITERAL _ BOOLEAN " , <nl> - " CLASS _ DEF " , " COLON " , " LITERAL _ TRY " , " ENUM _ DEF " , " GT " , " NUM _ INT " , " ANNOTATION _ DEF " , <nl> - " LITERAL _ NATIVE " , " METHOD _ REF " , " TYPE _ ARGUMENTS " , " DOUBLE _ COLON " , " IDENT " , <nl> - " MOD _ ASSIGN " , " LITERAL _ FOR " , " SUPER _ CTOR _ CALL " , " ARRAY _ DECLARATOR " , " LITERAL _ CASE " ) <nl> + " NUM _ DOUBLE " , " NUM _ FLOAT " , " NUM _ INT " , " NUM _ LONG " , " IDENT " , <nl> + " COMMENT _ CONTENT " , " STRING _ LITERAL " , " CHAR _ LITERAL " ) <nl> . collect ( Collectors . toSet ( ) ) ) ; <nl> GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " OperatorWrap " , Stream . of ( <nl> / / specifically allowed via ' 4 . 5 . 1 Where to break ' because the following are <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 5e49c09 . . d02afcf 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 1654 , 7 + 1654 , 8 @ @ class SomeClass <nl> < section name = " IllegalTokenText " > <nl> < subsection name = " Description " > <nl> < p > <nl> - Checks for illegal token text . <nl> + Checks specified tokens text for matching an illegal pattern from <nl> + < code > format < / code > property . By default no tokens are specified . <nl> < / p > <nl> < / subsection > <nl> <nl> @ @ - 1688 , 8 + 1689 , 15 @ @ class SomeClass <nl> < tr > <nl> < td > tokens < / td > <nl> < td > tokens to check < / td > <nl> - < td > subset of tokens < a <nl> - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html " > TokenTypes < / a > . <nl> + < td > subset of tokens <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # NUM _ DOUBLE " > NUM _ DOUBLE < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # NUM _ FLOAT " > NUM _ FLOAT < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # NUM _ INT " > NUM _ INT < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # NUM _ LONG " > NUM _ LONG < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # IDENT " > IDENT < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # COMMENT _ CONTENT " > COMMENT _ CONTENT < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STRING _ LITERAL " > STRING _ LITERAL < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # CHAR _ LITERAL " > CHAR _ LITERAL < / a > . <nl> < / td > <nl> < td > empty < / td > <nl> < / tr >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 91ceeba . . ebc1250 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2044 , 7 + 2044 , 7 @ @ 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . checks . whitespace . * < / param > 
 < / targetTests > 
 - < mutationThreshold > 95 < / mutationThreshold > 
 + < mutationThreshold > 98 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 index 080bb73 . . 3b25204 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 @ @ - 328 , 7 + 328 , 7 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { 
 * / 
 private void processMultipleLinesInside ( DetailAST ast ) { 
 final int astType = ast . getType ( ) ; 
 - if ( isClassMemberBlock ( astType ) ) { 
 + if ( astType ! = TokenTypes . CLASS _ DEF & & isClassMemberBlock ( astType ) ) { 
 final List < Integer > emptyLines = getEmptyLines ( ast ) ; 
 final List < Integer > emptyLinesToLog = getEmptyLinesToLog ( emptyLines ) ; 
 
 @ @ - 360 , 12 + 360 , 14 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { 
 final DetailAST lastToken = ast . getLastChild ( ) . getLastChild ( ) ; 
 int lastTokenLineNo = 0 ; 
 if ( lastToken ! = null ) { 
 - lastTokenLineNo = lastToken . getLineNo ( ) ; 
 + / / - 1 as count starts from 0 
 + / / - 2 as last token line cannot be empty , because it is a RCURLY 
 + lastTokenLineNo = lastToken . getLineNo ( ) - 2 ; 
 } 
 final List < Integer > emptyLines = new ArrayList < > ( ) ; 
 final FileContents fileContents = getFileContents ( ) ; 
 
 - for ( int lineNo = ast . getLineNo ( ) ; lineNo < lastTokenLineNo ; lineNo + + ) { 
 + for ( int lineNo = ast . getLineNo ( ) ; lineNo < = lastTokenLineNo ; lineNo + + ) { 
 if ( fileContents . lineIsBlank ( lineNo ) ) { 
 emptyLines . add ( lineNo ) ; 
 } 
 @ @ - 380 , 7 + 382 , 7 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { 
 * / 
 private static List < Integer > getEmptyLinesToLog ( List < Integer > emptyLines ) { 
 final List < Integer > emptyLinesToLog = new ArrayList < > ( ) ; 
 - if ( emptyLines . size ( ) > 1 ) { 
 + if ( emptyLines . size ( ) > = 2 ) { 
 int previousEmptyLineNo = emptyLines . get ( 0 ) ; 
 for ( int emptyLineNo : emptyLines ) { 
 if ( previousEmptyLineNo + 1 = = emptyLineNo ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 index 789204a . . 79c031f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 @ @ - 150 , 7 + 150 , 7 @ @ public class GenericWhitespaceCheck extends AbstractCheck { 
 final int after = ast . getColumnNo ( ) + 1 ; 
 
 if ( before > = 0 & & Character . isWhitespace ( line . charAt ( before ) ) 
 - & & ! CommonUtils . hasWhitespaceBefore ( before , line ) ) { 
 + & & ! containsWhitespaceBefore ( before , line ) ) { 
 log ( ast . getLineNo ( ) , before , MSG _ WS _ PRECEDED , CLOSE _ ANGLE _ BRACKET ) ; 
 } 
 
 @ @ - 183 , 7 + 183 , 7 @ @ public class GenericWhitespaceCheck extends AbstractCheck { 
 / / should be whitespace if followed by & - + 
 / / 
 final int indexOfAmp = line . indexOf ( ' & ' , after ) ; 
 - if ( indexOfAmp > = 0 
 + if ( indexOfAmp > = 1 
 & & containsWhitespaceBetween ( after , indexOfAmp , line ) ) { 
 if ( indexOfAmp - after = = 0 ) { 
 log ( ast . getLineNo ( ) , after , MSG _ WS _ NOT _ PRECEDED , " & " ) ; 
 @ @ - 271 , 7 + 271 , 7 @ @ public class GenericWhitespaceCheck extends AbstractCheck { 
 } 
 / / Whitespace not required 
 else if ( Character . isWhitespace ( line . charAt ( before ) ) 
 - & & ! CommonUtils . hasWhitespaceBefore ( before , line ) ) { 
 + & & ! containsWhitespaceBefore ( before , line ) ) { 
 log ( ast . getLineNo ( ) , before , MSG _ WS _ PRECEDED , OPEN _ ANGLE _ BRACKET ) ; 
 } 
 } 
 @ @ - 303 , 6 + 303 , 18 @ @ public class GenericWhitespaceCheck extends AbstractCheck { 
 } 
 
 / * * 
 + * Returns whether the specified string contains only whitespace up to specified index . 
 + * 
 + * @ param before the index to start the search from . Inclusive 
 + * @ param line the index to finish the search . Exclusive 
 + * @ return { @ code true } if there are only whitespaces , 
 + * false if there is nothing before or some other characters 
 + * / 
 + private static boolean containsWhitespaceBefore ( int before , String line ) { 
 + return before ! = 0 & & CommonUtils . hasWhitespaceBefore ( before , line ) ; 
 + } 
 + 
 + / * * 
 * Checks whether given character is valid to be right after generic ends . 
 * @ param charAfter character to check 
 * @ return checks if given character is valid 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java 
 index 3fc287e . . 64386b2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java 
 @ @ - 108 , 12 + 108 , 12 @ @ public class NoWhitespaceBeforeCheck 
 final String line = getLine ( ast . getLineNo ( ) - 1 ) ; 
 final int before = ast . getColumnNo ( ) - 1 ; 
 
 - if ( ( before < 0 | | Character . isWhitespace ( line . charAt ( before ) ) ) 
 + if ( ( before = = - 1 | | Character . isWhitespace ( line . charAt ( before ) ) ) 
 & & ! isInEmptyForInitializer ( ast ) ) { 
 
 boolean flag = ! allowLineBreaks ; 
 / / verify all characters before ' . ' are whitespace 
 - for ( int i = 0 ; ! flag & & i < before ; i + + ) { 
 + for ( int i = 0 ; ! flag & & i < = before - 1 ; i + + ) { 
 if ( ! Character . isWhitespace ( line . charAt ( i ) ) ) { 
 flag = true ; 
 break ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 index ad01f13 . . 59d3e4e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 @ @ - 166 , 6 + 166 , 31 @ @ public class EmptyLineSeparatorCheckTest 
 } 
 
 @ Test 
 + public void testPrePreviousLineIsEmpty ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( EmptyLineSeparatorCheck . class ) ; 
 + checkConfig . addAttribute ( " allowMultipleEmptyLines " , " false " ) ; 
 + final String [ ] expected = { 
 + " 3 : " + getCheckMessage ( MSG _ MULTIPLE _ LINES , " package " ) , 
 + } ; 
 + verify ( checkConfig , 
 + getPath ( " InputEmptyLineSeparatorPrePreviousLineIsEmpty . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testPreviousLineEmptiness ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( EmptyLineSeparatorCheck . class ) ; 
 + checkConfig . addAttribute ( " allowMultipleEmptyLinesInsideClassMembers " , " false " ) ; 
 + final String [ ] expected = { 
 + " 11 : " + getCheckMessage ( MSG _ MULTIPLE _ LINES _ INSIDE ) , 
 + " 16 : " + getCheckMessage ( MSG _ MULTIPLE _ LINES _ INSIDE ) , 
 + " 22 : " + getCheckMessage ( MSG _ MULTIPLE _ LINES _ INSIDE ) , 
 + " 31 : " + getCheckMessage ( MSG _ MULTIPLE _ LINES _ INSIDE ) , 
 + } ; 
 + verify ( checkConfig , 
 + getPath ( " InputEmptyLineSeparatorPreviousLineEmptiness . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testDisAllowMultipleEmptyLinesInsideClassMembers ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( EmptyLineSeparatorCheck . class ) ; 
 checkConfig . addAttribute ( " allowMultipleEmptyLinesInsideClassMembers " , " false " ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 index 0008b4f . . af324da 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 @ @ - 96 , 6 + 96 , 23 @ @ public class GenericWhitespaceCheckTest 
 } 
 
 @ Test 
 + public void testAtTheStartOfTheLine ( ) throws Exception { 
 + final String [ ] expected = { 
 + " 10 : 1 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 + " 12 : 1 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputGenericWhitespaceAtStartOfTheLine . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testNestedGeneric ( ) throws Exception { 
 + final String [ ] expected = { 
 + " 11 : 2 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " & " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputGenericWhitespaceNested . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testList ( ) throws Exception { 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , getPath ( " InputGenericWhitespaceList . java " ) , expected ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java 
 index b6c57a9 . . 39d096f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java 
 @ @ - 95 , 4 + 95 , 23 @ @ public class NoWhitespaceBeforeCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeMethodRef . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testDotAtTheStartOfTheLine ( ) throws Exception { 
 + checkConfig . addAttribute ( " tokens " , " DOT " ) ; 
 + final String [ ] expected = { 
 + " 2 : 1 : " + getCheckMessage ( MSG _ KEY , " . " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeAtStartOfTheLine . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testMethodRefAtTheStartOfTheLine ( ) throws Exception { 
 + checkConfig . addAttribute ( " tokens " , " METHOD _ REF " ) ; 
 + checkConfig . addAttribute ( " allowLineBreaks " , " yes " ) ; 
 + final String [ ] expected = { 
 + " 14 : 2 : " + getCheckMessage ( MSG _ KEY , " : : " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeAtStartOfTheLine . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 index 8107926 . . 1537765 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 @ @ - 435 , 4 + 435 , 14 @ @ public class ParenPadCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputParenPadLambdaOnlyWithSpace . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testLambdaCheckOnlyWithSpace1 ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ParenPadCheck . class ) ; 
 + checkConfig . addAttribute ( " option " , PadOption . SPACE . toString ( ) ) ; 
 + final String [ ] expected = { 
 + " 5 : 2 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " ) " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputParenPadStartOfTheLine . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java 
 index d1324b0 . . 0a283d7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java 
 @ @ - 112 , 6 + 112 , 15 @ @ public class WhitespaceAroundCheckTest 
 } 
 
 @ Test 
 + public void testStartOfTheLine ( ) 
 + throws Exception { 
 + final String [ ] expected = { 
 + " 5 : 2 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " { " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputWhitespaceAroundStartOfTheLine . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testBraces ( ) 
 throws Exception { 
 final String [ ] expected = { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorPrePreviousLineIsEmpty . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorPrePreviousLineIsEmpty . java 
 new file mode 100644 
 index 0000000 . . a80435c 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorPrePreviousLineIsEmpty . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . emptylineseparator ; 
 + 
 + public class InputEmptyLineSeparatorPrePreviousLineIsEmpty { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorPreviousLineEmptiness . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorPreviousLineEmptiness . java 
 new file mode 100644 
 index 0000000 . . d8ab51d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorPreviousLineEmptiness . java 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . emptylineseparator ; 
 + 
 + public class InputEmptyLineSeparatorPreviousLineEmptiness { 
 + private static final int MULTIPLICATOR ; 
 + 
 + private int base ; 
 + 
 + static { 
 + MULTIPLICATOR = 5 ; 
 + 
 + 
 + } 
 + 
 + { 
 + 
 + 
 + base = 33 ; 
 + } 
 + 
 + public InputEmptyLineSeparatorPreviousLineEmptiness ( int base ) { 
 + 
 + 
 + this . base = base ; 
 + } 
 + 
 + public InputEmptyLineSeparatorPreviousLineEmptiness ( ) { 
 + } 
 + 
 + public static int increment ( int value ) { 
 + 
 + 
 + return value * MULTIPLICATOR + 1 ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace / InputGenericWhitespaceAtStartOfTheLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace / InputGenericWhitespaceAtStartOfTheLine . java 
 new file mode 100644 
 index 0000000 . . 466a0f8 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace / InputGenericWhitespaceAtStartOfTheLine . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . genericwhitespace ; 
 + 
 + import java . util . Collections ; 
 + 
 + class InputGenericWhitespaceAtStartOfTheLine { 
 + 
 + public String getConstructor ( Class < ? > . . . parameterTypes ) 
 + { 
 + Collections . < Object 
 + > emptySet ( ) ; 
 + Collections . 
 + < Object > emptySet ( ) ; 
 + return " pitest makes me cry " ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace / InputGenericWhitespaceNested . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace / InputGenericWhitespaceNested . java 
 new file mode 100644 
 index 0000000 . . 79fd3f7 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace / InputGenericWhitespaceNested . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . genericwhitespace ; 
 + 
 + public class InputGenericWhitespaceNested { 
 + interface IntEnum { / * inner enum * / } 
 + 
 + interface NumberEnum < T > { / * inner enum * / } 
 + 
 + static class IntEnumValue implements IntEnum , NumberEnum < Integer > { } 
 + 
 + static class IntEnumValueType < E extends Enum < E 
 + > & IntEnum & NumberEnum < E > > { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeAtStartOfTheLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeAtStartOfTheLine . java 
 new file mode 100644 
 index 0000000 . . f79da88 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeAtStartOfTheLine . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace 
 + . nowhitespacebefore ; 
 + 
 + import java . util . function . Supplier ; 
 + 
 + public class InputNoWhitespaceBeforeAtStartOfTheLine { 
 + public static class A { 
 + private A ( ) { 
 + } 
 + } 
 + 
 + public < V > void methodName ( V value ) { 
 + Supplier < ? > t = 
 + A : : new ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad / InputParenPadStartOfTheLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad / InputParenPadStartOfTheLine . java 
 new file mode 100644 
 index 0000000 . . 7ebcd6e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad / InputParenPadStartOfTheLine . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . parenpad ; 
 + 
 + public class InputParenPadStartOfTheLine { 
 + public String checkSmth ( String 
 + a ) { 
 + return a + 1 ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / whitespacearound / InputWhitespaceAroundStartOfTheLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / whitespacearound / InputWhitespaceAroundStartOfTheLine . java 
 new file mode 100644 
 index 0000000 . . 0833d9e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / whitespacearound / InputWhitespaceAroundStartOfTheLine . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . whitespacearound ; 
 + 
 + public class InputWhitespaceAroundStartOfTheLine { 
 + public void checkSmth ( 
 + ) { 
 + final int SOMETHING = 1 ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java 
 index 5960490 . . f6a6b1b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java 
 @ @ - 23 , 8 + 23 , 8 @ @ import java . util . regex . Pattern ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 - import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 
 / * * 
 * < p > 
 @ @ - 82 , 7 + 82 , 16 @ @ public class IllegalTokenTextCheck 
 
 @ Override 
 public int [ ] getAcceptableTokens ( ) { 
 - return TokenUtils . getAllTokenIds ( ) ; 
 + return new int [ ] { 
 + TokenTypes . NUM _ DOUBLE , 
 + TokenTypes . NUM _ FLOAT , 
 + TokenTypes . NUM _ INT , 
 + TokenTypes . NUM _ LONG , 
 + TokenTypes . IDENT , 
 + TokenTypes . COMMENT _ CONTENT , 
 + TokenTypes . STRING _ LITERAL , 
 + TokenTypes . CHAR _ LITERAL , 
 + } ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java 
 index 85d3ae0 . . aad1d56 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java 
 @ @ - 103 , 6 + 103 , 14 @ @ public final class TokenUtils { 
 } 
 
 / * * 
 + * Get total number of TokenTypes . 
 + * @ return total number of TokenTypes . 
 + * / 
 + public static int getTokenTypesTotalNumber ( ) { 
 + return TOKEN _ IDS . length ; 
 + } 
 + 
 + / * * 
 * Get all token IDs that are available in TokenTypes . 
 * @ return array of token IDs 
 * / 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java 
 index bc4843a . . afb5055 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java 
 @ @ - 23 , 12 + 23 , 16 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalTokenTextChec 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 
 public class IllegalTokenTextCheckTest 
 extends BaseCheckTestSupport { 
 @ @ - 122 , 4 + 126 , 29 @ @ public class IllegalTokenTextCheckTest 
 verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; 
 } 
 
 + @ Test 
 + public void testAcceptableTokensMakeSense ( ) { 
 + final int expectedTokenTypesTotalNumber = 169 ; 
 + Assert . assertEquals ( " Total number of TokenTypes has changed , acceptable tokens in " 
 + + " IllegalTokenTextCheck need to be reconsidered . " , 
 + expectedTokenTypesTotalNumber , TokenUtils . getTokenTypesTotalNumber ( ) ) ; 
 + 
 + final IllegalTokenTextCheck check = new IllegalTokenTextCheck ( ) ; 
 + final int [ ] allowedTokens = check . getAcceptableTokens ( ) ; 
 + final List < Integer > tokenTypesWithMutableText = Arrays . asList ( 
 + TokenTypes . NUM _ DOUBLE , 
 + TokenTypes . NUM _ FLOAT , 
 + TokenTypes . NUM _ INT , 
 + TokenTypes . NUM _ LONG , 
 + TokenTypes . IDENT , 
 + TokenTypes . COMMENT _ CONTENT , 
 + TokenTypes . STRING _ LITERAL , 
 + TokenTypes . CHAR _ LITERAL 
 + ) ; 
 + for ( int tokenType : allowedTokens ) { 
 + Assert . assertTrue ( TokenUtils . getTokenName ( tokenType ) + " should not be allowed " 
 + + " in this check as its text is a constant ( IllegalTokenCheck should be used for " 
 + + " such cases ) . " , tokenTypesWithMutableText . contains ( tokenType ) ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 index cafb4e6 . . 4ef7b73 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 @ @ - 119 , 43 + 119 , 9 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 Collectors . toSet ( ) ) ) ; 
 / / we have no need to block specific token text 
 CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " IllegalTokenText " , 
 - Stream . of ( " LITERAL _ SUPER " , " LITERAL _ ASSERT " , " ENUM _ CONSTANT _ DEF " , 
 - " TYPE _ PARAMETERS " , " TYPE _ UPPER _ BOUNDS " , " NUM _ DOUBLE " , " LITERAL _ SWITCH " , 
 - " ANNOTATIONS " , " LITERAL _ SHORT " , " LITERAL _ PROTECTED " , " FOR _ CONDITION " , 
 - " FOR _ INIT " , " LITERAL _ LONG " , " MINUS " , " OBJBLOCK " , " LITERAL _ NULL " , 
 - " ANNOTATION " , " LITERAL _ TRUE " , " COMMENT _ CONTENT " , " LITERAL _ CHAR " , 
 - " PARAMETER _ DEF " , " POST _ DEC " , " ANNOTATION _ FIELD _ DEF " , " BLOCK _ COMMENT _ END " , 
 - " TYPE " , " LITERAL _ INT " , " BSR " , " ENUM " , " LABELED _ STAT " , 
 - " ANNOTATION _ MEMBER _ VALUE _ PAIR " , " TYPECAST " , " LITERAL _ SYNCHRONIZED " , 
 - " PLUS _ ASSIGN " , " DOT " , " LPAREN " , " LITERAL _ IF " , " LITERAL _ CATCH " , " BAND " , 
 - " INTERFACE _ DEF " , " LOR " , " BNOT " , " METHOD _ CALL " , " AT " , " ELLIPSIS " , 
 - " ARRAY _ INIT " , " FOR _ EACH _ CLAUSE " , " LITERAL _ THROWS " , " CHAR _ LITERAL " , 
 - " CASE _ GROUP " , " POST _ INC " , " SEMI " , " LITERAL _ FINALLY " , " ASSIGN " , 
 - " RESOURCE _ SPECIFICATION " , " STATIC _ IMPORT " , " GENERIC _ START " , " IMPORT " , " SL " , 
 - " VARIABLE _ DEF " , " LITERAL _ DOUBLE " , " RCURLY " , " RESOURCE " , " SR " , " COMMA " , 
 - " BAND _ ASSIGN " , " METHOD _ DEF " , " LITERAL _ VOID " , " NUM _ LONG " , 
 - " LITERAL _ TRANSIENT " , " LITERAL _ THIS " , " LCURLY " , " MINUS _ ASSIGN " , 
 - " TYPE _ LOWER _ BOUNDS " , " TYPE _ ARGUMENT " , " LITERAL _ CLASS " , " INSTANCE _ INIT " , 
 - " DIV " , " LITERAL _ VOLATILE " , " STAR " , " UNARY _ MINUS " , " FOR _ ITERATOR " , 
 - " NOT _ EQUAL " , " LE " , " LITERAL _ INTERFACE " , " LITERAL _ FLOAT " , 
 - " LITERAL _ INSTANCEOF " , " BOR _ ASSIGN " , " LT " , " SL _ ASSIGN " , " ELIST " , 
 - " ANNOTATION _ ARRAY _ INIT " , " MODIFIERS " , " LITERAL _ BREAK " , " EXTENDS _ CLAUSE " , 
 - " TYPE _ PARAMETER " , " LITERAL _ DEFAULT " , " STATIC _ INIT " , " BSR _ ASSIGN " , 
 - " TYPE _ EXTENSION _ AND " , " BOR " , " LITERAL _ PRIVATE " , " LITERAL _ THROW " , 
 - " LITERAL _ BYTE " , " BXOR " , " WILDCARD _ TYPE " , " FINAL " , " PARAMETERS " , " RPAREN " , 
 - " SR _ ASSIGN " , " UNARY _ PLUS " , " EMPTY _ STAT " , " LITERAL _ STATIC " , 
 - " LITERAL _ CONTINUE " , " STAR _ ASSIGN " , " LAMBDA " , " RBRACK " , " BXOR _ ASSIGN " , 
 - " CTOR _ CALL " , " LITERAL _ FALSE " , " DO _ WHILE " , " LITERAL _ PUBLIC " , 
 - " LITERAL _ WHILE " , " PLUS " , " INC " , " CTOR _ DEF " , " GENERIC _ END " , " DIV _ ASSIGN " , 
 - " SLIST " , " LNOT " , " LAND " , " LITERAL _ ELSE " , " ABSTRACT " , " STRICTFP " , 
 - " QUESTION " , " LITERAL _ NEW " , " LITERAL _ RETURN " , " SINGLE _ LINE _ COMMENT " , 
 - " INDEX _ OP " , " EXPR " , " BLOCK _ COMMENT _ BEGIN " , " PACKAGE _ DEF " , 
 - " IMPLEMENTS _ CLAUSE " , " NUM _ FLOAT " , " LITERAL _ DO " , " EOF " , " GE " , " RESOURCES " , 
 - " MOD " , " DEC " , " EQUAL " , " LITERAL _ BOOLEAN " , " CLASS _ DEF " , " COLON " , 
 - " LITERAL _ TRY " , " ENUM _ DEF " , " GT " , " NUM _ INT " , " ANNOTATION _ DEF " , 
 - " LITERAL _ NATIVE " , " METHOD _ REF " , " TYPE _ ARGUMENTS " , " DOUBLE _ COLON " , " IDENT " , 
 - " MOD _ ASSIGN " , " LITERAL _ FOR " , " SUPER _ CTOR _ CALL " , " STRING _ LITERAL " , 
 - " ARRAY _ DECLARATOR " , " LITERAL _ CASE " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + Stream . of ( " NUM _ DOUBLE " , " NUM _ FLOAT " , " NUM _ INT " , " NUM _ LONG " , " IDENT " , 
 + " COMMENT _ CONTENT " , " STRING _ LITERAL " , " CHAR _ LITERAL " ) 
 + . collect ( Collectors . toSet ( ) ) ) ; 
 / / we do not use this check as it is deprecated 
 CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " WriteTag " , 
 Stream . of ( " ENUM _ CONSTANT _ DEF " , " METHOD _ DEF " , " CTOR _ DEF " , " ANNOTATION _ FIELD _ DEF " ) 
 @ @ - 234 , 37 + 200 , 8 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 . collect ( Collectors . toSet ( ) ) ) ; 
 GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " IllegalTokenText " , Stream . of ( 
 / / all other java tokens and text are allowed 
 - " LITERAL _ SUPER " , " LITERAL _ ASSERT " , " ENUM _ CONSTANT _ DEF " , " TYPE _ PARAMETERS " , 
 - " TYPE _ UPPER _ BOUNDS " , " NUM _ DOUBLE " , " LITERAL _ SWITCH " , " ANNOTATIONS " , 
 - " LITERAL _ SHORT " , " LITERAL _ PROTECTED " , " FOR _ CONDITION " , " FOR _ INIT " , " LITERAL _ LONG " , 
 - " MINUS " , " OBJBLOCK " , " LITERAL _ NULL " , " ANNOTATION " , " LITERAL _ TRUE " , 
 - " COMMENT _ CONTENT " , " LITERAL _ CHAR " , " PARAMETER _ DEF " , " POST _ DEC " , 
 - " ANNOTATION _ FIELD _ DEF " , " BLOCK _ COMMENT _ END " , " TYPE " , " LITERAL _ INT " , " BSR " , " ENUM " , 
 - " LABELED _ STAT " , " ANNOTATION _ MEMBER _ VALUE _ PAIR " , " TYPECAST " , " LITERAL _ SYNCHRONIZED " , 
 - " PLUS _ ASSIGN " , " DOT " , " LPAREN " , " LITERAL _ IF " , " LITERAL _ CATCH " , " BAND " , 
 - " INTERFACE _ DEF " , " LOR " , " BNOT " , " METHOD _ CALL " , " AT " , " ELLIPSIS " , " ARRAY _ INIT " , 
 - " FOR _ EACH _ CLAUSE " , " LITERAL _ THROWS " , " CASE _ GROUP " , " POST _ INC " , " SEMI " , 
 - " LITERAL _ FINALLY " , " ASSIGN " , " RESOURCE _ SPECIFICATION " , " STATIC _ IMPORT " , 
 - " GENERIC _ START " , " IMPORT " , " SL " , " VARIABLE _ DEF " , " LITERAL _ DOUBLE " , " RCURLY " , 
 - " RESOURCE " , " SR " , " COMMA " , " BAND _ ASSIGN " , " METHOD _ DEF " , " LITERAL _ VOID " , 
 - " NUM _ LONG " , " LITERAL _ TRANSIENT " , " LITERAL _ THIS " , " LCURLY " , " MINUS _ ASSIGN " , 
 - " TYPE _ LOWER _ BOUNDS " , " TYPE _ ARGUMENT " , " LITERAL _ CLASS " , " INSTANCE _ INIT " , " DIV " , 
 - " LITERAL _ VOLATILE " , " STAR " , " UNARY _ MINUS " , " FOR _ ITERATOR " , " NOT _ EQUAL " , " LE " , 
 - " LITERAL _ INTERFACE " , " LITERAL _ FLOAT " , " LITERAL _ INSTANCEOF " , " BOR _ ASSIGN " , " LT " , 
 - " SL _ ASSIGN " , " ELIST " , " ANNOTATION _ ARRAY _ INIT " , " MODIFIERS " , " LITERAL _ BREAK " , 
 - " EXTENDS _ CLAUSE " , " TYPE _ PARAMETER " , " LITERAL _ DEFAULT " , " STATIC _ INIT " , " BSR _ ASSIGN " , 
 - " TYPE _ EXTENSION _ AND " , " BOR " , " LITERAL _ PRIVATE " , " LITERAL _ THROW " , " LITERAL _ BYTE " , 
 - " BXOR " , " WILDCARD _ TYPE " , " FINAL " , " PARAMETERS " , " RPAREN " , " SR _ ASSIGN " , 
 - " UNARY _ PLUS " , " EMPTY _ STAT " , " LITERAL _ STATIC " , " LITERAL _ CONTINUE " , " STAR _ ASSIGN " , 
 - " LAMBDA " , " RBRACK " , " BXOR _ ASSIGN " , " CTOR _ CALL " , " LITERAL _ FALSE " , " DO _ WHILE " , 
 - " LITERAL _ PUBLIC " , " LITERAL _ WHILE " , " PLUS " , " INC " , " CTOR _ DEF " , " GENERIC _ END " , 
 - " DIV _ ASSIGN " , " SLIST " , " LNOT " , " LAND " , " LITERAL _ ELSE " , " ABSTRACT " , " STRICTFP " , 
 - " QUESTION " , " LITERAL _ NEW " , " LITERAL _ RETURN " , " SINGLE _ LINE _ COMMENT " , " INDEX _ OP " , 
 - " EXPR " , " BLOCK _ COMMENT _ BEGIN " , " PACKAGE _ DEF " , " IMPLEMENTS _ CLAUSE " , " NUM _ FLOAT " , 
 - " LITERAL _ DO " , " EOF " , " GE " , " RESOURCES " , " MOD " , " DEC " , " EQUAL " , " LITERAL _ BOOLEAN " , 
 - " CLASS _ DEF " , " COLON " , " LITERAL _ TRY " , " ENUM _ DEF " , " GT " , " NUM _ INT " , " ANNOTATION _ DEF " , 
 - " LITERAL _ NATIVE " , " METHOD _ REF " , " TYPE _ ARGUMENTS " , " DOUBLE _ COLON " , " IDENT " , 
 - " MOD _ ASSIGN " , " LITERAL _ FOR " , " SUPER _ CTOR _ CALL " , " ARRAY _ DECLARATOR " , " LITERAL _ CASE " ) 
 + " NUM _ DOUBLE " , " NUM _ FLOAT " , " NUM _ INT " , " NUM _ LONG " , " IDENT " , 
 + " COMMENT _ CONTENT " , " STRING _ LITERAL " , " CHAR _ LITERAL " ) 
 . collect ( Collectors . toSet ( ) ) ) ; 
 GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " OperatorWrap " , Stream . of ( 
 / / specifically allowed via ' 4 . 5 . 1 Where to break ' because the following are 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 5e49c09 . . d02afcf 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 1654 , 7 + 1654 , 8 @ @ class SomeClass 
 < section name = " IllegalTokenText " > 
 < subsection name = " Description " > 
 < p > 
 - Checks for illegal token text . 
 + Checks specified tokens text for matching an illegal pattern from 
 + < code > format < / code > property . By default no tokens are specified . 
 < / p > 
 < / subsection > 
 
 @ @ - 1688 , 8 + 1689 , 15 @ @ class SomeClass 
 < tr > 
 < td > tokens < / td > 
 < td > tokens to check < / td > 
 - < td > subset of tokens < a 
 - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html " > TokenTypes < / a > . 
 + < td > subset of tokens 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # NUM _ DOUBLE " > NUM _ DOUBLE < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # NUM _ FLOAT " > NUM _ FLOAT < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # NUM _ INT " > NUM _ INT < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # NUM _ LONG " > NUM _ LONG < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # IDENT " > IDENT < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # COMMENT _ CONTENT " > COMMENT _ CONTENT < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STRING _ LITERAL " > STRING _ LITERAL < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # CHAR _ LITERAL " > CHAR _ LITERAL < / a > . 
 < / td > 
 < td > empty < / td > 
 < / tr >
