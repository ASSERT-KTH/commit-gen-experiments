BLEU SCORE: 0.044568827606990644

TEST MSG: issue # 5791 : wrap lines to 100 for wercker and shippable
GENERATED MSG: Issue # 5528 : let other CIs skip changes for circleci

TEST DIFF (one line): diff - - git a / config / checkstyle _ non _ main _ files _ suppressions . xml b / config / checkstyle _ non _ main _ files _ suppressions . xml <nl> index 7e163ca . . 4ac450a 100644 <nl> - - - a / config / checkstyle _ non _ main _ files _ suppressions . xml <nl> + + + b / config / checkstyle _ non _ main _ files _ suppressions . xml <nl> @ @ - 114 , 8 + 114 , 6 @ @ <nl> < suppress checks = " RegexpSingleline " <nl> files = " pom . xml " / > <nl> < suppress checks = " RegexpSingleline " <nl> - files = " shippable . yml " / > <nl> - < suppress checks = " RegexpSingleline " <nl> files = " src [ \ \ / ] xdocs [ \ \ / ] google _ style . xml " / > <nl> < suppress checks = " RegexpSingleline " <nl> files = " src [ \ \ / ] xdocs [ \ \ / ] writingchecks . xml " / > <nl> @ @ - 123 , 7 + 121 , 5 @ @ <nl> files = " src [ \ \ / ] xdocs [ \ \ / ] writingjavadocchecks . xml . vm " / > <nl> < suppress checks = " RegexpSingleline " <nl> files = " . travis . yml " / > <nl> - < suppress checks = " RegexpSingleline " <nl> - files = " wercker . yml " / > <nl> <nl> < / suppressions > <nl> diff - - git a / shippable . yml b / shippable . yml <nl> index b43e1bd . . c7eac3b 100644 <nl> - - - a / shippable . yml <nl> + + + b / shippable . yml <nl> @ @ - 42 , 7 + 42 , 8 @ @ build : <nl> cache _ dir _ list : <nl> - / root / . m2 <nl> <nl> - # default is drydock / u14javall with jdk 1 . 8 . 0 . 25 that make pitest make different results with latest jdk builds , <nl> + # default is drydock / u14javall with jdk 1 . 8 . 0 . 25 <nl> + # that make pitest make different results with latest jdk builds , <nl> # " v5 . 9 . 4 " is latest jdk8 _ 144 , versions above 5 . 9 . 4 use jdk9 <nl> pre _ ci _ boot : <nl> image _ name : drydock / u16javall <nl> @ @ - 52 , 8 + 53 , 17 @ @ build : <nl> # we skip PRs and commits that are not for Issues , as pitest is too time consuming <nl> - | <nl> set - e <nl> - SKIP _ FILES = " appveyor . yml | codeship - * | buddy . yml | circleci | distelli - manifest . yml | . travis . yml | wercker . yml | wercker . sh | fast - forward - merge . sh | LICENSE | LICENSE . apache20 | README . md | release . sh | RIGHTS . antlr | intellij - idea - inspections . xml | org . eclipse . jdt . core . prefs " <nl> - SKIP _ CI = $ ( if [ [ $ ( git diff - - name - only HEAD HEAD ~ 1 | grep - vE " $ SKIP _ FILES " | cat | wc - c ) > 0 ] ] ; then echo false ; else echo true ; fi ; ) <nl> + SKIP _ FILES1 = " appveyor . yml | codeship - * | buddy . yml | circleci | distelli - manifest . yml | . travis . yml " <nl> + SKIP _ FILES2 = " | wercker . yml | wercker . sh | fast - forward - merge . sh | LICENSE | LICENSE . apache20 | README . md " <nl> + SKIP _ FILES3 = " | release . sh | RIGHTS . antlr | intellij - idea - inspections . xml " <nl> + SKIP _ FILES4 = " | org . eclipse . jdt . core . prefs " <nl> + $ SKIP _ FILES = $ SKIP _ FILES1 $ SKIP _ FILES2 $ SKIP _ FILES3 $ SKIP _ FILES4 <nl> + SKIP _ CI = false <nl> + if [ [ $ ( git diff - - name - only HEAD HEAD ~ 1 | grep - vE " $ SKIP _ FILES " | cat | wc - c ) > 0 ] ] ; then <nl> + SKIP _ CI = false ; <nl> + else <nl> + SKIP _ CI = true ; <nl> + fi <nl> echo " SKIP _ CI = " $ SKIP _ CI <nl> if [ [ $ SKIP _ CI = = ' false ' ] ] ; <nl> then <nl> diff - - git a / wercker . yml b / wercker . yml <nl> index be8c1f0 . . faed8b6 100644 <nl> - - - a / wercker . yml <nl> + + + b / wercker . yml <nl> @ @ - 16 , 7 + 16 , 8 @ @ build : <nl> name : install groovy <nl> code : | <nl> if [ ! - d $ { WERCKER _ CACHE _ DIR } / groovy ] ; then <nl> - wget - O $ { WERCKER _ CACHE _ DIR } / groovy . zip https : / / dl . bintray . com / groovy / maven / apache - groovy - binary - 2 . 4 . 7 . zip ; <nl> + GROOVY _ LINK = " https : / / dl . bintray . com / groovy / maven / apache - groovy - binary - 2 . 4 . 7 . zip " <nl> + wget - O $ { WERCKER _ CACHE _ DIR } / groovy . zip $ GROOVY _ LINK ; <nl> unzip $ { WERCKER _ CACHE _ DIR } / groovy . zip - d $ { WERCKER _ CACHE _ DIR } ; <nl> mv $ { WERCKER _ CACHE _ DIR } / groovy - 2 . 4 . 7 $ { WERCKER _ CACHE _ DIR } / groovy <nl> fi <nl> @ @ - 27 , 8 + 28 , 18 @ @ build : <nl> - script : <nl> name : Build Checkstyle <nl> code : | <nl> - SKIP _ FILES = " appveyor . yml | codeship - * | buddy . yml | circleci | distelli - manifest . yml | . travis . yml | shippable . yml | shippable . sh | fast - forward - merge . sh | LICENSE | LICENSE . apache20 | README . md | release . sh | RIGHTS . antlr | intellij - idea - inspections . xml | org . eclipse . jdt . core . prefs " <nl> - export SKIP _ CI = $ ( if [ [ $ ( git diff - - name - only HEAD HEAD ~ 1 | grep - vE " $ SKIP _ FILES " | cat | wc - c ) > 0 ] ] ; then echo false ; else echo true ; fi ; ) <nl> + SKIP _ FILES1 = " appveyor . yml | codeship - * | buddy . yml | circleci | distelli - manifest . yml | . travis . yml " <nl> + SKIP _ FILES2 = " | shippable . yml | shippable . sh | fast - forward - merge . sh | LICENSE | LICENSE . apache20 " <nl> + SKIP _ FILES3 = " | README . md | release . sh | RIGHTS . antlr | intellij - idea - inspections . xml " <nl> + SKIP _ FILES4 = " | org . eclipse . jdt . core . prefs " <nl> + $ SKIP _ FILES = $ SKIP _ FILES1 $ SKIP _ FILES2 $ SKIP _ FILES3 $ SKIP _ FILES4 <nl> + export SKIP _ CI = false ; <nl> + if [ [ $ ( git diff - - name - only HEAD HEAD ~ 1 | grep - vE " $ SKIP _ FILES " | cat | wc - c ) > 0 ] ] ; <nl> + then <nl> + SKIP _ CI = false ; <nl> + else <nl> + SKIP _ CI = true ; <nl> + fi <nl> echo " SKIP _ CI = " $ SKIP _ CI <nl> if [ [ $ SKIP _ CI = = ' false ' ] ] ; then <nl> mvn - e clean install - Pno - validations <nl> @ @ - 184 , 7 + 195 , 7 @ @ build : <nl> fi <nl> <nl> - script : <nl> - name : NoExceptiontest - RxJava java - design - patterns MaterialDesignLibrary apache - ant apache - jsecurity android - launcher <nl> + name : NoExceptiontest - RxJava apache - ant apache - jsecurity android - launcher . . . . <nl> code : | <nl> if [ [ $ SKIP _ CI = = ' false ' ] ] ; then <nl> . / . ci / wercker . sh no - exception - alot - of - projects
NEAREST DIFF (one line): diff - - git a / . ci / shippable . sh b / . ci / shippable . sh <nl> index 1859e9f . . fc364a4 100755 <nl> - - - a / . ci / shippable . sh <nl> + + + b / . ci / shippable . sh <nl> @ @ - 78 , 9 + 78 , 105 @ @ pitest - checks - coding ) <nl> checkPitestReport " $ { ignoredItems [ @ ] } " <nl> ; ; <nl> <nl> - pitest - checkstyle - gui | pitest - checks - indentation | pitest - checks - javadoc ) <nl> + pitest - checks - indentation ) <nl> mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; <nl> - # too much supprssions , post validation is skipped <nl> + declare - a ignoredItems = ( <nl> + " AbstractExpressionHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( colNum = = null | | thisLineColumn & # 60 ; colNum ) { < / span > < / pre > < / td > < / tr > " <nl> + " AbstractExpressionHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( currLine & # 60 ; realStart ) { < / span > < / pre > < / td > < / tr > " <nl> + " AbstractExpressionHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( toTest . getColumnNo ( ) & # 60 ; first . getColumnNo ( ) ) { < / span > < / pre > < / td > < / tr > " <nl> + " ArrayInitHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( firstChildPos & # 62 ; = 0 ) { < / span > < / pre > < / td > < / tr > " <nl> + " BlockParentHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > level . addAcceptedIndent ( level . getFirstIndentLevel ( ) + getLineWrappingIndent ( ) ) ; < / span > < / pre > < / td > < / tr > " <nl> + " BlockParentHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return getIndentCheck ( ) . getLineWrappingIndentation ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " BlockParentHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return true ; < / span > < / pre > < / td > < / tr > " <nl> + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; root . getFirstChild ( ) . getFirstChild ( ) . getFirstChild ( ) . getNextSibling ( ) ! = null ; < / span > < / pre > < / td > < / tr > " <nl> + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > distanceAim + = nextToken . getLastChild ( ) . getLineNo ( ) - nextToken . getLineNo ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( comment . getColumnNo ( ) & # 60 ; nextStmt . getColumnNo ( ) ) { < / span > < / pre > < / td > < / tr > " <nl> + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( comment . getType ( ) = = TokenTypes . SINGLE _ LINE _ COMMENT ) { < / span > < / pre > < / td > < / tr > " <nl> + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( isUsingOfObjectReferenceToInvokeMethod ( blockBody ) ) { < / span > < / pre > < / td > < / tr > " <nl> + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( isUsingOfObjectReferenceToInvokeMethod ( root ) ) { < / span > < / pre > < / td > < / tr > " <nl> + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( nextToken . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN ) { < / span > < / pre > < / td > < / tr > " <nl> + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( root . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ NEW ) { < / span > < / pre > < / td > < / tr > " <nl> + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( root . getLineNo ( ) & # 62 ; = comment . getLineNo ( ) ) { < / span > < / pre > < / td > < / tr > " <nl> + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | previousSibling . getType ( ) = = TokenTypes . ANNOTATION _ DEF ; < / span > < / pre > < / td > < / tr > " <nl> + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | previousSibling . getType ( ) = = TokenTypes . CLASS _ DEF < / span > < / pre > < / td > < / tr > " <nl> + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | previousSibling . getType ( ) = = TokenTypes . INTERFACE _ DEF < / span > < / pre > < / td > < / tr > " <nl> + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return root . getFirstChild ( ) . getFirstChild ( ) . getFirstChild ( ) ! = null < / span > < / pre > < / td > < / tr > " <nl> + " ElseHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return getMainAst ( ) . getFirstChild ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " ElseHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > super . checkTopLevelToken ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " ForHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( forEach , expected , false , false ) ; < / span > < / pre > < / td > < / tr > " <nl> + " ForHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkWrappingIndentation ( getMainAst ( ) , getForLoopRightParen ( getMainAst ( ) ) ) ; < / span > < / pre > < / td > < / tr > " <nl> + " HandlerFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > createdHandlers . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " HandlerFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > register ( TokenTypes . CTOR _ CALL , MethodCallHandler . class ) ; < / span > < / pre > < / td > < / tr > " <nl> + " HandlerFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > register ( TokenTypes . INDEX _ OP , IndexHandler . class ) ; < / span > < / pre > < / td > < / tr > " <nl> + " IndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > handlerFactory . clearCreatedHandlers ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " IndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > handlers . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " IndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > primordialHandler . checkIndentation ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " IndentLevel . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > for ( int i = levels . nextSetBit ( 0 ) ; i & # 62 ; = 0 ; < / span > < / pre > < / td > < / tr > " <nl> + " MethodCallHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkLeftParen ( lparen ) ; < / span > < / pre > < / td > < / tr > " <nl> + " MethodDefHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( node . getLineNo ( ) & # 60 ; lineStart ) { < / span > < / pre > < / td > < / tr > " <nl> + " MethodDefHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( node . getType ( ) = = TokenTypes . ANNOTATION ) { < / span > < / pre > < / td > < / tr > " <nl> + " NewHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( type , getIndent ( ) , false , false ) ; < / span > < / pre > < / td > < / tr > " <nl> + " NewHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkLeftParen ( lparen ) ; < / span > < / pre > < / td > < / tr > " <nl> + " NewHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return false ; < / span > < / pre > < / td > < / tr > " <nl> + " PackageDefHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkWrappingIndentation ( getMainAst ( ) , semi ) ; < / span > < / pre > < / td > < / tr > " <nl> + " StaticInitHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return false ; < / span > < / pre > < / td > < / tr > " <nl> + " SwitchHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( < / span > < / pre > < / td > < / tr > " <nl> + " SwitchHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkSwitchExpr ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( syncAst , expected , false , false ) ; < / span > < / pre > < / td > < / tr > " <nl> + " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkSynchronizedExpr ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkWrappingIndentation ( getMainAst ( ) , < / span > < / pre > < / td > < / tr > " <nl> + " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > super . checkIndentation ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " TryHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkTryResParen ( getTryResLparen ( ) , & # 34 ; lparen & # 34 ; ) ; < / span > < / pre > < / td > < / tr > " <nl> + ) ; <nl> + checkPitestReport " $ { ignoredItems [ @ ] } " <nl> + ; ; <nl> + <nl> + pitest - checks - javadoc ) <nl> + mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; <nl> + declare - a ignoredItems = ( <nl> + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > Arrays . sort ( acceptableJavadocTokens ) ; < / span > < / pre > < / td > < / tr > " <nl> + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > Arrays . sort ( defaultJavadocTokens ) ; < / span > < / pre > < / td > < / tr > " <nl> + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > beginJavadocTree ( root ) ; < / span > < / pre > < / td > < / tr > " <nl> + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > finishJavadocTree ( root ) ; < / span > < / pre > < / td > < / tr > " <nl> + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > javadocTokens . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > TREE _ CACHE . get ( ) . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > TREE _ CACHE . get ( ) . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " AbstractTypeAwareCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( ! currentClassName . isEmpty ( ) ) { < / span > < / pre > < / td > < / tr > " <nl> + " AbstractTypeAwareCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( dotIdx = = - 1 ) { < / span > < / pre > < / td > < / tr > " <nl> + " AbstractTypeAwareCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > imports . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " AbstractTypeAwareCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > typeParams . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " ClassResolver . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( clazz ! = null ) { < / span > < / pre > < / td > < / tr > " <nl> + " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > final int col = noargMultilineStart . start ( 1 ) - 1 ; < / span > < / pre > < / td > < / tr > " <nl> + " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return ( ast . getType ( ) = = TokenTypes . METHOD _ DEF | | ast . getType ( ) = = TokenTypes . CTOR _ DEF ) < / span > < / pre > < / td > < / tr > " <nl> + " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return true ; < / span > < / pre > < / td > < / tr > " <nl> + " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( remIndex & # 60 ; lines . length ) { < / span > < / pre > < / td > < / tr > " <nl> + " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( remIndex & # 60 ; lines . length ) { < / span > < / pre > < / td > < / tr > " <nl> + " JavadocPackageCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > directoriesChecked . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> + " JavadocPackageCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > setFileExtensions ( & # 34 ; java & # 34 ; ) ; < / span > < / pre > < / td > < / tr > " <nl> + " JavadocPackageCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > super . beginProcessing ( charset ) ; < / span > < / pre > < / td > < / tr > " <nl> + " JavadocParagraphCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( nextNode . getType ( ) = = JavadocTokenTypes . TEXT < / span > < / pre > < / td > < / tr > " <nl> + " JavadocParagraphCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | nextNode . getType ( ) = = JavadocTokenTypes . HTML _ ELEMENT ) { < / span > < / pre > < / td > < / tr > " <nl> + " JavadocStyleCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; builder . charAt ( index - 1 ) = = & # 39 ; * & # 39 ; ) { < / span > < / pre > < / td > < / tr > " <nl> + " JavadocStyleCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > else if ( index & # 62 ; 0 & # 38 ; & # 38 ; builder . charAt ( index ) = = & # 39 ; / & # 39 ; < / span > < / pre > < / td > < / tr > " <nl> + " JavadocStyleCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > trimTail ( builder ) ; < / span > < / pre > < / td > < / tr > " <nl> + " JavadocTagContinuationIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; ( text . length ( ) & # 60 ; = offset < / span > < / pre > < / td > < / tr > " <nl> + " JavadocTagContinuationIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( inlineTag ! = null ) { < / span > < / pre > < / td > < / tr > " <nl> + " JavadocTag . java . html : < td class = ' uncovered ' > < pre > < span class = ' survived ' > return tagInfo = = JavadocTagInfo . SEE < / span > < / pre > < / td > < / tr > " <nl> + " JavadocTypeCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > tagCount + + ; < / span > < / pre > < / td > < / tr > " <nl> + " SummaryJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > for ( int i = 0 ; ! found & # 38 ; & # 38 ; i & # 60 ; children . length - 1 ; i + + ) { < / span > < / pre > < / td > < / tr > " <nl> + " SummaryJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( child . getType ( ) ! = JavadocTokenTypes . JAVADOC _ INLINE _ TAG < / span > < / pre > < / td > < / tr > " <nl> + " TagParser . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; ( Character . isWhitespace ( currentLine . charAt ( column ) ) < / span > < / pre > < / td > < / tr > " <nl> + " TagParser . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | currentLine . charAt ( column ) = = & # 39 ; * & # 39 ; ) ) { < / span > < / pre > < / td > < / tr > " <nl> + " TagParser . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( column & # 60 ; currentLine . length ( ) < / span > < / pre > < / td > < / tr > " <nl> + " WriteTagCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > log ( lineNo , MSG _ MISSING _ TAG , tag ) ; < / span > < / pre > < / td > < / tr > " <nl> + " WriteTagCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > tagCount + = 1 ; < / span > < / pre > < / td > < / tr > " <nl> + ) ; <nl> + checkPitestReport " $ { ignoredItems [ @ ] } " <nl> + ; ; <nl> + <nl> + pitest - checkstyle - gui ) <nl> + mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; <nl> + # post validation is skipped , we do not test gui throughly <nl> ; ; <nl> <nl> * )

TEST DIFF:
diff - - git a / config / checkstyle _ non _ main _ files _ suppressions . xml b / config / checkstyle _ non _ main _ files _ suppressions . xml 
 index 7e163ca . . 4ac450a 100644 
 - - - a / config / checkstyle _ non _ main _ files _ suppressions . xml 
 + + + b / config / checkstyle _ non _ main _ files _ suppressions . xml 
 @ @ - 114 , 8 + 114 , 6 @ @ 
 < suppress checks = " RegexpSingleline " 
 files = " pom . xml " / > 
 < suppress checks = " RegexpSingleline " 
 - files = " shippable . yml " / > 
 - < suppress checks = " RegexpSingleline " 
 files = " src [ \ \ / ] xdocs [ \ \ / ] google _ style . xml " / > 
 < suppress checks = " RegexpSingleline " 
 files = " src [ \ \ / ] xdocs [ \ \ / ] writingchecks . xml " / > 
 @ @ - 123 , 7 + 121 , 5 @ @ 
 files = " src [ \ \ / ] xdocs [ \ \ / ] writingjavadocchecks . xml . vm " / > 
 < suppress checks = " RegexpSingleline " 
 files = " . travis . yml " / > 
 - < suppress checks = " RegexpSingleline " 
 - files = " wercker . yml " / > 
 
 < / suppressions > 
 diff - - git a / shippable . yml b / shippable . yml 
 index b43e1bd . . c7eac3b 100644 
 - - - a / shippable . yml 
 + + + b / shippable . yml 
 @ @ - 42 , 7 + 42 , 8 @ @ build : 
 cache _ dir _ list : 
 - / root / . m2 
 
 - # default is drydock / u14javall with jdk 1 . 8 . 0 . 25 that make pitest make different results with latest jdk builds , 
 + # default is drydock / u14javall with jdk 1 . 8 . 0 . 25 
 + # that make pitest make different results with latest jdk builds , 
 # " v5 . 9 . 4 " is latest jdk8 _ 144 , versions above 5 . 9 . 4 use jdk9 
 pre _ ci _ boot : 
 image _ name : drydock / u16javall 
 @ @ - 52 , 8 + 53 , 17 @ @ build : 
 # we skip PRs and commits that are not for Issues , as pitest is too time consuming 
 - | 
 set - e 
 - SKIP _ FILES = " appveyor . yml | codeship - * | buddy . yml | circleci | distelli - manifest . yml | . travis . yml | wercker . yml | wercker . sh | fast - forward - merge . sh | LICENSE | LICENSE . apache20 | README . md | release . sh | RIGHTS . antlr | intellij - idea - inspections . xml | org . eclipse . jdt . core . prefs " 
 - SKIP _ CI = $ ( if [ [ $ ( git diff - - name - only HEAD HEAD ~ 1 | grep - vE " $ SKIP _ FILES " | cat | wc - c ) > 0 ] ] ; then echo false ; else echo true ; fi ; ) 
 + SKIP _ FILES1 = " appveyor . yml | codeship - * | buddy . yml | circleci | distelli - manifest . yml | . travis . yml " 
 + SKIP _ FILES2 = " | wercker . yml | wercker . sh | fast - forward - merge . sh | LICENSE | LICENSE . apache20 | README . md " 
 + SKIP _ FILES3 = " | release . sh | RIGHTS . antlr | intellij - idea - inspections . xml " 
 + SKIP _ FILES4 = " | org . eclipse . jdt . core . prefs " 
 + $ SKIP _ FILES = $ SKIP _ FILES1 $ SKIP _ FILES2 $ SKIP _ FILES3 $ SKIP _ FILES4 
 + SKIP _ CI = false 
 + if [ [ $ ( git diff - - name - only HEAD HEAD ~ 1 | grep - vE " $ SKIP _ FILES " | cat | wc - c ) > 0 ] ] ; then 
 + SKIP _ CI = false ; 
 + else 
 + SKIP _ CI = true ; 
 + fi 
 echo " SKIP _ CI = " $ SKIP _ CI 
 if [ [ $ SKIP _ CI = = ' false ' ] ] ; 
 then 
 diff - - git a / wercker . yml b / wercker . yml 
 index be8c1f0 . . faed8b6 100644 
 - - - a / wercker . yml 
 + + + b / wercker . yml 
 @ @ - 16 , 7 + 16 , 8 @ @ build : 
 name : install groovy 
 code : | 
 if [ ! - d $ { WERCKER _ CACHE _ DIR } / groovy ] ; then 
 - wget - O $ { WERCKER _ CACHE _ DIR } / groovy . zip https : / / dl . bintray . com / groovy / maven / apache - groovy - binary - 2 . 4 . 7 . zip ; 
 + GROOVY _ LINK = " https : / / dl . bintray . com / groovy / maven / apache - groovy - binary - 2 . 4 . 7 . zip " 
 + wget - O $ { WERCKER _ CACHE _ DIR } / groovy . zip $ GROOVY _ LINK ; 
 unzip $ { WERCKER _ CACHE _ DIR } / groovy . zip - d $ { WERCKER _ CACHE _ DIR } ; 
 mv $ { WERCKER _ CACHE _ DIR } / groovy - 2 . 4 . 7 $ { WERCKER _ CACHE _ DIR } / groovy 
 fi 
 @ @ - 27 , 8 + 28 , 18 @ @ build : 
 - script : 
 name : Build Checkstyle 
 code : | 
 - SKIP _ FILES = " appveyor . yml | codeship - * | buddy . yml | circleci | distelli - manifest . yml | . travis . yml | shippable . yml | shippable . sh | fast - forward - merge . sh | LICENSE | LICENSE . apache20 | README . md | release . sh | RIGHTS . antlr | intellij - idea - inspections . xml | org . eclipse . jdt . core . prefs " 
 - export SKIP _ CI = $ ( if [ [ $ ( git diff - - name - only HEAD HEAD ~ 1 | grep - vE " $ SKIP _ FILES " | cat | wc - c ) > 0 ] ] ; then echo false ; else echo true ; fi ; ) 
 + SKIP _ FILES1 = " appveyor . yml | codeship - * | buddy . yml | circleci | distelli - manifest . yml | . travis . yml " 
 + SKIP _ FILES2 = " | shippable . yml | shippable . sh | fast - forward - merge . sh | LICENSE | LICENSE . apache20 " 
 + SKIP _ FILES3 = " | README . md | release . sh | RIGHTS . antlr | intellij - idea - inspections . xml " 
 + SKIP _ FILES4 = " | org . eclipse . jdt . core . prefs " 
 + $ SKIP _ FILES = $ SKIP _ FILES1 $ SKIP _ FILES2 $ SKIP _ FILES3 $ SKIP _ FILES4 
 + export SKIP _ CI = false ; 
 + if [ [ $ ( git diff - - name - only HEAD HEAD ~ 1 | grep - vE " $ SKIP _ FILES " | cat | wc - c ) > 0 ] ] ; 
 + then 
 + SKIP _ CI = false ; 
 + else 
 + SKIP _ CI = true ; 
 + fi 
 echo " SKIP _ CI = " $ SKIP _ CI 
 if [ [ $ SKIP _ CI = = ' false ' ] ] ; then 
 mvn - e clean install - Pno - validations 
 @ @ - 184 , 7 + 195 , 7 @ @ build : 
 fi 
 
 - script : 
 - name : NoExceptiontest - RxJava java - design - patterns MaterialDesignLibrary apache - ant apache - jsecurity android - launcher 
 + name : NoExceptiontest - RxJava apache - ant apache - jsecurity android - launcher . . . . 
 code : | 
 if [ [ $ SKIP _ CI = = ' false ' ] ] ; then 
 . / . ci / wercker . sh no - exception - alot - of - projects

NEAREST DIFF:
diff - - git a / . ci / shippable . sh b / . ci / shippable . sh 
 index 1859e9f . . fc364a4 100755 
 - - - a / . ci / shippable . sh 
 + + + b / . ci / shippable . sh 
 @ @ - 78 , 9 + 78 , 105 @ @ pitest - checks - coding ) 
 checkPitestReport " $ { ignoredItems [ @ ] } " 
 ; ; 
 
 - pitest - checkstyle - gui | pitest - checks - indentation | pitest - checks - javadoc ) 
 + pitest - checks - indentation ) 
 mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; 
 - # too much supprssions , post validation is skipped 
 + declare - a ignoredItems = ( 
 + " AbstractExpressionHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( colNum = = null | | thisLineColumn & # 60 ; colNum ) { < / span > < / pre > < / td > < / tr > " 
 + " AbstractExpressionHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( currLine & # 60 ; realStart ) { < / span > < / pre > < / td > < / tr > " 
 + " AbstractExpressionHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( toTest . getColumnNo ( ) & # 60 ; first . getColumnNo ( ) ) { < / span > < / pre > < / td > < / tr > " 
 + " ArrayInitHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( firstChildPos & # 62 ; = 0 ) { < / span > < / pre > < / td > < / tr > " 
 + " BlockParentHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > level . addAcceptedIndent ( level . getFirstIndentLevel ( ) + getLineWrappingIndent ( ) ) ; < / span > < / pre > < / td > < / tr > " 
 + " BlockParentHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return getIndentCheck ( ) . getLineWrappingIndentation ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " BlockParentHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return true ; < / span > < / pre > < / td > < / tr > " 
 + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; root . getFirstChild ( ) . getFirstChild ( ) . getFirstChild ( ) . getNextSibling ( ) ! = null ; < / span > < / pre > < / td > < / tr > " 
 + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > distanceAim + = nextToken . getLastChild ( ) . getLineNo ( ) - nextToken . getLineNo ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( comment . getColumnNo ( ) & # 60 ; nextStmt . getColumnNo ( ) ) { < / span > < / pre > < / td > < / tr > " 
 + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( comment . getType ( ) = = TokenTypes . SINGLE _ LINE _ COMMENT ) { < / span > < / pre > < / td > < / tr > " 
 + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( isUsingOfObjectReferenceToInvokeMethod ( blockBody ) ) { < / span > < / pre > < / td > < / tr > " 
 + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( isUsingOfObjectReferenceToInvokeMethod ( root ) ) { < / span > < / pre > < / td > < / tr > " 
 + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( nextToken . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN ) { < / span > < / pre > < / td > < / tr > " 
 + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( root . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ NEW ) { < / span > < / pre > < / td > < / tr > " 
 + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( root . getLineNo ( ) & # 62 ; = comment . getLineNo ( ) ) { < / span > < / pre > < / td > < / tr > " 
 + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | previousSibling . getType ( ) = = TokenTypes . ANNOTATION _ DEF ; < / span > < / pre > < / td > < / tr > " 
 + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | previousSibling . getType ( ) = = TokenTypes . CLASS _ DEF < / span > < / pre > < / td > < / tr > " 
 + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | previousSibling . getType ( ) = = TokenTypes . INTERFACE _ DEF < / span > < / pre > < / td > < / tr > " 
 + " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return root . getFirstChild ( ) . getFirstChild ( ) . getFirstChild ( ) ! = null < / span > < / pre > < / td > < / tr > " 
 + " ElseHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return getMainAst ( ) . getFirstChild ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " ElseHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > super . checkTopLevelToken ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " ForHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( forEach , expected , false , false ) ; < / span > < / pre > < / td > < / tr > " 
 + " ForHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkWrappingIndentation ( getMainAst ( ) , getForLoopRightParen ( getMainAst ( ) ) ) ; < / span > < / pre > < / td > < / tr > " 
 + " HandlerFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > createdHandlers . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " HandlerFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > register ( TokenTypes . CTOR _ CALL , MethodCallHandler . class ) ; < / span > < / pre > < / td > < / tr > " 
 + " HandlerFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > register ( TokenTypes . INDEX _ OP , IndexHandler . class ) ; < / span > < / pre > < / td > < / tr > " 
 + " IndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > handlerFactory . clearCreatedHandlers ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " IndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > handlers . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " IndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > primordialHandler . checkIndentation ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " IndentLevel . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > for ( int i = levels . nextSetBit ( 0 ) ; i & # 62 ; = 0 ; < / span > < / pre > < / td > < / tr > " 
 + " MethodCallHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkLeftParen ( lparen ) ; < / span > < / pre > < / td > < / tr > " 
 + " MethodDefHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( node . getLineNo ( ) & # 60 ; lineStart ) { < / span > < / pre > < / td > < / tr > " 
 + " MethodDefHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( node . getType ( ) = = TokenTypes . ANNOTATION ) { < / span > < / pre > < / td > < / tr > " 
 + " NewHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( type , getIndent ( ) , false , false ) ; < / span > < / pre > < / td > < / tr > " 
 + " NewHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkLeftParen ( lparen ) ; < / span > < / pre > < / td > < / tr > " 
 + " NewHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return false ; < / span > < / pre > < / td > < / tr > " 
 + " PackageDefHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkWrappingIndentation ( getMainAst ( ) , semi ) ; < / span > < / pre > < / td > < / tr > " 
 + " StaticInitHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return false ; < / span > < / pre > < / td > < / tr > " 
 + " SwitchHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( < / span > < / pre > < / td > < / tr > " 
 + " SwitchHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkSwitchExpr ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( syncAst , expected , false , false ) ; < / span > < / pre > < / td > < / tr > " 
 + " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkSynchronizedExpr ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkWrappingIndentation ( getMainAst ( ) , < / span > < / pre > < / td > < / tr > " 
 + " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > super . checkIndentation ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " TryHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkTryResParen ( getTryResLparen ( ) , & # 34 ; lparen & # 34 ; ) ; < / span > < / pre > < / td > < / tr > " 
 + ) ; 
 + checkPitestReport " $ { ignoredItems [ @ ] } " 
 + ; ; 
 + 
 + pitest - checks - javadoc ) 
 + mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; 
 + declare - a ignoredItems = ( 
 + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > Arrays . sort ( acceptableJavadocTokens ) ; < / span > < / pre > < / td > < / tr > " 
 + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > Arrays . sort ( defaultJavadocTokens ) ; < / span > < / pre > < / td > < / tr > " 
 + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > beginJavadocTree ( root ) ; < / span > < / pre > < / td > < / tr > " 
 + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > finishJavadocTree ( root ) ; < / span > < / pre > < / td > < / tr > " 
 + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > javadocTokens . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > TREE _ CACHE . get ( ) . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " AbstractJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > TREE _ CACHE . get ( ) . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " AbstractTypeAwareCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( ! currentClassName . isEmpty ( ) ) { < / span > < / pre > < / td > < / tr > " 
 + " AbstractTypeAwareCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( dotIdx = = - 1 ) { < / span > < / pre > < / td > < / tr > " 
 + " AbstractTypeAwareCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > imports . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " AbstractTypeAwareCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > typeParams . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " ClassResolver . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( clazz ! = null ) { < / span > < / pre > < / td > < / tr > " 
 + " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > final int col = noargMultilineStart . start ( 1 ) - 1 ; < / span > < / pre > < / td > < / tr > " 
 + " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return ( ast . getType ( ) = = TokenTypes . METHOD _ DEF | | ast . getType ( ) = = TokenTypes . CTOR _ DEF ) < / span > < / pre > < / td > < / tr > " 
 + " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return true ; < / span > < / pre > < / td > < / tr > " 
 + " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( remIndex & # 60 ; lines . length ) { < / span > < / pre > < / td > < / tr > " 
 + " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( remIndex & # 60 ; lines . length ) { < / span > < / pre > < / td > < / tr > " 
 + " JavadocPackageCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > directoriesChecked . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 + " JavadocPackageCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > setFileExtensions ( & # 34 ; java & # 34 ; ) ; < / span > < / pre > < / td > < / tr > " 
 + " JavadocPackageCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > super . beginProcessing ( charset ) ; < / span > < / pre > < / td > < / tr > " 
 + " JavadocParagraphCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( nextNode . getType ( ) = = JavadocTokenTypes . TEXT < / span > < / pre > < / td > < / tr > " 
 + " JavadocParagraphCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | nextNode . getType ( ) = = JavadocTokenTypes . HTML _ ELEMENT ) { < / span > < / pre > < / td > < / tr > " 
 + " JavadocStyleCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; builder . charAt ( index - 1 ) = = & # 39 ; * & # 39 ; ) { < / span > < / pre > < / td > < / tr > " 
 + " JavadocStyleCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > else if ( index & # 62 ; 0 & # 38 ; & # 38 ; builder . charAt ( index ) = = & # 39 ; / & # 39 ; < / span > < / pre > < / td > < / tr > " 
 + " JavadocStyleCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > trimTail ( builder ) ; < / span > < / pre > < / td > < / tr > " 
 + " JavadocTagContinuationIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; ( text . length ( ) & # 60 ; = offset < / span > < / pre > < / td > < / tr > " 
 + " JavadocTagContinuationIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( inlineTag ! = null ) { < / span > < / pre > < / td > < / tr > " 
 + " JavadocTag . java . html : < td class = ' uncovered ' > < pre > < span class = ' survived ' > return tagInfo = = JavadocTagInfo . SEE < / span > < / pre > < / td > < / tr > " 
 + " JavadocTypeCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > tagCount + + ; < / span > < / pre > < / td > < / tr > " 
 + " SummaryJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > for ( int i = 0 ; ! found & # 38 ; & # 38 ; i & # 60 ; children . length - 1 ; i + + ) { < / span > < / pre > < / td > < / tr > " 
 + " SummaryJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( child . getType ( ) ! = JavadocTokenTypes . JAVADOC _ INLINE _ TAG < / span > < / pre > < / td > < / tr > " 
 + " TagParser . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; ( Character . isWhitespace ( currentLine . charAt ( column ) ) < / span > < / pre > < / td > < / tr > " 
 + " TagParser . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | currentLine . charAt ( column ) = = & # 39 ; * & # 39 ; ) ) { < / span > < / pre > < / td > < / tr > " 
 + " TagParser . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( column & # 60 ; currentLine . length ( ) < / span > < / pre > < / td > < / tr > " 
 + " WriteTagCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > log ( lineNo , MSG _ MISSING _ TAG , tag ) ; < / span > < / pre > < / td > < / tr > " 
 + " WriteTagCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > tagCount + = 1 ; < / span > < / pre > < / td > < / tr > " 
 + ) ; 
 + checkPitestReport " $ { ignoredItems [ @ ] } " 
 + ; ; 
 + 
 + pitest - checkstyle - gui ) 
 + mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; 
 + # post validation is skipped , we do not test gui throughly 
 ; ; 
 
 * )
