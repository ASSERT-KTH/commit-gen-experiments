BLEU SCORE: 0.06150343144231885

TEST MSG: Issue # 4395 : increase coverage of pitest - checkstyle - utils profile to 67 %
GENERATED MSG: Issue # 1290 : Coverage has been increased to 100 % in SuppressWarningsHolder .

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 3aa1419 . . 7f99bbc 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2082 , 7 + 2082 , 7 @ @ <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . utils . * < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 49 < / mutationThreshold > <nl> + < mutationThreshold > 67 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java <nl> index 64b1a17 . . 11f6e35 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java <nl> @ @ - 19 , 15 + 19 , 25 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . internal ; <nl> <nl> + import static com . puppycrawl . tools . checkstyle . TreeWalker . parseWithComments ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . Modifier ; <nl> + import java . util . Optional ; <nl> import java . util . Set ; <nl> + import java . util . function . Predicate ; <nl> <nl> import org . junit . Assert ; <nl> <nl> + import antlr . ANTLRException ; <nl> import com . puppycrawl . tools . checkstyle . PackageNamesLoader ; <nl> import com . puppycrawl . tools . checkstyle . PackageObjectFactory ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> <nl> public final class TestUtils { <nl> <nl> @ @ - 56 , 4 + 66 , 47 @ @ public final class TestUtils { <nl> final Set < String > packageNames = PackageNamesLoader . getPackageNames ( cl ) ; <nl> return new PackageObjectFactory ( packageNames , cl ) ; <nl> } <nl> + <nl> + / * * <nl> + * Finds node of specified type among root children , siblings , siblings children <nl> + * on any deep level . <nl> + * @ param root DetailAST <nl> + * @ param predicate predicate <nl> + * @ return { @ link Optional } of { @ link DetailAST } node which matches the predicate . <nl> + * / <nl> + public static Optional < DetailAST > findTokenInAstByPredicate ( DetailAST root , <nl> + Predicate < DetailAST > predicate ) { <nl> + DetailAST curNode = root ; <nl> + while ( ! predicate . test ( curNode ) ) { <nl> + DetailAST toVisit = curNode . getFirstChild ( ) ; <nl> + while ( curNode ! = null & & toVisit = = null ) { <nl> + toVisit = curNode . getNextSibling ( ) ; <nl> + if ( toVisit = = null ) { <nl> + curNode = curNode . getParent ( ) ; <nl> + } <nl> + } <nl> + <nl> + if ( curNode = = toVisit | | curNode = = root . getParent ( ) ) { <nl> + curNode = null ; <nl> + break ; <nl> + } <nl> + <nl> + curNode = toVisit ; <nl> + } <nl> + return Optional . ofNullable ( curNode ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Parses Java source file . Results in AST which contains comment nodes . <nl> + * @ param file file to parse <nl> + * @ return DetailAST tree <nl> + * @ throws NullPointerException if the text is null <nl> + * @ throws IOException if the file could not be read <nl> + * @ throws ANTLRException if parser or lexer failed <nl> + * / <nl> + public static DetailAST parseFile ( File file ) throws IOException , ANTLRException { <nl> + final FileText text = new FileText ( file . getAbsoluteFile ( ) , " UTF - 8 " ) ; <nl> + final FileContents contents = new FileContents ( text ) ; <nl> + return parseWithComments ( contents ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java <nl> index f76bb89 . . 1cd1568 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java <nl> @ @ - 20 , 14 + 20 , 23 @ @ <nl> package com . puppycrawl . tools . checkstyle . utils ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; <nl> + import static com . puppycrawl . tools . checkstyle . internal . TestUtils . findTokenInAstByPredicate ; <nl> + import static com . puppycrawl . tools . checkstyle . internal . TestUtils . parseFile ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> - import org . junit . Assert ; <nl> + import java . io . File ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + import java . util . Optional ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . checks . naming . AccessModifier ; <nl> <nl> public class CheckUtilsTest { <nl> <nl> @ @ - 47 , 7 + 56 , 7 @ @ public class CheckUtilsTest { <nl> final DetailAST ast = new DetailAST ( ) ; <nl> ast . setType ( TokenTypes . ASSIGN ) ; <nl> ast . setText ( " ASSIGN " ) ; <nl> - Assert . assertFalse ( CheckUtils . isElseIf ( ast ) ) ; <nl> + assertFalse ( CheckUtils . isElseIf ( ast ) ) ; <nl> <nl> final DetailAST parentAst = new DetailAST ( ) ; <nl> parentAst . setType ( TokenTypes . LCURLY ) ; <nl> @ @ - 58 , 7 + 67 , 7 @ @ public class CheckUtilsTest { <nl> ifAst . setText ( " IF " ) ; <nl> parentAst . addChild ( ifAst ) ; <nl> <nl> - Assert . assertFalse ( CheckUtils . isElseIf ( ifAst ) ) ; <nl> + assertFalse ( CheckUtils . isElseIf ( ifAst ) ) ; <nl> <nl> final DetailAST parentAst2 = new DetailAST ( ) ; <nl> parentAst2 . setType ( TokenTypes . SLIST ) ; <nl> @ @ - 66 , 13 + 75 , 13 @ @ public class CheckUtilsTest { <nl> <nl> parentAst2 . addChild ( ifAst ) ; <nl> <nl> - Assert . assertFalse ( CheckUtils . isElseIf ( ifAst ) ) ; <nl> + assertFalse ( CheckUtils . isElseIf ( ifAst ) ) ; <nl> <nl> final DetailAST elseAst = new DetailAST ( ) ; <nl> elseAst . setType ( TokenTypes . LITERAL _ ELSE ) ; <nl> <nl> elseAst . setFirstChild ( ifAst ) ; <nl> - Assert . assertTrue ( CheckUtils . isElseIf ( ifAst ) ) ; <nl> + assertTrue ( CheckUtils . isElseIf ( ifAst ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 88 , 7 + 97 , 7 @ @ public class CheckUtilsTest { <nl> metDef . setType ( TokenTypes . METHOD _ DEF ) ; <nl> metDef . addChild ( modifiers ) ; <nl> <nl> - Assert . assertFalse ( CheckUtils . isEqualsMethod ( metDef ) ) ; <nl> + assertFalse ( CheckUtils . isEqualsMethod ( metDef ) ) ; <nl> <nl> metDef . removeChildren ( ) ; <nl> <nl> @ @ - 112 , 7 + 121 , 7 @ @ public class CheckUtilsTest { <nl> parameters . addChild ( parameter1 ) ; <nl> metDef . addChild ( parameters ) ; <nl> <nl> - Assert . assertFalse ( CheckUtils . isEqualsMethod ( metDef ) ) ; <nl> + assertFalse ( CheckUtils . isEqualsMethod ( metDef ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 143 , 4 + 152 , 160 @ @ public class CheckUtilsTest { <nl> assertEquals ( expectedExceptionMsg , actualExceptionMsg ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void testCreateFullType ( ) throws Exception { <nl> + final DetailAST typeNode = getNodeFromFile ( TokenTypes . TYPE ) ; <nl> + <nl> + assertEquals ( " Map [ 13x12 ] " , CheckUtils . createFullType ( typeNode ) . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCreateFullTypeOfArray ( ) throws Exception { <nl> + final DetailAST arrayTypeNode = getNodeFromFile ( TokenTypes . VARIABLE _ DEF ) <nl> + . getNextSibling ( ) . getFirstChild ( ) . getNextSibling ( ) ; <nl> + <nl> + assertEquals ( " int [ 14x14 ] " , CheckUtils . createFullType ( arrayTypeNode ) . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetTypeParameterNames ( ) throws Exception { <nl> + final DetailAST parameterisedClassNode = getNodeFromFile ( TokenTypes . CLASS _ DEF ) ; <nl> + final List < String > expected = Arrays . asList ( " V " , " C " ) ; <nl> + <nl> + assertEquals ( expected , CheckUtils . getTypeParameterNames ( parameterisedClassNode ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetTypeParameters ( ) throws Exception { <nl> + final DetailAST parameterisedClassNode = getNodeFromFile ( TokenTypes . CLASS _ DEF ) ; <nl> + final DetailAST firstTypeParameter = <nl> + getNode ( parameterisedClassNode , TokenTypes . TYPE _ PARAMETER ) ; <nl> + final List < DetailAST > expected = Arrays . asList ( firstTypeParameter , <nl> + firstTypeParameter . getNextSibling ( ) . getNextSibling ( ) ) ; <nl> + <nl> + assertEquals ( expected , CheckUtils . getTypeParameters ( parameterisedClassNode ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsEqualsMethod ( ) throws Exception { <nl> + final DetailAST equalsMethodNode = getNodeFromFile ( TokenTypes . METHOD _ DEF ) ; <nl> + final DetailAST someOtherMethod = equalsMethodNode . getNextSibling ( ) ; <nl> + <nl> + assertTrue ( CheckUtils . isEqualsMethod ( equalsMethodNode ) ) ; <nl> + assertFalse ( CheckUtils . isEqualsMethod ( someOtherMethod ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsElseIf ( ) throws Exception { <nl> + final DetailAST targetMethodNode = getNodeFromFile ( TokenTypes . METHOD _ DEF ) . getNextSibling ( ) ; <nl> + final DetailAST firstElseNode = getNode ( targetMethodNode , TokenTypes . LITERAL _ ELSE ) ; <nl> + final DetailAST ifElseWithCurlyBraces = firstElseNode . getFirstChild ( ) . getFirstChild ( ) ; <nl> + final DetailAST ifElse = getNode ( firstElseNode . getParent ( ) . getNextSibling ( ) , <nl> + TokenTypes . LITERAL _ ELSE ) . getFirstChild ( ) ; <nl> + final DetailAST ifWithoutElse = <nl> + firstElseNode . getParent ( ) . getNextSibling ( ) . getNextSibling ( ) ; <nl> + <nl> + assertTrue ( CheckUtils . isElseIf ( ifElseWithCurlyBraces ) ) ; <nl> + assertTrue ( CheckUtils . isElseIf ( ifElse ) ) ; <nl> + assertFalse ( CheckUtils . isElseIf ( ifWithoutElse ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsNonViodMethod ( ) throws Exception { <nl> + final DetailAST nonVoidMethod = getNodeFromFile ( TokenTypes . METHOD _ DEF ) ; <nl> + final DetailAST voidMethod = nonVoidMethod . getNextSibling ( ) ; <nl> + <nl> + assertTrue ( CheckUtils . isNonVoidMethod ( nonVoidMethod ) ) ; <nl> + assertFalse ( CheckUtils . isNonVoidMethod ( voidMethod ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsGetterMethod ( ) throws Exception { <nl> + final DetailAST notGetterMethod = getNodeFromFile ( TokenTypes . METHOD _ DEF ) ; <nl> + final DetailAST getterMethod = notGetterMethod . getNextSibling ( ) . getNextSibling ( ) ; <nl> + <nl> + assertTrue ( CheckUtils . isGetterMethod ( getterMethod ) ) ; <nl> + assertFalse ( CheckUtils . isGetterMethod ( notGetterMethod ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsSetterMethod ( ) throws Exception { <nl> + final DetailAST firstClassMethod = getNodeFromFile ( TokenTypes . METHOD _ DEF ) ; <nl> + final DetailAST setterMethod = <nl> + firstClassMethod . getNextSibling ( ) . getNextSibling ( ) . getNextSibling ( ) ; <nl> + final DetailAST notSetterMethod = setterMethod . getNextSibling ( ) ; <nl> + <nl> + assertTrue ( CheckUtils . isSetterMethod ( setterMethod ) ) ; <nl> + assertFalse ( CheckUtils . isSetterMethod ( notSetterMethod ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetAccessModifierFromModifiersToken ( ) throws Exception { <nl> + final DetailAST privateVariable = getNodeFromFile ( TokenTypes . VARIABLE _ DEF ) ; <nl> + final DetailAST protectedVariable = privateVariable . getNextSibling ( ) ; <nl> + final DetailAST publicVariable = protectedVariable . getNextSibling ( ) ; <nl> + final DetailAST packageVariable = publicVariable . getNextSibling ( ) ; <nl> + <nl> + assertEquals ( AccessModifier . PRIVATE , <nl> + CheckUtils . getAccessModifierFromModifiersToken ( privateVariable . getFirstChild ( ) ) ) ; <nl> + assertEquals ( AccessModifier . PROTECTED , <nl> + CheckUtils . getAccessModifierFromModifiersToken ( protectedVariable . getFirstChild ( ) ) ) ; <nl> + assertEquals ( AccessModifier . PUBLIC , <nl> + CheckUtils . getAccessModifierFromModifiersToken ( publicVariable . getFirstChild ( ) ) ) ; <nl> + assertEquals ( AccessModifier . PACKAGE , <nl> + CheckUtils . getAccessModifierFromModifiersToken ( packageVariable . getFirstChild ( ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetFirstNode ( ) throws Exception { <nl> + final DetailAST classDef = getNodeFromFile ( TokenTypes . CLASS _ DEF ) ; <nl> + <nl> + assertEquals ( classDef . getFirstChild ( ) . getFirstChild ( ) , CheckUtils . getFirstNode ( classDef ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsReceiverParameter ( ) throws Exception { <nl> + final DetailAST objBlock = getNodeFromFile ( TokenTypes . OBJBLOCK ) ; <nl> + final DetailAST methodWithReceiverParameter = objBlock . getLastChild ( ) . getPreviousSibling ( ) ; <nl> + final DetailAST receiverParameter = <nl> + getNode ( methodWithReceiverParameter , TokenTypes . PARAMETER _ DEF ) ; <nl> + final DetailAST simpleParameter = <nl> + receiverParameter . getNextSibling ( ) . getNextSibling ( ) ; <nl> + <nl> + assertTrue ( CheckUtils . isReceiverParameter ( receiverParameter ) ) ; <nl> + assertFalse ( CheckUtils . isReceiverParameter ( simpleParameter ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testParseDouble ( ) throws Exception { <nl> + assertEquals ( 1 . 0 , CheckUtils . parseDouble ( " 1 " , TokenTypes . NUM _ INT ) , 0 ) ; <nl> + assertEquals ( - 0 . 05 , CheckUtils . parseDouble ( " - 0 . 05f " , TokenTypes . NUM _ FLOAT ) , 0 ) ; <nl> + assertEquals ( 8 . 0 , CheckUtils . parseDouble ( " 8L " , TokenTypes . NUM _ LONG ) , 0 ) ; <nl> + assertEquals ( 0 . 0 , CheckUtils . parseDouble ( " 0 . 0 " , TokenTypes . NUM _ DOUBLE ) , 0 ) ; <nl> + assertEquals ( 2915 . 0 , CheckUtils . parseDouble ( " 0x0B63 " , TokenTypes . NUM _ INT ) , 0 ) ; <nl> + assertEquals ( 2 . 147 _ 483 _ 647E10 , <nl> + CheckUtils . parseDouble ( " 21474836470 " , TokenTypes . NUM _ LONG ) , 0 ) ; <nl> + assertEquals ( 59 . 0 , CheckUtils . parseDouble ( " 073L " , TokenTypes . NUM _ LONG ) , 0 ) ; <nl> + } <nl> + <nl> + private static File getPath ( String filename ) { <nl> + return new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / utils / checkutils / " <nl> + + filename ) ; <nl> + } <nl> + <nl> + private static DetailAST getNodeFromFile ( int type ) throws Exception { <nl> + return getNode ( parseFile ( getPath ( " InputCheckUtilsTest . java " ) ) , type ) ; <nl> + } <nl> + <nl> + private static DetailAST getNode ( DetailAST root , int type ) { <nl> + final Optional < DetailAST > node = findTokenInAstByPredicate ( root , <nl> + ast - > ast . getType ( ) = = type ) ; <nl> + <nl> + if ( ! node . isPresent ( ) ) { <nl> + fail ( " Cannot find node of specified type : " + type ) ; <nl> + } <nl> + <nl> + return node . get ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / checkutils / InputCheckUtilsTest . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / checkutils / InputCheckUtilsTest . java <nl> new file mode 100644 <nl> index 0000000 . . d4619c3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / checkutils / InputCheckUtilsTest . java <nl> @ @ - 0 , 0 + 1 , 70 @ @ <nl> + package com . puppycrawl . tools . checkstyle . utils . checkutils ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> + import com . google . common . base . Objects ; <nl> + <nl> + / * * <nl> + * It is class . <nl> + * @ param < V > ssss <nl> + * @ param < C > dddd <nl> + * / <nl> + public class InputCheckUtilsTest < V , C > { <nl> + private Map < String , Integer > field = new HashMap < > ( ) ; <nl> + protected int [ ] array = new int [ 10 ] ; <nl> + public static final Long VAR _ 1 = 1L ; <nl> + static final double VAR _ 2 = 5 . 0 ; <nl> + <nl> + @ Override <nl> + public boolean equals ( Object o ) { <nl> + if ( this = = o ) { <nl> + return true ; <nl> + } <nl> + if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { <nl> + return false ; <nl> + } <nl> + InputCheckUtilsTest < V , C > that = ( InputCheckUtilsTest < V , C > ) o ; <nl> + return Objects . equal ( field , that . field ) & & <nl> + Objects . equal ( array , that . array ) ; <nl> + } <nl> + <nl> + public void doSomething ( int value ) { <nl> + if ( field . isEmpty ( ) ) { <nl> + field . put ( String . valueOf ( value ) , value < < 1 ) ; <nl> + } else { <nl> + if ( ! field . containsKey ( String . valueOf ( value ) ) ) { <nl> + field . put ( String . valueOf ( value ) , value < < 1 ) ; <nl> + } <nl> + } <nl> + <nl> + if ( ! field . containsKey ( String . valueOf ( value ) ) ) { <nl> + field . put ( String . valueOf ( value ) , value < < 1 ) ; <nl> + } else if ( value = = 10 ) { <nl> + array [ 9 ] = - 1 ; <nl> + } <nl> + <nl> + if ( field . size ( ) < 10 ) { <nl> + array [ 9 ] = field . getOrDefault ( String . valueOf ( value ) , - 1 ) ; <nl> + } <nl> + <nl> + } <nl> + <nl> + public Map < String , Integer > getField ( ) { <nl> + return new HashMap < > ( field ) ; <nl> + } <nl> + <nl> + public void setField ( Map < String , Integer > field ) { <nl> + this . field = field ; <nl> + } <nl> + <nl> + public int [ ] setArray ( int . . . array ) { <nl> + this . array = array ; <nl> + if ( array . length > 0 ) { <nl> + return this . array ; <nl> + } else { <nl> + return new int [ 4 ] ; <nl> + } <nl> + } <nl> + <nl> + public void testReceiver ( InputCheckUtilsTest < V , C > this , int variable ) { } <nl> + }
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 37bc671 . . 2369ad6 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 856 , 7 + 856 , 7 @ @ <nl> < plugins > <nl> < plugin > <nl> < artifactId > maven - project - info - reports - plugin < / artifactId > <nl> - < version > 2 . 8 < / version > <nl> + < version > 2 . 8 . 1 < / version > <nl> < / plugin > <nl> <nl> < plugin >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 3aa1419 . . 7f99bbc 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2082 , 7 + 2082 , 7 @ @ 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . utils . * < / param > 
 < / targetTests > 
 - < mutationThreshold > 49 < / mutationThreshold > 
 + < mutationThreshold > 67 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java 
 index 64b1a17 . . 11f6e35 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java 
 @ @ - 19 , 15 + 19 , 25 @ @ 
 
 package com . puppycrawl . tools . checkstyle . internal ; 
 
 + import static com . puppycrawl . tools . checkstyle . TreeWalker . parseWithComments ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . Modifier ; 
 + import java . util . Optional ; 
 import java . util . Set ; 
 + import java . util . function . Predicate ; 
 
 import org . junit . Assert ; 
 
 + import antlr . ANTLRException ; 
 import com . puppycrawl . tools . checkstyle . PackageNamesLoader ; 
 import com . puppycrawl . tools . checkstyle . PackageObjectFactory ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 
 public final class TestUtils { 
 
 @ @ - 56 , 4 + 66 , 47 @ @ public final class TestUtils { 
 final Set < String > packageNames = PackageNamesLoader . getPackageNames ( cl ) ; 
 return new PackageObjectFactory ( packageNames , cl ) ; 
 } 
 + 
 + / * * 
 + * Finds node of specified type among root children , siblings , siblings children 
 + * on any deep level . 
 + * @ param root DetailAST 
 + * @ param predicate predicate 
 + * @ return { @ link Optional } of { @ link DetailAST } node which matches the predicate . 
 + * / 
 + public static Optional < DetailAST > findTokenInAstByPredicate ( DetailAST root , 
 + Predicate < DetailAST > predicate ) { 
 + DetailAST curNode = root ; 
 + while ( ! predicate . test ( curNode ) ) { 
 + DetailAST toVisit = curNode . getFirstChild ( ) ; 
 + while ( curNode ! = null & & toVisit = = null ) { 
 + toVisit = curNode . getNextSibling ( ) ; 
 + if ( toVisit = = null ) { 
 + curNode = curNode . getParent ( ) ; 
 + } 
 + } 
 + 
 + if ( curNode = = toVisit | | curNode = = root . getParent ( ) ) { 
 + curNode = null ; 
 + break ; 
 + } 
 + 
 + curNode = toVisit ; 
 + } 
 + return Optional . ofNullable ( curNode ) ; 
 + } 
 + 
 + / * * 
 + * Parses Java source file . Results in AST which contains comment nodes . 
 + * @ param file file to parse 
 + * @ return DetailAST tree 
 + * @ throws NullPointerException if the text is null 
 + * @ throws IOException if the file could not be read 
 + * @ throws ANTLRException if parser or lexer failed 
 + * / 
 + public static DetailAST parseFile ( File file ) throws IOException , ANTLRException { 
 + final FileText text = new FileText ( file . getAbsoluteFile ( ) , " UTF - 8 " ) ; 
 + final FileContents contents = new FileContents ( text ) ; 
 + return parseWithComments ( contents ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java 
 index f76bb89 . . 1cd1568 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java 
 @ @ - 20 , 14 + 20 , 23 @ @ 
 package com . puppycrawl . tools . checkstyle . utils ; 
 
 import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; 
 + import static com . puppycrawl . tools . checkstyle . internal . TestUtils . findTokenInAstByPredicate ; 
 + import static com . puppycrawl . tools . checkstyle . internal . TestUtils . parseFile ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 - import org . junit . Assert ; 
 + import java . io . File ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + import java . util . Optional ; 
 + 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . checks . naming . AccessModifier ; 
 
 public class CheckUtilsTest { 
 
 @ @ - 47 , 7 + 56 , 7 @ @ public class CheckUtilsTest { 
 final DetailAST ast = new DetailAST ( ) ; 
 ast . setType ( TokenTypes . ASSIGN ) ; 
 ast . setText ( " ASSIGN " ) ; 
 - Assert . assertFalse ( CheckUtils . isElseIf ( ast ) ) ; 
 + assertFalse ( CheckUtils . isElseIf ( ast ) ) ; 
 
 final DetailAST parentAst = new DetailAST ( ) ; 
 parentAst . setType ( TokenTypes . LCURLY ) ; 
 @ @ - 58 , 7 + 67 , 7 @ @ public class CheckUtilsTest { 
 ifAst . setText ( " IF " ) ; 
 parentAst . addChild ( ifAst ) ; 
 
 - Assert . assertFalse ( CheckUtils . isElseIf ( ifAst ) ) ; 
 + assertFalse ( CheckUtils . isElseIf ( ifAst ) ) ; 
 
 final DetailAST parentAst2 = new DetailAST ( ) ; 
 parentAst2 . setType ( TokenTypes . SLIST ) ; 
 @ @ - 66 , 13 + 75 , 13 @ @ public class CheckUtilsTest { 
 
 parentAst2 . addChild ( ifAst ) ; 
 
 - Assert . assertFalse ( CheckUtils . isElseIf ( ifAst ) ) ; 
 + assertFalse ( CheckUtils . isElseIf ( ifAst ) ) ; 
 
 final DetailAST elseAst = new DetailAST ( ) ; 
 elseAst . setType ( TokenTypes . LITERAL _ ELSE ) ; 
 
 elseAst . setFirstChild ( ifAst ) ; 
 - Assert . assertTrue ( CheckUtils . isElseIf ( ifAst ) ) ; 
 + assertTrue ( CheckUtils . isElseIf ( ifAst ) ) ; 
 } 
 
 @ Test 
 @ @ - 88 , 7 + 97 , 7 @ @ public class CheckUtilsTest { 
 metDef . setType ( TokenTypes . METHOD _ DEF ) ; 
 metDef . addChild ( modifiers ) ; 
 
 - Assert . assertFalse ( CheckUtils . isEqualsMethod ( metDef ) ) ; 
 + assertFalse ( CheckUtils . isEqualsMethod ( metDef ) ) ; 
 
 metDef . removeChildren ( ) ; 
 
 @ @ - 112 , 7 + 121 , 7 @ @ public class CheckUtilsTest { 
 parameters . addChild ( parameter1 ) ; 
 metDef . addChild ( parameters ) ; 
 
 - Assert . assertFalse ( CheckUtils . isEqualsMethod ( metDef ) ) ; 
 + assertFalse ( CheckUtils . isEqualsMethod ( metDef ) ) ; 
 } 
 
 @ Test 
 @ @ - 143 , 4 + 152 , 160 @ @ public class CheckUtilsTest { 
 assertEquals ( expectedExceptionMsg , actualExceptionMsg ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void testCreateFullType ( ) throws Exception { 
 + final DetailAST typeNode = getNodeFromFile ( TokenTypes . TYPE ) ; 
 + 
 + assertEquals ( " Map [ 13x12 ] " , CheckUtils . createFullType ( typeNode ) . toString ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testCreateFullTypeOfArray ( ) throws Exception { 
 + final DetailAST arrayTypeNode = getNodeFromFile ( TokenTypes . VARIABLE _ DEF ) 
 + . getNextSibling ( ) . getFirstChild ( ) . getNextSibling ( ) ; 
 + 
 + assertEquals ( " int [ 14x14 ] " , CheckUtils . createFullType ( arrayTypeNode ) . toString ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetTypeParameterNames ( ) throws Exception { 
 + final DetailAST parameterisedClassNode = getNodeFromFile ( TokenTypes . CLASS _ DEF ) ; 
 + final List < String > expected = Arrays . asList ( " V " , " C " ) ; 
 + 
 + assertEquals ( expected , CheckUtils . getTypeParameterNames ( parameterisedClassNode ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetTypeParameters ( ) throws Exception { 
 + final DetailAST parameterisedClassNode = getNodeFromFile ( TokenTypes . CLASS _ DEF ) ; 
 + final DetailAST firstTypeParameter = 
 + getNode ( parameterisedClassNode , TokenTypes . TYPE _ PARAMETER ) ; 
 + final List < DetailAST > expected = Arrays . asList ( firstTypeParameter , 
 + firstTypeParameter . getNextSibling ( ) . getNextSibling ( ) ) ; 
 + 
 + assertEquals ( expected , CheckUtils . getTypeParameters ( parameterisedClassNode ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsEqualsMethod ( ) throws Exception { 
 + final DetailAST equalsMethodNode = getNodeFromFile ( TokenTypes . METHOD _ DEF ) ; 
 + final DetailAST someOtherMethod = equalsMethodNode . getNextSibling ( ) ; 
 + 
 + assertTrue ( CheckUtils . isEqualsMethod ( equalsMethodNode ) ) ; 
 + assertFalse ( CheckUtils . isEqualsMethod ( someOtherMethod ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsElseIf ( ) throws Exception { 
 + final DetailAST targetMethodNode = getNodeFromFile ( TokenTypes . METHOD _ DEF ) . getNextSibling ( ) ; 
 + final DetailAST firstElseNode = getNode ( targetMethodNode , TokenTypes . LITERAL _ ELSE ) ; 
 + final DetailAST ifElseWithCurlyBraces = firstElseNode . getFirstChild ( ) . getFirstChild ( ) ; 
 + final DetailAST ifElse = getNode ( firstElseNode . getParent ( ) . getNextSibling ( ) , 
 + TokenTypes . LITERAL _ ELSE ) . getFirstChild ( ) ; 
 + final DetailAST ifWithoutElse = 
 + firstElseNode . getParent ( ) . getNextSibling ( ) . getNextSibling ( ) ; 
 + 
 + assertTrue ( CheckUtils . isElseIf ( ifElseWithCurlyBraces ) ) ; 
 + assertTrue ( CheckUtils . isElseIf ( ifElse ) ) ; 
 + assertFalse ( CheckUtils . isElseIf ( ifWithoutElse ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsNonViodMethod ( ) throws Exception { 
 + final DetailAST nonVoidMethod = getNodeFromFile ( TokenTypes . METHOD _ DEF ) ; 
 + final DetailAST voidMethod = nonVoidMethod . getNextSibling ( ) ; 
 + 
 + assertTrue ( CheckUtils . isNonVoidMethod ( nonVoidMethod ) ) ; 
 + assertFalse ( CheckUtils . isNonVoidMethod ( voidMethod ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsGetterMethod ( ) throws Exception { 
 + final DetailAST notGetterMethod = getNodeFromFile ( TokenTypes . METHOD _ DEF ) ; 
 + final DetailAST getterMethod = notGetterMethod . getNextSibling ( ) . getNextSibling ( ) ; 
 + 
 + assertTrue ( CheckUtils . isGetterMethod ( getterMethod ) ) ; 
 + assertFalse ( CheckUtils . isGetterMethod ( notGetterMethod ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsSetterMethod ( ) throws Exception { 
 + final DetailAST firstClassMethod = getNodeFromFile ( TokenTypes . METHOD _ DEF ) ; 
 + final DetailAST setterMethod = 
 + firstClassMethod . getNextSibling ( ) . getNextSibling ( ) . getNextSibling ( ) ; 
 + final DetailAST notSetterMethod = setterMethod . getNextSibling ( ) ; 
 + 
 + assertTrue ( CheckUtils . isSetterMethod ( setterMethod ) ) ; 
 + assertFalse ( CheckUtils . isSetterMethod ( notSetterMethod ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetAccessModifierFromModifiersToken ( ) throws Exception { 
 + final DetailAST privateVariable = getNodeFromFile ( TokenTypes . VARIABLE _ DEF ) ; 
 + final DetailAST protectedVariable = privateVariable . getNextSibling ( ) ; 
 + final DetailAST publicVariable = protectedVariable . getNextSibling ( ) ; 
 + final DetailAST packageVariable = publicVariable . getNextSibling ( ) ; 
 + 
 + assertEquals ( AccessModifier . PRIVATE , 
 + CheckUtils . getAccessModifierFromModifiersToken ( privateVariable . getFirstChild ( ) ) ) ; 
 + assertEquals ( AccessModifier . PROTECTED , 
 + CheckUtils . getAccessModifierFromModifiersToken ( protectedVariable . getFirstChild ( ) ) ) ; 
 + assertEquals ( AccessModifier . PUBLIC , 
 + CheckUtils . getAccessModifierFromModifiersToken ( publicVariable . getFirstChild ( ) ) ) ; 
 + assertEquals ( AccessModifier . PACKAGE , 
 + CheckUtils . getAccessModifierFromModifiersToken ( packageVariable . getFirstChild ( ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetFirstNode ( ) throws Exception { 
 + final DetailAST classDef = getNodeFromFile ( TokenTypes . CLASS _ DEF ) ; 
 + 
 + assertEquals ( classDef . getFirstChild ( ) . getFirstChild ( ) , CheckUtils . getFirstNode ( classDef ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsReceiverParameter ( ) throws Exception { 
 + final DetailAST objBlock = getNodeFromFile ( TokenTypes . OBJBLOCK ) ; 
 + final DetailAST methodWithReceiverParameter = objBlock . getLastChild ( ) . getPreviousSibling ( ) ; 
 + final DetailAST receiverParameter = 
 + getNode ( methodWithReceiverParameter , TokenTypes . PARAMETER _ DEF ) ; 
 + final DetailAST simpleParameter = 
 + receiverParameter . getNextSibling ( ) . getNextSibling ( ) ; 
 + 
 + assertTrue ( CheckUtils . isReceiverParameter ( receiverParameter ) ) ; 
 + assertFalse ( CheckUtils . isReceiverParameter ( simpleParameter ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testParseDouble ( ) throws Exception { 
 + assertEquals ( 1 . 0 , CheckUtils . parseDouble ( " 1 " , TokenTypes . NUM _ INT ) , 0 ) ; 
 + assertEquals ( - 0 . 05 , CheckUtils . parseDouble ( " - 0 . 05f " , TokenTypes . NUM _ FLOAT ) , 0 ) ; 
 + assertEquals ( 8 . 0 , CheckUtils . parseDouble ( " 8L " , TokenTypes . NUM _ LONG ) , 0 ) ; 
 + assertEquals ( 0 . 0 , CheckUtils . parseDouble ( " 0 . 0 " , TokenTypes . NUM _ DOUBLE ) , 0 ) ; 
 + assertEquals ( 2915 . 0 , CheckUtils . parseDouble ( " 0x0B63 " , TokenTypes . NUM _ INT ) , 0 ) ; 
 + assertEquals ( 2 . 147 _ 483 _ 647E10 , 
 + CheckUtils . parseDouble ( " 21474836470 " , TokenTypes . NUM _ LONG ) , 0 ) ; 
 + assertEquals ( 59 . 0 , CheckUtils . parseDouble ( " 073L " , TokenTypes . NUM _ LONG ) , 0 ) ; 
 + } 
 + 
 + private static File getPath ( String filename ) { 
 + return new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / utils / checkutils / " 
 + + filename ) ; 
 + } 
 + 
 + private static DetailAST getNodeFromFile ( int type ) throws Exception { 
 + return getNode ( parseFile ( getPath ( " InputCheckUtilsTest . java " ) ) , type ) ; 
 + } 
 + 
 + private static DetailAST getNode ( DetailAST root , int type ) { 
 + final Optional < DetailAST > node = findTokenInAstByPredicate ( root , 
 + ast - > ast . getType ( ) = = type ) ; 
 + 
 + if ( ! node . isPresent ( ) ) { 
 + fail ( " Cannot find node of specified type : " + type ) ; 
 + } 
 + 
 + return node . get ( ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / checkutils / InputCheckUtilsTest . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / checkutils / InputCheckUtilsTest . java 
 new file mode 100644 
 index 0000000 . . d4619c3 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / checkutils / InputCheckUtilsTest . java 
 @ @ - 0 , 0 + 1 , 70 @ @ 
 + package com . puppycrawl . tools . checkstyle . utils . checkutils ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 + import com . google . common . base . Objects ; 
 + 
 + / * * 
 + * It is class . 
 + * @ param < V > ssss 
 + * @ param < C > dddd 
 + * / 
 + public class InputCheckUtilsTest < V , C > { 
 + private Map < String , Integer > field = new HashMap < > ( ) ; 
 + protected int [ ] array = new int [ 10 ] ; 
 + public static final Long VAR _ 1 = 1L ; 
 + static final double VAR _ 2 = 5 . 0 ; 
 + 
 + @ Override 
 + public boolean equals ( Object o ) { 
 + if ( this = = o ) { 
 + return true ; 
 + } 
 + if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { 
 + return false ; 
 + } 
 + InputCheckUtilsTest < V , C > that = ( InputCheckUtilsTest < V , C > ) o ; 
 + return Objects . equal ( field , that . field ) & & 
 + Objects . equal ( array , that . array ) ; 
 + } 
 + 
 + public void doSomething ( int value ) { 
 + if ( field . isEmpty ( ) ) { 
 + field . put ( String . valueOf ( value ) , value < < 1 ) ; 
 + } else { 
 + if ( ! field . containsKey ( String . valueOf ( value ) ) ) { 
 + field . put ( String . valueOf ( value ) , value < < 1 ) ; 
 + } 
 + } 
 + 
 + if ( ! field . containsKey ( String . valueOf ( value ) ) ) { 
 + field . put ( String . valueOf ( value ) , value < < 1 ) ; 
 + } else if ( value = = 10 ) { 
 + array [ 9 ] = - 1 ; 
 + } 
 + 
 + if ( field . size ( ) < 10 ) { 
 + array [ 9 ] = field . getOrDefault ( String . valueOf ( value ) , - 1 ) ; 
 + } 
 + 
 + } 
 + 
 + public Map < String , Integer > getField ( ) { 
 + return new HashMap < > ( field ) ; 
 + } 
 + 
 + public void setField ( Map < String , Integer > field ) { 
 + this . field = field ; 
 + } 
 + 
 + public int [ ] setArray ( int . . . array ) { 
 + this . array = array ; 
 + if ( array . length > 0 ) { 
 + return this . array ; 
 + } else { 
 + return new int [ 4 ] ; 
 + } 
 + } 
 + 
 + public void testReceiver ( InputCheckUtilsTest < V , C > this , int variable ) { } 
 + }

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 37bc671 . . 2369ad6 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 856 , 7 + 856 , 7 @ @ 
 < plugins > 
 < plugin > 
 < artifactId > maven - project - info - reports - plugin < / artifactId > 
 - < version > 2 . 8 < / version > 
 + < version > 2 . 8 . 1 < / version > 
 < / plugin > 
 
 < plugin >
