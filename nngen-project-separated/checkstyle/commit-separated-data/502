BLEU SCORE: 0.519087769811935

TEST MSG: [ maven - release - plugin ] prepare for next development iteration
GENERATED MSG: [ maven - release - plugin ] prepare release checkstyle - 8 . 4

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index c16f160 . . 83091dc 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 22 , 7 + 22 , 7 @ @ <nl> <nl> < groupId > com . puppycrawl . tools < / groupId > <nl> < artifactId > checkstyle < / artifactId > <nl> - < version > 8 . 4 < / version > <nl> + < version > 8 . 5 - SNAPSHOT < / version > <nl> < packaging > jar < / packaging > <nl> <nl> < name > checkstyle < / name >
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlRegExpInPkgTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlRegExpInPkgTest . java <nl> deleted file mode 100644 <nl> index 197cee5 . . 0000000 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlRegExpInPkgTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 102 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> - <nl> - import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertNull ; <nl> - <nl> - import org . junit . Before ; <nl> - import org . junit . Test ; <nl> - <nl> - public class ImportControlRegExpInPkgTest { <nl> - private ImportControl icRoot ; <nl> - private ImportControl icCommon ; <nl> - <nl> - @ Before <nl> - public void setUp ( ) { <nl> - icRoot = new ImportControl ( " com \ \ . [ ^ . ] + \ \ . courtlink " , true ) ; <nl> - icCommon = new ImportControl ( icRoot , " com + on " , true ) ; <nl> - icRoot . addChild ( icCommon ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testRegExpInRootIsConsidered ( ) { <nl> - assertNull ( " Package should not be null " , icRoot . locateFinest ( " com " ) ) ; <nl> - assertNull ( " Package should not be null " , icRoot . locateFinest ( " com / hurz / courtlink " ) ) ; <nl> - assertNull ( " Package should not be null " , icRoot . locateFinest ( " com . hurz . hurz . courtlink " ) ) ; <nl> - assertEquals ( " Invalid package " , icRoot , icRoot . locateFinest ( " com . hurz . courtlink . domain " ) ) ; <nl> - assertEquals ( " Invalid package " , icRoot , icRoot <nl> - . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testRegExpInSubpackageIsConsidered ( ) { <nl> - assertEquals ( " Invalid package " , icCommon , icRoot <nl> - . locateFinest ( " com . kazgroup . courtlink . common . api " ) ) ; <nl> - assertEquals ( " Invalid package " , icCommon , icRoot <nl> - . locateFinest ( " com . kazgroup . courtlink . comon . api " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testEnsureTrailingDot ( ) { <nl> - assertNull ( " Invalid package " , icRoot . locateFinest ( " com . kazgroup . courtlinkkk " ) ) ; <nl> - assertNull ( " Invalid package " , icRoot . locateFinest ( " com . kazgroup . courtlink / common . api " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testAlternationInParentIsHandledCorrectly ( ) { <nl> - / / the regular expression has to be adjusted to ( com \ . foo | com \ . bar ) <nl> - final ImportControl root = new ImportControl ( " com \ \ . foo | com \ \ . bar " , true ) ; <nl> - final ImportControl common = new ImportControl ( root , " common " , false ) ; <nl> - root . addChild ( common ) ; <nl> - assertEquals ( " Invalid package " , root , root . locateFinest ( " com . foo " ) ) ; <nl> - assertEquals ( " Invalid package " , common , root . locateFinest ( " com . foo . common " ) ) ; <nl> - assertEquals ( " Invalid package " , root , root . locateFinest ( " com . bar " ) ) ; <nl> - assertEquals ( " Invalid package " , common , root . locateFinest ( " com . bar . common " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testAlternationInParentIfUserCaresForIt ( ) { <nl> - / / the regular expression has to be adjusted to ( com \ . foo | com \ . bar ) <nl> - final ImportControl root = new ImportControl ( " ( com \ \ . foo | com \ \ . bar ) " , true ) ; <nl> - final ImportControl common = new ImportControl ( root , " common " , false ) ; <nl> - root . addChild ( common ) ; <nl> - assertEquals ( " Invalid package " , root , root . locateFinest ( " com . foo " ) ) ; <nl> - assertEquals ( " Invalid package " , common , root . locateFinest ( " com . foo . common " ) ) ; <nl> - assertEquals ( " Invalid package " , root , root . locateFinest ( " com . bar " ) ) ; <nl> - assertEquals ( " Invalid package " , common , root . locateFinest ( " com . bar . common " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testAlternationInSubpackageIsHandledCorrectly ( ) { <nl> - final ImportControl root = new ImportControl ( " org . somewhere " , false ) ; <nl> - / / the regular expression has to be adjusted to ( foo | bar ) <nl> - final ImportControl subpackages = new ImportControl ( root , " foo | bar " , true ) ; <nl> - root . addChild ( subpackages ) ; <nl> - assertEquals ( " Invalid package " , root , root . locateFinest ( " org . somewhere " ) ) ; <nl> - assertEquals ( " Invalid package " , subpackages , root . locateFinest ( " org . somewhere . foo " ) ) ; <nl> - assertEquals ( " Invalid package " , subpackages , root . locateFinest ( " org . somewhere . bar " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testUnknownPkg ( ) { <nl> - assertNull ( " Package should not be null " , icRoot . locateFinest ( " net . another " ) ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlRegExpTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlRegExpTest . java <nl> deleted file mode 100644 <nl> index 58c0051 . . 0000000 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlRegExpTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 91 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> - <nl> - import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertNull ; <nl> - <nl> - import org . junit . Before ; <nl> - import org . junit . Test ; <nl> - <nl> - public class ImportControlRegExpTest { <nl> - private final ImportControl icRoot = new ImportControl ( " com . kazgroup . courtlink " , false ) ; <nl> - private final ImportControl icCommon = new ImportControl ( icRoot , " common " , false ) ; <nl> - <nl> - @ Before <nl> - public void setUp ( ) { <nl> - icRoot . addChild ( icCommon ) ; <nl> - icRoot . addImportRule ( <nl> - new PkgImportRule ( false , false , " . * \ \ . ( spring | lui ) framework " , false , true ) ) ; <nl> - icRoot . addImportRule ( <nl> - new PkgImportRule ( false , false , " org \ \ . hibernate " , false , true ) ) ; <nl> - icRoot . addImportRule ( <nl> - new PkgImportRule ( true , false , " org \ \ . ( apache | lui ) \ \ . commons " , false , true ) ) ; <nl> - <nl> - icCommon . addImportRule ( <nl> - new PkgImportRule ( true , false , " org \ \ . h . * " , false , true ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testLocateFinest ( ) { <nl> - assertEquals ( " Unxpected response " , icRoot , icRoot <nl> - . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ; <nl> - assertEquals ( " Unxpected response " , icCommon , icRoot <nl> - . locateFinest ( " com . kazgroup . courtlink . common . api " ) ) ; <nl> - assertNull ( " Unxpected response " , icRoot . locateFinest ( " com " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testCheckAccess ( ) { <nl> - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( <nl> - " com . kazgroup . courtlink . common " , <nl> - " org . springframework . something " ) ) ; <nl> - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( <nl> - " com . kazgroup . courtlink . common " , <nl> - " org . luiframework . something " ) ) ; <nl> - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( <nl> - " com . kazgroup . courtlink . common " , <nl> - " de . springframework . something " ) ) ; <nl> - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( <nl> - " com . kazgroup . courtlink . common " , <nl> - " de . luiframework . something " ) ) ; <nl> - assertEquals ( " Unxpected access result " , AccessResult . ALLOWED , icCommon <nl> - . checkAccess ( " com . kazgroup . courtlink . common " , <nl> - " org . apache . commons . something " ) ) ; <nl> - assertEquals ( " Unxpected access result " , AccessResult . ALLOWED , icCommon <nl> - . checkAccess ( " com . kazgroup . courtlink . common " , <nl> - " org . lui . commons . something " ) ) ; <nl> - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( <nl> - " com . kazgroup . courtlink . common " , " org . apache . commons " ) ) ; <nl> - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( <nl> - " com . kazgroup . courtlink . common " , " org . lui . commons " ) ) ; <nl> - assertEquals ( " Unxpected access result " , AccessResult . ALLOWED , icCommon . checkAccess ( <nl> - " com . kazgroup . courtlink . common " , " org . hibernate . something " ) ) ; <nl> - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( <nl> - " com . kazgroup . courtlink . common " , " com . badpackage . something " ) ) ; <nl> - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icRoot . checkAccess ( <nl> - " com . kazgroup . courtlink " , " org . hibernate . something " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testUnknownPkg ( ) { <nl> - assertNull ( " Unxpected response " , icRoot . locateFinest ( " net . another " ) ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlTest . java <nl> index db34cd8 . . ded4f34 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlTest . java <nl> @ @ - 29 , 6 + 29 , 16 @ @ public class ImportControlTest { <nl> private final ImportControl icRoot = new ImportControl ( " com . kazgroup . courtlink " , false ) ; <nl> private final ImportControl icCommon = new ImportControl ( icRoot , " common " , false ) ; <nl> <nl> + private final ImportControl icRootRegexpChild = new ImportControl ( " com . kazgroup . courtlink " , <nl> + false ) ; <nl> + private final ImportControl icCommonRegexpChild = new ImportControl ( icRootRegexpChild , <nl> + " common " , false ) ; <nl> + <nl> + private final ImportControl icRootRegexpParent = new ImportControl ( " com \ \ . [ ^ . ] + \ \ . courtlink " , <nl> + true ) ; <nl> + private final ImportControl icCommonRegexpParen = new ImportControl ( icRootRegexpParent , <nl> + " com + on " , true ) ; <nl> + <nl> @ Before <nl> public void setUp ( ) { <nl> icRoot . addChild ( icCommon ) ; <nl> @ @ - 39 , 8 + 49 , 21 @ @ public class ImportControlTest { <nl> icRoot . addImportRule ( <nl> new PkgImportRule ( true , false , " org . apache . commons " , false , false ) ) ; <nl> <nl> + icRootRegexpChild . addChild ( icCommonRegexpChild ) ; <nl> + icRootRegexpChild . addImportRule ( <nl> + new PkgImportRule ( false , false , " . * \ \ . ( spring | lui ) framework " , false , true ) ) ; <nl> + icRootRegexpChild . addImportRule ( <nl> + new PkgImportRule ( false , false , " org \ \ . hibernate " , false , true ) ) ; <nl> + icRootRegexpChild . addImportRule ( <nl> + new PkgImportRule ( true , false , " org \ \ . ( apache | lui ) \ \ . commons " , false , true ) ) ; <nl> + <nl> icCommon . addImportRule ( <nl> new PkgImportRule ( true , false , " org . hibernate " , false , false ) ) ; <nl> + <nl> + icCommonRegexpChild . addImportRule ( <nl> + new PkgImportRule ( true , false , " org \ \ . h . * " , false , true ) ) ; <nl> + <nl> + icRootRegexpParent . addChild ( icCommonRegexpParen ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 81 , 4 + 104 , 123 @ @ public class ImportControlTest { <nl> public void testUnknownPkg ( ) { <nl> assertNull ( " Unxpected response " , icRoot . locateFinest ( " net . another " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testRegExpChildLocateFinest ( ) { <nl> + assertEquals ( " Unxpected response " , icRootRegexpChild , icRootRegexpChild <nl> + . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ; <nl> + assertEquals ( " Unxpected response " , icCommonRegexpChild , icRootRegexpChild <nl> + . locateFinest ( " com . kazgroup . courtlink . common . api " ) ) ; <nl> + assertNull ( " Unxpected response " , icRootRegexpChild . locateFinest ( " com " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegExpChildCheckAccess ( ) { <nl> + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , <nl> + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , <nl> + " org . springframework . something " ) ) ; <nl> + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , <nl> + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , <nl> + " org . luiframework . something " ) ) ; <nl> + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , <nl> + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , <nl> + " de . springframework . something " ) ) ; <nl> + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , <nl> + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , <nl> + " de . luiframework . something " ) ) ; <nl> + assertEquals ( " Unxpected access result " , AccessResult . ALLOWED , <nl> + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , <nl> + " org . apache . commons . something " ) ) ; <nl> + assertEquals ( " Unxpected access result " , AccessResult . ALLOWED , <nl> + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , <nl> + " org . lui . commons . something " ) ) ; <nl> + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , <nl> + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , <nl> + " org . apache . commons " ) ) ; <nl> + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , <nl> + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , <nl> + " org . lui . commons " ) ) ; <nl> + assertEquals ( " Unxpected access result " , AccessResult . ALLOWED , <nl> + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , <nl> + " org . hibernate . something " ) ) ; <nl> + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , <nl> + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , <nl> + " com . badpackage . something " ) ) ; <nl> + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , <nl> + icRootRegexpChild . checkAccess ( " com . kazgroup . courtlink " , <nl> + " org . hibernate . something " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegExpChildUnknownPkg ( ) { <nl> + assertNull ( " Unxpected response " , icRootRegexpChild . locateFinest ( " net . another " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegExpParentInRootIsConsidered ( ) { <nl> + assertNull ( " Package should not be null " , icRootRegexpParent . locateFinest ( " com " ) ) ; <nl> + assertNull ( " Package should not be null " , <nl> + icRootRegexpParent . locateFinest ( " com / hurz / courtlink " ) ) ; <nl> + assertNull ( " Package should not be null " , <nl> + icRootRegexpParent . locateFinest ( " com . hurz . hurz . courtlink " ) ) ; <nl> + assertEquals ( " Invalid package " , icRootRegexpParent , <nl> + icRootRegexpParent . locateFinest ( " com . hurz . courtlink . domain " ) ) ; <nl> + assertEquals ( " Invalid package " , icRootRegexpParent , icRootRegexpParent <nl> + . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegExpParentInSubpackageIsConsidered ( ) { <nl> + assertEquals ( " Invalid package " , icCommonRegexpParen , icRootRegexpParent <nl> + . locateFinest ( " com . kazgroup . courtlink . common . api " ) ) ; <nl> + assertEquals ( " Invalid package " , icCommonRegexpParen , icRootRegexpParent <nl> + . locateFinest ( " com . kazgroup . courtlink . comon . api " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegExpParentEnsureTrailingDot ( ) { <nl> + assertNull ( " Invalid package " , icRootRegexpParent . locateFinest ( " com . kazgroup . courtlinkkk " ) ) ; <nl> + assertNull ( " Invalid package " , <nl> + icRootRegexpParent . locateFinest ( " com . kazgroup . courtlink / common . api " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegExpParentAlternationInParentIsHandledCorrectly ( ) { <nl> + / / the regular expression has to be adjusted to ( com \ . foo | com \ . bar ) <nl> + final ImportControl root = new ImportControl ( " com \ \ . foo | com \ \ . bar " , true ) ; <nl> + final ImportControl common = new ImportControl ( root , " common " , false ) ; <nl> + root . addChild ( common ) ; <nl> + assertEquals ( " Invalid package " , root , root . locateFinest ( " com . foo " ) ) ; <nl> + assertEquals ( " Invalid package " , common , root . locateFinest ( " com . foo . common " ) ) ; <nl> + assertEquals ( " Invalid package " , root , root . locateFinest ( " com . bar " ) ) ; <nl> + assertEquals ( " Invalid package " , common , root . locateFinest ( " com . bar . common " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegExpParentAlternationInParentIfUserCaresForIt ( ) { <nl> + / / the regular expression has to be adjusted to ( com \ . foo | com \ . bar ) <nl> + final ImportControl root = new ImportControl ( " ( com \ \ . foo | com \ \ . bar ) " , true ) ; <nl> + final ImportControl common = new ImportControl ( root , " common " , false ) ; <nl> + root . addChild ( common ) ; <nl> + assertEquals ( " Invalid package " , root , root . locateFinest ( " com . foo " ) ) ; <nl> + assertEquals ( " Invalid package " , common , root . locateFinest ( " com . foo . common " ) ) ; <nl> + assertEquals ( " Invalid package " , root , root . locateFinest ( " com . bar " ) ) ; <nl> + assertEquals ( " Invalid package " , common , root . locateFinest ( " com . bar . common " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegExpParentAlternationInSubpackageIsHandledCorrectly ( ) { <nl> + final ImportControl root = new ImportControl ( " org . somewhere " , false ) ; <nl> + / / the regular expression has to be adjusted to ( foo | bar ) <nl> + final ImportControl subpackages = new ImportControl ( root , " foo | bar " , true ) ; <nl> + root . addChild ( subpackages ) ; <nl> + assertEquals ( " Invalid package " , root , root . locateFinest ( " org . somewhere " ) ) ; <nl> + assertEquals ( " Invalid package " , subpackages , root . locateFinest ( " org . somewhere . foo " ) ) ; <nl> + assertEquals ( " Invalid package " , subpackages , root . locateFinest ( " org . somewhere . bar " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegExpParentUnknownPkg ( ) { <nl> + assertNull ( " Package should not be null " , icRootRegexpParent . locateFinest ( " net . another " ) ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index c16f160 . . 83091dc 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 22 , 7 + 22 , 7 @ @ 
 
 < groupId > com . puppycrawl . tools < / groupId > 
 < artifactId > checkstyle < / artifactId > 
 - < version > 8 . 4 < / version > 
 + < version > 8 . 5 - SNAPSHOT < / version > 
 < packaging > jar < / packaging > 
 
 < name > checkstyle < / name >

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlRegExpInPkgTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlRegExpInPkgTest . java 
 deleted file mode 100644 
 index 197cee5 . . 0000000 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlRegExpInPkgTest . java 
 + + + / dev / null 
 @ @ - 1 , 102 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . checks . imports ; 
 - 
 - import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertNull ; 
 - 
 - import org . junit . Before ; 
 - import org . junit . Test ; 
 - 
 - public class ImportControlRegExpInPkgTest { 
 - private ImportControl icRoot ; 
 - private ImportControl icCommon ; 
 - 
 - @ Before 
 - public void setUp ( ) { 
 - icRoot = new ImportControl ( " com \ \ . [ ^ . ] + \ \ . courtlink " , true ) ; 
 - icCommon = new ImportControl ( icRoot , " com + on " , true ) ; 
 - icRoot . addChild ( icCommon ) ; 
 - } 
 - 
 - @ Test 
 - public void testRegExpInRootIsConsidered ( ) { 
 - assertNull ( " Package should not be null " , icRoot . locateFinest ( " com " ) ) ; 
 - assertNull ( " Package should not be null " , icRoot . locateFinest ( " com / hurz / courtlink " ) ) ; 
 - assertNull ( " Package should not be null " , icRoot . locateFinest ( " com . hurz . hurz . courtlink " ) ) ; 
 - assertEquals ( " Invalid package " , icRoot , icRoot . locateFinest ( " com . hurz . courtlink . domain " ) ) ; 
 - assertEquals ( " Invalid package " , icRoot , icRoot 
 - . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testRegExpInSubpackageIsConsidered ( ) { 
 - assertEquals ( " Invalid package " , icCommon , icRoot 
 - . locateFinest ( " com . kazgroup . courtlink . common . api " ) ) ; 
 - assertEquals ( " Invalid package " , icCommon , icRoot 
 - . locateFinest ( " com . kazgroup . courtlink . comon . api " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testEnsureTrailingDot ( ) { 
 - assertNull ( " Invalid package " , icRoot . locateFinest ( " com . kazgroup . courtlinkkk " ) ) ; 
 - assertNull ( " Invalid package " , icRoot . locateFinest ( " com . kazgroup . courtlink / common . api " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testAlternationInParentIsHandledCorrectly ( ) { 
 - / / the regular expression has to be adjusted to ( com \ . foo | com \ . bar ) 
 - final ImportControl root = new ImportControl ( " com \ \ . foo | com \ \ . bar " , true ) ; 
 - final ImportControl common = new ImportControl ( root , " common " , false ) ; 
 - root . addChild ( common ) ; 
 - assertEquals ( " Invalid package " , root , root . locateFinest ( " com . foo " ) ) ; 
 - assertEquals ( " Invalid package " , common , root . locateFinest ( " com . foo . common " ) ) ; 
 - assertEquals ( " Invalid package " , root , root . locateFinest ( " com . bar " ) ) ; 
 - assertEquals ( " Invalid package " , common , root . locateFinest ( " com . bar . common " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testAlternationInParentIfUserCaresForIt ( ) { 
 - / / the regular expression has to be adjusted to ( com \ . foo | com \ . bar ) 
 - final ImportControl root = new ImportControl ( " ( com \ \ . foo | com \ \ . bar ) " , true ) ; 
 - final ImportControl common = new ImportControl ( root , " common " , false ) ; 
 - root . addChild ( common ) ; 
 - assertEquals ( " Invalid package " , root , root . locateFinest ( " com . foo " ) ) ; 
 - assertEquals ( " Invalid package " , common , root . locateFinest ( " com . foo . common " ) ) ; 
 - assertEquals ( " Invalid package " , root , root . locateFinest ( " com . bar " ) ) ; 
 - assertEquals ( " Invalid package " , common , root . locateFinest ( " com . bar . common " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testAlternationInSubpackageIsHandledCorrectly ( ) { 
 - final ImportControl root = new ImportControl ( " org . somewhere " , false ) ; 
 - / / the regular expression has to be adjusted to ( foo | bar ) 
 - final ImportControl subpackages = new ImportControl ( root , " foo | bar " , true ) ; 
 - root . addChild ( subpackages ) ; 
 - assertEquals ( " Invalid package " , root , root . locateFinest ( " org . somewhere " ) ) ; 
 - assertEquals ( " Invalid package " , subpackages , root . locateFinest ( " org . somewhere . foo " ) ) ; 
 - assertEquals ( " Invalid package " , subpackages , root . locateFinest ( " org . somewhere . bar " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testUnknownPkg ( ) { 
 - assertNull ( " Package should not be null " , icRoot . locateFinest ( " net . another " ) ) ; 
 - } 
 - } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlRegExpTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlRegExpTest . java 
 deleted file mode 100644 
 index 58c0051 . . 0000000 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlRegExpTest . java 
 + + + / dev / null 
 @ @ - 1 , 91 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . checks . imports ; 
 - 
 - import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertNull ; 
 - 
 - import org . junit . Before ; 
 - import org . junit . Test ; 
 - 
 - public class ImportControlRegExpTest { 
 - private final ImportControl icRoot = new ImportControl ( " com . kazgroup . courtlink " , false ) ; 
 - private final ImportControl icCommon = new ImportControl ( icRoot , " common " , false ) ; 
 - 
 - @ Before 
 - public void setUp ( ) { 
 - icRoot . addChild ( icCommon ) ; 
 - icRoot . addImportRule ( 
 - new PkgImportRule ( false , false , " . * \ \ . ( spring | lui ) framework " , false , true ) ) ; 
 - icRoot . addImportRule ( 
 - new PkgImportRule ( false , false , " org \ \ . hibernate " , false , true ) ) ; 
 - icRoot . addImportRule ( 
 - new PkgImportRule ( true , false , " org \ \ . ( apache | lui ) \ \ . commons " , false , true ) ) ; 
 - 
 - icCommon . addImportRule ( 
 - new PkgImportRule ( true , false , " org \ \ . h . * " , false , true ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testLocateFinest ( ) { 
 - assertEquals ( " Unxpected response " , icRoot , icRoot 
 - . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ; 
 - assertEquals ( " Unxpected response " , icCommon , icRoot 
 - . locateFinest ( " com . kazgroup . courtlink . common . api " ) ) ; 
 - assertNull ( " Unxpected response " , icRoot . locateFinest ( " com " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testCheckAccess ( ) { 
 - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( 
 - " com . kazgroup . courtlink . common " , 
 - " org . springframework . something " ) ) ; 
 - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( 
 - " com . kazgroup . courtlink . common " , 
 - " org . luiframework . something " ) ) ; 
 - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( 
 - " com . kazgroup . courtlink . common " , 
 - " de . springframework . something " ) ) ; 
 - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( 
 - " com . kazgroup . courtlink . common " , 
 - " de . luiframework . something " ) ) ; 
 - assertEquals ( " Unxpected access result " , AccessResult . ALLOWED , icCommon 
 - . checkAccess ( " com . kazgroup . courtlink . common " , 
 - " org . apache . commons . something " ) ) ; 
 - assertEquals ( " Unxpected access result " , AccessResult . ALLOWED , icCommon 
 - . checkAccess ( " com . kazgroup . courtlink . common " , 
 - " org . lui . commons . something " ) ) ; 
 - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( 
 - " com . kazgroup . courtlink . common " , " org . apache . commons " ) ) ; 
 - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( 
 - " com . kazgroup . courtlink . common " , " org . lui . commons " ) ) ; 
 - assertEquals ( " Unxpected access result " , AccessResult . ALLOWED , icCommon . checkAccess ( 
 - " com . kazgroup . courtlink . common " , " org . hibernate . something " ) ) ; 
 - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icCommon . checkAccess ( 
 - " com . kazgroup . courtlink . common " , " com . badpackage . something " ) ) ; 
 - assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , icRoot . checkAccess ( 
 - " com . kazgroup . courtlink " , " org . hibernate . something " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testUnknownPkg ( ) { 
 - assertNull ( " Unxpected response " , icRoot . locateFinest ( " net . another " ) ) ; 
 - } 
 - } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlTest . java 
 index db34cd8 . . ded4f34 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlTest . java 
 @ @ - 29 , 6 + 29 , 16 @ @ public class ImportControlTest { 
 private final ImportControl icRoot = new ImportControl ( " com . kazgroup . courtlink " , false ) ; 
 private final ImportControl icCommon = new ImportControl ( icRoot , " common " , false ) ; 
 
 + private final ImportControl icRootRegexpChild = new ImportControl ( " com . kazgroup . courtlink " , 
 + false ) ; 
 + private final ImportControl icCommonRegexpChild = new ImportControl ( icRootRegexpChild , 
 + " common " , false ) ; 
 + 
 + private final ImportControl icRootRegexpParent = new ImportControl ( " com \ \ . [ ^ . ] + \ \ . courtlink " , 
 + true ) ; 
 + private final ImportControl icCommonRegexpParen = new ImportControl ( icRootRegexpParent , 
 + " com + on " , true ) ; 
 + 
 @ Before 
 public void setUp ( ) { 
 icRoot . addChild ( icCommon ) ; 
 @ @ - 39 , 8 + 49 , 21 @ @ public class ImportControlTest { 
 icRoot . addImportRule ( 
 new PkgImportRule ( true , false , " org . apache . commons " , false , false ) ) ; 
 
 + icRootRegexpChild . addChild ( icCommonRegexpChild ) ; 
 + icRootRegexpChild . addImportRule ( 
 + new PkgImportRule ( false , false , " . * \ \ . ( spring | lui ) framework " , false , true ) ) ; 
 + icRootRegexpChild . addImportRule ( 
 + new PkgImportRule ( false , false , " org \ \ . hibernate " , false , true ) ) ; 
 + icRootRegexpChild . addImportRule ( 
 + new PkgImportRule ( true , false , " org \ \ . ( apache | lui ) \ \ . commons " , false , true ) ) ; 
 + 
 icCommon . addImportRule ( 
 new PkgImportRule ( true , false , " org . hibernate " , false , false ) ) ; 
 + 
 + icCommonRegexpChild . addImportRule ( 
 + new PkgImportRule ( true , false , " org \ \ . h . * " , false , true ) ) ; 
 + 
 + icRootRegexpParent . addChild ( icCommonRegexpParen ) ; 
 } 
 
 @ Test 
 @ @ - 81 , 4 + 104 , 123 @ @ public class ImportControlTest { 
 public void testUnknownPkg ( ) { 
 assertNull ( " Unxpected response " , icRoot . locateFinest ( " net . another " ) ) ; 
 } 
 + 
 + @ Test 
 + public void testRegExpChildLocateFinest ( ) { 
 + assertEquals ( " Unxpected response " , icRootRegexpChild , icRootRegexpChild 
 + . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ; 
 + assertEquals ( " Unxpected response " , icCommonRegexpChild , icRootRegexpChild 
 + . locateFinest ( " com . kazgroup . courtlink . common . api " ) ) ; 
 + assertNull ( " Unxpected response " , icRootRegexpChild . locateFinest ( " com " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegExpChildCheckAccess ( ) { 
 + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , 
 + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , 
 + " org . springframework . something " ) ) ; 
 + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , 
 + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , 
 + " org . luiframework . something " ) ) ; 
 + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , 
 + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , 
 + " de . springframework . something " ) ) ; 
 + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , 
 + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , 
 + " de . luiframework . something " ) ) ; 
 + assertEquals ( " Unxpected access result " , AccessResult . ALLOWED , 
 + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , 
 + " org . apache . commons . something " ) ) ; 
 + assertEquals ( " Unxpected access result " , AccessResult . ALLOWED , 
 + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , 
 + " org . lui . commons . something " ) ) ; 
 + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , 
 + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , 
 + " org . apache . commons " ) ) ; 
 + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , 
 + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , 
 + " org . lui . commons " ) ) ; 
 + assertEquals ( " Unxpected access result " , AccessResult . ALLOWED , 
 + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , 
 + " org . hibernate . something " ) ) ; 
 + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , 
 + icCommonRegexpChild . checkAccess ( " com . kazgroup . courtlink . common " , 
 + " com . badpackage . something " ) ) ; 
 + assertEquals ( " Unxpected access result " , AccessResult . DISALLOWED , 
 + icRootRegexpChild . checkAccess ( " com . kazgroup . courtlink " , 
 + " org . hibernate . something " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegExpChildUnknownPkg ( ) { 
 + assertNull ( " Unxpected response " , icRootRegexpChild . locateFinest ( " net . another " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegExpParentInRootIsConsidered ( ) { 
 + assertNull ( " Package should not be null " , icRootRegexpParent . locateFinest ( " com " ) ) ; 
 + assertNull ( " Package should not be null " , 
 + icRootRegexpParent . locateFinest ( " com / hurz / courtlink " ) ) ; 
 + assertNull ( " Package should not be null " , 
 + icRootRegexpParent . locateFinest ( " com . hurz . hurz . courtlink " ) ) ; 
 + assertEquals ( " Invalid package " , icRootRegexpParent , 
 + icRootRegexpParent . locateFinest ( " com . hurz . courtlink . domain " ) ) ; 
 + assertEquals ( " Invalid package " , icRootRegexpParent , icRootRegexpParent 
 + . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegExpParentInSubpackageIsConsidered ( ) { 
 + assertEquals ( " Invalid package " , icCommonRegexpParen , icRootRegexpParent 
 + . locateFinest ( " com . kazgroup . courtlink . common . api " ) ) ; 
 + assertEquals ( " Invalid package " , icCommonRegexpParen , icRootRegexpParent 
 + . locateFinest ( " com . kazgroup . courtlink . comon . api " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegExpParentEnsureTrailingDot ( ) { 
 + assertNull ( " Invalid package " , icRootRegexpParent . locateFinest ( " com . kazgroup . courtlinkkk " ) ) ; 
 + assertNull ( " Invalid package " , 
 + icRootRegexpParent . locateFinest ( " com . kazgroup . courtlink / common . api " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegExpParentAlternationInParentIsHandledCorrectly ( ) { 
 + / / the regular expression has to be adjusted to ( com \ . foo | com \ . bar ) 
 + final ImportControl root = new ImportControl ( " com \ \ . foo | com \ \ . bar " , true ) ; 
 + final ImportControl common = new ImportControl ( root , " common " , false ) ; 
 + root . addChild ( common ) ; 
 + assertEquals ( " Invalid package " , root , root . locateFinest ( " com . foo " ) ) ; 
 + assertEquals ( " Invalid package " , common , root . locateFinest ( " com . foo . common " ) ) ; 
 + assertEquals ( " Invalid package " , root , root . locateFinest ( " com . bar " ) ) ; 
 + assertEquals ( " Invalid package " , common , root . locateFinest ( " com . bar . common " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegExpParentAlternationInParentIfUserCaresForIt ( ) { 
 + / / the regular expression has to be adjusted to ( com \ . foo | com \ . bar ) 
 + final ImportControl root = new ImportControl ( " ( com \ \ . foo | com \ \ . bar ) " , true ) ; 
 + final ImportControl common = new ImportControl ( root , " common " , false ) ; 
 + root . addChild ( common ) ; 
 + assertEquals ( " Invalid package " , root , root . locateFinest ( " com . foo " ) ) ; 
 + assertEquals ( " Invalid package " , common , root . locateFinest ( " com . foo . common " ) ) ; 
 + assertEquals ( " Invalid package " , root , root . locateFinest ( " com . bar " ) ) ; 
 + assertEquals ( " Invalid package " , common , root . locateFinest ( " com . bar . common " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegExpParentAlternationInSubpackageIsHandledCorrectly ( ) { 
 + final ImportControl root = new ImportControl ( " org . somewhere " , false ) ; 
 + / / the regular expression has to be adjusted to ( foo | bar ) 
 + final ImportControl subpackages = new ImportControl ( root , " foo | bar " , true ) ; 
 + root . addChild ( subpackages ) ; 
 + assertEquals ( " Invalid package " , root , root . locateFinest ( " org . somewhere " ) ) ; 
 + assertEquals ( " Invalid package " , subpackages , root . locateFinest ( " org . somewhere . foo " ) ) ; 
 + assertEquals ( " Invalid package " , subpackages , root . locateFinest ( " org . somewhere . bar " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegExpParentUnknownPkg ( ) { 
 + assertNull ( " Package should not be null " , icRootRegexpParent . locateFinest ( " net . another " ) ) ; 
 + } 
 }
