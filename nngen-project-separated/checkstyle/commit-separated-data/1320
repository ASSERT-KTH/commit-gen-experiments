BLEU SCORE: 0.18693159143202892

TEST MSG: Issue # 2609 : Refactor ParseTreeTableModel
GENERATED MSG: Issue # 2609 : Drop abstract class and interface in gui package

TEST DIFF (one line): diff - - git a / config / sevntu _ suppressions . xml b / config / sevntu _ suppressions . xml <nl> index 24d72ae . . 9b27957 100644 <nl> - - - a / config / sevntu _ suppressions . xml <nl> + + + b / config / sevntu _ suppressions . xml <nl> @ @ - 32 , 7 + 32 , 10 @ @ <nl> public Class < ? > getColumnClass ( int columnIndex ) { - - > <nl> < suppress checks = " ForbidWildcardAsReturnType " <nl> files = " ParseTreeTableModel \ . java " <nl> - lines = " 106 " / > <nl> + lines = " 83 " / > <nl> + < suppress checks = " ForbidWildcardAsReturnType " <nl> + files = " ParseTreeTablePModel \ . java " <nl> + lines = " 90 " / > <nl> < ! - - If we change declaration order , Illegal forward reference will appear . <nl> See https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 415 - - > <nl> < suppress checks = " CustomDeclarationOrder " <nl> diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 9b4a41e . . a450bf9 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 90 , 7 + 90 , 7 @ @ <nl> < suppress checks = " WriteTag " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> <nl> < ! - - The Check generates too many violations , fixing them will make code unmanageable . - - > <nl> - < suppress checks = " MagicNumber " files = " ( ParseTreeTableModel | MainFrame ) \ . java " / > <nl> + < suppress checks = " MagicNumber " files = " ( ParseTreeTablePModel | MainFrame ) \ . java " / > <nl> <nl> < ! - - Methods that build fake AST are very long - - > <nl> < suppress checks = " MethodLength " files = " src [ \ \ / ] test [ \ \ / ] java [ \ \ / ] com [ \ \ / ] puppycrawl [ \ \ / ] tools [ \ \ / ] checkstyle [ \ \ / ] grammars [ \ \ / ] comments [ \ \ / ] CommentsTest \ . java " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java <nl> index 141ad4a . . 812243a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java <nl> @ @ - 25 , 12 + 25 , 7 @ @ import javax . swing . event . TreeModelListener ; <nl> import javax . swing . tree . TreeModel ; <nl> import javax . swing . tree . TreePath ; <nl> <nl> - import antlr . ASTFactory ; <nl> - import antlr . collections . AST ; <nl> - <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> <nl> / * * <nl> * The model that backs the parse tree in the GUI . <nl> @ @ - 38 , 16 + 33 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> * @ author Lars K Ã¼ hne <nl> * / <nl> public class ParseTreeTableModel implements TreeModel { <nl> - <nl> - / * * Column names . * / <nl> - private static final String [ ] COLUMN _ NAMES = { <nl> - " Tree " , " Type " , " Line " , " Column " , " Text " , <nl> - } ; <nl> - <nl> - / * * <nl> - * The root node of the tree table model . <nl> - * / <nl> - private final Object root ; <nl> + / * * Presentation model . * / <nl> + private final ParseTreeTablePModel pModel ; <nl> <nl> / * * <nl> * A list of event listeners for the tree model . <nl> @ @ - 58 , 27 + 45 , 17 @ @ public class ParseTreeTableModel implements TreeModel { <nl> * @ param parseTree DetailAST parse tree . <nl> * / <nl> public ParseTreeTableModel ( DetailAST parseTree ) { <nl> - root = createArtificialTreeRoot ( ) ; <nl> + pModel = new ParseTreeTablePModel ( parseTree ) ; <nl> setParseTree ( parseTree ) ; <nl> } <nl> <nl> / * * <nl> - * Creates artificial tree root . <nl> - * @ return Artificial tree root . <nl> - * / <nl> - private static DetailAST createArtificialTreeRoot ( ) { <nl> - final ASTFactory factory = new ASTFactory ( ) ; <nl> - factory . setASTNodeClass ( DetailAST . class . getName ( ) ) ; <nl> - return ( DetailAST ) factory . create ( TokenTypes . EOF , " ROOT " ) ; <nl> - } <nl> - <nl> - / * * <nl> * Sets parse tree . <nl> * @ param parseTree DetailAST parse tree . <nl> * / <nl> final void setParseTree ( DetailAST parseTree ) { <nl> - ( ( AST ) root ) . setFirstChild ( parseTree ) ; <nl> - final Object [ ] path = { root } ; <nl> + pModel . setParseTree ( parseTree ) ; <nl> + final Object [ ] path = { pModel . getRoot ( ) } ; <nl> / / no need to setup remaining info , as the call results in a <nl> / / table structure changed event anyway - we just pass nulls <nl> fireTreeStructureChanged ( this , path , null , ( Object [ ] ) null ) ; <nl> @ @ - 88 , 7 + 65 , 7 @ @ public class ParseTreeTableModel implements TreeModel { <nl> * @ return the number of available column . <nl> * / <nl> public int getColumnCount ( ) { <nl> - return COLUMN _ NAMES . length ; <nl> + return pModel . getColumnCount ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 96 , 7 + 73 , 7 @ @ public class ParseTreeTableModel implements TreeModel { <nl> * @ return the name for column number { @ code column } . <nl> * / <nl> public String getColumnName ( int column ) { <nl> - return COLUMN _ NAMES [ column ] ; <nl> + return pModel . getColumnName ( column ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 104 , 28 + 81 , 7 @ @ public class ParseTreeTableModel implements TreeModel { <nl> * @ return the type for column number { @ code column } . <nl> * / <nl> public Class < ? > getColumnClass ( int column ) { <nl> - final Class < ? > columnClass ; <nl> - <nl> - switch ( column ) { <nl> - case 0 : <nl> - columnClass = ParseTreeTableModel . class ; <nl> - break ; <nl> - case 1 : <nl> - columnClass = String . class ; <nl> - break ; <nl> - case 2 : <nl> - columnClass = Integer . class ; <nl> - break ; <nl> - case 3 : <nl> - columnClass = Integer . class ; <nl> - break ; <nl> - case 4 : <nl> - columnClass = String . class ; <nl> - break ; <nl> - default : <nl> - columnClass = Object . class ; <nl> - } <nl> - return columnClass ; <nl> + return pModel . getColumnClass ( column ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 135 , 70 + 91 , 38 @ @ public class ParseTreeTableModel implements TreeModel { <nl> * at column number { @ code column } . <nl> * / <nl> public Object getValueAt ( Object node , int column ) { <nl> - final DetailAST ast = ( DetailAST ) node ; <nl> - final Object value ; <nl> - <nl> - switch ( column ) { <nl> - case 1 : <nl> - value = TokenUtils . getTokenName ( ast . getType ( ) ) ; <nl> - break ; <nl> - case 2 : <nl> - value = ast . getLineNo ( ) ; <nl> - break ; <nl> - case 3 : <nl> - value = ast . getColumnNo ( ) ; <nl> - break ; <nl> - case 4 : <nl> - value = ast . getText ( ) ; <nl> - break ; <nl> - default : <nl> - value = null ; <nl> - } <nl> - return value ; <nl> + return pModel . getValueAt ( node , column ) ; <nl> } <nl> <nl> @ Override <nl> public Object getChild ( Object parent , int index ) { <nl> - final DetailAST ast = ( DetailAST ) parent ; <nl> - int currentIndex = 0 ; <nl> - AST child = ast . getFirstChild ( ) ; <nl> - while ( currentIndex < index ) { <nl> - child = child . getNextSibling ( ) ; <nl> - currentIndex + + ; <nl> - } <nl> - return child ; <nl> + return pModel . getChild ( parent , index ) ; <nl> } <nl> <nl> @ Override <nl> public int getChildCount ( Object parent ) { <nl> - final DetailAST ast = ( DetailAST ) parent ; <nl> - return ast . getChildCount ( ) ; <nl> + return pModel . getChildCount ( parent ) ; <nl> } <nl> <nl> @ Override <nl> public void valueForPathChanged ( TreePath path , Object newValue ) { <nl> - / / No Code , as tree is read - only <nl> + / / No Code , as tree is read - only <nl> } <nl> <nl> @ Override <nl> public Object getRoot ( ) { <nl> - return root ; <nl> + return pModel . getRoot ( ) ; <nl> } <nl> <nl> @ Override <nl> public boolean isLeaf ( Object node ) { <nl> - return getChildCount ( node ) = = 0 ; <nl> + return pModel . isLeaf ( node ) ; <nl> } <nl> <nl> / / This is not called in the JTree ' s default mode : use a naive implementation . <nl> @ Override <nl> public int getIndexOfChild ( Object parent , Object child ) { <nl> - for ( int i = 0 ; i < getChildCount ( parent ) ; i + + ) { <nl> - if ( getChild ( parent , i ) . equals ( child ) ) { <nl> - return i ; <nl> - } <nl> - } <nl> - return - 1 ; <nl> + return pModel . getIndexOfChild ( parent , child ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 250 , 6 + 174 , 6 @ @ public class ParseTreeTableModel implements TreeModel { <nl> * @ return true if editable <nl> * / <nl> public boolean isCellEditable ( int column ) { <nl> - return getColumnClass ( column ) = = ParseTreeTableModel . class ; <nl> + return pModel . isCellEditable ( column ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java <nl> new file mode 100644 <nl> index 0000000 . . cc181c5 <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java <nl> @ @ - 0 , 0 + 1 , 220 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . gui ; <nl> + <nl> + import antlr . ASTFactory ; <nl> + import antlr . collections . AST ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> + <nl> + / * * <nl> + * The model that backs the parse tree in the GUI . <nl> + * <nl> + * @ author Lars K Ã¼ hne <nl> + * / <nl> + public class ParseTreeTablePModel { <nl> + <nl> + / * * Column names . * / <nl> + private static final String [ ] COLUMN _ NAMES = { <nl> + " Tree " , " Type " , " Line " , " Column " , " Text " , <nl> + } ; <nl> + <nl> + / * * <nl> + * The root node of the tree table model . <nl> + * / <nl> + private final Object root ; <nl> + <nl> + / * * <nl> + * @ param parseTree DetailAST parse tree . <nl> + * / <nl> + public ParseTreeTablePModel ( DetailAST parseTree ) { <nl> + root = createArtificialTreeRoot ( ) ; <nl> + setParseTree ( parseTree ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates artificial tree root . <nl> + * @ return artificial tree root . <nl> + * / <nl> + private static DetailAST createArtificialTreeRoot ( ) { <nl> + final ASTFactory factory = new ASTFactory ( ) ; <nl> + factory . setASTNodeClass ( DetailAST . class . getName ( ) ) ; <nl> + return ( DetailAST ) factory . create ( TokenTypes . EOF , " ROOT " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Set parse tree . <nl> + * @ param parseTree DetailAST parse tree . <nl> + * / <nl> + final void setParseTree ( DetailAST parseTree ) { <nl> + ( ( AST ) root ) . setFirstChild ( parseTree ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return the number of available columns . <nl> + * / <nl> + public int getColumnCount ( ) { <nl> + return COLUMN _ NAMES . length ; <nl> + } <nl> + <nl> + / * * <nl> + * @ param column the column number <nl> + * @ return the name for column number { @ code column } . <nl> + * / <nl> + public String getColumnName ( int column ) { <nl> + return COLUMN _ NAMES [ column ] ; <nl> + } <nl> + <nl> + / * * <nl> + * @ param column the column number <nl> + * @ return the type for column number { @ code column } . <nl> + * / <nl> + public Class < ? > getColumnClass ( int column ) { <nl> + final Class < ? > columnClass ; <nl> + <nl> + switch ( column ) { <nl> + case 0 : <nl> + columnClass = ParseTreeTableModel . class ; <nl> + break ; <nl> + case 1 : <nl> + columnClass = String . class ; <nl> + break ; <nl> + case 2 : <nl> + columnClass = Integer . class ; <nl> + break ; <nl> + case 3 : <nl> + columnClass = Integer . class ; <nl> + break ; <nl> + case 4 : <nl> + columnClass = String . class ; <nl> + break ; <nl> + default : <nl> + columnClass = Object . class ; <nl> + } <nl> + return columnClass ; <nl> + } <nl> + <nl> + / * * <nl> + * @ param node the node <nl> + * @ param column the column number <nl> + * @ return the value to be displayed for node { @ code node } , <nl> + * at column number { @ code column } . <nl> + * / <nl> + public Object getValueAt ( Object node , int column ) { <nl> + final DetailAST ast = ( DetailAST ) node ; <nl> + final Object value ; <nl> + <nl> + switch ( column ) { <nl> + case 1 : <nl> + value = TokenUtils . getTokenName ( ast . getType ( ) ) ; <nl> + break ; <nl> + case 2 : <nl> + value = ast . getLineNo ( ) ; <nl> + break ; <nl> + case 3 : <nl> + value = ast . getColumnNo ( ) ; <nl> + break ; <nl> + case 4 : <nl> + value = ast . getText ( ) ; <nl> + break ; <nl> + default : <nl> + value = null ; <nl> + } <nl> + return value ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the child of parent at index . <nl> + * @ param parent the node to get a child from . <nl> + * @ param index the index of a child . <nl> + * @ return the child of parent at index . <nl> + * / <nl> + public Object getChild ( Object parent , int index ) { <nl> + final DetailAST ast = ( DetailAST ) parent ; <nl> + int currentIndex = 0 ; <nl> + AST child = ast . getFirstChild ( ) ; <nl> + while ( currentIndex < index ) { <nl> + child = child . getNextSibling ( ) ; <nl> + currentIndex + + ; <nl> + } <nl> + return child ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the number of children of parent . <nl> + * @ param parent the node to count children for . <nl> + * @ return the number of children of the node parent . <nl> + * / <nl> + public int getChildCount ( Object parent ) { <nl> + final DetailAST ast = ( DetailAST ) parent ; <nl> + return ast . getChildCount ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return the root . <nl> + * / <nl> + public Object getRoot ( ) { <nl> + return root ; <nl> + } <nl> + <nl> + / * * <nl> + * Whether the node is a leaf . <nl> + * @ param node the node to check . <nl> + * @ return true if the node is a leaf . <nl> + * / <nl> + public boolean isLeaf ( Object node ) { <nl> + return getChildCount ( node ) = = 0 ; <nl> + } <nl> + <nl> + / * * <nl> + * Return the index of child in parent . If either < code > parent < / code > <nl> + * or < code > child < / code > is < code > null < / code > , returns - 1 . <nl> + * If either < code > parent < / code > or < code > child < / code > don ' t <nl> + * belong to this tree model , returns - 1 . <nl> + * <nl> + * @ param parent a node in the tree , obtained from this data source . <nl> + * @ param child the node we are interested in . <nl> + * @ return the index of the child in the parent , or - 1 if either <nl> + * < code > child < / code > or < code > parent < / code > are < code > null < / code > <nl> + * or don ' t belong to this tree model . <nl> + * / <nl> + public int getIndexOfChild ( Object parent , Object child ) { <nl> + int index = - 1 ; <nl> + for ( int i = 0 ; i < getChildCount ( parent ) ; i + + ) { <nl> + if ( getChild ( parent , i ) . equals ( child ) ) { <nl> + index = i ; <nl> + break ; <nl> + } <nl> + } <nl> + return index ; <nl> + } <nl> + <nl> + / * * <nl> + * Indicates whether the the value for node { @ code node } , <nl> + * at column number { @ code column } is editable . <nl> + * <nl> + * @ param column the column number <nl> + * @ return true if editable <nl> + * / <nl> + public boolean isCellEditable ( int column ) { <nl> + return getColumnClass ( column ) . equals ( ParseTreeTablePModel . class ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index 3364ca7 . . 5c6ebdf 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 204 , 7 + 204 , 7 @ @ public class RequireThisCheck extends Check { <nl> break ; <nl> case TokenTypes . METHOD _ CALL : <nl> / / let ' s check method calls <nl> - if ( checkMethods & & isClassMethod ( ast . getText ( ) ) ) { <nl> + if ( checkMethods & & isClassMethod ( ast ) ) { <nl> log ( ast , MSG _ METHOD , ast . getText ( ) ) ; <nl> } <nl> break ; <nl> @ @ - 231 , 13 + 231 , 9 @ @ public class RequireThisCheck extends Check { <nl> if ( ! importOrPackage <nl> & & ! methodNameInMethodCall <nl> & & ! typeName <nl> - & & ! isDeclarationToken ( parentType ) ) { <nl> - <nl> - final String name = ast . getText ( ) ; <nl> - <nl> - if ( isClassField ( name ) ) { <nl> - log ( ast , MSG _ VARIABLE , name ) ; <nl> - } <nl> + & & ! isDeclarationToken ( parentType ) <nl> + & & isClassField ( ast ) ) { <nl> + log ( ast , MSG _ VARIABLE , ast . getText ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 255 , 30 + 251 , 30 @ @ public class RequireThisCheck extends Check { <nl> collectVariableDeclarations ( ast , frame ) ; <nl> break ; <nl> case TokenTypes . PARAMETER _ DEF : <nl> - final DetailAST parameterAST = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> - frame . addName ( parameterAST . getText ( ) ) ; <nl> + final DetailAST parameterIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> + frame . addIdent ( parameterIdent ) ; <nl> break ; <nl> case TokenTypes . CLASS _ DEF : <nl> case TokenTypes . INTERFACE _ DEF : <nl> case TokenTypes . ENUM _ DEF : <nl> case TokenTypes . ANNOTATION _ DEF : <nl> - final DetailAST classAST = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> - frame . addName ( classAST . getText ( ) ) ; <nl> + final DetailAST classIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> + frame . addIdent ( classIdent ) ; <nl> frameStack . addFirst ( new ClassFrame ( frame ) ) ; <nl> break ; <nl> case TokenTypes . SLIST : <nl> frameStack . addFirst ( new BlockFrame ( frame ) ) ; <nl> break ; <nl> case TokenTypes . METHOD _ DEF : <nl> - final String name = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + final DetailAST ident = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> if ( frame instanceof ClassFrame ) { <nl> final DetailAST mods = <nl> ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { <nl> - ( ( ClassFrame ) frame ) . addStaticMethod ( name ) ; <nl> + ( ( ClassFrame ) frame ) . addStaticMethod ( ident ) ; <nl> } <nl> else { <nl> - ( ( ClassFrame ) frame ) . addInstanceMethod ( name ) ; <nl> + ( ( ClassFrame ) frame ) . addInstanceMethod ( ident ) ; <nl> } <nl> } <nl> frameStack . addFirst ( new MethodFrame ( frame ) ) ; <nl> @ @ - 297 , 21 + 293 , 21 @ @ public class RequireThisCheck extends Check { <nl> * @ param frame current frame <nl> * / <nl> private static void collectVariableDeclarations ( DetailAST ast , LexicalFrame frame ) { <nl> - final String name = <nl> - ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + final DetailAST ident = <nl> + ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> if ( frame instanceof ClassFrame ) { <nl> final DetailAST mods = <nl> ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> if ( ScopeUtils . isInInterfaceBlock ( ast ) <nl> | | mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { <nl> - ( ( ClassFrame ) frame ) . addStaticMember ( name ) ; <nl> + ( ( ClassFrame ) frame ) . addStaticMember ( ident ) ; <nl> } <nl> else { <nl> - ( ( ClassFrame ) frame ) . addInstanceMember ( name ) ; <nl> + ( ( ClassFrame ) frame ) . addInstanceMember ( ident ) ; <nl> } <nl> } <nl> else { <nl> - frame . addName ( name ) ; <nl> + frame . addIdent ( ident ) ; <nl> } <nl> } <nl> <nl> @ @ - 340 , 37 + 336 , 38 @ @ public class RequireThisCheck extends Check { <nl> <nl> / * * <nl> * Check if given name is a name for class field in current environment . <nl> - * @ param name a name to check <nl> + * @ param ident an IDENT ast to check <nl> * @ return true is the given name is name of member . <nl> * / <nl> - protected final boolean isClassField ( String name ) { <nl> - final LexicalFrame frame = findFrame ( name ) ; <nl> + protected final boolean isClassField ( DetailAST ident ) { <nl> + final LexicalFrame frame = findFrame ( ident , false ) ; <nl> return frame instanceof ClassFrame <nl> - & & ( ( ClassFrame ) frame ) . hasInstanceMember ( name ) ; <nl> + & & ( ( ClassFrame ) frame ) . hasInstanceMember ( ident ) ; <nl> } <nl> <nl> / * * <nl> * Check if given name is a name for class method in current environment . <nl> - * @ param name a name to check <nl> + * @ param ident the IDENT ast of the name to check <nl> * @ return true is the given name is name of method . <nl> * / <nl> - protected final boolean isClassMethod ( String name ) { <nl> - final LexicalFrame frame = findFrame ( name ) ; <nl> + protected final boolean isClassMethod ( DetailAST ident ) { <nl> + final LexicalFrame frame = findFrame ( ident , true ) ; <nl> return frame instanceof ClassFrame <nl> - & & ( ( ClassFrame ) frame ) . hasInstanceMethod ( name ) ; <nl> + & & ( ( ClassFrame ) frame ) . hasInstanceMethod ( ident ) ; <nl> } <nl> <nl> / * * <nl> * Find frame containing declaration . <nl> - * @ param name name of the declaration to find <nl> - * @ return LexicalFrame containing declaration or null <nl> + * @ param name IDENT ast of the declaration to find . <nl> + * @ param lookForMethod whether we are looking for a method name . <nl> + * @ return LexicalFrame containing declaration or null . <nl> * / <nl> - private LexicalFrame findFrame ( String name ) { <nl> + private LexicalFrame findFrame ( DetailAST name , boolean lookForMethod ) { <nl> if ( current = = null ) { <nl> return null ; <nl> } <nl> else { <nl> - return current . getIfContains ( name ) ; <nl> + return current . getIfContains ( name , lookForMethod ) ; <nl> } <nl> } <nl> <nl> @ @ - 389 , 7 + 386 , 8 @ @ public class RequireThisCheck extends Check { <nl> * / <nl> private static class LexicalFrame { <nl> / * * Set of name of variables declared in this frame . * / <nl> - private final Set < String > varNames ; <nl> + private final Set < DetailAST > varIdents ; <nl> + <nl> / * * <nl> * Parent frame . <nl> * / <nl> @ @ - 402 , 39 + 400 , 93 @ @ public class RequireThisCheck extends Check { <nl> * / <nl> protected LexicalFrame ( LexicalFrame parent ) { <nl> this . parent = parent ; <nl> - varNames = Sets . newHashSet ( ) ; <nl> + varIdents = Sets . newHashSet ( ) ; <nl> } <nl> <nl> - / * * Add a name to the frame . <nl> - * @ param nameToAdd the name we ' re adding <nl> + / * * <nl> + * Add a name to the frame . <nl> + * @ param identToAdd the name we ' re adding <nl> * / <nl> - private void addName ( String nameToAdd ) { <nl> - varNames . add ( nameToAdd ) ; <nl> + private void addIdent ( DetailAST identToAdd ) { <nl> + varIdents . add ( identToAdd ) ; <nl> + } <nl> + <nl> + protected LexicalFrame getParent ( ) { <nl> + return parent ; <nl> } <nl> <nl> / * * Check whether the frame contains a given name . <nl> - * @ param nameToFind the name we ' re looking for <nl> + * @ param nameToFind the IDENT ast of the name we ' re looking for <nl> * @ return whether it was found <nl> * / <nl> - boolean contains ( String nameToFind ) { <nl> - return varNames . contains ( nameToFind ) ; <nl> + boolean contains ( DetailAST nameToFind ) { <nl> + return containsName ( varIdents , nameToFind ) ; <nl> } <nl> <nl> / * * Check whether the frame contains a given name . <nl> - * @ param nameToFind the name we ' re looking for <nl> - * @ return whether it was found <nl> + * @ param nameToFind IDENT ast of the name we ' re looking for . <nl> + * @ param lookForMethod whether we are looking for a method name . <nl> + * @ return whether it was found . <nl> * / <nl> - private LexicalFrame getIfContains ( String nameToFind ) { <nl> + protected LexicalFrame getIfContains ( DetailAST nameToFind , boolean lookForMethod ) { <nl> LexicalFrame frame = null ; <nl> <nl> - if ( contains ( nameToFind ) ) { <nl> + if ( ! lookForMethod <nl> + & & contains ( nameToFind ) ) { <nl> frame = this ; <nl> } <nl> else if ( parent ! = null ) { <nl> - frame = parent . getIfContains ( nameToFind ) ; <nl> + frame = parent . getIfContains ( nameToFind , lookForMethod ) ; <nl> } <nl> return frame ; <nl> } <nl> + <nl> + / * * <nl> + * Whether the set contains a declaration with the text of the specified <nl> + * IDENT ast and it is declared in a proper position . <nl> + * @ param set the set of declarations . <nl> + * @ param ident the specified IDENT ast <nl> + * @ return true if the set contains a declaration with the text of the specified <nl> + * IDENT ast and it is declared in a proper position . <nl> + * / <nl> + protected boolean containsName ( Set < DetailAST > set , DetailAST ident ) { <nl> + boolean result = false ; <nl> + for ( DetailAST ast : set ) { <nl> + if ( isProperDefinition ( ident , ast ) ) { <nl> + result = true ; <nl> + break ; <nl> + } <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> + * Whether the definition is correspondent to the IDENT . <nl> + * @ param ident the IDENT ast to check . <nl> + * @ param ast the IDENT ast of the definition to check . <nl> + * @ return true if ast is correspondent to ident . <nl> + * / <nl> + protected boolean isProperDefinition ( DetailAST ident , DetailAST ast ) { <nl> + final String nameToFind = ident . getText ( ) ; <nl> + return nameToFind . equals ( ast . getText ( ) ) <nl> + & & checkPosition ( ast , ident ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Whether the declaration is located before the checked ast . <nl> + * @ param ast1 the IDENT ast of the declaration . <nl> + * @ param ast2 the IDENT ast to check . <nl> + * @ return true , if the declaration is located before the checked ast . <nl> + * / <nl> + private static boolean checkPosition ( DetailAST ast1 , DetailAST ast2 ) { <nl> + boolean result = false ; <nl> + if ( ast1 . getLineNo ( ) < ast2 . getLineNo ( ) <nl> + | | ast1 . getLineNo ( ) = = ast2 . getLineNo ( ) <nl> + & & ast1 . getColumnNo ( ) < ast2 . getColumnNo ( ) ) { <nl> + result = true ; <nl> + } <nl> + return result ; <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 472 , 14 + 524 , 14 @ @ public class RequireThisCheck extends Check { <nl> * @ author Stephen Bloch <nl> * / <nl> private static class ClassFrame extends LexicalFrame { <nl> - / * * Set of name of instance members declared in this frame . * / <nl> - private final Set < String > instanceMembers ; <nl> - / * * Set of name of instance methods declared in this frame . * / <nl> - private final Set < String > instanceMethods ; <nl> - / * * Set of name of variables declared in this frame . * / <nl> - private final Set < String > staticMembers ; <nl> - / * * Set of name of static methods declared in this frame . * / <nl> - private final Set < String > staticMethods ; <nl> + / * * Set of idents of instance members declared in this frame . * / <nl> + private final Set < DetailAST > instanceMembers ; <nl> + / * * Set of idents of instance methods declared in this frame . * / <nl> + private final Set < DetailAST > instanceMethods ; <nl> + / * * Set of idents of variables declared in this frame . * / <nl> + private final Set < DetailAST > staticMembers ; <nl> + / * * Set of idents of static methods declared in this frame . * / <nl> + private final Set < DetailAST > staticMethods ; <nl> <nl> / * * <nl> * Creates new instance of ClassFrame . <nl> @ @ - 494 , 64 + 546 , 83 @ @ public class RequireThisCheck extends Check { <nl> } <nl> <nl> / * * <nl> - * Adds static member ' s name . <nl> - * @ param name a name of static member of the class <nl> + * Adds static member ' s ident . <nl> + * @ param ident an ident of static member of the class <nl> * / <nl> - public void addStaticMember ( final String name ) { <nl> - staticMembers . add ( name ) ; <nl> + public void addStaticMember ( final DetailAST ident ) { <nl> + staticMembers . add ( ident ) ; <nl> } <nl> <nl> / * * <nl> * Adds static method ' s name . <nl> - * @ param name a name of static method of the class <nl> + * @ param ident an ident of static method of the class <nl> * / <nl> - public void addStaticMethod ( final String name ) { <nl> - staticMethods . add ( name ) ; <nl> + public void addStaticMethod ( final DetailAST ident ) { <nl> + staticMethods . add ( ident ) ; <nl> } <nl> <nl> / * * <nl> - * Adds instance member ' s name . <nl> - * @ param name a name of instance member of the class <nl> + * Adds instance member ' s ident . <nl> + * @ param ident an ident of instance member of the class <nl> * / <nl> - public void addInstanceMember ( final String name ) { <nl> - instanceMembers . add ( name ) ; <nl> + public void addInstanceMember ( final DetailAST ident ) { <nl> + instanceMembers . add ( ident ) ; <nl> } <nl> <nl> / * * <nl> * Adds instance method ' s name . <nl> - * @ param name a name of instance method of the class <nl> + * @ param ident an ident of instance method of the class <nl> * / <nl> - public void addInstanceMethod ( final String name ) { <nl> - instanceMethods . add ( name ) ; <nl> + public void addInstanceMethod ( final DetailAST ident ) { <nl> + instanceMethods . add ( ident ) ; <nl> } <nl> <nl> / * * <nl> * Checks if a given name is a known instance member of the class . <nl> - * @ param name a name to check <nl> + * @ param ident the IDENT ast of the name to check <nl> * @ return true is the given name is a name of a known <nl> * instance member of the class <nl> * / <nl> - public boolean hasInstanceMember ( final String name ) { <nl> - return instanceMembers . contains ( name ) ; <nl> + public boolean hasInstanceMember ( final DetailAST ident ) { <nl> + return containsName ( instanceMembers , ident ) ; <nl> } <nl> <nl> / * * <nl> * Checks if a given name is a known instance method of the class . <nl> - * @ param name a name to check <nl> + * @ param ident the IDENT ast of the name to check <nl> * @ return true is the given name is a name of a known <nl> * instance method of the class <nl> * / <nl> - public boolean hasInstanceMethod ( final String name ) { <nl> - return instanceMethods . contains ( name ) ; <nl> + public boolean hasInstanceMethod ( final DetailAST ident ) { <nl> + return containsName ( instanceMethods , ident ) ; <nl> } <nl> <nl> @ Override <nl> - boolean contains ( String nameToFind ) { <nl> + boolean contains ( DetailAST nameToFind ) { <nl> return super . contains ( nameToFind ) <nl> - | | instanceMembers . contains ( nameToFind ) <nl> - | | instanceMethods . contains ( nameToFind ) <nl> - | | staticMembers . contains ( nameToFind ) <nl> - | | staticMethods . contains ( nameToFind ) ; <nl> + | | containsName ( instanceMembers , nameToFind ) <nl> + | | containsName ( instanceMethods , nameToFind ) <nl> + | | containsName ( staticMembers , nameToFind ) <nl> + | | containsName ( staticMethods , nameToFind ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected boolean isProperDefinition ( DetailAST ident , DetailAST ast ) { <nl> + final String nameToFind = ident . getText ( ) ; <nl> + return nameToFind . equals ( ast . getText ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected LexicalFrame getIfContains ( DetailAST nameToFind , boolean lookForMethod ) { <nl> + LexicalFrame frame ; <nl> + <nl> + if ( contains ( nameToFind ) ) { <nl> + frame = this ; <nl> + } <nl> + else { <nl> + frame = getParent ( ) . getIfContains ( nameToFind , lookForMethod ) ; <nl> + } <nl> + return frame ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index 9a18157 . . d8f9780 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 53 , 6 + 53 , 10 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> " 31 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " \ " this \ " " ) , <nl> " 49 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " z " , " \ " this \ " " ) , <nl> " 56 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " z " , " \ " this \ " " ) , <nl> + " 113 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " \ " this \ " " ) , <nl> + " 114 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " \ " this \ " " ) , <nl> + " 115 : 9 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " \ " this \ " " ) , <nl> + " 121 : 13 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " \ " this \ " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputRequireThis . java " ) , <nl> @ @ - 66 , 6 + 70 , 8 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " checkFields " , " false " ) ; <nl> final String [ ] expected = { <nl> " 17 : 9 : " + getCheckMessage ( MSG _ METHOD , " method1 " , " \ " this \ " " ) , <nl> + " 115 : 9 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " \ " this \ " " ) , <nl> + " 121 : 13 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " \ " this \ " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputRequireThis . java " ) , <nl> @ @ - 82 , 6 + 88 , 8 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> " 31 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " \ " this \ " " ) , <nl> " 49 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " z " , " \ " this \ " " ) , <nl> " 56 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " z " , " \ " this \ " " ) , <nl> + " 113 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " \ " this \ " " ) , <nl> + " 114 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " \ " this \ " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputRequireThis . java " ) , <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java <nl> index cef9f58 . . 5cbf936 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java <nl> @ @ - 106 , 3 + 106 , 19 @ @ class Issue257 { <nl> } <nl> } <nl> } <nl> + <nl> + class Issue2240 { <nl> + int i ; <nl> + void foo ( ) { <nl> + i + + ; <nl> + i + + ; int i = 1 ; i + + ; <nl> + instanceMethod ( ) ; <nl> + } <nl> + void instanceMethod ( ) { } ; <nl> + <nl> + class Nested { <nl> + void bar ( ) { <nl> + instanceMethod ( ) ; <nl> + } <nl> + } <nl> + }

TEST DIFF:
diff - - git a / config / sevntu _ suppressions . xml b / config / sevntu _ suppressions . xml 
 index 24d72ae . . 9b27957 100644 
 - - - a / config / sevntu _ suppressions . xml 
 + + + b / config / sevntu _ suppressions . xml 
 @ @ - 32 , 7 + 32 , 10 @ @ 
 public Class < ? > getColumnClass ( int columnIndex ) { - - > 
 < suppress checks = " ForbidWildcardAsReturnType " 
 files = " ParseTreeTableModel \ . java " 
 - lines = " 106 " / > 
 + lines = " 83 " / > 
 + < suppress checks = " ForbidWildcardAsReturnType " 
 + files = " ParseTreeTablePModel \ . java " 
 + lines = " 90 " / > 
 < ! - - If we change declaration order , Illegal forward reference will appear . 
 See https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 415 - - > 
 < suppress checks = " CustomDeclarationOrder " 
 diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 9b4a41e . . a450bf9 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 90 , 7 + 90 , 7 @ @ 
 < suppress checks = " WriteTag " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 
 < ! - - The Check generates too many violations , fixing them will make code unmanageable . - - > 
 - < suppress checks = " MagicNumber " files = " ( ParseTreeTableModel | MainFrame ) \ . java " / > 
 + < suppress checks = " MagicNumber " files = " ( ParseTreeTablePModel | MainFrame ) \ . java " / > 
 
 < ! - - Methods that build fake AST are very long - - > 
 < suppress checks = " MethodLength " files = " src [ \ \ / ] test [ \ \ / ] java [ \ \ / ] com [ \ \ / ] puppycrawl [ \ \ / ] tools [ \ \ / ] checkstyle [ \ \ / ] grammars [ \ \ / ] comments [ \ \ / ] CommentsTest \ . java " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java 
 index 141ad4a . . 812243a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java 
 @ @ - 25 , 12 + 25 , 7 @ @ import javax . swing . event . TreeModelListener ; 
 import javax . swing . tree . TreeModel ; 
 import javax . swing . tree . TreePath ; 
 
 - import antlr . ASTFactory ; 
 - import antlr . collections . AST ; 
 - 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 
 / * * 
 * The model that backs the parse tree in the GUI . 
 @ @ - 38 , 16 + 33 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 * @ author Lars K Ã¼ hne 
 * / 
 public class ParseTreeTableModel implements TreeModel { 
 - 
 - / * * Column names . * / 
 - private static final String [ ] COLUMN _ NAMES = { 
 - " Tree " , " Type " , " Line " , " Column " , " Text " , 
 - } ; 
 - 
 - / * * 
 - * The root node of the tree table model . 
 - * / 
 - private final Object root ; 
 + / * * Presentation model . * / 
 + private final ParseTreeTablePModel pModel ; 
 
 / * * 
 * A list of event listeners for the tree model . 
 @ @ - 58 , 27 + 45 , 17 @ @ public class ParseTreeTableModel implements TreeModel { 
 * @ param parseTree DetailAST parse tree . 
 * / 
 public ParseTreeTableModel ( DetailAST parseTree ) { 
 - root = createArtificialTreeRoot ( ) ; 
 + pModel = new ParseTreeTablePModel ( parseTree ) ; 
 setParseTree ( parseTree ) ; 
 } 
 
 / * * 
 - * Creates artificial tree root . 
 - * @ return Artificial tree root . 
 - * / 
 - private static DetailAST createArtificialTreeRoot ( ) { 
 - final ASTFactory factory = new ASTFactory ( ) ; 
 - factory . setASTNodeClass ( DetailAST . class . getName ( ) ) ; 
 - return ( DetailAST ) factory . create ( TokenTypes . EOF , " ROOT " ) ; 
 - } 
 - 
 - / * * 
 * Sets parse tree . 
 * @ param parseTree DetailAST parse tree . 
 * / 
 final void setParseTree ( DetailAST parseTree ) { 
 - ( ( AST ) root ) . setFirstChild ( parseTree ) ; 
 - final Object [ ] path = { root } ; 
 + pModel . setParseTree ( parseTree ) ; 
 + final Object [ ] path = { pModel . getRoot ( ) } ; 
 / / no need to setup remaining info , as the call results in a 
 / / table structure changed event anyway - we just pass nulls 
 fireTreeStructureChanged ( this , path , null , ( Object [ ] ) null ) ; 
 @ @ - 88 , 7 + 65 , 7 @ @ public class ParseTreeTableModel implements TreeModel { 
 * @ return the number of available column . 
 * / 
 public int getColumnCount ( ) { 
 - return COLUMN _ NAMES . length ; 
 + return pModel . getColumnCount ( ) ; 
 } 
 
 / * * 
 @ @ - 96 , 7 + 73 , 7 @ @ public class ParseTreeTableModel implements TreeModel { 
 * @ return the name for column number { @ code column } . 
 * / 
 public String getColumnName ( int column ) { 
 - return COLUMN _ NAMES [ column ] ; 
 + return pModel . getColumnName ( column ) ; 
 } 
 
 / * * 
 @ @ - 104 , 28 + 81 , 7 @ @ public class ParseTreeTableModel implements TreeModel { 
 * @ return the type for column number { @ code column } . 
 * / 
 public Class < ? > getColumnClass ( int column ) { 
 - final Class < ? > columnClass ; 
 - 
 - switch ( column ) { 
 - case 0 : 
 - columnClass = ParseTreeTableModel . class ; 
 - break ; 
 - case 1 : 
 - columnClass = String . class ; 
 - break ; 
 - case 2 : 
 - columnClass = Integer . class ; 
 - break ; 
 - case 3 : 
 - columnClass = Integer . class ; 
 - break ; 
 - case 4 : 
 - columnClass = String . class ; 
 - break ; 
 - default : 
 - columnClass = Object . class ; 
 - } 
 - return columnClass ; 
 + return pModel . getColumnClass ( column ) ; 
 } 
 
 / * * 
 @ @ - 135 , 70 + 91 , 38 @ @ public class ParseTreeTableModel implements TreeModel { 
 * at column number { @ code column } . 
 * / 
 public Object getValueAt ( Object node , int column ) { 
 - final DetailAST ast = ( DetailAST ) node ; 
 - final Object value ; 
 - 
 - switch ( column ) { 
 - case 1 : 
 - value = TokenUtils . getTokenName ( ast . getType ( ) ) ; 
 - break ; 
 - case 2 : 
 - value = ast . getLineNo ( ) ; 
 - break ; 
 - case 3 : 
 - value = ast . getColumnNo ( ) ; 
 - break ; 
 - case 4 : 
 - value = ast . getText ( ) ; 
 - break ; 
 - default : 
 - value = null ; 
 - } 
 - return value ; 
 + return pModel . getValueAt ( node , column ) ; 
 } 
 
 @ Override 
 public Object getChild ( Object parent , int index ) { 
 - final DetailAST ast = ( DetailAST ) parent ; 
 - int currentIndex = 0 ; 
 - AST child = ast . getFirstChild ( ) ; 
 - while ( currentIndex < index ) { 
 - child = child . getNextSibling ( ) ; 
 - currentIndex + + ; 
 - } 
 - return child ; 
 + return pModel . getChild ( parent , index ) ; 
 } 
 
 @ Override 
 public int getChildCount ( Object parent ) { 
 - final DetailAST ast = ( DetailAST ) parent ; 
 - return ast . getChildCount ( ) ; 
 + return pModel . getChildCount ( parent ) ; 
 } 
 
 @ Override 
 public void valueForPathChanged ( TreePath path , Object newValue ) { 
 - / / No Code , as tree is read - only 
 + / / No Code , as tree is read - only 
 } 
 
 @ Override 
 public Object getRoot ( ) { 
 - return root ; 
 + return pModel . getRoot ( ) ; 
 } 
 
 @ Override 
 public boolean isLeaf ( Object node ) { 
 - return getChildCount ( node ) = = 0 ; 
 + return pModel . isLeaf ( node ) ; 
 } 
 
 / / This is not called in the JTree ' s default mode : use a naive implementation . 
 @ Override 
 public int getIndexOfChild ( Object parent , Object child ) { 
 - for ( int i = 0 ; i < getChildCount ( parent ) ; i + + ) { 
 - if ( getChild ( parent , i ) . equals ( child ) ) { 
 - return i ; 
 - } 
 - } 
 - return - 1 ; 
 + return pModel . getIndexOfChild ( parent , child ) ; 
 } 
 
 @ Override 
 @ @ - 250 , 6 + 174 , 6 @ @ public class ParseTreeTableModel implements TreeModel { 
 * @ return true if editable 
 * / 
 public boolean isCellEditable ( int column ) { 
 - return getColumnClass ( column ) = = ParseTreeTableModel . class ; 
 + return pModel . isCellEditable ( column ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java 
 new file mode 100644 
 index 0000000 . . cc181c5 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java 
 @ @ - 0 , 0 + 1 , 220 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . gui ; 
 + 
 + import antlr . ASTFactory ; 
 + import antlr . collections . AST ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 + 
 + / * * 
 + * The model that backs the parse tree in the GUI . 
 + * 
 + * @ author Lars K Ã¼ hne 
 + * / 
 + public class ParseTreeTablePModel { 
 + 
 + / * * Column names . * / 
 + private static final String [ ] COLUMN _ NAMES = { 
 + " Tree " , " Type " , " Line " , " Column " , " Text " , 
 + } ; 
 + 
 + / * * 
 + * The root node of the tree table model . 
 + * / 
 + private final Object root ; 
 + 
 + / * * 
 + * @ param parseTree DetailAST parse tree . 
 + * / 
 + public ParseTreeTablePModel ( DetailAST parseTree ) { 
 + root = createArtificialTreeRoot ( ) ; 
 + setParseTree ( parseTree ) ; 
 + } 
 + 
 + / * * 
 + * Creates artificial tree root . 
 + * @ return artificial tree root . 
 + * / 
 + private static DetailAST createArtificialTreeRoot ( ) { 
 + final ASTFactory factory = new ASTFactory ( ) ; 
 + factory . setASTNodeClass ( DetailAST . class . getName ( ) ) ; 
 + return ( DetailAST ) factory . create ( TokenTypes . EOF , " ROOT " ) ; 
 + } 
 + 
 + / * * 
 + * Set parse tree . 
 + * @ param parseTree DetailAST parse tree . 
 + * / 
 + final void setParseTree ( DetailAST parseTree ) { 
 + ( ( AST ) root ) . setFirstChild ( parseTree ) ; 
 + } 
 + 
 + / * * 
 + * @ return the number of available columns . 
 + * / 
 + public int getColumnCount ( ) { 
 + return COLUMN _ NAMES . length ; 
 + } 
 + 
 + / * * 
 + * @ param column the column number 
 + * @ return the name for column number { @ code column } . 
 + * / 
 + public String getColumnName ( int column ) { 
 + return COLUMN _ NAMES [ column ] ; 
 + } 
 + 
 + / * * 
 + * @ param column the column number 
 + * @ return the type for column number { @ code column } . 
 + * / 
 + public Class < ? > getColumnClass ( int column ) { 
 + final Class < ? > columnClass ; 
 + 
 + switch ( column ) { 
 + case 0 : 
 + columnClass = ParseTreeTableModel . class ; 
 + break ; 
 + case 1 : 
 + columnClass = String . class ; 
 + break ; 
 + case 2 : 
 + columnClass = Integer . class ; 
 + break ; 
 + case 3 : 
 + columnClass = Integer . class ; 
 + break ; 
 + case 4 : 
 + columnClass = String . class ; 
 + break ; 
 + default : 
 + columnClass = Object . class ; 
 + } 
 + return columnClass ; 
 + } 
 + 
 + / * * 
 + * @ param node the node 
 + * @ param column the column number 
 + * @ return the value to be displayed for node { @ code node } , 
 + * at column number { @ code column } . 
 + * / 
 + public Object getValueAt ( Object node , int column ) { 
 + final DetailAST ast = ( DetailAST ) node ; 
 + final Object value ; 
 + 
 + switch ( column ) { 
 + case 1 : 
 + value = TokenUtils . getTokenName ( ast . getType ( ) ) ; 
 + break ; 
 + case 2 : 
 + value = ast . getLineNo ( ) ; 
 + break ; 
 + case 3 : 
 + value = ast . getColumnNo ( ) ; 
 + break ; 
 + case 4 : 
 + value = ast . getText ( ) ; 
 + break ; 
 + default : 
 + value = null ; 
 + } 
 + return value ; 
 + } 
 + 
 + / * * 
 + * Returns the child of parent at index . 
 + * @ param parent the node to get a child from . 
 + * @ param index the index of a child . 
 + * @ return the child of parent at index . 
 + * / 
 + public Object getChild ( Object parent , int index ) { 
 + final DetailAST ast = ( DetailAST ) parent ; 
 + int currentIndex = 0 ; 
 + AST child = ast . getFirstChild ( ) ; 
 + while ( currentIndex < index ) { 
 + child = child . getNextSibling ( ) ; 
 + currentIndex + + ; 
 + } 
 + return child ; 
 + } 
 + 
 + / * * 
 + * Returns the number of children of parent . 
 + * @ param parent the node to count children for . 
 + * @ return the number of children of the node parent . 
 + * / 
 + public int getChildCount ( Object parent ) { 
 + final DetailAST ast = ( DetailAST ) parent ; 
 + return ast . getChildCount ( ) ; 
 + } 
 + 
 + / * * 
 + * @ return the root . 
 + * / 
 + public Object getRoot ( ) { 
 + return root ; 
 + } 
 + 
 + / * * 
 + * Whether the node is a leaf . 
 + * @ param node the node to check . 
 + * @ return true if the node is a leaf . 
 + * / 
 + public boolean isLeaf ( Object node ) { 
 + return getChildCount ( node ) = = 0 ; 
 + } 
 + 
 + / * * 
 + * Return the index of child in parent . If either < code > parent < / code > 
 + * or < code > child < / code > is < code > null < / code > , returns - 1 . 
 + * If either < code > parent < / code > or < code > child < / code > don ' t 
 + * belong to this tree model , returns - 1 . 
 + * 
 + * @ param parent a node in the tree , obtained from this data source . 
 + * @ param child the node we are interested in . 
 + * @ return the index of the child in the parent , or - 1 if either 
 + * < code > child < / code > or < code > parent < / code > are < code > null < / code > 
 + * or don ' t belong to this tree model . 
 + * / 
 + public int getIndexOfChild ( Object parent , Object child ) { 
 + int index = - 1 ; 
 + for ( int i = 0 ; i < getChildCount ( parent ) ; i + + ) { 
 + if ( getChild ( parent , i ) . equals ( child ) ) { 
 + index = i ; 
 + break ; 
 + } 
 + } 
 + return index ; 
 + } 
 + 
 + / * * 
 + * Indicates whether the the value for node { @ code node } , 
 + * at column number { @ code column } is editable . 
 + * 
 + * @ param column the column number 
 + * @ return true if editable 
 + * / 
 + public boolean isCellEditable ( int column ) { 
 + return getColumnClass ( column ) . equals ( ParseTreeTablePModel . class ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index 3364ca7 . . 5c6ebdf 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 204 , 7 + 204 , 7 @ @ public class RequireThisCheck extends Check { 
 break ; 
 case TokenTypes . METHOD _ CALL : 
 / / let ' s check method calls 
 - if ( checkMethods & & isClassMethod ( ast . getText ( ) ) ) { 
 + if ( checkMethods & & isClassMethod ( ast ) ) { 
 log ( ast , MSG _ METHOD , ast . getText ( ) ) ; 
 } 
 break ; 
 @ @ - 231 , 13 + 231 , 9 @ @ public class RequireThisCheck extends Check { 
 if ( ! importOrPackage 
 & & ! methodNameInMethodCall 
 & & ! typeName 
 - & & ! isDeclarationToken ( parentType ) ) { 
 - 
 - final String name = ast . getText ( ) ; 
 - 
 - if ( isClassField ( name ) ) { 
 - log ( ast , MSG _ VARIABLE , name ) ; 
 - } 
 + & & ! isDeclarationToken ( parentType ) 
 + & & isClassField ( ast ) ) { 
 + log ( ast , MSG _ VARIABLE , ast . getText ( ) ) ; 
 } 
 } 
 
 @ @ - 255 , 30 + 251 , 30 @ @ public class RequireThisCheck extends Check { 
 collectVariableDeclarations ( ast , frame ) ; 
 break ; 
 case TokenTypes . PARAMETER _ DEF : 
 - final DetailAST parameterAST = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 - frame . addName ( parameterAST . getText ( ) ) ; 
 + final DetailAST parameterIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 + frame . addIdent ( parameterIdent ) ; 
 break ; 
 case TokenTypes . CLASS _ DEF : 
 case TokenTypes . INTERFACE _ DEF : 
 case TokenTypes . ENUM _ DEF : 
 case TokenTypes . ANNOTATION _ DEF : 
 - final DetailAST classAST = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 - frame . addName ( classAST . getText ( ) ) ; 
 + final DetailAST classIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 + frame . addIdent ( classIdent ) ; 
 frameStack . addFirst ( new ClassFrame ( frame ) ) ; 
 break ; 
 case TokenTypes . SLIST : 
 frameStack . addFirst ( new BlockFrame ( frame ) ) ; 
 break ; 
 case TokenTypes . METHOD _ DEF : 
 - final String name = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + final DetailAST ident = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 if ( frame instanceof ClassFrame ) { 
 final DetailAST mods = 
 ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { 
 - ( ( ClassFrame ) frame ) . addStaticMethod ( name ) ; 
 + ( ( ClassFrame ) frame ) . addStaticMethod ( ident ) ; 
 } 
 else { 
 - ( ( ClassFrame ) frame ) . addInstanceMethod ( name ) ; 
 + ( ( ClassFrame ) frame ) . addInstanceMethod ( ident ) ; 
 } 
 } 
 frameStack . addFirst ( new MethodFrame ( frame ) ) ; 
 @ @ - 297 , 21 + 293 , 21 @ @ public class RequireThisCheck extends Check { 
 * @ param frame current frame 
 * / 
 private static void collectVariableDeclarations ( DetailAST ast , LexicalFrame frame ) { 
 - final String name = 
 - ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + final DetailAST ident = 
 + ast . findFirstToken ( TokenTypes . IDENT ) ; 
 if ( frame instanceof ClassFrame ) { 
 final DetailAST mods = 
 ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 if ( ScopeUtils . isInInterfaceBlock ( ast ) 
 | | mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { 
 - ( ( ClassFrame ) frame ) . addStaticMember ( name ) ; 
 + ( ( ClassFrame ) frame ) . addStaticMember ( ident ) ; 
 } 
 else { 
 - ( ( ClassFrame ) frame ) . addInstanceMember ( name ) ; 
 + ( ( ClassFrame ) frame ) . addInstanceMember ( ident ) ; 
 } 
 } 
 else { 
 - frame . addName ( name ) ; 
 + frame . addIdent ( ident ) ; 
 } 
 } 
 
 @ @ - 340 , 37 + 336 , 38 @ @ public class RequireThisCheck extends Check { 
 
 / * * 
 * Check if given name is a name for class field in current environment . 
 - * @ param name a name to check 
 + * @ param ident an IDENT ast to check 
 * @ return true is the given name is name of member . 
 * / 
 - protected final boolean isClassField ( String name ) { 
 - final LexicalFrame frame = findFrame ( name ) ; 
 + protected final boolean isClassField ( DetailAST ident ) { 
 + final LexicalFrame frame = findFrame ( ident , false ) ; 
 return frame instanceof ClassFrame 
 - & & ( ( ClassFrame ) frame ) . hasInstanceMember ( name ) ; 
 + & & ( ( ClassFrame ) frame ) . hasInstanceMember ( ident ) ; 
 } 
 
 / * * 
 * Check if given name is a name for class method in current environment . 
 - * @ param name a name to check 
 + * @ param ident the IDENT ast of the name to check 
 * @ return true is the given name is name of method . 
 * / 
 - protected final boolean isClassMethod ( String name ) { 
 - final LexicalFrame frame = findFrame ( name ) ; 
 + protected final boolean isClassMethod ( DetailAST ident ) { 
 + final LexicalFrame frame = findFrame ( ident , true ) ; 
 return frame instanceof ClassFrame 
 - & & ( ( ClassFrame ) frame ) . hasInstanceMethod ( name ) ; 
 + & & ( ( ClassFrame ) frame ) . hasInstanceMethod ( ident ) ; 
 } 
 
 / * * 
 * Find frame containing declaration . 
 - * @ param name name of the declaration to find 
 - * @ return LexicalFrame containing declaration or null 
 + * @ param name IDENT ast of the declaration to find . 
 + * @ param lookForMethod whether we are looking for a method name . 
 + * @ return LexicalFrame containing declaration or null . 
 * / 
 - private LexicalFrame findFrame ( String name ) { 
 + private LexicalFrame findFrame ( DetailAST name , boolean lookForMethod ) { 
 if ( current = = null ) { 
 return null ; 
 } 
 else { 
 - return current . getIfContains ( name ) ; 
 + return current . getIfContains ( name , lookForMethod ) ; 
 } 
 } 
 
 @ @ - 389 , 7 + 386 , 8 @ @ public class RequireThisCheck extends Check { 
 * / 
 private static class LexicalFrame { 
 / * * Set of name of variables declared in this frame . * / 
 - private final Set < String > varNames ; 
 + private final Set < DetailAST > varIdents ; 
 + 
 / * * 
 * Parent frame . 
 * / 
 @ @ - 402 , 39 + 400 , 93 @ @ public class RequireThisCheck extends Check { 
 * / 
 protected LexicalFrame ( LexicalFrame parent ) { 
 this . parent = parent ; 
 - varNames = Sets . newHashSet ( ) ; 
 + varIdents = Sets . newHashSet ( ) ; 
 } 
 
 - / * * Add a name to the frame . 
 - * @ param nameToAdd the name we ' re adding 
 + / * * 
 + * Add a name to the frame . 
 + * @ param identToAdd the name we ' re adding 
 * / 
 - private void addName ( String nameToAdd ) { 
 - varNames . add ( nameToAdd ) ; 
 + private void addIdent ( DetailAST identToAdd ) { 
 + varIdents . add ( identToAdd ) ; 
 + } 
 + 
 + protected LexicalFrame getParent ( ) { 
 + return parent ; 
 } 
 
 / * * Check whether the frame contains a given name . 
 - * @ param nameToFind the name we ' re looking for 
 + * @ param nameToFind the IDENT ast of the name we ' re looking for 
 * @ return whether it was found 
 * / 
 - boolean contains ( String nameToFind ) { 
 - return varNames . contains ( nameToFind ) ; 
 + boolean contains ( DetailAST nameToFind ) { 
 + return containsName ( varIdents , nameToFind ) ; 
 } 
 
 / * * Check whether the frame contains a given name . 
 - * @ param nameToFind the name we ' re looking for 
 - * @ return whether it was found 
 + * @ param nameToFind IDENT ast of the name we ' re looking for . 
 + * @ param lookForMethod whether we are looking for a method name . 
 + * @ return whether it was found . 
 * / 
 - private LexicalFrame getIfContains ( String nameToFind ) { 
 + protected LexicalFrame getIfContains ( DetailAST nameToFind , boolean lookForMethod ) { 
 LexicalFrame frame = null ; 
 
 - if ( contains ( nameToFind ) ) { 
 + if ( ! lookForMethod 
 + & & contains ( nameToFind ) ) { 
 frame = this ; 
 } 
 else if ( parent ! = null ) { 
 - frame = parent . getIfContains ( nameToFind ) ; 
 + frame = parent . getIfContains ( nameToFind , lookForMethod ) ; 
 } 
 return frame ; 
 } 
 + 
 + / * * 
 + * Whether the set contains a declaration with the text of the specified 
 + * IDENT ast and it is declared in a proper position . 
 + * @ param set the set of declarations . 
 + * @ param ident the specified IDENT ast 
 + * @ return true if the set contains a declaration with the text of the specified 
 + * IDENT ast and it is declared in a proper position . 
 + * / 
 + protected boolean containsName ( Set < DetailAST > set , DetailAST ident ) { 
 + boolean result = false ; 
 + for ( DetailAST ast : set ) { 
 + if ( isProperDefinition ( ident , ast ) ) { 
 + result = true ; 
 + break ; 
 + } 
 + } 
 + return result ; 
 + } 
 + 
 + / * * 
 + * Whether the definition is correspondent to the IDENT . 
 + * @ param ident the IDENT ast to check . 
 + * @ param ast the IDENT ast of the definition to check . 
 + * @ return true if ast is correspondent to ident . 
 + * / 
 + protected boolean isProperDefinition ( DetailAST ident , DetailAST ast ) { 
 + final String nameToFind = ident . getText ( ) ; 
 + return nameToFind . equals ( ast . getText ( ) ) 
 + & & checkPosition ( ast , ident ) ; 
 + } 
 + 
 + / * * 
 + * Whether the declaration is located before the checked ast . 
 + * @ param ast1 the IDENT ast of the declaration . 
 + * @ param ast2 the IDENT ast to check . 
 + * @ return true , if the declaration is located before the checked ast . 
 + * / 
 + private static boolean checkPosition ( DetailAST ast1 , DetailAST ast2 ) { 
 + boolean result = false ; 
 + if ( ast1 . getLineNo ( ) < ast2 . getLineNo ( ) 
 + | | ast1 . getLineNo ( ) = = ast2 . getLineNo ( ) 
 + & & ast1 . getColumnNo ( ) < ast2 . getColumnNo ( ) ) { 
 + result = true ; 
 + } 
 + return result ; 
 + } 
 } 
 
 / * * 
 @ @ - 472 , 14 + 524 , 14 @ @ public class RequireThisCheck extends Check { 
 * @ author Stephen Bloch 
 * / 
 private static class ClassFrame extends LexicalFrame { 
 - / * * Set of name of instance members declared in this frame . * / 
 - private final Set < String > instanceMembers ; 
 - / * * Set of name of instance methods declared in this frame . * / 
 - private final Set < String > instanceMethods ; 
 - / * * Set of name of variables declared in this frame . * / 
 - private final Set < String > staticMembers ; 
 - / * * Set of name of static methods declared in this frame . * / 
 - private final Set < String > staticMethods ; 
 + / * * Set of idents of instance members declared in this frame . * / 
 + private final Set < DetailAST > instanceMembers ; 
 + / * * Set of idents of instance methods declared in this frame . * / 
 + private final Set < DetailAST > instanceMethods ; 
 + / * * Set of idents of variables declared in this frame . * / 
 + private final Set < DetailAST > staticMembers ; 
 + / * * Set of idents of static methods declared in this frame . * / 
 + private final Set < DetailAST > staticMethods ; 
 
 / * * 
 * Creates new instance of ClassFrame . 
 @ @ - 494 , 64 + 546 , 83 @ @ public class RequireThisCheck extends Check { 
 } 
 
 / * * 
 - * Adds static member ' s name . 
 - * @ param name a name of static member of the class 
 + * Adds static member ' s ident . 
 + * @ param ident an ident of static member of the class 
 * / 
 - public void addStaticMember ( final String name ) { 
 - staticMembers . add ( name ) ; 
 + public void addStaticMember ( final DetailAST ident ) { 
 + staticMembers . add ( ident ) ; 
 } 
 
 / * * 
 * Adds static method ' s name . 
 - * @ param name a name of static method of the class 
 + * @ param ident an ident of static method of the class 
 * / 
 - public void addStaticMethod ( final String name ) { 
 - staticMethods . add ( name ) ; 
 + public void addStaticMethod ( final DetailAST ident ) { 
 + staticMethods . add ( ident ) ; 
 } 
 
 / * * 
 - * Adds instance member ' s name . 
 - * @ param name a name of instance member of the class 
 + * Adds instance member ' s ident . 
 + * @ param ident an ident of instance member of the class 
 * / 
 - public void addInstanceMember ( final String name ) { 
 - instanceMembers . add ( name ) ; 
 + public void addInstanceMember ( final DetailAST ident ) { 
 + instanceMembers . add ( ident ) ; 
 } 
 
 / * * 
 * Adds instance method ' s name . 
 - * @ param name a name of instance method of the class 
 + * @ param ident an ident of instance method of the class 
 * / 
 - public void addInstanceMethod ( final String name ) { 
 - instanceMethods . add ( name ) ; 
 + public void addInstanceMethod ( final DetailAST ident ) { 
 + instanceMethods . add ( ident ) ; 
 } 
 
 / * * 
 * Checks if a given name is a known instance member of the class . 
 - * @ param name a name to check 
 + * @ param ident the IDENT ast of the name to check 
 * @ return true is the given name is a name of a known 
 * instance member of the class 
 * / 
 - public boolean hasInstanceMember ( final String name ) { 
 - return instanceMembers . contains ( name ) ; 
 + public boolean hasInstanceMember ( final DetailAST ident ) { 
 + return containsName ( instanceMembers , ident ) ; 
 } 
 
 / * * 
 * Checks if a given name is a known instance method of the class . 
 - * @ param name a name to check 
 + * @ param ident the IDENT ast of the name to check 
 * @ return true is the given name is a name of a known 
 * instance method of the class 
 * / 
 - public boolean hasInstanceMethod ( final String name ) { 
 - return instanceMethods . contains ( name ) ; 
 + public boolean hasInstanceMethod ( final DetailAST ident ) { 
 + return containsName ( instanceMethods , ident ) ; 
 } 
 
 @ Override 
 - boolean contains ( String nameToFind ) { 
 + boolean contains ( DetailAST nameToFind ) { 
 return super . contains ( nameToFind ) 
 - | | instanceMembers . contains ( nameToFind ) 
 - | | instanceMethods . contains ( nameToFind ) 
 - | | staticMembers . contains ( nameToFind ) 
 - | | staticMethods . contains ( nameToFind ) ; 
 + | | containsName ( instanceMembers , nameToFind ) 
 + | | containsName ( instanceMethods , nameToFind ) 
 + | | containsName ( staticMembers , nameToFind ) 
 + | | containsName ( staticMethods , nameToFind ) ; 
 + } 
 + 
 + @ Override 
 + protected boolean isProperDefinition ( DetailAST ident , DetailAST ast ) { 
 + final String nameToFind = ident . getText ( ) ; 
 + return nameToFind . equals ( ast . getText ( ) ) ; 
 + } 
 + 
 + @ Override 
 + protected LexicalFrame getIfContains ( DetailAST nameToFind , boolean lookForMethod ) { 
 + LexicalFrame frame ; 
 + 
 + if ( contains ( nameToFind ) ) { 
 + frame = this ; 
 + } 
 + else { 
 + frame = getParent ( ) . getIfContains ( nameToFind , lookForMethod ) ; 
 + } 
 + return frame ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index 9a18157 . . d8f9780 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 53 , 6 + 53 , 10 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 " 31 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " \ " this \ " " ) , 
 " 49 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " z " , " \ " this \ " " ) , 
 " 56 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " z " , " \ " this \ " " ) , 
 + " 113 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " \ " this \ " " ) , 
 + " 114 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " \ " this \ " " ) , 
 + " 115 : 9 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " \ " this \ " " ) , 
 + " 121 : 13 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " \ " this \ " " ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputRequireThis . java " ) , 
 @ @ - 66 , 6 + 70 , 8 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " checkFields " , " false " ) ; 
 final String [ ] expected = { 
 " 17 : 9 : " + getCheckMessage ( MSG _ METHOD , " method1 " , " \ " this \ " " ) , 
 + " 115 : 9 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " \ " this \ " " ) , 
 + " 121 : 13 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " \ " this \ " " ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputRequireThis . java " ) , 
 @ @ - 82 , 6 + 88 , 8 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 " 31 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " \ " this \ " " ) , 
 " 49 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " z " , " \ " this \ " " ) , 
 " 56 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " z " , " \ " this \ " " ) , 
 + " 113 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " \ " this \ " " ) , 
 + " 114 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " \ " this \ " " ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputRequireThis . java " ) , 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java 
 index cef9f58 . . 5cbf936 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java 
 @ @ - 106 , 3 + 106 , 19 @ @ class Issue257 { 
 } 
 } 
 } 
 + 
 + class Issue2240 { 
 + int i ; 
 + void foo ( ) { 
 + i + + ; 
 + i + + ; int i = 1 ; i + + ; 
 + instanceMethod ( ) ; 
 + } 
 + void instanceMethod ( ) { } ; 
 + 
 + class Nested { 
 + void bar ( ) { 
 + instanceMethod ( ) ; 
 + } 
 + } 
 + }
