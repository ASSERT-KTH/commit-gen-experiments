BLEU SCORE: 0.010122231330332757

TEST MSG: Issue # 2905 : add to profile activation that tools dependency should only be declared up to JDK 8
GENERATED MSG: fix copy / paste error

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index f67cebe . . 0bd2612 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1232 , 6 + 1232 , 7 @ @ <nl> < name > java . vendor < / name > <nl> < value > Oracle Corporation < / value > <nl> < / property > <nl> + < jdk > [ , 1 . 9 ) < / jdk > <nl> < / activation > <nl> < dependencies > <nl> < dependency >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 5261e66 . . cc2fe80 100755 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 357 , 6 + 357 , 14 @ @ <nl> < groupId > org . apache . maven . plugins < / groupId > <nl> < artifactId > maven - linkcheck - plugin < / artifactId > <nl> < / plugin > <nl> + < plugin > <nl> + 	 < groupId > org . apache . maven . plugins < / groupId > <nl> + 	 < artifactId > maven - eclipse - plugin < / artifactId > <nl> + < configuration > <nl> + < downloadSources > true < / downloadSources > <nl> + < downloadJavadocs > true < / downloadJavadocs > <nl> + < / configuration > <nl> + < / plugin > <nl> < / plugins > <nl> < / build > <nl> <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> index 544f99f . . 075b245 100755 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> @ @ - 27 , 27 + 27 , 19 @ @ import java . util . StringTokenizer ; <nl> import org . apache . commons . beanutils . BeanUtilsBean ; <nl> import org . apache . commons . beanutils . ConversionException ; <nl> import org . apache . commons . beanutils . ConvertUtilsBean ; <nl> + import org . apache . commons . beanutils . Converter ; <nl> import org . apache . commons . beanutils . PropertyUtils ; <nl> import org . apache . commons . beanutils . PropertyUtilsBean ; <nl> - import org . apache . commons . beanutils . converters . AbstractArrayConverter ; <nl> - import org . apache . commons . beanutils . converters . BooleanArrayConverter ; <nl> + import org . apache . commons . beanutils . converters . ArrayConverter ; <nl> import org . apache . commons . beanutils . converters . BooleanConverter ; <nl> - import org . apache . commons . beanutils . converters . ByteArrayConverter ; <nl> import org . apache . commons . beanutils . converters . ByteConverter ; <nl> - import org . apache . commons . beanutils . converters . CharacterArrayConverter ; <nl> import org . apache . commons . beanutils . converters . CharacterConverter ; <nl> - import org . apache . commons . beanutils . converters . DoubleArrayConverter ; <nl> import org . apache . commons . beanutils . converters . DoubleConverter ; <nl> - import org . apache . commons . beanutils . converters . FloatArrayConverter ; <nl> import org . apache . commons . beanutils . converters . FloatConverter ; <nl> - import org . apache . commons . beanutils . converters . IntegerArrayConverter ; <nl> import org . apache . commons . beanutils . converters . IntegerConverter ; <nl> - import org . apache . commons . beanutils . converters . LongArrayConverter ; <nl> import org . apache . commons . beanutils . converters . LongConverter ; <nl> - import org . apache . commons . beanutils . converters . ShortArrayConverter ; <nl> import org . apache . commons . beanutils . converters . ShortConverter ; <nl> <nl> - <nl> / * * <nl> * A Java Bean that implements the component lifecycle interfaces by <nl> * calling the bean ' s setters for all configuration attributes . <nl> @ @ - 71 , 55 + 63 , 40 @ @ public class AutomaticBean <nl> private static BeanUtilsBean createBeanUtilsBean ( ) <nl> { <nl> final ConvertUtilsBean cub = new ConvertUtilsBean ( ) ; <nl> - <nl> / / TODO : is there a smarter way to tell beanutils not to use defaults ? <nl> - <nl> - final boolean [ ] booleanArray = new boolean [ 0 ] ; <nl> - final byte [ ] byteArray = new byte [ 0 ] ; <nl> - final char [ ] charArray = new char [ 0 ] ; <nl> - final double [ ] doubleArray = new double [ 0 ] ; <nl> - final float [ ] floatArray = new float [ 0 ] ; <nl> - final int [ ] intArray = new int [ 0 ] ; <nl> - final long [ ] longArray = new long [ 0 ] ; <nl> - final short [ ] shortArray = new short [ 0 ] ; <nl> - <nl> - <nl> cub . register ( new BooleanConverter ( ) , Boolean . TYPE ) ; <nl> cub . register ( new BooleanConverter ( ) , Boolean . class ) ; <nl> - cub . register ( <nl> - new BooleanArrayConverter ( ) , booleanArray . getClass ( ) ) ; <nl> + cub . register ( new ArrayConverter ( <nl> + boolean [ ] . class , new BooleanConverter ( ) ) , boolean [ ] . class ) ; <nl> cub . register ( new ByteConverter ( ) , Byte . TYPE ) ; <nl> cub . register ( new ByteConverter ( ) , Byte . class ) ; <nl> - cub . register ( <nl> - new ByteArrayConverter ( byteArray ) , byteArray . getClass ( ) ) ; <nl> + cub . register ( new ArrayConverter ( byte [ ] . class , new ByteConverter ( ) ) , <nl> + byte [ ] . class ) ; <nl> cub . register ( new CharacterConverter ( ) , Character . TYPE ) ; <nl> cub . register ( new CharacterConverter ( ) , Character . class ) ; <nl> - cub . register ( <nl> - new CharacterArrayConverter ( ) , charArray . getClass ( ) ) ; <nl> + cub . register ( new ArrayConverter ( char [ ] . class , new CharacterConverter ( ) ) , <nl> + char [ ] . class ) ; <nl> cub . register ( new DoubleConverter ( ) , Double . TYPE ) ; <nl> cub . register ( new DoubleConverter ( ) , Double . class ) ; <nl> - cub . register ( <nl> - new DoubleArrayConverter ( doubleArray ) , doubleArray . getClass ( ) ) ; <nl> + cub . register ( new ArrayConverter ( double [ ] . class , new DoubleConverter ( ) ) , <nl> + double [ ] . class ) ; <nl> cub . register ( new FloatConverter ( ) , Float . TYPE ) ; <nl> cub . register ( new FloatConverter ( ) , Float . class ) ; <nl> - cub . register ( new FloatArrayConverter ( ) , floatArray . getClass ( ) ) ; <nl> + cub . register ( new ArrayConverter ( float [ ] . class , new FloatConverter ( ) ) , <nl> + float [ ] . class ) ; <nl> cub . register ( new IntegerConverter ( ) , Integer . TYPE ) ; <nl> cub . register ( new IntegerConverter ( ) , Integer . class ) ; <nl> - cub . register ( new IntegerArrayConverter ( ) , intArray . getClass ( ) ) ; <nl> + cub . register ( new ArrayConverter ( int [ ] . class , new IntegerConverter ( ) ) , <nl> + int [ ] . class ) ; <nl> cub . register ( new LongConverter ( ) , Long . TYPE ) ; <nl> cub . register ( new LongConverter ( ) , Long . class ) ; <nl> - cub . register ( new LongArrayConverter ( ) , longArray . getClass ( ) ) ; <nl> + cub . register ( new ArrayConverter ( long [ ] . class , new LongConverter ( ) ) , <nl> + long [ ] . class ) ; <nl> cub . register ( new ShortConverter ( ) , Short . TYPE ) ; <nl> cub . register ( new ShortConverter ( ) , Short . class ) ; <nl> - cub . register ( new ShortArrayConverter ( ) , shortArray . getClass ( ) ) ; <nl> - / / TODO : investigate : <nl> - / / StringArrayConverter doesn ' t properly convert an array of tokens with <nl> - / / elements containing an underscore , " _ " . <nl> - / / Hacked a replacement class : ( <nl> - / / cub . register ( new StringArrayConverter ( ) , <nl> - / / String [ ] . class ) ; <nl> - cub . register ( new StrArrayConverter ( ) , String [ ] . class ) ; <nl> - cub . register ( new IntegerArrayConverter ( ) , Integer [ ] . class ) ; <nl> + cub . register ( new ArrayConverter ( short [ ] . class , new ShortConverter ( ) ) , <nl> + short [ ] . class ) ; <nl> + cub . register ( new RelaxedStringArrayConverter ( ) , String [ ] . class ) ; <nl> <nl> / / BigDecimal , BigInteger , Class , Date , String , Time , TimeStamp <nl> / / do not use defaults in the default configuration of ConvertUtilsBean <nl> @ @ - 289 , 92 + 266 , 31 @ @ public class AutomaticBean <nl> } <nl> <nl> / * * <nl> - * < p > Standard Converter implementation that converts an incoming <nl> - * String into an array of String . On a conversion failure , returns <nl> - * a specified default value or throws a ConversionException depending <nl> - * on how this instance is constructed . < / p > <nl> - * <nl> - * Hacked from <nl> - * http : / / cvs . apache . org / viewcvs / jakarta - commons / beanutils / src / java / org / apache / commons / beanutils / converters / StringArrayConverter . java <nl> - * because that implementation fails to convert array of tokens with <nl> - * elements containing an underscore , " _ " : ( <nl> - * <nl> - * @ author Rick Giles <nl> + * A converter that does not care whether the array elements contain String <nl> + * characters like ' * ' or ' _ ' . The normal ArrayConverter class has problems <nl> + * with this characters . <nl> * / <nl> - private static final class StrArrayConverter extends AbstractArrayConverter <nl> + private static class RelaxedStringArrayConverter implements Converter <nl> { <nl> - / * * < p > Model object for type comparisons . < / p > * / <nl> - private static final String [ ] MODEL = new String [ 0 ] ; <nl> - <nl> - / * * Creates a new StrArrayConverter object . * / <nl> - public StrArrayConverter ( ) <nl> - { <nl> - this . defaultValue = null ; <nl> - this . useDefault = false ; <nl> - } <nl> - <nl> + / * * { @ inheritDoc } * / <nl> @ SuppressWarnings ( " unchecked " ) <nl> - @ Override <nl> public Object convert ( Class aType , Object aValue ) <nl> - throws ConversionException <nl> - { <nl> - / / Deal with a null value <nl> - if ( aValue = = null ) { <nl> - if ( useDefault ) { <nl> - return ( defaultValue ) ; <nl> - } <nl> - throw new ConversionException ( " No value specified " ) ; <nl> - } <nl> - <nl> - / / Deal with the no - conversion - needed case <nl> - if ( MODEL . getClass ( ) = = aValue . getClass ( ) ) { <nl> - return ( aValue ) ; <nl> - } <nl> - <nl> - / / Parse the input value as a String into elements <nl> - / / and convert to the appropriate type <nl> - try { <nl> - final List list = parseElements ( aValue . toString ( ) ) ; <nl> - final String [ ] results = new String [ list . size ( ) ] ; <nl> - <nl> - for ( int i = 0 ; i < results . length ; i + + ) { <nl> - results [ i ] = ( String ) list . get ( i ) ; <nl> - } <nl> - return ( results ) ; <nl> - } <nl> - catch ( final Exception e ) { <nl> - if ( useDefault ) { <nl> - return ( defaultValue ) ; <nl> - } <nl> - throw new ConversionException ( aValue . toString ( ) , e ) ; <nl> - } <nl> - } <nl> - <nl> - @ SuppressWarnings ( " unchecked " ) <nl> - @ Override <nl> - protected List parseElements ( final String aValue ) <nl> - throws NullPointerException <nl> { <nl> - / / Validate the passed argument <nl> - if ( aValue = = null ) { <nl> - throw new NullPointerException ( ) ; <nl> - } <nl> - <nl> - / / Trim any matching ' { ' and ' } ' delimiters <nl> - String str = aValue . trim ( ) ; <nl> - if ( str . startsWith ( " { " ) & & str . endsWith ( " } " ) ) { <nl> - str = str . substring ( 1 , str . length ( ) - 1 ) ; <nl> + if ( null = = aType ) { <nl> + throw new ConversionException ( " Cannot convert from null . " ) ; <nl> } <nl> <nl> - final StringTokenizer st = new StringTokenizer ( str , " , " ) ; <nl> - final List < String > retVal = Lists . newArrayList ( ) ; <nl> + / / Convert to a String and trim it for the tokenizer . <nl> + final StringTokenizer st = new StringTokenizer ( <nl> + aValue . toString ( ) . trim ( ) , " , " ) ; <nl> + final List < String > result = Lists . newArrayList ( ) ; <nl> <nl> while ( st . hasMoreTokens ( ) ) { <nl> final String token = st . nextToken ( ) ; <nl> - retVal . add ( token . trim ( ) ) ; <nl> + result . add ( token . trim ( ) ) ; <nl> } <nl> <nl> - return retVal ; <nl> + return result . toArray ( new String [ result . size ( ) ] ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java <nl> index 06302cd . . 72598ef 100755 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java <nl> @ @ - 188 , 7 + 188 , 7 @ @ public class MagicNumberCheck extends Check <nl> if ( ! ScopeUtils . inCodeBlock ( aAST ) ) { <nl> return false ; <nl> } <nl> - <nl> + <nl> / / find the method definition AST <nl> DetailAST methodDefAST = aAST . getParent ( ) ; <nl> while ( ( null ! = methodDefAST ) <nl> @ @ - 196 , 25 + 196 , 25 @ @ public class MagicNumberCheck extends Check <nl> { <nl> methodDefAST = methodDefAST . getParent ( ) ; <nl> } <nl> - <nl> + <nl> if ( null = = methodDefAST ) { <nl> return false ; <nl> } <nl> - <nl> + <nl> / / Check for ' hashCode ' name . <nl> final DetailAST identAST = <nl> methodDefAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> if ( ! " hashCode " . equals ( identAST . getText ( ) ) ) { <nl> return false ; <nl> } <nl> - <nl> + <nl> / / Check for no arguments . <nl> final DetailAST paramAST = <nl> methodDefAST . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> if ( 0 ! = paramAST . getChildCount ( ) ) { <nl> return false ; <nl> } <nl> - <nl> + <nl> / / we are in a ' public int hashCode ( ) ' method ! The compiler will ensure <nl> / / the method returns an ' int ' and is public . <nl> return true ; <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index f67cebe . . 0bd2612 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1232 , 6 + 1232 , 7 @ @ 
 < name > java . vendor < / name > 
 < value > Oracle Corporation < / value > 
 < / property > 
 + < jdk > [ , 1 . 9 ) < / jdk > 
 < / activation > 
 < dependencies > 
 < dependency >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 5261e66 . . cc2fe80 100755 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 357 , 6 + 357 , 14 @ @ 
 < groupId > org . apache . maven . plugins < / groupId > 
 < artifactId > maven - linkcheck - plugin < / artifactId > 
 < / plugin > 
 + < plugin > 
 + 	 < groupId > org . apache . maven . plugins < / groupId > 
 + 	 < artifactId > maven - eclipse - plugin < / artifactId > 
 + < configuration > 
 + < downloadSources > true < / downloadSources > 
 + < downloadJavadocs > true < / downloadJavadocs > 
 + < / configuration > 
 + < / plugin > 
 < / plugins > 
 < / build > 
 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 index 544f99f . . 075b245 100755 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 @ @ - 27 , 27 + 27 , 19 @ @ import java . util . StringTokenizer ; 
 import org . apache . commons . beanutils . BeanUtilsBean ; 
 import org . apache . commons . beanutils . ConversionException ; 
 import org . apache . commons . beanutils . ConvertUtilsBean ; 
 + import org . apache . commons . beanutils . Converter ; 
 import org . apache . commons . beanutils . PropertyUtils ; 
 import org . apache . commons . beanutils . PropertyUtilsBean ; 
 - import org . apache . commons . beanutils . converters . AbstractArrayConverter ; 
 - import org . apache . commons . beanutils . converters . BooleanArrayConverter ; 
 + import org . apache . commons . beanutils . converters . ArrayConverter ; 
 import org . apache . commons . beanutils . converters . BooleanConverter ; 
 - import org . apache . commons . beanutils . converters . ByteArrayConverter ; 
 import org . apache . commons . beanutils . converters . ByteConverter ; 
 - import org . apache . commons . beanutils . converters . CharacterArrayConverter ; 
 import org . apache . commons . beanutils . converters . CharacterConverter ; 
 - import org . apache . commons . beanutils . converters . DoubleArrayConverter ; 
 import org . apache . commons . beanutils . converters . DoubleConverter ; 
 - import org . apache . commons . beanutils . converters . FloatArrayConverter ; 
 import org . apache . commons . beanutils . converters . FloatConverter ; 
 - import org . apache . commons . beanutils . converters . IntegerArrayConverter ; 
 import org . apache . commons . beanutils . converters . IntegerConverter ; 
 - import org . apache . commons . beanutils . converters . LongArrayConverter ; 
 import org . apache . commons . beanutils . converters . LongConverter ; 
 - import org . apache . commons . beanutils . converters . ShortArrayConverter ; 
 import org . apache . commons . beanutils . converters . ShortConverter ; 
 
 - 
 / * * 
 * A Java Bean that implements the component lifecycle interfaces by 
 * calling the bean ' s setters for all configuration attributes . 
 @ @ - 71 , 55 + 63 , 40 @ @ public class AutomaticBean 
 private static BeanUtilsBean createBeanUtilsBean ( ) 
 { 
 final ConvertUtilsBean cub = new ConvertUtilsBean ( ) ; 
 - 
 / / TODO : is there a smarter way to tell beanutils not to use defaults ? 
 - 
 - final boolean [ ] booleanArray = new boolean [ 0 ] ; 
 - final byte [ ] byteArray = new byte [ 0 ] ; 
 - final char [ ] charArray = new char [ 0 ] ; 
 - final double [ ] doubleArray = new double [ 0 ] ; 
 - final float [ ] floatArray = new float [ 0 ] ; 
 - final int [ ] intArray = new int [ 0 ] ; 
 - final long [ ] longArray = new long [ 0 ] ; 
 - final short [ ] shortArray = new short [ 0 ] ; 
 - 
 - 
 cub . register ( new BooleanConverter ( ) , Boolean . TYPE ) ; 
 cub . register ( new BooleanConverter ( ) , Boolean . class ) ; 
 - cub . register ( 
 - new BooleanArrayConverter ( ) , booleanArray . getClass ( ) ) ; 
 + cub . register ( new ArrayConverter ( 
 + boolean [ ] . class , new BooleanConverter ( ) ) , boolean [ ] . class ) ; 
 cub . register ( new ByteConverter ( ) , Byte . TYPE ) ; 
 cub . register ( new ByteConverter ( ) , Byte . class ) ; 
 - cub . register ( 
 - new ByteArrayConverter ( byteArray ) , byteArray . getClass ( ) ) ; 
 + cub . register ( new ArrayConverter ( byte [ ] . class , new ByteConverter ( ) ) , 
 + byte [ ] . class ) ; 
 cub . register ( new CharacterConverter ( ) , Character . TYPE ) ; 
 cub . register ( new CharacterConverter ( ) , Character . class ) ; 
 - cub . register ( 
 - new CharacterArrayConverter ( ) , charArray . getClass ( ) ) ; 
 + cub . register ( new ArrayConverter ( char [ ] . class , new CharacterConverter ( ) ) , 
 + char [ ] . class ) ; 
 cub . register ( new DoubleConverter ( ) , Double . TYPE ) ; 
 cub . register ( new DoubleConverter ( ) , Double . class ) ; 
 - cub . register ( 
 - new DoubleArrayConverter ( doubleArray ) , doubleArray . getClass ( ) ) ; 
 + cub . register ( new ArrayConverter ( double [ ] . class , new DoubleConverter ( ) ) , 
 + double [ ] . class ) ; 
 cub . register ( new FloatConverter ( ) , Float . TYPE ) ; 
 cub . register ( new FloatConverter ( ) , Float . class ) ; 
 - cub . register ( new FloatArrayConverter ( ) , floatArray . getClass ( ) ) ; 
 + cub . register ( new ArrayConverter ( float [ ] . class , new FloatConverter ( ) ) , 
 + float [ ] . class ) ; 
 cub . register ( new IntegerConverter ( ) , Integer . TYPE ) ; 
 cub . register ( new IntegerConverter ( ) , Integer . class ) ; 
 - cub . register ( new IntegerArrayConverter ( ) , intArray . getClass ( ) ) ; 
 + cub . register ( new ArrayConverter ( int [ ] . class , new IntegerConverter ( ) ) , 
 + int [ ] . class ) ; 
 cub . register ( new LongConverter ( ) , Long . TYPE ) ; 
 cub . register ( new LongConverter ( ) , Long . class ) ; 
 - cub . register ( new LongArrayConverter ( ) , longArray . getClass ( ) ) ; 
 + cub . register ( new ArrayConverter ( long [ ] . class , new LongConverter ( ) ) , 
 + long [ ] . class ) ; 
 cub . register ( new ShortConverter ( ) , Short . TYPE ) ; 
 cub . register ( new ShortConverter ( ) , Short . class ) ; 
 - cub . register ( new ShortArrayConverter ( ) , shortArray . getClass ( ) ) ; 
 - / / TODO : investigate : 
 - / / StringArrayConverter doesn ' t properly convert an array of tokens with 
 - / / elements containing an underscore , " _ " . 
 - / / Hacked a replacement class : ( 
 - / / cub . register ( new StringArrayConverter ( ) , 
 - / / String [ ] . class ) ; 
 - cub . register ( new StrArrayConverter ( ) , String [ ] . class ) ; 
 - cub . register ( new IntegerArrayConverter ( ) , Integer [ ] . class ) ; 
 + cub . register ( new ArrayConverter ( short [ ] . class , new ShortConverter ( ) ) , 
 + short [ ] . class ) ; 
 + cub . register ( new RelaxedStringArrayConverter ( ) , String [ ] . class ) ; 
 
 / / BigDecimal , BigInteger , Class , Date , String , Time , TimeStamp 
 / / do not use defaults in the default configuration of ConvertUtilsBean 
 @ @ - 289 , 92 + 266 , 31 @ @ public class AutomaticBean 
 } 
 
 / * * 
 - * < p > Standard Converter implementation that converts an incoming 
 - * String into an array of String . On a conversion failure , returns 
 - * a specified default value or throws a ConversionException depending 
 - * on how this instance is constructed . < / p > 
 - * 
 - * Hacked from 
 - * http : / / cvs . apache . org / viewcvs / jakarta - commons / beanutils / src / java / org / apache / commons / beanutils / converters / StringArrayConverter . java 
 - * because that implementation fails to convert array of tokens with 
 - * elements containing an underscore , " _ " : ( 
 - * 
 - * @ author Rick Giles 
 + * A converter that does not care whether the array elements contain String 
 + * characters like ' * ' or ' _ ' . The normal ArrayConverter class has problems 
 + * with this characters . 
 * / 
 - private static final class StrArrayConverter extends AbstractArrayConverter 
 + private static class RelaxedStringArrayConverter implements Converter 
 { 
 - / * * < p > Model object for type comparisons . < / p > * / 
 - private static final String [ ] MODEL = new String [ 0 ] ; 
 - 
 - / * * Creates a new StrArrayConverter object . * / 
 - public StrArrayConverter ( ) 
 - { 
 - this . defaultValue = null ; 
 - this . useDefault = false ; 
 - } 
 - 
 + / * * { @ inheritDoc } * / 
 @ SuppressWarnings ( " unchecked " ) 
 - @ Override 
 public Object convert ( Class aType , Object aValue ) 
 - throws ConversionException 
 - { 
 - / / Deal with a null value 
 - if ( aValue = = null ) { 
 - if ( useDefault ) { 
 - return ( defaultValue ) ; 
 - } 
 - throw new ConversionException ( " No value specified " ) ; 
 - } 
 - 
 - / / Deal with the no - conversion - needed case 
 - if ( MODEL . getClass ( ) = = aValue . getClass ( ) ) { 
 - return ( aValue ) ; 
 - } 
 - 
 - / / Parse the input value as a String into elements 
 - / / and convert to the appropriate type 
 - try { 
 - final List list = parseElements ( aValue . toString ( ) ) ; 
 - final String [ ] results = new String [ list . size ( ) ] ; 
 - 
 - for ( int i = 0 ; i < results . length ; i + + ) { 
 - results [ i ] = ( String ) list . get ( i ) ; 
 - } 
 - return ( results ) ; 
 - } 
 - catch ( final Exception e ) { 
 - if ( useDefault ) { 
 - return ( defaultValue ) ; 
 - } 
 - throw new ConversionException ( aValue . toString ( ) , e ) ; 
 - } 
 - } 
 - 
 - @ SuppressWarnings ( " unchecked " ) 
 - @ Override 
 - protected List parseElements ( final String aValue ) 
 - throws NullPointerException 
 { 
 - / / Validate the passed argument 
 - if ( aValue = = null ) { 
 - throw new NullPointerException ( ) ; 
 - } 
 - 
 - / / Trim any matching ' { ' and ' } ' delimiters 
 - String str = aValue . trim ( ) ; 
 - if ( str . startsWith ( " { " ) & & str . endsWith ( " } " ) ) { 
 - str = str . substring ( 1 , str . length ( ) - 1 ) ; 
 + if ( null = = aType ) { 
 + throw new ConversionException ( " Cannot convert from null . " ) ; 
 } 
 
 - final StringTokenizer st = new StringTokenizer ( str , " , " ) ; 
 - final List < String > retVal = Lists . newArrayList ( ) ; 
 + / / Convert to a String and trim it for the tokenizer . 
 + final StringTokenizer st = new StringTokenizer ( 
 + aValue . toString ( ) . trim ( ) , " , " ) ; 
 + final List < String > result = Lists . newArrayList ( ) ; 
 
 while ( st . hasMoreTokens ( ) ) { 
 final String token = st . nextToken ( ) ; 
 - retVal . add ( token . trim ( ) ) ; 
 + result . add ( token . trim ( ) ) ; 
 } 
 
 - return retVal ; 
 + return result . toArray ( new String [ result . size ( ) ] ) ; 
 } 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java 
 index 06302cd . . 72598ef 100755 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java 
 @ @ - 188 , 7 + 188 , 7 @ @ public class MagicNumberCheck extends Check 
 if ( ! ScopeUtils . inCodeBlock ( aAST ) ) { 
 return false ; 
 } 
 - 
 + 
 / / find the method definition AST 
 DetailAST methodDefAST = aAST . getParent ( ) ; 
 while ( ( null ! = methodDefAST ) 
 @ @ - 196 , 25 + 196 , 25 @ @ public class MagicNumberCheck extends Check 
 { 
 methodDefAST = methodDefAST . getParent ( ) ; 
 } 
 - 
 + 
 if ( null = = methodDefAST ) { 
 return false ; 
 } 
 - 
 + 
 / / Check for ' hashCode ' name . 
 final DetailAST identAST = 
 methodDefAST . findFirstToken ( TokenTypes . IDENT ) ; 
 if ( ! " hashCode " . equals ( identAST . getText ( ) ) ) { 
 return false ; 
 } 
 - 
 + 
 / / Check for no arguments . 
 final DetailAST paramAST = 
 methodDefAST . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 if ( 0 ! = paramAST . getChildCount ( ) ) { 
 return false ; 
 } 
 - 
 + 
 / / we are in a ' public int hashCode ( ) ' method ! The compiler will ensure 
 / / the method returns an ' int ' and is public . 
 return true ; 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index
