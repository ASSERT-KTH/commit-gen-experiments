BLEU SCORE: 0.0260859600387516

TEST MSG: Issue # 3611 : added haltOnException to Checker
GENERATED MSG: Fix for infrastructure class loader . Needs to be verified by Lars ( of

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> index 7b50f2a . . 5dc2ed5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 65 , 6 + 65 , 9 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod <nl> / * * Logger for Checker . * / <nl> private static final Log LOG = LogFactory . getLog ( Checker . class ) ; <nl> <nl> + / * * Message to use when an exception occurs and should be printed as a violation . * / <nl> + private static final String EXCEPTION _ MSG = " general . exception " ; <nl> + <nl> / * * Maintains error count . * / <nl> private final SeverityLevelCounter counter = new SeverityLevelCounter ( <nl> SeverityLevel . ERROR ) ; <nl> @ @ - 124 , 6 + 127 , 9 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod <nl> / * * Cache file . * * / <nl> private PropertyCacheFile cache ; <nl> <nl> + / * * Controls whether exceptions should halt execution or not . * / <nl> + private boolean haltOnException = true ; <nl> + <nl> / * * <nl> * Creates a new { @ code Checker } instance . <nl> * The instance needs to be contextualized and configured . <nl> @ @ - 310 , 9 + 316 , 21 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod <nl> catch ( final IOException ioe ) { <nl> LOG . debug ( " IOException occurred . " , ioe ) ; <nl> fileMessages . add ( new LocalizedMessage ( 0 , <nl> - Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , <nl> + Definitions . CHECKSTYLE _ BUNDLE , EXCEPTION _ MSG , <nl> new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , null ) ) ; <nl> } <nl> + / / - @ cs [ IllegalCatch ] There is no other way to obey haltOnException field <nl> + catch ( Exception ex ) { <nl> + if ( haltOnException ) { <nl> + throw ex ; <nl> + } <nl> + <nl> + LOG . debug ( " Exception occurred . " , ex ) ; <nl> + fileMessages . add ( new LocalizedMessage ( 0 , <nl> + Definitions . CHECKSTYLE _ BUNDLE , EXCEPTION _ MSG , <nl> + new String [ ] { ex . getClass ( ) . getName ( ) + " : " + ex . getMessage ( ) } , <nl> + null , getClass ( ) , null ) ) ; <nl> + } <nl> return fileMessages ; <nl> } <nl> <nl> @ @ - 587 , 6 + 605 , 14 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod <nl> } <nl> <nl> / * * <nl> + * Sets the field { @ link haltOnException } . <nl> + * @ param haltOnException the new value . <nl> + * / <nl> + public void setHaltOnException ( boolean haltOnException ) { <nl> + this . haltOnException = haltOnException ; <nl> + } <nl> + <nl> + / * * <nl> * Clears the cache . <nl> * / <nl> public void clearCache ( ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 0096a4b . . 783d932 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 752 , 6 + 752 , 32 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> } <nl> <nl> + @ Test <nl> + public void testHaltOnExceptionOff ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( CheckWhichThrowsError . class ) ; <nl> + <nl> + final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; <nl> + treeWalkerConfig . addChild ( checkConfig ) ; <nl> + <nl> + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyleConfig " ) ; <nl> + checkerConfig . addChild ( treeWalkerConfig ) ; <nl> + <nl> + checkerConfig . addAttribute ( " haltOnException " , " false " ) ; <nl> + <nl> + final Checker checker = new Checker ( ) ; <nl> + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . configure ( checkerConfig ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> + <nl> + final String filePath = getPath ( " InputMain . java " ) ; <nl> + final String [ ] expected = { <nl> + " 0 : Got an exception - java . lang . IndexOutOfBoundsException : test " , <nl> + } ; <nl> + <nl> + verify ( checker , filePath , filePath , expected ) ; <nl> + } <nl> + <nl> private Checker createMockCheckerWithCacheForModule ( <nl> Class < ? extends ExternalResourceHolder > mockClass ) throws IOException , CheckstyleException { <nl> <nl> @ @ - 957 , 4 + 983 , 27 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> } <nl> } <nl> + <nl> + private static class CheckWhichThrowsError extends AbstractCheck { <nl> + <nl> + @ Override <nl> + public int [ ] getDefaultTokens ( ) { <nl> + return new int [ ] { TokenTypes . CLASS _ DEF } ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return new int [ ] { TokenTypes . CLASS _ DEF } ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return new int [ ] { TokenTypes . CLASS _ DEF } ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visitToken ( DetailAST ast ) { <nl> + throw new IndexOutOfBoundsException ( " test " ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml <nl> index 28e9dd1 . . eb51fca 100644 <nl> - - - a / src / xdocs / config . xml <nl> + + + b / src / xdocs / config . xml <nl> @ @ - 330 , 6 + 330 , 13 @ @ <nl> < td > < a href = " property _ types . html # string " > String < / a > array < / td > <nl> < td > < code > null < / code > < / td > <nl> < / tr > <nl> + < tr > <nl> + < td > haltOnException < / td > <nl> + < td > whether to stop execution of Checkstyle if a single file produces any kind of <nl> + exception during verification < / td > <nl> + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> + < td > < code > true < / code > < / td > <nl> + < / tr > <nl> < / table > <nl> <nl> < p > <nl> @ @ - 376 , 6 + 383 , 18 @ @ <nl> < / source > <nl> <nl> < p > <nl> + To configure a < code > Checker < / code > so that it doesn ' t stop execution on an <nl> + < code > Exception < / code > and instead prints it as a violation : <nl> + < / p > <nl> + <nl> + < source > <nl> + & lt ; module name = & quot ; Checker & quot ; & gt ; <nl> + & lt ; property name = & quot ; haltOnException & quot ; value = & quot ; false & quot ; / & gt ; <nl> + . . . <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + <nl> + < p > <nl> To configure a < code > Checker < / code > so that it <nl> handles files with any extension : <nl> < / p >
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> index 8ad5b69 . . a909577 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import java . util . Properties ; <nl> import java . security . MessageDigest ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> <nl> / * * <nl> * This class maintains a persistent store of the files that have <nl> @ @ - 66 , 13 + 67 , 14 @ @ final class PropertyCacheFile <nl> final String fileName = aFileName ; <nl> if ( fileName ! = null ) { <nl> FileInputStream inStream = null ; <nl> + / / get the current config so if the file isn ' t found <nl> + / / the first time the hash will be added to output file <nl> + final String currentConfigHash = getConfigHashCode ( aCurrentConfig ) ; <nl> try { <nl> inStream = new FileInputStream ( fileName ) ; <nl> mDetails . load ( inStream ) ; <nl> final String cachedConfigHash = <nl> mDetails . getProperty ( CONFIG _ HASH _ KEY ) ; <nl> - final String currentConfigHash = <nl> - getConfigHashCode ( aCurrentConfig ) ; <nl> setInActive = false ; <nl> if ( ( cachedConfigHash = = null ) <nl> | | ! cachedConfigHash . equals ( currentConfigHash ) ) <nl> @ @ - 85 , 11 + 87 , 12 @ @ final class PropertyCacheFile <nl> catch ( FileNotFoundException e ) { <nl> / / Ignore , the cache does not exist <nl> setInActive = false ; <nl> + / / put the hash in the file if the file is going to be created <nl> + mDetails . put ( CONFIG _ HASH _ KEY , currentConfigHash ) ; <nl> } <nl> catch ( IOException e ) { <nl> - / / TODO : use logger <nl> - System . out . println ( " Unable to open cache file , ignoring . " ) ; <nl> - e . printStackTrace ( System . out ) ; <nl> + Utils . getExceptionLogger ( ) <nl> + . debug ( " Unable to open cache file , ignoring . " , e ) ; <nl> } <nl> finally { <nl> if ( inStream ! = null ) { <nl> @ @ - 97 , 9 + 100 , 8 @ @ final class PropertyCacheFile <nl> inStream . close ( ) ; <nl> } <nl> catch ( IOException ex ) { <nl> - / / TODO : use logger <nl> - System . out . println ( " Unable to close cache file . " ) ; <nl> - ex . printStackTrace ( System . out ) ; <nl> + Utils . getExceptionLogger ( ) <nl> + . debug ( " Unable to close cache file . " , ex ) ; <nl> } <nl> } <nl> } <nl> @ @ - 117 , 8 + 119 , 8 @ @ final class PropertyCacheFile <nl> mDetails . store ( out , null ) ; <nl> } <nl> catch ( IOException e ) { <nl> - System . out . println ( " Unable to save cache file " ) ; <nl> - e . printStackTrace ( System . out ) ; <nl> + Utils . getExceptionLogger ( ) <nl> + . debug ( " Unable to save cache file . " , e ) ; <nl> } <nl> finally { <nl> if ( out ! = null ) { <nl> @ @ - 127 , 8 + 129 , 8 @ @ final class PropertyCacheFile <nl> out . close ( ) ; <nl> } <nl> catch ( IOException ex ) { <nl> - System . out . println ( " Unable to close cache file " ) ; <nl> - ex . printStackTrace ( System . out ) ; <nl> + Utils . getExceptionLogger ( ) <nl> + . debug ( " Unable to close cache file . " , ex ) ; <nl> } <nl> } <nl> } <nl> @ @ - 184 , 7 + 186 , 8 @ @ final class PropertyCacheFile <nl> return hexEncode ( md . digest ( ) ) ; <nl> } <nl> catch ( Exception ex ) { / / IO , NoSuchAlgorithm <nl> - ex . printStackTrace ( ) ; <nl> + Utils . getExceptionLogger ( ) <nl> + . debug ( " Unable to calculate hashcode . " , ex ) ; <nl> return " ALWAYS FRESH : " + System . currentTimeMillis ( ) ; <nl> } <nl> } <nl> diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index 2baf8e6 . . 77033ee 100755 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 54 , 6 + 54 , 9 @ @ <nl> < li > Changed way how to IndentationCheck handles fields in <nl> class ( bug 1193848 ) < / li > <nl> <nl> + < li > Fixed problem with cache file ( patch 1012389 ) thanks to <nl> + Dave Wood . < / li > <nl> + <nl> < / ul > <nl> <nl> < p > Other improvements : < / p >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 index 7b50f2a . . 5dc2ed5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 65 , 6 + 65 , 9 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod 
 / * * Logger for Checker . * / 
 private static final Log LOG = LogFactory . getLog ( Checker . class ) ; 
 
 + / * * Message to use when an exception occurs and should be printed as a violation . * / 
 + private static final String EXCEPTION _ MSG = " general . exception " ; 
 + 
 / * * Maintains error count . * / 
 private final SeverityLevelCounter counter = new SeverityLevelCounter ( 
 SeverityLevel . ERROR ) ; 
 @ @ - 124 , 6 + 127 , 9 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod 
 / * * Cache file . * * / 
 private PropertyCacheFile cache ; 
 
 + / * * Controls whether exceptions should halt execution or not . * / 
 + private boolean haltOnException = true ; 
 + 
 / * * 
 * Creates a new { @ code Checker } instance . 
 * The instance needs to be contextualized and configured . 
 @ @ - 310 , 9 + 316 , 21 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod 
 catch ( final IOException ioe ) { 
 LOG . debug ( " IOException occurred . " , ioe ) ; 
 fileMessages . add ( new LocalizedMessage ( 0 , 
 - Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , 
 + Definitions . CHECKSTYLE _ BUNDLE , EXCEPTION _ MSG , 
 new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , null ) ) ; 
 } 
 + / / - @ cs [ IllegalCatch ] There is no other way to obey haltOnException field 
 + catch ( Exception ex ) { 
 + if ( haltOnException ) { 
 + throw ex ; 
 + } 
 + 
 + LOG . debug ( " Exception occurred . " , ex ) ; 
 + fileMessages . add ( new LocalizedMessage ( 0 , 
 + Definitions . CHECKSTYLE _ BUNDLE , EXCEPTION _ MSG , 
 + new String [ ] { ex . getClass ( ) . getName ( ) + " : " + ex . getMessage ( ) } , 
 + null , getClass ( ) , null ) ) ; 
 + } 
 return fileMessages ; 
 } 
 
 @ @ - 587 , 6 + 605 , 14 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod 
 } 
 
 / * * 
 + * Sets the field { @ link haltOnException } . 
 + * @ param haltOnException the new value . 
 + * / 
 + public void setHaltOnException ( boolean haltOnException ) { 
 + this . haltOnException = haltOnException ; 
 + } 
 + 
 + / * * 
 * Clears the cache . 
 * / 
 public void clearCache ( ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 0096a4b . . 783d932 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 752 , 6 + 752 , 32 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 } 
 
 + @ Test 
 + public void testHaltOnExceptionOff ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( CheckWhichThrowsError . class ) ; 
 + 
 + final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; 
 + treeWalkerConfig . addChild ( checkConfig ) ; 
 + 
 + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyleConfig " ) ; 
 + checkerConfig . addChild ( treeWalkerConfig ) ; 
 + 
 + checkerConfig . addAttribute ( " haltOnException " , " false " ) ; 
 + 
 + final Checker checker = new Checker ( ) ; 
 + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . configure ( checkerConfig ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 + 
 + final String filePath = getPath ( " InputMain . java " ) ; 
 + final String [ ] expected = { 
 + " 0 : Got an exception - java . lang . IndexOutOfBoundsException : test " , 
 + } ; 
 + 
 + verify ( checker , filePath , filePath , expected ) ; 
 + } 
 + 
 private Checker createMockCheckerWithCacheForModule ( 
 Class < ? extends ExternalResourceHolder > mockClass ) throws IOException , CheckstyleException { 
 
 @ @ - 957 , 4 + 983 , 27 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 } 
 } 
 + 
 + private static class CheckWhichThrowsError extends AbstractCheck { 
 + 
 + @ Override 
 + public int [ ] getDefaultTokens ( ) { 
 + return new int [ ] { TokenTypes . CLASS _ DEF } ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return new int [ ] { TokenTypes . CLASS _ DEF } ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return new int [ ] { TokenTypes . CLASS _ DEF } ; 
 + } 
 + 
 + @ Override 
 + public void visitToken ( DetailAST ast ) { 
 + throw new IndexOutOfBoundsException ( " test " ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml 
 index 28e9dd1 . . eb51fca 100644 
 - - - a / src / xdocs / config . xml 
 + + + b / src / xdocs / config . xml 
 @ @ - 330 , 6 + 330 , 13 @ @ 
 < td > < a href = " property _ types . html # string " > String < / a > array < / td > 
 < td > < code > null < / code > < / td > 
 < / tr > 
 + < tr > 
 + < td > haltOnException < / td > 
 + < td > whether to stop execution of Checkstyle if a single file produces any kind of 
 + exception during verification < / td > 
 + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 + < td > < code > true < / code > < / td > 
 + < / tr > 
 < / table > 
 
 < p > 
 @ @ - 376 , 6 + 383 , 18 @ @ 
 < / source > 
 
 < p > 
 + To configure a < code > Checker < / code > so that it doesn ' t stop execution on an 
 + < code > Exception < / code > and instead prints it as a violation : 
 + < / p > 
 + 
 + < source > 
 + & lt ; module name = & quot ; Checker & quot ; & gt ; 
 + & lt ; property name = & quot ; haltOnException & quot ; value = & quot ; false & quot ; / & gt ; 
 + . . . 
 + & lt ; / module & gt ; 
 + < / source > 
 + 
 + < p > 
 To configure a < code > Checker < / code > so that it 
 handles files with any extension : 
 < / p >

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 index 8ad5b69 . . a909577 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import java . util . Properties ; 
 import java . security . MessageDigest ; 
 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . api . Utils ; 
 
 / * * 
 * This class maintains a persistent store of the files that have 
 @ @ - 66 , 13 + 67 , 14 @ @ final class PropertyCacheFile 
 final String fileName = aFileName ; 
 if ( fileName ! = null ) { 
 FileInputStream inStream = null ; 
 + / / get the current config so if the file isn ' t found 
 + / / the first time the hash will be added to output file 
 + final String currentConfigHash = getConfigHashCode ( aCurrentConfig ) ; 
 try { 
 inStream = new FileInputStream ( fileName ) ; 
 mDetails . load ( inStream ) ; 
 final String cachedConfigHash = 
 mDetails . getProperty ( CONFIG _ HASH _ KEY ) ; 
 - final String currentConfigHash = 
 - getConfigHashCode ( aCurrentConfig ) ; 
 setInActive = false ; 
 if ( ( cachedConfigHash = = null ) 
 | | ! cachedConfigHash . equals ( currentConfigHash ) ) 
 @ @ - 85 , 11 + 87 , 12 @ @ final class PropertyCacheFile 
 catch ( FileNotFoundException e ) { 
 / / Ignore , the cache does not exist 
 setInActive = false ; 
 + / / put the hash in the file if the file is going to be created 
 + mDetails . put ( CONFIG _ HASH _ KEY , currentConfigHash ) ; 
 } 
 catch ( IOException e ) { 
 - / / TODO : use logger 
 - System . out . println ( " Unable to open cache file , ignoring . " ) ; 
 - e . printStackTrace ( System . out ) ; 
 + Utils . getExceptionLogger ( ) 
 + . debug ( " Unable to open cache file , ignoring . " , e ) ; 
 } 
 finally { 
 if ( inStream ! = null ) { 
 @ @ - 97 , 9 + 100 , 8 @ @ final class PropertyCacheFile 
 inStream . close ( ) ; 
 } 
 catch ( IOException ex ) { 
 - / / TODO : use logger 
 - System . out . println ( " Unable to close cache file . " ) ; 
 - ex . printStackTrace ( System . out ) ; 
 + Utils . getExceptionLogger ( ) 
 + . debug ( " Unable to close cache file . " , ex ) ; 
 } 
 } 
 } 
 @ @ - 117 , 8 + 119 , 8 @ @ final class PropertyCacheFile 
 mDetails . store ( out , null ) ; 
 } 
 catch ( IOException e ) { 
 - System . out . println ( " Unable to save cache file " ) ; 
 - e . printStackTrace ( System . out ) ; 
 + Utils . getExceptionLogger ( ) 
 + . debug ( " Unable to save cache file . " , e ) ; 
 } 
 finally { 
 if ( out ! = null ) { 
 @ @ - 127 , 8 + 129 , 8 @ @ final class PropertyCacheFile 
 out . close ( ) ; 
 } 
 catch ( IOException ex ) { 
 - System . out . println ( " Unable to close cache file " ) ; 
 - ex . printStackTrace ( System . out ) ; 
 + Utils . getExceptionLogger ( ) 
 + . debug ( " Unable to close cache file . " , ex ) ; 
 } 
 } 
 } 
 @ @ - 184 , 7 + 186 , 8 @ @ final class PropertyCacheFile 
 return hexEncode ( md . digest ( ) ) ; 
 } 
 catch ( Exception ex ) { / / IO , NoSuchAlgorithm 
 - ex . printStackTrace ( ) ; 
 + Utils . getExceptionLogger ( ) 
 + . debug ( " Unable to calculate hashcode . " , ex ) ; 
 return " ALWAYS FRESH : " + System . currentTimeMillis ( ) ; 
 } 
 } 
 diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index 2baf8e6 . . 77033ee 100755 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 54 , 6 + 54 , 9 @ @ 
 < li > Changed way how to IndentationCheck handles fields in 
 class ( bug 1193848 ) < / li > 
 
 + < li > Fixed problem with cache file ( patch 1012389 ) thanks to 
 + Dave Wood . < / li > 
 + 
 < / ul > 
 
 < p > Other improvements : < / p >
