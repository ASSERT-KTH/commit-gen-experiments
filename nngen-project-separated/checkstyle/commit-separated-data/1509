BLEU SCORE: 0.8633400213704505

TEST MSG: Issue # 2451 : removed excess hierarchy from MissingCtorCheck
GENERATED MSG: Issue # 2451 : removed excess hierarchy from MissingSwitchDefaultCheck

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 322b0a2 . . edc8052 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 37 , 7 + 37 , 7 @ @ <nl> files = " AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java " / > <nl> <nl> < ! - - Tone down the checking for test code - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 333 " / > <nl> + < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 325 " / > <nl> < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > <nl> < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> < suppress checks = " Javadoc " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java <nl> index ef3d055 . . 81d0383 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java <nl> @ @ - 19 , 10 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . checks . DescendantTokenCheck ; <nl> - import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 38 , 7 + 37 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> * <nl> * @ author o _ sukhodolsky <nl> * / <nl> - public class MissingCtorCheck extends DescendantTokenCheck { <nl> + public class MissingCtorCheck extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 46 , 14 + 45 , 6 @ @ public class MissingCtorCheck extends DescendantTokenCheck { <nl> * / <nl> public static final String MSG _ KEY = " missing . ctor " ; <nl> <nl> - / * * Creates new instance of the check . * / <nl> - public MissingCtorCheck ( ) { <nl> - setLimitedTokens ( TokenUtils . getTokenName ( TokenTypes . CTOR _ DEF ) ) ; <nl> - setMinimumNumber ( 1 ) ; <nl> - setMaximumDepth ( 2 ) ; <nl> - setMinimumMessage ( MSG _ KEY ) ; <nl> - } <nl> - <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> return new int [ ] { TokenTypes . CLASS _ DEF } ; <nl> @ @ - 72 , 8 + 63 , 10 @ @ public class MissingCtorCheck extends DescendantTokenCheck { <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - if ( ! modifiers . branchContains ( TokenTypes . ABSTRACT ) ) { <nl> - super . visitToken ( ast ) ; <nl> + if ( ! modifiers . branchContains ( TokenTypes . ABSTRACT ) <nl> + & & ast . findFirstToken ( TokenTypes . OBJBLOCK ) <nl> + . findFirstToken ( TokenTypes . CTOR _ DEF ) = = null ) { <nl> + log ( ast . getLineNo ( ) , MSG _ KEY ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> index cda73be . . 965724d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> @ @ - 131 , 14 + 131 , 6 @ @ public class XDocsPagesTest { <nl> " TypeNameCheck . compileFlags " , <nl> " RegexpCheck . compileFlags " , <nl> " SuppressionCommentFilter . fileContents " , <nl> - " MissingCtorCheck . limitedTokens " , <nl> - " MissingCtorCheck . maximumDepth " , <nl> - " MissingCtorCheck . maximumMessage " , <nl> - " MissingCtorCheck . maximumNumber " , <nl> - " MissingCtorCheck . minimumDepth " , <nl> - " MissingCtorCheck . minimumMessage " , <nl> - " MissingCtorCheck . minimumNumber " , <nl> - " MissingCtorCheck . sumTokenCounts " , <nl> " MethodNameCheck . applyToPackage " , <nl> " MethodNameCheck . applyToPrivate " , <nl> " MethodNameCheck . applyToProtected " , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheckTest . java <nl> index 21ae13c . . 5f38a54 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheckTest . java <nl> @ @ - 43 , 7 + 43 , 7 @ @ public class MissingCtorCheckTest extends BaseCheckTestSupport { <nl> createCheckConfig ( MissingCtorCheck . class ) ; <nl> <nl> final String [ ] expected = { <nl> - " 3 : 1 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 3 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> <nl> verify ( checkConfig ,
NEAREST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index fad922a . . a9e4085 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 16 , 7 + 16 , 7 @ @ <nl> < ! - - test should be named as their main class - - > <nl> < suppress checks = " AbbreviationAsWordInName " <nl> files = " JavaNCSSCheckTest . java " <nl> - lines = " 41 " / > <nl> + lines = " 42 " / > <nl> <nl> < ! - - illegal words are part of Javadoc - - > <nl> < suppress checks = " TodoComment " files = " . * TodoCommentCheck \ . java " / > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 2659ec8 . . 806a1c1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 517 , 18 + 517 , 18 @ @ public class MainTest { <nl> <nl> / / we just reference there all violations <nl> final String [ ] [ ] outputValues = { <nl> - { " JavaNCSSCheckTestInput " , " 1 " , " 84 " } , <nl> + { " ComplexityOverflow " , " 1 " , " 172 " } , <nl> } ; <nl> <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override public void checkAssertion ( ) throws IOException { <nl> String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / " <nl> + + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " <nl> . replace ( " / " , File . separator ) ; <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> - String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 80 ) . " ; <nl> + String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; <nl> for ( String [ ] outputValue : outputValues ) { <nl> String line = String . format ( Locale . ROOT , format , <nl> expectedPath + outputValue [ 0 ] , outputValue [ 1 ] , <nl> @ @ - 542 , 7 + 542 , 7 @ @ public class MainTest { <nl> } ) ; <nl> <nl> Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / metrics / " ) ; <nl> + " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java <nl> index 86dfd99 . . 7c270ea 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java <nl> @ @ - 22 , 17 + 22 , 25 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> import static com . puppycrawl . tools . checkstyle . checks . metrics . BooleanExpressionComplexityCheck . MSG _ KEY ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> import antlr . CommonHiddenStreamToken ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class BooleanExpressionComplexityCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " metrics " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void test ( ) throws Exception { <nl> DefaultConfiguration checkConfig = <nl> @ @ - 45 , 7 + 53 , 7 @ @ public class BooleanExpressionComplexityCheckTest extends BaseCheckTestSupport { <nl> " 40 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " metrics " + File . separator + " BooleanExpressionComplexityCheckTestInput . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " BooleanExpressionComplexityCheckTestInput . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 57 , 7 + 65 , 7 @ @ public class BooleanExpressionComplexityCheckTest extends BaseCheckTestSupport { <nl> <nl> String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checkConfig , getPath ( " metrics " + File . separator + " BooleanExpressionComplexityCheckTestInput . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " BooleanExpressionComplexityCheckTestInput . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 67 , 7 + 75 , 7 @ @ public class BooleanExpressionComplexityCheckTest extends BaseCheckTestSupport { <nl> <nl> String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checkConfig , getPath ( " metrics " + File . separator + " InputBooleanExpressionComplexityNPE . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputBooleanExpressionComplexityNPE . java " ) , expected ) ; <nl> } <nl> <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> index 35625d6 . . d6228f2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> @ @ - 22 , 17 + 22 , 25 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassDataAbstractionCouplingCheck . MSG _ KEY ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> import antlr . CommonHiddenStreamToken ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " metrics " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void test ( ) throws Exception { <nl> DefaultConfiguration checkConfig = <nl> @ @ - 47 , 9 + 55 , 7 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport <nl> " 27 : 1 : " + getCheckMessage ( MSG _ KEY , 2 , 0 , " [ HashMap , HashSet ] " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , <nl> - getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , <nl> - expected ) ; <nl> + verify ( checkConfig , getPath ( " ClassCouplingCheckTestInput . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 59 , 9 + 65 , 7 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport <nl> String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> createChecker ( checkConfig ) ; <nl> - verify ( checkConfig , <nl> - getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , <nl> - expected ) ; <nl> + verify ( checkConfig , getPath ( " ClassCouplingCheckTestInput . java " ) , expected ) ; <nl> } <nl> <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> index f8a1d61 . . a2979db 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> @ @ - 44 , 7 + 44 , 8 @ @ public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , <nl> + getPath ( " checks " + File . separator <nl> + + " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 67 , 7 + 68 , 8 @ @ public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { <nl> <nl> createChecker ( checkConfig ) ; <nl> verify ( checkConfig , <nl> - getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , <nl> + getPath ( " checks " + File . separator <nl> + + " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , <nl> expected ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java <nl> index c58e981 . . 5108f65 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java <nl> @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . metrics . CyclomaticComplexityCheck . MSG _ KEY ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 30 , 6 + 33 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class CyclomaticComplexityCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " metrics " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testSwitchBlockAsSingleDecisionPointSetToTrue ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> @ @ - 41 , 7 + 50 , 7 @ @ public class CyclomaticComplexityCheckTest <nl> " 4 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " metrics / ComplexityCheckSwitchBlocksTestInput . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " ComplexityCheckSwitchBlocksTestInput . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 55 , 7 + 64 , 7 @ @ public class CyclomaticComplexityCheckTest <nl> " 4 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " metrics / ComplexityCheckSwitchBlocksTestInput . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " ComplexityCheckSwitchBlocksTestInput . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java <nl> index bc9f303 . . ea9a8e5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . metrics . JavaNCSSCheck . MSG _ F <nl> import static com . puppycrawl . tools . checkstyle . checks . metrics . JavaNCSSCheck . MSG _ METHOD ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> @ @ - 39 , 6 + 40 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * @ author Lars K ö dderitzsch <nl> * / <nl> public class JavaNCSSCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " metrics " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void test ( ) throws Exception { <nl> @ @ - 64 , 8 + 70 , 7 @ @ public class JavaNCSSCheckTest extends BaseCheckTestSupport { <nl> " 83 : 5 : " + getCheckMessage ( MSG _ METHOD , 1 , 0 ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " metrics " + File . separator <nl> - + " JavaNCSSCheckTestInput . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " JavaNCSSCheckTestInput . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 74 , 8 + 79 , 7 @ @ public class JavaNCSSCheckTest extends BaseCheckTestSupport { <nl> String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> createChecker ( checkConfig ) ; <nl> - verify ( checkConfig , getPath ( " metrics " + File . separator <nl> - + " JavaNCSSCheckTestInput . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " JavaNCSSCheckTestInput . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> index e917752 . . 9f1cad2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> @ @ - 21 , 17 + 21 , 27 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . metrics . NPathComplexityCheck . MSG _ KEY ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> import antlr . CommonHiddenStreamToken ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class NPathComplexityCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " metrics " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testCalculation ( ) throws Exception { <nl> DefaultConfiguration checkConfig = <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ComplexityCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ComplexityCheckTestInput . java <nl> deleted file mode 100644 <nl> index da054e6 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / ComplexityCheckTestInput . java <nl> + + + / dev / null <nl> @ @ - 1 , 86 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - public class ComplexityCheckTestInput { <nl> - public void foo ( ) { <nl> - while ( true ) { <nl> - Runnable runnable = new Runnable ( ) { <nl> - public void run ( ) { <nl> - while ( true ) { <nl> - } <nl> - } <nl> - } ; <nl> - <nl> - new Thread ( runnable ) . start ( ) ; <nl> - } <nl> - } <nl> - <nl> - public void bar ( ) { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - <nl> - if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - } <nl> - } <nl> - <nl> - public void simpleElseIf ( ) { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - public void stupidElseIf ( ) { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - } <nl> - <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - } <nl> - } <nl> - <nl> - public ComplexityCheckTestInput ( ) <nl> - { <nl> - int i = 1 ; <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - / / STATIC _ INIT <nl> - static { <nl> - int i = 1 ; <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - / / INSTANCE _ INIT <nl> - { <nl> - int i = 1 ; <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - / * * Inner * / <nl> - public ComplexityCheckTestInput ( int aParam ) <nl> - { <nl> - Runnable runnable = new Runnable ( ) { <nl> - public void run ( ) { <nl> - while ( true ) { <nl> - } <nl> - } <nl> - } ; <nl> - new Thread ( runnable ) . start ( ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ComplexityOverflow . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ComplexityOverflow . java <nl> deleted file mode 100644 <nl> index c55a998 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / ComplexityOverflow . java <nl> + + + / dev / null <nl> @ @ - 1 , 172 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - / * * <nl> - * This class has methods that have an NPath complexity larger than MAXINT . <nl> - * Test case for bug 1654769 . <nl> - * / <nl> - public class ComplexityOverflow { <nl> - <nl> - public void provokeNpathIntegerOverflow ( ) <nl> - { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTestInput . java <nl> new file mode 100644 <nl> index 0000000 . . c7ce206 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTestInput . java <nl> @ @ - 0 , 0 + 1 , 71 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> + <nl> + public class BooleanExpressionComplexityCheckTestInput { <nl> + private boolean _ a = false ; / / boolean field <nl> + private boolean _ b = false ; <nl> + private boolean _ c = false ; <nl> + private boolean _ d = false ; <nl> + / * public method * / <nl> + public void foo ( ) { <nl> + if ( _ a & & _ b | | _ c ^ _ d ) { <nl> + } <nl> + <nl> + if ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) ) ) { <nl> + } <nl> + <nl> + if ( _ a & & _ b & & _ c ) { <nl> + } <nl> + <nl> + if ( _ a & _ b ) { <nl> + } <nl> + <nl> + if ( _ a ) { <nl> + } <nl> + } <nl> + <nl> + public boolean equals ( Object object ) { <nl> + return ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) | | ( _ a & & _ d ) ) ) ; <nl> + } <nl> + <nl> + public boolean bitwise ( ) <nl> + { <nl> + return ( ( ( _ a & ( _ b & _ c ) ) | ( _ c ^ _ d ) | ( _ a & _ d ) ) ) ; <nl> + } <nl> + <nl> + public void notIgnoredMethodParameters ( ) <nl> + { <nl> + new Settings ( Settings . FALSE & & Settings . FALSE & & Settings . FALSE <nl> + & & Settings . TRUE & & Settings . TRUE ) ; <nl> + new Settings ( Settings . FALSE | | Settings . FALSE | | Settings . FALSE <nl> + | | Settings . TRUE | | Settings . TRUE ) ; <nl> + } <nl> + <nl> + public void ignoredMethodParameters ( ) <nl> + { <nl> + new Settings ( Settings . RESIZABLE | Settings . SCROLLBARS | Settings . LOCATION _ BAR <nl> + | Settings . MENU _ BAR | Settings . TOOL _ BAR ) ; <nl> + new Settings ( Settings . RESIZABLE & Settings . SCROLLBARS & Settings . LOCATION _ BAR <nl> + & Settings . MENU _ BAR & Settings . TOOL _ BAR ) ; <nl> + new Settings ( Settings . RESIZABLE ^ Settings . SCROLLBARS ^ Settings . LOCATION _ BAR <nl> + ^ Settings . MENU _ BAR ^ Settings . TOOL _ BAR ) ; <nl> + } <nl> + <nl> + private class Settings { <nl> + public final static int RESIZABLE = 1 ; <nl> + public final static int SCROLLBARS = 2 ; <nl> + public final static int LOCATION _ BAR = 3 ; <nl> + public final static int MENU _ BAR = 4 ; <nl> + public final static int TOOL _ BAR = 5 ; <nl> + <nl> + public final static boolean TRUE = true ; <nl> + public final static boolean FALSE = false ; <nl> + <nl> + public Settings ( int flag ) <nl> + { <nl> + } <nl> + <nl> + public Settings ( boolean flag ) <nl> + { <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ClassCouplingCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ClassCouplingCheckTestInput . java <nl> new file mode 100644 <nl> index 0000000 . . a5a4031 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ClassCouplingCheckTestInput . java <nl> @ @ - 0 , 0 + 1 , 43 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> + <nl> + import javax . naming . * ; <nl> + import java . util . * ; <nl> + <nl> + public class ClassCouplingCheckTestInput { <nl> + private class InnerClass { / / singleline comment <nl> + public List _ list = new ArrayList ( ) ; <nl> + } <nl> + <nl> + private class AnotherInnerClass { <nl> + public String _ string = " " ; <nl> + } <nl> + <nl> + public Set _ set = / * block comment * / new HashSet ( ) ; <nl> + public Map _ map = new HashMap ( ) ; <nl> + public String _ string = " " ; <nl> + public int [ ] _ intArray = new int [ 0 ] ; <nl> + public InnerClass _ innerClass = new InnerClass ( ) ; <nl> + public AnotherInnerClass _ anotherInnerClass = new AnotherInnerClass ( ) ; <nl> + <nl> + public void foo ( ) throws NamingException { <nl> + } <nl> + <nl> + } <nl> + <nl> + enum InnerEnum { <nl> + VALUE1 ; <nl> + <nl> + private InnerEnum ( ) <nl> + { <nl> + map2 = new HashMap ( ) ; <nl> + } <nl> + private Set map1 = new HashSet ( ) ; <nl> + private Map map2 ; <nl> + } <nl> + <nl> + class InputThrows { <nl> + <nl> + public void get ( ) throws NamingException , IllegalArgumentException { <nl> + new java . lang . ref . ReferenceQueue < Integer > ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityCheckSwitchBlocksTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityCheckSwitchBlocksTestInput . java <nl> new file mode 100644 <nl> index 0000000 . . 982499e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityCheckSwitchBlocksTestInput . java <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> + <nl> + public class ComplexityCheckSwitchBlocksTestInput { <nl> + public void foo2 ( ) { <nl> + String programmingLanguage = " Java " ; <nl> + switch ( programmingLanguage ) { <nl> + case " Java " : <nl> + case " C # " : <nl> + case " C + + " : <nl> + System . out . printf ( programmingLanguage + " is an object oriented programming language . " ) ; <nl> + break ; <nl> + case " C " : <nl> + System . out . printf ( programmingLanguage + " is not an object oriented programming language . " ) ; <nl> + break ; <nl> + default : <nl> + System . out . printf ( programmingLanguage + " is unknown language . " ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityCheckTestInput . java <nl> new file mode 100644 <nl> index 0000000 . . 88698f6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityCheckTestInput . java <nl> @ @ - 0 , 0 + 1 , 86 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> + <nl> + public class ComplexityCheckTestInput { <nl> + public void foo ( ) { <nl> + while ( true ) { <nl> + Runnable runnable = new Runnable ( ) { <nl> + public void run ( ) { <nl> + while ( true ) { <nl> + } <nl> + } <nl> + } ; <nl> + <nl> + new Thread ( runnable ) . start ( ) ; <nl> + } <nl> + } <nl> + <nl> + public void bar ( ) { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + <nl> + if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + public void simpleElseIf ( ) { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + public void stupidElseIf ( ) { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + } <nl> + <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + public ComplexityCheckTestInput ( ) <nl> + { <nl> + int i = 1 ; <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + / / STATIC _ INIT <nl> + static { <nl> + int i = 1 ; <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + / / INSTANCE _ INIT <nl> + { <nl> + int i = 1 ; <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + / * * Inner * / <nl> + public ComplexityCheckTestInput ( int aParam ) <nl> + { <nl> + Runnable runnable = new Runnable ( ) { <nl> + public void run ( ) { <nl> + while ( true ) { <nl> + } <nl> + } <nl> + } ; <nl> + new Thread ( runnable ) . start ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityOverflow . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityOverflow . java <nl> new file mode 100644 <nl> index 0000000 . . 7a25280 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityOverflow . java <nl> @ @ - 0 , 0 + 1 , 172 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> + <nl> + / * * <nl> + * This class has methods that have an NPath complexity larger than MAXINT . <nl> + * Test case for bug 1654769 . <nl> + * / <nl> + public class ComplexityOverflow { <nl> + <nl> + public void provokeNpathIntegerOverflow ( ) <nl> + { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexityNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexityNPE . java <nl> new file mode 100644 <nl> index 0000000 . . f7c5887 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexityNPE . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> + <nl> + public class InputBooleanExpressionComplexityNPE <nl> + { <nl> + static { <nl> + try { <nl> + System . out . println ( " a " ) ; <nl> + } catch ( IllegalStateException | IllegalArgumentException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTestInput . java <nl> new file mode 100644 <nl> index 0000000 . . cc66682 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTestInput . java <nl> @ @ - 0 , 0 + 1 , 84 @ @ <nl> + / / should give an ncss of 35 <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> + <nl> + import java . awt . event . ItemEvent ; <nl> + import java . awt . event . ItemListener ; <nl> + <nl> + <nl> + / / should give an ncss of 22 <nl> + public class JavaNCSSCheckTestInput { <nl> + <nl> + private Object mObject ; <nl> + <nl> + / / should count as 2 <nl> + private void testMethod1 ( ) { <nl> + <nl> + / / should count as 1 <nl> + int x = 1 , y = 2 ; <nl> + } <nl> + <nl> + / / should count as 4 <nl> + private void testMethod2 ( ) { <nl> + <nl> + int abc = 0 ; <nl> + <nl> + / / should count as 2 <nl> + testLabel : abc = 1 ; <nl> + } <nl> + <nl> + / / should give an ncss of 12 <nl> + private void testMethod3 ( ) { <nl> + <nl> + int a = 0 ; <nl> + switch ( a ) { <nl> + case 1 : / / falls through <nl> + case 2 : System . out . println ( " Hello " ) ; break ; <nl> + default : break ; <nl> + } <nl> + <nl> + ItemListener lis = new ItemListener ( ) { <nl> + <nl> + / / should give an ncss of 2 <nl> + public void itemStateChanged ( ItemEvent e ) { <nl> + System . out . println ( " Hello " ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + / / should give an ncss of 2 <nl> + private class TestInnerClass { <nl> + <nl> + private Object test ; <nl> + } <nl> + } <nl> + <nl> + / / should give an ncss of 10 <nl> + class TestTopLevelNestedClass { <nl> + <nl> + private Object mObject ; <nl> + <nl> + / / should give an ncss of 8 <nl> + private void testMethod ( ) { <nl> + <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + <nl> + if ( i = = 0 ) { <nl> + <nl> + / / should count as 1 <nl> + int x = 1 , y = 2 ; <nl> + } <nl> + else { <nl> + int abc = 0 ; <nl> + <nl> + / / should count as 2 <nl> + testLabel : abc = 1 ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + class Input0 { <nl> + static { } <nl> + { } <nl> + public Input0 ( ) { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml <nl> index 0244eb0 . . b89f315 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml <nl> @ @ - 6 , 7 + 6 , 7 @ @ <nl> <nl> < module name = " Checker " > <nl> < module name = " FileLength " > <nl> - < property name = " max " value = " 80 " / > <nl> + < property name = " max " value = " 170 " / > <nl> < property name = " severity " value = " warning " / > <nl> < / module > <nl> < / module > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java <nl> deleted file mode 100644 <nl> index 4aaab6d . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java <nl> + + + / dev / null <nl> @ @ - 1 , 71 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . metrics ; <nl> - <nl> - public class BooleanExpressionComplexityCheckTestInput { <nl> - private boolean _ a = false ; / / boolean field <nl> - private boolean _ b = false ; <nl> - private boolean _ c = false ; <nl> - private boolean _ d = false ; <nl> - / * public method * / <nl> - public void foo ( ) { <nl> - if ( _ a & & _ b | | _ c ^ _ d ) { <nl> - } <nl> - <nl> - if ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) ) ) { <nl> - } <nl> - <nl> - if ( _ a & & _ b & & _ c ) { <nl> - } <nl> - <nl> - if ( _ a & _ b ) { <nl> - } <nl> - <nl> - if ( _ a ) { <nl> - } <nl> - } <nl> - <nl> - public boolean equals ( Object object ) { <nl> - return ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) | | ( _ a & & _ d ) ) ) ; <nl> - } <nl> - <nl> - public boolean bitwise ( ) <nl> - { <nl> - return ( ( ( _ a & ( _ b & _ c ) ) | ( _ c ^ _ d ) | ( _ a & _ d ) ) ) ; <nl> - } <nl> - <nl> - public void notIgnoredMethodParameters ( ) <nl> - { <nl> - new Settings ( Settings . FALSE & & Settings . FALSE & & Settings . FALSE <nl> - & & Settings . TRUE & & Settings . TRUE ) ; <nl> - new Settings ( Settings . FALSE | | Settings . FALSE | | Settings . FALSE <nl> - | | Settings . TRUE | | Settings . TRUE ) ; <nl> - } <nl> - <nl> - public void ignoredMethodParameters ( ) <nl> - { <nl> - new Settings ( Settings . RESIZABLE | Settings . SCROLLBARS | Settings . LOCATION _ BAR <nl> - | Settings . MENU _ BAR | Settings . TOOL _ BAR ) ; <nl> - new Settings ( Settings . RESIZABLE & Settings . SCROLLBARS & Settings . LOCATION _ BAR <nl> - & Settings . MENU _ BAR & Settings . TOOL _ BAR ) ; <nl> - new Settings ( Settings . RESIZABLE ^ Settings . SCROLLBARS ^ Settings . LOCATION _ BAR <nl> - ^ Settings . MENU _ BAR ^ Settings . TOOL _ BAR ) ; <nl> - } <nl> - <nl> - private class Settings { <nl> - public final static int RESIZABLE = 1 ; <nl> - public final static int SCROLLBARS = 2 ; <nl> - public final static int LOCATION _ BAR = 3 ; <nl> - public final static int MENU _ BAR = 4 ; <nl> - public final static int TOOL _ BAR = 5 ; <nl> - <nl> - public final static boolean TRUE = true ; <nl> - public final static boolean FALSE = false ; <nl> - <nl> - public Settings ( int flag ) <nl> - { <nl> - } <nl> - <nl> - public Settings ( boolean flag ) <nl> - { <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ClassCouplingCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ClassCouplingCheckTestInput . java <nl> deleted file mode 100644 <nl> index 27bd97c . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ClassCouplingCheckTestInput . java <nl> + + + / dev / null <nl> @ @ - 1 , 43 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . metrics ; <nl> - <nl> - import javax . naming . * ; <nl> - import java . util . * ; <nl> - <nl> - public class ClassCouplingCheckTestInput { <nl> - private class InnerClass { / / singleline comment <nl> - public List _ list = new ArrayList ( ) ; <nl> - } <nl> - <nl> - private class AnotherInnerClass { <nl> - public String _ string = " " ; <nl> - } <nl> - <nl> - public Set _ set = / * block comment * / new HashSet ( ) ; <nl> - public Map _ map = new HashMap ( ) ; <nl> - public String _ string = " " ; <nl> - public int [ ] _ intArray = new int [ 0 ] ; <nl> - public InnerClass _ innerClass = new InnerClass ( ) ; <nl> - public AnotherInnerClass _ anotherInnerClass = new AnotherInnerClass ( ) ; <nl> - <nl> - public void foo ( ) throws NamingException { <nl> - } <nl> - <nl> - } <nl> - <nl> - enum InnerEnum { <nl> - VALUE1 ; <nl> - <nl> - private InnerEnum ( ) <nl> - { <nl> - map2 = new HashMap ( ) ; <nl> - } <nl> - private Set map1 = new HashSet ( ) ; <nl> - private Map map2 ; <nl> - } <nl> - <nl> - class InputThrows { <nl> - <nl> - public void get ( ) throws NamingException , IllegalArgumentException { <nl> - new java . lang . ref . ReferenceQueue < Integer > ( ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ComplexityCheckSwitchBlocksTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ComplexityCheckSwitchBlocksTestInput . java <nl> deleted file mode 100644 <nl> index a3be8a4 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ComplexityCheckSwitchBlocksTestInput . java <nl> + + + / dev / null <nl> @ @ - 1 , 20 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . metrics ; <nl> - <nl> - public class ComplexityCheckSwitchBlocksTestInput { <nl> - public void foo2 ( ) { <nl> - String programmingLanguage = " Java " ; <nl> - switch ( programmingLanguage ) { <nl> - case " Java " : <nl> - case " C # " : <nl> - case " C + + " : <nl> - System . out . printf ( programmingLanguage + " is an object oriented programming language . " ) ; <nl> - break ; <nl> - case " C " : <nl> - System . out . printf ( programmingLanguage + " is not an object oriented programming language . " ) ; <nl> - break ; <nl> - default : <nl> - System . out . printf ( programmingLanguage + " is unknown language . " ) ; <nl> - break ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / InputBooleanExpressionComplexityNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / InputBooleanExpressionComplexityNPE . java <nl> deleted file mode 100644 <nl> index 6ca72ff . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / InputBooleanExpressionComplexityNPE . java <nl> + + + / dev / null <nl> @ @ - 1 , 12 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . metrics ; <nl> - <nl> - public class InputBooleanExpressionComplexityNPE <nl> - { <nl> - static { <nl> - try { <nl> - System . out . println ( " a " ) ; <nl> - } catch ( IllegalStateException | IllegalArgumentException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / JavaNCSSCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / JavaNCSSCheckTestInput . java <nl> deleted file mode 100644 <nl> index db705be . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / JavaNCSSCheckTestInput . java <nl> + + + / dev / null <nl> @ @ - 1 , 84 + 0 , 0 @ @ <nl> - / / should give an ncss of 35 <nl> - package com . puppycrawl . tools . checkstyle . metrics ; <nl> - <nl> - import java . awt . event . ItemEvent ; <nl> - import java . awt . event . ItemListener ; <nl> - <nl> - <nl> - / / should give an ncss of 22 <nl> - public class JavaNCSSCheckTestInput { <nl> - <nl> - private Object mObject ; <nl> - <nl> - / / should count as 2 <nl> - private void testMethod1 ( ) { <nl> - <nl> - / / should count as 1 <nl> - int x = 1 , y = 2 ; <nl> - } <nl> - <nl> - / / should count as 4 <nl> - private void testMethod2 ( ) { <nl> - <nl> - int abc = 0 ; <nl> - <nl> - / / should count as 2 <nl> - testLabel : abc = 1 ; <nl> - } <nl> - <nl> - / / should give an ncss of 12 <nl> - private void testMethod3 ( ) { <nl> - <nl> - int a = 0 ; <nl> - switch ( a ) { <nl> - case 1 : / / falls through <nl> - case 2 : System . out . println ( " Hello " ) ; break ; <nl> - default : break ; <nl> - } <nl> - <nl> - ItemListener lis = new ItemListener ( ) { <nl> - <nl> - / / should give an ncss of 2 <nl> - public void itemStateChanged ( ItemEvent e ) { <nl> - System . out . println ( " Hello " ) ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - / / should give an ncss of 2 <nl> - private class TestInnerClass { <nl> - <nl> - private Object test ; <nl> - } <nl> - } <nl> - <nl> - / / should give an ncss of 10 <nl> - class TestTopLevelNestedClass { <nl> - <nl> - private Object mObject ; <nl> - <nl> - / / should give an ncss of 8 <nl> - private void testMethod ( ) { <nl> - <nl> - for ( int i = 0 ; i < 10 ; i + + ) { <nl> - <nl> - if ( i = = 0 ) { <nl> - <nl> - / / should count as 1 <nl> - int x = 1 , y = 2 ; <nl> - } <nl> - else { <nl> - int abc = 0 ; <nl> - <nl> - / / should count as 2 <nl> - testLabel : abc = 1 ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> - class Input0 { <nl> - static { } <nl> - { } <nl> - public Input0 ( ) { } <nl> - }

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 322b0a2 . . edc8052 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 37 , 7 + 37 , 7 @ @ 
 files = " AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java " / > 
 
 < ! - - Tone down the checking for test code - - > 
 - < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 333 " / > 
 + < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 325 " / > 
 < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > 
 < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 < suppress checks = " Javadoc " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java 
 index ef3d055 . . 81d0383 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java 
 @ @ - 19 , 10 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . checks . DescendantTokenCheck ; 
 - import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 
 / * * 
 * < p > 
 @ @ - 38 , 7 + 37 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 * 
 * @ author o _ sukhodolsky 
 * / 
 - public class MissingCtorCheck extends DescendantTokenCheck { 
 + public class MissingCtorCheck extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 46 , 14 + 45 , 6 @ @ public class MissingCtorCheck extends DescendantTokenCheck { 
 * / 
 public static final String MSG _ KEY = " missing . ctor " ; 
 
 - / * * Creates new instance of the check . * / 
 - public MissingCtorCheck ( ) { 
 - setLimitedTokens ( TokenUtils . getTokenName ( TokenTypes . CTOR _ DEF ) ) ; 
 - setMinimumNumber ( 1 ) ; 
 - setMaximumDepth ( 2 ) ; 
 - setMinimumMessage ( MSG _ KEY ) ; 
 - } 
 - 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 return new int [ ] { TokenTypes . CLASS _ DEF } ; 
 @ @ - 72 , 8 + 63 , 10 @ @ public class MissingCtorCheck extends DescendantTokenCheck { 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - if ( ! modifiers . branchContains ( TokenTypes . ABSTRACT ) ) { 
 - super . visitToken ( ast ) ; 
 + if ( ! modifiers . branchContains ( TokenTypes . ABSTRACT ) 
 + & & ast . findFirstToken ( TokenTypes . OBJBLOCK ) 
 + . findFirstToken ( TokenTypes . CTOR _ DEF ) = = null ) { 
 + log ( ast . getLineNo ( ) , MSG _ KEY ) ; 
 } 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 index cda73be . . 965724d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 @ @ - 131 , 14 + 131 , 6 @ @ public class XDocsPagesTest { 
 " TypeNameCheck . compileFlags " , 
 " RegexpCheck . compileFlags " , 
 " SuppressionCommentFilter . fileContents " , 
 - " MissingCtorCheck . limitedTokens " , 
 - " MissingCtorCheck . maximumDepth " , 
 - " MissingCtorCheck . maximumMessage " , 
 - " MissingCtorCheck . maximumNumber " , 
 - " MissingCtorCheck . minimumDepth " , 
 - " MissingCtorCheck . minimumMessage " , 
 - " MissingCtorCheck . minimumNumber " , 
 - " MissingCtorCheck . sumTokenCounts " , 
 " MethodNameCheck . applyToPackage " , 
 " MethodNameCheck . applyToPrivate " , 
 " MethodNameCheck . applyToProtected " , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheckTest . java 
 index 21ae13c . . 5f38a54 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheckTest . java 
 @ @ - 43 , 7 + 43 , 7 @ @ public class MissingCtorCheckTest extends BaseCheckTestSupport { 
 createCheckConfig ( MissingCtorCheck . class ) ; 
 
 final String [ ] expected = { 
 - " 3 : 1 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 3 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 
 verify ( checkConfig ,

NEAREST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index fad922a . . a9e4085 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 16 , 7 + 16 , 7 @ @ 
 < ! - - test should be named as their main class - - > 
 < suppress checks = " AbbreviationAsWordInName " 
 files = " JavaNCSSCheckTest . java " 
 - lines = " 41 " / > 
 + lines = " 42 " / > 
 
 < ! - - illegal words are part of Javadoc - - > 
 < suppress checks = " TodoComment " files = " . * TodoCommentCheck \ . java " / > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 2659ec8 . . 806a1c1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 517 , 18 + 517 , 18 @ @ public class MainTest { 
 
 / / we just reference there all violations 
 final String [ ] [ ] outputValues = { 
 - { " JavaNCSSCheckTestInput " , " 1 " , " 84 " } , 
 + { " ComplexityOverflow " , " 1 " , " 172 " } , 
 } ; 
 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override public void checkAssertion ( ) throws IOException { 
 String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / " 
 + + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " 
 . replace ( " / " , File . separator ) ; 
 StringBuilder sb = new StringBuilder ( ) ; 
 sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; 
 - String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 80 ) . " ; 
 + String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; 
 for ( String [ ] outputValue : outputValues ) { 
 String line = String . format ( Locale . ROOT , format , 
 expectedPath + outputValue [ 0 ] , outputValue [ 1 ] , 
 @ @ - 542 , 7 + 542 , 7 @ @ public class MainTest { 
 } ) ; 
 
 Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / metrics / " ) ; 
 + " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java 
 index 86dfd99 . . 7c270ea 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java 
 @ @ - 22 , 17 + 22 , 25 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 import static com . puppycrawl . tools . checkstyle . checks . metrics . BooleanExpressionComplexityCheck . MSG _ KEY ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 import antlr . CommonHiddenStreamToken ; 
 + 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class BooleanExpressionComplexityCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " metrics " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void test ( ) throws Exception { 
 DefaultConfiguration checkConfig = 
 @ @ - 45 , 7 + 53 , 7 @ @ public class BooleanExpressionComplexityCheckTest extends BaseCheckTestSupport { 
 " 40 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " metrics " + File . separator + " BooleanExpressionComplexityCheckTestInput . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " BooleanExpressionComplexityCheckTestInput . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 57 , 7 + 65 , 7 @ @ public class BooleanExpressionComplexityCheckTest extends BaseCheckTestSupport { 
 
 String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checkConfig , getPath ( " metrics " + File . separator + " BooleanExpressionComplexityCheckTestInput . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " BooleanExpressionComplexityCheckTestInput . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 67 , 7 + 75 , 7 @ @ public class BooleanExpressionComplexityCheckTest extends BaseCheckTestSupport { 
 
 String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checkConfig , getPath ( " metrics " + File . separator + " InputBooleanExpressionComplexityNPE . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputBooleanExpressionComplexityNPE . java " ) , expected ) ; 
 } 
 
 @ Test ( expected = IllegalArgumentException . class ) 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 index 35625d6 . . d6228f2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 @ @ - 22 , 17 + 22 , 25 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassDataAbstractionCouplingCheck . MSG _ KEY ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 import antlr . CommonHiddenStreamToken ; 
 + 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " metrics " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void test ( ) throws Exception { 
 DefaultConfiguration checkConfig = 
 @ @ - 47 , 9 + 55 , 7 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport 
 " 27 : 1 : " + getCheckMessage ( MSG _ KEY , 2 , 0 , " [ HashMap , HashSet ] " ) , 
 } ; 
 
 - verify ( checkConfig , 
 - getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , 
 - expected ) ; 
 + verify ( checkConfig , getPath ( " ClassCouplingCheckTestInput . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 59 , 9 + 65 , 7 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport 
 String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 createChecker ( checkConfig ) ; 
 - verify ( checkConfig , 
 - getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , 
 - expected ) ; 
 + verify ( checkConfig , getPath ( " ClassCouplingCheckTestInput . java " ) , expected ) ; 
 } 
 
 @ Test ( expected = IllegalArgumentException . class ) 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 index f8a1d61 . . a2979db 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 @ @ - 44 , 7 + 44 , 8 @ @ public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , 
 + getPath ( " checks " + File . separator 
 + + " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 67 , 7 + 68 , 8 @ @ public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { 
 
 createChecker ( checkConfig ) ; 
 verify ( checkConfig , 
 - getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , 
 + getPath ( " checks " + File . separator 
 + + " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , 
 expected ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java 
 index c58e981 . . 5108f65 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java 
 @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . metrics . CyclomaticComplexityCheck . MSG _ KEY ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 @ @ - 30 , 6 + 33 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class CyclomaticComplexityCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " metrics " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testSwitchBlockAsSingleDecisionPointSetToTrue ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 @ @ - 41 , 7 + 50 , 7 @ @ public class CyclomaticComplexityCheckTest 
 " 4 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " metrics / ComplexityCheckSwitchBlocksTestInput . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " ComplexityCheckSwitchBlocksTestInput . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 55 , 7 + 64 , 7 @ @ public class CyclomaticComplexityCheckTest 
 " 4 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " metrics / ComplexityCheckSwitchBlocksTestInput . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " ComplexityCheckSwitchBlocksTestInput . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java 
 index bc9f303 . . ea9a8e5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . metrics . JavaNCSSCheck . MSG _ F 
 import static com . puppycrawl . tools . checkstyle . checks . metrics . JavaNCSSCheck . MSG _ METHOD ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 @ @ - 39 , 6 + 40 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * @ author Lars K ö dderitzsch 
 * / 
 public class JavaNCSSCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " metrics " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void test ( ) throws Exception { 
 @ @ - 64 , 8 + 70 , 7 @ @ public class JavaNCSSCheckTest extends BaseCheckTestSupport { 
 " 83 : 5 : " + getCheckMessage ( MSG _ METHOD , 1 , 0 ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " metrics " + File . separator 
 - + " JavaNCSSCheckTestInput . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " JavaNCSSCheckTestInput . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 74 , 8 + 79 , 7 @ @ public class JavaNCSSCheckTest extends BaseCheckTestSupport { 
 String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 createChecker ( checkConfig ) ; 
 - verify ( checkConfig , getPath ( " metrics " + File . separator 
 - + " JavaNCSSCheckTestInput . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " JavaNCSSCheckTestInput . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 index e917752 . . 9f1cad2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 @ @ - 21 , 17 + 21 , 27 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . metrics . NPathComplexityCheck . MSG _ KEY ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 import antlr . CommonHiddenStreamToken ; 
 + 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class NPathComplexityCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " metrics " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testCalculation ( ) throws Exception { 
 DefaultConfiguration checkConfig = 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ComplexityCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ComplexityCheckTestInput . java 
 deleted file mode 100644 
 index da054e6 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / ComplexityCheckTestInput . java 
 + + + / dev / null 
 @ @ - 1 , 86 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - public class ComplexityCheckTestInput { 
 - public void foo ( ) { 
 - while ( true ) { 
 - Runnable runnable = new Runnable ( ) { 
 - public void run ( ) { 
 - while ( true ) { 
 - } 
 - } 
 - } ; 
 - 
 - new Thread ( runnable ) . start ( ) ; 
 - } 
 - } 
 - 
 - public void bar ( ) { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - 
 - if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - } 
 - } 
 - 
 - public void simpleElseIf ( ) { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - public void stupidElseIf ( ) { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - } 
 - 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - } 
 - } 
 - 
 - public ComplexityCheckTestInput ( ) 
 - { 
 - int i = 1 ; 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - / / STATIC _ INIT 
 - static { 
 - int i = 1 ; 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - / / INSTANCE _ INIT 
 - { 
 - int i = 1 ; 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - / * * Inner * / 
 - public ComplexityCheckTestInput ( int aParam ) 
 - { 
 - Runnable runnable = new Runnable ( ) { 
 - public void run ( ) { 
 - while ( true ) { 
 - } 
 - } 
 - } ; 
 - new Thread ( runnable ) . start ( ) ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ComplexityOverflow . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ComplexityOverflow . java 
 deleted file mode 100644 
 index c55a998 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / ComplexityOverflow . java 
 + + + / dev / null 
 @ @ - 1 , 172 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - / * * 
 - * This class has methods that have an NPath complexity larger than MAXINT . 
 - * Test case for bug 1654769 . 
 - * / 
 - public class ComplexityOverflow { 
 - 
 - public void provokeNpathIntegerOverflow ( ) 
 - { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTestInput . java 
 new file mode 100644 
 index 0000000 . . c7ce206 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTestInput . java 
 @ @ - 0 , 0 + 1 , 71 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 + 
 + public class BooleanExpressionComplexityCheckTestInput { 
 + private boolean _ a = false ; / / boolean field 
 + private boolean _ b = false ; 
 + private boolean _ c = false ; 
 + private boolean _ d = false ; 
 + / * public method * / 
 + public void foo ( ) { 
 + if ( _ a & & _ b | | _ c ^ _ d ) { 
 + } 
 + 
 + if ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) ) ) { 
 + } 
 + 
 + if ( _ a & & _ b & & _ c ) { 
 + } 
 + 
 + if ( _ a & _ b ) { 
 + } 
 + 
 + if ( _ a ) { 
 + } 
 + } 
 + 
 + public boolean equals ( Object object ) { 
 + return ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) | | ( _ a & & _ d ) ) ) ; 
 + } 
 + 
 + public boolean bitwise ( ) 
 + { 
 + return ( ( ( _ a & ( _ b & _ c ) ) | ( _ c ^ _ d ) | ( _ a & _ d ) ) ) ; 
 + } 
 + 
 + public void notIgnoredMethodParameters ( ) 
 + { 
 + new Settings ( Settings . FALSE & & Settings . FALSE & & Settings . FALSE 
 + & & Settings . TRUE & & Settings . TRUE ) ; 
 + new Settings ( Settings . FALSE | | Settings . FALSE | | Settings . FALSE 
 + | | Settings . TRUE | | Settings . TRUE ) ; 
 + } 
 + 
 + public void ignoredMethodParameters ( ) 
 + { 
 + new Settings ( Settings . RESIZABLE | Settings . SCROLLBARS | Settings . LOCATION _ BAR 
 + | Settings . MENU _ BAR | Settings . TOOL _ BAR ) ; 
 + new Settings ( Settings . RESIZABLE & Settings . SCROLLBARS & Settings . LOCATION _ BAR 
 + & Settings . MENU _ BAR & Settings . TOOL _ BAR ) ; 
 + new Settings ( Settings . RESIZABLE ^ Settings . SCROLLBARS ^ Settings . LOCATION _ BAR 
 + ^ Settings . MENU _ BAR ^ Settings . TOOL _ BAR ) ; 
 + } 
 + 
 + private class Settings { 
 + public final static int RESIZABLE = 1 ; 
 + public final static int SCROLLBARS = 2 ; 
 + public final static int LOCATION _ BAR = 3 ; 
 + public final static int MENU _ BAR = 4 ; 
 + public final static int TOOL _ BAR = 5 ; 
 + 
 + public final static boolean TRUE = true ; 
 + public final static boolean FALSE = false ; 
 + 
 + public Settings ( int flag ) 
 + { 
 + } 
 + 
 + public Settings ( boolean flag ) 
 + { 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ClassCouplingCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ClassCouplingCheckTestInput . java 
 new file mode 100644 
 index 0000000 . . a5a4031 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ClassCouplingCheckTestInput . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 + 
 + import javax . naming . * ; 
 + import java . util . * ; 
 + 
 + public class ClassCouplingCheckTestInput { 
 + private class InnerClass { / / singleline comment 
 + public List _ list = new ArrayList ( ) ; 
 + } 
 + 
 + private class AnotherInnerClass { 
 + public String _ string = " " ; 
 + } 
 + 
 + public Set _ set = / * block comment * / new HashSet ( ) ; 
 + public Map _ map = new HashMap ( ) ; 
 + public String _ string = " " ; 
 + public int [ ] _ intArray = new int [ 0 ] ; 
 + public InnerClass _ innerClass = new InnerClass ( ) ; 
 + public AnotherInnerClass _ anotherInnerClass = new AnotherInnerClass ( ) ; 
 + 
 + public void foo ( ) throws NamingException { 
 + } 
 + 
 + } 
 + 
 + enum InnerEnum { 
 + VALUE1 ; 
 + 
 + private InnerEnum ( ) 
 + { 
 + map2 = new HashMap ( ) ; 
 + } 
 + private Set map1 = new HashSet ( ) ; 
 + private Map map2 ; 
 + } 
 + 
 + class InputThrows { 
 + 
 + public void get ( ) throws NamingException , IllegalArgumentException { 
 + new java . lang . ref . ReferenceQueue < Integer > ( ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityCheckSwitchBlocksTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityCheckSwitchBlocksTestInput . java 
 new file mode 100644 
 index 0000000 . . 982499e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityCheckSwitchBlocksTestInput . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 + 
 + public class ComplexityCheckSwitchBlocksTestInput { 
 + public void foo2 ( ) { 
 + String programmingLanguage = " Java " ; 
 + switch ( programmingLanguage ) { 
 + case " Java " : 
 + case " C # " : 
 + case " C + + " : 
 + System . out . printf ( programmingLanguage + " is an object oriented programming language . " ) ; 
 + break ; 
 + case " C " : 
 + System . out . printf ( programmingLanguage + " is not an object oriented programming language . " ) ; 
 + break ; 
 + default : 
 + System . out . printf ( programmingLanguage + " is unknown language . " ) ; 
 + break ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityCheckTestInput . java 
 new file mode 100644 
 index 0000000 . . 88698f6 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityCheckTestInput . java 
 @ @ - 0 , 0 + 1 , 86 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 + 
 + public class ComplexityCheckTestInput { 
 + public void foo ( ) { 
 + while ( true ) { 
 + Runnable runnable = new Runnable ( ) { 
 + public void run ( ) { 
 + while ( true ) { 
 + } 
 + } 
 + } ; 
 + 
 + new Thread ( runnable ) . start ( ) ; 
 + } 
 + } 
 + 
 + public void bar ( ) { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + 
 + if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + } 
 + } 
 + 
 + public void simpleElseIf ( ) { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + public void stupidElseIf ( ) { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + } 
 + 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + } 
 + } 
 + 
 + public ComplexityCheckTestInput ( ) 
 + { 
 + int i = 1 ; 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + / / STATIC _ INIT 
 + static { 
 + int i = 1 ; 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + / / INSTANCE _ INIT 
 + { 
 + int i = 1 ; 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + / * * Inner * / 
 + public ComplexityCheckTestInput ( int aParam ) 
 + { 
 + Runnable runnable = new Runnable ( ) { 
 + public void run ( ) { 
 + while ( true ) { 
 + } 
 + } 
 + } ; 
 + new Thread ( runnable ) . start ( ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityOverflow . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityOverflow . java 
 new file mode 100644 
 index 0000000 . . 7a25280 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / ComplexityOverflow . java 
 @ @ - 0 , 0 + 1 , 172 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 + 
 + / * * 
 + * This class has methods that have an NPath complexity larger than MAXINT . 
 + * Test case for bug 1654769 . 
 + * / 
 + public class ComplexityOverflow { 
 + 
 + public void provokeNpathIntegerOverflow ( ) 
 + { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexityNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexityNPE . java 
 new file mode 100644 
 index 0000000 . . f7c5887 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexityNPE . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 + 
 + public class InputBooleanExpressionComplexityNPE 
 + { 
 + static { 
 + try { 
 + System . out . println ( " a " ) ; 
 + } catch ( IllegalStateException | IllegalArgumentException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTestInput . java 
 new file mode 100644 
 index 0000000 . . cc66682 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTestInput . java 
 @ @ - 0 , 0 + 1 , 84 @ @ 
 + / / should give an ncss of 35 
 + package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 + 
 + import java . awt . event . ItemEvent ; 
 + import java . awt . event . ItemListener ; 
 + 
 + 
 + / / should give an ncss of 22 
 + public class JavaNCSSCheckTestInput { 
 + 
 + private Object mObject ; 
 + 
 + / / should count as 2 
 + private void testMethod1 ( ) { 
 + 
 + / / should count as 1 
 + int x = 1 , y = 2 ; 
 + } 
 + 
 + / / should count as 4 
 + private void testMethod2 ( ) { 
 + 
 + int abc = 0 ; 
 + 
 + / / should count as 2 
 + testLabel : abc = 1 ; 
 + } 
 + 
 + / / should give an ncss of 12 
 + private void testMethod3 ( ) { 
 + 
 + int a = 0 ; 
 + switch ( a ) { 
 + case 1 : / / falls through 
 + case 2 : System . out . println ( " Hello " ) ; break ; 
 + default : break ; 
 + } 
 + 
 + ItemListener lis = new ItemListener ( ) { 
 + 
 + / / should give an ncss of 2 
 + public void itemStateChanged ( ItemEvent e ) { 
 + System . out . println ( " Hello " ) ; 
 + } 
 + } ; 
 + } 
 + 
 + / / should give an ncss of 2 
 + private class TestInnerClass { 
 + 
 + private Object test ; 
 + } 
 + } 
 + 
 + / / should give an ncss of 10 
 + class TestTopLevelNestedClass { 
 + 
 + private Object mObject ; 
 + 
 + / / should give an ncss of 8 
 + private void testMethod ( ) { 
 + 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + 
 + if ( i = = 0 ) { 
 + 
 + / / should count as 1 
 + int x = 1 , y = 2 ; 
 + } 
 + else { 
 + int abc = 0 ; 
 + 
 + / / should count as 2 
 + testLabel : abc = 1 ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + class Input0 { 
 + static { } 
 + { } 
 + public Input0 ( ) { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml 
 index 0244eb0 . . b89f315 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml 
 @ @ - 6 , 7 + 6 , 7 @ @ 
 
 < module name = " Checker " > 
 < module name = " FileLength " > 
 - < property name = " max " value = " 80 " / > 
 + < property name = " max " value = " 170 " / > 
 < property name = " severity " value = " warning " / > 
 < / module > 
 < / module > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java 
 deleted file mode 100644 
 index 4aaab6d . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java 
 + + + / dev / null 
 @ @ - 1 , 71 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . metrics ; 
 - 
 - public class BooleanExpressionComplexityCheckTestInput { 
 - private boolean _ a = false ; / / boolean field 
 - private boolean _ b = false ; 
 - private boolean _ c = false ; 
 - private boolean _ d = false ; 
 - / * public method * / 
 - public void foo ( ) { 
 - if ( _ a & & _ b | | _ c ^ _ d ) { 
 - } 
 - 
 - if ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) ) ) { 
 - } 
 - 
 - if ( _ a & & _ b & & _ c ) { 
 - } 
 - 
 - if ( _ a & _ b ) { 
 - } 
 - 
 - if ( _ a ) { 
 - } 
 - } 
 - 
 - public boolean equals ( Object object ) { 
 - return ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) | | ( _ a & & _ d ) ) ) ; 
 - } 
 - 
 - public boolean bitwise ( ) 
 - { 
 - return ( ( ( _ a & ( _ b & _ c ) ) | ( _ c ^ _ d ) | ( _ a & _ d ) ) ) ; 
 - } 
 - 
 - public void notIgnoredMethodParameters ( ) 
 - { 
 - new Settings ( Settings . FALSE & & Settings . FALSE & & Settings . FALSE 
 - & & Settings . TRUE & & Settings . TRUE ) ; 
 - new Settings ( Settings . FALSE | | Settings . FALSE | | Settings . FALSE 
 - | | Settings . TRUE | | Settings . TRUE ) ; 
 - } 
 - 
 - public void ignoredMethodParameters ( ) 
 - { 
 - new Settings ( Settings . RESIZABLE | Settings . SCROLLBARS | Settings . LOCATION _ BAR 
 - | Settings . MENU _ BAR | Settings . TOOL _ BAR ) ; 
 - new Settings ( Settings . RESIZABLE & Settings . SCROLLBARS & Settings . LOCATION _ BAR 
 - & Settings . MENU _ BAR & Settings . TOOL _ BAR ) ; 
 - new Settings ( Settings . RESIZABLE ^ Settings . SCROLLBARS ^ Settings . LOCATION _ BAR 
 - ^ Settings . MENU _ BAR ^ Settings . TOOL _ BAR ) ; 
 - } 
 - 
 - private class Settings { 
 - public final static int RESIZABLE = 1 ; 
 - public final static int SCROLLBARS = 2 ; 
 - public final static int LOCATION _ BAR = 3 ; 
 - public final static int MENU _ BAR = 4 ; 
 - public final static int TOOL _ BAR = 5 ; 
 - 
 - public final static boolean TRUE = true ; 
 - public final static boolean FALSE = false ; 
 - 
 - public Settings ( int flag ) 
 - { 
 - } 
 - 
 - public Settings ( boolean flag ) 
 - { 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ClassCouplingCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ClassCouplingCheckTestInput . java 
 deleted file mode 100644 
 index 27bd97c . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ClassCouplingCheckTestInput . java 
 + + + / dev / null 
 @ @ - 1 , 43 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . metrics ; 
 - 
 - import javax . naming . * ; 
 - import java . util . * ; 
 - 
 - public class ClassCouplingCheckTestInput { 
 - private class InnerClass { / / singleline comment 
 - public List _ list = new ArrayList ( ) ; 
 - } 
 - 
 - private class AnotherInnerClass { 
 - public String _ string = " " ; 
 - } 
 - 
 - public Set _ set = / * block comment * / new HashSet ( ) ; 
 - public Map _ map = new HashMap ( ) ; 
 - public String _ string = " " ; 
 - public int [ ] _ intArray = new int [ 0 ] ; 
 - public InnerClass _ innerClass = new InnerClass ( ) ; 
 - public AnotherInnerClass _ anotherInnerClass = new AnotherInnerClass ( ) ; 
 - 
 - public void foo ( ) throws NamingException { 
 - } 
 - 
 - } 
 - 
 - enum InnerEnum { 
 - VALUE1 ; 
 - 
 - private InnerEnum ( ) 
 - { 
 - map2 = new HashMap ( ) ; 
 - } 
 - private Set map1 = new HashSet ( ) ; 
 - private Map map2 ; 
 - } 
 - 
 - class InputThrows { 
 - 
 - public void get ( ) throws NamingException , IllegalArgumentException { 
 - new java . lang . ref . ReferenceQueue < Integer > ( ) ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ComplexityCheckSwitchBlocksTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ComplexityCheckSwitchBlocksTestInput . java 
 deleted file mode 100644 
 index a3be8a4 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ComplexityCheckSwitchBlocksTestInput . java 
 + + + / dev / null 
 @ @ - 1 , 20 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . metrics ; 
 - 
 - public class ComplexityCheckSwitchBlocksTestInput { 
 - public void foo2 ( ) { 
 - String programmingLanguage = " Java " ; 
 - switch ( programmingLanguage ) { 
 - case " Java " : 
 - case " C # " : 
 - case " C + + " : 
 - System . out . printf ( programmingLanguage + " is an object oriented programming language . " ) ; 
 - break ; 
 - case " C " : 
 - System . out . printf ( programmingLanguage + " is not an object oriented programming language . " ) ; 
 - break ; 
 - default : 
 - System . out . printf ( programmingLanguage + " is unknown language . " ) ; 
 - break ; 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / InputBooleanExpressionComplexityNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / InputBooleanExpressionComplexityNPE . java 
 deleted file mode 100644 
 index 6ca72ff . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / InputBooleanExpressionComplexityNPE . java 
 + + + / dev / null 
 @ @ - 1 , 12 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . metrics ; 
 - 
 - public class InputBooleanExpressionComplexityNPE 
 - { 
 - static { 
 - try { 
 - System . out . println ( " a " ) ; 
 - } catch ( IllegalStateException | IllegalArgumentException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / JavaNCSSCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / JavaNCSSCheckTestInput . java 
 deleted file mode 100644 
 index db705be . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / JavaNCSSCheckTestInput . java 
 + + + / dev / null 
 @ @ - 1 , 84 + 0 , 0 @ @ 
 - / / should give an ncss of 35 
 - package com . puppycrawl . tools . checkstyle . metrics ; 
 - 
 - import java . awt . event . ItemEvent ; 
 - import java . awt . event . ItemListener ; 
 - 
 - 
 - / / should give an ncss of 22 
 - public class JavaNCSSCheckTestInput { 
 - 
 - private Object mObject ; 
 - 
 - / / should count as 2 
 - private void testMethod1 ( ) { 
 - 
 - / / should count as 1 
 - int x = 1 , y = 2 ; 
 - } 
 - 
 - / / should count as 4 
 - private void testMethod2 ( ) { 
 - 
 - int abc = 0 ; 
 - 
 - / / should count as 2 
 - testLabel : abc = 1 ; 
 - } 
 - 
 - / / should give an ncss of 12 
 - private void testMethod3 ( ) { 
 - 
 - int a = 0 ; 
 - switch ( a ) { 
 - case 1 : / / falls through 
 - case 2 : System . out . println ( " Hello " ) ; break ; 
 - default : break ; 
 - } 
 - 
 - ItemListener lis = new ItemListener ( ) { 
 - 
 - / / should give an ncss of 2 
 - public void itemStateChanged ( ItemEvent e ) { 
 - System . out . println ( " Hello " ) ; 
 - } 
 - } ; 
 - } 
 - 
 - / / should give an ncss of 2 
 - private class TestInnerClass { 
 - 
 - private Object test ; 
 - } 
 - } 
 - 
 - / / should give an ncss of 10 
 - class TestTopLevelNestedClass { 
 - 
 - private Object mObject ; 
 - 
 - / / should give an ncss of 8 
 - private void testMethod ( ) { 
 - 
 - for ( int i = 0 ; i < 10 ; i + + ) { 
 - 
 - if ( i = = 0 ) { 
 - 
 - / / should count as 1 
 - int x = 1 , y = 2 ; 
 - } 
 - else { 
 - int abc = 0 ; 
 - 
 - / / should count as 2 
 - testLabel : abc = 1 ; 
 - } 
 - } 
 - } 
 - } 
 - 
 - class Input0 { 
 - static { } 
 - { } 
 - public Input0 ( ) { } 
 - }
