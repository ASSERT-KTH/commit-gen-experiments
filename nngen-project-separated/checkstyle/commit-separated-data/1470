BLEU SCORE: 0.024478224028345454

TEST MSG: Issue # 1031 : Improve documentation for CovariantEquals check
GENERATED MSG: example was added , description was extended to understand Cyclomatic Complexity clearly . # 637

TEST DIFF (one line): diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 44b1161 . . df4254a 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 130 , 13 + 130 , 50 @ @ String b = ( a = = null | | a . length & lt ; 1 ) ? null : a . substring ( 1 ) ; <nl> < section name = " CovariantEquals " > <nl> < subsection name = " Description " > <nl> < p > <nl> - Checks that classes that define a covariant < code > equals ( ) < / code > method also override method < code > equals ( java . lang . Object ) < / code > . Inspired by < a <nl> - href = " http : / / www . cs . nyu . edu / ~ lharris / papers / findbugsPaper . pdf " > Finding Bugs is Easy , chapter ' 2 . 3 . 1 Bad Covariant Definition of Equals ( Eq ) ' < / a > . <nl> + Checks that classes which define a covariant < code > equals ( ) < / code > method <nl> + also override method < code > equals ( Object ) < / code > . < br / > <nl> + Covariant < code > equals ( ) < / code > - method that is similar to < code > equals ( Object ) < / code > , <nl> + but with a covariant parameter type ( any subtype of Object ) . < br / > <nl> + < strong > Notice < / strong > : the enums are also checked , even <nl> + though they cannot override < code > equals ( Object ) < / code > . The reason is <nl> + to point out that implementing < code > equals ( ) < / code > in enums is considered an <nl> + awful practice : it may cause having two different enum values that are equal using <nl> + covariant enum method , and not equal when compared normally . <nl> < / p > <nl> <nl> < p > <nl> - Rationale : Mistakenly defining a covariant < code > equals ( ) < / code > method without overriding method < code > equals ( java . lang . Object ) < / code > can produce unexpected <nl> - runtime behaviour . <nl> + Inspired by < a href = " http : / / www . cs . nyu . edu / ~ lharris / papers / findbugsPaper . pdf " > <nl> + Finding Bugs is Easy , chapter ' 2 . 3 . 1 Bad Covariant Definition of Equals ( Eq ) ' < / a > : <nl> + < / p > <nl> + <nl> + < p > <nl> + Java classes may override the < code > equals ( Object ) < / code > method to define <nl> + a predicate for object equality . This method is used by many of the Java runtime <nl> + library classes ; for example , to implement generic containers . <nl> + < / p > <nl> + <nl> + < p > <nl> + Programmers sometimes mistakenly use the type of their class < code > Foo < / code > <nl> + as the type of the parameter to < code > equals ( ) < / code > : <nl> + < / p > <nl> + <nl> + < source > <nl> + public boolean equals ( Foo obj ) { . . . } <nl> + < / source > <nl> + <nl> + < p > <nl> + This covariant version of < code > equals ( ) < / code > does not override the version in the <nl> + < code > Object < / code > class , and it may lead to unexpected behavior at runtime , <nl> + especially if the class is used with one of the standard collection classes <nl> + which expect that the standard < code > equals ( Object ) < / code > method is overridden . <nl> + < / p > <nl> + <nl> + < p > <nl> + This kind of bug is not obvious because it looks correct , and in circumstances where <nl> + the class is accessed through the references of the class type ( rather than a supertype ) , <nl> + it will work correctly . However , the first time it is used in a container , <nl> + the behavior might be mysterious . For these reasons , this type of bug can elude <nl> + testing and code inspections . <nl> < / p > <nl> < / subsection > <nl> <nl> @ @ - 147 , 6 + 184 , 31 @ @ String b = ( a = = null | | a . length & lt ; 1 ) ? null : a . substring ( 1 ) ; <nl> < source > <nl> & lt ; module name = & quot ; CovariantEquals & quot ; / & gt ; <nl> < / source > <nl> + <nl> + < p > <nl> + For example : <nl> + < source > <nl> + class Test { <nl> + public boolean equals ( Test i ) { / / violation <nl> + return false ; <nl> + } <nl> + } <nl> + < / source > <nl> + < / p > <nl> + < p > <nl> + The same class without violations : <nl> + < source > <nl> + class Test { <nl> + public boolean equals ( Test i ) { / / no violation <nl> + return false ; <nl> + } <nl> + <nl> + public boolean equals ( Object i ) { <nl> + return false ; <nl> + } <nl> + } <nl> + < / source > <nl> + < / p > <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " >
NEAREST DIFF (one line): diff - - git a / README . md b / README . md <nl> index cb6ef17 . . 0eab2fa 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 5 , 9 + 5 , 8 @ @ <nl> [ ! [ ] [ sonar img ] ] [ sonar ] <nl> <nl> <nl> - Members chat : [ ! [ ] [ gitter img ] ] [ gitter ] <nl> - Public chat : [ ! [ ] [ gitter - public img ] ] [ gitter - public ] <nl> - <nl> + Organization Members chat : [ ! [ ] [ gitter img ] ] [ gitter ] <nl> + Contributors chat : [ ! [ https : / / gitter . im / checkstyle / checkstyle ] ( https : / / badges . gitter . im / Join % 20Chat . svg ) ] ( https : / / gitter . im / checkstyle / checkstyle ? utm _ source = badge & utm _ medium = badge & utm _ campaign = pr - badge & utm _ content = badge ) <nl> <nl> ! [ ] ( https : / / raw . githubusercontent . com / checkstyle / checkstyle / master / src / site / resources / images / logo . png ) <nl> <nl> @ @ - 27 , 6 + 26 , 8 @ @ Quality reports : http : / / checkstyle . sourceforge . net / project - reports . html <nl> Feedback / Support <nl> = = = = = = = = <nl> <nl> + [ ! [ https : / / gitter . im / checkstyle / checkstyle ] ( https : / / badges . gitter . im / Join % 20Chat . svg ) ] ( https : / / gitter . im / checkstyle / checkstyle ? utm _ source = badge & utm _ medium = badge & utm _ campaign = pr - badge & utm _ content = badge ) <nl> + <nl> Please send any feedback to https : / / groups . google . com / forum / ? hl = en # ! forum / checkstyle <nl> <nl> Questions and Answers from community : [ ! [ ] [ stackoverflow img ] ] [ stackoverflow ] <nl> @ @ - 79 , 8 + 80 , 8 @ @ directory . <nl> [ gitter ] : https : / / gitter . im / checkstyle <nl> [ gitter img ] : http : / / img . shields . io / badge / gitter - JOIN % 20CHAT - blue . svg <nl> <nl> - [ gitter - public ] : https : / / gitter . im / checkstyle / checkstyle <nl> - [ gitter - public img ] : https : / / badges . gitter . im / Join % 20Chat . svg ) <nl> + [ gitterpublic ] : https : / / gitter . im / checkstyle / checkstyle <nl> + [ gitterpublic img ] : https : / / badges . gitter . im / Join % 20Chat . svg ) <nl> <nl> [ stackoverflow ] : http : / / stackoverflow . com / questions / tagged / checkstyle <nl> [ stackoverflow img ] : https : / / img . shields . io / badge / stackoverflow - CHECKSTYLE - blue . svg

TEST DIFF:
diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 44b1161 . . df4254a 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 130 , 13 + 130 , 50 @ @ String b = ( a = = null | | a . length & lt ; 1 ) ? null : a . substring ( 1 ) ; 
 < section name = " CovariantEquals " > 
 < subsection name = " Description " > 
 < p > 
 - Checks that classes that define a covariant < code > equals ( ) < / code > method also override method < code > equals ( java . lang . Object ) < / code > . Inspired by < a 
 - href = " http : / / www . cs . nyu . edu / ~ lharris / papers / findbugsPaper . pdf " > Finding Bugs is Easy , chapter ' 2 . 3 . 1 Bad Covariant Definition of Equals ( Eq ) ' < / a > . 
 + Checks that classes which define a covariant < code > equals ( ) < / code > method 
 + also override method < code > equals ( Object ) < / code > . < br / > 
 + Covariant < code > equals ( ) < / code > - method that is similar to < code > equals ( Object ) < / code > , 
 + but with a covariant parameter type ( any subtype of Object ) . < br / > 
 + < strong > Notice < / strong > : the enums are also checked , even 
 + though they cannot override < code > equals ( Object ) < / code > . The reason is 
 + to point out that implementing < code > equals ( ) < / code > in enums is considered an 
 + awful practice : it may cause having two different enum values that are equal using 
 + covariant enum method , and not equal when compared normally . 
 < / p > 
 
 < p > 
 - Rationale : Mistakenly defining a covariant < code > equals ( ) < / code > method without overriding method < code > equals ( java . lang . Object ) < / code > can produce unexpected 
 - runtime behaviour . 
 + Inspired by < a href = " http : / / www . cs . nyu . edu / ~ lharris / papers / findbugsPaper . pdf " > 
 + Finding Bugs is Easy , chapter ' 2 . 3 . 1 Bad Covariant Definition of Equals ( Eq ) ' < / a > : 
 + < / p > 
 + 
 + < p > 
 + Java classes may override the < code > equals ( Object ) < / code > method to define 
 + a predicate for object equality . This method is used by many of the Java runtime 
 + library classes ; for example , to implement generic containers . 
 + < / p > 
 + 
 + < p > 
 + Programmers sometimes mistakenly use the type of their class < code > Foo < / code > 
 + as the type of the parameter to < code > equals ( ) < / code > : 
 + < / p > 
 + 
 + < source > 
 + public boolean equals ( Foo obj ) { . . . } 
 + < / source > 
 + 
 + < p > 
 + This covariant version of < code > equals ( ) < / code > does not override the version in the 
 + < code > Object < / code > class , and it may lead to unexpected behavior at runtime , 
 + especially if the class is used with one of the standard collection classes 
 + which expect that the standard < code > equals ( Object ) < / code > method is overridden . 
 + < / p > 
 + 
 + < p > 
 + This kind of bug is not obvious because it looks correct , and in circumstances where 
 + the class is accessed through the references of the class type ( rather than a supertype ) , 
 + it will work correctly . However , the first time it is used in a container , 
 + the behavior might be mysterious . For these reasons , this type of bug can elude 
 + testing and code inspections . 
 < / p > 
 < / subsection > 
 
 @ @ - 147 , 6 + 184 , 31 @ @ String b = ( a = = null | | a . length & lt ; 1 ) ? null : a . substring ( 1 ) ; 
 < source > 
 & lt ; module name = & quot ; CovariantEquals & quot ; / & gt ; 
 < / source > 
 + 
 + < p > 
 + For example : 
 + < source > 
 + class Test { 
 + public boolean equals ( Test i ) { / / violation 
 + return false ; 
 + } 
 + } 
 + < / source > 
 + < / p > 
 + < p > 
 + The same class without violations : 
 + < source > 
 + class Test { 
 + public boolean equals ( Test i ) { / / no violation 
 + return false ; 
 + } 
 + 
 + public boolean equals ( Object i ) { 
 + return false ; 
 + } 
 + } 
 + < / source > 
 + < / p > 
 < / subsection > 
 
 < subsection name = " Example of Usage " >

NEAREST DIFF:
diff - - git a / README . md b / README . md 
 index cb6ef17 . . 0eab2fa 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 5 , 9 + 5 , 8 @ @ 
 [ ! [ ] [ sonar img ] ] [ sonar ] 
 
 
 - Members chat : [ ! [ ] [ gitter img ] ] [ gitter ] 
 - Public chat : [ ! [ ] [ gitter - public img ] ] [ gitter - public ] 
 - 
 + Organization Members chat : [ ! [ ] [ gitter img ] ] [ gitter ] 
 + Contributors chat : [ ! [ https : / / gitter . im / checkstyle / checkstyle ] ( https : / / badges . gitter . im / Join % 20Chat . svg ) ] ( https : / / gitter . im / checkstyle / checkstyle ? utm _ source = badge & utm _ medium = badge & utm _ campaign = pr - badge & utm _ content = badge ) 
 
 ! [ ] ( https : / / raw . githubusercontent . com / checkstyle / checkstyle / master / src / site / resources / images / logo . png ) 
 
 @ @ - 27 , 6 + 26 , 8 @ @ Quality reports : http : / / checkstyle . sourceforge . net / project - reports . html 
 Feedback / Support 
 = = = = = = = = 
 
 + [ ! [ https : / / gitter . im / checkstyle / checkstyle ] ( https : / / badges . gitter . im / Join % 20Chat . svg ) ] ( https : / / gitter . im / checkstyle / checkstyle ? utm _ source = badge & utm _ medium = badge & utm _ campaign = pr - badge & utm _ content = badge ) 
 + 
 Please send any feedback to https : / / groups . google . com / forum / ? hl = en # ! forum / checkstyle 
 
 Questions and Answers from community : [ ! [ ] [ stackoverflow img ] ] [ stackoverflow ] 
 @ @ - 79 , 8 + 80 , 8 @ @ directory . 
 [ gitter ] : https : / / gitter . im / checkstyle 
 [ gitter img ] : http : / / img . shields . io / badge / gitter - JOIN % 20CHAT - blue . svg 
 
 - [ gitter - public ] : https : / / gitter . im / checkstyle / checkstyle 
 - [ gitter - public img ] : https : / / badges . gitter . im / Join % 20Chat . svg ) 
 + [ gitterpublic ] : https : / / gitter . im / checkstyle / checkstyle 
 + [ gitterpublic img ] : https : / / badges . gitter . im / Join % 20Chat . svg ) 
 
 [ stackoverflow ] : http : / / stackoverflow . com / questions / tagged / checkstyle 
 [ stackoverflow img ] : https : / / img . shields . io / badge / stackoverflow - CHECKSTYLE - blue . svg
