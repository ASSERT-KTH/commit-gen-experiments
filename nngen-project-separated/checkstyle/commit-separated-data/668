BLEU SCORE: 0.04735576781334084

TEST MSG: Issue # 4713 : add suppressions
GENERATED MSG: Issue # 4722 : fix easy cases of the seventh part of idea violations

TEST DIFF (one line): diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index 380484b . . 560140b 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 3 , 6 + 3 , 7 @ @ <nl> < option name = " myName " value = " Checkstyle " / > <nl> < inspection _ tool class = " AbsoluteAlignmentInUserInterface " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " AbstractBeanReferencesInspection " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> + < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4716 - - > <nl> < inspection _ tool class = " AbstractClassExtendsConcreteClass " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " AbstractClassNamingConvention " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > <nl> < option name = " m _ regex " value = " [ A - Z ] [ A - Za - z \ d ] * | Check " / > <nl> @ @ - 180 , 6 + 181 , 7 @ @ <nl> < inspection _ tool class = " BlockMarkerComments " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " BlockStatementJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " BooleanConstructor " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - even it is always negated , it is better than possible negation / inversion of negated term - - > <nl> < inspection _ tool class = " BooleanMethodIsAlwaysInverted " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " BooleanMethodNameMustStartWithQuestion " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > <nl> < scope name = " Production " level = " WARNING " enabled = " false " > <nl> @ @ - 194 , 8 + 196 , 10 @ @ <nl> < option name = " questionString " value = " is , can , has , should , could , will , shall , check , contains , equals , add , put , remove , starts , ends , are , was , matches , start , must , accept " / > <nl> < / inspection _ tool > <nl> < inspection _ tool class = " BooleanParameter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> + < ! - - even it is always negated , it is better than possible negation / inversion of negated term - - > <nl> < inspection _ tool class = " BooleanVariableAlwaysNegated " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " BoxingBoxedValue " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - we like breaks to be in code - - > <nl> < inspection _ tool class = " BreakStatement " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " BreakStatementJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " BreakStatementWithLabel " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 433 , 6 + 437 , 7 @ @ <nl> < inspection _ tool class = " ContextJavaBeanUnresolvedMethodsInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ContinueOrBreakFromFinallyBlock " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ContinueOrBreakFromFinallyBlockJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - we like continue statements to be in code - - > <nl> < inspection _ tool class = " ContinueStatement " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " ContinueStatementJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ContinueStatementWithLabel " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 490 , 7 + 495 , 11 @ @ <nl> < inspection _ tool class = " CucumberUndefinedStep " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CustomClassloader " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CustomSecurityManager " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - we can not afford this now , api cleanup is in progress and it is hard and takes time for <nl> + deprecation process - - > <nl> < inspection _ tool class = " CyclicClassDependency " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> + < ! - - we can not afford this now , api cleanup is in progress and it hard and takes time for <nl> + deprecation process - - > <nl> < inspection _ tool class = " CyclicPackageDependency " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " CyclomaticComplexity " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> < option name = " m _ limit " value = " 10 " / > <nl> @ @ - 561 , 10 + 570 , 9 @ @ <nl> < option name = " CHECK _ DUPLICATE _ KEYS " value = " true " / > <nl> < option name = " CHECK _ DUPLICATE _ KEYS _ WITH _ DIFFERENT _ VALUES " value = " true " / > <nl> < / inspection _ tool > <nl> - < inspection _ tool class = " DuplicateStringLiteralInspection " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> - < option name = " MIN _ STRING _ LENGTH " value = " 5 " / > <nl> - < option name = " IGNORE _ PROPERTY _ KEYS " value = " false " / > <nl> - < / inspection _ tool > <nl> + < ! - - it will result in too much dependencies between classes , some case are only have the <nl> + same value by chance , too much wont - fixes - - > <nl> + < inspection _ tool class = " DuplicateStringLiteralInspection " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " DuplicateThrows " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " DuplicatedBeanNamesInspection " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " DuplicatedDataProviderNames " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> @ @ - 613 , 7 + 621 , 9 @ @ <nl> < inspection _ tool class = " EmptyFinallyBlock " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " EmptyFinallyBlockJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " EmptyInitializer " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> - < inspection _ tool class = " EmptyMethod " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > <nl> + < inspection _ tool class = " EmptyMethod " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > <nl> + < option name = " commentsAreContent " value = " true " / > <nl> + < / inspection _ tool > <nl> < inspection _ tool class = " EmptyStatementBody " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> < option name = " m _ reportEmptyBlocks " value = " true " / > <nl> < / inspection _ tool > <nl> @ @ - 650 , 6 + 660 , 8 @ @ <nl> < inspection _ tool class = " EqualsUsesNonFinalVariable " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " EqualsWhichDoesntCheckParameterClass " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " EqualsWithItself " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - there is false - positive , and rest cases are result of our loading modules by reflection <nl> + that throws Error . Error is not always jvm problem , bunch of libraries throw Error instead of Exception - - > <nl> < inspection _ tool class = " ErrorRethrown " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " Eslint " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " ExceptionCaughtLocallyJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 933 , 18 + 945 , 8 @ @ <nl> < / inspection _ tool > <nl> < inspection _ tool class = " Guava " enabled = " true " level = " WARNING " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " GuavaFluentIterable " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> - < inspection _ tool class = " HardCodedStringLiteral " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> - < option name = " ignoreForAssertStatements " value = " true " / > <nl> - < option name = " ignoreForExceptionConstructors " value = " true " / > <nl> - < option name = " ignoreForSpecifiedExceptionConstructors " value = " " / > <nl> - < option name = " ignoreForJUnitAsserts " value = " true " / > <nl> - < option name = " ignoreForClassReferences " value = " true " / > <nl> - < option name = " ignoreForPropertyKeyReferences " value = " true " / > <nl> - < option name = " ignoreForNonAlpha " value = " true " / > <nl> - < option name = " ignoreAssignedToConstants " value = " false " / > <nl> - < option name = " ignoreToString " value = " false " / > <nl> - < option name = " nonNlsCommentPattern " value = " NON - NLS " / > <nl> - < / inspection _ tool > <nl> + < ! - - we like it , it is not performance issue for us - - > <nl> + < inspection _ tool class = " HardCodedStringLiteral " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < ! - - there are too much false positives in RegExps and javadoc start / end symbols in paths from classpath etc . - - > <nl> < inspection _ tool class = " HardcodedFileSeparators " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < ! - - there are too much false positives in RegExps and javadoc start / end symbols in paths from classpath etc . - - > <nl> @ @ - 1000 , 6 + 1002 , 7 @ @ <nl> < / inspection _ tool > <nl> < ! - - till we switch to jacoco we cannot use this as it conflicts with policy of 100 % coverage - - > <nl> < inspection _ tool class = " IfCanBeSwitch " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> + < ! - - we do not conditional expressions , we like more verbose code - - > <nl> < inspection _ tool class = " IfMayBeConditional " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " IfNullToElvis " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " IfStatementWithIdenticalBranches " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 1070 , 6 + 1073 , 8 @ @ <nl> < option name = " m _ minLength " value = " 3 " / > <nl> < option name = " m _ maxLength " value = " 64 " / > <nl> < / inspection _ tool > <nl> + < ! - - we use methods like notifyBegin to ( re ) initialize , so c - tor or field declaration initialization <nl> + is not good place for us . - - > <nl> < inspection _ tool class = " InstanceVariableInitialization " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> < option name = " m _ ignorePrimitives " value = " false " / > <nl> < / inspection _ tool > <nl> @ @ - 1273 , 9 + 1278 , 9 @ @ <nl> < inspection _ tool class = " LanguageMismatch " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> < option name = " CHECK _ NON _ ANNOTATED _ REFERENCES " value = " true " / > <nl> < / inspection _ tool > <nl> - < inspection _ tool class = " LawOfDemeter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> - < option name = " ignoreLibraryCalls " value = " true " / > <nl> - < / inspection _ tool > <nl> + < ! - - it is impossible to follow this Law for us as most violation are caused by fact that we do logic <nl> + not only on token that come to visitToken , but by extra traversing over subtree - - > <nl> + < inspection _ tool class = " LawOfDemeter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " LengthOneStringInIndexOf " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < ! - - it is not critical parts of our application and benefit is minimal and only for special applications <nl> that use such concatenations alot - <nl> @ @ - 1327 , 6 + 1332 , 8 @ @ <nl> < inspection _ tool class = " LoopWithImplicitTerminationCondition " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " LossyEncoding " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " MVCPathVariableInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - we do a lot of String processing : we have lexer and parser , we do not have java class that contains <nl> + all lexer tokens with their text values ( RPAREN vs ' ) ' ) - - > <nl> < inspection _ tool class = " MagicCharacter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < ! - - false positive is reported , we have enough of MagicNumber validations - - > <nl> < inspection _ tool class = " MagicConstant " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > <nl> @ @ - 1709 , 14 + 1716 , 9 @ @ <nl> < / option > <nl> < / inspection _ tool > <nl> < inspection _ tool class = " PublicFieldAccessedInSynchronizedContext " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> - < inspection _ tool class = " PublicInnerClass " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > <nl> - < scope name = " Production " level = " WARNING " enabled = " false " > <nl> - < option name = " ignoreEnums " value = " false " / > <nl> - < option name = " ignoreInterfaces " value = " false " / > <nl> - < / scope > <nl> - < option name = " ignoreEnums " value = " false " / > <nl> - < option name = " ignoreInterfaces " value = " false " / > <nl> - < / inspection _ tool > <nl> + < ! - - we like to use them as we not always ready to make class top level , for Checks <nl> + it is better to keep all in one class . - - > <nl> + < inspection _ tool class = " PublicInnerClass " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " PublicMethodNotExposedInInterface " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> < option name = " ignorableAnnotations " > <nl> < value / > <nl> @ @ - 1805 , 10 + 1807 , 12 @ @ <nl> < inspection _ tool class = " SafeLock " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " SafeVarargsDetector " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " SamePackageImport " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - to much false positives as it does not consider fact that public method is called from outside of the <nl> + class , some values come from config files , also it highlights most of the static methods that are candidates <nl> + for utils package but we have not decided yet . - - > <nl> < inspection _ tool class = " SameParameterValue " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > <nl> - < inspection _ tool class = " SameReturnValue " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > <nl> - < scope name = " Production " level = " WARNING " enabled = " false " / > <nl> - < / inspection _ tool > <nl> + < ! - - it is ok as some methods are in role of configuration ' isEditable { return false ; } - - > <nl> + < inspection _ tool class = " SameReturnValue " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " SecondUnsafeCall " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " SelfIncludingJspFiles " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " SerialPersistentFieldsWithWrongSignature " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 1856 , 6 + 1860 , 7 @ @ <nl> < ! - - suppressed till GSoC project completion . . . . - - > <nl> < inspection _ tool class = " SingleCharAlternation " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " SingleCharacterStartsWith " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - we like single import for single class - - > <nl> < inspection _ tool class = " SingleClassImport " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " Singleton " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " SingletonInjectsScoped " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 1992 , 15 + 1997 , 8 @ @ <nl> < inspection _ tool class = " StringBufferReplaceableByStringBuilder " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " StringBufferToStringInConcatenation " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " StringCompareTo " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> - < inspection _ tool class = " StringConcatenation " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> - < option name = " ignoreAsserts " value = " false " / > <nl> - < option name = " ignoreSystemOuts " value = " false " / > <nl> - < option name = " ignoreSystemErrs " value = " false " / > <nl> - < option name = " ignoreThrowableArguments " value = " false " / > <nl> - < option name = " ignoreConstantInitializers " value = " false " / > <nl> - < option name = " ignoreInTestCode " value = " false " / > <nl> - < option name = " ignoreInToString " value = " false " / > <nl> - < / inspection _ tool > <nl> + < ! - - we like it , it is not performance issue for us - - > <nl> + < inspection _ tool class = " StringConcatenation " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " StringConcatenationArgumentToLogCall " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " StringConcatenationInFormatCall " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " StringConcatenationInLoops " enabled = " true " level = " WARNING " enabled _ by _ default = " true " >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 06972b4 . . 11f75a9 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2106 , 6 + 2106 , 10 @ @ <nl> < param > com . puppycrawl . tools . checkstyle . grammars . comments . CommentsTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . filefilters . * < / param > <nl> < param > com . puppycrawl . tools . checkstyle . filters . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . imports . ImportControlCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . naming . ParameterNameCheckTest < / param > <nl> < / targetTests > <nl> < mutationThreshold > 84 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> index 39ec46d . . 7452249 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> @ @ - 28 , 7 + 28 , 10 @ @ import java . lang . reflect . Field ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> <nl> import org . apache . commons . beanutils . ConversionException ; <nl> + import org . apache . commons . beanutils . ConvertUtilsBean ; <nl> + import org . apache . commons . beanutils . Converter ; <nl> import org . junit . Test ; <nl> + import org . powermock . reflect . Whitebox ; <nl> <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . DefaultContext ; <nl> @ @ - 134 , 6 + 137 , 29 @ @ public class AutomaticBeanTest { <nl> } <nl> } <nl> <nl> + @ Test <nl> + public void testRegisterIntegralTypes ( ) throws Exception { <nl> + final ConvertUtilsBeanStub convertUtilsBean = new ConvertUtilsBeanStub ( ) ; <nl> + Whitebox . invokeMethod ( AutomaticBean . class , " registerIntegralTypes " , convertUtilsBean ) ; <nl> + assertEquals ( " Number of converters registered differs from expected " , <nl> + 81 , convertUtilsBean . getRegisterCount ( ) ) ; <nl> + } <nl> + <nl> + private static class ConvertUtilsBeanStub extends ConvertUtilsBean { <nl> + <nl> + private int registerCount ; <nl> + <nl> + @ Override <nl> + public void register ( Converter converter , Class < ? > clazz ) { <nl> + super . register ( converter , clazz ) ; <nl> + registerCount + + ; <nl> + } <nl> + <nl> + public int getRegisterCount ( ) { <nl> + return registerCount ; <nl> + } <nl> + } <nl> + <nl> private static class TestBean extends AutomaticBean { <nl> <nl> private String privateField ;

TEST DIFF:
diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index 380484b . . 560140b 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 3 , 6 + 3 , 7 @ @ 
 < option name = " myName " value = " Checkstyle " / > 
 < inspection _ tool class = " AbsoluteAlignmentInUserInterface " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " AbstractBeanReferencesInspection " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 + < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4716 - - > 
 < inspection _ tool class = " AbstractClassExtendsConcreteClass " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " AbstractClassNamingConvention " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > 
 < option name = " m _ regex " value = " [ A - Z ] [ A - Za - z \ d ] * | Check " / > 
 @ @ - 180 , 6 + 181 , 7 @ @ 
 < inspection _ tool class = " BlockMarkerComments " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " BlockStatementJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " BooleanConstructor " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - even it is always negated , it is better than possible negation / inversion of negated term - - > 
 < inspection _ tool class = " BooleanMethodIsAlwaysInverted " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " BooleanMethodNameMustStartWithQuestion " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > 
 < scope name = " Production " level = " WARNING " enabled = " false " > 
 @ @ - 194 , 8 + 196 , 10 @ @ 
 < option name = " questionString " value = " is , can , has , should , could , will , shall , check , contains , equals , add , put , remove , starts , ends , are , was , matches , start , must , accept " / > 
 < / inspection _ tool > 
 < inspection _ tool class = " BooleanParameter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 + < ! - - even it is always negated , it is better than possible negation / inversion of negated term - - > 
 < inspection _ tool class = " BooleanVariableAlwaysNegated " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " BoxingBoxedValue " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - we like breaks to be in code - - > 
 < inspection _ tool class = " BreakStatement " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " BreakStatementJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " BreakStatementWithLabel " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 433 , 6 + 437 , 7 @ @ 
 < inspection _ tool class = " ContextJavaBeanUnresolvedMethodsInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ContinueOrBreakFromFinallyBlock " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ContinueOrBreakFromFinallyBlockJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - we like continue statements to be in code - - > 
 < inspection _ tool class = " ContinueStatement " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " ContinueStatementJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ContinueStatementWithLabel " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 490 , 7 + 495 , 11 @ @ 
 < inspection _ tool class = " CucumberUndefinedStep " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CustomClassloader " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CustomSecurityManager " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - we can not afford this now , api cleanup is in progress and it is hard and takes time for 
 + deprecation process - - > 
 < inspection _ tool class = " CyclicClassDependency " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 + < ! - - we can not afford this now , api cleanup is in progress and it hard and takes time for 
 + deprecation process - - > 
 < inspection _ tool class = " CyclicPackageDependency " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " CyclomaticComplexity " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 < option name = " m _ limit " value = " 10 " / > 
 @ @ - 561 , 10 + 570 , 9 @ @ 
 < option name = " CHECK _ DUPLICATE _ KEYS " value = " true " / > 
 < option name = " CHECK _ DUPLICATE _ KEYS _ WITH _ DIFFERENT _ VALUES " value = " true " / > 
 < / inspection _ tool > 
 - < inspection _ tool class = " DuplicateStringLiteralInspection " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 - < option name = " MIN _ STRING _ LENGTH " value = " 5 " / > 
 - < option name = " IGNORE _ PROPERTY _ KEYS " value = " false " / > 
 - < / inspection _ tool > 
 + < ! - - it will result in too much dependencies between classes , some case are only have the 
 + same value by chance , too much wont - fixes - - > 
 + < inspection _ tool class = " DuplicateStringLiteralInspection " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " DuplicateThrows " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " DuplicatedBeanNamesInspection " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " DuplicatedDataProviderNames " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 @ @ - 613 , 7 + 621 , 9 @ @ 
 < inspection _ tool class = " EmptyFinallyBlock " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " EmptyFinallyBlockJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " EmptyInitializer " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 - < inspection _ tool class = " EmptyMethod " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > 
 + < inspection _ tool class = " EmptyMethod " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > 
 + < option name = " commentsAreContent " value = " true " / > 
 + < / inspection _ tool > 
 < inspection _ tool class = " EmptyStatementBody " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 < option name = " m _ reportEmptyBlocks " value = " true " / > 
 < / inspection _ tool > 
 @ @ - 650 , 6 + 660 , 8 @ @ 
 < inspection _ tool class = " EqualsUsesNonFinalVariable " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " EqualsWhichDoesntCheckParameterClass " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " EqualsWithItself " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - there is false - positive , and rest cases are result of our loading modules by reflection 
 + that throws Error . Error is not always jvm problem , bunch of libraries throw Error instead of Exception - - > 
 < inspection _ tool class = " ErrorRethrown " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " Eslint " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " ExceptionCaughtLocallyJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 933 , 18 + 945 , 8 @ @ 
 < / inspection _ tool > 
 < inspection _ tool class = " Guava " enabled = " true " level = " WARNING " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " GuavaFluentIterable " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 - < inspection _ tool class = " HardCodedStringLiteral " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 - < option name = " ignoreForAssertStatements " value = " true " / > 
 - < option name = " ignoreForExceptionConstructors " value = " true " / > 
 - < option name = " ignoreForSpecifiedExceptionConstructors " value = " " / > 
 - < option name = " ignoreForJUnitAsserts " value = " true " / > 
 - < option name = " ignoreForClassReferences " value = " true " / > 
 - < option name = " ignoreForPropertyKeyReferences " value = " true " / > 
 - < option name = " ignoreForNonAlpha " value = " true " / > 
 - < option name = " ignoreAssignedToConstants " value = " false " / > 
 - < option name = " ignoreToString " value = " false " / > 
 - < option name = " nonNlsCommentPattern " value = " NON - NLS " / > 
 - < / inspection _ tool > 
 + < ! - - we like it , it is not performance issue for us - - > 
 + < inspection _ tool class = " HardCodedStringLiteral " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < ! - - there are too much false positives in RegExps and javadoc start / end symbols in paths from classpath etc . - - > 
 < inspection _ tool class = " HardcodedFileSeparators " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < ! - - there are too much false positives in RegExps and javadoc start / end symbols in paths from classpath etc . - - > 
 @ @ - 1000 , 6 + 1002 , 7 @ @ 
 < / inspection _ tool > 
 < ! - - till we switch to jacoco we cannot use this as it conflicts with policy of 100 % coverage - - > 
 < inspection _ tool class = " IfCanBeSwitch " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 + < ! - - we do not conditional expressions , we like more verbose code - - > 
 < inspection _ tool class = " IfMayBeConditional " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " IfNullToElvis " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " IfStatementWithIdenticalBranches " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 1070 , 6 + 1073 , 8 @ @ 
 < option name = " m _ minLength " value = " 3 " / > 
 < option name = " m _ maxLength " value = " 64 " / > 
 < / inspection _ tool > 
 + < ! - - we use methods like notifyBegin to ( re ) initialize , so c - tor or field declaration initialization 
 + is not good place for us . - - > 
 < inspection _ tool class = " InstanceVariableInitialization " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 < option name = " m _ ignorePrimitives " value = " false " / > 
 < / inspection _ tool > 
 @ @ - 1273 , 9 + 1278 , 9 @ @ 
 < inspection _ tool class = " LanguageMismatch " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 < option name = " CHECK _ NON _ ANNOTATED _ REFERENCES " value = " true " / > 
 < / inspection _ tool > 
 - < inspection _ tool class = " LawOfDemeter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 - < option name = " ignoreLibraryCalls " value = " true " / > 
 - < / inspection _ tool > 
 + < ! - - it is impossible to follow this Law for us as most violation are caused by fact that we do logic 
 + not only on token that come to visitToken , but by extra traversing over subtree - - > 
 + < inspection _ tool class = " LawOfDemeter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " LengthOneStringInIndexOf " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < ! - - it is not critical parts of our application and benefit is minimal and only for special applications 
 that use such concatenations alot - 
 @ @ - 1327 , 6 + 1332 , 8 @ @ 
 < inspection _ tool class = " LoopWithImplicitTerminationCondition " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " LossyEncoding " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " MVCPathVariableInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - we do a lot of String processing : we have lexer and parser , we do not have java class that contains 
 + all lexer tokens with their text values ( RPAREN vs ' ) ' ) - - > 
 < inspection _ tool class = " MagicCharacter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < ! - - false positive is reported , we have enough of MagicNumber validations - - > 
 < inspection _ tool class = " MagicConstant " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > 
 @ @ - 1709 , 14 + 1716 , 9 @ @ 
 < / option > 
 < / inspection _ tool > 
 < inspection _ tool class = " PublicFieldAccessedInSynchronizedContext " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 - < inspection _ tool class = " PublicInnerClass " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > 
 - < scope name = " Production " level = " WARNING " enabled = " false " > 
 - < option name = " ignoreEnums " value = " false " / > 
 - < option name = " ignoreInterfaces " value = " false " / > 
 - < / scope > 
 - < option name = " ignoreEnums " value = " false " / > 
 - < option name = " ignoreInterfaces " value = " false " / > 
 - < / inspection _ tool > 
 + < ! - - we like to use them as we not always ready to make class top level , for Checks 
 + it is better to keep all in one class . - - > 
 + < inspection _ tool class = " PublicInnerClass " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " PublicMethodNotExposedInInterface " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 < option name = " ignorableAnnotations " > 
 < value / > 
 @ @ - 1805 , 10 + 1807 , 12 @ @ 
 < inspection _ tool class = " SafeLock " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " SafeVarargsDetector " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " SamePackageImport " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - to much false positives as it does not consider fact that public method is called from outside of the 
 + class , some values come from config files , also it highlights most of the static methods that are candidates 
 + for utils package but we have not decided yet . - - > 
 < inspection _ tool class = " SameParameterValue " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > 
 - < inspection _ tool class = " SameReturnValue " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > 
 - < scope name = " Production " level = " WARNING " enabled = " false " / > 
 - < / inspection _ tool > 
 + < ! - - it is ok as some methods are in role of configuration ' isEditable { return false ; } - - > 
 + < inspection _ tool class = " SameReturnValue " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " SecondUnsafeCall " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " SelfIncludingJspFiles " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " SerialPersistentFieldsWithWrongSignature " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 1856 , 6 + 1860 , 7 @ @ 
 < ! - - suppressed till GSoC project completion . . . . - - > 
 < inspection _ tool class = " SingleCharAlternation " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " SingleCharacterStartsWith " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - we like single import for single class - - > 
 < inspection _ tool class = " SingleClassImport " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " Singleton " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " SingletonInjectsScoped " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 1992 , 15 + 1997 , 8 @ @ 
 < inspection _ tool class = " StringBufferReplaceableByStringBuilder " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " StringBufferToStringInConcatenation " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " StringCompareTo " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 - < inspection _ tool class = " StringConcatenation " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 - < option name = " ignoreAsserts " value = " false " / > 
 - < option name = " ignoreSystemOuts " value = " false " / > 
 - < option name = " ignoreSystemErrs " value = " false " / > 
 - < option name = " ignoreThrowableArguments " value = " false " / > 
 - < option name = " ignoreConstantInitializers " value = " false " / > 
 - < option name = " ignoreInTestCode " value = " false " / > 
 - < option name = " ignoreInToString " value = " false " / > 
 - < / inspection _ tool > 
 + < ! - - we like it , it is not performance issue for us - - > 
 + < inspection _ tool class = " StringConcatenation " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " StringConcatenationArgumentToLogCall " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " StringConcatenationInFormatCall " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " StringConcatenationInLoops " enabled = " true " level = " WARNING " enabled _ by _ default = " true " >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 06972b4 . . 11f75a9 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2106 , 6 + 2106 , 10 @ @ 
 < param > com . puppycrawl . tools . checkstyle . grammars . comments . CommentsTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . filefilters . * < / param > 
 < param > com . puppycrawl . tools . checkstyle . filters . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . imports . ImportControlCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . naming . ParameterNameCheckTest < / param > 
 < / targetTests > 
 < mutationThreshold > 84 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 index 39ec46d . . 7452249 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 @ @ - 28 , 7 + 28 , 10 @ @ import java . lang . reflect . Field ; 
 import java . lang . reflect . InvocationTargetException ; 
 
 import org . apache . commons . beanutils . ConversionException ; 
 + import org . apache . commons . beanutils . ConvertUtilsBean ; 
 + import org . apache . commons . beanutils . Converter ; 
 import org . junit . Test ; 
 + import org . powermock . reflect . Whitebox ; 
 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . DefaultContext ; 
 @ @ - 134 , 6 + 137 , 29 @ @ public class AutomaticBeanTest { 
 } 
 } 
 
 + @ Test 
 + public void testRegisterIntegralTypes ( ) throws Exception { 
 + final ConvertUtilsBeanStub convertUtilsBean = new ConvertUtilsBeanStub ( ) ; 
 + Whitebox . invokeMethod ( AutomaticBean . class , " registerIntegralTypes " , convertUtilsBean ) ; 
 + assertEquals ( " Number of converters registered differs from expected " , 
 + 81 , convertUtilsBean . getRegisterCount ( ) ) ; 
 + } 
 + 
 + private static class ConvertUtilsBeanStub extends ConvertUtilsBean { 
 + 
 + private int registerCount ; 
 + 
 + @ Override 
 + public void register ( Converter converter , Class < ? > clazz ) { 
 + super . register ( converter , clazz ) ; 
 + registerCount + + ; 
 + } 
 + 
 + public int getRegisterCount ( ) { 
 + return registerCount ; 
 + } 
 + } 
 + 
 private static class TestBean extends AutomaticBean { 
 
 private String privateField ;
