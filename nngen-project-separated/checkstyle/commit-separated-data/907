BLEU SCORE: 0.01744319569165376

TEST MSG: Issue # 3991 : Split and Organize Checkstyle inputs by Test for ExecutableStatementCount
GENERATED MSG: 100 % conditional coverage for visitToken ( ) , leaveToken ( ) and leaveMemberDef ( ) methods in class ExecutableStatementCountCheck , issue # 1024

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java <nl> index e782fa8 . . 490e9f9 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java <nl> @ @ - 40 , 7 + 40 , 8 @ @ public class ExecutableStatementCountCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " sizes " + File . separator + filename ) ; <nl> + + " sizes " + File . separator + " executablestatementcount " <nl> + + File . separator + filename ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputExecutableStatementCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputExecutableStatementCount . java <nl> deleted file mode 100644 <nl> index a6a6b6d . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputExecutableStatementCount . java <nl> + + + / dev / null <nl> @ @ - 1 , 89 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> - <nl> - public class InputExecutableStatementCount { <nl> - public void foo ( ) { <nl> - while ( true ) { <nl> - Runnable runnable = new Runnable ( ) { <nl> - public void run ( ) { <nl> - while ( true ) { <nl> - } <nl> - } <nl> - } ; <nl> - <nl> - new Thread ( runnable ) . start ( ) ; <nl> - } <nl> - } <nl> - <nl> - public void bar ( ) { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - <nl> - if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - } <nl> - } <nl> - <nl> - public void simpleElseIf ( ) { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - public void stupidElseIf ( ) { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - } <nl> - <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - } <nl> - } <nl> - <nl> - public InputExecutableStatementCount ( ) <nl> - { <nl> - int i = 1 ; <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - / / STATIC _ INIT <nl> - static { <nl> - int i = 1 ; <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - / / INSTANCE _ INIT <nl> - { <nl> - int i = 1 ; <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - / * * Inner * / <nl> - public InputExecutableStatementCount ( int aParam ) <nl> - { <nl> - Runnable runnable = new Runnable ( ) { <nl> - public void run ( ) { <nl> - while ( true ) { <nl> - } <nl> - } <nl> - } ; <nl> - new Thread ( runnable ) . start ( ) ; <nl> - } <nl> - <nl> - / * * Empty constructor * / <nl> - public InputExecutableStatementCount ( String someString ) { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java <nl> new file mode 100644 <nl> index 0000000 . . d637940 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java <nl> @ @ - 0 , 0 + 1 , 89 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . sizes . executablestatementcount ; <nl> + <nl> + public class InputExecutableStatementCount { <nl> + public void foo ( ) { <nl> + while ( true ) { <nl> + Runnable runnable = new Runnable ( ) { <nl> + public void run ( ) { <nl> + while ( true ) { <nl> + } <nl> + } <nl> + } ; <nl> + <nl> + new Thread ( runnable ) . start ( ) ; <nl> + } <nl> + } <nl> + <nl> + public void bar ( ) { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + <nl> + if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + public void simpleElseIf ( ) { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + public void stupidElseIf ( ) { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + } <nl> + <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + public InputExecutableStatementCount ( ) <nl> + { <nl> + int i = 1 ; <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + / / STATIC _ INIT <nl> + static { <nl> + int i = 1 ; <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + / / INSTANCE _ INIT <nl> + { <nl> + int i = 1 ; <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + / * * Inner * / <nl> + public InputExecutableStatementCount ( int aParam ) <nl> + { <nl> + Runnable runnable = new Runnable ( ) { <nl> + public void run ( ) { <nl> + while ( true ) { <nl> + } <nl> + } <nl> + } ; <nl> + new Thread ( runnable ) . start ( ) ; <nl> + } <nl> + <nl> + / * * Empty constructor * / <nl> + public InputExecutableStatementCount ( String someString ) { } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java <nl> index 30d3a9f . . d02ffd3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java <nl> @ @ - 142 , 17 + 142 , 18 @ @ public class OneTopLevelClassCheck extends Check <nl> @ Override <nl> public void finishTree ( DetailAST rootAST ) <nl> { <nl> - if ( ! publicTypeFound ) { <nl> - / / skip first top - level type . <nl> - lineNumberTypeMap . remove ( lineNumberTypeMap . firstKey ( ) ) ; <nl> - } <nl> + if ( ! lineNumberTypeMap . isEmpty ( ) ) { <nl> + if ( ! publicTypeFound ) { <nl> + / / skip first top - level type . <nl> + lineNumberTypeMap . remove ( lineNumberTypeMap . firstKey ( ) ) ; <nl> + } <nl> <nl> - for ( Map . Entry < Integer , String > entry <nl> - : lineNumberTypeMap . entrySet ( ) ) <nl> - { <nl> - log ( entry . getKey ( ) , MSG _ KEY , entry . getValue ( ) ) ; <nl> + for ( Map . Entry < Integer , String > entry <nl> + : lineNumberTypeMap . entrySet ( ) ) <nl> + { <nl> + log ( entry . getKey ( ) , MSG _ KEY , entry . getValue ( ) ) ; <nl> + } <nl> } <nl> - <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> index b9bf9b2 . . bb8bf75 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> @ @ - 129 , 4 + 129 , 13 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport <nl> } ; <nl> verify ( checkConfig , getPath ( " coding " + File . separator + " InputDeclarationOrder . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testPackageInfoWithNoTypesDeclared ( ) throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( OneTopLevelClassCheck . class ) ; <nl> + final String [ ] expected = { <nl> + } ; <nl> + verify ( checkConfig , getPath ( " design " + File . separator + " package - info . java " ) , expected ) ; ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / package - info . java <nl> new file mode 100644 <nl> index 0000000 . . 2db5d72 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / design / package - info . java <nl> @ @ - 0 , 0 + 1 , 23 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + / * * <nl> + * Package containing input files for design checks . <nl> + * / <nl> + package com . puppycrawl . tools . checkstyle . design ;

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java 
 index e782fa8 . . 490e9f9 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java 
 @ @ - 40 , 7 + 40 , 8 @ @ public class ExecutableStatementCountCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " sizes " + File . separator + filename ) ; 
 + + " sizes " + File . separator + " executablestatementcount " 
 + + File . separator + filename ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputExecutableStatementCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputExecutableStatementCount . java 
 deleted file mode 100644 
 index a6a6b6d . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputExecutableStatementCount . java 
 + + + / dev / null 
 @ @ - 1 , 89 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 - 
 - public class InputExecutableStatementCount { 
 - public void foo ( ) { 
 - while ( true ) { 
 - Runnable runnable = new Runnable ( ) { 
 - public void run ( ) { 
 - while ( true ) { 
 - } 
 - } 
 - } ; 
 - 
 - new Thread ( runnable ) . start ( ) ; 
 - } 
 - } 
 - 
 - public void bar ( ) { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - 
 - if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - } 
 - } 
 - 
 - public void simpleElseIf ( ) { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - public void stupidElseIf ( ) { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - } 
 - 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - } 
 - } 
 - 
 - public InputExecutableStatementCount ( ) 
 - { 
 - int i = 1 ; 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - / / STATIC _ INIT 
 - static { 
 - int i = 1 ; 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - / / INSTANCE _ INIT 
 - { 
 - int i = 1 ; 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - / * * Inner * / 
 - public InputExecutableStatementCount ( int aParam ) 
 - { 
 - Runnable runnable = new Runnable ( ) { 
 - public void run ( ) { 
 - while ( true ) { 
 - } 
 - } 
 - } ; 
 - new Thread ( runnable ) . start ( ) ; 
 - } 
 - 
 - / * * Empty constructor * / 
 - public InputExecutableStatementCount ( String someString ) { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java 
 new file mode 100644 
 index 0000000 . . d637940 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / executablestatementcount / InputExecutableStatementCount . java 
 @ @ - 0 , 0 + 1 , 89 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . sizes . executablestatementcount ; 
 + 
 + public class InputExecutableStatementCount { 
 + public void foo ( ) { 
 + while ( true ) { 
 + Runnable runnable = new Runnable ( ) { 
 + public void run ( ) { 
 + while ( true ) { 
 + } 
 + } 
 + } ; 
 + 
 + new Thread ( runnable ) . start ( ) ; 
 + } 
 + } 
 + 
 + public void bar ( ) { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + 
 + if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + } 
 + } 
 + 
 + public void simpleElseIf ( ) { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + public void stupidElseIf ( ) { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + } 
 + 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + } 
 + } 
 + 
 + public InputExecutableStatementCount ( ) 
 + { 
 + int i = 1 ; 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + / / STATIC _ INIT 
 + static { 
 + int i = 1 ; 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + / / INSTANCE _ INIT 
 + { 
 + int i = 1 ; 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + / * * Inner * / 
 + public InputExecutableStatementCount ( int aParam ) 
 + { 
 + Runnable runnable = new Runnable ( ) { 
 + public void run ( ) { 
 + while ( true ) { 
 + } 
 + } 
 + } ; 
 + new Thread ( runnable ) . start ( ) ; 
 + } 
 + 
 + / * * Empty constructor * / 
 + public InputExecutableStatementCount ( String someString ) { } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java 
 index 30d3a9f . . d02ffd3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java 
 @ @ - 142 , 17 + 142 , 18 @ @ public class OneTopLevelClassCheck extends Check 
 @ Override 
 public void finishTree ( DetailAST rootAST ) 
 { 
 - if ( ! publicTypeFound ) { 
 - / / skip first top - level type . 
 - lineNumberTypeMap . remove ( lineNumberTypeMap . firstKey ( ) ) ; 
 - } 
 + if ( ! lineNumberTypeMap . isEmpty ( ) ) { 
 + if ( ! publicTypeFound ) { 
 + / / skip first top - level type . 
 + lineNumberTypeMap . remove ( lineNumberTypeMap . firstKey ( ) ) ; 
 + } 
 
 - for ( Map . Entry < Integer , String > entry 
 - : lineNumberTypeMap . entrySet ( ) ) 
 - { 
 - log ( entry . getKey ( ) , MSG _ KEY , entry . getValue ( ) ) ; 
 + for ( Map . Entry < Integer , String > entry 
 + : lineNumberTypeMap . entrySet ( ) ) 
 + { 
 + log ( entry . getKey ( ) , MSG _ KEY , entry . getValue ( ) ) ; 
 + } 
 } 
 - 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 index b9bf9b2 . . bb8bf75 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 @ @ - 129 , 4 + 129 , 13 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport 
 } ; 
 verify ( checkConfig , getPath ( " coding " + File . separator + " InputDeclarationOrder . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testPackageInfoWithNoTypesDeclared ( ) throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( OneTopLevelClassCheck . class ) ; 
 + final String [ ] expected = { 
 + } ; 
 + verify ( checkConfig , getPath ( " design " + File . separator + " package - info . java " ) , expected ) ; ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / package - info . java 
 new file mode 100644 
 index 0000000 . . 2db5d72 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / design / package - info . java 
 @ @ - 0 , 0 + 1 , 23 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + / * * 
 + * Package containing input files for design checks . 
 + * / 
 + package com . puppycrawl . tools . checkstyle . design ;
