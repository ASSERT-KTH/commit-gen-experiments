BLEU SCORE: 0.8408964152537145

TEST MSG: Issue # 4585 : Moved resources for RegexpCheckTest
GENERATED MSG: Issue # 4585 : Moved resources for RegexpSinglelineJavaCheck

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java <nl> index 6d5dbf6 . . a93d0f5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java <nl> @ @ - 37 , 7 + 37 , 9 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " regexp " + File . separator + filename ) ; <nl> + + " regexp " + File . separator <nl> + + " regexp " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 55 , 7 + 57 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> createCheckConfig ( RegexpCheck . class ) ; <nl> checkConfig . addAttribute ( " format " , required ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 67 , 7 + 69 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 0 : " + getCheckMessage ( MSG _ REQUIRED _ REGEXP , required ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 78 , 7 + 80 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " format " , required ) ; <nl> checkConfig . addAttribute ( " duplicateLimit " , " 0 " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 88 , 7 + 90 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " format " , required ) ; <nl> checkConfig . addAttribute ( " duplicateLimit " , " - 1 " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 101 , 7 + 103 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 24 : " + getCheckMessage ( MSG _ DUPLICATE _ REGEXP , required ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 112 , 7 + 114 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " format " , illegal ) ; <nl> checkConfig . addAttribute ( " illegalPattern " , " true " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 128 , 7 + 130 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> " 8 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , <nl> " 9 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 146 , 7 + 148 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> " 8 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , <nl> " 9 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , error + illegal ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 162 , 7 + 164 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 69 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , message ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 177 , 7 + 179 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 69 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 190 , 7 + 192 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 69 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 203 , 7 + 205 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expectedTrue = { <nl> " 69 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegalTrue ) , <nl> } ; <nl> - verify ( checkConfigTrue , getPath ( " InputSemantic . java " ) , expectedTrue ) ; <nl> + verify ( checkConfigTrue , getPath ( " InputRegexpSemantic . java " ) , expectedTrue ) ; <nl> <nl> final String illegalFalse = " SYSTEM \ \ . ( OUT ) | ( ERR ) \ \ . PRINT ( LN ) ? \ \ ( " ; <nl> final DefaultConfiguration checkConfigFalse = <nl> @ @ - 211 , 7 + 213 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> checkConfigFalse . addAttribute ( " format " , illegalFalse ) ; <nl> checkConfigFalse . addAttribute ( " illegalPattern " , " true " ) ; <nl> final String [ ] expectedFalse = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfigFalse , getPath ( " InputSemantic . java " ) , expectedFalse ) ; <nl> + verify ( checkConfigFalse , getPath ( " InputRegexpSemantic . java " ) , expectedFalse ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 224 , 7 + 226 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " illegalPattern " , " true " ) ; <nl> checkConfig . addAttribute ( " ignoreComments " , " true " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 239 , 7 + 241 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 4 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 252 , 7 + 254 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " illegalPattern " , " true " ) ; <nl> checkConfig . addAttribute ( " ignoreComments " , " true " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 266 , 7 + 268 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 19 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 279 , 7 + 281 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " illegalPattern " , " true " ) ; <nl> checkConfig . addAttribute ( " ignoreComments " , " true " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 291 , 7 + 293 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " illegalPattern " , " true " ) ; <nl> checkConfig . addAttribute ( " ignoreComments " , " true " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 303 , 7 + 305 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " illegalPattern " , " true " ) ; <nl> checkConfig . addAttribute ( " ignoreComments " , " true " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 317 , 7 + 319 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 22 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 331 , 7 + 333 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 23 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 344 , 13 + 346 , 13 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " illegalPattern " , " true " ) ; <nl> checkConfig . addAttribute ( " ignoreComments " , " true " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> public void testOnFileStartingWithEmptyLine ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( RegexpCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputStartingWithEmptyLine . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpStartingWithEmptyLine . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpSemantic . java <nl> new file mode 100644 <nl> index 0000000 . . 182bb04 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpSemantic . java <nl> @ @ - 0 , 0 + 1 , 222 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . regexp . regexp ; <nl> + <nl> + import java . awt . * ; <nl> + import java . io . ByteArrayOutputStream ; <nl> + import java . io . File ; <nl> + <nl> + / * * <nl> + * Test case for detecting simple semantic errors . <nl> + * @ author Lars K ü hne <nl> + * * / <nl> + class InputRegexpSemantic <nl> + { <nl> + / * Boolean instantiation in a static initializer * / <nl> + static { <nl> + Boolean x = new Boolean ( true ) ; <nl> + } <nl> + <nl> + / * Boolean instantiation in a non - static initializer * / <nl> + { <nl> + Boolean x = new Boolean ( true ) ; <nl> + Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; <nl> + } <nl> + <nl> + / * * fully qualified Boolean instantiation in a method . * * / <nl> + Boolean getBoolean ( ) <nl> + { <nl> + return new Boolean ( true ) ; <nl> + } <nl> + <nl> + void otherInstantiations ( ) <nl> + { <nl> + / / instantiation of classes in the same package <nl> + Object o1 = new InputBraces ( ) ; <nl> + Object o2 = new InputModifier ( ) ; <nl> + / / classes in another package with . * import <nl> + ByteArrayOutputStream s = new ByteArrayOutputStream ( ) ; <nl> + File f = new File ( " / tmp " ) ; <nl> + / / classes in another package with explicit import <nl> + Dimension dim = new Dimension ( ) ; <nl> + Color col = new Color ( 0 , 0 , 0 ) ; <nl> + } <nl> + <nl> + void exHandlerTest ( ) <nl> + { <nl> + try { <nl> + ; / / do stuff and don ' t handle exceptions in some cases <nl> + } <nl> + catch ( IllegalStateException emptyCatchIsAlwaysAnError ) { <nl> + } <nl> + catch ( NullPointerException ex ) { <nl> + / / can never happen , but only commentig this is currently an error <nl> + / / Possible future enhancement : allowEmptyCatch = " commented " <nl> + } <nl> + catch ( ArrayIndexOutOfBoundsException ex ) { <nl> + ; <nl> + / / can never happen , semicolon makes checkstyle happy <nl> + / / this is a workaround for above problem <nl> + } <nl> + catch ( NegativeArraySizeException ex ) { <nl> + { <nl> + } <nl> + / / can never happen , empty compound statement is another workaround <nl> + } <nl> + catch ( UnsupportedOperationException handledException ) { <nl> + System . out . println ( handledException . getMessage ( ) ) ; <nl> + } <nl> + catch ( SecurityException ex ) { / * hello * / } <nl> + catch ( StringIndexOutOfBoundsException ex ) { } <nl> + catch ( IllegalArgumentException ex ) { } <nl> + <nl> + try { <nl> + } <nl> + finally { <nl> + } <nl> + try { <nl> + / / something <nl> + } <nl> + finally { <nl> + / / something <nl> + } <nl> + try { <nl> + ; / / something <nl> + } <nl> + finally { <nl> + ; / / statement <nl> + } <nl> + } <nl> + <nl> + / * * test * * / <nl> + private static final long IGNORE = 666l + 666L ; <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + public class EqualsVsHashCode1 <nl> + { <nl> + public boolean equals ( int a ) / / wrong arg type , don ' t flag <nl> + { <nl> + return a = = 1 ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode2 <nl> + { <nl> + public boolean equals ( String a ) / / flag <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode3 <nl> + { <nl> + public boolean equals ( Object a ) / / don ' t flag <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + public int hashCode ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode4 <nl> + { <nl> + / / in anon inner class <nl> + ByteArrayOutputStream bos1 = new ByteArrayOutputStream ( ) <nl> + { <nl> + public boolean equals ( Object a ) / / don ' t flag <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + public int hashCode ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + } ; <nl> + <nl> + ByteArrayOutputStream bos2 = new ByteArrayOutputStream ( ) <nl> + { <nl> + public boolean equals ( Object a ) / / flag <nl> + { <nl> + return true ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + public void triggerEmptyBlockWithoutBlock ( ) <nl> + { <nl> + / / an if statement without a block to increase test coverage <nl> + if ( true ) <nl> + return ; <nl> + } <nl> + <nl> + / / empty instance initializer <nl> + { <nl> + } <nl> + <nl> + public class EqualsVsHashCode5 <nl> + { <nl> + public < A > boolean equals ( int a ) / / wrong arg type , don ' t flag even with generics <nl> + { <nl> + return a = = 1 ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode6 <nl> + { <nl> + public < A > boolean equals ( Comparable < A > a ) / / flag , weven with generics <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> + private class InputBraces { <nl> + <nl> + } <nl> + <nl> + private class InputModifier { <nl> + <nl> + } <nl> + <nl> + synchronized void foo ( ) { <nl> + synchronized ( this ) { } / / not OK <nl> + synchronized ( Class . class ) { / / OK <nl> + synchronized ( new Object ( ) ) { <nl> + / / not OK if checking statements <nl> + } <nl> + } <nl> + } <nl> + <nl> + <nl> + static { <nl> + <nl> + int a = 0 ; } <nl> + <nl> + static { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpStartingWithEmptyLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpStartingWithEmptyLine . java <nl> new file mode 100644 <nl> index 0000000 . . cbe9ef0 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpStartingWithEmptyLine . java <nl> @ @ - 0 , 0 + 1 , 2 @ @ <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . regexp . regexp ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpTrailingComment . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpTrailingComment . java <nl> new file mode 100644 <nl> index 0000000 . . c480d9e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpTrailingComment . java <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . regexp . regexp ; <nl> + <nl> + public class InputRegexpTrailingComment { <nl> + int i ; / / don ' t use trailing comments : ) <nl> + / / it fine to have comment w / o any statement <nl> + / * good c - style comment . * / <nl> + int j ; / * bad c - style comment . * / <nl> + void method1 ( ) { / * some c - style multi - line <nl> + comment * / <nl> + Runnable r = ( new Runnable ( ) { <nl> + public void run ( ) { <nl> + } <nl> + } ) ; / * we should allow this * / <nl> + } / / we should allow this <nl> + / * <nl> + Let ' s check multi - line comments . <nl> + * / <nl> + / * c - style * / / / cpp - style <nl> + / * c - style 1 * / / * c - style 2 * / <nl> + <nl> + void method2 ( long ms / * we should ignore this * / ) { <nl> + / * comment before text * / int z ; <nl> + / * int y * / int y / * * / ; <nl> + } <nl> + <nl> + / * * <nl> + * comment with trailing space <nl> + * / <nl> + final static public String NAME = " Some Name " ; / / NOI18N <nl> + }
NEAREST DIFF (one line): diff - - git a / . gitattributes b / . gitattributes <nl> index 0f971e9 . . 36b9bd7 100644 <nl> - - - a / . gitattributes <nl> + + + b / . gitattributes <nl> @ @ - 1 , 3 + 1 , 4 @ @ <nl> - / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineLfAtEndOfFile . java eol = lf <nl> - / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrlfAtEndOfFile . java eol = crlf <nl> + / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineLfAtEndOfFile . java eol = lf <nl> + / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrlfAtEndOfFile . java eol = crlf <nl> / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java - text <nl> + / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrAtEndOfFile . java - text <nl> diff - - git a / config / checkstyle _ non _ main _ files _ suppressions . xml b / config / checkstyle _ non _ main _ files _ suppressions . xml <nl> index cb9dd4c . . 41284ac 100644 <nl> - - - a / config / checkstyle _ non _ main _ files _ suppressions . xml <nl> + + + b / config / checkstyle _ non _ main _ files _ suppressions . xml <nl> @ @ - 20 , 6 + 20 , 6 @ @ <nl> < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] astprinter [ \ \ / ] . * \ . javadoc " / > <nl> <nl> < ! - - Empty file cannot have any new line at the end . - - > <nl> - < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] checks [ \ \ / ] InputEmptyFile \ . txt " / > <nl> + < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] checks [ \ \ / ] misc [ \ \ / ] newlineatendoffile [ \ \ / ] InputEmptyFile \ . txt " / > <nl> < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] grammars [ \ \ / ] InputRegressionEmptyAst \ . txt " / > <nl> < / suppressions > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> index cdfd276 . . 1e1e96c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> @ @ - 60 , 7 + 60 , 10 @ @ public class NewlineAtEndOfFileCheckTest <nl> <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> - return super . getPath ( " checks " + File . separator + filename ) ; <nl> + return super . getPath ( " checks " + File . separator <nl> + + " misc " + File . separator <nl> + + " newlineatendoffile " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> index 4100fcd . . 5784e89 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> @ @ - 152 , 7 + 152 , 7 @ @ public class AstRegressionTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testNewlineCr ( ) throws Exception { <nl> verifyAst ( super . getPath ( " / checks / InputNewlineCrAtEndOfFileAst . txt " ) , <nl> - super . getPath ( " / checks / InputNewlineCrAtEndOfFile . java " ) , true ) ; <nl> + super . getPath ( " / checks / InputAstRegressionNewlineCrAtEndOfFile . java " ) , true ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAstRegressionNewlineCrAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAstRegressionNewlineCrAtEndOfFile . java <nl> new file mode 100644 <nl> index 0000000 . . 46e2b39 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAstRegressionNewlineCrAtEndOfFile . java <nl> @ @ - 0 , 0 + 1 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> / / Test case file for checkstyle . <nl> / / Created : 2015 <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> / * * <nl> * Test case for detection of an existing CR newline at EOF , using the <nl> * NewlineAtEndOfFileCheck . <nl> * @ author Martin Steiger <nl> * * / <nl> public interface InputAstRegressionNewlineCrAtEndOfFile <nl> { <nl> / * * Test with ending with CR newline <nl> * / <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputEmptyFile . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputEmptyFile . txt <nl> deleted file mode 100644 <nl> index e69de29 . . 0000000 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java <nl> deleted file mode 100644 <nl> index 8c097b1 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java <nl> + + + / dev / null <nl> @ @ - 1 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> / / Test case file for checkstyle . <nl> / / Created : 2015 <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> / * * <nl> * Test case for detection of an existing CR newline at EOF , using the <nl> * NewlineAtEndOfFileCheck . <nl> * @ author Martin Steiger <nl> * * / <nl> public interface InputNewlineCrAtEndOfFile <nl> { <nl> / * * Test with ending with CR newline <nl> * / <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt <nl> index 9d1e889 . . 30609ef 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt <nl> @ @ - 25 , 7 + 25 , 7 @ @ INTERFACE _ DEF - > INTERFACE _ DEF [ 12 : 0 ] <nl> | | ` - - BLOCK _ COMMENT _ END - > * / [ 11 : 2 ] <nl> | ` - - LITERAL _ PUBLIC - > public [ 12 : 0 ] <nl> | - - LITERAL _ INTERFACE - > interface [ 12 : 7 ] <nl> - | - - IDENT - > InputNewlineCrAtEndOfFile [ 12 : 17 ] <nl> + | - - IDENT - > InputAstRegressionNewlineCrAtEndOfFile [ 12 : 17 ] <nl> ` - - OBJBLOCK - > OBJBLOCK [ 13 : 0 ] <nl> | - - LCURLY - > { [ 13 : 0 ] <nl> | - - BLOCK _ COMMENT _ BEGIN - > / * [ 14 : 0 ] <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrlfAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrlfAtEndOfFile . java <nl> deleted file mode 100644 <nl> index 8cdfa10 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrlfAtEndOfFile . java <nl> + + + / dev / null <nl> @ @ - 1 , 14 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2015 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks ; <nl> - <nl> - / * * <nl> - * Test case for detection of an existing CRLF newline at EOF , using the <nl> - * NewlineAtEndOfFileCheck . <nl> - * @ author Martin Steiger <nl> - * * / <nl> - public interface InputNewlineCrlfAtEndOfFile <nl> - { <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineLfAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineLfAtEndOfFile . java <nl> deleted file mode 100644 <nl> index 08ec9c9 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineLfAtEndOfFile . java <nl> + + + / dev / null <nl> @ @ - 1 , 14 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2015 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks ; <nl> - <nl> - / * * <nl> - * Test case for detection of an existing LF newline at EOF , using the <nl> - * NewlineAtEndOfFileCheck . <nl> - * @ author Martin Steiger <nl> - * * / <nl> - public interface InputNewlineLfAtEndOfFile <nl> - { <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNoNewlineAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNoNewlineAtEndOfFile . java <nl> deleted file mode 100644 <nl> index 218e617 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNoNewlineAtEndOfFile . java <nl> + + + / dev / null <nl> @ @ - 1 , 14 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2003 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks ; <nl> - <nl> - / * * <nl> - * Test case for detection of missing newlines at EOF , using the <nl> - * NewlineAtEndOfFileCheck . <nl> - * @ author Christopher Lenz <nl> - * * / <nl> - public interface InputNoNewlineAtEndOfFile <nl> - { <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputEmptyFile . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputEmptyFile . txt <nl> new file mode 100644 <nl> index 0000000 . . e69de29 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrAtEndOfFile . java <nl> new file mode 100644 <nl> index 0000000 . . 8c097b1 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrAtEndOfFile . java <nl> @ @ - 0 , 0 + 1 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> / / Test case file for checkstyle . <nl> / / Created : 2015 <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> / * * <nl> * Test case for detection of an existing CR newline at EOF , using the <nl> * NewlineAtEndOfFileCheck . <nl> * @ author Martin Steiger <nl> * * / <nl> public interface InputNewlineCrAtEndOfFile <nl> { <nl> / * * Test with ending with CR newline <nl> * / <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrlfAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrlfAtEndOfFile . java <nl> new file mode 100644 <nl> index 0000000 . . fd93ac6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrlfAtEndOfFile . java <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2015 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . misc . newlineatendoffile ; <nl> + <nl> + / * * <nl> + * Test case for detection of an existing CRLF newline at EOF , using the <nl> + * NewlineAtEndOfFileCheck . <nl> + * @ author Martin Steiger <nl> + * * / <nl> + public interface InputNewlineCrlfAtEndOfFile <nl> + { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineLfAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineLfAtEndOfFile . java <nl> new file mode 100644 <nl> index 0000000 . . bc8a9f8 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineLfAtEndOfFile . java <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2015 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . misc . newlineatendoffile ; <nl> + <nl> + / * * <nl> + * Test case for detection of an existing LF newline at EOF , using the <nl> + * NewlineAtEndOfFileCheck . <nl> + * @ author Martin Steiger <nl> + * * / <nl> + public interface InputNewlineLfAtEndOfFile <nl> + { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNoNewlineAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNoNewlineAtEndOfFile . java <nl> new file mode 100644 <nl> index 0000000 . . dbcb78f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNoNewlineAtEndOfFile . java <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2003 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . misc . newlineatendoffile ; <nl> + <nl> + / * * <nl> + * Test case for detection of missing newlines at EOF , using the <nl> + * NewlineAtEndOfFileCheck . <nl> + * @ author Christopher Lenz <nl> + * * / <nl> + public interface InputNoNewlineAtEndOfFile <nl> + { <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java 
 index 6d5dbf6 . . a93d0f5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java 
 @ @ - 37 , 7 + 37 , 9 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " regexp " + File . separator + filename ) ; 
 + + " regexp " + File . separator 
 + + " regexp " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 55 , 7 + 57 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 createCheckConfig ( RegexpCheck . class ) ; 
 checkConfig . addAttribute ( " format " , required ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 67 , 7 + 69 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 0 : " + getCheckMessage ( MSG _ REQUIRED _ REGEXP , required ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 78 , 7 + 80 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " format " , required ) ; 
 checkConfig . addAttribute ( " duplicateLimit " , " 0 " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 88 , 7 + 90 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " format " , required ) ; 
 checkConfig . addAttribute ( " duplicateLimit " , " - 1 " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 101 , 7 + 103 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 24 : " + getCheckMessage ( MSG _ DUPLICATE _ REGEXP , required ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 112 , 7 + 114 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " format " , illegal ) ; 
 checkConfig . addAttribute ( " illegalPattern " , " true " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 128 , 7 + 130 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 " 8 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , 
 " 9 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 146 , 7 + 148 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 " 8 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , 
 " 9 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , error + illegal ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 162 , 7 + 164 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 69 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , message ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 177 , 7 + 179 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 69 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 190 , 7 + 192 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 69 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 203 , 7 + 205 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 final String [ ] expectedTrue = { 
 " 69 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegalTrue ) , 
 } ; 
 - verify ( checkConfigTrue , getPath ( " InputSemantic . java " ) , expectedTrue ) ; 
 + verify ( checkConfigTrue , getPath ( " InputRegexpSemantic . java " ) , expectedTrue ) ; 
 
 final String illegalFalse = " SYSTEM \ \ . ( OUT ) | ( ERR ) \ \ . PRINT ( LN ) ? \ \ ( " ; 
 final DefaultConfiguration checkConfigFalse = 
 @ @ - 211 , 7 + 213 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 checkConfigFalse . addAttribute ( " format " , illegalFalse ) ; 
 checkConfigFalse . addAttribute ( " illegalPattern " , " true " ) ; 
 final String [ ] expectedFalse = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfigFalse , getPath ( " InputSemantic . java " ) , expectedFalse ) ; 
 + verify ( checkConfigFalse , getPath ( " InputRegexpSemantic . java " ) , expectedFalse ) ; 
 } 
 
 @ Test 
 @ @ - 224 , 7 + 226 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " illegalPattern " , " true " ) ; 
 checkConfig . addAttribute ( " ignoreComments " , " true " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 239 , 7 + 241 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 4 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 252 , 7 + 254 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " illegalPattern " , " true " ) ; 
 checkConfig . addAttribute ( " ignoreComments " , " true " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 266 , 7 + 268 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 19 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 279 , 7 + 281 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " illegalPattern " , " true " ) ; 
 checkConfig . addAttribute ( " ignoreComments " , " true " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 291 , 7 + 293 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " illegalPattern " , " true " ) ; 
 checkConfig . addAttribute ( " ignoreComments " , " true " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 303 , 7 + 305 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " illegalPattern " , " true " ) ; 
 checkConfig . addAttribute ( " ignoreComments " , " true " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 317 , 7 + 319 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 22 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 331 , 7 + 333 , 7 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 23 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , illegal ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 344 , 13 + 346 , 13 @ @ public class RegexpCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " illegalPattern " , " true " ) ; 
 checkConfig . addAttribute ( " ignoreComments " , " true " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputTrailingComment . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpTrailingComment . java " ) , expected ) ; 
 } 
 
 @ Test 
 public void testOnFileStartingWithEmptyLine ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( RegexpCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputStartingWithEmptyLine . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpStartingWithEmptyLine . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpSemantic . java 
 new file mode 100644 
 index 0000000 . . 182bb04 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpSemantic . java 
 @ @ - 0 , 0 + 1 , 222 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . regexp . regexp ; 
 + 
 + import java . awt . * ; 
 + import java . io . ByteArrayOutputStream ; 
 + import java . io . File ; 
 + 
 + / * * 
 + * Test case for detecting simple semantic errors . 
 + * @ author Lars K ü hne 
 + * * / 
 + class InputRegexpSemantic 
 + { 
 + / * Boolean instantiation in a static initializer * / 
 + static { 
 + Boolean x = new Boolean ( true ) ; 
 + } 
 + 
 + / * Boolean instantiation in a non - static initializer * / 
 + { 
 + Boolean x = new Boolean ( true ) ; 
 + Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; 
 + } 
 + 
 + / * * fully qualified Boolean instantiation in a method . * * / 
 + Boolean getBoolean ( ) 
 + { 
 + return new Boolean ( true ) ; 
 + } 
 + 
 + void otherInstantiations ( ) 
 + { 
 + / / instantiation of classes in the same package 
 + Object o1 = new InputBraces ( ) ; 
 + Object o2 = new InputModifier ( ) ; 
 + / / classes in another package with . * import 
 + ByteArrayOutputStream s = new ByteArrayOutputStream ( ) ; 
 + File f = new File ( " / tmp " ) ; 
 + / / classes in another package with explicit import 
 + Dimension dim = new Dimension ( ) ; 
 + Color col = new Color ( 0 , 0 , 0 ) ; 
 + } 
 + 
 + void exHandlerTest ( ) 
 + { 
 + try { 
 + ; / / do stuff and don ' t handle exceptions in some cases 
 + } 
 + catch ( IllegalStateException emptyCatchIsAlwaysAnError ) { 
 + } 
 + catch ( NullPointerException ex ) { 
 + / / can never happen , but only commentig this is currently an error 
 + / / Possible future enhancement : allowEmptyCatch = " commented " 
 + } 
 + catch ( ArrayIndexOutOfBoundsException ex ) { 
 + ; 
 + / / can never happen , semicolon makes checkstyle happy 
 + / / this is a workaround for above problem 
 + } 
 + catch ( NegativeArraySizeException ex ) { 
 + { 
 + } 
 + / / can never happen , empty compound statement is another workaround 
 + } 
 + catch ( UnsupportedOperationException handledException ) { 
 + System . out . println ( handledException . getMessage ( ) ) ; 
 + } 
 + catch ( SecurityException ex ) { / * hello * / } 
 + catch ( StringIndexOutOfBoundsException ex ) { } 
 + catch ( IllegalArgumentException ex ) { } 
 + 
 + try { 
 + } 
 + finally { 
 + } 
 + try { 
 + / / something 
 + } 
 + finally { 
 + / / something 
 + } 
 + try { 
 + ; / / something 
 + } 
 + finally { 
 + ; / / statement 
 + } 
 + } 
 + 
 + / * * test * * / 
 + private static final long IGNORE = 666l + 666L ; 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + public class EqualsVsHashCode1 
 + { 
 + public boolean equals ( int a ) / / wrong arg type , don ' t flag 
 + { 
 + return a = = 1 ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode2 
 + { 
 + public boolean equals ( String a ) / / flag 
 + { 
 + return true ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode3 
 + { 
 + public boolean equals ( Object a ) / / don ' t flag 
 + { 
 + return true ; 
 + } 
 + 
 + public int hashCode ( ) 
 + { 
 + return 0 ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode4 
 + { 
 + / / in anon inner class 
 + ByteArrayOutputStream bos1 = new ByteArrayOutputStream ( ) 
 + { 
 + public boolean equals ( Object a ) / / don ' t flag 
 + { 
 + return true ; 
 + } 
 + 
 + public int hashCode ( ) 
 + { 
 + return 0 ; 
 + } 
 + } ; 
 + 
 + ByteArrayOutputStream bos2 = new ByteArrayOutputStream ( ) 
 + { 
 + public boolean equals ( Object a ) / / flag 
 + { 
 + return true ; 
 + } 
 + } ; 
 + } 
 + 
 + public void triggerEmptyBlockWithoutBlock ( ) 
 + { 
 + / / an if statement without a block to increase test coverage 
 + if ( true ) 
 + return ; 
 + } 
 + 
 + / / empty instance initializer 
 + { 
 + } 
 + 
 + public class EqualsVsHashCode5 
 + { 
 + public < A > boolean equals ( int a ) / / wrong arg type , don ' t flag even with generics 
 + { 
 + return a = = 1 ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode6 
 + { 
 + public < A > boolean equals ( Comparable < A > a ) / / flag , weven with generics 
 + { 
 + return true ; 
 + } 
 + } 
 + 
 + private class InputBraces { 
 + 
 + } 
 + 
 + private class InputModifier { 
 + 
 + } 
 + 
 + synchronized void foo ( ) { 
 + synchronized ( this ) { } / / not OK 
 + synchronized ( Class . class ) { / / OK 
 + synchronized ( new Object ( ) ) { 
 + / / not OK if checking statements 
 + } 
 + } 
 + } 
 + 
 + 
 + static { 
 + 
 + int a = 0 ; } 
 + 
 + static { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpStartingWithEmptyLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpStartingWithEmptyLine . java 
 new file mode 100644 
 index 0000000 . . cbe9ef0 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpStartingWithEmptyLine . java 
 @ @ - 0 , 0 + 1 , 2 @ @ 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . regexp . regexp ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpTrailingComment . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpTrailingComment . java 
 new file mode 100644 
 index 0000000 . . c480d9e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexp / InputRegexpTrailingComment . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . regexp . regexp ; 
 + 
 + public class InputRegexpTrailingComment { 
 + int i ; / / don ' t use trailing comments : ) 
 + / / it fine to have comment w / o any statement 
 + / * good c - style comment . * / 
 + int j ; / * bad c - style comment . * / 
 + void method1 ( ) { / * some c - style multi - line 
 + comment * / 
 + Runnable r = ( new Runnable ( ) { 
 + public void run ( ) { 
 + } 
 + } ) ; / * we should allow this * / 
 + } / / we should allow this 
 + / * 
 + Let ' s check multi - line comments . 
 + * / 
 + / * c - style * / / / cpp - style 
 + / * c - style 1 * / / * c - style 2 * / 
 + 
 + void method2 ( long ms / * we should ignore this * / ) { 
 + / * comment before text * / int z ; 
 + / * int y * / int y / * * / ; 
 + } 
 + 
 + / * * 
 + * comment with trailing space 
 + * / 
 + final static public String NAME = " Some Name " ; / / NOI18N 
 + }

NEAREST DIFF:
diff - - git a / . gitattributes b / . gitattributes 
 index 0f971e9 . . 36b9bd7 100644 
 - - - a / . gitattributes 
 + + + b / . gitattributes 
 @ @ - 1 , 3 + 1 , 4 @ @ 
 - / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineLfAtEndOfFile . java eol = lf 
 - / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrlfAtEndOfFile . java eol = crlf 
 + / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineLfAtEndOfFile . java eol = lf 
 + / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrlfAtEndOfFile . java eol = crlf 
 / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java - text 
 + / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrAtEndOfFile . java - text 
 diff - - git a / config / checkstyle _ non _ main _ files _ suppressions . xml b / config / checkstyle _ non _ main _ files _ suppressions . xml 
 index cb9dd4c . . 41284ac 100644 
 - - - a / config / checkstyle _ non _ main _ files _ suppressions . xml 
 + + + b / config / checkstyle _ non _ main _ files _ suppressions . xml 
 @ @ - 20 , 6 + 20 , 6 @ @ 
 < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] astprinter [ \ \ / ] . * \ . javadoc " / > 
 
 < ! - - Empty file cannot have any new line at the end . - - > 
 - < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] checks [ \ \ / ] InputEmptyFile \ . txt " / > 
 + < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] checks [ \ \ / ] misc [ \ \ / ] newlineatendoffile [ \ \ / ] InputEmptyFile \ . txt " / > 
 < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] grammars [ \ \ / ] InputRegressionEmptyAst \ . txt " / > 
 < / suppressions > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 index cdfd276 . . 1e1e96c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 @ @ - 60 , 7 + 60 , 10 @ @ public class NewlineAtEndOfFileCheckTest 
 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 - return super . getPath ( " checks " + File . separator + filename ) ; 
 + return super . getPath ( " checks " + File . separator 
 + + " misc " + File . separator 
 + + " newlineatendoffile " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 index 4100fcd . . 5784e89 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 @ @ - 152 , 7 + 152 , 7 @ @ public class AstRegressionTest extends BaseCheckTestSupport { 
 @ Test 
 public void testNewlineCr ( ) throws Exception { 
 verifyAst ( super . getPath ( " / checks / InputNewlineCrAtEndOfFileAst . txt " ) , 
 - super . getPath ( " / checks / InputNewlineCrAtEndOfFile . java " ) , true ) ; 
 + super . getPath ( " / checks / InputAstRegressionNewlineCrAtEndOfFile . java " ) , true ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAstRegressionNewlineCrAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAstRegressionNewlineCrAtEndOfFile . java 
 new file mode 100644 
 index 0000000 . . 46e2b39 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAstRegressionNewlineCrAtEndOfFile . java 
 @ @ - 0 , 0 + 1 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Test case file for checkstyle . 
 / / Created : 2015 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 / * * 
 * Test case for detection of an existing CR newline at EOF , using the 
 * NewlineAtEndOfFileCheck . 
 * @ author Martin Steiger 
 * * / 
 public interface InputAstRegressionNewlineCrAtEndOfFile 
 { 
 / * * Test with ending with CR newline 
 * / 
 } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputEmptyFile . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputEmptyFile . txt 
 deleted file mode 100644 
 index e69de29 . . 0000000 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java 
 deleted file mode 100644 
 index 8c097b1 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java 
 + + + / dev / null 
 @ @ - 1 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Test case file for checkstyle . 
 / / Created : 2015 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 / * * 
 * Test case for detection of an existing CR newline at EOF , using the 
 * NewlineAtEndOfFileCheck . 
 * @ author Martin Steiger 
 * * / 
 public interface InputNewlineCrAtEndOfFile 
 { 
 / * * Test with ending with CR newline 
 * / 
 } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt 
 index 9d1e889 . . 30609ef 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt 
 @ @ - 25 , 7 + 25 , 7 @ @ INTERFACE _ DEF - > INTERFACE _ DEF [ 12 : 0 ] 
 | | ` - - BLOCK _ COMMENT _ END - > * / [ 11 : 2 ] 
 | ` - - LITERAL _ PUBLIC - > public [ 12 : 0 ] 
 | - - LITERAL _ INTERFACE - > interface [ 12 : 7 ] 
 - | - - IDENT - > InputNewlineCrAtEndOfFile [ 12 : 17 ] 
 + | - - IDENT - > InputAstRegressionNewlineCrAtEndOfFile [ 12 : 17 ] 
 ` - - OBJBLOCK - > OBJBLOCK [ 13 : 0 ] 
 | - - LCURLY - > { [ 13 : 0 ] 
 | - - BLOCK _ COMMENT _ BEGIN - > / * [ 14 : 0 ] 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrlfAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrlfAtEndOfFile . java 
 deleted file mode 100644 
 index 8cdfa10 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrlfAtEndOfFile . java 
 + + + / dev / null 
 @ @ - 1 , 14 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2015 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks ; 
 - 
 - / * * 
 - * Test case for detection of an existing CRLF newline at EOF , using the 
 - * NewlineAtEndOfFileCheck . 
 - * @ author Martin Steiger 
 - * * / 
 - public interface InputNewlineCrlfAtEndOfFile 
 - { 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineLfAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineLfAtEndOfFile . java 
 deleted file mode 100644 
 index 08ec9c9 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineLfAtEndOfFile . java 
 + + + / dev / null 
 @ @ - 1 , 14 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2015 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks ; 
 - 
 - / * * 
 - * Test case for detection of an existing LF newline at EOF , using the 
 - * NewlineAtEndOfFileCheck . 
 - * @ author Martin Steiger 
 - * * / 
 - public interface InputNewlineLfAtEndOfFile 
 - { 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNoNewlineAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNoNewlineAtEndOfFile . java 
 deleted file mode 100644 
 index 218e617 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNoNewlineAtEndOfFile . java 
 + + + / dev / null 
 @ @ - 1 , 14 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2003 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks ; 
 - 
 - / * * 
 - * Test case for detection of missing newlines at EOF , using the 
 - * NewlineAtEndOfFileCheck . 
 - * @ author Christopher Lenz 
 - * * / 
 - public interface InputNoNewlineAtEndOfFile 
 - { 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputEmptyFile . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputEmptyFile . txt 
 new file mode 100644 
 index 0000000 . . e69de29 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrAtEndOfFile . java 
 new file mode 100644 
 index 0000000 . . 8c097b1 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrAtEndOfFile . java 
 @ @ - 0 , 0 + 1 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Test case file for checkstyle . 
 / / Created : 2015 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 / * * 
 * Test case for detection of an existing CR newline at EOF , using the 
 * NewlineAtEndOfFileCheck . 
 * @ author Martin Steiger 
 * * / 
 public interface InputNewlineCrAtEndOfFile 
 { 
 / * * Test with ending with CR newline 
 * / 
 } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrlfAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrlfAtEndOfFile . java 
 new file mode 100644 
 index 0000000 . . fd93ac6 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineCrlfAtEndOfFile . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2015 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . misc . newlineatendoffile ; 
 + 
 + / * * 
 + * Test case for detection of an existing CRLF newline at EOF , using the 
 + * NewlineAtEndOfFileCheck . 
 + * @ author Martin Steiger 
 + * * / 
 + public interface InputNewlineCrlfAtEndOfFile 
 + { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineLfAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineLfAtEndOfFile . java 
 new file mode 100644 
 index 0000000 . . bc8a9f8 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineLfAtEndOfFile . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2015 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . misc . newlineatendoffile ; 
 + 
 + / * * 
 + * Test case for detection of an existing LF newline at EOF , using the 
 + * NewlineAtEndOfFileCheck . 
 + * @ author Martin Steiger 
 + * * / 
 + public interface InputNewlineLfAtEndOfFile 
 + { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNoNewlineAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNoNewlineAtEndOfFile . java 
 new file mode 100644 
 index 0000000 . . dbcb78f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNoNewlineAtEndOfFile . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2003 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . misc . newlineatendoffile ; 
 + 
 + / * * 
 + * Test case for detection of missing newlines at EOF , using the 
 + * NewlineAtEndOfFileCheck . 
 + * @ author Christopher Lenz 
 + * * / 
 + public interface InputNoNewlineAtEndOfFile 
 + { 
 + } 
 \ No newline at end of file
