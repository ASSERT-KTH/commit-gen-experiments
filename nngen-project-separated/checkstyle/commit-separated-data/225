BLEU SCORE: 0.08295193507109855

TEST MSG: Issue # 5949 : fix ' Redundant Collection operation ' violations
GENERATED MSG: Issue # 3735 : added lambdas to NeedBraces for checkstyle config

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> index e5e069f . . 17ef14f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> @ @ - 498 , 12 + 498 , 10 @ @ public class VisibilityModifierCheck <nl> / / If imported canonical class name is not specified as allowed immutable class , <nl> / / but its short name collides with one of specified class - removes the short name <nl> / / from list to avoid names collision <nl> - if ( ! immutableClassCanonicalNames . contains ( canonicalName ) <nl> - & & immutableClassShortNames . contains ( shortName ) ) { <nl> + if ( ! immutableClassCanonicalNames . contains ( canonicalName ) ) { <nl> immutableClassShortNames . remove ( shortName ) ; <nl> } <nl> - if ( ! ignoreAnnotationCanonicalNames . contains ( canonicalName ) <nl> - & & ignoreAnnotationShortNames . contains ( shortName ) ) { <nl> + if ( ! ignoreAnnotationCanonicalNames . contains ( canonicalName ) ) { <nl> ignoreAnnotationShortNames . remove ( shortName ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> index 8f57e76 . . a42dc0d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> @ @ - 193 , 6 + 193 , 15 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck <nl> <nl> @ Override <nl> public Set < String > getExternalResourceLocations ( ) { <nl> - return Collections . singleton ( headerFile . toString ( ) ) ; <nl> + final Set < String > result ; <nl> + <nl> + if ( headerFile = = null ) { <nl> + result = Collections . emptySet ( ) ; <nl> + } <nl> + else { <nl> + result = Collections . singleton ( headerFile . toString ( ) ) ; <nl> + } <nl> + <nl> + return result ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> index bbc7906 . . e6938f4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> @ @ - 268 , 4 + 268 , 25 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { <nl> verify ( checker , getPath ( " InputHeader . java " ) , expected ) ; <nl> <nl> } <nl> + <nl> + @ Test <nl> + public void testCacheHeaderWithoutFile ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( HeaderCheck . class ) ; <nl> + checkConfig . addAttribute ( " header " , " Test " ) ; <nl> + <nl> + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyle _ checks " ) ; <nl> + checkerConfig . addChild ( checkConfig ) ; <nl> + checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + <nl> + final Checker checker = new Checker ( ) ; <nl> + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . configure ( checkerConfig ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 1 : " + getCheckMessage ( MSG _ MISMATCH , " Test " ) , <nl> + } ; <nl> + <nl> + verify ( checker , getPath ( " InputHeader . java " ) , expected ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 index e5e069f . . 17ef14f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 @ @ - 498 , 12 + 498 , 10 @ @ public class VisibilityModifierCheck 
 / / If imported canonical class name is not specified as allowed immutable class , 
 / / but its short name collides with one of specified class - removes the short name 
 / / from list to avoid names collision 
 - if ( ! immutableClassCanonicalNames . contains ( canonicalName ) 
 - & & immutableClassShortNames . contains ( shortName ) ) { 
 + if ( ! immutableClassCanonicalNames . contains ( canonicalName ) ) { 
 immutableClassShortNames . remove ( shortName ) ; 
 } 
 - if ( ! ignoreAnnotationCanonicalNames . contains ( canonicalName ) 
 - & & ignoreAnnotationShortNames . contains ( shortName ) ) { 
 + if ( ! ignoreAnnotationCanonicalNames . contains ( canonicalName ) ) { 
 ignoreAnnotationShortNames . remove ( shortName ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 index 8f57e76 . . a42dc0d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 @ @ - 193 , 6 + 193 , 15 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck 
 
 @ Override 
 public Set < String > getExternalResourceLocations ( ) { 
 - return Collections . singleton ( headerFile . toString ( ) ) ; 
 + final Set < String > result ; 
 + 
 + if ( headerFile = = null ) { 
 + result = Collections . emptySet ( ) ; 
 + } 
 + else { 
 + result = Collections . singleton ( headerFile . toString ( ) ) ; 
 + } 
 + 
 + return result ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 index bbc7906 . . e6938f4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 @ @ - 268 , 4 + 268 , 25 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { 
 verify ( checker , getPath ( " InputHeader . java " ) , expected ) ; 
 
 } 
 + 
 + @ Test 
 + public void testCacheHeaderWithoutFile ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( HeaderCheck . class ) ; 
 + checkConfig . addAttribute ( " header " , " Test " ) ; 
 + 
 + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyle _ checks " ) ; 
 + checkerConfig . addChild ( checkConfig ) ; 
 + checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + 
 + final Checker checker = new Checker ( ) ; 
 + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . configure ( checkerConfig ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 + 
 + final String [ ] expected = { 
 + " 1 : " + getCheckMessage ( MSG _ MISMATCH , " Test " ) , 
 + } ; 
 + 
 + verify ( checker , getPath ( " InputHeader . java " ) , expected ) ; 
 + } 
 }
