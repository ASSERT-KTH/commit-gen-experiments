BLEU SCORE: 0.16515821590069035

TEST MSG: Issue # 4998 : Add columnCharIndex field to LocalizedMessage
GENERATED MSG: Issue # 4419 : Add token type to LocalizedMessage

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java <nl> index 81eead9 . . 08866a3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java <nl> @ @ - 246 , 7 + 246 , 28 @ @ public abstract class AbstractCheck extends AbstractViolationReporter { <nl> * @ param args arguments to format <nl> * / <nl> public final void log ( DetailAST ast , String key , Object . . . args ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , key , args ) ; <nl> + <nl> + / / CommonUtils . lengthExpandedTabs returns column number considering tabulation <nl> + / / characters , it takes line from the file by line number , ast column number and tab <nl> + / / width as arguments . Returned value is 0 - based , but user must see column number starting <nl> + / / from 1 , that is why result of the method CommonUtils . lengthExpandedTabs <nl> + / / is increased by one . <nl> + <nl> + final int col = 1 + CommonUtils . lengthExpandedTabs ( <nl> + getLines ( ) [ ast . getLineNo ( ) - 1 ] , ast . getColumnNo ( ) , tabWidth ) ; <nl> + context . get ( ) . messages . add ( <nl> + new LocalizedMessage ( <nl> + ast . getLineNo ( ) , <nl> + col , <nl> + ast . getColumnNo ( ) , <nl> + ast . getType ( ) , <nl> + getMessageBundle ( ) , <nl> + key , <nl> + args , <nl> + getSeverityLevel ( ) , <nl> + getId ( ) , <nl> + getClass ( ) , <nl> + getCustomMessages ( ) . get ( key ) ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java <nl> index 3161f30 . . b4eca49 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java <nl> @ @ - 45 , 7 + 45 , 7 @ @ import java . util . ResourceBundle . Control ; <nl> * <nl> * @ author Oliver Burn <nl> * @ author lkuehne <nl> - * @ noinspection ConstructorWithTooManyParameters , SerializableHasSerializationMethods <nl> + * @ noinspection SerializableHasSerializationMethods , ClassWithTooManyConstructors <nl> * / <nl> public final class LocalizedMessage <nl> implements Comparable < LocalizedMessage > , Serializable { <nl> @ @ - 68 , 6 + 68 , 8 @ @ public final class LocalizedMessage <nl> private final int lineNo ; <nl> / * * The column number . * * / <nl> private final int columnNo ; <nl> + / * * The column char index . * * / <nl> + private final int columnCharIndex ; <nl> / * * The token type constant . See { @ link TokenTypes } . * * / <nl> private final int tokenType ; <nl> <nl> @ @ - 99 , 6 + 101 , 7 @ @ public final class LocalizedMessage <nl> * <nl> * @ param lineNo line number associated with the message <nl> * @ param columnNo column number associated with the message <nl> + * @ param columnCharIndex column char index associated with the message <nl> * @ param tokenType token type of the event associated with the message . See { @ link TokenTypes } <nl> * @ param bundle resource bundle name <nl> * @ param key the key to locate the translation <nl> @ @ - 107 , 10 + 110 , 12 @ @ public final class LocalizedMessage <nl> * @ param moduleId the id of the module the message is associated with <nl> * @ param sourceClass the Class that is the source of the message <nl> * @ param customMessage optional custom message overriding the default <nl> + * @ noinspection ConstructorWithTooManyParameters <nl> * / <nl> / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . <nl> public LocalizedMessage ( int lineNo , <nl> int columnNo , <nl> + int columnCharIndex , <nl> int tokenType , <nl> String bundle , <nl> String key , <nl> @ @ - 121 , 6 + 126 , 7 @ @ public final class LocalizedMessage <nl> String customMessage ) { <nl> this . lineNo = lineNo ; <nl> this . columnNo = columnNo ; <nl> + this . columnCharIndex = columnCharIndex ; <nl> this . tokenType = tokenType ; <nl> this . key = key ; <nl> <nl> @ @ - 142 , 6 + 148 , 36 @ @ public final class LocalizedMessage <nl> * <nl> * @ param lineNo line number associated with the message <nl> * @ param columnNo column number associated with the message <nl> + * @ param tokenType token type of the event associated with the message . See { @ link TokenTypes } <nl> + * @ param bundle resource bundle name <nl> + * @ param key the key to locate the translation <nl> + * @ param args arguments for the translation <nl> + * @ param severityLevel severity level for the message <nl> + * @ param moduleId the id of the module the message is associated with <nl> + * @ param sourceClass the Class that is the source of the message <nl> + * @ param customMessage optional custom message overriding the default <nl> + * @ noinspection ConstructorWithTooManyParameters <nl> + * / <nl> + / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . <nl> + public LocalizedMessage ( int lineNo , <nl> + int columnNo , <nl> + int tokenType , <nl> + String bundle , <nl> + String key , <nl> + Object [ ] args , <nl> + SeverityLevel severityLevel , <nl> + String moduleId , <nl> + Class < ? > sourceClass , <nl> + String customMessage ) { <nl> + this ( lineNo , columnNo , columnNo , tokenType , bundle , key , args , severityLevel , moduleId , <nl> + sourceClass , customMessage ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates a new { @ code LocalizedMessage } instance . <nl> + * <nl> + * @ param lineNo line number associated with the message <nl> + * @ param columnNo column number associated with the message <nl> * @ param bundle resource bundle name <nl> * @ param key the key to locate the translation <nl> * @ param args arguments for the translation <nl> @ @ - 149 , 6 + 185 , 7 @ @ public final class LocalizedMessage <nl> * @ param moduleId the id of the module the message is associated with <nl> * @ param sourceClass the Class that is the source of the message <nl> * @ param customMessage optional custom message overriding the default <nl> + * @ noinspection ConstructorWithTooManyParameters <nl> * / <nl> / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . <nl> public LocalizedMessage ( int lineNo , <nl> @ @ - 175 , 6 + 212 , 7 @ @ public final class LocalizedMessage <nl> * @ param moduleId the id of the module the message is associated with <nl> * @ param sourceClass the Class that is the source of the message <nl> * @ param customMessage optional custom message overriding the default <nl> + * @ noinspection ConstructorWithTooManyParameters <nl> * / <nl> / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . <nl> public LocalizedMessage ( int lineNo , <nl> @ @ - 207 , 6 + 245 , 7 @ @ public final class LocalizedMessage <nl> * @ param moduleId the id of the module the message is associated with <nl> * @ param sourceClass the source class for the message <nl> * @ param customMessage optional custom message overriding the default <nl> + * @ noinspection ConstructorWithTooManyParameters <nl> * / <nl> / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . <nl> public LocalizedMessage ( int lineNo , <nl> @ @ - 232 , 6 + 271 , 7 @ @ public final class LocalizedMessage <nl> * @ param moduleId the id of the module the message is associated with <nl> * @ param sourceClass the name of the source for the message <nl> * @ param customMessage optional custom message overriding the default <nl> + * @ noinspection ConstructorWithTooManyParameters <nl> * / <nl> public LocalizedMessage ( <nl> int lineNo , <nl> @ @ - 257 , 6 + 297 , 7 @ @ public final class LocalizedMessage <nl> final LocalizedMessage localizedMessage = ( LocalizedMessage ) object ; <nl> return Objects . equals ( lineNo , localizedMessage . lineNo ) <nl> & & Objects . equals ( columnNo , localizedMessage . columnNo ) <nl> + & & Objects . equals ( columnCharIndex , localizedMessage . columnCharIndex ) <nl> & & Objects . equals ( tokenType , localizedMessage . tokenType ) <nl> & & Objects . equals ( severityLevel , localizedMessage . severityLevel ) <nl> & & Objects . equals ( moduleId , localizedMessage . moduleId ) <nl> @ @ - 269 , 8 + 310 , 8 @ @ public final class LocalizedMessage <nl> <nl> @ Override <nl> public int hashCode ( ) { <nl> - return Objects . hash ( lineNo , columnNo , tokenType , severityLevel , moduleId , key , bundle , <nl> - sourceClass , customMessage , Arrays . hashCode ( args ) ) ; <nl> + return Objects . hash ( lineNo , columnNo , columnCharIndex , tokenType , severityLevel , moduleId , <nl> + key , bundle , sourceClass , customMessage , Arrays . hashCode ( args ) ) ; <nl> } <nl> <nl> / * * Clears the cache . * / <nl> @ @ - 350 , 6 + 391 , 14 @ @ public final class LocalizedMessage <nl> } <nl> <nl> / * * <nl> + * Gets the column char index . <nl> + * @ return the column char index <nl> + * / <nl> + public int getColumnCharIndex ( ) { <nl> + return columnCharIndex ; <nl> + } <nl> + <nl> + / * * <nl> * Gets the token type . <nl> * @ return the token type <nl> * / <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java <nl> index 972d586 . . e8183e6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java <nl> @ @ - 224 , 6 + 224 , 15 @ @ public class LocalizedMessageTest { <nl> } <nl> <nl> @ Test <nl> + public void testGetColumnCharIndex ( ) { <nl> + final LocalizedMessage localizedMessage1 = new LocalizedMessage ( 1 , 1 , 123 , <nl> + TokenTypes . CLASS _ DEF , " messages . properties " , " key " , null , SeverityLevel . ERROR , <nl> + null , getClass ( ) , null ) ; <nl> + <nl> + assertEquals ( " Invalid column char index " , 123 , localizedMessage1 . getColumnCharIndex ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testCompareToWithDifferentModuleId ( ) { <nl> final LocalizedMessage message1 = createSampleLocalizedMessageWithId ( " module1 " ) ; <nl> final LocalizedMessage message2 = createSampleLocalizedMessageWithId ( " module2 " ) ;
NEAREST DIFF (one line): diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index 8840803 . . 380484b 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 9 , 7 + 9 , 7 @ @ <nl> < option name = " m _ minLength " value = " 5 " / > <nl> < / inspection _ tool > <nl> < inspection _ tool class = " AbstractClassNeverImplemented " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> - < inspection _ tool class = " AbstractClassWithOnlyOneDirectInheritor " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> + < inspection _ tool class = " AbstractClassWithOnlyOneDirectInheritor " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " AbstractClassWithoutAbstractMethods " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " AbstractMethodCallInConstructor " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " AbstractMethodOverridesAbstractMethod " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 26 , 6 + 26 , 7 @ @ <nl> < inspection _ tool class = " AlphaUnsortedPropertiesFile " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " AmbiguousFieldAccess " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " AmbiguousMethodCall " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> + < ! - - this rule is inspection is only for old java , we are ok to use annotations - - > <nl> < inspection _ tool class = " Annotation " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " AnnotationClass " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " AnnotationNamingConvention " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > <nl> @ @ - 64 , 6 + 65 , 7 @ @ <nl> < inspection _ tool class = " ArrayEquality " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ArrayEquals " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ArrayHashCode " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - we see no harm for us for such usages - - > <nl> < inspection _ tool class = " ArrayLengthInLoopCondition " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " ArrayObjectsEquals " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ArraysAsListWithZeroOrOneArgument " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 102 , 10 + 104 , 10 @ @ <nl> < / inspection _ tool > <nl> < inspection _ tool class = " AssignmentToSuperclassField " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " AssignmentUsedAsCondition " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> - < inspection _ tool class = " AutoBoxing " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> - < option name = " ignoreAddedToCollection " value = " false " / > <nl> - < / inspection _ tool > <nl> + < ! - - we are ok to use auto - boxing as we use modern java - - > <nl> + < inspection _ tool class = " AutoBoxing " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " AutoCloseableResource " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> + < ! - - we are ok to use auto - unboxing as we use modern java - - > <nl> < inspection _ tool class = " AutoUnboxing " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " AutowiredDependenciesInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " AwaitNotInLoop " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> @ @ - 261 , 8 + 263 , 8 @ @ <nl> < inspection _ tool class = " CharacterComparison " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CheckDtdRefs " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CheckEmptyScriptTag " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> - < inspection _ tool class = " CheckForOutOfMemoryOnLargeArrayAllocation " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> - < option name = " m _ limit " value = " 64 " / > <nl> + < inspection _ tool class = " CheckForOutOfMemoryOnLargeArrayAllocation " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> + < option name = " m _ limit " value = " 1024 " / > <nl> < / inspection _ tool > <nl> < inspection _ tool class = " CheckImageSize " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CheckNodeTest " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 334 , 11 + 336 , 13 @ @ <nl> < inspection _ tool class = " ClassWithTooManyTransitiveDependents " enabled = " true " level = " ERROR " enabled _ by _ default = " false " > <nl> < option name = " limit " value = " 500 " / > <nl> < / inspection _ tool > <nl> + < ! - - we do not like suggested style - - > <nl> < inspection _ tool class = " ClassWithoutConstructor " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " ClassWithoutLogger " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> < option name = " loggerNamesString " value = " java . util . logging . Logger , org . slf4j . Logger , org . apache . commons . logging . Log , org . apache . log4j . Logger " / > <nl> < option name = " ignoreSuperLoggers " value = " false " / > <nl> < / inspection _ tool > <nl> + < ! - - we do not like suggested style - - > <nl> < inspection _ tool class = " ClassWithoutNoArgConstructor " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> < option name = " m _ ignoreClassesWithNoConstructors " value = " true " / > <nl> < / inspection _ tool > <nl> @ @ - 351 , 7 + 355 , 9 @ @ <nl> < inspection _ tool class = " CloneableImplementsClone " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> < option name = " m _ ignoreCloneableDueToInheritance " value = " true " / > <nl> < / inspection _ tool > <nl> - < inspection _ tool class = " CodeBlock2Expr " enabled = " false " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - decision to suppress was only a matter of habit to see code in more old style with extra curly braces , <nl> + we might change our mind in future . - - > <nl> + < inspection _ tool class = " CodeBlock2Expr " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " CoffeeScriptArgumentsOutsideFunction " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CoffeeScriptFunctionSignatures " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CoffeeScriptInfiniteLoop " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 619 , 6 + 625 , 7 @ @ <nl> < inspection _ tool class = " EmptyTryBlockJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " EmptyWebServiceClass " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " EnumAsName " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - we are ok to use enumeration as we use modern java - - > <nl> < inspection _ tool class = " EnumClass " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " EnumSwitchStatementWhichMissesCases " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> < option name = " ignoreSwitchStatementsWithDefault " value = " false " / > <nl> @ @ - 680 , 6 + 687 , 7 @ @ <nl> < option name = " myCountEnumConstants " value = " false " / > <nl> < option name = " m _ limit " value = " 10 " / > <nl> < / inspection _ tool > <nl> + < ! - - we do not like suggested style - - > <nl> < inspection _ tool class = " FieldHasSetterButNoGetter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " FieldHidesSuperclassField " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > <nl> < option name = " m _ ignoreInvisibleFields " value = " true " / > <nl> @ @ - 723 , 6 + 731 , 7 @ @ <nl> < inspection _ tool class = " ForLoopWithMissingComponent " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> < option name = " ignoreCollectionLoops " value = " false " / > <nl> < / inspection _ tool > <nl> + < ! - - we are ok to use for - each as we use modern java - - > <nl> < inspection _ tool class = " ForeachStatement " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " FtlCallsInspection " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " FtlDeprecatedBuiltInsInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 989 , 11 + 998 , 8 @ @ <nl> < option name = " ignoredTypesString " value = " java . io . ByteArrayOutputStream , java . io . ByteArrayInputStream , java . io . StringBufferInputStream , java . io . CharArrayWriter , java . io . CharArrayReader , java . io . StringWriter , java . io . StringReader " / > <nl> < option name = " insideTryAllowed " value = " false " / > <nl> < / inspection _ tool > <nl> - < inspection _ tool class = " IfCanBeSwitch " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> - < option name = " minimumBranches " value = " 3 " / > <nl> - < option name = " suggestIntSwitches " value = " false " / > <nl> - < option name = " suggestEnumSwitches " value = " false " / > <nl> - < / inspection _ tool > <nl> + < ! - - till we switch to jacoco we cannot use this as it conflicts with policy of 100 % coverage - - > <nl> + < inspection _ tool class = " IfCanBeSwitch " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " IfMayBeConditional " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " IfNullToElvis " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " IfStatementWithIdenticalBranches " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 1104 , 6 + 1110 , 7 @ @ <nl> < inspection _ tool class = " InterfaceNeverImplemented " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> < option name = " ignoreInterfacesThatOnlyDeclareConstants " value = " false " / > <nl> < / inspection _ tool > <nl> + < ! - - we are a library , we do not know all third - party implementations - - > <nl> < inspection _ tool class = " InterfaceWithOnlyOneDirectInheritor " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " IntroduceWhenSubject " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " InvalidImplementedBy " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 1340 , 6 + 1347 , 7 @ @ <nl> < inspection _ tool class = " MavenDuplicatePluginInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " MavenModelInspection " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " MavenRedundantGroupId " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - this rule is too severe , it requires some options to skip well known simple methods like string . length ( ) etc . - - > <nl> < inspection _ tool class = " MethodCallInLoopCondition " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " MethodCanBeVariableArityMethod " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < ! - - it it hard to follow this rule as it is better to keep whole logic in one Check class , <nl> @ @ - 1677 , 6 + 1685 , 7 @ @ <nl> < inspection _ tool class = " PointlessIndexOfComparison " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " PointlessNullCheck " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " PrimitiveArrayArgumentToVariableArgMethod " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - we do not like suggested style , but we could change out mind in future - - > <nl> < inspection _ tool class = " PrivateMemberAccessBetweenOuterAndInnerClass " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " ProblematicVarargsMethodOverride " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ProblematicWhitespace " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 2051 , 6 + 2060 , 7 @ @ <nl> < ! - - Main class is a wrapper command line program for the Checker - - > <nl> < option value = " UseOfSystemOutOrSystemErr " / > <nl> < option value = " SuspiciousArrayCast " / > <nl> + < option value = " AbstractClassWithOnlyOneDirectInheritor " / > <nl> < / list > <nl> < / option > <nl> < / inspection _ tool > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> index f801a43 . . 24b30af 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> @ @ - 41 , 7 + 41 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * @ author Oliver Burn <nl> * @ deprecated Checkstyle is not type aware tool and all Checks derived from this <nl> * class are potentially unstable . <nl> - * @ noinspection DeprecatedIsStillUsed <nl> + * @ noinspection DeprecatedIsStillUsed , AbstractClassWithOnlyOneDirectInheritor <nl> * / <nl> @ Deprecated <nl> public abstract class AbstractTypeAwareCheck extends AbstractCheck { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> index ccd5dd4 . . c8bd363 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> @ @ - 105 , 6 + 105 , 7 @ @ public class ModuleReflectionUtilsTest { <nl> } <nl> } <nl> <nl> + / * * @ noinspection AbstractClassWithOnlyOneDirectInheritor * / <nl> private abstract static class AbstractInvalidClass extends AutomaticBean { <nl> public abstract void method ( ) ; <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java 
 index 81eead9 . . 08866a3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java 
 @ @ - 246 , 7 + 246 , 28 @ @ public abstract class AbstractCheck extends AbstractViolationReporter { 
 * @ param args arguments to format 
 * / 
 public final void log ( DetailAST ast , String key , Object . . . args ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , key , args ) ; 
 + 
 + / / CommonUtils . lengthExpandedTabs returns column number considering tabulation 
 + / / characters , it takes line from the file by line number , ast column number and tab 
 + / / width as arguments . Returned value is 0 - based , but user must see column number starting 
 + / / from 1 , that is why result of the method CommonUtils . lengthExpandedTabs 
 + / / is increased by one . 
 + 
 + final int col = 1 + CommonUtils . lengthExpandedTabs ( 
 + getLines ( ) [ ast . getLineNo ( ) - 1 ] , ast . getColumnNo ( ) , tabWidth ) ; 
 + context . get ( ) . messages . add ( 
 + new LocalizedMessage ( 
 + ast . getLineNo ( ) , 
 + col , 
 + ast . getColumnNo ( ) , 
 + ast . getType ( ) , 
 + getMessageBundle ( ) , 
 + key , 
 + args , 
 + getSeverityLevel ( ) , 
 + getId ( ) , 
 + getClass ( ) , 
 + getCustomMessages ( ) . get ( key ) ) ) ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java 
 index 3161f30 . . b4eca49 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java 
 @ @ - 45 , 7 + 45 , 7 @ @ import java . util . ResourceBundle . Control ; 
 * 
 * @ author Oliver Burn 
 * @ author lkuehne 
 - * @ noinspection ConstructorWithTooManyParameters , SerializableHasSerializationMethods 
 + * @ noinspection SerializableHasSerializationMethods , ClassWithTooManyConstructors 
 * / 
 public final class LocalizedMessage 
 implements Comparable < LocalizedMessage > , Serializable { 
 @ @ - 68 , 6 + 68 , 8 @ @ public final class LocalizedMessage 
 private final int lineNo ; 
 / * * The column number . * * / 
 private final int columnNo ; 
 + / * * The column char index . * * / 
 + private final int columnCharIndex ; 
 / * * The token type constant . See { @ link TokenTypes } . * * / 
 private final int tokenType ; 
 
 @ @ - 99 , 6 + 101 , 7 @ @ public final class LocalizedMessage 
 * 
 * @ param lineNo line number associated with the message 
 * @ param columnNo column number associated with the message 
 + * @ param columnCharIndex column char index associated with the message 
 * @ param tokenType token type of the event associated with the message . See { @ link TokenTypes } 
 * @ param bundle resource bundle name 
 * @ param key the key to locate the translation 
 @ @ - 107 , 10 + 110 , 12 @ @ public final class LocalizedMessage 
 * @ param moduleId the id of the module the message is associated with 
 * @ param sourceClass the Class that is the source of the message 
 * @ param customMessage optional custom message overriding the default 
 + * @ noinspection ConstructorWithTooManyParameters 
 * / 
 / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . 
 public LocalizedMessage ( int lineNo , 
 int columnNo , 
 + int columnCharIndex , 
 int tokenType , 
 String bundle , 
 String key , 
 @ @ - 121 , 6 + 126 , 7 @ @ public final class LocalizedMessage 
 String customMessage ) { 
 this . lineNo = lineNo ; 
 this . columnNo = columnNo ; 
 + this . columnCharIndex = columnCharIndex ; 
 this . tokenType = tokenType ; 
 this . key = key ; 
 
 @ @ - 142 , 6 + 148 , 36 @ @ public final class LocalizedMessage 
 * 
 * @ param lineNo line number associated with the message 
 * @ param columnNo column number associated with the message 
 + * @ param tokenType token type of the event associated with the message . See { @ link TokenTypes } 
 + * @ param bundle resource bundle name 
 + * @ param key the key to locate the translation 
 + * @ param args arguments for the translation 
 + * @ param severityLevel severity level for the message 
 + * @ param moduleId the id of the module the message is associated with 
 + * @ param sourceClass the Class that is the source of the message 
 + * @ param customMessage optional custom message overriding the default 
 + * @ noinspection ConstructorWithTooManyParameters 
 + * / 
 + / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . 
 + public LocalizedMessage ( int lineNo , 
 + int columnNo , 
 + int tokenType , 
 + String bundle , 
 + String key , 
 + Object [ ] args , 
 + SeverityLevel severityLevel , 
 + String moduleId , 
 + Class < ? > sourceClass , 
 + String customMessage ) { 
 + this ( lineNo , columnNo , columnNo , tokenType , bundle , key , args , severityLevel , moduleId , 
 + sourceClass , customMessage ) ; 
 + } 
 + 
 + / * * 
 + * Creates a new { @ code LocalizedMessage } instance . 
 + * 
 + * @ param lineNo line number associated with the message 
 + * @ param columnNo column number associated with the message 
 * @ param bundle resource bundle name 
 * @ param key the key to locate the translation 
 * @ param args arguments for the translation 
 @ @ - 149 , 6 + 185 , 7 @ @ public final class LocalizedMessage 
 * @ param moduleId the id of the module the message is associated with 
 * @ param sourceClass the Class that is the source of the message 
 * @ param customMessage optional custom message overriding the default 
 + * @ noinspection ConstructorWithTooManyParameters 
 * / 
 / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . 
 public LocalizedMessage ( int lineNo , 
 @ @ - 175 , 6 + 212 , 7 @ @ public final class LocalizedMessage 
 * @ param moduleId the id of the module the message is associated with 
 * @ param sourceClass the Class that is the source of the message 
 * @ param customMessage optional custom message overriding the default 
 + * @ noinspection ConstructorWithTooManyParameters 
 * / 
 / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . 
 public LocalizedMessage ( int lineNo , 
 @ @ - 207 , 6 + 245 , 7 @ @ public final class LocalizedMessage 
 * @ param moduleId the id of the module the message is associated with 
 * @ param sourceClass the source class for the message 
 * @ param customMessage optional custom message overriding the default 
 + * @ noinspection ConstructorWithTooManyParameters 
 * / 
 / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . 
 public LocalizedMessage ( int lineNo , 
 @ @ - 232 , 6 + 271 , 7 @ @ public final class LocalizedMessage 
 * @ param moduleId the id of the module the message is associated with 
 * @ param sourceClass the name of the source for the message 
 * @ param customMessage optional custom message overriding the default 
 + * @ noinspection ConstructorWithTooManyParameters 
 * / 
 public LocalizedMessage ( 
 int lineNo , 
 @ @ - 257 , 6 + 297 , 7 @ @ public final class LocalizedMessage 
 final LocalizedMessage localizedMessage = ( LocalizedMessage ) object ; 
 return Objects . equals ( lineNo , localizedMessage . lineNo ) 
 & & Objects . equals ( columnNo , localizedMessage . columnNo ) 
 + & & Objects . equals ( columnCharIndex , localizedMessage . columnCharIndex ) 
 & & Objects . equals ( tokenType , localizedMessage . tokenType ) 
 & & Objects . equals ( severityLevel , localizedMessage . severityLevel ) 
 & & Objects . equals ( moduleId , localizedMessage . moduleId ) 
 @ @ - 269 , 8 + 310 , 8 @ @ public final class LocalizedMessage 
 
 @ Override 
 public int hashCode ( ) { 
 - return Objects . hash ( lineNo , columnNo , tokenType , severityLevel , moduleId , key , bundle , 
 - sourceClass , customMessage , Arrays . hashCode ( args ) ) ; 
 + return Objects . hash ( lineNo , columnNo , columnCharIndex , tokenType , severityLevel , moduleId , 
 + key , bundle , sourceClass , customMessage , Arrays . hashCode ( args ) ) ; 
 } 
 
 / * * Clears the cache . * / 
 @ @ - 350 , 6 + 391 , 14 @ @ public final class LocalizedMessage 
 } 
 
 / * * 
 + * Gets the column char index . 
 + * @ return the column char index 
 + * / 
 + public int getColumnCharIndex ( ) { 
 + return columnCharIndex ; 
 + } 
 + 
 + / * * 
 * Gets the token type . 
 * @ return the token type 
 * / 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java 
 index 972d586 . . e8183e6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java 
 @ @ - 224 , 6 + 224 , 15 @ @ public class LocalizedMessageTest { 
 } 
 
 @ Test 
 + public void testGetColumnCharIndex ( ) { 
 + final LocalizedMessage localizedMessage1 = new LocalizedMessage ( 1 , 1 , 123 , 
 + TokenTypes . CLASS _ DEF , " messages . properties " , " key " , null , SeverityLevel . ERROR , 
 + null , getClass ( ) , null ) ; 
 + 
 + assertEquals ( " Invalid column char index " , 123 , localizedMessage1 . getColumnCharIndex ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testCompareToWithDifferentModuleId ( ) { 
 final LocalizedMessage message1 = createSampleLocalizedMessageWithId ( " module1 " ) ; 
 final LocalizedMessage message2 = createSampleLocalizedMessageWithId ( " module2 " ) ;

NEAREST DIFF:
diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index 8840803 . . 380484b 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 9 , 7 + 9 , 7 @ @ 
 < option name = " m _ minLength " value = " 5 " / > 
 < / inspection _ tool > 
 < inspection _ tool class = " AbstractClassNeverImplemented " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 - < inspection _ tool class = " AbstractClassWithOnlyOneDirectInheritor " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 + < inspection _ tool class = " AbstractClassWithOnlyOneDirectInheritor " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " AbstractClassWithoutAbstractMethods " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " AbstractMethodCallInConstructor " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " AbstractMethodOverridesAbstractMethod " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 26 , 6 + 26 , 7 @ @ 
 < inspection _ tool class = " AlphaUnsortedPropertiesFile " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " AmbiguousFieldAccess " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " AmbiguousMethodCall " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 + < ! - - this rule is inspection is only for old java , we are ok to use annotations - - > 
 < inspection _ tool class = " Annotation " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " AnnotationClass " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " AnnotationNamingConvention " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > 
 @ @ - 64 , 6 + 65 , 7 @ @ 
 < inspection _ tool class = " ArrayEquality " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ArrayEquals " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ArrayHashCode " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - we see no harm for us for such usages - - > 
 < inspection _ tool class = " ArrayLengthInLoopCondition " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " ArrayObjectsEquals " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ArraysAsListWithZeroOrOneArgument " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 102 , 10 + 104 , 10 @ @ 
 < / inspection _ tool > 
 < inspection _ tool class = " AssignmentToSuperclassField " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " AssignmentUsedAsCondition " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 - < inspection _ tool class = " AutoBoxing " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 - < option name = " ignoreAddedToCollection " value = " false " / > 
 - < / inspection _ tool > 
 + < ! - - we are ok to use auto - boxing as we use modern java - - > 
 + < inspection _ tool class = " AutoBoxing " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " AutoCloseableResource " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 + < ! - - we are ok to use auto - unboxing as we use modern java - - > 
 < inspection _ tool class = " AutoUnboxing " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " AutowiredDependenciesInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " AwaitNotInLoop " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 @ @ - 261 , 8 + 263 , 8 @ @ 
 < inspection _ tool class = " CharacterComparison " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CheckDtdRefs " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CheckEmptyScriptTag " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 - < inspection _ tool class = " CheckForOutOfMemoryOnLargeArrayAllocation " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 - < option name = " m _ limit " value = " 64 " / > 
 + < inspection _ tool class = " CheckForOutOfMemoryOnLargeArrayAllocation " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 + < option name = " m _ limit " value = " 1024 " / > 
 < / inspection _ tool > 
 < inspection _ tool class = " CheckImageSize " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CheckNodeTest " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 334 , 11 + 336 , 13 @ @ 
 < inspection _ tool class = " ClassWithTooManyTransitiveDependents " enabled = " true " level = " ERROR " enabled _ by _ default = " false " > 
 < option name = " limit " value = " 500 " / > 
 < / inspection _ tool > 
 + < ! - - we do not like suggested style - - > 
 < inspection _ tool class = " ClassWithoutConstructor " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " ClassWithoutLogger " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 < option name = " loggerNamesString " value = " java . util . logging . Logger , org . slf4j . Logger , org . apache . commons . logging . Log , org . apache . log4j . Logger " / > 
 < option name = " ignoreSuperLoggers " value = " false " / > 
 < / inspection _ tool > 
 + < ! - - we do not like suggested style - - > 
 < inspection _ tool class = " ClassWithoutNoArgConstructor " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 < option name = " m _ ignoreClassesWithNoConstructors " value = " true " / > 
 < / inspection _ tool > 
 @ @ - 351 , 7 + 355 , 9 @ @ 
 < inspection _ tool class = " CloneableImplementsClone " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 < option name = " m _ ignoreCloneableDueToInheritance " value = " true " / > 
 < / inspection _ tool > 
 - < inspection _ tool class = " CodeBlock2Expr " enabled = " false " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - decision to suppress was only a matter of habit to see code in more old style with extra curly braces , 
 + we might change our mind in future . - - > 
 + < inspection _ tool class = " CodeBlock2Expr " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " CoffeeScriptArgumentsOutsideFunction " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CoffeeScriptFunctionSignatures " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CoffeeScriptInfiniteLoop " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 619 , 6 + 625 , 7 @ @ 
 < inspection _ tool class = " EmptyTryBlockJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " EmptyWebServiceClass " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " EnumAsName " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - we are ok to use enumeration as we use modern java - - > 
 < inspection _ tool class = " EnumClass " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " EnumSwitchStatementWhichMissesCases " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 < option name = " ignoreSwitchStatementsWithDefault " value = " false " / > 
 @ @ - 680 , 6 + 687 , 7 @ @ 
 < option name = " myCountEnumConstants " value = " false " / > 
 < option name = " m _ limit " value = " 10 " / > 
 < / inspection _ tool > 
 + < ! - - we do not like suggested style - - > 
 < inspection _ tool class = " FieldHasSetterButNoGetter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " FieldHidesSuperclassField " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > 
 < option name = " m _ ignoreInvisibleFields " value = " true " / > 
 @ @ - 723 , 6 + 731 , 7 @ @ 
 < inspection _ tool class = " ForLoopWithMissingComponent " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 < option name = " ignoreCollectionLoops " value = " false " / > 
 < / inspection _ tool > 
 + < ! - - we are ok to use for - each as we use modern java - - > 
 < inspection _ tool class = " ForeachStatement " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " FtlCallsInspection " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " FtlDeprecatedBuiltInsInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 989 , 11 + 998 , 8 @ @ 
 < option name = " ignoredTypesString " value = " java . io . ByteArrayOutputStream , java . io . ByteArrayInputStream , java . io . StringBufferInputStream , java . io . CharArrayWriter , java . io . CharArrayReader , java . io . StringWriter , java . io . StringReader " / > 
 < option name = " insideTryAllowed " value = " false " / > 
 < / inspection _ tool > 
 - < inspection _ tool class = " IfCanBeSwitch " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 - < option name = " minimumBranches " value = " 3 " / > 
 - < option name = " suggestIntSwitches " value = " false " / > 
 - < option name = " suggestEnumSwitches " value = " false " / > 
 - < / inspection _ tool > 
 + < ! - - till we switch to jacoco we cannot use this as it conflicts with policy of 100 % coverage - - > 
 + < inspection _ tool class = " IfCanBeSwitch " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " IfMayBeConditional " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " IfNullToElvis " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " IfStatementWithIdenticalBranches " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 1104 , 6 + 1110 , 7 @ @ 
 < inspection _ tool class = " InterfaceNeverImplemented " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 < option name = " ignoreInterfacesThatOnlyDeclareConstants " value = " false " / > 
 < / inspection _ tool > 
 + < ! - - we are a library , we do not know all third - party implementations - - > 
 < inspection _ tool class = " InterfaceWithOnlyOneDirectInheritor " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " IntroduceWhenSubject " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " InvalidImplementedBy " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 1340 , 6 + 1347 , 7 @ @ 
 < inspection _ tool class = " MavenDuplicatePluginInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " MavenModelInspection " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " MavenRedundantGroupId " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - this rule is too severe , it requires some options to skip well known simple methods like string . length ( ) etc . - - > 
 < inspection _ tool class = " MethodCallInLoopCondition " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " MethodCanBeVariableArityMethod " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < ! - - it it hard to follow this rule as it is better to keep whole logic in one Check class , 
 @ @ - 1677 , 6 + 1685 , 7 @ @ 
 < inspection _ tool class = " PointlessIndexOfComparison " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " PointlessNullCheck " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " PrimitiveArrayArgumentToVariableArgMethod " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - we do not like suggested style , but we could change out mind in future - - > 
 < inspection _ tool class = " PrivateMemberAccessBetweenOuterAndInnerClass " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " ProblematicVarargsMethodOverride " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ProblematicWhitespace " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 2051 , 6 + 2060 , 7 @ @ 
 < ! - - Main class is a wrapper command line program for the Checker - - > 
 < option value = " UseOfSystemOutOrSystemErr " / > 
 < option value = " SuspiciousArrayCast " / > 
 + < option value = " AbstractClassWithOnlyOneDirectInheritor " / > 
 < / list > 
 < / option > 
 < / inspection _ tool > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 index f801a43 . . 24b30af 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 @ @ - 41 , 7 + 41 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * @ author Oliver Burn 
 * @ deprecated Checkstyle is not type aware tool and all Checks derived from this 
 * class are potentially unstable . 
 - * @ noinspection DeprecatedIsStillUsed 
 + * @ noinspection DeprecatedIsStillUsed , AbstractClassWithOnlyOneDirectInheritor 
 * / 
 @ Deprecated 
 public abstract class AbstractTypeAwareCheck extends AbstractCheck { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 index ccd5dd4 . . c8bd363 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 @ @ - 105 , 6 + 105 , 7 @ @ public class ModuleReflectionUtilsTest { 
 } 
 } 
 
 + / * * @ noinspection AbstractClassWithOnlyOneDirectInheritor * / 
 private abstract static class AbstractInvalidClass extends AutomaticBean { 
 public abstract void method ( ) ; 
 }
