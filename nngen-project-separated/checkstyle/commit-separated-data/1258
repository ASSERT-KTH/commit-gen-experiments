BLEU SCORE: 0.037477767366779206

TEST MSG: Issue # 2428 : remove dependency to commons - lang3 library
GENERATED MSG: Do not allocate arrays of zero length . # 1555

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> index 5c198a7 . . ef78afc 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import java . util . Locale ; <nl> <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> - import com . google . common . base . CharMatcher ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 200 , 7 + 199 , 7 @ @ public class EmptyBlockCheck <nl> / / Handle braces on the same line <nl> final String txt = lines [ slistLineNo - 1 ] <nl> . substring ( slistColNo + 1 , rcurlyColNo ) ; <nl> - if ( ! CharMatcher . WHITESPACE . matchesAllOf ( txt ) ) { <nl> + if ( ! CommonUtils . isBlank ( txt ) ) { <nl> returnValue = true ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> index db9b8bd . . db2cc0a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> @ @ - 33 , 7 + 33 , 6 @ @ import java . util . regex . Pattern ; <nl> <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> - import com . google . common . base . CharMatcher ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . io . Closeables ; <nl> @ @ - 92 , 7 + 91 , 7 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck { <nl> * @ throws CheckstyleException if fileName is empty . <nl> * / <nl> public void setHeaderFile ( String fileName ) throws CheckstyleException { <nl> - if ( fileName = = null | | CharMatcher . WHITESPACE . matchesAllOf ( fileName ) ) { <nl> + if ( CommonUtils . isBlank ( fileName ) ) { <nl> throw new CheckstyleException ( <nl> " property ' headerFile ' is missing or invalid in module " <nl> + getConfiguration ( ) . getName ( ) ) ; <nl> @ @ - 142 , 7 + 141 , 7 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck { <nl> * @ throws ConversionException if the header cannot be interpreted <nl> * / <nl> public void setHeader ( String header ) { <nl> - if ( header = = null | | CharMatcher . WHITESPACE . matchesAllOf ( header ) ) { <nl> + if ( CommonUtils . isBlank ( header ) ) { <nl> return ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> index b29ca3c . . c6fd46a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> @ @ - 27 , 7 + 27 , 6 @ @ import java . util . regex . PatternSyntaxException ; <nl> <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> - import com . google . common . base . CharMatcher ; <nl> import com . google . common . collect . Lists ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ @ - 172 , 7 + 171 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { <nl> * / <nl> @ Override <nl> public void setHeader ( String header ) { <nl> - if ( header = = null | | CharMatcher . WHITESPACE . matchesAllOf ( header ) ) { <nl> + if ( CommonUtils . isBlank ( header ) ) { <nl> return ; <nl> } <nl> if ( ! CommonUtils . isPatternValid ( header ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java <nl> index a9ec42a . . d094ccf 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java <nl> @ @ - 24 , 12 + 24 , 12 @ @ import java . net . URI ; <nl> <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> - import com . google . common . base . CharMatcher ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * Check that controls what packages can be imported in each package . Useful <nl> @ @ - 143 , 7 + 143 , 7 @ @ public class ImportControlCheck extends AbstractCheck { <nl> * / <nl> public void setFile ( final String name ) { <nl> / / Handle empty param <nl> - if ( name = = null | | CharMatcher . WHITESPACE . matchesAllOf ( name ) ) { <nl> + if ( CommonUtils . isBlank ( name ) ) { <nl> return ; <nl> } <nl> <nl> @ @ - 163 , 7 + 163 , 7 @ @ public class ImportControlCheck extends AbstractCheck { <nl> * / <nl> public void setUrl ( final String url ) { <nl> / / Handle empty param <nl> - if ( url = = null | | CharMatcher . WHITESPACE . matchesAllOf ( url ) ) { <nl> + if ( CommonUtils . isBlank ( url ) ) { <nl> return ; <nl> } <nl> final URI uri ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java <nl> index 295780f . . 582794f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . regexp ; <nl> <nl> import java . util . regex . Pattern ; <nl> <nl> - import com . google . common . base . Objects ; <nl> + import com . google . common . base . MoreObjects ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractViolationReporter ; <nl> <nl> @ @ - 228 , 8 + 228 , 8 @ @ public final class DetectorOptions { <nl> * @ return DetectorOptions instance . <nl> * / <nl> public DetectorOptions build ( ) { <nl> - message = Objects . firstNonNull ( message , " " ) ; <nl> - suppressor = Objects . firstNonNull ( suppressor , NeverSuppress . INSTANCE ) ; <nl> + message = MoreObjects . firstNonNull ( message , " " ) ; <nl> + suppressor = MoreObjects . firstNonNull ( suppressor , NeverSuppress . INSTANCE ) ; <nl> return DetectorOptions . this ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java <nl> index 7e02a9a . . 86a76ff 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import java . util . Locale ; <nl> <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> - import com . google . common . base . CharMatcher ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 221 , 8 + 220 , 7 @ @ public class OperatorWrapCheck <nl> / / itself . <nl> if ( option = = WrapOption . NL <nl> & & ! text . equals ( currentLine . trim ( ) ) <nl> - & & CharMatcher . WHITESPACE . matchesAllOf ( <nl> - currentLine . substring ( colNo + text . length ( ) ) ) ) { <nl> + & & CommonUtils . isBlank ( currentLine . substring ( colNo + text . length ( ) ) ) ) { <nl> log ( lineNo , colNo , MSG _ LINE _ NEW , text ) ; <nl> } <nl> else if ( option = = WrapOption . EOL <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> index 68a8c7b . . 4ddae61 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ import java . util . regex . PatternSyntaxException ; <nl> <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> + import com . google . common . base . CharMatcher ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> <nl> / * * <nl> @ @ - 414 , 4 + 415 , 15 @ @ public final class CommonUtils { <nl> } <nl> return result ; <nl> } <nl> + <nl> + / * * <nl> + * Check if a string is blank . <nl> + * A string is considered blank if it is null , empty or contains only whitespace characters , <nl> + * as determined by { @ link CharMatcher # WHITESPACE } . <nl> + * @ param str the string to check <nl> + * @ return true if str is either null , empty or whitespace - only . <nl> + * / <nl> + public static boolean isBlank ( String str ) { <nl> + return str = = null | | CharMatcher . WHITESPACE . matchesAllOf ( str ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index cbe74ce . . 1bf78af 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 579 , 12 + 579 , 7 @ @ public final class TreeWalker <nl> if ( ast1 . getLineNo ( ) < ast2 . getLineNo ( ) ) { <nl> return false ; <nl> } <nl> - else { <nl> - if ( ast1 . getColumnNo ( ) > ast2 . getColumnNo ( ) ) { <nl> - return true ; <nl> - } <nl> - } <nl> - return false ; <nl> + return ast1 . getColumnNo ( ) > ast2 . getColumnNo ( ) ; <nl> } <nl> <nl> / * *

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 index 5c198a7 . . ef78afc 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import java . util . Locale ; 
 
 import org . apache . commons . beanutils . ConversionException ; 
 
 - import com . google . common . base . CharMatcher ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 200 , 7 + 199 , 7 @ @ public class EmptyBlockCheck 
 / / Handle braces on the same line 
 final String txt = lines [ slistLineNo - 1 ] 
 . substring ( slistColNo + 1 , rcurlyColNo ) ; 
 - if ( ! CharMatcher . WHITESPACE . matchesAllOf ( txt ) ) { 
 + if ( ! CommonUtils . isBlank ( txt ) ) { 
 returnValue = true ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 index db9b8bd . . db2cc0a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 @ @ - 33 , 7 + 33 , 6 @ @ import java . util . regex . Pattern ; 
 
 import org . apache . commons . beanutils . ConversionException ; 
 
 - import com . google . common . base . CharMatcher ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . io . Closeables ; 
 @ @ - 92 , 7 + 91 , 7 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck { 
 * @ throws CheckstyleException if fileName is empty . 
 * / 
 public void setHeaderFile ( String fileName ) throws CheckstyleException { 
 - if ( fileName = = null | | CharMatcher . WHITESPACE . matchesAllOf ( fileName ) ) { 
 + if ( CommonUtils . isBlank ( fileName ) ) { 
 throw new CheckstyleException ( 
 " property ' headerFile ' is missing or invalid in module " 
 + getConfiguration ( ) . getName ( ) ) ; 
 @ @ - 142 , 7 + 141 , 7 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck { 
 * @ throws ConversionException if the header cannot be interpreted 
 * / 
 public void setHeader ( String header ) { 
 - if ( header = = null | | CharMatcher . WHITESPACE . matchesAllOf ( header ) ) { 
 + if ( CommonUtils . isBlank ( header ) ) { 
 return ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 index b29ca3c . . c6fd46a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 @ @ - 27 , 7 + 27 , 6 @ @ import java . util . regex . PatternSyntaxException ; 
 
 import org . apache . commons . beanutils . ConversionException ; 
 
 - import com . google . common . base . CharMatcher ; 
 import com . google . common . collect . Lists ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ @ - 172 , 7 + 171 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { 
 * / 
 @ Override 
 public void setHeader ( String header ) { 
 - if ( header = = null | | CharMatcher . WHITESPACE . matchesAllOf ( header ) ) { 
 + if ( CommonUtils . isBlank ( header ) ) { 
 return ; 
 } 
 if ( ! CommonUtils . isPatternValid ( header ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java 
 index a9ec42a . . d094ccf 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java 
 @ @ - 24 , 12 + 24 , 12 @ @ import java . net . URI ; 
 
 import org . apache . commons . beanutils . ConversionException ; 
 
 - import com . google . common . base . CharMatcher ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * Check that controls what packages can be imported in each package . Useful 
 @ @ - 143 , 7 + 143 , 7 @ @ public class ImportControlCheck extends AbstractCheck { 
 * / 
 public void setFile ( final String name ) { 
 / / Handle empty param 
 - if ( name = = null | | CharMatcher . WHITESPACE . matchesAllOf ( name ) ) { 
 + if ( CommonUtils . isBlank ( name ) ) { 
 return ; 
 } 
 
 @ @ - 163 , 7 + 163 , 7 @ @ public class ImportControlCheck extends AbstractCheck { 
 * / 
 public void setUrl ( final String url ) { 
 / / Handle empty param 
 - if ( url = = null | | CharMatcher . WHITESPACE . matchesAllOf ( url ) ) { 
 + if ( CommonUtils . isBlank ( url ) ) { 
 return ; 
 } 
 final URI uri ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java 
 index 295780f . . 582794f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . regexp ; 
 
 import java . util . regex . Pattern ; 
 
 - import com . google . common . base . Objects ; 
 + import com . google . common . base . MoreObjects ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractViolationReporter ; 
 
 @ @ - 228 , 8 + 228 , 8 @ @ public final class DetectorOptions { 
 * @ return DetectorOptions instance . 
 * / 
 public DetectorOptions build ( ) { 
 - message = Objects . firstNonNull ( message , " " ) ; 
 - suppressor = Objects . firstNonNull ( suppressor , NeverSuppress . INSTANCE ) ; 
 + message = MoreObjects . firstNonNull ( message , " " ) ; 
 + suppressor = MoreObjects . firstNonNull ( suppressor , NeverSuppress . INSTANCE ) ; 
 return DetectorOptions . this ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java 
 index 7e02a9a . . 86a76ff 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import java . util . Locale ; 
 
 import org . apache . commons . beanutils . ConversionException ; 
 
 - import com . google . common . base . CharMatcher ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 221 , 8 + 220 , 7 @ @ public class OperatorWrapCheck 
 / / itself . 
 if ( option = = WrapOption . NL 
 & & ! text . equals ( currentLine . trim ( ) ) 
 - & & CharMatcher . WHITESPACE . matchesAllOf ( 
 - currentLine . substring ( colNo + text . length ( ) ) ) ) { 
 + & & CommonUtils . isBlank ( currentLine . substring ( colNo + text . length ( ) ) ) ) { 
 log ( lineNo , colNo , MSG _ LINE _ NEW , text ) ; 
 } 
 else if ( option = = WrapOption . EOL 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 index 68a8c7b . . 4ddae61 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import java . util . regex . PatternSyntaxException ; 
 
 import org . apache . commons . beanutils . ConversionException ; 
 
 + import com . google . common . base . CharMatcher ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 
 / * * 
 @ @ - 414 , 4 + 415 , 15 @ @ public final class CommonUtils { 
 } 
 return result ; 
 } 
 + 
 + / * * 
 + * Check if a string is blank . 
 + * A string is considered blank if it is null , empty or contains only whitespace characters , 
 + * as determined by { @ link CharMatcher # WHITESPACE } . 
 + * @ param str the string to check 
 + * @ return true if str is either null , empty or whitespace - only . 
 + * / 
 + public static boolean isBlank ( String str ) { 
 + return str = = null | | CharMatcher . WHITESPACE . matchesAllOf ( str ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index cbe74ce . . 1bf78af 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 579 , 12 + 579 , 7 @ @ public final class TreeWalker 
 if ( ast1 . getLineNo ( ) < ast2 . getLineNo ( ) ) { 
 return false ; 
 } 
 - else { 
 - if ( ast1 . getColumnNo ( ) > ast2 . getColumnNo ( ) ) { 
 - return true ; 
 - } 
 - } 
 - return false ; 
 + return ast1 . getColumnNo ( ) > ast2 . getColumnNo ( ) ; 
 } 
 
 / * *
