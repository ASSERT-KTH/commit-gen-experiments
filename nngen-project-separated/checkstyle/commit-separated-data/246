BLEU SCORE: 0.05341087579952926

TEST MSG: minor : fix linkcheck violation
GENERATED MSG: JArchitect added to related section

TEST DIFF (one line): diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm <nl> index e9280af . . e38944b 100644 <nl> - - - a / src / xdocs / index . xml . vm <nl> + + + b / src / xdocs / index . xml . vm <nl> @ @ - 220 , 9 + 220 , 9 @ @ <nl> < td > Provides real - time and on - demand scanning . < / td > <nl> < / tr > <nl> < tr > <nl> - < td > < a href = " http : / / www . jgrasp . org / " > jGRASP < / a > < / td > <nl> + < td > < a href = " https : / / www . jgrasp . org / " > jGRASP < / a > < / td > <nl> < td > Larry Barowski < / td > <nl> - < td > < a href = " http : / / www . jgrasp . org / " > jGRASP Home Page < / a > < / td > <nl> + < td > < a href = " https : / / www . jgrasp . org / " > jGRASP Home Page < / a > < / td > <nl> < td / > <nl> < / tr > <nl> < tr >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> index 89b14e8 . . 427cd0a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> @ @ - 3430 , 6 + 3430 , 11 @ @ public final class TokenTypes <nl> * / <nl> public static final int GENERIC _ END = GeneratedJavaTokenTypes . GENERIC _ END ; <nl> <nl> + / * * <nl> + * " - > " lambda specifying symbol . <nl> + * / <nl> + public static final int LAMBDA = GeneratedJavaTokenTypes . LAMBDA ; <nl> + <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> / / The interesting code goes here <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> index e8e34c7 . . c4b51b2 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> @ @ - 95 , 6 + 95 , 9 @ @ tokens { <nl> <nl> / / Tokens for Java 1 . 7 language enhancements <nl> RESOURCE _ SPECIFICATION ; RESOURCES ; RESOURCE ; <nl> + <nl> + / / TOkens for 1 . 8 <nl> + LAMBDA ; <nl> } <nl> <nl> { <nl> @ @ - 784 , 7 + 787 , 7 @ @ implementsClause <nl> tc , <nl> s2 , <nl> s5 ) ; } <nl> - | 	 v : variableDefinitions [ # mods , # t ] s6 : SEMI <nl> + | 	 v : variableDefinitions [ # mods , # t ] ( s6 : SEMI ) ? <nl> { <nl> # field = # v ; <nl> # v . addChild ( # s6 ) ; <nl> @ @ - 945 , 7 + 948 , 7 @ @ parameterModifier <nl> <nl> / / A formal parameter . <nl> parameterDeclaration ! <nl> - 	 : 	 pm : parameterModifier t : typeSpec [ false ] id : IDENT <nl> + 	 : 	 pm : parameterModifier ( t : typeSpec [ false ] ) ? id : IDENT <nl> 	 	 pd : declaratorBrackets [ # t ] <nl> 	 	 { # parameterDeclaration = # ( # [ PARAMETER _ DEF , " PARAMETER _ DEF " ] , <nl> 	 	 	 	 	 	 	 	 	 pm , # ( [ TYPE , " TYPE " ] , pd ) , id ) ; } <nl> @ @ - 1000 , 7 + 1003 , 7 @ @ traditionalStatement <nl> 	 	 / / An expression statement . This could be a method call , <nl> 	 	 / / assignment statement , or any other expression evaluated for <nl> 	 	 / / side - effects . <nl> - 	 	 | 	 expression SEMI <nl> + 	 	 | 	 { LA ( 2 ) ! = COLON } ? expression ( SEMI ) ? <nl> <nl> 	 	 / / class definition <nl> 	 	 | 	 m : modifiers ! classDefinition [ # m ] <nl> @ @ - 1222 , 7 + 1225 , 8 @ @ finallyHandler <nl> <nl> / / the mother of all expressions <nl> expression <nl> - 	 : 	 assignmentExpression <nl> + 	 : 	 ( lambdaExpression ) = > lambdaExpression <nl> + | { LA ( 1 ) ! = RPAREN } ? assignmentExpression <nl> 	 	 { # expression = # ( # [ EXPR , " EXPR " ] , # expression ) ; } <nl> 	 ; <nl> <nl> @ @ - 1250 , 7 + 1254 , 8 @ @ assignmentExpression <nl> | BXOR _ ASSIGN ^ <nl> | BOR _ ASSIGN ^ <nl> ) <nl> - 	 	 	 assignmentExpression <nl> + 	 	 	 ( ( lambdaExpression ) = > lambdaExpression <nl> + 	 	 	 | assignmentExpression ) <nl> 	 	 ) ? <nl> 	 ; <nl> <nl> @ @ - 1258 , 7 + 1263 , 11 @ @ assignmentExpression <nl> / / conditional test ( level 12 ) <nl> conditionalExpression <nl> 	 : 	 logicalOrExpression <nl> - 	 	 ( QUESTION ^ assignmentExpression COLON conditionalExpression ) ? <nl> + 	 	 ( QUESTION ^ <nl> + ( ( lambdaExpression ) = > lambdaExpression <nl> + | assignmentExpression ) <nl> + COLON ( ( lambdaExpression ) = > lambdaExpression <nl> + | conditionalExpression ) ) ? <nl> 	 ; <nl> <nl> <nl> @ @ - 1300 , 7 + 1309 , 7 @ @ equalityExpression <nl> <nl> / / boolean relational expressions ( level 5 ) <nl> relationalExpression <nl> - 	 : 	 shiftExpression <nl> + 	 : 	 shiftExpression ( " instanceof " ^ typeSpec [ true ] ) ? <nl> 	 	 ( 	 ( 	 ( 	 LT ^ <nl> 	 	 	 	 | 	 GT ^ <nl> 	 	 	 	 | 	 LE ^ <nl> @ @ - 1308 , 7 + 1317 , 7 @ @ relationalExpression <nl> 	 	 	 	 ) <nl> 	 	 	 	 shiftExpression <nl> 	 	 	 ) * <nl> - 	 	 | 	 " instanceof " ^ typeSpec [ true ] <nl> + 	 	 <nl> 	 	 ) <nl> 	 ; <nl> <nl> @ @ - 1361 , 6 + 1370 , 10 @ @ unaryExpressionNotPlusMinus <nl> 	 	 	 lp : LPAREN ^ { # lp . setType ( TYPECAST ) ; } typeCastParameters RPAREN <nl> 	 	 	 unaryExpressionNotPlusMinus <nl> <nl> + | ( LPAREN typeCastParameters RPAREN lambdaExpression ) = > <nl> + lpl : LPAREN ^ { # lpl . setType ( TYPECAST ) ; } typeCastParameters RPAREN <nl> + lambdaExpression <nl> + <nl> 	 	 | 	 postfixExpression <nl> 	 	 ) <nl> 	 ; <nl> @ @ - 1436 , 7 + 1449 , 7 @ @ primaryExpression <nl> 	 | 	 " this " <nl> 	 | 	 " null " <nl> 	 | 	 newExpression <nl> - 	 | 	 LPAREN assignmentExpression RPAREN <nl> + 	 | 	 LPAREN ( ( lambdaExpression ) = > lambdaExpression | assignmentExpression ) RPAREN <nl> 	 | 	 " super " <nl> 	 	 / / look for int . class and int [ ] . class and int [ ] <nl> 	 | 	 builtInType <nl> @ @ - 1511 , 7 + 1524 , 7 @ @ newExpression <nl> 	 ; <nl> <nl> argList <nl> - 	 : 	 ( 	 expressionList <nl> + 	 : 	 ( 	 { LA ( 1 ) ! = RPAREN } ? expressionList <nl> 	 	 | 	 / * nothing * / <nl> 	 	 	 { # argList = # [ ELIST , " ELIST " ] ; } <nl> 	 	 ) <nl> @ @ - 1543 , 6 + 1556 , 24 @ @ constant <nl> 	 | 	 STRING _ LITERAL <nl> 	 ; <nl> <nl> + lambdaExpression <nl> + 	 : 	 lambdaParameters LAMBDA ^ lambdaBody <nl> + 	 ; <nl> + <nl> + lambdaParameters <nl> + 	 : 	 IDENT <nl> + 	 | 	 LPAREN ( parameterDeclarationList ) ? RPAREN <nl> + 	 | 	 LPAREN inferredParameterList RPAREN <nl> + 	 ; <nl> + <nl> + lambdaBody <nl> + 	 : 	 expression <nl> + 	 | 	 statement <nl> + 	 ; <nl> + inferredParameterList <nl> + 	 : 	 IDENT ( COMMA IDENT ) * <nl> + 	 ; <nl> + <nl> <nl> / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> / / The Java scanner <nl> @ @ - 1635 , 6 + 1666 , 7 @ @ SL 	 	 	 	 : 	 " < < " 	 ; <nl> SL _ ASSIGN 	 	 : 	 " < < = " 	 ; <nl> LE 	 	 	 	 : 	 " < = " 	 ; <nl> LT 	 	 	 	 : 	 ' < ' 	 	 ; <nl> + LAMBDA : " - > " ; <nl> BXOR 	 	 	 : 	 ' ^ ' 	 	 ; <nl> BXOR _ ASSIGN 	 	 : 	 " ^ = " 	 ; <nl> BOR 	 	 	 	 : 	 ' | ' 	 	 ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / LambdaTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / LambdaTest . java <nl> new file mode 100644 <nl> index 0000000 . . 3d70bfa <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / LambdaTest . java <nl> @ @ - 0 , 0 + 1 , 258 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2014 Oliver Burn <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> + <nl> + public class LambdaTest extends BaseCheckTestSupport <nl> + { <nl> + <nl> + @ Test <nl> + public void testLambdaInVariableInitialization ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest1 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithoutArgsOneLineLambdaBody ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest2 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithoutArgsFullLambdaBody ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest3 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithOneArgWithOneLineBody ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest4 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithOneArgWithFullBody ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest5 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithOneArgWIthoutTypeOneLineBody ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest6 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithOneArgWIthoutTypeFullBody ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest7 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithFewArgsWithoutTypeOneLineBody ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest8 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithFewArgsWithoutTypeFullBody ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest9 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithOneArgWIthoutParenthesesWithoutTypeOneLineBody ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest10 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithOneArgWIthoutParenthesesWithoutTypeFullBody ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest11 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithFewArgWIthTypeOneLine ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest12 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithFewArgWithTypeFullBody ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest13 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWIthMultilineBody ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest14 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testCasesFromSpec ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest15 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithTypecast ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest16 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testInAssignment ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest17 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testInParentheses ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest18 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testInTernary ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest19 . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest1 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest1 . java <nl> new file mode 100644 <nl> index 0000000 . . d164bd3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest1 . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + public class InputLabdaTest1 { <nl> + 	 <nl> + 	 static Runnable r1 = ( ) - > System . out . println ( " Hello world one ! " ) ; <nl> + 	 static Runnable r2 = ( ) - > System . out . println ( " Hello world two ! " ) ; <nl> + 	 <nl> + 	 public static void main ( String [ ] args ) { <nl> + 	 	 r1 . run ( ) ; <nl> + 	 	 r2 . run ( ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest10 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest10 . java <nl> new file mode 100644 <nl> index 0000000 . . aeebfb9 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest10 . java <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + public class InputLabdaTest10 { <nl> + <nl> + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { <nl> + 	 	 System . out . println ( " Method called " ) ; <nl> + 	 	 test . doSmth ( " fef " ) ; <nl> + 	 } <nl> + 	 <nl> + 	 <nl> + 	 public static void main ( String [ ] args ) { <nl> + 	 	 <nl> + 	 	 testVoidLambda ( s1 - > System . out . println ( s1 ) ) ; <nl> + 	 } <nl> + <nl> + 	 private interface TestOfVoidLambdas { <nl> + <nl> + 	 	 public void doSmth ( String first ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest11 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest11 . java <nl> new file mode 100644 <nl> index 0000000 . . b8192a1 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest11 . java <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + public class InputLabdaTest11 { <nl> + <nl> + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { <nl> + 	 	 System . out . println ( " Method called " ) ; <nl> + 	 	 test . doSmth ( " fef " ) ; <nl> + 	 } <nl> + 	 <nl> + 	 <nl> + 	 public static void main ( String [ ] args ) { <nl> + 	 	 <nl> + 	 	 testVoidLambda ( s1 - > { System . out . println ( s1 ) ; } ) ; <nl> + 	 } <nl> + <nl> + 	 private interface TestOfVoidLambdas { <nl> + <nl> + 	 	 public void doSmth ( String first ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest12 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest12 . java <nl> new file mode 100644 <nl> index 0000000 . . 4ff21ec <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest12 . java <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + public class InputLabdaTest12 { <nl> + <nl> + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { <nl> + 	 	 System . out . println ( " Method called " ) ; <nl> + 	 	 test . doSmth ( " fef " , 5 ) ; <nl> + 	 } <nl> + 	 <nl> + 	 <nl> + 	 public static void main ( String [ ] args ) { <nl> + 	 	 <nl> + 	 	 testVoidLambda ( ( String s1 , Integer i2 ) - > System . out . println ( s1 ) ) ; <nl> + 	 } <nl> + <nl> + 	 private interface TestOfVoidLambdas { <nl> + <nl> + 	 	 public void doSmth ( String first , Integer second ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest13 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest13 . java <nl> new file mode 100644 <nl> index 0000000 . . 2e6186e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest13 . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + public class InputLabdaTest12 { <nl> + <nl> + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { <nl> + 	 	 System . out . println ( " Method called " ) ; <nl> + 	 	 test . doSmth ( " fef " , 5 ) ; <nl> + 	 } <nl> + 	 <nl> + 	 <nl> + 	 public static void main ( String [ ] args ) { <nl> + 	 	 <nl> + 	 	 testVoidLambda ( ( String s1 , Integer i2 ) - > { <nl> + 	 	 	 System . out . println ( s1 ) ; <nl> + 	 	 } ) ; <nl> + 	 } <nl> + <nl> + 	 private interface TestOfVoidLambdas { <nl> + <nl> + 	 	 public void doSmth ( String first , Integer second ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest14 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest14 . java <nl> new file mode 100644 <nl> index 0000000 . . ec67efa <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest14 . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + <nl> + public class InputLambdaTest14 { <nl> + 	 <nl> + 	 public static void main ( String args [ ] ) { <nl> + 	 	 List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 ) ; <nl> + 	 	 <nl> + 	 	 numbers . forEach ( first - > { <nl> + 	 	 	 System . out . println ( " first " ) ; <nl> + 	 	 	 System . out . println ( " second " ) ; <nl> + 	 	 	 System . out . println ( " third " ) ; <nl> + 	 	 } ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest15 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest15 . java <nl> new file mode 100644 <nl> index 0000000 . . c51d5ee <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest15 . java <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + <nl> + public class InputLambdaTest15 { <nl> + 	 <nl> + 	 public static void main ( String args [ ] ) { <nl> + 	 	 ( ) - > { } ; / / No parameters ; result is void <nl> + 	 	 ( ) - > 42 ; / / No parameters , expression body <nl> + 	 	 ( ) - > null ; / / No parameters , expression body <nl> + 	 	 ( ) - > { return 42 ; } / / No parameters , block body with return <nl> + 	 	 ( ) - > { System . gc ( ) ; } / / No parameters , void block body <nl> + <nl> + 	 	 ( ) - > { / / Complex block body with returns <nl> + 	 	 if ( true ) return 12 ; <nl> + 	 	 else { <nl> + 	 	 int result = 15 ; <nl> + 	 	 for ( int i = 1 ; i < 10 ; i + + ) <nl> + 	 	 { <nl> + 	 	 result * = i ; <nl> + 	 	 } <nl> + 	 	 return result ; <nl> + 	 	 } ; <nl> + 	 	 } <nl> + <nl> + 	 	 ( int x ) - > x + 1 ; / / Single declared - type parameter <nl> + 	 	 ( int x ) - > { return x + 1 ; } / / Single declared - type parameter <nl> + 	 	 ( x ) - > x + 1 ; / / Single inferred - type parameter <nl> + 	 	 x - > x + 1 ; / / Parentheses optional for <nl> + 	 	 / / single inferred - type parameter <nl> + <nl> + 	 	 ( String s ) - > s . length ( ) ; / / Single declared - type parameter <nl> + 	 	 ( Thread t ) - > { t . start ( ) ; } / / Single declared - type parameter <nl> + 	 	 s - > s . length ( ) ; / / Single inferred - type parameter <nl> + 	 	 t - > { t . start ( ) ; } / / Single inferred - type parameter <nl> + <nl> + 	 	 ( int x , int y ) - > x + y ; / / Multiple declared - type parameters <nl> + 	 	 ( x , y ) - > x + y ; / / Multiple inferred - type parameters <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest16 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest16 . java <nl> new file mode 100644 <nl> index 0000000 . . ded6a75 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest16 . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + <nl> + public class InputLambdaTest16 { <nl> + <nl> + 	 static final Comparator < ChronoLocalDateTime < ? extends ChronoLocalDate > > DATE _ TIME _ ORDER = <nl> + ( Comparator < ChronoLocalDateTime < ? extends ChronoLocalDate > > ) ( dateTime1 , dateTime2 ) - > { <nl> + int cmp = Long . compare ( dateTime1 . toLocalDate ( ) . toEpochDay ( ) , dateTime2 . toLocalDate ( ) . toEpochDay ( ) ) ; <nl> + if ( cmp = = 0 ) { <nl> + cmp = Long . compare ( dateTime1 . toLocalTime ( ) . toNanoOfDay ( ) , dateTime2 . toLocalTime ( ) . toNanoOfDay ( ) ) ; <nl> + } <nl> + return cmp ; <nl> + } ; <nl> + 	 <nl> + 	 public static void main ( String args [ ] ) { <nl> + 	 	 <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest17 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest17 . java <nl> new file mode 100644 <nl> index 0000000 . . 47fd9bb <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest17 . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + public class InputLambdaTest17 { <nl> + <nl> + void initPartialTraversalState ( ) { <nl> + SpinedBuffer < P _ OUT > b = new SpinedBuffer < > ( ) ; <nl> + buffer = b ; <nl> + <nl> + pusher = ( ) - > spliterator . tryAdvance ( bufferSink ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest18 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest18 . java <nl> new file mode 100644 <nl> index 0000000 . . 8d3898b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest18 . java <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + public class InputLambdaTest18 { <nl> + 	 <nl> + 	 < T extends Annotation > T [ ] getDeclaredAnnotationsByType ( Class < T > annotationClass ) { <nl> + Objects . requireNonNull ( annotationClass ) ; <nl> + return AnnotationSupport . <nl> + getDirectlyAndIndirectlyPresent ( Arrays . stream ( getDeclaredAnnotations ( ) ) . <nl> + collect ( Collectors . toMap ( Annotation . annotationType ( ) , <nl> + Function . identity ( ) , <nl> + ( ( first , second ) - > first ) , <nl> + LinkedHashMap . neww ( ) ) ) , <nl> + annotationClass ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest19 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest19 . java <nl> new file mode 100644 <nl> index 0000000 . . dea3bb6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest19 . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + public class InputLambdaTest19 { <nl> + <nl> + static < T > Predicate < T > isEqual ( Object targetRef ) { <nl> + return ( null = = targetRef ) <nl> + ? true <nl> + : object - > targetRef . equals ( object ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest2 . java <nl> new file mode 100644 <nl> index 0000000 . . 006e9cf <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest2 . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + import TestLabmda . TestOfVoidLambdas ; <nl> + <nl> + public class InputLabdaTest2 { <nl> + <nl> + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { <nl> + 	 	 System . out . println ( " Method called " ) ; <nl> + 	 	 test . doSmth ( ) ; <nl> + 	 } <nl> + 	 <nl> + 	 <nl> + 	 public static void main ( String [ ] args ) { <nl> + 	 	 testVoidLambda ( ( ) - > System . out . println ( " Method in interface called " ) ) ; <nl> + 	 } <nl> + <nl> + 	 private interface TestOfVoidLambdas { <nl> + <nl> + 	 	 public void doSmth ( ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest3 . java <nl> new file mode 100644 <nl> index 0000000 . . e91f97f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest3 . java <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + import TestLabmda . TestOfVoidLambdas ; <nl> + <nl> + public class InputLabdaTest3 { <nl> + 	 <nl> + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { <nl> + 	 	 System . out . println ( " Method called " ) ; <nl> + 	 	 test . doSmth ( ) ; <nl> + 	 } <nl> + 	 <nl> + 	 <nl> + 	 public static void main ( String [ ] args ) { <nl> + 	 	 testVoidLambda ( ( ) - > { <nl> + 	 	 	 System . out . println ( " Method in interface called " ) ; <nl> + 	 	 } ) ; <nl> + 	 } <nl> + <nl> + 	 private interface TestOfVoidLambdas { <nl> + <nl> + 	 	 public void doSmth ( ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest4 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest4 . java <nl> new file mode 100644 <nl> index 0000000 . . dc6d9ee <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest4 . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + public class InputLabdaTest4 { <nl> + 	 <nl> + 	 public void doSomething ( ) { <nl> + 	 	 List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; <nl> + 	 	 <nl> + 	 	 numbers . forEach ( ( Integer value ) - > System . out . println ( value ) ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest5 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest5 . java <nl> new file mode 100644 <nl> index 0000000 . . 8adc71f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest5 . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + public class InputLabdaTest5 { <nl> + 	 <nl> + 	 public void doSomething ( ) { <nl> + 	 	 List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; <nl> + 	 	 <nl> + 	 	 numbers . forEach ( ( Integer value ) - > { System . out . println ( value ) ; } ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest6 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest6 . java <nl> new file mode 100644 <nl> index 0000000 . . 2d251b7 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest6 . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + public class InputLabdaTest6 { <nl> + <nl> + 	 public void doSomething ( ) { <nl> + 	 	 List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; <nl> + 	 	 <nl> + 	 	 numbers . forEach ( ( value ) - > System . out . println ( value ) ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest7 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest7 . java <nl> new file mode 100644 <nl> index 0000000 . . a8bfd2e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest7 . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + public class InputLabdaTest7 { <nl> + <nl> + 	 public void doSomething ( ) { <nl> + 	 	 List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; <nl> + <nl> + 	 	 numbers . forEach ( ( value ) - > { <nl> + 	 	 	 System . out . println ( value ) ; <nl> + 	 	 } ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest8 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest8 . java <nl> new file mode 100644 <nl> index 0000000 . . 94e32f1 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest8 . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + public class InputLabdaTest8 { <nl> + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { <nl> + 	 	 System . out . println ( " Method called " ) ; <nl> + 	 	 test . doSmth ( " fef " , 2 ) ; <nl> + 	 } <nl> + 	 <nl> + 	 <nl> + 	 public static void main ( String [ ] args ) { <nl> + 	 	 <nl> + 	 	 testVoidLambda ( ( s1 , s2 ) - > System . out . println ( s1 + s2 ) ) ; <nl> + 	 } <nl> + <nl> + 	 private interface TestOfVoidLambdas { <nl> + <nl> + 	 	 public void doSmth ( String first , Integer second ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest9 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest9 . java <nl> new file mode 100644 <nl> index 0000000 . . eca0d79 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest9 . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + public class InputLabdaTest9 { <nl> + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { <nl> + 	 	 System . out . println ( " Method called " ) ; <nl> + 	 	 test . doSmth ( " fef " , 2 ) ; <nl> + 	 } <nl> + 	 <nl> + 	 <nl> + 	 public static void main ( String [ ] args ) { <nl> + 	 	 <nl> + 	 	 testVoidLambda ( ( s1 , s2 ) - > { System . out . println ( s1 + s2 ) ; } ) ; <nl> + 	 } <nl> + <nl> + 	 private interface TestOfVoidLambdas { <nl> + <nl> + 	 	 public void doSmth ( String first , Integer second ) ; <nl> + 	 } <nl> + }

TEST DIFF:
diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm 
 index e9280af . . e38944b 100644 
 - - - a / src / xdocs / index . xml . vm 
 + + + b / src / xdocs / index . xml . vm 
 @ @ - 220 , 9 + 220 , 9 @ @ 
 < td > Provides real - time and on - demand scanning . < / td > 
 < / tr > 
 < tr > 
 - < td > < a href = " http : / / www . jgrasp . org / " > jGRASP < / a > < / td > 
 + < td > < a href = " https : / / www . jgrasp . org / " > jGRASP < / a > < / td > 
 < td > Larry Barowski < / td > 
 - < td > < a href = " http : / / www . jgrasp . org / " > jGRASP Home Page < / a > < / td > 
 + < td > < a href = " https : / / www . jgrasp . org / " > jGRASP Home Page < / a > < / td > 
 < td / > 
 < / tr > 
 < tr >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 index 89b14e8 . . 427cd0a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 @ @ - 3430 , 6 + 3430 , 11 @ @ public final class TokenTypes 
 * / 
 public static final int GENERIC _ END = GeneratedJavaTokenTypes . GENERIC _ END ; 
 
 + / * * 
 + * " - > " lambda specifying symbol . 
 + * / 
 + public static final int LAMBDA = GeneratedJavaTokenTypes . LAMBDA ; 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / The interesting code goes here 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 index e8e34c7 . . c4b51b2 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 @ @ - 95 , 6 + 95 , 9 @ @ tokens { 
 
 / / Tokens for Java 1 . 7 language enhancements 
 RESOURCE _ SPECIFICATION ; RESOURCES ; RESOURCE ; 
 + 
 + / / TOkens for 1 . 8 
 + LAMBDA ; 
 } 
 
 { 
 @ @ - 784 , 7 + 787 , 7 @ @ implementsClause 
 tc , 
 s2 , 
 s5 ) ; } 
 - | 	 v : variableDefinitions [ # mods , # t ] s6 : SEMI 
 + | 	 v : variableDefinitions [ # mods , # t ] ( s6 : SEMI ) ? 
 { 
 # field = # v ; 
 # v . addChild ( # s6 ) ; 
 @ @ - 945 , 7 + 948 , 7 @ @ parameterModifier 
 
 / / A formal parameter . 
 parameterDeclaration ! 
 - 	 : 	 pm : parameterModifier t : typeSpec [ false ] id : IDENT 
 + 	 : 	 pm : parameterModifier ( t : typeSpec [ false ] ) ? id : IDENT 
 	 	 pd : declaratorBrackets [ # t ] 
 	 	 { # parameterDeclaration = # ( # [ PARAMETER _ DEF , " PARAMETER _ DEF " ] , 
 	 	 	 	 	 	 	 	 	 pm , # ( [ TYPE , " TYPE " ] , pd ) , id ) ; } 
 @ @ - 1000 , 7 + 1003 , 7 @ @ traditionalStatement 
 	 	 / / An expression statement . This could be a method call , 
 	 	 / / assignment statement , or any other expression evaluated for 
 	 	 / / side - effects . 
 - 	 	 | 	 expression SEMI 
 + 	 	 | 	 { LA ( 2 ) ! = COLON } ? expression ( SEMI ) ? 
 
 	 	 / / class definition 
 	 	 | 	 m : modifiers ! classDefinition [ # m ] 
 @ @ - 1222 , 7 + 1225 , 8 @ @ finallyHandler 
 
 / / the mother of all expressions 
 expression 
 - 	 : 	 assignmentExpression 
 + 	 : 	 ( lambdaExpression ) = > lambdaExpression 
 + | { LA ( 1 ) ! = RPAREN } ? assignmentExpression 
 	 	 { # expression = # ( # [ EXPR , " EXPR " ] , # expression ) ; } 
 	 ; 
 
 @ @ - 1250 , 7 + 1254 , 8 @ @ assignmentExpression 
 | BXOR _ ASSIGN ^ 
 | BOR _ ASSIGN ^ 
 ) 
 - 	 	 	 assignmentExpression 
 + 	 	 	 ( ( lambdaExpression ) = > lambdaExpression 
 + 	 	 	 | assignmentExpression ) 
 	 	 ) ? 
 	 ; 
 
 @ @ - 1258 , 7 + 1263 , 11 @ @ assignmentExpression 
 / / conditional test ( level 12 ) 
 conditionalExpression 
 	 : 	 logicalOrExpression 
 - 	 	 ( QUESTION ^ assignmentExpression COLON conditionalExpression ) ? 
 + 	 	 ( QUESTION ^ 
 + ( ( lambdaExpression ) = > lambdaExpression 
 + | assignmentExpression ) 
 + COLON ( ( lambdaExpression ) = > lambdaExpression 
 + | conditionalExpression ) ) ? 
 	 ; 
 
 
 @ @ - 1300 , 7 + 1309 , 7 @ @ equalityExpression 
 
 / / boolean relational expressions ( level 5 ) 
 relationalExpression 
 - 	 : 	 shiftExpression 
 + 	 : 	 shiftExpression ( " instanceof " ^ typeSpec [ true ] ) ? 
 	 	 ( 	 ( 	 ( 	 LT ^ 
 	 	 	 	 | 	 GT ^ 
 	 	 	 	 | 	 LE ^ 
 @ @ - 1308 , 7 + 1317 , 7 @ @ relationalExpression 
 	 	 	 	 ) 
 	 	 	 	 shiftExpression 
 	 	 	 ) * 
 - 	 	 | 	 " instanceof " ^ typeSpec [ true ] 
 + 	 	 
 	 	 ) 
 	 ; 
 
 @ @ - 1361 , 6 + 1370 , 10 @ @ unaryExpressionNotPlusMinus 
 	 	 	 lp : LPAREN ^ { # lp . setType ( TYPECAST ) ; } typeCastParameters RPAREN 
 	 	 	 unaryExpressionNotPlusMinus 
 
 + | ( LPAREN typeCastParameters RPAREN lambdaExpression ) = > 
 + lpl : LPAREN ^ { # lpl . setType ( TYPECAST ) ; } typeCastParameters RPAREN 
 + lambdaExpression 
 + 
 	 	 | 	 postfixExpression 
 	 	 ) 
 	 ; 
 @ @ - 1436 , 7 + 1449 , 7 @ @ primaryExpression 
 	 | 	 " this " 
 	 | 	 " null " 
 	 | 	 newExpression 
 - 	 | 	 LPAREN assignmentExpression RPAREN 
 + 	 | 	 LPAREN ( ( lambdaExpression ) = > lambdaExpression | assignmentExpression ) RPAREN 
 	 | 	 " super " 
 	 	 / / look for int . class and int [ ] . class and int [ ] 
 	 | 	 builtInType 
 @ @ - 1511 , 7 + 1524 , 7 @ @ newExpression 
 	 ; 
 
 argList 
 - 	 : 	 ( 	 expressionList 
 + 	 : 	 ( 	 { LA ( 1 ) ! = RPAREN } ? expressionList 
 	 	 | 	 / * nothing * / 
 	 	 	 { # argList = # [ ELIST , " ELIST " ] ; } 
 	 	 ) 
 @ @ - 1543 , 6 + 1556 , 24 @ @ constant 
 	 | 	 STRING _ LITERAL 
 	 ; 
 
 + lambdaExpression 
 + 	 : 	 lambdaParameters LAMBDA ^ lambdaBody 
 + 	 ; 
 + 
 + lambdaParameters 
 + 	 : 	 IDENT 
 + 	 | 	 LPAREN ( parameterDeclarationList ) ? RPAREN 
 + 	 | 	 LPAREN inferredParameterList RPAREN 
 + 	 ; 
 + 
 + lambdaBody 
 + 	 : 	 expression 
 + 	 | 	 statement 
 + 	 ; 
 + inferredParameterList 
 + 	 : 	 IDENT ( COMMA IDENT ) * 
 + 	 ; 
 + 
 
 / / - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 / / The Java scanner 
 @ @ - 1635 , 6 + 1666 , 7 @ @ SL 	 	 	 	 : 	 " < < " 	 ; 
 SL _ ASSIGN 	 	 : 	 " < < = " 	 ; 
 LE 	 	 	 	 : 	 " < = " 	 ; 
 LT 	 	 	 	 : 	 ' < ' 	 	 ; 
 + LAMBDA : " - > " ; 
 BXOR 	 	 	 : 	 ' ^ ' 	 	 ; 
 BXOR _ ASSIGN 	 	 : 	 " ^ = " 	 ; 
 BOR 	 	 	 	 : 	 ' | ' 	 	 ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / LambdaTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / LambdaTest . java 
 new file mode 100644 
 index 0000000 . . 3d70bfa 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / LambdaTest . java 
 @ @ - 0 , 0 + 1 , 258 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2014 Oliver Burn 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 + 
 + public class LambdaTest extends BaseCheckTestSupport 
 + { 
 + 
 + @ Test 
 + public void testLambdaInVariableInitialization ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest1 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWithoutArgsOneLineLambdaBody ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest2 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWithoutArgsFullLambdaBody ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest3 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWithOneArgWithOneLineBody ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest4 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWithOneArgWithFullBody ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest5 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWithOneArgWIthoutTypeOneLineBody ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest6 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWithOneArgWIthoutTypeFullBody ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest7 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWithFewArgsWithoutTypeOneLineBody ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest8 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWithFewArgsWithoutTypeFullBody ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest9 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWithOneArgWIthoutParenthesesWithoutTypeOneLineBody ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest10 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWithOneArgWIthoutParenthesesWithoutTypeFullBody ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest11 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWithFewArgWIthTypeOneLine ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest12 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWithFewArgWithTypeFullBody ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest13 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWIthMultilineBody ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest14 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testCasesFromSpec ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest15 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testWithTypecast ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest16 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testInAssignment ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest17 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testInParentheses ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest18 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testInTernary ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputLambdaTest19 . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest1 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest1 . java 
 new file mode 100644 
 index 0000000 . . d164bd3 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest1 . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + public class InputLabdaTest1 { 
 + 	 
 + 	 static Runnable r1 = ( ) - > System . out . println ( " Hello world one ! " ) ; 
 + 	 static Runnable r2 = ( ) - > System . out . println ( " Hello world two ! " ) ; 
 + 	 
 + 	 public static void main ( String [ ] args ) { 
 + 	 	 r1 . run ( ) ; 
 + 	 	 r2 . run ( ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest10 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest10 . java 
 new file mode 100644 
 index 0000000 . . aeebfb9 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest10 . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + public class InputLabdaTest10 { 
 + 
 + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { 
 + 	 	 System . out . println ( " Method called " ) ; 
 + 	 	 test . doSmth ( " fef " ) ; 
 + 	 } 
 + 	 
 + 	 
 + 	 public static void main ( String [ ] args ) { 
 + 	 	 
 + 	 	 testVoidLambda ( s1 - > System . out . println ( s1 ) ) ; 
 + 	 } 
 + 
 + 	 private interface TestOfVoidLambdas { 
 + 
 + 	 	 public void doSmth ( String first ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest11 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest11 . java 
 new file mode 100644 
 index 0000000 . . b8192a1 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest11 . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + public class InputLabdaTest11 { 
 + 
 + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { 
 + 	 	 System . out . println ( " Method called " ) ; 
 + 	 	 test . doSmth ( " fef " ) ; 
 + 	 } 
 + 	 
 + 	 
 + 	 public static void main ( String [ ] args ) { 
 + 	 	 
 + 	 	 testVoidLambda ( s1 - > { System . out . println ( s1 ) ; } ) ; 
 + 	 } 
 + 
 + 	 private interface TestOfVoidLambdas { 
 + 
 + 	 	 public void doSmth ( String first ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest12 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest12 . java 
 new file mode 100644 
 index 0000000 . . 4ff21ec 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest12 . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + public class InputLabdaTest12 { 
 + 
 + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { 
 + 	 	 System . out . println ( " Method called " ) ; 
 + 	 	 test . doSmth ( " fef " , 5 ) ; 
 + 	 } 
 + 	 
 + 	 
 + 	 public static void main ( String [ ] args ) { 
 + 	 	 
 + 	 	 testVoidLambda ( ( String s1 , Integer i2 ) - > System . out . println ( s1 ) ) ; 
 + 	 } 
 + 
 + 	 private interface TestOfVoidLambdas { 
 + 
 + 	 	 public void doSmth ( String first , Integer second ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest13 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest13 . java 
 new file mode 100644 
 index 0000000 . . 2e6186e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest13 . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + public class InputLabdaTest12 { 
 + 
 + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { 
 + 	 	 System . out . println ( " Method called " ) ; 
 + 	 	 test . doSmth ( " fef " , 5 ) ; 
 + 	 } 
 + 	 
 + 	 
 + 	 public static void main ( String [ ] args ) { 
 + 	 	 
 + 	 	 testVoidLambda ( ( String s1 , Integer i2 ) - > { 
 + 	 	 	 System . out . println ( s1 ) ; 
 + 	 	 } ) ; 
 + 	 } 
 + 
 + 	 private interface TestOfVoidLambdas { 
 + 
 + 	 	 public void doSmth ( String first , Integer second ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest14 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest14 . java 
 new file mode 100644 
 index 0000000 . . ec67efa 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest14 . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + 
 + public class InputLambdaTest14 { 
 + 	 
 + 	 public static void main ( String args [ ] ) { 
 + 	 	 List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 ) ; 
 + 	 	 
 + 	 	 numbers . forEach ( first - > { 
 + 	 	 	 System . out . println ( " first " ) ; 
 + 	 	 	 System . out . println ( " second " ) ; 
 + 	 	 	 System . out . println ( " third " ) ; 
 + 	 	 } ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest15 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest15 . java 
 new file mode 100644 
 index 0000000 . . c51d5ee 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest15 . java 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + 
 + public class InputLambdaTest15 { 
 + 	 
 + 	 public static void main ( String args [ ] ) { 
 + 	 	 ( ) - > { } ; / / No parameters ; result is void 
 + 	 	 ( ) - > 42 ; / / No parameters , expression body 
 + 	 	 ( ) - > null ; / / No parameters , expression body 
 + 	 	 ( ) - > { return 42 ; } / / No parameters , block body with return 
 + 	 	 ( ) - > { System . gc ( ) ; } / / No parameters , void block body 
 + 
 + 	 	 ( ) - > { / / Complex block body with returns 
 + 	 	 if ( true ) return 12 ; 
 + 	 	 else { 
 + 	 	 int result = 15 ; 
 + 	 	 for ( int i = 1 ; i < 10 ; i + + ) 
 + 	 	 { 
 + 	 	 result * = i ; 
 + 	 	 } 
 + 	 	 return result ; 
 + 	 	 } ; 
 + 	 	 } 
 + 
 + 	 	 ( int x ) - > x + 1 ; / / Single declared - type parameter 
 + 	 	 ( int x ) - > { return x + 1 ; } / / Single declared - type parameter 
 + 	 	 ( x ) - > x + 1 ; / / Single inferred - type parameter 
 + 	 	 x - > x + 1 ; / / Parentheses optional for 
 + 	 	 / / single inferred - type parameter 
 + 
 + 	 	 ( String s ) - > s . length ( ) ; / / Single declared - type parameter 
 + 	 	 ( Thread t ) - > { t . start ( ) ; } / / Single declared - type parameter 
 + 	 	 s - > s . length ( ) ; / / Single inferred - type parameter 
 + 	 	 t - > { t . start ( ) ; } / / Single inferred - type parameter 
 + 
 + 	 	 ( int x , int y ) - > x + y ; / / Multiple declared - type parameters 
 + 	 	 ( x , y ) - > x + y ; / / Multiple inferred - type parameters 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest16 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest16 . java 
 new file mode 100644 
 index 0000000 . . ded6a75 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest16 . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + 
 + public class InputLambdaTest16 { 
 + 
 + 	 static final Comparator < ChronoLocalDateTime < ? extends ChronoLocalDate > > DATE _ TIME _ ORDER = 
 + ( Comparator < ChronoLocalDateTime < ? extends ChronoLocalDate > > ) ( dateTime1 , dateTime2 ) - > { 
 + int cmp = Long . compare ( dateTime1 . toLocalDate ( ) . toEpochDay ( ) , dateTime2 . toLocalDate ( ) . toEpochDay ( ) ) ; 
 + if ( cmp = = 0 ) { 
 + cmp = Long . compare ( dateTime1 . toLocalTime ( ) . toNanoOfDay ( ) , dateTime2 . toLocalTime ( ) . toNanoOfDay ( ) ) ; 
 + } 
 + return cmp ; 
 + } ; 
 + 	 
 + 	 public static void main ( String args [ ] ) { 
 + 	 	 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest17 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest17 . java 
 new file mode 100644 
 index 0000000 . . 47fd9bb 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest17 . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + public class InputLambdaTest17 { 
 + 
 + void initPartialTraversalState ( ) { 
 + SpinedBuffer < P _ OUT > b = new SpinedBuffer < > ( ) ; 
 + buffer = b ; 
 + 
 + pusher = ( ) - > spliterator . tryAdvance ( bufferSink ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest18 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest18 . java 
 new file mode 100644 
 index 0000000 . . 8d3898b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest18 . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + public class InputLambdaTest18 { 
 + 	 
 + 	 < T extends Annotation > T [ ] getDeclaredAnnotationsByType ( Class < T > annotationClass ) { 
 + Objects . requireNonNull ( annotationClass ) ; 
 + return AnnotationSupport . 
 + getDirectlyAndIndirectlyPresent ( Arrays . stream ( getDeclaredAnnotations ( ) ) . 
 + collect ( Collectors . toMap ( Annotation . annotationType ( ) , 
 + Function . identity ( ) , 
 + ( ( first , second ) - > first ) , 
 + LinkedHashMap . neww ( ) ) ) , 
 + annotationClass ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest19 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest19 . java 
 new file mode 100644 
 index 0000000 . . dea3bb6 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest19 . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + public class InputLambdaTest19 { 
 + 
 + static < T > Predicate < T > isEqual ( Object targetRef ) { 
 + return ( null = = targetRef ) 
 + ? true 
 + : object - > targetRef . equals ( object ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest2 . java 
 new file mode 100644 
 index 0000000 . . 006e9cf 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest2 . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + import TestLabmda . TestOfVoidLambdas ; 
 + 
 + public class InputLabdaTest2 { 
 + 
 + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { 
 + 	 	 System . out . println ( " Method called " ) ; 
 + 	 	 test . doSmth ( ) ; 
 + 	 } 
 + 	 
 + 	 
 + 	 public static void main ( String [ ] args ) { 
 + 	 	 testVoidLambda ( ( ) - > System . out . println ( " Method in interface called " ) ) ; 
 + 	 } 
 + 
 + 	 private interface TestOfVoidLambdas { 
 + 
 + 	 	 public void doSmth ( ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest3 . java 
 new file mode 100644 
 index 0000000 . . e91f97f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest3 . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + import TestLabmda . TestOfVoidLambdas ; 
 + 
 + public class InputLabdaTest3 { 
 + 	 
 + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { 
 + 	 	 System . out . println ( " Method called " ) ; 
 + 	 	 test . doSmth ( ) ; 
 + 	 } 
 + 	 
 + 	 
 + 	 public static void main ( String [ ] args ) { 
 + 	 	 testVoidLambda ( ( ) - > { 
 + 	 	 	 System . out . println ( " Method in interface called " ) ; 
 + 	 	 } ) ; 
 + 	 } 
 + 
 + 	 private interface TestOfVoidLambdas { 
 + 
 + 	 	 public void doSmth ( ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest4 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest4 . java 
 new file mode 100644 
 index 0000000 . . dc6d9ee 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest4 . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + public class InputLabdaTest4 { 
 + 	 
 + 	 public void doSomething ( ) { 
 + 	 	 List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; 
 + 	 	 
 + 	 	 numbers . forEach ( ( Integer value ) - > System . out . println ( value ) ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest5 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest5 . java 
 new file mode 100644 
 index 0000000 . . 8adc71f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest5 . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + public class InputLabdaTest5 { 
 + 	 
 + 	 public void doSomething ( ) { 
 + 	 	 List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; 
 + 	 	 
 + 	 	 numbers . forEach ( ( Integer value ) - > { System . out . println ( value ) ; } ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest6 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest6 . java 
 new file mode 100644 
 index 0000000 . . 2d251b7 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest6 . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + public class InputLabdaTest6 { 
 + 
 + 	 public void doSomething ( ) { 
 + 	 	 List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; 
 + 	 	 
 + 	 	 numbers . forEach ( ( value ) - > System . out . println ( value ) ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest7 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest7 . java 
 new file mode 100644 
 index 0000000 . . a8bfd2e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest7 . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + public class InputLabdaTest7 { 
 + 
 + 	 public void doSomething ( ) { 
 + 	 	 List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; 
 + 
 + 	 	 numbers . forEach ( ( value ) - > { 
 + 	 	 	 System . out . println ( value ) ; 
 + 	 	 } ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest8 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest8 . java 
 new file mode 100644 
 index 0000000 . . 94e32f1 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest8 . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + public class InputLabdaTest8 { 
 + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { 
 + 	 	 System . out . println ( " Method called " ) ; 
 + 	 	 test . doSmth ( " fef " , 2 ) ; 
 + 	 } 
 + 	 
 + 	 
 + 	 public static void main ( String [ ] args ) { 
 + 	 	 
 + 	 	 testVoidLambda ( ( s1 , s2 ) - > System . out . println ( s1 + s2 ) ) ; 
 + 	 } 
 + 
 + 	 private interface TestOfVoidLambdas { 
 + 
 + 	 	 public void doSmth ( String first , Integer second ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest9 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest9 . java 
 new file mode 100644 
 index 0000000 . . eca0d79 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputLambdaTest9 . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + public class InputLabdaTest9 { 
 + 	 public static void testVoidLambda ( TestOfVoidLambdas test ) { 
 + 	 	 System . out . println ( " Method called " ) ; 
 + 	 	 test . doSmth ( " fef " , 2 ) ; 
 + 	 } 
 + 	 
 + 	 
 + 	 public static void main ( String [ ] args ) { 
 + 	 	 
 + 	 	 testVoidLambda ( ( s1 , s2 ) - > { System . out . println ( s1 + s2 ) ; } ) ; 
 + 	 } 
 + 
 + 	 private interface TestOfVoidLambdas { 
 + 
 + 	 	 public void doSmth ( String first , Integer second ) ; 
 + 	 } 
 + }
