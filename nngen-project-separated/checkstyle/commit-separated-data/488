BLEU SCORE: 0.030268675397150575

TEST MSG: Issue # 5176 : adjacent static import groups ones became impossible in 8 . 3
GENERATED MSG: Import Order Check , added option allows alphabetical grouping order in static group , issue # 12

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index c9d4dcb . . f121e5f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 440 , 8 + 440 , 7 @ @ public class ImportOrderCheck <nl> final int groupIdx = getGroupNumber ( name ) ; <nl> final int line = ident . getLineNo ( ) ; <nl> <nl> - if ( groupIdx = = lastGroup <nl> - | | ! beforeFirstImport & & isAlphabeticallySortableStaticImport ( isStatic ) ) { <nl> + if ( isInSameGroup ( groupIdx , isStatic ) ) { <nl> doVisitTokenInSameGroup ( isStatic , previous , name , line ) ; <nl> } <nl> else if ( groupIdx > lastGroup ) { <nl> @ @ - 502 , 18 + 501 , 6 @ @ public class ImportOrderCheck <nl> } <nl> <nl> / * * <nl> - * Checks whether static imports grouped by < b > top < / b > or < b > bottom < / b > option <nl> - * are sorted alphabetically or not . <nl> - * @ param isStatic if current import is static . <nl> - * @ return true if static imports should be sorted alphabetically . <nl> - * / <nl> - private boolean isAlphabeticallySortableStaticImport ( boolean isStatic ) { <nl> - return isStatic & & sortStaticImportsAlphabetically <nl> - & & ( option = = ImportOrderOption . TOP <nl> - | | option = = ImportOrderOption . BOTTOM ) ; <nl> - } <nl> - <nl> - / * * <nl> * Shares processing . . . <nl> * <nl> * @ param isStatic whether the token is static or not . <nl> @ @ - 557 , 12 + 544 , 22 @ @ public class ImportOrderCheck <nl> * / <nl> private boolean isWrongOrder ( String name , boolean isStatic ) { <nl> final boolean result ; <nl> - if ( isStatic & & useContainerOrderingForStatic ) { <nl> - result = compareContainerOrder ( lastImport , name , caseSensitive ) > 0 ; <nl> + if ( isStatic ) { <nl> + if ( useContainerOrderingForStatic ) { <nl> + result = compareContainerOrder ( lastImport , name , caseSensitive ) > = 0 ; <nl> + } <nl> + else if ( option = = ImportOrderOption . TOP <nl> + | | option = = ImportOrderOption . BOTTOM ) { <nl> + result = sortStaticImportsAlphabetically <nl> + & & compare ( lastImport , name , caseSensitive ) > = 0 ; <nl> + } <nl> + else { <nl> + result = compare ( lastImport , name , caseSensitive ) > = 0 ; <nl> + } <nl> } <nl> else { <nl> / / out of lexicographic order <nl> - result = compare ( lastImport , name , caseSensitive ) > 0 ; <nl> + result = compare ( lastImport , name , caseSensitive ) > = 0 ; <nl> } <nl> return result ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> index e40368a . . 249f237 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> @ @ - 137 , 6 + 137 , 51 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testNoGapBetweenStaticImports ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " groups " , " java , javax , org " ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " ordered " , " true " ) ; <nl> + checkConfig . addAttribute ( " option " , " bottom " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputImportOrderNoGapBetweenStaticImports . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSortStaticImportsAlphabeticallyFalse ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " groups " , " java , javax , org " ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " ordered " , " true " ) ; <nl> + checkConfig . addAttribute ( " option " , " top " ) ; <nl> + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " false " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputImportOrderSortStaticImportsAlphabetically . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSortStaticImportsAlphabeticallyTrue ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " groups " , " java , javax , org " ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " ordered " , " true " ) ; <nl> + checkConfig . addAttribute ( " option " , " top " ) ; <nl> + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 4 : " + getCheckMessage ( MSG _ ORDERING , <nl> + " javax . xml . transform . TransformerFactory . newInstance " ) , <nl> + " 5 : " + getCheckMessage ( MSG _ ORDERING , " java . lang . Math . cos " ) , <nl> + " 6 : " + getCheckMessage ( MSG _ ORDERING , " java . lang . Math . abs " ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputImportOrderSortStaticImportsAlphabetically . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testCaseInsensitive ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> checkConfig . addAttribute ( " caseSensitive " , " false " ) ; <nl> @ @ - 173 , 7 + 218 , 6 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> createModuleConfig ( ImportOrderCheck . class ) ; <nl> checkConfig . addAttribute ( " option " , " top " ) ; <nl> final String [ ] expected = { <nl> - " 4 : " + getCheckMessage ( MSG _ ORDERING , " java . awt . Button . ABORT " ) , <nl> " 7 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . awt . Button " ) , <nl> " 12 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . io . IOException " ) , <nl> " 15 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " javax . swing . JComponent " ) , <nl> @ @ - 247 , 7 + 291 , 6 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> " 14 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . io . File . * " ) , <nl> " 15 : " + getCheckMessage ( MSG _ ORDERING , " java . io . File " ) , <nl> " 17 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . io . File . createTempFile " ) , <nl> - " 18 : " + getCheckMessage ( MSG _ ORDERING , " java . awt . Button . ABORT " ) , <nl> " 21 : " + getCheckMessage ( MSG _ ORDERING , " java . io . Reader " ) , <nl> " 21 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . io . Reader " ) , <nl> } ; <nl> @ @ - 322 , 7 + 365 , 6 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> checkConfig . addAttribute ( " option " , " top " ) ; <nl> checkConfig . addAttribute ( " groups " , " org , java " ) ; <nl> final String [ ] expected = { <nl> - " 4 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . Recognizer . EOF " ) , <nl> " 6 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " org . * " ) , <nl> " 8 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . util . Set " ) , <nl> } ; <nl> @ @ - 352 , 12 + 394 , 51 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> final String [ ] expected = { <nl> " 5 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . util . Set " ) , <nl> " 7 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . lang . Math . PI " ) , <nl> - " 8 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . Recognizer . EOF " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputImportOrderStaticGroupOrderBottom . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> + public void testImportReception ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " groups " , " java , javax " ) ; <nl> + final String [ ] expected = { <nl> + " 6 : " + getCheckMessage ( MSG _ ORDERING , " java . awt . event . ActionEvent " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputImportOrderRepetiton . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testStaticImportReceptionTop ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " option " , " top " ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " groups " , " java , org " ) ; <nl> + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 5 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . CommonToken . * " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputImportOrderStaticRepetition . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testStaticImportReception ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " groups " , " java , org " ) ; <nl> + final String [ ] expected = { <nl> + " 4 : " + getCheckMessage ( MSG _ SEPARATION , " org . antlr . v4 . runtime . CommonToken . * " ) , <nl> + " 5 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . CommonToken . * " ) , <nl> + " 7 : " + getCheckMessage ( MSG _ ORDERING , " java . util . Set " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputImportOrderStaticRepetition . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testStaticGroupsOrderAbove ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createModuleConfig ( ImportOrderCheck . class ) ; <nl> @ @ - 380 , 7 + 461 , 6 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> checkConfig . addAttribute ( " option " , " top " ) ; <nl> checkConfig . addAttribute ( " groups " , " org , java " ) ; <nl> final String [ ] expected = { <nl> - " 4 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . CommonToken . * " ) , <nl> " 6 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " org . * " ) , <nl> " 8 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . util . Set " ) , <nl> " 9 : " + getCheckMessage ( MSG _ ORDERING , " org . junit . Test " ) , <nl> @ @ - 412 , 7 + 492 , 6 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> final String [ ] expected = { <nl> " 5 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . util . Set " ) , <nl> " 7 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . lang . Math . * " ) , <nl> - " 8 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . CommonToken . * " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputImportOrderStaticOnDemandGroupOrderBottom . java " ) , <nl> expected ) ; <nl> @ @ - 550 , 6 + 629 , 23 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testStaticImportEclipseRepetition ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " option " , " top " ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " groups " , " java , org " ) ; <nl> + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; <nl> + checkConfig . addAttribute ( " useContainerOrderingForStatic " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 4 : " + getCheckMessage ( MSG _ ORDERING , <nl> + " io . netty . handler . codec . http . HttpHeaders . Names . DATE " ) , <nl> + } ; <nl> + verify ( checkConfig , <nl> + getNonCompilablePath ( " InputImportOrderEclipseStaticRepetition . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testEclipseDefaultNegative ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> checkConfig . addAttribute ( " groups " , " java , javax , org , com " ) ; <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderEclipseStaticRepetition . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderEclipseStaticRepetition . java <nl> new file mode 100644 <nl> index 0000000 . . 6228ffb <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderEclipseStaticRepetition . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> + <nl> + import static io . netty . handler . codec . http . HttpHeaders . Names . DATE ; <nl> + import static io . netty . handler . codec . http . HttpHeaders . Names . DATE ; <nl> + import static io . netty . handler . codec . http . HttpHeaders . Names . addDate ; <nl> + <nl> + public class InputImportOrderEclipseStaticRepetition { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderNoGapBetweenStaticImports . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderNoGapBetweenStaticImports . java <nl> new file mode 100644 <nl> index 0000000 . . 2bfdc4f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderNoGapBetweenStaticImports . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; <nl> + <nl> + import static java . lang . Math . abs ; <nl> + import static java . lang . Math . cos ; / / no gap below <nl> + import static javax . xml . transform . TransformerFactory . newInstance ; / / no gap below <nl> + import static org . junit . Assert . fail ; <nl> + <nl> + public class InputImportOrderNoGapBetweenStaticImports { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderRepetiton . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderRepetiton . java <nl> new file mode 100644 <nl> index 0000000 . . 7845692 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderRepetiton . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> + <nl> + import java . awt . Button ; <nl> + import java . awt . Dialog ; <nl> + import java . awt . event . ActionEvent ; <nl> + import java . awt . event . ActionEvent ; / / Repetitive import <nl> + <nl> + import javax . swing . JComponent ; <nl> + import javax . swing . JTable ; <nl> + <nl> + public class InputImportOrderRepetiton { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderSortStaticImportsAlphabetically . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderSortStaticImportsAlphabetically . java <nl> new file mode 100644 <nl> index 0000000 . . 080bc16 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderSortStaticImportsAlphabetically . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; <nl> + <nl> + import static org . junit . Assert . fail ; <nl> + import static javax . xml . transform . TransformerFactory . newInstance ; <nl> + import static java . lang . Math . cos ; <nl> + import static java . lang . Math . abs ; <nl> + <nl> + public class InputImportOrderSortStaticImportsAlphabetically { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticRepetition . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticRepetition . java <nl> new file mode 100644 <nl> index 0000000 . . d848748 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticRepetition . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> + <nl> + import static java . lang . Math . * ; <nl> + import static org . antlr . v4 . runtime . CommonToken . * ; <nl> + import static org . antlr . v4 . runtime . CommonToken . * ; / / Repetitive static import <nl> + <nl> + import java . util . Set ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + public class InputImportOrderStaticRepetition { <nl> + } <nl> diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml <nl> index 88523da . . d1f43b4 100644 <nl> - - - a / src / xdocs / config _ imports . xml <nl> + + + b / src / xdocs / config _ imports . xml <nl> @ @ - 1291 , 7 + 1291 , 8 @ @ import java . util . stream . IntStream ; <nl> < / tr > <nl> < tr > <nl> < td > ordered < / td > <nl> - < td > whether imports within group should be sorted < / td > <nl> + < td > whether imports within group should be sorted <nl> + ( It don ' t affect soring for static imports . ) < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > true < / td > <nl> < td > 3 . 2 < / td > <nl> @ @ - 1318 , 8 + 1319 , 9 @ @ import java . util . stream . IntStream ; <nl> < / tr > <nl> < tr > <nl> < td > sortStaticImportsAlphabetically < / td > <nl> - < td > whether static imports grouped by < b > top < / b > or < b > bottom < / b > option <nl> - are sorted alphabetically or not < / td > <nl> + < td > whether < b > static imports < / b > grouped by < b > top < / b > or < b > bottom < / b > option <nl> + are sorted alphabetically or not . <nl> + Attention : it is applied for all static imports as one group . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > false < / td > <nl> < td > 6 . 5 < / td >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> index 8553736 . . 948b35c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> @ @ - 31 , 14 + 31 , 17 @ @ import org . apache . commons . beanutils . ConversionException ; <nl> import antlr . collections . AST ; <nl> <nl> import com . google . common . collect . ImmutableList ; <nl> + import com . puppycrawl . tools . checkstyle . api . AnnotationUtility ; <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> <nl> / * * <nl> - * Checks visibility of class members . Only static final or immutable members may be public , <nl> + * Checks visibility of class members . Only static final , immutable or annotated <nl> + * by specified annotation members may be public , <nl> * other class members must be private unless allowProtected / Package is set . <nl> * < p > <nl> * Public members are not flagged if the name matches the public <nl> @ @ - 47 , 7 + 50 , 27 @ @ import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> * < / p > <nl> * Rationale : Enforce encapsulation . <nl> * < p > <nl> - * Check also has an option making it less strict : <nl> + * Check also has options making it less strict : <nl> + * < / p > <nl> + * < p > <nl> + * < b > ignoreAnnotationCanonicalNames < / b > - the list of annotations canonical names <nl> + * which ignore variables in consideration , if user will provide short annotation name <nl> + * that type will match to any named the same type without consideration of package , <nl> + * list by default : <nl> + * < ul > <nl> + * < li > org . junit . Rule < / li > <nl> + * < li > com . google . common . annotations . VisibleForTesting < / li > <nl> + * < / ul > <nl> + * < / p > <nl> + * < p > <nl> + * For example such public field will be skipped by default value of list above : <nl> + * < / p > <nl> + * < p > <nl> + * < code > <nl> + * < pre > @ org . junit . Rule <nl> + * public TemporaryFolder publicJUnitRule = new TemporaryFolder ( ) ; <nl> + * < / pre > <nl> + * < / code > <nl> * < / p > <nl> * < p > <nl> * < b > allowPublicImmutableFields < / b > - which allows immutable fields be <nl> @ @ - 159 , 6 + 182 , 50 @ @ import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> * < / code > <nl> * < / pre > <nl> * < / p > <nl> + * < p > <nl> + * To configure the Check passing fields annotated with <nl> + * < pre > @ com . annotation . CustomAnnotation < / pre > : <nl> + * < / p > <nl> + * < p > <nl> + * & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; <nl> + * & lt ; property name = & quot ; ignoreAnnotationCanonicalNames & quot ; value = & quot ; <nl> + * com . annotation . CustomAnnotation & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / p > <nl> + * < p > <nl> + * < code > <nl> + * < pre > @ com . annotation . CustomAnnotation <nl> + * String customAnnotated ; / / No warning <nl> + * < / pre > <nl> + * < pre > @ CustomAnnotation <nl> + * String shortCustomAnnotated ; / / No warning <nl> + * < / pre > <nl> + * < / code > <nl> + * < / p > <nl> + * < p > <nl> + * To configure the Check passing fields annotated with short annotation name <nl> + * < pre > @ CustomAnnotation < / pre > : <nl> + * < / p > <nl> + * < p > <nl> + * & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; <nl> + * & lt ; property name = & quot ; ignoreAnnotationCanonicalNames & quot ; <nl> + * value = & quot ; CustomAnnotation & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / p > <nl> + * < p > <nl> + * < code > <nl> + * < pre > @ CustomAnnotation <nl> + * String customAnnotated ; / / No warning <nl> + * < / pre > <nl> + * < pre > @ com . annotation . CustomAnnotation <nl> + * String customAnnotated1 ; / / No warning <nl> + * < / pre > <nl> + * < pre > @ mypackage . annotation . CustomAnnotation <nl> + * String customAnnotatedAnotherPackage ; / / another package but short name matches <nl> + * / / so no violation <nl> + * < / pre > <nl> + * < / code > <nl> + * < / p > <nl> * <nl> * @ author < a href = " mailto : nesterenko - aleksey @ list . ru " > Aleksey Nesterenko < / a > <nl> * / <nl> @ @ - 190 , 6 + 257 , 14 @ @ public class VisibilityModifierCheck <nl> / * * regexp for public members that should be ignored * / <nl> private Pattern publicMemberPattern = Pattern . compile ( publicMemberFormat ) ; <nl> <nl> + / * * List of ignore annotations canonical names . * / <nl> + private List < String > ignoreAnnotationCanonicalNames = <nl> + new ArrayList < > ( DEFAULT _ IGNORE _ ANNOTATIONS ) ; <nl> + <nl> + / * * List of ignore annotations short names . * / <nl> + private List < String > ignoreAnnotationShortNames = <nl> + getClassShortNames ( DEFAULT _ IGNORE _ ANNOTATIONS ) ; <nl> + <nl> / * * Allows immutable fields to be declared as public . * / <nl> private boolean allowPublicImmutableFields = true ; <nl> <nl> @ @ - 224 , 6 + 299 , 12 @ @ public class VisibilityModifierCheck <nl> " java . net . InetSocketAddress " <nl> ) ; <nl> <nl> + / * * Default ignore annotations canonical names . * / <nl> + private static final List < String > DEFAULT _ IGNORE _ ANNOTATIONS = ImmutableList . of ( <nl> + " org . junit . Rule " , <nl> + " com . google . common . annotations . VisibleForTesting " <nl> + ) ; <nl> + <nl> / * * contains explicit access modifiers . * / <nl> private static final String [ ] EXPLICIT _ MODS = { " public " , " private " , " protected " } ; <nl> <nl> @ @ - 234 , 6 + 315 , 15 @ @ public class VisibilityModifierCheck <nl> } <nl> <nl> / * * <nl> + * Set the list of ignore annotations . <nl> + * @ param annotationNames array of ignore annotations canonical names . <nl> + * / <nl> + public void setIgnoreAnnotationCanonicalNames ( String [ ] annotationNames ) <nl> + { <nl> + ignoreAnnotationCanonicalNames = Arrays . asList ( annotationNames ) ; <nl> + } <nl> + <nl> + / * * <nl> * Set whether protected members are allowed . <nl> * @ param protectedAllowed whether protected members are allowed <nl> * / <nl> @ @ - 291 , 7 + 381 , 7 @ @ public class VisibilityModifierCheck <nl> <nl> / * * <nl> * Set the list of immutable classes types names . <nl> - * @ param classNames array of immutable types short names . <nl> + * @ param classNames array of immutable types canonical names . <nl> * / <nl> public void setImmutableClassCanonicalNames ( String [ ] classNames ) <nl> { <nl> @ @ - 321 , 8 + 411 , 14 @ @ public class VisibilityModifierCheck <nl> public void beginTree ( DetailAST rootAst ) <nl> { <nl> immutableClassShortNames . clear ( ) ; <nl> - final List < String > shortNames = getClassShortNames ( immutableClassCanonicalNames ) ; <nl> - immutableClassShortNames . addAll ( shortNames ) ; <nl> + final List < String > classShortNames = <nl> + getClassShortNames ( immutableClassCanonicalNames ) ; <nl> + immutableClassShortNames . addAll ( classShortNames ) ; <nl> + <nl> + ignoreAnnotationShortNames . clear ( ) ; <nl> + final List < String > annotationShortNames = <nl> + getClassShortNames ( ignoreAnnotationCanonicalNames ) ; <nl> + ignoreAnnotationShortNames . addAll ( annotationShortNames ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 363 , 7 + 459 , 7 @ @ public class VisibilityModifierCheck <nl> final boolean inInterfaceOrAnnotationBlock = <nl> ScopeUtils . inInterfaceOrAnnotationBlock ( variableDef ) ; <nl> <nl> - if ( ! inInterfaceOrAnnotationBlock ) { <nl> + if ( ! inInterfaceOrAnnotationBlock & & ! hasIgnoreAnnotation ( variableDef ) ) { <nl> final DetailAST varNameAST = getVarNameAST ( variableDef ) ; <nl> final String varName = varNameAST . getText ( ) ; <nl> if ( ! hasProperAccessModifier ( variableDef , varName ) ) { <nl> @ @ - 374 , 6 + 470 , 18 @ @ public class VisibilityModifierCheck <nl> } <nl> <nl> / * * <nl> + * Checks if variable def has ignore annotation . <nl> + * @ param variableDef { @ link TokenTypes # VARIABLE _ DEF VARIABLE _ DEF } <nl> + * @ return true if variable def has ignore annotation . <nl> + * / <nl> + private boolean hasIgnoreAnnotation ( DetailAST variableDef ) <nl> + { <nl> + final DetailAST firstIgnoreAnnotation = <nl> + containsMatchingAnnotation ( variableDef ) ; <nl> + return firstIgnoreAnnotation ! = null ; <nl> + } <nl> + <nl> + / * * <nl> * Checks imported type . If type ' s canonical name was not specified in <nl> * < b > immutableClassCanonicalNames < / b > , but it ' s short name collides with one from <nl> * < b > immutableClassShortNames < / b > - removes it from the last one . <nl> @ @ - 394 , 6 + 502 , 11 @ @ public class VisibilityModifierCheck <nl> { <nl> immutableClassShortNames . remove ( shortName ) ; <nl> } <nl> + if ( ! ignoreAnnotationCanonicalNames . contains ( canonicalName ) <nl> + & & ignoreAnnotationShortNames . contains ( shortName ) ) <nl> + { <nl> + ignoreAnnotationShortNames . remove ( shortName ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 651 , 4 + 764 , 51 @ @ public class VisibilityModifierCheck <nl> return shortClassName ; <nl> } <nl> <nl> + / * * <nl> + * Checks whether the AST is annotated with <nl> + * an annotation containing the passed in regular <nl> + * expression and return the AST representing that <nl> + * annotation . <nl> + * <nl> + * < p > <nl> + * This method will not look for imports or package <nl> + * statements to detect the passed in annotation . <nl> + * < / p > <nl> + * <nl> + * < p > <nl> + * To check if an AST contains a passed in annotation <nl> + * taking into account fully - qualified names <nl> + * ( ex : java . lang . Override , Override ) <nl> + * this method will need to be called twice . Once for each <nl> + * name given . <nl> + * < / p > <nl> + * <nl> + * @ param variableDef { @ link TokenTypes # VARIABLE _ DEF variable def node } . <nl> + * @ return the AST representing the first such annotation or null if <nl> + * no such annotation was found <nl> + * / <nl> + private DetailAST containsMatchingAnnotation ( DetailAST variableDef ) <nl> + { <nl> + DetailAST matchingAnnotation = null ; <nl> + <nl> + final DetailAST holder = AnnotationUtility . getAnnotationHolder ( variableDef ) ; <nl> + <nl> + for ( DetailAST child = holder . getFirstChild ( ) ; <nl> + child ! = null ; child = child . getNextSibling ( ) ) <nl> + { <nl> + if ( child . getType ( ) = = TokenTypes . ANNOTATION ) { <nl> + final DetailAST at = child . getFirstChild ( ) ; <nl> + final String name = <nl> + FullIdent . createFullIdent ( at . getNextSibling ( ) ) . getText ( ) ; <nl> + if ( ignoreAnnotationCanonicalNames . contains ( name ) <nl> + | | ignoreAnnotationShortNames . contains ( name ) ) <nl> + { <nl> + matchingAnnotation = child ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + return matchingAnnotation ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> index 2d93042 . . f6446da 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> @ @ - 18 , 12 + 18 , 13 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks . design ; <nl> <nl> + import static com . puppycrawl . tools . checkstyle . checks . design . VisibilityModifierCheck . MSG _ KEY ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> - import org . junit . Test ; <nl> - <nl> - import static com . puppycrawl . tools . checkstyle . checks . design . VisibilityModifierCheck . MSG _ KEY ; <nl> <nl> public class VisibilityModifierCheckTest <nl> extends BaseCheckTestSupport <nl> @ @ - 180 , 4 + 181 , 78 @ @ public class VisibilityModifierCheckTest <nl> verify ( checkConfig , getPath ( " InputImmutableStarImport2 . java " ) , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testDefaultAnnotationPatterns ( ) throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 39 : 19 : " + getCheckMessage ( MSG _ KEY , " customAnnotatedPublic " ) , <nl> + " 42 : 12 : " + getCheckMessage ( MSG _ KEY , " customAnnotatedPackage " ) , <nl> + " 45 : 22 : " + getCheckMessage ( MSG _ KEY , " customAnnotatedProtected " ) , <nl> + " 47 : 19 : " + getCheckMessage ( MSG _ KEY , " unannotatedPublic " ) , <nl> + " 48 : 12 : " + getCheckMessage ( MSG _ KEY , " unannotatedPackage " ) , <nl> + " 49 : 22 : " + getCheckMessage ( MSG _ KEY , " unannotatedProtected " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " AnnotatedVisibility . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCustomAnnotationPatterns ( ) throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + checkConfig . addAttribute ( " ignoreAnnotationCanonicalNames " , <nl> + " com . puppycrawl . tools . checkstyle . AnnotatedVisibility . CustomAnnotation " ) ; <nl> + final String [ ] expected = { <nl> + " 15 : 28 : " + getCheckMessage ( MSG _ KEY , " publicJUnitRule " ) , <nl> + " 18 : 28 : " + getCheckMessage ( MSG _ KEY , " fqPublicJUnitRule " ) , <nl> + " 21 : 19 : " + getCheckMessage ( MSG _ KEY , " googleCommonsAnnotatedPublic " ) , <nl> + " 24 : 12 : " + getCheckMessage ( MSG _ KEY , " googleCommonsAnnotatedPackage " ) , <nl> + " 27 : 22 : " + getCheckMessage ( MSG _ KEY , " googleCommonsAnnotatedProtected " ) , <nl> + " 30 : 19 : " + getCheckMessage ( MSG _ KEY , " fqGoogleCommonsAnnotatedPublic " ) , <nl> + " 33 : 12 : " + getCheckMessage ( MSG _ KEY , " fqGoogleCommonsAnnotatedPackage " ) , <nl> + " 36 : 22 : " + getCheckMessage ( MSG _ KEY , " fqGoogleCommonsAnnotatedProtected " ) , <nl> + " 47 : 19 : " + getCheckMessage ( MSG _ KEY , " unannotatedPublic " ) , <nl> + " 48 : 12 : " + getCheckMessage ( MSG _ KEY , " unannotatedPackage " ) , <nl> + " 49 : 22 : " + getCheckMessage ( MSG _ KEY , " unannotatedProtected " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " AnnotatedVisibility . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIgnoreAnnotationNoPattern ( ) throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + checkConfig . addAttribute ( " ignoreAnnotationCanonicalNames " , " " ) ; <nl> + final String [ ] expected = { <nl> + " 15 : 28 : " + getCheckMessage ( MSG _ KEY , " publicJUnitRule " ) , <nl> + " 18 : 28 : " + getCheckMessage ( MSG _ KEY , " fqPublicJUnitRule " ) , <nl> + " 21 : 19 : " + getCheckMessage ( MSG _ KEY , " googleCommonsAnnotatedPublic " ) , <nl> + " 24 : 12 : " + getCheckMessage ( MSG _ KEY , " googleCommonsAnnotatedPackage " ) , <nl> + " 27 : 22 : " + getCheckMessage ( MSG _ KEY , " googleCommonsAnnotatedProtected " ) , <nl> + " 30 : 19 : " + getCheckMessage ( MSG _ KEY , " fqGoogleCommonsAnnotatedPublic " ) , <nl> + " 33 : 12 : " + getCheckMessage ( MSG _ KEY , " fqGoogleCommonsAnnotatedPackage " ) , <nl> + " 36 : 22 : " + getCheckMessage ( MSG _ KEY , " fqGoogleCommonsAnnotatedProtected " ) , <nl> + " 39 : 19 : " + getCheckMessage ( MSG _ KEY , " customAnnotatedPublic " ) , <nl> + " 42 : 12 : " + getCheckMessage ( MSG _ KEY , " customAnnotatedPackage " ) , <nl> + " 45 : 22 : " + getCheckMessage ( MSG _ KEY , " customAnnotatedProtected " ) , <nl> + " 47 : 19 : " + getCheckMessage ( MSG _ KEY , " unannotatedPublic " ) , <nl> + " 48 : 12 : " + getCheckMessage ( MSG _ KEY , " unannotatedPackage " ) , <nl> + " 49 : 22 : " + getCheckMessage ( MSG _ KEY , " unannotatedProtected " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " AnnotatedVisibility . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIgnoreAnnotationSameName ( ) throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 10 : 28 : " + getCheckMessage ( MSG _ KEY , " publicJUnitRule " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " AnnotatedVisibilitySameTypeName . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / AnnotatedVisibility . java b / src / test / resources / com / puppycrawl / tools / checkstyle / AnnotatedVisibility . java <nl> new file mode 100644 <nl> index 0000000 . . 4064dd6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / AnnotatedVisibility . java <nl> @ @ - 0 , 0 + 1 , 56 @ @ <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> + <nl> + import org . junit . Rule ; <nl> + import org . junit . rules . TemporaryFolder ; <nl> + <nl> + import java . lang . annotation . ElementType ; <nl> + import java . lang . annotation . Retention ; <nl> + import java . lang . annotation . RetentionPolicy ; <nl> + import java . lang . annotation . Target ; <nl> + <nl> + public class AnnotatedVisibility { <nl> + @ Rule <nl> + public TemporaryFolder publicJUnitRule = new TemporaryFolder ( ) ; <nl> + <nl> + @ org . junit . Rule <nl> + public TemporaryFolder fqPublicJUnitRule = new TemporaryFolder ( ) ; <nl> + <nl> + @ VisibleForTesting <nl> + public String googleCommonsAnnotatedPublic ; <nl> + <nl> + @ VisibleForTesting <nl> + String googleCommonsAnnotatedPackage ; <nl> + <nl> + @ VisibleForTesting <nl> + protected String googleCommonsAnnotatedProtected ; <nl> + <nl> + @ com . google . common . annotations . VisibleForTesting <nl> + public String fqGoogleCommonsAnnotatedPublic ; <nl> + <nl> + @ com . google . common . annotations . VisibleForTesting <nl> + String fqGoogleCommonsAnnotatedPackage ; <nl> + <nl> + @ com . google . common . annotations . VisibleForTesting <nl> + protected String fqGoogleCommonsAnnotatedProtected ; <nl> + <nl> + @ CustomAnnotation <nl> + public String customAnnotatedPublic ; <nl> + <nl> + @ CustomAnnotation <nl> + String customAnnotatedPackage ; <nl> + <nl> + @ CustomAnnotation <nl> + protected String customAnnotatedProtected ; <nl> + <nl> + public String unannotatedPublic ; <nl> + String unannotatedPackage ; <nl> + protected String unannotatedProtected ; <nl> + private String unannotatedPrivate ; <nl> + <nl> + @ Retention ( value = RetentionPolicy . RUNTIME ) <nl> + @ Target ( value = { ElementType . FIELD } ) <nl> + public @ interface CustomAnnotation { <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / AnnotatedVisibilitySameTypeName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / AnnotatedVisibilitySameTypeName . java <nl> new file mode 100644 <nl> index 0000000 . . 9007318 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / AnnotatedVisibilitySameTypeName . java <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import org . junit . rules . TemporaryFolder ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . LocalAnnotations . Rule ; <nl> + <nl> + public class AnnotatedVisibilitySameTypeName <nl> + { <nl> + @ Rule <nl> + public TemporaryFolder publicJUnitRule = new TemporaryFolder ( ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / LocalAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / LocalAnnotations . java <nl> new file mode 100644 <nl> index 0000000 . . 8ec6853 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / LocalAnnotations . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + public class LocalAnnotations <nl> + { <nl> + public @ interface Rule { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml <nl> index 88559cd . . 3891919 100644 <nl> - - - a / src / xdocs / config _ design . xml <nl> + + + b / src / xdocs / config _ design . xml <nl> @ @ - 13 , 9 + 13 , 9 @ @ <nl> < section name = " VisibilityModifier " > <nl> < subsection name = " Description " > <nl> < p > <nl> - Checks visibility of class members . Only static final or immutable members <nl> - may be public ; other class members must be private unless the <nl> - property < code > protectedAllowed < / code > or < code > packageAllowed < / code > is set . <nl> + Checks visibility of class members . Only static final , immutable or annotated <nl> + by specified annotation members may be public ; other class members must be private <nl> + unless the property < code > protectedAllowed < / code > or < code > packageAllowed < / code > is set . <nl> < / p > <nl> <nl> < p > <nl> @ @ - 33 , 7 + 33 , 12 @ @ <nl> Rationale : Enforce encapsulation . <nl> < / p > <nl> < p > <nl> - Check also has an option making it less strict : <nl> + Check also has options making it less strict : <nl> + < / p > <nl> + < p > <nl> + < b > ignoreAnnotationCanonicalNames < / b > - the list of annotations which ignore variables <nl> + in consideration . If user will provide short annotation name that type will match to any <nl> + named the same type without consideration of package <nl> < / p > <nl> < p > <nl> < b > allowPublicImmutableFields < / b > - which allows immutable fields be declared as <nl> @ @ - 108 , 6 + 113 , 12 @ @ <nl> java . util . Locale , java . util . UUID , java . net . URL , java . net . URI , <nl> java . net . Inet4Address , java . net . Inet6Address , java . net . InetSocketAddress , < / td > <nl> < / tr > <nl> + < tr > <nl> + < td > ignoreAnnotationCanonicalNames < / td > <nl> + < td > ignore annotations canonical names < / td > <nl> + < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > <nl> + < td > org . junit . Rule , com . google . common . annotations . VisibleForTesting < / td > <nl> + < / tr > <nl> < / table > <nl> < / subsection > <nl> <nl> @ @ - 196 , 6 + 207 , 73 @ @ public class ImmutableClass <nl> } <nl> } <nl> < / source > <nl> + <nl> + < p > <nl> + To configure the Check passing fields annotated with @ com . annotation . CustomAnnotation : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; <nl> + & lt ; property name = & quot ; ignoreAnnotationCanonicalNames & quot ; value = <nl> + & quot ; com . annotation . CustomAnnotation & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < p > <nl> + Example of allowed field : <nl> + < / p > <nl> + < source > <nl> + class SomeClass <nl> + { <nl> + @ com . annotation . CustomAnnotation <nl> + String annotatedString ; / / no warning <nl> + @ CustomAnnotation <nl> + String shortCustomAnnotated ; / / no warning <nl> + } <nl> + < / source > <nl> + <nl> + < p > <nl> + To configure the Check passing fields annotated with @ org . junit . Rule and <nl> + @ com . google . common . annotations . VisibleForTesting annotations : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; VisibilityModifier & quot ; / & gt ; <nl> + < / source > <nl> + < p > <nl> + Example of allowed fields : <nl> + < / p > <nl> + < source > <nl> + class SomeClass <nl> + { <nl> + @ org . junit . Rule <nl> + public TemporaryFolder publicJUnitRule = new TemporaryFolder ( ) ; / / no warning <nl> + @ com . google . common . annotations . VisibleForTesting <nl> + public String testString = " " ; / / no warning <nl> + } <nl> + < / source > <nl> + <nl> + < p > <nl> + To configure the Check passing fields annotated with short annotation name : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; <nl> + & lt ; property name = & quot ; ignoreAnnotationCanonicalNames & quot ; <nl> + value = & quot ; CustomAnnotation & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < p > <nl> + Example of allowed fields : <nl> + < / p > <nl> + < source > <nl> + class SomeClass <nl> + { <nl> + @ CustomAnnotation <nl> + String customAnnotated ; / / no warning <nl> + @ com . annotation . CustomAnnotation <nl> + String customAnnotated1 ; / / no warning <nl> + @ mypackage . annotation . CustomAnnotation <nl> + String customAnnotatedAnotherPackage ; / / another package but short name matches <nl> + / / so no violation <nl> + } <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Package " >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index c9d4dcb . . f121e5f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 440 , 8 + 440 , 7 @ @ public class ImportOrderCheck 
 final int groupIdx = getGroupNumber ( name ) ; 
 final int line = ident . getLineNo ( ) ; 
 
 - if ( groupIdx = = lastGroup 
 - | | ! beforeFirstImport & & isAlphabeticallySortableStaticImport ( isStatic ) ) { 
 + if ( isInSameGroup ( groupIdx , isStatic ) ) { 
 doVisitTokenInSameGroup ( isStatic , previous , name , line ) ; 
 } 
 else if ( groupIdx > lastGroup ) { 
 @ @ - 502 , 18 + 501 , 6 @ @ public class ImportOrderCheck 
 } 
 
 / * * 
 - * Checks whether static imports grouped by < b > top < / b > or < b > bottom < / b > option 
 - * are sorted alphabetically or not . 
 - * @ param isStatic if current import is static . 
 - * @ return true if static imports should be sorted alphabetically . 
 - * / 
 - private boolean isAlphabeticallySortableStaticImport ( boolean isStatic ) { 
 - return isStatic & & sortStaticImportsAlphabetically 
 - & & ( option = = ImportOrderOption . TOP 
 - | | option = = ImportOrderOption . BOTTOM ) ; 
 - } 
 - 
 - / * * 
 * Shares processing . . . 
 * 
 * @ param isStatic whether the token is static or not . 
 @ @ - 557 , 12 + 544 , 22 @ @ public class ImportOrderCheck 
 * / 
 private boolean isWrongOrder ( String name , boolean isStatic ) { 
 final boolean result ; 
 - if ( isStatic & & useContainerOrderingForStatic ) { 
 - result = compareContainerOrder ( lastImport , name , caseSensitive ) > 0 ; 
 + if ( isStatic ) { 
 + if ( useContainerOrderingForStatic ) { 
 + result = compareContainerOrder ( lastImport , name , caseSensitive ) > = 0 ; 
 + } 
 + else if ( option = = ImportOrderOption . TOP 
 + | | option = = ImportOrderOption . BOTTOM ) { 
 + result = sortStaticImportsAlphabetically 
 + & & compare ( lastImport , name , caseSensitive ) > = 0 ; 
 + } 
 + else { 
 + result = compare ( lastImport , name , caseSensitive ) > = 0 ; 
 + } 
 } 
 else { 
 / / out of lexicographic order 
 - result = compare ( lastImport , name , caseSensitive ) > 0 ; 
 + result = compare ( lastImport , name , caseSensitive ) > = 0 ; 
 } 
 return result ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 index e40368a . . 249f237 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 @ @ - 137 , 6 + 137 , 51 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testNoGapBetweenStaticImports ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " groups " , " java , javax , org " ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " ordered " , " true " ) ; 
 + checkConfig . addAttribute ( " option " , " bottom " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , getPath ( " InputImportOrderNoGapBetweenStaticImports . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testSortStaticImportsAlphabeticallyFalse ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " groups " , " java , javax , org " ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " ordered " , " true " ) ; 
 + checkConfig . addAttribute ( " option " , " top " ) ; 
 + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " false " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , getPath ( " InputImportOrderSortStaticImportsAlphabetically . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testSortStaticImportsAlphabeticallyTrue ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " groups " , " java , javax , org " ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " ordered " , " true " ) ; 
 + checkConfig . addAttribute ( " option " , " top " ) ; 
 + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; 
 + final String [ ] expected = { 
 + " 4 : " + getCheckMessage ( MSG _ ORDERING , 
 + " javax . xml . transform . TransformerFactory . newInstance " ) , 
 + " 5 : " + getCheckMessage ( MSG _ ORDERING , " java . lang . Math . cos " ) , 
 + " 6 : " + getCheckMessage ( MSG _ ORDERING , " java . lang . Math . abs " ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " InputImportOrderSortStaticImportsAlphabetically . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 public void testCaseInsensitive ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 checkConfig . addAttribute ( " caseSensitive " , " false " ) ; 
 @ @ - 173 , 7 + 218 , 6 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 createModuleConfig ( ImportOrderCheck . class ) ; 
 checkConfig . addAttribute ( " option " , " top " ) ; 
 final String [ ] expected = { 
 - " 4 : " + getCheckMessage ( MSG _ ORDERING , " java . awt . Button . ABORT " ) , 
 " 7 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . awt . Button " ) , 
 " 12 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . io . IOException " ) , 
 " 15 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " javax . swing . JComponent " ) , 
 @ @ - 247 , 7 + 291 , 6 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 " 14 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . io . File . * " ) , 
 " 15 : " + getCheckMessage ( MSG _ ORDERING , " java . io . File " ) , 
 " 17 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . io . File . createTempFile " ) , 
 - " 18 : " + getCheckMessage ( MSG _ ORDERING , " java . awt . Button . ABORT " ) , 
 " 21 : " + getCheckMessage ( MSG _ ORDERING , " java . io . Reader " ) , 
 " 21 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . io . Reader " ) , 
 } ; 
 @ @ - 322 , 7 + 365 , 6 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 checkConfig . addAttribute ( " option " , " top " ) ; 
 checkConfig . addAttribute ( " groups " , " org , java " ) ; 
 final String [ ] expected = { 
 - " 4 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . Recognizer . EOF " ) , 
 " 6 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " org . * " ) , 
 " 8 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . util . Set " ) , 
 } ; 
 @ @ - 352 , 12 + 394 , 51 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 final String [ ] expected = { 
 " 5 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . util . Set " ) , 
 " 7 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . lang . Math . PI " ) , 
 - " 8 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . Recognizer . EOF " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputImportOrderStaticGroupOrderBottom . java " ) , expected ) ; 
 } 
 
 @ Test 
 + public void testImportReception ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " groups " , " java , javax " ) ; 
 + final String [ ] expected = { 
 + " 6 : " + getCheckMessage ( MSG _ ORDERING , " java . awt . event . ActionEvent " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputImportOrderRepetiton . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testStaticImportReceptionTop ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " option " , " top " ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " groups " , " java , org " ) ; 
 + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; 
 + final String [ ] expected = { 
 + " 5 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . CommonToken . * " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputImportOrderStaticRepetition . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testStaticImportReception ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " groups " , " java , org " ) ; 
 + final String [ ] expected = { 
 + " 4 : " + getCheckMessage ( MSG _ SEPARATION , " org . antlr . v4 . runtime . CommonToken . * " ) , 
 + " 5 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . CommonToken . * " ) , 
 + " 7 : " + getCheckMessage ( MSG _ ORDERING , " java . util . Set " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputImportOrderStaticRepetition . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testStaticGroupsOrderAbove ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createModuleConfig ( ImportOrderCheck . class ) ; 
 @ @ - 380 , 7 + 461 , 6 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 checkConfig . addAttribute ( " option " , " top " ) ; 
 checkConfig . addAttribute ( " groups " , " org , java " ) ; 
 final String [ ] expected = { 
 - " 4 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . CommonToken . * " ) , 
 " 6 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " org . * " ) , 
 " 8 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . util . Set " ) , 
 " 9 : " + getCheckMessage ( MSG _ ORDERING , " org . junit . Test " ) , 
 @ @ - 412 , 7 + 492 , 6 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 final String [ ] expected = { 
 " 5 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . util . Set " ) , 
 " 7 : " + getCheckMessage ( MSG _ SEPARATED _ IN _ GROUP , " java . lang . Math . * " ) , 
 - " 8 : " + getCheckMessage ( MSG _ ORDERING , " org . antlr . v4 . runtime . CommonToken . * " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputImportOrderStaticOnDemandGroupOrderBottom . java " ) , 
 expected ) ; 
 @ @ - 550 , 6 + 629 , 23 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testStaticImportEclipseRepetition ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " option " , " top " ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " groups " , " java , org " ) ; 
 + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; 
 + checkConfig . addAttribute ( " useContainerOrderingForStatic " , " true " ) ; 
 + final String [ ] expected = { 
 + " 4 : " + getCheckMessage ( MSG _ ORDERING , 
 + " io . netty . handler . codec . http . HttpHeaders . Names . DATE " ) , 
 + } ; 
 + verify ( checkConfig , 
 + getNonCompilablePath ( " InputImportOrderEclipseStaticRepetition . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testEclipseDefaultNegative ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 checkConfig . addAttribute ( " groups " , " java , javax , org , com " ) ; 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderEclipseStaticRepetition . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderEclipseStaticRepetition . java 
 new file mode 100644 
 index 0000000 . . 6228ffb 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderEclipseStaticRepetition . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports ; 
 + 
 + import static io . netty . handler . codec . http . HttpHeaders . Names . DATE ; 
 + import static io . netty . handler . codec . http . HttpHeaders . Names . DATE ; 
 + import static io . netty . handler . codec . http . HttpHeaders . Names . addDate ; 
 + 
 + public class InputImportOrderEclipseStaticRepetition { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderNoGapBetweenStaticImports . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderNoGapBetweenStaticImports . java 
 new file mode 100644 
 index 0000000 . . 2bfdc4f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderNoGapBetweenStaticImports . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; 
 + 
 + import static java . lang . Math . abs ; 
 + import static java . lang . Math . cos ; / / no gap below 
 + import static javax . xml . transform . TransformerFactory . newInstance ; / / no gap below 
 + import static org . junit . Assert . fail ; 
 + 
 + public class InputImportOrderNoGapBetweenStaticImports { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderRepetiton . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderRepetiton . java 
 new file mode 100644 
 index 0000000 . . 7845692 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderRepetiton . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports ; 
 + 
 + import java . awt . Button ; 
 + import java . awt . Dialog ; 
 + import java . awt . event . ActionEvent ; 
 + import java . awt . event . ActionEvent ; / / Repetitive import 
 + 
 + import javax . swing . JComponent ; 
 + import javax . swing . JTable ; 
 + 
 + public class InputImportOrderRepetiton { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderSortStaticImportsAlphabetically . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderSortStaticImportsAlphabetically . java 
 new file mode 100644 
 index 0000000 . . 080bc16 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderSortStaticImportsAlphabetically . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; 
 + 
 + import static org . junit . Assert . fail ; 
 + import static javax . xml . transform . TransformerFactory . newInstance ; 
 + import static java . lang . Math . cos ; 
 + import static java . lang . Math . abs ; 
 + 
 + public class InputImportOrderSortStaticImportsAlphabetically { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticRepetition . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticRepetition . java 
 new file mode 100644 
 index 0000000 . . d848748 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticRepetition . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports ; 
 + 
 + import static java . lang . Math . * ; 
 + import static org . antlr . v4 . runtime . CommonToken . * ; 
 + import static org . antlr . v4 . runtime . CommonToken . * ; / / Repetitive static import 
 + 
 + import java . util . Set ; 
 + 
 + import org . junit . Test ; 
 + 
 + public class InputImportOrderStaticRepetition { 
 + } 
 diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml 
 index 88523da . . d1f43b4 100644 
 - - - a / src / xdocs / config _ imports . xml 
 + + + b / src / xdocs / config _ imports . xml 
 @ @ - 1291 , 7 + 1291 , 8 @ @ import java . util . stream . IntStream ; 
 < / tr > 
 < tr > 
 < td > ordered < / td > 
 - < td > whether imports within group should be sorted < / td > 
 + < td > whether imports within group should be sorted 
 + ( It don ' t affect soring for static imports . ) < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > true < / td > 
 < td > 3 . 2 < / td > 
 @ @ - 1318 , 8 + 1319 , 9 @ @ import java . util . stream . IntStream ; 
 < / tr > 
 < tr > 
 < td > sortStaticImportsAlphabetically < / td > 
 - < td > whether static imports grouped by < b > top < / b > or < b > bottom < / b > option 
 - are sorted alphabetically or not < / td > 
 + < td > whether < b > static imports < / b > grouped by < b > top < / b > or < b > bottom < / b > option 
 + are sorted alphabetically or not . 
 + Attention : it is applied for all static imports as one group . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > false < / td > 
 < td > 6 . 5 < / td >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 index 8553736 . . 948b35c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 @ @ - 31 , 14 + 31 , 17 @ @ import org . apache . commons . beanutils . ConversionException ; 
 import antlr . collections . AST ; 
 
 import com . google . common . collect . ImmutableList ; 
 + import com . puppycrawl . tools . checkstyle . api . AnnotationUtility ; 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . api . Utils ; 
 
 / * * 
 - * Checks visibility of class members . Only static final or immutable members may be public , 
 + * Checks visibility of class members . Only static final , immutable or annotated 
 + * by specified annotation members may be public , 
 * other class members must be private unless allowProtected / Package is set . 
 * < p > 
 * Public members are not flagged if the name matches the public 
 @ @ - 47 , 7 + 50 , 27 @ @ import com . puppycrawl . tools . checkstyle . api . Utils ; 
 * < / p > 
 * Rationale : Enforce encapsulation . 
 * < p > 
 - * Check also has an option making it less strict : 
 + * Check also has options making it less strict : 
 + * < / p > 
 + * < p > 
 + * < b > ignoreAnnotationCanonicalNames < / b > - the list of annotations canonical names 
 + * which ignore variables in consideration , if user will provide short annotation name 
 + * that type will match to any named the same type without consideration of package , 
 + * list by default : 
 + * < ul > 
 + * < li > org . junit . Rule < / li > 
 + * < li > com . google . common . annotations . VisibleForTesting < / li > 
 + * < / ul > 
 + * < / p > 
 + * < p > 
 + * For example such public field will be skipped by default value of list above : 
 + * < / p > 
 + * < p > 
 + * < code > 
 + * < pre > @ org . junit . Rule 
 + * public TemporaryFolder publicJUnitRule = new TemporaryFolder ( ) ; 
 + * < / pre > 
 + * < / code > 
 * < / p > 
 * < p > 
 * < b > allowPublicImmutableFields < / b > - which allows immutable fields be 
 @ @ - 159 , 6 + 182 , 50 @ @ import com . puppycrawl . tools . checkstyle . api . Utils ; 
 * < / code > 
 * < / pre > 
 * < / p > 
 + * < p > 
 + * To configure the Check passing fields annotated with 
 + * < pre > @ com . annotation . CustomAnnotation < / pre > : 
 + * < / p > 
 + * < p > 
 + * & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; 
 + * & lt ; property name = & quot ; ignoreAnnotationCanonicalNames & quot ; value = & quot ; 
 + * com . annotation . CustomAnnotation & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / p > 
 + * < p > 
 + * < code > 
 + * < pre > @ com . annotation . CustomAnnotation 
 + * String customAnnotated ; / / No warning 
 + * < / pre > 
 + * < pre > @ CustomAnnotation 
 + * String shortCustomAnnotated ; / / No warning 
 + * < / pre > 
 + * < / code > 
 + * < / p > 
 + * < p > 
 + * To configure the Check passing fields annotated with short annotation name 
 + * < pre > @ CustomAnnotation < / pre > : 
 + * < / p > 
 + * < p > 
 + * & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; 
 + * & lt ; property name = & quot ; ignoreAnnotationCanonicalNames & quot ; 
 + * value = & quot ; CustomAnnotation & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / p > 
 + * < p > 
 + * < code > 
 + * < pre > @ CustomAnnotation 
 + * String customAnnotated ; / / No warning 
 + * < / pre > 
 + * < pre > @ com . annotation . CustomAnnotation 
 + * String customAnnotated1 ; / / No warning 
 + * < / pre > 
 + * < pre > @ mypackage . annotation . CustomAnnotation 
 + * String customAnnotatedAnotherPackage ; / / another package but short name matches 
 + * / / so no violation 
 + * < / pre > 
 + * < / code > 
 + * < / p > 
 * 
 * @ author < a href = " mailto : nesterenko - aleksey @ list . ru " > Aleksey Nesterenko < / a > 
 * / 
 @ @ - 190 , 6 + 257 , 14 @ @ public class VisibilityModifierCheck 
 / * * regexp for public members that should be ignored * / 
 private Pattern publicMemberPattern = Pattern . compile ( publicMemberFormat ) ; 
 
 + / * * List of ignore annotations canonical names . * / 
 + private List < String > ignoreAnnotationCanonicalNames = 
 + new ArrayList < > ( DEFAULT _ IGNORE _ ANNOTATIONS ) ; 
 + 
 + / * * List of ignore annotations short names . * / 
 + private List < String > ignoreAnnotationShortNames = 
 + getClassShortNames ( DEFAULT _ IGNORE _ ANNOTATIONS ) ; 
 + 
 / * * Allows immutable fields to be declared as public . * / 
 private boolean allowPublicImmutableFields = true ; 
 
 @ @ - 224 , 6 + 299 , 12 @ @ public class VisibilityModifierCheck 
 " java . net . InetSocketAddress " 
 ) ; 
 
 + / * * Default ignore annotations canonical names . * / 
 + private static final List < String > DEFAULT _ IGNORE _ ANNOTATIONS = ImmutableList . of ( 
 + " org . junit . Rule " , 
 + " com . google . common . annotations . VisibleForTesting " 
 + ) ; 
 + 
 / * * contains explicit access modifiers . * / 
 private static final String [ ] EXPLICIT _ MODS = { " public " , " private " , " protected " } ; 
 
 @ @ - 234 , 6 + 315 , 15 @ @ public class VisibilityModifierCheck 
 } 
 
 / * * 
 + * Set the list of ignore annotations . 
 + * @ param annotationNames array of ignore annotations canonical names . 
 + * / 
 + public void setIgnoreAnnotationCanonicalNames ( String [ ] annotationNames ) 
 + { 
 + ignoreAnnotationCanonicalNames = Arrays . asList ( annotationNames ) ; 
 + } 
 + 
 + / * * 
 * Set whether protected members are allowed . 
 * @ param protectedAllowed whether protected members are allowed 
 * / 
 @ @ - 291 , 7 + 381 , 7 @ @ public class VisibilityModifierCheck 
 
 / * * 
 * Set the list of immutable classes types names . 
 - * @ param classNames array of immutable types short names . 
 + * @ param classNames array of immutable types canonical names . 
 * / 
 public void setImmutableClassCanonicalNames ( String [ ] classNames ) 
 { 
 @ @ - 321 , 8 + 411 , 14 @ @ public class VisibilityModifierCheck 
 public void beginTree ( DetailAST rootAst ) 
 { 
 immutableClassShortNames . clear ( ) ; 
 - final List < String > shortNames = getClassShortNames ( immutableClassCanonicalNames ) ; 
 - immutableClassShortNames . addAll ( shortNames ) ; 
 + final List < String > classShortNames = 
 + getClassShortNames ( immutableClassCanonicalNames ) ; 
 + immutableClassShortNames . addAll ( classShortNames ) ; 
 + 
 + ignoreAnnotationShortNames . clear ( ) ; 
 + final List < String > annotationShortNames = 
 + getClassShortNames ( ignoreAnnotationCanonicalNames ) ; 
 + ignoreAnnotationShortNames . addAll ( annotationShortNames ) ; 
 } 
 
 @ Override 
 @ @ - 363 , 7 + 459 , 7 @ @ public class VisibilityModifierCheck 
 final boolean inInterfaceOrAnnotationBlock = 
 ScopeUtils . inInterfaceOrAnnotationBlock ( variableDef ) ; 
 
 - if ( ! inInterfaceOrAnnotationBlock ) { 
 + if ( ! inInterfaceOrAnnotationBlock & & ! hasIgnoreAnnotation ( variableDef ) ) { 
 final DetailAST varNameAST = getVarNameAST ( variableDef ) ; 
 final String varName = varNameAST . getText ( ) ; 
 if ( ! hasProperAccessModifier ( variableDef , varName ) ) { 
 @ @ - 374 , 6 + 470 , 18 @ @ public class VisibilityModifierCheck 
 } 
 
 / * * 
 + * Checks if variable def has ignore annotation . 
 + * @ param variableDef { @ link TokenTypes # VARIABLE _ DEF VARIABLE _ DEF } 
 + * @ return true if variable def has ignore annotation . 
 + * / 
 + private boolean hasIgnoreAnnotation ( DetailAST variableDef ) 
 + { 
 + final DetailAST firstIgnoreAnnotation = 
 + containsMatchingAnnotation ( variableDef ) ; 
 + return firstIgnoreAnnotation ! = null ; 
 + } 
 + 
 + / * * 
 * Checks imported type . If type ' s canonical name was not specified in 
 * < b > immutableClassCanonicalNames < / b > , but it ' s short name collides with one from 
 * < b > immutableClassShortNames < / b > - removes it from the last one . 
 @ @ - 394 , 6 + 502 , 11 @ @ public class VisibilityModifierCheck 
 { 
 immutableClassShortNames . remove ( shortName ) ; 
 } 
 + if ( ! ignoreAnnotationCanonicalNames . contains ( canonicalName ) 
 + & & ignoreAnnotationShortNames . contains ( shortName ) ) 
 + { 
 + ignoreAnnotationShortNames . remove ( shortName ) ; 
 + } 
 } 
 } 
 
 @ @ - 651 , 4 + 764 , 51 @ @ public class VisibilityModifierCheck 
 return shortClassName ; 
 } 
 
 + / * * 
 + * Checks whether the AST is annotated with 
 + * an annotation containing the passed in regular 
 + * expression and return the AST representing that 
 + * annotation . 
 + * 
 + * < p > 
 + * This method will not look for imports or package 
 + * statements to detect the passed in annotation . 
 + * < / p > 
 + * 
 + * < p > 
 + * To check if an AST contains a passed in annotation 
 + * taking into account fully - qualified names 
 + * ( ex : java . lang . Override , Override ) 
 + * this method will need to be called twice . Once for each 
 + * name given . 
 + * < / p > 
 + * 
 + * @ param variableDef { @ link TokenTypes # VARIABLE _ DEF variable def node } . 
 + * @ return the AST representing the first such annotation or null if 
 + * no such annotation was found 
 + * / 
 + private DetailAST containsMatchingAnnotation ( DetailAST variableDef ) 
 + { 
 + DetailAST matchingAnnotation = null ; 
 + 
 + final DetailAST holder = AnnotationUtility . getAnnotationHolder ( variableDef ) ; 
 + 
 + for ( DetailAST child = holder . getFirstChild ( ) ; 
 + child ! = null ; child = child . getNextSibling ( ) ) 
 + { 
 + if ( child . getType ( ) = = TokenTypes . ANNOTATION ) { 
 + final DetailAST at = child . getFirstChild ( ) ; 
 + final String name = 
 + FullIdent . createFullIdent ( at . getNextSibling ( ) ) . getText ( ) ; 
 + if ( ignoreAnnotationCanonicalNames . contains ( name ) 
 + | | ignoreAnnotationShortNames . contains ( name ) ) 
 + { 
 + matchingAnnotation = child ; 
 + break ; 
 + } 
 + } 
 + } 
 + 
 + return matchingAnnotation ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 index 2d93042 . . f6446da 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 @ @ - 18 , 12 + 18 , 13 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks . design ; 
 
 + import static com . puppycrawl . tools . checkstyle . checks . design . VisibilityModifierCheck . MSG _ KEY ; 
 + 
 + import org . junit . Test ; 
 + 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 - import org . junit . Test ; 
 - 
 - import static com . puppycrawl . tools . checkstyle . checks . design . VisibilityModifierCheck . MSG _ KEY ; 
 
 public class VisibilityModifierCheckTest 
 extends BaseCheckTestSupport 
 @ @ - 180 , 4 + 181 , 78 @ @ public class VisibilityModifierCheckTest 
 verify ( checkConfig , getPath ( " InputImmutableStarImport2 . java " ) , expected ) ; 
 } 
 
 + @ Test 
 + public void testDefaultAnnotationPatterns ( ) throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + final String [ ] expected = { 
 + " 39 : 19 : " + getCheckMessage ( MSG _ KEY , " customAnnotatedPublic " ) , 
 + " 42 : 12 : " + getCheckMessage ( MSG _ KEY , " customAnnotatedPackage " ) , 
 + " 45 : 22 : " + getCheckMessage ( MSG _ KEY , " customAnnotatedProtected " ) , 
 + " 47 : 19 : " + getCheckMessage ( MSG _ KEY , " unannotatedPublic " ) , 
 + " 48 : 12 : " + getCheckMessage ( MSG _ KEY , " unannotatedPackage " ) , 
 + " 49 : 22 : " + getCheckMessage ( MSG _ KEY , " unannotatedProtected " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " AnnotatedVisibility . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testCustomAnnotationPatterns ( ) throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + checkConfig . addAttribute ( " ignoreAnnotationCanonicalNames " , 
 + " com . puppycrawl . tools . checkstyle . AnnotatedVisibility . CustomAnnotation " ) ; 
 + final String [ ] expected = { 
 + " 15 : 28 : " + getCheckMessage ( MSG _ KEY , " publicJUnitRule " ) , 
 + " 18 : 28 : " + getCheckMessage ( MSG _ KEY , " fqPublicJUnitRule " ) , 
 + " 21 : 19 : " + getCheckMessage ( MSG _ KEY , " googleCommonsAnnotatedPublic " ) , 
 + " 24 : 12 : " + getCheckMessage ( MSG _ KEY , " googleCommonsAnnotatedPackage " ) , 
 + " 27 : 22 : " + getCheckMessage ( MSG _ KEY , " googleCommonsAnnotatedProtected " ) , 
 + " 30 : 19 : " + getCheckMessage ( MSG _ KEY , " fqGoogleCommonsAnnotatedPublic " ) , 
 + " 33 : 12 : " + getCheckMessage ( MSG _ KEY , " fqGoogleCommonsAnnotatedPackage " ) , 
 + " 36 : 22 : " + getCheckMessage ( MSG _ KEY , " fqGoogleCommonsAnnotatedProtected " ) , 
 + " 47 : 19 : " + getCheckMessage ( MSG _ KEY , " unannotatedPublic " ) , 
 + " 48 : 12 : " + getCheckMessage ( MSG _ KEY , " unannotatedPackage " ) , 
 + " 49 : 22 : " + getCheckMessage ( MSG _ KEY , " unannotatedProtected " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " AnnotatedVisibility . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testIgnoreAnnotationNoPattern ( ) throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + checkConfig . addAttribute ( " ignoreAnnotationCanonicalNames " , " " ) ; 
 + final String [ ] expected = { 
 + " 15 : 28 : " + getCheckMessage ( MSG _ KEY , " publicJUnitRule " ) , 
 + " 18 : 28 : " + getCheckMessage ( MSG _ KEY , " fqPublicJUnitRule " ) , 
 + " 21 : 19 : " + getCheckMessage ( MSG _ KEY , " googleCommonsAnnotatedPublic " ) , 
 + " 24 : 12 : " + getCheckMessage ( MSG _ KEY , " googleCommonsAnnotatedPackage " ) , 
 + " 27 : 22 : " + getCheckMessage ( MSG _ KEY , " googleCommonsAnnotatedProtected " ) , 
 + " 30 : 19 : " + getCheckMessage ( MSG _ KEY , " fqGoogleCommonsAnnotatedPublic " ) , 
 + " 33 : 12 : " + getCheckMessage ( MSG _ KEY , " fqGoogleCommonsAnnotatedPackage " ) , 
 + " 36 : 22 : " + getCheckMessage ( MSG _ KEY , " fqGoogleCommonsAnnotatedProtected " ) , 
 + " 39 : 19 : " + getCheckMessage ( MSG _ KEY , " customAnnotatedPublic " ) , 
 + " 42 : 12 : " + getCheckMessage ( MSG _ KEY , " customAnnotatedPackage " ) , 
 + " 45 : 22 : " + getCheckMessage ( MSG _ KEY , " customAnnotatedProtected " ) , 
 + " 47 : 19 : " + getCheckMessage ( MSG _ KEY , " unannotatedPublic " ) , 
 + " 48 : 12 : " + getCheckMessage ( MSG _ KEY , " unannotatedPackage " ) , 
 + " 49 : 22 : " + getCheckMessage ( MSG _ KEY , " unannotatedProtected " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " AnnotatedVisibility . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testIgnoreAnnotationSameName ( ) throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + final String [ ] expected = { 
 + " 10 : 28 : " + getCheckMessage ( MSG _ KEY , " publicJUnitRule " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " AnnotatedVisibilitySameTypeName . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / AnnotatedVisibility . java b / src / test / resources / com / puppycrawl / tools / checkstyle / AnnotatedVisibility . java 
 new file mode 100644 
 index 0000000 . . 4064dd6 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / AnnotatedVisibility . java 
 @ @ - 0 , 0 + 1 , 56 @ @ 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import com . google . common . annotations . VisibleForTesting ; 
 + 
 + import org . junit . Rule ; 
 + import org . junit . rules . TemporaryFolder ; 
 + 
 + import java . lang . annotation . ElementType ; 
 + import java . lang . annotation . Retention ; 
 + import java . lang . annotation . RetentionPolicy ; 
 + import java . lang . annotation . Target ; 
 + 
 + public class AnnotatedVisibility { 
 + @ Rule 
 + public TemporaryFolder publicJUnitRule = new TemporaryFolder ( ) ; 
 + 
 + @ org . junit . Rule 
 + public TemporaryFolder fqPublicJUnitRule = new TemporaryFolder ( ) ; 
 + 
 + @ VisibleForTesting 
 + public String googleCommonsAnnotatedPublic ; 
 + 
 + @ VisibleForTesting 
 + String googleCommonsAnnotatedPackage ; 
 + 
 + @ VisibleForTesting 
 + protected String googleCommonsAnnotatedProtected ; 
 + 
 + @ com . google . common . annotations . VisibleForTesting 
 + public String fqGoogleCommonsAnnotatedPublic ; 
 + 
 + @ com . google . common . annotations . VisibleForTesting 
 + String fqGoogleCommonsAnnotatedPackage ; 
 + 
 + @ com . google . common . annotations . VisibleForTesting 
 + protected String fqGoogleCommonsAnnotatedProtected ; 
 + 
 + @ CustomAnnotation 
 + public String customAnnotatedPublic ; 
 + 
 + @ CustomAnnotation 
 + String customAnnotatedPackage ; 
 + 
 + @ CustomAnnotation 
 + protected String customAnnotatedProtected ; 
 + 
 + public String unannotatedPublic ; 
 + String unannotatedPackage ; 
 + protected String unannotatedProtected ; 
 + private String unannotatedPrivate ; 
 + 
 + @ Retention ( value = RetentionPolicy . RUNTIME ) 
 + @ Target ( value = { ElementType . FIELD } ) 
 + public @ interface CustomAnnotation { 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / AnnotatedVisibilitySameTypeName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / AnnotatedVisibilitySameTypeName . java 
 new file mode 100644 
 index 0000000 . . 9007318 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / AnnotatedVisibilitySameTypeName . java 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import org . junit . rules . TemporaryFolder ; 
 + 
 + import com . puppycrawl . tools . checkstyle . LocalAnnotations . Rule ; 
 + 
 + public class AnnotatedVisibilitySameTypeName 
 + { 
 + @ Rule 
 + public TemporaryFolder publicJUnitRule = new TemporaryFolder ( ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / LocalAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / LocalAnnotations . java 
 new file mode 100644 
 index 0000000 . . 8ec6853 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / LocalAnnotations . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + public class LocalAnnotations 
 + { 
 + public @ interface Rule { 
 + 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml 
 index 88559cd . . 3891919 100644 
 - - - a / src / xdocs / config _ design . xml 
 + + + b / src / xdocs / config _ design . xml 
 @ @ - 13 , 9 + 13 , 9 @ @ 
 < section name = " VisibilityModifier " > 
 < subsection name = " Description " > 
 < p > 
 - Checks visibility of class members . Only static final or immutable members 
 - may be public ; other class members must be private unless the 
 - property < code > protectedAllowed < / code > or < code > packageAllowed < / code > is set . 
 + Checks visibility of class members . Only static final , immutable or annotated 
 + by specified annotation members may be public ; other class members must be private 
 + unless the property < code > protectedAllowed < / code > or < code > packageAllowed < / code > is set . 
 < / p > 
 
 < p > 
 @ @ - 33 , 7 + 33 , 12 @ @ 
 Rationale : Enforce encapsulation . 
 < / p > 
 < p > 
 - Check also has an option making it less strict : 
 + Check also has options making it less strict : 
 + < / p > 
 + < p > 
 + < b > ignoreAnnotationCanonicalNames < / b > - the list of annotations which ignore variables 
 + in consideration . If user will provide short annotation name that type will match to any 
 + named the same type without consideration of package 
 < / p > 
 < p > 
 < b > allowPublicImmutableFields < / b > - which allows immutable fields be declared as 
 @ @ - 108 , 6 + 113 , 12 @ @ 
 java . util . Locale , java . util . UUID , java . net . URL , java . net . URI , 
 java . net . Inet4Address , java . net . Inet6Address , java . net . InetSocketAddress , < / td > 
 < / tr > 
 + < tr > 
 + < td > ignoreAnnotationCanonicalNames < / td > 
 + < td > ignore annotations canonical names < / td > 
 + < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > 
 + < td > org . junit . Rule , com . google . common . annotations . VisibleForTesting < / td > 
 + < / tr > 
 < / table > 
 < / subsection > 
 
 @ @ - 196 , 6 + 207 , 73 @ @ public class ImmutableClass 
 } 
 } 
 < / source > 
 + 
 + < p > 
 + To configure the Check passing fields annotated with @ com . annotation . CustomAnnotation : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; 
 + & lt ; property name = & quot ; ignoreAnnotationCanonicalNames & quot ; value = 
 + & quot ; com . annotation . CustomAnnotation & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < p > 
 + Example of allowed field : 
 + < / p > 
 + < source > 
 + class SomeClass 
 + { 
 + @ com . annotation . CustomAnnotation 
 + String annotatedString ; / / no warning 
 + @ CustomAnnotation 
 + String shortCustomAnnotated ; / / no warning 
 + } 
 + < / source > 
 + 
 + < p > 
 + To configure the Check passing fields annotated with @ org . junit . Rule and 
 + @ com . google . common . annotations . VisibleForTesting annotations : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; VisibilityModifier & quot ; / & gt ; 
 + < / source > 
 + < p > 
 + Example of allowed fields : 
 + < / p > 
 + < source > 
 + class SomeClass 
 + { 
 + @ org . junit . Rule 
 + public TemporaryFolder publicJUnitRule = new TemporaryFolder ( ) ; / / no warning 
 + @ com . google . common . annotations . VisibleForTesting 
 + public String testString = " " ; / / no warning 
 + } 
 + < / source > 
 + 
 + < p > 
 + To configure the Check passing fields annotated with short annotation name : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; 
 + & lt ; property name = & quot ; ignoreAnnotationCanonicalNames & quot ; 
 + value = & quot ; CustomAnnotation & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < p > 
 + Example of allowed fields : 
 + < / p > 
 + < source > 
 + class SomeClass 
 + { 
 + @ CustomAnnotation 
 + String customAnnotated ; / / no warning 
 + @ com . annotation . CustomAnnotation 
 + String customAnnotated1 ; / / no warning 
 + @ mypackage . annotation . CustomAnnotation 
 + String customAnnotatedAnotherPackage ; / / another package but short name matches 
 + / / so no violation 
 + } 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Package " >
