BLEU SCORE: 0.020980574531482755

TEST MSG: Issue # 2729 : types changed according to java spec
GENERATED MSG: Issue10 . Annotations finished

TEST DIFF (one line): diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> index cfcaa16 . . acc6d5f 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> @ @ - 260 , 7 + 260 , 10 @ @ typeSpec [ boolean addImagNode ] <nl> / / - generic type arguments after <nl> classTypeSpec [ boolean addImagNode ] <nl> : classOrInterfaceType [ addImagNode ] <nl> - ( options { greedy = true ; } : lb : LBRACK ^ { # lb . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * <nl> + ( options { greedy = true ; } : <nl> + ( { LA ( 1 ) = = AT } ? annotations <nl> + | ) <nl> + lb : LBRACK ^ { # lb . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * <nl> { <nl> if ( addImagNode ) { <nl> # classTypeSpec = # ( # [ TYPE , " TYPE " ] , # classTypeSpec ) ; <nl> @ @ - 269 , 21 + 272 , 26 @ @ classTypeSpec [ boolean addImagNode ] <nl> ; <nl> <nl> classOrInterfaceType [ boolean addImagNode ] <nl> - : ( { LA ( 1 ) = = AT } ? annotations <nl> - | ) <nl> - IDENT ( options { warnWhenFollowAmbig = false ; } : typeArguments [ addImagNode ] ) ? <nl> - ( options { greedy = true ; } : / / match as many as possible <nl> - DOT ^ <nl> - IDENT ( options { warnWhenFollowAmbig = false ; } : typeArguments [ addImagNode ] ) ? <nl> - ) * <nl> - ; <nl> + : ( { LA ( 1 ) = = AT } ? annotations <nl> + | ) <nl> + IDENT <nl> + ( options { warnWhenFollowAmbig = false ; } : typeArguments [ addImagNode ] ) ? <nl> + <nl> + ( options { greedy = true ; } : / / match as many as possible <nl> + DOT ^ <nl> + ( { LA ( 1 ) = = AT } ? annotations <nl> + | ) <nl> + IDENT <nl> + ( options { warnWhenFollowAmbig = false ; } : typeArguments [ addImagNode ] ) ? <nl> + ) * <nl> + ; <nl> <nl> / / A generic type argument is a class type , a possibly bounded wildcard type or a built - in type array <nl> typeArgument [ boolean addImagNode ] <nl> : ( ( { LA ( 1 ) = = AT } ? annotations <nl> | ) ( <nl> classTypeSpec [ addImagNode ] <nl> - | builtInTypeArraySpec [ addImagNode ] <nl> + | builtInTypeSpec [ addImagNode ] <nl> | wildcardType [ addImagNode ] ) <nl> ) <nl> { # typeArgument = # ( # [ TYPE _ ARGUMENT , " TYPE _ ARGUMENT " ] , # typeArgument ) ; } <nl> @ @ - 356 , 21 + 364 , 15 @ @ typeArgumentBounds [ boolean addImagNode ] <nl> ( options { greedy = true ; } : lb : LBRACK ^ { # lb . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * <nl> ; <nl> <nl> - / / A builtin type array specification is a builtin type with brackets afterwards <nl> - builtInTypeArraySpec [ boolean addImagNode ] <nl> - : builtInType <nl> - ( options { greedy = true ; } : lb : LBRACK ^ { # lb . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) + <nl> - { <nl> - if ( addImagNode ) { <nl> - # builtInTypeArraySpec = # ( # [ TYPE , " TYPE " ] , # builtInTypeArraySpec ) ; <nl> - } <nl> - } <nl> - ; <nl> <nl> / / A builtin type specification is a builtin type with possible brackets <nl> / / afterwards ( which would make it an array type ) . <nl> builtInTypeSpec [ boolean addImagNode ] <nl> - : builtInType ( lb : LBRACK ^ { # lb . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * <nl> + : builtInType <nl> + ( options { greedy = true ; } : <nl> + ( { LA ( 1 ) = = AT } ? annotations <nl> + | ) <nl> + lb : LBRACK ^ { # lb . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * <nl> { <nl> if ( addImagNode ) { <nl> # builtInTypeSpec = # ( # [ TYPE , " TYPE " ] , # builtInTypeSpec ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / AnnotationsOnArrayTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / AnnotationsOnArrayTest . java <nl> new file mode 100644 <nl> index 0000000 . . 55fa41f <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / AnnotationsOnArrayTest . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + import org . apache . commons . lang3 . ArrayUtils ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> + <nl> + public class AnnotationsOnArrayTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getNonCompilablePath ( String filename ) throws IOException { <nl> + return super . getNonCompilablePath ( " grammars " + File . separator <nl> + + " java8 " + File . separator + filename ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCanParse ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputAnnotationsOnArray . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / TypeUseAnnotationsOnQualifiedTypesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / TypeUseAnnotationsOnQualifiedTypesTest . java <nl> new file mode 100644 <nl> index 0000000 . . 5173cf0 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / TypeUseAnnotationsOnQualifiedTypesTest . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + import org . apache . commons . lang3 . ArrayUtils ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> + <nl> + public class TypeUseAnnotationsOnQualifiedTypesTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getNonCompilablePath ( String filename ) throws IOException { <nl> + return super . getNonCompilablePath ( " grammars " + File . separator <nl> + + " java8 " + File . separator + filename ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCanParse ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputTypeUseAnnotationsOnQualifiedTypes . java " ) , <nl> + expected ) ; <nl> + <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputAnnotationsOnArray . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputAnnotationsOnArray . java <nl> new file mode 100644 <nl> index 0000000 . . 364e658 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputAnnotationsOnArray . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + / / Compilable with Java8 <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import static java . lang . annotation . ElementType . TYPE _ USE ; <nl> + <nl> + import java . lang . annotation . Retention ; <nl> + import java . lang . annotation . RetentionPolicy ; <nl> + import java . lang . annotation . Target ; <nl> + <nl> + public final class InputAnnotationsOnArray { <nl> + <nl> + private InputAnnotationsOnArray ( ) { <nl> + } <nl> + <nl> + public static < T > T [ ] checkNotNullContents ( T @ Nullable [ ] array ) { <nl> + if ( array = = null ) { <nl> + throw new NullPointerException ( ) ; <nl> + } <nl> + <nl> + return array ; <nl> + } <nl> + <nl> + public static < T > T [ ] [ ] checkNotNullContents2 ( T @ Nullable [ ] @ Nullable [ ] array ) { <nl> + if ( array = = null ) { <nl> + throw new NullPointerException ( ) ; <nl> + } <nl> + <nl> + return array ; <nl> + } <nl> + } <nl> + <nl> + @ Retention ( RetentionPolicy . CLASS ) <nl> + @ Target ( { TYPE _ USE } ) <nl> + @ interface Nullable { <nl> + } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputTypeUseAnnotationsOnQualifiedTypes . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputTypeUseAnnotationsOnQualifiedTypes . java <nl> new file mode 100644 <nl> index 0000000 . . e4d4f02 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputTypeUseAnnotationsOnQualifiedTypes . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + / / Compilable with Java8 <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import java . awt . geom . Rectangle2D ; <nl> + import java . lang . annotation . ElementType ; <nl> + import java . lang . annotation . Target ; <nl> + <nl> + public class InputTypeUseAnnotationsOnQualifiedTypes { <nl> + / * Causes parse failure * / <nl> + Rectangle2D . @ Ann Double rect = null ; <nl> + <nl> + / * Causes parse failure * / <nl> + public final Rectangle2D . @ Ann Double getRect1 ( ) { <nl> + return new Rectangle2D . Double ( ) ; <nl> + } <nl> + <nl> + / * Causes parse failure * / <nl> + public final Rectangle2D . Double getRect2 ( ) { <nl> + return new Rectangle2D . @ Ann Double ( ) ; <nl> + } <nl> + <nl> + / * Amazingly does not cause parse failure * / <nl> + public final Rectangle2D . Double getRect3 ( ) { <nl> + Rectangle2D . @ Ann Double rect = null ; <nl> + return rect ; <nl> + } <nl> + } <nl> + <nl> + @ Target ( { ElementType . TYPE _ USE } ) <nl> + @ interface Ann { <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> index 9655dd9 . . fbae952 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> @ @ - 173 , 6 + 173 , 11 @ @ public class VariableDeclarationUsageDistanceCheck extends Check <nl> public static final String MSG _ KEY = " variable . declaration . usage . distance " ; <nl> <nl> / * * <nl> + * Warning message key . <nl> + * / <nl> + public static final String MSG _ KEY _ EXT = " variable . declaration . usage . distance . extend " ; <nl> + <nl> + / * * <nl> * Default value of distance between declaration of variable and its first <nl> * usage . <nl> * / <nl> @ @ - 275 , 8 + 280 , 14 @ @ public class VariableDeclarationUsageDistanceCheck extends Check <nl> if ( dist > mAllowedDistance <nl> & & ! isInitializationSequence ( variableUsageAst , variable . getText ( ) ) ) <nl> { <nl> - log ( variable . getLineNo ( ) , <nl> - MSG _ KEY , variable . getText ( ) , dist , mAllowedDistance ) ; <nl> + if ( mIgnoreFinal ) { <nl> + log ( variable . getLineNo ( ) , <nl> + MSG _ KEY _ EXT , variable . getText ( ) , dist , mAllowedDistance ) ; <nl> + } <nl> + else { <nl> + log ( variable . getLineNo ( ) , <nl> + MSG _ KEY , variable . getText ( ) , dist , mAllowedDistance ) ; <nl> + } <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> index 1abd0aa . . b9047f1 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> @ @ - 64 , 4 + 64 , 5 @ @ unnecessary . paren . return = Unnecessary parentheses around return value . <nl> unnecessary . paren . string = Unnecessary parentheses around string { 0 } . <nl> package . dir . mismatch = Package declaration does not match directory ' ' { 0 } ' ' . <nl> variable . declaration . usage . distance = Distance between variable ' ' { 0 } ' ' declaration and its first usage is { 1 } , but allowed { 2 } . <nl> + variable . declaration . usage . distance . extend = Distance between variable ' ' { 0 } ' ' declaration and its first usage is { 1 } , but allowed { 2 } . Consider to make that variable as final if you still need to store its value in advance ( before method calls that might do side effect on original value ) . <nl> overload . methods . declaration = Overload methods should not be split . Previous overloaded method located at line ' ' { 0 } ' ' . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java <nl> index b7b41f5 . . a9db2be 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . VariableDeclarationUsageDistanceCheck . MSG _ KEY ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . coding . VariableDeclarationUsageDistanceCheck . MSG _ KEY _ EXT ; <nl> + <nl> import static java . text . MessageFormat . format ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 171 , 34 + 173 , 34 @ @ public class VariableDeclarationUsageDistanceCheckTest extends <nl> checkConfig . addAttribute ( " validateBetweenScopes " , " true " ) ; <nl> checkConfig . addAttribute ( " ignoreFinal " , " true " ) ; <nl> final String [ ] expected = { <nl> - " 30 : " + getCheckMessage ( MSG _ KEY , " a " , 2 , 1 ) , <nl> - " 38 : " + getCheckMessage ( MSG _ KEY , " temp " , 2 , 1 ) , <nl> - " 44 : " + getCheckMessage ( MSG _ KEY , " temp " , 2 , 1 ) , <nl> - " 57 : " + getCheckMessage ( MSG _ KEY , " count " , 2 , 1 ) , <nl> - " 71 : " + getCheckMessage ( MSG _ KEY , " count " , 4 , 1 ) , <nl> - " 96 : " + getCheckMessage ( MSG _ KEY , " arg " , 2 , 1 ) , <nl> - " 144 : " + getCheckMessage ( MSG _ KEY , " m " , 3 , 1 ) , <nl> - " 145 : " + getCheckMessage ( MSG _ KEY , " n " , 2 , 1 ) , <nl> - " 184 : " + getCheckMessage ( MSG _ KEY , " result " , 2 , 1 ) , <nl> - " 219 : " + getCheckMessage ( MSG _ KEY , " t " , 5 , 1 ) , <nl> - " 222 : " + getCheckMessage ( MSG _ KEY , " c " , 3 , 1 ) , <nl> - " 223 : " + getCheckMessage ( MSG _ KEY , " d2 " , 3 , 1 ) , <nl> - " 260 : " + getCheckMessage ( MSG _ KEY , " selected " , 2 , 1 ) , <nl> - " 261 : " + getCheckMessage ( MSG _ KEY , " model " , 2 , 1 ) , <nl> - " 287 : " + getCheckMessage ( MSG _ KEY , " sw " , 2 , 1 ) , <nl> - " 300 : " + getCheckMessage ( MSG _ KEY , " wh " , 2 , 1 ) , <nl> - " 343 : " + getCheckMessage ( MSG _ KEY , " green " , 2 , 1 ) , <nl> - " 344 : " + getCheckMessage ( MSG _ KEY , " blue " , 3 , 1 ) , <nl> - " 454 : " + getCheckMessage ( MSG _ KEY , " aOpt " , 3 , 1 ) , <nl> - " 455 : " + getCheckMessage ( MSG _ KEY , " bOpt " , 2 , 1 ) , <nl> - " 471 : " + getCheckMessage ( MSG _ KEY , " l1 " , 3 , 1 ) , <nl> - " 471 : " + getCheckMessage ( MSG _ KEY , " l2 " , 2 , 1 ) , <nl> - " 479 : " + getCheckMessage ( MSG _ KEY , " myOption " , 7 , 1 ) , <nl> - " 491 : " + getCheckMessage ( MSG _ KEY , " myOption " , 6 , 1 ) , <nl> - " 504 : " + getCheckMessage ( MSG _ KEY , " count " , 4 , 1 ) , <nl> - " 505 : " + getCheckMessage ( MSG _ KEY , " files " , 2 , 1 ) , <nl> - " 540 : " + getCheckMessage ( MSG _ KEY , " id " , 2 , 1 ) , <nl> - " 542 : " + getCheckMessage ( MSG _ KEY , " parentId " , 3 , 1 ) , <nl> + " 30 : " + getCheckMessage ( MSG _ KEY _ EXT , " a " , 2 , 1 ) , <nl> + " 38 : " + getCheckMessage ( MSG _ KEY _ EXT , " temp " , 2 , 1 ) , <nl> + " 44 : " + getCheckMessage ( MSG _ KEY _ EXT , " temp " , 2 , 1 ) , <nl> + " 57 : " + getCheckMessage ( MSG _ KEY _ EXT , " count " , 2 , 1 ) , <nl> + " 71 : " + getCheckMessage ( MSG _ KEY _ EXT , " count " , 4 , 1 ) , <nl> + " 96 : " + getCheckMessage ( MSG _ KEY _ EXT , " arg " , 2 , 1 ) , <nl> + " 144 : " + getCheckMessage ( MSG _ KEY _ EXT , " m " , 3 , 1 ) , <nl> + " 145 : " + getCheckMessage ( MSG _ KEY _ EXT , " n " , 2 , 1 ) , <nl> + " 184 : " + getCheckMessage ( MSG _ KEY _ EXT , " result " , 2 , 1 ) , <nl> + " 219 : " + getCheckMessage ( MSG _ KEY _ EXT , " t " , 5 , 1 ) , <nl> + " 222 : " + getCheckMessage ( MSG _ KEY _ EXT , " c " , 3 , 1 ) , <nl> + " 223 : " + getCheckMessage ( MSG _ KEY _ EXT , " d2 " , 3 , 1 ) , <nl> + " 260 : " + getCheckMessage ( MSG _ KEY _ EXT , " selected " , 2 , 1 ) , <nl> + " 261 : " + getCheckMessage ( MSG _ KEY _ EXT , " model " , 2 , 1 ) , <nl> + " 287 : " + getCheckMessage ( MSG _ KEY _ EXT , " sw " , 2 , 1 ) , <nl> + " 300 : " + getCheckMessage ( MSG _ KEY _ EXT , " wh " , 2 , 1 ) , <nl> + " 343 : " + getCheckMessage ( MSG _ KEY _ EXT , " green " , 2 , 1 ) , <nl> + " 344 : " + getCheckMessage ( MSG _ KEY _ EXT , " blue " , 3 , 1 ) , <nl> + " 454 : " + getCheckMessage ( MSG _ KEY _ EXT , " aOpt " , 3 , 1 ) , <nl> + " 455 : " + getCheckMessage ( MSG _ KEY _ EXT , " bOpt " , 2 , 1 ) , <nl> + " 471 : " + getCheckMessage ( MSG _ KEY _ EXT , " l1 " , 3 , 1 ) , <nl> + " 471 : " + getCheckMessage ( MSG _ KEY _ EXT , " l2 " , 2 , 1 ) , <nl> + " 479 : " + getCheckMessage ( MSG _ KEY _ EXT , " myOption " , 7 , 1 ) , <nl> + " 491 : " + getCheckMessage ( MSG _ KEY _ EXT , " myOption " , 6 , 1 ) , <nl> + " 504 : " + getCheckMessage ( MSG _ KEY _ EXT , " count " , 4 , 1 ) , <nl> + " 505 : " + getCheckMessage ( MSG _ KEY _ EXT , " files " , 2 , 1 ) , <nl> + " 540 : " + getCheckMessage ( MSG _ KEY _ EXT , " id " , 2 , 1 ) , <nl> + " 542 : " + getCheckMessage ( MSG _ KEY _ EXT , " parentId " , 3 , 1 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " coding / InputVariableDeclarationUsageDistanceCheck . java " ) , expected ) ; <nl> }

TEST DIFF:
diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 index cfcaa16 . . acc6d5f 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 @ @ - 260 , 7 + 260 , 10 @ @ typeSpec [ boolean addImagNode ] 
 / / - generic type arguments after 
 classTypeSpec [ boolean addImagNode ] 
 : classOrInterfaceType [ addImagNode ] 
 - ( options { greedy = true ; } : lb : LBRACK ^ { # lb . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * 
 + ( options { greedy = true ; } : 
 + ( { LA ( 1 ) = = AT } ? annotations 
 + | ) 
 + lb : LBRACK ^ { # lb . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * 
 { 
 if ( addImagNode ) { 
 # classTypeSpec = # ( # [ TYPE , " TYPE " ] , # classTypeSpec ) ; 
 @ @ - 269 , 21 + 272 , 26 @ @ classTypeSpec [ boolean addImagNode ] 
 ; 
 
 classOrInterfaceType [ boolean addImagNode ] 
 - : ( { LA ( 1 ) = = AT } ? annotations 
 - | ) 
 - IDENT ( options { warnWhenFollowAmbig = false ; } : typeArguments [ addImagNode ] ) ? 
 - ( options { greedy = true ; } : / / match as many as possible 
 - DOT ^ 
 - IDENT ( options { warnWhenFollowAmbig = false ; } : typeArguments [ addImagNode ] ) ? 
 - ) * 
 - ; 
 + : ( { LA ( 1 ) = = AT } ? annotations 
 + | ) 
 + IDENT 
 + ( options { warnWhenFollowAmbig = false ; } : typeArguments [ addImagNode ] ) ? 
 + 
 + ( options { greedy = true ; } : / / match as many as possible 
 + DOT ^ 
 + ( { LA ( 1 ) = = AT } ? annotations 
 + | ) 
 + IDENT 
 + ( options { warnWhenFollowAmbig = false ; } : typeArguments [ addImagNode ] ) ? 
 + ) * 
 + ; 
 
 / / A generic type argument is a class type , a possibly bounded wildcard type or a built - in type array 
 typeArgument [ boolean addImagNode ] 
 : ( ( { LA ( 1 ) = = AT } ? annotations 
 | ) ( 
 classTypeSpec [ addImagNode ] 
 - | builtInTypeArraySpec [ addImagNode ] 
 + | builtInTypeSpec [ addImagNode ] 
 | wildcardType [ addImagNode ] ) 
 ) 
 { # typeArgument = # ( # [ TYPE _ ARGUMENT , " TYPE _ ARGUMENT " ] , # typeArgument ) ; } 
 @ @ - 356 , 21 + 364 , 15 @ @ typeArgumentBounds [ boolean addImagNode ] 
 ( options { greedy = true ; } : lb : LBRACK ^ { # lb . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * 
 ; 
 
 - / / A builtin type array specification is a builtin type with brackets afterwards 
 - builtInTypeArraySpec [ boolean addImagNode ] 
 - : builtInType 
 - ( options { greedy = true ; } : lb : LBRACK ^ { # lb . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) + 
 - { 
 - if ( addImagNode ) { 
 - # builtInTypeArraySpec = # ( # [ TYPE , " TYPE " ] , # builtInTypeArraySpec ) ; 
 - } 
 - } 
 - ; 
 
 / / A builtin type specification is a builtin type with possible brackets 
 / / afterwards ( which would make it an array type ) . 
 builtInTypeSpec [ boolean addImagNode ] 
 - : builtInType ( lb : LBRACK ^ { # lb . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * 
 + : builtInType 
 + ( options { greedy = true ; } : 
 + ( { LA ( 1 ) = = AT } ? annotations 
 + | ) 
 + lb : LBRACK ^ { # lb . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * 
 { 
 if ( addImagNode ) { 
 # builtInTypeSpec = # ( # [ TYPE , " TYPE " ] , # builtInTypeSpec ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / AnnotationsOnArrayTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / AnnotationsOnArrayTest . java 
 new file mode 100644 
 index 0000000 . . 55fa41f 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / AnnotationsOnArrayTest . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + import org . apache . commons . lang3 . ArrayUtils ; 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 + 
 + public class AnnotationsOnArrayTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getNonCompilablePath ( String filename ) throws IOException { 
 + return super . getNonCompilablePath ( " grammars " + File . separator 
 + + " java8 " + File . separator + filename ) ; 
 + } 
 + 
 + @ Test 
 + public void testCanParse ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputAnnotationsOnArray . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / TypeUseAnnotationsOnQualifiedTypesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / TypeUseAnnotationsOnQualifiedTypesTest . java 
 new file mode 100644 
 index 0000000 . . 5173cf0 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / TypeUseAnnotationsOnQualifiedTypesTest . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + import org . apache . commons . lang3 . ArrayUtils ; 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 + 
 + public class TypeUseAnnotationsOnQualifiedTypesTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getNonCompilablePath ( String filename ) throws IOException { 
 + return super . getNonCompilablePath ( " grammars " + File . separator 
 + + " java8 " + File . separator + filename ) ; 
 + } 
 + 
 + @ Test 
 + public void testCanParse ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputTypeUseAnnotationsOnQualifiedTypes . java " ) , 
 + expected ) ; 
 + 
 + } 
 + 
 + } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputAnnotationsOnArray . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputAnnotationsOnArray . java 
 new file mode 100644 
 index 0000000 . . 364e658 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputAnnotationsOnArray . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + / / Compilable with Java8 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import static java . lang . annotation . ElementType . TYPE _ USE ; 
 + 
 + import java . lang . annotation . Retention ; 
 + import java . lang . annotation . RetentionPolicy ; 
 + import java . lang . annotation . Target ; 
 + 
 + public final class InputAnnotationsOnArray { 
 + 
 + private InputAnnotationsOnArray ( ) { 
 + } 
 + 
 + public static < T > T [ ] checkNotNullContents ( T @ Nullable [ ] array ) { 
 + if ( array = = null ) { 
 + throw new NullPointerException ( ) ; 
 + } 
 + 
 + return array ; 
 + } 
 + 
 + public static < T > T [ ] [ ] checkNotNullContents2 ( T @ Nullable [ ] @ Nullable [ ] array ) { 
 + if ( array = = null ) { 
 + throw new NullPointerException ( ) ; 
 + } 
 + 
 + return array ; 
 + } 
 + } 
 + 
 + @ Retention ( RetentionPolicy . CLASS ) 
 + @ Target ( { TYPE _ USE } ) 
 + @ interface Nullable { 
 + } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputTypeUseAnnotationsOnQualifiedTypes . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputTypeUseAnnotationsOnQualifiedTypes . java 
 new file mode 100644 
 index 0000000 . . e4d4f02 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputTypeUseAnnotationsOnQualifiedTypes . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + / / Compilable with Java8 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import java . awt . geom . Rectangle2D ; 
 + import java . lang . annotation . ElementType ; 
 + import java . lang . annotation . Target ; 
 + 
 + public class InputTypeUseAnnotationsOnQualifiedTypes { 
 + / * Causes parse failure * / 
 + Rectangle2D . @ Ann Double rect = null ; 
 + 
 + / * Causes parse failure * / 
 + public final Rectangle2D . @ Ann Double getRect1 ( ) { 
 + return new Rectangle2D . Double ( ) ; 
 + } 
 + 
 + / * Causes parse failure * / 
 + public final Rectangle2D . Double getRect2 ( ) { 
 + return new Rectangle2D . @ Ann Double ( ) ; 
 + } 
 + 
 + / * Amazingly does not cause parse failure * / 
 + public final Rectangle2D . Double getRect3 ( ) { 
 + Rectangle2D . @ Ann Double rect = null ; 
 + return rect ; 
 + } 
 + } 
 + 
 + @ Target ( { ElementType . TYPE _ USE } ) 
 + @ interface Ann { 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 index 9655dd9 . . fbae952 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 @ @ - 173 , 6 + 173 , 11 @ @ public class VariableDeclarationUsageDistanceCheck extends Check 
 public static final String MSG _ KEY = " variable . declaration . usage . distance " ; 
 
 / * * 
 + * Warning message key . 
 + * / 
 + public static final String MSG _ KEY _ EXT = " variable . declaration . usage . distance . extend " ; 
 + 
 + / * * 
 * Default value of distance between declaration of variable and its first 
 * usage . 
 * / 
 @ @ - 275 , 8 + 280 , 14 @ @ public class VariableDeclarationUsageDistanceCheck extends Check 
 if ( dist > mAllowedDistance 
 & & ! isInitializationSequence ( variableUsageAst , variable . getText ( ) ) ) 
 { 
 - log ( variable . getLineNo ( ) , 
 - MSG _ KEY , variable . getText ( ) , dist , mAllowedDistance ) ; 
 + if ( mIgnoreFinal ) { 
 + log ( variable . getLineNo ( ) , 
 + MSG _ KEY _ EXT , variable . getText ( ) , dist , mAllowedDistance ) ; 
 + } 
 + else { 
 + log ( variable . getLineNo ( ) , 
 + MSG _ KEY , variable . getText ( ) , dist , mAllowedDistance ) ; 
 + } 
 } 
 } 
 } 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 index 1abd0aa . . b9047f1 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 @ @ - 64 , 4 + 64 , 5 @ @ unnecessary . paren . return = Unnecessary parentheses around return value . 
 unnecessary . paren . string = Unnecessary parentheses around string { 0 } . 
 package . dir . mismatch = Package declaration does not match directory ' ' { 0 } ' ' . 
 variable . declaration . usage . distance = Distance between variable ' ' { 0 } ' ' declaration and its first usage is { 1 } , but allowed { 2 } . 
 + variable . declaration . usage . distance . extend = Distance between variable ' ' { 0 } ' ' declaration and its first usage is { 1 } , but allowed { 2 } . Consider to make that variable as final if you still need to store its value in advance ( before method calls that might do side effect on original value ) . 
 overload . methods . declaration = Overload methods should not be split . Previous overloaded method located at line ' ' { 0 } ' ' . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java 
 index b7b41f5 . . a9db2be 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . VariableDeclarationUsageDistanceCheck . MSG _ KEY ; 
 + import static com . puppycrawl . tools . checkstyle . checks . coding . VariableDeclarationUsageDistanceCheck . MSG _ KEY _ EXT ; 
 + 
 import static java . text . MessageFormat . format ; 
 
 import org . junit . Test ; 
 @ @ - 171 , 34 + 173 , 34 @ @ public class VariableDeclarationUsageDistanceCheckTest extends 
 checkConfig . addAttribute ( " validateBetweenScopes " , " true " ) ; 
 checkConfig . addAttribute ( " ignoreFinal " , " true " ) ; 
 final String [ ] expected = { 
 - " 30 : " + getCheckMessage ( MSG _ KEY , " a " , 2 , 1 ) , 
 - " 38 : " + getCheckMessage ( MSG _ KEY , " temp " , 2 , 1 ) , 
 - " 44 : " + getCheckMessage ( MSG _ KEY , " temp " , 2 , 1 ) , 
 - " 57 : " + getCheckMessage ( MSG _ KEY , " count " , 2 , 1 ) , 
 - " 71 : " + getCheckMessage ( MSG _ KEY , " count " , 4 , 1 ) , 
 - " 96 : " + getCheckMessage ( MSG _ KEY , " arg " , 2 , 1 ) , 
 - " 144 : " + getCheckMessage ( MSG _ KEY , " m " , 3 , 1 ) , 
 - " 145 : " + getCheckMessage ( MSG _ KEY , " n " , 2 , 1 ) , 
 - " 184 : " + getCheckMessage ( MSG _ KEY , " result " , 2 , 1 ) , 
 - " 219 : " + getCheckMessage ( MSG _ KEY , " t " , 5 , 1 ) , 
 - " 222 : " + getCheckMessage ( MSG _ KEY , " c " , 3 , 1 ) , 
 - " 223 : " + getCheckMessage ( MSG _ KEY , " d2 " , 3 , 1 ) , 
 - " 260 : " + getCheckMessage ( MSG _ KEY , " selected " , 2 , 1 ) , 
 - " 261 : " + getCheckMessage ( MSG _ KEY , " model " , 2 , 1 ) , 
 - " 287 : " + getCheckMessage ( MSG _ KEY , " sw " , 2 , 1 ) , 
 - " 300 : " + getCheckMessage ( MSG _ KEY , " wh " , 2 , 1 ) , 
 - " 343 : " + getCheckMessage ( MSG _ KEY , " green " , 2 , 1 ) , 
 - " 344 : " + getCheckMessage ( MSG _ KEY , " blue " , 3 , 1 ) , 
 - " 454 : " + getCheckMessage ( MSG _ KEY , " aOpt " , 3 , 1 ) , 
 - " 455 : " + getCheckMessage ( MSG _ KEY , " bOpt " , 2 , 1 ) , 
 - " 471 : " + getCheckMessage ( MSG _ KEY , " l1 " , 3 , 1 ) , 
 - " 471 : " + getCheckMessage ( MSG _ KEY , " l2 " , 2 , 1 ) , 
 - " 479 : " + getCheckMessage ( MSG _ KEY , " myOption " , 7 , 1 ) , 
 - " 491 : " + getCheckMessage ( MSG _ KEY , " myOption " , 6 , 1 ) , 
 - " 504 : " + getCheckMessage ( MSG _ KEY , " count " , 4 , 1 ) , 
 - " 505 : " + getCheckMessage ( MSG _ KEY , " files " , 2 , 1 ) , 
 - " 540 : " + getCheckMessage ( MSG _ KEY , " id " , 2 , 1 ) , 
 - " 542 : " + getCheckMessage ( MSG _ KEY , " parentId " , 3 , 1 ) , 
 + " 30 : " + getCheckMessage ( MSG _ KEY _ EXT , " a " , 2 , 1 ) , 
 + " 38 : " + getCheckMessage ( MSG _ KEY _ EXT , " temp " , 2 , 1 ) , 
 + " 44 : " + getCheckMessage ( MSG _ KEY _ EXT , " temp " , 2 , 1 ) , 
 + " 57 : " + getCheckMessage ( MSG _ KEY _ EXT , " count " , 2 , 1 ) , 
 + " 71 : " + getCheckMessage ( MSG _ KEY _ EXT , " count " , 4 , 1 ) , 
 + " 96 : " + getCheckMessage ( MSG _ KEY _ EXT , " arg " , 2 , 1 ) , 
 + " 144 : " + getCheckMessage ( MSG _ KEY _ EXT , " m " , 3 , 1 ) , 
 + " 145 : " + getCheckMessage ( MSG _ KEY _ EXT , " n " , 2 , 1 ) , 
 + " 184 : " + getCheckMessage ( MSG _ KEY _ EXT , " result " , 2 , 1 ) , 
 + " 219 : " + getCheckMessage ( MSG _ KEY _ EXT , " t " , 5 , 1 ) , 
 + " 222 : " + getCheckMessage ( MSG _ KEY _ EXT , " c " , 3 , 1 ) , 
 + " 223 : " + getCheckMessage ( MSG _ KEY _ EXT , " d2 " , 3 , 1 ) , 
 + " 260 : " + getCheckMessage ( MSG _ KEY _ EXT , " selected " , 2 , 1 ) , 
 + " 261 : " + getCheckMessage ( MSG _ KEY _ EXT , " model " , 2 , 1 ) , 
 + " 287 : " + getCheckMessage ( MSG _ KEY _ EXT , " sw " , 2 , 1 ) , 
 + " 300 : " + getCheckMessage ( MSG _ KEY _ EXT , " wh " , 2 , 1 ) , 
 + " 343 : " + getCheckMessage ( MSG _ KEY _ EXT , " green " , 2 , 1 ) , 
 + " 344 : " + getCheckMessage ( MSG _ KEY _ EXT , " blue " , 3 , 1 ) , 
 + " 454 : " + getCheckMessage ( MSG _ KEY _ EXT , " aOpt " , 3 , 1 ) , 
 + " 455 : " + getCheckMessage ( MSG _ KEY _ EXT , " bOpt " , 2 , 1 ) , 
 + " 471 : " + getCheckMessage ( MSG _ KEY _ EXT , " l1 " , 3 , 1 ) , 
 + " 471 : " + getCheckMessage ( MSG _ KEY _ EXT , " l2 " , 2 , 1 ) , 
 + " 479 : " + getCheckMessage ( MSG _ KEY _ EXT , " myOption " , 7 , 1 ) , 
 + " 491 : " + getCheckMessage ( MSG _ KEY _ EXT , " myOption " , 6 , 1 ) , 
 + " 504 : " + getCheckMessage ( MSG _ KEY _ EXT , " count " , 4 , 1 ) , 
 + " 505 : " + getCheckMessage ( MSG _ KEY _ EXT , " files " , 2 , 1 ) , 
 + " 540 : " + getCheckMessage ( MSG _ KEY _ EXT , " id " , 2 , 1 ) , 
 + " 542 : " + getCheckMessage ( MSG _ KEY _ EXT , " parentId " , 3 , 1 ) , 
 } ; 
 verify ( checkConfig , getPath ( " coding / InputVariableDeclarationUsageDistanceCheck . java " ) , expected ) ; 
 }
