BLEU SCORE: 0.07603985612048919

TEST MSG: Issue # 1002 : Add optional attribute to suppression filter
GENERATED MSG: Issue # 1296 : ' SuppressionsLoader ' refactored , UT coverage improved

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index ae26f0a . . a3ecd0f 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 271 , 7 + 271 , 7 @ @ <nl> < dependency > <nl> < groupId > nl . jqno . equalsverifier < / groupId > <nl> < artifactId > equalsverifier < / artifactId > <nl> - < version > 1 . 7 . 6 < / version > <nl> + < version > 1 . 7 . 7 < / version > <nl> < scope > test < / scope > <nl> < / dependency > <nl> < dependency > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java <nl> index 39465ab . . 9069f7a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java <nl> @ @ - 19 , 6 + 19 , 10 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . filters ; <nl> <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . net . URI ; <nl> + import java . net . URL ; <nl> import java . util . Objects ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> @ @ - 26 , 6 + 30 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Filter ; <nl> import com . puppycrawl . tools . checkstyle . api . FilterSet ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 33 , 21 + 38 , 32 @ @ import com . puppycrawl . tools . checkstyle . api . FilterSet ; <nl> * column , as specified in a suppression file . <nl> * < / p > <nl> * @ author Rick Giles <nl> + * @ author < a href = " mailto : piotr . listkiewicz @ gmail . com " > liscju < / a > <nl> * / <nl> public class SuppressionFilter <nl> extends AutomaticBean <nl> implements Filter { <nl> + / * * Filename of supression file . * / <nl> + private String file ; <nl> + / * * Tells whether config file existence is optional . * / <nl> + private boolean optional ; <nl> / * * Set of individual suppresses . * / <nl> private FilterSet filters = new FilterSet ( ) ; <nl> <nl> / * * <nl> - * Loads the suppressions for a file . <nl> + * Sets name of the supression file . <nl> * @ param fileName name of the suppressions file . <nl> - * @ throws CheckstyleException if there is an error . <nl> * / <nl> - public void setFile ( String fileName ) <nl> - throws CheckstyleException { <nl> - filters = SuppressionsLoader . loadSuppressions ( fileName ) ; <nl> + public void setFile ( String fileName ) { <nl> + file = fileName ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets whether config file existence is optional . <nl> + * @ param optional tells if config file existence is optional . <nl> + * / <nl> + public void setOptional ( boolean optional ) { <nl> + this . optional = optional ; <nl> } <nl> <nl> @ Override <nl> @ @ - 71 , 4 + 87 , 50 @ @ public class SuppressionFilter <nl> public int hashCode ( ) { <nl> return Objects . hash ( filters ) ; <nl> } <nl> + <nl> + @ Override <nl> + protected void finishLocalSetup ( ) throws CheckstyleException { <nl> + if ( file ! = null ) { <nl> + if ( optional ) { <nl> + if ( suppressionSourceExists ( file ) ) { <nl> + filters = SuppressionsLoader . loadSuppressions ( file ) ; <nl> + } <nl> + else { <nl> + filters = new FilterSet ( ) ; <nl> + } <nl> + } <nl> + else { <nl> + filters = SuppressionsLoader . loadSuppressions ( file ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks if suppression source with given fileName exists . <nl> + * @ param fileName name of the suppressions file . <nl> + * @ return true if suppression file exists , otherwise false <nl> + * / <nl> + private static boolean suppressionSourceExists ( String fileName ) { <nl> + boolean suppressionSourceExists = true ; <nl> + InputStream sourceInput = null ; <nl> + try { <nl> + final URI uriByFilename = CommonUtils . getUriByFilename ( fileName ) ; <nl> + final URL url = uriByFilename . toURL ( ) ; <nl> + sourceInput = url . openStream ( ) ; <nl> + } <nl> + catch ( CheckstyleException | IOException ignored ) { <nl> + suppressionSourceExists = false ; <nl> + } <nl> + finally { <nl> + if ( sourceInput ! = null ) { <nl> + try { <nl> + sourceInput . close ( ) ; <nl> + } <nl> + catch ( IOException ignored ) { <nl> + suppressionSourceExists = false ; <nl> + } <nl> + } <nl> + } <nl> + return suppressionSourceExists ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java <nl> index d065f4d . . 0fd06b8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java <nl> @ @ - 19 , 14 + 19 , 34 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . filters ; <nl> <nl> - import org . junit . Assert ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . fail ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . net . URI ; <nl> + import java . net . URL ; <nl> + <nl> import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import org . mockito . BDDMockito ; <nl> + import org . mockito . Mockito ; <nl> + <nl> + import org . powermock . api . mockito . PowerMockito ; <nl> + import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> + import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> + <nl> import nl . jqno . equalsverifier . EqualsVerifier ; <nl> import nl . jqno . equalsverifier . Warning ; <nl> <nl> + @ RunWith ( PowerMockRunner . class ) <nl> + @ PrepareForTest ( { SuppressionFilter . class , CommonUtils . class } ) <nl> public class SuppressionFilterTest { <nl> @ Test <nl> public void testEqualsAndHashCode ( ) { <nl> @ @ - 39 , 13 + 59 , 122 @ @ public class SuppressionFilterTest { <nl> <nl> @ Test <nl> public void testAccept ( ) throws CheckstyleException { <nl> - final SuppressionFilter filter = new SuppressionFilter ( ) ; <nl> - filter . setFile ( " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " <nl> - + " suppressions _ none . xml " ) ; <nl> + final String fileName = " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " <nl> + + " suppressions _ none . xml " ; <nl> + final boolean optional = false ; <nl> + final SuppressionFilter filter = createSupressionFilter ( fileName , optional ) ; <nl> <nl> final AuditEvent ev = new AuditEvent ( this , " ATest . java " , null ) ; <nl> <nl> - Assert . assertTrue ( filter . accept ( ev ) ) ; <nl> + assertTrue ( filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAcceptOnNullFile ( ) throws CheckstyleException { <nl> + final String fileName = null ; <nl> + final boolean optional = false ; <nl> + final SuppressionFilter filter = createSupressionFilter ( fileName , optional ) ; <nl> + <nl> + final AuditEvent ev = new AuditEvent ( this , " AnyJava . java " , null ) ; <nl> + <nl> + assertTrue ( filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonExistanceSuppressionFileWithFalseOptional ( ) throws Exception { <nl> + final String fileName = " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " <nl> + + " non _ existance _ suppresion _ file . xml " ; <nl> + try { <nl> + final boolean optional = false ; <nl> + createSupressionFilter ( fileName , optional ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( CheckstyleException ex ) { <nl> + assertEquals ( " Unable to find : " + fileName , ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testExistanceInvalidSuppressionFileWithTrueOptional ( ) throws Exception { <nl> + final String fileName = " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " <nl> + + " suppressions _ invalid _ file . xml " ; <nl> + try { <nl> + final boolean optional = true ; <nl> + createSupressionFilter ( fileName , optional ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( CheckstyleException ex ) { <nl> + assertEquals ( " Unable to parse " + fileName + " - invalid files or checks format " , <nl> + ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testExistingSuppressionFileWithTrueOptional ( ) throws Exception { <nl> + final String fileName = " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " <nl> + + " suppressions _ none . xml " ; <nl> + final boolean optional = true ; <nl> + final SuppressionFilter filter = createSupressionFilter ( fileName , optional ) ; <nl> + <nl> + final AuditEvent ev = new AuditEvent ( this , " AnyFile . java " , null ) ; <nl> + <nl> + assertTrue ( filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testExistingConfigWithTrueOptionalThrowsIoErrorWhileClosing ( ) <nl> + throws Exception { <nl> + final InputStream inputStream = PowerMockito . mock ( InputStream . class ) ; <nl> + Mockito . doThrow ( IOException . class ) . when ( inputStream ) . close ( ) ; <nl> + <nl> + final URL url = PowerMockito . mock ( URL . class ) ; <nl> + BDDMockito . given ( url . openStream ( ) ) . willReturn ( inputStream ) ; <nl> + <nl> + final URI uri = PowerMockito . mock ( URI . class ) ; <nl> + BDDMockito . given ( uri . toURL ( ) ) . willReturn ( url ) ; <nl> + <nl> + PowerMockito . mockStatic ( CommonUtils . class ) ; <nl> + <nl> + final String fileName = " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " <nl> + + " suppressions _ none . xml " ; <nl> + BDDMockito . given ( CommonUtils . getUriByFilename ( fileName ) ) . willReturn ( uri ) ; <nl> + <nl> + final boolean optional = true ; <nl> + final SuppressionFilter filter = createSupressionFilter ( fileName , optional ) ; <nl> + final AuditEvent ev = new AuditEvent ( this , " AnyFile . java " , null ) ; <nl> + assertTrue ( filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonExistanceSuppressionFileWithTrueOptional ( ) throws Exception { <nl> + final String fileName = " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " <nl> + + " non _ existance _ suppresion _ file . xml " ; <nl> + final boolean optional = true ; <nl> + final SuppressionFilter filter = createSupressionFilter ( fileName , optional ) ; <nl> + <nl> + final AuditEvent ev = new AuditEvent ( this , " AnyFile . java " , null ) ; <nl> + <nl> + assertTrue ( filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonExistanceSuppressionUrlWithTrueOptional ( ) throws Exception { <nl> + final String fileName = <nl> + " http : / / checkstyle . sourceforge . net / non _ existing _ suppression . xml " ; <nl> + final boolean optional = true ; <nl> + final SuppressionFilter filter = createSupressionFilter ( fileName , optional ) ; <nl> + <nl> + final AuditEvent ev = new AuditEvent ( this , " AnyFile . java " , null ) ; <nl> + <nl> + assertTrue ( filter . accept ( ev ) ) ; <nl> } <nl> <nl> + private static SuppressionFilter createSupressionFilter ( String fileName , boolean optional ) <nl> + throws CheckstyleException { <nl> + final SuppressionFilter suppressionFilter = new SuppressionFilter ( ) ; <nl> + suppressionFilter . setFile ( fileName ) ; <nl> + suppressionFilter . setOptional ( optional ) ; <nl> + suppressionFilter . finishLocalSetup ( ) ; <nl> + return suppressionFilter ; <nl> + } <nl> } <nl> diff - - git a / src / xdocs / config _ filters . xml b / src / xdocs / config _ filters . xml <nl> index 18563a2 . . aa81722 100644 <nl> - - - a / src / xdocs / config _ filters . xml <nl> + + + b / src / xdocs / config _ filters . xml <nl> @ @ - 389 , 7 + 389 , 8 @ @ public static void foo ( ) { <nl> audit events for Check errors according to <nl> a < a href = " config . html # XML _ Structure " > < em > suppressions XML <nl> document < / em > < / a > in a file . If there is no configured <nl> - suppressions file , the Filter accepts all audit events . <nl> + suppressions file or the optional is set to true and <nl> + suppressions file was not found the Filter accepts all audit events . <nl> < / p > <nl> < / subsection > <nl> < subsection name = " Properties " > <nl> @ @ - 421 , 6 + 422 , 18 @ @ public static void foo ( ) { <nl> < td > < a href = " property _ types . html # string " > string < / a > < / td > <nl> < td > < code > none < / code > < / td > <nl> < / tr > <nl> + < tr > <nl> + < td > optional < / td > <nl> + < td > <nl> + Tells what to do when the file is not existing . If <nl> + optional is set to false the file must exist , or else <nl> + it ends with error . On the other hand if optional is <nl> + true and file is not found , the filter accept all <nl> + audit events . <nl> + < / td > <nl> + < td > < a href = " property _ types . html # boolean " > boolean < / a > < / td > <nl> + < td > < code > false < / code > < / td > <nl> + < / tr > <nl> < / table > <nl> < / subsection > <nl> < subsection name = " Examples " > <nl> @ @ - 433 , 6 + 446 , 7 @ @ public static void foo ( ) { <nl> < source > <nl> & lt ; module name = & quot ; SuppressionFilter & quot ; & gt ; <nl> & lt ; property name = & quot ; file & quot ; value = & quot ; config / suppressions . xml & quot ; / & gt ; <nl> + & lt ; property name = & quot ; optional & quot ; value = & quot ; false & quot ; / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> < p >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index e4ba35b . . f4a88f8 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1102 , 7 + 1102 , 6 @ @ <nl> < regex > < pattern > . * . checks . UniquePropertiesCheck \ $ . * < / pattern > < branchRate > 75 < / branchRate > < lineRate > 90 < / lineRate > < / regex > <nl> <nl> <nl> - < regex > < pattern > . * . checks . blocks . LeftCurlyCheck < / pattern > < branchRate > 89 < / branchRate > < lineRate > 96 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . blocks . RightCurlyCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 95 < / lineRate > < / regex > <nl> <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java <nl> index 93ed56f . . 3d5aac6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java <nl> @ @ - 176 , 28 + 176 , 26 @ @ public class LeftCurlyCheck <nl> <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> - final DetailAST startToken ; <nl> - final DetailAST brace ; <nl> + DetailAST startToken = null ; <nl> + DetailAST brace = null ; <nl> <nl> switch ( ast . getType ( ) ) { <nl> - case TokenTypes . CTOR _ DEF : <nl> - case TokenTypes . METHOD _ DEF : <nl> + case TokenTypes . CTOR _ DEF : <nl> + case TokenTypes . METHOD _ DEF : <nl> startToken = skipAnnotationOnlyLines ( ast ) ; <nl> brace = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> break ; <nl> - <nl> - case TokenTypes . INTERFACE _ DEF : <nl> - case TokenTypes . CLASS _ DEF : <nl> - case TokenTypes . ANNOTATION _ DEF : <nl> - case TokenTypes . ENUM _ DEF : <nl> - case TokenTypes . ENUM _ CONSTANT _ DEF : <nl> + case TokenTypes . INTERFACE _ DEF : <nl> + case TokenTypes . CLASS _ DEF : <nl> + case TokenTypes . ANNOTATION _ DEF : <nl> + case TokenTypes . ENUM _ DEF : <nl> + case TokenTypes . ENUM _ CONSTANT _ DEF : <nl> startToken = skipAnnotationOnlyLines ( ast ) ; <nl> final DetailAST objBlock = ast . findFirstToken ( TokenTypes . OBJBLOCK ) ; <nl> brace = objBlock = = null <nl> - ? null <nl> - : objBlock . getFirstChild ( ) ; <nl> + ? null <nl> + : objBlock . getFirstChild ( ) ; <nl> break ; <nl> - <nl> case TokenTypes . LITERAL _ WHILE : <nl> case TokenTypes . LITERAL _ CATCH : <nl> case TokenTypes . LITERAL _ SYNCHRONIZED : <nl> @ @ - 205 , 32 + 203 , 30 @ @ public class LeftCurlyCheck <nl> case TokenTypes . LITERAL _ TRY : <nl> case TokenTypes . LITERAL _ FINALLY : <nl> case TokenTypes . LITERAL _ DO : <nl> - case TokenTypes . LITERAL _ IF : <nl> - case TokenTypes . STATIC _ INIT : <nl> + case TokenTypes . LITERAL _ IF : <nl> + case TokenTypes . STATIC _ INIT : <nl> startToken = ast ; <nl> brace = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> break ; <nl> - <nl> - case TokenTypes . LITERAL _ ELSE : <nl> + case TokenTypes . LITERAL _ ELSE : <nl> startToken = ast ; <nl> final DetailAST candidate = ast . getFirstChild ( ) ; <nl> - brace = <nl> - candidate . getType ( ) = = TokenTypes . SLIST <nl> - ? candidate <nl> - : null ; / / silently ignore <nl> + brace = candidate . getType ( ) = = TokenTypes . SLIST <nl> + ? candidate <nl> + : null ; / / silently ignore <nl> break ; <nl> + default : <nl> + / / ATTENTION ! We have default here , but we expect case TokenTypes . METHOD _ DEF , <nl> + / / TokenTypes . LITERAL _ FOR , TokenTypes . LITERAL _ WHILE , TokenTypes . LITERAL _ DO only . <nl> + / / It has been done to improve coverage to 100 % . I couldn ' t replace it with <nl> + / / if - else - if block because code was ugly and didn ' t pass pmd check . <nl> <nl> - case TokenTypes . LITERAL _ SWITCH : <nl> startToken = ast ; <nl> brace = ast . findFirstToken ( TokenTypes . LCURLY ) ; <nl> break ; <nl> - <nl> - default : <nl> - startToken = null ; <nl> - brace = null ; <nl> } <nl> <nl> - if ( brace ! = null & & startToken ! = null ) { <nl> + if ( brace ! = null ) { <nl> verifyBrace ( brace , startToken ) ; <nl> } <nl> } <nl> @ @ - 315 , 8 + 311 , 7 @ @ public class LeftCurlyCheck <nl> <nl> validateEol ( brace , braceLine , prevLineLen ) ; <nl> } <nl> - else if ( getAbstractOption ( ) = = LeftCurlyOption . NLOW <nl> - & & startToken . getLineNo ( ) ! = brace . getLineNo ( ) ) { <nl> + else if ( startToken . getLineNo ( ) ! = brace . getLineNo ( ) ) { <nl> <nl> validateNewLinePosion ( brace , startToken , braceLine , prevLineLen ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java <nl> index 6947d2f . . ed688d4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java <nl> @ @ - 23 , 11 + 23 , 13 @ @ import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ K <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ KEY _ LINE _ NEW ; <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ KEY _ LINE _ PREVIOUS ; <nl> <nl> + import org . junit . Assert ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> private DefaultConfiguration checkConfig ; <nl> @ @ - 194 , 7 + 196 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> " 35 : 34 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , <nl> " 38 : 41 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , <nl> " 44 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , <nl> - " 58 : 32 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , <nl> + " 66 : 32 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputLeftCurlyAnnotations . java " ) , expected ) ; <nl> } <nl> @ @ - 242 , 4 + 244 , 54 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> verify ( checkConfig , getPath ( " InputLeftCurlyEnums . java " ) , expectedWhileFalse ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testGetAcceptableTokens ( ) { <nl> + LeftCurlyCheck check = new LeftCurlyCheck ( ) ; <nl> + int [ ] actual = check . getAcceptableTokens ( ) ; <nl> + int [ ] expected = new int [ ] { <nl> + TokenTypes . INTERFACE _ DEF , <nl> + TokenTypes . CLASS _ DEF , <nl> + TokenTypes . ANNOTATION _ DEF , <nl> + TokenTypes . ENUM _ DEF , <nl> + TokenTypes . CTOR _ DEF , <nl> + TokenTypes . METHOD _ DEF , <nl> + TokenTypes . ENUM _ CONSTANT _ DEF , <nl> + TokenTypes . LITERAL _ WHILE , <nl> + TokenTypes . LITERAL _ TRY , <nl> + TokenTypes . LITERAL _ CATCH , <nl> + TokenTypes . LITERAL _ FINALLY , <nl> + TokenTypes . LITERAL _ SYNCHRONIZED , <nl> + TokenTypes . LITERAL _ SWITCH , <nl> + TokenTypes . LITERAL _ DO , <nl> + TokenTypes . LITERAL _ IF , <nl> + TokenTypes . LITERAL _ ELSE , <nl> + TokenTypes . LITERAL _ FOR , <nl> + TokenTypes . STATIC _ INIT , } ; <nl> + Assert . assertNotNull ( actual ) ; <nl> + Assert . assertArrayEquals ( expected , actual ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFirstLine ( ) throws Exception { <nl> + checkConfig . addAttribute ( " option " , LeftCurlyOption . EOL . toString ( ) ) ; <nl> + checkConfig . addAttribute ( " maxLineLength " , " 100 " ) ; <nl> + final String [ ] expected = { <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputLeftCurlyAllInOneLine . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCoverageIncrease ( ) throws Exception { <nl> + checkConfig . addAttribute ( " option " , LeftCurlyOption . NLOW . toString ( ) ) ; <nl> + checkConfig . addAttribute ( " maxLineLength " , " 10 " ) ; <nl> + final String [ ] expected = { <nl> + " 53 : 14 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , <nl> + " 58 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , <nl> + " 62 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , <nl> + " 67 : 12 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , <nl> + " 72 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputScopeInnerInterfaces2 . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAllInOneLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAllInOneLine . java <nl> new file mode 100644 <nl> index 0000000 . . 11ec610 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAllInOneLine . java <nl> @ @ - 0 , 0 + 1 , 4 @ @ <nl> + package com . puppycrawl . tools . checkstyle ; import java . lang . annotation . ElementType ; import java . lang . annotation . Target ; import java . util . ArrayList ; import java . util . List ; class InputLeftCurlyAllInOneLine { <nl> + <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAnnotations . java <nl> index 03429a0 . . a63b4f8 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAnnotations . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAnnotations . java <nl> @ @ - 52 , 6 + 52 , 14 @ @ class InputLeftCurlyAnnotations2 { <nl> List < String > l = new ArrayList ( ) ; <nl> return " SomeString " ; <nl> } <nl> + <nl> + @ Deprecated <nl> + @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString2 ( ) <nl> + { <nl> + Integer i = this . X ; <nl> + List < String > l = new ArrayList ( ) ; <nl> + return " SomeString " ; <nl> + } <nl> } <nl> <nl> @ Target ( ElementType . TYPE ) <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputScopeInnerInterfaces2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputScopeInnerInterfaces2 . java <nl> new file mode 100644 <nl> index 0000000 . . fbef2f5 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputScopeInnerInterfaces2 . java <nl> @ @ - 0 , 0 + 1 , 74 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + public class InputScopeInnerInterfaces2 { <nl> + / / inner interfaces with different scopes <nl> + <nl> + <nl> + private interface PrivateInterface <nl> + { <nl> + public String CA = " CONST A " ; <nl> + String CB = " CONST b " ; <nl> + <nl> + public void ma ( ) ; <nl> + void mb ( ) ; <nl> + } <nl> + <nl> + interface PackageInnerInterface <nl> + { <nl> + public String CA = " CONST A " ; <nl> + String CB = " CONST b " ; <nl> + <nl> + public void ma ( ) ; <nl> + void mb ( ) ; <nl> + } <nl> + <nl> + protected interface ProtectedInnerInterface <nl> + { <nl> + public String CA = " CONST A " ; <nl> + String CB = " CONST b " ; <nl> + <nl> + public void ma ( ) ; <nl> + void mb ( ) ; <nl> + } <nl> + <nl> + public interface PublicInnerInterface <nl> + { <nl> + public String CA = " CONST A " ; <nl> + String CB = " CONST b " ; <nl> + <nl> + public void ma ( ) ; <nl> + void mb ( ) ; <nl> + } <nl> + <nl> + private <nl> + class <nl> + MyClass1 <nl> + { <nl> + } <nl> + class <nl> + MyClass2 { <nl> + } <nl> + <nl> + private <nl> + interface <nl> + MyInterface1 { <nl> + } <nl> + <nl> + interface <nl> + MyInterface2 { <nl> + } <nl> + <nl> + protected <nl> + enum <nl> + MyEnum { <nl> + } <nl> + <nl> + private <nl> + @ interface <nl> + MyAnnotation { <nl> + } <nl> + }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index ae26f0a . . a3ecd0f 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 271 , 7 + 271 , 7 @ @ 
 < dependency > 
 < groupId > nl . jqno . equalsverifier < / groupId > 
 < artifactId > equalsverifier < / artifactId > 
 - < version > 1 . 7 . 6 < / version > 
 + < version > 1 . 7 . 7 < / version > 
 < scope > test < / scope > 
 < / dependency > 
 < dependency > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java 
 index 39465ab . . 9069f7a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java 
 @ @ - 19 , 6 + 19 , 10 @ @ 
 
 package com . puppycrawl . tools . checkstyle . filters ; 
 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . net . URI ; 
 + import java . net . URL ; 
 import java . util . Objects ; 
 
 import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 @ @ - 26 , 6 + 30 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Filter ; 
 import com . puppycrawl . tools . checkstyle . api . FilterSet ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * < p > 
 @ @ - 33 , 21 + 38 , 32 @ @ import com . puppycrawl . tools . checkstyle . api . FilterSet ; 
 * column , as specified in a suppression file . 
 * < / p > 
 * @ author Rick Giles 
 + * @ author < a href = " mailto : piotr . listkiewicz @ gmail . com " > liscju < / a > 
 * / 
 public class SuppressionFilter 
 extends AutomaticBean 
 implements Filter { 
 + / * * Filename of supression file . * / 
 + private String file ; 
 + / * * Tells whether config file existence is optional . * / 
 + private boolean optional ; 
 / * * Set of individual suppresses . * / 
 private FilterSet filters = new FilterSet ( ) ; 
 
 / * * 
 - * Loads the suppressions for a file . 
 + * Sets name of the supression file . 
 * @ param fileName name of the suppressions file . 
 - * @ throws CheckstyleException if there is an error . 
 * / 
 - public void setFile ( String fileName ) 
 - throws CheckstyleException { 
 - filters = SuppressionsLoader . loadSuppressions ( fileName ) ; 
 + public void setFile ( String fileName ) { 
 + file = fileName ; 
 + } 
 + 
 + / * * 
 + * Sets whether config file existence is optional . 
 + * @ param optional tells if config file existence is optional . 
 + * / 
 + public void setOptional ( boolean optional ) { 
 + this . optional = optional ; 
 } 
 
 @ Override 
 @ @ - 71 , 4 + 87 , 50 @ @ public class SuppressionFilter 
 public int hashCode ( ) { 
 return Objects . hash ( filters ) ; 
 } 
 + 
 + @ Override 
 + protected void finishLocalSetup ( ) throws CheckstyleException { 
 + if ( file ! = null ) { 
 + if ( optional ) { 
 + if ( suppressionSourceExists ( file ) ) { 
 + filters = SuppressionsLoader . loadSuppressions ( file ) ; 
 + } 
 + else { 
 + filters = new FilterSet ( ) ; 
 + } 
 + } 
 + else { 
 + filters = SuppressionsLoader . loadSuppressions ( file ) ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 + * Checks if suppression source with given fileName exists . 
 + * @ param fileName name of the suppressions file . 
 + * @ return true if suppression file exists , otherwise false 
 + * / 
 + private static boolean suppressionSourceExists ( String fileName ) { 
 + boolean suppressionSourceExists = true ; 
 + InputStream sourceInput = null ; 
 + try { 
 + final URI uriByFilename = CommonUtils . getUriByFilename ( fileName ) ; 
 + final URL url = uriByFilename . toURL ( ) ; 
 + sourceInput = url . openStream ( ) ; 
 + } 
 + catch ( CheckstyleException | IOException ignored ) { 
 + suppressionSourceExists = false ; 
 + } 
 + finally { 
 + if ( sourceInput ! = null ) { 
 + try { 
 + sourceInput . close ( ) ; 
 + } 
 + catch ( IOException ignored ) { 
 + suppressionSourceExists = false ; 
 + } 
 + } 
 + } 
 + return suppressionSourceExists ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java 
 index d065f4d . . 0fd06b8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java 
 @ @ - 19 , 14 + 19 , 34 @ @ 
 
 package com . puppycrawl . tools . checkstyle . filters ; 
 
 - import org . junit . Assert ; 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . fail ; 
 + 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . net . URI ; 
 + import java . net . URL ; 
 + 
 import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + 
 + import org . mockito . BDDMockito ; 
 + import org . mockito . Mockito ; 
 + 
 + import org . powermock . api . mockito . PowerMockito ; 
 + import org . powermock . core . classloader . annotations . PrepareForTest ; 
 + import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 + 
 import nl . jqno . equalsverifier . EqualsVerifier ; 
 import nl . jqno . equalsverifier . Warning ; 
 
 + @ RunWith ( PowerMockRunner . class ) 
 + @ PrepareForTest ( { SuppressionFilter . class , CommonUtils . class } ) 
 public class SuppressionFilterTest { 
 @ Test 
 public void testEqualsAndHashCode ( ) { 
 @ @ - 39 , 13 + 59 , 122 @ @ public class SuppressionFilterTest { 
 
 @ Test 
 public void testAccept ( ) throws CheckstyleException { 
 - final SuppressionFilter filter = new SuppressionFilter ( ) ; 
 - filter . setFile ( " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " 
 - + " suppressions _ none . xml " ) ; 
 + final String fileName = " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " 
 + + " suppressions _ none . xml " ; 
 + final boolean optional = false ; 
 + final SuppressionFilter filter = createSupressionFilter ( fileName , optional ) ; 
 
 final AuditEvent ev = new AuditEvent ( this , " ATest . java " , null ) ; 
 
 - Assert . assertTrue ( filter . accept ( ev ) ) ; 
 + assertTrue ( filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAcceptOnNullFile ( ) throws CheckstyleException { 
 + final String fileName = null ; 
 + final boolean optional = false ; 
 + final SuppressionFilter filter = createSupressionFilter ( fileName , optional ) ; 
 + 
 + final AuditEvent ev = new AuditEvent ( this , " AnyJava . java " , null ) ; 
 + 
 + assertTrue ( filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNonExistanceSuppressionFileWithFalseOptional ( ) throws Exception { 
 + final String fileName = " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " 
 + + " non _ existance _ suppresion _ file . xml " ; 
 + try { 
 + final boolean optional = false ; 
 + createSupressionFilter ( fileName , optional ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( CheckstyleException ex ) { 
 + assertEquals ( " Unable to find : " + fileName , ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testExistanceInvalidSuppressionFileWithTrueOptional ( ) throws Exception { 
 + final String fileName = " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " 
 + + " suppressions _ invalid _ file . xml " ; 
 + try { 
 + final boolean optional = true ; 
 + createSupressionFilter ( fileName , optional ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( CheckstyleException ex ) { 
 + assertEquals ( " Unable to parse " + fileName + " - invalid files or checks format " , 
 + ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testExistingSuppressionFileWithTrueOptional ( ) throws Exception { 
 + final String fileName = " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " 
 + + " suppressions _ none . xml " ; 
 + final boolean optional = true ; 
 + final SuppressionFilter filter = createSupressionFilter ( fileName , optional ) ; 
 + 
 + final AuditEvent ev = new AuditEvent ( this , " AnyFile . java " , null ) ; 
 + 
 + assertTrue ( filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testExistingConfigWithTrueOptionalThrowsIoErrorWhileClosing ( ) 
 + throws Exception { 
 + final InputStream inputStream = PowerMockito . mock ( InputStream . class ) ; 
 + Mockito . doThrow ( IOException . class ) . when ( inputStream ) . close ( ) ; 
 + 
 + final URL url = PowerMockito . mock ( URL . class ) ; 
 + BDDMockito . given ( url . openStream ( ) ) . willReturn ( inputStream ) ; 
 + 
 + final URI uri = PowerMockito . mock ( URI . class ) ; 
 + BDDMockito . given ( uri . toURL ( ) ) . willReturn ( url ) ; 
 + 
 + PowerMockito . mockStatic ( CommonUtils . class ) ; 
 + 
 + final String fileName = " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " 
 + + " suppressions _ none . xml " ; 
 + BDDMockito . given ( CommonUtils . getUriByFilename ( fileName ) ) . willReturn ( uri ) ; 
 + 
 + final boolean optional = true ; 
 + final SuppressionFilter filter = createSupressionFilter ( fileName , optional ) ; 
 + final AuditEvent ev = new AuditEvent ( this , " AnyFile . java " , null ) ; 
 + assertTrue ( filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNonExistanceSuppressionFileWithTrueOptional ( ) throws Exception { 
 + final String fileName = " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " 
 + + " non _ existance _ suppresion _ file . xml " ; 
 + final boolean optional = true ; 
 + final SuppressionFilter filter = createSupressionFilter ( fileName , optional ) ; 
 + 
 + final AuditEvent ev = new AuditEvent ( this , " AnyFile . java " , null ) ; 
 + 
 + assertTrue ( filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNonExistanceSuppressionUrlWithTrueOptional ( ) throws Exception { 
 + final String fileName = 
 + " http : / / checkstyle . sourceforge . net / non _ existing _ suppression . xml " ; 
 + final boolean optional = true ; 
 + final SuppressionFilter filter = createSupressionFilter ( fileName , optional ) ; 
 + 
 + final AuditEvent ev = new AuditEvent ( this , " AnyFile . java " , null ) ; 
 + 
 + assertTrue ( filter . accept ( ev ) ) ; 
 } 
 
 + private static SuppressionFilter createSupressionFilter ( String fileName , boolean optional ) 
 + throws CheckstyleException { 
 + final SuppressionFilter suppressionFilter = new SuppressionFilter ( ) ; 
 + suppressionFilter . setFile ( fileName ) ; 
 + suppressionFilter . setOptional ( optional ) ; 
 + suppressionFilter . finishLocalSetup ( ) ; 
 + return suppressionFilter ; 
 + } 
 } 
 diff - - git a / src / xdocs / config _ filters . xml b / src / xdocs / config _ filters . xml 
 index 18563a2 . . aa81722 100644 
 - - - a / src / xdocs / config _ filters . xml 
 + + + b / src / xdocs / config _ filters . xml 
 @ @ - 389 , 7 + 389 , 8 @ @ public static void foo ( ) { 
 audit events for Check errors according to 
 a < a href = " config . html # XML _ Structure " > < em > suppressions XML 
 document < / em > < / a > in a file . If there is no configured 
 - suppressions file , the Filter accepts all audit events . 
 + suppressions file or the optional is set to true and 
 + suppressions file was not found the Filter accepts all audit events . 
 < / p > 
 < / subsection > 
 < subsection name = " Properties " > 
 @ @ - 421 , 6 + 422 , 18 @ @ public static void foo ( ) { 
 < td > < a href = " property _ types . html # string " > string < / a > < / td > 
 < td > < code > none < / code > < / td > 
 < / tr > 
 + < tr > 
 + < td > optional < / td > 
 + < td > 
 + Tells what to do when the file is not existing . If 
 + optional is set to false the file must exist , or else 
 + it ends with error . On the other hand if optional is 
 + true and file is not found , the filter accept all 
 + audit events . 
 + < / td > 
 + < td > < a href = " property _ types . html # boolean " > boolean < / a > < / td > 
 + < td > < code > false < / code > < / td > 
 + < / tr > 
 < / table > 
 < / subsection > 
 < subsection name = " Examples " > 
 @ @ - 433 , 6 + 446 , 7 @ @ public static void foo ( ) { 
 < source > 
 & lt ; module name = & quot ; SuppressionFilter & quot ; & gt ; 
 & lt ; property name = & quot ; file & quot ; value = & quot ; config / suppressions . xml & quot ; / & gt ; 
 + & lt ; property name = & quot ; optional & quot ; value = & quot ; false & quot ; / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 < p >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index e4ba35b . . f4a88f8 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1102 , 7 + 1102 , 6 @ @ 
 < regex > < pattern > . * . checks . UniquePropertiesCheck \ $ . * < / pattern > < branchRate > 75 < / branchRate > < lineRate > 90 < / lineRate > < / regex > 
 
 
 - < regex > < pattern > . * . checks . blocks . LeftCurlyCheck < / pattern > < branchRate > 89 < / branchRate > < lineRate > 96 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . blocks . RightCurlyCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 95 < / lineRate > < / regex > 
 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java 
 index 93ed56f . . 3d5aac6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java 
 @ @ - 176 , 28 + 176 , 26 @ @ public class LeftCurlyCheck 
 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 - final DetailAST startToken ; 
 - final DetailAST brace ; 
 + DetailAST startToken = null ; 
 + DetailAST brace = null ; 
 
 switch ( ast . getType ( ) ) { 
 - case TokenTypes . CTOR _ DEF : 
 - case TokenTypes . METHOD _ DEF : 
 + case TokenTypes . CTOR _ DEF : 
 + case TokenTypes . METHOD _ DEF : 
 startToken = skipAnnotationOnlyLines ( ast ) ; 
 brace = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 break ; 
 - 
 - case TokenTypes . INTERFACE _ DEF : 
 - case TokenTypes . CLASS _ DEF : 
 - case TokenTypes . ANNOTATION _ DEF : 
 - case TokenTypes . ENUM _ DEF : 
 - case TokenTypes . ENUM _ CONSTANT _ DEF : 
 + case TokenTypes . INTERFACE _ DEF : 
 + case TokenTypes . CLASS _ DEF : 
 + case TokenTypes . ANNOTATION _ DEF : 
 + case TokenTypes . ENUM _ DEF : 
 + case TokenTypes . ENUM _ CONSTANT _ DEF : 
 startToken = skipAnnotationOnlyLines ( ast ) ; 
 final DetailAST objBlock = ast . findFirstToken ( TokenTypes . OBJBLOCK ) ; 
 brace = objBlock = = null 
 - ? null 
 - : objBlock . getFirstChild ( ) ; 
 + ? null 
 + : objBlock . getFirstChild ( ) ; 
 break ; 
 - 
 case TokenTypes . LITERAL _ WHILE : 
 case TokenTypes . LITERAL _ CATCH : 
 case TokenTypes . LITERAL _ SYNCHRONIZED : 
 @ @ - 205 , 32 + 203 , 30 @ @ public class LeftCurlyCheck 
 case TokenTypes . LITERAL _ TRY : 
 case TokenTypes . LITERAL _ FINALLY : 
 case TokenTypes . LITERAL _ DO : 
 - case TokenTypes . LITERAL _ IF : 
 - case TokenTypes . STATIC _ INIT : 
 + case TokenTypes . LITERAL _ IF : 
 + case TokenTypes . STATIC _ INIT : 
 startToken = ast ; 
 brace = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 break ; 
 - 
 - case TokenTypes . LITERAL _ ELSE : 
 + case TokenTypes . LITERAL _ ELSE : 
 startToken = ast ; 
 final DetailAST candidate = ast . getFirstChild ( ) ; 
 - brace = 
 - candidate . getType ( ) = = TokenTypes . SLIST 
 - ? candidate 
 - : null ; / / silently ignore 
 + brace = candidate . getType ( ) = = TokenTypes . SLIST 
 + ? candidate 
 + : null ; / / silently ignore 
 break ; 
 + default : 
 + / / ATTENTION ! We have default here , but we expect case TokenTypes . METHOD _ DEF , 
 + / / TokenTypes . LITERAL _ FOR , TokenTypes . LITERAL _ WHILE , TokenTypes . LITERAL _ DO only . 
 + / / It has been done to improve coverage to 100 % . I couldn ' t replace it with 
 + / / if - else - if block because code was ugly and didn ' t pass pmd check . 
 
 - case TokenTypes . LITERAL _ SWITCH : 
 startToken = ast ; 
 brace = ast . findFirstToken ( TokenTypes . LCURLY ) ; 
 break ; 
 - 
 - default : 
 - startToken = null ; 
 - brace = null ; 
 } 
 
 - if ( brace ! = null & & startToken ! = null ) { 
 + if ( brace ! = null ) { 
 verifyBrace ( brace , startToken ) ; 
 } 
 } 
 @ @ - 315 , 8 + 311 , 7 @ @ public class LeftCurlyCheck 
 
 validateEol ( brace , braceLine , prevLineLen ) ; 
 } 
 - else if ( getAbstractOption ( ) = = LeftCurlyOption . NLOW 
 - & & startToken . getLineNo ( ) ! = brace . getLineNo ( ) ) { 
 + else if ( startToken . getLineNo ( ) ! = brace . getLineNo ( ) ) { 
 
 validateNewLinePosion ( brace , startToken , braceLine , prevLineLen ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java 
 index 6947d2f . . ed688d4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java 
 @ @ - 23 , 11 + 23 , 13 @ @ import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ K 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ KEY _ LINE _ NEW ; 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ KEY _ LINE _ PREVIOUS ; 
 
 + import org . junit . Assert ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 private DefaultConfiguration checkConfig ; 
 @ @ - 194 , 7 + 196 , 7 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 " 35 : 34 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , 
 " 38 : 41 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , 
 " 44 : 27 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , 
 - " 58 : 32 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , 
 + " 66 : 32 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputLeftCurlyAnnotations . java " ) , expected ) ; 
 } 
 @ @ - 242 , 4 + 244 , 54 @ @ public class LeftCurlyCheckTest extends BaseCheckTestSupport { 
 } ; 
 verify ( checkConfig , getPath ( " InputLeftCurlyEnums . java " ) , expectedWhileFalse ) ; 
 } 
 + 
 + @ Test 
 + public void testGetAcceptableTokens ( ) { 
 + LeftCurlyCheck check = new LeftCurlyCheck ( ) ; 
 + int [ ] actual = check . getAcceptableTokens ( ) ; 
 + int [ ] expected = new int [ ] { 
 + TokenTypes . INTERFACE _ DEF , 
 + TokenTypes . CLASS _ DEF , 
 + TokenTypes . ANNOTATION _ DEF , 
 + TokenTypes . ENUM _ DEF , 
 + TokenTypes . CTOR _ DEF , 
 + TokenTypes . METHOD _ DEF , 
 + TokenTypes . ENUM _ CONSTANT _ DEF , 
 + TokenTypes . LITERAL _ WHILE , 
 + TokenTypes . LITERAL _ TRY , 
 + TokenTypes . LITERAL _ CATCH , 
 + TokenTypes . LITERAL _ FINALLY , 
 + TokenTypes . LITERAL _ SYNCHRONIZED , 
 + TokenTypes . LITERAL _ SWITCH , 
 + TokenTypes . LITERAL _ DO , 
 + TokenTypes . LITERAL _ IF , 
 + TokenTypes . LITERAL _ ELSE , 
 + TokenTypes . LITERAL _ FOR , 
 + TokenTypes . STATIC _ INIT , } ; 
 + Assert . assertNotNull ( actual ) ; 
 + Assert . assertArrayEquals ( expected , actual ) ; 
 + } 
 + 
 + @ Test 
 + public void testFirstLine ( ) throws Exception { 
 + checkConfig . addAttribute ( " option " , LeftCurlyOption . EOL . toString ( ) ) ; 
 + checkConfig . addAttribute ( " maxLineLength " , " 100 " ) ; 
 + final String [ ] expected = { 
 + } ; 
 + verify ( checkConfig , getPath ( " InputLeftCurlyAllInOneLine . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testCoverageIncrease ( ) throws Exception { 
 + checkConfig . addAttribute ( " option " , LeftCurlyOption . NLOW . toString ( ) ) ; 
 + checkConfig . addAttribute ( " maxLineLength " , " 10 " ) ; 
 + final String [ ] expected = { 
 + " 53 : 14 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , 
 + " 58 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , 
 + " 62 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , 
 + " 67 : 12 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , 
 + " 72 : 18 : " + getCheckMessage ( MSG _ KEY _ LINE _ NEW , " { " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputScopeInnerInterfaces2 . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAllInOneLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAllInOneLine . java 
 new file mode 100644 
 index 0000000 . . 11ec610 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAllInOneLine . java 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + package com . puppycrawl . tools . checkstyle ; import java . lang . annotation . ElementType ; import java . lang . annotation . Target ; import java . util . ArrayList ; import java . util . List ; class InputLeftCurlyAllInOneLine { 
 + 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAnnotations . java 
 index 03429a0 . . a63b4f8 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAnnotations . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputLeftCurlyAnnotations . java 
 @ @ - 52 , 6 + 52 , 14 @ @ class InputLeftCurlyAnnotations2 { 
 List < String > l = new ArrayList ( ) ; 
 return " SomeString " ; 
 } 
 + 
 + @ Deprecated 
 + @ SuppressWarnings ( { " unused " , " unchecked " , " static - access " } ) public String toString2 ( ) 
 + { 
 + Integer i = this . X ; 
 + List < String > l = new ArrayList ( ) ; 
 + return " SomeString " ; 
 + } 
 } 
 
 @ Target ( ElementType . TYPE ) 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputScopeInnerInterfaces2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputScopeInnerInterfaces2 . java 
 new file mode 100644 
 index 0000000 . . fbef2f5 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputScopeInnerInterfaces2 . java 
 @ @ - 0 , 0 + 1 , 74 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + public class InputScopeInnerInterfaces2 { 
 + / / inner interfaces with different scopes 
 + 
 + 
 + private interface PrivateInterface 
 + { 
 + public String CA = " CONST A " ; 
 + String CB = " CONST b " ; 
 + 
 + public void ma ( ) ; 
 + void mb ( ) ; 
 + } 
 + 
 + interface PackageInnerInterface 
 + { 
 + public String CA = " CONST A " ; 
 + String CB = " CONST b " ; 
 + 
 + public void ma ( ) ; 
 + void mb ( ) ; 
 + } 
 + 
 + protected interface ProtectedInnerInterface 
 + { 
 + public String CA = " CONST A " ; 
 + String CB = " CONST b " ; 
 + 
 + public void ma ( ) ; 
 + void mb ( ) ; 
 + } 
 + 
 + public interface PublicInnerInterface 
 + { 
 + public String CA = " CONST A " ; 
 + String CB = " CONST b " ; 
 + 
 + public void ma ( ) ; 
 + void mb ( ) ; 
 + } 
 + 
 + private 
 + class 
 + MyClass1 
 + { 
 + } 
 + class 
 + MyClass2 { 
 + } 
 + 
 + private 
 + interface 
 + MyInterface1 { 
 + } 
 + 
 + interface 
 + MyInterface2 { 
 + } 
 + 
 + protected 
 + enum 
 + MyEnum { 
 + } 
 + 
 + private 
 + @ interface 
 + MyAnnotation { 
 + } 
 + }
