BLEU SCORE: 0.7577395672414201

TEST MSG: Revert " config : update to 8 . 8 . 1 - SNAPSHOT "
GENERATED MSG: config : update to 8 . 8 . 1 - SNAPSHOT

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index d89a660 . . e68202b 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 22 , 7 + 22 , 7 @ @ <nl> <nl> < groupId > com . puppycrawl . tools < / groupId > <nl> < artifactId > checkstyle < / artifactId > <nl> - < version > 8 . 8 . 1 - SNAPSHOT < / version > <nl> + < version > 8 . 9 - SNAPSHOT < / version > <nl> < packaging > jar < / packaging > <nl> <nl> < name > checkstyle < / name >
NEAREST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> index f2e82c9 . . 7ea9c61 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> @ @ - 79 , 12 + 79 , 28 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> <nl> private static final String XML _ NAME = " / google _ checks . xml " ; <nl> <nl> - private static Configuration configuration ; <nl> + private static final Configuration CONFIGURATION ; <nl> <nl> - private static Set < Class < ? > > checkstyleModules ; <nl> + private static final Set < Class < ? > > CHECKSTYLE _ MODULES ; <nl> <nl> private final ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; <nl> <nl> + static { <nl> + try { <nl> + CONFIGURATION = ConfigurationLoader . loadConfiguration ( XML _ NAME , <nl> + new PropertiesExpander ( System . getProperties ( ) ) ) ; <nl> + } <nl> + catch ( CheckstyleException ex ) { <nl> + throw new IllegalStateException ( ex ) ; <nl> + } <nl> + try { <nl> + CHECKSTYLE _ MODULES = CheckUtil . getCheckstyleModules ( ) ; <nl> + } <nl> + catch ( IOException ex ) { <nl> + throw new IllegalStateException ( ex ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Returns test logger . <nl> * @ return logger test logger <nl> @ @ - 94 , 22 + 110 , 6 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> } <nl> <nl> / * * <nl> - * Returns { @ link Configuration } based on Google ' s checks xml - configuration ( google _ checks . xml ) . <nl> - * This implementation uses { @ link ConfigurationLoader } in order to load configuration <nl> - * from xml - file . <nl> - * @ return { @ link Configuration } based on Google ' s checks xml - configuration ( google _ checks . xml ) . <nl> - * @ throws CheckstyleException if exception occurs during configuration loading . <nl> - * / <nl> - protected static Configuration getConfiguration ( ) throws CheckstyleException { <nl> - if ( configuration = = null ) { <nl> - configuration = ConfigurationLoader . loadConfiguration ( XML _ NAME , new PropertiesExpander ( <nl> - System . getProperties ( ) ) ) ; <nl> - } <nl> - <nl> - return configuration ; <nl> - } <nl> - <nl> - / * * <nl> * Creates { @ link DefaultConfiguration } instance for the given module class . <nl> * @ param clazz module class . <nl> * @ return { @ link DefaultConfiguration } instance . <nl> @ @ - 126 , 14 + 126 , 10 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * / <nl> public final Checker createChecker ( Configuration moduleConfig ) <nl> throws Exception { <nl> - if ( checkstyleModules = = null ) { <nl> - checkstyleModules = CheckUtil . getCheckstyleModules ( ) ; <nl> - } <nl> - <nl> final String name = moduleConfig . getName ( ) ; <nl> ModuleCreationOption moduleCreationOption = ModuleCreationOption . IN _ CHECKER ; <nl> <nl> - for ( Class < ? > moduleClass : checkstyleModules ) { <nl> + for ( Class < ? > moduleClass : CHECKSTYLE _ MODULES ) { <nl> if ( moduleClass . getSimpleName ( ) . equals ( name ) <nl> | | moduleClass . getSimpleName ( ) . equals ( name + " Check " ) ) { <nl> if ( ModuleReflectionUtils . isCheckstyleTreeWalkerCheck ( moduleClass ) <nl> @ @ - 322 , 9 + 318 , 8 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * This implementation uses { @ link AbstractModuleTestSupport # getConfiguration ( ) } method inside . <nl> * @ param moduleName module name . <nl> * @ return { @ link Configuration } instance for the given module name . <nl> - * @ throws CheckstyleException if exception occurs during configuration loading . <nl> * / <nl> - protected static Configuration getModuleConfig ( String moduleName ) throws CheckstyleException { <nl> + protected static Configuration getModuleConfig ( String moduleName ) { <nl> return getModuleConfig ( moduleName , null ) ; <nl> } <nl> <nl> @ @ - 336 , 8 + 331 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ return { @ link Configuration } instance for the given module name . <nl> * @ throws CheckstyleException if exception occurs during configuration loading . <nl> * / <nl> - protected static Configuration getModuleConfig ( String moduleName , String moduleId ) <nl> - throws CheckstyleException { <nl> + protected static Configuration getModuleConfig ( String moduleName , String moduleId ) { <nl> final Configuration result ; <nl> final List < Configuration > configs = getModuleConfigs ( moduleName ) ; <nl> if ( configs . size ( ) = = 1 ) { <nl> @ @ - 366 , 12 + 360 , 10 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * This implementation uses { @ link AbstractModuleTestSupport # getConfiguration ( ) } method inside . <nl> * @ param moduleName module name . <nl> * @ return { @ link Configuration } instance for the given module name . <nl> - * @ throws CheckstyleException if exception occurs during configuration loading . <nl> * / <nl> - protected static List < Configuration > getModuleConfigs ( String moduleName ) <nl> - throws CheckstyleException { <nl> + protected static List < Configuration > getModuleConfigs ( String moduleName ) { <nl> final List < Configuration > result = new ArrayList < > ( ) ; <nl> - for ( Configuration currentConfig : getConfiguration ( ) . getChildren ( ) ) { <nl> + for ( Configuration currentConfig : CONFIGURATION . getChildren ( ) ) { <nl> if ( " TreeWalker " . equals ( currentConfig . getName ( ) ) ) { <nl> for ( Configuration moduleConfig : currentConfig . getChildren ( ) ) { <nl> if ( moduleName . equals ( moduleConfig . getName ( ) ) ) {

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index d89a660 . . e68202b 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 22 , 7 + 22 , 7 @ @ 
 
 < groupId > com . puppycrawl . tools < / groupId > 
 < artifactId > checkstyle < / artifactId > 
 - < version > 8 . 8 . 1 - SNAPSHOT < / version > 
 + < version > 8 . 9 - SNAPSHOT < / version > 
 < packaging > jar < / packaging > 
 
 < name > checkstyle < / name >

NEAREST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 index f2e82c9 . . 7ea9c61 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 @ @ - 79 , 12 + 79 , 28 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 
 private static final String XML _ NAME = " / google _ checks . xml " ; 
 
 - private static Configuration configuration ; 
 + private static final Configuration CONFIGURATION ; 
 
 - private static Set < Class < ? > > checkstyleModules ; 
 + private static final Set < Class < ? > > CHECKSTYLE _ MODULES ; 
 
 private final ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; 
 
 + static { 
 + try { 
 + CONFIGURATION = ConfigurationLoader . loadConfiguration ( XML _ NAME , 
 + new PropertiesExpander ( System . getProperties ( ) ) ) ; 
 + } 
 + catch ( CheckstyleException ex ) { 
 + throw new IllegalStateException ( ex ) ; 
 + } 
 + try { 
 + CHECKSTYLE _ MODULES = CheckUtil . getCheckstyleModules ( ) ; 
 + } 
 + catch ( IOException ex ) { 
 + throw new IllegalStateException ( ex ) ; 
 + } 
 + } 
 + 
 / * * 
 * Returns test logger . 
 * @ return logger test logger 
 @ @ - 94 , 22 + 110 , 6 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 } 
 
 / * * 
 - * Returns { @ link Configuration } based on Google ' s checks xml - configuration ( google _ checks . xml ) . 
 - * This implementation uses { @ link ConfigurationLoader } in order to load configuration 
 - * from xml - file . 
 - * @ return { @ link Configuration } based on Google ' s checks xml - configuration ( google _ checks . xml ) . 
 - * @ throws CheckstyleException if exception occurs during configuration loading . 
 - * / 
 - protected static Configuration getConfiguration ( ) throws CheckstyleException { 
 - if ( configuration = = null ) { 
 - configuration = ConfigurationLoader . loadConfiguration ( XML _ NAME , new PropertiesExpander ( 
 - System . getProperties ( ) ) ) ; 
 - } 
 - 
 - return configuration ; 
 - } 
 - 
 - / * * 
 * Creates { @ link DefaultConfiguration } instance for the given module class . 
 * @ param clazz module class . 
 * @ return { @ link DefaultConfiguration } instance . 
 @ @ - 126 , 14 + 126 , 10 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * / 
 public final Checker createChecker ( Configuration moduleConfig ) 
 throws Exception { 
 - if ( checkstyleModules = = null ) { 
 - checkstyleModules = CheckUtil . getCheckstyleModules ( ) ; 
 - } 
 - 
 final String name = moduleConfig . getName ( ) ; 
 ModuleCreationOption moduleCreationOption = ModuleCreationOption . IN _ CHECKER ; 
 
 - for ( Class < ? > moduleClass : checkstyleModules ) { 
 + for ( Class < ? > moduleClass : CHECKSTYLE _ MODULES ) { 
 if ( moduleClass . getSimpleName ( ) . equals ( name ) 
 | | moduleClass . getSimpleName ( ) . equals ( name + " Check " ) ) { 
 if ( ModuleReflectionUtils . isCheckstyleTreeWalkerCheck ( moduleClass ) 
 @ @ - 322 , 9 + 318 , 8 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * This implementation uses { @ link AbstractModuleTestSupport # getConfiguration ( ) } method inside . 
 * @ param moduleName module name . 
 * @ return { @ link Configuration } instance for the given module name . 
 - * @ throws CheckstyleException if exception occurs during configuration loading . 
 * / 
 - protected static Configuration getModuleConfig ( String moduleName ) throws CheckstyleException { 
 + protected static Configuration getModuleConfig ( String moduleName ) { 
 return getModuleConfig ( moduleName , null ) ; 
 } 
 
 @ @ - 336 , 8 + 331 , 7 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ return { @ link Configuration } instance for the given module name . 
 * @ throws CheckstyleException if exception occurs during configuration loading . 
 * / 
 - protected static Configuration getModuleConfig ( String moduleName , String moduleId ) 
 - throws CheckstyleException { 
 + protected static Configuration getModuleConfig ( String moduleName , String moduleId ) { 
 final Configuration result ; 
 final List < Configuration > configs = getModuleConfigs ( moduleName ) ; 
 if ( configs . size ( ) = = 1 ) { 
 @ @ - 366 , 12 + 360 , 10 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * This implementation uses { @ link AbstractModuleTestSupport # getConfiguration ( ) } method inside . 
 * @ param moduleName module name . 
 * @ return { @ link Configuration } instance for the given module name . 
 - * @ throws CheckstyleException if exception occurs during configuration loading . 
 * / 
 - protected static List < Configuration > getModuleConfigs ( String moduleName ) 
 - throws CheckstyleException { 
 + protected static List < Configuration > getModuleConfigs ( String moduleName ) { 
 final List < Configuration > result = new ArrayList < > ( ) ; 
 - for ( Configuration currentConfig : getConfiguration ( ) . getChildren ( ) ) { 
 + for ( Configuration currentConfig : CONFIGURATION . getChildren ( ) ) { 
 if ( " TreeWalker " . equals ( currentConfig . getName ( ) ) ) { 
 for ( Configuration moduleConfig : currentConfig . getChildren ( ) ) { 
 if ( moduleName . equals ( moduleConfig . getName ( ) ) ) {
