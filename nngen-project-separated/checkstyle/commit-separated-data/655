BLEU SCORE: 0.07474875887495341

TEST MSG: Issue # 4749 : delete deprecated : AbstractComplexityCheck , AbstractIllegalCheck , AbstractIllegalMethodCheck , AbstractNestedDepthCheck
GENERATED MSG: Issue # 4677 : remove deprecated AbstractDeclarationCollector , AbstractFormatCheck , AbstractOptionCheck

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 7f2d0d9 . . 0302f14 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1540 , 10 + 1540 , 6 @ @ <nl> < exclude > com / puppycrawl / tools / checkstyle / gui / TreeTableCellRenderer * . class < / exclude > <nl> < exclude > com / puppycrawl / tools / checkstyle / gui / TreeTableModelAdapter * . class < / exclude > <nl> < ! - - deprecated classes - - > <nl> - < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . class < / exclude > <nl> - < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . class < / exclude > <nl> - < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractNestedDepthCheck . class < / exclude > <nl> - < exclude > com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . class < / exclude > <nl> < exclude > com / puppycrawl / tools / checkstyle / checks / naming / AbstractTypeParameterNameCheck . class < / exclude > <nl> < / excludes > <nl> < / instrumentation > <nl> @ @ - 1697 , 12 + 1693 , 6 @ @ <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . checks . coding . * < / param > <nl> < / targetTests > <nl> - < excludedClasses > <nl> - < ! - - deprecated class - - > <nl> - < param > com . puppycrawl . tools . checkstyle . checks . coding . AbstractIllegalCheck < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . checks . coding . AbstractIllegalMethodCheck < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . checks . coding . AbstractNestedDepthCheck < / param > <nl> - < / excludedClasses > <nl> < mutationThreshold > 95 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> @ @ - 1865 , 10 + 1855 , 6 @ @ <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . checks . metrics . * < / param > <nl> < / targetTests > <nl> - < excludedClasses > <nl> - < ! - - deprecated class - - > <nl> - < param > com . puppycrawl . tools . checkstyle . checks . metrics . AbstractComplexityCheck < / param > <nl> - < / excludedClasses > <nl> < mutationThreshold > 91 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java <nl> deleted file mode 100644 <nl> index 456d1c4 . . 0000000 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 76 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - import java . util . HashSet ; <nl> - import java . util . Set ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> - <nl> - / * * <nl> - * Support for checks that look for usage of illegal types . <nl> - * @ deprecated Checkstyle will not support abstract checks anymore . Use <nl> - * { @ link AbstractCheck } instead . <nl> - * @ author Oliver Burn <nl> - * @ noinspection AbstractClassNeverImplemented , ClassOnlyUsedInOnePackage <nl> - * / <nl> - @ Deprecated <nl> - public abstract class AbstractIllegalCheck extends AbstractCheck { <nl> - / * * Illegal class names . * / <nl> - private final Set < String > illegalClassNames = new HashSet < > ( ) ; <nl> - <nl> - / * * <nl> - * Constructs an object . <nl> - * @ param initialNames the initial class names to treat as illegal <nl> - * / <nl> - protected AbstractIllegalCheck ( final String . . . initialNames ) { <nl> - setIllegalClassNames ( initialNames ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Checks if given class is illegal . <nl> - * <nl> - * @ param ident <nl> - * ident to check . <nl> - * @ return true if given ident is illegal . <nl> - * / <nl> - protected final boolean isIllegalClassName ( final String ident ) { <nl> - return illegalClassNames . contains ( ident ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Set the list of illegal classes . <nl> - * <nl> - * @ param classNames <nl> - * array of illegal exception classes <nl> - * / <nl> - public final void setIllegalClassNames ( final String . . . classNames ) { <nl> - illegalClassNames . clear ( ) ; <nl> - for ( final String name : classNames ) { <nl> - illegalClassNames . add ( name ) ; <nl> - final int lastDot = name . lastIndexOf ( ' . ' ) ; <nl> - if ( lastDot > 0 & & lastDot < name . length ( ) - 1 ) { <nl> - final String shortName = name <nl> - . substring ( name . lastIndexOf ( ' . ' ) + 1 ) ; <nl> - illegalClassNames . add ( shortName ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java <nl> deleted file mode 100644 <nl> index 9f4b707 . . 0000000 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 82 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - <nl> - / * * <nl> - * Provide support for checking for a method with a specified name and no <nl> - * arguments . <nl> - * @ deprecated Checkstyle will not support abstract checks anymore . Use <nl> - * { @ link AbstractCheck } instead . <nl> - * @ author Oliver Burn <nl> - * @ noinspection AbstractClassNeverImplemented , ClassOnlyUsedInOnePackage <nl> - * / <nl> - @ Deprecated <nl> - public abstract class AbstractIllegalMethodCheck extends AbstractCheck { <nl> - / * * Name of method to disallow . * / <nl> - private final String methodName ; <nl> - / * * The error key to report with . * / <nl> - private final String errorKey ; <nl> - <nl> - / * * <nl> - * Creates an instance . <nl> - * @ param methodName name of the method to disallow . <nl> - * @ param errorKey the error key to report with . <nl> - * / <nl> - protected AbstractIllegalMethodCheck ( String methodName , String errorKey ) { <nl> - this . methodName = methodName ; <nl> - this . errorKey = errorKey ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getDefaultTokens ( ) { <nl> - return getAcceptableTokens ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getAcceptableTokens ( ) { <nl> - return new int [ ] { TokenTypes . METHOD _ DEF } ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getRequiredTokens ( ) { <nl> - return getAcceptableTokens ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void visitToken ( DetailAST aAST ) { <nl> - final DetailAST mid = aAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> - final String name = mid . getText ( ) ; <nl> - <nl> - if ( methodName . equals ( name ) ) { <nl> - <nl> - final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> - final boolean hasEmptyParamList = <nl> - ! params . branchContains ( TokenTypes . PARAMETER _ DEF ) ; <nl> - <nl> - if ( hasEmptyParamList ) { <nl> - log ( aAST . getLineNo ( ) , errorKey ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractNestedDepthCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractNestedDepthCheck . java <nl> deleted file mode 100644 <nl> index a90f972 . . 0000000 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractNestedDepthCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 81 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - <nl> - / * * <nl> - * Abstract class which provides helpers functionality for nested checks . <nl> - * @ deprecated Checkstyle will not support abstract checks anymore . Use <nl> - * { @ link AbstractCheck } instead . <nl> - * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > <nl> - * @ noinspection AbstractClassNeverImplemented , ClassOnlyUsedInOnePackage <nl> - * / <nl> - @ Deprecated <nl> - public abstract class AbstractNestedDepthCheck extends AbstractCheck { <nl> - / * * Maximum allowed nesting depth . * / <nl> - private int max ; <nl> - / * * Current nesting depth . * / <nl> - private int depth ; <nl> - <nl> - / * * <nl> - * Creates new instance of checks . <nl> - * @ param max default allowed nesting depth . <nl> - * / <nl> - protected AbstractNestedDepthCheck ( int max ) { <nl> - this . max = max ; <nl> - } <nl> - <nl> - @ Override <nl> - public final int [ ] getRequiredTokens ( ) { <nl> - return getDefaultTokens ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void beginTree ( DetailAST rootAST ) { <nl> - depth = 0 ; <nl> - } <nl> - <nl> - / * * <nl> - * Setter for maximum allowed nesting depth . <nl> - * @ param max maximum allowed nesting depth . <nl> - * / <nl> - public final void setMax ( int max ) { <nl> - this . max = max ; <nl> - } <nl> - <nl> - / * * <nl> - * Increasing current nesting depth . <nl> - * @ param ast note which increases nesting . <nl> - * @ param messageId message id for logging error . <nl> - * / <nl> - protected final void nestIn ( DetailAST ast , String messageId ) { <nl> - if ( depth > max ) { <nl> - log ( ast , messageId , depth , max ) ; <nl> - } <nl> - + + depth ; <nl> - } <nl> - <nl> - / * * Decreasing current nesting depth . * / <nl> - protected final void nestOut ( ) { <nl> - - - depth ; <nl> - } <nl> - } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java <nl> deleted file mode 100644 <nl> index fbabb56 . . 0000000 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 189 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> - <nl> - import java . math . BigInteger ; <nl> - import java . util . ArrayDeque ; <nl> - import java . util . Deque ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - <nl> - / * * <nl> - * Base class for checks the calculate complexity based around methods . <nl> - * @ deprecated Checkstyle will not support abstract checks anymore . Use <nl> - * { @ link AbstractCheck } instead . <nl> - * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > <nl> - * @ author Oliver Burn <nl> - * @ noinspection AbstractClassNeverImplemented , ClassOnlyUsedInOnePackage <nl> - * / <nl> - @ Deprecated <nl> - public abstract class AbstractComplexityCheck <nl> - extends AbstractCheck { <nl> - / * * The initial current value . * / <nl> - private static final BigInteger INITIAL _ VALUE = BigInteger . ONE ; <nl> - <nl> - / * * Stack of values - all but the current value . * / <nl> - private final Deque < BigInteger > valueStack = new ArrayDeque < > ( ) ; <nl> - <nl> - / * * The current value . * / <nl> - private BigInteger currentValue = BigInteger . ZERO ; <nl> - <nl> - / * * Threshold to report error for . * / <nl> - private int max ; <nl> - <nl> - / * * <nl> - * Creates an instance . <nl> - * @ param max the threshold of when to report an error <nl> - * / <nl> - protected AbstractComplexityCheck ( int max ) { <nl> - this . max = max ; <nl> - } <nl> - <nl> - / * * <nl> - * Gets the message ID to log violations with . <nl> - * @ return the message ID to log violations with <nl> - * / <nl> - / / - @ cs [ AbbreviationAsWordInName ] Should be removed at 7 . 0 version , <nl> - / / we keep for some time to avoid breaking of compatibility <nl> - protected abstract String getMessageID ( ) ; <nl> - <nl> - / * * <nl> - * Hook called when visiting a token . Will not be called the method <nl> - * definition tokens . <nl> - * <nl> - * @ param ast the token being visited <nl> - * / <nl> - protected abstract void visitTokenHook ( DetailAST ast ) ; <nl> - <nl> - / * * <nl> - * Hook called when leaving a token . Will not be called the method <nl> - * definition tokens . <nl> - * <nl> - * @ param ast the token being left <nl> - * / <nl> - protected abstract void leaveTokenHook ( DetailAST ast ) ; <nl> - <nl> - @ Override <nl> - public final int [ ] getRequiredTokens ( ) { <nl> - return new int [ ] { <nl> - TokenTypes . CTOR _ DEF , <nl> - TokenTypes . METHOD _ DEF , <nl> - TokenTypes . INSTANCE _ INIT , <nl> - TokenTypes . STATIC _ INIT , <nl> - } ; <nl> - } <nl> - <nl> - / * * <nl> - * Set the maximum threshold allowed . <nl> - * <nl> - * @ param max the maximum threshold <nl> - * / <nl> - public final void setMax ( int max ) { <nl> - this . max = max ; <nl> - } <nl> - <nl> - @ Override <nl> - public void visitToken ( DetailAST ast ) { <nl> - switch ( ast . getType ( ) ) { <nl> - case TokenTypes . CTOR _ DEF : <nl> - case TokenTypes . METHOD _ DEF : <nl> - case TokenTypes . INSTANCE _ INIT : <nl> - case TokenTypes . STATIC _ INIT : <nl> - visitMethodDef ( ) ; <nl> - break ; <nl> - default : <nl> - visitTokenHook ( ast ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void leaveToken ( DetailAST ast ) { <nl> - switch ( ast . getType ( ) ) { <nl> - case TokenTypes . CTOR _ DEF : <nl> - case TokenTypes . METHOD _ DEF : <nl> - case TokenTypes . INSTANCE _ INIT : <nl> - case TokenTypes . STATIC _ INIT : <nl> - leaveMethodDef ( ast ) ; <nl> - break ; <nl> - default : <nl> - leaveTokenHook ( ast ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Gets the current value . <nl> - * @ return the current value <nl> - * / <nl> - protected final BigInteger getCurrentValue ( ) { <nl> - return currentValue ; <nl> - } <nl> - <nl> - / * * <nl> - * Set the current value . <nl> - * @ param value the new value <nl> - * / <nl> - protected final void setCurrentValue ( BigInteger value ) { <nl> - currentValue = value ; <nl> - } <nl> - <nl> - / * * <nl> - * Increments the current value by a specified amount . <nl> - * <nl> - * @ param amount the amount to increment by <nl> - * / <nl> - protected final void incrementCurrentValue ( BigInteger amount ) { <nl> - currentValue = currentValue . add ( amount ) ; <nl> - } <nl> - <nl> - / * * Push the current value on the stack . * / <nl> - protected final void pushValue ( ) { <nl> - valueStack . push ( currentValue ) ; <nl> - currentValue = INITIAL _ VALUE ; <nl> - } <nl> - <nl> - / * * <nl> - * Pops a value off the stack and makes it the current value . <nl> - * @ return pop a value off the stack and make it the current value <nl> - * / <nl> - protected final BigInteger popValue ( ) { <nl> - currentValue = valueStack . pop ( ) ; <nl> - return currentValue ; <nl> - } <nl> - <nl> - / * * Process the start of the method definition . * / <nl> - private void visitMethodDef ( ) { <nl> - pushValue ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Process the end of a method definition . <nl> - * <nl> - * @ param ast the token representing the method definition <nl> - * / <nl> - private void leaveMethodDef ( DetailAST ast ) { <nl> - final BigInteger bigIntegerMax = BigInteger . valueOf ( max ) ; <nl> - if ( currentValue . compareTo ( bigIntegerMax ) > 0 ) { <nl> - log ( ast , getMessageID ( ) , currentValue , bigIntegerMax ) ; <nl> - } <nl> - popValue ( ) ; <nl> - } <nl> - }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java <nl> index 0aa30a0 . . aad633b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java <nl> @ @ - 39 , 7 + 39 , 8 @ @ public class BooleanExpressionComplexityCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " metrics " + File . separator + filename ) ; <nl> + + " metrics " + File . separator + " booleanexpressioncomplexity " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexity . java <nl> deleted file mode 100644 <nl> index 3f4b975 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexity . java <nl> + + + / dev / null <nl> @ @ - 1 , 71 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> - <nl> - public class InputBooleanExpressionComplexity { <nl> - private boolean _ a = false ; / / boolean field <nl> - private boolean _ b = false ; <nl> - private boolean _ c = false ; <nl> - private boolean _ d = false ; <nl> - / * public method * / <nl> - public void foo ( ) { <nl> - if ( _ a & & _ b | | _ c ^ _ d ) { <nl> - } <nl> - <nl> - if ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) ) ) { <nl> - } <nl> - <nl> - if ( _ a & & _ b & & _ c ) { <nl> - } <nl> - <nl> - if ( _ a & _ b ) { <nl> - } <nl> - <nl> - if ( _ a ) { <nl> - } <nl> - } <nl> - <nl> - public boolean equals ( Object object ) { <nl> - return ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) | | ( _ a & & _ d ) ) ) ; <nl> - } <nl> - <nl> - public boolean bitwise ( ) <nl> - { <nl> - return ( ( ( _ a & ( _ b & _ c ) ) | ( _ c ^ _ d ) | ( _ a & _ d ) ) ) ; <nl> - } <nl> - <nl> - public void notIgnoredMethodParameters ( ) <nl> - { <nl> - new Settings ( Settings . FALSE & & Settings . FALSE & & Settings . FALSE <nl> - & & Settings . TRUE & & Settings . TRUE ) ; <nl> - new Settings ( Settings . FALSE | | Settings . FALSE | | Settings . FALSE <nl> - | | Settings . TRUE | | Settings . TRUE ) ; <nl> - } <nl> - <nl> - public void ignoredMethodParameters ( ) <nl> - { <nl> - new Settings ( Settings . RESIZABLE | Settings . SCROLLBARS | Settings . LOCATION _ BAR <nl> - | Settings . MENU _ BAR | Settings . TOOL _ BAR ) ; <nl> - new Settings ( Settings . RESIZABLE & Settings . SCROLLBARS & Settings . LOCATION _ BAR <nl> - & Settings . MENU _ BAR & Settings . TOOL _ BAR ) ; <nl> - new Settings ( Settings . RESIZABLE ^ Settings . SCROLLBARS ^ Settings . LOCATION _ BAR <nl> - ^ Settings . MENU _ BAR ^ Settings . TOOL _ BAR ) ; <nl> - } <nl> - <nl> - private class Settings { <nl> - public final static int RESIZABLE = 1 ; <nl> - public final static int SCROLLBARS = 2 ; <nl> - public final static int LOCATION _ BAR = 3 ; <nl> - public final static int MENU _ BAR = 4 ; <nl> - public final static int TOOL _ BAR = 5 ; <nl> - <nl> - public final static boolean TRUE = true ; <nl> - public final static boolean FALSE = false ; <nl> - <nl> - public Settings ( int flag ) <nl> - { <nl> - } <nl> - <nl> - public Settings ( boolean flag ) <nl> - { <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexityNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexityNPE . java <nl> deleted file mode 100644 <nl> index 02e074f . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexityNPE . java <nl> + + + / dev / null <nl> @ @ - 1 , 12 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> - <nl> - public class InputBooleanExpressionComplexityNPE <nl> - { <nl> - static { <nl> - try { <nl> - System . identityHashCode ( " a " ) ; <nl> - } catch ( IllegalStateException | IllegalArgumentException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java <nl> new file mode 100644 <nl> index 0000000 . . 8d5bd7a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java <nl> @ @ - 0 , 0 + 1 , 71 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics . booleanexpressioncomplexity ; <nl> + <nl> + public class InputBooleanExpressionComplexity { <nl> + private boolean _ a = false ; / / boolean field <nl> + private boolean _ b = false ; <nl> + private boolean _ c = false ; <nl> + private boolean _ d = false ; <nl> + / * public method * / <nl> + public void foo ( ) { <nl> + if ( _ a & & _ b | | _ c ^ _ d ) { <nl> + } <nl> + <nl> + if ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) ) ) { <nl> + } <nl> + <nl> + if ( _ a & & _ b & & _ c ) { <nl> + } <nl> + <nl> + if ( _ a & _ b ) { <nl> + } <nl> + <nl> + if ( _ a ) { <nl> + } <nl> + } <nl> + <nl> + public boolean equals ( Object object ) { <nl> + return ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) | | ( _ a & & _ d ) ) ) ; <nl> + } <nl> + <nl> + public boolean bitwise ( ) <nl> + { <nl> + return ( ( ( _ a & ( _ b & _ c ) ) | ( _ c ^ _ d ) | ( _ a & _ d ) ) ) ; <nl> + } <nl> + <nl> + public void notIgnoredMethodParameters ( ) <nl> + { <nl> + new Settings ( Settings . FALSE & & Settings . FALSE & & Settings . FALSE <nl> + & & Settings . TRUE & & Settings . TRUE ) ; <nl> + new Settings ( Settings . FALSE | | Settings . FALSE | | Settings . FALSE <nl> + | | Settings . TRUE | | Settings . TRUE ) ; <nl> + } <nl> + <nl> + public void ignoredMethodParameters ( ) <nl> + { <nl> + new Settings ( Settings . RESIZABLE | Settings . SCROLLBARS | Settings . LOCATION _ BAR <nl> + | Settings . MENU _ BAR | Settings . TOOL _ BAR ) ; <nl> + new Settings ( Settings . RESIZABLE & Settings . SCROLLBARS & Settings . LOCATION _ BAR <nl> + & Settings . MENU _ BAR & Settings . TOOL _ BAR ) ; <nl> + new Settings ( Settings . RESIZABLE ^ Settings . SCROLLBARS ^ Settings . LOCATION _ BAR <nl> + ^ Settings . MENU _ BAR ^ Settings . TOOL _ BAR ) ; <nl> + } <nl> + <nl> + private class Settings { <nl> + public final static int RESIZABLE = 1 ; <nl> + public final static int SCROLLBARS = 2 ; <nl> + public final static int LOCATION _ BAR = 3 ; <nl> + public final static int MENU _ BAR = 4 ; <nl> + public final static int TOOL _ BAR = 5 ; <nl> + <nl> + public final static boolean TRUE = true ; <nl> + public final static boolean FALSE = false ; <nl> + <nl> + public Settings ( int flag ) <nl> + { <nl> + } <nl> + <nl> + public Settings ( boolean flag ) <nl> + { <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexityNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexityNPE . java <nl> new file mode 100644 <nl> index 0000000 . . 4e46938 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexityNPE . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics . booleanexpressioncomplexity ; <nl> + <nl> + public class InputBooleanExpressionComplexityNPE <nl> + { <nl> + static { <nl> + try { <nl> + System . identityHashCode ( " a " ) ; <nl> + } catch ( IllegalStateException | IllegalArgumentException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 7f2d0d9 . . 0302f14 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1540 , 10 + 1540 , 6 @ @ 
 < exclude > com / puppycrawl / tools / checkstyle / gui / TreeTableCellRenderer * . class < / exclude > 
 < exclude > com / puppycrawl / tools / checkstyle / gui / TreeTableModelAdapter * . class < / exclude > 
 < ! - - deprecated classes - - > 
 - < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . class < / exclude > 
 - < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . class < / exclude > 
 - < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractNestedDepthCheck . class < / exclude > 
 - < exclude > com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . class < / exclude > 
 < exclude > com / puppycrawl / tools / checkstyle / checks / naming / AbstractTypeParameterNameCheck . class < / exclude > 
 < / excludes > 
 < / instrumentation > 
 @ @ - 1697 , 12 + 1693 , 6 @ @ 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . checks . coding . * < / param > 
 < / targetTests > 
 - < excludedClasses > 
 - < ! - - deprecated class - - > 
 - < param > com . puppycrawl . tools . checkstyle . checks . coding . AbstractIllegalCheck < / param > 
 - < param > com . puppycrawl . tools . checkstyle . checks . coding . AbstractIllegalMethodCheck < / param > 
 - < param > com . puppycrawl . tools . checkstyle . checks . coding . AbstractNestedDepthCheck < / param > 
 - < / excludedClasses > 
 < mutationThreshold > 95 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 @ @ - 1865 , 10 + 1855 , 6 @ @ 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . checks . metrics . * < / param > 
 < / targetTests > 
 - < excludedClasses > 
 - < ! - - deprecated class - - > 
 - < param > com . puppycrawl . tools . checkstyle . checks . metrics . AbstractComplexityCheck < / param > 
 - < / excludedClasses > 
 < mutationThreshold > 91 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java 
 deleted file mode 100644 
 index 456d1c4 . . 0000000 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java 
 + + + / dev / null 
 @ @ - 1 , 76 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - import java . util . HashSet ; 
 - import java . util . Set ; 
 - 
 - import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 - 
 - / * * 
 - * Support for checks that look for usage of illegal types . 
 - * @ deprecated Checkstyle will not support abstract checks anymore . Use 
 - * { @ link AbstractCheck } instead . 
 - * @ author Oliver Burn 
 - * @ noinspection AbstractClassNeverImplemented , ClassOnlyUsedInOnePackage 
 - * / 
 - @ Deprecated 
 - public abstract class AbstractIllegalCheck extends AbstractCheck { 
 - / * * Illegal class names . * / 
 - private final Set < String > illegalClassNames = new HashSet < > ( ) ; 
 - 
 - / * * 
 - * Constructs an object . 
 - * @ param initialNames the initial class names to treat as illegal 
 - * / 
 - protected AbstractIllegalCheck ( final String . . . initialNames ) { 
 - setIllegalClassNames ( initialNames ) ; 
 - } 
 - 
 - / * * 
 - * Checks if given class is illegal . 
 - * 
 - * @ param ident 
 - * ident to check . 
 - * @ return true if given ident is illegal . 
 - * / 
 - protected final boolean isIllegalClassName ( final String ident ) { 
 - return illegalClassNames . contains ( ident ) ; 
 - } 
 - 
 - / * * 
 - * Set the list of illegal classes . 
 - * 
 - * @ param classNames 
 - * array of illegal exception classes 
 - * / 
 - public final void setIllegalClassNames ( final String . . . classNames ) { 
 - illegalClassNames . clear ( ) ; 
 - for ( final String name : classNames ) { 
 - illegalClassNames . add ( name ) ; 
 - final int lastDot = name . lastIndexOf ( ' . ' ) ; 
 - if ( lastDot > 0 & & lastDot < name . length ( ) - 1 ) { 
 - final String shortName = name 
 - . substring ( name . lastIndexOf ( ' . ' ) + 1 ) ; 
 - illegalClassNames . add ( shortName ) ; 
 - } 
 - } 
 - } 
 - } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java 
 deleted file mode 100644 
 index 9f4b707 . . 0000000 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java 
 + + + / dev / null 
 @ @ - 1 , 82 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - 
 - / * * 
 - * Provide support for checking for a method with a specified name and no 
 - * arguments . 
 - * @ deprecated Checkstyle will not support abstract checks anymore . Use 
 - * { @ link AbstractCheck } instead . 
 - * @ author Oliver Burn 
 - * @ noinspection AbstractClassNeverImplemented , ClassOnlyUsedInOnePackage 
 - * / 
 - @ Deprecated 
 - public abstract class AbstractIllegalMethodCheck extends AbstractCheck { 
 - / * * Name of method to disallow . * / 
 - private final String methodName ; 
 - / * * The error key to report with . * / 
 - private final String errorKey ; 
 - 
 - / * * 
 - * Creates an instance . 
 - * @ param methodName name of the method to disallow . 
 - * @ param errorKey the error key to report with . 
 - * / 
 - protected AbstractIllegalMethodCheck ( String methodName , String errorKey ) { 
 - this . methodName = methodName ; 
 - this . errorKey = errorKey ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getDefaultTokens ( ) { 
 - return getAcceptableTokens ( ) ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getAcceptableTokens ( ) { 
 - return new int [ ] { TokenTypes . METHOD _ DEF } ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getRequiredTokens ( ) { 
 - return getAcceptableTokens ( ) ; 
 - } 
 - 
 - @ Override 
 - public void visitToken ( DetailAST aAST ) { 
 - final DetailAST mid = aAST . findFirstToken ( TokenTypes . IDENT ) ; 
 - final String name = mid . getText ( ) ; 
 - 
 - if ( methodName . equals ( name ) ) { 
 - 
 - final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 - final boolean hasEmptyParamList = 
 - ! params . branchContains ( TokenTypes . PARAMETER _ DEF ) ; 
 - 
 - if ( hasEmptyParamList ) { 
 - log ( aAST . getLineNo ( ) , errorKey ) ; 
 - } 
 - } 
 - } 
 - } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractNestedDepthCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractNestedDepthCheck . java 
 deleted file mode 100644 
 index a90f972 . . 0000000 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractNestedDepthCheck . java 
 + + + / dev / null 
 @ @ - 1 , 81 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - 
 - / * * 
 - * Abstract class which provides helpers functionality for nested checks . 
 - * @ deprecated Checkstyle will not support abstract checks anymore . Use 
 - * { @ link AbstractCheck } instead . 
 - * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > 
 - * @ noinspection AbstractClassNeverImplemented , ClassOnlyUsedInOnePackage 
 - * / 
 - @ Deprecated 
 - public abstract class AbstractNestedDepthCheck extends AbstractCheck { 
 - / * * Maximum allowed nesting depth . * / 
 - private int max ; 
 - / * * Current nesting depth . * / 
 - private int depth ; 
 - 
 - / * * 
 - * Creates new instance of checks . 
 - * @ param max default allowed nesting depth . 
 - * / 
 - protected AbstractNestedDepthCheck ( int max ) { 
 - this . max = max ; 
 - } 
 - 
 - @ Override 
 - public final int [ ] getRequiredTokens ( ) { 
 - return getDefaultTokens ( ) ; 
 - } 
 - 
 - @ Override 
 - public void beginTree ( DetailAST rootAST ) { 
 - depth = 0 ; 
 - } 
 - 
 - / * * 
 - * Setter for maximum allowed nesting depth . 
 - * @ param max maximum allowed nesting depth . 
 - * / 
 - public final void setMax ( int max ) { 
 - this . max = max ; 
 - } 
 - 
 - / * * 
 - * Increasing current nesting depth . 
 - * @ param ast note which increases nesting . 
 - * @ param messageId message id for logging error . 
 - * / 
 - protected final void nestIn ( DetailAST ast , String messageId ) { 
 - if ( depth > max ) { 
 - log ( ast , messageId , depth , max ) ; 
 - } 
 - + + depth ; 
 - } 
 - 
 - / * * Decreasing current nesting depth . * / 
 - protected final void nestOut ( ) { 
 - - - depth ; 
 - } 
 - } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java 
 deleted file mode 100644 
 index fbabb56 . . 0000000 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java 
 + + + / dev / null 
 @ @ - 1 , 189 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 - 
 - import java . math . BigInteger ; 
 - import java . util . ArrayDeque ; 
 - import java . util . Deque ; 
 - 
 - import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - 
 - / * * 
 - * Base class for checks the calculate complexity based around methods . 
 - * @ deprecated Checkstyle will not support abstract checks anymore . Use 
 - * { @ link AbstractCheck } instead . 
 - * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > 
 - * @ author Oliver Burn 
 - * @ noinspection AbstractClassNeverImplemented , ClassOnlyUsedInOnePackage 
 - * / 
 - @ Deprecated 
 - public abstract class AbstractComplexityCheck 
 - extends AbstractCheck { 
 - / * * The initial current value . * / 
 - private static final BigInteger INITIAL _ VALUE = BigInteger . ONE ; 
 - 
 - / * * Stack of values - all but the current value . * / 
 - private final Deque < BigInteger > valueStack = new ArrayDeque < > ( ) ; 
 - 
 - / * * The current value . * / 
 - private BigInteger currentValue = BigInteger . ZERO ; 
 - 
 - / * * Threshold to report error for . * / 
 - private int max ; 
 - 
 - / * * 
 - * Creates an instance . 
 - * @ param max the threshold of when to report an error 
 - * / 
 - protected AbstractComplexityCheck ( int max ) { 
 - this . max = max ; 
 - } 
 - 
 - / * * 
 - * Gets the message ID to log violations with . 
 - * @ return the message ID to log violations with 
 - * / 
 - / / - @ cs [ AbbreviationAsWordInName ] Should be removed at 7 . 0 version , 
 - / / we keep for some time to avoid breaking of compatibility 
 - protected abstract String getMessageID ( ) ; 
 - 
 - / * * 
 - * Hook called when visiting a token . Will not be called the method 
 - * definition tokens . 
 - * 
 - * @ param ast the token being visited 
 - * / 
 - protected abstract void visitTokenHook ( DetailAST ast ) ; 
 - 
 - / * * 
 - * Hook called when leaving a token . Will not be called the method 
 - * definition tokens . 
 - * 
 - * @ param ast the token being left 
 - * / 
 - protected abstract void leaveTokenHook ( DetailAST ast ) ; 
 - 
 - @ Override 
 - public final int [ ] getRequiredTokens ( ) { 
 - return new int [ ] { 
 - TokenTypes . CTOR _ DEF , 
 - TokenTypes . METHOD _ DEF , 
 - TokenTypes . INSTANCE _ INIT , 
 - TokenTypes . STATIC _ INIT , 
 - } ; 
 - } 
 - 
 - / * * 
 - * Set the maximum threshold allowed . 
 - * 
 - * @ param max the maximum threshold 
 - * / 
 - public final void setMax ( int max ) { 
 - this . max = max ; 
 - } 
 - 
 - @ Override 
 - public void visitToken ( DetailAST ast ) { 
 - switch ( ast . getType ( ) ) { 
 - case TokenTypes . CTOR _ DEF : 
 - case TokenTypes . METHOD _ DEF : 
 - case TokenTypes . INSTANCE _ INIT : 
 - case TokenTypes . STATIC _ INIT : 
 - visitMethodDef ( ) ; 
 - break ; 
 - default : 
 - visitTokenHook ( ast ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void leaveToken ( DetailAST ast ) { 
 - switch ( ast . getType ( ) ) { 
 - case TokenTypes . CTOR _ DEF : 
 - case TokenTypes . METHOD _ DEF : 
 - case TokenTypes . INSTANCE _ INIT : 
 - case TokenTypes . STATIC _ INIT : 
 - leaveMethodDef ( ast ) ; 
 - break ; 
 - default : 
 - leaveTokenHook ( ast ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * Gets the current value . 
 - * @ return the current value 
 - * / 
 - protected final BigInteger getCurrentValue ( ) { 
 - return currentValue ; 
 - } 
 - 
 - / * * 
 - * Set the current value . 
 - * @ param value the new value 
 - * / 
 - protected final void setCurrentValue ( BigInteger value ) { 
 - currentValue = value ; 
 - } 
 - 
 - / * * 
 - * Increments the current value by a specified amount . 
 - * 
 - * @ param amount the amount to increment by 
 - * / 
 - protected final void incrementCurrentValue ( BigInteger amount ) { 
 - currentValue = currentValue . add ( amount ) ; 
 - } 
 - 
 - / * * Push the current value on the stack . * / 
 - protected final void pushValue ( ) { 
 - valueStack . push ( currentValue ) ; 
 - currentValue = INITIAL _ VALUE ; 
 - } 
 - 
 - / * * 
 - * Pops a value off the stack and makes it the current value . 
 - * @ return pop a value off the stack and make it the current value 
 - * / 
 - protected final BigInteger popValue ( ) { 
 - currentValue = valueStack . pop ( ) ; 
 - return currentValue ; 
 - } 
 - 
 - / * * Process the start of the method definition . * / 
 - private void visitMethodDef ( ) { 
 - pushValue ( ) ; 
 - } 
 - 
 - / * * 
 - * Process the end of a method definition . 
 - * 
 - * @ param ast the token representing the method definition 
 - * / 
 - private void leaveMethodDef ( DetailAST ast ) { 
 - final BigInteger bigIntegerMax = BigInteger . valueOf ( max ) ; 
 - if ( currentValue . compareTo ( bigIntegerMax ) > 0 ) { 
 - log ( ast , getMessageID ( ) , currentValue , bigIntegerMax ) ; 
 - } 
 - popValue ( ) ; 
 - } 
 - }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java 
 index 0aa30a0 . . aad633b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java 
 @ @ - 39 , 7 + 39 , 8 @ @ public class BooleanExpressionComplexityCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " metrics " + File . separator + filename ) ; 
 + + " metrics " + File . separator + " booleanexpressioncomplexity " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexity . java 
 deleted file mode 100644 
 index 3f4b975 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexity . java 
 + + + / dev / null 
 @ @ - 1 , 71 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 - 
 - public class InputBooleanExpressionComplexity { 
 - private boolean _ a = false ; / / boolean field 
 - private boolean _ b = false ; 
 - private boolean _ c = false ; 
 - private boolean _ d = false ; 
 - / * public method * / 
 - public void foo ( ) { 
 - if ( _ a & & _ b | | _ c ^ _ d ) { 
 - } 
 - 
 - if ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) ) ) { 
 - } 
 - 
 - if ( _ a & & _ b & & _ c ) { 
 - } 
 - 
 - if ( _ a & _ b ) { 
 - } 
 - 
 - if ( _ a ) { 
 - } 
 - } 
 - 
 - public boolean equals ( Object object ) { 
 - return ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) | | ( _ a & & _ d ) ) ) ; 
 - } 
 - 
 - public boolean bitwise ( ) 
 - { 
 - return ( ( ( _ a & ( _ b & _ c ) ) | ( _ c ^ _ d ) | ( _ a & _ d ) ) ) ; 
 - } 
 - 
 - public void notIgnoredMethodParameters ( ) 
 - { 
 - new Settings ( Settings . FALSE & & Settings . FALSE & & Settings . FALSE 
 - & & Settings . TRUE & & Settings . TRUE ) ; 
 - new Settings ( Settings . FALSE | | Settings . FALSE | | Settings . FALSE 
 - | | Settings . TRUE | | Settings . TRUE ) ; 
 - } 
 - 
 - public void ignoredMethodParameters ( ) 
 - { 
 - new Settings ( Settings . RESIZABLE | Settings . SCROLLBARS | Settings . LOCATION _ BAR 
 - | Settings . MENU _ BAR | Settings . TOOL _ BAR ) ; 
 - new Settings ( Settings . RESIZABLE & Settings . SCROLLBARS & Settings . LOCATION _ BAR 
 - & Settings . MENU _ BAR & Settings . TOOL _ BAR ) ; 
 - new Settings ( Settings . RESIZABLE ^ Settings . SCROLLBARS ^ Settings . LOCATION _ BAR 
 - ^ Settings . MENU _ BAR ^ Settings . TOOL _ BAR ) ; 
 - } 
 - 
 - private class Settings { 
 - public final static int RESIZABLE = 1 ; 
 - public final static int SCROLLBARS = 2 ; 
 - public final static int LOCATION _ BAR = 3 ; 
 - public final static int MENU _ BAR = 4 ; 
 - public final static int TOOL _ BAR = 5 ; 
 - 
 - public final static boolean TRUE = true ; 
 - public final static boolean FALSE = false ; 
 - 
 - public Settings ( int flag ) 
 - { 
 - } 
 - 
 - public Settings ( boolean flag ) 
 - { 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexityNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexityNPE . java 
 deleted file mode 100644 
 index 02e074f . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputBooleanExpressionComplexityNPE . java 
 + + + / dev / null 
 @ @ - 1 , 12 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 - 
 - public class InputBooleanExpressionComplexityNPE 
 - { 
 - static { 
 - try { 
 - System . identityHashCode ( " a " ) ; 
 - } catch ( IllegalStateException | IllegalArgumentException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java 
 new file mode 100644 
 index 0000000 . . 8d5bd7a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java 
 @ @ - 0 , 0 + 1 , 71 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics . booleanexpressioncomplexity ; 
 + 
 + public class InputBooleanExpressionComplexity { 
 + private boolean _ a = false ; / / boolean field 
 + private boolean _ b = false ; 
 + private boolean _ c = false ; 
 + private boolean _ d = false ; 
 + / * public method * / 
 + public void foo ( ) { 
 + if ( _ a & & _ b | | _ c ^ _ d ) { 
 + } 
 + 
 + if ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) ) ) { 
 + } 
 + 
 + if ( _ a & & _ b & & _ c ) { 
 + } 
 + 
 + if ( _ a & _ b ) { 
 + } 
 + 
 + if ( _ a ) { 
 + } 
 + } 
 + 
 + public boolean equals ( Object object ) { 
 + return ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) | | ( _ a & & _ d ) ) ) ; 
 + } 
 + 
 + public boolean bitwise ( ) 
 + { 
 + return ( ( ( _ a & ( _ b & _ c ) ) | ( _ c ^ _ d ) | ( _ a & _ d ) ) ) ; 
 + } 
 + 
 + public void notIgnoredMethodParameters ( ) 
 + { 
 + new Settings ( Settings . FALSE & & Settings . FALSE & & Settings . FALSE 
 + & & Settings . TRUE & & Settings . TRUE ) ; 
 + new Settings ( Settings . FALSE | | Settings . FALSE | | Settings . FALSE 
 + | | Settings . TRUE | | Settings . TRUE ) ; 
 + } 
 + 
 + public void ignoredMethodParameters ( ) 
 + { 
 + new Settings ( Settings . RESIZABLE | Settings . SCROLLBARS | Settings . LOCATION _ BAR 
 + | Settings . MENU _ BAR | Settings . TOOL _ BAR ) ; 
 + new Settings ( Settings . RESIZABLE & Settings . SCROLLBARS & Settings . LOCATION _ BAR 
 + & Settings . MENU _ BAR & Settings . TOOL _ BAR ) ; 
 + new Settings ( Settings . RESIZABLE ^ Settings . SCROLLBARS ^ Settings . LOCATION _ BAR 
 + ^ Settings . MENU _ BAR ^ Settings . TOOL _ BAR ) ; 
 + } 
 + 
 + private class Settings { 
 + public final static int RESIZABLE = 1 ; 
 + public final static int SCROLLBARS = 2 ; 
 + public final static int LOCATION _ BAR = 3 ; 
 + public final static int MENU _ BAR = 4 ; 
 + public final static int TOOL _ BAR = 5 ; 
 + 
 + public final static boolean TRUE = true ; 
 + public final static boolean FALSE = false ; 
 + 
 + public Settings ( int flag ) 
 + { 
 + } 
 + 
 + public Settings ( boolean flag ) 
 + { 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexityNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexityNPE . java 
 new file mode 100644 
 index 0000000 . . 4e46938 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexityNPE . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics . booleanexpressioncomplexity ; 
 + 
 + public class InputBooleanExpressionComplexityNPE 
 + { 
 + static { 
 + try { 
 + System . identityHashCode ( " a " ) ; 
 + } catch ( IllegalStateException | IllegalArgumentException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + }
