BLEU SCORE: 0.06837203339116285

TEST MSG: Issue # 5916 : use non - compilable inputs to preserve intersting cases
GENERATED MSG: Coverage has been increased to 100 % in MissingDeprecatedCheck . Issue # 908

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java <nl> index 69779e2 . . 16bc727 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java <nl> @ @ - 190 , 6 + 190 , 21 @ @ public class AnnotationUseStyleCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testCommaAlwaysViolationsNonCompilable ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( AnnotationUseStyleCheck . class ) ; <nl> + checkConfig . addAttribute ( " closingParens " , " ignore " ) ; <nl> + checkConfig . addAttribute ( " elementStyle " , " ignore " ) ; <nl> + checkConfig . addAttribute ( " trailingArrayComma " , " ALWAYS " ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 37 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ TRAILING _ COMMA _ MISSING ) , <nl> + " 6 : 65 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ TRAILING _ COMMA _ MISSING ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , <nl> + getNonCompilablePath ( " InputAnnotationUseStyleNoTrailingComma . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testCommaAlwaysNoViolations ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( AnnotationUseStyleCheck . class ) ; <nl> checkConfig . addAttribute ( " closingParens " , " ignore " ) ; <nl> @ @ - 201 , 6 + 216 , 18 @ @ public class AnnotationUseStyleCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testCommaAlwaysNoViolationsNonCompilable ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( AnnotationUseStyleCheck . class ) ; <nl> + checkConfig . addAttribute ( " closingParens " , " ignore " ) ; <nl> + checkConfig . addAttribute ( " elementStyle " , " ignore " ) ; <nl> + checkConfig . addAttribute ( " trailingArrayComma " , " ALWAYS " ) ; <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , <nl> + getNonCompilablePath ( " InputAnnotationUseStyleWithTrailingComma . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testCommaNeverViolations ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( AnnotationUseStyleCheck . class ) ; <nl> checkConfig . addAttribute ( " closingParens " , " ignore " ) ; <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / annotationusestyle / InputAnnotationUseStyleNoTrailingComma . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / annotationusestyle / InputAnnotationUseStyleNoTrailingComma . java <nl> new file mode 100644 <nl> index 0000000 . . db2cb85 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / annotationusestyle / InputAnnotationUseStyleNoTrailingComma . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . annotation . annotationusestyle ; <nl> + / / this file compiles in jdk but NOT with eclipse <nl> + / / eclipse error " The value for annotation attribute must be a constant expression " <nl> + public class InputAnnotationUseStyleNoTrailingComma <nl> + { <nl> + @ Test2 ( value = { ( false ) ? " " : " foo " } , more = { ( true ) ? " " : " bar " } ) <nl> + <nl> + enum P { <nl> + L , <nl> + Y ; <nl> + } <nl> + <nl> + } <nl> + <nl> + @ interface Test2 { <nl> + String [ ] value ( ) ; <nl> + String [ ] more ( ) default { } ; <nl> + } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / annotationusestyle / InputAnnotationUseStyleWithTrailingComma . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / annotationusestyle / InputAnnotationUseStyleWithTrailingComma . java <nl> new file mode 100644 <nl> index 0000000 . . 08c6e12 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / annotationusestyle / InputAnnotationUseStyleWithTrailingComma . java <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . annotation . annotationusestyle ; <nl> + / / this file compiles in jdk but NOT with eclipse <nl> + / / eclipse error " The value for annotation attribute must be a constant expression " <nl> + public class InputAnnotationUseStyleWithTrailingComma <nl> + { <nl> + @ Test ( value = { ( false ) ? " " : " foo " , } , more = { ( true ) ? " " : " bar " , } ) <nl> + / * * <nl> + <nl> + * / <nl> + enum P { <nl> + L , <nl> + Y ; <nl> + } <nl> + <nl> + } <nl> + <nl> + @ interface Test { <nl> + String [ ] value ( ) ; <nl> + String [ ] more ( ) default { } ; <nl> + }
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 34c7283 . . 83ac50d 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1117 , 7 + 1117 , 6 @ @ <nl> <nl> <nl> < regex > < pattern > . * . checks . blocks . EmptyBlockCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . checks . blocks . EmptyCatchBlockCheck < / pattern > < branchRate > 96 < / branchRate > < lineRate > 98 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . blocks . LeftCurlyCheck < / pattern > < branchRate > 87 < / branchRate > < lineRate > 94 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . blocks . NeedBracesCheck < / pattern > < branchRate > 80 < / branchRate > < lineRate > 97 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . blocks . RightCurlyCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 95 < / lineRate > < / regex > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java <nl> index 5398b09 . . 7316795 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java <nl> @ @ - 19 , 10 + 19 , 12 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> <nl> + import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> * <nl> @ @ - 55 , 7 + 57 , 18 @ @ public class EmptyCatchBlockCheckTest extends BaseCheckTestSupport { <nl> " 195 : Empty catch block . " , <nl> " 214 : Empty catch block . " , <nl> " 230 : Empty catch block . " , <nl> + " 239 : Empty catch block . " , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputEmptyCatchBlockCheck . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testGetAcceptableTokens ( ) { <nl> + EmptyCatchBlockCheck constantNameCheckObj = new EmptyCatchBlockCheck ( ) ; <nl> + int [ ] actual = constantNameCheckObj . getAcceptableTokens ( ) ; <nl> + int [ ] expected = new int [ ] { TokenTypes . LITERAL _ CATCH } ; <nl> + Assert . assertNotNull ( actual ) ; <nl> + Assert . assertArrayEquals ( expected , actual ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java <nl> index 3ebfcd4 . . 7593b9d 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java <nl> @ @ - 232 , 4 + 232 , 13 @ @ public class InputEmptyCatchBlockCheck <nl> / / This is expected <nl> } <nl> } <nl> + <nl> + private void emptyMultilineComent ( ) { <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException e ) { <nl> + / * <nl> + * / <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java 
 index 69779e2 . . 16bc727 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java 
 @ @ - 190 , 6 + 190 , 21 @ @ public class AnnotationUseStyleCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testCommaAlwaysViolationsNonCompilable ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( AnnotationUseStyleCheck . class ) ; 
 + checkConfig . addAttribute ( " closingParens " , " ignore " ) ; 
 + checkConfig . addAttribute ( " elementStyle " , " ignore " ) ; 
 + checkConfig . addAttribute ( " trailingArrayComma " , " ALWAYS " ) ; 
 + final String [ ] expected = { 
 + " 6 : 37 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ TRAILING _ COMMA _ MISSING ) , 
 + " 6 : 65 : " + getCheckMessage ( MSG _ KEY _ ANNOTATION _ TRAILING _ COMMA _ MISSING ) , 
 + } ; 
 + 
 + verify ( checkConfig , 
 + getNonCompilablePath ( " InputAnnotationUseStyleNoTrailingComma . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testCommaAlwaysNoViolations ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( AnnotationUseStyleCheck . class ) ; 
 checkConfig . addAttribute ( " closingParens " , " ignore " ) ; 
 @ @ - 201 , 6 + 216 , 18 @ @ public class AnnotationUseStyleCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testCommaAlwaysNoViolationsNonCompilable ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( AnnotationUseStyleCheck . class ) ; 
 + checkConfig . addAttribute ( " closingParens " , " ignore " ) ; 
 + checkConfig . addAttribute ( " elementStyle " , " ignore " ) ; 
 + checkConfig . addAttribute ( " trailingArrayComma " , " ALWAYS " ) ; 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , 
 + getNonCompilablePath ( " InputAnnotationUseStyleWithTrailingComma . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testCommaNeverViolations ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( AnnotationUseStyleCheck . class ) ; 
 checkConfig . addAttribute ( " closingParens " , " ignore " ) ; 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / annotationusestyle / InputAnnotationUseStyleNoTrailingComma . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / annotationusestyle / InputAnnotationUseStyleNoTrailingComma . java 
 new file mode 100644 
 index 0000000 . . db2cb85 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / annotationusestyle / InputAnnotationUseStyleNoTrailingComma . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . annotation . annotationusestyle ; 
 + / / this file compiles in jdk but NOT with eclipse 
 + / / eclipse error " The value for annotation attribute must be a constant expression " 
 + public class InputAnnotationUseStyleNoTrailingComma 
 + { 
 + @ Test2 ( value = { ( false ) ? " " : " foo " } , more = { ( true ) ? " " : " bar " } ) 
 + 
 + enum P { 
 + L , 
 + Y ; 
 + } 
 + 
 + } 
 + 
 + @ interface Test2 { 
 + String [ ] value ( ) ; 
 + String [ ] more ( ) default { } ; 
 + } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / annotationusestyle / InputAnnotationUseStyleWithTrailingComma . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / annotationusestyle / InputAnnotationUseStyleWithTrailingComma . java 
 new file mode 100644 
 index 0000000 . . 08c6e12 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / annotationusestyle / InputAnnotationUseStyleWithTrailingComma . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . annotation . annotationusestyle ; 
 + / / this file compiles in jdk but NOT with eclipse 
 + / / eclipse error " The value for annotation attribute must be a constant expression " 
 + public class InputAnnotationUseStyleWithTrailingComma 
 + { 
 + @ Test ( value = { ( false ) ? " " : " foo " , } , more = { ( true ) ? " " : " bar " , } ) 
 + / * * 
 + 
 + * / 
 + enum P { 
 + L , 
 + Y ; 
 + } 
 + 
 + } 
 + 
 + @ interface Test { 
 + String [ ] value ( ) ; 
 + String [ ] more ( ) default { } ; 
 + }

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 34c7283 . . 83ac50d 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1117 , 7 + 1117 , 6 @ @ 
 
 
 < regex > < pattern > . * . checks . blocks . EmptyBlockCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 - < regex > < pattern > . * . checks . blocks . EmptyCatchBlockCheck < / pattern > < branchRate > 96 < / branchRate > < lineRate > 98 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . blocks . LeftCurlyCheck < / pattern > < branchRate > 87 < / branchRate > < lineRate > 94 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . blocks . NeedBracesCheck < / pattern > < branchRate > 80 < / branchRate > < lineRate > 97 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . blocks . RightCurlyCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 95 < / lineRate > < / regex > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java 
 index 5398b09 . . 7316795 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java 
 @ @ - 19 , 10 + 19 , 12 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 
 + import org . junit . Assert ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 * 
 @ @ - 55 , 7 + 57 , 18 @ @ public class EmptyCatchBlockCheckTest extends BaseCheckTestSupport { 
 " 195 : Empty catch block . " , 
 " 214 : Empty catch block . " , 
 " 230 : Empty catch block . " , 
 + " 239 : Empty catch block . " , 
 } ; 
 verify ( checkConfig , getPath ( " InputEmptyCatchBlockCheck . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testGetAcceptableTokens ( ) { 
 + EmptyCatchBlockCheck constantNameCheckObj = new EmptyCatchBlockCheck ( ) ; 
 + int [ ] actual = constantNameCheckObj . getAcceptableTokens ( ) ; 
 + int [ ] expected = new int [ ] { TokenTypes . LITERAL _ CATCH } ; 
 + Assert . assertNotNull ( actual ) ; 
 + Assert . assertArrayEquals ( expected , actual ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java 
 index 3ebfcd4 . . 7593b9d 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java 
 @ @ - 232 , 4 + 232 , 13 @ @ public class InputEmptyCatchBlockCheck 
 / / This is expected 
 } 
 } 
 + 
 + private void emptyMultilineComent ( ) { 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException e ) { 
 + / * 
 + * / 
 + } 
 + } 
 }
