BLEU SCORE: 0.026052442434962204

TEST MSG: Issue # 2616 : Add CatchParameterName check for catch blocks parameters
GENERATED MSG: SeparatorWrapCheck # 179 . Covers separators like ' , ' , ' . ' .

TEST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index 672bca6 . . fb27409 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 338 , 6 + 338 , 9 @ @ <nl> < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " / > <nl> < property name = " ignoreOverridden " value = " true " / > <nl> < / module > <nl> + < module name = " CatchParameterName " > <nl> + < property name = " format " value = " ^ ( ex | [ a - z ] [ a - z ] [ a - zA - Z ] + ) $ " / > <nl> + < / module > <nl> < module name = " StaticVariableName " > <nl> < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " / > <nl> < / module > <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java <nl> new file mode 100644 <nl> index 0000000 . . 2ec2691 <nl> - - - / dev / null <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java <nl> @ @ - 0 , 0 + 1 , 55 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . google . checkstyle . test . chapter5naming . rule51identifiernames ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . google . checkstyle . test . base . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + <nl> + public class CatchParameterNameTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String fileName ) throws IOException { <nl> + return super . getPath ( " chapter5naming " + File . separator + " rule51identifiernames " <nl> + + File . separator + fileName ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void catchParameterNameTest ( ) throws Exception { <nl> + final Configuration checkConfig = getCheckConfig ( " CatchParameterName " ) ; <nl> + final String msgKey = " name . invalidPattern " ; <nl> + final String format = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 6 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " e " , format ) , <nl> + " 24 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " t " , format ) , <nl> + " 47 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " iException " , format ) , <nl> + " 50 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " x " , format ) , <nl> + } ; <nl> + <nl> + final String filePath = getPath ( " InputCatchParameterName . java " ) ; <nl> + <nl> + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java <nl> new file mode 100644 <nl> index 0000000 . . acb175a <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java <nl> @ @ - 0 , 0 + 1 , 53 @ @ <nl> + package com . google . checkstyle . test . chapter5naming . rule51identifiernames ; <nl> + <nl> + public class InputCatchParameterName { <nl> + { <nl> + try { <nl> + } catch ( Exception e ) { / / warn <nl> + } <nl> + try { <nl> + } catch ( Exception ex ) { / / ok <nl> + } <nl> + try { <nl> + } catch ( Error | Exception err ) { / / ok <nl> + } <nl> + try { <nl> + } catch ( Exception exception ) { / / ok <nl> + } <nl> + try { <nl> + } catch ( Exception exception1 ) { / / ok <nl> + } <nl> + try { <nl> + } catch ( Exception noWorries ) { / / ok <nl> + } <nl> + try { <nl> + } catch ( Throwable t ) { / / warn <nl> + } <nl> + try { <nl> + throw new InterruptedException ( " interruptedException " ) ; <nl> + } catch ( InterruptedException ie ) { / / ok <nl> + } <nl> + try { <nl> + } catch ( Exception ok ) { / / ok <nl> + / / appropriate to take no action here <nl> + } <nl> + try { <nl> + } catch ( Exception e1 ) { / / ok <nl> + try { <nl> + } catch ( Exception e2 ) { / / ok <nl> + } <nl> + } <nl> + try { <nl> + } catch ( Throwable t1 ) { / / ok <nl> + try { <nl> + } catch ( Throwable t2 ) { / / ok <nl> + } <nl> + } <nl> + try { <nl> + } catch ( Exception iException ) { / / warn <nl> + } <nl> + try { <nl> + } catch ( Exception x ) { / / warn <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / CatchParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / CatchParameterNameCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 5a572b3 <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / CatchParameterNameCheck . java <nl> @ @ - 0 , 0 + 1 , 91 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> + / * * <nl> + * < p > <nl> + * Checks that { @ code catch } parameter names conform to a format specified by the format property . <nl> + * The format is a { @ link java . util . regex . Pattern regular expression } and defaults to <nl> + * < strong > ^ ( e | t | ex | [ a - z ] [ a - z ] [ a - zA - Z ] + ) $ < / strong > . <nl> + * < / p > <nl> + * < p > <nl> + * Default pattern has the following characteristic : <nl> + * < / p > <nl> + * < ul > <nl> + * < li > allows names beginning with two lowercase letters followed by at least one uppercase or <nl> + * lowercase letter < / li > <nl> + * < li > allows { @ code e } abbreviation ( suitable for exceptions end errors ) < / li > <nl> + * < li > allows { @ code ex } abbreviation ( suitable for exceptions ) < / li > <nl> + * < li > allows { @ code t } abbreviation ( suitable for throwables ) < / li > <nl> + * < li > prohibits numbered abbreviations like { @ code e1 } or { @ code t2 } < / li > <nl> + * < li > prohibits one letter prefixes like { @ code pException } < / li > <nl> + * < li > prohibits two letter abbreviations like { @ code ie } or { @ code ee } < / li > <nl> + * < li > prohibits any other characters than letters < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * An example of how to configure the check is : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = " CatchParameterName " / & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * An example of how to configure the check for names that begin with a lower case letter , <nl> + * followed by any letters or digits is : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = " CatchParameterName " & gt ; <nl> + * & lt ; property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * <nl> + * @ author Michal Kordas <nl> + * / <nl> + public class CatchParameterNameCheck extends AbstractNameCheck { <nl> + <nl> + / * * <nl> + * Creates a new { @ code CatchParameterNameCheck } instance . <nl> + * / <nl> + public CatchParameterNameCheck ( ) { <nl> + super ( " ^ ( e | t | ex | [ a - z ] [ a - z ] [ a - zA - Z ] + ) $ " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getDefaultTokens ( ) { <nl> + return getAcceptableTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return new int [ ] { TokenTypes . PARAMETER _ DEF } ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getAcceptableTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected boolean mustCheckName ( DetailAST ast ) { <nl> + return ast . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ CATCH ; <nl> + } <nl> + } <nl> diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml <nl> index 3f21853 . . 4ddc8fc 100644 <nl> - - - a / src / main / resources / google _ checks . xml <nl> + + + b / src / main / resources / google _ checks . xml <nl> @ @ - 112 , 6 + 112 , 11 @ @ <nl> < message key = " name . invalidPattern " <nl> value = " Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > <nl> < / module > <nl> + < module name = " CatchParameterName " > <nl> + < property name = " format " value = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " / > <nl> + < message key = " name . invalidPattern " <nl> + value = " Catch parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > <nl> + < / module > <nl> < module name = " LocalVariableName " > <nl> < property name = " tokens " value = " VARIABLE _ DEF " / > <nl> < property name = " format " value = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " / > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / CatchParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / CatchParameterNameCheckTest . java <nl> new file mode 100644 <nl> index 0000000 . . a04fc9e <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / CatchParameterNameCheckTest . java <nl> @ @ - 0 , 0 + 1 , 102 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MSG _ INVALID _ PATTERN ; <nl> + import static org . junit . Assert . assertArrayEquals ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + import org . apache . commons . lang3 . ArrayUtils ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> + public class CatchParameterNameCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator + " naming " + File . separator + filename ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTokens ( ) { <nl> + final CatchParameterNameCheck catchParameterNameCheck = new CatchParameterNameCheck ( ) ; <nl> + final int [ ] expected = { TokenTypes . PARAMETER _ DEF } ; <nl> + <nl> + assertArrayEquals ( expected , catchParameterNameCheck . getRequiredTokens ( ) ) ; <nl> + assertArrayEquals ( expected , catchParameterNameCheck . getAcceptableTokens ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDefaultConfigurationOnCorrectFile ( ) throws Exception { <nl> + final Configuration checkConfig = createCheckConfig ( CatchParameterNameCheck . class ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDefaultConfigurationOnFileWithViolations ( ) throws Exception { <nl> + final Configuration checkConfig = createCheckConfig ( CatchParameterNameCheck . class ) ; <nl> + final String defaultFormat = " ^ ( e | t | ex | [ a - z ] [ a - z ] [ a - zA - Z ] + ) $ " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 18 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " exception1 " , defaultFormat ) , <nl> + " 28 : 39 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " ie " , defaultFormat ) , <nl> + " 31 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " iException " , defaultFormat ) , <nl> + " 34 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " ok " , defaultFormat ) , <nl> + " 38 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e1 " , defaultFormat ) , <nl> + " 40 : 32 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e2 " , defaultFormat ) , <nl> + " 44 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t1 " , defaultFormat ) , <nl> + " 46 : 32 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t2 " , defaultFormat ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputCatchParameterName . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCustomFormatFromJavadoc ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( CatchParameterNameCheck . class ) ; <nl> + final String format = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " ; <nl> + checkConfig . addAttribute ( " format " , format ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 6 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e " , format ) , <nl> + " 24 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t " , format ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputCatchParameterName . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCustomFormatWithNoAnchors ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( CatchParameterNameCheck . class ) ; <nl> + final String format = " [ a - z ] " ; <nl> + checkConfig . addAttribute ( " format " , format ) ; <nl> + <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputCatchParameterName . java " ) , expected ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputCatchParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputCatchParameterName . java <nl> new file mode 100644 <nl> index 0000000 . . fecd4b4 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputCatchParameterName . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + public class InputCatchParameterName { <nl> + { <nl> + try { <nl> + } catch ( Exception e ) { <nl> + } <nl> + try { <nl> + } catch ( Exception ex ) { <nl> + } <nl> + try { <nl> + } catch ( Error | Exception err ) { <nl> + } <nl> + try { <nl> + } catch ( Exception exception ) { <nl> + } <nl> + try { <nl> + } catch ( Exception exception1 ) { <nl> + } <nl> + try { <nl> + } catch ( Exception noWorries ) { <nl> + } <nl> + try { <nl> + } catch ( Throwable t ) { <nl> + } <nl> + try { <nl> + throw new InterruptedException ( " interruptedException " ) ; <nl> + } catch ( InterruptedException ie ) { / / violation with default config <nl> + } <nl> + try { <nl> + } catch ( Exception iException ) { / / violation with default config <nl> + } <nl> + try { <nl> + } catch ( Exception ok ) { <nl> + / / appropriate to take no action here <nl> + } <nl> + try { <nl> + } catch ( Exception e1 ) { <nl> + try { <nl> + } catch ( Exception e2 ) { <nl> + } <nl> + } <nl> + try { <nl> + } catch ( Throwable t1 ) { <nl> + try { <nl> + } catch ( Throwable t2 ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / checks . xml b / src / xdocs / checks . xml <nl> index 92c530c . . d4a2875 100644 <nl> - - - a / src / xdocs / checks . xml <nl> + + + b / src / xdocs / checks . xml <nl> @ @ - 95 , 6 + 95 , 10 @ @ <nl> < / td > <nl> < / tr > <nl> < tr > <nl> + < td > < a href = " config _ naming . html # CatchParameterName " > CatchParameterName < / a > < / td > <nl> + < td > Checks that catch parameter names conform to a format specified by the format property . < / td > <nl> + < / tr > <nl> + < tr > <nl> < td > < a href = " config _ metrics . html # ClassDataAbstractionCoupling " > ClassDataAbstractionCoupling < / a > < / td > <nl> < td > This metric measures the number of instantiations of other classes within the given class . < / td > <nl> < / tr > <nl> diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml <nl> index 03867b6 . . 334a09b 100644 <nl> - - - a / src / xdocs / config _ naming . xml <nl> + + + b / src / xdocs / config _ naming . xml <nl> @ @ - 230 , 6 + 230 , 90 @ @ <nl> < / subsection > <nl> < / section > <nl> <nl> + < section name = " CatchParameterName " > <nl> + < subsection name = " Description " > <nl> + < p > <nl> + Checks that catch parameter names conform to a format specified by the format property . <nl> + Default pattern has the following characteristic : <nl> + < / p > <nl> + < ul > <nl> + < li > allows names beginning with two lowercase letters followed by at least one uppercase <nl> + or lowercase letter < / li > <nl> + < li > allows < code > e < / code > abbreviation ( suitable for exceptions end errors ) < / li > <nl> + < li > allows < code > ex < / code > abbreviation ( suitable for exceptions ) < / li > <nl> + < li > allows < code > t < / code > abbreviation ( suitable for throwables ) < / li > <nl> + < li > prohibits numbered abbreviations like < code > e1 < / code > or < code > t2 < / code > < / li > <nl> + < li > prohibits one letter prefixes like < code > pException < / code > < / li > <nl> + < li > prohibits two letter abbreviations like < code > ie < / code > or < code > ee < / code > < / li > <nl> + < li > prohibits any other characters than letters < / li > <nl> + < / ul > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Properties " > <nl> + < table > <nl> + < tr > <nl> + < th > name < / th > <nl> + < th > description < / th > <nl> + < th > type < / th > <nl> + < th > default value < / th > <nl> + < / tr > <nl> + < tr > <nl> + < td > format < / td > <nl> + < td > Specifies valid identifiers . < / td > <nl> + < td > <nl> + < a href = " property _ types . html # regexp " > regular expression < / a > <nl> + < / td > <nl> + < td > <nl> + < code > ^ ( e | t | ex | [ a - z ] [ a - z ] [ a - zA - Z ] + ) $ < / code > <nl> + < / td > <nl> + < / tr > <nl> + < / table > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Examples " > <nl> + < p > <nl> + To configure the check : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; CatchParameterName & quot ; / & gt ; <nl> + < / source > <nl> + < p > <nl> + An example of how to configure the check for names that begin with <nl> + a lower case letter , followed by letters and digits is : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = " ParameterName " & gt ; <nl> + & lt ; property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Example of Usage " > <nl> + < ul > <nl> + < li > <nl> + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + CatchParameterName " > <nl> + Google Style <nl> + < / a > <nl> + < / li > <nl> + < li > <nl> + < a href = " https : / / github . com / search ? q = path % 3Aconfig + filename % 3Acheckstyle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + CatchParameterName " > <nl> + Checkstyle Style <nl> + < / a > <nl> + < / li > <nl> + < / ul > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Package " > <nl> + < p > com . puppycrawl . tools . checkstyle . checks . naming < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Parent Module " > <nl> + < p > <nl> + < a href = " config . html # TreeWalker " > TreeWalker < / a > <nl> + < / p > <nl> + < / subsection > <nl> + < / section > <nl> + <nl> < section name = " ClassTypeParameterName " > <nl> < subsection name = " Description " > <nl> < p > Validates identifiers for class type parameters . < / p > <nl> diff - - git a / src / xdocs / google _ style . xml b / src / xdocs / google _ style . xml <nl> index 60244bf . . 519d0c6 100644 <nl> - - - a / src / xdocs / google _ style . xml <nl> + + + b / src / xdocs / google _ style . xml <nl> @ @ - 1144 , 6 + 1144 , 10 @ @ <nl> src = " images / ok _ green . png " <nl> alt = " " / > <nl> < a href = " config _ naming . html # ParameterName " > ParameterName < / a > <nl> + < br / > <nl> + < br / > <nl> + < img src = " images / ok _ green . png " alt = " " / > <nl> + < a href = " config _ naming . html # CatchParameterName " > CatchParameterName < / a > <nl> < / td > <nl> < td > <nl> < a <nl> @ @ - 1151 , 6 + 1155 , 14 @ @ <nl> < br / > <nl> < a <nl> href = " https : / / github . com / checkstyle / checkstyle / blob / master / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java " > test < / a > <nl> + < br / > <nl> + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + CatchParameterName " > <nl> + config <nl> + < / a > <nl> + < br / > <nl> + < a href = " https : / / github . com / checkstyle / checkstyle / blob / master / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java " > <nl> + test <nl> + < / a > <nl> < / td > <nl> < / tr > <nl> < tr >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index aa8ce3e . . 3b9f2f1 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 22 , 7 + 22 , 7 @ @ <nl> < modelVersion > 4 . 0 . 0 < / modelVersion > <nl> < groupId > com . puppycrawl . tools < / groupId > <nl> < artifactId > checkstyle < / artifactId > <nl> - < version > 5 . 7 - SNAPSHOT < / version > <nl> + < version > 5 . 7 < / version > <nl> < packaging > jar < / packaging > <nl> < name > checkstyle < / name > <nl> < url > http : / / checkstyle . sourceforge . net / < / url >

TEST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index 672bca6 . . fb27409 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 338 , 6 + 338 , 9 @ @ 
 < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " / > 
 < property name = " ignoreOverridden " value = " true " / > 
 < / module > 
 + < module name = " CatchParameterName " > 
 + < property name = " format " value = " ^ ( ex | [ a - z ] [ a - z ] [ a - zA - Z ] + ) $ " / > 
 + < / module > 
 < module name = " StaticVariableName " > 
 < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " / > 
 < / module > 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java 
 new file mode 100644 
 index 0000000 . . 2ec2691 
 - - - / dev / null 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java 
 @ @ - 0 , 0 + 1 , 55 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . google . checkstyle . test . chapter5naming . rule51identifiernames ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . google . checkstyle . test . base . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + 
 + public class CatchParameterNameTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String fileName ) throws IOException { 
 + return super . getPath ( " chapter5naming " + File . separator + " rule51identifiernames " 
 + + File . separator + fileName ) ; 
 + } 
 + 
 + @ Test 
 + public void catchParameterNameTest ( ) throws Exception { 
 + final Configuration checkConfig = getCheckConfig ( " CatchParameterName " ) ; 
 + final String msgKey = " name . invalidPattern " ; 
 + final String format = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " ; 
 + 
 + final String [ ] expected = { 
 + " 6 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " e " , format ) , 
 + " 24 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " t " , format ) , 
 + " 47 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " iException " , format ) , 
 + " 50 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " x " , format ) , 
 + } ; 
 + 
 + final String filePath = getPath ( " InputCatchParameterName . java " ) ; 
 + 
 + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java 
 new file mode 100644 
 index 0000000 . . acb175a 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + package com . google . checkstyle . test . chapter5naming . rule51identifiernames ; 
 + 
 + public class InputCatchParameterName { 
 + { 
 + try { 
 + } catch ( Exception e ) { / / warn 
 + } 
 + try { 
 + } catch ( Exception ex ) { / / ok 
 + } 
 + try { 
 + } catch ( Error | Exception err ) { / / ok 
 + } 
 + try { 
 + } catch ( Exception exception ) { / / ok 
 + } 
 + try { 
 + } catch ( Exception exception1 ) { / / ok 
 + } 
 + try { 
 + } catch ( Exception noWorries ) { / / ok 
 + } 
 + try { 
 + } catch ( Throwable t ) { / / warn 
 + } 
 + try { 
 + throw new InterruptedException ( " interruptedException " ) ; 
 + } catch ( InterruptedException ie ) { / / ok 
 + } 
 + try { 
 + } catch ( Exception ok ) { / / ok 
 + / / appropriate to take no action here 
 + } 
 + try { 
 + } catch ( Exception e1 ) { / / ok 
 + try { 
 + } catch ( Exception e2 ) { / / ok 
 + } 
 + } 
 + try { 
 + } catch ( Throwable t1 ) { / / ok 
 + try { 
 + } catch ( Throwable t2 ) { / / ok 
 + } 
 + } 
 + try { 
 + } catch ( Exception iException ) { / / warn 
 + } 
 + try { 
 + } catch ( Exception x ) { / / warn 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / CatchParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / CatchParameterNameCheck . java 
 new file mode 100644 
 index 0000000 . . 5a572b3 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / CatchParameterNameCheck . java 
 @ @ - 0 , 0 + 1 , 91 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 + / * * 
 + * < p > 
 + * Checks that { @ code catch } parameter names conform to a format specified by the format property . 
 + * The format is a { @ link java . util . regex . Pattern regular expression } and defaults to 
 + * < strong > ^ ( e | t | ex | [ a - z ] [ a - z ] [ a - zA - Z ] + ) $ < / strong > . 
 + * < / p > 
 + * < p > 
 + * Default pattern has the following characteristic : 
 + * < / p > 
 + * < ul > 
 + * < li > allows names beginning with two lowercase letters followed by at least one uppercase or 
 + * lowercase letter < / li > 
 + * < li > allows { @ code e } abbreviation ( suitable for exceptions end errors ) < / li > 
 + * < li > allows { @ code ex } abbreviation ( suitable for exceptions ) < / li > 
 + * < li > allows { @ code t } abbreviation ( suitable for throwables ) < / li > 
 + * < li > prohibits numbered abbreviations like { @ code e1 } or { @ code t2 } < / li > 
 + * < li > prohibits one letter prefixes like { @ code pException } < / li > 
 + * < li > prohibits two letter abbreviations like { @ code ie } or { @ code ee } < / li > 
 + * < li > prohibits any other characters than letters < / li > 
 + * < / ul > 
 + * < p > 
 + * An example of how to configure the check is : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = " CatchParameterName " / & gt ; 
 + * < / pre > 
 + * < p > 
 + * An example of how to configure the check for names that begin with a lower case letter , 
 + * followed by any letters or digits is : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = " CatchParameterName " & gt ; 
 + * & lt ; property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * 
 + * @ author Michal Kordas 
 + * / 
 + public class CatchParameterNameCheck extends AbstractNameCheck { 
 + 
 + / * * 
 + * Creates a new { @ code CatchParameterNameCheck } instance . 
 + * / 
 + public CatchParameterNameCheck ( ) { 
 + super ( " ^ ( e | t | ex | [ a - z ] [ a - z ] [ a - zA - Z ] + ) $ " ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getDefaultTokens ( ) { 
 + return getAcceptableTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return new int [ ] { TokenTypes . PARAMETER _ DEF } ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getAcceptableTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + protected boolean mustCheckName ( DetailAST ast ) { 
 + return ast . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ CATCH ; 
 + } 
 + } 
 diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml 
 index 3f21853 . . 4ddc8fc 100644 
 - - - a / src / main / resources / google _ checks . xml 
 + + + b / src / main / resources / google _ checks . xml 
 @ @ - 112 , 6 + 112 , 11 @ @ 
 < message key = " name . invalidPattern " 
 value = " Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > 
 < / module > 
 + < module name = " CatchParameterName " > 
 + < property name = " format " value = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " / > 
 + < message key = " name . invalidPattern " 
 + value = " Catch parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > 
 + < / module > 
 < module name = " LocalVariableName " > 
 < property name = " tokens " value = " VARIABLE _ DEF " / > 
 < property name = " format " value = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " / > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / CatchParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / CatchParameterNameCheckTest . java 
 new file mode 100644 
 index 0000000 . . a04fc9e 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / CatchParameterNameCheckTest . java 
 @ @ - 0 , 0 + 1 , 102 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MSG _ INVALID _ PATTERN ; 
 + import static org . junit . Assert . assertArrayEquals ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + import org . apache . commons . lang3 . ArrayUtils ; 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 + public class CatchParameterNameCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator + " naming " + File . separator + filename ) ; 
 + } 
 + 
 + @ Test 
 + public void testTokens ( ) { 
 + final CatchParameterNameCheck catchParameterNameCheck = new CatchParameterNameCheck ( ) ; 
 + final int [ ] expected = { TokenTypes . PARAMETER _ DEF } ; 
 + 
 + assertArrayEquals ( expected , catchParameterNameCheck . getRequiredTokens ( ) ) ; 
 + assertArrayEquals ( expected , catchParameterNameCheck . getAcceptableTokens ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testDefaultConfigurationOnCorrectFile ( ) throws Exception { 
 + final Configuration checkConfig = createCheckConfig ( CatchParameterNameCheck . class ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testDefaultConfigurationOnFileWithViolations ( ) throws Exception { 
 + final Configuration checkConfig = createCheckConfig ( CatchParameterNameCheck . class ) ; 
 + final String defaultFormat = " ^ ( e | t | ex | [ a - z ] [ a - z ] [ a - zA - Z ] + ) $ " ; 
 + 
 + final String [ ] expected = { 
 + " 18 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " exception1 " , defaultFormat ) , 
 + " 28 : 39 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " ie " , defaultFormat ) , 
 + " 31 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " iException " , defaultFormat ) , 
 + " 34 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " ok " , defaultFormat ) , 
 + " 38 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e1 " , defaultFormat ) , 
 + " 40 : 32 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e2 " , defaultFormat ) , 
 + " 44 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t1 " , defaultFormat ) , 
 + " 46 : 32 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t2 " , defaultFormat ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " InputCatchParameterName . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testCustomFormatFromJavadoc ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( CatchParameterNameCheck . class ) ; 
 + final String format = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " ; 
 + checkConfig . addAttribute ( " format " , format ) ; 
 + 
 + final String [ ] expected = { 
 + " 6 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " e " , format ) , 
 + " 24 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t " , format ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " InputCatchParameterName . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testCustomFormatWithNoAnchors ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( CatchParameterNameCheck . class ) ; 
 + final String format = " [ a - z ] " ; 
 + checkConfig . addAttribute ( " format " , format ) ; 
 + 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , getPath ( " InputCatchParameterName . java " ) , expected ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputCatchParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputCatchParameterName . java 
 new file mode 100644 
 index 0000000 . . fecd4b4 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputCatchParameterName . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + public class InputCatchParameterName { 
 + { 
 + try { 
 + } catch ( Exception e ) { 
 + } 
 + try { 
 + } catch ( Exception ex ) { 
 + } 
 + try { 
 + } catch ( Error | Exception err ) { 
 + } 
 + try { 
 + } catch ( Exception exception ) { 
 + } 
 + try { 
 + } catch ( Exception exception1 ) { 
 + } 
 + try { 
 + } catch ( Exception noWorries ) { 
 + } 
 + try { 
 + } catch ( Throwable t ) { 
 + } 
 + try { 
 + throw new InterruptedException ( " interruptedException " ) ; 
 + } catch ( InterruptedException ie ) { / / violation with default config 
 + } 
 + try { 
 + } catch ( Exception iException ) { / / violation with default config 
 + } 
 + try { 
 + } catch ( Exception ok ) { 
 + / / appropriate to take no action here 
 + } 
 + try { 
 + } catch ( Exception e1 ) { 
 + try { 
 + } catch ( Exception e2 ) { 
 + } 
 + } 
 + try { 
 + } catch ( Throwable t1 ) { 
 + try { 
 + } catch ( Throwable t2 ) { 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / xdocs / checks . xml b / src / xdocs / checks . xml 
 index 92c530c . . d4a2875 100644 
 - - - a / src / xdocs / checks . xml 
 + + + b / src / xdocs / checks . xml 
 @ @ - 95 , 6 + 95 , 10 @ @ 
 < / td > 
 < / tr > 
 < tr > 
 + < td > < a href = " config _ naming . html # CatchParameterName " > CatchParameterName < / a > < / td > 
 + < td > Checks that catch parameter names conform to a format specified by the format property . < / td > 
 + < / tr > 
 + < tr > 
 < td > < a href = " config _ metrics . html # ClassDataAbstractionCoupling " > ClassDataAbstractionCoupling < / a > < / td > 
 < td > This metric measures the number of instantiations of other classes within the given class . < / td > 
 < / tr > 
 diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml 
 index 03867b6 . . 334a09b 100644 
 - - - a / src / xdocs / config _ naming . xml 
 + + + b / src / xdocs / config _ naming . xml 
 @ @ - 230 , 6 + 230 , 90 @ @ 
 < / subsection > 
 < / section > 
 
 + < section name = " CatchParameterName " > 
 + < subsection name = " Description " > 
 + < p > 
 + Checks that catch parameter names conform to a format specified by the format property . 
 + Default pattern has the following characteristic : 
 + < / p > 
 + < ul > 
 + < li > allows names beginning with two lowercase letters followed by at least one uppercase 
 + or lowercase letter < / li > 
 + < li > allows < code > e < / code > abbreviation ( suitable for exceptions end errors ) < / li > 
 + < li > allows < code > ex < / code > abbreviation ( suitable for exceptions ) < / li > 
 + < li > allows < code > t < / code > abbreviation ( suitable for throwables ) < / li > 
 + < li > prohibits numbered abbreviations like < code > e1 < / code > or < code > t2 < / code > < / li > 
 + < li > prohibits one letter prefixes like < code > pException < / code > < / li > 
 + < li > prohibits two letter abbreviations like < code > ie < / code > or < code > ee < / code > < / li > 
 + < li > prohibits any other characters than letters < / li > 
 + < / ul > 
 + < / subsection > 
 + 
 + < subsection name = " Properties " > 
 + < table > 
 + < tr > 
 + < th > name < / th > 
 + < th > description < / th > 
 + < th > type < / th > 
 + < th > default value < / th > 
 + < / tr > 
 + < tr > 
 + < td > format < / td > 
 + < td > Specifies valid identifiers . < / td > 
 + < td > 
 + < a href = " property _ types . html # regexp " > regular expression < / a > 
 + < / td > 
 + < td > 
 + < code > ^ ( e | t | ex | [ a - z ] [ a - z ] [ a - zA - Z ] + ) $ < / code > 
 + < / td > 
 + < / tr > 
 + < / table > 
 + < / subsection > 
 + 
 + < subsection name = " Examples " > 
 + < p > 
 + To configure the check : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; CatchParameterName & quot ; / & gt ; 
 + < / source > 
 + < p > 
 + An example of how to configure the check for names that begin with 
 + a lower case letter , followed by letters and digits is : 
 + < / p > 
 + < source > 
 + & lt ; module name = " ParameterName " & gt ; 
 + & lt ; property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < / subsection > 
 + 
 + < subsection name = " Example of Usage " > 
 + < ul > 
 + < li > 
 + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + CatchParameterName " > 
 + Google Style 
 + < / a > 
 + < / li > 
 + < li > 
 + < a href = " https : / / github . com / search ? q = path % 3Aconfig + filename % 3Acheckstyle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + CatchParameterName " > 
 + Checkstyle Style 
 + < / a > 
 + < / li > 
 + < / ul > 
 + < / subsection > 
 + 
 + < subsection name = " Package " > 
 + < p > com . puppycrawl . tools . checkstyle . checks . naming < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Parent Module " > 
 + < p > 
 + < a href = " config . html # TreeWalker " > TreeWalker < / a > 
 + < / p > 
 + < / subsection > 
 + < / section > 
 + 
 < section name = " ClassTypeParameterName " > 
 < subsection name = " Description " > 
 < p > Validates identifiers for class type parameters . < / p > 
 diff - - git a / src / xdocs / google _ style . xml b / src / xdocs / google _ style . xml 
 index 60244bf . . 519d0c6 100644 
 - - - a / src / xdocs / google _ style . xml 
 + + + b / src / xdocs / google _ style . xml 
 @ @ - 1144 , 6 + 1144 , 10 @ @ 
 src = " images / ok _ green . png " 
 alt = " " / > 
 < a href = " config _ naming . html # ParameterName " > ParameterName < / a > 
 + < br / > 
 + < br / > 
 + < img src = " images / ok _ green . png " alt = " " / > 
 + < a href = " config _ naming . html # CatchParameterName " > CatchParameterName < / a > 
 < / td > 
 < td > 
 < a 
 @ @ - 1151 , 6 + 1155 , 14 @ @ 
 < br / > 
 < a 
 href = " https : / / github . com / checkstyle / checkstyle / blob / master / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java " > test < / a > 
 + < br / > 
 + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + CatchParameterName " > 
 + config 
 + < / a > 
 + < br / > 
 + < a href = " https : / / github . com / checkstyle / checkstyle / blob / master / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java " > 
 + test 
 + < / a > 
 < / td > 
 < / tr > 
 < tr >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index aa8ce3e . . 3b9f2f1 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 22 , 7 + 22 , 7 @ @ 
 < modelVersion > 4 . 0 . 0 < / modelVersion > 
 < groupId > com . puppycrawl . tools < / groupId > 
 < artifactId > checkstyle < / artifactId > 
 - < version > 5 . 7 - SNAPSHOT < / version > 
 + < version > 5 . 7 < / version > 
 < packaging > jar < / packaging > 
 < name > checkstyle < / name > 
 < url > http : / / checkstyle . sourceforge . net / < / url >
