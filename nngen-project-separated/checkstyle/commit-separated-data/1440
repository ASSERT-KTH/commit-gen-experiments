BLEU SCORE: 0.26269098944241576

TEST MSG: Issue # 2530 : Refactoring of CommentsIndentationCheck
GENERATED MSG: Refactoring of CommentsIndentationCheck , issue # 333

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> index 9d6cb6e . . 87bb0e3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> @ @ - 262 , 16 + 262 , 19 @ @ public class CommentsIndentationCheck extends Check { <nl> * @ param comment single line comment . <nl> * @ return the first token of the destributed previous statement of single line comment . <nl> * / <nl> - private static DetailAST getDistributedPreviousStatementOfSingleLineComment ( <nl> - DetailAST comment ) { <nl> - DetailAST previousStatement = comment . getPreviousSibling ( ) ; <nl> - if ( previousStatement . getType ( ) = = TokenTypes . LITERAL _ RETURN <nl> - | | previousStatement . getType ( ) = = TokenTypes . LITERAL _ THROW ) { <nl> - return previousStatement ; <nl> + private static DetailAST getDistributedPreviousStatementOfSingleLineComment ( DetailAST comment ) { <nl> + final DetailAST previousStatement ; <nl> + DetailAST currentToken = comment . getPreviousSibling ( ) ; <nl> + if ( currentToken . getType ( ) = = TokenTypes . LITERAL _ RETURN <nl> + | | currentToken . getType ( ) = = TokenTypes . LITERAL _ THROW ) { <nl> + previousStatement = currentToken ; <nl> } <nl> - previousStatement = previousStatement . getPreviousSibling ( ) ; <nl> - while ( previousStatement . getFirstChild ( ) ! = null ) { <nl> - previousStatement = previousStatement . getFirstChild ( ) ; <nl> + else { <nl> + currentToken = currentToken . getPreviousSibling ( ) ; <nl> + while ( currentToken . getFirstChild ( ) ! = null ) { <nl> + currentToken = currentToken . getFirstChild ( ) ; <nl> + } <nl> + previousStatement = currentToken ; <nl> } <nl> return previousStatement ; <nl> } <nl> @ @ - 493 , 6 + 496 , 7 @ @ public class CommentsIndentationCheck extends Check { <nl> * statement . <nl> * / <nl> private static DetailAST getOneLinePreviousStatementOfSingleLineComment ( DetailAST comment ) { <nl> + DetailAST previousStatement = null ; <nl> final Stack < DetailAST > stack = new Stack < > ( ) ; <nl> DetailAST root = comment . getParent ( ) ; <nl> <nl> @ @ - 501 , 10 + 505 , 11 @ @ public class CommentsIndentationCheck extends Check { <nl> root = stack . pop ( ) ; <nl> } <nl> while ( root ! = null ) { <nl> - final DetailAST previousStatement = <nl> - findPreviousStatementOfSingleLineComment ( comment , root ) ; <nl> + previousStatement = findPreviousStatementOfSingleLineComment ( comment , root ) ; <nl> if ( previousStatement ! = null ) { <nl> - return previousStatement ; <nl> + root = null ; <nl> + stack . clear ( ) ; <nl> + break ; <nl> } <nl> if ( root . getNextSibling ( ) ! = null ) { <nl> stack . push ( root . getNextSibling ( ) ) ; <nl> @ @ - 512 , 7 + 517 , 7 @ @ public class CommentsIndentationCheck extends Check { <nl> root = root . getFirstChild ( ) ; <nl> } <nl> } <nl> - return null ; <nl> + return previousStatement ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> index e2321e9 . . 5e711a6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> @ @ - 221 , 7 + 221 , 7 @ @ public class CommentsIndentationCheck extends Check { <nl> } <nl> else { <nl> result = singleLineComment . getColumnNo ( ) = = nextStmt . getColumnNo ( ) <nl> - | singleLineComment . getColumnNo ( ) = = prevStmt . getColumnNo ( ) ; <nl> + | | singleLineComment . getColumnNo ( ) = = prevStmt . getColumnNo ( ) ; <nl> } <nl> return result ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java <nl> index cb2c118 . . 5a6ba86 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java <nl> @ @ - 50 , 6 + 50 , 7 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { <nl> " 28 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 31 , 16 , 12 ) , <nl> " 50 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 51 , 27 , 23 ) , <nl> " 51 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 53 , 23 , 36 ) , <nl> + " 136 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 137 , 20 , 16 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " comments " + File . separator <nl> + " InputCommentsIndentationCheckSurroundingCode . java " ) , expected ) ; <nl> @ @ - 73 , 6 + 74 , 7 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 13 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 14 , 14 , 12 ) , <nl> " 50 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 51 , 27 , 23 ) , <nl> + " 136 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 137 , 20 , 16 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " comments " + File . separator <nl> + " InputCommentsIndentationCheckSurroundingCode . java " ) , expected ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / comments / InputCommentsIndentationCheckSurroundingCode . java b / src / test / resources / com / puppycrawl / tools / checkstyle / comments / InputCommentsIndentationCheckSurroundingCode . java <nl> index 79d3e42 . . b319aac 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / comments / InputCommentsIndentationCheckSurroundingCode . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / comments / InputCommentsIndentationCheckSurroundingCode . java <nl> @ @ - 126 , 4 + 126 , 17 @ @ public class InputCommentsIndentationCheckSurroundingCode <nl> * some javadoc <nl> * / <nl> private static void l ( ) { } <nl> + <nl> + private void foo32 ( ) { <nl> + if ( true ) { <nl> + switch ( 1 ) { <nl> + case 0 : <nl> + <nl> + case 1 : <nl> + / / initialize b <nl> + int b = 10 ; <nl> + } <nl> + <nl> + } <nl> + } <nl> } / / The Check should not throw NPE here !

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 index 9d6cb6e . . 87bb0e3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 @ @ - 262 , 16 + 262 , 19 @ @ public class CommentsIndentationCheck extends Check { 
 * @ param comment single line comment . 
 * @ return the first token of the destributed previous statement of single line comment . 
 * / 
 - private static DetailAST getDistributedPreviousStatementOfSingleLineComment ( 
 - DetailAST comment ) { 
 - DetailAST previousStatement = comment . getPreviousSibling ( ) ; 
 - if ( previousStatement . getType ( ) = = TokenTypes . LITERAL _ RETURN 
 - | | previousStatement . getType ( ) = = TokenTypes . LITERAL _ THROW ) { 
 - return previousStatement ; 
 + private static DetailAST getDistributedPreviousStatementOfSingleLineComment ( DetailAST comment ) { 
 + final DetailAST previousStatement ; 
 + DetailAST currentToken = comment . getPreviousSibling ( ) ; 
 + if ( currentToken . getType ( ) = = TokenTypes . LITERAL _ RETURN 
 + | | currentToken . getType ( ) = = TokenTypes . LITERAL _ THROW ) { 
 + previousStatement = currentToken ; 
 } 
 - previousStatement = previousStatement . getPreviousSibling ( ) ; 
 - while ( previousStatement . getFirstChild ( ) ! = null ) { 
 - previousStatement = previousStatement . getFirstChild ( ) ; 
 + else { 
 + currentToken = currentToken . getPreviousSibling ( ) ; 
 + while ( currentToken . getFirstChild ( ) ! = null ) { 
 + currentToken = currentToken . getFirstChild ( ) ; 
 + } 
 + previousStatement = currentToken ; 
 } 
 return previousStatement ; 
 } 
 @ @ - 493 , 6 + 496 , 7 @ @ public class CommentsIndentationCheck extends Check { 
 * statement . 
 * / 
 private static DetailAST getOneLinePreviousStatementOfSingleLineComment ( DetailAST comment ) { 
 + DetailAST previousStatement = null ; 
 final Stack < DetailAST > stack = new Stack < > ( ) ; 
 DetailAST root = comment . getParent ( ) ; 
 
 @ @ - 501 , 10 + 505 , 11 @ @ public class CommentsIndentationCheck extends Check { 
 root = stack . pop ( ) ; 
 } 
 while ( root ! = null ) { 
 - final DetailAST previousStatement = 
 - findPreviousStatementOfSingleLineComment ( comment , root ) ; 
 + previousStatement = findPreviousStatementOfSingleLineComment ( comment , root ) ; 
 if ( previousStatement ! = null ) { 
 - return previousStatement ; 
 + root = null ; 
 + stack . clear ( ) ; 
 + break ; 
 } 
 if ( root . getNextSibling ( ) ! = null ) { 
 stack . push ( root . getNextSibling ( ) ) ; 
 @ @ - 512 , 7 + 517 , 7 @ @ public class CommentsIndentationCheck extends Check { 
 root = root . getFirstChild ( ) ; 
 } 
 } 
 - return null ; 
 + return previousStatement ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 index e2321e9 . . 5e711a6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 @ @ - 221 , 7 + 221 , 7 @ @ public class CommentsIndentationCheck extends Check { 
 } 
 else { 
 result = singleLineComment . getColumnNo ( ) = = nextStmt . getColumnNo ( ) 
 - | singleLineComment . getColumnNo ( ) = = prevStmt . getColumnNo ( ) ; 
 + | | singleLineComment . getColumnNo ( ) = = prevStmt . getColumnNo ( ) ; 
 } 
 return result ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java 
 index cb2c118 . . 5a6ba86 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java 
 @ @ - 50 , 6 + 50 , 7 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { 
 " 28 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 31 , 16 , 12 ) , 
 " 50 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 51 , 27 , 23 ) , 
 " 51 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 53 , 23 , 36 ) , 
 + " 136 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 137 , 20 , 16 ) , 
 } ; 
 verify ( checkConfig , getPath ( " comments " + File . separator 
 + " InputCommentsIndentationCheckSurroundingCode . java " ) , expected ) ; 
 @ @ - 73 , 6 + 74 , 7 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 13 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 14 , 14 , 12 ) , 
 " 50 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 51 , 27 , 23 ) , 
 + " 136 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 137 , 20 , 16 ) , 
 } ; 
 verify ( checkConfig , getPath ( " comments " + File . separator 
 + " InputCommentsIndentationCheckSurroundingCode . java " ) , expected ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / comments / InputCommentsIndentationCheckSurroundingCode . java b / src / test / resources / com / puppycrawl / tools / checkstyle / comments / InputCommentsIndentationCheckSurroundingCode . java 
 index 79d3e42 . . b319aac 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / comments / InputCommentsIndentationCheckSurroundingCode . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / comments / InputCommentsIndentationCheckSurroundingCode . java 
 @ @ - 126 , 4 + 126 , 17 @ @ public class InputCommentsIndentationCheckSurroundingCode 
 * some javadoc 
 * / 
 private static void l ( ) { } 
 + 
 + private void foo32 ( ) { 
 + if ( true ) { 
 + switch ( 1 ) { 
 + case 0 : 
 + 
 + case 1 : 
 + / / initialize b 
 + int b = 10 ; 
 + } 
 + 
 + } 
 + } 
 } / / The Check should not throw NPE here !
