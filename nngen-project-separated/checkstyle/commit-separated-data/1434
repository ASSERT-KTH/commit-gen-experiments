BLEU SCORE: 0.041961149062965476

TEST MSG: Issue # 2639 : CSV is removed from allowed abbreviations
GENERATED MSG: removed unused code

TEST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index f496fa3 . . 672bca6 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 320 , 7 + 320 , 7 @ @ <nl> < module name = " AbbreviationAsWordInName " > <nl> < property name = " ignoreFinal " value = " false " / > <nl> < property name = " allowedAbbreviationLength " value = " 1 " / > <nl> - < property name = " allowedAbbreviations " value = " AST , CSV " / > <nl> + < property name = " allowedAbbreviations " value = " AST " / > <nl> < / module > <nl> < module name = " AbstractClassName " / > <nl> < module name = " ClassTypeParameterName " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / CSVFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / CSVFilter . java <nl> deleted file mode 100644 <nl> index 6f983c8 . . 0000000 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / CSVFilter . java <nl> + + + / dev / null <nl> @ @ - 1 , 116 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . filters ; <nl> - <nl> - import java . util . Collections ; <nl> - import java . util . Objects ; <nl> - import java . util . Set ; <nl> - import java . util . StringTokenizer ; <nl> - <nl> - import com . google . common . collect . Sets ; <nl> - <nl> - / * * <nl> - * < p > <nl> - * This filter accepts an integer that matches a CSV value , where <nl> - * each value is an integer or a range of integers . <nl> - * < / p > <nl> - * @ author Rick Giles <nl> - * @ author o _ sukhodolsky <nl> - * / <nl> - class CSVFilter implements IntFilter { <nl> - / * * Filter set . * / <nl> - private final Set < IntFilter > filters = Sets . newHashSet ( ) ; <nl> - <nl> - / * * <nl> - * Constructs a { @ code CSVFilter } from a CSV , Comma - Separated Values , <nl> - * string . Each value is an integer , or a range of integers . A range of <nl> - * integers is of the form integer - integer , such as 1 - 10 . <nl> - * Note : integers must be non - negative . <nl> - * @ param pattern the CSV string . <nl> - * @ throws NumberFormatException if a component substring does not <nl> - * contain a parsable integer . <nl> - * / <nl> - CSVFilter ( String pattern ) { <nl> - final StringTokenizer tokenizer = new StringTokenizer ( pattern , " , " ) ; <nl> - while ( tokenizer . hasMoreTokens ( ) ) { <nl> - final String token = tokenizer . nextToken ( ) . trim ( ) ; <nl> - final int index = token . indexOf ( ' - ' ) ; <nl> - if ( index = = - 1 ) { <nl> - final int matchValue = Integer . parseInt ( token ) ; <nl> - addFilter ( new IntMatchFilter ( matchValue ) ) ; <nl> - } <nl> - else { <nl> - final int lowerBound = <nl> - Integer . parseInt ( token . substring ( 0 , index ) ) ; <nl> - final int upperBound = <nl> - Integer . parseInt ( token . substring ( index + 1 ) ) ; <nl> - addFilter ( new IntRangeFilter ( lowerBound , upperBound ) ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Adds a IntFilter to the set . <nl> - * @ param filter the IntFilter to add . <nl> - * / <nl> - public final void addFilter ( IntFilter filter ) { <nl> - filters . add ( filter ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Returns the IntFilters of the filter set . <nl> - * @ return the IntFilters of the filter set . <nl> - * / <nl> - protected Set < IntFilter > getFilters ( ) { <nl> - return Collections . unmodifiableSet ( filters ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Determines whether an Integer matches a CSV integer value . <nl> - * @ param intValue the Integer to check . <nl> - * @ return true if intValue is an Integer that matches a CSV value . <nl> - * / <nl> - @ Override <nl> - public boolean accept ( int intValue ) { <nl> - for ( IntFilter filter : getFilters ( ) ) { <nl> - if ( filter . accept ( intValue ) ) { <nl> - return true ; <nl> - } <nl> - } <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean equals ( Object object ) { <nl> - if ( this = = object ) { <nl> - return true ; <nl> - } <nl> - if ( object = = null | | getClass ( ) ! = object . getClass ( ) ) { <nl> - return false ; <nl> - } <nl> - final CSVFilter csvFilter = ( CSVFilter ) object ; <nl> - return Objects . equals ( filters , csvFilter . filters ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int hashCode ( ) { <nl> - return Objects . hash ( filters ) ; <nl> - } <nl> - } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / CsvFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / CsvFilter . java <nl> new file mode 100644 <nl> index 0000000 . . c408a20 <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / CsvFilter . java <nl> @ @ - 0 , 0 + 1 , 116 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . filters ; <nl> + <nl> + import java . util . Collections ; <nl> + import java . util . Objects ; <nl> + import java . util . Set ; <nl> + import java . util . StringTokenizer ; <nl> + <nl> + import com . google . common . collect . Sets ; <nl> + <nl> + / * * <nl> + * < p > <nl> + * This filter accepts an integer that matches a CSV value , where <nl> + * each value is an integer or a range of integers . <nl> + * < / p > <nl> + * @ author Rick Giles <nl> + * @ author o _ sukhodolsky <nl> + * / <nl> + class CsvFilter implements IntFilter { <nl> + / * * Filter set . * / <nl> + private final Set < IntFilter > filters = Sets . newHashSet ( ) ; <nl> + <nl> + / * * <nl> + * Constructs a { @ code CsvFilter } from a CSV , Comma - Separated Values , <nl> + * string . Each value is an integer , or a range of integers . A range of <nl> + * integers is of the form integer - integer , such as 1 - 10 . <nl> + * Note : integers must be non - negative . <nl> + * @ param pattern the CSV string . <nl> + * @ throws NumberFormatException if a component substring does not <nl> + * contain a parsable integer . <nl> + * / <nl> + CsvFilter ( String pattern ) { <nl> + final StringTokenizer tokenizer = new StringTokenizer ( pattern , " , " ) ; <nl> + while ( tokenizer . hasMoreTokens ( ) ) { <nl> + final String token = tokenizer . nextToken ( ) . trim ( ) ; <nl> + final int index = token . indexOf ( ' - ' ) ; <nl> + if ( index = = - 1 ) { <nl> + final int matchValue = Integer . parseInt ( token ) ; <nl> + addFilter ( new IntMatchFilter ( matchValue ) ) ; <nl> + } <nl> + else { <nl> + final int lowerBound = <nl> + Integer . parseInt ( token . substring ( 0 , index ) ) ; <nl> + final int upperBound = <nl> + Integer . parseInt ( token . substring ( index + 1 ) ) ; <nl> + addFilter ( new IntRangeFilter ( lowerBound , upperBound ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Adds a IntFilter to the set . <nl> + * @ param filter the IntFilter to add . <nl> + * / <nl> + public final void addFilter ( IntFilter filter ) { <nl> + filters . add ( filter ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the IntFilters of the filter set . <nl> + * @ return the IntFilters of the filter set . <nl> + * / <nl> + protected Set < IntFilter > getFilters ( ) { <nl> + return Collections . unmodifiableSet ( filters ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Determines whether an Integer matches a CSV integer value . <nl> + * @ param intValue the Integer to check . <nl> + * @ return true if intValue is an Integer that matches a CSV value . <nl> + * / <nl> + @ Override <nl> + public boolean accept ( int intValue ) { <nl> + for ( IntFilter filter : getFilters ( ) ) { <nl> + if ( filter . accept ( intValue ) ) { <nl> + return true ; <nl> + } <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object object ) { <nl> + if ( this = = object ) { <nl> + return true ; <nl> + } <nl> + if ( object = = null | | getClass ( ) ! = object . getClass ( ) ) { <nl> + return false ; <nl> + } <nl> + final CsvFilter csvFilter = ( CsvFilter ) object ; <nl> + return Objects . equals ( filters , csvFilter . filters ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) { <nl> + return Objects . hash ( filters ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java <nl> index 7c6cd90 . . b288cff 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java <nl> @ @ - 57 , 16 + 57 , 16 @ @ public class SuppressElement <nl> private String moduleId ; <nl> <nl> / * * Line number filter . * / <nl> - private CSVFilter lineFilter ; <nl> + private CsvFilter lineFilter ; <nl> <nl> / * * CSV for line number filter . * / <nl> - private String linesCSV ; <nl> + private String linesCsv ; <nl> <nl> / * * Column number filter . * / <nl> - private CSVFilter columnFilter ; <nl> + private CsvFilter columnFilter ; <nl> <nl> / * * CSV for column number filter . * / <nl> - private String columnsCSV ; <nl> + private String columnsCsv ; <nl> <nl> / * * <nl> * Constructs a { @ code SuppressElement } for a <nl> @ @ - 102 , 12 + 102 , 12 @ @ public class SuppressElement <nl> * @ param lines CSV values and ranges for line number filtering . <nl> * / <nl> public void setLines ( String lines ) { <nl> - linesCSV = lines ; <nl> + linesCsv = lines ; <nl> if ( lines = = null ) { <nl> lineFilter = null ; <nl> } <nl> else { <nl> - lineFilter = new CSVFilter ( lines ) ; <nl> + lineFilter = new CsvFilter ( lines ) ; <nl> } <nl> } <nl> <nl> @ @ - 117 , 12 + 117 , 12 @ @ public class SuppressElement <nl> * @ param columns CSV values and ranges for column number filtering . <nl> * / <nl> public void setColumns ( String columns ) { <nl> - columnsCSV = columns ; <nl> + columnsCsv = columns ; <nl> if ( columns = = null ) { <nl> columnFilter = null ; <nl> } <nl> else { <nl> - columnFilter = new CSVFilter ( columns ) ; <nl> + columnFilter = new CsvFilter ( columns ) ; <nl> } <nl> } <nl> <nl> @ @ - 154 , 7 + 154 , 7 @ @ public class SuppressElement <nl> <nl> @ Override <nl> public int hashCode ( ) { <nl> - return Objects . hash ( filePattern , checkPattern , moduleId , linesCSV , columnsCSV ) ; <nl> + return Objects . hash ( filePattern , checkPattern , moduleId , linesCsv , columnsCsv ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 169 , 7 + 169 , 7 @ @ public class SuppressElement <nl> return Objects . equals ( filePattern , suppressElement . filePattern ) <nl> & & Objects . equals ( checkPattern , suppressElement . checkPattern ) <nl> & & Objects . equals ( moduleId , suppressElement . moduleId ) <nl> - & & Objects . equals ( linesCSV , suppressElement . linesCSV ) <nl> - & & Objects . equals ( columnsCSV , suppressElement . columnsCSV ) ; <nl> + & & Objects . equals ( linesCsv , suppressElement . linesCsv ) <nl> + & & Objects . equals ( columnsCsv , suppressElement . columnsCsv ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / CSVFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / CSVFilterTest . java <nl> deleted file mode 100644 <nl> index 3e2c25e . . 0000000 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / CSVFilterTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 83 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . filters ; <nl> - <nl> - import static org . junit . Assert . assertFalse ; <nl> - import static org . junit . Assert . assertTrue ; <nl> - <nl> - import org . junit . Test ; <nl> - <nl> - import nl . jqno . equalsverifier . EqualsVerifier ; <nl> - <nl> - / * * Tests CSVFilter . * / <nl> - public class CSVFilterTest { <nl> - @ Test <nl> - public void testDecideSingle ( ) { <nl> - final IntFilter filter = new CSVFilter ( " 0 " ) ; <nl> - assertFalse ( " less than " , filter . accept ( - 1 ) ) ; <nl> - assertTrue ( " equal " , filter . accept ( 0 ) ) ; <nl> - assertFalse ( " greater than " , filter . accept ( 1 ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testDecidePair ( ) { <nl> - final IntFilter filter = new CSVFilter ( " 0 , 2 " ) ; <nl> - assertFalse ( " less than " , filter . accept ( - 1 ) ) ; <nl> - assertTrue ( " equal 0 " , filter . accept ( 0 ) ) ; <nl> - assertFalse ( " greater than " , filter . accept ( 1 ) ) ; <nl> - assertTrue ( " equal 2 " , filter . accept ( 2 ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testDecideRange ( ) { <nl> - final IntFilter filter = new CSVFilter ( " 0 - 2 " ) ; <nl> - assertFalse ( " less than " , filter . accept ( - 1 ) ) ; <nl> - assertTrue ( " equal 0 " , filter . accept ( 0 ) ) ; <nl> - assertTrue ( " equal 1 " , filter . accept ( 1 ) ) ; <nl> - assertTrue ( " equal 2 " , filter . accept ( 2 ) ) ; <nl> - assertFalse ( " greater than " , filter . accept ( 3 ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testDecideEmptyRange ( ) { <nl> - final IntFilter filter = new CSVFilter ( " 2 - 0 " ) ; <nl> - assertFalse ( " less than " , filter . accept ( - 1 ) ) ; <nl> - assertFalse ( " equal 0 " , filter . accept ( 0 ) ) ; <nl> - assertFalse ( " equal 1 " , filter . accept ( 1 ) ) ; <nl> - assertFalse ( " equal 2 " , filter . accept ( 2 ) ) ; <nl> - assertFalse ( " greater than " , filter . accept ( 3 ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testDecideRangePlusValue ( ) { <nl> - final IntFilter filter = new CSVFilter ( " 0 - 2 , 10 " ) ; <nl> - assertFalse ( " less than " , filter . accept ( - 1 ) ) ; <nl> - assertTrue ( " equal 0 " , filter . accept ( 0 ) ) ; <nl> - assertTrue ( " equal 1 " , filter . accept ( 1 ) ) ; <nl> - assertTrue ( " equal 2 " , filter . accept ( 2 ) ) ; <nl> - assertFalse ( " greater than " , filter . accept ( 3 ) ) ; <nl> - assertTrue ( " equal 10 " , filter . accept ( 10 ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testEqualsAndHashCode ( ) { <nl> - EqualsVerifier . forClass ( CSVFilter . class ) . usingGetClass ( ) . verify ( ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java <nl> new file mode 100644 <nl> index 0000000 . . bd991c3 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java <nl> @ @ - 0 , 0 + 1 , 83 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . filters ; <nl> + <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import nl . jqno . equalsverifier . EqualsVerifier ; <nl> + <nl> + / * * Tests CsvFilter . * / <nl> + public class CsvFilterTest { <nl> + @ Test <nl> + public void testDecideSingle ( ) { <nl> + final IntFilter filter = new CsvFilter ( " 0 " ) ; <nl> + assertFalse ( " less than " , filter . accept ( - 1 ) ) ; <nl> + assertTrue ( " equal " , filter . accept ( 0 ) ) ; <nl> + assertFalse ( " greater than " , filter . accept ( 1 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDecidePair ( ) { <nl> + final IntFilter filter = new CsvFilter ( " 0 , 2 " ) ; <nl> + assertFalse ( " less than " , filter . accept ( - 1 ) ) ; <nl> + assertTrue ( " equal 0 " , filter . accept ( 0 ) ) ; <nl> + assertFalse ( " greater than " , filter . accept ( 1 ) ) ; <nl> + assertTrue ( " equal 2 " , filter . accept ( 2 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDecideRange ( ) { <nl> + final IntFilter filter = new CsvFilter ( " 0 - 2 " ) ; <nl> + assertFalse ( " less than " , filter . accept ( - 1 ) ) ; <nl> + assertTrue ( " equal 0 " , filter . accept ( 0 ) ) ; <nl> + assertTrue ( " equal 1 " , filter . accept ( 1 ) ) ; <nl> + assertTrue ( " equal 2 " , filter . accept ( 2 ) ) ; <nl> + assertFalse ( " greater than " , filter . accept ( 3 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDecideEmptyRange ( ) { <nl> + final IntFilter filter = new CsvFilter ( " 2 - 0 " ) ; <nl> + assertFalse ( " less than " , filter . accept ( - 1 ) ) ; <nl> + assertFalse ( " equal 0 " , filter . accept ( 0 ) ) ; <nl> + assertFalse ( " equal 1 " , filter . accept ( 1 ) ) ; <nl> + assertFalse ( " equal 2 " , filter . accept ( 2 ) ) ; <nl> + assertFalse ( " greater than " , filter . accept ( 3 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDecideRangePlusValue ( ) { <nl> + final IntFilter filter = new CsvFilter ( " 0 - 2 , 10 " ) ; <nl> + assertFalse ( " less than " , filter . accept ( - 1 ) ) ; <nl> + assertTrue ( " equal 0 " , filter . accept ( 0 ) ) ; <nl> + assertTrue ( " equal 1 " , filter . accept ( 1 ) ) ; <nl> + assertTrue ( " equal 2 " , filter . accept ( 2 ) ) ; <nl> + assertFalse ( " greater than " , filter . accept ( 3 ) ) ; <nl> + assertTrue ( " equal 10 " , filter . accept ( 10 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testEqualsAndHashCode ( ) { <nl> + EqualsVerifier . forClass ( CsvFilter . class ) . usingGetClass ( ) . verify ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java <nl> index 07c40e6 . . afebf11 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java <nl> @ @ - 32 , 11 + 32 , 11 @ @ import nl . jqno . equalsverifier . EqualsVerifier ; <nl> <nl> / * * Tests SuppressElementFilter . * / <nl> public class FilterSetTest { <nl> - private CSVFilter filter ; <nl> + private CsvFilter filter ; <nl> <nl> @ Before <nl> public void setUp ( ) { <nl> - filter = new CSVFilter ( " " ) ; <nl> + filter = new CsvFilter ( " " ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> index 6187159 . . 1886b89 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> @ @ - 83 , 17 + 83 , 21 @ @ public class DefaultLogger <nl> * * / <nl> public void addError ( AuditEvent aEvt ) <nl> { <nl> + String fileName = aEvt . getFileName ( ) ; <nl> + String message = aEvt . getMessage ( ) ; <nl> + <nl> + / / avoid StringBuffer . expandCapacity <nl> + int bufLen = fileName . length ( ) + message . length ( ) + 12 ; <nl> + <nl> + StringBuffer sb = new StringBuffer ( bufLen ) ; <nl> + <nl> + sb . append ( fileName ) ; <nl> + sb . append ( ' : ' ) . append ( aEvt . getLine ( ) ) ; <nl> if ( aEvt . getColumn ( ) > 0 ) { <nl> - mErrorWriter . println ( aEvt . getFileName ( ) <nl> - + " : " + aEvt . getLine ( ) <nl> - + " : " + aEvt . getColumn ( ) <nl> - + " : " + aEvt . getMessage ( ) ) ; <nl> - } <nl> - else { <nl> - mErrorWriter . println ( aEvt . getFileName ( ) <nl> - + " : " + aEvt . getLine ( ) <nl> - + " : " + aEvt . getMessage ( ) ) ; <nl> + sb . append ( ' : ' ) . append ( aEvt . getColumn ( ) ) ; <nl> } <nl> + sb . append ( " : " ) . append ( message ) ; <nl> + mErrorWriter . println ( sb . toString ( ) ) ; <nl> } <nl> <nl> / * * @ see AuditListener * * /

TEST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index f496fa3 . . 672bca6 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 320 , 7 + 320 , 7 @ @ 
 < module name = " AbbreviationAsWordInName " > 
 < property name = " ignoreFinal " value = " false " / > 
 < property name = " allowedAbbreviationLength " value = " 1 " / > 
 - < property name = " allowedAbbreviations " value = " AST , CSV " / > 
 + < property name = " allowedAbbreviations " value = " AST " / > 
 < / module > 
 < module name = " AbstractClassName " / > 
 < module name = " ClassTypeParameterName " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / CSVFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / CSVFilter . java 
 deleted file mode 100644 
 index 6f983c8 . . 0000000 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / CSVFilter . java 
 + + + / dev / null 
 @ @ - 1 , 116 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . filters ; 
 - 
 - import java . util . Collections ; 
 - import java . util . Objects ; 
 - import java . util . Set ; 
 - import java . util . StringTokenizer ; 
 - 
 - import com . google . common . collect . Sets ; 
 - 
 - / * * 
 - * < p > 
 - * This filter accepts an integer that matches a CSV value , where 
 - * each value is an integer or a range of integers . 
 - * < / p > 
 - * @ author Rick Giles 
 - * @ author o _ sukhodolsky 
 - * / 
 - class CSVFilter implements IntFilter { 
 - / * * Filter set . * / 
 - private final Set < IntFilter > filters = Sets . newHashSet ( ) ; 
 - 
 - / * * 
 - * Constructs a { @ code CSVFilter } from a CSV , Comma - Separated Values , 
 - * string . Each value is an integer , or a range of integers . A range of 
 - * integers is of the form integer - integer , such as 1 - 10 . 
 - * Note : integers must be non - negative . 
 - * @ param pattern the CSV string . 
 - * @ throws NumberFormatException if a component substring does not 
 - * contain a parsable integer . 
 - * / 
 - CSVFilter ( String pattern ) { 
 - final StringTokenizer tokenizer = new StringTokenizer ( pattern , " , " ) ; 
 - while ( tokenizer . hasMoreTokens ( ) ) { 
 - final String token = tokenizer . nextToken ( ) . trim ( ) ; 
 - final int index = token . indexOf ( ' - ' ) ; 
 - if ( index = = - 1 ) { 
 - final int matchValue = Integer . parseInt ( token ) ; 
 - addFilter ( new IntMatchFilter ( matchValue ) ) ; 
 - } 
 - else { 
 - final int lowerBound = 
 - Integer . parseInt ( token . substring ( 0 , index ) ) ; 
 - final int upperBound = 
 - Integer . parseInt ( token . substring ( index + 1 ) ) ; 
 - addFilter ( new IntRangeFilter ( lowerBound , upperBound ) ) ; 
 - } 
 - } 
 - } 
 - 
 - / * * 
 - * Adds a IntFilter to the set . 
 - * @ param filter the IntFilter to add . 
 - * / 
 - public final void addFilter ( IntFilter filter ) { 
 - filters . add ( filter ) ; 
 - } 
 - 
 - / * * 
 - * Returns the IntFilters of the filter set . 
 - * @ return the IntFilters of the filter set . 
 - * / 
 - protected Set < IntFilter > getFilters ( ) { 
 - return Collections . unmodifiableSet ( filters ) ; 
 - } 
 - 
 - / * * 
 - * Determines whether an Integer matches a CSV integer value . 
 - * @ param intValue the Integer to check . 
 - * @ return true if intValue is an Integer that matches a CSV value . 
 - * / 
 - @ Override 
 - public boolean accept ( int intValue ) { 
 - for ( IntFilter filter : getFilters ( ) ) { 
 - if ( filter . accept ( intValue ) ) { 
 - return true ; 
 - } 
 - } 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public boolean equals ( Object object ) { 
 - if ( this = = object ) { 
 - return true ; 
 - } 
 - if ( object = = null | | getClass ( ) ! = object . getClass ( ) ) { 
 - return false ; 
 - } 
 - final CSVFilter csvFilter = ( CSVFilter ) object ; 
 - return Objects . equals ( filters , csvFilter . filters ) ; 
 - } 
 - 
 - @ Override 
 - public int hashCode ( ) { 
 - return Objects . hash ( filters ) ; 
 - } 
 - } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / CsvFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / CsvFilter . java 
 new file mode 100644 
 index 0000000 . . c408a20 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / CsvFilter . java 
 @ @ - 0 , 0 + 1 , 116 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . filters ; 
 + 
 + import java . util . Collections ; 
 + import java . util . Objects ; 
 + import java . util . Set ; 
 + import java . util . StringTokenizer ; 
 + 
 + import com . google . common . collect . Sets ; 
 + 
 + / * * 
 + * < p > 
 + * This filter accepts an integer that matches a CSV value , where 
 + * each value is an integer or a range of integers . 
 + * < / p > 
 + * @ author Rick Giles 
 + * @ author o _ sukhodolsky 
 + * / 
 + class CsvFilter implements IntFilter { 
 + / * * Filter set . * / 
 + private final Set < IntFilter > filters = Sets . newHashSet ( ) ; 
 + 
 + / * * 
 + * Constructs a { @ code CsvFilter } from a CSV , Comma - Separated Values , 
 + * string . Each value is an integer , or a range of integers . A range of 
 + * integers is of the form integer - integer , such as 1 - 10 . 
 + * Note : integers must be non - negative . 
 + * @ param pattern the CSV string . 
 + * @ throws NumberFormatException if a component substring does not 
 + * contain a parsable integer . 
 + * / 
 + CsvFilter ( String pattern ) { 
 + final StringTokenizer tokenizer = new StringTokenizer ( pattern , " , " ) ; 
 + while ( tokenizer . hasMoreTokens ( ) ) { 
 + final String token = tokenizer . nextToken ( ) . trim ( ) ; 
 + final int index = token . indexOf ( ' - ' ) ; 
 + if ( index = = - 1 ) { 
 + final int matchValue = Integer . parseInt ( token ) ; 
 + addFilter ( new IntMatchFilter ( matchValue ) ) ; 
 + } 
 + else { 
 + final int lowerBound = 
 + Integer . parseInt ( token . substring ( 0 , index ) ) ; 
 + final int upperBound = 
 + Integer . parseInt ( token . substring ( index + 1 ) ) ; 
 + addFilter ( new IntRangeFilter ( lowerBound , upperBound ) ) ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 + * Adds a IntFilter to the set . 
 + * @ param filter the IntFilter to add . 
 + * / 
 + public final void addFilter ( IntFilter filter ) { 
 + filters . add ( filter ) ; 
 + } 
 + 
 + / * * 
 + * Returns the IntFilters of the filter set . 
 + * @ return the IntFilters of the filter set . 
 + * / 
 + protected Set < IntFilter > getFilters ( ) { 
 + return Collections . unmodifiableSet ( filters ) ; 
 + } 
 + 
 + / * * 
 + * Determines whether an Integer matches a CSV integer value . 
 + * @ param intValue the Integer to check . 
 + * @ return true if intValue is an Integer that matches a CSV value . 
 + * / 
 + @ Override 
 + public boolean accept ( int intValue ) { 
 + for ( IntFilter filter : getFilters ( ) ) { 
 + if ( filter . accept ( intValue ) ) { 
 + return true ; 
 + } 
 + } 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object object ) { 
 + if ( this = = object ) { 
 + return true ; 
 + } 
 + if ( object = = null | | getClass ( ) ! = object . getClass ( ) ) { 
 + return false ; 
 + } 
 + final CsvFilter csvFilter = ( CsvFilter ) object ; 
 + return Objects . equals ( filters , csvFilter . filters ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) { 
 + return Objects . hash ( filters ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java 
 index 7c6cd90 . . b288cff 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java 
 @ @ - 57 , 16 + 57 , 16 @ @ public class SuppressElement 
 private String moduleId ; 
 
 / * * Line number filter . * / 
 - private CSVFilter lineFilter ; 
 + private CsvFilter lineFilter ; 
 
 / * * CSV for line number filter . * / 
 - private String linesCSV ; 
 + private String linesCsv ; 
 
 / * * Column number filter . * / 
 - private CSVFilter columnFilter ; 
 + private CsvFilter columnFilter ; 
 
 / * * CSV for column number filter . * / 
 - private String columnsCSV ; 
 + private String columnsCsv ; 
 
 / * * 
 * Constructs a { @ code SuppressElement } for a 
 @ @ - 102 , 12 + 102 , 12 @ @ public class SuppressElement 
 * @ param lines CSV values and ranges for line number filtering . 
 * / 
 public void setLines ( String lines ) { 
 - linesCSV = lines ; 
 + linesCsv = lines ; 
 if ( lines = = null ) { 
 lineFilter = null ; 
 } 
 else { 
 - lineFilter = new CSVFilter ( lines ) ; 
 + lineFilter = new CsvFilter ( lines ) ; 
 } 
 } 
 
 @ @ - 117 , 12 + 117 , 12 @ @ public class SuppressElement 
 * @ param columns CSV values and ranges for column number filtering . 
 * / 
 public void setColumns ( String columns ) { 
 - columnsCSV = columns ; 
 + columnsCsv = columns ; 
 if ( columns = = null ) { 
 columnFilter = null ; 
 } 
 else { 
 - columnFilter = new CSVFilter ( columns ) ; 
 + columnFilter = new CsvFilter ( columns ) ; 
 } 
 } 
 
 @ @ - 154 , 7 + 154 , 7 @ @ public class SuppressElement 
 
 @ Override 
 public int hashCode ( ) { 
 - return Objects . hash ( filePattern , checkPattern , moduleId , linesCSV , columnsCSV ) ; 
 + return Objects . hash ( filePattern , checkPattern , moduleId , linesCsv , columnsCsv ) ; 
 } 
 
 @ Override 
 @ @ - 169 , 7 + 169 , 7 @ @ public class SuppressElement 
 return Objects . equals ( filePattern , suppressElement . filePattern ) 
 & & Objects . equals ( checkPattern , suppressElement . checkPattern ) 
 & & Objects . equals ( moduleId , suppressElement . moduleId ) 
 - & & Objects . equals ( linesCSV , suppressElement . linesCSV ) 
 - & & Objects . equals ( columnsCSV , suppressElement . columnsCSV ) ; 
 + & & Objects . equals ( linesCsv , suppressElement . linesCsv ) 
 + & & Objects . equals ( columnsCsv , suppressElement . columnsCsv ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / CSVFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / CSVFilterTest . java 
 deleted file mode 100644 
 index 3e2c25e . . 0000000 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / CSVFilterTest . java 
 + + + / dev / null 
 @ @ - 1 , 83 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . filters ; 
 - 
 - import static org . junit . Assert . assertFalse ; 
 - import static org . junit . Assert . assertTrue ; 
 - 
 - import org . junit . Test ; 
 - 
 - import nl . jqno . equalsverifier . EqualsVerifier ; 
 - 
 - / * * Tests CSVFilter . * / 
 - public class CSVFilterTest { 
 - @ Test 
 - public void testDecideSingle ( ) { 
 - final IntFilter filter = new CSVFilter ( " 0 " ) ; 
 - assertFalse ( " less than " , filter . accept ( - 1 ) ) ; 
 - assertTrue ( " equal " , filter . accept ( 0 ) ) ; 
 - assertFalse ( " greater than " , filter . accept ( 1 ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testDecidePair ( ) { 
 - final IntFilter filter = new CSVFilter ( " 0 , 2 " ) ; 
 - assertFalse ( " less than " , filter . accept ( - 1 ) ) ; 
 - assertTrue ( " equal 0 " , filter . accept ( 0 ) ) ; 
 - assertFalse ( " greater than " , filter . accept ( 1 ) ) ; 
 - assertTrue ( " equal 2 " , filter . accept ( 2 ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testDecideRange ( ) { 
 - final IntFilter filter = new CSVFilter ( " 0 - 2 " ) ; 
 - assertFalse ( " less than " , filter . accept ( - 1 ) ) ; 
 - assertTrue ( " equal 0 " , filter . accept ( 0 ) ) ; 
 - assertTrue ( " equal 1 " , filter . accept ( 1 ) ) ; 
 - assertTrue ( " equal 2 " , filter . accept ( 2 ) ) ; 
 - assertFalse ( " greater than " , filter . accept ( 3 ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testDecideEmptyRange ( ) { 
 - final IntFilter filter = new CSVFilter ( " 2 - 0 " ) ; 
 - assertFalse ( " less than " , filter . accept ( - 1 ) ) ; 
 - assertFalse ( " equal 0 " , filter . accept ( 0 ) ) ; 
 - assertFalse ( " equal 1 " , filter . accept ( 1 ) ) ; 
 - assertFalse ( " equal 2 " , filter . accept ( 2 ) ) ; 
 - assertFalse ( " greater than " , filter . accept ( 3 ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testDecideRangePlusValue ( ) { 
 - final IntFilter filter = new CSVFilter ( " 0 - 2 , 10 " ) ; 
 - assertFalse ( " less than " , filter . accept ( - 1 ) ) ; 
 - assertTrue ( " equal 0 " , filter . accept ( 0 ) ) ; 
 - assertTrue ( " equal 1 " , filter . accept ( 1 ) ) ; 
 - assertTrue ( " equal 2 " , filter . accept ( 2 ) ) ; 
 - assertFalse ( " greater than " , filter . accept ( 3 ) ) ; 
 - assertTrue ( " equal 10 " , filter . accept ( 10 ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testEqualsAndHashCode ( ) { 
 - EqualsVerifier . forClass ( CSVFilter . class ) . usingGetClass ( ) . verify ( ) ; 
 - } 
 - } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java 
 new file mode 100644 
 index 0000000 . . bd991c3 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java 
 @ @ - 0 , 0 + 1 , 83 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . filters ; 
 + 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + import org . junit . Test ; 
 + 
 + import nl . jqno . equalsverifier . EqualsVerifier ; 
 + 
 + / * * Tests CsvFilter . * / 
 + public class CsvFilterTest { 
 + @ Test 
 + public void testDecideSingle ( ) { 
 + final IntFilter filter = new CsvFilter ( " 0 " ) ; 
 + assertFalse ( " less than " , filter . accept ( - 1 ) ) ; 
 + assertTrue ( " equal " , filter . accept ( 0 ) ) ; 
 + assertFalse ( " greater than " , filter . accept ( 1 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testDecidePair ( ) { 
 + final IntFilter filter = new CsvFilter ( " 0 , 2 " ) ; 
 + assertFalse ( " less than " , filter . accept ( - 1 ) ) ; 
 + assertTrue ( " equal 0 " , filter . accept ( 0 ) ) ; 
 + assertFalse ( " greater than " , filter . accept ( 1 ) ) ; 
 + assertTrue ( " equal 2 " , filter . accept ( 2 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testDecideRange ( ) { 
 + final IntFilter filter = new CsvFilter ( " 0 - 2 " ) ; 
 + assertFalse ( " less than " , filter . accept ( - 1 ) ) ; 
 + assertTrue ( " equal 0 " , filter . accept ( 0 ) ) ; 
 + assertTrue ( " equal 1 " , filter . accept ( 1 ) ) ; 
 + assertTrue ( " equal 2 " , filter . accept ( 2 ) ) ; 
 + assertFalse ( " greater than " , filter . accept ( 3 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testDecideEmptyRange ( ) { 
 + final IntFilter filter = new CsvFilter ( " 2 - 0 " ) ; 
 + assertFalse ( " less than " , filter . accept ( - 1 ) ) ; 
 + assertFalse ( " equal 0 " , filter . accept ( 0 ) ) ; 
 + assertFalse ( " equal 1 " , filter . accept ( 1 ) ) ; 
 + assertFalse ( " equal 2 " , filter . accept ( 2 ) ) ; 
 + assertFalse ( " greater than " , filter . accept ( 3 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testDecideRangePlusValue ( ) { 
 + final IntFilter filter = new CsvFilter ( " 0 - 2 , 10 " ) ; 
 + assertFalse ( " less than " , filter . accept ( - 1 ) ) ; 
 + assertTrue ( " equal 0 " , filter . accept ( 0 ) ) ; 
 + assertTrue ( " equal 1 " , filter . accept ( 1 ) ) ; 
 + assertTrue ( " equal 2 " , filter . accept ( 2 ) ) ; 
 + assertFalse ( " greater than " , filter . accept ( 3 ) ) ; 
 + assertTrue ( " equal 10 " , filter . accept ( 10 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testEqualsAndHashCode ( ) { 
 + EqualsVerifier . forClass ( CsvFilter . class ) . usingGetClass ( ) . verify ( ) ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java 
 index 07c40e6 . . afebf11 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java 
 @ @ - 32 , 11 + 32 , 11 @ @ import nl . jqno . equalsverifier . EqualsVerifier ; 
 
 / * * Tests SuppressElementFilter . * / 
 public class FilterSetTest { 
 - private CSVFilter filter ; 
 + private CsvFilter filter ; 
 
 @ Before 
 public void setUp ( ) { 
 - filter = new CSVFilter ( " " ) ; 
 + filter = new CsvFilter ( " " ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 index 6187159 . . 1886b89 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 @ @ - 83 , 17 + 83 , 21 @ @ public class DefaultLogger 
 * * / 
 public void addError ( AuditEvent aEvt ) 
 { 
 + String fileName = aEvt . getFileName ( ) ; 
 + String message = aEvt . getMessage ( ) ; 
 + 
 + / / avoid StringBuffer . expandCapacity 
 + int bufLen = fileName . length ( ) + message . length ( ) + 12 ; 
 + 
 + StringBuffer sb = new StringBuffer ( bufLen ) ; 
 + 
 + sb . append ( fileName ) ; 
 + sb . append ( ' : ' ) . append ( aEvt . getLine ( ) ) ; 
 if ( aEvt . getColumn ( ) > 0 ) { 
 - mErrorWriter . println ( aEvt . getFileName ( ) 
 - + " : " + aEvt . getLine ( ) 
 - + " : " + aEvt . getColumn ( ) 
 - + " : " + aEvt . getMessage ( ) ) ; 
 - } 
 - else { 
 - mErrorWriter . println ( aEvt . getFileName ( ) 
 - + " : " + aEvt . getLine ( ) 
 - + " : " + aEvt . getMessage ( ) ) ; 
 + sb . append ( ' : ' ) . append ( aEvt . getColumn ( ) ) ; 
 } 
 + sb . append ( " : " ) . append ( message ) ; 
 + mErrorWriter . println ( sb . toString ( ) ) ; 
 } 
 
 / * * @ see AuditListener * * /
