BLEU SCORE: 0.023901021968803133

TEST MSG: Issue # 4250 : fix for seleveral inspection violations ( ignored return value , deprecated package , extra variable initialization )
GENERATED MSG: Fix PMD violations from SimplifyStartsWith rule , issue # 949

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index 9f8de82 . . 17f77c8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 411 , 7 + 411 , 7 @ @ public final class Main { <nl> final AuditListener listener = createListener ( cliOptions . format , cliOptions . outputLocation ) ; <nl> <nl> / / create RootModule object and run it <nl> - int errorCounter = 0 ; <nl> + final int errorCounter ; <nl> final ClassLoader moduleClassLoader = Checker . class . getClassLoader ( ) ; <nl> final RootModule rootModule = getRootModule ( config . getName ( ) , moduleClassLoader ) ; <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> index da30d3b . . d344721 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> @ @ - 30 , 7 + 30 , 6 @ @ import com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaTokenTypes ; <nl> * <nl> * @ author Oliver Burn <nl> * @ author < a href = " mailto : dobratzp @ ele . uri . edu " > Peter Dobratz < / a > <nl> - * @ noinspection JavaDoc <nl> * / <nl> public final class TokenTypes { <nl> / / The following three types are never part of an AST , <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> index 8dc6558 . . fde157a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> @ @ - 87 , 11 + 87 , 11 @ @ public class SuppressWarningsHolder <nl> * @ return the default alias for the given check <nl> * / <nl> public static String getDefaultAlias ( String sourceName ) { <nl> - final int startIndex = sourceName . lastIndexOf ( ' . ' ) + 1 ; <nl> int endIndex = sourceName . length ( ) ; <nl> if ( sourceName . endsWith ( CHECK _ SUFFIX ) ) { <nl> endIndex - = CHECK _ SUFFIX . length ( ) ; <nl> } <nl> + final int startIndex = sourceName . lastIndexOf ( ' . ' ) + 1 ; <nl> return sourceName . substring ( startIndex , endIndex ) . toLowerCase ( Locale . ENGLISH ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> index 45de42a . . a1cc6b2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> @ @ - 255 , 7 + 255 , 6 @ @ public class IllegalInstantiationCheck <nl> * Check import statements . <nl> * @ param className name of the class <nl> * @ return value of illegal instantiated type <nl> - * @ noinspection StringConcatenationInLoop <nl> * / <nl> private String checkImportStatements ( String className ) { <nl> String illegalType = null ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> index eb220d9 . . 8d4dd7a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> - import static junit . framework . TestCase . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . fail ; <nl> @ @ - 34 , 6 + 33 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> <nl> + import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> @ @ - 57 , 7 + 57 , 7 @ @ public class PackageObjectFactoryTest { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> - assertEquals ( " moduleClassLoader must not be null " , ex . getMessage ( ) ) ; <nl> + Assert . assertEquals ( " moduleClassLoader must not be null " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 68 , 7 + 68 , 7 @ @ public class PackageObjectFactoryTest { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> - assertEquals ( " moduleClassLoader must not be null " , ex . getMessage ( ) ) ; <nl> + Assert . assertEquals ( " moduleClassLoader must not be null " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 113 , 7 + 113 , 7 @ @ public class PackageObjectFactoryTest { <nl> final String className = " SomeClass " ; <nl> final String actual = <nl> String . valueOf ( method . invoke ( PackageObjectFactory . class , className , packages ) ) ; <nl> - assertEquals ( className , actual ) ; <nl> + Assert . assertEquals ( className , actual ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 135 , 9 + 135 , 9 @ @ public class PackageObjectFactoryTest { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertEquals ( " Unable to instantiate com . puppycrawl . tools . checkstyle . " <nl> + Assert . assertEquals ( " Unable to instantiate com . puppycrawl . tools . checkstyle . " <nl> + " PackageObjectFactoryTest $ FailConstructorFileSet " , ex . getMessage ( ) ) ; <nl> - assertEquals ( " IllegalArgumentException " , ex . getCause ( ) . getCause ( ) . getClass ( ) <nl> + Assert . assertEquals ( " IllegalArgumentException " , ex . getCause ( ) . getCause ( ) . getClass ( ) <nl> . getSimpleName ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> index 28e52a6 . . 53c6d6f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> @ @ - 34 , 7 + 35 , 7 @ @ public class FileContentsTest { <nl> public void testDeprecatedCtor ( ) { <nl> / / just to make UT coverage 100 % <nl> final FileContents o = new FileContents ( " filename . java " , " 1 " , " 2 " ) ; <nl> - o . getFilename ( ) ; <nl> + assertEquals ( " filename . java " , o . getFilename ( ) ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 15744fe . . e910f88 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 109 , 7 + 109 , 6 @ @ <nl> < rule ref = " rulesets / java / design . xml " > <nl> < ! - - this produce false positives on gui . Main - - > <nl> < exclude name = " UseUtilityClass " / > <nl> - < exclude name = " AccessorClassGeneration " / > <nl> < exclude name = " FinalFieldCouldBeStatic " / > <nl> < exclude name = " CloseResource " / > <nl> < exclude name = " NonStaticInitializer " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> index 593f55b . . a266f7c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> @ @ - 117 , 7 + 117 , 7 @ @ public final class ConfigurationLoader <nl> * @ throws SAXException if an error occurs <nl> * @ throws ParserConfigurationException if an error occurs <nl> * / <nl> - private InternalLoader ( ) <nl> + public InternalLoader ( ) <nl> throws SAXException , ParserConfigurationException <nl> { <nl> / / super ( DTD _ PUBLIC _ ID _ 1 _ 1 , DTD _ RESOURCE _ NAME _ 1 _ 1 ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> index d87754b . . 8d42ddb 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> @ @ - 466 , 7 + 466 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check <nl> * @ param surroundingClass name of current surrounding class . <nl> * @ param check the check we use to load class . <nl> * / <nl> - private RegularClass ( final Token name , <nl> + public RegularClass ( final Token name , <nl> final String surroundingClass , <nl> final AbstractTypeAwareCheck check ) <nl> { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> index 13af637 . . 88bf76e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> @ @ - 210 , 7 + 210 , 7 @ @ public class MultipleStringLiteralsCheck extends Check <nl> * @ param line int <nl> * @ param col int <nl> * / <nl> - private StringInfo ( int line , int col ) <nl> + public StringInfo ( int line , int col ) <nl> { <nl> this . line = line ; <nl> this . col = col ;

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index 9f8de82 . . 17f77c8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 411 , 7 + 411 , 7 @ @ public final class Main { 
 final AuditListener listener = createListener ( cliOptions . format , cliOptions . outputLocation ) ; 
 
 / / create RootModule object and run it 
 - int errorCounter = 0 ; 
 + final int errorCounter ; 
 final ClassLoader moduleClassLoader = Checker . class . getClassLoader ( ) ; 
 final RootModule rootModule = getRootModule ( config . getName ( ) , moduleClassLoader ) ; 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 index da30d3b . . d344721 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 @ @ - 30 , 7 + 30 , 6 @ @ import com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaTokenTypes ; 
 * 
 * @ author Oliver Burn 
 * @ author < a href = " mailto : dobratzp @ ele . uri . edu " > Peter Dobratz < / a > 
 - * @ noinspection JavaDoc 
 * / 
 public final class TokenTypes { 
 / / The following three types are never part of an AST , 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 index 8dc6558 . . fde157a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 @ @ - 87 , 11 + 87 , 11 @ @ public class SuppressWarningsHolder 
 * @ return the default alias for the given check 
 * / 
 public static String getDefaultAlias ( String sourceName ) { 
 - final int startIndex = sourceName . lastIndexOf ( ' . ' ) + 1 ; 
 int endIndex = sourceName . length ( ) ; 
 if ( sourceName . endsWith ( CHECK _ SUFFIX ) ) { 
 endIndex - = CHECK _ SUFFIX . length ( ) ; 
 } 
 + final int startIndex = sourceName . lastIndexOf ( ' . ' ) + 1 ; 
 return sourceName . substring ( startIndex , endIndex ) . toLowerCase ( Locale . ENGLISH ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 index 45de42a . . a1cc6b2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 @ @ - 255 , 7 + 255 , 6 @ @ public class IllegalInstantiationCheck 
 * Check import statements . 
 * @ param className name of the class 
 * @ return value of illegal instantiated type 
 - * @ noinspection StringConcatenationInLoop 
 * / 
 private String checkImportStatements ( String className ) { 
 String illegalType = null ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 index eb220d9 . . 8d4dd7a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 @ @ - 19 , 7 + 19 , 6 @ @ 
 
 package com . puppycrawl . tools . checkstyle ; 
 
 - import static junit . framework . TestCase . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . fail ; 
 @ @ - 34 , 6 + 33 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 
 + import org . junit . Assert ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 @ @ - 57 , 7 + 57 , 7 @ @ public class PackageObjectFactoryTest { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 - assertEquals ( " moduleClassLoader must not be null " , ex . getMessage ( ) ) ; 
 + Assert . assertEquals ( " moduleClassLoader must not be null " , ex . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 68 , 7 + 68 , 7 @ @ public class PackageObjectFactoryTest { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 - assertEquals ( " moduleClassLoader must not be null " , ex . getMessage ( ) ) ; 
 + Assert . assertEquals ( " moduleClassLoader must not be null " , ex . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 113 , 7 + 113 , 7 @ @ public class PackageObjectFactoryTest { 
 final String className = " SomeClass " ; 
 final String actual = 
 String . valueOf ( method . invoke ( PackageObjectFactory . class , className , packages ) ) ; 
 - assertEquals ( className , actual ) ; 
 + Assert . assertEquals ( className , actual ) ; 
 } 
 
 @ Test 
 @ @ - 135 , 9 + 135 , 9 @ @ public class PackageObjectFactoryTest { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertEquals ( " Unable to instantiate com . puppycrawl . tools . checkstyle . " 
 + Assert . assertEquals ( " Unable to instantiate com . puppycrawl . tools . checkstyle . " 
 + " PackageObjectFactoryTest $ FailConstructorFileSet " , ex . getMessage ( ) ) ; 
 - assertEquals ( " IllegalArgumentException " , ex . getCause ( ) . getCause ( ) . getClass ( ) 
 + Assert . assertEquals ( " IllegalArgumentException " , ex . getCause ( ) . getCause ( ) . getClass ( ) 
 . getSimpleName ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 index 28e52a6 . . 53c6d6f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . api ; 
 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertTrue ; 
 
 @ @ - 34 , 7 + 35 , 7 @ @ public class FileContentsTest { 
 public void testDeprecatedCtor ( ) { 
 / / just to make UT coverage 100 % 
 final FileContents o = new FileContents ( " filename . java " , " 1 " , " 2 " ) ; 
 - o . getFilename ( ) ; 
 + assertEquals ( " filename . java " , o . getFilename ( ) ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 15744fe . . e910f88 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 109 , 7 + 109 , 6 @ @ 
 < rule ref = " rulesets / java / design . xml " > 
 < ! - - this produce false positives on gui . Main - - > 
 < exclude name = " UseUtilityClass " / > 
 - < exclude name = " AccessorClassGeneration " / > 
 < exclude name = " FinalFieldCouldBeStatic " / > 
 < exclude name = " CloseResource " / > 
 < exclude name = " NonStaticInitializer " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 index 593f55b . . a266f7c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 @ @ - 117 , 7 + 117 , 7 @ @ public final class ConfigurationLoader 
 * @ throws SAXException if an error occurs 
 * @ throws ParserConfigurationException if an error occurs 
 * / 
 - private InternalLoader ( ) 
 + public InternalLoader ( ) 
 throws SAXException , ParserConfigurationException 
 { 
 / / super ( DTD _ PUBLIC _ ID _ 1 _ 1 , DTD _ RESOURCE _ NAME _ 1 _ 1 ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 index d87754b . . 8d42ddb 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 @ @ - 466 , 7 + 466 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check 
 * @ param surroundingClass name of current surrounding class . 
 * @ param check the check we use to load class . 
 * / 
 - private RegularClass ( final Token name , 
 + public RegularClass ( final Token name , 
 final String surroundingClass , 
 final AbstractTypeAwareCheck check ) 
 { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 index 13af637 . . 88bf76e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 @ @ - 210 , 7 + 210 , 7 @ @ public class MultipleStringLiteralsCheck extends Check 
 * @ param line int 
 * @ param col int 
 * / 
 - private StringInfo ( int line , int col ) 
 + public StringInfo ( int line , int col ) 
 { 
 this . line = line ; 
 this . col = col ;
