BLEU SCORE: 0.08403703759902119

TEST MSG: Issue # 1930 : EqualsAvoidNull check should check String concatenations
GENERATED MSG: Issue # 1293 : Refactoring of EqualsAvoidNullCheck . More UTs .

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> index 975bc50 . . f419978 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> @ @ - 337 , 24 + 337 , 24 @ @ public class EqualsAvoidNullCheck extends Check { <nl> * @ param expr the argument expression <nl> * @ return - true if any child matches the set of tokens , false if not <nl> * / <nl> - private static boolean containsAllSafeTokens ( final DetailAST expr ) { <nl> + private boolean containsAllSafeTokens ( final DetailAST expr ) { <nl> DetailAST arg = expr . getFirstChild ( ) ; <nl> - if ( arg . branchContains ( TokenTypes . METHOD _ CALL ) ) { <nl> - return false ; <nl> - } <nl> arg = skipVariableAssign ( arg ) ; <nl> <nl> - / / Plus assignment can have ill affects <nl> - / / do not want to recommend moving expression <nl> - / / See example : <nl> - / / String s = " SweetString " ; <nl> - / / s . equals ( s + = " SweetString " ) ; / / false <nl> - / / s = " SweetString " ; <nl> - / / ( s + = " SweetString " ) . equals ( s ) ; / / true <nl> - <nl> - return ! arg . branchContains ( TokenTypes . PLUS _ ASSIGN ) <nl> - & & ! arg . branchContains ( TokenTypes . IDENT ) <nl> - & & ! arg . branchContains ( TokenTypes . LITERAL _ NULL ) ; <nl> + boolean argIsNotNull = false ; <nl> + if ( arg . getType ( ) = = TokenTypes . PLUS ) { <nl> + DetailAST child = arg . getFirstChild ( ) ; <nl> + while ( child ! = null <nl> + & & ! argIsNotNull ) { <nl> + argIsNotNull = child . getType ( ) = = TokenTypes . STRING _ LITERAL <nl> + | | child . getType ( ) = = TokenTypes . IDENT ; <nl> + child = child . getNextSibling ( ) ; <nl> + } <nl> + } <nl> + <nl> + return argIsNotNull <nl> + | | ! arg . branchContains ( TokenTypes . IDENT ) <nl> + & & ! arg . branchContains ( TokenTypes . LITERAL _ NULL ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java <nl> index 960cdd9 . . 7958521 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java <nl> @ @ - 95 , 6 + 95 , 9 @ @ public class EqualsAvoidNullCheckTest extends BaseCheckTestSupport { <nl> " 357 : 35 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> " 368 : 30 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> " 394 : 35 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> + " 415 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> + " 416 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> + " 417 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputEqualsAvoidNull . java " ) , expected ) ; <nl> } <nl> @ @ - 145 , 6 + 148 , 9 @ @ public class EqualsAvoidNullCheckTest extends BaseCheckTestSupport { <nl> " 357 : 35 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> " 368 : 30 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> " 394 : 35 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> + " 415 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> + " 416 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> + " 417 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputEqualsAvoidNull . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java <nl> index 1343da6 . . 406c022 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java <nl> @ @ - 407 , 3 + 407 , 19 @ @ enum TestEnum { <nl> this . ONE . equals ( this ) ; <nl> } <nl> } <nl> + <nl> + class TestConcatenations { <nl> + String s = null ; <nl> + <nl> + void foo ( ) { <nl> + s . equals ( s + s ) ; <nl> + s . equals ( " a " + " b " ) ; <nl> + s . equals ( getInt ( ) + s ) ; <nl> + s . equals ( getInt ( ) + getInt ( ) ) ; <nl> + } <nl> + <nl> + int getInt ( ) { <nl> + return ( Integer ) null ; <nl> + } <nl> + } <nl> +
NEAREST DIFF (one line): diff - - git a / . gitignore b / . gitignore <nl> index 7b5c2c7 . . e8f2af8 100644 <nl> - - - a / . gitignore <nl> + + + b / . gitignore <nl> @ @ - 3 , 6 + 3 , 8 @ @ <nl> # . project till https : / / issues . apache . org / jira / browse / MECLIPSE - 735 <nl> . settings <nl> . externalToolBuilders <nl> + . classpath <nl> + . project <nl> <nl> # Eclipse - CS Checkstyle Plug - In IDE configuration files <nl> . checkstyle <nl> diff - - git a / pom . xml b / pom . xml <nl> index bfed38a . . 39ed7e6 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 872 , 7 + 872 , 6 @ @ <nl> < regex > < pattern > . * . checks . metrics . NPathComplexityCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 90 < / lineRate > < / regex > <nl> <nl> <nl> - < regex > < pattern > . * . checks . modifier . ModifierOrderCheck < / pattern > < branchRate > 92 < / branchRate > < lineRate > 94 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . modifier . RedundantModifierCheck < / pattern > < branchRate > 97 < / branchRate > < lineRate > 96 < / lineRate > < / regex > <nl> <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java <nl> index 5b5712a . . b0a2e7e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java <nl> @ @ - 149 , 7 + 149 , 7 @ @ public class ModifierOrderCheck <nl> } <nl> <nl> int i = 0 ; <nl> - while ( i < JLS _ ORDER . length ) { <nl> + while ( modifier ! = null ) { <nl> if ( modifier . getType ( ) = = TokenTypes . ANNOTATION ) { <nl> / / Annotation not at start of modifiers , bad <nl> return modifier ; <nl> @ @ - 164 , 12 + 164 , 12 @ @ public class ModifierOrderCheck <nl> / / Current modifier is out of JLS order <nl> return modifier ; <nl> } <nl> - else if ( ! it . hasNext ( ) ) { <nl> - / / Reached end of modifiers without problem <nl> - return null ; <nl> + else if ( it . hasNext ( ) ) { <nl> + modifier = it . next ( ) ; <nl> } <nl> else { <nl> - modifier = it . next ( ) ; <nl> + / / Reached end of modifiers without problem <nl> + modifier = null ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 index 975bc50 . . f419978 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 @ @ - 337 , 24 + 337 , 24 @ @ public class EqualsAvoidNullCheck extends Check { 
 * @ param expr the argument expression 
 * @ return - true if any child matches the set of tokens , false if not 
 * / 
 - private static boolean containsAllSafeTokens ( final DetailAST expr ) { 
 + private boolean containsAllSafeTokens ( final DetailAST expr ) { 
 DetailAST arg = expr . getFirstChild ( ) ; 
 - if ( arg . branchContains ( TokenTypes . METHOD _ CALL ) ) { 
 - return false ; 
 - } 
 arg = skipVariableAssign ( arg ) ; 
 
 - / / Plus assignment can have ill affects 
 - / / do not want to recommend moving expression 
 - / / See example : 
 - / / String s = " SweetString " ; 
 - / / s . equals ( s + = " SweetString " ) ; / / false 
 - / / s = " SweetString " ; 
 - / / ( s + = " SweetString " ) . equals ( s ) ; / / true 
 - 
 - return ! arg . branchContains ( TokenTypes . PLUS _ ASSIGN ) 
 - & & ! arg . branchContains ( TokenTypes . IDENT ) 
 - & & ! arg . branchContains ( TokenTypes . LITERAL _ NULL ) ; 
 + boolean argIsNotNull = false ; 
 + if ( arg . getType ( ) = = TokenTypes . PLUS ) { 
 + DetailAST child = arg . getFirstChild ( ) ; 
 + while ( child ! = null 
 + & & ! argIsNotNull ) { 
 + argIsNotNull = child . getType ( ) = = TokenTypes . STRING _ LITERAL 
 + | | child . getType ( ) = = TokenTypes . IDENT ; 
 + child = child . getNextSibling ( ) ; 
 + } 
 + } 
 + 
 + return argIsNotNull 
 + | | ! arg . branchContains ( TokenTypes . IDENT ) 
 + & & ! arg . branchContains ( TokenTypes . LITERAL _ NULL ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java 
 index 960cdd9 . . 7958521 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java 
 @ @ - 95 , 6 + 95 , 9 @ @ public class EqualsAvoidNullCheckTest extends BaseCheckTestSupport { 
 " 357 : 35 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 " 368 : 30 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 " 394 : 35 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 + " 415 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 + " 416 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 + " 417 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputEqualsAvoidNull . java " ) , expected ) ; 
 } 
 @ @ - 145 , 6 + 148 , 9 @ @ public class EqualsAvoidNullCheckTest extends BaseCheckTestSupport { 
 " 357 : 35 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 " 368 : 30 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 " 394 : 35 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 + " 415 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 + " 416 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 + " 417 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputEqualsAvoidNull . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java 
 index 1343da6 . . 406c022 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java 
 @ @ - 407 , 3 + 407 , 19 @ @ enum TestEnum { 
 this . ONE . equals ( this ) ; 
 } 
 } 
 + 
 + class TestConcatenations { 
 + String s = null ; 
 + 
 + void foo ( ) { 
 + s . equals ( s + s ) ; 
 + s . equals ( " a " + " b " ) ; 
 + s . equals ( getInt ( ) + s ) ; 
 + s . equals ( getInt ( ) + getInt ( ) ) ; 
 + } 
 + 
 + int getInt ( ) { 
 + return ( Integer ) null ; 
 + } 
 + } 
 +

NEAREST DIFF:
diff - - git a / . gitignore b / . gitignore 
 index 7b5c2c7 . . e8f2af8 100644 
 - - - a / . gitignore 
 + + + b / . gitignore 
 @ @ - 3 , 6 + 3 , 8 @ @ 
 # . project till https : / / issues . apache . org / jira / browse / MECLIPSE - 735 
 . settings 
 . externalToolBuilders 
 + . classpath 
 + . project 
 
 # Eclipse - CS Checkstyle Plug - In IDE configuration files 
 . checkstyle 
 diff - - git a / pom . xml b / pom . xml 
 index bfed38a . . 39ed7e6 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 872 , 7 + 872 , 6 @ @ 
 < regex > < pattern > . * . checks . metrics . NPathComplexityCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 90 < / lineRate > < / regex > 
 
 
 - < regex > < pattern > . * . checks . modifier . ModifierOrderCheck < / pattern > < branchRate > 92 < / branchRate > < lineRate > 94 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . modifier . RedundantModifierCheck < / pattern > < branchRate > 97 < / branchRate > < lineRate > 96 < / lineRate > < / regex > 
 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java 
 index 5b5712a . . b0a2e7e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java 
 @ @ - 149 , 7 + 149 , 7 @ @ public class ModifierOrderCheck 
 } 
 
 int i = 0 ; 
 - while ( i < JLS _ ORDER . length ) { 
 + while ( modifier ! = null ) { 
 if ( modifier . getType ( ) = = TokenTypes . ANNOTATION ) { 
 / / Annotation not at start of modifiers , bad 
 return modifier ; 
 @ @ - 164 , 12 + 164 , 12 @ @ public class ModifierOrderCheck 
 / / Current modifier is out of JLS order 
 return modifier ; 
 } 
 - else if ( ! it . hasNext ( ) ) { 
 - / / Reached end of modifiers without problem 
 - return null ; 
 + else if ( it . hasNext ( ) ) { 
 + modifier = it . next ( ) ; 
 } 
 else { 
 - modifier = it . next ( ) ; 
 + / / Reached end of modifiers without problem 
 + modifier = null ; 
 } 
 } 

