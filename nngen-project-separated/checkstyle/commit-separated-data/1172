BLEU SCORE: 0.033864985683445356

TEST MSG: Issue # 410 : Some amendments in WritingJavadocCheck , HTML tags part
GENERATED MSG: minor : cosmetic changes for writingjavadoccheck doc

TEST DIFF (one line): diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm <nl> index aa3a216 . . 80f89a8 100644 <nl> - - - a / src / xdocs / writingjavadocchecks . xml . vm <nl> + + + b / src / xdocs / writingjavadocchecks . xml . vm <nl> @ @ - 53 , 10 + 53 , 10 @ @ public class MyClass { <nl> Checkstyle can not parse something that looks like an HTML , so limitation appear . <nl> < / p > <nl> < p > <nl> - The comment should be written in XHTML to build nested AST Tree that most Checks expect . This means that every HTML tag should have matching closed HTML tag or it is self - closed tag . <nl> + The comment should be written in XHTML to build nested AST Tree that most Checks expect . This means that every HTML tag should have matching end HTML tag or it is a void tag . <nl> < / p > <nl> < p > <nl> - The only exceptions are HTML 4 tags that are " don ' t require closing " tag , so , Checkstyle won ' t show error about missing closing tag , however , it leads to broken XHTML structure and as result leads to <nl> + The only exceptions are HTML 4 tags whose end tag is optional , so , Checkstyle won ' t show error about missing end tag , however , it leads to broken XHTML structure and as result leads to <nl> not - nested content of the HTML tags in Abstract Syntax Tree of the Javadoc comment . <nl> < br / > <nl> In other words if HTML tags are not closed Javadoc grammar cannot determine content of these tags , <nl> @ @ - 267 , 14 + 267 , 14 @ @ class MyCheck extends AbstractJavadocCheck { <nl> Checkstyle supports HTML4 tags in Javadoc comments : < a href = " https : / / www . w3 . org / TR / html4 / index / elements . html " > all HTML4 elements < / a > . <nl> < / p > <nl> < p > <nl> - HTML 4 is picked just to have a list of tags that are " don ' t require closing tag " and a list of tags whose end tag is forbidden ( also known as < a href = " http : / / www . w3schools . com / html / html _ elements . asp " > empty html tags < / a > , for example < a href = " https : / / www . w3 . org / TR / html4 / struct / text . html # edef - BR " > BR tag < / a > ) . <nl> + HTML 4 is picked just to have a list of elements whose end tag is optional and a list of < a href = " https : / / www . w3 . org / TR / html - markup / syntax . html # void - element " > void elements < / a > ( also known as < a href = " http : / / www . w3schools . com / html / html _ elements . asp " > empty html tags < / a > , for example < a href = " https : / / www . w3 . org / TR / html4 / struct / text . html # edef - BR " > BR tag < / a > ) . <nl> < / p > <nl> < p > <nl> - HTML tags with " don ' t require closing tag " tag : & lt ; P & gt ; , & lt ; LI & gt ; , & lt ; TR & gt ; , & lt ; TD & gt ; , & lt ; TH & gt ; , & lt ; BODY & gt ; , & lt ; COLGROUP & gt ; , & lt ; DD & gt ; , <nl> + HTML elements whose end tag is optional : & lt ; P & gt ; , & lt ; LI & gt ; , & lt ; TR & gt ; , & lt ; TD & gt ; , & lt ; TH & gt ; , & lt ; BODY & gt ; , & lt ; COLGROUP & gt ; , & lt ; DD & gt ; , <nl> & lt ; DT & gt ; , & lt ; HEAD & gt ; , & lt ; HTML & gt ; , & lt ; OPTION & gt ; , & lt ; TBODY & gt ; , & lt ; THEAD & gt ; , & lt ; TFOOT & gt ; . <nl> < / p > <nl> < p > <nl> - Empty HTML tags : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , <nl> + Void HTML elements : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , <nl> & lt ; HR & gt ; , & lt ; IMG & gt ; , & lt ; INPUT & gt ; , & lt ; ISINDEX & gt ; , & lt ; LINK & gt ; , & lt ; META & gt ; , & lt ; PARAM & gt ; . <nl> < / p > <nl> < p >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> index 357016e . . 90ad4fd 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> @ @ - 149 , 7 + 149 , 7 @ @ public class CommentsIndentationCheck extends AbstractCheck { <nl> handleSingleLineCommentInEmptyCodeBlock ( singleLineComment , nextStmt ) ; <nl> } <nl> else if ( isSingleLineCommentAtTheEndOfTheCodeBlock ( nextStmt ) ) { <nl> - handleSIngleLineCommentAtTheEndOfTheCodeBlock ( prevStmt , singleLineComment , <nl> + handleSingleLineCommentAtTheEndOfTheCodeBlock ( prevStmt , singleLineComment , <nl> nextStmt ) ; <nl> } <nl> else if ( nextStmt ! = null <nl> @ @ - 200 , 7 + 200 , 7 @ @ public class CommentsIndentationCheck extends AbstractCheck { <nl> * / <nl> private static boolean isDistributedMethodChainOrConcatenationStatement ( <nl> DetailAST comment , DetailAST commentPreviousSibling ) { <nl> - boolean destributed = false ; <nl> + boolean isDistributed = false ; <nl> if ( commentPreviousSibling ! = null <nl> & & commentPreviousSibling . getType ( ) = = TokenTypes . SEMI <nl> & & comment . getLineNo ( ) - commentPreviousSibling . getLineNo ( ) = = 1 ) { <nl> @ @ - 208 , 12 + 208 , 18 @ @ public class CommentsIndentationCheck extends AbstractCheck { <nl> while ( currentToken . getFirstChild ( ) ! = null ) { <nl> currentToken = currentToken . getFirstChild ( ) ; <nl> } <nl> - if ( currentToken . getType ( ) ! = TokenTypes . COMMENT _ CONTENT <nl> - & & commentPreviousSibling . getLineNo ( ) ! = currentToken . getLineNo ( ) ) { <nl> - destributed = true ; <nl> + if ( currentToken . getType ( ) = = TokenTypes . COMMENT _ CONTENT ) { <nl> + currentToken = currentToken . getParent ( ) ; <nl> + while ( currentToken . getType ( ) = = TokenTypes . SINGLE _ LINE _ COMMENT <nl> + | | currentToken . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN ) { <nl> + currentToken = currentToken . getNextSibling ( ) ; <nl> + } <nl> + } <nl> + if ( commentPreviousSibling . getLineNo ( ) ! = currentToken . getLineNo ( ) ) { <nl> + isDistributed = true ; <nl> } <nl> } <nl> - return destributed ; <nl> + return isDistributed ; <nl> } <nl> <nl> / * * <nl> @ @ - 224 , 16 + 230 , 16 @ @ public class CommentsIndentationCheck extends AbstractCheck { <nl> * statement . <nl> * / <nl> private static boolean isDistributedReturnStatement ( DetailAST commentPreviousSibling ) { <nl> - boolean destributed = false ; <nl> + boolean isDistributed = false ; <nl> if ( commentPreviousSibling ! = null <nl> & & commentPreviousSibling . getType ( ) = = TokenTypes . LITERAL _ RETURN ) { <nl> final DetailAST firstChild = commentPreviousSibling . getFirstChild ( ) ; <nl> final DetailAST nextSibling = firstChild . getNextSibling ( ) ; <nl> if ( nextSibling ! = null ) { <nl> - destributed = true ; <nl> + isDistributed = true ; <nl> } <nl> } <nl> - return destributed ; <nl> + return isDistributed ; <nl> } <nl> <nl> / * * <nl> @ @ - 244 , 16 + 250 , 16 @ @ public class CommentsIndentationCheck extends AbstractCheck { <nl> * statement . <nl> * / <nl> private static boolean isDistributedThrowStatement ( DetailAST commentPreviousSibling ) { <nl> - boolean destributed = false ; <nl> + boolean isDistributed = false ; <nl> if ( commentPreviousSibling ! = null <nl> & & commentPreviousSibling . getType ( ) = = TokenTypes . LITERAL _ THROW ) { <nl> final DetailAST firstChild = commentPreviousSibling . getFirstChild ( ) ; <nl> final DetailAST nextSibling = firstChild . getNextSibling ( ) ; <nl> if ( nextSibling . getLineNo ( ) ! = commentPreviousSibling . getLineNo ( ) ) { <nl> - destributed = true ; <nl> + isDistributed = true ; <nl> } <nl> } <nl> - return destributed ; <nl> + return isDistributed ; <nl> } <nl> <nl> / * * <nl> @ @ - 440 , 7 + 446 , 7 @ @ public class CommentsIndentationCheck extends AbstractCheck { <nl> * @ param comment single line statement . <nl> * @ param nextStmt next statement . <nl> * / <nl> - private void handleSIngleLineCommentAtTheEndOfTheCodeBlock ( DetailAST prevStmt , <nl> + private void handleSingleLineCommentAtTheEndOfTheCodeBlock ( DetailAST prevStmt , <nl> DetailAST comment , <nl> DetailAST nextStmt ) { <nl> if ( prevStmt ! = null ) { <nl> @ @ - 454 , 8 + 460 , 9 @ @ public class CommentsIndentationCheck extends AbstractCheck { <nl> } <nl> } <nl> else if ( ! areSameLevelIndented ( comment , prevStmt , prevStmt ) ) { <nl> - log ( comment . getLineNo ( ) , MSG _ KEY _ SINGLE , prevStmt . getLineNo ( ) , <nl> - comment . getColumnNo ( ) , prevStmt . getColumnNo ( ) ) ; <nl> + final int prevStmtLineNo = prevStmt . getLineNo ( ) ; <nl> + log ( comment . getLineNo ( ) , MSG _ KEY _ SINGLE , prevStmtLineNo , <nl> + comment . getColumnNo ( ) , getLineStart ( prevStmtLineNo ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 552 , 7 + 559 , 8 @ @ public class CommentsIndentationCheck extends AbstractCheck { <nl> tokenWhichBeginsTheLine = root ; <nl> } <nl> if ( tokenWhichBeginsTheLine ! = null <nl> - & & isOnPreviousLine ( comment , tokenWhichBeginsTheLine ) ) { <nl> + & & isOnPreviousLine ( comment , tokenWhichBeginsTheLine ) <nl> + ) { <nl> previousStatement = tokenWhichBeginsTheLine ; <nl> } <nl> return previousStatement ; <nl> @ @ - 615 , 8 + 623 , 8 @ @ public class CommentsIndentationCheck extends AbstractCheck { <nl> / * * <nl> * Logs comment which can have the same indentation level as next or previous statement . <nl> * @ param comment comment . <nl> - * @ param nextStmt previous statement . <nl> - * @ param prevStmt next statement . <nl> + * @ param nextStmt next statement . <nl> + * @ param prevStmt previous statement . <nl> * / <nl> private void logMultilineIndentation ( DetailAST prevStmt , DetailAST comment , <nl> DetailAST nextStmt ) { <nl> @ @ - 723 , 20 + 731 , 34 @ @ public class CommentsIndentationCheck extends AbstractCheck { <nl> * @ param nextStmt next code statement . <nl> * @ return true if comment and next code statement are indented at the same level . <nl> * / <nl> - private static boolean areSameLevelIndented ( DetailAST comment , DetailAST prevStmt , <nl> + private boolean areSameLevelIndented ( DetailAST comment , DetailAST prevStmt , <nl> DetailAST nextStmt ) { <nl> final boolean result ; <nl> if ( prevStmt = = null ) { <nl> - result = comment . getColumnNo ( ) = = nextStmt . getColumnNo ( ) ; <nl> + result = comment . getColumnNo ( ) = = getLineStart ( nextStmt . getLineNo ( ) ) ; <nl> } <nl> else { <nl> - result = comment . getColumnNo ( ) = = nextStmt . getColumnNo ( ) <nl> - | | comment . getColumnNo ( ) = = prevStmt . getColumnNo ( ) ; <nl> + result = comment . getColumnNo ( ) = = getLineStart ( nextStmt . getLineNo ( ) ) <nl> + | | comment . getColumnNo ( ) = = getLineStart ( prevStmt . getLineNo ( ) ) ; <nl> } <nl> return result ; <nl> } <nl> <nl> / * * <nl> + * Get a column number where a code starts . <nl> + * @ param lineNo the line number to get column number in . <nl> + * @ return the column number where a code starts . <nl> + * / <nl> + private int getLineStart ( int lineNo ) { <nl> + final char [ ] line = getLines ( ) [ lineNo - 1 ] . toCharArray ( ) ; <nl> + int lineStart = 0 ; <nl> + while ( Character . isWhitespace ( line [ lineStart ] ) ) { <nl> + lineStart + + ; <nl> + } <nl> + return lineStart ; <nl> + } <nl> + <nl> + / * * <nl> * Checks if current single line comment is trailing comment , e . g . : <nl> * < p > <nl> * { @ code <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java <nl> index 578c8f6 . . 449c209 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java <nl> @ @ - 80 , 6 + 80 , 9 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { <nl> " 322 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 323 , 0 , 4 ) , <nl> " 336 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 337 , 0 , 4 ) , <nl> " 355 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 352 , 9 , 8 ) , <nl> + " 380 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 381 , 12 , 8 ) , <nl> + " 393 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 392 , 12 , 8 ) , <nl> + " 400 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 401 , 8 , 10 ) , <nl> } ; <nl> final String testInputFile = " InputCommentsIndentationCommentIsAtTheEndOfBlock . java " ; <nl> verify ( checkConfig , getPath ( testInputFile ) , expected ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> index 49a5aa8 . . 1e76977 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> @ @ - 362 , 6 + 362 , 46 @ @ public class InputCommentsIndentationCommentIsAtTheEndOfBlock { <nl> / / comment <nl> } <nl> <nl> + void foo53 ( ) { <nl> + / / comment <nl> + new Object ( ) <nl> + . toString ( ) ; <nl> + / / comment <nl> + } <nl> + <nl> + void foo54 ( ) { <nl> + / * comment * / <nl> + new Object ( ) <nl> + . toString ( ) ; <nl> + / / comment <nl> + } <nl> + <nl> + void foo55 ( ) { <nl> + / * violation * / <nl> + new Object ( ) <nl> + . toString ( ) ; <nl> + / / comment <nl> + } <nl> + <nl> + void foo56 ( ) { <nl> + new Object ( ) . toString ( ) ; <nl> + / / comment <nl> + } <nl> + <nl> + void foo57 ( ) { <nl> + new Object ( ) . toString ( ) ; <nl> + / / violation <nl> + } <nl> + <nl> + void foo58 ( ) { <nl> + / * <nl> + comment <nl> + * / <nl> + / / comment <nl> + foo1 ( ) ; <nl> + / / comment <nl> + } <nl> + <nl> / / We almost reached the end of the class here . <nl> } <nl> / / The END of the class .

TEST DIFF:
diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm 
 index aa3a216 . . 80f89a8 100644 
 - - - a / src / xdocs / writingjavadocchecks . xml . vm 
 + + + b / src / xdocs / writingjavadocchecks . xml . vm 
 @ @ - 53 , 10 + 53 , 10 @ @ public class MyClass { 
 Checkstyle can not parse something that looks like an HTML , so limitation appear . 
 < / p > 
 < p > 
 - The comment should be written in XHTML to build nested AST Tree that most Checks expect . This means that every HTML tag should have matching closed HTML tag or it is self - closed tag . 
 + The comment should be written in XHTML to build nested AST Tree that most Checks expect . This means that every HTML tag should have matching end HTML tag or it is a void tag . 
 < / p > 
 < p > 
 - The only exceptions are HTML 4 tags that are " don ' t require closing " tag , so , Checkstyle won ' t show error about missing closing tag , however , it leads to broken XHTML structure and as result leads to 
 + The only exceptions are HTML 4 tags whose end tag is optional , so , Checkstyle won ' t show error about missing end tag , however , it leads to broken XHTML structure and as result leads to 
 not - nested content of the HTML tags in Abstract Syntax Tree of the Javadoc comment . 
 < br / > 
 In other words if HTML tags are not closed Javadoc grammar cannot determine content of these tags , 
 @ @ - 267 , 14 + 267 , 14 @ @ class MyCheck extends AbstractJavadocCheck { 
 Checkstyle supports HTML4 tags in Javadoc comments : < a href = " https : / / www . w3 . org / TR / html4 / index / elements . html " > all HTML4 elements < / a > . 
 < / p > 
 < p > 
 - HTML 4 is picked just to have a list of tags that are " don ' t require closing tag " and a list of tags whose end tag is forbidden ( also known as < a href = " http : / / www . w3schools . com / html / html _ elements . asp " > empty html tags < / a > , for example < a href = " https : / / www . w3 . org / TR / html4 / struct / text . html # edef - BR " > BR tag < / a > ) . 
 + HTML 4 is picked just to have a list of elements whose end tag is optional and a list of < a href = " https : / / www . w3 . org / TR / html - markup / syntax . html # void - element " > void elements < / a > ( also known as < a href = " http : / / www . w3schools . com / html / html _ elements . asp " > empty html tags < / a > , for example < a href = " https : / / www . w3 . org / TR / html4 / struct / text . html # edef - BR " > BR tag < / a > ) . 
 < / p > 
 < p > 
 - HTML tags with " don ' t require closing tag " tag : & lt ; P & gt ; , & lt ; LI & gt ; , & lt ; TR & gt ; , & lt ; TD & gt ; , & lt ; TH & gt ; , & lt ; BODY & gt ; , & lt ; COLGROUP & gt ; , & lt ; DD & gt ; , 
 + HTML elements whose end tag is optional : & lt ; P & gt ; , & lt ; LI & gt ; , & lt ; TR & gt ; , & lt ; TD & gt ; , & lt ; TH & gt ; , & lt ; BODY & gt ; , & lt ; COLGROUP & gt ; , & lt ; DD & gt ; , 
 & lt ; DT & gt ; , & lt ; HEAD & gt ; , & lt ; HTML & gt ; , & lt ; OPTION & gt ; , & lt ; TBODY & gt ; , & lt ; THEAD & gt ; , & lt ; TFOOT & gt ; . 
 < / p > 
 < p > 
 - Empty HTML tags : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , 
 + Void HTML elements : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , 
 & lt ; HR & gt ; , & lt ; IMG & gt ; , & lt ; INPUT & gt ; , & lt ; ISINDEX & gt ; , & lt ; LINK & gt ; , & lt ; META & gt ; , & lt ; PARAM & gt ; . 
 < / p > 
 < p >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 index 357016e . . 90ad4fd 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 @ @ - 149 , 7 + 149 , 7 @ @ public class CommentsIndentationCheck extends AbstractCheck { 
 handleSingleLineCommentInEmptyCodeBlock ( singleLineComment , nextStmt ) ; 
 } 
 else if ( isSingleLineCommentAtTheEndOfTheCodeBlock ( nextStmt ) ) { 
 - handleSIngleLineCommentAtTheEndOfTheCodeBlock ( prevStmt , singleLineComment , 
 + handleSingleLineCommentAtTheEndOfTheCodeBlock ( prevStmt , singleLineComment , 
 nextStmt ) ; 
 } 
 else if ( nextStmt ! = null 
 @ @ - 200 , 7 + 200 , 7 @ @ public class CommentsIndentationCheck extends AbstractCheck { 
 * / 
 private static boolean isDistributedMethodChainOrConcatenationStatement ( 
 DetailAST comment , DetailAST commentPreviousSibling ) { 
 - boolean destributed = false ; 
 + boolean isDistributed = false ; 
 if ( commentPreviousSibling ! = null 
 & & commentPreviousSibling . getType ( ) = = TokenTypes . SEMI 
 & & comment . getLineNo ( ) - commentPreviousSibling . getLineNo ( ) = = 1 ) { 
 @ @ - 208 , 12 + 208 , 18 @ @ public class CommentsIndentationCheck extends AbstractCheck { 
 while ( currentToken . getFirstChild ( ) ! = null ) { 
 currentToken = currentToken . getFirstChild ( ) ; 
 } 
 - if ( currentToken . getType ( ) ! = TokenTypes . COMMENT _ CONTENT 
 - & & commentPreviousSibling . getLineNo ( ) ! = currentToken . getLineNo ( ) ) { 
 - destributed = true ; 
 + if ( currentToken . getType ( ) = = TokenTypes . COMMENT _ CONTENT ) { 
 + currentToken = currentToken . getParent ( ) ; 
 + while ( currentToken . getType ( ) = = TokenTypes . SINGLE _ LINE _ COMMENT 
 + | | currentToken . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN ) { 
 + currentToken = currentToken . getNextSibling ( ) ; 
 + } 
 + } 
 + if ( commentPreviousSibling . getLineNo ( ) ! = currentToken . getLineNo ( ) ) { 
 + isDistributed = true ; 
 } 
 } 
 - return destributed ; 
 + return isDistributed ; 
 } 
 
 / * * 
 @ @ - 224 , 16 + 230 , 16 @ @ public class CommentsIndentationCheck extends AbstractCheck { 
 * statement . 
 * / 
 private static boolean isDistributedReturnStatement ( DetailAST commentPreviousSibling ) { 
 - boolean destributed = false ; 
 + boolean isDistributed = false ; 
 if ( commentPreviousSibling ! = null 
 & & commentPreviousSibling . getType ( ) = = TokenTypes . LITERAL _ RETURN ) { 
 final DetailAST firstChild = commentPreviousSibling . getFirstChild ( ) ; 
 final DetailAST nextSibling = firstChild . getNextSibling ( ) ; 
 if ( nextSibling ! = null ) { 
 - destributed = true ; 
 + isDistributed = true ; 
 } 
 } 
 - return destributed ; 
 + return isDistributed ; 
 } 
 
 / * * 
 @ @ - 244 , 16 + 250 , 16 @ @ public class CommentsIndentationCheck extends AbstractCheck { 
 * statement . 
 * / 
 private static boolean isDistributedThrowStatement ( DetailAST commentPreviousSibling ) { 
 - boolean destributed = false ; 
 + boolean isDistributed = false ; 
 if ( commentPreviousSibling ! = null 
 & & commentPreviousSibling . getType ( ) = = TokenTypes . LITERAL _ THROW ) { 
 final DetailAST firstChild = commentPreviousSibling . getFirstChild ( ) ; 
 final DetailAST nextSibling = firstChild . getNextSibling ( ) ; 
 if ( nextSibling . getLineNo ( ) ! = commentPreviousSibling . getLineNo ( ) ) { 
 - destributed = true ; 
 + isDistributed = true ; 
 } 
 } 
 - return destributed ; 
 + return isDistributed ; 
 } 
 
 / * * 
 @ @ - 440 , 7 + 446 , 7 @ @ public class CommentsIndentationCheck extends AbstractCheck { 
 * @ param comment single line statement . 
 * @ param nextStmt next statement . 
 * / 
 - private void handleSIngleLineCommentAtTheEndOfTheCodeBlock ( DetailAST prevStmt , 
 + private void handleSingleLineCommentAtTheEndOfTheCodeBlock ( DetailAST prevStmt , 
 DetailAST comment , 
 DetailAST nextStmt ) { 
 if ( prevStmt ! = null ) { 
 @ @ - 454 , 8 + 460 , 9 @ @ public class CommentsIndentationCheck extends AbstractCheck { 
 } 
 } 
 else if ( ! areSameLevelIndented ( comment , prevStmt , prevStmt ) ) { 
 - log ( comment . getLineNo ( ) , MSG _ KEY _ SINGLE , prevStmt . getLineNo ( ) , 
 - comment . getColumnNo ( ) , prevStmt . getColumnNo ( ) ) ; 
 + final int prevStmtLineNo = prevStmt . getLineNo ( ) ; 
 + log ( comment . getLineNo ( ) , MSG _ KEY _ SINGLE , prevStmtLineNo , 
 + comment . getColumnNo ( ) , getLineStart ( prevStmtLineNo ) ) ; 
 } 
 } 
 
 @ @ - 552 , 7 + 559 , 8 @ @ public class CommentsIndentationCheck extends AbstractCheck { 
 tokenWhichBeginsTheLine = root ; 
 } 
 if ( tokenWhichBeginsTheLine ! = null 
 - & & isOnPreviousLine ( comment , tokenWhichBeginsTheLine ) ) { 
 + & & isOnPreviousLine ( comment , tokenWhichBeginsTheLine ) 
 + ) { 
 previousStatement = tokenWhichBeginsTheLine ; 
 } 
 return previousStatement ; 
 @ @ - 615 , 8 + 623 , 8 @ @ public class CommentsIndentationCheck extends AbstractCheck { 
 / * * 
 * Logs comment which can have the same indentation level as next or previous statement . 
 * @ param comment comment . 
 - * @ param nextStmt previous statement . 
 - * @ param prevStmt next statement . 
 + * @ param nextStmt next statement . 
 + * @ param prevStmt previous statement . 
 * / 
 private void logMultilineIndentation ( DetailAST prevStmt , DetailAST comment , 
 DetailAST nextStmt ) { 
 @ @ - 723 , 20 + 731 , 34 @ @ public class CommentsIndentationCheck extends AbstractCheck { 
 * @ param nextStmt next code statement . 
 * @ return true if comment and next code statement are indented at the same level . 
 * / 
 - private static boolean areSameLevelIndented ( DetailAST comment , DetailAST prevStmt , 
 + private boolean areSameLevelIndented ( DetailAST comment , DetailAST prevStmt , 
 DetailAST nextStmt ) { 
 final boolean result ; 
 if ( prevStmt = = null ) { 
 - result = comment . getColumnNo ( ) = = nextStmt . getColumnNo ( ) ; 
 + result = comment . getColumnNo ( ) = = getLineStart ( nextStmt . getLineNo ( ) ) ; 
 } 
 else { 
 - result = comment . getColumnNo ( ) = = nextStmt . getColumnNo ( ) 
 - | | comment . getColumnNo ( ) = = prevStmt . getColumnNo ( ) ; 
 + result = comment . getColumnNo ( ) = = getLineStart ( nextStmt . getLineNo ( ) ) 
 + | | comment . getColumnNo ( ) = = getLineStart ( prevStmt . getLineNo ( ) ) ; 
 } 
 return result ; 
 } 
 
 / * * 
 + * Get a column number where a code starts . 
 + * @ param lineNo the line number to get column number in . 
 + * @ return the column number where a code starts . 
 + * / 
 + private int getLineStart ( int lineNo ) { 
 + final char [ ] line = getLines ( ) [ lineNo - 1 ] . toCharArray ( ) ; 
 + int lineStart = 0 ; 
 + while ( Character . isWhitespace ( line [ lineStart ] ) ) { 
 + lineStart + + ; 
 + } 
 + return lineStart ; 
 + } 
 + 
 + / * * 
 * Checks if current single line comment is trailing comment , e . g . : 
 * < p > 
 * { @ code 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java 
 index 578c8f6 . . 449c209 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java 
 @ @ - 80 , 6 + 80 , 9 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { 
 " 322 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 323 , 0 , 4 ) , 
 " 336 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 337 , 0 , 4 ) , 
 " 355 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 352 , 9 , 8 ) , 
 + " 380 : " + getCheckMessage ( MSG _ KEY _ BLOCK , 381 , 12 , 8 ) , 
 + " 393 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 392 , 12 , 8 ) , 
 + " 400 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 401 , 8 , 10 ) , 
 } ; 
 final String testInputFile = " InputCommentsIndentationCommentIsAtTheEndOfBlock . java " ; 
 verify ( checkConfig , getPath ( testInputFile ) , expected ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 index 49a5aa8 . . 1e76977 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 @ @ - 362 , 6 + 362 , 46 @ @ public class InputCommentsIndentationCommentIsAtTheEndOfBlock { 
 / / comment 
 } 
 
 + void foo53 ( ) { 
 + / / comment 
 + new Object ( ) 
 + . toString ( ) ; 
 + / / comment 
 + } 
 + 
 + void foo54 ( ) { 
 + / * comment * / 
 + new Object ( ) 
 + . toString ( ) ; 
 + / / comment 
 + } 
 + 
 + void foo55 ( ) { 
 + / * violation * / 
 + new Object ( ) 
 + . toString ( ) ; 
 + / / comment 
 + } 
 + 
 + void foo56 ( ) { 
 + new Object ( ) . toString ( ) ; 
 + / / comment 
 + } 
 + 
 + void foo57 ( ) { 
 + new Object ( ) . toString ( ) ; 
 + / / violation 
 + } 
 + 
 + void foo58 ( ) { 
 + / * 
 + comment 
 + * / 
 + / / comment 
 + foo1 ( ) ; 
 + / / comment 
 + } 
 + 
 / / We almost reached the end of the class here . 
 } 
 / / The END of the class .
