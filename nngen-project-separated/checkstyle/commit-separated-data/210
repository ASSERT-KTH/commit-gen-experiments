BLEU SCORE: 0.043383324645517855

TEST MSG: minor : log the build cause in Jenkins pipeline
GENERATED MSG: Issue # 5953 : Setup ' mvn compile ' and ' mvn package ' builds in Jenkins

TEST DIFF (one line): diff - - git a / Jenkinsfile b / Jenkinsfile <nl> index 215315d . . 902095b 100644 <nl> - - - a / Jenkinsfile <nl> + + + b / Jenkinsfile <nl> @ @ - 76 , 6 + 76 , 12 @ @ pipeline { <nl> <nl> stages { <nl> <nl> + stage ( " Initial " ) { <nl> + steps { <nl> + echo GREEN ( " $ { getCauseDescription ( currentBuild ) } " ) <nl> + } <nl> + } <nl> + <nl> stage ( " Prepare ( triggered by hand ) " ) { <nl> when { expression { getCauseDescription ( currentBuild ) . contains ( " Started by user " ) } } <nl> steps {
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> index 343559c . . a3789c6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> @ @ - 29 , 10 + 29 , 14 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; <nl> <nl> / * * <nl> * < p > <nl> - * Checks that method and { @ code catch } parameter names conform to a format specified <nl> + * Checks that method parameter names conform to a format specified <nl> * by the format property . By using { @ code accessModifiers } property it is possible <nl> * to specify different formats for methods at different visibility levels . <nl> * < / p > <nl> + * < p > <nl> + * To validate { @ code catch } parameters please use <nl> + * < a href = " # CatchParameterName " > CatchParameterName < / a > . <nl> + * < / p > <nl> * < ul > <nl> * < li > <nl> * Property { @ code format } - Specifies valid identifiers . Default value is <nl> diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml <nl> index a618714 . . 98b985a 100644 <nl> - - - a / src / xdocs / config _ naming . xml <nl> + + + b / src / xdocs / config _ naming . xml <nl> @ @ - 1362 , 10 + 1362 , 14 @ @ class MyClass { <nl> < p > Since Checkstyle 3 . 0 < / p > <nl> < subsection name = " Description " > <nl> < p > <nl> - Checks that method and < code > catch < / code > parameter names conform to a format specified <nl> + Checks that method parameter names conform to a format specified <nl> by the format property . By using < code > accessModifiers < / code > property it is possible <nl> to specify different formats for methods at different visibility levels . <nl> < / p > <nl> + < p > <nl> + To validate < code > catch < / code > parameters please use <nl> + < a href = " # CatchParameterName " > CatchParameterName < / a > . <nl> + < / p > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " >

TEST DIFF:
diff - - git a / Jenkinsfile b / Jenkinsfile 
 index 215315d . . 902095b 100644 
 - - - a / Jenkinsfile 
 + + + b / Jenkinsfile 
 @ @ - 76 , 6 + 76 , 12 @ @ pipeline { 
 
 stages { 
 
 + stage ( " Initial " ) { 
 + steps { 
 + echo GREEN ( " $ { getCauseDescription ( currentBuild ) } " ) 
 + } 
 + } 
 + 
 stage ( " Prepare ( triggered by hand ) " ) { 
 when { expression { getCauseDescription ( currentBuild ) . contains ( " Started by user " ) } } 
 steps {

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 index 343559c . . a3789c6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 @ @ - 29 , 10 + 29 , 14 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; 
 
 / * * 
 * < p > 
 - * Checks that method and { @ code catch } parameter names conform to a format specified 
 + * Checks that method parameter names conform to a format specified 
 * by the format property . By using { @ code accessModifiers } property it is possible 
 * to specify different formats for methods at different visibility levels . 
 * < / p > 
 + * < p > 
 + * To validate { @ code catch } parameters please use 
 + * < a href = " # CatchParameterName " > CatchParameterName < / a > . 
 + * < / p > 
 * < ul > 
 * < li > 
 * Property { @ code format } - Specifies valid identifiers . Default value is 
 diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml 
 index a618714 . . 98b985a 100644 
 - - - a / src / xdocs / config _ naming . xml 
 + + + b / src / xdocs / config _ naming . xml 
 @ @ - 1362 , 10 + 1362 , 14 @ @ class MyClass { 
 < p > Since Checkstyle 3 . 0 < / p > 
 < subsection name = " Description " > 
 < p > 
 - Checks that method and < code > catch < / code > parameter names conform to a format specified 
 + Checks that method parameter names conform to a format specified 
 by the format property . By using < code > accessModifiers < / code > property it is possible 
 to specify different formats for methods at different visibility levels . 
 < / p > 
 + < p > 
 + To validate < code > catch < / code > parameters please use 
 + < a href = " # CatchParameterName " > CatchParameterName < / a > . 
 + < / p > 
 < / subsection > 
 
 < subsection name = " Properties " >
