BLEU SCORE: 0.041961149062965476

TEST MSG: Issue # 6586 : aligned javadoc / xdoc for RequireThisCheck
GENERATED MSG: Some enhancement and documentation for RequireThis check .

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index 452c30d . . 63d7ab8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 40 , 34 + 40 , 13 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; <nl> import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; <nl> <nl> / * * <nl> - * < p > Checks that code doesn ' t rely on the & quot ; this & quot ; default . <nl> - * That is references to instance variables and methods of the present <nl> - * object are explicitly of the form & quot ; this . varName & quot ; or <nl> - * & quot ; this . methodName ( args ) & quot ; . <nl> + * < p > <nl> + * Checks that references to instance variables and methods of the present <nl> + * object are explicitly of the form " this . varName " or " this . methodName ( args ) " <nl> + * and that those references don ' t rely on the default behavior when " this . " is absent . <nl> * < / p > <nl> - * Check has the following options : <nl> - * < p > < b > checkFields < / b > - whether to check references to fields . Default value is < b > true < / b > . < / p > <nl> - * < p > < b > checkMethods < / b > - whether to check references to methods . <nl> - * Default value is < b > true < / b > . < / p > <nl> - * < p > < b > validateOnlyOverlapping < / b > - whether to check only overlapping by variables or <nl> - * arguments . Default value is < b > true < / b > . < / p > <nl> - * <nl> * < p > Warning : the Check is very controversial if ' validateOnlyOverlapping ' option is set to ' false ' <nl> * and not that actual nowadays . < / p > <nl> - * <nl> - * < p > Examples of use : <nl> - * < pre > <nl> - * & lt ; module name = & quot ; RequireThis & quot ; / & gt ; <nl> - * < / pre > <nl> - * An example of how to configure to check { @ code this } qualifier for <nl> - * methods only : <nl> - * < pre > <nl> - * & lt ; module name = & quot ; RequireThis & quot ; & gt ; <nl> - * & lt ; property name = & quot ; checkFields & quot ; value = & quot ; false & quot ; / & gt ; <nl> - * & lt ; property name = & quot ; checkMethods & quot ; value = & quot ; true & quot ; / & gt ; <nl> - * & lt ; / module & gt ; <nl> - * < / pre > <nl> - * <nl> * < p > Rationale : < / p > <nl> * < ol > <nl> * < li > <nl> @ @ - 80 , 13 + 59 , 157 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; <nl> * static and non - static methods ) . <nl> * < / li > <nl> * < / ol > <nl> - * <nl> * < p > Limitations : Nothing is currently done about static variables <nl> * or catch - blocks . Static methods invoked on a class name seem to be OK ; <nl> * both the class name and the method name have a DOT parent . <nl> * Non - static methods invoked on either this or a variable name seem to be <nl> - * OK , likewise . < / p > <nl> + * OK , likewise . <nl> + * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code checkFields } - Control whether to check references to fields . <nl> + * Default value is { @ code true } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code checkMethods } - Control whether to check references to methods . <nl> + * Default value is { @ code true } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code validateOnlyOverlapping } - Control whether to check only <nl> + * overlapping by variables or arguments . <nl> + * Default value is { @ code true } . <nl> + * < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * To configure the default check : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; RequireThis & quot ; / & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure to check the { @ code this } qualifier for fields only : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; RequireThis & quot ; & gt ; <nl> + * & lt ; property name = & quot ; checkMethods & quot ; value = & quot ; false & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * Examples of how the check works if validateOnlyOverlapping option is set to true : <nl> + * < / p > <nl> + * < pre > <nl> + * public static class A { <nl> + * private int field1 ; <nl> + * private int field2 ; <nl> + * <nl> + * public A ( int field1 ) { <nl> + * / / Overlapping by constructor argument . <nl> + * field1 = field1 ; / / violation : Reference to instance variable " field1 " needs " this " . <nl> + * field2 = 0 ; <nl> + * } <nl> + * <nl> + * void foo3 ( ) { <nl> + * String field1 = " values " ; <nl> + * / / Overlapping by local variable . <nl> + * field1 = field1 ; / / violation : Reference to instance variable " field1 " needs " this " . <nl> + * } <nl> + * } <nl> + * <nl> + * public static class B { <nl> + * private int field ; <nl> + * <nl> + * public A ( int f ) { <nl> + * field = f ; <nl> + * } <nl> + * <nl> + * String addSuffixToField ( String field ) { <nl> + * / / Overlapping by method argument . Equal to " return field = field + " suffix " ; " <nl> + * return field + = " suffix " ; / / violation : Reference to instance variable " field " needs " this " . <nl> + * } <nl> + * } <nl> + * < / pre > <nl> + * < p > <nl> + * Please , be aware of the following logic , which is implemented in the check : <nl> + * < / p > <nl> + * < p > <nl> + * 1 ) If you arrange ' this ' in your code on your own , the check will not raise violation for <nl> + * variables which use ' this ' to reference a class field , for example : <nl> + * < / p > <nl> + * < pre > <nl> + * public class C { <nl> + * private int scale ; <nl> + * private int x ; <nl> + * public void foo ( int scale ) { <nl> + * scale = this . scale ; / / no violation <nl> + * if ( scale & gt ; 0 ) { <nl> + * scale = - scale ; / / no violation <nl> + * } <nl> + * x * = scale ; <nl> + * } <nl> + * } <nl> + * < / pre > <nl> + * < p > <nl> + * 2 ) If method parameter is returned from the method , the check will not raise violation for <nl> + * returned variable / parameter , for example : <nl> + * < / p > <nl> + * < pre > <nl> + * public class D { <nl> + * private String prefix ; <nl> + * public String modifyPrefix ( String prefix ) { <nl> + * prefix = " ^ " + prefix + " $ " / / no violation ( modification of parameter ) <nl> + * return prefix ; / / modified method parameter is returned from the method <nl> + * } <nl> + * } <nl> + * < / pre > <nl> + * < p > <nl> + * Examples of how the check works if validateOnlyOverlapping option is set to false : <nl> + * < / p > <nl> + * < pre > <nl> + * public static class A { <nl> + * private int field1 ; <nl> + * private int field2 ; <nl> + * <nl> + * public A ( int field1 ) { <nl> + * field1 = field1 ; / / violation : Reference to instance variable " field1 " needs " this " . <nl> + * field2 = 0 ; / / violation : Reference to instance variable " field2 " needs " this " . <nl> + * String field2 ; <nl> + * field2 = " 0 " ; / / No violation . Local var allowed <nl> + * } <nl> + * <nl> + * void foo3 ( ) { <nl> + * String field1 = " values " ; <nl> + * field1 = field1 ; / / violation : Reference to instance variable " field1 " needs " this " . <nl> + * } <nl> + * } <nl> + * <nl> + * public static class B { <nl> + * private int field ; <nl> + * <nl> + * public A ( int f ) { <nl> + * field = f ; / / violation : Reference to instance variable " field " needs " this " . <nl> + * } <nl> + * <nl> + * String addSuffixToField ( String field ) { <nl> + * return field + = " suffix " ; / / violation : Reference to instance variable " field " needs " this " . <nl> + * } <nl> + * } <nl> + * <nl> + * / / If the variable is locally defined , there won ' t be a violation provided the variable <nl> + * / / doesn ' t overlap . <nl> + * class C { <nl> + * private String s1 = " foo1 " ; <nl> + * String s2 = " foo2 " ; <nl> + * <nl> + * C ( ) { <nl> + * s1 = " bar1 " ; / / Violation . Reference to instance variable ' s1 ' needs " this . " . <nl> + * String s2 ; <nl> + * s2 = " bar2 " ; / / No violation . Local var allowed . <nl> + * s2 + = s2 ; / / Violation . Overlapping . Reference to instance variable ' s2 ' needs " this . " . <nl> + * } <nl> + * } <nl> + * < / pre > <nl> * <nl> + * @ since 3 . 4 <nl> * / <nl> / / - @ cs [ ClassDataAbstractionCoupling ] This check requires to work with and identify many frames . <nl> @ FileStatefulCheck <nl> @ @ - 150 , 15 + 273 , 15 @ @ public class RequireThisCheck extends AbstractCheck { <nl> / * * Tree of all the parsed frames . * / <nl> private Map < DetailAST , AbstractFrame > frames ; <nl> <nl> - / * * Whether we should check fields usage . * / <nl> + / * * Control whether to check references to fields . * / <nl> private boolean checkFields = true ; <nl> - / * * Whether we should check methods usage . * / <nl> + / * * Control whether to check references to methods . * / <nl> private boolean checkMethods = true ; <nl> - / * * Whether we should check only overlapping by variables or arguments . * / <nl> + / * * Control whether to check only overlapping by variables or arguments . * / <nl> private boolean validateOnlyOverlapping = true ; <nl> <nl> / * * <nl> - * Setter for checkFields property . <nl> + * Setter to control whether to check references to fields . <nl> * @ param checkFields should we check fields usage or not . <nl> * / <nl> public void setCheckFields ( boolean checkFields ) { <nl> @ @ - 166 , 7 + 289 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Setter for checkMethods property . <nl> + * Setter to control whether to check references to methods . <nl> * @ param checkMethods should we check methods usage or not . <nl> * / <nl> public void setCheckMethods ( boolean checkMethods ) { <nl> @ @ - 174 , 7 + 297 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Setter for validateOnlyOverlapping property . <nl> + * Setter to control whether to check only overlapping by variables or arguments . <nl> * @ param validateOnlyOverlapping should we check only overlapping by variables or arguments . <nl> * / <nl> public void setValidateOnlyOverlapping ( boolean validateOnlyOverlapping ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 3a87dc5 . . 1dc7130 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 110 , 6 + 110 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " PackageAnnotation " , <nl> " PackageName " , <nl> " ParameterName " , <nl> + " RequireThis " , <nl> " RightCurly " , <nl> " StaticVariableName " , <nl> " SuppressWarnings " , <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 6f238e1 . . e1a5fce 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 3730 , 8 + 3730 , 8 @ @ public class AnnotationLocationCheck extends AbstractCheck { <nl> < / section > <nl> <nl> < section name = " RequireThis " > <nl> + < p > Since Checkstyle 3 . 4 < / p > <nl> < subsection name = " Description " id = " RequireThis _ Description " > <nl> - < p > Since Checkstyle 3 . 4 < / p > <nl> < p > <nl> Checks that references to instance variables and methods of the present <nl> object are explicitly of the form & quot ; this . varName & quot ; or <nl> @ @ - 3759 , 6 + 3759 , 15 @ @ public class AnnotationLocationCheck extends AbstractCheck { <nl> < / li > <nl> < / ol > <nl> < / subsection > <nl> + < subsection name = " Notes " id = " RequireThis _ Notes " > <nl> + < p > <nl> + Limitations : Nothing is currently done about static variables <nl> + or catch - blocks . Static methods invoked on a class name seem to be OK ; <nl> + both the class name and the method name have a DOT parent . <nl> + Non - static methods invoked on either this or a variable name seem to be <nl> + OK , likewise . <nl> + < / p > <nl> + < / subsection > <nl> <nl> < subsection name = " Properties " id = " RequireThis _ Properties " > <nl> < table > <nl> @ @ - 3771 , 21 + 3780 , 21 @ @ public class AnnotationLocationCheck extends AbstractCheck { <nl> < / tr > <nl> < tr > <nl> < td > checkFields < / td > <nl> - < td > Whether to check references to fields . < / td > <nl> + < td > Control whether to check references to fields . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > < code > true < / code > < / td > <nl> < td > 3 . 4 < / td > <nl> < / tr > <nl> < tr > <nl> < td > checkMethods < / td > <nl> - < td > Whether to check references to methods . < / td > <nl> + < td > Control whether to check references to methods . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > < code > true < / code > < / td > <nl> < td > 3 . 4 < / td > <nl> < / tr > <nl> < tr > <nl> < td > validateOnlyOverlapping < / td > <nl> - < td > Whether to check only overlapping by variables or arguments . < / td > <nl> + < td > Control whether to check only overlapping by variables or arguments . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > < code > true < / code > < / td > <nl> < td > 6 . 17 < / td > <nl> @ @ - 3832 , 15 + 3841 , 15 @ @ public static class A { <nl> } <nl> <nl> public static class B { <nl> - private int field1 ; <nl> + private int field ; <nl> <nl> public A ( int f ) { <nl> - field1 = f ; <nl> + field = f ; <nl> } <nl> <nl> - String addSuffixToField ( String field1 ) { <nl> - / / Overlapping by method argument . Equal to " return field1 = field1 + " suffix " ; " <nl> - return field1 + = " suffix " ; / / violation : Reference to instance variable " field1 " needs " this " . <nl> + String addSuffixToField ( String field ) { <nl> + / / Overlapping by method argument . Equal to " return field = field + " suffix " ; " <nl> + return field + = " suffix " ; / / violation : Reference to instance variable " field " needs " this " . <nl> } <nl> } <nl> < / source > <nl> @ @ - 3899 , 14 + 3908 , 14 @ @ public static class A { <nl> } <nl> <nl> public static class B { <nl> - private int field1 ; <nl> + private int field ; <nl> <nl> public A ( int f ) { <nl> - field1 = f ; / / violation : Reference to instance variable " field1 " needs " this " . <nl> + field = f ; / / violation : Reference to instance variable " field " needs " this " . <nl> } <nl> <nl> - String addSuffixToField ( String field1 ) { <nl> - return field1 + = " suffix " ; / / violation : Reference to instance variable " field1 " needs " this " . <nl> + String addSuffixToField ( String field ) { <nl> + return field + = " suffix " ; / / violation : Reference to instance variable " field " needs " this " . <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index c8dbcc2 . . 60b0117 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 275 , 6 + 275 , 8 @ @ <nl> < classpath refid = " run . classpath " / > <nl> < property key = " checkstyle . cache . file " file = " target / cachefile " / > <nl> < property key = " checkstyle . header . file " file = " docs / java . header " / > <nl> + < property key = " checkstyle . suppressions . file " <nl> + file = " docs / suppressions . xml " / > <nl> < / checkstyle > <nl> < mkdir dir = " target / style / frames " / > <nl> < mkdir dir = " target / style / noframes " / > <nl> diff - - git a / contrib / checkstyle - frames . xsl b / contrib / checkstyle - frames . xsl <nl> index 749ac69 . . d50f80a 100644 <nl> - - - a / contrib / checkstyle - frames . xsl <nl> + + + b / contrib / checkstyle - frames . xsl <nl> @ @ - 207 , 6 + 207 , 7 @ @ <nl> < / head > <nl> < body > <nl> < h2 > Files < / h2 > <nl> + < p > < a href = " overview - frame . html " target = " fileFrame " > Summary < / a > < / p > <nl> < p > <nl> < table width = " 100 % " > <nl> < ! - - For each file create its part - - > <nl> diff - - git a / docs / releasenotes . html b / docs / releasenotes . html <nl> index 2151d45 . . 484592a 100644 <nl> - - - a / docs / releasenotes . html <nl> + + + b / docs / releasenotes . html <nl> @ @ - 103 , 8 + 103 , 11 @ @ <nl> < li class = " body " > xmllogger . dtd is out - of - date <nl> ( bug 847974 ) . < / li > <nl> <nl> - 	 < li class = " body " > ArrayTypeStyle shouldn ' t check method definition <nl> - 	 ( bug 849450 ) . < / li > <nl> + < li class = " body " > ArrayTypeStyle shouldn ' t check method definition <nl> + ( bug 849450 ) . < / li > <nl> + <nl> + < li class = " body " > Added link to summary page in <nl> + checkstyle - frames . xsl ( bug 852397 ) . < / li > <nl> < / ul > <nl> <nl> < a name = " release3 _ 2 " > < / a > <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> index 8673e04 . . 40e6696 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> @ @ - 221 , 7 + 221 , 7 @ @ public final class IllegalTypeCheck extends AbstractFormatCheck <nl> { <nl> mIgnoredMethodNames . clear ( ) ; <nl> for ( int i = 0 ; i < aMethodNames . length ; i + + ) { <nl> - mIllegalClassNames . add ( aMethodNames [ i ] ) ; <nl> + mIgnoredMethodNames . add ( aMethodNames [ i ] ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> index f9de8e7 . . 6bf3cba 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> @ @ - 20 , 4 + 20 , 19 @ @ public class IllegalTypeCheckTest extends BaseCheckTestCase { <nl> <nl> verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalType . java " ) , expected ) ; <nl> } <nl> + <nl> + public void testIgnoreMethodNames ( ) throws Exception { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( IllegalTypeCheck . class ) ; <nl> + checkConfig . addAttribute ( " ignoredMethodNames " , " table2 " ) ; <nl> + <nl> + String [ ] expected = { <nl> + " 6 : 13 : Declaring variables , return values or parameters of type ' AbstractClass ' is not allowed . " , <nl> + " 9 : 13 : Declaring variables , return values or parameters of type " <nl> + + " ' au . com . redhillconsulting . jamaica . tools . checkstyle . InputIllegalType . AbstractClass ' " <nl> + + " is not allowed . " , <nl> + " 16 : 13 : Declaring variables , return values or parameters of type ' java . util . Hashtable ' is not allowed . " , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalType . java " ) , expected ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index 452c30d . . 63d7ab8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 40 , 34 + 40 , 13 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; 
 import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; 
 
 / * * 
 - * < p > Checks that code doesn ' t rely on the & quot ; this & quot ; default . 
 - * That is references to instance variables and methods of the present 
 - * object are explicitly of the form & quot ; this . varName & quot ; or 
 - * & quot ; this . methodName ( args ) & quot ; . 
 + * < p > 
 + * Checks that references to instance variables and methods of the present 
 + * object are explicitly of the form " this . varName " or " this . methodName ( args ) " 
 + * and that those references don ' t rely on the default behavior when " this . " is absent . 
 * < / p > 
 - * Check has the following options : 
 - * < p > < b > checkFields < / b > - whether to check references to fields . Default value is < b > true < / b > . < / p > 
 - * < p > < b > checkMethods < / b > - whether to check references to methods . 
 - * Default value is < b > true < / b > . < / p > 
 - * < p > < b > validateOnlyOverlapping < / b > - whether to check only overlapping by variables or 
 - * arguments . Default value is < b > true < / b > . < / p > 
 - * 
 * < p > Warning : the Check is very controversial if ' validateOnlyOverlapping ' option is set to ' false ' 
 * and not that actual nowadays . < / p > 
 - * 
 - * < p > Examples of use : 
 - * < pre > 
 - * & lt ; module name = & quot ; RequireThis & quot ; / & gt ; 
 - * < / pre > 
 - * An example of how to configure to check { @ code this } qualifier for 
 - * methods only : 
 - * < pre > 
 - * & lt ; module name = & quot ; RequireThis & quot ; & gt ; 
 - * & lt ; property name = & quot ; checkFields & quot ; value = & quot ; false & quot ; / & gt ; 
 - * & lt ; property name = & quot ; checkMethods & quot ; value = & quot ; true & quot ; / & gt ; 
 - * & lt ; / module & gt ; 
 - * < / pre > 
 - * 
 * < p > Rationale : < / p > 
 * < ol > 
 * < li > 
 @ @ - 80 , 13 + 59 , 157 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; 
 * static and non - static methods ) . 
 * < / li > 
 * < / ol > 
 - * 
 * < p > Limitations : Nothing is currently done about static variables 
 * or catch - blocks . Static methods invoked on a class name seem to be OK ; 
 * both the class name and the method name have a DOT parent . 
 * Non - static methods invoked on either this or a variable name seem to be 
 - * OK , likewise . < / p > 
 + * OK , likewise . 
 + * < / p > 
 + * < ul > 
 + * < li > 
 + * Property { @ code checkFields } - Control whether to check references to fields . 
 + * Default value is { @ code true } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code checkMethods } - Control whether to check references to methods . 
 + * Default value is { @ code true } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code validateOnlyOverlapping } - Control whether to check only 
 + * overlapping by variables or arguments . 
 + * Default value is { @ code true } . 
 + * < / li > 
 + * < / ul > 
 + * < p > 
 + * To configure the default check : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; RequireThis & quot ; / & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure to check the { @ code this } qualifier for fields only : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; RequireThis & quot ; & gt ; 
 + * & lt ; property name = & quot ; checkMethods & quot ; value = & quot ; false & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * Examples of how the check works if validateOnlyOverlapping option is set to true : 
 + * < / p > 
 + * < pre > 
 + * public static class A { 
 + * private int field1 ; 
 + * private int field2 ; 
 + * 
 + * public A ( int field1 ) { 
 + * / / Overlapping by constructor argument . 
 + * field1 = field1 ; / / violation : Reference to instance variable " field1 " needs " this " . 
 + * field2 = 0 ; 
 + * } 
 + * 
 + * void foo3 ( ) { 
 + * String field1 = " values " ; 
 + * / / Overlapping by local variable . 
 + * field1 = field1 ; / / violation : Reference to instance variable " field1 " needs " this " . 
 + * } 
 + * } 
 + * 
 + * public static class B { 
 + * private int field ; 
 + * 
 + * public A ( int f ) { 
 + * field = f ; 
 + * } 
 + * 
 + * String addSuffixToField ( String field ) { 
 + * / / Overlapping by method argument . Equal to " return field = field + " suffix " ; " 
 + * return field + = " suffix " ; / / violation : Reference to instance variable " field " needs " this " . 
 + * } 
 + * } 
 + * < / pre > 
 + * < p > 
 + * Please , be aware of the following logic , which is implemented in the check : 
 + * < / p > 
 + * < p > 
 + * 1 ) If you arrange ' this ' in your code on your own , the check will not raise violation for 
 + * variables which use ' this ' to reference a class field , for example : 
 + * < / p > 
 + * < pre > 
 + * public class C { 
 + * private int scale ; 
 + * private int x ; 
 + * public void foo ( int scale ) { 
 + * scale = this . scale ; / / no violation 
 + * if ( scale & gt ; 0 ) { 
 + * scale = - scale ; / / no violation 
 + * } 
 + * x * = scale ; 
 + * } 
 + * } 
 + * < / pre > 
 + * < p > 
 + * 2 ) If method parameter is returned from the method , the check will not raise violation for 
 + * returned variable / parameter , for example : 
 + * < / p > 
 + * < pre > 
 + * public class D { 
 + * private String prefix ; 
 + * public String modifyPrefix ( String prefix ) { 
 + * prefix = " ^ " + prefix + " $ " / / no violation ( modification of parameter ) 
 + * return prefix ; / / modified method parameter is returned from the method 
 + * } 
 + * } 
 + * < / pre > 
 + * < p > 
 + * Examples of how the check works if validateOnlyOverlapping option is set to false : 
 + * < / p > 
 + * < pre > 
 + * public static class A { 
 + * private int field1 ; 
 + * private int field2 ; 
 + * 
 + * public A ( int field1 ) { 
 + * field1 = field1 ; / / violation : Reference to instance variable " field1 " needs " this " . 
 + * field2 = 0 ; / / violation : Reference to instance variable " field2 " needs " this " . 
 + * String field2 ; 
 + * field2 = " 0 " ; / / No violation . Local var allowed 
 + * } 
 + * 
 + * void foo3 ( ) { 
 + * String field1 = " values " ; 
 + * field1 = field1 ; / / violation : Reference to instance variable " field1 " needs " this " . 
 + * } 
 + * } 
 + * 
 + * public static class B { 
 + * private int field ; 
 + * 
 + * public A ( int f ) { 
 + * field = f ; / / violation : Reference to instance variable " field " needs " this " . 
 + * } 
 + * 
 + * String addSuffixToField ( String field ) { 
 + * return field + = " suffix " ; / / violation : Reference to instance variable " field " needs " this " . 
 + * } 
 + * } 
 + * 
 + * / / If the variable is locally defined , there won ' t be a violation provided the variable 
 + * / / doesn ' t overlap . 
 + * class C { 
 + * private String s1 = " foo1 " ; 
 + * String s2 = " foo2 " ; 
 + * 
 + * C ( ) { 
 + * s1 = " bar1 " ; / / Violation . Reference to instance variable ' s1 ' needs " this . " . 
 + * String s2 ; 
 + * s2 = " bar2 " ; / / No violation . Local var allowed . 
 + * s2 + = s2 ; / / Violation . Overlapping . Reference to instance variable ' s2 ' needs " this . " . 
 + * } 
 + * } 
 + * < / pre > 
 * 
 + * @ since 3 . 4 
 * / 
 / / - @ cs [ ClassDataAbstractionCoupling ] This check requires to work with and identify many frames . 
 @ FileStatefulCheck 
 @ @ - 150 , 15 + 273 , 15 @ @ public class RequireThisCheck extends AbstractCheck { 
 / * * Tree of all the parsed frames . * / 
 private Map < DetailAST , AbstractFrame > frames ; 
 
 - / * * Whether we should check fields usage . * / 
 + / * * Control whether to check references to fields . * / 
 private boolean checkFields = true ; 
 - / * * Whether we should check methods usage . * / 
 + / * * Control whether to check references to methods . * / 
 private boolean checkMethods = true ; 
 - / * * Whether we should check only overlapping by variables or arguments . * / 
 + / * * Control whether to check only overlapping by variables or arguments . * / 
 private boolean validateOnlyOverlapping = true ; 
 
 / * * 
 - * Setter for checkFields property . 
 + * Setter to control whether to check references to fields . 
 * @ param checkFields should we check fields usage or not . 
 * / 
 public void setCheckFields ( boolean checkFields ) { 
 @ @ - 166 , 7 + 289 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Setter for checkMethods property . 
 + * Setter to control whether to check references to methods . 
 * @ param checkMethods should we check methods usage or not . 
 * / 
 public void setCheckMethods ( boolean checkMethods ) { 
 @ @ - 174 , 7 + 297 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Setter for validateOnlyOverlapping property . 
 + * Setter to control whether to check only overlapping by variables or arguments . 
 * @ param validateOnlyOverlapping should we check only overlapping by variables or arguments . 
 * / 
 public void setValidateOnlyOverlapping ( boolean validateOnlyOverlapping ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 3a87dc5 . . 1dc7130 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 110 , 6 + 110 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " PackageAnnotation " , 
 " PackageName " , 
 " ParameterName " , 
 + " RequireThis " , 
 " RightCurly " , 
 " StaticVariableName " , 
 " SuppressWarnings " , 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 6f238e1 . . e1a5fce 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 3730 , 8 + 3730 , 8 @ @ public class AnnotationLocationCheck extends AbstractCheck { 
 < / section > 
 
 < section name = " RequireThis " > 
 + < p > Since Checkstyle 3 . 4 < / p > 
 < subsection name = " Description " id = " RequireThis _ Description " > 
 - < p > Since Checkstyle 3 . 4 < / p > 
 < p > 
 Checks that references to instance variables and methods of the present 
 object are explicitly of the form & quot ; this . varName & quot ; or 
 @ @ - 3759 , 6 + 3759 , 15 @ @ public class AnnotationLocationCheck extends AbstractCheck { 
 < / li > 
 < / ol > 
 < / subsection > 
 + < subsection name = " Notes " id = " RequireThis _ Notes " > 
 + < p > 
 + Limitations : Nothing is currently done about static variables 
 + or catch - blocks . Static methods invoked on a class name seem to be OK ; 
 + both the class name and the method name have a DOT parent . 
 + Non - static methods invoked on either this or a variable name seem to be 
 + OK , likewise . 
 + < / p > 
 + < / subsection > 
 
 < subsection name = " Properties " id = " RequireThis _ Properties " > 
 < table > 
 @ @ - 3771 , 21 + 3780 , 21 @ @ public class AnnotationLocationCheck extends AbstractCheck { 
 < / tr > 
 < tr > 
 < td > checkFields < / td > 
 - < td > Whether to check references to fields . < / td > 
 + < td > Control whether to check references to fields . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > < code > true < / code > < / td > 
 < td > 3 . 4 < / td > 
 < / tr > 
 < tr > 
 < td > checkMethods < / td > 
 - < td > Whether to check references to methods . < / td > 
 + < td > Control whether to check references to methods . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > < code > true < / code > < / td > 
 < td > 3 . 4 < / td > 
 < / tr > 
 < tr > 
 < td > validateOnlyOverlapping < / td > 
 - < td > Whether to check only overlapping by variables or arguments . < / td > 
 + < td > Control whether to check only overlapping by variables or arguments . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > < code > true < / code > < / td > 
 < td > 6 . 17 < / td > 
 @ @ - 3832 , 15 + 3841 , 15 @ @ public static class A { 
 } 
 
 public static class B { 
 - private int field1 ; 
 + private int field ; 
 
 public A ( int f ) { 
 - field1 = f ; 
 + field = f ; 
 } 
 
 - String addSuffixToField ( String field1 ) { 
 - / / Overlapping by method argument . Equal to " return field1 = field1 + " suffix " ; " 
 - return field1 + = " suffix " ; / / violation : Reference to instance variable " field1 " needs " this " . 
 + String addSuffixToField ( String field ) { 
 + / / Overlapping by method argument . Equal to " return field = field + " suffix " ; " 
 + return field + = " suffix " ; / / violation : Reference to instance variable " field " needs " this " . 
 } 
 } 
 < / source > 
 @ @ - 3899 , 14 + 3908 , 14 @ @ public static class A { 
 } 
 
 public static class B { 
 - private int field1 ; 
 + private int field ; 
 
 public A ( int f ) { 
 - field1 = f ; / / violation : Reference to instance variable " field1 " needs " this " . 
 + field = f ; / / violation : Reference to instance variable " field " needs " this " . 
 } 
 
 - String addSuffixToField ( String field1 ) { 
 - return field1 + = " suffix " ; / / violation : Reference to instance variable " field1 " needs " this " . 
 + String addSuffixToField ( String field ) { 
 + return field + = " suffix " ; / / violation : Reference to instance variable " field " needs " this " . 
 } 
 } 


NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index c8dbcc2 . . 60b0117 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 275 , 6 + 275 , 8 @ @ 
 < classpath refid = " run . classpath " / > 
 < property key = " checkstyle . cache . file " file = " target / cachefile " / > 
 < property key = " checkstyle . header . file " file = " docs / java . header " / > 
 + < property key = " checkstyle . suppressions . file " 
 + file = " docs / suppressions . xml " / > 
 < / checkstyle > 
 < mkdir dir = " target / style / frames " / > 
 < mkdir dir = " target / style / noframes " / > 
 diff - - git a / contrib / checkstyle - frames . xsl b / contrib / checkstyle - frames . xsl 
 index 749ac69 . . d50f80a 100644 
 - - - a / contrib / checkstyle - frames . xsl 
 + + + b / contrib / checkstyle - frames . xsl 
 @ @ - 207 , 6 + 207 , 7 @ @ 
 < / head > 
 < body > 
 < h2 > Files < / h2 > 
 + < p > < a href = " overview - frame . html " target = " fileFrame " > Summary < / a > < / p > 
 < p > 
 < table width = " 100 % " > 
 < ! - - For each file create its part - - > 
 diff - - git a / docs / releasenotes . html b / docs / releasenotes . html 
 index 2151d45 . . 484592a 100644 
 - - - a / docs / releasenotes . html 
 + + + b / docs / releasenotes . html 
 @ @ - 103 , 8 + 103 , 11 @ @ 
 < li class = " body " > xmllogger . dtd is out - of - date 
 ( bug 847974 ) . < / li > 
 
 - 	 < li class = " body " > ArrayTypeStyle shouldn ' t check method definition 
 - 	 ( bug 849450 ) . < / li > 
 + < li class = " body " > ArrayTypeStyle shouldn ' t check method definition 
 + ( bug 849450 ) . < / li > 
 + 
 + < li class = " body " > Added link to summary page in 
 + checkstyle - frames . xsl ( bug 852397 ) . < / li > 
 < / ul > 
 
 < a name = " release3 _ 2 " > < / a > 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 index 8673e04 . . 40e6696 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 @ @ - 221 , 7 + 221 , 7 @ @ public final class IllegalTypeCheck extends AbstractFormatCheck 
 { 
 mIgnoredMethodNames . clear ( ) ; 
 for ( int i = 0 ; i < aMethodNames . length ; i + + ) { 
 - mIllegalClassNames . add ( aMethodNames [ i ] ) ; 
 + mIgnoredMethodNames . add ( aMethodNames [ i ] ) ; 
 } 
 } 
 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 index f9de8e7 . . 6bf3cba 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 @ @ - 20 , 4 + 20 , 19 @ @ public class IllegalTypeCheckTest extends BaseCheckTestCase { 
 
 verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalType . java " ) , expected ) ; 
 } 
 + 
 + public void testIgnoreMethodNames ( ) throws Exception { 
 + DefaultConfiguration checkConfig = createCheckConfig ( IllegalTypeCheck . class ) ; 
 + checkConfig . addAttribute ( " ignoredMethodNames " , " table2 " ) ; 
 + 
 + String [ ] expected = { 
 + " 6 : 13 : Declaring variables , return values or parameters of type ' AbstractClass ' is not allowed . " , 
 + " 9 : 13 : Declaring variables , return values or parameters of type " 
 + + " ' au . com . redhillconsulting . jamaica . tools . checkstyle . InputIllegalType . AbstractClass ' " 
 + + " is not allowed . " , 
 + " 16 : 13 : Declaring variables , return values or parameters of type ' java . util . Hashtable ' is not allowed . " , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalType . java " ) , expected ) ; 
 + } 
 }
