BLEU SCORE: 0.19460627138785042

TEST MSG: Issue # 3006 : Refactoring of FinalLocalVariableCheck to increase readability
GENERATED MSG: Issue # 3006 : Fix false positive when variable is assigned multiple times

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> index 179b2aa . . ac2056e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . HashMap ; <nl> import java . util . Iterator ; <nl> import java . util . Map ; <nl> <nl> + import com . google . common . base . Optional ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 207 , 24 + 208 , 20 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> <nl> case TokenTypes . IDENT : <nl> final int parentType = ast . getParent ( ) . getType ( ) ; <nl> - if ( isAssignOperator ( parentType ) <nl> - & & isFirstChild ( ast ) ) { <nl> - if ( isInSpecificCodeBlock ( ast , TokenTypes . LITERAL _ IF ) ) <nl> - { <nl> - markFinalVariableCandidateAsAssignedInIfBlock ( ast ) ; <nl> - if ( isInSpecificCodeBlock ( ast , TokenTypes . CASE _ GROUP ) ) { <nl> - markFinalVariableCandidateAsAssignedInCaseBlock ( ast ) ; <nl> + if ( isAssignOperator ( parentType ) & & isFirstChild ( ast ) ) { <nl> + final Optional < FinalVariableCandidate > candidate = getFinalCandidate ( ast ) ; <nl> + if ( candidate . isPresent ( ) ) { <nl> + if ( isInSpecificCodeBlock ( ast , TokenTypes . LITERAL _ IF ) ) { <nl> + candidate . get ( ) . assignInIfBlock = true ; <nl> + if ( isInSpecificCodeBlock ( ast , TokenTypes . CASE _ GROUP ) ) { <nl> + candidate . get ( ) . assignInIfBlockWhichIsInsideCaseBlock = true ; <nl> + } <nl> + } <nl> + else { <nl> + candidate . get ( ) . assignOutsideConditionalBlock = true ; <nl> } <nl> } <nl> - else if ( isInSpecificCodeBlock ( ast , TokenTypes . LITERAL _ ELSE ) ) <nl> - { <nl> - markFinalVariableCandidateAsAssignedInElseBlock ( ast ) ; <nl> - } <nl> - else <nl> - { <nl> - markFinalVariableCandidateAsAssignedOutsideIfOrElseBlock ( ast ) ; <nl> - } <nl> - removeVariable ( ast ) ; <nl> + removeFinalVariableCandidateFromStack ( ast ) ; <nl> } <nl> break ; <nl> <nl> @ @ - 233 , 86 + 230 , 6 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> } <nl> } <nl> <nl> - private boolean isInSpecificCodeBlock ( DetailAST node , int blockType ) { <nl> - boolean returnValue = false ; <nl> - for ( DetailAST token = node . getParent ( ) ; token ! = null ; token = token . getParent ( ) ) { <nl> - final int type = token . getType ( ) ; <nl> - if ( type = = blockType ) { <nl> - returnValue = true ; <nl> - break ; <nl> - } <nl> - } <nl> - return returnValue ; <nl> - } <nl> - <nl> - private void markFinalVariableCandidateAsAssignedInIfBlock ( DetailAST ast ) { <nl> - final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; <nl> - while ( iterator . hasNext ( ) ) { <nl> - final ScopeData scopeData = iterator . next ( ) ; <nl> - final Map < String , FinalVariableCandidate > scope = scopeData . scope ; <nl> - DetailAST storedVariable = null ; <nl> - final FinalVariableCandidate candidate = scope . get ( ast . getText ( ) ) ; <nl> - if ( candidate ! = null ) { <nl> - storedVariable = candidate . variableIdent ; <nl> - } <nl> - if ( storedVariable ! = null & & isSameVariables ( storedVariable , ast ) ) { <nl> - candidate . assignInIfBlock = true ; <nl> - break ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - private void markFinalVariableCandidateAsAssignedInCaseBlock ( DetailAST ast ) { <nl> - final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; <nl> - while ( iterator . hasNext ( ) ) { <nl> - final ScopeData scopeData = iterator . next ( ) ; <nl> - final Map < String , FinalVariableCandidate > scope = scopeData . scope ; <nl> - DetailAST storedVariable = null ; <nl> - final FinalVariableCandidate candidate = scope . get ( ast . getText ( ) ) ; <nl> - if ( candidate ! = null ) { <nl> - storedVariable = candidate . variableIdent ; <nl> - } <nl> - if ( storedVariable ! = null & & isSameVariables ( storedVariable , ast ) ) { <nl> - candidate . assignInIfBlockWhichIsInsideCaseBlock = true ; <nl> - break ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - private void markFinalVariableCandidateAsAssignedInElseBlock ( DetailAST ast ) { <nl> - final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; <nl> - while ( iterator . hasNext ( ) ) { <nl> - final ScopeData scopeData = iterator . next ( ) ; <nl> - final Map < String , FinalVariableCandidate > scope = scopeData . scope ; <nl> - DetailAST storedVariable = null ; <nl> - final FinalVariableCandidate candidate = scope . get ( ast . getText ( ) ) ; <nl> - if ( candidate ! = null ) { <nl> - storedVariable = candidate . variableIdent ; <nl> - } <nl> - if ( storedVariable ! = null & & isSameVariables ( storedVariable , ast ) ) { <nl> - candidate . assignInElseBlock = true ; <nl> - break ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - private void markFinalVariableCandidateAsAssignedOutsideIfOrElseBlock ( DetailAST ast ) { <nl> - final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; <nl> - while ( iterator . hasNext ( ) ) { <nl> - final ScopeData scopeData = iterator . next ( ) ; <nl> - final Map < String , FinalVariableCandidate > scope = scopeData . scope ; <nl> - DetailAST storedVariable = null ; <nl> - final FinalVariableCandidate candidate = scope . get ( ast . getText ( ) ) ; <nl> - if ( candidate ! = null ) { <nl> - storedVariable = candidate . variableIdent ; <nl> - } <nl> - if ( storedVariable ! = null & & isSameVariables ( storedVariable , ast ) ) { <nl> - candidate . assignOutsideIfOrElseBlock = true ; <nl> - break ; <nl> - } <nl> - } <nl> - } <nl> - <nl> @ Override <nl> public void leaveToken ( DetailAST ast ) { <nl> Map < String , FinalVariableCandidate > scope = null ; <nl> @ @ - 341 , 13 + 258 , 46 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> } <nl> if ( scope ! = null ) { <nl> for ( FinalVariableCandidate candidate : scope . values ( ) ) { <nl> - DetailAST ident = candidate . variableIdent ; <nl> + final DetailAST ident = candidate . variableIdent ; <nl> log ( ident . getLineNo ( ) , ident . getColumnNo ( ) , MSG _ KEY , ident . getText ( ) ) ; <nl> } <nl> } <nl> } <nl> <nl> / * * <nl> + * Checks whether the scope of a node is restricted to a specific code block . <nl> + * @ param node node . <nl> + * @ param blockType block type . <nl> + * @ return true if the scope of a node is restricted to a specific code block . <nl> + * / <nl> + private static boolean isInSpecificCodeBlock ( DetailAST node , int blockType ) { <nl> + boolean returnValue = false ; <nl> + for ( DetailAST token = node . getParent ( ) ; token ! = null ; token = token . getParent ( ) ) { <nl> + final int type = token . getType ( ) ; <nl> + if ( type = = blockType ) { <nl> + returnValue = true ; <nl> + break ; <nl> + } <nl> + } <nl> + return returnValue ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets final variable candidate for ast . <nl> + * @ param ast ast . <nl> + * @ return Optional of { @ link FinalVariableCandidate } for ast from scopeStack . <nl> + * / <nl> + private Optional < FinalVariableCandidate > getFinalCandidate ( DetailAST ast ) { <nl> + Optional < FinalVariableCandidate > result = Optional . absent ( ) ; <nl> + final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; <nl> + while ( iterator . hasNext ( ) & & ! result . isPresent ( ) ) { <nl> + final ScopeData scopeData = iterator . next ( ) ; <nl> + result = scopeData . findFinalVariableCandidateForAst ( ast ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> * Store un - initialized variables in a temporary stack for future use . <nl> * / <nl> private void storePrevScopeUninitializedVariableData ( ) { <nl> @ @ - 365 , 8 + 315 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> * @ param prevScopeUnitializedVariableData variable for previous stack of uninitialized <nl> * variables <nl> * / <nl> - private void updateUninitializedVariables ( Deque < DetailAST > <nl> - prevScopeUnitializedVariableData ) { <nl> + private void updateUninitializedVariables ( Deque < DetailAST > prevScopeUnitializedVariableData ) { <nl> / / Check for only previous scope <nl> for ( DetailAST variable : prevScopeUnitializedVariableData ) { <nl> for ( ScopeData scopeData : scopeStack ) { <nl> @ @ - 385 , 7 + 334 , 8 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> for ( Deque < DetailAST > unitializedVariableData : prevScopeUninitializedVariables ) { <nl> for ( DetailAST variable : unitializedVariableData ) { <nl> for ( ScopeData scopeData : scopeStack ) { <nl> - final FinalVariableCandidate candidate = scopeData . scope . get ( variable . getText ( ) ) ; <nl> + final FinalVariableCandidate candidate = <nl> + scopeData . scope . get ( variable . getText ( ) ) ; <nl> DetailAST storedVariable = null ; <nl> if ( candidate ! = null ) { <nl> storedVariable = candidate . variableIdent ; <nl> @ @ - 422 , 7 + 372 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> * @ return the matching token , or null if no match <nl> * / <nl> public DetailAST findLastChildWhichContainsSpecifiedToken ( DetailAST ast , int childType , <nl> - int containType ) { <nl> + int containType ) { <nl> DetailAST returnValue = null ; <nl> for ( DetailAST astIterator = ast . getFirstChild ( ) ; astIterator ! = null ; <nl> astIterator = astIterator . getNextSibling ( ) ) { <nl> @ @ - 485 , 10 + 435 , 10 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Remove the variable from the Stack . <nl> - * @ param ast Variable to remove <nl> + * Removes the final variable candidate from the Stack . <nl> + * @ param ast variable to remove . <nl> * / <nl> - private void removeVariable ( DetailAST ast ) { <nl> + private void removeFinalVariableCandidateFromStack ( DetailAST ast ) { <nl> final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; <nl> while ( iterator . hasNext ( ) ) { <nl> final ScopeData scopeData = iterator . next ( ) ; <nl> @ @ - 499 , 7 + 449 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> storedVariable = candidate . variableIdent ; <nl> } <nl> if ( storedVariable ! = null & & isSameVariables ( storedVariable , ast ) ) { <nl> - if ( shouldRemoveVariable ( scopeData , ast ) ) { <nl> + if ( shouldRemoveFinalVariableCandidate ( scopeData , ast ) ) { <nl> scope . remove ( ast . getText ( ) ) ; <nl> } <nl> break ; <nl> @ @ - 508 , 35 + 458 , 25 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Whether the variable should be removed from the list of final local variable <nl> + * Whether the final variable candidate should be removed from the list of final local variable <nl> * candidates . <nl> * @ param scopeData the scope data of the variable . <nl> * @ param ast the variable ast . <nl> * @ return true , if the variable should be removed . <nl> * / <nl> - private static boolean shouldRemoveVariable ( ScopeData scopeData , DetailAST ast ) { <nl> + private static boolean shouldRemoveFinalVariableCandidate ( ScopeData scopeData , DetailAST ast ) { <nl> boolean shouldRemove = true ; <nl> for ( DetailAST variable : scopeData . uninitializedVariables ) { <nl> if ( variable . getText ( ) . equals ( ast . getText ( ) ) ) { <nl> - <nl> / / if the variable is declared outside the loop and initialized inside <nl> / / the loop , then it cannot be declared final , as it can be initialized <nl> / / more than once in this case <nl> - if ( isInTheSameLoop ( variable , ast ) <nl> - | | ! isUseOfExternalVariableInsideLoop ( ast ) ) { <nl> - if ( isAssignInIfBlock ( scopeData , ast ) & & isAssignInElseBlock ( scopeData , ast ) ) { <nl> - shouldRemove = true ; <nl> - } <nl> - else if ( isAssignInIfBlock ( scopeData , ast ) <nl> - & & isAssignOutsideIfOrElseBlock ( scopeData , ast ) <nl> - & & ! isAssignInIfBlockWhichIsInsideCaseBlock ( scopeData , ast ) ) { <nl> - shouldRemove = true ; <nl> - } <nl> - else { <nl> - shouldRemove = false ; <nl> - } <nl> + if ( isInTheSameLoop ( variable , ast ) | | ! isUseOfExternalVariableInsideLoop ( ast ) ) { <nl> + final FinalVariableCandidate candidate = scopeData . scope . get ( ast . getText ( ) ) ; <nl> + shouldRemove = candidate . assignInIfBlock <nl> + & & candidate . assignOutsideConditionalBlock <nl> + & & ! candidate . assignInIfBlockWhichIsInsideCaseBlock ; <nl> } <nl> - <nl> scopeData . uninitializedVariables . remove ( variable ) ; <nl> break ; <nl> } <nl> @ @ - 544 , 47 + 484 , 6 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> return shouldRemove ; <nl> } <nl> <nl> - private static boolean isAssignInIfBlockWhichIsInsideCaseBlock ( ScopeData scopeData , <nl> - DetailAST ast ) { <nl> - boolean assignInIfElseBlock = false ; <nl> - FinalVariableCandidate candidate = scopeData . scope . get ( ast . getText ( ) ) ; <nl> - if ( candidate ! = null ) <nl> - { <nl> - assignInIfElseBlock = candidate . assignInIfBlockWhichIsInsideCaseBlock ; <nl> - } <nl> - return assignInIfElseBlock ; <nl> - } <nl> - <nl> - private static boolean isAssignInIfBlock ( ScopeData scopeData , DetailAST ast ) { <nl> - boolean assignInIfElseBlock = false ; <nl> - FinalVariableCandidate candidate = scopeData . scope . get ( ast . getText ( ) ) ; <nl> - if ( candidate ! = null ) <nl> - { <nl> - assignInIfElseBlock = candidate . assignInIfBlock ; <nl> - } <nl> - return assignInIfElseBlock ; <nl> - } <nl> - <nl> - private static boolean isAssignInElseBlock ( ScopeData scopeData , DetailAST ast ) { <nl> - boolean assignInIfElseBlock = false ; <nl> - FinalVariableCandidate candidate = scopeData . scope . get ( ast . getText ( ) ) ; <nl> - if ( candidate ! = null ) <nl> - { <nl> - assignInIfElseBlock = candidate . assignInElseBlock ; <nl> - } <nl> - return assignInIfElseBlock ; <nl> - } <nl> - <nl> - private static boolean isAssignOutsideIfOrElseBlock ( ScopeData scopeData , DetailAST ast ) { <nl> - boolean assignInIfElseBlock = false ; <nl> - FinalVariableCandidate candidate = scopeData . scope . get ( ast . getText ( ) ) ; <nl> - if ( candidate ! = null ) <nl> - { <nl> - assignInIfElseBlock = candidate . assignOutsideIfOrElseBlock ; <nl> - } <nl> - return assignInIfElseBlock ; <nl> - } <nl> - <nl> / * * <nl> * Checks whether a variable which is declared ouside loop is used inside loop . <nl> * For example : <nl> @ @ - 600 , 7 + 499 , 6 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> * @ return true if a variable which is declared ouside loop is used inside loop . <nl> * / <nl> private static boolean isUseOfExternalVariableInsideLoop ( DetailAST variable ) { <nl> - boolean result = true ; <nl> DetailAST loop2 = variable . getParent ( ) ; <nl> while ( loop2 ! = null <nl> & & ! isLoopAst ( loop2 . getType ( ) ) ) { <nl> @ @ - 729 , 21 + 627 , 43 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> <nl> / * * Contains definitions of uninitialized variables . * / <nl> private final Deque < DetailAST > uninitializedVariables = new ArrayDeque < > ( ) ; <nl> + <nl> + / * * <nl> + * Searches for final local variable candidate for ast in the scope . <nl> + * @ param ast ast . <nl> + * @ return Optional of { @ link FinalVariableCandidate } . <nl> + * / <nl> + public Optional < FinalVariableCandidate > findFinalVariableCandidateForAst ( DetailAST ast ) { <nl> + Optional < FinalVariableCandidate > result = Optional . absent ( ) ; <nl> + DetailAST storedVariable = null ; <nl> + final Optional < FinalVariableCandidate > candidate = <nl> + Optional . fromNullable ( scope . get ( ast . getText ( ) ) ) ; <nl> + if ( candidate . isPresent ( ) ) { <nl> + storedVariable = candidate . get ( ) . variableIdent ; <nl> + } <nl> + if ( storedVariable ! = null & & isSameVariables ( storedVariable , ast ) ) { <nl> + result = candidate ; <nl> + } <nl> + return result ; <nl> + } <nl> } <nl> <nl> + / * * Represents information about final local variable candidate . * / <nl> private static class FinalVariableCandidate { <nl> - <nl> - private DetailAST variableIdent ; <nl> - <nl> + / * * Identifier token . * / <nl> + private final DetailAST variableIdent ; <nl> + / * * Whether variable is assigned in if block . * / <nl> private boolean assignInIfBlock ; <nl> - <nl> - private boolean assignInElseBlock ; <nl> - <nl> - private boolean assignOutsideIfOrElseBlock ; <nl> - <nl> + / * * Whether variable is assigned outside conditional block . * / <nl> + private boolean assignOutsideConditionalBlock ; <nl> + / * * Whether variable is assigned in if block which is located inside case block . * / <nl> private boolean assignInIfBlockWhichIsInsideCaseBlock ; <nl> <nl> - public FinalVariableCandidate ( DetailAST variableIdent ) { <nl> + / * * <nl> + * Creates new instance . <nl> + * @ param variableIdent variable identifier . <nl> + * / <nl> + FinalVariableCandidate ( DetailAST variableIdent ) { <nl> this . variableIdent = variableIdent ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java <nl> index e87d018 . . 6e8737f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java <nl> @ @ - 675 , 6 + 675 , 11 @ @ public class XDocsPagesTest { <nl> lastRuleName . toLowerCase ( Locale . ENGLISH ) ) > = 0 ) ; <nl> } <nl> <nl> + if ( ! " - - " . equals ( ruleName ) ) { <nl> + validateStyleAnchors ( XmlUtil . findChildElementsByTag ( columns . get ( 0 ) , " a " ) , <nl> + fileName , ruleName ) ; <nl> + } <nl> + <nl> validateStyleChecks ( XmlUtil . findChildElementsByTag ( columns . get ( 2 ) , " a " ) , <nl> XmlUtil . findChildElementsByTag ( columns . get ( 3 ) , " a " ) , fileName , ruleName ) ; <nl> <nl> @ @ - 683 , 6 + 688 , 39 @ @ public class XDocsPagesTest { <nl> } <nl> } <nl> <nl> + private static void validateStyleAnchors ( Set < Node > anchors , String fileName , String ruleName ) { <nl> + Assert . assertEquals ( fileName + " rule ' " + ruleName + " ' must have two row anchors " , 2 , <nl> + anchors . size ( ) ) ; <nl> + <nl> + final int space = ruleName . indexOf ( ' ' ) ; <nl> + Assert . assertTrue ( fileName + " rule ' " + ruleName <nl> + + " ' must have have a space between the rule ' s number and the rule ' s name " , <nl> + space ! = - 1 ) ; <nl> + <nl> + final String ruleNumber = ruleName . substring ( 0 , space ) ; <nl> + <nl> + int position = 1 ; <nl> + <nl> + for ( Node anchor : anchors ) { <nl> + final String actualUrl ; <nl> + final String expectedUrl ; <nl> + <nl> + if ( position = = 1 ) { <nl> + actualUrl = anchor . getAttributes ( ) . getNamedItem ( " name " ) . getTextContent ( ) ; <nl> + expectedUrl = ruleNumber ; <nl> + } <nl> + else { <nl> + actualUrl = anchor . getAttributes ( ) . getNamedItem ( " href " ) . getTextContent ( ) ; <nl> + expectedUrl = " # " + ruleNumber ; <nl> + } <nl> + <nl> + Assert . assertEquals ( fileName + " rule ' " + ruleName + " ' anchor " + position <nl> + + " shoud have matching name / url " , expectedUrl , actualUrl ) ; <nl> + <nl> + position + + ; <nl> + } <nl> + } <nl> + <nl> private static void validateStyleChecks ( Set < Node > checks , Set < Node > configs , String fileName , <nl> String ruleName ) { <nl> final Iterator < Node > itrChecks = checks . iterator ( ) ;

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 index 179b2aa . . ac2056e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . HashMap ; 
 import java . util . Iterator ; 
 import java . util . Map ; 
 
 + import com . google . common . base . Optional ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 207 , 24 + 208 , 20 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 
 case TokenTypes . IDENT : 
 final int parentType = ast . getParent ( ) . getType ( ) ; 
 - if ( isAssignOperator ( parentType ) 
 - & & isFirstChild ( ast ) ) { 
 - if ( isInSpecificCodeBlock ( ast , TokenTypes . LITERAL _ IF ) ) 
 - { 
 - markFinalVariableCandidateAsAssignedInIfBlock ( ast ) ; 
 - if ( isInSpecificCodeBlock ( ast , TokenTypes . CASE _ GROUP ) ) { 
 - markFinalVariableCandidateAsAssignedInCaseBlock ( ast ) ; 
 + if ( isAssignOperator ( parentType ) & & isFirstChild ( ast ) ) { 
 + final Optional < FinalVariableCandidate > candidate = getFinalCandidate ( ast ) ; 
 + if ( candidate . isPresent ( ) ) { 
 + if ( isInSpecificCodeBlock ( ast , TokenTypes . LITERAL _ IF ) ) { 
 + candidate . get ( ) . assignInIfBlock = true ; 
 + if ( isInSpecificCodeBlock ( ast , TokenTypes . CASE _ GROUP ) ) { 
 + candidate . get ( ) . assignInIfBlockWhichIsInsideCaseBlock = true ; 
 + } 
 + } 
 + else { 
 + candidate . get ( ) . assignOutsideConditionalBlock = true ; 
 } 
 } 
 - else if ( isInSpecificCodeBlock ( ast , TokenTypes . LITERAL _ ELSE ) ) 
 - { 
 - markFinalVariableCandidateAsAssignedInElseBlock ( ast ) ; 
 - } 
 - else 
 - { 
 - markFinalVariableCandidateAsAssignedOutsideIfOrElseBlock ( ast ) ; 
 - } 
 - removeVariable ( ast ) ; 
 + removeFinalVariableCandidateFromStack ( ast ) ; 
 } 
 break ; 
 
 @ @ - 233 , 86 + 230 , 6 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 } 
 } 
 
 - private boolean isInSpecificCodeBlock ( DetailAST node , int blockType ) { 
 - boolean returnValue = false ; 
 - for ( DetailAST token = node . getParent ( ) ; token ! = null ; token = token . getParent ( ) ) { 
 - final int type = token . getType ( ) ; 
 - if ( type = = blockType ) { 
 - returnValue = true ; 
 - break ; 
 - } 
 - } 
 - return returnValue ; 
 - } 
 - 
 - private void markFinalVariableCandidateAsAssignedInIfBlock ( DetailAST ast ) { 
 - final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; 
 - while ( iterator . hasNext ( ) ) { 
 - final ScopeData scopeData = iterator . next ( ) ; 
 - final Map < String , FinalVariableCandidate > scope = scopeData . scope ; 
 - DetailAST storedVariable = null ; 
 - final FinalVariableCandidate candidate = scope . get ( ast . getText ( ) ) ; 
 - if ( candidate ! = null ) { 
 - storedVariable = candidate . variableIdent ; 
 - } 
 - if ( storedVariable ! = null & & isSameVariables ( storedVariable , ast ) ) { 
 - candidate . assignInIfBlock = true ; 
 - break ; 
 - } 
 - } 
 - } 
 - 
 - private void markFinalVariableCandidateAsAssignedInCaseBlock ( DetailAST ast ) { 
 - final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; 
 - while ( iterator . hasNext ( ) ) { 
 - final ScopeData scopeData = iterator . next ( ) ; 
 - final Map < String , FinalVariableCandidate > scope = scopeData . scope ; 
 - DetailAST storedVariable = null ; 
 - final FinalVariableCandidate candidate = scope . get ( ast . getText ( ) ) ; 
 - if ( candidate ! = null ) { 
 - storedVariable = candidate . variableIdent ; 
 - } 
 - if ( storedVariable ! = null & & isSameVariables ( storedVariable , ast ) ) { 
 - candidate . assignInIfBlockWhichIsInsideCaseBlock = true ; 
 - break ; 
 - } 
 - } 
 - } 
 - 
 - private void markFinalVariableCandidateAsAssignedInElseBlock ( DetailAST ast ) { 
 - final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; 
 - while ( iterator . hasNext ( ) ) { 
 - final ScopeData scopeData = iterator . next ( ) ; 
 - final Map < String , FinalVariableCandidate > scope = scopeData . scope ; 
 - DetailAST storedVariable = null ; 
 - final FinalVariableCandidate candidate = scope . get ( ast . getText ( ) ) ; 
 - if ( candidate ! = null ) { 
 - storedVariable = candidate . variableIdent ; 
 - } 
 - if ( storedVariable ! = null & & isSameVariables ( storedVariable , ast ) ) { 
 - candidate . assignInElseBlock = true ; 
 - break ; 
 - } 
 - } 
 - } 
 - 
 - private void markFinalVariableCandidateAsAssignedOutsideIfOrElseBlock ( DetailAST ast ) { 
 - final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; 
 - while ( iterator . hasNext ( ) ) { 
 - final ScopeData scopeData = iterator . next ( ) ; 
 - final Map < String , FinalVariableCandidate > scope = scopeData . scope ; 
 - DetailAST storedVariable = null ; 
 - final FinalVariableCandidate candidate = scope . get ( ast . getText ( ) ) ; 
 - if ( candidate ! = null ) { 
 - storedVariable = candidate . variableIdent ; 
 - } 
 - if ( storedVariable ! = null & & isSameVariables ( storedVariable , ast ) ) { 
 - candidate . assignOutsideIfOrElseBlock = true ; 
 - break ; 
 - } 
 - } 
 - } 
 - 
 @ Override 
 public void leaveToken ( DetailAST ast ) { 
 Map < String , FinalVariableCandidate > scope = null ; 
 @ @ - 341 , 13 + 258 , 46 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 } 
 if ( scope ! = null ) { 
 for ( FinalVariableCandidate candidate : scope . values ( ) ) { 
 - DetailAST ident = candidate . variableIdent ; 
 + final DetailAST ident = candidate . variableIdent ; 
 log ( ident . getLineNo ( ) , ident . getColumnNo ( ) , MSG _ KEY , ident . getText ( ) ) ; 
 } 
 } 
 } 
 
 / * * 
 + * Checks whether the scope of a node is restricted to a specific code block . 
 + * @ param node node . 
 + * @ param blockType block type . 
 + * @ return true if the scope of a node is restricted to a specific code block . 
 + * / 
 + private static boolean isInSpecificCodeBlock ( DetailAST node , int blockType ) { 
 + boolean returnValue = false ; 
 + for ( DetailAST token = node . getParent ( ) ; token ! = null ; token = token . getParent ( ) ) { 
 + final int type = token . getType ( ) ; 
 + if ( type = = blockType ) { 
 + returnValue = true ; 
 + break ; 
 + } 
 + } 
 + return returnValue ; 
 + } 
 + 
 + / * * 
 + * Gets final variable candidate for ast . 
 + * @ param ast ast . 
 + * @ return Optional of { @ link FinalVariableCandidate } for ast from scopeStack . 
 + * / 
 + private Optional < FinalVariableCandidate > getFinalCandidate ( DetailAST ast ) { 
 + Optional < FinalVariableCandidate > result = Optional . absent ( ) ; 
 + final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; 
 + while ( iterator . hasNext ( ) & & ! result . isPresent ( ) ) { 
 + final ScopeData scopeData = iterator . next ( ) ; 
 + result = scopeData . findFinalVariableCandidateForAst ( ast ) ; 
 + } 
 + return result ; 
 + } 
 + 
 + / * * 
 * Store un - initialized variables in a temporary stack for future use . 
 * / 
 private void storePrevScopeUninitializedVariableData ( ) { 
 @ @ - 365 , 8 + 315 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 * @ param prevScopeUnitializedVariableData variable for previous stack of uninitialized 
 * variables 
 * / 
 - private void updateUninitializedVariables ( Deque < DetailAST > 
 - prevScopeUnitializedVariableData ) { 
 + private void updateUninitializedVariables ( Deque < DetailAST > prevScopeUnitializedVariableData ) { 
 / / Check for only previous scope 
 for ( DetailAST variable : prevScopeUnitializedVariableData ) { 
 for ( ScopeData scopeData : scopeStack ) { 
 @ @ - 385 , 7 + 334 , 8 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 for ( Deque < DetailAST > unitializedVariableData : prevScopeUninitializedVariables ) { 
 for ( DetailAST variable : unitializedVariableData ) { 
 for ( ScopeData scopeData : scopeStack ) { 
 - final FinalVariableCandidate candidate = scopeData . scope . get ( variable . getText ( ) ) ; 
 + final FinalVariableCandidate candidate = 
 + scopeData . scope . get ( variable . getText ( ) ) ; 
 DetailAST storedVariable = null ; 
 if ( candidate ! = null ) { 
 storedVariable = candidate . variableIdent ; 
 @ @ - 422 , 7 + 372 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 * @ return the matching token , or null if no match 
 * / 
 public DetailAST findLastChildWhichContainsSpecifiedToken ( DetailAST ast , int childType , 
 - int containType ) { 
 + int containType ) { 
 DetailAST returnValue = null ; 
 for ( DetailAST astIterator = ast . getFirstChild ( ) ; astIterator ! = null ; 
 astIterator = astIterator . getNextSibling ( ) ) { 
 @ @ - 485 , 10 + 435 , 10 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Remove the variable from the Stack . 
 - * @ param ast Variable to remove 
 + * Removes the final variable candidate from the Stack . 
 + * @ param ast variable to remove . 
 * / 
 - private void removeVariable ( DetailAST ast ) { 
 + private void removeFinalVariableCandidateFromStack ( DetailAST ast ) { 
 final Iterator < ScopeData > iterator = scopeStack . descendingIterator ( ) ; 
 while ( iterator . hasNext ( ) ) { 
 final ScopeData scopeData = iterator . next ( ) ; 
 @ @ - 499 , 7 + 449 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 storedVariable = candidate . variableIdent ; 
 } 
 if ( storedVariable ! = null & & isSameVariables ( storedVariable , ast ) ) { 
 - if ( shouldRemoveVariable ( scopeData , ast ) ) { 
 + if ( shouldRemoveFinalVariableCandidate ( scopeData , ast ) ) { 
 scope . remove ( ast . getText ( ) ) ; 
 } 
 break ; 
 @ @ - 508 , 35 + 458 , 25 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Whether the variable should be removed from the list of final local variable 
 + * Whether the final variable candidate should be removed from the list of final local variable 
 * candidates . 
 * @ param scopeData the scope data of the variable . 
 * @ param ast the variable ast . 
 * @ return true , if the variable should be removed . 
 * / 
 - private static boolean shouldRemoveVariable ( ScopeData scopeData , DetailAST ast ) { 
 + private static boolean shouldRemoveFinalVariableCandidate ( ScopeData scopeData , DetailAST ast ) { 
 boolean shouldRemove = true ; 
 for ( DetailAST variable : scopeData . uninitializedVariables ) { 
 if ( variable . getText ( ) . equals ( ast . getText ( ) ) ) { 
 - 
 / / if the variable is declared outside the loop and initialized inside 
 / / the loop , then it cannot be declared final , as it can be initialized 
 / / more than once in this case 
 - if ( isInTheSameLoop ( variable , ast ) 
 - | | ! isUseOfExternalVariableInsideLoop ( ast ) ) { 
 - if ( isAssignInIfBlock ( scopeData , ast ) & & isAssignInElseBlock ( scopeData , ast ) ) { 
 - shouldRemove = true ; 
 - } 
 - else if ( isAssignInIfBlock ( scopeData , ast ) 
 - & & isAssignOutsideIfOrElseBlock ( scopeData , ast ) 
 - & & ! isAssignInIfBlockWhichIsInsideCaseBlock ( scopeData , ast ) ) { 
 - shouldRemove = true ; 
 - } 
 - else { 
 - shouldRemove = false ; 
 - } 
 + if ( isInTheSameLoop ( variable , ast ) | | ! isUseOfExternalVariableInsideLoop ( ast ) ) { 
 + final FinalVariableCandidate candidate = scopeData . scope . get ( ast . getText ( ) ) ; 
 + shouldRemove = candidate . assignInIfBlock 
 + & & candidate . assignOutsideConditionalBlock 
 + & & ! candidate . assignInIfBlockWhichIsInsideCaseBlock ; 
 } 
 - 
 scopeData . uninitializedVariables . remove ( variable ) ; 
 break ; 
 } 
 @ @ - 544 , 47 + 484 , 6 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 return shouldRemove ; 
 } 
 
 - private static boolean isAssignInIfBlockWhichIsInsideCaseBlock ( ScopeData scopeData , 
 - DetailAST ast ) { 
 - boolean assignInIfElseBlock = false ; 
 - FinalVariableCandidate candidate = scopeData . scope . get ( ast . getText ( ) ) ; 
 - if ( candidate ! = null ) 
 - { 
 - assignInIfElseBlock = candidate . assignInIfBlockWhichIsInsideCaseBlock ; 
 - } 
 - return assignInIfElseBlock ; 
 - } 
 - 
 - private static boolean isAssignInIfBlock ( ScopeData scopeData , DetailAST ast ) { 
 - boolean assignInIfElseBlock = false ; 
 - FinalVariableCandidate candidate = scopeData . scope . get ( ast . getText ( ) ) ; 
 - if ( candidate ! = null ) 
 - { 
 - assignInIfElseBlock = candidate . assignInIfBlock ; 
 - } 
 - return assignInIfElseBlock ; 
 - } 
 - 
 - private static boolean isAssignInElseBlock ( ScopeData scopeData , DetailAST ast ) { 
 - boolean assignInIfElseBlock = false ; 
 - FinalVariableCandidate candidate = scopeData . scope . get ( ast . getText ( ) ) ; 
 - if ( candidate ! = null ) 
 - { 
 - assignInIfElseBlock = candidate . assignInElseBlock ; 
 - } 
 - return assignInIfElseBlock ; 
 - } 
 - 
 - private static boolean isAssignOutsideIfOrElseBlock ( ScopeData scopeData , DetailAST ast ) { 
 - boolean assignInIfElseBlock = false ; 
 - FinalVariableCandidate candidate = scopeData . scope . get ( ast . getText ( ) ) ; 
 - if ( candidate ! = null ) 
 - { 
 - assignInIfElseBlock = candidate . assignOutsideIfOrElseBlock ; 
 - } 
 - return assignInIfElseBlock ; 
 - } 
 - 
 / * * 
 * Checks whether a variable which is declared ouside loop is used inside loop . 
 * For example : 
 @ @ - 600 , 7 + 499 , 6 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 * @ return true if a variable which is declared ouside loop is used inside loop . 
 * / 
 private static boolean isUseOfExternalVariableInsideLoop ( DetailAST variable ) { 
 - boolean result = true ; 
 DetailAST loop2 = variable . getParent ( ) ; 
 while ( loop2 ! = null 
 & & ! isLoopAst ( loop2 . getType ( ) ) ) { 
 @ @ - 729 , 21 + 627 , 43 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 
 / * * Contains definitions of uninitialized variables . * / 
 private final Deque < DetailAST > uninitializedVariables = new ArrayDeque < > ( ) ; 
 + 
 + / * * 
 + * Searches for final local variable candidate for ast in the scope . 
 + * @ param ast ast . 
 + * @ return Optional of { @ link FinalVariableCandidate } . 
 + * / 
 + public Optional < FinalVariableCandidate > findFinalVariableCandidateForAst ( DetailAST ast ) { 
 + Optional < FinalVariableCandidate > result = Optional . absent ( ) ; 
 + DetailAST storedVariable = null ; 
 + final Optional < FinalVariableCandidate > candidate = 
 + Optional . fromNullable ( scope . get ( ast . getText ( ) ) ) ; 
 + if ( candidate . isPresent ( ) ) { 
 + storedVariable = candidate . get ( ) . variableIdent ; 
 + } 
 + if ( storedVariable ! = null & & isSameVariables ( storedVariable , ast ) ) { 
 + result = candidate ; 
 + } 
 + return result ; 
 + } 
 } 
 
 + / * * Represents information about final local variable candidate . * / 
 private static class FinalVariableCandidate { 
 - 
 - private DetailAST variableIdent ; 
 - 
 + / * * Identifier token . * / 
 + private final DetailAST variableIdent ; 
 + / * * Whether variable is assigned in if block . * / 
 private boolean assignInIfBlock ; 
 - 
 - private boolean assignInElseBlock ; 
 - 
 - private boolean assignOutsideIfOrElseBlock ; 
 - 
 + / * * Whether variable is assigned outside conditional block . * / 
 + private boolean assignOutsideConditionalBlock ; 
 + / * * Whether variable is assigned in if block which is located inside case block . * / 
 private boolean assignInIfBlockWhichIsInsideCaseBlock ; 
 
 - public FinalVariableCandidate ( DetailAST variableIdent ) { 
 + / * * 
 + * Creates new instance . 
 + * @ param variableIdent variable identifier . 
 + * / 
 + FinalVariableCandidate ( DetailAST variableIdent ) { 
 this . variableIdent = variableIdent ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java 
 index e87d018 . . 6e8737f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java 
 @ @ - 675 , 6 + 675 , 11 @ @ public class XDocsPagesTest { 
 lastRuleName . toLowerCase ( Locale . ENGLISH ) ) > = 0 ) ; 
 } 
 
 + if ( ! " - - " . equals ( ruleName ) ) { 
 + validateStyleAnchors ( XmlUtil . findChildElementsByTag ( columns . get ( 0 ) , " a " ) , 
 + fileName , ruleName ) ; 
 + } 
 + 
 validateStyleChecks ( XmlUtil . findChildElementsByTag ( columns . get ( 2 ) , " a " ) , 
 XmlUtil . findChildElementsByTag ( columns . get ( 3 ) , " a " ) , fileName , ruleName ) ; 
 
 @ @ - 683 , 6 + 688 , 39 @ @ public class XDocsPagesTest { 
 } 
 } 
 
 + private static void validateStyleAnchors ( Set < Node > anchors , String fileName , String ruleName ) { 
 + Assert . assertEquals ( fileName + " rule ' " + ruleName + " ' must have two row anchors " , 2 , 
 + anchors . size ( ) ) ; 
 + 
 + final int space = ruleName . indexOf ( ' ' ) ; 
 + Assert . assertTrue ( fileName + " rule ' " + ruleName 
 + + " ' must have have a space between the rule ' s number and the rule ' s name " , 
 + space ! = - 1 ) ; 
 + 
 + final String ruleNumber = ruleName . substring ( 0 , space ) ; 
 + 
 + int position = 1 ; 
 + 
 + for ( Node anchor : anchors ) { 
 + final String actualUrl ; 
 + final String expectedUrl ; 
 + 
 + if ( position = = 1 ) { 
 + actualUrl = anchor . getAttributes ( ) . getNamedItem ( " name " ) . getTextContent ( ) ; 
 + expectedUrl = ruleNumber ; 
 + } 
 + else { 
 + actualUrl = anchor . getAttributes ( ) . getNamedItem ( " href " ) . getTextContent ( ) ; 
 + expectedUrl = " # " + ruleNumber ; 
 + } 
 + 
 + Assert . assertEquals ( fileName + " rule ' " + ruleName + " ' anchor " + position 
 + + " shoud have matching name / url " , expectedUrl , actualUrl ) ; 
 + 
 + position + + ; 
 + } 
 + } 
 + 
 private static void validateStyleChecks ( Set < Node > checks , Set < Node > configs , String fileName , 
 String ruleName ) { 
 final Iterator < Node > itrChecks = checks . iterator ( ) ;
