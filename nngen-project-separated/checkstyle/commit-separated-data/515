BLEU SCORE: 0.07393439482604361

TEST MSG: Issue # 5114 : Removed extra numeric offset in JavadocTokenTypes
GENERATED MSG: Issue # 4395 : kill last mutation in pitest - checkstyle - utils

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java <nl> index f2e1d36 . . 80a9eb4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java <nl> @ @ - 1390 , 7 + 1390 , 6 @ @ public final class JavadocTokenTypes { <nl> * Start html tag : & lt ; XXX & gt ; . <nl> * / <nl> public static final int HTML _ ELEMENT _ START = JavadocParser . RULE _ htmlElementStart <nl> - + RULE _ TYPES _ OFFSET <nl> + RULE _ TYPES _ OFFSET ; <nl> <nl> / * * <nl> @ @ - 1408 , 7 + 1407 , 6 @ @ public final class JavadocTokenTypes { <nl> * Html tag attribute . Parent node for : { @ code HTML _ TAG _ IDENT , EQUALS , ATTR _ VALUE } . <nl> * / <nl> public static final int ATTRIBUTE = JavadocParser . RULE _ attribute <nl> - + RULE _ TYPES _ OFFSET <nl> + RULE _ TYPES _ OFFSET ; <nl> <nl> / / / / / / / / / / / / / / / / / / / / / / / HTML TAGS WITH OPTIONAL END TAG / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> @ @ - 1617 , 7 + 1615 , 6 @ @ public final class JavadocTokenTypes { <nl> <nl> / * * Html comment : { @ code < ! - - - - > } . * / <nl> public static final int HTML _ COMMENT = JavadocParser . RULE _ htmlComment <nl> - + RULE _ TYPES _ OFFSET <nl> + RULE _ TYPES _ OFFSET ; <nl> / * * <nl> * CHAR and WS sequence . <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> index c0e5d86 . . b744167 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> @ @ - 343 , 7 + 343 , 7 @ @ public final class JavadocUtils { <nl> if ( id = = JavadocTokenTypes . EOF ) { <nl> name = " EOF " ; <nl> } <nl> - else if ( id > = TOKEN _ VALUE _ TO _ NAME . length ) { <nl> + else if ( id > TOKEN _ VALUE _ TO _ NAME . length - 1 ) { <nl> throw new IllegalArgumentException ( UNKNOWN _ JAVADOC _ TOKEN _ ID _ EXCEPTION _ MESSAGE + id ) ; <nl> } <nl> else { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java <nl> index c11dcdb . . 80cfa07 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java <nl> @ @ - 282 , 12 + 282 , 12 @ @ public class JavadocUtilsTest { <nl> @ Test <nl> public void testGetTokenNameForLowerBoundInvalidId ( ) { <nl> try { <nl> - JavadocUtils . getTokenName ( 20079 ) ; <nl> + JavadocUtils . getTokenName ( 10080 ) ; <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " Invalid exception message " , <nl> - " Unknown javadoc token id . Given id : 20079 " , ex . getMessage ( ) ) ; <nl> + " Unknown javadoc token id . Given id : 10080 " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 359 , 6 + 359 , 6 @ @ public class JavadocUtilsTest { <nl> @ Test <nl> public void testGetTokenNames ( ) { <nl> assertEquals ( " Unexpected token name " , <nl> - " HTML _ COMMENT " , JavadocUtils . getTokenName ( 20078 ) ) ; <nl> + " TEXT " , JavadocUtils . getTokenName ( 10079 ) ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> index adc24fb . . d25ebfa 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> @ @ - 84 , 20 + 84 , 15 @ @ public abstract class AbstractJavadocCheck extends AbstractCheck { <nl> } ; <nl> <nl> / * * <nl> - * Parses content of Javadoc comment as DetailNode tree . <nl> + * The file context . <nl> + * @ noinspection ThreadLocalNotStaticFinal <nl> * / <nl> - private final JavadocDetailNodeParser parser = new JavadocDetailNodeParser ( ) ; <nl> + private final ThreadLocal < FileContext > context = ThreadLocal . withInitial ( FileContext : : new ) ; <nl> <nl> / * * The javadoc tokens the check is interested in . * / <nl> private final Set < Integer > javadocTokens = new HashSet < > ( ) ; <nl> <nl> / * * <nl> - * DetailAST node of considered Javadoc comment that is just a block comment <nl> - * in Java language syntax tree . <nl> - * / <nl> - private DetailAST blockCommentAst ; <nl> - <nl> - / * * <nl> * Returns the default javadoc token types a check is interested in . <nl> * @ return the default javadoc token types <nl> * @ see JavadocTokenTypes <nl> @ @ - 260 , 7 + 255 , 7 @ @ public abstract class AbstractJavadocCheck extends AbstractCheck { <nl> public final void visitToken ( DetailAST blockCommentNode ) { <nl> if ( JavadocUtils . isJavadocComment ( blockCommentNode ) ) { <nl> / / store as field , to share with child Checks <nl> - blockCommentAst = blockCommentNode ; <nl> + context . get ( ) . blockCommentAst = blockCommentNode ; <nl> <nl> final String treeCacheKey = blockCommentNode . getLineNo ( ) + " : " <nl> + blockCommentNode . getColumnNo ( ) ; <nl> @ @ - 271 , 7 + 266 , 7 @ @ public abstract class AbstractJavadocCheck extends AbstractCheck { <nl> result = TREE _ CACHE . get ( ) . get ( treeCacheKey ) ; <nl> } <nl> else { <nl> - result = parser . parseJavadocAsDetailNode ( blockCommentNode ) ; <nl> + result = context . get ( ) . parser . parseJavadocAsDetailNode ( blockCommentNode ) ; <nl> TREE _ CACHE . get ( ) . put ( treeCacheKey , result ) ; <nl> } <nl> <nl> @ @ - 293 , 7 + 288 , 7 @ @ public abstract class AbstractJavadocCheck extends AbstractCheck { <nl> * @ return A block comment in the syntax tree . <nl> * / <nl> protected DetailAST getBlockCommentAst ( ) { <nl> - return blockCommentAst ; <nl> + return context . get ( ) . blockCommentAst ; <nl> } <nl> <nl> / * * <nl> @ @ - 348 , 4 + 343 , 19 @ @ public abstract class AbstractJavadocCheck extends AbstractCheck { <nl> return javadocTokens . contains ( curNode . getType ( ) ) ; <nl> } <nl> <nl> + / * * <nl> + * The file context holder . <nl> + * / <nl> + private static class FileContext { <nl> + / * * <nl> + * Parses content of Javadoc comment as DetailNode tree . <nl> + * / <nl> + private final JavadocDetailNodeParser parser = new JavadocDetailNodeParser ( ) ; <nl> + <nl> + / * * <nl> + * DetailAST node of considered Javadoc comment that is just a block comment <nl> + * in Java language syntax tree . <nl> + * / <nl> + private DetailAST blockCommentAst ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java 
 index f2e1d36 . . 80a9eb4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java 
 @ @ - 1390 , 7 + 1390 , 6 @ @ public final class JavadocTokenTypes { 
 * Start html tag : & lt ; XXX & gt ; . 
 * / 
 public static final int HTML _ ELEMENT _ START = JavadocParser . RULE _ htmlElementStart 
 - + RULE _ TYPES _ OFFSET 
 + RULE _ TYPES _ OFFSET ; 
 
 / * * 
 @ @ - 1408 , 7 + 1407 , 6 @ @ public final class JavadocTokenTypes { 
 * Html tag attribute . Parent node for : { @ code HTML _ TAG _ IDENT , EQUALS , ATTR _ VALUE } . 
 * / 
 public static final int ATTRIBUTE = JavadocParser . RULE _ attribute 
 - + RULE _ TYPES _ OFFSET 
 + RULE _ TYPES _ OFFSET ; 
 
 / / / / / / / / / / / / / / / / / / / / / / / HTML TAGS WITH OPTIONAL END TAG / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 @ @ - 1617 , 7 + 1615 , 6 @ @ public final class JavadocTokenTypes { 
 
 / * * Html comment : { @ code < ! - - - - > } . * / 
 public static final int HTML _ COMMENT = JavadocParser . RULE _ htmlComment 
 - + RULE _ TYPES _ OFFSET 
 + RULE _ TYPES _ OFFSET ; 
 / * * 
 * CHAR and WS sequence . 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 index c0e5d86 . . b744167 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 @ @ - 343 , 7 + 343 , 7 @ @ public final class JavadocUtils { 
 if ( id = = JavadocTokenTypes . EOF ) { 
 name = " EOF " ; 
 } 
 - else if ( id > = TOKEN _ VALUE _ TO _ NAME . length ) { 
 + else if ( id > TOKEN _ VALUE _ TO _ NAME . length - 1 ) { 
 throw new IllegalArgumentException ( UNKNOWN _ JAVADOC _ TOKEN _ ID _ EXCEPTION _ MESSAGE + id ) ; 
 } 
 else { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java 
 index c11dcdb . . 80cfa07 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java 
 @ @ - 282 , 12 + 282 , 12 @ @ public class JavadocUtilsTest { 
 @ Test 
 public void testGetTokenNameForLowerBoundInvalidId ( ) { 
 try { 
 - JavadocUtils . getTokenName ( 20079 ) ; 
 + JavadocUtils . getTokenName ( 10080 ) ; 
 fail ( " exception expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " Invalid exception message " , 
 - " Unknown javadoc token id . Given id : 20079 " , ex . getMessage ( ) ) ; 
 + " Unknown javadoc token id . Given id : 10080 " , ex . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 359 , 6 + 359 , 6 @ @ public class JavadocUtilsTest { 
 @ Test 
 public void testGetTokenNames ( ) { 
 assertEquals ( " Unexpected token name " , 
 - " HTML _ COMMENT " , JavadocUtils . getTokenName ( 20078 ) ) ; 
 + " TEXT " , JavadocUtils . getTokenName ( 10079 ) ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 index adc24fb . . d25ebfa 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 @ @ - 84 , 20 + 84 , 15 @ @ public abstract class AbstractJavadocCheck extends AbstractCheck { 
 } ; 
 
 / * * 
 - * Parses content of Javadoc comment as DetailNode tree . 
 + * The file context . 
 + * @ noinspection ThreadLocalNotStaticFinal 
 * / 
 - private final JavadocDetailNodeParser parser = new JavadocDetailNodeParser ( ) ; 
 + private final ThreadLocal < FileContext > context = ThreadLocal . withInitial ( FileContext : : new ) ; 
 
 / * * The javadoc tokens the check is interested in . * / 
 private final Set < Integer > javadocTokens = new HashSet < > ( ) ; 
 
 / * * 
 - * DetailAST node of considered Javadoc comment that is just a block comment 
 - * in Java language syntax tree . 
 - * / 
 - private DetailAST blockCommentAst ; 
 - 
 - / * * 
 * Returns the default javadoc token types a check is interested in . 
 * @ return the default javadoc token types 
 * @ see JavadocTokenTypes 
 @ @ - 260 , 7 + 255 , 7 @ @ public abstract class AbstractJavadocCheck extends AbstractCheck { 
 public final void visitToken ( DetailAST blockCommentNode ) { 
 if ( JavadocUtils . isJavadocComment ( blockCommentNode ) ) { 
 / / store as field , to share with child Checks 
 - blockCommentAst = blockCommentNode ; 
 + context . get ( ) . blockCommentAst = blockCommentNode ; 
 
 final String treeCacheKey = blockCommentNode . getLineNo ( ) + " : " 
 + blockCommentNode . getColumnNo ( ) ; 
 @ @ - 271 , 7 + 266 , 7 @ @ public abstract class AbstractJavadocCheck extends AbstractCheck { 
 result = TREE _ CACHE . get ( ) . get ( treeCacheKey ) ; 
 } 
 else { 
 - result = parser . parseJavadocAsDetailNode ( blockCommentNode ) ; 
 + result = context . get ( ) . parser . parseJavadocAsDetailNode ( blockCommentNode ) ; 
 TREE _ CACHE . get ( ) . put ( treeCacheKey , result ) ; 
 } 
 
 @ @ - 293 , 7 + 288 , 7 @ @ public abstract class AbstractJavadocCheck extends AbstractCheck { 
 * @ return A block comment in the syntax tree . 
 * / 
 protected DetailAST getBlockCommentAst ( ) { 
 - return blockCommentAst ; 
 + return context . get ( ) . blockCommentAst ; 
 } 
 
 / * * 
 @ @ - 348 , 4 + 343 , 19 @ @ public abstract class AbstractJavadocCheck extends AbstractCheck { 
 return javadocTokens . contains ( curNode . getType ( ) ) ; 
 } 
 
 + / * * 
 + * The file context holder . 
 + * / 
 + private static class FileContext { 
 + / * * 
 + * Parses content of Javadoc comment as DetailNode tree . 
 + * / 
 + private final JavadocDetailNodeParser parser = new JavadocDetailNodeParser ( ) ; 
 + 
 + / * * 
 + * DetailAST node of considered Javadoc comment that is just a block comment 
 + * in Java language syntax tree . 
 + * / 
 + private DetailAST blockCommentAst ; 
 + } 
 }
