BLEU SCORE: 0.020943469770777077

TEST MSG: Issue # 2625 : made PackageObjectFactory public
GENERATED MSG: Replace Class . newInstance ( ) with Constructor . newInstance ( ) . # 1555

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> index 5ef6007 . . a941a17 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> @ @ - 36 , 7 + 36 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> * @ author Rick Giles <nl> * @ author lkuehne <nl> * / <nl> - class PackageObjectFactory implements ModuleFactory { <nl> + public class PackageObjectFactory implements ModuleFactory { <nl> / * * Logger for PackageObjectFactory . * / <nl> private static final Log LOG = LogFactory . getLog ( PackageObjectFactory . class ) ; <nl> <nl> @ @ - 59 , 7 + 59 , 7 @ @ class PackageObjectFactory implements ModuleFactory { <nl> * @ param moduleClassLoader class loader used to load Checkstyle <nl> * core and custom modules <nl> * / <nl> - PackageObjectFactory ( Set < String > packageNames , <nl> + public PackageObjectFactory ( Set < String > packageNames , <nl> ClassLoader moduleClassLoader ) { <nl> if ( moduleClassLoader = = null ) { <nl> throw new IllegalArgumentException (
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index e8da73b . . fae3d2f 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1099 , 7 + 1099 , 6 @ @ <nl> < regex > < pattern > . * . checks . coding . FinalLocalVariableCheck < / pattern > < branchRate > 83 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . coding . IllegalInstantiationCheck < / pattern > < branchRate > 81 < / branchRate > < lineRate > 97 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . coding . ReturnCountCheck < / pattern > < branchRate > 55 < / branchRate > < lineRate > 74 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . checks . coding . SimplifyBooleanReturnCheck < / pattern > < branchRate > 83 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . coding . VariableDeclarationUsageDistanceCheck < / pattern > < branchRate > 90 < / branchRate > < lineRate > 98 < / lineRate > < / regex > <nl> <nl> < regex > < pattern > . * . checks . header . AbstractHeaderCheck < / pattern > < branchRate > 90 < / branchRate > < lineRate > 87 < / lineRate > < / regex > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java <nl> index 9786451 . . 2969033 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java <nl> @ @ - 25 , 7 + 25 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> - <nl> / * * <nl> * < p > <nl> * Checks for overly complicated boolean return statements . <nl> @ @ - 49 , 13 + 48 , 18 @ @ public class SimplifyBooleanReturnCheck <nl> public static final String MSG _ KEY = " simplify . boolreturn " ; <nl> <nl> @ Override <nl> - public int [ ] getDefaultTokens ( ) { <nl> + public int [ ] getAcceptableTokens ( ) { <nl> return new int [ ] { TokenTypes . LITERAL _ IF } ; <nl> } <nl> <nl> @ Override <nl> - public int [ ] getAcceptableTokens ( ) { <nl> - return new int [ ] { TokenTypes . LITERAL _ IF } ; <nl> + public int [ ] getDefaultTokens ( ) { <nl> + return getAcceptableTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getAcceptableTokens ( ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 133 , 7 + 137 , 7 @ @ public class SimplifyBooleanReturnCheck <nl> <nl> final AST expr = ast . getFirstChild ( ) ; <nl> <nl> - if ( expr = = null | | expr . getType ( ) = = TokenTypes . SEMI ) { <nl> + if ( expr . getType ( ) = = TokenTypes . SEMI ) { <nl> return false ; <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputSimplifyBoolean . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputSimplifyBoolean . java <nl> index 026e61e . . 03b263d 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputSimplifyBoolean . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputSimplifyBoolean . java <nl> @ @ - 65 , 4 + 65 , 24 @ @ public class InputSimplifyBoolean <nl> } <nl> return false ; <nl> } <nl> + <nl> + boolean a ( ) { <nl> + boolean asd = false ; <nl> + boolean dasa = true ; <nl> + <nl> + if ( asd ) { <nl> + return true ; <nl> + } else { <nl> + return dasa ; <nl> + } <nl> + } <nl> + <nl> + boolean b ( ) { <nl> + boolean asd = false ; <nl> + <nl> + if ( asd ) ; <nl> + else ; <nl> + <nl> + return true ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 index 5ef6007 . . a941a17 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 @ @ - 36 , 7 + 36 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 * @ author Rick Giles 
 * @ author lkuehne 
 * / 
 - class PackageObjectFactory implements ModuleFactory { 
 + public class PackageObjectFactory implements ModuleFactory { 
 / * * Logger for PackageObjectFactory . * / 
 private static final Log LOG = LogFactory . getLog ( PackageObjectFactory . class ) ; 
 
 @ @ - 59 , 7 + 59 , 7 @ @ class PackageObjectFactory implements ModuleFactory { 
 * @ param moduleClassLoader class loader used to load Checkstyle 
 * core and custom modules 
 * / 
 - PackageObjectFactory ( Set < String > packageNames , 
 + public PackageObjectFactory ( Set < String > packageNames , 
 ClassLoader moduleClassLoader ) { 
 if ( moduleClassLoader = = null ) { 
 throw new IllegalArgumentException (

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index e8da73b . . fae3d2f 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1099 , 7 + 1099 , 6 @ @ 
 < regex > < pattern > . * . checks . coding . FinalLocalVariableCheck < / pattern > < branchRate > 83 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . coding . IllegalInstantiationCheck < / pattern > < branchRate > 81 < / branchRate > < lineRate > 97 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . coding . ReturnCountCheck < / pattern > < branchRate > 55 < / branchRate > < lineRate > 74 < / lineRate > < / regex > 
 - < regex > < pattern > . * . checks . coding . SimplifyBooleanReturnCheck < / pattern > < branchRate > 83 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . coding . VariableDeclarationUsageDistanceCheck < / pattern > < branchRate > 90 < / branchRate > < lineRate > 98 < / lineRate > < / regex > 
 
 < regex > < pattern > . * . checks . header . AbstractHeaderCheck < / pattern > < branchRate > 90 < / branchRate > < lineRate > 87 < / lineRate > < / regex > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java 
 index 9786451 . . 2969033 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java 
 @ @ - 25 , 7 + 25 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 - 
 / * * 
 * < p > 
 * Checks for overly complicated boolean return statements . 
 @ @ - 49 , 13 + 48 , 18 @ @ public class SimplifyBooleanReturnCheck 
 public static final String MSG _ KEY = " simplify . boolreturn " ; 
 
 @ Override 
 - public int [ ] getDefaultTokens ( ) { 
 + public int [ ] getAcceptableTokens ( ) { 
 return new int [ ] { TokenTypes . LITERAL _ IF } ; 
 } 
 
 @ Override 
 - public int [ ] getAcceptableTokens ( ) { 
 - return new int [ ] { TokenTypes . LITERAL _ IF } ; 
 + public int [ ] getDefaultTokens ( ) { 
 + return getAcceptableTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getAcceptableTokens ( ) ; 
 } 
 
 @ Override 
 @ @ - 133 , 7 + 137 , 7 @ @ public class SimplifyBooleanReturnCheck 
 
 final AST expr = ast . getFirstChild ( ) ; 
 
 - if ( expr = = null | | expr . getType ( ) = = TokenTypes . SEMI ) { 
 + if ( expr . getType ( ) = = TokenTypes . SEMI ) { 
 return false ; 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputSimplifyBoolean . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputSimplifyBoolean . java 
 index 026e61e . . 03b263d 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputSimplifyBoolean . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputSimplifyBoolean . java 
 @ @ - 65 , 4 + 65 , 24 @ @ public class InputSimplifyBoolean 
 } 
 return false ; 
 } 
 + 
 + boolean a ( ) { 
 + boolean asd = false ; 
 + boolean dasa = true ; 
 + 
 + if ( asd ) { 
 + return true ; 
 + } else { 
 + return dasa ; 
 + } 
 + } 
 + 
 + boolean b ( ) { 
 + boolean asd = false ; 
 + 
 + if ( asd ) ; 
 + else ; 
 + 
 + return true ; 
 + } 
 }
