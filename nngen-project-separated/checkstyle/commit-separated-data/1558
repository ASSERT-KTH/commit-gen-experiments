BLEU SCORE: 1.0

TEST MSG: Issue # 2161 : unify test input locations
GENERATED MSG: Issue # 2161 : unify test input locations

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java <nl> index 7b5c83e . . 61010bd 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalThrowsCheck . MSG _ KEY ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> @ @ - 31 , 6 + 32 , 12 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class IllegalThrowsCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testDefault ( ) throws Exception { <nl> DefaultConfiguration checkConfig = createCheckConfig ( IllegalThrowsCheck . class ) ; <nl> @ @ - 41 , 7 + 48 , 7 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport { <nl> " 14 : 73 : " + getCheckMessage ( MSG _ KEY , " java . lang . Error " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 59 , 7 + 66 , 7 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport { <nl> " 14 : 73 : " + getCheckMessage ( MSG _ KEY , " java . lang . Error " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 75 , 7 + 82 , 7 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport { <nl> " 18 : 35 : " + getCheckMessage ( MSG _ KEY , " Throwable " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 93 , 7 + 100 , 7 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport { <nl> " 18 : 35 : " + getCheckMessage ( MSG _ KEY , " Throwable " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 107 , 8 + 114 , 7 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport { <nl> <nl> String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator <nl> - + " InputIllegalThrowsCheckIgnoreOverriddenMethods . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalThrowsCheckIgnoreOverriddenMethods . java " ) , expected ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 125 , 8 + 131 , 7 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport { <nl> " 12 : 51 : " + getCheckMessage ( MSG _ KEY , " RuntimeException " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator <nl> - + " InputIllegalThrowsCheckIgnoreOverriddenMethods . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalThrowsCheckIgnoreOverriddenMethods . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalThrowsCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalThrowsCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 5649331 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalThrowsCheck . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + / * * Input file * / <nl> + public class InputIllegalThrowsCheck { <nl> + <nl> + public void method ( ) throws NullPointerException <nl> + { / / no code <nl> + } <nl> + <nl> + public java . lang . Throwable methodOne ( ) throws RuntimeException <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + public void methodTwo ( ) throws java . lang . RuntimeException , java . lang . Error <nl> + { <nl> + } <nl> + <nl> + public void finalize ( ) throws Throwable { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalThrowsCheckIgnoreOverriddenMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalThrowsCheckIgnoreOverriddenMethods . java <nl> new file mode 100644 <nl> index 0000000 . . b741146 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalThrowsCheckIgnoreOverriddenMethods . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputIllegalThrowsCheckIgnoreOverriddenMethods <nl> + extends InputIllegalThrowsCheck <nl> + { <nl> + @ Override <nl> + public void methodTwo ( ) throws RuntimeException { <nl> + <nl> + } <nl> + <nl> + @ java . lang . Override <nl> + public java . lang . Throwable methodOne ( ) throws RuntimeException { <nl> + return null ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java <nl> deleted file mode 100644 <nl> index 0699e5e . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 21 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - / * * Input file * / <nl> - public class InputIllegalThrowsCheck { <nl> - <nl> - public void method ( ) throws NullPointerException <nl> - { / / no code <nl> - } <nl> - <nl> - public java . lang . Throwable methodOne ( ) throws RuntimeException <nl> - { <nl> - return null ; <nl> - } <nl> - <nl> - public void methodTwo ( ) throws java . lang . RuntimeException , java . lang . Error <nl> - { <nl> - } <nl> - <nl> - public void finalize ( ) throws Throwable { <nl> - <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheckIgnoreOverriddenMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheckIgnoreOverriddenMethods . java <nl> deleted file mode 100644 <nl> index 431795b . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheckIgnoreOverriddenMethods . java <nl> + + + / dev / null <nl> @ @ - 1 , 15 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - public class InputIllegalThrowsCheckIgnoreOverriddenMethods <nl> - extends InputIllegalThrowsCheck <nl> - { <nl> - @ Override <nl> - public void methodTwo ( ) throws RuntimeException { <nl> - <nl> - } <nl> - <nl> - @ java . lang . Override <nl> - public java . lang . Throwable methodOne ( ) throws RuntimeException { <nl> - return null ; <nl> - } <nl> - }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> index 9af22a9 . . 2cdac81 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { <nl> } <nl> <nl> private static List < RevCommit > getCommitsToCheck ( ) throws Exception { <nl> - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; <nl> - <nl> - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> List < RevCommit > commits ; <nl> - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> - } <nl> - else { <nl> - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { <nl> + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> + else { <nl> + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> } <nl> return commits ; <nl> } <nl> @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { <nl> <nl> private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { <nl> RevCommitsPair revCommitIteratorPair ; <nl> - try { <nl> + <nl> + try ( RevWalk revWalk = new RevWalk ( repo ) ) { <nl> Iterator < RevCommit > first ; <nl> Iterator < RevCommit > second ; <nl> - <nl> - RevWalk revWalk = new RevWalk ( repo ) ; <nl> - <nl> ObjectId headId = repo . resolve ( Constants . HEAD ) ; <nl> RevCommit headCommit = revWalk . parseCommit ( headId ) ; <nl> <nl> @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { <nl> RevCommit firstParent = headCommit . getParent ( 0 ) ; <nl> RevCommit secondParent = headCommit . getParent ( 1 ) ; <nl> <nl> - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + } <nl> } <nl> else { <nl> - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . call ( ) . iterator ( ) ; <nl> + } <nl> second = Collections . emptyIterator ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java 
 index 7b5c83e . . 61010bd 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalThrowsCheck . MSG _ KEY ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 @ @ - 31 , 6 + 32 , 12 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class IllegalThrowsCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testDefault ( ) throws Exception { 
 DefaultConfiguration checkConfig = createCheckConfig ( IllegalThrowsCheck . class ) ; 
 @ @ - 41 , 7 + 48 , 7 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport { 
 " 14 : 73 : " + getCheckMessage ( MSG _ KEY , " java . lang . Error " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalThrowsCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 59 , 7 + 66 , 7 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport { 
 " 14 : 73 : " + getCheckMessage ( MSG _ KEY , " java . lang . Error " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalThrowsCheck . java " ) , expected ) ; 
 } 
 
 / * * 
 @ @ - 75 , 7 + 82 , 7 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport { 
 " 18 : 35 : " + getCheckMessage ( MSG _ KEY , " Throwable " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalThrowsCheck . java " ) , expected ) ; 
 } 
 
 / * * 
 @ @ - 93 , 7 + 100 , 7 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport { 
 " 18 : 35 : " + getCheckMessage ( MSG _ KEY , " Throwable " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalThrowsCheck . java " ) , expected ) ; 
 } 
 
 / * * 
 @ @ - 107 , 8 + 114 , 7 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport { 
 
 String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator 
 - + " InputIllegalThrowsCheckIgnoreOverriddenMethods . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalThrowsCheckIgnoreOverriddenMethods . java " ) , expected ) ; 
 } 
 
 / * * 
 @ @ - 125 , 8 + 131 , 7 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport { 
 " 12 : 51 : " + getCheckMessage ( MSG _ KEY , " RuntimeException " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator 
 - + " InputIllegalThrowsCheckIgnoreOverriddenMethods . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalThrowsCheckIgnoreOverriddenMethods . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalThrowsCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalThrowsCheck . java 
 new file mode 100644 
 index 0000000 . . 5649331 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalThrowsCheck . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + / * * Input file * / 
 + public class InputIllegalThrowsCheck { 
 + 
 + public void method ( ) throws NullPointerException 
 + { / / no code 
 + } 
 + 
 + public java . lang . Throwable methodOne ( ) throws RuntimeException 
 + { 
 + return null ; 
 + } 
 + 
 + public void methodTwo ( ) throws java . lang . RuntimeException , java . lang . Error 
 + { 
 + } 
 + 
 + public void finalize ( ) throws Throwable { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalThrowsCheckIgnoreOverriddenMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalThrowsCheckIgnoreOverriddenMethods . java 
 new file mode 100644 
 index 0000000 . . b741146 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalThrowsCheckIgnoreOverriddenMethods . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputIllegalThrowsCheckIgnoreOverriddenMethods 
 + extends InputIllegalThrowsCheck 
 + { 
 + @ Override 
 + public void methodTwo ( ) throws RuntimeException { 
 + 
 + } 
 + 
 + @ java . lang . Override 
 + public java . lang . Throwable methodOne ( ) throws RuntimeException { 
 + return null ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java 
 deleted file mode 100644 
 index 0699e5e . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java 
 + + + / dev / null 
 @ @ - 1 , 21 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - / * * Input file * / 
 - public class InputIllegalThrowsCheck { 
 - 
 - public void method ( ) throws NullPointerException 
 - { / / no code 
 - } 
 - 
 - public java . lang . Throwable methodOne ( ) throws RuntimeException 
 - { 
 - return null ; 
 - } 
 - 
 - public void methodTwo ( ) throws java . lang . RuntimeException , java . lang . Error 
 - { 
 - } 
 - 
 - public void finalize ( ) throws Throwable { 
 - 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheckIgnoreOverriddenMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheckIgnoreOverriddenMethods . java 
 deleted file mode 100644 
 index 431795b . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheckIgnoreOverriddenMethods . java 
 + + + / dev / null 
 @ @ - 1 , 15 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - public class InputIllegalThrowsCheckIgnoreOverriddenMethods 
 - extends InputIllegalThrowsCheck 
 - { 
 - @ Override 
 - public void methodTwo ( ) throws RuntimeException { 
 - 
 - } 
 - 
 - @ java . lang . Override 
 - public java . lang . Throwable methodOne ( ) throws RuntimeException { 
 - return null ; 
 - } 
 - }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 index 9af22a9 . . 2cdac81 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { 
 } 
 
 private static List < RevCommit > getCommitsToCheck ( ) throws Exception { 
 - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; 
 - 
 - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 List < RevCommit > commits ; 
 - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 - } 
 - else { 
 - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { 
 + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 + else { 
 + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 } 
 return commits ; 
 } 
 @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { 
 
 private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { 
 RevCommitsPair revCommitIteratorPair ; 
 - try { 
 + 
 + try ( RevWalk revWalk = new RevWalk ( repo ) ) { 
 Iterator < RevCommit > first ; 
 Iterator < RevCommit > second ; 
 - 
 - RevWalk revWalk = new RevWalk ( repo ) ; 
 - 
 ObjectId headId = repo . resolve ( Constants . HEAD ) ; 
 RevCommit headCommit = revWalk . parseCommit ( headId ) ; 
 
 @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { 
 RevCommit firstParent = headCommit . getParent ( 0 ) ; 
 RevCommit secondParent = headCommit . getParent ( 1 ) ; 
 
 - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + } 
 } 
 else { 
 - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . call ( ) . iterator ( ) ; 
 + } 
 second = Collections . emptyIterator ( ) ; 
 } 

