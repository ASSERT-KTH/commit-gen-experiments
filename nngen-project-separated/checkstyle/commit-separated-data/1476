BLEU SCORE: 0.8633400213704505

TEST MSG: Issue # 2451 : removed excess hierarchy from AbstractNameCheck
GENERATED MSG: Issue # 2451 : removed excess hierarchy from MutableExceptionCheck

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 9e6db7a . . 5e076b6 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 42 , 7 + 42 , 7 @ @ <nl> files = " AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java " / > <nl> <nl> < ! - - Tone down the checking for test code - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 328 " / > <nl> + < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 317 " / > <nl> < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > <nl> < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> < suppress checks = " Javadoc " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java <nl> index a5387ec . . e35be52 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java <nl> @ @ - 19 , 9 + 19 , 12 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> <nl> + import java . util . regex . Pattern ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . checks . AbstractFormatCheck ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * Abstract class for checking that names conform to a specified format . <nl> @ @ - 29 , 30 + 32 , 46 @ @ import com . puppycrawl . tools . checkstyle . checks . AbstractFormatCheck ; <nl> * @ author Rick Giles <nl> * / <nl> public abstract class AbstractNameCheck <nl> - extends AbstractFormatCheck { <nl> + extends Check { <nl> / * * <nl> * Message key for invalid pattern error . <nl> * / <nl> public static final String MSG _ INVALID _ PATTERN = " name . invalidPattern " ; <nl> <nl> + / * * The format string of the regexp . * / <nl> + private String format ; <nl> + <nl> + / * * The regexp to match against . * / <nl> + private Pattern regexp ; <nl> + <nl> / * * <nl> * Creates a new { @ code AbstractNameCheck } instance . <nl> * @ param format format to check with <nl> * / <nl> protected AbstractNameCheck ( String format ) { <nl> - super ( format ) ; <nl> + setFormat ( format ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the format to the specified regular expression . <nl> + * @ param format a { @ code String } value <nl> + * @ throws org . apache . commons . beanutils . ConversionException unable to parse format <nl> + * / <nl> + public final void setFormat ( String format ) { <nl> + this . format = format ; <nl> + regexp = CommonUtils . createPattern ( format ) ; <nl> } <nl> <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> if ( mustCheckName ( ast ) ) { <nl> final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> - if ( ! getRegexp ( ) . matcher ( nameAST . getText ( ) ) . find ( ) ) { <nl> + if ( ! regexp . matcher ( nameAST . getText ( ) ) . find ( ) ) { <nl> log ( nameAST . getLineNo ( ) , <nl> nameAST . getColumnNo ( ) , <nl> MSG _ INVALID _ PATTERN , <nl> nameAST . getText ( ) , <nl> - getFormat ( ) ) ; <nl> + format ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> index b919653 . . 15453bc 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> @ @ - 110 , 17 + 110 , 6 @ @ public class XDocsPagesTest { <nl> <nl> private static final List < String > UNDOCUMENTED _ PROPERTIES = Arrays . asList ( <nl> " SuppressWithNearbyCommentFilter . fileContents " , <nl> - " ClassTypeParameterNameCheck . compileFlags " , <nl> - " ConstantNameCheck . compileFlags " , <nl> - " InterfaceTypeParameterNameCheck . compileFlags " , <nl> - " LocalFinalVariableNameCheck . compileFlags " , <nl> - " LocalVariableNameCheck . compileFlags " , <nl> - " MemberNameCheck . compileFlags " , <nl> - " MethodNameCheck . compileFlags " , <nl> - " MethodTypeParameterNameCheck . compileFlags " , <nl> - " ParameterNameCheck . compileFlags " , <nl> - " StaticVariableNameCheck . compileFlags " , <nl> - " TypeNameCheck . compileFlags " , <nl> " SuppressionCommentFilter . fileContents " , <nl> " MethodNameCheck . applyToPackage " , <nl> " MethodNameCheck . applyToPrivate " ,
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java <nl> index f8db476 . . 2b713cb 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java <nl> @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . MagicNumberCheck . MSG _ KEY ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> @ @ - 28 , 6 + 31 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class MagicNumberCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testDefault ( ) <nl> throws Exception { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputMagicNumber . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputMagicNumber . java <nl> deleted file mode 100644 <nl> index 5d91067 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputMagicNumber . java <nl> + + + / dev / null <nl> @ @ - 1 , 211 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - / * * <nl> - * Describe class InputMagicNumber <nl> - * @ author Rick Giles <nl> - * @ version 6 - May - 2003 <nl> - * / <nl> - public class InputMagicNumber { <nl> - public void magicMethod ( ) { <nl> - / / constants , ignore <nl> - final int INT _ CONST = 101 _ 000 ; <nl> - final long LONG _ CONST1 = 100 _ 000L ; <nl> - final long LONG _ CONST2 = 100l ; <nl> - final float FLOAT _ CONST1 = 1 . 500 _ 0F ; <nl> - final float FLOAT _ CONST2 = 1 . 5f ; <nl> - final double DOUBLE _ CONST1 = 1 . 500 _ 0D ; <nl> - final double DOUBLE _ CONST2 = 1 . 5d ; <nl> - final double DOUBLE _ CONST3 = 1 . 5 ; <nl> - <nl> - / / ignore by default <nl> - int int _ var1 = 1 ; <nl> - int int _ var2 = ( 2 ) ; <nl> - long long _ var1 = 0L ; <nl> - long long _ var2 = 0l ; <nl> - double double _ var1 = 0D ; <nl> - double double _ var2 = 0d ; <nl> - <nl> - int [ ] int _ array = new int [ 2 ] ; <nl> - <nl> - int _ var1 = 1 + 2 ; <nl> - int _ var1 + = 1 ; <nl> - double _ var1 = 1 . 0 + 2 . 0 ; <nl> - <nl> - for ( int i = 0 ; i < 2 ; i + + ) ; <nl> - <nl> - if ( 1 < 2 ) ; <nl> - <nl> - if ( 1 . 0 < 2 . 0 ) ; <nl> - <nl> - / / magic numbers <nl> - int int _ magic1 = 3 _ 000 ; <nl> - double double _ magic1 = 1 . 5 _ 0 ; <nl> - int int _ magic2 = ( 3 + 4 ) ; <nl> - <nl> - int _ array = new int [ 3 ] ; <nl> - <nl> - int _ magic1 + = 3 ; <nl> - double _ magic1 * = 1 . 5 ; <nl> - <nl> - for ( int j = 3 ; j < 5 ; j + = 3 ) { <nl> - int _ magic1 + + ; <nl> - } <nl> - <nl> - if ( int _ magic1 < 3 ) { <nl> - int _ magic1 = int _ magic1 + 3 ; <nl> - } <nl> - <nl> - / / octal <nl> - int octalVar0 = 00 ; <nl> - int octalVar8 = 010 ; <nl> - int octalVar9 = 011 ; <nl> - <nl> - long longOctalVar8 = 0 _ 10L ; <nl> - long longOctalVar9 = 011l ; <nl> - <nl> - / / hex <nl> - int hexVar0 = 0x0 ; <nl> - int hexVar16 = 0x10 ; <nl> - int hexVar17 = 0X011 ; <nl> - long longHexVar0 = 0x0L ; <nl> - long longHexVar16 = 0x10L ; <nl> - long longHexVar17 = 0X11l ; <nl> - } <nl> - } <nl> - <nl> - interface Blah <nl> - { <nl> - int LOW = 5 ; <nl> - int HIGH = 78 ; <nl> - } <nl> - <nl> - class ArrayMagicTest <nl> - { <nl> - private static final int [ ] NONMAGIC = { 3 } ; <nl> - private int [ ] magic = { 3 } ; <nl> - private static final int [ ] [ ] NONMAGIC2 = { { 1 } , { 2 } , { 3 } } ; <nl> - } <nl> - <nl> - / * * test long hex * / <nl> - class LongHex <nl> - { <nl> - long l = 0xffffffffL ; <nl> - } <nl> - <nl> - / * * test signed values * / <nl> - class Signed <nl> - { <nl> - public static final int CONST _ PLUS _ THREE = + 3 ; <nl> - public static final int CONST _ MINUS _ TWO = - 2 ; <nl> - private int mPlusThree = + 3 ; <nl> - private int mMinusTwo = - 2 ; <nl> - private double mPlusDecimal = + 3 . 5 ; <nl> - private double mMinusDecimal = - 2 . 5 ; <nl> - } <nl> - <nl> - / * * test octal and hex negative values * / <nl> - class NegativeOctalHex <nl> - { <nl> - private int hexIntMinusOne = 0xffffffff ; <nl> - private long hexLongMinusOne = 0xffffffffffffffffL ; <nl> - private long hexIntMinValue = 0x80000000 ; <nl> - private long hexLongMinValue = 0x8000000000000000L ; <nl> - private int octalIntMinusOne = 037777777777 ; <nl> - private long octalLongMinusOne = 01777777777777777777777L ; <nl> - private long octalIntMinValue = 020000000000 ; <nl> - private long octalLongMinValue = 01000000000000000000000L ; <nl> - } <nl> - <nl> - class Cast <nl> - { <nl> - public static final int TESTINTVAL = ( byte ) 0x80 ; <nl> - } <nl> - <nl> - class ComplexAndFlagged <nl> - { <nl> - public static final java . util . List MYLIST = new java . util . ArrayList ( ) <nl> - { <nl> - public int size ( ) <nl> - { <nl> - / / should be flagged although technically inside const definition <nl> - return 378 ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - class ComplexButNotFlagged <nl> - { <nl> - / / according to user feedback this is typical code that should not be flagged <nl> - public final double SpecialSum = 2 + 1e10 , SpecialDifference = 4 - java . lang . Math . PI ; <nl> - public final Integer DefaultInit = new Integer ( 27 ) ; <nl> - public final int SpecsPerDay = 24 * 60 * 60 , SpecialRatio = 4 / 3 ; <nl> - public final javax . swing . border . Border StdBorder = <nl> - javax . swing . BorderFactory . createEmptyBorder ( 3 , 3 , 3 , 3 ) ; <nl> - } <nl> - <nl> - enum MyEnum <nl> - { <nl> - A ( 3 ) , <nl> - B ( 54 ) ; <nl> - <nl> - private MyEnum ( int value ) <nl> - { <nl> - <nl> - } <nl> - } <nl> - <nl> - class TestHashCodeMethod { <nl> - / / valid hash code method <nl> - public int hashCode ( ) { <nl> - return 31 ; <nl> - } <nl> - <nl> - / / invalid hash code method : has parameters <nl> - public int hashCode ( int val ) { <nl> - return 42 ; <nl> - } <nl> - <nl> - / / invalid hash code method : misspelled <nl> - public int hashcode ( ) { <nl> - return 13 ; <nl> - } <nl> - <nl> - static { <nl> - int x = 21 ; <nl> - } <nl> - <nl> - { <nl> - int y = 37 ; <nl> - } <nl> - <nl> - public TestHashCodeMethod ( ) { <nl> - int z = 101 ; <nl> - } <nl> - <nl> - @ IntMethodAnnotation ( 42 ) <nl> - public void another ( ) { <nl> - } <nl> - <nl> - @ IntMethodAnnotation ( value = 43 ) <nl> - public void another2 ( ) { <nl> - } <nl> - <nl> - @ IntMethodAnnotation ( - 44 ) <nl> - public void anotherNegative ( ) { <nl> - } <nl> - <nl> - @ IntMethodAnnotation ( value = - 45 ) <nl> - public void anotherNegative2 ( ) { <nl> - } <nl> - } <nl> - <nl> - class TestMethodCall { <nl> - <nl> - 	 public TestMethodCall ( int x ) { <nl> - <nl> - } <nl> - <nl> - 	 public void method2 ( ) { <nl> - final TestMethodCall dummyObject = new TestMethodCall ( 62 ) ; <nl> - 	 } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / IntMethodAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / IntMethodAnnotation . java <nl> deleted file mode 100644 <nl> index b176087 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / IntMethodAnnotation . java <nl> + + + / dev / null <nl> @ @ - 1 , 12 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - import java . lang . annotation . ElementType ; <nl> - import java . lang . annotation . Retention ; <nl> - import java . lang . annotation . RetentionPolicy ; <nl> - import java . lang . annotation . Target ; <nl> - <nl> - @ Retention ( RetentionPolicy . RUNTIME ) <nl> - @ Target ( ElementType . METHOD ) <nl> - public @ interface IntMethodAnnotation { <nl> - 	 int value ( ) ; <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputMagicNumber . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputMagicNumber . java <nl> new file mode 100644 <nl> index 0000000 . . 01e7c1e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputMagicNumber . java <nl> @ @ - 0 , 0 + 1 , 211 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + / * * <nl> + * Describe class InputMagicNumber <nl> + * @ author Rick Giles <nl> + * @ version 6 - May - 2003 <nl> + * / <nl> + public class InputMagicNumber { <nl> + public void magicMethod ( ) { <nl> + / / constants , ignore <nl> + final int INT _ CONST = 101 _ 000 ; <nl> + final long LONG _ CONST1 = 100 _ 000L ; <nl> + final long LONG _ CONST2 = 100l ; <nl> + final float FLOAT _ CONST1 = 1 . 500 _ 0F ; <nl> + final float FLOAT _ CONST2 = 1 . 5f ; <nl> + final double DOUBLE _ CONST1 = 1 . 500 _ 0D ; <nl> + final double DOUBLE _ CONST2 = 1 . 5d ; <nl> + final double DOUBLE _ CONST3 = 1 . 5 ; <nl> + <nl> + / / ignore by default <nl> + int int _ var1 = 1 ; <nl> + int int _ var2 = ( 2 ) ; <nl> + long long _ var1 = 0L ; <nl> + long long _ var2 = 0l ; <nl> + double double _ var1 = 0D ; <nl> + double double _ var2 = 0d ; <nl> + <nl> + int [ ] int _ array = new int [ 2 ] ; <nl> + <nl> + int _ var1 = 1 + 2 ; <nl> + int _ var1 + = 1 ; <nl> + double _ var1 = 1 . 0 + 2 . 0 ; <nl> + <nl> + for ( int i = 0 ; i < 2 ; i + + ) ; <nl> + <nl> + if ( 1 < 2 ) ; <nl> + <nl> + if ( 1 . 0 < 2 . 0 ) ; <nl> + <nl> + / / magic numbers <nl> + int int _ magic1 = 3 _ 000 ; <nl> + double double _ magic1 = 1 . 5 _ 0 ; <nl> + int int _ magic2 = ( 3 + 4 ) ; <nl> + <nl> + int _ array = new int [ 3 ] ; <nl> + <nl> + int _ magic1 + = 3 ; <nl> + double _ magic1 * = 1 . 5 ; <nl> + <nl> + for ( int j = 3 ; j < 5 ; j + = 3 ) { <nl> + int _ magic1 + + ; <nl> + } <nl> + <nl> + if ( int _ magic1 < 3 ) { <nl> + int _ magic1 = int _ magic1 + 3 ; <nl> + } <nl> + <nl> + / / octal <nl> + int octalVar0 = 00 ; <nl> + int octalVar8 = 010 ; <nl> + int octalVar9 = 011 ; <nl> + <nl> + long longOctalVar8 = 0 _ 10L ; <nl> + long longOctalVar9 = 011l ; <nl> + <nl> + / / hex <nl> + int hexVar0 = 0x0 ; <nl> + int hexVar16 = 0x10 ; <nl> + int hexVar17 = 0X011 ; <nl> + long longHexVar0 = 0x0L ; <nl> + long longHexVar16 = 0x10L ; <nl> + long longHexVar17 = 0X11l ; <nl> + } <nl> + } <nl> + <nl> + interface Blah2 <nl> + { <nl> + int LOW = 5 ; <nl> + int HIGH = 78 ; <nl> + } <nl> + <nl> + class ArrayMagicTest <nl> + { <nl> + private static final int [ ] NONMAGIC = { 3 } ; <nl> + private int [ ] magic = { 3 } ; <nl> + private static final int [ ] [ ] NONMAGIC2 = { { 1 } , { 2 } , { 3 } } ; <nl> + } <nl> + <nl> + / * * test long hex * / <nl> + class LongHex <nl> + { <nl> + long l = 0xffffffffL ; <nl> + } <nl> + <nl> + / * * test signed values * / <nl> + class Signed <nl> + { <nl> + public static final int CONST _ PLUS _ THREE = + 3 ; <nl> + public static final int CONST _ MINUS _ TWO = - 2 ; <nl> + private int mPlusThree = + 3 ; <nl> + private int mMinusTwo = - 2 ; <nl> + private double mPlusDecimal = + 3 . 5 ; <nl> + private double mMinusDecimal = - 2 . 5 ; <nl> + } <nl> + <nl> + / * * test octal and hex negative values * / <nl> + class NegativeOctalHex <nl> + { <nl> + private int hexIntMinusOne = 0xffffffff ; <nl> + private long hexLongMinusOne = 0xffffffffffffffffL ; <nl> + private long hexIntMinValue = 0x80000000 ; <nl> + private long hexLongMinValue = 0x8000000000000000L ; <nl> + private int octalIntMinusOne = 037777777777 ; <nl> + private long octalLongMinusOne = 01777777777777777777777L ; <nl> + private long octalIntMinValue = 020000000000 ; <nl> + private long octalLongMinValue = 01000000000000000000000L ; <nl> + } <nl> + <nl> + class Cast <nl> + { <nl> + public static final int TESTINTVAL = ( byte ) 0x80 ; <nl> + } <nl> + <nl> + class ComplexAndFlagged <nl> + { <nl> + public static final java . util . List MYLIST = new java . util . ArrayList ( ) <nl> + { <nl> + public int size ( ) <nl> + { <nl> + / / should be flagged although technically inside const definition <nl> + return 378 ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + class ComplexButNotFlagged <nl> + { <nl> + / / according to user feedback this is typical code that should not be flagged <nl> + public final double SpecialSum = 2 + 1e10 , SpecialDifference = 4 - java . lang . Math . PI ; <nl> + public final Integer DefaultInit = new Integer ( 27 ) ; <nl> + public final int SpecsPerDay = 24 * 60 * 60 , SpecialRatio = 4 / 3 ; <nl> + public final javax . swing . border . Border StdBorder = <nl> + javax . swing . BorderFactory . createEmptyBorder ( 3 , 3 , 3 , 3 ) ; <nl> + } <nl> + <nl> + enum MyEnum2 <nl> + { <nl> + A ( 3 ) , <nl> + B ( 54 ) ; <nl> + <nl> + private MyEnum2 ( int value ) <nl> + { <nl> + <nl> + } <nl> + } <nl> + <nl> + class TestHashCodeMethod { <nl> + / / valid hash code method <nl> + public int hashCode ( ) { <nl> + return 31 ; <nl> + } <nl> + <nl> + / / invalid hash code method : has parameters <nl> + public int hashCode ( int val ) { <nl> + return 42 ; <nl> + } <nl> + <nl> + / / invalid hash code method : misspelled <nl> + public int hashcode ( ) { <nl> + return 13 ; <nl> + } <nl> + <nl> + static { <nl> + int x = 21 ; <nl> + } <nl> + <nl> + { <nl> + int y = 37 ; <nl> + } <nl> + <nl> + public TestHashCodeMethod ( ) { <nl> + int z = 101 ; <nl> + } <nl> + <nl> + @ IntMethodAnnotation ( 42 ) <nl> + public void another ( ) { <nl> + } <nl> + <nl> + @ IntMethodAnnotation ( value = 43 ) <nl> + public void another2 ( ) { <nl> + } <nl> + <nl> + @ IntMethodAnnotation ( - 44 ) <nl> + public void anotherNegative ( ) { <nl> + } <nl> + <nl> + @ IntMethodAnnotation ( value = - 45 ) <nl> + public void anotherNegative2 ( ) { <nl> + } <nl> + } <nl> + <nl> + class TestMethodCall { <nl> + <nl> + 	 public TestMethodCall ( int x ) { <nl> + <nl> + } <nl> + <nl> + 	 public void method2 ( ) { <nl> + final TestMethodCall dummyObject = new TestMethodCall ( 62 ) ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / IntMethodAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / IntMethodAnnotation . java <nl> new file mode 100644 <nl> index 0000000 . . 365763d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / IntMethodAnnotation . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + import java . lang . annotation . ElementType ; <nl> + import java . lang . annotation . Retention ; <nl> + import java . lang . annotation . RetentionPolicy ; <nl> + import java . lang . annotation . Target ; <nl> + <nl> + @ Retention ( RetentionPolicy . RUNTIME ) <nl> + @ Target ( ElementType . METHOD ) <nl> + public @ interface IntMethodAnnotation { <nl> + 	 int value ( ) ; <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 9e6db7a . . 5e076b6 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 42 , 7 + 42 , 7 @ @ 
 files = " AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java " / > 
 
 < ! - - Tone down the checking for test code - - > 
 - < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 328 " / > 
 + < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 317 " / > 
 < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > 
 < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 < suppress checks = " Javadoc " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java 
 index a5387ec . . e35be52 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java 
 @ @ - 19 , 9 + 19 , 12 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . naming ; 
 
 + import java . util . regex . Pattern ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . checks . AbstractFormatCheck ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * Abstract class for checking that names conform to a specified format . 
 @ @ - 29 , 30 + 32 , 46 @ @ import com . puppycrawl . tools . checkstyle . checks . AbstractFormatCheck ; 
 * @ author Rick Giles 
 * / 
 public abstract class AbstractNameCheck 
 - extends AbstractFormatCheck { 
 + extends Check { 
 / * * 
 * Message key for invalid pattern error . 
 * / 
 public static final String MSG _ INVALID _ PATTERN = " name . invalidPattern " ; 
 
 + / * * The format string of the regexp . * / 
 + private String format ; 
 + 
 + / * * The regexp to match against . * / 
 + private Pattern regexp ; 
 + 
 / * * 
 * Creates a new { @ code AbstractNameCheck } instance . 
 * @ param format format to check with 
 * / 
 protected AbstractNameCheck ( String format ) { 
 - super ( format ) ; 
 + setFormat ( format ) ; 
 + } 
 + 
 + / * * 
 + * Set the format to the specified regular expression . 
 + * @ param format a { @ code String } value 
 + * @ throws org . apache . commons . beanutils . ConversionException unable to parse format 
 + * / 
 + public final void setFormat ( String format ) { 
 + this . format = format ; 
 + regexp = CommonUtils . createPattern ( format ) ; 
 } 
 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 if ( mustCheckName ( ast ) ) { 
 final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 - if ( ! getRegexp ( ) . matcher ( nameAST . getText ( ) ) . find ( ) ) { 
 + if ( ! regexp . matcher ( nameAST . getText ( ) ) . find ( ) ) { 
 log ( nameAST . getLineNo ( ) , 
 nameAST . getColumnNo ( ) , 
 MSG _ INVALID _ PATTERN , 
 nameAST . getText ( ) , 
 - getFormat ( ) ) ; 
 + format ) ; 
 } 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 index b919653 . . 15453bc 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 @ @ - 110 , 17 + 110 , 6 @ @ public class XDocsPagesTest { 
 
 private static final List < String > UNDOCUMENTED _ PROPERTIES = Arrays . asList ( 
 " SuppressWithNearbyCommentFilter . fileContents " , 
 - " ClassTypeParameterNameCheck . compileFlags " , 
 - " ConstantNameCheck . compileFlags " , 
 - " InterfaceTypeParameterNameCheck . compileFlags " , 
 - " LocalFinalVariableNameCheck . compileFlags " , 
 - " LocalVariableNameCheck . compileFlags " , 
 - " MemberNameCheck . compileFlags " , 
 - " MethodNameCheck . compileFlags " , 
 - " MethodTypeParameterNameCheck . compileFlags " , 
 - " ParameterNameCheck . compileFlags " , 
 - " StaticVariableNameCheck . compileFlags " , 
 - " TypeNameCheck . compileFlags " , 
 " SuppressionCommentFilter . fileContents " , 
 " MethodNameCheck . applyToPackage " , 
 " MethodNameCheck . applyToPrivate " ,

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java 
 index f8db476 . . 2b713cb 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java 
 @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . MagicNumberCheck . MSG _ KEY ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 @ @ - 28 , 6 + 31 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class MagicNumberCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testDefault ( ) 
 throws Exception { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputMagicNumber . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputMagicNumber . java 
 deleted file mode 100644 
 index 5d91067 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputMagicNumber . java 
 + + + / dev / null 
 @ @ - 1 , 211 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - / * * 
 - * Describe class InputMagicNumber 
 - * @ author Rick Giles 
 - * @ version 6 - May - 2003 
 - * / 
 - public class InputMagicNumber { 
 - public void magicMethod ( ) { 
 - / / constants , ignore 
 - final int INT _ CONST = 101 _ 000 ; 
 - final long LONG _ CONST1 = 100 _ 000L ; 
 - final long LONG _ CONST2 = 100l ; 
 - final float FLOAT _ CONST1 = 1 . 500 _ 0F ; 
 - final float FLOAT _ CONST2 = 1 . 5f ; 
 - final double DOUBLE _ CONST1 = 1 . 500 _ 0D ; 
 - final double DOUBLE _ CONST2 = 1 . 5d ; 
 - final double DOUBLE _ CONST3 = 1 . 5 ; 
 - 
 - / / ignore by default 
 - int int _ var1 = 1 ; 
 - int int _ var2 = ( 2 ) ; 
 - long long _ var1 = 0L ; 
 - long long _ var2 = 0l ; 
 - double double _ var1 = 0D ; 
 - double double _ var2 = 0d ; 
 - 
 - int [ ] int _ array = new int [ 2 ] ; 
 - 
 - int _ var1 = 1 + 2 ; 
 - int _ var1 + = 1 ; 
 - double _ var1 = 1 . 0 + 2 . 0 ; 
 - 
 - for ( int i = 0 ; i < 2 ; i + + ) ; 
 - 
 - if ( 1 < 2 ) ; 
 - 
 - if ( 1 . 0 < 2 . 0 ) ; 
 - 
 - / / magic numbers 
 - int int _ magic1 = 3 _ 000 ; 
 - double double _ magic1 = 1 . 5 _ 0 ; 
 - int int _ magic2 = ( 3 + 4 ) ; 
 - 
 - int _ array = new int [ 3 ] ; 
 - 
 - int _ magic1 + = 3 ; 
 - double _ magic1 * = 1 . 5 ; 
 - 
 - for ( int j = 3 ; j < 5 ; j + = 3 ) { 
 - int _ magic1 + + ; 
 - } 
 - 
 - if ( int _ magic1 < 3 ) { 
 - int _ magic1 = int _ magic1 + 3 ; 
 - } 
 - 
 - / / octal 
 - int octalVar0 = 00 ; 
 - int octalVar8 = 010 ; 
 - int octalVar9 = 011 ; 
 - 
 - long longOctalVar8 = 0 _ 10L ; 
 - long longOctalVar9 = 011l ; 
 - 
 - / / hex 
 - int hexVar0 = 0x0 ; 
 - int hexVar16 = 0x10 ; 
 - int hexVar17 = 0X011 ; 
 - long longHexVar0 = 0x0L ; 
 - long longHexVar16 = 0x10L ; 
 - long longHexVar17 = 0X11l ; 
 - } 
 - } 
 - 
 - interface Blah 
 - { 
 - int LOW = 5 ; 
 - int HIGH = 78 ; 
 - } 
 - 
 - class ArrayMagicTest 
 - { 
 - private static final int [ ] NONMAGIC = { 3 } ; 
 - private int [ ] magic = { 3 } ; 
 - private static final int [ ] [ ] NONMAGIC2 = { { 1 } , { 2 } , { 3 } } ; 
 - } 
 - 
 - / * * test long hex * / 
 - class LongHex 
 - { 
 - long l = 0xffffffffL ; 
 - } 
 - 
 - / * * test signed values * / 
 - class Signed 
 - { 
 - public static final int CONST _ PLUS _ THREE = + 3 ; 
 - public static final int CONST _ MINUS _ TWO = - 2 ; 
 - private int mPlusThree = + 3 ; 
 - private int mMinusTwo = - 2 ; 
 - private double mPlusDecimal = + 3 . 5 ; 
 - private double mMinusDecimal = - 2 . 5 ; 
 - } 
 - 
 - / * * test octal and hex negative values * / 
 - class NegativeOctalHex 
 - { 
 - private int hexIntMinusOne = 0xffffffff ; 
 - private long hexLongMinusOne = 0xffffffffffffffffL ; 
 - private long hexIntMinValue = 0x80000000 ; 
 - private long hexLongMinValue = 0x8000000000000000L ; 
 - private int octalIntMinusOne = 037777777777 ; 
 - private long octalLongMinusOne = 01777777777777777777777L ; 
 - private long octalIntMinValue = 020000000000 ; 
 - private long octalLongMinValue = 01000000000000000000000L ; 
 - } 
 - 
 - class Cast 
 - { 
 - public static final int TESTINTVAL = ( byte ) 0x80 ; 
 - } 
 - 
 - class ComplexAndFlagged 
 - { 
 - public static final java . util . List MYLIST = new java . util . ArrayList ( ) 
 - { 
 - public int size ( ) 
 - { 
 - / / should be flagged although technically inside const definition 
 - return 378 ; 
 - } 
 - } ; 
 - } 
 - 
 - class ComplexButNotFlagged 
 - { 
 - / / according to user feedback this is typical code that should not be flagged 
 - public final double SpecialSum = 2 + 1e10 , SpecialDifference = 4 - java . lang . Math . PI ; 
 - public final Integer DefaultInit = new Integer ( 27 ) ; 
 - public final int SpecsPerDay = 24 * 60 * 60 , SpecialRatio = 4 / 3 ; 
 - public final javax . swing . border . Border StdBorder = 
 - javax . swing . BorderFactory . createEmptyBorder ( 3 , 3 , 3 , 3 ) ; 
 - } 
 - 
 - enum MyEnum 
 - { 
 - A ( 3 ) , 
 - B ( 54 ) ; 
 - 
 - private MyEnum ( int value ) 
 - { 
 - 
 - } 
 - } 
 - 
 - class TestHashCodeMethod { 
 - / / valid hash code method 
 - public int hashCode ( ) { 
 - return 31 ; 
 - } 
 - 
 - / / invalid hash code method : has parameters 
 - public int hashCode ( int val ) { 
 - return 42 ; 
 - } 
 - 
 - / / invalid hash code method : misspelled 
 - public int hashcode ( ) { 
 - return 13 ; 
 - } 
 - 
 - static { 
 - int x = 21 ; 
 - } 
 - 
 - { 
 - int y = 37 ; 
 - } 
 - 
 - public TestHashCodeMethod ( ) { 
 - int z = 101 ; 
 - } 
 - 
 - @ IntMethodAnnotation ( 42 ) 
 - public void another ( ) { 
 - } 
 - 
 - @ IntMethodAnnotation ( value = 43 ) 
 - public void another2 ( ) { 
 - } 
 - 
 - @ IntMethodAnnotation ( - 44 ) 
 - public void anotherNegative ( ) { 
 - } 
 - 
 - @ IntMethodAnnotation ( value = - 45 ) 
 - public void anotherNegative2 ( ) { 
 - } 
 - } 
 - 
 - class TestMethodCall { 
 - 
 - 	 public TestMethodCall ( int x ) { 
 - 
 - } 
 - 
 - 	 public void method2 ( ) { 
 - final TestMethodCall dummyObject = new TestMethodCall ( 62 ) ; 
 - 	 } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / IntMethodAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / IntMethodAnnotation . java 
 deleted file mode 100644 
 index b176087 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / IntMethodAnnotation . java 
 + + + / dev / null 
 @ @ - 1 , 12 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - import java . lang . annotation . ElementType ; 
 - import java . lang . annotation . Retention ; 
 - import java . lang . annotation . RetentionPolicy ; 
 - import java . lang . annotation . Target ; 
 - 
 - @ Retention ( RetentionPolicy . RUNTIME ) 
 - @ Target ( ElementType . METHOD ) 
 - public @ interface IntMethodAnnotation { 
 - 	 int value ( ) ; 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputMagicNumber . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputMagicNumber . java 
 new file mode 100644 
 index 0000000 . . 01e7c1e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputMagicNumber . java 
 @ @ - 0 , 0 + 1 , 211 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + / * * 
 + * Describe class InputMagicNumber 
 + * @ author Rick Giles 
 + * @ version 6 - May - 2003 
 + * / 
 + public class InputMagicNumber { 
 + public void magicMethod ( ) { 
 + / / constants , ignore 
 + final int INT _ CONST = 101 _ 000 ; 
 + final long LONG _ CONST1 = 100 _ 000L ; 
 + final long LONG _ CONST2 = 100l ; 
 + final float FLOAT _ CONST1 = 1 . 500 _ 0F ; 
 + final float FLOAT _ CONST2 = 1 . 5f ; 
 + final double DOUBLE _ CONST1 = 1 . 500 _ 0D ; 
 + final double DOUBLE _ CONST2 = 1 . 5d ; 
 + final double DOUBLE _ CONST3 = 1 . 5 ; 
 + 
 + / / ignore by default 
 + int int _ var1 = 1 ; 
 + int int _ var2 = ( 2 ) ; 
 + long long _ var1 = 0L ; 
 + long long _ var2 = 0l ; 
 + double double _ var1 = 0D ; 
 + double double _ var2 = 0d ; 
 + 
 + int [ ] int _ array = new int [ 2 ] ; 
 + 
 + int _ var1 = 1 + 2 ; 
 + int _ var1 + = 1 ; 
 + double _ var1 = 1 . 0 + 2 . 0 ; 
 + 
 + for ( int i = 0 ; i < 2 ; i + + ) ; 
 + 
 + if ( 1 < 2 ) ; 
 + 
 + if ( 1 . 0 < 2 . 0 ) ; 
 + 
 + / / magic numbers 
 + int int _ magic1 = 3 _ 000 ; 
 + double double _ magic1 = 1 . 5 _ 0 ; 
 + int int _ magic2 = ( 3 + 4 ) ; 
 + 
 + int _ array = new int [ 3 ] ; 
 + 
 + int _ magic1 + = 3 ; 
 + double _ magic1 * = 1 . 5 ; 
 + 
 + for ( int j = 3 ; j < 5 ; j + = 3 ) { 
 + int _ magic1 + + ; 
 + } 
 + 
 + if ( int _ magic1 < 3 ) { 
 + int _ magic1 = int _ magic1 + 3 ; 
 + } 
 + 
 + / / octal 
 + int octalVar0 = 00 ; 
 + int octalVar8 = 010 ; 
 + int octalVar9 = 011 ; 
 + 
 + long longOctalVar8 = 0 _ 10L ; 
 + long longOctalVar9 = 011l ; 
 + 
 + / / hex 
 + int hexVar0 = 0x0 ; 
 + int hexVar16 = 0x10 ; 
 + int hexVar17 = 0X011 ; 
 + long longHexVar0 = 0x0L ; 
 + long longHexVar16 = 0x10L ; 
 + long longHexVar17 = 0X11l ; 
 + } 
 + } 
 + 
 + interface Blah2 
 + { 
 + int LOW = 5 ; 
 + int HIGH = 78 ; 
 + } 
 + 
 + class ArrayMagicTest 
 + { 
 + private static final int [ ] NONMAGIC = { 3 } ; 
 + private int [ ] magic = { 3 } ; 
 + private static final int [ ] [ ] NONMAGIC2 = { { 1 } , { 2 } , { 3 } } ; 
 + } 
 + 
 + / * * test long hex * / 
 + class LongHex 
 + { 
 + long l = 0xffffffffL ; 
 + } 
 + 
 + / * * test signed values * / 
 + class Signed 
 + { 
 + public static final int CONST _ PLUS _ THREE = + 3 ; 
 + public static final int CONST _ MINUS _ TWO = - 2 ; 
 + private int mPlusThree = + 3 ; 
 + private int mMinusTwo = - 2 ; 
 + private double mPlusDecimal = + 3 . 5 ; 
 + private double mMinusDecimal = - 2 . 5 ; 
 + } 
 + 
 + / * * test octal and hex negative values * / 
 + class NegativeOctalHex 
 + { 
 + private int hexIntMinusOne = 0xffffffff ; 
 + private long hexLongMinusOne = 0xffffffffffffffffL ; 
 + private long hexIntMinValue = 0x80000000 ; 
 + private long hexLongMinValue = 0x8000000000000000L ; 
 + private int octalIntMinusOne = 037777777777 ; 
 + private long octalLongMinusOne = 01777777777777777777777L ; 
 + private long octalIntMinValue = 020000000000 ; 
 + private long octalLongMinValue = 01000000000000000000000L ; 
 + } 
 + 
 + class Cast 
 + { 
 + public static final int TESTINTVAL = ( byte ) 0x80 ; 
 + } 
 + 
 + class ComplexAndFlagged 
 + { 
 + public static final java . util . List MYLIST = new java . util . ArrayList ( ) 
 + { 
 + public int size ( ) 
 + { 
 + / / should be flagged although technically inside const definition 
 + return 378 ; 
 + } 
 + } ; 
 + } 
 + 
 + class ComplexButNotFlagged 
 + { 
 + / / according to user feedback this is typical code that should not be flagged 
 + public final double SpecialSum = 2 + 1e10 , SpecialDifference = 4 - java . lang . Math . PI ; 
 + public final Integer DefaultInit = new Integer ( 27 ) ; 
 + public final int SpecsPerDay = 24 * 60 * 60 , SpecialRatio = 4 / 3 ; 
 + public final javax . swing . border . Border StdBorder = 
 + javax . swing . BorderFactory . createEmptyBorder ( 3 , 3 , 3 , 3 ) ; 
 + } 
 + 
 + enum MyEnum2 
 + { 
 + A ( 3 ) , 
 + B ( 54 ) ; 
 + 
 + private MyEnum2 ( int value ) 
 + { 
 + 
 + } 
 + } 
 + 
 + class TestHashCodeMethod { 
 + / / valid hash code method 
 + public int hashCode ( ) { 
 + return 31 ; 
 + } 
 + 
 + / / invalid hash code method : has parameters 
 + public int hashCode ( int val ) { 
 + return 42 ; 
 + } 
 + 
 + / / invalid hash code method : misspelled 
 + public int hashcode ( ) { 
 + return 13 ; 
 + } 
 + 
 + static { 
 + int x = 21 ; 
 + } 
 + 
 + { 
 + int y = 37 ; 
 + } 
 + 
 + public TestHashCodeMethod ( ) { 
 + int z = 101 ; 
 + } 
 + 
 + @ IntMethodAnnotation ( 42 ) 
 + public void another ( ) { 
 + } 
 + 
 + @ IntMethodAnnotation ( value = 43 ) 
 + public void another2 ( ) { 
 + } 
 + 
 + @ IntMethodAnnotation ( - 44 ) 
 + public void anotherNegative ( ) { 
 + } 
 + 
 + @ IntMethodAnnotation ( value = - 45 ) 
 + public void anotherNegative2 ( ) { 
 + } 
 + } 
 + 
 + class TestMethodCall { 
 + 
 + 	 public TestMethodCall ( int x ) { 
 + 
 + } 
 + 
 + 	 public void method2 ( ) { 
 + final TestMethodCall dummyObject = new TestMethodCall ( 62 ) ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / IntMethodAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / IntMethodAnnotation . java 
 new file mode 100644 
 index 0000000 . . 365763d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / IntMethodAnnotation . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + import java . lang . annotation . ElementType ; 
 + import java . lang . annotation . Retention ; 
 + import java . lang . annotation . RetentionPolicy ; 
 + import java . lang . annotation . Target ; 
 + 
 + @ Retention ( RetentionPolicy . RUNTIME ) 
 + @ Target ( ElementType . METHOD ) 
 + public @ interface IntMethodAnnotation { 
 + 	 int value ( ) ; 
 + } 
 \ No newline at end of file
