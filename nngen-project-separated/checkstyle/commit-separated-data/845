BLEU SCORE: 0.021476912089159066

TEST MSG: Issue # 4165 : Split and Organize Checkstyle inputs by Test for checks in coding package : SimplifyBooleanReturn
GENERATED MSG: added missing input file for SimplifyBoolean Checks

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheckTest . java <nl> index eece13b . . bfa40cf 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheckTest . java <nl> @ @ - 35 , 7 + 35 , 9 @ @ public class SimplifyBooleanReturnCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " simplifybooleanreturn " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 46 , 7 + 48 , 7 @ @ public class SimplifyBooleanReturnCheckTest <nl> " 20 : 9 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 33 : 9 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSimplifyBoolean . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputSimplifyBooleanReturn . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / simplifybooleanreturn / InputSimplifyBooleanReturn . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / simplifybooleanreturn / InputSimplifyBooleanReturn . java <nl> new file mode 100644 <nl> index 0000000 . . 654aee6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / simplifybooleanreturn / InputSimplifyBooleanReturn . java <nl> @ @ - 0 , 0 + 1 , 88 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . simplifybooleanreturn ; <nl> + <nl> + / * * <nl> + Contains boolean logic that can be simplified . <nl> + <nl> + @ author lkuehne <nl> + * / <nl> + public class InputSimplifyBooleanReturn <nl> + { <nl> + <nl> + public static boolean isOddMillis ( ) <nl> + { <nl> + boolean even = System . currentTimeMillis ( ) % 2 = = 0 ; <nl> + <nl> + / / can be simplified to " if ( even ) " <nl> + if ( even = = true ) { <nl> + return false ; <nl> + } <nl> + else { <nl> + return true ; <nl> + } <nl> + / / return can be simplified to " return ! even " <nl> + } <nl> + <nl> + public static boolean isOddMillis2 ( ) <nl> + { <nl> + boolean even = System . currentTimeMillis ( ) % 2 = = 0 ; <nl> + / / can be simplified to " return ! even " <nl> + if ( ! even ) <nl> + return true ; <nl> + else <nl> + return false ; <nl> + } <nl> + <nl> + public static boolean giveMeTrue ( ) <nl> + { <nl> + boolean tt = isOddMillis ( ) | | true ; <nl> + boolean ff = isOddMillis ( ) & & false ; <nl> + return ! false | | ( true ! = false ) ; <nl> + } <nl> + <nl> + public void tryToProvokeNPE ( ) <nl> + { <nl> + if ( true ) { <nl> + } <nl> + else { <nl> + } <nl> + <nl> + if ( true ) { <nl> + return ; <nl> + } <nl> + else { <nl> + return ; <nl> + } <nl> + } <nl> + <nl> + public boolean ifNoElse ( ) <nl> + { <nl> + if ( isOddMillis ( ) ) { <nl> + return true ; <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> + boolean a ( ) { <nl> + boolean asd = false ; <nl> + boolean dasa = true ; <nl> + <nl> + if ( asd ) { <nl> + return true ; <nl> + } else { <nl> + return dasa ; <nl> + } <nl> + } <nl> + <nl> + boolean b ( ) { <nl> + boolean asd = false ; <nl> + <nl> + if ( asd ) ; <nl> + else ; <nl> + <nl> + return true ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / InnerAssignmentCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / InnerAssignmentCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 8464e1a <nl> - - - / dev / null <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / InnerAssignmentCheck . java <nl> @ @ - 0 , 0 + 1 , 88 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2002 Oliver Burn <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + <nl> + / * * <nl> + * Checks for assignments in subexpressions , such as in <nl> + * < code > String s = Integer . toString ( i = 2 ) ; < / code > . <nl> + * <nl> + * Rationale : With the exception of < code > for < / code > iterators , all assignments <nl> + * should occur in their own toplevel statement to increase readability . <nl> + * With inner assignments like the above it is difficult to see all places <nl> + * where a variable is set . <nl> + * / <nl> + public class InnerAssignmentCheck <nl> + extends Check <nl> + { <nl> + private final int [ ] DEFAULT _ TOKENS = new int [ ] { <nl> + TokenTypes . ASSIGN , <nl> + TokenTypes . PLUS _ ASSIGN , <nl> + TokenTypes . MINUS _ ASSIGN <nl> + } ; <nl> + <nl> + / * * @ see Check * / <nl> + public int [ ] getDefaultTokens ( ) <nl> + { <nl> + return DEFAULT _ TOKENS ; <nl> + } <nl> + <nl> + / * * @ see Check * / <nl> + public void visitToken ( DetailAST aAST ) <nl> + { <nl> + DetailAST parent1 = aAST . getParent ( ) ; <nl> + DetailAST parent2 = parent1 . getParent ( ) ; <nl> + DetailAST parent3 = parent2 . getParent ( ) ; <nl> + <nl> + final boolean assigment = isAssigment ( parent1 ) ; <nl> + final boolean expr = parent1 . getType ( ) = = TokenTypes . EXPR ; <nl> + final boolean exprList = <nl> + expr & & parent2 . getType ( ) = = TokenTypes . ELIST ; <nl> + final boolean methodCall = <nl> + exprList & & parent3 . getType ( ) = = TokenTypes . METHOD _ CALL ; <nl> + final boolean ctorCall = <nl> + exprList & & parent3 . getType ( ) = = TokenTypes . LITERAL _ NEW ; <nl> + <nl> + if ( assigment | | methodCall | | ctorCall ) { <nl> + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , " assignment . inner . avoid " ) ; <nl> + } <nl> + } <nl> + <nl> + private boolean isAssigment ( DetailAST aAST ) <nl> + { <nl> + / / TODO : make actual tokens available to Check and loop over actual tokens here ? <nl> + int [ ] tokens = getDefaultTokens ( ) ; <nl> + <nl> + int astType = aAST . getType ( ) ; <nl> + <nl> + for ( int i = 0 ; i < tokens . length ; i + + ) { <nl> + int tokenType = tokens [ i ] ; <nl> + if ( astType = = tokenType ) { <nl> + return true ; <nl> + } <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> + <nl> + } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / messages . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / messages . properties <nl> index 129d9f9 . . 89a5cc7 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / messages . properties <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / messages . properties <nl> @ @ - 59 , 3 + 59 , 6 @ @ block . empty = Empty { 0 } block . <nl> maxParam = More than { 0 , number , integer } parameters . <nl> <nl> field . unused = ' ' { 0 } ' ' is an unused field . <nl> + <nl> + assignment . inner . avoid = Avoid inner assignments . <nl> + <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / InnerAssignmentCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / InnerAssignmentCheckTest . java <nl> new file mode 100644 <nl> index 0000000 . . 91d002f <nl> - - - / dev / null <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / InnerAssignmentCheckTest . java <nl> @ @ - 0 , 0 + 1 , 28 @ @ <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . InnerAssignmentCheck ; <nl> + <nl> + public class InnerAssignmentCheckTest <nl> + extends BaseCheckTestCase <nl> + { <nl> + public InnerAssignmentCheckTest ( String aName ) <nl> + { <nl> + super ( aName ) ; <nl> + } <nl> + <nl> + public void testIt ( ) throws Exception <nl> + { <nl> + final CheckConfiguration checkConfig = new CheckConfiguration ( ) ; <nl> + checkConfig . setClassname ( InnerAssignmentCheck . class . getName ( ) ) ; <nl> + final Checker c = createChecker ( checkConfig ) ; <nl> + final String fname = getPath ( " InputSemantic . java " ) ; <nl> + final String [ ] expected = { <nl> + " 101 : 15 : Avoid inner assignments . " , <nl> + " 101 : 19 : Avoid inner assignments . " , <nl> + " 103 : 39 : Avoid inner assignments . " , <nl> + " 105 : 35 : Avoid inner assignments . " , <nl> + } ; <nl> + verify ( c , fname , expected ) ; <nl> + <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheckTest . java 
 index eece13b . . bfa40cf 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheckTest . java 
 @ @ - 35 , 7 + 35 , 9 @ @ public class SimplifyBooleanReturnCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " simplifybooleanreturn " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 46 , 7 + 48 , 7 @ @ public class SimplifyBooleanReturnCheckTest 
 " 20 : 9 : " + getCheckMessage ( MSG _ KEY ) , 
 " 33 : 9 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSimplifyBoolean . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputSimplifyBooleanReturn . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / simplifybooleanreturn / InputSimplifyBooleanReturn . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / simplifybooleanreturn / InputSimplifyBooleanReturn . java 
 new file mode 100644 
 index 0000000 . . 654aee6 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / simplifybooleanreturn / InputSimplifyBooleanReturn . java 
 @ @ - 0 , 0 + 1 , 88 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . coding . simplifybooleanreturn ; 
 + 
 + / * * 
 + Contains boolean logic that can be simplified . 
 + 
 + @ author lkuehne 
 + * / 
 + public class InputSimplifyBooleanReturn 
 + { 
 + 
 + public static boolean isOddMillis ( ) 
 + { 
 + boolean even = System . currentTimeMillis ( ) % 2 = = 0 ; 
 + 
 + / / can be simplified to " if ( even ) " 
 + if ( even = = true ) { 
 + return false ; 
 + } 
 + else { 
 + return true ; 
 + } 
 + / / return can be simplified to " return ! even " 
 + } 
 + 
 + public static boolean isOddMillis2 ( ) 
 + { 
 + boolean even = System . currentTimeMillis ( ) % 2 = = 0 ; 
 + / / can be simplified to " return ! even " 
 + if ( ! even ) 
 + return true ; 
 + else 
 + return false ; 
 + } 
 + 
 + public static boolean giveMeTrue ( ) 
 + { 
 + boolean tt = isOddMillis ( ) | | true ; 
 + boolean ff = isOddMillis ( ) & & false ; 
 + return ! false | | ( true ! = false ) ; 
 + } 
 + 
 + public void tryToProvokeNPE ( ) 
 + { 
 + if ( true ) { 
 + } 
 + else { 
 + } 
 + 
 + if ( true ) { 
 + return ; 
 + } 
 + else { 
 + return ; 
 + } 
 + } 
 + 
 + public boolean ifNoElse ( ) 
 + { 
 + if ( isOddMillis ( ) ) { 
 + return true ; 
 + } 
 + return false ; 
 + } 
 + 
 + boolean a ( ) { 
 + boolean asd = false ; 
 + boolean dasa = true ; 
 + 
 + if ( asd ) { 
 + return true ; 
 + } else { 
 + return dasa ; 
 + } 
 + } 
 + 
 + boolean b ( ) { 
 + boolean asd = false ; 
 + 
 + if ( asd ) ; 
 + else ; 
 + 
 + return true ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / InnerAssignmentCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / InnerAssignmentCheck . java 
 new file mode 100644 
 index 0000000 . . 8464e1a 
 - - - / dev / null 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / InnerAssignmentCheck . java 
 @ @ - 0 , 0 + 1 , 88 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2002 Oliver Burn 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . checks ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + 
 + / * * 
 + * Checks for assignments in subexpressions , such as in 
 + * < code > String s = Integer . toString ( i = 2 ) ; < / code > . 
 + * 
 + * Rationale : With the exception of < code > for < / code > iterators , all assignments 
 + * should occur in their own toplevel statement to increase readability . 
 + * With inner assignments like the above it is difficult to see all places 
 + * where a variable is set . 
 + * / 
 + public class InnerAssignmentCheck 
 + extends Check 
 + { 
 + private final int [ ] DEFAULT _ TOKENS = new int [ ] { 
 + TokenTypes . ASSIGN , 
 + TokenTypes . PLUS _ ASSIGN , 
 + TokenTypes . MINUS _ ASSIGN 
 + } ; 
 + 
 + / * * @ see Check * / 
 + public int [ ] getDefaultTokens ( ) 
 + { 
 + return DEFAULT _ TOKENS ; 
 + } 
 + 
 + / * * @ see Check * / 
 + public void visitToken ( DetailAST aAST ) 
 + { 
 + DetailAST parent1 = aAST . getParent ( ) ; 
 + DetailAST parent2 = parent1 . getParent ( ) ; 
 + DetailAST parent3 = parent2 . getParent ( ) ; 
 + 
 + final boolean assigment = isAssigment ( parent1 ) ; 
 + final boolean expr = parent1 . getType ( ) = = TokenTypes . EXPR ; 
 + final boolean exprList = 
 + expr & & parent2 . getType ( ) = = TokenTypes . ELIST ; 
 + final boolean methodCall = 
 + exprList & & parent3 . getType ( ) = = TokenTypes . METHOD _ CALL ; 
 + final boolean ctorCall = 
 + exprList & & parent3 . getType ( ) = = TokenTypes . LITERAL _ NEW ; 
 + 
 + if ( assigment | | methodCall | | ctorCall ) { 
 + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , " assignment . inner . avoid " ) ; 
 + } 
 + } 
 + 
 + private boolean isAssigment ( DetailAST aAST ) 
 + { 
 + / / TODO : make actual tokens available to Check and loop over actual tokens here ? 
 + int [ ] tokens = getDefaultTokens ( ) ; 
 + 
 + int astType = aAST . getType ( ) ; 
 + 
 + for ( int i = 0 ; i < tokens . length ; i + + ) { 
 + int tokenType = tokens [ i ] ; 
 + if ( astType = = tokenType ) { 
 + return true ; 
 + } 
 + } 
 + return false ; 
 + } 
 + 
 + 
 + } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / messages . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / messages . properties 
 index 129d9f9 . . 89a5cc7 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / messages . properties 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / messages . properties 
 @ @ - 59 , 3 + 59 , 6 @ @ block . empty = Empty { 0 } block . 
 maxParam = More than { 0 , number , integer } parameters . 
 
 field . unused = ' ' { 0 } ' ' is an unused field . 
 + 
 + assignment . inner . avoid = Avoid inner assignments . 
 + 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / InnerAssignmentCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / InnerAssignmentCheckTest . java 
 new file mode 100644 
 index 0000000 . . 91d002f 
 - - - / dev / null 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / InnerAssignmentCheckTest . java 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . InnerAssignmentCheck ; 
 + 
 + public class InnerAssignmentCheckTest 
 + extends BaseCheckTestCase 
 + { 
 + public InnerAssignmentCheckTest ( String aName ) 
 + { 
 + super ( aName ) ; 
 + } 
 + 
 + public void testIt ( ) throws Exception 
 + { 
 + final CheckConfiguration checkConfig = new CheckConfiguration ( ) ; 
 + checkConfig . setClassname ( InnerAssignmentCheck . class . getName ( ) ) ; 
 + final Checker c = createChecker ( checkConfig ) ; 
 + final String fname = getPath ( " InputSemantic . java " ) ; 
 + final String [ ] expected = { 
 + " 101 : 15 : Avoid inner assignments . " , 
 + " 101 : 19 : Avoid inner assignments . " , 
 + " 103 : 39 : Avoid inner assignments . " , 
 + " 105 : 35 : Avoid inner assignments . " , 
 + } ; 
 + verify ( c , fname , expected ) ; 
 + 
 + } 
 + }
