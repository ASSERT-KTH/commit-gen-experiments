BLEU SCORE: 0.14323145079400493

TEST MSG: config : bump versions - maven - plugin to 2 . 7
GENERATED MSG: config : bump pitest to 1 . 4 . 3

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 7ba16b4 . . a18de5a 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 212 , 7 + 212 , 7 @ @ <nl> < maven . sevntu - checkstyle - check . checkstyle . version > <nl> 8 . 12 <nl> < / maven . sevntu - checkstyle - check . checkstyle . version > <nl> - < maven . versions . plugin . version > 2 . 5 < / maven . versions . plugin . version > <nl> + < maven . versions . plugin . version > 2 . 7 < / maven . versions . plugin . version > <nl> < java . version > 1 . 8 < / java . version > <nl> < pitest . plugin . version > 1 . 4 . 3 < / pitest . plugin . version > <nl> < pitest . plugin . timeout . factor > 10 < / pitest . plugin . timeout . factor >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> index a3789c6 . . b9c6a66 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> @ @ - 37 , 6 + 37 , 10 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; <nl> * To validate { @ code catch } parameters please use <nl> * < a href = " # CatchParameterName " > CatchParameterName < / a > . <nl> * < / p > <nl> + * < p > <nl> + * To validate lambda parameters please use <nl> + * < a href = " # LambdaParameterName " > LambdaParameterName < / a > . <nl> + * < / p > <nl> * < ul > <nl> * < li > <nl> * Property { @ code format } - Specifies valid identifiers . Default value is <nl> @ @ - 186 , 6 + 190 , 7 @ @ public class ParameterNameCheck extends AbstractNameCheck { <nl> boolean checkName = true ; <nl> if ( ignoreOverridden & & isOverriddenMethod ( ast ) <nl> | | ast . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ CATCH <nl> + | | ast . getParent ( ) . getParent ( ) . getType ( ) = = TokenTypes . LAMBDA <nl> | | CheckUtil . isReceiverParameter ( ast ) <nl> | | ! matchAccessModifiers ( getAccessModifier ( ast ) ) ) { <nl> checkName = false ; <nl> @ @ - 202 , 19 + 207 , 16 @ @ public class ParameterNameCheck extends AbstractNameCheck { <nl> * @ return the access modifier of the method / constructor . <nl> * / <nl> private static AccessModifier getAccessModifier ( final DetailAST ast ) { <nl> - final DetailAST params = ast . getParent ( ) ; <nl> - final DetailAST meth = params . getParent ( ) ; <nl> - AccessModifier accessModifier = AccessModifier . PRIVATE ; <nl> - <nl> - if ( meth . getType ( ) = = TokenTypes . METHOD _ DEF <nl> - | | meth . getType ( ) = = TokenTypes . CTOR _ DEF ) { <nl> - if ( ScopeUtil . isInInterfaceOrAnnotationBlock ( ast ) ) { <nl> - accessModifier = AccessModifier . PUBLIC ; <nl> - } <nl> - else { <nl> - final DetailAST modsToken = meth . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - accessModifier = CheckUtil . getAccessModifierFromModifiersToken ( modsToken ) ; <nl> - } <nl> + final AccessModifier accessModifier ; <nl> + <nl> + if ( ScopeUtil . isInInterfaceOrAnnotationBlock ( ast ) ) { <nl> + accessModifier = AccessModifier . PUBLIC ; <nl> + } <nl> + else { <nl> + final DetailAST params = ast . getParent ( ) ; <nl> + final DetailAST meth = params . getParent ( ) ; <nl> + final DetailAST modsToken = meth . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + accessModifier = CheckUtil . getAccessModifierFromModifiersToken ( modsToken ) ; <nl> } <nl> <nl> return accessModifier ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> index 6401b79 . . 9b8ca29 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> @ @ - 174 , 4 + 174 , 11 @ @ public class ParameterNameCheckTest <nl> verify ( checkConfig , getPath ( " InputParameterNameReceiver . java " ) , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testLambdaParameterNoViolationAtAll ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ParameterNameCheck . class ) ; <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputParameterNameLambda . java " ) , expected ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameLambda . java <nl> new file mode 100644 <nl> index 0000000 . . d4c39a3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameLambda . java <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; <nl> + <nl> + import java . util . function . BiFunction ; <nl> + import java . util . function . Function ; <nl> + <nl> + / * <nl> + * No violation are expected when checking this file by ParameterNameCheck as lambda parameters <nl> + * are check by LambdaParameterNameCheck . <nl> + * / <nl> + <nl> + public class InputParameterNameLambda { <nl> + <nl> + Function < String , String > badNamedParameterWithoutParenthesis = s - > s . trim ( ) . toLowerCase ( ) ; <nl> + <nl> + Function < String , String > badNamedParameterWithParenthesis = ( st ) - > st . trim ( ) . toLowerCase ( ) ; <nl> + <nl> + BiFunction < String , String , String > twoBadNamedParameters = ( s1 , s2 ) - > s1 + s2 ; <nl> + <nl> + BiFunction < String , String , String > badNamedParameterInBiFunction = ( first , s ) - > first + s ; <nl> + <nl> + Function < String , Integer > goodNamedParameterWithoutParenthesis = <nl> + notTrimmedString - > notTrimmedString . trim ( ) . length ( ) ; <nl> + <nl> + Function < String , Integer > goodNamedParameterWithParenthesis = <nl> + ( notTrimmedString ) - > notTrimmedString . trim ( ) . length ( ) ; <nl> + <nl> + BiFunction < String , String , Integer > goodNamedParameters = <nl> + ( first , second ) - > ( first + second ) . length ( ) ; <nl> + <nl> + } <nl> diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml <nl> index 367da86 . . d5cefb1 100644 <nl> - - - a / src / xdocs / config _ naming . xml <nl> + + + b / src / xdocs / config _ naming . xml <nl> @ @ - 1469 , 6 + 1469 , 10 @ @ class MyClass { <nl> To validate < code > catch < / code > parameters please use <nl> < a href = " # CatchParameterName " > CatchParameterName < / a > . <nl> < / p > <nl> + < p > <nl> + To validate lambda parameters please use <nl> + < a href = " # LambdaParameterName " > LambdaParameterName < / a > . <nl> + < / p > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " id = " ParameterName _ Properties " >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 7ba16b4 . . a18de5a 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 212 , 7 + 212 , 7 @ @ 
 < maven . sevntu - checkstyle - check . checkstyle . version > 
 8 . 12 
 < / maven . sevntu - checkstyle - check . checkstyle . version > 
 - < maven . versions . plugin . version > 2 . 5 < / maven . versions . plugin . version > 
 + < maven . versions . plugin . version > 2 . 7 < / maven . versions . plugin . version > 
 < java . version > 1 . 8 < / java . version > 
 < pitest . plugin . version > 1 . 4 . 3 < / pitest . plugin . version > 
 < pitest . plugin . timeout . factor > 10 < / pitest . plugin . timeout . factor >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 index a3789c6 . . b9c6a66 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 @ @ - 37 , 6 + 37 , 10 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; 
 * To validate { @ code catch } parameters please use 
 * < a href = " # CatchParameterName " > CatchParameterName < / a > . 
 * < / p > 
 + * < p > 
 + * To validate lambda parameters please use 
 + * < a href = " # LambdaParameterName " > LambdaParameterName < / a > . 
 + * < / p > 
 * < ul > 
 * < li > 
 * Property { @ code format } - Specifies valid identifiers . Default value is 
 @ @ - 186 , 6 + 190 , 7 @ @ public class ParameterNameCheck extends AbstractNameCheck { 
 boolean checkName = true ; 
 if ( ignoreOverridden & & isOverriddenMethod ( ast ) 
 | | ast . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ CATCH 
 + | | ast . getParent ( ) . getParent ( ) . getType ( ) = = TokenTypes . LAMBDA 
 | | CheckUtil . isReceiverParameter ( ast ) 
 | | ! matchAccessModifiers ( getAccessModifier ( ast ) ) ) { 
 checkName = false ; 
 @ @ - 202 , 19 + 207 , 16 @ @ public class ParameterNameCheck extends AbstractNameCheck { 
 * @ return the access modifier of the method / constructor . 
 * / 
 private static AccessModifier getAccessModifier ( final DetailAST ast ) { 
 - final DetailAST params = ast . getParent ( ) ; 
 - final DetailAST meth = params . getParent ( ) ; 
 - AccessModifier accessModifier = AccessModifier . PRIVATE ; 
 - 
 - if ( meth . getType ( ) = = TokenTypes . METHOD _ DEF 
 - | | meth . getType ( ) = = TokenTypes . CTOR _ DEF ) { 
 - if ( ScopeUtil . isInInterfaceOrAnnotationBlock ( ast ) ) { 
 - accessModifier = AccessModifier . PUBLIC ; 
 - } 
 - else { 
 - final DetailAST modsToken = meth . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - accessModifier = CheckUtil . getAccessModifierFromModifiersToken ( modsToken ) ; 
 - } 
 + final AccessModifier accessModifier ; 
 + 
 + if ( ScopeUtil . isInInterfaceOrAnnotationBlock ( ast ) ) { 
 + accessModifier = AccessModifier . PUBLIC ; 
 + } 
 + else { 
 + final DetailAST params = ast . getParent ( ) ; 
 + final DetailAST meth = params . getParent ( ) ; 
 + final DetailAST modsToken = meth . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + accessModifier = CheckUtil . getAccessModifierFromModifiersToken ( modsToken ) ; 
 } 
 
 return accessModifier ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 index 6401b79 . . 9b8ca29 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 @ @ - 174 , 4 + 174 , 11 @ @ public class ParameterNameCheckTest 
 verify ( checkConfig , getPath ( " InputParameterNameReceiver . java " ) , expected ) ; 
 } 
 
 + @ Test 
 + public void testLambdaParameterNoViolationAtAll ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ParameterNameCheck . class ) ; 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputParameterNameLambda . java " ) , expected ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameLambda . java 
 new file mode 100644 
 index 0000000 . . d4c39a3 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameLambda . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; 
 + 
 + import java . util . function . BiFunction ; 
 + import java . util . function . Function ; 
 + 
 + / * 
 + * No violation are expected when checking this file by ParameterNameCheck as lambda parameters 
 + * are check by LambdaParameterNameCheck . 
 + * / 
 + 
 + public class InputParameterNameLambda { 
 + 
 + Function < String , String > badNamedParameterWithoutParenthesis = s - > s . trim ( ) . toLowerCase ( ) ; 
 + 
 + Function < String , String > badNamedParameterWithParenthesis = ( st ) - > st . trim ( ) . toLowerCase ( ) ; 
 + 
 + BiFunction < String , String , String > twoBadNamedParameters = ( s1 , s2 ) - > s1 + s2 ; 
 + 
 + BiFunction < String , String , String > badNamedParameterInBiFunction = ( first , s ) - > first + s ; 
 + 
 + Function < String , Integer > goodNamedParameterWithoutParenthesis = 
 + notTrimmedString - > notTrimmedString . trim ( ) . length ( ) ; 
 + 
 + Function < String , Integer > goodNamedParameterWithParenthesis = 
 + ( notTrimmedString ) - > notTrimmedString . trim ( ) . length ( ) ; 
 + 
 + BiFunction < String , String , Integer > goodNamedParameters = 
 + ( first , second ) - > ( first + second ) . length ( ) ; 
 + 
 + } 
 diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml 
 index 367da86 . . d5cefb1 100644 
 - - - a / src / xdocs / config _ naming . xml 
 + + + b / src / xdocs / config _ naming . xml 
 @ @ - 1469 , 6 + 1469 , 10 @ @ class MyClass { 
 To validate < code > catch < / code > parameters please use 
 < a href = " # CatchParameterName " > CatchParameterName < / a > . 
 < / p > 
 + < p > 
 + To validate lambda parameters please use 
 + < a href = " # LambdaParameterName " > LambdaParameterName < / a > . 
 + < / p > 
 < / subsection > 
 
 < subsection name = " Properties " id = " ParameterName _ Properties " >
