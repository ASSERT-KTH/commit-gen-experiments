BLEU SCORE: 0.09080027618567452

TEST MSG: Issue # 3484 : removed the last of guava
GENERATED MSG: Issue # 46 : blocks of code should not be duplicated

TEST DIFF (one line): diff - - git a / . ci / pitest . sh b / . ci / pitest . sh <nl> index 993e5e5 . . 2b60f9f 100755 <nl> - - - a / . ci / pitest . sh <nl> + + + b / . ci / pitest . sh <nl> @ @ - 191 , 15 + 191 , 13 @ @ pitest - common ) <nl> " PackageObjectFactory . java . html : < td class = ' uncovered ' > < pre > < span class = ' ' > returnValue = Collections . emptyMap ( ) ; < / span > < / pre > < / td > < / tr > " <nl> " PackageObjectFactory . java . html : < td class = ' uncovered ' > < pre > < span class = ' ' > catch ( IOException ignore ) { < / span > < / pre > < / td > < / tr > " <nl> " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( ! cachedHashSum . equals ( contentHashSum ) ) { < / span > < / pre > < / td > < / tr > " <nl> - " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > Flushables . flush ( stream , false ) ; < / span > < / pre > < / td > < / tr > " <nl> + " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > stream . flush ( ) ; < / span > < / pre > < / td > < / tr > " <nl> " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > flushAndCloseOutStream ( oos ) ; < / span > < / pre > < / td > < / tr > " <nl> " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > flushAndCloseOutStream ( out ) ; < / span > < / pre > < / td > < / tr > " <nl> - " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > Closeables . close ( stream , false ) ; < / span > < / pre > < / td > < / tr > " <nl> + " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > stream . close ( ) ; < / span > < / pre > < / td > < / tr > " <nl> " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( stream ! = null ) { < / span > < / pre > < / td > < / tr > " <nl> " PropertyCacheFile . java . html : < td class = ' uncovered ' > < pre > < span class = ' ' > changed = true ; < / span > < / pre > < / td > < / tr > " <nl> - " PropertyCacheFile . java . html : < td class = ' uncovered ' > < pre > < span class = ' ' > catch ( IOException ex ) { < / span > < / pre > < / td > < / tr > " <nl> " PropertyCacheFile . java . html : < td class = ' uncovered ' > < pre > < span class = ' ' > catch ( final IOException | NoSuchAlgorithmException ex ) { < / span > < / pre > < / td > < / tr > " <nl> - " PropertyCacheFile . java . html : < td class = ' uncovered ' > < pre > < span class = ' survived ' > throw new CheckstyleException ( & # 34 ; Unable to load external resource file & # 34 ; + location , ex ) ; < / span > < / pre > < / td > < / tr > " <nl> " PropertyCacheFile . java . html : < td class = ' uncovered ' > < pre > < span class = ' survived ' > throw new IllegalStateException ( & # 34 ; Unable to calculate hashcode . & # 34 ; , ex ) ; < / span > < / pre > < / td > < / tr > " <nl> ) ; <nl> checkPitestReport " $ { ignoredItems [ @ ] } " <nl> diff - - git a / config / import - control . xml b / config / import - control . xml <nl> index 29fd56f . . 90a1663 100644 <nl> - - - a / config / import - control . xml <nl> + + + b / config / import - control . xml <nl> @ @ - 11 , 6 + 11 , 9 @ @ <nl> < disallow class = " java . io . FileInputStream " / > <nl> < disallow class = " java . io . FileOutputStream " / > <nl> <nl> + < ! - - guava causes issues with other libraries since not everyone is on the same version - - > <nl> + < disallow pkg = " com \ . google . * " regex = " true " / > <nl> + <nl> < allow pkg = " antlr " / > <nl> < allow pkg = " com . puppycrawl . tools . checkstyle . api " / > <nl> < allow pkg = " com . puppycrawl . tools . checkstyle . checks " / > <nl> @ @ - 40 , 20 + 43 , 13 @ @ <nl> < allow class = " java . lang . annotation . Target " local - only = " true " / > <nl> < allow class = " com . puppycrawl . tools . checkstyle . xpath . XpathQueryGenerator " local - only = " true " / > <nl> <nl> - < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > <nl> - < allow class = " com . google . common . base . CaseFormat " local - only = " true " / > <nl> - < allow class = " com . google . common . io . BaseEncoding " local - only = " true " / > <nl> - < allow class = " com . google . common . io . ByteStreams " local - only = " true " / > <nl> - <nl> < allow class = " com . puppycrawl . tools . checkstyle . XpathFileGeneratorAstFilter " <nl> local - only = " true " / > <nl> < allow class = " com . puppycrawl . tools . checkstyle . XpathFileGeneratorAuditListener " <nl> local - only = " true " / > <nl> <nl> < file name = " PropertyCacheFile " > <nl> - < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > <nl> - < allow class = " com . google . common . io . Closeables " / > <nl> - < allow class = " com . google . common . io . Flushables " / > <nl> + < allow class = " java . math . BigInteger " / > <nl> < / file > <nl> <nl> < subpackage name = " utils " > <nl> @ @ - 123 , 9 + 119 , 6 @ @ <nl> local - only = " true " / > <nl> < allow class = " com . puppycrawl . tools . checkstyle . JavadocDetailNodeParser . + " <nl> regex = " true " local - only = " true " / > <nl> - <nl> - < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > <nl> - < allow class = " com . google . common . base . CharMatcher " local - only = " true " / > <nl> < / subpackage > <nl> < / subpackage > <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java <nl> index bfaae7e . . fe837ed 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java <nl> @ @ - 42 , 7 + 42 , 6 @ @ import org . antlr . v4 . runtime . misc . ParseCancellationException ; <nl> import org . antlr . v4 . runtime . tree . ParseTree ; <nl> import org . antlr . v4 . runtime . tree . TerminalNode ; <nl> <nl> - import com . google . common . base . CaseFormat ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> @ @ - 412 , 9 + 411 , 7 @ @ public class JavadocDetailNodeParser { <nl> } <nl> else { <nl> final String className = getNodeClassNameWithoutContext ( node ) ; <nl> - final String typeName = <nl> - CaseFormat . UPPER _ CAMEL . to ( CaseFormat . UPPER _ UNDERSCORE , className ) ; <nl> - tokenType = JavadocUtil . getTokenId ( typeName ) ; <nl> + tokenType = JavadocUtil . getTokenId ( convertUpperCamelToUpperUnderscore ( className ) ) ; <nl> } <nl> <nl> return tokenType ; <nl> @ @ - 429 , 7 + 426 , 7 @ @ public class JavadocDetailNodeParser { <nl> * / <nl> private static String getFormattedNodeClassNameWithoutContext ( ParseTree node ) { <nl> final String classNameWithoutContext = getNodeClassNameWithoutContext ( node ) ; <nl> - return CaseFormat . UPPER _ CAMEL . to ( CaseFormat . UPPER _ UNDERSCORE , classNameWithoutContext ) ; <nl> + return convertUpperCamelToUpperUnderscore ( classNameWithoutContext ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 528 , 6 + 525 , 25 @ @ public class JavadocDetailNodeParser { <nl> } <nl> <nl> / * * <nl> + * Converts the given { @ code text } from camel case to all upper case with <nl> + * underscores separating each word . <nl> + * @ param text The string to convert . <nl> + * @ return The result of the conversion . <nl> + * / <nl> + private static String convertUpperCamelToUpperUnderscore ( String text ) { <nl> + final StringBuilder result = new StringBuilder ( 20 ) ; <nl> + boolean first = true ; <nl> + for ( char letter : text . toCharArray ( ) ) { <nl> + if ( ! first & & Character . isUpperCase ( letter ) ) { <nl> + result . append ( ' _ ' ) ; <nl> + } <nl> + result . append ( Character . toUpperCase ( letter ) ) ; <nl> + first = false ; <nl> + } <nl> + return result . toString ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Custom error listener for JavadocParser that prints user readable errors . <nl> * / <nl> private static class DescriptiveErrorListener extends BaseErrorListener { <nl> @ @ - 590 , 8 + 606 , 7 @ @ public class JavadocDetailNodeParser { <nl> else { <nl> final int ruleIndex = ex . getCtx ( ) . getRuleIndex ( ) ; <nl> final String ruleName = recognizer . getRuleNames ( ) [ ruleIndex ] ; <nl> - final String upperCaseRuleName = CaseFormat . UPPER _ CAMEL . to ( <nl> - CaseFormat . UPPER _ UNDERSCORE , ruleName ) ; <nl> + final String upperCaseRuleName = convertUpperCamelToUpperUnderscore ( ruleName ) ; <nl> <nl> errorMessage = new ParseErrorMessage ( lineNumber , <nl> MSG _ JAVADOC _ PARSE _ RULE _ ERROR , charPositionInLine , msg , upperCaseRuleName ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> index a62c08f . . 0b6452f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> - import java . io . BufferedInputStream ; <nl> import java . io . ByteArrayOutputStream ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> @ @ - 27 , 6 + 26 , 7 @ @ import java . io . InputStream ; <nl> import java . io . ObjectOutputStream ; <nl> import java . io . OutputStream ; <nl> import java . io . Serializable ; <nl> + import java . math . BigInteger ; <nl> import java . net . URI ; <nl> import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> @ @ - 34 , 14 + 34 , 11 @ @ import java . nio . file . Paths ; <nl> import java . security . MessageDigest ; <nl> import java . security . NoSuchAlgorithmException ; <nl> import java . util . HashSet ; <nl> + import java . util . Locale ; <nl> import java . util . Objects ; <nl> import java . util . Properties ; <nl> import java . util . Set ; <nl> <nl> - import com . google . common . io . BaseEncoding ; <nl> - import com . google . common . io . ByteStreams ; <nl> - import com . google . common . io . Closeables ; <nl> - import com . google . common . io . Flushables ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> @ @ - 75 , 6 + 72 , 15 @ @ public final class PropertyCacheFile { <nl> * / <nl> public static final String EXTERNAL _ RESOURCE _ KEY _ PREFIX = " module - resource * ? : " ; <nl> <nl> + / * * Size of default byte array for buffer . * / <nl> + private static final int BUFFER _ SIZE = 1024 ; <nl> + <nl> + / * * Default buffer for reading from streams . * / <nl> + private static final byte [ ] BUFFER = new byte [ BUFFER _ SIZE ] ; <nl> + <nl> + / * * Default number for base 16 encoding . * / <nl> + private static final int BASE _ 16 = 16 ; <nl> + <nl> / * * The details on files . * * / <nl> private final Properties details = new Properties ( ) ; <nl> <nl> @ @ - 164 , 9 + 170 , 9 @ @ public final class PropertyCacheFile { <nl> * / <nl> private static void flushAndCloseOutStream ( OutputStream stream ) throws IOException { <nl> if ( stream ! = null ) { <nl> - Flushables . flush ( stream , false ) ; <nl> + stream . flush ( ) ; <nl> + stream . close ( ) ; <nl> } <nl> - Closeables . close ( stream , false ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 223 , 7 + 229 , 7 @ @ public final class PropertyCacheFile { <nl> final MessageDigest digest = MessageDigest . getInstance ( " SHA - 1 " ) ; <nl> digest . update ( outputStream . toByteArray ( ) ) ; <nl> <nl> - return BaseEncoding . base16 ( ) . upperCase ( ) . encode ( digest . digest ( ) ) ; <nl> + return new BigInteger ( 1 , digest . digest ( ) ) . toString ( BASE _ 16 ) . toUpperCase ( Locale . ROOT ) ; <nl> } <nl> catch ( final IOException | NoSuchAlgorithmException ex ) { <nl> / / rethrow as unchecked exception <nl> @ @ - 275 , 7 + 281 , 7 @ @ public final class PropertyCacheFile { <nl> resources . add ( new ExternalResource ( EXTERNAL _ RESOURCE _ KEY _ PREFIX + location , <nl> contentHashSum ) ) ; <nl> } <nl> - catch ( CheckstyleException ex ) { <nl> + catch ( CheckstyleException | IOException ex ) { <nl> / / if exception happened ( configuration resource was not found , connection is not <nl> / / available , resource is broken , etc ) , we need to calculate hash sum based on <nl> / / exception object content in order to check whether problem is resolved later <nl> @ @ - 292 , 20 + 298 , 37 @ @ public final class PropertyCacheFile { <nl> * Loads the content of external resource . <nl> * @ param location external resource location . <nl> * @ return array of bytes which represents the content of external resource in binary form . <nl> + * @ throws IOException if error while loading occurs . <nl> * @ throws CheckstyleException if error while loading occurs . <nl> * / <nl> - private static byte [ ] loadExternalResource ( String location ) throws CheckstyleException { <nl> - final byte [ ] content ; <nl> + private static byte [ ] loadExternalResource ( String location ) <nl> + throws IOException , CheckstyleException { <nl> final URI uri = CommonUtil . getUriByFilename ( location ) ; <nl> <nl> - try { <nl> - content = ByteStreams . toByteArray ( new BufferedInputStream ( uri . toURL ( ) . openStream ( ) ) ) ; <nl> - } <nl> - catch ( IOException ex ) { <nl> - throw new CheckstyleException ( " Unable to load external resource file " + location , ex ) ; <nl> + try ( InputStream is = uri . toURL ( ) . openStream ( ) ) { <nl> + return toByteArray ( is ) ; <nl> } <nl> + } <nl> + <nl> + / * * <nl> + * Reads all the contents of an input stream and returns it as a byte array . <nl> + * @ param stream The input stream to read from . <nl> + * @ return The resulting byte array of the stream . <nl> + * @ throws IOException if there is an error reading the input stream . <nl> + * / <nl> + private static byte [ ] toByteArray ( InputStream stream ) throws IOException { <nl> + final ByteArrayOutputStream content = new ByteArrayOutputStream ( ) ; <nl> + <nl> + do { <nl> + final int size = stream . read ( BUFFER ) ; <nl> + if ( size = = - 1 ) { <nl> + break ; <nl> + } <nl> + <nl> + content . write ( BUFFER , 0 , size ) ; <nl> + } while ( true ) ; <nl> <nl> - return content ; <nl> + return content . toByteArray ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java <nl> index 6b598fd . . 6e75b7a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java <nl> @ @ - 25 , 7 + 25 , 6 @ @ import java . util . HashSet ; <nl> import java . util . Set ; <nl> import java . util . regex . Pattern ; <nl> <nl> - import com . google . common . base . CharMatcher ; <nl> import com . puppycrawl . tools . checkstyle . StatelessCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> @ @ - 256 , 10 + 255 , 39 @ @ public class SummaryJavadocCheck extends AbstractJavadocCheck { <nl> * @ return true , if first sentence contains forbidden summary fragment . <nl> * / <nl> private boolean containsForbiddenFragment ( String firstSentence ) { <nl> - String javadocText = JAVADOC _ MULTILINE _ TO _ SINGLELINE _ PATTERN <nl> - . matcher ( firstSentence ) . replaceAll ( " " ) ; <nl> - javadocText = CharMatcher . whitespace ( ) . trimAndCollapseFrom ( javadocText , ' ' ) ; <nl> - return forbiddenSummaryFragments . matcher ( javadocText ) . find ( ) ; <nl> + final String javadocText = JAVADOC _ MULTILINE _ TO _ SINGLELINE _ PATTERN <nl> + . matcher ( firstSentence ) . replaceAll ( " " ) . trim ( ) ; <nl> + return forbiddenSummaryFragments . matcher ( trimExcessWhitespaces ( javadocText ) ) . find ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Trims the given { @ code text } of duplicate whitespaces . <nl> + * @ param text The text to transform . <nl> + * @ return The finalized form of the text . <nl> + * / <nl> + private static String trimExcessWhitespaces ( String text ) { <nl> + final StringBuilder result = new StringBuilder ( 100 ) ; <nl> + boolean previousWhitespace = true ; <nl> + <nl> + for ( char letter : text . toCharArray ( ) ) { <nl> + final char print ; <nl> + if ( Character . isWhitespace ( letter ) ) { <nl> + if ( previousWhitespace ) { <nl> + continue ; <nl> + } <nl> + <nl> + previousWhitespace = true ; <nl> + print = ' ' ; <nl> + } <nl> + else { <nl> + previousWhitespace = false ; <nl> + print = letter ; <nl> + } <nl> + <nl> + result . append ( print ) ; <nl> + } <nl> + <nl> + return result . toString ( ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / PropertyCacheFilePowerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / PropertyCacheFilePowerTest . java <nl> index 45b5424 . . 49ae306 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / PropertyCacheFilePowerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / PropertyCacheFilePowerTest . java <nl> @ @ - 26 , 17 + 26 , 12 @ @ import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> import static org . mockito . ArgumentMatchers . any ; <nl> - import static org . mockito . Mockito . times ; <nl> - import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> - import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . when ; <nl> <nl> import java . io . BufferedInputStream ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> - import java . io . ObjectOutputStream ; <nl> - import java . io . OutputStream ; <nl> import java . io . Serializable ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> @ @ - 51 , 13 + 46 , 10 @ @ import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . TemporaryFolder ; <nl> import org . junit . runner . RunWith ; <nl> - import org . mockito . ArgumentMatchers ; <nl> import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> import com . google . common . io . ByteStreams ; <nl> - import com . google . common . io . Closeables ; <nl> - import com . google . common . io . Flushables ; <nl> import com . puppycrawl . tools . checkstyle . AbstractPathTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . PropertyCacheFile ; <nl> @ @ - 67 , 7 + 59 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> <nl> @ RunWith ( PowerMockRunner . class ) <nl> @ PrepareForTest ( { PropertyCacheFile . class , ByteStreams . class , <nl> - CommonUtil . class , Closeables . class , Flushables . class } ) <nl> + CommonUtil . class } ) <nl> public class PropertyCacheFilePowerTest extends AbstractPathTestSupport { <nl> <nl> @ Rule <nl> @ @ - 78 , 26 + 70 , 6 @ @ public class PropertyCacheFilePowerTest extends AbstractPathTestSupport { <nl> return " com / puppycrawl / tools / checkstyle / propertycachefile " ; <nl> } <nl> <nl> - @ Test <nl> - public void testCloseAndFlushOutputStreamAfterCreatingHashCode ( ) throws IOException { <nl> - mockStatic ( Closeables . class ) ; <nl> - doNothing ( ) . when ( Closeables . class ) ; <nl> - Closeables . close ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> - mockStatic ( Flushables . class ) ; <nl> - doNothing ( ) . when ( Flushables . class ) ; <nl> - Flushables . flush ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> - <nl> - final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> - final PropertyCacheFile cache = new PropertyCacheFile ( config , " fileDoesNotExist . txt " ) ; <nl> - cache . load ( ) ; <nl> - <nl> - verifyStatic ( Closeables . class , times ( 1 ) ) ; <nl> - Closeables . close ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> - <nl> - verifyStatic ( Flushables . class , times ( 1 ) ) ; <nl> - Flushables . flush ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> - } <nl> - <nl> / * * <nl> * This SuppressWarning ( " unchecked " ) required to suppress <nl> * " Unchecked generics array creation for varargs parameter " during mock . <nl> @ @ - 135 , 28 + 107 , 6 @ @ public class PropertyCacheFilePowerTest extends AbstractPathTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testFlushAndCloseCacheFileOutputStream ( ) throws IOException { <nl> - mockStatic ( Closeables . class ) ; <nl> - doNothing ( ) . when ( Closeables . class ) ; <nl> - Closeables . close ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> - mockStatic ( Flushables . class ) ; <nl> - doNothing ( ) . when ( Flushables . class ) ; <nl> - Flushables . flush ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> - <nl> - final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> - final PropertyCacheFile cache = new PropertyCacheFile ( config , <nl> - temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> - <nl> - cache . put ( " CheckedFileName . java " , System . currentTimeMillis ( ) ) ; <nl> - cache . persist ( ) ; <nl> - <nl> - verifyStatic ( Closeables . class , times ( 1 ) ) ; <nl> - Closeables . close ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> - verifyStatic ( Flushables . class , times ( 1 ) ) ; <nl> - Flushables . flush ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void testExceptionNoSuchAlgorithmException ( ) throws Exception { <nl> final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> final String filePath = temporaryFolder . newFile ( ) . getPath ( ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> index c080b8c . . 6564d8f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> @ @ - 155 , 7 + 155 , 7 @ @ public final class MutableExceptionCheck extends AbstractFormatCheck { <nl> final DetailAST extendsClause = ast . findFirstToken ( TokenTypes . EXTENDS _ CLAUSE ) ; <nl> if ( extendsClause ! = null ) { <nl> DetailAST currentNode = extendsClause ; <nl> - while ( currentNode . getType ( ) ! = TokenTypes . IDENT ) { <nl> + while ( currentNode . getLastChild ( ) ! = null ) { <nl> currentNode = currentNode . getLastChild ( ) ; <nl> } <nl> final String extendedClassName = currentNode . getText ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> index af627a3 . . 3f44f53 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> @ @ - 35 , 6 + 35 , 18 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class MutableExceptionCheckTest extends BaseCheckTestSupport { <nl> + <nl> + @ Test <nl> + public void testClassExtendsGenericClass ( ) throws Exception { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( MutableExceptionCheck . class ) ; <nl> + <nl> + String [ ] expected = { <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " design " + File . separator <nl> + + " InputMutableExceptionClassExtendsGenericClass . java " ) , expected ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testDefault ( ) throws Exception { <nl> DefaultConfiguration checkConfig = createCheckConfig ( MutableExceptionCheck . class ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java <nl> new file mode 100644 <nl> index 0000000 . . 931128e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . design ; <nl> + <nl> + import java . util . concurrent . atomic . AtomicReference ; <nl> + <nl> + / * * <nl> + * Convenience class for holding an { @ link Exception } in a thread - safe way <nl> + * / <nl> + public class InputMutableExceptionClassExtendsGenericClass extends AtomicReference < Exception > { / / NPE is not expected <nl> + <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / . ci / pitest . sh b / . ci / pitest . sh 
 index 993e5e5 . . 2b60f9f 100755 
 - - - a / . ci / pitest . sh 
 + + + b / . ci / pitest . sh 
 @ @ - 191 , 15 + 191 , 13 @ @ pitest - common ) 
 " PackageObjectFactory . java . html : < td class = ' uncovered ' > < pre > < span class = ' ' > returnValue = Collections . emptyMap ( ) ; < / span > < / pre > < / td > < / tr > " 
 " PackageObjectFactory . java . html : < td class = ' uncovered ' > < pre > < span class = ' ' > catch ( IOException ignore ) { < / span > < / pre > < / td > < / tr > " 
 " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( ! cachedHashSum . equals ( contentHashSum ) ) { < / span > < / pre > < / td > < / tr > " 
 - " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > Flushables . flush ( stream , false ) ; < / span > < / pre > < / td > < / tr > " 
 + " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > stream . flush ( ) ; < / span > < / pre > < / td > < / tr > " 
 " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > flushAndCloseOutStream ( oos ) ; < / span > < / pre > < / td > < / tr > " 
 " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > flushAndCloseOutStream ( out ) ; < / span > < / pre > < / td > < / tr > " 
 - " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > Closeables . close ( stream , false ) ; < / span > < / pre > < / td > < / tr > " 
 + " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > stream . close ( ) ; < / span > < / pre > < / td > < / tr > " 
 " PropertyCacheFile . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( stream ! = null ) { < / span > < / pre > < / td > < / tr > " 
 " PropertyCacheFile . java . html : < td class = ' uncovered ' > < pre > < span class = ' ' > changed = true ; < / span > < / pre > < / td > < / tr > " 
 - " PropertyCacheFile . java . html : < td class = ' uncovered ' > < pre > < span class = ' ' > catch ( IOException ex ) { < / span > < / pre > < / td > < / tr > " 
 " PropertyCacheFile . java . html : < td class = ' uncovered ' > < pre > < span class = ' ' > catch ( final IOException | NoSuchAlgorithmException ex ) { < / span > < / pre > < / td > < / tr > " 
 - " PropertyCacheFile . java . html : < td class = ' uncovered ' > < pre > < span class = ' survived ' > throw new CheckstyleException ( & # 34 ; Unable to load external resource file & # 34 ; + location , ex ) ; < / span > < / pre > < / td > < / tr > " 
 " PropertyCacheFile . java . html : < td class = ' uncovered ' > < pre > < span class = ' survived ' > throw new IllegalStateException ( & # 34 ; Unable to calculate hashcode . & # 34 ; , ex ) ; < / span > < / pre > < / td > < / tr > " 
 ) ; 
 checkPitestReport " $ { ignoredItems [ @ ] } " 
 diff - - git a / config / import - control . xml b / config / import - control . xml 
 index 29fd56f . . 90a1663 100644 
 - - - a / config / import - control . xml 
 + + + b / config / import - control . xml 
 @ @ - 11 , 6 + 11 , 9 @ @ 
 < disallow class = " java . io . FileInputStream " / > 
 < disallow class = " java . io . FileOutputStream " / > 
 
 + < ! - - guava causes issues with other libraries since not everyone is on the same version - - > 
 + < disallow pkg = " com \ . google . * " regex = " true " / > 
 + 
 < allow pkg = " antlr " / > 
 < allow pkg = " com . puppycrawl . tools . checkstyle . api " / > 
 < allow pkg = " com . puppycrawl . tools . checkstyle . checks " / > 
 @ @ - 40 , 20 + 43 , 13 @ @ 
 < allow class = " java . lang . annotation . Target " local - only = " true " / > 
 < allow class = " com . puppycrawl . tools . checkstyle . xpath . XpathQueryGenerator " local - only = " true " / > 
 
 - < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > 
 - < allow class = " com . google . common . base . CaseFormat " local - only = " true " / > 
 - < allow class = " com . google . common . io . BaseEncoding " local - only = " true " / > 
 - < allow class = " com . google . common . io . ByteStreams " local - only = " true " / > 
 - 
 < allow class = " com . puppycrawl . tools . checkstyle . XpathFileGeneratorAstFilter " 
 local - only = " true " / > 
 < allow class = " com . puppycrawl . tools . checkstyle . XpathFileGeneratorAuditListener " 
 local - only = " true " / > 
 
 < file name = " PropertyCacheFile " > 
 - < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > 
 - < allow class = " com . google . common . io . Closeables " / > 
 - < allow class = " com . google . common . io . Flushables " / > 
 + < allow class = " java . math . BigInteger " / > 
 < / file > 
 
 < subpackage name = " utils " > 
 @ @ - 123 , 9 + 119 , 6 @ @ 
 local - only = " true " / > 
 < allow class = " com . puppycrawl . tools . checkstyle . JavadocDetailNodeParser . + " 
 regex = " true " local - only = " true " / > 
 - 
 - < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > 
 - < allow class = " com . google . common . base . CharMatcher " local - only = " true " / > 
 < / subpackage > 
 < / subpackage > 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java 
 index bfaae7e . . fe837ed 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java 
 @ @ - 42 , 7 + 42 , 6 @ @ import org . antlr . v4 . runtime . misc . ParseCancellationException ; 
 import org . antlr . v4 . runtime . tree . ParseTree ; 
 import org . antlr . v4 . runtime . tree . TerminalNode ; 
 
 - import com . google . common . base . CaseFormat ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 @ @ - 412 , 9 + 411 , 7 @ @ public class JavadocDetailNodeParser { 
 } 
 else { 
 final String className = getNodeClassNameWithoutContext ( node ) ; 
 - final String typeName = 
 - CaseFormat . UPPER _ CAMEL . to ( CaseFormat . UPPER _ UNDERSCORE , className ) ; 
 - tokenType = JavadocUtil . getTokenId ( typeName ) ; 
 + tokenType = JavadocUtil . getTokenId ( convertUpperCamelToUpperUnderscore ( className ) ) ; 
 } 
 
 return tokenType ; 
 @ @ - 429 , 7 + 426 , 7 @ @ public class JavadocDetailNodeParser { 
 * / 
 private static String getFormattedNodeClassNameWithoutContext ( ParseTree node ) { 
 final String classNameWithoutContext = getNodeClassNameWithoutContext ( node ) ; 
 - return CaseFormat . UPPER _ CAMEL . to ( CaseFormat . UPPER _ UNDERSCORE , classNameWithoutContext ) ; 
 + return convertUpperCamelToUpperUnderscore ( classNameWithoutContext ) ; 
 } 
 
 / * * 
 @ @ - 528 , 6 + 525 , 25 @ @ public class JavadocDetailNodeParser { 
 } 
 
 / * * 
 + * Converts the given { @ code text } from camel case to all upper case with 
 + * underscores separating each word . 
 + * @ param text The string to convert . 
 + * @ return The result of the conversion . 
 + * / 
 + private static String convertUpperCamelToUpperUnderscore ( String text ) { 
 + final StringBuilder result = new StringBuilder ( 20 ) ; 
 + boolean first = true ; 
 + for ( char letter : text . toCharArray ( ) ) { 
 + if ( ! first & & Character . isUpperCase ( letter ) ) { 
 + result . append ( ' _ ' ) ; 
 + } 
 + result . append ( Character . toUpperCase ( letter ) ) ; 
 + first = false ; 
 + } 
 + return result . toString ( ) ; 
 + } 
 + 
 + / * * 
 * Custom error listener for JavadocParser that prints user readable errors . 
 * / 
 private static class DescriptiveErrorListener extends BaseErrorListener { 
 @ @ - 590 , 8 + 606 , 7 @ @ public class JavadocDetailNodeParser { 
 else { 
 final int ruleIndex = ex . getCtx ( ) . getRuleIndex ( ) ; 
 final String ruleName = recognizer . getRuleNames ( ) [ ruleIndex ] ; 
 - final String upperCaseRuleName = CaseFormat . UPPER _ CAMEL . to ( 
 - CaseFormat . UPPER _ UNDERSCORE , ruleName ) ; 
 + final String upperCaseRuleName = convertUpperCamelToUpperUnderscore ( ruleName ) ; 
 
 errorMessage = new ParseErrorMessage ( lineNumber , 
 MSG _ JAVADOC _ PARSE _ RULE _ ERROR , charPositionInLine , msg , upperCaseRuleName ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 index a62c08f . . 0b6452f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 @ @ - 19 , 7 + 19 , 6 @ @ 
 
 package com . puppycrawl . tools . checkstyle ; 
 
 - import java . io . BufferedInputStream ; 
 import java . io . ByteArrayOutputStream ; 
 import java . io . File ; 
 import java . io . IOException ; 
 @ @ - 27 , 6 + 26 , 7 @ @ import java . io . InputStream ; 
 import java . io . ObjectOutputStream ; 
 import java . io . OutputStream ; 
 import java . io . Serializable ; 
 + import java . math . BigInteger ; 
 import java . net . URI ; 
 import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 @ @ - 34 , 14 + 34 , 11 @ @ import java . nio . file . Paths ; 
 import java . security . MessageDigest ; 
 import java . security . NoSuchAlgorithmException ; 
 import java . util . HashSet ; 
 + import java . util . Locale ; 
 import java . util . Objects ; 
 import java . util . Properties ; 
 import java . util . Set ; 
 
 - import com . google . common . io . BaseEncoding ; 
 - import com . google . common . io . ByteStreams ; 
 - import com . google . common . io . Closeables ; 
 - import com . google . common . io . Flushables ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 @ @ - 75 , 6 + 72 , 15 @ @ public final class PropertyCacheFile { 
 * / 
 public static final String EXTERNAL _ RESOURCE _ KEY _ PREFIX = " module - resource * ? : " ; 
 
 + / * * Size of default byte array for buffer . * / 
 + private static final int BUFFER _ SIZE = 1024 ; 
 + 
 + / * * Default buffer for reading from streams . * / 
 + private static final byte [ ] BUFFER = new byte [ BUFFER _ SIZE ] ; 
 + 
 + / * * Default number for base 16 encoding . * / 
 + private static final int BASE _ 16 = 16 ; 
 + 
 / * * The details on files . * * / 
 private final Properties details = new Properties ( ) ; 
 
 @ @ - 164 , 9 + 170 , 9 @ @ public final class PropertyCacheFile { 
 * / 
 private static void flushAndCloseOutStream ( OutputStream stream ) throws IOException { 
 if ( stream ! = null ) { 
 - Flushables . flush ( stream , false ) ; 
 + stream . flush ( ) ; 
 + stream . close ( ) ; 
 } 
 - Closeables . close ( stream , false ) ; 
 } 
 
 / * * 
 @ @ - 223 , 7 + 229 , 7 @ @ public final class PropertyCacheFile { 
 final MessageDigest digest = MessageDigest . getInstance ( " SHA - 1 " ) ; 
 digest . update ( outputStream . toByteArray ( ) ) ; 
 
 - return BaseEncoding . base16 ( ) . upperCase ( ) . encode ( digest . digest ( ) ) ; 
 + return new BigInteger ( 1 , digest . digest ( ) ) . toString ( BASE _ 16 ) . toUpperCase ( Locale . ROOT ) ; 
 } 
 catch ( final IOException | NoSuchAlgorithmException ex ) { 
 / / rethrow as unchecked exception 
 @ @ - 275 , 7 + 281 , 7 @ @ public final class PropertyCacheFile { 
 resources . add ( new ExternalResource ( EXTERNAL _ RESOURCE _ KEY _ PREFIX + location , 
 contentHashSum ) ) ; 
 } 
 - catch ( CheckstyleException ex ) { 
 + catch ( CheckstyleException | IOException ex ) { 
 / / if exception happened ( configuration resource was not found , connection is not 
 / / available , resource is broken , etc ) , we need to calculate hash sum based on 
 / / exception object content in order to check whether problem is resolved later 
 @ @ - 292 , 20 + 298 , 37 @ @ public final class PropertyCacheFile { 
 * Loads the content of external resource . 
 * @ param location external resource location . 
 * @ return array of bytes which represents the content of external resource in binary form . 
 + * @ throws IOException if error while loading occurs . 
 * @ throws CheckstyleException if error while loading occurs . 
 * / 
 - private static byte [ ] loadExternalResource ( String location ) throws CheckstyleException { 
 - final byte [ ] content ; 
 + private static byte [ ] loadExternalResource ( String location ) 
 + throws IOException , CheckstyleException { 
 final URI uri = CommonUtil . getUriByFilename ( location ) ; 
 
 - try { 
 - content = ByteStreams . toByteArray ( new BufferedInputStream ( uri . toURL ( ) . openStream ( ) ) ) ; 
 - } 
 - catch ( IOException ex ) { 
 - throw new CheckstyleException ( " Unable to load external resource file " + location , ex ) ; 
 + try ( InputStream is = uri . toURL ( ) . openStream ( ) ) { 
 + return toByteArray ( is ) ; 
 } 
 + } 
 + 
 + / * * 
 + * Reads all the contents of an input stream and returns it as a byte array . 
 + * @ param stream The input stream to read from . 
 + * @ return The resulting byte array of the stream . 
 + * @ throws IOException if there is an error reading the input stream . 
 + * / 
 + private static byte [ ] toByteArray ( InputStream stream ) throws IOException { 
 + final ByteArrayOutputStream content = new ByteArrayOutputStream ( ) ; 
 + 
 + do { 
 + final int size = stream . read ( BUFFER ) ; 
 + if ( size = = - 1 ) { 
 + break ; 
 + } 
 + 
 + content . write ( BUFFER , 0 , size ) ; 
 + } while ( true ) ; 
 
 - return content ; 
 + return content . toByteArray ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java 
 index 6b598fd . . 6e75b7a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java 
 @ @ - 25 , 7 + 25 , 6 @ @ import java . util . HashSet ; 
 import java . util . Set ; 
 import java . util . regex . Pattern ; 
 
 - import com . google . common . base . CharMatcher ; 
 import com . puppycrawl . tools . checkstyle . StatelessCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 @ @ - 256 , 10 + 255 , 39 @ @ public class SummaryJavadocCheck extends AbstractJavadocCheck { 
 * @ return true , if first sentence contains forbidden summary fragment . 
 * / 
 private boolean containsForbiddenFragment ( String firstSentence ) { 
 - String javadocText = JAVADOC _ MULTILINE _ TO _ SINGLELINE _ PATTERN 
 - . matcher ( firstSentence ) . replaceAll ( " " ) ; 
 - javadocText = CharMatcher . whitespace ( ) . trimAndCollapseFrom ( javadocText , ' ' ) ; 
 - return forbiddenSummaryFragments . matcher ( javadocText ) . find ( ) ; 
 + final String javadocText = JAVADOC _ MULTILINE _ TO _ SINGLELINE _ PATTERN 
 + . matcher ( firstSentence ) . replaceAll ( " " ) . trim ( ) ; 
 + return forbiddenSummaryFragments . matcher ( trimExcessWhitespaces ( javadocText ) ) . find ( ) ; 
 + } 
 + 
 + / * * 
 + * Trims the given { @ code text } of duplicate whitespaces . 
 + * @ param text The text to transform . 
 + * @ return The finalized form of the text . 
 + * / 
 + private static String trimExcessWhitespaces ( String text ) { 
 + final StringBuilder result = new StringBuilder ( 100 ) ; 
 + boolean previousWhitespace = true ; 
 + 
 + for ( char letter : text . toCharArray ( ) ) { 
 + final char print ; 
 + if ( Character . isWhitespace ( letter ) ) { 
 + if ( previousWhitespace ) { 
 + continue ; 
 + } 
 + 
 + previousWhitespace = true ; 
 + print = ' ' ; 
 + } 
 + else { 
 + previousWhitespace = false ; 
 + print = letter ; 
 + } 
 + 
 + result . append ( print ) ; 
 + } 
 + 
 + return result . toString ( ) ; 
 } 
 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / PropertyCacheFilePowerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / PropertyCacheFilePowerTest . java 
 index 45b5424 . . 49ae306 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / PropertyCacheFilePowerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / PropertyCacheFilePowerTest . java 
 @ @ - 26 , 17 + 26 , 12 @ @ import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 import static org . mockito . ArgumentMatchers . any ; 
 - import static org . mockito . Mockito . times ; 
 - import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 - import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 import static org . powermock . api . mockito . PowerMockito . when ; 
 
 import java . io . BufferedInputStream ; 
 import java . io . File ; 
 import java . io . IOException ; 
 - import java . io . ObjectOutputStream ; 
 - import java . io . OutputStream ; 
 import java . io . Serializable ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 @ @ - 51 , 13 + 46 , 10 @ @ import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . TemporaryFolder ; 
 import org . junit . runner . RunWith ; 
 - import org . mockito . ArgumentMatchers ; 
 import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 import com . google . common . io . ByteStreams ; 
 - import com . google . common . io . Closeables ; 
 - import com . google . common . io . Flushables ; 
 import com . puppycrawl . tools . checkstyle . AbstractPathTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . PropertyCacheFile ; 
 @ @ - 67 , 7 + 59 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 
 @ RunWith ( PowerMockRunner . class ) 
 @ PrepareForTest ( { PropertyCacheFile . class , ByteStreams . class , 
 - CommonUtil . class , Closeables . class , Flushables . class } ) 
 + CommonUtil . class } ) 
 public class PropertyCacheFilePowerTest extends AbstractPathTestSupport { 
 
 @ Rule 
 @ @ - 78 , 26 + 70 , 6 @ @ public class PropertyCacheFilePowerTest extends AbstractPathTestSupport { 
 return " com / puppycrawl / tools / checkstyle / propertycachefile " ; 
 } 
 
 - @ Test 
 - public void testCloseAndFlushOutputStreamAfterCreatingHashCode ( ) throws IOException { 
 - mockStatic ( Closeables . class ) ; 
 - doNothing ( ) . when ( Closeables . class ) ; 
 - Closeables . close ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 - mockStatic ( Flushables . class ) ; 
 - doNothing ( ) . when ( Flushables . class ) ; 
 - Flushables . flush ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 - 
 - final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 - final PropertyCacheFile cache = new PropertyCacheFile ( config , " fileDoesNotExist . txt " ) ; 
 - cache . load ( ) ; 
 - 
 - verifyStatic ( Closeables . class , times ( 1 ) ) ; 
 - Closeables . close ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 - 
 - verifyStatic ( Flushables . class , times ( 1 ) ) ; 
 - Flushables . flush ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 - } 
 - 
 / * * 
 * This SuppressWarning ( " unchecked " ) required to suppress 
 * " Unchecked generics array creation for varargs parameter " during mock . 
 @ @ - 135 , 28 + 107 , 6 @ @ public class PropertyCacheFilePowerTest extends AbstractPathTestSupport { 
 } 
 
 @ Test 
 - public void testFlushAndCloseCacheFileOutputStream ( ) throws IOException { 
 - mockStatic ( Closeables . class ) ; 
 - doNothing ( ) . when ( Closeables . class ) ; 
 - Closeables . close ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 - mockStatic ( Flushables . class ) ; 
 - doNothing ( ) . when ( Flushables . class ) ; 
 - Flushables . flush ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 - 
 - final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 - final PropertyCacheFile cache = new PropertyCacheFile ( config , 
 - temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 - 
 - cache . put ( " CheckedFileName . java " , System . currentTimeMillis ( ) ) ; 
 - cache . persist ( ) ; 
 - 
 - verifyStatic ( Closeables . class , times ( 1 ) ) ; 
 - Closeables . close ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 - verifyStatic ( Flushables . class , times ( 1 ) ) ; 
 - Flushables . flush ( any ( OutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 - } 
 - 
 - @ Test 
 public void testExceptionNoSuchAlgorithmException ( ) throws Exception { 
 final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 final String filePath = temporaryFolder . newFile ( ) . getPath ( ) ;

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 index c080b8c . . 6564d8f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 @ @ - 155 , 7 + 155 , 7 @ @ public final class MutableExceptionCheck extends AbstractFormatCheck { 
 final DetailAST extendsClause = ast . findFirstToken ( TokenTypes . EXTENDS _ CLAUSE ) ; 
 if ( extendsClause ! = null ) { 
 DetailAST currentNode = extendsClause ; 
 - while ( currentNode . getType ( ) ! = TokenTypes . IDENT ) { 
 + while ( currentNode . getLastChild ( ) ! = null ) { 
 currentNode = currentNode . getLastChild ( ) ; 
 } 
 final String extendedClassName = currentNode . getText ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 index af627a3 . . 3f44f53 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 @ @ - 35 , 6 + 35 , 18 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class MutableExceptionCheckTest extends BaseCheckTestSupport { 
 + 
 + @ Test 
 + public void testClassExtendsGenericClass ( ) throws Exception { 
 + DefaultConfiguration checkConfig = createCheckConfig ( MutableExceptionCheck . class ) ; 
 + 
 + String [ ] expected = { 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " design " + File . separator 
 + + " InputMutableExceptionClassExtendsGenericClass . java " ) , expected ) ; 
 + } 
 + 
 @ Test 
 public void testDefault ( ) throws Exception { 
 DefaultConfiguration checkConfig = createCheckConfig ( MutableExceptionCheck . class ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java 
 new file mode 100644 
 index 0000000 . . 931128e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . design ; 
 + 
 + import java . util . concurrent . atomic . AtomicReference ; 
 + 
 + / * * 
 + * Convenience class for holding an { @ link Exception } in a thread - safe way 
 + * / 
 + public class InputMutableExceptionClassExtendsGenericClass extends AtomicReference < Exception > { / / NPE is not expected 
 + 
 + private static final long serialVersionUID = 1L ; 
 + 
 + } 
 \ No newline at end of file
