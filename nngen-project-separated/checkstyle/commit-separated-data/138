BLEU SCORE: 0.03217409328795944

TEST MSG: minor : PackageObjectFactory stream refactoring
GENERATED MSG: Issue # 3778 : show exception when failed to instantiate class

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> index 72d9183 . . 42866e4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> @ @ - 24 , 11 + 24 , 12 @ @ import java . lang . reflect . Constructor ; <nl> import java . util . Collections ; <nl> import java . util . HashMap ; <nl> import java . util . LinkedHashSet ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> - import java . util . Optional ; <nl> import java . util . Set ; <nl> import java . util . stream . Collectors ; <nl> + import java . util . stream . Stream ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> @ @ - 159 , 8 + 160 , 7 @ @ public class PackageObjectFactory implements ModuleFactory { <nl> throw new IllegalArgumentException ( NULL _ PACKAGE _ MESSAGE ) ; <nl> } <nl> <nl> - packages = new LinkedHashSet < > ( 1 ) ; <nl> - packages . add ( packageName ) ; <nl> + packages = Collections . singleton ( packageName ) ; <nl> this . moduleClassLoader = moduleClassLoader ; <nl> } <nl> <nl> @ @ - 296 , 17 + 296 , 11 @ @ public class PackageObjectFactory implements ModuleFactory { <nl> Map < String , Set < String > > returnValue ; <nl> try { <nl> returnValue = ModuleReflectionUtil . getCheckstyleModules ( packages , loader ) . stream ( ) <nl> - . collect ( Collectors . toMap ( <nl> - Class : : getSimpleName , <nl> - cls - > Collections . singleton ( cls . getCanonicalName ( ) ) , <nl> - ( fullNames1 , fullNames2 ) - > { <nl> - final Set < String > mergedNames = new LinkedHashSet < > ( fullNames1 ) ; <nl> - mergedNames . addAll ( fullNames2 ) ; <nl> - return mergedNames ; <nl> - } ) ) ; <nl> + . collect ( Collectors . groupingBy ( Class : : getSimpleName , <nl> + Collectors . mapping ( Class : : getCanonicalName , Collectors . toSet ( ) ) ) ) ; <nl> } <nl> catch ( IOException ignore ) { <nl> - returnValue = new HashMap < > ( ) ; <nl> + returnValue = Collections . emptyMap ( ) ; <nl> } <nl> return returnValue ; <nl> } <nl> @ @ - 317 , 17 + 311 , 13 @ @ public class PackageObjectFactory implements ModuleFactory { <nl> * @ return simple check name . <nl> * / <nl> public static String getShortFromFullModuleNames ( String fullName ) { <nl> - String result = fullName ; <nl> - final Optional < Entry < String , String > > optional = NAME _ TO _ FULL _ MODULE _ NAME <nl> + return NAME _ TO _ FULL _ MODULE _ NAME <nl> . entrySet ( ) <nl> . stream ( ) <nl> . filter ( entry - > entry . getValue ( ) . equals ( fullName ) ) <nl> - . findFirst ( ) ; <nl> - if ( optional . isPresent ( ) ) { <nl> - result = optional . get ( ) . getKey ( ) ; <nl> - } <nl> - <nl> - return result ; <nl> + . map ( Entry : : getKey ) <nl> + . findFirst ( ) <nl> + . orElse ( fullName ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 382 , 12 + 372 , 10 @ @ public class PackageObjectFactory implements ModuleFactory { <nl> * @ throws CheckstyleException if an error occurs . <nl> * / <nl> private Object createModuleByTryInEachPackage ( String name ) throws CheckstyleException { <nl> - final Set < String > possibleNames = packages . stream ( ) <nl> - . map ( packageName - > packageName + PACKAGE _ SEPARATOR + name ) <nl> - . collect ( Collectors . toSet ( ) ) ; <nl> - possibleNames . addAll ( possibleNames . stream ( ) <nl> - . map ( possibleName - > possibleName + CHECK _ SUFFIX ) <nl> - . collect ( Collectors . toSet ( ) ) ) ; <nl> + final List < String > possibleNames = packages . stream ( ) <nl> + . map ( packageName - > packageName + PACKAGE _ SEPARATOR + name ) <nl> + . flatMap ( className - > Stream . of ( className , className + CHECK _ SUFFIX ) ) <nl> + . collect ( Collectors . toList ( ) ) ; <nl> Object instance = null ; <nl> for ( String possibleName : possibleNames ) { <nl> instance = createObject ( possibleName ) ;
NEAREST DIFF (one line): diff - - git a / . travis . yml b / . travis . yml <nl> old mode 100755 <nl> new mode 100644

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 index 72d9183 . . 42866e4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 @ @ - 24 , 11 + 24 , 12 @ @ import java . lang . reflect . Constructor ; 
 import java . util . Collections ; 
 import java . util . HashMap ; 
 import java . util . LinkedHashSet ; 
 + import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 - import java . util . Optional ; 
 import java . util . Set ; 
 import java . util . stream . Collectors ; 
 + import java . util . stream . Stream ; 
 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 @ @ - 159 , 8 + 160 , 7 @ @ public class PackageObjectFactory implements ModuleFactory { 
 throw new IllegalArgumentException ( NULL _ PACKAGE _ MESSAGE ) ; 
 } 
 
 - packages = new LinkedHashSet < > ( 1 ) ; 
 - packages . add ( packageName ) ; 
 + packages = Collections . singleton ( packageName ) ; 
 this . moduleClassLoader = moduleClassLoader ; 
 } 
 
 @ @ - 296 , 17 + 296 , 11 @ @ public class PackageObjectFactory implements ModuleFactory { 
 Map < String , Set < String > > returnValue ; 
 try { 
 returnValue = ModuleReflectionUtil . getCheckstyleModules ( packages , loader ) . stream ( ) 
 - . collect ( Collectors . toMap ( 
 - Class : : getSimpleName , 
 - cls - > Collections . singleton ( cls . getCanonicalName ( ) ) , 
 - ( fullNames1 , fullNames2 ) - > { 
 - final Set < String > mergedNames = new LinkedHashSet < > ( fullNames1 ) ; 
 - mergedNames . addAll ( fullNames2 ) ; 
 - return mergedNames ; 
 - } ) ) ; 
 + . collect ( Collectors . groupingBy ( Class : : getSimpleName , 
 + Collectors . mapping ( Class : : getCanonicalName , Collectors . toSet ( ) ) ) ) ; 
 } 
 catch ( IOException ignore ) { 
 - returnValue = new HashMap < > ( ) ; 
 + returnValue = Collections . emptyMap ( ) ; 
 } 
 return returnValue ; 
 } 
 @ @ - 317 , 17 + 311 , 13 @ @ public class PackageObjectFactory implements ModuleFactory { 
 * @ return simple check name . 
 * / 
 public static String getShortFromFullModuleNames ( String fullName ) { 
 - String result = fullName ; 
 - final Optional < Entry < String , String > > optional = NAME _ TO _ FULL _ MODULE _ NAME 
 + return NAME _ TO _ FULL _ MODULE _ NAME 
 . entrySet ( ) 
 . stream ( ) 
 . filter ( entry - > entry . getValue ( ) . equals ( fullName ) ) 
 - . findFirst ( ) ; 
 - if ( optional . isPresent ( ) ) { 
 - result = optional . get ( ) . getKey ( ) ; 
 - } 
 - 
 - return result ; 
 + . map ( Entry : : getKey ) 
 + . findFirst ( ) 
 + . orElse ( fullName ) ; 
 } 
 
 / * * 
 @ @ - 382 , 12 + 372 , 10 @ @ public class PackageObjectFactory implements ModuleFactory { 
 * @ throws CheckstyleException if an error occurs . 
 * / 
 private Object createModuleByTryInEachPackage ( String name ) throws CheckstyleException { 
 - final Set < String > possibleNames = packages . stream ( ) 
 - . map ( packageName - > packageName + PACKAGE _ SEPARATOR + name ) 
 - . collect ( Collectors . toSet ( ) ) ; 
 - possibleNames . addAll ( possibleNames . stream ( ) 
 - . map ( possibleName - > possibleName + CHECK _ SUFFIX ) 
 - . collect ( Collectors . toSet ( ) ) ) ; 
 + final List < String > possibleNames = packages . stream ( ) 
 + . map ( packageName - > packageName + PACKAGE _ SEPARATOR + name ) 
 + . flatMap ( className - > Stream . of ( className , className + CHECK _ SUFFIX ) ) 
 + . collect ( Collectors . toList ( ) ) ; 
 Object instance = null ; 
 for ( String possibleName : possibleNames ) { 
 instance = createObject ( possibleName ) ;

NEAREST DIFF:
diff - - git a / . travis . yml b / . travis . yml 
 old mode 100755 
 new mode 100644
