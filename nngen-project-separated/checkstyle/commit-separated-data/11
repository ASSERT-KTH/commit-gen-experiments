BLEU SCORE: 0.022421738634647265

TEST MSG: Issue # 6586 : aligned javadoc / xdoc for IllegalType
GENERATED MSG: Moved check documentation for duplicate code from javadoc back to xdocs , following agreement on dev list .

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> index 0f66bda . . 58e5045 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> @ @ - 34 , 46 + 34 , 36 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; <nl> <nl> / * * <nl> + * < p > <nl> * Checks that particular classes or interfaces are never used . <nl> - * <nl> - * < p > Rationale : <nl> - * Helps reduce coupling on concrete classes . <nl> - * <nl> - * < p > Check has following properties : <nl> - * <nl> - * < p > < b > illegalAbstractClassNameFormat < / b > - Pattern for illegal abstract class names . <nl> - * <nl> - * < p > < b > legalAbstractClassNames < / b > - Abstract classes that may be used as types . <nl> - * <nl> - * < p > < b > illegalClassNames < / b > - Classes that should not be used as types in variable <nl> - declarations , return values or parameters . <nl> + * < / p > <nl> + * < p > <nl> + * Rationale : Helps reduce coupling on concrete classes . <nl> + * < / p > <nl> + * < p > <nl> + * For additional restriction of type usage see also : <nl> + * < a href = " # IllegalInstantiation " > IllegalInstantiation < / a > , <nl> + * < a href = " config _ imports . html # IllegalImport " > IllegalImport < / a > <nl> + * < / p > <nl> + * < p > <nl> * It is possible to set illegal class names via short or <nl> - * < a href = " https : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 6 . html # jls - 6 . 7 " > <nl> - * canonical < / a > name . <nl> - * Specifying illegal type invokes analyzing imports and Check puts violations at <nl> - * corresponding declarations <nl> - * ( of variables , methods or parameters ) . This helps to avoid ambiguous cases , e . g . : <nl> - * <nl> - * < p > { @ code java . awt . List } was set as illegal class name , then , code like : <nl> - * <nl> - * < p > { @ code <nl> - * import java . util . List ; < br > <nl> - * . . . < br > <nl> + * < a href = " https : / / docs . oracle . com / javase / specs / jls / se11 / html / jls - 6 . html # jls - 6 . 7 " > canonical < / a > <nl> + * name . Specifying illegal type invokes analyzing imports and Check puts violations at <nl> + * corresponding declarations ( of variables , methods or parameters ) . <nl> + * This helps to avoid ambiguous cases , e . g . : { @ code java . awt . List } was set as <nl> + * illegal class name , then , code like : <nl> + * < / p > <nl> + * < pre > <nl> + * import java . util . List ; <nl> + * . . . <nl> * List list ; / / No violation here <nl> - * } <nl> - * <nl> - * < p > will be ok . <nl> - * <nl> - * < p > < b > validateAbstractClassNames < / b > - controls whether to validate abstract class names . <nl> - * Default value is < b > false < / b > <nl> + * < / pre > <nl> + * < p > <nl> + * will be ok . <nl> + * < / p > <nl> + * < p > <nl> + * In most cases it ' s justified to put following classes to < b > illegalClassNames < / b > : <nl> * < / p > <nl> - * <nl> - * < p > < b > ignoredMethodNames < / b > - Methods that should not be checked . <nl> - * <nl> - * < p > < b > memberModifiers < / b > - To check only methods and fields with any of the specified modifiers . <nl> - * This property does not affect method calls nor method references . <nl> - * <nl> - * < p > In most cases it ' s justified to put following classes to < b > illegalClassNames < / b > : <nl> * < ul > <nl> * < li > GregorianCalendar < / li > <nl> * < li > Hashtable < / li > <nl> @ @ - 81 , 10 + 71 , 112 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; <nl> * < li > LinkedList < / li > <nl> * < li > Vector < / li > <nl> * < / ul > <nl> - * <nl> - * < p > as methods that are differ from interface methods are rear used , so in most cases user will <nl> - * benefit from checking for them . <nl> + * < p > <nl> + * as methods that are differ from interface methods are rarely used , so in most cases user will <nl> + * benefit from checking for them . <nl> * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code validateAbstractClassNames } - Control whether to validate abstract class names . <nl> + * Default value is { @ code false } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code illegalClassNames } - Specify classes that should not be used as types <nl> + * in variable declarations , return values or parameters . <nl> + * Default value is { @ code LinkedHashSet , java . util . HashSet , java . util . LinkedHashMap , <nl> + * java . util . TreeMap , HashMap , TreeSet , java . util . HashMap , TreeMap , <nl> + * java . util . LinkedHashSet , java . util . TreeSet , HashSet , LinkedHashMap } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code legalAbstractClassNames } - Define abstract classes that may be used as types . <nl> + * Default value is { @ code { } } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code ignoredMethodNames } - Specify methods that should not be checked . <nl> + * Default value is { @ code getInitialContext , getEnvironment } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code illegalAbstractClassNameFormat } - Specify RegExp for illegal abstract class <nl> + * names . <nl> + * Default value is { @ code " ^ ( . * [ . ] ) ? Abstract . * $ " } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code memberModifiers } - Control whether to check only methods and fields with any <nl> + * of the specified modifiers . <nl> + * This property does not affect method calls nor method references . <nl> + * Default value is no tokens . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code tokens } - tokens to check <nl> + * Default value is : <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATION _ FIELD _ DEF " > <nl> + * ANNOTATION _ FIELD _ DEF < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # CLASS _ DEF " > <nl> + * CLASS _ DEF < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INTERFACE _ DEF " > <nl> + * INTERFACE _ DEF < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ CALL " > <nl> + * METHOD _ CALL < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > <nl> + * METHOD _ DEF < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ REF " > <nl> + * METHOD _ REF < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # PARAMETER _ DEF " > <nl> + * PARAMETER _ DEF < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # VARIABLE _ DEF " > <nl> + * VARIABLE _ DEF < / a > . <nl> + * < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * To configure the check so that it ignores getInstance ( ) methods : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; IllegalType & quot ; & gt ; <nl> + * & lt ; property name = & quot ; ignoredMethodNames & quot ; value = & quot ; getInstance & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the Check so that it verifies only public , protected or static methods and fields : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; IllegalType & quot ; & gt ; <nl> + * & lt ; property name = & quot ; memberModifiers & quot ; value = & quot ; LITERAL _ PUBLIC , <nl> + * LITERAL _ PROTECTED , LITERAL _ STATIC & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check so that it verifies usage of types Boolean and Foo : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; IllegalType & quot ; & gt ; <nl> + * & lt ; property name = & quot ; illegalClassNames & quot ; value = & quot ; Boolean , Foo & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < pre > <nl> + * public class Test { <nl> + * <nl> + * public Set & lt ; Boolean & gt ; set ; / / violation <nl> + * public java . util . List & lt ; Map & lt ; Boolean , Foo & gt ; & gt ; list ; / / violation <nl> + * <nl> + * private void method ( List & lt ; Foo & gt ; list , Boolean value ) { / / violation <nl> + * SomeType . & lt ; Boolean & gt ; foo ( ) ; / / violation <nl> + * final Consumer & lt ; Foo & gt ; consumer = Foo & lt ; Boolean & gt ; : : foo ; / / violation <nl> + * } <nl> + * <nl> + * public & lt ; T extends Boolean , U extends Serializable & gt ; void typeParam ( T a ) { } / / violation <nl> + * <nl> + * public void fullName ( java . util . ArrayList & lt ; ? super Boolean & gt ; a ) { } / / violation <nl> + * <nl> + * public abstract Set & lt ; Boolean & gt ; shortName ( Set & lt ; ? super Boolean & gt ; a ) ; / / violation <nl> + * <nl> + * public Set & lt ; ? extends Foo & gt ; typeArgument ( ) { / / violation <nl> + * return new TreeSet & lt ; Foo & lt ; Boolean & gt ; & gt ; ( ) ; <nl> + * } <nl> + * <nl> + * } <nl> + * < / pre > <nl> + * <nl> + * @ since 3 . 2 <nl> * <nl> * / <nl> @ FileStatefulCheck <nl> @ @ - 118 , 22 + 210 , 28 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> " getEnvironment " , <nl> } ; <nl> <nl> - / * * Illegal classes . * / <nl> + / * * <nl> + * Specify classes that should not be used as types in variable declarations , <nl> + * return values or parameters . <nl> + * / <nl> private final Set < String > illegalClassNames = new HashSet < > ( ) ; <nl> / * * Illegal short classes . * / <nl> private final Set < String > illegalShortClassNames = new HashSet < > ( ) ; <nl> - / * * Legal abstract classes . * / <nl> + / * * Define abstract classes that may be used as types . * / <nl> private final Set < String > legalAbstractClassNames = new HashSet < > ( ) ; <nl> - / * * Methods which should be ignored . * / <nl> + / * * Specify methods that should not be checked . * / <nl> private final Set < String > ignoredMethodNames = new HashSet < > ( ) ; <nl> - / * * Check methods and fields with only corresponding modifiers . * / <nl> + / * * <nl> + * Control whether to check only methods and fields with any of the specified modifiers . <nl> + * This property does not affect method calls nor method references . <nl> + * / <nl> private List < Integer > memberModifiers ; <nl> <nl> - / * * The regexp to match against . * / <nl> + / * * Specify RegExp for illegal abstract class names . * / <nl> private Pattern illegalAbstractClassNameFormat = Pattern . compile ( " ^ ( . * [ . ] ) ? Abstract . * $ " ) ; <nl> <nl> / * * <nl> - * Controls whether to validate abstract class names . <nl> + * Control whether to validate abstract class names . <nl> * / <nl> private boolean validateAbstractClassNames ; <nl> <nl> @ @ - 144 , 7 + 242 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Set the format for the specified regular expression . <nl> + * Setter to specify RegExp for illegal abstract class names . <nl> * @ param pattern a pattern . <nl> * / <nl> public void setIllegalAbstractClassNameFormat ( Pattern pattern ) { <nl> @ @ - 152 , 7 + 250 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Sets whether to validate abstract class names . <nl> + * Setter to control whether to validate abstract class names . <nl> * @ param validateAbstractClassNames whether abstract class names must be ignored . <nl> * / <nl> public void setValidateAbstractClassNames ( boolean validateAbstractClassNames ) { <nl> @ @ - 535 , 7 + 633 , 8 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Set the list of illegal variable types . <nl> + * Setter to specify classes that should not be used as types in variable declarations , <nl> + * return values or parameters . <nl> * @ param classNames array of illegal variable types <nl> * @ noinspection WeakerAccess <nl> * / <nl> @ @ - 545 , 7 + 644 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Set the list of ignore method names . <nl> + * Setter to specify methods that should not be checked . <nl> * @ param methodNames array of ignored method names <nl> * @ noinspection WeakerAccess <nl> * / <nl> @ @ - 555 , 7 + 654 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Set the list of legal abstract class names . <nl> + * Setter to define abstract classes that may be used as types . <nl> * @ param classNames array of legal abstract class names <nl> * @ noinspection WeakerAccess <nl> * / <nl> @ @ - 564 , 7 + 663 , 9 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Set the list of member modifiers ( of methods and fields ) which should be checked . <nl> + * Setter to control whether to check only methods and fields with any of <nl> + * the specified modifiers . <nl> + * This property does not affect method calls nor method references . <nl> * @ param modifiers String contains modifiers . <nl> * / <nl> public void setMemberModifiers ( String modifiers ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index ca1b6dc . . eb889e6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 96 , 6 + 96 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " IllegalInstantiation " , <nl> " IllegalThrows " , <nl> " IllegalTokenText " , <nl> + " IllegalType " , <nl> " ImportOrder " , <nl> " InnerAssignment " , <nl> " InterfaceMemberImpliedModifier " , <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 82786e4 . . 8ddb037 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 2078 , 8 + 2078 , 8 @ @ class SomeClass <nl> < / section > <nl> <nl> < section name = " IllegalType " > <nl> + < p > Since Checkstyle 3 . 2 < / p > <nl> < subsection name = " Description " id = " IllegalType _ Description " > <nl> - < p > Since Checkstyle 3 . 2 < / p > <nl> < p > <nl> Checks that particular classes or interfaces are never used . <nl> < / p > <nl> @ @ - 2089 , 7 + 2089 , 8 @ @ class SomeClass <nl> < / p > <nl> < p > <nl> For additional restriction of type usage see also : <nl> - < a href = " # IllegalInstantiation " > IllegalInstantiation < / a > , < a href = " config _ imports . html # IllegalImport " > IllegalImport < / a > <nl> + < a href = " # IllegalInstantiation " > IllegalInstantiation < / a > , <nl> + < a href = " config _ imports . html # IllegalImport " > IllegalImport < / a > <nl> < / p > <nl> < / subsection > <nl> <nl> @ @ - 2104 , 48 + 2105 , 53 @ @ class SomeClass <nl> < / tr > <nl> < tr > <nl> < td > validateAbstractClassNames < / td > <nl> - < td > Whether to validate abstract class names < / td > <nl> + < td > Control whether to validate abstract class names . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> - < td > false < / td > <nl> + < td > < code > false < / code > < / td > <nl> < td > 6 . 10 < / td > <nl> < / tr > <nl> < tr > <nl> < td > illegalClassNames < / td > <nl> - < td > Classes that should not be used as types in variable <nl> - declarations , return values or parameters < / td > <nl> + < td > Specify classes that should not be used as types in variable <nl> + declarations , return values or parameters . < / td > <nl> < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > <nl> - < td > LinkedHashSet , java . util . HashSet , java . util . LinkedHashMap , <nl> - java . util . TreeMap , HashMap , TreeSet , java . util . HashMap , TreeMap , <nl> - java . util . LinkedHashSet , java . util . TreeSet , HashSet , LinkedHashMap < / td > <nl> + < td > <nl> + < code > LinkedHashSet , java . util . HashSet , java . util . LinkedHashMap , <nl> + java . util . TreeMap , HashMap , TreeSet , java . util . HashMap , TreeMap , <nl> + java . util . LinkedHashSet , java . util . TreeSet , HashSet , LinkedHashMap < / code > <nl> + < / td > <nl> < td > 3 . 2 < / td > <nl> < / tr > <nl> < tr > <nl> < td > legalAbstractClassNames < / td > <nl> - < td > Abstract classes that may be used as types . < / td > <nl> + < td > Define abstract classes that may be used as types . < / td > <nl> < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > <nl> - < td > { } < / td > <nl> + < td > < code > { } < / code > < / td > <nl> < td > 4 . 2 < / td > <nl> < / tr > <nl> < tr > <nl> < td > ignoredMethodNames < / td > <nl> - < td > Methods that should not be checked . < / td > <nl> + < td > Specify methods that should not be checked . < / td > <nl> < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > <nl> - < td > getInitialContext , getEnvironment < / td > <nl> + < td > < code > getInitialContext , getEnvironment < / code > < / td > <nl> < td > 3 . 2 < / td > <nl> < / tr > <nl> < tr > <nl> < td > illegalAbstractClassNameFormat < / td > <nl> - < td > Pattern for illegal abstract class names . < / td > <nl> + < td > Specify RegExp for illegal abstract class names . < / td > <nl> < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td > <nl> < td > < code > " ^ ( . * [ . ] ) ? Abstract . * $ " < / code > < / td > <nl> < td > 3 . 2 < / td > <nl> < / tr > <nl> < tr > <nl> < td > memberModifiers < / td > <nl> - < td > To check only methods and fields with any of the specified modifiers . <nl> - This property does not affect method calls nor method references . < / td > <nl> + < td > <nl> + Control whether to check only methods and fields with any of the specified modifiers . <nl> + This property does not affect method calls nor method references . <nl> + < / td > <nl> < td > subset of tokens <nl> - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html " > TokenTypes < / a > < / td > <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html " > TokenTypes < / a > <nl> + < / td > <nl> < td > no tokens < / td > <nl> < td > 6 . 3 < / td > <nl> < / tr > <nl> @ @ - 2194 , 6 + 2200 , 40 @ @ class SomeClass <nl> < / table > <nl> < / subsection > <nl> <nl> + < subsection name = " Notes " id = " IllegalType _ Notes " > <nl> + < p > <nl> + It is possible to set illegal class names via short or <nl> + < a href = " https : / / docs . oracle . com / javase / specs / jls / se11 / html / jls - 6 . html # jls - 6 . 7 " > <nl> + canonical < / a > name . <nl> + Specifying illegal type invokes analyzing imports and Check puts violations at <nl> + corresponding declarations <nl> + ( of variables , methods or parameters ) . This helps to avoid ambiguous cases , e . g . : <nl> + < code > java . awt . List < / code > was set as illegal class name , then , code like : <nl> + < / p > <nl> + < pre > <nl> + import java . util . List ; <nl> + . . . <nl> + List list ; / / No violation here <nl> + < / pre > <nl> + < p > <nl> + will be ok . <nl> + < / p > <nl> + < p > <nl> + In most cases it ' s justified to put following classes to < b > illegalClassNames < / b > : <nl> + < / p > <nl> + < ul > <nl> + < li > GregorianCalendar < / li > <nl> + < li > Hashtable < / li > <nl> + < li > ArrayList < / li > <nl> + < li > LinkedList < / li > <nl> + < li > Vector < / li > <nl> + < / ul > <nl> + < p > <nl> + as methods that are differ from interface methods are rarely used , so in most cases user <nl> + will benefit from checking for them . <nl> + < / p > <nl> + < / subsection > <nl> + <nl> < subsection name = " Examples " id = " IllegalType _ Examples " > <nl> < p > <nl> To configure the check so that it ignores getInstance ( ) methods : <nl> @ @ - 2233 , 7 + 2273 , 7 @ @ public class Test { <nl> final Consumer & lt ; Foo & gt ; consumer = Foo & lt ; Boolean & gt ; : : foo ; / / violation <nl> } <nl> <nl> - public & lt ; T extends Boolean , U extends Serializable & gt ; void typeParameter ( T a ) { } / / violation <nl> + public & lt ; T extends Boolean , U extends Serializable & gt ; void typeParam ( T a ) { } / / violation <nl> <nl> public void fullName ( java . util . ArrayList & lt ; ? super Boolean & gt ; a ) { } / / violation <nl>
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java <nl> index 77b317e . . 58cd7a9 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . commons . logging . Log ; <nl> import org . apache . commons . logging . LogFactory ; <nl> <nl> / * * <nl> - * Checks for duplicate code . <nl> + * Checks for duplicate code that only differs by indentation . <nl> * <nl> * < p > <nl> * There are many approaches for detecting duplicate code . Some involve <nl> @ @ - 46 , 12 + 46 , 6 @ @ import org . apache . commons . logging . LogFactory ; <nl> * and variable names intact . Since we do not need to analyse a parse tree <nl> * our tool is not tied to a particular programming language . <nl> * < / p > <nl> - * < p > <nl> - * < a href = " http : / / www . redhillconsulting . com . au / products / simian / " > Simian < / a > <nl> - * is a very good commercial duplicate code detection tool . It comes with <nl> - * a Checkstyle module , so we encourage all users to evaluate Simian <nl> - * as an alternative to this check . <nl> - * < / p > <nl> * <nl> * @ author Lars K & uuml ; hne <nl> * /

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 index 0f66bda . . 58e5045 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 @ @ - 34 , 46 + 34 , 36 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; 
 
 / * * 
 + * < p > 
 * Checks that particular classes or interfaces are never used . 
 - * 
 - * < p > Rationale : 
 - * Helps reduce coupling on concrete classes . 
 - * 
 - * < p > Check has following properties : 
 - * 
 - * < p > < b > illegalAbstractClassNameFormat < / b > - Pattern for illegal abstract class names . 
 - * 
 - * < p > < b > legalAbstractClassNames < / b > - Abstract classes that may be used as types . 
 - * 
 - * < p > < b > illegalClassNames < / b > - Classes that should not be used as types in variable 
 - declarations , return values or parameters . 
 + * < / p > 
 + * < p > 
 + * Rationale : Helps reduce coupling on concrete classes . 
 + * < / p > 
 + * < p > 
 + * For additional restriction of type usage see also : 
 + * < a href = " # IllegalInstantiation " > IllegalInstantiation < / a > , 
 + * < a href = " config _ imports . html # IllegalImport " > IllegalImport < / a > 
 + * < / p > 
 + * < p > 
 * It is possible to set illegal class names via short or 
 - * < a href = " https : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 6 . html # jls - 6 . 7 " > 
 - * canonical < / a > name . 
 - * Specifying illegal type invokes analyzing imports and Check puts violations at 
 - * corresponding declarations 
 - * ( of variables , methods or parameters ) . This helps to avoid ambiguous cases , e . g . : 
 - * 
 - * < p > { @ code java . awt . List } was set as illegal class name , then , code like : 
 - * 
 - * < p > { @ code 
 - * import java . util . List ; < br > 
 - * . . . < br > 
 + * < a href = " https : / / docs . oracle . com / javase / specs / jls / se11 / html / jls - 6 . html # jls - 6 . 7 " > canonical < / a > 
 + * name . Specifying illegal type invokes analyzing imports and Check puts violations at 
 + * corresponding declarations ( of variables , methods or parameters ) . 
 + * This helps to avoid ambiguous cases , e . g . : { @ code java . awt . List } was set as 
 + * illegal class name , then , code like : 
 + * < / p > 
 + * < pre > 
 + * import java . util . List ; 
 + * . . . 
 * List list ; / / No violation here 
 - * } 
 - * 
 - * < p > will be ok . 
 - * 
 - * < p > < b > validateAbstractClassNames < / b > - controls whether to validate abstract class names . 
 - * Default value is < b > false < / b > 
 + * < / pre > 
 + * < p > 
 + * will be ok . 
 + * < / p > 
 + * < p > 
 + * In most cases it ' s justified to put following classes to < b > illegalClassNames < / b > : 
 * < / p > 
 - * 
 - * < p > < b > ignoredMethodNames < / b > - Methods that should not be checked . 
 - * 
 - * < p > < b > memberModifiers < / b > - To check only methods and fields with any of the specified modifiers . 
 - * This property does not affect method calls nor method references . 
 - * 
 - * < p > In most cases it ' s justified to put following classes to < b > illegalClassNames < / b > : 
 * < ul > 
 * < li > GregorianCalendar < / li > 
 * < li > Hashtable < / li > 
 @ @ - 81 , 10 + 71 , 112 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; 
 * < li > LinkedList < / li > 
 * < li > Vector < / li > 
 * < / ul > 
 - * 
 - * < p > as methods that are differ from interface methods are rear used , so in most cases user will 
 - * benefit from checking for them . 
 + * < p > 
 + * as methods that are differ from interface methods are rarely used , so in most cases user will 
 + * benefit from checking for them . 
 * < / p > 
 + * < ul > 
 + * < li > 
 + * Property { @ code validateAbstractClassNames } - Control whether to validate abstract class names . 
 + * Default value is { @ code false } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code illegalClassNames } - Specify classes that should not be used as types 
 + * in variable declarations , return values or parameters . 
 + * Default value is { @ code LinkedHashSet , java . util . HashSet , java . util . LinkedHashMap , 
 + * java . util . TreeMap , HashMap , TreeSet , java . util . HashMap , TreeMap , 
 + * java . util . LinkedHashSet , java . util . TreeSet , HashSet , LinkedHashMap } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code legalAbstractClassNames } - Define abstract classes that may be used as types . 
 + * Default value is { @ code { } } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code ignoredMethodNames } - Specify methods that should not be checked . 
 + * Default value is { @ code getInitialContext , getEnvironment } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code illegalAbstractClassNameFormat } - Specify RegExp for illegal abstract class 
 + * names . 
 + * Default value is { @ code " ^ ( . * [ . ] ) ? Abstract . * $ " } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code memberModifiers } - Control whether to check only methods and fields with any 
 + * of the specified modifiers . 
 + * This property does not affect method calls nor method references . 
 + * Default value is no tokens . 
 + * < / li > 
 + * < li > 
 + * Property { @ code tokens } - tokens to check 
 + * Default value is : 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATION _ FIELD _ DEF " > 
 + * ANNOTATION _ FIELD _ DEF < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # CLASS _ DEF " > 
 + * CLASS _ DEF < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INTERFACE _ DEF " > 
 + * INTERFACE _ DEF < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ CALL " > 
 + * METHOD _ CALL < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > 
 + * METHOD _ DEF < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ REF " > 
 + * METHOD _ REF < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # PARAMETER _ DEF " > 
 + * PARAMETER _ DEF < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # VARIABLE _ DEF " > 
 + * VARIABLE _ DEF < / a > . 
 + * < / li > 
 + * < / ul > 
 + * < p > 
 + * To configure the check so that it ignores getInstance ( ) methods : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; IllegalType & quot ; & gt ; 
 + * & lt ; property name = & quot ; ignoredMethodNames & quot ; value = & quot ; getInstance & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the Check so that it verifies only public , protected or static methods and fields : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; IllegalType & quot ; & gt ; 
 + * & lt ; property name = & quot ; memberModifiers & quot ; value = & quot ; LITERAL _ PUBLIC , 
 + * LITERAL _ PROTECTED , LITERAL _ STATIC & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check so that it verifies usage of types Boolean and Foo : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; IllegalType & quot ; & gt ; 
 + * & lt ; property name = & quot ; illegalClassNames & quot ; value = & quot ; Boolean , Foo & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < pre > 
 + * public class Test { 
 + * 
 + * public Set & lt ; Boolean & gt ; set ; / / violation 
 + * public java . util . List & lt ; Map & lt ; Boolean , Foo & gt ; & gt ; list ; / / violation 
 + * 
 + * private void method ( List & lt ; Foo & gt ; list , Boolean value ) { / / violation 
 + * SomeType . & lt ; Boolean & gt ; foo ( ) ; / / violation 
 + * final Consumer & lt ; Foo & gt ; consumer = Foo & lt ; Boolean & gt ; : : foo ; / / violation 
 + * } 
 + * 
 + * public & lt ; T extends Boolean , U extends Serializable & gt ; void typeParam ( T a ) { } / / violation 
 + * 
 + * public void fullName ( java . util . ArrayList & lt ; ? super Boolean & gt ; a ) { } / / violation 
 + * 
 + * public abstract Set & lt ; Boolean & gt ; shortName ( Set & lt ; ? super Boolean & gt ; a ) ; / / violation 
 + * 
 + * public Set & lt ; ? extends Foo & gt ; typeArgument ( ) { / / violation 
 + * return new TreeSet & lt ; Foo & lt ; Boolean & gt ; & gt ; ( ) ; 
 + * } 
 + * 
 + * } 
 + * < / pre > 
 + * 
 + * @ since 3 . 2 
 * 
 * / 
 @ FileStatefulCheck 
 @ @ - 118 , 22 + 210 , 28 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 " getEnvironment " , 
 } ; 
 
 - / * * Illegal classes . * / 
 + / * * 
 + * Specify classes that should not be used as types in variable declarations , 
 + * return values or parameters . 
 + * / 
 private final Set < String > illegalClassNames = new HashSet < > ( ) ; 
 / * * Illegal short classes . * / 
 private final Set < String > illegalShortClassNames = new HashSet < > ( ) ; 
 - / * * Legal abstract classes . * / 
 + / * * Define abstract classes that may be used as types . * / 
 private final Set < String > legalAbstractClassNames = new HashSet < > ( ) ; 
 - / * * Methods which should be ignored . * / 
 + / * * Specify methods that should not be checked . * / 
 private final Set < String > ignoredMethodNames = new HashSet < > ( ) ; 
 - / * * Check methods and fields with only corresponding modifiers . * / 
 + / * * 
 + * Control whether to check only methods and fields with any of the specified modifiers . 
 + * This property does not affect method calls nor method references . 
 + * / 
 private List < Integer > memberModifiers ; 
 
 - / * * The regexp to match against . * / 
 + / * * Specify RegExp for illegal abstract class names . * / 
 private Pattern illegalAbstractClassNameFormat = Pattern . compile ( " ^ ( . * [ . ] ) ? Abstract . * $ " ) ; 
 
 / * * 
 - * Controls whether to validate abstract class names . 
 + * Control whether to validate abstract class names . 
 * / 
 private boolean validateAbstractClassNames ; 
 
 @ @ - 144 , 7 + 242 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Set the format for the specified regular expression . 
 + * Setter to specify RegExp for illegal abstract class names . 
 * @ param pattern a pattern . 
 * / 
 public void setIllegalAbstractClassNameFormat ( Pattern pattern ) { 
 @ @ - 152 , 7 + 250 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Sets whether to validate abstract class names . 
 + * Setter to control whether to validate abstract class names . 
 * @ param validateAbstractClassNames whether abstract class names must be ignored . 
 * / 
 public void setValidateAbstractClassNames ( boolean validateAbstractClassNames ) { 
 @ @ - 535 , 7 + 633 , 8 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Set the list of illegal variable types . 
 + * Setter to specify classes that should not be used as types in variable declarations , 
 + * return values or parameters . 
 * @ param classNames array of illegal variable types 
 * @ noinspection WeakerAccess 
 * / 
 @ @ - 545 , 7 + 644 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Set the list of ignore method names . 
 + * Setter to specify methods that should not be checked . 
 * @ param methodNames array of ignored method names 
 * @ noinspection WeakerAccess 
 * / 
 @ @ - 555 , 7 + 654 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Set the list of legal abstract class names . 
 + * Setter to define abstract classes that may be used as types . 
 * @ param classNames array of legal abstract class names 
 * @ noinspection WeakerAccess 
 * / 
 @ @ - 564 , 7 + 663 , 9 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Set the list of member modifiers ( of methods and fields ) which should be checked . 
 + * Setter to control whether to check only methods and fields with any of 
 + * the specified modifiers . 
 + * This property does not affect method calls nor method references . 
 * @ param modifiers String contains modifiers . 
 * / 
 public void setMemberModifiers ( String modifiers ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index ca1b6dc . . eb889e6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 96 , 6 + 96 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " IllegalInstantiation " , 
 " IllegalThrows " , 
 " IllegalTokenText " , 
 + " IllegalType " , 
 " ImportOrder " , 
 " InnerAssignment " , 
 " InterfaceMemberImpliedModifier " , 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 82786e4 . . 8ddb037 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 2078 , 8 + 2078 , 8 @ @ class SomeClass 
 < / section > 
 
 < section name = " IllegalType " > 
 + < p > Since Checkstyle 3 . 2 < / p > 
 < subsection name = " Description " id = " IllegalType _ Description " > 
 - < p > Since Checkstyle 3 . 2 < / p > 
 < p > 
 Checks that particular classes or interfaces are never used . 
 < / p > 
 @ @ - 2089 , 7 + 2089 , 8 @ @ class SomeClass 
 < / p > 
 < p > 
 For additional restriction of type usage see also : 
 - < a href = " # IllegalInstantiation " > IllegalInstantiation < / a > , < a href = " config _ imports . html # IllegalImport " > IllegalImport < / a > 
 + < a href = " # IllegalInstantiation " > IllegalInstantiation < / a > , 
 + < a href = " config _ imports . html # IllegalImport " > IllegalImport < / a > 
 < / p > 
 < / subsection > 
 
 @ @ - 2104 , 48 + 2105 , 53 @ @ class SomeClass 
 < / tr > 
 < tr > 
 < td > validateAbstractClassNames < / td > 
 - < td > Whether to validate abstract class names < / td > 
 + < td > Control whether to validate abstract class names . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 - < td > false < / td > 
 + < td > < code > false < / code > < / td > 
 < td > 6 . 10 < / td > 
 < / tr > 
 < tr > 
 < td > illegalClassNames < / td > 
 - < td > Classes that should not be used as types in variable 
 - declarations , return values or parameters < / td > 
 + < td > Specify classes that should not be used as types in variable 
 + declarations , return values or parameters . < / td > 
 < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > 
 - < td > LinkedHashSet , java . util . HashSet , java . util . LinkedHashMap , 
 - java . util . TreeMap , HashMap , TreeSet , java . util . HashMap , TreeMap , 
 - java . util . LinkedHashSet , java . util . TreeSet , HashSet , LinkedHashMap < / td > 
 + < td > 
 + < code > LinkedHashSet , java . util . HashSet , java . util . LinkedHashMap , 
 + java . util . TreeMap , HashMap , TreeSet , java . util . HashMap , TreeMap , 
 + java . util . LinkedHashSet , java . util . TreeSet , HashSet , LinkedHashMap < / code > 
 + < / td > 
 < td > 3 . 2 < / td > 
 < / tr > 
 < tr > 
 < td > legalAbstractClassNames < / td > 
 - < td > Abstract classes that may be used as types . < / td > 
 + < td > Define abstract classes that may be used as types . < / td > 
 < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > 
 - < td > { } < / td > 
 + < td > < code > { } < / code > < / td > 
 < td > 4 . 2 < / td > 
 < / tr > 
 < tr > 
 < td > ignoredMethodNames < / td > 
 - < td > Methods that should not be checked . < / td > 
 + < td > Specify methods that should not be checked . < / td > 
 < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > 
 - < td > getInitialContext , getEnvironment < / td > 
 + < td > < code > getInitialContext , getEnvironment < / code > < / td > 
 < td > 3 . 2 < / td > 
 < / tr > 
 < tr > 
 < td > illegalAbstractClassNameFormat < / td > 
 - < td > Pattern for illegal abstract class names . < / td > 
 + < td > Specify RegExp for illegal abstract class names . < / td > 
 < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td > 
 < td > < code > " ^ ( . * [ . ] ) ? Abstract . * $ " < / code > < / td > 
 < td > 3 . 2 < / td > 
 < / tr > 
 < tr > 
 < td > memberModifiers < / td > 
 - < td > To check only methods and fields with any of the specified modifiers . 
 - This property does not affect method calls nor method references . < / td > 
 + < td > 
 + Control whether to check only methods and fields with any of the specified modifiers . 
 + This property does not affect method calls nor method references . 
 + < / td > 
 < td > subset of tokens 
 - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html " > TokenTypes < / a > < / td > 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html " > TokenTypes < / a > 
 + < / td > 
 < td > no tokens < / td > 
 < td > 6 . 3 < / td > 
 < / tr > 
 @ @ - 2194 , 6 + 2200 , 40 @ @ class SomeClass 
 < / table > 
 < / subsection > 
 
 + < subsection name = " Notes " id = " IllegalType _ Notes " > 
 + < p > 
 + It is possible to set illegal class names via short or 
 + < a href = " https : / / docs . oracle . com / javase / specs / jls / se11 / html / jls - 6 . html # jls - 6 . 7 " > 
 + canonical < / a > name . 
 + Specifying illegal type invokes analyzing imports and Check puts violations at 
 + corresponding declarations 
 + ( of variables , methods or parameters ) . This helps to avoid ambiguous cases , e . g . : 
 + < code > java . awt . List < / code > was set as illegal class name , then , code like : 
 + < / p > 
 + < pre > 
 + import java . util . List ; 
 + . . . 
 + List list ; / / No violation here 
 + < / pre > 
 + < p > 
 + will be ok . 
 + < / p > 
 + < p > 
 + In most cases it ' s justified to put following classes to < b > illegalClassNames < / b > : 
 + < / p > 
 + < ul > 
 + < li > GregorianCalendar < / li > 
 + < li > Hashtable < / li > 
 + < li > ArrayList < / li > 
 + < li > LinkedList < / li > 
 + < li > Vector < / li > 
 + < / ul > 
 + < p > 
 + as methods that are differ from interface methods are rarely used , so in most cases user 
 + will benefit from checking for them . 
 + < / p > 
 + < / subsection > 
 + 
 < subsection name = " Examples " id = " IllegalType _ Examples " > 
 < p > 
 To configure the check so that it ignores getInstance ( ) methods : 
 @ @ - 2233 , 7 + 2273 , 7 @ @ public class Test { 
 final Consumer & lt ; Foo & gt ; consumer = Foo & lt ; Boolean & gt ; : : foo ; / / violation 
 } 
 
 - public & lt ; T extends Boolean , U extends Serializable & gt ; void typeParameter ( T a ) { } / / violation 
 + public & lt ; T extends Boolean , U extends Serializable & gt ; void typeParam ( T a ) { } / / violation 
 
 public void fullName ( java . util . ArrayList & lt ; ? super Boolean & gt ; a ) { } / / violation 


NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java 
 index 77b317e . . 58cd7a9 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . commons . logging . Log ; 
 import org . apache . commons . logging . LogFactory ; 
 
 / * * 
 - * Checks for duplicate code . 
 + * Checks for duplicate code that only differs by indentation . 
 * 
 * < p > 
 * There are many approaches for detecting duplicate code . Some involve 
 @ @ - 46 , 12 + 46 , 6 @ @ import org . apache . commons . logging . LogFactory ; 
 * and variable names intact . Since we do not need to analyse a parse tree 
 * our tool is not tied to a particular programming language . 
 * < / p > 
 - * < p > 
 - * < a href = " http : / / www . redhillconsulting . com . au / products / simian / " > Simian < / a > 
 - * is a very good commercial duplicate code detection tool . It comes with 
 - * a Checkstyle module , so we encourage all users to evaluate Simian 
 - * as an alternative to this check . 
 - * < / p > 
 * 
 * @ author Lars K & uuml ; hne 
 * /
