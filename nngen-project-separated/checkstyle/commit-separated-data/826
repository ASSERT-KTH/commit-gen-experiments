BLEU SCORE: 0.04753622060013115

TEST MSG: Issue # 4165 : Split and Organize Checkstyle inputs by Test for checks in coding package : MagicNumber
GENERATED MSG: Issue # 2161 : unify test input locations

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java <nl> index 410e8e4 . . faf746a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java <nl> @ @ - 36 , 7 + 36 , 9 @ @ public class InnerAssignmentCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " innerassignment " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputInnerAssignment . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputInnerAssignment . java <nl> deleted file mode 100644 <nl> index 31949be . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputInnerAssignment . java <nl> + + + / dev / null <nl> @ @ - 1 , 102 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - import java . io . FileInputStream ; <nl> - import java . io . IOException ; <nl> - import java . util . jar . JarInputStream ; <nl> - import java . util . jar . Manifest ; <nl> - <nl> - public class InputInnerAssignment <nl> - { <nl> - void innerAssignments ( ) <nl> - { <nl> - int a ; <nl> - int b ; <nl> - int c ; <nl> - <nl> - a = b = c = 1 ; / / flag two inner assignments <nl> - <nl> - String s = Integer . toString ( b = 2 ) ; / / flag inner assignment <nl> - <nl> - Integer i = new Integer ( a + = 5 ) ; / / flag inner assigment <nl> - <nl> - c = b + + ; / / common practice , don ' t flag <nl> - / / even though technically an assigment to b <nl> - <nl> - for ( int j = 0 ; j < 6 ; j + = 2 ) { / / common practice , don ' t flag <nl> - a + = j ; <nl> - } <nl> - } <nl> - <nl> - public void demoBug1195047Comment3 ( ) <nl> - { <nl> - / / inner assignment should flag all assignments to b or bb but none of those to i or j <nl> - int y = 1 ; <nl> - int b = 0 ; <nl> - boolean bb ; <nl> - int i ; <nl> - <nl> - if ( bb = false ) { } <nl> - for ( i = 0 ; bb = false ; i = i + 1 ) { } <nl> - while ( bb = false ) { } <nl> - if ( ( bb = false ) ) { } <nl> - for ( int j = 0 ; ( bb = false ) ; j + = 1 ) { } <nl> - while ( ( bb = false ) ) { } <nl> - i = ( bb = false ) ? ( b = 2 ) : ( b + = 1 ) ; <nl> - i = ( b + = 1 ) + ( b - = 1 ) ; <nl> - do { i + = 1 ; } while ( bb = false ) ; <nl> - } <nl> - <nl> - public static void demoInputStreamIdiom ( java . io . InputStream is ) throws java . io . IOException <nl> - { <nl> - int b ; <nl> - while ( ( b = is . read ( ) ) ! = - 1 ) / / common idiom to avoid clumsy loop control logic , don ' t flag ( make configurable later ) <nl> - { <nl> - / / work with b <nl> - } <nl> - } <nl> - <nl> - public static void demoNoBrace ( ) <nl> - { <nl> - / / code that doesn ' t contain braces around conditional code <nl> - / / results in a parse tree without SLISTs <nl> - / / no assignement should be flagged here <nl> - int sum = 0 ; <nl> - <nl> - for ( int i = 0 ; i < 3 ; i + + ) <nl> - sum = sum + i ; <nl> - <nl> - if ( sum > 4 ) <nl> - sum + = 2 ; <nl> - else if ( sum < 2 ) <nl> - sum + = 1 ; <nl> - else <nl> - sum + = 100 ; <nl> - <nl> - while ( sum > 4 ) <nl> - sum - = 1 ; <nl> - <nl> - do <nl> - sum = sum + 1 ; <nl> - while ( sum < 6 ) ; <nl> - } <nl> - <nl> - @ SuppressWarnings ( value = " unchecked " ) <nl> - public java . util . Collection < Object > allParams ( ) { <nl> - java . util . ArrayList params = new java . util . ArrayList ( ) ; <nl> - params . add ( " one " ) ; <nl> - params . add ( " two " ) ; <nl> - return params ; <nl> - } <nl> - <nl> - / / Taken from JDK7 java . lang . Package src code . <nl> - private static Manifest loadManifest ( String fn ) { <nl> - try ( FileInputStream fis = new FileInputStream ( fn ) ; <nl> - 	 JarInputStream jis = new JarInputStream ( fis , false ) ) <nl> - { <nl> - return jis . getManifest ( ) ; <nl> - } catch ( IOException e ) <nl> - { <nl> - return null ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputInnerAssignmentLambdaExpressions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputInnerAssignmentLambdaExpressions . java <nl> deleted file mode 100644 <nl> index 1df8024 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputInnerAssignmentLambdaExpressions . java <nl> + + + / dev / null <nl> @ @ - 1 , 18 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - import java . util . function . Supplier ; <nl> - <nl> - <nl> - public class InputInnerAssignmentLambdaExpressions { <nl> - interface MyLambda { <nl> - void e ( Object e ) ; <nl> - } <nl> - private static class MyButton { <nl> - public void setOnAction ( MyLambda my ) { <nl> - } <nl> - } <nl> - private void setAction ( ) { <nl> - MyButton button = new MyButton ( ) ; <nl> - button . setOnAction ( e - > { boolean pressed = true ; } ) ; / / No violation here <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java <nl> new file mode 100644 <nl> index 0000000 . . abe21ee <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java <nl> @ @ - 0 , 0 + 1 , 102 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . innerassignment ; <nl> + <nl> + import java . io . FileInputStream ; <nl> + import java . io . IOException ; <nl> + import java . util . jar . JarInputStream ; <nl> + import java . util . jar . Manifest ; <nl> + <nl> + public class InputInnerAssignment <nl> + { <nl> + void innerAssignments ( ) <nl> + { <nl> + int a ; <nl> + int b ; <nl> + int c ; <nl> + <nl> + a = b = c = 1 ; / / flag two inner assignments <nl> + <nl> + String s = Integer . toString ( b = 2 ) ; / / flag inner assignment <nl> + <nl> + Integer i = new Integer ( a + = 5 ) ; / / flag inner assigment <nl> + <nl> + c = b + + ; / / common practice , don ' t flag <nl> + / / even though technically an assigment to b <nl> + <nl> + for ( int j = 0 ; j < 6 ; j + = 2 ) { / / common practice , don ' t flag <nl> + a + = j ; <nl> + } <nl> + } <nl> + <nl> + public void demoBug1195047Comment3 ( ) <nl> + { <nl> + / / inner assignment should flag all assignments to b or bb but none of those to i or j <nl> + int y = 1 ; <nl> + int b = 0 ; <nl> + boolean bb ; <nl> + int i ; <nl> + <nl> + if ( bb = false ) { } <nl> + for ( i = 0 ; bb = false ; i = i + 1 ) { } <nl> + while ( bb = false ) { } <nl> + if ( ( bb = false ) ) { } <nl> + for ( int j = 0 ; ( bb = false ) ; j + = 1 ) { } <nl> + while ( ( bb = false ) ) { } <nl> + i = ( bb = false ) ? ( b = 2 ) : ( b + = 1 ) ; <nl> + i = ( b + = 1 ) + ( b - = 1 ) ; <nl> + do { i + = 1 ; } while ( bb = false ) ; <nl> + } <nl> + <nl> + public static void demoInputStreamIdiom ( java . io . InputStream is ) throws java . io . IOException <nl> + { <nl> + int b ; <nl> + while ( ( b = is . read ( ) ) ! = - 1 ) / / common idiom to avoid clumsy loop control logic , don ' t flag ( make configurable later ) <nl> + { <nl> + / / work with b <nl> + } <nl> + } <nl> + <nl> + public static void demoNoBrace ( ) <nl> + { <nl> + / / code that doesn ' t contain braces around conditional code <nl> + / / results in a parse tree without SLISTs <nl> + / / no assignement should be flagged here <nl> + int sum = 0 ; <nl> + <nl> + for ( int i = 0 ; i < 3 ; i + + ) <nl> + sum = sum + i ; <nl> + <nl> + if ( sum > 4 ) <nl> + sum + = 2 ; <nl> + else if ( sum < 2 ) <nl> + sum + = 1 ; <nl> + else <nl> + sum + = 100 ; <nl> + <nl> + while ( sum > 4 ) <nl> + sum - = 1 ; <nl> + <nl> + do <nl> + sum = sum + 1 ; <nl> + while ( sum < 6 ) ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( value = " unchecked " ) <nl> + public java . util . Collection < Object > allParams ( ) { <nl> + java . util . ArrayList params = new java . util . ArrayList ( ) ; <nl> + params . add ( " one " ) ; <nl> + params . add ( " two " ) ; <nl> + return params ; <nl> + } <nl> + <nl> + / / Taken from JDK7 java . lang . Package src code . <nl> + private static Manifest loadManifest ( String fn ) { <nl> + try ( FileInputStream fis = new FileInputStream ( fn ) ; <nl> + 	 JarInputStream jis = new JarInputStream ( fis , false ) ) <nl> + { <nl> + return jis . getManifest ( ) ; <nl> + } catch ( IOException e ) <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignmentLambdaExpressions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignmentLambdaExpressions . java <nl> new file mode 100644 <nl> index 0000000 . . 6cb4143 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignmentLambdaExpressions . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . innerassignment ; <nl> + <nl> + import java . util . function . Supplier ; <nl> + <nl> + <nl> + public class InputInnerAssignmentLambdaExpressions { <nl> + interface MyLambda { <nl> + void e ( Object e ) ; <nl> + } <nl> + private static class MyButton { <nl> + public void setOnAction ( MyLambda my ) { <nl> + } <nl> + } <nl> + private void setAction ( ) { <nl> + MyButton button = new MyButton ( ) ; <nl> + button . setOnAction ( e - > { boolean pressed = true ; } ) ; / / No violation here <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> index 9af22a9 . . 2cdac81 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { <nl> } <nl> <nl> private static List < RevCommit > getCommitsToCheck ( ) throws Exception { <nl> - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; <nl> - <nl> - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> List < RevCommit > commits ; <nl> - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> - } <nl> - else { <nl> - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { <nl> + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> + else { <nl> + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> } <nl> return commits ; <nl> } <nl> @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { <nl> <nl> private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { <nl> RevCommitsPair revCommitIteratorPair ; <nl> - try { <nl> + <nl> + try ( RevWalk revWalk = new RevWalk ( repo ) ) { <nl> Iterator < RevCommit > first ; <nl> Iterator < RevCommit > second ; <nl> - <nl> - RevWalk revWalk = new RevWalk ( repo ) ; <nl> - <nl> ObjectId headId = repo . resolve ( Constants . HEAD ) ; <nl> RevCommit headCommit = revWalk . parseCommit ( headId ) ; <nl> <nl> @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { <nl> RevCommit firstParent = headCommit . getParent ( 0 ) ; <nl> RevCommit secondParent = headCommit . getParent ( 1 ) ; <nl> <nl> - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + } <nl> } <nl> else { <nl> - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . call ( ) . iterator ( ) ; <nl> + } <nl> second = Collections . emptyIterator ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java 
 index 410e8e4 . . faf746a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java 
 @ @ - 36 , 7 + 36 , 9 @ @ public class InnerAssignmentCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " innerassignment " + File . separator 
 + + filename ) ; 
 } 
 
 @ Override 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputInnerAssignment . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputInnerAssignment . java 
 deleted file mode 100644 
 index 31949be . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputInnerAssignment . java 
 + + + / dev / null 
 @ @ - 1 , 102 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - import java . io . FileInputStream ; 
 - import java . io . IOException ; 
 - import java . util . jar . JarInputStream ; 
 - import java . util . jar . Manifest ; 
 - 
 - public class InputInnerAssignment 
 - { 
 - void innerAssignments ( ) 
 - { 
 - int a ; 
 - int b ; 
 - int c ; 
 - 
 - a = b = c = 1 ; / / flag two inner assignments 
 - 
 - String s = Integer . toString ( b = 2 ) ; / / flag inner assignment 
 - 
 - Integer i = new Integer ( a + = 5 ) ; / / flag inner assigment 
 - 
 - c = b + + ; / / common practice , don ' t flag 
 - / / even though technically an assigment to b 
 - 
 - for ( int j = 0 ; j < 6 ; j + = 2 ) { / / common practice , don ' t flag 
 - a + = j ; 
 - } 
 - } 
 - 
 - public void demoBug1195047Comment3 ( ) 
 - { 
 - / / inner assignment should flag all assignments to b or bb but none of those to i or j 
 - int y = 1 ; 
 - int b = 0 ; 
 - boolean bb ; 
 - int i ; 
 - 
 - if ( bb = false ) { } 
 - for ( i = 0 ; bb = false ; i = i + 1 ) { } 
 - while ( bb = false ) { } 
 - if ( ( bb = false ) ) { } 
 - for ( int j = 0 ; ( bb = false ) ; j + = 1 ) { } 
 - while ( ( bb = false ) ) { } 
 - i = ( bb = false ) ? ( b = 2 ) : ( b + = 1 ) ; 
 - i = ( b + = 1 ) + ( b - = 1 ) ; 
 - do { i + = 1 ; } while ( bb = false ) ; 
 - } 
 - 
 - public static void demoInputStreamIdiom ( java . io . InputStream is ) throws java . io . IOException 
 - { 
 - int b ; 
 - while ( ( b = is . read ( ) ) ! = - 1 ) / / common idiom to avoid clumsy loop control logic , don ' t flag ( make configurable later ) 
 - { 
 - / / work with b 
 - } 
 - } 
 - 
 - public static void demoNoBrace ( ) 
 - { 
 - / / code that doesn ' t contain braces around conditional code 
 - / / results in a parse tree without SLISTs 
 - / / no assignement should be flagged here 
 - int sum = 0 ; 
 - 
 - for ( int i = 0 ; i < 3 ; i + + ) 
 - sum = sum + i ; 
 - 
 - if ( sum > 4 ) 
 - sum + = 2 ; 
 - else if ( sum < 2 ) 
 - sum + = 1 ; 
 - else 
 - sum + = 100 ; 
 - 
 - while ( sum > 4 ) 
 - sum - = 1 ; 
 - 
 - do 
 - sum = sum + 1 ; 
 - while ( sum < 6 ) ; 
 - } 
 - 
 - @ SuppressWarnings ( value = " unchecked " ) 
 - public java . util . Collection < Object > allParams ( ) { 
 - java . util . ArrayList params = new java . util . ArrayList ( ) ; 
 - params . add ( " one " ) ; 
 - params . add ( " two " ) ; 
 - return params ; 
 - } 
 - 
 - / / Taken from JDK7 java . lang . Package src code . 
 - private static Manifest loadManifest ( String fn ) { 
 - try ( FileInputStream fis = new FileInputStream ( fn ) ; 
 - 	 JarInputStream jis = new JarInputStream ( fis , false ) ) 
 - { 
 - return jis . getManifest ( ) ; 
 - } catch ( IOException e ) 
 - { 
 - return null ; 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputInnerAssignmentLambdaExpressions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputInnerAssignmentLambdaExpressions . java 
 deleted file mode 100644 
 index 1df8024 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputInnerAssignmentLambdaExpressions . java 
 + + + / dev / null 
 @ @ - 1 , 18 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - import java . util . function . Supplier ; 
 - 
 - 
 - public class InputInnerAssignmentLambdaExpressions { 
 - interface MyLambda { 
 - void e ( Object e ) ; 
 - } 
 - private static class MyButton { 
 - public void setOnAction ( MyLambda my ) { 
 - } 
 - } 
 - private void setAction ( ) { 
 - MyButton button = new MyButton ( ) ; 
 - button . setOnAction ( e - > { boolean pressed = true ; } ) ; / / No violation here 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java 
 new file mode 100644 
 index 0000000 . . abe21ee 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java 
 @ @ - 0 , 0 + 1 , 102 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . innerassignment ; 
 + 
 + import java . io . FileInputStream ; 
 + import java . io . IOException ; 
 + import java . util . jar . JarInputStream ; 
 + import java . util . jar . Manifest ; 
 + 
 + public class InputInnerAssignment 
 + { 
 + void innerAssignments ( ) 
 + { 
 + int a ; 
 + int b ; 
 + int c ; 
 + 
 + a = b = c = 1 ; / / flag two inner assignments 
 + 
 + String s = Integer . toString ( b = 2 ) ; / / flag inner assignment 
 + 
 + Integer i = new Integer ( a + = 5 ) ; / / flag inner assigment 
 + 
 + c = b + + ; / / common practice , don ' t flag 
 + / / even though technically an assigment to b 
 + 
 + for ( int j = 0 ; j < 6 ; j + = 2 ) { / / common practice , don ' t flag 
 + a + = j ; 
 + } 
 + } 
 + 
 + public void demoBug1195047Comment3 ( ) 
 + { 
 + / / inner assignment should flag all assignments to b or bb but none of those to i or j 
 + int y = 1 ; 
 + int b = 0 ; 
 + boolean bb ; 
 + int i ; 
 + 
 + if ( bb = false ) { } 
 + for ( i = 0 ; bb = false ; i = i + 1 ) { } 
 + while ( bb = false ) { } 
 + if ( ( bb = false ) ) { } 
 + for ( int j = 0 ; ( bb = false ) ; j + = 1 ) { } 
 + while ( ( bb = false ) ) { } 
 + i = ( bb = false ) ? ( b = 2 ) : ( b + = 1 ) ; 
 + i = ( b + = 1 ) + ( b - = 1 ) ; 
 + do { i + = 1 ; } while ( bb = false ) ; 
 + } 
 + 
 + public static void demoInputStreamIdiom ( java . io . InputStream is ) throws java . io . IOException 
 + { 
 + int b ; 
 + while ( ( b = is . read ( ) ) ! = - 1 ) / / common idiom to avoid clumsy loop control logic , don ' t flag ( make configurable later ) 
 + { 
 + / / work with b 
 + } 
 + } 
 + 
 + public static void demoNoBrace ( ) 
 + { 
 + / / code that doesn ' t contain braces around conditional code 
 + / / results in a parse tree without SLISTs 
 + / / no assignement should be flagged here 
 + int sum = 0 ; 
 + 
 + for ( int i = 0 ; i < 3 ; i + + ) 
 + sum = sum + i ; 
 + 
 + if ( sum > 4 ) 
 + sum + = 2 ; 
 + else if ( sum < 2 ) 
 + sum + = 1 ; 
 + else 
 + sum + = 100 ; 
 + 
 + while ( sum > 4 ) 
 + sum - = 1 ; 
 + 
 + do 
 + sum = sum + 1 ; 
 + while ( sum < 6 ) ; 
 + } 
 + 
 + @ SuppressWarnings ( value = " unchecked " ) 
 + public java . util . Collection < Object > allParams ( ) { 
 + java . util . ArrayList params = new java . util . ArrayList ( ) ; 
 + params . add ( " one " ) ; 
 + params . add ( " two " ) ; 
 + return params ; 
 + } 
 + 
 + / / Taken from JDK7 java . lang . Package src code . 
 + private static Manifest loadManifest ( String fn ) { 
 + try ( FileInputStream fis = new FileInputStream ( fn ) ; 
 + 	 JarInputStream jis = new JarInputStream ( fis , false ) ) 
 + { 
 + return jis . getManifest ( ) ; 
 + } catch ( IOException e ) 
 + { 
 + return null ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignmentLambdaExpressions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignmentLambdaExpressions . java 
 new file mode 100644 
 index 0000000 . . 6cb4143 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignmentLambdaExpressions . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . innerassignment ; 
 + 
 + import java . util . function . Supplier ; 
 + 
 + 
 + public class InputInnerAssignmentLambdaExpressions { 
 + interface MyLambda { 
 + void e ( Object e ) ; 
 + } 
 + private static class MyButton { 
 + public void setOnAction ( MyLambda my ) { 
 + } 
 + } 
 + private void setAction ( ) { 
 + MyButton button = new MyButton ( ) ; 
 + button . setOnAction ( e - > { boolean pressed = true ; } ) ; / / No violation here 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 index 9af22a9 . . 2cdac81 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { 
 } 
 
 private static List < RevCommit > getCommitsToCheck ( ) throws Exception { 
 - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; 
 - 
 - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 List < RevCommit > commits ; 
 - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 - } 
 - else { 
 - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { 
 + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 + else { 
 + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 } 
 return commits ; 
 } 
 @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { 
 
 private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { 
 RevCommitsPair revCommitIteratorPair ; 
 - try { 
 + 
 + try ( RevWalk revWalk = new RevWalk ( repo ) ) { 
 Iterator < RevCommit > first ; 
 Iterator < RevCommit > second ; 
 - 
 - RevWalk revWalk = new RevWalk ( repo ) ; 
 - 
 ObjectId headId = repo . resolve ( Constants . HEAD ) ; 
 RevCommit headCommit = revWalk . parseCommit ( headId ) ; 
 
 @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { 
 RevCommit firstParent = headCommit . getParent ( 0 ) ; 
 RevCommit secondParent = headCommit . getParent ( 1 ) ; 
 
 - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + } 
 } 
 else { 
 - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . call ( ) . iterator ( ) ; 
 + } 
 second = Collections . emptyIterator ( ) ; 
 } 

