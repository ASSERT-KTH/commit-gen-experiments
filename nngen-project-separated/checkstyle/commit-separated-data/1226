BLEU SCORE: 0.05341087579952926

TEST MSG: minor : reorganized Checker class
GENERATED MSG: started to incorporate logging events

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 895057b . . b0aaec1 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 13 , 10 + 13 , 10 @ @ <nl> See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > <nl> < suppress checks = " IllegalCatch " <nl> files = " Checker . java " <nl> - lines = " 315 " / > <nl> + lines = " 247 " / > <nl> < suppress checks = " IllegalCatch " <nl> files = " Checker . java " <nl> - lines = " 320 " / > <nl> + lines = " 252 " / > <nl> < ! - - Test to reproduce error catching in Checker and satisfy coverage rate . - - > <nl> < suppress checks = " IllegalCatch " <nl> files = " CheckerTest . java " <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> index 1f32b76 . . 2211372 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 133 , 90 + 133 , 6 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> cache . load ( ) ; <nl> } <nl> <nl> - @ Override <nl> - public void finishLocalSetup ( ) throws CheckstyleException { <nl> - final Locale locale = new Locale ( localeLanguage , localeCountry ) ; <nl> - LocalizedMessage . setLocale ( locale ) ; <nl> - <nl> - if ( moduleFactory = = null ) { <nl> - <nl> - if ( moduleClassLoader = = null ) { <nl> - throw new CheckstyleException ( <nl> - " if no custom moduleFactory is set , " <nl> - + " moduleClassLoader must be specified " ) ; <nl> - } <nl> - <nl> - final Set < String > packageNames = PackageNamesLoader <nl> - . getPackageNames ( moduleClassLoader ) ; <nl> - moduleFactory = new PackageObjectFactory ( packageNames , <nl> - moduleClassLoader ) ; <nl> - } <nl> - <nl> - final DefaultContext context = new DefaultContext ( ) ; <nl> - context . add ( " charset " , charset ) ; <nl> - context . add ( " classLoader " , classLoader ) ; <nl> - context . add ( " moduleFactory " , moduleFactory ) ; <nl> - context . add ( " severity " , severityLevel . getName ( ) ) ; <nl> - context . add ( " basedir " , basedir ) ; <nl> - childContext = context ; <nl> - } <nl> - <nl> - @ Override <nl> - protected void setupChild ( Configuration childConf ) <nl> - throws CheckstyleException { <nl> - final String name = childConf . getName ( ) ; <nl> - final Object child ; <nl> - <nl> - try { <nl> - child = moduleFactory . createModule ( name ) ; <nl> - <nl> - if ( child instanceof AutomaticBean ) { <nl> - final AutomaticBean bean = ( AutomaticBean ) child ; <nl> - bean . contextualize ( childContext ) ; <nl> - bean . configure ( childConf ) ; <nl> - } <nl> - } <nl> - catch ( final CheckstyleException ex ) { <nl> - throw new CheckstyleException ( " cannot initialize module " + name <nl> - + " - " + ex . getMessage ( ) , ex ) ; <nl> - } <nl> - if ( child instanceof FileSetCheck ) { <nl> - final FileSetCheck fsc = ( FileSetCheck ) child ; <nl> - fsc . init ( ) ; <nl> - addFileSetCheck ( fsc ) ; <nl> - } <nl> - else if ( child instanceof Filter ) { <nl> - final Filter filter = ( Filter ) child ; <nl> - addFilter ( filter ) ; <nl> - } <nl> - else if ( child instanceof AuditListener ) { <nl> - final AuditListener listener = ( AuditListener ) child ; <nl> - addListener ( listener ) ; <nl> - } <nl> - else { <nl> - throw new CheckstyleException ( name <nl> - + " is not allowed as a child in Checker " ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Adds a FileSetCheck to the list of FileSetChecks <nl> - * that is executed in process ( ) . <nl> - * @ param fileSetCheck the additional FileSetCheck <nl> - * / <nl> - public void addFileSetCheck ( FileSetCheck fileSetCheck ) { <nl> - fileSetCheck . setMessageDispatcher ( this ) ; <nl> - fileSetChecks . add ( fileSetCheck ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Adds a filter to the end of the audit event filter chain . <nl> - * @ param filter the additional filter <nl> - * / <nl> - public void addFilter ( Filter filter ) { <nl> - filters . addFilter ( filter ) ; <nl> - } <nl> - <nl> / * * <nl> * Removes filter . <nl> * @ param filter filter to remove . <nl> @ @ - 240 , 14 + 156 , 6 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> } <nl> <nl> / * * <nl> - * Add the listener that will be used to receive events from the audit . <nl> - * @ param listener the nosy thing <nl> - * / <nl> - public final void addListener ( AuditListener listener ) { <nl> - listeners . add ( listener ) ; <nl> - } <nl> - <nl> - / * * <nl> * Removes a given listener . <nl> * @ param listener a listener to remove <nl> * / <nl> @ @ - 256 , 6 + 164 , 14 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> } <nl> <nl> / * * <nl> + * Sets base directory . <nl> + * @ param basedir the base directory to strip off in file names <nl> + * / <nl> + public void setBasedir ( String basedir ) { <nl> + this . basedir = basedir ; <nl> + } <nl> + <nl> + / * * <nl> * Processes a set of files with all FileSetChecks . <nl> * Once this is done , it is highly recommended to call for <nl> * the destroy method to close and remove the listeners . <nl> @ @ - 289 , 6 + 205 , 22 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> return errorCount ; <nl> } <nl> <nl> + / * * Notify all listeners about the audit start . * / <nl> + private void fireAuditStarted ( ) { <nl> + final AuditEvent event = new AuditEvent ( this ) ; <nl> + for ( final AuditListener listener : listeners ) { <nl> + listener . auditStarted ( event ) ; <nl> + } <nl> + } <nl> + <nl> + / * * Notify all listeners about the audit end . * / <nl> + private void fireAuditFinished ( ) { <nl> + final AuditEvent event = new AuditEvent ( this ) ; <nl> + for ( final AuditListener listener : listeners ) { <nl> + listener . auditFinished ( event ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Processes a list of files with all FileSetChecks . <nl> * @ param files a list of files to process . <nl> @ @ - 315 , 7 + 247 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> catch ( Exception ex ) { <nl> / / We need to catch all exceptions to put a reason failure ( file name ) in exception <nl> throw new CheckstyleException ( " Exception was thrown while processing " <nl> - + file . getPath ( ) , ex ) ; <nl> + + file . getPath ( ) , ex ) ; <nl> } <nl> catch ( Error error ) { <nl> / / We need to catch all errors to put a reason failure ( file name ) in error <nl> @ @ - 341 , 37 + 273 , 13 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> catch ( final IOException ioe ) { <nl> LOG . debug ( " IOException occurred . " , ioe ) ; <nl> fileMessages . add ( new LocalizedMessage ( 0 , <nl> - Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , <nl> - new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , null ) ) ; <nl> + Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , <nl> + new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , null ) ) ; <nl> } <nl> return fileMessages ; <nl> } <nl> <nl> / * * <nl> - * Sets base directory . <nl> - * @ param basedir the base directory to strip off in file names <nl> - * / <nl> - public void setBasedir ( String basedir ) { <nl> - this . basedir = basedir ; <nl> - } <nl> - <nl> - / * * Notify all listeners about the audit start . * / <nl> - private void fireAuditStarted ( ) { <nl> - final AuditEvent event = new AuditEvent ( this ) ; <nl> - for ( final AuditListener listener : listeners ) { <nl> - listener . auditStarted ( event ) ; <nl> - } <nl> - } <nl> - <nl> - / * * Notify all listeners about the audit end . * / <nl> - private void fireAuditFinished ( ) { <nl> - final AuditEvent event = new AuditEvent ( this ) ; <nl> - for ( final AuditListener listener : listeners ) { <nl> - listener . auditFinished ( event ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> * Notify all listeners about the beginning of a file audit . <nl> * <nl> * @ param fileName <nl> @ @ - 387 , 6 + 295 , 25 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> } <nl> <nl> / * * <nl> + * Notify all listeners about the errors in a file . <nl> + * <nl> + * @ param fileName the audited file <nl> + * @ param errors the audit errors from the file <nl> + * / <nl> + @ Override <nl> + public void fireErrors ( String fileName , SortedSet < LocalizedMessage > errors ) { <nl> + final String stripped = CommonUtils . relativizeAndNormalizePath ( basedir , fileName ) ; <nl> + for ( final LocalizedMessage element : errors ) { <nl> + final AuditEvent event = new AuditEvent ( this , stripped , element ) ; <nl> + if ( filters . accept ( event ) ) { <nl> + for ( final AuditListener listener : listeners ) { <nl> + listener . addError ( event ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Notify all listeners about the end of a file audit . <nl> * <nl> * @ param fileName <nl> @ @ - 401 , 23 + 328 , 96 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> } <nl> } <nl> <nl> - / * * <nl> - * Notify all listeners about the errors in a file . <nl> - * <nl> - * @ param fileName the audited file <nl> - * @ param errors the audit errors from the file <nl> - * / <nl> @ Override <nl> - public void fireErrors ( String fileName , SortedSet < LocalizedMessage > errors ) { <nl> - final String stripped = CommonUtils . relativizeAndNormalizePath ( basedir , fileName ) ; <nl> - for ( final LocalizedMessage element : errors ) { <nl> - final AuditEvent event = new AuditEvent ( this , stripped , element ) ; <nl> - if ( filters . accept ( event ) ) { <nl> - for ( final AuditListener listener : listeners ) { <nl> - listener . addError ( event ) ; <nl> - } <nl> + public void finishLocalSetup ( ) throws CheckstyleException { <nl> + final Locale locale = new Locale ( localeLanguage , localeCountry ) ; <nl> + LocalizedMessage . setLocale ( locale ) ; <nl> + <nl> + if ( moduleFactory = = null ) { <nl> + <nl> + if ( moduleClassLoader = = null ) { <nl> + throw new CheckstyleException ( <nl> + " if no custom moduleFactory is set , " <nl> + + " moduleClassLoader must be specified " ) ; <nl> } <nl> + <nl> + final Set < String > packageNames = PackageNamesLoader <nl> + . getPackageNames ( moduleClassLoader ) ; <nl> + moduleFactory = new PackageObjectFactory ( packageNames , <nl> + moduleClassLoader ) ; <nl> } <nl> + <nl> + final DefaultContext context = new DefaultContext ( ) ; <nl> + context . add ( " charset " , charset ) ; <nl> + context . add ( " classLoader " , classLoader ) ; <nl> + context . add ( " moduleFactory " , moduleFactory ) ; <nl> + context . add ( " severity " , severityLevel . getName ( ) ) ; <nl> + context . add ( " basedir " , basedir ) ; <nl> + childContext = context ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void setupChild ( Configuration childConf ) <nl> + throws CheckstyleException { <nl> + final String name = childConf . getName ( ) ; <nl> + final Object child ; <nl> + <nl> + try { <nl> + child = moduleFactory . createModule ( name ) ; <nl> + <nl> + if ( child instanceof AutomaticBean ) { <nl> + final AutomaticBean bean = ( AutomaticBean ) child ; <nl> + bean . contextualize ( childContext ) ; <nl> + bean . configure ( childConf ) ; <nl> + } <nl> + } <nl> + catch ( final CheckstyleException ex ) { <nl> + throw new CheckstyleException ( " cannot initialize module " + name <nl> + + " - " + ex . getMessage ( ) , ex ) ; <nl> + } <nl> + if ( child instanceof FileSetCheck ) { <nl> + final FileSetCheck fsc = ( FileSetCheck ) child ; <nl> + fsc . init ( ) ; <nl> + addFileSetCheck ( fsc ) ; <nl> + } <nl> + else if ( child instanceof Filter ) { <nl> + final Filter filter = ( Filter ) child ; <nl> + addFilter ( filter ) ; <nl> + } <nl> + else if ( child instanceof AuditListener ) { <nl> + final AuditListener listener = ( AuditListener ) child ; <nl> + addListener ( listener ) ; <nl> + } <nl> + else { <nl> + throw new CheckstyleException ( name <nl> + + " is not allowed as a child in Checker " ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Adds a FileSetCheck to the list of FileSetChecks <nl> + * that is executed in process ( ) . <nl> + * @ param fileSetCheck the additional FileSetCheck <nl> + * / <nl> + public void addFileSetCheck ( FileSetCheck fileSetCheck ) { <nl> + fileSetCheck . setMessageDispatcher ( this ) ; <nl> + fileSetChecks . add ( fileSetCheck ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds a filter to the end of the audit event filter chain . <nl> + * @ param filter the additional filter <nl> + * / <nl> + public void addFilter ( Filter filter ) { <nl> + filters . addFilter ( filter ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Add the listener that will be used to receive events from the audit . <nl> + * @ param listener the nosy thing <nl> + * / <nl> + public final void addListener ( AuditListener listener ) { <nl> + listeners . add ( listener ) ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> index f6eecb5 . . 6ce69d1 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> @ @ - 19 , 14 + 19 , 18 @ @ <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> import java . io . File ; <nl> + import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> + import java . io . OutputStream ; <nl> import java . util . ArrayList ; <nl> - import java . util . Iterator ; <nl> import java . util . List ; <nl> import org . apache . regexp . RESyntaxException ; <nl> import org . apache . tools . ant . BuildException ; <nl> import org . apache . tools . ant . DirectoryScanner ; <nl> + import org . apache . tools . ant . Project ; <nl> import org . apache . tools . ant . Task ; <nl> + import org . apache . tools . ant . taskdefs . LogOutputStream ; <nl> + import org . apache . tools . ant . types . EnumeratedAttribute ; <nl> import org . apache . tools . ant . types . FileSet ; <nl> <nl> / * * <nl> @ @ - 37 , 10 + 41 , 20 @ @ import org . apache . tools . ant . types . FileSet ; <nl> public class CheckStyleTask <nl> extends Task <nl> { <nl> + / * * poor man ' s enum for an xml formatter * * / <nl> + private static final String E _ XML = " xml " ; <nl> + / * * poor man ' s enum for an plain formatter * * / <nl> + private static final String E _ PLAIN = " plain " ; <nl> + <nl> / * * name of file to check * * / <nl> private String mFileName ; <nl> + <nl> / * * contains the filesets to process * * / <nl> private final List mFileSets = new ArrayList ( ) ; <nl> + <nl> + / * * contains the formatters to log to * * / <nl> + private final List mFormatters = new ArrayList ( ) ; <nl> + <nl> / * * the configuration to pass to the checker * * / <nl> private final Configuration mConfig = new Configuration ( ) ; <nl> <nl> @ @ - 57 , 6 + 71 , 16 @ @ public class CheckStyleTask <nl> mFileSets . add ( aFS ) ; <nl> } <nl> <nl> + / * * <nl> + * Add a formatter <nl> + * @ param aFormatter the formatter to add for logging . <nl> + * / <nl> + public void addFormatter ( Formatter aFormatter ) <nl> + { <nl> + mFormatters . add ( aFormatter ) ; <nl> + } <nl> + <nl> + <nl> / * * @ param aFile the file to be checked * * / <nl> public void setFile ( File aFile ) <nl> { <nl> @ @ - 94 , 8 + 118 , 7 @ @ public class CheckStyleTask <nl> mConfig . setMemberPat ( aPat ) ; <nl> } <nl> catch ( RESyntaxException ex ) { <nl> - throw new BuildException ( " Unable to parse memberpattern - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( " Unable to parse memberPattern - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 106 , 8 + 129 , 8 @ @ public class CheckStyleTask <nl> mConfig . setPublicMemberPat ( aPat ) ; <nl> } <nl> catch ( RESyntaxException ex ) { <nl> - throw new BuildException ( " Unable to parse publicmemberpattern - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( <nl> + " Unable to parse publicMemberPattern - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 118 , 8 + 141 , 7 @ @ public class CheckStyleTask <nl> mConfig . setParamPat ( aPat ) ; <nl> } <nl> catch ( RESyntaxException ex ) { <nl> - throw new BuildException ( " Unable to parse parampattern - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( " Unable to parse paramPattern - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 130 , 8 + 152 , 7 @ @ public class CheckStyleTask <nl> mConfig . setStaticFinalPat ( aPat ) ; <nl> } <nl> catch ( RESyntaxException ex ) { <nl> - throw new BuildException ( " Unable to parse constpattern - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( " Unable to parse constPattern - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 142 , 8 + 163 , 7 @ @ public class CheckStyleTask <nl> mConfig . setStaticPat ( aPat ) ; <nl> } <nl> catch ( RESyntaxException ex ) { <nl> - throw new BuildException ( " Unable to parse staticpattern - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( " Unable to parse staticPattern - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 154 , 8 + 174 , 7 @ @ public class CheckStyleTask <nl> mConfig . setTypePat ( aPat ) ; <nl> } <nl> catch ( RESyntaxException ex ) { <nl> - throw new BuildException ( " Unable to parse typepattern - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( " Unable to parse typePattern - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 166 , 8 + 185 , 7 @ @ public class CheckStyleTask <nl> mConfig . setHeaderFile ( aName . getAbsolutePath ( ) ) ; <nl> } <nl> catch ( IOException ex ) { <nl> - throw new BuildException ( " Unable to read headerfile - " + <nl> - ex . getMessage ( ) ) ; <nl> + throw new BuildException ( " Unable to read headerfile - " , ex ) ; <nl> } <nl> } <nl> <nl> @ @ - 226 , 50 + 244 , 193 @ @ public class CheckStyleTask <nl> } <nl> <nl> / / Create the checker <nl> - Checker c ; <nl> + final int numErrs ; <nl> + Checker c = null ; <nl> try { <nl> c = new Checker ( mConfig , System . out ) ; <nl> + AuditListener [ ] listeners = getListeners ( ) ; <nl> + for ( int i = 0 ; i < listeners . length ; i + + ) { <nl> + c . addListener ( listeners [ i ] ) ; <nl> + } <nl> + final String [ ] files = scanFileSets ( ) ; <nl> + numErrs = c . process ( files ) ; <nl> + } <nl> + catch ( Exception e ) { <nl> + throw new BuildException ( " Unable to create a Checker " , e ) ; <nl> } <nl> - catch ( RESyntaxException e ) { <nl> - e . printStackTrace ( ) ; <nl> - throw new BuildException ( " Unable to create a Checker " , location ) ; <nl> + finally { <nl> + if ( c ! = null ) { <nl> + c . destroy ( ) ; <nl> + } <nl> } <nl> <nl> - / / Process the files <nl> - int numErrs = 0 ; <nl> - if ( mFileName ! = null ) { <nl> - numErrs + = c . process ( mFileName ) ; <nl> + if ( numErrs > 0 ) { <nl> + throw new BuildException ( " Got " + numErrs + " errors . " , location ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Return the list of listeners set in this task . <nl> + * @ return the list of listeners . <nl> + * @ throws ClassNotFoundException if an error occurs <nl> + * @ throws InstantiationException if an error occurs <nl> + * @ throws IllegalAccessException if an error occurs <nl> + * @ throws IOException if an error occurs <nl> + * / <nl> + protected AuditListener [ ] getListeners ( ) <nl> + throws ClassNotFoundException , InstantiationException , <nl> + IllegalAccessException , IOException <nl> + { <nl> + / / @ todo should we add a default plain stdout <nl> + / / formatter ? <nl> + if ( mFormatters . size ( ) = = 0 ) { <nl> + final Formatter f = new Formatter ( ) ; <nl> + final FormatterType type = new FormatterType ( ) ; <nl> + type . setValue ( E _ PLAIN ) ; <nl> + f . setType ( type ) ; <nl> + mFormatters . add ( f ) ; <nl> + } <nl> + <nl> + final AuditListener [ ] listeners = new AuditListener [ mFormatters . size ( ) ] ; <nl> + for ( int i = 0 ; i < listeners . length ; i + + ) { <nl> + final Formatter f = ( Formatter ) mFormatters . get ( i ) ; <nl> + listeners [ i ] = f . createListener ( this ) ; <nl> } <nl> + return listeners ; <nl> + } <nl> <nl> - final Iterator it = mFileSets . iterator ( ) ; <nl> - while ( it . hasNext ( ) ) { <nl> - final FileSet fs = ( FileSet ) it . next ( ) ; <nl> + / * * <nl> + * returns the list of files ( full path name ) to process . <nl> + * @ return the list of files included via the filesets . <nl> + * / <nl> + protected String [ ] scanFileSets ( ) <nl> + { <nl> + final ArrayList list = new ArrayList ( ) ; <nl> + if ( mFileName ! = null ) { <nl> + / / oops we ' ve got an additional one to process , don ' t <nl> + / / forget it . No sweat , it ' s fully resolved via the setter . <nl> + log ( " Adding standalone file for audit " , Project . MSG _ VERBOSE ) ; <nl> + list . add ( mFileName ) ; <nl> + } <nl> + for ( int i = 0 ; i < mFileSets . size ( ) ; i + + ) { <nl> + final FileSet fs = ( FileSet ) mFileSets . get ( i ) ; <nl> final DirectoryScanner ds = fs . getDirectoryScanner ( project ) ; <nl> - numErrs + = process ( fs . getDir ( project ) . getAbsolutePath ( ) , <nl> - ds . getIncludedFiles ( ) , <nl> - c ) ; <nl> + ds . scan ( ) ; <nl> + <nl> + final String [ ] names = ds . getIncludedFiles ( ) ; <nl> + log ( i + " ) Adding " + names . length + " files from directory " + <nl> + ds . getBasedir ( ) , Project . MSG _ VERBOSE ) ; <nl> + <nl> + for ( int j = 0 ; j < names . length ; j + + ) { <nl> + final String pathname = <nl> + ds . getBasedir ( ) + File . separator + names [ j ] ; <nl> + list . add ( pathname ) ; <nl> + } <nl> } <nl> <nl> - c . destroy ( ) ; <nl> + return ( String [ ] ) list . toArray ( new String [ 0 ] ) ; <nl> + } <nl> <nl> - if ( numErrs > 0 ) { <nl> - throw new BuildException ( " Got " + numErrs + " errors . " , location ) ; <nl> + / * * <nl> + * Poor mans enumeration for the formatter types . <nl> + * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > <nl> + * / <nl> + public static class FormatterType <nl> + extends EnumeratedAttribute <nl> + { <nl> + / * * my possible values * * / <nl> + private static final String [ ] VALUES = { E _ XML , E _ PLAIN } ; <nl> + <nl> + / * * @ see EnumeratedAttribute * * / <nl> + public String [ ] getValues ( ) <nl> + { <nl> + return VALUES ; <nl> } <nl> } <nl> <nl> / * * <nl> - * Processes the list of files . <nl> - * @ return the number of errors found <nl> - * @ param aDir absolute path to directory containing files <nl> - * @ param aFiles the files to process <nl> - * @ param aChecker the checker to process the files with <nl> - * * / <nl> - private int process ( String aDir , String [ ] aFiles , Checker aChecker ) <nl> + * Details about a formatter to be used . <nl> + * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > <nl> + * / <nl> + public static class Formatter <nl> { <nl> - int retVal = 0 ; <nl> - for ( int i = 0 ; i < aFiles . length ; i + + ) { <nl> - retVal + = aChecker . process ( aDir + File . separator + aFiles [ i ] ) ; <nl> + / * * class name of formatter * * / <nl> + private String mClassName = null ; <nl> + / * * whether formatter users a file * * / <nl> + private boolean mUseFile = true ; <nl> + / * * the file to output to * * / <nl> + private File mToFile = null ; <nl> + <nl> + / * * <nl> + * Set the type of the formatter . <nl> + * @ param aType the type <nl> + * / <nl> + public void setType ( FormatterType aType ) <nl> + { <nl> + final String val = aType . getValue ( ) ; <nl> + if ( E _ XML . equals ( val ) ) { <nl> + setClassname ( XMLLogger . class . getName ( ) ) ; <nl> + } <nl> + else if ( E _ PLAIN . equals ( val ) ) { <nl> + setClassname ( DefaultLogger . class . getName ( ) ) ; <nl> + } <nl> + else { <nl> + throw new BuildException ( " Invalid formatter type : " + val ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Set the class name of the formatter . <nl> + * @ param aTo the formatter class name <nl> + * / <nl> + public void setClassname ( String aTo ) <nl> + { <nl> + mClassName = aTo ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the file to output to . <nl> + * @ param aTo the file to output to <nl> + * / <nl> + public void setTofile ( File aTo ) <nl> + { <nl> + mToFile = aTo ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates a listener for the formatter . <nl> + * @ param aTask the task running <nl> + * @ return a listener <nl> + * @ throws ClassNotFoundException if an error occurs <nl> + * @ throws InstantiationException if an error occurs <nl> + * @ throws IllegalAccessException if an error occurs <nl> + * @ throws IOException if an error occurs <nl> + * / <nl> + public AuditListener createListener ( Task aTask ) <nl> + throws ClassNotFoundException , InstantiationException , <nl> + IllegalAccessException , IOException <nl> + { <nl> + final Class clazz = Class . forName ( mClassName ) ; <nl> + final AuditListener listener = ( AuditListener ) clazz . newInstance ( ) ; <nl> + if ( listener instanceof Streamable ) { <nl> + final Streamable o = ( Streamable ) listener ; <nl> + o . setOutputStream ( createOutputStream ( aTask ) ) ; <nl> + } <nl> + return listener ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return an output stream to log with <nl> + * @ param aTask the task to possibly log to <nl> + * @ throws IOException if an error occurs <nl> + * / <nl> + protected OutputStream createOutputStream ( Task aTask ) <nl> + throws IOException <nl> + { <nl> + if ( mToFile = = null ) { <nl> + return new LogOutputStream ( aTask , Project . MSG _ INFO ) ; <nl> + } <nl> + return new FileOutputStream ( mToFile ) ; <nl> } <nl> - return retVal ; <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> index 0475d78 . . 1f4b1d1 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 21 , 20 + 21 , 23 @ @ package com . puppycrawl . tools . checkstyle ; <nl> import antlr . RecognitionException ; <nl> import antlr . TokenStreamException ; <nl> import antlr . collections . AST ; <nl> + import java . io . File ; <nl> import java . io . FileNotFoundException ; <nl> import java . io . FileReader ; <nl> import java . io . IOException ; <nl> import java . io . LineNumberReader ; <nl> + import java . io . OutputStream ; <nl> import java . io . PrintStream ; <nl> import java . util . ArrayList ; <nl> + import java . util . Iterator ; <nl> import java . util . Properties ; <nl> import org . apache . regexp . RESyntaxException ; <nl> - import java . io . File ; <nl> <nl> / * * <nl> * This class provides the functionality to check a file . <nl> * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > <nl> - * * / <nl> + * @ author < a href = " mailto : stephane . bailliez @ wanadoo . fr " > Stephane Bailliez < / a > <nl> + * / <nl> class Checker <nl> implements Defn <nl> { <nl> @ @ - 44 , 6 + 47 , 9 @ @ class Checker <nl> / * * cache file * * / <nl> private final PropertyCacheFile mCache ; <nl> <nl> + / * * vector of listeners * / <nl> + private final ArrayList mListeners = new ArrayList ( ) ; <nl> + <nl> / * * <nl> * Constructs the object . <nl> * @ param aConfig contains the configuration to check with <nl> @ @ - 63 , 6 + 69 , 54 @ @ class Checker <nl> void destroy ( ) <nl> { <nl> mCache . destroy ( ) ; <nl> + <nl> + / / close all streamable listeners <nl> + final Iterator it = mListeners . iterator ( ) ; <nl> + while ( it . hasNext ( ) ) { <nl> + final Object obj = it . next ( ) ; <nl> + if ( obj instanceof Streamable ) { <nl> + final Streamable str = ( Streamable ) obj ; <nl> + final OutputStream os = str . getOutputStream ( ) ; <nl> + / / close only those that can be closed . . . <nl> + if ( ( os ! = System . out ) & & ( os ! = System . err ) & & ( os ! = null ) ) { <nl> + try { <nl> + os . flush ( ) ; <nl> + os . close ( ) ; <nl> + } <nl> + catch ( IOException ignored ) { <nl> + } <nl> + } <nl> + } <nl> + it . remove ( ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Add the listener that will be used to receive events from the audit <nl> + * @ param aListener the nosy thing <nl> + * / <nl> + void addListener ( AuditListener aListener ) <nl> + { <nl> + mListeners . add ( aListener ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Processes a set of files . <nl> + * Once this is done , it is highly recommended to call for <nl> + * the destroy method to close and remove the listeners . <nl> + * @ param aFiles the list of files to be audited . <nl> + * @ return the total number of errors found <nl> + * @ see destroy ( ) <nl> + * / <nl> + int process ( String [ ] aFiles ) <nl> + { <nl> + int total = 0 ; <nl> + fireAuditStarted ( ) ; <nl> + for ( int i = 0 ; i < aFiles . length ; i + + ) { <nl> + total + = process ( aFiles [ i ] ) ; <nl> + } <nl> + fireAuditFinished ( ) ; <nl> + return total ; <nl> } <nl> <nl> / * * <nl> @ @ - 70 , 15 + 124 , 17 @ @ class Checker <nl> * @ return the number of errors found <nl> * @ param aFileName the name of the file to process <nl> * * / <nl> - int process ( String aFileName ) <nl> + private int process ( String aFileName ) <nl> { <nl> - final long timestamp = new File ( aFileName ) . lastModified ( ) ; <nl> + final File f = new File ( aFileName ) ; <nl> + final long timestamp = f . lastModified ( ) ; <nl> if ( mCache . alreadyChecked ( aFileName , timestamp ) ) { <nl> return 0 ; <nl> } <nl> <nl> LineText [ ] errors ; <nl> try { <nl> + fireFileStarted ( aFileName ) ; <nl> VerifierSingleton . getInstance ( ) . clearMessages ( ) ; <nl> VerifierSingleton . getInstance ( ) . setLines ( getLines ( aFileName ) ) ; <nl> final AST ast = getAST ( aFileName ) ; <nl> @ @ - 95 , 8 + 151 , 7 @ @ class Checker <nl> catch ( RecognitionException re ) { <nl> errors = new LineText [ ] { <nl> new LineText ( 0 , <nl> - " Got a RecognitionException - " + <nl> - re . getMessage ( ) ) } ; <nl> + " Got a RecognitionException - " + re . getMessage ( ) ) } ; <nl> } <nl> catch ( TokenStreamException te ) { <nl> errors = new LineText [ ] { <nl> @ @ - 108 , 8 + 163 , 10 @ @ class Checker <nl> mCache . checkedOk ( aFileName , timestamp ) ; <nl> } <nl> else { <nl> - displayErrors ( aFileName , errors ) ; <nl> + fireErrors ( aFileName , errors ) ; <nl> } <nl> + <nl> + fireFileFinished ( aFileName ) ; <nl> return errors . length ; <nl> } <nl> <nl> @ @ - 173 , 20 + 230 , 6 @ @ class Checker <nl> } <nl> <nl> / * * <nl> - * Displays the errors associated with a file name . The errors are formatted <nl> - * to be parsed by Emacs . <nl> - * @ param aFileName the file name to associate with the errors <nl> - * @ param aErrors the errors to display <nl> - * * / <nl> - private void displayErrors ( String aFileName , LineText [ ] aErrors ) <nl> - { <nl> - for ( int i = 0 ; i < aErrors . length ; i + + ) { <nl> - mLog . println ( aFileName + " : " + aErrors [ i ] . getLineNo ( ) + <nl> - " : " + aErrors [ i ] . getText ( ) ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> * @ return the header lines specified by a file in the supplied properties <nl> * set . If no file specified , or unable to read specified file , then an <nl> * empty list is returned . Errors are reported . <nl> @ @ - 208 , 5 + 251 , 72 @ @ class Checker <nl> return retVal ; <nl> } <nl> <nl> + / * * notify all listeners about the audit start * / <nl> + protected void fireAuditStarted ( ) <nl> + { <nl> + final AuditEvent evt = new AuditEvent ( this ) ; <nl> + final Iterator it = mListeners . iterator ( ) ; <nl> + while ( it . hasNext ( ) ) { <nl> + final AuditListener listener = ( AuditListener ) it . next ( ) ; <nl> + listener . auditStarted ( evt ) ; <nl> + } <nl> + } <nl> + <nl> + / * * notify all listeners about the audit end * / <nl> + protected void fireAuditFinished ( ) <nl> + { <nl> + final AuditEvent evt = new AuditEvent ( this ) ; <nl> + final Iterator it = mListeners . iterator ( ) ; <nl> + while ( it . hasNext ( ) ) { <nl> + final AuditListener listener = ( AuditListener ) it . next ( ) ; <nl> + listener . auditFinished ( evt ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * notify all listeners about the beginning of a file audit <nl> + * @ param aFileName the file to be audited <nl> + * / <nl> + protected void fireFileStarted ( String aFileName ) <nl> + { <nl> + final AuditEvent evt = new AuditEvent ( this , aFileName ) ; <nl> + final Iterator it = mListeners . iterator ( ) ; <nl> + while ( it . hasNext ( ) ) { <nl> + final AuditListener listener = ( AuditListener ) it . next ( ) ; <nl> + listener . fileStarted ( evt ) ; <nl> + } <nl> + } <nl> <nl> + / * * <nl> + * notify all listeners about the end of a file audit <nl> + * @ param aFileName the audited file <nl> + * / <nl> + protected void fireFileFinished ( String aFileName ) <nl> + { <nl> + final AuditEvent evt = new AuditEvent ( this , aFileName ) ; <nl> + final Iterator it = mListeners . iterator ( ) ; <nl> + while ( it . hasNext ( ) ) { <nl> + final AuditListener listener = ( AuditListener ) it . next ( ) ; <nl> + listener . fileFinished ( evt ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * notify all listeners about the errors in a file . <nl> + * @ param aFileName the audited file <nl> + * @ param aErrors the audit errors from the file <nl> + * / <nl> + protected void fireErrors ( String aFileName , LineText [ ] aErrors ) <nl> + { <nl> + for ( int i = 0 ; i < aErrors . length ; i + + ) { <nl> + final AuditEvent evt = <nl> + new AuditEvent ( this , aFileName , aErrors [ i ] . getLineNo ( ) , <nl> + aErrors [ i ] . getText ( ) ) ; <nl> + final Iterator it = mListeners . iterator ( ) ; <nl> + while ( it . hasNext ( ) ) { <nl> + final AuditListener listener = ( AuditListener ) it . next ( ) ; <nl> + listener . addError ( evt ) ; <nl> + } <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> index 2ecc4ac . . 6da04f1 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 18 , 7 + 18 , 10 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> + import java . io . OutputStream ; <nl> import org . apache . regexp . RESyntaxException ; <nl> <nl> / * * <nl> @ @ - 38 , 11 + 41 , 54 @ @ public final class Main <nl> usage ( ) ; <nl> } <nl> <nl> + / / be brain dead about arguments parsing <nl> + String format = " plain " ; <nl> + String output = null ; <nl> + String [ ] files = null ; <nl> + for ( int i = 0 ; i < aArgs . length ; i + + ) { <nl> + if ( " - f " . equals ( aArgs [ i ] ) ) { <nl> + format = aArgs [ + + i ] ; <nl> + } <nl> + else if ( " - o " . equals ( aArgs [ i ] ) ) { <nl> + output = aArgs [ + + i ] ; <nl> + } <nl> + else { <nl> + files = new String [ aArgs . length - i ] ; <nl> + System . arraycopy ( aArgs , i , files , 0 , files . length ) ; <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + / / create the appropriate listener <nl> + OutputStream out = System . out ; <nl> + if ( output ! = null ) { <nl> + try { <nl> + out = new FileOutputStream ( output ) ; <nl> + } <nl> + catch ( FileNotFoundException e ) { <nl> + System . out . println ( " Could not find file : ' " + output + " ' " ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + } <nl> + AuditListener listener = null ; <nl> + if ( " xml " . equals ( format ) ) { <nl> + listener = new XMLLogger ( out ) ; <nl> + } <nl> + else if ( " plain " . equals ( format ) ) { <nl> + listener = new DefaultLogger ( out ) ; <nl> + } <nl> + else { <nl> + System . out . println ( " Invalid format : ( " + format + <nl> + " ) . Must be ' plain ' or ' xml ' . " ) ; <nl> + usage ( ) ; <nl> + } <nl> + <nl> Checker c = null ; <nl> try { <nl> c = new Checker ( new Configuration ( System . getProperties ( ) , <nl> System . out ) , <nl> System . out ) ; <nl> + c . addListener ( listener ) ; <nl> } <nl> catch ( RESyntaxException rese ) { <nl> System . out . println ( " Unable to create an regexp object : " + <nl> @ @ - 56 , 13 + 102 , 10 @ @ public final class Main <nl> System . exit ( 1 ) ; <nl> } <nl> <nl> - int numErrors = 0 ; <nl> - for ( int i = 0 ; i < aArgs . length ; i + + ) { <nl> - numErrors + = c . process ( aArgs [ i ] ) ; <nl> - } <nl> + final int numErrs = c . process ( files ) ; <nl> <nl> c . destroy ( ) ; <nl> - System . exit ( numErrors ) ; <nl> + System . exit ( numErrs ) ; <nl> } <nl> <nl> / * * Prints the usage information . * * / <nl> @ @ - 70 , 7 + 113 , 13 @ @ public final class Main <nl> { <nl> System . out . println ( <nl> " Usage : java " + <nl> - com . puppycrawl . tools . checkstyle . Main . class . getName ( ) + " file . . . " ) ; <nl> + Main . class . getName ( ) + " < options > < file1 > < file2 > . . . . . . " ) ; <nl> + System . out . println ( " Options " ) ; <nl> + System . out . println ( <nl> + " \ t - f < format > \ tsets output format . ( plain | xml ) . " + <nl> + " Default to plain . " ) ; <nl> + System . out . println ( " \ t - o < file > \ tsets output file name . " + <nl> + " Defaults to stdout " ) ; <nl> System . exit ( 1 ) ; <nl> } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 7ff73ad . . 503b113 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 6 , 14 + 6 , 33 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> import java . io . LineNumberReader ; <nl> + import java . io . OutputStream ; <nl> import java . io . PrintStream ; <nl> import java . net . URL ; <nl> import java . util . Properties ; <nl> import junit . framework . TestCase ; <nl> + import org . apache . regexp . RESyntaxException ; <nl> <nl> public class CheckerTest <nl> extends TestCase <nl> { <nl> + / * * a brief logger that only display info about errors * / <nl> + protected static class BriefLogger <nl> + extends DefaultLogger <nl> + { <nl> + public BriefLogger ( OutputStream out ) <nl> + { <nl> + super ( out ) ; <nl> + } <nl> + public void auditStarted ( AuditEvent evt ) { } <nl> + public void fileFinished ( AuditEvent evt ) { } <nl> + public void fileStarted ( AuditEvent evt ) { } <nl> + / / public void auditFinished ( AuditEvent evt ) { <nl> + <nl> + / / writer . flush ( ) ; <nl> + / / } <nl> + } <nl> + <nl> private final ByteArrayOutputStream mBAOS = new ByteArrayOutputStream ( ) ; <nl> private final PrintStream mStream = new PrintStream ( mBAOS ) ; <nl> private final Configuration mConfig = new Configuration ( ) ; <nl> @ @ - 36 , 10 + 55 , 20 @ @ public class CheckerTest <nl> return f . getCanonicalPath ( ) ; <nl> } <nl> <nl> + protected Checker createChecker ( ) <nl> + throws RESyntaxException <nl> + { <nl> + final AuditListener listener = new BriefLogger ( mStream ) ; <nl> + final Checker c = new Checker ( mConfig , mStream ) ; <nl> + c . addListener ( listener ) ; <nl> + return c ; <nl> + } <nl> + <nl> private void verify ( Checker aC , String aFilename , String [ ] aExpected ) <nl> throws Exception <nl> { <nl> - final int errs = aC . process ( aFilename ) ; <nl> + mStream . flush ( ) ; <nl> + final int errs = aC . process ( new String [ ] { aFilename } ) ; <nl> <nl> / / process each of the lines <nl> final ByteArrayInputStream bais = <nl> @ @ - 57 , 7 + 86 , 7 @ @ public class CheckerTest <nl> public void testWhitespace ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputWhitespace . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 79 , 7 + 108 , 7 @ @ public class CheckerTest <nl> throws Exception <nl> { <nl> mConfig . setIgnoreWhitespace ( true ) ; <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputWhitespace . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 91 , 7 + 120 , 7 @ @ public class CheckerTest <nl> public void testBraces ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputBraces . java " ) ; <nl> final String [ ] expected = { <nl> filepath + " : 29 : ' do ' construct must use ' { } ' s . " , <nl> @ @ - 122 , 7 + 151 , 7 @ @ public class CheckerTest <nl> throws Exception <nl> { <nl> mConfig . setIgnoreBraces ( true ) ; <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputBraces . java " ) ; <nl> final String [ ] expected = { <nl> filepath + " : 41 : ' ; ' is not preceeded with whitespace . " , <nl> @ @ - 135 , 7 + 164 , 7 @ @ public class CheckerTest <nl> public void testTags ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputTags . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 166 , 7 + 195 , 7 @ @ public class CheckerTest <nl> public void testInner ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputInner . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 186 , 7 + 215 , 7 @ @ public class CheckerTest <nl> throws Exception <nl> { <nl> mConfig . setPublicMemberPat ( " ^ r [ A - Z ] " ) ; <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputInner . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 205 , 7 + 234 , 7 @ @ public class CheckerTest <nl> public void testSimple ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputSimple . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 231 , 7 + 260 , 7 @ @ public class CheckerTest <nl> public void testStrictJavadoc ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputPublicOnly . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 269 , 7 + 298 , 7 @ @ public class CheckerTest <nl> throws Exception <nl> { <nl> mConfig . setRelaxJavadoc ( true ) ; <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputPublicOnly . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 295 , 7 + 324 , 7 @ @ public class CheckerTest <nl> public void testHeader ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " inputHeader . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = { <nl> @ @ - 309 , 7 + 338 , 7 @ @ public class CheckerTest <nl> public void testImport ( ) <nl> throws Exception <nl> { <nl> - final Checker c = new Checker ( mConfig , mStream ) ; <nl> + final Checker c = createChecker ( ) ; <nl> final String filepath = getPath ( " InputImport . java " ) ; <nl> assertNotNull ( c ) ; <nl> final String [ ] expected = {

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 895057b . . b0aaec1 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 13 , 10 + 13 , 10 @ @ 
 See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > 
 < suppress checks = " IllegalCatch " 
 files = " Checker . java " 
 - lines = " 315 " / > 
 + lines = " 247 " / > 
 < suppress checks = " IllegalCatch " 
 files = " Checker . java " 
 - lines = " 320 " / > 
 + lines = " 252 " / > 
 < ! - - Test to reproduce error catching in Checker and satisfy coverage rate . - - > 
 < suppress checks = " IllegalCatch " 
 files = " CheckerTest . java " 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 index 1f32b76 . . 2211372 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 133 , 90 + 133 , 6 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 cache . load ( ) ; 
 } 
 
 - @ Override 
 - public void finishLocalSetup ( ) throws CheckstyleException { 
 - final Locale locale = new Locale ( localeLanguage , localeCountry ) ; 
 - LocalizedMessage . setLocale ( locale ) ; 
 - 
 - if ( moduleFactory = = null ) { 
 - 
 - if ( moduleClassLoader = = null ) { 
 - throw new CheckstyleException ( 
 - " if no custom moduleFactory is set , " 
 - + " moduleClassLoader must be specified " ) ; 
 - } 
 - 
 - final Set < String > packageNames = PackageNamesLoader 
 - . getPackageNames ( moduleClassLoader ) ; 
 - moduleFactory = new PackageObjectFactory ( packageNames , 
 - moduleClassLoader ) ; 
 - } 
 - 
 - final DefaultContext context = new DefaultContext ( ) ; 
 - context . add ( " charset " , charset ) ; 
 - context . add ( " classLoader " , classLoader ) ; 
 - context . add ( " moduleFactory " , moduleFactory ) ; 
 - context . add ( " severity " , severityLevel . getName ( ) ) ; 
 - context . add ( " basedir " , basedir ) ; 
 - childContext = context ; 
 - } 
 - 
 - @ Override 
 - protected void setupChild ( Configuration childConf ) 
 - throws CheckstyleException { 
 - final String name = childConf . getName ( ) ; 
 - final Object child ; 
 - 
 - try { 
 - child = moduleFactory . createModule ( name ) ; 
 - 
 - if ( child instanceof AutomaticBean ) { 
 - final AutomaticBean bean = ( AutomaticBean ) child ; 
 - bean . contextualize ( childContext ) ; 
 - bean . configure ( childConf ) ; 
 - } 
 - } 
 - catch ( final CheckstyleException ex ) { 
 - throw new CheckstyleException ( " cannot initialize module " + name 
 - + " - " + ex . getMessage ( ) , ex ) ; 
 - } 
 - if ( child instanceof FileSetCheck ) { 
 - final FileSetCheck fsc = ( FileSetCheck ) child ; 
 - fsc . init ( ) ; 
 - addFileSetCheck ( fsc ) ; 
 - } 
 - else if ( child instanceof Filter ) { 
 - final Filter filter = ( Filter ) child ; 
 - addFilter ( filter ) ; 
 - } 
 - else if ( child instanceof AuditListener ) { 
 - final AuditListener listener = ( AuditListener ) child ; 
 - addListener ( listener ) ; 
 - } 
 - else { 
 - throw new CheckstyleException ( name 
 - + " is not allowed as a child in Checker " ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * Adds a FileSetCheck to the list of FileSetChecks 
 - * that is executed in process ( ) . 
 - * @ param fileSetCheck the additional FileSetCheck 
 - * / 
 - public void addFileSetCheck ( FileSetCheck fileSetCheck ) { 
 - fileSetCheck . setMessageDispatcher ( this ) ; 
 - fileSetChecks . add ( fileSetCheck ) ; 
 - } 
 - 
 - / * * 
 - * Adds a filter to the end of the audit event filter chain . 
 - * @ param filter the additional filter 
 - * / 
 - public void addFilter ( Filter filter ) { 
 - filters . addFilter ( filter ) ; 
 - } 
 - 
 / * * 
 * Removes filter . 
 * @ param filter filter to remove . 
 @ @ - 240 , 14 + 156 , 6 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 } 
 
 / * * 
 - * Add the listener that will be used to receive events from the audit . 
 - * @ param listener the nosy thing 
 - * / 
 - public final void addListener ( AuditListener listener ) { 
 - listeners . add ( listener ) ; 
 - } 
 - 
 - / * * 
 * Removes a given listener . 
 * @ param listener a listener to remove 
 * / 
 @ @ - 256 , 6 + 164 , 14 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 } 
 
 / * * 
 + * Sets base directory . 
 + * @ param basedir the base directory to strip off in file names 
 + * / 
 + public void setBasedir ( String basedir ) { 
 + this . basedir = basedir ; 
 + } 
 + 
 + / * * 
 * Processes a set of files with all FileSetChecks . 
 * Once this is done , it is highly recommended to call for 
 * the destroy method to close and remove the listeners . 
 @ @ - 289 , 6 + 205 , 22 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 return errorCount ; 
 } 
 
 + / * * Notify all listeners about the audit start . * / 
 + private void fireAuditStarted ( ) { 
 + final AuditEvent event = new AuditEvent ( this ) ; 
 + for ( final AuditListener listener : listeners ) { 
 + listener . auditStarted ( event ) ; 
 + } 
 + } 
 + 
 + / * * Notify all listeners about the audit end . * / 
 + private void fireAuditFinished ( ) { 
 + final AuditEvent event = new AuditEvent ( this ) ; 
 + for ( final AuditListener listener : listeners ) { 
 + listener . auditFinished ( event ) ; 
 + } 
 + } 
 + 
 / * * 
 * Processes a list of files with all FileSetChecks . 
 * @ param files a list of files to process . 
 @ @ - 315 , 7 + 247 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 catch ( Exception ex ) { 
 / / We need to catch all exceptions to put a reason failure ( file name ) in exception 
 throw new CheckstyleException ( " Exception was thrown while processing " 
 - + file . getPath ( ) , ex ) ; 
 + + file . getPath ( ) , ex ) ; 
 } 
 catch ( Error error ) { 
 / / We need to catch all errors to put a reason failure ( file name ) in error 
 @ @ - 341 , 37 + 273 , 13 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 catch ( final IOException ioe ) { 
 LOG . debug ( " IOException occurred . " , ioe ) ; 
 fileMessages . add ( new LocalizedMessage ( 0 , 
 - Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , 
 - new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , null ) ) ; 
 + Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , 
 + new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , null ) ) ; 
 } 
 return fileMessages ; 
 } 
 
 / * * 
 - * Sets base directory . 
 - * @ param basedir the base directory to strip off in file names 
 - * / 
 - public void setBasedir ( String basedir ) { 
 - this . basedir = basedir ; 
 - } 
 - 
 - / * * Notify all listeners about the audit start . * / 
 - private void fireAuditStarted ( ) { 
 - final AuditEvent event = new AuditEvent ( this ) ; 
 - for ( final AuditListener listener : listeners ) { 
 - listener . auditStarted ( event ) ; 
 - } 
 - } 
 - 
 - / * * Notify all listeners about the audit end . * / 
 - private void fireAuditFinished ( ) { 
 - final AuditEvent event = new AuditEvent ( this ) ; 
 - for ( final AuditListener listener : listeners ) { 
 - listener . auditFinished ( event ) ; 
 - } 
 - } 
 - 
 - / * * 
 * Notify all listeners about the beginning of a file audit . 
 * 
 * @ param fileName 
 @ @ - 387 , 6 + 295 , 25 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 } 
 
 / * * 
 + * Notify all listeners about the errors in a file . 
 + * 
 + * @ param fileName the audited file 
 + * @ param errors the audit errors from the file 
 + * / 
 + @ Override 
 + public void fireErrors ( String fileName , SortedSet < LocalizedMessage > errors ) { 
 + final String stripped = CommonUtils . relativizeAndNormalizePath ( basedir , fileName ) ; 
 + for ( final LocalizedMessage element : errors ) { 
 + final AuditEvent event = new AuditEvent ( this , stripped , element ) ; 
 + if ( filters . accept ( event ) ) { 
 + for ( final AuditListener listener : listeners ) { 
 + listener . addError ( event ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + / * * 
 * Notify all listeners about the end of a file audit . 
 * 
 * @ param fileName 
 @ @ - 401 , 23 + 328 , 96 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 } 
 } 
 
 - / * * 
 - * Notify all listeners about the errors in a file . 
 - * 
 - * @ param fileName the audited file 
 - * @ param errors the audit errors from the file 
 - * / 
 @ Override 
 - public void fireErrors ( String fileName , SortedSet < LocalizedMessage > errors ) { 
 - final String stripped = CommonUtils . relativizeAndNormalizePath ( basedir , fileName ) ; 
 - for ( final LocalizedMessage element : errors ) { 
 - final AuditEvent event = new AuditEvent ( this , stripped , element ) ; 
 - if ( filters . accept ( event ) ) { 
 - for ( final AuditListener listener : listeners ) { 
 - listener . addError ( event ) ; 
 - } 
 + public void finishLocalSetup ( ) throws CheckstyleException { 
 + final Locale locale = new Locale ( localeLanguage , localeCountry ) ; 
 + LocalizedMessage . setLocale ( locale ) ; 
 + 
 + if ( moduleFactory = = null ) { 
 + 
 + if ( moduleClassLoader = = null ) { 
 + throw new CheckstyleException ( 
 + " if no custom moduleFactory is set , " 
 + + " moduleClassLoader must be specified " ) ; 
 } 
 + 
 + final Set < String > packageNames = PackageNamesLoader 
 + . getPackageNames ( moduleClassLoader ) ; 
 + moduleFactory = new PackageObjectFactory ( packageNames , 
 + moduleClassLoader ) ; 
 } 
 + 
 + final DefaultContext context = new DefaultContext ( ) ; 
 + context . add ( " charset " , charset ) ; 
 + context . add ( " classLoader " , classLoader ) ; 
 + context . add ( " moduleFactory " , moduleFactory ) ; 
 + context . add ( " severity " , severityLevel . getName ( ) ) ; 
 + context . add ( " basedir " , basedir ) ; 
 + childContext = context ; 
 + } 
 + 
 + @ Override 
 + protected void setupChild ( Configuration childConf ) 
 + throws CheckstyleException { 
 + final String name = childConf . getName ( ) ; 
 + final Object child ; 
 + 
 + try { 
 + child = moduleFactory . createModule ( name ) ; 
 + 
 + if ( child instanceof AutomaticBean ) { 
 + final AutomaticBean bean = ( AutomaticBean ) child ; 
 + bean . contextualize ( childContext ) ; 
 + bean . configure ( childConf ) ; 
 + } 
 + } 
 + catch ( final CheckstyleException ex ) { 
 + throw new CheckstyleException ( " cannot initialize module " + name 
 + + " - " + ex . getMessage ( ) , ex ) ; 
 + } 
 + if ( child instanceof FileSetCheck ) { 
 + final FileSetCheck fsc = ( FileSetCheck ) child ; 
 + fsc . init ( ) ; 
 + addFileSetCheck ( fsc ) ; 
 + } 
 + else if ( child instanceof Filter ) { 
 + final Filter filter = ( Filter ) child ; 
 + addFilter ( filter ) ; 
 + } 
 + else if ( child instanceof AuditListener ) { 
 + final AuditListener listener = ( AuditListener ) child ; 
 + addListener ( listener ) ; 
 + } 
 + else { 
 + throw new CheckstyleException ( name 
 + + " is not allowed as a child in Checker " ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Adds a FileSetCheck to the list of FileSetChecks 
 + * that is executed in process ( ) . 
 + * @ param fileSetCheck the additional FileSetCheck 
 + * / 
 + public void addFileSetCheck ( FileSetCheck fileSetCheck ) { 
 + fileSetCheck . setMessageDispatcher ( this ) ; 
 + fileSetChecks . add ( fileSetCheck ) ; 
 + } 
 + 
 + / * * 
 + * Adds a filter to the end of the audit event filter chain . 
 + * @ param filter the additional filter 
 + * / 
 + public void addFilter ( Filter filter ) { 
 + filters . addFilter ( filter ) ; 
 + } 
 + 
 + / * * 
 + * Add the listener that will be used to receive events from the audit . 
 + * @ param listener the nosy thing 
 + * / 
 + public final void addListener ( AuditListener listener ) { 
 + listeners . add ( listener ) ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 index f6eecb5 . . 6ce69d1 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 @ @ - 19 , 14 + 19 , 18 @ @ 
 package com . puppycrawl . tools . checkstyle ; 
 
 import java . io . File ; 
 + import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 + import java . io . OutputStream ; 
 import java . util . ArrayList ; 
 - import java . util . Iterator ; 
 import java . util . List ; 
 import org . apache . regexp . RESyntaxException ; 
 import org . apache . tools . ant . BuildException ; 
 import org . apache . tools . ant . DirectoryScanner ; 
 + import org . apache . tools . ant . Project ; 
 import org . apache . tools . ant . Task ; 
 + import org . apache . tools . ant . taskdefs . LogOutputStream ; 
 + import org . apache . tools . ant . types . EnumeratedAttribute ; 
 import org . apache . tools . ant . types . FileSet ; 
 
 / * * 
 @ @ - 37 , 10 + 41 , 20 @ @ import org . apache . tools . ant . types . FileSet ; 
 public class CheckStyleTask 
 extends Task 
 { 
 + / * * poor man ' s enum for an xml formatter * * / 
 + private static final String E _ XML = " xml " ; 
 + / * * poor man ' s enum for an plain formatter * * / 
 + private static final String E _ PLAIN = " plain " ; 
 + 
 / * * name of file to check * * / 
 private String mFileName ; 
 + 
 / * * contains the filesets to process * * / 
 private final List mFileSets = new ArrayList ( ) ; 
 + 
 + / * * contains the formatters to log to * * / 
 + private final List mFormatters = new ArrayList ( ) ; 
 + 
 / * * the configuration to pass to the checker * * / 
 private final Configuration mConfig = new Configuration ( ) ; 
 
 @ @ - 57 , 6 + 71 , 16 @ @ public class CheckStyleTask 
 mFileSets . add ( aFS ) ; 
 } 
 
 + / * * 
 + * Add a formatter 
 + * @ param aFormatter the formatter to add for logging . 
 + * / 
 + public void addFormatter ( Formatter aFormatter ) 
 + { 
 + mFormatters . add ( aFormatter ) ; 
 + } 
 + 
 + 
 / * * @ param aFile the file to be checked * * / 
 public void setFile ( File aFile ) 
 { 
 @ @ - 94 , 8 + 118 , 7 @ @ public class CheckStyleTask 
 mConfig . setMemberPat ( aPat ) ; 
 } 
 catch ( RESyntaxException ex ) { 
 - throw new BuildException ( " Unable to parse memberpattern - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( " Unable to parse memberPattern - " , ex ) ; 
 } 
 } 
 
 @ @ - 106 , 8 + 129 , 8 @ @ public class CheckStyleTask 
 mConfig . setPublicMemberPat ( aPat ) ; 
 } 
 catch ( RESyntaxException ex ) { 
 - throw new BuildException ( " Unable to parse publicmemberpattern - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( 
 + " Unable to parse publicMemberPattern - " , ex ) ; 
 } 
 } 
 
 @ @ - 118 , 8 + 141 , 7 @ @ public class CheckStyleTask 
 mConfig . setParamPat ( aPat ) ; 
 } 
 catch ( RESyntaxException ex ) { 
 - throw new BuildException ( " Unable to parse parampattern - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( " Unable to parse paramPattern - " , ex ) ; 
 } 
 } 
 
 @ @ - 130 , 8 + 152 , 7 @ @ public class CheckStyleTask 
 mConfig . setStaticFinalPat ( aPat ) ; 
 } 
 catch ( RESyntaxException ex ) { 
 - throw new BuildException ( " Unable to parse constpattern - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( " Unable to parse constPattern - " , ex ) ; 
 } 
 } 
 
 @ @ - 142 , 8 + 163 , 7 @ @ public class CheckStyleTask 
 mConfig . setStaticPat ( aPat ) ; 
 } 
 catch ( RESyntaxException ex ) { 
 - throw new BuildException ( " Unable to parse staticpattern - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( " Unable to parse staticPattern - " , ex ) ; 
 } 
 } 
 
 @ @ - 154 , 8 + 174 , 7 @ @ public class CheckStyleTask 
 mConfig . setTypePat ( aPat ) ; 
 } 
 catch ( RESyntaxException ex ) { 
 - throw new BuildException ( " Unable to parse typepattern - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( " Unable to parse typePattern - " , ex ) ; 
 } 
 } 
 
 @ @ - 166 , 8 + 185 , 7 @ @ public class CheckStyleTask 
 mConfig . setHeaderFile ( aName . getAbsolutePath ( ) ) ; 
 } 
 catch ( IOException ex ) { 
 - throw new BuildException ( " Unable to read headerfile - " + 
 - ex . getMessage ( ) ) ; 
 + throw new BuildException ( " Unable to read headerfile - " , ex ) ; 
 } 
 } 
 
 @ @ - 226 , 50 + 244 , 193 @ @ public class CheckStyleTask 
 } 
 
 / / Create the checker 
 - Checker c ; 
 + final int numErrs ; 
 + Checker c = null ; 
 try { 
 c = new Checker ( mConfig , System . out ) ; 
 + AuditListener [ ] listeners = getListeners ( ) ; 
 + for ( int i = 0 ; i < listeners . length ; i + + ) { 
 + c . addListener ( listeners [ i ] ) ; 
 + } 
 + final String [ ] files = scanFileSets ( ) ; 
 + numErrs = c . process ( files ) ; 
 + } 
 + catch ( Exception e ) { 
 + throw new BuildException ( " Unable to create a Checker " , e ) ; 
 } 
 - catch ( RESyntaxException e ) { 
 - e . printStackTrace ( ) ; 
 - throw new BuildException ( " Unable to create a Checker " , location ) ; 
 + finally { 
 + if ( c ! = null ) { 
 + c . destroy ( ) ; 
 + } 
 } 
 
 - / / Process the files 
 - int numErrs = 0 ; 
 - if ( mFileName ! = null ) { 
 - numErrs + = c . process ( mFileName ) ; 
 + if ( numErrs > 0 ) { 
 + throw new BuildException ( " Got " + numErrs + " errors . " , location ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Return the list of listeners set in this task . 
 + * @ return the list of listeners . 
 + * @ throws ClassNotFoundException if an error occurs 
 + * @ throws InstantiationException if an error occurs 
 + * @ throws IllegalAccessException if an error occurs 
 + * @ throws IOException if an error occurs 
 + * / 
 + protected AuditListener [ ] getListeners ( ) 
 + throws ClassNotFoundException , InstantiationException , 
 + IllegalAccessException , IOException 
 + { 
 + / / @ todo should we add a default plain stdout 
 + / / formatter ? 
 + if ( mFormatters . size ( ) = = 0 ) { 
 + final Formatter f = new Formatter ( ) ; 
 + final FormatterType type = new FormatterType ( ) ; 
 + type . setValue ( E _ PLAIN ) ; 
 + f . setType ( type ) ; 
 + mFormatters . add ( f ) ; 
 + } 
 + 
 + final AuditListener [ ] listeners = new AuditListener [ mFormatters . size ( ) ] ; 
 + for ( int i = 0 ; i < listeners . length ; i + + ) { 
 + final Formatter f = ( Formatter ) mFormatters . get ( i ) ; 
 + listeners [ i ] = f . createListener ( this ) ; 
 } 
 + return listeners ; 
 + } 
 
 - final Iterator it = mFileSets . iterator ( ) ; 
 - while ( it . hasNext ( ) ) { 
 - final FileSet fs = ( FileSet ) it . next ( ) ; 
 + / * * 
 + * returns the list of files ( full path name ) to process . 
 + * @ return the list of files included via the filesets . 
 + * / 
 + protected String [ ] scanFileSets ( ) 
 + { 
 + final ArrayList list = new ArrayList ( ) ; 
 + if ( mFileName ! = null ) { 
 + / / oops we ' ve got an additional one to process , don ' t 
 + / / forget it . No sweat , it ' s fully resolved via the setter . 
 + log ( " Adding standalone file for audit " , Project . MSG _ VERBOSE ) ; 
 + list . add ( mFileName ) ; 
 + } 
 + for ( int i = 0 ; i < mFileSets . size ( ) ; i + + ) { 
 + final FileSet fs = ( FileSet ) mFileSets . get ( i ) ; 
 final DirectoryScanner ds = fs . getDirectoryScanner ( project ) ; 
 - numErrs + = process ( fs . getDir ( project ) . getAbsolutePath ( ) , 
 - ds . getIncludedFiles ( ) , 
 - c ) ; 
 + ds . scan ( ) ; 
 + 
 + final String [ ] names = ds . getIncludedFiles ( ) ; 
 + log ( i + " ) Adding " + names . length + " files from directory " + 
 + ds . getBasedir ( ) , Project . MSG _ VERBOSE ) ; 
 + 
 + for ( int j = 0 ; j < names . length ; j + + ) { 
 + final String pathname = 
 + ds . getBasedir ( ) + File . separator + names [ j ] ; 
 + list . add ( pathname ) ; 
 + } 
 } 
 
 - c . destroy ( ) ; 
 + return ( String [ ] ) list . toArray ( new String [ 0 ] ) ; 
 + } 
 
 - if ( numErrs > 0 ) { 
 - throw new BuildException ( " Got " + numErrs + " errors . " , location ) ; 
 + / * * 
 + * Poor mans enumeration for the formatter types . 
 + * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > 
 + * / 
 + public static class FormatterType 
 + extends EnumeratedAttribute 
 + { 
 + / * * my possible values * * / 
 + private static final String [ ] VALUES = { E _ XML , E _ PLAIN } ; 
 + 
 + / * * @ see EnumeratedAttribute * * / 
 + public String [ ] getValues ( ) 
 + { 
 + return VALUES ; 
 } 
 } 
 
 / * * 
 - * Processes the list of files . 
 - * @ return the number of errors found 
 - * @ param aDir absolute path to directory containing files 
 - * @ param aFiles the files to process 
 - * @ param aChecker the checker to process the files with 
 - * * / 
 - private int process ( String aDir , String [ ] aFiles , Checker aChecker ) 
 + * Details about a formatter to be used . 
 + * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > 
 + * / 
 + public static class Formatter 
 { 
 - int retVal = 0 ; 
 - for ( int i = 0 ; i < aFiles . length ; i + + ) { 
 - retVal + = aChecker . process ( aDir + File . separator + aFiles [ i ] ) ; 
 + / * * class name of formatter * * / 
 + private String mClassName = null ; 
 + / * * whether formatter users a file * * / 
 + private boolean mUseFile = true ; 
 + / * * the file to output to * * / 
 + private File mToFile = null ; 
 + 
 + / * * 
 + * Set the type of the formatter . 
 + * @ param aType the type 
 + * / 
 + public void setType ( FormatterType aType ) 
 + { 
 + final String val = aType . getValue ( ) ; 
 + if ( E _ XML . equals ( val ) ) { 
 + setClassname ( XMLLogger . class . getName ( ) ) ; 
 + } 
 + else if ( E _ PLAIN . equals ( val ) ) { 
 + setClassname ( DefaultLogger . class . getName ( ) ) ; 
 + } 
 + else { 
 + throw new BuildException ( " Invalid formatter type : " + val ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Set the class name of the formatter . 
 + * @ param aTo the formatter class name 
 + * / 
 + public void setClassname ( String aTo ) 
 + { 
 + mClassName = aTo ; 
 + } 
 + 
 + / * * 
 + * Set the file to output to . 
 + * @ param aTo the file to output to 
 + * / 
 + public void setTofile ( File aTo ) 
 + { 
 + mToFile = aTo ; 
 + } 
 + 
 + / * * 
 + * Creates a listener for the formatter . 
 + * @ param aTask the task running 
 + * @ return a listener 
 + * @ throws ClassNotFoundException if an error occurs 
 + * @ throws InstantiationException if an error occurs 
 + * @ throws IllegalAccessException if an error occurs 
 + * @ throws IOException if an error occurs 
 + * / 
 + public AuditListener createListener ( Task aTask ) 
 + throws ClassNotFoundException , InstantiationException , 
 + IllegalAccessException , IOException 
 + { 
 + final Class clazz = Class . forName ( mClassName ) ; 
 + final AuditListener listener = ( AuditListener ) clazz . newInstance ( ) ; 
 + if ( listener instanceof Streamable ) { 
 + final Streamable o = ( Streamable ) listener ; 
 + o . setOutputStream ( createOutputStream ( aTask ) ) ; 
 + } 
 + return listener ; 
 + } 
 + 
 + / * * 
 + * @ return an output stream to log with 
 + * @ param aTask the task to possibly log to 
 + * @ throws IOException if an error occurs 
 + * / 
 + protected OutputStream createOutputStream ( Task aTask ) 
 + throws IOException 
 + { 
 + if ( mToFile = = null ) { 
 + return new LogOutputStream ( aTask , Project . MSG _ INFO ) ; 
 + } 
 + return new FileOutputStream ( mToFile ) ; 
 } 
 - return retVal ; 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 index 0475d78 . . 1f4b1d1 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 21 , 20 + 21 , 23 @ @ package com . puppycrawl . tools . checkstyle ; 
 import antlr . RecognitionException ; 
 import antlr . TokenStreamException ; 
 import antlr . collections . AST ; 
 + import java . io . File ; 
 import java . io . FileNotFoundException ; 
 import java . io . FileReader ; 
 import java . io . IOException ; 
 import java . io . LineNumberReader ; 
 + import java . io . OutputStream ; 
 import java . io . PrintStream ; 
 import java . util . ArrayList ; 
 + import java . util . Iterator ; 
 import java . util . Properties ; 
 import org . apache . regexp . RESyntaxException ; 
 - import java . io . File ; 
 
 / * * 
 * This class provides the functionality to check a file . 
 * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > 
 - * * / 
 + * @ author < a href = " mailto : stephane . bailliez @ wanadoo . fr " > Stephane Bailliez < / a > 
 + * / 
 class Checker 
 implements Defn 
 { 
 @ @ - 44 , 6 + 47 , 9 @ @ class Checker 
 / * * cache file * * / 
 private final PropertyCacheFile mCache ; 
 
 + / * * vector of listeners * / 
 + private final ArrayList mListeners = new ArrayList ( ) ; 
 + 
 / * * 
 * Constructs the object . 
 * @ param aConfig contains the configuration to check with 
 @ @ - 63 , 6 + 69 , 54 @ @ class Checker 
 void destroy ( ) 
 { 
 mCache . destroy ( ) ; 
 + 
 + / / close all streamable listeners 
 + final Iterator it = mListeners . iterator ( ) ; 
 + while ( it . hasNext ( ) ) { 
 + final Object obj = it . next ( ) ; 
 + if ( obj instanceof Streamable ) { 
 + final Streamable str = ( Streamable ) obj ; 
 + final OutputStream os = str . getOutputStream ( ) ; 
 + / / close only those that can be closed . . . 
 + if ( ( os ! = System . out ) & & ( os ! = System . err ) & & ( os ! = null ) ) { 
 + try { 
 + os . flush ( ) ; 
 + os . close ( ) ; 
 + } 
 + catch ( IOException ignored ) { 
 + } 
 + } 
 + } 
 + it . remove ( ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Add the listener that will be used to receive events from the audit 
 + * @ param aListener the nosy thing 
 + * / 
 + void addListener ( AuditListener aListener ) 
 + { 
 + mListeners . add ( aListener ) ; 
 + } 
 + 
 + / * * 
 + * Processes a set of files . 
 + * Once this is done , it is highly recommended to call for 
 + * the destroy method to close and remove the listeners . 
 + * @ param aFiles the list of files to be audited . 
 + * @ return the total number of errors found 
 + * @ see destroy ( ) 
 + * / 
 + int process ( String [ ] aFiles ) 
 + { 
 + int total = 0 ; 
 + fireAuditStarted ( ) ; 
 + for ( int i = 0 ; i < aFiles . length ; i + + ) { 
 + total + = process ( aFiles [ i ] ) ; 
 + } 
 + fireAuditFinished ( ) ; 
 + return total ; 
 } 
 
 / * * 
 @ @ - 70 , 15 + 124 , 17 @ @ class Checker 
 * @ return the number of errors found 
 * @ param aFileName the name of the file to process 
 * * / 
 - int process ( String aFileName ) 
 + private int process ( String aFileName ) 
 { 
 - final long timestamp = new File ( aFileName ) . lastModified ( ) ; 
 + final File f = new File ( aFileName ) ; 
 + final long timestamp = f . lastModified ( ) ; 
 if ( mCache . alreadyChecked ( aFileName , timestamp ) ) { 
 return 0 ; 
 } 
 
 LineText [ ] errors ; 
 try { 
 + fireFileStarted ( aFileName ) ; 
 VerifierSingleton . getInstance ( ) . clearMessages ( ) ; 
 VerifierSingleton . getInstance ( ) . setLines ( getLines ( aFileName ) ) ; 
 final AST ast = getAST ( aFileName ) ; 
 @ @ - 95 , 8 + 151 , 7 @ @ class Checker 
 catch ( RecognitionException re ) { 
 errors = new LineText [ ] { 
 new LineText ( 0 , 
 - " Got a RecognitionException - " + 
 - re . getMessage ( ) ) } ; 
 + " Got a RecognitionException - " + re . getMessage ( ) ) } ; 
 } 
 catch ( TokenStreamException te ) { 
 errors = new LineText [ ] { 
 @ @ - 108 , 8 + 163 , 10 @ @ class Checker 
 mCache . checkedOk ( aFileName , timestamp ) ; 
 } 
 else { 
 - displayErrors ( aFileName , errors ) ; 
 + fireErrors ( aFileName , errors ) ; 
 } 
 + 
 + fireFileFinished ( aFileName ) ; 
 return errors . length ; 
 } 
 
 @ @ - 173 , 20 + 230 , 6 @ @ class Checker 
 } 
 
 / * * 
 - * Displays the errors associated with a file name . The errors are formatted 
 - * to be parsed by Emacs . 
 - * @ param aFileName the file name to associate with the errors 
 - * @ param aErrors the errors to display 
 - * * / 
 - private void displayErrors ( String aFileName , LineText [ ] aErrors ) 
 - { 
 - for ( int i = 0 ; i < aErrors . length ; i + + ) { 
 - mLog . println ( aFileName + " : " + aErrors [ i ] . getLineNo ( ) + 
 - " : " + aErrors [ i ] . getText ( ) ) ; 
 - } 
 - } 
 - 
 - / * * 
 * @ return the header lines specified by a file in the supplied properties 
 * set . If no file specified , or unable to read specified file , then an 
 * empty list is returned . Errors are reported . 
 @ @ - 208 , 5 + 251 , 72 @ @ class Checker 
 return retVal ; 
 } 
 
 + / * * notify all listeners about the audit start * / 
 + protected void fireAuditStarted ( ) 
 + { 
 + final AuditEvent evt = new AuditEvent ( this ) ; 
 + final Iterator it = mListeners . iterator ( ) ; 
 + while ( it . hasNext ( ) ) { 
 + final AuditListener listener = ( AuditListener ) it . next ( ) ; 
 + listener . auditStarted ( evt ) ; 
 + } 
 + } 
 + 
 + / * * notify all listeners about the audit end * / 
 + protected void fireAuditFinished ( ) 
 + { 
 + final AuditEvent evt = new AuditEvent ( this ) ; 
 + final Iterator it = mListeners . iterator ( ) ; 
 + while ( it . hasNext ( ) ) { 
 + final AuditListener listener = ( AuditListener ) it . next ( ) ; 
 + listener . auditFinished ( evt ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * notify all listeners about the beginning of a file audit 
 + * @ param aFileName the file to be audited 
 + * / 
 + protected void fireFileStarted ( String aFileName ) 
 + { 
 + final AuditEvent evt = new AuditEvent ( this , aFileName ) ; 
 + final Iterator it = mListeners . iterator ( ) ; 
 + while ( it . hasNext ( ) ) { 
 + final AuditListener listener = ( AuditListener ) it . next ( ) ; 
 + listener . fileStarted ( evt ) ; 
 + } 
 + } 
 
 + / * * 
 + * notify all listeners about the end of a file audit 
 + * @ param aFileName the audited file 
 + * / 
 + protected void fireFileFinished ( String aFileName ) 
 + { 
 + final AuditEvent evt = new AuditEvent ( this , aFileName ) ; 
 + final Iterator it = mListeners . iterator ( ) ; 
 + while ( it . hasNext ( ) ) { 
 + final AuditListener listener = ( AuditListener ) it . next ( ) ; 
 + listener . fileFinished ( evt ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * notify all listeners about the errors in a file . 
 + * @ param aFileName the audited file 
 + * @ param aErrors the audit errors from the file 
 + * / 
 + protected void fireErrors ( String aFileName , LineText [ ] aErrors ) 
 + { 
 + for ( int i = 0 ; i < aErrors . length ; i + + ) { 
 + final AuditEvent evt = 
 + new AuditEvent ( this , aFileName , aErrors [ i ] . getLineNo ( ) , 
 + aErrors [ i ] . getText ( ) ) ; 
 + final Iterator it = mListeners . iterator ( ) ; 
 + while ( it . hasNext ( ) ) { 
 + final AuditListener listener = ( AuditListener ) it . next ( ) ; 
 + listener . addError ( evt ) ; 
 + } 
 + } 
 + } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 index 2ecc4ac . . 6da04f1 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 18 , 7 + 18 , 10 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle ; 
 
 + import java . io . FileNotFoundException ; 
 + import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 + import java . io . OutputStream ; 
 import org . apache . regexp . RESyntaxException ; 
 
 / * * 
 @ @ - 38 , 11 + 41 , 54 @ @ public final class Main 
 usage ( ) ; 
 } 
 
 + / / be brain dead about arguments parsing 
 + String format = " plain " ; 
 + String output = null ; 
 + String [ ] files = null ; 
 + for ( int i = 0 ; i < aArgs . length ; i + + ) { 
 + if ( " - f " . equals ( aArgs [ i ] ) ) { 
 + format = aArgs [ + + i ] ; 
 + } 
 + else if ( " - o " . equals ( aArgs [ i ] ) ) { 
 + output = aArgs [ + + i ] ; 
 + } 
 + else { 
 + files = new String [ aArgs . length - i ] ; 
 + System . arraycopy ( aArgs , i , files , 0 , files . length ) ; 
 + break ; 
 + } 
 + } 
 + 
 + / / create the appropriate listener 
 + OutputStream out = System . out ; 
 + if ( output ! = null ) { 
 + try { 
 + out = new FileOutputStream ( output ) ; 
 + } 
 + catch ( FileNotFoundException e ) { 
 + System . out . println ( " Could not find file : ' " + output + " ' " ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + } 
 + AuditListener listener = null ; 
 + if ( " xml " . equals ( format ) ) { 
 + listener = new XMLLogger ( out ) ; 
 + } 
 + else if ( " plain " . equals ( format ) ) { 
 + listener = new DefaultLogger ( out ) ; 
 + } 
 + else { 
 + System . out . println ( " Invalid format : ( " + format + 
 + " ) . Must be ' plain ' or ' xml ' . " ) ; 
 + usage ( ) ; 
 + } 
 + 
 Checker c = null ; 
 try { 
 c = new Checker ( new Configuration ( System . getProperties ( ) , 
 System . out ) , 
 System . out ) ; 
 + c . addListener ( listener ) ; 
 } 
 catch ( RESyntaxException rese ) { 
 System . out . println ( " Unable to create an regexp object : " + 
 @ @ - 56 , 13 + 102 , 10 @ @ public final class Main 
 System . exit ( 1 ) ; 
 } 
 
 - int numErrors = 0 ; 
 - for ( int i = 0 ; i < aArgs . length ; i + + ) { 
 - numErrors + = c . process ( aArgs [ i ] ) ; 
 - } 
 + final int numErrs = c . process ( files ) ; 
 
 c . destroy ( ) ; 
 - System . exit ( numErrors ) ; 
 + System . exit ( numErrs ) ; 
 } 
 
 / * * Prints the usage information . * * / 
 @ @ - 70 , 7 + 113 , 13 @ @ public final class Main 
 { 
 System . out . println ( 
 " Usage : java " + 
 - com . puppycrawl . tools . checkstyle . Main . class . getName ( ) + " file . . . " ) ; 
 + Main . class . getName ( ) + " < options > < file1 > < file2 > . . . . . . " ) ; 
 + System . out . println ( " Options " ) ; 
 + System . out . println ( 
 + " \ t - f < format > \ tsets output format . ( plain | xml ) . " + 
 + " Default to plain . " ) ; 
 + System . out . println ( " \ t - o < file > \ tsets output file name . " + 
 + " Defaults to stdout " ) ; 
 System . exit ( 1 ) ; 
 } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 7ff73ad . . 503b113 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 6 , 14 + 6 , 33 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 import java . io . LineNumberReader ; 
 + import java . io . OutputStream ; 
 import java . io . PrintStream ; 
 import java . net . URL ; 
 import java . util . Properties ; 
 import junit . framework . TestCase ; 
 + import org . apache . regexp . RESyntaxException ; 
 
 public class CheckerTest 
 extends TestCase 
 { 
 + / * * a brief logger that only display info about errors * / 
 + protected static class BriefLogger 
 + extends DefaultLogger 
 + { 
 + public BriefLogger ( OutputStream out ) 
 + { 
 + super ( out ) ; 
 + } 
 + public void auditStarted ( AuditEvent evt ) { } 
 + public void fileFinished ( AuditEvent evt ) { } 
 + public void fileStarted ( AuditEvent evt ) { } 
 + / / public void auditFinished ( AuditEvent evt ) { 
 + 
 + / / writer . flush ( ) ; 
 + / / } 
 + } 
 + 
 private final ByteArrayOutputStream mBAOS = new ByteArrayOutputStream ( ) ; 
 private final PrintStream mStream = new PrintStream ( mBAOS ) ; 
 private final Configuration mConfig = new Configuration ( ) ; 
 @ @ - 36 , 10 + 55 , 20 @ @ public class CheckerTest 
 return f . getCanonicalPath ( ) ; 
 } 
 
 + protected Checker createChecker ( ) 
 + throws RESyntaxException 
 + { 
 + final AuditListener listener = new BriefLogger ( mStream ) ; 
 + final Checker c = new Checker ( mConfig , mStream ) ; 
 + c . addListener ( listener ) ; 
 + return c ; 
 + } 
 + 
 private void verify ( Checker aC , String aFilename , String [ ] aExpected ) 
 throws Exception 
 { 
 - final int errs = aC . process ( aFilename ) ; 
 + mStream . flush ( ) ; 
 + final int errs = aC . process ( new String [ ] { aFilename } ) ; 
 
 / / process each of the lines 
 final ByteArrayInputStream bais = 
 @ @ - 57 , 7 + 86 , 7 @ @ public class CheckerTest 
 public void testWhitespace ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputWhitespace . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 79 , 7 + 108 , 7 @ @ public class CheckerTest 
 throws Exception 
 { 
 mConfig . setIgnoreWhitespace ( true ) ; 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputWhitespace . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 91 , 7 + 120 , 7 @ @ public class CheckerTest 
 public void testBraces ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputBraces . java " ) ; 
 final String [ ] expected = { 
 filepath + " : 29 : ' do ' construct must use ' { } ' s . " , 
 @ @ - 122 , 7 + 151 , 7 @ @ public class CheckerTest 
 throws Exception 
 { 
 mConfig . setIgnoreBraces ( true ) ; 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputBraces . java " ) ; 
 final String [ ] expected = { 
 filepath + " : 41 : ' ; ' is not preceeded with whitespace . " , 
 @ @ - 135 , 7 + 164 , 7 @ @ public class CheckerTest 
 public void testTags ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputTags . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 166 , 7 + 195 , 7 @ @ public class CheckerTest 
 public void testInner ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputInner . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 186 , 7 + 215 , 7 @ @ public class CheckerTest 
 throws Exception 
 { 
 mConfig . setPublicMemberPat ( " ^ r [ A - Z ] " ) ; 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputInner . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 205 , 7 + 234 , 7 @ @ public class CheckerTest 
 public void testSimple ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputSimple . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 231 , 7 + 260 , 7 @ @ public class CheckerTest 
 public void testStrictJavadoc ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputPublicOnly . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 269 , 7 + 298 , 7 @ @ public class CheckerTest 
 throws Exception 
 { 
 mConfig . setRelaxJavadoc ( true ) ; 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputPublicOnly . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 295 , 7 + 324 , 7 @ @ public class CheckerTest 
 public void testHeader ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " inputHeader . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = { 
 @ @ - 309 , 7 + 338 , 7 @ @ public class CheckerTest 
 public void testImport ( ) 
 throws Exception 
 { 
 - final Checker c = new Checker ( mConfig , mStream ) ; 
 + final Checker c = createChecker ( ) ; 
 final String filepath = getPath ( " InputImport . java " ) ; 
 assertNotNull ( c ) ; 
 final String [ ] expected = {
