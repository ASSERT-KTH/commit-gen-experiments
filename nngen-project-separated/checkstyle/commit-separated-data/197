BLEU SCORE: 0.06837203339116285

TEST MSG: Issue # 6043 : update links to html reports for guava and sun
GENERATED MSG: fix for URL to checkstyle web site for guava project

TEST DIFF (one line): diff - - git a / src / xdocs / google _ style . xml b / src / xdocs / google _ style . xml <nl> index c24a14a . . 1e822f3 100644 <nl> - - - a / src / xdocs / google _ style . xml <nl> + + + b / src / xdocs / google _ style . xml <nl> @ @ - 28 , 7 + 28 , 7 @ @ <nl> < / p > <nl> <nl> < p > <nl> - < a href = " reports / google - style / guava / " > <nl> + < a href = " http : / / checkstyle . sourceforge . net / reports / google - style / guava / " > <nl> Checkstyle ' s html report for Guava library < / a > <nl> < / p > <nl> < p > <nl> diff - - git a / src / xdocs / sun _ style . xml b / src / xdocs / sun _ style . xml <nl> index 4e2d036 . . a8f5479 100644 <nl> - - - a / src / xdocs / sun _ style . xml <nl> + + + b / src / xdocs / sun _ style . xml <nl> @ @ - 27 , 7 + 27 , 7 @ @ <nl> < / p > <nl> <nl> < p > <nl> - < a href = " reports / javadoc / openjdk8 / " > <nl> + < a href = " http : / / checkstyle . sourceforge . net / reports / javadoc / openjdk8 / " > <nl> Checkstyle ' s html report for Open JDK library ( javadoc validation ) < / a > <nl> < / p > <nl> < p >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> index dc6d445 . . 89b14e8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> @ @ - 735 , 6 + 735 , 12 @ @ public final class TokenTypes <nl> * @ see FullIdent <nl> * * / <nl> public static final int METHOD _ CALL = GeneratedJavaTokenTypes . METHOD _ CALL ; <nl> + <nl> + 	 / * * <nl> + 	 * Part of Java 8 syntax . Method or constructor call without arguments . <nl> + 	 * @ see # DOUBLE _ COLON <nl> + 	 * / <nl> + 	 public static final int METHOD _ REF = GeneratedJavaTokenTypes . METHOD _ REF ; <nl> / * * <nl> * An expression . Operators with lower precedence appear at a <nl> * higher level in the tree than operators with higher precedence . <nl> @ @ - 1488 , 6 + 1494 , 12 @ @ public final class TokenTypes <nl> * @ see # CASE _ GROUP <nl> * * / <nl> public static final int COLON = GeneratedJavaTokenTypes . COLON ; <nl> + <nl> + 	 / * * <nl> + 	 * The < code > : : < / code > ( double colon ) operator . It is part of Java 8 syntax that is used for method reference . <nl> + 	 * @ see # METHOD _ REF <nl> + 	 * / <nl> + 	 public static final int DOUBLE _ COLON = GeneratedJavaTokenTypes . DOUBLE _ COLON ; <nl> / * * <nl> * The < code > if < / code > keyword . <nl> * <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> index a9d0845 . . e8e34c7 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> @ @ - 45 , 7 + 45 , 7 @ @ tokens { <nl> 	 INSTANCE _ INIT ; STATIC _ INIT ; TYPE ; CLASS _ DEF ; INTERFACE _ DEF ; <nl> 	 PACKAGE _ DEF ; ARRAY _ DECLARATOR ; EXTENDS _ CLAUSE ; IMPLEMENTS _ CLAUSE ; <nl> 	 PARAMETERS ; PARAMETER _ DEF ; LABELED _ STAT ; TYPECAST ; INDEX _ OP ; <nl> - 	 POST _ INC ; POST _ DEC ; METHOD _ CALL ; EXPR ; ARRAY _ INIT ; <nl> + 	 POST _ INC ; POST _ DEC ; METHOD _ CALL ; METHOD _ REF ; EXPR ; ARRAY _ INIT ; <nl> 	 IMPORT ; UNARY _ MINUS ; UNARY _ PLUS ; CASE _ GROUP ; ELIST ; FOR _ INIT ; FOR _ CONDITION ; <nl> 	 FOR _ ITERATOR ; EMPTY _ STAT ; FINAL = " final " ; ABSTRACT = " abstract " ; <nl> 	 STRICTFP = " strictfp " ; SUPER _ CTOR _ CALL ; CTOR _ CALL ; <nl> @ @ - 63 , 7 + 63 , 7 @ @ tokens { <nl> LITERAL _ class = " class " ; LITERAL _ extends = " extends " ; <nl> LITERAL _ interface = " interface " ; LCURLY ; RCURLY ; COMMA ; <nl> LITERAL _ implements = " implements " ; LPAREN ; RPAREN ; LITERAL _ this = " this " ; <nl> - LITERAL _ super = " super " ; ASSIGN ; LITERAL _ throws = " throws " ; COLON ; <nl> + LITERAL _ super = " super " ; ASSIGN ; LITERAL _ throws = " throws " ; COLON ; DOUBLE _ COLON ; <nl> LITERAL _ if = " if " ; LITERAL _ while = " while " ; LITERAL _ do = " do " ; <nl> LITERAL _ break = " break " ; LITERAL _ continue = " continue " ; LITERAL _ return = " return " ; <nl> LITERAL _ switch = " switch " ; LITERAL _ throw = " throw " ; LITERAL _ for = " for " ; <nl> @ @ - 256 , 16 + 256 , 16 @ @ classTypeSpec [ boolean addImagNode ] <nl> 	 ; <nl> <nl> classOrInterfaceType [ boolean addImagNode ] <nl> - 	 : IDENT ( typeArguments [ addImagNode ] ) ? <nl> - ( options { greedy = true ; } : / / match as many as possible <nl> + 	 : IDENT ( options { warnWhenFollowAmbig = false ; } : typeArguments [ addImagNode ] ) ? <nl> + ( options { greedy = true ; } : / / match as many as possible <nl> DOT ^ <nl> - IDENT ( typeArguments [ addImagNode ] ) ? <nl> + IDENT ( options { warnWhenFollowAmbig = false ; } : typeArguments [ addImagNode ] ) ? <nl> ) * <nl> ; <nl> <nl> / / A generic type argument is a class type , a possibly bounded wildcard type or a built - in type array <nl> typeArgument [ boolean addImagNode ] <nl> - 	 : ( classTypeSpec [ addImagNode ] <nl> + : ( classTypeSpec [ addImagNode ] <nl> 	 | builtInTypeArraySpec [ addImagNode ] <nl> 	 | wildcardType [ addImagNode ] <nl> 	 ) <nl> @ @ - 965 , 7 + 965 , 7 @ @ multiCatchTypes <nl> / / Inside a class definition without " static " : <nl> / / it is an instance initializer <nl> / / As the body of a method <nl> - / / As a completely indepdent braced block of code inside a method <nl> + / / As a completely independent braced block of code inside a method <nl> / / it starts a new scope for variable definitions <nl> <nl> compoundStatement <nl> @ @ - 1385 , 12 + 1385 , 23 @ @ postfixExpression <nl> 	 	 	 | " class " <nl> 	 	 	 | newExpression <nl> 	 	 	 ) <nl> + <nl> + 	 	 	 / / Java 8 method references . For example : List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; numbers . forEach ( System . out : : println ) ; <nl> + 	 	 | <nl> + 	 	 	 dc : DOUBLE _ COLON ^ { # dc . setType ( METHOD _ REF ) ; } <nl> + 	 	 	 ( <nl> + 	 	 	 	 ( typeArguments [ false ] ) ? <nl> + 	 	 	 	 	 ( IDENT <nl> + 	 	 	 	 | LITERAL _ new ) <nl> + 	 	 	 ) <nl> + <nl> 	 	 	 / / the above line needs a semantic check to make sure " class " <nl> 	 	 	 / / is the _ last _ qualifier . <nl> <nl> - 	 	 	 / / allow ClassName [ ] . class <nl> - 	 	 | 	 ( lbc : LBRACK ^ { # lbc . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) + <nl> - 	 	 	 DOT ^ " class " <nl> + 	 	 	 / / allow ClassName [ ] . class or just ClassName [ ] <nl> + 	 	 | 	 ( options { warnWhenFollowAmbig = false ; } : lbc : LBRACK ^ { # lbc . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) + <nl> + 	 	 	 / / Since java 8 here can be method reference <nl> + 	 	 	 ( options { warnWhenFollowAmbig = false ; } : DOT ^ " class " ) ? <nl> <nl> 	 	 	 / / an array indexing operation <nl> 	 	 | 	 lb : LBRACK ^ { # lb . setType ( INDEX _ OP ) ; } expression RBRACK <nl> @ @ - 1418 , 7 + 1429 , 7 @ @ postfixExpression <nl> <nl> / / the basic element of an expression <nl> primaryExpression <nl> - 	 : 	 IDENT <nl> + 	 : IDENT ( ( typeArguments [ false ] DOUBLE _ COLON ) = > typeArguments [ false ] ) ? <nl> 	 | 	 constant <nl> 	 | 	 " true " <nl> 	 | 	 " false " <nl> @ @ - 1427 , 10 + 1438 , 11 @ @ primaryExpression <nl> 	 | 	 newExpression <nl> 	 | 	 LPAREN assignmentExpression RPAREN <nl> 	 | 	 " super " <nl> - 	 	 / / look for int . class and int [ ] . class <nl> + 	 	 / / look for int . class and int [ ] . class and int [ ] <nl> 	 | 	 builtInType <nl> - 	 	 ( lbt : LBRACK ^ { # lbt . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * <nl> - 	 	 DOT ^ " class " <nl> + 	 	 ( options { warnWhenFollowAmbig = false ; } : lbt : LBRACK ^ { # lbt . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * <nl> + 	 	 / / Since java 8 here can be method reference <nl> + 	 	 ( options { warnWhenFollowAmbig = false ; } : DOT ^ " class " ) ? <nl> 	 ; <nl> <nl> / * * object instantiation . <nl> @ @ - 1593 , 6 + 1605 , 7 @ @ RBRACK 	 	 	 : 	 ' ] ' 	 	 ; <nl> LCURLY 	 	 	 : 	 ' { ' 	 	 ; <nl> RCURLY 	 	 	 : 	 ' } ' 	 	 ; <nl> COLON 	 	 	 : 	 ' : ' 	 	 ; <nl> + DOUBLE _ COLON 	 : 	 " : : " 	 ; <nl> COMMA 	 	 	 : 	 ' , ' 	 	 ; <nl> / / DOT 	 	 	 : 	 ' . ' 	 	 ; <nl> ASSIGN 	 	 	 : 	 ' = ' 	 	 ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java <nl> new file mode 100644 <nl> index 0000000 . . 6d83077 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java <nl> @ @ - 0 , 0 + 1 , 32 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> + <nl> + public class MethodReferencesTest extends BaseCheckTestSupport { <nl> + <nl> + 	 @ Test <nl> + 	 public void testCanParse ( ) <nl> + 	 	 	 throws Exception <nl> + 	 { <nl> + 	 	 final DefaultConfiguration checkConfig = <nl> + 	 	 	 	 createCheckConfig ( MemberNameCheck . class ) ; <nl> + 	 	 final String [ ] expected = { } ; <nl> + 	 	 verify ( checkConfig , getPath ( " grammars / java8 / InputMethodReferencesTest . java " ) , expected ) ; <nl> + <nl> + 	 } <nl> + <nl> + 	 @ Test <nl> + 	 public void testFromSpec ( ) <nl> + 	 	 	 throws Exception <nl> + 	 { <nl> + 	 	 final DefaultConfiguration checkConfig = <nl> + 	 	 	 	 createCheckConfig ( MemberNameCheck . class ) ; <nl> + 	 	 final String [ ] expected = { } ; <nl> + 	 	 verify ( checkConfig , getPath ( " grammars / java8 / InputMethodReferencesTest2 . java " ) , expected ) ; <nl> + <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest . java <nl> new file mode 100644 <nl> index 0000000 . . 3ac064b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest . java <nl> @ @ - 0 , 0 + 1 , 23 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + public class InputMethodReferencesTest { <nl> + 	 <nl> + 	 public static void main ( String [ ] args ) { <nl> + 	 	 <nl> + 	 	 List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; <nl> + 	 	 <nl> + 	 	 numbers . forEach ( System . out : : println ) ; <nl> + 	 	 InputMethodReferences < String > tl = new InputMethodReferences < String > ( ) ; <nl> + <nl> + 	 	 Set < Person > rosterSet = transferElements ( roster , HashSet < Person > : : new ) ; <nl> + <nl> + 	 	 numbers . forEach ( this : : println ) ; <nl> + 	 	 <nl> + 	 	 numbers . forEach ( super : : println ) ; <nl> + 	 	 <nl> + 	 } <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest2 . java <nl> new file mode 100644 <nl> index 0000000 . . 5b0c26b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest2 . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + public class InputMethodReferencesTest2 { <nl> + 	 <nl> + 	 public static void main ( String [ ] args ) { <nl> + 	 	 String : : length ; / / instance method <nl> + 	 	 System : : currentTimeMillis ; / / static method <nl> + 	 	 List < String > : : size ; / / explicit type arguments for generic type <nl> + 	 	 List : : size ; / / inferred type arguments for generic type <nl> + 	 	 int [ ] : : clone ; <nl> + 	 	 T : : tvarMember ; <nl> + <nl> + 	 	 System . out : : println ; <nl> + 	 	 " abc " : : length ; <nl> + 	 	 foo [ x ] : : bar ; <nl> + 	 	 ( test ? list . replaceAll ( String : : trim ) : list ) : : iterator ; <nl> + 	 	 super : : toString ; <nl> + 	 	 <nl> + 	 	 String : : valueOf ; / / overload resolution needed <nl> + 	 	 Arrays : : sort ; / / type arguments inferred from context <nl> + 	 	 Arrays : : < String > sort ; / / explicit type arguments <nl> + 	 	 <nl> + 	 	 ArrayList < String > : : new ; / / constructor for parameterized type <nl> + 	 	 ArrayList : : new ; / / inferred type arguments <nl> + 	 	 / / for generic class <nl> + 	 	 Foo : : < Integer > new ; / / explicit type arguments <nl> + 	 	 / / for generic constructor <nl> + 	 	 Bar < String > : : < Integer > new ; / / generic class , generic constructor <nl> + 	 	 Outer . Inner : : new ; / / inner class constructor <nl> + 	 	 int [ ] : : new ; / / array creation <nl> + 	 	 <nl> + 	 } <nl> + <nl> + }

TEST DIFF:
diff - - git a / src / xdocs / google _ style . xml b / src / xdocs / google _ style . xml 
 index c24a14a . . 1e822f3 100644 
 - - - a / src / xdocs / google _ style . xml 
 + + + b / src / xdocs / google _ style . xml 
 @ @ - 28 , 7 + 28 , 7 @ @ 
 < / p > 
 
 < p > 
 - < a href = " reports / google - style / guava / " > 
 + < a href = " http : / / checkstyle . sourceforge . net / reports / google - style / guava / " > 
 Checkstyle ' s html report for Guava library < / a > 
 < / p > 
 < p > 
 diff - - git a / src / xdocs / sun _ style . xml b / src / xdocs / sun _ style . xml 
 index 4e2d036 . . a8f5479 100644 
 - - - a / src / xdocs / sun _ style . xml 
 + + + b / src / xdocs / sun _ style . xml 
 @ @ - 27 , 7 + 27 , 7 @ @ 
 < / p > 
 
 < p > 
 - < a href = " reports / javadoc / openjdk8 / " > 
 + < a href = " http : / / checkstyle . sourceforge . net / reports / javadoc / openjdk8 / " > 
 Checkstyle ' s html report for Open JDK library ( javadoc validation ) < / a > 
 < / p > 
 < p >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 index dc6d445 . . 89b14e8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 @ @ - 735 , 6 + 735 , 12 @ @ public final class TokenTypes 
 * @ see FullIdent 
 * * / 
 public static final int METHOD _ CALL = GeneratedJavaTokenTypes . METHOD _ CALL ; 
 + 
 + 	 / * * 
 + 	 * Part of Java 8 syntax . Method or constructor call without arguments . 
 + 	 * @ see # DOUBLE _ COLON 
 + 	 * / 
 + 	 public static final int METHOD _ REF = GeneratedJavaTokenTypes . METHOD _ REF ; 
 / * * 
 * An expression . Operators with lower precedence appear at a 
 * higher level in the tree than operators with higher precedence . 
 @ @ - 1488 , 6 + 1494 , 12 @ @ public final class TokenTypes 
 * @ see # CASE _ GROUP 
 * * / 
 public static final int COLON = GeneratedJavaTokenTypes . COLON ; 
 + 
 + 	 / * * 
 + 	 * The < code > : : < / code > ( double colon ) operator . It is part of Java 8 syntax that is used for method reference . 
 + 	 * @ see # METHOD _ REF 
 + 	 * / 
 + 	 public static final int DOUBLE _ COLON = GeneratedJavaTokenTypes . DOUBLE _ COLON ; 
 / * * 
 * The < code > if < / code > keyword . 
 * 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 index a9d0845 . . e8e34c7 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 @ @ - 45 , 7 + 45 , 7 @ @ tokens { 
 	 INSTANCE _ INIT ; STATIC _ INIT ; TYPE ; CLASS _ DEF ; INTERFACE _ DEF ; 
 	 PACKAGE _ DEF ; ARRAY _ DECLARATOR ; EXTENDS _ CLAUSE ; IMPLEMENTS _ CLAUSE ; 
 	 PARAMETERS ; PARAMETER _ DEF ; LABELED _ STAT ; TYPECAST ; INDEX _ OP ; 
 - 	 POST _ INC ; POST _ DEC ; METHOD _ CALL ; EXPR ; ARRAY _ INIT ; 
 + 	 POST _ INC ; POST _ DEC ; METHOD _ CALL ; METHOD _ REF ; EXPR ; ARRAY _ INIT ; 
 	 IMPORT ; UNARY _ MINUS ; UNARY _ PLUS ; CASE _ GROUP ; ELIST ; FOR _ INIT ; FOR _ CONDITION ; 
 	 FOR _ ITERATOR ; EMPTY _ STAT ; FINAL = " final " ; ABSTRACT = " abstract " ; 
 	 STRICTFP = " strictfp " ; SUPER _ CTOR _ CALL ; CTOR _ CALL ; 
 @ @ - 63 , 7 + 63 , 7 @ @ tokens { 
 LITERAL _ class = " class " ; LITERAL _ extends = " extends " ; 
 LITERAL _ interface = " interface " ; LCURLY ; RCURLY ; COMMA ; 
 LITERAL _ implements = " implements " ; LPAREN ; RPAREN ; LITERAL _ this = " this " ; 
 - LITERAL _ super = " super " ; ASSIGN ; LITERAL _ throws = " throws " ; COLON ; 
 + LITERAL _ super = " super " ; ASSIGN ; LITERAL _ throws = " throws " ; COLON ; DOUBLE _ COLON ; 
 LITERAL _ if = " if " ; LITERAL _ while = " while " ; LITERAL _ do = " do " ; 
 LITERAL _ break = " break " ; LITERAL _ continue = " continue " ; LITERAL _ return = " return " ; 
 LITERAL _ switch = " switch " ; LITERAL _ throw = " throw " ; LITERAL _ for = " for " ; 
 @ @ - 256 , 16 + 256 , 16 @ @ classTypeSpec [ boolean addImagNode ] 
 	 ; 
 
 classOrInterfaceType [ boolean addImagNode ] 
 - 	 : IDENT ( typeArguments [ addImagNode ] ) ? 
 - ( options { greedy = true ; } : / / match as many as possible 
 + 	 : IDENT ( options { warnWhenFollowAmbig = false ; } : typeArguments [ addImagNode ] ) ? 
 + ( options { greedy = true ; } : / / match as many as possible 
 DOT ^ 
 - IDENT ( typeArguments [ addImagNode ] ) ? 
 + IDENT ( options { warnWhenFollowAmbig = false ; } : typeArguments [ addImagNode ] ) ? 
 ) * 
 ; 
 
 / / A generic type argument is a class type , a possibly bounded wildcard type or a built - in type array 
 typeArgument [ boolean addImagNode ] 
 - 	 : ( classTypeSpec [ addImagNode ] 
 + : ( classTypeSpec [ addImagNode ] 
 	 | builtInTypeArraySpec [ addImagNode ] 
 	 | wildcardType [ addImagNode ] 
 	 ) 
 @ @ - 965 , 7 + 965 , 7 @ @ multiCatchTypes 
 / / Inside a class definition without " static " : 
 / / it is an instance initializer 
 / / As the body of a method 
 - / / As a completely indepdent braced block of code inside a method 
 + / / As a completely independent braced block of code inside a method 
 / / it starts a new scope for variable definitions 
 
 compoundStatement 
 @ @ - 1385 , 12 + 1385 , 23 @ @ postfixExpression 
 	 	 	 | " class " 
 	 	 	 | newExpression 
 	 	 	 ) 
 + 
 + 	 	 	 / / Java 8 method references . For example : List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; numbers . forEach ( System . out : : println ) ; 
 + 	 	 | 
 + 	 	 	 dc : DOUBLE _ COLON ^ { # dc . setType ( METHOD _ REF ) ; } 
 + 	 	 	 ( 
 + 	 	 	 	 ( typeArguments [ false ] ) ? 
 + 	 	 	 	 	 ( IDENT 
 + 	 	 	 	 | LITERAL _ new ) 
 + 	 	 	 ) 
 + 
 	 	 	 / / the above line needs a semantic check to make sure " class " 
 	 	 	 / / is the _ last _ qualifier . 
 
 - 	 	 	 / / allow ClassName [ ] . class 
 - 	 	 | 	 ( lbc : LBRACK ^ { # lbc . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) + 
 - 	 	 	 DOT ^ " class " 
 + 	 	 	 / / allow ClassName [ ] . class or just ClassName [ ] 
 + 	 	 | 	 ( options { warnWhenFollowAmbig = false ; } : lbc : LBRACK ^ { # lbc . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) + 
 + 	 	 	 / / Since java 8 here can be method reference 
 + 	 	 	 ( options { warnWhenFollowAmbig = false ; } : DOT ^ " class " ) ? 
 
 	 	 	 / / an array indexing operation 
 	 	 | 	 lb : LBRACK ^ { # lb . setType ( INDEX _ OP ) ; } expression RBRACK 
 @ @ - 1418 , 7 + 1429 , 7 @ @ postfixExpression 
 
 / / the basic element of an expression 
 primaryExpression 
 - 	 : 	 IDENT 
 + 	 : IDENT ( ( typeArguments [ false ] DOUBLE _ COLON ) = > typeArguments [ false ] ) ? 
 	 | 	 constant 
 	 | 	 " true " 
 	 | 	 " false " 
 @ @ - 1427 , 10 + 1438 , 11 @ @ primaryExpression 
 	 | 	 newExpression 
 	 | 	 LPAREN assignmentExpression RPAREN 
 	 | 	 " super " 
 - 	 	 / / look for int . class and int [ ] . class 
 + 	 	 / / look for int . class and int [ ] . class and int [ ] 
 	 | 	 builtInType 
 - 	 	 ( lbt : LBRACK ^ { # lbt . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * 
 - 	 	 DOT ^ " class " 
 + 	 	 ( options { warnWhenFollowAmbig = false ; } : lbt : LBRACK ^ { # lbt . setType ( ARRAY _ DECLARATOR ) ; } RBRACK ) * 
 + 	 	 / / Since java 8 here can be method reference 
 + 	 	 ( options { warnWhenFollowAmbig = false ; } : DOT ^ " class " ) ? 
 	 ; 
 
 / * * object instantiation . 
 @ @ - 1593 , 6 + 1605 , 7 @ @ RBRACK 	 	 	 : 	 ' ] ' 	 	 ; 
 LCURLY 	 	 	 : 	 ' { ' 	 	 ; 
 RCURLY 	 	 	 : 	 ' } ' 	 	 ; 
 COLON 	 	 	 : 	 ' : ' 	 	 ; 
 + DOUBLE _ COLON 	 : 	 " : : " 	 ; 
 COMMA 	 	 	 : 	 ' , ' 	 	 ; 
 / / DOT 	 	 	 : 	 ' . ' 	 	 ; 
 ASSIGN 	 	 	 : 	 ' = ' 	 	 ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java 
 new file mode 100644 
 index 0000000 . . 6d83077 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 + 
 + public class MethodReferencesTest extends BaseCheckTestSupport { 
 + 
 + 	 @ Test 
 + 	 public void testCanParse ( ) 
 + 	 	 	 throws Exception 
 + 	 { 
 + 	 	 final DefaultConfiguration checkConfig = 
 + 	 	 	 	 createCheckConfig ( MemberNameCheck . class ) ; 
 + 	 	 final String [ ] expected = { } ; 
 + 	 	 verify ( checkConfig , getPath ( " grammars / java8 / InputMethodReferencesTest . java " ) , expected ) ; 
 + 
 + 	 } 
 + 
 + 	 @ Test 
 + 	 public void testFromSpec ( ) 
 + 	 	 	 throws Exception 
 + 	 { 
 + 	 	 final DefaultConfiguration checkConfig = 
 + 	 	 	 	 createCheckConfig ( MemberNameCheck . class ) ; 
 + 	 	 final String [ ] expected = { } ; 
 + 	 	 verify ( checkConfig , getPath ( " grammars / java8 / InputMethodReferencesTest2 . java " ) , expected ) ; 
 + 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest . java 
 new file mode 100644 
 index 0000000 . . 3ac064b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest . java 
 @ @ - 0 , 0 + 1 , 23 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + public class InputMethodReferencesTest { 
 + 	 
 + 	 public static void main ( String [ ] args ) { 
 + 	 	 
 + 	 	 List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; 
 + 	 	 
 + 	 	 numbers . forEach ( System . out : : println ) ; 
 + 	 	 InputMethodReferences < String > tl = new InputMethodReferences < String > ( ) ; 
 + 
 + 	 	 Set < Person > rosterSet = transferElements ( roster , HashSet < Person > : : new ) ; 
 + 
 + 	 	 numbers . forEach ( this : : println ) ; 
 + 	 	 
 + 	 	 numbers . forEach ( super : : println ) ; 
 + 	 	 
 + 	 } 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest2 . java 
 new file mode 100644 
 index 0000000 . . 5b0c26b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest2 . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + public class InputMethodReferencesTest2 { 
 + 	 
 + 	 public static void main ( String [ ] args ) { 
 + 	 	 String : : length ; / / instance method 
 + 	 	 System : : currentTimeMillis ; / / static method 
 + 	 	 List < String > : : size ; / / explicit type arguments for generic type 
 + 	 	 List : : size ; / / inferred type arguments for generic type 
 + 	 	 int [ ] : : clone ; 
 + 	 	 T : : tvarMember ; 
 + 
 + 	 	 System . out : : println ; 
 + 	 	 " abc " : : length ; 
 + 	 	 foo [ x ] : : bar ; 
 + 	 	 ( test ? list . replaceAll ( String : : trim ) : list ) : : iterator ; 
 + 	 	 super : : toString ; 
 + 	 	 
 + 	 	 String : : valueOf ; / / overload resolution needed 
 + 	 	 Arrays : : sort ; / / type arguments inferred from context 
 + 	 	 Arrays : : < String > sort ; / / explicit type arguments 
 + 	 	 
 + 	 	 ArrayList < String > : : new ; / / constructor for parameterized type 
 + 	 	 ArrayList : : new ; / / inferred type arguments 
 + 	 	 / / for generic class 
 + 	 	 Foo : : < Integer > new ; / / explicit type arguments 
 + 	 	 / / for generic constructor 
 + 	 	 Bar < String > : : < Integer > new ; / / generic class , generic constructor 
 + 	 	 Outer . Inner : : new ; / / inner class constructor 
 + 	 	 int [ ] : : new ; / / array creation 
 + 	 	 
 + 	 } 
 + 
 + }
