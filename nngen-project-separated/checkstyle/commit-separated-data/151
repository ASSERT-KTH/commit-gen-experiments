BLEU SCORE: 0.09027235033938245

TEST MSG: Issue # 5488 : Updated contributing . md
GENERATED MSG: doc : add link to contributing instructions to CONTRIBUTING . md

TEST DIFF (one line): diff - - git a / . github / CONTRIBUTING . md b / . github / CONTRIBUTING . md <nl> index 732c318 . . 9214c3f 100644 <nl> - - - a / . github / CONTRIBUTING . md <nl> + + + b / . github / CONTRIBUTING . md <nl> @ @ - 1 , 13 + 1 , 24 @ @ <nl> # Contributing <nl> + ! [ ] ( https : / / raw . githubusercontent . com / checkstyle / resources / master / img / checkstyle - logos / checkstyle - logo - 260x99 . png ) <nl> <nl> - Please see instructions for contributing here : <nl> - https : / / checkstyle . org / contributing . html <nl> + # # # # [ Reporting issues ] ( https : / / checkstyle . org / report _ issue . html ) <nl> + # # # # [ How to report a bug ? ] ( https : / / checkstyle . org / report _ issue . html # How _ to _ report _ a _ bug . 3F ) <nl> + # # # # [ Issue Template ] ( https : / / github . com / checkstyle / checkstyle / blob / master / . github / ISSUE _ TEMPLATE . md ) <nl> <nl> - # Reporting issues <nl> + Please provide issue report in the format that we request , EACH DETAIL IS A HUGE HELP . <nl> <nl> - Please read https : / / checkstyle . org / report _ issue . html <nl> + Issues that are not following the guidelines , will be processed as last priority or never or simply closed as invalid . <nl> <nl> - Please provide issue report in format that we request , EACH DETAIL MAKE A HUGE HELP . <nl> <nl> - Issues that are not following the guidelines , will be processed with last priority . <nl> + # Contributing Guide <nl> + Please note that PRs are looked only for approved issues . Follow the PR guide for opening a PR <nl> + # # # # [ Pull Request Template ] ( https : / / github . com / checkstyle / checkstyle / blob / master / . github / PULL _ REQUEST _ TEMPLATE . md ) <nl> <nl> + Please follow the below links in order to start contributing to the checkstyle project <nl> + # # # # [ Beginning Development ] ( http : / / checkstyle . sourceforge . net / beginning _ development . html ) <nl> + # # # # [ Contribution Guidelines ] ( http : / / checkstyle . sourceforge . net / contributing . html ) <nl> + <nl> + Find the links below to import the checkstyle project to an IDE <nl> + # # # # [ Importing checkstyle project to IntelliJ ] ( http : / / checkstyle . sourceforge . net / idea . html ) <nl> + # # # # [ Importing checkstyle project to Eclipse ] ( http : / / checkstyle . sourceforge . net / eclipse . html ) <nl> + # # # # [ Importing checkstyle project to Netbeans ] ( http : / / checkstyle . sourceforge . net / netbeans . html )
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> index eb98dc9 . . 82a503a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> @ @ - 45 , 7 + 45 , 9 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " illegaltype " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 85 , 7 + 87 , 8 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 6 : 13 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , <nl> " 9 : 13 : " + getCheckMessage ( MSG _ KEY , <nl> - " com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalType . AbstractClass " ) , <nl> + " com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . " <nl> + + " InputIllegalType . AbstractClass " ) , <nl> " 16 : 13 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , <nl> } ; <nl> <nl> @ @ - 111 , 7 + 114 , 8 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { <nl> <nl> final String [ ] expected = { <nl> " 9 : 13 : " + getCheckMessage ( MSG _ KEY , <nl> - " com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalType . AbstractClass " ) , <nl> + " com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . " <nl> + + " InputIllegalType . AbstractClass " ) , <nl> " 16 : 13 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , <nl> " 17 : 13 : " + getCheckMessage ( MSG _ KEY , " TreeSet " ) , <nl> } ; <nl> @ @ - 135 , 10 + 139 , 10 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testSameFileNameGeneral ( ) throws Exception { <nl> checkConfig . addAttribute ( " illegalClassNames " , <nl> - " List , InputGregorianCalendar , java . io . File , ArrayList " ) ; <nl> + " List , InputIllegalTypeGregorianCalendar , java . io . File , ArrayList " ) ; <nl> final String [ ] expected = { <nl> - " 10 : 5 : " + getCheckMessage ( MSG _ KEY , " InputGregorianCalendar " ) , <nl> - " 16 : 23 : " + getCheckMessage ( MSG _ KEY , " InputGregorianCalendar " ) , <nl> + " 10 : 5 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , <nl> + " 16 : 23 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , <nl> " 24 : 9 : " + getCheckMessage ( MSG _ KEY , " List " ) , <nl> " 25 : 9 : " + getCheckMessage ( MSG _ KEY , " java . io . File " ) , <nl> " 27 : 5 : " + getCheckMessage ( MSG _ KEY , " java . util . List " ) , <nl> @ @ - 179 , 12 + 183 , 12 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 6 : 13 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , <nl> " 9 : 13 : " + getCheckMessage ( MSG _ KEY , <nl> - " com . puppycrawl . tools . checkstyle . checks . coding . " <nl> + " com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . " <nl> + " InputIllegalTypeMemberModifiers . AbstractClass " ) , <nl> " 16 : 13 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , <nl> " 17 : 13 : " + getCheckMessage ( MSG _ KEY , " TreeSet " ) , <nl> " 23 : 15 : " + getCheckMessage ( MSG _ KEY , <nl> - " com . puppycrawl . tools . checkstyle . checks . coding . " <nl> + " com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . " <nl> + " InputIllegalTypeMemberModifiers . AbstractClass " ) , <nl> " 25 : 25 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , <nl> " 33 : 15 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalType . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalType . java <nl> deleted file mode 100644 <nl> index 828b04d . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalType . java <nl> + + + / dev / null <nl> @ @ - 1 , 24 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - import java . util . TreeSet ; <nl> - import java . util . Hashtable ; <nl> - / / configuration : default <nl> - public class InputIllegalType { <nl> - private AbstractClass a = null ; / / WARNING <nl> - private NotAnAbstractClass b = null ; / * another comment * / <nl> - <nl> - private com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalType . AbstractClass c = null ; / / WARNING <nl> - private com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalType . NotAnAbstractClass d = null ; <nl> - <nl> - private abstract class AbstractClass { / * one more comment * / } <nl> - <nl> - private class NotAnAbstractClass { } <nl> - <nl> - private java . util . TreeSet table1 ( ) { return null ; } / / WARNING <nl> - private TreeSet table2 ( ) { return null ; } / / WARNING <nl> - static class SomeStaticClass { <nl> - <nl> - } <nl> - <nl> - InputIllegalType ( Integer i ) { } <nl> - private void table2 ( Integer i ) { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeAbstractClassNames . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeAbstractClassNames . java <nl> deleted file mode 100644 <nl> index 7ff7650 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeAbstractClassNames . java <nl> + + + / dev / null <nl> @ @ - 1 , 36 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - public class InputIllegalTypeAbstractClassNames { <nl> - <nl> - abstract class AbstractClass { <nl> - abstract String getClassInfo ( ) ; <nl> - abstract boolean isPerfectClass ( ) ; <nl> - } <nl> - <nl> - class MyNonAbstractClass extends AbstractClass { <nl> - <nl> - boolean perfect = true ; <nl> - <nl> - private MyNonAbstractClass ( ) { } <nl> - <nl> - @ Override <nl> - String getClassInfo ( ) { <nl> - return " This is my non abstract class . " ; <nl> - } <nl> - <nl> - @ Override <nl> - boolean isPerfectClass ( ) { <nl> - return perfect ; <nl> - } <nl> - } <nl> - <nl> - AbstractClass a = new MyNonAbstractClass ( ) ; <nl> - <nl> - public String getInnerClassInfo ( AbstractClass clazz ) { <nl> - return clazz . getClassInfo ( ) ; <nl> - } <nl> - <nl> - public AbstractClass newInnerClassInstance ( ) { <nl> - return new MyNonAbstractClass ( ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeMemberModifiers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeMemberModifiers . java <nl> deleted file mode 100644 <nl> index cc88bac . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeMemberModifiers . java <nl> + + + / dev / null <nl> @ @ - 1 , 35 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - import java . util . TreeSet ; <nl> - import java . util . Hashtable ; <nl> - / / configuration : default <nl> - public class InputIllegalTypeMemberModifiers { <nl> - private AbstractClass a = null ; / / WARNING <nl> - private NotAnAbstractClass b = null ; / * another comment * / <nl> - <nl> - private com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalTypeMemberModifiers . AbstractClass c = null ; / / WARNING <nl> - private com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalTypeMemberModifiers . NotAnAbstractClass d = null ; <nl> - <nl> - private abstract class AbstractClass { / * one more comment * / } <nl> - <nl> - private class NotAnAbstractClass { } <nl> - <nl> - private java . util . TreeSet < Object > table1 ( ) { return null ; } / / WARNING <nl> - private TreeSet < Object > table2 ( ) { return null ; } / / WARNING <nl> - static class SomeStaticClass { <nl> - <nl> - } <nl> - <nl> - / / WARNING if memberModifiers is set and contains TokenTypes . LITERAL _ PROTECTED <nl> - protected com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalTypeMemberModifiers . AbstractClass c1 = null ; <nl> - / / NO WARNING if memberModifiers is set and does not contain TokenTypes . LITERAL _ PUBLIC <nl> - public final static java . util . TreeSet < Object > table3 ( ) { return null ; } <nl> - <nl> - java . util . TreeSet < Object > table4 ( ) { java . util . TreeSet < Object > treeSet = null ; return null ; } <nl> - <nl> - private class Some { <nl> - java . util . TreeSet < Object > treeSet = null ; <nl> - } <nl> - / / WARNING if memberModifiers is set and contains TokenTypes . LITERAL _ PROTECTED <nl> - protected AbstractClass a1 = null ; <nl> - public AbstractClass a2 = null ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeSameFileName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeSameFileName . java <nl> deleted file mode 100644 <nl> index 533fc9e . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeSameFileName . java <nl> + + + / dev / null <nl> @ @ - 1 , 29 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - import java . util . ArrayList ; <nl> - import java . awt . List ; <nl> - import java . util . * ; <nl> - import com . puppycrawl . tools . checkstyle . checks . coding . InputGregorianCalendar ; <nl> - import com . puppycrawl . tools . checkstyle . checks . coding . InputGregorianCalendar . SubCalendar ; <nl> - / / configuration : " illegalClassNames " : List , GregorianCalendar , java . io . File , SubCalendar , ArrayList <nl> - public class InputIllegalTypeSameFileName <nl> - { <nl> - InputGregorianCalendar cal = AnObject . getInstance ( ) ; / / WARNING <nl> - java . util . Date date = null ; <nl> - SubCalendar subCalendar = null ; / / WARNING <nl> - <nl> - private static class AnObject extends InputGregorianCalendar { <nl> - <nl> - public static InputGregorianCalendar getInstance ( ) / / WARNING <nl> - { <nl> - return null ; <nl> - } <nl> - <nl> - } <nl> - <nl> - private void foo ( ) { <nl> - List l ; / / WARNING <nl> - java . io . File file = null ; / / WARNING <nl> - } <nl> - java . util . List < Integer > list = new ArrayList < > ( ) ; / / WARNING <nl> - private ArrayList < String > values ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeStarImports . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeStarImports . java <nl> deleted file mode 100644 <nl> index 25c9658 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeStarImports . java <nl> + + + / dev / null <nl> @ @ - 1 , 11 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - import java . * ; <nl> - import java . util . * ; <nl> - import org . antlr . v4 . runtime . * ; <nl> - import com . * ; <nl> - / / configuration " illegalClassNames " : List <nl> - public class InputIllegalTypeStarImports <nl> - { <nl> - List < Integer > l = new LinkedList < > ( ) ; / / WARNING <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeStaticImports . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeStaticImports . java <nl> deleted file mode 100644 <nl> index bfb58f1 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeStaticImports . java <nl> + + + / dev / null <nl> @ @ - 1 , 16 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - import static com . puppycrawl . tools . checkstyle . utils . CheckUtils . isElseIf ; <nl> - import static com . puppycrawl . tools . checkstyle . utils . CheckUtils . * ; <nl> - import static com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalType . SomeStaticClass ; <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - / / configuration : " illegalClassNames " : SomeStaticClass <nl> - public class InputIllegalTypeStaticImports <nl> - { <nl> - private boolean foo ( DetailAST ast ) { <nl> - return isElseIf ( ast ) ; <nl> - } <nl> - SomeStaticClass staticClass ; / / WARNING <nl> - private static SomeStaticClass foo1 ( ) { return null ; } <nl> - private static void foo2 ( SomeStaticClass s ) { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java <nl> new file mode 100644 <nl> index 0000000 . . dfce5fd <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; <nl> + import java . util . TreeSet ; <nl> + import java . util . Hashtable ; <nl> + / / configuration : default <nl> + public class InputIllegalType { <nl> + private AbstractClass a = null ; / / WARNING <nl> + private NotAnAbstractClass b = null ; / * another comment * / <nl> + <nl> + private com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalType . AbstractClass c = null ; / / WARNING <nl> + private com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalType . NotAnAbstractClass d = null ; <nl> + <nl> + private abstract class AbstractClass { / * one more comment * / } <nl> + <nl> + private class NotAnAbstractClass { } <nl> + <nl> + private java . util . TreeSet table1 ( ) { return null ; } / / WARNING <nl> + private TreeSet table2 ( ) { return null ; } / / WARNING <nl> + static class SomeStaticClass { <nl> + <nl> + } <nl> + <nl> + InputIllegalType ( Integer i ) { } <nl> + private void table2 ( Integer i ) { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeAbstractClassNames . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeAbstractClassNames . java <nl> new file mode 100644 <nl> index 0000000 . . 3ff52eb <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeAbstractClassNames . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; <nl> + <nl> + public class InputIllegalTypeAbstractClassNames { <nl> + <nl> + abstract class AbstractClass { <nl> + abstract String getClassInfo ( ) ; <nl> + abstract boolean isPerfectClass ( ) ; <nl> + } <nl> + <nl> + class MyNonAbstractClass extends AbstractClass { <nl> + <nl> + boolean perfect = true ; <nl> + <nl> + private MyNonAbstractClass ( ) { } <nl> + <nl> + @ Override <nl> + String getClassInfo ( ) { <nl> + return " This is my non abstract class . " ; <nl> + } <nl> + <nl> + @ Override <nl> + boolean isPerfectClass ( ) { <nl> + return perfect ; <nl> + } <nl> + } <nl> + <nl> + AbstractClass a = new MyNonAbstractClass ( ) ; <nl> + <nl> + public String getInnerClassInfo ( AbstractClass clazz ) { <nl> + return clazz . getClassInfo ( ) ; <nl> + } <nl> + <nl> + public AbstractClass newInnerClassInstance ( ) { <nl> + return new MyNonAbstractClass ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGregorianCalendar . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGregorianCalendar . java <nl> new file mode 100644 <nl> index 0000000 . . 161643f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGregorianCalendar . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; <nl> + <nl> + public class InputIllegalTypeGregorianCalendar <nl> + { <nl> + class SubCalendar { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeMemberModifiers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeMemberModifiers . java <nl> new file mode 100644 <nl> index 0000000 . . 35d0a8f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeMemberModifiers . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; <nl> + import java . util . TreeSet ; <nl> + import java . util . Hashtable ; <nl> + / / configuration : default <nl> + public class InputIllegalTypeMemberModifiers { <nl> + private AbstractClass a = null ; / / WARNING <nl> + private NotAnAbstractClass b = null ; / * another comment * / <nl> + <nl> + private com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalTypeMemberModifiers . AbstractClass c = null ; / / WARNING <nl> + private com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalTypeMemberModifiers . NotAnAbstractClass d = null ; <nl> + <nl> + private abstract class AbstractClass { / * one more comment * / } <nl> + <nl> + private class NotAnAbstractClass { } <nl> + <nl> + private java . util . TreeSet < Object > table1 ( ) { return null ; } / / WARNING <nl> + private TreeSet < Object > table2 ( ) { return null ; } / / WARNING <nl> + static class SomeStaticClass { <nl> + <nl> + } <nl> + <nl> + / / WARNING if memberModifiers is set and contains TokenTypes . LITERAL _ PROTECTED <nl> + protected com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalTypeMemberModifiers . AbstractClass c1 = null ; <nl> + / / NO WARNING if memberModifiers is set and does not contain TokenTypes . LITERAL _ PUBLIC <nl> + public final static java . util . TreeSet < Object > table3 ( ) { return null ; } <nl> + <nl> + java . util . TreeSet < Object > table4 ( ) { java . util . TreeSet < Object > treeSet = null ; return null ; } <nl> + <nl> + private class Some { <nl> + java . util . TreeSet < Object > treeSet = null ; <nl> + } <nl> + / / WARNING if memberModifiers is set and contains TokenTypes . LITERAL _ PROTECTED <nl> + protected AbstractClass a1 = null ; <nl> + public AbstractClass a2 = null ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java <nl> new file mode 100644 <nl> index 0000000 . . b39ece6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; <nl> + import java . util . ArrayList ; <nl> + import java . awt . List ; <nl> + import java . util . * ; <nl> + import com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalTypeGregorianCalendar ; <nl> + import com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalTypeGregorianCalendar . SubCalendar ; <nl> + / / configuration : " illegalClassNames " : List , GregorianCalendar , java . io . File , SubCalendar , ArrayList <nl> + public class InputIllegalTypeSameFileName <nl> + { <nl> + InputIllegalTypeGregorianCalendar cal = AnObject . getInstance ( ) ; / / WARNING <nl> + java . util . Date date = null ; <nl> + SubCalendar subCalendar = null ; / / WARNING <nl> + <nl> + private static class AnObject extends InputIllegalTypeGregorianCalendar { <nl> + <nl> + public static InputIllegalTypeGregorianCalendar getInstance ( ) / / WARNING <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + } <nl> + <nl> + private void foo ( ) { <nl> + List l ; / / WARNING <nl> + java . io . File file = null ; / / WARNING <nl> + } <nl> + java . util . List < Integer > list = new ArrayList < > ( ) ; / / WARNING <nl> + private ArrayList < String > values ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStarImports . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStarImports . java <nl> new file mode 100644 <nl> index 0000000 . . 0319232 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStarImports . java <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; <nl> + <nl> + import java . * ; <nl> + import java . util . * ; <nl> + import org . antlr . v4 . runtime . * ; <nl> + import com . * ; <nl> + / / configuration " illegalClassNames " : List <nl> + public class InputIllegalTypeStarImports <nl> + { <nl> + List < Integer > l = new LinkedList < > ( ) ; / / WARNING <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java <nl> new file mode 100644 <nl> index 0000000 . . 5354564 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; <nl> + <nl> + import static com . puppycrawl . tools . checkstyle . utils . CheckUtils . isElseIf ; <nl> + import static com . puppycrawl . tools . checkstyle . utils . CheckUtils . * ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalType . SomeStaticClass ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + / / configuration : " illegalClassNames " : SomeStaticClass <nl> + public class InputIllegalTypeStaticImports <nl> + { <nl> + private boolean foo ( DetailAST ast ) { <nl> + return isElseIf ( ast ) ; <nl> + } <nl> + SomeStaticClass staticClass ; / / WARNING <nl> + private static SomeStaticClass foo1 ( ) { return null ; } <nl> + private static void foo2 ( SomeStaticClass s ) { } <nl> + }

TEST DIFF:
diff - - git a / . github / CONTRIBUTING . md b / . github / CONTRIBUTING . md 
 index 732c318 . . 9214c3f 100644 
 - - - a / . github / CONTRIBUTING . md 
 + + + b / . github / CONTRIBUTING . md 
 @ @ - 1 , 13 + 1 , 24 @ @ 
 # Contributing 
 + ! [ ] ( https : / / raw . githubusercontent . com / checkstyle / resources / master / img / checkstyle - logos / checkstyle - logo - 260x99 . png ) 
 
 - Please see instructions for contributing here : 
 - https : / / checkstyle . org / contributing . html 
 + # # # # [ Reporting issues ] ( https : / / checkstyle . org / report _ issue . html ) 
 + # # # # [ How to report a bug ? ] ( https : / / checkstyle . org / report _ issue . html # How _ to _ report _ a _ bug . 3F ) 
 + # # # # [ Issue Template ] ( https : / / github . com / checkstyle / checkstyle / blob / master / . github / ISSUE _ TEMPLATE . md ) 
 
 - # Reporting issues 
 + Please provide issue report in the format that we request , EACH DETAIL IS A HUGE HELP . 
 
 - Please read https : / / checkstyle . org / report _ issue . html 
 + Issues that are not following the guidelines , will be processed as last priority or never or simply closed as invalid . 
 
 - Please provide issue report in format that we request , EACH DETAIL MAKE A HUGE HELP . 
 
 - Issues that are not following the guidelines , will be processed with last priority . 
 + # Contributing Guide 
 + Please note that PRs are looked only for approved issues . Follow the PR guide for opening a PR 
 + # # # # [ Pull Request Template ] ( https : / / github . com / checkstyle / checkstyle / blob / master / . github / PULL _ REQUEST _ TEMPLATE . md ) 
 
 + Please follow the below links in order to start contributing to the checkstyle project 
 + # # # # [ Beginning Development ] ( http : / / checkstyle . sourceforge . net / beginning _ development . html ) 
 + # # # # [ Contribution Guidelines ] ( http : / / checkstyle . sourceforge . net / contributing . html ) 
 + 
 + Find the links below to import the checkstyle project to an IDE 
 + # # # # [ Importing checkstyle project to IntelliJ ] ( http : / / checkstyle . sourceforge . net / idea . html ) 
 + # # # # [ Importing checkstyle project to Eclipse ] ( http : / / checkstyle . sourceforge . net / eclipse . html ) 
 + # # # # [ Importing checkstyle project to Netbeans ] ( http : / / checkstyle . sourceforge . net / netbeans . html )

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 index eb98dc9 . . 82a503a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 @ @ - 45 , 7 + 45 , 9 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " illegaltype " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 85 , 7 + 87 , 8 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 6 : 13 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , 
 " 9 : 13 : " + getCheckMessage ( MSG _ KEY , 
 - " com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalType . AbstractClass " ) , 
 + " com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . " 
 + + " InputIllegalType . AbstractClass " ) , 
 " 16 : 13 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , 
 } ; 
 
 @ @ - 111 , 7 + 114 , 8 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { 
 
 final String [ ] expected = { 
 " 9 : 13 : " + getCheckMessage ( MSG _ KEY , 
 - " com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalType . AbstractClass " ) , 
 + " com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . " 
 + + " InputIllegalType . AbstractClass " ) , 
 " 16 : 13 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , 
 " 17 : 13 : " + getCheckMessage ( MSG _ KEY , " TreeSet " ) , 
 } ; 
 @ @ - 135 , 10 + 139 , 10 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { 
 @ Test 
 public void testSameFileNameGeneral ( ) throws Exception { 
 checkConfig . addAttribute ( " illegalClassNames " , 
 - " List , InputGregorianCalendar , java . io . File , ArrayList " ) ; 
 + " List , InputIllegalTypeGregorianCalendar , java . io . File , ArrayList " ) ; 
 final String [ ] expected = { 
 - " 10 : 5 : " + getCheckMessage ( MSG _ KEY , " InputGregorianCalendar " ) , 
 - " 16 : 23 : " + getCheckMessage ( MSG _ KEY , " InputGregorianCalendar " ) , 
 + " 10 : 5 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , 
 + " 16 : 23 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , 
 " 24 : 9 : " + getCheckMessage ( MSG _ KEY , " List " ) , 
 " 25 : 9 : " + getCheckMessage ( MSG _ KEY , " java . io . File " ) , 
 " 27 : 5 : " + getCheckMessage ( MSG _ KEY , " java . util . List " ) , 
 @ @ - 179 , 12 + 183 , 12 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 6 : 13 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , 
 " 9 : 13 : " + getCheckMessage ( MSG _ KEY , 
 - " com . puppycrawl . tools . checkstyle . checks . coding . " 
 + " com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . " 
 + " InputIllegalTypeMemberModifiers . AbstractClass " ) , 
 " 16 : 13 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , 
 " 17 : 13 : " + getCheckMessage ( MSG _ KEY , " TreeSet " ) , 
 " 23 : 15 : " + getCheckMessage ( MSG _ KEY , 
 - " com . puppycrawl . tools . checkstyle . checks . coding . " 
 + " com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . " 
 + " InputIllegalTypeMemberModifiers . AbstractClass " ) , 
 " 25 : 25 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , 
 " 33 : 15 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalType . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalType . java 
 deleted file mode 100644 
 index 828b04d . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalType . java 
 + + + / dev / null 
 @ @ - 1 , 24 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - import java . util . TreeSet ; 
 - import java . util . Hashtable ; 
 - / / configuration : default 
 - public class InputIllegalType { 
 - private AbstractClass a = null ; / / WARNING 
 - private NotAnAbstractClass b = null ; / * another comment * / 
 - 
 - private com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalType . AbstractClass c = null ; / / WARNING 
 - private com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalType . NotAnAbstractClass d = null ; 
 - 
 - private abstract class AbstractClass { / * one more comment * / } 
 - 
 - private class NotAnAbstractClass { } 
 - 
 - private java . util . TreeSet table1 ( ) { return null ; } / / WARNING 
 - private TreeSet table2 ( ) { return null ; } / / WARNING 
 - static class SomeStaticClass { 
 - 
 - } 
 - 
 - InputIllegalType ( Integer i ) { } 
 - private void table2 ( Integer i ) { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeAbstractClassNames . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeAbstractClassNames . java 
 deleted file mode 100644 
 index 7ff7650 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeAbstractClassNames . java 
 + + + / dev / null 
 @ @ - 1 , 36 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - public class InputIllegalTypeAbstractClassNames { 
 - 
 - abstract class AbstractClass { 
 - abstract String getClassInfo ( ) ; 
 - abstract boolean isPerfectClass ( ) ; 
 - } 
 - 
 - class MyNonAbstractClass extends AbstractClass { 
 - 
 - boolean perfect = true ; 
 - 
 - private MyNonAbstractClass ( ) { } 
 - 
 - @ Override 
 - String getClassInfo ( ) { 
 - return " This is my non abstract class . " ; 
 - } 
 - 
 - @ Override 
 - boolean isPerfectClass ( ) { 
 - return perfect ; 
 - } 
 - } 
 - 
 - AbstractClass a = new MyNonAbstractClass ( ) ; 
 - 
 - public String getInnerClassInfo ( AbstractClass clazz ) { 
 - return clazz . getClassInfo ( ) ; 
 - } 
 - 
 - public AbstractClass newInnerClassInstance ( ) { 
 - return new MyNonAbstractClass ( ) ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeMemberModifiers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeMemberModifiers . java 
 deleted file mode 100644 
 index cc88bac . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeMemberModifiers . java 
 + + + / dev / null 
 @ @ - 1 , 35 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - import java . util . TreeSet ; 
 - import java . util . Hashtable ; 
 - / / configuration : default 
 - public class InputIllegalTypeMemberModifiers { 
 - private AbstractClass a = null ; / / WARNING 
 - private NotAnAbstractClass b = null ; / * another comment * / 
 - 
 - private com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalTypeMemberModifiers . AbstractClass c = null ; / / WARNING 
 - private com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalTypeMemberModifiers . NotAnAbstractClass d = null ; 
 - 
 - private abstract class AbstractClass { / * one more comment * / } 
 - 
 - private class NotAnAbstractClass { } 
 - 
 - private java . util . TreeSet < Object > table1 ( ) { return null ; } / / WARNING 
 - private TreeSet < Object > table2 ( ) { return null ; } / / WARNING 
 - static class SomeStaticClass { 
 - 
 - } 
 - 
 - / / WARNING if memberModifiers is set and contains TokenTypes . LITERAL _ PROTECTED 
 - protected com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalTypeMemberModifiers . AbstractClass c1 = null ; 
 - / / NO WARNING if memberModifiers is set and does not contain TokenTypes . LITERAL _ PUBLIC 
 - public final static java . util . TreeSet < Object > table3 ( ) { return null ; } 
 - 
 - java . util . TreeSet < Object > table4 ( ) { java . util . TreeSet < Object > treeSet = null ; return null ; } 
 - 
 - private class Some { 
 - java . util . TreeSet < Object > treeSet = null ; 
 - } 
 - / / WARNING if memberModifiers is set and contains TokenTypes . LITERAL _ PROTECTED 
 - protected AbstractClass a1 = null ; 
 - public AbstractClass a2 = null ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeSameFileName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeSameFileName . java 
 deleted file mode 100644 
 index 533fc9e . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeSameFileName . java 
 + + + / dev / null 
 @ @ - 1 , 29 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - import java . util . ArrayList ; 
 - import java . awt . List ; 
 - import java . util . * ; 
 - import com . puppycrawl . tools . checkstyle . checks . coding . InputGregorianCalendar ; 
 - import com . puppycrawl . tools . checkstyle . checks . coding . InputGregorianCalendar . SubCalendar ; 
 - / / configuration : " illegalClassNames " : List , GregorianCalendar , java . io . File , SubCalendar , ArrayList 
 - public class InputIllegalTypeSameFileName 
 - { 
 - InputGregorianCalendar cal = AnObject . getInstance ( ) ; / / WARNING 
 - java . util . Date date = null ; 
 - SubCalendar subCalendar = null ; / / WARNING 
 - 
 - private static class AnObject extends InputGregorianCalendar { 
 - 
 - public static InputGregorianCalendar getInstance ( ) / / WARNING 
 - { 
 - return null ; 
 - } 
 - 
 - } 
 - 
 - private void foo ( ) { 
 - List l ; / / WARNING 
 - java . io . File file = null ; / / WARNING 
 - } 
 - java . util . List < Integer > list = new ArrayList < > ( ) ; / / WARNING 
 - private ArrayList < String > values ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeStarImports . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeStarImports . java 
 deleted file mode 100644 
 index 25c9658 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeStarImports . java 
 + + + / dev / null 
 @ @ - 1 , 11 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - import java . * ; 
 - import java . util . * ; 
 - import org . antlr . v4 . runtime . * ; 
 - import com . * ; 
 - / / configuration " illegalClassNames " : List 
 - public class InputIllegalTypeStarImports 
 - { 
 - List < Integer > l = new LinkedList < > ( ) ; / / WARNING 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeStaticImports . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeStaticImports . java 
 deleted file mode 100644 
 index bfb58f1 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTypeStaticImports . java 
 + + + / dev / null 
 @ @ - 1 , 16 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - import static com . puppycrawl . tools . checkstyle . utils . CheckUtils . isElseIf ; 
 - import static com . puppycrawl . tools . checkstyle . utils . CheckUtils . * ; 
 - import static com . puppycrawl . tools . checkstyle . checks . coding . InputIllegalType . SomeStaticClass ; 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - / / configuration : " illegalClassNames " : SomeStaticClass 
 - public class InputIllegalTypeStaticImports 
 - { 
 - private boolean foo ( DetailAST ast ) { 
 - return isElseIf ( ast ) ; 
 - } 
 - SomeStaticClass staticClass ; / / WARNING 
 - private static SomeStaticClass foo1 ( ) { return null ; } 
 - private static void foo2 ( SomeStaticClass s ) { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java 
 new file mode 100644 
 index 0000000 . . dfce5fd 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; 
 + import java . util . TreeSet ; 
 + import java . util . Hashtable ; 
 + / / configuration : default 
 + public class InputIllegalType { 
 + private AbstractClass a = null ; / / WARNING 
 + private NotAnAbstractClass b = null ; / * another comment * / 
 + 
 + private com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalType . AbstractClass c = null ; / / WARNING 
 + private com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalType . NotAnAbstractClass d = null ; 
 + 
 + private abstract class AbstractClass { / * one more comment * / } 
 + 
 + private class NotAnAbstractClass { } 
 + 
 + private java . util . TreeSet table1 ( ) { return null ; } / / WARNING 
 + private TreeSet table2 ( ) { return null ; } / / WARNING 
 + static class SomeStaticClass { 
 + 
 + } 
 + 
 + InputIllegalType ( Integer i ) { } 
 + private void table2 ( Integer i ) { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeAbstractClassNames . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeAbstractClassNames . java 
 new file mode 100644 
 index 0000000 . . 3ff52eb 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeAbstractClassNames . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; 
 + 
 + public class InputIllegalTypeAbstractClassNames { 
 + 
 + abstract class AbstractClass { 
 + abstract String getClassInfo ( ) ; 
 + abstract boolean isPerfectClass ( ) ; 
 + } 
 + 
 + class MyNonAbstractClass extends AbstractClass { 
 + 
 + boolean perfect = true ; 
 + 
 + private MyNonAbstractClass ( ) { } 
 + 
 + @ Override 
 + String getClassInfo ( ) { 
 + return " This is my non abstract class . " ; 
 + } 
 + 
 + @ Override 
 + boolean isPerfectClass ( ) { 
 + return perfect ; 
 + } 
 + } 
 + 
 + AbstractClass a = new MyNonAbstractClass ( ) ; 
 + 
 + public String getInnerClassInfo ( AbstractClass clazz ) { 
 + return clazz . getClassInfo ( ) ; 
 + } 
 + 
 + public AbstractClass newInnerClassInstance ( ) { 
 + return new MyNonAbstractClass ( ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGregorianCalendar . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGregorianCalendar . java 
 new file mode 100644 
 index 0000000 . . 161643f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeGregorianCalendar . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; 
 + 
 + public class InputIllegalTypeGregorianCalendar 
 + { 
 + class SubCalendar { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeMemberModifiers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeMemberModifiers . java 
 new file mode 100644 
 index 0000000 . . 35d0a8f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeMemberModifiers . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; 
 + import java . util . TreeSet ; 
 + import java . util . Hashtable ; 
 + / / configuration : default 
 + public class InputIllegalTypeMemberModifiers { 
 + private AbstractClass a = null ; / / WARNING 
 + private NotAnAbstractClass b = null ; / * another comment * / 
 + 
 + private com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalTypeMemberModifiers . AbstractClass c = null ; / / WARNING 
 + private com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalTypeMemberModifiers . NotAnAbstractClass d = null ; 
 + 
 + private abstract class AbstractClass { / * one more comment * / } 
 + 
 + private class NotAnAbstractClass { } 
 + 
 + private java . util . TreeSet < Object > table1 ( ) { return null ; } / / WARNING 
 + private TreeSet < Object > table2 ( ) { return null ; } / / WARNING 
 + static class SomeStaticClass { 
 + 
 + } 
 + 
 + / / WARNING if memberModifiers is set and contains TokenTypes . LITERAL _ PROTECTED 
 + protected com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalTypeMemberModifiers . AbstractClass c1 = null ; 
 + / / NO WARNING if memberModifiers is set and does not contain TokenTypes . LITERAL _ PUBLIC 
 + public final static java . util . TreeSet < Object > table3 ( ) { return null ; } 
 + 
 + java . util . TreeSet < Object > table4 ( ) { java . util . TreeSet < Object > treeSet = null ; return null ; } 
 + 
 + private class Some { 
 + java . util . TreeSet < Object > treeSet = null ; 
 + } 
 + / / WARNING if memberModifiers is set and contains TokenTypes . LITERAL _ PROTECTED 
 + protected AbstractClass a1 = null ; 
 + public AbstractClass a2 = null ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java 
 new file mode 100644 
 index 0000000 . . b39ece6 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; 
 + import java . util . ArrayList ; 
 + import java . awt . List ; 
 + import java . util . * ; 
 + import com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalTypeGregorianCalendar ; 
 + import com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalTypeGregorianCalendar . SubCalendar ; 
 + / / configuration : " illegalClassNames " : List , GregorianCalendar , java . io . File , SubCalendar , ArrayList 
 + public class InputIllegalTypeSameFileName 
 + { 
 + InputIllegalTypeGregorianCalendar cal = AnObject . getInstance ( ) ; / / WARNING 
 + java . util . Date date = null ; 
 + SubCalendar subCalendar = null ; / / WARNING 
 + 
 + private static class AnObject extends InputIllegalTypeGregorianCalendar { 
 + 
 + public static InputIllegalTypeGregorianCalendar getInstance ( ) / / WARNING 
 + { 
 + return null ; 
 + } 
 + 
 + } 
 + 
 + private void foo ( ) { 
 + List l ; / / WARNING 
 + java . io . File file = null ; / / WARNING 
 + } 
 + java . util . List < Integer > list = new ArrayList < > ( ) ; / / WARNING 
 + private ArrayList < String > values ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStarImports . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStarImports . java 
 new file mode 100644 
 index 0000000 . . 0319232 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStarImports . java 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; 
 + 
 + import java . * ; 
 + import java . util . * ; 
 + import org . antlr . v4 . runtime . * ; 
 + import com . * ; 
 + / / configuration " illegalClassNames " : List 
 + public class InputIllegalTypeStarImports 
 + { 
 + List < Integer > l = new LinkedList < > ( ) ; / / WARNING 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java 
 new file mode 100644 
 index 0000000 . . 5354564 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; 
 + 
 + import static com . puppycrawl . tools . checkstyle . utils . CheckUtils . isElseIf ; 
 + import static com . puppycrawl . tools . checkstyle . utils . CheckUtils . * ; 
 + import static com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalType . SomeStaticClass ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + / / configuration : " illegalClassNames " : SomeStaticClass 
 + public class InputIllegalTypeStaticImports 
 + { 
 + private boolean foo ( DetailAST ast ) { 
 + return isElseIf ( ast ) ; 
 + } 
 + SomeStaticClass staticClass ; / / WARNING 
 + private static SomeStaticClass foo1 ( ) { return null ; } 
 + private static void foo2 ( SomeStaticClass s ) { } 
 + }
