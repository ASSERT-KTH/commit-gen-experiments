BLEU SCORE: 0.021476912089159066

TEST MSG: Issue # 4165 : Split and Organize Checkstyle inputs by Test for checks in coding package : OneStatementPerLine
GENERATED MSG: Move test input files to resources , issue # 1040

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> index f728eea . . e9bb121 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> @ @ - 34 , 7 + 34 , 9 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " onestatementperline " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 57 , 7 + 59 , 7 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " InputOneStatementPerLine . java " ) , <nl> + getPath ( " InputOneStatementPerLineSingleLine . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 84 , 7 + 86 , 7 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " InputOneStatementPerLine2 . java " ) , <nl> + getPath ( " InputOneStatementPerLineMultiline . java " ) , <nl> expected ) ; <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java <nl> deleted file mode 100644 <nl> index 52c9c45 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java <nl> + + + / dev / null <nl> @ @ - 1 , 241 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2004 Oliver Burn <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - / * * <nl> - * Two import statements on the same line are illegal . <nl> - * / <nl> - import java . io . EOFException ; import java . io . BufferedReader ; <nl> - <nl> - / * * <nl> - * This Class contains no logic , but serves as test - input for the unit tests for the <nl> - * < code > OneStatementPerLineCheck < / code > - checkstyle enhancement . <nl> - * @ author Alexander Jesse <nl> - * @ see com . puppycrawl . tools . checkstyle . checks . coding . OneStatementPerLineCheck <nl> - * / <nl> - public class InputOneStatementPerLine { <nl> - / * * <nl> - * Dummy innerclass to test the behaviour in the case of a smalltalk - style <nl> - * statements ( < code > myObject . firstMethod ( ) . secondMethod ( ) . thirdMethod ( ) < / code > ) . <nl> - * For this programming style each method must return the obejct itself < code > this < / code > . <nl> - * / <nl> - class SmallTalkStyle { <nl> - SmallTalkStyle doSomething1 ( ) { <nl> - return this ; <nl> - } <nl> - <nl> - SmallTalkStyle doSomething2 ( ) { <nl> - return this ; <nl> - } <nl> - <nl> - SmallTalkStyle doSomething3 ( ) { <nl> - return this ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Dummy variable to work on . <nl> - * / <nl> - private int one = 0 ; <nl> - <nl> - / * * <nl> - * Dummy variable to work on . <nl> - * / <nl> - private int two = 0 ; <nl> - <nl> - / * * <nl> - * Simple legal method <nl> - * / <nl> - public void doLegal ( ) { <nl> - one = 1 ; <nl> - two = 2 ; <nl> - } <nl> - <nl> - / * * <nl> - * The illegal format is used in a coment . Therefor the whole method is legal . <nl> - * / <nl> - public void doLegalComment ( ) { <nl> - one = 1 ; <nl> - / / one = 1 ; two = 2 ; <nl> - two = 2 ; <nl> - / * <nl> - * one = 1 ; two = 2 ; <nl> - * / <nl> - } <nl> - <nl> - / * * <nl> - * The illegal format is used within a String . Therefor the whole method is legal . <nl> - * / <nl> - public void doLegalString ( ) { <nl> - one = 1 ; <nl> - two = 2 ; <nl> - System . identityHashCode ( " one = 1 ; two = 2 " ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Within the for - header there are 3 Statements , but this is legal . <nl> - * / <nl> - public void doLegalForLoop ( ) { <nl> - for ( int i = 0 ; i < 20 ; i + + ) { <nl> - one = i ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Simplest form of an illegal layout . <nl> - * / <nl> - public void doIllegal ( ) { <nl> - one = 1 ; two = 2 ; <nl> - } <nl> - <nl> - / * * <nl> - * Smalltalk - style is considered as one statement . <nl> - * / <nl> - public void doIllegalSmallTalk ( ) { <nl> - SmallTalkStyle smalltalker = new SmallTalkStyle ( ) ; <nl> - smalltalker . doSomething1 ( ) . doSomething2 ( ) . doSomething3 ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Smalltalk - style is considered as one statement . <nl> - * / <nl> - public void doIllegalSmallTalk2 ( ) { <nl> - SmallTalkStyle smalltalker = new SmallTalkStyle ( ) ; <nl> - smalltalker . doSomething1 ( ) <nl> - . doSomething2 ( ) <nl> - . doSomething3 ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * While theoretically being distributed over two lines , this is a sample <nl> - * of 2 statements on one line . <nl> - * / <nl> - public void doIllegal2 ( ) { <nl> - one = 1 <nl> - ; two = 2 ; <nl> - } <nl> - <nl> - / * * <nl> - * The StringBuffer is a Java - API - class that permits smalltalk - style concatenation <nl> - * on the < code > append < / code > - method . <nl> - * / <nl> - public void doStringBuffer ( ) { <nl> - StringBuffer sb = new StringBuffer ( ) ; <nl> - sb . append ( " test " ) ; <nl> - sb . append ( " test2 " ) . append ( " test3 " ) ; <nl> - appendToSpringBuffer ( sb , " test4 " ) ; <nl> - } <nl> - <nl> - / * * <nl> - * indirect stringbuffer - method . Used only internally . <nl> - * @ param sb The stringbuffer we want to append something <nl> - * @ param text The text to append <nl> - * / <nl> - private void appendToSpringBuffer ( StringBuffer sb , String text ) { <nl> - sb . append ( text ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Two declaration statements on the same line are illegal . <nl> - * / <nl> - int a ; int b ; <nl> - <nl> - / * * <nl> - * Two declaration statements which are not on the same line <nl> - * are legal . <nl> - * / <nl> - int c ; <nl> - int d ; <nl> - <nl> - / * * <nl> - * Two assignment ( declaration ) statements on the same line are illegal . <nl> - * / <nl> - int e = 1 ; int f = 2 ; <nl> - <nl> - / * * <nl> - * Two assignment ( declaration ) statements on the different lines <nl> - * are legal . <nl> - * / <nl> - int g = 1 ; <nl> - int h = 2 ; <nl> - <nl> - / * * <nl> - * This method contains two increment statements <nl> - * and two object creation statements on the same line . <nl> - * / <nl> - private void foo ( ) { <nl> - / / This is two assignment ( declaration ) <nl> - / / statements on different lines <nl> - int var1 = 1 ; <nl> - int var2 = 2 ; <nl> - <nl> - / / Two increment statements on the same line are illegal . <nl> - var1 + + ; var2 + + ; <nl> - <nl> - / / Two object creation statements on the same line are illegal . <nl> - Object obj1 = new Object ( ) ; Object obj2 = new Object ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * This method contains break , while - loop <nl> - * and for - loop statements . <nl> - * / <nl> - private void foo3 ( ) { <nl> - do { <nl> - one + + ; <nl> - if ( two > 4 ) { <nl> - break ; / / legal <nl> - } <nl> - one + + ; <nl> - two + + ; <nl> - } while ( two < 7 ) ; / / legal <nl> - <nl> - / * * <nl> - * One statement inside for block is legal . <nl> - * / <nl> - for ( int i = 0 ; i < 10 ; i + + ) one = 5 ; <nl> - <nl> - / * * <nl> - * One statement inside for block where <nl> - * increment expression is empty is legal . <nl> - * / <nl> - for ( int i = 0 ; i < 10 ; ) one = 5 ; <nl> - <nl> - / * * <nl> - * One statement inside for block where <nl> - * increment and conditional expressions are empty <nl> - * ( forever loop ) is legal <nl> - * / <nl> - for ( int i = 0 ; ; ) one = 5 ; <nl> - } <nl> - <nl> - public void foo4 ( ) { <nl> - / * * <nl> - * a " forever " loop . <nl> - * / <nl> - for ( ; ; ) { } / / legal <nl> - } <nl> - <nl> - public void foo5 ( ) { <nl> - / * * <nl> - * One statement inside for block is legal <nl> - * / <nl> - for ( ; ; ) { one = 5 ; } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine2 . java <nl> deleted file mode 100644 <nl> index 161dcdf . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 183 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - / * <nl> - This class provides test input for OneStatementPerLineCheck with different <nl> - types of multiline statements . <nl> - A Java statement is the smallest unit that is a complete instruction . <nl> - Statements must end with a semicolon . <nl> - Statements generally contain expressions ( expressions have a value ) . <nl> - One of the simplest is the Assignment Statement . <nl> - <nl> - < variable > = < expression > ; <nl> - * / <nl> - public class InputOneStatementPerLine2 { <nl> - <nl> - / * * <nl> - * One multiline assignment ( declaration ) statement <nl> - * is legal . <nl> - * / <nl> - int e = 1 , f = 2 , <nl> - g = 5 ; <nl> - <nl> - / * * <nl> - * One multiline assignment ( declaration ) statement <nl> - * is legal . <nl> - * / <nl> - int h = 1 , <nl> - i = 2 , <nl> - j = 5 ; <nl> - <nl> - / * * <nl> - * One multiline assignment ( declaration ) statement <nl> - * is legal . <nl> - * / <nl> - int k = 1 , <nl> - l = 2 , <nl> - m = 5 <nl> - ; <nl> - <nl> - / * * <nl> - * Two multiline assignment ( declaration ) statements <nl> - * on the same line are illegal . <nl> - * / <nl> - int o = 1 , p = 2 , <nl> - r = 5 ; int t ; <nl> - <nl> - / * * <nl> - * Two assignment ( declaration ) statement <nl> - * which are not on the same line are legal . <nl> - * / <nl> - int one = 1 , <nl> - three = 5 ; <nl> - int two = 2 ; <nl> - <nl> - / * * <nl> - * Two statements on the same line <nl> - * ( they both are distributed over two lines ) <nl> - * are illegal . <nl> - * / <nl> - int var1 = 5 , <nl> - var4 = 5 ; int var2 = 6 , <nl> - var3 = 5 ; <nl> - <nl> - / * * <nl> - * Two statements on the same line <nl> - * ( the second is distributed over two lines ) <nl> - * are illegal . <nl> - * / <nl> - int var6 = 5 ; int var7 = 6 , <nl> - var8 = 5 ; <nl> - <nl> - / * * <nl> - * Two statements on the same line <nl> - * ( they both are distributed over two lines ) <nl> - * are illegal . <nl> - * / <nl> - private void foo ( ) { <nl> - toString ( <nl> - <nl> - ) ; toString ( <nl> - <nl> - ) ; <nl> - } <nl> - <nl> - / * * <nl> - * While theoretically being distributed over three lines , this is a sample <nl> - * of 2 statements on one line . <nl> - * / <nl> - int var9 = 1 , <nl> - var10 = 5 <nl> - ; int var11 = 2 ; <nl> - <nl> - / * * <nl> - * Multiline for loop statement is legal . <nl> - * / <nl> - private void foo2 ( ) { <nl> - for ( int n = 0 , <nl> - k = 1 ; <nl> - n < 5 ; n + + , <nl> - k - - ) { <nl> - <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Multiline for loop statement is legal . <nl> - * / <nl> - private void foo3 ( ) { <nl> - for ( int n = 0 , <nl> - k = 1 <nl> - ; n < 5 <nl> - ; <nl> - n + + , k - - ) { } <nl> - } <nl> - <nl> - / * * <nl> - * One statement inside multiline for loop block is legal . <nl> - * / <nl> - private void foo4 ( ) { <nl> - for ( int n = 0 , <nl> - k = 1 <nl> - ; n < 5 <nl> - ; ) { int a = 5 , <nl> - b = 2 ; } <nl> - } <nl> - <nl> - / * * <nl> - * Two statements on the same lne <nl> - * inside multiline for loop block are illegal . <nl> - * / <nl> - private void foo5 ( ) { <nl> - for ( int n = 0 , <nl> - k = 1 <nl> - ; n < 5 <nl> - ; <nl> - n + + , k - - ) { var1 + + ; var2 + + ; } <nl> - } <nl> - <nl> - / * * <nl> - * Multiple statements within try - with - resource on a separate line is legal . <nl> - * @ see < a href = " https : / / github . com / checkstyle / checkstyle / issues / 2211 " > OneStatementPerLine : false match with try - with - resources < / a > <nl> - * / <nl> - private void issue2211pass ( ) { <nl> - try ( <nl> - AutoCloseable i = new java . io . StringReader ( " " ) ; <nl> - AutoCloseable k = new java . io . StringReader ( " " ) ; <nl> - ) { <nl> - } catch ( Exception e1 ) { <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Multiple statements within try - with - resource on a separate line is legal . Added per PR comment : <nl> - * @ see < a href = " https : / / github . com / checkstyle / checkstyle / pull / 2750 # issuecomment - 166032327 " > Please add UT cases < / a > <nl> - * / <nl> - private void issue2211pass2 ( ) { <nl> - try ( AutoCloseable i = new java . io . StringReader ( " " ) ; <nl> - AutoCloseable k = new java . io . StringReader ( " " ) ; ) { <nl> - } catch ( Exception e1 ) { <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Multiple statements within try - with - resource on next line after try is illegal . <nl> - * @ see < a href = " https : / / github . com / checkstyle / checkstyle / issues / 2211 " > OneStatementPerLine : false match with try - with - resources < / a > <nl> - * / <nl> - private void issue2211fail ( ) { <nl> - try ( <nl> - AutoCloseable i = new java . io . StringReader ( " " ) ; AutoCloseable k = new java . io . StringReader ( " " ) ; <nl> - ) { <nl> - } catch ( Exception e1 ) { <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Multiple statements within try - with - resource on a same line as try is illegal . Added per PR comment : <nl> - * @ see < a href = " https : / / github . com / checkstyle / checkstyle / pull / 2750 # issuecomment - 166032327 " > Please add UT cases < / a > <nl> - * / <nl> - private void issue2211fail2 ( ) { <nl> - try ( AutoCloseable i = new java . io . StringReader ( " " ) ; AutoCloseable k = new java . io . StringReader ( " " ) ; ) { <nl> - } catch ( Exception e1 ) { <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineMultiline . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineMultiline . java <nl> new file mode 100644 <nl> index 0000000 . . aa7b110 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineMultiline . java <nl> @ @ - 0 , 0 + 1 , 183 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . onestatementperline ; <nl> + <nl> + / * <nl> + This class provides test input for OneStatementPerLineCheck with different <nl> + types of multiline statements . <nl> + A Java statement is the smallest unit that is a complete instruction . <nl> + Statements must end with a semicolon . <nl> + Statements generally contain expressions ( expressions have a value ) . <nl> + One of the simplest is the Assignment Statement . <nl> + <nl> + < variable > = < expression > ; <nl> + * / <nl> + public class InputOneStatementPerLineMultiline { <nl> + <nl> + / * * <nl> + * One multiline assignment ( declaration ) statement <nl> + * is legal . <nl> + * / <nl> + int e = 1 , f = 2 , <nl> + g = 5 ; <nl> + <nl> + / * * <nl> + * One multiline assignment ( declaration ) statement <nl> + * is legal . <nl> + * / <nl> + int h = 1 , <nl> + i = 2 , <nl> + j = 5 ; <nl> + <nl> + / * * <nl> + * One multiline assignment ( declaration ) statement <nl> + * is legal . <nl> + * / <nl> + int k = 1 , <nl> + l = 2 , <nl> + m = 5 <nl> + ; <nl> + <nl> + / * * <nl> + * Two multiline assignment ( declaration ) statements <nl> + * on the same line are illegal . <nl> + * / <nl> + int o = 1 , p = 2 , <nl> + r = 5 ; int t ; <nl> + <nl> + / * * <nl> + * Two assignment ( declaration ) statement <nl> + * which are not on the same line are legal . <nl> + * / <nl> + int one = 1 , <nl> + three = 5 ; <nl> + int two = 2 ; <nl> + <nl> + / * * <nl> + * Two statements on the same line <nl> + * ( they both are distributed over two lines ) <nl> + * are illegal . <nl> + * / <nl> + int var1 = 5 , <nl> + var4 = 5 ; int var2 = 6 , <nl> + var3 = 5 ; <nl> + <nl> + / * * <nl> + * Two statements on the same line <nl> + * ( the second is distributed over two lines ) <nl> + * are illegal . <nl> + * / <nl> + int var6 = 5 ; int var7 = 6 , <nl> + var8 = 5 ; <nl> + <nl> + / * * <nl> + * Two statements on the same line <nl> + * ( they both are distributed over two lines ) <nl> + * are illegal . <nl> + * / <nl> + private void foo ( ) { <nl> + toString ( <nl> + <nl> + ) ; toString ( <nl> + <nl> + ) ; <nl> + } <nl> + <nl> + / * * <nl> + * While theoretically being distributed over three lines , this is a sample <nl> + * of 2 statements on one line . <nl> + * / <nl> + int var9 = 1 , <nl> + var10 = 5 <nl> + ; int var11 = 2 ; <nl> + <nl> + / * * <nl> + * Multiline for loop statement is legal . <nl> + * / <nl> + private void foo2 ( ) { <nl> + for ( int n = 0 , <nl> + k = 1 ; <nl> + n < 5 ; n + + , <nl> + k - - ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Multiline for loop statement is legal . <nl> + * / <nl> + private void foo3 ( ) { <nl> + for ( int n = 0 , <nl> + k = 1 <nl> + ; n < 5 <nl> + ; <nl> + n + + , k - - ) { } <nl> + } <nl> + <nl> + / * * <nl> + * One statement inside multiline for loop block is legal . <nl> + * / <nl> + private void foo4 ( ) { <nl> + for ( int n = 0 , <nl> + k = 1 <nl> + ; n < 5 <nl> + ; ) { int a = 5 , <nl> + b = 2 ; } <nl> + } <nl> + <nl> + / * * <nl> + * Two statements on the same lne <nl> + * inside multiline for loop block are illegal . <nl> + * / <nl> + private void foo5 ( ) { <nl> + for ( int n = 0 , <nl> + k = 1 <nl> + ; n < 5 <nl> + ; <nl> + n + + , k - - ) { var1 + + ; var2 + + ; } <nl> + } <nl> + <nl> + / * * <nl> + * Multiple statements within try - with - resource on a separate line is legal . <nl> + * @ see < a href = " https : / / github . com / checkstyle / checkstyle / issues / 2211 " > OneStatementPerLine : false match with try - with - resources < / a > <nl> + * / <nl> + private void issue2211pass ( ) { <nl> + try ( <nl> + AutoCloseable i = new java . io . StringReader ( " " ) ; <nl> + AutoCloseable k = new java . io . StringReader ( " " ) ; <nl> + ) { <nl> + } catch ( Exception e1 ) { <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Multiple statements within try - with - resource on a separate line is legal . Added per PR comment : <nl> + * @ see < a href = " https : / / github . com / checkstyle / checkstyle / pull / 2750 # issuecomment - 166032327 " > Please add UT cases < / a > <nl> + * / <nl> + private void issue2211pass2 ( ) { <nl> + try ( AutoCloseable i = new java . io . StringReader ( " " ) ; <nl> + AutoCloseable k = new java . io . StringReader ( " " ) ; ) { <nl> + } catch ( Exception e1 ) { <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Multiple statements within try - with - resource on next line after try is illegal . <nl> + * @ see < a href = " https : / / github . com / checkstyle / checkstyle / issues / 2211 " > OneStatementPerLine : false match with try - with - resources < / a > <nl> + * / <nl> + private void issue2211fail ( ) { <nl> + try ( <nl> + AutoCloseable i = new java . io . StringReader ( " " ) ; AutoCloseable k = new java . io . StringReader ( " " ) ; <nl> + ) { <nl> + } catch ( Exception e1 ) { <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Multiple statements within try - with - resource on a same line as try is illegal . Added per PR comment : <nl> + * @ see < a href = " https : / / github . com / checkstyle / checkstyle / pull / 2750 # issuecomment - 166032327 " > Please add UT cases < / a > <nl> + * / <nl> + private void issue2211fail2 ( ) { <nl> + try ( AutoCloseable i = new java . io . StringReader ( " " ) ; AutoCloseable k = new java . io . StringReader ( " " ) ; ) { <nl> + } catch ( Exception e1 ) { <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java <nl> new file mode 100644 <nl> index 0000000 . . 185b7b7 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java <nl> @ @ - 0 , 0 + 1 , 241 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2004 Oliver Burn <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . onestatementperline ; <nl> + <nl> + / * * <nl> + * Two import statements on the same line are illegal . <nl> + * / <nl> + import java . io . EOFException ; import java . io . BufferedReader ; <nl> + <nl> + / * * <nl> + * This Class contains no logic , but serves as test - input for the unit tests for the <nl> + * < code > OneStatementPerLineCheck < / code > - checkstyle enhancement . <nl> + * @ author Alexander Jesse <nl> + * @ see com . puppycrawl . tools . checkstyle . checks . coding . OneStatementPerLineCheck <nl> + * / <nl> + public class InputOneStatementPerLineSingleLine { <nl> + / * * <nl> + * Dummy innerclass to test the behaviour in the case of a smalltalk - style <nl> + * statements ( < code > myObject . firstMethod ( ) . secondMethod ( ) . thirdMethod ( ) < / code > ) . <nl> + * For this programming style each method must return the obejct itself < code > this < / code > . <nl> + * / <nl> + class SmallTalkStyle { <nl> + SmallTalkStyle doSomething1 ( ) { <nl> + return this ; <nl> + } <nl> + <nl> + SmallTalkStyle doSomething2 ( ) { <nl> + return this ; <nl> + } <nl> + <nl> + SmallTalkStyle doSomething3 ( ) { <nl> + return this ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Dummy variable to work on . <nl> + * / <nl> + private int one = 0 ; <nl> + <nl> + / * * <nl> + * Dummy variable to work on . <nl> + * / <nl> + private int two = 0 ; <nl> + <nl> + / * * <nl> + * Simple legal method <nl> + * / <nl> + public void doLegal ( ) { <nl> + one = 1 ; <nl> + two = 2 ; <nl> + } <nl> + <nl> + / * * <nl> + * The illegal format is used in a coment . Therefor the whole method is legal . <nl> + * / <nl> + public void doLegalComment ( ) { <nl> + one = 1 ; <nl> + / / one = 1 ; two = 2 ; <nl> + two = 2 ; <nl> + / * <nl> + * one = 1 ; two = 2 ; <nl> + * / <nl> + } <nl> + <nl> + / * * <nl> + * The illegal format is used within a String . Therefor the whole method is legal . <nl> + * / <nl> + public void doLegalString ( ) { <nl> + one = 1 ; <nl> + two = 2 ; <nl> + System . identityHashCode ( " one = 1 ; two = 2 " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Within the for - header there are 3 Statements , but this is legal . <nl> + * / <nl> + public void doLegalForLoop ( ) { <nl> + for ( int i = 0 ; i < 20 ; i + + ) { <nl> + one = i ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Simplest form of an illegal layout . <nl> + * / <nl> + public void doIllegal ( ) { <nl> + one = 1 ; two = 2 ; <nl> + } <nl> + <nl> + / * * <nl> + * Smalltalk - style is considered as one statement . <nl> + * / <nl> + public void doIllegalSmallTalk ( ) { <nl> + SmallTalkStyle smalltalker = new SmallTalkStyle ( ) ; <nl> + smalltalker . doSomething1 ( ) . doSomething2 ( ) . doSomething3 ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Smalltalk - style is considered as one statement . <nl> + * / <nl> + public void doIllegalSmallTalk2 ( ) { <nl> + SmallTalkStyle smalltalker = new SmallTalkStyle ( ) ; <nl> + smalltalker . doSomething1 ( ) <nl> + . doSomething2 ( ) <nl> + . doSomething3 ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * While theoretically being distributed over two lines , this is a sample <nl> + * of 2 statements on one line . <nl> + * / <nl> + public void doIllegal2 ( ) { <nl> + one = 1 <nl> + ; two = 2 ; <nl> + } <nl> + <nl> + / * * <nl> + * The StringBuffer is a Java - API - class that permits smalltalk - style concatenation <nl> + * on the < code > append < / code > - method . <nl> + * / <nl> + public void doStringBuffer ( ) { <nl> + StringBuffer sb = new StringBuffer ( ) ; <nl> + sb . append ( " test " ) ; <nl> + sb . append ( " test2 " ) . append ( " test3 " ) ; <nl> + appendToSpringBuffer ( sb , " test4 " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * indirect stringbuffer - method . Used only internally . <nl> + * @ param sb The stringbuffer we want to append something <nl> + * @ param text The text to append <nl> + * / <nl> + private void appendToSpringBuffer ( StringBuffer sb , String text ) { <nl> + sb . append ( text ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Two declaration statements on the same line are illegal . <nl> + * / <nl> + int a ; int b ; <nl> + <nl> + / * * <nl> + * Two declaration statements which are not on the same line <nl> + * are legal . <nl> + * / <nl> + int c ; <nl> + int d ; <nl> + <nl> + / * * <nl> + * Two assignment ( declaration ) statements on the same line are illegal . <nl> + * / <nl> + int e = 1 ; int f = 2 ; <nl> + <nl> + / * * <nl> + * Two assignment ( declaration ) statements on the different lines <nl> + * are legal . <nl> + * / <nl> + int g = 1 ; <nl> + int h = 2 ; <nl> + <nl> + / * * <nl> + * This method contains two increment statements <nl> + * and two object creation statements on the same line . <nl> + * / <nl> + private void foo ( ) { <nl> + / / This is two assignment ( declaration ) <nl> + / / statements on different lines <nl> + int var1 = 1 ; <nl> + int var2 = 2 ; <nl> + <nl> + / / Two increment statements on the same line are illegal . <nl> + var1 + + ; var2 + + ; <nl> + <nl> + / / Two object creation statements on the same line are illegal . <nl> + Object obj1 = new Object ( ) ; Object obj2 = new Object ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * This method contains break , while - loop <nl> + * and for - loop statements . <nl> + * / <nl> + private void foo3 ( ) { <nl> + do { <nl> + one + + ; <nl> + if ( two > 4 ) { <nl> + break ; / / legal <nl> + } <nl> + one + + ; <nl> + two + + ; <nl> + } while ( two < 7 ) ; / / legal <nl> + <nl> + / * * <nl> + * One statement inside for block is legal . <nl> + * / <nl> + for ( int i = 0 ; i < 10 ; i + + ) one = 5 ; <nl> + <nl> + / * * <nl> + * One statement inside for block where <nl> + * increment expression is empty is legal . <nl> + * / <nl> + for ( int i = 0 ; i < 10 ; ) one = 5 ; <nl> + <nl> + / * * <nl> + * One statement inside for block where <nl> + * increment and conditional expressions are empty <nl> + * ( forever loop ) is legal <nl> + * / <nl> + for ( int i = 0 ; ; ) one = 5 ; <nl> + } <nl> + <nl> + public void foo4 ( ) { <nl> + / * * <nl> + * a " forever " loop . <nl> + * / <nl> + for ( ; ; ) { } / / legal <nl> + } <nl> + <nl> + public void foo5 ( ) { <nl> + / * * <nl> + * One statement inside for block is legal <nl> + * / <nl> + for ( ; ; ) { one = 5 ; } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / config / findbugs - exclude . xml b / config / findbugs - exclude . xml <nl> index 13b814b . . 332bc87 100644 <nl> - - - a / config / findbugs - exclude . xml <nl> + + + b / config / findbugs - exclude . xml <nl> @ @ - 99 , 20 + 99 , 6 @ @ <nl> < Package name = " ~ com \ . puppycrawl \ . tools \ . checkstyle \ . gui . * " / > <nl> < / Match > <nl> < Match > <nl> - < ! - - till # 896 - - > <nl> - < Or > <nl> - < Class name = " com . puppycrawl . tools . checkstyle . api . Scope " / > <nl> - < Class name = " com . puppycrawl . tools . checkstyle . api . SeverityLevel " / > <nl> - < Class name = " com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck " / > <nl> - < Class name = " com . puppycrawl . tools . checkstyle . checks . NewlineAtEndOfFileCheck " / > <nl> - < Class name = " com . puppycrawl . tools . checkstyle . checks . SuppressWarningsHolder " / > <nl> - < Class name = " com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationUseStyleCheck " / > <nl> - < Class name = " com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck " / > <nl> - < Class name = " com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocStyleCheck " / > <nl> - < / Or > <nl> - < Bug pattern = " DM _ CONVERT _ CASE " / > <nl> - < / Match > <nl> - < Match > <nl> < ! - - have never been a case for years , Eclipse does not show any other classes inherited from CommonASTWithHiddenTokens - - > <nl> < Class name = " com . puppycrawl . tools . checkstyle . api . DetailAST " / > <nl> < Bug pattern = " BC _ UNCONFIRMED _ CAST " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / Scope . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / Scope . java <nl> index fd1eee0 . . 28dca27 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / Scope . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / Scope . java <nl> @ @ - 18 , 11 + 18 , 14 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> + import java . util . Locale ; <nl> + <nl> / * * <nl> * Represents a Java visibility scope . <nl> * <nl> * @ author Lars K ü hne <nl> * @ author Travis Schneeberger <nl> + * @ author Mehmet Can C ö mert <nl> * / <nl> public enum Scope <nl> { <nl> @ @ - 50 , 7 + 53 , 7 @ @ public enum Scope <nl> * / <nl> public String getName ( ) <nl> { <nl> - return name ( ) . toLowerCase ( ) ; <nl> + return name ( ) . toLowerCase ( Locale . ENGLISH ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 73 , 6 + 76 , 6 @ @ public enum Scope <nl> * / <nl> public static Scope getInstance ( String scopeName ) <nl> { <nl> - return valueOf ( Scope . class , scopeName . trim ( ) . toUpperCase ( ) ) ; <nl> + return valueOf ( Scope . class , scopeName . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java <nl> index f0f8ec8 . . 3b98e95 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java <nl> @ @ - 18 , 6 + 18 , 8 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> + import java . util . Locale ; <nl> + <nl> / * * <nl> * < p > <nl> * Severity level for a check violation . <nl> @ @ - 29 , 6 + 31 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> * <nl> * @ author David Schneider <nl> * @ author Travis Schneeberger <nl> + * @ author Mehmet Can C ö mert <nl> * / <nl> public enum SeverityLevel <nl> { <nl> @ @ - 52 , 7 + 55 , 7 @ @ public enum SeverityLevel <nl> * / <nl> public String getName ( ) <nl> { <nl> - return name ( ) . toLowerCase ( ) ; <nl> + return name ( ) . toLowerCase ( Locale . ENGLISH ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 65 , 6 + 68 , 6 @ @ public enum SeverityLevel <nl> public static SeverityLevel getInstance ( String securityLevelName ) <nl> { <nl> return valueOf ( SeverityLevel . class , securityLevelName . trim ( ) <nl> - . toUpperCase ( ) ) ; <nl> + . toUpperCase ( Locale . ENGLISH ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractOptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractOptionCheck . java <nl> index e48c94b . . d3704a4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractOptionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractOptionCheck . java <nl> @ @ - 18 , 6 + 18 , 8 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> + import java . util . Locale ; <nl> + <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> @ @ - 60 , 7 + 62 , 7 @ @ public abstract class AbstractOptionCheck < T extends Enum < T > > <nl> public void setOption ( String optionStr ) throws ConversionException <nl> { <nl> try { <nl> - option = Enum . valueOf ( optionClass , optionStr . trim ( ) . toUpperCase ( ) ) ; <nl> + option = Enum . valueOf ( optionClass , optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; <nl> } <nl> catch ( IllegalArgumentException iae ) { <nl> throw new ConversionException ( " unable to parse " + option , iae ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java <nl> index 701ed88 . . 7241942 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java <nl> @ @ - 20 , 10 + 20 , 13 @ @ package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> import com . google . common . io . Closeables ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> + <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . RandomAccessFile ; <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> + <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> / * * <nl> @ @ - 108 , 7 + 111 , 7 @ @ public class NewlineAtEndOfFileCheck <nl> try { <nl> lineSeparator = <nl> Enum . valueOf ( LineSeparatorOption . class , lineSeparatorParam . trim ( ) <nl> - . toUpperCase ( ) ) ; <nl> + . toUpperCase ( Locale . ENGLISH ) ) ; <nl> } <nl> catch ( IllegalArgumentException iae ) { <nl> throw new ConversionException ( " unable to parse " + lineSeparatorParam , <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> index 15542ca . . 49f10f0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> @ @ - 20 , 7 + 20 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Lists ; <nl> - <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 30 , 6 + 29 , 7 @ @ import org . apache . commons . beanutils . ConversionException ; <nl> import java . util . HashMap ; <nl> import java . util . LinkedList ; <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> import java . util . Map ; <nl> <nl> / * * <nl> @ @ - 136 , 7 + 136 , 7 @ @ public class SuppressWarningsHolder <nl> if ( sourceName . endsWith ( CHECK _ SUFFIX ) ) { <nl> endIndex - = CHECK _ SUFFIX . length ( ) ; <nl> } <nl> - return sourceName . substring ( startIndex , endIndex ) . toLowerCase ( ) ; <nl> + return sourceName . substring ( startIndex , endIndex ) . toLowerCase ( Locale . ENGLISH ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> index 3795b64 . . 395509f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> @ @ - 18 , 6 + 18 , 8 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks . annotation ; <nl> <nl> + import java . util . Locale ; <nl> + <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> @ @ - 217 , 7 + 219 , 7 @ @ public final class AnnotationUseStyleCheck extends Check <nl> final String string ) <nl> { <nl> try { <nl> - return Enum . valueOf ( enuclass , string . trim ( ) . toUpperCase ( ) ) ; <nl> + return Enum . valueOf ( enuclass , string . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; <nl> } <nl> catch ( final IllegalArgumentException iae ) { <nl> throw new ConversionException ( " unable to parse " + string , iae ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> index f30e745 . . d73ee30 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> @ @ - 26 , 8 + 26 , 10 @ @ import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . Utils ; <nl> <nl> + import java . util . Locale ; <nl> import java . util . Set ; <nl> import java . util . regex . Pattern ; <nl> + <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> / * * <nl> @ @ - 414 , 7 + 416 , 7 @ @ public class HiddenFieldCheck <nl> if ( name ! = null & & ( name . length ( ) = = 1 <nl> | | name . length ( ) > 1 & & ! Character . isUpperCase ( name . charAt ( 1 ) ) ) ) <nl> { <nl> - setterName = name . substring ( 0 , 1 ) . toUpperCase ( ) + name . substring ( 1 ) ; <nl> + setterName = name . substring ( 0 , 1 ) . toUpperCase ( Locale . ENGLISH ) + name . substring ( 1 ) ; <nl> } <nl> return setterName ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> index b9a2312 . . dd591c3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> @ @ - 28 , 9 + 28 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; <nl> import com . puppycrawl . tools . checkstyle . api . TextBlock ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . checks . CheckUtils ; <nl> + <nl> import java . util . ArrayDeque ; <nl> import java . util . Deque ; <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> import java . util . Set ; <nl> import java . util . regex . Pattern ; <nl> <nl> @ @ - 467 , 7 + 469 , 7 @ @ public class JavadocStyleCheck <nl> / / Can ' t simply not put them on the stack , since singletons <nl> / / like < dt > and < dd > ( unhappily ) may either be terminated <nl> / / or not terminated . Both options are legal . <nl> - return SINGLE _ TAGS . contains ( tag . getId ( ) . toLowerCase ( ) ) ; <nl> + return SINGLE _ TAGS . contains ( tag . getId ( ) . toLowerCase ( Locale . ENGLISH ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 478 , 7 + 480 , 7 @ @ public class JavadocStyleCheck <nl> * / <nl> private boolean isAllowedTag ( HtmlTag tag ) <nl> { <nl> - return ALLOWED _ TAGS . contains ( tag . getId ( ) . toLowerCase ( ) ) ; <nl> + return ALLOWED _ TAGS . contains ( tag . getId ( ) . toLowerCase ( Locale . ENGLISH ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java <nl> index ac81f1d . . aead7fe 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java <nl> @ @ - 21 , 8 + 21 , 15 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> + <nl> + import java . util . Locale ; <nl> + <nl> import org . junit . Test ; <nl> <nl> + / * * <nl> + * Test cases for { @ link Scope } enumeration . <nl> + * @ author Mehmet Can C ö mert <nl> + * / <nl> public class ScopeTest <nl> { <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> @ @ - 48 , 6 + 55 , 22 @ @ public class ScopeTest <nl> } <nl> <nl> @ Test <nl> + public void testMixedCaseSpacesWithDifferentLocales ( ) <nl> + { <nl> + Locale [ ] differentLocales = new Locale [ ] { new Locale ( " TR " , " tr " ) } ; <nl> + Locale defaultLocale = Locale . getDefault ( ) ; <nl> + try { <nl> + for ( Locale differentLocale : differentLocales ) { <nl> + Locale . setDefault ( differentLocale ) ; <nl> + testMixedCaseSpaces ( ) ; <nl> + } <nl> + } <nl> + finally { <nl> + Locale . setDefault ( defaultLocale ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> public void testIsInAnonInner ( ) <nl> { <nl> assertTrue ( Scope . NOTHING . isIn ( Scope . ANONINNER ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java <nl> index 90e72cb . . c096ce5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java <nl> @ @ - 20 , 8 + 20 , 15 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> + <nl> + import java . util . Locale ; <nl> + <nl> import org . junit . Test ; <nl> <nl> + / * * <nl> + * Test cases for { @ link SeverityLevel } enumeration . <nl> + * @ author Mehmet Can C ö mert <nl> + * / <nl> public class SeverityLevelTest <nl> { <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> @ @ - 43 , 4 + 50 , 20 @ @ public class SeverityLevelTest <nl> SeverityLevel . getInstance ( " WarniNg " ) ; <nl> SeverityLevel . getInstance ( " ERROR " ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testMixedCaseSpacesWithDifferentLocales ( ) <nl> + { <nl> + Locale [ ] differentLocales = new Locale [ ] { new Locale ( " TR " , " tr " ) } ; <nl> + Locale defaultLocale = Locale . getDefault ( ) ; <nl> + try { <nl> + for ( Locale differentLocale : differentLocales ) { <nl> + Locale . setDefault ( differentLocale ) ; <nl> + testMixedCaseSpaces ( ) ; <nl> + } <nl> + } <nl> + finally { <nl> + Locale . setDefault ( defaultLocale ) ; <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 index f728eea . . e9bb121 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 @ @ - 34 , 7 + 34 , 9 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " onestatementperline " + File . separator 
 + + filename ) ; 
 } 
 
 @ Override 
 @ @ - 57 , 7 + 59 , 7 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " InputOneStatementPerLine . java " ) , 
 + getPath ( " InputOneStatementPerLineSingleLine . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 84 , 7 + 86 , 7 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " InputOneStatementPerLine2 . java " ) , 
 + getPath ( " InputOneStatementPerLineMultiline . java " ) , 
 expected ) ; 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java 
 deleted file mode 100644 
 index 52c9c45 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java 
 + + + / dev / null 
 @ @ - 1 , 241 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2004 Oliver Burn 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - / * * 
 - * Two import statements on the same line are illegal . 
 - * / 
 - import java . io . EOFException ; import java . io . BufferedReader ; 
 - 
 - / * * 
 - * This Class contains no logic , but serves as test - input for the unit tests for the 
 - * < code > OneStatementPerLineCheck < / code > - checkstyle enhancement . 
 - * @ author Alexander Jesse 
 - * @ see com . puppycrawl . tools . checkstyle . checks . coding . OneStatementPerLineCheck 
 - * / 
 - public class InputOneStatementPerLine { 
 - / * * 
 - * Dummy innerclass to test the behaviour in the case of a smalltalk - style 
 - * statements ( < code > myObject . firstMethod ( ) . secondMethod ( ) . thirdMethod ( ) < / code > ) . 
 - * For this programming style each method must return the obejct itself < code > this < / code > . 
 - * / 
 - class SmallTalkStyle { 
 - SmallTalkStyle doSomething1 ( ) { 
 - return this ; 
 - } 
 - 
 - SmallTalkStyle doSomething2 ( ) { 
 - return this ; 
 - } 
 - 
 - SmallTalkStyle doSomething3 ( ) { 
 - return this ; 
 - } 
 - } 
 - 
 - / * * 
 - * Dummy variable to work on . 
 - * / 
 - private int one = 0 ; 
 - 
 - / * * 
 - * Dummy variable to work on . 
 - * / 
 - private int two = 0 ; 
 - 
 - / * * 
 - * Simple legal method 
 - * / 
 - public void doLegal ( ) { 
 - one = 1 ; 
 - two = 2 ; 
 - } 
 - 
 - / * * 
 - * The illegal format is used in a coment . Therefor the whole method is legal . 
 - * / 
 - public void doLegalComment ( ) { 
 - one = 1 ; 
 - / / one = 1 ; two = 2 ; 
 - two = 2 ; 
 - / * 
 - * one = 1 ; two = 2 ; 
 - * / 
 - } 
 - 
 - / * * 
 - * The illegal format is used within a String . Therefor the whole method is legal . 
 - * / 
 - public void doLegalString ( ) { 
 - one = 1 ; 
 - two = 2 ; 
 - System . identityHashCode ( " one = 1 ; two = 2 " ) ; 
 - } 
 - 
 - / * * 
 - * Within the for - header there are 3 Statements , but this is legal . 
 - * / 
 - public void doLegalForLoop ( ) { 
 - for ( int i = 0 ; i < 20 ; i + + ) { 
 - one = i ; 
 - } 
 - } 
 - 
 - / * * 
 - * Simplest form of an illegal layout . 
 - * / 
 - public void doIllegal ( ) { 
 - one = 1 ; two = 2 ; 
 - } 
 - 
 - / * * 
 - * Smalltalk - style is considered as one statement . 
 - * / 
 - public void doIllegalSmallTalk ( ) { 
 - SmallTalkStyle smalltalker = new SmallTalkStyle ( ) ; 
 - smalltalker . doSomething1 ( ) . doSomething2 ( ) . doSomething3 ( ) ; 
 - } 
 - 
 - / * * 
 - * Smalltalk - style is considered as one statement . 
 - * / 
 - public void doIllegalSmallTalk2 ( ) { 
 - SmallTalkStyle smalltalker = new SmallTalkStyle ( ) ; 
 - smalltalker . doSomething1 ( ) 
 - . doSomething2 ( ) 
 - . doSomething3 ( ) ; 
 - } 
 - 
 - / * * 
 - * While theoretically being distributed over two lines , this is a sample 
 - * of 2 statements on one line . 
 - * / 
 - public void doIllegal2 ( ) { 
 - one = 1 
 - ; two = 2 ; 
 - } 
 - 
 - / * * 
 - * The StringBuffer is a Java - API - class that permits smalltalk - style concatenation 
 - * on the < code > append < / code > - method . 
 - * / 
 - public void doStringBuffer ( ) { 
 - StringBuffer sb = new StringBuffer ( ) ; 
 - sb . append ( " test " ) ; 
 - sb . append ( " test2 " ) . append ( " test3 " ) ; 
 - appendToSpringBuffer ( sb , " test4 " ) ; 
 - } 
 - 
 - / * * 
 - * indirect stringbuffer - method . Used only internally . 
 - * @ param sb The stringbuffer we want to append something 
 - * @ param text The text to append 
 - * / 
 - private void appendToSpringBuffer ( StringBuffer sb , String text ) { 
 - sb . append ( text ) ; 
 - } 
 - 
 - / * * 
 - * Two declaration statements on the same line are illegal . 
 - * / 
 - int a ; int b ; 
 - 
 - / * * 
 - * Two declaration statements which are not on the same line 
 - * are legal . 
 - * / 
 - int c ; 
 - int d ; 
 - 
 - / * * 
 - * Two assignment ( declaration ) statements on the same line are illegal . 
 - * / 
 - int e = 1 ; int f = 2 ; 
 - 
 - / * * 
 - * Two assignment ( declaration ) statements on the different lines 
 - * are legal . 
 - * / 
 - int g = 1 ; 
 - int h = 2 ; 
 - 
 - / * * 
 - * This method contains two increment statements 
 - * and two object creation statements on the same line . 
 - * / 
 - private void foo ( ) { 
 - / / This is two assignment ( declaration ) 
 - / / statements on different lines 
 - int var1 = 1 ; 
 - int var2 = 2 ; 
 - 
 - / / Two increment statements on the same line are illegal . 
 - var1 + + ; var2 + + ; 
 - 
 - / / Two object creation statements on the same line are illegal . 
 - Object obj1 = new Object ( ) ; Object obj2 = new Object ( ) ; 
 - } 
 - 
 - / * * 
 - * This method contains break , while - loop 
 - * and for - loop statements . 
 - * / 
 - private void foo3 ( ) { 
 - do { 
 - one + + ; 
 - if ( two > 4 ) { 
 - break ; / / legal 
 - } 
 - one + + ; 
 - two + + ; 
 - } while ( two < 7 ) ; / / legal 
 - 
 - / * * 
 - * One statement inside for block is legal . 
 - * / 
 - for ( int i = 0 ; i < 10 ; i + + ) one = 5 ; 
 - 
 - / * * 
 - * One statement inside for block where 
 - * increment expression is empty is legal . 
 - * / 
 - for ( int i = 0 ; i < 10 ; ) one = 5 ; 
 - 
 - / * * 
 - * One statement inside for block where 
 - * increment and conditional expressions are empty 
 - * ( forever loop ) is legal 
 - * / 
 - for ( int i = 0 ; ; ) one = 5 ; 
 - } 
 - 
 - public void foo4 ( ) { 
 - / * * 
 - * a " forever " loop . 
 - * / 
 - for ( ; ; ) { } / / legal 
 - } 
 - 
 - public void foo5 ( ) { 
 - / * * 
 - * One statement inside for block is legal 
 - * / 
 - for ( ; ; ) { one = 5 ; } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine2 . java 
 deleted file mode 100644 
 index 161dcdf . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine2 . java 
 + + + / dev / null 
 @ @ - 1 , 183 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - / * 
 - This class provides test input for OneStatementPerLineCheck with different 
 - types of multiline statements . 
 - A Java statement is the smallest unit that is a complete instruction . 
 - Statements must end with a semicolon . 
 - Statements generally contain expressions ( expressions have a value ) . 
 - One of the simplest is the Assignment Statement . 
 - 
 - < variable > = < expression > ; 
 - * / 
 - public class InputOneStatementPerLine2 { 
 - 
 - / * * 
 - * One multiline assignment ( declaration ) statement 
 - * is legal . 
 - * / 
 - int e = 1 , f = 2 , 
 - g = 5 ; 
 - 
 - / * * 
 - * One multiline assignment ( declaration ) statement 
 - * is legal . 
 - * / 
 - int h = 1 , 
 - i = 2 , 
 - j = 5 ; 
 - 
 - / * * 
 - * One multiline assignment ( declaration ) statement 
 - * is legal . 
 - * / 
 - int k = 1 , 
 - l = 2 , 
 - m = 5 
 - ; 
 - 
 - / * * 
 - * Two multiline assignment ( declaration ) statements 
 - * on the same line are illegal . 
 - * / 
 - int o = 1 , p = 2 , 
 - r = 5 ; int t ; 
 - 
 - / * * 
 - * Two assignment ( declaration ) statement 
 - * which are not on the same line are legal . 
 - * / 
 - int one = 1 , 
 - three = 5 ; 
 - int two = 2 ; 
 - 
 - / * * 
 - * Two statements on the same line 
 - * ( they both are distributed over two lines ) 
 - * are illegal . 
 - * / 
 - int var1 = 5 , 
 - var4 = 5 ; int var2 = 6 , 
 - var3 = 5 ; 
 - 
 - / * * 
 - * Two statements on the same line 
 - * ( the second is distributed over two lines ) 
 - * are illegal . 
 - * / 
 - int var6 = 5 ; int var7 = 6 , 
 - var8 = 5 ; 
 - 
 - / * * 
 - * Two statements on the same line 
 - * ( they both are distributed over two lines ) 
 - * are illegal . 
 - * / 
 - private void foo ( ) { 
 - toString ( 
 - 
 - ) ; toString ( 
 - 
 - ) ; 
 - } 
 - 
 - / * * 
 - * While theoretically being distributed over three lines , this is a sample 
 - * of 2 statements on one line . 
 - * / 
 - int var9 = 1 , 
 - var10 = 5 
 - ; int var11 = 2 ; 
 - 
 - / * * 
 - * Multiline for loop statement is legal . 
 - * / 
 - private void foo2 ( ) { 
 - for ( int n = 0 , 
 - k = 1 ; 
 - n < 5 ; n + + , 
 - k - - ) { 
 - 
 - } 
 - } 
 - 
 - / * * 
 - * Multiline for loop statement is legal . 
 - * / 
 - private void foo3 ( ) { 
 - for ( int n = 0 , 
 - k = 1 
 - ; n < 5 
 - ; 
 - n + + , k - - ) { } 
 - } 
 - 
 - / * * 
 - * One statement inside multiline for loop block is legal . 
 - * / 
 - private void foo4 ( ) { 
 - for ( int n = 0 , 
 - k = 1 
 - ; n < 5 
 - ; ) { int a = 5 , 
 - b = 2 ; } 
 - } 
 - 
 - / * * 
 - * Two statements on the same lne 
 - * inside multiline for loop block are illegal . 
 - * / 
 - private void foo5 ( ) { 
 - for ( int n = 0 , 
 - k = 1 
 - ; n < 5 
 - ; 
 - n + + , k - - ) { var1 + + ; var2 + + ; } 
 - } 
 - 
 - / * * 
 - * Multiple statements within try - with - resource on a separate line is legal . 
 - * @ see < a href = " https : / / github . com / checkstyle / checkstyle / issues / 2211 " > OneStatementPerLine : false match with try - with - resources < / a > 
 - * / 
 - private void issue2211pass ( ) { 
 - try ( 
 - AutoCloseable i = new java . io . StringReader ( " " ) ; 
 - AutoCloseable k = new java . io . StringReader ( " " ) ; 
 - ) { 
 - } catch ( Exception e1 ) { 
 - } 
 - } 
 - 
 - / * * 
 - * Multiple statements within try - with - resource on a separate line is legal . Added per PR comment : 
 - * @ see < a href = " https : / / github . com / checkstyle / checkstyle / pull / 2750 # issuecomment - 166032327 " > Please add UT cases < / a > 
 - * / 
 - private void issue2211pass2 ( ) { 
 - try ( AutoCloseable i = new java . io . StringReader ( " " ) ; 
 - AutoCloseable k = new java . io . StringReader ( " " ) ; ) { 
 - } catch ( Exception e1 ) { 
 - } 
 - } 
 - 
 - / * * 
 - * Multiple statements within try - with - resource on next line after try is illegal . 
 - * @ see < a href = " https : / / github . com / checkstyle / checkstyle / issues / 2211 " > OneStatementPerLine : false match with try - with - resources < / a > 
 - * / 
 - private void issue2211fail ( ) { 
 - try ( 
 - AutoCloseable i = new java . io . StringReader ( " " ) ; AutoCloseable k = new java . io . StringReader ( " " ) ; 
 - ) { 
 - } catch ( Exception e1 ) { 
 - } 
 - } 
 - 
 - / * * 
 - * Multiple statements within try - with - resource on a same line as try is illegal . Added per PR comment : 
 - * @ see < a href = " https : / / github . com / checkstyle / checkstyle / pull / 2750 # issuecomment - 166032327 " > Please add UT cases < / a > 
 - * / 
 - private void issue2211fail2 ( ) { 
 - try ( AutoCloseable i = new java . io . StringReader ( " " ) ; AutoCloseable k = new java . io . StringReader ( " " ) ; ) { 
 - } catch ( Exception e1 ) { 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineMultiline . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineMultiline . java 
 new file mode 100644 
 index 0000000 . . aa7b110 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineMultiline . java 
 @ @ - 0 , 0 + 1 , 183 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . onestatementperline ; 
 + 
 + / * 
 + This class provides test input for OneStatementPerLineCheck with different 
 + types of multiline statements . 
 + A Java statement is the smallest unit that is a complete instruction . 
 + Statements must end with a semicolon . 
 + Statements generally contain expressions ( expressions have a value ) . 
 + One of the simplest is the Assignment Statement . 
 + 
 + < variable > = < expression > ; 
 + * / 
 + public class InputOneStatementPerLineMultiline { 
 + 
 + / * * 
 + * One multiline assignment ( declaration ) statement 
 + * is legal . 
 + * / 
 + int e = 1 , f = 2 , 
 + g = 5 ; 
 + 
 + / * * 
 + * One multiline assignment ( declaration ) statement 
 + * is legal . 
 + * / 
 + int h = 1 , 
 + i = 2 , 
 + j = 5 ; 
 + 
 + / * * 
 + * One multiline assignment ( declaration ) statement 
 + * is legal . 
 + * / 
 + int k = 1 , 
 + l = 2 , 
 + m = 5 
 + ; 
 + 
 + / * * 
 + * Two multiline assignment ( declaration ) statements 
 + * on the same line are illegal . 
 + * / 
 + int o = 1 , p = 2 , 
 + r = 5 ; int t ; 
 + 
 + / * * 
 + * Two assignment ( declaration ) statement 
 + * which are not on the same line are legal . 
 + * / 
 + int one = 1 , 
 + three = 5 ; 
 + int two = 2 ; 
 + 
 + / * * 
 + * Two statements on the same line 
 + * ( they both are distributed over two lines ) 
 + * are illegal . 
 + * / 
 + int var1 = 5 , 
 + var4 = 5 ; int var2 = 6 , 
 + var3 = 5 ; 
 + 
 + / * * 
 + * Two statements on the same line 
 + * ( the second is distributed over two lines ) 
 + * are illegal . 
 + * / 
 + int var6 = 5 ; int var7 = 6 , 
 + var8 = 5 ; 
 + 
 + / * * 
 + * Two statements on the same line 
 + * ( they both are distributed over two lines ) 
 + * are illegal . 
 + * / 
 + private void foo ( ) { 
 + toString ( 
 + 
 + ) ; toString ( 
 + 
 + ) ; 
 + } 
 + 
 + / * * 
 + * While theoretically being distributed over three lines , this is a sample 
 + * of 2 statements on one line . 
 + * / 
 + int var9 = 1 , 
 + var10 = 5 
 + ; int var11 = 2 ; 
 + 
 + / * * 
 + * Multiline for loop statement is legal . 
 + * / 
 + private void foo2 ( ) { 
 + for ( int n = 0 , 
 + k = 1 ; 
 + n < 5 ; n + + , 
 + k - - ) { 
 + 
 + } 
 + } 
 + 
 + / * * 
 + * Multiline for loop statement is legal . 
 + * / 
 + private void foo3 ( ) { 
 + for ( int n = 0 , 
 + k = 1 
 + ; n < 5 
 + ; 
 + n + + , k - - ) { } 
 + } 
 + 
 + / * * 
 + * One statement inside multiline for loop block is legal . 
 + * / 
 + private void foo4 ( ) { 
 + for ( int n = 0 , 
 + k = 1 
 + ; n < 5 
 + ; ) { int a = 5 , 
 + b = 2 ; } 
 + } 
 + 
 + / * * 
 + * Two statements on the same lne 
 + * inside multiline for loop block are illegal . 
 + * / 
 + private void foo5 ( ) { 
 + for ( int n = 0 , 
 + k = 1 
 + ; n < 5 
 + ; 
 + n + + , k - - ) { var1 + + ; var2 + + ; } 
 + } 
 + 
 + / * * 
 + * Multiple statements within try - with - resource on a separate line is legal . 
 + * @ see < a href = " https : / / github . com / checkstyle / checkstyle / issues / 2211 " > OneStatementPerLine : false match with try - with - resources < / a > 
 + * / 
 + private void issue2211pass ( ) { 
 + try ( 
 + AutoCloseable i = new java . io . StringReader ( " " ) ; 
 + AutoCloseable k = new java . io . StringReader ( " " ) ; 
 + ) { 
 + } catch ( Exception e1 ) { 
 + } 
 + } 
 + 
 + / * * 
 + * Multiple statements within try - with - resource on a separate line is legal . Added per PR comment : 
 + * @ see < a href = " https : / / github . com / checkstyle / checkstyle / pull / 2750 # issuecomment - 166032327 " > Please add UT cases < / a > 
 + * / 
 + private void issue2211pass2 ( ) { 
 + try ( AutoCloseable i = new java . io . StringReader ( " " ) ; 
 + AutoCloseable k = new java . io . StringReader ( " " ) ; ) { 
 + } catch ( Exception e1 ) { 
 + } 
 + } 
 + 
 + / * * 
 + * Multiple statements within try - with - resource on next line after try is illegal . 
 + * @ see < a href = " https : / / github . com / checkstyle / checkstyle / issues / 2211 " > OneStatementPerLine : false match with try - with - resources < / a > 
 + * / 
 + private void issue2211fail ( ) { 
 + try ( 
 + AutoCloseable i = new java . io . StringReader ( " " ) ; AutoCloseable k = new java . io . StringReader ( " " ) ; 
 + ) { 
 + } catch ( Exception e1 ) { 
 + } 
 + } 
 + 
 + / * * 
 + * Multiple statements within try - with - resource on a same line as try is illegal . Added per PR comment : 
 + * @ see < a href = " https : / / github . com / checkstyle / checkstyle / pull / 2750 # issuecomment - 166032327 " > Please add UT cases < / a > 
 + * / 
 + private void issue2211fail2 ( ) { 
 + try ( AutoCloseable i = new java . io . StringReader ( " " ) ; AutoCloseable k = new java . io . StringReader ( " " ) ; ) { 
 + } catch ( Exception e1 ) { 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java 
 new file mode 100644 
 index 0000000 . . 185b7b7 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java 
 @ @ - 0 , 0 + 1 , 241 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2004 Oliver Burn 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . coding . onestatementperline ; 
 + 
 + / * * 
 + * Two import statements on the same line are illegal . 
 + * / 
 + import java . io . EOFException ; import java . io . BufferedReader ; 
 + 
 + / * * 
 + * This Class contains no logic , but serves as test - input for the unit tests for the 
 + * < code > OneStatementPerLineCheck < / code > - checkstyle enhancement . 
 + * @ author Alexander Jesse 
 + * @ see com . puppycrawl . tools . checkstyle . checks . coding . OneStatementPerLineCheck 
 + * / 
 + public class InputOneStatementPerLineSingleLine { 
 + / * * 
 + * Dummy innerclass to test the behaviour in the case of a smalltalk - style 
 + * statements ( < code > myObject . firstMethod ( ) . secondMethod ( ) . thirdMethod ( ) < / code > ) . 
 + * For this programming style each method must return the obejct itself < code > this < / code > . 
 + * / 
 + class SmallTalkStyle { 
 + SmallTalkStyle doSomething1 ( ) { 
 + return this ; 
 + } 
 + 
 + SmallTalkStyle doSomething2 ( ) { 
 + return this ; 
 + } 
 + 
 + SmallTalkStyle doSomething3 ( ) { 
 + return this ; 
 + } 
 + } 
 + 
 + / * * 
 + * Dummy variable to work on . 
 + * / 
 + private int one = 0 ; 
 + 
 + / * * 
 + * Dummy variable to work on . 
 + * / 
 + private int two = 0 ; 
 + 
 + / * * 
 + * Simple legal method 
 + * / 
 + public void doLegal ( ) { 
 + one = 1 ; 
 + two = 2 ; 
 + } 
 + 
 + / * * 
 + * The illegal format is used in a coment . Therefor the whole method is legal . 
 + * / 
 + public void doLegalComment ( ) { 
 + one = 1 ; 
 + / / one = 1 ; two = 2 ; 
 + two = 2 ; 
 + / * 
 + * one = 1 ; two = 2 ; 
 + * / 
 + } 
 + 
 + / * * 
 + * The illegal format is used within a String . Therefor the whole method is legal . 
 + * / 
 + public void doLegalString ( ) { 
 + one = 1 ; 
 + two = 2 ; 
 + System . identityHashCode ( " one = 1 ; two = 2 " ) ; 
 + } 
 + 
 + / * * 
 + * Within the for - header there are 3 Statements , but this is legal . 
 + * / 
 + public void doLegalForLoop ( ) { 
 + for ( int i = 0 ; i < 20 ; i + + ) { 
 + one = i ; 
 + } 
 + } 
 + 
 + / * * 
 + * Simplest form of an illegal layout . 
 + * / 
 + public void doIllegal ( ) { 
 + one = 1 ; two = 2 ; 
 + } 
 + 
 + / * * 
 + * Smalltalk - style is considered as one statement . 
 + * / 
 + public void doIllegalSmallTalk ( ) { 
 + SmallTalkStyle smalltalker = new SmallTalkStyle ( ) ; 
 + smalltalker . doSomething1 ( ) . doSomething2 ( ) . doSomething3 ( ) ; 
 + } 
 + 
 + / * * 
 + * Smalltalk - style is considered as one statement . 
 + * / 
 + public void doIllegalSmallTalk2 ( ) { 
 + SmallTalkStyle smalltalker = new SmallTalkStyle ( ) ; 
 + smalltalker . doSomething1 ( ) 
 + . doSomething2 ( ) 
 + . doSomething3 ( ) ; 
 + } 
 + 
 + / * * 
 + * While theoretically being distributed over two lines , this is a sample 
 + * of 2 statements on one line . 
 + * / 
 + public void doIllegal2 ( ) { 
 + one = 1 
 + ; two = 2 ; 
 + } 
 + 
 + / * * 
 + * The StringBuffer is a Java - API - class that permits smalltalk - style concatenation 
 + * on the < code > append < / code > - method . 
 + * / 
 + public void doStringBuffer ( ) { 
 + StringBuffer sb = new StringBuffer ( ) ; 
 + sb . append ( " test " ) ; 
 + sb . append ( " test2 " ) . append ( " test3 " ) ; 
 + appendToSpringBuffer ( sb , " test4 " ) ; 
 + } 
 + 
 + / * * 
 + * indirect stringbuffer - method . Used only internally . 
 + * @ param sb The stringbuffer we want to append something 
 + * @ param text The text to append 
 + * / 
 + private void appendToSpringBuffer ( StringBuffer sb , String text ) { 
 + sb . append ( text ) ; 
 + } 
 + 
 + / * * 
 + * Two declaration statements on the same line are illegal . 
 + * / 
 + int a ; int b ; 
 + 
 + / * * 
 + * Two declaration statements which are not on the same line 
 + * are legal . 
 + * / 
 + int c ; 
 + int d ; 
 + 
 + / * * 
 + * Two assignment ( declaration ) statements on the same line are illegal . 
 + * / 
 + int e = 1 ; int f = 2 ; 
 + 
 + / * * 
 + * Two assignment ( declaration ) statements on the different lines 
 + * are legal . 
 + * / 
 + int g = 1 ; 
 + int h = 2 ; 
 + 
 + / * * 
 + * This method contains two increment statements 
 + * and two object creation statements on the same line . 
 + * / 
 + private void foo ( ) { 
 + / / This is two assignment ( declaration ) 
 + / / statements on different lines 
 + int var1 = 1 ; 
 + int var2 = 2 ; 
 + 
 + / / Two increment statements on the same line are illegal . 
 + var1 + + ; var2 + + ; 
 + 
 + / / Two object creation statements on the same line are illegal . 
 + Object obj1 = new Object ( ) ; Object obj2 = new Object ( ) ; 
 + } 
 + 
 + / * * 
 + * This method contains break , while - loop 
 + * and for - loop statements . 
 + * / 
 + private void foo3 ( ) { 
 + do { 
 + one + + ; 
 + if ( two > 4 ) { 
 + break ; / / legal 
 + } 
 + one + + ; 
 + two + + ; 
 + } while ( two < 7 ) ; / / legal 
 + 
 + / * * 
 + * One statement inside for block is legal . 
 + * / 
 + for ( int i = 0 ; i < 10 ; i + + ) one = 5 ; 
 + 
 + / * * 
 + * One statement inside for block where 
 + * increment expression is empty is legal . 
 + * / 
 + for ( int i = 0 ; i < 10 ; ) one = 5 ; 
 + 
 + / * * 
 + * One statement inside for block where 
 + * increment and conditional expressions are empty 
 + * ( forever loop ) is legal 
 + * / 
 + for ( int i = 0 ; ; ) one = 5 ; 
 + } 
 + 
 + public void foo4 ( ) { 
 + / * * 
 + * a " forever " loop . 
 + * / 
 + for ( ; ; ) { } / / legal 
 + } 
 + 
 + public void foo5 ( ) { 
 + / * * 
 + * One statement inside for block is legal 
 + * / 
 + for ( ; ; ) { one = 5 ; } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / config / findbugs - exclude . xml b / config / findbugs - exclude . xml 
 index 13b814b . . 332bc87 100644 
 - - - a / config / findbugs - exclude . xml 
 + + + b / config / findbugs - exclude . xml 
 @ @ - 99 , 20 + 99 , 6 @ @ 
 < Package name = " ~ com \ . puppycrawl \ . tools \ . checkstyle \ . gui . * " / > 
 < / Match > 
 < Match > 
 - < ! - - till # 896 - - > 
 - < Or > 
 - < Class name = " com . puppycrawl . tools . checkstyle . api . Scope " / > 
 - < Class name = " com . puppycrawl . tools . checkstyle . api . SeverityLevel " / > 
 - < Class name = " com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck " / > 
 - < Class name = " com . puppycrawl . tools . checkstyle . checks . NewlineAtEndOfFileCheck " / > 
 - < Class name = " com . puppycrawl . tools . checkstyle . checks . SuppressWarningsHolder " / > 
 - < Class name = " com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationUseStyleCheck " / > 
 - < Class name = " com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck " / > 
 - < Class name = " com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocStyleCheck " / > 
 - < / Or > 
 - < Bug pattern = " DM _ CONVERT _ CASE " / > 
 - < / Match > 
 - < Match > 
 < ! - - have never been a case for years , Eclipse does not show any other classes inherited from CommonASTWithHiddenTokens - - > 
 < Class name = " com . puppycrawl . tools . checkstyle . api . DetailAST " / > 
 < Bug pattern = " BC _ UNCONFIRMED _ CAST " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / Scope . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / Scope . java 
 index fd1eee0 . . 28dca27 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / Scope . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / Scope . java 
 @ @ - 18 , 11 + 18 , 14 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . api ; 
 
 + import java . util . Locale ; 
 + 
 / * * 
 * Represents a Java visibility scope . 
 * 
 * @ author Lars K ü hne 
 * @ author Travis Schneeberger 
 + * @ author Mehmet Can C ö mert 
 * / 
 public enum Scope 
 { 
 @ @ - 50 , 7 + 53 , 7 @ @ public enum Scope 
 * / 
 public String getName ( ) 
 { 
 - return name ( ) . toLowerCase ( ) ; 
 + return name ( ) . toLowerCase ( Locale . ENGLISH ) ; 
 } 
 
 / * * 
 @ @ - 73 , 6 + 76 , 6 @ @ public enum Scope 
 * / 
 public static Scope getInstance ( String scopeName ) 
 { 
 - return valueOf ( Scope . class , scopeName . trim ( ) . toUpperCase ( ) ) ; 
 + return valueOf ( Scope . class , scopeName . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java 
 index f0f8ec8 . . 3b98e95 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java 
 @ @ - 18 , 6 + 18 , 8 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . api ; 
 
 + import java . util . Locale ; 
 + 
 / * * 
 * < p > 
 * Severity level for a check violation . 
 @ @ - 29 , 6 + 31 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 * 
 * @ author David Schneider 
 * @ author Travis Schneeberger 
 + * @ author Mehmet Can C ö mert 
 * / 
 public enum SeverityLevel 
 { 
 @ @ - 52 , 7 + 55 , 7 @ @ public enum SeverityLevel 
 * / 
 public String getName ( ) 
 { 
 - return name ( ) . toLowerCase ( ) ; 
 + return name ( ) . toLowerCase ( Locale . ENGLISH ) ; 
 } 
 
 / * * 
 @ @ - 65 , 6 + 68 , 6 @ @ public enum SeverityLevel 
 public static SeverityLevel getInstance ( String securityLevelName ) 
 { 
 return valueOf ( SeverityLevel . class , securityLevelName . trim ( ) 
 - . toUpperCase ( ) ) ; 
 + . toUpperCase ( Locale . ENGLISH ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractOptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractOptionCheck . java 
 index e48c94b . . d3704a4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractOptionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractOptionCheck . java 
 @ @ - 18 , 6 + 18 , 8 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 + import java . util . Locale ; 
 + 
 import org . apache . commons . beanutils . ConversionException ; 
 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 @ @ - 60 , 7 + 62 , 7 @ @ public abstract class AbstractOptionCheck < T extends Enum < T > > 
 public void setOption ( String optionStr ) throws ConversionException 
 { 
 try { 
 - option = Enum . valueOf ( optionClass , optionStr . trim ( ) . toUpperCase ( ) ) ; 
 + option = Enum . valueOf ( optionClass , optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; 
 } 
 catch ( IllegalArgumentException iae ) { 
 throw new ConversionException ( " unable to parse " + option , iae ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java 
 index 701ed88 . . 7241942 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java 
 @ @ - 20 , 10 + 20 , 13 @ @ package com . puppycrawl . tools . checkstyle . checks ; 
 
 import com . google . common . io . Closeables ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 + 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . io . RandomAccessFile ; 
 import java . util . List ; 
 + import java . util . Locale ; 
 + 
 import org . apache . commons . beanutils . ConversionException ; 
 
 / * * 
 @ @ - 108 , 7 + 111 , 7 @ @ public class NewlineAtEndOfFileCheck 
 try { 
 lineSeparator = 
 Enum . valueOf ( LineSeparatorOption . class , lineSeparatorParam . trim ( ) 
 - . toUpperCase ( ) ) ; 
 + . toUpperCase ( Locale . ENGLISH ) ) ; 
 } 
 catch ( IllegalArgumentException iae ) { 
 throw new ConversionException ( " unable to parse " + lineSeparatorParam , 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 index 15542ca . . 49f10f0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 @ @ - 20 , 7 + 20 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks ; 
 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . Lists ; 
 - 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 30 , 6 + 29 , 7 @ @ import org . apache . commons . beanutils . ConversionException ; 
 import java . util . HashMap ; 
 import java . util . LinkedList ; 
 import java . util . List ; 
 + import java . util . Locale ; 
 import java . util . Map ; 
 
 / * * 
 @ @ - 136 , 7 + 136 , 7 @ @ public class SuppressWarningsHolder 
 if ( sourceName . endsWith ( CHECK _ SUFFIX ) ) { 
 endIndex - = CHECK _ SUFFIX . length ( ) ; 
 } 
 - return sourceName . substring ( startIndex , endIndex ) . toLowerCase ( ) ; 
 + return sourceName . substring ( startIndex , endIndex ) . toLowerCase ( Locale . ENGLISH ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 index 3795b64 . . 395509f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 @ @ - 18 , 6 + 18 , 8 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks . annotation ; 
 
 + import java . util . Locale ; 
 + 
 import org . apache . commons . beanutils . ConversionException ; 
 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 @ @ - 217 , 7 + 219 , 7 @ @ public final class AnnotationUseStyleCheck extends Check 
 final String string ) 
 { 
 try { 
 - return Enum . valueOf ( enuclass , string . trim ( ) . toUpperCase ( ) ) ; 
 + return Enum . valueOf ( enuclass , string . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; 
 } 
 catch ( final IllegalArgumentException iae ) { 
 throw new ConversionException ( " unable to parse " + string , iae ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 index f30e745 . . d73ee30 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 @ @ - 26 , 8 + 26 , 10 @ @ import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . Utils ; 
 
 + import java . util . Locale ; 
 import java . util . Set ; 
 import java . util . regex . Pattern ; 
 + 
 import org . apache . commons . beanutils . ConversionException ; 
 
 / * * 
 @ @ - 414 , 7 + 416 , 7 @ @ public class HiddenFieldCheck 
 if ( name ! = null & & ( name . length ( ) = = 1 
 | | name . length ( ) > 1 & & ! Character . isUpperCase ( name . charAt ( 1 ) ) ) ) 
 { 
 - setterName = name . substring ( 0 , 1 ) . toUpperCase ( ) + name . substring ( 1 ) ; 
 + setterName = name . substring ( 0 , 1 ) . toUpperCase ( Locale . ENGLISH ) + name . substring ( 1 ) ; 
 } 
 return setterName ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 index b9a2312 . . dd591c3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 @ @ - 28 , 9 + 28 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; 
 import com . puppycrawl . tools . checkstyle . api . TextBlock ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . checks . CheckUtils ; 
 + 
 import java . util . ArrayDeque ; 
 import java . util . Deque ; 
 import java . util . List ; 
 + import java . util . Locale ; 
 import java . util . Set ; 
 import java . util . regex . Pattern ; 
 
 @ @ - 467 , 7 + 469 , 7 @ @ public class JavadocStyleCheck 
 / / Can ' t simply not put them on the stack , since singletons 
 / / like < dt > and < dd > ( unhappily ) may either be terminated 
 / / or not terminated . Both options are legal . 
 - return SINGLE _ TAGS . contains ( tag . getId ( ) . toLowerCase ( ) ) ; 
 + return SINGLE _ TAGS . contains ( tag . getId ( ) . toLowerCase ( Locale . ENGLISH ) ) ; 
 } 
 
 / * * 
 @ @ - 478 , 7 + 480 , 7 @ @ public class JavadocStyleCheck 
 * / 
 private boolean isAllowedTag ( HtmlTag tag ) 
 { 
 - return ALLOWED _ TAGS . contains ( tag . getId ( ) . toLowerCase ( ) ) ; 
 + return ALLOWED _ TAGS . contains ( tag . getId ( ) . toLowerCase ( Locale . ENGLISH ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java 
 index ac81f1d . . aead7fe 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java 
 @ @ - 21 , 8 + 21 , 15 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 + 
 + import java . util . Locale ; 
 + 
 import org . junit . Test ; 
 
 + / * * 
 + * Test cases for { @ link Scope } enumeration . 
 + * @ author Mehmet Can C ö mert 
 + * / 
 public class ScopeTest 
 { 
 @ Test ( expected = IllegalArgumentException . class ) 
 @ @ - 48 , 6 + 55 , 22 @ @ public class ScopeTest 
 } 
 
 @ Test 
 + public void testMixedCaseSpacesWithDifferentLocales ( ) 
 + { 
 + Locale [ ] differentLocales = new Locale [ ] { new Locale ( " TR " , " tr " ) } ; 
 + Locale defaultLocale = Locale . getDefault ( ) ; 
 + try { 
 + for ( Locale differentLocale : differentLocales ) { 
 + Locale . setDefault ( differentLocale ) ; 
 + testMixedCaseSpaces ( ) ; 
 + } 
 + } 
 + finally { 
 + Locale . setDefault ( defaultLocale ) ; 
 + } 
 + } 
 + 
 + @ Test 
 public void testIsInAnonInner ( ) 
 { 
 assertTrue ( Scope . NOTHING . isIn ( Scope . ANONINNER ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java 
 index 90e72cb . . c096ce5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java 
 @ @ - 20 , 8 + 20 , 15 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 + 
 + import java . util . Locale ; 
 + 
 import org . junit . Test ; 
 
 + / * * 
 + * Test cases for { @ link SeverityLevel } enumeration . 
 + * @ author Mehmet Can C ö mert 
 + * / 
 public class SeverityLevelTest 
 { 
 @ Test ( expected = IllegalArgumentException . class ) 
 @ @ - 43 , 4 + 50 , 20 @ @ public class SeverityLevelTest 
 SeverityLevel . getInstance ( " WarniNg " ) ; 
 SeverityLevel . getInstance ( " ERROR " ) ; 
 } 
 + 
 + @ Test 
 + public void testMixedCaseSpacesWithDifferentLocales ( ) 
 + { 
 + Locale [ ] differentLocales = new Locale [ ] { new Locale ( " TR " , " tr " ) } ; 
 + Locale defaultLocale = Locale . getDefault ( ) ; 
 + try { 
 + for ( Locale differentLocale : differentLocales ) { 
 + Locale . setDefault ( differentLocale ) ; 
 + testMixedCaseSpaces ( ) ; 
 + } 
 + } 
 + finally { 
 + Locale . setDefault ( defaultLocale ) ; 
 + } 
 + } 
 }
