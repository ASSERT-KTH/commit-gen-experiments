BLEU SCORE: 0.0734705312597788

TEST MSG: Issue # 6264 : added new tests to kill TRUE _ RETURNS mutations
GENERATED MSG: Issue # 4592 : Added more tests which extend AbstractPathTestSupport and AbstractModuleTestSupport

TEST DIFF (one line): diff - - git a / . ci / pitest . sh b / . ci / pitest . sh <nl> index d8b470a . . 5960852 100755 <nl> - - - a / . ci / pitest . sh <nl> + + + b / . ci / pitest . sh <nl> @ @ - 106 , 9 + 106 , 6 @ @ pitest - indentation ) <nl> " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( nextToken . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN ) { < / span > < / pre > < / td > < / tr > " <nl> " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( root . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ NEW ) { < / span > < / pre > < / td > < / tr > " <nl> " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( root . getLineNo ( ) & # 62 ; = comment . getLineNo ( ) ) { < / span > < / pre > < / td > < / tr > " <nl> - " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | previousSibling . getType ( ) = = TokenTypes . ANNOTATION _ DEF ; < / span > < / pre > < / td > < / tr > " <nl> - " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | previousSibling . getType ( ) = = TokenTypes . CLASS _ DEF < / span > < / pre > < / td > < / tr > " <nl> - " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | previousSibling . getType ( ) = = TokenTypes . INTERFACE _ DEF < / span > < / pre > < / td > < / tr > " <nl> " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return root . getFirstChild ( ) . getFirstChild ( ) . getFirstChild ( ) ! = null < / span > < / pre > < / td > < / tr > " <nl> " ElseHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return getMainAst ( ) . getFirstChild ( ) ; < / span > < / pre > < / td > < / tr > " <nl> " ElseHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > super . checkTopLevelToken ( ) ; < / span > < / pre > < / td > < / tr > " <nl> @ @ - 131 , 7 + 128 , 6 @ @ pitest - indentation ) <nl> " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( syncAst , expected , false , false ) ; < / span > < / pre > < / td > < / tr > " <nl> " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkSynchronizedExpr ( ) ; < / span > < / pre > < / td > < / tr > " <nl> " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkWrappingIndentation ( getMainAst ( ) , < / span > < / pre > < / td > < / tr > " <nl> - " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > super . checkIndentation ( ) ; < / span > < / pre > < / td > < / tr > " <nl> " TryHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkTryResParen ( getTryResLparen ( ) , & # 34 ; lparen & # 34 ; ) ; < / span > < / pre > < / td > < / tr > " <nl> ) ; <nl> checkPitestReport " $ { ignoredItems [ @ ] } " <nl> @ @ - 168 , 7 + 164 , 6 @ @ pitest - javadoc ) <nl> " JavadocTagContinuationIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( inlineTag ! = null ) { < / span > < / pre > < / td > < / tr > " <nl> " JavadocTagInfo . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > . collect ( Collectors . toMap ( JavadocTagInfo : : getName , tagName - & # 62 ; tagName ) ) ) ; < / span > < / pre > < / td > < / tr > " <nl> " JavadocTagInfo . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > . collect ( Collectors . toMap ( JavadocTagInfo : : getText , tagText - & # 62 ; tagText ) ) ) ; < / span > < / pre > < / td > < / tr > " <nl> - " JavadocTag . java . html : < td class = ' uncovered ' > < pre > < span class = ' survived ' > return tagInfo = = JavadocTagInfo . SEE < / span > < / pre > < / td > < / tr > " <nl> " JavadocTypeCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > tagCount + + ; < / span > < / pre > < / td > < / tr > " <nl> " SummaryJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > for ( int i = 0 ; ! found & # 38 ; & # 38 ; i & # 60 ; children . length - 1 ; i + + ) { < / span > < / pre > < / td > < / tr > " <nl> " SummaryJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( child . getType ( ) ! = JavadocTokenTypes . JAVADOC _ INLINE _ TAG < / span > < / pre > < / td > < / tr > " <nl> diff - - git a / pom . xml b / pom . xml <nl> index fe5339d . . 9bf5d6e 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2118 , 7 + 2118 , 7 @ @ <nl> < param > * . Input * < / param > <nl> < / excludedTestClasses > <nl> < coverageThreshold > 100 < / coverageThreshold > <nl> - < mutationThreshold > 94 < / mutationThreshold > <nl> + < mutationThreshold > 95 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> @ @ - 2159 , 7 + 2159 , 7 @ @ <nl> < param > * . Input * < / param > <nl> < / excludedTestClasses > <nl> < coverageThreshold > 100 < / coverageThreshold > <nl> - < mutationThreshold > 95 < / mutationThreshold > <nl> + < mutationThreshold > 96 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> index 8cd99df . . 0841f7d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> @ @ - 208 , 6 + 208 , 33 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testCacheRemainsWhenExternalResourceTheSame ( ) throws IOException { <nl> + final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> + final String externalResourcePath = temporaryFolder . newFile ( ) . getPath ( ) ; <nl> + final String filePath = temporaryFolder . newFile ( ) . getPath ( ) ; <nl> + final PropertyCacheFile cache = new PropertyCacheFile ( config , filePath ) ; <nl> + <nl> + / / pre - populate with cache with resources <nl> + <nl> + cache . load ( ) ; <nl> + <nl> + final Set < String > resources = new HashSet < > ( ) ; <nl> + resources . add ( externalResourcePath ) ; <nl> + cache . putExternalResources ( resources ) ; <nl> + <nl> + cache . persist ( ) ; <nl> + <nl> + / / test cache with same resources and new file <nl> + <nl> + cache . load ( ) ; <nl> + cache . put ( " myFile " , 1 ) ; <nl> + cache . putExternalResources ( resources ) ; <nl> + <nl> + assertTrue ( " Should return true in file is in cache " , <nl> + cache . isInCache ( " myFile " , 1 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testExternalResourceIsSavedInCache ( ) throws Exception { <nl> final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> final String filePath = temporaryFolder . newFile ( ) . getPath ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index 41905cf . . 9de99a1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 49 , 6 + 49 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . Context ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . coding . EmptyStatementCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . indentation . CommentsIndentationCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocPackageCheck ; <nl> @ @ - 56 , 6 + 57 , 7 @ @ import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocParagraphCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . naming . TypeNameCheck ; <nl> + import com . puppycrawl . tools . checkstyle . filters . SuppressWithNearbyCommentFilter ; <nl> import com . puppycrawl . tools . checkstyle . filters . SuppressionCommentFilter ; <nl> import com . puppycrawl . tools . checkstyle . filters . SuppressionXpathFilter ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> @ @ - 538 , 6 + 540 , 25 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> verify ( checkerConfig , filePath , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testExternalResourceFiltersWithNoExternalResource ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( EmptyStatementCheck . class ) ; <nl> + final DefaultConfiguration filterConfig = <nl> + createModuleConfig ( SuppressWithNearbyCommentFilter . class ) ; <nl> + final DefaultConfiguration treeWalkerConfig = createModuleConfig ( TreeWalker . class ) ; <nl> + treeWalkerConfig . addChild ( checkConfig ) ; <nl> + treeWalkerConfig . addChild ( filterConfig ) ; <nl> + <nl> + final DefaultConfiguration checkerConfig = createRootConfig ( treeWalkerConfig ) ; <nl> + final File cacheFile = temporaryFolder . newFile ( ) ; <nl> + checkerConfig . addAttribute ( " cacheFile " , cacheFile . getPath ( ) ) ; <nl> + <nl> + final String filePath = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkerConfig , filePath , expected ) ; <nl> + } <nl> + <nl> private static class BadJavaDocCheck extends AbstractCheck { <nl> <nl> @ Override <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> index 9aa970f . . ea3864b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> @ @ - 137 , 6 + 137 , 15 @ @ public class FileContentsTest { <nl> } <nl> <nl> @ Test <nl> + public void testNotInPackageInfo ( ) { <nl> + final FileContents fileContents = new FileContents ( new FileText ( <nl> + new File ( " filename . java " ) , <nl> + Collections . singletonList ( " / / " ) ) ) ; <nl> + <nl> + assertFalse ( " Should return false when not in package info " , fileContents . inPackageInfo ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testGetJavadocBefore ( ) { <nl> final FileContents fileContents = new FileContents ( <nl> new FileText ( new File ( " filename " ) , Collections . singletonList ( " " ) ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java <nl> index e293f24 . . a2495e7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java <nl> @ @ - 58 , 6 + 58 , 7 @ @ public class InnerAssignmentCheckTest <nl> " 45 : 16 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 45 : 27 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 46 : 32 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 86 : 19 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputInnerAssignment . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> index 061d2d8 . . b80c9d4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> @ @ - 175 , 6 + 175 , 14 @ @ public class ImportControlCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testNotRegExpNoMatch ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ImportControlCheck . class ) ; <nl> + checkConfig . addAttribute ( " file " , getPath ( " InputImportControlNotRegExpNoMatch . xml " ) ) ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputImportControl . java " ) , CommonUtil . EMPTY _ STRING _ ARRAY ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testBlacklist ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( ImportControlCheck . class ) ; <nl> checkConfig . addAttribute ( " file " , getPath ( " InputImportControlBlacklist . xml " ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index 9c735fc . . 773a038 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 1597 , 7 + 1597 , 9 @ @ public class IndentationCheckTest extends AbstractModuleTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 8 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 8 " ) ; <nl> - final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + final String [ ] expected = { <nl> + " 27 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " synchronized " , 0 , 12 ) , <nl> + } ; <nl> verifyWarns ( checkConfig , getPath ( " InputIndentationSynchronizedStatement . java " ) , expected ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java <nl> index a83ae0e . . e5737d0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java <nl> @ @ - 21 , 6 + 21 , 8 @ @ package com . puppycrawl . tools . checkstyle . checks . javadoc ; <nl> <nl> import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> import org . junit . Test ; <nl> <nl> @ @ - 65 , 4 + 67 , 19 @ @ public class JavadocTagTest { <nl> " JavadocTag [ tag = ' author ' lineNo = 0 , columnNo = 1 , firstArg = ' firstArg ' ] " , result ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testJavadocTagReferenceImports ( ) { <nl> + assertTrue ( " " , new JavadocTag ( 0 , 0 , " see " , null ) . canReferenceImports ( ) ) ; <nl> + assertTrue ( " " , new JavadocTag ( 0 , 0 , " link " , null ) . canReferenceImports ( ) ) ; <nl> + assertTrue ( " " , new JavadocTag ( 0 , 0 , " value " , null ) . canReferenceImports ( ) ) ; <nl> + assertTrue ( " " , new JavadocTag ( 0 , 0 , " linkplain " , null ) . canReferenceImports ( ) ) ; <nl> + assertTrue ( " " , new JavadocTag ( 0 , 0 , " throws " , null ) . canReferenceImports ( ) ) ; <nl> + assertTrue ( " " , new JavadocTag ( 0 , 0 , " exception " , null ) . canReferenceImports ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testJavadocTagReferenceImportsInvalid ( ) { <nl> + assertFalse ( " " , new JavadocTag ( 0 , 0 , " author " , null ) . canReferenceImports ( ) ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java <nl> index 4bbb05a . . faf88dd 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java <nl> @ @ - 28 , 6 + 28 , 8 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> + import com . puppycrawl . tools . checkstyle . checks . coding . FinalLocalVariableCheck ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> <nl> public class BeforeExecutionExclusionFileFilterTest extends AbstractModuleTestSupport { <nl> @ @ - 70 , 8 + 72 , 14 @ @ public class BeforeExecutionExclusionFileFilterTest extends AbstractModuleTestSu <nl> createModuleConfig ( BeforeExecutionExclusionFileFilter . class ) ; <nl> filterConfig . addAttribute ( " fileNamePattern " , " IncorrectClass \ \ . java " ) ; <nl> <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( FinalLocalVariableCheck . class ) ; <nl> + final DefaultConfiguration treeWalkerConfig = createModuleConfig ( TreeWalker . class ) ; <nl> + treeWalkerConfig . addChild ( checkConfig ) ; <nl> + final DefaultConfiguration checkerConfig = createRootConfig ( treeWalkerConfig ) ; <nl> + checkerConfig . addChild ( filterConfig ) ; <nl> + <nl> final String [ ] violations = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> - verify ( createChecker ( filterConfig ) , <nl> + verify ( checkerConfig , <nl> getNonCompilablePath ( " InputBeforeExecutionExclusionFileFilterIncorrectClass . java " ) , <nl> violations ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java <nl> index 70fbcba . . b077e03 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle . filters ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ @ - 37 , 6 + 38 , 8 @ @ import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> + import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> import nl . jqno . equalsverifier . EqualsVerifier ; <nl> import nl . jqno . equalsverifier . EqualsVerifierReport ; <nl> @ @ - 75 , 6 + 78 , 20 @ @ public class SuppressionFilterTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testAcceptFalse ( ) throws Exception { <nl> + final String fileName = getPath ( " InputSuppressionFilterSuppress . xml " ) ; <nl> + final boolean optional = false ; <nl> + final SuppressionFilter filter = createSuppressionFilter ( fileName , optional ) ; <nl> + <nl> + final LocalizedMessage message = new LocalizedMessage ( 1 , 1 , null , " msg " , null , <nl> + SeverityLevel . ERROR , null , getClass ( ) , null ) ; <nl> + final AuditEvent ev = new AuditEvent ( this , " ATest . java " , message ) ; <nl> + <nl> + assertFalse ( " Audit event should be rejected when there is a matching suppression " , <nl> + filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testAcceptOnNullFile ( ) throws CheckstyleException { <nl> final String fileName = null ; <nl> final boolean optional = false ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java <nl> index 8ffd5e2 . . 607cb0b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . gui ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ @ - 169 , 6 + 170 , 16 @ @ public class MainFrameModelTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testOpenFileNullParameter2 ( ) throws Exception { <nl> + model . openFile ( null ) ; <nl> + <nl> + assertNull ( " Test is null " , model . getText ( ) ) ; <nl> + assertEquals ( " Title is expected value " , " Checkstyle GUI " , model . getTitle ( ) ) ; <nl> + assertFalse ( " Reload action should be disabled " , model . isReloadActionEnabled ( ) ) ; <nl> + assertNull ( " Current file is null " , model . getCurrentFile ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testOpenFileNonExistentFile ( ) throws IOException { <nl> final File nonExistentFile = new File ( getPath ( FILE _ NAME _ NON _ EXISTENT ) ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilTest . java <nl> index b8ecd60 . . e7be776 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilTest . java <nl> @ @ - 233 , 6 + 233 , 27 @ @ public class AnnotationUtilTest { <nl> } <nl> <nl> @ Test <nl> + public void testContainsAnnotationListWithNoMatchingAnnotation ( ) { <nl> + final DetailAST ast = new DetailAST ( ) ; <nl> + final DetailAST modifiersAst = create ( <nl> + TokenTypes . MODIFIERS , <nl> + create ( <nl> + TokenTypes . ANNOTATION , <nl> + create ( <nl> + TokenTypes . DOT , <nl> + create ( <nl> + TokenTypes . IDENT , <nl> + " Override " ) <nl> + ) <nl> + ) <nl> + ) ; <nl> + ast . addChild ( modifiersAst ) ; <nl> + final List < String > annotations = Collections . singletonList ( " Deprecated " ) ; <nl> + final boolean result = AnnotationUtil . containsAnnotation ( ast , annotations ) ; <nl> + assertFalse ( " No matching annotation found " , result ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testContainsAnnotation ( ) { <nl> final DetailAST astForTest = new DetailAST ( ) ; <nl> astForTest . setType ( TokenTypes . PACKAGE _ DEF ) ; <nl> @ @ - 257 , 6 + 278 , 30 @ @ public class AnnotationUtilTest { <nl> } <nl> <nl> @ Test <nl> + public void testContainsAnnotationWithStringFalse ( ) { <nl> + final DetailAST astForTest = new DetailAST ( ) ; <nl> + astForTest . setType ( TokenTypes . PACKAGE _ DEF ) ; <nl> + final DetailAST child = new DetailAST ( ) ; <nl> + final DetailAST annotations = new DetailAST ( ) ; <nl> + final DetailAST annotation = new DetailAST ( ) ; <nl> + final DetailAST annotationNameHolder = new DetailAST ( ) ; <nl> + final DetailAST annotationName = new DetailAST ( ) ; <nl> + annotations . setType ( TokenTypes . ANNOTATIONS ) ; <nl> + annotation . setType ( TokenTypes . ANNOTATION ) ; <nl> + annotationNameHolder . setType ( TokenTypes . AT ) ; <nl> + annotationName . setText ( " Annotation " ) ; <nl> + <nl> + annotationNameHolder . setNextSibling ( annotationName ) ; <nl> + annotation . setFirstChild ( annotationNameHolder ) ; <nl> + annotations . setFirstChild ( annotation ) ; <nl> + child . setNextSibling ( annotations ) ; <nl> + astForTest . setFirstChild ( child ) ; <nl> + <nl> + assertFalse ( " Annotation should not contain " + astForTest , <nl> + AnnotationUtil . containsAnnotation ( astForTest , " AnnotationBad " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testContainsAnnotationWithComment ( ) { <nl> final DetailAST astForTest = new DetailAST ( ) ; <nl> astForTest . setType ( TokenTypes . PACKAGE _ DEF ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilTest . java <nl> index 032a340 . . 11860c7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilTest . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import org . junit . Test ; <nl> import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> import com . puppycrawl . tools . checkstyle . TreeWalkerAuditEvent ; <nl> import com . puppycrawl . tools . checkstyle . TreeWalkerFilter ; <nl> + import com . puppycrawl . tools . checkstyle . XpathFileGeneratorAstFilter ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> @ @ - 81 , 6 + 82 , 9 @ @ public class ModuleReflectionUtilTest { <nl> assertFalse ( " Should return false when invalid class is passed " , <nl> ModuleReflectionUtil <nl> . isValidCheckstyleClass ( InvalidNonDefaultConstructorClass . class ) ) ; <nl> + assertFalse ( " Should return false when forced invalid class is passed " , <nl> + ModuleReflectionUtil <nl> + . isValidCheckstyleClass ( XpathFileGeneratorAstFilter . class ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java <nl> index 1031f05 . . 99267b6 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java <nl> @ @ - 78 , 6 + 78 , 12 @ @ public class InputInnerAssignment <nl> do <nl> sum = sum + 1 ; <nl> while ( sum < 6 ) ; <nl> + <nl> + ChildParent o = new ChildParent ( ) ; <nl> + Object t = null ; <nl> + <nl> + while ( o ! = null ) <nl> + t = o = o . getParent ( ) ; <nl> } <nl> <nl> @ SuppressWarnings ( value = " unchecked " ) <nl> @ @ - 99 , 4 + 105 , 10 @ @ public class InputInnerAssignment <nl> return null ; <nl> } <nl> } <nl> + <nl> + private static class ChildParent { <nl> + public ChildParent getParent ( ) { <nl> + return this ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java <nl> index 01c2414 . . 9d59859 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java <nl> @ @ - 77 , 6 + 77 , 9 @ @ class InputModifiedControlVariableBothForLoops <nl> } ; <nl> v = " bad " ; <nl> } <nl> + for ( int i = 0 ; i < 10 ; i + = 1 ) { <nl> + for ( i = 7 ; i < 10 ; i + = 1 ) { } <nl> + } <nl> } <nl> private int i ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importcontrol / InputImportControlNotRegExpNoMatch . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importcontrol / InputImportControlNotRegExpNoMatch . xml <nl> new file mode 100644 <nl> index 0000000 . . a4f7ba6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importcontrol / InputImportControlNotRegExpNoMatch . xml <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + < ? xml version = " 1 . 0 " ? > <nl> + < ! DOCTYPE import - control PUBLIC <nl> + " - / / Checkstyle / / DTD ImportControl Configuration 1 . 2 / / EN " <nl> + " https : / / checkstyle . org / dtds / import _ control _ 1 _ 2 . dtd " > <nl> + <nl> + < import - control pkg = " com . puppycrawl . tools . checkstyle . checks . imports " > <nl> + < disallow class = " javax . * " / > <nl> + < allow class = " . * " regex = " true " / > <nl> + < / import - control > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> index 4d41f4f . . 29aecdf 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> @ @ - 563 , 6 + 563 , 13 @ @ public class InputCommentsIndentationCommentIsAtTheEndOfBlock { <nl> / / comment <nl> } <nl> <nl> + void InputCommentsIndentationCommentIsAtTheEndOfBlock ( String s ) { <nl> + assert ( s = = null | | <nl> + s ! = null ) ; <nl> + / / comment <nl> + / / comment <nl> + } <nl> + <nl> / / We almost reached the end of the class here . <nl> } <nl> / / The END of the class . <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java <nl> index 6ce80ce . . 2695bfa 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java <nl> @ @ - 23 , 6 + 23 , 9 @ @ public class InputIndentationSynchronizedStatement { / / indent : 0 exp : 0 <nl> if ( instance = = null ) / / indent : 16 exp : 16 <nl> instance = new InputIndentationSynchronizedStatement ( ) ; / / indent : 20 exp : 20 <nl> } / / indent : 12 exp : 12 <nl> + synchronized ( new Object ( ) ) { / / indent : 8 exp : 8 <nl> + instance = instance ; / / indent : 0 exp : 12 warn <nl> + } / / indent : 8 exp : 8 <nl> return instance ; / / indent : 8 exp : 8 <nl> } / / indent : 4 exp : 4 <nl> } / / indent : 0 exp : 0 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / filters / suppressionfilter / InputSuppressionFilterSuppress . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / filters / suppressionfilter / InputSuppressionFilterSuppress . xml <nl> new file mode 100644 <nl> index 0000000 . . 9ec2ffb <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / filters / suppressionfilter / InputSuppressionFilterSuppress . xml <nl> @ @ - 0 , 0 + 1 , 7 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> + < ! DOCTYPE suppressions PUBLIC <nl> + " - / / Checkstyle / / DTD SuppressionFilter Configuration 1 . 0 / / EN " <nl> + " https : / / checkstyle . org / dtds / suppressions _ 1 _ 0 . dtd " > <nl> + < suppressions > <nl> + < suppress checks = " Suppression " files = " ATest . java " / > <nl> + < / suppressions >
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index a6918a9 . . 24a0850 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 152 , 7 + 152 , 7 @ @ <nl> < module name = " SuppressWarnings " > <nl> < property name = " format " value = " ^ ( ( ? ! unchecked | deprecation | rawtypes ) . ) * $ " / > <nl> < message key = " suppressed . warning . not . allowed " <nl> - value = " The warning ' ' { 0 } ' ' cannot be suppressed at this location . If you try to suppress IntelliJ IDEA inspection , please use javadoc block tag @ noinspection " <nl> + value = " The warning ' ' { 0 } ' ' cannot be suppressed at this location . Only few javac warnings are allowed to suppress . If try to suppress checkstyle / pmd / . . . . . violation please do this in their config file . If you try to suppress IntelliJ IDEA inspection , please use javadoc block tag @ noinspection " <nl> / > <nl> < / module > <nl> < module name = " SuppressWarningsHolder " / >

TEST DIFF:
diff - - git a / . ci / pitest . sh b / . ci / pitest . sh 
 index d8b470a . . 5960852 100755 
 - - - a / . ci / pitest . sh 
 + + + b / . ci / pitest . sh 
 @ @ - 106 , 9 + 106 , 6 @ @ pitest - indentation ) 
 " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( nextToken . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN ) { < / span > < / pre > < / td > < / tr > " 
 " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( root . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ NEW ) { < / span > < / pre > < / td > < / tr > " 
 " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( root . getLineNo ( ) & # 62 ; = comment . getLineNo ( ) ) { < / span > < / pre > < / td > < / tr > " 
 - " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | previousSibling . getType ( ) = = TokenTypes . ANNOTATION _ DEF ; < / span > < / pre > < / td > < / tr > " 
 - " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | previousSibling . getType ( ) = = TokenTypes . CLASS _ DEF < / span > < / pre > < / td > < / tr > " 
 - " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > | | previousSibling . getType ( ) = = TokenTypes . INTERFACE _ DEF < / span > < / pre > < / td > < / tr > " 
 " CommentsIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return root . getFirstChild ( ) . getFirstChild ( ) . getFirstChild ( ) ! = null < / span > < / pre > < / td > < / tr > " 
 " ElseHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return getMainAst ( ) . getFirstChild ( ) ; < / span > < / pre > < / td > < / tr > " 
 " ElseHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > super . checkTopLevelToken ( ) ; < / span > < / pre > < / td > < / tr > " 
 @ @ - 131 , 7 + 128 , 6 @ @ pitest - indentation ) 
 " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkExpressionSubtree ( syncAst , expected , false , false ) ; < / span > < / pre > < / td > < / tr > " 
 " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkSynchronizedExpr ( ) ; < / span > < / pre > < / td > < / tr > " 
 " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkWrappingIndentation ( getMainAst ( ) , < / span > < / pre > < / td > < / tr > " 
 - " SynchronizedHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > super . checkIndentation ( ) ; < / span > < / pre > < / td > < / tr > " 
 " TryHandler . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > checkTryResParen ( getTryResLparen ( ) , & # 34 ; lparen & # 34 ; ) ; < / span > < / pre > < / td > < / tr > " 
 ) ; 
 checkPitestReport " $ { ignoredItems [ @ ] } " 
 @ @ - 168 , 7 + 164 , 6 @ @ pitest - javadoc ) 
 " JavadocTagContinuationIndentationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( inlineTag ! = null ) { < / span > < / pre > < / td > < / tr > " 
 " JavadocTagInfo . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > . collect ( Collectors . toMap ( JavadocTagInfo : : getName , tagName - & # 62 ; tagName ) ) ) ; < / span > < / pre > < / td > < / tr > " 
 " JavadocTagInfo . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > . collect ( Collectors . toMap ( JavadocTagInfo : : getText , tagText - & # 62 ; tagText ) ) ) ; < / span > < / pre > < / td > < / tr > " 
 - " JavadocTag . java . html : < td class = ' uncovered ' > < pre > < span class = ' survived ' > return tagInfo = = JavadocTagInfo . SEE < / span > < / pre > < / td > < / tr > " 
 " JavadocTypeCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > tagCount + + ; < / span > < / pre > < / td > < / tr > " 
 " SummaryJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > for ( int i = 0 ; ! found & # 38 ; & # 38 ; i & # 60 ; children . length - 1 ; i + + ) { < / span > < / pre > < / td > < / tr > " 
 " SummaryJavadocCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( child . getType ( ) ! = JavadocTokenTypes . JAVADOC _ INLINE _ TAG < / span > < / pre > < / td > < / tr > " 
 diff - - git a / pom . xml b / pom . xml 
 index fe5339d . . 9bf5d6e 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2118 , 7 + 2118 , 7 @ @ 
 < param > * . Input * < / param > 
 < / excludedTestClasses > 
 < coverageThreshold > 100 < / coverageThreshold > 
 - < mutationThreshold > 94 < / mutationThreshold > 
 + < mutationThreshold > 95 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 @ @ - 2159 , 7 + 2159 , 7 @ @ 
 < param > * . Input * < / param > 
 < / excludedTestClasses > 
 < coverageThreshold > 100 < / coverageThreshold > 
 - < mutationThreshold > 95 < / mutationThreshold > 
 + < mutationThreshold > 96 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 index 8cd99df . . 0841f7d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 @ @ - 208 , 6 + 208 , 33 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { 
 } 
 
 @ Test 
 + public void testCacheRemainsWhenExternalResourceTheSame ( ) throws IOException { 
 + final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 + final String externalResourcePath = temporaryFolder . newFile ( ) . getPath ( ) ; 
 + final String filePath = temporaryFolder . newFile ( ) . getPath ( ) ; 
 + final PropertyCacheFile cache = new PropertyCacheFile ( config , filePath ) ; 
 + 
 + / / pre - populate with cache with resources 
 + 
 + cache . load ( ) ; 
 + 
 + final Set < String > resources = new HashSet < > ( ) ; 
 + resources . add ( externalResourcePath ) ; 
 + cache . putExternalResources ( resources ) ; 
 + 
 + cache . persist ( ) ; 
 + 
 + / / test cache with same resources and new file 
 + 
 + cache . load ( ) ; 
 + cache . put ( " myFile " , 1 ) ; 
 + cache . putExternalResources ( resources ) ; 
 + 
 + assertTrue ( " Should return true in file is in cache " , 
 + cache . isInCache ( " myFile " , 1 ) ) ; 
 + } 
 + 
 + @ Test 
 public void testExternalResourceIsSavedInCache ( ) throws Exception { 
 final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 final String filePath = temporaryFolder . newFile ( ) . getPath ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index 41905cf . . 9de99a1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 49 , 6 + 49 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . Context ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . coding . EmptyStatementCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . indentation . CommentsIndentationCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocPackageCheck ; 
 @ @ - 56 , 6 + 57 , 7 @ @ import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocParagraphCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . naming . TypeNameCheck ; 
 + import com . puppycrawl . tools . checkstyle . filters . SuppressWithNearbyCommentFilter ; 
 import com . puppycrawl . tools . checkstyle . filters . SuppressionCommentFilter ; 
 import com . puppycrawl . tools . checkstyle . filters . SuppressionXpathFilter ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 @ @ - 538 , 6 + 540 , 25 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 verify ( checkerConfig , filePath , expected ) ; 
 } 
 
 + @ Test 
 + public void testExternalResourceFiltersWithNoExternalResource ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( EmptyStatementCheck . class ) ; 
 + final DefaultConfiguration filterConfig = 
 + createModuleConfig ( SuppressWithNearbyCommentFilter . class ) ; 
 + final DefaultConfiguration treeWalkerConfig = createModuleConfig ( TreeWalker . class ) ; 
 + treeWalkerConfig . addChild ( checkConfig ) ; 
 + treeWalkerConfig . addChild ( filterConfig ) ; 
 + 
 + final DefaultConfiguration checkerConfig = createRootConfig ( treeWalkerConfig ) ; 
 + final File cacheFile = temporaryFolder . newFile ( ) ; 
 + checkerConfig . addAttribute ( " cacheFile " , cacheFile . getPath ( ) ) ; 
 + 
 + final String filePath = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkerConfig , filePath , expected ) ; 
 + } 
 + 
 private static class BadJavaDocCheck extends AbstractCheck { 
 
 @ Override 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 index 9aa970f . . ea3864b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 @ @ - 137 , 6 + 137 , 15 @ @ public class FileContentsTest { 
 } 
 
 @ Test 
 + public void testNotInPackageInfo ( ) { 
 + final FileContents fileContents = new FileContents ( new FileText ( 
 + new File ( " filename . java " ) , 
 + Collections . singletonList ( " / / " ) ) ) ; 
 + 
 + assertFalse ( " Should return false when not in package info " , fileContents . inPackageInfo ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testGetJavadocBefore ( ) { 
 final FileContents fileContents = new FileContents ( 
 new FileText ( new File ( " filename " ) , Collections . singletonList ( " " ) ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java 
 index e293f24 . . a2495e7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheckTest . java 
 @ @ - 58 , 6 + 58 , 7 @ @ public class InnerAssignmentCheckTest 
 " 45 : 16 : " + getCheckMessage ( MSG _ KEY ) , 
 " 45 : 27 : " + getCheckMessage ( MSG _ KEY ) , 
 " 46 : 32 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 86 : 19 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputInnerAssignment . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 index 061d2d8 . . b80c9d4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 @ @ - 175 , 6 + 175 , 14 @ @ public class ImportControlCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testNotRegExpNoMatch ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ImportControlCheck . class ) ; 
 + checkConfig . addAttribute ( " file " , getPath ( " InputImportControlNotRegExpNoMatch . xml " ) ) ; 
 + 
 + verify ( checkConfig , getPath ( " InputImportControl . java " ) , CommonUtil . EMPTY _ STRING _ ARRAY ) ; 
 + } 
 + 
 + @ Test 
 public void testBlacklist ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( ImportControlCheck . class ) ; 
 checkConfig . addAttribute ( " file " , getPath ( " InputImportControlBlacklist . xml " ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index 9c735fc . . 773a038 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 1597 , 7 + 1597 , 9 @ @ public class IndentationCheckTest extends AbstractModuleTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 8 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 8 " ) ; 
 - final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + final String [ ] expected = { 
 + " 27 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " synchronized " , 0 , 12 ) , 
 + } ; 
 verifyWarns ( checkConfig , getPath ( " InputIndentationSynchronizedStatement . java " ) , expected ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java 
 index a83ae0e . . e5737d0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagTest . java 
 @ @ - 21 , 6 + 21 , 8 @ @ package com . puppycrawl . tools . checkstyle . checks . javadoc ; 
 
 import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 
 import org . junit . Test ; 
 
 @ @ - 65 , 4 + 67 , 19 @ @ public class JavadocTagTest { 
 " JavadocTag [ tag = ' author ' lineNo = 0 , columnNo = 1 , firstArg = ' firstArg ' ] " , result ) ; 
 } 
 
 + @ Test 
 + public void testJavadocTagReferenceImports ( ) { 
 + assertTrue ( " " , new JavadocTag ( 0 , 0 , " see " , null ) . canReferenceImports ( ) ) ; 
 + assertTrue ( " " , new JavadocTag ( 0 , 0 , " link " , null ) . canReferenceImports ( ) ) ; 
 + assertTrue ( " " , new JavadocTag ( 0 , 0 , " value " , null ) . canReferenceImports ( ) ) ; 
 + assertTrue ( " " , new JavadocTag ( 0 , 0 , " linkplain " , null ) . canReferenceImports ( ) ) ; 
 + assertTrue ( " " , new JavadocTag ( 0 , 0 , " throws " , null ) . canReferenceImports ( ) ) ; 
 + assertTrue ( " " , new JavadocTag ( 0 , 0 , " exception " , null ) . canReferenceImports ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testJavadocTagReferenceImportsInvalid ( ) { 
 + assertFalse ( " " , new JavadocTag ( 0 , 0 , " author " , null ) . canReferenceImports ( ) ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java 
 index 4bbb05a . . faf88dd 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java 
 @ @ - 28 , 6 + 28 , 8 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 + import com . puppycrawl . tools . checkstyle . checks . coding . FinalLocalVariableCheck ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 
 public class BeforeExecutionExclusionFileFilterTest extends AbstractModuleTestSupport { 
 @ @ - 70 , 8 + 72 , 14 @ @ public class BeforeExecutionExclusionFileFilterTest extends AbstractModuleTestSu 
 createModuleConfig ( BeforeExecutionExclusionFileFilter . class ) ; 
 filterConfig . addAttribute ( " fileNamePattern " , " IncorrectClass \ \ . java " ) ; 
 
 + final DefaultConfiguration checkConfig = createModuleConfig ( FinalLocalVariableCheck . class ) ; 
 + final DefaultConfiguration treeWalkerConfig = createModuleConfig ( TreeWalker . class ) ; 
 + treeWalkerConfig . addChild ( checkConfig ) ; 
 + final DefaultConfiguration checkerConfig = createRootConfig ( treeWalkerConfig ) ; 
 + checkerConfig . addChild ( filterConfig ) ; 
 + 
 final String [ ] violations = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 - verify ( createChecker ( filterConfig ) , 
 + verify ( checkerConfig , 
 getNonCompilablePath ( " InputBeforeExecutionExclusionFileFilterIncorrectClass . java " ) , 
 violations ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java 
 index 70fbcba . . b077e03 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilterTest . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle . filters ; 
 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ @ - 37 , 6 + 38 , 8 @ @ import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 + import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 import nl . jqno . equalsverifier . EqualsVerifier ; 
 import nl . jqno . equalsverifier . EqualsVerifierReport ; 
 @ @ - 75 , 6 + 78 , 20 @ @ public class SuppressionFilterTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testAcceptFalse ( ) throws Exception { 
 + final String fileName = getPath ( " InputSuppressionFilterSuppress . xml " ) ; 
 + final boolean optional = false ; 
 + final SuppressionFilter filter = createSuppressionFilter ( fileName , optional ) ; 
 + 
 + final LocalizedMessage message = new LocalizedMessage ( 1 , 1 , null , " msg " , null , 
 + SeverityLevel . ERROR , null , getClass ( ) , null ) ; 
 + final AuditEvent ev = new AuditEvent ( this , " ATest . java " , message ) ; 
 + 
 + assertFalse ( " Audit event should be rejected when there is a matching suppression " , 
 + filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 public void testAcceptOnNullFile ( ) throws CheckstyleException { 
 final String fileName = null ; 
 final boolean optional = false ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java 
 index 8ffd5e2 . . 607cb0b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . gui ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ @ - 169 , 6 + 170 , 16 @ @ public class MainFrameModelTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testOpenFileNullParameter2 ( ) throws Exception { 
 + model . openFile ( null ) ; 
 + 
 + assertNull ( " Test is null " , model . getText ( ) ) ; 
 + assertEquals ( " Title is expected value " , " Checkstyle GUI " , model . getTitle ( ) ) ; 
 + assertFalse ( " Reload action should be disabled " , model . isReloadActionEnabled ( ) ) ; 
 + assertNull ( " Current file is null " , model . getCurrentFile ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testOpenFileNonExistentFile ( ) throws IOException { 
 final File nonExistentFile = new File ( getPath ( FILE _ NAME _ NON _ EXISTENT ) ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilTest . java 
 index b8ecd60 . . e7be776 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilTest . java 
 @ @ - 233 , 6 + 233 , 27 @ @ public class AnnotationUtilTest { 
 } 
 
 @ Test 
 + public void testContainsAnnotationListWithNoMatchingAnnotation ( ) { 
 + final DetailAST ast = new DetailAST ( ) ; 
 + final DetailAST modifiersAst = create ( 
 + TokenTypes . MODIFIERS , 
 + create ( 
 + TokenTypes . ANNOTATION , 
 + create ( 
 + TokenTypes . DOT , 
 + create ( 
 + TokenTypes . IDENT , 
 + " Override " ) 
 + ) 
 + ) 
 + ) ; 
 + ast . addChild ( modifiersAst ) ; 
 + final List < String > annotations = Collections . singletonList ( " Deprecated " ) ; 
 + final boolean result = AnnotationUtil . containsAnnotation ( ast , annotations ) ; 
 + assertFalse ( " No matching annotation found " , result ) ; 
 + } 
 + 
 + @ Test 
 public void testContainsAnnotation ( ) { 
 final DetailAST astForTest = new DetailAST ( ) ; 
 astForTest . setType ( TokenTypes . PACKAGE _ DEF ) ; 
 @ @ - 257 , 6 + 278 , 30 @ @ public class AnnotationUtilTest { 
 } 
 
 @ Test 
 + public void testContainsAnnotationWithStringFalse ( ) { 
 + final DetailAST astForTest = new DetailAST ( ) ; 
 + astForTest . setType ( TokenTypes . PACKAGE _ DEF ) ; 
 + final DetailAST child = new DetailAST ( ) ; 
 + final DetailAST annotations = new DetailAST ( ) ; 
 + final DetailAST annotation = new DetailAST ( ) ; 
 + final DetailAST annotationNameHolder = new DetailAST ( ) ; 
 + final DetailAST annotationName = new DetailAST ( ) ; 
 + annotations . setType ( TokenTypes . ANNOTATIONS ) ; 
 + annotation . setType ( TokenTypes . ANNOTATION ) ; 
 + annotationNameHolder . setType ( TokenTypes . AT ) ; 
 + annotationName . setText ( " Annotation " ) ; 
 + 
 + annotationNameHolder . setNextSibling ( annotationName ) ; 
 + annotation . setFirstChild ( annotationNameHolder ) ; 
 + annotations . setFirstChild ( annotation ) ; 
 + child . setNextSibling ( annotations ) ; 
 + astForTest . setFirstChild ( child ) ; 
 + 
 + assertFalse ( " Annotation should not contain " + astForTest , 
 + AnnotationUtil . containsAnnotation ( astForTest , " AnnotationBad " ) ) ; 
 + } 
 + 
 + @ Test 
 public void testContainsAnnotationWithComment ( ) { 
 final DetailAST astForTest = new DetailAST ( ) ; 
 astForTest . setType ( TokenTypes . PACKAGE _ DEF ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilTest . java 
 index 032a340 . . 11860c7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilTest . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import org . junit . Test ; 
 import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 import com . puppycrawl . tools . checkstyle . TreeWalkerAuditEvent ; 
 import com . puppycrawl . tools . checkstyle . TreeWalkerFilter ; 
 + import com . puppycrawl . tools . checkstyle . XpathFileGeneratorAstFilter ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 @ @ - 81 , 6 + 82 , 9 @ @ public class ModuleReflectionUtilTest { 
 assertFalse ( " Should return false when invalid class is passed " , 
 ModuleReflectionUtil 
 . isValidCheckstyleClass ( InvalidNonDefaultConstructorClass . class ) ) ; 
 + assertFalse ( " Should return false when forced invalid class is passed " , 
 + ModuleReflectionUtil 
 + . isValidCheckstyleClass ( XpathFileGeneratorAstFilter . class ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java 
 index 1031f05 . . 99267b6 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / innerassignment / InputInnerAssignment . java 
 @ @ - 78 , 6 + 78 , 12 @ @ public class InputInnerAssignment 
 do 
 sum = sum + 1 ; 
 while ( sum < 6 ) ; 
 + 
 + ChildParent o = new ChildParent ( ) ; 
 + Object t = null ; 
 + 
 + while ( o ! = null ) 
 + t = o = o . getParent ( ) ; 
 } 
 
 @ SuppressWarnings ( value = " unchecked " ) 
 @ @ - 99 , 4 + 105 , 10 @ @ public class InputInnerAssignment 
 return null ; 
 } 
 } 
 + 
 + private static class ChildParent { 
 + public ChildParent getParent ( ) { 
 + return this ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java 
 index 01c2414 . . 9d59859 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java 
 @ @ - 77 , 6 + 77 , 9 @ @ class InputModifiedControlVariableBothForLoops 
 } ; 
 v = " bad " ; 
 } 
 + for ( int i = 0 ; i < 10 ; i + = 1 ) { 
 + for ( i = 7 ; i < 10 ; i + = 1 ) { } 
 + } 
 } 
 private int i ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importcontrol / InputImportControlNotRegExpNoMatch . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importcontrol / InputImportControlNotRegExpNoMatch . xml 
 new file mode 100644 
 index 0000000 . . a4f7ba6 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importcontrol / InputImportControlNotRegExpNoMatch . xml 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + < ? xml version = " 1 . 0 " ? > 
 + < ! DOCTYPE import - control PUBLIC 
 + " - / / Checkstyle / / DTD ImportControl Configuration 1 . 2 / / EN " 
 + " https : / / checkstyle . org / dtds / import _ control _ 1 _ 2 . dtd " > 
 + 
 + < import - control pkg = " com . puppycrawl . tools . checkstyle . checks . imports " > 
 + < disallow class = " javax . * " / > 
 + < allow class = " . * " regex = " true " / > 
 + < / import - control > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 index 4d41f4f . . 29aecdf 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 @ @ - 563 , 6 + 563 , 13 @ @ public class InputCommentsIndentationCommentIsAtTheEndOfBlock { 
 / / comment 
 } 
 
 + void InputCommentsIndentationCommentIsAtTheEndOfBlock ( String s ) { 
 + assert ( s = = null | | 
 + s ! = null ) ; 
 + / / comment 
 + / / comment 
 + } 
 + 
 / / We almost reached the end of the class here . 
 } 
 / / The END of the class . 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java 
 index 6ce80ce . . 2695bfa 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java 
 @ @ - 23 , 6 + 23 , 9 @ @ public class InputIndentationSynchronizedStatement { / / indent : 0 exp : 0 
 if ( instance = = null ) / / indent : 16 exp : 16 
 instance = new InputIndentationSynchronizedStatement ( ) ; / / indent : 20 exp : 20 
 } / / indent : 12 exp : 12 
 + synchronized ( new Object ( ) ) { / / indent : 8 exp : 8 
 + instance = instance ; / / indent : 0 exp : 12 warn 
 + } / / indent : 8 exp : 8 
 return instance ; / / indent : 8 exp : 8 
 } / / indent : 4 exp : 4 
 } / / indent : 0 exp : 0 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / filters / suppressionfilter / InputSuppressionFilterSuppress . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / filters / suppressionfilter / InputSuppressionFilterSuppress . xml 
 new file mode 100644 
 index 0000000 . . 9ec2ffb 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / filters / suppressionfilter / InputSuppressionFilterSuppress . xml 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 + < ! DOCTYPE suppressions PUBLIC 
 + " - / / Checkstyle / / DTD SuppressionFilter Configuration 1 . 0 / / EN " 
 + " https : / / checkstyle . org / dtds / suppressions _ 1 _ 0 . dtd " > 
 + < suppressions > 
 + < suppress checks = " Suppression " files = " ATest . java " / > 
 + < / suppressions >

NEAREST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index a6918a9 . . 24a0850 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 152 , 7 + 152 , 7 @ @ 
 < module name = " SuppressWarnings " > 
 < property name = " format " value = " ^ ( ( ? ! unchecked | deprecation | rawtypes ) . ) * $ " / > 
 < message key = " suppressed . warning . not . allowed " 
 - value = " The warning ' ' { 0 } ' ' cannot be suppressed at this location . If you try to suppress IntelliJ IDEA inspection , please use javadoc block tag @ noinspection " 
 + value = " The warning ' ' { 0 } ' ' cannot be suppressed at this location . Only few javac warnings are allowed to suppress . If try to suppress checkstyle / pmd / . . . . . violation please do this in their config file . If you try to suppress IntelliJ IDEA inspection , please use javadoc block tag @ noinspection " 
 / > 
 < / module > 
 < module name = " SuppressWarningsHolder " / >
