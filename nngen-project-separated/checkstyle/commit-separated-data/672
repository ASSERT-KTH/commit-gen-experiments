BLEU SCORE: 0.532422158401508

TEST MSG: Issue # 4394 : increase coverage of pitest - checkstyle - api profile to 96 %
GENERATED MSG: Issue # 4395 : increase coverage of pitest - checkstyle - utils profile to 99 %

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 1f17bb5 . . 9119129 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 21 , 7 + 21 , 7 @ @ <nl> files = " AbstractClassNameCheck . java " / > <nl> < ! - - test should be named as their main class - - > <nl> < suppress checks = " AbstractClassNameCheck " <nl> - files = " AbstractCheckTest . java | AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java | AbstractFileSetCheckTest . java " / > <nl> + files = " AbstractCheckTest . java | AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java | AbstractFileSetCheckTest . java | AbstractLoaderTest . java " / > <nl> <nl> < ! - - Tone down the checking for test code - - > <nl> < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XdocsPagesTest \ . java " / > <nl> diff - - git a / pom . xml b / pom . xml <nl> index 32df6e0 . . 293a401 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2195 , 8 + 2195 , 18 @ @ <nl> < param > com . puppycrawl . tools . checkstyle . checks . imports . ImportControlCheckTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheckTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . checks . naming . ParameterNameCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . TranslationCheckTest < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 88 < / mutationThreshold > <nl> + < excludedMethods > <nl> + < ! - - cause of https : / / github . com / checkstyle / checkstyle / issues / 3605 - - > <nl> + < param > addFeaturesForVerySecureJavaInstallations < / param > <nl> + < / excludedMethods > <nl> + < avoidCallsTo > <nl> + < ! - - cause of https : / / github . com / checkstyle / checkstyle / issues / 3605 - - > <nl> + < avoidCallsTo > com . puppycrawl . tools . checkstyle . api . AbstractLoader $ FeaturesForVerySecureJavaInstallations < / avoidCallsTo > <nl> + < / avoidCallsTo > <nl> + < mutationThreshold > 96 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java <nl> index a414492 . . 66a7475 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java <nl> @ @ - 49 , 12 + 49 , 6 @ @ import org . xml . sax . helpers . DefaultHandler ; <nl> * / <nl> public abstract class AbstractLoader <nl> extends DefaultHandler { <nl> - / * * Feature that enables loading external DTD when loading XML files . * / <nl> - private static final String LOAD _ EXTERNAL _ DTD = <nl> - " http : / / apache . org / xml / features / nonvalidating / load - external - dtd " ; <nl> - / * * Feature that enables including external general entities in XML files . * / <nl> - private static final String EXTERNAL _ GENERAL _ ENTITIES = <nl> - " http : / / xml . org / sax / features / external - general - entities " ; <nl> / * * Maps public id to resolve to resource name for the DTD . * / <nl> private final Map < String , String > publicIdToResourceNameMap ; <nl> / * * Parser to read XML files . * * / <nl> @ @ - 83 , 8 + 77 , 7 @ @ public abstract class AbstractLoader <nl> throws SAXException , ParserConfigurationException { <nl> this . publicIdToResourceNameMap = new HashMap < > ( publicIdToResourceNameMap ) ; <nl> final SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; <nl> - factory . setFeature ( LOAD _ EXTERNAL _ DTD , true ) ; <nl> - factory . setFeature ( EXTERNAL _ GENERAL _ ENTITIES , true ) ; <nl> + FeaturesForVerySecureJavaInstallations . addFeaturesForVerySecureJavaInstallations ( factory ) ; <nl> factory . setValidating ( true ) ; <nl> factory . setNamespaceAware ( true ) ; <nl> parser = factory . newSAXParser ( ) . getXMLReader ( ) ; <nl> @ @ - 133 , 4 + 126 , 34 @ @ public abstract class AbstractLoader <nl> public void fatalError ( SAXParseException exception ) throws SAXException { <nl> throw exception ; <nl> } <nl> + <nl> + / * * <nl> + * Used for setting specific for secure java installations features to SAXParserFactory . <nl> + * Pulled out as a separate class in order to suppress Pitest mutations . <nl> + * / <nl> + public static final class FeaturesForVerySecureJavaInstallations { <nl> + / * * Feature that enables loading external DTD when loading XML files . * / <nl> + private static final String LOAD _ EXTERNAL _ DTD = <nl> + " http : / / apache . org / xml / features / nonvalidating / load - external - dtd " ; <nl> + / * * Feature that enables including external general entities in XML files . * / <nl> + private static final String EXTERNAL _ GENERAL _ ENTITIES = <nl> + " http : / / xml . org / sax / features / external - general - entities " ; <nl> + <nl> + / * * Stop instances being created . * * / <nl> + private FeaturesForVerySecureJavaInstallations ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Configures SAXParserFactory with features requered <nl> + * for exectution on very secured environments . <nl> + * @ param factory factory to be configured with spectial features <nl> + * @ throws SAXException if an error occurs <nl> + * @ throws ParserConfigurationException if an error occurs <nl> + * / <nl> + public static void addFeaturesForVerySecureJavaInstallations ( SAXParserFactory factory ) <nl> + throws SAXException , ParserConfigurationException { <nl> + factory . setFeature ( LOAD _ EXTERNAL _ DTD , true ) ; <nl> + factory . setFeature ( EXTERNAL _ GENERAL _ ENTITIES , true ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> index 0937d30 . . 48e46a8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> @ @ - 122 , 7 + 122 , 7 @ @ public abstract class AbstractViolationReporter <nl> final String messageBundle ; <nl> final int endIndex = className . lastIndexOf ( ' . ' ) ; <nl> final String messages = " messages " ; <nl> - if ( endIndex < 0 ) { <nl> + if ( endIndex = = - 1 ) { <nl> messageBundle = messages ; <nl> } <nl> else { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> index 568db2d . . 6fb4b99 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> @ @ - 110 , 7 + 110 , 7 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { <nl> clearBranchTokenTypes ( ) ; <nl> clearChildCountCache ( parent ) ; <nl> if ( ast ! = null ) { <nl> - ast . setParent ( parent ) ; <nl> + / / parent is set in setNextSibling or parent . setFirstChild <nl> final DetailAST previousSiblingNode = previousSibling ; <nl> <nl> if ( previousSiblingNode ! = null ) { <nl> @ @ - 135 , 7 + 135 , 7 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { <nl> clearBranchTokenTypes ( ) ; <nl> clearChildCountCache ( parent ) ; <nl> if ( ast ! = null ) { <nl> - ast . setParent ( parent ) ; <nl> + / / parent is set in setNextSibling <nl> final DetailAST nextSibling = getNextSibling ( ) ; <nl> <nl> if ( nextSibling ! = null ) { <nl> @ @ - 227 , 11 + 227 , 11 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { <nl> / / with initialize ( String text ) <nl> resultNo = findLineNo ( getFirstChild ( ) ) ; <nl> <nl> - if ( resultNo < 0 ) { <nl> + if ( resultNo = = - 1 ) { <nl> resultNo = findLineNo ( getNextSibling ( ) ) ; <nl> } <nl> } <nl> - if ( resultNo < 0 ) { <nl> + if ( resultNo = = - 1 ) { <nl> resultNo = lineNo ; <nl> } <nl> return resultNo ; <nl> @ @ - 258 , 11 + 258 , 11 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { <nl> / / with initialize ( String text ) <nl> resultNo = findColumnNo ( getFirstChild ( ) ) ; <nl> <nl> - if ( resultNo < 0 ) { <nl> + if ( resultNo = = - 1 ) { <nl> resultNo = findColumnNo ( getNextSibling ( ) ) ; <nl> } <nl> } <nl> - if ( resultNo < 0 ) { <nl> + if ( resultNo = = - 1 ) { <nl> resultNo = columnNo ; <nl> } <nl> return resultNo ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java <nl> index beb5b3d . . 7ccf526 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java <nl> @ @ - 199 , 7 + 199 , 7 @ @ public final class FileText { <nl> final char [ ] chars = new char [ READ _ BUFFER _ SIZE ] ; <nl> while ( true ) { <nl> final int len = reader . read ( chars ) ; <nl> - if ( len < 0 ) { <nl> + if ( len = = - 1 ) { <nl> break ; <nl> } <nl> buf . append ( chars , 0 , len ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java <nl> index 37df889 . . 59f0ea2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java <nl> @ @ - 21 , 9 + 21 , 14 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import java . io . File ; <nl> import java . nio . charset . Charset ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collection ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> + import org . mockito . internal . util . reflection . Whitebox ; <nl> <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ @ - 196 , 4 + 201 , 43 @ @ public class AbstractCheckTest { <nl> Assert . assertArrayEquals ( defaultTokens , check . getAcceptableTokens ( ) ) ; <nl> Assert . assertArrayEquals ( requiredTokens , check . getRequiredTokens ( ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public void testClearMessages ( ) { <nl> + final AbstractCheck check = new DummyAbstractCheck ( ) ; <nl> + <nl> + check . log ( 0 , " key " , " args " ) ; <nl> + final Collection < LocalizedMessage > messages = <nl> + ( Collection < LocalizedMessage > ) Whitebox . getInternalState ( check , " messages " ) ; <nl> + Assert . assertEquals ( 1 , messages . size ( ) ) ; <nl> + check . clearMessages ( ) ; <nl> + Assert . assertEquals ( 0 , messages . size ( ) ) ; <nl> + } <nl> + <nl> + private static final class DummyAbstractCheck extends AbstractCheck { <nl> + private static final int [ ] DUMMY _ ARRAY = { 6 } ; <nl> + <nl> + @ Override <nl> + public int [ ] getDefaultTokens ( ) { <nl> + return Arrays . copyOf ( DUMMY _ ARRAY , 1 ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return Arrays . copyOf ( DUMMY _ ARRAY , 1 ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return Arrays . copyOf ( DUMMY _ ARRAY , 1 ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected Map < String , String > getCustomMessages ( ) { <nl> + final Map < String , String > messages = new HashMap < > ( ) ; <nl> + messages . put ( " key " , " value " ) ; <nl> + return messages ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractLoaderTest . java <nl> new file mode 100644 <nl> index 0000000 . . da97c42 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractLoaderTest . java <nl> @ @ - 0 , 0 + 1 , 65 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . api ; <nl> + <nl> + import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> + import javax . xml . parsers . ParserConfigurationException ; <nl> + <nl> + import org . junit . Test ; <nl> + import org . powermock . reflect . Whitebox ; <nl> + import org . xml . sax . SAXException ; <nl> + import org . xml . sax . XMLReader ; <nl> + <nl> + import com . sun . org . apache . xerces . internal . impl . Constants ; <nl> + <nl> + public class AbstractLoaderTest { <nl> + <nl> + private static final String NAMESPACES _ FEATURE = <nl> + Constants . SAX _ FEATURE _ PREFIX + Constants . NAMESPACES _ FEATURE ; <nl> + <nl> + @ Test <nl> + public void testParserConfiguratedSuccefully ( ) throws Exception { <nl> + final DummyLoader dummyLoader = new DummyLoader ( new HashMap < > ( 1 ) ) ; <nl> + final XMLReader parser = Whitebox . getInternalState ( dummyLoader , " parser " ) ; <nl> + assertTrue ( parser . getFeature ( NAMESPACES _ FEATURE ) ) ; <nl> + assertEquals ( dummyLoader , parser . getEntityResolver ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { <nl> + assertUtilsClassHasPrivateConstructor ( <nl> + AbstractLoader . FeaturesForVerySecureJavaInstallations . class ) ; <nl> + } <nl> + <nl> + private static final class DummyLoader extends AbstractLoader { <nl> + <nl> + DummyLoader ( Map < String , String > publicIdToResourceNameMap ) <nl> + throws SAXException , ParserConfigurationException { <nl> + super ( publicIdToResourceNameMap ) ; <nl> + } <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> index f2e2a5d . . 3c4a1d5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> @ @ - 20 , 14 + 20 , 21 @ @ <nl> package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNotSame ; <nl> import static org . junit . Assert . assertNull ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> import java . io . File ; <nl> import java . lang . reflect . Method ; <nl> import java . text . MessageFormat ; <nl> + import java . util . Arrays ; <nl> + import java . util . BitSet ; <nl> + import java . util . List ; <nl> import java . util . Locale ; <nl> + import java . util . function . Consumer ; <nl> <nl> import org . junit . Test ; <nl> + import org . powermock . reflect . Whitebox ; <nl> <nl> import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> <nl> @ @ - 117 , 10 + 124 , 95 @ @ public class DetailASTTest { <nl> } <nl> <nl> @ Test <nl> + public void testClearBranchTokenTypes ( ) throws Exception { <nl> + final DetailAST parent = new DetailAST ( ) ; <nl> + final DetailAST child = new DetailAST ( ) ; <nl> + parent . setFirstChild ( child ) ; <nl> + <nl> + final List < Consumer < DetailAST > > clearBranchTokenTypesMethods = Arrays . asList ( <nl> + ast - > child . setFirstChild ( ast ) , <nl> + ast - > child . setNextSibling ( ast ) , <nl> + ast - > child . addPreviousSibling ( ast ) , <nl> + ast - > child . addNextSibling ( ast ) , <nl> + ast - > child . addChild ( ast ) , <nl> + ast - > { <nl> + try { <nl> + Whitebox . invokeMethod ( child , " setParent " , ast ) ; <nl> + } <nl> + / / - @ cs [ IllegalCatch ] Cannot avoid catching it . <nl> + catch ( Exception exception ) { <nl> + throw new IllegalStateException ( exception ) ; <nl> + } <nl> + } <nl> + ) ; <nl> + <nl> + for ( Consumer < DetailAST > method : clearBranchTokenTypesMethods ) { <nl> + final BitSet branchTokenTypes = Whitebox . invokeMethod ( parent , " getBranchTokenTypes " ) ; <nl> + method . accept ( null ) ; <nl> + final BitSet branchTokenTypes2 = Whitebox . invokeMethod ( parent , " getBranchTokenTypes " ) ; <nl> + assertEquals ( branchTokenTypes , branchTokenTypes2 ) ; <nl> + assertNotSame ( branchTokenTypes , branchTokenTypes2 ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testClearChildCountCache ( ) throws Exception { <nl> + final DetailAST parent = new DetailAST ( ) ; <nl> + final DetailAST child = new DetailAST ( ) ; <nl> + parent . setFirstChild ( child ) ; <nl> + <nl> + final List < Consumer < DetailAST > > clearChildCountCacheMethods = Arrays . asList ( <nl> + ast - > child . setNextSibling ( ast ) , <nl> + ast - > child . addPreviousSibling ( ast ) , <nl> + ast - > child . addNextSibling ( ast ) <nl> + ) ; <nl> + <nl> + for ( Consumer < DetailAST > method : clearChildCountCacheMethods ) { <nl> + final int startCount = parent . getChildCount ( ) ; <nl> + method . accept ( null ) ; <nl> + final int intermediateCount = Whitebox . getInternalState ( parent , " childCount " ) ; <nl> + final int finishCount = parent . getChildCount ( ) ; <nl> + assertEquals ( startCount , finishCount ) ; <nl> + assertEquals ( Integer . MIN _ VALUE , intermediateCount ) ; <nl> + } <nl> + <nl> + final int startCount = child . getChildCount ( ) ; <nl> + child . addChild ( null ) ; <nl> + final int intermediateCount = Whitebox . getInternalState ( child , " childCount " ) ; <nl> + final int finishCount = child . getChildCount ( ) ; <nl> + assertEquals ( startCount , finishCount ) ; <nl> + assertEquals ( Integer . MIN _ VALUE , intermediateCount ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAddNextSibling ( ) { <nl> + final DetailAST parent = new DetailAST ( ) ; <nl> + final DetailAST child = new DetailAST ( ) ; <nl> + final DetailAST sibling = new DetailAST ( ) ; <nl> + final DetailAST newSibling = new DetailAST ( ) ; <nl> + parent . setFirstChild ( child ) ; <nl> + child . setNextSibling ( sibling ) ; <nl> + <nl> + child . addNextSibling ( newSibling ) ; <nl> + assertTrue ( newSibling . getParent ( ) . equals ( parent ) ) ; <nl> + assertTrue ( newSibling . getNextSibling ( ) . equals ( sibling ) ) ; <nl> + assertTrue ( child . getNextSibling ( ) . equals ( newSibling ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testTreeStructure ( ) throws Exception { <nl> checkDir ( new File ( " src / test / resources / com / puppycrawl / tools / checkstyle " ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testToString ( ) { <nl> + final DetailAST ast = new DetailAST ( ) ; <nl> + ast . setText ( " text " ) ; <nl> + ast . setColumnNo ( 0 ) ; <nl> + ast . setLineNo ( 0 ) ; <nl> + assertEquals ( " text [ 0x0 ] " , ast . toString ( ) ) ; <nl> + } <nl> + <nl> private static void checkDir ( File dir ) throws Exception { <nl> final File [ ] files = dir . listFiles ( file - > { <nl> return ( file . getName ( ) . endsWith ( " . java " ) <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> index b343a2d . . 1fd577b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> @ @ - 21 , 12 + 21 , 26 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> + import static org . mockito . Matchers . any ; <nl> + import static org . mockito . Mockito . times ; <nl> + import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> + import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> + import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . io . Reader ; <nl> + import java . util . Locale ; <nl> <nl> import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> + import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> + import com . google . common . io . Closeables ; <nl> + <nl> + @ RunWith ( PowerMockRunner . class ) <nl> + @ PrepareForTest ( Closeables . class ) <nl> public class FileTextTest { <nl> @ Test <nl> public void testUnsupportedCharset ( ) throws IOException { <nl> @ @ - 44 , 10 + 58 , 18 @ @ public class FileTextTest { <nl> <nl> @ Test <nl> public void testSupportedCharset ( ) throws IOException { <nl> + / / check if reader finally closed <nl> + mockStatic ( Closeables . class ) ; <nl> + doNothing ( ) . when ( Closeables . class ) ; <nl> + Closeables . closeQuietly ( any ( Reader . class ) ) ; <nl> + <nl> final String charsetName = " ISO - 8859 - 1 " ; <nl> final FileText fileText = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " <nl> + " checkstyle / api / import - control _ complete . xml " ) , charsetName ) ; <nl> assertEquals ( charsetName , fileText . getCharset ( ) . name ( ) ) ; <nl> + <nl> + verifyStatic ( times ( 1 ) ) ; <nl> + Closeables . closeQuietly ( any ( Reader . class ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 66 , 6 + 88 , 24 @ @ public class FileTextTest { <nl> final FileText fileText = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " <nl> + " checkstyle / api / import - control _ complete . xml " ) , charsetName ) ; <nl> final FileText copy = new FileText ( fileText ) ; <nl> - assertEquals ( 3 , copy . lineColumn ( 100 ) . getLine ( ) ) ; <nl> + final LineColumn lineColumn = copy . lineColumn ( 100 ) ; <nl> + assertEquals ( 3 , lineColumn . getLine ( ) ) ; <nl> + if ( System . getProperty ( " os . name " ) . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { <nl> + assertEquals ( 44 , lineColumn . getColumn ( ) ) ; <nl> + } <nl> + else { <nl> + assertEquals ( 46 , lineColumn . getColumn ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testLineColumnAtTheStartOfFile ( ) throws IOException { <nl> + final String charsetName = " ISO - 8859 - 1 " ; <nl> + final FileText fileText = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " <nl> + + " checkstyle / api / import - control _ complete . xml " ) , charsetName ) ; <nl> + final FileText copy = new FileText ( fileText ) ; <nl> + final LineColumn lineColumn = copy . lineColumn ( 0 ) ; <nl> + assertEquals ( 1 , lineColumn . getLine ( ) ) ; <nl> + assertEquals ( 0 , lineColumn . getColumn ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FullIdentTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FullIdentTest . java <nl> index d3b5c76 . . 90b780e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FullIdentTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FullIdentTest . java <nl> @ @ - 37 , 7 + 37 , 18 @ @ public class FullIdentTest { <nl> } <nl> <nl> @ Test <nl> - public void testNonValidCoordinates ( ) { <nl> + public void testNonValidCoordinatesWithNegative ( ) { <nl> + final FullIdent fullIdent = prepareFullIdentWithCoordinates ( 14 , 15 ) ; <nl> + Assert . assertEquals ( " MyTest . MyTestik [ 15x14 ] " , fullIdent . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonValidCoordinatesWithZero ( ) { <nl> + final FullIdent fullIdent = prepareFullIdentWithCoordinates ( 0 , 0 ) ; <nl> + Assert . assertEquals ( " MyTest . MyTestik [ 15x14 ] " , fullIdent . toString ( ) ) ; <nl> + } <nl> + <nl> + private static FullIdent prepareFullIdentWithCoordinates ( int columnNo , int lineNo ) { <nl> final DetailAST ast = new DetailAST ( ) ; <nl> ast . setType ( TokenTypes . DOT ) ; <nl> ast . setColumnNo ( 1 ) ; <nl> @ @ - 46 , 8 + 57 , 8 @ @ public class FullIdentTest { <nl> <nl> final DetailAST ast2 = new DetailAST ( ) ; <nl> ast2 . setType ( TokenTypes . LE ) ; <nl> - ast2 . setColumnNo ( - 14 ) ; <nl> - ast2 . setLineNo ( - 15 ) ; <nl> + ast2 . setColumnNo ( columnNo ) ; <nl> + ast2 . setLineNo ( lineNo ) ; <nl> ast2 . setText ( " MyTestik " ) ; <nl> <nl> final DetailAST ast1 = new DetailAST ( ) ; <nl> @ @ - 59 , 7 + 70 , 6 @ @ public class FullIdentTest { <nl> ast . addChild ( ast1 ) ; <nl> ast . addChild ( ast2 ) ; <nl> <nl> - final FullIdent indent = FullIdent . createFullIdent ( ast ) ; <nl> - Assert . assertEquals ( " MyTest . MyTestik [ 15x14 ] " , indent . toString ( ) ) ; <nl> + return FullIdent . createFullIdent ( ast ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 2373891 . . 6f99f89 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 204 , 7 + 204 , 7 @ @ <nl> < maven . jacoco . plugin . version > 0 . 7 . 9 < / maven . jacoco . plugin . version > <nl> < maven . checkstyle . plugin . version > 2 . 17 < / maven . checkstyle . plugin . version > <nl> < maven . sevntu . checkstyle . plugin . version > 1 . 24 . 0 < / maven . sevntu . checkstyle . plugin . version > <nl> - < maven . sevntu - checkstyle - check . checkstyle . version > 7 . 8 < / maven . sevntu - checkstyle - check . checkstyle . version > <nl> + < maven . sevntu - checkstyle - check . checkstyle . version > 7 . 8 . 1 < / maven . sevntu - checkstyle - check . checkstyle . version > <nl> < maven . versions . plugin . version > 2 . 3 < / maven . versions . plugin . version > <nl> < java . version > 1 . 8 < / java . version > <nl> < tools . jar . version > $ { java . version } . 0 < / tools . jar . version >

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 1f17bb5 . . 9119129 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 21 , 7 + 21 , 7 @ @ 
 files = " AbstractClassNameCheck . java " / > 
 < ! - - test should be named as their main class - - > 
 < suppress checks = " AbstractClassNameCheck " 
 - files = " AbstractCheckTest . java | AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java | AbstractFileSetCheckTest . java " / > 
 + files = " AbstractCheckTest . java | AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java | AbstractFileSetCheckTest . java | AbstractLoaderTest . java " / > 
 
 < ! - - Tone down the checking for test code - - > 
 < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XdocsPagesTest \ . java " / > 
 diff - - git a / pom . xml b / pom . xml 
 index 32df6e0 . . 293a401 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2195 , 8 + 2195 , 18 @ @ 
 < param > com . puppycrawl . tools . checkstyle . checks . imports . ImportControlCheckTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheckTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . checks . naming . ParameterNameCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . TranslationCheckTest < / param > 
 < / targetTests > 
 - < mutationThreshold > 88 < / mutationThreshold > 
 + < excludedMethods > 
 + < ! - - cause of https : / / github . com / checkstyle / checkstyle / issues / 3605 - - > 
 + < param > addFeaturesForVerySecureJavaInstallations < / param > 
 + < / excludedMethods > 
 + < avoidCallsTo > 
 + < ! - - cause of https : / / github . com / checkstyle / checkstyle / issues / 3605 - - > 
 + < avoidCallsTo > com . puppycrawl . tools . checkstyle . api . AbstractLoader $ FeaturesForVerySecureJavaInstallations < / avoidCallsTo > 
 + < / avoidCallsTo > 
 + < mutationThreshold > 96 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java 
 index a414492 . . 66a7475 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java 
 @ @ - 49 , 12 + 49 , 6 @ @ import org . xml . sax . helpers . DefaultHandler ; 
 * / 
 public abstract class AbstractLoader 
 extends DefaultHandler { 
 - / * * Feature that enables loading external DTD when loading XML files . * / 
 - private static final String LOAD _ EXTERNAL _ DTD = 
 - " http : / / apache . org / xml / features / nonvalidating / load - external - dtd " ; 
 - / * * Feature that enables including external general entities in XML files . * / 
 - private static final String EXTERNAL _ GENERAL _ ENTITIES = 
 - " http : / / xml . org / sax / features / external - general - entities " ; 
 / * * Maps public id to resolve to resource name for the DTD . * / 
 private final Map < String , String > publicIdToResourceNameMap ; 
 / * * Parser to read XML files . * * / 
 @ @ - 83 , 8 + 77 , 7 @ @ public abstract class AbstractLoader 
 throws SAXException , ParserConfigurationException { 
 this . publicIdToResourceNameMap = new HashMap < > ( publicIdToResourceNameMap ) ; 
 final SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; 
 - factory . setFeature ( LOAD _ EXTERNAL _ DTD , true ) ; 
 - factory . setFeature ( EXTERNAL _ GENERAL _ ENTITIES , true ) ; 
 + FeaturesForVerySecureJavaInstallations . addFeaturesForVerySecureJavaInstallations ( factory ) ; 
 factory . setValidating ( true ) ; 
 factory . setNamespaceAware ( true ) ; 
 parser = factory . newSAXParser ( ) . getXMLReader ( ) ; 
 @ @ - 133 , 4 + 126 , 34 @ @ public abstract class AbstractLoader 
 public void fatalError ( SAXParseException exception ) throws SAXException { 
 throw exception ; 
 } 
 + 
 + / * * 
 + * Used for setting specific for secure java installations features to SAXParserFactory . 
 + * Pulled out as a separate class in order to suppress Pitest mutations . 
 + * / 
 + public static final class FeaturesForVerySecureJavaInstallations { 
 + / * * Feature that enables loading external DTD when loading XML files . * / 
 + private static final String LOAD _ EXTERNAL _ DTD = 
 + " http : / / apache . org / xml / features / nonvalidating / load - external - dtd " ; 
 + / * * Feature that enables including external general entities in XML files . * / 
 + private static final String EXTERNAL _ GENERAL _ ENTITIES = 
 + " http : / / xml . org / sax / features / external - general - entities " ; 
 + 
 + / * * Stop instances being created . * * / 
 + private FeaturesForVerySecureJavaInstallations ( ) { 
 + } 
 + 
 + / * * 
 + * Configures SAXParserFactory with features requered 
 + * for exectution on very secured environments . 
 + * @ param factory factory to be configured with spectial features 
 + * @ throws SAXException if an error occurs 
 + * @ throws ParserConfigurationException if an error occurs 
 + * / 
 + public static void addFeaturesForVerySecureJavaInstallations ( SAXParserFactory factory ) 
 + throws SAXException , ParserConfigurationException { 
 + factory . setFeature ( LOAD _ EXTERNAL _ DTD , true ) ; 
 + factory . setFeature ( EXTERNAL _ GENERAL _ ENTITIES , true ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 index 0937d30 . . 48e46a8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 @ @ - 122 , 7 + 122 , 7 @ @ public abstract class AbstractViolationReporter 
 final String messageBundle ; 
 final int endIndex = className . lastIndexOf ( ' . ' ) ; 
 final String messages = " messages " ; 
 - if ( endIndex < 0 ) { 
 + if ( endIndex = = - 1 ) { 
 messageBundle = messages ; 
 } 
 else { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 index 568db2d . . 6fb4b99 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 @ @ - 110 , 7 + 110 , 7 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { 
 clearBranchTokenTypes ( ) ; 
 clearChildCountCache ( parent ) ; 
 if ( ast ! = null ) { 
 - ast . setParent ( parent ) ; 
 + / / parent is set in setNextSibling or parent . setFirstChild 
 final DetailAST previousSiblingNode = previousSibling ; 
 
 if ( previousSiblingNode ! = null ) { 
 @ @ - 135 , 7 + 135 , 7 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { 
 clearBranchTokenTypes ( ) ; 
 clearChildCountCache ( parent ) ; 
 if ( ast ! = null ) { 
 - ast . setParent ( parent ) ; 
 + / / parent is set in setNextSibling 
 final DetailAST nextSibling = getNextSibling ( ) ; 
 
 if ( nextSibling ! = null ) { 
 @ @ - 227 , 11 + 227 , 11 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { 
 / / with initialize ( String text ) 
 resultNo = findLineNo ( getFirstChild ( ) ) ; 
 
 - if ( resultNo < 0 ) { 
 + if ( resultNo = = - 1 ) { 
 resultNo = findLineNo ( getNextSibling ( ) ) ; 
 } 
 } 
 - if ( resultNo < 0 ) { 
 + if ( resultNo = = - 1 ) { 
 resultNo = lineNo ; 
 } 
 return resultNo ; 
 @ @ - 258 , 11 + 258 , 11 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { 
 / / with initialize ( String text ) 
 resultNo = findColumnNo ( getFirstChild ( ) ) ; 
 
 - if ( resultNo < 0 ) { 
 + if ( resultNo = = - 1 ) { 
 resultNo = findColumnNo ( getNextSibling ( ) ) ; 
 } 
 } 
 - if ( resultNo < 0 ) { 
 + if ( resultNo = = - 1 ) { 
 resultNo = columnNo ; 
 } 
 return resultNo ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java 
 index beb5b3d . . 7ccf526 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java 
 @ @ - 199 , 7 + 199 , 7 @ @ public final class FileText { 
 final char [ ] chars = new char [ READ _ BUFFER _ SIZE ] ; 
 while ( true ) { 
 final int len = reader . read ( chars ) ; 
 - if ( len < 0 ) { 
 + if ( len = = - 1 ) { 
 break ; 
 } 
 buf . append ( chars , 0 , len ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java 
 index 37df889 . . 59f0ea2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java 
 @ @ - 21 , 9 + 21 , 14 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 
 import java . io . File ; 
 import java . nio . charset . Charset ; 
 + import java . util . Arrays ; 
 + import java . util . Collection ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 + import org . mockito . internal . util . reflection . Whitebox ; 
 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ @ - 196 , 4 + 201 , 43 @ @ public class AbstractCheckTest { 
 Assert . assertArrayEquals ( defaultTokens , check . getAcceptableTokens ( ) ) ; 
 Assert . assertArrayEquals ( requiredTokens , check . getRequiredTokens ( ) ) ; 
 } 
 + 
 + @ Test 
 + @ SuppressWarnings ( " unchecked " ) 
 + public void testClearMessages ( ) { 
 + final AbstractCheck check = new DummyAbstractCheck ( ) ; 
 + 
 + check . log ( 0 , " key " , " args " ) ; 
 + final Collection < LocalizedMessage > messages = 
 + ( Collection < LocalizedMessage > ) Whitebox . getInternalState ( check , " messages " ) ; 
 + Assert . assertEquals ( 1 , messages . size ( ) ) ; 
 + check . clearMessages ( ) ; 
 + Assert . assertEquals ( 0 , messages . size ( ) ) ; 
 + } 
 + 
 + private static final class DummyAbstractCheck extends AbstractCheck { 
 + private static final int [ ] DUMMY _ ARRAY = { 6 } ; 
 + 
 + @ Override 
 + public int [ ] getDefaultTokens ( ) { 
 + return Arrays . copyOf ( DUMMY _ ARRAY , 1 ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return Arrays . copyOf ( DUMMY _ ARRAY , 1 ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return Arrays . copyOf ( DUMMY _ ARRAY , 1 ) ; 
 + } 
 + 
 + @ Override 
 + protected Map < String , String > getCustomMessages ( ) { 
 + final Map < String , String > messages = new HashMap < > ( ) ; 
 + messages . put ( " key " , " value " ) ; 
 + return messages ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractLoaderTest . java 
 new file mode 100644 
 index 0000000 . . da97c42 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractLoaderTest . java 
 @ @ - 0 , 0 + 1 , 65 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . api ; 
 + 
 + import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 + import javax . xml . parsers . ParserConfigurationException ; 
 + 
 + import org . junit . Test ; 
 + import org . powermock . reflect . Whitebox ; 
 + import org . xml . sax . SAXException ; 
 + import org . xml . sax . XMLReader ; 
 + 
 + import com . sun . org . apache . xerces . internal . impl . Constants ; 
 + 
 + public class AbstractLoaderTest { 
 + 
 + private static final String NAMESPACES _ FEATURE = 
 + Constants . SAX _ FEATURE _ PREFIX + Constants . NAMESPACES _ FEATURE ; 
 + 
 + @ Test 
 + public void testParserConfiguratedSuccefully ( ) throws Exception { 
 + final DummyLoader dummyLoader = new DummyLoader ( new HashMap < > ( 1 ) ) ; 
 + final XMLReader parser = Whitebox . getInternalState ( dummyLoader , " parser " ) ; 
 + assertTrue ( parser . getFeature ( NAMESPACES _ FEATURE ) ) ; 
 + assertEquals ( dummyLoader , parser . getEntityResolver ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { 
 + assertUtilsClassHasPrivateConstructor ( 
 + AbstractLoader . FeaturesForVerySecureJavaInstallations . class ) ; 
 + } 
 + 
 + private static final class DummyLoader extends AbstractLoader { 
 + 
 + DummyLoader ( Map < String , String > publicIdToResourceNameMap ) 
 + throws SAXException , ParserConfigurationException { 
 + super ( publicIdToResourceNameMap ) ; 
 + } 
 + } 
 + 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 index f2e2a5d . . 3c4a1d5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 @ @ - 20 , 14 + 20 , 21 @ @ 
 package com . puppycrawl . tools . checkstyle . api ; 
 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNotSame ; 
 import static org . junit . Assert . assertNull ; 
 + import static org . junit . Assert . assertTrue ; 
 
 import java . io . File ; 
 import java . lang . reflect . Method ; 
 import java . text . MessageFormat ; 
 + import java . util . Arrays ; 
 + import java . util . BitSet ; 
 + import java . util . List ; 
 import java . util . Locale ; 
 + import java . util . function . Consumer ; 
 
 import org . junit . Test ; 
 + import org . powermock . reflect . Whitebox ; 
 
 import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 
 @ @ - 117 , 10 + 124 , 95 @ @ public class DetailASTTest { 
 } 
 
 @ Test 
 + public void testClearBranchTokenTypes ( ) throws Exception { 
 + final DetailAST parent = new DetailAST ( ) ; 
 + final DetailAST child = new DetailAST ( ) ; 
 + parent . setFirstChild ( child ) ; 
 + 
 + final List < Consumer < DetailAST > > clearBranchTokenTypesMethods = Arrays . asList ( 
 + ast - > child . setFirstChild ( ast ) , 
 + ast - > child . setNextSibling ( ast ) , 
 + ast - > child . addPreviousSibling ( ast ) , 
 + ast - > child . addNextSibling ( ast ) , 
 + ast - > child . addChild ( ast ) , 
 + ast - > { 
 + try { 
 + Whitebox . invokeMethod ( child , " setParent " , ast ) ; 
 + } 
 + / / - @ cs [ IllegalCatch ] Cannot avoid catching it . 
 + catch ( Exception exception ) { 
 + throw new IllegalStateException ( exception ) ; 
 + } 
 + } 
 + ) ; 
 + 
 + for ( Consumer < DetailAST > method : clearBranchTokenTypesMethods ) { 
 + final BitSet branchTokenTypes = Whitebox . invokeMethod ( parent , " getBranchTokenTypes " ) ; 
 + method . accept ( null ) ; 
 + final BitSet branchTokenTypes2 = Whitebox . invokeMethod ( parent , " getBranchTokenTypes " ) ; 
 + assertEquals ( branchTokenTypes , branchTokenTypes2 ) ; 
 + assertNotSame ( branchTokenTypes , branchTokenTypes2 ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testClearChildCountCache ( ) throws Exception { 
 + final DetailAST parent = new DetailAST ( ) ; 
 + final DetailAST child = new DetailAST ( ) ; 
 + parent . setFirstChild ( child ) ; 
 + 
 + final List < Consumer < DetailAST > > clearChildCountCacheMethods = Arrays . asList ( 
 + ast - > child . setNextSibling ( ast ) , 
 + ast - > child . addPreviousSibling ( ast ) , 
 + ast - > child . addNextSibling ( ast ) 
 + ) ; 
 + 
 + for ( Consumer < DetailAST > method : clearChildCountCacheMethods ) { 
 + final int startCount = parent . getChildCount ( ) ; 
 + method . accept ( null ) ; 
 + final int intermediateCount = Whitebox . getInternalState ( parent , " childCount " ) ; 
 + final int finishCount = parent . getChildCount ( ) ; 
 + assertEquals ( startCount , finishCount ) ; 
 + assertEquals ( Integer . MIN _ VALUE , intermediateCount ) ; 
 + } 
 + 
 + final int startCount = child . getChildCount ( ) ; 
 + child . addChild ( null ) ; 
 + final int intermediateCount = Whitebox . getInternalState ( child , " childCount " ) ; 
 + final int finishCount = child . getChildCount ( ) ; 
 + assertEquals ( startCount , finishCount ) ; 
 + assertEquals ( Integer . MIN _ VALUE , intermediateCount ) ; 
 + } 
 + 
 + @ Test 
 + public void testAddNextSibling ( ) { 
 + final DetailAST parent = new DetailAST ( ) ; 
 + final DetailAST child = new DetailAST ( ) ; 
 + final DetailAST sibling = new DetailAST ( ) ; 
 + final DetailAST newSibling = new DetailAST ( ) ; 
 + parent . setFirstChild ( child ) ; 
 + child . setNextSibling ( sibling ) ; 
 + 
 + child . addNextSibling ( newSibling ) ; 
 + assertTrue ( newSibling . getParent ( ) . equals ( parent ) ) ; 
 + assertTrue ( newSibling . getNextSibling ( ) . equals ( sibling ) ) ; 
 + assertTrue ( child . getNextSibling ( ) . equals ( newSibling ) ) ; 
 + } 
 + 
 + @ Test 
 public void testTreeStructure ( ) throws Exception { 
 checkDir ( new File ( " src / test / resources / com / puppycrawl / tools / checkstyle " ) ) ; 
 } 
 
 + @ Test 
 + public void testToString ( ) { 
 + final DetailAST ast = new DetailAST ( ) ; 
 + ast . setText ( " text " ) ; 
 + ast . setColumnNo ( 0 ) ; 
 + ast . setLineNo ( 0 ) ; 
 + assertEquals ( " text [ 0x0 ] " , ast . toString ( ) ) ; 
 + } 
 + 
 private static void checkDir ( File dir ) throws Exception { 
 final File [ ] files = dir . listFiles ( file - > { 
 return ( file . getName ( ) . endsWith ( " . java " ) 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 index b343a2d . . 1fd577b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 @ @ - 21 , 12 + 21 , 26 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 + import static org . mockito . Matchers . any ; 
 + import static org . mockito . Mockito . times ; 
 + import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 + import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 + import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . io . Reader ; 
 + import java . util . Locale ; 
 
 import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + import org . powermock . core . classloader . annotations . PrepareForTest ; 
 + import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 + import com . google . common . io . Closeables ; 
 + 
 + @ RunWith ( PowerMockRunner . class ) 
 + @ PrepareForTest ( Closeables . class ) 
 public class FileTextTest { 
 @ Test 
 public void testUnsupportedCharset ( ) throws IOException { 
 @ @ - 44 , 10 + 58 , 18 @ @ public class FileTextTest { 
 
 @ Test 
 public void testSupportedCharset ( ) throws IOException { 
 + / / check if reader finally closed 
 + mockStatic ( Closeables . class ) ; 
 + doNothing ( ) . when ( Closeables . class ) ; 
 + Closeables . closeQuietly ( any ( Reader . class ) ) ; 
 + 
 final String charsetName = " ISO - 8859 - 1 " ; 
 final FileText fileText = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " 
 + " checkstyle / api / import - control _ complete . xml " ) , charsetName ) ; 
 assertEquals ( charsetName , fileText . getCharset ( ) . name ( ) ) ; 
 + 
 + verifyStatic ( times ( 1 ) ) ; 
 + Closeables . closeQuietly ( any ( Reader . class ) ) ; 
 } 
 
 @ Test 
 @ @ - 66 , 6 + 88 , 24 @ @ public class FileTextTest { 
 final FileText fileText = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " 
 + " checkstyle / api / import - control _ complete . xml " ) , charsetName ) ; 
 final FileText copy = new FileText ( fileText ) ; 
 - assertEquals ( 3 , copy . lineColumn ( 100 ) . getLine ( ) ) ; 
 + final LineColumn lineColumn = copy . lineColumn ( 100 ) ; 
 + assertEquals ( 3 , lineColumn . getLine ( ) ) ; 
 + if ( System . getProperty ( " os . name " ) . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { 
 + assertEquals ( 44 , lineColumn . getColumn ( ) ) ; 
 + } 
 + else { 
 + assertEquals ( 46 , lineColumn . getColumn ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testLineColumnAtTheStartOfFile ( ) throws IOException { 
 + final String charsetName = " ISO - 8859 - 1 " ; 
 + final FileText fileText = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " 
 + + " checkstyle / api / import - control _ complete . xml " ) , charsetName ) ; 
 + final FileText copy = new FileText ( fileText ) ; 
 + final LineColumn lineColumn = copy . lineColumn ( 0 ) ; 
 + assertEquals ( 1 , lineColumn . getLine ( ) ) ; 
 + assertEquals ( 0 , lineColumn . getColumn ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FullIdentTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FullIdentTest . java 
 index d3b5c76 . . 90b780e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FullIdentTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FullIdentTest . java 
 @ @ - 37 , 7 + 37 , 18 @ @ public class FullIdentTest { 
 } 
 
 @ Test 
 - public void testNonValidCoordinates ( ) { 
 + public void testNonValidCoordinatesWithNegative ( ) { 
 + final FullIdent fullIdent = prepareFullIdentWithCoordinates ( 14 , 15 ) ; 
 + Assert . assertEquals ( " MyTest . MyTestik [ 15x14 ] " , fullIdent . toString ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNonValidCoordinatesWithZero ( ) { 
 + final FullIdent fullIdent = prepareFullIdentWithCoordinates ( 0 , 0 ) ; 
 + Assert . assertEquals ( " MyTest . MyTestik [ 15x14 ] " , fullIdent . toString ( ) ) ; 
 + } 
 + 
 + private static FullIdent prepareFullIdentWithCoordinates ( int columnNo , int lineNo ) { 
 final DetailAST ast = new DetailAST ( ) ; 
 ast . setType ( TokenTypes . DOT ) ; 
 ast . setColumnNo ( 1 ) ; 
 @ @ - 46 , 8 + 57 , 8 @ @ public class FullIdentTest { 
 
 final DetailAST ast2 = new DetailAST ( ) ; 
 ast2 . setType ( TokenTypes . LE ) ; 
 - ast2 . setColumnNo ( - 14 ) ; 
 - ast2 . setLineNo ( - 15 ) ; 
 + ast2 . setColumnNo ( columnNo ) ; 
 + ast2 . setLineNo ( lineNo ) ; 
 ast2 . setText ( " MyTestik " ) ; 
 
 final DetailAST ast1 = new DetailAST ( ) ; 
 @ @ - 59 , 7 + 70 , 6 @ @ public class FullIdentTest { 
 ast . addChild ( ast1 ) ; 
 ast . addChild ( ast2 ) ; 
 
 - final FullIdent indent = FullIdent . createFullIdent ( ast ) ; 
 - Assert . assertEquals ( " MyTest . MyTestik [ 15x14 ] " , indent . toString ( ) ) ; 
 + return FullIdent . createFullIdent ( ast ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 2373891 . . 6f99f89 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 204 , 7 + 204 , 7 @ @ 
 < maven . jacoco . plugin . version > 0 . 7 . 9 < / maven . jacoco . plugin . version > 
 < maven . checkstyle . plugin . version > 2 . 17 < / maven . checkstyle . plugin . version > 
 < maven . sevntu . checkstyle . plugin . version > 1 . 24 . 0 < / maven . sevntu . checkstyle . plugin . version > 
 - < maven . sevntu - checkstyle - check . checkstyle . version > 7 . 8 < / maven . sevntu - checkstyle - check . checkstyle . version > 
 + < maven . sevntu - checkstyle - check . checkstyle . version > 7 . 8 . 1 < / maven . sevntu - checkstyle - check . checkstyle . version > 
 < maven . versions . plugin . version > 2 . 3 < / maven . versions . plugin . version > 
 < java . version > 1 . 8 < / java . version > 
 < tools . jar . version > $ { java . version } . 0 < / tools . jar . version >
