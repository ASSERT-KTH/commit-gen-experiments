BLEU SCORE: 0.8801117367933934

TEST MSG: Issue # 5750 : aligned javadoc / xdoc for MemberNameCheck
GENERATED MSG: Issue # 5750 : aligned javadoc / xdoc for LocalFinalVariableNameCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java <nl> index 3cb4a06 . . 8900ac4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java <nl> @ @ - 26 , 11 + 26 , 30 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> / * * <nl> * < p > <nl> * Checks that instance variable names conform to a format specified <nl> - * by the format property . The format is a <nl> - * { @ link java . util . regex . Pattern regular expression } <nl> - * and defaults to <nl> - * < strong > ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ < / strong > . <nl> + * by the format property . <nl> * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code format } - Specifies valid identifiers . Default value is <nl> + * { @ code " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code applyToPublic } - Controls whether to apply the check to public member . <nl> + * Default value is { @ code true } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code applyToProtected } - Controls whether to apply the check to protected member . <nl> + * Default value is { @ code true } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code applyToPackage } - Controls whether to apply the check to package - private member . <nl> + * Default value is { @ code true } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code applyToPrivate } - Controls whether to apply the check to private member . <nl> + * Default value is { @ code true } . <nl> + * < / li > <nl> + * < / ul > <nl> * < p > <nl> * An example of how to configure the check is : <nl> * < / p > <nl> @ @ - 39 , 14 + 58 , 16 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> * < / pre > <nl> * < p > <nl> * An example of how to configure the check for names that begin with <nl> - * & quot ; m & quot ; , followed by an upper case letter , and then letters and <nl> + * { @ code " m " } , followed by an upper case letter , and then letters and <nl> * digits is : <nl> * < / p > <nl> * < pre > <nl> * & lt ; module name = " MemberName " & gt ; <nl> - * & lt ; property name = " format " value = " ^ m [ A - Z ] [ a - zA - Z0 - 9 ] * $ " / & gt ; <nl> + * & lt ; property name = " format " value = " ^ m [ A - Z ] [ a - zA - Z0 - 9 ] * $ " / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> + * <nl> + * @ since 3 . 0 <nl> * / <nl> public class MemberNameCheck <nl> extends AbstractAccessControlNameCheck { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 442cb8a . . cf2cd24 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 113 , 6 + 113 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> & & ! " InterfaceTypeParameterName " . equals ( sectionName ) <nl> & & ! " LocalFinalVariableName " . equals ( sectionName ) <nl> & & ! " LocalVariableName " . equals ( sectionName ) <nl> + & & ! " MemberName " . equals ( sectionName ) <nl> ) { <nl> continue ; <nl> } <nl> @ @ - 330 , 7 + 331 , 8 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> else { <nl> final char last = text . charAt ( text . length ( ) - 1 ) ; <nl> <nl> - result = firstCharToAppend ! = ' : ' & & last ! = ' - ' & & ! Character . isWhitespace ( last ) ; <nl> + result = ( last = = ' : ' | | firstCharToAppend = = ' @ ' | | Character . isAlphabetic ( last ) <nl> + | | Character . isAlphabetic ( firstCharToAppend ) ) & & ! Character . isWhitespace ( last ) ; <nl> } <nl> <nl> return result ; <nl> diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml <nl> index eedcc88 . . 8e8af28 100644 <nl> - - - a / src / xdocs / config _ naming . xml <nl> + + + b / src / xdocs / config _ naming . xml <nl> @ @ - 914 , 10 + 914 , 10 @ @ for ( int i = 1 ; i & lt ; 10 ; i + + ) { } <nl> < / section > <nl> <nl> < section name = " MemberName " > <nl> + < p > Since Checkstyle 3 . 0 < / p > <nl> < subsection name = " Description " > <nl> - < p > Since Checkstyle 3 . 0 < / p > <nl> < p > <nl> - Validates identifiers for non - < code > static < / code > fields . <nl> + Checks that instance variable names conform to a format specified by the format property . <nl> < / p > <nl> < / subsection > <nl> <nl> @ @ - 972 , 11 + 972 , 15 @ @ for ( int i = 1 ; i & lt ; 10 ; i + + ) { } <nl> <nl> < subsection name = " Examples " > <nl> < p > <nl> - This is an example of a <nl> - configuration of the < code > MemberName < / code > module to <nl> - ensure that member identifiers begin with <nl> - < code > & # 39 ; m & # 39 ; < / code > , followed <nl> - by an upper case letter , and then letters and digits : <nl> + An example of how to configure the check is : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = " MemberName " / & gt ; <nl> + < / source > <nl> + < p > <nl> + An example of how to configure the check for names that begin with <nl> + < code > & quot ; m & quot ; < / code > , followed by an upper case letter , and then letters and <nl> + digits is : <nl> < / p > <nl> <nl> < source >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> index 73c80d9 . . bc45366 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> @ @ - 53 , 28 + 53 , 28 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < / p > <nl> * < ul > <nl> * < li > <nl> - * Option { @ code allowedAbbreviationLength } - indicates on the number of consecutive capital <nl> + * Property { @ code allowedAbbreviationLength } - Indicate the number of consecutive capital <nl> * letters allowed in targeted identifiers ( abbreviations in the classes , interfaces , variables <nl> * and methods names , . . . ) . Default value is { @ code 3 } . <nl> * < / li > <nl> * < li > <nl> - * Option { @ code allowedAbbreviations } - list of abbreviations that must be skipped for checking . <nl> - * Abbreviations should be separated by comma . Default value is { @ code { } } . <nl> + * Property { @ code allowedAbbreviations } - Specify list of abbreviations that must be skipped for <nl> + * checking . Abbreviations should be separated by comma . Default value is { @ code { } } . <nl> * < / li > <nl> * < li > <nl> - * Option { @ code ignoreFinal } - allow to skip variables with { @ code final } modifier . Default value <nl> - * is { @ code true } . <nl> + * Property { @ code ignoreFinal } - Allow to skip variables with { @ code final } modifier . Default <nl> + * value is { @ code true } . <nl> * < / li > <nl> * < li > <nl> - * Option { @ code ignoreStatic } - allow to skip variables with { @ code static } modifier . Default <nl> + * Property { @ code ignoreStatic } - Allow to skip variables with { @ code static } modifier . Default <nl> * value is { @ code true } . <nl> * < / li > <nl> * < li > <nl> - * Option { @ code ignoreOverriddenMethods } - allow to ignore methods tagged with { @ code @ Override } <nl> + * Property { @ code ignoreOverriddenMethods } - Allow to ignore methods tagged with { @ code @ Override } <nl> * annotation ( that usually mean inherited name ) . Default value is { @ code true } . <nl> * < / li > <nl> * < li > <nl> - * Option { @ code tokens } - tokens to check Default value is : <nl> + * Property { @ code tokens } - tokens to check Default value is : <nl> * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # CLASS _ DEF " > CLASS _ DEF < / a > , <nl> * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INTERFACE _ DEF " > INTERFACE _ DEF < / a > , <nl> * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ENUM _ DEF " > ENUM _ DEF < / a > , <nl> @ @ - 82 , 7 + 82 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATION _ FIELD _ DEF " > ANNOTATION _ FIELD _ DEF < / a > , <nl> * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # PARAMETER _ DEF " > PARAMETER _ DEF < / a > , <nl> * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # VARIABLE _ DEF " > VARIABLE _ DEF < / a > , <nl> - * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > METHOD _ DEF < / a > . } . <nl> + * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > METHOD _ DEF < / a > . <nl> * < / li > <nl> * < / ul > <nl> * < p > <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { <nl> private static final int DEFAULT _ ALLOWED _ ABBREVIATIONS _ LENGTH = 3 ; <nl> <nl> / * * <nl> - * Indicates on the number of consecutive capital letters allowed in <nl> + * Indicate the number of consecutive capital letters allowed in <nl> * targeted identifiers ( abbreviations in the classes , interfaces , variables <nl> * and methods names , . . . ) . <nl> * / <nl> @ @ - 130 , 7 + 130 , 7 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { <nl> DEFAULT _ ALLOWED _ ABBREVIATIONS _ LENGTH ; <nl> <nl> / * * <nl> - * List of abbreviations that must be skipped for checking . Abbreviations <nl> + * Specify list of abbreviations that must be skipped for checking . Abbreviations <nl> * should be separated by comma . <nl> * / <nl> private Set < String > allowedAbbreviations = new HashSet < > ( ) ; <nl> @ @ - 176 , 7 + 176 , 7 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Setter to indicates on the number of consecutive capital letters allowed <nl> + * Setter to indicate the number of consecutive capital letters allowed <nl> * in targeted identifiers ( abbreviations in the classes , interfaces , <nl> * variables and methods names , . . . ) . <nl> * @ param allowedAbbreviationLength amount of allowed capital letters in <nl> @ @ - 187 , 8 + 187 , 8 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Setter to set a list of abbreviations that must be skipped for checking . <nl> - * Abbreviations should be separated by comma , no spaces is allowed . <nl> + * Setter to specify list of abbreviations that must be skipped for checking . <nl> + * Abbreviations should be separated by comma . <nl> * @ param allowedAbbreviations an string of abbreviations that must be <nl> * skipped from checking , each abbreviation separated by comma . <nl> * / <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index b13604f . . 773ba8e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . util . ArrayList ; <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . regex . Pattern ; <nl> <nl> import javax . xml . parsers . ParserConfigurationException ; <nl> <nl> @ @ - 201 , 7 + 202 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> for ( List < Node > property : CHECK _ PROPERTIES ) { <nl> final String propertyName = getNodeText ( property . get ( 0 ) , true ) ; <nl> <nl> - result . append ( " \ n < li > \ nOption { @ code " ) ; <nl> + result . append ( " \ n < li > \ nProperty { @ code " ) ; <nl> result . append ( propertyName ) ; <nl> result . append ( " } - " ) ; <nl> <nl> @ @ - 214 , 11 + 215 , 16 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> result . append ( " Default value is : " ) ; <nl> } <nl> else { <nl> - result . append ( " Default value is { @ code " ) ; <nl> + result . append ( " Default value is " ) ; <nl> } <nl> <nl> result . append ( getNodeText ( property . get ( 3 ) , true ) ) ; <nl> - result . append ( " } . \ n < / li > " ) ; <nl> + <nl> + if ( result . charAt ( result . length ( ) - 1 ) ! = ' . ' ) { <nl> + result . append ( ' . ' ) ; <nl> + } <nl> + <nl> + result . append ( " \ n < / li > " ) ; <nl> } <nl> <nl> result . append ( " \ n < / ul > " ) ; <nl> @ @ - 367 , 6 + 373 , 8 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> private static class JavaDocCapture extends AbstractCheck { <nl> + private static final Pattern SETTER _ PATTERN = Pattern . compile ( " ^ set [ A - Z ] . * " ) ; <nl> + <nl> private int depth ; <nl> <nl> @ Override <nl> @ @ - 465 , 7 + 473 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> private void visitMethod ( DetailAST ast , DetailAST node ) { <nl> - if ( depth = = 0 & & CheckUtils . isSetterMethod ( node ) ) { <nl> + if ( depth = = 0 & & isSetterMethod ( node ) ) { <nl> final String propertyUpper = node . findFirstToken ( TokenTypes . IDENT ) <nl> . getText ( ) . substring ( 3 ) ; <nl> final String propertyName = makeFirstLower ( propertyUpper ) ; <nl> @ @ - 476 , 12 + 484 , 40 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> <nl> Assert . assertEquals ( checkName + " ' s class method - level JavaDoc for " <nl> + propertyName , <nl> - " Setter to " + propertyDoc , <nl> + " Setter to " + makeFirstLower ( propertyDoc ) , <nl> javaDoc . substring ( 0 , javaDoc . indexOf ( " @ param " ) ) ) ; <nl> } <nl> } <nl> } <nl> <nl> + / * * <nl> + * Returns whether an AST represents a setter method . This is similar to <nl> + * { @ link CheckUtils # isSetterMethod ( DetailAST ) } except this doesn ' t care <nl> + * about the number of children in the method . <nl> + * @ param ast the AST to check with . <nl> + * @ return whether the AST represents a setter method . <nl> + * / <nl> + private static boolean isSetterMethod ( DetailAST ast ) { <nl> + boolean setterMethod = false ; <nl> + <nl> + if ( ast . getType ( ) = = TokenTypes . METHOD _ DEF ) { <nl> + final DetailAST type = ast . findFirstToken ( TokenTypes . TYPE ) ; <nl> + final String name = type . getNextSibling ( ) . getText ( ) ; <nl> + final boolean matchesSetterFormat = SETTER _ PATTERN . matcher ( name ) . matches ( ) ; <nl> + final boolean voidReturnType = type . findFirstToken ( TokenTypes . LITERAL _ VOID ) ! = null ; <nl> + <nl> + final DetailAST params = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> + final boolean singleParam = params . getChildCount ( TokenTypes . PARAMETER _ DEF ) = = 1 ; <nl> + <nl> + if ( matchesSetterFormat & & voidReturnType & & singleParam ) { <nl> + final DetailAST slist = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> + <nl> + setterMethod = slist ! = null ; <nl> + } <nl> + } <nl> + return setterMethod ; <nl> + } <nl> + <nl> private static String getJavaDocText ( DetailAST node ) { <nl> final String text = " < ? xml version = \ " 1 . 0 \ " encoding = \ " UTF - 8 \ " ? > \ n < document > \ n " <nl> + node . getFirstChild ( ) . getText ( ) . replaceAll ( " ( ^ | \ \ r ? \ \ n ) \ \ s * \ \ * ? " , " \ n " ) <nl> diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml <nl> index 361ac82 . . e3c475d 100644 <nl> - - - a / src / xdocs / config _ naming . xml <nl> + + + b / src / xdocs / config _ naming . xml <nl> @ @ - 65 , 41 + 65 , 41 @ @ <nl> < / tr > <nl> < tr > <nl> < td > allowedAbbreviationLength < / td > <nl> - < td > indicates on the number of consecutive capital letters allowed in targeted <nl> + < td > Indicate the number of consecutive capital letters allowed in targeted <nl> identifiers ( abbreviations in the classes , interfaces , variables and methods <nl> names , . . . ) . < / td > <nl> < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > <nl> - < td > 3 < / td > <nl> + < td > < code > 3 < / code > < / td > <nl> < td > 5 . 8 < / td > <nl> < / tr > <nl> < tr > <nl> < td > allowedAbbreviations < / td > <nl> - < td > list of abbreviations that must be skipped for checking . <nl> + < td > Specify list of abbreviations that must be skipped for checking . <nl> Abbreviations should be separated by comma . < / td > <nl> < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > <nl> - < td > { } < / td > <nl> + < td > < code > { } < / code > < / td > <nl> < td > 5 . 8 < / td > <nl> < / tr > <nl> < tr > <nl> < td > ignoreFinal < / td > <nl> - < td > allow to skip variables with < code > final < / code > modifier . < / td > <nl> + < td > Allow to skip variables with < code > final < / code > modifier . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> - < td > true < / td > <nl> + < td > < code > true < / code > < / td > <nl> < td > 5 . 8 < / td > <nl> < / tr > <nl> < tr > <nl> < td > ignoreStatic < / td > <nl> - < td > allow to skip variables with < code > static < / code > modifier . < / td > <nl> + < td > Allow to skip variables with < code > static < / code > modifier . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> - < td > true < / td > <nl> + < td > < code > true < / code > < / td > <nl> < td > 5 . 8 < / td > <nl> < / tr > <nl> < tr > <nl> < td > ignoreOverriddenMethods < / td > <nl> - < td > allow to ignore methods tagged with < code > @ Override < / code > annotation <nl> + < td > Allow to ignore methods tagged with < code > @ Override < / code > annotation <nl> ( that usually mean inherited name ) . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> - < td > true < / td > <nl> + < td > < code > true < / code > < / td > <nl> < td > 5 . 8 < / td > <nl> < / tr > <nl> < tr >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java 
 index 3cb4a06 . . 8900ac4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java 
 @ @ - 26 , 11 + 26 , 30 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 / * * 
 * < p > 
 * Checks that instance variable names conform to a format specified 
 - * by the format property . The format is a 
 - * { @ link java . util . regex . Pattern regular expression } 
 - * and defaults to 
 - * < strong > ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ < / strong > . 
 + * by the format property . 
 * < / p > 
 + * < ul > 
 + * < li > 
 + * Property { @ code format } - Specifies valid identifiers . Default value is 
 + * { @ code " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code applyToPublic } - Controls whether to apply the check to public member . 
 + * Default value is { @ code true } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code applyToProtected } - Controls whether to apply the check to protected member . 
 + * Default value is { @ code true } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code applyToPackage } - Controls whether to apply the check to package - private member . 
 + * Default value is { @ code true } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code applyToPrivate } - Controls whether to apply the check to private member . 
 + * Default value is { @ code true } . 
 + * < / li > 
 + * < / ul > 
 * < p > 
 * An example of how to configure the check is : 
 * < / p > 
 @ @ - 39 , 14 + 58 , 16 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 * < / pre > 
 * < p > 
 * An example of how to configure the check for names that begin with 
 - * & quot ; m & quot ; , followed by an upper case letter , and then letters and 
 + * { @ code " m " } , followed by an upper case letter , and then letters and 
 * digits is : 
 * < / p > 
 * < pre > 
 * & lt ; module name = " MemberName " & gt ; 
 - * & lt ; property name = " format " value = " ^ m [ A - Z ] [ a - zA - Z0 - 9 ] * $ " / & gt ; 
 + * & lt ; property name = " format " value = " ^ m [ A - Z ] [ a - zA - Z0 - 9 ] * $ " / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 + * 
 + * @ since 3 . 0 
 * / 
 public class MemberNameCheck 
 extends AbstractAccessControlNameCheck { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 442cb8a . . cf2cd24 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 113 , 6 + 113 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 & & ! " InterfaceTypeParameterName " . equals ( sectionName ) 
 & & ! " LocalFinalVariableName " . equals ( sectionName ) 
 & & ! " LocalVariableName " . equals ( sectionName ) 
 + & & ! " MemberName " . equals ( sectionName ) 
 ) { 
 continue ; 
 } 
 @ @ - 330 , 7 + 331 , 8 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 else { 
 final char last = text . charAt ( text . length ( ) - 1 ) ; 
 
 - result = firstCharToAppend ! = ' : ' & & last ! = ' - ' & & ! Character . isWhitespace ( last ) ; 
 + result = ( last = = ' : ' | | firstCharToAppend = = ' @ ' | | Character . isAlphabetic ( last ) 
 + | | Character . isAlphabetic ( firstCharToAppend ) ) & & ! Character . isWhitespace ( last ) ; 
 } 
 
 return result ; 
 diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml 
 index eedcc88 . . 8e8af28 100644 
 - - - a / src / xdocs / config _ naming . xml 
 + + + b / src / xdocs / config _ naming . xml 
 @ @ - 914 , 10 + 914 , 10 @ @ for ( int i = 1 ; i & lt ; 10 ; i + + ) { } 
 < / section > 
 
 < section name = " MemberName " > 
 + < p > Since Checkstyle 3 . 0 < / p > 
 < subsection name = " Description " > 
 - < p > Since Checkstyle 3 . 0 < / p > 
 < p > 
 - Validates identifiers for non - < code > static < / code > fields . 
 + Checks that instance variable names conform to a format specified by the format property . 
 < / p > 
 < / subsection > 
 
 @ @ - 972 , 11 + 972 , 15 @ @ for ( int i = 1 ; i & lt ; 10 ; i + + ) { } 
 
 < subsection name = " Examples " > 
 < p > 
 - This is an example of a 
 - configuration of the < code > MemberName < / code > module to 
 - ensure that member identifiers begin with 
 - < code > & # 39 ; m & # 39 ; < / code > , followed 
 - by an upper case letter , and then letters and digits : 
 + An example of how to configure the check is : 
 + < / p > 
 + < source > 
 + & lt ; module name = " MemberName " / & gt ; 
 + < / source > 
 + < p > 
 + An example of how to configure the check for names that begin with 
 + < code > & quot ; m & quot ; < / code > , followed by an upper case letter , and then letters and 
 + digits is : 
 < / p > 
 
 < source >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 index 73c80d9 . . bc45366 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 @ @ - 53 , 28 + 53 , 28 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < / p > 
 * < ul > 
 * < li > 
 - * Option { @ code allowedAbbreviationLength } - indicates on the number of consecutive capital 
 + * Property { @ code allowedAbbreviationLength } - Indicate the number of consecutive capital 
 * letters allowed in targeted identifiers ( abbreviations in the classes , interfaces , variables 
 * and methods names , . . . ) . Default value is { @ code 3 } . 
 * < / li > 
 * < li > 
 - * Option { @ code allowedAbbreviations } - list of abbreviations that must be skipped for checking . 
 - * Abbreviations should be separated by comma . Default value is { @ code { } } . 
 + * Property { @ code allowedAbbreviations } - Specify list of abbreviations that must be skipped for 
 + * checking . Abbreviations should be separated by comma . Default value is { @ code { } } . 
 * < / li > 
 * < li > 
 - * Option { @ code ignoreFinal } - allow to skip variables with { @ code final } modifier . Default value 
 - * is { @ code true } . 
 + * Property { @ code ignoreFinal } - Allow to skip variables with { @ code final } modifier . Default 
 + * value is { @ code true } . 
 * < / li > 
 * < li > 
 - * Option { @ code ignoreStatic } - allow to skip variables with { @ code static } modifier . Default 
 + * Property { @ code ignoreStatic } - Allow to skip variables with { @ code static } modifier . Default 
 * value is { @ code true } . 
 * < / li > 
 * < li > 
 - * Option { @ code ignoreOverriddenMethods } - allow to ignore methods tagged with { @ code @ Override } 
 + * Property { @ code ignoreOverriddenMethods } - Allow to ignore methods tagged with { @ code @ Override } 
 * annotation ( that usually mean inherited name ) . Default value is { @ code true } . 
 * < / li > 
 * < li > 
 - * Option { @ code tokens } - tokens to check Default value is : 
 + * Property { @ code tokens } - tokens to check Default value is : 
 * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # CLASS _ DEF " > CLASS _ DEF < / a > , 
 * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INTERFACE _ DEF " > INTERFACE _ DEF < / a > , 
 * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ENUM _ DEF " > ENUM _ DEF < / a > , 
 @ @ - 82 , 7 + 82 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATION _ FIELD _ DEF " > ANNOTATION _ FIELD _ DEF < / a > , 
 * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # PARAMETER _ DEF " > PARAMETER _ DEF < / a > , 
 * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # VARIABLE _ DEF " > VARIABLE _ DEF < / a > , 
 - * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > METHOD _ DEF < / a > . } . 
 + * < a href = " http : / / checkstyle . sourceforge . net / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > METHOD _ DEF < / a > . 
 * < / li > 
 * < / ul > 
 * < p > 
 @ @ - 122 , 7 + 122 , 7 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { 
 private static final int DEFAULT _ ALLOWED _ ABBREVIATIONS _ LENGTH = 3 ; 
 
 / * * 
 - * Indicates on the number of consecutive capital letters allowed in 
 + * Indicate the number of consecutive capital letters allowed in 
 * targeted identifiers ( abbreviations in the classes , interfaces , variables 
 * and methods names , . . . ) . 
 * / 
 @ @ - 130 , 7 + 130 , 7 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { 
 DEFAULT _ ALLOWED _ ABBREVIATIONS _ LENGTH ; 
 
 / * * 
 - * List of abbreviations that must be skipped for checking . Abbreviations 
 + * Specify list of abbreviations that must be skipped for checking . Abbreviations 
 * should be separated by comma . 
 * / 
 private Set < String > allowedAbbreviations = new HashSet < > ( ) ; 
 @ @ - 176 , 7 + 176 , 7 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Setter to indicates on the number of consecutive capital letters allowed 
 + * Setter to indicate the number of consecutive capital letters allowed 
 * in targeted identifiers ( abbreviations in the classes , interfaces , 
 * variables and methods names , . . . ) . 
 * @ param allowedAbbreviationLength amount of allowed capital letters in 
 @ @ - 187 , 8 + 187 , 8 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Setter to set a list of abbreviations that must be skipped for checking . 
 - * Abbreviations should be separated by comma , no spaces is allowed . 
 + * Setter to specify list of abbreviations that must be skipped for checking . 
 + * Abbreviations should be separated by comma . 
 * @ param allowedAbbreviations an string of abbreviations that must be 
 * skipped from checking , each abbreviation separated by comma . 
 * / 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index b13604f . . 773ba8e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . util . ArrayList ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . regex . Pattern ; 
 
 import javax . xml . parsers . ParserConfigurationException ; 
 
 @ @ - 201 , 7 + 202 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 for ( List < Node > property : CHECK _ PROPERTIES ) { 
 final String propertyName = getNodeText ( property . get ( 0 ) , true ) ; 
 
 - result . append ( " \ n < li > \ nOption { @ code " ) ; 
 + result . append ( " \ n < li > \ nProperty { @ code " ) ; 
 result . append ( propertyName ) ; 
 result . append ( " } - " ) ; 
 
 @ @ - 214 , 11 + 215 , 16 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 result . append ( " Default value is : " ) ; 
 } 
 else { 
 - result . append ( " Default value is { @ code " ) ; 
 + result . append ( " Default value is " ) ; 
 } 
 
 result . append ( getNodeText ( property . get ( 3 ) , true ) ) ; 
 - result . append ( " } . \ n < / li > " ) ; 
 + 
 + if ( result . charAt ( result . length ( ) - 1 ) ! = ' . ' ) { 
 + result . append ( ' . ' ) ; 
 + } 
 + 
 + result . append ( " \ n < / li > " ) ; 
 } 
 
 result . append ( " \ n < / ul > " ) ; 
 @ @ - 367 , 6 + 373 , 8 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 } 
 
 private static class JavaDocCapture extends AbstractCheck { 
 + private static final Pattern SETTER _ PATTERN = Pattern . compile ( " ^ set [ A - Z ] . * " ) ; 
 + 
 private int depth ; 
 
 @ Override 
 @ @ - 465 , 7 + 473 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 } 
 
 private void visitMethod ( DetailAST ast , DetailAST node ) { 
 - if ( depth = = 0 & & CheckUtils . isSetterMethod ( node ) ) { 
 + if ( depth = = 0 & & isSetterMethod ( node ) ) { 
 final String propertyUpper = node . findFirstToken ( TokenTypes . IDENT ) 
 . getText ( ) . substring ( 3 ) ; 
 final String propertyName = makeFirstLower ( propertyUpper ) ; 
 @ @ - 476 , 12 + 484 , 40 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 
 Assert . assertEquals ( checkName + " ' s class method - level JavaDoc for " 
 + propertyName , 
 - " Setter to " + propertyDoc , 
 + " Setter to " + makeFirstLower ( propertyDoc ) , 
 javaDoc . substring ( 0 , javaDoc . indexOf ( " @ param " ) ) ) ; 
 } 
 } 
 } 
 
 + / * * 
 + * Returns whether an AST represents a setter method . This is similar to 
 + * { @ link CheckUtils # isSetterMethod ( DetailAST ) } except this doesn ' t care 
 + * about the number of children in the method . 
 + * @ param ast the AST to check with . 
 + * @ return whether the AST represents a setter method . 
 + * / 
 + private static boolean isSetterMethod ( DetailAST ast ) { 
 + boolean setterMethod = false ; 
 + 
 + if ( ast . getType ( ) = = TokenTypes . METHOD _ DEF ) { 
 + final DetailAST type = ast . findFirstToken ( TokenTypes . TYPE ) ; 
 + final String name = type . getNextSibling ( ) . getText ( ) ; 
 + final boolean matchesSetterFormat = SETTER _ PATTERN . matcher ( name ) . matches ( ) ; 
 + final boolean voidReturnType = type . findFirstToken ( TokenTypes . LITERAL _ VOID ) ! = null ; 
 + 
 + final DetailAST params = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 + final boolean singleParam = params . getChildCount ( TokenTypes . PARAMETER _ DEF ) = = 1 ; 
 + 
 + if ( matchesSetterFormat & & voidReturnType & & singleParam ) { 
 + final DetailAST slist = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 + 
 + setterMethod = slist ! = null ; 
 + } 
 + } 
 + return setterMethod ; 
 + } 
 + 
 private static String getJavaDocText ( DetailAST node ) { 
 final String text = " < ? xml version = \ " 1 . 0 \ " encoding = \ " UTF - 8 \ " ? > \ n < document > \ n " 
 + node . getFirstChild ( ) . getText ( ) . replaceAll ( " ( ^ | \ \ r ? \ \ n ) \ \ s * \ \ * ? " , " \ n " ) 
 diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml 
 index 361ac82 . . e3c475d 100644 
 - - - a / src / xdocs / config _ naming . xml 
 + + + b / src / xdocs / config _ naming . xml 
 @ @ - 65 , 41 + 65 , 41 @ @ 
 < / tr > 
 < tr > 
 < td > allowedAbbreviationLength < / td > 
 - < td > indicates on the number of consecutive capital letters allowed in targeted 
 + < td > Indicate the number of consecutive capital letters allowed in targeted 
 identifiers ( abbreviations in the classes , interfaces , variables and methods 
 names , . . . ) . < / td > 
 < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > 
 - < td > 3 < / td > 
 + < td > < code > 3 < / code > < / td > 
 < td > 5 . 8 < / td > 
 < / tr > 
 < tr > 
 < td > allowedAbbreviations < / td > 
 - < td > list of abbreviations that must be skipped for checking . 
 + < td > Specify list of abbreviations that must be skipped for checking . 
 Abbreviations should be separated by comma . < / td > 
 < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > 
 - < td > { } < / td > 
 + < td > < code > { } < / code > < / td > 
 < td > 5 . 8 < / td > 
 < / tr > 
 < tr > 
 < td > ignoreFinal < / td > 
 - < td > allow to skip variables with < code > final < / code > modifier . < / td > 
 + < td > Allow to skip variables with < code > final < / code > modifier . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 - < td > true < / td > 
 + < td > < code > true < / code > < / td > 
 < td > 5 . 8 < / td > 
 < / tr > 
 < tr > 
 < td > ignoreStatic < / td > 
 - < td > allow to skip variables with < code > static < / code > modifier . < / td > 
 + < td > Allow to skip variables with < code > static < / code > modifier . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 - < td > true < / td > 
 + < td > < code > true < / code > < / td > 
 < td > 5 . 8 < / td > 
 < / tr > 
 < tr > 
 < td > ignoreOverriddenMethods < / td > 
 - < td > allow to ignore methods tagged with < code > @ Override < / code > annotation 
 + < td > Allow to ignore methods tagged with < code > @ Override < / code > annotation 
 ( that usually mean inherited name ) . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 - < td > true < / td > 
 + < td > < code > true < / code > < / td > 
 < td > 5 . 8 < / td > 
 < / tr > 
 < tr >
