BLEU SCORE: 0.06754312828675708

TEST MSG: Issue # 6252 : Move test inputs with deprecated packages to resources - noncompilable
GENERATED MSG: Issue # 2161 : unify test input locations

TEST DIFF (one line): diff - - git a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java <nl> index d030d6b . . 8941da8 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java <nl> @ @ - 6 , 7 + 6 , 6 @ @ import static com . puppycrawl . tools . checkstyle . utils . AnnotationUtil . getAnnotation <nl> import com . puppycrawl . tools . checkstyle . checks . design . FinalClassCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . design . ThrowsCountCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . design . VisibilityModifierCheck ; <nl> - import com . sun . accessibility . internal . resources . * ; <nl> import java . util . Arrays ; <nl> import java . util . BitSet ; <nl> import java . util . Map ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java <nl> index 421aef0 . . 515b944 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java <nl> @ @ - 54 , 7 + 54 , 7 @ @ public class IllegalImportCheckTest extends AbstractModuleTestSupport { <nl> " 23 : 1 : " + getCheckMessage ( MSG _ KEY , " java . io . File . listRoots " ) , <nl> " 27 : 1 : " + getCheckMessage ( MSG _ KEY , " java . io . File . createTempFile " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputIllegalImportDefault . java " ) , expected ) ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputIllegalImportDefault . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 66 , 7 + 66 , 7 @ @ public class IllegalImportCheckTest extends AbstractModuleTestSupport { <nl> " 15 : 1 : " + getCheckMessage ( MSG _ KEY , " sun . applet . * " ) , <nl> " 28 : 1 : " + getCheckMessage ( MSG _ KEY , " sun . * " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputIllegalImportDefault . java " ) , expected ) ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputIllegalImportDefault . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 90 , 7 + 90 , 7 @ @ public class IllegalImportCheckTest extends AbstractModuleTestSupport { <nl> " 15 : 1 : " + getCheckMessage ( MSG _ KEY , " sun . applet . * " ) , <nl> " 28 : 1 : " + getCheckMessage ( MSG _ KEY , " sun . * " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputIllegalImportDefault . java " ) , expected ) ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputIllegalImportDefault . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 109 , 7 + 109 , 7 @ @ public class IllegalImportCheckTest extends AbstractModuleTestSupport { <nl> " 35 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . Calendar " ) , <nl> " 36 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . BitSet " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputIllegalImportDefault . java " ) , expected ) ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputIllegalImportDefault . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 125 , 7 + 125 , 7 @ @ public class IllegalImportCheckTest extends AbstractModuleTestSupport { <nl> " 13 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . List " ) , <nl> " 17 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . Arrays " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputIllegalImportDefault . java " ) , expected ) ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputIllegalImportDefault . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 135 , 20 + 135 , 22 @ @ public class IllegalImportCheckTest extends AbstractModuleTestSupport { <nl> createModuleConfig ( IllegalImportCheck . class ) ; <nl> checkConfig . addAttribute ( " illegalPkgs " , " java \ \ . util " ) ; <nl> checkConfig . addAttribute ( " illegalClasses " , <nl> - " ^ com \ \ . puppycrawl \ \ . tools \ \ . checkstyle \ \ . Checker . * " ) ; <nl> + " ^ java \ \ . awt \ \ . . * " ) ; <nl> checkConfig . addAttribute ( " regexp " , " true " ) ; <nl> final String [ ] expected = { <nl> " 12 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . List " ) , <nl> " 13 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . List " ) , <nl> " 16 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . Enumeration " ) , <nl> " 17 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . Arrays " ) , <nl> + " 30 : 1 : " + getCheckMessage ( MSG _ KEY , " java . awt . Component " ) , <nl> + " 31 : 1 : " + getCheckMessage ( MSG _ KEY , " java . awt . Graphics2D " ) , <nl> + " 32 : 1 : " + getCheckMessage ( MSG _ KEY , " java . awt . HeadlessException " ) , <nl> + " 33 : 1 : " + getCheckMessage ( MSG _ KEY , " java . awt . Label " ) , <nl> " 34 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . Date " ) , <nl> " 35 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . Calendar " ) , <nl> " 36 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . BitSet " ) , <nl> - " 38 : 1 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . Checker " ) , <nl> - " 39 : 1 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . CheckerTest " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputIllegalImportDefault . java " ) , expected ) ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputIllegalImportDefault . java " ) , expected ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java <nl> index 1896cd4 . . cf71de6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java <nl> @ @ - 402 , 11 + 402 , 11 @ @ public class JavadocTypeCheckTest extends AbstractModuleTestSupport { <nl> createModuleConfig ( JavadocTypeCheck . class ) ; <nl> <nl> final String [ ] expected = { <nl> - " 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> - " 9 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + " 6 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + " 10 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> } ; <nl> verify ( checkConfig , <nl> - getPath ( " InputJavadocTypeAllowedAnnotations . java " ) , <nl> + getNonCompilablePath ( " InputJavadocTypeAllowedAnnotations . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 419 , 12 + 419 , 12 @ @ public class JavadocTypeCheckTest extends AbstractModuleTestSupport { <nl> " com . puppycrawl . tools . checkstyle . checks . javadoc . javadoctype . ThisIsOk " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> - " 9 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> - " 13 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + " 6 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + " 10 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + " 14 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> } ; <nl> verify ( checkConfig , <nl> - getPath ( " InputJavadocTypeAllowedAnnotations . java " ) , <nl> + getNonCompilablePath ( " InputJavadocTypeAllowedAnnotations . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 436 , 7 + 436 , 7 @ @ public class JavadocTypeCheckTest extends AbstractModuleTestSupport { <nl> <nl> final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , <nl> - getPath ( " InputJavadocTypeAllowedAnnotations . java " ) , <nl> + getNonCompilablePath ( " InputJavadocTypeAllowedAnnotations . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 447 , 12 + 447 , 12 @ @ public class JavadocTypeCheckTest extends AbstractModuleTestSupport { <nl> checkConfig . addAttribute ( " allowedAnnotations " , " Override " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> - " 9 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> - " 13 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + " 6 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + " 10 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + " 14 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> } ; <nl> verify ( checkConfig , <nl> - getPath ( " InputJavadocTypeAllowedAnnotations . java " ) , <nl> + getNonCompilablePath ( " InputJavadocTypeAllowedAnnotations . java " ) , <nl> expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / illegalimport / InputIllegalImportDefault . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / illegalimport / InputIllegalImportDefault . java <nl> new file mode 100644 <nl> index 0000000 . . 018e331 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / illegalimport / InputIllegalImportDefault . java <nl> @ @ - 0 , 0 + 1 , 101 @ @ <nl> + / / non - compiled with jdk10 : contains dropped packages <nl> + <nl> + <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . imports . illegalimport ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . * ; <nl> + <nl> + import java . io . * ; <nl> + import java . lang . * ; <nl> + import java . sql . Connection ; <nl> + import java . util . List ; <nl> + import java . util . List ; <nl> + import java . lang . ArithmeticException ; <nl> + import sun . applet . * ; <nl> + import java . util . Enumeration ; <nl> + import java . util . Arrays ; <nl> + <nl> + import javax . swing . JToolBar ; <nl> + import javax . swing . JToggleButton ; <nl> + import javax . swing . ScrollPaneLayout ; <nl> + import javax . swing . BorderFactory ; <nl> + import static java . io . File . listRoots ; <nl> + <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static java . io . File . createTempFile ; <nl> + import sun . * ; <nl> + <nl> + import java . awt . Component ; <nl> + import java . awt . Graphics2D ; <nl> + import java . awt . HeadlessException ; <nl> + import java . awt . Label ; <nl> + import java . util . Date ; <nl> + import java . util . Calendar ; <nl> + import java . util . BitSet ; <nl> + <nl> + / * * <nl> + * Test case for imports <nl> + * Here ' s an import used only by javadoc : { @ link Date } . <nl> + * @ author Oliver Burn <nl> + * @ author lkuehne <nl> + * @ author Michael Studman <nl> + * @ see Calendar Should avoid unused import for Calendar <nl> + * * / <nl> + class InputIllegalImportDefault <nl> + { <nl> + / * * ignore * * / <nl> + private Class mUse1 = Connection . class ; <nl> + / * * ignore * * / <nl> + private Class mUse2 = java . io . File . class ; <nl> + / * * ignore * * / <nl> + private Class mUse3 = null ; <nl> + / * * ignore * * / <nl> + private Class mUse4 = java . util . Enumeration [ ] . class ; <nl> + / * * usage of illegal import * * / <nl> + private String ftpClient = null ; <nl> + <nl> + / * * usage via static method , both normal and fully qualified * / <nl> + { <nl> + int [ ] x = { } ; <nl> + Arrays . sort ( x ) ; <nl> + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; <nl> + File [ ] files = listRoots ( ) ; <nl> + } <nl> + <nl> + / * * usage of inner class as type * / <nl> + private JToolBar . Separator mSep = null ; <nl> + <nl> + / * * usage of inner class in Constructor * / <nl> + private Object mUse5 = new Object ( ) ; <nl> + <nl> + / * * usage of inner class in constructor , fully qualified * / <nl> + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; <nl> + <nl> + / * * we use class name as member ' s name . <nl> + * also an inline JavaDoc - only import { @ link Vector linkText } * / <nl> + private int Component ; <nl> + <nl> + / * * <nl> + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } <nl> + * / <nl> + public void Label ( ) { } <nl> + <nl> + / * * <nl> + * Renders to a { @ linkplain Graphics2D graphics context } . <nl> + * @ throws HeadlessException if no graphis environment can be found . <nl> + * @ exception HeadlessException if no graphis environment can be found . <nl> + * / <nl> + public void render ( ) { } <nl> + <nl> + / * * <nl> + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . <nl> + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . <nl> + * <nl> + * @ param param1 with a link { @ link TestClass6 } <nl> + * @ throws TestClass7 when broken <nl> + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } <nl> + * / <nl> + public void aMethodWithManyLinks ( ) { } <nl> + } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / javadoc / javadoctype / InputJavadocTypeAllowedAnnotations . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / javadoc / javadoctype / InputJavadocTypeAllowedAnnotations . java <nl> new file mode 100644 <nl> index 0000000 . . 9f2f785 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / javadoc / javadoctype / InputJavadocTypeAllowedAnnotations . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + / / non - compiled with jkd11 : contains dropped packages <nl> + package com . puppycrawl . tools . checkstyle . checks . javadoc . javadoctype ; <nl> + <nl> + import javax . annotation . Generated ; <nl> + <nl> + @ ThisIsOk <nl> + class InputJavadocTypeAllowedAnnotations { <nl> + } <nl> + <nl> + @ com . puppycrawl . tools . checkstyle . checks . javadoc . javadoctype . ThisIsOk <nl> + class InputJavadocTypeAllowedAnnotationsFQN { <nl> + } <nl> + <nl> + @ Generated ( value = " some code generator " ) <nl> + class InputJavadocTypeAllowedAnnotationByDefault { <nl> + } <nl> + <nl> + / * * <nl> + * Annotation for unit tests . <nl> + * / <nl> + @ interface ThisIsOk { } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / illegalimport / InputIllegalImportDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / illegalimport / InputIllegalImportDefault . java <nl> deleted file mode 100644 <nl> index 1d11f84 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / illegalimport / InputIllegalImportDefault . java <nl> + + + / dev / null <nl> @ @ - 1 , 109 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . imports . illegalimport ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . * ; <nl> - <nl> - import java . io . * ; <nl> - import java . lang . * ; <nl> - import java . sql . Connection ; <nl> - import java . util . List ; <nl> - import java . util . List ; <nl> - import java . lang . ArithmeticException ; <nl> - import sun . applet . * ; <nl> - import java . util . Enumeration ; <nl> - import java . util . Arrays ; <nl> - <nl> - import javax . swing . JToolBar ; <nl> - import javax . swing . JToggleButton ; <nl> - import javax . swing . ScrollPaneLayout ; <nl> - import javax . swing . BorderFactory ; <nl> - import static java . io . File . listRoots ; <nl> - <nl> - import static javax . swing . WindowConstants . * ; <nl> - import static javax . swing . WindowConstants . * ; <nl> - import static java . io . File . createTempFile ; <nl> - import sun . * ; <nl> - <nl> - import java . awt . Component ; <nl> - import java . awt . Graphics2D ; <nl> - import java . awt . HeadlessException ; <nl> - import java . awt . Label ; <nl> - import java . util . Date ; <nl> - import java . util . Calendar ; <nl> - import java . util . BitSet ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . Checker ; <nl> - import com . puppycrawl . tools . checkstyle . CheckerTest ; <nl> - import com . puppycrawl . tools . checkstyle . Definitions ; <nl> - import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; <nl> - import com . puppycrawl . tools . checkstyle . PackageNamesLoader ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> - <nl> - / * * <nl> - * Test case for imports <nl> - * Here ' s an import used only by javadoc : { @ link Date } . <nl> - * @ author Oliver Burn <nl> - * @ author lkuehne <nl> - * @ author Michael Studman <nl> - * @ see Calendar Should avoid unused import for Calendar <nl> - * * / <nl> - class InputIllegalImportDefault <nl> - { <nl> - / * * ignore * * / <nl> - private Class mUse1 = Connection . class ; <nl> - / * * ignore * * / <nl> - private Class mUse2 = java . io . File . class ; <nl> - / * * ignore * * / <nl> - private Class mUse3 = null ; <nl> - / * * ignore * * / <nl> - private Class mUse4 = java . util . Enumeration [ ] . class ; <nl> - / * * usage of illegal import * * / <nl> - private String ftpClient = null ; <nl> - <nl> - / * * usage via static method , both normal and fully qualified * / <nl> - { <nl> - int [ ] x = { } ; <nl> - Arrays . sort ( x ) ; <nl> - Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; <nl> - File [ ] files = listRoots ( ) ; <nl> - } <nl> - <nl> - / * * usage of inner class as type * / <nl> - private JToolBar . Separator mSep = null ; <nl> - <nl> - / * * usage of inner class in Constructor * / <nl> - private Object mUse5 = new Object ( ) ; <nl> - <nl> - / * * usage of inner class in constructor , fully qualified * / <nl> - private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; <nl> - <nl> - / * * we use class name as member ' s name . <nl> - * also an inline JavaDoc - only import { @ link Vector linkText } * / <nl> - private int Component ; <nl> - <nl> - / * * <nl> - * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } <nl> - * / <nl> - public void Label ( ) { } <nl> - <nl> - / * * <nl> - * Renders to a { @ linkplain Graphics2D graphics context } . <nl> - * @ throws HeadlessException if no graphis environment can be found . <nl> - * @ exception HeadlessException if no graphis environment can be found . <nl> - * / <nl> - public void render ( ) { } <nl> - <nl> - / * * <nl> - * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . <nl> - * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . <nl> - * <nl> - * @ param param1 with a link { @ link TestClass6 } <nl> - * @ throws TestClass7 when broken <nl> - * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } <nl> - * / <nl> - public void aMethodWithManyLinks ( ) { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / javadoctype / InputJavadocTypeAllowedAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / javadoctype / InputJavadocTypeAllowedAnnotations . java <nl> deleted file mode 100644 <nl> index 57842a5 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / javadoctype / InputJavadocTypeAllowedAnnotations . java <nl> + + + / dev / null <nl> @ @ - 1 , 20 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . javadoc . javadoctype ; <nl> - <nl> - import javax . annotation . Generated ; <nl> - <nl> - @ ThisIsOk <nl> - class InputJavadocTypeAllowedAnnotations { <nl> - } <nl> - <nl> - @ com . puppycrawl . tools . checkstyle . checks . javadoc . javadoctype . ThisIsOk <nl> - class InputJavadocTypeAllowedAnnotationsFQN { <nl> - } <nl> - <nl> - @ Generated ( value = " some code generator " ) <nl> - class InputJavadocTypeAllowedAnnotationByDefault { <nl> - } <nl> - <nl> - / * * <nl> - * Annotation for unit tests . <nl> - * / <nl> - @ interface ThisIsOk { }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> index 9af22a9 . . 2cdac81 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { <nl> } <nl> <nl> private static List < RevCommit > getCommitsToCheck ( ) throws Exception { <nl> - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; <nl> - <nl> - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> List < RevCommit > commits ; <nl> - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> - } <nl> - else { <nl> - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { <nl> + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> + else { <nl> + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> } <nl> return commits ; <nl> } <nl> @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { <nl> <nl> private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { <nl> RevCommitsPair revCommitIteratorPair ; <nl> - try { <nl> + <nl> + try ( RevWalk revWalk = new RevWalk ( repo ) ) { <nl> Iterator < RevCommit > first ; <nl> Iterator < RevCommit > second ; <nl> - <nl> - RevWalk revWalk = new RevWalk ( repo ) ; <nl> - <nl> ObjectId headId = repo . resolve ( Constants . HEAD ) ; <nl> RevCommit headCommit = revWalk . parseCommit ( headId ) ; <nl> <nl> @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { <nl> RevCommit firstParent = headCommit . getParent ( 0 ) ; <nl> RevCommit secondParent = headCommit . getParent ( 1 ) ; <nl> <nl> - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + } <nl> } <nl> else { <nl> - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . call ( ) . iterator ( ) ; <nl> + } <nl> second = Collections . emptyIterator ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java 
 index d030d6b . . 8941da8 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java 
 @ @ - 6 , 7 + 6 , 6 @ @ import static com . puppycrawl . tools . checkstyle . utils . AnnotationUtil . getAnnotation 
 import com . puppycrawl . tools . checkstyle . checks . design . FinalClassCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . design . ThrowsCountCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . design . VisibilityModifierCheck ; 
 - import com . sun . accessibility . internal . resources . * ; 
 import java . util . Arrays ; 
 import java . util . BitSet ; 
 import java . util . Map ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java 
 index 421aef0 . . 515b944 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java 
 @ @ - 54 , 7 + 54 , 7 @ @ public class IllegalImportCheckTest extends AbstractModuleTestSupport { 
 " 23 : 1 : " + getCheckMessage ( MSG _ KEY , " java . io . File . listRoots " ) , 
 " 27 : 1 : " + getCheckMessage ( MSG _ KEY , " java . io . File . createTempFile " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputIllegalImportDefault . java " ) , expected ) ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputIllegalImportDefault . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 66 , 7 + 66 , 7 @ @ public class IllegalImportCheckTest extends AbstractModuleTestSupport { 
 " 15 : 1 : " + getCheckMessage ( MSG _ KEY , " sun . applet . * " ) , 
 " 28 : 1 : " + getCheckMessage ( MSG _ KEY , " sun . * " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputIllegalImportDefault . java " ) , expected ) ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputIllegalImportDefault . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 90 , 7 + 90 , 7 @ @ public class IllegalImportCheckTest extends AbstractModuleTestSupport { 
 " 15 : 1 : " + getCheckMessage ( MSG _ KEY , " sun . applet . * " ) , 
 " 28 : 1 : " + getCheckMessage ( MSG _ KEY , " sun . * " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputIllegalImportDefault . java " ) , expected ) ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputIllegalImportDefault . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 109 , 7 + 109 , 7 @ @ public class IllegalImportCheckTest extends AbstractModuleTestSupport { 
 " 35 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . Calendar " ) , 
 " 36 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . BitSet " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputIllegalImportDefault . java " ) , expected ) ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputIllegalImportDefault . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 125 , 7 + 125 , 7 @ @ public class IllegalImportCheckTest extends AbstractModuleTestSupport { 
 " 13 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . List " ) , 
 " 17 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . Arrays " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputIllegalImportDefault . java " ) , expected ) ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputIllegalImportDefault . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 135 , 20 + 135 , 22 @ @ public class IllegalImportCheckTest extends AbstractModuleTestSupport { 
 createModuleConfig ( IllegalImportCheck . class ) ; 
 checkConfig . addAttribute ( " illegalPkgs " , " java \ \ . util " ) ; 
 checkConfig . addAttribute ( " illegalClasses " , 
 - " ^ com \ \ . puppycrawl \ \ . tools \ \ . checkstyle \ \ . Checker . * " ) ; 
 + " ^ java \ \ . awt \ \ . . * " ) ; 
 checkConfig . addAttribute ( " regexp " , " true " ) ; 
 final String [ ] expected = { 
 " 12 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . List " ) , 
 " 13 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . List " ) , 
 " 16 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . Enumeration " ) , 
 " 17 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . Arrays " ) , 
 + " 30 : 1 : " + getCheckMessage ( MSG _ KEY , " java . awt . Component " ) , 
 + " 31 : 1 : " + getCheckMessage ( MSG _ KEY , " java . awt . Graphics2D " ) , 
 + " 32 : 1 : " + getCheckMessage ( MSG _ KEY , " java . awt . HeadlessException " ) , 
 + " 33 : 1 : " + getCheckMessage ( MSG _ KEY , " java . awt . Label " ) , 
 " 34 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . Date " ) , 
 " 35 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . Calendar " ) , 
 " 36 : 1 : " + getCheckMessage ( MSG _ KEY , " java . util . BitSet " ) , 
 - " 38 : 1 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . Checker " ) , 
 - " 39 : 1 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . CheckerTest " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputIllegalImportDefault . java " ) , expected ) ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputIllegalImportDefault . java " ) , expected ) ; 
 } 
 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java 
 index 1896cd4 . . cf71de6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java 
 @ @ - 402 , 11 + 402 , 11 @ @ public class JavadocTypeCheckTest extends AbstractModuleTestSupport { 
 createModuleConfig ( JavadocTypeCheck . class ) ; 
 
 final String [ ] expected = { 
 - " 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 - " 9 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + " 6 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + " 10 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 } ; 
 verify ( checkConfig , 
 - getPath ( " InputJavadocTypeAllowedAnnotations . java " ) , 
 + getNonCompilablePath ( " InputJavadocTypeAllowedAnnotations . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 419 , 12 + 419 , 12 @ @ public class JavadocTypeCheckTest extends AbstractModuleTestSupport { 
 " com . puppycrawl . tools . checkstyle . checks . javadoc . javadoctype . ThisIsOk " ) ; 
 
 final String [ ] expected = { 
 - " 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 - " 9 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 - " 13 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + " 6 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + " 10 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + " 14 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 } ; 
 verify ( checkConfig , 
 - getPath ( " InputJavadocTypeAllowedAnnotations . java " ) , 
 + getNonCompilablePath ( " InputJavadocTypeAllowedAnnotations . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 436 , 7 + 436 , 7 @ @ public class JavadocTypeCheckTest extends AbstractModuleTestSupport { 
 
 final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , 
 - getPath ( " InputJavadocTypeAllowedAnnotations . java " ) , 
 + getNonCompilablePath ( " InputJavadocTypeAllowedAnnotations . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 447 , 12 + 447 , 12 @ @ public class JavadocTypeCheckTest extends AbstractModuleTestSupport { 
 checkConfig . addAttribute ( " allowedAnnotations " , " Override " ) ; 
 
 final String [ ] expected = { 
 - " 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 - " 9 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 - " 13 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + " 6 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + " 10 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + " 14 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 } ; 
 verify ( checkConfig , 
 - getPath ( " InputJavadocTypeAllowedAnnotations . java " ) , 
 + getNonCompilablePath ( " InputJavadocTypeAllowedAnnotations . java " ) , 
 expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / illegalimport / InputIllegalImportDefault . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / illegalimport / InputIllegalImportDefault . java 
 new file mode 100644 
 index 0000000 . . 018e331 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / illegalimport / InputIllegalImportDefault . java 
 @ @ - 0 , 0 + 1 , 101 @ @ 
 + / / non - compiled with jdk10 : contains dropped packages 
 + 
 + 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . imports . illegalimport ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . imports . * ; 
 + 
 + import java . io . * ; 
 + import java . lang . * ; 
 + import java . sql . Connection ; 
 + import java . util . List ; 
 + import java . util . List ; 
 + import java . lang . ArithmeticException ; 
 + import sun . applet . * ; 
 + import java . util . Enumeration ; 
 + import java . util . Arrays ; 
 + 
 + import javax . swing . JToolBar ; 
 + import javax . swing . JToggleButton ; 
 + import javax . swing . ScrollPaneLayout ; 
 + import javax . swing . BorderFactory ; 
 + import static java . io . File . listRoots ; 
 + 
 + import static javax . swing . WindowConstants . * ; 
 + import static javax . swing . WindowConstants . * ; 
 + import static java . io . File . createTempFile ; 
 + import sun . * ; 
 + 
 + import java . awt . Component ; 
 + import java . awt . Graphics2D ; 
 + import java . awt . HeadlessException ; 
 + import java . awt . Label ; 
 + import java . util . Date ; 
 + import java . util . Calendar ; 
 + import java . util . BitSet ; 
 + 
 + / * * 
 + * Test case for imports 
 + * Here ' s an import used only by javadoc : { @ link Date } . 
 + * @ author Oliver Burn 
 + * @ author lkuehne 
 + * @ author Michael Studman 
 + * @ see Calendar Should avoid unused import for Calendar 
 + * * / 
 + class InputIllegalImportDefault 
 + { 
 + / * * ignore * * / 
 + private Class mUse1 = Connection . class ; 
 + / * * ignore * * / 
 + private Class mUse2 = java . io . File . class ; 
 + / * * ignore * * / 
 + private Class mUse3 = null ; 
 + / * * ignore * * / 
 + private Class mUse4 = java . util . Enumeration [ ] . class ; 
 + / * * usage of illegal import * * / 
 + private String ftpClient = null ; 
 + 
 + / * * usage via static method , both normal and fully qualified * / 
 + { 
 + int [ ] x = { } ; 
 + Arrays . sort ( x ) ; 
 + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; 
 + File [ ] files = listRoots ( ) ; 
 + } 
 + 
 + / * * usage of inner class as type * / 
 + private JToolBar . Separator mSep = null ; 
 + 
 + / * * usage of inner class in Constructor * / 
 + private Object mUse5 = new Object ( ) ; 
 + 
 + / * * usage of inner class in constructor , fully qualified * / 
 + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; 
 + 
 + / * * we use class name as member ' s name . 
 + * also an inline JavaDoc - only import { @ link Vector linkText } * / 
 + private int Component ; 
 + 
 + / * * 
 + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } 
 + * / 
 + public void Label ( ) { } 
 + 
 + / * * 
 + * Renders to a { @ linkplain Graphics2D graphics context } . 
 + * @ throws HeadlessException if no graphis environment can be found . 
 + * @ exception HeadlessException if no graphis environment can be found . 
 + * / 
 + public void render ( ) { } 
 + 
 + / * * 
 + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . 
 + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . 
 + * 
 + * @ param param1 with a link { @ link TestClass6 } 
 + * @ throws TestClass7 when broken 
 + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } 
 + * / 
 + public void aMethodWithManyLinks ( ) { } 
 + } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / javadoc / javadoctype / InputJavadocTypeAllowedAnnotations . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / javadoc / javadoctype / InputJavadocTypeAllowedAnnotations . java 
 new file mode 100644 
 index 0000000 . . 9f2f785 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / javadoc / javadoctype / InputJavadocTypeAllowedAnnotations . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + / / non - compiled with jkd11 : contains dropped packages 
 + package com . puppycrawl . tools . checkstyle . checks . javadoc . javadoctype ; 
 + 
 + import javax . annotation . Generated ; 
 + 
 + @ ThisIsOk 
 + class InputJavadocTypeAllowedAnnotations { 
 + } 
 + 
 + @ com . puppycrawl . tools . checkstyle . checks . javadoc . javadoctype . ThisIsOk 
 + class InputJavadocTypeAllowedAnnotationsFQN { 
 + } 
 + 
 + @ Generated ( value = " some code generator " ) 
 + class InputJavadocTypeAllowedAnnotationByDefault { 
 + } 
 + 
 + / * * 
 + * Annotation for unit tests . 
 + * / 
 + @ interface ThisIsOk { } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / illegalimport / InputIllegalImportDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / illegalimport / InputIllegalImportDefault . java 
 deleted file mode 100644 
 index 1d11f84 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / illegalimport / InputIllegalImportDefault . java 
 + + + / dev / null 
 @ @ - 1 , 109 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . imports . illegalimport ; 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . imports . * ; 
 - 
 - import java . io . * ; 
 - import java . lang . * ; 
 - import java . sql . Connection ; 
 - import java . util . List ; 
 - import java . util . List ; 
 - import java . lang . ArithmeticException ; 
 - import sun . applet . * ; 
 - import java . util . Enumeration ; 
 - import java . util . Arrays ; 
 - 
 - import javax . swing . JToolBar ; 
 - import javax . swing . JToggleButton ; 
 - import javax . swing . ScrollPaneLayout ; 
 - import javax . swing . BorderFactory ; 
 - import static java . io . File . listRoots ; 
 - 
 - import static javax . swing . WindowConstants . * ; 
 - import static javax . swing . WindowConstants . * ; 
 - import static java . io . File . createTempFile ; 
 - import sun . * ; 
 - 
 - import java . awt . Component ; 
 - import java . awt . Graphics2D ; 
 - import java . awt . HeadlessException ; 
 - import java . awt . Label ; 
 - import java . util . Date ; 
 - import java . util . Calendar ; 
 - import java . util . BitSet ; 
 - 
 - import com . puppycrawl . tools . checkstyle . Checker ; 
 - import com . puppycrawl . tools . checkstyle . CheckerTest ; 
 - import com . puppycrawl . tools . checkstyle . Definitions ; 
 - import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; 
 - import com . puppycrawl . tools . checkstyle . PackageNamesLoader ; 
 - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 - import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 - 
 - / * * 
 - * Test case for imports 
 - * Here ' s an import used only by javadoc : { @ link Date } . 
 - * @ author Oliver Burn 
 - * @ author lkuehne 
 - * @ author Michael Studman 
 - * @ see Calendar Should avoid unused import for Calendar 
 - * * / 
 - class InputIllegalImportDefault 
 - { 
 - / * * ignore * * / 
 - private Class mUse1 = Connection . class ; 
 - / * * ignore * * / 
 - private Class mUse2 = java . io . File . class ; 
 - / * * ignore * * / 
 - private Class mUse3 = null ; 
 - / * * ignore * * / 
 - private Class mUse4 = java . util . Enumeration [ ] . class ; 
 - / * * usage of illegal import * * / 
 - private String ftpClient = null ; 
 - 
 - / * * usage via static method , both normal and fully qualified * / 
 - { 
 - int [ ] x = { } ; 
 - Arrays . sort ( x ) ; 
 - Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; 
 - File [ ] files = listRoots ( ) ; 
 - } 
 - 
 - / * * usage of inner class as type * / 
 - private JToolBar . Separator mSep = null ; 
 - 
 - / * * usage of inner class in Constructor * / 
 - private Object mUse5 = new Object ( ) ; 
 - 
 - / * * usage of inner class in constructor , fully qualified * / 
 - private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; 
 - 
 - / * * we use class name as member ' s name . 
 - * also an inline JavaDoc - only import { @ link Vector linkText } * / 
 - private int Component ; 
 - 
 - / * * 
 - * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } 
 - * / 
 - public void Label ( ) { } 
 - 
 - / * * 
 - * Renders to a { @ linkplain Graphics2D graphics context } . 
 - * @ throws HeadlessException if no graphis environment can be found . 
 - * @ exception HeadlessException if no graphis environment can be found . 
 - * / 
 - public void render ( ) { } 
 - 
 - / * * 
 - * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . 
 - * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . 
 - * 
 - * @ param param1 with a link { @ link TestClass6 } 
 - * @ throws TestClass7 when broken 
 - * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } 
 - * / 
 - public void aMethodWithManyLinks ( ) { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / javadoctype / InputJavadocTypeAllowedAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / javadoctype / InputJavadocTypeAllowedAnnotations . java 
 deleted file mode 100644 
 index 57842a5 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / javadoctype / InputJavadocTypeAllowedAnnotations . java 
 + + + / dev / null 
 @ @ - 1 , 20 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . javadoc . javadoctype ; 
 - 
 - import javax . annotation . Generated ; 
 - 
 - @ ThisIsOk 
 - class InputJavadocTypeAllowedAnnotations { 
 - } 
 - 
 - @ com . puppycrawl . tools . checkstyle . checks . javadoc . javadoctype . ThisIsOk 
 - class InputJavadocTypeAllowedAnnotationsFQN { 
 - } 
 - 
 - @ Generated ( value = " some code generator " ) 
 - class InputJavadocTypeAllowedAnnotationByDefault { 
 - } 
 - 
 - / * * 
 - * Annotation for unit tests . 
 - * / 
 - @ interface ThisIsOk { }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 index 9af22a9 . . 2cdac81 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { 
 } 
 
 private static List < RevCommit > getCommitsToCheck ( ) throws Exception { 
 - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; 
 - 
 - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 List < RevCommit > commits ; 
 - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 - } 
 - else { 
 - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { 
 + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 + else { 
 + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 } 
 return commits ; 
 } 
 @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { 
 
 private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { 
 RevCommitsPair revCommitIteratorPair ; 
 - try { 
 + 
 + try ( RevWalk revWalk = new RevWalk ( repo ) ) { 
 Iterator < RevCommit > first ; 
 Iterator < RevCommit > second ; 
 - 
 - RevWalk revWalk = new RevWalk ( repo ) ; 
 - 
 ObjectId headId = repo . resolve ( Constants . HEAD ) ; 
 RevCommit headCommit = revWalk . parseCommit ( headId ) ; 
 
 @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { 
 RevCommit firstParent = headCommit . getParent ( 0 ) ; 
 RevCommit secondParent = headCommit . getParent ( 1 ) ; 
 
 - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + } 
 } 
 else { 
 - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . call ( ) . iterator ( ) ; 
 + } 
 second = Collections . emptyIterator ( ) ; 
 } 

