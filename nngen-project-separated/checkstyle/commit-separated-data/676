BLEU SCORE: 0.04515183688171632

TEST MSG: Issue # 4694 : UniquePropertiesCheck . getLineNumber should be private
GENERATED MSG: Copy collections and arrays before assigning to fields . # 1555

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java <nl> index 90675ae . . 85f303f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java <nl> @ @ - 101 , 7 + 101 , 7 @ @ public class UniquePropertiesCheck extends AbstractFileSetCheck { <nl> * @ return line number of first occurrence . If no key found in properties <nl> * file , 0 is returned <nl> * / <nl> - protected static int getLineNumber ( FileText fileText , String keyName ) { <nl> + private static int getLineNumber ( FileText fileText , String keyName ) { <nl> final Pattern keyPattern = getKeyPattern ( keyName ) ; <nl> int lineNumber = 1 ; <nl> final Matcher matcher = keyPattern . matcher ( " " ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> index 42a27d9 . . 333a998 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . SortedSet ; <nl> <nl> + import org . junit . Assert ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 96 , 15 + 97 , 19 @ @ public class UniquePropertiesCheckTest extends BaseFileSetCheckTestSupport { <nl> * method return value . <nl> * / <nl> @ Test <nl> - public void testNotFoundKey ( ) { <nl> + public void testNotFoundKey ( ) throws Exception { <nl> final List < String > testStrings = new ArrayList < > ( 3 ) ; <nl> + final Method getLineNumber = UniquePropertiesCheck . class . getDeclaredMethod ( <nl> + " getLineNumber " , FileText . class , String . class ) ; <nl> + Assert . assertNotNull ( getLineNumber ) ; <nl> + getLineNumber . setAccessible ( true ) ; <nl> testStrings . add ( " " ) ; <nl> testStrings . add ( " 0 = 0 " ) ; <nl> testStrings . add ( " 445 " ) ; <nl> final FileText fileText = new FileText ( new File ( " some . properties " ) , testStrings ) ; <nl> - final int lineNumber = <nl> - UniquePropertiesCheck . getLineNumber ( fileText , <nl> - " some key " ) ; <nl> + final Object lineNumber = getLineNumber . invoke ( UniquePropertiesCheck . class , <nl> + fileText , " some key " ) ; <nl> + Assert . assertNotNull ( lineNumber ) ; <nl> assertEquals ( " Invalid line number " , 0 , lineNumber ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index fb1fb2c . . d17344d 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1078 , 7 + 1078 , 7 @ @ <nl> < regexes > <nl> < regex > < pattern > . * . Checker < / pattern > < branchRate > 79 < / branchRate > < lineRate > 84 < / lineRate > < / regex > <nl> < regex > < pattern > . * . PackageNamesLoader < / pattern > < branchRate > 78 < / branchRate > < lineRate > 72 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . TreeWalker < / pattern > < branchRate > 94 < / branchRate > < lineRate > 92 < / lineRate > < / regex > <nl> + < regex > < pattern > . * . TreeWalker < / pattern > < branchRate > 95 < / branchRate > < lineRate > 94 < / lineRate > < / regex > <nl> <nl> < regex > < pattern > . * . checks . AbstractOptionCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 80 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . AbstractTypeAwareCheck < / pattern > < branchRate > 87 < / branchRate > < lineRate > 84 < / lineRate > < / regex > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index fb7c418 . . 89e8b3b 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 127 , 17 + 127 , 14 @ @ public final class TreeWalker <nl> this . tabWidth = tabWidth ; <nl> } <nl> <nl> - / * * @ param fileName the cache file * / <nl> - public void setCacheFile ( String fileName ) { <nl> + / * * @ param fileName the cache file <nl> + * @ throws IOException if there are some problems with file loading <nl> + * / <nl> + public void setCacheFile ( String fileName ) throws IOException { <nl> final Configuration configuration = getConfiguration ( ) ; <nl> cache = new PropertyCacheFile ( configuration , fileName ) ; <nl> <nl> - try { <nl> - cache . load ( ) ; <nl> - } <nl> - catch ( IOException e ) { <nl> - throw new IllegalStateException ( " cache file load is failed " , e ) ; <nl> - } <nl> + cache . load ( ) ; <nl> } <nl> <nl> / * * @ param classLoader class loader to resolve classes with . * /

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java 
 index 90675ae . . 85f303f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java 
 @ @ - 101 , 7 + 101 , 7 @ @ public class UniquePropertiesCheck extends AbstractFileSetCheck { 
 * @ return line number of first occurrence . If no key found in properties 
 * file , 0 is returned 
 * / 
 - protected static int getLineNumber ( FileText fileText , String keyName ) { 
 + private static int getLineNumber ( FileText fileText , String keyName ) { 
 final Pattern keyPattern = getKeyPattern ( keyName ) ; 
 int lineNumber = 1 ; 
 final Matcher matcher = keyPattern . matcher ( " " ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 index 42a27d9 . . 333a998 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . SortedSet ; 
 
 + import org . junit . Assert ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 
 @ @ - 96 , 15 + 97 , 19 @ @ public class UniquePropertiesCheckTest extends BaseFileSetCheckTestSupport { 
 * method return value . 
 * / 
 @ Test 
 - public void testNotFoundKey ( ) { 
 + public void testNotFoundKey ( ) throws Exception { 
 final List < String > testStrings = new ArrayList < > ( 3 ) ; 
 + final Method getLineNumber = UniquePropertiesCheck . class . getDeclaredMethod ( 
 + " getLineNumber " , FileText . class , String . class ) ; 
 + Assert . assertNotNull ( getLineNumber ) ; 
 + getLineNumber . setAccessible ( true ) ; 
 testStrings . add ( " " ) ; 
 testStrings . add ( " 0 = 0 " ) ; 
 testStrings . add ( " 445 " ) ; 
 final FileText fileText = new FileText ( new File ( " some . properties " ) , testStrings ) ; 
 - final int lineNumber = 
 - UniquePropertiesCheck . getLineNumber ( fileText , 
 - " some key " ) ; 
 + final Object lineNumber = getLineNumber . invoke ( UniquePropertiesCheck . class , 
 + fileText , " some key " ) ; 
 + Assert . assertNotNull ( lineNumber ) ; 
 assertEquals ( " Invalid line number " , 0 , lineNumber ) ; 
 } 


NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index fb1fb2c . . d17344d 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1078 , 7 + 1078 , 7 @ @ 
 < regexes > 
 < regex > < pattern > . * . Checker < / pattern > < branchRate > 79 < / branchRate > < lineRate > 84 < / lineRate > < / regex > 
 < regex > < pattern > . * . PackageNamesLoader < / pattern > < branchRate > 78 < / branchRate > < lineRate > 72 < / lineRate > < / regex > 
 - < regex > < pattern > . * . TreeWalker < / pattern > < branchRate > 94 < / branchRate > < lineRate > 92 < / lineRate > < / regex > 
 + < regex > < pattern > . * . TreeWalker < / pattern > < branchRate > 95 < / branchRate > < lineRate > 94 < / lineRate > < / regex > 
 
 < regex > < pattern > . * . checks . AbstractOptionCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 80 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . AbstractTypeAwareCheck < / pattern > < branchRate > 87 < / branchRate > < lineRate > 84 < / lineRate > < / regex > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index fb7c418 . . 89e8b3b 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 127 , 17 + 127 , 14 @ @ public final class TreeWalker 
 this . tabWidth = tabWidth ; 
 } 
 
 - / * * @ param fileName the cache file * / 
 - public void setCacheFile ( String fileName ) { 
 + / * * @ param fileName the cache file 
 + * @ throws IOException if there are some problems with file loading 
 + * / 
 + public void setCacheFile ( String fileName ) throws IOException { 
 final Configuration configuration = getConfiguration ( ) ; 
 cache = new PropertyCacheFile ( configuration , fileName ) ; 
 
 - try { 
 - cache . load ( ) ; 
 - } 
 - catch ( IOException e ) { 
 - throw new IllegalStateException ( " cache file load is failed " , e ) ; 
 - } 
 + cache . load ( ) ; 
 } 
 
 / * * @ param classLoader class loader to resolve classes with . * /
