BLEU SCORE: 0.0429039557970495

TEST MSG: Issue # 6586 : aligned javadoc / xdoc for ReturnCount
GENERATED MSG: MagicNumberCheck : javadoc and xdoc was updated to describe all options , examples were added . Issue # 148

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java <nl> index 31e8c49 . . a724dd7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java <nl> @ @ - 46 , 10 + 46 , 92 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * of 0 . <nl> * < / p > <nl> * < p > <nl> - * Rationale : Too many return points can be indication that code is <nl> + * Rationale : Too many return points can mean that code is <nl> * attempting to do too much or may be difficult to understand . <nl> * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code max } - Specify maximum allowed number of return statements <nl> + * in non - void methods / lambdas . <nl> + * Default value is { @ code 2 } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code maxForVoid } - Specify maximum allowed number of return statements <nl> + * in void methods / constructors / lambdas . <nl> + * Default value is { @ code 1 } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code format } - Specify method names to ignore . <nl> + * Default value is { @ code " ^ equals $ " } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code tokens } - tokens to check Default value is : <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # CTOR _ DEF " > <nl> + * CTOR _ DEF < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > <nl> + * METHOD _ DEF < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LAMBDA " > <nl> + * LAMBDA < / a > . <nl> + * < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * To configure the check so that it doesn ' t allow more than three return statements per method <nl> + * ( ignoring the { @ code equals ( ) } method ) : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; <nl> + * & lt ; property name = & quot ; max & quot ; value = & quot ; 3 & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check so that it doesn ' t allow any return statements per void method : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; <nl> + * & lt ; property name = & quot ; maxForVoid & quot ; value = & quot ; 0 & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check so that it doesn ' t allow more than 2 return statements per method <nl> + * ( ignoring the { @ code equals ( ) } method ) and more than 1 return statements per void method : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; <nl> + * & lt ; property name = & quot ; max & quot ; value = & quot ; 2 & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; maxForVoid & quot ; value = & quot ; 1 & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check so that it doesn ' t allow more than three <nl> + * return statements per method for all methods : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; <nl> + * & lt ; property name = & quot ; max & quot ; value = & quot ; 3 & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; format & quot ; value = & quot ; ^ $ & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check so that it doesn ' t allow any return statements in constructors , <nl> + * more than one return statement in all lambda expressions and more than two return <nl> + * statements in methods : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; <nl> + * & lt ; property name = & quot ; max & quot ; value = & quot ; 0 & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; CTOR _ DEF & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; <nl> + * & lt ; property name = & quot ; max & quot ; value = & quot ; 1 & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; LAMBDA & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; <nl> + * & lt ; property name = & quot ; max & quot ; value = & quot ; 2 & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; METHOD _ DEF & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> * <nl> + * @ since 3 . 2 <nl> * / <nl> @ FileStatefulCheck <nl> public final class ReturnCountCheck extends AbstractCheck { <nl> @ @ - 68 , 12 + 150 , 12 @ @ public final class ReturnCountCheck extends AbstractCheck { <nl> / * * Stack of method contexts . * / <nl> private final Deque < Context > contextStack = new ArrayDeque < > ( ) ; <nl> <nl> - / * * The regexp to match against . * / <nl> + / * * Specify method names to ignore . * / <nl> private Pattern format = Pattern . compile ( " ^ equals $ " ) ; <nl> <nl> - / * * Maximum allowed number of return statements . * / <nl> + / * * Specify maximum allowed number of return statements in non - void methods / lambdas . * / <nl> private int max = 2 ; <nl> - / * * Maximum allowed number of return statements for void methods . * / <nl> + / * * Specify maximum allowed number of return statements in void methods / constructors / lambdas . * / <nl> private int maxForVoid = 1 ; <nl> / * * Current method context . * / <nl> private Context context ; <nl> @ @ - 104 , 7 + 186 , 7 @ @ public final class ReturnCountCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Set the format for the specified regular expression . <nl> + * Setter to specify method names to ignore . <nl> * @ param pattern a pattern . <nl> * / <nl> public void setFormat ( Pattern pattern ) { <nl> @ @ - 112 , 7 + 194 , 8 @ @ public final class ReturnCountCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Setter for max property . <nl> + * Setter to specify maximum allowed number of return statements <nl> + * in non - void methods / lambdas . <nl> * @ param max maximum allowed number of return statements . <nl> * / <nl> public void setMax ( int max ) { <nl> @ @ - 120 , 7 + 203 , 8 @ @ public final class ReturnCountCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Setter for maxForVoid property . <nl> + * Setter to specify maximum allowed number of return statements <nl> + * in void methods / constructors / lambdas . <nl> * @ param maxForVoid maximum allowed number of return statements for void methods . <nl> * / <nl> public void setMaxForVoid ( int maxForVoid ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 4fe5093 . . cfe8354 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 131 , 6 + 131 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " ParameterAssignment " , <nl> " ParameterName " , <nl> " RequireThis " , <nl> + " ReturnCount " , <nl> " RightCurly " , <nl> " SimplifyBooleanExpression " , <nl> " SimplifyBooleanReturn " , <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 2e19502 . . a029910 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 4123 , 8 + 4123 , 8 @ @ class C { <nl> < / section > <nl> <nl> < section name = " ReturnCount " > <nl> + < p > Since Checkstyle 3 . 2 < / p > <nl> < subsection name = " Description " id = " ReturnCount _ Description " > <nl> - < p > Since Checkstyle 3 . 2 < / p > <nl> < p > <nl> Restricts the number of return statements in methods , constructors and lambda expressions <nl> ( 2 by default ) . Ignores specified methods ( < code > equals ( ) < / code > by default ) . <nl> @ @ - 4160 , 22 + 4160 , 24 @ @ class C { <nl> < / tr > <nl> < tr > <nl> < td > max < / td > <nl> - < td > maximum allowed number of return statements in non - void methods / lambdas < / td > <nl> + < td > <nl> + Specify maximum allowed number of return statements in non - void methods / lambdas . <nl> + < / td > <nl> < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > <nl> < td > < code > 2 < / code > < / td > <nl> < td > 3 . 2 < / td > <nl> < / tr > <nl> < tr > <nl> < td > maxForVoid < / td > <nl> - < td > maximum allowed number of return statements in void <nl> - methods / constructors / lambdas < / td > <nl> + < td > Specify maximum allowed number of return statements in void <nl> + methods / constructors / lambdas . < / td > <nl> < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > <nl> < td > < code > 1 < / code > < / td > <nl> < td > 6 . 19 < / td > <nl> < / tr > <nl> < tr > <nl> < td > format < / td > <nl> - < td > method names to ignore < / td > <nl> + < td > Specify method names to ignore . < / td > <nl> < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td > <nl> < td > < code > " ^ equals $ " < / code > < / td > <nl> < td > 3 . 4 < / td >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FastStack . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FastStack . java <nl> index e0bd444 . . a152ef4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FastStack . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FastStack . java <nl> @ @ - 27 , 7 + 27 , 9 @ @ import java . util . List ; <nl> * { @ link java . util . Vector } which is < tt > synchronized < / tt > . <nl> * @ author oliverb <nl> * @ param < E > The type to hold . <nl> + * @ deprecated Use { @ link java . util . ArrayDeque } instead <nl> * / <nl> + @ Deprecated <nl> public class FastStack < E > implements Iterable < E > <nl> { <nl> / * * Hold the entries in the stack . * /

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java 
 index 31e8c49 . . a724dd7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java 
 @ @ - 46 , 10 + 46 , 92 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * of 0 . 
 * < / p > 
 * < p > 
 - * Rationale : Too many return points can be indication that code is 
 + * Rationale : Too many return points can mean that code is 
 * attempting to do too much or may be difficult to understand . 
 * < / p > 
 + * < ul > 
 + * < li > 
 + * Property { @ code max } - Specify maximum allowed number of return statements 
 + * in non - void methods / lambdas . 
 + * Default value is { @ code 2 } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code maxForVoid } - Specify maximum allowed number of return statements 
 + * in void methods / constructors / lambdas . 
 + * Default value is { @ code 1 } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code format } - Specify method names to ignore . 
 + * Default value is { @ code " ^ equals $ " } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code tokens } - tokens to check Default value is : 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # CTOR _ DEF " > 
 + * CTOR _ DEF < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > 
 + * METHOD _ DEF < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LAMBDA " > 
 + * LAMBDA < / a > . 
 + * < / li > 
 + * < / ul > 
 + * < p > 
 + * To configure the check so that it doesn ' t allow more than three return statements per method 
 + * ( ignoring the { @ code equals ( ) } method ) : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; 
 + * & lt ; property name = & quot ; max & quot ; value = & quot ; 3 & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check so that it doesn ' t allow any return statements per void method : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; 
 + * & lt ; property name = & quot ; maxForVoid & quot ; value = & quot ; 0 & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check so that it doesn ' t allow more than 2 return statements per method 
 + * ( ignoring the { @ code equals ( ) } method ) and more than 1 return statements per void method : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; 
 + * & lt ; property name = & quot ; max & quot ; value = & quot ; 2 & quot ; / & gt ; 
 + * & lt ; property name = & quot ; maxForVoid & quot ; value = & quot ; 1 & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check so that it doesn ' t allow more than three 
 + * return statements per method for all methods : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; 
 + * & lt ; property name = & quot ; max & quot ; value = & quot ; 3 & quot ; / & gt ; 
 + * & lt ; property name = & quot ; format & quot ; value = & quot ; ^ $ & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check so that it doesn ' t allow any return statements in constructors , 
 + * more than one return statement in all lambda expressions and more than two return 
 + * statements in methods : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; 
 + * & lt ; property name = & quot ; max & quot ; value = & quot ; 0 & quot ; / & gt ; 
 + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; CTOR _ DEF & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; 
 + * & lt ; property name = & quot ; max & quot ; value = & quot ; 1 & quot ; / & gt ; 
 + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; LAMBDA & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * & lt ; module name = & quot ; ReturnCount & quot ; & gt ; 
 + * & lt ; property name = & quot ; max & quot ; value = & quot ; 2 & quot ; / & gt ; 
 + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; METHOD _ DEF & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 * 
 + * @ since 3 . 2 
 * / 
 @ FileStatefulCheck 
 public final class ReturnCountCheck extends AbstractCheck { 
 @ @ - 68 , 12 + 150 , 12 @ @ public final class ReturnCountCheck extends AbstractCheck { 
 / * * Stack of method contexts . * / 
 private final Deque < Context > contextStack = new ArrayDeque < > ( ) ; 
 
 - / * * The regexp to match against . * / 
 + / * * Specify method names to ignore . * / 
 private Pattern format = Pattern . compile ( " ^ equals $ " ) ; 
 
 - / * * Maximum allowed number of return statements . * / 
 + / * * Specify maximum allowed number of return statements in non - void methods / lambdas . * / 
 private int max = 2 ; 
 - / * * Maximum allowed number of return statements for void methods . * / 
 + / * * Specify maximum allowed number of return statements in void methods / constructors / lambdas . * / 
 private int maxForVoid = 1 ; 
 / * * Current method context . * / 
 private Context context ; 
 @ @ - 104 , 7 + 186 , 7 @ @ public final class ReturnCountCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Set the format for the specified regular expression . 
 + * Setter to specify method names to ignore . 
 * @ param pattern a pattern . 
 * / 
 public void setFormat ( Pattern pattern ) { 
 @ @ - 112 , 7 + 194 , 8 @ @ public final class ReturnCountCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Setter for max property . 
 + * Setter to specify maximum allowed number of return statements 
 + * in non - void methods / lambdas . 
 * @ param max maximum allowed number of return statements . 
 * / 
 public void setMax ( int max ) { 
 @ @ - 120 , 7 + 203 , 8 @ @ public final class ReturnCountCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Setter for maxForVoid property . 
 + * Setter to specify maximum allowed number of return statements 
 + * in void methods / constructors / lambdas . 
 * @ param maxForVoid maximum allowed number of return statements for void methods . 
 * / 
 public void setMaxForVoid ( int maxForVoid ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 4fe5093 . . cfe8354 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 131 , 6 + 131 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " ParameterAssignment " , 
 " ParameterName " , 
 " RequireThis " , 
 + " ReturnCount " , 
 " RightCurly " , 
 " SimplifyBooleanExpression " , 
 " SimplifyBooleanReturn " , 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 2e19502 . . a029910 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 4123 , 8 + 4123 , 8 @ @ class C { 
 < / section > 
 
 < section name = " ReturnCount " > 
 + < p > Since Checkstyle 3 . 2 < / p > 
 < subsection name = " Description " id = " ReturnCount _ Description " > 
 - < p > Since Checkstyle 3 . 2 < / p > 
 < p > 
 Restricts the number of return statements in methods , constructors and lambda expressions 
 ( 2 by default ) . Ignores specified methods ( < code > equals ( ) < / code > by default ) . 
 @ @ - 4160 , 22 + 4160 , 24 @ @ class C { 
 < / tr > 
 < tr > 
 < td > max < / td > 
 - < td > maximum allowed number of return statements in non - void methods / lambdas < / td > 
 + < td > 
 + Specify maximum allowed number of return statements in non - void methods / lambdas . 
 + < / td > 
 < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > 
 < td > < code > 2 < / code > < / td > 
 < td > 3 . 2 < / td > 
 < / tr > 
 < tr > 
 < td > maxForVoid < / td > 
 - < td > maximum allowed number of return statements in void 
 - methods / constructors / lambdas < / td > 
 + < td > Specify maximum allowed number of return statements in void 
 + methods / constructors / lambdas . < / td > 
 < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > 
 < td > < code > 1 < / code > < / td > 
 < td > 6 . 19 < / td > 
 < / tr > 
 < tr > 
 < td > format < / td > 
 - < td > method names to ignore < / td > 
 + < td > Specify method names to ignore . < / td > 
 < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td > 
 < td > < code > " ^ equals $ " < / code > < / td > 
 < td > 3 . 4 < / td >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FastStack . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FastStack . java 
 index e0bd444 . . a152ef4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FastStack . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FastStack . java 
 @ @ - 27 , 7 + 27 , 9 @ @ import java . util . List ; 
 * { @ link java . util . Vector } which is < tt > synchronized < / tt > . 
 * @ author oliverb 
 * @ param < E > The type to hold . 
 + * @ deprecated Use { @ link java . util . ArrayDeque } instead 
 * / 
 + @ Deprecated 
 public class FastStack < E > implements Iterable < E > 
 { 
 / * * Hold the entries in the stack . * /
