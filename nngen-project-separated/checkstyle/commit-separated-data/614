BLEU SCORE: 0.08171014300726602

TEST MSG: Issue # 4639 : added support for lambdas in UnnecessaryParentheses
GENERATED MSG: Issue # 3437 : PackageDeclaration should give option for directory name mismatch

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> index a4ef1e7 . . e390065 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> @ @ - 89 , 6 + 89 , 12 @ @ public class UnnecessaryParenthesesCheck extends AbstractCheck { <nl> * / <nl> public static final String MSG _ RETURN = " unnecessary . paren . return " ; <nl> <nl> + / * * <nl> + * A key is pointing to the warning message text in " messages . properties " <nl> + * file . <nl> + * / <nl> + public static final String MSG _ LAMBDA = " unnecessary . paren . lambda " ; <nl> + <nl> / * * The maximum string length before we chop the string . * / <nl> private static final int MAX _ QUOTED _ LENGTH = 25 ; <nl> <nl> @ @ - 153 , 6 + 159 , 7 @ @ public class UnnecessaryParenthesesCheck extends AbstractCheck { <nl> TokenTypes . SL _ ASSIGN , <nl> TokenTypes . SR _ ASSIGN , <nl> TokenTypes . STAR _ ASSIGN , <nl> + TokenTypes . LAMBDA , <nl> } ; <nl> } <nl> <nl> @ @ - 181 , 6 + 188 , 7 @ @ public class UnnecessaryParenthesesCheck extends AbstractCheck { <nl> TokenTypes . SL _ ASSIGN , <nl> TokenTypes . SR _ ASSIGN , <nl> TokenTypes . STAR _ ASSIGN , <nl> + TokenTypes . LAMBDA , <nl> } ; <nl> } <nl> <nl> @ @ - 190 , 12 + 198 , 16 @ @ public class UnnecessaryParenthesesCheck extends AbstractCheck { <nl> return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> } <nl> <nl> + / / - @ cs [ CyclomaticComplexity ] All logs should be in visit token . <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> final int type = ast . getType ( ) ; <nl> final DetailAST parent = ast . getParent ( ) ; <nl> <nl> - if ( type ! = TokenTypes . ASSIGN <nl> + if ( type = = TokenTypes . LAMBDA & & isLambdaSingleParameterSurrounded ( ast ) ) { <nl> + log ( ast , MSG _ LAMBDA , ast . getText ( ) ) ; <nl> + } <nl> + else if ( type ! = TokenTypes . ASSIGN <nl> | | parent . getType ( ) ! = TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) { <nl> <nl> final boolean surrounded = isSurrounded ( ast ) ; <nl> @ @ - 292 , 6 + 304 , 22 @ @ public class UnnecessaryParenthesesCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> + * Tests if the given lambda node has a single parameter , no defined type , and is surrounded <nl> + * by parentheses . <nl> + * @ param ast a { @ code DetailAST } whose type is <nl> + * { @ code TokenTypes . LAMBDA } . <nl> + * @ return { @ code true } if the lambda has a single parameter , no defined type , and is <nl> + * surrounded by parentheses . <nl> + * / <nl> + private static boolean isLambdaSingleParameterSurrounded ( DetailAST ast ) { <nl> + final DetailAST firstChild = ast . getFirstChild ( ) ; <nl> + return firstChild . getType ( ) = = TokenTypes . LPAREN <nl> + & & firstChild . getNextSibling ( ) . getChildCount ( TokenTypes . PARAMETER _ DEF ) = = 1 <nl> + & & firstChild . getNextSibling ( ) . getFirstChild ( ) . findFirstToken ( TokenTypes . TYPE ) <nl> + . getChildCount ( ) = = 0 ; <nl> + } <nl> + <nl> + / * * <nl> * Check if the given token type can be found in an array of token types . <nl> * @ param type the token type . <nl> * @ param tokens an array of token types to search . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> index 0d49225 . . 64b56e1 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = Literal Strings should be compared using equals ( ) , not ' <nl> unnecessary . paren . assign = Unnecessary parentheses around assignment right - hand side . <nl> unnecessary . paren . expr = Unnecessary parentheses around expression . <nl> unnecessary . paren . ident = Unnecessary parentheses around identifier ' ' { 0 } ' ' . <nl> + unnecessary . paren . lambda = Unnecessary parentheses around lambda value . <nl> unnecessary . paren . literal = Unnecessary parentheses around literal ' ' { 0 } ' ' . <nl> unnecessary . paren . return = Unnecessary parentheses around return value . <nl> unnecessary . paren . string = Unnecessary parentheses around string { 0 } . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> index 1406c39 . . bb1308e 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = Der Vergleich von String - Literalen sollte mit equals ( ) e <nl> unnecessary . paren . assign = Ü berfl ü ssige Klammern um die rechte Seite der Zuweisung . <nl> unnecessary . paren . expr = Ü berfl ü ssige Klammern um den Ausdruck . <nl> unnecessary . paren . ident = Ü berfl ü ssige Klammern um den Bezeichner ' ' { 0 } ' ' . <nl> + unnecessary . paren . lambda = Ü berfl ü ssige Klammern um Lambdawert . <nl> unnecessary . paren . literal = Ü berfl ü ssige Klammern um das Literal ' ' { 0 } ' ' . <nl> unnecessary . paren . return = Ü berfl ü ssige Klammern um den R ü ckgabewert . <nl> unnecessary . paren . string = Ü berfl ü ssige Klammern um den String ' ' { 0 } ' ' . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties <nl> index fda7e57 . . 1a97e00 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties <nl> @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = Las cadenas literales deben compararse usando equals ( ) , <nl> unnecessary . paren . assign = Par é ntesis innecesarios alrededor de la parte derecha de una asignaci ó n . <nl> unnecessary . paren . expr = Par é ntesis innecesarios alrededor de la expresi ó n . <nl> unnecessary . paren . ident = Par é ntesis innecesarios alrededor del identificador ' ' { 0 } ' ' . <nl> + unnecessary . paren . lambda = Par é ntesis innecesarios alrededor del valor lambda . <nl> unnecessary . paren . literal = Par é ntesis innecesarios alrededor del literal ' ' { 0 } ' ' . <nl> unnecessary . paren . return = Par é ntesis innecesarios alrededor del valor de retorno . <nl> unnecessary . paren . string = Par é ntesis innecesarios alrededor de la cadena { 0 } . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties <nl> index e897e61 . . b28e231 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties <nl> @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = Kirjaimellinen Strings pit ä isi verrata k ä ytt ä m ä ll ä <nl> unnecessary . paren . assign = Tarpeettomia sulkuja noin teht ä v ä n oikealla puolella . <nl> unnecessary . paren . expr = Tarpeettomia sulkuja noin ilme . <nl> unnecessary . paren . ident = Tarpeettomia sulkuja noin tunniste ' ' { 0 } ' ' . <nl> + unnecessary . paren . lambda = Tarpeettomat sulkeet lambda - arvon ymp ä rill ä . <nl> unnecessary . paren . literal = Tarpeettomia sulkuja noin kirjaimellisesti ' ' { 0 } ' ' . <nl> unnecessary . paren . return = Tarpeettomia sulkuja noin paluuarvo . <nl> unnecessary . paren . string = Tarpeettomia sulkuja noin merkkijono { 0 } . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties <nl> index b9cba42 . . 7ae8de9 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties <nl> @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = Les chaines de caract è res litt é rales devraient ê tre c <nl> unnecessary . paren . assign = Parenth è ses inutiles autour la partie droite de l ' ' affectation . <nl> unnecessary . paren . expr = Parenth è ses inutiles autour de l ' ' expression . <nl> unnecessary . paren . ident = Parenth è ses inutiles autour de l ' ' identifiant ' ' { 0 } ' ' . <nl> + unnecessary . paren . lambda = Parenth è ses inutiles autour de la valeur lambda . <nl> unnecessary . paren . literal = Parenth è ses inutiles autour de la cha î ne litt é rale ' ' { 0 } ' ' . <nl> unnecessary . paren . return = Parenth è ses inutiles autour de la valeur de retour . <nl> unnecessary . paren . string = Parenth è ses inutiles autour de la cha î ne { 0 } . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties <nl> index 3b56d0e . . 98adfa1 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties <nl> @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = リ テ ラ ル の 文 字 列 は ' ' { 0 } ' ' で は な く 、 equa <nl> unnecessary . paren . assign = 代 入 式 の 右 辺 に 不 要 な 括 弧 が あ り ま す 。 <nl> unnecessary . paren . expr = 式 の 前 後 に 不 要 な 括 弧 が あ り ま す 。 <nl> unnecessary . paren . ident = 識 別 子 ' ' { 0 } ' ' の 前 後 に 不 要 な 括 弧 が あ り ま す 。 <nl> + unnecessary . paren . lambda = ラ ム ダ 値 の 周 り の 不 必 要 な カ ッ コ 。 <nl> unnecessary . paren . literal = リ テ ラ ル ' ' { 0 } ' ' の 前 後 に 不 要 な 括 弧 が あ り ま す 。 <nl> unnecessary . paren . return = 戻 り 値 の 前 後 に 不 要 な 括 弧 が あ り ま す 。 <nl> unnecessary . paren . string = 文 字 列 { 0 } の 前 後 に 不 要 な 括 弧 が あ り ま す 。 <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties <nl> index e93354c . . 29ac4ab 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties <nl> @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = \ " Strings \ " literais devem ser comparadas com equals ( ) , <nl> unnecessary . paren . assign = Par ê nteses desnecess á rios ao redor do lado direito atribui ç ã o . <nl> unnecessary . paren . expr = Par ê nteses desnecess á rios ao redor express ã o . <nl> unnecessary . paren . ident = Par ê nteses desnecess á rios ao redor identificador ' ' { 0 } ' ' . <nl> + unnecessary . paren . lambda = Par ê ntesis desnecess á rios em torno do valor lambda . <nl> unnecessary . paren . literal = Par ê nteses desnecess á rios em torno literal ' ' { 0 } ' ' . <nl> unnecessary . paren . return = Par ê nteses desnecess á rios em torno de valor de retorno . <nl> unnecessary . paren . string = Par ê nteses desnecess á rios em torno cadeia { 0 } <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties <nl> index 722312c . . da4f297 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties <nl> @ @ - 52 , 6 + 52 , 7 @ @ string . literal . equality = ' ' String ' ' ifadeleri ' ' { 0 } ' ' kullanarak de ğ il , equals ( ) <nl> unnecessary . paren . assign = Atama ifadesinin sa ğ taraf ı nda gereksiz parantez mevcut . <nl> unnecessary . paren . expr = İ fadenin etraf ı nda gereksiz parantez mevcut . <nl> unnecessary . paren . ident = ' ' { 0 } ' ' belirte ç inin etraf ı nda gereksiz parantez mevcut . <nl> + unnecessary . paren . lambda = Lamba de ğ eri etraf ı nda gereksiz parantezler var . <nl> unnecessary . paren . literal = ' ' { 0 } ' ' etraf ı nda gereksiz parantez mevcut . <nl> unnecessary . paren . return = Geri d ö n ü ş de ğ eri etraf ı nda gereksiz parantez mevcut . <nl> unnecessary . paren . string = ' ' { 0 } ' ' etraf ı nda gereksiz parantez mevcut . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties <nl> index f8a1743 . . 5bc59c5 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties <nl> @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = 字 符 串 应 使 用 equals ( ) 方 法 进 行 比 较 ， 而 非 ' ' { <nl> unnecessary . paren . assign = 赋 值 语 句 右 方 不 必 要 的 小 括 号 。 <nl> unnecessary . paren . expr = 表 达 式 周 围 不 必 要 的 小 括 号 。 <nl> unnecessary . paren . ident = 关 键 字 ' ' { 0 } ' ' 周 围 不 必 要 的 小 括 号 。 <nl> + unnecessary . paren . lambda = lambda 值 周 围 不 必 要 的 小 括 号 。 <nl> unnecessary . paren . literal = 字 符 串 ' ' { 0 } ' ' 周 围 不 必 要 的 小 括 号 。 <nl> unnecessary . paren . return = return 值 周 围 不 必 要 的 小 括 号 。 <nl> unnecessary . paren . string = 字 符 串 { 0 } 周 围 不 必 要 的 小 括 号 。 <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> index 844dbb5 . . 07de217 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ ASSIGN ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ EXPR ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ IDENT ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ LAMBDA ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ LITERAL ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ RETURN ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ STRING ; <nl> @ @ - 108 , 6 + 109 , 24 @ @ public class UnnecessaryParenthesesCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testLambdas ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( UnnecessaryParenthesesCheck . class ) ; <nl> + checkConfig . addAttribute ( " tokens " , " LAMBDA " ) ; <nl> + final String [ ] expected = { <nl> + " 10 : 35 : " + getCheckMessage ( MSG _ LAMBDA ) , <nl> + " 11 : 35 : " + getCheckMessage ( MSG _ LAMBDA ) , <nl> + " 18 : 18 : " + getCheckMessage ( MSG _ LAMBDA ) , <nl> + " 19 : 57 : " + getCheckMessage ( MSG _ LAMBDA ) , <nl> + " 38 : 25 : " + getCheckMessage ( MSG _ LAMBDA ) , <nl> + " 38 : 33 : " + getCheckMessage ( MSG _ LAMBDA ) , <nl> + " 41 : 25 : " + getCheckMessage ( MSG _ LAMBDA ) , <nl> + " 44 : 31 : " + getCheckMessage ( MSG _ LAMBDA ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputUnnecessaryParenthesesLambdas . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testTokensNotNull ( ) { <nl> final UnnecessaryParenthesesCheck check = new UnnecessaryParenthesesCheck ( ) ; <nl> Assert . assertNotNull ( " Acceptable tokens should not be null " , check . getAcceptableTokens ( ) ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java <nl> new file mode 100644 <nl> index 0000000 . . 2d901fa <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java <nl> @ @ - 0 , 0 + 1 , 79 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . unnecessaryparentheses ; <nl> + <nl> + import java . io . Serializable ; <nl> + import java . util . HashSet ; <nl> + import java . util . Objects ; <nl> + import java . util . function . Function ; <nl> + <nl> + public class InputUnnecessaryParenthesesLambdas { <nl> + int foo ( int y ) { <nl> + MathOperation case1 = ( x ) - > x + x ; <nl> + MathOperation case2 = ( x ) - > { return x + x ; } ; <nl> + MathOperation case3 = ( int x ) - > x + x ; <nl> + MathOperation case4 = x - > x + x ; <nl> + MathOperation2 case5 = ( a , b ) - > a + b ; <nl> + MathOperation2 case6 = ( int a , int b ) - > a + b ; <nl> + MathOperation2 case7 = ( int a , int b ) - > { return a + b ; } ; <nl> + Objects . requireNonNull ( null , ( ) - > " message " ) ; <nl> + call ( ( x ) - > x + x ) ; <nl> + new HashSet < Integer > ( ) . stream ( ) . filter ( ( filter ) - > filter > 0 ) ; <nl> + return y ; <nl> + } <nl> + <nl> + static < T > CheckedFunction1 < T , T > identitity ( ) { <nl> + return t - > t ; <nl> + } <nl> + <nl> + public interface CheckedFunction2 < T1 , T2 , R > extends Lambda < R > { <nl> + R apply ( T1 t1 , T2 t2 ) throws Throwable ; <nl> + <nl> + default CheckedFunction1 < T2 , R > apply ( T1 t1 ) { <nl> + return ( T2 t2 ) - > apply ( t1 , t2 ) ; <nl> + } <nl> + @ Override <nl> + default Function1 < T1 , CheckedFunction1 < T2 , R > > curried ( ) { <nl> + return t1 - > t2 - > apply ( t1 , t2 ) ; <nl> + } <nl> + default Function1 < T1 , CheckedFunction1 < T2 , R > > curried2 ( ) { <nl> + return ( t1 ) - > ( t2 ) - > apply ( t1 , t2 ) ; <nl> + } <nl> + default Function1 < T1 , CheckedFunction1 < T2 , R > > curried3 ( ) { <nl> + return ( t1 ) - > t2 - > apply ( t1 , t2 ) ; <nl> + } <nl> + default Function1 < T1 , CheckedFunction1 < T2 , R > > curried4 ( ) { <nl> + return t1 - > ( t2 ) - > apply ( t1 , t2 ) ; <nl> + } <nl> + } <nl> + <nl> + private void call ( MathOperation o ) { <nl> + o . operation ( 1 ) ; <nl> + } <nl> + <nl> + interface MathOperation { <nl> + int operation ( int a ) ; <nl> + } <nl> + <nl> + interface MathOperation2 { <nl> + int operation ( int a , int b ) ; <nl> + } <nl> + <nl> + interface Lambda < R > extends Serializable { <nl> + Lambda < ? > curried ( ) ; <nl> + } <nl> + <nl> + public interface Function1 < T1 , R > extends Lambda < R > , Function < T1 , R > { <nl> + @ Override <nl> + default Function1 < T1 , R > curried ( ) { <nl> + return this ; <nl> + } <nl> + } <nl> + <nl> + public interface CheckedFunction1 < T1 , R > extends Lambda < R > { <nl> + R apply ( T1 t1 ) throws Throwable ; <nl> + <nl> + @ Override <nl> + default CheckedFunction1 < T1 , R > curried ( ) { <nl> + return this ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 8e008c8 . . 86f2e27 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 4365 , 7 + 4365 , 8 @ @ if ( & quot ; something & quot ; . equals ( x ) ) <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # PLUS _ ASSIGN " > PLUS _ ASSIGN < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SL _ ASSIGN " > SL _ ASSIGN < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SR _ ASSIGN " > SR _ ASSIGN < / a > , <nl> - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STAR _ ASSIGN " > STAR _ ASSIGN < / a > . <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STAR _ ASSIGN " > STAR _ ASSIGN < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LAMBDA " > LAMBDA < / a > . <nl> < / td > <nl> < td > <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # EXPR " > EXPR < / a > , <nl> @ @ - 4389 , 7 + 4390 , 8 @ @ if ( & quot ; something & quot ; . equals ( x ) ) <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # PLUS _ ASSIGN " > PLUS _ ASSIGN < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SL _ ASSIGN " > SL _ ASSIGN < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SR _ ASSIGN " > SR _ ASSIGN < / a > , <nl> - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STAR _ ASSIGN " > STAR _ ASSIGN < / a > . <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STAR _ ASSIGN " > STAR _ ASSIGN < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LAMBDA " > LAMBDA < / a > . <nl> < / td > <nl> < td > 3 . 4 < / td > <nl> < / tr > <nl> @ @ - 4429 , 6 + 4431 , 10 @ @ if ( & quot ; something & quot ; . equals ( x ) ) <nl> unnecessary . paren . ident < / a > <nl> < / li > <nl> < li > <nl> + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources % 2Fcom % 2Fpuppycrawl % 2Ftools % 2Fcheckstyle % 2Fchecks % 2Fcoding + filename % 3Amessages * . properties + repo % 3Acheckstyle % 2Fcheckstyle + % 22unnecessary . paren . lambda % 22 " > <nl> + unnecessary . paren . lambda < / a > <nl> + < / li > <nl> + < li > <nl> < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources % 2Fcom % 2Fpuppycrawl % 2Ftools % 2Fcheckstyle % 2Fchecks % 2Fcoding + filename % 3Amessages * . properties + repo % 3Acheckstyle % 2Fcheckstyle + % 22unnecessary . paren . literal % 22 " > <nl> unnecessary . paren . literal < / a > <nl> < / li >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> index 1ad746a . . 94af99f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> @ @ - 183 , 9 + 183 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> final DetailAST methodImplOpenBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; <nl> final Predicate < DetailAST > predicate = currentNode - > { <nl> - return currentNode ! = null <nl> - & & currentNode ! = methodImplCloseBrace <nl> - & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) <nl> + return currentNode ! = methodImplCloseBrace <nl> & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; <nl> } ; <nl> final Optional < DetailAST > methodBody = <nl> @ @ - 220 , 31 + 218 , 19 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> * @ return true if a method has any of ignored annotations . <nl> * / <nl> private static boolean hasIgnoredAnnotation ( DetailAST methodDef , Set < String > annotations ) { <nl> - return annotations . stream ( ) . filter ( annotation - > hasAnnotation ( methodDef , annotation ) ) <nl> - . findAny ( ) . isPresent ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Check if a method has specific annotation . <nl> - * @ param methodDef method definition token . <nl> - * @ param annotationName annotation name . <nl> - * @ return true , if a method has a specific annotation . <nl> - * / <nl> - private static boolean hasAnnotation ( DetailAST methodDef , String annotationName ) { <nl> final DetailAST modifiers = methodDef . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - boolean containsAnnotation = false ; <nl> + boolean hasIgnoredAnnotation = false ; <nl> if ( modifiers . branchContains ( TokenTypes . ANNOTATION ) ) { <nl> final Optional < DetailAST > annotation = TokenUtils . findFirstTokenByPredicate ( modifiers , <nl> currentToken - > { <nl> - return currentToken ! = null <nl> - & & currentToken . getType ( ) = = TokenTypes . ANNOTATION <nl> - & & annotationName . equals ( getAnnotationName ( currentToken ) ) ; <nl> + return currentToken . getType ( ) = = TokenTypes . ANNOTATION <nl> + & & annotations . contains ( getAnnotationName ( currentToken ) ) ; <nl> } ) ; <nl> if ( annotation . isPresent ( ) ) { <nl> - containsAnnotation = true ; <nl> + hasIgnoredAnnotation = true ; <nl> } <nl> } <nl> - return containsAnnotation ; <nl> + return hasIgnoredAnnotation ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java <nl> index aad1d56 . . d9fd5a6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java <nl> @ @ - 191 , 7 + 191 , 8 @ @ public final class TokenUtils { <nl> } <nl> <nl> / * * <nl> - * Finds the first node { @ link Optional } of { @ link DetailAST } which matches the predicate . <nl> + * Finds the first { @ link Optional } child token of { @ link DetailAST } root node <nl> + * which matches the given predicate . <nl> * @ param root root node . <nl> * @ param predicate predicate . <nl> * @ return { @ link Optional } of { @ link DetailAST } node which matches the predicate . <nl> @ @ - 199 , 20 + 200 , 11 @ @ public final class TokenUtils { <nl> public static Optional < DetailAST > findFirstTokenByPredicate ( DetailAST root , <nl> Predicate < DetailAST > predicate ) { <nl> Optional < DetailAST > result = Optional . empty ( ) ; <nl> - DetailAST rootNode = root ; <nl> - while ( rootNode ! = null ) { <nl> - DetailAST toVisit = rootNode . getFirstChild ( ) ; <nl> - if ( predicate . test ( toVisit ) ) { <nl> - result = Optional . of ( toVisit ) ; <nl> + for ( DetailAST ast = root . getFirstChild ( ) ; ast ! = null ; ast = ast . getNextSibling ( ) ) { <nl> + if ( predicate . test ( ast ) ) { <nl> + result = Optional . of ( ast ) ; <nl> break ; <nl> } <nl> - while ( rootNode ! = null & & toVisit = = null ) { <nl> - toVisit = rootNode . getNextSibling ( ) ; <nl> - if ( toVisit = = null ) { <nl> - rootNode = rootNode . getParent ( ) ; <nl> - } <nl> - } <nl> - rootNode = toVisit ; <nl> } <nl> return result ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java <nl> index 6781597 . . 5c3eb9e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . junit . Test ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class DesignForExtensionCheckTest <nl> extends BaseCheckTestSupport { <nl> @ @ - 88 , 17 + 89 , 30 @ @ public class DesignForExtensionCheckTest <nl> @ Test <nl> public void testIgnoredAnnotationsOption ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( DesignForExtensionCheck . class ) ; <nl> - checkConfig . addAttribute ( " ignoredAnnotations " , " Override , Deprecated " ) ; <nl> + checkConfig . addAttribute ( " ignoredAnnotations " , " Override , Deprecated , MyAnnotation " ) ; <nl> final String [ ] expected = { <nl> " 31 : 5 : " <nl> + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " foo1 " ) , <nl> " 141 : 5 : " <nl> + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " foo21 " ) , <nl> + " 146 : 5 : " <nl> + + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " setAge " ) , <nl> + " 161 : 5 : " <nl> + + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " foo24 " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputDesignForExtensionIgnoredAnnotations . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> + public void testIgnoreAnnotationsOptionWithMultipleAnnotations ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( DesignForExtensionCheck . class ) ; <nl> + checkConfig . addAttribute ( " ignoredAnnotations " , <nl> + " Override , Deprecated , Before , After , BeforeClass , AfterClass " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputDesignForExtensionMultipleAnnotations . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testNativeMethods ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( DesignForExtensionCheck . class ) ; <nl> checkConfig . addAttribute ( " ignoredAnnotations " , " Deprecated " ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java <nl> index c8a2e36 . . 3a4f37b 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java <nl> @ @ - 138 , 6 + 138 , 29 @ @ public class InputDesignForExtensionIgnoredAnnotations { <nl> @ InputLocalAnnotations . ClassRule <nl> public void foo20 ( ) { return ; } <nl> <nl> - @ InputLocalAnnotations . ClassRule <nl> - public void foo21 ( ) { return ; } / / violation <nl> + @ InputLocalAnnotations . ClassRule / / violation <nl> + public void foo21 ( ) { return ; } <nl> + <nl> + private int age ; <nl> + <nl> + @ Inject / / violation <nl> + public void setAge ( int age ) { <nl> + this . age = age ; <nl> + } <nl> + <nl> + public @ interface Inject { } <nl> + <nl> + public @ MyAnnotation void foo22 ( ) { <nl> + foo1 ( ) ; <nl> + } <nl> + <nl> + @ MyAnnotation public void foo23 ( ) { <nl> + foo1 ( ) ; <nl> + } <nl> + <nl> + public void foo24 ( @ MyAnnotation int a ) { / / violation <nl> + foo1 ( ) ; <nl> + } <nl> + <nl> + public @ interface MyAnnotation { } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionMultipleAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionMultipleAnnotations . java <nl> new file mode 100644 <nl> index 0000000 . . 7f94946 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionMultipleAnnotations . java <nl> @ @ - 0 , 0 + 1 , 84 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import org . junit . Ignore ; <nl> + import org . junit . Test ; <nl> + <nl> + public class InputDesignForExtensionMultipleAnnotations { <nl> + <nl> + @ Ignore <nl> + @ Deprecated <nl> + public void foo1 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + @ Deprecated <nl> + @ Ignore <nl> + public void foo2 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + @ Ignore <nl> + / / comment <nl> + @ Deprecated <nl> + public void foo4 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + @ Deprecated <nl> + / / comment <nl> + @ Ignore <nl> + public void foo5 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + <nl> + @ Ignore <nl> + / * * <nl> + * comment <nl> + * / <nl> + @ Deprecated <nl> + public void foo6 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + @ Deprecated <nl> + / * * <nl> + * comment <nl> + * / <nl> + @ Ignore <nl> + public void foo7 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + @ Ignore <nl> + / * comment * / <nl> + @ Deprecated <nl> + public void foo8 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + @ Deprecated <nl> + / * comment * / <nl> + @ Ignore <nl> + public void foo9 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + / * comment * / <nl> + @ Ignore <nl> + @ Deprecated <nl> + public void foo10 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + / * comment * / <nl> + @ Deprecated <nl> + @ Ignore <nl> + public void foo11 ( ) { <nl> + foo3 ( ) ; <nl> + } <nl> + <nl> + private void foo3 ( ) { } <nl> + }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 index a4ef1e7 . . e390065 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 @ @ - 89 , 6 + 89 , 12 @ @ public class UnnecessaryParenthesesCheck extends AbstractCheck { 
 * / 
 public static final String MSG _ RETURN = " unnecessary . paren . return " ; 
 
 + / * * 
 + * A key is pointing to the warning message text in " messages . properties " 
 + * file . 
 + * / 
 + public static final String MSG _ LAMBDA = " unnecessary . paren . lambda " ; 
 + 
 / * * The maximum string length before we chop the string . * / 
 private static final int MAX _ QUOTED _ LENGTH = 25 ; 
 
 @ @ - 153 , 6 + 159 , 7 @ @ public class UnnecessaryParenthesesCheck extends AbstractCheck { 
 TokenTypes . SL _ ASSIGN , 
 TokenTypes . SR _ ASSIGN , 
 TokenTypes . STAR _ ASSIGN , 
 + TokenTypes . LAMBDA , 
 } ; 
 } 
 
 @ @ - 181 , 6 + 188 , 7 @ @ public class UnnecessaryParenthesesCheck extends AbstractCheck { 
 TokenTypes . SL _ ASSIGN , 
 TokenTypes . SR _ ASSIGN , 
 TokenTypes . STAR _ ASSIGN , 
 + TokenTypes . LAMBDA , 
 } ; 
 } 
 
 @ @ - 190 , 12 + 198 , 16 @ @ public class UnnecessaryParenthesesCheck extends AbstractCheck { 
 return CommonUtils . EMPTY _ INT _ ARRAY ; 
 } 
 
 + / / - @ cs [ CyclomaticComplexity ] All logs should be in visit token . 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 final int type = ast . getType ( ) ; 
 final DetailAST parent = ast . getParent ( ) ; 
 
 - if ( type ! = TokenTypes . ASSIGN 
 + if ( type = = TokenTypes . LAMBDA & & isLambdaSingleParameterSurrounded ( ast ) ) { 
 + log ( ast , MSG _ LAMBDA , ast . getText ( ) ) ; 
 + } 
 + else if ( type ! = TokenTypes . ASSIGN 
 | | parent . getType ( ) ! = TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) { 
 
 final boolean surrounded = isSurrounded ( ast ) ; 
 @ @ - 292 , 6 + 304 , 22 @ @ public class UnnecessaryParenthesesCheck extends AbstractCheck { 
 } 
 
 / * * 
 + * Tests if the given lambda node has a single parameter , no defined type , and is surrounded 
 + * by parentheses . 
 + * @ param ast a { @ code DetailAST } whose type is 
 + * { @ code TokenTypes . LAMBDA } . 
 + * @ return { @ code true } if the lambda has a single parameter , no defined type , and is 
 + * surrounded by parentheses . 
 + * / 
 + private static boolean isLambdaSingleParameterSurrounded ( DetailAST ast ) { 
 + final DetailAST firstChild = ast . getFirstChild ( ) ; 
 + return firstChild . getType ( ) = = TokenTypes . LPAREN 
 + & & firstChild . getNextSibling ( ) . getChildCount ( TokenTypes . PARAMETER _ DEF ) = = 1 
 + & & firstChild . getNextSibling ( ) . getFirstChild ( ) . findFirstToken ( TokenTypes . TYPE ) 
 + . getChildCount ( ) = = 0 ; 
 + } 
 + 
 + / * * 
 * Check if the given token type can be found in an array of token types . 
 * @ param type the token type . 
 * @ param tokens an array of token types to search . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 index 0d49225 . . 64b56e1 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = Literal Strings should be compared using equals ( ) , not ' 
 unnecessary . paren . assign = Unnecessary parentheses around assignment right - hand side . 
 unnecessary . paren . expr = Unnecessary parentheses around expression . 
 unnecessary . paren . ident = Unnecessary parentheses around identifier ' ' { 0 } ' ' . 
 + unnecessary . paren . lambda = Unnecessary parentheses around lambda value . 
 unnecessary . paren . literal = Unnecessary parentheses around literal ' ' { 0 } ' ' . 
 unnecessary . paren . return = Unnecessary parentheses around return value . 
 unnecessary . paren . string = Unnecessary parentheses around string { 0 } . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 index 1406c39 . . bb1308e 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = Der Vergleich von String - Literalen sollte mit equals ( ) e 
 unnecessary . paren . assign = Ü berfl ü ssige Klammern um die rechte Seite der Zuweisung . 
 unnecessary . paren . expr = Ü berfl ü ssige Klammern um den Ausdruck . 
 unnecessary . paren . ident = Ü berfl ü ssige Klammern um den Bezeichner ' ' { 0 } ' ' . 
 + unnecessary . paren . lambda = Ü berfl ü ssige Klammern um Lambdawert . 
 unnecessary . paren . literal = Ü berfl ü ssige Klammern um das Literal ' ' { 0 } ' ' . 
 unnecessary . paren . return = Ü berfl ü ssige Klammern um den R ü ckgabewert . 
 unnecessary . paren . string = Ü berfl ü ssige Klammern um den String ' ' { 0 } ' ' . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties 
 index fda7e57 . . 1a97e00 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ es . properties 
 @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = Las cadenas literales deben compararse usando equals ( ) , 
 unnecessary . paren . assign = Par é ntesis innecesarios alrededor de la parte derecha de una asignaci ó n . 
 unnecessary . paren . expr = Par é ntesis innecesarios alrededor de la expresi ó n . 
 unnecessary . paren . ident = Par é ntesis innecesarios alrededor del identificador ' ' { 0 } ' ' . 
 + unnecessary . paren . lambda = Par é ntesis innecesarios alrededor del valor lambda . 
 unnecessary . paren . literal = Par é ntesis innecesarios alrededor del literal ' ' { 0 } ' ' . 
 unnecessary . paren . return = Par é ntesis innecesarios alrededor del valor de retorno . 
 unnecessary . paren . string = Par é ntesis innecesarios alrededor de la cadena { 0 } . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties 
 index e897e61 . . b28e231 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fi . properties 
 @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = Kirjaimellinen Strings pit ä isi verrata k ä ytt ä m ä ll ä 
 unnecessary . paren . assign = Tarpeettomia sulkuja noin teht ä v ä n oikealla puolella . 
 unnecessary . paren . expr = Tarpeettomia sulkuja noin ilme . 
 unnecessary . paren . ident = Tarpeettomia sulkuja noin tunniste ' ' { 0 } ' ' . 
 + unnecessary . paren . lambda = Tarpeettomat sulkeet lambda - arvon ymp ä rill ä . 
 unnecessary . paren . literal = Tarpeettomia sulkuja noin kirjaimellisesti ' ' { 0 } ' ' . 
 unnecessary . paren . return = Tarpeettomia sulkuja noin paluuarvo . 
 unnecessary . paren . string = Tarpeettomia sulkuja noin merkkijono { 0 } . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties 
 index b9cba42 . . 7ae8de9 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ fr . properties 
 @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = Les chaines de caract è res litt é rales devraient ê tre c 
 unnecessary . paren . assign = Parenth è ses inutiles autour la partie droite de l ' ' affectation . 
 unnecessary . paren . expr = Parenth è ses inutiles autour de l ' ' expression . 
 unnecessary . paren . ident = Parenth è ses inutiles autour de l ' ' identifiant ' ' { 0 } ' ' . 
 + unnecessary . paren . lambda = Parenth è ses inutiles autour de la valeur lambda . 
 unnecessary . paren . literal = Parenth è ses inutiles autour de la cha î ne litt é rale ' ' { 0 } ' ' . 
 unnecessary . paren . return = Parenth è ses inutiles autour de la valeur de retour . 
 unnecessary . paren . string = Parenth è ses inutiles autour de la cha î ne { 0 } . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties 
 index 3b56d0e . . 98adfa1 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ ja . properties 
 @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = リ テ ラ ル の 文 字 列 は ' ' { 0 } ' ' で は な く 、 equa 
 unnecessary . paren . assign = 代 入 式 の 右 辺 に 不 要 な 括 弧 が あ り ま す 。 
 unnecessary . paren . expr = 式 の 前 後 に 不 要 な 括 弧 が あ り ま す 。 
 unnecessary . paren . ident = 識 別 子 ' ' { 0 } ' ' の 前 後 に 不 要 な 括 弧 が あ り ま す 。 
 + unnecessary . paren . lambda = ラ ム ダ 値 の 周 り の 不 必 要 な カ ッ コ 。 
 unnecessary . paren . literal = リ テ ラ ル ' ' { 0 } ' ' の 前 後 に 不 要 な 括 弧 が あ り ま す 。 
 unnecessary . paren . return = 戻 り 値 の 前 後 に 不 要 な 括 弧 が あ り ま す 。 
 unnecessary . paren . string = 文 字 列 { 0 } の 前 後 に 不 要 な 括 弧 が あ り ま す 。 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties 
 index e93354c . . 29ac4ab 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ pt . properties 
 @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = \ " Strings \ " literais devem ser comparadas com equals ( ) , 
 unnecessary . paren . assign = Par ê nteses desnecess á rios ao redor do lado direito atribui ç ã o . 
 unnecessary . paren . expr = Par ê nteses desnecess á rios ao redor express ã o . 
 unnecessary . paren . ident = Par ê nteses desnecess á rios ao redor identificador ' ' { 0 } ' ' . 
 + unnecessary . paren . lambda = Par ê ntesis desnecess á rios em torno do valor lambda . 
 unnecessary . paren . literal = Par ê nteses desnecess á rios em torno literal ' ' { 0 } ' ' . 
 unnecessary . paren . return = Par ê nteses desnecess á rios em torno de valor de retorno . 
 unnecessary . paren . string = Par ê nteses desnecess á rios em torno cadeia { 0 } 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties 
 index 722312c . . da4f297 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ tr . properties 
 @ @ - 52 , 6 + 52 , 7 @ @ string . literal . equality = ' ' String ' ' ifadeleri ' ' { 0 } ' ' kullanarak de ğ il , equals ( ) 
 unnecessary . paren . assign = Atama ifadesinin sa ğ taraf ı nda gereksiz parantez mevcut . 
 unnecessary . paren . expr = İ fadenin etraf ı nda gereksiz parantez mevcut . 
 unnecessary . paren . ident = ' ' { 0 } ' ' belirte ç inin etraf ı nda gereksiz parantez mevcut . 
 + unnecessary . paren . lambda = Lamba de ğ eri etraf ı nda gereksiz parantezler var . 
 unnecessary . paren . literal = ' ' { 0 } ' ' etraf ı nda gereksiz parantez mevcut . 
 unnecessary . paren . return = Geri d ö n ü ş de ğ eri etraf ı nda gereksiz parantez mevcut . 
 unnecessary . paren . string = ' ' { 0 } ' ' etraf ı nda gereksiz parantez mevcut . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties 
 index f8a1743 . . 5bc59c5 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ zh . properties 
 @ @ - 51 , 6 + 51 , 7 @ @ string . literal . equality = 字 符 串 应 使 用 equals ( ) 方 法 进 行 比 较 ， 而 非 ' ' { 
 unnecessary . paren . assign = 赋 值 语 句 右 方 不 必 要 的 小 括 号 。 
 unnecessary . paren . expr = 表 达 式 周 围 不 必 要 的 小 括 号 。 
 unnecessary . paren . ident = 关 键 字 ' ' { 0 } ' ' 周 围 不 必 要 的 小 括 号 。 
 + unnecessary . paren . lambda = lambda 值 周 围 不 必 要 的 小 括 号 。 
 unnecessary . paren . literal = 字 符 串 ' ' { 0 } ' ' 周 围 不 必 要 的 小 括 号 。 
 unnecessary . paren . return = return 值 周 围 不 必 要 的 小 括 号 。 
 unnecessary . paren . string = 字 符 串 { 0 } 周 围 不 必 要 的 小 括 号 。 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 index 844dbb5 . . 07de217 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ ASSIGN ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ EXPR ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ IDENT ; 
 + import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ LAMBDA ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ LITERAL ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ RETURN ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ STRING ; 
 @ @ - 108 , 6 + 109 , 24 @ @ public class UnnecessaryParenthesesCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testLambdas ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( UnnecessaryParenthesesCheck . class ) ; 
 + checkConfig . addAttribute ( " tokens " , " LAMBDA " ) ; 
 + final String [ ] expected = { 
 + " 10 : 35 : " + getCheckMessage ( MSG _ LAMBDA ) , 
 + " 11 : 35 : " + getCheckMessage ( MSG _ LAMBDA ) , 
 + " 18 : 18 : " + getCheckMessage ( MSG _ LAMBDA ) , 
 + " 19 : 57 : " + getCheckMessage ( MSG _ LAMBDA ) , 
 + " 38 : 25 : " + getCheckMessage ( MSG _ LAMBDA ) , 
 + " 38 : 33 : " + getCheckMessage ( MSG _ LAMBDA ) , 
 + " 41 : 25 : " + getCheckMessage ( MSG _ LAMBDA ) , 
 + " 44 : 31 : " + getCheckMessage ( MSG _ LAMBDA ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputUnnecessaryParenthesesLambdas . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testTokensNotNull ( ) { 
 final UnnecessaryParenthesesCheck check = new UnnecessaryParenthesesCheck ( ) ; 
 Assert . assertNotNull ( " Acceptable tokens should not be null " , check . getAcceptableTokens ( ) ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java 
 new file mode 100644 
 index 0000000 . . 2d901fa 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java 
 @ @ - 0 , 0 + 1 , 79 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . unnecessaryparentheses ; 
 + 
 + import java . io . Serializable ; 
 + import java . util . HashSet ; 
 + import java . util . Objects ; 
 + import java . util . function . Function ; 
 + 
 + public class InputUnnecessaryParenthesesLambdas { 
 + int foo ( int y ) { 
 + MathOperation case1 = ( x ) - > x + x ; 
 + MathOperation case2 = ( x ) - > { return x + x ; } ; 
 + MathOperation case3 = ( int x ) - > x + x ; 
 + MathOperation case4 = x - > x + x ; 
 + MathOperation2 case5 = ( a , b ) - > a + b ; 
 + MathOperation2 case6 = ( int a , int b ) - > a + b ; 
 + MathOperation2 case7 = ( int a , int b ) - > { return a + b ; } ; 
 + Objects . requireNonNull ( null , ( ) - > " message " ) ; 
 + call ( ( x ) - > x + x ) ; 
 + new HashSet < Integer > ( ) . stream ( ) . filter ( ( filter ) - > filter > 0 ) ; 
 + return y ; 
 + } 
 + 
 + static < T > CheckedFunction1 < T , T > identitity ( ) { 
 + return t - > t ; 
 + } 
 + 
 + public interface CheckedFunction2 < T1 , T2 , R > extends Lambda < R > { 
 + R apply ( T1 t1 , T2 t2 ) throws Throwable ; 
 + 
 + default CheckedFunction1 < T2 , R > apply ( T1 t1 ) { 
 + return ( T2 t2 ) - > apply ( t1 , t2 ) ; 
 + } 
 + @ Override 
 + default Function1 < T1 , CheckedFunction1 < T2 , R > > curried ( ) { 
 + return t1 - > t2 - > apply ( t1 , t2 ) ; 
 + } 
 + default Function1 < T1 , CheckedFunction1 < T2 , R > > curried2 ( ) { 
 + return ( t1 ) - > ( t2 ) - > apply ( t1 , t2 ) ; 
 + } 
 + default Function1 < T1 , CheckedFunction1 < T2 , R > > curried3 ( ) { 
 + return ( t1 ) - > t2 - > apply ( t1 , t2 ) ; 
 + } 
 + default Function1 < T1 , CheckedFunction1 < T2 , R > > curried4 ( ) { 
 + return t1 - > ( t2 ) - > apply ( t1 , t2 ) ; 
 + } 
 + } 
 + 
 + private void call ( MathOperation o ) { 
 + o . operation ( 1 ) ; 
 + } 
 + 
 + interface MathOperation { 
 + int operation ( int a ) ; 
 + } 
 + 
 + interface MathOperation2 { 
 + int operation ( int a , int b ) ; 
 + } 
 + 
 + interface Lambda < R > extends Serializable { 
 + Lambda < ? > curried ( ) ; 
 + } 
 + 
 + public interface Function1 < T1 , R > extends Lambda < R > , Function < T1 , R > { 
 + @ Override 
 + default Function1 < T1 , R > curried ( ) { 
 + return this ; 
 + } 
 + } 
 + 
 + public interface CheckedFunction1 < T1 , R > extends Lambda < R > { 
 + R apply ( T1 t1 ) throws Throwable ; 
 + 
 + @ Override 
 + default CheckedFunction1 < T1 , R > curried ( ) { 
 + return this ; 
 + } 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 8e008c8 . . 86f2e27 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 4365 , 7 + 4365 , 8 @ @ if ( & quot ; something & quot ; . equals ( x ) ) 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # PLUS _ ASSIGN " > PLUS _ ASSIGN < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SL _ ASSIGN " > SL _ ASSIGN < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SR _ ASSIGN " > SR _ ASSIGN < / a > , 
 - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STAR _ ASSIGN " > STAR _ ASSIGN < / a > . 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STAR _ ASSIGN " > STAR _ ASSIGN < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LAMBDA " > LAMBDA < / a > . 
 < / td > 
 < td > 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # EXPR " > EXPR < / a > , 
 @ @ - 4389 , 7 + 4390 , 8 @ @ if ( & quot ; something & quot ; . equals ( x ) ) 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # PLUS _ ASSIGN " > PLUS _ ASSIGN < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SL _ ASSIGN " > SL _ ASSIGN < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SR _ ASSIGN " > SR _ ASSIGN < / a > , 
 - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STAR _ ASSIGN " > STAR _ ASSIGN < / a > . 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STAR _ ASSIGN " > STAR _ ASSIGN < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LAMBDA " > LAMBDA < / a > . 
 < / td > 
 < td > 3 . 4 < / td > 
 < / tr > 
 @ @ - 4429 , 6 + 4431 , 10 @ @ if ( & quot ; something & quot ; . equals ( x ) ) 
 unnecessary . paren . ident < / a > 
 < / li > 
 < li > 
 + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources % 2Fcom % 2Fpuppycrawl % 2Ftools % 2Fcheckstyle % 2Fchecks % 2Fcoding + filename % 3Amessages * . properties + repo % 3Acheckstyle % 2Fcheckstyle + % 22unnecessary . paren . lambda % 22 " > 
 + unnecessary . paren . lambda < / a > 
 + < / li > 
 + < li > 
 < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources % 2Fcom % 2Fpuppycrawl % 2Ftools % 2Fcheckstyle % 2Fchecks % 2Fcoding + filename % 3Amessages * . properties + repo % 3Acheckstyle % 2Fcheckstyle + % 22unnecessary . paren . literal % 22 " > 
 unnecessary . paren . literal < / a > 
 < / li >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 index 1ad746a . . 94af99f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 @ @ - 183 , 9 + 183 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 final DetailAST methodImplOpenBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; 
 final Predicate < DetailAST > predicate = currentNode - > { 
 - return currentNode ! = null 
 - & & currentNode ! = methodImplCloseBrace 
 - & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) 
 + return currentNode ! = methodImplCloseBrace 
 & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; 
 } ; 
 final Optional < DetailAST > methodBody = 
 @ @ - 220 , 31 + 218 , 19 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 * @ return true if a method has any of ignored annotations . 
 * / 
 private static boolean hasIgnoredAnnotation ( DetailAST methodDef , Set < String > annotations ) { 
 - return annotations . stream ( ) . filter ( annotation - > hasAnnotation ( methodDef , annotation ) ) 
 - . findAny ( ) . isPresent ( ) ; 
 - } 
 - 
 - / * * 
 - * Check if a method has specific annotation . 
 - * @ param methodDef method definition token . 
 - * @ param annotationName annotation name . 
 - * @ return true , if a method has a specific annotation . 
 - * / 
 - private static boolean hasAnnotation ( DetailAST methodDef , String annotationName ) { 
 final DetailAST modifiers = methodDef . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - boolean containsAnnotation = false ; 
 + boolean hasIgnoredAnnotation = false ; 
 if ( modifiers . branchContains ( TokenTypes . ANNOTATION ) ) { 
 final Optional < DetailAST > annotation = TokenUtils . findFirstTokenByPredicate ( modifiers , 
 currentToken - > { 
 - return currentToken ! = null 
 - & & currentToken . getType ( ) = = TokenTypes . ANNOTATION 
 - & & annotationName . equals ( getAnnotationName ( currentToken ) ) ; 
 + return currentToken . getType ( ) = = TokenTypes . ANNOTATION 
 + & & annotations . contains ( getAnnotationName ( currentToken ) ) ; 
 } ) ; 
 if ( annotation . isPresent ( ) ) { 
 - containsAnnotation = true ; 
 + hasIgnoredAnnotation = true ; 
 } 
 } 
 - return containsAnnotation ; 
 + return hasIgnoredAnnotation ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java 
 index aad1d56 . . d9fd5a6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / TokenUtils . java 
 @ @ - 191 , 7 + 191 , 8 @ @ public final class TokenUtils { 
 } 
 
 / * * 
 - * Finds the first node { @ link Optional } of { @ link DetailAST } which matches the predicate . 
 + * Finds the first { @ link Optional } child token of { @ link DetailAST } root node 
 + * which matches the given predicate . 
 * @ param root root node . 
 * @ param predicate predicate . 
 * @ return { @ link Optional } of { @ link DetailAST } node which matches the predicate . 
 @ @ - 199 , 20 + 200 , 11 @ @ public final class TokenUtils { 
 public static Optional < DetailAST > findFirstTokenByPredicate ( DetailAST root , 
 Predicate < DetailAST > predicate ) { 
 Optional < DetailAST > result = Optional . empty ( ) ; 
 - DetailAST rootNode = root ; 
 - while ( rootNode ! = null ) { 
 - DetailAST toVisit = rootNode . getFirstChild ( ) ; 
 - if ( predicate . test ( toVisit ) ) { 
 - result = Optional . of ( toVisit ) ; 
 + for ( DetailAST ast = root . getFirstChild ( ) ; ast ! = null ; ast = ast . getNextSibling ( ) ) { 
 + if ( predicate . test ( ast ) ) { 
 + result = Optional . of ( ast ) ; 
 break ; 
 } 
 - while ( rootNode ! = null & & toVisit = = null ) { 
 - toVisit = rootNode . getNextSibling ( ) ; 
 - if ( toVisit = = null ) { 
 - rootNode = rootNode . getParent ( ) ; 
 - } 
 - } 
 - rootNode = toVisit ; 
 } 
 return result ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java 
 index 6781597 . . 5c3eb9e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . junit . Test ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class DesignForExtensionCheckTest 
 extends BaseCheckTestSupport { 
 @ @ - 88 , 17 + 89 , 30 @ @ public class DesignForExtensionCheckTest 
 @ Test 
 public void testIgnoredAnnotationsOption ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( DesignForExtensionCheck . class ) ; 
 - checkConfig . addAttribute ( " ignoredAnnotations " , " Override , Deprecated " ) ; 
 + checkConfig . addAttribute ( " ignoredAnnotations " , " Override , Deprecated , MyAnnotation " ) ; 
 final String [ ] expected = { 
 " 31 : 5 : " 
 + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " foo1 " ) , 
 " 141 : 5 : " 
 + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " foo21 " ) , 
 + " 146 : 5 : " 
 + + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " setAge " ) , 
 + " 161 : 5 : " 
 + + getCheckMessage ( MSG _ KEY , " InputDesignForExtensionIgnoredAnnotations " , " foo24 " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputDesignForExtensionIgnoredAnnotations . java " ) , expected ) ; 
 } 
 
 @ Test 
 + public void testIgnoreAnnotationsOptionWithMultipleAnnotations ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( DesignForExtensionCheck . class ) ; 
 + checkConfig . addAttribute ( " ignoredAnnotations " , 
 + " Override , Deprecated , Before , After , BeforeClass , AfterClass " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputDesignForExtensionMultipleAnnotations . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testNativeMethods ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( DesignForExtensionCheck . class ) ; 
 checkConfig . addAttribute ( " ignoredAnnotations " , " Deprecated " ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java 
 index c8a2e36 . . 3a4f37b 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionIgnoredAnnotations . java 
 @ @ - 138 , 6 + 138 , 29 @ @ public class InputDesignForExtensionIgnoredAnnotations { 
 @ InputLocalAnnotations . ClassRule 
 public void foo20 ( ) { return ; } 
 
 - @ InputLocalAnnotations . ClassRule 
 - public void foo21 ( ) { return ; } / / violation 
 + @ InputLocalAnnotations . ClassRule / / violation 
 + public void foo21 ( ) { return ; } 
 + 
 + private int age ; 
 + 
 + @ Inject / / violation 
 + public void setAge ( int age ) { 
 + this . age = age ; 
 + } 
 + 
 + public @ interface Inject { } 
 + 
 + public @ MyAnnotation void foo22 ( ) { 
 + foo1 ( ) ; 
 + } 
 + 
 + @ MyAnnotation public void foo23 ( ) { 
 + foo1 ( ) ; 
 + } 
 + 
 + public void foo24 ( @ MyAnnotation int a ) { / / violation 
 + foo1 ( ) ; 
 + } 
 + 
 + public @ interface MyAnnotation { } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionMultipleAnnotations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionMultipleAnnotations . java 
 new file mode 100644 
 index 0000000 . . 7f94946 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionMultipleAnnotations . java 
 @ @ - 0 , 0 + 1 , 84 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import java . util . List ; 
 + 
 + import org . junit . Ignore ; 
 + import org . junit . Test ; 
 + 
 + public class InputDesignForExtensionMultipleAnnotations { 
 + 
 + @ Ignore 
 + @ Deprecated 
 + public void foo1 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + @ Deprecated 
 + @ Ignore 
 + public void foo2 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + @ Ignore 
 + / / comment 
 + @ Deprecated 
 + public void foo4 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + @ Deprecated 
 + / / comment 
 + @ Ignore 
 + public void foo5 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + 
 + @ Ignore 
 + / * * 
 + * comment 
 + * / 
 + @ Deprecated 
 + public void foo6 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + @ Deprecated 
 + / * * 
 + * comment 
 + * / 
 + @ Ignore 
 + public void foo7 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + @ Ignore 
 + / * comment * / 
 + @ Deprecated 
 + public void foo8 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + @ Deprecated 
 + / * comment * / 
 + @ Ignore 
 + public void foo9 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + / * comment * / 
 + @ Ignore 
 + @ Deprecated 
 + public void foo10 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + / * comment * / 
 + @ Deprecated 
 + @ Ignore 
 + public void foo11 ( ) { 
 + foo3 ( ) ; 
 + } 
 + 
 + private void foo3 ( ) { } 
 + }
