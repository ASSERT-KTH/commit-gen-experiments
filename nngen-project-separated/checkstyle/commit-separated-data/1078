BLEU SCORE: 0.021721299903135396

TEST MSG: Issue # 2999 : allow regex in subpackage and importcontrol element
GENERATED MSG: Enhanced the ImportContro check to support regular expressions . Thanks to lbaeumer for patch # 2937442 .

TEST DIFF (one line): diff - - git a / config / import - control . xml b / config / import - control . xml <nl> index b0a9ed0 . . d30d6e8 100644 <nl> - - - a / config / import - control . xml <nl> + + + b / config / import - control . xml <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> < ? xml version = " 1 . 0 " ? > <nl> < ! DOCTYPE import - control PUBLIC <nl> - " - / / Puppy Crawl / / DTD Import Control 1 . 1 / / EN " <nl> - " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 1 . dtd " > <nl> + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " <nl> + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > <nl> <nl> < import - control pkg = " com . puppycrawl . tools . checkstyle " > <nl> <nl> @ @ - 110 , 7 + 110 , 7 @ @ <nl> <nl> < subpackage name = " doclets " > <nl> < allow pkg = " com . sun . javadoc " / > <nl> - < disallow pkg = " com . puppycrawl . tools . checkstyle . ( checks | ant | filters | gui ) " regex = " true " / > <nl> + < disallow pkg = " com \ . puppycrawl \ . tools \ . checkstyle \ . ( checks | ant | filters | gui ) " regex = " true " / > <nl> < / subpackage > <nl> <nl> < subpackage name = " filters " > <nl> @ @ - 119 , 15 + 119 , 15 @ @ <nl> < allow class = " com . google . common . base . CaseFormat " local - only = " true " / > <nl> < allow class = " com . google . common . collect . ImmutableCollection " local - only = " true " / > <nl> < allow class = " com . google . common . collect . ImmutableMap " local - only = " true " / > <nl> - < ! - - is not possible till pkg is not a regexp - - > <nl> - < ! - - < disallow pkg = " com . puppycrawl . tools . checkstyle . checks . * " / > - - > <nl> - < disallow pkg = " com . puppycrawl . tools . checkstyle . ( ant | doclets | gui ) " regex = " true " / > <nl> + < ! - - check ' s subpackages - - > <nl> + < disallow pkg = " com \ . puppycrawl \ . tools \ . checkstyle \ . checks \ . [ ^ . ] + " regex = " true " / > <nl> + < disallow pkg = " com \ . puppycrawl \ . tools \ . checkstyle \ . ( ant | doclets | gui ) " regex = " true " / > <nl> < / subpackage > <nl> <nl> < subpackage name = " gui " > <nl> < allow pkg = " java . awt " / > <nl> < allow pkg = " javax . swing " / > <nl> - < disallow pkg = " com . puppycrawl . tools . checkstyle . ( checks | ant | doclets | filters ) " regex = " true " / > <nl> + < disallow pkg = " com \ . puppycrawl \ . tools \ . checkstyle \ . ( checks | ant | doclets | filters ) " regex = " true " / > <nl> < / subpackage > <nl> <nl> < subpackage name = " internal " > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java <nl> index 7c11ba9 . . 021c2a0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java <nl> @ @ - 96 , 11 + 96 , 13 @ @ final class ImportControlLoader extends AbstractLoader { <nl> throws SAXException { <nl> if ( " import - control " . equals ( qName ) ) { <nl> final String pkg = safeGet ( attributes , PKG _ ATTRIBUTE _ NAME ) ; <nl> - stack . push ( new PkgControl ( pkg ) ) ; <nl> + final boolean regex = containsRegexAttribute ( attributes ) ; <nl> + stack . push ( new PkgControl ( pkg , regex ) ) ; <nl> } <nl> else if ( SUBPACKAGE _ ELEMENT _ NAME . equals ( qName ) ) { <nl> final String name = safeGet ( attributes , " name " ) ; <nl> - stack . push ( new PkgControl ( stack . peek ( ) , name ) ) ; <nl> + final boolean regex = containsRegexAttribute ( attributes ) ; <nl> + stack . push ( new PkgControl ( stack . peek ( ) , name , regex ) ) ; <nl> } <nl> else if ( ALLOW _ ELEMENT _ NAME . equals ( qName ) | | " disallow " . equals ( qName ) ) { <nl> / / Need to handle either " pkg " or " class " attribute . <nl> @ @ - 109 , 7 + 111 , 7 @ @ final class ImportControlLoader extends AbstractLoader { <nl> final boolean isAllow = ALLOW _ ELEMENT _ NAME . equals ( qName ) ; <nl> final boolean isLocalOnly = attributes . getValue ( " local - only " ) ! = null ; <nl> final String pkg = attributes . getValue ( PKG _ ATTRIBUTE _ NAME ) ; <nl> - final boolean regex = attributes . getValue ( " regex " ) ! = null ; <nl> + final boolean regex = containsRegexAttribute ( attributes ) ; <nl> final Guard guard ; <nl> if ( pkg = = null ) { <nl> / / handle class names which can be normal class names or regular <nl> @ @ - 128 , 6 + 130 , 15 @ @ final class ImportControlLoader extends AbstractLoader { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Check if the given attributes contain the regex attribute . <nl> + * @ param attributes the attributes . <nl> + * @ return if the regex attribute is contained . <nl> + * / <nl> + private static boolean containsRegexAttribute ( final Attributes attributes ) { <nl> + return attributes . getValue ( " regex " ) ! = null ; <nl> + } <nl> + <nl> @ Override <nl> public void endElement ( final String namespaceUri , final String localName , <nl> final String qName ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java <nl> index aad8d40 . . 22668b3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . util . ArrayList ; <nl> import java . util . Deque ; <nl> import java . util . LinkedList ; <nl> import java . util . List ; <nl> + import java . util . regex . Pattern ; <nl> <nl> / * * <nl> * Represents the a tree of guards for controlling whether packages are allowed <nl> @ @ - 32 , 6 + 33 , 12 @ @ import java . util . List ; <nl> * @ author Oliver Burn <nl> * / <nl> class PkgControl { <nl> + / * * The package separator : " . " * / <nl> + private static final String DOT = " . " ; <nl> + / * * A pattern matching the package separator : " . " * / <nl> + private static final Pattern DOT _ PATTERN = Pattern . compile ( DOT , Pattern . LITERAL ) ; <nl> + / * * The regex for the package separator : " \ \ . " . * / <nl> + private static final String DOT _ REGEX = " \ \ . " ; <nl> / * * List of { @ link Guard } objects to check . * / <nl> private final Deque < Guard > guards = new LinkedList < > ( ) ; <nl> / * * List of children { @ link PkgControl } objects . * / <nl> @ @ - 40 , 28 + 47 , 139 @ @ class PkgControl { <nl> private final PkgControl parent ; <nl> / * * The full package name for the node . * / <nl> private final String fullPackage ; <nl> + / * * <nl> + * The regex pattern for partial match ( exact and for subpackages ) - only not <nl> + * null if regex is true . <nl> + * / <nl> + private final Pattern patternForPartialMatch ; <nl> + / * * The regex pattern for exact matches - only not null if regex is true . * / <nl> + private final Pattern patternForExactMatch ; <nl> + / * * If this package represents a regular expression . * / <nl> + private final boolean regex ; <nl> <nl> / * * <nl> * Construct a root node . <nl> * @ param pkgName the name of the package . <nl> + * @ param regex flags interpretation of pkgName as regex pattern . <nl> * / <nl> - PkgControl ( final String pkgName ) { <nl> + PkgControl ( final String pkgName , final boolean regex ) { <nl> parent = null ; <nl> - fullPackage = pkgName ; <nl> + this . regex = regex ; <nl> + if ( regex ) { <nl> + / / ensure that fullPackage is a self - contained regular expression <nl> + fullPackage = encloseInGroup ( pkgName ) ; <nl> + patternForPartialMatch = createPatternForPartialMatch ( fullPackage ) ; <nl> + patternForExactMatch = createPatternForExactMatch ( fullPackage ) ; <nl> + } <nl> + else { <nl> + fullPackage = pkgName ; <nl> + patternForPartialMatch = null ; <nl> + patternForExactMatch = null ; <nl> + } <nl> } <nl> <nl> / * * <nl> - * Construct a child node . <nl> + * Construct a child node . The concatenation of regular expressions needs special care : <nl> + * see { @ link # ensureSelfContainedRegex ( String , boolean ) } for more details . <nl> * @ param parent the parent node . <nl> * @ param subPkg the sub package name . <nl> + * @ param regex flags interpretation of subPkg as regex pattern . <nl> * / <nl> - PkgControl ( final PkgControl parent , final String subPkg ) { <nl> + PkgControl ( final PkgControl parent , final String subPkg , final boolean regex ) { <nl> this . parent = parent ; <nl> - fullPackage = parent . fullPackage + " . " + subPkg ; <nl> + if ( regex | | parent . regex ) { <nl> + / / regex gets inherited <nl> + final String parentRegex = ensureSelfContainedRegex ( parent . fullPackage , parent . regex ) ; <nl> + final String thisRegex = ensureSelfContainedRegex ( subPkg , regex ) ; <nl> + fullPackage = parentRegex + DOT _ REGEX + thisRegex ; <nl> + patternForPartialMatch = createPatternForPartialMatch ( fullPackage ) ; <nl> + patternForExactMatch = createPatternForExactMatch ( fullPackage ) ; <nl> + this . regex = true ; <nl> + } <nl> + else { <nl> + fullPackage = parent . fullPackage + DOT + subPkg ; <nl> + patternForPartialMatch = null ; <nl> + patternForExactMatch = null ; <nl> + this . regex = false ; <nl> + } <nl> parent . children . add ( this ) ; <nl> } <nl> <nl> / * * <nl> + * Returns a regex that is suitable for concatenation by 1 ) either converting a plain string <nl> + * into a regular expression ( handling special characters ) or 2 ) by enclosing { @ code input } in <nl> + * a ( non - capturing ) group if { @ code input } already is a regular expression . <nl> + * <nl> + * < p > 1 ) When concatenating a non - regex package component ( like " org . google " ) with a regex <nl> + * component ( like " [ ^ . ] + " ) the other component has to be converted into a regex too , see <nl> + * { @ link # toRegex ( String ) } . <nl> + * <nl> + * < p > 2 ) The grouping is strictly necessary if a ) { @ code input } is a regular expression that b ) <nl> + * contains the alteration character ( ' | ' ) and if c ) the pattern is not already enclosed in a <nl> + * group - as you see in this example : { @ code parent = " com | org " , child = " common | uncommon " } will <nl> + * result in the pattern { @ code " ( ? : org | com ) \ . ( ? common | uncommon ) " } what will match <nl> + * { @ code " com . common " } , { @ code " com . uncommon " } , { @ code " org . common " } , and { @ code <nl> + * " org . uncommon " } . Without the grouping it would be { @ code " com | org . common | uncommon " } which <nl> + * would match { @ code " com " } , { @ code " org . common " } , and { @ code " uncommon " } , which clearly is <nl> + * undesirable . Adding the group fixes this . <nl> + * <nl> + * < p > For simplicity the grouping is added to regular expressions unconditionally . <nl> + * <nl> + * @ param input the input string . <nl> + * @ param alreadyRegex signals if input already is a regular expression . <nl> + * @ return a regex string . <nl> + * / <nl> + private static String ensureSelfContainedRegex ( final String input , final boolean alreadyRegex ) { <nl> + final String result ; <nl> + if ( alreadyRegex ) { <nl> + result = encloseInGroup ( input ) ; <nl> + } <nl> + else { <nl> + result = toRegex ( input ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> + * Enclose { @ code expression } in a ( non - capturing ) group . <nl> + * @ param expression the input regular expression <nl> + * @ return a grouped pattern . <nl> + * / <nl> + private static String encloseInGroup ( String expression ) { <nl> + return " ( ? : " + expression + " ) " ; <nl> + } <nl> + <nl> + / * * <nl> + * Converts a normal package name into a regex pattern by escaping all <nl> + * special characters that may occur in a java package name . <nl> + * @ param input the input string . <nl> + * @ return a regex string . <nl> + * / <nl> + private static String toRegex ( String input ) { <nl> + return DOT _ PATTERN . matcher ( input ) . replaceAll ( DOT _ REGEX ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates a Pattern from { @ code expression } that matches exactly and child packages . <nl> + * @ param expression a self - contained regular expression matching the full package exactly . <nl> + * @ return a Pattern . <nl> + * / <nl> + private static Pattern createPatternForPartialMatch ( String expression ) { <nl> + / / javadoc of encloseInGroup ( ) explains how to concatenate regular expressions <nl> + / / no grouping needs to be added to fullPackage since this already have been done . <nl> + return Pattern . compile ( expression + " ( ? : \ \ . . * ) ? " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates a Pattern from { @ code expression } . <nl> + * @ param expression a self - contained regular expression matching the full package exactly . <nl> + * @ return a Pattern . <nl> + * / <nl> + private static Pattern createPatternForExactMatch ( String expression ) { <nl> + return Pattern . compile ( expression ) ; <nl> + } <nl> + <nl> + / * * <nl> * Adds a guard to the node . <nl> * @ param thug the guard to be added . <nl> * / <nl> @ @ - 77 , 9 + 195 , 7 @ @ class PkgControl { <nl> public PkgControl locateFinest ( final String forPkg ) { <nl> PkgControl finestMatch = null ; <nl> / / Check if we are a match . <nl> - / / This algorithm should be improved to check for a trailing " . " <nl> - / / or nothing following . <nl> - if ( forPkg . startsWith ( fullPackage ) ) { <nl> + if ( matchesAtFront ( forPkg ) ) { <nl> / / If there won ' t be match so I am the best there is . <nl> finestMatch = this ; <nl> / / Check if any of the children match . <nl> @ @ - 95 , 6 + 211 , 34 @ @ class PkgControl { <nl> } <nl> <nl> / * * <nl> + * Matches other package name exactly or partially at front . <nl> + * @ param pkg the package to compare with . <nl> + * @ return if it matches . <nl> + * / <nl> + private boolean matchesAtFront ( final String pkg ) { <nl> + final boolean result ; <nl> + if ( regex ) { <nl> + result = patternForPartialMatch . matcher ( pkg ) . matches ( ) ; <nl> + } <nl> + else { <nl> + result = matchesAtFrontNoRegex ( pkg ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> + * Non - regex case . Ensure a trailing dot for subpackages , i . e . " com . puppy " <nl> + * will match " com . puppy . crawl " but not " com . puppycrawl . tools " . <nl> + * @ param pkg the package to compare with . <nl> + * @ return if it matches . <nl> + * / <nl> + private boolean matchesAtFrontNoRegex ( final String pkg ) { <nl> + return pkg . startsWith ( fullPackage ) <nl> + & & ( pkg . length ( ) = = fullPackage . length ( ) <nl> + | | pkg . charAt ( fullPackage . length ( ) ) = = ' . ' ) ; <nl> + } <nl> + <nl> + / * * <nl> * Returns whether a package is allowed to be used . The algorithm checks <nl> * with the current node for a result , and if none is found then calls <nl> * its parent looking for a match . This will recurse looking for match . <nl> @ @ - 131 , 7 + 275 , 7 @ @ class PkgControl { <nl> final String inPkg ) { <nl> for ( Guard g : guards ) { <nl> / / Check if a Guard is only meant to be applied locally . <nl> - if ( g . isLocalOnly ( ) & & ! fullPackage . equals ( inPkg ) ) { <nl> + if ( g . isLocalOnly ( ) & & ! matchesExactly ( inPkg ) ) { <nl> continue ; <nl> } <nl> final AccessResult result = g . verifyImport ( forImport ) ; <nl> @ @ - 141 , 4 + 285 , 20 @ @ class PkgControl { <nl> } <nl> return AccessResult . UNKNOWN ; <nl> } <nl> + <nl> + / * * <nl> + * Check for equality of this with pkg <nl> + * @ param pkg the package to compare with . <nl> + * @ return if it matches . <nl> + * / <nl> + private boolean matchesExactly ( final String pkg ) { <nl> + final boolean result ; <nl> + if ( regex ) { <nl> + result = patternForExactMatch . matcher ( pkg ) . matches ( ) ; <nl> + } <nl> + else { <nl> + result = fullPackage . equals ( pkg ) ; <nl> + } <nl> + return result ; <nl> + } <nl> } <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / imports / import _ control _ 1 _ 2 . dtd b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / imports / import _ control _ 1 _ 2 . dtd <nl> new file mode 100644 <nl> index 0000000 . . 84d6fe6 <nl> - - - / dev / null <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / imports / import _ control _ 1 _ 2 . dtd <nl> @ @ - 0 , 0 + 1 , 78 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> + <nl> + < ! - - Add the following to any file that is to be validated against this DTD : <nl> + <nl> + < ! DOCTYPE module PUBLIC <nl> + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " <nl> + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > <nl> + - - > <nl> + <nl> + < ! - - <nl> + The root element of the configuration file . <nl> + - - > <nl> + < ! ELEMENT import - control ( ( allow | disallow ) * , subpackage * ) > <nl> + <nl> + < ! - - <nl> + pkg - The root package to be checked . For example " com . puppycrawl " . <nl> + - - > <nl> + < ! ATTLIST import - control <nl> + pkg CDATA # REQUIRED <nl> + regex ( true ) # IMPLIED > <nl> + <nl> + < ! - - <nl> + Represents a subpackage of the parent element . <nl> + - - > <nl> + < ! ELEMENT subpackage ( ( allow | disallow ) * , subpackage * ) > <nl> + <nl> + < ! - - <nl> + name - The name of the subpackage . For example if the name is " tools " <nl> + and the pa the parent is " com . puppycrawl " , then it corresponds to the <nl> + package " com . puppycrawl . tools " . If the regex attribute is " true " the <nl> + name is interpreted as a regular expression . <nl> + - - > <nl> + < ! ATTLIST subpackage <nl> + name CDATA # REQUIRED <nl> + regex ( true ) # IMPLIED > <nl> + <nl> + < ! - - <nl> + Represents attributes for a guard which can either allow or disallow <nl> + access . <nl> + <nl> + pkg - The fully qualified name of the package to guard . Cannot be <nl> + specified in conjunction with " class " . <nl> + <nl> + class - The fully qualified name of the class to guard . Cannot be <nl> + specified in conjunction with " pkg " . <nl> + <nl> + exact - match - Only valid with " pkg " . Specifies whether the package <nl> + name matching should be exact . For example , the pkg <nl> + " com . puppycrawl . tools " will match the import <nl> + " com . puppycrawl . tools . checkstyle . api . * " when the option is not set , <nl> + but will not match is the option is set . <nl> + <nl> + local - only - Indicates that the guard is to apply only to the current <nl> + package and not to subpackages . <nl> + <nl> + regex - Indicates that the class or package name has to be interpreted as <nl> + regular expression . <nl> + - - > <nl> + < ! ENTITY % attlist . guard " <nl> + pkg CDATA # IMPLIED <nl> + exact - match ( true ) # IMPLIED <nl> + class CDATA # IMPLIED <nl> + local - only ( true ) # IMPLIED <nl> + regex ( true ) # IMPLIED " > <nl> + <nl> + < ! - - <nl> + Represents a guard that will allow access . <nl> + - - > <nl> + < ! ELEMENT allow EMPTY > <nl> + < ! ATTLIST allow <nl> + % attlist . guard ; > <nl> + <nl> + < ! - - <nl> + Represents a guard that will disallow access . <nl> + - - > <nl> + < ! ELEMENT disallow EMPTY > <nl> + < ! ATTLIST disallow <nl> + % attlist . guard ; > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> index 44e2592 . . 470b7e8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> @ @ - 178 , 6 + 178 , 30 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testPkgRegExpInParent ( ) throws Exception { <nl> + testRegExpInPackage ( " import - control _ pkg - re - in - parent . xml " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testPkgRegExpInChild ( ) throws Exception { <nl> + testRegExpInPackage ( " import - control _ pkg - re - in - child . xml " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testPkgRegExpInBoth ( ) throws Exception { <nl> + testRegExpInPackage ( " import - control _ pkg - re - in - both . xml " ) ; <nl> + } <nl> + <nl> + / / all import - control _ pkg - re * files should be equivalent so use one test for all <nl> + private void testRegExpInPackage ( String file ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( ImportControlCheck . class ) ; <nl> + checkConfig . addAttribute ( " file " , getPath ( file ) ) ; <nl> + final String [ ] expected = { " 5 : 1 : " + getCheckMessage ( MSG _ DISALLOWED , " java . io . File " ) } ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputImportControl . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testGetAcceptableTokens ( ) { <nl> final ImportControlCheck testCheckObject = <nl> new ImportControlCheck ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpInPkgTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpInPkgTest . java <nl> new file mode 100644 <nl> index 0000000 . . 373877d <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpInPkgTest . java <nl> @ @ - 0 , 0 + 1 , 92 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNull ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + public class PkgControlRegExpInPkgTest { <nl> + private final PkgControl pcRoot = new PkgControl ( " com \ \ . [ ^ . ] + \ \ . courtlink " , true ) ; <nl> + private final PkgControl pcCommon = new PkgControl ( pcRoot , " com + on " , true ) ; <nl> + <nl> + @ Test <nl> + public void testRegExpInRootIsConsidered ( ) { <nl> + assertNull ( pcRoot . locateFinest ( " com " ) ) ; <nl> + assertNull ( pcRoot . locateFinest ( " com / hurz / courtlink " ) ) ; <nl> + assertNull ( pcRoot . locateFinest ( " com . hurz . hurz . courtlink " ) ) ; <nl> + assertEquals ( pcRoot , pcRoot <nl> + . locateFinest ( " com . hurz . courtlink . domain " ) ) ; <nl> + assertEquals ( pcRoot , pcRoot <nl> + . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegExpInSubpackageIsConsidered ( ) { <nl> + assertEquals ( pcCommon , pcRoot <nl> + . locateFinest ( " com . kazgroup . courtlink . common . api " ) ) ; <nl> + assertEquals ( pcCommon , pcRoot <nl> + . locateFinest ( " com . kazgroup . courtlink . comon . api " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testEnsureTrailingDot ( ) { <nl> + assertNull ( pcRoot . locateFinest ( " com . kazgroup . courtlinkkk " ) ) ; <nl> + assertNull ( pcRoot . locateFinest ( " com . kazgroup . courtlink / common . api " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAlternationInParentIsHandledCorrectly ( ) { <nl> + / / the regular expression has to be adjusted to ( com \ . foo | com \ . bar ) <nl> + final PkgControl root = new PkgControl ( " com \ \ . foo | com \ \ . bar " , true ) ; <nl> + final PkgControl common = new PkgControl ( root , " common " , false ) ; <nl> + assertEquals ( root , root . locateFinest ( " com . foo " ) ) ; <nl> + assertEquals ( common , root . locateFinest ( " com . foo . common " ) ) ; <nl> + assertEquals ( root , root . locateFinest ( " com . bar " ) ) ; <nl> + assertEquals ( common , root . locateFinest ( " com . bar . common " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAlternationInParentIfUserCaresForIt ( ) { <nl> + / / the regular expression has to be adjusted to ( com \ . foo | com \ . bar ) <nl> + final PkgControl root = new PkgControl ( " ( com \ \ . foo | com \ \ . bar ) " , true ) ; <nl> + final PkgControl common = new PkgControl ( root , " common " , false ) ; <nl> + assertEquals ( root , root . locateFinest ( " com . foo " ) ) ; <nl> + assertEquals ( common , root . locateFinest ( " com . foo . common " ) ) ; <nl> + assertEquals ( root , root . locateFinest ( " com . bar " ) ) ; <nl> + assertEquals ( common , root . locateFinest ( " com . bar . common " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAlternationInSubpackageIsHandledCorrectly ( ) { <nl> + final PkgControl root = new PkgControl ( " org . somewhere " , false ) ; <nl> + / / the regular expression has to be adjusted to ( foo | bar ) <nl> + final PkgControl subpackages = new PkgControl ( root , " foo | bar " , true ) ; <nl> + assertEquals ( root , root . locateFinest ( " org . somewhere " ) ) ; <nl> + assertEquals ( subpackages , root . locateFinest ( " org . somewhere . foo " ) ) ; <nl> + assertEquals ( subpackages , root . locateFinest ( " org . somewhere . bar " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testUnknownPkg ( ) { <nl> + assertNull ( pcRoot . locateFinest ( " net . another " ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java <nl> index b5079f1 . . 833604b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java <nl> @ @ - 26 , 8 + 26 , 8 @ @ import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> public class PkgControlRegExpTest { <nl> - private final PkgControl pcRoot = new PkgControl ( " com . kazgroup . courtlink " ) ; <nl> - private final PkgControl pcCommon = new PkgControl ( pcRoot , " common " ) ; <nl> + private final PkgControl pcRoot = new PkgControl ( " com . kazgroup . courtlink " , false ) ; <nl> + private final PkgControl pcCommon = new PkgControl ( pcRoot , " common " , false ) ; <nl> <nl> @ Before <nl> public void setUp ( ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java <nl> index 189dfee . . 8864456 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java <nl> @ @ - 26 , 8 + 26 , 8 @ @ import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> public class PkgControlTest { <nl> - private final PkgControl pcRoot = new PkgControl ( " com . kazgroup . courtlink " ) ; <nl> - private final PkgControl pcCommon = new PkgControl ( pcRoot , " common " ) ; <nl> + private final PkgControl pcRoot = new PkgControl ( " com . kazgroup . courtlink " , false ) ; <nl> + private final PkgControl pcCommon = new PkgControl ( pcRoot , " common " , false ) ; <nl> <nl> @ Before <nl> public void setUp ( ) { <nl> @ @ - 48 , 6 + 48 , 12 @ @ public class PkgControlTest { <nl> } <nl> <nl> @ Test <nl> + public void testEnsureTrailingDot ( ) { <nl> + assertNull ( pcRoot . locateFinest ( " com . kazgroup . courtlinkkk " ) ) ; <nl> + assertNull ( pcRoot . locateFinest ( " com . kazgroup . courtlink / common . api " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testCheckAccess ( ) { <nl> assertEquals ( AccessResult . DISALLOWED , pcCommon . checkAccess ( <nl> " org . springframework . something " , <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ one - re . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ one - re . xml <nl> index 0330a95 . . 9942654 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ one - re . xml <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ one - re . xml <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> < ? xml version = " 1 . 0 " ? > <nl> < ! DOCTYPE import - control PUBLIC <nl> - " - / / Puppy Crawl / / DTD Import Control 1 . 1 / / EN " <nl> - " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 1 . dtd " > <nl> + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " <nl> + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > <nl> <nl> < import - control pkg = " com . puppycrawl . tools . checkstyle . checks " > <nl> < allow class = " java \ . awt . Image " regex = " true " / > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - both . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - both . xml <nl> new file mode 100644 <nl> index 0000000 . . 2a225d4 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - both . xml <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + < ? xml version = " 1 . 0 " ? > <nl> + < ! DOCTYPE import - control PUBLIC <nl> + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " <nl> + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > <nl> + <nl> + < import - control pkg = " com \ . puppycrawl \ . [ ^ . ] * \ . checkstyle \ . [ ^ . ] * " regex = " true " > <nl> + < allow class = " java . awt . Image " / > <nl> + < allow class = " java . awt . Button . ABORT " / > <nl> + < allow class = " java . io . File " local - only = " true " / > <nl> + < subpackage name = " imp . rts " regex = " true " > <nl> + < allow pkg = " javax . swing " / > <nl> + < / subpackage > <nl> + < / import - control > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - child . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - child . xml <nl> new file mode 100644 <nl> index 0000000 . . 4b1d8e8 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - child . xml <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + < ? xml version = " 1 . 0 " ? > <nl> + < ! DOCTYPE import - control PUBLIC <nl> + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " <nl> + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > <nl> + <nl> + < import - control pkg = " com . puppycrawl . tools . checkstyle . checks " > <nl> + < allow class = " java . awt . Image " / > <nl> + < allow class = " java . awt . Button . ABORT " / > <nl> + < allow class = " java . io . File " local - only = " true " / > <nl> + < subpackage name = " imp . rts " regex = " true " > <nl> + < allow pkg = " javax . swing " / > <nl> + < / subpackage > <nl> + < / import - control > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - parent . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - parent . xml <nl> new file mode 100644 <nl> index 0000000 . . a617290 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - parent . xml <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + < ? xml version = " 1 . 0 " ? > <nl> + < ! DOCTYPE import - control PUBLIC <nl> + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " <nl> + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > <nl> + <nl> + < import - control pkg = " com \ . puppycrawl \ . [ ^ . ] * \ . checkstyle \ . [ ^ . ] * " regex = " true " > <nl> + < allow class = " java . awt . Image " / > <nl> + < allow class = " java . awt . Button . ABORT " / > <nl> + < allow class = " java . io . File " local - only = " true " / > <nl> + < subpackage name = " imports " > <nl> + < allow pkg = " javax . swing " / > <nl> + < / subpackage > <nl> + < / import - control > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ two - re . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ two - re . xml <nl> index 9105f05 . . 8e526ed 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ two - re . xml <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ two - re . xml <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> < ? xml version = " 1 . 0 " ? > <nl> < ! DOCTYPE import - control PUBLIC <nl> - " - / / Puppy Crawl / / DTD Import Control 1 . 1 / / EN " <nl> - " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 1 . dtd " > <nl> + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " <nl> + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > <nl> <nl> < import - control pkg = " com . puppycrawl . tools . checkstyle . checks " > <nl> < allow class = " java \ . awt \ . Image " regex = " true " / > <nl> diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml <nl> index 60b6442 . . d89a11f 100644 <nl> - - - a / src / xdocs / config _ imports . xml <nl> + + + b / src / xdocs / config _ imports . xml <nl> @ @ - 677 , 8 + 677 , 8 @ @ import android . * ; <nl> <nl> < p > <nl> The DTD for a import control XML document is at < a <nl> - href = " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 1 . dtd " > <nl> - http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 1 . dtd < / a > . It <nl> + href = " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > <nl> + http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd < / a > . It <nl> contains documentation on each of the elements and attributes . <nl> < / p > <nl> <nl> @ @ - 690 , 8 + 690 , 8 @ @ import android . * ; <nl> <nl> < pre > <nl> & lt ; ! DOCTYPE import - control PUBLIC <nl> - & quot ; - / / Puppy Crawl / / DTD Import Control 1 . 1 / / EN & quot ; <nl> - & quot ; http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 1 . dtd & quot ; & gt ; <nl> + & quot ; - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN & quot ; <nl> + & quot ; http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd & quot ; & gt ; <nl> < / pre > <nl> < / subsection > <nl> <nl> @ @ - 735 , 25 + 735 , 107 @ @ import android . * ; <nl> < / source > <nl> <nl> < p > <nl> - In the example below , all classes beginning with an I in the package <nl> - java . awt are allowed . In the package java . io only the classes File <nl> - and InputStream are allowed . <nl> + In the example below access to package <nl> + < code > com . puppycrawl . tools . checkstyle . checks < / code > and its subpackages is <nl> + allowed from anywhere in < code > com . puppycrawl . tools . checkstyle < / code > except <nl> + from the < code > filters < / code > subpackage where access to all <nl> + < code > check < / code > ' s subpackages is disallowed . Two < code > java . lang . ref < / code > <nl> + classes are allowed by virtue of one regular expression instead of listing <nl> + them in two separate allow rules ( as it is done with the < code > Files < / code > <nl> + and < code > ClassPath < / code > classes ) . <nl> < / p > <nl> <nl> < source > <nl> & lt ; import - control pkg = & quot ; com . puppycrawl . tools . checkstyle & quot ; & gt ; <nl> - & lt ; allow class = & quot ; java \ . awt \ . I . * & quot ; regex = & quot ; true & quot ; / & gt ; <nl> - & lt ; allow class = & quot ; java \ . io \ . ( File | InputStream ) & quot ; local - only = & quot ; true & quot ; <nl> - regex = & quot ; true & quot ; / & gt ; <nl> + & lt ; allow pkg = & quot ; com . puppycrawl . tools . checkstyle . api & quot ; / & gt ; <nl> + & lt ; allow pkg = & quot ; com . puppycrawl . tools . checkstyle . checks & quot ; / & gt ; <nl> + & lt ; allow class = & quot ; com . google . common . io . Files & quot ; / & gt ; <nl> + & lt ; allow class = & quot ; com . google . common . reflect . ClassPath & quot ; / & gt ; <nl> + & lt ; subpackage name = & quot ; filters & quot ; & gt ; <nl> + & lt ; allow class = & quot ; java \ . lang \ . ref \ . ( Weak | Soft ) Reference & quot ; <nl> + regex = & quot ; true & quot ; / & gt ; <nl> + & lt ; disallow pkg = & quot ; com \ . puppycrawl \ . tools \ . checkstyle \ . checks \ . [ ^ . ] + & quot ; <nl> + regex = & quot ; true & quot ; / & gt ; <nl> + & lt ; disallow pkg = & quot ; com . puppycrawl . tools . checkstyle . ant & quot ; / & gt ; <nl> + & lt ; disallow pkg = & quot ; com . puppycrawl . tools . checkstyle . doclets & quot ; / & gt ; <nl> + & lt ; disallow pkg = & quot ; com . puppycrawl . tools . checkstyle . gui & quot ; / & gt ; <nl> + & lt ; / subpackage & gt ; <nl> & lt ; / import - control & gt ; <nl> < / source > <nl> <nl> < p > <nl> - For an example import control file , look at the file called < a <nl> + In the next example regular expressions are used to enforce a layering rule : In all <nl> + < code > dao < / code > packages it is not allowed to access UI layer code ( < code > ui < / code > , <nl> + < code > awt < / code > , and < code > swing < / code > ) . On the other hand it is not allowed to directly <nl> + access < code > dao < / code > and < code > service < / code > layer from < code > ui < / code > packages . The <nl> + root package is also a regular expression that is used to handle old and new domain name <nl> + with the same rules . <nl> + < / p > <nl> + <nl> + < source > <nl> + & lt ; import - control pkg = & quot ; ( de . olddomain | de . newdomain ) \ . . * & quot ; regex = & quot ; true & quot ; & gt ; <nl> + & lt ; subpackage pkg = & quot ; [ ^ . ] + \ . dao & quot ; regex = & quot ; true & quot ; & gt ; <nl> + & lt ; disallow pkg = & quot ; . * \ . ui & quot ; regex = & quot ; true & quot ; / & gt ; <nl> + & lt ; disallow pkg = & quot ; . * \ . ( awt | swing ) . \ . * & quot ; regex = & quot ; true & quot ; / & gt ; <nl> + & lt ; / subpackage & gt ; <nl> + & lt ; subpackage pkg = & quot ; [ ^ . ] + \ . ui & quot ; regex = & quot ; true & quot ; & gt ; <nl> + & lt ; disallow pkg = & quot ; . * \ . ( dao | service ) & quot ; regex = & quot ; true & quot ; / & gt ; <nl> + & lt ; / subpackage & gt ; <nl> + & lt ; / import - control & gt ; <nl> + < / source > <nl> + <nl> + < p > <nl> + For a real - life import control file look at the file called < a <nl> href = " https : / / github . com / checkstyle / checkstyle / blob / master / config / import - control . xml " > <nl> import - control . xml < / a > <nl> which is part of the Checkstyle distribution . <nl> < / p > <nl> + <nl> + < h4 id = " regex - notes " > Notes on regular expressions < / h4 > <nl> + < p > <nl> + Regular expressions in import rules have to match either Java packages or <nl> + classes . The language rules for packages and class names can be described by the <nl> + following complicated regular expression that takes into account that Java names may <nl> + contain any unicode letter , numbers , underscores , and dollar signs ( see section 3 . 8 <nl> + in the < a href = " http : / / docs . oracle . com / javase / specs / " > Java specs < / a > ) : <nl> + < / p > <nl> + < ul > <nl> + < li > <nl> + < code > [ \ p { Letter } _ $ ] [ \ p { Letter } \ p { Number } _ $ ] * < / code > or short <nl> + < code > [ \ p { L } _ $ ] [ \ p { L } \ p { N } _ $ ] * < / code > for a class name or package component . <nl> + < / li > <nl> + < li > <nl> + < code > ( [ \ p { L } _ $ ] [ \ p { L } \ p { N } _ $ ] * \ . ) * [ \ p { L } _ $ ] [ \ p { L } \ p { N } _ $ ] * < / code > <nl> + for a fully qualified name . <nl> + < / li > <nl> + < / ul > <nl> + < p > <nl> + But it is not necessary to use these complicated expressions since no validation is <nl> + required . Differentiating between package separator ' . ' and others is <nl> + sufficient . Unfortunately ' . ' has a special meaning in regular expressions so one has <nl> + to write < code > \ . < / code > to match an actual dot . <nl> + < / p > <nl> + < ul > <nl> + < li > <nl> + Use < code > [ ^ . ] + < / code > ( one or more " not a dot " characters ) for a class name or <nl> + package component . <nl> + < / li > <nl> + < li > <nl> + Use < code > com \ . google \ . common \ . [ ^ . ] + < / code > to match any subpackage of <nl> + < code > com . google . common < / code > . <nl> + < / li > <nl> + < li > <nl> + When matching concrete packages like < code > com . google . common < / code > omitting the <nl> + backslash before the dots may improve readability and may be just exact enough : <nl> + < code > com . google . common \ . [ ^ . ] + < / code > matches not only subpackages of <nl> + < code > com . google . common < / code > but e . g . also of < code > com . googleecommon < / code > but <nl> + you may not care for that . <nl> + < / li > <nl> + < li > <nl> + Do not use < code > . * < / code > unless you really do not care for what is matched . Often <nl> + you want to match only a certain package level instead . <nl> + < / li > <nl> + < / ul > <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index a42fe44 . . 4481fef 100755 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 14 , 7 + 14 , 7 @ @ <nl> < / license > <nl> < / licenses > <nl> < scm > <nl> - < url > http : / / checkstyle . cvs . sourceforge . net / checkstyle / < / url > <nl> + < url > https : / / checkstyle . svn . sourceforge . net / svnroot / checkstyle / trunk / checkstyle < / url > <nl> < / scm > <nl> < dependencies > <nl> < dependency > <nl> @ @ - 38 , 9 + 38 , 9 @ @ <nl> < version > 1 . 0 . 3 < / version > <nl> < / dependency > <nl> < dependency > <nl> - < groupId > com . google . code . google - collections < / groupId > <nl> - < artifactId > google - collect < / artifactId > <nl> - < version > snapshot - 20080321 < / version > <nl> + < groupId > com . google . collections < / groupId > <nl> + < artifactId > google - collections < / artifactId > <nl> + < version > 0 . 9 < / version > <nl> < / dependency > <nl> < / dependencies > <nl> < / project >

TEST DIFF:
diff - - git a / config / import - control . xml b / config / import - control . xml 
 index b0a9ed0 . . d30d6e8 100644 
 - - - a / config / import - control . xml 
 + + + b / config / import - control . xml 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 < ? xml version = " 1 . 0 " ? > 
 < ! DOCTYPE import - control PUBLIC 
 - " - / / Puppy Crawl / / DTD Import Control 1 . 1 / / EN " 
 - " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 1 . dtd " > 
 + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " 
 + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > 
 
 < import - control pkg = " com . puppycrawl . tools . checkstyle " > 
 
 @ @ - 110 , 7 + 110 , 7 @ @ 
 
 < subpackage name = " doclets " > 
 < allow pkg = " com . sun . javadoc " / > 
 - < disallow pkg = " com . puppycrawl . tools . checkstyle . ( checks | ant | filters | gui ) " regex = " true " / > 
 + < disallow pkg = " com \ . puppycrawl \ . tools \ . checkstyle \ . ( checks | ant | filters | gui ) " regex = " true " / > 
 < / subpackage > 
 
 < subpackage name = " filters " > 
 @ @ - 119 , 15 + 119 , 15 @ @ 
 < allow class = " com . google . common . base . CaseFormat " local - only = " true " / > 
 < allow class = " com . google . common . collect . ImmutableCollection " local - only = " true " / > 
 < allow class = " com . google . common . collect . ImmutableMap " local - only = " true " / > 
 - < ! - - is not possible till pkg is not a regexp - - > 
 - < ! - - < disallow pkg = " com . puppycrawl . tools . checkstyle . checks . * " / > - - > 
 - < disallow pkg = " com . puppycrawl . tools . checkstyle . ( ant | doclets | gui ) " regex = " true " / > 
 + < ! - - check ' s subpackages - - > 
 + < disallow pkg = " com \ . puppycrawl \ . tools \ . checkstyle \ . checks \ . [ ^ . ] + " regex = " true " / > 
 + < disallow pkg = " com \ . puppycrawl \ . tools \ . checkstyle \ . ( ant | doclets | gui ) " regex = " true " / > 
 < / subpackage > 
 
 < subpackage name = " gui " > 
 < allow pkg = " java . awt " / > 
 < allow pkg = " javax . swing " / > 
 - < disallow pkg = " com . puppycrawl . tools . checkstyle . ( checks | ant | doclets | filters ) " regex = " true " / > 
 + < disallow pkg = " com \ . puppycrawl \ . tools \ . checkstyle \ . ( checks | ant | doclets | filters ) " regex = " true " / > 
 < / subpackage > 
 
 < subpackage name = " internal " > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java 
 index 7c11ba9 . . 021c2a0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java 
 @ @ - 96 , 11 + 96 , 13 @ @ final class ImportControlLoader extends AbstractLoader { 
 throws SAXException { 
 if ( " import - control " . equals ( qName ) ) { 
 final String pkg = safeGet ( attributes , PKG _ ATTRIBUTE _ NAME ) ; 
 - stack . push ( new PkgControl ( pkg ) ) ; 
 + final boolean regex = containsRegexAttribute ( attributes ) ; 
 + stack . push ( new PkgControl ( pkg , regex ) ) ; 
 } 
 else if ( SUBPACKAGE _ ELEMENT _ NAME . equals ( qName ) ) { 
 final String name = safeGet ( attributes , " name " ) ; 
 - stack . push ( new PkgControl ( stack . peek ( ) , name ) ) ; 
 + final boolean regex = containsRegexAttribute ( attributes ) ; 
 + stack . push ( new PkgControl ( stack . peek ( ) , name , regex ) ) ; 
 } 
 else if ( ALLOW _ ELEMENT _ NAME . equals ( qName ) | | " disallow " . equals ( qName ) ) { 
 / / Need to handle either " pkg " or " class " attribute . 
 @ @ - 109 , 7 + 111 , 7 @ @ final class ImportControlLoader extends AbstractLoader { 
 final boolean isAllow = ALLOW _ ELEMENT _ NAME . equals ( qName ) ; 
 final boolean isLocalOnly = attributes . getValue ( " local - only " ) ! = null ; 
 final String pkg = attributes . getValue ( PKG _ ATTRIBUTE _ NAME ) ; 
 - final boolean regex = attributes . getValue ( " regex " ) ! = null ; 
 + final boolean regex = containsRegexAttribute ( attributes ) ; 
 final Guard guard ; 
 if ( pkg = = null ) { 
 / / handle class names which can be normal class names or regular 
 @ @ - 128 , 6 + 130 , 15 @ @ final class ImportControlLoader extends AbstractLoader { 
 } 
 } 
 
 + / * * 
 + * Check if the given attributes contain the regex attribute . 
 + * @ param attributes the attributes . 
 + * @ return if the regex attribute is contained . 
 + * / 
 + private static boolean containsRegexAttribute ( final Attributes attributes ) { 
 + return attributes . getValue ( " regex " ) ! = null ; 
 + } 
 + 
 @ Override 
 public void endElement ( final String namespaceUri , final String localName , 
 final String qName ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java 
 index aad8d40 . . 22668b3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . util . ArrayList ; 
 import java . util . Deque ; 
 import java . util . LinkedList ; 
 import java . util . List ; 
 + import java . util . regex . Pattern ; 
 
 / * * 
 * Represents the a tree of guards for controlling whether packages are allowed 
 @ @ - 32 , 6 + 33 , 12 @ @ import java . util . List ; 
 * @ author Oliver Burn 
 * / 
 class PkgControl { 
 + / * * The package separator : " . " * / 
 + private static final String DOT = " . " ; 
 + / * * A pattern matching the package separator : " . " * / 
 + private static final Pattern DOT _ PATTERN = Pattern . compile ( DOT , Pattern . LITERAL ) ; 
 + / * * The regex for the package separator : " \ \ . " . * / 
 + private static final String DOT _ REGEX = " \ \ . " ; 
 / * * List of { @ link Guard } objects to check . * / 
 private final Deque < Guard > guards = new LinkedList < > ( ) ; 
 / * * List of children { @ link PkgControl } objects . * / 
 @ @ - 40 , 28 + 47 , 139 @ @ class PkgControl { 
 private final PkgControl parent ; 
 / * * The full package name for the node . * / 
 private final String fullPackage ; 
 + / * * 
 + * The regex pattern for partial match ( exact and for subpackages ) - only not 
 + * null if regex is true . 
 + * / 
 + private final Pattern patternForPartialMatch ; 
 + / * * The regex pattern for exact matches - only not null if regex is true . * / 
 + private final Pattern patternForExactMatch ; 
 + / * * If this package represents a regular expression . * / 
 + private final boolean regex ; 
 
 / * * 
 * Construct a root node . 
 * @ param pkgName the name of the package . 
 + * @ param regex flags interpretation of pkgName as regex pattern . 
 * / 
 - PkgControl ( final String pkgName ) { 
 + PkgControl ( final String pkgName , final boolean regex ) { 
 parent = null ; 
 - fullPackage = pkgName ; 
 + this . regex = regex ; 
 + if ( regex ) { 
 + / / ensure that fullPackage is a self - contained regular expression 
 + fullPackage = encloseInGroup ( pkgName ) ; 
 + patternForPartialMatch = createPatternForPartialMatch ( fullPackage ) ; 
 + patternForExactMatch = createPatternForExactMatch ( fullPackage ) ; 
 + } 
 + else { 
 + fullPackage = pkgName ; 
 + patternForPartialMatch = null ; 
 + patternForExactMatch = null ; 
 + } 
 } 
 
 / * * 
 - * Construct a child node . 
 + * Construct a child node . The concatenation of regular expressions needs special care : 
 + * see { @ link # ensureSelfContainedRegex ( String , boolean ) } for more details . 
 * @ param parent the parent node . 
 * @ param subPkg the sub package name . 
 + * @ param regex flags interpretation of subPkg as regex pattern . 
 * / 
 - PkgControl ( final PkgControl parent , final String subPkg ) { 
 + PkgControl ( final PkgControl parent , final String subPkg , final boolean regex ) { 
 this . parent = parent ; 
 - fullPackage = parent . fullPackage + " . " + subPkg ; 
 + if ( regex | | parent . regex ) { 
 + / / regex gets inherited 
 + final String parentRegex = ensureSelfContainedRegex ( parent . fullPackage , parent . regex ) ; 
 + final String thisRegex = ensureSelfContainedRegex ( subPkg , regex ) ; 
 + fullPackage = parentRegex + DOT _ REGEX + thisRegex ; 
 + patternForPartialMatch = createPatternForPartialMatch ( fullPackage ) ; 
 + patternForExactMatch = createPatternForExactMatch ( fullPackage ) ; 
 + this . regex = true ; 
 + } 
 + else { 
 + fullPackage = parent . fullPackage + DOT + subPkg ; 
 + patternForPartialMatch = null ; 
 + patternForExactMatch = null ; 
 + this . regex = false ; 
 + } 
 parent . children . add ( this ) ; 
 } 
 
 / * * 
 + * Returns a regex that is suitable for concatenation by 1 ) either converting a plain string 
 + * into a regular expression ( handling special characters ) or 2 ) by enclosing { @ code input } in 
 + * a ( non - capturing ) group if { @ code input } already is a regular expression . 
 + * 
 + * < p > 1 ) When concatenating a non - regex package component ( like " org . google " ) with a regex 
 + * component ( like " [ ^ . ] + " ) the other component has to be converted into a regex too , see 
 + * { @ link # toRegex ( String ) } . 
 + * 
 + * < p > 2 ) The grouping is strictly necessary if a ) { @ code input } is a regular expression that b ) 
 + * contains the alteration character ( ' | ' ) and if c ) the pattern is not already enclosed in a 
 + * group - as you see in this example : { @ code parent = " com | org " , child = " common | uncommon " } will 
 + * result in the pattern { @ code " ( ? : org | com ) \ . ( ? common | uncommon ) " } what will match 
 + * { @ code " com . common " } , { @ code " com . uncommon " } , { @ code " org . common " } , and { @ code 
 + * " org . uncommon " } . Without the grouping it would be { @ code " com | org . common | uncommon " } which 
 + * would match { @ code " com " } , { @ code " org . common " } , and { @ code " uncommon " } , which clearly is 
 + * undesirable . Adding the group fixes this . 
 + * 
 + * < p > For simplicity the grouping is added to regular expressions unconditionally . 
 + * 
 + * @ param input the input string . 
 + * @ param alreadyRegex signals if input already is a regular expression . 
 + * @ return a regex string . 
 + * / 
 + private static String ensureSelfContainedRegex ( final String input , final boolean alreadyRegex ) { 
 + final String result ; 
 + if ( alreadyRegex ) { 
 + result = encloseInGroup ( input ) ; 
 + } 
 + else { 
 + result = toRegex ( input ) ; 
 + } 
 + return result ; 
 + } 
 + 
 + / * * 
 + * Enclose { @ code expression } in a ( non - capturing ) group . 
 + * @ param expression the input regular expression 
 + * @ return a grouped pattern . 
 + * / 
 + private static String encloseInGroup ( String expression ) { 
 + return " ( ? : " + expression + " ) " ; 
 + } 
 + 
 + / * * 
 + * Converts a normal package name into a regex pattern by escaping all 
 + * special characters that may occur in a java package name . 
 + * @ param input the input string . 
 + * @ return a regex string . 
 + * / 
 + private static String toRegex ( String input ) { 
 + return DOT _ PATTERN . matcher ( input ) . replaceAll ( DOT _ REGEX ) ; 
 + } 
 + 
 + / * * 
 + * Creates a Pattern from { @ code expression } that matches exactly and child packages . 
 + * @ param expression a self - contained regular expression matching the full package exactly . 
 + * @ return a Pattern . 
 + * / 
 + private static Pattern createPatternForPartialMatch ( String expression ) { 
 + / / javadoc of encloseInGroup ( ) explains how to concatenate regular expressions 
 + / / no grouping needs to be added to fullPackage since this already have been done . 
 + return Pattern . compile ( expression + " ( ? : \ \ . . * ) ? " ) ; 
 + } 
 + 
 + / * * 
 + * Creates a Pattern from { @ code expression } . 
 + * @ param expression a self - contained regular expression matching the full package exactly . 
 + * @ return a Pattern . 
 + * / 
 + private static Pattern createPatternForExactMatch ( String expression ) { 
 + return Pattern . compile ( expression ) ; 
 + } 
 + 
 + / * * 
 * Adds a guard to the node . 
 * @ param thug the guard to be added . 
 * / 
 @ @ - 77 , 9 + 195 , 7 @ @ class PkgControl { 
 public PkgControl locateFinest ( final String forPkg ) { 
 PkgControl finestMatch = null ; 
 / / Check if we are a match . 
 - / / This algorithm should be improved to check for a trailing " . " 
 - / / or nothing following . 
 - if ( forPkg . startsWith ( fullPackage ) ) { 
 + if ( matchesAtFront ( forPkg ) ) { 
 / / If there won ' t be match so I am the best there is . 
 finestMatch = this ; 
 / / Check if any of the children match . 
 @ @ - 95 , 6 + 211 , 34 @ @ class PkgControl { 
 } 
 
 / * * 
 + * Matches other package name exactly or partially at front . 
 + * @ param pkg the package to compare with . 
 + * @ return if it matches . 
 + * / 
 + private boolean matchesAtFront ( final String pkg ) { 
 + final boolean result ; 
 + if ( regex ) { 
 + result = patternForPartialMatch . matcher ( pkg ) . matches ( ) ; 
 + } 
 + else { 
 + result = matchesAtFrontNoRegex ( pkg ) ; 
 + } 
 + return result ; 
 + } 
 + 
 + / * * 
 + * Non - regex case . Ensure a trailing dot for subpackages , i . e . " com . puppy " 
 + * will match " com . puppy . crawl " but not " com . puppycrawl . tools " . 
 + * @ param pkg the package to compare with . 
 + * @ return if it matches . 
 + * / 
 + private boolean matchesAtFrontNoRegex ( final String pkg ) { 
 + return pkg . startsWith ( fullPackage ) 
 + & & ( pkg . length ( ) = = fullPackage . length ( ) 
 + | | pkg . charAt ( fullPackage . length ( ) ) = = ' . ' ) ; 
 + } 
 + 
 + / * * 
 * Returns whether a package is allowed to be used . The algorithm checks 
 * with the current node for a result , and if none is found then calls 
 * its parent looking for a match . This will recurse looking for match . 
 @ @ - 131 , 7 + 275 , 7 @ @ class PkgControl { 
 final String inPkg ) { 
 for ( Guard g : guards ) { 
 / / Check if a Guard is only meant to be applied locally . 
 - if ( g . isLocalOnly ( ) & & ! fullPackage . equals ( inPkg ) ) { 
 + if ( g . isLocalOnly ( ) & & ! matchesExactly ( inPkg ) ) { 
 continue ; 
 } 
 final AccessResult result = g . verifyImport ( forImport ) ; 
 @ @ - 141 , 4 + 285 , 20 @ @ class PkgControl { 
 } 
 return AccessResult . UNKNOWN ; 
 } 
 + 
 + / * * 
 + * Check for equality of this with pkg 
 + * @ param pkg the package to compare with . 
 + * @ return if it matches . 
 + * / 
 + private boolean matchesExactly ( final String pkg ) { 
 + final boolean result ; 
 + if ( regex ) { 
 + result = patternForExactMatch . matcher ( pkg ) . matches ( ) ; 
 + } 
 + else { 
 + result = fullPackage . equals ( pkg ) ; 
 + } 
 + return result ; 
 + } 
 } 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / imports / import _ control _ 1 _ 2 . dtd b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / imports / import _ control _ 1 _ 2 . dtd 
 new file mode 100644 
 index 0000000 . . 84d6fe6 
 - - - / dev / null 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / imports / import _ control _ 1 _ 2 . dtd 
 @ @ - 0 , 0 + 1 , 78 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 + 
 + < ! - - Add the following to any file that is to be validated against this DTD : 
 + 
 + < ! DOCTYPE module PUBLIC 
 + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " 
 + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > 
 + - - > 
 + 
 + < ! - - 
 + The root element of the configuration file . 
 + - - > 
 + < ! ELEMENT import - control ( ( allow | disallow ) * , subpackage * ) > 
 + 
 + < ! - - 
 + pkg - The root package to be checked . For example " com . puppycrawl " . 
 + - - > 
 + < ! ATTLIST import - control 
 + pkg CDATA # REQUIRED 
 + regex ( true ) # IMPLIED > 
 + 
 + < ! - - 
 + Represents a subpackage of the parent element . 
 + - - > 
 + < ! ELEMENT subpackage ( ( allow | disallow ) * , subpackage * ) > 
 + 
 + < ! - - 
 + name - The name of the subpackage . For example if the name is " tools " 
 + and the pa the parent is " com . puppycrawl " , then it corresponds to the 
 + package " com . puppycrawl . tools " . If the regex attribute is " true " the 
 + name is interpreted as a regular expression . 
 + - - > 
 + < ! ATTLIST subpackage 
 + name CDATA # REQUIRED 
 + regex ( true ) # IMPLIED > 
 + 
 + < ! - - 
 + Represents attributes for a guard which can either allow or disallow 
 + access . 
 + 
 + pkg - The fully qualified name of the package to guard . Cannot be 
 + specified in conjunction with " class " . 
 + 
 + class - The fully qualified name of the class to guard . Cannot be 
 + specified in conjunction with " pkg " . 
 + 
 + exact - match - Only valid with " pkg " . Specifies whether the package 
 + name matching should be exact . For example , the pkg 
 + " com . puppycrawl . tools " will match the import 
 + " com . puppycrawl . tools . checkstyle . api . * " when the option is not set , 
 + but will not match is the option is set . 
 + 
 + local - only - Indicates that the guard is to apply only to the current 
 + package and not to subpackages . 
 + 
 + regex - Indicates that the class or package name has to be interpreted as 
 + regular expression . 
 + - - > 
 + < ! ENTITY % attlist . guard " 
 + pkg CDATA # IMPLIED 
 + exact - match ( true ) # IMPLIED 
 + class CDATA # IMPLIED 
 + local - only ( true ) # IMPLIED 
 + regex ( true ) # IMPLIED " > 
 + 
 + < ! - - 
 + Represents a guard that will allow access . 
 + - - > 
 + < ! ELEMENT allow EMPTY > 
 + < ! ATTLIST allow 
 + % attlist . guard ; > 
 + 
 + < ! - - 
 + Represents a guard that will disallow access . 
 + - - > 
 + < ! ELEMENT disallow EMPTY > 
 + < ! ATTLIST disallow 
 + % attlist . guard ; > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 index 44e2592 . . 470b7e8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 @ @ - 178 , 6 + 178 , 30 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public void testPkgRegExpInParent ( ) throws Exception { 
 + testRegExpInPackage ( " import - control _ pkg - re - in - parent . xml " ) ; 
 + } 
 + 
 + @ Test 
 + public void testPkgRegExpInChild ( ) throws Exception { 
 + testRegExpInPackage ( " import - control _ pkg - re - in - child . xml " ) ; 
 + } 
 + 
 + @ Test 
 + public void testPkgRegExpInBoth ( ) throws Exception { 
 + testRegExpInPackage ( " import - control _ pkg - re - in - both . xml " ) ; 
 + } 
 + 
 + / / all import - control _ pkg - re * files should be equivalent so use one test for all 
 + private void testRegExpInPackage ( String file ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( ImportControlCheck . class ) ; 
 + checkConfig . addAttribute ( " file " , getPath ( file ) ) ; 
 + final String [ ] expected = { " 5 : 1 : " + getCheckMessage ( MSG _ DISALLOWED , " java . io . File " ) } ; 
 + 
 + verify ( checkConfig , getPath ( " InputImportControl . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testGetAcceptableTokens ( ) { 
 final ImportControlCheck testCheckObject = 
 new ImportControlCheck ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpInPkgTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpInPkgTest . java 
 new file mode 100644 
 index 0000000 . . 373877d 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpInPkgTest . java 
 @ @ - 0 , 0 + 1 , 92 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . imports ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNull ; 
 + 
 + import org . junit . Test ; 
 + 
 + public class PkgControlRegExpInPkgTest { 
 + private final PkgControl pcRoot = new PkgControl ( " com \ \ . [ ^ . ] + \ \ . courtlink " , true ) ; 
 + private final PkgControl pcCommon = new PkgControl ( pcRoot , " com + on " , true ) ; 
 + 
 + @ Test 
 + public void testRegExpInRootIsConsidered ( ) { 
 + assertNull ( pcRoot . locateFinest ( " com " ) ) ; 
 + assertNull ( pcRoot . locateFinest ( " com / hurz / courtlink " ) ) ; 
 + assertNull ( pcRoot . locateFinest ( " com . hurz . hurz . courtlink " ) ) ; 
 + assertEquals ( pcRoot , pcRoot 
 + . locateFinest ( " com . hurz . courtlink . domain " ) ) ; 
 + assertEquals ( pcRoot , pcRoot 
 + . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegExpInSubpackageIsConsidered ( ) { 
 + assertEquals ( pcCommon , pcRoot 
 + . locateFinest ( " com . kazgroup . courtlink . common . api " ) ) ; 
 + assertEquals ( pcCommon , pcRoot 
 + . locateFinest ( " com . kazgroup . courtlink . comon . api " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testEnsureTrailingDot ( ) { 
 + assertNull ( pcRoot . locateFinest ( " com . kazgroup . courtlinkkk " ) ) ; 
 + assertNull ( pcRoot . locateFinest ( " com . kazgroup . courtlink / common . api " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAlternationInParentIsHandledCorrectly ( ) { 
 + / / the regular expression has to be adjusted to ( com \ . foo | com \ . bar ) 
 + final PkgControl root = new PkgControl ( " com \ \ . foo | com \ \ . bar " , true ) ; 
 + final PkgControl common = new PkgControl ( root , " common " , false ) ; 
 + assertEquals ( root , root . locateFinest ( " com . foo " ) ) ; 
 + assertEquals ( common , root . locateFinest ( " com . foo . common " ) ) ; 
 + assertEquals ( root , root . locateFinest ( " com . bar " ) ) ; 
 + assertEquals ( common , root . locateFinest ( " com . bar . common " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAlternationInParentIfUserCaresForIt ( ) { 
 + / / the regular expression has to be adjusted to ( com \ . foo | com \ . bar ) 
 + final PkgControl root = new PkgControl ( " ( com \ \ . foo | com \ \ . bar ) " , true ) ; 
 + final PkgControl common = new PkgControl ( root , " common " , false ) ; 
 + assertEquals ( root , root . locateFinest ( " com . foo " ) ) ; 
 + assertEquals ( common , root . locateFinest ( " com . foo . common " ) ) ; 
 + assertEquals ( root , root . locateFinest ( " com . bar " ) ) ; 
 + assertEquals ( common , root . locateFinest ( " com . bar . common " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAlternationInSubpackageIsHandledCorrectly ( ) { 
 + final PkgControl root = new PkgControl ( " org . somewhere " , false ) ; 
 + / / the regular expression has to be adjusted to ( foo | bar ) 
 + final PkgControl subpackages = new PkgControl ( root , " foo | bar " , true ) ; 
 + assertEquals ( root , root . locateFinest ( " org . somewhere " ) ) ; 
 + assertEquals ( subpackages , root . locateFinest ( " org . somewhere . foo " ) ) ; 
 + assertEquals ( subpackages , root . locateFinest ( " org . somewhere . bar " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testUnknownPkg ( ) { 
 + assertNull ( pcRoot . locateFinest ( " net . another " ) ) ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java 
 index b5079f1 . . 833604b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java 
 @ @ - 26 , 8 + 26 , 8 @ @ import org . junit . Before ; 
 import org . junit . Test ; 
 
 public class PkgControlRegExpTest { 
 - private final PkgControl pcRoot = new PkgControl ( " com . kazgroup . courtlink " ) ; 
 - private final PkgControl pcCommon = new PkgControl ( pcRoot , " common " ) ; 
 + private final PkgControl pcRoot = new PkgControl ( " com . kazgroup . courtlink " , false ) ; 
 + private final PkgControl pcCommon = new PkgControl ( pcRoot , " common " , false ) ; 
 
 @ Before 
 public void setUp ( ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java 
 index 189dfee . . 8864456 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java 
 @ @ - 26 , 8 + 26 , 8 @ @ import org . junit . Before ; 
 import org . junit . Test ; 
 
 public class PkgControlTest { 
 - private final PkgControl pcRoot = new PkgControl ( " com . kazgroup . courtlink " ) ; 
 - private final PkgControl pcCommon = new PkgControl ( pcRoot , " common " ) ; 
 + private final PkgControl pcRoot = new PkgControl ( " com . kazgroup . courtlink " , false ) ; 
 + private final PkgControl pcCommon = new PkgControl ( pcRoot , " common " , false ) ; 
 
 @ Before 
 public void setUp ( ) { 
 @ @ - 48 , 6 + 48 , 12 @ @ public class PkgControlTest { 
 } 
 
 @ Test 
 + public void testEnsureTrailingDot ( ) { 
 + assertNull ( pcRoot . locateFinest ( " com . kazgroup . courtlinkkk " ) ) ; 
 + assertNull ( pcRoot . locateFinest ( " com . kazgroup . courtlink / common . api " ) ) ; 
 + } 
 + 
 + @ Test 
 public void testCheckAccess ( ) { 
 assertEquals ( AccessResult . DISALLOWED , pcCommon . checkAccess ( 
 " org . springframework . something " , 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ one - re . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ one - re . xml 
 index 0330a95 . . 9942654 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ one - re . xml 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ one - re . xml 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 < ? xml version = " 1 . 0 " ? > 
 < ! DOCTYPE import - control PUBLIC 
 - " - / / Puppy Crawl / / DTD Import Control 1 . 1 / / EN " 
 - " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 1 . dtd " > 
 + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " 
 + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > 
 
 < import - control pkg = " com . puppycrawl . tools . checkstyle . checks " > 
 < allow class = " java \ . awt . Image " regex = " true " / > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - both . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - both . xml 
 new file mode 100644 
 index 0000000 . . 2a225d4 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - both . xml 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + < ? xml version = " 1 . 0 " ? > 
 + < ! DOCTYPE import - control PUBLIC 
 + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " 
 + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > 
 + 
 + < import - control pkg = " com \ . puppycrawl \ . [ ^ . ] * \ . checkstyle \ . [ ^ . ] * " regex = " true " > 
 + < allow class = " java . awt . Image " / > 
 + < allow class = " java . awt . Button . ABORT " / > 
 + < allow class = " java . io . File " local - only = " true " / > 
 + < subpackage name = " imp . rts " regex = " true " > 
 + < allow pkg = " javax . swing " / > 
 + < / subpackage > 
 + < / import - control > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - child . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - child . xml 
 new file mode 100644 
 index 0000000 . . 4b1d8e8 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - child . xml 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + < ? xml version = " 1 . 0 " ? > 
 + < ! DOCTYPE import - control PUBLIC 
 + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " 
 + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > 
 + 
 + < import - control pkg = " com . puppycrawl . tools . checkstyle . checks " > 
 + < allow class = " java . awt . Image " / > 
 + < allow class = " java . awt . Button . ABORT " / > 
 + < allow class = " java . io . File " local - only = " true " / > 
 + < subpackage name = " imp . rts " regex = " true " > 
 + < allow pkg = " javax . swing " / > 
 + < / subpackage > 
 + < / import - control > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - parent . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - parent . xml 
 new file mode 100644 
 index 0000000 . . a617290 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ pkg - re - in - parent . xml 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + < ? xml version = " 1 . 0 " ? > 
 + < ! DOCTYPE import - control PUBLIC 
 + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " 
 + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > 
 + 
 + < import - control pkg = " com \ . puppycrawl \ . [ ^ . ] * \ . checkstyle \ . [ ^ . ] * " regex = " true " > 
 + < allow class = " java . awt . Image " / > 
 + < allow class = " java . awt . Button . ABORT " / > 
 + < allow class = " java . io . File " local - only = " true " / > 
 + < subpackage name = " imports " > 
 + < allow pkg = " javax . swing " / > 
 + < / subpackage > 
 + < / import - control > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ two - re . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ two - re . xml 
 index 9105f05 . . 8e526ed 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ two - re . xml 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ two - re . xml 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 < ? xml version = " 1 . 0 " ? > 
 < ! DOCTYPE import - control PUBLIC 
 - " - / / Puppy Crawl / / DTD Import Control 1 . 1 / / EN " 
 - " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 1 . dtd " > 
 + " - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN " 
 + " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > 
 
 < import - control pkg = " com . puppycrawl . tools . checkstyle . checks " > 
 < allow class = " java \ . awt \ . Image " regex = " true " / > 
 diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml 
 index 60b6442 . . d89a11f 100644 
 - - - a / src / xdocs / config _ imports . xml 
 + + + b / src / xdocs / config _ imports . xml 
 @ @ - 677 , 8 + 677 , 8 @ @ import android . * ; 
 
 < p > 
 The DTD for a import control XML document is at < a 
 - href = " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 1 . dtd " > 
 - http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 1 . dtd < / a > . It 
 + href = " http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd " > 
 + http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd < / a > . It 
 contains documentation on each of the elements and attributes . 
 < / p > 
 
 @ @ - 690 , 8 + 690 , 8 @ @ import android . * ; 
 
 < pre > 
 & lt ; ! DOCTYPE import - control PUBLIC 
 - & quot ; - / / Puppy Crawl / / DTD Import Control 1 . 1 / / EN & quot ; 
 - & quot ; http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 1 . dtd & quot ; & gt ; 
 + & quot ; - / / Puppy Crawl / / DTD Import Control 1 . 2 / / EN & quot ; 
 + & quot ; http : / / checkstyle . sourceforge . net / dtds / import _ control _ 1 _ 2 . dtd & quot ; & gt ; 
 < / pre > 
 < / subsection > 
 
 @ @ - 735 , 25 + 735 , 107 @ @ import android . * ; 
 < / source > 
 
 < p > 
 - In the example below , all classes beginning with an I in the package 
 - java . awt are allowed . In the package java . io only the classes File 
 - and InputStream are allowed . 
 + In the example below access to package 
 + < code > com . puppycrawl . tools . checkstyle . checks < / code > and its subpackages is 
 + allowed from anywhere in < code > com . puppycrawl . tools . checkstyle < / code > except 
 + from the < code > filters < / code > subpackage where access to all 
 + < code > check < / code > ' s subpackages is disallowed . Two < code > java . lang . ref < / code > 
 + classes are allowed by virtue of one regular expression instead of listing 
 + them in two separate allow rules ( as it is done with the < code > Files < / code > 
 + and < code > ClassPath < / code > classes ) . 
 < / p > 
 
 < source > 
 & lt ; import - control pkg = & quot ; com . puppycrawl . tools . checkstyle & quot ; & gt ; 
 - & lt ; allow class = & quot ; java \ . awt \ . I . * & quot ; regex = & quot ; true & quot ; / & gt ; 
 - & lt ; allow class = & quot ; java \ . io \ . ( File | InputStream ) & quot ; local - only = & quot ; true & quot ; 
 - regex = & quot ; true & quot ; / & gt ; 
 + & lt ; allow pkg = & quot ; com . puppycrawl . tools . checkstyle . api & quot ; / & gt ; 
 + & lt ; allow pkg = & quot ; com . puppycrawl . tools . checkstyle . checks & quot ; / & gt ; 
 + & lt ; allow class = & quot ; com . google . common . io . Files & quot ; / & gt ; 
 + & lt ; allow class = & quot ; com . google . common . reflect . ClassPath & quot ; / & gt ; 
 + & lt ; subpackage name = & quot ; filters & quot ; & gt ; 
 + & lt ; allow class = & quot ; java \ . lang \ . ref \ . ( Weak | Soft ) Reference & quot ; 
 + regex = & quot ; true & quot ; / & gt ; 
 + & lt ; disallow pkg = & quot ; com \ . puppycrawl \ . tools \ . checkstyle \ . checks \ . [ ^ . ] + & quot ; 
 + regex = & quot ; true & quot ; / & gt ; 
 + & lt ; disallow pkg = & quot ; com . puppycrawl . tools . checkstyle . ant & quot ; / & gt ; 
 + & lt ; disallow pkg = & quot ; com . puppycrawl . tools . checkstyle . doclets & quot ; / & gt ; 
 + & lt ; disallow pkg = & quot ; com . puppycrawl . tools . checkstyle . gui & quot ; / & gt ; 
 + & lt ; / subpackage & gt ; 
 & lt ; / import - control & gt ; 
 < / source > 
 
 < p > 
 - For an example import control file , look at the file called < a 
 + In the next example regular expressions are used to enforce a layering rule : In all 
 + < code > dao < / code > packages it is not allowed to access UI layer code ( < code > ui < / code > , 
 + < code > awt < / code > , and < code > swing < / code > ) . On the other hand it is not allowed to directly 
 + access < code > dao < / code > and < code > service < / code > layer from < code > ui < / code > packages . The 
 + root package is also a regular expression that is used to handle old and new domain name 
 + with the same rules . 
 + < / p > 
 + 
 + < source > 
 + & lt ; import - control pkg = & quot ; ( de . olddomain | de . newdomain ) \ . . * & quot ; regex = & quot ; true & quot ; & gt ; 
 + & lt ; subpackage pkg = & quot ; [ ^ . ] + \ . dao & quot ; regex = & quot ; true & quot ; & gt ; 
 + & lt ; disallow pkg = & quot ; . * \ . ui & quot ; regex = & quot ; true & quot ; / & gt ; 
 + & lt ; disallow pkg = & quot ; . * \ . ( awt | swing ) . \ . * & quot ; regex = & quot ; true & quot ; / & gt ; 
 + & lt ; / subpackage & gt ; 
 + & lt ; subpackage pkg = & quot ; [ ^ . ] + \ . ui & quot ; regex = & quot ; true & quot ; & gt ; 
 + & lt ; disallow pkg = & quot ; . * \ . ( dao | service ) & quot ; regex = & quot ; true & quot ; / & gt ; 
 + & lt ; / subpackage & gt ; 
 + & lt ; / import - control & gt ; 
 + < / source > 
 + 
 + < p > 
 + For a real - life import control file look at the file called < a 
 href = " https : / / github . com / checkstyle / checkstyle / blob / master / config / import - control . xml " > 
 import - control . xml < / a > 
 which is part of the Checkstyle distribution . 
 < / p > 
 + 
 + < h4 id = " regex - notes " > Notes on regular expressions < / h4 > 
 + < p > 
 + Regular expressions in import rules have to match either Java packages or 
 + classes . The language rules for packages and class names can be described by the 
 + following complicated regular expression that takes into account that Java names may 
 + contain any unicode letter , numbers , underscores , and dollar signs ( see section 3 . 8 
 + in the < a href = " http : / / docs . oracle . com / javase / specs / " > Java specs < / a > ) : 
 + < / p > 
 + < ul > 
 + < li > 
 + < code > [ \ p { Letter } _ $ ] [ \ p { Letter } \ p { Number } _ $ ] * < / code > or short 
 + < code > [ \ p { L } _ $ ] [ \ p { L } \ p { N } _ $ ] * < / code > for a class name or package component . 
 + < / li > 
 + < li > 
 + < code > ( [ \ p { L } _ $ ] [ \ p { L } \ p { N } _ $ ] * \ . ) * [ \ p { L } _ $ ] [ \ p { L } \ p { N } _ $ ] * < / code > 
 + for a fully qualified name . 
 + < / li > 
 + < / ul > 
 + < p > 
 + But it is not necessary to use these complicated expressions since no validation is 
 + required . Differentiating between package separator ' . ' and others is 
 + sufficient . Unfortunately ' . ' has a special meaning in regular expressions so one has 
 + to write < code > \ . < / code > to match an actual dot . 
 + < / p > 
 + < ul > 
 + < li > 
 + Use < code > [ ^ . ] + < / code > ( one or more " not a dot " characters ) for a class name or 
 + package component . 
 + < / li > 
 + < li > 
 + Use < code > com \ . google \ . common \ . [ ^ . ] + < / code > to match any subpackage of 
 + < code > com . google . common < / code > . 
 + < / li > 
 + < li > 
 + When matching concrete packages like < code > com . google . common < / code > omitting the 
 + backslash before the dots may improve readability and may be just exact enough : 
 + < code > com . google . common \ . [ ^ . ] + < / code > matches not only subpackages of 
 + < code > com . google . common < / code > but e . g . also of < code > com . googleecommon < / code > but 
 + you may not care for that . 
 + < / li > 
 + < li > 
 + Do not use < code > . * < / code > unless you really do not care for what is matched . Often 
 + you want to match only a certain package level instead . 
 + < / li > 
 + < / ul > 
 < / subsection > 
 
 < subsection name = " Example of Usage " >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index a42fe44 . . 4481fef 100755 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 14 , 7 + 14 , 7 @ @ 
 < / license > 
 < / licenses > 
 < scm > 
 - < url > http : / / checkstyle . cvs . sourceforge . net / checkstyle / < / url > 
 + < url > https : / / checkstyle . svn . sourceforge . net / svnroot / checkstyle / trunk / checkstyle < / url > 
 < / scm > 
 < dependencies > 
 < dependency > 
 @ @ - 38 , 9 + 38 , 9 @ @ 
 < version > 1 . 0 . 3 < / version > 
 < / dependency > 
 < dependency > 
 - < groupId > com . google . code . google - collections < / groupId > 
 - < artifactId > google - collect < / artifactId > 
 - < version > snapshot - 20080321 < / version > 
 + < groupId > com . google . collections < / groupId > 
 + < artifactId > google - collections < / artifactId > 
 + < version > 0 . 9 < / version > 
 < / dependency > 
 < / dependencies > 
 < / project >
