BLEU SCORE: 0.044967337992734904

TEST MSG: Issue # 3843 : Disallow import of interfaces from java . util . stream due to coverage problem
GENERATED MSG: Issue # 3433 : Cut down on Checkstyle ' s dependencies on Guava ( part 4 , collections )

TEST DIFF (one line): diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml <nl> index 400836d . . 0b8f4b1 100644 <nl> - - - a / config / checkstyle _ sevntu _ checks . xml <nl> + + + b / config / checkstyle _ sevntu _ checks . xml <nl> @ @ - 126 , 6 + 126 , 17 @ @ <nl> < property name = " forbiddenImportsExcludesRegexp " <nl> value = " ^ com . puppycrawl . tools . checkstyle . checks . naming . AccessModifier $ " / > <nl> < / module > <nl> + < module name = " ForbidCertainImports " > <nl> + < property name = " packageNameRegexp " value = " . + " / > <nl> + < property name = " id " value = " ForbidInterfacesImportFromJavaUtilStream " / > <nl> + < ! - - Disallowed till https : / / github . com / mojohaus / cobertura - maven - plugin / issues / 29 - - > <nl> + < property name = " forbiddenImportsRegexp " value = " java \ . util \ . stream \ . Stream | <nl> + java \ . util \ . stream \ . Stream \ . Builder | java \ . util \ . stream \ . DoubleStream | <nl> + java \ . util \ . stream \ . DoubleStream \ . Builder | java \ . util \ . stream \ . IntStream | <nl> + java \ . util \ . stream \ . IntStream \ . Builder | java \ . util \ . stream \ . LongStream | <nl> + java \ . util \ . stream \ . LongStream \ . Builder | java \ . util \ . stream \ . BaseStream | <nl> + java \ . util \ . stream \ . Collector " / > <nl> + < / module > <nl> < module name = " LineLengthExtended " > <nl> < property name = " max " value = " 100 " / > <nl> < property name = " ignoreClass " value = " true " / > <nl> diff - - git a / config / import - control . xml b / config / import - control . xml <nl> index ca38a78 . . 53eef91 100644 <nl> - - - a / config / import - control . xml <nl> + + + b / config / import - control . xml <nl> @ @ - 16 , 6 + 16 , 18 @ @ <nl> < allow pkg = " org . apache . commons . logging " / > <nl> < allow pkg = " org . xml . sax " / > <nl> <nl> + < ! - - Disallowed till https : / / github . com / mojohaus / cobertura - maven - plugin / issues / 29 - - > <nl> + < disallow class = " java . util . stream . Stream " / > <nl> + < disallow class = " java . util . stream . Stream . Builder " / > <nl> + < disallow class = " java . util . stream . DoubleStream " / > <nl> + < disallow class = " java . util . stream . DoubleStream . Builder " / > <nl> + < disallow class = " java . util . stream . IntStream " / > <nl> + < disallow class = " java . util . stream . IntStream . Builder " / > <nl> + < disallow class = " java . util . stream . LongStream " / > <nl> + < disallow class = " java . util . stream . LongStream . Builder " / > <nl> + < disallow class = " java . util . stream . BaseStream " / > <nl> + < disallow class = " java . util . stream . Collector " / > <nl> + <nl> < ! - - The local ones - - > <nl> < allow pkg = " java . lang . reflect " local - only = " true " / > <nl> < allow pkg = " java . nio " local - only = " true " / > <nl> diff - - git a / config / sevntu _ suppressions . xml b / config / sevntu _ suppressions . xml <nl> index d05a9aa . . 5651834 100644 <nl> - - - a / config / sevntu _ suppressions . xml <nl> + + + b / config / sevntu _ suppressions . xml <nl> @ @ - 26 , 4 + 26 , 9 @ @ <nl> JavadocUtils . java and JavadocUtilsTest . java . - - > <nl> < suppress checks = " ForbidCertainImports " <nl> files = " JavadocUtils \ . java | JavadocUtilsTest \ . java " / > <nl> + <nl> + < ! - - ITs and UTs are not included in Cobertura coverage report <nl> + and do not have coverage problems due to imports from java . util . stream . - - > <nl> + < suppress id = " ForbidInterfacesImportFromJavaUtilStream " <nl> + files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> < / suppressions > <nl> \ No newline at end of file <nl> diff - - git a / pom . xml b / pom . xml <nl> index 382576c . . 7ca298f 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1463 , 6 + 1463 , 8 @ @ <nl> < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractNestedDepthCheck . class < / exclude > <nl> < exclude > com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . class < / exclude > <nl> < exclude > com / puppycrawl / tools / checkstyle / checks / naming / AbstractTypeParameterNameCheck . class < / exclude > <nl> + < ! - - Until https : / / github . com / checkstyle / checkstyle / issues / 3848 - - > <nl> + < exclude > com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . class < / exclude > <nl> < / excludes > <nl> < / instrumentation > <nl> < / configuration > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> index 5149a3d . . a999778 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> @ @ - 19 , 10 + 19 , 10 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> + import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . Set ; <nl> import java . util . stream . Collectors ; <nl> - import java . util . stream . Stream ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> @ @ - 68 , 7 + 68 , 7 @ @ public class FinalParametersCheck extends AbstractCheck { <nl> * primitive datatypes < / a > . <nl> * / <nl> private final Set < Integer > primitiveDataTypes = Collections . unmodifiableSet ( <nl> - Stream . of ( <nl> + Arrays . stream ( new Integer [ ] { <nl> TokenTypes . LITERAL _ BYTE , <nl> TokenTypes . LITERAL _ SHORT , <nl> TokenTypes . LITERAL _ INT , <nl> @ @ - 76 , 7 + 76 , 7 @ @ public class FinalParametersCheck extends AbstractCheck { <nl> TokenTypes . LITERAL _ FLOAT , <nl> TokenTypes . LITERAL _ DOUBLE , <nl> TokenTypes . LITERAL _ BOOLEAN , <nl> - TokenTypes . LITERAL _ CHAR ) <nl> + TokenTypes . LITERAL _ CHAR , } ) <nl> . collect ( Collectors . toSet ( ) ) ) ; <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java <nl> index a3f7a72 . . 5e1d3d4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java <nl> @ @ - 19 , 11 + 19 , 11 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> + import java . util . Arrays ; <nl> import java . util . LinkedList ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> import java . util . stream . Collectors ; <nl> - import java . util . stream . Stream ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> @ @ - 45 , 9 + 45 , 9 @ @ public final class IllegalCatchCheck extends AbstractCheck { <nl> public static final String MSG _ KEY = " illegal . catch " ; <nl> <nl> / * * Illegal class names . * / <nl> - private final Set < String > illegalClassNames = Stream . of ( " Exception " , " Error " , <nl> - " RuntimeException " , " Throwable " , " java . lang . Error " , " java . lang . Exception " , <nl> - " java . lang . RuntimeException " , " java . lang . Throwable " ) . collect ( Collectors . toSet ( ) ) ; <nl> + private final Set < String > illegalClassNames = Arrays . stream ( new String [ ] { " Exception " , " Error " , <nl> + " RuntimeException " , " Throwable " , " java . lang . Error " , " java . lang . Exception " , <nl> + " java . lang . RuntimeException " , " java . lang . Throwable " , } ) . collect ( Collectors . toSet ( ) ) ; <nl> <nl> / * * <nl> * Set the list of illegal classes . <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> index 26a552b . . e73cc6f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> @ @ - 19 , 10 + 19 , 10 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> + import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . Set ; <nl> import java . util . stream . Collectors ; <nl> - import java . util . stream . Stream ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> @ @ - 61 , 11 + 61 , 12 @ @ public final class IllegalThrowsCheck extends AbstractCheck { <nl> <nl> / * * Methods which should be ignored . * / <nl> private final Set < String > ignoredMethodNames = <nl> - Stream . of ( " finalize " ) . collect ( Collectors . toSet ( ) ) ; <nl> + Arrays . stream ( new String [ ] { " finalize " , } ) . collect ( Collectors . toSet ( ) ) ; <nl> <nl> / * * Illegal class names . * / <nl> - private final Set < String > illegalClassNames = Stream . of ( " Error " , " RuntimeException " , <nl> - " Throwable " , " java . lang . Error " , " java . lang . RuntimeException " , " java . lang . Throwable " ) <nl> + private final Set < String > illegalClassNames = Arrays . stream ( <nl> + new String [ ] { " Error " , " RuntimeException " , " Throwable " , " java . lang . Error " , <nl> + " java . lang . RuntimeException " , " java . lang . Throwable " , } ) <nl> . collect ( Collectors . toSet ( ) ) ; <nl> <nl> / * * Property for ignoring overridden methods . * / <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> index 66b7b6c . . fc37faa 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> @ @ - 20 , 13 + 20 , 13 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import java . util . ArrayDeque ; <nl> + import java . util . Arrays ; <nl> import java . util . Deque ; <nl> import java . util . HashSet ; <nl> import java . util . LinkedList ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> import java . util . stream . Collectors ; <nl> - import java . util . stream . Stream ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> @ @ - 109 , 9 + 109 , 14 @ @ public final class ModifiedControlVariableCheck extends AbstractCheck { <nl> private static final String ILLEGAL _ TYPE _ OF _ TOKEN = " Illegal type of token : " ; <nl> <nl> / * * Operations which can change control variable in update part of the loop . * / <nl> - private static final Set < Integer > MUTATION _ OPERATIONS = Stream . of ( TokenTypes . POST _ INC , <nl> - TokenTypes . POST _ DEC , TokenTypes . DEC , TokenTypes . INC , TokenTypes . ASSIGN ) <nl> - . collect ( Collectors . toSet ( ) ) ; <nl> + private static final Set < Integer > MUTATION _ OPERATIONS = <nl> + Arrays . stream ( new Integer [ ] { <nl> + TokenTypes . POST _ INC , <nl> + TokenTypes . POST _ DEC , <nl> + TokenTypes . DEC , <nl> + TokenTypes . INC , <nl> + TokenTypes . ASSIGN , <nl> + } ) . collect ( Collectors . toSet ( ) ) ; <nl> <nl> / * * Stack of block parameters . * / <nl> private final Deque < Deque < String > > variableStack = new ArrayDeque < > ( ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index 3d6e80d . . 06351f3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import java . util . ArrayDeque ; <nl> + import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . Deque ; <nl> import java . util . HashMap ; <nl> @ @ - 29 , 7 + 30 , 6 @ @ import java . util . Map ; <nl> import java . util . Queue ; <nl> import java . util . Set ; <nl> import java . util . stream . Collectors ; <nl> - import java . util . stream . Stream ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> @ @ - 103 , 32 + 103 , 34 @ @ public class RequireThisCheck extends AbstractCheck { <nl> public static final String MSG _ VARIABLE = " require . this . variable " ; <nl> <nl> / * * Set of all declaration tokens . * / <nl> - private static final Set < Integer > DECLARATION _ TOKENS = Collections . unmodifiableSet ( Stream . of ( <nl> - TokenTypes . VARIABLE _ DEF , <nl> - TokenTypes . CTOR _ DEF , <nl> - TokenTypes . METHOD _ DEF , <nl> - TokenTypes . CLASS _ DEF , <nl> - TokenTypes . ENUM _ DEF , <nl> - TokenTypes . INTERFACE _ DEF , <nl> - TokenTypes . PARAMETER _ DEF , <nl> - TokenTypes . TYPE _ ARGUMENT <nl> - ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + private static final Set < Integer > DECLARATION _ TOKENS = Collections . unmodifiableSet ( <nl> + Arrays . stream ( new Integer [ ] { <nl> + TokenTypes . VARIABLE _ DEF , <nl> + TokenTypes . CTOR _ DEF , <nl> + TokenTypes . METHOD _ DEF , <nl> + TokenTypes . CLASS _ DEF , <nl> + TokenTypes . ENUM _ DEF , <nl> + TokenTypes . INTERFACE _ DEF , <nl> + TokenTypes . PARAMETER _ DEF , <nl> + TokenTypes . TYPE _ ARGUMENT , <nl> + } ) . collect ( Collectors . toSet ( ) ) ) ; <nl> / * * Set of all assign tokens . * / <nl> - private static final Set < Integer > ASSIGN _ TOKENS = Collections . unmodifiableSet ( Stream . of ( <nl> - TokenTypes . ASSIGN , <nl> - TokenTypes . PLUS _ ASSIGN , <nl> - TokenTypes . STAR _ ASSIGN , <nl> - TokenTypes . DIV _ ASSIGN , <nl> - TokenTypes . MOD _ ASSIGN , <nl> - TokenTypes . SR _ ASSIGN , <nl> - TokenTypes . BSR _ ASSIGN , <nl> - TokenTypes . SL _ ASSIGN , <nl> - TokenTypes . BAND _ ASSIGN , <nl> - TokenTypes . BXOR _ ASSIGN <nl> - ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + private static final Set < Integer > ASSIGN _ TOKENS = Collections . unmodifiableSet ( <nl> + Arrays . stream ( new Integer [ ] { <nl> + TokenTypes . ASSIGN , <nl> + TokenTypes . PLUS _ ASSIGN , <nl> + TokenTypes . STAR _ ASSIGN , <nl> + TokenTypes . DIV _ ASSIGN , <nl> + TokenTypes . MOD _ ASSIGN , <nl> + TokenTypes . SR _ ASSIGN , <nl> + TokenTypes . BSR _ ASSIGN , <nl> + TokenTypes . SL _ ASSIGN , <nl> + TokenTypes . BAND _ ASSIGN , <nl> + TokenTypes . BXOR _ ASSIGN , <nl> + } ) . collect ( Collectors . toSet ( ) ) ) ; <nl> / * * Set of all compound assign tokens . * / <nl> private static final Set < Integer > COMPOUND _ ASSIGN _ TOKENS = Collections . unmodifiableSet ( <nl> - Stream . of ( <nl> + Arrays . stream ( new Integer [ ] { <nl> TokenTypes . PLUS _ ASSIGN , <nl> TokenTypes . STAR _ ASSIGN , <nl> TokenTypes . DIV _ ASSIGN , <nl> @ @ - 137 , 8 + 139 , 8 @ @ public class RequireThisCheck extends AbstractCheck { <nl> TokenTypes . BSR _ ASSIGN , <nl> TokenTypes . SL _ ASSIGN , <nl> TokenTypes . BAND _ ASSIGN , <nl> - TokenTypes . BXOR _ ASSIGN <nl> - ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + TokenTypes . BXOR _ ASSIGN , <nl> + } ) . collect ( Collectors . toSet ( ) ) ) ; <nl> <nl> / * * Tree of all the parsed frames . * / <nl> private Map < DetailAST , AbstractFrame > frames ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> index 932bf4d . . aab4941 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> @ @ - 27 , 7 + 27 , 6 @ @ import java . util . List ; <nl> import java . util . Set ; <nl> import java . util . regex . Pattern ; <nl> import java . util . stream . Collectors ; <nl> - import java . util . stream . Stream ; <nl> <nl> import antlr . collections . AST ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> @ @ - 248 , 7 + 247 , 7 @ @ public class VisibilityModifierCheck <nl> <nl> / * * Default immutable types canonical names . * / <nl> private static final List < String > DEFAULT _ IMMUTABLE _ TYPES = Collections . unmodifiableList ( <nl> - Stream . of ( <nl> + Arrays . stream ( new String [ ] { <nl> " java . lang . String " , <nl> " java . lang . Integer " , <nl> " java . lang . Byte " , <nl> @ @ - 268 , 16 + 267 , 16 @ @ public class VisibilityModifierCheck <nl> " java . net . URI " , <nl> " java . net . Inet4Address " , <nl> " java . net . Inet6Address " , <nl> - " java . net . InetSocketAddress " <nl> - ) . collect ( Collectors . toList ( ) ) ) ; <nl> + " java . net . InetSocketAddress " , <nl> + } ) . collect ( Collectors . toList ( ) ) ) ; <nl> <nl> / * * Default ignore annotations canonical names . * / <nl> private static final List < String > DEFAULT _ IGNORE _ ANNOTATIONS = Collections . unmodifiableList ( <nl> - Stream . of ( <nl> + Arrays . stream ( new String [ ] { <nl> " org . junit . Rule " , <nl> " org . junit . ClassRule " , <nl> - " com . google . common . annotations . VisibleForTesting " <nl> - ) . collect ( Collectors . toList ( ) ) ) ; <nl> + " com . google . common . annotations . VisibleForTesting " , <nl> + } ) . collect ( Collectors . toList ( ) ) ) ; <nl> <nl> / * * Name for ' public ' access modifier . * / <nl> private static final String PUBLIC _ ACCESS _ MODIFIER = " public " ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> index 5641e6a . . ac56238 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . javadoc ; <nl> <nl> import java . util . ArrayDeque ; <nl> + import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . Deque ; <nl> import java . util . List ; <nl> @ @ - 28 , 7 + 29 , 6 @ @ import java . util . Set ; <nl> import java . util . TreeSet ; <nl> import java . util . regex . Pattern ; <nl> import java . util . stream . Collectors ; <nl> - import java . util . stream . Stream ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> @ @ - 69 , 22 + 69 , 23 @ @ public class JavadocStyleCheck <nl> public static final String MSG _ EXTRA _ HTML = " javadoc . extraHtml " ; <nl> <nl> / * * HTML tags that do not require a close tag . * / <nl> - private static final Set < String > SINGLE _ TAGS = Collections . unmodifiableSortedSet ( Stream . of ( <nl> - " br " , " li " , " dt " , " dd " , " hr " , " img " , " p " , " td " , " tr " , " th " ) <nl> - . collect ( Collectors . toCollection ( TreeSet : : new ) ) ) ; <nl> + private static final Set < String > SINGLE _ TAGS = Collections . unmodifiableSortedSet ( <nl> + Arrays . stream ( new String [ ] { " br " , " li " , " dt " , " dd " , " hr " , " img " , " p " , " td " , " tr " , " th " , } ) <nl> + . collect ( Collectors . toCollection ( TreeSet : : new ) ) ) ; <nl> <nl> / * * HTML tags that are allowed in java docs . <nl> * From https : / / www . w3schools . com / tags / default . asp <nl> * The forms and structure tags are not allowed <nl> * / <nl> - private static final Set < String > ALLOWED _ TAGS = Collections . unmodifiableSortedSet ( Stream . of ( <nl> - " a " , " abbr " , " acronym " , " address " , " area " , " b " , " bdo " , " big " , <nl> - " blockquote " , " br " , " caption " , " cite " , " code " , " colgroup " , " dd " , <nl> - " del " , " div " , " dfn " , " dl " , " dt " , " em " , " fieldset " , " font " , " h1 " , <nl> - " h2 " , " h3 " , " h4 " , " h5 " , " h6 " , " hr " , " i " , " img " , " ins " , " kbd " , <nl> - " li " , " ol " , " p " , " pre " , " q " , " samp " , " small " , " span " , " strong " , <nl> - " style " , " sub " , " sup " , " table " , " tbody " , " td " , " tfoot " , " th " , <nl> - " thead " , " tr " , " tt " , " u " , " ul " , " var " ) <nl> + private static final Set < String > ALLOWED _ TAGS = Collections . unmodifiableSortedSet ( <nl> + Arrays . stream ( new String [ ] { <nl> + " a " , " abbr " , " acronym " , " address " , " area " , " b " , " bdo " , " big " , <nl> + " blockquote " , " br " , " caption " , " cite " , " code " , " colgroup " , " dd " , <nl> + " del " , " div " , " dfn " , " dl " , " dt " , " em " , " fieldset " , " font " , " h1 " , <nl> + " h2 " , " h3 " , " h4 " , " h5 " , " h6 " , " hr " , " i " , " img " , " ins " , " kbd " , <nl> + " li " , " ol " , " p " , " pre " , " q " , " samp " , " small " , " span " , " strong " , <nl> + " style " , " sub " , " sup " , " table " , " tbody " , " td " , " tfoot " , " th " , <nl> + " thead " , " tr " , " tt " , " u " , " ul " , " var " , } ) <nl> . collect ( Collectors . toCollection ( TreeSet : : new ) ) ) ; <nl> <nl> / * * The scope to check . * / <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java <nl> index e5a2820 . . 946bfaa 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import java . util . Deque ; <nl> import java . util . Set ; <nl> import java . util . TreeSet ; <nl> import java . util . stream . Collectors ; <nl> - import java . util . stream . Stream ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> @ @ - 43 , 7 + 42 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; <nl> public abstract class AbstractClassCouplingCheck extends AbstractCheck { <nl> / * * Class names to ignore . * / <nl> private static final Set < String > DEFAULT _ EXCLUDED _ CLASSES = Collections . unmodifiableSet ( <nl> - Stream . of ( <nl> + Arrays . stream ( new String [ ] { <nl> / / primitives <nl> " boolean " , " byte " , " char " , " double " , " float " , " int " , <nl> " long " , " short " , " void " , <nl> @ @ - 62 , 8 + 61 , 8 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { <nl> / / java . util . * <nl> " List " , " ArrayList " , " Deque " , " Queue " , " LinkedList " , <nl> " Set " , " HashSet " , " SortedSet " , " TreeSet " , <nl> - " Map " , " HashMap " , " SortedMap " , " TreeMap " <nl> - ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + " Map " , " HashMap " , " SortedMap " , " TreeMap " , <nl> + } ) . collect ( Collectors . toSet ( ) ) ) ; <nl> <nl> / * * Stack of contexts . * / <nl> private final Deque < Context > contextStack = new ArrayDeque < > ( ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> index 44783ef . . 9872387 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> <nl> import java . util . Arrays ; <nl> import java . util . Optional ; <nl> - import java . util . stream . Stream ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 75 , 9 + 74 , 12 @ @ public class ParameterNameCheck extends AbstractNameCheck { <nl> private boolean ignoreOverridden ; <nl> <nl> / * * Access modifiers of methods which should be checked . * / <nl> - private AccessModifier [ ] accessModifiers = Stream . of ( AccessModifier . PUBLIC , <nl> - AccessModifier . PROTECTED , AccessModifier . PACKAGE , AccessModifier . PRIVATE ) <nl> - . toArray ( AccessModifier [ ] : : new ) ; <nl> + private AccessModifier [ ] accessModifiers = { <nl> + AccessModifier . PUBLIC , <nl> + AccessModifier . PROTECTED , <nl> + AccessModifier . PACKAGE , <nl> + AccessModifier . PRIVATE , <nl> + } ; <nl> <nl> / * * <nl> * Creates a new { @ code ParameterNameCheck } instance .
NEAREST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 69e91b8 . . 6a2980b 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 149 , 7 + 149 , 7 @ @ <nl> <nl> < ! - - Suppressions from PMD configuration - - > <nl> < ! - - validateCli is not reasonable to split as encapsulation of logic will be damaged - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " Main \ . java " lines = " 212 " / > <nl> + < suppress checks = " CyclomaticComplexity " files = " Main \ . java " lines = " 249 " / > <nl> < ! - - JavadocMethodCheck , JavadocStyleCheck , JavadocUtils . getJavadocTags ( ) - deprecated - - > <nl> < suppress checks = " CyclomaticComplexity " files = " JavadocMethodCheck \ . java " / > <nl> < suppress checks = " CyclomaticComplexity " files = " JavadocStyleCheck \ . java " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index 259b3fe . . a440e87 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import java . util . logging . Filter ; <nl> import java . util . logging . Level ; <nl> import java . util . logging . LogRecord ; <nl> import java . util . logging . Logger ; <nl> + import java . util . regex . Pattern ; <nl> <nl> import org . apache . commons . cli . CommandLine ; <nl> import org . apache . commons . cli . CommandLineParser ; <nl> @ @ - 110 , 6 + 111 , 18 @ @ public final class Main { <nl> / * * Name for the option ' - - debug ' . * / <nl> private static final String OPTION _ DEBUG _ NAME = " debug " ; <nl> <nl> + / * * Name for the option ' e ' . * / <nl> + private static final String OPTION _ E _ NAME = " e " ; <nl> + <nl> + / * * Name for the option ' - - exclude ' . * / <nl> + private static final String OPTION _ EXCLUDE _ NAME = " exclude " ; <nl> + <nl> + / * * Name for the option ' x ' . * / <nl> + private static final String OPTION _ X _ NAME = " x " ; <nl> + <nl> + / * * Name for the option ' - - exclude - regexp ' . * / <nl> + private static final String OPTION _ EXCLUDE _ REGEXP _ NAME = " exclude - regexp " ; <nl> + <nl> / * * Name for ' xml ' format . * / <nl> private static final String XML _ FORMAT _ NAME = " xml " ; <nl> <nl> @ @ - 145 , 7 + 158 , 8 @ @ public final class Main { <nl> exitStatus = 0 ; <nl> } <nl> else { <nl> - final List < File > filesToProcess = getFilesToProcess ( commandLine . getArgs ( ) ) ; <nl> + final List < File > filesToProcess = getFilesToProcess ( getExclusions ( commandLine ) , <nl> + commandLine . getArgs ( ) ) ; <nl> <nl> / / return error if something is wrong in arguments <nl> final List < String > messages = validateCli ( commandLine , filesToProcess ) ; <nl> @ @ - 204 , 6 + 218 , 29 @ @ public final class Main { <nl> } <nl> <nl> / * * <nl> + * Gets the list of exclusions provided through the command line argument . <nl> + * @ param commandLine command line object <nl> + * @ return List of exclusion patterns . <nl> + * / <nl> + private static List < Pattern > getExclusions ( CommandLine commandLine ) { <nl> + final List < Pattern > result = new ArrayList < > ( ) ; <nl> + <nl> + if ( commandLine . hasOption ( OPTION _ E _ NAME ) ) { <nl> + for ( String value : commandLine . getOptionValues ( OPTION _ E _ NAME ) ) { <nl> + result . add ( Pattern . compile ( " ^ " + Pattern . quote ( new File ( value ) . getAbsolutePath ( ) ) <nl> + + " $ " ) ) ; <nl> + } <nl> + } <nl> + if ( commandLine . hasOption ( OPTION _ X _ NAME ) ) { <nl> + for ( String value : commandLine . getOptionValues ( OPTION _ X _ NAME ) ) { <nl> + result . add ( Pattern . compile ( value ) ) ; <nl> + } <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> * Do validation of Command line options . <nl> * @ param cmdLine command line object <nl> * @ param filesToProcess List of files to process found from the command line . <nl> @ @ - 471 , 14 + 508 , 16 @ @ public final class Main { <nl> <nl> / * * <nl> * Determines the files to process . <nl> + * @ param patternsToExclude The list of directory patterns to exclude from searching . <nl> * @ param filesToProcess <nl> * arguments that were not processed yet but shall be <nl> * @ return list of files to process <nl> * / <nl> - private static List < File > getFilesToProcess ( String . . . filesToProcess ) { <nl> + private static List < File > getFilesToProcess ( List < Pattern > patternsToExclude , <nl> + String . . . filesToProcess ) { <nl> final List < File > files = Lists . newLinkedList ( ) ; <nl> for ( String element : filesToProcess ) { <nl> - files . addAll ( listFiles ( new File ( element ) ) ) ; <nl> + files . addAll ( listFiles ( new File ( element ) , patternsToExclude ) ) ; <nl> } <nl> <nl> return files ; <nl> @ @ - 489 , 20 + 528 , 23 @ @ public final class Main { <nl> * list . Subdirectories are also traversed . <nl> * @ param node <nl> * the node to process <nl> + * @ param patternsToExclude The list of directory patterns to exclude from searching . <nl> * @ return found files <nl> * / <nl> - private static List < File > listFiles ( File node ) { <nl> + private static List < File > listFiles ( File node , List < Pattern > patternsToExclude ) { <nl> / / could be replaced with org . apache . commons . io . FileUtils . list ( ) method <nl> / / if only we add commons - io library <nl> final List < File > result = Lists . newLinkedList ( ) ; <nl> <nl> if ( node . canRead ( ) ) { <nl> if ( node . isDirectory ( ) ) { <nl> - final File [ ] files = node . listFiles ( ) ; <nl> - / / listFiles ( ) can return null , so we need to check it <nl> - if ( files ! = null ) { <nl> - for ( File element : files ) { <nl> - result . addAll ( listFiles ( element ) ) ; <nl> + if ( ! isDirectoryExcluded ( node . getAbsolutePath ( ) , patternsToExclude ) ) { <nl> + final File [ ] files = node . listFiles ( ) ; <nl> + / / listFiles ( ) can return null , so we need to check it <nl> + if ( files ! = null ) { <nl> + for ( File element : files ) { <nl> + result . addAll ( listFiles ( element , patternsToExclude ) ) ; <nl> + } <nl> } <nl> } <nl> } <nl> @ @ - 513 , 6 + 555 , 26 @ @ public final class Main { <nl> return result ; <nl> } <nl> <nl> + / * * <nl> + * Checks if a directory { @ code path } should be excluded based on if it matches one of the <nl> + * patterns supplied . <nl> + * @ param path The path of the directory to check <nl> + * @ param patternsToExclude The list of directory patterns to exclude from searching . <nl> + * @ return True if the directory matches one of the patterns . <nl> + * / <nl> + private static boolean isDirectoryExcluded ( String path , List < Pattern > patternsToExclude ) { <nl> + boolean result = false ; <nl> + <nl> + for ( Pattern pattern : patternsToExclude ) { <nl> + if ( pattern . matcher ( path ) . find ( ) ) { <nl> + result = true ; <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + <nl> / * * Prints the usage information . * * / <nl> private static void printUsage ( ) { <nl> final HelpFormatter formatter = new HelpFormatter ( ) ; <nl> @ @ - 544 , 6 + 606 , 10 @ @ public final class Main { <nl> " Print full Abstract Syntax Tree of the file " ) ; <nl> options . addOption ( OPTION _ D _ NAME , OPTION _ DEBUG _ NAME , false , <nl> " Print all debug logging of CheckStyle utility " ) ; <nl> + options . addOption ( OPTION _ E _ NAME , OPTION _ EXCLUDE _ NAME , true , <nl> + " Directory path to exclude from CheckStyle " ) ; <nl> + options . addOption ( OPTION _ X _ NAME , OPTION _ EXCLUDE _ REGEXP _ NAME , true , <nl> + " Regular expression of directory to exclude from CheckStyle " ) ; <nl> return options ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 97411cd . . 47a156a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 32 , 12 + 32 , 14 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> + import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> import java . util . ResourceBundle ; <nl> import java . util . logging . Handler ; <nl> import java . util . logging . Level ; <nl> import java . util . logging . Logger ; <nl> + import java . util . regex . Pattern ; <nl> <nl> import org . apache . commons . io . FileUtils ; <nl> import org . junit . Before ; <nl> @ @ - 59 , 18 + 61 , 21 @ @ public class MainTest { <nl> private static final String USAGE = String . format ( Locale . ROOT , <nl> " usage : java com . puppycrawl . tools . checkstyle . Main [ options ] - c < config . xml > " <nl> + " file . . . % n " <nl> - + " - c < arg > Sets the check configuration file to use . % n " <nl> - + " - d , - - debug Print all debug logging of CheckStyle utility % n " <nl> - + " - f < arg > Sets the output format . ( plain | xml ) . Defaults to " <nl> + + " - c < arg > Sets the check configuration file to use . % n " <nl> + + " - d , - - debug Print all debug logging of CheckStyle utility % n " <nl> + + " - e , - - exclude < arg > Directory path to exclude from CheckStyle % n " <nl> + + " - f < arg > Sets the output format . ( plain | xml ) . Defaults to " <nl> + " plain % n " <nl> - + " - j , - - javadocTree Print Parse tree of the Javadoc comment % n " <nl> - + " - J , - - treeWithJavadoc Print full Abstract Syntax Tree of the file % n " <nl> - + " - o < arg > Sets the output file . Defaults to stdout % n " <nl> - + " - p < arg > Loads the properties file % n " <nl> - + " - t , - - tree Print Abstract Syntax Tree ( AST ) of the file % n " <nl> - + " - T , - - treeWithComments Print Abstract Syntax Tree ( AST ) of the file " <nl> + + " - j , - - javadocTree Print Parse tree of the Javadoc comment % n " <nl> + + " - J , - - treeWithJavadoc Print full Abstract Syntax Tree of the file % n " <nl> + + " - o < arg > Sets the output file . Defaults to stdout % n " <nl> + + " - p < arg > Loads the properties file % n " <nl> + + " - t , - - tree Print Abstract Syntax Tree ( AST ) of the file % n " <nl> + + " - T , - - treeWithComments Print Abstract Syntax Tree ( AST ) of the file " <nl> + " including comments % n " <nl> - + " - v Print product version and exit % n " ) ; <nl> + + " - v Print product version and exit % n " <nl> + + " - x , - - exclude - regexp < arg > Regular expression of directory to exclude from " <nl> + + " CheckStyle % n " ) ; <nl> <nl> private static Logger logger ; <nl> private static Handler [ ] handlers ; <nl> @ @ - 595 , 7 + 600 , 7 @ @ public class MainTest { <nl> @ Test <nl> @ SuppressWarnings ( " unchecked " ) <nl> public void testListFilesNotFile ( ) throws Exception { <nl> - final Method method = Main . class . getDeclaredMethod ( " listFiles " , File . class ) ; <nl> + final Method method = Main . class . getDeclaredMethod ( " listFiles " , File . class , List . class ) ; <nl> method . setAccessible ( true ) ; <nl> <nl> final File fileMock = mock ( File . class ) ; <nl> @ @ - 603 , 14 + 608 , 14 @ @ public class MainTest { <nl> when ( fileMock . isDirectory ( ) ) . thenReturn ( false ) ; <nl> when ( fileMock . isFile ( ) ) . thenReturn ( false ) ; <nl> <nl> - final List < File > result = ( List < File > ) method . invoke ( null , fileMock ) ; <nl> + final List < File > result = ( List < File > ) method . invoke ( null , fileMock , null ) ; <nl> assertEquals ( 0 , result . size ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ SuppressWarnings ( " unchecked " ) <nl> public void testListFilesDirectoryWithNull ( ) throws Exception { <nl> - final Method method = Main . class . getDeclaredMethod ( " listFiles " , File . class ) ; <nl> + final Method method = Main . class . getDeclaredMethod ( " listFiles " , File . class , List . class ) ; <nl> method . setAccessible ( true ) ; <nl> <nl> final File fileMock = mock ( File . class ) ; <nl> @ @ - 618 , 7 + 623 , 8 @ @ public class MainTest { <nl> when ( fileMock . isDirectory ( ) ) . thenReturn ( true ) ; <nl> when ( fileMock . listFiles ( ) ) . thenReturn ( null ) ; <nl> <nl> - final List < File > result = ( List < File > ) method . invoke ( null , fileMock ) ; <nl> + final List < File > result = ( List < File > ) method . invoke ( null , fileMock , <nl> + new ArrayList < Pattern > ( ) ) ; <nl> assertEquals ( 0 , result . size ( ) ) ; <nl> } <nl> <nl> @ @ - 849 , 4 + 855 , 45 @ @ public class MainTest { <nl> } ) ; <nl> Main . main ( " - c " , " / google _ checks . xml " , getPath ( " InputMain . java " ) , " - d " ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testExcludeOption ( ) throws Exception { <nl> + exit . expectSystemExitWithStatus ( - 1 ) ; <nl> + exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> + @ Override <nl> + public void checkAssertion ( ) { <nl> + assertEquals ( " Files to process must be specified , found 0 . " <nl> + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; <nl> + assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> + } <nl> + } ) ; <nl> + Main . main ( " - c " , " / google _ checks . xml " , getFilePath ( " " ) , " - e " , getFilePath ( " " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testExcludeRegexpOption ( ) throws Exception { <nl> + exit . expectSystemExitWithStatus ( - 1 ) ; <nl> + exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> + @ Override <nl> + public void checkAssertion ( ) { <nl> + assertEquals ( " Files to process must be specified , found 0 . " <nl> + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; <nl> + assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> + } <nl> + } ) ; <nl> + Main . main ( " - c " , " / google _ checks . xml " , getFilePath ( " " ) , " - x " , " . " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public void testExcludeDirectoryNotMatch ( ) throws Exception { <nl> + final Method method = Main . class . getDeclaredMethod ( " listFiles " , File . class , List . class ) ; <nl> + method . setAccessible ( true ) ; <nl> + final List < Pattern > list = new ArrayList < > ( ) ; <nl> + list . add ( Pattern . compile ( " BAD _ PATH " ) ) ; <nl> + <nl> + final List < File > result = ( List < File > ) method . invoke ( null , new File ( getFilePath ( " " ) ) , <nl> + list ) ; <nl> + assertNotEquals ( 0 , result . size ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / xdocs / cmdline . xml . vm b / src / xdocs / cmdline . xml . vm <nl> index a40126c . . f77f405 100644 <nl> - - - a / src / xdocs / cmdline . xml . vm <nl> + + + b / src / xdocs / cmdline . xml . vm <nl> @ @ - 103 , 6 + 103 , 15 @ @ java - D & lt ; property & gt ; = & lt ; value & gt ; \ <nl> < code > - d , - - debug < / code > - Print all debug logging of CheckStyle utility . <nl> < / li > <nl> < li > <nl> + < code > - e , - - exclude excludedDirectory < / code > - Directory to exclude from <nl> + CheckStyle . The directory can be the full , absolute path , or relative to the current path . <nl> + Multiple excludes are allowed . <nl> + < / li > <nl> + < li > <nl> + < code > - x , - - exclude - regexp excludedDirectoryPattern < / code > - Directory pattern to exclude from <nl> + CheckStyle . Multiple excludes are allowed . <nl> + < / li > <nl> + < li > <nl> < code > - v < / code > - print product version and exit . Any other option is ignored . <nl> < / li > <nl> < / ul >

TEST DIFF:
diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml 
 index 400836d . . 0b8f4b1 100644 
 - - - a / config / checkstyle _ sevntu _ checks . xml 
 + + + b / config / checkstyle _ sevntu _ checks . xml 
 @ @ - 126 , 6 + 126 , 17 @ @ 
 < property name = " forbiddenImportsExcludesRegexp " 
 value = " ^ com . puppycrawl . tools . checkstyle . checks . naming . AccessModifier $ " / > 
 < / module > 
 + < module name = " ForbidCertainImports " > 
 + < property name = " packageNameRegexp " value = " . + " / > 
 + < property name = " id " value = " ForbidInterfacesImportFromJavaUtilStream " / > 
 + < ! - - Disallowed till https : / / github . com / mojohaus / cobertura - maven - plugin / issues / 29 - - > 
 + < property name = " forbiddenImportsRegexp " value = " java \ . util \ . stream \ . Stream | 
 + java \ . util \ . stream \ . Stream \ . Builder | java \ . util \ . stream \ . DoubleStream | 
 + java \ . util \ . stream \ . DoubleStream \ . Builder | java \ . util \ . stream \ . IntStream | 
 + java \ . util \ . stream \ . IntStream \ . Builder | java \ . util \ . stream \ . LongStream | 
 + java \ . util \ . stream \ . LongStream \ . Builder | java \ . util \ . stream \ . BaseStream | 
 + java \ . util \ . stream \ . Collector " / > 
 + < / module > 
 < module name = " LineLengthExtended " > 
 < property name = " max " value = " 100 " / > 
 < property name = " ignoreClass " value = " true " / > 
 diff - - git a / config / import - control . xml b / config / import - control . xml 
 index ca38a78 . . 53eef91 100644 
 - - - a / config / import - control . xml 
 + + + b / config / import - control . xml 
 @ @ - 16 , 6 + 16 , 18 @ @ 
 < allow pkg = " org . apache . commons . logging " / > 
 < allow pkg = " org . xml . sax " / > 
 
 + < ! - - Disallowed till https : / / github . com / mojohaus / cobertura - maven - plugin / issues / 29 - - > 
 + < disallow class = " java . util . stream . Stream " / > 
 + < disallow class = " java . util . stream . Stream . Builder " / > 
 + < disallow class = " java . util . stream . DoubleStream " / > 
 + < disallow class = " java . util . stream . DoubleStream . Builder " / > 
 + < disallow class = " java . util . stream . IntStream " / > 
 + < disallow class = " java . util . stream . IntStream . Builder " / > 
 + < disallow class = " java . util . stream . LongStream " / > 
 + < disallow class = " java . util . stream . LongStream . Builder " / > 
 + < disallow class = " java . util . stream . BaseStream " / > 
 + < disallow class = " java . util . stream . Collector " / > 
 + 
 < ! - - The local ones - - > 
 < allow pkg = " java . lang . reflect " local - only = " true " / > 
 < allow pkg = " java . nio " local - only = " true " / > 
 diff - - git a / config / sevntu _ suppressions . xml b / config / sevntu _ suppressions . xml 
 index d05a9aa . . 5651834 100644 
 - - - a / config / sevntu _ suppressions . xml 
 + + + b / config / sevntu _ suppressions . xml 
 @ @ - 26 , 4 + 26 , 9 @ @ 
 JavadocUtils . java and JavadocUtilsTest . java . - - > 
 < suppress checks = " ForbidCertainImports " 
 files = " JavadocUtils \ . java | JavadocUtilsTest \ . java " / > 
 + 
 + < ! - - ITs and UTs are not included in Cobertura coverage report 
 + and do not have coverage problems due to imports from java . util . stream . - - > 
 + < suppress id = " ForbidInterfacesImportFromJavaUtilStream " 
 + files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 < / suppressions > 
 \ No newline at end of file 
 diff - - git a / pom . xml b / pom . xml 
 index 382576c . . 7ca298f 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1463 , 6 + 1463 , 8 @ @ 
 < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractNestedDepthCheck . class < / exclude > 
 < exclude > com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . class < / exclude > 
 < exclude > com / puppycrawl / tools / checkstyle / checks / naming / AbstractTypeParameterNameCheck . class < / exclude > 
 + < ! - - Until https : / / github . com / checkstyle / checkstyle / issues / 3848 - - > 
 + < exclude > com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . class < / exclude > 
 < / excludes > 
 < / instrumentation > 
 < / configuration > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 index 5149a3d . . a999778 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 @ @ - 19 , 10 + 19 , 10 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 + import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . Set ; 
 import java . util . stream . Collectors ; 
 - import java . util . stream . Stream ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 @ @ - 68 , 7 + 68 , 7 @ @ public class FinalParametersCheck extends AbstractCheck { 
 * primitive datatypes < / a > . 
 * / 
 private final Set < Integer > primitiveDataTypes = Collections . unmodifiableSet ( 
 - Stream . of ( 
 + Arrays . stream ( new Integer [ ] { 
 TokenTypes . LITERAL _ BYTE , 
 TokenTypes . LITERAL _ SHORT , 
 TokenTypes . LITERAL _ INT , 
 @ @ - 76 , 7 + 76 , 7 @ @ public class FinalParametersCheck extends AbstractCheck { 
 TokenTypes . LITERAL _ FLOAT , 
 TokenTypes . LITERAL _ DOUBLE , 
 TokenTypes . LITERAL _ BOOLEAN , 
 - TokenTypes . LITERAL _ CHAR ) 
 + TokenTypes . LITERAL _ CHAR , } ) 
 . collect ( Collectors . toSet ( ) ) ) ; 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java 
 index a3f7a72 . . 5e1d3d4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java 
 @ @ - 19 , 11 + 19 , 11 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 + import java . util . Arrays ; 
 import java . util . LinkedList ; 
 import java . util . List ; 
 import java . util . Set ; 
 import java . util . stream . Collectors ; 
 - import java . util . stream . Stream ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 @ @ - 45 , 9 + 45 , 9 @ @ public final class IllegalCatchCheck extends AbstractCheck { 
 public static final String MSG _ KEY = " illegal . catch " ; 
 
 / * * Illegal class names . * / 
 - private final Set < String > illegalClassNames = Stream . of ( " Exception " , " Error " , 
 - " RuntimeException " , " Throwable " , " java . lang . Error " , " java . lang . Exception " , 
 - " java . lang . RuntimeException " , " java . lang . Throwable " ) . collect ( Collectors . toSet ( ) ) ; 
 + private final Set < String > illegalClassNames = Arrays . stream ( new String [ ] { " Exception " , " Error " , 
 + " RuntimeException " , " Throwable " , " java . lang . Error " , " java . lang . Exception " , 
 + " java . lang . RuntimeException " , " java . lang . Throwable " , } ) . collect ( Collectors . toSet ( ) ) ; 
 
 / * * 
 * Set the list of illegal classes . 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 index 26a552b . . e73cc6f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 @ @ - 19 , 10 + 19 , 10 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 + import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . Set ; 
 import java . util . stream . Collectors ; 
 - import java . util . stream . Stream ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 @ @ - 61 , 11 + 61 , 12 @ @ public final class IllegalThrowsCheck extends AbstractCheck { 
 
 / * * Methods which should be ignored . * / 
 private final Set < String > ignoredMethodNames = 
 - Stream . of ( " finalize " ) . collect ( Collectors . toSet ( ) ) ; 
 + Arrays . stream ( new String [ ] { " finalize " , } ) . collect ( Collectors . toSet ( ) ) ; 
 
 / * * Illegal class names . * / 
 - private final Set < String > illegalClassNames = Stream . of ( " Error " , " RuntimeException " , 
 - " Throwable " , " java . lang . Error " , " java . lang . RuntimeException " , " java . lang . Throwable " ) 
 + private final Set < String > illegalClassNames = Arrays . stream ( 
 + new String [ ] { " Error " , " RuntimeException " , " Throwable " , " java . lang . Error " , 
 + " java . lang . RuntimeException " , " java . lang . Throwable " , } ) 
 . collect ( Collectors . toSet ( ) ) ; 
 
 / * * Property for ignoring overridden methods . * / 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 index 66b7b6c . . fc37faa 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 @ @ - 20 , 13 + 20 , 13 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import java . util . ArrayDeque ; 
 + import java . util . Arrays ; 
 import java . util . Deque ; 
 import java . util . HashSet ; 
 import java . util . LinkedList ; 
 import java . util . List ; 
 import java . util . Set ; 
 import java . util . stream . Collectors ; 
 - import java . util . stream . Stream ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 @ @ - 109 , 9 + 109 , 14 @ @ public final class ModifiedControlVariableCheck extends AbstractCheck { 
 private static final String ILLEGAL _ TYPE _ OF _ TOKEN = " Illegal type of token : " ; 
 
 / * * Operations which can change control variable in update part of the loop . * / 
 - private static final Set < Integer > MUTATION _ OPERATIONS = Stream . of ( TokenTypes . POST _ INC , 
 - TokenTypes . POST _ DEC , TokenTypes . DEC , TokenTypes . INC , TokenTypes . ASSIGN ) 
 - . collect ( Collectors . toSet ( ) ) ; 
 + private static final Set < Integer > MUTATION _ OPERATIONS = 
 + Arrays . stream ( new Integer [ ] { 
 + TokenTypes . POST _ INC , 
 + TokenTypes . POST _ DEC , 
 + TokenTypes . DEC , 
 + TokenTypes . INC , 
 + TokenTypes . ASSIGN , 
 + } ) . collect ( Collectors . toSet ( ) ) ; 
 
 / * * Stack of block parameters . * / 
 private final Deque < Deque < String > > variableStack = new ArrayDeque < > ( ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index 3d6e80d . . 06351f3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import java . util . ArrayDeque ; 
 + import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . Deque ; 
 import java . util . HashMap ; 
 @ @ - 29 , 7 + 30 , 6 @ @ import java . util . Map ; 
 import java . util . Queue ; 
 import java . util . Set ; 
 import java . util . stream . Collectors ; 
 - import java . util . stream . Stream ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 @ @ - 103 , 32 + 103 , 34 @ @ public class RequireThisCheck extends AbstractCheck { 
 public static final String MSG _ VARIABLE = " require . this . variable " ; 
 
 / * * Set of all declaration tokens . * / 
 - private static final Set < Integer > DECLARATION _ TOKENS = Collections . unmodifiableSet ( Stream . of ( 
 - TokenTypes . VARIABLE _ DEF , 
 - TokenTypes . CTOR _ DEF , 
 - TokenTypes . METHOD _ DEF , 
 - TokenTypes . CLASS _ DEF , 
 - TokenTypes . ENUM _ DEF , 
 - TokenTypes . INTERFACE _ DEF , 
 - TokenTypes . PARAMETER _ DEF , 
 - TokenTypes . TYPE _ ARGUMENT 
 - ) . collect ( Collectors . toSet ( ) ) ) ; 
 + private static final Set < Integer > DECLARATION _ TOKENS = Collections . unmodifiableSet ( 
 + Arrays . stream ( new Integer [ ] { 
 + TokenTypes . VARIABLE _ DEF , 
 + TokenTypes . CTOR _ DEF , 
 + TokenTypes . METHOD _ DEF , 
 + TokenTypes . CLASS _ DEF , 
 + TokenTypes . ENUM _ DEF , 
 + TokenTypes . INTERFACE _ DEF , 
 + TokenTypes . PARAMETER _ DEF , 
 + TokenTypes . TYPE _ ARGUMENT , 
 + } ) . collect ( Collectors . toSet ( ) ) ) ; 
 / * * Set of all assign tokens . * / 
 - private static final Set < Integer > ASSIGN _ TOKENS = Collections . unmodifiableSet ( Stream . of ( 
 - TokenTypes . ASSIGN , 
 - TokenTypes . PLUS _ ASSIGN , 
 - TokenTypes . STAR _ ASSIGN , 
 - TokenTypes . DIV _ ASSIGN , 
 - TokenTypes . MOD _ ASSIGN , 
 - TokenTypes . SR _ ASSIGN , 
 - TokenTypes . BSR _ ASSIGN , 
 - TokenTypes . SL _ ASSIGN , 
 - TokenTypes . BAND _ ASSIGN , 
 - TokenTypes . BXOR _ ASSIGN 
 - ) . collect ( Collectors . toSet ( ) ) ) ; 
 + private static final Set < Integer > ASSIGN _ TOKENS = Collections . unmodifiableSet ( 
 + Arrays . stream ( new Integer [ ] { 
 + TokenTypes . ASSIGN , 
 + TokenTypes . PLUS _ ASSIGN , 
 + TokenTypes . STAR _ ASSIGN , 
 + TokenTypes . DIV _ ASSIGN , 
 + TokenTypes . MOD _ ASSIGN , 
 + TokenTypes . SR _ ASSIGN , 
 + TokenTypes . BSR _ ASSIGN , 
 + TokenTypes . SL _ ASSIGN , 
 + TokenTypes . BAND _ ASSIGN , 
 + TokenTypes . BXOR _ ASSIGN , 
 + } ) . collect ( Collectors . toSet ( ) ) ) ; 
 / * * Set of all compound assign tokens . * / 
 private static final Set < Integer > COMPOUND _ ASSIGN _ TOKENS = Collections . unmodifiableSet ( 
 - Stream . of ( 
 + Arrays . stream ( new Integer [ ] { 
 TokenTypes . PLUS _ ASSIGN , 
 TokenTypes . STAR _ ASSIGN , 
 TokenTypes . DIV _ ASSIGN , 
 @ @ - 137 , 8 + 139 , 8 @ @ public class RequireThisCheck extends AbstractCheck { 
 TokenTypes . BSR _ ASSIGN , 
 TokenTypes . SL _ ASSIGN , 
 TokenTypes . BAND _ ASSIGN , 
 - TokenTypes . BXOR _ ASSIGN 
 - ) . collect ( Collectors . toSet ( ) ) ) ; 
 + TokenTypes . BXOR _ ASSIGN , 
 + } ) . collect ( Collectors . toSet ( ) ) ) ; 
 
 / * * Tree of all the parsed frames . * / 
 private Map < DetailAST , AbstractFrame > frames ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 index 932bf4d . . aab4941 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 @ @ - 27 , 7 + 27 , 6 @ @ import java . util . List ; 
 import java . util . Set ; 
 import java . util . regex . Pattern ; 
 import java . util . stream . Collectors ; 
 - import java . util . stream . Stream ; 
 
 import antlr . collections . AST ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 @ @ - 248 , 7 + 247 , 7 @ @ public class VisibilityModifierCheck 
 
 / * * Default immutable types canonical names . * / 
 private static final List < String > DEFAULT _ IMMUTABLE _ TYPES = Collections . unmodifiableList ( 
 - Stream . of ( 
 + Arrays . stream ( new String [ ] { 
 " java . lang . String " , 
 " java . lang . Integer " , 
 " java . lang . Byte " , 
 @ @ - 268 , 16 + 267 , 16 @ @ public class VisibilityModifierCheck 
 " java . net . URI " , 
 " java . net . Inet4Address " , 
 " java . net . Inet6Address " , 
 - " java . net . InetSocketAddress " 
 - ) . collect ( Collectors . toList ( ) ) ) ; 
 + " java . net . InetSocketAddress " , 
 + } ) . collect ( Collectors . toList ( ) ) ) ; 
 
 / * * Default ignore annotations canonical names . * / 
 private static final List < String > DEFAULT _ IGNORE _ ANNOTATIONS = Collections . unmodifiableList ( 
 - Stream . of ( 
 + Arrays . stream ( new String [ ] { 
 " org . junit . Rule " , 
 " org . junit . ClassRule " , 
 - " com . google . common . annotations . VisibleForTesting " 
 - ) . collect ( Collectors . toList ( ) ) ) ; 
 + " com . google . common . annotations . VisibleForTesting " , 
 + } ) . collect ( Collectors . toList ( ) ) ) ; 
 
 / * * Name for ' public ' access modifier . * / 
 private static final String PUBLIC _ ACCESS _ MODIFIER = " public " ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 index 5641e6a . . ac56238 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . javadoc ; 
 
 import java . util . ArrayDeque ; 
 + import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . Deque ; 
 import java . util . List ; 
 @ @ - 28 , 7 + 29 , 6 @ @ import java . util . Set ; 
 import java . util . TreeSet ; 
 import java . util . regex . Pattern ; 
 import java . util . stream . Collectors ; 
 - import java . util . stream . Stream ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 @ @ - 69 , 22 + 69 , 23 @ @ public class JavadocStyleCheck 
 public static final String MSG _ EXTRA _ HTML = " javadoc . extraHtml " ; 
 
 / * * HTML tags that do not require a close tag . * / 
 - private static final Set < String > SINGLE _ TAGS = Collections . unmodifiableSortedSet ( Stream . of ( 
 - " br " , " li " , " dt " , " dd " , " hr " , " img " , " p " , " td " , " tr " , " th " ) 
 - . collect ( Collectors . toCollection ( TreeSet : : new ) ) ) ; 
 + private static final Set < String > SINGLE _ TAGS = Collections . unmodifiableSortedSet ( 
 + Arrays . stream ( new String [ ] { " br " , " li " , " dt " , " dd " , " hr " , " img " , " p " , " td " , " tr " , " th " , } ) 
 + . collect ( Collectors . toCollection ( TreeSet : : new ) ) ) ; 
 
 / * * HTML tags that are allowed in java docs . 
 * From https : / / www . w3schools . com / tags / default . asp 
 * The forms and structure tags are not allowed 
 * / 
 - private static final Set < String > ALLOWED _ TAGS = Collections . unmodifiableSortedSet ( Stream . of ( 
 - " a " , " abbr " , " acronym " , " address " , " area " , " b " , " bdo " , " big " , 
 - " blockquote " , " br " , " caption " , " cite " , " code " , " colgroup " , " dd " , 
 - " del " , " div " , " dfn " , " dl " , " dt " , " em " , " fieldset " , " font " , " h1 " , 
 - " h2 " , " h3 " , " h4 " , " h5 " , " h6 " , " hr " , " i " , " img " , " ins " , " kbd " , 
 - " li " , " ol " , " p " , " pre " , " q " , " samp " , " small " , " span " , " strong " , 
 - " style " , " sub " , " sup " , " table " , " tbody " , " td " , " tfoot " , " th " , 
 - " thead " , " tr " , " tt " , " u " , " ul " , " var " ) 
 + private static final Set < String > ALLOWED _ TAGS = Collections . unmodifiableSortedSet ( 
 + Arrays . stream ( new String [ ] { 
 + " a " , " abbr " , " acronym " , " address " , " area " , " b " , " bdo " , " big " , 
 + " blockquote " , " br " , " caption " , " cite " , " code " , " colgroup " , " dd " , 
 + " del " , " div " , " dfn " , " dl " , " dt " , " em " , " fieldset " , " font " , " h1 " , 
 + " h2 " , " h3 " , " h4 " , " h5 " , " h6 " , " hr " , " i " , " img " , " ins " , " kbd " , 
 + " li " , " ol " , " p " , " pre " , " q " , " samp " , " small " , " span " , " strong " , 
 + " style " , " sub " , " sup " , " table " , " tbody " , " td " , " tfoot " , " th " , 
 + " thead " , " tr " , " tt " , " u " , " ul " , " var " , } ) 
 . collect ( Collectors . toCollection ( TreeSet : : new ) ) ) ; 
 
 / * * The scope to check . * / 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java 
 index e5a2820 . . 946bfaa 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import java . util . Deque ; 
 import java . util . Set ; 
 import java . util . TreeSet ; 
 import java . util . stream . Collectors ; 
 - import java . util . stream . Stream ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 @ @ - 43 , 7 + 42 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; 
 public abstract class AbstractClassCouplingCheck extends AbstractCheck { 
 / * * Class names to ignore . * / 
 private static final Set < String > DEFAULT _ EXCLUDED _ CLASSES = Collections . unmodifiableSet ( 
 - Stream . of ( 
 + Arrays . stream ( new String [ ] { 
 / / primitives 
 " boolean " , " byte " , " char " , " double " , " float " , " int " , 
 " long " , " short " , " void " , 
 @ @ - 62 , 8 + 61 , 8 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { 
 / / java . util . * 
 " List " , " ArrayList " , " Deque " , " Queue " , " LinkedList " , 
 " Set " , " HashSet " , " SortedSet " , " TreeSet " , 
 - " Map " , " HashMap " , " SortedMap " , " TreeMap " 
 - ) . collect ( Collectors . toSet ( ) ) ) ; 
 + " Map " , " HashMap " , " SortedMap " , " TreeMap " , 
 + } ) . collect ( Collectors . toSet ( ) ) ) ; 
 
 / * * Stack of contexts . * / 
 private final Deque < Context > contextStack = new ArrayDeque < > ( ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 index 44783ef . . 9872387 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . naming ; 
 
 import java . util . Arrays ; 
 import java . util . Optional ; 
 - import java . util . stream . Stream ; 
 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 75 , 9 + 74 , 12 @ @ public class ParameterNameCheck extends AbstractNameCheck { 
 private boolean ignoreOverridden ; 
 
 / * * Access modifiers of methods which should be checked . * / 
 - private AccessModifier [ ] accessModifiers = Stream . of ( AccessModifier . PUBLIC , 
 - AccessModifier . PROTECTED , AccessModifier . PACKAGE , AccessModifier . PRIVATE ) 
 - . toArray ( AccessModifier [ ] : : new ) ; 
 + private AccessModifier [ ] accessModifiers = { 
 + AccessModifier . PUBLIC , 
 + AccessModifier . PROTECTED , 
 + AccessModifier . PACKAGE , 
 + AccessModifier . PRIVATE , 
 + } ; 
 
 / * * 
 * Creates a new { @ code ParameterNameCheck } instance .

NEAREST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 69e91b8 . . 6a2980b 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 149 , 7 + 149 , 7 @ @ 
 
 < ! - - Suppressions from PMD configuration - - > 
 < ! - - validateCli is not reasonable to split as encapsulation of logic will be damaged - - > 
 - < suppress checks = " CyclomaticComplexity " files = " Main \ . java " lines = " 212 " / > 
 + < suppress checks = " CyclomaticComplexity " files = " Main \ . java " lines = " 249 " / > 
 < ! - - JavadocMethodCheck , JavadocStyleCheck , JavadocUtils . getJavadocTags ( ) - deprecated - - > 
 < suppress checks = " CyclomaticComplexity " files = " JavadocMethodCheck \ . java " / > 
 < suppress checks = " CyclomaticComplexity " files = " JavadocStyleCheck \ . java " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index 259b3fe . . a440e87 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import java . util . logging . Filter ; 
 import java . util . logging . Level ; 
 import java . util . logging . LogRecord ; 
 import java . util . logging . Logger ; 
 + import java . util . regex . Pattern ; 
 
 import org . apache . commons . cli . CommandLine ; 
 import org . apache . commons . cli . CommandLineParser ; 
 @ @ - 110 , 6 + 111 , 18 @ @ public final class Main { 
 / * * Name for the option ' - - debug ' . * / 
 private static final String OPTION _ DEBUG _ NAME = " debug " ; 
 
 + / * * Name for the option ' e ' . * / 
 + private static final String OPTION _ E _ NAME = " e " ; 
 + 
 + / * * Name for the option ' - - exclude ' . * / 
 + private static final String OPTION _ EXCLUDE _ NAME = " exclude " ; 
 + 
 + / * * Name for the option ' x ' . * / 
 + private static final String OPTION _ X _ NAME = " x " ; 
 + 
 + / * * Name for the option ' - - exclude - regexp ' . * / 
 + private static final String OPTION _ EXCLUDE _ REGEXP _ NAME = " exclude - regexp " ; 
 + 
 / * * Name for ' xml ' format . * / 
 private static final String XML _ FORMAT _ NAME = " xml " ; 
 
 @ @ - 145 , 7 + 158 , 8 @ @ public final class Main { 
 exitStatus = 0 ; 
 } 
 else { 
 - final List < File > filesToProcess = getFilesToProcess ( commandLine . getArgs ( ) ) ; 
 + final List < File > filesToProcess = getFilesToProcess ( getExclusions ( commandLine ) , 
 + commandLine . getArgs ( ) ) ; 
 
 / / return error if something is wrong in arguments 
 final List < String > messages = validateCli ( commandLine , filesToProcess ) ; 
 @ @ - 204 , 6 + 218 , 29 @ @ public final class Main { 
 } 
 
 / * * 
 + * Gets the list of exclusions provided through the command line argument . 
 + * @ param commandLine command line object 
 + * @ return List of exclusion patterns . 
 + * / 
 + private static List < Pattern > getExclusions ( CommandLine commandLine ) { 
 + final List < Pattern > result = new ArrayList < > ( ) ; 
 + 
 + if ( commandLine . hasOption ( OPTION _ E _ NAME ) ) { 
 + for ( String value : commandLine . getOptionValues ( OPTION _ E _ NAME ) ) { 
 + result . add ( Pattern . compile ( " ^ " + Pattern . quote ( new File ( value ) . getAbsolutePath ( ) ) 
 + + " $ " ) ) ; 
 + } 
 + } 
 + if ( commandLine . hasOption ( OPTION _ X _ NAME ) ) { 
 + for ( String value : commandLine . getOptionValues ( OPTION _ X _ NAME ) ) { 
 + result . add ( Pattern . compile ( value ) ) ; 
 + } 
 + } 
 + 
 + return result ; 
 + } 
 + 
 + / * * 
 * Do validation of Command line options . 
 * @ param cmdLine command line object 
 * @ param filesToProcess List of files to process found from the command line . 
 @ @ - 471 , 14 + 508 , 16 @ @ public final class Main { 
 
 / * * 
 * Determines the files to process . 
 + * @ param patternsToExclude The list of directory patterns to exclude from searching . 
 * @ param filesToProcess 
 * arguments that were not processed yet but shall be 
 * @ return list of files to process 
 * / 
 - private static List < File > getFilesToProcess ( String . . . filesToProcess ) { 
 + private static List < File > getFilesToProcess ( List < Pattern > patternsToExclude , 
 + String . . . filesToProcess ) { 
 final List < File > files = Lists . newLinkedList ( ) ; 
 for ( String element : filesToProcess ) { 
 - files . addAll ( listFiles ( new File ( element ) ) ) ; 
 + files . addAll ( listFiles ( new File ( element ) , patternsToExclude ) ) ; 
 } 
 
 return files ; 
 @ @ - 489 , 20 + 528 , 23 @ @ public final class Main { 
 * list . Subdirectories are also traversed . 
 * @ param node 
 * the node to process 
 + * @ param patternsToExclude The list of directory patterns to exclude from searching . 
 * @ return found files 
 * / 
 - private static List < File > listFiles ( File node ) { 
 + private static List < File > listFiles ( File node , List < Pattern > patternsToExclude ) { 
 / / could be replaced with org . apache . commons . io . FileUtils . list ( ) method 
 / / if only we add commons - io library 
 final List < File > result = Lists . newLinkedList ( ) ; 
 
 if ( node . canRead ( ) ) { 
 if ( node . isDirectory ( ) ) { 
 - final File [ ] files = node . listFiles ( ) ; 
 - / / listFiles ( ) can return null , so we need to check it 
 - if ( files ! = null ) { 
 - for ( File element : files ) { 
 - result . addAll ( listFiles ( element ) ) ; 
 + if ( ! isDirectoryExcluded ( node . getAbsolutePath ( ) , patternsToExclude ) ) { 
 + final File [ ] files = node . listFiles ( ) ; 
 + / / listFiles ( ) can return null , so we need to check it 
 + if ( files ! = null ) { 
 + for ( File element : files ) { 
 + result . addAll ( listFiles ( element , patternsToExclude ) ) ; 
 + } 
 } 
 } 
 } 
 @ @ - 513 , 6 + 555 , 26 @ @ public final class Main { 
 return result ; 
 } 
 
 + / * * 
 + * Checks if a directory { @ code path } should be excluded based on if it matches one of the 
 + * patterns supplied . 
 + * @ param path The path of the directory to check 
 + * @ param patternsToExclude The list of directory patterns to exclude from searching . 
 + * @ return True if the directory matches one of the patterns . 
 + * / 
 + private static boolean isDirectoryExcluded ( String path , List < Pattern > patternsToExclude ) { 
 + boolean result = false ; 
 + 
 + for ( Pattern pattern : patternsToExclude ) { 
 + if ( pattern . matcher ( path ) . find ( ) ) { 
 + result = true ; 
 + break ; 
 + } 
 + } 
 + 
 + return result ; 
 + } 
 + 
 / * * Prints the usage information . * * / 
 private static void printUsage ( ) { 
 final HelpFormatter formatter = new HelpFormatter ( ) ; 
 @ @ - 544 , 6 + 606 , 10 @ @ public final class Main { 
 " Print full Abstract Syntax Tree of the file " ) ; 
 options . addOption ( OPTION _ D _ NAME , OPTION _ DEBUG _ NAME , false , 
 " Print all debug logging of CheckStyle utility " ) ; 
 + options . addOption ( OPTION _ E _ NAME , OPTION _ EXCLUDE _ NAME , true , 
 + " Directory path to exclude from CheckStyle " ) ; 
 + options . addOption ( OPTION _ X _ NAME , OPTION _ EXCLUDE _ REGEXP _ NAME , true , 
 + " Regular expression of directory to exclude from CheckStyle " ) ; 
 return options ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 97411cd . . 47a156a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 32 , 12 + 32 , 14 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 + import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . Locale ; 
 import java . util . ResourceBundle ; 
 import java . util . logging . Handler ; 
 import java . util . logging . Level ; 
 import java . util . logging . Logger ; 
 + import java . util . regex . Pattern ; 
 
 import org . apache . commons . io . FileUtils ; 
 import org . junit . Before ; 
 @ @ - 59 , 18 + 61 , 21 @ @ public class MainTest { 
 private static final String USAGE = String . format ( Locale . ROOT , 
 " usage : java com . puppycrawl . tools . checkstyle . Main [ options ] - c < config . xml > " 
 + " file . . . % n " 
 - + " - c < arg > Sets the check configuration file to use . % n " 
 - + " - d , - - debug Print all debug logging of CheckStyle utility % n " 
 - + " - f < arg > Sets the output format . ( plain | xml ) . Defaults to " 
 + + " - c < arg > Sets the check configuration file to use . % n " 
 + + " - d , - - debug Print all debug logging of CheckStyle utility % n " 
 + + " - e , - - exclude < arg > Directory path to exclude from CheckStyle % n " 
 + + " - f < arg > Sets the output format . ( plain | xml ) . Defaults to " 
 + " plain % n " 
 - + " - j , - - javadocTree Print Parse tree of the Javadoc comment % n " 
 - + " - J , - - treeWithJavadoc Print full Abstract Syntax Tree of the file % n " 
 - + " - o < arg > Sets the output file . Defaults to stdout % n " 
 - + " - p < arg > Loads the properties file % n " 
 - + " - t , - - tree Print Abstract Syntax Tree ( AST ) of the file % n " 
 - + " - T , - - treeWithComments Print Abstract Syntax Tree ( AST ) of the file " 
 + + " - j , - - javadocTree Print Parse tree of the Javadoc comment % n " 
 + + " - J , - - treeWithJavadoc Print full Abstract Syntax Tree of the file % n " 
 + + " - o < arg > Sets the output file . Defaults to stdout % n " 
 + + " - p < arg > Loads the properties file % n " 
 + + " - t , - - tree Print Abstract Syntax Tree ( AST ) of the file % n " 
 + + " - T , - - treeWithComments Print Abstract Syntax Tree ( AST ) of the file " 
 + " including comments % n " 
 - + " - v Print product version and exit % n " ) ; 
 + + " - v Print product version and exit % n " 
 + + " - x , - - exclude - regexp < arg > Regular expression of directory to exclude from " 
 + + " CheckStyle % n " ) ; 
 
 private static Logger logger ; 
 private static Handler [ ] handlers ; 
 @ @ - 595 , 7 + 600 , 7 @ @ public class MainTest { 
 @ Test 
 @ SuppressWarnings ( " unchecked " ) 
 public void testListFilesNotFile ( ) throws Exception { 
 - final Method method = Main . class . getDeclaredMethod ( " listFiles " , File . class ) ; 
 + final Method method = Main . class . getDeclaredMethod ( " listFiles " , File . class , List . class ) ; 
 method . setAccessible ( true ) ; 
 
 final File fileMock = mock ( File . class ) ; 
 @ @ - 603 , 14 + 608 , 14 @ @ public class MainTest { 
 when ( fileMock . isDirectory ( ) ) . thenReturn ( false ) ; 
 when ( fileMock . isFile ( ) ) . thenReturn ( false ) ; 
 
 - final List < File > result = ( List < File > ) method . invoke ( null , fileMock ) ; 
 + final List < File > result = ( List < File > ) method . invoke ( null , fileMock , null ) ; 
 assertEquals ( 0 , result . size ( ) ) ; 
 } 
 
 @ Test 
 @ SuppressWarnings ( " unchecked " ) 
 public void testListFilesDirectoryWithNull ( ) throws Exception { 
 - final Method method = Main . class . getDeclaredMethod ( " listFiles " , File . class ) ; 
 + final Method method = Main . class . getDeclaredMethod ( " listFiles " , File . class , List . class ) ; 
 method . setAccessible ( true ) ; 
 
 final File fileMock = mock ( File . class ) ; 
 @ @ - 618 , 7 + 623 , 8 @ @ public class MainTest { 
 when ( fileMock . isDirectory ( ) ) . thenReturn ( true ) ; 
 when ( fileMock . listFiles ( ) ) . thenReturn ( null ) ; 
 
 - final List < File > result = ( List < File > ) method . invoke ( null , fileMock ) ; 
 + final List < File > result = ( List < File > ) method . invoke ( null , fileMock , 
 + new ArrayList < Pattern > ( ) ) ; 
 assertEquals ( 0 , result . size ( ) ) ; 
 } 
 
 @ @ - 849 , 4 + 855 , 45 @ @ public class MainTest { 
 } ) ; 
 Main . main ( " - c " , " / google _ checks . xml " , getPath ( " InputMain . java " ) , " - d " ) ; 
 } 
 + 
 + @ Test 
 + public void testExcludeOption ( ) throws Exception { 
 + exit . expectSystemExitWithStatus ( - 1 ) ; 
 + exit . checkAssertionAfterwards ( new Assertion ( ) { 
 + @ Override 
 + public void checkAssertion ( ) { 
 + assertEquals ( " Files to process must be specified , found 0 . " 
 + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; 
 + assertEquals ( " " , systemErr . getLog ( ) ) ; 
 + } 
 + } ) ; 
 + Main . main ( " - c " , " / google _ checks . xml " , getFilePath ( " " ) , " - e " , getFilePath ( " " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testExcludeRegexpOption ( ) throws Exception { 
 + exit . expectSystemExitWithStatus ( - 1 ) ; 
 + exit . checkAssertionAfterwards ( new Assertion ( ) { 
 + @ Override 
 + public void checkAssertion ( ) { 
 + assertEquals ( " Files to process must be specified , found 0 . " 
 + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; 
 + assertEquals ( " " , systemErr . getLog ( ) ) ; 
 + } 
 + } ) ; 
 + Main . main ( " - c " , " / google _ checks . xml " , getFilePath ( " " ) , " - x " , " . " ) ; 
 + } 
 + 
 + @ Test 
 + @ SuppressWarnings ( " unchecked " ) 
 + public void testExcludeDirectoryNotMatch ( ) throws Exception { 
 + final Method method = Main . class . getDeclaredMethod ( " listFiles " , File . class , List . class ) ; 
 + method . setAccessible ( true ) ; 
 + final List < Pattern > list = new ArrayList < > ( ) ; 
 + list . add ( Pattern . compile ( " BAD _ PATH " ) ) ; 
 + 
 + final List < File > result = ( List < File > ) method . invoke ( null , new File ( getFilePath ( " " ) ) , 
 + list ) ; 
 + assertNotEquals ( 0 , result . size ( ) ) ; 
 + } 
 } 
 diff - - git a / src / xdocs / cmdline . xml . vm b / src / xdocs / cmdline . xml . vm 
 index a40126c . . f77f405 100644 
 - - - a / src / xdocs / cmdline . xml . vm 
 + + + b / src / xdocs / cmdline . xml . vm 
 @ @ - 103 , 6 + 103 , 15 @ @ java - D & lt ; property & gt ; = & lt ; value & gt ; \ 
 < code > - d , - - debug < / code > - Print all debug logging of CheckStyle utility . 
 < / li > 
 < li > 
 + < code > - e , - - exclude excludedDirectory < / code > - Directory to exclude from 
 + CheckStyle . The directory can be the full , absolute path , or relative to the current path . 
 + Multiple excludes are allowed . 
 + < / li > 
 + < li > 
 + < code > - x , - - exclude - regexp excludedDirectoryPattern < / code > - Directory pattern to exclude from 
 + CheckStyle . Multiple excludes are allowed . 
 + < / li > 
 + < li > 
 < code > - v < / code > - print product version and exit . Any other option is ignored . 
 < / li > 
 < / ul >
