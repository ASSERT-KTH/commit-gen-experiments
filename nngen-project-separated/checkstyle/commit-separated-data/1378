BLEU SCORE: 0.13832543625866361

TEST MSG: Issue # 2631 : Optimize JavadocUtils
GENERATED MSG: Issue # 1566 : Reducing JavadocUtils method length

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> index 0519fb8 . . e9576f5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> @ @ - 52 , 6 + 52 , 22 @ @ public final class JavadocUtils { <nl> private static final String UNKNOWN _ JAVADOC _ TOKEN _ ID _ EXCEPTION _ MESSAGE = " Unknown javadoc " <nl> + " token id . Given id : " ; <nl> <nl> + / * * Comment pattern . * / <nl> + private static final Pattern COMMENT _ PATTERN = Pattern . compile ( <nl> + " ^ \ \ s * ( ? : / \ \ * { 2 , } | \ \ * + ) \ \ s * ( . * ) " ) ; <nl> + <nl> + / * * Block tag pattern for a first line . * / <nl> + private static final Pattern BLOCK _ TAG _ PATTERN _ FIRST _ LINE = Pattern . compile ( <nl> + " / \ \ * { 2 , } \ \ s * @ ( \ \ p { Alpha } + ) \ \ s " ) ; <nl> + <nl> + / * * Block tag pattern . * / <nl> + private static final Pattern BLOCK _ TAG _ PATTERN = Pattern . compile ( <nl> + " ^ \ \ s * \ \ * * \ \ s * @ ( \ \ p { Alpha } + ) \ \ s " ) ; <nl> + <nl> + / * * Inline tag pattern . * / <nl> + private static final Pattern INLINE _ TAG _ PATTERN = Pattern . compile ( <nl> + " . * ? \ \ { @ ( \ \ p { Alpha } + ) \ \ s + ( . * ? ) \ \ } " ) ; <nl> + <nl> / / Using reflection gets all token names and values from JavadocTokenTypes class <nl> / / and saves to TOKEN _ NAME _ TO _ VALUE and TOKEN _ VALUE _ TO _ NAME collections . <nl> static { <nl> @ @ - 107 , 10 + 123 , 9 @ @ public final class JavadocUtils { <nl> final String [ ] text = textBlock . getText ( ) ; <nl> final List < JavadocTag > tags = Lists . newArrayList ( ) ; <nl> final List < InvalidJavadocTag > invalidTags = Lists . newArrayList ( ) ; <nl> - Pattern blockTagPattern = Pattern . compile ( " / \ \ * { 2 , } \ \ s * @ ( \ \ p { Alpha } + ) \ \ s " ) ; <nl> for ( int i = 0 ; i < text . length ; i + + ) { <nl> final String textValue = text [ i ] ; <nl> - final Matcher blockTagMatcher = blockTagPattern . matcher ( textValue ) ; <nl> + final Matcher blockTagMatcher = getBlockTagPattern ( i ) . matcher ( textValue ) ; <nl> if ( ( tagType = = JavadocTagType . ALL | | tagType = = JavadocTagType . BLOCK ) <nl> & & blockTagMatcher . find ( ) ) { <nl> final String tagName = blockTagMatcher . group ( 1 ) ; <nl> @ @ - 135 , 12 + 150 , 27 @ @ public final class JavadocUtils { <nl> else if ( tagType = = JavadocTagType . ALL | | tagType = = JavadocTagType . INLINE ) { <nl> lookForInlineTags ( textBlock , i , tags , invalidTags ) ; <nl> } <nl> - blockTagPattern = Pattern . compile ( " ^ \ \ s * \ \ * * \ \ s * @ ( \ \ p { Alpha } + ) \ \ s " ) ; <nl> } <nl> return new JavadocTags ( tags , invalidTags ) ; <nl> } <nl> <nl> / * * <nl> + * Get a block tag pattern depending on a line number of a javadoc . <nl> + * @ param lineNumber the line number . <nl> + * @ return a block tag pattern . <nl> + * / <nl> + private static Pattern getBlockTagPattern ( int lineNumber ) { <nl> + final Pattern blockTagPattern ; <nl> + if ( lineNumber = = 0 ) { <nl> + blockTagPattern = BLOCK _ TAG _ PATTERN _ FIRST _ LINE ; <nl> + } <nl> + else { <nl> + blockTagPattern = BLOCK _ TAG _ PATTERN ; <nl> + } <nl> + return blockTagPattern ; <nl> + } <nl> + <nl> + / * * <nl> * Looks for inline tags in comment and adds them to the proper tags collection . <nl> * @ param comment comment text block <nl> * @ param lineNumber line number in the comment <nl> @ @ - 151 , 8 + 181 , 7 @ @ public final class JavadocUtils { <nl> final List < JavadocTag > validTags , final List < InvalidJavadocTag > invalidTags ) { <nl> final String text = comment . getText ( ) [ lineNumber ] ; <nl> / / Match Javadoc text after comment characters <nl> - final Pattern commentPattern = Pattern . compile ( " ^ \ \ s * ( ? : / \ \ * { 2 , } | \ \ * + ) \ \ s * ( . * ) " ) ; <nl> - final Matcher commentMatcher = commentPattern . matcher ( text ) ; <nl> + final Matcher commentMatcher = COMMENT _ PATTERN . matcher ( text ) ; <nl> final String commentContents ; <nl> <nl> / / offset including comment characters <nl> @ @ - 167 , 8 + 196 , 7 @ @ public final class JavadocUtils { <nl> commentContents = text ; <nl> commentOffset = 0 ; <nl> } <nl> - final Pattern tagPattern = Pattern . compile ( " . * ? \ \ { @ ( \ \ p { Alpha } + ) \ \ s + ( . * ? ) \ \ } " ) ; <nl> - final Matcher tagMatcher = tagPattern . matcher ( commentContents ) ; <nl> + final Matcher tagMatcher = INLINE _ TAG _ PATTERN . matcher ( commentContents ) ; <nl> while ( tagMatcher . find ( ) ) { <nl> final String tagName = tagMatcher . group ( 1 ) ; <nl> final String tagValue = tagMatcher . group ( 2 ) . trim ( ) ;
NEAREST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java b / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java <nl> index 5f2f9f2 . . b4d93d3 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java <nl> @ @ - 15 , 7 + 15 , 7 @ @ public class ConfigValidationTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testGoogleChecks ( ) throws Exception { <nl> ConfigurationBuilder builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; <nl> - final Configuration checkerConfig = builder . config ; <nl> + final Configuration checkerConfig = builder . getConfiguration ( ) ; <nl> final Checker checker = new Checker ( ) ; <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . configure ( checkerConfig ) ; <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java b / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java <nl> index 00aedb7 . . d1c081d 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java <nl> @ @ - 25 , 16 + 25 , 16 @ @ public class ConfigurationBuilder extends BaseCheckTestSupport { <nl> <nl> 	 private final List < File > files = new ArrayList < > ( ) ; <nl> <nl> - 	 final Configuration config ; <nl> + 	 private final Configuration configuration ; <nl> <nl> - 	 URL url ; <nl> + 	 private final Pattern warnPattern = Utils . createPattern ( " . * [ ] * / / [ ] * warn [ ] * | / [ * ] warn [ * ] / " ) ; <nl> <nl> - 	 final Pattern warnPattern = Utils . createPattern ( " . * [ ] * / / [ ] * warn [ ] * | / [ * ] warn [ * ] / " ) ; <nl> + 	 private URL url ; <nl> <nl> 	 public ConfigurationBuilder ( File aROOT ) <nl> 	 	 	 throws CheckstyleException { <nl> 	 	 root = aROOT ; <nl> - 	 	 config = getConfigurationFromXML ( XML _ NAME , System . getProperties ( ) ) ; <nl> + 	 	 configuration = getConfigurationFromXML ( XML _ NAME , System . getProperties ( ) ) ; <nl> 	 	 listFiles ( files , root , " java " ) ; <nl> 	 } <nl> <nl> @ @ - 51 , 8 + 51 , 12 @ @ public class ConfigurationBuilder extends BaseCheckTestSupport { <nl> 	 	 } <nl> 	 } <nl> <nl> + 	 Configuration getConfiguration ( ) { <nl> + 	 	 return configuration ; <nl> + 	 } <nl> + <nl> 	 public Configuration getCheckConfig ( String aCheckName ) { <nl> - 	 	 for ( Configuration currentConfig : config . getChildren ( ) ) { <nl> + 	 	 for ( Configuration currentConfig : getConfiguration ( ) . getChildren ( ) ) { <nl> 	 	 	 if ( " TreeWalker " . equals ( currentConfig . getName ( ) ) ) { <nl> 	 	 	 	 for ( Configuration checkConfig : currentConfig . getChildren ( ) ) { <nl> 	 	 	 	 	 if ( aCheckName . equals ( checkConfig . getName ( ) ) ) {

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 index 0519fb8 . . e9576f5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 @ @ - 52 , 6 + 52 , 22 @ @ public final class JavadocUtils { 
 private static final String UNKNOWN _ JAVADOC _ TOKEN _ ID _ EXCEPTION _ MESSAGE = " Unknown javadoc " 
 + " token id . Given id : " ; 
 
 + / * * Comment pattern . * / 
 + private static final Pattern COMMENT _ PATTERN = Pattern . compile ( 
 + " ^ \ \ s * ( ? : / \ \ * { 2 , } | \ \ * + ) \ \ s * ( . * ) " ) ; 
 + 
 + / * * Block tag pattern for a first line . * / 
 + private static final Pattern BLOCK _ TAG _ PATTERN _ FIRST _ LINE = Pattern . compile ( 
 + " / \ \ * { 2 , } \ \ s * @ ( \ \ p { Alpha } + ) \ \ s " ) ; 
 + 
 + / * * Block tag pattern . * / 
 + private static final Pattern BLOCK _ TAG _ PATTERN = Pattern . compile ( 
 + " ^ \ \ s * \ \ * * \ \ s * @ ( \ \ p { Alpha } + ) \ \ s " ) ; 
 + 
 + / * * Inline tag pattern . * / 
 + private static final Pattern INLINE _ TAG _ PATTERN = Pattern . compile ( 
 + " . * ? \ \ { @ ( \ \ p { Alpha } + ) \ \ s + ( . * ? ) \ \ } " ) ; 
 + 
 / / Using reflection gets all token names and values from JavadocTokenTypes class 
 / / and saves to TOKEN _ NAME _ TO _ VALUE and TOKEN _ VALUE _ TO _ NAME collections . 
 static { 
 @ @ - 107 , 10 + 123 , 9 @ @ public final class JavadocUtils { 
 final String [ ] text = textBlock . getText ( ) ; 
 final List < JavadocTag > tags = Lists . newArrayList ( ) ; 
 final List < InvalidJavadocTag > invalidTags = Lists . newArrayList ( ) ; 
 - Pattern blockTagPattern = Pattern . compile ( " / \ \ * { 2 , } \ \ s * @ ( \ \ p { Alpha } + ) \ \ s " ) ; 
 for ( int i = 0 ; i < text . length ; i + + ) { 
 final String textValue = text [ i ] ; 
 - final Matcher blockTagMatcher = blockTagPattern . matcher ( textValue ) ; 
 + final Matcher blockTagMatcher = getBlockTagPattern ( i ) . matcher ( textValue ) ; 
 if ( ( tagType = = JavadocTagType . ALL | | tagType = = JavadocTagType . BLOCK ) 
 & & blockTagMatcher . find ( ) ) { 
 final String tagName = blockTagMatcher . group ( 1 ) ; 
 @ @ - 135 , 12 + 150 , 27 @ @ public final class JavadocUtils { 
 else if ( tagType = = JavadocTagType . ALL | | tagType = = JavadocTagType . INLINE ) { 
 lookForInlineTags ( textBlock , i , tags , invalidTags ) ; 
 } 
 - blockTagPattern = Pattern . compile ( " ^ \ \ s * \ \ * * \ \ s * @ ( \ \ p { Alpha } + ) \ \ s " ) ; 
 } 
 return new JavadocTags ( tags , invalidTags ) ; 
 } 
 
 / * * 
 + * Get a block tag pattern depending on a line number of a javadoc . 
 + * @ param lineNumber the line number . 
 + * @ return a block tag pattern . 
 + * / 
 + private static Pattern getBlockTagPattern ( int lineNumber ) { 
 + final Pattern blockTagPattern ; 
 + if ( lineNumber = = 0 ) { 
 + blockTagPattern = BLOCK _ TAG _ PATTERN _ FIRST _ LINE ; 
 + } 
 + else { 
 + blockTagPattern = BLOCK _ TAG _ PATTERN ; 
 + } 
 + return blockTagPattern ; 
 + } 
 + 
 + / * * 
 * Looks for inline tags in comment and adds them to the proper tags collection . 
 * @ param comment comment text block 
 * @ param lineNumber line number in the comment 
 @ @ - 151 , 8 + 181 , 7 @ @ public final class JavadocUtils { 
 final List < JavadocTag > validTags , final List < InvalidJavadocTag > invalidTags ) { 
 final String text = comment . getText ( ) [ lineNumber ] ; 
 / / Match Javadoc text after comment characters 
 - final Pattern commentPattern = Pattern . compile ( " ^ \ \ s * ( ? : / \ \ * { 2 , } | \ \ * + ) \ \ s * ( . * ) " ) ; 
 - final Matcher commentMatcher = commentPattern . matcher ( text ) ; 
 + final Matcher commentMatcher = COMMENT _ PATTERN . matcher ( text ) ; 
 final String commentContents ; 
 
 / / offset including comment characters 
 @ @ - 167 , 8 + 196 , 7 @ @ public final class JavadocUtils { 
 commentContents = text ; 
 commentOffset = 0 ; 
 } 
 - final Pattern tagPattern = Pattern . compile ( " . * ? \ \ { @ ( \ \ p { Alpha } + ) \ \ s + ( . * ? ) \ \ } " ) ; 
 - final Matcher tagMatcher = tagPattern . matcher ( commentContents ) ; 
 + final Matcher tagMatcher = INLINE _ TAG _ PATTERN . matcher ( commentContents ) ; 
 while ( tagMatcher . find ( ) ) { 
 final String tagName = tagMatcher . group ( 1 ) ; 
 final String tagValue = tagMatcher . group ( 2 ) . trim ( ) ;

NEAREST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java b / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java 
 index 5f2f9f2 . . b4d93d3 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java 
 @ @ - 15 , 7 + 15 , 7 @ @ public class ConfigValidationTest extends BaseCheckTestSupport { 
 @ Test 
 public void testGoogleChecks ( ) throws Exception { 
 ConfigurationBuilder builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; 
 - final Configuration checkerConfig = builder . config ; 
 + final Configuration checkerConfig = builder . getConfiguration ( ) ; 
 final Checker checker = new Checker ( ) ; 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . configure ( checkerConfig ) ; 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java b / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java 
 index 00aedb7 . . d1c081d 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java 
 @ @ - 25 , 16 + 25 , 16 @ @ public class ConfigurationBuilder extends BaseCheckTestSupport { 
 
 	 private final List < File > files = new ArrayList < > ( ) ; 
 
 - 	 final Configuration config ; 
 + 	 private final Configuration configuration ; 
 
 - 	 URL url ; 
 + 	 private final Pattern warnPattern = Utils . createPattern ( " . * [ ] * / / [ ] * warn [ ] * | / [ * ] warn [ * ] / " ) ; 
 
 - 	 final Pattern warnPattern = Utils . createPattern ( " . * [ ] * / / [ ] * warn [ ] * | / [ * ] warn [ * ] / " ) ; 
 + 	 private URL url ; 
 
 	 public ConfigurationBuilder ( File aROOT ) 
 	 	 	 throws CheckstyleException { 
 	 	 root = aROOT ; 
 - 	 	 config = getConfigurationFromXML ( XML _ NAME , System . getProperties ( ) ) ; 
 + 	 	 configuration = getConfigurationFromXML ( XML _ NAME , System . getProperties ( ) ) ; 
 	 	 listFiles ( files , root , " java " ) ; 
 	 } 
 
 @ @ - 51 , 8 + 51 , 12 @ @ public class ConfigurationBuilder extends BaseCheckTestSupport { 
 	 	 } 
 	 } 
 
 + 	 Configuration getConfiguration ( ) { 
 + 	 	 return configuration ; 
 + 	 } 
 + 
 	 public Configuration getCheckConfig ( String aCheckName ) { 
 - 	 	 for ( Configuration currentConfig : config . getChildren ( ) ) { 
 + 	 	 for ( Configuration currentConfig : getConfiguration ( ) . getChildren ( ) ) { 
 	 	 	 if ( " TreeWalker " . equals ( currentConfig . getName ( ) ) ) { 
 	 	 	 	 for ( Configuration checkConfig : currentConfig . getChildren ( ) ) { 
 	 	 	 	 	 if ( aCheckName . equals ( checkConfig . getName ( ) ) ) {
