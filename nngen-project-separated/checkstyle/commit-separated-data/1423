BLEU SCORE: 0.08295193507109855

TEST MSG: Issue # 2658 : Repair verification of expected warnings in ITs
GENERATED MSG: Issue # 2080 : Simplify JUnit assertion

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> index fa56d01 . . 6a2f42a 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ <nl> package com . google . checkstyle . test . base ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> import java . io . BufferedReader ; <nl> import java . io . ByteArrayInputStream ; <nl> @ @ - 131 , 6 + 131 , 7 @ @ public class BaseCheckTestSupport { <nl> try ( final LineNumberReader lnr = new LineNumberReader ( <nl> new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { <nl> <nl> + int previousLineNumber = 0 ; <nl> for ( int i = 0 ; i < expected . length ; i + + ) { <nl> final String expectedResult = messageFileName + " : " + expected [ i ] ; <nl> final String actual = lnr . readLine ( ) ; <nl> @ @ - 140 , 8 + 141 , 10 @ @ public class BaseCheckTestSupport { <nl> parseInt = parseInt . substring ( parseInt . indexOf ( ' : ' ) + 1 ) ; <nl> parseInt = parseInt . substring ( 0 , parseInt . indexOf ( ' : ' ) ) ; <nl> final int lineNumber = Integer . parseInt ( parseInt ) ; <nl> - assertNotNull ( " expected input file to have warning comment on line number " <nl> - + lineNumber , theWarnings . remove ( ( Integer ) lineNumber ) ) ; <nl> + assertTrue ( " input file is expected to have a warning comment on line number " <nl> + + lineNumber , theWarnings . remove ( ( Integer ) lineNumber ) <nl> + | | previousLineNumber = = lineNumber ) ; <nl> + previousLineNumber = lineNumber ; <nl> } <nl> <nl> assertEquals ( " unexpected output : " + lnr . readLine ( ) ,
NEAREST DIFF (one line): diff - - git a / config / findbugs - exclude . xml b / config / findbugs - exclude . xml <nl> index b0d55bf . . dcb8c08 100644 <nl> - - - a / config / findbugs - exclude . xml <nl> + + + b / config / findbugs - exclude . xml <nl> @ @ - 67 , 6 + 67 , 7 @ @ <nl> < ! - - false positive , beginTree is a kind of constructor for Checks - - > <nl> < Or > <nl> < Class name = " com . puppycrawl . tools . checkstyle . checks . AbstractDeclarationCollector " / > <nl> + < Class name = " com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck " / > <nl> < Class name = " com . puppycrawl . tools . checkstyle . checks . OuterTypeFilenameCheck " / > <nl> < Class name = " com . puppycrawl . tools . checkstyle . checks . regexp . RegexpCheck " / > <nl> < ! - - createJavadocNode is private and can not be launched without visitToken - - > <nl> diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 5e076b6 . . 70c2fff 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 95 , 7 + 95 , 7 @ @ <nl> < suppress checks = " ReturnCount " files = " ( ClassResolver | ConfigurationLoader | IndentationCheckTest ) \ . java " / > <nl> <nl> < ! - - Just big switches . Cannot be split to several methods . Till https : / / github . com / checkstyle / checkstyle / issues / 2029 - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " ( AbstractDeclarationCollector | SuppressWarningsHolder | LeftCurlyCheck | FallThroughCheck | FinalLocalVariableCheck | ModifiedControlVariableCheck ) \ . java " / > <nl> + < suppress checks = " CyclomaticComplexity " files = " ( AbstractDeclarationCollector | RequireThisCheck | SuppressWarningsHolder | LeftCurlyCheck | FallThroughCheck | FinalLocalVariableCheck | ModifiedControlVariableCheck ) \ . java " / > <nl> < suppress checks = " CyclomaticComplexity " files = " ( ParameterAssignmentCheck | VariableDeclarationUsageDistanceCheck | BooleanExpressionComplexityCheck | NPathComplexityCheck | CheckUtils ) \ . java " / > <nl> <nl> < ! - - Suppressions from PMD configuration - - > <nl> diff - - git a / pom . xml b / pom . xml <nl> index c386b22 . . dfc325f 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1731 , 6 + 1731 , 7 @ @ <nl> < exclude > com / puppycrawl / tools / checkstyle / gui / * . class < / exclude > <nl> < ! - - deprecated classes - - > <nl> < exclude > com / puppycrawl / tools / checkstyle / checks / AbstractFormatCheck . class < / exclude > <nl> + < exclude > com / puppycrawl / tools / checkstyle / checks / AbstractDeclarationCollector * . class < / exclude > <nl> < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . class < / exclude > <nl> < / excludes > <nl> < / instrumentation > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index 90b7d44 . . 3364ca7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 19 , 10 + 19 , 18 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> + import java . util . Deque ; <nl> + import java . util . Map ; <nl> + import java . util . Queue ; <nl> + import java . util . Set ; <nl> + <nl> import com . google . common . collect . ImmutableSet ; <nl> + import com . google . common . collect . Lists ; <nl> + import com . google . common . collect . Maps ; <nl> + import com . google . common . collect . Sets ; <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . checks . AbstractDeclarationCollector ; <nl> import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> <nl> / * * <nl> @ @ - 56 , 7 + 64 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> * @ author Stephen Bloch <nl> * @ author o _ sukhodolsky <nl> * / <nl> - public class RequireThisCheck extends AbstractDeclarationCollector { <nl> + public class RequireThisCheck extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 84 , 6 + 92 , 16 @ @ public class RequireThisCheck extends AbstractDeclarationCollector { <nl> TokenTypes . TYPE _ ARGUMENT <nl> ) ; <nl> <nl> + / * * <nl> + * Tree of all the parsed frames . <nl> + * / <nl> + private Map < DetailAST , LexicalFrame > frames ; <nl> + <nl> + / * * <nl> + * Frame for the currently processed AST . <nl> + * / <nl> + private LexicalFrame current ; <nl> + <nl> / * * Whether we should check fields usage . * / <nl> private boolean checkFields = true ; <nl> / * * Whether we should check methods usage . * / <nl> @ @ - 129 , 10 + 147 , 44 @ @ public class RequireThisCheck extends AbstractDeclarationCollector { <nl> } <nl> <nl> @ Override <nl> + public void beginTree ( DetailAST rootAST ) { <nl> + final Deque < LexicalFrame > frameStack = Lists . newLinkedList ( ) ; <nl> + frameStack . add ( new GlobalFrame ( ) ) ; <nl> + <nl> + frames = Maps . newHashMap ( ) ; <nl> + <nl> + DetailAST curNode = rootAST ; <nl> + while ( curNode ! = null ) { <nl> + collectDeclarations ( frameStack , curNode ) ; <nl> + DetailAST toVisit = curNode . getFirstChild ( ) ; <nl> + while ( curNode ! = null & & toVisit = = null ) { <nl> + endCollectingDeclarations ( frameStack , curNode ) ; <nl> + toVisit = curNode . getNextSibling ( ) ; <nl> + if ( toVisit = = null ) { <nl> + curNode = curNode . getParent ( ) ; <nl> + } <nl> + } <nl> + curNode = toVisit ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> - super . visitToken ( ast ) ; <nl> - if ( ast . getType ( ) = = TokenTypes . IDENT ) { <nl> - processIdent ( ast ) ; <nl> + switch ( ast . getType ( ) ) { <nl> + case TokenTypes . IDENT : <nl> + processIdent ( ast ) ; <nl> + break ; <nl> + case TokenTypes . CLASS _ DEF : <nl> + case TokenTypes . INTERFACE _ DEF : <nl> + case TokenTypes . ENUM _ DEF : <nl> + case TokenTypes . ANNOTATION _ DEF : <nl> + case TokenTypes . SLIST : <nl> + case TokenTypes . METHOD _ DEF : <nl> + case TokenTypes . CTOR _ DEF : <nl> + current = frames . get ( ast ) ; <nl> + break ; <nl> + default : <nl> + / / do nothing <nl> } <nl> } <nl> <nl> @ @ - 190 , 6 + 242 , 139 @ @ public class RequireThisCheck extends AbstractDeclarationCollector { <nl> } <nl> <nl> / * * <nl> + * Parse the next AST for declarations . <nl> + * <nl> + * @ param frameStack Stack containing the FrameTree being built <nl> + * @ param ast AST to parse <nl> + * / <nl> + private static void collectDeclarations ( Deque < LexicalFrame > frameStack , <nl> + DetailAST ast ) { <nl> + final LexicalFrame frame = frameStack . peek ( ) ; <nl> + switch ( ast . getType ( ) ) { <nl> + case TokenTypes . VARIABLE _ DEF : <nl> + collectVariableDeclarations ( ast , frame ) ; <nl> + break ; <nl> + case TokenTypes . PARAMETER _ DEF : <nl> + final DetailAST parameterAST = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> + frame . addName ( parameterAST . getText ( ) ) ; <nl> + break ; <nl> + case TokenTypes . CLASS _ DEF : <nl> + case TokenTypes . INTERFACE _ DEF : <nl> + case TokenTypes . ENUM _ DEF : <nl> + case TokenTypes . ANNOTATION _ DEF : <nl> + final DetailAST classAST = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> + frame . addName ( classAST . getText ( ) ) ; <nl> + frameStack . addFirst ( new ClassFrame ( frame ) ) ; <nl> + break ; <nl> + case TokenTypes . SLIST : <nl> + frameStack . addFirst ( new BlockFrame ( frame ) ) ; <nl> + break ; <nl> + case TokenTypes . METHOD _ DEF : <nl> + final String name = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + if ( frame instanceof ClassFrame ) { <nl> + final DetailAST mods = <nl> + ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { <nl> + ( ( ClassFrame ) frame ) . addStaticMethod ( name ) ; <nl> + } <nl> + else { <nl> + ( ( ClassFrame ) frame ) . addInstanceMethod ( name ) ; <nl> + } <nl> + } <nl> + frameStack . addFirst ( new MethodFrame ( frame ) ) ; <nl> + break ; <nl> + case TokenTypes . CTOR _ DEF : <nl> + frameStack . addFirst ( new MethodFrame ( frame ) ) ; <nl> + break ; <nl> + default : <nl> + / / do nothing <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Collect Variable Declarations . <nl> + * @ param ast variable token <nl> + * @ param frame current frame <nl> + * / <nl> + private static void collectVariableDeclarations ( DetailAST ast , LexicalFrame frame ) { <nl> + final String name = <nl> + ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + if ( frame instanceof ClassFrame ) { <nl> + final DetailAST mods = <nl> + ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + if ( ScopeUtils . isInInterfaceBlock ( ast ) <nl> + | | mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { <nl> + ( ( ClassFrame ) frame ) . addStaticMember ( name ) ; <nl> + } <nl> + else { <nl> + ( ( ClassFrame ) frame ) . addInstanceMember ( name ) ; <nl> + } <nl> + } <nl> + else { <nl> + frame . addName ( name ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * End parsing of the AST for declarations . <nl> + * <nl> + * @ param frameStack Stack containing the FrameTree being built <nl> + * @ param ast AST that was parsed <nl> + * / <nl> + private void endCollectingDeclarations ( Queue < LexicalFrame > frameStack , <nl> + DetailAST ast ) { <nl> + switch ( ast . getType ( ) ) { <nl> + case TokenTypes . CLASS _ DEF : <nl> + case TokenTypes . INTERFACE _ DEF : <nl> + case TokenTypes . ENUM _ DEF : <nl> + case TokenTypes . ANNOTATION _ DEF : <nl> + case TokenTypes . SLIST : <nl> + case TokenTypes . METHOD _ DEF : <nl> + case TokenTypes . CTOR _ DEF : <nl> + frames . put ( ast , frameStack . poll ( ) ) ; <nl> + break ; <nl> + default : <nl> + / / do nothing <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Check if given name is a name for class field in current environment . <nl> + * @ param name a name to check <nl> + * @ return true is the given name is name of member . <nl> + * / <nl> + protected final boolean isClassField ( String name ) { <nl> + final LexicalFrame frame = findFrame ( name ) ; <nl> + return frame instanceof ClassFrame <nl> + & & ( ( ClassFrame ) frame ) . hasInstanceMember ( name ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Check if given name is a name for class method in current environment . <nl> + * @ param name a name to check <nl> + * @ return true is the given name is name of method . <nl> + * / <nl> + protected final boolean isClassMethod ( String name ) { <nl> + final LexicalFrame frame = findFrame ( name ) ; <nl> + return frame instanceof ClassFrame <nl> + & & ( ( ClassFrame ) frame ) . hasInstanceMethod ( name ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Find frame containing declaration . <nl> + * @ param name name of the declaration to find <nl> + * @ return LexicalFrame containing declaration or null <nl> + * / <nl> + private LexicalFrame findFrame ( String name ) { <nl> + if ( current = = null ) { <nl> + return null ; <nl> + } <nl> + else { <nl> + return current . getIfContains ( name ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Check that token is related to Definition tokens . <nl> * @ param parentType token Type <nl> * @ return true if token is related to Definition Tokens <nl> @ @ - 197 , 4 + 382 , 193 @ @ public class RequireThisCheck extends AbstractDeclarationCollector { <nl> private static boolean isDeclarationToken ( int parentType ) { <nl> return DECLARATION _ TOKENS . contains ( parentType ) ; <nl> } <nl> + <nl> + / * * <nl> + * A declaration frame . <nl> + * @ author Stephen Bloch <nl> + * / <nl> + private static class LexicalFrame { <nl> + / * * Set of name of variables declared in this frame . * / <nl> + private final Set < String > varNames ; <nl> + / * * <nl> + * Parent frame . <nl> + * / <nl> + private final LexicalFrame parent ; <nl> + <nl> + / * * <nl> + * Constructor - - invokable only via super ( ) from subclasses . <nl> + * <nl> + * @ param parent parent frame <nl> + * / <nl> + protected LexicalFrame ( LexicalFrame parent ) { <nl> + this . parent = parent ; <nl> + varNames = Sets . newHashSet ( ) ; <nl> + } <nl> + <nl> + / * * Add a name to the frame . <nl> + * @ param nameToAdd the name we ' re adding <nl> + * / <nl> + private void addName ( String nameToAdd ) { <nl> + varNames . add ( nameToAdd ) ; <nl> + } <nl> + <nl> + / * * Check whether the frame contains a given name . <nl> + * @ param nameToFind the name we ' re looking for <nl> + * @ return whether it was found <nl> + * / <nl> + boolean contains ( String nameToFind ) { <nl> + return varNames . contains ( nameToFind ) ; <nl> + } <nl> + <nl> + / * * Check whether the frame contains a given name . <nl> + * @ param nameToFind the name we ' re looking for <nl> + * @ return whether it was found <nl> + * / <nl> + private LexicalFrame getIfContains ( String nameToFind ) { <nl> + LexicalFrame frame = null ; <nl> + <nl> + if ( contains ( nameToFind ) ) { <nl> + frame = this ; <nl> + } <nl> + else if ( parent ! = null ) { <nl> + frame = parent . getIfContains ( nameToFind ) ; <nl> + } <nl> + return frame ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * The global frame ; should hold only class names . <nl> + * @ author Stephen Bloch <nl> + * / <nl> + private static class GlobalFrame extends LexicalFrame { <nl> + <nl> + / * * <nl> + * Constructor for the root of the FrameTree . <nl> + * / <nl> + protected GlobalFrame ( ) { <nl> + super ( null ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * A frame initiated at method definition ; holds parameter names . <nl> + * @ author Stephen Bloch <nl> + * / <nl> + private static class MethodFrame extends LexicalFrame { <nl> + / * * <nl> + * Creates method frame . <nl> + * @ param parent parent frame <nl> + * / <nl> + protected MethodFrame ( LexicalFrame parent ) { <nl> + super ( parent ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * A frame initiated at class definition ; holds instance variable <nl> + * names . For the present , I ' m not worried about other class names , <nl> + * method names , etc . <nl> + * @ author Stephen Bloch <nl> + * / <nl> + private static class ClassFrame extends LexicalFrame { <nl> + / * * Set of name of instance members declared in this frame . * / <nl> + private final Set < String > instanceMembers ; <nl> + / * * Set of name of instance methods declared in this frame . * / <nl> + private final Set < String > instanceMethods ; <nl> + / * * Set of name of variables declared in this frame . * / <nl> + private final Set < String > staticMembers ; <nl> + / * * Set of name of static methods declared in this frame . * / <nl> + private final Set < String > staticMethods ; <nl> + <nl> + / * * <nl> + * Creates new instance of ClassFrame . <nl> + * @ param parent parent frame <nl> + * / <nl> + ClassFrame ( LexicalFrame parent ) { <nl> + super ( parent ) ; <nl> + instanceMembers = Sets . newHashSet ( ) ; <nl> + instanceMethods = Sets . newHashSet ( ) ; <nl> + staticMembers = Sets . newHashSet ( ) ; <nl> + staticMethods = Sets . newHashSet ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds static member ' s name . <nl> + * @ param name a name of static member of the class <nl> + * / <nl> + public void addStaticMember ( final String name ) { <nl> + staticMembers . add ( name ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds static method ' s name . <nl> + * @ param name a name of static method of the class <nl> + * / <nl> + public void addStaticMethod ( final String name ) { <nl> + staticMethods . add ( name ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds instance member ' s name . <nl> + * @ param name a name of instance member of the class <nl> + * / <nl> + public void addInstanceMember ( final String name ) { <nl> + instanceMembers . add ( name ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds instance method ' s name . <nl> + * @ param name a name of instance method of the class <nl> + * / <nl> + public void addInstanceMethod ( final String name ) { <nl> + instanceMethods . add ( name ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if a given name is a known instance member of the class . <nl> + * @ param name a name to check <nl> + * @ return true is the given name is a name of a known <nl> + * instance member of the class <nl> + * / <nl> + public boolean hasInstanceMember ( final String name ) { <nl> + return instanceMembers . contains ( name ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if a given name is a known instance method of the class . <nl> + * @ param name a name to check <nl> + * @ return true is the given name is a name of a known <nl> + * instance method of the class <nl> + * / <nl> + public boolean hasInstanceMethod ( final String name ) { <nl> + return instanceMethods . contains ( name ) ; <nl> + } <nl> + <nl> + @ Override <nl> + boolean contains ( String nameToFind ) { <nl> + return super . contains ( nameToFind ) <nl> + | | instanceMembers . contains ( nameToFind ) <nl> + | | instanceMethods . contains ( nameToFind ) <nl> + | | staticMembers . contains ( nameToFind ) <nl> + | | staticMethods . contains ( nameToFind ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * A frame initiated on entering a statement list ; holds local variable <nl> + * names . For the present , I ' m not worried about other class names , <nl> + * method names , etc . <nl> + * @ author Stephen Bloch <nl> + * / <nl> + private static class BlockFrame extends LexicalFrame { <nl> + <nl> + / * * <nl> + * Creates block frame . <nl> + * @ param parent parent frame <nl> + * / <nl> + protected BlockFrame ( LexicalFrame parent ) { <nl> + super ( parent ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index c846bfd . . 9a18157 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 29 , 8 + 29 , 12 @ @ import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> + import antlr . CommonHiddenStreamToken ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> @ @ - 121 , 4 + 125 , 12 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> getPath ( " InputRequireThis3 . java " ) , <nl> expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testDefaultSwitch ( ) { <nl> + final RequireThisCheck check = new RequireThisCheck ( ) ; <nl> + final DetailAST ast = new DetailAST ( ) ; <nl> + ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . ENUM , " ENUM " ) ) ; <nl> + check . visitToken ( ast ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 index fa56d01 . . 6a2f42a 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 @ @ - 20 , 7 + 20 , 7 @ @ 
 package com . google . checkstyle . test . base ; 
 
 import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . assertTrue ; 
 
 import java . io . BufferedReader ; 
 import java . io . ByteArrayInputStream ; 
 @ @ - 131 , 6 + 131 , 7 @ @ public class BaseCheckTestSupport { 
 try ( final LineNumberReader lnr = new LineNumberReader ( 
 new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { 
 
 + int previousLineNumber = 0 ; 
 for ( int i = 0 ; i < expected . length ; i + + ) { 
 final String expectedResult = messageFileName + " : " + expected [ i ] ; 
 final String actual = lnr . readLine ( ) ; 
 @ @ - 140 , 8 + 141 , 10 @ @ public class BaseCheckTestSupport { 
 parseInt = parseInt . substring ( parseInt . indexOf ( ' : ' ) + 1 ) ; 
 parseInt = parseInt . substring ( 0 , parseInt . indexOf ( ' : ' ) ) ; 
 final int lineNumber = Integer . parseInt ( parseInt ) ; 
 - assertNotNull ( " expected input file to have warning comment on line number " 
 - + lineNumber , theWarnings . remove ( ( Integer ) lineNumber ) ) ; 
 + assertTrue ( " input file is expected to have a warning comment on line number " 
 + + lineNumber , theWarnings . remove ( ( Integer ) lineNumber ) 
 + | | previousLineNumber = = lineNumber ) ; 
 + previousLineNumber = lineNumber ; 
 } 
 
 assertEquals ( " unexpected output : " + lnr . readLine ( ) ,

NEAREST DIFF:
diff - - git a / config / findbugs - exclude . xml b / config / findbugs - exclude . xml 
 index b0d55bf . . dcb8c08 100644 
 - - - a / config / findbugs - exclude . xml 
 + + + b / config / findbugs - exclude . xml 
 @ @ - 67 , 6 + 67 , 7 @ @ 
 < ! - - false positive , beginTree is a kind of constructor for Checks - - > 
 < Or > 
 < Class name = " com . puppycrawl . tools . checkstyle . checks . AbstractDeclarationCollector " / > 
 + < Class name = " com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck " / > 
 < Class name = " com . puppycrawl . tools . checkstyle . checks . OuterTypeFilenameCheck " / > 
 < Class name = " com . puppycrawl . tools . checkstyle . checks . regexp . RegexpCheck " / > 
 < ! - - createJavadocNode is private and can not be launched without visitToken - - > 
 diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 5e076b6 . . 70c2fff 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 95 , 7 + 95 , 7 @ @ 
 < suppress checks = " ReturnCount " files = " ( ClassResolver | ConfigurationLoader | IndentationCheckTest ) \ . java " / > 
 
 < ! - - Just big switches . Cannot be split to several methods . Till https : / / github . com / checkstyle / checkstyle / issues / 2029 - - > 
 - < suppress checks = " CyclomaticComplexity " files = " ( AbstractDeclarationCollector | SuppressWarningsHolder | LeftCurlyCheck | FallThroughCheck | FinalLocalVariableCheck | ModifiedControlVariableCheck ) \ . java " / > 
 + < suppress checks = " CyclomaticComplexity " files = " ( AbstractDeclarationCollector | RequireThisCheck | SuppressWarningsHolder | LeftCurlyCheck | FallThroughCheck | FinalLocalVariableCheck | ModifiedControlVariableCheck ) \ . java " / > 
 < suppress checks = " CyclomaticComplexity " files = " ( ParameterAssignmentCheck | VariableDeclarationUsageDistanceCheck | BooleanExpressionComplexityCheck | NPathComplexityCheck | CheckUtils ) \ . java " / > 
 
 < ! - - Suppressions from PMD configuration - - > 
 diff - - git a / pom . xml b / pom . xml 
 index c386b22 . . dfc325f 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1731 , 6 + 1731 , 7 @ @ 
 < exclude > com / puppycrawl / tools / checkstyle / gui / * . class < / exclude > 
 < ! - - deprecated classes - - > 
 < exclude > com / puppycrawl / tools / checkstyle / checks / AbstractFormatCheck . class < / exclude > 
 + < exclude > com / puppycrawl / tools / checkstyle / checks / AbstractDeclarationCollector * . class < / exclude > 
 < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . class < / exclude > 
 < / excludes > 
 < / instrumentation > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index 90b7d44 . . 3364ca7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 19 , 10 + 19 , 18 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 + import java . util . Deque ; 
 + import java . util . Map ; 
 + import java . util . Queue ; 
 + import java . util . Set ; 
 + 
 import com . google . common . collect . ImmutableSet ; 
 + import com . google . common . collect . Lists ; 
 + import com . google . common . collect . Maps ; 
 + import com . google . common . collect . Sets ; 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . checks . AbstractDeclarationCollector ; 
 import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 
 / * * 
 @ @ - 56 , 7 + 64 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 * @ author Stephen Bloch 
 * @ author o _ sukhodolsky 
 * / 
 - public class RequireThisCheck extends AbstractDeclarationCollector { 
 + public class RequireThisCheck extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 84 , 6 + 92 , 16 @ @ public class RequireThisCheck extends AbstractDeclarationCollector { 
 TokenTypes . TYPE _ ARGUMENT 
 ) ; 
 
 + / * * 
 + * Tree of all the parsed frames . 
 + * / 
 + private Map < DetailAST , LexicalFrame > frames ; 
 + 
 + / * * 
 + * Frame for the currently processed AST . 
 + * / 
 + private LexicalFrame current ; 
 + 
 / * * Whether we should check fields usage . * / 
 private boolean checkFields = true ; 
 / * * Whether we should check methods usage . * / 
 @ @ - 129 , 10 + 147 , 44 @ @ public class RequireThisCheck extends AbstractDeclarationCollector { 
 } 
 
 @ Override 
 + public void beginTree ( DetailAST rootAST ) { 
 + final Deque < LexicalFrame > frameStack = Lists . newLinkedList ( ) ; 
 + frameStack . add ( new GlobalFrame ( ) ) ; 
 + 
 + frames = Maps . newHashMap ( ) ; 
 + 
 + DetailAST curNode = rootAST ; 
 + while ( curNode ! = null ) { 
 + collectDeclarations ( frameStack , curNode ) ; 
 + DetailAST toVisit = curNode . getFirstChild ( ) ; 
 + while ( curNode ! = null & & toVisit = = null ) { 
 + endCollectingDeclarations ( frameStack , curNode ) ; 
 + toVisit = curNode . getNextSibling ( ) ; 
 + if ( toVisit = = null ) { 
 + curNode = curNode . getParent ( ) ; 
 + } 
 + } 
 + curNode = toVisit ; 
 + } 
 + } 
 + 
 + @ Override 
 public void visitToken ( DetailAST ast ) { 
 - super . visitToken ( ast ) ; 
 - if ( ast . getType ( ) = = TokenTypes . IDENT ) { 
 - processIdent ( ast ) ; 
 + switch ( ast . getType ( ) ) { 
 + case TokenTypes . IDENT : 
 + processIdent ( ast ) ; 
 + break ; 
 + case TokenTypes . CLASS _ DEF : 
 + case TokenTypes . INTERFACE _ DEF : 
 + case TokenTypes . ENUM _ DEF : 
 + case TokenTypes . ANNOTATION _ DEF : 
 + case TokenTypes . SLIST : 
 + case TokenTypes . METHOD _ DEF : 
 + case TokenTypes . CTOR _ DEF : 
 + current = frames . get ( ast ) ; 
 + break ; 
 + default : 
 + / / do nothing 
 } 
 } 
 
 @ @ - 190 , 6 + 242 , 139 @ @ public class RequireThisCheck extends AbstractDeclarationCollector { 
 } 
 
 / * * 
 + * Parse the next AST for declarations . 
 + * 
 + * @ param frameStack Stack containing the FrameTree being built 
 + * @ param ast AST to parse 
 + * / 
 + private static void collectDeclarations ( Deque < LexicalFrame > frameStack , 
 + DetailAST ast ) { 
 + final LexicalFrame frame = frameStack . peek ( ) ; 
 + switch ( ast . getType ( ) ) { 
 + case TokenTypes . VARIABLE _ DEF : 
 + collectVariableDeclarations ( ast , frame ) ; 
 + break ; 
 + case TokenTypes . PARAMETER _ DEF : 
 + final DetailAST parameterAST = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 + frame . addName ( parameterAST . getText ( ) ) ; 
 + break ; 
 + case TokenTypes . CLASS _ DEF : 
 + case TokenTypes . INTERFACE _ DEF : 
 + case TokenTypes . ENUM _ DEF : 
 + case TokenTypes . ANNOTATION _ DEF : 
 + final DetailAST classAST = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 + frame . addName ( classAST . getText ( ) ) ; 
 + frameStack . addFirst ( new ClassFrame ( frame ) ) ; 
 + break ; 
 + case TokenTypes . SLIST : 
 + frameStack . addFirst ( new BlockFrame ( frame ) ) ; 
 + break ; 
 + case TokenTypes . METHOD _ DEF : 
 + final String name = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + if ( frame instanceof ClassFrame ) { 
 + final DetailAST mods = 
 + ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { 
 + ( ( ClassFrame ) frame ) . addStaticMethod ( name ) ; 
 + } 
 + else { 
 + ( ( ClassFrame ) frame ) . addInstanceMethod ( name ) ; 
 + } 
 + } 
 + frameStack . addFirst ( new MethodFrame ( frame ) ) ; 
 + break ; 
 + case TokenTypes . CTOR _ DEF : 
 + frameStack . addFirst ( new MethodFrame ( frame ) ) ; 
 + break ; 
 + default : 
 + / / do nothing 
 + } 
 + } 
 + 
 + / * * 
 + * Collect Variable Declarations . 
 + * @ param ast variable token 
 + * @ param frame current frame 
 + * / 
 + private static void collectVariableDeclarations ( DetailAST ast , LexicalFrame frame ) { 
 + final String name = 
 + ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + if ( frame instanceof ClassFrame ) { 
 + final DetailAST mods = 
 + ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + if ( ScopeUtils . isInInterfaceBlock ( ast ) 
 + | | mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { 
 + ( ( ClassFrame ) frame ) . addStaticMember ( name ) ; 
 + } 
 + else { 
 + ( ( ClassFrame ) frame ) . addInstanceMember ( name ) ; 
 + } 
 + } 
 + else { 
 + frame . addName ( name ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * End parsing of the AST for declarations . 
 + * 
 + * @ param frameStack Stack containing the FrameTree being built 
 + * @ param ast AST that was parsed 
 + * / 
 + private void endCollectingDeclarations ( Queue < LexicalFrame > frameStack , 
 + DetailAST ast ) { 
 + switch ( ast . getType ( ) ) { 
 + case TokenTypes . CLASS _ DEF : 
 + case TokenTypes . INTERFACE _ DEF : 
 + case TokenTypes . ENUM _ DEF : 
 + case TokenTypes . ANNOTATION _ DEF : 
 + case TokenTypes . SLIST : 
 + case TokenTypes . METHOD _ DEF : 
 + case TokenTypes . CTOR _ DEF : 
 + frames . put ( ast , frameStack . poll ( ) ) ; 
 + break ; 
 + default : 
 + / / do nothing 
 + } 
 + } 
 + 
 + / * * 
 + * Check if given name is a name for class field in current environment . 
 + * @ param name a name to check 
 + * @ return true is the given name is name of member . 
 + * / 
 + protected final boolean isClassField ( String name ) { 
 + final LexicalFrame frame = findFrame ( name ) ; 
 + return frame instanceof ClassFrame 
 + & & ( ( ClassFrame ) frame ) . hasInstanceMember ( name ) ; 
 + } 
 + 
 + / * * 
 + * Check if given name is a name for class method in current environment . 
 + * @ param name a name to check 
 + * @ return true is the given name is name of method . 
 + * / 
 + protected final boolean isClassMethod ( String name ) { 
 + final LexicalFrame frame = findFrame ( name ) ; 
 + return frame instanceof ClassFrame 
 + & & ( ( ClassFrame ) frame ) . hasInstanceMethod ( name ) ; 
 + } 
 + 
 + / * * 
 + * Find frame containing declaration . 
 + * @ param name name of the declaration to find 
 + * @ return LexicalFrame containing declaration or null 
 + * / 
 + private LexicalFrame findFrame ( String name ) { 
 + if ( current = = null ) { 
 + return null ; 
 + } 
 + else { 
 + return current . getIfContains ( name ) ; 
 + } 
 + } 
 + 
 + / * * 
 * Check that token is related to Definition tokens . 
 * @ param parentType token Type 
 * @ return true if token is related to Definition Tokens 
 @ @ - 197 , 4 + 382 , 193 @ @ public class RequireThisCheck extends AbstractDeclarationCollector { 
 private static boolean isDeclarationToken ( int parentType ) { 
 return DECLARATION _ TOKENS . contains ( parentType ) ; 
 } 
 + 
 + / * * 
 + * A declaration frame . 
 + * @ author Stephen Bloch 
 + * / 
 + private static class LexicalFrame { 
 + / * * Set of name of variables declared in this frame . * / 
 + private final Set < String > varNames ; 
 + / * * 
 + * Parent frame . 
 + * / 
 + private final LexicalFrame parent ; 
 + 
 + / * * 
 + * Constructor - - invokable only via super ( ) from subclasses . 
 + * 
 + * @ param parent parent frame 
 + * / 
 + protected LexicalFrame ( LexicalFrame parent ) { 
 + this . parent = parent ; 
 + varNames = Sets . newHashSet ( ) ; 
 + } 
 + 
 + / * * Add a name to the frame . 
 + * @ param nameToAdd the name we ' re adding 
 + * / 
 + private void addName ( String nameToAdd ) { 
 + varNames . add ( nameToAdd ) ; 
 + } 
 + 
 + / * * Check whether the frame contains a given name . 
 + * @ param nameToFind the name we ' re looking for 
 + * @ return whether it was found 
 + * / 
 + boolean contains ( String nameToFind ) { 
 + return varNames . contains ( nameToFind ) ; 
 + } 
 + 
 + / * * Check whether the frame contains a given name . 
 + * @ param nameToFind the name we ' re looking for 
 + * @ return whether it was found 
 + * / 
 + private LexicalFrame getIfContains ( String nameToFind ) { 
 + LexicalFrame frame = null ; 
 + 
 + if ( contains ( nameToFind ) ) { 
 + frame = this ; 
 + } 
 + else if ( parent ! = null ) { 
 + frame = parent . getIfContains ( nameToFind ) ; 
 + } 
 + return frame ; 
 + } 
 + } 
 + 
 + / * * 
 + * The global frame ; should hold only class names . 
 + * @ author Stephen Bloch 
 + * / 
 + private static class GlobalFrame extends LexicalFrame { 
 + 
 + / * * 
 + * Constructor for the root of the FrameTree . 
 + * / 
 + protected GlobalFrame ( ) { 
 + super ( null ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * A frame initiated at method definition ; holds parameter names . 
 + * @ author Stephen Bloch 
 + * / 
 + private static class MethodFrame extends LexicalFrame { 
 + / * * 
 + * Creates method frame . 
 + * @ param parent parent frame 
 + * / 
 + protected MethodFrame ( LexicalFrame parent ) { 
 + super ( parent ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * A frame initiated at class definition ; holds instance variable 
 + * names . For the present , I ' m not worried about other class names , 
 + * method names , etc . 
 + * @ author Stephen Bloch 
 + * / 
 + private static class ClassFrame extends LexicalFrame { 
 + / * * Set of name of instance members declared in this frame . * / 
 + private final Set < String > instanceMembers ; 
 + / * * Set of name of instance methods declared in this frame . * / 
 + private final Set < String > instanceMethods ; 
 + / * * Set of name of variables declared in this frame . * / 
 + private final Set < String > staticMembers ; 
 + / * * Set of name of static methods declared in this frame . * / 
 + private final Set < String > staticMethods ; 
 + 
 + / * * 
 + * Creates new instance of ClassFrame . 
 + * @ param parent parent frame 
 + * / 
 + ClassFrame ( LexicalFrame parent ) { 
 + super ( parent ) ; 
 + instanceMembers = Sets . newHashSet ( ) ; 
 + instanceMethods = Sets . newHashSet ( ) ; 
 + staticMembers = Sets . newHashSet ( ) ; 
 + staticMethods = Sets . newHashSet ( ) ; 
 + } 
 + 
 + / * * 
 + * Adds static member ' s name . 
 + * @ param name a name of static member of the class 
 + * / 
 + public void addStaticMember ( final String name ) { 
 + staticMembers . add ( name ) ; 
 + } 
 + 
 + / * * 
 + * Adds static method ' s name . 
 + * @ param name a name of static method of the class 
 + * / 
 + public void addStaticMethod ( final String name ) { 
 + staticMethods . add ( name ) ; 
 + } 
 + 
 + / * * 
 + * Adds instance member ' s name . 
 + * @ param name a name of instance member of the class 
 + * / 
 + public void addInstanceMember ( final String name ) { 
 + instanceMembers . add ( name ) ; 
 + } 
 + 
 + / * * 
 + * Adds instance method ' s name . 
 + * @ param name a name of instance method of the class 
 + * / 
 + public void addInstanceMethod ( final String name ) { 
 + instanceMethods . add ( name ) ; 
 + } 
 + 
 + / * * 
 + * Checks if a given name is a known instance member of the class . 
 + * @ param name a name to check 
 + * @ return true is the given name is a name of a known 
 + * instance member of the class 
 + * / 
 + public boolean hasInstanceMember ( final String name ) { 
 + return instanceMembers . contains ( name ) ; 
 + } 
 + 
 + / * * 
 + * Checks if a given name is a known instance method of the class . 
 + * @ param name a name to check 
 + * @ return true is the given name is a name of a known 
 + * instance method of the class 
 + * / 
 + public boolean hasInstanceMethod ( final String name ) { 
 + return instanceMethods . contains ( name ) ; 
 + } 
 + 
 + @ Override 
 + boolean contains ( String nameToFind ) { 
 + return super . contains ( nameToFind ) 
 + | | instanceMembers . contains ( nameToFind ) 
 + | | instanceMethods . contains ( nameToFind ) 
 + | | staticMembers . contains ( nameToFind ) 
 + | | staticMethods . contains ( nameToFind ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * A frame initiated on entering a statement list ; holds local variable 
 + * names . For the present , I ' m not worried about other class names , 
 + * method names , etc . 
 + * @ author Stephen Bloch 
 + * / 
 + private static class BlockFrame extends LexicalFrame { 
 + 
 + / * * 
 + * Creates block frame . 
 + * @ param parent parent frame 
 + * / 
 + protected BlockFrame ( LexicalFrame parent ) { 
 + super ( parent ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index c846bfd . . 9a18157 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 29 , 8 + 29 , 12 @ @ import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 + import antlr . CommonHiddenStreamToken ; 
 + 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class RequireThisCheckTest extends BaseCheckTestSupport { 
 @ Override 
 @ @ - 121 , 4 + 125 , 12 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 getPath ( " InputRequireThis3 . java " ) , 
 expected ) ; 
 } 
 + 
 + @ Test 
 + public void testDefaultSwitch ( ) { 
 + final RequireThisCheck check = new RequireThisCheck ( ) ; 
 + final DetailAST ast = new DetailAST ( ) ; 
 + ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . ENUM , " ENUM " ) ) ; 
 + check . visitToken ( ast ) ; 
 + } 
 }
