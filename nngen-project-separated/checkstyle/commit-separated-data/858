BLEU SCORE: 0.09238430210261096

TEST MSG: Issue # 4165 : Split and Organize Checkstyle inputs by Test for HiddenFieldCheckTest
GENERATED MSG: Issue # 3897 : Split input test files for WhitespaceAfterCheckTest

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java <nl> index 334e213 . . a67b986 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java <nl> @ @ - 36 , 7 + 36 , 7 @ @ public class HiddenFieldCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator + " hiddenfield " + File . separator + filename ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenField . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenField . java <nl> deleted file mode 100644 <nl> index 0a64b9d . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenField . java <nl> + + + / dev / null <nl> @ @ - 1 , 294 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2002 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - / * * <nl> - * Test case for hidden fields <nl> - * @ author Rick Giles <nl> - * * / <nl> - class InputHiddenField <nl> - { <nl> - private int hidden = 0 ; <nl> - <nl> - public InputHiddenField ( ) <nl> - { <nl> - int hidden = 0 ; / / shadows field <nl> - } <nl> - <nl> - public InputHiddenField ( int hidden ) / / parameter shadows field <nl> - { <nl> - } <nl> - <nl> - public void shadow ( ) <nl> - { <nl> - int hidden = 0 ; / / shadows field <nl> - } <nl> - <nl> - public void shadowFor ( ) <nl> - { <nl> - for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { / / shadows field <nl> - } <nl> - } <nl> - <nl> - public void shadowParam ( int hidden ) / / parameter shadows field <nl> - { <nl> - } <nl> - <nl> - public class Inner <nl> - { <nl> - private int innerHidden = 0 ; <nl> - <nl> - public Inner ( ) <nl> - { <nl> - int innerHidden = 0 ; / / shadows field <nl> - } <nl> - <nl> - public Inner ( int innerHidden ) / / shadows field <nl> - { <nl> - } <nl> - <nl> - private void innerShadow ( ) <nl> - { <nl> - int innerHidden = 0 ; / / shadows inner field <nl> - int hidden = 0 ; / / shadows outer field <nl> - } <nl> - <nl> - private void innerShadowFor ( ) <nl> - { <nl> - for ( int innerHidden = 0 ; innerHidden < 1 ; innerHidden + + ) { <nl> - } <nl> - / / shadows outer field <nl> - for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { <nl> - } <nl> - } <nl> - <nl> - private void shadowParam ( <nl> - int innerHidden , / / parameter shadows inner field <nl> - int hidden / / parameter shadows outer field <nl> - ) <nl> - { <nl> - } <nl> - <nl> - { <nl> - int innerHidden = 0 ; / / shadows inner field <nl> - int hidden = 0 ; / / shadows outer field <nl> - } <nl> - } <nl> - <nl> - { <nl> - int hidden = 0 ; / / shadows field <nl> - } <nl> - } <nl> - <nl> - interface NothingHidden <nl> - { <nl> - public static int notHidden = 0 ; <nl> - <nl> - / / not an error <nl> - public void noShadow ( int notHidden ) ; <nl> - } <nl> - <nl> - / * * tests ignoring the parameter of a property setter method * / <nl> - class PropertySetter <nl> - { <nl> - private int prop ; <nl> - <nl> - / * * setter * / <nl> - public void setProp ( int prop ) <nl> - { <nl> - this . prop = prop ; <nl> - } <nl> - <nl> - / * * error - incorrect method name * / <nl> - public void setprop ( int prop ) <nl> - { <nl> - this . prop = prop ; <nl> - } <nl> - <nl> - / * * error - more than one parameter * / <nl> - public void setProp ( int prop , int extra ) <nl> - { <nl> - this . prop = prop ; <nl> - } <nl> - } <nl> - <nl> - / * * tests a non - void method * / <nl> - class PropertySetter2 <nl> - { <nl> - private int prop ; <nl> - <nl> - / * * error - not a void method * / <nl> - public int setProp ( int prop ) <nl> - { <nl> - this . prop = prop ; <nl> - return 0 ; <nl> - } <nl> - } <nl> - <nl> - / * * tests for static fields * / <nl> - class StaticFields <nl> - { <nl> - private static int hidden ; <nl> - <nl> - public static void staticMethod ( ) <nl> - { <nl> - int hidden ; <nl> - } <nl> - <nl> - public void method ( ) <nl> - { <nl> - int hidden ; <nl> - } <nl> - <nl> - static <nl> - { <nl> - int hidden ; <nl> - } <nl> - <nl> - { <nl> - int hidden ; <nl> - } <nl> - } <nl> - <nl> - / * * tests static methods & initializers * / <nl> - class StaticMethods <nl> - { <nl> - private int notHidden ; <nl> - <nl> - public static void method ( ) <nl> - { <nl> - / / local variables of static methods don ' t hide instance fields . <nl> - int notHidden ; <nl> - } <nl> - <nl> - static <nl> - { <nl> - / / local variables of static initializers don ' t hide instance fields . <nl> - int notHidden ; <nl> - } <nl> - <nl> - private int x ; <nl> - private static int y ; <nl> - static class Inner { <nl> - void useX ( int x ) { <nl> - x + + ; <nl> - } <nl> - void useY ( int y ) { <nl> - y + + ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - enum HiddenEnum <nl> - { <nl> - A ( 129 ) , <nl> - B ( 283 ) , <nl> - C ( 1212 ) <nl> - { <nl> - / * * <nl> - * Should not be flagged as error as we don ' t check <nl> - * hidden class level fields <nl> - * / <nl> - int hidden ; <nl> - <nl> - public void doSomething ( ) <nl> - { <nl> - / / Should be flagged as hiding enum constant member <nl> - int hidden = 0 ; <nl> - } <nl> - } ; <nl> - <nl> - int hidden ; <nl> - static int hiddenStatic ; <nl> - <nl> - / * * <nl> - * ctor parameter hides member <nl> - * / <nl> - HiddenEnum ( int hidden ) <nl> - { <nl> - } <nl> - <nl> - public void doSomething ( ) <nl> - { <nl> - / / Should be flagged as hiding static member <nl> - int hidden = 0 ; <nl> - } <nl> - <nl> - public static void doSomethingStatic ( ) <nl> - { <nl> - / / Should be flagged as hiding static member <nl> - int hiddenStatic = 0 ; <nl> - } <nl> - } <nl> - <nl> - / / we should ignore this if user wants ( ignoreAbstractMethods is true ) <nl> - abstract class InputHiddenFieldBug1084512 { <nl> - String x ; <nl> - public abstract void methodA ( String x ) ; <nl> - } <nl> - <nl> - class Bug3370946 { <nl> - private int xAxis ; <nl> - <nl> - public void setxAxis ( int xAxis ) { <nl> - this . xAxis = xAxis ; <nl> - } <nl> - } <nl> - <nl> - / * * tests chain - setter * / <nl> - class PropertySetter3 <nl> - { <nl> - private int prop ; <nl> - <nl> - / * * <nl> - * if setterCanReturnItsClass = = false then <nl> - * error - not a void method <nl> - * <nl> - * if setterCanReturnItsClass = = true then <nl> - * success as it is then considered to be a setter <nl> - * / <nl> - public PropertySetter3 setProp ( int prop ) <nl> - { <nl> - this . prop = prop ; <nl> - return this ; <nl> - } <nl> - } <nl> - <nl> - / * * tests setters ( both regular and the chain one ) on the enum * / <nl> - enum PropertySetter4 { <nl> - INSTANCE ; <nl> - <nl> - private int prop ; <nl> - private int prop2 ; <nl> - <nl> - public void setProp ( int prop ) { <nl> - this . prop = prop ; <nl> - } <nl> - <nl> - / * * <nl> - * if setterCanReturnItsClass = = false then <nl> - * error - not a void method <nl> - * <nl> - * if setterCanReturnItsClass = = true then <nl> - * success as it is then considered to be a setter <nl> - * / <nl> - public PropertySetter4 setProp2 ( int prop2 ) <nl> - { <nl> - this . prop2 = prop2 ; <nl> - return this ; <nl> - } <nl> - } <nl> - <nl> - / * * Tests setter for one letter field ( issue # 730 ) . * / <nl> - class OneLetterField <nl> - { <nl> - int i ; <nl> - <nl> - void setI ( int i ) <nl> - { <nl> - this . i = i ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldLambdas . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldLambdas . java <nl> deleted file mode 100644 <nl> index 3f9b549 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldLambdas . java <nl> + + + / dev / null <nl> @ @ - 1 , 230 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - import java . lang . Integer ; <nl> - import java . util . Arrays ; <nl> - import java . util . HashMap ; <nl> - import java . util . List ; <nl> - import java . util . Map ; <nl> - import java . util . Optional ; <nl> - <nl> - <nl> - public class InputHiddenFieldLambdas { <nl> - / * * <nl> - * Example 1 : lambda parameter ' value ' on line 16 <nl> - * hides a field ' value ' on line 14 . <nl> - * / <nl> - List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; <nl> - Integer value = new Integer ( 1 ) ; <nl> - { <nl> - numbers . forEach ( ( Integer value ) - > String . valueOf ( value ) ) ; / / 1 violation <nl> - } <nl> - <nl> - / * * <nl> - * Example 2 : lambda parameter ' name ' on line 27 <nl> - * does not hide a field ' name ' on line 25 , because <nl> - * field ' name ' can not be referenced from a static context . <nl> - * / <nl> - static List < String > firstNames = Arrays . asList ( " Andrei " , " Michal " , " Roman " , " Vladislav " ) ; <nl> - String name = new String ( ) ; <nl> - static { <nl> - firstNames . forEach ( ( String name ) - > String . valueOf ( name ) ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Example 3 : lambda parameter ' brand ' on line 38 ( which type is omitted ) <nl> - * does not hide a field ' brand ' on line 36 , because <nl> - * field ' brand ' can not be referenced from a static context . <nl> - * / <nl> - static List < String > carBrands = Arrays . asList ( " BMW " , " Mazda " , " Volkswagen " ) ; <nl> - String brand = new String ( ) ; <nl> - static { <nl> - carBrands . forEach ( brand - > String . valueOf ( brand ) ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Example 4 : lambda parameter ' languageCode ' on line 48 <nl> - * hides a field ' languageCode ' on line 46 . <nl> - * / <nl> - static List < String > languageCodes = Arrays . asList ( " de " , " ja " , " fr " , " pt " ) ; <nl> - static String languageCode = new String ( ) ; <nl> - { <nl> - languageCodes . forEach ( languageCode - > String . valueOf ( languageCode ) ) ; / / 1 violation <nl> - } <nl> - <nl> - / * * <nl> - * Example 5 : lambda parameter ' number ' on line 57 <nl> - * hides a field ' number ' on line 55 . <nl> - * / <nl> - int number = 1 ; <nl> - Optional < Object > foo1 ( int i ) { <nl> - return Optional . of ( 5 ) . map ( number - > { / / violation <nl> - if ( number = = 1 ) return true ; <nl> - else if ( number = = 2 ) return true ; <nl> - else return false ; <nl> - } ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Example 6 : lambda parameter ' id ' on line 70 <nl> - * hides a field ' id ' on line 68 . <nl> - * / <nl> - static long id = 1 ; <nl> - Optional < Object > foo2 ( int i ) { <nl> - return Optional . of ( 5 ) . map ( id - > { / / violation <nl> - if ( id = = 1 ) return true ; <nl> - else if ( id = = 2 ) return true ; <nl> - else return false ; <nl> - } ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Example 7 : lambda parameter ' age ' on line 84 <nl> - * does not hide a field ' age ' on line 82 , <nl> - * because field ' age ' can not be referenced from a static context . <nl> - * / <nl> - int age = 21 ; <nl> - static Optional < Object > foo3 ( int i ) { <nl> - return Optional . of ( 5 ) . map ( age - > { <nl> - if ( age = = 1 ) return true ; <nl> - else if ( age = = 2 ) return true ; <nl> - else return false ; <nl> - } ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Example 8 : lambda parameter ' note ' on line 98 <nl> - * hides a field ' note ' on line 95 . <nl> - * / <nl> - static String note = new String ( ) ; <nl> - private void foo4 ( ) { <nl> - List < String > acceptableNotes = Arrays . asList ( " C " , " D " , " E " , " F " , " G " , " A " , " B " ) ; <nl> - acceptableNotes . forEach ( note - > String . valueOf ( note ) ) ; / / 1 violation <nl> - } <nl> - <nl> - / * * <nl> - * Example 9 : lambda parameter ' letter ' on line 109 <nl> - * does not hide a field ' letter ' on line 106 , because <nl> - * field ' letter ' can not be referenced from a static context . <nl> - * / <nl> - String letter = new String ( " a " ) ; <nl> - private static void foo5 ( ) { <nl> - List < String > acceptableAlphabet = Arrays . asList ( " a " , " b " , " c " ) ; <nl> - acceptableAlphabet . forEach ( letter - > String . valueOf ( letter ) ) ; <nl> - } <nl> - <nl> - @ FunctionalInterface <nl> - interface Function < A , B > { <nl> - public B apply ( A a , B b ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Example 10 : typed parameters - two hide fields <nl> - * / <nl> - String stringValue = " 248 . 3 " ; <nl> - int intValue = 2 ; <nl> - { <nl> - Function < String , Integer > multiAdder = ( String stringValue , Integer intValue ) - > { / / 2 violations <nl> - return Integer . parseInt ( stringValue ) + intValue ; <nl> - } ; <nl> - String . valueOf ( multiAdder . apply ( " 22 . 4 " , 2 ) ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Example 11 : typed parameters - one hide field <nl> - * / <nl> - Double doubleValue = 8 . 5 ; <nl> - { <nl> - Function < Integer , Double > adder = ( Integer integerValue , Double doubleValue ) - > { / / 1 violation <nl> - return integerValue + doubleValue ; <nl> - } ; <nl> - String . valueOf ( adder . apply ( 2 , 2 . 2 ) ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Example 11 : untyped parameters - two hide fields <nl> - * / <nl> - String firstString = " Hello , " ; <nl> - String secondString = " World ! " ; <nl> - { <nl> - Function < String , String > stringConcat = ( firstString , secondString ) - > { / / 2 violations <nl> - return firstString + secondString ; <nl> - } ; <nl> - String . valueOf ( stringConcat . apply ( " A " , " B " ) ) ; <nl> - } <nl> - <nl> - @ FunctionalInterface <nl> - interface SomeFunction < One , Two > { <nl> - public Two apply ( One one , Two two ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Example 11 : untyped parameters - one hide field <nl> - * / <nl> - Integer first = 1 ; <nl> - { <nl> - Function < Integer , Character > turnToZ = ( first , second ) - > ' z ' ; / / 1 violation <nl> - } <nl> - <nl> - @ FunctionalInterface <nl> - public interface Foo { <nl> - public String apply ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Example 12 : case when no parameters are given <nl> - * / <nl> - { <nl> - Foo foo = ( ) - > " " ; <nl> - } <nl> - @ FunctionalInterface <nl> - interface FunctionWithOneParameter < One > { <nl> - public One apply ( One one ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Example 13 : internal lambda hides a field <nl> - * / <nl> - Double mPi = Math . PI ; <nl> - List < Double > simpleNumbers = Arrays . asList ( 1 . 0 , 2 . 0 , 3 . 0 , 4 . 0 , 5 . 0 , 6 . 0 ) ; <nl> - { <nl> - simpleNumbers . forEach ( digit - > { <nl> - FunctionWithOneParameter < Double > strangeAdder = ( mPi - > mPi + = digit ) ; / / 1 violation <nl> - } ) ; <nl> - } <nl> - <nl> - @ FunctionalInterface <nl> - interface FunctionWithComplexGenerics < One , Two > { <nl> - public Two foo ( One one , Two two ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Example 14 : lambda typed with complex generics <nl> - * / <nl> - List < Double > justSomeList ; <nl> - Map < String , Object > justSomeMap ; <nl> - { <nl> - FunctionWithComplexGenerics < List < Double > , Map < String , Object > > someWierdFunc = <nl> - ( List < Double > justSomeList , Map < String , Object > justSomeMap ) - > { / / 2 violations <nl> - String . valueOf ( justSomeList ) ; <nl> - String . valueOf ( justSomeMap ) ; <nl> - return new HashMap < > ( ) ; <nl> - } ; <nl> - } <nl> - <nl> - / * * <nl> - * Example 15 : lambda stored in field ( with typed parameter ) <nl> - * hides other field <nl> - * / <nl> - Object someObject = new Object ( ) ; <nl> - FunctionWithOneParameter objectToString = ( Object someObject ) - > { / / 1 violation <nl> - return someObject . toString ( ) ; <nl> - } ; <nl> - <nl> - / * * <nl> - * Example 16 : lambda stored in field ( with untyped parameter ) <nl> - * hides other field <nl> - * / <nl> - FunctionWithOneParameter otherObjectToString = someObject - > { / / 1 violation <nl> - return someObject . toString ( ) ; <nl> - } ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReceiver . java <nl> deleted file mode 100644 <nl> index ee288b8 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReceiver . java <nl> + + + / dev / null <nl> @ @ - 1 , 9 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - public class InputHiddenFieldReceiver { <nl> - public void foo4 ( InputHiddenFieldReceiver this ) { } <nl> - <nl> - private class Inner { <nl> - public Inner ( InputHiddenFieldReceiver InputHiddenFieldReceiver . this ) { } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReorder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReorder . java <nl> deleted file mode 100644 <nl> index d37ec50 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReorder . java <nl> + + + / dev / null <nl> @ @ - 1 , 136 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2002 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - / * * <nl> - * Test case for hidden fields <nl> - * @ author Rick Giles <nl> - * * / <nl> - class InputHiddenFieldReorder <nl> - { <nl> - <nl> - <nl> - public InputHiddenFieldReorder ( ) <nl> - { <nl> - int hidden = 0 ; / / shadows field <nl> - } <nl> - <nl> - public InputHiddenFieldReorder ( int hidden ) / / parameter shadows field <nl> - { <nl> - } <nl> - <nl> - public void shadow ( ) <nl> - { <nl> - int hidden = 0 ; / / shadows field <nl> - } <nl> - <nl> - public void shadowFor ( ) <nl> - { <nl> - for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { / / shadows field <nl> - } <nl> - } <nl> - <nl> - public void shadowParam ( int hidden ) / / parameter shadows field <nl> - { <nl> - } <nl> - <nl> - public class Inner <nl> - { <nl> - / / private int innerHidden = 0 ; <nl> - <nl> - public Inner ( ) <nl> - { <nl> - int innerHidden = 0 ; / / shadows field <nl> - } <nl> - <nl> - public Inner ( int innerHidden ) / / shadows field <nl> - { <nl> - } <nl> - <nl> - private void innerShadow ( ) <nl> - { <nl> - int innerHidden = 0 ; / / shadows inner field <nl> - int hidden = 0 ; / / shadows outer field <nl> - } <nl> - <nl> - private void innerShadowFor ( ) <nl> - { <nl> - for ( int innerHidden = 0 ; innerHidden < 1 ; innerHidden + + ) { <nl> - } <nl> - / / shadows outer field <nl> - for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { <nl> - } <nl> - } <nl> - <nl> - private void shadowParam ( <nl> - int innerHidden , / / parameter shadows inner field <nl> - int hidden / / parameter shadows outer field <nl> - ) <nl> - { <nl> - } <nl> - <nl> - { <nl> - int innerHidden = 0 ; / / shadows inner field <nl> - int hidden = 0 ; / / shadows outer field <nl> - } <nl> - private int innerHidden = 0 ; <nl> - } <nl> - <nl> - { <nl> - int hidden = 0 ; / / shadows field <nl> - } <nl> - private int hidden = 0 ; <nl> - } <nl> - <nl> - interface NothingHiddenReorder <nl> - { <nl> - public static int notHidden = 0 ; <nl> - <nl> - / / not an error <nl> - public void noShadow ( int notHidden ) ; <nl> - } <nl> - <nl> - enum HiddenEnum1 <nl> - { <nl> - A ( 129 ) , <nl> - B ( 283 ) , <nl> - C ( 1212 ) <nl> - { <nl> - public void doSomething ( ) <nl> - { <nl> - / / Should be flagged as hiding enum constant member <nl> - int hidden = 0 ; <nl> - } <nl> - <nl> - / * * <nl> - * Should not be flagged as error as we don ' t check <nl> - * hidden class level fields <nl> - * / <nl> - int hidden ; <nl> - } ; <nl> - <nl> - / * * <nl> - * ctor parameter hides member <nl> - * / <nl> - HiddenEnum1 ( int hidden ) <nl> - { <nl> - } <nl> - <nl> - public void doSomething ( ) <nl> - { <nl> - / / Should be flagged as hiding static member <nl> - int hidden = 0 ; <nl> - } <nl> - <nl> - public static void doSomethingStatic ( ) <nl> - { <nl> - / / Should be flagged as hiding static member <nl> - int hiddenStatic = 0 ; <nl> - } <nl> - <nl> - int hidden ; <nl> - static int hiddenStatic ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldStaticVisibility . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldStaticVisibility . java <nl> deleted file mode 100644 <nl> index f1a0613 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldStaticVisibility . java <nl> + + + / dev / null <nl> @ @ - 1 , 47 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - import java . util . Comparator ; <nl> - <nl> - public class InputHiddenFieldStaticVisibility { <nl> - static int someField ; <nl> - static InputHiddenFieldStaticVisibility other = null ; <nl> - InputHiddenFieldStaticVisibility field = null ; <nl> - <nl> - static void method ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { <nl> - / / field ' field ' can not be referenced form a static context <nl> - / / static field ' other ' can be referenced from a static context <nl> - } <nl> - <nl> - static class B { <nl> - void method ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { <nl> - / / field ' field ' can not be referenced form a static context <nl> - / / static field ' other ' can be referenced from a static context <nl> - } <nl> - } <nl> - <nl> - static Comparator < InputHiddenFieldStaticVisibility > COMP = new Comparator < InputHiddenFieldStaticVisibility > ( ) { <nl> - @ Override <nl> - public int compare ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { <nl> - / / field ' field ' can not be referenced form a static context <nl> - / / static field ' other ' can be referenced from a static context <nl> - return 0 ; <nl> - } <nl> - } ; <nl> - <nl> - static Comparator < InputHiddenFieldStaticVisibility > createComp ( ) { <nl> - return new Comparator < InputHiddenFieldStaticVisibility > ( ) { <nl> - @ Override <nl> - public int compare ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { <nl> - / / field ' field ' can not be referenced form a static context <nl> - / / static field ' other ' can be referenced from a static context <nl> - return 0 ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - static void foo1 ( int a ) { } <nl> - <nl> - void foo2 ( int a ) { } <nl> - <nl> - static void foo3 ( int someField ) { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java <nl> new file mode 100644 <nl> index 0000000 . . 5add195 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java <nl> @ @ - 0 , 0 + 1 , 294 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . hiddenfield ; <nl> + <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2002 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + / * * <nl> + * Test case for hidden fields <nl> + * @ author Rick Giles <nl> + * * / <nl> + class InputHiddenField <nl> + { <nl> + private int hidden = 0 ; <nl> + <nl> + public InputHiddenField ( ) <nl> + { <nl> + int hidden = 0 ; / / shadows field <nl> + } <nl> + <nl> + public InputHiddenField ( int hidden ) / / parameter shadows field <nl> + { <nl> + } <nl> + <nl> + public void shadow ( ) <nl> + { <nl> + int hidden = 0 ; / / shadows field <nl> + } <nl> + <nl> + public void shadowFor ( ) <nl> + { <nl> + for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { / / shadows field <nl> + } <nl> + } <nl> + <nl> + public void shadowParam ( int hidden ) / / parameter shadows field <nl> + { <nl> + } <nl> + <nl> + public class Inner <nl> + { <nl> + private int innerHidden = 0 ; <nl> + <nl> + public Inner ( ) <nl> + { <nl> + int innerHidden = 0 ; / / shadows field <nl> + } <nl> + <nl> + public Inner ( int innerHidden ) / / shadows field <nl> + { <nl> + } <nl> + <nl> + private void innerShadow ( ) <nl> + { <nl> + int innerHidden = 0 ; / / shadows inner field <nl> + int hidden = 0 ; / / shadows outer field <nl> + } <nl> + <nl> + private void innerShadowFor ( ) <nl> + { <nl> + for ( int innerHidden = 0 ; innerHidden < 1 ; innerHidden + + ) { <nl> + } <nl> + / / shadows outer field <nl> + for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { <nl> + } <nl> + } <nl> + <nl> + private void shadowParam ( <nl> + int innerHidden , / / parameter shadows inner field <nl> + int hidden / / parameter shadows outer field <nl> + ) <nl> + { <nl> + } <nl> + <nl> + { <nl> + int innerHidden = 0 ; / / shadows inner field <nl> + int hidden = 0 ; / / shadows outer field <nl> + } <nl> + } <nl> + <nl> + { <nl> + int hidden = 0 ; / / shadows field <nl> + } <nl> + } <nl> + <nl> + interface NothingHidden <nl> + { <nl> + public static int notHidden = 0 ; <nl> + <nl> + / / not an error <nl> + public void noShadow ( int notHidden ) ; <nl> + } <nl> + <nl> + / * * tests ignoring the parameter of a property setter method * / <nl> + class PropertySetter <nl> + { <nl> + private int prop ; <nl> + <nl> + / * * setter * / <nl> + public void setProp ( int prop ) <nl> + { <nl> + this . prop = prop ; <nl> + } <nl> + <nl> + / * * error - incorrect method name * / <nl> + public void setprop ( int prop ) <nl> + { <nl> + this . prop = prop ; <nl> + } <nl> + <nl> + / * * error - more than one parameter * / <nl> + public void setProp ( int prop , int extra ) <nl> + { <nl> + this . prop = prop ; <nl> + } <nl> + } <nl> + <nl> + / * * tests a non - void method * / <nl> + class PropertySetter2 <nl> + { <nl> + private int prop ; <nl> + <nl> + / * * error - not a void method * / <nl> + public int setProp ( int prop ) <nl> + { <nl> + this . prop = prop ; <nl> + return 0 ; <nl> + } <nl> + } <nl> + <nl> + / * * tests for static fields * / <nl> + class StaticFields <nl> + { <nl> + private static int hidden ; <nl> + <nl> + public static void staticMethod ( ) <nl> + { <nl> + int hidden ; <nl> + } <nl> + <nl> + public void method ( ) <nl> + { <nl> + int hidden ; <nl> + } <nl> + <nl> + static <nl> + { <nl> + int hidden ; <nl> + } <nl> + <nl> + { <nl> + int hidden ; <nl> + } <nl> + } <nl> + <nl> + / * * tests static methods & initializers * / <nl> + class StaticMethods <nl> + { <nl> + private int notHidden ; <nl> + <nl> + public static void method ( ) <nl> + { <nl> + / / local variables of static methods don ' t hide instance fields . <nl> + int notHidden ; <nl> + } <nl> + <nl> + static <nl> + { <nl> + / / local variables of static initializers don ' t hide instance fields . <nl> + int notHidden ; <nl> + } <nl> + <nl> + private int x ; <nl> + private static int y ; <nl> + static class Inner { <nl> + void useX ( int x ) { <nl> + x + + ; <nl> + } <nl> + void useY ( int y ) { <nl> + y + + ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + enum HiddenEnum <nl> + { <nl> + A ( 129 ) , <nl> + B ( 283 ) , <nl> + C ( 1212 ) <nl> + { <nl> + / * * <nl> + * Should not be flagged as error as we don ' t check <nl> + * hidden class level fields <nl> + * / <nl> + int hidden ; <nl> + <nl> + public void doSomething ( ) <nl> + { <nl> + / / Should be flagged as hiding enum constant member <nl> + int hidden = 0 ; <nl> + } <nl> + } ; <nl> + <nl> + int hidden ; <nl> + static int hiddenStatic ; <nl> + <nl> + / * * <nl> + * ctor parameter hides member <nl> + * / <nl> + HiddenEnum ( int hidden ) <nl> + { <nl> + } <nl> + <nl> + public void doSomething ( ) <nl> + { <nl> + / / Should be flagged as hiding static member <nl> + int hidden = 0 ; <nl> + } <nl> + <nl> + public static void doSomethingStatic ( ) <nl> + { <nl> + / / Should be flagged as hiding static member <nl> + int hiddenStatic = 0 ; <nl> + } <nl> + } <nl> + <nl> + / / we should ignore this if user wants ( ignoreAbstractMethods is true ) <nl> + abstract class InputHiddenFieldBug1084512 { <nl> + String x ; <nl> + public abstract void methodA ( String x ) ; <nl> + } <nl> + <nl> + class Bug3370946 { <nl> + private int xAxis ; <nl> + <nl> + public void setxAxis ( int xAxis ) { <nl> + this . xAxis = xAxis ; <nl> + } <nl> + } <nl> + <nl> + / * * tests chain - setter * / <nl> + class PropertySetter3 <nl> + { <nl> + private int prop ; <nl> + <nl> + / * * <nl> + * if setterCanReturnItsClass = = false then <nl> + * error - not a void method <nl> + * <nl> + * if setterCanReturnItsClass = = true then <nl> + * success as it is then considered to be a setter <nl> + * / <nl> + public PropertySetter3 setProp ( int prop ) <nl> + { <nl> + this . prop = prop ; <nl> + return this ; <nl> + } <nl> + } <nl> + <nl> + / * * tests setters ( both regular and the chain one ) on the enum * / <nl> + enum PropertySetter4 { <nl> + INSTANCE ; <nl> + <nl> + private int prop ; <nl> + private int prop2 ; <nl> + <nl> + public void setProp ( int prop ) { <nl> + this . prop = prop ; <nl> + } <nl> + <nl> + / * * <nl> + * if setterCanReturnItsClass = = false then <nl> + * error - not a void method <nl> + * <nl> + * if setterCanReturnItsClass = = true then <nl> + * success as it is then considered to be a setter <nl> + * / <nl> + public PropertySetter4 setProp2 ( int prop2 ) <nl> + { <nl> + this . prop2 = prop2 ; <nl> + return this ; <nl> + } <nl> + } <nl> + <nl> + / * * Tests setter for one letter field ( issue # 730 ) . * / <nl> + class OneLetterField <nl> + { <nl> + int i ; <nl> + <nl> + void setI ( int i ) <nl> + { <nl> + this . i = i ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java <nl> new file mode 100644 <nl> index 0000000 . . 8148d41 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java <nl> @ @ - 0 , 0 + 1 , 230 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . hiddenfield ; <nl> + <nl> + import java . lang . Integer ; <nl> + import java . util . Arrays ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Optional ; <nl> + <nl> + <nl> + public class InputHiddenFieldLambdas { <nl> + / * * <nl> + * Example 1 : lambda parameter ' value ' on line 16 <nl> + * hides a field ' value ' on line 14 . <nl> + * / <nl> + List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; <nl> + Integer value = new Integer ( 1 ) ; <nl> + { <nl> + numbers . forEach ( ( Integer value ) - > String . valueOf ( value ) ) ; / / 1 violation <nl> + } <nl> + <nl> + / * * <nl> + * Example 2 : lambda parameter ' name ' on line 27 <nl> + * does not hide a field ' name ' on line 25 , because <nl> + * field ' name ' can not be referenced from a static context . <nl> + * / <nl> + static List < String > firstNames = Arrays . asList ( " Andrei " , " Michal " , " Roman " , " Vladislav " ) ; <nl> + String name = new String ( ) ; <nl> + static { <nl> + firstNames . forEach ( ( String name ) - > String . valueOf ( name ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example 3 : lambda parameter ' brand ' on line 38 ( which type is omitted ) <nl> + * does not hide a field ' brand ' on line 36 , because <nl> + * field ' brand ' can not be referenced from a static context . <nl> + * / <nl> + static List < String > carBrands = Arrays . asList ( " BMW " , " Mazda " , " Volkswagen " ) ; <nl> + String brand = new String ( ) ; <nl> + static { <nl> + carBrands . forEach ( brand - > String . valueOf ( brand ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example 4 : lambda parameter ' languageCode ' on line 48 <nl> + * hides a field ' languageCode ' on line 46 . <nl> + * / <nl> + static List < String > languageCodes = Arrays . asList ( " de " , " ja " , " fr " , " pt " ) ; <nl> + static String languageCode = new String ( ) ; <nl> + { <nl> + languageCodes . forEach ( languageCode - > String . valueOf ( languageCode ) ) ; / / 1 violation <nl> + } <nl> + <nl> + / * * <nl> + * Example 5 : lambda parameter ' number ' on line 57 <nl> + * hides a field ' number ' on line 55 . <nl> + * / <nl> + int number = 1 ; <nl> + Optional < Object > foo1 ( int i ) { <nl> + return Optional . of ( 5 ) . map ( number - > { / / violation <nl> + if ( number = = 1 ) return true ; <nl> + else if ( number = = 2 ) return true ; <nl> + else return false ; <nl> + } ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example 6 : lambda parameter ' id ' on line 70 <nl> + * hides a field ' id ' on line 68 . <nl> + * / <nl> + static long id = 1 ; <nl> + Optional < Object > foo2 ( int i ) { <nl> + return Optional . of ( 5 ) . map ( id - > { / / violation <nl> + if ( id = = 1 ) return true ; <nl> + else if ( id = = 2 ) return true ; <nl> + else return false ; <nl> + } ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example 7 : lambda parameter ' age ' on line 84 <nl> + * does not hide a field ' age ' on line 82 , <nl> + * because field ' age ' can not be referenced from a static context . <nl> + * / <nl> + int age = 21 ; <nl> + static Optional < Object > foo3 ( int i ) { <nl> + return Optional . of ( 5 ) . map ( age - > { <nl> + if ( age = = 1 ) return true ; <nl> + else if ( age = = 2 ) return true ; <nl> + else return false ; <nl> + } ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example 8 : lambda parameter ' note ' on line 98 <nl> + * hides a field ' note ' on line 95 . <nl> + * / <nl> + static String note = new String ( ) ; <nl> + private void foo4 ( ) { <nl> + List < String > acceptableNotes = Arrays . asList ( " C " , " D " , " E " , " F " , " G " , " A " , " B " ) ; <nl> + acceptableNotes . forEach ( note - > String . valueOf ( note ) ) ; / / 1 violation <nl> + } <nl> + <nl> + / * * <nl> + * Example 9 : lambda parameter ' letter ' on line 109 <nl> + * does not hide a field ' letter ' on line 106 , because <nl> + * field ' letter ' can not be referenced from a static context . <nl> + * / <nl> + String letter = new String ( " a " ) ; <nl> + private static void foo5 ( ) { <nl> + List < String > acceptableAlphabet = Arrays . asList ( " a " , " b " , " c " ) ; <nl> + acceptableAlphabet . forEach ( letter - > String . valueOf ( letter ) ) ; <nl> + } <nl> + <nl> + @ FunctionalInterface <nl> + interface Function < A , B > { <nl> + public B apply ( A a , B b ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example 10 : typed parameters - two hide fields <nl> + * / <nl> + String stringValue = " 248 . 3 " ; <nl> + int intValue = 2 ; <nl> + { <nl> + Function < String , Integer > multiAdder = ( String stringValue , Integer intValue ) - > { / / 2 violations <nl> + return Integer . parseInt ( stringValue ) + intValue ; <nl> + } ; <nl> + String . valueOf ( multiAdder . apply ( " 22 . 4 " , 2 ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example 11 : typed parameters - one hide field <nl> + * / <nl> + Double doubleValue = 8 . 5 ; <nl> + { <nl> + Function < Integer , Double > adder = ( Integer integerValue , Double doubleValue ) - > { / / 1 violation <nl> + return integerValue + doubleValue ; <nl> + } ; <nl> + String . valueOf ( adder . apply ( 2 , 2 . 2 ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example 11 : untyped parameters - two hide fields <nl> + * / <nl> + String firstString = " Hello , " ; <nl> + String secondString = " World ! " ; <nl> + { <nl> + Function < String , String > stringConcat = ( firstString , secondString ) - > { / / 2 violations <nl> + return firstString + secondString ; <nl> + } ; <nl> + String . valueOf ( stringConcat . apply ( " A " , " B " ) ) ; <nl> + } <nl> + <nl> + @ FunctionalInterface <nl> + interface SomeFunction < One , Two > { <nl> + public Two apply ( One one , Two two ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example 11 : untyped parameters - one hide field <nl> + * / <nl> + Integer first = 1 ; <nl> + { <nl> + Function < Integer , Character > turnToZ = ( first , second ) - > ' z ' ; / / 1 violation <nl> + } <nl> + <nl> + @ FunctionalInterface <nl> + public interface Foo { <nl> + public String apply ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example 12 : case when no parameters are given <nl> + * / <nl> + { <nl> + Foo foo = ( ) - > " " ; <nl> + } <nl> + @ FunctionalInterface <nl> + interface FunctionWithOneParameter < One > { <nl> + public One apply ( One one ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example 13 : internal lambda hides a field <nl> + * / <nl> + Double mPi = Math . PI ; <nl> + List < Double > simpleNumbers = Arrays . asList ( 1 . 0 , 2 . 0 , 3 . 0 , 4 . 0 , 5 . 0 , 6 . 0 ) ; <nl> + { <nl> + simpleNumbers . forEach ( digit - > { <nl> + FunctionWithOneParameter < Double > strangeAdder = ( mPi - > mPi + = digit ) ; / / 1 violation <nl> + } ) ; <nl> + } <nl> + <nl> + @ FunctionalInterface <nl> + interface FunctionWithComplexGenerics < One , Two > { <nl> + public Two foo ( One one , Two two ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example 14 : lambda typed with complex generics <nl> + * / <nl> + List < Double > justSomeList ; <nl> + Map < String , Object > justSomeMap ; <nl> + { <nl> + FunctionWithComplexGenerics < List < Double > , Map < String , Object > > someWierdFunc = <nl> + ( List < Double > justSomeList , Map < String , Object > justSomeMap ) - > { / / 2 violations <nl> + String . valueOf ( justSomeList ) ; <nl> + String . valueOf ( justSomeMap ) ; <nl> + return new HashMap < > ( ) ; <nl> + } ; <nl> + } <nl> + <nl> + / * * <nl> + * Example 15 : lambda stored in field ( with typed parameter ) <nl> + * hides other field <nl> + * / <nl> + Object someObject = new Object ( ) ; <nl> + FunctionWithOneParameter objectToString = ( Object someObject ) - > { / / 1 violation <nl> + return someObject . toString ( ) ; <nl> + } ; <nl> + <nl> + / * * <nl> + * Example 16 : lambda stored in field ( with untyped parameter ) <nl> + * hides other field <nl> + * / <nl> + FunctionWithOneParameter otherObjectToString = someObject - > { / / 1 violation <nl> + return someObject . toString ( ) ; <nl> + } ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldReceiver . java <nl> new file mode 100644 <nl> index 0000000 . . 2794f13 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldReceiver . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . hiddenfield ; <nl> + <nl> + public class InputHiddenFieldReceiver { <nl> + public void foo4 ( InputHiddenFieldReceiver this ) { } <nl> + <nl> + private class Inner { <nl> + public Inner ( InputHiddenFieldReceiver InputHiddenFieldReceiver . this ) { } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldReorder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldReorder . java <nl> new file mode 100644 <nl> index 0000000 . . 9d00542 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldReorder . java <nl> @ @ - 0 , 0 + 1 , 136 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . hiddenfield ; <nl> + <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2002 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + / * * <nl> + * Test case for hidden fields <nl> + * @ author Rick Giles <nl> + * * / <nl> + class InputHiddenFieldReorder <nl> + { <nl> + <nl> + <nl> + public InputHiddenFieldReorder ( ) <nl> + { <nl> + int hidden = 0 ; / / shadows field <nl> + } <nl> + <nl> + public InputHiddenFieldReorder ( int hidden ) / / parameter shadows field <nl> + { <nl> + } <nl> + <nl> + public void shadow ( ) <nl> + { <nl> + int hidden = 0 ; / / shadows field <nl> + } <nl> + <nl> + public void shadowFor ( ) <nl> + { <nl> + for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { / / shadows field <nl> + } <nl> + } <nl> + <nl> + public void shadowParam ( int hidden ) / / parameter shadows field <nl> + { <nl> + } <nl> + <nl> + public class Inner <nl> + { <nl> + / / private int innerHidden = 0 ; <nl> + <nl> + public Inner ( ) <nl> + { <nl> + int innerHidden = 0 ; / / shadows field <nl> + } <nl> + <nl> + public Inner ( int innerHidden ) / / shadows field <nl> + { <nl> + } <nl> + <nl> + private void innerShadow ( ) <nl> + { <nl> + int innerHidden = 0 ; / / shadows inner field <nl> + int hidden = 0 ; / / shadows outer field <nl> + } <nl> + <nl> + private void innerShadowFor ( ) <nl> + { <nl> + for ( int innerHidden = 0 ; innerHidden < 1 ; innerHidden + + ) { <nl> + } <nl> + / / shadows outer field <nl> + for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { <nl> + } <nl> + } <nl> + <nl> + private void shadowParam ( <nl> + int innerHidden , / / parameter shadows inner field <nl> + int hidden / / parameter shadows outer field <nl> + ) <nl> + { <nl> + } <nl> + <nl> + { <nl> + int innerHidden = 0 ; / / shadows inner field <nl> + int hidden = 0 ; / / shadows outer field <nl> + } <nl> + private int innerHidden = 0 ; <nl> + } <nl> + <nl> + { <nl> + int hidden = 0 ; / / shadows field <nl> + } <nl> + private int hidden = 0 ; <nl> + } <nl> + <nl> + interface NothingHiddenReorder <nl> + { <nl> + public static int notHidden = 0 ; <nl> + <nl> + / / not an error <nl> + public void noShadow ( int notHidden ) ; <nl> + } <nl> + <nl> + enum HiddenEnum1 <nl> + { <nl> + A ( 129 ) , <nl> + B ( 283 ) , <nl> + C ( 1212 ) <nl> + { <nl> + public void doSomething ( ) <nl> + { <nl> + / / Should be flagged as hiding enum constant member <nl> + int hidden = 0 ; <nl> + } <nl> + <nl> + / * * <nl> + * Should not be flagged as error as we don ' t check <nl> + * hidden class level fields <nl> + * / <nl> + int hidden ; <nl> + } ; <nl> + <nl> + / * * <nl> + * ctor parameter hides member <nl> + * / <nl> + HiddenEnum1 ( int hidden ) <nl> + { <nl> + } <nl> + <nl> + public void doSomething ( ) <nl> + { <nl> + / / Should be flagged as hiding static member <nl> + int hidden = 0 ; <nl> + } <nl> + <nl> + public static void doSomethingStatic ( ) <nl> + { <nl> + / / Should be flagged as hiding static member <nl> + int hiddenStatic = 0 ; <nl> + } <nl> + <nl> + int hidden ; <nl> + static int hiddenStatic ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldStaticVisibility . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldStaticVisibility . java <nl> new file mode 100644 <nl> index 0000000 . . 2a4cb08 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldStaticVisibility . java <nl> @ @ - 0 , 0 + 1 , 47 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . hiddenfield ; <nl> + <nl> + import java . util . Comparator ; <nl> + <nl> + public class InputHiddenFieldStaticVisibility { <nl> + static int someField ; <nl> + static InputHiddenFieldStaticVisibility other = null ; <nl> + InputHiddenFieldStaticVisibility field = null ; <nl> + <nl> + static void method ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { <nl> + / / field ' field ' can not be referenced form a static context <nl> + / / static field ' other ' can be referenced from a static context <nl> + } <nl> + <nl> + static class B { <nl> + void method ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { <nl> + / / field ' field ' can not be referenced form a static context <nl> + / / static field ' other ' can be referenced from a static context <nl> + } <nl> + } <nl> + <nl> + static Comparator < InputHiddenFieldStaticVisibility > COMP = new Comparator < InputHiddenFieldStaticVisibility > ( ) { <nl> + @ Override <nl> + public int compare ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { <nl> + / / field ' field ' can not be referenced form a static context <nl> + / / static field ' other ' can be referenced from a static context <nl> + return 0 ; <nl> + } <nl> + } ; <nl> + <nl> + static Comparator < InputHiddenFieldStaticVisibility > createComp ( ) { <nl> + return new Comparator < InputHiddenFieldStaticVisibility > ( ) { <nl> + @ Override <nl> + public int compare ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { <nl> + / / field ' field ' can not be referenced form a static context <nl> + / / static field ' other ' can be referenced from a static context <nl> + return 0 ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + static void foo1 ( int a ) { } <nl> + <nl> + void foo2 ( int a ) { } <nl> + <nl> + static void foo3 ( int someField ) { } <nl> + }
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index 421f430 . . 43c7eb4 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 168 , 6 + 168 , 10 @ @ <nl> < property name = " maxLineLength " value = " 100 " / > <nl> < / module > <nl> < module name = " NeedBraces " / > <nl> + < module name = " NeedBraces " > <nl> + < property name = " tokens " value = " LAMBDA " / > <nl> + < property name = " allowSingleLineStatement " value = " true " / > <nl> + < / module > <nl> < module name = " RightCurly " > <nl> < property name = " tokens " value = " METHOD _ DEF " / > <nl> < property name = " tokens " value = " CTOR _ DEF " / > <nl> diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index ce9951e . . a75d450 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 344 , 7 + 344 , 7 @ @ <nl> < inspection _ tool class = " CloneableImplementsClone " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> < option name = " m _ ignoreCloneableDueToInheritance " value = " false " / > <nl> < / inspection _ tool > <nl> - < inspection _ tool class = " CodeBlock2Expr " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < inspection _ tool class = " CodeBlock2Expr " enabled = " false " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CoffeeScriptArgumentsOutsideFunction " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CoffeeScriptFunctionSignatures " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CoffeeScriptInfiniteLoop " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> index 8ed29f0 . . 7191d06 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> @ @ - 158 , 9 + 158 , 9 @ @ public class EqualsHashCodeCheck <nl> @ Override <nl> public void finishTree ( DetailAST rootAST ) { <nl> objBlockWithEquals <nl> - . entrySet ( ) . stream ( ) . filter ( detailASTDetailASTEntry - > <nl> - objBlockWithHashCode . remove ( detailASTDetailASTEntry . getKey ( ) ) = = null ) <nl> - . forEach ( detailASTDetailASTEntry - > { <nl> + . entrySet ( ) . stream ( ) . filter ( detailASTDetailASTEntry - > { <nl> + return objBlockWithHashCode . remove ( detailASTDetailASTEntry . getKey ( ) ) = = null ; <nl> + } ) . forEach ( detailASTDetailASTEntry - > { <nl> final DetailAST equalsAST = detailASTDetailASTEntry . getValue ( ) ; <nl> log ( equalsAST . getLineNo ( ) , equalsAST . getColumnNo ( ) , MSG _ KEY _ HASHCODE ) ; <nl> } ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> index fb4d9ef . . 66b7b6c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> @ @ - 377 , 9 + 377 , 9 @ @ public final class ModifiedControlVariableCheck extends AbstractCheck { <nl> final DetailAST forUpdateListAST = forIteratorAST . findFirstToken ( TokenTypes . ELIST ) ; <nl> <nl> findChildrenOfExpressionType ( forUpdateListAST ) . stream ( ) <nl> - . filter ( iteratingExpressionAST - > <nl> - MUTATION _ OPERATIONS . contains ( iteratingExpressionAST . getType ( ) ) ) <nl> - . forEach ( iteratingExpressionAST - > { <nl> + . filter ( iteratingExpressionAST - > { <nl> + return MUTATION _ OPERATIONS . contains ( iteratingExpressionAST . getType ( ) ) ; <nl> + } ) . forEach ( iteratingExpressionAST - > { <nl> final DetailAST oneVariableOperatorChild = iteratingExpressionAST . getFirstChild ( ) ; <nl> if ( oneVariableOperatorChild . getType ( ) = = TokenTypes . IDENT ) { <nl> iteratorVariables . add ( oneVariableOperatorChild . getText ( ) ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> index fdb7b34 . . b74a614 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> @ @ - 184 , 11 + 184 , 12 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> final DetailAST methodImplOpenBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> if ( methodImplOpenBrace ! = null ) { <nl> final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; <nl> - final Predicate < DetailAST > predicate = currentNode - > <nl> - currentNode ! = null <nl> + final Predicate < DetailAST > predicate = currentNode - > { <nl> + return currentNode ! = null <nl> & & currentNode ! = methodImplCloseBrace <nl> & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) <nl> & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; <nl> + } ; <nl> final Optional < DetailAST > methodBody = <nl> TokenUtils . findFirstTokenByPredicate ( methodImplOpenBrace , predicate ) ; <nl> if ( methodBody . isPresent ( ) ) { <nl> @ @ - 237 , 9 + 238 , 11 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> boolean containsAnnotation = false ; <nl> if ( modifiers . branchContains ( TokenTypes . ANNOTATION ) ) { <nl> final Optional < DetailAST > annotation = TokenUtils . findFirstTokenByPredicate ( modifiers , <nl> - currentToken - > currentToken ! = null <nl> - & & currentToken . getType ( ) = = TokenTypes . ANNOTATION <nl> - & & annotationName . equals ( getAnnotationName ( currentToken ) ) ) ; <nl> + currentToken - > { <nl> + return currentToken ! = null <nl> + & & currentToken . getType ( ) = = TokenTypes . ANNOTATION <nl> + & & annotationName . equals ( getAnnotationName ( currentToken ) ) ; <nl> + } ) ; <nl> if ( annotation . isPresent ( ) ) { <nl> containsAnnotation = true ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> index 3b0f535 . . 932bf4d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> @ @ - 724 , 8 + 724 , 10 @ @ public class VisibilityModifierCheck <nl> * / <nl> private boolean areImmutableTypeArguments ( List < String > typeArgsClassNames ) { <nl> return ! typeArgsClassNames . stream ( ) . filter ( <nl> - typeName - > ! immutableClassShortNames . contains ( typeName ) <nl> - & & ! immutableClassCanonicalNames . contains ( typeName ) ) . findFirst ( ) . isPresent ( ) ; <nl> + typeName - > { <nl> + return ! immutableClassShortNames . contains ( typeName ) <nl> + & & ! immutableClassCanonicalNames . contains ( typeName ) ; <nl> + } ) . findFirst ( ) . isPresent ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java <nl> index 68581de . . 2b6f27b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java <nl> @ @ - 43 , 8 + 43 , 9 @ @ class ListToTreeSelectionModelWrapper extends DefaultTreeSelectionModel { <nl> * / <nl> ListToTreeSelectionModelWrapper ( JTreeTable jTreeTable ) { <nl> treeTable = jTreeTable ; <nl> - getListSelectionModel ( ) . addListSelectionListener ( event - > <nl> - updateSelectedPathsFromSelectedRows ( ) ) ; <nl> + getListSelectionModel ( ) . addListSelectionListener ( event - > { <nl> + updateSelectedPathsFromSelectedRows ( ) ; <nl> + } ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> index ad1134a . . b3d3a48 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> @ @ - 122 , 9 + 122 , 11 @ @ public class DetailASTTest { <nl> } <nl> <nl> private static void checkDir ( File dir ) throws Exception { <nl> - final File [ ] files = dir . listFiles ( file - > ( file . getName ( ) . endsWith ( " . java " ) <nl> + final File [ ] files = dir . listFiles ( file - > { <nl> + return ( file . getName ( ) . endsWith ( " . java " ) <nl> | | file . isDirectory ( ) ) <nl> - & & ! file . getName ( ) . endsWith ( " InputGrammar . java " ) ) ; <nl> + & & ! file . getName ( ) . endsWith ( " InputGrammar . java " ) ; <nl> + } ) ; <nl> for ( File file : files ) { <nl> if ( file . isFile ( ) ) { <nl> checkFile ( file . getCanonicalPath ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> index 842b20c . . adb04f4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> @ @ - 183 , 7 + 183 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NeedBraces " , Stream . of ( <nl> / / we prefer no braces here as it looks unusual even though they help avoid sharing <nl> / / scope of variables <nl> - " LITERAL _ DEFAULT " , " LITERAL _ CASE " , " LAMBDA " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + " LITERAL _ DEFAULT " , " LITERAL _ CASE " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " FinalParameters " , Stream . of ( <nl> / / we prefer these to be effectively final as to not damage readability <nl> " FOR _ EACH _ CLAUSE " , " LITERAL _ CATCH " ) . collect ( Collectors . toSet ( ) ) ) ;

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java 
 index 334e213 . . a67b986 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java 
 @ @ - 36 , 7 + 36 , 7 @ @ public class HiddenFieldCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator + " hiddenfield " + File . separator + filename ) ; 
 } 
 
 @ Override 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenField . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenField . java 
 deleted file mode 100644 
 index 0a64b9d . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenField . java 
 + + + / dev / null 
 @ @ - 1 , 294 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2002 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - / * * 
 - * Test case for hidden fields 
 - * @ author Rick Giles 
 - * * / 
 - class InputHiddenField 
 - { 
 - private int hidden = 0 ; 
 - 
 - public InputHiddenField ( ) 
 - { 
 - int hidden = 0 ; / / shadows field 
 - } 
 - 
 - public InputHiddenField ( int hidden ) / / parameter shadows field 
 - { 
 - } 
 - 
 - public void shadow ( ) 
 - { 
 - int hidden = 0 ; / / shadows field 
 - } 
 - 
 - public void shadowFor ( ) 
 - { 
 - for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { / / shadows field 
 - } 
 - } 
 - 
 - public void shadowParam ( int hidden ) / / parameter shadows field 
 - { 
 - } 
 - 
 - public class Inner 
 - { 
 - private int innerHidden = 0 ; 
 - 
 - public Inner ( ) 
 - { 
 - int innerHidden = 0 ; / / shadows field 
 - } 
 - 
 - public Inner ( int innerHidden ) / / shadows field 
 - { 
 - } 
 - 
 - private void innerShadow ( ) 
 - { 
 - int innerHidden = 0 ; / / shadows inner field 
 - int hidden = 0 ; / / shadows outer field 
 - } 
 - 
 - private void innerShadowFor ( ) 
 - { 
 - for ( int innerHidden = 0 ; innerHidden < 1 ; innerHidden + + ) { 
 - } 
 - / / shadows outer field 
 - for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { 
 - } 
 - } 
 - 
 - private void shadowParam ( 
 - int innerHidden , / / parameter shadows inner field 
 - int hidden / / parameter shadows outer field 
 - ) 
 - { 
 - } 
 - 
 - { 
 - int innerHidden = 0 ; / / shadows inner field 
 - int hidden = 0 ; / / shadows outer field 
 - } 
 - } 
 - 
 - { 
 - int hidden = 0 ; / / shadows field 
 - } 
 - } 
 - 
 - interface NothingHidden 
 - { 
 - public static int notHidden = 0 ; 
 - 
 - / / not an error 
 - public void noShadow ( int notHidden ) ; 
 - } 
 - 
 - / * * tests ignoring the parameter of a property setter method * / 
 - class PropertySetter 
 - { 
 - private int prop ; 
 - 
 - / * * setter * / 
 - public void setProp ( int prop ) 
 - { 
 - this . prop = prop ; 
 - } 
 - 
 - / * * error - incorrect method name * / 
 - public void setprop ( int prop ) 
 - { 
 - this . prop = prop ; 
 - } 
 - 
 - / * * error - more than one parameter * / 
 - public void setProp ( int prop , int extra ) 
 - { 
 - this . prop = prop ; 
 - } 
 - } 
 - 
 - / * * tests a non - void method * / 
 - class PropertySetter2 
 - { 
 - private int prop ; 
 - 
 - / * * error - not a void method * / 
 - public int setProp ( int prop ) 
 - { 
 - this . prop = prop ; 
 - return 0 ; 
 - } 
 - } 
 - 
 - / * * tests for static fields * / 
 - class StaticFields 
 - { 
 - private static int hidden ; 
 - 
 - public static void staticMethod ( ) 
 - { 
 - int hidden ; 
 - } 
 - 
 - public void method ( ) 
 - { 
 - int hidden ; 
 - } 
 - 
 - static 
 - { 
 - int hidden ; 
 - } 
 - 
 - { 
 - int hidden ; 
 - } 
 - } 
 - 
 - / * * tests static methods & initializers * / 
 - class StaticMethods 
 - { 
 - private int notHidden ; 
 - 
 - public static void method ( ) 
 - { 
 - / / local variables of static methods don ' t hide instance fields . 
 - int notHidden ; 
 - } 
 - 
 - static 
 - { 
 - / / local variables of static initializers don ' t hide instance fields . 
 - int notHidden ; 
 - } 
 - 
 - private int x ; 
 - private static int y ; 
 - static class Inner { 
 - void useX ( int x ) { 
 - x + + ; 
 - } 
 - void useY ( int y ) { 
 - y + + ; 
 - } 
 - } 
 - } 
 - 
 - enum HiddenEnum 
 - { 
 - A ( 129 ) , 
 - B ( 283 ) , 
 - C ( 1212 ) 
 - { 
 - / * * 
 - * Should not be flagged as error as we don ' t check 
 - * hidden class level fields 
 - * / 
 - int hidden ; 
 - 
 - public void doSomething ( ) 
 - { 
 - / / Should be flagged as hiding enum constant member 
 - int hidden = 0 ; 
 - } 
 - } ; 
 - 
 - int hidden ; 
 - static int hiddenStatic ; 
 - 
 - / * * 
 - * ctor parameter hides member 
 - * / 
 - HiddenEnum ( int hidden ) 
 - { 
 - } 
 - 
 - public void doSomething ( ) 
 - { 
 - / / Should be flagged as hiding static member 
 - int hidden = 0 ; 
 - } 
 - 
 - public static void doSomethingStatic ( ) 
 - { 
 - / / Should be flagged as hiding static member 
 - int hiddenStatic = 0 ; 
 - } 
 - } 
 - 
 - / / we should ignore this if user wants ( ignoreAbstractMethods is true ) 
 - abstract class InputHiddenFieldBug1084512 { 
 - String x ; 
 - public abstract void methodA ( String x ) ; 
 - } 
 - 
 - class Bug3370946 { 
 - private int xAxis ; 
 - 
 - public void setxAxis ( int xAxis ) { 
 - this . xAxis = xAxis ; 
 - } 
 - } 
 - 
 - / * * tests chain - setter * / 
 - class PropertySetter3 
 - { 
 - private int prop ; 
 - 
 - / * * 
 - * if setterCanReturnItsClass = = false then 
 - * error - not a void method 
 - * 
 - * if setterCanReturnItsClass = = true then 
 - * success as it is then considered to be a setter 
 - * / 
 - public PropertySetter3 setProp ( int prop ) 
 - { 
 - this . prop = prop ; 
 - return this ; 
 - } 
 - } 
 - 
 - / * * tests setters ( both regular and the chain one ) on the enum * / 
 - enum PropertySetter4 { 
 - INSTANCE ; 
 - 
 - private int prop ; 
 - private int prop2 ; 
 - 
 - public void setProp ( int prop ) { 
 - this . prop = prop ; 
 - } 
 - 
 - / * * 
 - * if setterCanReturnItsClass = = false then 
 - * error - not a void method 
 - * 
 - * if setterCanReturnItsClass = = true then 
 - * success as it is then considered to be a setter 
 - * / 
 - public PropertySetter4 setProp2 ( int prop2 ) 
 - { 
 - this . prop2 = prop2 ; 
 - return this ; 
 - } 
 - } 
 - 
 - / * * Tests setter for one letter field ( issue # 730 ) . * / 
 - class OneLetterField 
 - { 
 - int i ; 
 - 
 - void setI ( int i ) 
 - { 
 - this . i = i ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldLambdas . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldLambdas . java 
 deleted file mode 100644 
 index 3f9b549 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldLambdas . java 
 + + + / dev / null 
 @ @ - 1 , 230 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - import java . lang . Integer ; 
 - import java . util . Arrays ; 
 - import java . util . HashMap ; 
 - import java . util . List ; 
 - import java . util . Map ; 
 - import java . util . Optional ; 
 - 
 - 
 - public class InputHiddenFieldLambdas { 
 - / * * 
 - * Example 1 : lambda parameter ' value ' on line 16 
 - * hides a field ' value ' on line 14 . 
 - * / 
 - List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; 
 - Integer value = new Integer ( 1 ) ; 
 - { 
 - numbers . forEach ( ( Integer value ) - > String . valueOf ( value ) ) ; / / 1 violation 
 - } 
 - 
 - / * * 
 - * Example 2 : lambda parameter ' name ' on line 27 
 - * does not hide a field ' name ' on line 25 , because 
 - * field ' name ' can not be referenced from a static context . 
 - * / 
 - static List < String > firstNames = Arrays . asList ( " Andrei " , " Michal " , " Roman " , " Vladislav " ) ; 
 - String name = new String ( ) ; 
 - static { 
 - firstNames . forEach ( ( String name ) - > String . valueOf ( name ) ) ; 
 - } 
 - 
 - / * * 
 - * Example 3 : lambda parameter ' brand ' on line 38 ( which type is omitted ) 
 - * does not hide a field ' brand ' on line 36 , because 
 - * field ' brand ' can not be referenced from a static context . 
 - * / 
 - static List < String > carBrands = Arrays . asList ( " BMW " , " Mazda " , " Volkswagen " ) ; 
 - String brand = new String ( ) ; 
 - static { 
 - carBrands . forEach ( brand - > String . valueOf ( brand ) ) ; 
 - } 
 - 
 - / * * 
 - * Example 4 : lambda parameter ' languageCode ' on line 48 
 - * hides a field ' languageCode ' on line 46 . 
 - * / 
 - static List < String > languageCodes = Arrays . asList ( " de " , " ja " , " fr " , " pt " ) ; 
 - static String languageCode = new String ( ) ; 
 - { 
 - languageCodes . forEach ( languageCode - > String . valueOf ( languageCode ) ) ; / / 1 violation 
 - } 
 - 
 - / * * 
 - * Example 5 : lambda parameter ' number ' on line 57 
 - * hides a field ' number ' on line 55 . 
 - * / 
 - int number = 1 ; 
 - Optional < Object > foo1 ( int i ) { 
 - return Optional . of ( 5 ) . map ( number - > { / / violation 
 - if ( number = = 1 ) return true ; 
 - else if ( number = = 2 ) return true ; 
 - else return false ; 
 - } ) ; 
 - } 
 - 
 - / * * 
 - * Example 6 : lambda parameter ' id ' on line 70 
 - * hides a field ' id ' on line 68 . 
 - * / 
 - static long id = 1 ; 
 - Optional < Object > foo2 ( int i ) { 
 - return Optional . of ( 5 ) . map ( id - > { / / violation 
 - if ( id = = 1 ) return true ; 
 - else if ( id = = 2 ) return true ; 
 - else return false ; 
 - } ) ; 
 - } 
 - 
 - / * * 
 - * Example 7 : lambda parameter ' age ' on line 84 
 - * does not hide a field ' age ' on line 82 , 
 - * because field ' age ' can not be referenced from a static context . 
 - * / 
 - int age = 21 ; 
 - static Optional < Object > foo3 ( int i ) { 
 - return Optional . of ( 5 ) . map ( age - > { 
 - if ( age = = 1 ) return true ; 
 - else if ( age = = 2 ) return true ; 
 - else return false ; 
 - } ) ; 
 - } 
 - 
 - / * * 
 - * Example 8 : lambda parameter ' note ' on line 98 
 - * hides a field ' note ' on line 95 . 
 - * / 
 - static String note = new String ( ) ; 
 - private void foo4 ( ) { 
 - List < String > acceptableNotes = Arrays . asList ( " C " , " D " , " E " , " F " , " G " , " A " , " B " ) ; 
 - acceptableNotes . forEach ( note - > String . valueOf ( note ) ) ; / / 1 violation 
 - } 
 - 
 - / * * 
 - * Example 9 : lambda parameter ' letter ' on line 109 
 - * does not hide a field ' letter ' on line 106 , because 
 - * field ' letter ' can not be referenced from a static context . 
 - * / 
 - String letter = new String ( " a " ) ; 
 - private static void foo5 ( ) { 
 - List < String > acceptableAlphabet = Arrays . asList ( " a " , " b " , " c " ) ; 
 - acceptableAlphabet . forEach ( letter - > String . valueOf ( letter ) ) ; 
 - } 
 - 
 - @ FunctionalInterface 
 - interface Function < A , B > { 
 - public B apply ( A a , B b ) ; 
 - } 
 - 
 - / * * 
 - * Example 10 : typed parameters - two hide fields 
 - * / 
 - String stringValue = " 248 . 3 " ; 
 - int intValue = 2 ; 
 - { 
 - Function < String , Integer > multiAdder = ( String stringValue , Integer intValue ) - > { / / 2 violations 
 - return Integer . parseInt ( stringValue ) + intValue ; 
 - } ; 
 - String . valueOf ( multiAdder . apply ( " 22 . 4 " , 2 ) ) ; 
 - } 
 - 
 - / * * 
 - * Example 11 : typed parameters - one hide field 
 - * / 
 - Double doubleValue = 8 . 5 ; 
 - { 
 - Function < Integer , Double > adder = ( Integer integerValue , Double doubleValue ) - > { / / 1 violation 
 - return integerValue + doubleValue ; 
 - } ; 
 - String . valueOf ( adder . apply ( 2 , 2 . 2 ) ) ; 
 - } 
 - 
 - / * * 
 - * Example 11 : untyped parameters - two hide fields 
 - * / 
 - String firstString = " Hello , " ; 
 - String secondString = " World ! " ; 
 - { 
 - Function < String , String > stringConcat = ( firstString , secondString ) - > { / / 2 violations 
 - return firstString + secondString ; 
 - } ; 
 - String . valueOf ( stringConcat . apply ( " A " , " B " ) ) ; 
 - } 
 - 
 - @ FunctionalInterface 
 - interface SomeFunction < One , Two > { 
 - public Two apply ( One one , Two two ) ; 
 - } 
 - 
 - / * * 
 - * Example 11 : untyped parameters - one hide field 
 - * / 
 - Integer first = 1 ; 
 - { 
 - Function < Integer , Character > turnToZ = ( first , second ) - > ' z ' ; / / 1 violation 
 - } 
 - 
 - @ FunctionalInterface 
 - public interface Foo { 
 - public String apply ( ) ; 
 - } 
 - 
 - / * * 
 - * Example 12 : case when no parameters are given 
 - * / 
 - { 
 - Foo foo = ( ) - > " " ; 
 - } 
 - @ FunctionalInterface 
 - interface FunctionWithOneParameter < One > { 
 - public One apply ( One one ) ; 
 - } 
 - 
 - / * * 
 - * Example 13 : internal lambda hides a field 
 - * / 
 - Double mPi = Math . PI ; 
 - List < Double > simpleNumbers = Arrays . asList ( 1 . 0 , 2 . 0 , 3 . 0 , 4 . 0 , 5 . 0 , 6 . 0 ) ; 
 - { 
 - simpleNumbers . forEach ( digit - > { 
 - FunctionWithOneParameter < Double > strangeAdder = ( mPi - > mPi + = digit ) ; / / 1 violation 
 - } ) ; 
 - } 
 - 
 - @ FunctionalInterface 
 - interface FunctionWithComplexGenerics < One , Two > { 
 - public Two foo ( One one , Two two ) ; 
 - } 
 - 
 - / * * 
 - * Example 14 : lambda typed with complex generics 
 - * / 
 - List < Double > justSomeList ; 
 - Map < String , Object > justSomeMap ; 
 - { 
 - FunctionWithComplexGenerics < List < Double > , Map < String , Object > > someWierdFunc = 
 - ( List < Double > justSomeList , Map < String , Object > justSomeMap ) - > { / / 2 violations 
 - String . valueOf ( justSomeList ) ; 
 - String . valueOf ( justSomeMap ) ; 
 - return new HashMap < > ( ) ; 
 - } ; 
 - } 
 - 
 - / * * 
 - * Example 15 : lambda stored in field ( with typed parameter ) 
 - * hides other field 
 - * / 
 - Object someObject = new Object ( ) ; 
 - FunctionWithOneParameter objectToString = ( Object someObject ) - > { / / 1 violation 
 - return someObject . toString ( ) ; 
 - } ; 
 - 
 - / * * 
 - * Example 16 : lambda stored in field ( with untyped parameter ) 
 - * hides other field 
 - * / 
 - FunctionWithOneParameter otherObjectToString = someObject - > { / / 1 violation 
 - return someObject . toString ( ) ; 
 - } ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReceiver . java 
 deleted file mode 100644 
 index ee288b8 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReceiver . java 
 + + + / dev / null 
 @ @ - 1 , 9 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - public class InputHiddenFieldReceiver { 
 - public void foo4 ( InputHiddenFieldReceiver this ) { } 
 - 
 - private class Inner { 
 - public Inner ( InputHiddenFieldReceiver InputHiddenFieldReceiver . this ) { } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReorder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReorder . java 
 deleted file mode 100644 
 index d37ec50 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReorder . java 
 + + + / dev / null 
 @ @ - 1 , 136 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2002 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - / * * 
 - * Test case for hidden fields 
 - * @ author Rick Giles 
 - * * / 
 - class InputHiddenFieldReorder 
 - { 
 - 
 - 
 - public InputHiddenFieldReorder ( ) 
 - { 
 - int hidden = 0 ; / / shadows field 
 - } 
 - 
 - public InputHiddenFieldReorder ( int hidden ) / / parameter shadows field 
 - { 
 - } 
 - 
 - public void shadow ( ) 
 - { 
 - int hidden = 0 ; / / shadows field 
 - } 
 - 
 - public void shadowFor ( ) 
 - { 
 - for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { / / shadows field 
 - } 
 - } 
 - 
 - public void shadowParam ( int hidden ) / / parameter shadows field 
 - { 
 - } 
 - 
 - public class Inner 
 - { 
 - / / private int innerHidden = 0 ; 
 - 
 - public Inner ( ) 
 - { 
 - int innerHidden = 0 ; / / shadows field 
 - } 
 - 
 - public Inner ( int innerHidden ) / / shadows field 
 - { 
 - } 
 - 
 - private void innerShadow ( ) 
 - { 
 - int innerHidden = 0 ; / / shadows inner field 
 - int hidden = 0 ; / / shadows outer field 
 - } 
 - 
 - private void innerShadowFor ( ) 
 - { 
 - for ( int innerHidden = 0 ; innerHidden < 1 ; innerHidden + + ) { 
 - } 
 - / / shadows outer field 
 - for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { 
 - } 
 - } 
 - 
 - private void shadowParam ( 
 - int innerHidden , / / parameter shadows inner field 
 - int hidden / / parameter shadows outer field 
 - ) 
 - { 
 - } 
 - 
 - { 
 - int innerHidden = 0 ; / / shadows inner field 
 - int hidden = 0 ; / / shadows outer field 
 - } 
 - private int innerHidden = 0 ; 
 - } 
 - 
 - { 
 - int hidden = 0 ; / / shadows field 
 - } 
 - private int hidden = 0 ; 
 - } 
 - 
 - interface NothingHiddenReorder 
 - { 
 - public static int notHidden = 0 ; 
 - 
 - / / not an error 
 - public void noShadow ( int notHidden ) ; 
 - } 
 - 
 - enum HiddenEnum1 
 - { 
 - A ( 129 ) , 
 - B ( 283 ) , 
 - C ( 1212 ) 
 - { 
 - public void doSomething ( ) 
 - { 
 - / / Should be flagged as hiding enum constant member 
 - int hidden = 0 ; 
 - } 
 - 
 - / * * 
 - * Should not be flagged as error as we don ' t check 
 - * hidden class level fields 
 - * / 
 - int hidden ; 
 - } ; 
 - 
 - / * * 
 - * ctor parameter hides member 
 - * / 
 - HiddenEnum1 ( int hidden ) 
 - { 
 - } 
 - 
 - public void doSomething ( ) 
 - { 
 - / / Should be flagged as hiding static member 
 - int hidden = 0 ; 
 - } 
 - 
 - public static void doSomethingStatic ( ) 
 - { 
 - / / Should be flagged as hiding static member 
 - int hiddenStatic = 0 ; 
 - } 
 - 
 - int hidden ; 
 - static int hiddenStatic ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldStaticVisibility . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldStaticVisibility . java 
 deleted file mode 100644 
 index f1a0613 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldStaticVisibility . java 
 + + + / dev / null 
 @ @ - 1 , 47 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - import java . util . Comparator ; 
 - 
 - public class InputHiddenFieldStaticVisibility { 
 - static int someField ; 
 - static InputHiddenFieldStaticVisibility other = null ; 
 - InputHiddenFieldStaticVisibility field = null ; 
 - 
 - static void method ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { 
 - / / field ' field ' can not be referenced form a static context 
 - / / static field ' other ' can be referenced from a static context 
 - } 
 - 
 - static class B { 
 - void method ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { 
 - / / field ' field ' can not be referenced form a static context 
 - / / static field ' other ' can be referenced from a static context 
 - } 
 - } 
 - 
 - static Comparator < InputHiddenFieldStaticVisibility > COMP = new Comparator < InputHiddenFieldStaticVisibility > ( ) { 
 - @ Override 
 - public int compare ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { 
 - / / field ' field ' can not be referenced form a static context 
 - / / static field ' other ' can be referenced from a static context 
 - return 0 ; 
 - } 
 - } ; 
 - 
 - static Comparator < InputHiddenFieldStaticVisibility > createComp ( ) { 
 - return new Comparator < InputHiddenFieldStaticVisibility > ( ) { 
 - @ Override 
 - public int compare ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { 
 - / / field ' field ' can not be referenced form a static context 
 - / / static field ' other ' can be referenced from a static context 
 - return 0 ; 
 - } 
 - } ; 
 - } 
 - 
 - static void foo1 ( int a ) { } 
 - 
 - void foo2 ( int a ) { } 
 - 
 - static void foo3 ( int someField ) { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java 
 new file mode 100644 
 index 0000000 . . 5add195 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java 
 @ @ - 0 , 0 + 1 , 294 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . hiddenfield ; 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2002 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + / * * 
 + * Test case for hidden fields 
 + * @ author Rick Giles 
 + * * / 
 + class InputHiddenField 
 + { 
 + private int hidden = 0 ; 
 + 
 + public InputHiddenField ( ) 
 + { 
 + int hidden = 0 ; / / shadows field 
 + } 
 + 
 + public InputHiddenField ( int hidden ) / / parameter shadows field 
 + { 
 + } 
 + 
 + public void shadow ( ) 
 + { 
 + int hidden = 0 ; / / shadows field 
 + } 
 + 
 + public void shadowFor ( ) 
 + { 
 + for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { / / shadows field 
 + } 
 + } 
 + 
 + public void shadowParam ( int hidden ) / / parameter shadows field 
 + { 
 + } 
 + 
 + public class Inner 
 + { 
 + private int innerHidden = 0 ; 
 + 
 + public Inner ( ) 
 + { 
 + int innerHidden = 0 ; / / shadows field 
 + } 
 + 
 + public Inner ( int innerHidden ) / / shadows field 
 + { 
 + } 
 + 
 + private void innerShadow ( ) 
 + { 
 + int innerHidden = 0 ; / / shadows inner field 
 + int hidden = 0 ; / / shadows outer field 
 + } 
 + 
 + private void innerShadowFor ( ) 
 + { 
 + for ( int innerHidden = 0 ; innerHidden < 1 ; innerHidden + + ) { 
 + } 
 + / / shadows outer field 
 + for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { 
 + } 
 + } 
 + 
 + private void shadowParam ( 
 + int innerHidden , / / parameter shadows inner field 
 + int hidden / / parameter shadows outer field 
 + ) 
 + { 
 + } 
 + 
 + { 
 + int innerHidden = 0 ; / / shadows inner field 
 + int hidden = 0 ; / / shadows outer field 
 + } 
 + } 
 + 
 + { 
 + int hidden = 0 ; / / shadows field 
 + } 
 + } 
 + 
 + interface NothingHidden 
 + { 
 + public static int notHidden = 0 ; 
 + 
 + / / not an error 
 + public void noShadow ( int notHidden ) ; 
 + } 
 + 
 + / * * tests ignoring the parameter of a property setter method * / 
 + class PropertySetter 
 + { 
 + private int prop ; 
 + 
 + / * * setter * / 
 + public void setProp ( int prop ) 
 + { 
 + this . prop = prop ; 
 + } 
 + 
 + / * * error - incorrect method name * / 
 + public void setprop ( int prop ) 
 + { 
 + this . prop = prop ; 
 + } 
 + 
 + / * * error - more than one parameter * / 
 + public void setProp ( int prop , int extra ) 
 + { 
 + this . prop = prop ; 
 + } 
 + } 
 + 
 + / * * tests a non - void method * / 
 + class PropertySetter2 
 + { 
 + private int prop ; 
 + 
 + / * * error - not a void method * / 
 + public int setProp ( int prop ) 
 + { 
 + this . prop = prop ; 
 + return 0 ; 
 + } 
 + } 
 + 
 + / * * tests for static fields * / 
 + class StaticFields 
 + { 
 + private static int hidden ; 
 + 
 + public static void staticMethod ( ) 
 + { 
 + int hidden ; 
 + } 
 + 
 + public void method ( ) 
 + { 
 + int hidden ; 
 + } 
 + 
 + static 
 + { 
 + int hidden ; 
 + } 
 + 
 + { 
 + int hidden ; 
 + } 
 + } 
 + 
 + / * * tests static methods & initializers * / 
 + class StaticMethods 
 + { 
 + private int notHidden ; 
 + 
 + public static void method ( ) 
 + { 
 + / / local variables of static methods don ' t hide instance fields . 
 + int notHidden ; 
 + } 
 + 
 + static 
 + { 
 + / / local variables of static initializers don ' t hide instance fields . 
 + int notHidden ; 
 + } 
 + 
 + private int x ; 
 + private static int y ; 
 + static class Inner { 
 + void useX ( int x ) { 
 + x + + ; 
 + } 
 + void useY ( int y ) { 
 + y + + ; 
 + } 
 + } 
 + } 
 + 
 + enum HiddenEnum 
 + { 
 + A ( 129 ) , 
 + B ( 283 ) , 
 + C ( 1212 ) 
 + { 
 + / * * 
 + * Should not be flagged as error as we don ' t check 
 + * hidden class level fields 
 + * / 
 + int hidden ; 
 + 
 + public void doSomething ( ) 
 + { 
 + / / Should be flagged as hiding enum constant member 
 + int hidden = 0 ; 
 + } 
 + } ; 
 + 
 + int hidden ; 
 + static int hiddenStatic ; 
 + 
 + / * * 
 + * ctor parameter hides member 
 + * / 
 + HiddenEnum ( int hidden ) 
 + { 
 + } 
 + 
 + public void doSomething ( ) 
 + { 
 + / / Should be flagged as hiding static member 
 + int hidden = 0 ; 
 + } 
 + 
 + public static void doSomethingStatic ( ) 
 + { 
 + / / Should be flagged as hiding static member 
 + int hiddenStatic = 0 ; 
 + } 
 + } 
 + 
 + / / we should ignore this if user wants ( ignoreAbstractMethods is true ) 
 + abstract class InputHiddenFieldBug1084512 { 
 + String x ; 
 + public abstract void methodA ( String x ) ; 
 + } 
 + 
 + class Bug3370946 { 
 + private int xAxis ; 
 + 
 + public void setxAxis ( int xAxis ) { 
 + this . xAxis = xAxis ; 
 + } 
 + } 
 + 
 + / * * tests chain - setter * / 
 + class PropertySetter3 
 + { 
 + private int prop ; 
 + 
 + / * * 
 + * if setterCanReturnItsClass = = false then 
 + * error - not a void method 
 + * 
 + * if setterCanReturnItsClass = = true then 
 + * success as it is then considered to be a setter 
 + * / 
 + public PropertySetter3 setProp ( int prop ) 
 + { 
 + this . prop = prop ; 
 + return this ; 
 + } 
 + } 
 + 
 + / * * tests setters ( both regular and the chain one ) on the enum * / 
 + enum PropertySetter4 { 
 + INSTANCE ; 
 + 
 + private int prop ; 
 + private int prop2 ; 
 + 
 + public void setProp ( int prop ) { 
 + this . prop = prop ; 
 + } 
 + 
 + / * * 
 + * if setterCanReturnItsClass = = false then 
 + * error - not a void method 
 + * 
 + * if setterCanReturnItsClass = = true then 
 + * success as it is then considered to be a setter 
 + * / 
 + public PropertySetter4 setProp2 ( int prop2 ) 
 + { 
 + this . prop2 = prop2 ; 
 + return this ; 
 + } 
 + } 
 + 
 + / * * Tests setter for one letter field ( issue # 730 ) . * / 
 + class OneLetterField 
 + { 
 + int i ; 
 + 
 + void setI ( int i ) 
 + { 
 + this . i = i ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java 
 new file mode 100644 
 index 0000000 . . 8148d41 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java 
 @ @ - 0 , 0 + 1 , 230 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . hiddenfield ; 
 + 
 + import java . lang . Integer ; 
 + import java . util . Arrays ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Optional ; 
 + 
 + 
 + public class InputHiddenFieldLambdas { 
 + / * * 
 + * Example 1 : lambda parameter ' value ' on line 16 
 + * hides a field ' value ' on line 14 . 
 + * / 
 + List < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ; 
 + Integer value = new Integer ( 1 ) ; 
 + { 
 + numbers . forEach ( ( Integer value ) - > String . valueOf ( value ) ) ; / / 1 violation 
 + } 
 + 
 + / * * 
 + * Example 2 : lambda parameter ' name ' on line 27 
 + * does not hide a field ' name ' on line 25 , because 
 + * field ' name ' can not be referenced from a static context . 
 + * / 
 + static List < String > firstNames = Arrays . asList ( " Andrei " , " Michal " , " Roman " , " Vladislav " ) ; 
 + String name = new String ( ) ; 
 + static { 
 + firstNames . forEach ( ( String name ) - > String . valueOf ( name ) ) ; 
 + } 
 + 
 + / * * 
 + * Example 3 : lambda parameter ' brand ' on line 38 ( which type is omitted ) 
 + * does not hide a field ' brand ' on line 36 , because 
 + * field ' brand ' can not be referenced from a static context . 
 + * / 
 + static List < String > carBrands = Arrays . asList ( " BMW " , " Mazda " , " Volkswagen " ) ; 
 + String brand = new String ( ) ; 
 + static { 
 + carBrands . forEach ( brand - > String . valueOf ( brand ) ) ; 
 + } 
 + 
 + / * * 
 + * Example 4 : lambda parameter ' languageCode ' on line 48 
 + * hides a field ' languageCode ' on line 46 . 
 + * / 
 + static List < String > languageCodes = Arrays . asList ( " de " , " ja " , " fr " , " pt " ) ; 
 + static String languageCode = new String ( ) ; 
 + { 
 + languageCodes . forEach ( languageCode - > String . valueOf ( languageCode ) ) ; / / 1 violation 
 + } 
 + 
 + / * * 
 + * Example 5 : lambda parameter ' number ' on line 57 
 + * hides a field ' number ' on line 55 . 
 + * / 
 + int number = 1 ; 
 + Optional < Object > foo1 ( int i ) { 
 + return Optional . of ( 5 ) . map ( number - > { / / violation 
 + if ( number = = 1 ) return true ; 
 + else if ( number = = 2 ) return true ; 
 + else return false ; 
 + } ) ; 
 + } 
 + 
 + / * * 
 + * Example 6 : lambda parameter ' id ' on line 70 
 + * hides a field ' id ' on line 68 . 
 + * / 
 + static long id = 1 ; 
 + Optional < Object > foo2 ( int i ) { 
 + return Optional . of ( 5 ) . map ( id - > { / / violation 
 + if ( id = = 1 ) return true ; 
 + else if ( id = = 2 ) return true ; 
 + else return false ; 
 + } ) ; 
 + } 
 + 
 + / * * 
 + * Example 7 : lambda parameter ' age ' on line 84 
 + * does not hide a field ' age ' on line 82 , 
 + * because field ' age ' can not be referenced from a static context . 
 + * / 
 + int age = 21 ; 
 + static Optional < Object > foo3 ( int i ) { 
 + return Optional . of ( 5 ) . map ( age - > { 
 + if ( age = = 1 ) return true ; 
 + else if ( age = = 2 ) return true ; 
 + else return false ; 
 + } ) ; 
 + } 
 + 
 + / * * 
 + * Example 8 : lambda parameter ' note ' on line 98 
 + * hides a field ' note ' on line 95 . 
 + * / 
 + static String note = new String ( ) ; 
 + private void foo4 ( ) { 
 + List < String > acceptableNotes = Arrays . asList ( " C " , " D " , " E " , " F " , " G " , " A " , " B " ) ; 
 + acceptableNotes . forEach ( note - > String . valueOf ( note ) ) ; / / 1 violation 
 + } 
 + 
 + / * * 
 + * Example 9 : lambda parameter ' letter ' on line 109 
 + * does not hide a field ' letter ' on line 106 , because 
 + * field ' letter ' can not be referenced from a static context . 
 + * / 
 + String letter = new String ( " a " ) ; 
 + private static void foo5 ( ) { 
 + List < String > acceptableAlphabet = Arrays . asList ( " a " , " b " , " c " ) ; 
 + acceptableAlphabet . forEach ( letter - > String . valueOf ( letter ) ) ; 
 + } 
 + 
 + @ FunctionalInterface 
 + interface Function < A , B > { 
 + public B apply ( A a , B b ) ; 
 + } 
 + 
 + / * * 
 + * Example 10 : typed parameters - two hide fields 
 + * / 
 + String stringValue = " 248 . 3 " ; 
 + int intValue = 2 ; 
 + { 
 + Function < String , Integer > multiAdder = ( String stringValue , Integer intValue ) - > { / / 2 violations 
 + return Integer . parseInt ( stringValue ) + intValue ; 
 + } ; 
 + String . valueOf ( multiAdder . apply ( " 22 . 4 " , 2 ) ) ; 
 + } 
 + 
 + / * * 
 + * Example 11 : typed parameters - one hide field 
 + * / 
 + Double doubleValue = 8 . 5 ; 
 + { 
 + Function < Integer , Double > adder = ( Integer integerValue , Double doubleValue ) - > { / / 1 violation 
 + return integerValue + doubleValue ; 
 + } ; 
 + String . valueOf ( adder . apply ( 2 , 2 . 2 ) ) ; 
 + } 
 + 
 + / * * 
 + * Example 11 : untyped parameters - two hide fields 
 + * / 
 + String firstString = " Hello , " ; 
 + String secondString = " World ! " ; 
 + { 
 + Function < String , String > stringConcat = ( firstString , secondString ) - > { / / 2 violations 
 + return firstString + secondString ; 
 + } ; 
 + String . valueOf ( stringConcat . apply ( " A " , " B " ) ) ; 
 + } 
 + 
 + @ FunctionalInterface 
 + interface SomeFunction < One , Two > { 
 + public Two apply ( One one , Two two ) ; 
 + } 
 + 
 + / * * 
 + * Example 11 : untyped parameters - one hide field 
 + * / 
 + Integer first = 1 ; 
 + { 
 + Function < Integer , Character > turnToZ = ( first , second ) - > ' z ' ; / / 1 violation 
 + } 
 + 
 + @ FunctionalInterface 
 + public interface Foo { 
 + public String apply ( ) ; 
 + } 
 + 
 + / * * 
 + * Example 12 : case when no parameters are given 
 + * / 
 + { 
 + Foo foo = ( ) - > " " ; 
 + } 
 + @ FunctionalInterface 
 + interface FunctionWithOneParameter < One > { 
 + public One apply ( One one ) ; 
 + } 
 + 
 + / * * 
 + * Example 13 : internal lambda hides a field 
 + * / 
 + Double mPi = Math . PI ; 
 + List < Double > simpleNumbers = Arrays . asList ( 1 . 0 , 2 . 0 , 3 . 0 , 4 . 0 , 5 . 0 , 6 . 0 ) ; 
 + { 
 + simpleNumbers . forEach ( digit - > { 
 + FunctionWithOneParameter < Double > strangeAdder = ( mPi - > mPi + = digit ) ; / / 1 violation 
 + } ) ; 
 + } 
 + 
 + @ FunctionalInterface 
 + interface FunctionWithComplexGenerics < One , Two > { 
 + public Two foo ( One one , Two two ) ; 
 + } 
 + 
 + / * * 
 + * Example 14 : lambda typed with complex generics 
 + * / 
 + List < Double > justSomeList ; 
 + Map < String , Object > justSomeMap ; 
 + { 
 + FunctionWithComplexGenerics < List < Double > , Map < String , Object > > someWierdFunc = 
 + ( List < Double > justSomeList , Map < String , Object > justSomeMap ) - > { / / 2 violations 
 + String . valueOf ( justSomeList ) ; 
 + String . valueOf ( justSomeMap ) ; 
 + return new HashMap < > ( ) ; 
 + } ; 
 + } 
 + 
 + / * * 
 + * Example 15 : lambda stored in field ( with typed parameter ) 
 + * hides other field 
 + * / 
 + Object someObject = new Object ( ) ; 
 + FunctionWithOneParameter objectToString = ( Object someObject ) - > { / / 1 violation 
 + return someObject . toString ( ) ; 
 + } ; 
 + 
 + / * * 
 + * Example 16 : lambda stored in field ( with untyped parameter ) 
 + * hides other field 
 + * / 
 + FunctionWithOneParameter otherObjectToString = someObject - > { / / 1 violation 
 + return someObject . toString ( ) ; 
 + } ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldReceiver . java 
 new file mode 100644 
 index 0000000 . . 2794f13 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldReceiver . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . hiddenfield ; 
 + 
 + public class InputHiddenFieldReceiver { 
 + public void foo4 ( InputHiddenFieldReceiver this ) { } 
 + 
 + private class Inner { 
 + public Inner ( InputHiddenFieldReceiver InputHiddenFieldReceiver . this ) { } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldReorder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldReorder . java 
 new file mode 100644 
 index 0000000 . . 9d00542 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldReorder . java 
 @ @ - 0 , 0 + 1 , 136 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . hiddenfield ; 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2002 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + / * * 
 + * Test case for hidden fields 
 + * @ author Rick Giles 
 + * * / 
 + class InputHiddenFieldReorder 
 + { 
 + 
 + 
 + public InputHiddenFieldReorder ( ) 
 + { 
 + int hidden = 0 ; / / shadows field 
 + } 
 + 
 + public InputHiddenFieldReorder ( int hidden ) / / parameter shadows field 
 + { 
 + } 
 + 
 + public void shadow ( ) 
 + { 
 + int hidden = 0 ; / / shadows field 
 + } 
 + 
 + public void shadowFor ( ) 
 + { 
 + for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { / / shadows field 
 + } 
 + } 
 + 
 + public void shadowParam ( int hidden ) / / parameter shadows field 
 + { 
 + } 
 + 
 + public class Inner 
 + { 
 + / / private int innerHidden = 0 ; 
 + 
 + public Inner ( ) 
 + { 
 + int innerHidden = 0 ; / / shadows field 
 + } 
 + 
 + public Inner ( int innerHidden ) / / shadows field 
 + { 
 + } 
 + 
 + private void innerShadow ( ) 
 + { 
 + int innerHidden = 0 ; / / shadows inner field 
 + int hidden = 0 ; / / shadows outer field 
 + } 
 + 
 + private void innerShadowFor ( ) 
 + { 
 + for ( int innerHidden = 0 ; innerHidden < 1 ; innerHidden + + ) { 
 + } 
 + / / shadows outer field 
 + for ( int hidden = 0 ; hidden < 1 ; hidden + + ) { 
 + } 
 + } 
 + 
 + private void shadowParam ( 
 + int innerHidden , / / parameter shadows inner field 
 + int hidden / / parameter shadows outer field 
 + ) 
 + { 
 + } 
 + 
 + { 
 + int innerHidden = 0 ; / / shadows inner field 
 + int hidden = 0 ; / / shadows outer field 
 + } 
 + private int innerHidden = 0 ; 
 + } 
 + 
 + { 
 + int hidden = 0 ; / / shadows field 
 + } 
 + private int hidden = 0 ; 
 + } 
 + 
 + interface NothingHiddenReorder 
 + { 
 + public static int notHidden = 0 ; 
 + 
 + / / not an error 
 + public void noShadow ( int notHidden ) ; 
 + } 
 + 
 + enum HiddenEnum1 
 + { 
 + A ( 129 ) , 
 + B ( 283 ) , 
 + C ( 1212 ) 
 + { 
 + public void doSomething ( ) 
 + { 
 + / / Should be flagged as hiding enum constant member 
 + int hidden = 0 ; 
 + } 
 + 
 + / * * 
 + * Should not be flagged as error as we don ' t check 
 + * hidden class level fields 
 + * / 
 + int hidden ; 
 + } ; 
 + 
 + / * * 
 + * ctor parameter hides member 
 + * / 
 + HiddenEnum1 ( int hidden ) 
 + { 
 + } 
 + 
 + public void doSomething ( ) 
 + { 
 + / / Should be flagged as hiding static member 
 + int hidden = 0 ; 
 + } 
 + 
 + public static void doSomethingStatic ( ) 
 + { 
 + / / Should be flagged as hiding static member 
 + int hiddenStatic = 0 ; 
 + } 
 + 
 + int hidden ; 
 + static int hiddenStatic ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldStaticVisibility . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldStaticVisibility . java 
 new file mode 100644 
 index 0000000 . . 2a4cb08 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldStaticVisibility . java 
 @ @ - 0 , 0 + 1 , 47 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . hiddenfield ; 
 + 
 + import java . util . Comparator ; 
 + 
 + public class InputHiddenFieldStaticVisibility { 
 + static int someField ; 
 + static InputHiddenFieldStaticVisibility other = null ; 
 + InputHiddenFieldStaticVisibility field = null ; 
 + 
 + static void method ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { 
 + / / field ' field ' can not be referenced form a static context 
 + / / static field ' other ' can be referenced from a static context 
 + } 
 + 
 + static class B { 
 + void method ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { 
 + / / field ' field ' can not be referenced form a static context 
 + / / static field ' other ' can be referenced from a static context 
 + } 
 + } 
 + 
 + static Comparator < InputHiddenFieldStaticVisibility > COMP = new Comparator < InputHiddenFieldStaticVisibility > ( ) { 
 + @ Override 
 + public int compare ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { 
 + / / field ' field ' can not be referenced form a static context 
 + / / static field ' other ' can be referenced from a static context 
 + return 0 ; 
 + } 
 + } ; 
 + 
 + static Comparator < InputHiddenFieldStaticVisibility > createComp ( ) { 
 + return new Comparator < InputHiddenFieldStaticVisibility > ( ) { 
 + @ Override 
 + public int compare ( InputHiddenFieldStaticVisibility field , InputHiddenFieldStaticVisibility other ) { 
 + / / field ' field ' can not be referenced form a static context 
 + / / static field ' other ' can be referenced from a static context 
 + return 0 ; 
 + } 
 + } ; 
 + } 
 + 
 + static void foo1 ( int a ) { } 
 + 
 + void foo2 ( int a ) { } 
 + 
 + static void foo3 ( int someField ) { } 
 + }

NEAREST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index 421f430 . . 43c7eb4 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 168 , 6 + 168 , 10 @ @ 
 < property name = " maxLineLength " value = " 100 " / > 
 < / module > 
 < module name = " NeedBraces " / > 
 + < module name = " NeedBraces " > 
 + < property name = " tokens " value = " LAMBDA " / > 
 + < property name = " allowSingleLineStatement " value = " true " / > 
 + < / module > 
 < module name = " RightCurly " > 
 < property name = " tokens " value = " METHOD _ DEF " / > 
 < property name = " tokens " value = " CTOR _ DEF " / > 
 diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index ce9951e . . a75d450 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 344 , 7 + 344 , 7 @ @ 
 < inspection _ tool class = " CloneableImplementsClone " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 < option name = " m _ ignoreCloneableDueToInheritance " value = " false " / > 
 < / inspection _ tool > 
 - < inspection _ tool class = " CodeBlock2Expr " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < inspection _ tool class = " CodeBlock2Expr " enabled = " false " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CoffeeScriptArgumentsOutsideFunction " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CoffeeScriptFunctionSignatures " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CoffeeScriptInfiniteLoop " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 index 8ed29f0 . . 7191d06 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 @ @ - 158 , 9 + 158 , 9 @ @ public class EqualsHashCodeCheck 
 @ Override 
 public void finishTree ( DetailAST rootAST ) { 
 objBlockWithEquals 
 - . entrySet ( ) . stream ( ) . filter ( detailASTDetailASTEntry - > 
 - objBlockWithHashCode . remove ( detailASTDetailASTEntry . getKey ( ) ) = = null ) 
 - . forEach ( detailASTDetailASTEntry - > { 
 + . entrySet ( ) . stream ( ) . filter ( detailASTDetailASTEntry - > { 
 + return objBlockWithHashCode . remove ( detailASTDetailASTEntry . getKey ( ) ) = = null ; 
 + } ) . forEach ( detailASTDetailASTEntry - > { 
 final DetailAST equalsAST = detailASTDetailASTEntry . getValue ( ) ; 
 log ( equalsAST . getLineNo ( ) , equalsAST . getColumnNo ( ) , MSG _ KEY _ HASHCODE ) ; 
 } ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 index fb4d9ef . . 66b7b6c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 @ @ - 377 , 9 + 377 , 9 @ @ public final class ModifiedControlVariableCheck extends AbstractCheck { 
 final DetailAST forUpdateListAST = forIteratorAST . findFirstToken ( TokenTypes . ELIST ) ; 
 
 findChildrenOfExpressionType ( forUpdateListAST ) . stream ( ) 
 - . filter ( iteratingExpressionAST - > 
 - MUTATION _ OPERATIONS . contains ( iteratingExpressionAST . getType ( ) ) ) 
 - . forEach ( iteratingExpressionAST - > { 
 + . filter ( iteratingExpressionAST - > { 
 + return MUTATION _ OPERATIONS . contains ( iteratingExpressionAST . getType ( ) ) ; 
 + } ) . forEach ( iteratingExpressionAST - > { 
 final DetailAST oneVariableOperatorChild = iteratingExpressionAST . getFirstChild ( ) ; 
 if ( oneVariableOperatorChild . getType ( ) = = TokenTypes . IDENT ) { 
 iteratorVariables . add ( oneVariableOperatorChild . getText ( ) ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 index fdb7b34 . . b74a614 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 @ @ - 184 , 11 + 184 , 12 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 final DetailAST methodImplOpenBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 if ( methodImplOpenBrace ! = null ) { 
 final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; 
 - final Predicate < DetailAST > predicate = currentNode - > 
 - currentNode ! = null 
 + final Predicate < DetailAST > predicate = currentNode - > { 
 + return currentNode ! = null 
 & & currentNode ! = methodImplCloseBrace 
 & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) 
 & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; 
 + } ; 
 final Optional < DetailAST > methodBody = 
 TokenUtils . findFirstTokenByPredicate ( methodImplOpenBrace , predicate ) ; 
 if ( methodBody . isPresent ( ) ) { 
 @ @ - 237 , 9 + 238 , 11 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 boolean containsAnnotation = false ; 
 if ( modifiers . branchContains ( TokenTypes . ANNOTATION ) ) { 
 final Optional < DetailAST > annotation = TokenUtils . findFirstTokenByPredicate ( modifiers , 
 - currentToken - > currentToken ! = null 
 - & & currentToken . getType ( ) = = TokenTypes . ANNOTATION 
 - & & annotationName . equals ( getAnnotationName ( currentToken ) ) ) ; 
 + currentToken - > { 
 + return currentToken ! = null 
 + & & currentToken . getType ( ) = = TokenTypes . ANNOTATION 
 + & & annotationName . equals ( getAnnotationName ( currentToken ) ) ; 
 + } ) ; 
 if ( annotation . isPresent ( ) ) { 
 containsAnnotation = true ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 index 3b0f535 . . 932bf4d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 @ @ - 724 , 8 + 724 , 10 @ @ public class VisibilityModifierCheck 
 * / 
 private boolean areImmutableTypeArguments ( List < String > typeArgsClassNames ) { 
 return ! typeArgsClassNames . stream ( ) . filter ( 
 - typeName - > ! immutableClassShortNames . contains ( typeName ) 
 - & & ! immutableClassCanonicalNames . contains ( typeName ) ) . findFirst ( ) . isPresent ( ) ; 
 + typeName - > { 
 + return ! immutableClassShortNames . contains ( typeName ) 
 + & & ! immutableClassCanonicalNames . contains ( typeName ) ; 
 + } ) . findFirst ( ) . isPresent ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java 
 index 68581de . . 2b6f27b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ListToTreeSelectionModelWrapper . java 
 @ @ - 43 , 8 + 43 , 9 @ @ class ListToTreeSelectionModelWrapper extends DefaultTreeSelectionModel { 
 * / 
 ListToTreeSelectionModelWrapper ( JTreeTable jTreeTable ) { 
 treeTable = jTreeTable ; 
 - getListSelectionModel ( ) . addListSelectionListener ( event - > 
 - updateSelectedPathsFromSelectedRows ( ) ) ; 
 + getListSelectionModel ( ) . addListSelectionListener ( event - > { 
 + updateSelectedPathsFromSelectedRows ( ) ; 
 + } ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 index ad1134a . . b3d3a48 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 @ @ - 122 , 9 + 122 , 11 @ @ public class DetailASTTest { 
 } 
 
 private static void checkDir ( File dir ) throws Exception { 
 - final File [ ] files = dir . listFiles ( file - > ( file . getName ( ) . endsWith ( " . java " ) 
 + final File [ ] files = dir . listFiles ( file - > { 
 + return ( file . getName ( ) . endsWith ( " . java " ) 
 | | file . isDirectory ( ) ) 
 - & & ! file . getName ( ) . endsWith ( " InputGrammar . java " ) ) ; 
 + & & ! file . getName ( ) . endsWith ( " InputGrammar . java " ) ; 
 + } ) ; 
 for ( File file : files ) { 
 if ( file . isFile ( ) ) { 
 checkFile ( file . getCanonicalPath ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 index 842b20c . . adb04f4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 @ @ - 183 , 7 + 183 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NeedBraces " , Stream . of ( 
 / / we prefer no braces here as it looks unusual even though they help avoid sharing 
 / / scope of variables 
 - " LITERAL _ DEFAULT " , " LITERAL _ CASE " , " LAMBDA " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + " LITERAL _ DEFAULT " , " LITERAL _ CASE " ) . collect ( Collectors . toSet ( ) ) ) ; 
 CHECKSTYLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " FinalParameters " , Stream . of ( 
 / / we prefer these to be effectively final as to not damage readability 
 " FOR _ EACH _ CLAUSE " , " LITERAL _ CATCH " ) . collect ( Collectors . toSet ( ) ) ) ;
