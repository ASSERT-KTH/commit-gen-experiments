BLEU SCORE: 0.07574347133041981

TEST MSG: Issue # 5124 : removed usage of branchContains for simple cases
GENERATED MSG: Issue # 1566 : Line cannot start with this symbol violations fixed

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> index 3a24747 . . 308565a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> @ @ - 143 , 7 + 143 , 8 @ @ public class FinalParametersCheck extends AbstractCheck { <nl> method . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> / / exit on fast lane if there is nothing to check here <nl> <nl> - if ( method . branchContains ( TokenTypes . PARAMETER _ DEF ) <nl> + if ( method . findFirstToken ( TokenTypes . PARAMETERS ) <nl> + . findFirstToken ( TokenTypes . PARAMETER _ DEF ) ! = null <nl> / / ignore abstract and native methods <nl> & & modifiers . findFirstToken ( TokenTypes . ABSTRACT ) = = null <nl> & & modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) = = null ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java <nl> index 0efc580 . . 054bab9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java <nl> @ @ - 160 , 8 + 160 , 8 @ @ public final class MissingOverrideCheck extends AbstractCheck { <nl> if ( javaFiveCompatibility ) { <nl> final DetailAST defOrNew = ast . getParent ( ) . getParent ( ) ; <nl> <nl> - if ( defOrNew . branchContains ( TokenTypes . EXTENDS _ CLAUSE ) <nl> - | | defOrNew . branchContains ( TokenTypes . IMPLEMENTS _ CLAUSE ) <nl> + if ( defOrNew . findFirstToken ( TokenTypes . EXTENDS _ CLAUSE ) ! = null <nl> + | | defOrNew . findFirstToken ( TokenTypes . IMPLEMENTS _ CLAUSE ) ! = null <nl> | | defOrNew . getType ( ) = = TokenTypes . LITERAL _ NEW ) { <nl> check = false ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> index a7ccf4c . . 955ec1e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> @ @ - 162 , 7 + 162 , 7 @ @ public class EqualsAvoidNullCheck extends AbstractCheck { <nl> & & astType ! = TokenTypes . SLIST <nl> & & astType ! = TokenTypes . LITERAL _ NEW <nl> | | astType = = TokenTypes . LITERAL _ NEW <nl> - & & ast . branchContains ( TokenTypes . LCURLY ) ) { <nl> + & & ast . findFirstToken ( TokenTypes . OBJBLOCK ) ! = null ) { <nl> currentFrame = currentFrame . getParent ( ) ; <nl> } <nl> else if ( astType = = TokenTypes . SLIST ) { <nl> @ @ - 243 , 7 + 243 , 7 @ @ public class EqualsAvoidNullCheck extends AbstractCheck { <nl> * @ param ast LITERAL _ NEW ast . <nl> * / <nl> private void processLiteralNew ( DetailAST ast ) { <nl> - if ( ast . branchContains ( TokenTypes . LCURLY ) ) { <nl> + if ( ast . findFirstToken ( TokenTypes . OBJBLOCK ) ! = null ) { <nl> final FieldFrame frame = new FieldFrame ( currentFrame ) ; <nl> currentFrame . addChild ( frame ) ; <nl> currentFrame = frame ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> index c5f0820 . . 843ba13 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class EqualsHashCodeCheck <nl> return CheckUtils . isEqualsMethod ( ast ) <nl> & & modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null <nl> & & isObjectParam ( parameters . getFirstChild ( ) ) <nl> - & & ( ast . branchContains ( TokenTypes . SLIST ) <nl> + & & ( ast . findFirstToken ( TokenTypes . SLIST ) ! = null <nl> | | modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) ! = null ) ; <nl> } <nl> <nl> @ @ - 141 , 7 + 141 , 7 @ @ public class EqualsHashCodeCheck <nl> & & modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null <nl> & & modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null <nl> & & parameters . getFirstChild ( ) = = null <nl> - & & ( ast . branchContains ( TokenTypes . SLIST ) <nl> + & & ( ast . findFirstToken ( TokenTypes . SLIST ) ! = null <nl> | | modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) ! = null ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> index 7c96b21 . . bb17e95 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> @ @ - 203 , 7 + 203 , 8 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> break ; <nl> case TokenTypes . PARAMETER _ DEF : <nl> if ( ! isInLambda ( ast ) <nl> - & & ! ast . branchContains ( TokenTypes . FINAL ) <nl> + & & ast . findFirstToken ( TokenTypes . MODIFIERS ) <nl> + . findFirstToken ( TokenTypes . FINAL ) = = null <nl> & & ! isInAbstractOrNativeMethod ( ast ) <nl> & & ! ScopeUtils . isInInterfaceBlock ( ast ) <nl> & & ! isMultipleTypeCatch ( ast ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index abadbaf . . e9d34f1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 607 , 7 + 607 , 8 @ @ public class RequireThisCheck extends AbstractCheck { <nl> else { <nl> final DetailAST frameNameIdent = variableDeclarationFrame . getFrameNameIdent ( ) ; <nl> final DetailAST definitionToken = frameNameIdent . getParent ( ) ; <nl> - staticContext = definitionToken . branchContains ( TokenTypes . LITERAL _ STATIC ) ; <nl> + staticContext = definitionToken . findFirstToken ( TokenTypes . MODIFIERS ) <nl> + . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; <nl> } <nl> } <nl> return ! staticContext ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfo . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfo . java <nl> index c0bb9be . . 2d2c3a6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfo . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfo . java <nl> @ @ - 138 , 7 + 138 , 8 @ @ public enum JavadocTagInfo { <nl> final int astType = ast . getType ( ) ; <nl> <nl> return astType = = TokenTypes . METHOD _ DEF <nl> - & & ! ast . branchContains ( TokenTypes . LITERAL _ STATIC ) <nl> + & & ast . findFirstToken ( TokenTypes . MODIFIERS ) <nl> + . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null <nl> & & ScopeUtils . getScopeFromMods ( ast <nl> . findFirstToken ( TokenTypes . MODIFIERS ) ) ! = Scope . PRIVATE ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> index 0d7f2d8 . . cc8d1b6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> @ @ - 309 , 7 + 309 , 7 @ @ public class RedundantModifierCheck <nl> checkForRedundantModifier ( ast , TokenTypes . FINAL ) ; <nl> } <nl> <nl> - if ( ! ast . branchContains ( TokenTypes . SLIST ) ) { <nl> + if ( ast . findFirstToken ( TokenTypes . SLIST ) = = null ) { <nl> processAbstractMethodParameters ( ast ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java <nl> index 72c99c8 . . bb673e9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java <nl> @ @ - 84 , 7 + 84 , 7 @ @ public final class AnnotationUtility { <nl> throw new IllegalArgumentException ( THE _ AST _ IS _ NULL ) ; <nl> } <nl> final DetailAST holder = getAnnotationHolder ( ast ) ; <nl> - return holder ! = null & & holder . branchContains ( TokenTypes . ANNOTATION ) ; <nl> + return holder ! = null & & holder . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / . travis . yml b / . travis . yml <nl> index 9dd13e5 . . 61ad8ed 100644 <nl> - - - a / . travis . yml <nl> + + + b / . travis . yml <nl> @ @ - 62 , 7 + 62 , 7 @ @ matrix : <nl> env : <nl> - DESC = " NoErrorTest - Orekit " <nl> - CMD1 = " git clone https : / / github . com / checkstyle / Orekit . git & & cd Orekit " <nl> - - CMD2 = " & & sed - i ' s / < orekit \ . checkstyle \ . version > 6 \ . 6 < / < orekit . checkstyle . version > 6 . 9 - SNAPSHOT < / ' pom . xml " <nl> + - CMD2 = " & & sed - i ' s / < orekit \ . checkstyle \ . version > 6 \ . 6 < / < orekit . checkstyle . version > 6 . 10 - SNAPSHOT < / ' pom . xml " <nl> - CMD3 = " & & cd . . & & mvn clean install - Passembly - DskipTests - DskipITs - Dcobertura . skip = true " <nl> - CMD4 = " - Dpmd . skip = true - Dfindbugs . skip = true - Dcheckstyle . ant . skip = true " <nl> - CMD5 = " & & cd Orekit & & mvn compile checkstyle : check "

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 index 3a24747 . . 308565a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 @ @ - 143 , 7 + 143 , 8 @ @ public class FinalParametersCheck extends AbstractCheck { 
 method . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 / / exit on fast lane if there is nothing to check here 
 
 - if ( method . branchContains ( TokenTypes . PARAMETER _ DEF ) 
 + if ( method . findFirstToken ( TokenTypes . PARAMETERS ) 
 + . findFirstToken ( TokenTypes . PARAMETER _ DEF ) ! = null 
 / / ignore abstract and native methods 
 & & modifiers . findFirstToken ( TokenTypes . ABSTRACT ) = = null 
 & & modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) = = null ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java 
 index 0efc580 . . 054bab9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java 
 @ @ - 160 , 8 + 160 , 8 @ @ public final class MissingOverrideCheck extends AbstractCheck { 
 if ( javaFiveCompatibility ) { 
 final DetailAST defOrNew = ast . getParent ( ) . getParent ( ) ; 
 
 - if ( defOrNew . branchContains ( TokenTypes . EXTENDS _ CLAUSE ) 
 - | | defOrNew . branchContains ( TokenTypes . IMPLEMENTS _ CLAUSE ) 
 + if ( defOrNew . findFirstToken ( TokenTypes . EXTENDS _ CLAUSE ) ! = null 
 + | | defOrNew . findFirstToken ( TokenTypes . IMPLEMENTS _ CLAUSE ) ! = null 
 | | defOrNew . getType ( ) = = TokenTypes . LITERAL _ NEW ) { 
 check = false ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 index a7ccf4c . . 955ec1e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 @ @ - 162 , 7 + 162 , 7 @ @ public class EqualsAvoidNullCheck extends AbstractCheck { 
 & & astType ! = TokenTypes . SLIST 
 & & astType ! = TokenTypes . LITERAL _ NEW 
 | | astType = = TokenTypes . LITERAL _ NEW 
 - & & ast . branchContains ( TokenTypes . LCURLY ) ) { 
 + & & ast . findFirstToken ( TokenTypes . OBJBLOCK ) ! = null ) { 
 currentFrame = currentFrame . getParent ( ) ; 
 } 
 else if ( astType = = TokenTypes . SLIST ) { 
 @ @ - 243 , 7 + 243 , 7 @ @ public class EqualsAvoidNullCheck extends AbstractCheck { 
 * @ param ast LITERAL _ NEW ast . 
 * / 
 private void processLiteralNew ( DetailAST ast ) { 
 - if ( ast . branchContains ( TokenTypes . LCURLY ) ) { 
 + if ( ast . findFirstToken ( TokenTypes . OBJBLOCK ) ! = null ) { 
 final FieldFrame frame = new FieldFrame ( currentFrame ) ; 
 currentFrame . addChild ( frame ) ; 
 currentFrame = frame ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 index c5f0820 . . 843ba13 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 @ @ - 120 , 7 + 120 , 7 @ @ public class EqualsHashCodeCheck 
 return CheckUtils . isEqualsMethod ( ast ) 
 & & modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null 
 & & isObjectParam ( parameters . getFirstChild ( ) ) 
 - & & ( ast . branchContains ( TokenTypes . SLIST ) 
 + & & ( ast . findFirstToken ( TokenTypes . SLIST ) ! = null 
 | | modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) ! = null ) ; 
 } 
 
 @ @ - 141 , 7 + 141 , 7 @ @ public class EqualsHashCodeCheck 
 & & modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null 
 & & modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null 
 & & parameters . getFirstChild ( ) = = null 
 - & & ( ast . branchContains ( TokenTypes . SLIST ) 
 + & & ( ast . findFirstToken ( TokenTypes . SLIST ) ! = null 
 | | modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) ! = null ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 index 7c96b21 . . bb17e95 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 @ @ - 203 , 7 + 203 , 8 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 break ; 
 case TokenTypes . PARAMETER _ DEF : 
 if ( ! isInLambda ( ast ) 
 - & & ! ast . branchContains ( TokenTypes . FINAL ) 
 + & & ast . findFirstToken ( TokenTypes . MODIFIERS ) 
 + . findFirstToken ( TokenTypes . FINAL ) = = null 
 & & ! isInAbstractOrNativeMethod ( ast ) 
 & & ! ScopeUtils . isInInterfaceBlock ( ast ) 
 & & ! isMultipleTypeCatch ( ast ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index abadbaf . . e9d34f1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 607 , 7 + 607 , 8 @ @ public class RequireThisCheck extends AbstractCheck { 
 else { 
 final DetailAST frameNameIdent = variableDeclarationFrame . getFrameNameIdent ( ) ; 
 final DetailAST definitionToken = frameNameIdent . getParent ( ) ; 
 - staticContext = definitionToken . branchContains ( TokenTypes . LITERAL _ STATIC ) ; 
 + staticContext = definitionToken . findFirstToken ( TokenTypes . MODIFIERS ) 
 + . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; 
 } 
 } 
 return ! staticContext ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfo . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfo . java 
 index c0bb9be . . 2d2c3a6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfo . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfo . java 
 @ @ - 138 , 7 + 138 , 8 @ @ public enum JavadocTagInfo { 
 final int astType = ast . getType ( ) ; 
 
 return astType = = TokenTypes . METHOD _ DEF 
 - & & ! ast . branchContains ( TokenTypes . LITERAL _ STATIC ) 
 + & & ast . findFirstToken ( TokenTypes . MODIFIERS ) 
 + . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null 
 & & ScopeUtils . getScopeFromMods ( ast 
 . findFirstToken ( TokenTypes . MODIFIERS ) ) ! = Scope . PRIVATE ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 index 0d7f2d8 . . cc8d1b6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 @ @ - 309 , 7 + 309 , 7 @ @ public class RedundantModifierCheck 
 checkForRedundantModifier ( ast , TokenTypes . FINAL ) ; 
 } 
 
 - if ( ! ast . branchContains ( TokenTypes . SLIST ) ) { 
 + if ( ast . findFirstToken ( TokenTypes . SLIST ) = = null ) { 
 processAbstractMethodParameters ( ast ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java 
 index 72c99c8 . . bb673e9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java 
 @ @ - 84 , 7 + 84 , 7 @ @ public final class AnnotationUtility { 
 throw new IllegalArgumentException ( THE _ AST _ IS _ NULL ) ; 
 } 
 final DetailAST holder = getAnnotationHolder ( ast ) ; 
 - return holder ! = null & & holder . branchContains ( TokenTypes . ANNOTATION ) ; 
 + return holder ! = null & & holder . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / . travis . yml b / . travis . yml 
 index 9dd13e5 . . 61ad8ed 100644 
 - - - a / . travis . yml 
 + + + b / . travis . yml 
 @ @ - 62 , 7 + 62 , 7 @ @ matrix : 
 env : 
 - DESC = " NoErrorTest - Orekit " 
 - CMD1 = " git clone https : / / github . com / checkstyle / Orekit . git & & cd Orekit " 
 - - CMD2 = " & & sed - i ' s / < orekit \ . checkstyle \ . version > 6 \ . 6 < / < orekit . checkstyle . version > 6 . 9 - SNAPSHOT < / ' pom . xml " 
 + - CMD2 = " & & sed - i ' s / < orekit \ . checkstyle \ . version > 6 \ . 6 < / < orekit . checkstyle . version > 6 . 10 - SNAPSHOT < / ' pom . xml " 
 - CMD3 = " & & cd . . & & mvn clean install - Passembly - DskipTests - DskipITs - Dcobertura . skip = true " 
 - CMD4 = " - Dpmd . skip = true - Dfindbugs . skip = true - Dcheckstyle . ant . skip = true " 
 - CMD5 = " & & cd Orekit & & mvn compile checkstyle : check "
