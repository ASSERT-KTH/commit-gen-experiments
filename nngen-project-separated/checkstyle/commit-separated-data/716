BLEU SCORE: 0.05439330544349821

TEST MSG: Issue # 4575 : Modified ClassDataAbstractionCouplingCheckTest . java and moved its input files to the classdataabstractioncoupling subdirectory
GENERATED MSG: Issue # 2161 : unify test input locations for regexp package

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> index f875832 . . b9d57f4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> @ @ - 41 , 7 + 41 , 8 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " metrics " + File . separator + filename ) ; <nl> + + " metrics " + File . separator + " classdataabstractioncoupling " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 58 , 7 + 59 , 7 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport <nl> " 27 : 1 : " + getCheckMessage ( MSG _ KEY , 2 , 0 , " [ HashMap , HashSet ] " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputClassDataAbstractionCoupling . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 76 , 7 + 77 , 8 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " InputClassCouplingExcludedPackagesDirectPackages . java " ) , expected ) ; <nl> + getPath ( " InputClassDataAbstractionCouplingExcludedPackagesDirectPackages . java " ) , <nl> + expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 94 , 7 + 96 , 8 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport <nl> " 18 : 1 : " + getCheckMessage ( MSG _ KEY , 1 , 0 , " [ CClass ] " ) , <nl> } ; <nl> verify ( checkConfig , <nl> - getPath ( " InputClassCouplingExcludedPackagesCommonPackage . java " ) , expected ) ; <nl> + getPath ( " InputClassDataAbstractionCouplingExcludedPackagesCommonPackage . java " ) , <nl> + expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 136 , 7 + 139 , 8 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport <nl> + " com . puppycrawl . tools . checkstyle . checks . metrics . inputs . c " ) ; <nl> <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputClassCouplingExcludedPackagesAllIgnored . java " ) , expected ) ; <nl> + verify ( checkConfig , <nl> + getPath ( " InputClassDataAbstractionCouplingExcludedPackagesAllIgnored . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 146 , 7 + 150 , 7 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport <nl> <nl> createChecker ( checkConfig ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputClassDataAbstractionCoupling . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 179 , 7 + 183 , 7 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport <nl> " 7 : 5 : " + getCheckMessage ( MSG _ KEY , 1 , 0 , " [ ArrayList ] " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputClassDataAbstractionCoupling . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 197 , 6 + 201 , 6 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport <nl> " 27 : 1 : " + getCheckMessage ( MSG _ KEY , 2 , 0 , " [ HashMap , HashSet ] " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputClassDataAbstractionCoupling . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputClassCouplingExcludedPackagesAllIgnored . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputClassCouplingExcludedPackagesAllIgnored . java <nl> deleted file mode 100644 <nl> index c260aac . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputClassCouplingExcludedPackagesAllIgnored . java <nl> + + + / dev / null <nl> @ @ - 1 , 21 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . aa . AAClass ; <nl> - import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ab . ABClass ; <nl> - import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . b . BClass ; <nl> - import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . c . CClass ; <nl> - <nl> - public class InputClassCouplingExcludedPackagesAllIgnored { / / total : ok <nl> - public AAClass aa = new AAClass ( ) ; / / ok <nl> - public ABClass ab = new ABClass ( ) ; / / ok <nl> - <nl> - class Inner { / / total : ok <nl> - public BClass b = new BClass ( ) ; / / ok <nl> - public CClass c = new CClass ( ) ; / / ok <nl> - } <nl> - } <nl> - <nl> - class InputClassCouplingExcludedPackagesAllIgnoredHidden { / / total : ok <nl> - public CClass c = new CClass ( ) ; / / ok <nl> - } <nl> - <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCoupling . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCoupling . java <nl> new file mode 100644 <nl> index 0000000 . . f0521ed <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCoupling . java <nl> @ @ - 0 , 0 + 1 , 43 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics . classdataabstractioncoupling ; <nl> + <nl> + import javax . naming . NamingException ; <nl> + import java . util . * ; <nl> + <nl> + public class InputClassDataAbstractionCoupling { <nl> + private class InnerClass { / / singleline comment <nl> + public List _ list = new ArrayList ( ) ; <nl> + } <nl> + <nl> + private class AnotherInnerClass { <nl> + public String _ string = " " ; <nl> + } <nl> + <nl> + public Set _ set = / * block comment * / new HashSet ( ) ; <nl> + public Map _ map = new HashMap ( ) ; <nl> + public String _ string = " " ; <nl> + public int [ ] _ intArray = new int [ 0 ] ; <nl> + public InnerClass _ innerClass = new InnerClass ( ) ; <nl> + public AnotherInnerClass _ anotherInnerClass = new AnotherInnerClass ( ) ; <nl> + <nl> + public void foo ( ) throws NamingException { <nl> + } <nl> + <nl> + } <nl> + <nl> + enum InnerEnum { <nl> + VALUE1 ; <nl> + <nl> + private InnerEnum ( ) <nl> + { <nl> + map2 = new HashMap ( ) ; <nl> + } <nl> + private Set map1 = new HashSet ( ) ; <nl> + private Map map2 ; <nl> + } <nl> + <nl> + class InputThrows { <nl> + <nl> + public void get ( ) throws NamingException , IllegalArgumentException { <nl> + new java . lang . ref . ReferenceQueue < Integer > ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesAllIgnored . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesAllIgnored . java <nl> new file mode 100644 <nl> index 0000000 . . 3221c31 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesAllIgnored . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics . classdataabstractioncoupling ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . aa . AAClass ; <nl> + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ab . ABClass ; <nl> + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . b . BClass ; <nl> + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . c . CClass ; <nl> + <nl> + public class InputClassDataAbstractionCouplingExcludedPackagesAllIgnored { / / total : ok <nl> + public AAClass aa = new AAClass ( ) ; / / ok <nl> + public ABClass ab = new ABClass ( ) ; / / ok <nl> + <nl> + class Inner { / / total : ok <nl> + public BClass b = new BClass ( ) ; / / ok <nl> + public CClass c = new CClass ( ) ; / / ok <nl> + } <nl> + } <nl> + <nl> + class InputClassDataAbstractionCouplingExcludedPackagesAllIgnoredHidden { / / total : ok <nl> + public CClass c = new CClass ( ) ; / / ok <nl> + } <nl> + <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesCommonPackage . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesCommonPackage . java <nl> new file mode 100644 <nl> index 0000000 . . cfed1a6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesCommonPackage . java <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics . classdataabstractioncoupling ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . aa . AAClass ; <nl> + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ab . ABClass ; <nl> + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . b . BClass ; <nl> + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . c . CClass ; <nl> + <nl> + public class InputClassDataAbstractionCouplingExcludedPackagesCommonPackage { / / total : ok <nl> + public AAClass aa = new AAClass ( ) ; / / ok <nl> + public ABClass ab = new ABClass ( ) ; / / ok <nl> + <nl> + class Inner { / / total : 2 violations <nl> + public BClass b = new BClass ( ) ; / / violation <nl> + public CClass c = new CClass ( ) ; / / violation <nl> + } <nl> + } <nl> + <nl> + class InputClassDataAbstractionCouplingExcludedPackagesCommonPackageHidden { / / total : 1 violation <nl> + public CClass c = new CClass ( ) ; / / violation <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesDirectPackages . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesDirectPackages . java <nl> new file mode 100644 <nl> index 0000000 . . 4fc3ca7 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesDirectPackages . java <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics . classdataabstractioncoupling ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . aa . AAClass ; <nl> + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ab . ABClass ; <nl> + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . b . BClass ; <nl> + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . c . CClass ; <nl> + <nl> + public class InputClassDataAbstractionCouplingExcludedPackagesDirectPackages { / / total : 2 violations <nl> + public AAClass aa = new AAClass ( ) ; / / violation <nl> + public ABClass ab = new ABClass ( ) ; / / violation <nl> + <nl> + class Inner { / / total : ok <nl> + public BClass b = new BClass ( ) ; / / ok <nl> + public CClass c = new CClass ( ) ; / / ok <nl> + } <nl> + } <nl> + <nl> + class InputClassDataAbstractionCouplingExcludedPackagesDirectPackagesHidden { / / total : ok <nl> + public CClass c = new CClass ( ) ; / / ok <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java <nl> index eff8000 . . 18f41dc 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalCatchCheck . MSG _ KEY ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 30 , 6 + 31 , 12 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class IllegalCatchCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testDefault ( ) throws Exception { <nl> DefaultConfiguration checkConfig = createCheckConfig ( IllegalCatchCheck . class ) ; <nl> @ @ - 43 , 7 + 50 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { <nl> " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Throwable " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalCatchCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 59 , 7 + 66 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { <nl> " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Throwable " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalCatchCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 73 , 7 + 80 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { <nl> " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " RuntimeException " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck2 . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalCatchCheck2 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 976d795 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputIllegalCatchCheck { <nl> + public void foo ( ) { <nl> + try { / / class names <nl> + } catch ( RuntimeException e ) { <nl> + } catch ( Exception e ) { <nl> + } catch ( Throwable e ) { <nl> + } <nl> + } <nl> + <nl> + public void bar ( ) { <nl> + try { / * fully qualified class names * / <nl> + } catch ( java . lang . RuntimeException e ) { <nl> + } catch ( java . lang . Exception e ) { <nl> + } catch ( java . lang . Throwable e ) { <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java <nl> new file mode 100644 <nl> index 0000000 . . 1fe6b5f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputIllegalCatchCheck2 { <nl> + public void foo ( ) throws OneMoreException { <nl> + try { <nl> + 	 foo1 ( ) ; <nl> + } catch ( RuntimeException | SQLException e ) { } <nl> + try { <nl> + 	 foo1 ( ) ; <nl> + } catch ( RuntimeException | SQLException | OneMoreException e ) { } <nl> + try { <nl> + 	 foo1 ( ) ; <nl> + } catch ( OneMoreException | RuntimeException | SQLException e ) { } <nl> + try { <nl> + 	 foo1 ( ) ; <nl> + } catch ( OneMoreException | SQLException | RuntimeException e ) { } <nl> + <nl> + } <nl> + <nl> + private void foo1 ( ) throws RuntimeException , SQLException , OneMoreException { <nl> + <nl> + } <nl> + <nl> + private class SQLException extends Exception { <nl> + <nl> + } <nl> + <nl> + private class OneMoreException extends Exception { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java <nl> deleted file mode 100644 <nl> index bc00bcd . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 19 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - public class InputIllegalCatchCheck { <nl> - public void foo ( ) { <nl> - try { / / class names <nl> - } catch ( RuntimeException e ) { <nl> - } catch ( Exception e ) { <nl> - } catch ( Throwable e ) { <nl> - } <nl> - } <nl> - <nl> - public void bar ( ) { <nl> - try { / * fully qualified class names * / <nl> - } catch ( java . lang . RuntimeException e ) { <nl> - } catch ( java . lang . Exception e ) { <nl> - } catch ( java . lang . Throwable e ) { <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java <nl> deleted file mode 100644 <nl> index 66ddc24 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - public class InputIllegalCatchCheck2 { <nl> - public void foo ( ) throws OneMoreException { <nl> - try { <nl> - 	 foo1 ( ) ; <nl> - } catch ( RuntimeException | SQLException e ) { } <nl> - try { <nl> - 	 foo1 ( ) ; <nl> - } catch ( RuntimeException | SQLException | OneMoreException e ) { } <nl> - try { <nl> - 	 foo1 ( ) ; <nl> - } catch ( OneMoreException | RuntimeException | SQLException e ) { } <nl> - try { <nl> - 	 foo1 ( ) ; <nl> - } catch ( OneMoreException | SQLException | RuntimeException e ) { } <nl> - <nl> - } <nl> - <nl> - private void foo1 ( ) throws RuntimeException , SQLException , OneMoreException { <nl> - <nl> - } <nl> - <nl> - private class SQLException extends Exception { <nl> - <nl> - } <nl> - <nl> - private class OneMoreException extends Exception { <nl> - <nl> - } <nl> - }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 index f875832 . . b9d57f4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 @ @ - 41 , 7 + 41 , 8 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " metrics " + File . separator + filename ) ; 
 + + " metrics " + File . separator + " classdataabstractioncoupling " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 58 , 7 + 59 , 7 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport 
 " 27 : 1 : " + getCheckMessage ( MSG _ KEY , 2 , 0 , " [ HashMap , HashSet ] " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputClassDataAbstractionCoupling . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 76 , 7 + 77 , 8 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " InputClassCouplingExcludedPackagesDirectPackages . java " ) , expected ) ; 
 + getPath ( " InputClassDataAbstractionCouplingExcludedPackagesDirectPackages . java " ) , 
 + expected ) ; 
 } 
 
 @ Test 
 @ @ - 94 , 7 + 96 , 8 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport 
 " 18 : 1 : " + getCheckMessage ( MSG _ KEY , 1 , 0 , " [ CClass ] " ) , 
 } ; 
 verify ( checkConfig , 
 - getPath ( " InputClassCouplingExcludedPackagesCommonPackage . java " ) , expected ) ; 
 + getPath ( " InputClassDataAbstractionCouplingExcludedPackagesCommonPackage . java " ) , 
 + expected ) ; 
 } 
 
 @ Test 
 @ @ - 136 , 7 + 139 , 8 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport 
 + " com . puppycrawl . tools . checkstyle . checks . metrics . inputs . c " ) ; 
 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputClassCouplingExcludedPackagesAllIgnored . java " ) , expected ) ; 
 + verify ( checkConfig , 
 + getPath ( " InputClassDataAbstractionCouplingExcludedPackagesAllIgnored . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 146 , 7 + 150 , 7 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport 
 
 createChecker ( checkConfig ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputClassDataAbstractionCoupling . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 179 , 7 + 183 , 7 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport 
 " 7 : 5 : " + getCheckMessage ( MSG _ KEY , 1 , 0 , " [ ArrayList ] " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputClassDataAbstractionCoupling . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 197 , 6 + 201 , 6 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport 
 " 27 : 1 : " + getCheckMessage ( MSG _ KEY , 2 , 0 , " [ HashMap , HashSet ] " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputClassDataAbstractionCoupling . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputClassCouplingExcludedPackagesAllIgnored . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputClassCouplingExcludedPackagesAllIgnored . java 
 deleted file mode 100644 
 index c260aac . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputClassCouplingExcludedPackagesAllIgnored . java 
 + + + / dev / null 
 @ @ - 1 , 21 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . aa . AAClass ; 
 - import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ab . ABClass ; 
 - import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . b . BClass ; 
 - import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . c . CClass ; 
 - 
 - public class InputClassCouplingExcludedPackagesAllIgnored { / / total : ok 
 - public AAClass aa = new AAClass ( ) ; / / ok 
 - public ABClass ab = new ABClass ( ) ; / / ok 
 - 
 - class Inner { / / total : ok 
 - public BClass b = new BClass ( ) ; / / ok 
 - public CClass c = new CClass ( ) ; / / ok 
 - } 
 - } 
 - 
 - class InputClassCouplingExcludedPackagesAllIgnoredHidden { / / total : ok 
 - public CClass c = new CClass ( ) ; / / ok 
 - } 
 - 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCoupling . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCoupling . java 
 new file mode 100644 
 index 0000000 . . f0521ed 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCoupling . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics . classdataabstractioncoupling ; 
 + 
 + import javax . naming . NamingException ; 
 + import java . util . * ; 
 + 
 + public class InputClassDataAbstractionCoupling { 
 + private class InnerClass { / / singleline comment 
 + public List _ list = new ArrayList ( ) ; 
 + } 
 + 
 + private class AnotherInnerClass { 
 + public String _ string = " " ; 
 + } 
 + 
 + public Set _ set = / * block comment * / new HashSet ( ) ; 
 + public Map _ map = new HashMap ( ) ; 
 + public String _ string = " " ; 
 + public int [ ] _ intArray = new int [ 0 ] ; 
 + public InnerClass _ innerClass = new InnerClass ( ) ; 
 + public AnotherInnerClass _ anotherInnerClass = new AnotherInnerClass ( ) ; 
 + 
 + public void foo ( ) throws NamingException { 
 + } 
 + 
 + } 
 + 
 + enum InnerEnum { 
 + VALUE1 ; 
 + 
 + private InnerEnum ( ) 
 + { 
 + map2 = new HashMap ( ) ; 
 + } 
 + private Set map1 = new HashSet ( ) ; 
 + private Map map2 ; 
 + } 
 + 
 + class InputThrows { 
 + 
 + public void get ( ) throws NamingException , IllegalArgumentException { 
 + new java . lang . ref . ReferenceQueue < Integer > ( ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesAllIgnored . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesAllIgnored . java 
 new file mode 100644 
 index 0000000 . . 3221c31 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesAllIgnored . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics . classdataabstractioncoupling ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . aa . AAClass ; 
 + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ab . ABClass ; 
 + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . b . BClass ; 
 + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . c . CClass ; 
 + 
 + public class InputClassDataAbstractionCouplingExcludedPackagesAllIgnored { / / total : ok 
 + public AAClass aa = new AAClass ( ) ; / / ok 
 + public ABClass ab = new ABClass ( ) ; / / ok 
 + 
 + class Inner { / / total : ok 
 + public BClass b = new BClass ( ) ; / / ok 
 + public CClass c = new CClass ( ) ; / / ok 
 + } 
 + } 
 + 
 + class InputClassDataAbstractionCouplingExcludedPackagesAllIgnoredHidden { / / total : ok 
 + public CClass c = new CClass ( ) ; / / ok 
 + } 
 + 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesCommonPackage . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesCommonPackage . java 
 new file mode 100644 
 index 0000000 . . cfed1a6 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesCommonPackage . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics . classdataabstractioncoupling ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . aa . AAClass ; 
 + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ab . ABClass ; 
 + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . b . BClass ; 
 + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . c . CClass ; 
 + 
 + public class InputClassDataAbstractionCouplingExcludedPackagesCommonPackage { / / total : ok 
 + public AAClass aa = new AAClass ( ) ; / / ok 
 + public ABClass ab = new ABClass ( ) ; / / ok 
 + 
 + class Inner { / / total : 2 violations 
 + public BClass b = new BClass ( ) ; / / violation 
 + public CClass c = new CClass ( ) ; / / violation 
 + } 
 + } 
 + 
 + class InputClassDataAbstractionCouplingExcludedPackagesCommonPackageHidden { / / total : 1 violation 
 + public CClass c = new CClass ( ) ; / / violation 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesDirectPackages . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesDirectPackages . java 
 new file mode 100644 
 index 0000000 . . 4fc3ca7 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / classdataabstractioncoupling / InputClassDataAbstractionCouplingExcludedPackagesDirectPackages . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics . classdataabstractioncoupling ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . aa . AAClass ; 
 + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ab . ABClass ; 
 + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . b . BClass ; 
 + import com . puppycrawl . tools . checkstyle . checks . metrics . inputs . c . CClass ; 
 + 
 + public class InputClassDataAbstractionCouplingExcludedPackagesDirectPackages { / / total : 2 violations 
 + public AAClass aa = new AAClass ( ) ; / / violation 
 + public ABClass ab = new ABClass ( ) ; / / violation 
 + 
 + class Inner { / / total : ok 
 + public BClass b = new BClass ( ) ; / / ok 
 + public CClass c = new CClass ( ) ; / / ok 
 + } 
 + } 
 + 
 + class InputClassDataAbstractionCouplingExcludedPackagesDirectPackagesHidden { / / total : ok 
 + public CClass c = new CClass ( ) ; / / ok 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java 
 index eff8000 . . 18f41dc 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalCatchCheck . MSG _ KEY ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 30 , 6 + 31 , 12 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class IllegalCatchCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testDefault ( ) throws Exception { 
 DefaultConfiguration checkConfig = createCheckConfig ( IllegalCatchCheck . class ) ; 
 @ @ - 43 , 7 + 50 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { 
 " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Throwable " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalCatchCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 59 , 7 + 66 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { 
 " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Throwable " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalCatchCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 73 , 7 + 80 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { 
 " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " RuntimeException " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck2 . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalCatchCheck2 . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java 
 new file mode 100644 
 index 0000000 . . 976d795 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputIllegalCatchCheck { 
 + public void foo ( ) { 
 + try { / / class names 
 + } catch ( RuntimeException e ) { 
 + } catch ( Exception e ) { 
 + } catch ( Throwable e ) { 
 + } 
 + } 
 + 
 + public void bar ( ) { 
 + try { / * fully qualified class names * / 
 + } catch ( java . lang . RuntimeException e ) { 
 + } catch ( java . lang . Exception e ) { 
 + } catch ( java . lang . Throwable e ) { 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java 
 new file mode 100644 
 index 0000000 . . 1fe6b5f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputIllegalCatchCheck2 { 
 + public void foo ( ) throws OneMoreException { 
 + try { 
 + 	 foo1 ( ) ; 
 + } catch ( RuntimeException | SQLException e ) { } 
 + try { 
 + 	 foo1 ( ) ; 
 + } catch ( RuntimeException | SQLException | OneMoreException e ) { } 
 + try { 
 + 	 foo1 ( ) ; 
 + } catch ( OneMoreException | RuntimeException | SQLException e ) { } 
 + try { 
 + 	 foo1 ( ) ; 
 + } catch ( OneMoreException | SQLException | RuntimeException e ) { } 
 + 
 + } 
 + 
 + private void foo1 ( ) throws RuntimeException , SQLException , OneMoreException { 
 + 
 + } 
 + 
 + private class SQLException extends Exception { 
 + 
 + } 
 + 
 + private class OneMoreException extends Exception { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java 
 deleted file mode 100644 
 index bc00bcd . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java 
 + + + / dev / null 
 @ @ - 1 , 19 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - public class InputIllegalCatchCheck { 
 - public void foo ( ) { 
 - try { / / class names 
 - } catch ( RuntimeException e ) { 
 - } catch ( Exception e ) { 
 - } catch ( Throwable e ) { 
 - } 
 - } 
 - 
 - public void bar ( ) { 
 - try { / * fully qualified class names * / 
 - } catch ( java . lang . RuntimeException e ) { 
 - } catch ( java . lang . Exception e ) { 
 - } catch ( java . lang . Throwable e ) { 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java 
 deleted file mode 100644 
 index 66ddc24 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java 
 + + + / dev / null 
 @ @ - 1 , 31 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - public class InputIllegalCatchCheck2 { 
 - public void foo ( ) throws OneMoreException { 
 - try { 
 - 	 foo1 ( ) ; 
 - } catch ( RuntimeException | SQLException e ) { } 
 - try { 
 - 	 foo1 ( ) ; 
 - } catch ( RuntimeException | SQLException | OneMoreException e ) { } 
 - try { 
 - 	 foo1 ( ) ; 
 - } catch ( OneMoreException | RuntimeException | SQLException e ) { } 
 - try { 
 - 	 foo1 ( ) ; 
 - } catch ( OneMoreException | SQLException | RuntimeException e ) { } 
 - 
 - } 
 - 
 - private void foo1 ( ) throws RuntimeException , SQLException , OneMoreException { 
 - 
 - } 
 - 
 - private class SQLException extends Exception { 
 - 
 - } 
 - 
 - private class OneMoreException extends Exception { 
 - 
 - } 
 - }
