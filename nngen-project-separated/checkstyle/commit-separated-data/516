BLEU SCORE: 0.07393439482604361

TEST MSG: Issue # 4785 : Method createBlockCommentNode was created in CommonUtils
GENERATED MSG: Issue # 408 : Update Checkstyle GUI in order to display Javadoc tokens

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java <nl> index b1bc7d9 . . 93df3f8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; <nl> <nl> / * * <nl> @ @ - 42 , 9 + 42 , 6 @ @ public final class DetailNodeTreeStringPrinter { <nl> / * * OS specific line separator . * / <nl> private static final String LINE _ SEPARATOR = System . getProperty ( " line . separator " ) ; <nl> <nl> - / * * Symbols with which javadoc starts . * / <nl> - private static final String JAVADOC _ START = " / * * " ; <nl> - <nl> / * * Prevent instances . * / <nl> private DetailNodeTreeStringPrinter ( ) { <nl> / / no code <nl> @ @ - 80 , 7 + 77 , 7 @ @ public final class DetailNodeTreeStringPrinter { <nl> * @ return tree <nl> * / <nl> private static DetailNode parseJavadocAsDetailNode ( String javadocComment ) { <nl> - final DetailAST blockComment = createFakeBlockComment ( javadocComment ) ; <nl> + final DetailAST blockComment = CommonUtils . createBlockCommentNode ( javadocComment ) ; <nl> return parseJavadocAsDetailNode ( blockComment ) ; <nl> } <nl> <nl> @ @ - 174 , 33 + 171 , 4 @ @ public final class DetailNodeTreeStringPrinter { <nl> return parseJavadocAsDetailNode ( text . getFullText ( ) . toString ( ) ) ; <nl> } <nl> <nl> - / * * <nl> - * Creates DetailAST block comment to pass it to the Javadoc parser . <nl> - * @ param content comment content . <nl> - * @ return DetailAST block comment <nl> - * / <nl> - private static DetailAST createFakeBlockComment ( String content ) { <nl> - final DetailAST blockCommentBegin = new DetailAST ( ) ; <nl> - blockCommentBegin . setType ( TokenTypes . BLOCK _ COMMENT _ BEGIN ) ; <nl> - blockCommentBegin . setText ( " / * " ) ; <nl> - blockCommentBegin . setLineNo ( 0 ) ; <nl> - blockCommentBegin . setColumnNo ( - JAVADOC _ START . length ( ) ) ; <nl> - <nl> - final DetailAST commentContent = new DetailAST ( ) ; <nl> - commentContent . setType ( TokenTypes . COMMENT _ CONTENT ) ; <nl> - commentContent . setText ( " * " + content ) ; <nl> - commentContent . setLineNo ( 0 ) ; <nl> - / / javadoc should starts at 0 column , so COMMENT _ CONTENT node <nl> - / / that contains javadoc identificator has - 1 column <nl> - commentContent . setColumnNo ( - 1 ) ; <nl> - <nl> - final DetailAST blockCommentEnd = new DetailAST ( ) ; <nl> - blockCommentEnd . setType ( TokenTypes . BLOCK _ COMMENT _ END ) ; <nl> - blockCommentEnd . setText ( " * / " ) ; <nl> - <nl> - blockCommentBegin . setFirstChild ( commentContent ) ; <nl> - commentContent . setNextSibling ( blockCommentEnd ) ; <nl> - return blockCommentBegin ; <nl> - } <nl> - <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index 8ad0762 . . 8c73b21 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 22 , 12 + 22 , 10 @ @ package com . puppycrawl . tools . checkstyle ; <nl> import java . io . File ; <nl> import java . io . Reader ; <nl> import java . io . StringReader ; <nl> - import java . util . AbstractMap . SimpleEntry ; <nl> import java . util . Arrays ; <nl> import java . util . Collection ; <nl> import java . util . HashSet ; <nl> import java . util . Locale ; <nl> - import java . util . Map . Entry ; <nl> import java . util . Set ; <nl> import java . util . SortedSet ; <nl> import java . util . TreeSet ; <nl> @ @ - 681 , 7 + 679 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> commentAst = createSlCommentNode ( token ) ; <nl> } <nl> else { <nl> - commentAst = createBlockCommentNode ( token ) ; <nl> + commentAst = CommonUtils . createBlockCommentNode ( token ) ; <nl> } <nl> return commentAst ; <nl> } <nl> @ @ - 715 , 83 + 713 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> } <nl> <nl> / * * <nl> - * Create block comment from token . <nl> - * @ param token <nl> - * Token object . <nl> - * @ return DetailAST with BLOCK _ COMMENT type . <nl> - * / <nl> - private static DetailAST createBlockCommentNode ( Token token ) { <nl> - final DetailAST blockComment = new DetailAST ( ) ; <nl> - blockComment . initialize ( TokenTypes . BLOCK _ COMMENT _ BEGIN , " / * " ) ; <nl> - <nl> - / / column counting begins from 0 <nl> - blockComment . setColumnNo ( token . getColumn ( ) - 1 ) ; <nl> - blockComment . setLineNo ( token . getLine ( ) ) ; <nl> - <nl> - final DetailAST blockCommentContent = new DetailAST ( ) ; <nl> - blockCommentContent . setType ( TokenTypes . COMMENT _ CONTENT ) ; <nl> - <nl> - / / column counting begins from 0 <nl> - / / plus length of ' / * ' <nl> - blockCommentContent . setColumnNo ( token . getColumn ( ) - 1 + 2 ) ; <nl> - blockCommentContent . setLineNo ( token . getLine ( ) ) ; <nl> - blockCommentContent . setText ( token . getText ( ) ) ; <nl> - <nl> - final DetailAST blockCommentClose = new DetailAST ( ) ; <nl> - blockCommentClose . initialize ( TokenTypes . BLOCK _ COMMENT _ END , " * / " ) ; <nl> - <nl> - final Entry < Integer , Integer > linesColumns = countLinesColumns ( <nl> - token . getText ( ) , token . getLine ( ) , token . getColumn ( ) ) ; <nl> - blockCommentClose . setLineNo ( linesColumns . getKey ( ) ) ; <nl> - blockCommentClose . setColumnNo ( linesColumns . getValue ( ) ) ; <nl> - <nl> - blockComment . addChild ( blockCommentContent ) ; <nl> - blockComment . addChild ( blockCommentClose ) ; <nl> - return blockComment ; <nl> - } <nl> - <nl> - / * * <nl> - * Count lines and columns ( in last line ) in text . <nl> - * @ param text <nl> - * String . <nl> - * @ param initialLinesCnt <nl> - * initial value of lines counter . <nl> - * @ param initialColumnsCnt <nl> - * initial value of columns counter . <nl> - * @ return entry ( pair ) , first element is lines counter , second - columns <nl> - * counter . <nl> - * / <nl> - private static Entry < Integer , Integer > countLinesColumns ( <nl> - String text , int initialLinesCnt , int initialColumnsCnt ) { <nl> - int lines = initialLinesCnt ; <nl> - int columns = initialColumnsCnt ; <nl> - boolean foundCr = false ; <nl> - for ( char c : text . toCharArray ( ) ) { <nl> - if ( c = = ' \ n ' ) { <nl> - foundCr = false ; <nl> - lines + + ; <nl> - columns = 0 ; <nl> - } <nl> - else { <nl> - if ( foundCr ) { <nl> - foundCr = false ; <nl> - lines + + ; <nl> - columns = 0 ; <nl> - } <nl> - if ( c = = ' \ r ' ) { <nl> - foundCr = true ; <nl> - } <nl> - columns + + ; <nl> - } <nl> - } <nl> - if ( foundCr ) { <nl> - lines + + ; <nl> - columns = 0 ; <nl> - } <nl> - return new SimpleEntry < > ( lines , columns ) ; <nl> - } <nl> - <nl> - / * * <nl> * State of AST . <nl> * Indicates whether tree contains certain nodes . <nl> * / <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> index 588a2a1 . . 14b3e03 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> @ @ - 30 , 13 + 30 , 18 @ @ import java . net . URISyntaxException ; <nl> import java . net . URL ; <nl> import java . nio . file . Path ; <nl> import java . nio . file . Paths ; <nl> + import java . util . AbstractMap ; <nl> + import java . util . Map ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> import java . util . regex . PatternSyntaxException ; <nl> <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> + import antlr . Token ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> * Contains utility methods . <nl> @ @ - 61 , 6 + 66 , 13 @ @ public final class CommonUtils { <nl> / * * Prefix for the exception when unable to find resource . * / <nl> private static final String UNABLE _ TO _ FIND _ EXCEPTION _ PREFIX = " Unable to find : " ; <nl> <nl> + / * * Symbols with which javadoc starts . * / <nl> + private static final String JAVADOC _ START = " / * * " ; <nl> + / * * Symbols with which multiple comment starts . * / <nl> + private static final String BLOCK _ MULTIPLE _ COMMENT _ BEGIN = " / * " ; <nl> + / * * Symbols with which multiple comment ends . * / <nl> + private static final String BLOCK _ MULTIPLE _ COMMENT _ END = " * / " ; <nl> + <nl> / * * Stop instances being created . * * / <nl> private CommonUtils ( ) { <nl> <nl> @ @ - 101 , 6 + 113 , 112 @ @ public final class CommonUtils { <nl> } <nl> <nl> / * * <nl> + * Create block comment from string content . <nl> + * @ param content comment content . <nl> + * @ return DetailAST block comment <nl> + * / <nl> + public static DetailAST createBlockCommentNode ( String content ) { <nl> + final DetailAST blockCommentBegin = new DetailAST ( ) ; <nl> + blockCommentBegin . setType ( TokenTypes . BLOCK _ COMMENT _ BEGIN ) ; <nl> + blockCommentBegin . setText ( BLOCK _ MULTIPLE _ COMMENT _ BEGIN ) ; <nl> + blockCommentBegin . setLineNo ( 0 ) ; <nl> + blockCommentBegin . setColumnNo ( - JAVADOC _ START . length ( ) ) ; <nl> + <nl> + final DetailAST commentContent = new DetailAST ( ) ; <nl> + commentContent . setType ( TokenTypes . COMMENT _ CONTENT ) ; <nl> + commentContent . setText ( " * " + content ) ; <nl> + commentContent . setLineNo ( 0 ) ; <nl> + / / javadoc should starts at 0 column , so COMMENT _ CONTENT node <nl> + / / that contains javadoc identificator has - 1 column <nl> + commentContent . setColumnNo ( - 1 ) ; <nl> + <nl> + final DetailAST blockCommentEnd = new DetailAST ( ) ; <nl> + blockCommentEnd . setType ( TokenTypes . BLOCK _ COMMENT _ END ) ; <nl> + blockCommentEnd . setText ( BLOCK _ MULTIPLE _ COMMENT _ END ) ; <nl> + <nl> + blockCommentBegin . setFirstChild ( commentContent ) ; <nl> + commentContent . setNextSibling ( blockCommentEnd ) ; <nl> + return blockCommentBegin ; <nl> + } <nl> + <nl> + / * * <nl> + * Create block comment from token . <nl> + * @ param token <nl> + * Token object . <nl> + * @ return DetailAST with BLOCK _ COMMENT type . <nl> + * / <nl> + public static DetailAST createBlockCommentNode ( Token token ) { <nl> + final DetailAST blockComment = new DetailAST ( ) ; <nl> + blockComment . initialize ( TokenTypes . BLOCK _ COMMENT _ BEGIN , BLOCK _ MULTIPLE _ COMMENT _ BEGIN ) ; <nl> + <nl> + / / column counting begins from 0 <nl> + blockComment . setColumnNo ( token . getColumn ( ) - 1 ) ; <nl> + blockComment . setLineNo ( token . getLine ( ) ) ; <nl> + <nl> + final DetailAST blockCommentContent = new DetailAST ( ) ; <nl> + blockCommentContent . setType ( TokenTypes . COMMENT _ CONTENT ) ; <nl> + <nl> + / / column counting begins from 0 <nl> + / / plus length of ' / * ' <nl> + blockCommentContent . setColumnNo ( token . getColumn ( ) - 1 + 2 ) ; <nl> + blockCommentContent . setLineNo ( token . getLine ( ) ) ; <nl> + blockCommentContent . setText ( token . getText ( ) ) ; <nl> + <nl> + final DetailAST blockCommentClose = new DetailAST ( ) ; <nl> + blockCommentClose . initialize ( TokenTypes . BLOCK _ COMMENT _ END , BLOCK _ MULTIPLE _ COMMENT _ END ) ; <nl> + <nl> + final Map . Entry < Integer , Integer > linesColumns = countLinesColumns ( <nl> + token . getText ( ) , token . getLine ( ) , token . getColumn ( ) ) ; <nl> + blockCommentClose . setLineNo ( linesColumns . getKey ( ) ) ; <nl> + blockCommentClose . setColumnNo ( linesColumns . getValue ( ) ) ; <nl> + <nl> + blockComment . addChild ( blockCommentContent ) ; <nl> + blockComment . addChild ( blockCommentClose ) ; <nl> + return blockComment ; <nl> + } <nl> + <nl> + / * * <nl> + * Count lines and columns ( in last line ) in text . <nl> + * @ param text <nl> + * String . <nl> + * @ param initialLinesCnt <nl> + * initial value of lines counter . <nl> + * @ param initialColumnsCnt <nl> + * initial value of columns counter . <nl> + * @ return entry ( pair ) , first element is lines counter , second - columns <nl> + * counter . <nl> + * / <nl> + private static Map . Entry < Integer , Integer > countLinesColumns ( <nl> + String text , int initialLinesCnt , int initialColumnsCnt ) { <nl> + int lines = initialLinesCnt ; <nl> + int columns = initialColumnsCnt ; <nl> + boolean foundCr = false ; <nl> + for ( char c : text . toCharArray ( ) ) { <nl> + if ( c = = ' \ n ' ) { <nl> + foundCr = false ; <nl> + lines + + ; <nl> + columns = 0 ; <nl> + } <nl> + else { <nl> + if ( foundCr ) { <nl> + foundCr = false ; <nl> + lines + + ; <nl> + columns = 0 ; <nl> + } <nl> + if ( c = = ' \ r ' ) { <nl> + foundCr = true ; <nl> + } <nl> + columns + + ; <nl> + } <nl> + } <nl> + if ( foundCr ) { <nl> + lines + + ; <nl> + columns = 0 ; <nl> + } <nl> + return new AbstractMap . SimpleEntry < > ( lines , columns ) ; <nl> + } <nl> + <nl> + / * * <nl> * Returns whether the file extension matches what we are meant to process . <nl> * <nl> * @ param file <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java <nl> index c4fa524 . . 9c50429 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java <nl> @ @ - 34 , 9 + 34 , 7 @ @ import org . junit . Assert ; <nl> import org . junit . Test ; <nl> import org . powermock . reflect . Whitebox ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class DetailNodeTreeStringPrinterTest extends AbstractTreeTestSupport { <nl> <nl> @ @ - 79 , 31 + 77 , 6 @ @ public class DetailNodeTreeStringPrinterTest extends AbstractTreeTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testCreationOfFakeCommentBlock ( ) throws Exception { <nl> - final Method createFakeBlockComment = <nl> - Whitebox . getMethod ( DetailNodeTreeStringPrinter . class , <nl> - " createFakeBlockComment " , String . class ) ; <nl> - <nl> - final DetailAST testCommentBlock = <nl> - ( DetailAST ) createFakeBlockComment . invoke ( null , " test _ comment " ) ; <nl> - assertEquals ( " Invalid token type " , <nl> - TokenTypes . BLOCK _ COMMENT _ BEGIN , testCommentBlock . getType ( ) ) ; <nl> - assertEquals ( " Invalid text " , " / * " , testCommentBlock . getText ( ) ) ; <nl> - assertEquals ( " Invalid line number " , 0 , testCommentBlock . getLineNo ( ) ) ; <nl> - <nl> - final DetailAST contentCommentBlock = testCommentBlock . getFirstChild ( ) ; <nl> - assertEquals ( " Invalid tiken type " , <nl> - TokenTypes . COMMENT _ CONTENT , contentCommentBlock . getType ( ) ) ; <nl> - assertEquals ( " Invalid text " , " * test _ comment " , contentCommentBlock . getText ( ) ) ; <nl> - assertEquals ( " Invalid line number " , 0 , contentCommentBlock . getLineNo ( ) ) ; <nl> - assertEquals ( " Invalid column number " , - 1 , contentCommentBlock . getColumnNo ( ) ) ; <nl> - <nl> - final DetailAST endCommentBlock = contentCommentBlock . getNextSibling ( ) ; <nl> - assertEquals ( " Invalid tiken type " , TokenTypes . BLOCK _ COMMENT _ END , endCommentBlock . getType ( ) ) ; <nl> - assertEquals ( " Invalid text " , " * / " , endCommentBlock . getText ( ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void testNoUnnecessaryTextinJavadocAst ( ) throws Exception { <nl> verifyJavadocTree ( <nl> getPath ( " ExpectedDetailNodeTreeStringPrinterNoUnnecessaryTextInJavadocAst . txt " ) , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> index 7bf7014 . . 1a7cfae 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> @ @ - 45 , 6 + 45 , 8 @ @ import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> @ RunWith ( PowerMockRunner . class ) <nl> public class CommonUtilsTest { <nl> @ @ - 114 , 6 + 116 , 27 @ @ public class CommonUtilsTest { <nl> } <nl> <nl> @ Test <nl> + public void testCreationOfFakeCommentBlock ( ) { <nl> + final DetailAST testCommentBlock = <nl> + CommonUtils . createBlockCommentNode ( " test _ comment " ) ; <nl> + assertEquals ( " Invalid token type " , <nl> + TokenTypes . BLOCK _ COMMENT _ BEGIN , testCommentBlock . getType ( ) ) ; <nl> + assertEquals ( " Invalid text " , " / * " , testCommentBlock . getText ( ) ) ; <nl> + assertEquals ( " Invalid line number " , 0 , testCommentBlock . getLineNo ( ) ) ; <nl> + <nl> + final DetailAST contentCommentBlock = testCommentBlock . getFirstChild ( ) ; <nl> + assertEquals ( " Invalid tiken type " , <nl> + TokenTypes . COMMENT _ CONTENT , contentCommentBlock . getType ( ) ) ; <nl> + assertEquals ( " Invalid text " , " * test _ comment " , contentCommentBlock . getText ( ) ) ; <nl> + assertEquals ( " Invalid line number " , 0 , contentCommentBlock . getLineNo ( ) ) ; <nl> + assertEquals ( " Invalid column number " , - 1 , contentCommentBlock . getColumnNo ( ) ) ; <nl> + <nl> + final DetailAST endCommentBlock = contentCommentBlock . getNextSibling ( ) ; <nl> + assertEquals ( " Invalid tiken type " , TokenTypes . BLOCK _ COMMENT _ END , endCommentBlock . getType ( ) ) ; <nl> + assertEquals ( " Invalid text " , " * / " , endCommentBlock . getText ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testFileExtensions ( ) { <nl> final String [ ] fileExtensions = { " java " } ; <nl> final File pdfFile = new File ( " file . pdf " ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java <nl> index 716ffa9 . . c09a67b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import com . puppycrawl . tools . checkstyle . grammars . javadoc . JavadocParser ; <nl> * @ author Baratali Izmailov <nl> * @ see < a href = " http : / / docs . oracle . com / javase / 8 / docs / technotes / tools / unix / javadoc . html " > <nl> * javadoc - The Java API Documentation Generator < / a > <nl> + * @ noinspection JavaDoc <nl> * / <nl> public final class JavadocTokenTypes { <nl> / * * Rule types offset . * / <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> index 05ac22b . . 5ddc321 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaTokenTypes ; <nl> * <nl> * @ author Oliver Burn <nl> * @ author < a href = " mailto : dobratzp @ ele . uri . edu " > Peter Dobratz < / a > <nl> + * @ noinspection JavaDoc <nl> * / <nl> public final class TokenTypes { <nl> / / The following three types are never part of an AST ,

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java 
 index b1bc7d9 . . 93df3f8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java 
 @ @ - 30 , 7 + 30 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; 
 
 / * * 
 @ @ - 42 , 9 + 42 , 6 @ @ public final class DetailNodeTreeStringPrinter { 
 / * * OS specific line separator . * / 
 private static final String LINE _ SEPARATOR = System . getProperty ( " line . separator " ) ; 
 
 - / * * Symbols with which javadoc starts . * / 
 - private static final String JAVADOC _ START = " / * * " ; 
 - 
 / * * Prevent instances . * / 
 private DetailNodeTreeStringPrinter ( ) { 
 / / no code 
 @ @ - 80 , 7 + 77 , 7 @ @ public final class DetailNodeTreeStringPrinter { 
 * @ return tree 
 * / 
 private static DetailNode parseJavadocAsDetailNode ( String javadocComment ) { 
 - final DetailAST blockComment = createFakeBlockComment ( javadocComment ) ; 
 + final DetailAST blockComment = CommonUtils . createBlockCommentNode ( javadocComment ) ; 
 return parseJavadocAsDetailNode ( blockComment ) ; 
 } 
 
 @ @ - 174 , 33 + 171 , 4 @ @ public final class DetailNodeTreeStringPrinter { 
 return parseJavadocAsDetailNode ( text . getFullText ( ) . toString ( ) ) ; 
 } 
 
 - / * * 
 - * Creates DetailAST block comment to pass it to the Javadoc parser . 
 - * @ param content comment content . 
 - * @ return DetailAST block comment 
 - * / 
 - private static DetailAST createFakeBlockComment ( String content ) { 
 - final DetailAST blockCommentBegin = new DetailAST ( ) ; 
 - blockCommentBegin . setType ( TokenTypes . BLOCK _ COMMENT _ BEGIN ) ; 
 - blockCommentBegin . setText ( " / * " ) ; 
 - blockCommentBegin . setLineNo ( 0 ) ; 
 - blockCommentBegin . setColumnNo ( - JAVADOC _ START . length ( ) ) ; 
 - 
 - final DetailAST commentContent = new DetailAST ( ) ; 
 - commentContent . setType ( TokenTypes . COMMENT _ CONTENT ) ; 
 - commentContent . setText ( " * " + content ) ; 
 - commentContent . setLineNo ( 0 ) ; 
 - / / javadoc should starts at 0 column , so COMMENT _ CONTENT node 
 - / / that contains javadoc identificator has - 1 column 
 - commentContent . setColumnNo ( - 1 ) ; 
 - 
 - final DetailAST blockCommentEnd = new DetailAST ( ) ; 
 - blockCommentEnd . setType ( TokenTypes . BLOCK _ COMMENT _ END ) ; 
 - blockCommentEnd . setText ( " * / " ) ; 
 - 
 - blockCommentBegin . setFirstChild ( commentContent ) ; 
 - commentContent . setNextSibling ( blockCommentEnd ) ; 
 - return blockCommentBegin ; 
 - } 
 - 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index 8ad0762 . . 8c73b21 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 22 , 12 + 22 , 10 @ @ package com . puppycrawl . tools . checkstyle ; 
 import java . io . File ; 
 import java . io . Reader ; 
 import java . io . StringReader ; 
 - import java . util . AbstractMap . SimpleEntry ; 
 import java . util . Arrays ; 
 import java . util . Collection ; 
 import java . util . HashSet ; 
 import java . util . Locale ; 
 - import java . util . Map . Entry ; 
 import java . util . Set ; 
 import java . util . SortedSet ; 
 import java . util . TreeSet ; 
 @ @ - 681 , 7 + 679 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 commentAst = createSlCommentNode ( token ) ; 
 } 
 else { 
 - commentAst = createBlockCommentNode ( token ) ; 
 + commentAst = CommonUtils . createBlockCommentNode ( token ) ; 
 } 
 return commentAst ; 
 } 
 @ @ - 715 , 83 + 713 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 } 
 
 / * * 
 - * Create block comment from token . 
 - * @ param token 
 - * Token object . 
 - * @ return DetailAST with BLOCK _ COMMENT type . 
 - * / 
 - private static DetailAST createBlockCommentNode ( Token token ) { 
 - final DetailAST blockComment = new DetailAST ( ) ; 
 - blockComment . initialize ( TokenTypes . BLOCK _ COMMENT _ BEGIN , " / * " ) ; 
 - 
 - / / column counting begins from 0 
 - blockComment . setColumnNo ( token . getColumn ( ) - 1 ) ; 
 - blockComment . setLineNo ( token . getLine ( ) ) ; 
 - 
 - final DetailAST blockCommentContent = new DetailAST ( ) ; 
 - blockCommentContent . setType ( TokenTypes . COMMENT _ CONTENT ) ; 
 - 
 - / / column counting begins from 0 
 - / / plus length of ' / * ' 
 - blockCommentContent . setColumnNo ( token . getColumn ( ) - 1 + 2 ) ; 
 - blockCommentContent . setLineNo ( token . getLine ( ) ) ; 
 - blockCommentContent . setText ( token . getText ( ) ) ; 
 - 
 - final DetailAST blockCommentClose = new DetailAST ( ) ; 
 - blockCommentClose . initialize ( TokenTypes . BLOCK _ COMMENT _ END , " * / " ) ; 
 - 
 - final Entry < Integer , Integer > linesColumns = countLinesColumns ( 
 - token . getText ( ) , token . getLine ( ) , token . getColumn ( ) ) ; 
 - blockCommentClose . setLineNo ( linesColumns . getKey ( ) ) ; 
 - blockCommentClose . setColumnNo ( linesColumns . getValue ( ) ) ; 
 - 
 - blockComment . addChild ( blockCommentContent ) ; 
 - blockComment . addChild ( blockCommentClose ) ; 
 - return blockComment ; 
 - } 
 - 
 - / * * 
 - * Count lines and columns ( in last line ) in text . 
 - * @ param text 
 - * String . 
 - * @ param initialLinesCnt 
 - * initial value of lines counter . 
 - * @ param initialColumnsCnt 
 - * initial value of columns counter . 
 - * @ return entry ( pair ) , first element is lines counter , second - columns 
 - * counter . 
 - * / 
 - private static Entry < Integer , Integer > countLinesColumns ( 
 - String text , int initialLinesCnt , int initialColumnsCnt ) { 
 - int lines = initialLinesCnt ; 
 - int columns = initialColumnsCnt ; 
 - boolean foundCr = false ; 
 - for ( char c : text . toCharArray ( ) ) { 
 - if ( c = = ' \ n ' ) { 
 - foundCr = false ; 
 - lines + + ; 
 - columns = 0 ; 
 - } 
 - else { 
 - if ( foundCr ) { 
 - foundCr = false ; 
 - lines + + ; 
 - columns = 0 ; 
 - } 
 - if ( c = = ' \ r ' ) { 
 - foundCr = true ; 
 - } 
 - columns + + ; 
 - } 
 - } 
 - if ( foundCr ) { 
 - lines + + ; 
 - columns = 0 ; 
 - } 
 - return new SimpleEntry < > ( lines , columns ) ; 
 - } 
 - 
 - / * * 
 * State of AST . 
 * Indicates whether tree contains certain nodes . 
 * / 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 index 588a2a1 . . 14b3e03 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 @ @ - 30 , 13 + 30 , 18 @ @ import java . net . URISyntaxException ; 
 import java . net . URL ; 
 import java . nio . file . Path ; 
 import java . nio . file . Paths ; 
 + import java . util . AbstractMap ; 
 + import java . util . Map ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 import java . util . regex . PatternSyntaxException ; 
 
 import org . apache . commons . beanutils . ConversionException ; 
 
 + import antlr . Token ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 * Contains utility methods . 
 @ @ - 61 , 6 + 66 , 13 @ @ public final class CommonUtils { 
 / * * Prefix for the exception when unable to find resource . * / 
 private static final String UNABLE _ TO _ FIND _ EXCEPTION _ PREFIX = " Unable to find : " ; 
 
 + / * * Symbols with which javadoc starts . * / 
 + private static final String JAVADOC _ START = " / * * " ; 
 + / * * Symbols with which multiple comment starts . * / 
 + private static final String BLOCK _ MULTIPLE _ COMMENT _ BEGIN = " / * " ; 
 + / * * Symbols with which multiple comment ends . * / 
 + private static final String BLOCK _ MULTIPLE _ COMMENT _ END = " * / " ; 
 + 
 / * * Stop instances being created . * * / 
 private CommonUtils ( ) { 
 
 @ @ - 101 , 6 + 113 , 112 @ @ public final class CommonUtils { 
 } 
 
 / * * 
 + * Create block comment from string content . 
 + * @ param content comment content . 
 + * @ return DetailAST block comment 
 + * / 
 + public static DetailAST createBlockCommentNode ( String content ) { 
 + final DetailAST blockCommentBegin = new DetailAST ( ) ; 
 + blockCommentBegin . setType ( TokenTypes . BLOCK _ COMMENT _ BEGIN ) ; 
 + blockCommentBegin . setText ( BLOCK _ MULTIPLE _ COMMENT _ BEGIN ) ; 
 + blockCommentBegin . setLineNo ( 0 ) ; 
 + blockCommentBegin . setColumnNo ( - JAVADOC _ START . length ( ) ) ; 
 + 
 + final DetailAST commentContent = new DetailAST ( ) ; 
 + commentContent . setType ( TokenTypes . COMMENT _ CONTENT ) ; 
 + commentContent . setText ( " * " + content ) ; 
 + commentContent . setLineNo ( 0 ) ; 
 + / / javadoc should starts at 0 column , so COMMENT _ CONTENT node 
 + / / that contains javadoc identificator has - 1 column 
 + commentContent . setColumnNo ( - 1 ) ; 
 + 
 + final DetailAST blockCommentEnd = new DetailAST ( ) ; 
 + blockCommentEnd . setType ( TokenTypes . BLOCK _ COMMENT _ END ) ; 
 + blockCommentEnd . setText ( BLOCK _ MULTIPLE _ COMMENT _ END ) ; 
 + 
 + blockCommentBegin . setFirstChild ( commentContent ) ; 
 + commentContent . setNextSibling ( blockCommentEnd ) ; 
 + return blockCommentBegin ; 
 + } 
 + 
 + / * * 
 + * Create block comment from token . 
 + * @ param token 
 + * Token object . 
 + * @ return DetailAST with BLOCK _ COMMENT type . 
 + * / 
 + public static DetailAST createBlockCommentNode ( Token token ) { 
 + final DetailAST blockComment = new DetailAST ( ) ; 
 + blockComment . initialize ( TokenTypes . BLOCK _ COMMENT _ BEGIN , BLOCK _ MULTIPLE _ COMMENT _ BEGIN ) ; 
 + 
 + / / column counting begins from 0 
 + blockComment . setColumnNo ( token . getColumn ( ) - 1 ) ; 
 + blockComment . setLineNo ( token . getLine ( ) ) ; 
 + 
 + final DetailAST blockCommentContent = new DetailAST ( ) ; 
 + blockCommentContent . setType ( TokenTypes . COMMENT _ CONTENT ) ; 
 + 
 + / / column counting begins from 0 
 + / / plus length of ' / * ' 
 + blockCommentContent . setColumnNo ( token . getColumn ( ) - 1 + 2 ) ; 
 + blockCommentContent . setLineNo ( token . getLine ( ) ) ; 
 + blockCommentContent . setText ( token . getText ( ) ) ; 
 + 
 + final DetailAST blockCommentClose = new DetailAST ( ) ; 
 + blockCommentClose . initialize ( TokenTypes . BLOCK _ COMMENT _ END , BLOCK _ MULTIPLE _ COMMENT _ END ) ; 
 + 
 + final Map . Entry < Integer , Integer > linesColumns = countLinesColumns ( 
 + token . getText ( ) , token . getLine ( ) , token . getColumn ( ) ) ; 
 + blockCommentClose . setLineNo ( linesColumns . getKey ( ) ) ; 
 + blockCommentClose . setColumnNo ( linesColumns . getValue ( ) ) ; 
 + 
 + blockComment . addChild ( blockCommentContent ) ; 
 + blockComment . addChild ( blockCommentClose ) ; 
 + return blockComment ; 
 + } 
 + 
 + / * * 
 + * Count lines and columns ( in last line ) in text . 
 + * @ param text 
 + * String . 
 + * @ param initialLinesCnt 
 + * initial value of lines counter . 
 + * @ param initialColumnsCnt 
 + * initial value of columns counter . 
 + * @ return entry ( pair ) , first element is lines counter , second - columns 
 + * counter . 
 + * / 
 + private static Map . Entry < Integer , Integer > countLinesColumns ( 
 + String text , int initialLinesCnt , int initialColumnsCnt ) { 
 + int lines = initialLinesCnt ; 
 + int columns = initialColumnsCnt ; 
 + boolean foundCr = false ; 
 + for ( char c : text . toCharArray ( ) ) { 
 + if ( c = = ' \ n ' ) { 
 + foundCr = false ; 
 + lines + + ; 
 + columns = 0 ; 
 + } 
 + else { 
 + if ( foundCr ) { 
 + foundCr = false ; 
 + lines + + ; 
 + columns = 0 ; 
 + } 
 + if ( c = = ' \ r ' ) { 
 + foundCr = true ; 
 + } 
 + columns + + ; 
 + } 
 + } 
 + if ( foundCr ) { 
 + lines + + ; 
 + columns = 0 ; 
 + } 
 + return new AbstractMap . SimpleEntry < > ( lines , columns ) ; 
 + } 
 + 
 + / * * 
 * Returns whether the file extension matches what we are meant to process . 
 * 
 * @ param file 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java 
 index c4fa524 . . 9c50429 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java 
 @ @ - 34 , 9 + 34 , 7 @ @ import org . junit . Assert ; 
 import org . junit . Test ; 
 import org . powermock . reflect . Whitebox ; 
 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class DetailNodeTreeStringPrinterTest extends AbstractTreeTestSupport { 
 
 @ @ - 79 , 31 + 77 , 6 @ @ public class DetailNodeTreeStringPrinterTest extends AbstractTreeTestSupport { 
 } 
 
 @ Test 
 - public void testCreationOfFakeCommentBlock ( ) throws Exception { 
 - final Method createFakeBlockComment = 
 - Whitebox . getMethod ( DetailNodeTreeStringPrinter . class , 
 - " createFakeBlockComment " , String . class ) ; 
 - 
 - final DetailAST testCommentBlock = 
 - ( DetailAST ) createFakeBlockComment . invoke ( null , " test _ comment " ) ; 
 - assertEquals ( " Invalid token type " , 
 - TokenTypes . BLOCK _ COMMENT _ BEGIN , testCommentBlock . getType ( ) ) ; 
 - assertEquals ( " Invalid text " , " / * " , testCommentBlock . getText ( ) ) ; 
 - assertEquals ( " Invalid line number " , 0 , testCommentBlock . getLineNo ( ) ) ; 
 - 
 - final DetailAST contentCommentBlock = testCommentBlock . getFirstChild ( ) ; 
 - assertEquals ( " Invalid tiken type " , 
 - TokenTypes . COMMENT _ CONTENT , contentCommentBlock . getType ( ) ) ; 
 - assertEquals ( " Invalid text " , " * test _ comment " , contentCommentBlock . getText ( ) ) ; 
 - assertEquals ( " Invalid line number " , 0 , contentCommentBlock . getLineNo ( ) ) ; 
 - assertEquals ( " Invalid column number " , - 1 , contentCommentBlock . getColumnNo ( ) ) ; 
 - 
 - final DetailAST endCommentBlock = contentCommentBlock . getNextSibling ( ) ; 
 - assertEquals ( " Invalid tiken type " , TokenTypes . BLOCK _ COMMENT _ END , endCommentBlock . getType ( ) ) ; 
 - assertEquals ( " Invalid text " , " * / " , endCommentBlock . getText ( ) ) ; 
 - } 
 - 
 - @ Test 
 public void testNoUnnecessaryTextinJavadocAst ( ) throws Exception { 
 verifyJavadocTree ( 
 getPath ( " ExpectedDetailNodeTreeStringPrinterNoUnnecessaryTextInJavadocAst . txt " ) , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 index 7bf7014 . . 1a7cfae 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 @ @ - 45 , 6 + 45 , 8 @ @ import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 @ RunWith ( PowerMockRunner . class ) 
 public class CommonUtilsTest { 
 @ @ - 114 , 6 + 116 , 27 @ @ public class CommonUtilsTest { 
 } 
 
 @ Test 
 + public void testCreationOfFakeCommentBlock ( ) { 
 + final DetailAST testCommentBlock = 
 + CommonUtils . createBlockCommentNode ( " test _ comment " ) ; 
 + assertEquals ( " Invalid token type " , 
 + TokenTypes . BLOCK _ COMMENT _ BEGIN , testCommentBlock . getType ( ) ) ; 
 + assertEquals ( " Invalid text " , " / * " , testCommentBlock . getText ( ) ) ; 
 + assertEquals ( " Invalid line number " , 0 , testCommentBlock . getLineNo ( ) ) ; 
 + 
 + final DetailAST contentCommentBlock = testCommentBlock . getFirstChild ( ) ; 
 + assertEquals ( " Invalid tiken type " , 
 + TokenTypes . COMMENT _ CONTENT , contentCommentBlock . getType ( ) ) ; 
 + assertEquals ( " Invalid text " , " * test _ comment " , contentCommentBlock . getText ( ) ) ; 
 + assertEquals ( " Invalid line number " , 0 , contentCommentBlock . getLineNo ( ) ) ; 
 + assertEquals ( " Invalid column number " , - 1 , contentCommentBlock . getColumnNo ( ) ) ; 
 + 
 + final DetailAST endCommentBlock = contentCommentBlock . getNextSibling ( ) ; 
 + assertEquals ( " Invalid tiken type " , TokenTypes . BLOCK _ COMMENT _ END , endCommentBlock . getType ( ) ) ; 
 + assertEquals ( " Invalid text " , " * / " , endCommentBlock . getText ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testFileExtensions ( ) { 
 final String [ ] fileExtensions = { " java " } ; 
 final File pdfFile = new File ( " file . pdf " ) ;

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java 
 index 716ffa9 . . c09a67b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import com . puppycrawl . tools . checkstyle . grammars . javadoc . JavadocParser ; 
 * @ author Baratali Izmailov 
 * @ see < a href = " http : / / docs . oracle . com / javase / 8 / docs / technotes / tools / unix / javadoc . html " > 
 * javadoc - The Java API Documentation Generator < / a > 
 + * @ noinspection JavaDoc 
 * / 
 public final class JavadocTokenTypes { 
 / * * Rule types offset . * / 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 index 05ac22b . . 5ddc321 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaTokenTypes ; 
 * 
 * @ author Oliver Burn 
 * @ author < a href = " mailto : dobratzp @ ele . uri . edu " > Peter Dobratz < / a > 
 + * @ noinspection JavaDoc 
 * / 
 public final class TokenTypes { 
 / / The following three types are never part of an AST ,
