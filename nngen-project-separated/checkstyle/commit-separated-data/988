BLEU SCORE: 0.07495553473355841

TEST MSG: config : upgrade jacoco maven plugin to 0 . 7 . 8
GENERATED MSG: config : version bump for jacoco

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 1bcbeaa . . 5959b4e 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 201 , 7 + 201 , 7 @ @ <nl> < maven . site . plugin . version > 3 . 6 < / maven . site . plugin . version > <nl> < maven . findbugs . plugin . version > 3 . 0 . 4 < / maven . findbugs . plugin . version > <nl> < maven . pmd . plugin . version > 3 . 7 < / maven . pmd . plugin . version > <nl> - < maven . jacoco . plugin . version > 0 . 7 . 7 . 201606060606 < / maven . jacoco . plugin . version > <nl> + < maven . jacoco . plugin . version > 0 . 7 . 8 < / maven . jacoco . plugin . version > <nl> < maven . checkstyle . plugin . version > 2 . 17 < / maven . checkstyle . plugin . version > <nl> < maven . sevntu . checkstyle . plugin . version > 1 . 23 . 0 < / maven . sevntu . checkstyle . plugin . version > <nl> < maven . versions . plugin . version > 2 . 3 < / maven . versions . plugin . version >
NEAREST DIFF (one line): diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm <nl> index 586ef7f . . 41f6b84 100644 <nl> - - - a / src / xdocs / writingjavadocchecks . xml . vm <nl> + + + b / src / xdocs / writingjavadocchecks . xml . vm <nl> @ @ - 52 , 13 + 52 , 8 @ @ public class MyClass { <nl> Javadoc by specification could contain any HTML tags that let user generate content he needs . <nl> Checkstyle can not parse something that looks like an HTML , so limitation appear . <nl> The comment should be written in XHTML to be correctly processed by Checkstyle . This means that every HTML tag should have matching closed HTML tag or it is self - closed one ( singlton tag ) . <nl> - The only exceptions are & lt ; p & gt ; , & lt ; li & gt ; , & lt ; tr & gt ; , & lt ; td & gt ; , & lt ; th & gt ; , & lt ; body & gt ; , & lt ; colgroup & gt ; , & lt ; dd & gt ; , & lt ; dt & gt ; , & lt ; head & gt ; , & lt ; html & gt ; , & lt ; option & gt ; , <nl> - & lt ; tbody & gt ; , & lt ; thead & gt ; , & lt ; tfoot & gt ; and Checkstyle won ' t show error about missing closing tag , however , it leads to broken XHTML structure and to <nl> - not - nested content of the HTML tags in Abstract Syntax Tree of the Javadoc comment . See examples at < a href = " # HTML _ Code _ In _ Javadoc _ Comments " > HTML Code In Javadoc Comments < / a > section . <nl> - < / p > <nl> - < p > <nl> - Javadoc parser requires XHTML to be used in Javadoc comments , i . e . if there is some open tag ( for example & lt ; div & gt ; ) then there have to be its close tag & lt ; / div & gt ; . <nl> - This means that if Javadoc comment has incorrect XHTML structure then Javadoc Parser will fail processing the comment , therefore , your new Check can ' t get its parse tree and process anything from this Javadoc comment . For more details and examples go to < a href = " # HTML _ Code _ In _ Javadoc _ Comments " > HTML Code In Javadoc Comments < / a > section . <nl> + The only exceptions are HTML 4 tags that don ' t require closing tag and HTML 4 singleton tags , so , Checkstyle won ' t show error about missing closing tag , however , it leads to broken XHTML structure and to <nl> + not - nested content of the HTML tags in Abstract Syntax Tree of the Javadoc comment . More details about HTML at < a href = " # HTML _ Code _ In _ Javadoc _ Comments " > HTML Code In Javadoc Comments < / a > section . <nl> < / p > <nl> < p > <nl> Javadoc grammar requires XHTML , but it can also parse some parts of HTML code ( like some unclosed tags ) . If HTML tags are not closed Javadoc grammar cannot determine content of these tags , <nl> @ @ - 67 , 7 + 62 , 10 @ @ public class MyClass { <nl> < / p > <nl> < / section > <nl> <nl> - < section name = " Overview " > <nl> + < section name = " How to create Javadoc Check " > <nl> + < p > <nl> + Principle of writing Javadoc Checks is similar to writing regular Checks . You just extend another class and use another token types . <nl> + < / p > <nl> < p > <nl> To start implementing new Check create new class and extend < a href = ' apidocs / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . html ' > AbstractJavadocCheck < / a > . It has two abstract methods you should implement : <nl> < / p > <nl> @ @ - 261 , 7 + 259 , 20 @ @ class MyCheck extends AbstractJavadocCheck { <nl> < section name = " HTML Code In Javadoc Comments " > <nl> < p > <nl> Checkstyle supports HTML4 tags in Javadoc comments : < a href = " https : / / www . w3 . org / TR / html4 / index / elements . html " > all HTML4 elements < / a > . <nl> - However if Checkstyle meets unknown tag ( for example HTML5 tag ) <nl> + < / p > <nl> + < p > <nl> + HTML 4 is picked just to have a list of tags that don ' t require closing tag and a list of singleton tags that don ' t need closing tag at all . <nl> + < / p > <nl> + < p > <nl> + Tags that don ' t require closing tag : & lt ; P & gt ; , & lt ; LI & gt ; , & lt ; TR & gt ; , & lt ; TD & gt ; , & lt ; TH & gt ; , & lt ; BODY & gt ; , & lt ; COLGROUP & gt ; , & lt ; DD & gt ; , <nl> + & lt ; DT & gt ; , & lt ; HEAD & gt ; , & lt ; HTML & gt ; , & lt ; OPTION & gt ; , & lt ; TBODY & gt ; , & lt ; THEAD & gt ; , & lt ; TFOOT & gt ; . <nl> + < / p > <nl> + < p > <nl> + Singleton tags that don ' t need closing tag : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , <nl> + & lt ; HR & gt ; , & lt ; IMG & gt ; , & lt ; INPUT & gt ; , & lt ; ISINDEX & gt ; , & lt ; LINK & gt ; , & lt ; META & gt ; , & lt ; PARAM & gt ; . <nl> + < / p > <nl> + < p > <nl> + If Checkstyle meets unknown tag ( for example HTML5 tag ) <nl> it doesn ' t fail and parses this tag as < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # HTML _ TAG " > HTML _ TAG < / a > Javadoc token type . <nl> Just follow XHTML rules to make Checkstyle javadoc parser happy , even though tags are unknown . <nl>

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 1bcbeaa . . 5959b4e 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 201 , 7 + 201 , 7 @ @ 
 < maven . site . plugin . version > 3 . 6 < / maven . site . plugin . version > 
 < maven . findbugs . plugin . version > 3 . 0 . 4 < / maven . findbugs . plugin . version > 
 < maven . pmd . plugin . version > 3 . 7 < / maven . pmd . plugin . version > 
 - < maven . jacoco . plugin . version > 0 . 7 . 7 . 201606060606 < / maven . jacoco . plugin . version > 
 + < maven . jacoco . plugin . version > 0 . 7 . 8 < / maven . jacoco . plugin . version > 
 < maven . checkstyle . plugin . version > 2 . 17 < / maven . checkstyle . plugin . version > 
 < maven . sevntu . checkstyle . plugin . version > 1 . 23 . 0 < / maven . sevntu . checkstyle . plugin . version > 
 < maven . versions . plugin . version > 2 . 3 < / maven . versions . plugin . version >

NEAREST DIFF:
diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm 
 index 586ef7f . . 41f6b84 100644 
 - - - a / src / xdocs / writingjavadocchecks . xml . vm 
 + + + b / src / xdocs / writingjavadocchecks . xml . vm 
 @ @ - 52 , 13 + 52 , 8 @ @ public class MyClass { 
 Javadoc by specification could contain any HTML tags that let user generate content he needs . 
 Checkstyle can not parse something that looks like an HTML , so limitation appear . 
 The comment should be written in XHTML to be correctly processed by Checkstyle . This means that every HTML tag should have matching closed HTML tag or it is self - closed one ( singlton tag ) . 
 - The only exceptions are & lt ; p & gt ; , & lt ; li & gt ; , & lt ; tr & gt ; , & lt ; td & gt ; , & lt ; th & gt ; , & lt ; body & gt ; , & lt ; colgroup & gt ; , & lt ; dd & gt ; , & lt ; dt & gt ; , & lt ; head & gt ; , & lt ; html & gt ; , & lt ; option & gt ; , 
 - & lt ; tbody & gt ; , & lt ; thead & gt ; , & lt ; tfoot & gt ; and Checkstyle won ' t show error about missing closing tag , however , it leads to broken XHTML structure and to 
 - not - nested content of the HTML tags in Abstract Syntax Tree of the Javadoc comment . See examples at < a href = " # HTML _ Code _ In _ Javadoc _ Comments " > HTML Code In Javadoc Comments < / a > section . 
 - < / p > 
 - < p > 
 - Javadoc parser requires XHTML to be used in Javadoc comments , i . e . if there is some open tag ( for example & lt ; div & gt ; ) then there have to be its close tag & lt ; / div & gt ; . 
 - This means that if Javadoc comment has incorrect XHTML structure then Javadoc Parser will fail processing the comment , therefore , your new Check can ' t get its parse tree and process anything from this Javadoc comment . For more details and examples go to < a href = " # HTML _ Code _ In _ Javadoc _ Comments " > HTML Code In Javadoc Comments < / a > section . 
 + The only exceptions are HTML 4 tags that don ' t require closing tag and HTML 4 singleton tags , so , Checkstyle won ' t show error about missing closing tag , however , it leads to broken XHTML structure and to 
 + not - nested content of the HTML tags in Abstract Syntax Tree of the Javadoc comment . More details about HTML at < a href = " # HTML _ Code _ In _ Javadoc _ Comments " > HTML Code In Javadoc Comments < / a > section . 
 < / p > 
 < p > 
 Javadoc grammar requires XHTML , but it can also parse some parts of HTML code ( like some unclosed tags ) . If HTML tags are not closed Javadoc grammar cannot determine content of these tags , 
 @ @ - 67 , 7 + 62 , 10 @ @ public class MyClass { 
 < / p > 
 < / section > 
 
 - < section name = " Overview " > 
 + < section name = " How to create Javadoc Check " > 
 + < p > 
 + Principle of writing Javadoc Checks is similar to writing regular Checks . You just extend another class and use another token types . 
 + < / p > 
 < p > 
 To start implementing new Check create new class and extend < a href = ' apidocs / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . html ' > AbstractJavadocCheck < / a > . It has two abstract methods you should implement : 
 < / p > 
 @ @ - 261 , 7 + 259 , 20 @ @ class MyCheck extends AbstractJavadocCheck { 
 < section name = " HTML Code In Javadoc Comments " > 
 < p > 
 Checkstyle supports HTML4 tags in Javadoc comments : < a href = " https : / / www . w3 . org / TR / html4 / index / elements . html " > all HTML4 elements < / a > . 
 - However if Checkstyle meets unknown tag ( for example HTML5 tag ) 
 + < / p > 
 + < p > 
 + HTML 4 is picked just to have a list of tags that don ' t require closing tag and a list of singleton tags that don ' t need closing tag at all . 
 + < / p > 
 + < p > 
 + Tags that don ' t require closing tag : & lt ; P & gt ; , & lt ; LI & gt ; , & lt ; TR & gt ; , & lt ; TD & gt ; , & lt ; TH & gt ; , & lt ; BODY & gt ; , & lt ; COLGROUP & gt ; , & lt ; DD & gt ; , 
 + & lt ; DT & gt ; , & lt ; HEAD & gt ; , & lt ; HTML & gt ; , & lt ; OPTION & gt ; , & lt ; TBODY & gt ; , & lt ; THEAD & gt ; , & lt ; TFOOT & gt ; . 
 + < / p > 
 + < p > 
 + Singleton tags that don ' t need closing tag : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , 
 + & lt ; HR & gt ; , & lt ; IMG & gt ; , & lt ; INPUT & gt ; , & lt ; ISINDEX & gt ; , & lt ; LINK & gt ; , & lt ; META & gt ; , & lt ; PARAM & gt ; . 
 + < / p > 
 + < p > 
 + If Checkstyle meets unknown tag ( for example HTML5 tag ) 
 it doesn ' t fail and parses this tag as < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # HTML _ TAG " > HTML _ TAG < / a > Javadoc token type . 
 Just follow XHTML rules to make Checkstyle javadoc parser happy , even though tags are unknown . 

