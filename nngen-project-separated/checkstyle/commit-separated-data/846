BLEU SCORE: 0.04753622060013115

TEST MSG: Issue # 4165 : Split and Organize Checkstyle inputs by Test for checks in coding package : SuperClone
GENERATED MSG: Issue # 2161 : unify test input locations

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> index 6a052d7 . . 48bbd4f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> @ @ - 35 , 7 + 35 , 9 @ @ public class SuperCloneCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " superclone " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 53 , 7 + 55 , 7 @ @ public class SuperCloneCheckTest <nl> " 35 : 19 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , <nl> " 60 : 48 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputClone . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputSuperCloneInnerAndWithArguments . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 63 , 7 + 65 , 7 @ @ public class SuperCloneCheckTest <nl> final String [ ] expected = { <nl> " 9 : 17 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSuperClone . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputSuperClonePlainAndSubclasses . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java <nl> deleted file mode 100644 <nl> index 42efa37 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java <nl> + + + / dev / null <nl> @ @ - 1 , 39 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - <nl> - interface InputSuperClone { <nl> - void clone ( ) ; <nl> - } <nl> - <nl> - class A { <nl> - public Object clone ( ) { <nl> - return null ; <nl> - } <nl> - } <nl> - <nl> - class B { <nl> - public Object clone ( ) throws CloneNotSupportedException { <nl> - super . clone ( ) ; <nl> - return null ; <nl> - } <nl> - void clone ( Object asd , Object asd2 ) { <nl> - } <nl> - } <nl> - <nl> - class C extends B { <nl> - void method ( ) throws CloneNotSupportedException { <nl> - Object asd = null ; <nl> - super . clone ( asd , asd ) ; <nl> - super . clone ( ) ; <nl> - Runnable a = ( ) - > super . clone ( null , null ) ; <nl> - } <nl> - <nl> - void method2 ( ) { <nl> - new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - C . super . clone ( null , null ) ; <nl> - } <nl> - } ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperCloneInnerAndWithArguments . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperCloneInnerAndWithArguments . java <nl> new file mode 100644 <nl> index 0000000 . . e5a45d6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperCloneInnerAndWithArguments . java <nl> @ @ - 0 , 0 + 1 , 99 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . superclone ; <nl> + public class InputSuperCloneInnerAndWithArguments <nl> + { / * class body * / <nl> + public InputSuperCloneInnerAndWithArguments ( ) throws CloneNotSupportedException <nl> + { / / constructor body <nl> + super . equals ( new String ( ) ) ; <nl> + super . clone ( ) ; <nl> + } <nl> + <nl> + public Object clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return super . clone ( ) ; <nl> + } <nl> + <nl> + public void method ( ) throws CloneNotSupportedException <nl> + { <nl> + super . clone ( ) ; <nl> + } <nl> + <nl> + { <nl> + super . clone ( ) ; <nl> + } <nl> + } <nl> + <nl> + class NoSuperClone <nl> + { <nl> + public Object clone ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + class InnerClone <nl> + { <nl> + public Object clone ( ) <nl> + { <nl> + class Inner <nl> + { <nl> + public Object clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return super . clone ( ) ; <nl> + } <nl> + } <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + / / This could not pass as valid semantically but tests that <nl> + / / type arguments are ignored when checking super calls <nl> + class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > <nl> + { <nl> + public CloneWithTypeArguments < T > clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return ( CloneWithTypeArguments < T > ) super . < T > clone ( ) ; <nl> + } <nl> + } <nl> + <nl> + class CloneWithTypeArgumentsAndNoSuper < T > <nl> + { <nl> + public CloneWithTypeArgumentsAndNoSuper < T > clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + / / Check that super keword isn ' t snagged here <nl> + class MyClassWithGenericSuperMethod <nl> + { <nl> + void someMethod ( java . util . List < ? super java . util . Map < Object , Object > > l ) <nl> + { <nl> + <nl> + } <nl> + <nl> + / * * <nl> + * Not a valid clone override . Should not get flagged . <nl> + * @ param o some object <nl> + * @ return a cloned Object ? <nl> + * / <nl> + public static Object clone ( Object o ) { <nl> + 	 return null ; <nl> + } <nl> + } <nl> + <nl> + class AnotherClass { <nl> + <nl> + / * * <nl> + * Not a valid clone override . Should not get flagged . <nl> + * @ param t some type <nl> + * @ param < T > a type <nl> + * @ return a cloned type ? <nl> + * / <nl> + public < T > T clone ( T t ) { <nl> + 	 return null ; <nl> + } <nl> + } <nl> + <nl> + class NativeTest { <nl> + public native Object clone ( ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperClonePlainAndSubclasses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperClonePlainAndSubclasses . java <nl> new file mode 100644 <nl> index 0000000 . . 25d4a6a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperClonePlainAndSubclasses . java <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . superclone ; <nl> + <nl> + <nl> + interface InputSuperClonePlainAndSubclasses { <nl> + void clone ( ) ; <nl> + } <nl> + <nl> + class A { <nl> + public Object clone ( ) { <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + class B { <nl> + public Object clone ( ) throws CloneNotSupportedException { <nl> + super . clone ( ) ; <nl> + return null ; <nl> + } <nl> + void clone ( Object asd , Object asd2 ) { <nl> + } <nl> + } <nl> + <nl> + class C extends B { <nl> + void method ( ) throws CloneNotSupportedException { <nl> + Object asd = null ; <nl> + super . clone ( asd , asd ) ; <nl> + super . clone ( ) ; <nl> + Runnable a = ( ) - > super . clone ( null , null ) ; <nl> + } <nl> + <nl> + void method2 ( ) { <nl> + new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + C . super . clone ( null , null ) ; <nl> + } <nl> + } ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> index 9af22a9 . . 2cdac81 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { <nl> } <nl> <nl> private static List < RevCommit > getCommitsToCheck ( ) throws Exception { <nl> - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; <nl> - <nl> - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> List < RevCommit > commits ; <nl> - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> - } <nl> - else { <nl> - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { <nl> + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> + else { <nl> + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> } <nl> return commits ; <nl> } <nl> @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { <nl> <nl> private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { <nl> RevCommitsPair revCommitIteratorPair ; <nl> - try { <nl> + <nl> + try ( RevWalk revWalk = new RevWalk ( repo ) ) { <nl> Iterator < RevCommit > first ; <nl> Iterator < RevCommit > second ; <nl> - <nl> - RevWalk revWalk = new RevWalk ( repo ) ; <nl> - <nl> ObjectId headId = repo . resolve ( Constants . HEAD ) ; <nl> RevCommit headCommit = revWalk . parseCommit ( headId ) ; <nl> <nl> @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { <nl> RevCommit firstParent = headCommit . getParent ( 0 ) ; <nl> RevCommit secondParent = headCommit . getParent ( 1 ) ; <nl> <nl> - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + } <nl> } <nl> else { <nl> - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . call ( ) . iterator ( ) ; <nl> + } <nl> second = Collections . emptyIterator ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 index 6a052d7 . . 48bbd4f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 @ @ - 35 , 7 + 35 , 9 @ @ public class SuperCloneCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " superclone " + File . separator 
 + + filename ) ; 
 } 
 
 @ Override 
 @ @ - 53 , 7 + 55 , 7 @ @ public class SuperCloneCheckTest 
 " 35 : 19 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , 
 " 60 : 48 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputClone . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputSuperCloneInnerAndWithArguments . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 63 , 7 + 65 , 7 @ @ public class SuperCloneCheckTest 
 final String [ ] expected = { 
 " 9 : 17 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSuperClone . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputSuperClonePlainAndSubclasses . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java 
 deleted file mode 100644 
 index 42efa37 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java 
 + + + / dev / null 
 @ @ - 1 , 39 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - 
 - interface InputSuperClone { 
 - void clone ( ) ; 
 - } 
 - 
 - class A { 
 - public Object clone ( ) { 
 - return null ; 
 - } 
 - } 
 - 
 - class B { 
 - public Object clone ( ) throws CloneNotSupportedException { 
 - super . clone ( ) ; 
 - return null ; 
 - } 
 - void clone ( Object asd , Object asd2 ) { 
 - } 
 - } 
 - 
 - class C extends B { 
 - void method ( ) throws CloneNotSupportedException { 
 - Object asd = null ; 
 - super . clone ( asd , asd ) ; 
 - super . clone ( ) ; 
 - Runnable a = ( ) - > super . clone ( null , null ) ; 
 - } 
 - 
 - void method2 ( ) { 
 - new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - C . super . clone ( null , null ) ; 
 - } 
 - } ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperCloneInnerAndWithArguments . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperCloneInnerAndWithArguments . java 
 new file mode 100644 
 index 0000000 . . e5a45d6 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperCloneInnerAndWithArguments . java 
 @ @ - 0 , 0 + 1 , 99 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . superclone ; 
 + public class InputSuperCloneInnerAndWithArguments 
 + { / * class body * / 
 + public InputSuperCloneInnerAndWithArguments ( ) throws CloneNotSupportedException 
 + { / / constructor body 
 + super . equals ( new String ( ) ) ; 
 + super . clone ( ) ; 
 + } 
 + 
 + public Object clone ( ) throws CloneNotSupportedException 
 + { 
 + return super . clone ( ) ; 
 + } 
 + 
 + public void method ( ) throws CloneNotSupportedException 
 + { 
 + super . clone ( ) ; 
 + } 
 + 
 + { 
 + super . clone ( ) ; 
 + } 
 + } 
 + 
 + class NoSuperClone 
 + { 
 + public Object clone ( ) 
 + { 
 + return null ; 
 + } 
 + } 
 + 
 + class InnerClone 
 + { 
 + public Object clone ( ) 
 + { 
 + class Inner 
 + { 
 + public Object clone ( ) throws CloneNotSupportedException 
 + { 
 + return super . clone ( ) ; 
 + } 
 + } 
 + return null ; 
 + } 
 + } 
 + 
 + / / This could not pass as valid semantically but tests that 
 + / / type arguments are ignored when checking super calls 
 + class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > 
 + { 
 + public CloneWithTypeArguments < T > clone ( ) throws CloneNotSupportedException 
 + { 
 + return ( CloneWithTypeArguments < T > ) super . < T > clone ( ) ; 
 + } 
 + } 
 + 
 + class CloneWithTypeArgumentsAndNoSuper < T > 
 + { 
 + public CloneWithTypeArgumentsAndNoSuper < T > clone ( ) throws CloneNotSupportedException 
 + { 
 + return null ; 
 + } 
 + } 
 + 
 + / / Check that super keword isn ' t snagged here 
 + class MyClassWithGenericSuperMethod 
 + { 
 + void someMethod ( java . util . List < ? super java . util . Map < Object , Object > > l ) 
 + { 
 + 
 + } 
 + 
 + / * * 
 + * Not a valid clone override . Should not get flagged . 
 + * @ param o some object 
 + * @ return a cloned Object ? 
 + * / 
 + public static Object clone ( Object o ) { 
 + 	 return null ; 
 + } 
 + } 
 + 
 + class AnotherClass { 
 + 
 + / * * 
 + * Not a valid clone override . Should not get flagged . 
 + * @ param t some type 
 + * @ param < T > a type 
 + * @ return a cloned type ? 
 + * / 
 + public < T > T clone ( T t ) { 
 + 	 return null ; 
 + } 
 + } 
 + 
 + class NativeTest { 
 + public native Object clone ( ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperClonePlainAndSubclasses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperClonePlainAndSubclasses . java 
 new file mode 100644 
 index 0000000 . . 25d4a6a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperClonePlainAndSubclasses . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . superclone ; 
 + 
 + 
 + interface InputSuperClonePlainAndSubclasses { 
 + void clone ( ) ; 
 + } 
 + 
 + class A { 
 + public Object clone ( ) { 
 + return null ; 
 + } 
 + } 
 + 
 + class B { 
 + public Object clone ( ) throws CloneNotSupportedException { 
 + super . clone ( ) ; 
 + return null ; 
 + } 
 + void clone ( Object asd , Object asd2 ) { 
 + } 
 + } 
 + 
 + class C extends B { 
 + void method ( ) throws CloneNotSupportedException { 
 + Object asd = null ; 
 + super . clone ( asd , asd ) ; 
 + super . clone ( ) ; 
 + Runnable a = ( ) - > super . clone ( null , null ) ; 
 + } 
 + 
 + void method2 ( ) { 
 + new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + C . super . clone ( null , null ) ; 
 + } 
 + } ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 index 9af22a9 . . 2cdac81 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { 
 } 
 
 private static List < RevCommit > getCommitsToCheck ( ) throws Exception { 
 - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; 
 - 
 - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 List < RevCommit > commits ; 
 - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 - } 
 - else { 
 - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { 
 + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 + else { 
 + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 } 
 return commits ; 
 } 
 @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { 
 
 private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { 
 RevCommitsPair revCommitIteratorPair ; 
 - try { 
 + 
 + try ( RevWalk revWalk = new RevWalk ( repo ) ) { 
 Iterator < RevCommit > first ; 
 Iterator < RevCommit > second ; 
 - 
 - RevWalk revWalk = new RevWalk ( repo ) ; 
 - 
 ObjectId headId = repo . resolve ( Constants . HEAD ) ; 
 RevCommit headCommit = revWalk . parseCommit ( headId ) ; 
 
 @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { 
 RevCommit firstParent = headCommit . getParent ( 0 ) ; 
 RevCommit secondParent = headCommit . getParent ( 1 ) ; 
 
 - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + } 
 } 
 else { 
 - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . call ( ) . iterator ( ) ; 
 + } 
 second = Collections . emptyIterator ( ) ; 
 } 

