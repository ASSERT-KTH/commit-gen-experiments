BLEU SCORE: 0.019833734500134766

TEST MSG: Issue # 2836 : moved inline strings to error message fields
GENERATED MSG: Fix non - static non - final all upper - case names in test code . # 1555

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule21filename / OuterTypeFilenameTest . java b / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule21filename / OuterTypeFilenameTest . java <nl> index c349ee2 . . 180a41c 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule21filename / OuterTypeFilenameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule21filename / OuterTypeFilenameTest . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package com . google . checkstyle . test . chapter2filebasic . rule21filename ; <nl> <nl> + import static com . puppycrawl . tools . checkstyle . checks . OuterTypeFilenameCheck . MSG _ KEY ; <nl> + <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> @ @ - 65 , 7 + 67 , 7 @ @ public class OuterTypeFilenameTest extends BaseCheckTestSupport { <nl> public void outerTypeFilenameTest3 ( ) throws Exception { <nl> <nl> final String [ ] expected = { <nl> - " 3 : " + getCheckMessage ( OuterTypeFilenameCheck . class , " type . file . mismatch " ) , <nl> + " 3 : " + getCheckMessage ( OuterTypeFilenameCheck . class , MSG _ KEY ) , <nl> } ; <nl> <nl> final Configuration checkConfig = getCheckConfig ( " OuterTypeFilename " ) ; <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule233nonascii / AvoidEscapedUnicodeCharactersTest . java b / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule233nonascii / AvoidEscapedUnicodeCharactersTest . java <nl> index a1e27ed . . 7432401 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule233nonascii / AvoidEscapedUnicodeCharactersTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule233nonascii / AvoidEscapedUnicodeCharactersTest . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package com . google . checkstyle . test . chapter2filebasic . rule233nonascii ; <nl> <nl> + import static com . puppycrawl . tools . checkstyle . checks . AvoidEscapedUnicodeCharactersCheck . MSG _ KEY ; <nl> + <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> @ @ - 39 , 16 + 41 , 13 @ @ public class AvoidEscapedUnicodeCharactersTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void unicodeEscapesTest ( ) throws Exception { <nl> <nl> - final String msg = getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , <nl> - " forbid . escaped . unicode . char " ) ; <nl> - <nl> final String [ ] expected = { <nl> - " 5 : " + msg , <nl> - " 15 : " + msg , <nl> - " 25 : " + msg , <nl> - " 33 : " + msg , <nl> - " 35 : " + msg , <nl> - " 36 : " + msg , <nl> + " 5 : " + getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , MSG _ KEY ) , <nl> + " 15 : " + getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , MSG _ KEY ) , <nl> + " 25 : " + getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , MSG _ KEY ) , <nl> + " 33 : " + getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , MSG _ KEY ) , <nl> + " 35 : " + getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , MSG _ KEY ) , <nl> + " 36 : " + getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , MSG _ KEY ) , <nl> } ; <nl> <nl> final Configuration checkConfig = getCheckConfig ( " AvoidEscapedUnicodeCharacters " ) ; <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java <nl> index 67173e1 . . 7f58a26 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package com . google . checkstyle . test . chapter4formatting . rule4832nocstylearray ; <nl> <nl> + import static com . puppycrawl . tools . checkstyle . checks . ArrayTypeStyleCheck . MSG _ KEY ; <nl> + <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> @ @ - 39 , 15 + 41 , 13 @ @ public class ArrayTypeStyleTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void arrayTypeStyleTest ( ) throws Exception { <nl> <nl> - final String msg = getCheckMessage ( ArrayTypeStyleCheck . class , " array . type . style " ) ; <nl> - <nl> final String [ ] expected = { <nl> - " 9 : 23 : " + msg , <nl> - " 15 : 44 : " + msg , <nl> - " 21 : 20 : " + msg , <nl> - " 22 : 23 : " + msg , <nl> - " 41 : 16 : " + msg , <nl> - " 42 : 19 : " + msg , <nl> + " 9 : 23 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> + " 15 : 44 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> + " 21 : 20 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> + " 22 : 23 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> + " 41 : 16 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> + " 42 : 19 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> } ; <nl> <nl> final Configuration checkConfig = getCheckConfig ( " ArrayTypeStyle " ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> index 608ddea . . 60bfa76 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> @ @ - 32 , 6 + 32 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * @ author lkuehne <nl> * / <nl> public class ArrayTypeStyleCheck extends Check { <nl> + / * * <nl> + * A key is pointing to the warning message text in " messages . properties " <nl> + * file . <nl> + * / <nl> + public static final String MSG _ KEY = " array . type . style " ; <nl> + <nl> / * * Controls whether to use Java or C style . * / <nl> private boolean javaStyle = true ; <nl> <nl> @ @ - 70 , 7 + 76 , 7 @ @ public class ArrayTypeStyleCheck extends Check { <nl> | | variableAST . getColumnNo ( ) > ast . getColumnNo ( ) ; <nl> <nl> if ( isJavaStyle ! = javaStyle ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , " array . type . style " ) ; <nl> + log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> index 7e7d7f3 . . 4c8a482 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> @ @ - 106 , 6 + 106 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * / <nl> public class AvoidEscapedUnicodeCharactersCheck <nl> extends Check { <nl> + / * * <nl> + * A key is pointing to the warning message text in " messages . properties " <nl> + * file . <nl> + * / <nl> + public static final String MSG _ KEY = " forbid . escaped . unicode . char " ; <nl> + <nl> / * * Regular expression for Unicode chars . * / <nl> private static final Pattern UNICODE _ REGEXP = Pattern . compile ( " \ \ \ \ u [ a - fA - F0 - 9 ] { 4 } " ) ; <nl> <nl> @ @ - 216 , 7 + 222 , 7 @ @ public class AvoidEscapedUnicodeCharactersCheck <nl> & & isOnlyUnicodeValidChars ( literal , UNICODE _ CONTROL ) <nl> | | allowNonPrintableEscapes <nl> & & isOnlyUnicodeValidChars ( literal , NON _ PRINTABLE _ CHARS ) ) ) { <nl> - log ( ast . getLineNo ( ) , " forbid . escaped . unicode . char " ) ; <nl> + log ( ast . getLineNo ( ) , MSG _ KEY ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java <nl> index 116c18d . . 90985e4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java <nl> @ @ - 32 , 6 + 32 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * @ author maxvetrenko <nl> * / <nl> public class OuterTypeFilenameCheck extends Check { <nl> + / * * <nl> + * A key is pointing to the warning message text in " messages . properties " <nl> + * file . <nl> + * / <nl> + public static final String MSG _ KEY = " type . file . mismatch " ; <nl> + <nl> / * * Pattern matching any file extension with dot included . * / <nl> private static final Pattern FILE _ EXTENSION _ PATTERN = Pattern . compile ( " \ \ . [ ^ \ \ . ] * $ " ) ; <nl> <nl> @ @ - 102 , 7 + 108 , 7 @ @ public class OuterTypeFilenameCheck extends Check { <nl> @ Override <nl> public void finishTree ( DetailAST rootAST ) { <nl> if ( ! validFirst & & ! hasPublic & & wrongType ! = null ) { <nl> - log ( wrongType . getLineNo ( ) , " type . file . mismatch " ) ; <nl> + log ( wrongType . getLineNo ( ) , MSG _ KEY ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java <nl> index f27ad35 . . b38bedd 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java <nl> @ @ - 46 , 6 + 46 , 12 @ @ import com . puppycrawl . tools . checkstyle . utils . AnnotationUtility ; <nl> * / <nl> public class PackageAnnotationCheck extends Check { <nl> <nl> + / * * <nl> + * A key is pointing to the warning message text in " messages . properties " <nl> + * file . <nl> + * / <nl> + public static final String MSG _ KEY = " annotation . package . location " ; <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> return getRequiredTokens ( ) ; <nl> @ @ - 71 , 7 + 77 , 7 @ @ public class PackageAnnotationCheck extends Check { <nl> getFileContents ( ) . inPackageInfo ( ) ; <nl> <nl> if ( containsAnnotation & & ! inPackageInfo ) { <nl> - log ( ast . getLine ( ) , " annotation . package . location " ) ; <nl> + log ( ast . getLine ( ) , MSG _ KEY ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java <nl> index 5a8df0a . . 2955b55 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java <nl> @ @ - 27 , 6 + 27 , 18 @ @ import java . util . regex . Matcher ; <nl> * @ author oliver <nl> * / <nl> class SinglelineDetector { <nl> + / * * <nl> + * A key is pointing to the warning message text in " messages . properties " <nl> + * file . <nl> + * / <nl> + public static final String MSG _ REGEXP _ EXCEEDED = " regexp . exceeded " ; <nl> + <nl> + / * * <nl> + * A key is pointing to the warning message text in " messages . properties " <nl> + * file . <nl> + * / <nl> + public static final String MSG _ REGEXP _ MINIMUM = " regexp . minimum " ; <nl> + <nl> / * * The detection options to use . * / <nl> private final DetectorOptions options ; <nl> / * * Tracks the number of matches . * / <nl> @ @ - 58 , 7 + 70 , 7 @ @ class SinglelineDetector { <nl> private void finish ( ) { <nl> if ( currentMatches < options . getMinimum ( ) ) { <nl> if ( options . getMessage ( ) . isEmpty ( ) ) { <nl> - options . getReporter ( ) . log ( 0 , " regexp . minimum " , <nl> + options . getReporter ( ) . log ( 0 , MSG _ REGEXP _ MINIMUM , <nl> options . getMinimum ( ) , options . getFormat ( ) ) ; <nl> } <nl> else { <nl> @ @ - 107 , 7 + 119 , 7 @ @ class SinglelineDetector { <nl> currentMatches + + ; <nl> if ( currentMatches > options . getMaximum ( ) ) { <nl> if ( options . getMessage ( ) . isEmpty ( ) ) { <nl> - options . getReporter ( ) . log ( lineNo , " regexp . exceeded " , <nl> + options . getReporter ( ) . log ( lineNo , MSG _ REGEXP _ EXCEEDED , <nl> matcher . pattern ( ) . toString ( ) ) ; <nl> } <nl> else { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java <nl> index f94b432 . . c3435ce 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> + import static com . puppycrawl . tools . checkstyle . checks . ArrayTypeStyleCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> <nl> @ @ - 51 , 8 + 52 , 8 @ @ public class ArrayTypeStyleCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( ArrayTypeStyleCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 14 : 23 : Array brackets at illegal position . " , <nl> - " 20 : 44 : Array brackets at illegal position . " , <nl> + " 14 : 23 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 20 : 44 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputArrayTypeStyle . java " ) , expected ) ; <nl> } <nl> @ @ - 64 , 10 + 65 , 10 @ @ public class ArrayTypeStyleCheckTest <nl> createCheckConfig ( ArrayTypeStyleCheck . class ) ; <nl> checkConfig . addAttribute ( " javaStyle " , " false " ) ; <nl> final String [ ] expected = { <nl> - " 13 : 16 : Array brackets at illegal position . " , <nl> - " 16 : 39 : Array brackets at illegal position . " , <nl> - " 22 : 18 : Array brackets at illegal position . " , <nl> - " 30 : 20 : Array brackets at illegal position . " , <nl> + " 13 : 16 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 16 : 39 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 22 : 18 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 30 : 20 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputArrayTypeStyle . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> index 5cc3b74 . . 79170d8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> + import static com . puppycrawl . tools . checkstyle . checks . AvoidEscapedUnicodeCharactersCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> import java . io . File ; <nl> @ @ - 31 , 8 + 32 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport { <nl> - private final String msg = getCheckMessage ( " forbid . escaped . unicode . char " ) ; <nl> - <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator + filename ) ; <nl> @ @ - 54 , 32 + 53 , 32 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( AvoidEscapedUnicodeCharactersCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 7 : " + msg , <nl> - " 9 : " + msg , <nl> - " 11 : " + msg , <nl> - " 15 : " + msg , <nl> - " 16 : " + msg , <nl> - " 20 : " + msg , <nl> - " 24 : " + msg , <nl> - " 25 : " + msg , <nl> - " 27 : " + msg , <nl> - " 31 : " + msg , <nl> - " 32 : " + msg , <nl> - " 33 : " + msg , <nl> - " 34 : " + msg , <nl> - " 42 : " + msg , <nl> - " 59 : " + msg , <nl> - " 60 : " + msg , <nl> - " 61 : " + msg , <nl> - " 62 : " + msg , <nl> - " 72 : " + msg , <nl> - " 73 : " + msg , <nl> - " 74 : " + msg , <nl> - " 75 : " + msg , <nl> - " 76 : " + msg , <nl> - " 77 : " + msg , <nl> - " 79 : " + msg , <nl> - " 82 : " + msg , <nl> + " 7 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 9 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 11 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 15 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 16 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 20 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 24 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 25 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 27 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 31 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 32 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 33 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 34 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 42 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 59 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 60 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 61 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 62 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 72 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 73 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 74 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 75 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 76 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 77 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 79 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 82 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; <nl> } <nl> @ @ - 90 , 29 + 89 , 29 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport <nl> createCheckConfig ( AvoidEscapedUnicodeCharactersCheck . class ) ; <nl> checkConfig . addAttribute ( " allowEscapesForControlCharacters " , " true " ) ; <nl> final String [ ] expected = { <nl> - " 7 : " + msg , <nl> - " 9 : " + msg , <nl> - " 11 : " + msg , <nl> - " 15 : " + msg , <nl> - " 16 : " + msg , <nl> - " 24 : " + msg , <nl> - " 25 : " + msg , <nl> - " 31 : " + msg , <nl> - " 32 : " + msg , <nl> - " 33 : " + msg , <nl> - " 34 : " + msg , <nl> - " 42 : " + msg , <nl> - " 59 : " + msg , <nl> - " 60 : " + msg , <nl> - " 61 : " + msg , <nl> - " 62 : " + msg , <nl> - " 73 : " + msg , <nl> - " 74 : " + msg , <nl> - " 75 : " + msg , <nl> - " 76 : " + msg , <nl> - " 77 : " + msg , <nl> - " 79 : " + msg , <nl> - " 82 : " + msg , <nl> + " 7 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 9 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 11 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 15 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 16 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 24 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 25 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 31 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 32 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 33 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 34 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 42 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 59 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 60 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 61 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 62 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 73 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 74 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 75 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 76 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 77 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 79 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 82 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; <nl> } <nl> @ @ - 123 , 24 + 122 , 24 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport <nl> createCheckConfig ( AvoidEscapedUnicodeCharactersCheck . class ) ; <nl> checkConfig . addAttribute ( " allowByTailComment " , " true " ) ; <nl> final String [ ] expected = { <nl> - " 7 : " + msg , <nl> - " 15 : " + msg , <nl> - " 24 : " + msg , <nl> - " 31 : " + msg , <nl> - " 33 : " + msg , <nl> - " 34 : " + msg , <nl> - " 59 : " + msg , <nl> - " 60 : " + msg , <nl> - " 61 : " + msg , <nl> - " 62 : " + msg , <nl> - " 72 : " + msg , <nl> - " 73 : " + msg , <nl> - " 74 : " + msg , <nl> - " 75 : " + msg , <nl> - " 76 : " + msg , <nl> - " 77 : " + msg , <nl> - " 79 : " + msg , <nl> - " 82 : " + msg , <nl> + " 7 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 15 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 24 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 31 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 33 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 34 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 59 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 60 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 61 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 62 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 72 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 73 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 74 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 75 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 76 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 77 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 79 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 82 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; <nl> } <nl> @ @ - 151 , 15 + 150 , 15 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport <nl> createCheckConfig ( AvoidEscapedUnicodeCharactersCheck . class ) ; <nl> checkConfig . addAttribute ( " allowIfAllCharactersEscaped " , " true " ) ; <nl> final String [ ] expected = { <nl> - " 7 : " + msg , <nl> - " 9 : " + msg , <nl> - " 11 : " + msg , <nl> - " 15 : " + msg , <nl> - " 16 : " + msg , <nl> - " 31 : " + msg , <nl> - " 32 : " + msg , <nl> - " 33 : " + msg , <nl> - " 42 : " + msg , <nl> + " 7 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 9 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 11 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 15 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 16 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 31 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 32 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 33 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 42 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; <nl> } <nl> @ @ - 170 , 18 + 169 , 18 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport <nl> createCheckConfig ( AvoidEscapedUnicodeCharactersCheck . class ) ; <nl> checkConfig . addAttribute ( " allowNonPrintableEscapes " , " true " ) ; <nl> final String [ ] expected = { <nl> - " 7 : " + msg , <nl> - " 9 : " + msg , <nl> - " 11 : " + msg , <nl> - " 15 : " + msg , <nl> - " 16 : " + msg , <nl> - " 24 : " + msg , <nl> - " 25 : " + msg , <nl> - " 31 : " + msg , <nl> - " 32 : " + msg , <nl> - " 33 : " + msg , <nl> - " 34 : " + msg , <nl> - " 42 : " + msg , <nl> + " 7 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 9 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 11 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 15 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 16 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 24 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 25 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 31 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 32 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 33 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 34 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 42 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java <nl> index 183e851 . . 2ed6918 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> + import static com . puppycrawl . tools . checkstyle . checks . OuterTypeFilenameCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> import java . io . File ; <nl> @ @ - 108 , 7 + 109 , 7 @ @ public class OuterTypeFilenameCheckTest extends BaseCheckTestSupport { <nl> public void testWrongDefault ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( OuterTypeFilenameCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 4 : " + getCheckMessage ( " type . file . mismatch " ) , <nl> + " 4 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputOuterTypeFilename5 . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java <nl> index ebb2fa3 . . c6f52c5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . annotation ; <nl> <nl> + import static com . puppycrawl . tools . checkstyle . checks . annotation . PackageAnnotationCheck . MSG _ KEY ; <nl> + <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> @ @ - 77 , 7 + 79 , 7 @ @ public class PackageAnnotationCheckTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( PackageAnnotationCheck . class ) ; <nl> <nl> final String [ ] expected = { <nl> - " 0 : Package annotations must be in the package - info . java info . " , <nl> + " 0 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> <nl> verify ( checkConfig , getNonCompilablePath ( " InputPackageAnnotation2 . java " ) , expected ) ;
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / CheckUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / CheckUtilsTest . java <nl> index bba8ea4 . . 0def1df 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / CheckUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / CheckUtilsTest . java <nl> @ @ - 21 , 8 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . TestUtils . assertUtilsClassHasPrivateConstructor ; <nl> <nl> - import java . lang . reflect . InvocationTargetException ; <nl> - <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 33 , 13 + 31 , 7 @ @ public class CheckUtilsTest { <nl> <nl> @ Test <nl> public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { <nl> - try { <nl> - assertUtilsClassHasPrivateConstructor ( CheckUtils . class ) ; <nl> - Assert . fail ( ) ; <nl> - } <nl> - catch ( InvocationTargetException ex ) { <nl> - Assert . assertTrue ( ex . getCause ( ) instanceof UnsupportedOperationException ) ; <nl> - } <nl> + assertUtilsClassHasPrivateConstructor ( CheckUtils . class ) ; <nl> } <nl> <nl> @ Test

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule21filename / OuterTypeFilenameTest . java b / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule21filename / OuterTypeFilenameTest . java 
 index c349ee2 . . 180a41c 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule21filename / OuterTypeFilenameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule21filename / OuterTypeFilenameTest . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package com . google . checkstyle . test . chapter2filebasic . rule21filename ; 
 
 + import static com . puppycrawl . tools . checkstyle . checks . OuterTypeFilenameCheck . MSG _ KEY ; 
 + 
 import java . io . File ; 
 import java . io . IOException ; 
 
 @ @ - 65 , 7 + 67 , 7 @ @ public class OuterTypeFilenameTest extends BaseCheckTestSupport { 
 public void outerTypeFilenameTest3 ( ) throws Exception { 
 
 final String [ ] expected = { 
 - " 3 : " + getCheckMessage ( OuterTypeFilenameCheck . class , " type . file . mismatch " ) , 
 + " 3 : " + getCheckMessage ( OuterTypeFilenameCheck . class , MSG _ KEY ) , 
 } ; 
 
 final Configuration checkConfig = getCheckConfig ( " OuterTypeFilename " ) ; 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule233nonascii / AvoidEscapedUnicodeCharactersTest . java b / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule233nonascii / AvoidEscapedUnicodeCharactersTest . java 
 index a1e27ed . . 7432401 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule233nonascii / AvoidEscapedUnicodeCharactersTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule233nonascii / AvoidEscapedUnicodeCharactersTest . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package com . google . checkstyle . test . chapter2filebasic . rule233nonascii ; 
 
 + import static com . puppycrawl . tools . checkstyle . checks . AvoidEscapedUnicodeCharactersCheck . MSG _ KEY ; 
 + 
 import java . io . File ; 
 import java . io . IOException ; 
 
 @ @ - 39 , 16 + 41 , 13 @ @ public class AvoidEscapedUnicodeCharactersTest extends BaseCheckTestSupport { 
 @ Test 
 public void unicodeEscapesTest ( ) throws Exception { 
 
 - final String msg = getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , 
 - " forbid . escaped . unicode . char " ) ; 
 - 
 final String [ ] expected = { 
 - " 5 : " + msg , 
 - " 15 : " + msg , 
 - " 25 : " + msg , 
 - " 33 : " + msg , 
 - " 35 : " + msg , 
 - " 36 : " + msg , 
 + " 5 : " + getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , MSG _ KEY ) , 
 + " 15 : " + getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , MSG _ KEY ) , 
 + " 25 : " + getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , MSG _ KEY ) , 
 + " 33 : " + getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , MSG _ KEY ) , 
 + " 35 : " + getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , MSG _ KEY ) , 
 + " 36 : " + getCheckMessage ( AvoidEscapedUnicodeCharactersCheck . class , MSG _ KEY ) , 
 } ; 
 
 final Configuration checkConfig = getCheckConfig ( " AvoidEscapedUnicodeCharacters " ) ; 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java 
 index 67173e1 . . 7f58a26 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package com . google . checkstyle . test . chapter4formatting . rule4832nocstylearray ; 
 
 + import static com . puppycrawl . tools . checkstyle . checks . ArrayTypeStyleCheck . MSG _ KEY ; 
 + 
 import java . io . File ; 
 import java . io . IOException ; 
 
 @ @ - 39 , 15 + 41 , 13 @ @ public class ArrayTypeStyleTest extends BaseCheckTestSupport { 
 @ Test 
 public void arrayTypeStyleTest ( ) throws Exception { 
 
 - final String msg = getCheckMessage ( ArrayTypeStyleCheck . class , " array . type . style " ) ; 
 - 
 final String [ ] expected = { 
 - " 9 : 23 : " + msg , 
 - " 15 : 44 : " + msg , 
 - " 21 : 20 : " + msg , 
 - " 22 : 23 : " + msg , 
 - " 41 : 16 : " + msg , 
 - " 42 : 19 : " + msg , 
 + " 9 : 23 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 + " 15 : 44 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 + " 21 : 20 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 + " 22 : 23 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 + " 41 : 16 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 + " 42 : 19 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 } ; 
 
 final Configuration checkConfig = getCheckConfig ( " ArrayTypeStyle " ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 index 608ddea . . 60bfa76 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 @ @ - 32 , 6 + 32 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * @ author lkuehne 
 * / 
 public class ArrayTypeStyleCheck extends Check { 
 + / * * 
 + * A key is pointing to the warning message text in " messages . properties " 
 + * file . 
 + * / 
 + public static final String MSG _ KEY = " array . type . style " ; 
 + 
 / * * Controls whether to use Java or C style . * / 
 private boolean javaStyle = true ; 
 
 @ @ - 70 , 7 + 76 , 7 @ @ public class ArrayTypeStyleCheck extends Check { 
 | | variableAST . getColumnNo ( ) > ast . getColumnNo ( ) ; 
 
 if ( isJavaStyle ! = javaStyle ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , " array . type . style " ) ; 
 + log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 index 7e7d7f3 . . 4c8a482 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 @ @ - 106 , 6 + 106 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * / 
 public class AvoidEscapedUnicodeCharactersCheck 
 extends Check { 
 + / * * 
 + * A key is pointing to the warning message text in " messages . properties " 
 + * file . 
 + * / 
 + public static final String MSG _ KEY = " forbid . escaped . unicode . char " ; 
 + 
 / * * Regular expression for Unicode chars . * / 
 private static final Pattern UNICODE _ REGEXP = Pattern . compile ( " \ \ \ \ u [ a - fA - F0 - 9 ] { 4 } " ) ; 
 
 @ @ - 216 , 7 + 222 , 7 @ @ public class AvoidEscapedUnicodeCharactersCheck 
 & & isOnlyUnicodeValidChars ( literal , UNICODE _ CONTROL ) 
 | | allowNonPrintableEscapes 
 & & isOnlyUnicodeValidChars ( literal , NON _ PRINTABLE _ CHARS ) ) ) { 
 - log ( ast . getLineNo ( ) , " forbid . escaped . unicode . char " ) ; 
 + log ( ast . getLineNo ( ) , MSG _ KEY ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java 
 index 116c18d . . 90985e4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java 
 @ @ - 32 , 6 + 32 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * @ author maxvetrenko 
 * / 
 public class OuterTypeFilenameCheck extends Check { 
 + / * * 
 + * A key is pointing to the warning message text in " messages . properties " 
 + * file . 
 + * / 
 + public static final String MSG _ KEY = " type . file . mismatch " ; 
 + 
 / * * Pattern matching any file extension with dot included . * / 
 private static final Pattern FILE _ EXTENSION _ PATTERN = Pattern . compile ( " \ \ . [ ^ \ \ . ] * $ " ) ; 
 
 @ @ - 102 , 7 + 108 , 7 @ @ public class OuterTypeFilenameCheck extends Check { 
 @ Override 
 public void finishTree ( DetailAST rootAST ) { 
 if ( ! validFirst & & ! hasPublic & & wrongType ! = null ) { 
 - log ( wrongType . getLineNo ( ) , " type . file . mismatch " ) ; 
 + log ( wrongType . getLineNo ( ) , MSG _ KEY ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java 
 index f27ad35 . . b38bedd 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java 
 @ @ - 46 , 6 + 46 , 12 @ @ import com . puppycrawl . tools . checkstyle . utils . AnnotationUtility ; 
 * / 
 public class PackageAnnotationCheck extends Check { 
 
 + / * * 
 + * A key is pointing to the warning message text in " messages . properties " 
 + * file . 
 + * / 
 + public static final String MSG _ KEY = " annotation . package . location " ; 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 return getRequiredTokens ( ) ; 
 @ @ - 71 , 7 + 77 , 7 @ @ public class PackageAnnotationCheck extends Check { 
 getFileContents ( ) . inPackageInfo ( ) ; 
 
 if ( containsAnnotation & & ! inPackageInfo ) { 
 - log ( ast . getLine ( ) , " annotation . package . location " ) ; 
 + log ( ast . getLine ( ) , MSG _ KEY ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java 
 index 5a8df0a . . 2955b55 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / SinglelineDetector . java 
 @ @ - 27 , 6 + 27 , 18 @ @ import java . util . regex . Matcher ; 
 * @ author oliver 
 * / 
 class SinglelineDetector { 
 + / * * 
 + * A key is pointing to the warning message text in " messages . properties " 
 + * file . 
 + * / 
 + public static final String MSG _ REGEXP _ EXCEEDED = " regexp . exceeded " ; 
 + 
 + / * * 
 + * A key is pointing to the warning message text in " messages . properties " 
 + * file . 
 + * / 
 + public static final String MSG _ REGEXP _ MINIMUM = " regexp . minimum " ; 
 + 
 / * * The detection options to use . * / 
 private final DetectorOptions options ; 
 / * * Tracks the number of matches . * / 
 @ @ - 58 , 7 + 70 , 7 @ @ class SinglelineDetector { 
 private void finish ( ) { 
 if ( currentMatches < options . getMinimum ( ) ) { 
 if ( options . getMessage ( ) . isEmpty ( ) ) { 
 - options . getReporter ( ) . log ( 0 , " regexp . minimum " , 
 + options . getReporter ( ) . log ( 0 , MSG _ REGEXP _ MINIMUM , 
 options . getMinimum ( ) , options . getFormat ( ) ) ; 
 } 
 else { 
 @ @ - 107 , 7 + 119 , 7 @ @ class SinglelineDetector { 
 currentMatches + + ; 
 if ( currentMatches > options . getMaximum ( ) ) { 
 if ( options . getMessage ( ) . isEmpty ( ) ) { 
 - options . getReporter ( ) . log ( lineNo , " regexp . exceeded " , 
 + options . getReporter ( ) . log ( lineNo , MSG _ REGEXP _ EXCEEDED , 
 matcher . pattern ( ) . toString ( ) ) ; 
 } 
 else { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java 
 index f94b432 . . c3435ce 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 + import static com . puppycrawl . tools . checkstyle . checks . ArrayTypeStyleCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 
 @ @ - 51 , 8 + 52 , 8 @ @ public class ArrayTypeStyleCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( ArrayTypeStyleCheck . class ) ; 
 final String [ ] expected = { 
 - " 14 : 23 : Array brackets at illegal position . " , 
 - " 20 : 44 : Array brackets at illegal position . " , 
 + " 14 : 23 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 20 : 44 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputArrayTypeStyle . java " ) , expected ) ; 
 } 
 @ @ - 64 , 10 + 65 , 10 @ @ public class ArrayTypeStyleCheckTest 
 createCheckConfig ( ArrayTypeStyleCheck . class ) ; 
 checkConfig . addAttribute ( " javaStyle " , " false " ) ; 
 final String [ ] expected = { 
 - " 13 : 16 : Array brackets at illegal position . " , 
 - " 16 : 39 : Array brackets at illegal position . " , 
 - " 22 : 18 : Array brackets at illegal position . " , 
 - " 30 : 20 : Array brackets at illegal position . " , 
 + " 13 : 16 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 16 : 39 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 22 : 18 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 30 : 20 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputArrayTypeStyle . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 index 5cc3b74 . . 79170d8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 + import static com . puppycrawl . tools . checkstyle . checks . AvoidEscapedUnicodeCharactersCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 
 import java . io . File ; 
 @ @ - 31 , 8 + 32 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport { 
 - private final String msg = getCheckMessage ( " forbid . escaped . unicode . char " ) ; 
 - 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator + filename ) ; 
 @ @ - 54 , 32 + 53 , 32 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( AvoidEscapedUnicodeCharactersCheck . class ) ; 
 final String [ ] expected = { 
 - " 7 : " + msg , 
 - " 9 : " + msg , 
 - " 11 : " + msg , 
 - " 15 : " + msg , 
 - " 16 : " + msg , 
 - " 20 : " + msg , 
 - " 24 : " + msg , 
 - " 25 : " + msg , 
 - " 27 : " + msg , 
 - " 31 : " + msg , 
 - " 32 : " + msg , 
 - " 33 : " + msg , 
 - " 34 : " + msg , 
 - " 42 : " + msg , 
 - " 59 : " + msg , 
 - " 60 : " + msg , 
 - " 61 : " + msg , 
 - " 62 : " + msg , 
 - " 72 : " + msg , 
 - " 73 : " + msg , 
 - " 74 : " + msg , 
 - " 75 : " + msg , 
 - " 76 : " + msg , 
 - " 77 : " + msg , 
 - " 79 : " + msg , 
 - " 82 : " + msg , 
 + " 7 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 9 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 11 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 15 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 16 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 20 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 24 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 25 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 27 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 31 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 32 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 33 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 34 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 42 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 59 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 60 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 61 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 62 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 72 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 73 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 74 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 75 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 76 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 77 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 79 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 82 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; 
 } 
 @ @ - 90 , 29 + 89 , 29 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport 
 createCheckConfig ( AvoidEscapedUnicodeCharactersCheck . class ) ; 
 checkConfig . addAttribute ( " allowEscapesForControlCharacters " , " true " ) ; 
 final String [ ] expected = { 
 - " 7 : " + msg , 
 - " 9 : " + msg , 
 - " 11 : " + msg , 
 - " 15 : " + msg , 
 - " 16 : " + msg , 
 - " 24 : " + msg , 
 - " 25 : " + msg , 
 - " 31 : " + msg , 
 - " 32 : " + msg , 
 - " 33 : " + msg , 
 - " 34 : " + msg , 
 - " 42 : " + msg , 
 - " 59 : " + msg , 
 - " 60 : " + msg , 
 - " 61 : " + msg , 
 - " 62 : " + msg , 
 - " 73 : " + msg , 
 - " 74 : " + msg , 
 - " 75 : " + msg , 
 - " 76 : " + msg , 
 - " 77 : " + msg , 
 - " 79 : " + msg , 
 - " 82 : " + msg , 
 + " 7 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 9 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 11 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 15 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 16 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 24 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 25 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 31 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 32 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 33 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 34 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 42 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 59 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 60 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 61 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 62 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 73 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 74 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 75 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 76 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 77 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 79 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 82 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; 
 } 
 @ @ - 123 , 24 + 122 , 24 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport 
 createCheckConfig ( AvoidEscapedUnicodeCharactersCheck . class ) ; 
 checkConfig . addAttribute ( " allowByTailComment " , " true " ) ; 
 final String [ ] expected = { 
 - " 7 : " + msg , 
 - " 15 : " + msg , 
 - " 24 : " + msg , 
 - " 31 : " + msg , 
 - " 33 : " + msg , 
 - " 34 : " + msg , 
 - " 59 : " + msg , 
 - " 60 : " + msg , 
 - " 61 : " + msg , 
 - " 62 : " + msg , 
 - " 72 : " + msg , 
 - " 73 : " + msg , 
 - " 74 : " + msg , 
 - " 75 : " + msg , 
 - " 76 : " + msg , 
 - " 77 : " + msg , 
 - " 79 : " + msg , 
 - " 82 : " + msg , 
 + " 7 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 15 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 24 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 31 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 33 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 34 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 59 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 60 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 61 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 62 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 72 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 73 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 74 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 75 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 76 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 77 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 79 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 82 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; 
 } 
 @ @ - 151 , 15 + 150 , 15 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport 
 createCheckConfig ( AvoidEscapedUnicodeCharactersCheck . class ) ; 
 checkConfig . addAttribute ( " allowIfAllCharactersEscaped " , " true " ) ; 
 final String [ ] expected = { 
 - " 7 : " + msg , 
 - " 9 : " + msg , 
 - " 11 : " + msg , 
 - " 15 : " + msg , 
 - " 16 : " + msg , 
 - " 31 : " + msg , 
 - " 32 : " + msg , 
 - " 33 : " + msg , 
 - " 42 : " + msg , 
 + " 7 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 9 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 11 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 15 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 16 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 31 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 32 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 33 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 42 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; 
 } 
 @ @ - 170 , 18 + 169 , 18 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport 
 createCheckConfig ( AvoidEscapedUnicodeCharactersCheck . class ) ; 
 checkConfig . addAttribute ( " allowNonPrintableEscapes " , " true " ) ; 
 final String [ ] expected = { 
 - " 7 : " + msg , 
 - " 9 : " + msg , 
 - " 11 : " + msg , 
 - " 15 : " + msg , 
 - " 16 : " + msg , 
 - " 24 : " + msg , 
 - " 25 : " + msg , 
 - " 31 : " + msg , 
 - " 32 : " + msg , 
 - " 33 : " + msg , 
 - " 34 : " + msg , 
 - " 42 : " + msg , 
 + " 7 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 9 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 11 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 15 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 16 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 24 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 25 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 31 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 32 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 33 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 34 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 42 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java 
 index 183e851 . . 2ed6918 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 + import static com . puppycrawl . tools . checkstyle . checks . OuterTypeFilenameCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 
 import java . io . File ; 
 @ @ - 108 , 7 + 109 , 7 @ @ public class OuterTypeFilenameCheckTest extends BaseCheckTestSupport { 
 public void testWrongDefault ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( OuterTypeFilenameCheck . class ) ; 
 final String [ ] expected = { 
 - " 4 : " + getCheckMessage ( " type . file . mismatch " ) , 
 + " 4 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputOuterTypeFilename5 . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java 
 index ebb2fa3 . . c6f52c5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . annotation ; 
 
 + import static com . puppycrawl . tools . checkstyle . checks . annotation . PackageAnnotationCheck . MSG _ KEY ; 
 + 
 import java . io . File ; 
 import java . io . IOException ; 
 
 @ @ - 77 , 7 + 79 , 7 @ @ public class PackageAnnotationCheckTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkConfig = createCheckConfig ( PackageAnnotationCheck . class ) ; 
 
 final String [ ] expected = { 
 - " 0 : Package annotations must be in the package - info . java info . " , 
 + " 0 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 
 verify ( checkConfig , getNonCompilablePath ( " InputPackageAnnotation2 . java " ) , expected ) ;

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / CheckUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / CheckUtilsTest . java 
 index bba8ea4 . . 0def1df 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / CheckUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / CheckUtilsTest . java 
 @ @ - 21 , 8 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks ; 
 
 import static com . puppycrawl . tools . checkstyle . TestUtils . assertUtilsClassHasPrivateConstructor ; 
 
 - import java . lang . reflect . InvocationTargetException ; 
 - 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 @ @ - 33 , 13 + 31 , 7 @ @ public class CheckUtilsTest { 
 
 @ Test 
 public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { 
 - try { 
 - assertUtilsClassHasPrivateConstructor ( CheckUtils . class ) ; 
 - Assert . fail ( ) ; 
 - } 
 - catch ( InvocationTargetException ex ) { 
 - Assert . assertTrue ( ex . getCause ( ) instanceof UnsupportedOperationException ) ; 
 - } 
 + assertUtilsClassHasPrivateConstructor ( CheckUtils . class ) ; 
 } 
 
 @ Test
