BLEU SCORE: 0.08295193507109855

TEST MSG: Issue # 2161 : unify test input locations for grammars package
GENERATED MSG: Issue # 1555 : Remove catch of unexpected exceptions in tests

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / EmbeddedNullCharTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / EmbeddedNullCharTest . java <nl> index fe55ac4 . . 7732fa7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / EmbeddedNullCharTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / EmbeddedNullCharTest . java <nl> @ @ - 19 , 6 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> * / <nl> public class EmbeddedNullCharTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " grammars " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testCanParse ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( MemberNameCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " grammars / InputEmbeddedNullChar . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputEmbeddedNullChar . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java <nl> index cbd1931 . . 5928b2b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . apache . commons . lang3 . SystemUtils ; <nl> @ @ - 17 , 6 + 18 , 16 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> * / <nl> public class GeneratedJava14LexerTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " grammars " + File . separator + filename ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected String getNonCompilablePath ( String filename ) throws IOException { <nl> + return super . getNonCompilablePath ( " grammars " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testUnexpectedChar ( ) throws Exception { <nl> Assume . assumeFalse ( SystemUtils . IS _ OS _ WINDOWS ) ; / / Encoding problems can occur in Windows <nl> @ @ - 25 , 7 + 36 , 7 @ @ public class GeneratedJava14LexerTest <nl> final String [ ] expected = { <nl> " 7 : 9 : Name ' Ã Я ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " grammars / InputGrammar . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputGrammar . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 33 , 7 + 44 , 6 @ @ public class GeneratedJava14LexerTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( MemberNameCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / " <nl> - + " checkstyle / grammars / SemicolonBetweenImports . java " ) . getCanonicalPath ( ) , expected ) ; <nl> + verify ( checkConfig , getNonCompilablePath ( " SemicolonBetweenImports . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / HexFloatsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / HexFloatsTest . java <nl> index ec81ab8 . . 23c59d9 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / HexFloatsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / HexFloatsTest . java <nl> @ @ - 19 , 6 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> * / <nl> public class HexFloatsTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " grammars " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testCanParse ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( MemberNameCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " grammars / InputHexFloat . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputHexFloat . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7DiamondTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7DiamondTest . java <nl> index f820abb . . 1ced6d9 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7DiamondTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7DiamondTest . java <nl> @ @ - 19 , 6 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> * / <nl> public class Java7DiamondTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " grammars " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testCanParse ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( MemberNameCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " grammars / InputJava7Diamond . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputJava7Diamond . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7MultiCatchTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7MultiCatchTest . java <nl> index 27df086 . . ad8b64b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7MultiCatchTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7MultiCatchTest . java <nl> @ @ - 19 , 6 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> * / <nl> public class Java7MultiCatchTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " grammars " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testCanParse ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( MemberNameCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " grammars / InputJava7MultiCatch . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputJava7MultiCatch . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7NumericalLiteralsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7NumericalLiteralsTest . java <nl> index 6876365 . . d9c941a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7NumericalLiteralsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7NumericalLiteralsTest . java <nl> @ @ - 19 , 6 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> * / <nl> public class Java7NumericalLiteralsTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " grammars " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testCanParse ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( MemberNameCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " grammars / InputJava7NumericalLiterals . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputJava7NumericalLiterals . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7StringSwitchTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7StringSwitchTest . java <nl> index 2a6f3e0 . . 493bbd9 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7StringSwitchTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7StringSwitchTest . java <nl> @ @ - 19 , 6 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> * / <nl> public class Java7StringSwitchTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " grammars " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testCanParse ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( MemberNameCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " grammars / InputJava7StringSwitch . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputJava7StringSwitch . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7TryWithResourcesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7TryWithResourcesTest . java <nl> index 89b5d91 . . 7ebbc6e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7TryWithResourcesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7TryWithResourcesTest . java <nl> @ @ - 19 , 6 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> * / <nl> public class Java7TryWithResourcesTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " grammars " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testCanParse ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( MemberNameCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " grammars / InputJava7TryWithResources . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputJava7TryWithResources . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / LineCommentAtTheEndOfFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / LineCommentAtTheEndOfFileTest . java <nl> index 40bb999 . . ed80996 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / LineCommentAtTheEndOfFileTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / LineCommentAtTheEndOfFileTest . java <nl> @ @ - 19 , 6 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 34 , 13 + 37 , 18 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> * / <nl> public class LineCommentAtTheEndOfFileTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " grammars " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testCanParse ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( MemberNameCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " grammars / LineCommentAtTheEndOfFile . java " ) , <nl> + verify ( checkConfig , getPath ( " LineCommentAtTheEndOfFile . java " ) , <nl> expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / MultiDimensionalArraysInGenericsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / MultiDimensionalArraysInGenericsTest . java <nl> index 3d58e37 . . 4a2e4a4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / MultiDimensionalArraysInGenericsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / MultiDimensionalArraysInGenericsTest . java <nl> @ @ - 19 , 6 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 28 , 6 + 31 , 11 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> <nl> public class MultiDimensionalArraysInGenericsTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " grammars " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testCanParse ( ) <nl> throws Exception { <nl> @ @ - 35 , 7 + 43 , 7 @ @ public class MultiDimensionalArraysInGenericsTest <nl> createCheckConfig ( MemberNameCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , <nl> - getPath ( " grammars / MultiDimensionalArraysInGenericsTestInput . java " ) , <nl> + getPath ( " MultiDimensionalArraysInGenericsTestInput . java " ) , <nl> expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / UnicodeEscapeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / UnicodeEscapeTest . java <nl> index 8dd6032 . . e66539b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / UnicodeEscapeTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / UnicodeEscapeTest . java <nl> @ @ - 19 , 6 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> * / <nl> public class UnicodeEscapeTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " grammars " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testCanParse ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( MemberNameCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " grammars / UnicodeEscape . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " UnicodeEscape . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / VarargTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / VarargTest . java <nl> index 7f4080e . . 2df6342 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / VarargTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / VarargTest . java <nl> @ @ - 19 , 6 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> * / <nl> public class VarargTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " grammars " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testCanParse ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( MemberNameCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " grammars / InputVararg . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputVararg . java " ) , expected ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java <nl> index 50b09a4 . . 4349497 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java <nl> @ @ - 66 , 7 + 66 , 7 @ @ public class ArrayTrailingCommaCheck extends Check { <nl> public void visitToken ( DetailAST arrayInit ) { <nl> final DetailAST rcurly = arrayInit . findFirstToken ( TokenTypes . RCURLY ) ; <nl> <nl> - / / if curlys are on the same line <nl> + / / if curlies are on the same line <nl> / / or array is empty then check nothing <nl> if ( arrayInit . getLineNo ( ) = = rcurly . getLineNo ( ) <nl> | | arrayInit . getChildCount ( ) = = 1 ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> index ac1038a . . ee81299 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> @ @ - 226 , 7 + 226 , 7 @ @ public class DeclarationOrderCheck extends Check { <nl> <nl> / * * <nl> * Process Method Token <nl> - * @ param ast , ethod token AST <nl> + * @ param ast method token AST <nl> * / <nl> private void processMethod ( DetailAST ast ) { <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> index 5b76f4b . . 13cd786 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> @ @ - 161 , 7 + 161 , 7 @ @ public class EqualsAvoidNullCheck extends Check { <nl> * Checks for calling equals on String literal and <nl> * anon object which cannot be null <nl> * Also , checks if calling using strange inner class <nl> - * syntax outter . inner . equals ( otherObj ) by looking <nl> + * syntax outer . inner . equals ( otherObj ) by looking <nl> * for the dot operator which cannot be improved <nl> * @ param objCalledOn object AST <nl> * @ return if it is string literal <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> index 20baa7c . . d8c2409 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> @ @ - 102 , 8 + 102 , 8 @ @ public class ExplicitInitializationCheck extends Check { <nl> } <nl> <nl> / * * <nl> - * Examin Char literal for initializing to default value <nl> - * @ param exprStart exprssion <nl> + * Examine char literal for initializing to default value <nl> + * @ param exprStart expression <nl> * @ return true is literal is initialized by zero symbol <nl> * / <nl> private static boolean isZeroChar ( DetailAST exprStart ) { <nl> @ @ - 113 , 7 + 113 , 7 @ @ public class ExplicitInitializationCheck extends Check { <nl> } <nl> <nl> / * * <nl> - * Chekc for cases that should be skipped : no assignment , local variable , final variables <nl> + * Chekck for cases that should be skipped : no assignment , local variable , final variables <nl> * @ param ast Variable def AST <nl> * @ return true is that is a case that need to be skipped . <nl> * / <nl> @ @ - 136 , 7 + 136 , 7 @ @ public class ExplicitInitializationCheck extends Check { <nl> } <nl> <nl> / * * <nl> - * Determines if a giiven type is an object type . <nl> + * Determines if a given type is an object type . <nl> * @ param type type to check . <nl> * @ return true if it is an object type . <nl> * / <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> index c29fb39 . . 8ca67c9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> @ @ - 84 , 7 + 84 , 7 @ @ public class FallThroughCheck extends Check { <nl> / * * Do we need to check last case group . * / <nl> private boolean checkLastCaseGroup ; <nl> <nl> - / * * Relief pattern to allow fall throught to the next case branch . * / <nl> + / * * Relief pattern to allow fall through to the next case branch . * / <nl> private String reliefPattern = " fallthru | falls ? ? through " ; <nl> <nl> / * * Relief regexp . * / <nl> @ @ - 256 , 7 + 256 , 7 @ @ public class FallThroughCheck extends Check { <nl> * @ param ast loop to check <nl> * @ param useBreak should we consider break as terminator . <nl> * @ param useContinue should we consider continue as terminator . <nl> - * @ return true if try / cath / finally block is terminated . <nl> + * @ return true if try / catch / finally block is terminated . <nl> * / <nl> private boolean checkTry ( final DetailAST ast , boolean useBreak , <nl> boolean useContinue ) { <nl> @ @ - 300 , 7 + 300 , 7 @ @ public class FallThroughCheck extends Check { <nl> <nl> / * * <nl> * Determines if the fall through case between { @ code currentCase } and <nl> - * { @ code nextCase } is reliefed by a appropriate comment . <nl> + * { @ code nextCase } is relieved by a appropriate comment . <nl> * <nl> * @ param currentCase AST of the case that falls through to the next case . <nl> * @ param nextCase AST of the next case . <nl> @ @ - 329 , 8 + 329 , 8 @ @ public class FallThroughCheck extends Check { <nl> * default : <nl> * / + FALLTHRU + / } <nl> * / <nl> - final String linepart = lines [ endLineNo - 1 ] . substring ( 0 , endColNo ) ; <nl> - if ( commentMatch ( regExp , linepart , endLineNo ) ) { <nl> + final String linePart = lines [ endLineNo - 1 ] . substring ( 0 , endColNo ) ; <nl> + if ( commentMatch ( regExp , linePart , endLineNo ) ) { <nl> return true ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> index 622e969 . . 76c7a10 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> @ @ - 265 , 9 + 265 , 9 @ @ public class FinalLocalVariableCheck extends Check { <nl> } <nl> <nl> / * * <nl> - * Check if current param is lamda ' s param . <nl> + * Check if current param is lambda ' s param . <nl> * @ param paramDef { @ link TokenTypes # PARAMETER _ DEF parameter def } . <nl> - * @ return true if current param is lamda ' s param . <nl> + * @ return true if current param is lambda ' s param . <nl> * / <nl> private static boolean isInLambda ( DetailAST paramDef ) { <nl> return paramDef . getParent ( ) . getParent ( ) . getType ( ) = = TokenTypes . LAMBDA ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> index 562c414 . . 022860d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> @ @ - 283 , 7 + 283 , 7 @ @ public class HiddenFieldCheck <nl> final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> final String name = nameAST . getText ( ) ; <nl> <nl> - if ( isStaticOrOnstanceField ( ast , name ) <nl> + if ( isStaticOrInstanceField ( ast , name ) <nl> & & ! isMatchingRegexp ( name ) <nl> & & ! isIgnoredSetterParam ( ast , name ) <nl> & & ! isIgnoredConstructorParam ( ast ) <nl> @ @ - 299 , 7 + 299 , 7 @ @ public class HiddenFieldCheck <nl> * @ param name identifier of token <nl> * @ return true if static or instance field <nl> * / <nl> - private boolean isStaticOrOnstanceField ( DetailAST ast , String name ) { <nl> + private boolean isStaticOrInstanceField ( DetailAST ast , String name ) { <nl> return frame . containsStaticField ( name ) <nl> | | ! isInStatic ( ast ) & & frame . containsInstanceField ( name ) ; <nl> } <nl> @ @ - 448 , 7 + 448 , 7 @ @ public class HiddenFieldCheck <nl> * abstract method . <nl> * @ param ast the AST to check . <nl> * @ return true if ast should be ignored because check property <nl> - * ignoreAbstactMethods is true and ast is a parameter of abstract <nl> + * ignoreAbstractMethods is true and ast is a parameter of abstract <nl> * methods . <nl> * / <nl> private boolean isIgnoredParamOfAbstractMethod ( DetailAST ast ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java <nl> index 3a24037 . . 553a730 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java <nl> @ @ - 63 , 10 + 63 , 10 @ @ public final class IllegalCatchCheck extends AbstractIllegalCheck { <nl> <nl> @ Override <nl> public void visitToken ( DetailAST detailAST ) { <nl> - final DetailAST paradef = <nl> + final DetailAST parameterDef = <nl> detailAST . findFirstToken ( TokenTypes . PARAMETER _ DEF ) ; <nl> final DetailAST excTypeParent = <nl> - paradef . findFirstToken ( TokenTypes . TYPE ) ; <nl> + parameterDef . findFirstToken ( TokenTypes . TYPE ) ; <nl> final List < DetailAST > excTypes = getAllExceptionTypes ( excTypeParent ) ; <nl> <nl> for ( DetailAST excType : excTypes ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> index 5c37b4b . . 396be82 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> @ @ - 75 , 7 + 75 , 7 @ @ public class IllegalInstantiationCheck <nl> / * * { @ link java . lang } package as string * / <nl> private static final String JAVA _ LANG = " java . lang . " ; <nl> <nl> - / * * Set of fully qualified classnames . E . g . " java . lang . Boolean " * / <nl> + / * * Set of fully qualified class names . E . g . " java . lang . Boolean " * / <nl> private final Set < String > illegalClasses = Sets . newHashSet ( ) ; <nl> <nl> / * * Name of the package * / <nl> @ @ - 147 , 7 + 147 , 7 @ @ public class IllegalInstantiationCheck <nl> @ Override <nl> public void finishTree ( DetailAST rootAST ) { <nl> for ( DetailAST literalNewAST : instantiations ) { <nl> - postprocessLiteralNew ( literalNewAST ) ; <nl> + postProcessLiteralNew ( literalNewAST ) ; <nl> } <nl> } <nl> <nl> @ @ - 155 , 7 + 155 , 7 @ @ public class IllegalInstantiationCheck <nl> * Collects classes defined in the source file . Required <nl> * to avoid false alarms for local vs . java . lang classes . <nl> * <nl> - * @ param ast the classdef token . <nl> + * @ param ast the class def token . <nl> * / <nl> private void processClassDef ( DetailAST ast ) { <nl> final DetailAST identToken = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> @ @ - 197 , 11 + 197 , 11 @ @ public class IllegalInstantiationCheck <nl> } <nl> <nl> / * * <nl> - * Processes one of the collected " new " tokens when treewalking <nl> + * Processes one of the collected " new " tokens when walking tree <nl> * has finished . <nl> * @ param newTokenAst the " new " token . <nl> * / <nl> - private void postprocessLiteralNew ( DetailAST newTokenAst ) { <nl> + private void postProcessLiteralNew ( DetailAST newTokenAst ) { <nl> final DetailAST typeNameAst = newTokenAst . getFirstChild ( ) ; <nl> final AST nameSibling = typeNameAst . getNextSibling ( ) ; <nl> if ( nameSibling . getType ( ) = = TokenTypes . ARRAY _ DECLARATOR ) { <nl> @ @ - 257 , 7 + 257 , 7 @ @ public class IllegalInstantiationCheck <nl> / * * <nl> * Check import statements <nl> * @ param className name of the class <nl> - * @ return value of illegal instatiated type <nl> + * @ return value of illegal instantiated type <nl> * / <nl> private String checkImportStatements ( String className ) { <nl> String illegalType = null ; <nl> @ @ - 268 , 7 + 268 , 7 @ @ public class IllegalInstantiationCheck <nl> final String fqClass = <nl> importArg . substring ( 0 , importArg . length ( ) - 1 ) <nl> + className ; <nl> - / / assume that illegalInsts only contain existing classes <nl> + / / assume that illegalInstances only contain existing classes <nl> / / or else we might create a false alarm here <nl> if ( illegalClasses . contains ( fqClass ) ) { <nl> illegalType = fqClass ; <nl> @ @ - 296 , 8 + 296 , 8 @ @ public class IllegalInstantiationCheck <nl> private boolean isSamePackage ( String className , int pkgNameLen , String illegal ) { <nl> / / class from same package <nl> <nl> - / / the toplevel package ( pkgName = = null ) is covered by the <nl> - / / " illegalInsts . contains ( className ) " check above <nl> + / / the top level package ( pkgName = = null ) is covered by the <nl> + / / " illegalInstances . contains ( className ) " check above <nl> <nl> / / the test is the " no garbage " version of <nl> / / illegal . equals ( pkgName + " . " + className ) <nl> @ @ - 360 , 7 + 360 , 7 @ @ public class IllegalInstantiationCheck <nl> <nl> / * * <nl> * Sets the classes that are illegal to instantiate . <nl> - * @ param names a comma seperate list of class names <nl> + * @ param names a comma separate list of class names <nl> * / <nl> public void setClasses ( String names ) { <nl> illegalClasses . clear ( ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> index dbf38ab . . dd8ba69 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> @ @ - 227 , 14 + 227 , 14 @ @ public final class IllegalTypeCheck extends AbstractFormatCheck { <nl> <nl> / * * <nl> * Checks type of parameters . <nl> - * @ param paradef parameter list for check . <nl> + * @ param parameterDef parameter list for check . <nl> * / <nl> - private void visitParameterDef ( DetailAST paradef ) { <nl> - final DetailAST grandParentAST = paradef . getParent ( ) . getParent ( ) ; <nl> + private void visitParameterDef ( DetailAST parameterDef ) { <nl> + final DetailAST grandParentAST = parameterDef . getParent ( ) . getParent ( ) ; <nl> <nl> if ( grandParentAST . getType ( ) = = TokenTypes . METHOD _ DEF <nl> & & isCheckedMethod ( grandParentAST ) ) { <nl> - checkClassName ( paradef ) ; <nl> + checkClassName ( parameterDef ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / EmbeddedNullCharTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / EmbeddedNullCharTest . java 
 index fe55ac4 . . 7732fa7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / EmbeddedNullCharTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / EmbeddedNullCharTest . java 
 @ @ - 19 , 6 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . grammars ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 * / 
 public class EmbeddedNullCharTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " grammars " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testCanParse ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( MemberNameCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " grammars / InputEmbeddedNullChar . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputEmbeddedNullChar . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java 
 index cbd1931 . . 5928b2b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJava14LexerTest . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle . grammars ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . apache . commons . lang3 . SystemUtils ; 
 @ @ - 17 , 6 + 18 , 16 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 * / 
 public class GeneratedJava14LexerTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " grammars " + File . separator + filename ) ; 
 + } 
 + 
 + @ Override 
 + protected String getNonCompilablePath ( String filename ) throws IOException { 
 + return super . getNonCompilablePath ( " grammars " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testUnexpectedChar ( ) throws Exception { 
 Assume . assumeFalse ( SystemUtils . IS _ OS _ WINDOWS ) ; / / Encoding problems can occur in Windows 
 @ @ - 25 , 7 + 36 , 7 @ @ public class GeneratedJava14LexerTest 
 final String [ ] expected = { 
 " 7 : 9 : Name ' Ã Я ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 } ; 
 - verify ( checkConfig , getPath ( " grammars / InputGrammar . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputGrammar . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 33 , 7 + 44 , 6 @ @ public class GeneratedJava14LexerTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( MemberNameCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / " 
 - + " checkstyle / grammars / SemicolonBetweenImports . java " ) . getCanonicalPath ( ) , expected ) ; 
 + verify ( checkConfig , getNonCompilablePath ( " SemicolonBetweenImports . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / HexFloatsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / HexFloatsTest . java 
 index ec81ab8 . . 23c59d9 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / HexFloatsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / HexFloatsTest . java 
 @ @ - 19 , 6 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . grammars ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 * / 
 public class HexFloatsTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " grammars " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testCanParse ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( MemberNameCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " grammars / InputHexFloat . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputHexFloat . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7DiamondTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7DiamondTest . java 
 index f820abb . . 1ced6d9 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7DiamondTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7DiamondTest . java 
 @ @ - 19 , 6 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . grammars ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 * / 
 public class Java7DiamondTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " grammars " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testCanParse ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( MemberNameCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " grammars / InputJava7Diamond . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputJava7Diamond . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7MultiCatchTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7MultiCatchTest . java 
 index 27df086 . . ad8b64b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7MultiCatchTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7MultiCatchTest . java 
 @ @ - 19 , 6 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . grammars ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 * / 
 public class Java7MultiCatchTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " grammars " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testCanParse ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( MemberNameCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " grammars / InputJava7MultiCatch . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputJava7MultiCatch . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7NumericalLiteralsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7NumericalLiteralsTest . java 
 index 6876365 . . d9c941a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7NumericalLiteralsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7NumericalLiteralsTest . java 
 @ @ - 19 , 6 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . grammars ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 * / 
 public class Java7NumericalLiteralsTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " grammars " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testCanParse ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( MemberNameCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " grammars / InputJava7NumericalLiterals . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputJava7NumericalLiterals . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7StringSwitchTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7StringSwitchTest . java 
 index 2a6f3e0 . . 493bbd9 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7StringSwitchTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7StringSwitchTest . java 
 @ @ - 19 , 6 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . grammars ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 * / 
 public class Java7StringSwitchTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " grammars " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testCanParse ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( MemberNameCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " grammars / InputJava7StringSwitch . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputJava7StringSwitch . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7TryWithResourcesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7TryWithResourcesTest . java 
 index 89b5d91 . . 7ebbc6e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7TryWithResourcesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / Java7TryWithResourcesTest . java 
 @ @ - 19 , 6 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . grammars ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 * / 
 public class Java7TryWithResourcesTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " grammars " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testCanParse ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( MemberNameCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " grammars / InputJava7TryWithResources . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputJava7TryWithResources . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / LineCommentAtTheEndOfFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / LineCommentAtTheEndOfFileTest . java 
 index 40bb999 . . ed80996 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / LineCommentAtTheEndOfFileTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / LineCommentAtTheEndOfFileTest . java 
 @ @ - 19 , 6 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . grammars ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 34 , 13 + 37 , 18 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 * / 
 public class LineCommentAtTheEndOfFileTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " grammars " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testCanParse ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( MemberNameCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " grammars / LineCommentAtTheEndOfFile . java " ) , 
 + verify ( checkConfig , getPath ( " LineCommentAtTheEndOfFile . java " ) , 
 expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / MultiDimensionalArraysInGenericsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / MultiDimensionalArraysInGenericsTest . java 
 index 3d58e37 . . 4a2e4a4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / MultiDimensionalArraysInGenericsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / MultiDimensionalArraysInGenericsTest . java 
 @ @ - 19 , 6 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . grammars ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 28 , 6 + 31 , 11 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 
 public class MultiDimensionalArraysInGenericsTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " grammars " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testCanParse ( ) 
 throws Exception { 
 @ @ - 35 , 7 + 43 , 7 @ @ public class MultiDimensionalArraysInGenericsTest 
 createCheckConfig ( MemberNameCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , 
 - getPath ( " grammars / MultiDimensionalArraysInGenericsTestInput . java " ) , 
 + getPath ( " MultiDimensionalArraysInGenericsTestInput . java " ) , 
 expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / UnicodeEscapeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / UnicodeEscapeTest . java 
 index 8dd6032 . . e66539b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / UnicodeEscapeTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / UnicodeEscapeTest . java 
 @ @ - 19 , 6 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . grammars ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 * / 
 public class UnicodeEscapeTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " grammars " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testCanParse ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( MemberNameCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " grammars / UnicodeEscape . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " UnicodeEscape . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / VarargTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / VarargTest . java 
 index 7f4080e . . 2df6342 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / VarargTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / VarargTest . java 
 @ @ - 19 , 6 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . grammars ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 32 , 12 + 35 , 17 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 * / 
 public class VarargTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " grammars " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testCanParse ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( MemberNameCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " grammars / InputVararg . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputVararg . java " ) , expected ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java 
 index 50b09a4 . . 4349497 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java 
 @ @ - 66 , 7 + 66 , 7 @ @ public class ArrayTrailingCommaCheck extends Check { 
 public void visitToken ( DetailAST arrayInit ) { 
 final DetailAST rcurly = arrayInit . findFirstToken ( TokenTypes . RCURLY ) ; 
 
 - / / if curlys are on the same line 
 + / / if curlies are on the same line 
 / / or array is empty then check nothing 
 if ( arrayInit . getLineNo ( ) = = rcurly . getLineNo ( ) 
 | | arrayInit . getChildCount ( ) = = 1 ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 index ac1038a . . ee81299 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 @ @ - 226 , 7 + 226 , 7 @ @ public class DeclarationOrderCheck extends Check { 
 
 / * * 
 * Process Method Token 
 - * @ param ast , ethod token AST 
 + * @ param ast method token AST 
 * / 
 private void processMethod ( DetailAST ast ) { 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 index 5b76f4b . . 13cd786 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 @ @ - 161 , 7 + 161 , 7 @ @ public class EqualsAvoidNullCheck extends Check { 
 * Checks for calling equals on String literal and 
 * anon object which cannot be null 
 * Also , checks if calling using strange inner class 
 - * syntax outter . inner . equals ( otherObj ) by looking 
 + * syntax outer . inner . equals ( otherObj ) by looking 
 * for the dot operator which cannot be improved 
 * @ param objCalledOn object AST 
 * @ return if it is string literal 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 index 20baa7c . . d8c2409 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 @ @ - 102 , 8 + 102 , 8 @ @ public class ExplicitInitializationCheck extends Check { 
 } 
 
 / * * 
 - * Examin Char literal for initializing to default value 
 - * @ param exprStart exprssion 
 + * Examine char literal for initializing to default value 
 + * @ param exprStart expression 
 * @ return true is literal is initialized by zero symbol 
 * / 
 private static boolean isZeroChar ( DetailAST exprStart ) { 
 @ @ - 113 , 7 + 113 , 7 @ @ public class ExplicitInitializationCheck extends Check { 
 } 
 
 / * * 
 - * Chekc for cases that should be skipped : no assignment , local variable , final variables 
 + * Chekck for cases that should be skipped : no assignment , local variable , final variables 
 * @ param ast Variable def AST 
 * @ return true is that is a case that need to be skipped . 
 * / 
 @ @ - 136 , 7 + 136 , 7 @ @ public class ExplicitInitializationCheck extends Check { 
 } 
 
 / * * 
 - * Determines if a giiven type is an object type . 
 + * Determines if a given type is an object type . 
 * @ param type type to check . 
 * @ return true if it is an object type . 
 * / 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 index c29fb39 . . 8ca67c9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 @ @ - 84 , 7 + 84 , 7 @ @ public class FallThroughCheck extends Check { 
 / * * Do we need to check last case group . * / 
 private boolean checkLastCaseGroup ; 
 
 - / * * Relief pattern to allow fall throught to the next case branch . * / 
 + / * * Relief pattern to allow fall through to the next case branch . * / 
 private String reliefPattern = " fallthru | falls ? ? through " ; 
 
 / * * Relief regexp . * / 
 @ @ - 256 , 7 + 256 , 7 @ @ public class FallThroughCheck extends Check { 
 * @ param ast loop to check 
 * @ param useBreak should we consider break as terminator . 
 * @ param useContinue should we consider continue as terminator . 
 - * @ return true if try / cath / finally block is terminated . 
 + * @ return true if try / catch / finally block is terminated . 
 * / 
 private boolean checkTry ( final DetailAST ast , boolean useBreak , 
 boolean useContinue ) { 
 @ @ - 300 , 7 + 300 , 7 @ @ public class FallThroughCheck extends Check { 
 
 / * * 
 * Determines if the fall through case between { @ code currentCase } and 
 - * { @ code nextCase } is reliefed by a appropriate comment . 
 + * { @ code nextCase } is relieved by a appropriate comment . 
 * 
 * @ param currentCase AST of the case that falls through to the next case . 
 * @ param nextCase AST of the next case . 
 @ @ - 329 , 8 + 329 , 8 @ @ public class FallThroughCheck extends Check { 
 * default : 
 * / + FALLTHRU + / } 
 * / 
 - final String linepart = lines [ endLineNo - 1 ] . substring ( 0 , endColNo ) ; 
 - if ( commentMatch ( regExp , linepart , endLineNo ) ) { 
 + final String linePart = lines [ endLineNo - 1 ] . substring ( 0 , endColNo ) ; 
 + if ( commentMatch ( regExp , linePart , endLineNo ) ) { 
 return true ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 index 622e969 . . 76c7a10 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 @ @ - 265 , 9 + 265 , 9 @ @ public class FinalLocalVariableCheck extends Check { 
 } 
 
 / * * 
 - * Check if current param is lamda ' s param . 
 + * Check if current param is lambda ' s param . 
 * @ param paramDef { @ link TokenTypes # PARAMETER _ DEF parameter def } . 
 - * @ return true if current param is lamda ' s param . 
 + * @ return true if current param is lambda ' s param . 
 * / 
 private static boolean isInLambda ( DetailAST paramDef ) { 
 return paramDef . getParent ( ) . getParent ( ) . getType ( ) = = TokenTypes . LAMBDA ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 index 562c414 . . 022860d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 @ @ - 283 , 7 + 283 , 7 @ @ public class HiddenFieldCheck 
 final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 final String name = nameAST . getText ( ) ; 
 
 - if ( isStaticOrOnstanceField ( ast , name ) 
 + if ( isStaticOrInstanceField ( ast , name ) 
 & & ! isMatchingRegexp ( name ) 
 & & ! isIgnoredSetterParam ( ast , name ) 
 & & ! isIgnoredConstructorParam ( ast ) 
 @ @ - 299 , 7 + 299 , 7 @ @ public class HiddenFieldCheck 
 * @ param name identifier of token 
 * @ return true if static or instance field 
 * / 
 - private boolean isStaticOrOnstanceField ( DetailAST ast , String name ) { 
 + private boolean isStaticOrInstanceField ( DetailAST ast , String name ) { 
 return frame . containsStaticField ( name ) 
 | | ! isInStatic ( ast ) & & frame . containsInstanceField ( name ) ; 
 } 
 @ @ - 448 , 7 + 448 , 7 @ @ public class HiddenFieldCheck 
 * abstract method . 
 * @ param ast the AST to check . 
 * @ return true if ast should be ignored because check property 
 - * ignoreAbstactMethods is true and ast is a parameter of abstract 
 + * ignoreAbstractMethods is true and ast is a parameter of abstract 
 * methods . 
 * / 
 private boolean isIgnoredParamOfAbstractMethod ( DetailAST ast ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java 
 index 3a24037 . . 553a730 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java 
 @ @ - 63 , 10 + 63 , 10 @ @ public final class IllegalCatchCheck extends AbstractIllegalCheck { 
 
 @ Override 
 public void visitToken ( DetailAST detailAST ) { 
 - final DetailAST paradef = 
 + final DetailAST parameterDef = 
 detailAST . findFirstToken ( TokenTypes . PARAMETER _ DEF ) ; 
 final DetailAST excTypeParent = 
 - paradef . findFirstToken ( TokenTypes . TYPE ) ; 
 + parameterDef . findFirstToken ( TokenTypes . TYPE ) ; 
 final List < DetailAST > excTypes = getAllExceptionTypes ( excTypeParent ) ; 
 
 for ( DetailAST excType : excTypes ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 index 5c37b4b . . 396be82 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 @ @ - 75 , 7 + 75 , 7 @ @ public class IllegalInstantiationCheck 
 / * * { @ link java . lang } package as string * / 
 private static final String JAVA _ LANG = " java . lang . " ; 
 
 - / * * Set of fully qualified classnames . E . g . " java . lang . Boolean " * / 
 + / * * Set of fully qualified class names . E . g . " java . lang . Boolean " * / 
 private final Set < String > illegalClasses = Sets . newHashSet ( ) ; 
 
 / * * Name of the package * / 
 @ @ - 147 , 7 + 147 , 7 @ @ public class IllegalInstantiationCheck 
 @ Override 
 public void finishTree ( DetailAST rootAST ) { 
 for ( DetailAST literalNewAST : instantiations ) { 
 - postprocessLiteralNew ( literalNewAST ) ; 
 + postProcessLiteralNew ( literalNewAST ) ; 
 } 
 } 
 
 @ @ - 155 , 7 + 155 , 7 @ @ public class IllegalInstantiationCheck 
 * Collects classes defined in the source file . Required 
 * to avoid false alarms for local vs . java . lang classes . 
 * 
 - * @ param ast the classdef token . 
 + * @ param ast the class def token . 
 * / 
 private void processClassDef ( DetailAST ast ) { 
 final DetailAST identToken = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 @ @ - 197 , 11 + 197 , 11 @ @ public class IllegalInstantiationCheck 
 } 
 
 / * * 
 - * Processes one of the collected " new " tokens when treewalking 
 + * Processes one of the collected " new " tokens when walking tree 
 * has finished . 
 * @ param newTokenAst the " new " token . 
 * / 
 - private void postprocessLiteralNew ( DetailAST newTokenAst ) { 
 + private void postProcessLiteralNew ( DetailAST newTokenAst ) { 
 final DetailAST typeNameAst = newTokenAst . getFirstChild ( ) ; 
 final AST nameSibling = typeNameAst . getNextSibling ( ) ; 
 if ( nameSibling . getType ( ) = = TokenTypes . ARRAY _ DECLARATOR ) { 
 @ @ - 257 , 7 + 257 , 7 @ @ public class IllegalInstantiationCheck 
 / * * 
 * Check import statements 
 * @ param className name of the class 
 - * @ return value of illegal instatiated type 
 + * @ return value of illegal instantiated type 
 * / 
 private String checkImportStatements ( String className ) { 
 String illegalType = null ; 
 @ @ - 268 , 7 + 268 , 7 @ @ public class IllegalInstantiationCheck 
 final String fqClass = 
 importArg . substring ( 0 , importArg . length ( ) - 1 ) 
 + className ; 
 - / / assume that illegalInsts only contain existing classes 
 + / / assume that illegalInstances only contain existing classes 
 / / or else we might create a false alarm here 
 if ( illegalClasses . contains ( fqClass ) ) { 
 illegalType = fqClass ; 
 @ @ - 296 , 8 + 296 , 8 @ @ public class IllegalInstantiationCheck 
 private boolean isSamePackage ( String className , int pkgNameLen , String illegal ) { 
 / / class from same package 
 
 - / / the toplevel package ( pkgName = = null ) is covered by the 
 - / / " illegalInsts . contains ( className ) " check above 
 + / / the top level package ( pkgName = = null ) is covered by the 
 + / / " illegalInstances . contains ( className ) " check above 
 
 / / the test is the " no garbage " version of 
 / / illegal . equals ( pkgName + " . " + className ) 
 @ @ - 360 , 7 + 360 , 7 @ @ public class IllegalInstantiationCheck 
 
 / * * 
 * Sets the classes that are illegal to instantiate . 
 - * @ param names a comma seperate list of class names 
 + * @ param names a comma separate list of class names 
 * / 
 public void setClasses ( String names ) { 
 illegalClasses . clear ( ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 index dbf38ab . . dd8ba69 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 @ @ - 227 , 14 + 227 , 14 @ @ public final class IllegalTypeCheck extends AbstractFormatCheck { 
 
 / * * 
 * Checks type of parameters . 
 - * @ param paradef parameter list for check . 
 + * @ param parameterDef parameter list for check . 
 * / 
 - private void visitParameterDef ( DetailAST paradef ) { 
 - final DetailAST grandParentAST = paradef . getParent ( ) . getParent ( ) ; 
 + private void visitParameterDef ( DetailAST parameterDef ) { 
 + final DetailAST grandParentAST = parameterDef . getParent ( ) . getParent ( ) ; 
 
 if ( grandParentAST . getType ( ) = = TokenTypes . METHOD _ DEF 
 & & isCheckedMethod ( grandParentAST ) ) { 
 - checkClassName ( paradef ) ; 
 + checkClassName ( parameterDef ) ; 
 } 
 } 

