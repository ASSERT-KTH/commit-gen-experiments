BLEU SCORE: 0.5946035575013605

TEST MSG: Issue # 2078 : Update ITs for CommentsIndentationCheck
GENERATED MSG: Issue # 2078 : Update UTs for CommentsIndentationCheck

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java <nl> index 2ab5082 . . 7600d3f 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java <nl> @ @ - 39 , 27 + 39 , 166 @ @ public class CommentsIndentationTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void commentsIndentationTest ( ) throws Exception { <nl> + public void testCommentIsAtTheEndOfBlock ( ) throws Exception { <nl> + final String [ ] expected = { <nl> + " 18 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 17 , 25 , 8 ) , <nl> + " 33 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 35 , 5 , 4 ) , <nl> + " 37 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 36 , 0 , 8 ) , <nl> + " 47 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 46 , 15 , 12 ) , <nl> + " 49 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 48 , 10 , 8 ) , <nl> + " 54 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 53 , 13 , 8 ) , <nl> + " 74 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 70 , 18 , 8 ) , <nl> + " 88 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 85 , 31 , 8 ) , <nl> + " 100 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 98 , 21 , 8 ) , <nl> + " 115 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 116 , 29 , 12 ) , <nl> + " 138 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 131 , 26 , 8 ) , <nl> + " 164 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 161 , 33 , 8 ) , <nl> + " 174 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 173 , 21 , 8 ) , <nl> + " 186 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 184 , 34 , 8 ) , <nl> + " 208 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 206 , 26 , 8 ) , <nl> + " 214 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 213 , 0 , 8 ) , <nl> + " 228 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 225 , 12 , 8 ) , <nl> + " 234 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 233 , 0 , 8 ) , <nl> + " 248 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 245 , 12 , 8 ) , <nl> + " 255 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 252 , 0 , 8 ) , <nl> + " 265 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 264 , 14 , 8 ) , <nl> + " 271 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 269 , 9 , 8 ) , <nl> + " 277 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 276 , 9 , 8 ) , <nl> + " 316 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 315 , 9 , 8 ) , <nl> + " 322 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 323 , 0 , 4 ) , <nl> + " 336 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 337 , 0 , 4 ) , <nl> + " 355 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 352 , 9 , 8 ) , <nl> + } ; <nl> + <nl> + final Configuration checkConfig = builder . getCheckConfig ( " CommentsIndentation " ) ; <nl> + final String filePath = <nl> + builder . getFilePath ( " CommentsIndentationCommentIsAtTheEndOfBlockInput " ) ; <nl> + <nl> + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCommentIsInsideSwitchBlock ( ) throws Exception { <nl> + final String [ ] expected = { <nl> + " 25 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + " 24 , 26 " , 19 , " 16 , 12 " ) , <nl> + " 31 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + " 30 , 32 " , 19 , " 16 , 12 " ) , <nl> + " 48 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 49 , 6 , 16 ) , <nl> + " 55 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 56 , 8 , 12 ) , <nl> + " 59 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 58 , 22 , 16 ) , <nl> + " 68 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + " 65 , 69 " , 14 , " 12 , 16 " ) , <nl> + " 88 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 89 , 24 , 20 ) , <nl> + " 113 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + " 112 , 114 " , 15 , " 17 , 12 " ) , <nl> + " 125 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 126 , 8 , 12 ) , <nl> + " 138 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 139 , 4 , 8 ) , <nl> + " 157 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + " 156 , 158 " , 18 , " 16 , 12 " ) , <nl> + " 200 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + " 199 , 201 " , 4 , " 12 , 12 " ) , <nl> + " 203 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 204 , 22 , 20 ) , <nl> + " 204 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 205 , 20 , 17 ) , <nl> + " 205 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + " 202 , 206 " , 17 , " 16 , 12 " ) , <nl> + " 229 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + " 228 , 230 " , 6 , " 12 , 12 " ) , <nl> + } ; <nl> + <nl> + final Configuration checkConfig = builder . getCheckConfig ( " CommentsIndentation " ) ; <nl> + final String filePath = <nl> + builder . getFilePath ( " CommentsIndentationInSwitchBlockInput " ) ; <nl> + <nl> + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> <nl> + @ Test <nl> + public void testCommentIsInsideEmptyBlock ( ) throws Exception { <nl> + final String [ ] expected = { <nl> + " 9 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 10 , 19 , 23 ) , <nl> + " 10 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , <nl> + 12 , 23 , 31 ) , <nl> + " 33 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 34 , 0 , 8 ) , <nl> + " 57 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 58 , 0 , 8 ) , <nl> + " 71 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 72 , 0 , 8 ) , <nl> + } ; <nl> + <nl> + final Configuration checkConfig = builder . getCheckConfig ( " CommentsIndentation " ) ; <nl> + final String filePath = <nl> + builder . getFilePath ( " CommentsIndentationInEmptyBlockInput " ) ; <nl> + <nl> + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSurroundingCode ( ) throws Exception { <nl> final String [ ] expected = { <nl> - " 1 : " + getCheckMessage ( CommentsIndentationCheck . class , <nl> - " comments . indentation . single " , 2 , 1 , 0 ) , <nl> - " 13 : " + getCheckMessage ( CommentsIndentationCheck . class , <nl> - " comments . indentation . single " , 14 , 8 , 6 ) , <nl> - " 23 : " + getCheckMessage ( CommentsIndentationCheck . class , <nl> - " comments . indentation . block " , 24 , 8 , 4 ) , <nl> - " 25 : " + getCheckMessage ( CommentsIndentationCheck . class , <nl> - " comments . indentation . block " , 27 , 8 , 4 ) , <nl> - " 28 : " + getCheckMessage ( CommentsIndentationCheck . class , <nl> - " comments . indentation . block " , 31 , 8 , 4 ) , <nl> - " 50 : " + getCheckMessage ( CommentsIndentationCheck . class , <nl> - " comments . indentation . single " , 51 , 23 , 19 ) , <nl> - " 51 : " + getCheckMessage ( CommentsIndentationCheck . class , <nl> - " comments . indentation . block " , 53 , 19 , 32 ) , <nl> - } ; <nl> + " 13 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 14 , 14 , 12 ) , <nl> + " 23 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , <nl> + 24 , 16 , 12 ) , <nl> + " 25 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , <nl> + 27 , 16 , 12 ) , <nl> + " 28 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , <nl> + 31 , 16 , 12 ) , <nl> + " 50 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 51 , 27 , 23 ) , <nl> + " 51 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , <nl> + 53 , 23 , 36 ) , <nl> + " 90 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 91 , 14 , 8 ) , <nl> + " 98 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 99 , 13 , 8 ) , <nl> + " 108 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , <nl> + 109 , 33 , 8 ) , <nl> + } ; <nl> <nl> final Configuration checkConfig = builder . getCheckConfig ( " CommentsIndentation " ) ; <nl> - final String filePath = builder . getFilePath ( " CommentsIndentationInput " ) ; <nl> + final String filePath = <nl> + builder . getFilePath ( " CommentsIndentationSurroundingCodeInput " ) ; <nl> <nl> final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> verify ( checkConfig , filePath , expected , warnList ) ; <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationCommentIsAtTheEndOfBlockInput . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationCommentIsAtTheEndOfBlockInput . java <nl> new file mode 100644 <nl> index 0000000 . . e184f3b <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationCommentIsAtTheEndOfBlockInput . java <nl> @ @ - 0 , 0 + 1 , 367 @ @ <nl> + package com . google . checkstyle . test . chapter4formatting . rule4861blockcommentstyle ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; <nl> + <nl> + / * * <nl> + * Contains examples of using comments at the end of the block . <nl> + * / <nl> + public class CommentsIndentationCommentIsAtTheEndOfBlockInput { <nl> + <nl> + public void foo1 ( ) { <nl> + foo2 ( ) ; <nl> + / / TODO : missing functionality <nl> + } <nl> + <nl> + public void foo2 ( ) { <nl> + foo3 ( ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo3 ( ) { <nl> + foo2 ( ) ; <nl> + / / refreshDisplay ( ) ; <nl> + } <nl> + <nl> + public void foo4 ( ) { <nl> + foooooooooooooooooooooooooooooooooooooooooo ( ) ; <nl> + / / ^ - - some hint <nl> + } <nl> + <nl> + public void foooooooooooooooooooooooooooooooooooooooooo ( ) { } <nl> + <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / warn ( a single line border to separate a group of methods ) <nl> + <nl> + public void foo7 ( ) { <nl> + int a = 0 ; <nl> + / / warn <nl> + } <nl> + <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / ( a single line border to separate a group of methods ) <nl> + <nl> + public void foo8 ( ) { } <nl> + <nl> + public class TestClass { <nl> + public void test ( ) { <nl> + int a = 0 ; <nl> + / / warn <nl> + } <nl> + / / warn <nl> + } <nl> + <nl> + public void foo9 ( ) { <nl> + this . foo1 ( ) ; <nl> + / / warn <nl> + } <nl> + <nl> + / / public void foo10 ( ) { <nl> + / / <nl> + / / } <nl> + <nl> + public void foo11 ( ) { <nl> + CheckUtils <nl> + . getFirstNode ( new DetailAST ( ) ) <nl> + . getFirstChild ( ) <nl> + . getNextSibling ( ) ; <nl> + / / comment <nl> + } <nl> + <nl> + public void foo12 ( ) { <nl> + CheckUtils <nl> + . getFirstNode ( new DetailAST ( ) ) <nl> + . getFirstChild ( ) <nl> + . getNextSibling ( ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo13 ( ) { <nl> + CheckUtils . getFirstNode ( new DetailAST ( ) ) <nl> + . getFirstChild ( ) <nl> + . getNextSibling ( ) ; <nl> + / / comment <nl> + } <nl> + <nl> + public void foo14 ( ) { <nl> + CheckUtils . getFirstNode ( new DetailAST ( ) ) <nl> + . getFirstChild ( ) <nl> + . getNextSibling ( ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo15 ( ) { <nl> + CheckUtils <nl> + . getFirstNode ( new DetailAST ( ) ) ; <nl> + / / comment <nl> + } <nl> + <nl> + public void foo16 ( ) { <nl> + CheckUtils <nl> + . getFirstNode ( new DetailAST ( ) ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo17 ( ) { <nl> + CheckUtils <nl> + . getFirstNode ( new DetailAST ( ) ) <nl> + . getFirstChild ( ) <nl> + / / comment <nl> + . getNextSibling ( ) ; <nl> + } <nl> + <nl> + public void foo18 ( ) { <nl> + CheckUtils <nl> + . getFirstNode ( new DetailAST ( ) ) <nl> + . getFirstChild ( ) <nl> + / / warn <nl> + . getNextSibling ( ) ; <nl> + } <nl> + <nl> + public void foo19 ( ) { <nl> + ( new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + <nl> + } <nl> + } ) ) . <nl> + run ( ) ; <nl> + / / comment <nl> + } <nl> + <nl> + public void foo20 ( ) { <nl> + ( new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + <nl> + } <nl> + } ) ) . <nl> + run ( ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo21 ( ) { <nl> + int [ ] array = new int [ 5 ] ; <nl> + <nl> + java . util . List < String > expected = new java . util . ArrayList < > ( ) ; <nl> + for ( int i = 0 ; i < 5 ; i + + ) { <nl> + org . junit . Assert . assertEquals ( expected . get ( i ) , array [ i ] ) ; <nl> + } <nl> + String s = String . format ( " The array element " <nl> + + " immediately following the end of the collection should be nulled " , <nl> + array [ 1 ] ) ; <nl> + / / the above example was taken from hibernate - orm and was modified a bit <nl> + } <nl> + <nl> + public void foo22 ( ) { <nl> + int [ ] array = new int [ 5 ] ; <nl> + <nl> + java . util . List < String > expected = new java . util . ArrayList < > ( ) ; <nl> + for ( int i = 0 ; i < 5 ; i + + ) { <nl> + org . junit . Assert . assertEquals ( expected . get ( i ) , array [ i ] ) ; <nl> + } <nl> + String s = String . format ( " The array element " <nl> + + " immediately following the end of the collection should be nulled " , <nl> + array [ 1 ] ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo23 ( ) { <nl> + new Object ( ) ; <nl> + / / comment <nl> + } <nl> + <nl> + public void foo24 ( ) { <nl> + new Object ( ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public String foo25 ( ) { <nl> + return String . format ( " % d " , <nl> + 1 ) ; <nl> + / / comment <nl> + } <nl> + <nl> + public String foo26 ( ) { <nl> + return String . format ( " % d " , <nl> + 1 ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo27 ( ) { <nl> + / / comment <nl> + / / block <nl> + foo17 ( ) ; <nl> + <nl> + / / TODO <nl> + } <nl> + <nl> + public String foo28 ( ) { <nl> + int a = 5 ; <nl> + return String . format ( " % d " , <nl> + 1 ) ; <nl> + / / comment <nl> + } <nl> + <nl> + public String foo29 ( ) { <nl> + int a = 5 ; <nl> + return String . format ( " % d " , <nl> + 1 ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo30 ( ) { <nl> + / / comment <nl> + int a = 5 ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo31 ( ) { <nl> + String s = new String ( " A " <nl> + + " B " <nl> + + " C " ) ; <nl> + / / comment <nl> + } <nl> + <nl> + public void foo32 ( ) { <nl> + String s = new String ( " A " <nl> + + " B " <nl> + + " C " ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo33 ( ) { <nl> + / / comment <nl> + this . foo22 ( ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo34 ( ) throws Exception { <nl> + throw new Exception ( " " , <nl> + new Exception ( ) <nl> + ) ; <nl> + / / comment <nl> + } <nl> + <nl> + public void foo35 ( ) throws Exception { <nl> + throw new Exception ( " " , <nl> + new Exception ( ) <nl> + ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo36 ( ) throws Exception { <nl> + throw new Exception ( " " , <nl> + new Exception ( ) <nl> + ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo37 ( ) throws Exception { <nl> + throw new Exception ( " " , new Exception ( ) ) ; <nl> + / / comment <nl> + } <nl> + <nl> + public void foo38 ( ) throws Exception { <nl> + throw new Exception ( " " , new Exception ( ) ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo39 ( ) throws Exception { <nl> + throw new Exception ( " " , <nl> + new Exception ( ) ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo40 ( ) throws Exception { <nl> + int a = 88 ; <nl> + throw new Exception ( " " , new Exception ( ) ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo41 ( ) throws Exception { <nl> + int a = 88 ; <nl> + throw new Exception ( " " , new Exception ( ) ) ; <nl> + / / comment <nl> + } <nl> + <nl> + public void foo42 ( ) { <nl> + int a = 5 ; <nl> + if ( a = = 5 ) { <nl> + int b ; <nl> + / / comment <nl> + } else if ( a = = 6 ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + public void foo43 ( ) { <nl> + try { <nl> + int a ; <nl> + / / comment <nl> + } catch ( Exception e ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + public void foo44 ( ) { <nl> + int ar = 5 ; <nl> + / / comment <nl> + ar = 6 ; <nl> + / / comment <nl> + } <nl> + <nl> + public void foo45 ( ) { <nl> + int ar = 5 ; <nl> + / / comment <nl> + ar = 6 ; <nl> + / / warn <nl> + } <nl> + <nl> + public void foo46 ( ) { <nl> + / / comment <nl> + / / block <nl> + / / warn <nl> + } <nl> + <nl> + public void foo47 ( ) { <nl> + int a = 5 ; <nl> + / / comment <nl> + / / block <nl> + / / comment <nl> + } <nl> + <nl> + public void foo48 ( ) { <nl> + int a = 5 ; <nl> + / / comment <nl> + / / block <nl> + / / warn <nl> + } <nl> + <nl> + public void foo49 ( ) { <nl> + / / comment <nl> + / / block <nl> + / / ok <nl> + } <nl> + <nl> + public void foo50 ( ) { <nl> + return ; <nl> + <nl> + / / No NPE here ! <nl> + } <nl> + <nl> + public String foo51 ( ) { <nl> + return String <nl> + . valueOf ( " 11 " <nl> + ) ; <nl> + / / warn <nl> + } <nl> + <nl> + public String foo52 ( ) { <nl> + return String <nl> + . valueOf ( " 11 " <nl> + ) ; <nl> + / / comment <nl> + } <nl> + <nl> + / / We almost reached the end of the class here . <nl> + } <nl> + / / The END of the class . <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInEmptyBlockInput . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInEmptyBlockInput . java <nl> new file mode 100644 <nl> index 0000000 . . 0706d7d <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInEmptyBlockInput . java <nl> @ @ - 0 , 0 + 1 , 86 @ @ <nl> + package com . google . checkstyle . test . chapter4formatting . rule4861blockcommentstyle ; <nl> + <nl> + public class CommentsIndentationInEmptyBlockInput { <nl> + <nl> + private void foo1 ( ) { <nl> + int a = 5 , b = 3 , v = 6 ; <nl> + if ( a = = b <nl> + & & v = = b | | ( a = = 1 <nl> + / / / / / warn <nl> + / * / / warn <nl> + * one fine day . . . * / <nl> + & & b = = 1 ) ) { <nl> + / / Cannot clearly detect user intention of explanation target . <nl> + } <nl> + } <nl> + <nl> + private void foo2 ( ) { <nl> + int a = 5 , b = 3 , v = 6 ; <nl> + if ( a = = b <nl> + & & v = = b | | ( a = = 1 <nl> + & & b = = 1 ) ) { <nl> + <nl> + <nl> + / / comment <nl> + } <nl> + } <nl> + <nl> + private void foo3 ( ) { <nl> + int a = 5 , b = 3 , v = 6 ; <nl> + if ( a = = b <nl> + & & v = = b | | ( a = = 1 <nl> + & & b = = 1 ) ) { <nl> + / / warn <nl> + } <nl> + } <nl> + <nl> + / / Comments here should be ok by Check <nl> + @ SuppressWarnings ( " unused " ) / / trailing <nl> + private static void foo4 ( ) { / / trailing <nl> + if ( true ) / / trailing comment <nl> + { <nl> + / / some comment <nl> + } <nl> + if ( true ) { / / trailing comment <nl> + <nl> + } <nl> + / * * <nl> + * <nl> + * / <nl> + } <nl> + <nl> + / / Comments here should be ok by Check <nl> + @ SuppressWarnings ( " unused " ) / / trailing <nl> + private static void foo5 ( ) { / / trailing <nl> + if ( true ) / / trailing comment <nl> + { <nl> + / / warn <nl> + } <nl> + if ( true ) { / / trailing comment <nl> + <nl> + } <nl> + / * * <nl> + * <nl> + * / <nl> + } <nl> + <nl> + public void foo6 ( ) { <nl> + try { <nl> + <nl> + } catch ( Exception e ) { <nl> + / / warn <nl> + } <nl> + } <nl> + <nl> + public void foo7 ( ) { <nl> + try { <nl> + <nl> + } catch ( Exception e ) { <nl> + / / TODO : handle exception here <nl> + } <nl> + } <nl> + <nl> + private static class MyClass extends Object { <nl> + / / no members <nl> + } <nl> + } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInSwitchBlockInput . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInSwitchBlockInput . java <nl> new file mode 100644 <nl> index 0000000 . . ee9d667 <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInSwitchBlockInput . java <nl> @ @ - 0 , 0 + 1 , 268 @ @ <nl> + package com . google . checkstyle . test . chapter4formatting . rule4861blockcommentstyle ; <nl> + <nl> + public class CommentsIndentationInSwitchBlockInput { <nl> + <nl> + private static void fooSwitch ( ) { <nl> + switch ( " " ) { <nl> + case " 0 " : / / some comment <nl> + case " 1 " : <nl> + / / my comment <nl> + foo1 ( ) ; <nl> + break ; <nl> + case " 2 " : <nl> + / / my comment <nl> + / / comment <nl> + foo1 ( ) ; <nl> + / / comment <nl> + break ; <nl> + case " 3 " : <nl> + / * com * / <nl> + foo1 ( ) ; <nl> + / * com * / <nl> + break ; <nl> + case " 5 " : <nl> + foo1 ( ) ; <nl> + / / warn <nl> + case " 6 " : <nl> + int k = 7 ; <nl> + / / fall through <nl> + case " 7 " : <nl> + if ( true ) { } <nl> + / / warn <nl> + case " 8 " : <nl> + break ; <nl> + case " 9 " : <nl> + foo1 ( ) ; <nl> + / / fall through <nl> + case " 10 " : { <nl> + if ( true ) { } <nl> + / / fall through <nl> + } <nl> + case " 11 " : { <nl> + / / fall through <nl> + } <nl> + case " 28 " : { <nl> + / / fall through <nl> + } <nl> + case " 12 " : { <nl> + / / warn <nl> + int i ; <nl> + } <nl> + case " 13 " : { <nl> + / / some comment in empty case block <nl> + } <nl> + case " 14 " : { <nl> + / / warn <nl> + } <nl> + case " 15 " : { <nl> + foo1 ( ) ; <nl> + / / warn <nl> + } <nl> + case " 16 " : { <nl> + int a ; <nl> + } <nl> + / / fall through <nl> + case " 17 " : { <nl> + int a ; <nl> + } <nl> + / / warn <nl> + case " 18 " : { System . out . println ( ) ; <nl> + } / / trailing comment <nl> + case " 19 " : <nl> + / / comment <nl> + case " 20 " : <nl> + / / comment <nl> + case " 21 " : <nl> + default : <nl> + / / comment <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + private static void foo1 ( ) { <nl> + if ( true ) { <nl> + switch ( 1 ) { <nl> + case 0 : <nl> + <nl> + case 1 : <nl> + / / warn <nl> + int b = 10 ; <nl> + default : <nl> + / / comment <nl> + } <nl> + <nl> + } <nl> + } <nl> + <nl> + public void fooDotInCaseBlock ( ) { <nl> + int i = 0 ; <nl> + String s = " " ; <nl> + <nl> + switch ( i ) { <nl> + case - 2 : <nl> + / / what <nl> + i + + ; <nl> + / / no break here <nl> + case 0 : <nl> + / / what <nl> + s . indexOf ( " ignore " ) ; <nl> + / / no break here <nl> + case - 1 : <nl> + / / what <nl> + s . indexOf ( " no way " ) ; <nl> + / / warn <nl> + case 1 : <nl> + case 2 : <nl> + i - - ; <nl> + / / no break here <nl> + case 3 : { } <nl> + / / fall through <nl> + <nl> + <nl> + } <nl> + <nl> + String breaks = " " <nl> + / / warn <nl> + + " < / table > " <nl> + / / middle <nl> + + " " <nl> + / / end <nl> + ; <nl> + } <nl> + <nl> + public void foo2 ( ) { <nl> + int a = 1 ; <nl> + switch ( a ) { <nl> + case 1 : <nl> + default : <nl> + / / warn <nl> + } <nl> + } <nl> + <nl> + public void foo3 ( ) { <nl> + int a = 1 ; <nl> + switch ( a ) { <nl> + case 1 : <nl> + default : <nl> + <nl> + / / comment <nl> + } <nl> + } <nl> + <nl> + public void foo4 ( ) { <nl> + int a = 1 ; <nl> + switch ( a ) { <nl> + case 1 : <nl> + int b ; <nl> + / / warn <nl> + default : <nl> + } <nl> + } <nl> + <nl> + public void foo5 ( ) { <nl> + int a = 1 ; <nl> + switch ( a ) { <nl> + case 1 : <nl> + int b ; <nl> + / / comment <nl> + default : <nl> + } <nl> + } <nl> + <nl> + public void foo6 ( ) { <nl> + int a = 1 ; <nl> + switch ( a ) { <nl> + case 1 : <nl> + int b ; <nl> + / / comment <nl> + default : <nl> + } <nl> + } <nl> + <nl> + public void foo7 ( ) { <nl> + int a = 2 ; <nl> + String s = " " ; <nl> + switch ( a ) { <nl> + / / comment <nl> + / / comment <nl> + / / comment <nl> + case 1 : <nl> + case 2 : <nl> + / / comment <nl> + / / comment <nl> + foo1 ( ) ; <nl> + / / comment <nl> + case 3 : <nl> + / / comment <nl> + / / comment <nl> + / / comment <nl> + case 4 : <nl> + / / warn <nl> + case 5 : <nl> + s . toString ( ) . toString ( ) . toString ( ) ; <nl> + / / warn <nl> + / / warn <nl> + / / warn <nl> + default : <nl> + } <nl> + } <nl> + <nl> + public void foo8 ( ) { <nl> + int a = 2 ; <nl> + String s = " " ; <nl> + switch ( a ) { <nl> + / / comment <nl> + / / comment <nl> + / / comment <nl> + case 1 : <nl> + case 2 : <nl> + / / comment <nl> + / / comment <nl> + foo1 ( ) ; <nl> + / / comment <nl> + case 3 : <nl> + / / comment <nl> + / / comment <nl> + s . toString ( ) . toString ( ) . toString ( ) ; <nl> + / / comment <nl> + case 4 : <nl> + / / warn <nl> + default : <nl> + } <nl> + } <nl> + <nl> + public void foo9 ( ) { <nl> + int a = 5 ; <nl> + switch ( a ) { <nl> + case 1 : <nl> + case 2 : <nl> + / / comment <nl> + } <nl> + } <nl> + <nl> + public void foo10 ( ) { <nl> + int a = 5 ; <nl> + switch ( a ) { <nl> + case 1 : <nl> + default : <nl> + / / comment <nl> + } <nl> + } <nl> + <nl> + public void foo11 ( ) { <nl> + int a = 5 ; <nl> + switch ( a ) { <nl> + case 1 : <nl> + case 2 : <nl> + / / comment <nl> + } <nl> + } <nl> + <nl> + public void foo12 ( ) { <nl> + int a = 5 ; <nl> + switch ( a ) { <nl> + / / comment <nl> + case 1 : <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInput . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInput . java <nl> deleted file mode 100644 <nl> index 5bb5229 . . 0000000 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInput . java <nl> + + + / dev / null <nl> @ @ - 1 , 133 + 0 , 0 @ @ <nl> - / / warn ( some comment ) <nl> - package com . google . checkstyle . test . chapter4formatting . rule4861blockcommentstyle ; <nl> - <nl> - import java . util . * ; <nl> - <nl> - / / ok ( comment ) <nl> - public class CommentsIndentationInput { <nl> - <nl> - private void foo ( ) { <nl> - if ( true ) { <nl> - / / ok ( here initialize some variables ) <nl> - int k = 0 ; / / ok ( trailing comment ) <nl> - / / warn ( initialize b ) <nl> - int b = 10 ; <nl> - / / ok ( sss ) <nl> - } <nl> - } <nl> - <nl> - private void foo1 ( ) { <nl> - if ( true ) { <nl> - / * ok ( some ) * / <nl> - int k = 0 ; <nl> - / * / / warn ( some ) * / <nl> - int b = 10 ; <nl> - / * / / warn <nl> - * * / <nl> - double d ; / * ok ( trailing comment ) * / <nl> - / * / / warn <nl> - * <nl> - * / <nl> - boolean bb ; <nl> - / * * * / <nl> - / * ok ( my comment ) * / <nl> - / * <nl> - * <nl> - * <nl> - * ok ( some ) <nl> - * / <nl> - / * <nl> - * ok ( comment ) <nl> - * / <nl> - boolean x ; <nl> - } <nl> - } <nl> - <nl> - private void foo3 ( ) { <nl> - int a = 5 , b = 3 , v = 6 ; <nl> - if ( a = = b <nl> - & & v = = b | | ( a = = 1 <nl> - / / / warn ( What about that case ? the same for block comments ) <nl> - / * / / warn <nl> - * one fine day . . . * / <nl> - & & b = = 1 ) ) { <nl> - / / ok ( code ) <nl> - } <nl> - } <nl> - <nl> - / / ok ( Comments here should be ok by Check ) <nl> - @ SuppressWarnings ( " unused " ) / / ok ( trailing ) <nl> - private static void check ( ) { / / ok ( trailing ) <nl> - if ( true ) / / ok ( trailing comment ) <nl> - { <nl> - / / ok ( some comment ) <nl> - } <nl> - if ( true ) { / / ok ( trailing comment ) <nl> - <nl> - } <nl> - / * * ok <nl> - * <nl> - * / <nl> - } <nl> - <nl> - private static void com ( ) { <nl> - / * ok ( here ' s my weird trailing comment ) * / <nl> - boolean b = true ; <nl> - } <nl> - <nl> - <nl> - private static void cases ( ) { <nl> - switch ( " " ) { <nl> - case " 0 " : / / some comment <nl> - case " 1 " : <nl> - / / my comment <nl> - com ( ) ; <nl> - break ; <nl> - case " 2 " : <nl> - / / my comment <nl> - / / comment <nl> - check ( ) ; <nl> - / / comment <nl> - break ; <nl> - case " 3 " : <nl> - / * com * / <nl> - check ( ) ; <nl> - / * com * / <nl> - break ; <nl> - case " 5 " : <nl> - check ( ) ; <nl> - / / fall through <nl> - case " 6 " : <nl> - int k = 7 ; <nl> - / / fall through <nl> - case " 7 " : <nl> - if ( true ) { } <nl> - / / fall through <nl> - case " 8 " : <nl> - break ; <nl> - default : <nl> - / / comment <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - private static final String [ ] [ ] mergeMatrix = { <nl> - / / TOP ALWAYS NEVER UNKNOWN <nl> - / * TOP * / { " " , } , <nl> - / * ALWAYS * / { " " , " " , } , <nl> - / * NEVER * / { " NEVER " , " UNKNOWN " , " NEVER " , } , <nl> - / * UNKNOWN * / { " UNKNOWN " , " UNKNOWN " , " UNKNOWN " , " UNKNOWN " } , } ; <nl> - <nl> - private void foo4 ( ) { <nl> - if ( ! Arrays . equals ( new String [ ] { " " } , new String [ ] { " " } ) <nl> - / * wierd trailing comment * / ) { <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * ok ( some javadoc ) <nl> - * / <nl> - private static void l ( ) { <nl> - } <nl> - } / / The Check should not throw NPE here ! <nl> - / * The Check should not throw NPE here ! * / <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationSurroundingCodeInput . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationSurroundingCodeInput . java <nl> new file mode 100644 <nl> index 0000000 . . cc5525d <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationSurroundingCodeInput . java <nl> @ @ - 0 , 0 + 1 , 127 @ @ <nl> + / / comment <nl> + package com . google . checkstyle . test . chapter4formatting . rule4861blockcommentstyle ; <nl> + <nl> + import java . util . Arrays ; <nl> + <nl> + / / some <nl> + public class CommentsIndentationSurroundingCodeInput <nl> + { <nl> + private void foo1 ( ) { <nl> + if ( true ) { <nl> + / / here initialize some variables <nl> + int k = 0 ; / / trailing comment <nl> + / / warn <nl> + int b = 10 ; <nl> + / / sss <nl> + } <nl> + } <nl> + <nl> + private void foo2 ( ) { <nl> + if ( true ) { <nl> + / * some * / <nl> + int k = 0 ; <nl> + / * / / warn * / <nl> + int b = 10 ; <nl> + / * / / warn <nl> + * * / <nl> + double d ; / * trailing comment * / <nl> + / * / / warn <nl> + * <nl> + * / <nl> + boolean bb ; <nl> + / * * * / <nl> + / * my comment * / <nl> + / * <nl> + * <nl> + * <nl> + * some <nl> + * / <nl> + / * <nl> + * comment <nl> + * / <nl> + boolean x ; <nl> + } <nl> + } <nl> + <nl> + private void foo3 ( ) { <nl> + int a = 5 , b = 3 , v = 6 ; <nl> + if ( a = = b <nl> + & & v = = b | | ( a = = 1 <nl> + / / / / / warn <nl> + / * / / warn <nl> + * one fine day . . . * / <nl> + & & b = = 1 ) ) { <nl> + } <nl> + } <nl> + <nl> + private static void com ( ) { <nl> + / * here ' s my weird trailing comment * / boolean b = true ; <nl> + } <nl> + <nl> + private static final String [ ] [ ] mergeMatrix = { <nl> + / / This example of trailing block comments was found in PMD sources . <nl> + / * TOP * / { " " , } , <nl> + / * ALWAYS * / { " " , " " , } , <nl> + / * NEVER * / { " NEVER " , " UNKNOWN " , " NEVER " , } , <nl> + / * UNKNOWN * / { " UNKNOWN " , " UNKNOWN " , " UNKNOWN " , " UNKNOWN " } , } ; <nl> + <nl> + private void foo4 ( ) { <nl> + if ( ! Arrays . equals ( new String [ ] { " " } , new String [ ] { " " } ) <nl> + / * wierd trailing comment * / ) { <nl> + } <nl> + } <nl> + / * * <nl> + * some javadoc <nl> + * / <nl> + private static void l ( ) { <nl> + } <nl> + <nl> + public void foid5 ( ) { <nl> + String s = " " ; <nl> + s . toString ( ) . toString ( ) . toString ( ) ; <nl> + / / comment <nl> + } <nl> + <nl> + public void foo6 ( ) { <nl> + / / comment <nl> + / / . . . <nl> + / / block <nl> + / / . . . <nl> + / / warn <nl> + String someStr = new String ( ) ; <nl> + } <nl> + <nl> + public void foo7 ( ) { <nl> + / / comment <nl> + / / . . . <nl> + / / block <nl> + / / warn <nl> + / / comment <nl> + String someStr = new String ( ) ; <nl> + } <nl> + <nl> + public void foo8 ( ) { <nl> + String s = new String ( ) ; / / comment <nl> + / / . . . <nl> + / / block <nl> + / / . . . <nl> + / / warn <nl> + String someStr = new String ( ) ; <nl> + } <nl> + <nl> + public String foo9 ( String s1 , String s2 , String s3 ) { <nl> + return " " ; <nl> + } <nl> + <nl> + public void foo10 ( ) <nl> + throws Exception { <nl> + <nl> + final String pattern = " ^ foo $ " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 7 : 13 : " + foo9 ( " " , " " , " " ) , <nl> + / / comment <nl> + } ; <nl> + } <nl> + } / / The Check should not throw NPE here ! <nl> + / / The Check should not throw NPE here !
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> index a2979db . . 679ad61 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassFanOutComplexityCheck . MSG _ KEY ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> @ @ - 32 , 6 + 33 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " metrics " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void test ( ) throws Exception { <nl> DefaultConfiguration checkConfig = createCheckConfig ( ClassFanOutComplexityCheck . class ) ; <nl> @ @ - 43 , 10 + 50 , 7 @ @ public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { <nl> " 38 : 1 : " + getCheckMessage ( MSG _ KEY , 1 , 0 ) , <nl> } ; <nl> <nl> - verify ( checkConfig , <nl> - getPath ( " checks " + File . separator <nl> - + " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , <nl> - expected ) ; <nl> + verify ( checkConfig , getPath ( " ClassCouplingCheckTestInput . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 67 , 10 + 71 , 7 @ @ public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { <nl> String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> createChecker ( checkConfig ) ; <nl> - verify ( checkConfig , <nl> - getPath ( " checks " + File . separator <nl> - + " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , <nl> - expected ) ; <nl> + verify ( checkConfig , getPath ( " ClassCouplingCheckTestInput . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / Input15Extensions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / Input15Extensions . java <nl> new file mode 100644 <nl> index 0000000 . . d636406 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / Input15Extensions . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + / / someexamples of 1 . 5 extensions <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> + <nl> + @ interface MyAnnotation1 { <nl> + String name ( ) ; <nl> + int version ( ) ; <nl> + } <nl> + <nl> + @ MyAnnotation1 ( name = " ABC " , version = 1 ) <nl> + public class Input15Extensions <nl> + { <nl> + <nl> + } <nl> + <nl> + enum Enum1 <nl> + { <nl> + A , B , C ; <nl> + Enum1 ( ) { } <nl> + public String toString ( ) { <nl> + return " " ; / / some custom implementation <nl> + } <nl> + } <nl> + <nl> + interface TestRequireThisEnum <nl> + { <nl> + enum DAY _ OF _ WEEK <nl> + { <nl> + SUNDAY , <nl> + MONDAY , <nl> + TUESDAY , <nl> + WEDNESDAY , <nl> + THURSDAY , <nl> + FRIDAY , <nl> + SATURDAY <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java 
 index 2ab5082 . . 7600d3f 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationTest . java 
 @ @ - 39 , 27 + 39 , 166 @ @ public class CommentsIndentationTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void commentsIndentationTest ( ) throws Exception { 
 + public void testCommentIsAtTheEndOfBlock ( ) throws Exception { 
 + final String [ ] expected = { 
 + " 18 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 17 , 25 , 8 ) , 
 + " 33 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 35 , 5 , 4 ) , 
 + " 37 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 36 , 0 , 8 ) , 
 + " 47 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 46 , 15 , 12 ) , 
 + " 49 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 48 , 10 , 8 ) , 
 + " 54 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 53 , 13 , 8 ) , 
 + " 74 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 70 , 18 , 8 ) , 
 + " 88 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 85 , 31 , 8 ) , 
 + " 100 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 98 , 21 , 8 ) , 
 + " 115 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 116 , 29 , 12 ) , 
 + " 138 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 131 , 26 , 8 ) , 
 + " 164 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 161 , 33 , 8 ) , 
 + " 174 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 173 , 21 , 8 ) , 
 + " 186 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 184 , 34 , 8 ) , 
 + " 208 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 206 , 26 , 8 ) , 
 + " 214 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 213 , 0 , 8 ) , 
 + " 228 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 225 , 12 , 8 ) , 
 + " 234 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 233 , 0 , 8 ) , 
 + " 248 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 245 , 12 , 8 ) , 
 + " 255 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 252 , 0 , 8 ) , 
 + " 265 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 264 , 14 , 8 ) , 
 + " 271 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 269 , 9 , 8 ) , 
 + " 277 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 276 , 9 , 8 ) , 
 + " 316 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 315 , 9 , 8 ) , 
 + " 322 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 323 , 0 , 4 ) , 
 + " 336 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 337 , 0 , 4 ) , 
 + " 355 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 352 , 9 , 8 ) , 
 + } ; 
 + 
 + final Configuration checkConfig = builder . getCheckConfig ( " CommentsIndentation " ) ; 
 + final String filePath = 
 + builder . getFilePath ( " CommentsIndentationCommentIsAtTheEndOfBlockInput " ) ; 
 + 
 + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + 
 + @ Test 
 + public void testCommentIsInsideSwitchBlock ( ) throws Exception { 
 + final String [ ] expected = { 
 + " 25 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + " 24 , 26 " , 19 , " 16 , 12 " ) , 
 + " 31 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + " 30 , 32 " , 19 , " 16 , 12 " ) , 
 + " 48 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 49 , 6 , 16 ) , 
 + " 55 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 56 , 8 , 12 ) , 
 + " 59 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 58 , 22 , 16 ) , 
 + " 68 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + " 65 , 69 " , 14 , " 12 , 16 " ) , 
 + " 88 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 89 , 24 , 20 ) , 
 + " 113 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + " 112 , 114 " , 15 , " 17 , 12 " ) , 
 + " 125 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 126 , 8 , 12 ) , 
 + " 138 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 139 , 4 , 8 ) , 
 + " 157 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + " 156 , 158 " , 18 , " 16 , 12 " ) , 
 + " 200 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + " 199 , 201 " , 4 , " 12 , 12 " ) , 
 + " 203 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 204 , 22 , 20 ) , 
 + " 204 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 205 , 20 , 17 ) , 
 + " 205 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + " 202 , 206 " , 17 , " 16 , 12 " ) , 
 + " 229 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + " 228 , 230 " , 6 , " 12 , 12 " ) , 
 + } ; 
 + 
 + final Configuration checkConfig = builder . getCheckConfig ( " CommentsIndentation " ) ; 
 + final String filePath = 
 + builder . getFilePath ( " CommentsIndentationInSwitchBlockInput " ) ; 
 + 
 + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 
 + @ Test 
 + public void testCommentIsInsideEmptyBlock ( ) throws Exception { 
 + final String [ ] expected = { 
 + " 9 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 10 , 19 , 23 ) , 
 + " 10 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , 
 + 12 , 23 , 31 ) , 
 + " 33 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 34 , 0 , 8 ) , 
 + " 57 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 58 , 0 , 8 ) , 
 + " 71 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 72 , 0 , 8 ) , 
 + } ; 
 + 
 + final Configuration checkConfig = builder . getCheckConfig ( " CommentsIndentation " ) ; 
 + final String filePath = 
 + builder . getFilePath ( " CommentsIndentationInEmptyBlockInput " ) ; 
 + 
 + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + 
 + @ Test 
 + public void testSurroundingCode ( ) throws Exception { 
 final String [ ] expected = { 
 - " 1 : " + getCheckMessage ( CommentsIndentationCheck . class , 
 - " comments . indentation . single " , 2 , 1 , 0 ) , 
 - " 13 : " + getCheckMessage ( CommentsIndentationCheck . class , 
 - " comments . indentation . single " , 14 , 8 , 6 ) , 
 - " 23 : " + getCheckMessage ( CommentsIndentationCheck . class , 
 - " comments . indentation . block " , 24 , 8 , 4 ) , 
 - " 25 : " + getCheckMessage ( CommentsIndentationCheck . class , 
 - " comments . indentation . block " , 27 , 8 , 4 ) , 
 - " 28 : " + getCheckMessage ( CommentsIndentationCheck . class , 
 - " comments . indentation . block " , 31 , 8 , 4 ) , 
 - " 50 : " + getCheckMessage ( CommentsIndentationCheck . class , 
 - " comments . indentation . single " , 51 , 23 , 19 ) , 
 - " 51 : " + getCheckMessage ( CommentsIndentationCheck . class , 
 - " comments . indentation . block " , 53 , 19 , 32 ) , 
 - } ; 
 + " 13 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 14 , 14 , 12 ) , 
 + " 23 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , 
 + 24 , 16 , 12 ) , 
 + " 25 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , 
 + 27 , 16 , 12 ) , 
 + " 28 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , 
 + 31 , 16 , 12 ) , 
 + " 50 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 51 , 27 , 23 ) , 
 + " 51 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . block " , 
 + 53 , 23 , 36 ) , 
 + " 90 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 91 , 14 , 8 ) , 
 + " 98 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 99 , 13 , 8 ) , 
 + " 108 : " + getCheckMessage ( CommentsIndentationCheck . class , " comments . indentation . single " , 
 + 109 , 33 , 8 ) , 
 + } ; 
 
 final Configuration checkConfig = builder . getCheckConfig ( " CommentsIndentation " ) ; 
 - final String filePath = builder . getFilePath ( " CommentsIndentationInput " ) ; 
 + final String filePath = 
 + builder . getFilePath ( " CommentsIndentationSurroundingCodeInput " ) ; 
 
 final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 verify ( checkConfig , filePath , expected , warnList ) ; 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationCommentIsAtTheEndOfBlockInput . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationCommentIsAtTheEndOfBlockInput . java 
 new file mode 100644 
 index 0000000 . . e184f3b 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationCommentIsAtTheEndOfBlockInput . java 
 @ @ - 0 , 0 + 1 , 367 @ @ 
 + package com . google . checkstyle . test . chapter4formatting . rule4861blockcommentstyle ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; 
 + 
 + / * * 
 + * Contains examples of using comments at the end of the block . 
 + * / 
 + public class CommentsIndentationCommentIsAtTheEndOfBlockInput { 
 + 
 + public void foo1 ( ) { 
 + foo2 ( ) ; 
 + / / TODO : missing functionality 
 + } 
 + 
 + public void foo2 ( ) { 
 + foo3 ( ) ; 
 + / / warn 
 + } 
 + 
 + public void foo3 ( ) { 
 + foo2 ( ) ; 
 + / / refreshDisplay ( ) ; 
 + } 
 + 
 + public void foo4 ( ) { 
 + foooooooooooooooooooooooooooooooooooooooooo ( ) ; 
 + / / ^ - - some hint 
 + } 
 + 
 + public void foooooooooooooooooooooooooooooooooooooooooo ( ) { } 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / warn ( a single line border to separate a group of methods ) 
 + 
 + public void foo7 ( ) { 
 + int a = 0 ; 
 + / / warn 
 + } 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / ( a single line border to separate a group of methods ) 
 + 
 + public void foo8 ( ) { } 
 + 
 + public class TestClass { 
 + public void test ( ) { 
 + int a = 0 ; 
 + / / warn 
 + } 
 + / / warn 
 + } 
 + 
 + public void foo9 ( ) { 
 + this . foo1 ( ) ; 
 + / / warn 
 + } 
 + 
 + / / public void foo10 ( ) { 
 + / / 
 + / / } 
 + 
 + public void foo11 ( ) { 
 + CheckUtils 
 + . getFirstNode ( new DetailAST ( ) ) 
 + . getFirstChild ( ) 
 + . getNextSibling ( ) ; 
 + / / comment 
 + } 
 + 
 + public void foo12 ( ) { 
 + CheckUtils 
 + . getFirstNode ( new DetailAST ( ) ) 
 + . getFirstChild ( ) 
 + . getNextSibling ( ) ; 
 + / / warn 
 + } 
 + 
 + public void foo13 ( ) { 
 + CheckUtils . getFirstNode ( new DetailAST ( ) ) 
 + . getFirstChild ( ) 
 + . getNextSibling ( ) ; 
 + / / comment 
 + } 
 + 
 + public void foo14 ( ) { 
 + CheckUtils . getFirstNode ( new DetailAST ( ) ) 
 + . getFirstChild ( ) 
 + . getNextSibling ( ) ; 
 + / / warn 
 + } 
 + 
 + public void foo15 ( ) { 
 + CheckUtils 
 + . getFirstNode ( new DetailAST ( ) ) ; 
 + / / comment 
 + } 
 + 
 + public void foo16 ( ) { 
 + CheckUtils 
 + . getFirstNode ( new DetailAST ( ) ) ; 
 + / / warn 
 + } 
 + 
 + public void foo17 ( ) { 
 + CheckUtils 
 + . getFirstNode ( new DetailAST ( ) ) 
 + . getFirstChild ( ) 
 + / / comment 
 + . getNextSibling ( ) ; 
 + } 
 + 
 + public void foo18 ( ) { 
 + CheckUtils 
 + . getFirstNode ( new DetailAST ( ) ) 
 + . getFirstChild ( ) 
 + / / warn 
 + . getNextSibling ( ) ; 
 + } 
 + 
 + public void foo19 ( ) { 
 + ( new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + 
 + } 
 + } ) ) . 
 + run ( ) ; 
 + / / comment 
 + } 
 + 
 + public void foo20 ( ) { 
 + ( new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + 
 + } 
 + } ) ) . 
 + run ( ) ; 
 + / / warn 
 + } 
 + 
 + public void foo21 ( ) { 
 + int [ ] array = new int [ 5 ] ; 
 + 
 + java . util . List < String > expected = new java . util . ArrayList < > ( ) ; 
 + for ( int i = 0 ; i < 5 ; i + + ) { 
 + org . junit . Assert . assertEquals ( expected . get ( i ) , array [ i ] ) ; 
 + } 
 + String s = String . format ( " The array element " 
 + + " immediately following the end of the collection should be nulled " , 
 + array [ 1 ] ) ; 
 + / / the above example was taken from hibernate - orm and was modified a bit 
 + } 
 + 
 + public void foo22 ( ) { 
 + int [ ] array = new int [ 5 ] ; 
 + 
 + java . util . List < String > expected = new java . util . ArrayList < > ( ) ; 
 + for ( int i = 0 ; i < 5 ; i + + ) { 
 + org . junit . Assert . assertEquals ( expected . get ( i ) , array [ i ] ) ; 
 + } 
 + String s = String . format ( " The array element " 
 + + " immediately following the end of the collection should be nulled " , 
 + array [ 1 ] ) ; 
 + / / warn 
 + } 
 + 
 + public void foo23 ( ) { 
 + new Object ( ) ; 
 + / / comment 
 + } 
 + 
 + public void foo24 ( ) { 
 + new Object ( ) ; 
 + / / warn 
 + } 
 + 
 + public String foo25 ( ) { 
 + return String . format ( " % d " , 
 + 1 ) ; 
 + / / comment 
 + } 
 + 
 + public String foo26 ( ) { 
 + return String . format ( " % d " , 
 + 1 ) ; 
 + / / warn 
 + } 
 + 
 + public void foo27 ( ) { 
 + / / comment 
 + / / block 
 + foo17 ( ) ; 
 + 
 + / / TODO 
 + } 
 + 
 + public String foo28 ( ) { 
 + int a = 5 ; 
 + return String . format ( " % d " , 
 + 1 ) ; 
 + / / comment 
 + } 
 + 
 + public String foo29 ( ) { 
 + int a = 5 ; 
 + return String . format ( " % d " , 
 + 1 ) ; 
 + / / warn 
 + } 
 + 
 + public void foo30 ( ) { 
 + / / comment 
 + int a = 5 ; 
 + / / warn 
 + } 
 + 
 + public void foo31 ( ) { 
 + String s = new String ( " A " 
 + + " B " 
 + + " C " ) ; 
 + / / comment 
 + } 
 + 
 + public void foo32 ( ) { 
 + String s = new String ( " A " 
 + + " B " 
 + + " C " ) ; 
 + / / warn 
 + } 
 + 
 + public void foo33 ( ) { 
 + / / comment 
 + this . foo22 ( ) ; 
 + / / warn 
 + } 
 + 
 + public void foo34 ( ) throws Exception { 
 + throw new Exception ( " " , 
 + new Exception ( ) 
 + ) ; 
 + / / comment 
 + } 
 + 
 + public void foo35 ( ) throws Exception { 
 + throw new Exception ( " " , 
 + new Exception ( ) 
 + ) ; 
 + / / warn 
 + } 
 + 
 + public void foo36 ( ) throws Exception { 
 + throw new Exception ( " " , 
 + new Exception ( ) 
 + ) ; 
 + / / warn 
 + } 
 + 
 + public void foo37 ( ) throws Exception { 
 + throw new Exception ( " " , new Exception ( ) ) ; 
 + / / comment 
 + } 
 + 
 + public void foo38 ( ) throws Exception { 
 + throw new Exception ( " " , new Exception ( ) ) ; 
 + / / warn 
 + } 
 + 
 + public void foo39 ( ) throws Exception { 
 + throw new Exception ( " " , 
 + new Exception ( ) ) ; 
 + / / warn 
 + } 
 + 
 + public void foo40 ( ) throws Exception { 
 + int a = 88 ; 
 + throw new Exception ( " " , new Exception ( ) ) ; 
 + / / warn 
 + } 
 + 
 + public void foo41 ( ) throws Exception { 
 + int a = 88 ; 
 + throw new Exception ( " " , new Exception ( ) ) ; 
 + / / comment 
 + } 
 + 
 + public void foo42 ( ) { 
 + int a = 5 ; 
 + if ( a = = 5 ) { 
 + int b ; 
 + / / comment 
 + } else if ( a = = 6 ) { 
 + 
 + } 
 + } 
 + 
 + public void foo43 ( ) { 
 + try { 
 + int a ; 
 + / / comment 
 + } catch ( Exception e ) { 
 + 
 + } 
 + } 
 + 
 + public void foo44 ( ) { 
 + int ar = 5 ; 
 + / / comment 
 + ar = 6 ; 
 + / / comment 
 + } 
 + 
 + public void foo45 ( ) { 
 + int ar = 5 ; 
 + / / comment 
 + ar = 6 ; 
 + / / warn 
 + } 
 + 
 + public void foo46 ( ) { 
 + / / comment 
 + / / block 
 + / / warn 
 + } 
 + 
 + public void foo47 ( ) { 
 + int a = 5 ; 
 + / / comment 
 + / / block 
 + / / comment 
 + } 
 + 
 + public void foo48 ( ) { 
 + int a = 5 ; 
 + / / comment 
 + / / block 
 + / / warn 
 + } 
 + 
 + public void foo49 ( ) { 
 + / / comment 
 + / / block 
 + / / ok 
 + } 
 + 
 + public void foo50 ( ) { 
 + return ; 
 + 
 + / / No NPE here ! 
 + } 
 + 
 + public String foo51 ( ) { 
 + return String 
 + . valueOf ( " 11 " 
 + ) ; 
 + / / warn 
 + } 
 + 
 + public String foo52 ( ) { 
 + return String 
 + . valueOf ( " 11 " 
 + ) ; 
 + / / comment 
 + } 
 + 
 + / / We almost reached the end of the class here . 
 + } 
 + / / The END of the class . 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInEmptyBlockInput . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInEmptyBlockInput . java 
 new file mode 100644 
 index 0000000 . . 0706d7d 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInEmptyBlockInput . java 
 @ @ - 0 , 0 + 1 , 86 @ @ 
 + package com . google . checkstyle . test . chapter4formatting . rule4861blockcommentstyle ; 
 + 
 + public class CommentsIndentationInEmptyBlockInput { 
 + 
 + private void foo1 ( ) { 
 + int a = 5 , b = 3 , v = 6 ; 
 + if ( a = = b 
 + & & v = = b | | ( a = = 1 
 + / / / / / warn 
 + / * / / warn 
 + * one fine day . . . * / 
 + & & b = = 1 ) ) { 
 + / / Cannot clearly detect user intention of explanation target . 
 + } 
 + } 
 + 
 + private void foo2 ( ) { 
 + int a = 5 , b = 3 , v = 6 ; 
 + if ( a = = b 
 + & & v = = b | | ( a = = 1 
 + & & b = = 1 ) ) { 
 + 
 + 
 + / / comment 
 + } 
 + } 
 + 
 + private void foo3 ( ) { 
 + int a = 5 , b = 3 , v = 6 ; 
 + if ( a = = b 
 + & & v = = b | | ( a = = 1 
 + & & b = = 1 ) ) { 
 + / / warn 
 + } 
 + } 
 + 
 + / / Comments here should be ok by Check 
 + @ SuppressWarnings ( " unused " ) / / trailing 
 + private static void foo4 ( ) { / / trailing 
 + if ( true ) / / trailing comment 
 + { 
 + / / some comment 
 + } 
 + if ( true ) { / / trailing comment 
 + 
 + } 
 + / * * 
 + * 
 + * / 
 + } 
 + 
 + / / Comments here should be ok by Check 
 + @ SuppressWarnings ( " unused " ) / / trailing 
 + private static void foo5 ( ) { / / trailing 
 + if ( true ) / / trailing comment 
 + { 
 + / / warn 
 + } 
 + if ( true ) { / / trailing comment 
 + 
 + } 
 + / * * 
 + * 
 + * / 
 + } 
 + 
 + public void foo6 ( ) { 
 + try { 
 + 
 + } catch ( Exception e ) { 
 + / / warn 
 + } 
 + } 
 + 
 + public void foo7 ( ) { 
 + try { 
 + 
 + } catch ( Exception e ) { 
 + / / TODO : handle exception here 
 + } 
 + } 
 + 
 + private static class MyClass extends Object { 
 + / / no members 
 + } 
 + } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInSwitchBlockInput . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInSwitchBlockInput . java 
 new file mode 100644 
 index 0000000 . . ee9d667 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInSwitchBlockInput . java 
 @ @ - 0 , 0 + 1 , 268 @ @ 
 + package com . google . checkstyle . test . chapter4formatting . rule4861blockcommentstyle ; 
 + 
 + public class CommentsIndentationInSwitchBlockInput { 
 + 
 + private static void fooSwitch ( ) { 
 + switch ( " " ) { 
 + case " 0 " : / / some comment 
 + case " 1 " : 
 + / / my comment 
 + foo1 ( ) ; 
 + break ; 
 + case " 2 " : 
 + / / my comment 
 + / / comment 
 + foo1 ( ) ; 
 + / / comment 
 + break ; 
 + case " 3 " : 
 + / * com * / 
 + foo1 ( ) ; 
 + / * com * / 
 + break ; 
 + case " 5 " : 
 + foo1 ( ) ; 
 + / / warn 
 + case " 6 " : 
 + int k = 7 ; 
 + / / fall through 
 + case " 7 " : 
 + if ( true ) { } 
 + / / warn 
 + case " 8 " : 
 + break ; 
 + case " 9 " : 
 + foo1 ( ) ; 
 + / / fall through 
 + case " 10 " : { 
 + if ( true ) { } 
 + / / fall through 
 + } 
 + case " 11 " : { 
 + / / fall through 
 + } 
 + case " 28 " : { 
 + / / fall through 
 + } 
 + case " 12 " : { 
 + / / warn 
 + int i ; 
 + } 
 + case " 13 " : { 
 + / / some comment in empty case block 
 + } 
 + case " 14 " : { 
 + / / warn 
 + } 
 + case " 15 " : { 
 + foo1 ( ) ; 
 + / / warn 
 + } 
 + case " 16 " : { 
 + int a ; 
 + } 
 + / / fall through 
 + case " 17 " : { 
 + int a ; 
 + } 
 + / / warn 
 + case " 18 " : { System . out . println ( ) ; 
 + } / / trailing comment 
 + case " 19 " : 
 + / / comment 
 + case " 20 " : 
 + / / comment 
 + case " 21 " : 
 + default : 
 + / / comment 
 + break ; 
 + } 
 + } 
 + 
 + private static void foo1 ( ) { 
 + if ( true ) { 
 + switch ( 1 ) { 
 + case 0 : 
 + 
 + case 1 : 
 + / / warn 
 + int b = 10 ; 
 + default : 
 + / / comment 
 + } 
 + 
 + } 
 + } 
 + 
 + public void fooDotInCaseBlock ( ) { 
 + int i = 0 ; 
 + String s = " " ; 
 + 
 + switch ( i ) { 
 + case - 2 : 
 + / / what 
 + i + + ; 
 + / / no break here 
 + case 0 : 
 + / / what 
 + s . indexOf ( " ignore " ) ; 
 + / / no break here 
 + case - 1 : 
 + / / what 
 + s . indexOf ( " no way " ) ; 
 + / / warn 
 + case 1 : 
 + case 2 : 
 + i - - ; 
 + / / no break here 
 + case 3 : { } 
 + / / fall through 
 + 
 + 
 + } 
 + 
 + String breaks = " " 
 + / / warn 
 + + " < / table > " 
 + / / middle 
 + + " " 
 + / / end 
 + ; 
 + } 
 + 
 + public void foo2 ( ) { 
 + int a = 1 ; 
 + switch ( a ) { 
 + case 1 : 
 + default : 
 + / / warn 
 + } 
 + } 
 + 
 + public void foo3 ( ) { 
 + int a = 1 ; 
 + switch ( a ) { 
 + case 1 : 
 + default : 
 + 
 + / / comment 
 + } 
 + } 
 + 
 + public void foo4 ( ) { 
 + int a = 1 ; 
 + switch ( a ) { 
 + case 1 : 
 + int b ; 
 + / / warn 
 + default : 
 + } 
 + } 
 + 
 + public void foo5 ( ) { 
 + int a = 1 ; 
 + switch ( a ) { 
 + case 1 : 
 + int b ; 
 + / / comment 
 + default : 
 + } 
 + } 
 + 
 + public void foo6 ( ) { 
 + int a = 1 ; 
 + switch ( a ) { 
 + case 1 : 
 + int b ; 
 + / / comment 
 + default : 
 + } 
 + } 
 + 
 + public void foo7 ( ) { 
 + int a = 2 ; 
 + String s = " " ; 
 + switch ( a ) { 
 + / / comment 
 + / / comment 
 + / / comment 
 + case 1 : 
 + case 2 : 
 + / / comment 
 + / / comment 
 + foo1 ( ) ; 
 + / / comment 
 + case 3 : 
 + / / comment 
 + / / comment 
 + / / comment 
 + case 4 : 
 + / / warn 
 + case 5 : 
 + s . toString ( ) . toString ( ) . toString ( ) ; 
 + / / warn 
 + / / warn 
 + / / warn 
 + default : 
 + } 
 + } 
 + 
 + public void foo8 ( ) { 
 + int a = 2 ; 
 + String s = " " ; 
 + switch ( a ) { 
 + / / comment 
 + / / comment 
 + / / comment 
 + case 1 : 
 + case 2 : 
 + / / comment 
 + / / comment 
 + foo1 ( ) ; 
 + / / comment 
 + case 3 : 
 + / / comment 
 + / / comment 
 + s . toString ( ) . toString ( ) . toString ( ) ; 
 + / / comment 
 + case 4 : 
 + / / warn 
 + default : 
 + } 
 + } 
 + 
 + public void foo9 ( ) { 
 + int a = 5 ; 
 + switch ( a ) { 
 + case 1 : 
 + case 2 : 
 + / / comment 
 + } 
 + } 
 + 
 + public void foo10 ( ) { 
 + int a = 5 ; 
 + switch ( a ) { 
 + case 1 : 
 + default : 
 + / / comment 
 + } 
 + } 
 + 
 + public void foo11 ( ) { 
 + int a = 5 ; 
 + switch ( a ) { 
 + case 1 : 
 + case 2 : 
 + / / comment 
 + } 
 + } 
 + 
 + public void foo12 ( ) { 
 + int a = 5 ; 
 + switch ( a ) { 
 + / / comment 
 + case 1 : 
 + } 
 + } 
 + } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInput . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInput . java 
 deleted file mode 100644 
 index 5bb5229 . . 0000000 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationInput . java 
 + + + / dev / null 
 @ @ - 1 , 133 + 0 , 0 @ @ 
 - / / warn ( some comment ) 
 - package com . google . checkstyle . test . chapter4formatting . rule4861blockcommentstyle ; 
 - 
 - import java . util . * ; 
 - 
 - / / ok ( comment ) 
 - public class CommentsIndentationInput { 
 - 
 - private void foo ( ) { 
 - if ( true ) { 
 - / / ok ( here initialize some variables ) 
 - int k = 0 ; / / ok ( trailing comment ) 
 - / / warn ( initialize b ) 
 - int b = 10 ; 
 - / / ok ( sss ) 
 - } 
 - } 
 - 
 - private void foo1 ( ) { 
 - if ( true ) { 
 - / * ok ( some ) * / 
 - int k = 0 ; 
 - / * / / warn ( some ) * / 
 - int b = 10 ; 
 - / * / / warn 
 - * * / 
 - double d ; / * ok ( trailing comment ) * / 
 - / * / / warn 
 - * 
 - * / 
 - boolean bb ; 
 - / * * * / 
 - / * ok ( my comment ) * / 
 - / * 
 - * 
 - * 
 - * ok ( some ) 
 - * / 
 - / * 
 - * ok ( comment ) 
 - * / 
 - boolean x ; 
 - } 
 - } 
 - 
 - private void foo3 ( ) { 
 - int a = 5 , b = 3 , v = 6 ; 
 - if ( a = = b 
 - & & v = = b | | ( a = = 1 
 - / / / warn ( What about that case ? the same for block comments ) 
 - / * / / warn 
 - * one fine day . . . * / 
 - & & b = = 1 ) ) { 
 - / / ok ( code ) 
 - } 
 - } 
 - 
 - / / ok ( Comments here should be ok by Check ) 
 - @ SuppressWarnings ( " unused " ) / / ok ( trailing ) 
 - private static void check ( ) { / / ok ( trailing ) 
 - if ( true ) / / ok ( trailing comment ) 
 - { 
 - / / ok ( some comment ) 
 - } 
 - if ( true ) { / / ok ( trailing comment ) 
 - 
 - } 
 - / * * ok 
 - * 
 - * / 
 - } 
 - 
 - private static void com ( ) { 
 - / * ok ( here ' s my weird trailing comment ) * / 
 - boolean b = true ; 
 - } 
 - 
 - 
 - private static void cases ( ) { 
 - switch ( " " ) { 
 - case " 0 " : / / some comment 
 - case " 1 " : 
 - / / my comment 
 - com ( ) ; 
 - break ; 
 - case " 2 " : 
 - / / my comment 
 - / / comment 
 - check ( ) ; 
 - / / comment 
 - break ; 
 - case " 3 " : 
 - / * com * / 
 - check ( ) ; 
 - / * com * / 
 - break ; 
 - case " 5 " : 
 - check ( ) ; 
 - / / fall through 
 - case " 6 " : 
 - int k = 7 ; 
 - / / fall through 
 - case " 7 " : 
 - if ( true ) { } 
 - / / fall through 
 - case " 8 " : 
 - break ; 
 - default : 
 - / / comment 
 - break ; 
 - } 
 - } 
 - 
 - private static final String [ ] [ ] mergeMatrix = { 
 - / / TOP ALWAYS NEVER UNKNOWN 
 - / * TOP * / { " " , } , 
 - / * ALWAYS * / { " " , " " , } , 
 - / * NEVER * / { " NEVER " , " UNKNOWN " , " NEVER " , } , 
 - / * UNKNOWN * / { " UNKNOWN " , " UNKNOWN " , " UNKNOWN " , " UNKNOWN " } , } ; 
 - 
 - private void foo4 ( ) { 
 - if ( ! Arrays . equals ( new String [ ] { " " } , new String [ ] { " " } ) 
 - / * wierd trailing comment * / ) { 
 - } 
 - } 
 - 
 - / * * 
 - * ok ( some javadoc ) 
 - * / 
 - private static void l ( ) { 
 - } 
 - } / / The Check should not throw NPE here ! 
 - / * The Check should not throw NPE here ! * / 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationSurroundingCodeInput . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationSurroundingCodeInput . java 
 new file mode 100644 
 index 0000000 . . cc5525d 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / CommentsIndentationSurroundingCodeInput . java 
 @ @ - 0 , 0 + 1 , 127 @ @ 
 + / / comment 
 + package com . google . checkstyle . test . chapter4formatting . rule4861blockcommentstyle ; 
 + 
 + import java . util . Arrays ; 
 + 
 + / / some 
 + public class CommentsIndentationSurroundingCodeInput 
 + { 
 + private void foo1 ( ) { 
 + if ( true ) { 
 + / / here initialize some variables 
 + int k = 0 ; / / trailing comment 
 + / / warn 
 + int b = 10 ; 
 + / / sss 
 + } 
 + } 
 + 
 + private void foo2 ( ) { 
 + if ( true ) { 
 + / * some * / 
 + int k = 0 ; 
 + / * / / warn * / 
 + int b = 10 ; 
 + / * / / warn 
 + * * / 
 + double d ; / * trailing comment * / 
 + / * / / warn 
 + * 
 + * / 
 + boolean bb ; 
 + / * * * / 
 + / * my comment * / 
 + / * 
 + * 
 + * 
 + * some 
 + * / 
 + / * 
 + * comment 
 + * / 
 + boolean x ; 
 + } 
 + } 
 + 
 + private void foo3 ( ) { 
 + int a = 5 , b = 3 , v = 6 ; 
 + if ( a = = b 
 + & & v = = b | | ( a = = 1 
 + / / / / / warn 
 + / * / / warn 
 + * one fine day . . . * / 
 + & & b = = 1 ) ) { 
 + } 
 + } 
 + 
 + private static void com ( ) { 
 + / * here ' s my weird trailing comment * / boolean b = true ; 
 + } 
 + 
 + private static final String [ ] [ ] mergeMatrix = { 
 + / / This example of trailing block comments was found in PMD sources . 
 + / * TOP * / { " " , } , 
 + / * ALWAYS * / { " " , " " , } , 
 + / * NEVER * / { " NEVER " , " UNKNOWN " , " NEVER " , } , 
 + / * UNKNOWN * / { " UNKNOWN " , " UNKNOWN " , " UNKNOWN " , " UNKNOWN " } , } ; 
 + 
 + private void foo4 ( ) { 
 + if ( ! Arrays . equals ( new String [ ] { " " } , new String [ ] { " " } ) 
 + / * wierd trailing comment * / ) { 
 + } 
 + } 
 + / * * 
 + * some javadoc 
 + * / 
 + private static void l ( ) { 
 + } 
 + 
 + public void foid5 ( ) { 
 + String s = " " ; 
 + s . toString ( ) . toString ( ) . toString ( ) ; 
 + / / comment 
 + } 
 + 
 + public void foo6 ( ) { 
 + / / comment 
 + / / . . . 
 + / / block 
 + / / . . . 
 + / / warn 
 + String someStr = new String ( ) ; 
 + } 
 + 
 + public void foo7 ( ) { 
 + / / comment 
 + / / . . . 
 + / / block 
 + / / warn 
 + / / comment 
 + String someStr = new String ( ) ; 
 + } 
 + 
 + public void foo8 ( ) { 
 + String s = new String ( ) ; / / comment 
 + / / . . . 
 + / / block 
 + / / . . . 
 + / / warn 
 + String someStr = new String ( ) ; 
 + } 
 + 
 + public String foo9 ( String s1 , String s2 , String s3 ) { 
 + return " " ; 
 + } 
 + 
 + public void foo10 ( ) 
 + throws Exception { 
 + 
 + final String pattern = " ^ foo $ " ; 
 + 
 + final String [ ] expected = { 
 + " 7 : 13 : " + foo9 ( " " , " " , " " ) , 
 + / / comment 
 + } ; 
 + } 
 + } / / The Check should not throw NPE here ! 
 + / / The Check should not throw NPE here !

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 index a2979db . . 679ad61 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassFanOutComplexityCheck . MSG _ KEY ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 @ @ - 32 , 6 + 33 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " metrics " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void test ( ) throws Exception { 
 DefaultConfiguration checkConfig = createCheckConfig ( ClassFanOutComplexityCheck . class ) ; 
 @ @ - 43 , 10 + 50 , 7 @ @ public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { 
 " 38 : 1 : " + getCheckMessage ( MSG _ KEY , 1 , 0 ) , 
 } ; 
 
 - verify ( checkConfig , 
 - getPath ( " checks " + File . separator 
 - + " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , 
 - expected ) ; 
 + verify ( checkConfig , getPath ( " ClassCouplingCheckTestInput . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 67 , 10 + 71 , 7 @ @ public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { 
 String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 createChecker ( checkConfig ) ; 
 - verify ( checkConfig , 
 - getPath ( " checks " + File . separator 
 - + " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , 
 - expected ) ; 
 + verify ( checkConfig , getPath ( " ClassCouplingCheckTestInput . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / Input15Extensions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / Input15Extensions . java 
 new file mode 100644 
 index 0000000 . . d636406 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / Input15Extensions . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / / someexamples of 1 . 5 extensions 
 + package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 + 
 + @ interface MyAnnotation1 { 
 + String name ( ) ; 
 + int version ( ) ; 
 + } 
 + 
 + @ MyAnnotation1 ( name = " ABC " , version = 1 ) 
 + public class Input15Extensions 
 + { 
 + 
 + } 
 + 
 + enum Enum1 
 + { 
 + A , B , C ; 
 + Enum1 ( ) { } 
 + public String toString ( ) { 
 + return " " ; / / some custom implementation 
 + } 
 + } 
 + 
 + interface TestRequireThisEnum 
 + { 
 + enum DAY _ OF _ WEEK 
 + { 
 + SUNDAY , 
 + MONDAY , 
 + TUESDAY , 
 + WEDNESDAY , 
 + THURSDAY , 
 + FRIDAY , 
 + SATURDAY 
 + } 
 + }
