BLEU SCORE: 0.050971039855229695

TEST MSG: Issue # 2639 : ID is removed from allowed abbreviations
GENERATED MSG: Issue # 215 : Updated checkstyle _ checks . xml to use ParameterNumber in default configuration

TEST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index cbcc187 . . 955a817 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 320 , 7 + 320 , 7 @ @ <nl> < module name = " AbbreviationAsWordInName " > <nl> < property name = " ignoreFinal " value = " false " / > <nl> < property name = " allowedAbbreviationLength " value = " 1 " / > <nl> - < property name = " allowedAbbreviations " value = " AST , CPP , RTE , RE , ID , CSV " / > <nl> + < property name = " allowedAbbreviations " value = " AST , CPP , RTE , RE , CSV " / > <nl> < / module > <nl> < module name = " AbstractClassName " / > <nl> < module name = " ClassTypeParameterName " / > <nl> diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 9a0b532 . . 6f5dc6a 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 34 , 9 + 34 , 14 @ @ <nl> <nl> < ! - - should be removed at 7 . 0 version , we keep for some time to avoid braking compatibiilty - - > <nl> < suppress checks = " AbbreviationAsWordInName " <nl> - files = " nt / CheckstyleAntTask . java " <nl> + files = " CheckstyleAntTask . java " <nl> lines = " 230 " / > <nl> <nl> + < ! - - should be removed at 7 . 0 version , we keep for some time to avoid braking compatibiilty - - > <nl> + < suppress checks = " AbbreviationAsWordInName " <nl> + files = " AbstractComplexityCheck . java " <nl> + lines = " 64 " / > <nl> + <nl> < ! - - illegal words are part of Javadoc - - > <nl> < suppress checks = " TodoComment " files = " . * TodoCommentCheck \ . java " / > <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java <nl> index a24b669 . . 03a6884 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java <nl> @ @ - 32 , 8 + 32 , 15 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * the source and therefore the number of required tests . Generally 1 - 4 is <nl> * considered good , 5 - 7 ok , 8 - 10 consider re - factoring , and 11 + re - factor now ! <nl> * <nl> + * < p > Check has following properties : <nl> + * <nl> + * < p > < b > switchBlockAsSingleDecisionPoint < / b > - controls whether to treat the whole switch <nl> + * block as a single decision point . Default value is < b > false < / b > <nl> + * <nl> + * <nl> * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > <nl> * @ author Oliver Burn <nl> + * @ author < a href = " mailto : andreyselkin @ gmail . com " > Andrei Selkin < / a > <nl> * / <nl> public class CyclomaticComplexityCheck <nl> extends AbstractComplexityCheck { <nl> @ @ - 47 , 11 + 54 , 23 @ @ public class CyclomaticComplexityCheck <nl> / * * Default allowed complexity . * / <nl> private static final int DEFAULT _ VALUE = 10 ; <nl> <nl> + / * * Whether to treat the whole switch block as a single decision point . * / <nl> + private boolean switchBlockAsSingleDecisionPoint ; <nl> + <nl> / * * Create an instance . * / <nl> public CyclomaticComplexityCheck ( ) { <nl> super ( DEFAULT _ VALUE ) ; <nl> } <nl> <nl> + / * * <nl> + * Sets whether to treat the whole switch block as a single decision point . <nl> + * @ param switchBlockAsSingleDecisionPoint whether to treat the whole switch <nl> + * block as a single decision point . <nl> + * / <nl> + public void setSwitchBlockAsSingleDecisionPoint ( boolean switchBlockAsSingleDecisionPoint ) { <nl> + this . switchBlockAsSingleDecisionPoint = switchBlockAsSingleDecisionPoint ; <nl> + } <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> return new int [ ] { <nl> @ @ - 63 , 6 + 82 , 7 @ @ public class CyclomaticComplexityCheck <nl> TokenTypes . LITERAL _ DO , <nl> TokenTypes . LITERAL _ FOR , <nl> TokenTypes . LITERAL _ IF , <nl> + TokenTypes . LITERAL _ SWITCH , <nl> TokenTypes . LITERAL _ CASE , <nl> TokenTypes . LITERAL _ CATCH , <nl> TokenTypes . QUESTION , <nl> @ @ - 82 , 6 + 102 , 7 @ @ public class CyclomaticComplexityCheck <nl> TokenTypes . LITERAL _ DO , <nl> TokenTypes . LITERAL _ FOR , <nl> TokenTypes . LITERAL _ IF , <nl> + TokenTypes . LITERAL _ SWITCH , <nl> TokenTypes . LITERAL _ CASE , <nl> TokenTypes . LITERAL _ CATCH , <nl> TokenTypes . QUESTION , <nl> @ @ - 92 , 7 + 113 , 14 @ @ public class CyclomaticComplexityCheck <nl> <nl> @ Override <nl> protected final void visitTokenHook ( DetailAST ast ) { <nl> - incrementCurrentValue ( BigInteger . ONE ) ; <nl> + if ( switchBlockAsSingleDecisionPoint ) { <nl> + if ( ast . getType ( ) ! = TokenTypes . LITERAL _ CASE ) { <nl> + incrementCurrentValue ( BigInteger . ONE ) ; <nl> + } <nl> + } <nl> + else if ( ast . getType ( ) ! = TokenTypes . LITERAL _ SWITCH ) { <nl> + incrementCurrentValue ( BigInteger . ONE ) ; <nl> + } <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java <nl> index b4ec2c2 . . c58e981 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java <nl> @ @ - 31 , 6 + 31 , 34 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> public class CyclomaticComplexityCheckTest <nl> extends BaseCheckTestSupport { <nl> @ Test <nl> + public void testSwitchBlockAsSingleDecisionPointSetToTrue ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( CyclomaticComplexityCheck . class ) ; <nl> + checkConfig . addAttribute ( " max " , " 0 " ) ; <nl> + checkConfig . addAttribute ( " switchBlockAsSingleDecisionPoint " , " true " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 4 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " metrics / ComplexityCheckSwitchBlocksTestInput . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSwitchBlockAsSingleDecisionPointSetToFalse ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( CyclomaticComplexityCheck . class ) ; <nl> + checkConfig . addAttribute ( " max " , " 0 " ) ; <nl> + checkConfig . addAttribute ( " switchBlockAsSingleDecisionPoint " , " false " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 4 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " metrics / ComplexityCheckSwitchBlocksTestInput . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void test ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( CyclomaticComplexityCheck . class ) ; <nl> @ @ - 66 , 6 + 94 , 7 @ @ public class CyclomaticComplexityCheckTest <nl> TokenTypes . LITERAL _ DO , <nl> TokenTypes . LITERAL _ FOR , <nl> TokenTypes . LITERAL _ IF , <nl> + TokenTypes . LITERAL _ SWITCH , <nl> TokenTypes . LITERAL _ CASE , <nl> TokenTypes . LITERAL _ CATCH , <nl> TokenTypes . QUESTION , <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ComplexityCheckSwitchBlocksTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ComplexityCheckSwitchBlocksTestInput . java <nl> new file mode 100644 <nl> index 0000000 . . a3be8a4 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ComplexityCheckSwitchBlocksTestInput . java <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + package com . puppycrawl . tools . checkstyle . metrics ; <nl> + <nl> + public class ComplexityCheckSwitchBlocksTestInput { <nl> + public void foo2 ( ) { <nl> + String programmingLanguage = " Java " ; <nl> + switch ( programmingLanguage ) { <nl> + case " Java " : <nl> + case " C # " : <nl> + case " C + + " : <nl> + System . out . printf ( programmingLanguage + " is an object oriented programming language . " ) ; <nl> + break ; <nl> + case " C " : <nl> + System . out . printf ( programmingLanguage + " is not an object oriented programming language . " ) ; <nl> + break ; <nl> + default : <nl> + System . out . printf ( programmingLanguage + " is unknown language . " ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ metrics . xml b / src / xdocs / config _ metrics . xml <nl> index 8c21c29 . . 2cf08ab 100644 <nl> - - - a / src / xdocs / config _ metrics . xml <nl> + + + b / src / xdocs / config _ metrics . xml <nl> @ @ - 333 , 6 + 333 , 12 @ @ <nl> < td > < a href = " property _ types . html # integer " > integer < / a > < / td > <nl> < td > < code > 10 < / code > < / td > <nl> < / tr > <nl> + < tr > <nl> + < td > switchBlockAsSingleDecisionPoint < / td > <nl> + < td > whether to treat the whole switch block as a single decision point < / td > <nl> + < td > < a href = " property _ types . html # integer " > boolean < / a > < / td > <nl> + < td > < code > false < / code > < / td > <nl> + < / tr > <nl> < / table > <nl> < / subsection > <nl> <nl> @ @ - 353 , 11 + 359 , 11 @ @ <nl> & lt ; / module & gt ; <nl> < / source > <nl> < p > <nl> - Explanation on how complexity is calculated : <nl> + Explanation on how complexity is calculated ( switchBlockAsSingleDecisionPoint is set to false ) : <nl> < / p > <nl> < source > <nl> class CC { <nl> - / / Cyclomatic Complexity = 13 <nl> + / / Cyclomatic Complexity = 12 <nl> public void doSmth ( ) { / / 1 <nl> if ( a = = b ) { / / 2 <nl> if ( a1 = = b1 / / 3 <nl> @ @ - 391 , 13 + 397 , 34 @ @ class CC { <nl> case 2 : / / 12 <nl> fiddle ( ) ; <nl> break ; <nl> - default : / / 13 <nl> + default : <nl> fiddle ( ) ; <nl> break ; <nl> } <nl> } <nl> } <nl> } < / source > <nl> + < p > <nl> + Explanation on how complexity is calculated ( switchBlockAsSingleDecisionPoint is set to true ) : <nl> + < / p > <nl> + < source > <nl> + class SwitchExample { <nl> + / / Cyclomatic Complexity = 2 <nl> + public void doSmth ( ) { / / 1 <nl> + int z = 1 ; <nl> + switch ( z ) { / / 2 <nl> + case 1 : <nl> + foo1 ( ) ; <nl> + break ; <nl> + case 2 : <nl> + foo2 ( ) ; <nl> + break ; <nl> + default : <nl> + fooDefault ( ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Package " >

TEST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index cbcc187 . . 955a817 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 320 , 7 + 320 , 7 @ @ 
 < module name = " AbbreviationAsWordInName " > 
 < property name = " ignoreFinal " value = " false " / > 
 < property name = " allowedAbbreviationLength " value = " 1 " / > 
 - < property name = " allowedAbbreviations " value = " AST , CPP , RTE , RE , ID , CSV " / > 
 + < property name = " allowedAbbreviations " value = " AST , CPP , RTE , RE , CSV " / > 
 < / module > 
 < module name = " AbstractClassName " / > 
 < module name = " ClassTypeParameterName " / > 
 diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 9a0b532 . . 6f5dc6a 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 34 , 9 + 34 , 14 @ @ 
 
 < ! - - should be removed at 7 . 0 version , we keep for some time to avoid braking compatibiilty - - > 
 < suppress checks = " AbbreviationAsWordInName " 
 - files = " nt / CheckstyleAntTask . java " 
 + files = " CheckstyleAntTask . java " 
 lines = " 230 " / > 
 
 + < ! - - should be removed at 7 . 0 version , we keep for some time to avoid braking compatibiilty - - > 
 + < suppress checks = " AbbreviationAsWordInName " 
 + files = " AbstractComplexityCheck . java " 
 + lines = " 64 " / > 
 + 
 < ! - - illegal words are part of Javadoc - - > 
 < suppress checks = " TodoComment " files = " . * TodoCommentCheck \ . java " / > 


NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java 
 index a24b669 . . 03a6884 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java 
 @ @ - 32 , 8 + 32 , 15 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * the source and therefore the number of required tests . Generally 1 - 4 is 
 * considered good , 5 - 7 ok , 8 - 10 consider re - factoring , and 11 + re - factor now ! 
 * 
 + * < p > Check has following properties : 
 + * 
 + * < p > < b > switchBlockAsSingleDecisionPoint < / b > - controls whether to treat the whole switch 
 + * block as a single decision point . Default value is < b > false < / b > 
 + * 
 + * 
 * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > 
 * @ author Oliver Burn 
 + * @ author < a href = " mailto : andreyselkin @ gmail . com " > Andrei Selkin < / a > 
 * / 
 public class CyclomaticComplexityCheck 
 extends AbstractComplexityCheck { 
 @ @ - 47 , 11 + 54 , 23 @ @ public class CyclomaticComplexityCheck 
 / * * Default allowed complexity . * / 
 private static final int DEFAULT _ VALUE = 10 ; 
 
 + / * * Whether to treat the whole switch block as a single decision point . * / 
 + private boolean switchBlockAsSingleDecisionPoint ; 
 + 
 / * * Create an instance . * / 
 public CyclomaticComplexityCheck ( ) { 
 super ( DEFAULT _ VALUE ) ; 
 } 
 
 + / * * 
 + * Sets whether to treat the whole switch block as a single decision point . 
 + * @ param switchBlockAsSingleDecisionPoint whether to treat the whole switch 
 + * block as a single decision point . 
 + * / 
 + public void setSwitchBlockAsSingleDecisionPoint ( boolean switchBlockAsSingleDecisionPoint ) { 
 + this . switchBlockAsSingleDecisionPoint = switchBlockAsSingleDecisionPoint ; 
 + } 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 return new int [ ] { 
 @ @ - 63 , 6 + 82 , 7 @ @ public class CyclomaticComplexityCheck 
 TokenTypes . LITERAL _ DO , 
 TokenTypes . LITERAL _ FOR , 
 TokenTypes . LITERAL _ IF , 
 + TokenTypes . LITERAL _ SWITCH , 
 TokenTypes . LITERAL _ CASE , 
 TokenTypes . LITERAL _ CATCH , 
 TokenTypes . QUESTION , 
 @ @ - 82 , 6 + 102 , 7 @ @ public class CyclomaticComplexityCheck 
 TokenTypes . LITERAL _ DO , 
 TokenTypes . LITERAL _ FOR , 
 TokenTypes . LITERAL _ IF , 
 + TokenTypes . LITERAL _ SWITCH , 
 TokenTypes . LITERAL _ CASE , 
 TokenTypes . LITERAL _ CATCH , 
 TokenTypes . QUESTION , 
 @ @ - 92 , 7 + 113 , 14 @ @ public class CyclomaticComplexityCheck 
 
 @ Override 
 protected final void visitTokenHook ( DetailAST ast ) { 
 - incrementCurrentValue ( BigInteger . ONE ) ; 
 + if ( switchBlockAsSingleDecisionPoint ) { 
 + if ( ast . getType ( ) ! = TokenTypes . LITERAL _ CASE ) { 
 + incrementCurrentValue ( BigInteger . ONE ) ; 
 + } 
 + } 
 + else if ( ast . getType ( ) ! = TokenTypes . LITERAL _ SWITCH ) { 
 + incrementCurrentValue ( BigInteger . ONE ) ; 
 + } 
 } 
 
 @ Override 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java 
 index b4ec2c2 . . c58e981 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java 
 @ @ - 31 , 6 + 31 , 34 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 public class CyclomaticComplexityCheckTest 
 extends BaseCheckTestSupport { 
 @ Test 
 + public void testSwitchBlockAsSingleDecisionPointSetToTrue ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( CyclomaticComplexityCheck . class ) ; 
 + checkConfig . addAttribute ( " max " , " 0 " ) ; 
 + checkConfig . addAttribute ( " switchBlockAsSingleDecisionPoint " , " true " ) ; 
 + 
 + final String [ ] expected = { 
 + " 4 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " metrics / ComplexityCheckSwitchBlocksTestInput . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testSwitchBlockAsSingleDecisionPointSetToFalse ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( CyclomaticComplexityCheck . class ) ; 
 + checkConfig . addAttribute ( " max " , " 0 " ) ; 
 + checkConfig . addAttribute ( " switchBlockAsSingleDecisionPoint " , " false " ) ; 
 + 
 + final String [ ] expected = { 
 + " 4 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " metrics / ComplexityCheckSwitchBlocksTestInput . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void test ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( CyclomaticComplexityCheck . class ) ; 
 @ @ - 66 , 6 + 94 , 7 @ @ public class CyclomaticComplexityCheckTest 
 TokenTypes . LITERAL _ DO , 
 TokenTypes . LITERAL _ FOR , 
 TokenTypes . LITERAL _ IF , 
 + TokenTypes . LITERAL _ SWITCH , 
 TokenTypes . LITERAL _ CASE , 
 TokenTypes . LITERAL _ CATCH , 
 TokenTypes . QUESTION , 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ComplexityCheckSwitchBlocksTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ComplexityCheckSwitchBlocksTestInput . java 
 new file mode 100644 
 index 0000000 . . a3be8a4 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / ComplexityCheckSwitchBlocksTestInput . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package com . puppycrawl . tools . checkstyle . metrics ; 
 + 
 + public class ComplexityCheckSwitchBlocksTestInput { 
 + public void foo2 ( ) { 
 + String programmingLanguage = " Java " ; 
 + switch ( programmingLanguage ) { 
 + case " Java " : 
 + case " C # " : 
 + case " C + + " : 
 + System . out . printf ( programmingLanguage + " is an object oriented programming language . " ) ; 
 + break ; 
 + case " C " : 
 + System . out . printf ( programmingLanguage + " is not an object oriented programming language . " ) ; 
 + break ; 
 + default : 
 + System . out . printf ( programmingLanguage + " is unknown language . " ) ; 
 + break ; 
 + } 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ metrics . xml b / src / xdocs / config _ metrics . xml 
 index 8c21c29 . . 2cf08ab 100644 
 - - - a / src / xdocs / config _ metrics . xml 
 + + + b / src / xdocs / config _ metrics . xml 
 @ @ - 333 , 6 + 333 , 12 @ @ 
 < td > < a href = " property _ types . html # integer " > integer < / a > < / td > 
 < td > < code > 10 < / code > < / td > 
 < / tr > 
 + < tr > 
 + < td > switchBlockAsSingleDecisionPoint < / td > 
 + < td > whether to treat the whole switch block as a single decision point < / td > 
 + < td > < a href = " property _ types . html # integer " > boolean < / a > < / td > 
 + < td > < code > false < / code > < / td > 
 + < / tr > 
 < / table > 
 < / subsection > 
 
 @ @ - 353 , 11 + 359 , 11 @ @ 
 & lt ; / module & gt ; 
 < / source > 
 < p > 
 - Explanation on how complexity is calculated : 
 + Explanation on how complexity is calculated ( switchBlockAsSingleDecisionPoint is set to false ) : 
 < / p > 
 < source > 
 class CC { 
 - / / Cyclomatic Complexity = 13 
 + / / Cyclomatic Complexity = 12 
 public void doSmth ( ) { / / 1 
 if ( a = = b ) { / / 2 
 if ( a1 = = b1 / / 3 
 @ @ - 391 , 13 + 397 , 34 @ @ class CC { 
 case 2 : / / 12 
 fiddle ( ) ; 
 break ; 
 - default : / / 13 
 + default : 
 fiddle ( ) ; 
 break ; 
 } 
 } 
 } 
 } < / source > 
 + < p > 
 + Explanation on how complexity is calculated ( switchBlockAsSingleDecisionPoint is set to true ) : 
 + < / p > 
 + < source > 
 + class SwitchExample { 
 + / / Cyclomatic Complexity = 2 
 + public void doSmth ( ) { / / 1 
 + int z = 1 ; 
 + switch ( z ) { / / 2 
 + case 1 : 
 + foo1 ( ) ; 
 + break ; 
 + case 2 : 
 + foo2 ( ) ; 
 + break ; 
 + default : 
 + fooDefault ( ) ; 
 + break ; 
 + } 
 + } 
 + } < / source > 
 < / subsection > 
 
 < subsection name = " Package " >
