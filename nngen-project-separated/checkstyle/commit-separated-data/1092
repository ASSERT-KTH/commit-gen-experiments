BLEU SCORE: 0.036967197413021805

TEST MSG: Issue # 3308 : fixed EqualsHashCode equals method parameter test
GENERATED MSG: added check for equals ( ) vs . hashCode , RFE # 554373

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> index 50b082e . . 4497bc0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> @ @ - 25 , 11 + 25 , 17 @ @ import java . util . Map ; <nl> import antlr . collections . AST ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; <nl> <nl> / * * <nl> * < p > <nl> - * Checks that classes that override equals ( ) also override hashCode ( ) . <nl> + * Checks that classes that either override { @ code equals ( ) } or { @ code hashCode ( ) } also <nl> + * overrides the other . <nl> + * This checks only verifies that the method declarations match { @ link Object # equals ( Object ) } and <nl> + * { @ link Object # hashCode ( ) } exactly to be considered an override . This check does not verify <nl> + * invalid method names , parameters other than { @ code Object } , or anything else . <nl> * < / p > <nl> * < p > <nl> * Rationale : The contract of equals ( ) and hashCode ( ) requires that <nl> @ @ - 91 , 48 + 97 , 62 @ @ public class EqualsHashCodeCheck <nl> <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> + if ( isEqualsMethod ( ast ) ) { <nl> + objBlockWithEquals . put ( ast . getParent ( ) , ast ) ; <nl> + } <nl> + else if ( isHashCodeMethod ( ast ) ) { <nl> + objBlockWithHashCode . put ( ast . getParent ( ) , ast ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Determines if an AST is a valid Equals method implementation . <nl> + * <nl> + * @ param ast the AST to check <nl> + * @ return true if the { code ast } is a Equals method . <nl> + * / <nl> + private static boolean isEqualsMethod ( DetailAST ast ) { <nl> final DetailAST modifiers = ast . getFirstChild ( ) ; <nl> - final AST type = ast . findFirstToken ( TokenTypes . TYPE ) ; <nl> - final AST methodName = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> final DetailAST parameters = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> <nl> - if ( type . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ BOOLEAN <nl> - & & " equals " . equals ( methodName . getText ( ) ) <nl> + return CheckUtils . isEqualsMethod ( ast ) <nl> & & modifiers . branchContains ( TokenTypes . LITERAL _ PUBLIC ) <nl> - & & parameters . getChildCount ( ) = = 1 <nl> & & isObjectParam ( parameters . getFirstChild ( ) ) <nl> - ) { <nl> - objBlockWithEquals . put ( ast . getParent ( ) , ast ) ; <nl> - } <nl> - else if ( type . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ INT <nl> + & & ( ast . branchContains ( TokenTypes . SLIST ) <nl> + | | modifiers . branchContains ( TokenTypes . LITERAL _ NATIVE ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Determines if an AST is a valid HashCode method implementation . <nl> + * <nl> + * @ param ast the AST to check <nl> + * @ return true if the { code ast } is a HashCode method . <nl> + * / <nl> + private static boolean isHashCodeMethod ( DetailAST ast ) { <nl> + final DetailAST modifiers = ast . getFirstChild ( ) ; <nl> + final AST type = ast . findFirstToken ( TokenTypes . TYPE ) ; <nl> + final AST methodName = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> + final DetailAST parameters = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> + <nl> + return type . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ INT <nl> & & " hashCode " . equals ( methodName . getText ( ) ) <nl> & & modifiers . branchContains ( TokenTypes . LITERAL _ PUBLIC ) <nl> - & & parameters . getFirstChild ( ) = = null ) { <nl> - objBlockWithHashCode . put ( ast . getParent ( ) , ast ) ; <nl> - } <nl> + & & ! modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) <nl> + & & parameters . getFirstChild ( ) = = null <nl> + & & ( ast . branchContains ( TokenTypes . SLIST ) <nl> + | | modifiers . branchContains ( TokenTypes . LITERAL _ NATIVE ) ) ; <nl> } <nl> <nl> / * * <nl> - * Determines if an AST is a formal param of type Object ( or subclass ) . <nl> - * @ param firstChild the AST to check <nl> - * @ return true iff firstChild is a parameter of an Object type . <nl> + * Determines if an AST is a formal param of type Object . <nl> + * @ param paramNode the AST to check <nl> + * @ return true if firstChild is a parameter of an Object type . <nl> * / <nl> - private static boolean isObjectParam ( AST firstChild ) { <nl> - final AST modifiers = firstChild . getFirstChild ( ) ; <nl> - final AST type = modifiers . getNextSibling ( ) ; <nl> - switch ( type . getFirstChild ( ) . getType ( ) ) { <nl> - case TokenTypes . LITERAL _ BOOLEAN : <nl> - case TokenTypes . LITERAL _ BYTE : <nl> - case TokenTypes . LITERAL _ CHAR : <nl> - case TokenTypes . LITERAL _ DOUBLE : <nl> - case TokenTypes . LITERAL _ FLOAT : <nl> - case TokenTypes . LITERAL _ INT : <nl> - case TokenTypes . LITERAL _ LONG : <nl> - case TokenTypes . LITERAL _ SHORT : <nl> - return false ; <nl> - default : <nl> - return true ; <nl> - } <nl> + private static boolean isObjectParam ( DetailAST paramNode ) { <nl> + final DetailAST typeNode = paramNode . findFirstToken ( TokenTypes . TYPE ) ; <nl> + final FullIdent fullIdent = FullIdent . createFullIdentBelow ( typeNode ) ; <nl> + final String name = fullIdent . getText ( ) ; <nl> + return " Object " . equals ( name ) | | " java . lang . Object " . equals ( name ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java <nl> index 67bff82 . . cd67f6d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java <nl> @ @ - 45 , 9 + 45 , 7 @ @ public class EqualsHashCodeCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( EqualsHashCodeCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 57 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , <nl> " 94 : 13 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , <nl> - " 122 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> } <nl> @ @ - 71 , 6 + 69 , 23 @ @ public class EqualsHashCodeCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testEqualsParameter ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( EqualsHashCodeCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 10 : 9 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) , <nl> + " 18 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , <nl> + " 48 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , <nl> + " 53 : 9 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) , <nl> + " 65 : 9 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) , <nl> + " 68 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , <nl> + " 75 : 9 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) , <nl> + " 82 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputEqualsParameter . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testTokensNotNull ( ) { <nl> final EqualsHashCodeCheck check = new EqualsHashCodeCheck ( ) ; <nl> Assert . assertNotNull ( check . getAcceptableTokens ( ) ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCode . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCode . java <nl> index 25b9b0e . . 5edfd76 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCode . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCode . java <nl> @ @ - 17 , 6 + 17 , 10 @ @ public class InputEqualsHashCode { <nl> return false ; <nl> } <nl> <nl> + private boolean equals ( String s ) { <nl> + return false ; <nl> + } <nl> + <nl> protected int notHashCode ( ) { <nl> return 1 ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsParameter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsParameter . java <nl> new file mode 100644 <nl> index 0000000 . . b348a35 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsParameter . java <nl> @ @ - 0 , 0 + 1 , 96 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputEqualsParameter { <nl> + public static class TestClass1 { / / no violation <nl> + public boolean equals ( String o ) { <nl> + return true ; <nl> + } <nl> + } <nl> + public static class TestClass2 { / / violation , no correct ` equals ` <nl> + public int hashCode ( ) { <nl> + return 1 ; <nl> + } <nl> + public boolean equals ( String o ) { <nl> + return true ; <nl> + } <nl> + } <nl> + public static class TestClass3 { / / violation , no ` hashCode ` <nl> + public boolean equals ( Object o ) { <nl> + return true ; <nl> + } <nl> + public boolean equals ( String o ) { <nl> + return false ; <nl> + } <nl> + } <nl> + public static class TestClass4 { / / no violation <nl> + public int hashCode ( ) { <nl> + return 1 ; <nl> + } <nl> + public boolean equals ( Object o ) { <nl> + return true ; <nl> + } <nl> + public boolean equals ( String o ) { <nl> + return false ; <nl> + } <nl> + } <nl> + public static class TestClass5 { / / no violation <nl> + public int hashCode ( ) { <nl> + return 1 ; <nl> + } <nl> + public boolean equals ( java . lang . Object o ) { <nl> + return true ; <nl> + } <nl> + } <nl> + public static class TestClass6 { / / violation , no ` hashCode ` implementation <nl> + public static int hashCode ( int i ) { <nl> + return 1 ; <nl> + } <nl> + public boolean equals ( Object o ) { <nl> + return true ; <nl> + } <nl> + } <nl> + public static class TestClass7 { / / violation , no ` equals ` implementation <nl> + public int hashCode ( ) { <nl> + return 1 ; <nl> + } <nl> + public static boolean equals ( Object o , Object o2 ) { <nl> + return true ; <nl> + } <nl> + } <nl> + public static class TestClass8 { / / no violation <nl> + public native int hashCode ( ) ; <nl> + public native boolean equals ( Object o ) ; <nl> + } <nl> + public static class TestClass9 { / / violation , no ` equals ` implementation <nl> + public native int hashCode ( ) ; <nl> + } <nl> + public static class TestClass10 { / / violation , no ` hashCode ` implementation <nl> + public native boolean equals ( Object o ) ; <nl> + } <nl> + public static abstract class TestClass11 { / / no violation <nl> + public abstract int hashCode ( ) ; <nl> + public abstract boolean equals ( Object o ) ; <nl> + } <nl> + public static abstract class TestClass12 { / / violation , no ` equals ` implementation <nl> + public int hashCode ( ) { <nl> + return 1 ; <nl> + } <nl> + public abstract boolean equals ( Object o ) ; <nl> + } <nl> + public static abstract class TestClass13 { / / violation , no ` hashCode ` implementation <nl> + public abstract int hashCode ( ) ; <nl> + public boolean equals ( java . lang . Object o ) { <nl> + return true ; <nl> + } <nl> + } <nl> + public interface TestClass14 { / / no violation <nl> + public int hashCode ( ) ; <nl> + public boolean equals ( Object o ) ; <nl> + } <nl> + public interface TestClass15 { / / no violation <nl> + public boolean equals ( Object o ) ; <nl> + } <nl> + public interface TestClass16 { / / no violation <nl> + public int hashCode ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java <nl> index 2cd27f3 . . b292d21 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java <nl> @ @ - 54 , 7 + 54 , 7 @ @ class InputSemantic <nl> <nl> public class EqualsVsHashCode2 <nl> { <nl> - public boolean equals ( String a ) / / flag <nl> + public boolean equals ( String a ) / / don ' t flag <nl> { <nl> return true ; <nl> } <nl> @ @ - 119 , 7 + 119 , 7 @ @ class InputSemantic <nl> <nl> public class EqualsVsHashCode6 <nl> { <nl> - public < A > boolean equals ( Comparable < A > a ) / / flag , weven with generics <nl> + public < A > boolean equals ( Comparable < A > a ) / / don ' t flag <nl> { <nl> return true ; <nl> } <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index f95984a . . 44e8f46 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 642 , 8 + 642 , 12 @ @ String nullString = null ; <nl> < section name = " EqualsHashCode " > <nl> < subsection name = " Description " > <nl> < p > <nl> - Checks that classes that override < code > equals ( ) < / code > <nl> - also override < code > hashCode ( ) < / code > . <nl> + Checks that classes that either override < code > equals ( ) < / code > <nl> + or < code > hashCode ( ) < / code > also overrides the other . <nl> + This checks only verifies that the method declarations match <nl> + < code > Object . equals ( Object ) } < / code > and < code > Object . hashCode ( ) < / code > exactly to be <nl> + considered an override . This check does not verify invalid method names , parameters <nl> + other than < code > Object < / code > , or anything else . <nl> < / p > <nl> <nl> < p >
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 9cb78b7 . . 38ce1f8 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 186 , 6 + 186 , 14 @ @ <nl> < ! - - TEST TARGETS - - > <nl> < ! - - - - > <nl> <nl> + < ! - - Run the GUI - - > <nl> + < target name = " run . gui " depends = " compile . checkstyle " <nl> + description = " Run the GUI for displaying a tree " > <nl> + < java classname = " com . puppycrawl . tools . checkstyle . gui . Main " <nl> + fork = " yes " classpathref = " run . classpath " > <nl> + < / java > <nl> + < / target > <nl> + <nl> < ! - - display a specified file in a UI frame - - > <nl> < target name = " run . treeviewer " depends = " compile . checkstyle " <nl> description = " Display a specified file in GUI tree " > <nl> @ @ - 252 , 7 + 260 , 7 @ @ <nl> < checkstyle properties = " docs / checkstyle . rules " > <nl> < fileset dir = " src / checkstyle " <nl> includes = " * * / * . java " <nl> - excludes = " * * / Generated * . java , * * / Java * . java " / > <nl> + excludes = " * * / Generated * . java , * * / Java * . java , * * / gui / * " / > <nl> < formatter type = " plain " / > <nl> < formatter type = " xml " toFile = " target / cs _ errors . xml " / > <nl> < classpath refid = " run . classpath " / >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 index 50b082e . . 4497bc0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 @ @ - 25 , 11 + 25 , 17 @ @ import java . util . Map ; 
 import antlr . collections . AST ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; 
 
 / * * 
 * < p > 
 - * Checks that classes that override equals ( ) also override hashCode ( ) . 
 + * Checks that classes that either override { @ code equals ( ) } or { @ code hashCode ( ) } also 
 + * overrides the other . 
 + * This checks only verifies that the method declarations match { @ link Object # equals ( Object ) } and 
 + * { @ link Object # hashCode ( ) } exactly to be considered an override . This check does not verify 
 + * invalid method names , parameters other than { @ code Object } , or anything else . 
 * < / p > 
 * < p > 
 * Rationale : The contract of equals ( ) and hashCode ( ) requires that 
 @ @ - 91 , 48 + 97 , 62 @ @ public class EqualsHashCodeCheck 
 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 + if ( isEqualsMethod ( ast ) ) { 
 + objBlockWithEquals . put ( ast . getParent ( ) , ast ) ; 
 + } 
 + else if ( isHashCodeMethod ( ast ) ) { 
 + objBlockWithHashCode . put ( ast . getParent ( ) , ast ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Determines if an AST is a valid Equals method implementation . 
 + * 
 + * @ param ast the AST to check 
 + * @ return true if the { code ast } is a Equals method . 
 + * / 
 + private static boolean isEqualsMethod ( DetailAST ast ) { 
 final DetailAST modifiers = ast . getFirstChild ( ) ; 
 - final AST type = ast . findFirstToken ( TokenTypes . TYPE ) ; 
 - final AST methodName = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 final DetailAST parameters = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 
 - if ( type . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ BOOLEAN 
 - & & " equals " . equals ( methodName . getText ( ) ) 
 + return CheckUtils . isEqualsMethod ( ast ) 
 & & modifiers . branchContains ( TokenTypes . LITERAL _ PUBLIC ) 
 - & & parameters . getChildCount ( ) = = 1 
 & & isObjectParam ( parameters . getFirstChild ( ) ) 
 - ) { 
 - objBlockWithEquals . put ( ast . getParent ( ) , ast ) ; 
 - } 
 - else if ( type . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ INT 
 + & & ( ast . branchContains ( TokenTypes . SLIST ) 
 + | | modifiers . branchContains ( TokenTypes . LITERAL _ NATIVE ) ) ; 
 + } 
 + 
 + / * * 
 + * Determines if an AST is a valid HashCode method implementation . 
 + * 
 + * @ param ast the AST to check 
 + * @ return true if the { code ast } is a HashCode method . 
 + * / 
 + private static boolean isHashCodeMethod ( DetailAST ast ) { 
 + final DetailAST modifiers = ast . getFirstChild ( ) ; 
 + final AST type = ast . findFirstToken ( TokenTypes . TYPE ) ; 
 + final AST methodName = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 + final DetailAST parameters = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 + 
 + return type . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ INT 
 & & " hashCode " . equals ( methodName . getText ( ) ) 
 & & modifiers . branchContains ( TokenTypes . LITERAL _ PUBLIC ) 
 - & & parameters . getFirstChild ( ) = = null ) { 
 - objBlockWithHashCode . put ( ast . getParent ( ) , ast ) ; 
 - } 
 + & & ! modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) 
 + & & parameters . getFirstChild ( ) = = null 
 + & & ( ast . branchContains ( TokenTypes . SLIST ) 
 + | | modifiers . branchContains ( TokenTypes . LITERAL _ NATIVE ) ) ; 
 } 
 
 / * * 
 - * Determines if an AST is a formal param of type Object ( or subclass ) . 
 - * @ param firstChild the AST to check 
 - * @ return true iff firstChild is a parameter of an Object type . 
 + * Determines if an AST is a formal param of type Object . 
 + * @ param paramNode the AST to check 
 + * @ return true if firstChild is a parameter of an Object type . 
 * / 
 - private static boolean isObjectParam ( AST firstChild ) { 
 - final AST modifiers = firstChild . getFirstChild ( ) ; 
 - final AST type = modifiers . getNextSibling ( ) ; 
 - switch ( type . getFirstChild ( ) . getType ( ) ) { 
 - case TokenTypes . LITERAL _ BOOLEAN : 
 - case TokenTypes . LITERAL _ BYTE : 
 - case TokenTypes . LITERAL _ CHAR : 
 - case TokenTypes . LITERAL _ DOUBLE : 
 - case TokenTypes . LITERAL _ FLOAT : 
 - case TokenTypes . LITERAL _ INT : 
 - case TokenTypes . LITERAL _ LONG : 
 - case TokenTypes . LITERAL _ SHORT : 
 - return false ; 
 - default : 
 - return true ; 
 - } 
 + private static boolean isObjectParam ( DetailAST paramNode ) { 
 + final DetailAST typeNode = paramNode . findFirstToken ( TokenTypes . TYPE ) ; 
 + final FullIdent fullIdent = FullIdent . createFullIdentBelow ( typeNode ) ; 
 + final String name = fullIdent . getText ( ) ; 
 + return " Object " . equals ( name ) | | " java . lang . Object " . equals ( name ) ; 
 } 
 
 @ Override 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java 
 index 67bff82 . . cd67f6d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java 
 @ @ - 45 , 9 + 45 , 7 @ @ public class EqualsHashCodeCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( EqualsHashCodeCheck . class ) ; 
 final String [ ] expected = { 
 - " 57 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , 
 " 94 : 13 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , 
 - " 122 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 } 
 @ @ - 71 , 6 + 69 , 23 @ @ public class EqualsHashCodeCheckTest 
 } 
 
 @ Test 
 + public void testEqualsParameter ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( EqualsHashCodeCheck . class ) ; 
 + final String [ ] expected = { 
 + " 10 : 9 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) , 
 + " 18 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , 
 + " 48 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , 
 + " 53 : 9 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) , 
 + " 65 : 9 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) , 
 + " 68 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , 
 + " 75 : 9 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) , 
 + " 82 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputEqualsParameter . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testTokensNotNull ( ) { 
 final EqualsHashCodeCheck check = new EqualsHashCodeCheck ( ) ; 
 Assert . assertNotNull ( check . getAcceptableTokens ( ) ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCode . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCode . java 
 index 25b9b0e . . 5edfd76 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCode . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCode . java 
 @ @ - 17 , 6 + 17 , 10 @ @ public class InputEqualsHashCode { 
 return false ; 
 } 
 
 + private boolean equals ( String s ) { 
 + return false ; 
 + } 
 + 
 protected int notHashCode ( ) { 
 return 1 ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsParameter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsParameter . java 
 new file mode 100644 
 index 0000000 . . b348a35 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsParameter . java 
 @ @ - 0 , 0 + 1 , 96 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputEqualsParameter { 
 + public static class TestClass1 { / / no violation 
 + public boolean equals ( String o ) { 
 + return true ; 
 + } 
 + } 
 + public static class TestClass2 { / / violation , no correct ` equals ` 
 + public int hashCode ( ) { 
 + return 1 ; 
 + } 
 + public boolean equals ( String o ) { 
 + return true ; 
 + } 
 + } 
 + public static class TestClass3 { / / violation , no ` hashCode ` 
 + public boolean equals ( Object o ) { 
 + return true ; 
 + } 
 + public boolean equals ( String o ) { 
 + return false ; 
 + } 
 + } 
 + public static class TestClass4 { / / no violation 
 + public int hashCode ( ) { 
 + return 1 ; 
 + } 
 + public boolean equals ( Object o ) { 
 + return true ; 
 + } 
 + public boolean equals ( String o ) { 
 + return false ; 
 + } 
 + } 
 + public static class TestClass5 { / / no violation 
 + public int hashCode ( ) { 
 + return 1 ; 
 + } 
 + public boolean equals ( java . lang . Object o ) { 
 + return true ; 
 + } 
 + } 
 + public static class TestClass6 { / / violation , no ` hashCode ` implementation 
 + public static int hashCode ( int i ) { 
 + return 1 ; 
 + } 
 + public boolean equals ( Object o ) { 
 + return true ; 
 + } 
 + } 
 + public static class TestClass7 { / / violation , no ` equals ` implementation 
 + public int hashCode ( ) { 
 + return 1 ; 
 + } 
 + public static boolean equals ( Object o , Object o2 ) { 
 + return true ; 
 + } 
 + } 
 + public static class TestClass8 { / / no violation 
 + public native int hashCode ( ) ; 
 + public native boolean equals ( Object o ) ; 
 + } 
 + public static class TestClass9 { / / violation , no ` equals ` implementation 
 + public native int hashCode ( ) ; 
 + } 
 + public static class TestClass10 { / / violation , no ` hashCode ` implementation 
 + public native boolean equals ( Object o ) ; 
 + } 
 + public static abstract class TestClass11 { / / no violation 
 + public abstract int hashCode ( ) ; 
 + public abstract boolean equals ( Object o ) ; 
 + } 
 + public static abstract class TestClass12 { / / violation , no ` equals ` implementation 
 + public int hashCode ( ) { 
 + return 1 ; 
 + } 
 + public abstract boolean equals ( Object o ) ; 
 + } 
 + public static abstract class TestClass13 { / / violation , no ` hashCode ` implementation 
 + public abstract int hashCode ( ) ; 
 + public boolean equals ( java . lang . Object o ) { 
 + return true ; 
 + } 
 + } 
 + public interface TestClass14 { / / no violation 
 + public int hashCode ( ) ; 
 + public boolean equals ( Object o ) ; 
 + } 
 + public interface TestClass15 { / / no violation 
 + public boolean equals ( Object o ) ; 
 + } 
 + public interface TestClass16 { / / no violation 
 + public int hashCode ( ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java 
 index 2cd27f3 . . b292d21 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java 
 @ @ - 54 , 7 + 54 , 7 @ @ class InputSemantic 
 
 public class EqualsVsHashCode2 
 { 
 - public boolean equals ( String a ) / / flag 
 + public boolean equals ( String a ) / / don ' t flag 
 { 
 return true ; 
 } 
 @ @ - 119 , 7 + 119 , 7 @ @ class InputSemantic 
 
 public class EqualsVsHashCode6 
 { 
 - public < A > boolean equals ( Comparable < A > a ) / / flag , weven with generics 
 + public < A > boolean equals ( Comparable < A > a ) / / don ' t flag 
 { 
 return true ; 
 } 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index f95984a . . 44e8f46 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 642 , 8 + 642 , 12 @ @ String nullString = null ; 
 < section name = " EqualsHashCode " > 
 < subsection name = " Description " > 
 < p > 
 - Checks that classes that override < code > equals ( ) < / code > 
 - also override < code > hashCode ( ) < / code > . 
 + Checks that classes that either override < code > equals ( ) < / code > 
 + or < code > hashCode ( ) < / code > also overrides the other . 
 + This checks only verifies that the method declarations match 
 + < code > Object . equals ( Object ) } < / code > and < code > Object . hashCode ( ) < / code > exactly to be 
 + considered an override . This check does not verify invalid method names , parameters 
 + other than < code > Object < / code > , or anything else . 
 < / p > 
 
 < p >

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index 9cb78b7 . . 38ce1f8 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 186 , 6 + 186 , 14 @ @ 
 < ! - - TEST TARGETS - - > 
 < ! - - - - > 
 
 + < ! - - Run the GUI - - > 
 + < target name = " run . gui " depends = " compile . checkstyle " 
 + description = " Run the GUI for displaying a tree " > 
 + < java classname = " com . puppycrawl . tools . checkstyle . gui . Main " 
 + fork = " yes " classpathref = " run . classpath " > 
 + < / java > 
 + < / target > 
 + 
 < ! - - display a specified file in a UI frame - - > 
 < target name = " run . treeviewer " depends = " compile . checkstyle " 
 description = " Display a specified file in GUI tree " > 
 @ @ - 252 , 7 + 260 , 7 @ @ 
 < checkstyle properties = " docs / checkstyle . rules " > 
 < fileset dir = " src / checkstyle " 
 includes = " * * / * . java " 
 - excludes = " * * / Generated * . java , * * / Java * . java " / > 
 + excludes = " * * / Generated * . java , * * / Java * . java , * * / gui / * " / > 
 < formatter type = " plain " / > 
 < formatter type = " xml " toFile = " target / cs _ errors . xml " / > 
 < classpath refid = " run . classpath " / >
