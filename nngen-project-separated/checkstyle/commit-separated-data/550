BLEU SCORE: 0.07495553473355841

TEST MSG: Issue # 5058 : handle empty for loop conditions in NoWhitespaceBefore
GENERATED MSG: Check for policy of space at an empty for interator .

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / NoWhitespaceBeforeTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / NoWhitespaceBeforeTest . java <nl> new file mode 100644 <nl> index 0000000 . . a23a5a9 <nl> - - - / dev / null <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / NoWhitespaceBeforeTest . java <nl> @ @ - 0 , 0 + 1 , 52 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . google . checkstyle . test . chapter4formatting . rule462horizontalwhitespace ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . google . checkstyle . test . base . AbstractModuleTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . checks . whitespace . NoWhitespaceBeforeCheck ; <nl> + <nl> + public class NoWhitespaceBeforeTest extends AbstractModuleTestSupport { <nl> + <nl> + @ Override <nl> + protected String getPackageLocation ( ) { <nl> + return " com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace " ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testEmptyForLoop ( ) throws Exception { <nl> + <nl> + final Class < NoWhitespaceBeforeCheck > clazz = NoWhitespaceBeforeCheck . class ; <nl> + final String messageKeyPreceded = " ws . preceded " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 12 : 23 : " + getCheckMessage ( clazz , messageKeyPreceded , " ; " ) , <nl> + " 18 : 31 : " + getCheckMessage ( clazz , messageKeyPreceded , " ; " ) , <nl> + } ; <nl> + final Configuration checkConfig = getModuleConfig ( " NoWhitespaceBefore " ) ; <nl> + final String filePath = getPath ( " InputNoWhitespaceBeforeEmptyForLoop . java " ) ; <nl> + <nl> + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + } <nl> + <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputNoWhitespaceBeforeEmptyForLoop . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputNoWhitespaceBeforeEmptyForLoop . java <nl> new file mode 100644 <nl> index 0000000 . . c6d72ef <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputNoWhitespaceBeforeEmptyForLoop . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + package com . google . checkstyle . test . chapter4formatting . rule462horizontalwhitespace ; <nl> + <nl> + public class InputNoWhitespaceBeforeEmptyForLoop { <nl> + <nl> + public static void f ( ) { <nl> + for ( ; ; ) { / / ok <nl> + break ; <nl> + } <nl> + for ( int x = 0 ; ; ) { / / ok <nl> + break ; <nl> + } <nl> + for ( int x = 0 ; ; ) { / / warning <nl> + break ; <nl> + } <nl> + for ( int x = 0 ; x < 10 ; ) { / / ok <nl> + break ; <nl> + } <nl> + for ( int x = 0 ; x < 10 ; ) { / / warning <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java <nl> index 64386b2 . . 960b2a6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java <nl> @ @ - 30 , 7 + 30 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * More specifically , it checks that it is not preceded with whitespace , <nl> * or ( if line breaks are allowed ) all characters on the line before are <nl> * whitespace . To allow line breaks before a token , set property <nl> - * allowLineBreaks to true . <nl> + * allowLineBreaks to true . No check occurs before semi - colons in empty <nl> + * for loop initializers or conditions . <nl> * < / p > <nl> * < p > By default the check will check the following operators : <nl> * { @ link TokenTypes # COMMA COMMA } , <nl> @ @ - 109 , 7 + 110 , 7 @ @ public class NoWhitespaceBeforeCheck <nl> final int before = ast . getColumnNo ( ) - 1 ; <nl> <nl> if ( ( before = = - 1 | | Character . isWhitespace ( line . charAt ( before ) ) ) <nl> - & & ! isInEmptyForInitializer ( ast ) ) { <nl> + & & ! isInEmptyForInitializerOrCondition ( ast ) ) { <nl> <nl> boolean flag = ! allowLineBreaks ; <nl> / / verify all characters before ' . ' are whitespace <nl> @ @ - 126 , 16 + 127 , 17 @ @ public class NoWhitespaceBeforeCheck <nl> } <nl> <nl> / * * <nl> - * Checks that semicolon is in empty for initializer . <nl> + * Checks that semicolon is in empty for initializer or condition . <nl> * @ param semicolonAst DetailAST of semicolon . <nl> - * @ return true if semicolon is in empty for initializer . <nl> + * @ return true if semicolon is in empty for initializer or condition . <nl> * / <nl> - private static boolean isInEmptyForInitializer ( DetailAST semicolonAst ) { <nl> + private static boolean isInEmptyForInitializerOrCondition ( DetailAST semicolonAst ) { <nl> boolean result = false ; <nl> if ( semicolonAst . getType ( ) = = TokenTypes . SEMI ) { <nl> final DetailAST sibling = semicolonAst . getPreviousSibling ( ) ; <nl> if ( sibling ! = null <nl> - & & sibling . getType ( ) = = TokenTypes . FOR _ INIT <nl> + & & ( sibling . getType ( ) = = TokenTypes . FOR _ INIT <nl> + | | sibling . getType ( ) = = TokenTypes . FOR _ CONDITION ) <nl> & & sibling . getChildCount ( ) = = 0 ) { <nl> result = true ; <nl> } <nl> diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml <nl> index a983c44 . . 6054bdb 100644 <nl> - - - a / src / main / resources / google _ checks . xml <nl> + + + b / src / main / resources / google _ checks . xml <nl> @ @ - 184 , 6 + 184 , 10 @ @ <nl> < property name = " customImportOrderRules " value = " STATIC # # # THIRD _ PARTY _ PACKAGE " / > <nl> < / module > <nl> < module name = " MethodParamPad " / > <nl> + < module name = " NoWhitespaceBefore " > <nl> + < property name = " tokens " value = " COMMA , SEMI , POST _ INC , POST _ DEC , DOT , ELLIPSIS , METHOD _ REF " / > <nl> + < property name = " allowLineBreaks " value = " true " / > <nl> + < / module > <nl> < module name = " ParenPad " / > <nl> < module name = " OperatorWrap " > <nl> < property name = " option " value = " NL " / > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java <nl> index 39d096f . . 07d80d1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java <nl> @ @ - 114 , 4 + 114 , 15 @ @ public class NoWhitespaceBeforeCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeAtStartOfTheLine . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testEmptyForLoop ( ) throws Exception { <nl> + checkConfig . addAttribute ( " tokens " , " SEMI " ) ; <nl> + checkConfig . addAttribute ( " allowLineBreaks " , " yes " ) ; <nl> + final String [ ] expected = { <nl> + " 12 : 23 : " + getCheckMessage ( MSG _ KEY , " ; " ) , <nl> + " 18 : 31 : " + getCheckMessage ( MSG _ KEY , " ; " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeEmptyForLoop . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> index b4adb4c . . af290f0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> @ @ - 229 , 6 + 229 , 9 @ @ public class AllChecksTest extends AbstractModuleTestSupport { <nl> GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " RightCurly " , Stream . of ( <nl> / / Until https : / / github . com / checkstyle / checkstyle / issues / 4178 <nl> " LAMBDA " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NoWhitespaceBefore " , Stream . of ( <nl> + / / google uses GenericWhitespace for this behavior <nl> + " GENERIC _ START " , " GENERIC _ END " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeEmptyForLoop . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeEmptyForLoop . java <nl> new file mode 100644 <nl> index 0000000 . . ff240c9 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeEmptyForLoop . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespacebefore ; <nl> + <nl> + public class InputNoWhitespaceBeforeEmptyForLoop { <nl> + <nl> + public static void f ( ) { <nl> + for ( ; ; ) { / / OK <nl> + break ; <nl> + } <nl> + for ( int x = 0 ; ; ) { / / OK <nl> + break ; <nl> + } <nl> + for ( int x = 0 ; ; ) { / / VIOLATION <nl> + break ; <nl> + } <nl> + for ( int x = 0 ; x < 10 ; ) { / / OK <nl> + break ; <nl> + } <nl> + for ( int x = 0 ; x < 10 ; ) { / / VIOLATION <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml <nl> index e025bd4 . . 21676a9 100644 <nl> - - - a / src / xdocs / config _ whitespace . xml <nl> + + + b / src / xdocs / config _ whitespace . xml <nl> @ @ - 1109 , 7 + 1109 , 8 @ @ import static java . math . BigInteger . ZERO ; <nl> specifically , it checks that it is not preceded with whitespace , or <nl> ( if linebreaks are allowed ) all characters on the line before are <nl> whitespace . To allow linebreaks before a token , set property < code > allowLineBreaks < / code > to < code > <nl> - true < / code > . <nl> + true < / code > . No check occurs before semi - colons in empty for loop <nl> + initializers or conditions . <nl> < / p > <nl> < / subsection > <nl> <nl> @ @ - 1181 , 6 + 1182 , 10 @ @ import static java . math . BigInteger . ZERO ; <nl> < subsection name = " Example of Usage " > <nl> < ul > <nl> < li > <nl> + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + NoWhitespaceBefore " > <nl> + Google Style < / a > <nl> + < / li > <nl> + < li > <nl> < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Asun _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + NoWhitespaceBefore " > <nl> Sun Style < / a > <nl> < / li > <nl> diff - - git a / src / xdocs / google _ style . xml b / src / xdocs / google _ style . xml <nl> index 2f050d3 . . 9cf5470 100644 <nl> - - - a / src / xdocs / google _ style . xml <nl> + + + b / src / xdocs / google _ style . xml <nl> @ @ - 749 , 6 + 749 , 14 @ @ <nl> alt = " " / > <nl> < a <nl> href = " config _ whitespace . html # ParenPad " > ParenPad < / a > <nl> + <nl> + < br / > <nl> + < br / > <nl> + < img <nl> + src = " images / ok _ green . png " <nl> + alt = " " / > <nl> + < a <nl> + href = " config _ whitespace . html # NoWhitespaceBefore " > NoWhitespaceBefore < / a > <nl> < / td > <nl> < td > <nl> < a <nl> @ @ - 774 , 6 + 782 , 13 @ @ <nl> < br / > <nl> < a <nl> href = " https : / / github . com / checkstyle / checkstyle / blob / master / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / ParenPadTest . java " > test < / a > <nl> + < br / > <nl> + < a <nl> + href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + NoWhitespaceBefore " > config < / a > <nl> + < br / > <nl> + < a <nl> + href = " https : / / github . com / checkstyle / checkstyle / blob / master / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / NoWhitespaceBeforeTest . java " > test < / a > <nl> + <nl> < / td > <nl> < / tr > <nl> < tr >
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index f6b84bd . . c8868fb 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 100 , 7 + 100 , 6 @ @ public final class TreeWalker <nl> { <nl> } <nl> } <nl> - / / TODO : really need to optimise the performance of this class . <nl> <nl> / * * maps from token name to checks * / <nl> private final Map mTokenToChecks = new HashMap ( ) ; <nl> @ @ - 119 , 12 + 118 , 6 @ @ public final class TreeWalker <nl> / * * context of child components * / <nl> private Context mChildContext ; <nl> <nl> - / * * context of visited node * / <nl> - private final Map mTokenContext = new HashMap ( ) ; <nl> - <nl> - / * * context of tree * / <nl> - private final Map mTreeContext = new HashMap ( ) ; <nl> - <nl> / * * <nl> * HACK - a reference to a private " mParent " field in DetailAST . <nl> * Don ' t do this at home ! <nl> @ @ - 385 , 12 + 378 , 9 @ @ public final class TreeWalker <nl> * / <nl> private void notifyBegin ( FileContents aContents ) <nl> { <nl> - / / TODO : do not track Context properly for token <nl> final Iterator it = mAllChecks . iterator ( ) ; <nl> while ( it . hasNext ( ) ) { <nl> final Check check = ( Check ) it . next ( ) ; <nl> - mTreeContext . clear ( ) ; <nl> - check . setTreeContext ( mTreeContext ) ; <nl> check . setFileContents ( aContents ) ; <nl> check . beginTree ( ) ; <nl> } <nl> @ @ - 446 , 10 + 436 , 8 @ @ public final class TreeWalker <nl> ( ArrayList ) mTokenToChecks . get ( <nl> TokenTypes . getTokenName ( aAST . getType ( ) ) ) ; <nl> if ( visitors ! = null ) { <nl> - mTokenContext . clear ( ) ; <nl> for ( int i = 0 ; i < visitors . size ( ) ; i + + ) { <nl> final Check check = ( Check ) visitors . get ( i ) ; <nl> - check . setTokenContext ( mTokenContext ) ; <nl> check . visitToken ( aAST ) ; <nl> } <nl> } <nl> @ @ - 467 , 7 + 455 , 6 @ @ public final class TreeWalker <nl> if ( visitors ! = null ) { <nl> for ( int i = 0 ; i < visitors . size ( ) ; i + + ) { <nl> final Check check = ( Check ) visitors . get ( i ) ; <nl> - / / TODO : need to setup the token context <nl> check . leaveToken ( aAST ) ; <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java <nl> index fe15386 . . 01f7e63 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ <nl> package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import java . util . HashSet ; <nl> - import java . util . Map ; <nl> import java . util . Set ; <nl> <nl> / * * <nl> @ @ - 33 , 24 + 32 , 18 @ @ public abstract class Check extends AutomaticBean <nl> / * * resuable constant for message formating * / <nl> private static final Object [ ] EMPTY _ OBJECT _ ARRAY = new Object [ 0 ] ; <nl> <nl> - / * * name to store file contents under * / <nl> - private static final String FILE _ CONTENTS _ ATTRIBUTE = " fILEcONTENTS " ; <nl> + / * * the current file contents * / <nl> + private FileContents mFileContents = null ; <nl> <nl> - / * * the global context for the check * / <nl> - private Map mGlobalContext ; <nl> / * * the tokens the check is interested in * / <nl> private final Set mTokens = new HashSet ( ) ; <nl> - / * * <nl> - * the object for collecting messages . decided to not put in the global <nl> - * context for performance and ease of use . <nl> - * / <nl> + <nl> + / * * the object for collecting messages . * / <nl> private LocalizedMessages mMessages ; <nl> - / * * the context for the check across an AST * / <nl> - private Map mTreeContext ; <nl> - / * * the context for a check across a token . * / <nl> - private Map mTokenContext ; <nl> + <nl> / * * the tab with for column reporting * / <nl> private int mTabWidth = 8 ; / / meaningful default <nl> + <nl> / * * current class loader * / <nl> private ClassLoader mLoader = <nl> Thread . currentThread ( ) . getContextClassLoader ( ) ; <nl> @ @ - 107 , 26 + 100 , 6 @ @ public abstract class Check extends AutomaticBean <nl> return mTokens ; <nl> } <nl> <nl> - <nl> - / * * <nl> - * Return the global context object for check . This context is valid for <nl> - * the lifetime of the check . <nl> - * @ return the context object <nl> - * / <nl> - public final Map getGlobalContext ( ) <nl> - { <nl> - return mGlobalContext ; <nl> - } <nl> - <nl> - / * * <nl> - * Set the global context for the check . <nl> - * @ param aContext the context <nl> - * / <nl> - public final void setGlobalContext ( Map aContext ) <nl> - { <nl> - mGlobalContext = aContext ; <nl> - } <nl> - <nl> / * * <nl> * Set the global object used to collect messages . <nl> * @ param aMessages the messages to log with <nl> @ @ - 137 , 44 + 110 , 6 @ @ public abstract class Check extends AutomaticBean <nl> } <nl> <nl> / * * <nl> - * Return the tree context object for check . This context is valid for <nl> - * the lifetime of a abstract syntax tree . <nl> - * @ return the context object <nl> - * / <nl> - public final Map getTreeContext ( ) <nl> - { <nl> - return mTreeContext ; <nl> - } <nl> - <nl> - / * * <nl> - * Set the tree context for the check . <nl> - * @ param aContext the context <nl> - * / <nl> - public final void setTreeContext ( Map aContext ) <nl> - { <nl> - mTreeContext = aContext ; <nl> - } <nl> - <nl> - / * * <nl> - * Return the tree context object for check . This context is valid for <nl> - * the lifetime of a abstract syntax tree . <nl> - * @ return the context object <nl> - * / <nl> - public final Map getTokenContext ( ) <nl> - { <nl> - return mTokenContext ; <nl> - } <nl> - <nl> - / * * <nl> - * Set the token context for the check . <nl> - * @ param aContext the global context <nl> - * / <nl> - public final void setTokenContext ( Map aContext ) <nl> - { <nl> - mTokenContext = aContext ; <nl> - } <nl> - <nl> - / * * <nl> * Initialse the check . This is the time to verify that the check has <nl> * everything required to perform it job . <nl> * / <nl> @ @ - 236 , 7 + 171 , 7 @ @ public abstract class Check extends AutomaticBean <nl> * / <nl> public final void setFileContents ( FileContents aContents ) <nl> { <nl> - getTreeContext ( ) . put ( FILE _ CONTENTS _ ATTRIBUTE , aContents ) ; <nl> + mFileContents = aContents ; <nl> } <nl> <nl> / * * <nl> @ @ - 245 , 7 + 180 , 7 @ @ public abstract class Check extends AutomaticBean <nl> * / <nl> public final FileContents getFileContents ( ) <nl> { <nl> - return ( FileContents ) getTreeContext ( ) . get ( FILE _ CONTENTS _ ATTRIBUTE ) ; <nl> + return mFileContents ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractImportCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractImportCheck . java <nl> index 6fc35f2 . . 2a83974 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractImportCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractImportCheck . java <nl> @ @ - 33 , 9 + 33 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> public abstract class AbstractImportCheck <nl> extends Check <nl> { <nl> - / * * key to store name of import as * / <nl> - private static final String TEXT _ KEY = " name " ; <nl> - <nl> / * * <nl> * Return the name of the import associated with a specifed DetailAST . <nl> * <nl> @ @ - 44 , 13 + 41 , 6 @ @ public abstract class AbstractImportCheck <nl> * / <nl> protected FullIdent getImportText ( DetailAST aAST ) <nl> { <nl> - FullIdent text = ( FullIdent ) getTokenContext ( ) . get ( TEXT _ KEY ) ; <nl> - if ( text ! = null ) { <nl> - return text ; <nl> - } <nl> - <nl> - text = FullIdent . createFullIdent ( ( DetailAST ) aAST . getFirstChild ( ) ) ; <nl> - getTokenContext ( ) . put ( TEXT _ KEY , text ) ; <nl> - return text ; <nl> + return FullIdent . createFullIdent ( ( DetailAST ) aAST . getFirstChild ( ) ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / NoWhitespaceBeforeTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / NoWhitespaceBeforeTest . java 
 new file mode 100644 
 index 0000000 . . a23a5a9 
 - - - / dev / null 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / NoWhitespaceBeforeTest . java 
 @ @ - 0 , 0 + 1 , 52 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . google . checkstyle . test . chapter4formatting . rule462horizontalwhitespace ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . google . checkstyle . test . base . AbstractModuleTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . checks . whitespace . NoWhitespaceBeforeCheck ; 
 + 
 + public class NoWhitespaceBeforeTest extends AbstractModuleTestSupport { 
 + 
 + @ Override 
 + protected String getPackageLocation ( ) { 
 + return " com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace " ; 
 + } 
 + 
 + @ Test 
 + public void testEmptyForLoop ( ) throws Exception { 
 + 
 + final Class < NoWhitespaceBeforeCheck > clazz = NoWhitespaceBeforeCheck . class ; 
 + final String messageKeyPreceded = " ws . preceded " ; 
 + 
 + final String [ ] expected = { 
 + " 12 : 23 : " + getCheckMessage ( clazz , messageKeyPreceded , " ; " ) , 
 + " 18 : 31 : " + getCheckMessage ( clazz , messageKeyPreceded , " ; " ) , 
 + } ; 
 + final Configuration checkConfig = getModuleConfig ( " NoWhitespaceBefore " ) ; 
 + final String filePath = getPath ( " InputNoWhitespaceBeforeEmptyForLoop . java " ) ; 
 + 
 + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + } 
 + 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputNoWhitespaceBeforeEmptyForLoop . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputNoWhitespaceBeforeEmptyForLoop . java 
 new file mode 100644 
 index 0000000 . . c6d72ef 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputNoWhitespaceBeforeEmptyForLoop . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + package com . google . checkstyle . test . chapter4formatting . rule462horizontalwhitespace ; 
 + 
 + public class InputNoWhitespaceBeforeEmptyForLoop { 
 + 
 + public static void f ( ) { 
 + for ( ; ; ) { / / ok 
 + break ; 
 + } 
 + for ( int x = 0 ; ; ) { / / ok 
 + break ; 
 + } 
 + for ( int x = 0 ; ; ) { / / warning 
 + break ; 
 + } 
 + for ( int x = 0 ; x < 10 ; ) { / / ok 
 + break ; 
 + } 
 + for ( int x = 0 ; x < 10 ; ) { / / warning 
 + break ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java 
 index 64386b2 . . 960b2a6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java 
 @ @ - 30 , 7 + 30 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * More specifically , it checks that it is not preceded with whitespace , 
 * or ( if line breaks are allowed ) all characters on the line before are 
 * whitespace . To allow line breaks before a token , set property 
 - * allowLineBreaks to true . 
 + * allowLineBreaks to true . No check occurs before semi - colons in empty 
 + * for loop initializers or conditions . 
 * < / p > 
 * < p > By default the check will check the following operators : 
 * { @ link TokenTypes # COMMA COMMA } , 
 @ @ - 109 , 7 + 110 , 7 @ @ public class NoWhitespaceBeforeCheck 
 final int before = ast . getColumnNo ( ) - 1 ; 
 
 if ( ( before = = - 1 | | Character . isWhitespace ( line . charAt ( before ) ) ) 
 - & & ! isInEmptyForInitializer ( ast ) ) { 
 + & & ! isInEmptyForInitializerOrCondition ( ast ) ) { 
 
 boolean flag = ! allowLineBreaks ; 
 / / verify all characters before ' . ' are whitespace 
 @ @ - 126 , 16 + 127 , 17 @ @ public class NoWhitespaceBeforeCheck 
 } 
 
 / * * 
 - * Checks that semicolon is in empty for initializer . 
 + * Checks that semicolon is in empty for initializer or condition . 
 * @ param semicolonAst DetailAST of semicolon . 
 - * @ return true if semicolon is in empty for initializer . 
 + * @ return true if semicolon is in empty for initializer or condition . 
 * / 
 - private static boolean isInEmptyForInitializer ( DetailAST semicolonAst ) { 
 + private static boolean isInEmptyForInitializerOrCondition ( DetailAST semicolonAst ) { 
 boolean result = false ; 
 if ( semicolonAst . getType ( ) = = TokenTypes . SEMI ) { 
 final DetailAST sibling = semicolonAst . getPreviousSibling ( ) ; 
 if ( sibling ! = null 
 - & & sibling . getType ( ) = = TokenTypes . FOR _ INIT 
 + & & ( sibling . getType ( ) = = TokenTypes . FOR _ INIT 
 + | | sibling . getType ( ) = = TokenTypes . FOR _ CONDITION ) 
 & & sibling . getChildCount ( ) = = 0 ) { 
 result = true ; 
 } 
 diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml 
 index a983c44 . . 6054bdb 100644 
 - - - a / src / main / resources / google _ checks . xml 
 + + + b / src / main / resources / google _ checks . xml 
 @ @ - 184 , 6 + 184 , 10 @ @ 
 < property name = " customImportOrderRules " value = " STATIC # # # THIRD _ PARTY _ PACKAGE " / > 
 < / module > 
 < module name = " MethodParamPad " / > 
 + < module name = " NoWhitespaceBefore " > 
 + < property name = " tokens " value = " COMMA , SEMI , POST _ INC , POST _ DEC , DOT , ELLIPSIS , METHOD _ REF " / > 
 + < property name = " allowLineBreaks " value = " true " / > 
 + < / module > 
 < module name = " ParenPad " / > 
 < module name = " OperatorWrap " > 
 < property name = " option " value = " NL " / > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java 
 index 39d096f . . 07d80d1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java 
 @ @ - 114 , 4 + 114 , 15 @ @ public class NoWhitespaceBeforeCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeAtStartOfTheLine . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testEmptyForLoop ( ) throws Exception { 
 + checkConfig . addAttribute ( " tokens " , " SEMI " ) ; 
 + checkConfig . addAttribute ( " allowLineBreaks " , " yes " ) ; 
 + final String [ ] expected = { 
 + " 12 : 23 : " + getCheckMessage ( MSG _ KEY , " ; " ) , 
 + " 18 : 31 : " + getCheckMessage ( MSG _ KEY , " ; " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeEmptyForLoop . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 index b4adb4c . . af290f0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 @ @ - 229 , 6 + 229 , 9 @ @ public class AllChecksTest extends AbstractModuleTestSupport { 
 GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " RightCurly " , Stream . of ( 
 / / Until https : / / github . com / checkstyle / checkstyle / issues / 4178 
 " LAMBDA " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NoWhitespaceBefore " , Stream . of ( 
 + / / google uses GenericWhitespace for this behavior 
 + " GENERIC _ START " , " GENERIC _ END " ) . collect ( Collectors . toSet ( ) ) ) ; 
 } 
 
 @ Override 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeEmptyForLoop . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeEmptyForLoop . java 
 new file mode 100644 
 index 0000000 . . ff240c9 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeEmptyForLoop . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespacebefore ; 
 + 
 + public class InputNoWhitespaceBeforeEmptyForLoop { 
 + 
 + public static void f ( ) { 
 + for ( ; ; ) { / / OK 
 + break ; 
 + } 
 + for ( int x = 0 ; ; ) { / / OK 
 + break ; 
 + } 
 + for ( int x = 0 ; ; ) { / / VIOLATION 
 + break ; 
 + } 
 + for ( int x = 0 ; x < 10 ; ) { / / OK 
 + break ; 
 + } 
 + for ( int x = 0 ; x < 10 ; ) { / / VIOLATION 
 + break ; 
 + } 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml 
 index e025bd4 . . 21676a9 100644 
 - - - a / src / xdocs / config _ whitespace . xml 
 + + + b / src / xdocs / config _ whitespace . xml 
 @ @ - 1109 , 7 + 1109 , 8 @ @ import static java . math . BigInteger . ZERO ; 
 specifically , it checks that it is not preceded with whitespace , or 
 ( if linebreaks are allowed ) all characters on the line before are 
 whitespace . To allow linebreaks before a token , set property < code > allowLineBreaks < / code > to < code > 
 - true < / code > . 
 + true < / code > . No check occurs before semi - colons in empty for loop 
 + initializers or conditions . 
 < / p > 
 < / subsection > 
 
 @ @ - 1181 , 6 + 1182 , 10 @ @ import static java . math . BigInteger . ZERO ; 
 < subsection name = " Example of Usage " > 
 < ul > 
 < li > 
 + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + NoWhitespaceBefore " > 
 + Google Style < / a > 
 + < / li > 
 + < li > 
 < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Asun _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + NoWhitespaceBefore " > 
 Sun Style < / a > 
 < / li > 
 diff - - git a / src / xdocs / google _ style . xml b / src / xdocs / google _ style . xml 
 index 2f050d3 . . 9cf5470 100644 
 - - - a / src / xdocs / google _ style . xml 
 + + + b / src / xdocs / google _ style . xml 
 @ @ - 749 , 6 + 749 , 14 @ @ 
 alt = " " / > 
 < a 
 href = " config _ whitespace . html # ParenPad " > ParenPad < / a > 
 + 
 + < br / > 
 + < br / > 
 + < img 
 + src = " images / ok _ green . png " 
 + alt = " " / > 
 + < a 
 + href = " config _ whitespace . html # NoWhitespaceBefore " > NoWhitespaceBefore < / a > 
 < / td > 
 < td > 
 < a 
 @ @ - 774 , 6 + 782 , 13 @ @ 
 < br / > 
 < a 
 href = " https : / / github . com / checkstyle / checkstyle / blob / master / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / ParenPadTest . java " > test < / a > 
 + < br / > 
 + < a 
 + href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + NoWhitespaceBefore " > config < / a > 
 + < br / > 
 + < a 
 + href = " https : / / github . com / checkstyle / checkstyle / blob / master / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / NoWhitespaceBeforeTest . java " > test < / a > 
 + 
 < / td > 
 < / tr > 
 < tr >

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index f6b84bd . . c8868fb 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 100 , 7 + 100 , 6 @ @ public final class TreeWalker 
 { 
 } 
 } 
 - / / TODO : really need to optimise the performance of this class . 
 
 / * * maps from token name to checks * / 
 private final Map mTokenToChecks = new HashMap ( ) ; 
 @ @ - 119 , 12 + 118 , 6 @ @ public final class TreeWalker 
 / * * context of child components * / 
 private Context mChildContext ; 
 
 - / * * context of visited node * / 
 - private final Map mTokenContext = new HashMap ( ) ; 
 - 
 - / * * context of tree * / 
 - private final Map mTreeContext = new HashMap ( ) ; 
 - 
 / * * 
 * HACK - a reference to a private " mParent " field in DetailAST . 
 * Don ' t do this at home ! 
 @ @ - 385 , 12 + 378 , 9 @ @ public final class TreeWalker 
 * / 
 private void notifyBegin ( FileContents aContents ) 
 { 
 - / / TODO : do not track Context properly for token 
 final Iterator it = mAllChecks . iterator ( ) ; 
 while ( it . hasNext ( ) ) { 
 final Check check = ( Check ) it . next ( ) ; 
 - mTreeContext . clear ( ) ; 
 - check . setTreeContext ( mTreeContext ) ; 
 check . setFileContents ( aContents ) ; 
 check . beginTree ( ) ; 
 } 
 @ @ - 446 , 10 + 436 , 8 @ @ public final class TreeWalker 
 ( ArrayList ) mTokenToChecks . get ( 
 TokenTypes . getTokenName ( aAST . getType ( ) ) ) ; 
 if ( visitors ! = null ) { 
 - mTokenContext . clear ( ) ; 
 for ( int i = 0 ; i < visitors . size ( ) ; i + + ) { 
 final Check check = ( Check ) visitors . get ( i ) ; 
 - check . setTokenContext ( mTokenContext ) ; 
 check . visitToken ( aAST ) ; 
 } 
 } 
 @ @ - 467 , 7 + 455 , 6 @ @ public final class TreeWalker 
 if ( visitors ! = null ) { 
 for ( int i = 0 ; i < visitors . size ( ) ; i + + ) { 
 final Check check = ( Check ) visitors . get ( i ) ; 
 - / / TODO : need to setup the token context 
 check . leaveToken ( aAST ) ; 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java 
 index fe15386 . . 01f7e63 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java 
 @ @ - 19 , 7 + 19 , 6 @ @ 
 package com . puppycrawl . tools . checkstyle . api ; 
 
 import java . util . HashSet ; 
 - import java . util . Map ; 
 import java . util . Set ; 
 
 / * * 
 @ @ - 33 , 24 + 32 , 18 @ @ public abstract class Check extends AutomaticBean 
 / * * resuable constant for message formating * / 
 private static final Object [ ] EMPTY _ OBJECT _ ARRAY = new Object [ 0 ] ; 
 
 - / * * name to store file contents under * / 
 - private static final String FILE _ CONTENTS _ ATTRIBUTE = " fILEcONTENTS " ; 
 + / * * the current file contents * / 
 + private FileContents mFileContents = null ; 
 
 - / * * the global context for the check * / 
 - private Map mGlobalContext ; 
 / * * the tokens the check is interested in * / 
 private final Set mTokens = new HashSet ( ) ; 
 - / * * 
 - * the object for collecting messages . decided to not put in the global 
 - * context for performance and ease of use . 
 - * / 
 + 
 + / * * the object for collecting messages . * / 
 private LocalizedMessages mMessages ; 
 - / * * the context for the check across an AST * / 
 - private Map mTreeContext ; 
 - / * * the context for a check across a token . * / 
 - private Map mTokenContext ; 
 + 
 / * * the tab with for column reporting * / 
 private int mTabWidth = 8 ; / / meaningful default 
 + 
 / * * current class loader * / 
 private ClassLoader mLoader = 
 Thread . currentThread ( ) . getContextClassLoader ( ) ; 
 @ @ - 107 , 26 + 100 , 6 @ @ public abstract class Check extends AutomaticBean 
 return mTokens ; 
 } 
 
 - 
 - / * * 
 - * Return the global context object for check . This context is valid for 
 - * the lifetime of the check . 
 - * @ return the context object 
 - * / 
 - public final Map getGlobalContext ( ) 
 - { 
 - return mGlobalContext ; 
 - } 
 - 
 - / * * 
 - * Set the global context for the check . 
 - * @ param aContext the context 
 - * / 
 - public final void setGlobalContext ( Map aContext ) 
 - { 
 - mGlobalContext = aContext ; 
 - } 
 - 
 / * * 
 * Set the global object used to collect messages . 
 * @ param aMessages the messages to log with 
 @ @ - 137 , 44 + 110 , 6 @ @ public abstract class Check extends AutomaticBean 
 } 
 
 / * * 
 - * Return the tree context object for check . This context is valid for 
 - * the lifetime of a abstract syntax tree . 
 - * @ return the context object 
 - * / 
 - public final Map getTreeContext ( ) 
 - { 
 - return mTreeContext ; 
 - } 
 - 
 - / * * 
 - * Set the tree context for the check . 
 - * @ param aContext the context 
 - * / 
 - public final void setTreeContext ( Map aContext ) 
 - { 
 - mTreeContext = aContext ; 
 - } 
 - 
 - / * * 
 - * Return the tree context object for check . This context is valid for 
 - * the lifetime of a abstract syntax tree . 
 - * @ return the context object 
 - * / 
 - public final Map getTokenContext ( ) 
 - { 
 - return mTokenContext ; 
 - } 
 - 
 - / * * 
 - * Set the token context for the check . 
 - * @ param aContext the global context 
 - * / 
 - public final void setTokenContext ( Map aContext ) 
 - { 
 - mTokenContext = aContext ; 
 - } 
 - 
 - / * * 
 * Initialse the check . This is the time to verify that the check has 
 * everything required to perform it job . 
 * / 
 @ @ - 236 , 7 + 171 , 7 @ @ public abstract class Check extends AutomaticBean 
 * / 
 public final void setFileContents ( FileContents aContents ) 
 { 
 - getTreeContext ( ) . put ( FILE _ CONTENTS _ ATTRIBUTE , aContents ) ; 
 + mFileContents = aContents ; 
 } 
 
 / * * 
 @ @ - 245 , 7 + 180 , 7 @ @ public abstract class Check extends AutomaticBean 
 * / 
 public final FileContents getFileContents ( ) 
 { 
 - return ( FileContents ) getTreeContext ( ) . get ( FILE _ CONTENTS _ ATTRIBUTE ) ; 
 + return mFileContents ; 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractImportCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractImportCheck . java 
 index 6fc35f2 . . 2a83974 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractImportCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractImportCheck . java 
 @ @ - 33 , 9 + 33 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 public abstract class AbstractImportCheck 
 extends Check 
 { 
 - / * * key to store name of import as * / 
 - private static final String TEXT _ KEY = " name " ; 
 - 
 / * * 
 * Return the name of the import associated with a specifed DetailAST . 
 * 
 @ @ - 44 , 13 + 41 , 6 @ @ public abstract class AbstractImportCheck 
 * / 
 protected FullIdent getImportText ( DetailAST aAST ) 
 { 
 - FullIdent text = ( FullIdent ) getTokenContext ( ) . get ( TEXT _ KEY ) ; 
 - if ( text ! = null ) { 
 - return text ; 
 - } 
 - 
 - text = FullIdent . createFullIdent ( ( DetailAST ) aAST . getFirstChild ( ) ) ; 
 - getTokenContext ( ) . put ( TEXT _ KEY , text ) ; 
 - return text ; 
 + return FullIdent . createFullIdent ( ( DetailAST ) aAST . getFirstChild ( ) ) ; 
 } 
 }
