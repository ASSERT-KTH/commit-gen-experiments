BLEU SCORE: 0.020980574531482755

TEST MSG: Issue # 6586 : aligned javadoc / xdoc for DeclarationOrder
GENERATED MSG: Updated docs of DeclarationOrderCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> index 4005c7e . . b190118 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> @ @ - 32 , 80 + 32 , 92 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; <nl> <nl> / * * <nl> - * Checks that the parts of a class or interface declaration <nl> - * appear in the order suggested by the <nl> - * < a href = <nl> - * " https : / / www . oracle . com / technetwork / java / javase / documentation / codeconventions - 141855 . html # 1852 " > <nl> - * Code Conventions for the Java Programming Language < / a > . <nl> - * <nl> - * <nl> + * < p > <nl> + * Checks the order in which parts of the class or interface declaration are defined . <nl> + * < / p > <nl> + * < p > <nl> + * According to <nl> + * < a href = " https : / / www . oracle . com / technetwork / java / javase / documentation / codeconventions - 141855 . html # 1852 " > <nl> + * Code Conventions for the Java Programming Language < / a > , the parts of a class <nl> + * or interface declaration should appear in the following order : <nl> + * < / p > <nl> * < ol > <nl> - * < li > Class ( static ) variables . First the public class variables , then <nl> - * the protected , then package level ( no access modifier ) , and then <nl> - * the private . < / li > <nl> + * < li > <nl> + * Class ( static ) variables . First the public class variables , then <nl> + * protected , then package level ( no access modifier ) , and then private . <nl> + * < / li > <nl> * < li > Instance variables . First the public class variables , then <nl> - * the protected , then package level ( no access modifier ) , and then <nl> - * the private . < / li > <nl> + * protected , then package level ( no access modifier ) , and then private . <nl> + * < / li > <nl> * < li > Constructors < / li > <nl> * < li > Methods < / li > <nl> * < / ol > <nl> - * <nl> + * < p > <nl> + * Purpose of < b > ignore * < / b > option is to ignore related violations , <nl> + * however it still impacts on other class members . <nl> + * < / p > <nl> * < p > ATTENTION : the check skips class fields which have <nl> - * < a href = " https : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 8 . html # jls - 8 . 3 . 3 " > <nl> + * < a href = " https : / / docs . oracle . com / javase / specs / jls / se11 / html / jls - 8 . html # jls - 8 . 3 . 3 " > <nl> * forward references < / a > from validation due to the fact that we have Checkstyle ' s limitations <nl> - * to clearly detect user intention of fields location and grouping . For example , <nl> - * < pre > { @ code <nl> - * public class A { <nl> - * private double x = 1 . 0 ; <nl> - * private double y = 2 . 0 ; <nl> - * public double slope = x / y ; / / will be skipped from validation due to forward reference <nl> - * } <nl> - * } < / pre > <nl> - * <nl> - * < p > Available options : <nl> + * to clearly detect user intention of fields location and grouping . For example : <nl> + * < / p > <nl> + * < pre > <nl> + * public class A { <nl> + * private double x = 1 . 0 ; <nl> + * private double y = 2 . 0 ; <nl> + * public double slope = x / y ; / / will be skipped from validation due to forward reference <nl> + * } <nl> + * < / pre > <nl> * < ul > <nl> - * < li > ignoreModifiers < / li > <nl> - * < li > ignoreConstructors < / li > <nl> + * < li > <nl> + * Property { @ code ignoreConstructors } - control whether to ignore constructors . <nl> + * Default value is { @ code false } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code ignoreModifiers } - control whether to ignore modifiers ( fields , . . . ) . <nl> + * Default value is { @ code false } . <nl> + * < / li > <nl> * < / ul > <nl> - * <nl> - * < p > Purpose of < b > ignore * < / b > option is to ignore related violations , <nl> - * however it still impacts on other class members . <nl> - * <nl> - * < p > For example : <nl> - * < pre > { @ code <nl> - * class K { <nl> - * int a ; <nl> - * void m ( ) { } <nl> - * K ( ) { } & lt ; - - " Constructor definition in wrong order " <nl> - * int b ; & lt ; - - " Instance variable definition in wrong order " <nl> - * } <nl> - * } < / pre > <nl> - * <nl> - * < p > With < b > ignoreConstructors < / b > option : <nl> - * < pre > { @ code <nl> - * class K { <nl> - * int a ; <nl> - * void m ( ) { } <nl> - * K ( ) { } <nl> - * int b ; & lt ; - - " Instance variable definition in wrong order " <nl> - * } <nl> - * } < / pre > <nl> - * <nl> - * < p > With < b > ignoreConstructors < / b > option and without a method definition in a source class : <nl> - * < pre > { @ code <nl> - * class K { <nl> - * int a ; <nl> - * K ( ) { } <nl> - * int b ; & lt ; - - " Instance variable definition in wrong order " <nl> - * } <nl> - * } < / pre > <nl> - * <nl> - * < p > An example of how to configure the check is : <nl> - * <nl> + * < p > <nl> + * To configure the check : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; DeclarationOrder & quot ; / & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * With default options : <nl> + * < / p > <nl> + * < pre > <nl> + * class K { <nl> + * int a ; <nl> + * void m ( ) { } <nl> + * K ( ) { } & lt ; - - & quot ; Constructor definition in wrong order & quot ; <nl> + * int b ; & lt ; - - & quot ; Instance variable definition in wrong order & quot ; <nl> + * } <nl> + * < / pre > <nl> + * < p > <nl> + * With < b > ignoreConstructors < / b > option : <nl> + * < / p > <nl> + * < pre > <nl> + * class K { <nl> + * int a ; <nl> + * void m ( ) { } <nl> + * K ( ) { } <nl> + * int b ; & lt ; - - & quot ; Instance variable definition in wrong order & quot ; <nl> + * } <nl> + * < / pre > <nl> + * < p > <nl> + * With < b > ignoreConstructors < / b > option and without a method definition in a source class : <nl> + * < / p > <nl> * < pre > <nl> - * & lt ; module name = " DeclarationOrder " / & gt ; <nl> + * class K { <nl> + * int a ; <nl> + * K ( ) { } <nl> + * int b ; & lt ; - - & quot ; Instance variable definition in wrong order & quot ; <nl> + * } <nl> * < / pre > <nl> * <nl> + * @ since 3 . 2 <nl> * / <nl> @ FileStatefulCheck <nl> public class DeclarationOrderCheck extends AbstractCheck { <nl> @ @ - 155 , 9 + 167 , 9 @ @ public class DeclarationOrderCheck extends AbstractCheck { <nl> / * * Set of all class field names . * / <nl> private Set < String > classFieldNames ; <nl> <nl> - / * * If true , ignores the check to constructors . * / <nl> + / * * Control whether to ignore constructors . * / <nl> private boolean ignoreConstructors ; <nl> - / * * If true , ignore the check to modifiers ( fields , . . . ) . * / <nl> + / * * Control whether to ignore modifiers ( fields , . . . ) . * / <nl> private boolean ignoreModifiers ; <nl> <nl> @ Override <nl> @ @ - 362 , 7 + 374 , 7 @ @ public class DeclarationOrderCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Sets whether to ignore constructors . <nl> + * Setter to control whether to ignore constructors . <nl> * @ param ignoreConstructors whether to ignore constructors . <nl> * / <nl> public void setIgnoreConstructors ( boolean ignoreConstructors ) { <nl> @ @ - 370 , 7 + 382 , 7 @ @ public class DeclarationOrderCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Sets whether to ignore modifiers . <nl> + * Setter to control whether to ignore modifiers ( fields , . . . ) . <nl> * @ param ignoreModifiers whether to ignore modifiers . <nl> * / <nl> public void setIgnoreModifiers ( boolean ignoreModifiers ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 3865437 . . efeb12c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 83 , 6 + 83 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " ConstantName " , <nl> " CovariantEquals " , <nl> " CustomImportOrder " , <nl> + " DeclarationOrder " , <nl> " EmptyBlock " , <nl> " EmptyCatchBlock " , <nl> " EqualsAvoidNull " , <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 6e2a2b3 . . 99b64af 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 359 , 8 + 359 , 11 @ @ class Test { <nl> < / section > <nl> <nl> < section name = " DeclarationOrder " > <nl> + < p > Since Checkstyle 3 . 2 < / p > <nl> < subsection name = " Description " id = " DeclarationOrder _ Description " > <nl> - < p > Since Checkstyle 3 . 2 < / p > <nl> + < p > <nl> + Checks the order in which parts of the class or interface declaration are defined . <nl> + < / p > <nl> < p > <nl> According to < a <nl> href = " https : / / www . oracle . com / technetwork / java / javase / documentation / codeconventions - 141855 . html # 1852 " > <nl> @ @ - 391 , 18 + 394 , 18 @ @ class Test { <nl> <nl> < p > <nl> ATTENTION : the check skips class fields which have <nl> - < a href = " https : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 8 . html # jls - 8 . 3 . 3 " > <nl> + < a href = " https : / / docs . oracle . com / javase / specs / jls / se11 / html / jls - 8 . html # jls - 8 . 3 . 3 " > <nl> forward references < / a > <nl> from validation due to the fact that we have Checkstyle ' s limitations to clearly <nl> - detect user intention of fields location and grouping . For example , <nl> - < source > <nl> + detect user intention of fields location and grouping . For example : <nl> + < / p > <nl> + < source > <nl> public class A { <nl> private double x = 1 . 0 ; <nl> private double y = 2 . 0 ; <nl> public double slope = x / y ; / / will be skipped from validation due to forward reference <nl> } <nl> - < / source > <nl> - < / p > <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " id = " DeclarationOrder _ Properties " > <nl> @ @ - 416 , 14 + 419 , 14 @ @ public class A { <nl> < / tr > <nl> < tr > <nl> < td > ignoreConstructors < / td > <nl> - < td > whether to ignore constructors < / td > <nl> + < td > control whether to ignore constructors . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > < code > false < / code > < / td > <nl> < td > 5 . 2 < / td > <nl> < / tr > <nl> < tr > <nl> < td > ignoreModifiers < / td > <nl> - < td > whether to ignore modifiers < / td > <nl> + < td > control whether to ignore modifiers ( fields , . . . ) . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > < code > false < / code > < / td > <nl> < td > 5 . 2 < / td > <nl> @ @ - 440 , 7 + 443 , 8 @ @ public class A { <nl> < / source > <nl> <nl> < p > <nl> - For example : <nl> + With default options : <nl> + < / p > <nl> < source > <nl> class K { <nl> int a ; <nl> @ @ - 449 , 9 + 453 , 9 @ @ class K { <nl> int b ; & lt ; - - " Instance variable definition in wrong order " <nl> } <nl> < / source > <nl> - < / p > <nl> < p > <nl> - With < b > ignoreConstructors < / b > option : <nl> + With < b > ignoreConstructors < / b > option : <nl> + < / p > <nl> < source > <nl> class K { <nl> int a ; <nl> @ @ - 460 , 9 + 464 , 9 @ @ class K { <nl> int b ; & lt ; - - " Instance variable definition in wrong order " <nl> } <nl> < / source > <nl> - < / p > <nl> < p > <nl> - With < b > ignoreConstructors < / b > option and without a method definition in a source class : <nl> + With < b > ignoreConstructors < / b > option and without a method definition in a source class : <nl> + < / p > <nl> < source > <nl> class K { <nl> int a ; <nl> @ @ - 470 , 7 + 474 , 6 @ @ class K { <nl> int b ; & lt ; - - " Instance variable definition in wrong order " <nl> } <nl> < / source > <nl> - < / p > <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " id = " DeclarationOrder _ Example _ of _ Usage " >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / Main . java <nl> index 5d2cc92 . . 6e960de 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / Main . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . awt . EventQueue ; <nl> import java . io . File ; <nl> <nl> import javax . swing . JFrame ; <nl> + import javax . swing . WindowConstants ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> <nl> @ @ - 47 , 7 + 48 , 7 @ @ public class Main { <nl> final File file = new File ( args [ 0 ] ) ; <nl> panel . openFile ( file , frame ) ; <nl> } <nl> - frame . setDefaultCloseOperation ( JFrame . EXIT _ ON _ CLOSE ) ; <nl> + frame . setDefaultCloseOperation ( WindowConstants . EXIT _ ON _ CLOSE ) ; <nl> <nl> final Runnable runner = new FrameShower ( frame ) ; <nl> EventQueue . invokeLater ( runner ) ; <nl> @ @ - 63 , 7 + 64 , 7 @ @ public class Main { <nl> frame . getContentPane ( ) . add ( panel ) ; <nl> panel . openAst ( ast , frame ) ; <nl> frame . setSize ( 1500 , 800 ) ; <nl> - frame . setDefaultCloseOperation ( JFrame . EXIT _ ON _ CLOSE ) ; <nl> + frame . setDefaultCloseOperation ( WindowConstants . EXIT _ ON _ CLOSE ) ; <nl> frame . setVisible ( true ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 index 4005c7e . . b190118 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 @ @ - 32 , 80 + 32 , 92 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; 
 
 / * * 
 - * Checks that the parts of a class or interface declaration 
 - * appear in the order suggested by the 
 - * < a href = 
 - * " https : / / www . oracle . com / technetwork / java / javase / documentation / codeconventions - 141855 . html # 1852 " > 
 - * Code Conventions for the Java Programming Language < / a > . 
 - * 
 - * 
 + * < p > 
 + * Checks the order in which parts of the class or interface declaration are defined . 
 + * < / p > 
 + * < p > 
 + * According to 
 + * < a href = " https : / / www . oracle . com / technetwork / java / javase / documentation / codeconventions - 141855 . html # 1852 " > 
 + * Code Conventions for the Java Programming Language < / a > , the parts of a class 
 + * or interface declaration should appear in the following order : 
 + * < / p > 
 * < ol > 
 - * < li > Class ( static ) variables . First the public class variables , then 
 - * the protected , then package level ( no access modifier ) , and then 
 - * the private . < / li > 
 + * < li > 
 + * Class ( static ) variables . First the public class variables , then 
 + * protected , then package level ( no access modifier ) , and then private . 
 + * < / li > 
 * < li > Instance variables . First the public class variables , then 
 - * the protected , then package level ( no access modifier ) , and then 
 - * the private . < / li > 
 + * protected , then package level ( no access modifier ) , and then private . 
 + * < / li > 
 * < li > Constructors < / li > 
 * < li > Methods < / li > 
 * < / ol > 
 - * 
 + * < p > 
 + * Purpose of < b > ignore * < / b > option is to ignore related violations , 
 + * however it still impacts on other class members . 
 + * < / p > 
 * < p > ATTENTION : the check skips class fields which have 
 - * < a href = " https : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 8 . html # jls - 8 . 3 . 3 " > 
 + * < a href = " https : / / docs . oracle . com / javase / specs / jls / se11 / html / jls - 8 . html # jls - 8 . 3 . 3 " > 
 * forward references < / a > from validation due to the fact that we have Checkstyle ' s limitations 
 - * to clearly detect user intention of fields location and grouping . For example , 
 - * < pre > { @ code 
 - * public class A { 
 - * private double x = 1 . 0 ; 
 - * private double y = 2 . 0 ; 
 - * public double slope = x / y ; / / will be skipped from validation due to forward reference 
 - * } 
 - * } < / pre > 
 - * 
 - * < p > Available options : 
 + * to clearly detect user intention of fields location and grouping . For example : 
 + * < / p > 
 + * < pre > 
 + * public class A { 
 + * private double x = 1 . 0 ; 
 + * private double y = 2 . 0 ; 
 + * public double slope = x / y ; / / will be skipped from validation due to forward reference 
 + * } 
 + * < / pre > 
 * < ul > 
 - * < li > ignoreModifiers < / li > 
 - * < li > ignoreConstructors < / li > 
 + * < li > 
 + * Property { @ code ignoreConstructors } - control whether to ignore constructors . 
 + * Default value is { @ code false } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code ignoreModifiers } - control whether to ignore modifiers ( fields , . . . ) . 
 + * Default value is { @ code false } . 
 + * < / li > 
 * < / ul > 
 - * 
 - * < p > Purpose of < b > ignore * < / b > option is to ignore related violations , 
 - * however it still impacts on other class members . 
 - * 
 - * < p > For example : 
 - * < pre > { @ code 
 - * class K { 
 - * int a ; 
 - * void m ( ) { } 
 - * K ( ) { } & lt ; - - " Constructor definition in wrong order " 
 - * int b ; & lt ; - - " Instance variable definition in wrong order " 
 - * } 
 - * } < / pre > 
 - * 
 - * < p > With < b > ignoreConstructors < / b > option : 
 - * < pre > { @ code 
 - * class K { 
 - * int a ; 
 - * void m ( ) { } 
 - * K ( ) { } 
 - * int b ; & lt ; - - " Instance variable definition in wrong order " 
 - * } 
 - * } < / pre > 
 - * 
 - * < p > With < b > ignoreConstructors < / b > option and without a method definition in a source class : 
 - * < pre > { @ code 
 - * class K { 
 - * int a ; 
 - * K ( ) { } 
 - * int b ; & lt ; - - " Instance variable definition in wrong order " 
 - * } 
 - * } < / pre > 
 - * 
 - * < p > An example of how to configure the check is : 
 - * 
 + * < p > 
 + * To configure the check : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; DeclarationOrder & quot ; / & gt ; 
 + * < / pre > 
 + * < p > 
 + * With default options : 
 + * < / p > 
 + * < pre > 
 + * class K { 
 + * int a ; 
 + * void m ( ) { } 
 + * K ( ) { } & lt ; - - & quot ; Constructor definition in wrong order & quot ; 
 + * int b ; & lt ; - - & quot ; Instance variable definition in wrong order & quot ; 
 + * } 
 + * < / pre > 
 + * < p > 
 + * With < b > ignoreConstructors < / b > option : 
 + * < / p > 
 + * < pre > 
 + * class K { 
 + * int a ; 
 + * void m ( ) { } 
 + * K ( ) { } 
 + * int b ; & lt ; - - & quot ; Instance variable definition in wrong order & quot ; 
 + * } 
 + * < / pre > 
 + * < p > 
 + * With < b > ignoreConstructors < / b > option and without a method definition in a source class : 
 + * < / p > 
 * < pre > 
 - * & lt ; module name = " DeclarationOrder " / & gt ; 
 + * class K { 
 + * int a ; 
 + * K ( ) { } 
 + * int b ; & lt ; - - & quot ; Instance variable definition in wrong order & quot ; 
 + * } 
 * < / pre > 
 * 
 + * @ since 3 . 2 
 * / 
 @ FileStatefulCheck 
 public class DeclarationOrderCheck extends AbstractCheck { 
 @ @ - 155 , 9 + 167 , 9 @ @ public class DeclarationOrderCheck extends AbstractCheck { 
 / * * Set of all class field names . * / 
 private Set < String > classFieldNames ; 
 
 - / * * If true , ignores the check to constructors . * / 
 + / * * Control whether to ignore constructors . * / 
 private boolean ignoreConstructors ; 
 - / * * If true , ignore the check to modifiers ( fields , . . . ) . * / 
 + / * * Control whether to ignore modifiers ( fields , . . . ) . * / 
 private boolean ignoreModifiers ; 
 
 @ Override 
 @ @ - 362 , 7 + 374 , 7 @ @ public class DeclarationOrderCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Sets whether to ignore constructors . 
 + * Setter to control whether to ignore constructors . 
 * @ param ignoreConstructors whether to ignore constructors . 
 * / 
 public void setIgnoreConstructors ( boolean ignoreConstructors ) { 
 @ @ - 370 , 7 + 382 , 7 @ @ public class DeclarationOrderCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Sets whether to ignore modifiers . 
 + * Setter to control whether to ignore modifiers ( fields , . . . ) . 
 * @ param ignoreModifiers whether to ignore modifiers . 
 * / 
 public void setIgnoreModifiers ( boolean ignoreModifiers ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 3865437 . . efeb12c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 83 , 6 + 83 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " ConstantName " , 
 " CovariantEquals " , 
 " CustomImportOrder " , 
 + " DeclarationOrder " , 
 " EmptyBlock " , 
 " EmptyCatchBlock " , 
 " EqualsAvoidNull " , 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 6e2a2b3 . . 99b64af 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 359 , 8 + 359 , 11 @ @ class Test { 
 < / section > 
 
 < section name = " DeclarationOrder " > 
 + < p > Since Checkstyle 3 . 2 < / p > 
 < subsection name = " Description " id = " DeclarationOrder _ Description " > 
 - < p > Since Checkstyle 3 . 2 < / p > 
 + < p > 
 + Checks the order in which parts of the class or interface declaration are defined . 
 + < / p > 
 < p > 
 According to < a 
 href = " https : / / www . oracle . com / technetwork / java / javase / documentation / codeconventions - 141855 . html # 1852 " > 
 @ @ - 391 , 18 + 394 , 18 @ @ class Test { 
 
 < p > 
 ATTENTION : the check skips class fields which have 
 - < a href = " https : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 8 . html # jls - 8 . 3 . 3 " > 
 + < a href = " https : / / docs . oracle . com / javase / specs / jls / se11 / html / jls - 8 . html # jls - 8 . 3 . 3 " > 
 forward references < / a > 
 from validation due to the fact that we have Checkstyle ' s limitations to clearly 
 - detect user intention of fields location and grouping . For example , 
 - < source > 
 + detect user intention of fields location and grouping . For example : 
 + < / p > 
 + < source > 
 public class A { 
 private double x = 1 . 0 ; 
 private double y = 2 . 0 ; 
 public double slope = x / y ; / / will be skipped from validation due to forward reference 
 } 
 - < / source > 
 - < / p > 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Properties " id = " DeclarationOrder _ Properties " > 
 @ @ - 416 , 14 + 419 , 14 @ @ public class A { 
 < / tr > 
 < tr > 
 < td > ignoreConstructors < / td > 
 - < td > whether to ignore constructors < / td > 
 + < td > control whether to ignore constructors . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > < code > false < / code > < / td > 
 < td > 5 . 2 < / td > 
 < / tr > 
 < tr > 
 < td > ignoreModifiers < / td > 
 - < td > whether to ignore modifiers < / td > 
 + < td > control whether to ignore modifiers ( fields , . . . ) . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > < code > false < / code > < / td > 
 < td > 5 . 2 < / td > 
 @ @ - 440 , 7 + 443 , 8 @ @ public class A { 
 < / source > 
 
 < p > 
 - For example : 
 + With default options : 
 + < / p > 
 < source > 
 class K { 
 int a ; 
 @ @ - 449 , 9 + 453 , 9 @ @ class K { 
 int b ; & lt ; - - " Instance variable definition in wrong order " 
 } 
 < / source > 
 - < / p > 
 < p > 
 - With < b > ignoreConstructors < / b > option : 
 + With < b > ignoreConstructors < / b > option : 
 + < / p > 
 < source > 
 class K { 
 int a ; 
 @ @ - 460 , 9 + 464 , 9 @ @ class K { 
 int b ; & lt ; - - " Instance variable definition in wrong order " 
 } 
 < / source > 
 - < / p > 
 < p > 
 - With < b > ignoreConstructors < / b > option and without a method definition in a source class : 
 + With < b > ignoreConstructors < / b > option and without a method definition in a source class : 
 + < / p > 
 < source > 
 class K { 
 int a ; 
 @ @ - 470 , 7 + 474 , 6 @ @ class K { 
 int b ; & lt ; - - " Instance variable definition in wrong order " 
 } 
 < / source > 
 - < / p > 
 < / subsection > 
 
 < subsection name = " Example of Usage " id = " DeclarationOrder _ Example _ of _ Usage " >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / Main . java 
 index 5d2cc92 . . 6e960de 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / Main . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . awt . EventQueue ; 
 import java . io . File ; 
 
 import javax . swing . JFrame ; 
 + import javax . swing . WindowConstants ; 
 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 
 @ @ - 47 , 7 + 48 , 7 @ @ public class Main { 
 final File file = new File ( args [ 0 ] ) ; 
 panel . openFile ( file , frame ) ; 
 } 
 - frame . setDefaultCloseOperation ( JFrame . EXIT _ ON _ CLOSE ) ; 
 + frame . setDefaultCloseOperation ( WindowConstants . EXIT _ ON _ CLOSE ) ; 
 
 final Runnable runner = new FrameShower ( frame ) ; 
 EventQueue . invokeLater ( runner ) ; 
 @ @ - 63 , 7 + 64 , 7 @ @ public class Main { 
 frame . getContentPane ( ) . add ( panel ) ; 
 panel . openAst ( ast , frame ) ; 
 frame . setSize ( 1500 , 800 ) ; 
 - frame . setDefaultCloseOperation ( JFrame . EXIT _ ON _ CLOSE ) ; 
 + frame . setDefaultCloseOperation ( WindowConstants . EXIT _ ON _ CLOSE ) ; 
 frame . setVisible ( true ) ; 
 } 

