BLEU SCORE: 0.037477767366779206

TEST MSG: Issue # 3000 : added test to find unused check messages
GENERATED MSG: Implemented UniqueProperties check

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> index ea7eed5 . . a4840ae 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> @ @ - 21 , 10 + 21 , 16 @ @ package com . puppycrawl . tools . checkstyle . internal ; <nl> <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . Modifier ; <nl> + import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . HashSet ; <nl> + import java . util . List ; <nl> import java . util . Locale ; <nl> + import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> + import java . util . Properties ; <nl> import java . util . Set ; <nl> + import java . util . TreeMap ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 191 , 7 + 197 , 10 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> <nl> @ Test <nl> public void testAllCheckstyleMessages ( ) throws Exception { <nl> - for ( Class < ? > module : CheckUtil . getCheckstyleChecks ( ) ) { <nl> + final Map < String , List < String > > usedMessages = new TreeMap < > ( ) ; <nl> + <nl> + / / test validity of messages from checks <nl> + for ( Class < ? > module : CheckUtil . getCheckstyleModules ( ) ) { <nl> for ( Field message : CheckUtil . getCheckMessages ( module ) ) { <nl> Assert . assertEquals ( module . getSimpleName ( ) + " . " + message . getName ( ) <nl> + " should be ' public static final ' " , Modifier . PUBLIC | Modifier . STATIC <nl> @ @ - 202 , 34 + 211 , 66 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> message . setAccessible ( true ) ; <nl> } <nl> <nl> - for ( Locale locale : ALL _ LOCALES ) { <nl> - final String messageString = message . get ( null ) . toString ( ) ; <nl> - String result = null ; <nl> + verifyCheckstyleMessage ( usedMessages , module , message ) ; <nl> + } <nl> + } <nl> <nl> - try { <nl> - result = CheckUtil . getCheckMessage ( module , locale , messageString ) ; <nl> - } <nl> - catch ( IllegalArgumentException ex ) { <nl> - Assert . fail ( module . getSimpleName ( ) + " with the message ' " + messageString <nl> - + " ' in locale ' " + locale . getLanguage ( ) + " ' failed with : " <nl> - + ex . getClass ( ) . getSimpleName ( ) + " - " + ex . getMessage ( ) ) ; <nl> - } <nl> + / / test properties for messages not used by checks <nl> + for ( Entry < String , List < String > > entry : usedMessages . entrySet ( ) ) { <nl> + final Properties pr = new Properties ( ) ; <nl> + pr . load ( AllChecksTest . class . getResourceAsStream ( <nl> + " / " + entry . getKey ( ) . replace ( ' . ' , ' / ' ) + " / messages . properties " ) ) ; <nl> <nl> - Assert . assertNotNull ( <nl> - module . getSimpleName ( ) + " should have text for the message ' " <nl> - + messageString + " ' in locale " + locale . getLanguage ( ) + " ' " , <nl> - result ) ; <nl> - Assert . assertFalse ( <nl> - module . getSimpleName ( ) + " should have non - empty text for the message ' " <nl> - + messageString + " ' in locale ' " + locale . getLanguage ( ) + " ' " , <nl> - result . trim ( ) . isEmpty ( ) ) ; <nl> - Assert . assertFalse ( <nl> - module . getSimpleName ( ) + " should have non - TODO text for the message ' " <nl> - + messageString + " ' in locale " + locale . getLanguage ( ) + " ' " , <nl> - ! " todo . match " . equals ( messageString ) <nl> - & & result . trim ( ) . startsWith ( " TODO " ) ) ; <nl> + for ( Object key : pr . keySet ( ) ) { <nl> + / / hidden exception messages <nl> + if ( " translation . wrongLanguageCode " . equals ( key ) ) { <nl> + continue ; <nl> } <nl> + <nl> + Assert . assertTrue ( " property ' " + key + " ' isn ' t used by any check in package ' " <nl> + + entry . getKey ( ) + " ' " , entry . getValue ( ) . contains ( key . toString ( ) ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static void verifyCheckstyleMessage ( Map < String , List < String > > usedMessages , <nl> + Class < ? > module , Field message ) throws Exception { <nl> + final String messageString = message . get ( null ) . toString ( ) ; <nl> + final String packageName = module . getPackage ( ) . getName ( ) ; <nl> + List < String > packageMessages = usedMessages . get ( packageName ) ; <nl> + <nl> + if ( packageMessages = = null ) { <nl> + packageMessages = new ArrayList < > ( ) ; <nl> + usedMessages . put ( packageName , packageMessages ) ; <nl> + } <nl> + <nl> + packageMessages . add ( messageString ) ; <nl> + <nl> + for ( Locale locale : ALL _ LOCALES ) { <nl> + String result = null ; <nl> + <nl> + try { <nl> + result = CheckUtil . getCheckMessage ( module , locale , messageString ) ; <nl> } <nl> + catch ( IllegalArgumentException ex ) { <nl> + Assert . fail ( module . getSimpleName ( ) + " with the message ' " + messageString <nl> + + " ' in locale ' " + locale . getLanguage ( ) + " ' failed with : " <nl> + + ex . getClass ( ) . getSimpleName ( ) + " - " + ex . getMessage ( ) ) ; <nl> + } <nl> + <nl> + Assert . assertNotNull ( <nl> + module . getSimpleName ( ) + " should have text for the message ' " <nl> + + messageString + " ' in locale " + locale . getLanguage ( ) + " ' " , <nl> + result ) ; <nl> + Assert . assertFalse ( <nl> + module . getSimpleName ( ) + " should have non - empty text for the message ' " <nl> + + messageString + " ' in locale ' " + locale . getLanguage ( ) + " ' " , <nl> + result . trim ( ) . isEmpty ( ) ) ; <nl> + Assert . assertFalse ( <nl> + module . getSimpleName ( ) + " should have non - TODO text for the message ' " <nl> + + messageString + " ' in locale " + locale . getLanguage ( ) + " ' " , <nl> + ! " todo . match " . equals ( messageString ) <nl> + & & result . trim ( ) . startsWith ( " TODO " ) ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index ae832bc . . 1dead6f 100755 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 49 , 12 + 49 , 6 @ @ <nl> Thanks to Travis Schneeberger for patch # 1921815 ( bug # 1649038 ) . <nl> < / li > <nl> < / ul > <nl> - < p > Notes : < / p > <nl> - < ul > <nl> - < li > <nl> - . . . <nl> - < / li > <nl> - < / ul > <nl> < / section > <nl> <nl> < section name = " Release 5 . 4 " >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 index ea7eed5 . . a4840ae 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 @ @ - 21 , 10 + 21 , 16 @ @ package com . puppycrawl . tools . checkstyle . internal ; 
 
 import java . lang . reflect . Field ; 
 import java . lang . reflect . Modifier ; 
 + import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . HashSet ; 
 + import java . util . List ; 
 import java . util . Locale ; 
 + import java . util . Map ; 
 + import java . util . Map . Entry ; 
 + import java . util . Properties ; 
 import java . util . Set ; 
 + import java . util . TreeMap ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 191 , 7 + 197 , 10 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 
 @ Test 
 public void testAllCheckstyleMessages ( ) throws Exception { 
 - for ( Class < ? > module : CheckUtil . getCheckstyleChecks ( ) ) { 
 + final Map < String , List < String > > usedMessages = new TreeMap < > ( ) ; 
 + 
 + / / test validity of messages from checks 
 + for ( Class < ? > module : CheckUtil . getCheckstyleModules ( ) ) { 
 for ( Field message : CheckUtil . getCheckMessages ( module ) ) { 
 Assert . assertEquals ( module . getSimpleName ( ) + " . " + message . getName ( ) 
 + " should be ' public static final ' " , Modifier . PUBLIC | Modifier . STATIC 
 @ @ - 202 , 34 + 211 , 66 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 message . setAccessible ( true ) ; 
 } 
 
 - for ( Locale locale : ALL _ LOCALES ) { 
 - final String messageString = message . get ( null ) . toString ( ) ; 
 - String result = null ; 
 + verifyCheckstyleMessage ( usedMessages , module , message ) ; 
 + } 
 + } 
 
 - try { 
 - result = CheckUtil . getCheckMessage ( module , locale , messageString ) ; 
 - } 
 - catch ( IllegalArgumentException ex ) { 
 - Assert . fail ( module . getSimpleName ( ) + " with the message ' " + messageString 
 - + " ' in locale ' " + locale . getLanguage ( ) + " ' failed with : " 
 - + ex . getClass ( ) . getSimpleName ( ) + " - " + ex . getMessage ( ) ) ; 
 - } 
 + / / test properties for messages not used by checks 
 + for ( Entry < String , List < String > > entry : usedMessages . entrySet ( ) ) { 
 + final Properties pr = new Properties ( ) ; 
 + pr . load ( AllChecksTest . class . getResourceAsStream ( 
 + " / " + entry . getKey ( ) . replace ( ' . ' , ' / ' ) + " / messages . properties " ) ) ; 
 
 - Assert . assertNotNull ( 
 - module . getSimpleName ( ) + " should have text for the message ' " 
 - + messageString + " ' in locale " + locale . getLanguage ( ) + " ' " , 
 - result ) ; 
 - Assert . assertFalse ( 
 - module . getSimpleName ( ) + " should have non - empty text for the message ' " 
 - + messageString + " ' in locale ' " + locale . getLanguage ( ) + " ' " , 
 - result . trim ( ) . isEmpty ( ) ) ; 
 - Assert . assertFalse ( 
 - module . getSimpleName ( ) + " should have non - TODO text for the message ' " 
 - + messageString + " ' in locale " + locale . getLanguage ( ) + " ' " , 
 - ! " todo . match " . equals ( messageString ) 
 - & & result . trim ( ) . startsWith ( " TODO " ) ) ; 
 + for ( Object key : pr . keySet ( ) ) { 
 + / / hidden exception messages 
 + if ( " translation . wrongLanguageCode " . equals ( key ) ) { 
 + continue ; 
 } 
 + 
 + Assert . assertTrue ( " property ' " + key + " ' isn ' t used by any check in package ' " 
 + + entry . getKey ( ) + " ' " , entry . getValue ( ) . contains ( key . toString ( ) ) ) ; 
 + } 
 + } 
 + } 
 + 
 + private static void verifyCheckstyleMessage ( Map < String , List < String > > usedMessages , 
 + Class < ? > module , Field message ) throws Exception { 
 + final String messageString = message . get ( null ) . toString ( ) ; 
 + final String packageName = module . getPackage ( ) . getName ( ) ; 
 + List < String > packageMessages = usedMessages . get ( packageName ) ; 
 + 
 + if ( packageMessages = = null ) { 
 + packageMessages = new ArrayList < > ( ) ; 
 + usedMessages . put ( packageName , packageMessages ) ; 
 + } 
 + 
 + packageMessages . add ( messageString ) ; 
 + 
 + for ( Locale locale : ALL _ LOCALES ) { 
 + String result = null ; 
 + 
 + try { 
 + result = CheckUtil . getCheckMessage ( module , locale , messageString ) ; 
 } 
 + catch ( IllegalArgumentException ex ) { 
 + Assert . fail ( module . getSimpleName ( ) + " with the message ' " + messageString 
 + + " ' in locale ' " + locale . getLanguage ( ) + " ' failed with : " 
 + + ex . getClass ( ) . getSimpleName ( ) + " - " + ex . getMessage ( ) ) ; 
 + } 
 + 
 + Assert . assertNotNull ( 
 + module . getSimpleName ( ) + " should have text for the message ' " 
 + + messageString + " ' in locale " + locale . getLanguage ( ) + " ' " , 
 + result ) ; 
 + Assert . assertFalse ( 
 + module . getSimpleName ( ) + " should have non - empty text for the message ' " 
 + + messageString + " ' in locale ' " + locale . getLanguage ( ) + " ' " , 
 + result . trim ( ) . isEmpty ( ) ) ; 
 + Assert . assertFalse ( 
 + module . getSimpleName ( ) + " should have non - TODO text for the message ' " 
 + + messageString + " ' in locale " + locale . getLanguage ( ) + " ' " , 
 + ! " todo . match " . equals ( messageString ) 
 + & & result . trim ( ) . startsWith ( " TODO " ) ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index ae832bc . . 1dead6f 100755 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 49 , 12 + 49 , 6 @ @ 
 Thanks to Travis Schneeberger for patch # 1921815 ( bug # 1649038 ) . 
 < / li > 
 < / ul > 
 - < p > Notes : < / p > 
 - < ul > 
 - < li > 
 - . . . 
 - < / li > 
 - < / ul > 
 < / section > 
 
 < section name = " Release 5 . 4 " >
