BLEU SCORE: 0.041961149062965476

TEST MSG: Issue # 6586 : aligned javadoc / xdoc for NoFinalizer
GENERATED MSG: changed for release 1 . 2

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java <nl> index e99af77 . . 995093e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java <nl> @ @ - 25 , 9 + 25 , 28 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> - * Checks that no method having zero parameters is defined <nl> - * using the name < em > finalize < / em > . <nl> + * < p > <nl> + * Verifies there are no { @ code finalize ( ) } methods defined in a class . <nl> + * < / p > <nl> + * < p > <nl> + * See <nl> + * < a href = " https : / / docs . oracle . com / en / java / javase / 11 / docs / api / java . base / java / lang / Object . html # finalize ( ) " > <nl> + * Object . finalize ( ) < / a > <nl> + * < / p > <nl> + * < p > <nl> + * Rationale : Finalizers are unpredictable , often dangerous , and generally unnecessary . <nl> + * Their use can cause erratic behavior , poor performance , and portability problems . <nl> + * For more information for the finalize method and its issues , see Effective Java : <nl> + * Programming Language Guide Third Edition by Joshua Bloch , & # 167 ; 8 . <nl> + * < / p > <nl> + * < p > <nl> + * To configure the check : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; NoFinalizer & quot ; / & gt ; <nl> + * < / pre > <nl> * <nl> + * @ since 5 . 0 <nl> * / <nl> @ StatelessCheck <nl> public class NoFinalizerCheck extends AbstractCheck { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 3bb9563 . . 76a1adb 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 124 , 6 + 124 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " NestedIfDepth " , <nl> " NestedTryDepth " , <nl> " NoClone " , <nl> + " NoFinalizer " , <nl> " OneStatementPerLine " , <nl> " OverloadMethodsDeclarationOrder " , <nl> " PackageAnnotation " , <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 1164b83 . . 7d1f9c9 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 3497 , 12 + 3497 , 22 @ @ System . out . println ( s2 instanceof Square ) ; / / true <nl> < / section > <nl> <nl> < section name = " NoFinalizer " > <nl> + < p > Since Checkstyle 5 . 0 < / p > <nl> < subsection name = " Description " id = " NoFinalizer _ Description " > <nl> - < p > Since Checkstyle 5 . 0 < / p > <nl> < p > <nl> Verifies there are no < code > finalize ( ) < / code > methods <nl> defined in a class . <nl> < / p > <nl> + < p > <nl> + See < a href = " https : / / docs . oracle . com / en / java / javase / 11 / docs / api / java . base / java / lang / Object . html # finalize ( ) " > <nl> + Object . finalize ( ) < / a > <nl> + < / p > <nl> + < p > <nl> + Rationale : Finalizers are unpredictable , often dangerous , and generally unnecessary . <nl> + Their use can cause erratic behavior , poor performance , and portability problems . <nl> + For more information for the finalize method and its issues , see Effective Java : <nl> + Programming Language Guide Third Edition by Joshua Bloch , & # 167 ; 8 . <nl> + < / p > <nl> < / subsection > <nl> <nl> < subsection name = " Examples " id = " NoFinalizer _ Examples " >
NEAREST DIFF (one line): diff - - git a / . cvsignore b / . cvsignore <nl> new file mode 100644 <nl> index 0000000 . . 220773b <nl> - - - / dev / null <nl> + + + b / . cvsignore <nl> @ @ - 0 , 0 + 1 , 2 @ @ <nl> + TEST - com . puppycrawl . tools . checkstyle . * . txt <nl> + classes <nl> diff - - git a / ChangeLog b / ChangeLog <nl> new file mode 100644 <nl> index 0000000 . . b90bd3b <nl> - - - / dev / null <nl> + + + b / ChangeLog <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + 2001 - 06 - 28 Oliver Burn < checkstyle @ puppycrawl . com > <nl> + <nl> + 	 * src / checkstyle / com / puppycrawl / tools / checkstyle / java . tree . g : Now report <nl> + 	 references associated with " < Type > . class " declarations . Bug reported by <nl> + 	 Brendan Humphreys . <nl> + <nl> + 	 * src / checkstyle / com / puppycrawl / tools / checkstyle / VerifierImpl . java : <nl> + 	 Changed package checking to handle " java . lang . " imports . <nl> + <nl> + 	 * build . xml : Updated version to 1 . 2 <nl> + <nl> + 	 * src / tests / com / puppycrawl / tools / checkstyle / InputImport . java : Created . <nl> + <nl> + 	 * src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java : Added test <nl> + 	 for imports . <nl> + <nl> + 	 * src / checkstyle / com / puppycrawl / tools / checkstyle / VerifierImpl . java : <nl> + 	 Now checks for imports from java . lang package . <nl> + <nl> + 	 * ChangeLog : Introduced its use . <nl> + <nl> + 	 * Main . java , VerifierImpl . java , CheckStyleTask . java : Now output <nl> + 	 messages to standard out , instead of standard error . Makes piping the <nl> + 	 output of checkstyle a lot easier . <nl> diff - - git a / build . xml b / build . xml <nl> index d7b9fc6 . . 580967d 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 4 , 7 + 4 , 7 @ @ <nl> < property name = " antlr . home " value = " c : / apps / antlr - 2 . 7 . 1 " / > <nl> < property name = " regexp . jar " value = " c : / apps / jakarta - regexp - 1 . 2 / jakarta - regexp - 1 . 2 . jar " / > <nl> < property name = " checkstyle . dir " value = " src / checkstyle / com / puppycrawl / tools / checkstyle " / > <nl> - < property name = " version " value = " 1 . 1 " / > <nl> + < property name = " version " value = " 1 . 2 " / > <nl> <nl> < path id = " build . classpath " > <nl> < pathelement location = " $ { antlr . home } " / > <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / . cvsignore b / src / checkstyle / com / puppycrawl / tools / checkstyle / . cvsignore <nl> new file mode 100644 <nl> index 0000000 . . b891726 <nl> - - - / dev / null <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / . cvsignore <nl> @ @ - 0 , 0 + 1 @ @ <nl> + GeneratedJava * . java <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> index c74b974 . . be193a7 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> @ @ - 135 , 20 + 135 , 20 @ @ public class CheckStyleTask <nl> { <nl> mProps . setProperty ( RELAX _ JAVADOC _ PROP , " " + aRelax ) ; <nl> } <nl> - <nl> + <nl> / * * @ param aIgnore whether to ignore import statements * * / <nl> public void setIgnoreImports ( boolean aIgnore ) <nl> { <nl> mProps . setProperty ( IGNORE _ IMPORTS _ PROP , " " + aIgnore ) ; <nl> } <nl> - <nl> + <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> / / The doers <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> <nl> / * * <nl> * Actually checks the files specified . All errors are reported to <nl> - * System . err . Will fail if any errors occurred . <nl> + * System . out . Will fail if any errors occurred . <nl> * @ throws BuildException an error occurred <nl> * * / <nl> public void execute ( ) <nl> @ @ - 163 , 7 + 163 , 7 @ @ public class CheckStyleTask <nl> / / Create the checker <nl> Checker c ; <nl> try { <nl> - c = new Checker ( mProps , System . err ) ; <nl> + c = new Checker ( mProps , System . out ) ; <nl> } <nl> catch ( RESyntaxException e ) { <nl> e . printStackTrace ( ) ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> index 7339c75 . . 81775a9 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 39 , 12 + 39 , 12 @ @ public final class Main <nl> <nl> Checker c = null ; <nl> try { <nl> - c = new Checker ( System . getProperties ( ) , System . err ) ; <nl> + c = new Checker ( System . getProperties ( ) , System . out ) ; <nl> } <nl> catch ( RESyntaxException rese ) { <nl> - System . err . println ( " Unable to create an regexp object : " + <nl> + System . out . println ( " Unable to create an regexp object : " + <nl> rese . getMessage ( ) ) ; <nl> - rese . printStackTrace ( System . err ) ; <nl> + rese . printStackTrace ( System . out ) ; <nl> System . exit ( 1 ) ; <nl> } <nl> <nl> @ @ - 59 , 7 + 59 , 7 @ @ public final class Main <nl> / * * Prints the usage information . * * / <nl> private static void usage ( ) <nl> { <nl> - System . err . println ( <nl> + System . out . println ( <nl> " Usage : java " + <nl> com . puppycrawl . tools . checkstyle . Main . class . getName ( ) + " file . . . " ) ; <nl> System . exit ( 1 ) ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / VerifierImpl . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / VerifierImpl . java <nl> index c96677d . . 339c46f 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / VerifierImpl . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / VerifierImpl . java <nl> @ @ - 68 , 7 + 68 , 7 @ @ class VerifierImpl <nl> <nl> / * * tracks the level of block definitions for methods * * / <nl> private int mMethodBlockLevel = 0 ; <nl> - <nl> + <nl> / * * the messages being logged * * / <nl> private final List mMessages = new ArrayList ( ) ; <nl> <nl> @ @ - 123 , 7 + 123 , 7 @ @ class VerifierImpl <nl> private final boolean mRelaxJavadoc ; <nl> / * * whether to process imports * * / <nl> private final boolean mCheckImports ; <nl> - <nl> + <nl> / * * the header lines to check for * * / <nl> private final String [ ] mHeaderLines ; <nl> / * * line number to ignore in header * * / <nl> @ @ - 459 , 7 + 459 , 7 @ @ class VerifierImpl <nl> { <nl> mReferenced . add ( aType ) ; <nl> } <nl> - <nl> + <nl> / * * @ see Verifier * * / <nl> public void reportImport ( int aLineNo , String aType ) <nl> { <nl> @ @ - 473 , 11 + 473 , 18 @ @ class VerifierImpl <nl> " Duplicate import to line " + lt . getLineNo ( ) + " . " ) ; <nl> } <nl> } <nl> - } <nl> <nl> - mImports . add ( new LineText ( aLineNo , aType ) ) ; <nl> + / / Check for import from java . lang package . <nl> + if ( aType . startsWith ( " java . lang . " ) ) { <nl> + log ( aLineNo , " Redundant import from the java . lang package . " ) ; <nl> + } <nl> + else { <nl> + / / Add to list to check for duplicates and usage <nl> + mImports . add ( new LineText ( aLineNo , aType ) ) ; <nl> + } <nl> + } <nl> } <nl> - <nl> + <nl> / * * @ see Verifier * * / <nl> public void reportStarImport ( int aLineNo , String aPkg ) <nl> { <nl> @ @ - 485 , 31 + 492 , 31 @ @ class VerifierImpl <nl> log ( aLineNo , " Avoid using the ' . * ' form of import . " ) ; <nl> } <nl> } <nl> - <nl> + <nl> / * * @ see Verifier * * / <nl> public void reportStartTypeBlock ( boolean aIsInterface ) <nl> { <nl> mInInterface . push ( new Boolean ( aIsInterface ) ) ; <nl> } <nl> - <nl> + <nl> / * * @ see Verifier * * / <nl> public void reportEndTypeBlock ( ) <nl> { <nl> mInInterface . pop ( ) ; <nl> } <nl> - <nl> + <nl> / * * @ see Verifier * * / <nl> public void reportStartMethodBlock ( ) <nl> { <nl> mMethodBlockLevel + + ; <nl> } <nl> - <nl> + <nl> / * * @ see Verifier * * / <nl> public void reportEndMethodBlock ( ) <nl> { <nl> mMethodBlockLevel - - ; <nl> } <nl> - <nl> + <nl> <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> / / Private methods <nl> @ @ - 528 , 9 + 535 , 9 @ @ class VerifierImpl <nl> retVal = new RE ( aPattern ) ; <nl> } <nl> catch ( RESyntaxException e ) { <nl> - System . err . println ( " Failed to initialise regexp expression " + <nl> + System . out . println ( " Failed to initialise regexp expression " + <nl> aPattern ) ; <nl> - e . printStackTrace ( System . err ) ; <nl> + e . printStackTrace ( System . out ) ; <nl> System . exit ( 1 ) ; <nl> } <nl> return retVal ; <nl> @ @ - 783 , 13 + 790 , 14 @ @ class VerifierImpl <nl> return ( i = = - 1 ) ? aType : aType . substring ( i + 1 ) ; <nl> } <nl> <nl> - / * * Check for imports that are unused . * * / <nl> + / * * Check the imports that are unused or unrequired . * * / <nl> private void checkImports ( ) <nl> { <nl> if ( ! mCheckImports ) { <nl> return ; <nl> } <nl> <nl> + / / Loop checking for unused imports <nl> final Iterator it = mImports . iterator ( ) ; <nl> while ( it . hasNext ( ) ) { <nl> final LineText imp = ( LineText ) it . next ( ) ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / java . tree . g b / src / checkstyle / com / puppycrawl / tools / checkstyle / java . tree . g <nl> index 8880f4d . . 7ba473e 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / java . tree . g <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / java . tree . g <nl> @ @ - 37 , 6 + 37 , 8 @ @ options { <nl> <nl> { <nl> Verifier ver = VerifierSingleton . getInstance ( ) ; <nl> + / / Used in primaryExpression <nl> + MyCommonAST firstExprIdent = null ; <nl> } <nl> <nl> compilationUnit <nl> @ @ - 414 , 35 + 416 , 35 @ @ expr <nl> | # ( " instanceof " expr expr ) / / Java ensures surrounded by WS ! <nl> | # ( UNARY _ MINUS expr ) { ver . verifyNoWSAfter ( # UNARY _ MINUS ) ; } <nl> | # ( UNARY _ PLUS expr ) { ver . verifyNoWSAfter ( # UNARY _ PLUS ) ; } <nl> - | 	 primaryExpression <nl> + | primaryExpression <nl> ; <nl> <nl> primaryExpression <nl> - : IDENT <nl> - | # ( 	 DOT <nl> - 	 	 	 ( 	 expr <nl> - 	 	 	 	 ( 	 IDENT <nl> - 	 	 	 	 | 	 arrayIndex <nl> - 	 	 	 	 | 	 " this " <nl> - 	 	 	 	 | 	 " class " <nl> - 	 	 	 	 | 	 # ( " new " IDENT elist ) <nl> - 	 	 	 	 ) <nl> - 	 	 	 | 	 # ( ARRAY _ DECLARATOR type ) <nl> - 	 	 	 | 	 builtInType ( " class " ) ? <nl> - 	 	 	 ) <nl> - 	 	 ) <nl> - 	 | 	 arrayIndex <nl> - 	 | 	 # ( METHOD _ CALL primaryExpression elist ) <nl> - 	 | 	 # ( TYPECAST typeSpec expr ) <nl> - 	 | newExpression <nl> - 	 | constant <nl> - | " super " <nl> - | " true " <nl> - | " false " <nl> - | " this " <nl> - | " null " <nl> - 	 | 	 typeSpec / / type name used with instanceof <nl> - 	 ; <nl> + : i1 : IDENT { firstExprIdent = i1 ; } <nl> + | # ( DOT <nl> + ( expr <nl> + ( i2 : IDENT { firstExprIdent = null ; } <nl> + | arrayIndex <nl> + | " this " <nl> + | " class " { if ( firstExprIdent ! = null ) { ver . reportReference ( firstExprIdent . getText ( ) ) ; } } <nl> + | # ( " new " IDENT elist ) <nl> + ) <nl> + | # ( ARRAY _ DECLARATOR type ) <nl> + | builtInType ( " class " ) ? <nl> + ) <nl> + ) <nl> + | arrayIndex <nl> + | # ( METHOD _ CALL primaryExpression elist ) <nl> + | # ( TYPECAST typeSpec expr ) <nl> + | newExpression <nl> + | constant <nl> + | " super " <nl> + | " true " <nl> + | " false " <nl> + | " this " <nl> + | " null " <nl> + | typeSpec / / type name used with instanceof <nl> + ; <nl> <nl> arrayIndex <nl> 	 : 	 # ( INDEX _ OP primaryExpression expression ) <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index e9a92d2 . . 1f9c891 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 14 , 13 + 14 , 13 @ @ public class CheckerTest <nl> private final ByteArrayOutputStream mBAOS = new ByteArrayOutputStream ( ) ; <nl> private final PrintStream mStream = new PrintStream ( mBAOS ) ; <nl> private final Properties mProps = new Properties ( ) ; <nl> - <nl> + <nl> public CheckerTest ( String name ) <nl> { <nl> super ( name ) ; <nl> } <nl> <nl> - protected void setUp ( ) <nl> + protected void setUp ( ) <nl> { <nl> mProps . setProperty ( Checker . HEADER _ FILE _ PROP , " java . header " ) ; <nl> } <nl> @ @ - 42 , 7 + 42 , 7 @ @ public class CheckerTest <nl> assertEquals ( aExpected . length , errs ) ; <nl> } <nl> <nl> - <nl> + <nl> public void testWhitespace ( ) <nl> throws Exception <nl> { <nl> @ @ - 68 , 34 + 68 , 30 @ @ public class CheckerTest <nl> { <nl> final Checker c = new Checker ( mProps , mStream ) ; <nl> final String [ ] expected = { <nl> - " InputBraces . java : 7 : Unused import - java . lang . Class " , <nl> - " InputBraces . java : 8 : Duplicate import to line 7 . " , <nl> - " InputBraces . java : 8 : Unused import - java . lang . Class " , <nl> - " InputBraces . java : 9 : Avoid using the ' . * ' form of import . " , <nl> - " InputBraces . java : 33 : ' do ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 45 : ' while ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 45 : ' ; ' is not preceeded with whitespace . " , <nl> - " InputBraces . java : 46 : ' while ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 48 : ' while ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 49 : ' if ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 62 : ' for ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 62 : ' ; ' is not preceeded with whitespace . " , <nl> - " InputBraces . java : 63 : ' for ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 65 : ' for ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 66 : ' if ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 85 : ' if ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 85 : ' ; ' is not preceeded with whitespace . " , <nl> - " InputBraces . java : 86 : ' if ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 29 : ' do ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 41 : ' while ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 41 : ' ; ' is not preceeded with whitespace . " , <nl> + " InputBraces . java : 42 : ' while ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 44 : ' while ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 45 : ' if ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 58 : ' for ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 58 : ' ; ' is not preceeded with whitespace . " , <nl> + " InputBraces . java : 59 : ' for ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 61 : ' for ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 62 : ' if ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 81 : ' if ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 81 : ' ; ' is not preceeded with whitespace . " , <nl> + " InputBraces . java : 82 : ' if ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 84 : ' if ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 84 : ' else ' construct must use ' { } ' s . " , <nl> " InputBraces . java : 88 : ' if ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 88 : ' else ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 92 : ' if ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 97 : ' else ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 102 : ' if ' construct must use ' { } ' s . " , <nl> - " InputBraces . java : 103 : ' if ' construct must use ' { } ' s . " <nl> + " InputBraces . java : 93 : ' else ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 98 : ' if ' construct must use ' { } ' s . " , <nl> + " InputBraces . java : 99 : ' if ' construct must use ' { } ' s . " <nl> } ; <nl> verify ( c , " InputBraces . java " , expected ) ; <nl> } <nl> - <nl> + <nl> public void testTags ( ) <nl> throws Exception <nl> { <nl> @ @ - 125 , 7 + 121 , 7 @ @ public class CheckerTest <nl> <nl> verify ( c , " InputTags . java " , expected ) ; <nl> } <nl> - <nl> + <nl> public void testInner ( ) <nl> throws Exception <nl> { <nl> @ @ - 205 , 7 + 201 , 7 @ @ public class CheckerTest <nl> } ; <nl> verify ( c , " InputPublicOnly . java " , expected ) ; <nl> } <nl> - <nl> + <nl> public void testRelaxedJavadoc ( ) <nl> throws Exception <nl> { <nl> @ @ - 230 , 7 + 226 , 7 @ @ public class CheckerTest <nl> " InputPublicOnly . java : 84 : method is missing a Javadoc comment . " <nl> } ; <nl> verify ( c , " InputPublicOnly . java " , expected ) ; <nl> - } <nl> + } <nl> <nl> public void testHeader ( ) <nl> throws Exception <nl> @ @ - 244 , 4 + 240 , 19 @ @ public class CheckerTest <nl> } ; <nl> verify ( c , " inputHeader . java " , expected ) ; <nl> } <nl> + <nl> + public void testImport ( ) <nl> + throws Exception <nl> + { <nl> + final Checker c = new Checker ( mProps , mStream ) ; <nl> + assertNotNull ( c ) ; <nl> + final String [ ] expected = { <nl> + " InputImport . java : 7 : Unused import - java . util . List " , <nl> + " InputImport . java : 8 : Duplicate import to line 7 . " , <nl> + " InputImport . java : 8 : Unused import - java . util . List " , <nl> + " InputImport . java : 9 : Avoid using the ' . * ' form of import . " , <nl> + " InputImport . java : 10 : Redundant import from the java . lang package . " , <nl> + } ; <nl> + verify ( c , " InputImport . java " , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / InputBraces . java b / src / tests / com / puppycrawl / tools / checkstyle / InputBraces . java <nl> index b40d460 . . 7fc17bf 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / InputBraces . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / InputBraces . java <nl> @ @ - 4 , 10 + 4 , 6 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> - import java . lang . Class ; / / ignore <nl> - import java . lang . Class ; / / ignore <nl> - import java . io . * ; / / ignore <nl> - <nl> / * * <nl> * Test case for correct use of braces . <nl> * @ author Oliver Burn <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / InputImport . java b / src / tests / com / puppycrawl / tools / checkstyle / InputImport . java <nl> new file mode 100644 <nl> index 0000000 . . fe15bcd <nl> - - - / dev / null <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / InputImport . java <nl> @ @ - 0 , 0 + 1 , 23 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . List ; <nl> + import java . io . * ; <nl> + import java . lang . String ; <nl> + import java . sql . Connection ; <nl> + <nl> + / * * <nl> + * Test case for imports <nl> + * @ author Oliver Burn <nl> + * * / <nl> + class InputImport <nl> + { <nl> + / * * ignore * * / <nl> + private Class mUse1 = Connection . class ; <nl> + / * * ignore * * / <nl> + private Class mUse2 = java . io . File . class ; <nl> + }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java 
 index e99af77 . . 995093e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java 
 @ @ - 25 , 9 + 25 , 28 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 - * Checks that no method having zero parameters is defined 
 - * using the name < em > finalize < / em > . 
 + * < p > 
 + * Verifies there are no { @ code finalize ( ) } methods defined in a class . 
 + * < / p > 
 + * < p > 
 + * See 
 + * < a href = " https : / / docs . oracle . com / en / java / javase / 11 / docs / api / java . base / java / lang / Object . html # finalize ( ) " > 
 + * Object . finalize ( ) < / a > 
 + * < / p > 
 + * < p > 
 + * Rationale : Finalizers are unpredictable , often dangerous , and generally unnecessary . 
 + * Their use can cause erratic behavior , poor performance , and portability problems . 
 + * For more information for the finalize method and its issues , see Effective Java : 
 + * Programming Language Guide Third Edition by Joshua Bloch , & # 167 ; 8 . 
 + * < / p > 
 + * < p > 
 + * To configure the check : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; NoFinalizer & quot ; / & gt ; 
 + * < / pre > 
 * 
 + * @ since 5 . 0 
 * / 
 @ StatelessCheck 
 public class NoFinalizerCheck extends AbstractCheck { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 3bb9563 . . 76a1adb 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 124 , 6 + 124 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " NestedIfDepth " , 
 " NestedTryDepth " , 
 " NoClone " , 
 + " NoFinalizer " , 
 " OneStatementPerLine " , 
 " OverloadMethodsDeclarationOrder " , 
 " PackageAnnotation " , 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 1164b83 . . 7d1f9c9 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 3497 , 12 + 3497 , 22 @ @ System . out . println ( s2 instanceof Square ) ; / / true 
 < / section > 
 
 < section name = " NoFinalizer " > 
 + < p > Since Checkstyle 5 . 0 < / p > 
 < subsection name = " Description " id = " NoFinalizer _ Description " > 
 - < p > Since Checkstyle 5 . 0 < / p > 
 < p > 
 Verifies there are no < code > finalize ( ) < / code > methods 
 defined in a class . 
 < / p > 
 + < p > 
 + See < a href = " https : / / docs . oracle . com / en / java / javase / 11 / docs / api / java . base / java / lang / Object . html # finalize ( ) " > 
 + Object . finalize ( ) < / a > 
 + < / p > 
 + < p > 
 + Rationale : Finalizers are unpredictable , often dangerous , and generally unnecessary . 
 + Their use can cause erratic behavior , poor performance , and portability problems . 
 + For more information for the finalize method and its issues , see Effective Java : 
 + Programming Language Guide Third Edition by Joshua Bloch , & # 167 ; 8 . 
 + < / p > 
 < / subsection > 
 
 < subsection name = " Examples " id = " NoFinalizer _ Examples " >

NEAREST DIFF:
diff - - git a / . cvsignore b / . cvsignore 
 new file mode 100644 
 index 0000000 . . 220773b 
 - - - / dev / null 
 + + + b / . cvsignore 
 @ @ - 0 , 0 + 1 , 2 @ @ 
 + TEST - com . puppycrawl . tools . checkstyle . * . txt 
 + classes 
 diff - - git a / ChangeLog b / ChangeLog 
 new file mode 100644 
 index 0000000 . . b90bd3b 
 - - - / dev / null 
 + + + b / ChangeLog 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + 2001 - 06 - 28 Oliver Burn < checkstyle @ puppycrawl . com > 
 + 
 + 	 * src / checkstyle / com / puppycrawl / tools / checkstyle / java . tree . g : Now report 
 + 	 references associated with " < Type > . class " declarations . Bug reported by 
 + 	 Brendan Humphreys . 
 + 
 + 	 * src / checkstyle / com / puppycrawl / tools / checkstyle / VerifierImpl . java : 
 + 	 Changed package checking to handle " java . lang . " imports . 
 + 
 + 	 * build . xml : Updated version to 1 . 2 
 + 
 + 	 * src / tests / com / puppycrawl / tools / checkstyle / InputImport . java : Created . 
 + 
 + 	 * src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java : Added test 
 + 	 for imports . 
 + 
 + 	 * src / checkstyle / com / puppycrawl / tools / checkstyle / VerifierImpl . java : 
 + 	 Now checks for imports from java . lang package . 
 + 
 + 	 * ChangeLog : Introduced its use . 
 + 
 + 	 * Main . java , VerifierImpl . java , CheckStyleTask . java : Now output 
 + 	 messages to standard out , instead of standard error . Makes piping the 
 + 	 output of checkstyle a lot easier . 
 diff - - git a / build . xml b / build . xml 
 index d7b9fc6 . . 580967d 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 4 , 7 + 4 , 7 @ @ 
 < property name = " antlr . home " value = " c : / apps / antlr - 2 . 7 . 1 " / > 
 < property name = " regexp . jar " value = " c : / apps / jakarta - regexp - 1 . 2 / jakarta - regexp - 1 . 2 . jar " / > 
 < property name = " checkstyle . dir " value = " src / checkstyle / com / puppycrawl / tools / checkstyle " / > 
 - < property name = " version " value = " 1 . 1 " / > 
 + < property name = " version " value = " 1 . 2 " / > 
 
 < path id = " build . classpath " > 
 < pathelement location = " $ { antlr . home } " / > 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / . cvsignore b / src / checkstyle / com / puppycrawl / tools / checkstyle / . cvsignore 
 new file mode 100644 
 index 0000000 . . b891726 
 - - - / dev / null 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / . cvsignore 
 @ @ - 0 , 0 + 1 @ @ 
 + GeneratedJava * . java 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 index c74b974 . . be193a7 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 @ @ - 135 , 20 + 135 , 20 @ @ public class CheckStyleTask 
 { 
 mProps . setProperty ( RELAX _ JAVADOC _ PROP , " " + aRelax ) ; 
 } 
 - 
 + 
 / * * @ param aIgnore whether to ignore import statements * * / 
 public void setIgnoreImports ( boolean aIgnore ) 
 { 
 mProps . setProperty ( IGNORE _ IMPORTS _ PROP , " " + aIgnore ) ; 
 } 
 - 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / The doers 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 / * * 
 * Actually checks the files specified . All errors are reported to 
 - * System . err . Will fail if any errors occurred . 
 + * System . out . Will fail if any errors occurred . 
 * @ throws BuildException an error occurred 
 * * / 
 public void execute ( ) 
 @ @ - 163 , 7 + 163 , 7 @ @ public class CheckStyleTask 
 / / Create the checker 
 Checker c ; 
 try { 
 - c = new Checker ( mProps , System . err ) ; 
 + c = new Checker ( mProps , System . out ) ; 
 } 
 catch ( RESyntaxException e ) { 
 e . printStackTrace ( ) ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 index 7339c75 . . 81775a9 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 39 , 12 + 39 , 12 @ @ public final class Main 
 
 Checker c = null ; 
 try { 
 - c = new Checker ( System . getProperties ( ) , System . err ) ; 
 + c = new Checker ( System . getProperties ( ) , System . out ) ; 
 } 
 catch ( RESyntaxException rese ) { 
 - System . err . println ( " Unable to create an regexp object : " + 
 + System . out . println ( " Unable to create an regexp object : " + 
 rese . getMessage ( ) ) ; 
 - rese . printStackTrace ( System . err ) ; 
 + rese . printStackTrace ( System . out ) ; 
 System . exit ( 1 ) ; 
 } 
 
 @ @ - 59 , 7 + 59 , 7 @ @ public final class Main 
 / * * Prints the usage information . * * / 
 private static void usage ( ) 
 { 
 - System . err . println ( 
 + System . out . println ( 
 " Usage : java " + 
 com . puppycrawl . tools . checkstyle . Main . class . getName ( ) + " file . . . " ) ; 
 System . exit ( 1 ) ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / VerifierImpl . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / VerifierImpl . java 
 index c96677d . . 339c46f 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / VerifierImpl . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / VerifierImpl . java 
 @ @ - 68 , 7 + 68 , 7 @ @ class VerifierImpl 
 
 / * * tracks the level of block definitions for methods * * / 
 private int mMethodBlockLevel = 0 ; 
 - 
 + 
 / * * the messages being logged * * / 
 private final List mMessages = new ArrayList ( ) ; 
 
 @ @ - 123 , 7 + 123 , 7 @ @ class VerifierImpl 
 private final boolean mRelaxJavadoc ; 
 / * * whether to process imports * * / 
 private final boolean mCheckImports ; 
 - 
 + 
 / * * the header lines to check for * * / 
 private final String [ ] mHeaderLines ; 
 / * * line number to ignore in header * * / 
 @ @ - 459 , 7 + 459 , 7 @ @ class VerifierImpl 
 { 
 mReferenced . add ( aType ) ; 
 } 
 - 
 + 
 / * * @ see Verifier * * / 
 public void reportImport ( int aLineNo , String aType ) 
 { 
 @ @ - 473 , 11 + 473 , 18 @ @ class VerifierImpl 
 " Duplicate import to line " + lt . getLineNo ( ) + " . " ) ; 
 } 
 } 
 - } 
 
 - mImports . add ( new LineText ( aLineNo , aType ) ) ; 
 + / / Check for import from java . lang package . 
 + if ( aType . startsWith ( " java . lang . " ) ) { 
 + log ( aLineNo , " Redundant import from the java . lang package . " ) ; 
 + } 
 + else { 
 + / / Add to list to check for duplicates and usage 
 + mImports . add ( new LineText ( aLineNo , aType ) ) ; 
 + } 
 + } 
 } 
 - 
 + 
 / * * @ see Verifier * * / 
 public void reportStarImport ( int aLineNo , String aPkg ) 
 { 
 @ @ - 485 , 31 + 492 , 31 @ @ class VerifierImpl 
 log ( aLineNo , " Avoid using the ' . * ' form of import . " ) ; 
 } 
 } 
 - 
 + 
 / * * @ see Verifier * * / 
 public void reportStartTypeBlock ( boolean aIsInterface ) 
 { 
 mInInterface . push ( new Boolean ( aIsInterface ) ) ; 
 } 
 - 
 + 
 / * * @ see Verifier * * / 
 public void reportEndTypeBlock ( ) 
 { 
 mInInterface . pop ( ) ; 
 } 
 - 
 + 
 / * * @ see Verifier * * / 
 public void reportStartMethodBlock ( ) 
 { 
 mMethodBlockLevel + + ; 
 } 
 - 
 + 
 / * * @ see Verifier * * / 
 public void reportEndMethodBlock ( ) 
 { 
 mMethodBlockLevel - - ; 
 } 
 - 
 + 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Private methods 
 @ @ - 528 , 9 + 535 , 9 @ @ class VerifierImpl 
 retVal = new RE ( aPattern ) ; 
 } 
 catch ( RESyntaxException e ) { 
 - System . err . println ( " Failed to initialise regexp expression " + 
 + System . out . println ( " Failed to initialise regexp expression " + 
 aPattern ) ; 
 - e . printStackTrace ( System . err ) ; 
 + e . printStackTrace ( System . out ) ; 
 System . exit ( 1 ) ; 
 } 
 return retVal ; 
 @ @ - 783 , 13 + 790 , 14 @ @ class VerifierImpl 
 return ( i = = - 1 ) ? aType : aType . substring ( i + 1 ) ; 
 } 
 
 - / * * Check for imports that are unused . * * / 
 + / * * Check the imports that are unused or unrequired . * * / 
 private void checkImports ( ) 
 { 
 if ( ! mCheckImports ) { 
 return ; 
 } 
 
 + / / Loop checking for unused imports 
 final Iterator it = mImports . iterator ( ) ; 
 while ( it . hasNext ( ) ) { 
 final LineText imp = ( LineText ) it . next ( ) ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / java . tree . g b / src / checkstyle / com / puppycrawl / tools / checkstyle / java . tree . g 
 index 8880f4d . . 7ba473e 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / java . tree . g 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / java . tree . g 
 @ @ - 37 , 6 + 37 , 8 @ @ options { 
 
 { 
 Verifier ver = VerifierSingleton . getInstance ( ) ; 
 + / / Used in primaryExpression 
 + MyCommonAST firstExprIdent = null ; 
 } 
 
 compilationUnit 
 @ @ - 414 , 35 + 416 , 35 @ @ expr 
 | # ( " instanceof " expr expr ) / / Java ensures surrounded by WS ! 
 | # ( UNARY _ MINUS expr ) { ver . verifyNoWSAfter ( # UNARY _ MINUS ) ; } 
 | # ( UNARY _ PLUS expr ) { ver . verifyNoWSAfter ( # UNARY _ PLUS ) ; } 
 - | 	 primaryExpression 
 + | primaryExpression 
 ; 
 
 primaryExpression 
 - : IDENT 
 - | # ( 	 DOT 
 - 	 	 	 ( 	 expr 
 - 	 	 	 	 ( 	 IDENT 
 - 	 	 	 	 | 	 arrayIndex 
 - 	 	 	 	 | 	 " this " 
 - 	 	 	 	 | 	 " class " 
 - 	 	 	 	 | 	 # ( " new " IDENT elist ) 
 - 	 	 	 	 ) 
 - 	 	 	 | 	 # ( ARRAY _ DECLARATOR type ) 
 - 	 	 	 | 	 builtInType ( " class " ) ? 
 - 	 	 	 ) 
 - 	 	 ) 
 - 	 | 	 arrayIndex 
 - 	 | 	 # ( METHOD _ CALL primaryExpression elist ) 
 - 	 | 	 # ( TYPECAST typeSpec expr ) 
 - 	 | newExpression 
 - 	 | constant 
 - | " super " 
 - | " true " 
 - | " false " 
 - | " this " 
 - | " null " 
 - 	 | 	 typeSpec / / type name used with instanceof 
 - 	 ; 
 + : i1 : IDENT { firstExprIdent = i1 ; } 
 + | # ( DOT 
 + ( expr 
 + ( i2 : IDENT { firstExprIdent = null ; } 
 + | arrayIndex 
 + | " this " 
 + | " class " { if ( firstExprIdent ! = null ) { ver . reportReference ( firstExprIdent . getText ( ) ) ; } } 
 + | # ( " new " IDENT elist ) 
 + ) 
 + | # ( ARRAY _ DECLARATOR type ) 
 + | builtInType ( " class " ) ? 
 + ) 
 + ) 
 + | arrayIndex 
 + | # ( METHOD _ CALL primaryExpression elist ) 
 + | # ( TYPECAST typeSpec expr ) 
 + | newExpression 
 + | constant 
 + | " super " 
 + | " true " 
 + | " false " 
 + | " this " 
 + | " null " 
 + | typeSpec / / type name used with instanceof 
 + ; 
 
 arrayIndex 
 	 : 	 # ( INDEX _ OP primaryExpression expression ) 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index e9a92d2 . . 1f9c891 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 14 , 13 + 14 , 13 @ @ public class CheckerTest 
 private final ByteArrayOutputStream mBAOS = new ByteArrayOutputStream ( ) ; 
 private final PrintStream mStream = new PrintStream ( mBAOS ) ; 
 private final Properties mProps = new Properties ( ) ; 
 - 
 + 
 public CheckerTest ( String name ) 
 { 
 super ( name ) ; 
 } 
 
 - protected void setUp ( ) 
 + protected void setUp ( ) 
 { 
 mProps . setProperty ( Checker . HEADER _ FILE _ PROP , " java . header " ) ; 
 } 
 @ @ - 42 , 7 + 42 , 7 @ @ public class CheckerTest 
 assertEquals ( aExpected . length , errs ) ; 
 } 
 
 - 
 + 
 public void testWhitespace ( ) 
 throws Exception 
 { 
 @ @ - 68 , 34 + 68 , 30 @ @ public class CheckerTest 
 { 
 final Checker c = new Checker ( mProps , mStream ) ; 
 final String [ ] expected = { 
 - " InputBraces . java : 7 : Unused import - java . lang . Class " , 
 - " InputBraces . java : 8 : Duplicate import to line 7 . " , 
 - " InputBraces . java : 8 : Unused import - java . lang . Class " , 
 - " InputBraces . java : 9 : Avoid using the ' . * ' form of import . " , 
 - " InputBraces . java : 33 : ' do ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 45 : ' while ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 45 : ' ; ' is not preceeded with whitespace . " , 
 - " InputBraces . java : 46 : ' while ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 48 : ' while ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 49 : ' if ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 62 : ' for ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 62 : ' ; ' is not preceeded with whitespace . " , 
 - " InputBraces . java : 63 : ' for ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 65 : ' for ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 66 : ' if ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 85 : ' if ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 85 : ' ; ' is not preceeded with whitespace . " , 
 - " InputBraces . java : 86 : ' if ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 29 : ' do ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 41 : ' while ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 41 : ' ; ' is not preceeded with whitespace . " , 
 + " InputBraces . java : 42 : ' while ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 44 : ' while ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 45 : ' if ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 58 : ' for ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 58 : ' ; ' is not preceeded with whitespace . " , 
 + " InputBraces . java : 59 : ' for ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 61 : ' for ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 62 : ' if ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 81 : ' if ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 81 : ' ; ' is not preceeded with whitespace . " , 
 + " InputBraces . java : 82 : ' if ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 84 : ' if ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 84 : ' else ' construct must use ' { } ' s . " , 
 " InputBraces . java : 88 : ' if ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 88 : ' else ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 92 : ' if ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 97 : ' else ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 102 : ' if ' construct must use ' { } ' s . " , 
 - " InputBraces . java : 103 : ' if ' construct must use ' { } ' s . " 
 + " InputBraces . java : 93 : ' else ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 98 : ' if ' construct must use ' { } ' s . " , 
 + " InputBraces . java : 99 : ' if ' construct must use ' { } ' s . " 
 } ; 
 verify ( c , " InputBraces . java " , expected ) ; 
 } 
 - 
 + 
 public void testTags ( ) 
 throws Exception 
 { 
 @ @ - 125 , 7 + 121 , 7 @ @ public class CheckerTest 
 
 verify ( c , " InputTags . java " , expected ) ; 
 } 
 - 
 + 
 public void testInner ( ) 
 throws Exception 
 { 
 @ @ - 205 , 7 + 201 , 7 @ @ public class CheckerTest 
 } ; 
 verify ( c , " InputPublicOnly . java " , expected ) ; 
 } 
 - 
 + 
 public void testRelaxedJavadoc ( ) 
 throws Exception 
 { 
 @ @ - 230 , 7 + 226 , 7 @ @ public class CheckerTest 
 " InputPublicOnly . java : 84 : method is missing a Javadoc comment . " 
 } ; 
 verify ( c , " InputPublicOnly . java " , expected ) ; 
 - } 
 + } 
 
 public void testHeader ( ) 
 throws Exception 
 @ @ - 244 , 4 + 240 , 19 @ @ public class CheckerTest 
 } ; 
 verify ( c , " inputHeader . java " , expected ) ; 
 } 
 + 
 + public void testImport ( ) 
 + throws Exception 
 + { 
 + final Checker c = new Checker ( mProps , mStream ) ; 
 + assertNotNull ( c ) ; 
 + final String [ ] expected = { 
 + " InputImport . java : 7 : Unused import - java . util . List " , 
 + " InputImport . java : 8 : Duplicate import to line 7 . " , 
 + " InputImport . java : 8 : Unused import - java . util . List " , 
 + " InputImport . java : 9 : Avoid using the ' . * ' form of import . " , 
 + " InputImport . java : 10 : Redundant import from the java . lang package . " , 
 + } ; 
 + verify ( c , " InputImport . java " , expected ) ; 
 + } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / InputBraces . java b / src / tests / com / puppycrawl / tools / checkstyle / InputBraces . java 
 index b40d460 . . 7fc17bf 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / InputBraces . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / InputBraces . java 
 @ @ - 4 , 10 + 4 , 6 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle ; 
 
 - import java . lang . Class ; / / ignore 
 - import java . lang . Class ; / / ignore 
 - import java . io . * ; / / ignore 
 - 
 / * * 
 * Test case for correct use of braces . 
 * @ author Oliver Burn 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / InputImport . java b / src / tests / com / puppycrawl / tools / checkstyle / InputImport . java 
 new file mode 100644 
 index 0000000 . . fe15bcd 
 - - - / dev / null 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / InputImport . java 
 @ @ - 0 , 0 + 1 , 23 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import java . util . List ; 
 + import java . util . List ; 
 + import java . io . * ; 
 + import java . lang . String ; 
 + import java . sql . Connection ; 
 + 
 + / * * 
 + * Test case for imports 
 + * @ author Oliver Burn 
 + * * / 
 + class InputImport 
 + { 
 + / * * ignore * * / 
 + private Class mUse1 = Connection . class ; 
 + / * * ignore * * / 
 + private Class mUse2 = java . io . File . class ; 
 + }
