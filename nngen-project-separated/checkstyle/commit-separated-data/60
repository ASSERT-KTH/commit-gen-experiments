BLEU SCORE: 0.0254507234234606

TEST MSG: Issue # 5750 : aligned javadoc / xdoc for MissingOverride
GENERATED MSG: Added option to Illegal Throws Check due to twitter custom checks , issue # 430

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java <nl> index 66818f2 . . ca2677e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java <nl> @ @ - 33 , 47 + 33 , 56 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> <nl> / * * <nl> * < p > <nl> - * This class is used to verify that the { @ link Override Override } <nl> - * annotation is present when the inheritDoc javadoc tag is present . <nl> + * Verifies that the & # 64 ; Override annotation is present <nl> + * when the & # 64 ; inheritDoc javadoc tag is present . <nl> * < / p > <nl> - * <nl> * < p > <nl> - * Rationale : The { @ link Override Override } annotation helps <nl> + * Rationale : The & # 64 ; Override annotation helps <nl> * compiler tools ensure that an override is actually occurring . It is <nl> * quite easy to accidentally overload a method or hide a static method <nl> - * and using the { @ link Override Override } annotation points <nl> - * out these problems . <nl> + * and using the & # 64 ; Override annotation points out these problems . <nl> * < / p > <nl> - * <nl> * < p > <nl> - * This check will log a violation if using the inheritDoc tag on a method that <nl> + * This check will log a violation if using the & # 64 ; inheritDoc tag on a method that <nl> * is not valid ( ex : private , or static method ) . <nl> * < / p > <nl> - * <nl> * < p > <nl> - * There is a slight difference between the Override annotation in Java 5 versus <nl> + * There is a slight difference between the & # 64 ; Override annotation in Java 5 versus <nl> * Java 6 and above . In Java 5 , any method overridden from an interface cannot <nl> - * be annotated with Override . In Java 6 this behavior is allowed . <nl> + * be annotated with & # 64 ; Override . In Java 6 this behavior is allowed . <nl> * < / p > <nl> - * <nl> * < p > <nl> * As a result of the aforementioned difference between Java 5 and Java 6 , a <nl> - * property called { @ code javaFiveCompatibility } is available . This <nl> + * property called { @ code javaFiveCompatibility } is available . This <nl> * property will only check classes , interfaces , etc . that do not contain the <nl> * extends or implements keyword or are not anonymous classes . This means it <nl> - * only checks methods overridden from { @ code java . lang . Object } <nl> - * <nl> + * only checks methods overridden from { @ code java . lang . Object } . <nl> * < b > Java 5 Compatibility mode severely limits this check . It is recommended to <nl> - * only use it on Java 5 source < / b > <nl> + * only use it on Java 5 source . < / b > <nl> + * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code javaFiveCompatibility } - Enable java 5 compatibility mode . <nl> + * Default value is { @ code false } . <nl> + * < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * To configure the check : <nl> * < / p > <nl> - * <nl> * < pre > <nl> - * & lt ; module name = & quot ; MissingOverride & quot ; & gt ; <nl> - * & lt ; property name = & quot ; javaFiveCompatibility & quot ; <nl> - * value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; module name = & quot ; MissingOverride & quot ; / & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check for the { @ code javaFiveCompatibility } mode : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = " MissingOverride " & gt ; <nl> + * & lt ; property name = " javaFiveCompatibility " <nl> + * value = " true " / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> * <nl> + * @ since 5 . 0 <nl> * / <nl> @ StatelessCheck <nl> public final class MissingOverrideCheck extends AbstractCheck { <nl> @ @ - 102 , 25 + 111 , 12 @ @ public final class MissingOverrideCheck extends AbstractCheck { <nl> CommonUtil . createPattern ( " \ \ { \ \ s * @ ( inheritDoc ) \ \ s * \ \ } " ) ; <nl> <nl> / * * <nl> - * Java 5 compatibility option . <nl> - * @ see # setJavaFiveCompatibility ( boolean ) <nl> + * Enable java 5 compatibility mode . <nl> * / <nl> private boolean javaFiveCompatibility ; <nl> <nl> / * * <nl> - * Sets Java 5 compatibility mode . <nl> - * <nl> - * < p > <nl> - * In Java 5 , this check could flag code that is not valid for the Override <nl> - * annotation even though it is a proper override . See the class <nl> - * documentation for more information . <nl> - * < / p > <nl> - * <nl> - * < p > <nl> - * Set this to true to turn on Java 5 compatibility mode . Set this to <nl> - * false to turn off Java 5 compatibility mode . <nl> - * < / p > <nl> - * <nl> + * Setter to enable java 5 compatibility mode . <nl> * @ param compatibility compatibility or not <nl> * / <nl> public void setJavaFiveCompatibility ( final boolean compatibility ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 88453a3 . . 63b64d2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 87 , 6 + 87 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " MethodName " , <nl> " MethodTypeParameterName " , <nl> " MissingDeprecated " , <nl> + " MissingOverride " , <nl> " PackageName " , <nl> " ParameterName " , <nl> " StaticVariableName " , <nl> diff - - git a / src / xdocs / config _ annotation . xml b / src / xdocs / config _ annotation . xml <nl> index e9be909 . . de2ce32 100644 <nl> - - - a / src / xdocs / config _ annotation . xml <nl> + + + b / src / xdocs / config _ annotation . xml <nl> @ @ - 626 , 10 + 626 , 37 @ @ public static final int COUNTER = 10 ; / / violation as javadoc exists <nl> < / section > <nl> <nl> < section name = " MissingOverride " > <nl> + < p > Since Checkstyle 5 . 0 < / p > <nl> < subsection name = " Description " id = " MissingOverride _ Description " > <nl> - < p > Since Checkstyle 5 . 0 < / p > <nl> - < p > Verifies that the java . lang . Override annotation is present <nl> - when the { @ inheritDoc } javadoc tag is present . < / p > <nl> + < p > <nl> + Verifies that the @ Override annotation is present <nl> + when the @ inheritDoc javadoc tag is present . <nl> + < / p > <nl> + < p > <nl> + Rationale : The @ Override annotation helps <nl> + compiler tools ensure that an override is actually occurring . It is <nl> + quite easy to accidentally overload a method or hide a static method <nl> + and using the @ Override annotation points out these problems . <nl> + < / p > <nl> + < p > <nl> + This check will log a violation if using the @ inheritDoc tag on a method that <nl> + is not valid ( ex : private , or static method ) . <nl> + < / p > <nl> + < p > <nl> + There is a slight difference between the @ Override annotation in Java 5 versus <nl> + Java 6 and above . In Java 5 , any method overridden from an interface cannot <nl> + be annotated with @ Override . In Java 6 this behavior is allowed . <nl> + < / p > <nl> + < p > <nl> + As a result of the aforementioned difference between Java 5 and Java 6 , a <nl> + property called < code > javaFiveCompatibility < / code > is available . This <nl> + property will only check classes , interfaces , etc . that do not contain the <nl> + extends or implements keyword or are not anonymous classes . This means it <nl> + only checks methods overridden from < code > java . lang . Object < / code > . <nl> + < b > Java 5 Compatibility mode severely limits this check . It is recommended to <nl> + only use it on Java 5 source . < / b > <nl> + < / p > <nl> + <nl> < / subsection > <nl> < subsection name = " Properties " id = " MissingOverride _ Properties " > <nl> < table > <nl> @ @ - 643 , 13 + 670 , 7 @ @ public static final int COUNTER = 10 ; / / violation as javadoc exists <nl> < tr > <nl> < td > javaFiveCompatibility < / td > <nl> < td > <nl> - When this property is true this check will only check <nl> - classes , interfaces , etc . that do not contain the extends <nl> - or implements keyword or are not anonymous classes . This <nl> - means it only checks methods overridden from <nl> - < code > java . lang . Object < / code > <nl> - < b > Java 5 Compatibility mode severely limits this <nl> - check . It is recommended to only use it on Java 5 source < / b > <nl> + Enable java 5 compatibility mode . <nl> < / td > <nl> < td > <nl> < a href = " property _ types . html # boolean " > Boolean < / a >
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java <nl> index 8a36c87 . . 9ea54a0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java <nl> @ @ - 34 , 12 + 34 , 12 @ @ public class RedundantImportCheckTest <nl> createCheckConfig ( RedundantImportCheck . class ) ; <nl> final String [ ] expected = { <nl> " 7 : 1 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . * . " , <nl> - " 8 : 38 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . GlobalProperties . " , <nl> + " 8 : 1 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . InputImportBug . " , <nl> " 10 : 1 : Redundant import from the java . lang package - java . lang . * . " , <nl> " 11 : 1 : Redundant import from the java . lang package - java . lang . String . " , <nl> " 14 : 1 : Duplicate import to line 13 - java . util . List . " , <nl> " 26 : 1 : Duplicate import to line 25 - javax . swing . WindowConstants . * . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator + " InputRedundantImportCheck . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 49cdf5a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java <nl> @ @ - 0 , 0 + 1 , 111 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . imports ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . imports . * ; <nl> + import com . puppycrawl . tools . checkstyle . imports . InputImportBug ; <nl> + import java . io . * ; <nl> + import java . lang . * ; <nl> + import java . lang . String ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . List ; <nl> + import java . util . Iterator ; <nl> + import java . util . Enumeration ; <nl> + import java . util . Arrays ; <nl> + <nl> + import javax . swing . JToolBar ; <nl> + import javax . swing . JToggleButton ; <nl> + import javax . swing . ScrollPaneLayout ; <nl> + import javax . swing . BorderFactory ; <nl> + import static java . io . File . listRoots ; <nl> + <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static java . io . File . createTempFile ; <nl> + import static java . io . File . pathSeparator ; <nl> + <nl> + import java . awt . Component ; <nl> + import java . awt . Graphics2D ; <nl> + import java . awt . HeadlessException ; <nl> + import java . awt . Label ; <nl> + import java . util . Date ; <nl> + import java . util . Calendar ; <nl> + import java . util . BitSet ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . Checker ; <nl> + import com . puppycrawl . tools . checkstyle . CheckerTest ; <nl> + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . Defn ; <nl> + import com . puppycrawl . tools . checkstyle . Input15Extensions ; <nl> + import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; <nl> + import com . puppycrawl . tools . checkstyle . CheckStyleTask ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> + <nl> + / * * <nl> + * Test case for imports <nl> + * Here ' s an import used only by javadoc : { @ link Date } . <nl> + * @ author Oliver Burn <nl> + * @ author lkuehne <nl> + * @ author Michael Studman <nl> + * @ see Calendar Should avoid unused import for Calendar <nl> + * * / <nl> + class InputRedundantImportCheck <nl> + { <nl> + / * * ignore * * / <nl> + private Class mUse1 = null ; <nl> + / * * ignore * * / <nl> + private Class mUse2 = java . io . File . class ; <nl> + / * * ignore * * / <nl> + private Class mUse3 = Iterator [ ] . class ; <nl> + / * * ignore * * / <nl> + private Class mUse4 = java . util . Enumeration [ ] . class ; <nl> + / * * usage of illegal import * * / <nl> + private String ftpClient = null ; <nl> + <nl> + / * * usage via static method , both normal and fully qualified * / <nl> + { <nl> + int [ ] x = { } ; <nl> + Arrays . sort ( x ) ; <nl> + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; <nl> + File [ ] files = listRoots ( ) ; <nl> + } <nl> + <nl> + / * * usage of inner class as type * / <nl> + private JToolBar . Separator mSep = null ; <nl> + <nl> + / * * usage of inner class in Constructor * / <nl> + private Object mUse5 = new Object ( ) ; <nl> + <nl> + / * * usage of inner class in constructor , fully qualified * / <nl> + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; <nl> + <nl> + / * * we use class name as member ' s name . <nl> + * also an inline JavaDoc - only import { @ link Vector linkText } * / <nl> + private int Component ; <nl> + <nl> + / * * <nl> + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } <nl> + * / <nl> + public void Label ( ) { } <nl> + <nl> + / * * <nl> + * Renders to a { @ linkplain Graphics2D graphics context } . <nl> + * @ throws HeadlessException if no graphis environment can be found . <nl> + * @ exception HeadlessException if no graphis environment can be found . <nl> + * / <nl> + public void render ( ) { } <nl> + <nl> + / * * <nl> + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . <nl> + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . <nl> + * <nl> + * @ param param1 with a link { @ link TestClass6 } <nl> + * @ throws TestClass7 when broken <nl> + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } <nl> + * / <nl> + public void aMethodWithManyLinks ( ) { } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java 
 index 66818f2 . . ca2677e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java 
 @ @ - 33 , 47 + 33 , 56 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 
 / * * 
 * < p > 
 - * This class is used to verify that the { @ link Override Override } 
 - * annotation is present when the inheritDoc javadoc tag is present . 
 + * Verifies that the & # 64 ; Override annotation is present 
 + * when the & # 64 ; inheritDoc javadoc tag is present . 
 * < / p > 
 - * 
 * < p > 
 - * Rationale : The { @ link Override Override } annotation helps 
 + * Rationale : The & # 64 ; Override annotation helps 
 * compiler tools ensure that an override is actually occurring . It is 
 * quite easy to accidentally overload a method or hide a static method 
 - * and using the { @ link Override Override } annotation points 
 - * out these problems . 
 + * and using the & # 64 ; Override annotation points out these problems . 
 * < / p > 
 - * 
 * < p > 
 - * This check will log a violation if using the inheritDoc tag on a method that 
 + * This check will log a violation if using the & # 64 ; inheritDoc tag on a method that 
 * is not valid ( ex : private , or static method ) . 
 * < / p > 
 - * 
 * < p > 
 - * There is a slight difference between the Override annotation in Java 5 versus 
 + * There is a slight difference between the & # 64 ; Override annotation in Java 5 versus 
 * Java 6 and above . In Java 5 , any method overridden from an interface cannot 
 - * be annotated with Override . In Java 6 this behavior is allowed . 
 + * be annotated with & # 64 ; Override . In Java 6 this behavior is allowed . 
 * < / p > 
 - * 
 * < p > 
 * As a result of the aforementioned difference between Java 5 and Java 6 , a 
 - * property called { @ code javaFiveCompatibility } is available . This 
 + * property called { @ code javaFiveCompatibility } is available . This 
 * property will only check classes , interfaces , etc . that do not contain the 
 * extends or implements keyword or are not anonymous classes . This means it 
 - * only checks methods overridden from { @ code java . lang . Object } 
 - * 
 + * only checks methods overridden from { @ code java . lang . Object } . 
 * < b > Java 5 Compatibility mode severely limits this check . It is recommended to 
 - * only use it on Java 5 source < / b > 
 + * only use it on Java 5 source . < / b > 
 + * < / p > 
 + * < ul > 
 + * < li > 
 + * Property { @ code javaFiveCompatibility } - Enable java 5 compatibility mode . 
 + * Default value is { @ code false } . 
 + * < / li > 
 + * < / ul > 
 + * < p > 
 + * To configure the check : 
 * < / p > 
 - * 
 * < pre > 
 - * & lt ; module name = & quot ; MissingOverride & quot ; & gt ; 
 - * & lt ; property name = & quot ; javaFiveCompatibility & quot ; 
 - * value = & quot ; true & quot ; / & gt ; 
 + * & lt ; module name = & quot ; MissingOverride & quot ; / & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check for the { @ code javaFiveCompatibility } mode : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = " MissingOverride " & gt ; 
 + * & lt ; property name = " javaFiveCompatibility " 
 + * value = " true " / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 * 
 + * @ since 5 . 0 
 * / 
 @ StatelessCheck 
 public final class MissingOverrideCheck extends AbstractCheck { 
 @ @ - 102 , 25 + 111 , 12 @ @ public final class MissingOverrideCheck extends AbstractCheck { 
 CommonUtil . createPattern ( " \ \ { \ \ s * @ ( inheritDoc ) \ \ s * \ \ } " ) ; 
 
 / * * 
 - * Java 5 compatibility option . 
 - * @ see # setJavaFiveCompatibility ( boolean ) 
 + * Enable java 5 compatibility mode . 
 * / 
 private boolean javaFiveCompatibility ; 
 
 / * * 
 - * Sets Java 5 compatibility mode . 
 - * 
 - * < p > 
 - * In Java 5 , this check could flag code that is not valid for the Override 
 - * annotation even though it is a proper override . See the class 
 - * documentation for more information . 
 - * < / p > 
 - * 
 - * < p > 
 - * Set this to true to turn on Java 5 compatibility mode . Set this to 
 - * false to turn off Java 5 compatibility mode . 
 - * < / p > 
 - * 
 + * Setter to enable java 5 compatibility mode . 
 * @ param compatibility compatibility or not 
 * / 
 public void setJavaFiveCompatibility ( final boolean compatibility ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 88453a3 . . 63b64d2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 87 , 6 + 87 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " MethodName " , 
 " MethodTypeParameterName " , 
 " MissingDeprecated " , 
 + " MissingOverride " , 
 " PackageName " , 
 " ParameterName " , 
 " StaticVariableName " , 
 diff - - git a / src / xdocs / config _ annotation . xml b / src / xdocs / config _ annotation . xml 
 index e9be909 . . de2ce32 100644 
 - - - a / src / xdocs / config _ annotation . xml 
 + + + b / src / xdocs / config _ annotation . xml 
 @ @ - 626 , 10 + 626 , 37 @ @ public static final int COUNTER = 10 ; / / violation as javadoc exists 
 < / section > 
 
 < section name = " MissingOverride " > 
 + < p > Since Checkstyle 5 . 0 < / p > 
 < subsection name = " Description " id = " MissingOverride _ Description " > 
 - < p > Since Checkstyle 5 . 0 < / p > 
 - < p > Verifies that the java . lang . Override annotation is present 
 - when the { @ inheritDoc } javadoc tag is present . < / p > 
 + < p > 
 + Verifies that the @ Override annotation is present 
 + when the @ inheritDoc javadoc tag is present . 
 + < / p > 
 + < p > 
 + Rationale : The @ Override annotation helps 
 + compiler tools ensure that an override is actually occurring . It is 
 + quite easy to accidentally overload a method or hide a static method 
 + and using the @ Override annotation points out these problems . 
 + < / p > 
 + < p > 
 + This check will log a violation if using the @ inheritDoc tag on a method that 
 + is not valid ( ex : private , or static method ) . 
 + < / p > 
 + < p > 
 + There is a slight difference between the @ Override annotation in Java 5 versus 
 + Java 6 and above . In Java 5 , any method overridden from an interface cannot 
 + be annotated with @ Override . In Java 6 this behavior is allowed . 
 + < / p > 
 + < p > 
 + As a result of the aforementioned difference between Java 5 and Java 6 , a 
 + property called < code > javaFiveCompatibility < / code > is available . This 
 + property will only check classes , interfaces , etc . that do not contain the 
 + extends or implements keyword or are not anonymous classes . This means it 
 + only checks methods overridden from < code > java . lang . Object < / code > . 
 + < b > Java 5 Compatibility mode severely limits this check . It is recommended to 
 + only use it on Java 5 source . < / b > 
 + < / p > 
 + 
 < / subsection > 
 < subsection name = " Properties " id = " MissingOverride _ Properties " > 
 < table > 
 @ @ - 643 , 13 + 670 , 7 @ @ public static final int COUNTER = 10 ; / / violation as javadoc exists 
 < tr > 
 < td > javaFiveCompatibility < / td > 
 < td > 
 - When this property is true this check will only check 
 - classes , interfaces , etc . that do not contain the extends 
 - or implements keyword or are not anonymous classes . This 
 - means it only checks methods overridden from 
 - < code > java . lang . Object < / code > 
 - < b > Java 5 Compatibility mode severely limits this 
 - check . It is recommended to only use it on Java 5 source < / b > 
 + Enable java 5 compatibility mode . 
 < / td > 
 < td > 
 < a href = " property _ types . html # boolean " > Boolean < / a >

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java 
 index 8a36c87 . . 9ea54a0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java 
 @ @ - 34 , 12 + 34 , 12 @ @ public class RedundantImportCheckTest 
 createCheckConfig ( RedundantImportCheck . class ) ; 
 final String [ ] expected = { 
 " 7 : 1 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . * . " , 
 - " 8 : 38 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . GlobalProperties . " , 
 + " 8 : 1 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . InputImportBug . " , 
 " 10 : 1 : Redundant import from the java . lang package - java . lang . * . " , 
 " 11 : 1 : Redundant import from the java . lang package - java . lang . String . " , 
 " 14 : 1 : Duplicate import to line 13 - java . util . List . " , 
 " 26 : 1 : Duplicate import to line 25 - javax . swing . WindowConstants . * . " , 
 } ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator + " InputRedundantImportCheck . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java 
 new file mode 100644 
 index 0000000 . . 49cdf5a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java 
 @ @ - 0 , 0 + 1 , 111 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . imports ; 
 + 
 + import com . puppycrawl . tools . checkstyle . imports . * ; 
 + import com . puppycrawl . tools . checkstyle . imports . InputImportBug ; 
 + import java . io . * ; 
 + import java . lang . * ; 
 + import java . lang . String ; 
 + 
 + import java . util . List ; 
 + import java . util . List ; 
 + import java . util . Iterator ; 
 + import java . util . Enumeration ; 
 + import java . util . Arrays ; 
 + 
 + import javax . swing . JToolBar ; 
 + import javax . swing . JToggleButton ; 
 + import javax . swing . ScrollPaneLayout ; 
 + import javax . swing . BorderFactory ; 
 + import static java . io . File . listRoots ; 
 + 
 + import static javax . swing . WindowConstants . * ; 
 + import static javax . swing . WindowConstants . * ; 
 + import static java . io . File . createTempFile ; 
 + import static java . io . File . pathSeparator ; 
 + 
 + import java . awt . Component ; 
 + import java . awt . Graphics2D ; 
 + import java . awt . HeadlessException ; 
 + import java . awt . Label ; 
 + import java . util . Date ; 
 + import java . util . Calendar ; 
 + import java . util . BitSet ; 
 + 
 + import com . puppycrawl . tools . checkstyle . Checker ; 
 + import com . puppycrawl . tools . checkstyle . CheckerTest ; 
 + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . Defn ; 
 + import com . puppycrawl . tools . checkstyle . Input15Extensions ; 
 + import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; 
 + import com . puppycrawl . tools . checkstyle . CheckStyleTask ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 + 
 + / * * 
 + * Test case for imports 
 + * Here ' s an import used only by javadoc : { @ link Date } . 
 + * @ author Oliver Burn 
 + * @ author lkuehne 
 + * @ author Michael Studman 
 + * @ see Calendar Should avoid unused import for Calendar 
 + * * / 
 + class InputRedundantImportCheck 
 + { 
 + / * * ignore * * / 
 + private Class mUse1 = null ; 
 + / * * ignore * * / 
 + private Class mUse2 = java . io . File . class ; 
 + / * * ignore * * / 
 + private Class mUse3 = Iterator [ ] . class ; 
 + / * * ignore * * / 
 + private Class mUse4 = java . util . Enumeration [ ] . class ; 
 + / * * usage of illegal import * * / 
 + private String ftpClient = null ; 
 + 
 + / * * usage via static method , both normal and fully qualified * / 
 + { 
 + int [ ] x = { } ; 
 + Arrays . sort ( x ) ; 
 + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; 
 + File [ ] files = listRoots ( ) ; 
 + } 
 + 
 + / * * usage of inner class as type * / 
 + private JToolBar . Separator mSep = null ; 
 + 
 + / * * usage of inner class in Constructor * / 
 + private Object mUse5 = new Object ( ) ; 
 + 
 + / * * usage of inner class in constructor , fully qualified * / 
 + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; 
 + 
 + / * * we use class name as member ' s name . 
 + * also an inline JavaDoc - only import { @ link Vector linkText } * / 
 + private int Component ; 
 + 
 + / * * 
 + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } 
 + * / 
 + public void Label ( ) { } 
 + 
 + / * * 
 + * Renders to a { @ linkplain Graphics2D graphics context } . 
 + * @ throws HeadlessException if no graphis environment can be found . 
 + * @ exception HeadlessException if no graphis environment can be found . 
 + * / 
 + public void render ( ) { } 
 + 
 + / * * 
 + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . 
 + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . 
 + * 
 + * @ param param1 with a link { @ link TestClass6 } 
 + * @ throws TestClass7 when broken 
 + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } 
 + * / 
 + public void aMethodWithManyLinks ( ) { } 
 + } 
 \ No newline at end of file
