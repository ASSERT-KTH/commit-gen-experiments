BLEU SCORE: 0.029083177105737566

TEST MSG: Pull # 4209 : Adding IDEA project files to gitignore and excluding them from checkstyle list
GENERATED MSG: adding IDEs configurations to . gitignore

TEST DIFF (one line): diff - - git a / . gitignore b / . gitignore <nl> index ad6ac99 . . 3c64248 100644 <nl> - - - a / . gitignore <nl> + + + b / . gitignore <nl> @ @ - 20 , 6 + 20 , 8 @ @ bin <nl> <nl> # IDEA project files <nl> checkstyle . iml <nl> + checkstyle . ipr <nl> + checkstyle . iws <nl> . idea <nl> <nl> # Temp files <nl> diff - - git a / pom . xml b / pom . xml <nl> index 679e6fd . . cee03bf 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 530 , 6 + 530 , 8 @ @ <nl> bin / * * / * , <nl> < ! - - IDEA project files - - > <nl> * . iml , <nl> + * . ipr , <nl> + * . iws , <nl> . idea / * * / * , <nl> < ! - - Temp files - - > <nl> * ~ ,
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java <nl> index e969762 . . 10bbf26 100755 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java <nl> @ @ - 23 , 11 + 23 , 11 @ @ import com . google . common . collect . Sets ; <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import java . util . HashSet ; <nl> import java . util . LinkedList ; <nl> + import java . util . Set ; <nl> <nl> / * * <nl> - * Abstract class for chekcs which need to collect information about <nl> + * Abstract class for checks which need to collect information about <nl> * declared members / parameters / variables . <nl> * <nl> * @ author o _ sukhodolsky <nl> @ @ - 46 , 11 + 46 , 29 @ @ public abstract class DeclarationCollector extends Check <nl> @ Override <nl> public void visitToken ( DetailAST aAST ) <nl> { <nl> + final LexicalFrame frame = this . mFrames . current ( ) ; <nl> switch ( aAST . getType ( ) ) { <nl> - case TokenTypes . PARAMETER _ DEF : <nl> - case TokenTypes . VARIABLE _ DEF : { <nl> + case TokenTypes . VARIABLE _ DEF : { <nl> + final String name = <nl> + aAST . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + if ( frame instanceof ClassFrame ) { <nl> + final DetailAST mods = <nl> + aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { <nl> + ( ( ClassFrame ) frame ) . addStaticMember ( name ) ; <nl> + } <nl> + else { <nl> + ( ( ClassFrame ) frame ) . addInstanceMember ( name ) ; <nl> + } <nl> + } <nl> + else { <nl> + frame . addName ( name ) ; <nl> + } <nl> + break ; <nl> + } <nl> + case TokenTypes . PARAMETER _ DEF : { <nl> final DetailAST nameAST = aAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> - this . mFrames . current ( ) . addName ( nameAST . getText ( ) ) ; <nl> + frame . addName ( nameAST . getText ( ) ) ; <nl> break ; <nl> } <nl> case TokenTypes . CLASS _ DEF : <nl> @ @ - 58 , 14 + 76 , 26 @ @ public abstract class DeclarationCollector extends Check <nl> case TokenTypes . ENUM _ DEF : <nl> case TokenTypes . ANNOTATION _ DEF : { <nl> final DetailAST nameAST = aAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> - this . mFrames . current ( ) . addName ( nameAST . getText ( ) ) ; <nl> + frame . addName ( nameAST . getText ( ) ) ; <nl> this . mFrames . enter ( new ClassFrame ( ) ) ; <nl> break ; <nl> } <nl> case TokenTypes . SLIST : <nl> this . mFrames . enter ( new BlockFrame ( ) ) ; <nl> break ; <nl> - case TokenTypes . METHOD _ DEF : <nl> + case TokenTypes . METHOD _ DEF : { <nl> + final String name = aAST . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + if ( frame instanceof ClassFrame ) { <nl> + final DetailAST mods = <nl> + aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { <nl> + ( ( ClassFrame ) frame ) . addStaticMember ( name ) ; <nl> + } <nl> + else { <nl> + ( ( ClassFrame ) frame ) . addInstanceMember ( name ) ; <nl> + } <nl> + } <nl> + } <nl> case TokenTypes . CTOR _ DEF : <nl> this . mFrames . enter ( new MethodFrame ( ) ) ; <nl> break ; <nl> @ @ - 94 , 24 + 124 , 15 @ @ public abstract class DeclarationCollector extends Check <nl> } <nl> <nl> / * * <nl> - * Check if given name is a name for declafred variable / parameter / member in <nl> - * current environment . <nl> - * @ param aName a name to check <nl> - * @ return true is the given name is declare one . <nl> - * / <nl> - protected final boolean isDeclared ( String aName ) <nl> - { <nl> - return ( null ! = mFrames . findFrame ( aName ) ) ; <nl> - } <nl> - <nl> - / * * <nl> * Check if given name is a name for class field in current environment . <nl> * @ param aName a name to check <nl> * @ return true is the given name is name of method or member . <nl> * / <nl> protected final boolean isClassField ( String aName ) <nl> { <nl> - return ( mFrames . findFrame ( aName ) instanceof ClassFrame ) ; <nl> + final LexicalFrame frame = mFrames . findFrame ( aName ) ; <nl> + return ( frame instanceof ClassFrame ) <nl> + & & ( ( ClassFrame ) frame ) . hasInstanceMember ( aName ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 122 , 9 + 143 , 9 @ @ public abstract class DeclarationCollector extends Check <nl> private abstract static class LexicalFrame <nl> { <nl> / * * Set of name of variables declared in this frame . * / <nl> - private final HashSet < String > mVarNames ; <nl> + private final Set < String > mVarNames ; <nl> <nl> - / * * constructor - - invocable only via super ( ) from subclasses * / <nl> + / * * constructor - - invokable only via super ( ) from subclasses * / <nl> protected LexicalFrame ( ) <nl> { <nl> mVarNames = Sets . newHashSet ( ) ; <nl> @ @ - 172 , 6 + 193 , 57 @ @ public abstract class DeclarationCollector extends Check <nl> * / <nl> private static class ClassFrame extends LexicalFrame <nl> { <nl> + / * * Set of name of instance members declared in this frame . * / <nl> + private final Set < String > mInstanceMembers ; <nl> + / * * Set of name of variables declared in this frame . * / <nl> + private final Set < String > mStaticMembers ; <nl> + <nl> + / * * <nl> + * Creates new instance of ClassFrame <nl> + * / <nl> + public ClassFrame ( ) <nl> + { <nl> + super ( ) ; <nl> + mInstanceMembers = Sets . newHashSet ( ) ; <nl> + mStaticMembers = Sets . newHashSet ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds static member ' s name . <nl> + * @ param aName a name of static member of the class <nl> + * / <nl> + public void addStaticMember ( final String aName ) <nl> + { <nl> + mStaticMembers . add ( aName ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds instance member ' s name . <nl> + * @ param aName a name of instance member of the class <nl> + * / <nl> + public void addInstanceMember ( final String aName ) <nl> + { <nl> + mInstanceMembers . add ( aName ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if a given name is a known instance member of the class . <nl> + * @ param aName a name to check <nl> + * @ return true is the given name is a name of a known <nl> + * instance member of the class <nl> + * / <nl> + public boolean hasInstanceMember ( final String aName ) <nl> + { <nl> + return mInstanceMembers . contains ( aName ) ; <nl> + } <nl> + <nl> + @ Override <nl> + boolean contains ( String aNameToFind ) <nl> + { <nl> + return super . contains ( aNameToFind ) <nl> + | | mInstanceMembers . contains ( aNameToFind ) <nl> + | | mStaticMembers . contains ( aNameToFind ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index 59e65fb . . 4f3f843 100755 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 69 , 7 + 69 , 7 @ @ public class RequireThisCheck extends DeclarationCollector <nl> mCheckFields = aCheckFields ; <nl> } <nl> / * * <nl> - * @ return true if we should check fields usage false overwise . <nl> + * @ return true if we should check fields usage false otherwise . <nl> * / <nl> public boolean getCheckFields ( ) <nl> { <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class RequireThisCheck extends DeclarationCollector <nl> mCheckMethods = aCheckMethods ; <nl> } <nl> / * * <nl> - * @ return true if we should check methods usage false overwise . <nl> + * @ return true if we should check methods usage false otherwise . <nl> * / <nl> public boolean getCheckMethods ( ) <nl> { <nl> @ @ - 148 , 7 + 148 , 7 @ @ public class RequireThisCheck extends DeclarationCollector <nl> <nl> / / let ' s check method calls <nl> if ( parentType = = TokenTypes . METHOD _ CALL ) { <nl> - if ( mCheckMethods ) { <nl> + if ( mCheckMethods & & isClassField ( aAST . getText ( ) ) ) { <nl> log ( aAST , " require . this . method " , aAST . getText ( ) ) ; <nl> } <nl> return ; <nl> @ @ - 161 , 7 + 161 , 7 @ @ public class RequireThisCheck extends DeclarationCollector <nl> } <nl> <nl> if ( ScopeUtils . getSurroundingScope ( aAST ) = = null ) { <nl> - / / it is not a class or inteface it ' s <nl> + / / it is not a class or interface it ' s <nl> / / either import or package <nl> / / we shouldn ' t checks this <nl> return ; <nl> diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java <nl> index 88115f8 . . ff53e7c 100755 <nl> - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java <nl> + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java <nl> @ @ - 1 , 3 + 1 , 5 @ @ <nl> + package com . puppycrawl . tools . checkstyle . coding ; <nl> + <nl> import java . awt . Toolkit ; <nl> <nl> public class InputRequireThis { <nl> @ @ - 69 , 4 + 71 , 19 @ @ class Bug2123003 { <nl> @ interface Rock { <nl> String [ ] band ( ) default " Metallica " ; <nl> } <nl> + } <nl> + <nl> + class Bug1155921 { <nl> + private static int CONST = 1 ; <nl> + private static int static _ method ( ) { <nl> + return 1 ; <nl> + } <nl> + <nl> + private int method1 ( ) { <nl> + return CONST ; <nl> + } <nl> + <nl> + private int method2 ( ) { <nl> + return static _ method ( ) ; <nl> + } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index b846ead . . 9dfd4aa 100755 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 31 , 10 + 31 , 10 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( RequireThisCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 6 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , <nl> - " 12 : 9 : Method call to ' method1 ' needs \ " this . \ " . " , <nl> - " 26 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , <nl> - " 51 : 9 : Reference to instance variable ' z ' needs \ " this . \ " . " , <nl> + " 8 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , <nl> + " 14 : 9 : Method call to ' method1 ' needs \ " this . \ " . " , <nl> + " 28 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , <nl> + " 53 : 9 : Reference to instance variable ' z ' needs \ " this . \ " . " , <nl> / / " 13 : 9 : Unable find where ' j ' is declared . " , <nl> } ; <nl> verify ( checkConfig , <nl> @ @ - 49 , 7 + 49 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport <nl> createCheckConfig ( RequireThisCheck . class ) ; <nl> checkConfig . addAttribute ( " checkFields " , " false " ) ; <nl> final String [ ] expected = { <nl> - " 12 : 9 : Method call to ' method1 ' needs \ " this . \ " . " , <nl> + " 14 : 9 : Method call to ' method1 ' needs \ " this . \ " . " , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " coding " + File . separator + " InputRequireThis . java " ) , <nl> @ @ - 63 , 9 + 63 , 9 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport <nl> createCheckConfig ( RequireThisCheck . class ) ; <nl> checkConfig . addAttribute ( " checkMethods " , " false " ) ; <nl> final String [ ] expected = { <nl> - " 6 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , <nl> - " 26 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , <nl> - " 51 : 9 : Reference to instance variable ' z ' needs \ " this . \ " . " , <nl> + " 8 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , <nl> + " 28 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , <nl> + " 53 : 9 : Reference to instance variable ' z ' needs \ " this . \ " . " , <nl> / / " 13 : 9 : Unable find where ' j ' is declared . " , <nl> } ; <nl> verify ( checkConfig ,

TEST DIFF:
diff - - git a / . gitignore b / . gitignore 
 index ad6ac99 . . 3c64248 100644 
 - - - a / . gitignore 
 + + + b / . gitignore 
 @ @ - 20 , 6 + 20 , 8 @ @ bin 
 
 # IDEA project files 
 checkstyle . iml 
 + checkstyle . ipr 
 + checkstyle . iws 
 . idea 
 
 # Temp files 
 diff - - git a / pom . xml b / pom . xml 
 index 679e6fd . . cee03bf 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 530 , 6 + 530 , 8 @ @ 
 bin / * * / * , 
 < ! - - IDEA project files - - > 
 * . iml , 
 + * . ipr , 
 + * . iws , 
 . idea / * * / * , 
 < ! - - Temp files - - > 
 * ~ ,

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java 
 index e969762 . . 10bbf26 100755 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java 
 @ @ - 23 , 11 + 23 , 11 @ @ import com . google . common . collect . Sets ; 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import java . util . HashSet ; 
 import java . util . LinkedList ; 
 + import java . util . Set ; 
 
 / * * 
 - * Abstract class for chekcs which need to collect information about 
 + * Abstract class for checks which need to collect information about 
 * declared members / parameters / variables . 
 * 
 * @ author o _ sukhodolsky 
 @ @ - 46 , 11 + 46 , 29 @ @ public abstract class DeclarationCollector extends Check 
 @ Override 
 public void visitToken ( DetailAST aAST ) 
 { 
 + final LexicalFrame frame = this . mFrames . current ( ) ; 
 switch ( aAST . getType ( ) ) { 
 - case TokenTypes . PARAMETER _ DEF : 
 - case TokenTypes . VARIABLE _ DEF : { 
 + case TokenTypes . VARIABLE _ DEF : { 
 + final String name = 
 + aAST . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + if ( frame instanceof ClassFrame ) { 
 + final DetailAST mods = 
 + aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { 
 + ( ( ClassFrame ) frame ) . addStaticMember ( name ) ; 
 + } 
 + else { 
 + ( ( ClassFrame ) frame ) . addInstanceMember ( name ) ; 
 + } 
 + } 
 + else { 
 + frame . addName ( name ) ; 
 + } 
 + break ; 
 + } 
 + case TokenTypes . PARAMETER _ DEF : { 
 final DetailAST nameAST = aAST . findFirstToken ( TokenTypes . IDENT ) ; 
 - this . mFrames . current ( ) . addName ( nameAST . getText ( ) ) ; 
 + frame . addName ( nameAST . getText ( ) ) ; 
 break ; 
 } 
 case TokenTypes . CLASS _ DEF : 
 @ @ - 58 , 14 + 76 , 26 @ @ public abstract class DeclarationCollector extends Check 
 case TokenTypes . ENUM _ DEF : 
 case TokenTypes . ANNOTATION _ DEF : { 
 final DetailAST nameAST = aAST . findFirstToken ( TokenTypes . IDENT ) ; 
 - this . mFrames . current ( ) . addName ( nameAST . getText ( ) ) ; 
 + frame . addName ( nameAST . getText ( ) ) ; 
 this . mFrames . enter ( new ClassFrame ( ) ) ; 
 break ; 
 } 
 case TokenTypes . SLIST : 
 this . mFrames . enter ( new BlockFrame ( ) ) ; 
 break ; 
 - case TokenTypes . METHOD _ DEF : 
 + case TokenTypes . METHOD _ DEF : { 
 + final String name = aAST . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + if ( frame instanceof ClassFrame ) { 
 + final DetailAST mods = 
 + aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { 
 + ( ( ClassFrame ) frame ) . addStaticMember ( name ) ; 
 + } 
 + else { 
 + ( ( ClassFrame ) frame ) . addInstanceMember ( name ) ; 
 + } 
 + } 
 + } 
 case TokenTypes . CTOR _ DEF : 
 this . mFrames . enter ( new MethodFrame ( ) ) ; 
 break ; 
 @ @ - 94 , 24 + 124 , 15 @ @ public abstract class DeclarationCollector extends Check 
 } 
 
 / * * 
 - * Check if given name is a name for declafred variable / parameter / member in 
 - * current environment . 
 - * @ param aName a name to check 
 - * @ return true is the given name is declare one . 
 - * / 
 - protected final boolean isDeclared ( String aName ) 
 - { 
 - return ( null ! = mFrames . findFrame ( aName ) ) ; 
 - } 
 - 
 - / * * 
 * Check if given name is a name for class field in current environment . 
 * @ param aName a name to check 
 * @ return true is the given name is name of method or member . 
 * / 
 protected final boolean isClassField ( String aName ) 
 { 
 - return ( mFrames . findFrame ( aName ) instanceof ClassFrame ) ; 
 + final LexicalFrame frame = mFrames . findFrame ( aName ) ; 
 + return ( frame instanceof ClassFrame ) 
 + & & ( ( ClassFrame ) frame ) . hasInstanceMember ( aName ) ; 
 } 
 
 / * * 
 @ @ - 122 , 9 + 143 , 9 @ @ public abstract class DeclarationCollector extends Check 
 private abstract static class LexicalFrame 
 { 
 / * * Set of name of variables declared in this frame . * / 
 - private final HashSet < String > mVarNames ; 
 + private final Set < String > mVarNames ; 
 
 - / * * constructor - - invocable only via super ( ) from subclasses * / 
 + / * * constructor - - invokable only via super ( ) from subclasses * / 
 protected LexicalFrame ( ) 
 { 
 mVarNames = Sets . newHashSet ( ) ; 
 @ @ - 172 , 6 + 193 , 57 @ @ public abstract class DeclarationCollector extends Check 
 * / 
 private static class ClassFrame extends LexicalFrame 
 { 
 + / * * Set of name of instance members declared in this frame . * / 
 + private final Set < String > mInstanceMembers ; 
 + / * * Set of name of variables declared in this frame . * / 
 + private final Set < String > mStaticMembers ; 
 + 
 + / * * 
 + * Creates new instance of ClassFrame 
 + * / 
 + public ClassFrame ( ) 
 + { 
 + super ( ) ; 
 + mInstanceMembers = Sets . newHashSet ( ) ; 
 + mStaticMembers = Sets . newHashSet ( ) ; 
 + } 
 + 
 + / * * 
 + * Adds static member ' s name . 
 + * @ param aName a name of static member of the class 
 + * / 
 + public void addStaticMember ( final String aName ) 
 + { 
 + mStaticMembers . add ( aName ) ; 
 + } 
 + 
 + / * * 
 + * Adds instance member ' s name . 
 + * @ param aName a name of instance member of the class 
 + * / 
 + public void addInstanceMember ( final String aName ) 
 + { 
 + mInstanceMembers . add ( aName ) ; 
 + } 
 + 
 + / * * 
 + * Checks if a given name is a known instance member of the class . 
 + * @ param aName a name to check 
 + * @ return true is the given name is a name of a known 
 + * instance member of the class 
 + * / 
 + public boolean hasInstanceMember ( final String aName ) 
 + { 
 + return mInstanceMembers . contains ( aName ) ; 
 + } 
 + 
 + @ Override 
 + boolean contains ( String aNameToFind ) 
 + { 
 + return super . contains ( aNameToFind ) 
 + | | mInstanceMembers . contains ( aNameToFind ) 
 + | | mStaticMembers . contains ( aNameToFind ) ; 
 + } 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index 59e65fb . . 4f3f843 100755 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 69 , 7 + 69 , 7 @ @ public class RequireThisCheck extends DeclarationCollector 
 mCheckFields = aCheckFields ; 
 } 
 / * * 
 - * @ return true if we should check fields usage false overwise . 
 + * @ return true if we should check fields usage false otherwise . 
 * / 
 public boolean getCheckFields ( ) 
 { 
 @ @ - 85 , 7 + 85 , 7 @ @ public class RequireThisCheck extends DeclarationCollector 
 mCheckMethods = aCheckMethods ; 
 } 
 / * * 
 - * @ return true if we should check methods usage false overwise . 
 + * @ return true if we should check methods usage false otherwise . 
 * / 
 public boolean getCheckMethods ( ) 
 { 
 @ @ - 148 , 7 + 148 , 7 @ @ public class RequireThisCheck extends DeclarationCollector 
 
 / / let ' s check method calls 
 if ( parentType = = TokenTypes . METHOD _ CALL ) { 
 - if ( mCheckMethods ) { 
 + if ( mCheckMethods & & isClassField ( aAST . getText ( ) ) ) { 
 log ( aAST , " require . this . method " , aAST . getText ( ) ) ; 
 } 
 return ; 
 @ @ - 161 , 7 + 161 , 7 @ @ public class RequireThisCheck extends DeclarationCollector 
 } 
 
 if ( ScopeUtils . getSurroundingScope ( aAST ) = = null ) { 
 - / / it is not a class or inteface it ' s 
 + / / it is not a class or interface it ' s 
 / / either import or package 
 / / we shouldn ' t checks this 
 return ; 
 diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java 
 index 88115f8 . . ff53e7c 100755 
 - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java 
 + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputRequireThis . java 
 @ @ - 1 , 3 + 1 , 5 @ @ 
 + package com . puppycrawl . tools . checkstyle . coding ; 
 + 
 import java . awt . Toolkit ; 
 
 public class InputRequireThis { 
 @ @ - 69 , 4 + 71 , 19 @ @ class Bug2123003 { 
 @ interface Rock { 
 String [ ] band ( ) default " Metallica " ; 
 } 
 + } 
 + 
 + class Bug1155921 { 
 + private static int CONST = 1 ; 
 + private static int static _ method ( ) { 
 + return 1 ; 
 + } 
 + 
 + private int method1 ( ) { 
 + return CONST ; 
 + } 
 + 
 + private int method2 ( ) { 
 + return static _ method ( ) ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index b846ead . . 9dfd4aa 100755 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 31 , 10 + 31 , 10 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( RequireThisCheck . class ) ; 
 final String [ ] expected = { 
 - " 6 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , 
 - " 12 : 9 : Method call to ' method1 ' needs \ " this . \ " . " , 
 - " 26 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , 
 - " 51 : 9 : Reference to instance variable ' z ' needs \ " this . \ " . " , 
 + " 8 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , 
 + " 14 : 9 : Method call to ' method1 ' needs \ " this . \ " . " , 
 + " 28 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , 
 + " 53 : 9 : Reference to instance variable ' z ' needs \ " this . \ " . " , 
 / / " 13 : 9 : Unable find where ' j ' is declared . " , 
 } ; 
 verify ( checkConfig , 
 @ @ - 49 , 7 + 49 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport 
 createCheckConfig ( RequireThisCheck . class ) ; 
 checkConfig . addAttribute ( " checkFields " , " false " ) ; 
 final String [ ] expected = { 
 - " 12 : 9 : Method call to ' method1 ' needs \ " this . \ " . " , 
 + " 14 : 9 : Method call to ' method1 ' needs \ " this . \ " . " , 
 } ; 
 verify ( checkConfig , 
 getPath ( " coding " + File . separator + " InputRequireThis . java " ) , 
 @ @ - 63 , 9 + 63 , 9 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport 
 createCheckConfig ( RequireThisCheck . class ) ; 
 checkConfig . addAttribute ( " checkMethods " , " false " ) ; 
 final String [ ] expected = { 
 - " 6 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , 
 - " 26 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , 
 - " 51 : 9 : Reference to instance variable ' z ' needs \ " this . \ " . " , 
 + " 8 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , 
 + " 28 : 9 : Reference to instance variable ' i ' needs \ " this . \ " . " , 
 + " 53 : 9 : Reference to instance variable ' z ' needs \ " this . \ " . " , 
 / / " 13 : 9 : Unable find where ' j ' is declared . " , 
 } ; 
 verify ( checkConfig ,
