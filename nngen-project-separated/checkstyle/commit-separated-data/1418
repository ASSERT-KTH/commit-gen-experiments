BLEU SCORE: 0.02383853510228548

TEST MSG: minor : renaming indentation methods to more natural name
GENERATED MSG: Fix PMD violations from AvoidFieldNameMatchingMethodName rule . # 984

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java <nl> index 8ff5397 . . 55bdd55 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java <nl> @ @ - 276 , 13 + 276 , 13 @ @ public abstract class AbstractExpressionHandler { <nl> protected final void checkLinesIndent ( int startLine , int endLine , <nl> IndentLevel indentLevel ) { <nl> / / check first line <nl> - checkSingleLine ( startLine , indentLevel ) ; <nl> + checkLineIndent ( startLine , indentLevel ) ; <nl> <nl> / / check following lines <nl> final IndentLevel offsetLevel = <nl> new IndentLevel ( indentLevel , getBasicOffset ( ) ) ; <nl> for ( int i = startLine + 1 ; i < = endLine ; i + + ) { <nl> - checkSingleLine ( i , offsetLevel ) ; <nl> + checkLineIndent ( i , offsetLevel ) ; <nl> } <nl> } <nl> <nl> @ @ - 311 , 7 + 311 , 7 @ @ public abstract class AbstractExpressionHandler { <nl> getLineStart ( indentCheck . getLine ( startLine - 1 ) ) ; <nl> <nl> if ( realStartCol = = startCol ) { <nl> - checkSingleLine ( startLine , startCol , indentLevel , <nl> + checkLineIndent ( startLine , startCol , indentLevel , <nl> firstLineMatches ) ; <nl> } <nl> <nl> @ @ - 335 , 7 + 335 , 7 @ @ public abstract class AbstractExpressionHandler { <nl> / / checked by a child expression ) <nl> <nl> if ( col ! = null ) { <nl> - checkSingleLine ( i , col , theLevel , false ) ; <nl> + checkLineIndent ( i , col , theLevel , false ) ; <nl> } <nl> } <nl> } <nl> @ @ - 346 , 7 + 346 , 7 @ @ public abstract class AbstractExpressionHandler { <nl> * @ param lineNum the line number to check <nl> * @ param indentLevel the required indent level <nl> * / <nl> - private void checkSingleLine ( int lineNum , IndentLevel indentLevel ) { <nl> + private void checkLineIndent ( int lineNum , IndentLevel indentLevel ) { <nl> final String line = indentCheck . getLine ( lineNum - 1 ) ; <nl> final int start = getLineStart ( line ) ; <nl> if ( indentLevel . isGreaterThan ( start ) ) { <nl> @ @ - 363 , 7 + 363 , 7 @ @ public abstract class AbstractExpressionHandler { <nl> * @ param mustMatch whether or not the indentation level must match <nl> * / <nl> <nl> - private void checkSingleLine ( int lineNum , int colNum , <nl> + private void checkLineIndent ( int lineNum , int colNum , <nl> IndentLevel indentLevel , boolean mustMatch ) { <nl> final String line = indentCheck . getLine ( lineNum - 1 ) ; <nl> final int start = getLineStart ( line ) ;
NEAREST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 722542b . . aa5170a 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 165 , 11 + 165 , 15 @ @ <nl> < exclude name = " AbstractNaming " / > <nl> < ! - - till # 984 - - > <nl> < exclude name = " AvoidFieldNameMatchingMethodName " / > <nl> - < ! - - nothing bad in long and descriptive variable names if only they fit line - - > <nl> - < exclude name = " LongVariable " / > <nl> < ! - - till # 985 - - > <nl> < exclude name = " ShortVariable " / > <nl> < / rule > <nl> + < rule ref = " rulesets / java / naming . xml / LongVariable " > <nl> + < properties > <nl> + < ! - - nothing bad in long and descriptive variable names if only they fit line , but still keep it reasonable - - > <nl> + < property name = " minimum " value = " 45 " / > <nl> + < / properties > <nl> + < / rule > <nl> < rule ref = " rulesets / java / naming . xml / ShortClassName " > <nl> < properties > <nl> < ! - - Main is good name for class containing main method , Tag as inner class name is also fine - - >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java 
 index 8ff5397 . . 55bdd55 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java 
 @ @ - 276 , 13 + 276 , 13 @ @ public abstract class AbstractExpressionHandler { 
 protected final void checkLinesIndent ( int startLine , int endLine , 
 IndentLevel indentLevel ) { 
 / / check first line 
 - checkSingleLine ( startLine , indentLevel ) ; 
 + checkLineIndent ( startLine , indentLevel ) ; 
 
 / / check following lines 
 final IndentLevel offsetLevel = 
 new IndentLevel ( indentLevel , getBasicOffset ( ) ) ; 
 for ( int i = startLine + 1 ; i < = endLine ; i + + ) { 
 - checkSingleLine ( i , offsetLevel ) ; 
 + checkLineIndent ( i , offsetLevel ) ; 
 } 
 } 
 
 @ @ - 311 , 7 + 311 , 7 @ @ public abstract class AbstractExpressionHandler { 
 getLineStart ( indentCheck . getLine ( startLine - 1 ) ) ; 
 
 if ( realStartCol = = startCol ) { 
 - checkSingleLine ( startLine , startCol , indentLevel , 
 + checkLineIndent ( startLine , startCol , indentLevel , 
 firstLineMatches ) ; 
 } 
 
 @ @ - 335 , 7 + 335 , 7 @ @ public abstract class AbstractExpressionHandler { 
 / / checked by a child expression ) 
 
 if ( col ! = null ) { 
 - checkSingleLine ( i , col , theLevel , false ) ; 
 + checkLineIndent ( i , col , theLevel , false ) ; 
 } 
 } 
 } 
 @ @ - 346 , 7 + 346 , 7 @ @ public abstract class AbstractExpressionHandler { 
 * @ param lineNum the line number to check 
 * @ param indentLevel the required indent level 
 * / 
 - private void checkSingleLine ( int lineNum , IndentLevel indentLevel ) { 
 + private void checkLineIndent ( int lineNum , IndentLevel indentLevel ) { 
 final String line = indentCheck . getLine ( lineNum - 1 ) ; 
 final int start = getLineStart ( line ) ; 
 if ( indentLevel . isGreaterThan ( start ) ) { 
 @ @ - 363 , 7 + 363 , 7 @ @ public abstract class AbstractExpressionHandler { 
 * @ param mustMatch whether or not the indentation level must match 
 * / 
 
 - private void checkSingleLine ( int lineNum , int colNum , 
 + private void checkLineIndent ( int lineNum , int colNum , 
 IndentLevel indentLevel , boolean mustMatch ) { 
 final String line = indentCheck . getLine ( lineNum - 1 ) ; 
 final int start = getLineStart ( line ) ;

NEAREST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 722542b . . aa5170a 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 165 , 11 + 165 , 15 @ @ 
 < exclude name = " AbstractNaming " / > 
 < ! - - till # 984 - - > 
 < exclude name = " AvoidFieldNameMatchingMethodName " / > 
 - < ! - - nothing bad in long and descriptive variable names if only they fit line - - > 
 - < exclude name = " LongVariable " / > 
 < ! - - till # 985 - - > 
 < exclude name = " ShortVariable " / > 
 < / rule > 
 + < rule ref = " rulesets / java / naming . xml / LongVariable " > 
 + < properties > 
 + < ! - - nothing bad in long and descriptive variable names if only they fit line , but still keep it reasonable - - > 
 + < property name = " minimum " value = " 45 " / > 
 + < / properties > 
 + < / rule > 
 < rule ref = " rulesets / java / naming . xml / ShortClassName " > 
 < properties > 
 < ! - - Main is good name for class containing main method , Tag as inner class name is also fine - - >
