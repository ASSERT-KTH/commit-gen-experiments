BLEU SCORE: 0.11156508007421491

TEST MSG: version bump
GENERATED MSG: 6 . 10 - SNAPSHOT

TEST DIFF (one line): diff - - git a / . travis . yml b / . travis . yml <nl> index d09aeb2 . . cc3597a 100644 <nl> - - - a / . travis . yml <nl> + + + b / . travis . yml <nl> @ @ - 62 , 7 + 62 , 7 @ @ matrix : <nl> env : <nl> - DESC = " NoErrorTest - Orekit " <nl> - CMD1 = " git clone https : / / github . com / checkstyle / Orekit . git & & cd Orekit " <nl> - - CMD2 = " & & sed - i ' s / < orekit \ . checkstyle \ . version > 6 \ . 6 < / < orekit . checkstyle . version > 6 . 12 - SNAPSHOT < / ' pom . xml " <nl> + - CMD2 = " & & sed - i ' s / < orekit \ . checkstyle \ . version > 6 \ . 6 < / < orekit . checkstyle . version > 6 . 13 - SNAPSHOT < / ' pom . xml " <nl> - CMD3 = " & & cd . . & & mvn clean install - Passembly - DskipTests - DskipITs - Dcobertura . skip = true " <nl> - CMD4 = " - Dpmd . skip = true - Dfindbugs . skip = true - Dcheckstyle . ant . skip = true " <nl> - CMD5 = " & & cd Orekit & & mvn compile checkstyle : check "
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index da38728 . . dd0015f 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1095 , 7 + 1095 , 6 @ @ <nl> < regex > < pattern > . * . checks . SuppressWarningsHolder < / pattern > < branchRate > 75 < / branchRate > < lineRate > 93 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . TrailingCommentCheck < / pattern > < branchRate > 90 < / branchRate > < lineRate > 93 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . TranslationCheck < / pattern > < branchRate > 81 < / branchRate > < lineRate > 83 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . checks . UncommentedMainCheck < / pattern > < branchRate > 83 < / branchRate > < lineRate > 88 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . UniquePropertiesCheck \ $ . * < / pattern > < branchRate > 75 < / branchRate > < lineRate > 90 < / lineRate > < / regex > <nl> <nl> < regex > < pattern > . * . checks . coding . AbstractSuperCheck < / pattern > < branchRate > 78 < / branchRate > < lineRate > 89 < / lineRate > < / regex > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> index 852af0f . . b5390d4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> @ @ - 115 , 6 + 115 , 7 @ @ public class UncommentedMainCheck <nl> <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> + <nl> switch ( ast . getType ( ) ) { <nl> case TokenTypes . PACKAGE _ DEF : <nl> visitPackageDef ( ast ) ; <nl> @ @ - 235 , 13 + 236 , 8 @ @ public class UncommentedMainCheck <nl> <nl> final DetailAST arrayType = arrayDecl . getFirstChild ( ) ; <nl> <nl> - if ( arrayType . getType ( ) = = TokenTypes . IDENT <nl> - | | arrayType . getType ( ) = = TokenTypes . DOT ) { <nl> - final FullIdent type = FullIdent . createFullIdent ( arrayType ) ; <nl> - return " String " . equals ( type . getText ( ) ) <nl> - | | " java . lang . String " . equals ( type . getText ( ) ) ; <nl> - } <nl> - <nl> - return false ; <nl> + final FullIdent type = FullIdent . createFullIdent ( arrayType ) ; <nl> + return " String " . equals ( type . getText ( ) ) <nl> + | | " java . lang . String " . equals ( type . getText ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> index 419ed9d . . 0a971a1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> @ @ - 21 , 10 + 21 , 15 @ @ package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . UncommentedMainCheck . MSG _ KEY ; <nl> <nl> + import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> + import antlr . CommonHiddenStreamToken ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class UncommentedMainCheckTest <nl> extends BaseCheckTestSupport { <nl> @ @ - 53 , 4 + 58 , 52 @ @ public class UncommentedMainCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputUncommentedMain . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testTokens ( ) throws Exception { <nl> + UncommentedMainCheck check = new UncommentedMainCheck ( ) ; <nl> + Assert . assertNotNull ( check . getRequiredTokens ( ) ) ; <nl> + Assert . assertNotNull ( check . getAcceptableTokens ( ) ) ; <nl> + Assert . assertArrayEquals ( check . getDefaultTokens ( ) , check . getAcceptableTokens ( ) ) ; <nl> + Assert . assertArrayEquals ( check . getDefaultTokens ( ) , check . getRequiredTokens ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDeepDepth ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( UncommentedMainCheck . class ) ; <nl> + final String [ ] expected = { <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputUncommentedMain2 . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testWrongName ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( UncommentedMainCheck . class ) ; <nl> + final String [ ] expected = { <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputUncommentedMain3 . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testWrongArrayType ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( UncommentedMainCheck . class ) ; <nl> + final String [ ] expected = { <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputUncommentedMain4 . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIllegalStateException ( ) throws Exception { <nl> + UncommentedMainCheck check = new UncommentedMainCheck ( ) ; <nl> + DetailAST ast = new DetailAST ( ) ; <nl> + ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . CTOR _ DEF , " ctor " ) ) ; <nl> + try { <nl> + check . visitToken ( ast ) ; <nl> + Assert . fail ( ) ; <nl> + } <nl> + catch ( IllegalStateException ex ) { <nl> + ast . toString ( ) . equals ( ex . getMessage ( ) ) ; <nl> + } <nl> + <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain2 . java <nl> new file mode 100644 <nl> index 0000000 . . dff167c <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain2 . java <nl> @ @ - 0 , 0 + 1 , 41 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2003 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + <nl> + public class InputUncommentedMain2 <nl> + { <nl> + private class PC { <nl> + <nl> + / / uncommented main with depth 2 <nl> + public void main ( String [ ] args ) <nl> + { <nl> + System . out . println ( " InputUncommentedMain . main ( ) " ) ; <nl> + } <nl> + <nl> + / / lets go deeper <nl> + private class PC2 { <nl> + <nl> + / / uncommented main with depth 3 <nl> + public void main ( String [ ] args ) <nl> + { <nl> + System . out . println ( " InputUncommentedMain . main ( ) " ) ; <nl> + } <nl> + <nl> + <nl> + } <nl> + } <nl> + <nl> + public static void main ( String [ ] args ) <nl> + { <nl> + System . out . println ( " InputUncommentedMain . main ( ) " ) ; <nl> + } <nl> + <nl> + } <nl> + <nl> + interface IF { <nl> + <nl> + void main ( String [ ] args ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain3 . java <nl> new file mode 100644 <nl> index 0000000 . . f7b4773 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain3 . java <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2003 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + class oneMoreClass { <nl> + <nl> + public static void anyWrongMethodName ( String [ ] args ) <nl> + { <nl> + System . out . println ( " InputUncommentedMain . main ( ) " ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain4 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain4 . java <nl> new file mode 100644 <nl> index 0000000 . . 49764c0 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain4 . java <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2003 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + class InputUncommentedMainTest4 <nl> + { <nl> + / / one more uncommented main <nl> + public static void main ( int [ ] args ) <nl> + { <nl> + System . out . println ( " test1 . main ( ) " ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / . travis . yml b / . travis . yml 
 index d09aeb2 . . cc3597a 100644 
 - - - a / . travis . yml 
 + + + b / . travis . yml 
 @ @ - 62 , 7 + 62 , 7 @ @ matrix : 
 env : 
 - DESC = " NoErrorTest - Orekit " 
 - CMD1 = " git clone https : / / github . com / checkstyle / Orekit . git & & cd Orekit " 
 - - CMD2 = " & & sed - i ' s / < orekit \ . checkstyle \ . version > 6 \ . 6 < / < orekit . checkstyle . version > 6 . 12 - SNAPSHOT < / ' pom . xml " 
 + - CMD2 = " & & sed - i ' s / < orekit \ . checkstyle \ . version > 6 \ . 6 < / < orekit . checkstyle . version > 6 . 13 - SNAPSHOT < / ' pom . xml " 
 - CMD3 = " & & cd . . & & mvn clean install - Passembly - DskipTests - DskipITs - Dcobertura . skip = true " 
 - CMD4 = " - Dpmd . skip = true - Dfindbugs . skip = true - Dcheckstyle . ant . skip = true " 
 - CMD5 = " & & cd Orekit & & mvn compile checkstyle : check "

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index da38728 . . dd0015f 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1095 , 7 + 1095 , 6 @ @ 
 < regex > < pattern > . * . checks . SuppressWarningsHolder < / pattern > < branchRate > 75 < / branchRate > < lineRate > 93 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . TrailingCommentCheck < / pattern > < branchRate > 90 < / branchRate > < lineRate > 93 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . TranslationCheck < / pattern > < branchRate > 81 < / branchRate > < lineRate > 83 < / lineRate > < / regex > 
 - < regex > < pattern > . * . checks . UncommentedMainCheck < / pattern > < branchRate > 83 < / branchRate > < lineRate > 88 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . UniquePropertiesCheck \ $ . * < / pattern > < branchRate > 75 < / branchRate > < lineRate > 90 < / lineRate > < / regex > 
 
 < regex > < pattern > . * . checks . coding . AbstractSuperCheck < / pattern > < branchRate > 78 < / branchRate > < lineRate > 89 < / lineRate > < / regex > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 index 852af0f . . b5390d4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 @ @ - 115 , 6 + 115 , 7 @ @ public class UncommentedMainCheck 
 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 + 
 switch ( ast . getType ( ) ) { 
 case TokenTypes . PACKAGE _ DEF : 
 visitPackageDef ( ast ) ; 
 @ @ - 235 , 13 + 236 , 8 @ @ public class UncommentedMainCheck 
 
 final DetailAST arrayType = arrayDecl . getFirstChild ( ) ; 
 
 - if ( arrayType . getType ( ) = = TokenTypes . IDENT 
 - | | arrayType . getType ( ) = = TokenTypes . DOT ) { 
 - final FullIdent type = FullIdent . createFullIdent ( arrayType ) ; 
 - return " String " . equals ( type . getText ( ) ) 
 - | | " java . lang . String " . equals ( type . getText ( ) ) ; 
 - } 
 - 
 - return false ; 
 + final FullIdent type = FullIdent . createFullIdent ( arrayType ) ; 
 + return " String " . equals ( type . getText ( ) ) 
 + | | " java . lang . String " . equals ( type . getText ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 index 419ed9d . . 0a971a1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 @ @ - 21 , 10 + 21 , 15 @ @ package com . puppycrawl . tools . checkstyle . checks ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . UncommentedMainCheck . MSG _ KEY ; 
 
 + import org . junit . Assert ; 
 import org . junit . Test ; 
 
 + import antlr . CommonHiddenStreamToken ; 
 + 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class UncommentedMainCheckTest 
 extends BaseCheckTestSupport { 
 @ @ - 53 , 4 + 58 , 52 @ @ public class UncommentedMainCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputUncommentedMain . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testTokens ( ) throws Exception { 
 + UncommentedMainCheck check = new UncommentedMainCheck ( ) ; 
 + Assert . assertNotNull ( check . getRequiredTokens ( ) ) ; 
 + Assert . assertNotNull ( check . getAcceptableTokens ( ) ) ; 
 + Assert . assertArrayEquals ( check . getDefaultTokens ( ) , check . getAcceptableTokens ( ) ) ; 
 + Assert . assertArrayEquals ( check . getDefaultTokens ( ) , check . getRequiredTokens ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testDeepDepth ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( UncommentedMainCheck . class ) ; 
 + final String [ ] expected = { 
 + } ; 
 + verify ( checkConfig , getPath ( " InputUncommentedMain2 . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testWrongName ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( UncommentedMainCheck . class ) ; 
 + final String [ ] expected = { 
 + } ; 
 + verify ( checkConfig , getPath ( " InputUncommentedMain3 . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testWrongArrayType ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( UncommentedMainCheck . class ) ; 
 + final String [ ] expected = { 
 + } ; 
 + verify ( checkConfig , getPath ( " InputUncommentedMain4 . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testIllegalStateException ( ) throws Exception { 
 + UncommentedMainCheck check = new UncommentedMainCheck ( ) ; 
 + DetailAST ast = new DetailAST ( ) ; 
 + ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . CTOR _ DEF , " ctor " ) ) ; 
 + try { 
 + check . visitToken ( ast ) ; 
 + Assert . fail ( ) ; 
 + } 
 + catch ( IllegalStateException ex ) { 
 + ast . toString ( ) . equals ( ex . getMessage ( ) ) ; 
 + } 
 + 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain2 . java 
 new file mode 100644 
 index 0000000 . . dff167c 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain2 . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2003 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + 
 + public class InputUncommentedMain2 
 + { 
 + private class PC { 
 + 
 + / / uncommented main with depth 2 
 + public void main ( String [ ] args ) 
 + { 
 + System . out . println ( " InputUncommentedMain . main ( ) " ) ; 
 + } 
 + 
 + / / lets go deeper 
 + private class PC2 { 
 + 
 + / / uncommented main with depth 3 
 + public void main ( String [ ] args ) 
 + { 
 + System . out . println ( " InputUncommentedMain . main ( ) " ) ; 
 + } 
 + 
 + 
 + } 
 + } 
 + 
 + public static void main ( String [ ] args ) 
 + { 
 + System . out . println ( " InputUncommentedMain . main ( ) " ) ; 
 + } 
 + 
 + } 
 + 
 + interface IF { 
 + 
 + void main ( String [ ] args ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain3 . java 
 new file mode 100644 
 index 0000000 . . f7b4773 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain3 . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2003 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + class oneMoreClass { 
 + 
 + public static void anyWrongMethodName ( String [ ] args ) 
 + { 
 + System . out . println ( " InputUncommentedMain . main ( ) " ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain4 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain4 . java 
 new file mode 100644 
 index 0000000 . . 49764c0 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputUncommentedMain4 . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2003 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + class InputUncommentedMainTest4 
 + { 
 + / / one more uncommented main 
 + public static void main ( int [ ] args ) 
 + { 
 + System . out . println ( " test1 . main ( ) " ) ; 
 + } 
 + }
