BLEU SCORE: 0.0254507234234606

TEST MSG: Issue # 6586 : aligned javadoc / xdoc for IllegalThrows
GENERATED MSG: Added option to Illegal Throws Check due to twitter custom checks , issue # 430

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> index e723eea . . 9987428 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> @ @ - 34 , 21 + 34 , 58 @ @ import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; <nl> <nl> / * * <nl> * < p > <nl> - * Throwing java . lang . Error or java . lang . RuntimeException <nl> - * is almost never acceptable . <nl> + * This check can be used to ensure that types are not declared to be thrown . <nl> + * Declaring that a method throws { @ code java . lang . Error } or <nl> + * { @ code java . lang . RuntimeException } is almost never acceptable . <nl> * < / p > <nl> - * Check has following properties : <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code illegalClassNames } - Specify throw class names to reject . <nl> + * Default value is { @ code java . lang . Throwable , RuntimeException , Error , Throwable , <nl> + * java . lang . Error , java . lang . RuntimeException } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code ignoredMethodNames } - Specify names of methods to ignore . <nl> + * Default value is { @ code finalize } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code ignoreOverriddenMethods } - allow to ignore checking overridden methods <nl> + * ( marked with { @ code Override } or { @ code java . lang . Override } annotation ) . <nl> + * Default value is { @ code true } . <nl> + * < / li > <nl> + * < / ul > <nl> * < p > <nl> - * < b > illegalClassNames < / b > - throw class names to reject . <nl> + * To configure the check : <nl> * < / p > <nl> + * < pre > <nl> + * & lt ; module name = " IllegalThrows " / & gt ; <nl> + * < / pre > <nl> * < p > <nl> - * < b > ignoredMethodNames < / b > - names of methods to ignore . <nl> + * To configure the check rejecting throws NullPointerException from methods : <nl> * < / p > <nl> + * < pre > <nl> + * & lt ; module name = " IllegalThrows " & gt ; <nl> + * & lt ; property name = " illegalClassNames " value = " NullPointerException " / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> * < p > <nl> - * < b > ignoreOverriddenMethods < / b > - ignore checking overridden methods ( marked with Override <nl> - * or java . lang . Override annotation ) default value is < b > true < / b > . <nl> + * To configure the check ignoring method named " foo ( ) " : <nl> * < / p > <nl> + * < pre > <nl> + * & lt ; module name = " IllegalThrows " & gt ; <nl> + * & lt ; property name = " ignoredMethodNames " value = " foo " / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check to warn on overridden methods : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; IllegalThrows & quot ; & gt ; <nl> + * & lt ; property name = & quot ; ignoreOverriddenMethods & quot ; value = & quot ; false & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> * <nl> + * @ since 4 . 0 <nl> * / <nl> @ StatelessCheck <nl> public final class IllegalThrowsCheck extends AbstractCheck { <nl> @ @ - 59 , 21 + 96 , 24 @ @ public final class IllegalThrowsCheck extends AbstractCheck { <nl> * / <nl> public static final String MSG _ KEY = " illegal . throw " ; <nl> <nl> - / * * Methods which should be ignored . * / <nl> + / * * Specify names of methods to ignore . * / <nl> private final Set < String > ignoredMethodNames = <nl> Arrays . stream ( new String [ ] { " finalize " , } ) . collect ( Collectors . toSet ( ) ) ; <nl> <nl> - / * * Illegal class names . * / <nl> + / * * Specify throw class names to reject . * / <nl> private final Set < String > illegalClassNames = Arrays . stream ( <nl> new String [ ] { " Error " , " RuntimeException " , " Throwable " , " java . lang . Error " , <nl> " java . lang . RuntimeException " , " java . lang . Throwable " , } ) <nl> . collect ( Collectors . toSet ( ) ) ; <nl> <nl> - / * * Property for ignoring overridden methods . * / <nl> + / * * <nl> + * Allow to ignore checking overridden methods ( marked with { @ code Override } <nl> + * or { @ code java . lang . Override } annotation ) . <nl> + * / <nl> private boolean ignoreOverriddenMethods = true ; <nl> <nl> / * * <nl> - * Set the list of illegal classes . <nl> + * Setter to specify throw class names to reject . <nl> * <nl> * @ param classNames <nl> * array of illegal exception classes <nl> @ @ - 139 , 7 + 179 , 7 @ @ public final class IllegalThrowsCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Set the list of ignore method names . <nl> + * Setter to specify names of methods to ignore . <nl> * @ param methodNames array of ignored method names <nl> * / <nl> public void setIgnoredMethodNames ( String . . . methodNames ) { <nl> @ @ - 148 , 7 + 188 , 8 @ @ public final class IllegalThrowsCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Sets < b > ignoreOverriddenMethods < / b > property value . <nl> + * Setter to allow to ignore checking overridden methods <nl> + * ( marked with { @ code Override } or { @ code java . lang . Override } annotation ) . <nl> * @ param ignoreOverriddenMethods Check ' s property . <nl> * / <nl> public void setIgnoreOverriddenMethods ( boolean ignoreOverriddenMethods ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index abb1013 . . e2d5c16 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 93 , 6 + 93 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " FallThrough " , <nl> " FinalLocalVariable " , <nl> " IllegalInstantiation " , <nl> + " IllegalThrows " , <nl> " IllegalTokenText " , <nl> " ImportOrder " , <nl> " InnerAssignment " , <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 3eca76d . . 5a8b53d 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 1747 , 12 + 1747 , 12 @ @ class SomeClass <nl> < / section > <nl> <nl> < section name = " IllegalThrows " > <nl> + < p > Since Checkstyle 4 . 0 < / p > <nl> < subsection name = " Description " id = " IllegalThrows _ Description " > <nl> - < p > Since Checkstyle 4 . 0 < / p > <nl> < p > <nl> This check can be used to ensure that types are not declared <nl> - to be thrown . Declaring that a method throws java . lang . Error or <nl> - java . lang . RuntimeException is almost never acceptable . <nl> + to be thrown . Declaring that a method throws < code > java . lang . Error < / code > or <nl> + < code > java . lang . RuntimeException < / code > is almost never acceptable . <nl> < / p > <nl> < / subsection > <nl> <nl> @ @ - 1767 , 7 + 1767 , 7 @ @ class SomeClass <nl> < / tr > <nl> < tr > <nl> < td > illegalClassNames < / td > <nl> - < td > throw class names to reject < / td > <nl> + < td > Specify throw class names to reject . < / td > <nl> < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > <nl> < td > <nl> < code > java . lang . Throwable , RuntimeException , Error , Throwable , java . lang . Error , <nl> @ @ - 1777 , 15 + 1777 , 17 @ @ class SomeClass <nl> < / tr > <nl> < tr > <nl> < td > ignoredMethodNames < / td > <nl> - < td > names of methods to ignore < / td > <nl> + < td > Specify names of methods to ignore . < / td > <nl> < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > <nl> < td > < code > finalize < / code > < / td > <nl> < td > 5 . 4 < / td > <nl> < / tr > <nl> < tr > <nl> < td > ignoreOverriddenMethods < / td > <nl> - < td > ignore checking overridden methods ( marked with Override or java . lang . Override <nl> - annotation ) . < / td > <nl> + < td > <nl> + allow to ignore checking overridden methods ( marked with < code > Override < / code > <nl> + or < code > java . lang . Override < / code > annotation ) . <nl> + < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > < code > true < / code > < / td > <nl> < td > 6 . 4 < / td >
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java <nl> index 8a36c87 . . 9ea54a0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java <nl> @ @ - 34 , 12 + 34 , 12 @ @ public class RedundantImportCheckTest <nl> createCheckConfig ( RedundantImportCheck . class ) ; <nl> final String [ ] expected = { <nl> " 7 : 1 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . * . " , <nl> - " 8 : 38 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . GlobalProperties . " , <nl> + " 8 : 1 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . InputImportBug . " , <nl> " 10 : 1 : Redundant import from the java . lang package - java . lang . * . " , <nl> " 11 : 1 : Redundant import from the java . lang package - java . lang . String . " , <nl> " 14 : 1 : Duplicate import to line 13 - java . util . List . " , <nl> " 26 : 1 : Duplicate import to line 25 - javax . swing . WindowConstants . * . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator + " InputRedundantImportCheck . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 49cdf5a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java <nl> @ @ - 0 , 0 + 1 , 111 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . imports ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . imports . * ; <nl> + import com . puppycrawl . tools . checkstyle . imports . InputImportBug ; <nl> + import java . io . * ; <nl> + import java . lang . * ; <nl> + import java . lang . String ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . List ; <nl> + import java . util . Iterator ; <nl> + import java . util . Enumeration ; <nl> + import java . util . Arrays ; <nl> + <nl> + import javax . swing . JToolBar ; <nl> + import javax . swing . JToggleButton ; <nl> + import javax . swing . ScrollPaneLayout ; <nl> + import javax . swing . BorderFactory ; <nl> + import static java . io . File . listRoots ; <nl> + <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static java . io . File . createTempFile ; <nl> + import static java . io . File . pathSeparator ; <nl> + <nl> + import java . awt . Component ; <nl> + import java . awt . Graphics2D ; <nl> + import java . awt . HeadlessException ; <nl> + import java . awt . Label ; <nl> + import java . util . Date ; <nl> + import java . util . Calendar ; <nl> + import java . util . BitSet ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . Checker ; <nl> + import com . puppycrawl . tools . checkstyle . CheckerTest ; <nl> + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . Defn ; <nl> + import com . puppycrawl . tools . checkstyle . Input15Extensions ; <nl> + import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; <nl> + import com . puppycrawl . tools . checkstyle . CheckStyleTask ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> + <nl> + / * * <nl> + * Test case for imports <nl> + * Here ' s an import used only by javadoc : { @ link Date } . <nl> + * @ author Oliver Burn <nl> + * @ author lkuehne <nl> + * @ author Michael Studman <nl> + * @ see Calendar Should avoid unused import for Calendar <nl> + * * / <nl> + class InputRedundantImportCheck <nl> + { <nl> + / * * ignore * * / <nl> + private Class mUse1 = null ; <nl> + / * * ignore * * / <nl> + private Class mUse2 = java . io . File . class ; <nl> + / * * ignore * * / <nl> + private Class mUse3 = Iterator [ ] . class ; <nl> + / * * ignore * * / <nl> + private Class mUse4 = java . util . Enumeration [ ] . class ; <nl> + / * * usage of illegal import * * / <nl> + private String ftpClient = null ; <nl> + <nl> + / * * usage via static method , both normal and fully qualified * / <nl> + { <nl> + int [ ] x = { } ; <nl> + Arrays . sort ( x ) ; <nl> + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; <nl> + File [ ] files = listRoots ( ) ; <nl> + } <nl> + <nl> + / * * usage of inner class as type * / <nl> + private JToolBar . Separator mSep = null ; <nl> + <nl> + / * * usage of inner class in Constructor * / <nl> + private Object mUse5 = new Object ( ) ; <nl> + <nl> + / * * usage of inner class in constructor , fully qualified * / <nl> + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; <nl> + <nl> + / * * we use class name as member ' s name . <nl> + * also an inline JavaDoc - only import { @ link Vector linkText } * / <nl> + private int Component ; <nl> + <nl> + / * * <nl> + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } <nl> + * / <nl> + public void Label ( ) { } <nl> + <nl> + / * * <nl> + * Renders to a { @ linkplain Graphics2D graphics context } . <nl> + * @ throws HeadlessException if no graphis environment can be found . <nl> + * @ exception HeadlessException if no graphis environment can be found . <nl> + * / <nl> + public void render ( ) { } <nl> + <nl> + / * * <nl> + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . <nl> + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . <nl> + * <nl> + * @ param param1 with a link { @ link TestClass6 } <nl> + * @ throws TestClass7 when broken <nl> + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } <nl> + * / <nl> + public void aMethodWithManyLinks ( ) { } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 index e723eea . . 9987428 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 @ @ - 34 , 21 + 34 , 58 @ @ import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; 
 
 / * * 
 * < p > 
 - * Throwing java . lang . Error or java . lang . RuntimeException 
 - * is almost never acceptable . 
 + * This check can be used to ensure that types are not declared to be thrown . 
 + * Declaring that a method throws { @ code java . lang . Error } or 
 + * { @ code java . lang . RuntimeException } is almost never acceptable . 
 * < / p > 
 - * Check has following properties : 
 + * < ul > 
 + * < li > 
 + * Property { @ code illegalClassNames } - Specify throw class names to reject . 
 + * Default value is { @ code java . lang . Throwable , RuntimeException , Error , Throwable , 
 + * java . lang . Error , java . lang . RuntimeException } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code ignoredMethodNames } - Specify names of methods to ignore . 
 + * Default value is { @ code finalize } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code ignoreOverriddenMethods } - allow to ignore checking overridden methods 
 + * ( marked with { @ code Override } or { @ code java . lang . Override } annotation ) . 
 + * Default value is { @ code true } . 
 + * < / li > 
 + * < / ul > 
 * < p > 
 - * < b > illegalClassNames < / b > - throw class names to reject . 
 + * To configure the check : 
 * < / p > 
 + * < pre > 
 + * & lt ; module name = " IllegalThrows " / & gt ; 
 + * < / pre > 
 * < p > 
 - * < b > ignoredMethodNames < / b > - names of methods to ignore . 
 + * To configure the check rejecting throws NullPointerException from methods : 
 * < / p > 
 + * < pre > 
 + * & lt ; module name = " IllegalThrows " & gt ; 
 + * & lt ; property name = " illegalClassNames " value = " NullPointerException " / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 * < p > 
 - * < b > ignoreOverriddenMethods < / b > - ignore checking overridden methods ( marked with Override 
 - * or java . lang . Override annotation ) default value is < b > true < / b > . 
 + * To configure the check ignoring method named " foo ( ) " : 
 * < / p > 
 + * < pre > 
 + * & lt ; module name = " IllegalThrows " & gt ; 
 + * & lt ; property name = " ignoredMethodNames " value = " foo " / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check to warn on overridden methods : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; IllegalThrows & quot ; & gt ; 
 + * & lt ; property name = & quot ; ignoreOverriddenMethods & quot ; value = & quot ; false & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 * 
 + * @ since 4 . 0 
 * / 
 @ StatelessCheck 
 public final class IllegalThrowsCheck extends AbstractCheck { 
 @ @ - 59 , 21 + 96 , 24 @ @ public final class IllegalThrowsCheck extends AbstractCheck { 
 * / 
 public static final String MSG _ KEY = " illegal . throw " ; 
 
 - / * * Methods which should be ignored . * / 
 + / * * Specify names of methods to ignore . * / 
 private final Set < String > ignoredMethodNames = 
 Arrays . stream ( new String [ ] { " finalize " , } ) . collect ( Collectors . toSet ( ) ) ; 
 
 - / * * Illegal class names . * / 
 + / * * Specify throw class names to reject . * / 
 private final Set < String > illegalClassNames = Arrays . stream ( 
 new String [ ] { " Error " , " RuntimeException " , " Throwable " , " java . lang . Error " , 
 " java . lang . RuntimeException " , " java . lang . Throwable " , } ) 
 . collect ( Collectors . toSet ( ) ) ; 
 
 - / * * Property for ignoring overridden methods . * / 
 + / * * 
 + * Allow to ignore checking overridden methods ( marked with { @ code Override } 
 + * or { @ code java . lang . Override } annotation ) . 
 + * / 
 private boolean ignoreOverriddenMethods = true ; 
 
 / * * 
 - * Set the list of illegal classes . 
 + * Setter to specify throw class names to reject . 
 * 
 * @ param classNames 
 * array of illegal exception classes 
 @ @ - 139 , 7 + 179 , 7 @ @ public final class IllegalThrowsCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Set the list of ignore method names . 
 + * Setter to specify names of methods to ignore . 
 * @ param methodNames array of ignored method names 
 * / 
 public void setIgnoredMethodNames ( String . . . methodNames ) { 
 @ @ - 148 , 7 + 188 , 8 @ @ public final class IllegalThrowsCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Sets < b > ignoreOverriddenMethods < / b > property value . 
 + * Setter to allow to ignore checking overridden methods 
 + * ( marked with { @ code Override } or { @ code java . lang . Override } annotation ) . 
 * @ param ignoreOverriddenMethods Check ' s property . 
 * / 
 public void setIgnoreOverriddenMethods ( boolean ignoreOverriddenMethods ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index abb1013 . . e2d5c16 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 93 , 6 + 93 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " FallThrough " , 
 " FinalLocalVariable " , 
 " IllegalInstantiation " , 
 + " IllegalThrows " , 
 " IllegalTokenText " , 
 " ImportOrder " , 
 " InnerAssignment " , 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 3eca76d . . 5a8b53d 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 1747 , 12 + 1747 , 12 @ @ class SomeClass 
 < / section > 
 
 < section name = " IllegalThrows " > 
 + < p > Since Checkstyle 4 . 0 < / p > 
 < subsection name = " Description " id = " IllegalThrows _ Description " > 
 - < p > Since Checkstyle 4 . 0 < / p > 
 < p > 
 This check can be used to ensure that types are not declared 
 - to be thrown . Declaring that a method throws java . lang . Error or 
 - java . lang . RuntimeException is almost never acceptable . 
 + to be thrown . Declaring that a method throws < code > java . lang . Error < / code > or 
 + < code > java . lang . RuntimeException < / code > is almost never acceptable . 
 < / p > 
 < / subsection > 
 
 @ @ - 1767 , 7 + 1767 , 7 @ @ class SomeClass 
 < / tr > 
 < tr > 
 < td > illegalClassNames < / td > 
 - < td > throw class names to reject < / td > 
 + < td > Specify throw class names to reject . < / td > 
 < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > 
 < td > 
 < code > java . lang . Throwable , RuntimeException , Error , Throwable , java . lang . Error , 
 @ @ - 1777 , 15 + 1777 , 17 @ @ class SomeClass 
 < / tr > 
 < tr > 
 < td > ignoredMethodNames < / td > 
 - < td > names of methods to ignore < / td > 
 + < td > Specify names of methods to ignore . < / td > 
 < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > 
 < td > < code > finalize < / code > < / td > 
 < td > 5 . 4 < / td > 
 < / tr > 
 < tr > 
 < td > ignoreOverriddenMethods < / td > 
 - < td > ignore checking overridden methods ( marked with Override or java . lang . Override 
 - annotation ) . < / td > 
 + < td > 
 + allow to ignore checking overridden methods ( marked with < code > Override < / code > 
 + or < code > java . lang . Override < / code > annotation ) . 
 + < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > < code > true < / code > < / td > 
 < td > 6 . 4 < / td >

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java 
 index 8a36c87 . . 9ea54a0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java 
 @ @ - 34 , 12 + 34 , 12 @ @ public class RedundantImportCheckTest 
 createCheckConfig ( RedundantImportCheck . class ) ; 
 final String [ ] expected = { 
 " 7 : 1 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . * . " , 
 - " 8 : 38 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . GlobalProperties . " , 
 + " 8 : 1 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . InputImportBug . " , 
 " 10 : 1 : Redundant import from the java . lang package - java . lang . * . " , 
 " 11 : 1 : Redundant import from the java . lang package - java . lang . String . " , 
 " 14 : 1 : Duplicate import to line 13 - java . util . List . " , 
 " 26 : 1 : Duplicate import to line 25 - javax . swing . WindowConstants . * . " , 
 } ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator + " InputRedundantImportCheck . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java 
 new file mode 100644 
 index 0000000 . . 49cdf5a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java 
 @ @ - 0 , 0 + 1 , 111 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . imports ; 
 + 
 + import com . puppycrawl . tools . checkstyle . imports . * ; 
 + import com . puppycrawl . tools . checkstyle . imports . InputImportBug ; 
 + import java . io . * ; 
 + import java . lang . * ; 
 + import java . lang . String ; 
 + 
 + import java . util . List ; 
 + import java . util . List ; 
 + import java . util . Iterator ; 
 + import java . util . Enumeration ; 
 + import java . util . Arrays ; 
 + 
 + import javax . swing . JToolBar ; 
 + import javax . swing . JToggleButton ; 
 + import javax . swing . ScrollPaneLayout ; 
 + import javax . swing . BorderFactory ; 
 + import static java . io . File . listRoots ; 
 + 
 + import static javax . swing . WindowConstants . * ; 
 + import static javax . swing . WindowConstants . * ; 
 + import static java . io . File . createTempFile ; 
 + import static java . io . File . pathSeparator ; 
 + 
 + import java . awt . Component ; 
 + import java . awt . Graphics2D ; 
 + import java . awt . HeadlessException ; 
 + import java . awt . Label ; 
 + import java . util . Date ; 
 + import java . util . Calendar ; 
 + import java . util . BitSet ; 
 + 
 + import com . puppycrawl . tools . checkstyle . Checker ; 
 + import com . puppycrawl . tools . checkstyle . CheckerTest ; 
 + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . Defn ; 
 + import com . puppycrawl . tools . checkstyle . Input15Extensions ; 
 + import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; 
 + import com . puppycrawl . tools . checkstyle . CheckStyleTask ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 + 
 + / * * 
 + * Test case for imports 
 + * Here ' s an import used only by javadoc : { @ link Date } . 
 + * @ author Oliver Burn 
 + * @ author lkuehne 
 + * @ author Michael Studman 
 + * @ see Calendar Should avoid unused import for Calendar 
 + * * / 
 + class InputRedundantImportCheck 
 + { 
 + / * * ignore * * / 
 + private Class mUse1 = null ; 
 + / * * ignore * * / 
 + private Class mUse2 = java . io . File . class ; 
 + / * * ignore * * / 
 + private Class mUse3 = Iterator [ ] . class ; 
 + / * * ignore * * / 
 + private Class mUse4 = java . util . Enumeration [ ] . class ; 
 + / * * usage of illegal import * * / 
 + private String ftpClient = null ; 
 + 
 + / * * usage via static method , both normal and fully qualified * / 
 + { 
 + int [ ] x = { } ; 
 + Arrays . sort ( x ) ; 
 + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; 
 + File [ ] files = listRoots ( ) ; 
 + } 
 + 
 + / * * usage of inner class as type * / 
 + private JToolBar . Separator mSep = null ; 
 + 
 + / * * usage of inner class in Constructor * / 
 + private Object mUse5 = new Object ( ) ; 
 + 
 + / * * usage of inner class in constructor , fully qualified * / 
 + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; 
 + 
 + / * * we use class name as member ' s name . 
 + * also an inline JavaDoc - only import { @ link Vector linkText } * / 
 + private int Component ; 
 + 
 + / * * 
 + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } 
 + * / 
 + public void Label ( ) { } 
 + 
 + / * * 
 + * Renders to a { @ linkplain Graphics2D graphics context } . 
 + * @ throws HeadlessException if no graphis environment can be found . 
 + * @ exception HeadlessException if no graphis environment can be found . 
 + * / 
 + public void render ( ) { } 
 + 
 + / * * 
 + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . 
 + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . 
 + * 
 + * @ param param1 with a link { @ link TestClass6 } 
 + * @ throws TestClass7 when broken 
 + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } 
 + * / 
 + public void aMethodWithManyLinks ( ) { } 
 + } 
 \ No newline at end of file
