BLEU SCORE: 0.0114347838903095

TEST MSG: Issue # 5973 : SuppressWithNearbyCommentFilter : update document and examples on when it is appropriate to use
GENERATED MSG: remove old documentation .

TEST DIFF (one line): diff - - git a / src / xdocs / config _ filters . xml b / src / xdocs / config _ filters . xml <nl> index e0be31f . . 94c0b1e 100644 <nl> - - - a / src / xdocs / config _ filters . xml <nl> + + + b / src / xdocs / config _ filters . xml <nl> @ @ - 114 , 6 + 114 , 14 @ @ <nl> Note that the suppression comment should be put before the violation . You can use more <nl> than one suppression comment each on separate line . <nl> < / p > <nl> + < p > <nl> + Attention : This filter may only be specified within the TreeWalker module <nl> + ( < code > & lt ; module name = & quot ; TreeWalker & quot ; / & gt ; < / code > ) and only <nl> + applies to checks which are also defined within this module . <nl> + To filter non - TreeWalker checks like < code > RegexpSingleline < / code > , <nl> + a < a href = " config _ filters . html # SuppressWithPlainTextCommentFilter " > <nl> + SuppressWithPlainTextCommentFilter < / a > or similar filter must be used . <nl> + < / p > <nl> < / subsection > <nl> < subsection name = " Properties " id = " SuppressionCommentFilter _ Properties " > <nl> < table > <nl> @ @ - 1100 , 6 + 1108 , 14 @ @ public static void foo ( ) { <nl> single comments . This requires fewer lines to mark a region , and <nl> may be aesthetically preferable in some contexts . <nl> < / p > <nl> + < p > <nl> + Attention : This filter may only be specified within the TreeWalker module <nl> + ( < code > & lt ; module name = & quot ; TreeWalker & quot ; / & gt ; < / code > ) and only <nl> + applies to checks which are also defined within this module . <nl> + To filter non - TreeWalker checks like < code > RegexpSingleline < / code > , <nl> + a < a href = " config _ filters . html # SuppressWithPlainTextCommentFilter " > <nl> + SuppressWithPlainTextCommentFilter < / a > or similar filter must be used . <nl> + < / p > <nl> < / subsection > <nl> < subsection name = " Properties " id = " SuppressWithNearbyCommentFilter _ Properties " > <nl> < table >
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> index 5aac04f . . 0ca3404 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . header ; <nl> <nl> + import java . util . Arrays ; <nl> + <nl> import java . io . File ; <nl> import java . util . List ; <nl> <nl> @ @ - 33 , 30 + 35 , 6 @ @ import java . util . List ; <nl> public class RegexpHeaderCheck extends AbstractHeaderCheck <nl> { <nl> / * * <nl> - * A HeaderViolationMonitor that is used when running a Check , <nl> - * as a subcomponents of TreeWalker . <nl> - * / <nl> - private final class CheckViolationMonitor implements HeaderViolationMonitor <nl> - { <nl> - / * * { @ inheritDoc } * / <nl> - public void reportHeaderMismatch ( int aLineNo , String aHeaderLine ) <nl> - { <nl> - log ( aLineNo , " header . mismatch " , aHeaderLine ) ; <nl> - } <nl> - <nl> - / * * { @ inheritDoc } * / <nl> - public void reportHeaderMissing ( ) <nl> - { <nl> - log ( 1 , " header . missing " ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / * * A delegate for the actual checking functionality . * / <nl> - private RegexpHeaderChecker mRegexpHeaderChecker ; <nl> - <nl> - <nl> - / * * <nl> * Provides typesafe access to the subclass specific HeaderInfo . <nl> * <nl> * @ return the result of { @ link # createHeaderInfo ( ) } <nl> @ @ - 76 , 17 + 54 , 46 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck <nl> } <nl> <nl> @ Override <nl> - public void beginProcessing ( String aCharset ) <nl> - { <nl> - super . beginProcessing ( aCharset ) ; <nl> - mRegexpHeaderChecker = new RegexpHeaderChecker ( <nl> - getRegexpHeaderInfo ( ) , new CheckViolationMonitor ( ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> protected void processFiltered ( File aFile , List < String > aLines ) <nl> { <nl> - mRegexpHeaderChecker . checkLines ( aLines ) ; <nl> + final int headerSize = getRegexpHeaderInfo ( ) . getHeaderLines ( ) . size ( ) ; <nl> + final int fileSize = aLines . size ( ) ; <nl> + <nl> + if ( headerSize - getRegexpHeaderInfo ( ) . getMultLines ( ) . length > fileSize ) <nl> + { <nl> + log ( 1 , " header . missing " ) ; <nl> + } <nl> + else { <nl> + int headerLineNo = 0 ; <nl> + int i ; <nl> + for ( i = 0 ; ( headerLineNo < headerSize ) & & ( i < fileSize ) ; i + + ) { <nl> + final String line = aLines . get ( i ) ; <nl> + boolean isMatch = isMatch ( line , headerLineNo ) ; <nl> + while ( ! isMatch & & isMultiLine ( headerLineNo ) ) { <nl> + headerLineNo + + ; <nl> + isMatch = ( headerLineNo = = headerSize ) <nl> + | | isMatch ( line , headerLineNo ) ; <nl> + } <nl> + if ( ! isMatch ) { <nl> + log ( i + 1 , " header . mismatch " , getHeaderLines ( ) . get ( <nl> + headerLineNo ) ) ; <nl> + break ; / / stop checking <nl> + } <nl> + if ( ! isMultiLine ( headerLineNo ) ) { <nl> + headerLineNo + + ; <nl> + } <nl> + } <nl> + if ( i = = fileSize ) { <nl> + / / if file finished , but we have at least one non - multi - line <nl> + / / header isn ' t completed <nl> + for ( ; headerLineNo < headerSize ; headerLineNo + + ) { <nl> + if ( ! isMultiLine ( headerLineNo ) ) { <nl> + log ( 1 , " header . missing " ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> } <nl> <nl> @ Override <nl> @ @ - 94 , 4 + 101 , 26 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck <nl> { <nl> return new RegexpHeaderInfo ( ) ; <nl> } <nl> + <nl> + / * * <nl> + * Checks if a code line matches the required header line . <nl> + * @ param aLine the code line <nl> + * @ param aHeaderLineNo the header line number . <nl> + * @ return true if and only if the line matches the required header line . <nl> + * / <nl> + private boolean isMatch ( String aLine , int aHeaderLineNo ) <nl> + { <nl> + return getRegexpHeaderInfo ( ) . getHeaderRegexps ( ) . get ( aHeaderLineNo ) <nl> + . matcher ( aLine ) . find ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ param aLineNo a line number <nl> + * @ return if < code > aLineNo < / code > is one of the repeat header lines . <nl> + * / <nl> + private boolean isMultiLine ( int aLineNo ) <nl> + { <nl> + return ( Arrays . binarySearch ( getRegexpHeaderInfo ( ) . getMultLines ( ) , <nl> + aLineNo + 1 ) > = 0 ) ; <nl> + } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java <nl> deleted file mode 100644 <nl> index 3068beb . . 0000000 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java <nl> + + + / dev / null <nl> @ @ - 1 , 133 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2008 Oliver Burn <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . checks . header ; <nl> - <nl> - import java . util . List ; <nl> - <nl> - import java . util . Arrays ; <nl> - import java . util . regex . Pattern ; <nl> - <nl> - / * * <nl> - * Isolates the check functionality in RegexpHeaderCheck in an external class . <nl> - * This makes it easier to use the functionality both in a Java <nl> - * { @ link com . puppycrawl . tools . checkstyle . api . Check } and in <nl> - * a { @ link com . puppycrawl . tools . checkstyle . api . FileSetCheck } . <nl> - * <nl> - * @ author lk <nl> - * / <nl> - class RegexpHeaderChecker <nl> - { <nl> - / * * the lines of the header file . * / <nl> - private final List < String > mHeaderLines ; <nl> - <nl> - / * * the compiled regular expressions * / <nl> - private List < Pattern > mHeaderRegexps ; <nl> - <nl> - / * * the header lines to repeat ( 0 or more ) in the check , sorted . * / <nl> - private int [ ] mMultiLines ; <nl> - <nl> - / * * A monitor for the violations that are detected . * / <nl> - private final HeaderViolationMonitor mViolationObserver ; <nl> - <nl> - / * * <nl> - * Creates a new instance . <nl> - * <nl> - * @ param aRegexpHeaderInfo check parameters <nl> - * @ param aViolationObserver error reporting strategy object <nl> - * / <nl> - RegexpHeaderChecker ( <nl> - RegexpHeaderInfo aRegexpHeaderInfo , <nl> - HeaderViolationMonitor aViolationObserver ) <nl> - { <nl> - mHeaderLines = aRegexpHeaderInfo . getHeaderLines ( ) ; <nl> - mHeaderRegexps = aRegexpHeaderInfo . geHeaderRegexps ( ) ; <nl> - mMultiLines = aRegexpHeaderInfo . getMultLines ( ) ; <nl> - mViolationObserver = aViolationObserver ; <nl> - } <nl> - <nl> - / * * <nl> - * Checks the lines of an individual file against the <nl> - * { @ link # getHeaderLines ( ) header lines } . <nl> - * <nl> - * @ param aLines the lines of an individual file <nl> - * / <nl> - void checkLines ( final List < String > aLines ) <nl> - { <nl> - final int headerSize = mHeaderLines . size ( ) ; <nl> - final int fileSize = aLines . size ( ) ; <nl> - <nl> - if ( headerSize - mMultiLines . length > fileSize ) { <nl> - mViolationObserver . reportHeaderMissing ( ) ; <nl> - } <nl> - else { <nl> - int headerLineNo = 0 ; <nl> - int i ; <nl> - for ( i = 0 ; ( headerLineNo < headerSize ) & & ( i < fileSize ) ; i + + ) { <nl> - final String line = aLines . get ( i ) ; <nl> - boolean isMatch = isMatch ( line , headerLineNo ) ; <nl> - while ( ! isMatch & & isMultiLine ( headerLineNo ) ) { <nl> - headerLineNo + + ; <nl> - isMatch = ( headerLineNo = = headerSize ) <nl> - | | isMatch ( line , headerLineNo ) ; <nl> - } <nl> - if ( ! isMatch ) { <nl> - mViolationObserver . reportHeaderMismatch ( <nl> - i + 1 , mHeaderLines . get ( headerLineNo ) ) ; <nl> - break ; / / stop checking <nl> - } <nl> - if ( ! isMultiLine ( headerLineNo ) ) { <nl> - headerLineNo + + ; <nl> - } <nl> - } <nl> - if ( i = = fileSize ) { <nl> - / / if file finished , but we have at least one non - multi - line <nl> - / / header isn ' t completed <nl> - for ( ; headerLineNo < headerSize ; headerLineNo + + ) { <nl> - if ( ! isMultiLine ( headerLineNo ) ) { <nl> - mViolationObserver . reportHeaderMissing ( ) ; <nl> - break ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Checks if a code line matches the required header line . <nl> - * @ param aLine the code line <nl> - * @ param aHeaderLineNo the header line number . <nl> - * @ return true if and only if the line matches the required header line . <nl> - * / <nl> - private boolean isMatch ( String aLine , int aHeaderLineNo ) <nl> - { <nl> - return mHeaderRegexps . get ( aHeaderLineNo ) . matcher ( aLine ) . find ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * @ param aLineNo a line number <nl> - * @ return if < code > aLineNo < / code > is one of the repeat header lines . <nl> - * / <nl> - private boolean isMultiLine ( int aLineNo ) <nl> - { <nl> - return ( Arrays . binarySearch ( mMultiLines , aLineNo + 1 ) > = 0 ) ; <nl> - } <nl> - <nl> - <nl> - } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java <nl> index b281216 . . bb62017 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java <nl> @ @ - 77 , 7 + 77 , 7 @ @ final class RegexpHeaderInfo extends HeaderInfo <nl> * @ return a list of non - null patterns , <nl> * same length as the result of { @ link # getHeaderLines ( ) } . <nl> * / <nl> - List < Pattern > geHeaderRegexps ( ) <nl> + List < Pattern > getHeaderRegexps ( ) <nl> { <nl> return Collections . unmodifiableList ( mHeaderRegexps ) ; <nl> } <nl> diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index ffd63f2 . . b1122d7 100755 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 66 , 6 + 66 , 12 @ @ <nl> Changed < a href = " config _ sizes . html # FileLength " > FileLength < / a > <nl> check to be a FileSetCheck . <nl> < / li > <nl> + < li > <nl> + Changed < a <nl> + href = " config _ header . html # RegexpHeader " > RegexpHeader < / a > and < a <nl> + href = " config _ header . html # Header " > Header < / a > to be a <nl> + FileSetCheck . Removed CrossLanguageRegexpHeader as a result . <nl> + < / li > <nl> < / ul > <nl> <nl> < p > Fixed Bugs : < / p >

TEST DIFF:
diff - - git a / src / xdocs / config _ filters . xml b / src / xdocs / config _ filters . xml 
 index e0be31f . . 94c0b1e 100644 
 - - - a / src / xdocs / config _ filters . xml 
 + + + b / src / xdocs / config _ filters . xml 
 @ @ - 114 , 6 + 114 , 14 @ @ 
 Note that the suppression comment should be put before the violation . You can use more 
 than one suppression comment each on separate line . 
 < / p > 
 + < p > 
 + Attention : This filter may only be specified within the TreeWalker module 
 + ( < code > & lt ; module name = & quot ; TreeWalker & quot ; / & gt ; < / code > ) and only 
 + applies to checks which are also defined within this module . 
 + To filter non - TreeWalker checks like < code > RegexpSingleline < / code > , 
 + a < a href = " config _ filters . html # SuppressWithPlainTextCommentFilter " > 
 + SuppressWithPlainTextCommentFilter < / a > or similar filter must be used . 
 + < / p > 
 < / subsection > 
 < subsection name = " Properties " id = " SuppressionCommentFilter _ Properties " > 
 < table > 
 @ @ - 1100 , 6 + 1108 , 14 @ @ public static void foo ( ) { 
 single comments . This requires fewer lines to mark a region , and 
 may be aesthetically preferable in some contexts . 
 < / p > 
 + < p > 
 + Attention : This filter may only be specified within the TreeWalker module 
 + ( < code > & lt ; module name = & quot ; TreeWalker & quot ; / & gt ; < / code > ) and only 
 + applies to checks which are also defined within this module . 
 + To filter non - TreeWalker checks like < code > RegexpSingleline < / code > , 
 + a < a href = " config _ filters . html # SuppressWithPlainTextCommentFilter " > 
 + SuppressWithPlainTextCommentFilter < / a > or similar filter must be used . 
 + < / p > 
 < / subsection > 
 < subsection name = " Properties " id = " SuppressWithNearbyCommentFilter _ Properties " > 
 < table >

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 index 5aac04f . . 0ca3404 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . header ; 
 
 + import java . util . Arrays ; 
 + 
 import java . io . File ; 
 import java . util . List ; 
 
 @ @ - 33 , 30 + 35 , 6 @ @ import java . util . List ; 
 public class RegexpHeaderCheck extends AbstractHeaderCheck 
 { 
 / * * 
 - * A HeaderViolationMonitor that is used when running a Check , 
 - * as a subcomponents of TreeWalker . 
 - * / 
 - private final class CheckViolationMonitor implements HeaderViolationMonitor 
 - { 
 - / * * { @ inheritDoc } * / 
 - public void reportHeaderMismatch ( int aLineNo , String aHeaderLine ) 
 - { 
 - log ( aLineNo , " header . mismatch " , aHeaderLine ) ; 
 - } 
 - 
 - / * * { @ inheritDoc } * / 
 - public void reportHeaderMissing ( ) 
 - { 
 - log ( 1 , " header . missing " ) ; 
 - } 
 - } 
 - 
 - 
 - / * * A delegate for the actual checking functionality . * / 
 - private RegexpHeaderChecker mRegexpHeaderChecker ; 
 - 
 - 
 - / * * 
 * Provides typesafe access to the subclass specific HeaderInfo . 
 * 
 * @ return the result of { @ link # createHeaderInfo ( ) } 
 @ @ - 76 , 17 + 54 , 46 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck 
 } 
 
 @ Override 
 - public void beginProcessing ( String aCharset ) 
 - { 
 - super . beginProcessing ( aCharset ) ; 
 - mRegexpHeaderChecker = new RegexpHeaderChecker ( 
 - getRegexpHeaderInfo ( ) , new CheckViolationMonitor ( ) ) ; 
 - } 
 - 
 - @ Override 
 protected void processFiltered ( File aFile , List < String > aLines ) 
 { 
 - mRegexpHeaderChecker . checkLines ( aLines ) ; 
 + final int headerSize = getRegexpHeaderInfo ( ) . getHeaderLines ( ) . size ( ) ; 
 + final int fileSize = aLines . size ( ) ; 
 + 
 + if ( headerSize - getRegexpHeaderInfo ( ) . getMultLines ( ) . length > fileSize ) 
 + { 
 + log ( 1 , " header . missing " ) ; 
 + } 
 + else { 
 + int headerLineNo = 0 ; 
 + int i ; 
 + for ( i = 0 ; ( headerLineNo < headerSize ) & & ( i < fileSize ) ; i + + ) { 
 + final String line = aLines . get ( i ) ; 
 + boolean isMatch = isMatch ( line , headerLineNo ) ; 
 + while ( ! isMatch & & isMultiLine ( headerLineNo ) ) { 
 + headerLineNo + + ; 
 + isMatch = ( headerLineNo = = headerSize ) 
 + | | isMatch ( line , headerLineNo ) ; 
 + } 
 + if ( ! isMatch ) { 
 + log ( i + 1 , " header . mismatch " , getHeaderLines ( ) . get ( 
 + headerLineNo ) ) ; 
 + break ; / / stop checking 
 + } 
 + if ( ! isMultiLine ( headerLineNo ) ) { 
 + headerLineNo + + ; 
 + } 
 + } 
 + if ( i = = fileSize ) { 
 + / / if file finished , but we have at least one non - multi - line 
 + / / header isn ' t completed 
 + for ( ; headerLineNo < headerSize ; headerLineNo + + ) { 
 + if ( ! isMultiLine ( headerLineNo ) ) { 
 + log ( 1 , " header . missing " ) ; 
 + break ; 
 + } 
 + } 
 + } 
 + } 
 } 
 
 @ Override 
 @ @ - 94 , 4 + 101 , 26 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck 
 { 
 return new RegexpHeaderInfo ( ) ; 
 } 
 + 
 + / * * 
 + * Checks if a code line matches the required header line . 
 + * @ param aLine the code line 
 + * @ param aHeaderLineNo the header line number . 
 + * @ return true if and only if the line matches the required header line . 
 + * / 
 + private boolean isMatch ( String aLine , int aHeaderLineNo ) 
 + { 
 + return getRegexpHeaderInfo ( ) . getHeaderRegexps ( ) . get ( aHeaderLineNo ) 
 + . matcher ( aLine ) . find ( ) ; 
 + } 
 + 
 + / * * 
 + * @ param aLineNo a line number 
 + * @ return if < code > aLineNo < / code > is one of the repeat header lines . 
 + * / 
 + private boolean isMultiLine ( int aLineNo ) 
 + { 
 + return ( Arrays . binarySearch ( getRegexpHeaderInfo ( ) . getMultLines ( ) , 
 + aLineNo + 1 ) > = 0 ) ; 
 + } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java 
 deleted file mode 100644 
 index 3068beb . . 0000000 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java 
 + + + / dev / null 
 @ @ - 1 , 133 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2008 Oliver Burn 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . checks . header ; 
 - 
 - import java . util . List ; 
 - 
 - import java . util . Arrays ; 
 - import java . util . regex . Pattern ; 
 - 
 - / * * 
 - * Isolates the check functionality in RegexpHeaderCheck in an external class . 
 - * This makes it easier to use the functionality both in a Java 
 - * { @ link com . puppycrawl . tools . checkstyle . api . Check } and in 
 - * a { @ link com . puppycrawl . tools . checkstyle . api . FileSetCheck } . 
 - * 
 - * @ author lk 
 - * / 
 - class RegexpHeaderChecker 
 - { 
 - / * * the lines of the header file . * / 
 - private final List < String > mHeaderLines ; 
 - 
 - / * * the compiled regular expressions * / 
 - private List < Pattern > mHeaderRegexps ; 
 - 
 - / * * the header lines to repeat ( 0 or more ) in the check , sorted . * / 
 - private int [ ] mMultiLines ; 
 - 
 - / * * A monitor for the violations that are detected . * / 
 - private final HeaderViolationMonitor mViolationObserver ; 
 - 
 - / * * 
 - * Creates a new instance . 
 - * 
 - * @ param aRegexpHeaderInfo check parameters 
 - * @ param aViolationObserver error reporting strategy object 
 - * / 
 - RegexpHeaderChecker ( 
 - RegexpHeaderInfo aRegexpHeaderInfo , 
 - HeaderViolationMonitor aViolationObserver ) 
 - { 
 - mHeaderLines = aRegexpHeaderInfo . getHeaderLines ( ) ; 
 - mHeaderRegexps = aRegexpHeaderInfo . geHeaderRegexps ( ) ; 
 - mMultiLines = aRegexpHeaderInfo . getMultLines ( ) ; 
 - mViolationObserver = aViolationObserver ; 
 - } 
 - 
 - / * * 
 - * Checks the lines of an individual file against the 
 - * { @ link # getHeaderLines ( ) header lines } . 
 - * 
 - * @ param aLines the lines of an individual file 
 - * / 
 - void checkLines ( final List < String > aLines ) 
 - { 
 - final int headerSize = mHeaderLines . size ( ) ; 
 - final int fileSize = aLines . size ( ) ; 
 - 
 - if ( headerSize - mMultiLines . length > fileSize ) { 
 - mViolationObserver . reportHeaderMissing ( ) ; 
 - } 
 - else { 
 - int headerLineNo = 0 ; 
 - int i ; 
 - for ( i = 0 ; ( headerLineNo < headerSize ) & & ( i < fileSize ) ; i + + ) { 
 - final String line = aLines . get ( i ) ; 
 - boolean isMatch = isMatch ( line , headerLineNo ) ; 
 - while ( ! isMatch & & isMultiLine ( headerLineNo ) ) { 
 - headerLineNo + + ; 
 - isMatch = ( headerLineNo = = headerSize ) 
 - | | isMatch ( line , headerLineNo ) ; 
 - } 
 - if ( ! isMatch ) { 
 - mViolationObserver . reportHeaderMismatch ( 
 - i + 1 , mHeaderLines . get ( headerLineNo ) ) ; 
 - break ; / / stop checking 
 - } 
 - if ( ! isMultiLine ( headerLineNo ) ) { 
 - headerLineNo + + ; 
 - } 
 - } 
 - if ( i = = fileSize ) { 
 - / / if file finished , but we have at least one non - multi - line 
 - / / header isn ' t completed 
 - for ( ; headerLineNo < headerSize ; headerLineNo + + ) { 
 - if ( ! isMultiLine ( headerLineNo ) ) { 
 - mViolationObserver . reportHeaderMissing ( ) ; 
 - break ; 
 - } 
 - } 
 - } 
 - } 
 - } 
 - 
 - / * * 
 - * Checks if a code line matches the required header line . 
 - * @ param aLine the code line 
 - * @ param aHeaderLineNo the header line number . 
 - * @ return true if and only if the line matches the required header line . 
 - * / 
 - private boolean isMatch ( String aLine , int aHeaderLineNo ) 
 - { 
 - return mHeaderRegexps . get ( aHeaderLineNo ) . matcher ( aLine ) . find ( ) ; 
 - } 
 - 
 - / * * 
 - * @ param aLineNo a line number 
 - * @ return if < code > aLineNo < / code > is one of the repeat header lines . 
 - * / 
 - private boolean isMultiLine ( int aLineNo ) 
 - { 
 - return ( Arrays . binarySearch ( mMultiLines , aLineNo + 1 ) > = 0 ) ; 
 - } 
 - 
 - 
 - } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java 
 index b281216 . . bb62017 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java 
 @ @ - 77 , 7 + 77 , 7 @ @ final class RegexpHeaderInfo extends HeaderInfo 
 * @ return a list of non - null patterns , 
 * same length as the result of { @ link # getHeaderLines ( ) } . 
 * / 
 - List < Pattern > geHeaderRegexps ( ) 
 + List < Pattern > getHeaderRegexps ( ) 
 { 
 return Collections . unmodifiableList ( mHeaderRegexps ) ; 
 } 
 diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index ffd63f2 . . b1122d7 100755 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 66 , 6 + 66 , 12 @ @ 
 Changed < a href = " config _ sizes . html # FileLength " > FileLength < / a > 
 check to be a FileSetCheck . 
 < / li > 
 + < li > 
 + Changed < a 
 + href = " config _ header . html # RegexpHeader " > RegexpHeader < / a > and < a 
 + href = " config _ header . html # Header " > Header < / a > to be a 
 + FileSetCheck . Removed CrossLanguageRegexpHeader as a result . 
 + < / li > 
 < / ul > 
 
 < p > Fixed Bugs : < / p >
