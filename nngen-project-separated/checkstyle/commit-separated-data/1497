BLEU SCORE: 0.04266331692956902

TEST MSG: Issue # 2451 : removed excess hierarchy from IllegalCatchCheck
GENERATED MSG: Changes for patch # 3115439 - Added ignoredMethodNames to IllegalThrowsCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java <nl> index 553a730 . . 5843e3f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java <nl> @ @ - 21 , 7 + 21 , 10 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import java . util . LinkedList ; <nl> import java . util . List ; <nl> + import java . util . Set ; <nl> <nl> + import com . google . common . collect . Sets ; <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 32 , 7 + 35 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > <nl> * @ author < a href = " mailto : IliaDubinin91 @ gmail . com " > Ilja Dubinin < / a > <nl> * / <nl> - public final class IllegalCatchCheck extends AbstractIllegalCheck { <nl> + public final class IllegalCatchCheck extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 40 , 10 + 43 , 28 @ @ public final class IllegalCatchCheck extends AbstractIllegalCheck { <nl> * / <nl> public static final String MSG _ KEY = " illegal . catch " ; <nl> <nl> - / * * Creates new instance of the check . * / <nl> - public IllegalCatchCheck ( ) { <nl> - super ( " Exception " , " Error " , " RuntimeException " , " Throwable " , " java . lang . Error " , <nl> - " java . lang . Exception " , " java . lang . RuntimeException " , " java . lang . Throwable " ) ; <nl> + / * * Illegal class names . * / <nl> + private final Set < String > illegalClassNames = Sets . newHashSet ( " Exception " , " Error " , <nl> + " RuntimeException " , " Throwable " , " java . lang . Error " , " java . lang . Exception " , <nl> + " java . lang . RuntimeException " , " java . lang . Throwable " ) ; <nl> + <nl> + / * * <nl> + * Set the list of illegal classes . <nl> + * <nl> + * @ param classNames <nl> + * array of illegal exception classes <nl> + * / <nl> + public void setIllegalClassNames ( final String . . . classNames ) { <nl> + illegalClassNames . clear ( ) ; <nl> + for ( final String name : classNames ) { <nl> + illegalClassNames . add ( name ) ; <nl> + final int lastDot = name . lastIndexOf ( ' . ' ) ; <nl> + if ( lastDot > 0 & & lastDot < name . length ( ) - 1 ) { <nl> + final String shortName = name <nl> + . substring ( name . lastIndexOf ( ' . ' ) + 1 ) ; <nl> + illegalClassNames . add ( shortName ) ; <nl> + } <nl> + } <nl> } <nl> <nl> @ Override <nl> @ @ - 72 , 7 + 93 , 7 @ @ public final class IllegalCatchCheck extends AbstractIllegalCheck { <nl> for ( DetailAST excType : excTypes ) { <nl> final FullIdent ident = FullIdent . createFullIdent ( excType ) ; <nl> <nl> - if ( isIllegalClassName ( ident . getText ( ) ) ) { <nl> + if ( illegalClassNames . contains ( ident . getText ( ) ) ) { <nl> log ( detailAST , MSG _ KEY , ident . getText ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java <nl> index 30213b2 . . 3231399 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java <nl> @ @ - 70 , 6 + 70 , 24 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testIllegalClassNamesBad ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( IllegalCatchCheck . class ) ; <nl> + checkConfig . addAttribute ( " illegalClassNames " , <nl> + " java . lang . Error , java . lang . Exception , NullPointerException " ) ; <nl> + <nl> + / / check that incorrect names don ' t break the Check <nl> + checkConfig . addAttribute ( " illegalClassNames " , <nl> + " java . lang . IOException . " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 7 : 11 : " + getCheckMessage ( MSG _ KEY , " Exception " ) , <nl> + " 15 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Exception " ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputIllegalCatch . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testMultipleTypes ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( IllegalCatchCheck . class ) ; <nl>
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java <nl> index 3b3c1a6 . . dc1ba1b 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java <nl> @ @ - 51 , 11 + 51 , 12 @ @ public final class MethodCountCheck extends Check <nl> <nl> / * * <nl> * Creates an interface . <nl> - * @ param inInterface indicated if counter for an interface . In which <nl> + * @ param aInInterface indicated if counter for an interface . In which <nl> * case , add all counts as public methods . <nl> * / <nl> - MethodCounter ( boolean inInterface ) { <nl> - mInInterface = inInterface ; <nl> + MethodCounter ( boolean aInInterface ) <nl> + { <nl> + mInInterface = aInInterface ; <nl> } <nl> <nl> / * * <nl> @ @ - 84 , 7 + 85 , 8 @ @ public final class MethodCountCheck extends Check <nl> } <nl> <nl> / * * @ return the total number of methods . * / <nl> - int getTotal ( ) { <nl> + int getTotal ( ) <nl> + { <nl> return mTotal ; <nl> } <nl> } ; <nl> @ @ - 182 , 28 + 184 , 48 @ @ public final class MethodCountCheck extends Check <nl> } <nl> } <nl> <nl> - public void setMaxPrivate ( int maxPrivate ) <nl> + / * * <nl> + * Sets the maximum allowed < code > private < / code > methods per type . <nl> + * @ param aValue the maximum allowed . <nl> + * / <nl> + public void setMaxPrivate ( int aValue ) <nl> { <nl> - mMaxPrivate = maxPrivate ; <nl> + mMaxPrivate = aValue ; <nl> } <nl> <nl> - public void setMaxPackage ( int maxPackage ) <nl> + / * * <nl> + * Sets the maximum allowed < code > package < / code > methods per type . <nl> + * @ param aValue the maximum allowed . <nl> + * / <nl> + public void setMaxPackage ( int aValue ) <nl> { <nl> - mMaxPackage = maxPackage ; <nl> + mMaxPackage = aValue ; <nl> } <nl> <nl> - public void setMaxProtected ( int maxProtected ) <nl> + / * * <nl> + * Sets the maximum allowed < code > protected < / code > methods per type . <nl> + * @ param aValue the maximum allowed . <nl> + * / <nl> + public void setMaxProtected ( int aValue ) <nl> { <nl> - mMaxProtected = maxProtected ; <nl> + mMaxProtected = aValue ; <nl> } <nl> <nl> - public void setMaxPublic ( int maxPublic ) <nl> + / * * <nl> + * Sets the maximum allowed < code > public < / code > methods per type . <nl> + * @ param aValue the maximum allowed . <nl> + * / <nl> + public void setMaxPublic ( int aValue ) <nl> { <nl> - mMaxPublic = maxPublic ; <nl> + mMaxPublic = aValue ; <nl> } <nl> <nl> - public void setMaxTotal ( int maxTotal ) <nl> + / * * <nl> + * Sets the maximum total methods per type . <nl> + * @ param aValue the maximum allowed . <nl> + * / <nl> + public void setMaxTotal ( int aValue ) <nl> { <nl> - mMaxTotal = maxTotal ; <nl> + mMaxTotal = aValue ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java 
 index 553a730 . . 5843e3f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java 
 @ @ - 21 , 7 + 21 , 10 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import java . util . LinkedList ; 
 import java . util . List ; 
 + import java . util . Set ; 
 
 + import com . google . common . collect . Sets ; 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 32 , 7 + 35 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > 
 * @ author < a href = " mailto : IliaDubinin91 @ gmail . com " > Ilja Dubinin < / a > 
 * / 
 - public final class IllegalCatchCheck extends AbstractIllegalCheck { 
 + public final class IllegalCatchCheck extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 40 , 10 + 43 , 28 @ @ public final class IllegalCatchCheck extends AbstractIllegalCheck { 
 * / 
 public static final String MSG _ KEY = " illegal . catch " ; 
 
 - / * * Creates new instance of the check . * / 
 - public IllegalCatchCheck ( ) { 
 - super ( " Exception " , " Error " , " RuntimeException " , " Throwable " , " java . lang . Error " , 
 - " java . lang . Exception " , " java . lang . RuntimeException " , " java . lang . Throwable " ) ; 
 + / * * Illegal class names . * / 
 + private final Set < String > illegalClassNames = Sets . newHashSet ( " Exception " , " Error " , 
 + " RuntimeException " , " Throwable " , " java . lang . Error " , " java . lang . Exception " , 
 + " java . lang . RuntimeException " , " java . lang . Throwable " ) ; 
 + 
 + / * * 
 + * Set the list of illegal classes . 
 + * 
 + * @ param classNames 
 + * array of illegal exception classes 
 + * / 
 + public void setIllegalClassNames ( final String . . . classNames ) { 
 + illegalClassNames . clear ( ) ; 
 + for ( final String name : classNames ) { 
 + illegalClassNames . add ( name ) ; 
 + final int lastDot = name . lastIndexOf ( ' . ' ) ; 
 + if ( lastDot > 0 & & lastDot < name . length ( ) - 1 ) { 
 + final String shortName = name 
 + . substring ( name . lastIndexOf ( ' . ' ) + 1 ) ; 
 + illegalClassNames . add ( shortName ) ; 
 + } 
 + } 
 } 
 
 @ Override 
 @ @ - 72 , 7 + 93 , 7 @ @ public final class IllegalCatchCheck extends AbstractIllegalCheck { 
 for ( DetailAST excType : excTypes ) { 
 final FullIdent ident = FullIdent . createFullIdent ( excType ) ; 
 
 - if ( isIllegalClassName ( ident . getText ( ) ) ) { 
 + if ( illegalClassNames . contains ( ident . getText ( ) ) ) { 
 log ( detailAST , MSG _ KEY , ident . getText ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java 
 index 30213b2 . . 3231399 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java 
 @ @ - 70 , 6 + 70 , 24 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public void testIllegalClassNamesBad ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( IllegalCatchCheck . class ) ; 
 + checkConfig . addAttribute ( " illegalClassNames " , 
 + " java . lang . Error , java . lang . Exception , NullPointerException " ) ; 
 + 
 + / / check that incorrect names don ' t break the Check 
 + checkConfig . addAttribute ( " illegalClassNames " , 
 + " java . lang . IOException . " ) ; 
 + 
 + final String [ ] expected = { 
 + " 7 : 11 : " + getCheckMessage ( MSG _ KEY , " Exception " ) , 
 + " 15 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Exception " ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " InputIllegalCatch . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testMultipleTypes ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( IllegalCatchCheck . class ) ; 


NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java 
 index 3b3c1a6 . . dc1ba1b 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java 
 @ @ - 51 , 11 + 51 , 12 @ @ public final class MethodCountCheck extends Check 
 
 / * * 
 * Creates an interface . 
 - * @ param inInterface indicated if counter for an interface . In which 
 + * @ param aInInterface indicated if counter for an interface . In which 
 * case , add all counts as public methods . 
 * / 
 - MethodCounter ( boolean inInterface ) { 
 - mInInterface = inInterface ; 
 + MethodCounter ( boolean aInInterface ) 
 + { 
 + mInInterface = aInInterface ; 
 } 
 
 / * * 
 @ @ - 84 , 7 + 85 , 8 @ @ public final class MethodCountCheck extends Check 
 } 
 
 / * * @ return the total number of methods . * / 
 - int getTotal ( ) { 
 + int getTotal ( ) 
 + { 
 return mTotal ; 
 } 
 } ; 
 @ @ - 182 , 28 + 184 , 48 @ @ public final class MethodCountCheck extends Check 
 } 
 } 
 
 - public void setMaxPrivate ( int maxPrivate ) 
 + / * * 
 + * Sets the maximum allowed < code > private < / code > methods per type . 
 + * @ param aValue the maximum allowed . 
 + * / 
 + public void setMaxPrivate ( int aValue ) 
 { 
 - mMaxPrivate = maxPrivate ; 
 + mMaxPrivate = aValue ; 
 } 
 
 - public void setMaxPackage ( int maxPackage ) 
 + / * * 
 + * Sets the maximum allowed < code > package < / code > methods per type . 
 + * @ param aValue the maximum allowed . 
 + * / 
 + public void setMaxPackage ( int aValue ) 
 { 
 - mMaxPackage = maxPackage ; 
 + mMaxPackage = aValue ; 
 } 
 
 - public void setMaxProtected ( int maxProtected ) 
 + / * * 
 + * Sets the maximum allowed < code > protected < / code > methods per type . 
 + * @ param aValue the maximum allowed . 
 + * / 
 + public void setMaxProtected ( int aValue ) 
 { 
 - mMaxProtected = maxProtected ; 
 + mMaxProtected = aValue ; 
 } 
 
 - public void setMaxPublic ( int maxPublic ) 
 + / * * 
 + * Sets the maximum allowed < code > public < / code > methods per type . 
 + * @ param aValue the maximum allowed . 
 + * / 
 + public void setMaxPublic ( int aValue ) 
 { 
 - mMaxPublic = maxPublic ; 
 + mMaxPublic = aValue ; 
 } 
 
 - public void setMaxTotal ( int maxTotal ) 
 + / * * 
 + * Sets the maximum total methods per type . 
 + * @ param aValue the maximum allowed . 
 + * / 
 + public void setMaxTotal ( int aValue ) 
 { 
 - mMaxTotal = maxTotal ; 
 + mMaxTotal = aValue ; 
 } 
 }
