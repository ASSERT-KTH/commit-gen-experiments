BLEU SCORE: 0.09548450962056532

TEST MSG: Issue # 4586 : Moved resources for AbstractTypeAware check test
GENERATED MSG: Issue # 2161 : unify test input locations for metrics package

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java <nl> index c37c592 . . e5196ad 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java <nl> @ @ - 52 , 7 + 52 , 8 @ @ public class AbstractTypeAwareCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " javadoc " + File . separator + filename ) ; <nl> + + " javadoc " + File . separator <nl> + + " abstracttypeaware " + File . separator + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 168 , 7 + 169 , 7 @ @ public class AbstractTypeAwareCheckTest extends BaseCheckTestSupport { <nl> " 7 : 8 : " + getCheckMessage ( MSG _ CLASS _ INFO , " @ throws " , " InvalidExceptionName " ) , <nl> } ; <nl> try { <nl> - verify ( config , getPath ( " InputLoadErrors . java " ) , expected ) ; <nl> + verify ( config , getPath ( " InputAbstractTypeAwareLoadErrors . java " ) , expected ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> final IllegalStateException cause = ( IllegalStateException ) ex . getCause ( ) ; <nl> @ @ - 184 , 6 + 185 , 6 @ @ public class AbstractTypeAwareCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checkConfig , getPath ( " InputLoadErrors . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbstractTypeAwareLoadErrors . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / abstracttypeaware / InputAbstractTypeAwareLoadErrors . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / abstracttypeaware / InputAbstractTypeAwareLoadErrors . java <nl> new file mode 100644 <nl> index 0000000 . . 085ae98 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / abstracttypeaware / InputAbstractTypeAwareLoadErrors . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . javadoc . abstracttypeaware ; <nl> + <nl> + public class InputAbstractTypeAwareLoadErrors <nl> + { <nl> + / * * <nl> + * aasdf <nl> + * @ throws InvalidExceptionName exception that cannot be loaded <nl> + * / <nl> + void method ( ) { } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> index d9c8b97 . . 37f29c9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> @ @ - 283 , 7 + 283 , 12 @ @ public class NeedBracesCheck extends Check { <nl> else if ( literalFor . getParent ( ) . getType ( ) = = TokenTypes . SLIST <nl> & & literalFor . getLastChild ( ) . getType ( ) ! = TokenTypes . SLIST ) { <nl> final DetailAST block = findExpressionBlockInForLoop ( literalFor ) ; <nl> - result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; <nl> + if ( block = = null ) { <nl> + result = literalFor . getLineNo ( ) = = literalFor . getLastChild ( ) . getLineNo ( ) ; <nl> + } <nl> + else { <nl> + result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; <nl> + } <nl> } <nl> return result ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> index e1d3561 . . e3b1443 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> @ @ - 67 , 10 + 67 , 11 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> " 38 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> " 46 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " while " ) , <nl> " 53 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " do " ) , <nl> - " 59 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , <nl> - " 88 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> - " 92 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , <nl> - " 104 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> + " 56 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , <nl> + " 62 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , <nl> + " 91 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> + " 95 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , <nl> + " 107 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; <nl> } <nl> @ @ - 96 , 8 + 97 , 8 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " tokens " , " LITERAL _ CASE , LITERAL _ DEFAULT " ) ; <nl> checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; <nl> final String [ ] expected = { <nl> - " 69 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> " 72 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> + " 75 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java <nl> index 0a9c5c2 . . 9d04f7f 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java <nl> @ @ - 53 , 6 + 53 , 9 @ @ public class InputBracesSingleLineStatements <nl> do <nl> this . notify ( ) ; <nl> while ( o ! = null ) ; <nl> + for ( ; ; ) <nl> + break ; <nl> + for ( ; ; ) break ; <nl> for ( int i = 0 ; i < 10 ; i + + ) { <nl> this . notify ( ) ; <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java 
 index c37c592 . . e5196ad 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java 
 @ @ - 52 , 7 + 52 , 8 @ @ public class AbstractTypeAwareCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " javadoc " + File . separator + filename ) ; 
 + + " javadoc " + File . separator 
 + + " abstracttypeaware " + File . separator + filename ) ; 
 } 
 
 @ Test 
 @ @ - 168 , 7 + 169 , 7 @ @ public class AbstractTypeAwareCheckTest extends BaseCheckTestSupport { 
 " 7 : 8 : " + getCheckMessage ( MSG _ CLASS _ INFO , " @ throws " , " InvalidExceptionName " ) , 
 } ; 
 try { 
 - verify ( config , getPath ( " InputLoadErrors . java " ) , expected ) ; 
 + verify ( config , getPath ( " InputAbstractTypeAwareLoadErrors . java " ) , expected ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 final IllegalStateException cause = ( IllegalStateException ) ex . getCause ( ) ; 
 @ @ - 184 , 6 + 185 , 6 @ @ public class AbstractTypeAwareCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checkConfig , getPath ( " InputLoadErrors . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbstractTypeAwareLoadErrors . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / abstracttypeaware / InputAbstractTypeAwareLoadErrors . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / abstracttypeaware / InputAbstractTypeAwareLoadErrors . java 
 new file mode 100644 
 index 0000000 . . 085ae98 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / abstracttypeaware / InputAbstractTypeAwareLoadErrors . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . javadoc . abstracttypeaware ; 
 + 
 + public class InputAbstractTypeAwareLoadErrors 
 + { 
 + / * * 
 + * aasdf 
 + * @ throws InvalidExceptionName exception that cannot be loaded 
 + * / 
 + void method ( ) { } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 index d9c8b97 . . 37f29c9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 @ @ - 283 , 7 + 283 , 12 @ @ public class NeedBracesCheck extends Check { 
 else if ( literalFor . getParent ( ) . getType ( ) = = TokenTypes . SLIST 
 & & literalFor . getLastChild ( ) . getType ( ) ! = TokenTypes . SLIST ) { 
 final DetailAST block = findExpressionBlockInForLoop ( literalFor ) ; 
 - result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; 
 + if ( block = = null ) { 
 + result = literalFor . getLineNo ( ) = = literalFor . getLastChild ( ) . getLineNo ( ) ; 
 + } 
 + else { 
 + result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; 
 + } 
 } 
 return result ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 index e1d3561 . . e3b1443 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 @ @ - 67 , 10 + 67 , 11 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 " 38 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 " 46 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " while " ) , 
 " 53 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " do " ) , 
 - " 59 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , 
 - " 88 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 - " 92 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , 
 - " 104 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 + " 56 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , 
 + " 62 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , 
 + " 91 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 + " 95 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , 
 + " 107 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; 
 } 
 @ @ - 96 , 8 + 97 , 8 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " tokens " , " LITERAL _ CASE , LITERAL _ DEFAULT " ) ; 
 checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; 
 final String [ ] expected = { 
 - " 69 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 " 72 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 + " 75 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java 
 index 0a9c5c2 . . 9d04f7f 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java 
 @ @ - 53 , 6 + 53 , 9 @ @ public class InputBracesSingleLineStatements 
 do 
 this . notify ( ) ; 
 while ( o ! = null ) ; 
 + for ( ; ; ) 
 + break ; 
 + for ( ; ; ) break ; 
 for ( int i = 0 ; i < 10 ; i + + ) { 
 this . notify ( ) ; 
 }
