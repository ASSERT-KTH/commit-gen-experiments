BLEU SCORE: 0.044568827606990644

TEST MSG: Issue # 3515 : allowed cli to override and swap checker
GENERATED MSG: Moved AuditEvent and AuditListener to api package in preparation

TEST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 7e7f6e5 . . 27c5dd6 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 126 , 7 + 126 , 7 @ @ <nl> < properties > <nl> < ! - - TreeWalker integrates Checkstyle and antlr and CheckstyleAntTask integrates Checkstyle <nl> with Ant . Checker collects external resource locations and setup configuration . - - > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' TreeWalker ' or @ Image = ' CheckstyleAntTask ' or @ Image = ' Checker ' ] " / > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' TreeWalker ' or @ Image = ' CheckstyleAntTask ' or @ Image = ' Checker ' or @ Image = ' Main ' ] " / > <nl> < / properties > <nl> < / rule > <nl> < rule ref = " rulesets / java / coupling . xml / CouplingBetweenObjects " > <nl> diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 23dc286 . . 28da254 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 78 , 6 + 78 , 7 @ @ <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " ( Checker | TreeWalker | Main | CheckstyleAntTask | JavadocDetailNodeParser ) \ . java " / > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | XDocsPagesTest | CheckstyleAntTaskTest ) \ . java " / > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " PropertyCacheFile \ . java " / > <nl> + < suppress checks = " ClassFanOutComplexity " files = " [ \ \ / ] Main \ . java " / > <nl> < ! - - a lot of GUI elements is OK - - > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " ( JTreeTable | MainFrame ) \ . java " / > <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> index 0b775df . . 396d91e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 49 , 6 + 49 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . Filter ; <nl> import com . puppycrawl . tools . checkstyle . api . FilterSet ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; <nl> + import com . puppycrawl . tools . checkstyle . api . RootModule ; <nl> import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; <nl> import com . puppycrawl . tools . checkstyle . api . SeverityLevelCounter ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> @ @ - 60 , 7 + 61 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * @ author lkuehne <nl> * @ author Andrei Selkin <nl> * / <nl> - public class Checker extends AutomaticBean implements MessageDispatcher { <nl> + public class Checker extends AutomaticBean implements MessageDispatcher , RootModule { <nl> / * * Logger for Checker . * / <nl> private static final Log LOG = LogFactory . getLog ( Checker . class ) ; <nl> <nl> @ @ - 158 , 7 + 159 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> filters . removeFilter ( filter ) ; <nl> } <nl> <nl> - / * * Cleans up the object . * * / <nl> + @ Override <nl> public void destroy ( ) { <nl> listeners . clear ( ) ; <nl> beforeExecutionFileFilters . clear ( ) ; <nl> @ @ - 189 , 15 + 190 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> this . basedir = basedir ; <nl> } <nl> <nl> - / * * <nl> - * Processes a set of files with all FileSetChecks . <nl> - * Once this is done , it is highly recommended to call for <nl> - * the destroy method to close and remove the listeners . <nl> - * @ param files the list of files to be audited . <nl> - * @ return the total number of errors found <nl> - * @ throws CheckstyleException if error condition within Checkstyle occurs <nl> - * @ see # destroy ( ) <nl> - * / <nl> + @ Override <nl> public int process ( List < File > files ) throws CheckstyleException { <nl> if ( cache ! = null ) { <nl> cache . putExternalResources ( getExternalResourceLocations ( ) ) ; <nl> @ @ - 480 , 10 + 473 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> filters . addFilter ( filter ) ; <nl> } <nl> <nl> - / * * <nl> - * Add the listener that will be used to receive events from the audit . <nl> - * @ param listener the nosy thing <nl> - * / <nl> + @ Override <nl> public final void addListener ( AuditListener listener ) { <nl> listeners . add ( listener ) ; <nl> } <nl> @ @ - 572 , 13 + 562 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> classLoader = loader ; <nl> } <nl> <nl> - / * * <nl> - * Sets the classloader used to load Checkstyle core and custom module <nl> - * classes when the module tree is being built up . <nl> - * If no custom ModuleFactory is being set for the Checker module then <nl> - * this module classloader must be specified . <nl> - * @ param moduleClassLoader the classloader used to load module classes <nl> - * / <nl> + @ Override <nl> public final void setModuleClassLoader ( ClassLoader moduleClassLoader ) { <nl> this . moduleClassLoader = moduleClassLoader ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index d5df68b . . 5c15f16 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 49 , 6 + 49 , 7 @ @ import com . google . common . io . Closeables ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditListener ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . api . RootModule ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> @ @ - 409 , 29 + 410 , 46 @ @ public final class Main { <nl> / / create a listener for output <nl> final AuditListener listener = createListener ( cliOptions . format , cliOptions . outputLocation ) ; <nl> <nl> - / / create Checker object and run it <nl> + / / create RootModule object and run it <nl> int errorCounter = 0 ; <nl> - final Checker checker = new Checker ( ) ; <nl> + final ClassLoader moduleClassLoader = Checker . class . getClassLoader ( ) ; <nl> + final RootModule rootModule = getRootModule ( config . getName ( ) , moduleClassLoader ) ; <nl> <nl> try { <nl> <nl> - final ClassLoader moduleClassLoader = Checker . class . getClassLoader ( ) ; <nl> - checker . setModuleClassLoader ( moduleClassLoader ) ; <nl> - checker . configure ( config ) ; <nl> - checker . addListener ( listener ) ; <nl> + rootModule . setModuleClassLoader ( moduleClassLoader ) ; <nl> + rootModule . configure ( config ) ; <nl> + rootModule . addListener ( listener ) ; <nl> <nl> - / / run Checker <nl> - errorCounter = checker . process ( cliOptions . files ) ; <nl> + / / run RootModule <nl> + errorCounter = rootModule . process ( cliOptions . files ) ; <nl> <nl> } <nl> finally { <nl> - checker . destroy ( ) ; <nl> + rootModule . destroy ( ) ; <nl> } <nl> <nl> return errorCounter ; <nl> } <nl> <nl> / * * <nl> + * Creates a new instance of the root module that will control and run <nl> + * Checkstyle . <nl> + * @ param name The name of the module . This will either be a short name that <nl> + * will have to be found or the complete package name . <nl> + * @ param moduleClassLoader Class loader used to load the root module . <nl> + * @ return The new instance of the root module . <nl> + * @ throws CheckstyleException if no module can be instantiated from name <nl> + * / <nl> + private static RootModule getRootModule ( String name , ClassLoader moduleClassLoader ) <nl> + throws CheckstyleException { <nl> + final ModuleFactory factory = new PackageObjectFactory ( <nl> + Checker . class . getPackage ( ) . getName ( ) + " . " , moduleClassLoader ) ; <nl> + <nl> + return ( RootModule ) factory . createModule ( name ) ; <nl> + } <nl> + <nl> + / * * <nl> * Loads properties from a File . <nl> * @ param file <nl> * the properties file <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> index e92b7ab . . 3fe5e42 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> @ @ - 41 , 6 + 41 , 9 @ @ public class PackageObjectFactory implements ModuleFactory { <nl> / * * Logger for PackageObjectFactory . * / <nl> private static final Log LOG = LogFactory . getLog ( PackageObjectFactory . class ) ; <nl> <nl> + / * * Exception message when null class loader is given . * / <nl> + private static final String NULL _ LOADER _ MESSAGE = " moduleClassLoader must not be null " ; <nl> + <nl> / * * Log message when ignoring exception . * / <nl> private static final String IGNORING _ EXCEPTION _ MESSAGE = " Keep looking , ignoring exception " ; <nl> <nl> @ @ - 64 , 8 + 67 , 7 @ @ public class PackageObjectFactory implements ModuleFactory { <nl> * / <nl> public PackageObjectFactory ( Set < String > packageNames , ClassLoader moduleClassLoader ) { <nl> if ( moduleClassLoader = = null ) { <nl> - throw new IllegalArgumentException ( <nl> - " moduleClassLoader must not be null " ) ; <nl> + throw new IllegalArgumentException ( NULL _ LOADER _ MESSAGE ) ; <nl> } <nl> <nl> / / create a copy of the given set , but retain ordering <nl> @ @ - 74 , 6 + 76 , 22 @ @ public class PackageObjectFactory implements ModuleFactory { <nl> } <nl> <nl> / * * <nl> + * Creates a new { @ code PackageObjectFactory } instance . <nl> + * @ param packageName The package name to use <nl> + * @ param moduleClassLoader class loader used to load Checkstyle <nl> + * core and custom modules <nl> + * / <nl> + public PackageObjectFactory ( String packageName , ClassLoader moduleClassLoader ) { <nl> + if ( moduleClassLoader = = null ) { <nl> + throw new IllegalArgumentException ( NULL _ LOADER _ MESSAGE ) ; <nl> + } <nl> + <nl> + packages = new LinkedHashSet < > ( 1 ) ; <nl> + packages . add ( packageName ) ; <nl> + this . moduleClassLoader = moduleClassLoader ; <nl> + } <nl> + <nl> + / * * <nl> * Creates a new instance of a class from a given name , or that name <nl> * concatenated with & quot ; Check & quot ; . If the name is <nl> * a class name , creates an instance of the named class . Otherwise , creates <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / RootModule . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / RootModule . java <nl> new file mode 100644 <nl> index 0000000 . . a447d91 <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / RootModule . java <nl> @ @ - 0 , 0 + 1 , 59 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . api ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . List ; <nl> + <nl> + / * * <nl> + * The first module that is run as part of Checkstyle and controls its entire <nl> + * behavior and children . <nl> + * @ author Richard Veach <nl> + * / <nl> + public interface RootModule extends Configurable { <nl> + / * * Cleans up the object . * * / <nl> + void destroy ( ) ; <nl> + <nl> + / * * <nl> + * Processes a set of files . <nl> + * Once this is done , it is highly recommended to call for <nl> + * the destroy method to close and remove the listeners . <nl> + * @ param files the list of files to be audited . <nl> + * @ return the total number of errors found <nl> + * @ throws CheckstyleException if error condition within Checkstyle occurs <nl> + * @ see # destroy ( ) <nl> + * / <nl> + int process ( List < File > files ) throws CheckstyleException ; <nl> + <nl> + / * * <nl> + * Add the listener that will be used to receive events from the audit . <nl> + * @ param listener the nosy thing <nl> + * / <nl> + void addListener ( AuditListener listener ) ; <nl> + <nl> + / * * <nl> + * Sets the classloader used to load Checkstyle core and custom module <nl> + * classes when the module tree is being built up . <nl> + * If no custom ModuleFactory is being set for the root module then <nl> + * this module classloader must be specified . <nl> + * @ param moduleClassLoader the classloader used to load module classes <nl> + * / <nl> + void setModuleClassLoader ( ClassLoader moduleClassLoader ) ; <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 0865f3e . . 7ad8686 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 799 , 4 + 799 , 15 @ @ public class MainTest { <nl> list ) ; <nl> assertNotEquals ( 0 , result . size ( ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testCustomRootModule ( ) throws Exception { <nl> + exit . checkAssertionAfterwards ( ( ) - > { <nl> + assertEquals ( " " , systemOut . getLog ( ) ) ; <nl> + assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> + assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; <nl> + } ) ; <nl> + Main . main ( " - c " , getPath ( " config - custom - root - module . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> index 96ff5fe . . 76f3b51 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle ; <nl> <nl> import static junit . framework . TestCase . assertEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> import java . lang . reflect . Method ; <nl> import java . util . Collections ; <nl> @ @ - 41 , 9 + 42 , 26 @ @ public class PackageObjectFactoryTest { <nl> private final PackageObjectFactory factory = new PackageObjectFactory ( <nl> new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> <nl> - @ Test ( expected = IllegalArgumentException . class ) <nl> + @ Test <nl> public void testCtorException ( ) { <nl> - new PackageObjectFactory ( new HashSet < > ( ) , null ) ; <nl> + try { <nl> + new PackageObjectFactory ( new HashSet < > ( ) , null ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( IllegalArgumentException ex ) { <nl> + assertEquals ( " moduleClassLoader must not be null " , ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testCtorException2 ( ) { <nl> + try { <nl> + new PackageObjectFactory ( " test " , null ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( IllegalArgumentException ex ) { <nl> + assertEquals ( " moduleClassLoader must not be null " , ex . getMessage ( ) ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java b / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java <nl> new file mode 100644 <nl> index 0000000 . . 0d1a865 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . List ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . AuditListener ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . api . RootModule ; <nl> + <nl> + public class TestRootModuleChecker implements RootModule { <nl> + private static boolean processed ; <nl> + <nl> + @ Override <nl> + public void configure ( Configuration configuration ) throws CheckstyleException { <nl> + / / not used <nl> + } <nl> + <nl> + @ Override <nl> + public void destroy ( ) { <nl> + / / not used <nl> + } <nl> + <nl> + @ Override <nl> + public int process ( List < File > files ) throws CheckstyleException { <nl> + processed = true ; <nl> + return 0 ; <nl> + } <nl> + <nl> + @ Override <nl> + public void addListener ( AuditListener listener ) { <nl> + / / not used <nl> + } <nl> + <nl> + @ Override <nl> + public void setModuleClassLoader ( ClassLoader moduleClassLoader ) { <nl> + / / not used <nl> + } <nl> + <nl> + public static boolean isProcessed ( ) { <nl> + return processed ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / config - custom - root - module . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / config - custom - root - module . xml <nl> new file mode 100644 <nl> index 0000000 . . 6b0af4f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / config - custom - root - module . xml <nl> @ @ - 0 , 0 + 1 , 7 @ @ <nl> + < ? xml version = " 1 . 0 " ? > <nl> + < ! DOCTYPE module PUBLIC <nl> + " - / / Puppy Crawl / / DTD Check Configuration 1 . 3 / / EN " <nl> + " http : / / www . puppycrawl . com / dtds / configuration _ 1 _ 3 . dtd " > <nl> + <nl> + < module name = " com . puppycrawl . tools . checkstyle . TestRootModuleChecker " > <nl> + < / module > <nl> diff - - git a / src / xdocs / cmdline . xml . vm b / src / xdocs / cmdline . xml . vm <nl> index 8d8ae14 . . 1caaef8 100644 <nl> - - - a / src / xdocs / cmdline . xml . vm <nl> + + + b / src / xdocs / cmdline . xml . vm <nl> @ @ - 256 , 6 + 256 , 23 @ @ java com . puppycrawl . tools . checkstyle . Main - c docs / sun _ checks . xml \ <nl> - f xml - o build / checkstyle _ errors . xml Check . java <nl> < / source > <nl> <nl> + < p > <nl> + < b > <nl> + Run checkstyle with < a href = " extending . html " > custom module ( s ) <nl> + ( Root module , Checks , etc ) < / a > in configuration file : <nl> + < / b > <nl> + < / p > <nl> + < source > <nl> + java - classpath MyCustom . jar ; checkstyle - $ { projectVersion } - all . jar \ <nl> + com . puppycrawl . tools . checkstyle . Main \ <nl> + - c config . xml Check . java <nl> + < / source > <nl> + < p > <nl> + < b > Note < / b > : Custom modules should be specified with the class ' <nl> + < a href = " writingchecks . html # Integrate _ your _ Check " > full classpath < / a > <nl> + in the configuration file and the compiled class be located in the custom <nl> + JAR for Checkstyle to find . <nl> + < / p > <nl> < / section > <nl> < / body > <nl> < / document >
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java <nl> index cd509f2 . . 324fd71 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java <nl> @ @ - 229 , 8 + 229 , 10 @ @ public class BlockParentHandler extends ExpressionHandler <nl> return ; <nl> } <nl> <nl> - checkExpressionSubtree ( nonlist , getLevel ( ) <nl> - + getIndentCheck ( ) . getBasicOffset ( ) ) ; <nl> + checkExpressionSubtree ( nonlist , <nl> + getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) , <nl> + false , <nl> + false ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / CatchHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / CatchHandler . java <nl> index 2be4bed . . 3d43846 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / CatchHandler . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / CatchHandler . java <nl> @ @ - 60 , 7 + 60 , 7 @ @ public class CatchHandler extends BlockParentHandler <nl> { <nl> DetailAST condAst = ( DetailAST ) <nl> getMainAst ( ) . findFirstToken ( TokenTypes . LPAREN ) . getNextSibling ( ) ; <nl> - checkExpressionSubtree ( condAst , getLevel ( ) ) ; <nl> + checkExpressionSubtree ( condAst , getLevel ( ) , false , false ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / DoWhileHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / DoWhileHandler . java <nl> index 34ea468 . . f7cc9d5 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / DoWhileHandler . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / DoWhileHandler . java <nl> @ @ - 50 , 7 + 50 , 7 @ @ public class DoWhileHandler extends BlockParentHandler <nl> { <nl> DetailAST condAst = ( DetailAST ) getMainAst ( ) <nl> . findFirstToken ( TokenTypes . LPAREN ) . getNextSibling ( ) ; <nl> - checkExpressionSubtree ( condAst , getLevel ( ) ) ; <nl> + checkExpressionSubtree ( condAst , getLevel ( ) , false , false ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ExpressionHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ExpressionHandler . java <nl> index fa526e6 . . 7fdac66 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ExpressionHandler . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ExpressionHandler . java <nl> @ @ - 260 , 6 + 260 , 16 @ @ public abstract class ExpressionHandler <nl> } <nl> <nl> / * * <nl> + * @ return true if indentation should be increased after <nl> + * fisrt line in checkLinesIndent ( ) <nl> + * false otherwise <nl> + * / <nl> + protected boolean shouldIncraeseIndent ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + / * * <nl> * Check the indentation for a set of lines . <nl> * <nl> * @ param aLines the set of lines to check <nl> @ @ - 267 , 10 + 277 , 10 @ @ public abstract class ExpressionHandler <nl> * @ param aFirstLineMatches whether or not the first line has to match <nl> * @ param aFirstLine firstline of whole expression <nl> * / <nl> - protected final void checkLinesIndent ( LineSet aLines , <nl> - int aIndentLevel , <nl> - boolean aFirstLineMatches , <nl> - int aFirstLine ) <nl> + private void checkLinesIndent ( LineSet aLines , <nl> + int aIndentLevel , <nl> + boolean aFirstLineMatches , <nl> + int aFirstLine ) <nl> { <nl> if ( aLines . isEmpty ( ) ) { <nl> return ; <nl> @ @ - 294 , 7 + 304 , 12 @ @ public abstract class ExpressionHandler <nl> / / doesn ' t start the line ) then don ' t indent more , the first <nl> / / indentation is absorbed by the nesting <nl> <nl> - if ( aFirstLineMatches | | aFirstLine > mMainAst . getLineNo ( ) ) { <nl> + / / TODO : shouldIncreseIndent ( ) is a hack , should be removed <nl> + / / after complete rewriting of checkExpressionSubtree ( ) <nl> + <nl> + if ( aFirstLineMatches <nl> + | | ( aFirstLine > mMainAst . getLineNo ( ) & & shouldIncraeseIndent ( ) ) ) <nl> + { <nl> aIndentLevel + = mIndentCheck . getBasicOffset ( ) ; <nl> } <nl> <nl> @ @ - 419 , 17 + 434 , 6 @ @ public abstract class ExpressionHandler <nl> / * * <nl> * Check the indentation level for an expression subtree . <nl> * <nl> - * @ param aTree the expression subtree to check <nl> - * @ param aLevel the indentation level <nl> - * / <nl> - protected final void checkExpressionSubtree ( DetailAST aTree , int aLevel ) <nl> - { <nl> - checkExpressionSubtree ( aTree , aLevel , false , false ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Check the indentation level for an expression subtree . <nl> - * <nl> * @ param aTree the expression subtree to check <nl> * @ param aLevel the indentation level <nl> * @ param aFirstLineMatches whether or not the first line has to match <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ForHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ForHandler . java <nl> index b49aed3 . . 0806d38 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ForHandler . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ForHandler . java <nl> @ @ - 50 , 13 + 50 , 19 @ @ public class ForHandler extends BlockParentHandler <nl> { <nl> checkExpressionSubtree ( <nl> getMainAst ( ) . findFirstToken ( TokenTypes . FOR _ INIT ) , <nl> - getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) ) ; <nl> + getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) , <nl> + false , <nl> + false ) ; <nl> checkExpressionSubtree ( <nl> getMainAst ( ) . findFirstToken ( TokenTypes . FOR _ CONDITION ) , <nl> - getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) ) ; <nl> + getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) , <nl> + false , <nl> + false ) ; <nl> checkExpressionSubtree ( <nl> getMainAst ( ) . findFirstToken ( TokenTypes . FOR _ ITERATOR ) , <nl> - getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) ) ; <nl> + getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) , <nl> + false , <nl> + false ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / LabelHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / LabelHandler . java <nl> index 45c8527 . . 523c0d4 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / LabelHandler . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / LabelHandler . java <nl> @ @ - 78 , 7 + 78 , 9 @ @ public class LabelHandler extends ExpressionHandler <nl> / / need to check children ( like ' block ' parents do ) <nl> DetailAST parent = ( DetailAST ) <nl> getMainAst ( ) . getFirstChild ( ) . getNextSibling ( ) ; <nl> - checkExpressionSubtree ( parent , getLevel ( ) <nl> - + getIndentCheck ( ) . getBasicOffset ( ) , true , false ) ; <nl> + checkExpressionSubtree ( parent , <nl> + getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) , <nl> + true , <nl> + false ) ; <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java <nl> index 1329492 . . 56830f8 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java <nl> @ @ - 257 , 4 + 257 , 14 @ @ public class MethodCallHandler extends ExpressionHandler <nl> checkRParen ( ) ; <nl> } <nl> } <nl> + <nl> + / * * <nl> + * @ return true if indentation should be increased after <nl> + * fisrt line in checkLinesIndent ( ) <nl> + * false otherwise <nl> + * / <nl> + protected boolean shouldIncraeseIndent ( ) <nl> + { <nl> + return false ; <nl> + } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java <nl> index 26dd641 . . a145a96 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java <nl> @ @ - 107 , 7 + 107 , 7 @ @ public class MethodDefHandler extends BlockParentHandler <nl> private void checkParameters ( ) <nl> { <nl> DetailAST params = getMainAst ( ) . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> - checkExpressionSubtree ( params , getLevel ( ) ) ; <nl> + checkExpressionSubtree ( params , getLevel ( ) , false , false ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / SwitchHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / SwitchHandler . java <nl> index 0243e68 . . ba28f26 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / SwitchHandler . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / SwitchHandler . java <nl> @ @ - 95 , 7 + 95 , 9 @ @ public class SwitchHandler extends BlockParentHandler <nl> checkExpressionSubtree ( <nl> ( DetailAST ) getMainAst ( ) . findFirstToken ( TokenTypes . LPAREN ) . <nl> getNextSibling ( ) , <nl> - getLevel ( ) ) ; <nl> + getLevel ( ) , <nl> + false , <nl> + false ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / WhileHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / WhileHandler . java <nl> index 6ac9d49 . . 54a87a1 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / WhileHandler . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / WhileHandler . java <nl> @ @ - 49 , 8 + 49 , 10 @ @ public class WhileHandler extends BlockParentHandler <nl> private void checkCondExpr ( ) <nl> { <nl> DetailAST condAst = getMainAst ( ) . findFirstToken ( TokenTypes . EXPR ) ; <nl> - checkExpressionSubtree ( condAst , getLevel ( ) <nl> - + getIndentCheck ( ) . getBasicOffset ( ) ) ; <nl> + checkExpressionSubtree ( condAst , <nl> + getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) , <nl> + false , <nl> + false ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / indentation / InputValidMethodIndent . java b / src / testinputs / com / puppycrawl / tools / checkstyle / indentation / InputValidMethodIndent . java <nl> index 98ad9f7 . . 7f10910 100644 <nl> - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / indentation / InputValidMethodIndent . java <nl> + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / indentation / InputValidMethodIndent . java <nl> @ @ - 113 , 7 + 113 , 11 @ @ public class InputValidMethodIndent extends java . awt . event . MouseAdapter implemen <nl> getInteger ( " mytest " ) . intValue ( ) , <nl> 11 ) ; <nl> <nl> - <nl> + myfunc3 ( <nl> + 1 , <nl> + 2 , <nl> + 3 , <nl> + 4 ) ; <nl> } <nl> <nl> / / strange IMHO , but I suppose this should be allowed

TEST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 7e7f6e5 . . 27c5dd6 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 126 , 7 + 126 , 7 @ @ 
 < properties > 
 < ! - - TreeWalker integrates Checkstyle and antlr and CheckstyleAntTask integrates Checkstyle 
 with Ant . Checker collects external resource locations and setup configuration . - - > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' TreeWalker ' or @ Image = ' CheckstyleAntTask ' or @ Image = ' Checker ' ] " / > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' TreeWalker ' or @ Image = ' CheckstyleAntTask ' or @ Image = ' Checker ' or @ Image = ' Main ' ] " / > 
 < / properties > 
 < / rule > 
 < rule ref = " rulesets / java / coupling . xml / CouplingBetweenObjects " > 
 diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 23dc286 . . 28da254 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 78 , 6 + 78 , 7 @ @ 
 < suppress checks = " ClassDataAbstractionCoupling " files = " ( Checker | TreeWalker | Main | CheckstyleAntTask | JavadocDetailNodeParser ) \ . java " / > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | XDocsPagesTest | CheckstyleAntTaskTest ) \ . java " / > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " PropertyCacheFile \ . java " / > 
 + < suppress checks = " ClassFanOutComplexity " files = " [ \ \ / ] Main \ . java " / > 
 < ! - - a lot of GUI elements is OK - - > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " ( JTreeTable | MainFrame ) \ . java " / > 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 index 0b775df . . 396d91e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 49 , 6 + 49 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . Filter ; 
 import com . puppycrawl . tools . checkstyle . api . FilterSet ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; 
 + import com . puppycrawl . tools . checkstyle . api . RootModule ; 
 import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; 
 import com . puppycrawl . tools . checkstyle . api . SeverityLevelCounter ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 @ @ - 60 , 7 + 61 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * @ author lkuehne 
 * @ author Andrei Selkin 
 * / 
 - public class Checker extends AutomaticBean implements MessageDispatcher { 
 + public class Checker extends AutomaticBean implements MessageDispatcher , RootModule { 
 / * * Logger for Checker . * / 
 private static final Log LOG = LogFactory . getLog ( Checker . class ) ; 
 
 @ @ - 158 , 7 + 159 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 filters . removeFilter ( filter ) ; 
 } 
 
 - / * * Cleans up the object . * * / 
 + @ Override 
 public void destroy ( ) { 
 listeners . clear ( ) ; 
 beforeExecutionFileFilters . clear ( ) ; 
 @ @ - 189 , 15 + 190 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 this . basedir = basedir ; 
 } 
 
 - / * * 
 - * Processes a set of files with all FileSetChecks . 
 - * Once this is done , it is highly recommended to call for 
 - * the destroy method to close and remove the listeners . 
 - * @ param files the list of files to be audited . 
 - * @ return the total number of errors found 
 - * @ throws CheckstyleException if error condition within Checkstyle occurs 
 - * @ see # destroy ( ) 
 - * / 
 + @ Override 
 public int process ( List < File > files ) throws CheckstyleException { 
 if ( cache ! = null ) { 
 cache . putExternalResources ( getExternalResourceLocations ( ) ) ; 
 @ @ - 480 , 10 + 473 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 filters . addFilter ( filter ) ; 
 } 
 
 - / * * 
 - * Add the listener that will be used to receive events from the audit . 
 - * @ param listener the nosy thing 
 - * / 
 + @ Override 
 public final void addListener ( AuditListener listener ) { 
 listeners . add ( listener ) ; 
 } 
 @ @ - 572 , 13 + 562 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 classLoader = loader ; 
 } 
 
 - / * * 
 - * Sets the classloader used to load Checkstyle core and custom module 
 - * classes when the module tree is being built up . 
 - * If no custom ModuleFactory is being set for the Checker module then 
 - * this module classloader must be specified . 
 - * @ param moduleClassLoader the classloader used to load module classes 
 - * / 
 + @ Override 
 public final void setModuleClassLoader ( ClassLoader moduleClassLoader ) { 
 this . moduleClassLoader = moduleClassLoader ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index d5df68b . . 5c15f16 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 49 , 6 + 49 , 7 @ @ import com . google . common . io . Closeables ; 
 import com . puppycrawl . tools . checkstyle . api . AuditListener ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . api . RootModule ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 @ @ - 409 , 29 + 410 , 46 @ @ public final class Main { 
 / / create a listener for output 
 final AuditListener listener = createListener ( cliOptions . format , cliOptions . outputLocation ) ; 
 
 - / / create Checker object and run it 
 + / / create RootModule object and run it 
 int errorCounter = 0 ; 
 - final Checker checker = new Checker ( ) ; 
 + final ClassLoader moduleClassLoader = Checker . class . getClassLoader ( ) ; 
 + final RootModule rootModule = getRootModule ( config . getName ( ) , moduleClassLoader ) ; 
 
 try { 
 
 - final ClassLoader moduleClassLoader = Checker . class . getClassLoader ( ) ; 
 - checker . setModuleClassLoader ( moduleClassLoader ) ; 
 - checker . configure ( config ) ; 
 - checker . addListener ( listener ) ; 
 + rootModule . setModuleClassLoader ( moduleClassLoader ) ; 
 + rootModule . configure ( config ) ; 
 + rootModule . addListener ( listener ) ; 
 
 - / / run Checker 
 - errorCounter = checker . process ( cliOptions . files ) ; 
 + / / run RootModule 
 + errorCounter = rootModule . process ( cliOptions . files ) ; 
 
 } 
 finally { 
 - checker . destroy ( ) ; 
 + rootModule . destroy ( ) ; 
 } 
 
 return errorCounter ; 
 } 
 
 / * * 
 + * Creates a new instance of the root module that will control and run 
 + * Checkstyle . 
 + * @ param name The name of the module . This will either be a short name that 
 + * will have to be found or the complete package name . 
 + * @ param moduleClassLoader Class loader used to load the root module . 
 + * @ return The new instance of the root module . 
 + * @ throws CheckstyleException if no module can be instantiated from name 
 + * / 
 + private static RootModule getRootModule ( String name , ClassLoader moduleClassLoader ) 
 + throws CheckstyleException { 
 + final ModuleFactory factory = new PackageObjectFactory ( 
 + Checker . class . getPackage ( ) . getName ( ) + " . " , moduleClassLoader ) ; 
 + 
 + return ( RootModule ) factory . createModule ( name ) ; 
 + } 
 + 
 + / * * 
 * Loads properties from a File . 
 * @ param file 
 * the properties file 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 index e92b7ab . . 3fe5e42 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 @ @ - 41 , 6 + 41 , 9 @ @ public class PackageObjectFactory implements ModuleFactory { 
 / * * Logger for PackageObjectFactory . * / 
 private static final Log LOG = LogFactory . getLog ( PackageObjectFactory . class ) ; 
 
 + / * * Exception message when null class loader is given . * / 
 + private static final String NULL _ LOADER _ MESSAGE = " moduleClassLoader must not be null " ; 
 + 
 / * * Log message when ignoring exception . * / 
 private static final String IGNORING _ EXCEPTION _ MESSAGE = " Keep looking , ignoring exception " ; 
 
 @ @ - 64 , 8 + 67 , 7 @ @ public class PackageObjectFactory implements ModuleFactory { 
 * / 
 public PackageObjectFactory ( Set < String > packageNames , ClassLoader moduleClassLoader ) { 
 if ( moduleClassLoader = = null ) { 
 - throw new IllegalArgumentException ( 
 - " moduleClassLoader must not be null " ) ; 
 + throw new IllegalArgumentException ( NULL _ LOADER _ MESSAGE ) ; 
 } 
 
 / / create a copy of the given set , but retain ordering 
 @ @ - 74 , 6 + 76 , 22 @ @ public class PackageObjectFactory implements ModuleFactory { 
 } 
 
 / * * 
 + * Creates a new { @ code PackageObjectFactory } instance . 
 + * @ param packageName The package name to use 
 + * @ param moduleClassLoader class loader used to load Checkstyle 
 + * core and custom modules 
 + * / 
 + public PackageObjectFactory ( String packageName , ClassLoader moduleClassLoader ) { 
 + if ( moduleClassLoader = = null ) { 
 + throw new IllegalArgumentException ( NULL _ LOADER _ MESSAGE ) ; 
 + } 
 + 
 + packages = new LinkedHashSet < > ( 1 ) ; 
 + packages . add ( packageName ) ; 
 + this . moduleClassLoader = moduleClassLoader ; 
 + } 
 + 
 + / * * 
 * Creates a new instance of a class from a given name , or that name 
 * concatenated with & quot ; Check & quot ; . If the name is 
 * a class name , creates an instance of the named class . Otherwise , creates 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / RootModule . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / RootModule . java 
 new file mode 100644 
 index 0000000 . . a447d91 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / RootModule . java 
 @ @ - 0 , 0 + 1 , 59 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . api ; 
 + 
 + import java . io . File ; 
 + import java . util . List ; 
 + 
 + / * * 
 + * The first module that is run as part of Checkstyle and controls its entire 
 + * behavior and children . 
 + * @ author Richard Veach 
 + * / 
 + public interface RootModule extends Configurable { 
 + / * * Cleans up the object . * * / 
 + void destroy ( ) ; 
 + 
 + / * * 
 + * Processes a set of files . 
 + * Once this is done , it is highly recommended to call for 
 + * the destroy method to close and remove the listeners . 
 + * @ param files the list of files to be audited . 
 + * @ return the total number of errors found 
 + * @ throws CheckstyleException if error condition within Checkstyle occurs 
 + * @ see # destroy ( ) 
 + * / 
 + int process ( List < File > files ) throws CheckstyleException ; 
 + 
 + / * * 
 + * Add the listener that will be used to receive events from the audit . 
 + * @ param listener the nosy thing 
 + * / 
 + void addListener ( AuditListener listener ) ; 
 + 
 + / * * 
 + * Sets the classloader used to load Checkstyle core and custom module 
 + * classes when the module tree is being built up . 
 + * If no custom ModuleFactory is being set for the root module then 
 + * this module classloader must be specified . 
 + * @ param moduleClassLoader the classloader used to load module classes 
 + * / 
 + void setModuleClassLoader ( ClassLoader moduleClassLoader ) ; 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 0865f3e . . 7ad8686 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 799 , 4 + 799 , 15 @ @ public class MainTest { 
 list ) ; 
 assertNotEquals ( 0 , result . size ( ) ) ; 
 } 
 + 
 + @ Test 
 + public void testCustomRootModule ( ) throws Exception { 
 + exit . checkAssertionAfterwards ( ( ) - > { 
 + assertEquals ( " " , systemOut . getLog ( ) ) ; 
 + assertEquals ( " " , systemErr . getLog ( ) ) ; 
 + assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; 
 + } ) ; 
 + Main . main ( " - c " , getPath ( " config - custom - root - module . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 index 96ff5fe . . 76f3b51 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle ; 
 
 import static junit . framework . TestCase . assertEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . fail ; 
 
 import java . lang . reflect . Method ; 
 import java . util . Collections ; 
 @ @ - 41 , 9 + 42 , 26 @ @ public class PackageObjectFactoryTest { 
 private final PackageObjectFactory factory = new PackageObjectFactory ( 
 new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 
 - @ Test ( expected = IllegalArgumentException . class ) 
 + @ Test 
 public void testCtorException ( ) { 
 - new PackageObjectFactory ( new HashSet < > ( ) , null ) ; 
 + try { 
 + new PackageObjectFactory ( new HashSet < > ( ) , null ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( IllegalArgumentException ex ) { 
 + assertEquals ( " moduleClassLoader must not be null " , ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testCtorException2 ( ) { 
 + try { 
 + new PackageObjectFactory ( " test " , null ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( IllegalArgumentException ex ) { 
 + assertEquals ( " moduleClassLoader must not be null " , ex . getMessage ( ) ) ; 
 + } 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java b / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java 
 new file mode 100644 
 index 0000000 . . 0d1a865 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import java . io . File ; 
 + import java . util . List ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . AuditListener ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . api . RootModule ; 
 + 
 + public class TestRootModuleChecker implements RootModule { 
 + private static boolean processed ; 
 + 
 + @ Override 
 + public void configure ( Configuration configuration ) throws CheckstyleException { 
 + / / not used 
 + } 
 + 
 + @ Override 
 + public void destroy ( ) { 
 + / / not used 
 + } 
 + 
 + @ Override 
 + public int process ( List < File > files ) throws CheckstyleException { 
 + processed = true ; 
 + return 0 ; 
 + } 
 + 
 + @ Override 
 + public void addListener ( AuditListener listener ) { 
 + / / not used 
 + } 
 + 
 + @ Override 
 + public void setModuleClassLoader ( ClassLoader moduleClassLoader ) { 
 + / / not used 
 + } 
 + 
 + public static boolean isProcessed ( ) { 
 + return processed ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / config - custom - root - module . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / config - custom - root - module . xml 
 new file mode 100644 
 index 0000000 . . 6b0af4f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / config - custom - root - module . xml 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + < ? xml version = " 1 . 0 " ? > 
 + < ! DOCTYPE module PUBLIC 
 + " - / / Puppy Crawl / / DTD Check Configuration 1 . 3 / / EN " 
 + " http : / / www . puppycrawl . com / dtds / configuration _ 1 _ 3 . dtd " > 
 + 
 + < module name = " com . puppycrawl . tools . checkstyle . TestRootModuleChecker " > 
 + < / module > 
 diff - - git a / src / xdocs / cmdline . xml . vm b / src / xdocs / cmdline . xml . vm 
 index 8d8ae14 . . 1caaef8 100644 
 - - - a / src / xdocs / cmdline . xml . vm 
 + + + b / src / xdocs / cmdline . xml . vm 
 @ @ - 256 , 6 + 256 , 23 @ @ java com . puppycrawl . tools . checkstyle . Main - c docs / sun _ checks . xml \ 
 - f xml - o build / checkstyle _ errors . xml Check . java 
 < / source > 
 
 + < p > 
 + < b > 
 + Run checkstyle with < a href = " extending . html " > custom module ( s ) 
 + ( Root module , Checks , etc ) < / a > in configuration file : 
 + < / b > 
 + < / p > 
 + < source > 
 + java - classpath MyCustom . jar ; checkstyle - $ { projectVersion } - all . jar \ 
 + com . puppycrawl . tools . checkstyle . Main \ 
 + - c config . xml Check . java 
 + < / source > 
 + < p > 
 + < b > Note < / b > : Custom modules should be specified with the class ' 
 + < a href = " writingchecks . html # Integrate _ your _ Check " > full classpath < / a > 
 + in the configuration file and the compiled class be located in the custom 
 + JAR for Checkstyle to find . 
 + < / p > 
 < / section > 
 < / body > 
 < / document >

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java 
 index cd509f2 . . 324fd71 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / BlockParentHandler . java 
 @ @ - 229 , 8 + 229 , 10 @ @ public class BlockParentHandler extends ExpressionHandler 
 return ; 
 } 
 
 - checkExpressionSubtree ( nonlist , getLevel ( ) 
 - + getIndentCheck ( ) . getBasicOffset ( ) ) ; 
 + checkExpressionSubtree ( nonlist , 
 + getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) , 
 + false , 
 + false ) ; 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / CatchHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / CatchHandler . java 
 index 2be4bed . . 3d43846 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / CatchHandler . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / CatchHandler . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public class CatchHandler extends BlockParentHandler 
 { 
 DetailAST condAst = ( DetailAST ) 
 getMainAst ( ) . findFirstToken ( TokenTypes . LPAREN ) . getNextSibling ( ) ; 
 - checkExpressionSubtree ( condAst , getLevel ( ) ) ; 
 + checkExpressionSubtree ( condAst , getLevel ( ) , false , false ) ; 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / DoWhileHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / DoWhileHandler . java 
 index 34ea468 . . f7cc9d5 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / DoWhileHandler . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / DoWhileHandler . java 
 @ @ - 50 , 7 + 50 , 7 @ @ public class DoWhileHandler extends BlockParentHandler 
 { 
 DetailAST condAst = ( DetailAST ) getMainAst ( ) 
 . findFirstToken ( TokenTypes . LPAREN ) . getNextSibling ( ) ; 
 - checkExpressionSubtree ( condAst , getLevel ( ) ) ; 
 + checkExpressionSubtree ( condAst , getLevel ( ) , false , false ) ; 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ExpressionHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ExpressionHandler . java 
 index fa526e6 . . 7fdac66 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ExpressionHandler . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ExpressionHandler . java 
 @ @ - 260 , 6 + 260 , 16 @ @ public abstract class ExpressionHandler 
 } 
 
 / * * 
 + * @ return true if indentation should be increased after 
 + * fisrt line in checkLinesIndent ( ) 
 + * false otherwise 
 + * / 
 + protected boolean shouldIncraeseIndent ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + / * * 
 * Check the indentation for a set of lines . 
 * 
 * @ param aLines the set of lines to check 
 @ @ - 267 , 10 + 277 , 10 @ @ public abstract class ExpressionHandler 
 * @ param aFirstLineMatches whether or not the first line has to match 
 * @ param aFirstLine firstline of whole expression 
 * / 
 - protected final void checkLinesIndent ( LineSet aLines , 
 - int aIndentLevel , 
 - boolean aFirstLineMatches , 
 - int aFirstLine ) 
 + private void checkLinesIndent ( LineSet aLines , 
 + int aIndentLevel , 
 + boolean aFirstLineMatches , 
 + int aFirstLine ) 
 { 
 if ( aLines . isEmpty ( ) ) { 
 return ; 
 @ @ - 294 , 7 + 304 , 12 @ @ public abstract class ExpressionHandler 
 / / doesn ' t start the line ) then don ' t indent more , the first 
 / / indentation is absorbed by the nesting 
 
 - if ( aFirstLineMatches | | aFirstLine > mMainAst . getLineNo ( ) ) { 
 + / / TODO : shouldIncreseIndent ( ) is a hack , should be removed 
 + / / after complete rewriting of checkExpressionSubtree ( ) 
 + 
 + if ( aFirstLineMatches 
 + | | ( aFirstLine > mMainAst . getLineNo ( ) & & shouldIncraeseIndent ( ) ) ) 
 + { 
 aIndentLevel + = mIndentCheck . getBasicOffset ( ) ; 
 } 
 
 @ @ - 419 , 17 + 434 , 6 @ @ public abstract class ExpressionHandler 
 / * * 
 * Check the indentation level for an expression subtree . 
 * 
 - * @ param aTree the expression subtree to check 
 - * @ param aLevel the indentation level 
 - * / 
 - protected final void checkExpressionSubtree ( DetailAST aTree , int aLevel ) 
 - { 
 - checkExpressionSubtree ( aTree , aLevel , false , false ) ; 
 - } 
 - 
 - / * * 
 - * Check the indentation level for an expression subtree . 
 - * 
 * @ param aTree the expression subtree to check 
 * @ param aLevel the indentation level 
 * @ param aFirstLineMatches whether or not the first line has to match 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ForHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ForHandler . java 
 index b49aed3 . . 0806d38 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ForHandler . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / ForHandler . java 
 @ @ - 50 , 13 + 50 , 19 @ @ public class ForHandler extends BlockParentHandler 
 { 
 checkExpressionSubtree ( 
 getMainAst ( ) . findFirstToken ( TokenTypes . FOR _ INIT ) , 
 - getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) ) ; 
 + getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) , 
 + false , 
 + false ) ; 
 checkExpressionSubtree ( 
 getMainAst ( ) . findFirstToken ( TokenTypes . FOR _ CONDITION ) , 
 - getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) ) ; 
 + getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) , 
 + false , 
 + false ) ; 
 checkExpressionSubtree ( 
 getMainAst ( ) . findFirstToken ( TokenTypes . FOR _ ITERATOR ) , 
 - getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) ) ; 
 + getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) , 
 + false , 
 + false ) ; 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / LabelHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / LabelHandler . java 
 index 45c8527 . . 523c0d4 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / LabelHandler . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / LabelHandler . java 
 @ @ - 78 , 7 + 78 , 9 @ @ public class LabelHandler extends ExpressionHandler 
 / / need to check children ( like ' block ' parents do ) 
 DetailAST parent = ( DetailAST ) 
 getMainAst ( ) . getFirstChild ( ) . getNextSibling ( ) ; 
 - checkExpressionSubtree ( parent , getLevel ( ) 
 - + getIndentCheck ( ) . getBasicOffset ( ) , true , false ) ; 
 + checkExpressionSubtree ( parent , 
 + getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) , 
 + true , 
 + false ) ; 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java 
 index 1329492 . . 56830f8 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodCallHandler . java 
 @ @ - 257 , 4 + 257 , 14 @ @ public class MethodCallHandler extends ExpressionHandler 
 checkRParen ( ) ; 
 } 
 } 
 + 
 + / * * 
 + * @ return true if indentation should be increased after 
 + * fisrt line in checkLinesIndent ( ) 
 + * false otherwise 
 + * / 
 + protected boolean shouldIncraeseIndent ( ) 
 + { 
 + return false ; 
 + } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java 
 index 26dd641 . . a145a96 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java 
 @ @ - 107 , 7 + 107 , 7 @ @ public class MethodDefHandler extends BlockParentHandler 
 private void checkParameters ( ) 
 { 
 DetailAST params = getMainAst ( ) . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 - checkExpressionSubtree ( params , getLevel ( ) ) ; 
 + checkExpressionSubtree ( params , getLevel ( ) , false , false ) ; 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / SwitchHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / SwitchHandler . java 
 index 0243e68 . . ba28f26 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / SwitchHandler . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / SwitchHandler . java 
 @ @ - 95 , 7 + 95 , 9 @ @ public class SwitchHandler extends BlockParentHandler 
 checkExpressionSubtree ( 
 ( DetailAST ) getMainAst ( ) . findFirstToken ( TokenTypes . LPAREN ) . 
 getNextSibling ( ) , 
 - getLevel ( ) ) ; 
 + getLevel ( ) , 
 + false , 
 + false ) ; 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / WhileHandler . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / WhileHandler . java 
 index 6ac9d49 . . 54a87a1 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / WhileHandler . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / indentation / WhileHandler . java 
 @ @ - 49 , 8 + 49 , 10 @ @ public class WhileHandler extends BlockParentHandler 
 private void checkCondExpr ( ) 
 { 
 DetailAST condAst = getMainAst ( ) . findFirstToken ( TokenTypes . EXPR ) ; 
 - checkExpressionSubtree ( condAst , getLevel ( ) 
 - + getIndentCheck ( ) . getBasicOffset ( ) ) ; 
 + checkExpressionSubtree ( condAst , 
 + getLevel ( ) + getIndentCheck ( ) . getBasicOffset ( ) , 
 + false , 
 + false ) ; 
 } 
 
 / * * 
 diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / indentation / InputValidMethodIndent . java b / src / testinputs / com / puppycrawl / tools / checkstyle / indentation / InputValidMethodIndent . java 
 index 98ad9f7 . . 7f10910 100644 
 - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / indentation / InputValidMethodIndent . java 
 + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / indentation / InputValidMethodIndent . java 
 @ @ - 113 , 7 + 113 , 11 @ @ public class InputValidMethodIndent extends java . awt . event . MouseAdapter implemen 
 getInteger ( " mytest " ) . intValue ( ) , 
 11 ) ; 
 
 - 
 + myfunc3 ( 
 + 1 , 
 + 2 , 
 + 3 , 
 + 4 ) ; 
 } 
 
 / / strange IMHO , but I suppose this should be allowed
