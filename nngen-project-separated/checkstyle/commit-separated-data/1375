BLEU SCORE: 0.06285596338261261

TEST MSG: Issue # 2661 : Enforce ForbidWildcardAsReturnType of sevntu - checkstyle over Checkstyle source code
GENERATED MSG: Issue # 1566 : WriteTag violations fixed

TEST DIFF (one line): diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml <nl> index 495ceba . . 83142eb 100644 <nl> - - - a / config / checkstyle _ sevntu _ checks . xml <nl> + + + b / config / checkstyle _ sevntu _ checks . xml <nl> @ @ - 103 , 5 + 103 , 6 @ @ <nl> < property name = " highlightAllDuplicates " value = " true " / > <nl> < / module > <nl> < module name = " SimpleAccessorNameNotation " / > <nl> + < module name = " ForbidWildcardAsReturnType " / > <nl> < / module > <nl> < / module > <nl> diff - - git a / config / sevntu _ suppressions . xml b / config / sevntu _ suppressions . xml <nl> index ac4f547 . . c90f3c6 100644 <nl> - - - a / config / sevntu _ suppressions . xml <nl> + + + b / config / sevntu _ suppressions . xml <nl> @ @ - 20 , 4 + 20 , 17 @ @ <nl> < suppress checks = " SimpleAccessorNameNotation " <nl> files = " ClassFanOutComplexityCheck \ . java " <nl> lines = " 76 " / > <nl> + <nl> + < ! - - These classes are deprecated and will be removed soon . - - > <nl> + < suppress checks = " ForbidWildcardAsReturnType " <nl> + files = " AbstractTypeAwareCheck \ . java " <nl> + lines = " 223 , 239 , 419 " / > <nl> + < suppress checks = " ForbidWildcardAsReturnType " <nl> + files = " ClassResolver \ . java " <nl> + lines = " 72 , 184 " / > <nl> + < ! - - We need to satisfy javax . swing . table . AbstractTableModel <nl> + public Class < ? > getColumnClass ( int columnIndex ) { - - > <nl> + < suppress checks = " ForbidWildcardAsReturnType " <nl> + files = " ParseTreeTableModel \ . java " <nl> + lines = " 106 " / > <nl> < / suppressions > <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java <nl> index b0d960c . . 786c31c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java <nl> @ @ - 85 , 9 + 85 , 10 @ @ public class HandlerFactory { <nl> * type from TokenTypes <nl> * @ param handlerClass <nl> * the handler to register <nl> + * @ param < T > type of the handler class object . <nl> * / <nl> - private void register ( int type , Class < ? > handlerClass ) { <nl> - final Constructor < ? > ctor = CommonUtils . getConstructor ( handlerClass , <nl> + private < T > void register ( int type , Class < T > handlerClass ) { <nl> + final Constructor < T > ctor = CommonUtils . getConstructor ( handlerClass , <nl> IndentationCheck . class , <nl> / / current AST <nl> DetailAST . class , <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> index 44bb5c1 . . 5466421 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> @ @ - 289 , 10 + 289 , 12 @ @ public final class CommonUtils { <nl> * from which constructor is returned <nl> * @ param parameterTypes <nl> * of constructor <nl> + * @ param < T > type of the target class object . <nl> * @ return constructor of targetClass or { @ link IllegalStateException } if any exception occurs <nl> * @ see Class # getConstructor ( Class [ ] ) <nl> * / <nl> - public static Constructor < ? > getConstructor ( Class < ? > targetClass , Class < ? > . . . parameterTypes ) { <nl> + public static < T > Constructor < T > getConstructor ( Class < T > targetClass , <nl> + Class < ? > . . . parameterTypes ) { <nl> try { <nl> return targetClass . getConstructor ( parameterTypes ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> index 86c4c84 . . 5b9b59d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . Method ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> - import java . util . Hashtable ; <nl> + import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . SortedSet ; <nl> @ @ - 131 , 7 + 131 , 7 @ @ public class UniquePropertiesCheckTest extends BaseFileSetCheckTestSupport { <nl> Object uniqueProperties = constructor . newInstance ( ) ; <nl> Method method = uniqueProperties . getClass ( ) . getDeclaredMethod ( " put " , Object . class , Object . class ) ; <nl> Object result = method . invoke ( uniqueProperties , 1 , " value " ) ; <nl> - Map < Object , Object > table = new Hashtable < > ( ) ; <nl> + Map < Object , Object > table = new HashMap < > ( ) ; <nl> Object expected = table . put ( 1 , " value " ) ; <nl> assertEquals ( expected , result ) ; <nl> Object result2 = method . invoke ( uniqueProperties , 1 , " value " ) ;

TEST DIFF:
diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml 
 index 495ceba . . 83142eb 100644 
 - - - a / config / checkstyle _ sevntu _ checks . xml 
 + + + b / config / checkstyle _ sevntu _ checks . xml 
 @ @ - 103 , 5 + 103 , 6 @ @ 
 < property name = " highlightAllDuplicates " value = " true " / > 
 < / module > 
 < module name = " SimpleAccessorNameNotation " / > 
 + < module name = " ForbidWildcardAsReturnType " / > 
 < / module > 
 < / module > 
 diff - - git a / config / sevntu _ suppressions . xml b / config / sevntu _ suppressions . xml 
 index ac4f547 . . c90f3c6 100644 
 - - - a / config / sevntu _ suppressions . xml 
 + + + b / config / sevntu _ suppressions . xml 
 @ @ - 20 , 4 + 20 , 17 @ @ 
 < suppress checks = " SimpleAccessorNameNotation " 
 files = " ClassFanOutComplexityCheck \ . java " 
 lines = " 76 " / > 
 + 
 + < ! - - These classes are deprecated and will be removed soon . - - > 
 + < suppress checks = " ForbidWildcardAsReturnType " 
 + files = " AbstractTypeAwareCheck \ . java " 
 + lines = " 223 , 239 , 419 " / > 
 + < suppress checks = " ForbidWildcardAsReturnType " 
 + files = " ClassResolver \ . java " 
 + lines = " 72 , 184 " / > 
 + < ! - - We need to satisfy javax . swing . table . AbstractTableModel 
 + public Class < ? > getColumnClass ( int columnIndex ) { - - > 
 + < suppress checks = " ForbidWildcardAsReturnType " 
 + files = " ParseTreeTableModel \ . java " 
 + lines = " 106 " / > 
 < / suppressions > 
 \ No newline at end of file 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java 
 index b0d960c . . 786c31c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / HandlerFactory . java 
 @ @ - 85 , 9 + 85 , 10 @ @ public class HandlerFactory { 
 * type from TokenTypes 
 * @ param handlerClass 
 * the handler to register 
 + * @ param < T > type of the handler class object . 
 * / 
 - private void register ( int type , Class < ? > handlerClass ) { 
 - final Constructor < ? > ctor = CommonUtils . getConstructor ( handlerClass , 
 + private < T > void register ( int type , Class < T > handlerClass ) { 
 + final Constructor < T > ctor = CommonUtils . getConstructor ( handlerClass , 
 IndentationCheck . class , 
 / / current AST 
 DetailAST . class , 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 index 44bb5c1 . . 5466421 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 @ @ - 289 , 10 + 289 , 12 @ @ public final class CommonUtils { 
 * from which constructor is returned 
 * @ param parameterTypes 
 * of constructor 
 + * @ param < T > type of the target class object . 
 * @ return constructor of targetClass or { @ link IllegalStateException } if any exception occurs 
 * @ see Class # getConstructor ( Class [ ] ) 
 * / 
 - public static Constructor < ? > getConstructor ( Class < ? > targetClass , Class < ? > . . . parameterTypes ) { 
 + public static < T > Constructor < T > getConstructor ( Class < T > targetClass , 
 + Class < ? > . . . parameterTypes ) { 
 try { 
 return targetClass . getConstructor ( parameterTypes ) ; 
 }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 index 86c4c84 . . 5b9b59d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 @ @ - 31 , 7 + 31 , 7 @ @ import java . lang . reflect . Constructor ; 
 import java . lang . reflect . Method ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 - import java . util . Hashtable ; 
 + import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . SortedSet ; 
 @ @ - 131 , 7 + 131 , 7 @ @ public class UniquePropertiesCheckTest extends BaseFileSetCheckTestSupport { 
 Object uniqueProperties = constructor . newInstance ( ) ; 
 Method method = uniqueProperties . getClass ( ) . getDeclaredMethod ( " put " , Object . class , Object . class ) ; 
 Object result = method . invoke ( uniqueProperties , 1 , " value " ) ; 
 - Map < Object , Object > table = new Hashtable < > ( ) ; 
 + Map < Object , Object > table = new HashMap < > ( ) ; 
 Object expected = table . put ( 1 , " value " ) ; 
 assertEquals ( expected , result ) ; 
 Object result2 = method . invoke ( uniqueProperties , 1 , " value " ) ;
