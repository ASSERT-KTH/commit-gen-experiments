BLEU SCORE: 0.05073552004225952

TEST MSG: Issue # 2451 : removed excess hierarchy from IllegalThrowsCheck
GENERATED MSG: Changes for patch # 3115439 - Added ignoredMethodNames to IllegalThrowsCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> index 792f19a . . aa65ba0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . util . Collections ; <nl> import java . util . Set ; <nl> <nl> import com . google . common . collect . Sets ; <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 49 , 7 + 50 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . AnnotationUtility ; <nl> * @ author John Sirois <nl> * @ author < a href = " mailto : nesterenko - aleksey @ list . ru " > Aleksey Nesterenko < / a > <nl> * / <nl> - public final class IllegalThrowsCheck extends AbstractIllegalCheck { <nl> + public final class IllegalThrowsCheck extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 57 , 22 + 58 , 33 @ @ public final class IllegalThrowsCheck extends AbstractIllegalCheck { <nl> * / <nl> public static final String MSG _ KEY = " illegal . throw " ; <nl> <nl> - / * * Default ignored method names . * / <nl> - private static final String [ ] DEFAULT _ IGNORED _ METHOD _ NAMES = { <nl> - " finalize " , <nl> - } ; <nl> - <nl> / * * Property for ignoring overridden methods . * / <nl> private boolean ignoreOverriddenMethods = true ; <nl> <nl> / * * Methods which should be ignored . * / <nl> - private final Set < String > ignoredMethodNames = Sets . newHashSet ( ) ; <nl> + private final Set < String > ignoredMethodNames = Sets . newHashSet ( " finalize " ) ; <nl> + <nl> + / * * Illegal class names . * / <nl> + private final Set < String > illegalClassNames = Sets . newHashSet ( " Error " , " RuntimeException " , <nl> + " Throwable " , " java . lang . Error " , " java . lang . RuntimeException " , " java . lang . Throwable " ) ; <nl> <nl> - / * * Creates new instance of the check . * / <nl> - public IllegalThrowsCheck ( ) { <nl> - super ( " Error " , " RuntimeException " , " Throwable " , " java . lang . Error " , <nl> - " java . lang . RuntimeException " , " java . lang . Throwable " ) ; <nl> - setIgnoredMethodNames ( DEFAULT _ IGNORED _ METHOD _ NAMES ) ; <nl> + / * * <nl> + * Set the list of illegal classes . <nl> + * <nl> + * @ param classNames <nl> + * array of illegal exception classes <nl> + * / <nl> + public void setIllegalClassNames ( final String . . . classNames ) { <nl> + illegalClassNames . clear ( ) ; <nl> + for ( final String name : classNames ) { <nl> + illegalClassNames . add ( name ) ; <nl> + final int lastDot = name . lastIndexOf ( ' . ' ) ; <nl> + if ( lastDot > 0 & & lastDot < name . length ( ) - 1 ) { <nl> + final String shortName = name <nl> + . substring ( name . lastIndexOf ( ' . ' ) + 1 ) ; <nl> + illegalClassNames . add ( shortName ) ; <nl> + } <nl> + } <nl> } <nl> <nl> @ Override <nl> @ @ - 99 , 7 + 111 , 7 @ @ public final class IllegalThrowsCheck extends AbstractIllegalCheck { <nl> while ( token ! = null ) { <nl> if ( token . getType ( ) ! = TokenTypes . COMMA ) { <nl> final FullIdent ident = FullIdent . createFullIdent ( token ) ; <nl> - if ( isIllegalClassName ( ident . getText ( ) ) ) { <nl> + if ( illegalClassNames . contains ( ident . getText ( ) ) ) { <nl> log ( token , MSG _ KEY , ident . getText ( ) ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java <nl> index 3b3c1a6 . . dc1ba1b 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java <nl> @ @ - 51 , 11 + 51 , 12 @ @ public final class MethodCountCheck extends Check <nl> <nl> / * * <nl> * Creates an interface . <nl> - * @ param inInterface indicated if counter for an interface . In which <nl> + * @ param aInInterface indicated if counter for an interface . In which <nl> * case , add all counts as public methods . <nl> * / <nl> - MethodCounter ( boolean inInterface ) { <nl> - mInInterface = inInterface ; <nl> + MethodCounter ( boolean aInInterface ) <nl> + { <nl> + mInInterface = aInInterface ; <nl> } <nl> <nl> / * * <nl> @ @ - 84 , 7 + 85 , 8 @ @ public final class MethodCountCheck extends Check <nl> } <nl> <nl> / * * @ return the total number of methods . * / <nl> - int getTotal ( ) { <nl> + int getTotal ( ) <nl> + { <nl> return mTotal ; <nl> } <nl> } ; <nl> @ @ - 182 , 28 + 184 , 48 @ @ public final class MethodCountCheck extends Check <nl> } <nl> } <nl> <nl> - public void setMaxPrivate ( int maxPrivate ) <nl> + / * * <nl> + * Sets the maximum allowed < code > private < / code > methods per type . <nl> + * @ param aValue the maximum allowed . <nl> + * / <nl> + public void setMaxPrivate ( int aValue ) <nl> { <nl> - mMaxPrivate = maxPrivate ; <nl> + mMaxPrivate = aValue ; <nl> } <nl> <nl> - public void setMaxPackage ( int maxPackage ) <nl> + / * * <nl> + * Sets the maximum allowed < code > package < / code > methods per type . <nl> + * @ param aValue the maximum allowed . <nl> + * / <nl> + public void setMaxPackage ( int aValue ) <nl> { <nl> - mMaxPackage = maxPackage ; <nl> + mMaxPackage = aValue ; <nl> } <nl> <nl> - public void setMaxProtected ( int maxProtected ) <nl> + / * * <nl> + * Sets the maximum allowed < code > protected < / code > methods per type . <nl> + * @ param aValue the maximum allowed . <nl> + * / <nl> + public void setMaxProtected ( int aValue ) <nl> { <nl> - mMaxProtected = maxProtected ; <nl> + mMaxProtected = aValue ; <nl> } <nl> <nl> - public void setMaxPublic ( int maxPublic ) <nl> + / * * <nl> + * Sets the maximum allowed < code > public < / code > methods per type . <nl> + * @ param aValue the maximum allowed . <nl> + * / <nl> + public void setMaxPublic ( int aValue ) <nl> { <nl> - mMaxPublic = maxPublic ; <nl> + mMaxPublic = aValue ; <nl> } <nl> <nl> - public void setMaxTotal ( int maxTotal ) <nl> + / * * <nl> + * Sets the maximum total methods per type . <nl> + * @ param aValue the maximum allowed . <nl> + * / <nl> + public void setMaxTotal ( int aValue ) <nl> { <nl> - mMaxTotal = maxTotal ; <nl> + mMaxTotal = aValue ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 index 792f19a . . aa65ba0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . util . Collections ; 
 import java . util . Set ; 
 
 import com . google . common . collect . Sets ; 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 49 , 7 + 50 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . AnnotationUtility ; 
 * @ author John Sirois 
 * @ author < a href = " mailto : nesterenko - aleksey @ list . ru " > Aleksey Nesterenko < / a > 
 * / 
 - public final class IllegalThrowsCheck extends AbstractIllegalCheck { 
 + public final class IllegalThrowsCheck extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 57 , 22 + 58 , 33 @ @ public final class IllegalThrowsCheck extends AbstractIllegalCheck { 
 * / 
 public static final String MSG _ KEY = " illegal . throw " ; 
 
 - / * * Default ignored method names . * / 
 - private static final String [ ] DEFAULT _ IGNORED _ METHOD _ NAMES = { 
 - " finalize " , 
 - } ; 
 - 
 / * * Property for ignoring overridden methods . * / 
 private boolean ignoreOverriddenMethods = true ; 
 
 / * * Methods which should be ignored . * / 
 - private final Set < String > ignoredMethodNames = Sets . newHashSet ( ) ; 
 + private final Set < String > ignoredMethodNames = Sets . newHashSet ( " finalize " ) ; 
 + 
 + / * * Illegal class names . * / 
 + private final Set < String > illegalClassNames = Sets . newHashSet ( " Error " , " RuntimeException " , 
 + " Throwable " , " java . lang . Error " , " java . lang . RuntimeException " , " java . lang . Throwable " ) ; 
 
 - / * * Creates new instance of the check . * / 
 - public IllegalThrowsCheck ( ) { 
 - super ( " Error " , " RuntimeException " , " Throwable " , " java . lang . Error " , 
 - " java . lang . RuntimeException " , " java . lang . Throwable " ) ; 
 - setIgnoredMethodNames ( DEFAULT _ IGNORED _ METHOD _ NAMES ) ; 
 + / * * 
 + * Set the list of illegal classes . 
 + * 
 + * @ param classNames 
 + * array of illegal exception classes 
 + * / 
 + public void setIllegalClassNames ( final String . . . classNames ) { 
 + illegalClassNames . clear ( ) ; 
 + for ( final String name : classNames ) { 
 + illegalClassNames . add ( name ) ; 
 + final int lastDot = name . lastIndexOf ( ' . ' ) ; 
 + if ( lastDot > 0 & & lastDot < name . length ( ) - 1 ) { 
 + final String shortName = name 
 + . substring ( name . lastIndexOf ( ' . ' ) + 1 ) ; 
 + illegalClassNames . add ( shortName ) ; 
 + } 
 + } 
 } 
 
 @ Override 
 @ @ - 99 , 7 + 111 , 7 @ @ public final class IllegalThrowsCheck extends AbstractIllegalCheck { 
 while ( token ! = null ) { 
 if ( token . getType ( ) ! = TokenTypes . COMMA ) { 
 final FullIdent ident = FullIdent . createFullIdent ( token ) ; 
 - if ( isIllegalClassName ( ident . getText ( ) ) ) { 
 + if ( illegalClassNames . contains ( ident . getText ( ) ) ) { 
 log ( token , MSG _ KEY , ident . getText ( ) ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java 
 index 3b3c1a6 . . dc1ba1b 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / MethodCountCheck . java 
 @ @ - 51 , 11 + 51 , 12 @ @ public final class MethodCountCheck extends Check 
 
 / * * 
 * Creates an interface . 
 - * @ param inInterface indicated if counter for an interface . In which 
 + * @ param aInInterface indicated if counter for an interface . In which 
 * case , add all counts as public methods . 
 * / 
 - MethodCounter ( boolean inInterface ) { 
 - mInInterface = inInterface ; 
 + MethodCounter ( boolean aInInterface ) 
 + { 
 + mInInterface = aInInterface ; 
 } 
 
 / * * 
 @ @ - 84 , 7 + 85 , 8 @ @ public final class MethodCountCheck extends Check 
 } 
 
 / * * @ return the total number of methods . * / 
 - int getTotal ( ) { 
 + int getTotal ( ) 
 + { 
 return mTotal ; 
 } 
 } ; 
 @ @ - 182 , 28 + 184 , 48 @ @ public final class MethodCountCheck extends Check 
 } 
 } 
 
 - public void setMaxPrivate ( int maxPrivate ) 
 + / * * 
 + * Sets the maximum allowed < code > private < / code > methods per type . 
 + * @ param aValue the maximum allowed . 
 + * / 
 + public void setMaxPrivate ( int aValue ) 
 { 
 - mMaxPrivate = maxPrivate ; 
 + mMaxPrivate = aValue ; 
 } 
 
 - public void setMaxPackage ( int maxPackage ) 
 + / * * 
 + * Sets the maximum allowed < code > package < / code > methods per type . 
 + * @ param aValue the maximum allowed . 
 + * / 
 + public void setMaxPackage ( int aValue ) 
 { 
 - mMaxPackage = maxPackage ; 
 + mMaxPackage = aValue ; 
 } 
 
 - public void setMaxProtected ( int maxProtected ) 
 + / * * 
 + * Sets the maximum allowed < code > protected < / code > methods per type . 
 + * @ param aValue the maximum allowed . 
 + * / 
 + public void setMaxProtected ( int aValue ) 
 { 
 - mMaxProtected = maxProtected ; 
 + mMaxProtected = aValue ; 
 } 
 
 - public void setMaxPublic ( int maxPublic ) 
 + / * * 
 + * Sets the maximum allowed < code > public < / code > methods per type . 
 + * @ param aValue the maximum allowed . 
 + * / 
 + public void setMaxPublic ( int aValue ) 
 { 
 - mMaxPublic = maxPublic ; 
 + mMaxPublic = aValue ; 
 } 
 
 - public void setMaxTotal ( int maxTotal ) 
 + / * * 
 + * Sets the maximum total methods per type . 
 + * @ param aValue the maximum allowed . 
 + * / 
 + public void setMaxTotal ( int aValue ) 
 { 
 - mMaxTotal = maxTotal ; 
 + mMaxTotal = aValue ; 
 } 
 }
