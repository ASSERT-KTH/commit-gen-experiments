BLEU SCORE: 0.8371837576365552

TEST MSG: Revert " Issue # 4220 : Modified EmptyBlockCheckTest . java and moved its input files to the emptyblock subdirectory "
GENERATED MSG: Issue # 4220 : Modified EmptyBlockCheckTest . java and moved its input files to the emptyblock subdirectory

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java <nl> index d58554f . . 2aeb83e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java <nl> @ @ - 40 , 7 + 40 , 7 @ @ public class EmptyBlockCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " blocks " + File . separator + " emptyblock " + File . separator + filename ) ; <nl> + + " blocks " + File . separator + filename ) ; <nl> } <nl> <nl> / * Additional test for jacoco , since valueOf ( ) <nl> @ @ - 68 , 7 + 68 , 7 @ @ public class EmptyBlockCheckTest <nl> " 73 : 41 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT ) , <nl> " 84 : 12 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputEmptyBlockDefault . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 84 , 7 + 84 , 7 @ @ public class EmptyBlockCheckTest <nl> " 71 : 29 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " synchronized " ) , <nl> " 84 : 12 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " STATIC _ INIT " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputEmptyBlockDefault . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 103 , 7 + 103 , 7 @ @ public class EmptyBlockCheckTest <nl> " 73 : 41 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT ) , <nl> " 84 : 12 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputEmptyBlockDefault . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class EmptyBlockCheckTest <nl> " 22 : 29 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT ) , <nl> " 23 : 28 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputEmptyBlockAllowEmptyLoops . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputSemantic2 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 137 , 7 + 137 , 7 @ @ public class EmptyBlockCheckTest <nl> " 22 : 29 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " if " ) , <nl> " 23 : 28 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " switch " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputEmptyBlockAllowEmptyLoops . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputSemantic2 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 148 , 7 + 148 , 7 @ @ public class EmptyBlockCheckTest <nl> try { <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checkConfig , getPath ( " InputEmptyBlockDefault . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> @ @ - 170 , 7 + 170 , 7 @ @ public class EmptyBlockCheckTest <nl> " 31 : 37 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " case " ) , <nl> " 32 : 29 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " case " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputEmptyBlockCase . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputEmptyCase . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 187 , 7 + 187 , 7 @ @ public class EmptyBlockCheckTest <nl> " 32 : 29 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " case " ) , <nl> " 32 : 40 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " case " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputEmptyBlockCase . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputEmptyCase . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyCase . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyCase . java <nl> new file mode 100644 <nl> index 0000000 . . b8c1df3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyCase . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Input test file for testing empty LITERAL _ CASE . <nl> + / / Created : 2017 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> + <nl> + class InputEmptyCase <nl> + { <nl> + void method1 ( int a ) { <nl> + switch ( a ) { } <nl> + switch ( a ) { case 1 : ; } / / no violation <nl> + switch ( a ) { case 1 : { } } / / 1 violation <nl> + switch ( a ) { <nl> + case 1 : <nl> + } <nl> + switch ( a ) { <nl> + case 1 : / / 1 violation <nl> + { } <nl> + } <nl> + switch ( a ) { <nl> + case 1 : / / 1 violation if checking statements <nl> + { / / none if checking text <nl> + } <nl> + } <nl> + } <nl> + <nl> + public void method2 ( char c ) { <nl> + switch ( c ) { case 0 : } / / no violation <nl> + switch ( c ) { case 0 : { } method1 ( 1 ) ; } / / 1 violation <nl> + switch ( c ) { case 0 : method1 ( 0 ) ; { } } / / no violation <nl> + switch ( c ) { case 0 : case 1 : { } } / / 1 violation <nl> + switch ( c ) { case 0 : { } case 1 : { / / 2 violations if checking statements <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSemantic . java <nl> new file mode 100644 <nl> index 0000000 . . 94cda5d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSemantic . java <nl> @ @ - 0 , 0 + 1 , 87 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> + <nl> + import java . io . * ; / / star import for instantiation tests <nl> + import java . awt . Dimension ; / / explicit import for instantiation tests <nl> + import java . awt . Color ; <nl> + <nl> + / * * <nl> + * Test case for detecting empty block statements . <nl> + * @ author Lars K Ã¼ hne <nl> + * * / <nl> + class InputSemantic <nl> + { <nl> + static { <nl> + Boolean x = new Boolean ( true ) ; <nl> + } <nl> + <nl> + { <nl> + Boolean x = new Boolean ( true ) ; <nl> + Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; <nl> + } <nl> + <nl> + Boolean getBoolean ( ) <nl> + { <nl> + return new java . lang . Boolean ( true ) ; <nl> + } <nl> + <nl> + void exHandlerTest ( ) <nl> + { <nl> + try { <nl> + } <nl> + finally { <nl> + } <nl> + try { <nl> + / / something <nl> + } <nl> + finally { <nl> + / / something <nl> + } <nl> + try { <nl> + ; / / something <nl> + } <nl> + finally { <nl> + ; / / statement <nl> + } <nl> + } <nl> + <nl> + / * * test * * / <nl> + private static final long IGNORE = 666l + 666L ; <nl> + <nl> + public class EqualsVsHashCode1 <nl> + { <nl> + public boolean equals ( int a ) <nl> + { <nl> + return a = = 1 ; <nl> + } <nl> + } <nl> + <nl> + / / empty instance initializer <nl> + { <nl> + } <nl> + <nl> + private class InputBraces { <nl> + <nl> + } <nl> + <nl> + synchronized void foo ( ) { <nl> + synchronized ( this ) { } / / not OK <nl> + synchronized ( Class . class ) { / / OK <nl> + synchronized ( new Object ( ) ) { <nl> + / / not OK if checking statements <nl> + } <nl> + } <nl> + } <nl> + <nl> + <nl> + static { <nl> + <nl> + int a = 0 ; } <nl> + <nl> + static { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSemantic2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSemantic2 . java <nl> new file mode 100644 <nl> index 0000000 . . 01b93df <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSemantic2 . java <nl> @ @ - 0 , 0 + 1 , 38 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> + <nl> + import java . io . * ; / / star import for instantiation tests <nl> + import java . awt . Dimension ; / / explicit import for instantiation tests <nl> + import java . awt . Color ; <nl> + <nl> + class UpdateClass <nl> + { <nl> + 	 public void fooMethod ( ) <nl> + 	 { <nl> + 	 	 int a = 1 ; <nl> + 	 	 if ( a = = 1 ) { } / / is not OK <nl> + 	 	 char [ ] s = { ' 1 ' , ' 2 ' } ; <nl> + 	 	 int index = 2 ; <nl> + 	 	 if ( doSideEffect ( ) = = 1 ) { } / / is not OK , <nl> + 	 	 while ( ( a = index - 1 ) ! = 0 ) { } / / is OK <nl> + 	 	 for ( ; index < s . length & & s [ index ] ! = ' x ' ; index + + ) { } / / is OK <nl> + 	 	 if ( a = = 1 ) { } else { System . identityHashCode ( " a " ) ; } / / is not OK <nl> + 	 	 switch ( a ) { } / / warn <nl> + 	 	 switch ( a ) { / / ok <nl> + case 1 : <nl> + a = 2 ; <nl> + case 2 : <nl> + a = 3 ; <nl> + default : <nl> + a = 0 ; <nl> + } <nl> + 	 } <nl> + 	 <nl> + 	 public int doSideEffect ( ) <nl> + 	 { <nl> + 	 	 return 1 ; <nl> + 	 } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockAllowEmptyLoops . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockAllowEmptyLoops . java <nl> deleted file mode 100644 <nl> index b1f994a . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockAllowEmptyLoops . java <nl> + + + / dev / null <nl> @ @ - 1 , 38 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks . emptyblock ; <nl> - <nl> - import java . io . * ; / / star import for instantiation tests <nl> - import java . awt . Dimension ; / / explicit import for instantiation tests <nl> - import java . awt . Color ; <nl> - <nl> - class InputEmptyBlockAllowEmptyLoops <nl> - { <nl> - 	 public void fooMethod ( ) <nl> - 	 { <nl> - 	 	 int a = 1 ; <nl> - 	 	 if ( a = = 1 ) { } / / is not OK <nl> - 	 	 char [ ] s = { ' 1 ' , ' 2 ' } ; <nl> - 	 	 int index = 2 ; <nl> - 	 	 if ( doSideEffect ( ) = = 1 ) { } / / is not OK , <nl> - 	 	 while ( ( a = index - 1 ) ! = 0 ) { } / / is OK <nl> - 	 	 for ( ; index < s . length & & s [ index ] ! = ' x ' ; index + + ) { } / / is OK <nl> - 	 	 if ( a = = 1 ) { } else { System . identityHashCode ( " a " ) ; } / / is not OK <nl> - 	 	 switch ( a ) { } / / warn <nl> - 	 	 switch ( a ) { / / ok <nl> - case 1 : <nl> - a = 2 ; <nl> - case 2 : <nl> - a = 3 ; <nl> - default : <nl> - a = 0 ; <nl> - } <nl> - 	 } <nl> - 	 <nl> - 	 public int doSideEffect ( ) <nl> - 	 { <nl> - 	 	 return 1 ; <nl> - 	 } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockCase . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockCase . java <nl> deleted file mode 100644 <nl> index bf75c7b . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockCase . java <nl> + + + / dev / null <nl> @ @ - 1 , 36 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Input test file for testing empty LITERAL _ CASE . <nl> - / / Created : 2017 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks . emptyblock ; <nl> - <nl> - class InputEmptyBlockCase <nl> - { <nl> - void method1 ( int a ) { <nl> - switch ( a ) { } <nl> - switch ( a ) { case 1 : ; } / / no violation <nl> - switch ( a ) { case 1 : { } } / / 1 violation <nl> - switch ( a ) { <nl> - case 1 : <nl> - } <nl> - switch ( a ) { <nl> - case 1 : / / 1 violation <nl> - { } <nl> - } <nl> - switch ( a ) { <nl> - case 1 : / / 1 violation if checking statements <nl> - { / / none if checking text <nl> - } <nl> - } <nl> - } <nl> - <nl> - public void method2 ( char c ) { <nl> - switch ( c ) { case 0 : } / / no violation <nl> - switch ( c ) { case 0 : { } method1 ( 1 ) ; } / / 1 violation <nl> - switch ( c ) { case 0 : method1 ( 0 ) ; { } } / / no violation <nl> - switch ( c ) { case 0 : case 1 : { } } / / 1 violation <nl> - switch ( c ) { case 0 : { } case 1 : { / / 2 violations if checking statements <nl> - } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockDefault . java <nl> deleted file mode 100644 <nl> index d387c10 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockDefault . java <nl> + + + / dev / null <nl> @ @ - 1 , 87 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks . emptyblock ; <nl> - <nl> - import java . io . * ; / / star import for instantiation tests <nl> - import java . awt . Dimension ; / / explicit import for instantiation tests <nl> - import java . awt . Color ; <nl> - <nl> - / * * <nl> - * Test case for detecting empty block statements . <nl> - * @ author Lars K Ã¼ hne <nl> - * * / <nl> - class InputEmptyBlockDefault <nl> - { <nl> - static { <nl> - Boolean x = new Boolean ( true ) ; <nl> - } <nl> - <nl> - { <nl> - Boolean x = new Boolean ( true ) ; <nl> - Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; <nl> - } <nl> - <nl> - Boolean getBoolean ( ) <nl> - { <nl> - return new java . lang . Boolean ( true ) ; <nl> - } <nl> - <nl> - void exHandlerTest ( ) <nl> - { <nl> - try { <nl> - } <nl> - finally { <nl> - } <nl> - try { <nl> - / / something <nl> - } <nl> - finally { <nl> - / / something <nl> - } <nl> - try { <nl> - ; / / something <nl> - } <nl> - finally { <nl> - ; / / statement <nl> - } <nl> - } <nl> - <nl> - / * * test * * / <nl> - private static final long IGNORE = 666l + 666L ; <nl> - <nl> - public class EqualsVsHashCode1 <nl> - { <nl> - public boolean equals ( int a ) <nl> - { <nl> - return a = = 1 ; <nl> - } <nl> - } <nl> - <nl> - / / empty instance initializer <nl> - { <nl> - } <nl> - <nl> - private class InputBraces { <nl> - <nl> - } <nl> - <nl> - synchronized void foo ( ) { <nl> - synchronized ( this ) { } / / not OK <nl> - synchronized ( Class . class ) { / / OK <nl> - synchronized ( new Object ( ) ) { <nl> - / / not OK if checking statements <nl> - } <nl> - } <nl> - } <nl> - <nl> - <nl> - static { <nl> - <nl> - int a = 0 ; } <nl> - <nl> - static { <nl> - <nl> - } <nl> - }
NEAREST DIFF (one line): diff - - git a / . ci / run - link - check - plugin . sh b / . ci / run - link - check - plugin . sh <nl> index 038272a . . 434df02 100755 <nl> - - - a / . ci / run - link - check - plugin . sh <nl> + + + b / . ci / run - link - check - plugin . sh <nl> @ @ - 15 , 4 + 15 , 5 @ @ grep externalLink target / site / linkcheck . html | cat <nl> echo " - - - - - - - - - - - - grep of linkcheck . html - - END " <nl> RESULT = $ ( grep externalLink target / site / linkcheck . html | grep - v ' Read timed out ' | wc - l ) <nl> echo ' Exit code : ' $ RESULT <nl> - if [ [ $ RESULT ! = 0 ] ] ; then false ; fi <nl> \ No newline at end of file <nl> + if [ [ $ RESULT ! = 0 ] ] ; then false ; fi <nl> +

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java 
 index d58554f . . 2aeb83e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java 
 @ @ - 40 , 7 + 40 , 7 @ @ public class EmptyBlockCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " blocks " + File . separator + " emptyblock " + File . separator + filename ) ; 
 + + " blocks " + File . separator + filename ) ; 
 } 
 
 / * Additional test for jacoco , since valueOf ( ) 
 @ @ - 68 , 7 + 68 , 7 @ @ public class EmptyBlockCheckTest 
 " 73 : 41 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT ) , 
 " 84 : 12 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputEmptyBlockDefault . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 84 , 7 + 84 , 7 @ @ public class EmptyBlockCheckTest 
 " 71 : 29 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " synchronized " ) , 
 " 84 : 12 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " STATIC _ INIT " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputEmptyBlockDefault . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 103 , 7 + 103 , 7 @ @ public class EmptyBlockCheckTest 
 " 73 : 41 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT ) , 
 " 84 : 12 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputEmptyBlockDefault . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 120 , 7 + 120 , 7 @ @ public class EmptyBlockCheckTest 
 " 22 : 29 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT ) , 
 " 23 : 28 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputEmptyBlockAllowEmptyLoops . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputSemantic2 . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 137 , 7 + 137 , 7 @ @ public class EmptyBlockCheckTest 
 " 22 : 29 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " if " ) , 
 " 23 : 28 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " switch " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputEmptyBlockAllowEmptyLoops . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputSemantic2 . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 148 , 7 + 148 , 7 @ @ public class EmptyBlockCheckTest 
 try { 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checkConfig , getPath ( " InputEmptyBlockDefault . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 @ @ - 170 , 7 + 170 , 7 @ @ public class EmptyBlockCheckTest 
 " 31 : 37 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " case " ) , 
 " 32 : 29 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ EMPTY , " case " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputEmptyBlockCase . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputEmptyCase . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 187 , 7 + 187 , 7 @ @ public class EmptyBlockCheckTest 
 " 32 : 29 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " case " ) , 
 " 32 : 40 : " + getCheckMessage ( MSG _ KEY _ BLOCK _ NO _ STMT , " case " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputEmptyBlockCase . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputEmptyCase . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyCase . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyCase . java 
 new file mode 100644 
 index 0000000 . . b8c1df3 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyCase . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Input test file for testing empty LITERAL _ CASE . 
 + / / Created : 2017 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 + 
 + class InputEmptyCase 
 + { 
 + void method1 ( int a ) { 
 + switch ( a ) { } 
 + switch ( a ) { case 1 : ; } / / no violation 
 + switch ( a ) { case 1 : { } } / / 1 violation 
 + switch ( a ) { 
 + case 1 : 
 + } 
 + switch ( a ) { 
 + case 1 : / / 1 violation 
 + { } 
 + } 
 + switch ( a ) { 
 + case 1 : / / 1 violation if checking statements 
 + { / / none if checking text 
 + } 
 + } 
 + } 
 + 
 + public void method2 ( char c ) { 
 + switch ( c ) { case 0 : } / / no violation 
 + switch ( c ) { case 0 : { } method1 ( 1 ) ; } / / 1 violation 
 + switch ( c ) { case 0 : method1 ( 0 ) ; { } } / / no violation 
 + switch ( c ) { case 0 : case 1 : { } } / / 1 violation 
 + switch ( c ) { case 0 : { } case 1 : { / / 2 violations if checking statements 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSemantic . java 
 new file mode 100644 
 index 0000000 . . 94cda5d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSemantic . java 
 @ @ - 0 , 0 + 1 , 87 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 + 
 + import java . io . * ; / / star import for instantiation tests 
 + import java . awt . Dimension ; / / explicit import for instantiation tests 
 + import java . awt . Color ; 
 + 
 + / * * 
 + * Test case for detecting empty block statements . 
 + * @ author Lars K Ã¼ hne 
 + * * / 
 + class InputSemantic 
 + { 
 + static { 
 + Boolean x = new Boolean ( true ) ; 
 + } 
 + 
 + { 
 + Boolean x = new Boolean ( true ) ; 
 + Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; 
 + } 
 + 
 + Boolean getBoolean ( ) 
 + { 
 + return new java . lang . Boolean ( true ) ; 
 + } 
 + 
 + void exHandlerTest ( ) 
 + { 
 + try { 
 + } 
 + finally { 
 + } 
 + try { 
 + / / something 
 + } 
 + finally { 
 + / / something 
 + } 
 + try { 
 + ; / / something 
 + } 
 + finally { 
 + ; / / statement 
 + } 
 + } 
 + 
 + / * * test * * / 
 + private static final long IGNORE = 666l + 666L ; 
 + 
 + public class EqualsVsHashCode1 
 + { 
 + public boolean equals ( int a ) 
 + { 
 + return a = = 1 ; 
 + } 
 + } 
 + 
 + / / empty instance initializer 
 + { 
 + } 
 + 
 + private class InputBraces { 
 + 
 + } 
 + 
 + synchronized void foo ( ) { 
 + synchronized ( this ) { } / / not OK 
 + synchronized ( Class . class ) { / / OK 
 + synchronized ( new Object ( ) ) { 
 + / / not OK if checking statements 
 + } 
 + } 
 + } 
 + 
 + 
 + static { 
 + 
 + int a = 0 ; } 
 + 
 + static { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSemantic2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSemantic2 . java 
 new file mode 100644 
 index 0000000 . . 01b93df 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSemantic2 . java 
 @ @ - 0 , 0 + 1 , 38 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 + 
 + import java . io . * ; / / star import for instantiation tests 
 + import java . awt . Dimension ; / / explicit import for instantiation tests 
 + import java . awt . Color ; 
 + 
 + class UpdateClass 
 + { 
 + 	 public void fooMethod ( ) 
 + 	 { 
 + 	 	 int a = 1 ; 
 + 	 	 if ( a = = 1 ) { } / / is not OK 
 + 	 	 char [ ] s = { ' 1 ' , ' 2 ' } ; 
 + 	 	 int index = 2 ; 
 + 	 	 if ( doSideEffect ( ) = = 1 ) { } / / is not OK , 
 + 	 	 while ( ( a = index - 1 ) ! = 0 ) { } / / is OK 
 + 	 	 for ( ; index < s . length & & s [ index ] ! = ' x ' ; index + + ) { } / / is OK 
 + 	 	 if ( a = = 1 ) { } else { System . identityHashCode ( " a " ) ; } / / is not OK 
 + 	 	 switch ( a ) { } / / warn 
 + 	 	 switch ( a ) { / / ok 
 + case 1 : 
 + a = 2 ; 
 + case 2 : 
 + a = 3 ; 
 + default : 
 + a = 0 ; 
 + } 
 + 	 } 
 + 	 
 + 	 public int doSideEffect ( ) 
 + 	 { 
 + 	 	 return 1 ; 
 + 	 } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockAllowEmptyLoops . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockAllowEmptyLoops . java 
 deleted file mode 100644 
 index b1f994a . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockAllowEmptyLoops . java 
 + + + / dev / null 
 @ @ - 1 , 38 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . blocks . emptyblock ; 
 - 
 - import java . io . * ; / / star import for instantiation tests 
 - import java . awt . Dimension ; / / explicit import for instantiation tests 
 - import java . awt . Color ; 
 - 
 - class InputEmptyBlockAllowEmptyLoops 
 - { 
 - 	 public void fooMethod ( ) 
 - 	 { 
 - 	 	 int a = 1 ; 
 - 	 	 if ( a = = 1 ) { } / / is not OK 
 - 	 	 char [ ] s = { ' 1 ' , ' 2 ' } ; 
 - 	 	 int index = 2 ; 
 - 	 	 if ( doSideEffect ( ) = = 1 ) { } / / is not OK , 
 - 	 	 while ( ( a = index - 1 ) ! = 0 ) { } / / is OK 
 - 	 	 for ( ; index < s . length & & s [ index ] ! = ' x ' ; index + + ) { } / / is OK 
 - 	 	 if ( a = = 1 ) { } else { System . identityHashCode ( " a " ) ; } / / is not OK 
 - 	 	 switch ( a ) { } / / warn 
 - 	 	 switch ( a ) { / / ok 
 - case 1 : 
 - a = 2 ; 
 - case 2 : 
 - a = 3 ; 
 - default : 
 - a = 0 ; 
 - } 
 - 	 } 
 - 	 
 - 	 public int doSideEffect ( ) 
 - 	 { 
 - 	 	 return 1 ; 
 - 	 } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockCase . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockCase . java 
 deleted file mode 100644 
 index bf75c7b . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockCase . java 
 + + + / dev / null 
 @ @ - 1 , 36 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Input test file for testing empty LITERAL _ CASE . 
 - / / Created : 2017 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . blocks . emptyblock ; 
 - 
 - class InputEmptyBlockCase 
 - { 
 - void method1 ( int a ) { 
 - switch ( a ) { } 
 - switch ( a ) { case 1 : ; } / / no violation 
 - switch ( a ) { case 1 : { } } / / 1 violation 
 - switch ( a ) { 
 - case 1 : 
 - } 
 - switch ( a ) { 
 - case 1 : / / 1 violation 
 - { } 
 - } 
 - switch ( a ) { 
 - case 1 : / / 1 violation if checking statements 
 - { / / none if checking text 
 - } 
 - } 
 - } 
 - 
 - public void method2 ( char c ) { 
 - switch ( c ) { case 0 : } / / no violation 
 - switch ( c ) { case 0 : { } method1 ( 1 ) ; } / / 1 violation 
 - switch ( c ) { case 0 : method1 ( 0 ) ; { } } / / no violation 
 - switch ( c ) { case 0 : case 1 : { } } / / 1 violation 
 - switch ( c ) { case 0 : { } case 1 : { / / 2 violations if checking statements 
 - } 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockDefault . java 
 deleted file mode 100644 
 index d387c10 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptyblock / InputEmptyBlockDefault . java 
 + + + / dev / null 
 @ @ - 1 , 87 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . blocks . emptyblock ; 
 - 
 - import java . io . * ; / / star import for instantiation tests 
 - import java . awt . Dimension ; / / explicit import for instantiation tests 
 - import java . awt . Color ; 
 - 
 - / * * 
 - * Test case for detecting empty block statements . 
 - * @ author Lars K Ã¼ hne 
 - * * / 
 - class InputEmptyBlockDefault 
 - { 
 - static { 
 - Boolean x = new Boolean ( true ) ; 
 - } 
 - 
 - { 
 - Boolean x = new Boolean ( true ) ; 
 - Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; 
 - } 
 - 
 - Boolean getBoolean ( ) 
 - { 
 - return new java . lang . Boolean ( true ) ; 
 - } 
 - 
 - void exHandlerTest ( ) 
 - { 
 - try { 
 - } 
 - finally { 
 - } 
 - try { 
 - / / something 
 - } 
 - finally { 
 - / / something 
 - } 
 - try { 
 - ; / / something 
 - } 
 - finally { 
 - ; / / statement 
 - } 
 - } 
 - 
 - / * * test * * / 
 - private static final long IGNORE = 666l + 666L ; 
 - 
 - public class EqualsVsHashCode1 
 - { 
 - public boolean equals ( int a ) 
 - { 
 - return a = = 1 ; 
 - } 
 - } 
 - 
 - / / empty instance initializer 
 - { 
 - } 
 - 
 - private class InputBraces { 
 - 
 - } 
 - 
 - synchronized void foo ( ) { 
 - synchronized ( this ) { } / / not OK 
 - synchronized ( Class . class ) { / / OK 
 - synchronized ( new Object ( ) ) { 
 - / / not OK if checking statements 
 - } 
 - } 
 - } 
 - 
 - 
 - static { 
 - 
 - int a = 0 ; } 
 - 
 - static { 
 - 
 - } 
 - }

NEAREST DIFF:
diff - - git a / . ci / run - link - check - plugin . sh b / . ci / run - link - check - plugin . sh 
 index 038272a . . 434df02 100755 
 - - - a / . ci / run - link - check - plugin . sh 
 + + + b / . ci / run - link - check - plugin . sh 
 @ @ - 15 , 4 + 15 , 5 @ @ grep externalLink target / site / linkcheck . html | cat 
 echo " - - - - - - - - - - - - grep of linkcheck . html - - END " 
 RESULT = $ ( grep externalLink target / site / linkcheck . html | grep - v ' Read timed out ' | wc - l ) 
 echo ' Exit code : ' $ RESULT 
 - if [ [ $ RESULT ! = 0 ] ] ; then false ; fi 
 \ No newline at end of file 
 + if [ [ $ RESULT ! = 0 ] ] ; then false ; fi 
 +
