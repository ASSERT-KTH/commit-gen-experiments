BLEU SCORE: 0.49309782490179943

TEST MSG: config : bump maven - failsafe - plugin to 2 . 22 . 0
GENERATED MSG: Update maven - failsafe - plugin to 2 . 18 . 1 . # 1193

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index b27a260 . . 865f6e3 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1135 , 7 + 1135 , 7 @ @ <nl> < plugin > <nl> < groupId > org . apache . maven . plugins < / groupId > <nl> < artifactId > maven - failsafe - plugin < / artifactId > <nl> - < version > 2 . 21 . 0 < / version > <nl> + < version > 2 . 22 . 0 < / version > <nl> < configuration > <nl> < includes > <nl> < include > com / google / * * / * . java < / include >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java <nl> index c4818f8 . . 94ef42b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java <nl> @ @ - 41 , 6 + 41 , 10 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * a caller but allows any sub - classes to be caught <nl> * specifically if necessary . <nl> * < / p > <nl> + * < p > <nl> + * < b > ignorePrivateMethods < / b > - allows to skip private methods as they do <nl> + * not cause problems for other classes . <nl> + * < / p > <nl> * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > <nl> * / <nl> public final class ThrowsCountCheck extends Check { <nl> @ @ - 54 , 6 + 58 , 9 @ @ public final class ThrowsCountCheck extends Check { <nl> / * * default value of max property * / <nl> private static final int DEFAULT _ MAX = 1 ; <nl> <nl> + / * * whether private methods must be ignored * * / <nl> + private boolean ignorePrivateMethods = true ; <nl> + <nl> / * * maximum allowed throws statements * / <nl> private int max ; <nl> <nl> @ @ - 90 , 6 + 97 , 14 @ @ public final class ThrowsCountCheck extends Check { <nl> } <nl> <nl> / * * <nl> + * Sets whether private methods must be ignored . <nl> + * @ param ignorePrivateMethods whether private methods must be ignored . <nl> + * / <nl> + public void setIgnorePrivateMethods ( boolean ignorePrivateMethods ) { <nl> + this . ignorePrivateMethods = ignorePrivateMethods ; <nl> + } <nl> + <nl> + / * * <nl> * Setter for max property . <nl> * @ param max maximum allowed throws statements . <nl> * / <nl> @ @ - 112 , 7 + 127 , 8 @ @ public final class ThrowsCountCheck extends Check { <nl> * @ param ast throws for check . <nl> * / <nl> private void visitLiteralThrows ( DetailAST ast ) { <nl> - if ( ! isOverriding ( ast ) ) { <nl> + if ( ( ! ignorePrivateMethods | | ! isInPrivateMethod ( ast ) ) <nl> + & & ! isOverriding ( ast ) ) { <nl> / / Account for all the commas ! <nl> final int count = ( ast . getChildCount ( ) + 1 ) / 2 ; <nl> if ( count > getMax ( ) ) { <nl> @ @ - 159 , 4 + 175 , 14 @ @ public final class ThrowsCountCheck extends Check { <nl> } <nl> return name ; <nl> } <nl> + <nl> + / * * <nl> + * Checks if method , which throws an exception is private . <nl> + * @ param ast throws , which is being checked . <nl> + * @ return true , if method , which throws an exception is private . <nl> + * / <nl> + private static boolean isInPrivateMethod ( DetailAST ast ) { <nl> + final DetailAST methodModifiers = ast . getParent ( ) . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + return methodModifiers . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) ! = null ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> index 96c494c . . 4783dbe 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> @ @ - 45 , 7 + 45 , 7 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { <nl> " 14 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , <nl> " 18 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , <nl> " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 3 , 1 ) , <nl> - " 45 : 43 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , <nl> + " 48 : 43 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; <nl> @ @ - 90 , 4 + 90 , 18 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { <nl> assertEquals ( ast . toString ( ) , e . getMessage ( ) ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void testNotIgnorePrivateMethod ( ) throws Exception { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( ThrowsCountCheck . class ) ; <nl> + checkConfig . addAttribute ( " ignorePrivateMethods " , " false " ) ; <nl> + String [ ] expected = { <nl> + " 14 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , <nl> + " 18 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , <nl> + " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 3 , 1 ) , <nl> + " 29 : 28 : " + getCheckMessage ( MSG _ KEY , 3 , 1 ) , <nl> + " 48 : 43 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java <nl> index dfb57c1 . . 5024e71 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java <nl> @ @ - 25 , 6 + 25 , 9 @ @ public class InputThrowsCount { <nl> <nl> void method6 ( ) { <nl> } <nl> + <nl> + private void method7 ( ) throws Exception , AWTException , Throwable { <nl> + } <nl> } <nl> <nl> class SubClass extends InputThrowsCount { <nl> diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml <nl> index 51053a2 . . ac6401f 100644 <nl> - - - a / src / xdocs / config _ design . xml <nl> + + + b / src / xdocs / config _ design . xml <nl> @ @ - 591 , 6 + 591 , 11 @ @ public class StringUtils / / not final to allow subclassing <nl> type of exception need be checked for by a caller but any <nl> subclasses can be caught specifically if necessary . <nl> < / p > <nl> + <nl> + < p > <nl> + < b > ignorePrivateMethods < / b > - allows to skip private methods as they do <nl> + not cause problems for other classes . <nl> + < / p > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " > <nl> @ @ - 607 , 6 + 612 , 12 @ @ public class StringUtils / / not final to allow subclassing <nl> < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > <nl> < td > < code > 1 < / code > < / td > <nl> < / tr > <nl> + < tr > <nl> + < td > ignorePrivateMethods < / td > <nl> + < td > whether private methods must be ignored < / td > <nl> + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> + < td > < code > true < / code > < / td > <nl> + < / tr > <nl> < / table > <nl> < / subsection > <nl> <nl> @ @ - 620 , 6 + 631 , 15 @ @ public class StringUtils / / not final to allow subclassing <nl> & lt ; property name = & quot ; max & quot ; value = & quot ; 2 & quot ; / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> + <nl> + < p > <nl> + To configure the check so that it doesn ' t skip private methods : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; ThrowsCount & quot ; & gt ; <nl> + & lt ; property name = & quot ; ignorePrivateMethods & quot ; value = & quot ; false & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Package " >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index b27a260 . . 865f6e3 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1135 , 7 + 1135 , 7 @ @ 
 < plugin > 
 < groupId > org . apache . maven . plugins < / groupId > 
 < artifactId > maven - failsafe - plugin < / artifactId > 
 - < version > 2 . 21 . 0 < / version > 
 + < version > 2 . 22 . 0 < / version > 
 < configuration > 
 < includes > 
 < include > com / google / * * / * . java < / include >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java 
 index c4818f8 . . 94ef42b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java 
 @ @ - 41 , 6 + 41 , 10 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * a caller but allows any sub - classes to be caught 
 * specifically if necessary . 
 * < / p > 
 + * < p > 
 + * < b > ignorePrivateMethods < / b > - allows to skip private methods as they do 
 + * not cause problems for other classes . 
 + * < / p > 
 * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > 
 * / 
 public final class ThrowsCountCheck extends Check { 
 @ @ - 54 , 6 + 58 , 9 @ @ public final class ThrowsCountCheck extends Check { 
 / * * default value of max property * / 
 private static final int DEFAULT _ MAX = 1 ; 
 
 + / * * whether private methods must be ignored * * / 
 + private boolean ignorePrivateMethods = true ; 
 + 
 / * * maximum allowed throws statements * / 
 private int max ; 
 
 @ @ - 90 , 6 + 97 , 14 @ @ public final class ThrowsCountCheck extends Check { 
 } 
 
 / * * 
 + * Sets whether private methods must be ignored . 
 + * @ param ignorePrivateMethods whether private methods must be ignored . 
 + * / 
 + public void setIgnorePrivateMethods ( boolean ignorePrivateMethods ) { 
 + this . ignorePrivateMethods = ignorePrivateMethods ; 
 + } 
 + 
 + / * * 
 * Setter for max property . 
 * @ param max maximum allowed throws statements . 
 * / 
 @ @ - 112 , 7 + 127 , 8 @ @ public final class ThrowsCountCheck extends Check { 
 * @ param ast throws for check . 
 * / 
 private void visitLiteralThrows ( DetailAST ast ) { 
 - if ( ! isOverriding ( ast ) ) { 
 + if ( ( ! ignorePrivateMethods | | ! isInPrivateMethod ( ast ) ) 
 + & & ! isOverriding ( ast ) ) { 
 / / Account for all the commas ! 
 final int count = ( ast . getChildCount ( ) + 1 ) / 2 ; 
 if ( count > getMax ( ) ) { 
 @ @ - 159 , 4 + 175 , 14 @ @ public final class ThrowsCountCheck extends Check { 
 } 
 return name ; 
 } 
 + 
 + / * * 
 + * Checks if method , which throws an exception is private . 
 + * @ param ast throws , which is being checked . 
 + * @ return true , if method , which throws an exception is private . 
 + * / 
 + private static boolean isInPrivateMethod ( DetailAST ast ) { 
 + final DetailAST methodModifiers = ast . getParent ( ) . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + return methodModifiers . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) ! = null ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 index 96c494c . . 4783dbe 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 @ @ - 45 , 7 + 45 , 7 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { 
 " 14 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , 
 " 18 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , 
 " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 3 , 1 ) , 
 - " 45 : 43 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , 
 + " 48 : 43 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; 
 @ @ - 90 , 4 + 90 , 18 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { 
 assertEquals ( ast . toString ( ) , e . getMessage ( ) ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void testNotIgnorePrivateMethod ( ) throws Exception { 
 + DefaultConfiguration checkConfig = createCheckConfig ( ThrowsCountCheck . class ) ; 
 + checkConfig . addAttribute ( " ignorePrivateMethods " , " false " ) ; 
 + String [ ] expected = { 
 + " 14 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , 
 + " 18 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , 
 + " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 3 , 1 ) , 
 + " 29 : 28 : " + getCheckMessage ( MSG _ KEY , 3 , 1 ) , 
 + " 48 : 43 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java 
 index dfb57c1 . . 5024e71 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java 
 @ @ - 25 , 6 + 25 , 9 @ @ public class InputThrowsCount { 
 
 void method6 ( ) { 
 } 
 + 
 + private void method7 ( ) throws Exception , AWTException , Throwable { 
 + } 
 } 
 
 class SubClass extends InputThrowsCount { 
 diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml 
 index 51053a2 . . ac6401f 100644 
 - - - a / src / xdocs / config _ design . xml 
 + + + b / src / xdocs / config _ design . xml 
 @ @ - 591 , 6 + 591 , 11 @ @ public class StringUtils / / not final to allow subclassing 
 type of exception need be checked for by a caller but any 
 subclasses can be caught specifically if necessary . 
 < / p > 
 + 
 + < p > 
 + < b > ignorePrivateMethods < / b > - allows to skip private methods as they do 
 + not cause problems for other classes . 
 + < / p > 
 < / subsection > 
 
 < subsection name = " Properties " > 
 @ @ - 607 , 6 + 612 , 12 @ @ public class StringUtils / / not final to allow subclassing 
 < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > 
 < td > < code > 1 < / code > < / td > 
 < / tr > 
 + < tr > 
 + < td > ignorePrivateMethods < / td > 
 + < td > whether private methods must be ignored < / td > 
 + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 + < td > < code > true < / code > < / td > 
 + < / tr > 
 < / table > 
 < / subsection > 
 
 @ @ - 620 , 6 + 631 , 15 @ @ public class StringUtils / / not final to allow subclassing 
 & lt ; property name = & quot ; max & quot ; value = & quot ; 2 & quot ; / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 + 
 + < p > 
 + To configure the check so that it doesn ' t skip private methods : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; ThrowsCount & quot ; & gt ; 
 + & lt ; property name = & quot ; ignorePrivateMethods & quot ; value = & quot ; false & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Package " >
