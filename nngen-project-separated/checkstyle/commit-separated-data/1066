BLEU SCORE: 0.02276859592073037

TEST MSG: Issue # 941 : Update import ordering in google _ checks . xml according to changes in Google Style guide
GENERATED MSG: fixed problem with lexical order in CustomImportOrder # 1469

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / CustomImportOrderTest . java b / src / it / java / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / CustomImportOrderTest . java <nl> index 260636e . . 686486d 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / CustomImportOrderTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / CustomImportOrderTest . java <nl> @ @ - 31 , 13 + 31 , 13 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class CustomImportOrderTest extends BaseCheckTestSupport { <nl> <nl> - private static final String MSG _ SEPARATOR = " custom . import . order . line . separator " ; <nl> - private static final String MSG _ LEX = " custom . import . order . lex " ; <nl> - private static final String MSG _ ORDER = " custom . import . order " ; <nl> - <nl> / * * Shortcuts to make code more compact . * / <nl> - private static final String STD = CustomImportOrderCheck . STANDARD _ JAVA _ PACKAGE _ RULE _ GROUP ; <nl> - private static final String SPECIAL = CustomImportOrderCheck . SPECIAL _ IMPORTS _ RULE _ GROUP ; <nl> + private static final String MSG _ LINE _ SEPARATOR = CustomImportOrderCheck . MSG _ LINE _ SEPARATOR ; <nl> + private static final String MSG _ LEX = CustomImportOrderCheck . MSG _ LEX ; <nl> + private static final String MSG _ NONGROUP _ EXPECTED = <nl> + CustomImportOrderCheck . MSG _ NONGROUP _ EXPECTED ; <nl> + <nl> + private static final String STATIC = CustomImportOrderCheck . STATIC _ RULE _ GROUP ; <nl> <nl> private final Class < CustomImportOrderCheck > clazz = CustomImportOrderCheck . class ; <nl> <nl> @ @ - 53 , 16 + 53 , 14 @ @ public class CustomImportOrderTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 4 : " + getCheckMessage ( clazz , MSG _ LEX , " java . awt . Button . ABORT " , <nl> " java . io . File . createTempFile " ) , <nl> - " 7 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . awt . Button " ) , <nl> - " 8 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . awt . Frame " ) , <nl> - " 9 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . awt . Dialog " ) , <nl> - " 10 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . awt . event . ActionEvent " ) , <nl> - " 11 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " javax . swing . JComponent " ) , <nl> - " 12 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " javax . swing . JTable " ) , <nl> - " 13 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . io . File " ) , <nl> - " 14 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . io . IOException " ) , <nl> - " 15 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . io . InputStream " ) , <nl> - " 16 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . io . Reader " ) , <nl> + " 6 : " + getCheckMessage ( clazz , MSG _ LINE _ SEPARATOR , " java . awt . Button " ) , <nl> + " 8 : " + getCheckMessage ( clazz , MSG _ LEX , " java . awt . Dialog " , " java . awt . Frame " ) , <nl> + " 12 : " + getCheckMessage ( clazz , MSG _ LEX , " java . io . File " , " javax . swing . JTable " ) , <nl> + " 13 : " + getCheckMessage ( clazz , MSG _ LEX , " java . io . IOException " , " javax . swing . JTable " ) , <nl> + " 14 : " + getCheckMessage ( clazz , MSG _ LEX , " java . io . InputStream " , " javax . swing . JTable " ) , <nl> + " 15 : " + getCheckMessage ( clazz , MSG _ LEX , " java . io . Reader " , " javax . swing . JTable " ) , <nl> + " 18 : " + getCheckMessage ( clazz , MSG _ LEX , " com . google . common . base . Ascii " , <nl> + " javax . swing . JTable " ) , <nl> } ; <nl> <nl> final Configuration checkConfig = getCheckConfig ( " CustomImportOrder " ) ; <nl> @ @ - 78 , 16 + 76 , 16 @ @ public class CustomImportOrderTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 4 : " + getCheckMessage ( clazz , MSG _ LEX , " java . awt . Button . ABORT " , <nl> " java . io . File . createTempFile " ) , <nl> - " 7 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . List " ) , <nl> - " 8 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . StringTokenizer " ) , <nl> - " 9 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . * " ) , <nl> - " 10 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , <nl> + " 9 : " + getCheckMessage ( clazz , MSG _ LEX , " java . util . * " , " java . util . StringTokenizer " ) , <nl> + " 11 : " + getCheckMessage ( clazz , MSG _ LEX , " java . util . concurrent . * " , <nl> + " java . util . concurrent . AbstractExecutorService " ) , <nl> + " 13 : " + getCheckMessage ( clazz , MSG _ LEX , <nl> + " com . google . checkstyle . test . chapter2filebasic . rule21filename . * " , <nl> + " java . util . concurrent . AbstractExecutorService " ) , <nl> + " 14 : " + getCheckMessage ( clazz , MSG _ LEX , " com . sun . xml . internal . xsom . impl . scd . Iterators " , <nl> + " java . util . concurrent . AbstractExecutorService " ) , <nl> + " 16 : " + getCheckMessage ( clazz , MSG _ LEX , " com . google . common . reflect . * " , <nl> " java . util . concurrent . AbstractExecutorService " ) , <nl> - " 11 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . concurrent . * " ) , <nl> - " 14 : " + getCheckMessage ( clazz , MSG _ SEPARATOR , <nl> - " com . sun . xml . internal . xsom . impl . scd . Iterators " ) , <nl> - " 16 : " + getCheckMessage ( clazz , MSG _ ORDER , SPECIAL , STD , <nl> - " com . google . common . reflect . * " ) , <nl> } ; <nl> <nl> final Configuration checkConfig = getCheckConfig ( " CustomImportOrder " ) ; <nl> @ @ - 101 , 17 + 99 , 20 @ @ public class CustomImportOrderTest extends BaseCheckTestSupport { <nl> public void customImportTest3 ( ) throws Exception { <nl> <nl> final String [ ] expected = { <nl> - " 4 : " + getCheckMessage ( clazz , MSG _ LEX , " java . awt . Button . ABORT " , <nl> + " 4 : " + getCheckMessage ( clazz , MSG _ LINE _ SEPARATOR , " java . awt . Dialog " ) , <nl> + " 5 : " + getCheckMessage ( clazz , MSG _ NONGROUP _ EXPECTED , STATIC , <nl> + " javax . swing . WindowConstants . * " ) , <nl> + " 8 : " + getCheckMessage ( clazz , MSG _ LEX , <nl> + " com . google . checkstyle . test . chapter2filebasic . rule21filename . * " , " java . awt . Dialog " ) , <nl> + " 9 : " + getCheckMessage ( clazz , MSG _ LEX , " com . google . common . reflect . * " , <nl> + " java . awt . Dialog " ) , <nl> + " 10 : " + getCheckMessage ( clazz , MSG _ LEX , " com . sun . xml . internal . xsom . impl . scd . Iterators " , <nl> + " java . awt . Dialog " ) , <nl> + " 12 : " + getCheckMessage ( clazz , MSG _ NONGROUP _ EXPECTED , STATIC , <nl> " java . io . File . createTempFile " ) , <nl> - " 8 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . StringTokenizer " ) , <nl> - " 9 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . * " ) , <nl> - " 10 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , <nl> + " 14 : " + getCheckMessage ( clazz , MSG _ LEX , " java . util . * " , " java . util . StringTokenizer " ) , <nl> + " 16 : " + getCheckMessage ( clazz , MSG _ LEX , " java . util . concurrent . * " , <nl> " java . util . concurrent . AbstractExecutorService " ) , <nl> - " 11 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . concurrent . * " ) , <nl> - " 14 : " + getCheckMessage ( clazz , MSG _ SEPARATOR , <nl> - " com . sun . xml . internal . xsom . impl . scd . Iterators " ) , <nl> - " 16 : " + getCheckMessage ( clazz , MSG _ ORDER , SPECIAL , STD , <nl> - " com . google . common . reflect . * " ) , <nl> } ; <nl> <nl> final Configuration checkConfig = getCheckConfig ( " CustomImportOrder " ) ; <nl> @ @ - 132 , 4 + 133 , 15 @ @ public class CustomImportOrderTest extends BaseCheckTestSupport { <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> verify ( checkConfig , filePath , expected , warnList ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void validGoogleStyleOrderOfImportsTest ( ) throws Exception { <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + final Configuration checkConfig = getCheckConfig ( " CustomImportOrder " ) ; <nl> + final String filePath = getPath ( " InputCustomImportOrderNoImports . java " ) ; <nl> + <nl> + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder1 . java b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder1 . java <nl> index 65aae7c . . 435b71e 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder1 . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder1 . java <nl> @ @ - 3 , 20 + 3 , 18 @ @ package com . google . checkstyle . test . chapter3filestructure . rule333orderingandspaci <nl> import static java . io . File . createTempFile ; <nl> import static java . awt . Button . ABORT ; / / warn <nl> import static javax . swing . WindowConstants . * ; <nl> - <nl> import java . awt . Button ; / / warn <nl> - import java . awt . Frame ; / / warn <nl> + import java . awt . Frame ; <nl> import java . awt . Dialog ; / / warn <nl> - import java . awt . event . ActionEvent ; / / warn <nl> - import javax . swing . JComponent ; / / warn <nl> - import javax . swing . JTable ; / / warn <nl> + import java . awt . event . ActionEvent ; <nl> + import javax . swing . JComponent ; <nl> + import javax . swing . JTable ; <nl> import java . io . File ; / / warn <nl> import java . io . IOException ; / / warn <nl> import java . io . InputStream ; / / warn <nl> import java . io . Reader ; / / warn <nl> <nl> <nl> - <nl> - import com . google . common . base . Ascii ; <nl> + import com . google . common . base . Ascii ; / / warn <nl> <nl> public class InputCustomImportOrder1 { } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder2 . java b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder2 . java <nl> index 3f22c11 . . 9e6c848 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder2 . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder2 . java <nl> @ @ - 4 , 13 + 4 , 13 @ @ import static java . io . File . createTempFile ; <nl> import static java . awt . Button . ABORT ; / / warn <nl> import static javax . swing . WindowConstants . * ; <nl> <nl> - import java . util . List ; / / warn <nl> - import java . util . StringTokenizer ; / / warn <nl> + import java . util . List ; <nl> + import java . util . StringTokenizer ; <nl> import java . util . * ; / / warn <nl> - import java . util . concurrent . AbstractExecutorService ; / / warn <nl> + import java . util . concurrent . AbstractExecutorService ; <nl> import java . util . concurrent . * ; / / warn <nl> <nl> - import com . google . checkstyle . test . chapter2filebasic . rule21filename . * ; <nl> + import com . google . checkstyle . test . chapter2filebasic . rule21filename . * ; / / warn <nl> import com . sun . xml . internal . xsom . impl . scd . Iterators ; / / warn <nl> <nl> import com . google . common . reflect . * ; / / warn <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder3 . java b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder3 . java <nl> index 7b12d7a . . 5105775 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder3 . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder3 . java <nl> @ @ - 1 , 19 + 1 , 19 @ @ <nl> package com . google . checkstyle . test . chapter3filestructure . rule333orderingandspacing ; <nl> <nl> - import static java . io . File . createTempFile ; <nl> - import static java . awt . Button . ABORT ; / / warn <nl> - import static javax . swing . WindowConstants . * ; <nl> + import static java . awt . Button . ABORT ; <nl> + import java . awt . Dialog ; / / warn <nl> + import static javax . swing . WindowConstants . * ; / / warn <nl> <nl> <nl> - import java . util . StringTokenizer ; / / warn <nl> + import com . google . checkstyle . test . chapter2filebasic . rule21filename . * ; / / warn <nl> + import com . google . common . reflect . * ; / / warn <nl> + import com . sun . xml . internal . xsom . impl . scd . Iterators ; / / warn <nl> + import java . io . File ; <nl> + import static java . io . File . createTempFile ; / / warn <nl> + import java . util . StringTokenizer ; <nl> import java . util . * ; / / warn <nl> - import java . util . concurrent . AbstractExecutorService ; / / warn <nl> + import java . util . concurrent . AbstractExecutorService ; <nl> import java . util . concurrent . * ; / / warn <nl> <nl> - import com . google . checkstyle . test . chapter2filebasic . rule21filename . * ; <nl> - import com . sun . xml . internal . xsom . impl . scd . Iterators ; / / warn <nl> - <nl> - import com . google . common . reflect . * ; / / warn <nl> - <nl> public class InputCustomImportOrder3 { <nl> } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderNoImports . java b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderNoImports . java <nl> new file mode 100644 <nl> index 0000000 . . 6b3051f <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderNoImports . java <nl> @ @ - 0 , 0 + 1 , 4 @ @ <nl> + package com . google . checkstyle . test . chapter3filestructure . rule333orderingandspacing ; <nl> + <nl> + public class InputCustomImportOrderNoImports { <nl> + } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java <nl> index 021a224 . . b559e3f 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java <nl> @ @ - 6 , 16 + 6 , 14 @ @ import static com . puppycrawl . tools . checkstyle . utils . AnnotationUtility . getAnnotat <nl> import com . puppycrawl . tools . checkstyle . checks . design . FinalClassCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . design . ThrowsCountCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . design . VisibilityModifierCheck ; <nl> - <nl> import com . sun . accessibility . internal . resources . * ; <nl> - import org . apache . commons . beanutils . converters . ArrayConverter ; <nl> - <nl> import java . util . Arrays ; <nl> import java . util . BitSet ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> import java . util . NoSuchElementException ; <nl> import javax . accessibility . Accessible ; <nl> + import org . apache . commons . beanutils . converters . ArrayConverter ; <nl> <nl> public class InputCustomImportOrderValid { <nl> } <nl> diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml <nl> index 4fa2737 . . 2c06945 100644 <nl> - - - a / src / main / resources / google _ checks . xml <nl> + + + b / src / main / resources / google _ checks . xml <nl> @ @ - 159 , 9 + 159 , 9 @ @ <nl> < module name = " OverloadMethodsDeclarationOrder " / > <nl> < module name = " VariableDeclarationUsageDistance " / > <nl> < module name = " CustomImportOrder " > <nl> - < property name = " specialImportsRegExp " value = " com . google " / > <nl> < property name = " sortImportsInGroupAlphabetically " value = " true " / > <nl> - < property name = " customImportOrderRules " value = " STATIC # # # SPECIAL _ IMPORTS # # # THIRD _ PARTY _ PACKAGE # # # STANDARD _ JAVA _ PACKAGE " / > <nl> + < property name = " separateLineBetweenGroups " value = " true " / > <nl> + < property name = " customImportOrderRules " value = " STATIC # # # THIRD _ PARTY _ PACKAGE " / > <nl> < / module > <nl> < module name = " MethodParamPad " / > <nl> < module name = " OperatorWrap " >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java <nl> index dcd0e23 . . 1bce0d9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java <nl> @ @ - 226 , 7 + 226 , 7 @ @ public class LeftCurlyCheck <nl> * Skip lines that only contain { @ code TokenTypes . ANNOTATION } s . <nl> * If the received { @ code DetailAST } <nl> * has annotations within its modifiers then first token on the line <nl> - * of the first token afer all annotations is return . This might be <nl> + * of the first token after all annotations is return . This might be <nl> * an annotation . <nl> * Otherwise , the received { @ code DetailAST } is returned . <nl> * @ param ast { @ code DetailAST } . <nl> @ @ - 237 , 29 + 237 , 29 @ @ public class LeftCurlyCheck <nl> if ( modifiers = = null ) { <nl> return ast ; <nl> } <nl> - DetailAST lastAnnot = findLastAnnotation ( modifiers ) ; <nl> - if ( lastAnnot = = null ) { <nl> + DetailAST lastAnnotation = findLastAnnotation ( modifiers ) ; <nl> + if ( lastAnnotation = = null ) { <nl> / / There are no annotations . <nl> return ast ; <nl> } <nl> final DetailAST tokenAfterLast ; <nl> <nl> - if ( lastAnnot . getNextSibling ( ) = = null ) { <nl> + if ( lastAnnotation . getNextSibling ( ) = = null ) { <nl> tokenAfterLast = modifiers . getNextSibling ( ) ; <nl> } <nl> else { <nl> - tokenAfterLast = lastAnnot . getNextSibling ( ) ; <nl> + tokenAfterLast = lastAnnotation . getNextSibling ( ) ; <nl> } <nl> <nl> - if ( tokenAfterLast . getLineNo ( ) > lastAnnot . getLineNo ( ) ) { <nl> + if ( tokenAfterLast . getLineNo ( ) > lastAnnotation . getLineNo ( ) ) { <nl> return tokenAfterLast ; <nl> } <nl> - final int lastAnnotLineNumber = lastAnnot . getLineNo ( ) ; <nl> - while ( lastAnnot . getPreviousSibling ( ) ! = null <nl> - & & lastAnnot . getPreviousSibling ( ) . getLineNo ( ) = = lastAnnotLineNumber ) { <nl> - lastAnnot = lastAnnot . getPreviousSibling ( ) ; <nl> + final int lastAnnotationLineNumber = lastAnnotation . getLineNo ( ) ; <nl> + while ( lastAnnotation . getPreviousSibling ( ) ! = null <nl> + & & lastAnnotation . getPreviousSibling ( ) . getLineNo ( ) = = lastAnnotationLineNumber ) { <nl> + lastAnnotation = lastAnnotation . getPreviousSibling ( ) ; <nl> } <nl> - return lastAnnot ; <nl> + return lastAnnotation ; <nl> } <nl> <nl> / * * <nl> @ @ - 301 , 7 + 301 , 7 @ @ public class LeftCurlyCheck <nl> } <nl> else if ( startToken . getLineNo ( ) ! = brace . getLineNo ( ) ) { <nl> <nl> - validateNewLinePosion ( brace , startToken , braceLine ) ; <nl> + validateNewLinePosition ( brace , startToken , braceLine ) ; <nl> <nl> } <nl> } <nl> @ @ - 309 , 7 + 309 , 7 @ @ public class LeftCurlyCheck <nl> <nl> / * * <nl> * Validate EOL case <nl> - * @ param brace brase AST <nl> + * @ param brace brace AST <nl> * @ param braceLine line content <nl> * / <nl> private void validateEol ( DetailAST brace , String braceLine ) { <nl> @ @ - 327 , 8 + 327 , 7 @ @ public class LeftCurlyCheck <nl> * @ param startToken start Token <nl> * @ param braceLine content of line with Brace <nl> * / <nl> - private void validateNewLinePosion ( DetailAST brace , DetailAST startToken , <nl> - String braceLine ) { <nl> + private void validateNewLinePosition ( DetailAST brace , DetailAST startToken , String braceLine ) { <nl> / / not on the same line <nl> if ( startToken . getLineNo ( ) + 1 = = brace . getLineNo ( ) ) { <nl> if ( CommonUtils . whitespaceBefore ( brace . getColumnNo ( ) , braceLine ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> index 4df0dfd . . 235b047 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> @ @ - 337 , 8 + 337 , 8 @ @ public class NeedBracesCheck extends Check { <nl> * Checks if current case statement is single - line statement , e . g . : <nl> * < p > <nl> * { @ code <nl> - * case 1 : dosomeStuff ( ) ; break ; <nl> - * case 2 : dosomeStuff ( ) ; break ; <nl> + * case 1 : doSomeStuff ( ) ; break ; <nl> + * case 2 : doSomeStuff ( ) ; break ; <nl> * } <nl> * < / p > <nl> * @ param literalCase { @ link TokenTypes # LITERAL _ CASE case statement } . <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> index 4865e6c . . 0281dc5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> @ @ - 189 , 7 + 189 , 7 @ @ public class RightCurlyCheck extends AbstractOptionCheck < RightCurlyOption > { <nl> * @ param shouldStartLine do we need to check if right curly starts line . <nl> * @ param targetSourceLine line that we need to check if shouldStartLine is true . <nl> * @ return violation message or empty string <nl> - * if there was not violation durning validation . <nl> + * if there was not violation during validation . <nl> * / <nl> private static String validate ( Details details , RightCurlyOption bracePolicy , <nl> boolean shouldStartLine , String targetSourceLine ) { <nl> @ @ - 263 , 7 + 263 , 7 @ @ public class RightCurlyCheck extends AbstractOptionCheck < RightCurlyOption > { <nl> } <nl> <nl> / * * <nl> - * Checks wthether lcurly is in anonymous inner class initialization . <nl> + * Checks whether lcurly is in anonymous inner class initialization . <nl> * @ param lcurly left curly token . <nl> * @ return true if lcurly begins anonymous inner class initialization . <nl> * / <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java <nl> index 4003d35 . . 636662a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java <nl> @ @ - 36 , 7 + 36 , 7 @ @ public enum RightCurlyOption { <nl> * try { <nl> * . . . <nl> * } <nl> - * inally { <nl> + * finally { <nl> * <nl> * / / Single - line format of block <nl> * private int foo ( ) { return 1 ; } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> index 448abc8 . . e885dc3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> @ @ - 214 , 14 + 214 , 14 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck { <nl> } <nl> readerLines . add ( line ) ; <nl> } <nl> - postprocessHeaderLines ( ) ; <nl> + postProcessHeaderLines ( ) ; <nl> } <nl> <nl> / * * <nl> * Hook method for post processing header lines . <nl> * This implementation does nothing . <nl> * / <nl> - protected void postprocessHeaderLines ( ) { <nl> + protected void postProcessHeaderLines ( ) { <nl> / / No code by default <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> index b03ccbb . . b9394b7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> @ @ - 138 , 7 + 138 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { <nl> } <nl> <nl> @ Override <nl> - protected void postprocessHeaderLines ( ) { <nl> + protected void postProcessHeaderLines ( ) { <nl> final List < String > headerLines = getHeaderLines ( ) ; <nl> headerRegexps . clear ( ) ; <nl> for ( String line : headerLines ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> index c0d2e72 . . c393004 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> @ @ - 337 , 11 + 337 , 11 @ @ public class SuppressionCommentFilter <nl> try { <nl> if ( on ) { <nl> format = <nl> - expandFromCoont ( text , filter . checkFormat , filter . onRegexp ) ; <nl> + expandFromComment ( text , filter . checkFormat , filter . onRegexp ) ; <nl> tagCheckRegexp = Pattern . compile ( format ) ; <nl> if ( filter . messageFormat ! = null ) { <nl> format = <nl> - expandFromCoont ( text , filter . messageFormat , filter . onRegexp ) ; <nl> + expandFromComment ( text , filter . messageFormat , filter . onRegexp ) ; <nl> tagMessageRegexp = Pattern . compile ( format ) ; <nl> } <nl> else { <nl> @ @ - 350 , 14 + 350 , 14 @ @ public class SuppressionCommentFilter <nl> } <nl> else { <nl> format = <nl> - expandFromCoont ( text , filter . checkFormat , filter . offRegexp ) ; <nl> + expandFromComment ( text , filter . checkFormat , filter . offRegexp ) ; <nl> tagCheckRegexp = Pattern . compile ( format ) ; <nl> if ( filter . messageFormat ! = null ) { <nl> format = <nl> - expandFromCoont ( <nl> - text , <nl> - filter . messageFormat , <nl> - filter . offRegexp ) ; <nl> + expandFromComment ( <nl> + text , <nl> + filter . messageFormat , <nl> + filter . offRegexp ) ; <nl> tagMessageRegexp = Pattern . compile ( format ) ; <nl> } <nl> else { <nl> @ @ - 461 , 10 + 461 , 10 @ @ public class SuppressionCommentFilter <nl> * @ param regexp the parsed expander . <nl> * @ return the expanded string <nl> * / <nl> - private static String expandFromCoont ( <nl> - String comment , <nl> - String stringToExpand , <nl> - Pattern regexp ) { <nl> + private static String expandFromComment ( <nl> + String comment , <nl> + String stringToExpand , <nl> + Pattern regexp ) { <nl> final Matcher matcher = regexp . matcher ( comment ) ; <nl> / / Match primarily for effect . <nl> if ( ! matcher . find ( ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoader . java <nl> index 8cc7533 . . 5aea2f5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoader . java <nl> @ @ - 81 , 18 + 81 , 18 @ @ public final class SuppressionsLoader <nl> public void startElement ( String namespaceURI , <nl> String localName , <nl> String qName , <nl> - Attributes atts ) <nl> + Attributes attributes ) <nl> throws SAXException { <nl> if ( " suppress " . equals ( qName ) ) { <nl> / / add SuppressElement filter to the filter chain <nl> - final String checks = atts . getValue ( " checks " ) ; <nl> - final String modId = atts . getValue ( " id " ) ; <nl> + final String checks = attributes . getValue ( " checks " ) ; <nl> + final String modId = attributes . getValue ( " id " ) ; <nl> if ( checks = = null & & modId = = null ) { <nl> throw new SAXException ( " missing checks and id attribute " ) ; <nl> } <nl> final SuppressElement suppress ; <nl> try { <nl> - final String files = atts . getValue ( " files " ) ; <nl> + final String files = attributes . getValue ( " files " ) ; <nl> suppress = new SuppressElement ( files ) ; <nl> if ( modId ! = null ) { <nl> suppress . setModuleId ( modId ) ; <nl> @ @ - 104 , 11 + 104 , 11 @ @ public final class SuppressionsLoader <nl> catch ( final PatternSyntaxException ignored ) { <nl> throw new SAXException ( " invalid files or checks format " ) ; <nl> } <nl> - final String lines = atts . getValue ( " lines " ) ; <nl> + final String lines = attributes . getValue ( " lines " ) ; <nl> if ( lines ! = null ) { <nl> suppress . setLines ( lines ) ; <nl> } <nl> - final String columns = atts . getValue ( " columns " ) ; <nl> + final String columns = attributes . getValue ( " columns " ) ; <nl> if ( columns ! = null ) { <nl> suppress . setColumns ( columns ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> index 1751065 . . 851a306 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> @ @ - 57 , 7 + 57 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testSigleLineStatements ( ) throws Exception { <nl> + public void testSingleLineStatements ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( NeedBracesCheck . class ) ; <nl> checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; <nl> @ @ - 75 , 7 + 75 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testSigleLineLambda ( ) throws Exception { <nl> + public void testSingleLineLambda ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( NeedBracesCheck . class ) ; <nl> checkConfig . addAttribute ( " tokens " , " LAMBDA " ) ; <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testSigleLineCaseDefault ( ) throws Exception { <nl> + public void testSingleLineCaseDefault ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( NeedBracesCheck . class ) ; <nl> checkConfig . addAttribute ( " tokens " , " LITERAL _ CASE , LITERAL _ DEFAULT " ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> index 870b047 . . a50ee00 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { <nl> public void testNonExistingHeaderFile ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( HeaderCheck . class ) ; <nl> - checkConfig . addAttribute ( " headerFile " , getPath ( " nonexisting . file " ) ) ; <nl> + checkConfig . addAttribute ( " headerFile " , getPath ( " nonExisting . file " ) ) ; <nl> try { <nl> createChecker ( checkConfig ) ; <nl> fail ( ) ;

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / CustomImportOrderTest . java b / src / it / java / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / CustomImportOrderTest . java 
 index 260636e . . 686486d 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / CustomImportOrderTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / CustomImportOrderTest . java 
 @ @ - 31 , 13 + 31 , 13 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class CustomImportOrderTest extends BaseCheckTestSupport { 
 
 - private static final String MSG _ SEPARATOR = " custom . import . order . line . separator " ; 
 - private static final String MSG _ LEX = " custom . import . order . lex " ; 
 - private static final String MSG _ ORDER = " custom . import . order " ; 
 - 
 / * * Shortcuts to make code more compact . * / 
 - private static final String STD = CustomImportOrderCheck . STANDARD _ JAVA _ PACKAGE _ RULE _ GROUP ; 
 - private static final String SPECIAL = CustomImportOrderCheck . SPECIAL _ IMPORTS _ RULE _ GROUP ; 
 + private static final String MSG _ LINE _ SEPARATOR = CustomImportOrderCheck . MSG _ LINE _ SEPARATOR ; 
 + private static final String MSG _ LEX = CustomImportOrderCheck . MSG _ LEX ; 
 + private static final String MSG _ NONGROUP _ EXPECTED = 
 + CustomImportOrderCheck . MSG _ NONGROUP _ EXPECTED ; 
 + 
 + private static final String STATIC = CustomImportOrderCheck . STATIC _ RULE _ GROUP ; 
 
 private final Class < CustomImportOrderCheck > clazz = CustomImportOrderCheck . class ; 
 
 @ @ - 53 , 16 + 53 , 14 @ @ public class CustomImportOrderTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 4 : " + getCheckMessage ( clazz , MSG _ LEX , " java . awt . Button . ABORT " , 
 " java . io . File . createTempFile " ) , 
 - " 7 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . awt . Button " ) , 
 - " 8 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . awt . Frame " ) , 
 - " 9 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . awt . Dialog " ) , 
 - " 10 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . awt . event . ActionEvent " ) , 
 - " 11 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " javax . swing . JComponent " ) , 
 - " 12 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " javax . swing . JTable " ) , 
 - " 13 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . io . File " ) , 
 - " 14 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . io . IOException " ) , 
 - " 15 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . io . InputStream " ) , 
 - " 16 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . io . Reader " ) , 
 + " 6 : " + getCheckMessage ( clazz , MSG _ LINE _ SEPARATOR , " java . awt . Button " ) , 
 + " 8 : " + getCheckMessage ( clazz , MSG _ LEX , " java . awt . Dialog " , " java . awt . Frame " ) , 
 + " 12 : " + getCheckMessage ( clazz , MSG _ LEX , " java . io . File " , " javax . swing . JTable " ) , 
 + " 13 : " + getCheckMessage ( clazz , MSG _ LEX , " java . io . IOException " , " javax . swing . JTable " ) , 
 + " 14 : " + getCheckMessage ( clazz , MSG _ LEX , " java . io . InputStream " , " javax . swing . JTable " ) , 
 + " 15 : " + getCheckMessage ( clazz , MSG _ LEX , " java . io . Reader " , " javax . swing . JTable " ) , 
 + " 18 : " + getCheckMessage ( clazz , MSG _ LEX , " com . google . common . base . Ascii " , 
 + " javax . swing . JTable " ) , 
 } ; 
 
 final Configuration checkConfig = getCheckConfig ( " CustomImportOrder " ) ; 
 @ @ - 78 , 16 + 76 , 16 @ @ public class CustomImportOrderTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 4 : " + getCheckMessage ( clazz , MSG _ LEX , " java . awt . Button . ABORT " , 
 " java . io . File . createTempFile " ) , 
 - " 7 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . List " ) , 
 - " 8 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . StringTokenizer " ) , 
 - " 9 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . * " ) , 
 - " 10 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , 
 + " 9 : " + getCheckMessage ( clazz , MSG _ LEX , " java . util . * " , " java . util . StringTokenizer " ) , 
 + " 11 : " + getCheckMessage ( clazz , MSG _ LEX , " java . util . concurrent . * " , 
 + " java . util . concurrent . AbstractExecutorService " ) , 
 + " 13 : " + getCheckMessage ( clazz , MSG _ LEX , 
 + " com . google . checkstyle . test . chapter2filebasic . rule21filename . * " , 
 + " java . util . concurrent . AbstractExecutorService " ) , 
 + " 14 : " + getCheckMessage ( clazz , MSG _ LEX , " com . sun . xml . internal . xsom . impl . scd . Iterators " , 
 + " java . util . concurrent . AbstractExecutorService " ) , 
 + " 16 : " + getCheckMessage ( clazz , MSG _ LEX , " com . google . common . reflect . * " , 
 " java . util . concurrent . AbstractExecutorService " ) , 
 - " 11 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . concurrent . * " ) , 
 - " 14 : " + getCheckMessage ( clazz , MSG _ SEPARATOR , 
 - " com . sun . xml . internal . xsom . impl . scd . Iterators " ) , 
 - " 16 : " + getCheckMessage ( clazz , MSG _ ORDER , SPECIAL , STD , 
 - " com . google . common . reflect . * " ) , 
 } ; 
 
 final Configuration checkConfig = getCheckConfig ( " CustomImportOrder " ) ; 
 @ @ - 101 , 17 + 99 , 20 @ @ public class CustomImportOrderTest extends BaseCheckTestSupport { 
 public void customImportTest3 ( ) throws Exception { 
 
 final String [ ] expected = { 
 - " 4 : " + getCheckMessage ( clazz , MSG _ LEX , " java . awt . Button . ABORT " , 
 + " 4 : " + getCheckMessage ( clazz , MSG _ LINE _ SEPARATOR , " java . awt . Dialog " ) , 
 + " 5 : " + getCheckMessage ( clazz , MSG _ NONGROUP _ EXPECTED , STATIC , 
 + " javax . swing . WindowConstants . * " ) , 
 + " 8 : " + getCheckMessage ( clazz , MSG _ LEX , 
 + " com . google . checkstyle . test . chapter2filebasic . rule21filename . * " , " java . awt . Dialog " ) , 
 + " 9 : " + getCheckMessage ( clazz , MSG _ LEX , " com . google . common . reflect . * " , 
 + " java . awt . Dialog " ) , 
 + " 10 : " + getCheckMessage ( clazz , MSG _ LEX , " com . sun . xml . internal . xsom . impl . scd . Iterators " , 
 + " java . awt . Dialog " ) , 
 + " 12 : " + getCheckMessage ( clazz , MSG _ NONGROUP _ EXPECTED , STATIC , 
 " java . io . File . createTempFile " ) , 
 - " 8 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . StringTokenizer " ) , 
 - " 9 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . * " ) , 
 - " 10 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , 
 + " 14 : " + getCheckMessage ( clazz , MSG _ LEX , " java . util . * " , " java . util . StringTokenizer " ) , 
 + " 16 : " + getCheckMessage ( clazz , MSG _ LEX , " java . util . concurrent . * " , 
 " java . util . concurrent . AbstractExecutorService " ) , 
 - " 11 : " + getCheckMessage ( clazz , MSG _ ORDER , STD , SPECIAL , " java . util . concurrent . * " ) , 
 - " 14 : " + getCheckMessage ( clazz , MSG _ SEPARATOR , 
 - " com . sun . xml . internal . xsom . impl . scd . Iterators " ) , 
 - " 16 : " + getCheckMessage ( clazz , MSG _ ORDER , SPECIAL , STD , 
 - " com . google . common . reflect . * " ) , 
 } ; 
 
 final Configuration checkConfig = getCheckConfig ( " CustomImportOrder " ) ; 
 @ @ - 132 , 4 + 133 , 15 @ @ public class CustomImportOrderTest extends BaseCheckTestSupport { 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 verify ( checkConfig , filePath , expected , warnList ) ; 
 } 
 + 
 + @ Test 
 + public void validGoogleStyleOrderOfImportsTest ( ) throws Exception { 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + final Configuration checkConfig = getCheckConfig ( " CustomImportOrder " ) ; 
 + final String filePath = getPath ( " InputCustomImportOrderNoImports . java " ) ; 
 + 
 + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder1 . java b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder1 . java 
 index 65aae7c . . 435b71e 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder1 . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder1 . java 
 @ @ - 3 , 20 + 3 , 18 @ @ package com . google . checkstyle . test . chapter3filestructure . rule333orderingandspaci 
 import static java . io . File . createTempFile ; 
 import static java . awt . Button . ABORT ; / / warn 
 import static javax . swing . WindowConstants . * ; 
 - 
 import java . awt . Button ; / / warn 
 - import java . awt . Frame ; / / warn 
 + import java . awt . Frame ; 
 import java . awt . Dialog ; / / warn 
 - import java . awt . event . ActionEvent ; / / warn 
 - import javax . swing . JComponent ; / / warn 
 - import javax . swing . JTable ; / / warn 
 + import java . awt . event . ActionEvent ; 
 + import javax . swing . JComponent ; 
 + import javax . swing . JTable ; 
 import java . io . File ; / / warn 
 import java . io . IOException ; / / warn 
 import java . io . InputStream ; / / warn 
 import java . io . Reader ; / / warn 
 
 
 - 
 - import com . google . common . base . Ascii ; 
 + import com . google . common . base . Ascii ; / / warn 
 
 public class InputCustomImportOrder1 { } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder2 . java b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder2 . java 
 index 3f22c11 . . 9e6c848 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder2 . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder2 . java 
 @ @ - 4 , 13 + 4 , 13 @ @ import static java . io . File . createTempFile ; 
 import static java . awt . Button . ABORT ; / / warn 
 import static javax . swing . WindowConstants . * ; 
 
 - import java . util . List ; / / warn 
 - import java . util . StringTokenizer ; / / warn 
 + import java . util . List ; 
 + import java . util . StringTokenizer ; 
 import java . util . * ; / / warn 
 - import java . util . concurrent . AbstractExecutorService ; / / warn 
 + import java . util . concurrent . AbstractExecutorService ; 
 import java . util . concurrent . * ; / / warn 
 
 - import com . google . checkstyle . test . chapter2filebasic . rule21filename . * ; 
 + import com . google . checkstyle . test . chapter2filebasic . rule21filename . * ; / / warn 
 import com . sun . xml . internal . xsom . impl . scd . Iterators ; / / warn 
 
 import com . google . common . reflect . * ; / / warn 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder3 . java b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder3 . java 
 index 7b12d7a . . 5105775 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder3 . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrder3 . java 
 @ @ - 1 , 19 + 1 , 19 @ @ 
 package com . google . checkstyle . test . chapter3filestructure . rule333orderingandspacing ; 
 
 - import static java . io . File . createTempFile ; 
 - import static java . awt . Button . ABORT ; / / warn 
 - import static javax . swing . WindowConstants . * ; 
 + import static java . awt . Button . ABORT ; 
 + import java . awt . Dialog ; / / warn 
 + import static javax . swing . WindowConstants . * ; / / warn 
 
 
 - import java . util . StringTokenizer ; / / warn 
 + import com . google . checkstyle . test . chapter2filebasic . rule21filename . * ; / / warn 
 + import com . google . common . reflect . * ; / / warn 
 + import com . sun . xml . internal . xsom . impl . scd . Iterators ; / / warn 
 + import java . io . File ; 
 + import static java . io . File . createTempFile ; / / warn 
 + import java . util . StringTokenizer ; 
 import java . util . * ; / / warn 
 - import java . util . concurrent . AbstractExecutorService ; / / warn 
 + import java . util . concurrent . AbstractExecutorService ; 
 import java . util . concurrent . * ; / / warn 
 
 - import com . google . checkstyle . test . chapter2filebasic . rule21filename . * ; 
 - import com . sun . xml . internal . xsom . impl . scd . Iterators ; / / warn 
 - 
 - import com . google . common . reflect . * ; / / warn 
 - 
 public class InputCustomImportOrder3 { 
 } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderNoImports . java b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderNoImports . java 
 new file mode 100644 
 index 0000000 . . 6b3051f 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderNoImports . java 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + package com . google . checkstyle . test . chapter3filestructure . rule333orderingandspacing ; 
 + 
 + public class InputCustomImportOrderNoImports { 
 + } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java 
 index 021a224 . . b559e3f 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter3filestructure / rule333orderingandspacing / InputCustomImportOrderValid . java 
 @ @ - 6 , 16 + 6 , 14 @ @ import static com . puppycrawl . tools . checkstyle . utils . AnnotationUtility . getAnnotat 
 import com . puppycrawl . tools . checkstyle . checks . design . FinalClassCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . design . ThrowsCountCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . design . VisibilityModifierCheck ; 
 - 
 import com . sun . accessibility . internal . resources . * ; 
 - import org . apache . commons . beanutils . converters . ArrayConverter ; 
 - 
 import java . util . Arrays ; 
 import java . util . BitSet ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 import java . util . NoSuchElementException ; 
 import javax . accessibility . Accessible ; 
 + import org . apache . commons . beanutils . converters . ArrayConverter ; 
 
 public class InputCustomImportOrderValid { 
 } 
 diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml 
 index 4fa2737 . . 2c06945 100644 
 - - - a / src / main / resources / google _ checks . xml 
 + + + b / src / main / resources / google _ checks . xml 
 @ @ - 159 , 9 + 159 , 9 @ @ 
 < module name = " OverloadMethodsDeclarationOrder " / > 
 < module name = " VariableDeclarationUsageDistance " / > 
 < module name = " CustomImportOrder " > 
 - < property name = " specialImportsRegExp " value = " com . google " / > 
 < property name = " sortImportsInGroupAlphabetically " value = " true " / > 
 - < property name = " customImportOrderRules " value = " STATIC # # # SPECIAL _ IMPORTS # # # THIRD _ PARTY _ PACKAGE # # # STANDARD _ JAVA _ PACKAGE " / > 
 + < property name = " separateLineBetweenGroups " value = " true " / > 
 + < property name = " customImportOrderRules " value = " STATIC # # # THIRD _ PARTY _ PACKAGE " / > 
 < / module > 
 < module name = " MethodParamPad " / > 
 < module name = " OperatorWrap " >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java 
 index dcd0e23 . . 1bce0d9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java 
 @ @ - 226 , 7 + 226 , 7 @ @ public class LeftCurlyCheck 
 * Skip lines that only contain { @ code TokenTypes . ANNOTATION } s . 
 * If the received { @ code DetailAST } 
 * has annotations within its modifiers then first token on the line 
 - * of the first token afer all annotations is return . This might be 
 + * of the first token after all annotations is return . This might be 
 * an annotation . 
 * Otherwise , the received { @ code DetailAST } is returned . 
 * @ param ast { @ code DetailAST } . 
 @ @ - 237 , 29 + 237 , 29 @ @ public class LeftCurlyCheck 
 if ( modifiers = = null ) { 
 return ast ; 
 } 
 - DetailAST lastAnnot = findLastAnnotation ( modifiers ) ; 
 - if ( lastAnnot = = null ) { 
 + DetailAST lastAnnotation = findLastAnnotation ( modifiers ) ; 
 + if ( lastAnnotation = = null ) { 
 / / There are no annotations . 
 return ast ; 
 } 
 final DetailAST tokenAfterLast ; 
 
 - if ( lastAnnot . getNextSibling ( ) = = null ) { 
 + if ( lastAnnotation . getNextSibling ( ) = = null ) { 
 tokenAfterLast = modifiers . getNextSibling ( ) ; 
 } 
 else { 
 - tokenAfterLast = lastAnnot . getNextSibling ( ) ; 
 + tokenAfterLast = lastAnnotation . getNextSibling ( ) ; 
 } 
 
 - if ( tokenAfterLast . getLineNo ( ) > lastAnnot . getLineNo ( ) ) { 
 + if ( tokenAfterLast . getLineNo ( ) > lastAnnotation . getLineNo ( ) ) { 
 return tokenAfterLast ; 
 } 
 - final int lastAnnotLineNumber = lastAnnot . getLineNo ( ) ; 
 - while ( lastAnnot . getPreviousSibling ( ) ! = null 
 - & & lastAnnot . getPreviousSibling ( ) . getLineNo ( ) = = lastAnnotLineNumber ) { 
 - lastAnnot = lastAnnot . getPreviousSibling ( ) ; 
 + final int lastAnnotationLineNumber = lastAnnotation . getLineNo ( ) ; 
 + while ( lastAnnotation . getPreviousSibling ( ) ! = null 
 + & & lastAnnotation . getPreviousSibling ( ) . getLineNo ( ) = = lastAnnotationLineNumber ) { 
 + lastAnnotation = lastAnnotation . getPreviousSibling ( ) ; 
 } 
 - return lastAnnot ; 
 + return lastAnnotation ; 
 } 
 
 / * * 
 @ @ - 301 , 7 + 301 , 7 @ @ public class LeftCurlyCheck 
 } 
 else if ( startToken . getLineNo ( ) ! = brace . getLineNo ( ) ) { 
 
 - validateNewLinePosion ( brace , startToken , braceLine ) ; 
 + validateNewLinePosition ( brace , startToken , braceLine ) ; 
 
 } 
 } 
 @ @ - 309 , 7 + 309 , 7 @ @ public class LeftCurlyCheck 
 
 / * * 
 * Validate EOL case 
 - * @ param brace brase AST 
 + * @ param brace brace AST 
 * @ param braceLine line content 
 * / 
 private void validateEol ( DetailAST brace , String braceLine ) { 
 @ @ - 327 , 8 + 327 , 7 @ @ public class LeftCurlyCheck 
 * @ param startToken start Token 
 * @ param braceLine content of line with Brace 
 * / 
 - private void validateNewLinePosion ( DetailAST brace , DetailAST startToken , 
 - String braceLine ) { 
 + private void validateNewLinePosition ( DetailAST brace , DetailAST startToken , String braceLine ) { 
 / / not on the same line 
 if ( startToken . getLineNo ( ) + 1 = = brace . getLineNo ( ) ) { 
 if ( CommonUtils . whitespaceBefore ( brace . getColumnNo ( ) , braceLine ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 index 4df0dfd . . 235b047 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 @ @ - 337 , 8 + 337 , 8 @ @ public class NeedBracesCheck extends Check { 
 * Checks if current case statement is single - line statement , e . g . : 
 * < p > 
 * { @ code 
 - * case 1 : dosomeStuff ( ) ; break ; 
 - * case 2 : dosomeStuff ( ) ; break ; 
 + * case 1 : doSomeStuff ( ) ; break ; 
 + * case 2 : doSomeStuff ( ) ; break ; 
 * } 
 * < / p > 
 * @ param literalCase { @ link TokenTypes # LITERAL _ CASE case statement } . 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 index 4865e6c . . 0281dc5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 @ @ - 189 , 7 + 189 , 7 @ @ public class RightCurlyCheck extends AbstractOptionCheck < RightCurlyOption > { 
 * @ param shouldStartLine do we need to check if right curly starts line . 
 * @ param targetSourceLine line that we need to check if shouldStartLine is true . 
 * @ return violation message or empty string 
 - * if there was not violation durning validation . 
 + * if there was not violation during validation . 
 * / 
 private static String validate ( Details details , RightCurlyOption bracePolicy , 
 boolean shouldStartLine , String targetSourceLine ) { 
 @ @ - 263 , 7 + 263 , 7 @ @ public class RightCurlyCheck extends AbstractOptionCheck < RightCurlyOption > { 
 } 
 
 / * * 
 - * Checks wthether lcurly is in anonymous inner class initialization . 
 + * Checks whether lcurly is in anonymous inner class initialization . 
 * @ param lcurly left curly token . 
 * @ return true if lcurly begins anonymous inner class initialization . 
 * / 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java 
 index 4003d35 . . 636662a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java 
 @ @ - 36 , 7 + 36 , 7 @ @ public enum RightCurlyOption { 
 * try { 
 * . . . 
 * } 
 - * inally { 
 + * finally { 
 * 
 * / / Single - line format of block 
 * private int foo ( ) { return 1 ; } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 index 448abc8 . . e885dc3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 @ @ - 214 , 14 + 214 , 14 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck { 
 } 
 readerLines . add ( line ) ; 
 } 
 - postprocessHeaderLines ( ) ; 
 + postProcessHeaderLines ( ) ; 
 } 
 
 / * * 
 * Hook method for post processing header lines . 
 * This implementation does nothing . 
 * / 
 - protected void postprocessHeaderLines ( ) { 
 + protected void postProcessHeaderLines ( ) { 
 / / No code by default 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 index b03ccbb . . b9394b7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 @ @ - 138 , 7 + 138 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { 
 } 
 
 @ Override 
 - protected void postprocessHeaderLines ( ) { 
 + protected void postProcessHeaderLines ( ) { 
 final List < String > headerLines = getHeaderLines ( ) ; 
 headerRegexps . clear ( ) ; 
 for ( String line : headerLines ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 index c0d2e72 . . c393004 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 @ @ - 337 , 11 + 337 , 11 @ @ public class SuppressionCommentFilter 
 try { 
 if ( on ) { 
 format = 
 - expandFromCoont ( text , filter . checkFormat , filter . onRegexp ) ; 
 + expandFromComment ( text , filter . checkFormat , filter . onRegexp ) ; 
 tagCheckRegexp = Pattern . compile ( format ) ; 
 if ( filter . messageFormat ! = null ) { 
 format = 
 - expandFromCoont ( text , filter . messageFormat , filter . onRegexp ) ; 
 + expandFromComment ( text , filter . messageFormat , filter . onRegexp ) ; 
 tagMessageRegexp = Pattern . compile ( format ) ; 
 } 
 else { 
 @ @ - 350 , 14 + 350 , 14 @ @ public class SuppressionCommentFilter 
 } 
 else { 
 format = 
 - expandFromCoont ( text , filter . checkFormat , filter . offRegexp ) ; 
 + expandFromComment ( text , filter . checkFormat , filter . offRegexp ) ; 
 tagCheckRegexp = Pattern . compile ( format ) ; 
 if ( filter . messageFormat ! = null ) { 
 format = 
 - expandFromCoont ( 
 - text , 
 - filter . messageFormat , 
 - filter . offRegexp ) ; 
 + expandFromComment ( 
 + text , 
 + filter . messageFormat , 
 + filter . offRegexp ) ; 
 tagMessageRegexp = Pattern . compile ( format ) ; 
 } 
 else { 
 @ @ - 461 , 10 + 461 , 10 @ @ public class SuppressionCommentFilter 
 * @ param regexp the parsed expander . 
 * @ return the expanded string 
 * / 
 - private static String expandFromCoont ( 
 - String comment , 
 - String stringToExpand , 
 - Pattern regexp ) { 
 + private static String expandFromComment ( 
 + String comment , 
 + String stringToExpand , 
 + Pattern regexp ) { 
 final Matcher matcher = regexp . matcher ( comment ) ; 
 / / Match primarily for effect . 
 if ( ! matcher . find ( ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoader . java 
 index 8cc7533 . . 5aea2f5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoader . java 
 @ @ - 81 , 18 + 81 , 18 @ @ public final class SuppressionsLoader 
 public void startElement ( String namespaceURI , 
 String localName , 
 String qName , 
 - Attributes atts ) 
 + Attributes attributes ) 
 throws SAXException { 
 if ( " suppress " . equals ( qName ) ) { 
 / / add SuppressElement filter to the filter chain 
 - final String checks = atts . getValue ( " checks " ) ; 
 - final String modId = atts . getValue ( " id " ) ; 
 + final String checks = attributes . getValue ( " checks " ) ; 
 + final String modId = attributes . getValue ( " id " ) ; 
 if ( checks = = null & & modId = = null ) { 
 throw new SAXException ( " missing checks and id attribute " ) ; 
 } 
 final SuppressElement suppress ; 
 try { 
 - final String files = atts . getValue ( " files " ) ; 
 + final String files = attributes . getValue ( " files " ) ; 
 suppress = new SuppressElement ( files ) ; 
 if ( modId ! = null ) { 
 suppress . setModuleId ( modId ) ; 
 @ @ - 104 , 11 + 104 , 11 @ @ public final class SuppressionsLoader 
 catch ( final PatternSyntaxException ignored ) { 
 throw new SAXException ( " invalid files or checks format " ) ; 
 } 
 - final String lines = atts . getValue ( " lines " ) ; 
 + final String lines = attributes . getValue ( " lines " ) ; 
 if ( lines ! = null ) { 
 suppress . setLines ( lines ) ; 
 } 
 - final String columns = atts . getValue ( " columns " ) ; 
 + final String columns = attributes . getValue ( " columns " ) ; 
 if ( columns ! = null ) { 
 suppress . setColumns ( columns ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 index 1751065 . . 851a306 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 @ @ - 57 , 7 + 57 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testSigleLineStatements ( ) throws Exception { 
 + public void testSingleLineStatements ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( NeedBracesCheck . class ) ; 
 checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; 
 @ @ - 75 , 7 + 75 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testSigleLineLambda ( ) throws Exception { 
 + public void testSingleLineLambda ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( NeedBracesCheck . class ) ; 
 checkConfig . addAttribute ( " tokens " , " LAMBDA " ) ; 
 @ @ - 89 , 7 + 89 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testSigleLineCaseDefault ( ) throws Exception { 
 + public void testSingleLineCaseDefault ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( NeedBracesCheck . class ) ; 
 checkConfig . addAttribute ( " tokens " , " LITERAL _ CASE , LITERAL _ DEFAULT " ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 index 870b047 . . a50ee00 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 @ @ - 63 , 7 + 63 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { 
 public void testNonExistingHeaderFile ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( HeaderCheck . class ) ; 
 - checkConfig . addAttribute ( " headerFile " , getPath ( " nonexisting . file " ) ) ; 
 + checkConfig . addAttribute ( " headerFile " , getPath ( " nonExisting . file " ) ) ; 
 try { 
 createChecker ( checkConfig ) ; 
 fail ( ) ;
