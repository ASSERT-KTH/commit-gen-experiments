BLEU SCORE: 0.07807646168419155

TEST MSG: Issue # 5551 : PackageNamesLoaderTest refactoring
GENERATED MSG: Issue # 3594 : resolve Unexpected loss of coverage for PropertyCacheFile

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index becafd0 . . 96ef18d 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1678 , 7 + 1678 , 6 @ @ <nl> < ! - - Deprecated classes - - > <nl> < exclude > com . puppycrawl . tools . checkstyle . checks . naming . AbstractTypeParameterNameCheck < / exclude > <nl> < ! - - Classes with their own config - - > <nl> - < exclude > com . puppycrawl . tools . checkstyle . PackageNamesLoader < / exclude > <nl> < exclude > com . puppycrawl . tools . checkstyle . Main < / exclude > <nl> < exclude > com . puppycrawl . tools . checkstyle . JavadocDetailNodeParser . JavadocParserErrorStrategy < / exclude > <nl> < / excludes > <nl> @ @ - 1770 , 24 + 1769 , 6 @ @ <nl> < rule > <nl> < element > CLASS < / element > <nl> < includes > <nl> - < include > com . puppycrawl . tools . checkstyle . PackageNamesLoader < / include > <nl> - < / includes > <nl> - < limits > <nl> - < limit > <nl> - < counter > LINE < / counter > <nl> - < value > COVEREDRATIO < / value > <nl> - < minimum > 0 . 97 < / minimum > <nl> - < / limit > <nl> - < limit > <nl> - < counter > BRANCH < / counter > <nl> - < value > COVEREDRATIO < / value > <nl> - < minimum > 1 . 00 < / minimum > <nl> - < / limit > <nl> - < / limits > <nl> - < / rule > <nl> - < rule > <nl> - < element > CLASS < / element > <nl> - < includes > <nl> < include > com . puppycrawl . tools . checkstyle . Main < / include > <nl> < / includes > <nl> < limits > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> index 3e6b881 . . 22beca8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> @ @ - 33 , 12 + 33 , 11 @ @ import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . when ; <nl> <nl> import java . io . ByteArrayInputStream ; <nl> - import java . io . File ; <nl> + import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . Field ; <nl> - import java . lang . reflect . Method ; <nl> import java . net . URL ; <nl> import java . net . URLConnection ; <nl> import java . net . URLStreamHandler ; <nl> @ @ - 82 , 6 + 81 , 13 @ @ public class PackageNamesLoaderTest extends AbstractPathTestSupport { <nl> packageNames . size ( ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Tests the loading of package names . This test needs mocking , because the package names would <nl> + * have to be placed in { @ literal checkstyle _ packages . xml } , but this will affect every test , <nl> + * which is undesired . <nl> + * <nl> + * @ throws Exception if error occurs <nl> + * / <nl> @ Test <nl> @ SuppressWarnings ( " unchecked " ) <nl> public void testPackagesFile ( ) throws Exception { <nl> @ @ - 89 , 21 + 95 , 20 @ @ public class PackageNamesLoaderTest extends AbstractPathTestSupport { <nl> doNothing ( ) . when ( Closeables . class ) ; <nl> Closeables . closeQuietly ( any ( InputStream . class ) ) ; <nl> <nl> - final Method processFileMethod = PackageNamesLoader . class . getDeclaredMethod ( " processFile " , <nl> - URL . class , PackageNamesLoader . class ) ; <nl> - processFileMethod . setAccessible ( true ) ; <nl> - final Constructor < PackageNamesLoader > constructor = PackageNamesLoader . class <nl> - . getDeclaredConstructor ( ) ; <nl> - constructor . setAccessible ( true ) ; <nl> - final PackageNamesLoader namesLoader = constructor . newInstance ( ) ; <nl> - final URL input = new File ( getPath ( " InputPackageNamesLoaderFile . xml " ) ) . toURI ( ) . toURL ( ) ; <nl> + final URLConnection mockConnection = Mockito . mock ( URLConnection . class ) ; <nl> + when ( mockConnection . getInputStream ( ) ) . thenReturn ( <nl> + new FileInputStream ( getPath ( " InputPackageNamesLoaderFile . xml " ) ) ) ; <nl> <nl> - processFileMethod . invoke ( null , input , namesLoader ) ; <nl> + final URL url = getMockUrl ( mockConnection ) ; <nl> <nl> - final Field packageNamesField = PackageNamesLoader . class . getDeclaredField ( " packageNames " ) ; <nl> - packageNamesField . setAccessible ( true ) ; <nl> + final Enumeration < URL > enumeration = mock ( Enumeration . class ) ; <nl> + when ( enumeration . hasMoreElements ( ) ) . thenReturn ( true ) . thenReturn ( false ) ; <nl> + when ( enumeration . nextElement ( ) ) . thenReturn ( url ) ; <nl> + <nl> + final ClassLoader classLoader = mock ( ClassLoader . class ) ; <nl> + when ( classLoader . getResources ( " checkstyle _ packages . xml " ) ) . thenReturn ( enumeration ) ; <nl> <nl> - final Set < String > actualPackageNames = ( Set < String > ) packageNamesField . get ( namesLoader ) ; <nl> + final Set < String > actualPackageNames = PackageNamesLoader . getPackageNames ( classLoader ) ; <nl> final String [ ] expectedPackageNames = { <nl> " com . puppycrawl . tools . checkstyle " , <nl> " com . puppycrawl . tools . checkstyle . checks " ,
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 1cfb33a . . 56e3411 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 22 , 7 + 22 , 7 @ @ <nl> <nl> < groupId > com . puppycrawl . tools < / groupId > <nl> < artifactId > checkstyle < / artifactId > <nl> - < version > 7 . 2 < / version > <nl> + < version > 7 . 2 - SNAPSHOT < / version > <nl> < packaging > jar < / packaging > <nl> <nl> < name > checkstyle < / name >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index becafd0 . . 96ef18d 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1678 , 7 + 1678 , 6 @ @ 
 < ! - - Deprecated classes - - > 
 < exclude > com . puppycrawl . tools . checkstyle . checks . naming . AbstractTypeParameterNameCheck < / exclude > 
 < ! - - Classes with their own config - - > 
 - < exclude > com . puppycrawl . tools . checkstyle . PackageNamesLoader < / exclude > 
 < exclude > com . puppycrawl . tools . checkstyle . Main < / exclude > 
 < exclude > com . puppycrawl . tools . checkstyle . JavadocDetailNodeParser . JavadocParserErrorStrategy < / exclude > 
 < / excludes > 
 @ @ - 1770 , 24 + 1769 , 6 @ @ 
 < rule > 
 < element > CLASS < / element > 
 < includes > 
 - < include > com . puppycrawl . tools . checkstyle . PackageNamesLoader < / include > 
 - < / includes > 
 - < limits > 
 - < limit > 
 - < counter > LINE < / counter > 
 - < value > COVEREDRATIO < / value > 
 - < minimum > 0 . 97 < / minimum > 
 - < / limit > 
 - < limit > 
 - < counter > BRANCH < / counter > 
 - < value > COVEREDRATIO < / value > 
 - < minimum > 1 . 00 < / minimum > 
 - < / limit > 
 - < / limits > 
 - < / rule > 
 - < rule > 
 - < element > CLASS < / element > 
 - < includes > 
 < include > com . puppycrawl . tools . checkstyle . Main < / include > 
 < / includes > 
 < limits > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 index 3e6b881 . . 22beca8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 @ @ - 33 , 12 + 33 , 11 @ @ import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 import static org . powermock . api . mockito . PowerMockito . when ; 
 
 import java . io . ByteArrayInputStream ; 
 - import java . io . File ; 
 + import java . io . FileInputStream ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . Field ; 
 - import java . lang . reflect . Method ; 
 import java . net . URL ; 
 import java . net . URLConnection ; 
 import java . net . URLStreamHandler ; 
 @ @ - 82 , 6 + 81 , 13 @ @ public class PackageNamesLoaderTest extends AbstractPathTestSupport { 
 packageNames . size ( ) ) ; 
 } 
 
 + / * * 
 + * Tests the loading of package names . This test needs mocking , because the package names would 
 + * have to be placed in { @ literal checkstyle _ packages . xml } , but this will affect every test , 
 + * which is undesired . 
 + * 
 + * @ throws Exception if error occurs 
 + * / 
 @ Test 
 @ SuppressWarnings ( " unchecked " ) 
 public void testPackagesFile ( ) throws Exception { 
 @ @ - 89 , 21 + 95 , 20 @ @ public class PackageNamesLoaderTest extends AbstractPathTestSupport { 
 doNothing ( ) . when ( Closeables . class ) ; 
 Closeables . closeQuietly ( any ( InputStream . class ) ) ; 
 
 - final Method processFileMethod = PackageNamesLoader . class . getDeclaredMethod ( " processFile " , 
 - URL . class , PackageNamesLoader . class ) ; 
 - processFileMethod . setAccessible ( true ) ; 
 - final Constructor < PackageNamesLoader > constructor = PackageNamesLoader . class 
 - . getDeclaredConstructor ( ) ; 
 - constructor . setAccessible ( true ) ; 
 - final PackageNamesLoader namesLoader = constructor . newInstance ( ) ; 
 - final URL input = new File ( getPath ( " InputPackageNamesLoaderFile . xml " ) ) . toURI ( ) . toURL ( ) ; 
 + final URLConnection mockConnection = Mockito . mock ( URLConnection . class ) ; 
 + when ( mockConnection . getInputStream ( ) ) . thenReturn ( 
 + new FileInputStream ( getPath ( " InputPackageNamesLoaderFile . xml " ) ) ) ; 
 
 - processFileMethod . invoke ( null , input , namesLoader ) ; 
 + final URL url = getMockUrl ( mockConnection ) ; 
 
 - final Field packageNamesField = PackageNamesLoader . class . getDeclaredField ( " packageNames " ) ; 
 - packageNamesField . setAccessible ( true ) ; 
 + final Enumeration < URL > enumeration = mock ( Enumeration . class ) ; 
 + when ( enumeration . hasMoreElements ( ) ) . thenReturn ( true ) . thenReturn ( false ) ; 
 + when ( enumeration . nextElement ( ) ) . thenReturn ( url ) ; 
 + 
 + final ClassLoader classLoader = mock ( ClassLoader . class ) ; 
 + when ( classLoader . getResources ( " checkstyle _ packages . xml " ) ) . thenReturn ( enumeration ) ; 
 
 - final Set < String > actualPackageNames = ( Set < String > ) packageNamesField . get ( namesLoader ) ; 
 + final Set < String > actualPackageNames = PackageNamesLoader . getPackageNames ( classLoader ) ; 
 final String [ ] expectedPackageNames = { 
 " com . puppycrawl . tools . checkstyle " , 
 " com . puppycrawl . tools . checkstyle . checks " ,

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 1cfb33a . . 56e3411 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 22 , 7 + 22 , 7 @ @ 
 
 < groupId > com . puppycrawl . tools < / groupId > 
 < artifactId > checkstyle < / artifactId > 
 - < version > 7 . 2 < / version > 
 + < version > 7 . 2 - SNAPSHOT < / version > 
 < packaging > jar < / packaging > 
 
 < name > checkstyle < / name >
