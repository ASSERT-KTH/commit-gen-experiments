BLEU SCORE: 0.05108099332943181

TEST MSG: Issue # 4398 : increase coverage of pitest - checkstyle - tree - walker profile to 94 %
GENERATED MSG: Issue # 4405 : Javadoc position to be checked before rendering ASTs

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 3fe943b . . 851010c 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2074 , 7 + 2074 , 13 @ @ <nl> < param > com . puppycrawl . tools . checkstyle . checks . sizes . * < / param > <nl> < param > com . puppycrawl . tools . checkstyle . checks . whitespace . * < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 89 < / mutationThreshold > <nl> + < excludedMethods > <nl> + < ! - - destroy in TreeWalker was added in case module had to free up resources before ending , <nl> + but currently it does nothing , so we cannot check it . If we remove this destroy we would have <nl> + to remove all of them as they are chained together , so we just exclude it from pitest check . - - > <nl> + < param > destroy < / param > <nl> + < / excludedMethods > <nl> + < mutationThreshold > 94 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index af13446 . . 7fef3ba 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 628 , 7 + 628 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> slComment . setLineNo ( token . getLine ( ) ) ; <nl> <nl> final DetailAST slCommentContent = new DetailAST ( ) ; <nl> - slCommentContent . initialize ( token ) ; <nl> slCommentContent . setType ( TokenTypes . COMMENT _ CONTENT ) ; <nl> <nl> / / column counting begins from 0 <nl> @ @ - 656 , 7 + 655 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> blockComment . setLineNo ( token . getLine ( ) ) ; <nl> <nl> final DetailAST blockCommentContent = new DetailAST ( ) ; <nl> - blockCommentContent . initialize ( token ) ; <nl> blockCommentContent . setType ( TokenTypes . COMMENT _ CONTENT ) ; <nl> <nl> / / column counting begins from 0 <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index 9b3cda8 . . 28c1fbb 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import java . util . Arrays ; <nl> import java . util . Collection ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> + import java . util . Optional ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> <nl> @ @ - 47 , 6 + 48 , 7 @ @ import org . mockito . internal . util . reflection . Whitebox ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Context ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; <nl> @ @ - 55 , 6 + 57 , 7 @ @ import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocPackageCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocParagraphCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . naming . TypeNameCheck ; <nl> + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class TreeWalkerTest extends BaseCheckTestSupport { <nl> @ @ - 398 , 6 + 401 , 43 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testAppendHiddenBlockCommentNodes ( ) throws Exception { <nl> + final DetailAST root = <nl> + TestUtils . parseFile ( new File ( getPath ( " InputTreeWalkerHiddenComments . java " ) ) ) ; <nl> + <nl> + final Optional < DetailAST > blockComment = TestUtils . findTokenInAstByPredicate ( root , <nl> + ast - > ast . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN ) ; <nl> + <nl> + assertTrue ( blockComment . isPresent ( ) ) ; <nl> + <nl> + final DetailAST commentContent = blockComment . get ( ) . getFirstChild ( ) ; <nl> + final DetailAST commentEnd = blockComment . get ( ) . getLastChild ( ) ; <nl> + <nl> + assertEquals ( " Unexpected line number " , 3 , commentContent . getLineNo ( ) ) ; <nl> + assertEquals ( " Unexpected column number " , 2 , commentContent . getColumnNo ( ) ) ; <nl> + assertEquals ( " Unexpected line number " , 9 , commentEnd . getLineNo ( ) ) ; <nl> + assertEquals ( " Unexpected column number " , 1 , commentEnd . getColumnNo ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAppendHiddenSingleLineCommentNodes ( ) throws Exception { <nl> + final DetailAST root = <nl> + TestUtils . parseFile ( new File ( getPath ( " InputTreeWalkerHiddenComments . java " ) ) ) ; <nl> + <nl> + final Optional < DetailAST > singleLineComment = TestUtils . findTokenInAstByPredicate ( root , <nl> + ast - > ast . getType ( ) = = TokenTypes . SINGLE _ LINE _ COMMENT ) ; <nl> + assertTrue ( singleLineComment . isPresent ( ) ) ; <nl> + <nl> + final DetailAST commentContent = singleLineComment . get ( ) . getFirstChild ( ) ; <nl> + <nl> + assertEquals ( " Unexpected token type " , TokenTypes . COMMENT _ CONTENT , commentContent . getType ( ) ) ; <nl> + assertEquals ( " Unexpected line number " , 13 , commentContent . getLineNo ( ) ) ; <nl> + assertEquals ( " Unexpected column number " , 2 , commentContent . getColumnNo ( ) ) ; <nl> + assertTrue ( " Unexpected comment content " , <nl> + commentContent . getText ( ) . startsWith ( " inline comment " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testFinishLocalSetupFullyInitialized ( ) throws Exception { <nl> final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> final ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputTreeWalkerHiddenComments . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputTreeWalkerHiddenComments . java <nl> new file mode 100644 <nl> index 0000000 . . 675d295 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputTreeWalkerHiddenComments . java <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + / * * <nl> + * Some Javadoc . <nl> + * <nl> + * < p > { @ code function } will never be invoked with a null value . <nl> + * <nl> + * @ since 8 . 0 <nl> + * / <nl> + public class InputTreeWalkerHiddenComments { <nl> + <nl> + } <nl> + / / inline comment
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> index 1f9962b . . 99c5d43 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> @ @ - 41 , 7 + 41 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * Format property is intended to deal with the " } / / while " example . <nl> * < / p > <nl> * <nl> - * < p > Rationale : Steve McConnel in & quot ; Code Complete & quot ; suggests that endline <nl> + * < p > Rationale : Steve McConnell in & quot ; Code Complete & quot ; suggests that endline <nl> * comments are a bad practice . An end line comment would <nl> * be one that is on the same line as actual code . For example : <nl> * < pre >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 3fe943b . . 851010c 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2074 , 7 + 2074 , 13 @ @ 
 < param > com . puppycrawl . tools . checkstyle . checks . sizes . * < / param > 
 < param > com . puppycrawl . tools . checkstyle . checks . whitespace . * < / param > 
 < / targetTests > 
 - < mutationThreshold > 89 < / mutationThreshold > 
 + < excludedMethods > 
 + < ! - - destroy in TreeWalker was added in case module had to free up resources before ending , 
 + but currently it does nothing , so we cannot check it . If we remove this destroy we would have 
 + to remove all of them as they are chained together , so we just exclude it from pitest check . - - > 
 + < param > destroy < / param > 
 + < / excludedMethods > 
 + < mutationThreshold > 94 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index af13446 . . 7fef3ba 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 628 , 7 + 628 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 slComment . setLineNo ( token . getLine ( ) ) ; 
 
 final DetailAST slCommentContent = new DetailAST ( ) ; 
 - slCommentContent . initialize ( token ) ; 
 slCommentContent . setType ( TokenTypes . COMMENT _ CONTENT ) ; 
 
 / / column counting begins from 0 
 @ @ - 656 , 7 + 655 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 blockComment . setLineNo ( token . getLine ( ) ) ; 
 
 final DetailAST blockCommentContent = new DetailAST ( ) ; 
 - blockCommentContent . initialize ( token ) ; 
 blockCommentContent . setType ( TokenTypes . COMMENT _ CONTENT ) ; 
 
 / / column counting begins from 0 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index 9b3cda8 . . 28c1fbb 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import java . util . Arrays ; 
 import java . util . Collection ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 + import java . util . Optional ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 
 @ @ - 47 , 6 + 48 , 7 @ @ import org . mockito . internal . util . reflection . Whitebox ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Context ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; 
 @ @ - 55 , 6 + 57 , 7 @ @ import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocPackageCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocParagraphCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . naming . TypeNameCheck ; 
 + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class TreeWalkerTest extends BaseCheckTestSupport { 
 @ @ - 398 , 6 + 401 , 43 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public void testAppendHiddenBlockCommentNodes ( ) throws Exception { 
 + final DetailAST root = 
 + TestUtils . parseFile ( new File ( getPath ( " InputTreeWalkerHiddenComments . java " ) ) ) ; 
 + 
 + final Optional < DetailAST > blockComment = TestUtils . findTokenInAstByPredicate ( root , 
 + ast - > ast . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN ) ; 
 + 
 + assertTrue ( blockComment . isPresent ( ) ) ; 
 + 
 + final DetailAST commentContent = blockComment . get ( ) . getFirstChild ( ) ; 
 + final DetailAST commentEnd = blockComment . get ( ) . getLastChild ( ) ; 
 + 
 + assertEquals ( " Unexpected line number " , 3 , commentContent . getLineNo ( ) ) ; 
 + assertEquals ( " Unexpected column number " , 2 , commentContent . getColumnNo ( ) ) ; 
 + assertEquals ( " Unexpected line number " , 9 , commentEnd . getLineNo ( ) ) ; 
 + assertEquals ( " Unexpected column number " , 1 , commentEnd . getColumnNo ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAppendHiddenSingleLineCommentNodes ( ) throws Exception { 
 + final DetailAST root = 
 + TestUtils . parseFile ( new File ( getPath ( " InputTreeWalkerHiddenComments . java " ) ) ) ; 
 + 
 + final Optional < DetailAST > singleLineComment = TestUtils . findTokenInAstByPredicate ( root , 
 + ast - > ast . getType ( ) = = TokenTypes . SINGLE _ LINE _ COMMENT ) ; 
 + assertTrue ( singleLineComment . isPresent ( ) ) ; 
 + 
 + final DetailAST commentContent = singleLineComment . get ( ) . getFirstChild ( ) ; 
 + 
 + assertEquals ( " Unexpected token type " , TokenTypes . COMMENT _ CONTENT , commentContent . getType ( ) ) ; 
 + assertEquals ( " Unexpected line number " , 13 , commentContent . getLineNo ( ) ) ; 
 + assertEquals ( " Unexpected column number " , 2 , commentContent . getColumnNo ( ) ) ; 
 + assertTrue ( " Unexpected comment content " , 
 + commentContent . getText ( ) . startsWith ( " inline comment " ) ) ; 
 + } 
 + 
 + @ Test 
 public void testFinishLocalSetupFullyInitialized ( ) throws Exception { 
 final TreeWalker treeWalker = new TreeWalker ( ) ; 
 final ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputTreeWalkerHiddenComments . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputTreeWalkerHiddenComments . java 
 new file mode 100644 
 index 0000000 . . 675d295 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputTreeWalkerHiddenComments . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + / * * 
 + * Some Javadoc . 
 + * 
 + * < p > { @ code function } will never be invoked with a null value . 
 + * 
 + * @ since 8 . 0 
 + * / 
 + public class InputTreeWalkerHiddenComments { 
 + 
 + } 
 + / / inline comment

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 index 1f9962b . . 99c5d43 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 @ @ - 41 , 7 + 41 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * Format property is intended to deal with the " } / / while " example . 
 * < / p > 
 * 
 - * < p > Rationale : Steve McConnel in & quot ; Code Complete & quot ; suggests that endline 
 + * < p > Rationale : Steve McConnell in & quot ; Code Complete & quot ; suggests that endline 
 * comments are a bad practice . An end line comment would 
 * be one that is on the same line as actual code . For example : 
 * < pre >
