BLEU SCORE: 0.02955926526467443

TEST MSG: minor : refactoring to minimize scope of variables
GENERATED MSG: Issue # 1566 : ' missing javadoc comment ' violations fixed in AbstractJavadocCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> index 9cb3f49 . . 318a443 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> @ @ - 170 , 6 + 170 , 7 @ @ public abstract class AbstractJavadocCheck extends Check { <nl> @ Override <nl> public final void visitToken ( DetailAST blockCommentNode ) { <nl> if ( JavadocUtils . isJavadocComment ( blockCommentNode ) ) { <nl> + / / store as field , to share with child Checks <nl> blockCommentAst = blockCommentNode ; <nl> <nl> final String treeCacheKey = blockCommentNode . getLineNo ( ) + " : " <nl> @ @ - 221 , 17 + 222 , 18 @ @ public abstract class AbstractJavadocCheck extends Check { <nl> errorListener . setOffset ( javadocCommentAst . getLineNo ( ) - 1 ) ; <nl> <nl> final ParseStatus result = new ParseStatus ( ) ; <nl> - ParseTree parseTree = null ; <nl> - ParseErrorMessage parseErrorMessage = null ; <nl> <nl> try { <nl> - parseTree = parseJavadocAsParseTree ( javadocComment ) ; <nl> + final ParseTree parseTree = parseJavadocAsParseTree ( javadocComment ) ; <nl> + <nl> + final DetailNode tree = convertParseTreeToDetailNode ( parseTree ) ; <nl> + result . setTree ( tree ) ; <nl> } <nl> catch ( ParseCancellationException e ) { <nl> / / If syntax error occurs then message is printed by error listener <nl> / / and parser throws this runtime exception to stop parsing . <nl> / / Just stop processing current Javadoc comment . <nl> - parseErrorMessage = errorListener . getErrorMessage ( ) ; <nl> + ParseErrorMessage parseErrorMessage = errorListener . getErrorMessage ( ) ; <nl> <nl> / / There are cases when antlr error listener does not handle syntax error <nl> if ( parseErrorMessage = = null ) { <nl> @ @ - 239 , 13 + 241 , 7 @ @ public abstract class AbstractJavadocCheck extends Check { <nl> UNRECOGNIZED _ ANTLR _ ERROR _ MESSAGE _ KEY , <nl> javadocCommentAst . getColumnNo ( ) , e . getMessage ( ) ) ; <nl> } <nl> - } <nl> <nl> - if ( parseErrorMessage = = null ) { <nl> - final DetailNode tree = convertParseTreeToDetailNode ( parseTree ) ; <nl> - result . setTree ( tree ) ; <nl> - } <nl> - else { <nl> result . setParseErrorMessage ( parseErrorMessage ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java <nl> index 1bce0d9 . . 328dab2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java <nl> @ @ - 233 , 33 + 233 , 38 @ @ public class LeftCurlyCheck <nl> * @ return { @ code DetailAST } . <nl> * / <nl> private static DetailAST skipAnnotationOnlyLines ( DetailAST ast ) { <nl> + DetailAST resultNode = ast ; <nl> final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - if ( modifiers = = null ) { <nl> - return ast ; <nl> - } <nl> - DetailAST lastAnnotation = findLastAnnotation ( modifiers ) ; <nl> - if ( lastAnnotation = = null ) { <nl> - / / There are no annotations . <nl> - return ast ; <nl> - } <nl> - final DetailAST tokenAfterLast ; <nl> <nl> - if ( lastAnnotation . getNextSibling ( ) = = null ) { <nl> - tokenAfterLast = modifiers . getNextSibling ( ) ; <nl> - } <nl> - else { <nl> - tokenAfterLast = lastAnnotation . getNextSibling ( ) ; <nl> - } <nl> + if ( modifiers ! = null ) { <nl> + DetailAST lastAnnotation = findLastAnnotation ( modifiers ) ; <nl> <nl> - if ( tokenAfterLast . getLineNo ( ) > lastAnnotation . getLineNo ( ) ) { <nl> - return tokenAfterLast ; <nl> - } <nl> - final int lastAnnotationLineNumber = lastAnnotation . getLineNo ( ) ; <nl> - while ( lastAnnotation . getPreviousSibling ( ) ! = null <nl> - & & lastAnnotation . getPreviousSibling ( ) . getLineNo ( ) = = lastAnnotationLineNumber ) { <nl> - lastAnnotation = lastAnnotation . getPreviousSibling ( ) ; <nl> + if ( lastAnnotation ! = null ) { <nl> + final DetailAST tokenAfterLast ; <nl> + <nl> + if ( lastAnnotation . getNextSibling ( ) = = null ) { <nl> + tokenAfterLast = modifiers . getNextSibling ( ) ; <nl> + } <nl> + else { <nl> + tokenAfterLast = lastAnnotation . getNextSibling ( ) ; <nl> + } <nl> + <nl> + if ( tokenAfterLast . getLineNo ( ) > lastAnnotation . getLineNo ( ) ) { <nl> + resultNode = tokenAfterLast ; <nl> + } <nl> + else { <nl> + final int lastAnnotationLineNumber = lastAnnotation . getLineNo ( ) ; <nl> + while ( lastAnnotation . getPreviousSibling ( ) ! = null <nl> + & & lastAnnotation . getPreviousSibling ( ) . getLineNo ( ) <nl> + = = lastAnnotationLineNumber ) { <nl> + <nl> + lastAnnotation = lastAnnotation . getPreviousSibling ( ) ; <nl> + } <nl> + resultNode = lastAnnotation ; <nl> + } <nl> + } <nl> } <nl> - return lastAnnotation ; <nl> + return resultNode ; <nl> } <nl> <nl> / * *

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 index 9cb3f49 . . 318a443 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 @ @ - 170 , 6 + 170 , 7 @ @ public abstract class AbstractJavadocCheck extends Check { 
 @ Override 
 public final void visitToken ( DetailAST blockCommentNode ) { 
 if ( JavadocUtils . isJavadocComment ( blockCommentNode ) ) { 
 + / / store as field , to share with child Checks 
 blockCommentAst = blockCommentNode ; 
 
 final String treeCacheKey = blockCommentNode . getLineNo ( ) + " : " 
 @ @ - 221 , 17 + 222 , 18 @ @ public abstract class AbstractJavadocCheck extends Check { 
 errorListener . setOffset ( javadocCommentAst . getLineNo ( ) - 1 ) ; 
 
 final ParseStatus result = new ParseStatus ( ) ; 
 - ParseTree parseTree = null ; 
 - ParseErrorMessage parseErrorMessage = null ; 
 
 try { 
 - parseTree = parseJavadocAsParseTree ( javadocComment ) ; 
 + final ParseTree parseTree = parseJavadocAsParseTree ( javadocComment ) ; 
 + 
 + final DetailNode tree = convertParseTreeToDetailNode ( parseTree ) ; 
 + result . setTree ( tree ) ; 
 } 
 catch ( ParseCancellationException e ) { 
 / / If syntax error occurs then message is printed by error listener 
 / / and parser throws this runtime exception to stop parsing . 
 / / Just stop processing current Javadoc comment . 
 - parseErrorMessage = errorListener . getErrorMessage ( ) ; 
 + ParseErrorMessage parseErrorMessage = errorListener . getErrorMessage ( ) ; 
 
 / / There are cases when antlr error listener does not handle syntax error 
 if ( parseErrorMessage = = null ) { 
 @ @ - 239 , 13 + 241 , 7 @ @ public abstract class AbstractJavadocCheck extends Check { 
 UNRECOGNIZED _ ANTLR _ ERROR _ MESSAGE _ KEY , 
 javadocCommentAst . getColumnNo ( ) , e . getMessage ( ) ) ; 
 } 
 - } 
 
 - if ( parseErrorMessage = = null ) { 
 - final DetailNode tree = convertParseTreeToDetailNode ( parseTree ) ; 
 - result . setTree ( tree ) ; 
 - } 
 - else { 
 result . setParseErrorMessage ( parseErrorMessage ) ; 
 } 


NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java 
 index 1bce0d9 . . 328dab2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheck . java 
 @ @ - 233 , 33 + 233 , 38 @ @ public class LeftCurlyCheck 
 * @ return { @ code DetailAST } . 
 * / 
 private static DetailAST skipAnnotationOnlyLines ( DetailAST ast ) { 
 + DetailAST resultNode = ast ; 
 final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - if ( modifiers = = null ) { 
 - return ast ; 
 - } 
 - DetailAST lastAnnotation = findLastAnnotation ( modifiers ) ; 
 - if ( lastAnnotation = = null ) { 
 - / / There are no annotations . 
 - return ast ; 
 - } 
 - final DetailAST tokenAfterLast ; 
 
 - if ( lastAnnotation . getNextSibling ( ) = = null ) { 
 - tokenAfterLast = modifiers . getNextSibling ( ) ; 
 - } 
 - else { 
 - tokenAfterLast = lastAnnotation . getNextSibling ( ) ; 
 - } 
 + if ( modifiers ! = null ) { 
 + DetailAST lastAnnotation = findLastAnnotation ( modifiers ) ; 
 
 - if ( tokenAfterLast . getLineNo ( ) > lastAnnotation . getLineNo ( ) ) { 
 - return tokenAfterLast ; 
 - } 
 - final int lastAnnotationLineNumber = lastAnnotation . getLineNo ( ) ; 
 - while ( lastAnnotation . getPreviousSibling ( ) ! = null 
 - & & lastAnnotation . getPreviousSibling ( ) . getLineNo ( ) = = lastAnnotationLineNumber ) { 
 - lastAnnotation = lastAnnotation . getPreviousSibling ( ) ; 
 + if ( lastAnnotation ! = null ) { 
 + final DetailAST tokenAfterLast ; 
 + 
 + if ( lastAnnotation . getNextSibling ( ) = = null ) { 
 + tokenAfterLast = modifiers . getNextSibling ( ) ; 
 + } 
 + else { 
 + tokenAfterLast = lastAnnotation . getNextSibling ( ) ; 
 + } 
 + 
 + if ( tokenAfterLast . getLineNo ( ) > lastAnnotation . getLineNo ( ) ) { 
 + resultNode = tokenAfterLast ; 
 + } 
 + else { 
 + final int lastAnnotationLineNumber = lastAnnotation . getLineNo ( ) ; 
 + while ( lastAnnotation . getPreviousSibling ( ) ! = null 
 + & & lastAnnotation . getPreviousSibling ( ) . getLineNo ( ) 
 + = = lastAnnotationLineNumber ) { 
 + 
 + lastAnnotation = lastAnnotation . getPreviousSibling ( ) ; 
 + } 
 + resultNode = lastAnnotation ; 
 + } 
 + } 
 } 
 - return lastAnnotation ; 
 + return resultNode ; 
 } 
 
 / * *
