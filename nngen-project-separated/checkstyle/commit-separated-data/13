BLEU SCORE: 0.09030367376343264

TEST MSG: Issue # 6586 : aligned javadoc / xdoc for ExplicitInitialization
GENERATED MSG: Issue # 2399 : New option ' onlyObjectReferences ' for ExplicitInitializationCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> index 2ef5fb9 . . de521d4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> @ @ - 28 , 20 + 28 , 72 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; <nl> <nl> / * * <nl> * < p > <nl> - * Checks if any class or object member explicitly initialized <nl> + * Checks if any class or object member is explicitly initialized <nl> * to default for its type value ( { @ code null } for object <nl> * references , zero for numeric types and { @ code char } <nl> * and { @ code false } for { @ code boolean } . <nl> * < / p > <nl> * < p > <nl> - * Rationale : each instance variable gets <nl> + * Rationale : Each instance variable gets <nl> * initialized twice , to the same value . Java <nl> * initializes each instance variable to its default <nl> - * value ( 0 or null ) before performing any <nl> + * value ( { @ code 0 } or { @ code null } ) before performing any <nl> * initialization specified in the code . <nl> * So there is a minor inefficiency . <nl> * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code onlyObjectReferences } - control whether only explicit <nl> + * initializations made to null for objects should be checked . <nl> + * Default value is { @ code false } . <nl> + * < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * To configure the check : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; ExplicitInitialization & quot ; / & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check so that it only checks for objects that explicitly initialize to null : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; ExplicitInitialization & quot ; & gt ; <nl> + * & lt ; property name = & quot ; onlyObjectReferences & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * Example : <nl> + * < / p > <nl> + * < pre > <nl> + * public class Test { <nl> + * private int a = 0 ; <nl> + * private int b = 1 ; <nl> + * private int c = 2 ; <nl> * <nl> + * private boolean a = true ; <nl> + * private boolean b = false ; <nl> + * private boolean c = true ; <nl> + * private boolean d = false ; <nl> + * private boolean e = false ; <nl> + * <nl> + * private A a = new A ( ) ; <nl> + * private A b = null ; / / violation <nl> + * private C c = null ; / / violation <nl> + * private D d = new D ( ) ; <nl> + * <nl> + * int ar1 [ ] = null ; / / violation <nl> + * int ar2 [ ] = new int [ ] ; <nl> + * int ar3 [ ] ; <nl> + * private Bar & lt ; String & gt ; bar = null ; / / violation <nl> + * private Bar & lt ; String & gt ; [ ] barArray = null ; / / violation <nl> + * <nl> + * public static void main ( String [ ] args ) { <nl> + * } <nl> + * } <nl> + * < / pre > <nl> + * <nl> + * @ since 3 . 2 <nl> * / <nl> @ StatelessCheck <nl> public class ExplicitInitializationCheck extends AbstractCheck { <nl> @ @ - 52 , 7 + 104 , 9 @ @ public class ExplicitInitializationCheck extends AbstractCheck { <nl> * / <nl> public static final String MSG _ KEY = " explicit . init " ; <nl> <nl> - / * * Whether only explicit initialization made to null should be checked . * * / <nl> + / * * <nl> + * Control whether only explicit initializations made to null for objects should be checked . <nl> + * * / <nl> private boolean onlyObjectReferences ; <nl> <nl> @ Override <nl> @ @ - 71 , 7 + 125 , 8 @ @ public class ExplicitInitializationCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Sets whether only explicit initialization made to null should be checked . <nl> + * Setter to control whether only explicit initializations made to null <nl> + * for objects should be checked . <nl> * @ param onlyObjectReferences whether only explicit initialization made to null <nl> * should be checked <nl> * / <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index dc3c7f4 . . f76d305 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 90 , 6 + 90 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " EmptyStatement " , <nl> " EqualsAvoidNull " , <nl> " EqualsHashCode " , <nl> + " ExplicitInitialization " , <nl> " FallThrough " , <nl> " FinalLocalVariable " , <nl> " IllegalInstantiation " , <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 843d502 . . 8c92fc4 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 874 , 8 + 874 , 8 @ @ String nullString = null ; <nl> < / section > <nl> <nl> < section name = " ExplicitInitialization " > <nl> + < p > Since Checkstyle 3 . 2 < / p > <nl> < subsection name = " Description " id = " ExplicitInitialization _ Description " > <nl> - < p > Since Checkstyle 3 . 2 < / p > <nl> < p > <nl> Checks if any class or object member is explicitly initialized to <nl> default for its type value ( < code > null < / code > for <nl> @ @ - 885 , 8 + 885 , 8 @ @ String nullString = null ; <nl> <nl> < p > <nl> Rationale : Each instance variable gets initialized twice , to the <nl> - same value . Java initializes each instance variable to its default <nl> - value ( 0 or null ) before performing any initialization specified in <nl> + same value . Java initializes each instance variable to its default value <nl> + ( < code > 0 < / code > or < code > null < / code > ) before performing any initialization specified in <nl> the code . So there is a minor inefficiency . <nl> < / p > <nl> < / subsection > <nl> @ @ - 902 , 8 + 902 , 8 @ @ String nullString = null ; <nl> < / tr > <nl> < tr > <nl> < td > onlyObjectReferences < / td > <nl> - < td > whether only explicit initializations made to <nl> - null for objects should be checked < / td > <nl> + < td > control whether only explicit initializations made to <nl> + null for objects should be checked . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > < code > false < / code > < / td > <nl> < td > 7 . 8 < / td > <nl> @ @ - 929 , 8 + 929 , 7 @ @ String nullString = null ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> < p > Example : < / p > <nl> - < p > <nl> - < source > <nl> + < source > <nl> public class Test { <nl> private int a = 0 ; <nl> private int b = 1 ; <nl> @ @ - 956 , 8 + 955 , 7 @ @ public class Test { <nl> public static void main ( String [ ] args ) { <nl> } <nl> } <nl> - < / source > <nl> - < / p > <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " id = " ExplicitInitialization _ Example _ of _ Usage " >
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index 42ca199 . . 9df0725 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 474 , 6 + 474 , 7 @ @ <nl> < module name = " NoWhitespaceBefore " / > <nl> < module name = " NoWhitespaceBefore " > <nl> < property name = " tokens " value = " DOT " / > <nl> + < property name = " tokens " value = " METHOD _ REF " / > <nl> < property name = " allowLineBreaks " value = " true " / > <nl> < / module > <nl> < module name = " OperatorWrap " > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java <nl> index 29b4285 . . 3fc287e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java <nl> @ @ - 94 , 6 + 94 , 7 @ @ public class NoWhitespaceBeforeCheck <nl> TokenTypes . GENERIC _ START , <nl> TokenTypes . GENERIC _ END , <nl> TokenTypes . ELLIPSIS , <nl> + TokenTypes . METHOD _ REF , <nl> } ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java <nl> index cffe888 . . 6a2e7a6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java <nl> @ @ - 89 , 4 + 89 , 14 @ @ public class NoWhitespaceBeforeCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeDotAllowLineBreaks . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testMethodReference ( ) throws Exception { <nl> + checkConfig . addAttribute ( " tokens " , " METHOD _ REF " ) ; <nl> + final String [ ] expected = { <nl> + " 17 : 31 : " + getCheckMessage ( MSG _ KEY , " : : " ) , <nl> + " 18 : 60 : " + getCheckMessage ( MSG _ KEY , " : : " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeMethodRef . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeMethodRef . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeMethodRef . java <nl> new file mode 100644 <nl> index 0000000 . . 290a8eb <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeMethodRef . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespacebefore ; <nl> + <nl> + import java . util . function . Supplier ; <nl> + <nl> + public class InputNoWhitespaceBeforeMethodRef { <nl> + public static class SomeClass { <nl> + public static class Nested < V > { <nl> + private Nested ( ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static class Nested2 < V > { <nl> + } <nl> + <nl> + public < V > void methodName ( V value ) { <nl> + Supplier < ? > t = Nested2 < V > : : new ; / / violation <nl> + Supplier < SomeClass . Nested < V > > passes = SomeClass . Nested : : new ; / / violation <nl> + Supplier < SomeClass . Nested < V > > fails = SomeClass . Nested < V > : : new ; <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml <nl> index 11b65f3 . . 7aa3ea2 100644 <nl> - - - a / src / xdocs / config _ whitespace . xml <nl> + + + b / src / xdocs / config _ whitespace . xml <nl> @ @ - 1110 , 7 + 1110 , 8 @ @ import static java . math . BigInteger . ZERO ; <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # DOT " > DOT < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # GENERIC _ START " > GENERIC _ START < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # GENERIC _ END " > GENERIC _ END < / a > , <nl> - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ELLIPSIS " > ELLIPSIS < / a > . <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ELLIPSIS " > ELLIPSIS < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ELLIPSIS " > METHOD _ REF < / a > . <nl> < / td > <nl> < td > <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # COMMA " > COMMA < / a > ,

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 index 2ef5fb9 . . de521d4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 @ @ - 28 , 20 + 28 , 72 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; 
 
 / * * 
 * < p > 
 - * Checks if any class or object member explicitly initialized 
 + * Checks if any class or object member is explicitly initialized 
 * to default for its type value ( { @ code null } for object 
 * references , zero for numeric types and { @ code char } 
 * and { @ code false } for { @ code boolean } . 
 * < / p > 
 * < p > 
 - * Rationale : each instance variable gets 
 + * Rationale : Each instance variable gets 
 * initialized twice , to the same value . Java 
 * initializes each instance variable to its default 
 - * value ( 0 or null ) before performing any 
 + * value ( { @ code 0 } or { @ code null } ) before performing any 
 * initialization specified in the code . 
 * So there is a minor inefficiency . 
 * < / p > 
 + * < ul > 
 + * < li > 
 + * Property { @ code onlyObjectReferences } - control whether only explicit 
 + * initializations made to null for objects should be checked . 
 + * Default value is { @ code false } . 
 + * < / li > 
 + * < / ul > 
 + * < p > 
 + * To configure the check : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; ExplicitInitialization & quot ; / & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check so that it only checks for objects that explicitly initialize to null : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; ExplicitInitialization & quot ; & gt ; 
 + * & lt ; property name = & quot ; onlyObjectReferences & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * Example : 
 + * < / p > 
 + * < pre > 
 + * public class Test { 
 + * private int a = 0 ; 
 + * private int b = 1 ; 
 + * private int c = 2 ; 
 * 
 + * private boolean a = true ; 
 + * private boolean b = false ; 
 + * private boolean c = true ; 
 + * private boolean d = false ; 
 + * private boolean e = false ; 
 + * 
 + * private A a = new A ( ) ; 
 + * private A b = null ; / / violation 
 + * private C c = null ; / / violation 
 + * private D d = new D ( ) ; 
 + * 
 + * int ar1 [ ] = null ; / / violation 
 + * int ar2 [ ] = new int [ ] ; 
 + * int ar3 [ ] ; 
 + * private Bar & lt ; String & gt ; bar = null ; / / violation 
 + * private Bar & lt ; String & gt ; [ ] barArray = null ; / / violation 
 + * 
 + * public static void main ( String [ ] args ) { 
 + * } 
 + * } 
 + * < / pre > 
 + * 
 + * @ since 3 . 2 
 * / 
 @ StatelessCheck 
 public class ExplicitInitializationCheck extends AbstractCheck { 
 @ @ - 52 , 7 + 104 , 9 @ @ public class ExplicitInitializationCheck extends AbstractCheck { 
 * / 
 public static final String MSG _ KEY = " explicit . init " ; 
 
 - / * * Whether only explicit initialization made to null should be checked . * * / 
 + / * * 
 + * Control whether only explicit initializations made to null for objects should be checked . 
 + * * / 
 private boolean onlyObjectReferences ; 
 
 @ Override 
 @ @ - 71 , 7 + 125 , 8 @ @ public class ExplicitInitializationCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Sets whether only explicit initialization made to null should be checked . 
 + * Setter to control whether only explicit initializations made to null 
 + * for objects should be checked . 
 * @ param onlyObjectReferences whether only explicit initialization made to null 
 * should be checked 
 * / 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index dc3c7f4 . . f76d305 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 90 , 6 + 90 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " EmptyStatement " , 
 " EqualsAvoidNull " , 
 " EqualsHashCode " , 
 + " ExplicitInitialization " , 
 " FallThrough " , 
 " FinalLocalVariable " , 
 " IllegalInstantiation " , 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 843d502 . . 8c92fc4 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 874 , 8 + 874 , 8 @ @ String nullString = null ; 
 < / section > 
 
 < section name = " ExplicitInitialization " > 
 + < p > Since Checkstyle 3 . 2 < / p > 
 < subsection name = " Description " id = " ExplicitInitialization _ Description " > 
 - < p > Since Checkstyle 3 . 2 < / p > 
 < p > 
 Checks if any class or object member is explicitly initialized to 
 default for its type value ( < code > null < / code > for 
 @ @ - 885 , 8 + 885 , 8 @ @ String nullString = null ; 
 
 < p > 
 Rationale : Each instance variable gets initialized twice , to the 
 - same value . Java initializes each instance variable to its default 
 - value ( 0 or null ) before performing any initialization specified in 
 + same value . Java initializes each instance variable to its default value 
 + ( < code > 0 < / code > or < code > null < / code > ) before performing any initialization specified in 
 the code . So there is a minor inefficiency . 
 < / p > 
 < / subsection > 
 @ @ - 902 , 8 + 902 , 8 @ @ String nullString = null ; 
 < / tr > 
 < tr > 
 < td > onlyObjectReferences < / td > 
 - < td > whether only explicit initializations made to 
 - null for objects should be checked < / td > 
 + < td > control whether only explicit initializations made to 
 + null for objects should be checked . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > < code > false < / code > < / td > 
 < td > 7 . 8 < / td > 
 @ @ - 929 , 8 + 929 , 7 @ @ String nullString = null ; 
 & lt ; / module & gt ; 
 < / source > 
 < p > Example : < / p > 
 - < p > 
 - < source > 
 + < source > 
 public class Test { 
 private int a = 0 ; 
 private int b = 1 ; 
 @ @ - 956 , 8 + 955 , 7 @ @ public class Test { 
 public static void main ( String [ ] args ) { 
 } 
 } 
 - < / source > 
 - < / p > 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Example of Usage " id = " ExplicitInitialization _ Example _ of _ Usage " >

NEAREST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index 42ca199 . . 9df0725 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 474 , 6 + 474 , 7 @ @ 
 < module name = " NoWhitespaceBefore " / > 
 < module name = " NoWhitespaceBefore " > 
 < property name = " tokens " value = " DOT " / > 
 + < property name = " tokens " value = " METHOD _ REF " / > 
 < property name = " allowLineBreaks " value = " true " / > 
 < / module > 
 < module name = " OperatorWrap " > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java 
 index 29b4285 . . 3fc287e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheck . java 
 @ @ - 94 , 6 + 94 , 7 @ @ public class NoWhitespaceBeforeCheck 
 TokenTypes . GENERIC _ START , 
 TokenTypes . GENERIC _ END , 
 TokenTypes . ELLIPSIS , 
 + TokenTypes . METHOD _ REF , 
 } ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java 
 index cffe888 . . 6a2e7a6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceBeforeCheckTest . java 
 @ @ - 89 , 4 + 89 , 14 @ @ public class NoWhitespaceBeforeCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeDotAllowLineBreaks . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testMethodReference ( ) throws Exception { 
 + checkConfig . addAttribute ( " tokens " , " METHOD _ REF " ) ; 
 + final String [ ] expected = { 
 + " 17 : 31 : " + getCheckMessage ( MSG _ KEY , " : : " ) , 
 + " 18 : 60 : " + getCheckMessage ( MSG _ KEY , " : : " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputNoWhitespaceBeforeMethodRef . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeMethodRef . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeMethodRef . java 
 new file mode 100644 
 index 0000000 . . 290a8eb 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespacebefore / InputNoWhitespaceBeforeMethodRef . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespacebefore ; 
 + 
 + import java . util . function . Supplier ; 
 + 
 + public class InputNoWhitespaceBeforeMethodRef { 
 + public static class SomeClass { 
 + public static class Nested < V > { 
 + private Nested ( ) { 
 + } 
 + } 
 + } 
 + 
 + public static class Nested2 < V > { 
 + } 
 + 
 + public < V > void methodName ( V value ) { 
 + Supplier < ? > t = Nested2 < V > : : new ; / / violation 
 + Supplier < SomeClass . Nested < V > > passes = SomeClass . Nested : : new ; / / violation 
 + Supplier < SomeClass . Nested < V > > fails = SomeClass . Nested < V > : : new ; 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml 
 index 11b65f3 . . 7aa3ea2 100644 
 - - - a / src / xdocs / config _ whitespace . xml 
 + + + b / src / xdocs / config _ whitespace . xml 
 @ @ - 1110 , 7 + 1110 , 8 @ @ import static java . math . BigInteger . ZERO ; 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # DOT " > DOT < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # GENERIC _ START " > GENERIC _ START < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # GENERIC _ END " > GENERIC _ END < / a > , 
 - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ELLIPSIS " > ELLIPSIS < / a > . 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ELLIPSIS " > ELLIPSIS < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ELLIPSIS " > METHOD _ REF < / a > . 
 < / td > 
 < td > 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # COMMA " > COMMA < / a > ,
