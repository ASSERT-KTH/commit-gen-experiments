BLEU SCORE: 0.0534741036489421

TEST MSG: Issue # 957 : Forbid @ VisibleForTesting
GENERATED MSG: Issue # 2109 : CLI should print a file name where exception is happen

TEST DIFF (one line): diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml <nl> index f56a0a9 . . 65cb578 100644 <nl> - - - a / config / checkstyle _ sevntu _ checks . xml <nl> + + + b / config / checkstyle _ sevntu _ checks . xml <nl> @ @ - 82 , 7 + 82 , 7 @ @ <nl> < ! - - commented till https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 410 - - > <nl> < ! - - < module name = " AvoidModifiersForTypes " / > - - > <nl> < module name = " ForbidAnnotation " > <nl> - < property name = " annotationNames " value = " Ignore " / > <nl> + < property name = " annotationNames " value = " Ignore , VisibleForTesting " / > <nl> < property name = " annotationTargets " value = " METHOD _ DEF " / > <nl> < / module > <nl> < module name = " RequiredParameterForAnnotation " > <nl> diff - - git a / config / sevntu _ suppressions . xml b / config / sevntu _ suppressions . xml <nl> index 9b27957 . . 3406ac6 100644 <nl> - - - a / config / sevntu _ suppressions . xml <nl> + + + b / config / sevntu _ suppressions . xml <nl> @ @ - 44 , 5 + 44 , 5 @ @ <nl> See https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 414 - - > <nl> < suppress checks = " CustomDeclarationOrder " <nl> files = " AbstractViolationReporter . java " <nl> - lines = " 155 , 167 " / > <nl> + lines = " 152 , 164 " / > <nl> < / suppressions > <nl> \ No newline at end of file <nl> diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index ba56b52 . . 61ee660 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 13 , 14 + 13 , 14 @ @ <nl> See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > <nl> < suppress checks = " IllegalCatch " <nl> files = " Checker . java " <nl> - lines = " 317 " / > <nl> + lines = " 316 " / > <nl> < suppress checks = " IllegalCatch " <nl> files = " Checker . java " <nl> - lines = " 322 " / > <nl> + lines = " 321 " / > <nl> < ! - - Test to reproduce error catching in Checker and satisfy coverage rate . - - > <nl> < suppress checks = " IllegalCatch " <nl> files = " CheckerTest . java " <nl> - lines = " 520 " / > <nl> + lines = " 535 " / > <nl> <nl> < ! - - we can not change it as , Check name is part of API ( used in configurations ) - - > <nl> < suppress checks = " AbbreviationAsWordInName " <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> index 2ac79f4 . . d603eed 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 32 , 7 + 32 , 6 @ @ import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . apache . commons . logging . Log ; <nl> import org . apache . commons . logging . LogFactory ; <nl> <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Sets ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> @ @ - 358 , 8 + 357 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> } <nl> <nl> / * * Notify all listeners about the audit start . * / <nl> - @ VisibleForTesting <nl> - void fireAuditStarted ( ) { <nl> + private void fireAuditStarted ( ) { <nl> final AuditEvent event = new AuditEvent ( this ) ; <nl> for ( final AuditListener listener : listeners ) { <nl> listener . auditStarted ( event ) ; <nl> @ @ - 367 , 8 + 365 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> } <nl> <nl> / * * Notify all listeners about the audit end . * / <nl> - @ VisibleForTesting <nl> - void fireAuditFinished ( ) { <nl> + private void fireAuditFinished ( ) { <nl> final AuditEvent event = new AuditEvent ( this ) ; <nl> for ( final AuditListener listener : listeners ) { <nl> listener . auditFinished ( event ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> index 6469e8a . . d86f121 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> @ @ - 38 , 7 + 38 , 6 @ @ import org . xml . sax . InputSource ; <nl> import org . xml . sax . SAXException ; <nl> import org . xml . sax . SAXParseException ; <nl> <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractLoader ; <nl> @ @ - 247 , 8 + 246 , 6 @ @ public final class ConfigurationLoader { <nl> * Replaces { @ code $ { xxx } } style constructions in the given value <nl> * with the string value of the corresponding data types . <nl> * <nl> - * < p > The method is package visible to facilitate testing . <nl> - * <nl> * < p > Code copied from ant - <nl> * http : / / cvs . apache . org / viewcvs / jakarta - ant / src / main / org / apache / tools / ant / ProjectHelper . java <nl> * <nl> @ @ - 266 , 8 + 263 , 7 @ @ public final class ConfigurationLoader { <nl> * { @ code $ { } without a closing <nl> * { @ code } } <nl> * / <nl> - @ VisibleForTesting <nl> - static String replaceProperties ( <nl> + private static String replaceProperties ( <nl> String value , PropertyResolver props , String defaultValue ) <nl> throws CheckstyleException { <nl> if ( value = = null ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> index f1f68c9 . . da3885a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> @ @ - 21 , 8 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import java . util . Map ; <nl> <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> - <nl> / * * <nl> * Serves as an abstract base class for all modules that report inspection <nl> * findings . Such modules have a Severity level which is used for the <nl> @ @ - 120 , 8 + 118 , 7 @ @ public abstract class AbstractViolationReporter <nl> * @ return name of a resource bundle that contains the messages <nl> * used by the module . <nl> * / <nl> - @ VisibleForTesting <nl> - static String getMessageBundle ( final String className ) { <nl> + private static String getMessageBundle ( final String className ) { <nl> final int endIndex = className . lastIndexOf ( ' . ' ) ; <nl> final String messages = " messages " ; <nl> if ( endIndex < 0 ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> index 0172c59 . . fe83637 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import java . util . BitSet ; <nl> import antlr . CommonASTWithHiddenTokens ; <nl> import antlr . Token ; <nl> import antlr . collections . AST ; <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> <nl> / * * <nl> @ @ - 189 , 8 + 188 , 7 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { <nl> * Set the parent token . <nl> * @ param parent the parent token <nl> * / <nl> - @ VisibleForTesting <nl> - void setParent ( DetailAST parent ) { <nl> + private void setParent ( DetailAST parent ) { <nl> this . parent = parent ; <nl> final DetailAST nextSibling = getNextSibling ( ) ; <nl> if ( nextSibling ! = null ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java <nl> index edbcbc2 . . f61ee12 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java <nl> @ @ - 22 , 7 + 22 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> import java . util . Deque ; <nl> import java . util . List ; <nl> <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . collect . Lists ; <nl> <nl> / * * <nl> @ @ - 71 , 14 + 70 , 6 @ @ class PkgControl { <nl> } <nl> <nl> / * * <nl> - * @ return the full package name represented by the node . <nl> - * / <nl> - @ VisibleForTesting <nl> - String getFullPackage ( ) { <nl> - return fullPackage ; <nl> - } <nl> - <nl> - / * * <nl> * Search down the tree to locate the finest match for a supplied package . <nl> * @ param forPkg the package to search for . <nl> * @ return the finest match , or null if no match at all . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index fe7448a . . 3e100da 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import java . io . File ; <nl> import java . io . IOError ; <nl> import java . io . IOException ; <nl> import java . io . UnsupportedEncodingException ; <nl> + import java . lang . reflect . Method ; <nl> import java . nio . file . InvalidPathException ; <nl> import java . util . ArrayList ; <nl> import java . util . HashSet ; <nl> @ @ - 59 , 8 + 60 , 22 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> @ Rule <nl> public final TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ; <nl> <nl> + private static Method getFireAuditFinished ( ) throws NoSuchMethodException { <nl> + final Class < Checker > checkerClass = Checker . class ; <nl> + final Method fireAuditFinished = checkerClass . getDeclaredMethod ( " fireAuditFinished " ) ; <nl> + fireAuditFinished . setAccessible ( true ) ; <nl> + return fireAuditFinished ; <nl> + } <nl> + <nl> + private static Method getFireAuditStartedMethod ( ) throws NoSuchMethodException { <nl> + final Class < Checker > checkerClass = Checker . class ; <nl> + final Method fireAuditStarted = checkerClass . getDeclaredMethod ( " fireAuditStarted " ) ; <nl> + fireAuditStarted . setAccessible ( true ) ; <nl> + return fireAuditStarted ; <nl> + } <nl> + <nl> @ Test <nl> - public void testDestroy ( ) { <nl> + public void testDestroy ( ) throws Exception { <nl> final Checker checker = new Checker ( ) ; <nl> final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; <nl> checker . addListener ( auditAdapter ) ; <nl> @ @ - 71 , 8 + 86 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> checker . destroy ( ) ; <nl> <nl> / / Let ' s try fire some events <nl> - checker . fireAuditStarted ( ) ; <nl> - checker . fireAuditFinished ( ) ; <nl> + getFireAuditStartedMethod ( ) . invoke ( checker ) ; <nl> + getFireAuditFinished ( ) . invoke ( checker ) ; <nl> checker . fireFileStarted ( " Some File Name " ) ; <nl> checker . fireFileFinished ( " Some File Name " ) ; <nl> <nl> @ @ - 86 , 17 + 101 , 17 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testAddListener ( ) { <nl> + public void testAddListener ( ) throws Exception { <nl> final Checker checker = new Checker ( ) ; <nl> final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; <nl> checker . addListener ( auditAdapter ) ; <nl> <nl> / / Let ' s try fire some events <nl> - checker . fireAuditStarted ( ) ; <nl> + getFireAuditStartedMethod ( ) . invoke ( checker ) ; <nl> assertTrue ( " Checker . fireAuditStarted ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; <nl> <nl> auditAdapter . resetListener ( ) ; <nl> - checker . fireAuditFinished ( ) ; <nl> + getFireAuditFinished ( ) . invoke ( checker ) ; <nl> assertTrue ( " Checker . fireAuditFinished ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; <nl> <nl> auditAdapter . resetListener ( ) ; <nl> @ @ - 116 , 7 + 131 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testRemoveListener ( ) { <nl> + public void testRemoveListener ( ) throws Exception { <nl> final Checker checker = new Checker ( ) ; <nl> final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; <nl> final DebugAuditAdapter aa2 = new DebugAuditAdapter ( ) ; <nl> @ @ - 125 , 13 + 140 , 13 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> checker . removeListener ( auditAdapter ) ; <nl> <nl> / / Let ' s try fire some events <nl> - checker . fireAuditStarted ( ) ; <nl> + getFireAuditStartedMethod ( ) . invoke ( checker ) ; <nl> assertTrue ( " Checker . fireAuditStarted ( ) doesn ' t call listener " , aa2 . wasCalled ( ) ) ; <nl> assertFalse ( " Checker . fireAuditStarted ( ) does call removed listener " , <nl> auditAdapter . wasCalled ( ) ) ; <nl> <nl> aa2 . resetListener ( ) ; <nl> - checker . fireAuditFinished ( ) ; <nl> + getFireAuditFinished ( ) . invoke ( checker ) ; <nl> assertTrue ( " Checker . fireAuditFinished ( ) doesn ' t call listener " , aa2 . wasCalled ( ) ) ; <nl> assertFalse ( " Checker . fireAuditFinished ( ) does call removed listener " , <nl> auditAdapter . wasCalled ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index da4fca5 . . ff70647 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 61 , 6 + 61 , 18 @ @ public class ConfigurationLoaderTest { <nl> fName , new PropertiesExpander ( props ) ) ; <nl> } <nl> <nl> + private static Method getReplacePropertiesMethod ( ) throws Exception { <nl> + final Class < ? > [ ] params = new Class < ? > [ 3 ] ; <nl> + params [ 0 ] = String . class ; <nl> + params [ 1 ] = PropertyResolver . class ; <nl> + params [ 2 ] = String . class ; <nl> + final Class < ConfigurationLoader > configurationLoaderClass = ConfigurationLoader . class ; <nl> + final Method replacePropertiesMethod = <nl> + configurationLoaderClass . getDeclaredMethod ( " replaceProperties " , params ) ; <nl> + replacePropertiesMethod . setAccessible ( true ) ; <nl> + return replacePropertiesMethod ; <nl> + } <nl> + <nl> @ Test <nl> public void testResourceLoadConfiguration ( ) throws Exception { <nl> final Properties props = new Properties ( ) ; <nl> @ @ - 227 , 47 + 239 , 45 @ @ public class ConfigurationLoaderTest { <nl> } <nl> <nl> @ Test <nl> - public void testReplacePropertiesNoReplace ( ) <nl> - throws CheckstyleException { <nl> + public void testReplacePropertiesNoReplace ( ) throws Exception { <nl> final String [ ] testValues = { null , " " , " a " , " $ a " , " { a " , <nl> " { a } " , " a } " , " $ a } " , " $ " , " a $ b " , } ; <nl> final Properties props = initProperties ( ) ; <nl> for ( String testValue : testValues ) { <nl> - final String value = ConfigurationLoader . replaceProperties ( <nl> - testValue , new PropertiesExpander ( props ) , null ) ; <nl> + final String value = ( String ) getReplacePropertiesMethod ( ) . invoke ( <nl> + null , testValue , new PropertiesExpander ( props ) , null ) ; <nl> assertEquals ( " \ " " + testValue + " \ " " , value , testValue ) ; <nl> } <nl> } <nl> <nl> @ Test <nl> - public void testReplacePropertiesSyntaxError ( ) { <nl> + public void testReplacePropertiesSyntaxError ( ) throws Exception { <nl> final Properties props = initProperties ( ) ; <nl> try { <nl> - final String value = ConfigurationLoader . replaceProperties ( <nl> - " $ { a " , new PropertiesExpander ( props ) , null ) ; <nl> + final String value = ( String ) getReplacePropertiesMethod ( ) . invoke ( <nl> + null , " $ { a " , new PropertiesExpander ( props ) , null ) ; <nl> fail ( " expected to fail , instead got : " + value ) ; <nl> } <nl> - catch ( CheckstyleException ex ) { <nl> - assertEquals ( " Syntax error in property : $ { a " , ex . getMessage ( ) ) ; <nl> + catch ( InvocationTargetException ex ) { <nl> + assertEquals ( " Syntax error in property : $ { a " , ex . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ Test <nl> - public void testReplacePropertiesMissingProperty ( ) { <nl> + public void testReplacePropertiesMissingProperty ( ) throws Exception { <nl> final Properties props = initProperties ( ) ; <nl> try { <nl> - final String value = ConfigurationLoader . replaceProperties ( <nl> - " $ { c } " , new PropertiesExpander ( props ) , null ) ; <nl> + final String value = ( String ) getReplacePropertiesMethod ( ) . invoke ( <nl> + null , " $ { c } " , new PropertiesExpander ( props ) , null ) ; <nl> fail ( " expected to fail , instead got : " + value ) ; <nl> } <nl> - catch ( CheckstyleException ex ) { <nl> - assertEquals ( " Property $ { c } has not been set " , ex . getMessage ( ) ) ; <nl> + catch ( InvocationTargetException ex ) { <nl> + assertEquals ( " Property $ { c } has not been set " , ex . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ Test <nl> - public void testReplacePropertiesReplace ( ) <nl> - throws CheckstyleException { <nl> + public void testReplacePropertiesReplace ( ) throws Exception { <nl> final String [ ] [ ] testValues = { <nl> { " $ { a } " , " A " } , <nl> { " x $ { a } " , " xA " } , <nl> @ @ - 284 , 8 + 294 , 8 @ @ public class ConfigurationLoaderTest { <nl> } ; <nl> final Properties props = initProperties ( ) ; <nl> for ( String [ ] testValue : testValues ) { <nl> - final String value = ConfigurationLoader . replaceProperties ( <nl> - testValue [ 0 ] , new PropertiesExpander ( props ) , null ) ; <nl> + final String value = ( String ) getReplacePropertiesMethod ( ) . invoke ( <nl> + null , testValue [ 0 ] , new PropertiesExpander ( props ) , null ) ; <nl> assertEquals ( " \ " " + testValue [ 0 ] + " \ " " , <nl> testValue [ 1 ] , value ) ; <nl> } <nl> @ @ - 471 , 8 + 481 , 8 @ @ public class ConfigurationLoaderTest { <nl> final Properties props = new Properties ( ) ; <nl> final String defaultValue = " defaultValue " ; <nl> <nl> - final String value = ConfigurationLoader . replaceProperties ( " $ { checkstyle . basedir } " , <nl> - new PropertiesExpander ( props ) , defaultValue ) ; <nl> + final String value = ( String ) getReplacePropertiesMethod ( ) . invoke ( <nl> + null , " $ { checkstyle . basedir } " , new PropertiesExpander ( props ) , defaultValue ) ; <nl> <nl> assertEquals ( defaultValue , value ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java <nl> index 9b8750e . . f06ad98 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> <nl> + import java . lang . reflect . Method ; <nl> import java . util . SortedSet ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> @ @ - 37 , 16 + 38 , 25 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> public class AbstractViolationReporterTest extends BaseCheckTestSupport { <nl> private final AbstractCheck emptyCheck = new EmptyCheck ( ) ; <nl> <nl> + private static Method getGetMessageBundleMethod ( ) throws Exception { <nl> + final Class < AbstractViolationReporter > abstractViolationReporterClass = <nl> + AbstractViolationReporter . class ; <nl> + final Method getMessageBundleMethod = <nl> + abstractViolationReporterClass . getDeclaredMethod ( " getMessageBundle " , String . class ) ; <nl> + getMessageBundleMethod . setAccessible ( true ) ; <nl> + return getMessageBundleMethod ; <nl> + } <nl> + <nl> @ Test <nl> - public void testGetMessageBundleWithPackage ( ) { <nl> + public void testGetMessageBundleWithPackage ( ) throws Exception { <nl> assertEquals ( " com . mycompany . checks . messages " , <nl> - AbstractViolationReporter . getMessageBundle ( " com . mycompany . checks . MyCoolCheck " ) ) ; <nl> + getGetMessageBundleMethod ( ) . invoke ( null , " com . mycompany . checks . MyCoolCheck " ) ) ; <nl> } <nl> <nl> @ Test <nl> - public void testGetMessageBundleWithoutPackage ( ) { <nl> + public void testGetMessageBundleWithoutPackage ( ) throws Exception { <nl> assertEquals ( " messages " , <nl> - AbstractViolationReporter . getMessageBundle ( " MyCoolCheck " ) ) ; <nl> + getGetMessageBundleMethod ( ) . invoke ( null , " MyCoolCheck " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> index e8827be . . f31863e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import static org . junit . Assert . assertNull ; <nl> <nl> import java . io . File ; <nl> import java . io . FileFilter ; <nl> + import java . lang . reflect . Method ; <nl> import java . text . MessageFormat ; <nl> import java . util . Locale ; <nl> <nl> @ @ - 36 , 8 + 37 , 16 @ @ import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> * @ author Oliver Burn <nl> * / <nl> public class DetailASTTest { <nl> + private static Method getSetParentMethod ( ) throws Exception { <nl> + final Class < DetailAST > detailAstClass = DetailAST . class ; <nl> + final Method setParentMethod = <nl> + detailAstClass . getDeclaredMethod ( " setParent " , DetailAST . class ) ; <nl> + setParentMethod . setAccessible ( true ) ; <nl> + return setParentMethod ; <nl> + } <nl> + <nl> @ Test <nl> - public void testGetChildCount ( ) { <nl> + public void testGetChildCount ( ) throws Exception { <nl> final DetailAST root = new DetailAST ( ) ; <nl> final DetailAST firstLevelA = new DetailAST ( ) ; <nl> final DetailAST firstLevelB = new DetailAST ( ) ; <nl> @ @ - 45 , 13 + 54 , 14 @ @ public class DetailASTTest { <nl> <nl> root . setFirstChild ( firstLevelA ) ; <nl> <nl> - firstLevelA . setParent ( root ) ; <nl> + final Method setParentMethod = getSetParentMethod ( ) ; <nl> + setParentMethod . invoke ( firstLevelA , root ) ; <nl> firstLevelA . setFirstChild ( secondLevelA ) ; <nl> firstLevelA . setNextSibling ( firstLevelB ) ; <nl> <nl> - firstLevelB . setParent ( root ) ; <nl> + setParentMethod . invoke ( firstLevelB , root ) ; <nl> <nl> - secondLevelA . setParent ( firstLevelA ) ; <nl> + setParentMethod . invoke ( secondLevelA , root ) ; <nl> <nl> assertEquals ( 0 , secondLevelA . getChildCount ( ) ) ; <nl> assertEquals ( 0 , firstLevelB . getChildCount ( ) ) ; <nl> @ @ - 66 , 7 + 76 , 7 @ @ public class DetailASTTest { <nl> } <nl> <nl> @ Test <nl> - public void testSetSiblingNull ( ) { <nl> + public void testSetSiblingNull ( ) throws Exception { <nl> final DetailAST root = new DetailAST ( ) ; <nl> final DetailAST firstLevelA = new DetailAST ( ) ; <nl> <nl> @ @ - 74 , 7 + 84 , 7 @ @ public class DetailASTTest { <nl> <nl> assertEquals ( 1 , root . getChildCount ( ) ) ; <nl> <nl> - firstLevelA . setParent ( root ) ; <nl> + getSetParentMethod ( ) . invoke ( firstLevelA , root ) ; <nl> firstLevelA . addPreviousSibling ( null ) ; <nl> firstLevelA . addNextSibling ( null ) ; <nl> <nl> @ @ - 82 , 7 + 92 , 7 @ @ public class DetailASTTest { <nl> } <nl> <nl> @ Test <nl> - public void testInsertSiblingBetween ( ) { <nl> + public void testInsertSiblingBetween ( ) throws Exception { <nl> final DetailAST root = new DetailAST ( ) ; <nl> final DetailAST firstLevelA = new DetailAST ( ) ; <nl> final DetailAST firstLevelB = new DetailAST ( ) ; <nl> @ @ - 91 , 17 + 101 , 18 @ @ public class DetailASTTest { <nl> assertEquals ( 0 , root . getChildCount ( ) ) ; <nl> <nl> root . setFirstChild ( firstLevelA ) ; <nl> - firstLevelA . setParent ( root ) ; <nl> + final Method setParentMethod = getSetParentMethod ( ) ; <nl> + setParentMethod . invoke ( firstLevelA , root ) ; <nl> <nl> assertEquals ( 1 , root . getChildCount ( ) ) ; <nl> <nl> firstLevelA . addNextSibling ( firstLevelB ) ; <nl> - firstLevelB . setParent ( root ) ; <nl> + setParentMethod . invoke ( firstLevelB , root ) ; <nl> <nl> assertEquals ( firstLevelB , firstLevelA . getNextSibling ( ) ) ; <nl> <nl> firstLevelA . addNextSibling ( firstLevelC ) ; <nl> - firstLevelC . setParent ( root ) ; <nl> + setParentMethod . invoke ( firstLevelC , root ) ; <nl> <nl> assertEquals ( firstLevelC , firstLevelA . getNextSibling ( ) ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java <nl> index 8d2894e . . b5079f1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java <nl> @ @ - 39 , 12 + 39 , 6 @ @ public class PkgControlRegExpTest { <nl> } <nl> <nl> @ Test <nl> - public void testFullPkg ( ) { <nl> - assertEquals ( " com . kazgroup . courtlink " , pcRoot . getFullPackage ( ) ) ; <nl> - assertEquals ( " com . kazgroup . courtlink . common " , pcCommon . getFullPackage ( ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void testLocateFinest ( ) { <nl> assertEquals ( pcRoot , pcRoot <nl> . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java <nl> index 28ef4ec . . 189dfee 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java <nl> @ @ - 39 , 12 + 39 , 6 @ @ public class PkgControlTest { <nl> } <nl> <nl> @ Test <nl> - public void testFullPkg ( ) { <nl> - assertEquals ( " com . kazgroup . courtlink " , pcRoot . getFullPackage ( ) ) ; <nl> - assertEquals ( " com . kazgroup . courtlink . common " , pcCommon . getFullPackage ( ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void testLocateFinest ( ) { <nl> assertEquals ( pcRoot , pcRoot <nl> . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ;
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> index dae6cd4 . . 348d5d0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> @ @ - 58 , 8 + 58 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> public void testAllChecksWithDefaultConfiguration ( ) throws Exception { <nl> <nl> final Set < Class < ? > > checkstyleChecks = getCheckstyleChecks ( ) ; <nl> - final String inputFilePath = " src / test / resources - noncompilable / " <nl> - + " com / puppycrawl / tools / checkstyle / InputDefaultConfig . java " ; <nl> + final String inputFilePath = getNonCompilablePath ( " InputDefaultConfig . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> for ( Class < ? > check : checkstyleChecks ) { <nl> @ @ - 69 , 8 + 68 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> / / Checks which have Check as a parent . <nl> if ( check . equals ( ImportControlCheck . class ) ) { <nl> / / ImportControlCheck must have the import control configuration file to avoid violation . <nl> - checkConfig . addAttribute ( " file " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ complete . xml " ) ; <nl> + checkConfig . addAttribute ( " file " , getPath ( " import - control _ complete . xml " ) ) ; <nl> } <nl> checker = createChecker ( checkConfig ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index cfa3873 . . c30edb7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 44 , 6 + 44 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> * @ author lkuehne <nl> * / <nl> public class ConfigurationLoaderTest { <nl> + private static String getConfigPath ( String filename ) { <nl> + return " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + filename ; <nl> + } <nl> <nl> private static Configuration loadConfiguration ( String name ) <nl> throws CheckstyleException { <nl> @ @ - 52 , 8 + 55 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> private static Configuration loadConfiguration ( <nl> String name , Properties props ) throws CheckstyleException { <nl> - final String fName = <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + name ; <nl> + final String fName = getConfigPath ( name ) ; <nl> <nl> return ConfigurationLoader . loadConfiguration ( <nl> fName , new PropertiesExpander ( props ) ) ; <nl> @ @ - 66 , 7 + 68 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> / / load config that ' s only found in the classpath <nl> final DefaultConfiguration config = ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / checkstyle _ checks . xml " , new PropertiesExpander ( props ) ) ; <nl> + getConfigPath ( " checkstyle _ checks . xml " ) , new PropertiesExpander ( props ) ) ; <nl> <nl> / / verify the root , and property substitution <nl> final Properties attributes = new Properties ( ) ; <nl> @ @ - 334 , 8 + 336 , 7 @ @ public class ConfigurationLoaderTest { <nl> final Properties props = new Properties ( ) ; <nl> props . setProperty ( " checkstyle . basedir " , " basedir " ) ; <nl> <nl> - final File file = new File ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / subdir / including . xml " ) ; <nl> + final File file = new File ( getConfigPath ( " subdir / including . xml " ) ) ; <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> file . toURI ( ) . toString ( ) , new PropertiesExpander ( props ) ) ; <nl> @ @ - 403 , 8 + 404 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " , <nl> + getConfigPath ( " config _ with _ ignore . xml " ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 416 , 8 + 416 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( new InputSource ( <nl> - new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " ) . toURI ( ) . toString ( ) ) , <nl> + new File ( getConfigPath ( " config _ with _ ignore . xml " ) ) . toURI ( ) . toString ( ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 429 , 8 + 428 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ checker _ ignore . xml " , <nl> + getConfigPath ( " config _ with _ checker _ ignore . xml " ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 460 , 9 + 458 , 7 @ @ public class ConfigurationLoaderTest { <nl> @ SuppressWarnings ( " deprecation " ) <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - new FileInputStream ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " ) , <nl> + new FileInputStream ( getConfigPath ( " config _ with _ ignore . xml " ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 806a1c1 . . 3b7bf29 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 55 , 6 + 55 , 14 @ @ public class MainTest { <nl> @ Rule <nl> public final SystemOutRule systemOut = new SystemOutRule ( ) . enableLog ( ) . mute ( ) ; <nl> <nl> + private static String getPath ( String filename ) { <nl> + return " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ; <nl> + } <nl> + <nl> + private static String getFilePath ( String filename ) throws IOException { <nl> + return new File ( getPath ( filename ) ) . getCanonicalPath ( ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { <nl> assertUtilsClassHasPrivateConstructor ( Main . class ) ; <nl> @ @ - 110 , 7 + 118 , 7 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 143 , 7 + 151 , 7 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 158 , 7 + 166 , 7 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , " / google _ checks . xml " , " - f " , " xmlp " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 198 , 8 + 206 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - non - existing - classname . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - non - existing - classname . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 213 , 8 + 221 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 223 , 10 + 231 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> final ResourceBundle compilationProperties = <nl> ResourceBundle . getBundle ( " checkstylecompilation " ) ; <nl> String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; <nl> @ @ - 239 , 9 + 244 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 255 , 9 + 260 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 266 , 10 + 271 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : " <nl> + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> @ @ - 280 , 8 + 282 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname2 . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 291 , 10 + 293 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : error : " <nl> + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> @ @ - 306 , 8 + 305 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 - error . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " config - classname2 - error . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 321 , 10 + 320 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , temporaryFolder . getRoot ( ) + " / output . txt " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 338 , 10 + 337 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 359 , 10 + 358 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 384 , 10 + 383 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 402 , 10 + 401 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - classname - prop . xml " , <nl> - " - p " , " src / test / resources / com / puppycrawl / tools / checkstyle / mycheckstyle . properties " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , <nl> + " - p " , getPath ( " mycheckstyle . properties " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 420 , 10 + 418 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - classname - prop . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , <nl> " - p " , " nonexisting . properties " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 443 , 9 + 440 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - Incorrect . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - Incorrect . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 522 , 10 + 518 , 7 @ @ public class MainTest { <nl> <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; <nl> @ @ - 541 , 8 + 534 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; <nl> + Main . main ( " - c " , getPath ( " config - filelength . xml " ) , <nl> + getPath ( " checks / metrics " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml <nl> new file mode 100644 <nl> index 0000000 . . 3bdfcad <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + < ? xml version = " 1 . 0 " ? > <nl> + < ! DOCTYPE import - control PUBLIC <nl> + " - / / Puppy Crawl / / DTD Import Control 1 . 0 / / EN " <nl> + " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 0 . dtd " > <nl> + <nl> + < import - control pkg = " com " > <nl> + < allow class = " some . class " / > <nl> + < disallow class = " another . class " local - only = " true " / > <nl> + < allow pkg = " some . pkg " / > <nl> + < disallow pkg = " another . pkg " local - only = " true " / > <nl> + < disallow pkg = " and . another . pkg " exact - match = " true " / > <nl> + < subpackage name = " puppycrawl " > <nl> + < disallow pkg = " some . pkg " / > <nl> + < disallow class = " some . class " / > <nl> + < / subpackage > <nl> + < / import - control > <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml 
 index f56a0a9 . . 65cb578 100644 
 - - - a / config / checkstyle _ sevntu _ checks . xml 
 + + + b / config / checkstyle _ sevntu _ checks . xml 
 @ @ - 82 , 7 + 82 , 7 @ @ 
 < ! - - commented till https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 410 - - > 
 < ! - - < module name = " AvoidModifiersForTypes " / > - - > 
 < module name = " ForbidAnnotation " > 
 - < property name = " annotationNames " value = " Ignore " / > 
 + < property name = " annotationNames " value = " Ignore , VisibleForTesting " / > 
 < property name = " annotationTargets " value = " METHOD _ DEF " / > 
 < / module > 
 < module name = " RequiredParameterForAnnotation " > 
 diff - - git a / config / sevntu _ suppressions . xml b / config / sevntu _ suppressions . xml 
 index 9b27957 . . 3406ac6 100644 
 - - - a / config / sevntu _ suppressions . xml 
 + + + b / config / sevntu _ suppressions . xml 
 @ @ - 44 , 5 + 44 , 5 @ @ 
 See https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 414 - - > 
 < suppress checks = " CustomDeclarationOrder " 
 files = " AbstractViolationReporter . java " 
 - lines = " 155 , 167 " / > 
 + lines = " 152 , 164 " / > 
 < / suppressions > 
 \ No newline at end of file 
 diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index ba56b52 . . 61ee660 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 13 , 14 + 13 , 14 @ @ 
 See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > 
 < suppress checks = " IllegalCatch " 
 files = " Checker . java " 
 - lines = " 317 " / > 
 + lines = " 316 " / > 
 < suppress checks = " IllegalCatch " 
 files = " Checker . java " 
 - lines = " 322 " / > 
 + lines = " 321 " / > 
 < ! - - Test to reproduce error catching in Checker and satisfy coverage rate . - - > 
 < suppress checks = " IllegalCatch " 
 files = " CheckerTest . java " 
 - lines = " 520 " / > 
 + lines = " 535 " / > 
 
 < ! - - we can not change it as , Check name is part of API ( used in configurations ) - - > 
 < suppress checks = " AbbreviationAsWordInName " 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 index 2ac79f4 . . d603eed 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 32 , 7 + 32 , 6 @ @ import org . apache . commons . lang3 . ArrayUtils ; 
 import org . apache . commons . logging . Log ; 
 import org . apache . commons . logging . LogFactory ; 
 
 - import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Sets ; 
 import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 @ @ - 358 , 8 + 357 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 } 
 
 / * * Notify all listeners about the audit start . * / 
 - @ VisibleForTesting 
 - void fireAuditStarted ( ) { 
 + private void fireAuditStarted ( ) { 
 final AuditEvent event = new AuditEvent ( this ) ; 
 for ( final AuditListener listener : listeners ) { 
 listener . auditStarted ( event ) ; 
 @ @ - 367 , 8 + 365 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 } 
 
 / * * Notify all listeners about the audit end . * / 
 - @ VisibleForTesting 
 - void fireAuditFinished ( ) { 
 + private void fireAuditFinished ( ) { 
 final AuditEvent event = new AuditEvent ( this ) ; 
 for ( final AuditListener listener : listeners ) { 
 listener . auditFinished ( event ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 index 6469e8a . . d86f121 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 @ @ - 38 , 7 + 38 , 6 @ @ import org . xml . sax . InputSource ; 
 import org . xml . sax . SAXException ; 
 import org . xml . sax . SAXParseException ; 
 
 - import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractLoader ; 
 @ @ - 247 , 8 + 246 , 6 @ @ public final class ConfigurationLoader { 
 * Replaces { @ code $ { xxx } } style constructions in the given value 
 * with the string value of the corresponding data types . 
 * 
 - * < p > The method is package visible to facilitate testing . 
 - * 
 * < p > Code copied from ant - 
 * http : / / cvs . apache . org / viewcvs / jakarta - ant / src / main / org / apache / tools / ant / ProjectHelper . java 
 * 
 @ @ - 266 , 8 + 263 , 7 @ @ public final class ConfigurationLoader { 
 * { @ code $ { } without a closing 
 * { @ code } } 
 * / 
 - @ VisibleForTesting 
 - static String replaceProperties ( 
 + private static String replaceProperties ( 
 String value , PropertyResolver props , String defaultValue ) 
 throws CheckstyleException { 
 if ( value = = null ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 index f1f68c9 . . da3885a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 @ @ - 21 , 8 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 
 import java . util . Map ; 
 
 - import com . google . common . annotations . VisibleForTesting ; 
 - 
 / * * 
 * Serves as an abstract base class for all modules that report inspection 
 * findings . Such modules have a Severity level which is used for the 
 @ @ - 120 , 8 + 118 , 7 @ @ public abstract class AbstractViolationReporter 
 * @ return name of a resource bundle that contains the messages 
 * used by the module . 
 * / 
 - @ VisibleForTesting 
 - static String getMessageBundle ( final String className ) { 
 + private static String getMessageBundle ( final String className ) { 
 final int endIndex = className . lastIndexOf ( ' . ' ) ; 
 final String messages = " messages " ; 
 if ( endIndex < 0 ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 index 0172c59 . . fe83637 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import java . util . BitSet ; 
 import antlr . CommonASTWithHiddenTokens ; 
 import antlr . Token ; 
 import antlr . collections . AST ; 
 - import com . google . common . annotations . VisibleForTesting ; 
 import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 
 / * * 
 @ @ - 189 , 8 + 188 , 7 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { 
 * Set the parent token . 
 * @ param parent the parent token 
 * / 
 - @ VisibleForTesting 
 - void setParent ( DetailAST parent ) { 
 + private void setParent ( DetailAST parent ) { 
 this . parent = parent ; 
 final DetailAST nextSibling = getNextSibling ( ) ; 
 if ( nextSibling ! = null ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java 
 index edbcbc2 . . f61ee12 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java 
 @ @ - 22 , 7 + 22 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . imports ; 
 import java . util . Deque ; 
 import java . util . List ; 
 
 - import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . collect . Lists ; 
 
 / * * 
 @ @ - 71 , 14 + 70 , 6 @ @ class PkgControl { 
 } 
 
 / * * 
 - * @ return the full package name represented by the node . 
 - * / 
 - @ VisibleForTesting 
 - String getFullPackage ( ) { 
 - return fullPackage ; 
 - } 
 - 
 - / * * 
 * Search down the tree to locate the finest match for a supplied package . 
 * @ param forPkg the package to search for . 
 * @ return the finest match , or null if no match at all . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index fe7448a . . 3e100da 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import java . io . File ; 
 import java . io . IOError ; 
 import java . io . IOException ; 
 import java . io . UnsupportedEncodingException ; 
 + import java . lang . reflect . Method ; 
 import java . nio . file . InvalidPathException ; 
 import java . util . ArrayList ; 
 import java . util . HashSet ; 
 @ @ - 59 , 8 + 60 , 22 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 @ Rule 
 public final TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ; 
 
 + private static Method getFireAuditFinished ( ) throws NoSuchMethodException { 
 + final Class < Checker > checkerClass = Checker . class ; 
 + final Method fireAuditFinished = checkerClass . getDeclaredMethod ( " fireAuditFinished " ) ; 
 + fireAuditFinished . setAccessible ( true ) ; 
 + return fireAuditFinished ; 
 + } 
 + 
 + private static Method getFireAuditStartedMethod ( ) throws NoSuchMethodException { 
 + final Class < Checker > checkerClass = Checker . class ; 
 + final Method fireAuditStarted = checkerClass . getDeclaredMethod ( " fireAuditStarted " ) ; 
 + fireAuditStarted . setAccessible ( true ) ; 
 + return fireAuditStarted ; 
 + } 
 + 
 @ Test 
 - public void testDestroy ( ) { 
 + public void testDestroy ( ) throws Exception { 
 final Checker checker = new Checker ( ) ; 
 final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; 
 checker . addListener ( auditAdapter ) ; 
 @ @ - 71 , 8 + 86 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 checker . destroy ( ) ; 
 
 / / Let ' s try fire some events 
 - checker . fireAuditStarted ( ) ; 
 - checker . fireAuditFinished ( ) ; 
 + getFireAuditStartedMethod ( ) . invoke ( checker ) ; 
 + getFireAuditFinished ( ) . invoke ( checker ) ; 
 checker . fireFileStarted ( " Some File Name " ) ; 
 checker . fireFileFinished ( " Some File Name " ) ; 
 
 @ @ - 86 , 17 + 101 , 17 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testAddListener ( ) { 
 + public void testAddListener ( ) throws Exception { 
 final Checker checker = new Checker ( ) ; 
 final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; 
 checker . addListener ( auditAdapter ) ; 
 
 / / Let ' s try fire some events 
 - checker . fireAuditStarted ( ) ; 
 + getFireAuditStartedMethod ( ) . invoke ( checker ) ; 
 assertTrue ( " Checker . fireAuditStarted ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; 
 
 auditAdapter . resetListener ( ) ; 
 - checker . fireAuditFinished ( ) ; 
 + getFireAuditFinished ( ) . invoke ( checker ) ; 
 assertTrue ( " Checker . fireAuditFinished ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; 
 
 auditAdapter . resetListener ( ) ; 
 @ @ - 116 , 7 + 131 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testRemoveListener ( ) { 
 + public void testRemoveListener ( ) throws Exception { 
 final Checker checker = new Checker ( ) ; 
 final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; 
 final DebugAuditAdapter aa2 = new DebugAuditAdapter ( ) ; 
 @ @ - 125 , 13 + 140 , 13 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 checker . removeListener ( auditAdapter ) ; 
 
 / / Let ' s try fire some events 
 - checker . fireAuditStarted ( ) ; 
 + getFireAuditStartedMethod ( ) . invoke ( checker ) ; 
 assertTrue ( " Checker . fireAuditStarted ( ) doesn ' t call listener " , aa2 . wasCalled ( ) ) ; 
 assertFalse ( " Checker . fireAuditStarted ( ) does call removed listener " , 
 auditAdapter . wasCalled ( ) ) ; 
 
 aa2 . resetListener ( ) ; 
 - checker . fireAuditFinished ( ) ; 
 + getFireAuditFinished ( ) . invoke ( checker ) ; 
 assertTrue ( " Checker . fireAuditFinished ( ) doesn ' t call listener " , aa2 . wasCalled ( ) ) ; 
 assertFalse ( " Checker . fireAuditFinished ( ) does call removed listener " , 
 auditAdapter . wasCalled ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index da4fca5 . . ff70647 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 61 , 6 + 61 , 18 @ @ public class ConfigurationLoaderTest { 
 fName , new PropertiesExpander ( props ) ) ; 
 } 
 
 + private static Method getReplacePropertiesMethod ( ) throws Exception { 
 + final Class < ? > [ ] params = new Class < ? > [ 3 ] ; 
 + params [ 0 ] = String . class ; 
 + params [ 1 ] = PropertyResolver . class ; 
 + params [ 2 ] = String . class ; 
 + final Class < ConfigurationLoader > configurationLoaderClass = ConfigurationLoader . class ; 
 + final Method replacePropertiesMethod = 
 + configurationLoaderClass . getDeclaredMethod ( " replaceProperties " , params ) ; 
 + replacePropertiesMethod . setAccessible ( true ) ; 
 + return replacePropertiesMethod ; 
 + } 
 + 
 @ Test 
 public void testResourceLoadConfiguration ( ) throws Exception { 
 final Properties props = new Properties ( ) ; 
 @ @ - 227 , 47 + 239 , 45 @ @ public class ConfigurationLoaderTest { 
 } 
 
 @ Test 
 - public void testReplacePropertiesNoReplace ( ) 
 - throws CheckstyleException { 
 + public void testReplacePropertiesNoReplace ( ) throws Exception { 
 final String [ ] testValues = { null , " " , " a " , " $ a " , " { a " , 
 " { a } " , " a } " , " $ a } " , " $ " , " a $ b " , } ; 
 final Properties props = initProperties ( ) ; 
 for ( String testValue : testValues ) { 
 - final String value = ConfigurationLoader . replaceProperties ( 
 - testValue , new PropertiesExpander ( props ) , null ) ; 
 + final String value = ( String ) getReplacePropertiesMethod ( ) . invoke ( 
 + null , testValue , new PropertiesExpander ( props ) , null ) ; 
 assertEquals ( " \ " " + testValue + " \ " " , value , testValue ) ; 
 } 
 } 
 
 @ Test 
 - public void testReplacePropertiesSyntaxError ( ) { 
 + public void testReplacePropertiesSyntaxError ( ) throws Exception { 
 final Properties props = initProperties ( ) ; 
 try { 
 - final String value = ConfigurationLoader . replaceProperties ( 
 - " $ { a " , new PropertiesExpander ( props ) , null ) ; 
 + final String value = ( String ) getReplacePropertiesMethod ( ) . invoke ( 
 + null , " $ { a " , new PropertiesExpander ( props ) , null ) ; 
 fail ( " expected to fail , instead got : " + value ) ; 
 } 
 - catch ( CheckstyleException ex ) { 
 - assertEquals ( " Syntax error in property : $ { a " , ex . getMessage ( ) ) ; 
 + catch ( InvocationTargetException ex ) { 
 + assertEquals ( " Syntax error in property : $ { a " , ex . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 @ Test 
 - public void testReplacePropertiesMissingProperty ( ) { 
 + public void testReplacePropertiesMissingProperty ( ) throws Exception { 
 final Properties props = initProperties ( ) ; 
 try { 
 - final String value = ConfigurationLoader . replaceProperties ( 
 - " $ { c } " , new PropertiesExpander ( props ) , null ) ; 
 + final String value = ( String ) getReplacePropertiesMethod ( ) . invoke ( 
 + null , " $ { c } " , new PropertiesExpander ( props ) , null ) ; 
 fail ( " expected to fail , instead got : " + value ) ; 
 } 
 - catch ( CheckstyleException ex ) { 
 - assertEquals ( " Property $ { c } has not been set " , ex . getMessage ( ) ) ; 
 + catch ( InvocationTargetException ex ) { 
 + assertEquals ( " Property $ { c } has not been set " , ex . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 @ Test 
 - public void testReplacePropertiesReplace ( ) 
 - throws CheckstyleException { 
 + public void testReplacePropertiesReplace ( ) throws Exception { 
 final String [ ] [ ] testValues = { 
 { " $ { a } " , " A " } , 
 { " x $ { a } " , " xA " } , 
 @ @ - 284 , 8 + 294 , 8 @ @ public class ConfigurationLoaderTest { 
 } ; 
 final Properties props = initProperties ( ) ; 
 for ( String [ ] testValue : testValues ) { 
 - final String value = ConfigurationLoader . replaceProperties ( 
 - testValue [ 0 ] , new PropertiesExpander ( props ) , null ) ; 
 + final String value = ( String ) getReplacePropertiesMethod ( ) . invoke ( 
 + null , testValue [ 0 ] , new PropertiesExpander ( props ) , null ) ; 
 assertEquals ( " \ " " + testValue [ 0 ] + " \ " " , 
 testValue [ 1 ] , value ) ; 
 } 
 @ @ - 471 , 8 + 481 , 8 @ @ public class ConfigurationLoaderTest { 
 final Properties props = new Properties ( ) ; 
 final String defaultValue = " defaultValue " ; 
 
 - final String value = ConfigurationLoader . replaceProperties ( " $ { checkstyle . basedir } " , 
 - new PropertiesExpander ( props ) , defaultValue ) ; 
 + final String value = ( String ) getReplacePropertiesMethod ( ) . invoke ( 
 + null , " $ { checkstyle . basedir } " , new PropertiesExpander ( props ) , defaultValue ) ; 
 
 assertEquals ( defaultValue , value ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java 
 index 9b8750e . . f06ad98 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 
 import static org . junit . Assert . assertEquals ; 
 
 + import java . lang . reflect . Method ; 
 import java . util . SortedSet ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 @ @ - 37 , 16 + 38 , 25 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 public class AbstractViolationReporterTest extends BaseCheckTestSupport { 
 private final AbstractCheck emptyCheck = new EmptyCheck ( ) ; 
 
 + private static Method getGetMessageBundleMethod ( ) throws Exception { 
 + final Class < AbstractViolationReporter > abstractViolationReporterClass = 
 + AbstractViolationReporter . class ; 
 + final Method getMessageBundleMethod = 
 + abstractViolationReporterClass . getDeclaredMethod ( " getMessageBundle " , String . class ) ; 
 + getMessageBundleMethod . setAccessible ( true ) ; 
 + return getMessageBundleMethod ; 
 + } 
 + 
 @ Test 
 - public void testGetMessageBundleWithPackage ( ) { 
 + public void testGetMessageBundleWithPackage ( ) throws Exception { 
 assertEquals ( " com . mycompany . checks . messages " , 
 - AbstractViolationReporter . getMessageBundle ( " com . mycompany . checks . MyCoolCheck " ) ) ; 
 + getGetMessageBundleMethod ( ) . invoke ( null , " com . mycompany . checks . MyCoolCheck " ) ) ; 
 } 
 
 @ Test 
 - public void testGetMessageBundleWithoutPackage ( ) { 
 + public void testGetMessageBundleWithoutPackage ( ) throws Exception { 
 assertEquals ( " messages " , 
 - AbstractViolationReporter . getMessageBundle ( " MyCoolCheck " ) ) ; 
 + getGetMessageBundleMethod ( ) . invoke ( null , " MyCoolCheck " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 index e8827be . . f31863e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import static org . junit . Assert . assertNull ; 
 
 import java . io . File ; 
 import java . io . FileFilter ; 
 + import java . lang . reflect . Method ; 
 import java . text . MessageFormat ; 
 import java . util . Locale ; 
 
 @ @ - 36 , 8 + 37 , 16 @ @ import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 * @ author Oliver Burn 
 * / 
 public class DetailASTTest { 
 + private static Method getSetParentMethod ( ) throws Exception { 
 + final Class < DetailAST > detailAstClass = DetailAST . class ; 
 + final Method setParentMethod = 
 + detailAstClass . getDeclaredMethod ( " setParent " , DetailAST . class ) ; 
 + setParentMethod . setAccessible ( true ) ; 
 + return setParentMethod ; 
 + } 
 + 
 @ Test 
 - public void testGetChildCount ( ) { 
 + public void testGetChildCount ( ) throws Exception { 
 final DetailAST root = new DetailAST ( ) ; 
 final DetailAST firstLevelA = new DetailAST ( ) ; 
 final DetailAST firstLevelB = new DetailAST ( ) ; 
 @ @ - 45 , 13 + 54 , 14 @ @ public class DetailASTTest { 
 
 root . setFirstChild ( firstLevelA ) ; 
 
 - firstLevelA . setParent ( root ) ; 
 + final Method setParentMethod = getSetParentMethod ( ) ; 
 + setParentMethod . invoke ( firstLevelA , root ) ; 
 firstLevelA . setFirstChild ( secondLevelA ) ; 
 firstLevelA . setNextSibling ( firstLevelB ) ; 
 
 - firstLevelB . setParent ( root ) ; 
 + setParentMethod . invoke ( firstLevelB , root ) ; 
 
 - secondLevelA . setParent ( firstLevelA ) ; 
 + setParentMethod . invoke ( secondLevelA , root ) ; 
 
 assertEquals ( 0 , secondLevelA . getChildCount ( ) ) ; 
 assertEquals ( 0 , firstLevelB . getChildCount ( ) ) ; 
 @ @ - 66 , 7 + 76 , 7 @ @ public class DetailASTTest { 
 } 
 
 @ Test 
 - public void testSetSiblingNull ( ) { 
 + public void testSetSiblingNull ( ) throws Exception { 
 final DetailAST root = new DetailAST ( ) ; 
 final DetailAST firstLevelA = new DetailAST ( ) ; 
 
 @ @ - 74 , 7 + 84 , 7 @ @ public class DetailASTTest { 
 
 assertEquals ( 1 , root . getChildCount ( ) ) ; 
 
 - firstLevelA . setParent ( root ) ; 
 + getSetParentMethod ( ) . invoke ( firstLevelA , root ) ; 
 firstLevelA . addPreviousSibling ( null ) ; 
 firstLevelA . addNextSibling ( null ) ; 
 
 @ @ - 82 , 7 + 92 , 7 @ @ public class DetailASTTest { 
 } 
 
 @ Test 
 - public void testInsertSiblingBetween ( ) { 
 + public void testInsertSiblingBetween ( ) throws Exception { 
 final DetailAST root = new DetailAST ( ) ; 
 final DetailAST firstLevelA = new DetailAST ( ) ; 
 final DetailAST firstLevelB = new DetailAST ( ) ; 
 @ @ - 91 , 17 + 101 , 18 @ @ public class DetailASTTest { 
 assertEquals ( 0 , root . getChildCount ( ) ) ; 
 
 root . setFirstChild ( firstLevelA ) ; 
 - firstLevelA . setParent ( root ) ; 
 + final Method setParentMethod = getSetParentMethod ( ) ; 
 + setParentMethod . invoke ( firstLevelA , root ) ; 
 
 assertEquals ( 1 , root . getChildCount ( ) ) ; 
 
 firstLevelA . addNextSibling ( firstLevelB ) ; 
 - firstLevelB . setParent ( root ) ; 
 + setParentMethod . invoke ( firstLevelB , root ) ; 
 
 assertEquals ( firstLevelB , firstLevelA . getNextSibling ( ) ) ; 
 
 firstLevelA . addNextSibling ( firstLevelC ) ; 
 - firstLevelC . setParent ( root ) ; 
 + setParentMethod . invoke ( firstLevelC , root ) ; 
 
 assertEquals ( firstLevelC , firstLevelA . getNextSibling ( ) ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java 
 index 8d2894e . . b5079f1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlRegExpTest . java 
 @ @ - 39 , 12 + 39 , 6 @ @ public class PkgControlRegExpTest { 
 } 
 
 @ Test 
 - public void testFullPkg ( ) { 
 - assertEquals ( " com . kazgroup . courtlink " , pcRoot . getFullPackage ( ) ) ; 
 - assertEquals ( " com . kazgroup . courtlink . common " , pcCommon . getFullPackage ( ) ) ; 
 - } 
 - 
 - @ Test 
 public void testLocateFinest ( ) { 
 assertEquals ( pcRoot , pcRoot 
 . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java 
 index 28ef4ec . . 189dfee 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControlTest . java 
 @ @ - 39 , 12 + 39 , 6 @ @ public class PkgControlTest { 
 } 
 
 @ Test 
 - public void testFullPkg ( ) { 
 - assertEquals ( " com . kazgroup . courtlink " , pcRoot . getFullPackage ( ) ) ; 
 - assertEquals ( " com . kazgroup . courtlink . common " , pcCommon . getFullPackage ( ) ) ; 
 - } 
 - 
 - @ Test 
 public void testLocateFinest ( ) { 
 assertEquals ( pcRoot , pcRoot 
 . locateFinest ( " com . kazgroup . courtlink . domain " ) ) ;

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 index dae6cd4 . . 348d5d0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 @ @ - 58 , 8 + 58 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 public void testAllChecksWithDefaultConfiguration ( ) throws Exception { 
 
 final Set < Class < ? > > checkstyleChecks = getCheckstyleChecks ( ) ; 
 - final String inputFilePath = " src / test / resources - noncompilable / " 
 - + " com / puppycrawl / tools / checkstyle / InputDefaultConfig . java " ; 
 + final String inputFilePath = getNonCompilablePath ( " InputDefaultConfig . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 for ( Class < ? > check : checkstyleChecks ) { 
 @ @ - 69 , 8 + 68 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 / / Checks which have Check as a parent . 
 if ( check . equals ( ImportControlCheck . class ) ) { 
 / / ImportControlCheck must have the import control configuration file to avoid violation . 
 - checkConfig . addAttribute ( " file " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ complete . xml " ) ; 
 + checkConfig . addAttribute ( " file " , getPath ( " import - control _ complete . xml " ) ) ; 
 } 
 checker = createChecker ( checkConfig ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index cfa3873 . . c30edb7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 44 , 6 + 44 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 * @ author lkuehne 
 * / 
 public class ConfigurationLoaderTest { 
 + private static String getConfigPath ( String filename ) { 
 + return " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + filename ; 
 + } 
 
 private static Configuration loadConfiguration ( String name ) 
 throws CheckstyleException { 
 @ @ - 52 , 8 + 55 , 7 @ @ public class ConfigurationLoaderTest { 
 
 private static Configuration loadConfiguration ( 
 String name , Properties props ) throws CheckstyleException { 
 - final String fName = 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + name ; 
 + final String fName = getConfigPath ( name ) ; 
 
 return ConfigurationLoader . loadConfiguration ( 
 fName , new PropertiesExpander ( props ) ) ; 
 @ @ - 66 , 7 + 68 , 7 @ @ public class ConfigurationLoaderTest { 
 
 / / load config that ' s only found in the classpath 
 final DefaultConfiguration config = ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / checkstyle _ checks . xml " , new PropertiesExpander ( props ) ) ; 
 + getConfigPath ( " checkstyle _ checks . xml " ) , new PropertiesExpander ( props ) ) ; 
 
 / / verify the root , and property substitution 
 final Properties attributes = new Properties ( ) ; 
 @ @ - 334 , 8 + 336 , 7 @ @ public class ConfigurationLoaderTest { 
 final Properties props = new Properties ( ) ; 
 props . setProperty ( " checkstyle . basedir " , " basedir " ) ; 
 
 - final File file = new File ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / subdir / including . xml " ) ; 
 + final File file = new File ( getConfigPath ( " subdir / including . xml " ) ) ; 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 file . toURI ( ) . toString ( ) , new PropertiesExpander ( props ) ) ; 
 @ @ - 403 , 8 + 404 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " , 
 + getConfigPath ( " config _ with _ ignore . xml " ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 416 , 8 + 416 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( new InputSource ( 
 - new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " ) . toURI ( ) . toString ( ) ) , 
 + new File ( getConfigPath ( " config _ with _ ignore . xml " ) ) . toURI ( ) . toString ( ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 429 , 8 + 428 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ checker _ ignore . xml " , 
 + getConfigPath ( " config _ with _ checker _ ignore . xml " ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 460 , 9 + 458 , 7 @ @ public class ConfigurationLoaderTest { 
 @ SuppressWarnings ( " deprecation " ) 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - new FileInputStream ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " ) , 
 + new FileInputStream ( getConfigPath ( " config _ with _ ignore . xml " ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 806a1c1 . . 3b7bf29 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 55 , 6 + 55 , 14 @ @ public class MainTest { 
 @ Rule 
 public final SystemOutRule systemOut = new SystemOutRule ( ) . enableLog ( ) . mute ( ) ; 
 
 + private static String getPath ( String filename ) { 
 + return " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ; 
 + } 
 + 
 + private static String getFilePath ( String filename ) throws IOException { 
 + return new File ( getPath ( filename ) ) . getCanonicalPath ( ) ; 
 + } 
 + 
 @ Test 
 public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { 
 assertUtilsClassHasPrivateConstructor ( Main . class ) ; 
 @ @ - 110 , 7 + 118 , 7 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 143 , 7 + 151 , 7 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 158 , 7 + 166 , 7 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , " / google _ checks . xml " , " - f " , " xmlp " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 198 , 8 + 206 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - non - existing - classname . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - non - existing - classname . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 213 , 8 + 221 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 223 , 10 + 231 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 final ResourceBundle compilationProperties = 
 ResourceBundle . getBundle ( " checkstylecompilation " ) ; 
 String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; 
 @ @ - 239 , 9 + 244 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 255 , 9 + 260 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 266 , 10 + 271 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : " 
 + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 @ @ - 280 , 8 + 282 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname2 . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 291 , 10 + 293 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : error : " 
 + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 @ @ - 306 , 8 + 305 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 - error . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " config - classname2 - error . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 321 , 10 + 320 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , temporaryFolder . getRoot ( ) + " / output . txt " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 338 , 10 + 337 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 359 , 10 + 358 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 384 , 10 + 383 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 402 , 10 + 401 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - classname - prop . xml " , 
 - " - p " , " src / test / resources / com / puppycrawl / tools / checkstyle / mycheckstyle . properties " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , 
 + " - p " , getPath ( " mycheckstyle . properties " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 420 , 10 + 418 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - classname - prop . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , 
 " - p " , " nonexisting . properties " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 443 , 9 + 440 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - Incorrect . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - Incorrect . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 522 , 10 + 518 , 7 @ @ public class MainTest { 
 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; 
 StringBuilder sb = new StringBuilder ( ) ; 
 sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; 
 String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; 
 @ @ - 541 , 8 + 534 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; 
 + Main . main ( " - c " , getPath ( " config - filelength . xml " ) , 
 + getPath ( " checks / metrics " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml 
 new file mode 100644 
 index 0000000 . . 3bdfcad 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + < ? xml version = " 1 . 0 " ? > 
 + < ! DOCTYPE import - control PUBLIC 
 + " - / / Puppy Crawl / / DTD Import Control 1 . 0 / / EN " 
 + " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 0 . dtd " > 
 + 
 + < import - control pkg = " com " > 
 + < allow class = " some . class " / > 
 + < disallow class = " another . class " local - only = " true " / > 
 + < allow pkg = " some . pkg " / > 
 + < disallow pkg = " another . pkg " local - only = " true " / > 
 + < disallow pkg = " and . another . pkg " exact - match = " true " / > 
 + < subpackage name = " puppycrawl " > 
 + < disallow pkg = " some . pkg " / > 
 + < disallow class = " some . class " / > 
 + < / subpackage > 
 + < / import - control > 
 \ No newline at end of file
