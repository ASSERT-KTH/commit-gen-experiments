BLEU SCORE: 0.9193227152249185

TEST MSG: config : bump maven - compiler - plugin to 3 . 6 . 2
GENERATED MSG: config : bump maven - compiler - plugin to 3 . 6 . 1

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 34823ab . . 068c9bd 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 595 , 7 + 595 , 7 @ @ <nl> < plugin > <nl> < groupId > org . apache . maven . plugins < / groupId > <nl> < artifactId > maven - compiler - plugin < / artifactId > <nl> - < version > 3 . 6 . 1 < / version > <nl> + < version > 3 . 6 . 2 < / version > <nl> < configuration > <nl> < source > $ { java . version } < / source > <nl> < target > $ { java . version } < / target >
NEAREST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 1b63156 . . b3514ba 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 17 , 6 + 17 , 11 @ @ <nl> < exclude name = " StdCyclomaticComplexity " / > <nl> < / rule > <nl> <nl> + < rule ref = " rulesets / java / basic . xml / EmptyCatchBlock " > <nl> + < properties > <nl> + < property name = " allowCommentedBlocks " value = " true " / > <nl> + < / properties > <nl> + < / rule > <nl> < rule ref = " rulesets / java / codesize . xml / CyclomaticComplexity " > <nl> < properties > <nl> < property name = " showClassesComplexity " value = " false " / > <nl> @ @ - 52 , 8 + 57 , 9 @ @ <nl> < rule ref = " rulesets / java / codesize . xml / TooManyMethods " > <nl> < properties > <nl> < property name = " maxmethods " value = " 20 " / > <nl> - < ! - - Reducing the number of methods requires making excess hierarchy or duplicating code , or making existing methods too complex . - - > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' RequireThisCheck ' ] " / > <nl> + < ! - - Reducing the number of methods in RequireThisCheck requires making excess hierarchy or duplicating code , or making existing methods too complex . - - > <nl> + < ! - - PackageObjectFactory has many boilerplate methods . - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' RequireThisCheck ' or @ Image = ' PackageObjectFactory ' ] " / > <nl> < / properties > <nl> < / rule > <nl> < rule ref = " rulesets / java / codesize . xml / ExcessiveClassLength " > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> index 3fe5e42 . . 291bfcb 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> @ @ - 20 , 33 + 20 , 40 @ @ <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> import java . lang . reflect . Constructor ; <nl> + import java . util . HashMap ; <nl> import java . util . HashSet ; <nl> import java . util . Iterator ; <nl> import java . util . LinkedHashSet ; <nl> + import java . util . Map ; <nl> import java . util . Set ; <nl> import java . util . stream . Collectors ; <nl> <nl> - import org . apache . commons . logging . Log ; <nl> - import org . apache . commons . logging . LogFactory ; <nl> - <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> <nl> / * * <nl> - * A factory for creating objects from package names and names . <nl> + * A factory for creating objects from package names and names , <nl> + * considering : <nl> + * < ul > <nl> + * < li > module name - name of java class that represents module ; < / li > <nl> + * < li > module full name - fully qualifies name of java class that represents module ; < / li > <nl> + * < li > check module short name - name of Check without ' Check ' suffix ; < / li > <nl> + * < li > check module name - name of java class that represents Check ( with ' Check ' suffix ) ; < / li > <nl> + * < li > <nl> + * check module full name - fully qualifies name of java class <nl> + * that represents Check ( with ' Check ' suffix ) . <nl> + * < / li > <nl> + * < / ul > <nl> * @ author Rick Giles <nl> * @ author lkuehne <nl> * / <nl> public class PackageObjectFactory implements ModuleFactory { <nl> - / * * Logger for PackageObjectFactory . * / <nl> - private static final Log LOG = LogFactory . getLog ( PackageObjectFactory . class ) ; <nl> + / * * Map of Checkstyle module names to their fully qualified names . * / <nl> + private static final Map < String , String > NAME _ TO _ FULL _ MODULE _ NAME = new HashMap < > ( ) ; <nl> <nl> / * * Exception message when null class loader is given . * / <nl> private static final String NULL _ LOADER _ MESSAGE = " moduleClassLoader must not be null " ; <nl> <nl> - / * * Log message when ignoring exception . * / <nl> - private static final String IGNORING _ EXCEPTION _ MESSAGE = " Keep looking , ignoring exception " ; <nl> - <nl> / * * Exception message when it is unable to create a class instance . * / <nl> private static final String UNABLE _ TO _ INSTANTIATE _ EXCEPTION _ MESSAGE = <nl> " PackageObjectFactory . unableToInstantiateExceptionMessage " ; <nl> @ @ - 54 , 11 + 61 , 22 @ @ public class PackageObjectFactory implements ModuleFactory { <nl> / * * Separator to use in strings . * / <nl> private static final String STRING _ SEPARATOR = " , " ; <nl> <nl> + / * * Suffix of checks . * / <nl> + private static final String CHECK _ SUFFIX = " Check " ; <nl> + <nl> + / * * Base package of checkstyle modules checks . * / <nl> + private static final String BASE _ PACKAGE = " com . puppycrawl . tools . checkstyle " ; <nl> + <nl> / * * A list of package names to prepend to class names . * / <nl> private final Set < String > packages ; <nl> + <nl> / * * The class loader used to load Checkstyle core and custom modules . * / <nl> private final ClassLoader moduleClassLoader ; <nl> <nl> + static { <nl> + fillShortToFullModuleNamesMap ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Creates a new { @ code PackageObjectFactory } instance . <nl> * @ param packageNames the list of package names to use <nl> @ @ - 103 , 9 + 121 , 12 @ @ public class PackageObjectFactory implements ModuleFactory { <nl> * / <nl> @ Override <nl> public Object createModule ( String name ) throws CheckstyleException { <nl> - Object instance = createObjectWithIgnoringProblems ( name , getAllPossibleNames ( name ) ) ; <nl> + Object instance = createObjectFromMap ( name ) ; <nl> + if ( instance = = null ) { <nl> + instance = createObjectWithIgnoringProblems ( name , getAllPossibleNames ( name ) ) ; <nl> + } <nl> if ( instance = = null ) { <nl> - final String nameCheck = name + " Check " ; <nl> + final String nameCheck = name + CHECK _ SUFFIX ; <nl> instance = createObjectWithIgnoringProblems ( nameCheck , getAllPossibleNames ( nameCheck ) ) ; <nl> if ( instance = = null ) { <nl> <nl> @ @ - 122 , 6 + 143 , 26 @ @ public class PackageObjectFactory implements ModuleFactory { <nl> } <nl> <nl> / * * <nl> + * Create object with the help of Checkstyle NAME _ TO _ FULL _ MODULE _ NAME map . <nl> + * @ param name name of module . <nl> + * @ return instance of module if it is found in modules map . <nl> + * / <nl> + private Object createObjectFromMap ( String name ) { <nl> + final String fullModuleName = NAME _ TO _ FULL _ MODULE _ NAME . get ( name ) ; <nl> + Object instance = null ; <nl> + if ( fullModuleName = = null ) { <nl> + final String fullCheckModuleName = NAME _ TO _ FULL _ MODULE _ NAME . get ( name + CHECK _ SUFFIX ) ; <nl> + if ( fullCheckModuleName ! = null ) { <nl> + instance = createObject ( fullCheckModuleName ) ; <nl> + } <nl> + } <nl> + else { <nl> + instance = createObject ( fullModuleName ) ; <nl> + } <nl> + return instance ; <nl> + } <nl> + <nl> + / * * <nl> * Create a new instance of a named class . <nl> * @ param className the name of the class to instantiate . <nl> * @ param secondAttempt the set of names to attempt instantiation <nl> @ @ - 176 , 9 + 217 , 470 @ @ public class PackageObjectFactory implements ModuleFactory { <nl> declaredConstructor . setAccessible ( true ) ; <nl> instance = declaredConstructor . newInstance ( ) ; <nl> } <nl> - catch ( final ReflectiveOperationException | NoClassDefFoundError exception ) { <nl> - LOG . debug ( IGNORING _ EXCEPTION _ MESSAGE , exception ) ; <nl> + catch ( final ReflectiveOperationException | NoClassDefFoundError ignored ) { <nl> + / / keep looking , ignoring exception <nl> } <nl> return instance ; <nl> } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map . <nl> + * / <nl> + private static void fillShortToFullModuleNamesMap ( ) { <nl> + fillChecksFromAnnotationPackage ( ) ; <nl> + fillChecksFromBlocksPackage ( ) ; <nl> + fillChecksFromCodingPackage ( ) ; <nl> + fillChecksFromDesingPackage ( ) ; <nl> + fillChecksFromHeaderPackage ( ) ; <nl> + fillChecksFromImportsPackage ( ) ; <nl> + fillChecksFromIndentationPackage ( ) ; <nl> + fillChecksFromJavadocPackage ( ) ; <nl> + fillChecksFromMetricsPackage ( ) ; <nl> + fillChecksFromModifierPackage ( ) ; <nl> + fillChecksFromNamingPackage ( ) ; <nl> + fillChecksFromRegexpPackage ( ) ; <nl> + fillChecksFromSizesPackage ( ) ; <nl> + fillChecksFromWhitespacePackage ( ) ; <nl> + fillModulesFromChecksPackage ( ) ; <nl> + fillModulesFromFilefiltersPackage ( ) ; <nl> + fillModulesFromFiltersPackage ( ) ; <nl> + fillModulesFromCheckstylePackage ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from annotation package . <nl> + * / <nl> + private static void fillChecksFromAnnotationPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AnnotationLocationCheck " , <nl> + BASE _ PACKAGE + " . checks . annotation . AnnotationLocationCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AnnotationUseStyleCheck " , <nl> + BASE _ PACKAGE + " . checks . annotation . AnnotationUseStyleCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MissingDeprecatedCheck " , <nl> + BASE _ PACKAGE + " . checks . annotation . MissingDeprecatedCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MissingOverrideCheck " , <nl> + BASE _ PACKAGE + " . checks . annotation . MissingOverrideCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " PackageAnnotationCheck " , <nl> + BASE _ PACKAGE + " . checks . annotation . PackageAnnotationCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuppressWarningsCheck " , <nl> + BASE _ PACKAGE + " . checks . annotation . SuppressWarningsCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from blocks package . <nl> + * / <nl> + private static void fillChecksFromBlocksPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AvoidNestedBlocksCheck " , <nl> + BASE _ PACKAGE + " . checks . blocks . AvoidNestedBlocksCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EmptyBlockCheck " , <nl> + BASE _ PACKAGE + " . checks . blocks . EmptyBlockCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EmptyCatchBlockCheck " , <nl> + BASE _ PACKAGE + " . checks . blocks . EmptyCatchBlockCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " LeftCurlyCheck " , <nl> + BASE _ PACKAGE + " . checks . blocks . LeftCurlyCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NeedBracesCheck " , <nl> + BASE _ PACKAGE + " . checks . blocks . NeedBracesCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RightCurlyCheck " , <nl> + BASE _ PACKAGE + " . checks . blocks . RightCurlyCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from coding package . <nl> + * / <nl> + / / - @ cs [ ExecutableStatementCount ] splitting this method is not reasonable . <nl> + private static void fillChecksFromCodingPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ArrayTrailingCommaCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . ArrayTrailingCommaCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AvoidInlineConditionalsCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . AvoidInlineConditionalsCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " CovariantEqualsCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . CovariantEqualsCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " DeclarationOrderCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . DeclarationOrderCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " DefaultComesLastCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . DefaultComesLastCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EmptyStatementCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . EmptyStatementCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EqualsAvoidNullCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . EqualsAvoidNullCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EqualsHashCodeCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . EqualsHashCodeCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ExplicitInitializationCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . ExplicitInitializationCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FallThroughCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . FallThroughCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FinalLocalVariableCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . FinalLocalVariableCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " HiddenFieldCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . HiddenFieldCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalCatchCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . IllegalCatchCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalInstantiationCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . IllegalInstantiationCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalThrowsCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . IllegalThrowsCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalTokenCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . IllegalTokenCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalTokenTextCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . IllegalTokenTextCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalTypeCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . IllegalTypeCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " InnerAssignmentCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . InnerAssignmentCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MagicNumberCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . MagicNumberCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MissingCtorCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . MissingCtorCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MissingSwitchDefaultCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . MissingSwitchDefaultCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ModifiedControlVariableCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . ModifiedControlVariableCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MultipleStringLiteralsCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . MultipleStringLiteralsCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MultipleVariableDeclarationsCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . MultipleVariableDeclarationsCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NestedForDepthCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . NestedForDepthCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NestedIfDepthCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . NestedIfDepthCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NestedTryDepthCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . NestedTryDepthCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NoCloneCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . NoCloneCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NoFinalizerCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . NoFinalizerCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " OneStatementPerLineCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . OneStatementPerLineCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " OverloadMethodsDeclarationOrderCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . OverloadMethodsDeclarationOrderCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " PackageDeclarationCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . PackageDeclarationCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ParameterAssignmentCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . ParameterAssignmentCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RequireThisCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . RequireThisCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ReturnCountCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . ReturnCountCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SimplifyBooleanExpressionCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . SimplifyBooleanExpressionCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SimplifyBooleanReturnCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . SimplifyBooleanReturnCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " StringLiteralEqualityCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . StringLiteralEqualityCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuperCloneCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . SuperCloneCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuperFinalizeCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . SuperFinalizeCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " UnnecessaryParenthesesCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . UnnecessaryParenthesesCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " VariableDeclarationUsageDistanceCheck " , <nl> + BASE _ PACKAGE + " . checks . coding . VariableDeclarationUsageDistanceCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from design package . <nl> + * / <nl> + private static void fillChecksFromDesingPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " DesignForExtensionCheck " , <nl> + BASE _ PACKAGE + " . checks . design . DesignForExtensionCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FinalClassCheck " , <nl> + BASE _ PACKAGE + " . checks . design . FinalClassCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " HideUtilityClassConstructorCheck " , <nl> + BASE _ PACKAGE + " . checks . design . HideUtilityClassConstructorCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " InnerTypeLastCheck " , <nl> + BASE _ PACKAGE + " . checks . design . InnerTypeLastCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " InterfaceIsTypeCheck " , <nl> + BASE _ PACKAGE + " . checks . design . InterfaceIsTypeCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MutableExceptionCheck " , <nl> + BASE _ PACKAGE + " . checks . design . MutableExceptionCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " OneTopLevelClassCheck " , <nl> + BASE _ PACKAGE + " . checks . design . OneTopLevelClassCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ThrowsCountCheck " , <nl> + BASE _ PACKAGE + " . checks . design . ThrowsCountCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " VisibilityModifierCheck " , <nl> + BASE _ PACKAGE + " . checks . design . VisibilityModifierCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from header package . <nl> + * / <nl> + private static void fillChecksFromHeaderPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " HeaderCheck " , <nl> + BASE _ PACKAGE + " . checks . header . HeaderCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RegexpHeaderCheck " , <nl> + BASE _ PACKAGE + " . checks . header . RegexpHeaderCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from imports package . <nl> + * / <nl> + private static void fillChecksFromImportsPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AvoidStarImportCheck " , <nl> + BASE _ PACKAGE + " . checks . imports . AvoidStarImportCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AvoidStaticImportCheck " , <nl> + BASE _ PACKAGE + " . checks . imports . AvoidStaticImportCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " CustomImportOrderCheck " , <nl> + BASE _ PACKAGE + " . checks . imports . CustomImportOrderCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalImportCheck " , <nl> + BASE _ PACKAGE + " . checks . imports . IllegalImportCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ImportControlCheck " , <nl> + BASE _ PACKAGE + " . checks . imports . ImportControlCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ImportOrderCheck " , <nl> + BASE _ PACKAGE + " . checks . imports . ImportOrderCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RedundantImportCheck " , <nl> + BASE _ PACKAGE + " . checks . imports . RedundantImportCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " UnusedImportsCheck " , <nl> + BASE _ PACKAGE + " . checks . imports . UnusedImportsCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from indentation package . <nl> + * / <nl> + private static void fillChecksFromIndentationPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " CommentsIndentationCheck " , <nl> + BASE _ PACKAGE + " . checks . indentation . CommentsIndentationCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IndentationCheck " , <nl> + BASE _ PACKAGE + " . checks . indentation . IndentationCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from javadoc package . <nl> + * / <nl> + private static void fillChecksFromJavadocPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AtclauseOrderCheck " , <nl> + BASE _ PACKAGE + " . checks . javadoc . AtclauseOrderCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocMethodCheck " , <nl> + BASE _ PACKAGE + " . checks . javadoc . JavadocMethodCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocPackageCheck " , <nl> + BASE _ PACKAGE + " . checks . javadoc . JavadocPackageCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocParagraphCheck " , <nl> + BASE _ PACKAGE + " . checks . javadoc . JavadocParagraphCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocStyleCheck " , <nl> + BASE _ PACKAGE + " . checks . javadoc . JavadocStyleCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocTagContinuationIndentationCheck " , <nl> + BASE _ PACKAGE + " . checks . javadoc . JavadocTagContinuationIndentationCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocTypeCheck " , <nl> + BASE _ PACKAGE + " . checks . javadoc . JavadocTypeCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocVariableCheck " , <nl> + BASE _ PACKAGE + " . checks . javadoc . JavadocVariableCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NonEmptyAtclauseDescriptionCheck " , <nl> + BASE _ PACKAGE + " . checks . javadoc . NonEmptyAtclauseDescriptionCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SingleLineJavadocCheck " , <nl> + BASE _ PACKAGE + " . checks . javadoc . SingleLineJavadocCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SummaryJavadocCheck " , <nl> + BASE _ PACKAGE + " . checks . javadoc . SummaryJavadocCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " WriteTagCheck " , <nl> + BASE _ PACKAGE + " . checks . javadoc . WriteTagCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from metrics package . <nl> + * / <nl> + private static void fillChecksFromMetricsPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " BooleanExpressionComplexityCheck " , <nl> + BASE _ PACKAGE + " . checks . metrics . BooleanExpressionComplexityCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ClassDataAbstractionCouplingCheck " , <nl> + BASE _ PACKAGE + " . checks . metrics . ClassDataAbstractionCouplingCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ClassFanOutComplexityCheck " , <nl> + BASE _ PACKAGE + " . checks . metrics . ClassFanOutComplexityCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " CyclomaticComplexityCheck " , <nl> + BASE _ PACKAGE + " . checks . metrics . CyclomaticComplexityCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavaNCSSCheck " , <nl> + BASE _ PACKAGE + " . checks . metrics . JavaNCSSCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NPathComplexityCheck " , <nl> + BASE _ PACKAGE + " . checks . metrics . NPathComplexityCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from modifier package . <nl> + * / <nl> + private static void fillChecksFromModifierPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ModifierOrderCheck " , <nl> + BASE _ PACKAGE + " . checks . modifier . ModifierOrderCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RedundantModifierCheck " , <nl> + BASE _ PACKAGE + " . checks . modifier . RedundantModifierCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from naming package . <nl> + * / <nl> + private static void fillChecksFromNamingPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AbbreviationAsWordInNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . AbbreviationAsWordInNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AbstractClassNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . AbstractClassNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " CatchParameterNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . CatchParameterNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ClassTypeParameterNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . ClassTypeParameterNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ConstantNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . ConstantNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " InterfaceTypeParameterNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . InterfaceTypeParameterNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " LocalFinalVariableNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . LocalFinalVariableNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " LocalVariableNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . LocalVariableNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MemberNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . MemberNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MethodNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . MethodNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MethodTypeParameterNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . MethodTypeParameterNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " PackageNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . PackageNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ParameterNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . ParameterNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " StaticVariableNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . StaticVariableNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " TypeNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . TypeNameCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from regexp package . <nl> + * / <nl> + private static void fillChecksFromRegexpPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RegexpCheck " , <nl> + BASE _ PACKAGE + " . checks . regexp . RegexpCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RegexpMultilineCheck " , <nl> + BASE _ PACKAGE + " . checks . regexp . RegexpMultilineCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RegexpOnFilenameCheck " , <nl> + BASE _ PACKAGE + " . checks . regexp . RegexpOnFilenameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RegexpSinglelineCheck " , <nl> + BASE _ PACKAGE + " . checks . regexp . RegexpSinglelineCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RegexpSinglelineJavaCheck " , <nl> + BASE _ PACKAGE + " . checks . regexp . RegexpSinglelineJavaCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from sizes package . <nl> + * / <nl> + private static void fillChecksFromSizesPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AnonInnerLengthCheck " , <nl> + BASE _ PACKAGE + " . checks . sizes . AnonInnerLengthCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ExecutableStatementCountCheck " , <nl> + BASE _ PACKAGE + " . checks . sizes . ExecutableStatementCountCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FileLengthCheck " , <nl> + BASE _ PACKAGE + " . checks . sizes . FileLengthCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " LineLengthCheck " , <nl> + BASE _ PACKAGE + " . checks . sizes . LineLengthCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MethodCountCheck " , <nl> + BASE _ PACKAGE + " . checks . sizes . MethodCountCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MethodLengthCheck " , <nl> + BASE _ PACKAGE + " . checks . sizes . MethodLengthCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " OuterTypeNumberCheck " , <nl> + BASE _ PACKAGE + " . checks . sizes . OuterTypeNumberCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ParameterNumberCheck " , <nl> + BASE _ PACKAGE + " . checks . sizes . ParameterNumberCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with Checks from whitespace package . <nl> + * / <nl> + private static void fillChecksFromWhitespacePackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EmptyForInitializerPadCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . EmptyForInitializerPadCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EmptyForIteratorPadCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . EmptyForIteratorPadCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EmptyLineSeparatorCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . EmptyLineSeparatorCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FileTabCharacterCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . FileTabCharacterCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " GenericWhitespaceCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . GenericWhitespaceCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MethodParamPadCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . MethodParamPadCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NoLineWrapCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . NoLineWrapCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NoWhitespaceAfterCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . NoWhitespaceAfterCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NoWhitespaceBeforeCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . NoWhitespaceBeforeCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " OperatorWrapCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . OperatorWrapCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ParenPadCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . ParenPadCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SeparatorWrapCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . SeparatorWrapCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SingleSpaceSeparatorCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . SingleSpaceSeparatorCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " TypecastParenPadCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . TypecastParenPadCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " WhitespaceAfterCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . WhitespaceAfterCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " WhitespaceAroundCheck " , <nl> + BASE _ PACKAGE + " . checks . whitespace . WhitespaceAroundCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with modules from checks package . <nl> + * / <nl> + private static void fillModulesFromChecksPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ArrayTypeStyleCheck " , <nl> + BASE _ PACKAGE + " . checks . ArrayTypeStyleCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AvoidEscapedUnicodeCharactersCheck " , <nl> + BASE _ PACKAGE + " . checks . AvoidEscapedUnicodeCharactersCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " DescendantTokenCheck " , <nl> + BASE _ PACKAGE + " . checks . DescendantTokenCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FileContentsHolder " , <nl> + BASE _ PACKAGE + " . checks . FileContentsHolder " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FinalParametersCheck " , <nl> + BASE _ PACKAGE + " . checks . FinalParametersCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NewlineAtEndOfFileCheck " , <nl> + BASE _ PACKAGE + " . checks . NewlineAtEndOfFileCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " OuterTypeFilenameCheck " , <nl> + BASE _ PACKAGE + " . checks . OuterTypeFilenameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuppressWarningsHolder " , <nl> + BASE _ PACKAGE + " . checks . SuppressWarningsHolder " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " TodoCommentCheck " , <nl> + BASE _ PACKAGE + " . checks . TodoCommentCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " TrailingCommentCheck " , <nl> + BASE _ PACKAGE + " . checks . TrailingCommentCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " TranslationCheck " , <nl> + BASE _ PACKAGE + " . checks . TranslationCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " UncommentedMainCheck " , <nl> + BASE _ PACKAGE + " . checks . UncommentedMainCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " UniquePropertiesCheck " , <nl> + BASE _ PACKAGE + " . checks . UniquePropertiesCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " UpperEllCheck " , <nl> + BASE _ PACKAGE + " . checks . UpperEllCheck " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with modules from filefilters package . <nl> + * / <nl> + private static void fillModulesFromFilefiltersPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " BeforeExecutionExclusionFileFilter " , <nl> + BASE _ PACKAGE + " . filefilters . BeforeExecutionExclusionFileFilter " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with modules from filters package . <nl> + * / <nl> + private static void fillModulesFromFiltersPackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " CsvFilter " , <nl> + BASE _ PACKAGE + " . filters . CsvFilter " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IntMatchFilter " , <nl> + BASE _ PACKAGE + " . filters . IntMatchFilter " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IntRangeFilter " , <nl> + BASE _ PACKAGE + " . filters . IntRangeFilter " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SeverityMatchFilter " , <nl> + BASE _ PACKAGE + " . filters . SeverityMatchFilter " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuppressionCommentFilter " , <nl> + BASE _ PACKAGE + " . filters . SuppressionCommentFilter " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuppressionFilter " , <nl> + BASE _ PACKAGE + " . filters . SuppressionFilter " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuppressWarningsFilter " , <nl> + BASE _ PACKAGE + " . filters . SuppressWarningsFilter " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuppressWithNearbyCommentFilter " , <nl> + BASE _ PACKAGE + " . filters . SuppressWithNearbyCommentFilter " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Fill short - to - full module names map with modules from checkstyle package . <nl> + * / <nl> + private static void fillModulesFromCheckstylePackage ( ) { <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " Checker " , BASE _ PACKAGE + " . Checker " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " TreeWalker " , BASE _ PACKAGE + " . TreeWalker " ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> index 76f3b51 . . 187ba5a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> @ @ - 20 , 18 + 20 , 23 @ @ <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> import static junit . framework . TestCase . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . fail ; <nl> <nl> + import java . lang . reflect . Field ; <nl> import java . lang . reflect . Method ; <nl> + import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . HashSet ; <nl> + import java . util . Map ; <nl> import java . util . Set ; <nl> <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; <nl> + import com . puppycrawl . tools . checkstyle . internal . CheckUtil ; <nl> <nl> / * * <nl> * Enter a description of class PackageObjectFactoryTest . java . <nl> @ @ - 83 , 6 + 88 , 19 @ @ public class PackageObjectFactoryTest { <nl> } <nl> <nl> @ Test <nl> + public void testCreateObjectWithIgnoringProblems ( ) throws Exception { <nl> + final Method createObjectWithIgnoringProblemsMethod = <nl> + PackageObjectFactory . class . getDeclaredMethod ( <nl> + " createObjectWithIgnoringProblems " , String . class , Set . class ) ; <nl> + createObjectWithIgnoringProblemsMethod . setAccessible ( true ) ; <nl> + final Set < String > secondAttempt = new HashSet < > ( ) ; <nl> + secondAttempt . add ( " com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck " ) ; <nl> + final ConstantNameCheck check = ( ConstantNameCheck ) createObjectWithIgnoringProblemsMethod <nl> + . invoke ( factory , " ConstantName " , secondAttempt ) ; <nl> + assertNotNull ( check ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testJoinPackageNamesWhichContainNullWithClassName ( ) throws Exception { <nl> final Class < PackageObjectFactory > clazz = PackageObjectFactory . class ; <nl> final Method method = <nl> @ @ - 94 , 4 + 112 , 16 @ @ public class PackageObjectFactoryTest { <nl> String . valueOf ( method . invoke ( PackageObjectFactory . class , className , packages ) ) ; <nl> assertEquals ( className , actual ) ; <nl> } <nl> + <nl> + @ Test <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public void testNameToFullModuleNameMap ( ) throws Exception { <nl> + final Set < Class < ? > > classes = CheckUtil . getCheckstyleModules ( ) ; <nl> + final Class < PackageObjectFactory > packageObjectFactoryClass = PackageObjectFactory . class ; <nl> + final Field field = packageObjectFactoryClass . getDeclaredField ( " NAME _ TO _ FULL _ MODULE _ NAME " ) ; <nl> + field . setAccessible ( true ) ; <nl> + final Collection < String > canonicalNames = ( ( Map < String , String > ) field . get ( null ) ) . values ( ) ; <nl> + assertFalse ( classes . stream ( ) <nl> + . anyMatch ( clazz - > ! canonicalNames . contains ( clazz . getCanonicalName ( ) ) ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml <nl> index a771ea5 . . bb50420 100644 <nl> - - - a / src / xdocs / config . xml <nl> + + + b / src / xdocs / config . xml <nl> @ @ - 739 , 7 + 739 , 8 @ @ <nl> < code > <nl> com . puppycrawl . tools . checkstyle . filters < / code > , and < code > com . puppycrawl . tools . checkstyle . checks < / code > as <nl> well as any sub - packages of < code > com . puppycrawl . tools . checkstyle . checks < / code > that <nl> - are distributed with Checkstyle . <nl> + are distributed with Checkstyle . However standard checkstyle modules are loaded <nl> + with the help of inner map of their names to fully qualified names . <nl> < / p > <nl> < p > <nl> To specify other packages to apply ,

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 34823ab . . 068c9bd 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 595 , 7 + 595 , 7 @ @ 
 < plugin > 
 < groupId > org . apache . maven . plugins < / groupId > 
 < artifactId > maven - compiler - plugin < / artifactId > 
 - < version > 3 . 6 . 1 < / version > 
 + < version > 3 . 6 . 2 < / version > 
 < configuration > 
 < source > $ { java . version } < / source > 
 < target > $ { java . version } < / target >

NEAREST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 1b63156 . . b3514ba 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 17 , 6 + 17 , 11 @ @ 
 < exclude name = " StdCyclomaticComplexity " / > 
 < / rule > 
 
 + < rule ref = " rulesets / java / basic . xml / EmptyCatchBlock " > 
 + < properties > 
 + < property name = " allowCommentedBlocks " value = " true " / > 
 + < / properties > 
 + < / rule > 
 < rule ref = " rulesets / java / codesize . xml / CyclomaticComplexity " > 
 < properties > 
 < property name = " showClassesComplexity " value = " false " / > 
 @ @ - 52 , 8 + 57 , 9 @ @ 
 < rule ref = " rulesets / java / codesize . xml / TooManyMethods " > 
 < properties > 
 < property name = " maxmethods " value = " 20 " / > 
 - < ! - - Reducing the number of methods requires making excess hierarchy or duplicating code , or making existing methods too complex . - - > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' RequireThisCheck ' ] " / > 
 + < ! - - Reducing the number of methods in RequireThisCheck requires making excess hierarchy or duplicating code , or making existing methods too complex . - - > 
 + < ! - - PackageObjectFactory has many boilerplate methods . - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' RequireThisCheck ' or @ Image = ' PackageObjectFactory ' ] " / > 
 < / properties > 
 < / rule > 
 < rule ref = " rulesets / java / codesize . xml / ExcessiveClassLength " > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 index 3fe5e42 . . 291bfcb 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 @ @ - 20 , 33 + 20 , 40 @ @ 
 package com . puppycrawl . tools . checkstyle ; 
 
 import java . lang . reflect . Constructor ; 
 + import java . util . HashMap ; 
 import java . util . HashSet ; 
 import java . util . Iterator ; 
 import java . util . LinkedHashSet ; 
 + import java . util . Map ; 
 import java . util . Set ; 
 import java . util . stream . Collectors ; 
 
 - import org . apache . commons . logging . Log ; 
 - import org . apache . commons . logging . LogFactory ; 
 - 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 
 / * * 
 - * A factory for creating objects from package names and names . 
 + * A factory for creating objects from package names and names , 
 + * considering : 
 + * < ul > 
 + * < li > module name - name of java class that represents module ; < / li > 
 + * < li > module full name - fully qualifies name of java class that represents module ; < / li > 
 + * < li > check module short name - name of Check without ' Check ' suffix ; < / li > 
 + * < li > check module name - name of java class that represents Check ( with ' Check ' suffix ) ; < / li > 
 + * < li > 
 + * check module full name - fully qualifies name of java class 
 + * that represents Check ( with ' Check ' suffix ) . 
 + * < / li > 
 + * < / ul > 
 * @ author Rick Giles 
 * @ author lkuehne 
 * / 
 public class PackageObjectFactory implements ModuleFactory { 
 - / * * Logger for PackageObjectFactory . * / 
 - private static final Log LOG = LogFactory . getLog ( PackageObjectFactory . class ) ; 
 + / * * Map of Checkstyle module names to their fully qualified names . * / 
 + private static final Map < String , String > NAME _ TO _ FULL _ MODULE _ NAME = new HashMap < > ( ) ; 
 
 / * * Exception message when null class loader is given . * / 
 private static final String NULL _ LOADER _ MESSAGE = " moduleClassLoader must not be null " ; 
 
 - / * * Log message when ignoring exception . * / 
 - private static final String IGNORING _ EXCEPTION _ MESSAGE = " Keep looking , ignoring exception " ; 
 - 
 / * * Exception message when it is unable to create a class instance . * / 
 private static final String UNABLE _ TO _ INSTANTIATE _ EXCEPTION _ MESSAGE = 
 " PackageObjectFactory . unableToInstantiateExceptionMessage " ; 
 @ @ - 54 , 11 + 61 , 22 @ @ public class PackageObjectFactory implements ModuleFactory { 
 / * * Separator to use in strings . * / 
 private static final String STRING _ SEPARATOR = " , " ; 
 
 + / * * Suffix of checks . * / 
 + private static final String CHECK _ SUFFIX = " Check " ; 
 + 
 + / * * Base package of checkstyle modules checks . * / 
 + private static final String BASE _ PACKAGE = " com . puppycrawl . tools . checkstyle " ; 
 + 
 / * * A list of package names to prepend to class names . * / 
 private final Set < String > packages ; 
 + 
 / * * The class loader used to load Checkstyle core and custom modules . * / 
 private final ClassLoader moduleClassLoader ; 
 
 + static { 
 + fillShortToFullModuleNamesMap ( ) ; 
 + } 
 + 
 / * * 
 * Creates a new { @ code PackageObjectFactory } instance . 
 * @ param packageNames the list of package names to use 
 @ @ - 103 , 9 + 121 , 12 @ @ public class PackageObjectFactory implements ModuleFactory { 
 * / 
 @ Override 
 public Object createModule ( String name ) throws CheckstyleException { 
 - Object instance = createObjectWithIgnoringProblems ( name , getAllPossibleNames ( name ) ) ; 
 + Object instance = createObjectFromMap ( name ) ; 
 + if ( instance = = null ) { 
 + instance = createObjectWithIgnoringProblems ( name , getAllPossibleNames ( name ) ) ; 
 + } 
 if ( instance = = null ) { 
 - final String nameCheck = name + " Check " ; 
 + final String nameCheck = name + CHECK _ SUFFIX ; 
 instance = createObjectWithIgnoringProblems ( nameCheck , getAllPossibleNames ( nameCheck ) ) ; 
 if ( instance = = null ) { 
 
 @ @ - 122 , 6 + 143 , 26 @ @ public class PackageObjectFactory implements ModuleFactory { 
 } 
 
 / * * 
 + * Create object with the help of Checkstyle NAME _ TO _ FULL _ MODULE _ NAME map . 
 + * @ param name name of module . 
 + * @ return instance of module if it is found in modules map . 
 + * / 
 + private Object createObjectFromMap ( String name ) { 
 + final String fullModuleName = NAME _ TO _ FULL _ MODULE _ NAME . get ( name ) ; 
 + Object instance = null ; 
 + if ( fullModuleName = = null ) { 
 + final String fullCheckModuleName = NAME _ TO _ FULL _ MODULE _ NAME . get ( name + CHECK _ SUFFIX ) ; 
 + if ( fullCheckModuleName ! = null ) { 
 + instance = createObject ( fullCheckModuleName ) ; 
 + } 
 + } 
 + else { 
 + instance = createObject ( fullModuleName ) ; 
 + } 
 + return instance ; 
 + } 
 + 
 + / * * 
 * Create a new instance of a named class . 
 * @ param className the name of the class to instantiate . 
 * @ param secondAttempt the set of names to attempt instantiation 
 @ @ - 176 , 9 + 217 , 470 @ @ public class PackageObjectFactory implements ModuleFactory { 
 declaredConstructor . setAccessible ( true ) ; 
 instance = declaredConstructor . newInstance ( ) ; 
 } 
 - catch ( final ReflectiveOperationException | NoClassDefFoundError exception ) { 
 - LOG . debug ( IGNORING _ EXCEPTION _ MESSAGE , exception ) ; 
 + catch ( final ReflectiveOperationException | NoClassDefFoundError ignored ) { 
 + / / keep looking , ignoring exception 
 } 
 return instance ; 
 } 
 + 
 + / * * 
 + * Fill short - to - full module names map . 
 + * / 
 + private static void fillShortToFullModuleNamesMap ( ) { 
 + fillChecksFromAnnotationPackage ( ) ; 
 + fillChecksFromBlocksPackage ( ) ; 
 + fillChecksFromCodingPackage ( ) ; 
 + fillChecksFromDesingPackage ( ) ; 
 + fillChecksFromHeaderPackage ( ) ; 
 + fillChecksFromImportsPackage ( ) ; 
 + fillChecksFromIndentationPackage ( ) ; 
 + fillChecksFromJavadocPackage ( ) ; 
 + fillChecksFromMetricsPackage ( ) ; 
 + fillChecksFromModifierPackage ( ) ; 
 + fillChecksFromNamingPackage ( ) ; 
 + fillChecksFromRegexpPackage ( ) ; 
 + fillChecksFromSizesPackage ( ) ; 
 + fillChecksFromWhitespacePackage ( ) ; 
 + fillModulesFromChecksPackage ( ) ; 
 + fillModulesFromFilefiltersPackage ( ) ; 
 + fillModulesFromFiltersPackage ( ) ; 
 + fillModulesFromCheckstylePackage ( ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from annotation package . 
 + * / 
 + private static void fillChecksFromAnnotationPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AnnotationLocationCheck " , 
 + BASE _ PACKAGE + " . checks . annotation . AnnotationLocationCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AnnotationUseStyleCheck " , 
 + BASE _ PACKAGE + " . checks . annotation . AnnotationUseStyleCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MissingDeprecatedCheck " , 
 + BASE _ PACKAGE + " . checks . annotation . MissingDeprecatedCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MissingOverrideCheck " , 
 + BASE _ PACKAGE + " . checks . annotation . MissingOverrideCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " PackageAnnotationCheck " , 
 + BASE _ PACKAGE + " . checks . annotation . PackageAnnotationCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuppressWarningsCheck " , 
 + BASE _ PACKAGE + " . checks . annotation . SuppressWarningsCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from blocks package . 
 + * / 
 + private static void fillChecksFromBlocksPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AvoidNestedBlocksCheck " , 
 + BASE _ PACKAGE + " . checks . blocks . AvoidNestedBlocksCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EmptyBlockCheck " , 
 + BASE _ PACKAGE + " . checks . blocks . EmptyBlockCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EmptyCatchBlockCheck " , 
 + BASE _ PACKAGE + " . checks . blocks . EmptyCatchBlockCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " LeftCurlyCheck " , 
 + BASE _ PACKAGE + " . checks . blocks . LeftCurlyCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NeedBracesCheck " , 
 + BASE _ PACKAGE + " . checks . blocks . NeedBracesCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RightCurlyCheck " , 
 + BASE _ PACKAGE + " . checks . blocks . RightCurlyCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from coding package . 
 + * / 
 + / / - @ cs [ ExecutableStatementCount ] splitting this method is not reasonable . 
 + private static void fillChecksFromCodingPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ArrayTrailingCommaCheck " , 
 + BASE _ PACKAGE + " . checks . coding . ArrayTrailingCommaCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AvoidInlineConditionalsCheck " , 
 + BASE _ PACKAGE + " . checks . coding . AvoidInlineConditionalsCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " CovariantEqualsCheck " , 
 + BASE _ PACKAGE + " . checks . coding . CovariantEqualsCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " DeclarationOrderCheck " , 
 + BASE _ PACKAGE + " . checks . coding . DeclarationOrderCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " DefaultComesLastCheck " , 
 + BASE _ PACKAGE + " . checks . coding . DefaultComesLastCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EmptyStatementCheck " , 
 + BASE _ PACKAGE + " . checks . coding . EmptyStatementCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EqualsAvoidNullCheck " , 
 + BASE _ PACKAGE + " . checks . coding . EqualsAvoidNullCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EqualsHashCodeCheck " , 
 + BASE _ PACKAGE + " . checks . coding . EqualsHashCodeCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ExplicitInitializationCheck " , 
 + BASE _ PACKAGE + " . checks . coding . ExplicitInitializationCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FallThroughCheck " , 
 + BASE _ PACKAGE + " . checks . coding . FallThroughCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FinalLocalVariableCheck " , 
 + BASE _ PACKAGE + " . checks . coding . FinalLocalVariableCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " HiddenFieldCheck " , 
 + BASE _ PACKAGE + " . checks . coding . HiddenFieldCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalCatchCheck " , 
 + BASE _ PACKAGE + " . checks . coding . IllegalCatchCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalInstantiationCheck " , 
 + BASE _ PACKAGE + " . checks . coding . IllegalInstantiationCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalThrowsCheck " , 
 + BASE _ PACKAGE + " . checks . coding . IllegalThrowsCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalTokenCheck " , 
 + BASE _ PACKAGE + " . checks . coding . IllegalTokenCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalTokenTextCheck " , 
 + BASE _ PACKAGE + " . checks . coding . IllegalTokenTextCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalTypeCheck " , 
 + BASE _ PACKAGE + " . checks . coding . IllegalTypeCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " InnerAssignmentCheck " , 
 + BASE _ PACKAGE + " . checks . coding . InnerAssignmentCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MagicNumberCheck " , 
 + BASE _ PACKAGE + " . checks . coding . MagicNumberCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MissingCtorCheck " , 
 + BASE _ PACKAGE + " . checks . coding . MissingCtorCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MissingSwitchDefaultCheck " , 
 + BASE _ PACKAGE + " . checks . coding . MissingSwitchDefaultCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ModifiedControlVariableCheck " , 
 + BASE _ PACKAGE + " . checks . coding . ModifiedControlVariableCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MultipleStringLiteralsCheck " , 
 + BASE _ PACKAGE + " . checks . coding . MultipleStringLiteralsCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MultipleVariableDeclarationsCheck " , 
 + BASE _ PACKAGE + " . checks . coding . MultipleVariableDeclarationsCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NestedForDepthCheck " , 
 + BASE _ PACKAGE + " . checks . coding . NestedForDepthCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NestedIfDepthCheck " , 
 + BASE _ PACKAGE + " . checks . coding . NestedIfDepthCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NestedTryDepthCheck " , 
 + BASE _ PACKAGE + " . checks . coding . NestedTryDepthCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NoCloneCheck " , 
 + BASE _ PACKAGE + " . checks . coding . NoCloneCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NoFinalizerCheck " , 
 + BASE _ PACKAGE + " . checks . coding . NoFinalizerCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " OneStatementPerLineCheck " , 
 + BASE _ PACKAGE + " . checks . coding . OneStatementPerLineCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " OverloadMethodsDeclarationOrderCheck " , 
 + BASE _ PACKAGE + " . checks . coding . OverloadMethodsDeclarationOrderCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " PackageDeclarationCheck " , 
 + BASE _ PACKAGE + " . checks . coding . PackageDeclarationCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ParameterAssignmentCheck " , 
 + BASE _ PACKAGE + " . checks . coding . ParameterAssignmentCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RequireThisCheck " , 
 + BASE _ PACKAGE + " . checks . coding . RequireThisCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ReturnCountCheck " , 
 + BASE _ PACKAGE + " . checks . coding . ReturnCountCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SimplifyBooleanExpressionCheck " , 
 + BASE _ PACKAGE + " . checks . coding . SimplifyBooleanExpressionCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SimplifyBooleanReturnCheck " , 
 + BASE _ PACKAGE + " . checks . coding . SimplifyBooleanReturnCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " StringLiteralEqualityCheck " , 
 + BASE _ PACKAGE + " . checks . coding . StringLiteralEqualityCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuperCloneCheck " , 
 + BASE _ PACKAGE + " . checks . coding . SuperCloneCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuperFinalizeCheck " , 
 + BASE _ PACKAGE + " . checks . coding . SuperFinalizeCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " UnnecessaryParenthesesCheck " , 
 + BASE _ PACKAGE + " . checks . coding . UnnecessaryParenthesesCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " VariableDeclarationUsageDistanceCheck " , 
 + BASE _ PACKAGE + " . checks . coding . VariableDeclarationUsageDistanceCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from design package . 
 + * / 
 + private static void fillChecksFromDesingPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " DesignForExtensionCheck " , 
 + BASE _ PACKAGE + " . checks . design . DesignForExtensionCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FinalClassCheck " , 
 + BASE _ PACKAGE + " . checks . design . FinalClassCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " HideUtilityClassConstructorCheck " , 
 + BASE _ PACKAGE + " . checks . design . HideUtilityClassConstructorCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " InnerTypeLastCheck " , 
 + BASE _ PACKAGE + " . checks . design . InnerTypeLastCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " InterfaceIsTypeCheck " , 
 + BASE _ PACKAGE + " . checks . design . InterfaceIsTypeCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MutableExceptionCheck " , 
 + BASE _ PACKAGE + " . checks . design . MutableExceptionCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " OneTopLevelClassCheck " , 
 + BASE _ PACKAGE + " . checks . design . OneTopLevelClassCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ThrowsCountCheck " , 
 + BASE _ PACKAGE + " . checks . design . ThrowsCountCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " VisibilityModifierCheck " , 
 + BASE _ PACKAGE + " . checks . design . VisibilityModifierCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from header package . 
 + * / 
 + private static void fillChecksFromHeaderPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " HeaderCheck " , 
 + BASE _ PACKAGE + " . checks . header . HeaderCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RegexpHeaderCheck " , 
 + BASE _ PACKAGE + " . checks . header . RegexpHeaderCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from imports package . 
 + * / 
 + private static void fillChecksFromImportsPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AvoidStarImportCheck " , 
 + BASE _ PACKAGE + " . checks . imports . AvoidStarImportCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AvoidStaticImportCheck " , 
 + BASE _ PACKAGE + " . checks . imports . AvoidStaticImportCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " CustomImportOrderCheck " , 
 + BASE _ PACKAGE + " . checks . imports . CustomImportOrderCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IllegalImportCheck " , 
 + BASE _ PACKAGE + " . checks . imports . IllegalImportCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ImportControlCheck " , 
 + BASE _ PACKAGE + " . checks . imports . ImportControlCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ImportOrderCheck " , 
 + BASE _ PACKAGE + " . checks . imports . ImportOrderCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RedundantImportCheck " , 
 + BASE _ PACKAGE + " . checks . imports . RedundantImportCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " UnusedImportsCheck " , 
 + BASE _ PACKAGE + " . checks . imports . UnusedImportsCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from indentation package . 
 + * / 
 + private static void fillChecksFromIndentationPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " CommentsIndentationCheck " , 
 + BASE _ PACKAGE + " . checks . indentation . CommentsIndentationCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IndentationCheck " , 
 + BASE _ PACKAGE + " . checks . indentation . IndentationCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from javadoc package . 
 + * / 
 + private static void fillChecksFromJavadocPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AtclauseOrderCheck " , 
 + BASE _ PACKAGE + " . checks . javadoc . AtclauseOrderCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocMethodCheck " , 
 + BASE _ PACKAGE + " . checks . javadoc . JavadocMethodCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocPackageCheck " , 
 + BASE _ PACKAGE + " . checks . javadoc . JavadocPackageCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocParagraphCheck " , 
 + BASE _ PACKAGE + " . checks . javadoc . JavadocParagraphCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocStyleCheck " , 
 + BASE _ PACKAGE + " . checks . javadoc . JavadocStyleCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocTagContinuationIndentationCheck " , 
 + BASE _ PACKAGE + " . checks . javadoc . JavadocTagContinuationIndentationCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocTypeCheck " , 
 + BASE _ PACKAGE + " . checks . javadoc . JavadocTypeCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavadocVariableCheck " , 
 + BASE _ PACKAGE + " . checks . javadoc . JavadocVariableCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NonEmptyAtclauseDescriptionCheck " , 
 + BASE _ PACKAGE + " . checks . javadoc . NonEmptyAtclauseDescriptionCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SingleLineJavadocCheck " , 
 + BASE _ PACKAGE + " . checks . javadoc . SingleLineJavadocCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SummaryJavadocCheck " , 
 + BASE _ PACKAGE + " . checks . javadoc . SummaryJavadocCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " WriteTagCheck " , 
 + BASE _ PACKAGE + " . checks . javadoc . WriteTagCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from metrics package . 
 + * / 
 + private static void fillChecksFromMetricsPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " BooleanExpressionComplexityCheck " , 
 + BASE _ PACKAGE + " . checks . metrics . BooleanExpressionComplexityCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ClassDataAbstractionCouplingCheck " , 
 + BASE _ PACKAGE + " . checks . metrics . ClassDataAbstractionCouplingCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ClassFanOutComplexityCheck " , 
 + BASE _ PACKAGE + " . checks . metrics . ClassFanOutComplexityCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " CyclomaticComplexityCheck " , 
 + BASE _ PACKAGE + " . checks . metrics . CyclomaticComplexityCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " JavaNCSSCheck " , 
 + BASE _ PACKAGE + " . checks . metrics . JavaNCSSCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NPathComplexityCheck " , 
 + BASE _ PACKAGE + " . checks . metrics . NPathComplexityCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from modifier package . 
 + * / 
 + private static void fillChecksFromModifierPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ModifierOrderCheck " , 
 + BASE _ PACKAGE + " . checks . modifier . ModifierOrderCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RedundantModifierCheck " , 
 + BASE _ PACKAGE + " . checks . modifier . RedundantModifierCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from naming package . 
 + * / 
 + private static void fillChecksFromNamingPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AbbreviationAsWordInNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . AbbreviationAsWordInNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AbstractClassNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . AbstractClassNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " CatchParameterNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . CatchParameterNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ClassTypeParameterNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . ClassTypeParameterNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ConstantNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . ConstantNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " InterfaceTypeParameterNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . InterfaceTypeParameterNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " LocalFinalVariableNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . LocalFinalVariableNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " LocalVariableNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . LocalVariableNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MemberNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . MemberNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MethodNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . MethodNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MethodTypeParameterNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . MethodTypeParameterNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " PackageNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . PackageNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ParameterNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . ParameterNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " StaticVariableNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . StaticVariableNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " TypeNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . TypeNameCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from regexp package . 
 + * / 
 + private static void fillChecksFromRegexpPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RegexpCheck " , 
 + BASE _ PACKAGE + " . checks . regexp . RegexpCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RegexpMultilineCheck " , 
 + BASE _ PACKAGE + " . checks . regexp . RegexpMultilineCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RegexpOnFilenameCheck " , 
 + BASE _ PACKAGE + " . checks . regexp . RegexpOnFilenameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RegexpSinglelineCheck " , 
 + BASE _ PACKAGE + " . checks . regexp . RegexpSinglelineCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " RegexpSinglelineJavaCheck " , 
 + BASE _ PACKAGE + " . checks . regexp . RegexpSinglelineJavaCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from sizes package . 
 + * / 
 + private static void fillChecksFromSizesPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AnonInnerLengthCheck " , 
 + BASE _ PACKAGE + " . checks . sizes . AnonInnerLengthCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ExecutableStatementCountCheck " , 
 + BASE _ PACKAGE + " . checks . sizes . ExecutableStatementCountCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FileLengthCheck " , 
 + BASE _ PACKAGE + " . checks . sizes . FileLengthCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " LineLengthCheck " , 
 + BASE _ PACKAGE + " . checks . sizes . LineLengthCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MethodCountCheck " , 
 + BASE _ PACKAGE + " . checks . sizes . MethodCountCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MethodLengthCheck " , 
 + BASE _ PACKAGE + " . checks . sizes . MethodLengthCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " OuterTypeNumberCheck " , 
 + BASE _ PACKAGE + " . checks . sizes . OuterTypeNumberCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ParameterNumberCheck " , 
 + BASE _ PACKAGE + " . checks . sizes . ParameterNumberCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with Checks from whitespace package . 
 + * / 
 + private static void fillChecksFromWhitespacePackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EmptyForInitializerPadCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . EmptyForInitializerPadCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EmptyForIteratorPadCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . EmptyForIteratorPadCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " EmptyLineSeparatorCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . EmptyLineSeparatorCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FileTabCharacterCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . FileTabCharacterCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " GenericWhitespaceCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . GenericWhitespaceCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " MethodParamPadCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . MethodParamPadCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NoLineWrapCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . NoLineWrapCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NoWhitespaceAfterCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . NoWhitespaceAfterCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NoWhitespaceBeforeCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . NoWhitespaceBeforeCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " OperatorWrapCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . OperatorWrapCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ParenPadCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . ParenPadCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SeparatorWrapCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . SeparatorWrapCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SingleSpaceSeparatorCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . SingleSpaceSeparatorCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " TypecastParenPadCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . TypecastParenPadCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " WhitespaceAfterCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . WhitespaceAfterCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " WhitespaceAroundCheck " , 
 + BASE _ PACKAGE + " . checks . whitespace . WhitespaceAroundCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with modules from checks package . 
 + * / 
 + private static void fillModulesFromChecksPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " ArrayTypeStyleCheck " , 
 + BASE _ PACKAGE + " . checks . ArrayTypeStyleCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " AvoidEscapedUnicodeCharactersCheck " , 
 + BASE _ PACKAGE + " . checks . AvoidEscapedUnicodeCharactersCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " DescendantTokenCheck " , 
 + BASE _ PACKAGE + " . checks . DescendantTokenCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FileContentsHolder " , 
 + BASE _ PACKAGE + " . checks . FileContentsHolder " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " FinalParametersCheck " , 
 + BASE _ PACKAGE + " . checks . FinalParametersCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " NewlineAtEndOfFileCheck " , 
 + BASE _ PACKAGE + " . checks . NewlineAtEndOfFileCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " OuterTypeFilenameCheck " , 
 + BASE _ PACKAGE + " . checks . OuterTypeFilenameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuppressWarningsHolder " , 
 + BASE _ PACKAGE + " . checks . SuppressWarningsHolder " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " TodoCommentCheck " , 
 + BASE _ PACKAGE + " . checks . TodoCommentCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " TrailingCommentCheck " , 
 + BASE _ PACKAGE + " . checks . TrailingCommentCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " TranslationCheck " , 
 + BASE _ PACKAGE + " . checks . TranslationCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " UncommentedMainCheck " , 
 + BASE _ PACKAGE + " . checks . UncommentedMainCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " UniquePropertiesCheck " , 
 + BASE _ PACKAGE + " . checks . UniquePropertiesCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " UpperEllCheck " , 
 + BASE _ PACKAGE + " . checks . UpperEllCheck " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with modules from filefilters package . 
 + * / 
 + private static void fillModulesFromFilefiltersPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " BeforeExecutionExclusionFileFilter " , 
 + BASE _ PACKAGE + " . filefilters . BeforeExecutionExclusionFileFilter " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with modules from filters package . 
 + * / 
 + private static void fillModulesFromFiltersPackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " CsvFilter " , 
 + BASE _ PACKAGE + " . filters . CsvFilter " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IntMatchFilter " , 
 + BASE _ PACKAGE + " . filters . IntMatchFilter " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " IntRangeFilter " , 
 + BASE _ PACKAGE + " . filters . IntRangeFilter " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SeverityMatchFilter " , 
 + BASE _ PACKAGE + " . filters . SeverityMatchFilter " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuppressionCommentFilter " , 
 + BASE _ PACKAGE + " . filters . SuppressionCommentFilter " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuppressionFilter " , 
 + BASE _ PACKAGE + " . filters . SuppressionFilter " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuppressWarningsFilter " , 
 + BASE _ PACKAGE + " . filters . SuppressWarningsFilter " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " SuppressWithNearbyCommentFilter " , 
 + BASE _ PACKAGE + " . filters . SuppressWithNearbyCommentFilter " ) ; 
 + } 
 + 
 + / * * 
 + * Fill short - to - full module names map with modules from checkstyle package . 
 + * / 
 + private static void fillModulesFromCheckstylePackage ( ) { 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " Checker " , BASE _ PACKAGE + " . Checker " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " TreeWalker " , BASE _ PACKAGE + " . TreeWalker " ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 index 76f3b51 . . 187ba5a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 @ @ - 20 , 18 + 20 , 23 @ @ 
 package com . puppycrawl . tools . checkstyle ; 
 
 import static junit . framework . TestCase . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . fail ; 
 
 + import java . lang . reflect . Field ; 
 import java . lang . reflect . Method ; 
 + import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . HashSet ; 
 + import java . util . Map ; 
 import java . util . Set ; 
 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; 
 + import com . puppycrawl . tools . checkstyle . internal . CheckUtil ; 
 
 / * * 
 * Enter a description of class PackageObjectFactoryTest . java . 
 @ @ - 83 , 6 + 88 , 19 @ @ public class PackageObjectFactoryTest { 
 } 
 
 @ Test 
 + public void testCreateObjectWithIgnoringProblems ( ) throws Exception { 
 + final Method createObjectWithIgnoringProblemsMethod = 
 + PackageObjectFactory . class . getDeclaredMethod ( 
 + " createObjectWithIgnoringProblems " , String . class , Set . class ) ; 
 + createObjectWithIgnoringProblemsMethod . setAccessible ( true ) ; 
 + final Set < String > secondAttempt = new HashSet < > ( ) ; 
 + secondAttempt . add ( " com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck " ) ; 
 + final ConstantNameCheck check = ( ConstantNameCheck ) createObjectWithIgnoringProblemsMethod 
 + . invoke ( factory , " ConstantName " , secondAttempt ) ; 
 + assertNotNull ( check ) ; 
 + } 
 + 
 + @ Test 
 public void testJoinPackageNamesWhichContainNullWithClassName ( ) throws Exception { 
 final Class < PackageObjectFactory > clazz = PackageObjectFactory . class ; 
 final Method method = 
 @ @ - 94 , 4 + 112 , 16 @ @ public class PackageObjectFactoryTest { 
 String . valueOf ( method . invoke ( PackageObjectFactory . class , className , packages ) ) ; 
 assertEquals ( className , actual ) ; 
 } 
 + 
 + @ Test 
 + @ SuppressWarnings ( " unchecked " ) 
 + public void testNameToFullModuleNameMap ( ) throws Exception { 
 + final Set < Class < ? > > classes = CheckUtil . getCheckstyleModules ( ) ; 
 + final Class < PackageObjectFactory > packageObjectFactoryClass = PackageObjectFactory . class ; 
 + final Field field = packageObjectFactoryClass . getDeclaredField ( " NAME _ TO _ FULL _ MODULE _ NAME " ) ; 
 + field . setAccessible ( true ) ; 
 + final Collection < String > canonicalNames = ( ( Map < String , String > ) field . get ( null ) ) . values ( ) ; 
 + assertFalse ( classes . stream ( ) 
 + . anyMatch ( clazz - > ! canonicalNames . contains ( clazz . getCanonicalName ( ) ) ) ) ; 
 + } 
 } 
 diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml 
 index a771ea5 . . bb50420 100644 
 - - - a / src / xdocs / config . xml 
 + + + b / src / xdocs / config . xml 
 @ @ - 739 , 7 + 739 , 8 @ @ 
 < code > 
 com . puppycrawl . tools . checkstyle . filters < / code > , and < code > com . puppycrawl . tools . checkstyle . checks < / code > as 
 well as any sub - packages of < code > com . puppycrawl . tools . checkstyle . checks < / code > that 
 - are distributed with Checkstyle . 
 + are distributed with Checkstyle . However standard checkstyle modules are loaded 
 + with the help of inner map of their names to fully qualified names . 
 < / p > 
 < p > 
 To specify other packages to apply ,
