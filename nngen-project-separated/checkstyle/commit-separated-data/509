BLEU SCORE: 0.09287528999566796

TEST MSG: Issue # 5124 : removed usage of branchContains for modifiers
GENERATED MSG: Issue # 1566 : AvoidInlineConditional violations fixed

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> index a999778 . . c21d87b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> @ @ - 143 , 8 + 143 , 8 @ @ public class FinalParametersCheck extends AbstractCheck { <nl> <nl> if ( method . branchContains ( TokenTypes . PARAMETER _ DEF ) <nl> / / ignore abstract and native methods <nl> - & & ! modifiers . branchContains ( TokenTypes . ABSTRACT ) <nl> - & & ! modifiers . branchContains ( TokenTypes . LITERAL _ NATIVE ) ) { <nl> + & & modifiers . findFirstToken ( TokenTypes . ABSTRACT ) = = null <nl> + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) = = null ) { <nl> / / we can now be sure that there is at least one parameter <nl> final DetailAST parameters = <nl> method . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> index 9a33764 . . 8bc45fd 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> @ @ - 183 , 8 + 183 , 8 @ @ public class UncommentedMainCheck <nl> final DetailAST modifiers = <nl> method . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> <nl> - return modifiers . branchContains ( TokenTypes . LITERAL _ PUBLIC ) <nl> - & & modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) ; <nl> + return modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null <nl> + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> index 61468a2 . . 675447a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> @ @ - 188 , 7 + 188 , 7 @ @ public abstract class AbstractSuperCheck <nl> final DetailAST modifiersAST = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> <nl> if ( getMethodName ( ) . equals ( name ) <nl> - & & ! modifiersAST . branchContains ( TokenTypes . LITERAL _ NATIVE ) ) { <nl> + & & modifiersAST . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) = = null ) { <nl> final DetailAST params = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> overridingMethod = params . getChildCount ( ) = = 0 ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> index fd5a890 . . 8ef6197 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> @ @ - 116 , 10 + 116 , 10 @ @ public class EqualsHashCodeCheck <nl> final DetailAST parameters = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> <nl> return CheckUtils . isEqualsMethod ( ast ) <nl> - & & modifiers . branchContains ( TokenTypes . LITERAL _ PUBLIC ) <nl> + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null <nl> & & isObjectParam ( parameters . getFirstChild ( ) ) <nl> & & ( ast . branchContains ( TokenTypes . SLIST ) <nl> - | | modifiers . branchContains ( TokenTypes . LITERAL _ NATIVE ) ) ; <nl> + | | modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) ! = null ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 136 , 11 + 136 , 11 @ @ public class EqualsHashCodeCheck <nl> <nl> return type . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ INT <nl> & & " hashCode " . equals ( methodName . getText ( ) ) <nl> - & & modifiers . branchContains ( TokenTypes . LITERAL _ PUBLIC ) <nl> - & & ! modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) <nl> + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null <nl> + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null <nl> & & parameters . getFirstChild ( ) = = null <nl> & & ( ast . branchContains ( TokenTypes . SLIST ) <nl> - | | modifiers . branchContains ( TokenTypes . LITERAL _ NATIVE ) ) ; <nl> + | | modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) ! = null ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> index db3ced8 . . 811f369 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> @ @ - 152 , 7 + 152 , 7 @ @ public class ExplicitInitializationCheck extends AbstractCheck { <nl> <nl> if ( assign ! = null ) { <nl> final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - skipCase = modifiers . branchContains ( TokenTypes . FINAL ) ; <nl> + skipCase = modifiers . findFirstToken ( TokenTypes . FINAL ) ! = null ; <nl> } <nl> } <nl> return skipCase ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> index 1959c7d . . dbd45a2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> @ @ - 612 , 8 + 612 , 8 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> if ( parent . getType ( ) = = TokenTypes . METHOD _ DEF ) { <nl> final DetailAST modifiers = <nl> parent . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - abstractOrNative = modifiers . branchContains ( TokenTypes . ABSTRACT ) <nl> - | | modifiers . branchContains ( TokenTypes . LITERAL _ NATIVE ) ; <nl> + abstractOrNative = modifiers . findFirstToken ( TokenTypes . ABSTRACT ) ! = null <nl> + | | modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) ! = null ; <nl> } <nl> parent = parent . getParent ( ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> index 991e1c0 . . 437a829 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> @ @ - 246 , 7 + 246 , 7 @ @ public class HiddenFieldCheck <nl> final DetailAST typeMods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> final boolean isStaticInnerType = <nl> typeMods ! = null <nl> - & & typeMods . branchContains ( TokenTypes . LITERAL _ STATIC ) ; <nl> + & & typeMods . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; <nl> final String frameName ; <nl> <nl> if ( type = = TokenTypes . CLASS _ DEF | | type = = TokenTypes . ENUM _ DEF ) { <nl> @ @ - 268 , 11 + 268 , 11 @ @ public class HiddenFieldCheck <nl> child . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> final DetailAST mods = <nl> child . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { <nl> - newFrame . addStaticField ( name ) ; <nl> + if ( mods . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null ) { <nl> + newFrame . addInstanceField ( name ) ; <nl> } <nl> else { <nl> - newFrame . addInstanceField ( name ) ; <nl> + newFrame . addStaticField ( name ) ; <nl> } <nl> } <nl> child = child . getNextSibling ( ) ; <nl> @ @ - 365 , 7 + 365 , 7 @ @ public class HiddenFieldCheck <nl> | | parent . getType ( ) = = TokenTypes . VARIABLE _ DEF ) { <nl> final DetailAST mods = <nl> parent . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - inStatic = mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ; <nl> + inStatic = mods . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; <nl> break ; <nl> } <nl> else { <nl> @ @ - 423 , 7 + 423 , 7 @ @ public class HiddenFieldCheck <nl> / / therefore this method is potentially a setter <nl> final DetailAST typeAST = aMethodAST . findFirstToken ( TokenTypes . TYPE ) ; <nl> final String returnType = typeAST . getFirstChild ( ) . getText ( ) ; <nl> - if ( typeAST . branchContains ( TokenTypes . LITERAL _ VOID ) <nl> + if ( typeAST . findFirstToken ( TokenTypes . LITERAL _ VOID ) ! = null <nl> | | setterCanReturnItsClass & & frame . isEmbeddedIn ( returnType ) ) { <nl> / / this method has signature <nl> / / <nl> @ @ - 492 , 7 + 492 , 7 @ @ public class HiddenFieldCheck <nl> final DetailAST method = ast . getParent ( ) . getParent ( ) ; <nl> if ( method . getType ( ) = = TokenTypes . METHOD _ DEF ) { <nl> final DetailAST mods = method . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - result = mods . branchContains ( TokenTypes . ABSTRACT ) ; <nl> + result = mods . findFirstToken ( TokenTypes . ABSTRACT ) ! = null ; <nl> } <nl> } <nl> return result ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java <nl> index 0a8960f . . ca5e3fd 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java <nl> @ @ - 271 , 7 + 271 , 7 @ @ public class MagicNumberCheck extends AbstractCheck { <nl> / / explicit constant <nl> final DetailAST modifiersAST = varDefAST . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> <nl> - if ( modifiersAST . branchContains ( TokenTypes . FINAL ) ) { <nl> + if ( modifiersAST . findFirstToken ( TokenTypes . FINAL ) ! = null ) { <nl> constantDef = varDefAST ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java <nl> index 6c3ceb2 . . 6b77135 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class MissingCtorCheck extends AbstractCheck { <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - if ( ! modifiers . branchContains ( TokenTypes . ABSTRACT ) <nl> + if ( modifiers . findFirstToken ( TokenTypes . ABSTRACT ) = = null <nl> & & ast . findFirstToken ( TokenTypes . OBJBLOCK ) <nl> . findFirstToken ( TokenTypes . CTOR _ DEF ) = = null ) { <nl> log ( ast . getLineNo ( ) , MSG _ KEY ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java <nl> index 850b6d1 . . 9db5aec 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java <nl> @ @ - 148 , 7 + 148 , 7 @ @ public class NoCloneCheck extends AbstractCheck { <nl> <nl> final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> final boolean hasEmptyParamList = <nl> - ! params . branchContains ( TokenTypes . PARAMETER _ DEF ) ; <nl> + params . findFirstToken ( TokenTypes . PARAMETER _ DEF ) = = null ; <nl> <nl> if ( hasEmptyParamList ) { <nl> log ( aAST . getLineNo ( ) , MSG _ KEY ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java <nl> index c04eee0 . . fa89134 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class NoFinalizerCheck extends AbstractCheck { <nl> <nl> final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> final boolean hasEmptyParamList = <nl> - ! params . branchContains ( TokenTypes . PARAMETER _ DEF ) ; <nl> + params . findFirstToken ( TokenTypes . PARAMETER _ DEF ) = = null ; <nl> <nl> if ( hasEmptyParamList ) { <nl> log ( aAST . getLineNo ( ) , MSG _ KEY ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index 96ec8dd . . 6af261a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 352 , 11 + 352 , 11 @ @ public class RequireThisCheck extends AbstractCheck { <nl> case TokenTypes . METHOD _ DEF : <nl> final DetailAST methodFrameNameIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> final DetailAST mods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { <nl> - ( ( ClassFrame ) frame ) . addStaticMethod ( methodFrameNameIdent ) ; <nl> + if ( mods . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null ) { <nl> + ( ( ClassFrame ) frame ) . addInstanceMethod ( methodFrameNameIdent ) ; <nl> } <nl> else { <nl> - ( ( ClassFrame ) frame ) . addInstanceMethod ( methodFrameNameIdent ) ; <nl> + ( ( ClassFrame ) frame ) . addStaticMethod ( methodFrameNameIdent ) ; <nl> } <nl> frameStack . addFirst ( new MethodFrame ( frame , methodFrameNameIdent ) ) ; <nl> break ; <nl> @ @ - 386 , 7 + 386 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> final DetailAST mods = <nl> ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> if ( ScopeUtils . isInInterfaceBlock ( ast ) <nl> - | | mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { <nl> + | | mods . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ) { <nl> ( ( ClassFrame ) frame ) . addStaticMember ( ident ) ; <nl> } <nl> else { <nl> @ @ - 599 , 7 + 599 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> if ( codeBlockDefinition ! = null ) { <nl> final DetailAST modifiers = codeBlockDefinition . getFirstChild ( ) ; <nl> staticContext = codeBlockDefinition . getType ( ) = = TokenTypes . STATIC _ INIT <nl> - | | modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) ; <nl> + | | modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; <nl> } <nl> } <nl> else { <nl> @ @ - 1226 , 7 + 1226 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> boolean result = false ; <nl> for ( DetailAST member : instanceMembers ) { <nl> final DetailAST mods = member . getParent ( ) . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - final boolean finalMod = mods . branchContains ( TokenTypes . FINAL ) ; <nl> + final boolean finalMod = mods . findFirstToken ( TokenTypes . FINAL ) ! = null ; <nl> if ( finalMod & & member . equals ( instanceMember ) ) { <nl> result = true ; <nl> break ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> index 0ad057a . . c80c7d0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> @ @ - 258 , 7 + 258 , 7 @ @ public class VariableDeclarationUsageDistanceCheck extends AbstractCheck { <nl> final DetailAST modifiers = ast . getFirstChild ( ) ; <nl> <nl> if ( parentType ! = TokenTypes . OBJBLOCK <nl> - & & ( ! ignoreFinal | | ! modifiers . branchContains ( TokenTypes . FINAL ) ) ) { <nl> + & & ( ! ignoreFinal | | modifiers . findFirstToken ( TokenTypes . FINAL ) = = null ) ) { <nl> final DetailAST variable = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> <nl> if ( ! isVariableMatchesIgnorePattern ( variable . getText ( ) ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> index c2c5fd7 . . f04101a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> @ @ - 169 , 7 + 169 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> * / <nl> private static boolean isNativeMethod ( DetailAST ast ) { <nl> final DetailAST mods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - return mods . branchContains ( TokenTypes . LITERAL _ NATIVE ) ; <nl> + return mods . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) ! = null ; <nl> } <nl> <nl> / * * <nl> @ @ - 205 , 10 + 205 , 10 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> final DetailAST modifiers = methodDef . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> return ScopeUtils . getSurroundingScope ( methodDef ) . isIn ( Scope . PROTECTED ) <nl> & & ! ScopeUtils . isInInterfaceOrAnnotationBlock ( methodDef ) <nl> - & & ! modifiers . branchContains ( TokenTypes . LITERAL _ PRIVATE ) <nl> - & & ! modifiers . branchContains ( TokenTypes . ABSTRACT ) <nl> - & & ! modifiers . branchContains ( TokenTypes . FINAL ) <nl> - & & ! modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) ; <nl> + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) = = null <nl> + & & modifiers . findFirstToken ( TokenTypes . ABSTRACT ) = = null <nl> + & & modifiers . findFirstToken ( TokenTypes . FINAL ) = = null <nl> + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null ; <nl> } <nl> <nl> / * * <nl> @ @ - 220 , 7 + 220 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> private static boolean hasIgnoredAnnotation ( DetailAST methodDef , Set < String > annotations ) { <nl> final DetailAST modifiers = methodDef . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> boolean hasIgnoredAnnotation = false ; <nl> - if ( modifiers . branchContains ( TokenTypes . ANNOTATION ) ) { <nl> + if ( modifiers . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ) { <nl> final Optional < DetailAST > annotation = TokenUtils . findFirstTokenByPredicate ( modifiers , <nl> currentToken - > { <nl> return currentToken . getType ( ) = = TokenTypes . ANNOTATION <nl> @ @ - 273 , 7 + 273 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> private static boolean canBeSubclassed ( DetailAST classDef ) { <nl> final DetailAST modifiers = classDef . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> return classDef . getType ( ) ! = TokenTypes . ENUM _ DEF <nl> - & & ! modifiers . branchContains ( TokenTypes . FINAL ) <nl> + & & modifiers . findFirstToken ( TokenTypes . FINAL ) = = null <nl> & & hasDefaultOrExplicitNonPrivateCtor ( classDef ) ; <nl> } <nl> <nl> @ @ - 297 , 7 + 297 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> <nl> final DetailAST ctorMods = <nl> candidate . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - if ( ! ctorMods . branchContains ( TokenTypes . LITERAL _ PRIVATE ) ) { <nl> + if ( ctorMods . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) = = null ) { <nl> hasExplicitNonPrivateCtor = true ; <nl> break ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheck . java <nl> index da0e810 . . 8a76f7d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheck . java <nl> @ @ - 97 , 8 + 97 , 8 @ @ public class FinalClassCheck <nl> case TokenTypes . CLASS _ DEF : <nl> registerNestedSubclassToOuterSuperClasses ( ast ) ; <nl> <nl> - final boolean isFinal = modifiers . branchContains ( TokenTypes . FINAL ) ; <nl> - final boolean isAbstract = modifiers . branchContains ( TokenTypes . ABSTRACT ) ; <nl> + final boolean isFinal = modifiers . findFirstToken ( TokenTypes . FINAL ) ! = null ; <nl> + final boolean isAbstract = modifiers . findFirstToken ( TokenTypes . ABSTRACT ) ! = null ; <nl> <nl> final String qualifiedClassName = getQualifiedClassName ( ast ) ; <nl> classes . push ( new ClassDesc ( qualifiedClassName , isFinal , isAbstract ) ) ; <nl> @ @ - 107 , 11 + 107 , 11 @ @ public class FinalClassCheck <nl> case TokenTypes . CTOR _ DEF : <nl> if ( ! ScopeUtils . isInEnumBlock ( ast ) ) { <nl> final ClassDesc desc = classes . peek ( ) ; <nl> - if ( modifiers . branchContains ( TokenTypes . LITERAL _ PRIVATE ) ) { <nl> - desc . registerPrivateCtor ( ) ; <nl> + if ( modifiers . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) = = null ) { <nl> + desc . registerNonPrivateCtor ( ) ; <nl> } <nl> else { <nl> - desc . registerNonPrivateCtor ( ) ; <nl> + desc . registerPrivateCtor ( ) ; <nl> } <nl> } <nl> break ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java <nl> index 16f3af6 . . 9fa668f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java <nl> @ @ - 95 , 7 + 95 , 7 @ @ public class HideUtilityClassConstructorCheck extends AbstractCheck { <nl> * / <nl> private static boolean isAbstract ( DetailAST ast ) { <nl> return ast . findFirstToken ( TokenTypes . MODIFIERS ) <nl> - . branchContains ( TokenTypes . ABSTRACT ) ; <nl> + . findFirstToken ( TokenTypes . ABSTRACT ) ! = null ; <nl> } <nl> <nl> / * * <nl> @ @ - 105 , 7 + 105 , 7 @ @ public class HideUtilityClassConstructorCheck extends AbstractCheck { <nl> * / <nl> private static boolean isStatic ( DetailAST ast ) { <nl> return ast . findFirstToken ( TokenTypes . MODIFIERS ) <nl> - . branchContains ( TokenTypes . LITERAL _ STATIC ) ; <nl> + . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; <nl> } <nl> <nl> / * * <nl> @ @ - 193 , 9 + 193 , 9 @ @ public class HideUtilityClassConstructorCheck extends AbstractCheck { <nl> final DetailAST modifiers = <nl> child . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> final boolean isStatic = <nl> - modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) ; <nl> + modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; <nl> final boolean isPrivate = <nl> - modifiers . branchContains ( TokenTypes . LITERAL _ PRIVATE ) ; <nl> + modifiers . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) ! = null ; <nl> <nl> if ( ! isStatic ) { <nl> hasNonStaticMethodOrField = true ; <nl> @ @ - 208 , 8 + 208 , 8 @ @ public class HideUtilityClassConstructorCheck extends AbstractCheck { <nl> hasDefaultCtor = false ; <nl> final DetailAST modifiers = <nl> child . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - if ( ! modifiers . branchContains ( TokenTypes . LITERAL _ PRIVATE ) <nl> - & & ! modifiers . branchContains ( TokenTypes . LITERAL _ PROTECTED ) ) { <nl> + if ( modifiers . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) = = null <nl> + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ PROTECTED ) = = null ) { <nl> / / treat package visible as public <nl> / / for the purpose of this Check <nl> hasPublicCtor = true ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java <nl> index 3a9799e . . 739dd9b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java <nl> @ @ - 143 , 7 + 143 , 7 @ @ public final class ThrowsCountCheck extends AbstractCheck { <nl> private static boolean isOverriding ( DetailAST ast ) { <nl> final DetailAST modifiers = ast . getParent ( ) . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> boolean isOverriding = false ; <nl> - if ( modifiers . branchContains ( TokenTypes . ANNOTATION ) ) { <nl> + if ( modifiers . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ) { <nl> DetailAST child = modifiers . getFirstChild ( ) ; <nl> while ( child ! = null ) { <nl> if ( child . getType ( ) = = TokenTypes . ANNOTATION <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> index c7ae8d0 . . 99a4a3f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> @ @ - 736 , 7 + 736 , 7 @ @ public class VisibilityModifierCheck <nl> * / <nl> private static boolean isFinalField ( DetailAST variableDef ) { <nl> final DetailAST modifiers = variableDef . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - return modifiers . branchContains ( TokenTypes . FINAL ) ; <nl> + return modifiers . findFirstToken ( TokenTypes . FINAL ) ! = null ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> index 75b7f75 . . bdc20b0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> @ @ - 284 , 14 + 284 , 14 @ @ public class RedundantModifierCheck <nl> ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> / / private method ? <nl> boolean checkFinal = <nl> - modifiers . branchContains ( TokenTypes . LITERAL _ PRIVATE ) ; <nl> + modifiers . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) ! = null ; <nl> / / declared in a final class ? <nl> DetailAST parent = ast . getParent ( ) ; <nl> while ( parent ! = null ) { <nl> if ( parent . getType ( ) = = TokenTypes . CLASS _ DEF ) { <nl> final DetailAST classModifiers = <nl> parent . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - checkFinal = checkFinal | | classModifiers . branchContains ( TokenTypes . FINAL ) ; <nl> + checkFinal = checkFinal | | classModifiers . findFirstToken ( TokenTypes . FINAL ) ! = null ; <nl> parent = null ; <nl> } <nl> else if ( parent . getType ( ) = = TokenTypes . LITERAL _ NEW <nl> @ @ - 372 , 7 + 372 , 7 @ @ public class RedundantModifierCheck <nl> private static boolean isClassProtected ( DetailAST classDef ) { <nl> final DetailAST classModifiers = <nl> classDef . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - return classModifiers . branchContains ( TokenTypes . LITERAL _ PROTECTED ) ; <nl> + return classModifiers . findFirstToken ( TokenTypes . LITERAL _ PROTECTED ) ! = null ; <nl> } <nl> <nl> / * * <nl> @ @ - 384 , 7 + 384 , 8 @ @ public class RedundantModifierCheck <nl> boolean isAccessibleFromPublic = false ; <nl> final boolean isMostOuterScope = ast . getParent ( ) = = null ; <nl> final DetailAST modifiersAst = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - final boolean hasPublicModifier = modifiersAst . branchContains ( TokenTypes . LITERAL _ PUBLIC ) ; <nl> + final boolean hasPublicModifier = <nl> + modifiersAst . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null ; <nl> <nl> if ( isMostOuterScope ) { <nl> isAccessibleFromPublic = hasPublicModifier ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> index 723f500 . . 7f3cc0c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> @ @ - 244 , 9 + 244 , 9 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { <nl> } <nl> else { <nl> result = ignoreFinal <nl> - & & modifiers . branchContains ( TokenTypes . FINAL ) <nl> + & & modifiers . findFirstToken ( TokenTypes . FINAL ) ! = null <nl> | | ignoreStatic <nl> - & & modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) ; <nl> + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; <nl> } <nl> } <nl> else if ( ast . getType ( ) = = TokenTypes . METHOD _ DEF ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java <nl> index 324d28a . . 6a66669 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public abstract class AbstractAccessControlNameCheck <nl> <nl> @ Override <nl> protected boolean mustCheckName ( DetailAST ast ) { <nl> - return shouldCheckInScope ( ast ) ; <nl> + return shouldCheckInScope ( ast . findFirstToken ( TokenTypes . MODIFIERS ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 82 , 11 + 82 , 11 @ @ public abstract class AbstractAccessControlNameCheck <nl> * / <nl> protected boolean shouldCheckInScope ( DetailAST modifiers ) { <nl> final boolean isPublic = modifiers <nl> - . branchContains ( TokenTypes . LITERAL _ PUBLIC ) ; <nl> + . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null ; <nl> final boolean isProtected = modifiers <nl> - . branchContains ( TokenTypes . LITERAL _ PROTECTED ) ; <nl> + . findFirstToken ( TokenTypes . LITERAL _ PROTECTED ) ! = null ; <nl> final boolean isPrivate = modifiers <nl> - . branchContains ( TokenTypes . LITERAL _ PRIVATE ) ; <nl> + . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) ! = null ; <nl> final boolean isPackage = ! ( isPublic | | isProtected | | isPrivate ) ; <nl> <nl> return applyToPublic & & isPublic <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheck . java <nl> index 4e18739 . . 2feef3d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheck . java <nl> @ @ - 81 , 8 + 81 , 8 @ @ public class ConstantNameCheck <nl> <nl> final DetailAST modifiersAST = <nl> ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - final boolean isStatic = modifiersAST . branchContains ( TokenTypes . LITERAL _ STATIC ) ; <nl> - final boolean isFinal = modifiersAST . branchContains ( TokenTypes . FINAL ) ; <nl> + final boolean isStatic = modifiersAST . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; <nl> + final boolean isFinal = modifiersAST . findFirstToken ( TokenTypes . FINAL ) ! = null ; <nl> <nl> if ( isStatic & & isFinal & & shouldCheckInScope ( modifiersAST ) <nl> | | ScopeUtils . isInAnnotationBlock ( ast ) <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java <nl> index 558ab2e . . 8930ed5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java <nl> @ @ - 81 , 7 + 81 , 7 @ @ public class LocalFinalVariableNameCheck <nl> final DetailAST modifiersAST = <nl> ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> final boolean isFinal = ast . getType ( ) = = TokenTypes . RESOURCE <nl> - | | modifiersAST . branchContains ( TokenTypes . FINAL ) ; <nl> + | | modifiersAST . findFirstToken ( TokenTypes . FINAL ) ! = null ; <nl> return isFinal & & ScopeUtils . isLocalVariableDef ( ast ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java <nl> index 4d7da9f . . 391cc03 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class LocalVariableNameCheck <nl> } <nl> else { <nl> final DetailAST modifiersAST = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - final boolean isFinal = modifiersAST . branchContains ( TokenTypes . FINAL ) ; <nl> + final boolean isFinal = modifiersAST . findFirstToken ( TokenTypes . FINAL ) ! = null ; <nl> result = ! isFinal & & ScopeUtils . isLocalVariableDef ( ast ) ; <nl> } <nl> return result ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java <nl> index 0d7756b . . 024e22a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java <nl> @ @ - 75 , 7 + 75 , 7 @ @ public class MemberNameCheck <nl> protected final boolean mustCheckName ( DetailAST ast ) { <nl> final DetailAST modifiersAST = <nl> ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - final boolean isStatic = modifiersAST . branchContains ( TokenTypes . LITERAL _ STATIC ) ; <nl> + final boolean isStatic = modifiersAST . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; <nl> <nl> return ! isStatic & & ! ScopeUtils . isInInterfaceOrAnnotationBlock ( ast ) <nl> & & ! ScopeUtils . isLocalVariableDef ( ast ) <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / StaticVariableNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / StaticVariableNameCheck . java <nl> index 6724dde . . e90c1e6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / StaticVariableNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / StaticVariableNameCheck . java <nl> @ @ - 73 , 8 + 73 , 8 @ @ public class StaticVariableNameCheck <nl> protected final boolean mustCheckName ( DetailAST ast ) { <nl> final DetailAST modifiersAST = <nl> ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - final boolean isStatic = modifiersAST . branchContains ( TokenTypes . LITERAL _ STATIC ) ; <nl> - final boolean isFinal = modifiersAST . branchContains ( TokenTypes . FINAL ) ; <nl> + final boolean isStatic = modifiersAST . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; <nl> + final boolean isFinal = modifiersAST . findFirstToken ( TokenTypes . FINAL ) ! = null ; <nl> <nl> return isStatic <nl> & & ! isFinal <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java <nl> index b122291 . . 690c334 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java <nl> @ @ - 98 , 8 + 98 , 9 @ @ public final class CheckUtils { <nl> <nl> if ( ast . getType ( ) = = TokenTypes . METHOD _ DEF ) { <nl> final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - final boolean staticOrAbstract = modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) <nl> - | | modifiers . branchContains ( TokenTypes . ABSTRACT ) ; <nl> + final boolean staticOrAbstract = <nl> + modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null <nl> + | | modifiers . findFirstToken ( TokenTypes . ABSTRACT ) ! = null ; <nl> <nl> if ( ! staticOrAbstract ) { <nl> final DetailAST nameNode = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java <nl> index d63024d . . 111d19f 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java <nl> @ @ - 79 , 4 + 79 , 5 @ @ class Chars { <nl> char b = a ; <nl> byte c = 1 ; <nl> short d = 1 ; <nl> + final long e = 0 ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java <nl> index 1e8a350 . . 5e71df7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java <nl> @ @ - 42 , 13 + 42 , 13 @ @ import javax . swing . JTextArea ; <nl> import javax . swing . SwingUtilities ; <nl> import javax . swing . filechooser . FileFilter ; <nl> <nl> + import antlr . ANTLRException ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> <nl> - import antlr . ANTLRException ; <nl> - <nl> / * * <nl> * Displays information about a parse tree . <nl> * The user can change the file that is parsed and displayed

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 index a999778 . . c21d87b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 @ @ - 143 , 8 + 143 , 8 @ @ public class FinalParametersCheck extends AbstractCheck { 
 
 if ( method . branchContains ( TokenTypes . PARAMETER _ DEF ) 
 / / ignore abstract and native methods 
 - & & ! modifiers . branchContains ( TokenTypes . ABSTRACT ) 
 - & & ! modifiers . branchContains ( TokenTypes . LITERAL _ NATIVE ) ) { 
 + & & modifiers . findFirstToken ( TokenTypes . ABSTRACT ) = = null 
 + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) = = null ) { 
 / / we can now be sure that there is at least one parameter 
 final DetailAST parameters = 
 method . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 index 9a33764 . . 8bc45fd 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 @ @ - 183 , 8 + 183 , 8 @ @ public class UncommentedMainCheck 
 final DetailAST modifiers = 
 method . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 
 - return modifiers . branchContains ( TokenTypes . LITERAL _ PUBLIC ) 
 - & & modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) ; 
 + return modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null 
 + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 index 61468a2 . . 675447a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 @ @ - 188 , 7 + 188 , 7 @ @ public abstract class AbstractSuperCheck 
 final DetailAST modifiersAST = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 
 if ( getMethodName ( ) . equals ( name ) 
 - & & ! modifiersAST . branchContains ( TokenTypes . LITERAL _ NATIVE ) ) { 
 + & & modifiersAST . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) = = null ) { 
 final DetailAST params = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 overridingMethod = params . getChildCount ( ) = = 0 ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 index fd5a890 . . 8ef6197 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 @ @ - 116 , 10 + 116 , 10 @ @ public class EqualsHashCodeCheck 
 final DetailAST parameters = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 
 return CheckUtils . isEqualsMethod ( ast ) 
 - & & modifiers . branchContains ( TokenTypes . LITERAL _ PUBLIC ) 
 + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null 
 & & isObjectParam ( parameters . getFirstChild ( ) ) 
 & & ( ast . branchContains ( TokenTypes . SLIST ) 
 - | | modifiers . branchContains ( TokenTypes . LITERAL _ NATIVE ) ) ; 
 + | | modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) ! = null ) ; 
 } 
 
 / * * 
 @ @ - 136 , 11 + 136 , 11 @ @ public class EqualsHashCodeCheck 
 
 return type . getFirstChild ( ) . getType ( ) = = TokenTypes . LITERAL _ INT 
 & & " hashCode " . equals ( methodName . getText ( ) ) 
 - & & modifiers . branchContains ( TokenTypes . LITERAL _ PUBLIC ) 
 - & & ! modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) 
 + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null 
 + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null 
 & & parameters . getFirstChild ( ) = = null 
 & & ( ast . branchContains ( TokenTypes . SLIST ) 
 - | | modifiers . branchContains ( TokenTypes . LITERAL _ NATIVE ) ) ; 
 + | | modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) ! = null ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 index db3ced8 . . 811f369 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 @ @ - 152 , 7 + 152 , 7 @ @ public class ExplicitInitializationCheck extends AbstractCheck { 
 
 if ( assign ! = null ) { 
 final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - skipCase = modifiers . branchContains ( TokenTypes . FINAL ) ; 
 + skipCase = modifiers . findFirstToken ( TokenTypes . FINAL ) ! = null ; 
 } 
 } 
 return skipCase ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 index 1959c7d . . dbd45a2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 @ @ - 612 , 8 + 612 , 8 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 if ( parent . getType ( ) = = TokenTypes . METHOD _ DEF ) { 
 final DetailAST modifiers = 
 parent . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - abstractOrNative = modifiers . branchContains ( TokenTypes . ABSTRACT ) 
 - | | modifiers . branchContains ( TokenTypes . LITERAL _ NATIVE ) ; 
 + abstractOrNative = modifiers . findFirstToken ( TokenTypes . ABSTRACT ) ! = null 
 + | | modifiers . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) ! = null ; 
 } 
 parent = parent . getParent ( ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 index 991e1c0 . . 437a829 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 @ @ - 246 , 7 + 246 , 7 @ @ public class HiddenFieldCheck 
 final DetailAST typeMods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 final boolean isStaticInnerType = 
 typeMods ! = null 
 - & & typeMods . branchContains ( TokenTypes . LITERAL _ STATIC ) ; 
 + & & typeMods . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; 
 final String frameName ; 
 
 if ( type = = TokenTypes . CLASS _ DEF | | type = = TokenTypes . ENUM _ DEF ) { 
 @ @ - 268 , 11 + 268 , 11 @ @ public class HiddenFieldCheck 
 child . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 final DetailAST mods = 
 child . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { 
 - newFrame . addStaticField ( name ) ; 
 + if ( mods . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null ) { 
 + newFrame . addInstanceField ( name ) ; 
 } 
 else { 
 - newFrame . addInstanceField ( name ) ; 
 + newFrame . addStaticField ( name ) ; 
 } 
 } 
 child = child . getNextSibling ( ) ; 
 @ @ - 365 , 7 + 365 , 7 @ @ public class HiddenFieldCheck 
 | | parent . getType ( ) = = TokenTypes . VARIABLE _ DEF ) { 
 final DetailAST mods = 
 parent . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - inStatic = mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ; 
 + inStatic = mods . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; 
 break ; 
 } 
 else { 
 @ @ - 423 , 7 + 423 , 7 @ @ public class HiddenFieldCheck 
 / / therefore this method is potentially a setter 
 final DetailAST typeAST = aMethodAST . findFirstToken ( TokenTypes . TYPE ) ; 
 final String returnType = typeAST . getFirstChild ( ) . getText ( ) ; 
 - if ( typeAST . branchContains ( TokenTypes . LITERAL _ VOID ) 
 + if ( typeAST . findFirstToken ( TokenTypes . LITERAL _ VOID ) ! = null 
 | | setterCanReturnItsClass & & frame . isEmbeddedIn ( returnType ) ) { 
 / / this method has signature 
 / / 
 @ @ - 492 , 7 + 492 , 7 @ @ public class HiddenFieldCheck 
 final DetailAST method = ast . getParent ( ) . getParent ( ) ; 
 if ( method . getType ( ) = = TokenTypes . METHOD _ DEF ) { 
 final DetailAST mods = method . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - result = mods . branchContains ( TokenTypes . ABSTRACT ) ; 
 + result = mods . findFirstToken ( TokenTypes . ABSTRACT ) ! = null ; 
 } 
 } 
 return result ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java 
 index 0a8960f . . ca5e3fd 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheck . java 
 @ @ - 271 , 7 + 271 , 7 @ @ public class MagicNumberCheck extends AbstractCheck { 
 / / explicit constant 
 final DetailAST modifiersAST = varDefAST . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 
 - if ( modifiersAST . branchContains ( TokenTypes . FINAL ) ) { 
 + if ( modifiersAST . findFirstToken ( TokenTypes . FINAL ) ! = null ) { 
 constantDef = varDefAST ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java 
 index 6c3ceb2 . . 6b77135 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java 
 @ @ - 63 , 7 + 63 , 7 @ @ public class MissingCtorCheck extends AbstractCheck { 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - if ( ! modifiers . branchContains ( TokenTypes . ABSTRACT ) 
 + if ( modifiers . findFirstToken ( TokenTypes . ABSTRACT ) = = null 
 & & ast . findFirstToken ( TokenTypes . OBJBLOCK ) 
 . findFirstToken ( TokenTypes . CTOR _ DEF ) = = null ) { 
 log ( ast . getLineNo ( ) , MSG _ KEY ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java 
 index 850b6d1 . . 9db5aec 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java 
 @ @ - 148 , 7 + 148 , 7 @ @ public class NoCloneCheck extends AbstractCheck { 
 
 final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 final boolean hasEmptyParamList = 
 - ! params . branchContains ( TokenTypes . PARAMETER _ DEF ) ; 
 + params . findFirstToken ( TokenTypes . PARAMETER _ DEF ) = = null ; 
 
 if ( hasEmptyParamList ) { 
 log ( aAST . getLineNo ( ) , MSG _ KEY ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java 
 index c04eee0 . . fa89134 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java 
 @ @ - 63 , 7 + 63 , 7 @ @ public class NoFinalizerCheck extends AbstractCheck { 
 
 final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 final boolean hasEmptyParamList = 
 - ! params . branchContains ( TokenTypes . PARAMETER _ DEF ) ; 
 + params . findFirstToken ( TokenTypes . PARAMETER _ DEF ) = = null ; 
 
 if ( hasEmptyParamList ) { 
 log ( aAST . getLineNo ( ) , MSG _ KEY ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index 96ec8dd . . 6af261a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 352 , 11 + 352 , 11 @ @ public class RequireThisCheck extends AbstractCheck { 
 case TokenTypes . METHOD _ DEF : 
 final DetailAST methodFrameNameIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 final DetailAST mods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { 
 - ( ( ClassFrame ) frame ) . addStaticMethod ( methodFrameNameIdent ) ; 
 + if ( mods . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null ) { 
 + ( ( ClassFrame ) frame ) . addInstanceMethod ( methodFrameNameIdent ) ; 
 } 
 else { 
 - ( ( ClassFrame ) frame ) . addInstanceMethod ( methodFrameNameIdent ) ; 
 + ( ( ClassFrame ) frame ) . addStaticMethod ( methodFrameNameIdent ) ; 
 } 
 frameStack . addFirst ( new MethodFrame ( frame , methodFrameNameIdent ) ) ; 
 break ; 
 @ @ - 386 , 7 + 386 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 final DetailAST mods = 
 ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 if ( ScopeUtils . isInInterfaceBlock ( ast ) 
 - | | mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { 
 + | | mods . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ) { 
 ( ( ClassFrame ) frame ) . addStaticMember ( ident ) ; 
 } 
 else { 
 @ @ - 599 , 7 + 599 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 if ( codeBlockDefinition ! = null ) { 
 final DetailAST modifiers = codeBlockDefinition . getFirstChild ( ) ; 
 staticContext = codeBlockDefinition . getType ( ) = = TokenTypes . STATIC _ INIT 
 - | | modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) ; 
 + | | modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; 
 } 
 } 
 else { 
 @ @ - 1226 , 7 + 1226 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 boolean result = false ; 
 for ( DetailAST member : instanceMembers ) { 
 final DetailAST mods = member . getParent ( ) . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - final boolean finalMod = mods . branchContains ( TokenTypes . FINAL ) ; 
 + final boolean finalMod = mods . findFirstToken ( TokenTypes . FINAL ) ! = null ; 
 if ( finalMod & & member . equals ( instanceMember ) ) { 
 result = true ; 
 break ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 index 0ad057a . . c80c7d0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 @ @ - 258 , 7 + 258 , 7 @ @ public class VariableDeclarationUsageDistanceCheck extends AbstractCheck { 
 final DetailAST modifiers = ast . getFirstChild ( ) ; 
 
 if ( parentType ! = TokenTypes . OBJBLOCK 
 - & & ( ! ignoreFinal | | ! modifiers . branchContains ( TokenTypes . FINAL ) ) ) { 
 + & & ( ! ignoreFinal | | modifiers . findFirstToken ( TokenTypes . FINAL ) = = null ) ) { 
 final DetailAST variable = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 
 if ( ! isVariableMatchesIgnorePattern ( variable . getText ( ) ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 index c2c5fd7 . . f04101a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 @ @ - 169 , 7 + 169 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 * / 
 private static boolean isNativeMethod ( DetailAST ast ) { 
 final DetailAST mods = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - return mods . branchContains ( TokenTypes . LITERAL _ NATIVE ) ; 
 + return mods . findFirstToken ( TokenTypes . LITERAL _ NATIVE ) ! = null ; 
 } 
 
 / * * 
 @ @ - 205 , 10 + 205 , 10 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 final DetailAST modifiers = methodDef . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 return ScopeUtils . getSurroundingScope ( methodDef ) . isIn ( Scope . PROTECTED ) 
 & & ! ScopeUtils . isInInterfaceOrAnnotationBlock ( methodDef ) 
 - & & ! modifiers . branchContains ( TokenTypes . LITERAL _ PRIVATE ) 
 - & & ! modifiers . branchContains ( TokenTypes . ABSTRACT ) 
 - & & ! modifiers . branchContains ( TokenTypes . FINAL ) 
 - & & ! modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) ; 
 + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) = = null 
 + & & modifiers . findFirstToken ( TokenTypes . ABSTRACT ) = = null 
 + & & modifiers . findFirstToken ( TokenTypes . FINAL ) = = null 
 + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) = = null ; 
 } 
 
 / * * 
 @ @ - 220 , 7 + 220 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 private static boolean hasIgnoredAnnotation ( DetailAST methodDef , Set < String > annotations ) { 
 final DetailAST modifiers = methodDef . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 boolean hasIgnoredAnnotation = false ; 
 - if ( modifiers . branchContains ( TokenTypes . ANNOTATION ) ) { 
 + if ( modifiers . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ) { 
 final Optional < DetailAST > annotation = TokenUtils . findFirstTokenByPredicate ( modifiers , 
 currentToken - > { 
 return currentToken . getType ( ) = = TokenTypes . ANNOTATION 
 @ @ - 273 , 7 + 273 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 private static boolean canBeSubclassed ( DetailAST classDef ) { 
 final DetailAST modifiers = classDef . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 return classDef . getType ( ) ! = TokenTypes . ENUM _ DEF 
 - & & ! modifiers . branchContains ( TokenTypes . FINAL ) 
 + & & modifiers . findFirstToken ( TokenTypes . FINAL ) = = null 
 & & hasDefaultOrExplicitNonPrivateCtor ( classDef ) ; 
 } 
 
 @ @ - 297 , 7 + 297 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 
 final DetailAST ctorMods = 
 candidate . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - if ( ! ctorMods . branchContains ( TokenTypes . LITERAL _ PRIVATE ) ) { 
 + if ( ctorMods . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) = = null ) { 
 hasExplicitNonPrivateCtor = true ; 
 break ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheck . java 
 index da0e810 . . 8a76f7d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheck . java 
 @ @ - 97 , 8 + 97 , 8 @ @ public class FinalClassCheck 
 case TokenTypes . CLASS _ DEF : 
 registerNestedSubclassToOuterSuperClasses ( ast ) ; 
 
 - final boolean isFinal = modifiers . branchContains ( TokenTypes . FINAL ) ; 
 - final boolean isAbstract = modifiers . branchContains ( TokenTypes . ABSTRACT ) ; 
 + final boolean isFinal = modifiers . findFirstToken ( TokenTypes . FINAL ) ! = null ; 
 + final boolean isAbstract = modifiers . findFirstToken ( TokenTypes . ABSTRACT ) ! = null ; 
 
 final String qualifiedClassName = getQualifiedClassName ( ast ) ; 
 classes . push ( new ClassDesc ( qualifiedClassName , isFinal , isAbstract ) ) ; 
 @ @ - 107 , 11 + 107 , 11 @ @ public class FinalClassCheck 
 case TokenTypes . CTOR _ DEF : 
 if ( ! ScopeUtils . isInEnumBlock ( ast ) ) { 
 final ClassDesc desc = classes . peek ( ) ; 
 - if ( modifiers . branchContains ( TokenTypes . LITERAL _ PRIVATE ) ) { 
 - desc . registerPrivateCtor ( ) ; 
 + if ( modifiers . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) = = null ) { 
 + desc . registerNonPrivateCtor ( ) ; 
 } 
 else { 
 - desc . registerNonPrivateCtor ( ) ; 
 + desc . registerPrivateCtor ( ) ; 
 } 
 } 
 break ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java 
 index 16f3af6 . . 9fa668f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java 
 @ @ - 95 , 7 + 95 , 7 @ @ public class HideUtilityClassConstructorCheck extends AbstractCheck { 
 * / 
 private static boolean isAbstract ( DetailAST ast ) { 
 return ast . findFirstToken ( TokenTypes . MODIFIERS ) 
 - . branchContains ( TokenTypes . ABSTRACT ) ; 
 + . findFirstToken ( TokenTypes . ABSTRACT ) ! = null ; 
 } 
 
 / * * 
 @ @ - 105 , 7 + 105 , 7 @ @ public class HideUtilityClassConstructorCheck extends AbstractCheck { 
 * / 
 private static boolean isStatic ( DetailAST ast ) { 
 return ast . findFirstToken ( TokenTypes . MODIFIERS ) 
 - . branchContains ( TokenTypes . LITERAL _ STATIC ) ; 
 + . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; 
 } 
 
 / * * 
 @ @ - 193 , 9 + 193 , 9 @ @ public class HideUtilityClassConstructorCheck extends AbstractCheck { 
 final DetailAST modifiers = 
 child . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 final boolean isStatic = 
 - modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) ; 
 + modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; 
 final boolean isPrivate = 
 - modifiers . branchContains ( TokenTypes . LITERAL _ PRIVATE ) ; 
 + modifiers . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) ! = null ; 
 
 if ( ! isStatic ) { 
 hasNonStaticMethodOrField = true ; 
 @ @ - 208 , 8 + 208 , 8 @ @ public class HideUtilityClassConstructorCheck extends AbstractCheck { 
 hasDefaultCtor = false ; 
 final DetailAST modifiers = 
 child . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - if ( ! modifiers . branchContains ( TokenTypes . LITERAL _ PRIVATE ) 
 - & & ! modifiers . branchContains ( TokenTypes . LITERAL _ PROTECTED ) ) { 
 + if ( modifiers . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) = = null 
 + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ PROTECTED ) = = null ) { 
 / / treat package visible as public 
 / / for the purpose of this Check 
 hasPublicCtor = true ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java 
 index 3a9799e . . 739dd9b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java 
 @ @ - 143 , 7 + 143 , 7 @ @ public final class ThrowsCountCheck extends AbstractCheck { 
 private static boolean isOverriding ( DetailAST ast ) { 
 final DetailAST modifiers = ast . getParent ( ) . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 boolean isOverriding = false ; 
 - if ( modifiers . branchContains ( TokenTypes . ANNOTATION ) ) { 
 + if ( modifiers . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ) { 
 DetailAST child = modifiers . getFirstChild ( ) ; 
 while ( child ! = null ) { 
 if ( child . getType ( ) = = TokenTypes . ANNOTATION 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 index c7ae8d0 . . 99a4a3f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 @ @ - 736 , 7 + 736 , 7 @ @ public class VisibilityModifierCheck 
 * / 
 private static boolean isFinalField ( DetailAST variableDef ) { 
 final DetailAST modifiers = variableDef . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - return modifiers . branchContains ( TokenTypes . FINAL ) ; 
 + return modifiers . findFirstToken ( TokenTypes . FINAL ) ! = null ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 index 75b7f75 . . bdc20b0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 @ @ - 284 , 14 + 284 , 14 @ @ public class RedundantModifierCheck 
 ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 / / private method ? 
 boolean checkFinal = 
 - modifiers . branchContains ( TokenTypes . LITERAL _ PRIVATE ) ; 
 + modifiers . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) ! = null ; 
 / / declared in a final class ? 
 DetailAST parent = ast . getParent ( ) ; 
 while ( parent ! = null ) { 
 if ( parent . getType ( ) = = TokenTypes . CLASS _ DEF ) { 
 final DetailAST classModifiers = 
 parent . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - checkFinal = checkFinal | | classModifiers . branchContains ( TokenTypes . FINAL ) ; 
 + checkFinal = checkFinal | | classModifiers . findFirstToken ( TokenTypes . FINAL ) ! = null ; 
 parent = null ; 
 } 
 else if ( parent . getType ( ) = = TokenTypes . LITERAL _ NEW 
 @ @ - 372 , 7 + 372 , 7 @ @ public class RedundantModifierCheck 
 private static boolean isClassProtected ( DetailAST classDef ) { 
 final DetailAST classModifiers = 
 classDef . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - return classModifiers . branchContains ( TokenTypes . LITERAL _ PROTECTED ) ; 
 + return classModifiers . findFirstToken ( TokenTypes . LITERAL _ PROTECTED ) ! = null ; 
 } 
 
 / * * 
 @ @ - 384 , 7 + 384 , 8 @ @ public class RedundantModifierCheck 
 boolean isAccessibleFromPublic = false ; 
 final boolean isMostOuterScope = ast . getParent ( ) = = null ; 
 final DetailAST modifiersAst = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - final boolean hasPublicModifier = modifiersAst . branchContains ( TokenTypes . LITERAL _ PUBLIC ) ; 
 + final boolean hasPublicModifier = 
 + modifiersAst . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null ; 
 
 if ( isMostOuterScope ) { 
 isAccessibleFromPublic = hasPublicModifier ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 index 723f500 . . 7f3cc0c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 @ @ - 244 , 9 + 244 , 9 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { 
 } 
 else { 
 result = ignoreFinal 
 - & & modifiers . branchContains ( TokenTypes . FINAL ) 
 + & & modifiers . findFirstToken ( TokenTypes . FINAL ) ! = null 
 | | ignoreStatic 
 - & & modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) ; 
 + & & modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; 
 } 
 } 
 else if ( ast . getType ( ) = = TokenTypes . METHOD _ DEF ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java 
 index 324d28a . . 6a66669 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public abstract class AbstractAccessControlNameCheck 
 
 @ Override 
 protected boolean mustCheckName ( DetailAST ast ) { 
 - return shouldCheckInScope ( ast ) ; 
 + return shouldCheckInScope ( ast . findFirstToken ( TokenTypes . MODIFIERS ) ) ; 
 } 
 
 / * * 
 @ @ - 82 , 11 + 82 , 11 @ @ public abstract class AbstractAccessControlNameCheck 
 * / 
 protected boolean shouldCheckInScope ( DetailAST modifiers ) { 
 final boolean isPublic = modifiers 
 - . branchContains ( TokenTypes . LITERAL _ PUBLIC ) ; 
 + . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null ; 
 final boolean isProtected = modifiers 
 - . branchContains ( TokenTypes . LITERAL _ PROTECTED ) ; 
 + . findFirstToken ( TokenTypes . LITERAL _ PROTECTED ) ! = null ; 
 final boolean isPrivate = modifiers 
 - . branchContains ( TokenTypes . LITERAL _ PRIVATE ) ; 
 + . findFirstToken ( TokenTypes . LITERAL _ PRIVATE ) ! = null ; 
 final boolean isPackage = ! ( isPublic | | isProtected | | isPrivate ) ; 
 
 return applyToPublic & & isPublic 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheck . java 
 index 4e18739 . . 2feef3d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheck . java 
 @ @ - 81 , 8 + 81 , 8 @ @ public class ConstantNameCheck 
 
 final DetailAST modifiersAST = 
 ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - final boolean isStatic = modifiersAST . branchContains ( TokenTypes . LITERAL _ STATIC ) ; 
 - final boolean isFinal = modifiersAST . branchContains ( TokenTypes . FINAL ) ; 
 + final boolean isStatic = modifiersAST . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; 
 + final boolean isFinal = modifiersAST . findFirstToken ( TokenTypes . FINAL ) ! = null ; 
 
 if ( isStatic & & isFinal & & shouldCheckInScope ( modifiersAST ) 
 | | ScopeUtils . isInAnnotationBlock ( ast ) 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java 
 index 558ab2e . . 8930ed5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheck . java 
 @ @ - 81 , 7 + 81 , 7 @ @ public class LocalFinalVariableNameCheck 
 final DetailAST modifiersAST = 
 ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 final boolean isFinal = ast . getType ( ) = = TokenTypes . RESOURCE 
 - | | modifiersAST . branchContains ( TokenTypes . FINAL ) ; 
 + | | modifiersAST . findFirstToken ( TokenTypes . FINAL ) ! = null ; 
 return isFinal & & ScopeUtils . isLocalVariableDef ( ast ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java 
 index 4d7da9f . . 391cc03 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java 
 @ @ - 120 , 7 + 120 , 7 @ @ public class LocalVariableNameCheck 
 } 
 else { 
 final DetailAST modifiersAST = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - final boolean isFinal = modifiersAST . branchContains ( TokenTypes . FINAL ) ; 
 + final boolean isFinal = modifiersAST . findFirstToken ( TokenTypes . FINAL ) ! = null ; 
 result = ! isFinal & & ScopeUtils . isLocalVariableDef ( ast ) ; 
 } 
 return result ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java 
 index 0d7756b . . 024e22a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java 
 @ @ - 75 , 7 + 75 , 7 @ @ public class MemberNameCheck 
 protected final boolean mustCheckName ( DetailAST ast ) { 
 final DetailAST modifiersAST = 
 ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - final boolean isStatic = modifiersAST . branchContains ( TokenTypes . LITERAL _ STATIC ) ; 
 + final boolean isStatic = modifiersAST . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; 
 
 return ! isStatic & & ! ScopeUtils . isInInterfaceOrAnnotationBlock ( ast ) 
 & & ! ScopeUtils . isLocalVariableDef ( ast ) 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / StaticVariableNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / StaticVariableNameCheck . java 
 index 6724dde . . e90c1e6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / StaticVariableNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / StaticVariableNameCheck . java 
 @ @ - 73 , 8 + 73 , 8 @ @ public class StaticVariableNameCheck 
 protected final boolean mustCheckName ( DetailAST ast ) { 
 final DetailAST modifiersAST = 
 ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - final boolean isStatic = modifiersAST . branchContains ( TokenTypes . LITERAL _ STATIC ) ; 
 - final boolean isFinal = modifiersAST . branchContains ( TokenTypes . FINAL ) ; 
 + final boolean isStatic = modifiersAST . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ; 
 + final boolean isFinal = modifiersAST . findFirstToken ( TokenTypes . FINAL ) ! = null ; 
 
 return isStatic 
 & & ! isFinal 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java 
 index b122291 . . 690c334 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java 
 @ @ - 98 , 8 + 98 , 9 @ @ public final class CheckUtils { 
 
 if ( ast . getType ( ) = = TokenTypes . METHOD _ DEF ) { 
 final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - final boolean staticOrAbstract = modifiers . branchContains ( TokenTypes . LITERAL _ STATIC ) 
 - | | modifiers . branchContains ( TokenTypes . ABSTRACT ) ; 
 + final boolean staticOrAbstract = 
 + modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null 
 + | | modifiers . findFirstToken ( TokenTypes . ABSTRACT ) ! = null ; 
 
 if ( ! staticOrAbstract ) { 
 final DetailAST nameNode = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java 
 index d63024d . . 111d19f 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java 
 @ @ - 79 , 4 + 79 , 5 @ @ class Chars { 
 char b = a ; 
 byte c = 1 ; 
 short d = 1 ; 
 + final long e = 0 ; 
 }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java 
 index 1e8a350 . . 5e71df7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java 
 @ @ - 42 , 13 + 42 , 13 @ @ import javax . swing . JTextArea ; 
 import javax . swing . SwingUtilities ; 
 import javax . swing . filechooser . FileFilter ; 
 
 + import antlr . ANTLRException ; 
 + 
 import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 
 - import antlr . ANTLRException ; 
 - 
 / * * 
 * Displays information about a parse tree . 
 * The user can change the file that is parsed and displayed
