BLEU SCORE: 0.532422158401508

TEST MSG: Issue # 4394 : increase coverage of pitest - checkstyle - api profile to 100 %
GENERATED MSG: Issue # 4400 : increase coverage of pitest - checkstyle - common profile to 89 %

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 293a401 . . 6b35402 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2206 , 7 + 2206 , 7 @ @ <nl> < ! - - cause of https : / / github . com / checkstyle / checkstyle / issues / 3605 - - > <nl> < avoidCallsTo > com . puppycrawl . tools . checkstyle . api . AbstractLoader $ FeaturesForVerySecureJavaInstallations < / avoidCallsTo > <nl> < / avoidCallsTo > <nl> - < mutationThreshold > 96 < / mutationThreshold > <nl> + < mutationThreshold > 100 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> index d276c67 . . 09b78f8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> @ @ - 19 , 13 + 19 , 22 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> + import static org . junit . Assert . assertArrayEquals ; <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> import java . io . File ; <nl> + import java . util . Arrays ; <nl> import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> <nl> import org . junit . Test ; <nl> + import org . powermock . reflect . Whitebox ; <nl> + <nl> + import com . google . common . collect . ImmutableMap ; <nl> <nl> public class FileContentsTest { <nl> <nl> @ @ - 56 , 6 + 65 , 91 @ @ public class FileContentsTest { <nl> new FileText ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; <nl> fileContents . reportSingleLineComment ( 1 , 2 ) ; <nl> assertTrue ( fileContents . hasIntersectionWithComment ( 1 , 5 , 1 , 6 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testReportCppComment ( ) { <nl> + final FileContents fileContents = new FileContents ( <nl> + new FileText ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; <nl> + fileContents . reportCppComment ( 1 , 2 ) ; <nl> + final Map < Integer , TextBlock > cppComments = fileContents . getCppComments ( ) ; <nl> + <nl> + assertEquals ( new Comment ( new String [ ] { " / / " } , 2 , 1 , 6 ) . toString ( ) , <nl> + cppComments . get ( 1 ) . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testHasIntersectionWithSingleLineComment ( ) { <nl> + final FileContents fileContents = new FileContents ( <nl> + new FileText ( new File ( " filename " ) , Arrays . asList ( " " , " / / test " , <nl> + " / / test " , " / / test " ) ) ) ; <nl> + fileContents . reportCppComment ( 4 , 4 ) ; <nl> + <nl> + assertTrue ( fileContents . hasIntersectionWithComment ( 1 , 3 , 4 , 6 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testReportComment ( ) { <nl> + final FileContents fileContents = new FileContents ( <nl> + new FileText ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; <nl> + fileContents . reportCComment ( 1 , 2 , 1 , 2 ) ; <nl> + final ImmutableMap < Integer , List < TextBlock > > comments = fileContents . getCComments ( ) ; <nl> + <nl> + assertEquals ( new Comment ( new String [ ] { " / / " } , 2 , 1 , 2 ) . toString ( ) , <nl> + comments . get ( 1 ) . get ( 0 ) . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testHasIntersectionWithBlockComment ( ) { <nl> + final FileContents fileContents = new FileContents ( new FileText ( new File ( " filename " ) , <nl> + Arrays . asList ( " / * * / " , " " , " / * test " , " * / " , " " ) ) ) ; <nl> + fileContents . reportCComment ( 1 , 2 , 1 , 5 ) ; <nl> + fileContents . reportCComment ( 3 , 2 , 4 , 2 ) ; <nl> + <nl> + assertTrue ( fileContents . hasIntersectionWithComment ( 2 , 2 , 3 , 6 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testHasIntersectionWithBlockComment2 ( ) { <nl> + final FileContents fileContents = new FileContents ( <nl> + new FileText ( new File ( " filename " ) , Arrays . asList ( " / * * / " , " " , " " ) ) ) ; <nl> + fileContents . reportCComment ( 1 , 2 , 1 , 5 ) ; <nl> + <nl> + assertFalse ( fileContents . hasIntersectionWithComment ( 2 , 2 , 3 , 6 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testInPackageInfo ( ) { <nl> + final FileContents fileContents = new FileContents ( new FileText ( <nl> + new File ( " filename . package - info . java " ) , <nl> + Collections . singletonList ( " / / " ) ) ) ; <nl> + <nl> + assertTrue ( fileContents . inPackageInfo ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetJavadocBefore ( ) { <nl> + final FileContents fileContents = new FileContents ( <nl> + new FileText ( new File ( " filename " ) , Collections . singletonList ( " " ) ) ) ; <nl> + final Map < Integer , TextBlock > javadoc = new HashMap < > ( ) ; <nl> + javadoc . put ( 0 , new Comment ( new String [ ] { " / / " } , 2 , 1 , 2 ) ) ; <nl> + Whitebox . setInternalState ( fileContents , " javadocComments " , javadoc ) ; <nl> + final TextBlock javadocBefore = fileContents . getJavadocBefore ( 2 ) ; <nl> + <nl> + assertEquals ( new Comment ( new String [ ] { " / / " } , 2 , 1 , 2 ) . toString ( ) , <nl> + javadocBefore . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testExtractBlockComment ( ) { <nl> + final FileContents fileContents = new FileContents ( <nl> + new FileText ( new File ( " filename " ) , Arrays . asList ( " " , " " , " / * test " , <nl> + " * / " , " " ) ) ) ; <nl> + fileContents . reportCComment ( 3 , 2 , 4 , 2 ) ; <nl> + final ImmutableMap < Integer , List < TextBlock > > blockComments = <nl> + fileContents . getBlockComments ( ) ; <nl> + final String [ ] text = blockComments . get ( 3 ) . get ( 0 ) . getText ( ) ; <nl> <nl> + assertArrayEquals ( new String [ ] { " / * test " , " * " } , text ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java <nl> index 939b055 . . 379087f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java <nl> @ @ - 22 , 19 + 22 , 28 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> import static com . puppycrawl . tools . checkstyle . utils . CommonUtils . EMPTY _ BYTE _ ARRAY ; <nl> import static com . puppycrawl . tools . checkstyle . utils . CommonUtils . EMPTY _ OBJECT _ ARRAY ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNull ; <nl> + import static org . mockito . Matchers . anyInt ; <nl> + import static org . mockito . Matchers . anyObject ; <nl> + import static org . mockito . Mockito . times ; <nl> + import static org . mockito . Mockito . verify ; <nl> import static org . powermock . api . mockito . PowerMockito . mock ; <nl> import static org . powermock . api . mockito . PowerMockito . when ; <nl> <nl> import java . io . ByteArrayInputStream ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . net . URL ; <nl> import java . net . URLConnection ; <nl> import java . net . URLStreamHandler ; <nl> import java . util . Locale ; <nl> + import java . util . Map ; <nl> + import java . util . ResourceBundle ; <nl> <nl> import org . junit . After ; <nl> import org . junit . Test ; <nl> import org . mockito . Mockito ; <nl> + import org . powermock . reflect . Whitebox ; <nl> <nl> import nl . jqno . equalsverifier . EqualsVerifier ; <nl> <nl> @ @ - 72 , 21 + 81 , 29 @ @ public class LocalizedMessageTest { <nl> <nl> @ Test <nl> public void testBundleReloadUrlNotNull ( ) throws IOException { <nl> - <nl> final ClassLoader classloader = mock ( ClassLoader . class ) ; <nl> - final URLConnection mockConnection = Mockito . mock ( URLConnection . class ) ; <nl> - when ( mockConnection . getInputStream ( ) ) . thenReturn ( <nl> - new ByteArrayInputStream ( EMPTY _ BYTE _ ARRAY ) ) ; <nl> - <nl> - final URL url = getMockUrl ( mockConnection ) ; <nl> final String resource = <nl> - " com / puppycrawl / tools / checkstyle / checks / coding / messages _ en . properties " ; <nl> + " com / puppycrawl / tools / checkstyle / checks / coding / messages _ en . properties " ; <nl> + final URLConnection mockUrlCon = mock ( URLConnection . class ) ; <nl> + final URLStreamHandler stubUrlHandler = new URLStreamHandler ( ) { <nl> + @ Override <nl> + protected URLConnection openConnection ( URL u ) { <nl> + return mockUrlCon ; <nl> + } <nl> + } ; <nl> + final URL url = new URL ( " foo " , " bar " , 99 , " / foobar " , stubUrlHandler ) ; <nl> + final InputStream inputStreamMock = mock ( InputStream . class ) ; <nl> when ( classloader . getResource ( resource ) ) . thenReturn ( url ) ; <nl> + when ( mockUrlCon . getInputStream ( ) ) . thenReturn ( inputStreamMock ) ; <nl> + when ( inputStreamMock . read ( anyObject ( ) , anyInt ( ) , anyInt ( ) ) ) . thenReturn ( - 1 ) ; <nl> <nl> final LocalizedMessage . Utf8Control control = new LocalizedMessage . Utf8Control ( ) ; <nl> control . newBundle ( " com . puppycrawl . tools . checkstyle . checks . coding . messages " , <nl> Locale . ENGLISH , " java . class " , <nl> classloader , true ) ; <nl> + <nl> + verify ( mockUrlCon , times ( 1 ) ) . setUseCaches ( false ) ; <nl> + verify ( inputStreamMock , times ( 1 ) ) . close ( ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 141 , 6 + 158 , 53 @ @ public class LocalizedMessageTest { <nl> assertEquals ( " Empty statement . " , localizedMessage . getMessage ( ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testBundleWithoutReload ( ) throws IOException { <nl> + final ClassLoader classloader = mock ( ClassLoader . class ) ; <nl> + final URLConnection mockConnection = Mockito . mock ( URLConnection . class ) ; <nl> + when ( mockConnection . getInputStream ( ) ) . thenReturn ( <nl> + new ByteArrayInputStream ( EMPTY _ BYTE _ ARRAY ) ) ; <nl> + <nl> + final URL url = getMockUrl ( mockConnection ) ; <nl> + final String resource = <nl> + " com / puppycrawl / tools / checkstyle / checks / coding / messages _ en . properties " ; <nl> + when ( classloader . getResource ( resource ) ) . thenReturn ( url ) ; <nl> + <nl> + final LocalizedMessage . Utf8Control control = new LocalizedMessage . Utf8Control ( ) ; <nl> + final ResourceBundle resourceBundle = control . newBundle ( <nl> + " com . puppycrawl . tools . checkstyle . checks . coding . messages " , <nl> + Locale . ENGLISH , " java . class " , classloader , false ) ; <nl> + <nl> + assertNull ( resourceBundle ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetKey ( ) { <nl> + Locale . setDefault ( Locale . FRENCH ) ; <nl> + LocalizedMessage . setLocale ( Locale . US ) ; <nl> + final LocalizedMessage localizedMessage = createSampleLocalizedMessage ( ) ; <nl> + <nl> + assertEquals ( " empty . statement " , localizedMessage . getKey ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCleatBundleCache ( ) { <nl> + Locale . setDefault ( Locale . FRENCH ) ; <nl> + LocalizedMessage . setLocale ( Locale . ROOT ) ; <nl> + final LocalizedMessage localizedMessage = createSampleLocalizedMessage ( ) ; <nl> + <nl> + assertEquals ( " Empty statement . " , localizedMessage . getMessage ( ) ) ; <nl> + <nl> + final Map < String , ResourceBundle > bundleCache = <nl> + Whitebox . getInternalState ( LocalizedMessage . class , " BUNDLE _ CACHE " ) ; <nl> + <nl> + assertEquals ( 1 , bundleCache . size ( ) ) ; <nl> + <nl> + LocalizedMessage . setLocale ( Locale . CHINA ) ; <nl> + <nl> + assertEquals ( 0 , bundleCache . size ( ) ) ; <nl> + } <nl> + <nl> private static LocalizedMessage createSampleLocalizedMessage ( ) { <nl> return new LocalizedMessage ( 0 , " com . puppycrawl . tools . checkstyle . checks . coding . messages " , <nl> " empty . statement " , EMPTY _ OBJECT _ ARRAY , " module " , LocalizedMessage . class , null ) ;
NEAREST DIFF (one line): diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm <nl> index 32f8a18 . . 398806c 100644 <nl> - - - a / src / xdocs / index . xml . vm <nl> + + + b / src / xdocs / index . xml . vm <nl> @ @ - 245 , 7 + 245 , 7 @ @ <nl> < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > <nl> < td / > <nl> < td > <nl> - < a href = " https : / / java . net / projects / sqe / " > Software Quality Environment ( SQE ) < / a > <nl> + < a href = " http : / / sqe - team . github . io " > Software Quality Environment ( SQE ) < / a > <nl> < / td > <nl> < td / > <nl> < / tr >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 293a401 . . 6b35402 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2206 , 7 + 2206 , 7 @ @ 
 < ! - - cause of https : / / github . com / checkstyle / checkstyle / issues / 3605 - - > 
 < avoidCallsTo > com . puppycrawl . tools . checkstyle . api . AbstractLoader $ FeaturesForVerySecureJavaInstallations < / avoidCallsTo > 
 < / avoidCallsTo > 
 - < mutationThreshold > 96 < / mutationThreshold > 
 + < mutationThreshold > 100 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 index d276c67 . . 09b78f8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 @ @ - 19 , 13 + 19 , 22 @ @ 
 
 package com . puppycrawl . tools . checkstyle . api ; 
 
 + import static org . junit . Assert . assertArrayEquals ; 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertTrue ; 
 
 import java . io . File ; 
 + import java . util . Arrays ; 
 import java . util . Collections ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 
 import org . junit . Test ; 
 + import org . powermock . reflect . Whitebox ; 
 + 
 + import com . google . common . collect . ImmutableMap ; 
 
 public class FileContentsTest { 
 
 @ @ - 56 , 6 + 65 , 91 @ @ public class FileContentsTest { 
 new FileText ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; 
 fileContents . reportSingleLineComment ( 1 , 2 ) ; 
 assertTrue ( fileContents . hasIntersectionWithComment ( 1 , 5 , 1 , 6 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testReportCppComment ( ) { 
 + final FileContents fileContents = new FileContents ( 
 + new FileText ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; 
 + fileContents . reportCppComment ( 1 , 2 ) ; 
 + final Map < Integer , TextBlock > cppComments = fileContents . getCppComments ( ) ; 
 + 
 + assertEquals ( new Comment ( new String [ ] { " / / " } , 2 , 1 , 6 ) . toString ( ) , 
 + cppComments . get ( 1 ) . toString ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testHasIntersectionWithSingleLineComment ( ) { 
 + final FileContents fileContents = new FileContents ( 
 + new FileText ( new File ( " filename " ) , Arrays . asList ( " " , " / / test " , 
 + " / / test " , " / / test " ) ) ) ; 
 + fileContents . reportCppComment ( 4 , 4 ) ; 
 + 
 + assertTrue ( fileContents . hasIntersectionWithComment ( 1 , 3 , 4 , 6 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testReportComment ( ) { 
 + final FileContents fileContents = new FileContents ( 
 + new FileText ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; 
 + fileContents . reportCComment ( 1 , 2 , 1 , 2 ) ; 
 + final ImmutableMap < Integer , List < TextBlock > > comments = fileContents . getCComments ( ) ; 
 + 
 + assertEquals ( new Comment ( new String [ ] { " / / " } , 2 , 1 , 2 ) . toString ( ) , 
 + comments . get ( 1 ) . get ( 0 ) . toString ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testHasIntersectionWithBlockComment ( ) { 
 + final FileContents fileContents = new FileContents ( new FileText ( new File ( " filename " ) , 
 + Arrays . asList ( " / * * / " , " " , " / * test " , " * / " , " " ) ) ) ; 
 + fileContents . reportCComment ( 1 , 2 , 1 , 5 ) ; 
 + fileContents . reportCComment ( 3 , 2 , 4 , 2 ) ; 
 + 
 + assertTrue ( fileContents . hasIntersectionWithComment ( 2 , 2 , 3 , 6 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testHasIntersectionWithBlockComment2 ( ) { 
 + final FileContents fileContents = new FileContents ( 
 + new FileText ( new File ( " filename " ) , Arrays . asList ( " / * * / " , " " , " " ) ) ) ; 
 + fileContents . reportCComment ( 1 , 2 , 1 , 5 ) ; 
 + 
 + assertFalse ( fileContents . hasIntersectionWithComment ( 2 , 2 , 3 , 6 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testInPackageInfo ( ) { 
 + final FileContents fileContents = new FileContents ( new FileText ( 
 + new File ( " filename . package - info . java " ) , 
 + Collections . singletonList ( " / / " ) ) ) ; 
 + 
 + assertTrue ( fileContents . inPackageInfo ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetJavadocBefore ( ) { 
 + final FileContents fileContents = new FileContents ( 
 + new FileText ( new File ( " filename " ) , Collections . singletonList ( " " ) ) ) ; 
 + final Map < Integer , TextBlock > javadoc = new HashMap < > ( ) ; 
 + javadoc . put ( 0 , new Comment ( new String [ ] { " / / " } , 2 , 1 , 2 ) ) ; 
 + Whitebox . setInternalState ( fileContents , " javadocComments " , javadoc ) ; 
 + final TextBlock javadocBefore = fileContents . getJavadocBefore ( 2 ) ; 
 + 
 + assertEquals ( new Comment ( new String [ ] { " / / " } , 2 , 1 , 2 ) . toString ( ) , 
 + javadocBefore . toString ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testExtractBlockComment ( ) { 
 + final FileContents fileContents = new FileContents ( 
 + new FileText ( new File ( " filename " ) , Arrays . asList ( " " , " " , " / * test " , 
 + " * / " , " " ) ) ) ; 
 + fileContents . reportCComment ( 3 , 2 , 4 , 2 ) ; 
 + final ImmutableMap < Integer , List < TextBlock > > blockComments = 
 + fileContents . getBlockComments ( ) ; 
 + final String [ ] text = blockComments . get ( 3 ) . get ( 0 ) . getText ( ) ; 
 
 + assertArrayEquals ( new String [ ] { " / * test " , " * " } , text ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java 
 index 939b055 . . 379087f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java 
 @ @ - 22 , 19 + 22 , 28 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 import static com . puppycrawl . tools . checkstyle . utils . CommonUtils . EMPTY _ BYTE _ ARRAY ; 
 import static com . puppycrawl . tools . checkstyle . utils . CommonUtils . EMPTY _ OBJECT _ ARRAY ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNull ; 
 + import static org . mockito . Matchers . anyInt ; 
 + import static org . mockito . Matchers . anyObject ; 
 + import static org . mockito . Mockito . times ; 
 + import static org . mockito . Mockito . verify ; 
 import static org . powermock . api . mockito . PowerMockito . mock ; 
 import static org . powermock . api . mockito . PowerMockito . when ; 
 
 import java . io . ByteArrayInputStream ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . net . URL ; 
 import java . net . URLConnection ; 
 import java . net . URLStreamHandler ; 
 import java . util . Locale ; 
 + import java . util . Map ; 
 + import java . util . ResourceBundle ; 
 
 import org . junit . After ; 
 import org . junit . Test ; 
 import org . mockito . Mockito ; 
 + import org . powermock . reflect . Whitebox ; 
 
 import nl . jqno . equalsverifier . EqualsVerifier ; 
 
 @ @ - 72 , 21 + 81 , 29 @ @ public class LocalizedMessageTest { 
 
 @ Test 
 public void testBundleReloadUrlNotNull ( ) throws IOException { 
 - 
 final ClassLoader classloader = mock ( ClassLoader . class ) ; 
 - final URLConnection mockConnection = Mockito . mock ( URLConnection . class ) ; 
 - when ( mockConnection . getInputStream ( ) ) . thenReturn ( 
 - new ByteArrayInputStream ( EMPTY _ BYTE _ ARRAY ) ) ; 
 - 
 - final URL url = getMockUrl ( mockConnection ) ; 
 final String resource = 
 - " com / puppycrawl / tools / checkstyle / checks / coding / messages _ en . properties " ; 
 + " com / puppycrawl / tools / checkstyle / checks / coding / messages _ en . properties " ; 
 + final URLConnection mockUrlCon = mock ( URLConnection . class ) ; 
 + final URLStreamHandler stubUrlHandler = new URLStreamHandler ( ) { 
 + @ Override 
 + protected URLConnection openConnection ( URL u ) { 
 + return mockUrlCon ; 
 + } 
 + } ; 
 + final URL url = new URL ( " foo " , " bar " , 99 , " / foobar " , stubUrlHandler ) ; 
 + final InputStream inputStreamMock = mock ( InputStream . class ) ; 
 when ( classloader . getResource ( resource ) ) . thenReturn ( url ) ; 
 + when ( mockUrlCon . getInputStream ( ) ) . thenReturn ( inputStreamMock ) ; 
 + when ( inputStreamMock . read ( anyObject ( ) , anyInt ( ) , anyInt ( ) ) ) . thenReturn ( - 1 ) ; 
 
 final LocalizedMessage . Utf8Control control = new LocalizedMessage . Utf8Control ( ) ; 
 control . newBundle ( " com . puppycrawl . tools . checkstyle . checks . coding . messages " , 
 Locale . ENGLISH , " java . class " , 
 classloader , true ) ; 
 + 
 + verify ( mockUrlCon , times ( 1 ) ) . setUseCaches ( false ) ; 
 + verify ( inputStreamMock , times ( 1 ) ) . close ( ) ; 
 } 
 
 @ Test 
 @ @ - 141 , 6 + 158 , 53 @ @ public class LocalizedMessageTest { 
 assertEquals ( " Empty statement . " , localizedMessage . getMessage ( ) ) ; 
 } 
 
 + @ Test 
 + public void testBundleWithoutReload ( ) throws IOException { 
 + final ClassLoader classloader = mock ( ClassLoader . class ) ; 
 + final URLConnection mockConnection = Mockito . mock ( URLConnection . class ) ; 
 + when ( mockConnection . getInputStream ( ) ) . thenReturn ( 
 + new ByteArrayInputStream ( EMPTY _ BYTE _ ARRAY ) ) ; 
 + 
 + final URL url = getMockUrl ( mockConnection ) ; 
 + final String resource = 
 + " com / puppycrawl / tools / checkstyle / checks / coding / messages _ en . properties " ; 
 + when ( classloader . getResource ( resource ) ) . thenReturn ( url ) ; 
 + 
 + final LocalizedMessage . Utf8Control control = new LocalizedMessage . Utf8Control ( ) ; 
 + final ResourceBundle resourceBundle = control . newBundle ( 
 + " com . puppycrawl . tools . checkstyle . checks . coding . messages " , 
 + Locale . ENGLISH , " java . class " , classloader , false ) ; 
 + 
 + assertNull ( resourceBundle ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetKey ( ) { 
 + Locale . setDefault ( Locale . FRENCH ) ; 
 + LocalizedMessage . setLocale ( Locale . US ) ; 
 + final LocalizedMessage localizedMessage = createSampleLocalizedMessage ( ) ; 
 + 
 + assertEquals ( " empty . statement " , localizedMessage . getKey ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testCleatBundleCache ( ) { 
 + Locale . setDefault ( Locale . FRENCH ) ; 
 + LocalizedMessage . setLocale ( Locale . ROOT ) ; 
 + final LocalizedMessage localizedMessage = createSampleLocalizedMessage ( ) ; 
 + 
 + assertEquals ( " Empty statement . " , localizedMessage . getMessage ( ) ) ; 
 + 
 + final Map < String , ResourceBundle > bundleCache = 
 + Whitebox . getInternalState ( LocalizedMessage . class , " BUNDLE _ CACHE " ) ; 
 + 
 + assertEquals ( 1 , bundleCache . size ( ) ) ; 
 + 
 + LocalizedMessage . setLocale ( Locale . CHINA ) ; 
 + 
 + assertEquals ( 0 , bundleCache . size ( ) ) ; 
 + } 
 + 
 private static LocalizedMessage createSampleLocalizedMessage ( ) { 
 return new LocalizedMessage ( 0 , " com . puppycrawl . tools . checkstyle . checks . coding . messages " , 
 " empty . statement " , EMPTY _ OBJECT _ ARRAY , " module " , LocalizedMessage . class , null ) ;

NEAREST DIFF:
diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm 
 index 32f8a18 . . 398806c 100644 
 - - - a / src / xdocs / index . xml . vm 
 + + + b / src / xdocs / index . xml . vm 
 @ @ - 245 , 7 + 245 , 7 @ @ 
 < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > 
 < td / > 
 < td > 
 - < a href = " https : / / java . net / projects / sqe / " > Software Quality Environment ( SQE ) < / a > 
 + < a href = " http : / / sqe - team . github . io " > Software Quality Environment ( SQE ) < / a > 
 < / td > 
 < td / > 
 < / tr >
