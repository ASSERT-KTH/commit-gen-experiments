BLEU SCORE: 0.8633400213704505

TEST MSG: Issue # 2451 : removed excess hierarchy from MethodTypeParameterNameCheck
GENERATED MSG: Issue # 2451 : removed excess hierarchy from ClassTypeParameterNameCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheck . java <nl> index ae0c6ac . . b41d971 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheck . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> @ @ - 47 , 21 + 48 , 33 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * @ author Travis Schneeberger <nl> * / <nl> public class MethodTypeParameterNameCheck <nl> - extends AbstractTypeParameterNameCheck { <nl> + extends AbstractNameCheck { <nl> / * * Creates a new { @ code MethodTypeParameterNameCheck } instance . * / <nl> public MethodTypeParameterNameCheck ( ) { <nl> super ( " ^ [ A - Z ] $ " ) ; <nl> } <nl> <nl> @ Override <nl> - public int [ ] getRequiredTokens ( ) { <nl> + public int [ ] getDefaultTokens ( ) { <nl> + return getAcceptableTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> return new int [ ] { <nl> TokenTypes . TYPE _ PARAMETER , <nl> } ; <nl> } <nl> <nl> @ Override <nl> - protected final int getLocation ( ) { <nl> - return TokenTypes . METHOD _ DEF ; <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getAcceptableTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected final boolean mustCheckName ( DetailAST ast ) { <nl> + final DetailAST location = <nl> + ast . getParent ( ) . getParent ( ) ; <nl> + return location . getType ( ) = = TokenTypes . METHOD _ DEF ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index 05979ad . . 49f5d6e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 170 , 6 + 170 , 15 @ @ public final class Main { <nl> final List < String > result = new ArrayList < > ( ) ; <nl> / / ensure a configuration file is specified <nl> if ( cmdLine . hasOption ( OPTION _ C _ NAME ) ) { <nl> + final String configLocation = cmdLine . getOptionValue ( OPTION _ C _ NAME ) ; <nl> + try { <nl> + / / test location only <nl> + CommonUtils . getUriByFilename ( configLocation ) ; <nl> + } <nl> + catch ( CheckstyleException ignored ) { <nl> + result . add ( String . format ( " Could not find config XML file ' % s ' . " , configLocation ) ) ; <nl> + } <nl> + <nl> / / validate optional parameters <nl> if ( cmdLine . hasOption ( OPTION _ F _ NAME ) ) { <nl> final String format = cmdLine . getOptionValue ( OPTION _ F _ NAME ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 34a1df8 . . 442cab9 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 143 , 15 + 143 , 15 @ @ public class MainTest { <nl> @ Test <nl> public void testNonExistingConfigFile ( ) <nl> throws Exception { <nl> - exit . expectSystemExitWithStatus ( - 2 ) ; <nl> + exit . expectSystemExitWithStatus ( - 1 ) ; <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) { <nl> - assertEquals ( String . format ( Locale . ROOT , " Checkstyle ends with 1 errors . % n " ) , <nl> + assertEquals ( String . format ( Locale . ROOT , <nl> + " Could not find config XML file " <nl> + + " ' src / main / resources / non _ existing _ config . xml ' . % n " ) , <nl> systemOut . getLog ( ) ) ; <nl> - final String cause = " com . puppycrawl . tools . checkstyle . api . CheckstyleException : " <nl> - + " Unable to find : src / main / resources / non _ existing _ config . xml " ; <nl> - assertTrue ( systemErr . getLog ( ) . startsWith ( cause ) ) ; <nl> + assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " ,

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheck . java 
 index ae0c6ac . . b41d971 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheck . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . naming ; 
 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 @ @ - 47 , 21 + 48 , 33 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * @ author Travis Schneeberger 
 * / 
 public class MethodTypeParameterNameCheck 
 - extends AbstractTypeParameterNameCheck { 
 + extends AbstractNameCheck { 
 / * * Creates a new { @ code MethodTypeParameterNameCheck } instance . * / 
 public MethodTypeParameterNameCheck ( ) { 
 super ( " ^ [ A - Z ] $ " ) ; 
 } 
 
 @ Override 
 - public int [ ] getRequiredTokens ( ) { 
 + public int [ ] getDefaultTokens ( ) { 
 + return getAcceptableTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 return new int [ ] { 
 TokenTypes . TYPE _ PARAMETER , 
 } ; 
 } 
 
 @ Override 
 - protected final int getLocation ( ) { 
 - return TokenTypes . METHOD _ DEF ; 
 + public int [ ] getRequiredTokens ( ) { 
 + return getAcceptableTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + protected final boolean mustCheckName ( DetailAST ast ) { 
 + final DetailAST location = 
 + ast . getParent ( ) . getParent ( ) ; 
 + return location . getType ( ) = = TokenTypes . METHOD _ DEF ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index 05979ad . . 49f5d6e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 170 , 6 + 170 , 15 @ @ public final class Main { 
 final List < String > result = new ArrayList < > ( ) ; 
 / / ensure a configuration file is specified 
 if ( cmdLine . hasOption ( OPTION _ C _ NAME ) ) { 
 + final String configLocation = cmdLine . getOptionValue ( OPTION _ C _ NAME ) ; 
 + try { 
 + / / test location only 
 + CommonUtils . getUriByFilename ( configLocation ) ; 
 + } 
 + catch ( CheckstyleException ignored ) { 
 + result . add ( String . format ( " Could not find config XML file ' % s ' . " , configLocation ) ) ; 
 + } 
 + 
 / / validate optional parameters 
 if ( cmdLine . hasOption ( OPTION _ F _ NAME ) ) { 
 final String format = cmdLine . getOptionValue ( OPTION _ F _ NAME ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 34a1df8 . . 442cab9 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 143 , 15 + 143 , 15 @ @ public class MainTest { 
 @ Test 
 public void testNonExistingConfigFile ( ) 
 throws Exception { 
 - exit . expectSystemExitWithStatus ( - 2 ) ; 
 + exit . expectSystemExitWithStatus ( - 1 ) ; 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) { 
 - assertEquals ( String . format ( Locale . ROOT , " Checkstyle ends with 1 errors . % n " ) , 
 + assertEquals ( String . format ( Locale . ROOT , 
 + " Could not find config XML file " 
 + + " ' src / main / resources / non _ existing _ config . xml ' . % n " ) , 
 systemOut . getLog ( ) ) ; 
 - final String cause = " com . puppycrawl . tools . checkstyle . api . CheckstyleException : " 
 - + " Unable to find : src / main / resources / non _ existing _ config . xml " ; 
 - assertTrue ( systemErr . getLog ( ) . startsWith ( cause ) ) ; 
 + assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " ,
