BLEU SCORE: 0.030569602392969023

TEST MSG: Issue # 569 : Move TreeWalker cache to Checker
GENERATED MSG: 100 % UTs coverage for PropertyCacheFile . Refactoring of PropertyCacheFile . # 1294

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index a450bf9 . . acbbda1 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 12 , 7 + 12 , 7 @ @ <nl> < ! - - There is no other way to deliver filename that was under processing - - > <nl> < suppress checks = " IllegalCatch " <nl> files = " Checker . java " <nl> - lines = " 279 " / > <nl> + lines = " 327 " / > <nl> <nl> < ! - - we can not change it as , Check name is part of API ( used in configurations ) - - > <nl> < suppress checks = " AbbreviationAsWordInName " <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> index 7969c3c . . dc2b3dd 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 112 , 6 + 112 , 9 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> / * * Name of a charset . * / <nl> private String charset = System . getProperty ( " file . encoding " , " UTF - 8 " ) ; <nl> <nl> + / * * Cache file . * * / <nl> + private PropertyCacheFile cache ; <nl> + <nl> / * * <nl> * Creates a new { @ code Checker } instance . <nl> * The instance needs to be contextualized and configured . <nl> @ @ - 120 , 6 + 123 , 17 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> addListener ( counter ) ; <nl> } <nl> <nl> + / * * <nl> + * Sets cache file . <nl> + * @ param fileName the cache file . <nl> + * @ throws IOException if there are some problems with file loading . <nl> + * / <nl> + public void setCacheFile ( String fileName ) throws IOException { <nl> + final Configuration configuration = getConfiguration ( ) ; <nl> + cache = new PropertyCacheFile ( configuration , fileName ) ; <nl> + cache . load ( ) ; <nl> + } <nl> + <nl> @ Override <nl> public void finishLocalSetup ( ) throws CheckstyleException { <nl> final Locale locale = new Locale ( localeLanguage , localeCountry ) ; <nl> @ @ - 216 , 6 + 230 , 14 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> public void destroy ( ) { <nl> listeners . clear ( ) ; <nl> filters . clear ( ) ; <nl> + if ( cache ! = null ) { <nl> + try { <nl> + cache . persist ( ) ; <nl> + } <nl> + catch ( IOException ex ) { <nl> + throw new IllegalStateException ( " Unable to persist cache file . " , ex ) ; <nl> + } <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 250 , 18 + 272 , 42 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> fsc . beginProcessing ( charset ) ; <nl> } <nl> <nl> - / / Process each file <nl> + processFiles ( files ) ; <nl> + <nl> + / / Finish up <nl> + for ( final FileSetCheck fsc : fileSetChecks ) { <nl> + / / It may also log ! ! ! <nl> + fsc . finishProcessing ( ) ; <nl> + } <nl> + <nl> + for ( final FileSetCheck fsc : fileSetChecks ) { <nl> + / / It may also log ! ! ! <nl> + fsc . destroy ( ) ; <nl> + } <nl> + <nl> + final int errorCount = counter . getCount ( ) ; <nl> + fireAuditFinished ( ) ; <nl> + return errorCount ; <nl> + } <nl> + <nl> + / * * <nl> + * Processes a list of files with all FileSetChecks . <nl> + * @ param files a list of files to process . <nl> + * @ throws CheckstyleException if error condition within Checkstyle occurs . <nl> + * / <nl> + private void processFiles ( List < File > files ) throws CheckstyleException { <nl> for ( final File file : files ) { <nl> try { <nl> - if ( ! CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { <nl> - continue ; <nl> - } <nl> final String fileName = file . getAbsolutePath ( ) ; <nl> fireFileStarted ( fileName ) ; <nl> + final long timestamp = file . lastModified ( ) ; <nl> + if ( cache ! = null & & cache . isInCache ( fileName , timestamp ) <nl> + | | ! CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { <nl> + continue ; <nl> + } <nl> final SortedSet < LocalizedMessage > fileMessages = Sets . newTreeSet ( ) ; <nl> try { <nl> - final FileText theText = new FileText ( file . getAbsoluteFile ( ) , <nl> - charset ) ; <nl> + final FileText theText = new FileText ( file . getAbsoluteFile ( ) , charset ) ; <nl> for ( final FileSetCheck fsc : fileSetChecks ) { <nl> fileMessages . addAll ( fsc . process ( file , theText ) ) ; <nl> } <nl> @ @ - 269 , 34 + 315 , 21 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> catch ( final IOException ioe ) { <nl> LOG . debug ( " IOException occurred . " , ioe ) ; <nl> fileMessages . add ( new LocalizedMessage ( 0 , <nl> - Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , <nl> - new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , <nl> - null ) ) ; <nl> + Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , <nl> + new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , null ) ) ; <nl> } <nl> fireErrors ( fileName , fileMessages ) ; <nl> fireFileFinished ( fileName ) ; <nl> + if ( cache ! = null & & fileMessages . isEmpty ( ) ) { <nl> + cache . put ( fileName , timestamp ) ; <nl> + } <nl> } <nl> catch ( Exception ex ) { <nl> / / We need to catch all exception to put a reason failure ( file name ) in exception <nl> throw new CheckstyleException ( " Exception was thrown while processing " <nl> - + file . getPath ( ) , ex ) ; <nl> + + file . getPath ( ) , ex ) ; <nl> } <nl> } <nl> - <nl> - / / Finish up <nl> - for ( final FileSetCheck fsc : fileSetChecks ) { <nl> - / / It may also log ! ! ! <nl> - fsc . finishProcessing ( ) ; <nl> - } <nl> - <nl> - for ( final FileSetCheck fsc : fileSetChecks ) { <nl> - / / It may also log ! ! ! <nl> - fsc . destroy ( ) ; <nl> - } <nl> - <nl> - final int errorCount = counter . getCount ( ) ; <nl> - fireAuditFinished ( ) ; <nl> - return errorCount ; <nl> } <nl> <nl> / * * <nl> @ @ - 480 , 4 + 513 , 13 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> } <nl> this . charset = charset ; <nl> } <nl> + <nl> + / * * <nl> + * Clears the cache . <nl> + * / <nl> + public void clearCache ( ) { <nl> + if ( cache ! = null ) { <nl> + cache . clear ( ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> index 109e607 . . e9dacb8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> @ @ - 155 , 6 + 155 , 13 @ @ final class PropertyCacheFile { <nl> } <nl> <nl> / * * <nl> + * Clears the cache . <nl> + * / <nl> + void clear ( ) { <nl> + details . clear ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Flushes and closes output stream . <nl> * @ param stream the output stream <nl> * @ throws IOException when there is a problems with file flush and close <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index 1de2933 . . 958aeb6 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 20 , 7 + 20 , 6 @ @ <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> import java . io . File ; <nl> - import java . io . IOException ; <nl> import java . io . Reader ; <nl> import java . io . StringReader ; <nl> import java . util . AbstractMap . SimpleEntry ; <nl> @ @ - 37 , 7 + 36 , 6 @ @ import antlr . Token ; <nl> import antlr . TokenStreamException ; <nl> import antlr . TokenStreamHiddenTokenFilter ; <nl> import antlr . TokenStreamRecognitionException ; <nl> - <nl> import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . Multimap ; <nl> import com . google . common . collect . Sets ; <nl> @ @ - 84 , 9 + 82 , 6 @ @ public final class TreeWalker <nl> / * * The distance between tab stops . * / <nl> private int tabWidth = DEFAULT _ TAB _ WIDTH ; <nl> <nl> - / * * Cache file . * * / <nl> - private PropertyCacheFile cache ; <nl> - <nl> / * * Class loader to resolve classes with . * * / <nl> private ClassLoader classLoader ; <nl> <nl> @ @ - 113 , 14 + 108 , 15 @ @ public final class TreeWalker <nl> <nl> / * * <nl> * Sets cache file . <nl> + * @ deprecated Use { @ link Checker # setCacheFile } instead . It does not do anything now . We just <nl> + * keep the setter for transition period to the same option in Checker . The <nl> + * method will be completely removed in Checkstyle 8 . 0 . See <nl> + * < a href = " https : / / github . com / checkstyle / checkstyle / issues / 2883 " > issue # 2883 < / a > <nl> * @ param fileName the cache file <nl> - * @ throws IOException if there are some problems with file loading <nl> * / <nl> - public void setCacheFile ( String fileName ) throws IOException { <nl> - final Configuration configuration = getConfiguration ( ) ; <nl> - cache = new PropertyCacheFile ( configuration , fileName ) ; <nl> - <nl> - cache . load ( ) ; <nl> + @ Deprecated <nl> + public void setCacheFile ( String fileName ) { <nl> + / / Deprecated <nl> } <nl> <nl> / * * <nl> @ @ - 169 , 16 + 165 , 12 @ @ public final class TreeWalker <nl> @ Override <nl> protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { <nl> / / check if already checked and passed the file <nl> - final String fileName = file . getPath ( ) ; <nl> - final long timestamp = file . lastModified ( ) ; <nl> - if ( cache ! = null <nl> - & & ( cache . isInCache ( fileName , timestamp ) <nl> - | | ! CommonUtils . matchesFileExtension ( file , getFileExtensions ( ) ) ) ) { <nl> + if ( ! CommonUtils . matchesFileExtension ( file , getFileExtensions ( ) ) ) { <nl> return ; <nl> } <nl> <nl> final String msg = " % s occurred during the analysis of file % s . " ; <nl> - <nl> + final String fileName = file . getPath ( ) ; <nl> try { <nl> final FileText text = FileText . fromLines ( file , lines ) ; <nl> final FileContents contents = new FileContents ( text ) ; <nl> @ @ - 202 , 10 + 194 , 6 @ @ public final class TreeWalker <nl> ex . getClass ( ) . getSimpleName ( ) , fileName ) ; <nl> throw new CheckstyleException ( exceptionMsg , ex ) ; <nl> } <nl> - <nl> - if ( cache ! = null & & getMessageCollector ( ) . size ( ) = = 0 ) { <nl> - cache . put ( fileName , timestamp ) ; <nl> - } <nl> } <nl> <nl> / * * <nl> @ @ - 463 , 14 + 451 , 6 @ @ public final class TreeWalker <nl> for ( AbstractCheck check : commentChecks ) { <nl> check . destroy ( ) ; <nl> } <nl> - if ( cache ! = null ) { <nl> - try { <nl> - cache . persist ( ) ; <nl> - } <nl> - catch ( IOException ex ) { <nl> - throw new IllegalStateException ( " Unable to persist cache file " , ex ) ; <nl> - } <nl> - } <nl> super . destroy ( ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index d775484 . . d565abc 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 19 , 26 + 19 , 42 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> + import static org . hamcrest . CoreMatchers . anyOf ; <nl> + import static org . hamcrest . CoreMatchers . instanceOf ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> import java . io . UnsupportedEncodingException ; <nl> + import java . nio . file . InvalidPathException ; <nl> import java . util . ArrayList ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> import java . util . SortedSet ; <nl> <nl> + import org . apache . commons . lang3 . ArrayUtils ; <nl> + import org . junit . Assume ; <nl> + import org . junit . Rule ; <nl> import org . junit . Test ; <nl> + import org . junit . rules . TemporaryFolder ; <nl> <nl> import com . google . common . collect . Sets ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> + import com . puppycrawl . tools . checkstyle . checks . TranslationCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; <nl> + <nl> + public class CheckerTest extends BaseCheckTestSupport { <nl> + <nl> + @ Rule <nl> + public final TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ; <nl> <nl> - public class CheckerTest { <nl> @ Test <nl> public void testDestroy ( ) throws Exception { <nl> final DebugChecker checker = new DebugChecker ( ) ; <nl> @ @ - 174 , 7 + 190 , 14 @ @ public class CheckerTest { <nl> <nl> @ Test <nl> public void testFileExtensions ( ) throws Exception { <nl> + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " configuration " ) ; <nl> + checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> + checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + <nl> final Checker checker = new Checker ( ) ; <nl> + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . configure ( checkerConfig ) ; <nl> + <nl> final List < File > files = new ArrayList < > ( ) ; <nl> final File file = new File ( " file . pdf " ) ; <nl> files . add ( file ) ; <nl> @ @ - 182 , 6 + 205 , 7 @ @ public class CheckerTest { <nl> files . add ( otherFile ) ; <nl> final String [ ] fileExtensions = { " java " , " xml " , " properties " } ; <nl> checker . setFileExtensions ( fileExtensions ) ; <nl> + checker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> final int counter = checker . process ( files ) ; <nl> <nl> / / comparing to 1 as there is only one legal file in input <nl> @ @ - 275 , 4 + 299 , 197 @ @ public class CheckerTest { <nl> DebugAuditAdapter . class . getCanonicalName ( ) ) ; <nl> checker . setupChild ( config ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testDestroyNonExistingCache ( ) throws Exception { <nl> + / / We use assumption to satisfy coverage rate on OS Windows , since persist ( ) method of <nl> + / / class PropertyCacheFile does not throw IOException on OS Linux when path to a cache <nl> + / / directory is invalid on OS Windows . <nl> + Assume . assumeTrue ( System . getProperty ( " os . name " ) <nl> + . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) ; <nl> + <nl> + final Checker checker = new Checker ( ) ; <nl> + final PackageObjectFactory factory = new PackageObjectFactory ( <nl> + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . setModuleFactory ( factory ) ; <nl> + checker . configure ( new DefaultConfiguration ( " default config " ) ) ; <nl> + final String tempFilePath = temporaryFolder . newFile ( ) . getPath ( ) + " . \ \ \ ' " ; <nl> + checker . setCacheFile ( tempFilePath ) ; <nl> + try { <nl> + checker . destroy ( ) ; <nl> + fail ( " Exception did not happen " ) ; <nl> + } <nl> + catch ( IllegalStateException ex ) { <nl> + assertTrue ( ex . getCause ( ) instanceof IOException ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testDestroyCacheFileWithInvalidPath ( ) throws Exception { <nl> + final Checker checker = new Checker ( ) ; <nl> + final PackageObjectFactory factory = new PackageObjectFactory ( <nl> + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . setModuleFactory ( factory ) ; <nl> + checker . configure ( new DefaultConfiguration ( " default config " ) ) ; <nl> + if ( System . getProperty ( " os . name " ) <nl> + . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { <nl> + / / https : / / support . microsoft . com / en - us / kb / 177506 but this only for NTFS <nl> + / / WindowsServer 2012 use Resilient File System ( ReFS ) , so any name is ok <nl> + final File file = new File ( " C \ \ : invalid " ) ; <nl> + checker . setCacheFile ( file . getAbsolutePath ( ) ) ; <nl> + } <nl> + else { <nl> + checker . setCacheFile ( File . separator + " : invalid " ) ; <nl> + } <nl> + try { <nl> + checker . destroy ( ) ; <nl> + fail ( " Exception did not happen " ) ; <nl> + } <nl> + catch ( IllegalStateException ex ) { <nl> + assertThat ( ex . getCause ( ) , anyOf ( instanceOf ( IOException . class ) , <nl> + instanceOf ( InvalidPathException . class ) ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testCacheFile ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; <nl> + <nl> + final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; <nl> + treeWalkerConfig . addChild ( checkConfig ) ; <nl> + <nl> + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyleConfig " ) ; <nl> + checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> + checkerConfig . addChild ( treeWalkerConfig ) ; <nl> + checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + <nl> + final Checker checker = new Checker ( ) ; <nl> + final Locale locale = Locale . ROOT ; <nl> + checker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> + checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . configure ( checkerConfig ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> + <nl> + final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> + / / one more time to reuse cache <nl> + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCacheFileChangeInConfig ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; <nl> + <nl> + final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; <nl> + treeWalkerConfig . addChild ( checkConfig ) ; <nl> + <nl> + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " configuration " ) ; <nl> + checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> + checkerConfig . addChild ( treeWalkerConfig ) ; <nl> + checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + <nl> + final Checker checker = new Checker ( ) ; <nl> + final Locale locale = Locale . ROOT ; <nl> + checker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> + checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . configure ( checkerConfig ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> + <nl> + final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> + <nl> + / / update Checker config <nl> + checker . destroy ( ) ; <nl> + checker . configure ( checkerConfig ) ; <nl> + <nl> + final Checker otherChecker = new Checker ( ) ; <nl> + otherChecker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> + otherChecker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> + otherChecker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + otherChecker . configure ( checkerConfig ) ; <nl> + otherChecker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> + / / here is diff with previous checker <nl> + checkerConfig . addAttribute ( " fileExtensions " , " java , javax " ) ; <nl> + <nl> + / / one more time on updated config <nl> + verify ( otherChecker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testWithCacheWithNoViolation ( ) throws Exception { <nl> + final Checker checker = new Checker ( ) ; <nl> + final PackageObjectFactory factory = new PackageObjectFactory ( <nl> + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . setModuleFactory ( factory ) ; <nl> + checker . configure ( createCheckConfig ( TranslationCheck . class ) ) ; <nl> + checker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + checker . setupChild ( createCheckConfig ( TranslationCheck . class ) ) ; <nl> + final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> + final List < File > files = new ArrayList < > ( ) ; <nl> + files . add ( file ) ; <nl> + checker . process ( files ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testClearExistingCache ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; <nl> + <nl> + final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; <nl> + treeWalkerConfig . addChild ( checkConfig ) ; <nl> + <nl> + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " myConfig " ) ; <nl> + checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> + checkerConfig . addChild ( treeWalkerConfig ) ; <nl> + checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + <nl> + final Checker checker = new Checker ( ) ; <nl> + final Locale locale = Locale . ROOT ; <nl> + checker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> + checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . configure ( checkerConfig ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> + <nl> + final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> + checker . clearCache ( ) ; <nl> + / / one more time , but file that should be audited is not in cache <nl> + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testClearNonexistentCache ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; <nl> + <nl> + final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; <nl> + treeWalkerConfig . addChild ( checkConfig ) ; <nl> + <nl> + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " simpleConfig " ) ; <nl> + checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> + checkerConfig . addChild ( treeWalkerConfig ) ; <nl> + <nl> + final Checker checker = new Checker ( ) ; <nl> + final Locale locale = Locale . ROOT ; <nl> + checker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> + checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . configure ( checkerConfig ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> + <nl> + final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> + checker . clearCache ( ) ; <nl> + / / one more time , but cache does not exist <nl> + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index 15ef6fe . . 9ab550f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 19 , 27 + 19 , 20 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> - import static org . hamcrest . CoreMatchers . anyOf ; <nl> - import static org . hamcrest . CoreMatchers . instanceOf ; <nl> - import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import java . io . BufferedWriter ; <nl> import java . io . File ; <nl> import java . io . FileOutputStream ; <nl> - import java . io . IOException ; <nl> import java . io . OutputStreamWriter ; <nl> import java . io . Writer ; <nl> import java . nio . charset . StandardCharsets ; <nl> - import java . nio . file . InvalidPathException ; <nl> import java . util . ArrayList ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> - import java . util . Locale ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> - import org . junit . Assume ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . TemporaryFolder ; <nl> @ @ - 139 , 122 + 132 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testDestroyNonExistingCache ( ) throws Exception { <nl> - <nl> - / / We use assumption to satisfy coverage rate on OS Windows , since persist ( ) method of <nl> - / / class PropertyCacheFile does not throw IOException on OS Linux when path to a cache <nl> - / / directory is invalid on OS Windows . <nl> - Assume . assumeTrue ( System . getProperty ( " os . name " ) <nl> - . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) ; <nl> - <nl> - final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> - treeWalker . configure ( new DefaultConfiguration ( " default config " ) ) ; <nl> - final String tempFilePath = temporaryFolder . newFile ( ) . getPath ( ) + " . \ \ \ ' " ; <nl> - treeWalker . setCacheFile ( tempFilePath ) ; <nl> - try { <nl> - treeWalker . destroy ( ) ; <nl> - fail ( " Exception did not happen " ) ; <nl> - } <nl> - catch ( IllegalStateException ex ) { <nl> - assertTrue ( ex . getCause ( ) instanceof IOException ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void testDestroyCacheFileWithInvalidPath ( ) throws Exception { <nl> - final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> - treeWalker . configure ( new DefaultConfiguration ( " default config " ) ) ; <nl> - if ( System . getProperty ( " os . name " ) <nl> - . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { <nl> - / / https : / / support . microsoft . com / en - us / kb / 177506 but this only for NTFS <nl> - / / WindowsServer 2012 use Resilient File System ( ReFS ) , so any name is ok <nl> - final File file = new File ( " C \ \ : invalid " ) ; <nl> - treeWalker . setCacheFile ( file . getAbsolutePath ( ) ) ; <nl> - } <nl> - else { <nl> - treeWalker . setCacheFile ( File . separator + " : invalid " ) ; <nl> - } <nl> - try { <nl> - treeWalker . destroy ( ) ; <nl> - fail ( " Exception did not happen " ) ; <nl> - } <nl> - catch ( IllegalStateException ex ) { <nl> - assertThat ( ex . getCause ( ) , anyOf ( instanceOf ( IOException . class ) , <nl> - instanceOf ( InvalidPathException . class ) ) ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void testCacheFile ( ) throws Exception { <nl> - final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; <nl> - <nl> - final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; <nl> - treeWalkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> - treeWalkerConfig . addChild ( checkConfig ) ; <nl> - <nl> - final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " configuration " ) ; <nl> - checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> - checkerConfig . addChild ( treeWalkerConfig ) ; <nl> - <nl> - final Checker checker = new Checker ( ) ; <nl> - final Locale locale = Locale . ROOT ; <nl> - checker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - checker . configure ( checkerConfig ) ; <nl> - checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> - <nl> - final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> - final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - <nl> - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> - / / one more time to reuse cache <nl> - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testCacheFileChangeInConfig ( ) throws Exception { <nl> - final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; <nl> - <nl> - final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; <nl> - treeWalkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> - treeWalkerConfig . addChild ( checkConfig ) ; <nl> - <nl> - final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " configuration " ) ; <nl> - checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> - checkerConfig . addChild ( treeWalkerConfig ) ; <nl> - <nl> - final Checker checker = new Checker ( ) ; <nl> - final Locale locale = Locale . ROOT ; <nl> - checker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - checker . configure ( checkerConfig ) ; <nl> - checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> - <nl> - final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> - final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - <nl> - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> - <nl> - / / update Checker config <nl> - / / checker . destroy ( ) ; <nl> - / / checker . configure ( checkerConfig ) ; <nl> - <nl> - final Checker otherChecker = new Checker ( ) ; <nl> - otherChecker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> - otherChecker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> - otherChecker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - otherChecker . configure ( checkerConfig ) ; <nl> - otherChecker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> - / / here is diff with previous checker <nl> - checkerConfig . addAttribute ( " fileExtensions " , " java , javax " ) ; <nl> - <nl> - / / one more time on updated config <nl> - verify ( otherChecker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void testForInvalidCheckImplementation ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( BadJavaDocCheck . class ) ; <nl> final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> @ @ - 273 , 7 + 150 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> treeWalker . setTabWidth ( 1 ) ; <nl> treeWalker . configure ( new DefaultConfiguration ( " default config " ) ) ; <nl> - treeWalker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> final File file = new File ( " src / main / resources / checkstyle _ packages . xml " ) ; <nl> treeWalker . processFiltered ( file , new ArrayList < String > ( ) ) ; <nl> } <nl> @ @ - 285 , 7 + 161 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> final PackageObjectFactory factory = new PackageObjectFactory ( <nl> new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> treeWalker . setModuleFactory ( factory ) ; <nl> - treeWalker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> treeWalker . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> @ @ - 300 , 7 + 175 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> final PackageObjectFactory factory = new PackageObjectFactory ( <nl> new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> treeWalker . setModuleFactory ( factory ) ; <nl> - treeWalker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> treeWalker . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> @ @ - 322 , 7 + 196 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> final PackageObjectFactory factory = new PackageObjectFactory ( <nl> new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> treeWalker . setModuleFactory ( factory ) ; <nl> - treeWalker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> treeWalker . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessagesTest . java <nl> new file mode 100644 <nl> index 0000000 . . f8c095b <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessagesTest . java <nl> @ @ - 0 , 0 + 1 , 38 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . api ; <nl> + <nl> + import org . junit . Assert ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . Definitions ; <nl> + <nl> + public class LocalizedMessagesTest { <nl> + @ Test <nl> + public void testSize ( ) { <nl> + / / Just to satisfy code coverage <nl> + final LocalizedMessages messages = new LocalizedMessages ( ) ; <nl> + messages . add ( new LocalizedMessage ( 0 , <nl> + Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , <nl> + new String [ ] { " args " } , null , getClass ( ) , <nl> + null ) ) ; <nl> + Assert . assertEquals ( 1 , messages . size ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml <nl> index 354ad10 . . 9f0dfd4 100644 <nl> - - - a / src / xdocs / config . xml <nl> + + + b / src / xdocs / config . xml <nl> @ @ - 298 , 6 + 298 , 13 @ @ <nl> < td > < code > null < / code > < / td > <nl> < / tr > <nl> < tr > <nl> + < td > cacheFile < / td > <nl> + < td > caches information about files that have checked OK ; used <nl> + to avoid repeated checks of the same files < / td > <nl> + < td > < a href = " property _ types . html # string " > string < / a > < / td > <nl> + < td > < code > null < / code > ( no cache file ) < / td > <nl> + < / tr > <nl> + < tr > <nl> < td > localeCountry < / td > <nl> < td > locale country for messages < / td > <nl> < td > < a href = " property _ types . html # string " > string < / a > : either <nl> @ @ - 327 , 13 + 334 , 14 @ @ <nl> <nl> < p > <nl> For example , the following configuration fragment specifies base <nl> - directory < code > src / checkstyle < / code > and German <nl> + directory < code > src / checkstyle < / code > , cache file < code > target / cachefile < / code > and German <nl> locale for all modules : <nl> < / p > <nl> <nl> < source > <nl> & lt ; module name = & quot ; Checker & quot ; & gt ; <nl> & lt ; property name = & quot ; basedir & quot ; value = & quot ; src / checkstyle & quot ; / & gt ; <nl> + & lt ; property name = & quot ; cacheFile & quot ; value = & quot ; target / cachefile & quot ; / & gt ; <nl> & lt ; property name = & quot ; localeCountry & quot ; value = & quot ; DE & quot ; / & gt ; <nl> & lt ; property name = & quot ; localeLanguage & quot ; value = & quot ; de & quot ; / & gt ; <nl> & lt ; module name = & quot ; JavadocPackage & quot ; / & gt ; <nl> @ @ - 404 , 13 + 412 , 6 @ @ <nl> < th > default value < / th > <nl> < / tr > <nl> < tr > <nl> - < td > cacheFile < / td > <nl> - < td > caches information about files that have checked OK ; used <nl> - to avoid repeated checks of the same files < / td > <nl> - < td > < a href = " property _ types . html # string " > string < / a > < / td > <nl> - < td > < code > null < / code > ( no cache file ) < / td > <nl> - < / tr > <nl> - < tr > <nl> < td > tabWidth < / td > <nl> < td > number of expanded spaces for a tab character ( < code > ' \ t ' < / code > ) ; used in messages and Checks that <nl> require a tab width , such as < a <nl> @ @ - 431 , 13 + 432 , 12 @ @ <nl> <nl> < p > <nl> For example , the following configuration fragment specifies <nl> - < code > TreeWalker < / code > cache file < code > target / cachefile < / code > , and a < code > tabWidth < / code > of < code > 4 < / code > : <nl> + < code > TreeWalker < / code > a < code > tabWidth < / code > of < code > 4 < / code > : <nl> < / p > <nl> <nl> < source > <nl> & lt ; module name = & quot ; Checker & quot ; & gt ; <nl> & lt ; module name = & quot ; TreeWalker & quot ; & gt ; <nl> - & lt ; property name = & quot ; cacheFile & quot ; value = & quot ; target / cachefile & quot ; / & gt ; <nl> & lt ; property name = & quot ; tabWidth & quot ; value = & quot ; 4 & quot ; / & gt ; <nl> . . . <nl> & lt ; / module & gt ;
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 2569688 . . 2dab005 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1085 , 7 + 1085 , 6 @ @ <nl> < regex > < pattern > . * . PropertyCacheFile < / pattern > < branchRate > 22 < / branchRate > < lineRate > 19 < / lineRate > < / regex > <nl> < regex > < pattern > . * . TreeWalker < / pattern > < branchRate > 94 < / branchRate > < lineRate > 92 < / lineRate > < / regex > <nl> <nl> - < regex > < pattern > . * . api . AbstractLoader < / pattern > < branchRate > 75 < / branchRate > < lineRate > 88 < / lineRate > < / regex > <nl> < regex > < pattern > . * . api . AuditEvent < / pattern > < branchRate > 100 < / branchRate > < lineRate > 93 < / lineRate > < / regex > <nl> < regex > < pattern > . * . api . AutomaticBean < / pattern > < branchRate > 90 < / branchRate > < lineRate > 82 < / lineRate > < / regex > <nl> < regex > < pattern > . * . api . AutomaticBean \ $ . * < / pattern > < branchRate > 75 < / branchRate > < lineRate > 90 < / lineRate > < / regex > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java <nl> index fd32e47 . . 2dec7ae 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java <nl> @ @ - 106 , 21 + 106 , 13 @ @ public abstract class AbstractLoader <nl> this . getClass ( ) . getClassLoader ( ) ; <nl> final InputStream dtdIS = <nl> loader . getResourceAsStream ( dtdResourceName ) ; <nl> - if ( dtdIS = = null ) { <nl> - throw new SAXException ( <nl> - " Unable to load internal dtd " + dtdResourceName ) ; <nl> - } <nl> + <nl> return new InputSource ( dtdIS ) ; <nl> } <nl> return super . resolveEntity ( publicId , systemId ) ; <nl> } <nl> <nl> @ Override <nl> - public void warning ( SAXParseException ex ) throws SAXException { <nl> - throw ex ; <nl> - } <nl> - <nl> - @ Override <nl> public void error ( SAXParseException ex ) throws SAXException { <nl> throw ex ; <nl> }

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index a450bf9 . . acbbda1 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 12 , 7 + 12 , 7 @ @ 
 < ! - - There is no other way to deliver filename that was under processing - - > 
 < suppress checks = " IllegalCatch " 
 files = " Checker . java " 
 - lines = " 279 " / > 
 + lines = " 327 " / > 
 
 < ! - - we can not change it as , Check name is part of API ( used in configurations ) - - > 
 < suppress checks = " AbbreviationAsWordInName " 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 index 7969c3c . . dc2b3dd 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 112 , 6 + 112 , 9 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 / * * Name of a charset . * / 
 private String charset = System . getProperty ( " file . encoding " , " UTF - 8 " ) ; 
 
 + / * * Cache file . * * / 
 + private PropertyCacheFile cache ; 
 + 
 / * * 
 * Creates a new { @ code Checker } instance . 
 * The instance needs to be contextualized and configured . 
 @ @ - 120 , 6 + 123 , 17 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 addListener ( counter ) ; 
 } 
 
 + / * * 
 + * Sets cache file . 
 + * @ param fileName the cache file . 
 + * @ throws IOException if there are some problems with file loading . 
 + * / 
 + public void setCacheFile ( String fileName ) throws IOException { 
 + final Configuration configuration = getConfiguration ( ) ; 
 + cache = new PropertyCacheFile ( configuration , fileName ) ; 
 + cache . load ( ) ; 
 + } 
 + 
 @ Override 
 public void finishLocalSetup ( ) throws CheckstyleException { 
 final Locale locale = new Locale ( localeLanguage , localeCountry ) ; 
 @ @ - 216 , 6 + 230 , 14 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 public void destroy ( ) { 
 listeners . clear ( ) ; 
 filters . clear ( ) ; 
 + if ( cache ! = null ) { 
 + try { 
 + cache . persist ( ) ; 
 + } 
 + catch ( IOException ex ) { 
 + throw new IllegalStateException ( " Unable to persist cache file . " , ex ) ; 
 + } 
 + } 
 } 
 
 / * * 
 @ @ - 250 , 18 + 272 , 42 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 fsc . beginProcessing ( charset ) ; 
 } 
 
 - / / Process each file 
 + processFiles ( files ) ; 
 + 
 + / / Finish up 
 + for ( final FileSetCheck fsc : fileSetChecks ) { 
 + / / It may also log ! ! ! 
 + fsc . finishProcessing ( ) ; 
 + } 
 + 
 + for ( final FileSetCheck fsc : fileSetChecks ) { 
 + / / It may also log ! ! ! 
 + fsc . destroy ( ) ; 
 + } 
 + 
 + final int errorCount = counter . getCount ( ) ; 
 + fireAuditFinished ( ) ; 
 + return errorCount ; 
 + } 
 + 
 + / * * 
 + * Processes a list of files with all FileSetChecks . 
 + * @ param files a list of files to process . 
 + * @ throws CheckstyleException if error condition within Checkstyle occurs . 
 + * / 
 + private void processFiles ( List < File > files ) throws CheckstyleException { 
 for ( final File file : files ) { 
 try { 
 - if ( ! CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { 
 - continue ; 
 - } 
 final String fileName = file . getAbsolutePath ( ) ; 
 fireFileStarted ( fileName ) ; 
 + final long timestamp = file . lastModified ( ) ; 
 + if ( cache ! = null & & cache . isInCache ( fileName , timestamp ) 
 + | | ! CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { 
 + continue ; 
 + } 
 final SortedSet < LocalizedMessage > fileMessages = Sets . newTreeSet ( ) ; 
 try { 
 - final FileText theText = new FileText ( file . getAbsoluteFile ( ) , 
 - charset ) ; 
 + final FileText theText = new FileText ( file . getAbsoluteFile ( ) , charset ) ; 
 for ( final FileSetCheck fsc : fileSetChecks ) { 
 fileMessages . addAll ( fsc . process ( file , theText ) ) ; 
 } 
 @ @ - 269 , 34 + 315 , 21 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 catch ( final IOException ioe ) { 
 LOG . debug ( " IOException occurred . " , ioe ) ; 
 fileMessages . add ( new LocalizedMessage ( 0 , 
 - Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , 
 - new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , 
 - null ) ) ; 
 + Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , 
 + new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , null ) ) ; 
 } 
 fireErrors ( fileName , fileMessages ) ; 
 fireFileFinished ( fileName ) ; 
 + if ( cache ! = null & & fileMessages . isEmpty ( ) ) { 
 + cache . put ( fileName , timestamp ) ; 
 + } 
 } 
 catch ( Exception ex ) { 
 / / We need to catch all exception to put a reason failure ( file name ) in exception 
 throw new CheckstyleException ( " Exception was thrown while processing " 
 - + file . getPath ( ) , ex ) ; 
 + + file . getPath ( ) , ex ) ; 
 } 
 } 
 - 
 - / / Finish up 
 - for ( final FileSetCheck fsc : fileSetChecks ) { 
 - / / It may also log ! ! ! 
 - fsc . finishProcessing ( ) ; 
 - } 
 - 
 - for ( final FileSetCheck fsc : fileSetChecks ) { 
 - / / It may also log ! ! ! 
 - fsc . destroy ( ) ; 
 - } 
 - 
 - final int errorCount = counter . getCount ( ) ; 
 - fireAuditFinished ( ) ; 
 - return errorCount ; 
 } 
 
 / * * 
 @ @ - 480 , 4 + 513 , 13 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 } 
 this . charset = charset ; 
 } 
 + 
 + / * * 
 + * Clears the cache . 
 + * / 
 + public void clearCache ( ) { 
 + if ( cache ! = null ) { 
 + cache . clear ( ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 index 109e607 . . e9dacb8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 @ @ - 155 , 6 + 155 , 13 @ @ final class PropertyCacheFile { 
 } 
 
 / * * 
 + * Clears the cache . 
 + * / 
 + void clear ( ) { 
 + details . clear ( ) ; 
 + } 
 + 
 + / * * 
 * Flushes and closes output stream . 
 * @ param stream the output stream 
 * @ throws IOException when there is a problems with file flush and close 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index 1de2933 . . 958aeb6 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 20 , 7 + 20 , 6 @ @ 
 package com . puppycrawl . tools . checkstyle ; 
 
 import java . io . File ; 
 - import java . io . IOException ; 
 import java . io . Reader ; 
 import java . io . StringReader ; 
 import java . util . AbstractMap . SimpleEntry ; 
 @ @ - 37 , 7 + 36 , 6 @ @ import antlr . Token ; 
 import antlr . TokenStreamException ; 
 import antlr . TokenStreamHiddenTokenFilter ; 
 import antlr . TokenStreamRecognitionException ; 
 - 
 import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . Multimap ; 
 import com . google . common . collect . Sets ; 
 @ @ - 84 , 9 + 82 , 6 @ @ public final class TreeWalker 
 / * * The distance between tab stops . * / 
 private int tabWidth = DEFAULT _ TAB _ WIDTH ; 
 
 - / * * Cache file . * * / 
 - private PropertyCacheFile cache ; 
 - 
 / * * Class loader to resolve classes with . * * / 
 private ClassLoader classLoader ; 
 
 @ @ - 113 , 14 + 108 , 15 @ @ public final class TreeWalker 
 
 / * * 
 * Sets cache file . 
 + * @ deprecated Use { @ link Checker # setCacheFile } instead . It does not do anything now . We just 
 + * keep the setter for transition period to the same option in Checker . The 
 + * method will be completely removed in Checkstyle 8 . 0 . See 
 + * < a href = " https : / / github . com / checkstyle / checkstyle / issues / 2883 " > issue # 2883 < / a > 
 * @ param fileName the cache file 
 - * @ throws IOException if there are some problems with file loading 
 * / 
 - public void setCacheFile ( String fileName ) throws IOException { 
 - final Configuration configuration = getConfiguration ( ) ; 
 - cache = new PropertyCacheFile ( configuration , fileName ) ; 
 - 
 - cache . load ( ) ; 
 + @ Deprecated 
 + public void setCacheFile ( String fileName ) { 
 + / / Deprecated 
 } 
 
 / * * 
 @ @ - 169 , 16 + 165 , 12 @ @ public final class TreeWalker 
 @ Override 
 protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { 
 / / check if already checked and passed the file 
 - final String fileName = file . getPath ( ) ; 
 - final long timestamp = file . lastModified ( ) ; 
 - if ( cache ! = null 
 - & & ( cache . isInCache ( fileName , timestamp ) 
 - | | ! CommonUtils . matchesFileExtension ( file , getFileExtensions ( ) ) ) ) { 
 + if ( ! CommonUtils . matchesFileExtension ( file , getFileExtensions ( ) ) ) { 
 return ; 
 } 
 
 final String msg = " % s occurred during the analysis of file % s . " ; 
 - 
 + final String fileName = file . getPath ( ) ; 
 try { 
 final FileText text = FileText . fromLines ( file , lines ) ; 
 final FileContents contents = new FileContents ( text ) ; 
 @ @ - 202 , 10 + 194 , 6 @ @ public final class TreeWalker 
 ex . getClass ( ) . getSimpleName ( ) , fileName ) ; 
 throw new CheckstyleException ( exceptionMsg , ex ) ; 
 } 
 - 
 - if ( cache ! = null & & getMessageCollector ( ) . size ( ) = = 0 ) { 
 - cache . put ( fileName , timestamp ) ; 
 - } 
 } 
 
 / * * 
 @ @ - 463 , 14 + 451 , 6 @ @ public final class TreeWalker 
 for ( AbstractCheck check : commentChecks ) { 
 check . destroy ( ) ; 
 } 
 - if ( cache ! = null ) { 
 - try { 
 - cache . persist ( ) ; 
 - } 
 - catch ( IOException ex ) { 
 - throw new IllegalStateException ( " Unable to persist cache file " , ex ) ; 
 - } 
 - } 
 super . destroy ( ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index d775484 . . d565abc 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 19 , 26 + 19 , 42 @ @ 
 
 package com . puppycrawl . tools . checkstyle ; 
 
 + import static org . hamcrest . CoreMatchers . anyOf ; 
 + import static org . hamcrest . CoreMatchers . instanceOf ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 import java . io . UnsupportedEncodingException ; 
 + import java . nio . file . InvalidPathException ; 
 import java . util . ArrayList ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 + import java . util . Locale ; 
 import java . util . SortedSet ; 
 
 + import org . apache . commons . lang3 . ArrayUtils ; 
 + import org . junit . Assume ; 
 + import org . junit . Rule ; 
 import org . junit . Test ; 
 + import org . junit . rules . TemporaryFolder ; 
 
 import com . google . common . collect . Sets ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 + import com . puppycrawl . tools . checkstyle . checks . TranslationCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; 
 + 
 + public class CheckerTest extends BaseCheckTestSupport { 
 + 
 + @ Rule 
 + public final TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ; 
 
 - public class CheckerTest { 
 @ Test 
 public void testDestroy ( ) throws Exception { 
 final DebugChecker checker = new DebugChecker ( ) ; 
 @ @ - 174 , 7 + 190 , 14 @ @ public class CheckerTest { 
 
 @ Test 
 public void testFileExtensions ( ) throws Exception { 
 + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " configuration " ) ; 
 + checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; 
 + checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + 
 final Checker checker = new Checker ( ) ; 
 + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . configure ( checkerConfig ) ; 
 + 
 final List < File > files = new ArrayList < > ( ) ; 
 final File file = new File ( " file . pdf " ) ; 
 files . add ( file ) ; 
 @ @ - 182 , 6 + 205 , 7 @ @ public class CheckerTest { 
 files . add ( otherFile ) ; 
 final String [ ] fileExtensions = { " java " , " xml " , " properties " } ; 
 checker . setFileExtensions ( fileExtensions ) ; 
 + checker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 final int counter = checker . process ( files ) ; 
 
 / / comparing to 1 as there is only one legal file in input 
 @ @ - 275 , 4 + 299 , 197 @ @ public class CheckerTest { 
 DebugAuditAdapter . class . getCanonicalName ( ) ) ; 
 checker . setupChild ( config ) ; 
 } 
 + 
 + @ Test 
 + public void testDestroyNonExistingCache ( ) throws Exception { 
 + / / We use assumption to satisfy coverage rate on OS Windows , since persist ( ) method of 
 + / / class PropertyCacheFile does not throw IOException on OS Linux when path to a cache 
 + / / directory is invalid on OS Windows . 
 + Assume . assumeTrue ( System . getProperty ( " os . name " ) 
 + . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) ; 
 + 
 + final Checker checker = new Checker ( ) ; 
 + final PackageObjectFactory factory = new PackageObjectFactory ( 
 + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . setModuleFactory ( factory ) ; 
 + checker . configure ( new DefaultConfiguration ( " default config " ) ) ; 
 + final String tempFilePath = temporaryFolder . newFile ( ) . getPath ( ) + " . \ \ \ ' " ; 
 + checker . setCacheFile ( tempFilePath ) ; 
 + try { 
 + checker . destroy ( ) ; 
 + fail ( " Exception did not happen " ) ; 
 + } 
 + catch ( IllegalStateException ex ) { 
 + assertTrue ( ex . getCause ( ) instanceof IOException ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testDestroyCacheFileWithInvalidPath ( ) throws Exception { 
 + final Checker checker = new Checker ( ) ; 
 + final PackageObjectFactory factory = new PackageObjectFactory ( 
 + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . setModuleFactory ( factory ) ; 
 + checker . configure ( new DefaultConfiguration ( " default config " ) ) ; 
 + if ( System . getProperty ( " os . name " ) 
 + . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { 
 + / / https : / / support . microsoft . com / en - us / kb / 177506 but this only for NTFS 
 + / / WindowsServer 2012 use Resilient File System ( ReFS ) , so any name is ok 
 + final File file = new File ( " C \ \ : invalid " ) ; 
 + checker . setCacheFile ( file . getAbsolutePath ( ) ) ; 
 + } 
 + else { 
 + checker . setCacheFile ( File . separator + " : invalid " ) ; 
 + } 
 + try { 
 + checker . destroy ( ) ; 
 + fail ( " Exception did not happen " ) ; 
 + } 
 + catch ( IllegalStateException ex ) { 
 + assertThat ( ex . getCause ( ) , anyOf ( instanceOf ( IOException . class ) , 
 + instanceOf ( InvalidPathException . class ) ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testCacheFile ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; 
 + 
 + final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; 
 + treeWalkerConfig . addChild ( checkConfig ) ; 
 + 
 + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " checkstyleConfig " ) ; 
 + checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; 
 + checkerConfig . addChild ( treeWalkerConfig ) ; 
 + checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + 
 + final Checker checker = new Checker ( ) ; 
 + final Locale locale = Locale . ROOT ; 
 + checker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 + checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . configure ( checkerConfig ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 + 
 + final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 + / / one more time to reuse cache 
 + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testCacheFileChangeInConfig ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; 
 + 
 + final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; 
 + treeWalkerConfig . addChild ( checkConfig ) ; 
 + 
 + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " configuration " ) ; 
 + checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; 
 + checkerConfig . addChild ( treeWalkerConfig ) ; 
 + checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + 
 + final Checker checker = new Checker ( ) ; 
 + final Locale locale = Locale . ROOT ; 
 + checker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 + checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . configure ( checkerConfig ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 + 
 + final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 + 
 + / / update Checker config 
 + checker . destroy ( ) ; 
 + checker . configure ( checkerConfig ) ; 
 + 
 + final Checker otherChecker = new Checker ( ) ; 
 + otherChecker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 + otherChecker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 + otherChecker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + otherChecker . configure ( checkerConfig ) ; 
 + otherChecker . addListener ( new BriefUtLogger ( stream ) ) ; 
 + / / here is diff with previous checker 
 + checkerConfig . addAttribute ( " fileExtensions " , " java , javax " ) ; 
 + 
 + / / one more time on updated config 
 + verify ( otherChecker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testWithCacheWithNoViolation ( ) throws Exception { 
 + final Checker checker = new Checker ( ) ; 
 + final PackageObjectFactory factory = new PackageObjectFactory ( 
 + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . setModuleFactory ( factory ) ; 
 + checker . configure ( createCheckConfig ( TranslationCheck . class ) ) ; 
 + checker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + checker . setupChild ( createCheckConfig ( TranslationCheck . class ) ) ; 
 + final File file = temporaryFolder . newFile ( " file . java " ) ; 
 + final List < File > files = new ArrayList < > ( ) ; 
 + files . add ( file ) ; 
 + checker . process ( files ) ; 
 + } 
 + 
 + @ Test 
 + public void testClearExistingCache ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; 
 + 
 + final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; 
 + treeWalkerConfig . addChild ( checkConfig ) ; 
 + 
 + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " myConfig " ) ; 
 + checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; 
 + checkerConfig . addChild ( treeWalkerConfig ) ; 
 + checkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + 
 + final Checker checker = new Checker ( ) ; 
 + final Locale locale = Locale . ROOT ; 
 + checker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 + checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . configure ( checkerConfig ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 + 
 + final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 + checker . clearCache ( ) ; 
 + / / one more time , but file that should be audited is not in cache 
 + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testClearNonexistentCache ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; 
 + 
 + final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; 
 + treeWalkerConfig . addChild ( checkConfig ) ; 
 + 
 + final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " simpleConfig " ) ; 
 + checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; 
 + checkerConfig . addChild ( treeWalkerConfig ) ; 
 + 
 + final Checker checker = new Checker ( ) ; 
 + final Locale locale = Locale . ROOT ; 
 + checker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 + checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . configure ( checkerConfig ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 + 
 + final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 + checker . clearCache ( ) ; 
 + / / one more time , but cache does not exist 
 + verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index 15ef6fe . . 9ab550f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 19 , 27 + 19 , 20 @ @ 
 
 package com . puppycrawl . tools . checkstyle ; 
 
 - import static org . hamcrest . CoreMatchers . anyOf ; 
 - import static org . hamcrest . CoreMatchers . instanceOf ; 
 - import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 import java . io . BufferedWriter ; 
 import java . io . File ; 
 import java . io . FileOutputStream ; 
 - import java . io . IOException ; 
 import java . io . OutputStreamWriter ; 
 import java . io . Writer ; 
 import java . nio . charset . StandardCharsets ; 
 - import java . nio . file . InvalidPathException ; 
 import java . util . ArrayList ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 - import java . util . Locale ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 - import org . junit . Assume ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . TemporaryFolder ; 
 @ @ - 139 , 122 + 132 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testDestroyNonExistingCache ( ) throws Exception { 
 - 
 - / / We use assumption to satisfy coverage rate on OS Windows , since persist ( ) method of 
 - / / class PropertyCacheFile does not throw IOException on OS Linux when path to a cache 
 - / / directory is invalid on OS Windows . 
 - Assume . assumeTrue ( System . getProperty ( " os . name " ) 
 - . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) ; 
 - 
 - final TreeWalker treeWalker = new TreeWalker ( ) ; 
 - treeWalker . configure ( new DefaultConfiguration ( " default config " ) ) ; 
 - final String tempFilePath = temporaryFolder . newFile ( ) . getPath ( ) + " . \ \ \ ' " ; 
 - treeWalker . setCacheFile ( tempFilePath ) ; 
 - try { 
 - treeWalker . destroy ( ) ; 
 - fail ( " Exception did not happen " ) ; 
 - } 
 - catch ( IllegalStateException ex ) { 
 - assertTrue ( ex . getCause ( ) instanceof IOException ) ; 
 - } 
 - } 
 - 
 - @ Test 
 - public void testDestroyCacheFileWithInvalidPath ( ) throws Exception { 
 - final TreeWalker treeWalker = new TreeWalker ( ) ; 
 - treeWalker . configure ( new DefaultConfiguration ( " default config " ) ) ; 
 - if ( System . getProperty ( " os . name " ) 
 - . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { 
 - / / https : / / support . microsoft . com / en - us / kb / 177506 but this only for NTFS 
 - / / WindowsServer 2012 use Resilient File System ( ReFS ) , so any name is ok 
 - final File file = new File ( " C \ \ : invalid " ) ; 
 - treeWalker . setCacheFile ( file . getAbsolutePath ( ) ) ; 
 - } 
 - else { 
 - treeWalker . setCacheFile ( File . separator + " : invalid " ) ; 
 - } 
 - try { 
 - treeWalker . destroy ( ) ; 
 - fail ( " Exception did not happen " ) ; 
 - } 
 - catch ( IllegalStateException ex ) { 
 - assertThat ( ex . getCause ( ) , anyOf ( instanceOf ( IOException . class ) , 
 - instanceOf ( InvalidPathException . class ) ) ) ; 
 - } 
 - } 
 - 
 - @ Test 
 - public void testCacheFile ( ) throws Exception { 
 - final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; 
 - 
 - final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; 
 - treeWalkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 - treeWalkerConfig . addChild ( checkConfig ) ; 
 - 
 - final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " configuration " ) ; 
 - checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; 
 - checkerConfig . addChild ( treeWalkerConfig ) ; 
 - 
 - final Checker checker = new Checker ( ) ; 
 - final Locale locale = Locale . ROOT ; 
 - checker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - checker . configure ( checkerConfig ) ; 
 - checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 - 
 - final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 - final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - 
 - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 - / / one more time to reuse cache 
 - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 - } 
 - 
 - @ Test 
 - public void testCacheFileChangeInConfig ( ) throws Exception { 
 - final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; 
 - 
 - final DefaultConfiguration treeWalkerConfig = createCheckConfig ( TreeWalker . class ) ; 
 - treeWalkerConfig . addAttribute ( " cacheFile " , temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 - treeWalkerConfig . addChild ( checkConfig ) ; 
 - 
 - final DefaultConfiguration checkerConfig = new DefaultConfiguration ( " configuration " ) ; 
 - checkerConfig . addAttribute ( " charset " , " UTF - 8 " ) ; 
 - checkerConfig . addChild ( treeWalkerConfig ) ; 
 - 
 - final Checker checker = new Checker ( ) ; 
 - final Locale locale = Locale . ROOT ; 
 - checker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - checker . configure ( checkerConfig ) ; 
 - checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 - 
 - final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 - final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - 
 - verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 - 
 - / / update Checker config 
 - / / checker . destroy ( ) ; 
 - / / checker . configure ( checkerConfig ) ; 
 - 
 - final Checker otherChecker = new Checker ( ) ; 
 - otherChecker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 - otherChecker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 - otherChecker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - otherChecker . configure ( checkerConfig ) ; 
 - otherChecker . addListener ( new BriefUtLogger ( stream ) ) ; 
 - / / here is diff with previous checker 
 - checkerConfig . addAttribute ( " fileExtensions " , " java , javax " ) ; 
 - 
 - / / one more time on updated config 
 - verify ( otherChecker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 - } 
 - 
 - @ Test 
 public void testForInvalidCheckImplementation ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( BadJavaDocCheck . class ) ; 
 final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 @ @ - 273 , 7 + 150 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 final TreeWalker treeWalker = new TreeWalker ( ) ; 
 treeWalker . setTabWidth ( 1 ) ; 
 treeWalker . configure ( new DefaultConfiguration ( " default config " ) ) ; 
 - treeWalker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 final File file = new File ( " src / main / resources / checkstyle _ packages . xml " ) ; 
 treeWalker . processFiltered ( file , new ArrayList < String > ( ) ) ; 
 } 
 @ @ - 285 , 7 + 161 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 final PackageObjectFactory factory = new PackageObjectFactory ( 
 new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 treeWalker . setModuleFactory ( factory ) ; 
 - treeWalker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 treeWalker . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 final List < String > lines = new ArrayList < > ( ) ; 
 @ @ - 300 , 7 + 175 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 final PackageObjectFactory factory = new PackageObjectFactory ( 
 new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 treeWalker . setModuleFactory ( factory ) ; 
 - treeWalker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 treeWalker . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 final List < String > lines = new ArrayList < > ( ) ; 
 @ @ - 322 , 7 + 196 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 final PackageObjectFactory factory = new PackageObjectFactory ( 
 new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 treeWalker . setModuleFactory ( factory ) ; 
 - treeWalker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 treeWalker . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 final List < String > lines = new ArrayList < > ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessagesTest . java 
 new file mode 100644 
 index 0000000 . . f8c095b 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessagesTest . java 
 @ @ - 0 , 0 + 1 , 38 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . api ; 
 + 
 + import org . junit . Assert ; 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . Definitions ; 
 + 
 + public class LocalizedMessagesTest { 
 + @ Test 
 + public void testSize ( ) { 
 + / / Just to satisfy code coverage 
 + final LocalizedMessages messages = new LocalizedMessages ( ) ; 
 + messages . add ( new LocalizedMessage ( 0 , 
 + Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , 
 + new String [ ] { " args " } , null , getClass ( ) , 
 + null ) ) ; 
 + Assert . assertEquals ( 1 , messages . size ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml 
 index 354ad10 . . 9f0dfd4 100644 
 - - - a / src / xdocs / config . xml 
 + + + b / src / xdocs / config . xml 
 @ @ - 298 , 6 + 298 , 13 @ @ 
 < td > < code > null < / code > < / td > 
 < / tr > 
 < tr > 
 + < td > cacheFile < / td > 
 + < td > caches information about files that have checked OK ; used 
 + to avoid repeated checks of the same files < / td > 
 + < td > < a href = " property _ types . html # string " > string < / a > < / td > 
 + < td > < code > null < / code > ( no cache file ) < / td > 
 + < / tr > 
 + < tr > 
 < td > localeCountry < / td > 
 < td > locale country for messages < / td > 
 < td > < a href = " property _ types . html # string " > string < / a > : either 
 @ @ - 327 , 13 + 334 , 14 @ @ 
 
 < p > 
 For example , the following configuration fragment specifies base 
 - directory < code > src / checkstyle < / code > and German 
 + directory < code > src / checkstyle < / code > , cache file < code > target / cachefile < / code > and German 
 locale for all modules : 
 < / p > 
 
 < source > 
 & lt ; module name = & quot ; Checker & quot ; & gt ; 
 & lt ; property name = & quot ; basedir & quot ; value = & quot ; src / checkstyle & quot ; / & gt ; 
 + & lt ; property name = & quot ; cacheFile & quot ; value = & quot ; target / cachefile & quot ; / & gt ; 
 & lt ; property name = & quot ; localeCountry & quot ; value = & quot ; DE & quot ; / & gt ; 
 & lt ; property name = & quot ; localeLanguage & quot ; value = & quot ; de & quot ; / & gt ; 
 & lt ; module name = & quot ; JavadocPackage & quot ; / & gt ; 
 @ @ - 404 , 13 + 412 , 6 @ @ 
 < th > default value < / th > 
 < / tr > 
 < tr > 
 - < td > cacheFile < / td > 
 - < td > caches information about files that have checked OK ; used 
 - to avoid repeated checks of the same files < / td > 
 - < td > < a href = " property _ types . html # string " > string < / a > < / td > 
 - < td > < code > null < / code > ( no cache file ) < / td > 
 - < / tr > 
 - < tr > 
 < td > tabWidth < / td > 
 < td > number of expanded spaces for a tab character ( < code > ' \ t ' < / code > ) ; used in messages and Checks that 
 require a tab width , such as < a 
 @ @ - 431 , 13 + 432 , 12 @ @ 
 
 < p > 
 For example , the following configuration fragment specifies 
 - < code > TreeWalker < / code > cache file < code > target / cachefile < / code > , and a < code > tabWidth < / code > of < code > 4 < / code > : 
 + < code > TreeWalker < / code > a < code > tabWidth < / code > of < code > 4 < / code > : 
 < / p > 
 
 < source > 
 & lt ; module name = & quot ; Checker & quot ; & gt ; 
 & lt ; module name = & quot ; TreeWalker & quot ; & gt ; 
 - & lt ; property name = & quot ; cacheFile & quot ; value = & quot ; target / cachefile & quot ; / & gt ; 
 & lt ; property name = & quot ; tabWidth & quot ; value = & quot ; 4 & quot ; / & gt ; 
 . . . 
 & lt ; / module & gt ;

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 2569688 . . 2dab005 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1085 , 7 + 1085 , 6 @ @ 
 < regex > < pattern > . * . PropertyCacheFile < / pattern > < branchRate > 22 < / branchRate > < lineRate > 19 < / lineRate > < / regex > 
 < regex > < pattern > . * . TreeWalker < / pattern > < branchRate > 94 < / branchRate > < lineRate > 92 < / lineRate > < / regex > 
 
 - < regex > < pattern > . * . api . AbstractLoader < / pattern > < branchRate > 75 < / branchRate > < lineRate > 88 < / lineRate > < / regex > 
 < regex > < pattern > . * . api . AuditEvent < / pattern > < branchRate > 100 < / branchRate > < lineRate > 93 < / lineRate > < / regex > 
 < regex > < pattern > . * . api . AutomaticBean < / pattern > < branchRate > 90 < / branchRate > < lineRate > 82 < / lineRate > < / regex > 
 < regex > < pattern > . * . api . AutomaticBean \ $ . * < / pattern > < branchRate > 75 < / branchRate > < lineRate > 90 < / lineRate > < / regex > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java 
 index fd32e47 . . 2dec7ae 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java 
 @ @ - 106 , 21 + 106 , 13 @ @ public abstract class AbstractLoader 
 this . getClass ( ) . getClassLoader ( ) ; 
 final InputStream dtdIS = 
 loader . getResourceAsStream ( dtdResourceName ) ; 
 - if ( dtdIS = = null ) { 
 - throw new SAXException ( 
 - " Unable to load internal dtd " + dtdResourceName ) ; 
 - } 
 + 
 return new InputSource ( dtdIS ) ; 
 } 
 return super . resolveEntity ( publicId , systemId ) ; 
 } 
 
 @ Override 
 - public void warning ( SAXParseException ex ) throws SAXException { 
 - throw ex ; 
 - } 
 - 
 - @ Override 
 public void error ( SAXParseException ex ) throws SAXException { 
 throw ex ; 
 }
