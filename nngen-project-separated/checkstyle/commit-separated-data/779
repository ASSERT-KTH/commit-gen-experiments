BLEU SCORE: 0.06551842408522356

TEST MSG: Issue # 4402 : add pitest - checks - annotation profile
GENERATED MSG: Issue # 3316 : use pitest testing of checks . sizes package in shippable CI

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index d493e18 . . b3d114a 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1502 , 6 + 1502 , 43 @ @ <nl> < / profile > <nl> <nl> < profile > <nl> + < id > pitest - checks - annotation < / id > <nl> + < properties > <nl> + < skipTests > true < / skipTests > <nl> + < / properties > <nl> + < build > <nl> + < plugins > <nl> + < plugin > <nl> + < groupId > org . pitest < / groupId > <nl> + < artifactId > pitest - maven < / artifactId > <nl> + < version > $ { pitest . plugin . version } < / version > <nl> + < configuration > <nl> + < targetClasses > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationLocationCheck < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationUseStyleCheck < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . annotation . MissingDeprecatedCheck < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . annotation . MissingOverrideCheck < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . annotation . PackageAnnotationCheck < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . annotation . SuppressWarningsCheck < / param > <nl> + < / targetClasses > <nl> + < targetTests > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationLocationCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationUseStyleCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . annotation . MissingDeprecatedCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . annotation . MissingOverrideCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . annotation . PackageAnnotationCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . annotation . SuppressWarningsCheckTest < / param > <nl> + < / targetTests > <nl> + < mutationThreshold > 99 < / mutationThreshold > <nl> + < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> + < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> + < threads > $ { pitest . plugin . threads } < / threads > <nl> + < / configuration > <nl> + < / plugin > <nl> + < / plugins > <nl> + < / build > <nl> + < / profile > <nl> + < profile > <nl> < id > pitest - checks - blocks < / id > <nl> < properties > <nl> < skipTests > true < / skipTests > <nl> diff - - git a / shippable . yml b / shippable . yml <nl> index 1b2be97 . . 563fe69 100644 <nl> - - - a / shippable . yml <nl> + + + b / shippable . yml <nl> @ @ - 6 , 6 + 6 , 7 @ @ jdk : <nl> <nl> env : <nl> matrix : <nl> + - PROFILE = " - Ppitest - checks - annotation , no - validations " <nl> - PROFILE = " - Ppitest - checks - blocks , no - validations " <nl> - PROFILE = " - Ppitest - checks - coding , no - validations " <nl> - PROFILE = " - Ppitest - checks - design , no - validations "
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheck . java <nl> index 9c6a844 . . 31ba959 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheck . java <nl> @ @ - 60 , 14 + 60 , 9 @ @ public class TodoCommentCheck <nl> public static final String MSG _ KEY = " todo . match " ; <nl> <nl> / * * <nl> - * Format of ' todo ' comment . <nl> - * / <nl> - private String format = " TODO : " ; <nl> - <nl> - / * * <nl> * Regular expression pattern compiled from format . <nl> * / <nl> - private Pattern regexp = Pattern . compile ( format ) ; <nl> + private Pattern format = Pattern . compile ( " TODO : " ) ; <nl> <nl> @ Override <nl> public boolean isCommentNodesRequired ( ) { <nl> @ @ - 80 , 8 + 75 , 7 @ @ public class TodoCommentCheck <nl> * pattern of ' todo ' comment . <nl> * / <nl> public void setFormat ( Pattern pattern ) { <nl> - format = pattern . pattern ( ) ; <nl> - regexp = pattern ; <nl> + format = pattern ; <nl> } <nl> <nl> @ Override <nl> @ @ - 104 , 8 + 98 , 8 @ @ public class TodoCommentCheck <nl> final String [ ] lines = ast . getText ( ) . split ( " \ n " ) ; <nl> <nl> for ( int i = 0 ; i < lines . length ; i + + ) { <nl> - if ( regexp . matcher ( lines [ i ] ) . find ( ) ) { <nl> - log ( ast . getLineNo ( ) + i , MSG _ KEY , format ) ; <nl> + if ( format . matcher ( lines [ i ] ) . find ( ) ) { <nl> + log ( ast . getLineNo ( ) + i , MSG _ KEY , format . pattern ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> index e23d86d . . 7edc100 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> @ @ - 108 , 11 + 108 , 8 @ @ public class TrailingCommentCheck extends AbstractCheck { <nl> / * * Pattern for legal trailing comment . * / <nl> private Pattern legalComment ; <nl> <nl> - / * * The format string of the regexp . * / <nl> - private String format = " ^ [ \ \ s \ \ } ) ; ] * $ " ; <nl> - <nl> / * * The regexp to match against . * / <nl> - private Pattern regexp = Pattern . compile ( format ) ; <nl> + private Pattern format = Pattern . compile ( " ^ [ \ \ s \ \ } ) ; ] * $ " ) ; <nl> <nl> / * * <nl> * Sets patter for legal trailing comments . <nl> @ @ - 127 , 8 + 124 , 7 @ @ public class TrailingCommentCheck extends AbstractCheck { <nl> * @ param pattern a pattern <nl> * / <nl> public final void setFormat ( Pattern pattern ) { <nl> - format = pattern . pattern ( ) ; <nl> - regexp = pattern ; <nl> + format = pattern ; <nl> } <nl> <nl> @ Override <nl> @ @ - 180 , 7 + 176 , 7 @ @ public class TrailingCommentCheck extends AbstractCheck { <nl> continue ; <nl> } <nl> } <nl> - if ( ! regexp . matcher ( lineBefore ) . find ( ) <nl> + if ( ! format . matcher ( lineBefore ) . find ( ) <nl> & & ! isLegalComment ( comment ) ) { <nl> log ( lineNo , MSG _ KEY ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> index cf84c14 . . e370219 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * Detects uncommented main methods . Basically detects <nl> @ @ - 49 , 11 + 48 , 8 @ @ public class UncommentedMainCheck <nl> * / <nl> public static final String MSG _ KEY = " uncommented . main " ; <nl> <nl> - / * * The pattern to exclude classes from the check . * / <nl> - private String excludedClasses = " ^ $ " ; <nl> / * * Compiled regexp to exclude classes from check . * / <nl> - private Pattern excludedClassesPattern = <nl> - CommonUtils . createPattern ( excludedClasses ) ; <nl> + private Pattern excludedClasses = Pattern . compile ( " ^ $ " ) ; <nl> / * * Current class name . * / <nl> private String currentClass ; <nl> / * * Current package . * / <nl> @ @ - 66 , 8 + 62 , 7 @ @ public class UncommentedMainCheck <nl> * @ param excludedClasses a pattern <nl> * / <nl> public void setExcludedClasses ( Pattern excludedClasses ) { <nl> - this . excludedClasses = excludedClasses . pattern ( ) ; <nl> - excludedClassesPattern = excludedClasses ; <nl> + this . excludedClasses = excludedClasses ; <nl> } <nl> <nl> @ Override <nl> @ @ - 169 , 7 + 164 , 7 @ @ public class UncommentedMainCheck <nl> * @ return true if check passed , false otherwise <nl> * / <nl> private boolean checkClassName ( ) { <nl> - return ! excludedClassesPattern . matcher ( currentClass ) . find ( ) ; <nl> + return ! excludedClasses . matcher ( currentClass ) . find ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> index 51a3ea1 . . b35922e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> @ @ - 107 , 19 + 107 , 15 @ @ public class SuppressWarningsCheck extends AbstractCheck { <nl> private static final String FQ _ SUPPRESS _ WARNINGS = <nl> " java . lang . " + SUPPRESS _ WARNINGS ; <nl> <nl> - / * * The format string of the regexp . * / <nl> - private String format = " ^ $ | ^ \ \ s + $ " ; <nl> - <nl> / * * The regexp to match against . * / <nl> - private Pattern regexp = Pattern . compile ( format ) ; <nl> + private Pattern format = Pattern . compile ( " ^ $ | ^ \ \ s + $ " ) ; <nl> <nl> / * * <nl> * Set the format for the specified regular expression . <nl> * @ param pattern the new pattern <nl> * / <nl> public final void setFormat ( Pattern pattern ) { <nl> - format = pattern . pattern ( ) ; <nl> - regexp = pattern ; <nl> + format = pattern ; <nl> } <nl> <nl> @ Override <nl> @ @ - 242 , 7 + 238 , 7 @ @ public class SuppressWarningsCheck extends AbstractCheck { <nl> * / <nl> private void logMatch ( final int lineNo , <nl> final int colNum , final String warningText ) { <nl> - final Matcher matcher = regexp . matcher ( warningText ) ; <nl> + final Matcher matcher = format . matcher ( warningText ) ; <nl> if ( matcher . matches ( ) ) { <nl> log ( lineNo , colNum , <nl> MSG _ KEY _ SUPPRESSED _ WARNING _ NOT _ ALLOWED , warningText ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> index c81267b . . 769453f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> @ @ - 131 , 11 + 131 , 8 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> / * * Check methods and fields with only corresponding modifiers . * / <nl> private List < Integer > memberModifiers ; <nl> <nl> - / * * The format string of the regexp . * / <nl> - private String format = " ^ ( . * [ . ] ) ? Abstract . * $ " ; <nl> - <nl> / * * The regexp to match against . * / <nl> - private Pattern regexp = Pattern . compile ( format ) ; <nl> + private Pattern format = Pattern . compile ( " ^ ( . * [ . ] ) ? Abstract . * $ " ) ; <nl> <nl> / * * <nl> * Controls whether to validate abstract class names . <nl> @ @ - 154 , 8 + 151 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> * @ param pattern a pattern . <nl> * / <nl> public void setFormat ( Pattern pattern ) { <nl> - format = pattern . pattern ( ) ; <nl> - regexp = pattern ; <nl> + format = pattern ; <nl> } <nl> <nl> / * * <nl> @ @ - 338 , 7 + 334 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> | | illegalClassNames . contains ( shortName ) <nl> | | validateAbstractClassNames <nl> & & ! legalAbstractClassNames . contains ( className ) <nl> - & & regexp . matcher ( className ) . find ( ) ; <nl> + & & format . matcher ( className ) . find ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java <nl> index a1160d4 . . 48545dc 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java <nl> @ @ - 62 , 10 + 62 , 8 @ @ public final class ReturnCountCheck extends AbstractCheck { <nl> / * * Stack of method contexts . * / <nl> private final Deque < Context > contextStack = new ArrayDeque < > ( ) ; <nl> <nl> - / * * The format string of the regexp . * / <nl> - private String format = " ^ equals $ " ; <nl> / * * The regexp to match against . * / <nl> - private Pattern regexp = Pattern . compile ( format ) ; <nl> + private Pattern format = Pattern . compile ( " ^ equals $ " ) ; <nl> <nl> / * * Maximum allowed number of return statements . * / <nl> private int max = 2 ; <nl> @ @ - 104 , 8 + 102 , 7 @ @ public final class ReturnCountCheck extends AbstractCheck { <nl> * @ param pattern a pattern . <nl> * / <nl> public void setFormat ( Pattern pattern ) { <nl> - format = pattern . pattern ( ) ; <nl> - regexp = pattern ; <nl> + format = pattern ; <nl> } <nl> <nl> / * * <nl> @ @ - 171 , 7 + 168 , 7 @ @ public final class ReturnCountCheck extends AbstractCheck { <nl> private void visitMethodDef ( DetailAST ast ) { <nl> contextStack . push ( context ) ; <nl> final DetailAST methodNameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> - final boolean check = ! regexp . matcher ( methodNameAST . getText ( ) ) . find ( ) ; <nl> + final boolean check = ! format . matcher ( methodNameAST . getText ( ) ) . find ( ) ; <nl> context = new Context ( check ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> index 7a4888d . . b57ed9f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> @ @ - 56 , 10 + 56 , 8 @ @ public final class MutableExceptionCheck extends AbstractCheck { <nl> private Pattern extendedClassNameFormat = Pattern . compile ( DEFAULT _ FORMAT ) ; <nl> / * * Should we check current class or not . * / <nl> private boolean checking ; <nl> - / * * The format string of the regexp . * / <nl> - private String format = DEFAULT _ FORMAT ; <nl> / * * The regexp to match against . * / <nl> - private Pattern regexp = Pattern . compile ( format ) ; <nl> + private Pattern format = Pattern . compile ( DEFAULT _ FORMAT ) ; <nl> <nl> / * * <nl> * Sets the format of extended class name to the specified regular expression . <nl> @ @ - 74 , 8 + 72 , 7 @ @ public final class MutableExceptionCheck extends AbstractCheck { <nl> * @ param pattern the new pattern <nl> * / <nl> public void setFormat ( Pattern pattern ) { <nl> - format = pattern . pattern ( ) ; <nl> - regexp = pattern ; <nl> + format = pattern ; <nl> } <nl> <nl> @ Override <nl> @ @ - 151 , 7 + 148 , 7 @ @ public final class MutableExceptionCheck extends AbstractCheck { <nl> * / <nl> private boolean isNamedAsException ( DetailAST ast ) { <nl> final String className = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> - return regexp . matcher ( className ) . find ( ) ; <nl> + return format . matcher ( className ) . find ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> index 8707a93 . . 33f803b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> @ @ - 304 , 17 + 304 , 13 @ @ public class VisibilityModifierCheck <nl> PROTECTED _ ACCESS _ MODIFIER , <nl> } ; <nl> <nl> - / * * <nl> - * Pattern for public members that should be ignored . Note : <nl> + / * * Regexp for public members that should be ignored . Note : <nl> * Earlier versions of checkstyle used ^ f [ A - Z ] [ a - zA - Z0 - 9 ] * $ as the <nl> * default to allow CMP for EJB 1 . 1 with the default settings . <nl> * With EJB 2 . 0 it is not longer necessary to have public access <nl> * for persistent fields . <nl> * / <nl> - private String publicMemberFormat = " ^ serialVersionUID $ " ; <nl> - <nl> - / * * Regexp for public members that should be ignored . * / <nl> - private Pattern publicMemberPattern = Pattern . compile ( publicMemberFormat ) ; <nl> + private Pattern publicMemberPattern = Pattern . compile ( " ^ serialVersionUID $ " ) ; <nl> <nl> / * * List of ignore annotations short names . * / <nl> private final List < String > ignoreAnnotationShortNames = <nl> @ @ - 374 , 7 + 370 , 6 @ @ public class VisibilityModifierCheck <nl> * / <nl> public void setPublicMemberPattern ( Pattern pattern ) { <nl> publicMemberPattern = pattern ; <nl> - publicMemberFormat = pattern . pattern ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> index aaac2e9 . . 2c00c77 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> @ @ - 101 , 13 + 101 , 9 @ @ public class JavadocTypeCheck <nl> / * * The visibility scope where Javadoc comments shouldn ' t be checked . * * / <nl> private Scope excludeScope ; <nl> / * * Compiled regexp to match author tag content . * * / <nl> - private Pattern authorFormatPattern ; <nl> + private Pattern authorFormat ; <nl> / * * Compiled regexp to match version tag content . * * / <nl> - private Pattern versionFormatPattern ; <nl> - / * * Regexp to match author tag content . * / <nl> - private String authorFormat ; <nl> - / * * Regexp to match version tag content . * / <nl> - private String versionFormat ; <nl> + private Pattern versionFormat ; <nl> / * * <nl> * Controls whether to ignore errors when a method has type parameters but <nl> * does not have matching param tags in the javadoc . Defaults to false . <nl> @ @ - 137 , 8 + 133 , 7 @ @ public class JavadocTypeCheck <nl> * @ param pattern a pattern . <nl> * / <nl> public void setAuthorFormat ( Pattern pattern ) { <nl> - authorFormat = pattern . pattern ( ) ; <nl> - authorFormatPattern = pattern ; <nl> + authorFormat = pattern ; <nl> } <nl> <nl> / * * <nl> @ @ - 146 , 8 + 141 , 7 @ @ public class JavadocTypeCheck <nl> * @ param pattern a pattern . <nl> * / <nl> public void setVersionFormat ( Pattern pattern ) { <nl> - versionFormat = pattern . pattern ( ) ; <nl> - versionFormatPattern = pattern ; <nl> + versionFormat = pattern ; <nl> } <nl> <nl> / * * <nl> @ @ - 202 , 9 + 196 , 9 @ @ public class JavadocTypeCheck <nl> if ( ScopeUtils . isOuterMostType ( ast ) ) { <nl> / / don ' t check author / version for inner classes <nl> checkTag ( lineNo , tags , JavadocTagInfo . AUTHOR . getName ( ) , <nl> - authorFormatPattern , authorFormat ) ; <nl> + authorFormat ) ; <nl> checkTag ( lineNo , tags , JavadocTagInfo . VERSION . getName ( ) , <nl> - versionFormatPattern , versionFormat ) ; <nl> + versionFormat ) ; <nl> } <nl> <nl> final List < String > typeParamNames = <nl> @ @ - 272 , 10 + 266 , 9 @ @ public class JavadocTypeCheck <nl> * @ param tags tags from the Javadoc comment for the type definition . <nl> * @ param tagName the required tag name . <nl> * @ param formatPattern regexp for the tag value . <nl> - * @ param format pattern for the tag value . <nl> * / <nl> private void checkTag ( int lineNo , List < JavadocTag > tags , String tagName , <nl> - Pattern formatPattern , String format ) { <nl> + Pattern formatPattern ) { <nl> if ( formatPattern ! = null ) { <nl> int tagCount = 0 ; <nl> final String tagPrefix = " @ " ; <nl> @ @ - 284 , 7 + 277 , 7 @ @ public class JavadocTypeCheck <nl> if ( tag . getTagName ( ) . equals ( tagName ) ) { <nl> tagCount + + ; <nl> if ( ! formatPattern . matcher ( tag . getFirstArg ( ) ) . find ( ) ) { <nl> - log ( lineNo , MSG _ TAG _ FORMAT , tagPrefix + tagName , format ) ; <nl> + log ( lineNo , MSG _ TAG _ FORMAT , tagPrefix + tagName , formatPattern . pattern ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java <nl> index 857561c . . ee61435 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java <nl> @ @ - 87 , 12 + 87 , 10 @ @ public class WriteTagCheck <nl> / * * Compiled regexp to match tag . * * / <nl> private Pattern tagRegExp ; <nl> / * * Compiled regexp to match tag content . * * / <nl> - private Pattern tagFormatRegExp ; <nl> + private Pattern tagFormat ; <nl> <nl> / * * Regexp to match tag . * / <nl> private String tag ; <nl> - / * * Regexp to match tag content . * / <nl> - private String tagFormat ; <nl> / * * The severity level of found tag reports . * / <nl> private SeverityLevel tagSeverityLevel = SeverityLevel . INFO ; <nl> <nl> @ @ - 110 , 8 + 108 , 7 @ @ public class WriteTagCheck <nl> * @ param pattern a { @ code String } value <nl> * / <nl> public void setTagFormat ( Pattern pattern ) { <nl> - tagFormat = pattern . pattern ( ) ; <nl> - tagFormatRegExp = pattern ; <nl> + tagFormat = pattern ; <nl> } <nl> <nl> / * * <nl> @ @ - 181 , 11 + 178 , 11 @ @ public class WriteTagCheck <nl> tagCount + = 1 ; <nl> final int contentStart = matcher . start ( 1 ) ; <nl> final String content = commentValue . substring ( contentStart ) ; <nl> - if ( tagFormatRegExp = = null | | tagFormatRegExp . matcher ( content ) . find ( ) ) { <nl> + if ( tagFormat = = null | | tagFormat . matcher ( content ) . find ( ) ) { <nl> logTag ( lineNo + i - comment . length , tag , content ) ; <nl> } <nl> else { <nl> - log ( lineNo + i - comment . length , MSG _ TAG _ FORMAT , tag , tagFormat ) ; <nl> + log ( lineNo + i - comment . length , MSG _ TAG _ FORMAT , tag , tagFormat . pattern ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java <nl> index 3863a37 . . efaa203 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java <nl> @ @ - 61 , 11 + 61 , 8 @ @ public final class AbstractClassNameCheck extends AbstractCheck { <nl> / * * Whether to ignore checking the name . * / <nl> private boolean ignoreName ; <nl> <nl> - / * * The format string of the regexp . * / <nl> - private String format = " ^ Abstract . + $ " ; <nl> - <nl> / * * The regexp to match against . * / <nl> - private Pattern regexp = Pattern . compile ( format ) ; <nl> + private Pattern format = Pattern . compile ( " ^ Abstract . + $ " ) ; <nl> <nl> / * * <nl> * Whether to ignore checking for the { @ code abstract } modifier . <nl> @ @ - 88 , 8 + 85 , 7 @ @ public final class AbstractClassNameCheck extends AbstractCheck { <nl> * @ param pattern the new pattern <nl> * / <nl> public void setFormat ( Pattern pattern ) { <nl> - format = pattern . pattern ( ) ; <nl> - regexp = pattern ; <nl> + format = pattern ; <nl> } <nl> <nl> @ Override <nl> @ @ - 123 , 7 + 119 , 7 @ @ public final class AbstractClassNameCheck extends AbstractCheck { <nl> / / if class has abstract modifier <nl> if ( ! ignoreName & & ! isMatchingClassName ( className ) ) { <nl> log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> - MSG _ ILLEGAL _ ABSTRACT _ CLASS _ NAME , className , format ) ; <nl> + MSG _ ILLEGAL _ ABSTRACT _ CLASS _ NAME , className , format . pattern ( ) ) ; <nl> } <nl> } <nl> else if ( ! ignoreModifier & & isMatchingClassName ( className ) ) { <nl> @ @ - 148 , 6 + 144 , 6 @ @ public final class AbstractClassNameCheck extends AbstractCheck { <nl> * @ return true if class name matches format of abstract class names . <nl> * / <nl> private boolean isMatchingClassName ( String className ) { <nl> - return regexp . matcher ( className ) . find ( ) ; <nl> + return format . matcher ( className ) . find ( ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java <nl> index d7d043c . . 2be818a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java <nl> @ @ - 38 , 18 + 38 , 15 @ @ public abstract class AbstractNameCheck <nl> * / <nl> public static final String MSG _ INVALID _ PATTERN = " name . invalidPattern " ; <nl> <nl> - / * * The format string of the regexp . * / <nl> - private String format ; <nl> - <nl> / * * The regexp to match against . * / <nl> - private Pattern regexp ; <nl> + private Pattern format ; <nl> <nl> / * * <nl> * Creates a new { @ code AbstractNameCheck } instance . <nl> * @ param format format to check with <nl> * / <nl> protected AbstractNameCheck ( String format ) { <nl> - setFormat ( CommonUtils . createPattern ( format ) ) ; <nl> + this . format = CommonUtils . createPattern ( format ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 66 , 20 + 63 , 19 @ @ public abstract class AbstractNameCheck <nl> * @ param pattern the new pattern <nl> * / <nl> public final void setFormat ( Pattern pattern ) { <nl> - format = pattern . pattern ( ) ; <nl> - regexp = pattern ; <nl> + format = pattern ; <nl> } <nl> <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> if ( mustCheckName ( ast ) ) { <nl> final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> - if ( ! regexp . matcher ( nameAST . getText ( ) ) . find ( ) ) { <nl> + if ( ! format . matcher ( nameAST . getText ( ) ) . find ( ) ) { <nl> log ( nameAST . getLineNo ( ) , <nl> nameAST . getColumnNo ( ) , <nl> MSG _ INVALID _ PATTERN , <nl> nameAST . getText ( ) , <nl> - format ) ; <nl> + format . pattern ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheck . java <nl> index 9f4bba6 . . 5be5988 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheck . java <nl> @ @ - 70 , 21 + 70 , 18 @ @ public class PackageNameCheck <nl> * / <nl> public static final String MSG _ KEY = " name . invalidPattern " ; <nl> <nl> - / * * The format string of the regexp . * / <nl> + / * * The regexp to match against . * / <nl> / / Uppercase letters seem rather uncommon , but they ' re allowed in <nl> / / http : / / docs . oracle . com / javase / specs / <nl> / / second _ edition / html / packages . doc . html # 40169 <nl> - private String format = " ^ [ a - z ] + ( \ \ . [ a - zA - Z _ ] [ a - zA - Z0 - 9 _ ] * ) * $ " ; <nl> - / * * The regexp to match against . * / <nl> - private Pattern regexp = Pattern . compile ( format ) ; <nl> + private Pattern format = Pattern . compile ( " ^ [ a - z ] + ( \ \ . [ a - zA - Z _ ] [ a - zA - Z0 - 9 _ ] * ) * $ " ) ; <nl> <nl> / * * <nl> * Set the format for the specified regular expression . <nl> * @ param pattern the new pattern <nl> * / <nl> public void setFormat ( Pattern pattern ) { <nl> - format = pattern . pattern ( ) ; <nl> - regexp = pattern ; <nl> + format = pattern ; <nl> } <nl> <nl> @ Override <nl> @ @ - 106 , 12 + 103 , 12 @ @ public class PackageNameCheck <nl> public void visitToken ( DetailAST ast ) { <nl> final DetailAST nameAST = ast . getLastChild ( ) . getPreviousSibling ( ) ; <nl> final FullIdent full = FullIdent . createFullIdent ( nameAST ) ; <nl> - if ( ! regexp . matcher ( full . getText ( ) ) . find ( ) ) { <nl> + if ( ! format . matcher ( full . getText ( ) ) . find ( ) ) { <nl> log ( full . getLineNo ( ) , <nl> full . getColumnNo ( ) , <nl> MSG _ KEY , <nl> full . getText ( ) , <nl> - format ) ; <nl> + format . pattern ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java <nl> index 4f702b3 . . 8c4a4a7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java <nl> @ @ - 108 , 11 + 108 , 8 @ @ public class RegexpCheck extends AbstractCheck { <nl> / * * Tracks number of errors . * / <nl> private int errorCount ; <nl> <nl> - / * * The format string of the regexp . * / <nl> - private String format = " $ ^ " ; <nl> - <nl> / * * The regexp to match against . * / <nl> - private Pattern regexp = Pattern . compile ( format , Pattern . MULTILINE ) ; <nl> + private Pattern format = Pattern . compile ( " $ ^ " , Pattern . MULTILINE ) ; <nl> <nl> / * * The matcher . * / <nl> private Matcher matcher ; <nl> @ @ - 170 , 8 + 167 , 7 @ @ public class RegexpCheck extends AbstractCheck { <nl> * @ throws org . apache . commons . beanutils . ConversionException unable to parse format <nl> * / <nl> public final void setFormat ( Pattern pattern ) { <nl> - format = pattern . pattern ( ) ; <nl> - regexp = CommonUtils . createPattern ( format , Pattern . MULTILINE ) ; <nl> + format = CommonUtils . createPattern ( pattern . pattern ( ) , Pattern . MULTILINE ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 191 , 7 + 187 , 7 @ @ public class RegexpCheck extends AbstractCheck { <nl> <nl> @ Override <nl> public void beginTree ( DetailAST rootAST ) { <nl> - matcher = regexp . matcher ( getFileContents ( ) . getText ( ) . getFullText ( ) ) ; <nl> + matcher = format . matcher ( getFileContents ( ) . getText ( ) . getFullText ( ) ) ; <nl> matchCount = 0 ; <nl> errorCount = 0 ; <nl> findMatch ( ) ; <nl> @ @ - 271 , 7 + 267 , 7 @ @ public class RegexpCheck extends AbstractCheck { <nl> String msg ; <nl> <nl> if ( message . isEmpty ( ) ) { <nl> - msg = format ; <nl> + msg = format . pattern ( ) ; <nl> } <nl> else { <nl> msg = message ;

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index d493e18 . . b3d114a 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1502 , 6 + 1502 , 43 @ @ 
 < / profile > 
 
 < profile > 
 + < id > pitest - checks - annotation < / id > 
 + < properties > 
 + < skipTests > true < / skipTests > 
 + < / properties > 
 + < build > 
 + < plugins > 
 + < plugin > 
 + < groupId > org . pitest < / groupId > 
 + < artifactId > pitest - maven < / artifactId > 
 + < version > $ { pitest . plugin . version } < / version > 
 + < configuration > 
 + < targetClasses > 
 + < param > com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationLocationCheck < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationUseStyleCheck < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . annotation . MissingDeprecatedCheck < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . annotation . MissingOverrideCheck < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . annotation . PackageAnnotationCheck < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . annotation . SuppressWarningsCheck < / param > 
 + < / targetClasses > 
 + < targetTests > 
 + < param > com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationLocationCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationUseStyleCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . annotation . MissingDeprecatedCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . annotation . MissingOverrideCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . annotation . PackageAnnotationCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . annotation . SuppressWarningsCheckTest < / param > 
 + < / targetTests > 
 + < mutationThreshold > 99 < / mutationThreshold > 
 + < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 + < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 + < threads > $ { pitest . plugin . threads } < / threads > 
 + < / configuration > 
 + < / plugin > 
 + < / plugins > 
 + < / build > 
 + < / profile > 
 + < profile > 
 < id > pitest - checks - blocks < / id > 
 < properties > 
 < skipTests > true < / skipTests > 
 diff - - git a / shippable . yml b / shippable . yml 
 index 1b2be97 . . 563fe69 100644 
 - - - a / shippable . yml 
 + + + b / shippable . yml 
 @ @ - 6 , 6 + 6 , 7 @ @ jdk : 
 
 env : 
 matrix : 
 + - PROFILE = " - Ppitest - checks - annotation , no - validations " 
 - PROFILE = " - Ppitest - checks - blocks , no - validations " 
 - PROFILE = " - Ppitest - checks - coding , no - validations " 
 - PROFILE = " - Ppitest - checks - design , no - validations "

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheck . java 
 index 9c6a844 . . 31ba959 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheck . java 
 @ @ - 60 , 14 + 60 , 9 @ @ public class TodoCommentCheck 
 public static final String MSG _ KEY = " todo . match " ; 
 
 / * * 
 - * Format of ' todo ' comment . 
 - * / 
 - private String format = " TODO : " ; 
 - 
 - / * * 
 * Regular expression pattern compiled from format . 
 * / 
 - private Pattern regexp = Pattern . compile ( format ) ; 
 + private Pattern format = Pattern . compile ( " TODO : " ) ; 
 
 @ Override 
 public boolean isCommentNodesRequired ( ) { 
 @ @ - 80 , 8 + 75 , 7 @ @ public class TodoCommentCheck 
 * pattern of ' todo ' comment . 
 * / 
 public void setFormat ( Pattern pattern ) { 
 - format = pattern . pattern ( ) ; 
 - regexp = pattern ; 
 + format = pattern ; 
 } 
 
 @ Override 
 @ @ - 104 , 8 + 98 , 8 @ @ public class TodoCommentCheck 
 final String [ ] lines = ast . getText ( ) . split ( " \ n " ) ; 
 
 for ( int i = 0 ; i < lines . length ; i + + ) { 
 - if ( regexp . matcher ( lines [ i ] ) . find ( ) ) { 
 - log ( ast . getLineNo ( ) + i , MSG _ KEY , format ) ; 
 + if ( format . matcher ( lines [ i ] ) . find ( ) ) { 
 + log ( ast . getLineNo ( ) + i , MSG _ KEY , format . pattern ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 index e23d86d . . 7edc100 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 @ @ - 108 , 11 + 108 , 8 @ @ public class TrailingCommentCheck extends AbstractCheck { 
 / * * Pattern for legal trailing comment . * / 
 private Pattern legalComment ; 
 
 - / * * The format string of the regexp . * / 
 - private String format = " ^ [ \ \ s \ \ } ) ; ] * $ " ; 
 - 
 / * * The regexp to match against . * / 
 - private Pattern regexp = Pattern . compile ( format ) ; 
 + private Pattern format = Pattern . compile ( " ^ [ \ \ s \ \ } ) ; ] * $ " ) ; 
 
 / * * 
 * Sets patter for legal trailing comments . 
 @ @ - 127 , 8 + 124 , 7 @ @ public class TrailingCommentCheck extends AbstractCheck { 
 * @ param pattern a pattern 
 * / 
 public final void setFormat ( Pattern pattern ) { 
 - format = pattern . pattern ( ) ; 
 - regexp = pattern ; 
 + format = pattern ; 
 } 
 
 @ Override 
 @ @ - 180 , 7 + 176 , 7 @ @ public class TrailingCommentCheck extends AbstractCheck { 
 continue ; 
 } 
 } 
 - if ( ! regexp . matcher ( lineBefore ) . find ( ) 
 + if ( ! format . matcher ( lineBefore ) . find ( ) 
 & & ! isLegalComment ( comment ) ) { 
 log ( lineNo , MSG _ KEY ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 index cf84c14 . . e370219 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * Detects uncommented main methods . Basically detects 
 @ @ - 49 , 11 + 48 , 8 @ @ public class UncommentedMainCheck 
 * / 
 public static final String MSG _ KEY = " uncommented . main " ; 
 
 - / * * The pattern to exclude classes from the check . * / 
 - private String excludedClasses = " ^ $ " ; 
 / * * Compiled regexp to exclude classes from check . * / 
 - private Pattern excludedClassesPattern = 
 - CommonUtils . createPattern ( excludedClasses ) ; 
 + private Pattern excludedClasses = Pattern . compile ( " ^ $ " ) ; 
 / * * Current class name . * / 
 private String currentClass ; 
 / * * Current package . * / 
 @ @ - 66 , 8 + 62 , 7 @ @ public class UncommentedMainCheck 
 * @ param excludedClasses a pattern 
 * / 
 public void setExcludedClasses ( Pattern excludedClasses ) { 
 - this . excludedClasses = excludedClasses . pattern ( ) ; 
 - excludedClassesPattern = excludedClasses ; 
 + this . excludedClasses = excludedClasses ; 
 } 
 
 @ Override 
 @ @ - 169 , 7 + 164 , 7 @ @ public class UncommentedMainCheck 
 * @ return true if check passed , false otherwise 
 * / 
 private boolean checkClassName ( ) { 
 - return ! excludedClassesPattern . matcher ( currentClass ) . find ( ) ; 
 + return ! excludedClasses . matcher ( currentClass ) . find ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 index 51a3ea1 . . b35922e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 @ @ - 107 , 19 + 107 , 15 @ @ public class SuppressWarningsCheck extends AbstractCheck { 
 private static final String FQ _ SUPPRESS _ WARNINGS = 
 " java . lang . " + SUPPRESS _ WARNINGS ; 
 
 - / * * The format string of the regexp . * / 
 - private String format = " ^ $ | ^ \ \ s + $ " ; 
 - 
 / * * The regexp to match against . * / 
 - private Pattern regexp = Pattern . compile ( format ) ; 
 + private Pattern format = Pattern . compile ( " ^ $ | ^ \ \ s + $ " ) ; 
 
 / * * 
 * Set the format for the specified regular expression . 
 * @ param pattern the new pattern 
 * / 
 public final void setFormat ( Pattern pattern ) { 
 - format = pattern . pattern ( ) ; 
 - regexp = pattern ; 
 + format = pattern ; 
 } 
 
 @ Override 
 @ @ - 242 , 7 + 238 , 7 @ @ public class SuppressWarningsCheck extends AbstractCheck { 
 * / 
 private void logMatch ( final int lineNo , 
 final int colNum , final String warningText ) { 
 - final Matcher matcher = regexp . matcher ( warningText ) ; 
 + final Matcher matcher = format . matcher ( warningText ) ; 
 if ( matcher . matches ( ) ) { 
 log ( lineNo , colNum , 
 MSG _ KEY _ SUPPRESSED _ WARNING _ NOT _ ALLOWED , warningText ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 index c81267b . . 769453f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 @ @ - 131 , 11 + 131 , 8 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 / * * Check methods and fields with only corresponding modifiers . * / 
 private List < Integer > memberModifiers ; 
 
 - / * * The format string of the regexp . * / 
 - private String format = " ^ ( . * [ . ] ) ? Abstract . * $ " ; 
 - 
 / * * The regexp to match against . * / 
 - private Pattern regexp = Pattern . compile ( format ) ; 
 + private Pattern format = Pattern . compile ( " ^ ( . * [ . ] ) ? Abstract . * $ " ) ; 
 
 / * * 
 * Controls whether to validate abstract class names . 
 @ @ - 154 , 8 + 151 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 * @ param pattern a pattern . 
 * / 
 public void setFormat ( Pattern pattern ) { 
 - format = pattern . pattern ( ) ; 
 - regexp = pattern ; 
 + format = pattern ; 
 } 
 
 / * * 
 @ @ - 338 , 7 + 334 , 7 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 | | illegalClassNames . contains ( shortName ) 
 | | validateAbstractClassNames 
 & & ! legalAbstractClassNames . contains ( className ) 
 - & & regexp . matcher ( className ) . find ( ) ; 
 + & & format . matcher ( className ) . find ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java 
 index a1160d4 . . 48545dc 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java 
 @ @ - 62 , 10 + 62 , 8 @ @ public final class ReturnCountCheck extends AbstractCheck { 
 / * * Stack of method contexts . * / 
 private final Deque < Context > contextStack = new ArrayDeque < > ( ) ; 
 
 - / * * The format string of the regexp . * / 
 - private String format = " ^ equals $ " ; 
 / * * The regexp to match against . * / 
 - private Pattern regexp = Pattern . compile ( format ) ; 
 + private Pattern format = Pattern . compile ( " ^ equals $ " ) ; 
 
 / * * Maximum allowed number of return statements . * / 
 private int max = 2 ; 
 @ @ - 104 , 8 + 102 , 7 @ @ public final class ReturnCountCheck extends AbstractCheck { 
 * @ param pattern a pattern . 
 * / 
 public void setFormat ( Pattern pattern ) { 
 - format = pattern . pattern ( ) ; 
 - regexp = pattern ; 
 + format = pattern ; 
 } 
 
 / * * 
 @ @ - 171 , 7 + 168 , 7 @ @ public final class ReturnCountCheck extends AbstractCheck { 
 private void visitMethodDef ( DetailAST ast ) { 
 contextStack . push ( context ) ; 
 final DetailAST methodNameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 - final boolean check = ! regexp . matcher ( methodNameAST . getText ( ) ) . find ( ) ; 
 + final boolean check = ! format . matcher ( methodNameAST . getText ( ) ) . find ( ) ; 
 context = new Context ( check ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 index 7a4888d . . b57ed9f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 @ @ - 56 , 10 + 56 , 8 @ @ public final class MutableExceptionCheck extends AbstractCheck { 
 private Pattern extendedClassNameFormat = Pattern . compile ( DEFAULT _ FORMAT ) ; 
 / * * Should we check current class or not . * / 
 private boolean checking ; 
 - / * * The format string of the regexp . * / 
 - private String format = DEFAULT _ FORMAT ; 
 / * * The regexp to match against . * / 
 - private Pattern regexp = Pattern . compile ( format ) ; 
 + private Pattern format = Pattern . compile ( DEFAULT _ FORMAT ) ; 
 
 / * * 
 * Sets the format of extended class name to the specified regular expression . 
 @ @ - 74 , 8 + 72 , 7 @ @ public final class MutableExceptionCheck extends AbstractCheck { 
 * @ param pattern the new pattern 
 * / 
 public void setFormat ( Pattern pattern ) { 
 - format = pattern . pattern ( ) ; 
 - regexp = pattern ; 
 + format = pattern ; 
 } 
 
 @ Override 
 @ @ - 151 , 7 + 148 , 7 @ @ public final class MutableExceptionCheck extends AbstractCheck { 
 * / 
 private boolean isNamedAsException ( DetailAST ast ) { 
 final String className = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 - return regexp . matcher ( className ) . find ( ) ; 
 + return format . matcher ( className ) . find ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 index 8707a93 . . 33f803b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 @ @ - 304 , 17 + 304 , 13 @ @ public class VisibilityModifierCheck 
 PROTECTED _ ACCESS _ MODIFIER , 
 } ; 
 
 - / * * 
 - * Pattern for public members that should be ignored . Note : 
 + / * * Regexp for public members that should be ignored . Note : 
 * Earlier versions of checkstyle used ^ f [ A - Z ] [ a - zA - Z0 - 9 ] * $ as the 
 * default to allow CMP for EJB 1 . 1 with the default settings . 
 * With EJB 2 . 0 it is not longer necessary to have public access 
 * for persistent fields . 
 * / 
 - private String publicMemberFormat = " ^ serialVersionUID $ " ; 
 - 
 - / * * Regexp for public members that should be ignored . * / 
 - private Pattern publicMemberPattern = Pattern . compile ( publicMemberFormat ) ; 
 + private Pattern publicMemberPattern = Pattern . compile ( " ^ serialVersionUID $ " ) ; 
 
 / * * List of ignore annotations short names . * / 
 private final List < String > ignoreAnnotationShortNames = 
 @ @ - 374 , 7 + 370 , 6 @ @ public class VisibilityModifierCheck 
 * / 
 public void setPublicMemberPattern ( Pattern pattern ) { 
 publicMemberPattern = pattern ; 
 - publicMemberFormat = pattern . pattern ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 index aaac2e9 . . 2c00c77 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 @ @ - 101 , 13 + 101 , 9 @ @ public class JavadocTypeCheck 
 / * * The visibility scope where Javadoc comments shouldn ' t be checked . * * / 
 private Scope excludeScope ; 
 / * * Compiled regexp to match author tag content . * * / 
 - private Pattern authorFormatPattern ; 
 + private Pattern authorFormat ; 
 / * * Compiled regexp to match version tag content . * * / 
 - private Pattern versionFormatPattern ; 
 - / * * Regexp to match author tag content . * / 
 - private String authorFormat ; 
 - / * * Regexp to match version tag content . * / 
 - private String versionFormat ; 
 + private Pattern versionFormat ; 
 / * * 
 * Controls whether to ignore errors when a method has type parameters but 
 * does not have matching param tags in the javadoc . Defaults to false . 
 @ @ - 137 , 8 + 133 , 7 @ @ public class JavadocTypeCheck 
 * @ param pattern a pattern . 
 * / 
 public void setAuthorFormat ( Pattern pattern ) { 
 - authorFormat = pattern . pattern ( ) ; 
 - authorFormatPattern = pattern ; 
 + authorFormat = pattern ; 
 } 
 
 / * * 
 @ @ - 146 , 8 + 141 , 7 @ @ public class JavadocTypeCheck 
 * @ param pattern a pattern . 
 * / 
 public void setVersionFormat ( Pattern pattern ) { 
 - versionFormat = pattern . pattern ( ) ; 
 - versionFormatPattern = pattern ; 
 + versionFormat = pattern ; 
 } 
 
 / * * 
 @ @ - 202 , 9 + 196 , 9 @ @ public class JavadocTypeCheck 
 if ( ScopeUtils . isOuterMostType ( ast ) ) { 
 / / don ' t check author / version for inner classes 
 checkTag ( lineNo , tags , JavadocTagInfo . AUTHOR . getName ( ) , 
 - authorFormatPattern , authorFormat ) ; 
 + authorFormat ) ; 
 checkTag ( lineNo , tags , JavadocTagInfo . VERSION . getName ( ) , 
 - versionFormatPattern , versionFormat ) ; 
 + versionFormat ) ; 
 } 
 
 final List < String > typeParamNames = 
 @ @ - 272 , 10 + 266 , 9 @ @ public class JavadocTypeCheck 
 * @ param tags tags from the Javadoc comment for the type definition . 
 * @ param tagName the required tag name . 
 * @ param formatPattern regexp for the tag value . 
 - * @ param format pattern for the tag value . 
 * / 
 private void checkTag ( int lineNo , List < JavadocTag > tags , String tagName , 
 - Pattern formatPattern , String format ) { 
 + Pattern formatPattern ) { 
 if ( formatPattern ! = null ) { 
 int tagCount = 0 ; 
 final String tagPrefix = " @ " ; 
 @ @ - 284 , 7 + 277 , 7 @ @ public class JavadocTypeCheck 
 if ( tag . getTagName ( ) . equals ( tagName ) ) { 
 tagCount + + ; 
 if ( ! formatPattern . matcher ( tag . getFirstArg ( ) ) . find ( ) ) { 
 - log ( lineNo , MSG _ TAG _ FORMAT , tagPrefix + tagName , format ) ; 
 + log ( lineNo , MSG _ TAG _ FORMAT , tagPrefix + tagName , formatPattern . pattern ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java 
 index 857561c . . ee61435 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java 
 @ @ - 87 , 12 + 87 , 10 @ @ public class WriteTagCheck 
 / * * Compiled regexp to match tag . * * / 
 private Pattern tagRegExp ; 
 / * * Compiled regexp to match tag content . * * / 
 - private Pattern tagFormatRegExp ; 
 + private Pattern tagFormat ; 
 
 / * * Regexp to match tag . * / 
 private String tag ; 
 - / * * Regexp to match tag content . * / 
 - private String tagFormat ; 
 / * * The severity level of found tag reports . * / 
 private SeverityLevel tagSeverityLevel = SeverityLevel . INFO ; 
 
 @ @ - 110 , 8 + 108 , 7 @ @ public class WriteTagCheck 
 * @ param pattern a { @ code String } value 
 * / 
 public void setTagFormat ( Pattern pattern ) { 
 - tagFormat = pattern . pattern ( ) ; 
 - tagFormatRegExp = pattern ; 
 + tagFormat = pattern ; 
 } 
 
 / * * 
 @ @ - 181 , 11 + 178 , 11 @ @ public class WriteTagCheck 
 tagCount + = 1 ; 
 final int contentStart = matcher . start ( 1 ) ; 
 final String content = commentValue . substring ( contentStart ) ; 
 - if ( tagFormatRegExp = = null | | tagFormatRegExp . matcher ( content ) . find ( ) ) { 
 + if ( tagFormat = = null | | tagFormat . matcher ( content ) . find ( ) ) { 
 logTag ( lineNo + i - comment . length , tag , content ) ; 
 } 
 else { 
 - log ( lineNo + i - comment . length , MSG _ TAG _ FORMAT , tag , tagFormat ) ; 
 + log ( lineNo + i - comment . length , MSG _ TAG _ FORMAT , tag , tagFormat . pattern ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java 
 index 3863a37 . . efaa203 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java 
 @ @ - 61 , 11 + 61 , 8 @ @ public final class AbstractClassNameCheck extends AbstractCheck { 
 / * * Whether to ignore checking the name . * / 
 private boolean ignoreName ; 
 
 - / * * The format string of the regexp . * / 
 - private String format = " ^ Abstract . + $ " ; 
 - 
 / * * The regexp to match against . * / 
 - private Pattern regexp = Pattern . compile ( format ) ; 
 + private Pattern format = Pattern . compile ( " ^ Abstract . + $ " ) ; 
 
 / * * 
 * Whether to ignore checking for the { @ code abstract } modifier . 
 @ @ - 88 , 8 + 85 , 7 @ @ public final class AbstractClassNameCheck extends AbstractCheck { 
 * @ param pattern the new pattern 
 * / 
 public void setFormat ( Pattern pattern ) { 
 - format = pattern . pattern ( ) ; 
 - regexp = pattern ; 
 + format = pattern ; 
 } 
 
 @ Override 
 @ @ - 123 , 7 + 119 , 7 @ @ public final class AbstractClassNameCheck extends AbstractCheck { 
 / / if class has abstract modifier 
 if ( ! ignoreName & & ! isMatchingClassName ( className ) ) { 
 log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 - MSG _ ILLEGAL _ ABSTRACT _ CLASS _ NAME , className , format ) ; 
 + MSG _ ILLEGAL _ ABSTRACT _ CLASS _ NAME , className , format . pattern ( ) ) ; 
 } 
 } 
 else if ( ! ignoreModifier & & isMatchingClassName ( className ) ) { 
 @ @ - 148 , 6 + 144 , 6 @ @ public final class AbstractClassNameCheck extends AbstractCheck { 
 * @ return true if class name matches format of abstract class names . 
 * / 
 private boolean isMatchingClassName ( String className ) { 
 - return regexp . matcher ( className ) . find ( ) ; 
 + return format . matcher ( className ) . find ( ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java 
 index d7d043c . . 2be818a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractNameCheck . java 
 @ @ - 38 , 18 + 38 , 15 @ @ public abstract class AbstractNameCheck 
 * / 
 public static final String MSG _ INVALID _ PATTERN = " name . invalidPattern " ; 
 
 - / * * The format string of the regexp . * / 
 - private String format ; 
 - 
 / * * The regexp to match against . * / 
 - private Pattern regexp ; 
 + private Pattern format ; 
 
 / * * 
 * Creates a new { @ code AbstractNameCheck } instance . 
 * @ param format format to check with 
 * / 
 protected AbstractNameCheck ( String format ) { 
 - setFormat ( CommonUtils . createPattern ( format ) ) ; 
 + this . format = CommonUtils . createPattern ( format ) ; 
 } 
 
 / * * 
 @ @ - 66 , 20 + 63 , 19 @ @ public abstract class AbstractNameCheck 
 * @ param pattern the new pattern 
 * / 
 public final void setFormat ( Pattern pattern ) { 
 - format = pattern . pattern ( ) ; 
 - regexp = pattern ; 
 + format = pattern ; 
 } 
 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 if ( mustCheckName ( ast ) ) { 
 final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 - if ( ! regexp . matcher ( nameAST . getText ( ) ) . find ( ) ) { 
 + if ( ! format . matcher ( nameAST . getText ( ) ) . find ( ) ) { 
 log ( nameAST . getLineNo ( ) , 
 nameAST . getColumnNo ( ) , 
 MSG _ INVALID _ PATTERN , 
 nameAST . getText ( ) , 
 - format ) ; 
 + format . pattern ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheck . java 
 index 9f4bba6 . . 5be5988 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheck . java 
 @ @ - 70 , 21 + 70 , 18 @ @ public class PackageNameCheck 
 * / 
 public static final String MSG _ KEY = " name . invalidPattern " ; 
 
 - / * * The format string of the regexp . * / 
 + / * * The regexp to match against . * / 
 / / Uppercase letters seem rather uncommon , but they ' re allowed in 
 / / http : / / docs . oracle . com / javase / specs / 
 / / second _ edition / html / packages . doc . html # 40169 
 - private String format = " ^ [ a - z ] + ( \ \ . [ a - zA - Z _ ] [ a - zA - Z0 - 9 _ ] * ) * $ " ; 
 - / * * The regexp to match against . * / 
 - private Pattern regexp = Pattern . compile ( format ) ; 
 + private Pattern format = Pattern . compile ( " ^ [ a - z ] + ( \ \ . [ a - zA - Z _ ] [ a - zA - Z0 - 9 _ ] * ) * $ " ) ; 
 
 / * * 
 * Set the format for the specified regular expression . 
 * @ param pattern the new pattern 
 * / 
 public void setFormat ( Pattern pattern ) { 
 - format = pattern . pattern ( ) ; 
 - regexp = pattern ; 
 + format = pattern ; 
 } 
 
 @ Override 
 @ @ - 106 , 12 + 103 , 12 @ @ public class PackageNameCheck 
 public void visitToken ( DetailAST ast ) { 
 final DetailAST nameAST = ast . getLastChild ( ) . getPreviousSibling ( ) ; 
 final FullIdent full = FullIdent . createFullIdent ( nameAST ) ; 
 - if ( ! regexp . matcher ( full . getText ( ) ) . find ( ) ) { 
 + if ( ! format . matcher ( full . getText ( ) ) . find ( ) ) { 
 log ( full . getLineNo ( ) , 
 full . getColumnNo ( ) , 
 MSG _ KEY , 
 full . getText ( ) , 
 - format ) ; 
 + format . pattern ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java 
 index 4f702b3 . . 8c4a4a7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheck . java 
 @ @ - 108 , 11 + 108 , 8 @ @ public class RegexpCheck extends AbstractCheck { 
 / * * Tracks number of errors . * / 
 private int errorCount ; 
 
 - / * * The format string of the regexp . * / 
 - private String format = " $ ^ " ; 
 - 
 / * * The regexp to match against . * / 
 - private Pattern regexp = Pattern . compile ( format , Pattern . MULTILINE ) ; 
 + private Pattern format = Pattern . compile ( " $ ^ " , Pattern . MULTILINE ) ; 
 
 / * * The matcher . * / 
 private Matcher matcher ; 
 @ @ - 170 , 8 + 167 , 7 @ @ public class RegexpCheck extends AbstractCheck { 
 * @ throws org . apache . commons . beanutils . ConversionException unable to parse format 
 * / 
 public final void setFormat ( Pattern pattern ) { 
 - format = pattern . pattern ( ) ; 
 - regexp = CommonUtils . createPattern ( format , Pattern . MULTILINE ) ; 
 + format = CommonUtils . createPattern ( pattern . pattern ( ) , Pattern . MULTILINE ) ; 
 } 
 
 @ Override 
 @ @ - 191 , 7 + 187 , 7 @ @ public class RegexpCheck extends AbstractCheck { 
 
 @ Override 
 public void beginTree ( DetailAST rootAST ) { 
 - matcher = regexp . matcher ( getFileContents ( ) . getText ( ) . getFullText ( ) ) ; 
 + matcher = format . matcher ( getFileContents ( ) . getText ( ) . getFullText ( ) ) ; 
 matchCount = 0 ; 
 errorCount = 0 ; 
 findMatch ( ) ; 
 @ @ - 271 , 7 + 267 , 7 @ @ public class RegexpCheck extends AbstractCheck { 
 String msg ; 
 
 if ( message . isEmpty ( ) ) { 
 - msg = format ; 
 + msg = format . pattern ( ) ; 
 } 
 else { 
 msg = message ;
