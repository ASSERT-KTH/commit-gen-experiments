BLEU SCORE: 0.013139808552042212

TEST MSG: Issue # 2661 : Configure checkstyle maven plugin to validate only ' src ' folder
GENERATED MSG: turn on validation of xdocs

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index b4bc684 . . edc60d6 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 468 , 6 + 468 , 7 @ @ <nl> < logViolationsToConsole > true < / logViolationsToConsole > <nl> < maxAllowedViolations > 0 < / maxAllowedViolations > <nl> < violationSeverity > error < / violationSeverity > <nl> + < includes > $ { project . basedir } / src < / includes > <nl> < / configuration > <nl> < executions > <nl> < execution >
NEAREST DIFF (one line): diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index a101ea9 . . 873b921 100755 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 31 , 6 + 31 , 9 @ @ <nl> < li > <nl> Added correct license information for referenced source files ( bug # 2778850 ) . <nl> < / li > <nl> + < li > <nl> + Updated documentation for writing checks ( bug # 2783451 ) . <nl> + < / li > <nl> < / ul > <nl> < p > Notes : < / p > <nl> < ul > <nl> diff - - git a / src / xdocs / writingchecks . xml b / src / xdocs / writingchecks . xml <nl> index aa77ba7 . . 58e0f64 100644 <nl> - - - a / src / xdocs / writingchecks . xml <nl> + + + b / src / xdocs / writingchecks . xml <nl> @ @ - 235 , 13 + 235 , 16 @ @ import com . puppycrawl . tools . checkstyle . api . * ; <nl> <nl> public class MethodLimitCheck extends Check <nl> { <nl> - private int max = 30 ; <nl> + private static final int DEFAULT _ MAX = 30 ; <nl> + private int max = DEFAULT _ MAX ; <nl> <nl> + @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> { <nl> return new int [ ] { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; <nl> } <nl> <nl> + @ Override <nl> public void visitToken ( DetailAST ast ) <nl> { <nl> / / find the OBJBLOCK node below the CLASS _ DEF / INTERFACE _ DEF <nl> @ @ - 250 , 9 + 253 , 9 @ @ public class MethodLimitCheck extends Check <nl> / / that are METHOD _ DEFS <nl> int methodDefs = objBlock . getChildCount ( TokenTypes . METHOD _ DEF ) ; <nl> / / report error if limit is reached <nl> - if ( methodDefs > max ) { <nl> + if ( methodDefs > this . max ) { <nl> log ( ast . getLineNo ( ) , <nl> - " too many methods , only " + max + " are allowed " ) ; <nl> + " too many methods , only " + this . max + " are allowed " ) ; <nl> } <nl> } <nl> } <nl> @ @ - 388 , 8 + 391 , 8 @ @ public class MethodLimitCheck extends Check <nl> < source > <nl> & lt ; ? xml version = & quot ; 1 . 0 & quot ; ? & gt ; <nl> & lt ; ! DOCTYPE module PUBLIC <nl> - & quot ; - / / Puppy Crawl / / DTD Check Configuration 1 . 2 / / EN & quot ; <nl> - & quot ; http : / / www . puppycrawl . com / dtds / configuration _ 1 _ 2 . dtd & quot ; & gt ; <nl> + & quot ; - / / Puppy Crawl / / DTD Check Configuration 1 . 3 / / EN & quot ; <nl> + & quot ; http : / / www . puppycrawl . com / dtds / configuration _ 1 _ 3 . dtd & quot ; & gt ; <nl> & lt ; module name = & quot ; Checker & quot ; & gt ; <nl> & lt ; module name = & quot ; TreeWalker & quot ; & gt ; <nl> & lt ; ! - - your standard Checks that come with Checkstyle - - & gt ; <nl> @ @ - 447 , 7 + 450 , 7 @ @ java - classpath mycompanychecks . jar : checkstyle - all - @ CHECKSTYLE _ VERSION @ . jar \ <nl> < / p > <nl> < ul > <nl> < li > You cannot determine the type of an expression . < / li > <nl> - < li > You cannot see the content of other files . < / li > <nl> + < li > You cannot see the content of other files . ( although you can save processed files for use later ) < / li > <nl> < / ul > <nl> < p > <nl> This means that you cannot implement some of the code inspection <nl> @ @ - 465 , 46 + 468 , 47 @ @ java - classpath mycompanychecks . jar : checkstyle - all - @ CHECKSTYLE _ VERSION @ . jar \ <nl> < p > Writing a FileSetCheck is pretty straightforward : Just <nl> inherit from < a <nl> href = " api / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . html " > AbstractFileSetCheck < / a > <nl> - and implement the < a <nl> - href = " api / com / puppycrawl / tools / checkstyle / api / FileSetCheck . html # process ( java . io . File [ ] ) " > < span <nl> - class = " code " > process ( File [ ] files ) < / span > < / a > method and you & # 39 ; re <nl> + and override the abstract < a <nl> + href = " api / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . html # processFiltered ( java . io . File , % 20java . util . List ) " > < span <nl> + class = " code " > processFiltered ( java . io . File , java . util . List ) < / span > < / a > method and you & # 39 ; re <nl> done . A very simple example could fire an error if the number of files <nl> - that are passed in exceeds a certain limit . Here is a FileSetCheck that does just that : < / p > <nl> + exceeds a certain limit . Here is a FileSetCheck that does just that : < / p > <nl> <nl> < source > <nl> package com . mycompany . checks ; <nl> import java . io . File ; <nl> + import java . util . List ; <nl> import com . puppycrawl . tools . checkstyle . api . * ; <nl> <nl> - public class LimitImplementationFiles <nl> - extends AbstractFileSetCheck <nl> + public class LimitImplementationFiles extends AbstractFileSetCheck <nl> { <nl> - private int max = 100 ; <nl> + private static final int DEFAULT _ MAX = 100 ; <nl> + private int fileCount ; <nl> + private int max = DEFAULT _ MAX ; <nl> public void setMax ( int aMax ) <nl> { <nl> - max = aMax ; <nl> + this . max = aMax ; <nl> } <nl> - public void process ( File [ ] files ) <nl> + <nl> + @ Override <nl> + public void beginProcessing ( String aCharset ) <nl> { <nl> - if ( files ! = null & amp ; & amp ; files . length > max ) { <nl> - / / figure out the file that contains the error <nl> - final String path = files [ max ] . getPath ( ) ; <nl> - / / message collector is used to collect error messages , <nl> - / / needs to be reset before starting to collect error messages <nl> - / / for a file . <nl> - getMessageCollector ( ) . reset ( ) ; <nl> - / / message dispatcher is used to fire AuditEvents <nl> - MessageDispatcher dispatcher = getMessageDispatcher ( ) ; <nl> - / / signal start of file to AuditListeners <nl> - dispatcher . fireFileStarted ( path ) ; <nl> + super . beginProcessing ( aCharset ) ; <nl> + <nl> + / / reset the file count <nl> + this . fileCount = 0 ; <nl> + } <nl> + <nl> + @ Override <nl> + public void processFiltered ( File file , List & lt ; String & gt ; aLines ) <nl> + { <nl> + this . fileCount + + ; <nl> + <nl> + if ( this . fileCount > this . max ) { <nl> / / log the message <nl> - log ( 0 , " max . files . exceeded " , new Integer ( max ) ) ; <nl> + log ( 0 , " max . files . exceeded " , Integer . valueOf ( this . max ) ) ; <nl> / / you can call log ( ) multiple times to flag multiple <nl> / / errors in the same file <nl> - / / fire the errors for this file to the AuditListeners <nl> - fireErrors ( path ) ; <nl> - / / signal end of file to AuditListeners <nl> - dispatcher . fireFileFinished ( path ) ; <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index b4bc684 . . edc60d6 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 468 , 6 + 468 , 7 @ @ 
 < logViolationsToConsole > true < / logViolationsToConsole > 
 < maxAllowedViolations > 0 < / maxAllowedViolations > 
 < violationSeverity > error < / violationSeverity > 
 + < includes > $ { project . basedir } / src < / includes > 
 < / configuration > 
 < executions > 
 < execution >

NEAREST DIFF:
diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index a101ea9 . . 873b921 100755 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 31 , 6 + 31 , 9 @ @ 
 < li > 
 Added correct license information for referenced source files ( bug # 2778850 ) . 
 < / li > 
 + < li > 
 + Updated documentation for writing checks ( bug # 2783451 ) . 
 + < / li > 
 < / ul > 
 < p > Notes : < / p > 
 < ul > 
 diff - - git a / src / xdocs / writingchecks . xml b / src / xdocs / writingchecks . xml 
 index aa77ba7 . . 58e0f64 100644 
 - - - a / src / xdocs / writingchecks . xml 
 + + + b / src / xdocs / writingchecks . xml 
 @ @ - 235 , 13 + 235 , 16 @ @ import com . puppycrawl . tools . checkstyle . api . * ; 
 
 public class MethodLimitCheck extends Check 
 { 
 - private int max = 30 ; 
 + private static final int DEFAULT _ MAX = 30 ; 
 + private int max = DEFAULT _ MAX ; 
 
 + @ Override 
 public int [ ] getDefaultTokens ( ) 
 { 
 return new int [ ] { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; 
 } 
 
 + @ Override 
 public void visitToken ( DetailAST ast ) 
 { 
 / / find the OBJBLOCK node below the CLASS _ DEF / INTERFACE _ DEF 
 @ @ - 250 , 9 + 253 , 9 @ @ public class MethodLimitCheck extends Check 
 / / that are METHOD _ DEFS 
 int methodDefs = objBlock . getChildCount ( TokenTypes . METHOD _ DEF ) ; 
 / / report error if limit is reached 
 - if ( methodDefs > max ) { 
 + if ( methodDefs > this . max ) { 
 log ( ast . getLineNo ( ) , 
 - " too many methods , only " + max + " are allowed " ) ; 
 + " too many methods , only " + this . max + " are allowed " ) ; 
 } 
 } 
 } 
 @ @ - 388 , 8 + 391 , 8 @ @ public class MethodLimitCheck extends Check 
 < source > 
 & lt ; ? xml version = & quot ; 1 . 0 & quot ; ? & gt ; 
 & lt ; ! DOCTYPE module PUBLIC 
 - & quot ; - / / Puppy Crawl / / DTD Check Configuration 1 . 2 / / EN & quot ; 
 - & quot ; http : / / www . puppycrawl . com / dtds / configuration _ 1 _ 2 . dtd & quot ; & gt ; 
 + & quot ; - / / Puppy Crawl / / DTD Check Configuration 1 . 3 / / EN & quot ; 
 + & quot ; http : / / www . puppycrawl . com / dtds / configuration _ 1 _ 3 . dtd & quot ; & gt ; 
 & lt ; module name = & quot ; Checker & quot ; & gt ; 
 & lt ; module name = & quot ; TreeWalker & quot ; & gt ; 
 & lt ; ! - - your standard Checks that come with Checkstyle - - & gt ; 
 @ @ - 447 , 7 + 450 , 7 @ @ java - classpath mycompanychecks . jar : checkstyle - all - @ CHECKSTYLE _ VERSION @ . jar \ 
 < / p > 
 < ul > 
 < li > You cannot determine the type of an expression . < / li > 
 - < li > You cannot see the content of other files . < / li > 
 + < li > You cannot see the content of other files . ( although you can save processed files for use later ) < / li > 
 < / ul > 
 < p > 
 This means that you cannot implement some of the code inspection 
 @ @ - 465 , 46 + 468 , 47 @ @ java - classpath mycompanychecks . jar : checkstyle - all - @ CHECKSTYLE _ VERSION @ . jar \ 
 < p > Writing a FileSetCheck is pretty straightforward : Just 
 inherit from < a 
 href = " api / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . html " > AbstractFileSetCheck < / a > 
 - and implement the < a 
 - href = " api / com / puppycrawl / tools / checkstyle / api / FileSetCheck . html # process ( java . io . File [ ] ) " > < span 
 - class = " code " > process ( File [ ] files ) < / span > < / a > method and you & # 39 ; re 
 + and override the abstract < a 
 + href = " api / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . html # processFiltered ( java . io . File , % 20java . util . List ) " > < span 
 + class = " code " > processFiltered ( java . io . File , java . util . List ) < / span > < / a > method and you & # 39 ; re 
 done . A very simple example could fire an error if the number of files 
 - that are passed in exceeds a certain limit . Here is a FileSetCheck that does just that : < / p > 
 + exceeds a certain limit . Here is a FileSetCheck that does just that : < / p > 
 
 < source > 
 package com . mycompany . checks ; 
 import java . io . File ; 
 + import java . util . List ; 
 import com . puppycrawl . tools . checkstyle . api . * ; 
 
 - public class LimitImplementationFiles 
 - extends AbstractFileSetCheck 
 + public class LimitImplementationFiles extends AbstractFileSetCheck 
 { 
 - private int max = 100 ; 
 + private static final int DEFAULT _ MAX = 100 ; 
 + private int fileCount ; 
 + private int max = DEFAULT _ MAX ; 
 public void setMax ( int aMax ) 
 { 
 - max = aMax ; 
 + this . max = aMax ; 
 } 
 - public void process ( File [ ] files ) 
 + 
 + @ Override 
 + public void beginProcessing ( String aCharset ) 
 { 
 - if ( files ! = null & amp ; & amp ; files . length > max ) { 
 - / / figure out the file that contains the error 
 - final String path = files [ max ] . getPath ( ) ; 
 - / / message collector is used to collect error messages , 
 - / / needs to be reset before starting to collect error messages 
 - / / for a file . 
 - getMessageCollector ( ) . reset ( ) ; 
 - / / message dispatcher is used to fire AuditEvents 
 - MessageDispatcher dispatcher = getMessageDispatcher ( ) ; 
 - / / signal start of file to AuditListeners 
 - dispatcher . fireFileStarted ( path ) ; 
 + super . beginProcessing ( aCharset ) ; 
 + 
 + / / reset the file count 
 + this . fileCount = 0 ; 
 + } 
 + 
 + @ Override 
 + public void processFiltered ( File file , List & lt ; String & gt ; aLines ) 
 + { 
 + this . fileCount + + ; 
 + 
 + if ( this . fileCount > this . max ) { 
 / / log the message 
 - log ( 0 , " max . files . exceeded " , new Integer ( max ) ) ; 
 + log ( 0 , " max . files . exceeded " , Integer . valueOf ( this . max ) ) ; 
 / / you can call log ( ) multiple times to flag multiple 
 / / errors in the same file 
 - / / fire the errors for this file to the AuditListeners 
 - fireErrors ( path ) ; 
 - / / signal end of file to AuditListeners 
 - dispatcher . fireFileFinished ( path ) ; 
 } 
 } 
 }
