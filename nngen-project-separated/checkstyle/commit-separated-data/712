BLEU SCORE: 0.018751197657869215

TEST MSG: Issue # 4450 : substitude mock tests with functional tests
GENERATED MSG: Issue # 4393 : ASTs to be generated and walked only when there are corresponding type of checks . No parsing if no checks are specified

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index 8a1f246 . . ec14b42 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 23 , 15 + 23 , 6 @ @ import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MS <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> - import static org . mockito . Mockito . any ; <nl> - import static org . mockito . Mockito . never ; <nl> - import static org . mockito . Mockito . times ; <nl> - import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> - import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> - import static org . powermock . api . mockito . PowerMockito . spy ; <nl> - import static org . powermock . api . mockito . PowerMockito . verifyPrivate ; <nl> - import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> - import static org . powermock . api . mockito . PowerMockito . when ; <nl> <nl> import java . io . BufferedWriter ; <nl> import java . io . File ; <nl> @ @ - 40 , 6 + 31 , 7 @ @ import java . io . OutputStreamWriter ; <nl> import java . io . Writer ; <nl> import java . nio . charset . StandardCharsets ; <nl> import java . util . ArrayList ; <nl> + import java . util . Collection ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> import java . util . regex . Matcher ; <nl> @ @ - 48 , 16 + 40 , 12 @ @ import java . util . regex . Pattern ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . TemporaryFolder ; <nl> - import org . junit . runner . RunWith ; <nl> + import org . mockito . internal . util . Checks ; <nl> import org . mockito . internal . util . reflection . Whitebox ; <nl> - import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> - import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Context ; <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . indentation . CommentsIndentationCheck ; <nl> @ @ - 66 , 8 + 54 , 6 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . naming . TypeNameCheck ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> - @ RunWith ( PowerMockRunner . class ) <nl> - @ PrepareForTest ( TreeWalker . class ) <nl> public class TreeWalkerTest extends BaseCheckTestSupport { <nl> @ Rule <nl> public final TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ; <nl> @ @ - 282 , 85 + 268 , 96 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> } <nl> } <nl> <nl> + @ SuppressWarnings ( " unchecked " ) <nl> @ Test <nl> public void testBehaviourWithZeroChecks ( ) throws Exception { <nl> - final String errMsg = " No checks - > No parsing " ; <nl> - final TreeWalker treeWalkerSpy = spy ( new TreeWalker ( ) ) ; <nl> - final Class < ? > classAstState = <nl> - Class . forName ( " com . puppycrawl . tools . checkstyle . TreeWalker $ AstState " ) ; <nl> - mockStatic ( TreeWalker . class ) ; <nl> - when ( TreeWalker . parse ( any ( FileContents . class ) ) ) <nl> - . thenThrow ( new IllegalStateException ( errMsg ) ) ; <nl> - doNothing ( ) . when ( treeWalkerSpy , " walk " , <nl> - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; <nl> - treeWalkerSpy . processFiltered ( temporaryFolder . newFile ( " file . java " ) , new ArrayList < > ( ) ) ; <nl> - verifyPrivate ( treeWalkerSpy , never ( ) ) . invoke ( " walk " , <nl> - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; <nl> + final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> + final PackageObjectFactory factory = new PackageObjectFactory ( <nl> + new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + treeWalker . setModuleFactory ( factory ) ; <nl> + / / create file that should throw exception <nl> + final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> + final List < String > lines = new ArrayList < > ( ) ; <nl> + lines . add ( " class a % $ # { } " ) ; <nl> + <nl> + treeWalker . processFiltered ( file , lines ) ; <nl> + final Collection < Checks > checks = <nl> + ( Collection < Checks > ) Whitebox . getInternalState ( treeWalker , " ordinaryChecks " ) ; <nl> + assertTrue ( " No checks - > No parsing " , checks . isEmpty ( ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testBehaviourWithOnlyOrdinaryChecks ( ) throws Exception { <nl> - final String errMsg = " No comment processing checks - > " <nl> - + " No calls to TreeWalker . appendHiddenCommentNodes " ; <nl> - final TreeWalker treeWalkerSpy = spy ( new TreeWalker ( ) ) ; <nl> - final Class < ? > classAstState = <nl> - Class . forName ( " com . puppycrawl . tools . checkstyle . TreeWalker $ AstState " ) ; <nl> + final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> + treeWalker . configure ( createCheckConfig ( TypeNameCheck . class ) ) ; <nl> final PackageObjectFactory factory = new PackageObjectFactory ( <nl> new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - treeWalkerSpy . configure ( createCheckConfig ( TypeNameCheck . class ) ) ; <nl> - treeWalkerSpy . setModuleFactory ( factory ) ; <nl> - treeWalkerSpy . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; <nl> - spy ( TreeWalker . class ) ; <nl> - doNothing ( ) . when ( treeWalkerSpy , " walk " , <nl> - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; <nl> - when ( TreeWalker . class , " appendHiddenCommentNodes " , any ( DetailAST . class ) ) <nl> - . thenThrow ( new IllegalStateException ( errMsg ) ) ; <nl> - treeWalkerSpy . processFiltered ( temporaryFolder . newFile ( " file . java " ) , new ArrayList < > ( ) ) ; <nl> - verifyPrivate ( treeWalkerSpy , times ( 1 ) ) . invoke ( " walk " , <nl> - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; <nl> + treeWalker . setModuleFactory ( factory ) ; <nl> + treeWalker . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; <nl> + final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> + final List < String > lines = new ArrayList < > ( ) ; <nl> + lines . add ( " class a % $ # { } " ) ; <nl> + <nl> + try { <nl> + treeWalker . processFiltered ( file , lines ) ; <nl> + fail ( " file is not compilable , exception is expected " ) ; <nl> + } <nl> + catch ( CheckstyleException exception ) { <nl> + final String message = <nl> + " TokenStreamRecognitionException occurred during the analysis of file " ; <nl> + assertTrue ( " Error message is unexpected " , <nl> + exception . getMessage ( ) . contains ( message ) ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> public void testBehaviourWithOnlyCommentChecks ( ) throws Exception { <nl> - final TreeWalker treeWalkerSpy = spy ( new TreeWalker ( ) ) ; <nl> - final Class < ? > classAstState = <nl> - Class . forName ( " com . puppycrawl . tools . checkstyle . TreeWalker $ AstState " ) ; <nl> + final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> + treeWalker . configure ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; <nl> final PackageObjectFactory factory = new PackageObjectFactory ( <nl> new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - treeWalkerSpy . configure ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; <nl> - treeWalkerSpy . setModuleFactory ( factory ) ; <nl> - treeWalkerSpy . setupChild ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; <nl> - spy ( TreeWalker . class ) ; <nl> - doNothing ( ) . when ( treeWalkerSpy , " walk " , <nl> - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; <nl> - treeWalkerSpy . processFiltered ( temporaryFolder . newFile ( " file . java " ) , new ArrayList < > ( ) ) ; <nl> - verifyPrivate ( TreeWalker . class , times ( 1 ) ) <nl> - . invoke ( " appendHiddenCommentNodes " , any ( DetailAST . class ) ) ; <nl> - verifyPrivate ( treeWalkerSpy , times ( 1 ) ) . invoke ( " walk " , <nl> - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; <nl> + treeWalker . setModuleFactory ( factory ) ; <nl> + treeWalker . setupChild ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; <nl> + final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> + final List < String > lines = new ArrayList < > ( ) ; <nl> + lines . add ( " class a % $ # { } " ) ; <nl> + <nl> + try { <nl> + treeWalker . processFiltered ( file , lines ) ; <nl> + fail ( " file is not compilable , exception is expected " ) ; <nl> + } <nl> + catch ( CheckstyleException exception ) { <nl> + final String message = <nl> + " TokenStreamRecognitionException occurred during the analysis of file " ; <nl> + assertTrue ( " Error message is unexpected " , <nl> + exception . getMessage ( ) . contains ( message ) ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> public void testBehaviourWithOrdinaryAndCommentChecks ( ) throws Exception { <nl> - final TreeWalker treeWalkerSpy = spy ( new TreeWalker ( ) ) ; <nl> - final Class < ? > classAstState = <nl> - Class . forName ( " com . puppycrawl . tools . checkstyle . TreeWalker $ AstState " ) ; <nl> + final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> + treeWalker . configure ( createCheckConfig ( TypeNameCheck . class ) ) ; <nl> + treeWalker . configure ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; <nl> final PackageObjectFactory factory = new PackageObjectFactory ( <nl> new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - treeWalkerSpy . configure ( new DefaultConfiguration ( " TreeWalkerTest " ) ) ; <nl> - treeWalkerSpy . setModuleFactory ( factory ) ; <nl> - treeWalkerSpy . setupChild ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; <nl> - treeWalkerSpy . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; <nl> - spy ( TreeWalker . class ) ; <nl> - doNothing ( ) . when ( treeWalkerSpy , " walk " , <nl> - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; <nl> - treeWalkerSpy . processFiltered ( temporaryFolder . newFile ( " file . java " ) , new ArrayList < > ( ) ) ; <nl> - verifyPrivate ( TreeWalker . class , times ( 1 ) ) <nl> - . invoke ( " appendHiddenCommentNodes " , any ( DetailAST . class ) ) ; <nl> - verifyPrivate ( treeWalkerSpy , times ( 2 ) ) . invoke ( " walk " , <nl> - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; <nl> - verifyStatic ( times ( 1 ) ) ; <nl> - TreeWalker . parse ( any ( FileContents . class ) ) ; <nl> + treeWalker . setModuleFactory ( factory ) ; <nl> + treeWalker . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; <nl> + treeWalker . setupChild ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; <nl> + final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> + final List < String > lines = new ArrayList < > ( ) ; <nl> + lines . add ( " class a % $ # { } " ) ; <nl> + <nl> + try { <nl> + treeWalker . processFiltered ( file , lines ) ; <nl> + fail ( " file is not compilable , exception is expected " ) ; <nl> + } <nl> + catch ( CheckstyleException exception ) { <nl> + final String message = <nl> + " TokenStreamRecognitionException occurred during the analysis of file " ; <nl> + assertTrue ( " Error message is unexpected " , <nl> + exception . getMessage ( ) . contains ( message ) ) ; <nl> + } <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java <nl> index 8c7278e . . 971f916 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java <nl> @ @ - 36 , 13 + 36 , 17 @ @ public class PackageAnnotationCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " annotation " + File . separator + filename ) ; <nl> + + " annotation " + File . separator <nl> + + " packageannotation " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Override <nl> protected String getNonCompilablePath ( String filename ) throws IOException { <nl> return super . getNonCompilablePath ( " checks " + File . separator <nl> - + " annotation " + File . separator + filename ) ; <nl> + + " annotation " + File . separator <nl> + + " packageannotation " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / InputPackageAnnotation2 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / InputPackageAnnotation2 . java <nl> deleted file mode 100644 <nl> index 815d8b0 . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / InputPackageAnnotation2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 6 + 0 , 0 @ @ <nl> - @ Deprecated / / non - compilable annotation <nl> - package com . puppycrawl . tools . checkstyle . checks . annotation ; <nl> - <nl> - public class InputPackageAnnotation2 { <nl> - 	 <nl> - } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / package - info . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / package - info . java <nl> deleted file mode 100644 <nl> index dcc0283 . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / package - info . java <nl> + + + / dev / null <nl> @ @ - 1 , 3 + 0 , 0 @ @ <nl> - @ Deprecated <nl> - package com . puppycrawl . tools . checkstyle . checks . annotation ; <nl> - <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / InputPackageAnnotation2 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / InputPackageAnnotation2 . java <nl> new file mode 100644 <nl> index 0000000 . . 3c79b95 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / InputPackageAnnotation2 . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + @ Deprecated / / non - compilable annotation <nl> + package com . puppycrawl . tools . checkstyle . checks . annotation . packageannotation ; <nl> + <nl> + public class InputPackageAnnotation2 { <nl> + 	 <nl> + } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / package - info . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / package - info . java <nl> new file mode 100644 <nl> index 0000000 . . fb08771 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / package - info . java <nl> @ @ - 0 , 0 + 1 , 3 @ @ <nl> + @ Deprecated <nl> + package com . puppycrawl . tools . checkstyle . checks . annotation . packageannotation ; <nl> + <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / annotation / InputPackageAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / annotation / InputPackageAnnotation . java <nl> deleted file mode 100644 <nl> index 100ac8d . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / annotation / InputPackageAnnotation . java <nl> + + + / dev / null <nl> @ @ - 1 , 6 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . annotation ; <nl> - <nl> - @ Deprecated <nl> - public class InputPackageAnnotation { <nl> - 	 <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / InputPackageAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / InputPackageAnnotation . java <nl> new file mode 100644 <nl> index 0000000 . . 3b6aaad <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / InputPackageAnnotation . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . annotation . packageannotation ; <nl> + <nl> + @ Deprecated <nl> + public class InputPackageAnnotation { <nl> + 	 <nl> + }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index 8a1f246 . . ec14b42 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 23 , 15 + 23 , 6 @ @ import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MS 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 - import static org . mockito . Mockito . any ; 
 - import static org . mockito . Mockito . never ; 
 - import static org . mockito . Mockito . times ; 
 - import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 - import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 - import static org . powermock . api . mockito . PowerMockito . spy ; 
 - import static org . powermock . api . mockito . PowerMockito . verifyPrivate ; 
 - import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 - import static org . powermock . api . mockito . PowerMockito . when ; 
 
 import java . io . BufferedWriter ; 
 import java . io . File ; 
 @ @ - 40 , 6 + 31 , 7 @ @ import java . io . OutputStreamWriter ; 
 import java . io . Writer ; 
 import java . nio . charset . StandardCharsets ; 
 import java . util . ArrayList ; 
 + import java . util . Collection ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . regex . Matcher ; 
 @ @ - 48 , 16 + 40 , 12 @ @ import java . util . regex . Pattern ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . TemporaryFolder ; 
 - import org . junit . runner . RunWith ; 
 + import org . mockito . internal . util . Checks ; 
 import org . mockito . internal . util . reflection . Whitebox ; 
 - import org . powermock . core . classloader . annotations . PrepareForTest ; 
 - import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Context ; 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . indentation . CommentsIndentationCheck ; 
 @ @ - 66 , 8 + 54 , 6 @ @ import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . naming . TypeNameCheck ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 - @ RunWith ( PowerMockRunner . class ) 
 - @ PrepareForTest ( TreeWalker . class ) 
 public class TreeWalkerTest extends BaseCheckTestSupport { 
 @ Rule 
 public final TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ; 
 @ @ - 282 , 85 + 268 , 96 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 } 
 } 
 
 + @ SuppressWarnings ( " unchecked " ) 
 @ Test 
 public void testBehaviourWithZeroChecks ( ) throws Exception { 
 - final String errMsg = " No checks - > No parsing " ; 
 - final TreeWalker treeWalkerSpy = spy ( new TreeWalker ( ) ) ; 
 - final Class < ? > classAstState = 
 - Class . forName ( " com . puppycrawl . tools . checkstyle . TreeWalker $ AstState " ) ; 
 - mockStatic ( TreeWalker . class ) ; 
 - when ( TreeWalker . parse ( any ( FileContents . class ) ) ) 
 - . thenThrow ( new IllegalStateException ( errMsg ) ) ; 
 - doNothing ( ) . when ( treeWalkerSpy , " walk " , 
 - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; 
 - treeWalkerSpy . processFiltered ( temporaryFolder . newFile ( " file . java " ) , new ArrayList < > ( ) ) ; 
 - verifyPrivate ( treeWalkerSpy , never ( ) ) . invoke ( " walk " , 
 - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; 
 + final TreeWalker treeWalker = new TreeWalker ( ) ; 
 + final PackageObjectFactory factory = new PackageObjectFactory ( 
 + new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + treeWalker . setModuleFactory ( factory ) ; 
 + / / create file that should throw exception 
 + final File file = temporaryFolder . newFile ( " file . java " ) ; 
 + final List < String > lines = new ArrayList < > ( ) ; 
 + lines . add ( " class a % $ # { } " ) ; 
 + 
 + treeWalker . processFiltered ( file , lines ) ; 
 + final Collection < Checks > checks = 
 + ( Collection < Checks > ) Whitebox . getInternalState ( treeWalker , " ordinaryChecks " ) ; 
 + assertTrue ( " No checks - > No parsing " , checks . isEmpty ( ) ) ; 
 } 
 
 @ Test 
 public void testBehaviourWithOnlyOrdinaryChecks ( ) throws Exception { 
 - final String errMsg = " No comment processing checks - > " 
 - + " No calls to TreeWalker . appendHiddenCommentNodes " ; 
 - final TreeWalker treeWalkerSpy = spy ( new TreeWalker ( ) ) ; 
 - final Class < ? > classAstState = 
 - Class . forName ( " com . puppycrawl . tools . checkstyle . TreeWalker $ AstState " ) ; 
 + final TreeWalker treeWalker = new TreeWalker ( ) ; 
 + treeWalker . configure ( createCheckConfig ( TypeNameCheck . class ) ) ; 
 final PackageObjectFactory factory = new PackageObjectFactory ( 
 new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - treeWalkerSpy . configure ( createCheckConfig ( TypeNameCheck . class ) ) ; 
 - treeWalkerSpy . setModuleFactory ( factory ) ; 
 - treeWalkerSpy . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; 
 - spy ( TreeWalker . class ) ; 
 - doNothing ( ) . when ( treeWalkerSpy , " walk " , 
 - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; 
 - when ( TreeWalker . class , " appendHiddenCommentNodes " , any ( DetailAST . class ) ) 
 - . thenThrow ( new IllegalStateException ( errMsg ) ) ; 
 - treeWalkerSpy . processFiltered ( temporaryFolder . newFile ( " file . java " ) , new ArrayList < > ( ) ) ; 
 - verifyPrivate ( treeWalkerSpy , times ( 1 ) ) . invoke ( " walk " , 
 - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; 
 + treeWalker . setModuleFactory ( factory ) ; 
 + treeWalker . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; 
 + final File file = temporaryFolder . newFile ( " file . java " ) ; 
 + final List < String > lines = new ArrayList < > ( ) ; 
 + lines . add ( " class a % $ # { } " ) ; 
 + 
 + try { 
 + treeWalker . processFiltered ( file , lines ) ; 
 + fail ( " file is not compilable , exception is expected " ) ; 
 + } 
 + catch ( CheckstyleException exception ) { 
 + final String message = 
 + " TokenStreamRecognitionException occurred during the analysis of file " ; 
 + assertTrue ( " Error message is unexpected " , 
 + exception . getMessage ( ) . contains ( message ) ) ; 
 + } 
 } 
 
 @ Test 
 public void testBehaviourWithOnlyCommentChecks ( ) throws Exception { 
 - final TreeWalker treeWalkerSpy = spy ( new TreeWalker ( ) ) ; 
 - final Class < ? > classAstState = 
 - Class . forName ( " com . puppycrawl . tools . checkstyle . TreeWalker $ AstState " ) ; 
 + final TreeWalker treeWalker = new TreeWalker ( ) ; 
 + treeWalker . configure ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; 
 final PackageObjectFactory factory = new PackageObjectFactory ( 
 new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - treeWalkerSpy . configure ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; 
 - treeWalkerSpy . setModuleFactory ( factory ) ; 
 - treeWalkerSpy . setupChild ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; 
 - spy ( TreeWalker . class ) ; 
 - doNothing ( ) . when ( treeWalkerSpy , " walk " , 
 - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; 
 - treeWalkerSpy . processFiltered ( temporaryFolder . newFile ( " file . java " ) , new ArrayList < > ( ) ) ; 
 - verifyPrivate ( TreeWalker . class , times ( 1 ) ) 
 - . invoke ( " appendHiddenCommentNodes " , any ( DetailAST . class ) ) ; 
 - verifyPrivate ( treeWalkerSpy , times ( 1 ) ) . invoke ( " walk " , 
 - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; 
 + treeWalker . setModuleFactory ( factory ) ; 
 + treeWalker . setupChild ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; 
 + final File file = temporaryFolder . newFile ( " file . java " ) ; 
 + final List < String > lines = new ArrayList < > ( ) ; 
 + lines . add ( " class a % $ # { } " ) ; 
 + 
 + try { 
 + treeWalker . processFiltered ( file , lines ) ; 
 + fail ( " file is not compilable , exception is expected " ) ; 
 + } 
 + catch ( CheckstyleException exception ) { 
 + final String message = 
 + " TokenStreamRecognitionException occurred during the analysis of file " ; 
 + assertTrue ( " Error message is unexpected " , 
 + exception . getMessage ( ) . contains ( message ) ) ; 
 + } 
 } 
 
 @ Test 
 public void testBehaviourWithOrdinaryAndCommentChecks ( ) throws Exception { 
 - final TreeWalker treeWalkerSpy = spy ( new TreeWalker ( ) ) ; 
 - final Class < ? > classAstState = 
 - Class . forName ( " com . puppycrawl . tools . checkstyle . TreeWalker $ AstState " ) ; 
 + final TreeWalker treeWalker = new TreeWalker ( ) ; 
 + treeWalker . configure ( createCheckConfig ( TypeNameCheck . class ) ) ; 
 + treeWalker . configure ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; 
 final PackageObjectFactory factory = new PackageObjectFactory ( 
 new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - treeWalkerSpy . configure ( new DefaultConfiguration ( " TreeWalkerTest " ) ) ; 
 - treeWalkerSpy . setModuleFactory ( factory ) ; 
 - treeWalkerSpy . setupChild ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; 
 - treeWalkerSpy . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; 
 - spy ( TreeWalker . class ) ; 
 - doNothing ( ) . when ( treeWalkerSpy , " walk " , 
 - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; 
 - treeWalkerSpy . processFiltered ( temporaryFolder . newFile ( " file . java " ) , new ArrayList < > ( ) ) ; 
 - verifyPrivate ( TreeWalker . class , times ( 1 ) ) 
 - . invoke ( " appendHiddenCommentNodes " , any ( DetailAST . class ) ) ; 
 - verifyPrivate ( treeWalkerSpy , times ( 2 ) ) . invoke ( " walk " , 
 - any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; 
 - verifyStatic ( times ( 1 ) ) ; 
 - TreeWalker . parse ( any ( FileContents . class ) ) ; 
 + treeWalker . setModuleFactory ( factory ) ; 
 + treeWalker . setupChild ( createCheckConfig ( TypeNameCheck . class ) ) ; 
 + treeWalker . setupChild ( createCheckConfig ( CommentsIndentationCheck . class ) ) ; 
 + final File file = temporaryFolder . newFile ( " file . java " ) ; 
 + final List < String > lines = new ArrayList < > ( ) ; 
 + lines . add ( " class a % $ # { } " ) ; 
 + 
 + try { 
 + treeWalker . processFiltered ( file , lines ) ; 
 + fail ( " file is not compilable , exception is expected " ) ; 
 + } 
 + catch ( CheckstyleException exception ) { 
 + final String message = 
 + " TokenStreamRecognitionException occurred during the analysis of file " ; 
 + assertTrue ( " Error message is unexpected " , 
 + exception . getMessage ( ) . contains ( message ) ) ; 
 + } 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java 
 index 8c7278e . . 971f916 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java 
 @ @ - 36 , 13 + 36 , 17 @ @ public class PackageAnnotationCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " annotation " + File . separator + filename ) ; 
 + + " annotation " + File . separator 
 + + " packageannotation " + File . separator 
 + + filename ) ; 
 } 
 
 @ Override 
 protected String getNonCompilablePath ( String filename ) throws IOException { 
 return super . getNonCompilablePath ( " checks " + File . separator 
 - + " annotation " + File . separator + filename ) ; 
 + + " annotation " + File . separator 
 + + " packageannotation " + File . separator 
 + + filename ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / InputPackageAnnotation2 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / InputPackageAnnotation2 . java 
 deleted file mode 100644 
 index 815d8b0 . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / InputPackageAnnotation2 . java 
 + + + / dev / null 
 @ @ - 1 , 6 + 0 , 0 @ @ 
 - @ Deprecated / / non - compilable annotation 
 - package com . puppycrawl . tools . checkstyle . checks . annotation ; 
 - 
 - public class InputPackageAnnotation2 { 
 - 	 
 - } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / package - info . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / package - info . java 
 deleted file mode 100644 
 index dcc0283 . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / package - info . java 
 + + + / dev / null 
 @ @ - 1 , 3 + 0 , 0 @ @ 
 - @ Deprecated 
 - package com . puppycrawl . tools . checkstyle . checks . annotation ; 
 - 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / InputPackageAnnotation2 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / InputPackageAnnotation2 . java 
 new file mode 100644 
 index 0000000 . . 3c79b95 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / InputPackageAnnotation2 . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + @ Deprecated / / non - compilable annotation 
 + package com . puppycrawl . tools . checkstyle . checks . annotation . packageannotation ; 
 + 
 + public class InputPackageAnnotation2 { 
 + 	 
 + } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / package - info . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / package - info . java 
 new file mode 100644 
 index 0000000 . . fb08771 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / package - info . java 
 @ @ - 0 , 0 + 1 , 3 @ @ 
 + @ Deprecated 
 + package com . puppycrawl . tools . checkstyle . checks . annotation . packageannotation ; 
 + 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / annotation / InputPackageAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / annotation / InputPackageAnnotation . java 
 deleted file mode 100644 
 index 100ac8d . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / annotation / InputPackageAnnotation . java 
 + + + / dev / null 
 @ @ - 1 , 6 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . annotation ; 
 - 
 - @ Deprecated 
 - public class InputPackageAnnotation { 
 - 	 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / InputPackageAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / InputPackageAnnotation . java 
 new file mode 100644 
 index 0000000 . . 3b6aaad 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation / InputPackageAnnotation . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . annotation . packageannotation ; 
 + 
 + @ Deprecated 
 + public class InputPackageAnnotation { 
 + 	 
 + }
