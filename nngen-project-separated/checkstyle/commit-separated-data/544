BLEU SCORE: 0.02735488212061132

TEST MSG: Issue # 3300 : fixed ERROR whitespace after annotation
GENERATED MSG: No Whitespace After Check - added support of array declarations , issue # 68

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java <nl> index bd32a1d . . 2b4d2b6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java <nl> @ @ - 51 , 6 + 51 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * { @ link TokenTypes # INDEX _ OP INDEX _ OP } <nl> * specially from other tokens . Actually it is checked that there is <nl> * no whitespace before this tokens , not after them . <nl> + * Spaces after the { @ link TokenTypes # ANNOTATIONS ANNOTATIONS } <nl> + * before { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } <nl> + * and { @ link TokenTypes # INDEX _ OP INDEX _ OP } will be ignored . <nl> * < / p > <nl> * < p > <nl> * An example of how to configure the check is : <nl> @ @ - 67 , 6 + 70 , 12 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * & lt ; property name = " allowLineBreaks " value = " false " / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> + * < p > <nl> + * If the annotation is between the type and the array , the check will skip validation for spaces : <nl> + * < / p > <nl> + * < pre > <nl> + * public void foo ( final char @ NotNull [ ] param ) { } / / No violation <nl> + * < / pre > <nl> * @ author Rick Giles <nl> * @ author lkuehne <nl> * @ author < a href = " mailto : nesterenko - aleksey @ list . ru " > Aleksey Nesterenko < / a > <nl> @ @ - 136 , 12 + 145 , 15 @ @ public class NoWhitespaceAfterCheck extends AbstractCheck { <nl> public void visitToken ( DetailAST ast ) { <nl> final DetailAST whitespaceFollowedAst = getWhitespaceFollowedNode ( ast ) ; <nl> <nl> - final int whitespaceColumnNo = getPositionAfter ( whitespaceFollowedAst ) ; <nl> - final int whitespaceLineNo = whitespaceFollowedAst . getLineNo ( ) ; <nl> + if ( whitespaceFollowedAst . getNextSibling ( ) = = null <nl> + | | whitespaceFollowedAst . getNextSibling ( ) . getType ( ) ! = TokenTypes . ANNOTATIONS ) { <nl> + final int whitespaceColumnNo = getPositionAfter ( whitespaceFollowedAst ) ; <nl> + final int whitespaceLineNo = whitespaceFollowedAst . getLineNo ( ) ; <nl> <nl> - if ( hasTrailingWhitespace ( ast , whitespaceColumnNo , whitespaceLineNo ) ) { <nl> - log ( whitespaceLineNo , whitespaceColumnNo , <nl> - MSG _ KEY , whitespaceFollowedAst . getText ( ) ) ; <nl> + if ( hasTrailingWhitespace ( ast , whitespaceColumnNo , whitespaceLineNo ) ) { <nl> + log ( whitespaceLineNo , whitespaceColumnNo , <nl> + MSG _ KEY , whitespaceFollowedAst . getText ( ) ) ; <nl> + } <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java <nl> index e69937f . . ffb7cab 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java <nl> @ @ - 169 , 6 + 169 , 13 @ @ public class NoWhitespaceAfterCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testArrayDeclarations3 ( ) throws Exception { <nl> + checkConfig . addAttribute ( " tokens " , " ARRAY _ DECLARATOR " ) ; <nl> + checkConfig . addAttribute ( " tokens " , " INDEX _ OP " ) ; <nl> + verify ( checkConfig , getPath ( " InputNoWhitespaceAfterArrayDeclarations3 . java " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testSynchronized ( ) throws Exception { <nl> checkConfig . addAttribute ( " tokens " , " LITERAL _ SYNCHRONIZED " ) ; <nl> final String [ ] expected = { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java <nl> new file mode 100644 <nl> index 0000000 . . 7ed823a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespaceafter ; <nl> + <nl> + import java . lang . annotation . ElementType ; <nl> + import java . lang . annotation . Target ; <nl> + <nl> + public class InputNoWhitespaceAfterArrayDeclarations3 <nl> + { <nl> + public void testWithAnnotationInMidle1 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct <nl> + public void testWithAnnotationInMidle2 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct <nl> + public void testWithAnnotationInMidle3 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct <nl> + public void testWithAnnotationInMidle4 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct <nl> + <nl> + @ Target ( ElementType . TYPE _ USE ) <nl> + @ interface AnnotationAfterTest { <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml <nl> index a02dc6a . . f8a749c 100644 <nl> - - - a / src / xdocs / config _ whitespace . xml <nl> + + + b / src / xdocs / config _ whitespace . xml <nl> @ @ - 962 , 6 + 962 , 15 @ @ import static java . math . BigInteger . ZERO ; <nl> href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INDEX _ OP " > INDEX _ OP < / a > <nl> tokens specially from other tokens . Actually it is checked that there is <nl> no whitespace before this tokens , not after them . <nl> + Space after the <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATIONS " > ANNOTATIONS < / a > before <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ARRAY _ DECLARATOR " > ARRAY _ DECLARATOR < / a > <nl> + and <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INDEX _ OP " > INDEX _ OP < / a > <nl> + will be ignored . <nl> < / p > <nl> < / subsection > <nl> <nl> @ @ - 1060 , 6 + 1069 , 12 @ @ import static java . math . BigInteger . ZERO ; <nl> & lt ; property name = & quot ; allowLineBreaks & quot ; value = & quot ; false & quot ; / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> + < p > <nl> + If the annotation is between the type and the array , the check will skip validation for spaces : <nl> + < / p > <nl> + < source > <nl> + public void foo ( final char @ NotNull [ ] param ) { } / / No violation <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " >
NEAREST DIFF (one line): diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava . java <nl> index 875c043 . . ddac325 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava . java <nl> @ @ - 1 , 4 + 1 , 13 @ @ <nl> - @ GwtCompatible ( emulated = true ) <nl> + package com . puppycrawl . tools . checkstyle . indentation ; <nl> + <nl> + import java . util . AbstractMap ; <nl> + import java . util . Set ; <nl> + import java . util . concurrent . ConcurrentMap ; <nl> + <nl> + import org . antlr . v4 . runtime . misc . Nullable ; <nl> + <nl> + import com . google . common . base . Equivalence ; <nl> + <nl> class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > { <nl> <nl> enum Strength { <nl> @ @ - 8 , 9 + 17 , 8 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > <nl> * / <nl> <nl> STRONG { <nl> - @ Override <nl> - < K , V > ValueReference < K , V > referenceValue ( <nl> - Segment < K , V > segment , ReferenceEntry < K , V > entry , V value , int weight ) { <nl> + < K , V > Object referenceValue ( <nl> + Segment < K , V > segment , ReferenceEntry < K , V > entry , int value , int weight ) { <nl> return ( weight = = 1 ) <nl> ? new StrongValueReference < K , V > ( value ) <nl> : new WeightedStrongValueReference < K , V > ( value , weight ) ; <nl> @ @ - 20 , 32 + 28 , 42 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > <nl> Equivalence < Object > defaultEquivalence ( ) { <nl> return Equivalence . equals ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + < K , V > ValueReference < K , V > referenceValue ( Segment < K , V > segment , <nl> + 	 	 ReferenceEntry < K , V > entry , V value , int weight ) { <nl> + <nl> + return null ; <nl> + } <nl> } , <nl> <nl> SOFT { <nl> - @ Override <nl> - < K , V > ValueReference < K , V > referenceValue ( <nl> - Segment < K , V > segment , ReferenceEntry < K , V > entry , V value , int weight ) { <nl> + < K , V > Object referenceValue1 ( <nl> + Segment < K , V > segment , ReferenceEntry < Integer , Integer > entry , int value , int weight ) { <nl> return ( weight = = 1 ) <nl> ? new SoftValueReference < K , V > ( segment . valueReferenceQueue , value , entry ) <nl> - : new WeightedSoftValueReference < K , V > ( <nl> - segment . valueReferenceQueue , value , entry , weight ) ; <nl> + : new WeightedSoftValueReference < K , V > ( ) ; <nl> } <nl> <nl> @ Override <nl> Equivalence < Object > defaultEquivalence ( ) { <nl> return Equivalence . identity ( ) ; <nl> } <nl> + <nl> + @ Override < K , V > Object referenceValue ( Segment < K , V > segment , ReferenceEntry < K , V > entry , <nl> + 	 	 V value , int weight ) <nl> + { <nl> + return null ; <nl> + } <nl> } , <nl> <nl> WEAK { <nl> @ Override <nl> - < K , V > ValueReference < K , V > referenceValue ( <nl> + < K , V > Object referenceValue ( <nl> Segment < K , V > segment , ReferenceEntry < K , V > entry , V value , int weight ) { <nl> return ( weight = = 1 ) <nl> - ? new WeakValueReference < K , V > ( segment . valueReferenceQueue , value , entry ) <nl> - : new WeightedWeakValueReference < K , V > ( <nl> - segment . valueReferenceQueue , value , entry , weight ) ; <nl> + ? new WeakValueReference < K , V > ( ) <nl> + : new WeightedWeakValueReference < K , V > ( ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 57 , 7 + 75 , 7 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > <nl> / * * <nl> * Creates a reference for the given value according to this value strength . <nl> * / <nl> - abstract < K , V > ValueReference < K , V > referenceValue ( <nl> + abstract < K , V > Object referenceValue ( <nl> Segment < K , V > segment , ReferenceEntry < K , V > entry , V value , int weight ) ; <nl> <nl> / * * <nl> @ @ - 73 , 111 + 91 , 182 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > <nl> * / <nl> enum EntryFactory { <nl> STRONG { <nl> - @ Override <nl> - < K , V > ReferenceEntry < K , V > newEntry ( <nl> + < K , V > StrongEntry < K , V > newEntry ( <nl> Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { <nl> - return new StrongEntry < K , V > ( key , hash , next ) ; <nl> + return new StrongEntry < K , V > ( ) ; <nl> } <nl> } , <nl> STRONG _ ACCESS { <nl> - @ Override <nl> - < K , V > ReferenceEntry < K , V > newEntry ( <nl> + < K , V > StrongAccessEntry < K , V > newEntry ( <nl> Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { <nl> - return new StrongAccessEntry < K , V > ( key , hash , next ) ; <nl> + return new StrongAccessEntry < K , V > ( ( int ) key , hash , next ) ; <nl> } <nl> <nl> - @ Override <nl> < K , V > ReferenceEntry < K , V > copyEntry ( <nl> Segment < K , V > segment , ReferenceEntry < K , V > original , ReferenceEntry < K , V > newNext ) { <nl> - ReferenceEntry < K , V > newEntry = super . copyEntry ( segment , original , newNext ) ; <nl> - copyAccessEntry ( original , newEntry ) ; <nl> - return newEntry ; <nl> + return newNext ; <nl> } <nl> - } , <nl> + { ; <nl> + } <nl> + } , <nl> STRONG _ WRITE { <nl> - @ Override <nl> - < K , V > ReferenceEntry < K , V > newEntry ( <nl> + < K , V > StrongEntry < K , V > newEntry ( <nl> Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { <nl> - return new StrongWriteEntry < K , V > ( key , hash , next ) ; <nl> + return new StrongEntry < K , V > ( ) ; <nl> } <nl> <nl> - @ Override <nl> < K , V > ReferenceEntry < K , V > copyEntry ( <nl> Segment < K , V > segment , ReferenceEntry < K , V > original , ReferenceEntry < K , V > newNext ) { <nl> - ReferenceEntry < K , V > newEntry = super . copyEntry ( segment , original , newNext ) ; <nl> - copyWriteEntry ( original , newEntry ) ; <nl> - return newEntry ; <nl> + return newNext ; <nl> } <nl> } , <nl> STRONG _ ACCESS _ WRITE { <nl> - @ Override <nl> - < K , V > ReferenceEntry < K , V > newEntry ( <nl> + < K , V > StrongEntry < K , V > newEntry ( <nl> Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { <nl> - return new StrongAccessWriteEntry < K , V > ( key , hash , next ) ; <nl> + return new StrongEntry < K , V > ( ) ; <nl> } <nl> <nl> - @ Override <nl> < K , V > ReferenceEntry < K , V > copyEntry ( <nl> Segment < K , V > segment , ReferenceEntry < K , V > original , ReferenceEntry < K , V > newNext ) { <nl> - ReferenceEntry < K , V > newEntry = super . copyEntry ( segment , original , newNext ) ; <nl> - copyAccessEntry ( original , newEntry ) ; <nl> - copyWriteEntry ( original , newEntry ) ; <nl> - return newEntry ; <nl> + return newNext ; <nl> } <nl> } , <nl> <nl> WEAK { <nl> - @ Override <nl> - < K , V > ReferenceEntry < K , V > newEntry ( <nl> + < K , V > StrongEntry < K , V > newEntry ( <nl> Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { <nl> - return new WeakEntry < K , V > ( segment . keyReferenceQueue , key , hash , next ) ; <nl> + return new StrongEntry < K , V > ( ) ; <nl> } <nl> } , <nl> WEAK _ ACCESS { <nl> - @ Override <nl> - < K , V > ReferenceEntry < K , V > newEntry ( <nl> + < K , V > StrongEntry < K , V > newEntry ( <nl> Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { <nl> - return new WeakAccessEntry < K , V > ( segment . keyReferenceQueue , key , hash , next ) ; <nl> + return new StrongEntry < K , V > ( ) ; <nl> } <nl> <nl> - @ Override <nl> < K , V > ReferenceEntry < K , V > copyEntry ( <nl> Segment < K , V > segment , ReferenceEntry < K , V > original , ReferenceEntry < K , V > newNext ) { <nl> - ReferenceEntry < K , V > newEntry = super . copyEntry ( segment , original , newNext ) ; <nl> - copyAccessEntry ( original , newEntry ) ; <nl> - return newEntry ; <nl> + return newNext ; <nl> } <nl> } , <nl> WEAK _ WRITE { <nl> - @ Override <nl> - < K , V > ReferenceEntry < K , V > newEntry ( <nl> + < K , V > StrongEntry < K , V > newEntry ( <nl> Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { <nl> - return new WeakWriteEntry < K , V > ( segment . keyReferenceQueue , key , hash , next ) ; <nl> + return new StrongEntry < K , V > ( ) ; <nl> } <nl> <nl> - @ Override <nl> < K , V > ReferenceEntry < K , V > copyEntry ( <nl> Segment < K , V > segment , ReferenceEntry < K , V > original , ReferenceEntry < K , V > newNext ) { <nl> - ReferenceEntry < K , V > newEntry = super . copyEntry ( segment , original , newNext ) ; <nl> - copyWriteEntry ( original , newEntry ) ; <nl> - return newEntry ; <nl> + return newNext ; <nl> } <nl> } , <nl> WEAK _ ACCESS _ WRITE { <nl> - @ Override <nl> - < K , V > ReferenceEntry < K , V > newEntry ( <nl> + < K , V > StrongEntry < K , V > newEntry ( <nl> Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { <nl> - return new WeakAccessWriteEntry < K , V > ( segment . keyReferenceQueue , key , hash , next ) ; <nl> + return new StrongEntry < K , V > ( ) ; <nl> } <nl> <nl> - @ Override <nl> < K , V > ReferenceEntry < K , V > copyEntry ( <nl> Segment < K , V > segment , ReferenceEntry < K , V > original , ReferenceEntry < K , V > newNext ) { <nl> - ReferenceEntry < K , V > newEntry = super . copyEntry ( segment , original , newNext ) ; <nl> - copyAccessEntry ( original , newEntry ) ; <nl> - copyWriteEntry ( original , newEntry ) ; <nl> - return newEntry ; <nl> + return newNext ; <nl> } <nl> } ; <nl> } <nl> + <nl> + @ Override <nl> + public Set < java . util . Map . Entry < K , V > > entrySet ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public V putIfAbsent ( K key , V value ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean remove ( Object key , Object value ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean replace ( K key , V oldValue , V newValue ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public V replace ( K key , V value ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + private static class ValueReference < T1 , T2 > { <nl> + <nl> + } <nl> + <nl> + private static class ReferenceEntry < T1 , T2 > { <nl> + <nl> + } <nl> + <nl> + private static class Segment < T1 , T2 > { <nl> + <nl> + protected Object valueReferenceQueue ; <nl> + <nl> + } <nl> + <nl> + private static class StrongAccessEntry < T1 , T2 > { <nl> + <nl> + public StrongAccessEntry ( int key , int hash , ReferenceEntry < T1 , T2 > next ) <nl> + { <nl> + <nl> + } <nl> + <nl> + } <nl> + <nl> + private static class StrongValueReference < T1 , T2 > { <nl> + <nl> + public StrongValueReference ( int value ) <nl> + { <nl> + <nl> + } <nl> + <nl> + } <nl> + <nl> + private static class WeightedStrongValueReference < T1 , T2 > { <nl> + <nl> + public WeightedStrongValueReference ( int value , int weight ) <nl> + { <nl> + <nl> + } <nl> + <nl> + } <nl> + <nl> + private static class SoftValueReference < T1 , T2 > { <nl> + <nl> + public SoftValueReference ( Object valueReferenceQueue , int value , <nl> + ReferenceEntry < Integer , Integer > entry ) <nl> + { <nl> + <nl> + } <nl> + <nl> + } <nl> + <nl> + private static class WeightedSoftValueReference < T1 , T2 > { <nl> + <nl> + } <nl> + <nl> + private static class WeakValueReference < T1 , T2 > { <nl> + <nl> + } <nl> + <nl> + private static class WeightedWeakValueReference < T1 , T2 > { <nl> + <nl> + } <nl> + <nl> + private static class StrongEntry < T1 , T2 > { <nl> + <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava2 . java <nl> index 9ff820b . . 884ab04 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava2 . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava2 . java <nl> @ @ - 1 , 55 + 1 , 113 @ @ <nl> - public class ImmutableRangeMap < K extends Comparable < ? > , V > implements RangeMap < K , V > { <nl> + package com . puppycrawl . tools . checkstyle . indentation ; <nl> <nl> - @ Override <nl> - public ImmutableRangeMap < K , V > subRangeMap ( final Range < K > range ) { <nl> + import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> + <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . Range ; <nl> + import com . google . common . collect . RangeMap ; <nl> + <nl> + public class FromGuava2 < K extends Comparable < ? > , V > implements RangeMap < K , V > { <nl> + <nl> + public FromGuava2 < K , V > subRangeMap1 ( final Range < K > range ) { <nl> + Range < K > ranges = null ; <nl> if ( checkNotNull ( range ) . isEmpty ( ) ) { <nl> - return ImmutableRangeMap . of ( ) ; <nl> } else if ( ranges . isEmpty ( ) | | range . encloses ( span ( ) ) ) { <nl> return this ; <nl> } <nl> - int lowerIndex = SortedLists . binarySearch ( <nl> - ranges , Range . < K > upperBoundFn ( ) , range . lowerBound , <nl> - KeyPresentBehavior . FIRST _ AFTER , KeyAbsentBehavior . NEXT _ HIGHER ) ; <nl> - int upperIndex = SortedLists . binarySearch ( ranges , <nl> - Range . < K > lowerBoundFn ( ) , range . upperBound , <nl> - KeyPresentBehavior . ANY _ PRESENT , KeyAbsentBehavior . NEXT _ HIGHER ) ; <nl> + int lowerIndex = SortedLists . binarySearch ( ) ; <nl> + int upperIndex = SortedLists . binarySearch ( ) ; <nl> if ( lowerIndex > = upperIndex ) { <nl> - return ImmutableRangeMap . of ( ) ; <nl> + return null ; <nl> } <nl> final int off = lowerIndex ; <nl> final int len = upperIndex - lowerIndex ; <nl> - ImmutableList < Range < K > > subRanges = new ImmutableList < Range < K > > ( ) { <nl> - @ Override <nl> - public int size ( ) { <nl> - return len ; <nl> - } <nl> - <nl> - @ Override <nl> - public Range < K > get ( int index ) { <nl> - checkElementIndex ( index , len ) ; <nl> - if ( index = = 0 | | index = = len - 1 ) { <nl> - return ranges . get ( index + off ) . intersection ( range ) ; <nl> - } else { <nl> - return ranges . get ( index + off ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - boolean isPartialView ( ) { <nl> - return true ; <nl> - } <nl> - } ; <nl> - final ImmutableRangeMap < K , V > outer = this ; <nl> - return new ImmutableRangeMap < K , V > ( <nl> - subRanges , values . subList ( lowerIndex , upperIndex ) ) { <nl> - @ Override <nl> - public ImmutableRangeMap < K , V > subRangeMap ( Range < K > subRange ) { <nl> - if ( range . isConnected ( subRange ) ) { <nl> - return outer . subRangeMap ( subRange . intersection ( range ) ) ; <nl> - } else { <nl> - return ImmutableRangeMap . of ( ) ; <nl> - } <nl> - } <nl> - } ; <nl> + FromGuava2 < K , V > outer = null ; <nl> + return outer ; <nl> + } <nl> + <nl> + public V get ( int index ) { <nl> + K key = null ; <nl> + int len = 0 ; <nl> + checkElementIndex ( index , len ) ; <nl> + int off ; <nl> + RangeMap < K , V > ranges = null ; <nl> + if ( index = = 0 | | index = = len - 1 ) { <nl> + Object range ; <nl> + return ranges . get ( key ) ; <nl> + } else { <nl> + return ranges . get ( key ) ; <nl> + } <nl> + } <nl> + <nl> + private void checkElementIndex ( int index , Object len ) <nl> + { <nl> + <nl> + } <nl> + <nl> + boolean isPartialView ( ) { <nl> + return true ; <nl> + } <nl> + <nl> + private Range < K > checkNotNull ( Range < K > range ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public V get ( K key ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + public Range < K > span ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public void put ( Range < K > range , V value ) <nl> + { <nl> + <nl> + } <nl> + <nl> + @ Override <nl> + public void putAll ( RangeMap < K , V > rangeMap ) <nl> + { <nl> + <nl> + } <nl> + <nl> + @ Override <nl> + public void clear ( ) <nl> + { <nl> + <nl> + } <nl> + <nl> + @ Override <nl> + public void remove ( Range < K > range ) <nl> + { <nl> + <nl> + } <nl> + <nl> + @ Override <nl> + public Map < Range < K > , V > asMapOfRanges ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public RangeMap < K , V > subRangeMap ( Range < K > range ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public Entry < Range < K > , V > getEntry ( K key ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + private static class SortedLists { <nl> + public static int binarySearch ( ) { return 4 ; } <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectIfAndParameterInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectIfAndParameterInput . java <nl> index b77abfe . . 9d037f9 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectIfAndParameterInput . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectIfAndParameterInput . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - package com . google . checkstyle . test . chapter4formatting . rule4841indentation ; / / indent : 0 ; exp : 0 ; ok <nl> + package com . puppycrawl . tools . checkstyle . indentation ; / / indent : 0 ; exp : 0 ; ok <nl> <nl> class FooIfClass { / / indent : 0 ; exp : 0 ; ok <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectWhileDoWhileAndParameterInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectWhileDoWhileAndParameterInput . java <nl> index 823657c . . e454c5e 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectWhileDoWhileAndParameterInput . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectWhileDoWhileAndParameterInput . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - package com . google . checkstyle . test . chapter4formatting . rule4841indentation ; / / indent : 0 ; exp : 0 ; ok <nl> + package com . puppycrawl . tools . checkstyle . indentation ; / / indent : 0 ; exp : 0 ; ok <nl> <nl> class FooWhileClass { / / indent : 0 ; exp : 0 ; ok <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputAnonymousClasses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputAnonymousClasses . java <nl> index 8d16fa4 . . a82927e 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputAnonymousClasses . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputAnonymousClasses . java <nl> @ @ - 1 , 9 + 1 , 6 @ @ <nl> - package InputAnonymousClasses ; <nl> + package com . puppycrawl . tools . checkstyle . indentation ; <nl> <nl> - import InputAnonymousClasses . StrangeInstance ; <nl> - import InputAnonymousClasses . InputAnonymousClasses ; <nl> - <nl> - @ MyAnnotation <nl> + @ MyAnnotation1 <nl> public class <nl> InputAnonymousClasses { / / indent : 0 ; exp : 0 ; ok <nl> public InputAnonymousClasses ( String longString , String secondLongString ) { / / indent : 2 ; exp : 2 ; ok <nl> @ @ - 43 , 4 + 40 , 4 @ @ class StrangeInstance { / / indent : 0 ; exp : 0 ; ok <nl> void foo ( String loongString , String secondLongString ) { } / / indent : 2 ; exp : 2 ; ok <nl> } / / indent : 0 ; exp : 0 ; ok <nl> <nl> - @ interface MyAnnotation { } <nl> \ No newline at end of file <nl> + @ interface MyAnnotation1 { } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputArrays . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputArrays . java <nl> index 9cbe56d . . 97f18f8 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputArrays . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputArrays . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - package InputAnonymousClasses ; <nl> + package com . puppycrawl . tools . checkstyle . indentation ; <nl> <nl> class InputArrays { / / indent : 0 ; exp : 0 ; ok <nl> / * * <nl> @ @ - 40 , 8 + 40 , 8 @ @ class InputArrays { / / indent : 0 ; exp : 0 ; ok <nl> @ VisibleForTesting static final int [ ] halfPowersOf10 = <nl> { 3 , 31 , 316 , 3162 , 31622 , 316227 , 3162277 , 31622776 , 316227766 , Integer . MAX _ VALUE } ; <nl> <nl> - @ Override <nl> public byte [ ] asBytes ( ) { <nl> + byte hash = 0 ; <nl> return new byte [ ] { <nl> ( byte ) hash , <nl> ( byte ) ( hash > > 8 ) , <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputClassesMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputClassesMethods . java <nl> index 450daaa . . 6662fbf 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputClassesMethods . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputClassesMethods . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - import java . util . Iterator ; / / indent : 0 ; exp : 0 ; ok <nl> + package com . puppycrawl . tools . checkstyle . indentation ; <nl> <nl> - import IndentationCorrectClassInput . InnerClass ; <nl> + import java . util . Iterator ; / / indent : 0 ; exp : 0 ; ok <nl> <nl> class IndentationCorrectClassInput / / indent : 0 ; exp : 0 ; ok <nl> implements Runnable , Cloneable { / / indent : 4 ; exp : 4 ; ok <nl> @ @ - 25 , 8 + 25 , 7 @ @ class IndentationCorrectClassInput / / indent : 0 ; exp : 0 ; ok <nl> public void run ( ) { / / indent : 2 ; exp : 2 ; ok <nl> SecondClassWithLongLongLongLongName anon = / / indent : 4 ; exp : 4 ; ok <nl> new SecondClassWithLongLongLongLongName ( ) { / / indent : 8 ; exp : 8 ; ok <nl> - @ MyAnnotation <nl> - @ Override <nl> + @ MyAnnotation2 <nl> String longLongLongLongLongMethodName ( ) { / / indent : 14 ; exp : 14 ; ok <nl> return " String " ; / / indent : 12 ; exp : 12 ; ok <nl> } / / indent : 10 ; exp : 10 ; ok <nl> @ @ - 54 , 7 + 53 , 7 @ @ class SecondClassWithLongLongLongLongName / / indent : 0 ; exp : 0 ; ok <nl> } / / indent : 2 ; exp : 2 ; ok <nl> } / / indent : 0 ; exp : 0 ; ok <nl> <nl> - @ interface MyAnnotation { } <nl> + @ interface MyAnnotation2 { } <nl> <nl> - @ MyAnnotation <nl> + @ MyAnnotation2 <nl> class Foo { } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputInvalidClassDefIndent . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputInvalidClassDefIndent . java <nl> index 95ae37a . . d56afdb 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputInvalidClassDefIndent . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputInvalidClassDefIndent . java <nl> @ @ - 36 , 21 + 36 , 21 @ @ class InputInvalidClassDefIndentB extends java . awt . event . MouseAdapter implements <nl> <nl> <nl> <nl> - class InputValidClassDefIndent2 <nl> + class InputValidClassDefIndent22 <nl> extends java . awt . event . MouseAdapter <nl> implements java . awt . event . MouseListener <nl> { <nl> <nl> } <nl> <nl> - class InputValidClassDefIndent3 <nl> + class InputValidClassDefIndent33 <nl> extends java . awt . event . MouseAdapter <nl> implements java . awt . event . MouseListener <nl> { <nl> <nl> } <nl> <nl> - final class InputValidClassDefIndent4 <nl> + final class InputValidClassDefIndent44 <nl> extends java . awt . event . MouseAdapter <nl> implements <nl> java . awt . event . MouseListener <nl> @ @ - 58 , 7 + 58 , 7 @ @ final class InputValidClassDefIndent4 <nl> <nl> } <nl> <nl> - final class InputValidClassDefIndent5 extends java . awt . event . MouseAdapter implements java . awt . event . MouseListener <nl> + final class InputValidClassDefIndent55 extends java . awt . event . MouseAdapter implements java . awt . event . MouseListener <nl> { <nl> <nl> } <nl> @ @ - 78 , 7 + 78 , 7 @ @ class InputInvalidClassDefIndentc <nl> <nl> <nl> <nl> - final class InputValidClassDefIndent6 extends java . awt . event . MouseAdapter implements java . awt . event . MouseListener { <nl> + final class InputValidClassDefIndent66 extends java . awt . event . MouseAdapter implements java . awt . event . MouseListener { <nl> <nl> class foo { } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputLabels . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputLabels . java <nl> index 1ecfe74 . . 6bcf448 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputLabels . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputLabels . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - package InputLabels ; / / indent : 0 ; exp : 0 ; ok <nl> + package com . puppycrawl . tools . checkstyle . indentation ; / / indent : 0 ; exp : 0 ; ok <nl> <nl> class InputLabels { / / indent : 0 ; exp : 0 ; ok <nl> void foo ( ) { / / indent : 2 ; exp : 2 ; ok <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputMembers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputMembers . java <nl> index f1cfb8b . . e8ec31e 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputMembers . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputMembers . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> + package com . puppycrawl . tools . checkstyle . indentation ; <nl> import java . util . HashMap ; <nl> - <nl> - <nl> + import java . util . Map ; <nl> / * * <nl> * Some Javadoc . <nl> * / <nl> @ @ - 74 , 7 + 74 , 6 @ @ abstract class WithAnnotations { / / indent : 0 ; exp : 0 ; ok <nl> + " Charset " ) / / indent : 6 ; exp : 6 ; ok <nl> public static final int FOO _ CONSTANT = 111 ; / / indent : 2 ; exp : 2 ; ok <nl> <nl> - @ Override <nl> private void foo34 ( ) { } <nl> final Map < String , String > / / indent : 2 ; exp : 2 ; ok <nl> comeMapWithLongName = new HashMap / / indent : 6 ; exp : 6 ; ok <nl> @ @ - 85 , 7 + 84 , 7 @ @ abstract class WithAnnotations { / / indent : 0 ; exp : 0 ; ok <nl> return new byte [ ] { } ; <nl> } <nl> <nl> - @ MyAnnotation public abstract ImmutableMap < R , Map < C , V > > rowMap ( ) ; <nl> + @ MyAnnotation public abstract < K , V > Map < K , V > rowMap ( ) ; <nl> } / / indent : 0 ; exp : 0 ; ok <nl> <nl> @ interface GwtIncompatible { / / indent : 0 ; exp : 0 ; ok <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputSwitchCustom . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputSwitchCustom . java <nl> index 683eab9 . . e1b820d 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputSwitchCustom . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputSwitchCustom . java <nl> @ @ - 1 , 4 + 1 , 10 @ @ <nl> - public class MyClass { <nl> + package com . puppycrawl . tools . checkstyle . indentation ; <nl> + <nl> + public class InputSwitchCustom { <nl> + private static final int ABC1 = 0 ; <nl> + private static final int ABC2 = 0 ; <nl> + private static final int ABC3 = 0 ; <nl> + <nl> public int getValue ( int value ) { <nl> switch ( value ) { <nl> case 0 : return ABC1 ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidArrayInitDefaultIndent . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidArrayInitDefaultIndent . java <nl> index 8167db4 . . 8e826e3 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidArrayInitDefaultIndent . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidArrayInitDefaultIndent . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . indentation ; <nl> <nl> - public class InputValidArrayInitIndent { <nl> + public class InputValidArrayInitDefaultIndent { <nl> <nl> private static char [ ] sHexChars = { <nl> ' 0 ' , ' 1 ' , ' 2 ' , ' 3 ' , ' 4 ' , ' 5 ' , ' 6 ' , ' 7 ' , <nl> @ @ - 93 , 7 + 93 , 7 @ @ public class InputValidArrayInitIndent { <nl> } <nl> <nl> / * * Creates a new instance of InputValidArrayInitIndent * / <nl> - public InputValidArrayInitIndent ( ) { <nl> + public InputValidArrayInitDefaultIndent ( ) { <nl> <nl> func1 ( new int [ ] { 1 , 2 } ) ; <nl> func1 ( new int [ ] { } ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidIfIndent . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidIfIndent . java <nl> index 50d1ffe . . ef3d877 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidIfIndent . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidIfIndent . java <nl> @ @ - 245 , 6 + 245 , 7 @ @ public class InputValidIfIndent { <nl> <nl> class FooFoo { <nl> void foo42 ( ) { <nl> + boolean test = false ; <nl> if ( test ) { <nl> System . getProperty ( " blah " ) ; <nl> } else if ( 7 < 8

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java 
 index bd32a1d . . 2b4d2b6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java 
 @ @ - 51 , 6 + 51 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * { @ link TokenTypes # INDEX _ OP INDEX _ OP } 
 * specially from other tokens . Actually it is checked that there is 
 * no whitespace before this tokens , not after them . 
 + * Spaces after the { @ link TokenTypes # ANNOTATIONS ANNOTATIONS } 
 + * before { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } 
 + * and { @ link TokenTypes # INDEX _ OP INDEX _ OP } will be ignored . 
 * < / p > 
 * < p > 
 * An example of how to configure the check is : 
 @ @ - 67 , 6 + 70 , 12 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * & lt ; property name = " allowLineBreaks " value = " false " / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 + * < p > 
 + * If the annotation is between the type and the array , the check will skip validation for spaces : 
 + * < / p > 
 + * < pre > 
 + * public void foo ( final char @ NotNull [ ] param ) { } / / No violation 
 + * < / pre > 
 * @ author Rick Giles 
 * @ author lkuehne 
 * @ author < a href = " mailto : nesterenko - aleksey @ list . ru " > Aleksey Nesterenko < / a > 
 @ @ - 136 , 12 + 145 , 15 @ @ public class NoWhitespaceAfterCheck extends AbstractCheck { 
 public void visitToken ( DetailAST ast ) { 
 final DetailAST whitespaceFollowedAst = getWhitespaceFollowedNode ( ast ) ; 
 
 - final int whitespaceColumnNo = getPositionAfter ( whitespaceFollowedAst ) ; 
 - final int whitespaceLineNo = whitespaceFollowedAst . getLineNo ( ) ; 
 + if ( whitespaceFollowedAst . getNextSibling ( ) = = null 
 + | | whitespaceFollowedAst . getNextSibling ( ) . getType ( ) ! = TokenTypes . ANNOTATIONS ) { 
 + final int whitespaceColumnNo = getPositionAfter ( whitespaceFollowedAst ) ; 
 + final int whitespaceLineNo = whitespaceFollowedAst . getLineNo ( ) ; 
 
 - if ( hasTrailingWhitespace ( ast , whitespaceColumnNo , whitespaceLineNo ) ) { 
 - log ( whitespaceLineNo , whitespaceColumnNo , 
 - MSG _ KEY , whitespaceFollowedAst . getText ( ) ) ; 
 + if ( hasTrailingWhitespace ( ast , whitespaceColumnNo , whitespaceLineNo ) ) { 
 + log ( whitespaceLineNo , whitespaceColumnNo , 
 + MSG _ KEY , whitespaceFollowedAst . getText ( ) ) ; 
 + } 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java 
 index e69937f . . ffb7cab 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java 
 @ @ - 169 , 6 + 169 , 13 @ @ public class NoWhitespaceAfterCheckTest 
 } 
 
 @ Test 
 + public void testArrayDeclarations3 ( ) throws Exception { 
 + checkConfig . addAttribute ( " tokens " , " ARRAY _ DECLARATOR " ) ; 
 + checkConfig . addAttribute ( " tokens " , " INDEX _ OP " ) ; 
 + verify ( checkConfig , getPath ( " InputNoWhitespaceAfterArrayDeclarations3 . java " ) ) ; 
 + } 
 + 
 + @ Test 
 public void testSynchronized ( ) throws Exception { 
 checkConfig . addAttribute ( " tokens " , " LITERAL _ SYNCHRONIZED " ) ; 
 final String [ ] expected = { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java 
 new file mode 100644 
 index 0000000 . . 7ed823a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespaceafter ; 
 + 
 + import java . lang . annotation . ElementType ; 
 + import java . lang . annotation . Target ; 
 + 
 + public class InputNoWhitespaceAfterArrayDeclarations3 
 + { 
 + public void testWithAnnotationInMidle1 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct 
 + public void testWithAnnotationInMidle2 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct 
 + public void testWithAnnotationInMidle3 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct 
 + public void testWithAnnotationInMidle4 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct 
 + 
 + @ Target ( ElementType . TYPE _ USE ) 
 + @ interface AnnotationAfterTest { 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml 
 index a02dc6a . . f8a749c 100644 
 - - - a / src / xdocs / config _ whitespace . xml 
 + + + b / src / xdocs / config _ whitespace . xml 
 @ @ - 962 , 6 + 962 , 15 @ @ import static java . math . BigInteger . ZERO ; 
 href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INDEX _ OP " > INDEX _ OP < / a > 
 tokens specially from other tokens . Actually it is checked that there is 
 no whitespace before this tokens , not after them . 
 + Space after the 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ANNOTATIONS " > ANNOTATIONS < / a > before 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ARRAY _ DECLARATOR " > ARRAY _ DECLARATOR < / a > 
 + and 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INDEX _ OP " > INDEX _ OP < / a > 
 + will be ignored . 
 < / p > 
 < / subsection > 
 
 @ @ - 1060 , 6 + 1069 , 12 @ @ import static java . math . BigInteger . ZERO ; 
 & lt ; property name = & quot ; allowLineBreaks & quot ; value = & quot ; false & quot ; / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 + < p > 
 + If the annotation is between the type and the array , the check will skip validation for spaces : 
 + < / p > 
 + < source > 
 + public void foo ( final char @ NotNull [ ] param ) { } / / No violation 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Example of Usage " >

NEAREST DIFF:
diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava . java 
 index 875c043 . . ddac325 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava . java 
 @ @ - 1 , 4 + 1 , 13 @ @ 
 - @ GwtCompatible ( emulated = true ) 
 + package com . puppycrawl . tools . checkstyle . indentation ; 
 + 
 + import java . util . AbstractMap ; 
 + import java . util . Set ; 
 + import java . util . concurrent . ConcurrentMap ; 
 + 
 + import org . antlr . v4 . runtime . misc . Nullable ; 
 + 
 + import com . google . common . base . Equivalence ; 
 + 
 class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > { 
 
 enum Strength { 
 @ @ - 8 , 9 + 17 , 8 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > 
 * / 
 
 STRONG { 
 - @ Override 
 - < K , V > ValueReference < K , V > referenceValue ( 
 - Segment < K , V > segment , ReferenceEntry < K , V > entry , V value , int weight ) { 
 + < K , V > Object referenceValue ( 
 + Segment < K , V > segment , ReferenceEntry < K , V > entry , int value , int weight ) { 
 return ( weight = = 1 ) 
 ? new StrongValueReference < K , V > ( value ) 
 : new WeightedStrongValueReference < K , V > ( value , weight ) ; 
 @ @ - 20 , 32 + 28 , 42 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > 
 Equivalence < Object > defaultEquivalence ( ) { 
 return Equivalence . equals ( ) ; 
 } 
 + 
 + @ Override 
 + < K , V > ValueReference < K , V > referenceValue ( Segment < K , V > segment , 
 + 	 	 ReferenceEntry < K , V > entry , V value , int weight ) { 
 + 
 + return null ; 
 + } 
 } , 
 
 SOFT { 
 - @ Override 
 - < K , V > ValueReference < K , V > referenceValue ( 
 - Segment < K , V > segment , ReferenceEntry < K , V > entry , V value , int weight ) { 
 + < K , V > Object referenceValue1 ( 
 + Segment < K , V > segment , ReferenceEntry < Integer , Integer > entry , int value , int weight ) { 
 return ( weight = = 1 ) 
 ? new SoftValueReference < K , V > ( segment . valueReferenceQueue , value , entry ) 
 - : new WeightedSoftValueReference < K , V > ( 
 - segment . valueReferenceQueue , value , entry , weight ) ; 
 + : new WeightedSoftValueReference < K , V > ( ) ; 
 } 
 
 @ Override 
 Equivalence < Object > defaultEquivalence ( ) { 
 return Equivalence . identity ( ) ; 
 } 
 + 
 + @ Override < K , V > Object referenceValue ( Segment < K , V > segment , ReferenceEntry < K , V > entry , 
 + 	 	 V value , int weight ) 
 + { 
 + return null ; 
 + } 
 } , 
 
 WEAK { 
 @ Override 
 - < K , V > ValueReference < K , V > referenceValue ( 
 + < K , V > Object referenceValue ( 
 Segment < K , V > segment , ReferenceEntry < K , V > entry , V value , int weight ) { 
 return ( weight = = 1 ) 
 - ? new WeakValueReference < K , V > ( segment . valueReferenceQueue , value , entry ) 
 - : new WeightedWeakValueReference < K , V > ( 
 - segment . valueReferenceQueue , value , entry , weight ) ; 
 + ? new WeakValueReference < K , V > ( ) 
 + : new WeightedWeakValueReference < K , V > ( ) ; 
 } 
 
 @ Override 
 @ @ - 57 , 7 + 75 , 7 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > 
 / * * 
 * Creates a reference for the given value according to this value strength . 
 * / 
 - abstract < K , V > ValueReference < K , V > referenceValue ( 
 + abstract < K , V > Object referenceValue ( 
 Segment < K , V > segment , ReferenceEntry < K , V > entry , V value , int weight ) ; 
 
 / * * 
 @ @ - 73 , 111 + 91 , 182 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > 
 * / 
 enum EntryFactory { 
 STRONG { 
 - @ Override 
 - < K , V > ReferenceEntry < K , V > newEntry ( 
 + < K , V > StrongEntry < K , V > newEntry ( 
 Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { 
 - return new StrongEntry < K , V > ( key , hash , next ) ; 
 + return new StrongEntry < K , V > ( ) ; 
 } 
 } , 
 STRONG _ ACCESS { 
 - @ Override 
 - < K , V > ReferenceEntry < K , V > newEntry ( 
 + < K , V > StrongAccessEntry < K , V > newEntry ( 
 Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { 
 - return new StrongAccessEntry < K , V > ( key , hash , next ) ; 
 + return new StrongAccessEntry < K , V > ( ( int ) key , hash , next ) ; 
 } 
 
 - @ Override 
 < K , V > ReferenceEntry < K , V > copyEntry ( 
 Segment < K , V > segment , ReferenceEntry < K , V > original , ReferenceEntry < K , V > newNext ) { 
 - ReferenceEntry < K , V > newEntry = super . copyEntry ( segment , original , newNext ) ; 
 - copyAccessEntry ( original , newEntry ) ; 
 - return newEntry ; 
 + return newNext ; 
 } 
 - } , 
 + { ; 
 + } 
 + } , 
 STRONG _ WRITE { 
 - @ Override 
 - < K , V > ReferenceEntry < K , V > newEntry ( 
 + < K , V > StrongEntry < K , V > newEntry ( 
 Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { 
 - return new StrongWriteEntry < K , V > ( key , hash , next ) ; 
 + return new StrongEntry < K , V > ( ) ; 
 } 
 
 - @ Override 
 < K , V > ReferenceEntry < K , V > copyEntry ( 
 Segment < K , V > segment , ReferenceEntry < K , V > original , ReferenceEntry < K , V > newNext ) { 
 - ReferenceEntry < K , V > newEntry = super . copyEntry ( segment , original , newNext ) ; 
 - copyWriteEntry ( original , newEntry ) ; 
 - return newEntry ; 
 + return newNext ; 
 } 
 } , 
 STRONG _ ACCESS _ WRITE { 
 - @ Override 
 - < K , V > ReferenceEntry < K , V > newEntry ( 
 + < K , V > StrongEntry < K , V > newEntry ( 
 Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { 
 - return new StrongAccessWriteEntry < K , V > ( key , hash , next ) ; 
 + return new StrongEntry < K , V > ( ) ; 
 } 
 
 - @ Override 
 < K , V > ReferenceEntry < K , V > copyEntry ( 
 Segment < K , V > segment , ReferenceEntry < K , V > original , ReferenceEntry < K , V > newNext ) { 
 - ReferenceEntry < K , V > newEntry = super . copyEntry ( segment , original , newNext ) ; 
 - copyAccessEntry ( original , newEntry ) ; 
 - copyWriteEntry ( original , newEntry ) ; 
 - return newEntry ; 
 + return newNext ; 
 } 
 } , 
 
 WEAK { 
 - @ Override 
 - < K , V > ReferenceEntry < K , V > newEntry ( 
 + < K , V > StrongEntry < K , V > newEntry ( 
 Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { 
 - return new WeakEntry < K , V > ( segment . keyReferenceQueue , key , hash , next ) ; 
 + return new StrongEntry < K , V > ( ) ; 
 } 
 } , 
 WEAK _ ACCESS { 
 - @ Override 
 - < K , V > ReferenceEntry < K , V > newEntry ( 
 + < K , V > StrongEntry < K , V > newEntry ( 
 Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { 
 - return new WeakAccessEntry < K , V > ( segment . keyReferenceQueue , key , hash , next ) ; 
 + return new StrongEntry < K , V > ( ) ; 
 } 
 
 - @ Override 
 < K , V > ReferenceEntry < K , V > copyEntry ( 
 Segment < K , V > segment , ReferenceEntry < K , V > original , ReferenceEntry < K , V > newNext ) { 
 - ReferenceEntry < K , V > newEntry = super . copyEntry ( segment , original , newNext ) ; 
 - copyAccessEntry ( original , newEntry ) ; 
 - return newEntry ; 
 + return newNext ; 
 } 
 } , 
 WEAK _ WRITE { 
 - @ Override 
 - < K , V > ReferenceEntry < K , V > newEntry ( 
 + < K , V > StrongEntry < K , V > newEntry ( 
 Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { 
 - return new WeakWriteEntry < K , V > ( segment . keyReferenceQueue , key , hash , next ) ; 
 + return new StrongEntry < K , V > ( ) ; 
 } 
 
 - @ Override 
 < K , V > ReferenceEntry < K , V > copyEntry ( 
 Segment < K , V > segment , ReferenceEntry < K , V > original , ReferenceEntry < K , V > newNext ) { 
 - ReferenceEntry < K , V > newEntry = super . copyEntry ( segment , original , newNext ) ; 
 - copyWriteEntry ( original , newEntry ) ; 
 - return newEntry ; 
 + return newNext ; 
 } 
 } , 
 WEAK _ ACCESS _ WRITE { 
 - @ Override 
 - < K , V > ReferenceEntry < K , V > newEntry ( 
 + < K , V > StrongEntry < K , V > newEntry ( 
 Segment < K , V > segment , K key , int hash , @ Nullable ReferenceEntry < K , V > next ) { 
 - return new WeakAccessWriteEntry < K , V > ( segment . keyReferenceQueue , key , hash , next ) ; 
 + return new StrongEntry < K , V > ( ) ; 
 } 
 
 - @ Override 
 < K , V > ReferenceEntry < K , V > copyEntry ( 
 Segment < K , V > segment , ReferenceEntry < K , V > original , ReferenceEntry < K , V > newNext ) { 
 - ReferenceEntry < K , V > newEntry = super . copyEntry ( segment , original , newNext ) ; 
 - copyAccessEntry ( original , newEntry ) ; 
 - copyWriteEntry ( original , newEntry ) ; 
 - return newEntry ; 
 + return newNext ; 
 } 
 } ; 
 } 
 + 
 + @ Override 
 + public Set < java . util . Map . Entry < K , V > > entrySet ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public V putIfAbsent ( K key , V value ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public boolean remove ( Object key , Object value ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public boolean replace ( K key , V oldValue , V newValue ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public V replace ( K key , V value ) 
 + { 
 + return null ; 
 + } 
 + 
 + private static class ValueReference < T1 , T2 > { 
 + 
 + } 
 + 
 + private static class ReferenceEntry < T1 , T2 > { 
 + 
 + } 
 + 
 + private static class Segment < T1 , T2 > { 
 + 
 + protected Object valueReferenceQueue ; 
 + 
 + } 
 + 
 + private static class StrongAccessEntry < T1 , T2 > { 
 + 
 + public StrongAccessEntry ( int key , int hash , ReferenceEntry < T1 , T2 > next ) 
 + { 
 + 
 + } 
 + 
 + } 
 + 
 + private static class StrongValueReference < T1 , T2 > { 
 + 
 + public StrongValueReference ( int value ) 
 + { 
 + 
 + } 
 + 
 + } 
 + 
 + private static class WeightedStrongValueReference < T1 , T2 > { 
 + 
 + public WeightedStrongValueReference ( int value , int weight ) 
 + { 
 + 
 + } 
 + 
 + } 
 + 
 + private static class SoftValueReference < T1 , T2 > { 
 + 
 + public SoftValueReference ( Object valueReferenceQueue , int value , 
 + ReferenceEntry < Integer , Integer > entry ) 
 + { 
 + 
 + } 
 + 
 + } 
 + 
 + private static class WeightedSoftValueReference < T1 , T2 > { 
 + 
 + } 
 + 
 + private static class WeakValueReference < T1 , T2 > { 
 + 
 + } 
 + 
 + private static class WeightedWeakValueReference < T1 , T2 > { 
 + 
 + } 
 + 
 + private static class StrongEntry < T1 , T2 > { 
 + 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava2 . java 
 index 9ff820b . . 884ab04 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava2 . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / FromGuava2 . java 
 @ @ - 1 , 55 + 1 , 113 @ @ 
 - public class ImmutableRangeMap < K extends Comparable < ? > , V > implements RangeMap < K , V > { 
 + package com . puppycrawl . tools . checkstyle . indentation ; 
 
 - @ Override 
 - public ImmutableRangeMap < K , V > subRangeMap ( final Range < K > range ) { 
 + import java . util . Map ; 
 + import java . util . Map . Entry ; 
 + 
 + import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . Range ; 
 + import com . google . common . collect . RangeMap ; 
 + 
 + public class FromGuava2 < K extends Comparable < ? > , V > implements RangeMap < K , V > { 
 + 
 + public FromGuava2 < K , V > subRangeMap1 ( final Range < K > range ) { 
 + Range < K > ranges = null ; 
 if ( checkNotNull ( range ) . isEmpty ( ) ) { 
 - return ImmutableRangeMap . of ( ) ; 
 } else if ( ranges . isEmpty ( ) | | range . encloses ( span ( ) ) ) { 
 return this ; 
 } 
 - int lowerIndex = SortedLists . binarySearch ( 
 - ranges , Range . < K > upperBoundFn ( ) , range . lowerBound , 
 - KeyPresentBehavior . FIRST _ AFTER , KeyAbsentBehavior . NEXT _ HIGHER ) ; 
 - int upperIndex = SortedLists . binarySearch ( ranges , 
 - Range . < K > lowerBoundFn ( ) , range . upperBound , 
 - KeyPresentBehavior . ANY _ PRESENT , KeyAbsentBehavior . NEXT _ HIGHER ) ; 
 + int lowerIndex = SortedLists . binarySearch ( ) ; 
 + int upperIndex = SortedLists . binarySearch ( ) ; 
 if ( lowerIndex > = upperIndex ) { 
 - return ImmutableRangeMap . of ( ) ; 
 + return null ; 
 } 
 final int off = lowerIndex ; 
 final int len = upperIndex - lowerIndex ; 
 - ImmutableList < Range < K > > subRanges = new ImmutableList < Range < K > > ( ) { 
 - @ Override 
 - public int size ( ) { 
 - return len ; 
 - } 
 - 
 - @ Override 
 - public Range < K > get ( int index ) { 
 - checkElementIndex ( index , len ) ; 
 - if ( index = = 0 | | index = = len - 1 ) { 
 - return ranges . get ( index + off ) . intersection ( range ) ; 
 - } else { 
 - return ranges . get ( index + off ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - boolean isPartialView ( ) { 
 - return true ; 
 - } 
 - } ; 
 - final ImmutableRangeMap < K , V > outer = this ; 
 - return new ImmutableRangeMap < K , V > ( 
 - subRanges , values . subList ( lowerIndex , upperIndex ) ) { 
 - @ Override 
 - public ImmutableRangeMap < K , V > subRangeMap ( Range < K > subRange ) { 
 - if ( range . isConnected ( subRange ) ) { 
 - return outer . subRangeMap ( subRange . intersection ( range ) ) ; 
 - } else { 
 - return ImmutableRangeMap . of ( ) ; 
 - } 
 - } 
 - } ; 
 + FromGuava2 < K , V > outer = null ; 
 + return outer ; 
 + } 
 + 
 + public V get ( int index ) { 
 + K key = null ; 
 + int len = 0 ; 
 + checkElementIndex ( index , len ) ; 
 + int off ; 
 + RangeMap < K , V > ranges = null ; 
 + if ( index = = 0 | | index = = len - 1 ) { 
 + Object range ; 
 + return ranges . get ( key ) ; 
 + } else { 
 + return ranges . get ( key ) ; 
 + } 
 + } 
 + 
 + private void checkElementIndex ( int index , Object len ) 
 + { 
 + 
 + } 
 + 
 + boolean isPartialView ( ) { 
 + return true ; 
 + } 
 + 
 + private Range < K > checkNotNull ( Range < K > range ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public V get ( K key ) 
 + { 
 + return null ; 
 + } 
 + 
 + public Range < K > span ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public void put ( Range < K > range , V value ) 
 + { 
 + 
 + } 
 + 
 + @ Override 
 + public void putAll ( RangeMap < K , V > rangeMap ) 
 + { 
 + 
 + } 
 + 
 + @ Override 
 + public void clear ( ) 
 + { 
 + 
 + } 
 + 
 + @ Override 
 + public void remove ( Range < K > range ) 
 + { 
 + 
 + } 
 + 
 + @ Override 
 + public Map < Range < K > , V > asMapOfRanges ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public RangeMap < K , V > subRangeMap ( Range < K > range ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public Entry < Range < K > , V > getEntry ( K key ) 
 + { 
 + return null ; 
 + } 
 + 
 + private static class SortedLists { 
 + public static int binarySearch ( ) { return 4 ; } 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectIfAndParameterInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectIfAndParameterInput . java 
 index b77abfe . . 9d037f9 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectIfAndParameterInput . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectIfAndParameterInput . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - package com . google . checkstyle . test . chapter4formatting . rule4841indentation ; / / indent : 0 ; exp : 0 ; ok 
 + package com . puppycrawl . tools . checkstyle . indentation ; / / indent : 0 ; exp : 0 ; ok 
 
 class FooIfClass { / / indent : 0 ; exp : 0 ; ok 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectWhileDoWhileAndParameterInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectWhileDoWhileAndParameterInput . java 
 index 823657c . . e454c5e 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectWhileDoWhileAndParameterInput . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / IndentationCorrectWhileDoWhileAndParameterInput . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - package com . google . checkstyle . test . chapter4formatting . rule4841indentation ; / / indent : 0 ; exp : 0 ; ok 
 + package com . puppycrawl . tools . checkstyle . indentation ; / / indent : 0 ; exp : 0 ; ok 
 
 class FooWhileClass { / / indent : 0 ; exp : 0 ; ok 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputAnonymousClasses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputAnonymousClasses . java 
 index 8d16fa4 . . a82927e 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputAnonymousClasses . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputAnonymousClasses . java 
 @ @ - 1 , 9 + 1 , 6 @ @ 
 - package InputAnonymousClasses ; 
 + package com . puppycrawl . tools . checkstyle . indentation ; 
 
 - import InputAnonymousClasses . StrangeInstance ; 
 - import InputAnonymousClasses . InputAnonymousClasses ; 
 - 
 - @ MyAnnotation 
 + @ MyAnnotation1 
 public class 
 InputAnonymousClasses { / / indent : 0 ; exp : 0 ; ok 
 public InputAnonymousClasses ( String longString , String secondLongString ) { / / indent : 2 ; exp : 2 ; ok 
 @ @ - 43 , 4 + 40 , 4 @ @ class StrangeInstance { / / indent : 0 ; exp : 0 ; ok 
 void foo ( String loongString , String secondLongString ) { } / / indent : 2 ; exp : 2 ; ok 
 } / / indent : 0 ; exp : 0 ; ok 
 
 - @ interface MyAnnotation { } 
 \ No newline at end of file 
 + @ interface MyAnnotation1 { } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputArrays . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputArrays . java 
 index 9cbe56d . . 97f18f8 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputArrays . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputArrays . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - package InputAnonymousClasses ; 
 + package com . puppycrawl . tools . checkstyle . indentation ; 
 
 class InputArrays { / / indent : 0 ; exp : 0 ; ok 
 / * * 
 @ @ - 40 , 8 + 40 , 8 @ @ class InputArrays { / / indent : 0 ; exp : 0 ; ok 
 @ VisibleForTesting static final int [ ] halfPowersOf10 = 
 { 3 , 31 , 316 , 3162 , 31622 , 316227 , 3162277 , 31622776 , 316227766 , Integer . MAX _ VALUE } ; 
 
 - @ Override 
 public byte [ ] asBytes ( ) { 
 + byte hash = 0 ; 
 return new byte [ ] { 
 ( byte ) hash , 
 ( byte ) ( hash > > 8 ) , 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputClassesMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputClassesMethods . java 
 index 450daaa . . 6662fbf 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputClassesMethods . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputClassesMethods . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 - import java . util . Iterator ; / / indent : 0 ; exp : 0 ; ok 
 + package com . puppycrawl . tools . checkstyle . indentation ; 
 
 - import IndentationCorrectClassInput . InnerClass ; 
 + import java . util . Iterator ; / / indent : 0 ; exp : 0 ; ok 
 
 class IndentationCorrectClassInput / / indent : 0 ; exp : 0 ; ok 
 implements Runnable , Cloneable { / / indent : 4 ; exp : 4 ; ok 
 @ @ - 25 , 8 + 25 , 7 @ @ class IndentationCorrectClassInput / / indent : 0 ; exp : 0 ; ok 
 public void run ( ) { / / indent : 2 ; exp : 2 ; ok 
 SecondClassWithLongLongLongLongName anon = / / indent : 4 ; exp : 4 ; ok 
 new SecondClassWithLongLongLongLongName ( ) { / / indent : 8 ; exp : 8 ; ok 
 - @ MyAnnotation 
 - @ Override 
 + @ MyAnnotation2 
 String longLongLongLongLongMethodName ( ) { / / indent : 14 ; exp : 14 ; ok 
 return " String " ; / / indent : 12 ; exp : 12 ; ok 
 } / / indent : 10 ; exp : 10 ; ok 
 @ @ - 54 , 7 + 53 , 7 @ @ class SecondClassWithLongLongLongLongName / / indent : 0 ; exp : 0 ; ok 
 } / / indent : 2 ; exp : 2 ; ok 
 } / / indent : 0 ; exp : 0 ; ok 
 
 - @ interface MyAnnotation { } 
 + @ interface MyAnnotation2 { } 
 
 - @ MyAnnotation 
 + @ MyAnnotation2 
 class Foo { } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputInvalidClassDefIndent . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputInvalidClassDefIndent . java 
 index 95ae37a . . d56afdb 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputInvalidClassDefIndent . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputInvalidClassDefIndent . java 
 @ @ - 36 , 21 + 36 , 21 @ @ class InputInvalidClassDefIndentB extends java . awt . event . MouseAdapter implements 
 
 
 
 - class InputValidClassDefIndent2 
 + class InputValidClassDefIndent22 
 extends java . awt . event . MouseAdapter 
 implements java . awt . event . MouseListener 
 { 
 
 } 
 
 - class InputValidClassDefIndent3 
 + class InputValidClassDefIndent33 
 extends java . awt . event . MouseAdapter 
 implements java . awt . event . MouseListener 
 { 
 
 } 
 
 - final class InputValidClassDefIndent4 
 + final class InputValidClassDefIndent44 
 extends java . awt . event . MouseAdapter 
 implements 
 java . awt . event . MouseListener 
 @ @ - 58 , 7 + 58 , 7 @ @ final class InputValidClassDefIndent4 
 
 } 
 
 - final class InputValidClassDefIndent5 extends java . awt . event . MouseAdapter implements java . awt . event . MouseListener 
 + final class InputValidClassDefIndent55 extends java . awt . event . MouseAdapter implements java . awt . event . MouseListener 
 { 
 
 } 
 @ @ - 78 , 7 + 78 , 7 @ @ class InputInvalidClassDefIndentc 
 
 
 
 - final class InputValidClassDefIndent6 extends java . awt . event . MouseAdapter implements java . awt . event . MouseListener { 
 + final class InputValidClassDefIndent66 extends java . awt . event . MouseAdapter implements java . awt . event . MouseListener { 
 
 class foo { } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputLabels . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputLabels . java 
 index 1ecfe74 . . 6bcf448 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputLabels . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputLabels . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - package InputLabels ; / / indent : 0 ; exp : 0 ; ok 
 + package com . puppycrawl . tools . checkstyle . indentation ; / / indent : 0 ; exp : 0 ; ok 
 
 class InputLabels { / / indent : 0 ; exp : 0 ; ok 
 void foo ( ) { / / indent : 2 ; exp : 2 ; ok 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputMembers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputMembers . java 
 index f1cfb8b . . e8ec31e 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputMembers . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputMembers . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 + package com . puppycrawl . tools . checkstyle . indentation ; 
 import java . util . HashMap ; 
 - 
 - 
 + import java . util . Map ; 
 / * * 
 * Some Javadoc . 
 * / 
 @ @ - 74 , 7 + 74 , 6 @ @ abstract class WithAnnotations { / / indent : 0 ; exp : 0 ; ok 
 + " Charset " ) / / indent : 6 ; exp : 6 ; ok 
 public static final int FOO _ CONSTANT = 111 ; / / indent : 2 ; exp : 2 ; ok 
 
 - @ Override 
 private void foo34 ( ) { } 
 final Map < String , String > / / indent : 2 ; exp : 2 ; ok 
 comeMapWithLongName = new HashMap / / indent : 6 ; exp : 6 ; ok 
 @ @ - 85 , 7 + 84 , 7 @ @ abstract class WithAnnotations { / / indent : 0 ; exp : 0 ; ok 
 return new byte [ ] { } ; 
 } 
 
 - @ MyAnnotation public abstract ImmutableMap < R , Map < C , V > > rowMap ( ) ; 
 + @ MyAnnotation public abstract < K , V > Map < K , V > rowMap ( ) ; 
 } / / indent : 0 ; exp : 0 ; ok 
 
 @ interface GwtIncompatible { / / indent : 0 ; exp : 0 ; ok 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputSwitchCustom . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputSwitchCustom . java 
 index 683eab9 . . e1b820d 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputSwitchCustom . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputSwitchCustom . java 
 @ @ - 1 , 4 + 1 , 10 @ @ 
 - public class MyClass { 
 + package com . puppycrawl . tools . checkstyle . indentation ; 
 + 
 + public class InputSwitchCustom { 
 + private static final int ABC1 = 0 ; 
 + private static final int ABC2 = 0 ; 
 + private static final int ABC3 = 0 ; 
 + 
 public int getValue ( int value ) { 
 switch ( value ) { 
 case 0 : return ABC1 ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidArrayInitDefaultIndent . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidArrayInitDefaultIndent . java 
 index 8167db4 . . 8e826e3 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidArrayInitDefaultIndent . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidArrayInitDefaultIndent . java 
 @ @ - 6 , 7 + 6 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . indentation ; 
 
 - public class InputValidArrayInitIndent { 
 + public class InputValidArrayInitDefaultIndent { 
 
 private static char [ ] sHexChars = { 
 ' 0 ' , ' 1 ' , ' 2 ' , ' 3 ' , ' 4 ' , ' 5 ' , ' 6 ' , ' 7 ' , 
 @ @ - 93 , 7 + 93 , 7 @ @ public class InputValidArrayInitIndent { 
 } 
 
 / * * Creates a new instance of InputValidArrayInitIndent * / 
 - public InputValidArrayInitIndent ( ) { 
 + public InputValidArrayInitDefaultIndent ( ) { 
 
 func1 ( new int [ ] { 1 , 2 } ) ; 
 func1 ( new int [ ] { } ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidIfIndent . java b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidIfIndent . java 
 index 50d1ffe . . ef3d877 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidIfIndent . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / indentation / InputValidIfIndent . java 
 @ @ - 245 , 6 + 245 , 7 @ @ public class InputValidIfIndent { 
 
 class FooFoo { 
 void foo42 ( ) { 
 + boolean test = false ; 
 if ( test ) { 
 System . getProperty ( " blah " ) ; 
 } else if ( 7 < 8
