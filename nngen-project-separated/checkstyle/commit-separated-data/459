BLEU SCORE: 0.040631532210698235

TEST MSG: Issue # 4605 : increased pitest coverage for utils package
GENERATED MSG: Issue # 4394 : increase coverage of pitest - checkstyle - filters with added api package profile to 85 %

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 329f117 . . 9624ab2 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2318 , 22 + 2318 , 16 @ @ <nl> < / targetClasses > <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . utils . * < / param > <nl> + < ! - - 10 % mutation in CommonUtils - - > <nl> < param > com . puppycrawl . tools . checkstyle . checks . coding . * < / param > <nl> + < ! - - 2 % mutation in CommonUtils , 3 % coverage in CommonUtils , 2 % coverage in JavadocUtils - - > <nl> < param > com . puppycrawl . tools . checkstyle . AstTreeStringPrinterTest < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest < / param > <nl> + < ! - - 2 % mutation in CommonUtils - - > <nl> < param > com . puppycrawl . tools . checkstyle . DetailNodeTreeStringPrinterTest < / param > <nl> + < ! - - ModuleReflectionUtils - - > <nl> < param > com . puppycrawl . tools . checkstyle . PackageObjectFactoryTest < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . checks . FinalParametersCheckTest < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . checks . TranslationCheckTest < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheckTest < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . checks . coding . MultipleVariableDeclarationsCheckTest < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . checks . design . FinalClassCheckTest < / param > <nl> + < ! - - 3 % mutation in BlockCommentPosition , 11 % mutation in JavadocUtils , 10 % coverage in JavadocUtils , ScopeUtils - - > <nl> < param > com . puppycrawl . tools . checkstyle . checks . javadoc . * < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . checks . regexp . RegexpOnFilenameCheckTest < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . checks . whitespace . * < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . filters . SuppressionCommentFilter < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . filters . SuppressWithNearbyCommentFilterTest < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . internal . AllChecksTest < / param > <nl> < / targetTests > <nl> < coverageThreshold > 100 < / coverageThreshold > <nl> < mutationThreshold > 100 < / mutationThreshold > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> index 0123980 . . 42bd0e4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> @ @ - 44 , 8 + 44 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . internal . utils . TestUtil ; <nl> - import com . puppycrawl . tools . checkstyle . utils . BlockCommentPosition ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; <nl> <nl> @ @ - 208 , 12 + 206 , 6 @ @ public class AbstractJavadocCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testBlockCommentPositionHasPrivateConstr ( ) throws Exception { <nl> - Assert . assertTrue ( " Constructor is not private " , <nl> - TestUtil . isUtilsClassHasPrivateConstructor ( BlockCommentPosition . class , true ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void testTokens ( ) { <nl> final int [ ] defaultJavadocTokens = { JavadocTokenTypes . JAVADOC } ; <nl> final AbstractJavadocCheck check = new AbstractJavadocCheck ( ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java <nl> index dfc1c9d . . d82a70c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle . utils ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> import java . io . File ; <nl> import java . util . Arrays ; <nl> @ @ - 36 , 6 + 37 , 12 @ @ import com . puppycrawl . tools . checkstyle . internal . utils . TestUtil ; <nl> public class BlockCommentPositionTest extends AbstractPathTestSupport { <nl> <nl> @ Test <nl> + public void testPrivateConstr ( ) throws Exception { <nl> + assertTrue ( " Constructor is not private " , <nl> + TestUtil . isUtilsClassHasPrivateConstructor ( BlockCommentPosition . class , true ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testJavaDocsRecognition ( ) throws Exception { <nl> final List < BlockCommentPositionTestMetadata > metadataList = Arrays . asList ( <nl> new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnClass . java " , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java <nl> index abdde4a . . fbd3518 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java <nl> @ @ - 310 , 6 + 310 , 21 @ @ public class CheckUtilsTest extends AbstractPathTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testGetFirstNode2 ( ) { <nl> + final DetailAST child = new DetailAST ( ) ; <nl> + child . setLineNo ( 6 ) ; <nl> + child . setColumnNo ( 5 ) ; <nl> + <nl> + final DetailAST root = new DetailAST ( ) ; <nl> + root . setLineNo ( 5 ) ; <nl> + root . setColumnNo ( 6 ) ; <nl> + <nl> + root . addChild ( child ) ; <nl> + <nl> + assertEquals ( " Unexpected node " , root , CheckUtils . getFirstNode ( root ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testIsReceiverParameter ( ) throws Exception { <nl> final DetailAST objBlock = getNodeFromFile ( TokenTypes . OBJBLOCK ) ; <nl> final DetailAST methodWithReceiverParameter = objBlock . getLastChild ( ) . getPreviousSibling ( ) ; <nl> @ @ - 344 , 11 + 359 , 14 @ @ public class CheckUtilsTest extends AbstractPathTestSupport { <nl> <nl> @ Test <nl> public void testParseClassNames ( ) { <nl> - final String className = " I . am . class . name . with . dot . in . the . end . " ; <nl> - final Set < String > result = CheckUtils . parseClassNames ( className ) ; <nl> + final Set < String > actual = CheckUtils . parseClassNames ( <nl> + " I . am . class . name . with . dot . in . the . end . " , " ClassOnly " , " my . Class " ) ; <nl> final Set < String > expected = new HashSet < > ( ) ; <nl> - expected . add ( className ) ; <nl> - assertEquals ( " Result is not expected " , expected , result ) ; <nl> + expected . add ( " I . am . class . name . with . dot . in . the . end . " ) ; <nl> + expected . add ( " ClassOnly " ) ; <nl> + expected . add ( " my . Class " ) ; <nl> + expected . add ( " Class " ) ; <nl> + assertEquals ( " Result is not expected " , expected , actual ) ; <nl> } <nl> <nl> private DetailAST getNodeFromFile ( int type ) throws Exception { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> index 1a7cfae . . 7ee3e89 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> @ @ - 92 , 6 + 92 , 13 @ @ public class CommonUtilsTest { <nl> } <nl> <nl> @ Test <nl> + public void testCreatePattern ( ) { <nl> + assertEquals ( " invalid pattern " , " Test " , CommonUtils . createPattern ( " Test " ) . pattern ( ) ) ; <nl> + assertEquals ( " invalid pattern " , " . * Pattern . * " , CommonUtils . createPattern ( " . * Pattern . * " ) <nl> + . pattern ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testBadRegex ( ) { <nl> try { <nl> CommonUtils . createPattern ( " [ " ) ; <nl> @ @ - 143 , 6 + 150 , 8 @ @ public class CommonUtilsTest { <nl> assertFalse ( " Invalid file extension " , <nl> CommonUtils . matchesFileExtension ( pdfFile , fileExtensions ) ) ; <nl> assertTrue ( " Invalid file extension " , <nl> + CommonUtils . matchesFileExtension ( pdfFile ) ) ; <nl> + assertTrue ( " Invalid file extension " , <nl> CommonUtils . matchesFileExtension ( pdfFile , ( String [ ] ) null ) ) ; <nl> final File javaFile = new File ( " file . java " ) ; <nl> assertTrue ( " Invalid file extension " , <nl> @ @ - 150 , 6 + 159 , 20 @ @ public class CommonUtilsTest { <nl> final File emptyExtensionFile = new File ( " file . " ) ; <nl> assertTrue ( " Invalid file extension " , <nl> CommonUtils . matchesFileExtension ( emptyExtensionFile , " " ) ) ; <nl> + assertFalse ( " Invalid file extension " , <nl> + CommonUtils . matchesFileExtension ( pdfFile , " . noMatch " ) ) ; <nl> + assertTrue ( " Invalid file extension " , <nl> + CommonUtils . matchesFileExtension ( pdfFile , " . pdf " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testHasWhitespaceBefore ( ) { <nl> + assertTrue ( " Invalid result " , <nl> + CommonUtils . hasWhitespaceBefore ( 0 , " a " ) ) ; <nl> + assertTrue ( " Invalid result " , <nl> + CommonUtils . hasWhitespaceBefore ( 4 , " a " ) ) ; <nl> + assertFalse ( " Invalid result " , <nl> + CommonUtils . hasWhitespaceBefore ( 5 , " a " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 266 , 10 + 289 , 36 @ @ public class CommonUtilsTest { <nl> } <nl> <nl> @ Test <nl> - public void testGetFileExtensionForFileNameWithoutExtension ( ) { <nl> - final String fileNameWithoutExtension = " file " ; <nl> - final String extension = CommonUtils . getFileExtension ( fileNameWithoutExtension ) ; <nl> - assertEquals ( " Invalid extension " , " " , extension ) ; <nl> + public void testFillTemplateWithStringsByRegexp ( ) { <nl> + assertEquals ( " invalid result " , " template " , CommonUtils . fillTemplateWithStringsByRegexp ( <nl> + " template " , " lineToPlaceInTemplate " , Pattern . compile ( " NO MATCH " ) ) ) ; <nl> + assertEquals ( <nl> + " invalid result " , <nl> + " before word after " , <nl> + CommonUtils . fillTemplateWithStringsByRegexp ( " before $ 0 after " , " word " , <nl> + Pattern . compile ( " \ \ w + " ) ) ) ; <nl> + assertEquals ( " invalid result " , " before word 123 after1 word after2 123 after3 " , <nl> + CommonUtils . fillTemplateWithStringsByRegexp ( " before $ 0 after1 $ 1 after2 $ 2 after3 " , <nl> + " word 123 " , Pattern . compile ( " ( \ \ w + ) ( \ \ d + ) " ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetFileNameWithoutExtension ( ) { <nl> + assertEquals ( " invalid result " , " filename " , <nl> + CommonUtils . getFileNameWithoutExtension ( " filename " ) ) ; <nl> + assertEquals ( " invalid result " , " filename " , <nl> + CommonUtils . getFileNameWithoutExtension ( " filename . extension " ) ) ; <nl> + assertEquals ( " invalid result " , " filename . subext " , <nl> + CommonUtils . getFileNameWithoutExtension ( " filename . subext . extension " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetFileExtension ( ) { <nl> + assertEquals ( " Invalid extension " , " " , CommonUtils . getFileExtension ( " filename " ) ) ; <nl> + assertEquals ( " Invalid extension " , " extension " , <nl> + CommonUtils . getFileExtension ( " filename . extension " ) ) ; <nl> + assertEquals ( " Invalid extension " , " extension " , <nl> + CommonUtils . getFileExtension ( " filename . subext . extension " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java <nl> index e03e7d2 . . 7629190 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java <nl> @ @ - 361 , 4 + 361 , 11 @ @ public class JavadocUtilsTest { <nl> assertEquals ( " Unexpected token name " , <nl> " WBR _ TAG " , JavadocUtils . getTokenName ( 10079 ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testEscapeAllControlChars ( ) { <nl> + assertEquals ( " invalid result " , " abc " , JavadocUtils . escapeAllControlChars ( " abc " ) ) ; <nl> + assertEquals ( " invalid result " , " 1 \ \ r2 \ \ n3 \ \ t " , <nl> + JavadocUtils . escapeAllControlChars ( " 1 \ \ r2 \ \ n3 \ \ t " ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java <nl> index d18b588 . . e7b46c3 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java <nl> @ @ - 39 , 51 + 39 , 46 @ @ public class ScopeUtilsTest { <nl> } <nl> <nl> @ Test <nl> - public void testInEnumOnRoot ( ) { <nl> + public void testInEnumBlock ( ) { <nl> assertFalse ( " Should return false when passed is not enum " , <nl> ScopeUtils . isInEnumBlock ( new DetailAST ( ) ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testInEnumBlockInNew ( ) { <nl> assertFalse ( " Should return false when passed is not enum " , <nl> ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . LITERAL _ NEW , <nl> TokenTypes . MODIFIERS ) ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testInEnumBlockWithEnum ( ) { <nl> assertTrue ( " Should return true when passed is enum " , <nl> ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . OBJBLOCK , TokenTypes . ENUM _ DEF , <nl> TokenTypes . MODIFIERS ) ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testInEnumBlockInInterface ( ) { <nl> assertFalse ( " Should return false when passed is not enum " , <nl> - ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . INTERFACE _ DEF , <nl> + ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . ENUM _ DEF , TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . MODIFIERS ) ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testInEnumBlockInAnnotation ( ) { <nl> assertFalse ( " Should return false when passed is not enum " , <nl> - ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . ANNOTATION _ DEF , <nl> + ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . ENUM _ DEF , TokenTypes . ANNOTATION _ DEF , <nl> TokenTypes . MODIFIERS ) ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testInEnumBlockInClass ( ) { <nl> assertFalse ( " Should return false when passed is not enum " , <nl> - ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . CLASS _ DEF , <nl> + ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . ENUM _ DEF , TokenTypes . CLASS _ DEF , <nl> TokenTypes . MODIFIERS ) ) ) ; <nl> + assertFalse ( " Should return false when passed is not enum " , <nl> + ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . ENUM _ DEF , TokenTypes . LITERAL _ NEW , <nl> + TokenTypes . IDENT ) ) ) ; <nl> + assertFalse ( " Should return false when passed is not expected " , <nl> + ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . PACKAGE _ DEF , TokenTypes . DOT ) ) ) ; <nl> } <nl> <nl> @ Test <nl> - public void testInEnumBlockInLiteralNew ( ) { <nl> - assertFalse ( " Should return false when passed is not enum " , <nl> - ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . LITERAL _ NEW , <nl> - TokenTypes . IDENT ) ) ) ; <nl> + public void testIsInCodeBlock ( ) { <nl> + assertFalse ( " invalid result " , ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . CLASS _ DEF ) ) ) ; <nl> + assertFalse ( " invalid result " , <nl> + ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . ASSIGN , TokenTypes . VARIABLE _ DEF ) ) ) ; <nl> + assertTrue ( " invalid result " , <nl> + ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . METHOD _ DEF , TokenTypes . OBJBLOCK ) ) ) ; <nl> + assertTrue ( " invalid result " , <nl> + ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . CTOR _ DEF , TokenTypes . OBJBLOCK ) ) ) ; <nl> + assertTrue ( " invalid result " , <nl> + ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . INSTANCE _ INIT , TokenTypes . OBJBLOCK ) ) ) ; <nl> + assertTrue ( " invalid result " , <nl> + ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . STATIC _ INIT , TokenTypes . OBJBLOCK ) ) ) ; <nl> + assertTrue ( " invalid result " , <nl> + ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . LAMBDA , TokenTypes . ASSIGN ) ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 113 , 6 + 108 , 12 @ @ public class ScopeUtilsTest { <nl> } <nl> <nl> @ Test <nl> + public void testIsOuterMostTypePackageDef ( ) { <nl> + assertTrue ( " Should return false when passed is not outer most type " , <nl> + ScopeUtils . isOuterMostType ( getNode ( TokenTypes . PACKAGE _ DEF , TokenTypes . DOT ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testIsLocalVariableDefCatch ( ) { <nl> assertTrue ( " Should return true when passed is variable def " , <nl> ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . LITERAL _ CATCH , <nl> @ @ - 123 , 6 + 124 , 26 @ @ public class ScopeUtilsTest { <nl> public void testIsLocalVariableDefUnexpected ( ) { <nl> assertFalse ( " Should return false when passed is not variable def " , <nl> ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . LITERAL _ CATCH ) ) ) ; <nl> + assertFalse ( " Should return false when passed is not variable def " , <nl> + ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . COMMA , TokenTypes . PARAMETER _ DEF ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsLocalVariableDefResource ( ) { <nl> + assertTrue ( " invalid result " , <nl> + ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . RESOURCE ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsLocalVariableDefVariable ( ) { <nl> + assertTrue ( " invalid result " , <nl> + ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . SLIST , TokenTypes . VARIABLE _ DEF ) ) ) ; <nl> + assertTrue ( " invalid result " , ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . FOR _ INIT , <nl> + TokenTypes . VARIABLE _ DEF ) ) ) ; <nl> + assertTrue ( " invalid result " , ScopeUtils . isLocalVariableDef ( getNode ( <nl> + TokenTypes . FOR _ EACH _ CLAUSE , TokenTypes . VARIABLE _ DEF ) ) ) ; <nl> + assertFalse ( " invalid result " , ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . CLASS _ DEF , <nl> + TokenTypes . VARIABLE _ DEF ) ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 130 , 6 + 151 , 11 @ @ public class ScopeUtilsTest { <nl> assertTrue ( " Should return true when passed is class field def " , <nl> ScopeUtils . isClassFieldDef ( getNode ( TokenTypes . CLASS _ DEF , <nl> TokenTypes . OBJBLOCK , TokenTypes . VARIABLE _ DEF ) ) ) ; <nl> + assertFalse ( " Should return false when passed is unexpected " , <nl> + ScopeUtils . isClassFieldDef ( getNode ( TokenTypes . CLASS _ DEF ) ) ) ; <nl> + assertFalse ( " Should return false when passed is method variable def " , <nl> + ScopeUtils . isClassFieldDef ( getNode ( TokenTypes . METHOD _ DEF , <nl> + TokenTypes . SLIST , TokenTypes . VARIABLE _ DEF ) ) ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index e6bb029 . . 8b62785 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 22 , 7 + 22 , 7 @ @ <nl> <nl> < groupId > com . puppycrawl . tools < / groupId > <nl> < artifactId > checkstyle < / artifactId > <nl> - < version > 7 . 8 < / version > <nl> + < version > 7 . 9 - SNAPSHOT < / version > <nl> < packaging > jar < / packaging > <nl> <nl> < name > checkstyle < / name >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 329f117 . . 9624ab2 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2318 , 22 + 2318 , 16 @ @ 
 < / targetClasses > 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . utils . * < / param > 
 + < ! - - 10 % mutation in CommonUtils - - > 
 < param > com . puppycrawl . tools . checkstyle . checks . coding . * < / param > 
 + < ! - - 2 % mutation in CommonUtils , 3 % coverage in CommonUtils , 2 % coverage in JavadocUtils - - > 
 < param > com . puppycrawl . tools . checkstyle . AstTreeStringPrinterTest < / param > 
 - < param > com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest < / param > 
 + < ! - - 2 % mutation in CommonUtils - - > 
 < param > com . puppycrawl . tools . checkstyle . DetailNodeTreeStringPrinterTest < / param > 
 + < ! - - ModuleReflectionUtils - - > 
 < param > com . puppycrawl . tools . checkstyle . PackageObjectFactoryTest < / param > 
 - < param > com . puppycrawl . tools . checkstyle . checks . FinalParametersCheckTest < / param > 
 - < param > com . puppycrawl . tools . checkstyle . checks . TranslationCheckTest < / param > 
 - < param > com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheckTest < / param > 
 - < param > com . puppycrawl . tools . checkstyle . checks . coding . MultipleVariableDeclarationsCheckTest < / param > 
 - < param > com . puppycrawl . tools . checkstyle . checks . design . FinalClassCheckTest < / param > 
 + < ! - - 3 % mutation in BlockCommentPosition , 11 % mutation in JavadocUtils , 10 % coverage in JavadocUtils , ScopeUtils - - > 
 < param > com . puppycrawl . tools . checkstyle . checks . javadoc . * < / param > 
 - < param > com . puppycrawl . tools . checkstyle . checks . regexp . RegexpOnFilenameCheckTest < / param > 
 - < param > com . puppycrawl . tools . checkstyle . checks . whitespace . * < / param > 
 - < param > com . puppycrawl . tools . checkstyle . filters . SuppressionCommentFilter < / param > 
 - < param > com . puppycrawl . tools . checkstyle . filters . SuppressWithNearbyCommentFilterTest < / param > 
 - < param > com . puppycrawl . tools . checkstyle . internal . AllChecksTest < / param > 
 < / targetTests > 
 < coverageThreshold > 100 < / coverageThreshold > 
 < mutationThreshold > 100 < / mutationThreshold > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 index 0123980 . . 42bd0e4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 @ @ - 44 , 8 + 44 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . internal . utils . TestUtil ; 
 - import com . puppycrawl . tools . checkstyle . utils . BlockCommentPosition ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; 
 
 @ @ - 208 , 12 + 206 , 6 @ @ public class AbstractJavadocCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 - public void testBlockCommentPositionHasPrivateConstr ( ) throws Exception { 
 - Assert . assertTrue ( " Constructor is not private " , 
 - TestUtil . isUtilsClassHasPrivateConstructor ( BlockCommentPosition . class , true ) ) ; 
 - } 
 - 
 - @ Test 
 public void testTokens ( ) { 
 final int [ ] defaultJavadocTokens = { JavadocTokenTypes . JAVADOC } ; 
 final AbstractJavadocCheck check = new AbstractJavadocCheck ( ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java 
 index dfc1c9d . . d82a70c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle . utils ; 
 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 
 import java . io . File ; 
 import java . util . Arrays ; 
 @ @ - 36 , 6 + 37 , 12 @ @ import com . puppycrawl . tools . checkstyle . internal . utils . TestUtil ; 
 public class BlockCommentPositionTest extends AbstractPathTestSupport { 
 
 @ Test 
 + public void testPrivateConstr ( ) throws Exception { 
 + assertTrue ( " Constructor is not private " , 
 + TestUtil . isUtilsClassHasPrivateConstructor ( BlockCommentPosition . class , true ) ) ; 
 + } 
 + 
 + @ Test 
 public void testJavaDocsRecognition ( ) throws Exception { 
 final List < BlockCommentPositionTestMetadata > metadataList = Arrays . asList ( 
 new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnClass . java " , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java 
 index abdde4a . . fbd3518 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CheckUtilsTest . java 
 @ @ - 310 , 6 + 310 , 21 @ @ public class CheckUtilsTest extends AbstractPathTestSupport { 
 } 
 
 @ Test 
 + public void testGetFirstNode2 ( ) { 
 + final DetailAST child = new DetailAST ( ) ; 
 + child . setLineNo ( 6 ) ; 
 + child . setColumnNo ( 5 ) ; 
 + 
 + final DetailAST root = new DetailAST ( ) ; 
 + root . setLineNo ( 5 ) ; 
 + root . setColumnNo ( 6 ) ; 
 + 
 + root . addChild ( child ) ; 
 + 
 + assertEquals ( " Unexpected node " , root , CheckUtils . getFirstNode ( root ) ) ; 
 + } 
 + 
 + @ Test 
 public void testIsReceiverParameter ( ) throws Exception { 
 final DetailAST objBlock = getNodeFromFile ( TokenTypes . OBJBLOCK ) ; 
 final DetailAST methodWithReceiverParameter = objBlock . getLastChild ( ) . getPreviousSibling ( ) ; 
 @ @ - 344 , 11 + 359 , 14 @ @ public class CheckUtilsTest extends AbstractPathTestSupport { 
 
 @ Test 
 public void testParseClassNames ( ) { 
 - final String className = " I . am . class . name . with . dot . in . the . end . " ; 
 - final Set < String > result = CheckUtils . parseClassNames ( className ) ; 
 + final Set < String > actual = CheckUtils . parseClassNames ( 
 + " I . am . class . name . with . dot . in . the . end . " , " ClassOnly " , " my . Class " ) ; 
 final Set < String > expected = new HashSet < > ( ) ; 
 - expected . add ( className ) ; 
 - assertEquals ( " Result is not expected " , expected , result ) ; 
 + expected . add ( " I . am . class . name . with . dot . in . the . end . " ) ; 
 + expected . add ( " ClassOnly " ) ; 
 + expected . add ( " my . Class " ) ; 
 + expected . add ( " Class " ) ; 
 + assertEquals ( " Result is not expected " , expected , actual ) ; 
 } 
 
 private DetailAST getNodeFromFile ( int type ) throws Exception { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 index 1a7cfae . . 7ee3e89 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 @ @ - 92 , 6 + 92 , 13 @ @ public class CommonUtilsTest { 
 } 
 
 @ Test 
 + public void testCreatePattern ( ) { 
 + assertEquals ( " invalid pattern " , " Test " , CommonUtils . createPattern ( " Test " ) . pattern ( ) ) ; 
 + assertEquals ( " invalid pattern " , " . * Pattern . * " , CommonUtils . createPattern ( " . * Pattern . * " ) 
 + . pattern ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testBadRegex ( ) { 
 try { 
 CommonUtils . createPattern ( " [ " ) ; 
 @ @ - 143 , 6 + 150 , 8 @ @ public class CommonUtilsTest { 
 assertFalse ( " Invalid file extension " , 
 CommonUtils . matchesFileExtension ( pdfFile , fileExtensions ) ) ; 
 assertTrue ( " Invalid file extension " , 
 + CommonUtils . matchesFileExtension ( pdfFile ) ) ; 
 + assertTrue ( " Invalid file extension " , 
 CommonUtils . matchesFileExtension ( pdfFile , ( String [ ] ) null ) ) ; 
 final File javaFile = new File ( " file . java " ) ; 
 assertTrue ( " Invalid file extension " , 
 @ @ - 150 , 6 + 159 , 20 @ @ public class CommonUtilsTest { 
 final File emptyExtensionFile = new File ( " file . " ) ; 
 assertTrue ( " Invalid file extension " , 
 CommonUtils . matchesFileExtension ( emptyExtensionFile , " " ) ) ; 
 + assertFalse ( " Invalid file extension " , 
 + CommonUtils . matchesFileExtension ( pdfFile , " . noMatch " ) ) ; 
 + assertTrue ( " Invalid file extension " , 
 + CommonUtils . matchesFileExtension ( pdfFile , " . pdf " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testHasWhitespaceBefore ( ) { 
 + assertTrue ( " Invalid result " , 
 + CommonUtils . hasWhitespaceBefore ( 0 , " a " ) ) ; 
 + assertTrue ( " Invalid result " , 
 + CommonUtils . hasWhitespaceBefore ( 4 , " a " ) ) ; 
 + assertFalse ( " Invalid result " , 
 + CommonUtils . hasWhitespaceBefore ( 5 , " a " ) ) ; 
 } 
 
 @ Test 
 @ @ - 266 , 10 + 289 , 36 @ @ public class CommonUtilsTest { 
 } 
 
 @ Test 
 - public void testGetFileExtensionForFileNameWithoutExtension ( ) { 
 - final String fileNameWithoutExtension = " file " ; 
 - final String extension = CommonUtils . getFileExtension ( fileNameWithoutExtension ) ; 
 - assertEquals ( " Invalid extension " , " " , extension ) ; 
 + public void testFillTemplateWithStringsByRegexp ( ) { 
 + assertEquals ( " invalid result " , " template " , CommonUtils . fillTemplateWithStringsByRegexp ( 
 + " template " , " lineToPlaceInTemplate " , Pattern . compile ( " NO MATCH " ) ) ) ; 
 + assertEquals ( 
 + " invalid result " , 
 + " before word after " , 
 + CommonUtils . fillTemplateWithStringsByRegexp ( " before $ 0 after " , " word " , 
 + Pattern . compile ( " \ \ w + " ) ) ) ; 
 + assertEquals ( " invalid result " , " before word 123 after1 word after2 123 after3 " , 
 + CommonUtils . fillTemplateWithStringsByRegexp ( " before $ 0 after1 $ 1 after2 $ 2 after3 " , 
 + " word 123 " , Pattern . compile ( " ( \ \ w + ) ( \ \ d + ) " ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetFileNameWithoutExtension ( ) { 
 + assertEquals ( " invalid result " , " filename " , 
 + CommonUtils . getFileNameWithoutExtension ( " filename " ) ) ; 
 + assertEquals ( " invalid result " , " filename " , 
 + CommonUtils . getFileNameWithoutExtension ( " filename . extension " ) ) ; 
 + assertEquals ( " invalid result " , " filename . subext " , 
 + CommonUtils . getFileNameWithoutExtension ( " filename . subext . extension " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetFileExtension ( ) { 
 + assertEquals ( " Invalid extension " , " " , CommonUtils . getFileExtension ( " filename " ) ) ; 
 + assertEquals ( " Invalid extension " , " extension " , 
 + CommonUtils . getFileExtension ( " filename . extension " ) ) ; 
 + assertEquals ( " Invalid extension " , " extension " , 
 + CommonUtils . getFileExtension ( " filename . subext . extension " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java 
 index e03e7d2 . . 7629190 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java 
 @ @ - 361 , 4 + 361 , 11 @ @ public class JavadocUtilsTest { 
 assertEquals ( " Unexpected token name " , 
 " WBR _ TAG " , JavadocUtils . getTokenName ( 10079 ) ) ; 
 } 
 + 
 + @ Test 
 + public void testEscapeAllControlChars ( ) { 
 + assertEquals ( " invalid result " , " abc " , JavadocUtils . escapeAllControlChars ( " abc " ) ) ; 
 + assertEquals ( " invalid result " , " 1 \ \ r2 \ \ n3 \ \ t " , 
 + JavadocUtils . escapeAllControlChars ( " 1 \ \ r2 \ \ n3 \ \ t " ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java 
 index d18b588 . . e7b46c3 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java 
 @ @ - 39 , 51 + 39 , 46 @ @ public class ScopeUtilsTest { 
 } 
 
 @ Test 
 - public void testInEnumOnRoot ( ) { 
 + public void testInEnumBlock ( ) { 
 assertFalse ( " Should return false when passed is not enum " , 
 ScopeUtils . isInEnumBlock ( new DetailAST ( ) ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testInEnumBlockInNew ( ) { 
 assertFalse ( " Should return false when passed is not enum " , 
 ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . LITERAL _ NEW , 
 TokenTypes . MODIFIERS ) ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testInEnumBlockWithEnum ( ) { 
 assertTrue ( " Should return true when passed is enum " , 
 ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . OBJBLOCK , TokenTypes . ENUM _ DEF , 
 TokenTypes . MODIFIERS ) ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testInEnumBlockInInterface ( ) { 
 assertFalse ( " Should return false when passed is not enum " , 
 - ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . INTERFACE _ DEF , 
 + ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . ENUM _ DEF , TokenTypes . INTERFACE _ DEF , 
 TokenTypes . MODIFIERS ) ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testInEnumBlockInAnnotation ( ) { 
 assertFalse ( " Should return false when passed is not enum " , 
 - ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . ANNOTATION _ DEF , 
 + ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . ENUM _ DEF , TokenTypes . ANNOTATION _ DEF , 
 TokenTypes . MODIFIERS ) ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testInEnumBlockInClass ( ) { 
 assertFalse ( " Should return false when passed is not enum " , 
 - ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . CLASS _ DEF , 
 + ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . ENUM _ DEF , TokenTypes . CLASS _ DEF , 
 TokenTypes . MODIFIERS ) ) ) ; 
 + assertFalse ( " Should return false when passed is not enum " , 
 + ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . ENUM _ DEF , TokenTypes . LITERAL _ NEW , 
 + TokenTypes . IDENT ) ) ) ; 
 + assertFalse ( " Should return false when passed is not expected " , 
 + ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . PACKAGE _ DEF , TokenTypes . DOT ) ) ) ; 
 } 
 
 @ Test 
 - public void testInEnumBlockInLiteralNew ( ) { 
 - assertFalse ( " Should return false when passed is not enum " , 
 - ScopeUtils . isInEnumBlock ( getNode ( TokenTypes . LITERAL _ NEW , 
 - TokenTypes . IDENT ) ) ) ; 
 + public void testIsInCodeBlock ( ) { 
 + assertFalse ( " invalid result " , ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . CLASS _ DEF ) ) ) ; 
 + assertFalse ( " invalid result " , 
 + ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . ASSIGN , TokenTypes . VARIABLE _ DEF ) ) ) ; 
 + assertTrue ( " invalid result " , 
 + ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . METHOD _ DEF , TokenTypes . OBJBLOCK ) ) ) ; 
 + assertTrue ( " invalid result " , 
 + ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . CTOR _ DEF , TokenTypes . OBJBLOCK ) ) ) ; 
 + assertTrue ( " invalid result " , 
 + ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . INSTANCE _ INIT , TokenTypes . OBJBLOCK ) ) ) ; 
 + assertTrue ( " invalid result " , 
 + ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . STATIC _ INIT , TokenTypes . OBJBLOCK ) ) ) ; 
 + assertTrue ( " invalid result " , 
 + ScopeUtils . isInCodeBlock ( getNode ( TokenTypes . LAMBDA , TokenTypes . ASSIGN ) ) ) ; 
 } 
 
 @ Test 
 @ @ - 113 , 6 + 108 , 12 @ @ public class ScopeUtilsTest { 
 } 
 
 @ Test 
 + public void testIsOuterMostTypePackageDef ( ) { 
 + assertTrue ( " Should return false when passed is not outer most type " , 
 + ScopeUtils . isOuterMostType ( getNode ( TokenTypes . PACKAGE _ DEF , TokenTypes . DOT ) ) ) ; 
 + } 
 + 
 + @ Test 
 public void testIsLocalVariableDefCatch ( ) { 
 assertTrue ( " Should return true when passed is variable def " , 
 ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . LITERAL _ CATCH , 
 @ @ - 123 , 6 + 124 , 26 @ @ public class ScopeUtilsTest { 
 public void testIsLocalVariableDefUnexpected ( ) { 
 assertFalse ( " Should return false when passed is not variable def " , 
 ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . LITERAL _ CATCH ) ) ) ; 
 + assertFalse ( " Should return false when passed is not variable def " , 
 + ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . COMMA , TokenTypes . PARAMETER _ DEF ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsLocalVariableDefResource ( ) { 
 + assertTrue ( " invalid result " , 
 + ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . RESOURCE ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsLocalVariableDefVariable ( ) { 
 + assertTrue ( " invalid result " , 
 + ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . SLIST , TokenTypes . VARIABLE _ DEF ) ) ) ; 
 + assertTrue ( " invalid result " , ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . FOR _ INIT , 
 + TokenTypes . VARIABLE _ DEF ) ) ) ; 
 + assertTrue ( " invalid result " , ScopeUtils . isLocalVariableDef ( getNode ( 
 + TokenTypes . FOR _ EACH _ CLAUSE , TokenTypes . VARIABLE _ DEF ) ) ) ; 
 + assertFalse ( " invalid result " , ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . CLASS _ DEF , 
 + TokenTypes . VARIABLE _ DEF ) ) ) ; 
 } 
 
 @ Test 
 @ @ - 130 , 6 + 151 , 11 @ @ public class ScopeUtilsTest { 
 assertTrue ( " Should return true when passed is class field def " , 
 ScopeUtils . isClassFieldDef ( getNode ( TokenTypes . CLASS _ DEF , 
 TokenTypes . OBJBLOCK , TokenTypes . VARIABLE _ DEF ) ) ) ; 
 + assertFalse ( " Should return false when passed is unexpected " , 
 + ScopeUtils . isClassFieldDef ( getNode ( TokenTypes . CLASS _ DEF ) ) ) ; 
 + assertFalse ( " Should return false when passed is method variable def " , 
 + ScopeUtils . isClassFieldDef ( getNode ( TokenTypes . METHOD _ DEF , 
 + TokenTypes . SLIST , TokenTypes . VARIABLE _ DEF ) ) ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index e6bb029 . . 8b62785 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 22 , 7 + 22 , 7 @ @ 
 
 < groupId > com . puppycrawl . tools < / groupId > 
 < artifactId > checkstyle < / artifactId > 
 - < version > 7 . 8 < / version > 
 + < version > 7 . 9 - SNAPSHOT < / version > 
 < packaging > jar < / packaging > 
 
 < name > checkstyle < / name >
