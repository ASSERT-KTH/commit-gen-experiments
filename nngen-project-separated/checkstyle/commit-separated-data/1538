BLEU SCORE: 0.0416725164513856

TEST MSG: minor : attention comment was added
GENERATED MSG: Issue # 2065 : Add suppression for IntelliJ IDEA inspection

TEST DIFF (one line): diff - - git a / config / intellij - idea - inspection - scope . xml b / config / intellij - idea - inspection - scope . xml <nl> index 1883bb0 . . 529a79c 100644 <nl> - - - a / config / intellij - idea - inspection - scope . xml <nl> + + + b / config / intellij - idea - inspection - scope . xml <nl> @ @ - 1 , 3 + 1 , 4 @ @ <nl> + < ! - - ATTENTION : this file is not used by TeamCity , all excludes should be specified in build configuration - - > <nl> < component name = " DependencyValidationManager " > <nl> < scope name = " Checkstyle Inspection Scope " pattern = " ! file : target / / * & amp ; & amp ; ! file : src / test / resources * / / * * & amp ; & amp ; ! file : src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / ParseTreeBuilder . java & amp ; & amp ; ! file : src / site / resources / js / google - analytics . js " / > <nl> < / component >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> index b9394b7 . . 0182aaf 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> @ @ - 109 , 12 + 109 , 21 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { <nl> if ( i = = fileSize ) { <nl> / / if file finished , but we have at least one non - multi - line <nl> / / header isn ' t completed <nl> - for ( ; headerLineNo < headerSize ; headerLineNo + + ) { <nl> - if ( ! isMultiLine ( headerLineNo ) ) { <nl> - log ( 1 , MSG _ HEADER _ MISSING ) ; <nl> - break ; <nl> - } <nl> - } <nl> + logFirstSinglelineLine ( headerLineNo , headerSize ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Logs warning if any non - multiline lines left in header regexp <nl> + * @ param startHeaderLine header line number to start from <nl> + * @ param headerSize whole header size <nl> + * / <nl> + private void logFirstSinglelineLine ( int startHeaderLine , int headerSize ) { <nl> + for ( int lineNum = startHeaderLine ; lineNum < headerSize ; lineNum + + ) { <nl> + if ( ! isMultiLine ( lineNum ) ) { <nl> + log ( 1 , MSG _ HEADER _ MISSING ) ; <nl> + break ; <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / config / intellij - idea - inspection - scope . xml b / config / intellij - idea - inspection - scope . xml 
 index 1883bb0 . . 529a79c 100644 
 - - - a / config / intellij - idea - inspection - scope . xml 
 + + + b / config / intellij - idea - inspection - scope . xml 
 @ @ - 1 , 3 + 1 , 4 @ @ 
 + < ! - - ATTENTION : this file is not used by TeamCity , all excludes should be specified in build configuration - - > 
 < component name = " DependencyValidationManager " > 
 < scope name = " Checkstyle Inspection Scope " pattern = " ! file : target / / * & amp ; & amp ; ! file : src / test / resources * / / * * & amp ; & amp ; ! file : src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / ParseTreeBuilder . java & amp ; & amp ; ! file : src / site / resources / js / google - analytics . js " / > 
 < / component >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 index b9394b7 . . 0182aaf 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 @ @ - 109 , 12 + 109 , 21 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { 
 if ( i = = fileSize ) { 
 / / if file finished , but we have at least one non - multi - line 
 / / header isn ' t completed 
 - for ( ; headerLineNo < headerSize ; headerLineNo + + ) { 
 - if ( ! isMultiLine ( headerLineNo ) ) { 
 - log ( 1 , MSG _ HEADER _ MISSING ) ; 
 - break ; 
 - } 
 - } 
 + logFirstSinglelineLine ( headerLineNo , headerSize ) ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 + * Logs warning if any non - multiline lines left in header regexp 
 + * @ param startHeaderLine header line number to start from 
 + * @ param headerSize whole header size 
 + * / 
 + private void logFirstSinglelineLine ( int startHeaderLine , int headerSize ) { 
 + for ( int lineNum = startHeaderLine ; lineNum < headerSize ; lineNum + + ) { 
 + if ( ! isMultiLine ( lineNum ) ) { 
 + log ( 1 , MSG _ HEADER _ MISSING ) ; 
 + break ; 
 } 
 } 
 }
