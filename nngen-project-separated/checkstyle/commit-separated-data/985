BLEU SCORE: 0.031157290929555895

TEST MSG: Issue # 3720 : verify all tokens are used in checkstyle config
GENERATED MSG: added check for equals ( ) vs . hashCode , RFE # 554373

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> index 06d92fe . . 94a7c2d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> @ @ - 23 , 6 + 23 , 8 @ @ import java . lang . reflect . Field ; <nl> import java . lang . reflect . Modifier ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> + import java . util . HashMap ; <nl> + import java . util . HashSet ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> import java . util . Map ; <nl> @ @ - 30 , 6 + 32 , 8 @ @ import java . util . Map . Entry ; <nl> import java . util . Properties ; <nl> import java . util . Set ; <nl> import java . util . TreeMap ; <nl> + import java . util . stream . Collectors ; <nl> + import java . util . stream . Stream ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 37 , 7 + 41 , 9 @ @ import org . junit . Test ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . ModuleFactory ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . checks . imports . ImportControlCheck ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> @ @ - 55 , 6 + 61 , 134 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> Locale . ENGLISH , <nl> } ; <nl> <nl> + private static final Map < String , Set < String > > TOKENS _ IN _ CONFIG _ TO _ IGNORE = new HashMap < > ( ) ; <nl> + <nl> + static { <nl> + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NoWhitespaceBefore " , Stream . of ( <nl> + / / we use GenericWhitespace for this behavior <nl> + " GENERIC _ START " , " GENERIC _ END " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " AbbreviationAsWordInName " , Stream . of ( <nl> + / / enum values should be uppercase , we use EnumValueNameCheck instead <nl> + " ENUM _ CONSTANT _ DEF " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " FinalLocalVariable " , Stream . of ( <nl> + / / we prefer all parameters be effectively final as to not damage readability <nl> + / / we use ParameterAssignmentCheck to enforce this <nl> + " PARAMETER _ DEF " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + / / we have no need to block these specific tokens <nl> + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " IllegalToken " , <nl> + Stream . of ( " LITERAL _ SUPER " , " LITERAL _ ASSERT " , " ENUM _ CONSTANT _ DEF " , <nl> + " TYPE _ PARAMETERS " , " TYPE _ UPPER _ BOUNDS " , " NUM _ DOUBLE " , " LITERAL _ SWITCH " , <nl> + " ANNOTATIONS " , " LITERAL _ SHORT " , " LITERAL _ PROTECTED " , " FOR _ CONDITION " , <nl> + " FOR _ INIT " , " LITERAL _ LONG " , " MINUS " , " OBJBLOCK " , " LITERAL _ NULL " , <nl> + " ANNOTATION " , " LITERAL _ TRUE " , " COMMENT _ CONTENT " , " LITERAL _ CHAR " , <nl> + " PARAMETER _ DEF " , " POST _ DEC " , " ANNOTATION _ FIELD _ DEF " , " BLOCK _ COMMENT _ END " , <nl> + " TYPE " , " LITERAL _ INT " , " BSR " , " ENUM " , " ANNOTATION _ MEMBER _ VALUE _ PAIR " , <nl> + " TYPECAST " , " LITERAL _ SYNCHRONIZED " , " PLUS _ ASSIGN " , " DOT " , " LPAREN " , <nl> + " LITERAL _ IF " , " LITERAL _ CATCH " , " BAND " , " INTERFACE _ DEF " , " LOR " , " BNOT " , <nl> + " METHOD _ CALL " , " AT " , " ELLIPSIS " , " ARRAY _ INIT " , " FOR _ EACH _ CLAUSE " , <nl> + " LITERAL _ THROWS " , " CHAR _ LITERAL " , " CASE _ GROUP " , " POST _ INC " , " SEMI " , <nl> + " LITERAL _ FINALLY " , " ASSIGN " , " RESOURCE _ SPECIFICATION " , " STATIC _ IMPORT " , <nl> + " GENERIC _ START " , " IMPORT " , " SL " , " VARIABLE _ DEF " , " LITERAL _ DOUBLE " , <nl> + " RCURLY " , " RESOURCE " , " SR " , " COMMA " , " BAND _ ASSIGN " , " METHOD _ DEF " , <nl> + " LITERAL _ VOID " , " NUM _ LONG " , " LITERAL _ TRANSIENT " , " LITERAL _ THIS " , " LCURLY " , <nl> + " MINUS _ ASSIGN " , " TYPE _ LOWER _ BOUNDS " , " TYPE _ ARGUMENT " , " LITERAL _ CLASS " , <nl> + " INSTANCE _ INIT " , " DIV " , " STAR " , " UNARY _ MINUS " , " FOR _ ITERATOR " , " NOT _ EQUAL " , <nl> + " LE " , " LITERAL _ INTERFACE " , " LITERAL _ FLOAT " , " LITERAL _ INSTANCEOF " , <nl> + " BOR _ ASSIGN " , " LT " , " SL _ ASSIGN " , " ELIST " , " ANNOTATION _ ARRAY _ INIT " , <nl> + " MODIFIERS " , " LITERAL _ BREAK " , " EXTENDS _ CLAUSE " , " TYPE _ PARAMETER " , <nl> + " LITERAL _ DEFAULT " , " STATIC _ INIT " , " BSR _ ASSIGN " , " TYPE _ EXTENSION _ AND " , <nl> + " BOR " , " LITERAL _ PRIVATE " , " LITERAL _ THROW " , " LITERAL _ BYTE " , " BXOR " , <nl> + " WILDCARD _ TYPE " , " FINAL " , " PARAMETERS " , " RPAREN " , " SR _ ASSIGN " , <nl> + " UNARY _ PLUS " , " EMPTY _ STAT " , " LITERAL _ STATIC " , " LITERAL _ CONTINUE " , <nl> + " STAR _ ASSIGN " , " LAMBDA " , " RBRACK " , " BXOR _ ASSIGN " , " CTOR _ CALL " , <nl> + " LITERAL _ FALSE " , " DO _ WHILE " , " LITERAL _ PUBLIC " , " LITERAL _ WHILE " , " PLUS " , <nl> + " INC " , " CTOR _ DEF " , " GENERIC _ END " , " DIV _ ASSIGN " , " SLIST " , " LNOT " , " LAND " , <nl> + " LITERAL _ ELSE " , " ABSTRACT " , " STRICTFP " , " QUESTION " , " LITERAL _ NEW " , <nl> + " LITERAL _ RETURN " , " SINGLE _ LINE _ COMMENT " , " INDEX _ OP " , " EXPR " , <nl> + " BLOCK _ COMMENT _ BEGIN " , " PACKAGE _ DEF " , " IMPLEMENTS _ CLAUSE " , " NUM _ FLOAT " , <nl> + " LITERAL _ DO " , " EOF " , " GE " , " RESOURCES " , " MOD " , " DEC " , " EQUAL " , <nl> + " LITERAL _ BOOLEAN " , " CLASS _ DEF " , " COLON " , " LITERAL _ TRY " , " ENUM _ DEF " , " GT " , <nl> + " NUM _ INT " , " ANNOTATION _ DEF " , " METHOD _ REF " , " TYPE _ ARGUMENTS " , <nl> + " DOUBLE _ COLON " , " IDENT " , " MOD _ ASSIGN " , " LITERAL _ FOR " , " SUPER _ CTOR _ CALL " , <nl> + " STRING _ LITERAL " , " ARRAY _ DECLARATOR " , " LITERAL _ CASE " ) . collect ( <nl> + Collectors . toSet ( ) ) ) ; <nl> + / / we have no need to block specific token text <nl> + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " IllegalTokenText " , <nl> + Stream . of ( " LITERAL _ SUPER " , " LITERAL _ ASSERT " , " ENUM _ CONSTANT _ DEF " , <nl> + " TYPE _ PARAMETERS " , " TYPE _ UPPER _ BOUNDS " , " NUM _ DOUBLE " , " LITERAL _ SWITCH " , <nl> + " ANNOTATIONS " , " LITERAL _ SHORT " , " LITERAL _ PROTECTED " , " FOR _ CONDITION " , <nl> + " FOR _ INIT " , " LITERAL _ LONG " , " MINUS " , " OBJBLOCK " , " LITERAL _ NULL " , <nl> + " ANNOTATION " , " LITERAL _ TRUE " , " COMMENT _ CONTENT " , " LITERAL _ CHAR " , <nl> + " PARAMETER _ DEF " , " POST _ DEC " , " ANNOTATION _ FIELD _ DEF " , " BLOCK _ COMMENT _ END " , <nl> + " TYPE " , " LITERAL _ INT " , " BSR " , " ENUM " , " LABELED _ STAT " , <nl> + " ANNOTATION _ MEMBER _ VALUE _ PAIR " , " TYPECAST " , " LITERAL _ SYNCHRONIZED " , <nl> + " PLUS _ ASSIGN " , " DOT " , " LPAREN " , " LITERAL _ IF " , " LITERAL _ CATCH " , " BAND " , <nl> + " INTERFACE _ DEF " , " LOR " , " BNOT " , " METHOD _ CALL " , " AT " , " ELLIPSIS " , <nl> + " ARRAY _ INIT " , " FOR _ EACH _ CLAUSE " , " LITERAL _ THROWS " , " CHAR _ LITERAL " , <nl> + " CASE _ GROUP " , " POST _ INC " , " SEMI " , " LITERAL _ FINALLY " , " ASSIGN " , <nl> + " RESOURCE _ SPECIFICATION " , " STATIC _ IMPORT " , " GENERIC _ START " , " IMPORT " , " SL " , <nl> + " VARIABLE _ DEF " , " LITERAL _ DOUBLE " , " RCURLY " , " RESOURCE " , " SR " , " COMMA " , <nl> + " BAND _ ASSIGN " , " METHOD _ DEF " , " LITERAL _ VOID " , " NUM _ LONG " , <nl> + " LITERAL _ TRANSIENT " , " LITERAL _ THIS " , " LCURLY " , " MINUS _ ASSIGN " , <nl> + " TYPE _ LOWER _ BOUNDS " , " TYPE _ ARGUMENT " , " LITERAL _ CLASS " , " INSTANCE _ INIT " , <nl> + " DIV " , " LITERAL _ VOLATILE " , " STAR " , " UNARY _ MINUS " , " FOR _ ITERATOR " , <nl> + " NOT _ EQUAL " , " LE " , " LITERAL _ INTERFACE " , " LITERAL _ FLOAT " , <nl> + " LITERAL _ INSTANCEOF " , " BOR _ ASSIGN " , " LT " , " SL _ ASSIGN " , " ELIST " , <nl> + " ANNOTATION _ ARRAY _ INIT " , " MODIFIERS " , " LITERAL _ BREAK " , " EXTENDS _ CLAUSE " , <nl> + " TYPE _ PARAMETER " , " LITERAL _ DEFAULT " , " STATIC _ INIT " , " BSR _ ASSIGN " , <nl> + " TYPE _ EXTENSION _ AND " , " BOR " , " LITERAL _ PRIVATE " , " LITERAL _ THROW " , <nl> + " LITERAL _ BYTE " , " BXOR " , " WILDCARD _ TYPE " , " FINAL " , " PARAMETERS " , " RPAREN " , <nl> + " SR _ ASSIGN " , " UNARY _ PLUS " , " EMPTY _ STAT " , " LITERAL _ STATIC " , <nl> + " LITERAL _ CONTINUE " , " STAR _ ASSIGN " , " LAMBDA " , " RBRACK " , " BXOR _ ASSIGN " , <nl> + " CTOR _ CALL " , " LITERAL _ FALSE " , " DO _ WHILE " , " LITERAL _ PUBLIC " , <nl> + " LITERAL _ WHILE " , " PLUS " , " INC " , " CTOR _ DEF " , " GENERIC _ END " , " DIV _ ASSIGN " , <nl> + " SLIST " , " LNOT " , " LAND " , " LITERAL _ ELSE " , " ABSTRACT " , " STRICTFP " , <nl> + " QUESTION " , " LITERAL _ NEW " , " LITERAL _ RETURN " , " SINGLE _ LINE _ COMMENT " , <nl> + " INDEX _ OP " , " EXPR " , " BLOCK _ COMMENT _ BEGIN " , " PACKAGE _ DEF " , <nl> + " IMPLEMENTS _ CLAUSE " , " NUM _ FLOAT " , " LITERAL _ DO " , " EOF " , " GE " , " RESOURCES " , <nl> + " MOD " , " DEC " , " EQUAL " , " LITERAL _ BOOLEAN " , " CLASS _ DEF " , " COLON " , <nl> + " LITERAL _ TRY " , " ENUM _ DEF " , " GT " , " NUM _ INT " , " ANNOTATION _ DEF " , <nl> + " LITERAL _ NATIVE " , " METHOD _ REF " , " TYPE _ ARGUMENTS " , " DOUBLE _ COLON " , " IDENT " , <nl> + " MOD _ ASSIGN " , " LITERAL _ FOR " , " SUPER _ CTOR _ CALL " , " STRING _ LITERAL " , <nl> + " ARRAY _ DECLARATOR " , " LITERAL _ CASE " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + / / we do not use this check as it is deprecated <nl> + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " WriteTag " , <nl> + Stream . of ( " ENUM _ CONSTANT _ DEF " , " METHOD _ DEF " , " CTOR _ DEF " , " ANNOTATION _ FIELD _ DEF " ) <nl> + . collect ( Collectors . toSet ( ) ) ) ; <nl> + / / state of the configuration when test was made until reason found in <nl> + / / https : / / github . com / checkstyle / checkstyle / issues / 3730 <nl> + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " AnnotationLocation " , <nl> + Stream . of ( " TYPECAST " , " DOT " , " TYPE _ ARGUMENT " , " LITERAL _ NEW " , " LITERAL _ THROWS " , <nl> + " IMPLEMENTS _ CLAUSE " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NoLineWrap " , Stream . of ( <nl> + / / method declaration could be long due to " parameters / exceptions " , it is ok to <nl> + / / be not strict there <nl> + " METHOD _ DEF " , " CTOR _ DEF " , <nl> + / / type declaration could be long due to " extends / implements " , it is ok to <nl> + / / be not strict there <nl> + " CLASS _ DEF " , " ENUM _ DEF " , " INTERFACE _ DEF " ) <nl> + . collect ( Collectors . toSet ( ) ) ) ; <nl> + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NoWhitespaceAfter " , Stream . of ( <nl> + / / whitespace after is preferred <nl> + " TYPECAST " , " LITERAL _ SYNCHRONIZED " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " SeparatorWrap " , Stream . of ( <nl> + / / needs context to decide what type of parentheses should be separated or not <nl> + / / which this check does not provide <nl> + " LPAREN " , " RPAREN " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NeedBraces " , Stream . of ( <nl> + / / we prefer no braces here as it looks unusual even though they help avoid sharing <nl> + / / scope of variables <nl> + " LITERAL _ DEFAULT " , " LITERAL _ CASE " , " LAMBDA " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " FinalParameters " , Stream . of ( <nl> + / / we prefer these to be effectively final as to not damage readability <nl> + " FOR _ EACH _ CLAUSE " , " LITERAL _ CATCH " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " WhitespaceAround " , Stream . of ( <nl> + / / we prefer no spaces on one side or both for these tokens <nl> + " ARRAY _ INIT " , <nl> + / / these are covered by GenericWhitespaceCheck <nl> + " WILDCARD _ TYPE " , " GENERIC _ END " , " GENERIC _ START " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testAllChecksWithDefaultConfiguration ( ) throws Exception { <nl> final String inputFilePath = getPath ( " InputDefaultConfig . java " ) ; <nl> @ @ - 159 , 6 + 293 , 67 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testAllCheckTokensAreReferencedInConfigFile ( ) throws Exception { <nl> + final ModuleFactory moduleFactory = TestUtils . getPackageObjectFactory ( ) ; <nl> + final Configuration configuration = ConfigurationUtil <nl> + . loadConfiguration ( " config / checkstyle _ checks . xml " ) ; <nl> + final Set < Configuration > configChecks = ConfigurationUtil . getChecks ( configuration ) ; <nl> + <nl> + final Map < String , Set < String > > configCheckTokens = new HashMap < > ( ) ; <nl> + final Map < String , Set < String > > checkTokens = new HashMap < > ( ) ; <nl> + <nl> + for ( Configuration checkConfig : configChecks ) { <nl> + final String checkName = checkConfig . getName ( ) ; <nl> + final Object instance ; <nl> + <nl> + try { <nl> + instance = moduleFactory . createModule ( checkName ) ; <nl> + } <nl> + catch ( CheckstyleException ex ) { <nl> + throw new CheckstyleException ( " Couldn ' t find check : " + checkName , ex ) ; <nl> + } <nl> + <nl> + if ( instance instanceof AbstractCheck ) { <nl> + final AbstractCheck check = ( AbstractCheck ) instance ; <nl> + <nl> + Set < String > configTokens = configCheckTokens . get ( checkName ) ; <nl> + <nl> + if ( configTokens = = null ) { <nl> + configTokens = new HashSet < > ( ) ; <nl> + <nl> + configCheckTokens . put ( checkName , configTokens ) ; <nl> + <nl> + / / add all overriden tokens <nl> + final Set < String > overrideTokens = TOKENS _ IN _ CONFIG _ TO _ IGNORE . get ( checkName ) ; <nl> + <nl> + if ( overrideTokens ! = null ) { <nl> + configTokens . addAll ( overrideTokens ) ; <nl> + } <nl> + <nl> + configTokens . addAll ( CheckUtil . getTokenTextSet ( check . getDefaultTokens ( ) ) ) ; <nl> + checkTokens . put ( checkName , <nl> + CheckUtil . getTokenTextSet ( check . getAcceptableTokens ( ) ) ) ; <nl> + } <nl> + <nl> + try { <nl> + configTokens . addAll ( Arrays . asList ( checkConfig . getAttribute ( " tokens " ) . split ( <nl> + " , \ \ s * " ) ) ) ; <nl> + } <nl> + catch ( CheckstyleException ex ) { <nl> + / / no tokens defined , so it is using default <nl> + } <nl> + } <nl> + } <nl> + <nl> + for ( Entry < String , Set < String > > entry : checkTokens . entrySet ( ) ) { <nl> + Assert . assertEquals ( " ' " + entry . getKey ( ) <nl> + + " ' should have all acceptable tokens from check in config or specify an " <nl> + + " override to ignore the specific tokens " , <nl> + entry . getValue ( ) , configCheckTokens . get ( entry . getKey ( ) ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> public void testAllCheckstyleModulesHaveXdocDocumentation ( ) throws Exception { <nl> final Set < String > checkstyleModulesNames = CheckUtil . getSimpleNames ( CheckUtil <nl> . getCheckstyleModules ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java <nl> index d06ce32 . . 71b7ba0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java <nl> @ @ - 379 , 6 + 379 , 16 @ @ public final class CheckUtil { <nl> } <nl> } <nl> <nl> + public static Set < String > getTokenTextSet ( int . . . tokens ) { <nl> + final Set < String > result = new HashSet < > ( ) ; <nl> + <nl> + for ( int token : tokens ) { <nl> + result . add ( TokenUtils . getTokenName ( token ) ) ; <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + <nl> public static String getJavadocTokenText ( int [ ] tokens , int . . . subtractions ) { <nl> final StringBuilder result = new StringBuilder ( ) ; <nl> boolean first = true ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / ConfigurationUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / ConfigurationUtil . java <nl> new file mode 100644 <nl> index 0000000 . . 2cd12d9 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / ConfigurationUtil . java <nl> @ @ - 0 , 0 + 1 , 79 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . internal ; <nl> + <nl> + import java . util . HashSet ; <nl> + import java . util . Properties ; <nl> + import java . util . Set ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . ConfigurationLoader ; <nl> + import com . puppycrawl . tools . checkstyle . PropertiesExpander ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + <nl> + public final class ConfigurationUtil { <nl> + private ConfigurationUtil ( ) { <nl> + } <nl> + <nl> + public static Configuration loadConfiguration ( String path ) throws CheckstyleException { <nl> + final Properties props = new Properties ( ) ; <nl> + <nl> + props . setProperty ( " checkstyle . basedir " , " basedir " ) ; <nl> + props . setProperty ( " checkstyle . cache . file " , " file " ) ; <nl> + props . setProperty ( " checkstyle . suppressions . file " , " file " ) ; <nl> + props . setProperty ( " checkstyle . header . file " , " file " ) ; <nl> + props . setProperty ( " checkstyle . regexp . header . file " , " file " ) ; <nl> + props . setProperty ( " checkstyle . importcontrol . file " , " file " ) ; <nl> + <nl> + return loadConfiguration ( path , props ) ; <nl> + } <nl> + <nl> + public static Configuration loadConfiguration ( String path , Properties props ) <nl> + throws CheckstyleException { <nl> + return ConfigurationLoader . loadConfiguration ( path , new PropertiesExpander ( props ) ) ; <nl> + } <nl> + <nl> + public static Set < Configuration > getModules ( Configuration config ) { <nl> + final Set < Configuration > result = new HashSet < > ( ) ; <nl> + <nl> + for ( Configuration child : config . getChildren ( ) ) { <nl> + if ( " TreeWalker " . equals ( child . getName ( ) ) ) { <nl> + result . addAll ( getModules ( child ) ) ; <nl> + } <nl> + else { <nl> + result . add ( child ) ; <nl> + } <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + <nl> + public static Set < Configuration > getChecks ( Configuration config ) { <nl> + final Set < Configuration > result = new HashSet < > ( ) ; <nl> + <nl> + for ( Configuration child : config . getChildren ( ) ) { <nl> + if ( " TreeWalker " . equals ( child . getName ( ) ) ) { <nl> + result . addAll ( getModules ( child ) ) ; <nl> + } <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 9cb78b7 . . 38ce1f8 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 186 , 6 + 186 , 14 @ @ <nl> < ! - - TEST TARGETS - - > <nl> < ! - - - - > <nl> <nl> + < ! - - Run the GUI - - > <nl> + < target name = " run . gui " depends = " compile . checkstyle " <nl> + description = " Run the GUI for displaying a tree " > <nl> + < java classname = " com . puppycrawl . tools . checkstyle . gui . Main " <nl> + fork = " yes " classpathref = " run . classpath " > <nl> + < / java > <nl> + < / target > <nl> + <nl> < ! - - display a specified file in a UI frame - - > <nl> < target name = " run . treeviewer " depends = " compile . checkstyle " <nl> description = " Display a specified file in GUI tree " > <nl> @ @ - 252 , 7 + 260 , 7 @ @ <nl> < checkstyle properties = " docs / checkstyle . rules " > <nl> < fileset dir = " src / checkstyle " <nl> includes = " * * / * . java " <nl> - excludes = " * * / Generated * . java , * * / Java * . java " / > <nl> + excludes = " * * / Generated * . java , * * / Java * . java , * * / gui / * " / > <nl> < formatter type = " plain " / > <nl> < formatter type = " xml " toFile = " target / cs _ errors . xml " / > <nl> < classpath refid = " run . classpath " / >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 index 06d92fe . . 94a7c2d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 @ @ - 23 , 6 + 23 , 8 @ @ import java . lang . reflect . Field ; 
 import java . lang . reflect . Modifier ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 + import java . util . HashMap ; 
 + import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . Locale ; 
 import java . util . Map ; 
 @ @ - 30 , 6 + 32 , 8 @ @ import java . util . Map . Entry ; 
 import java . util . Properties ; 
 import java . util . Set ; 
 import java . util . TreeMap ; 
 + import java . util . stream . Collectors ; 
 + import java . util . stream . Stream ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 37 , 7 + 41 , 9 @ @ import org . junit . Test ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . ModuleFactory ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . checks . imports . ImportControlCheck ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 @ @ - 55 , 6 + 61 , 134 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 Locale . ENGLISH , 
 } ; 
 
 + private static final Map < String , Set < String > > TOKENS _ IN _ CONFIG _ TO _ IGNORE = new HashMap < > ( ) ; 
 + 
 + static { 
 + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NoWhitespaceBefore " , Stream . of ( 
 + / / we use GenericWhitespace for this behavior 
 + " GENERIC _ START " , " GENERIC _ END " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " AbbreviationAsWordInName " , Stream . of ( 
 + / / enum values should be uppercase , we use EnumValueNameCheck instead 
 + " ENUM _ CONSTANT _ DEF " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " FinalLocalVariable " , Stream . of ( 
 + / / we prefer all parameters be effectively final as to not damage readability 
 + / / we use ParameterAssignmentCheck to enforce this 
 + " PARAMETER _ DEF " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + / / we have no need to block these specific tokens 
 + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " IllegalToken " , 
 + Stream . of ( " LITERAL _ SUPER " , " LITERAL _ ASSERT " , " ENUM _ CONSTANT _ DEF " , 
 + " TYPE _ PARAMETERS " , " TYPE _ UPPER _ BOUNDS " , " NUM _ DOUBLE " , " LITERAL _ SWITCH " , 
 + " ANNOTATIONS " , " LITERAL _ SHORT " , " LITERAL _ PROTECTED " , " FOR _ CONDITION " , 
 + " FOR _ INIT " , " LITERAL _ LONG " , " MINUS " , " OBJBLOCK " , " LITERAL _ NULL " , 
 + " ANNOTATION " , " LITERAL _ TRUE " , " COMMENT _ CONTENT " , " LITERAL _ CHAR " , 
 + " PARAMETER _ DEF " , " POST _ DEC " , " ANNOTATION _ FIELD _ DEF " , " BLOCK _ COMMENT _ END " , 
 + " TYPE " , " LITERAL _ INT " , " BSR " , " ENUM " , " ANNOTATION _ MEMBER _ VALUE _ PAIR " , 
 + " TYPECAST " , " LITERAL _ SYNCHRONIZED " , " PLUS _ ASSIGN " , " DOT " , " LPAREN " , 
 + " LITERAL _ IF " , " LITERAL _ CATCH " , " BAND " , " INTERFACE _ DEF " , " LOR " , " BNOT " , 
 + " METHOD _ CALL " , " AT " , " ELLIPSIS " , " ARRAY _ INIT " , " FOR _ EACH _ CLAUSE " , 
 + " LITERAL _ THROWS " , " CHAR _ LITERAL " , " CASE _ GROUP " , " POST _ INC " , " SEMI " , 
 + " LITERAL _ FINALLY " , " ASSIGN " , " RESOURCE _ SPECIFICATION " , " STATIC _ IMPORT " , 
 + " GENERIC _ START " , " IMPORT " , " SL " , " VARIABLE _ DEF " , " LITERAL _ DOUBLE " , 
 + " RCURLY " , " RESOURCE " , " SR " , " COMMA " , " BAND _ ASSIGN " , " METHOD _ DEF " , 
 + " LITERAL _ VOID " , " NUM _ LONG " , " LITERAL _ TRANSIENT " , " LITERAL _ THIS " , " LCURLY " , 
 + " MINUS _ ASSIGN " , " TYPE _ LOWER _ BOUNDS " , " TYPE _ ARGUMENT " , " LITERAL _ CLASS " , 
 + " INSTANCE _ INIT " , " DIV " , " STAR " , " UNARY _ MINUS " , " FOR _ ITERATOR " , " NOT _ EQUAL " , 
 + " LE " , " LITERAL _ INTERFACE " , " LITERAL _ FLOAT " , " LITERAL _ INSTANCEOF " , 
 + " BOR _ ASSIGN " , " LT " , " SL _ ASSIGN " , " ELIST " , " ANNOTATION _ ARRAY _ INIT " , 
 + " MODIFIERS " , " LITERAL _ BREAK " , " EXTENDS _ CLAUSE " , " TYPE _ PARAMETER " , 
 + " LITERAL _ DEFAULT " , " STATIC _ INIT " , " BSR _ ASSIGN " , " TYPE _ EXTENSION _ AND " , 
 + " BOR " , " LITERAL _ PRIVATE " , " LITERAL _ THROW " , " LITERAL _ BYTE " , " BXOR " , 
 + " WILDCARD _ TYPE " , " FINAL " , " PARAMETERS " , " RPAREN " , " SR _ ASSIGN " , 
 + " UNARY _ PLUS " , " EMPTY _ STAT " , " LITERAL _ STATIC " , " LITERAL _ CONTINUE " , 
 + " STAR _ ASSIGN " , " LAMBDA " , " RBRACK " , " BXOR _ ASSIGN " , " CTOR _ CALL " , 
 + " LITERAL _ FALSE " , " DO _ WHILE " , " LITERAL _ PUBLIC " , " LITERAL _ WHILE " , " PLUS " , 
 + " INC " , " CTOR _ DEF " , " GENERIC _ END " , " DIV _ ASSIGN " , " SLIST " , " LNOT " , " LAND " , 
 + " LITERAL _ ELSE " , " ABSTRACT " , " STRICTFP " , " QUESTION " , " LITERAL _ NEW " , 
 + " LITERAL _ RETURN " , " SINGLE _ LINE _ COMMENT " , " INDEX _ OP " , " EXPR " , 
 + " BLOCK _ COMMENT _ BEGIN " , " PACKAGE _ DEF " , " IMPLEMENTS _ CLAUSE " , " NUM _ FLOAT " , 
 + " LITERAL _ DO " , " EOF " , " GE " , " RESOURCES " , " MOD " , " DEC " , " EQUAL " , 
 + " LITERAL _ BOOLEAN " , " CLASS _ DEF " , " COLON " , " LITERAL _ TRY " , " ENUM _ DEF " , " GT " , 
 + " NUM _ INT " , " ANNOTATION _ DEF " , " METHOD _ REF " , " TYPE _ ARGUMENTS " , 
 + " DOUBLE _ COLON " , " IDENT " , " MOD _ ASSIGN " , " LITERAL _ FOR " , " SUPER _ CTOR _ CALL " , 
 + " STRING _ LITERAL " , " ARRAY _ DECLARATOR " , " LITERAL _ CASE " ) . collect ( 
 + Collectors . toSet ( ) ) ) ; 
 + / / we have no need to block specific token text 
 + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " IllegalTokenText " , 
 + Stream . of ( " LITERAL _ SUPER " , " LITERAL _ ASSERT " , " ENUM _ CONSTANT _ DEF " , 
 + " TYPE _ PARAMETERS " , " TYPE _ UPPER _ BOUNDS " , " NUM _ DOUBLE " , " LITERAL _ SWITCH " , 
 + " ANNOTATIONS " , " LITERAL _ SHORT " , " LITERAL _ PROTECTED " , " FOR _ CONDITION " , 
 + " FOR _ INIT " , " LITERAL _ LONG " , " MINUS " , " OBJBLOCK " , " LITERAL _ NULL " , 
 + " ANNOTATION " , " LITERAL _ TRUE " , " COMMENT _ CONTENT " , " LITERAL _ CHAR " , 
 + " PARAMETER _ DEF " , " POST _ DEC " , " ANNOTATION _ FIELD _ DEF " , " BLOCK _ COMMENT _ END " , 
 + " TYPE " , " LITERAL _ INT " , " BSR " , " ENUM " , " LABELED _ STAT " , 
 + " ANNOTATION _ MEMBER _ VALUE _ PAIR " , " TYPECAST " , " LITERAL _ SYNCHRONIZED " , 
 + " PLUS _ ASSIGN " , " DOT " , " LPAREN " , " LITERAL _ IF " , " LITERAL _ CATCH " , " BAND " , 
 + " INTERFACE _ DEF " , " LOR " , " BNOT " , " METHOD _ CALL " , " AT " , " ELLIPSIS " , 
 + " ARRAY _ INIT " , " FOR _ EACH _ CLAUSE " , " LITERAL _ THROWS " , " CHAR _ LITERAL " , 
 + " CASE _ GROUP " , " POST _ INC " , " SEMI " , " LITERAL _ FINALLY " , " ASSIGN " , 
 + " RESOURCE _ SPECIFICATION " , " STATIC _ IMPORT " , " GENERIC _ START " , " IMPORT " , " SL " , 
 + " VARIABLE _ DEF " , " LITERAL _ DOUBLE " , " RCURLY " , " RESOURCE " , " SR " , " COMMA " , 
 + " BAND _ ASSIGN " , " METHOD _ DEF " , " LITERAL _ VOID " , " NUM _ LONG " , 
 + " LITERAL _ TRANSIENT " , " LITERAL _ THIS " , " LCURLY " , " MINUS _ ASSIGN " , 
 + " TYPE _ LOWER _ BOUNDS " , " TYPE _ ARGUMENT " , " LITERAL _ CLASS " , " INSTANCE _ INIT " , 
 + " DIV " , " LITERAL _ VOLATILE " , " STAR " , " UNARY _ MINUS " , " FOR _ ITERATOR " , 
 + " NOT _ EQUAL " , " LE " , " LITERAL _ INTERFACE " , " LITERAL _ FLOAT " , 
 + " LITERAL _ INSTANCEOF " , " BOR _ ASSIGN " , " LT " , " SL _ ASSIGN " , " ELIST " , 
 + " ANNOTATION _ ARRAY _ INIT " , " MODIFIERS " , " LITERAL _ BREAK " , " EXTENDS _ CLAUSE " , 
 + " TYPE _ PARAMETER " , " LITERAL _ DEFAULT " , " STATIC _ INIT " , " BSR _ ASSIGN " , 
 + " TYPE _ EXTENSION _ AND " , " BOR " , " LITERAL _ PRIVATE " , " LITERAL _ THROW " , 
 + " LITERAL _ BYTE " , " BXOR " , " WILDCARD _ TYPE " , " FINAL " , " PARAMETERS " , " RPAREN " , 
 + " SR _ ASSIGN " , " UNARY _ PLUS " , " EMPTY _ STAT " , " LITERAL _ STATIC " , 
 + " LITERAL _ CONTINUE " , " STAR _ ASSIGN " , " LAMBDA " , " RBRACK " , " BXOR _ ASSIGN " , 
 + " CTOR _ CALL " , " LITERAL _ FALSE " , " DO _ WHILE " , " LITERAL _ PUBLIC " , 
 + " LITERAL _ WHILE " , " PLUS " , " INC " , " CTOR _ DEF " , " GENERIC _ END " , " DIV _ ASSIGN " , 
 + " SLIST " , " LNOT " , " LAND " , " LITERAL _ ELSE " , " ABSTRACT " , " STRICTFP " , 
 + " QUESTION " , " LITERAL _ NEW " , " LITERAL _ RETURN " , " SINGLE _ LINE _ COMMENT " , 
 + " INDEX _ OP " , " EXPR " , " BLOCK _ COMMENT _ BEGIN " , " PACKAGE _ DEF " , 
 + " IMPLEMENTS _ CLAUSE " , " NUM _ FLOAT " , " LITERAL _ DO " , " EOF " , " GE " , " RESOURCES " , 
 + " MOD " , " DEC " , " EQUAL " , " LITERAL _ BOOLEAN " , " CLASS _ DEF " , " COLON " , 
 + " LITERAL _ TRY " , " ENUM _ DEF " , " GT " , " NUM _ INT " , " ANNOTATION _ DEF " , 
 + " LITERAL _ NATIVE " , " METHOD _ REF " , " TYPE _ ARGUMENTS " , " DOUBLE _ COLON " , " IDENT " , 
 + " MOD _ ASSIGN " , " LITERAL _ FOR " , " SUPER _ CTOR _ CALL " , " STRING _ LITERAL " , 
 + " ARRAY _ DECLARATOR " , " LITERAL _ CASE " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + / / we do not use this check as it is deprecated 
 + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " WriteTag " , 
 + Stream . of ( " ENUM _ CONSTANT _ DEF " , " METHOD _ DEF " , " CTOR _ DEF " , " ANNOTATION _ FIELD _ DEF " ) 
 + . collect ( Collectors . toSet ( ) ) ) ; 
 + / / state of the configuration when test was made until reason found in 
 + / / https : / / github . com / checkstyle / checkstyle / issues / 3730 
 + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " AnnotationLocation " , 
 + Stream . of ( " TYPECAST " , " DOT " , " TYPE _ ARGUMENT " , " LITERAL _ NEW " , " LITERAL _ THROWS " , 
 + " IMPLEMENTS _ CLAUSE " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NoLineWrap " , Stream . of ( 
 + / / method declaration could be long due to " parameters / exceptions " , it is ok to 
 + / / be not strict there 
 + " METHOD _ DEF " , " CTOR _ DEF " , 
 + / / type declaration could be long due to " extends / implements " , it is ok to 
 + / / be not strict there 
 + " CLASS _ DEF " , " ENUM _ DEF " , " INTERFACE _ DEF " ) 
 + . collect ( Collectors . toSet ( ) ) ) ; 
 + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NoWhitespaceAfter " , Stream . of ( 
 + / / whitespace after is preferred 
 + " TYPECAST " , " LITERAL _ SYNCHRONIZED " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " SeparatorWrap " , Stream . of ( 
 + / / needs context to decide what type of parentheses should be separated or not 
 + / / which this check does not provide 
 + " LPAREN " , " RPAREN " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NeedBraces " , Stream . of ( 
 + / / we prefer no braces here as it looks unusual even though they help avoid sharing 
 + / / scope of variables 
 + " LITERAL _ DEFAULT " , " LITERAL _ CASE " , " LAMBDA " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " FinalParameters " , Stream . of ( 
 + / / we prefer these to be effectively final as to not damage readability 
 + " FOR _ EACH _ CLAUSE " , " LITERAL _ CATCH " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " WhitespaceAround " , Stream . of ( 
 + / / we prefer no spaces on one side or both for these tokens 
 + " ARRAY _ INIT " , 
 + / / these are covered by GenericWhitespaceCheck 
 + " WILDCARD _ TYPE " , " GENERIC _ END " , " GENERIC _ START " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + } 
 + 
 @ Test 
 public void testAllChecksWithDefaultConfiguration ( ) throws Exception { 
 final String inputFilePath = getPath ( " InputDefaultConfig . java " ) ; 
 @ @ - 159 , 6 + 293 , 67 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public void testAllCheckTokensAreReferencedInConfigFile ( ) throws Exception { 
 + final ModuleFactory moduleFactory = TestUtils . getPackageObjectFactory ( ) ; 
 + final Configuration configuration = ConfigurationUtil 
 + . loadConfiguration ( " config / checkstyle _ checks . xml " ) ; 
 + final Set < Configuration > configChecks = ConfigurationUtil . getChecks ( configuration ) ; 
 + 
 + final Map < String , Set < String > > configCheckTokens = new HashMap < > ( ) ; 
 + final Map < String , Set < String > > checkTokens = new HashMap < > ( ) ; 
 + 
 + for ( Configuration checkConfig : configChecks ) { 
 + final String checkName = checkConfig . getName ( ) ; 
 + final Object instance ; 
 + 
 + try { 
 + instance = moduleFactory . createModule ( checkName ) ; 
 + } 
 + catch ( CheckstyleException ex ) { 
 + throw new CheckstyleException ( " Couldn ' t find check : " + checkName , ex ) ; 
 + } 
 + 
 + if ( instance instanceof AbstractCheck ) { 
 + final AbstractCheck check = ( AbstractCheck ) instance ; 
 + 
 + Set < String > configTokens = configCheckTokens . get ( checkName ) ; 
 + 
 + if ( configTokens = = null ) { 
 + configTokens = new HashSet < > ( ) ; 
 + 
 + configCheckTokens . put ( checkName , configTokens ) ; 
 + 
 + / / add all overriden tokens 
 + final Set < String > overrideTokens = TOKENS _ IN _ CONFIG _ TO _ IGNORE . get ( checkName ) ; 
 + 
 + if ( overrideTokens ! = null ) { 
 + configTokens . addAll ( overrideTokens ) ; 
 + } 
 + 
 + configTokens . addAll ( CheckUtil . getTokenTextSet ( check . getDefaultTokens ( ) ) ) ; 
 + checkTokens . put ( checkName , 
 + CheckUtil . getTokenTextSet ( check . getAcceptableTokens ( ) ) ) ; 
 + } 
 + 
 + try { 
 + configTokens . addAll ( Arrays . asList ( checkConfig . getAttribute ( " tokens " ) . split ( 
 + " , \ \ s * " ) ) ) ; 
 + } 
 + catch ( CheckstyleException ex ) { 
 + / / no tokens defined , so it is using default 
 + } 
 + } 
 + } 
 + 
 + for ( Entry < String , Set < String > > entry : checkTokens . entrySet ( ) ) { 
 + Assert . assertEquals ( " ' " + entry . getKey ( ) 
 + + " ' should have all acceptable tokens from check in config or specify an " 
 + + " override to ignore the specific tokens " , 
 + entry . getValue ( ) , configCheckTokens . get ( entry . getKey ( ) ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 public void testAllCheckstyleModulesHaveXdocDocumentation ( ) throws Exception { 
 final Set < String > checkstyleModulesNames = CheckUtil . getSimpleNames ( CheckUtil 
 . getCheckstyleModules ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java 
 index d06ce32 . . 71b7ba0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java 
 @ @ - 379 , 6 + 379 , 16 @ @ public final class CheckUtil { 
 } 
 } 
 
 + public static Set < String > getTokenTextSet ( int . . . tokens ) { 
 + final Set < String > result = new HashSet < > ( ) ; 
 + 
 + for ( int token : tokens ) { 
 + result . add ( TokenUtils . getTokenName ( token ) ) ; 
 + } 
 + 
 + return result ; 
 + } 
 + 
 public static String getJavadocTokenText ( int [ ] tokens , int . . . subtractions ) { 
 final StringBuilder result = new StringBuilder ( ) ; 
 boolean first = true ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / ConfigurationUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / ConfigurationUtil . java 
 new file mode 100644 
 index 0000000 . . 2cd12d9 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / ConfigurationUtil . java 
 @ @ - 0 , 0 + 1 , 79 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . internal ; 
 + 
 + import java . util . HashSet ; 
 + import java . util . Properties ; 
 + import java . util . Set ; 
 + 
 + import com . puppycrawl . tools . checkstyle . ConfigurationLoader ; 
 + import com . puppycrawl . tools . checkstyle . PropertiesExpander ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + 
 + public final class ConfigurationUtil { 
 + private ConfigurationUtil ( ) { 
 + } 
 + 
 + public static Configuration loadConfiguration ( String path ) throws CheckstyleException { 
 + final Properties props = new Properties ( ) ; 
 + 
 + props . setProperty ( " checkstyle . basedir " , " basedir " ) ; 
 + props . setProperty ( " checkstyle . cache . file " , " file " ) ; 
 + props . setProperty ( " checkstyle . suppressions . file " , " file " ) ; 
 + props . setProperty ( " checkstyle . header . file " , " file " ) ; 
 + props . setProperty ( " checkstyle . regexp . header . file " , " file " ) ; 
 + props . setProperty ( " checkstyle . importcontrol . file " , " file " ) ; 
 + 
 + return loadConfiguration ( path , props ) ; 
 + } 
 + 
 + public static Configuration loadConfiguration ( String path , Properties props ) 
 + throws CheckstyleException { 
 + return ConfigurationLoader . loadConfiguration ( path , new PropertiesExpander ( props ) ) ; 
 + } 
 + 
 + public static Set < Configuration > getModules ( Configuration config ) { 
 + final Set < Configuration > result = new HashSet < > ( ) ; 
 + 
 + for ( Configuration child : config . getChildren ( ) ) { 
 + if ( " TreeWalker " . equals ( child . getName ( ) ) ) { 
 + result . addAll ( getModules ( child ) ) ; 
 + } 
 + else { 
 + result . add ( child ) ; 
 + } 
 + } 
 + 
 + return result ; 
 + } 
 + 
 + public static Set < Configuration > getChecks ( Configuration config ) { 
 + final Set < Configuration > result = new HashSet < > ( ) ; 
 + 
 + for ( Configuration child : config . getChildren ( ) ) { 
 + if ( " TreeWalker " . equals ( child . getName ( ) ) ) { 
 + result . addAll ( getModules ( child ) ) ; 
 + } 
 + } 
 + 
 + return result ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index 9cb78b7 . . 38ce1f8 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 186 , 6 + 186 , 14 @ @ 
 < ! - - TEST TARGETS - - > 
 < ! - - - - > 
 
 + < ! - - Run the GUI - - > 
 + < target name = " run . gui " depends = " compile . checkstyle " 
 + description = " Run the GUI for displaying a tree " > 
 + < java classname = " com . puppycrawl . tools . checkstyle . gui . Main " 
 + fork = " yes " classpathref = " run . classpath " > 
 + < / java > 
 + < / target > 
 + 
 < ! - - display a specified file in a UI frame - - > 
 < target name = " run . treeviewer " depends = " compile . checkstyle " 
 description = " Display a specified file in GUI tree " > 
 @ @ - 252 , 7 + 260 , 7 @ @ 
 < checkstyle properties = " docs / checkstyle . rules " > 
 < fileset dir = " src / checkstyle " 
 includes = " * * / * . java " 
 - excludes = " * * / Generated * . java , * * / Java * . java " / > 
 + excludes = " * * / Generated * . java , * * / Java * . java , * * / gui / * " / > 
 < formatter type = " plain " / > 
 < formatter type = " xml " toFile = " target / cs _ errors . xml " / > 
 < classpath refid = " run . classpath " / >
