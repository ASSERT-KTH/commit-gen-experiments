BLEU SCORE: 0.006276071126342914

TEST MSG: minor : fixed XdocsJavaDocs test for requiring space before :
GENERATED MSG: Issue # 3496 : Enforce ReturnCount max = 1 in com . puppycrawl . tools . checkstyle . internal , com . puppycrawl . tools . checkstyle . utils

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 22a3245 . . 94467a4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 247 , 7 + 247 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> final String text = temp . trim ( ) ; <nl> <nl> if ( ! text . isEmpty ( ) ) { <nl> - if ( shouldAppendSpace ( result ) ) { <nl> + if ( shouldAppendSpace ( result , text . charAt ( 0 ) ) ) { <nl> result . append ( ' ' ) ; <nl> } <nl> <nl> @ @ - 276 , 7 + 276 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> if ( newLineOpenBefore ) { <nl> result . append ( System . lineSeparator ( ) ) ; <nl> } <nl> - else if ( shouldAppendSpace ( result ) ) { <nl> + else if ( shouldAppendSpace ( result , ' < ' ) ) { <nl> result . append ( ' ' ) ; <nl> } <nl> <nl> @ @ - 317 , 7 + 317 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> } <nl> } <nl> <nl> - private static boolean shouldAppendSpace ( StringBuffer text ) { <nl> + private static boolean shouldAppendSpace ( StringBuffer text , char firstCharToAppend ) { <nl> final boolean result ; <nl> <nl> if ( text . length ( ) = = 0 ) { <nl> @ @ - 326 , 7 + 326 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> else { <nl> final char last = text . charAt ( text . length ( ) - 1 ) ; <nl> <nl> - result = ! Character . isWhitespace ( last ) ; <nl> + result = firstCharToAppend ! = ' : ' & & ! Character . isWhitespace ( last ) ; <nl> } <nl> <nl> return result ;
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index 674849c . . 8f0aea4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 437 , 6 + 437 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> * or null otherwise . <nl> * @ param ast IDENT ast to check . <nl> * @ return the class frame where violation is found or null otherwise . <nl> + * @ noinspection IfStatementWithIdenticalBranches <nl> * / <nl> / / - @ cs [ CyclomaticComplexity ] Method already invokes too many methods that fully explain <nl> / / a logic , additional abstraction will not make logic / algorithm more readable . <nl> @ @ - 475 , 22 + 476 , 13 @ @ public class RequireThisCheck extends AbstractCheck { <nl> & & ! isUserDefinedArrangementOfThis ( variableDeclarationFrame , ast ) ) { <nl> frameWhereViolationIsFound = findFrame ( ast , true ) ; <nl> } <nl> - else if ( variableDeclarationFrameType = = FrameType . BLOCK _ FRAME ) { <nl> - if ( isOverlappingByLocalVariable ( ast ) ) { <nl> - if ( canAssignValueToClassField ( ast ) <nl> - & & ! isUserDefinedArrangementOfThis ( variableDeclarationFrame , ast ) <nl> - & & ! isReturnedVariable ( variableDeclarationFrame , ast ) <nl> - & & canBeReferencedFromStaticContext ( ast ) ) { <nl> - frameWhereViolationIsFound = findFrame ( ast , true ) ; <nl> - } <nl> - } <nl> - else if ( ! validateOnlyOverlapping <nl> - & & prevSibling = = null <nl> - & & isAssignToken ( ast . getParent ( ) . getType ( ) ) <nl> - & & ! isUserDefinedArrangementOfThis ( variableDeclarationFrame , ast ) <nl> - & & canBeReferencedFromStaticContext ( ast ) ) { <nl> - frameWhereViolationIsFound = findFrame ( ast , true ) ; <nl> - } <nl> + else if ( variableDeclarationFrameType = = FrameType . BLOCK _ FRAME <nl> + & & isOverlappingByLocalVariable ( ast ) <nl> + & & canAssignValueToClassField ( ast ) <nl> + & & ! isUserDefinedArrangementOfThis ( variableDeclarationFrame , ast ) <nl> + & & ! isReturnedVariable ( variableDeclarationFrame , ast ) <nl> + & & canBeReferencedFromStaticContext ( ast ) ) { <nl> + frameWhereViolationIsFound = findFrame ( ast , true ) ; <nl> } <nl> return frameWhereViolationIsFound ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index 3cf4dbb . . bdd7eeb 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 191 , 8 + 191 , 6 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> " 185 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , <nl> " 189 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , <nl> " 210 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , <nl> - " 215 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , <nl> - " 225 : 21 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , <nl> " 228 : 21 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , <nl> " 238 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , <nl> " 253 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " booleanField " , " " ) , <nl> @ @ - 204 , 7 + 202 , 6 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> " 340 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , <nl> " 374 : 40 : " + getCheckMessage ( MSG _ METHOD , " getServletRelativeAction " , " " ) , <nl> " 376 : 20 : " + getCheckMessage ( MSG _ METHOD , " processAction " , " " ) , <nl> - " 383 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " servletRelativeAction " , " " ) , <nl> " 384 : 16 : " + getCheckMessage ( MSG _ METHOD , " processAction " , " " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputValidateOnlyOverlappingFalse . java " ) , expected ) ; <nl> @ @ - 261 , 4 + 258 , 20 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> verify ( checkConfig , getPath ( " InputRequireThisMetodReferences . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testAllowLocalVars ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( RequireThisCheck . class ) ; <nl> + checkConfig . addAttribute ( " validateOnlyOverlapping " , " false " ) ; <nl> + checkConfig . addAttribute ( " checkMethods " , " false " ) ; <nl> + final String [ ] expected = { <nl> + " 14 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s1 " , " " ) , <nl> + " 22 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s1 " , " " ) , <nl> + " 35 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s2 " , " " ) , <nl> + " 40 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s2 " , " " ) , <nl> + " 46 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s2 " , " " ) , <nl> + " 47 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " s1 " , " " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputAllowLocalVars . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputAllowLocalVars . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputAllowLocalVars . java <nl> new file mode 100644 <nl> index 0000000 . . 339bf90 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputAllowLocalVars . java <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + / * <nl> + Input test file for RequireThisCheck . <nl> + Created : 2017 <nl> + * / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + class InputAllowLocalVars { <nl> + <nl> + private String s1 = " foo1 " ; <nl> + String s2 = " foo2 " ; <nl> + <nl> + InputAllowLocalVars ( ) { <nl> + s1 = " bar1 " ; / / Violation . Requires " this " . <nl> + String s2 ; <nl> + s2 = " bar2 " ; / / No violation . Local var allowed . <nl> + } <nl> + <nl> + public int getS1 ( ) { <nl> + String s1 = null ; <nl> + s1 = " bar " ; / / No violation <nl> + s1 = s1 ; / / Violation . " this " required here to resolve any confusion due to overlapping . <nl> + return 1 ; <nl> + } <nl> + <nl> + public String getS1 ( String param ) { <nl> + String s1 = null ; <nl> + s1 = param ; / / No violation <nl> + s1 + = s1 ; / / No violation . s1 is being returned . <nl> + return s1 ; / / No violation <nl> + } <nl> + <nl> + String getS2 ( ) { <nl> + String s2 = null ; <nl> + s2 + = s2 ; / / Violation . " this " required here to resolve any confusion due to overlapping . <nl> + return " return " ; <nl> + } <nl> + <nl> + String getS2 ( String s2 ) { <nl> + s2 = null ; / / Violation . Requires " this " . s2 is a param not a local var . <nl> + return s2 ; / / No violation . param is returned . <nl> + } <nl> + <nl> + String getS2 ( int a ) { <nl> + String s2 = " " ; <nl> + s2 + = s2 ; / / Violation . " this " required here to resolve any confusion due to overlapping . <nl> + return s1 ; / / Violation . Requires " this " . <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputValidateOnlyOverlappingFalse . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputValidateOnlyOverlappingFalse . java <nl> index 8765ebf . . 54fc5ca 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputValidateOnlyOverlappingFalse . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputValidateOnlyOverlappingFalse . java <nl> @ @ - 212 , 7 + 212 , 7 @ @ public class InputValidateOnlyOverlappingFalse { <nl> <nl> void foo24 ( ) { <nl> String field1 = " Hello " ; <nl> - field1 = " Java " ; / / violation <nl> + field1 = " Java " ; / / No violation . Local var allowed <nl> this . booleanField = true ; <nl> this . booleanField = booleanField ; <nl> } <nl> @ @ - 222 , 10 + 222 , 10 @ @ public class InputValidateOnlyOverlappingFalse { <nl> if ( true ) { <nl> String field1 = " Hello , World ! " ; <nl> if ( true ) { <nl> - field1 = new String ( ) ; / / violation <nl> + field1 = new String ( ) ; / / No violation . Local var allowed <nl> } <nl> else { <nl> - field1 = new String ( ) ; / / violation <nl> + field1 + = field1 ; / / violation <nl> } <nl> } <nl> } <nl> @ @ - 380 , 7 + 380 , 7 @ @ public class InputValidateOnlyOverlappingFalse { <nl> servletRelativeAction = " " + servletRelativeAction ; <nl> } <nl> } <nl> - servletRelativeAction = " servletRelativeAction " ; / / violation <nl> + servletRelativeAction = " servletRelativeAction " ; / / No violation . Local var allowed <nl> return processAction ( servletRelativeAction ) ; / / violation ( Method call to ' processAction ' needs " this . " . ) <nl> } <nl> <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 91e2aad . . bb3e155 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 3486 , 7 + 3486 , 7 @ @ public static class B { <nl> Please , be aware of the following logic , which is implemented in the check : <nl> < / p > <nl> < p > <nl> - 1 ) If you arranges ' this ' in your code on your own , the check will not rise violation for <nl> + 1 ) If you arrange ' this ' in your code on your own , the check will not raise violation for <nl> variables which use ' this ' to reference a class field , for example : <nl> < / p > <nl> < source > <nl> @ @ - 3503 , 7 + 3503 , 7 @ @ public class C { <nl> } <nl> < / source > <nl> < p > <nl> - 2 ) If method parameter is returned from the method , the check will not rise violation for <nl> + 2 ) If method parameter is returned from the method , the check will not raise violation for <nl> returned variable / parameter , for example : <nl> < / p > <nl> < source > <nl> @ @ - 3526 , 13 + 3526 , 15 @ @ public static class A { <nl> public A ( int field1 ) { <nl> field1 = field1 ; / / violation : Reference to instance variable " field1 " needs " this " . <nl> field2 = 0 ; / / violation : Reference to instance variable " field2 " needs " this " . <nl> + String field2 ; <nl> + field2 = " 0 " ; / / No violation . Local var allowed <nl> } <nl> <nl> void foo3 ( ) { <nl> String field1 = " values " ; <nl> field1 = field1 ; / / violation : Reference to instance variable " field1 " needs " this " . <nl> - } <nl> } <nl> + } <nl> <nl> public static class B { <nl> private int field1 ; <nl> @ @ - 3545 , 6 + 3547 , 19 @ @ public static class B { <nl> return field1 + = " suffix " ; / / violation : Reference to instance variable " field1 " needs " this " . <nl> } <nl> } <nl> + <nl> + / / If the variable is locally defined , there won ' t be a violation provided the variable doesn ' t overlap . <nl> + class C { <nl> + private String s1 = " foo1 " ; <nl> + String s2 = " foo2 " ; <nl> + <nl> + C ( ) { <nl> + s1 = " bar1 " ; / / Violation . Reference to instance variable ' s1 ' needs " this . " . <nl> + String s2 ; <nl> + s2 = " bar2 " ; / / No violation . Local var allowed . <nl> + s2 + = s2 ; / / Violation . Overlapping . Reference to instance variable ' s2 ' needs " this . " . <nl> + } <nl> + } <nl> < / source > <nl> < / subsection > <nl>

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 22a3245 . . 94467a4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 247 , 7 + 247 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 final String text = temp . trim ( ) ; 
 
 if ( ! text . isEmpty ( ) ) { 
 - if ( shouldAppendSpace ( result ) ) { 
 + if ( shouldAppendSpace ( result , text . charAt ( 0 ) ) ) { 
 result . append ( ' ' ) ; 
 } 
 
 @ @ - 276 , 7 + 276 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 if ( newLineOpenBefore ) { 
 result . append ( System . lineSeparator ( ) ) ; 
 } 
 - else if ( shouldAppendSpace ( result ) ) { 
 + else if ( shouldAppendSpace ( result , ' < ' ) ) { 
 result . append ( ' ' ) ; 
 } 
 
 @ @ - 317 , 7 + 317 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 } 
 } 
 
 - private static boolean shouldAppendSpace ( StringBuffer text ) { 
 + private static boolean shouldAppendSpace ( StringBuffer text , char firstCharToAppend ) { 
 final boolean result ; 
 
 if ( text . length ( ) = = 0 ) { 
 @ @ - 326 , 7 + 326 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 else { 
 final char last = text . charAt ( text . length ( ) - 1 ) ; 
 
 - result = ! Character . isWhitespace ( last ) ; 
 + result = firstCharToAppend ! = ' : ' & & ! Character . isWhitespace ( last ) ; 
 } 
 
 return result ;

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index 674849c . . 8f0aea4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 437 , 6 + 437 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 * or null otherwise . 
 * @ param ast IDENT ast to check . 
 * @ return the class frame where violation is found or null otherwise . 
 + * @ noinspection IfStatementWithIdenticalBranches 
 * / 
 / / - @ cs [ CyclomaticComplexity ] Method already invokes too many methods that fully explain 
 / / a logic , additional abstraction will not make logic / algorithm more readable . 
 @ @ - 475 , 22 + 476 , 13 @ @ public class RequireThisCheck extends AbstractCheck { 
 & & ! isUserDefinedArrangementOfThis ( variableDeclarationFrame , ast ) ) { 
 frameWhereViolationIsFound = findFrame ( ast , true ) ; 
 } 
 - else if ( variableDeclarationFrameType = = FrameType . BLOCK _ FRAME ) { 
 - if ( isOverlappingByLocalVariable ( ast ) ) { 
 - if ( canAssignValueToClassField ( ast ) 
 - & & ! isUserDefinedArrangementOfThis ( variableDeclarationFrame , ast ) 
 - & & ! isReturnedVariable ( variableDeclarationFrame , ast ) 
 - & & canBeReferencedFromStaticContext ( ast ) ) { 
 - frameWhereViolationIsFound = findFrame ( ast , true ) ; 
 - } 
 - } 
 - else if ( ! validateOnlyOverlapping 
 - & & prevSibling = = null 
 - & & isAssignToken ( ast . getParent ( ) . getType ( ) ) 
 - & & ! isUserDefinedArrangementOfThis ( variableDeclarationFrame , ast ) 
 - & & canBeReferencedFromStaticContext ( ast ) ) { 
 - frameWhereViolationIsFound = findFrame ( ast , true ) ; 
 - } 
 + else if ( variableDeclarationFrameType = = FrameType . BLOCK _ FRAME 
 + & & isOverlappingByLocalVariable ( ast ) 
 + & & canAssignValueToClassField ( ast ) 
 + & & ! isUserDefinedArrangementOfThis ( variableDeclarationFrame , ast ) 
 + & & ! isReturnedVariable ( variableDeclarationFrame , ast ) 
 + & & canBeReferencedFromStaticContext ( ast ) ) { 
 + frameWhereViolationIsFound = findFrame ( ast , true ) ; 
 } 
 return frameWhereViolationIsFound ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index 3cf4dbb . . bdd7eeb 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 191 , 8 + 191 , 6 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 " 185 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , 
 " 189 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , 
 " 210 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , 
 - " 215 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , 
 - " 225 : 21 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , 
 " 228 : 21 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , 
 " 238 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , 
 " 253 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " booleanField " , " " ) , 
 @ @ - 204 , 7 + 202 , 6 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 " 340 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " field1 " , " " ) , 
 " 374 : 40 : " + getCheckMessage ( MSG _ METHOD , " getServletRelativeAction " , " " ) , 
 " 376 : 20 : " + getCheckMessage ( MSG _ METHOD , " processAction " , " " ) , 
 - " 383 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " servletRelativeAction " , " " ) , 
 " 384 : 16 : " + getCheckMessage ( MSG _ METHOD , " processAction " , " " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputValidateOnlyOverlappingFalse . java " ) , expected ) ; 
 @ @ - 261 , 4 + 258 , 20 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 } ; 
 verify ( checkConfig , getPath ( " InputRequireThisMetodReferences . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testAllowLocalVars ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( RequireThisCheck . class ) ; 
 + checkConfig . addAttribute ( " validateOnlyOverlapping " , " false " ) ; 
 + checkConfig . addAttribute ( " checkMethods " , " false " ) ; 
 + final String [ ] expected = { 
 + " 14 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s1 " , " " ) , 
 + " 22 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s1 " , " " ) , 
 + " 35 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s2 " , " " ) , 
 + " 40 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s2 " , " " ) , 
 + " 46 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s2 " , " " ) , 
 + " 47 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " s1 " , " " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputAllowLocalVars . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputAllowLocalVars . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputAllowLocalVars . java 
 new file mode 100644 
 index 0000000 . . 339bf90 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputAllowLocalVars . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + / * 
 + Input test file for RequireThisCheck . 
 + Created : 2017 
 + * / 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + class InputAllowLocalVars { 
 + 
 + private String s1 = " foo1 " ; 
 + String s2 = " foo2 " ; 
 + 
 + InputAllowLocalVars ( ) { 
 + s1 = " bar1 " ; / / Violation . Requires " this " . 
 + String s2 ; 
 + s2 = " bar2 " ; / / No violation . Local var allowed . 
 + } 
 + 
 + public int getS1 ( ) { 
 + String s1 = null ; 
 + s1 = " bar " ; / / No violation 
 + s1 = s1 ; / / Violation . " this " required here to resolve any confusion due to overlapping . 
 + return 1 ; 
 + } 
 + 
 + public String getS1 ( String param ) { 
 + String s1 = null ; 
 + s1 = param ; / / No violation 
 + s1 + = s1 ; / / No violation . s1 is being returned . 
 + return s1 ; / / No violation 
 + } 
 + 
 + String getS2 ( ) { 
 + String s2 = null ; 
 + s2 + = s2 ; / / Violation . " this " required here to resolve any confusion due to overlapping . 
 + return " return " ; 
 + } 
 + 
 + String getS2 ( String s2 ) { 
 + s2 = null ; / / Violation . Requires " this " . s2 is a param not a local var . 
 + return s2 ; / / No violation . param is returned . 
 + } 
 + 
 + String getS2 ( int a ) { 
 + String s2 = " " ; 
 + s2 + = s2 ; / / Violation . " this " required here to resolve any confusion due to overlapping . 
 + return s1 ; / / Violation . Requires " this " . 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputValidateOnlyOverlappingFalse . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputValidateOnlyOverlappingFalse . java 
 index 8765ebf . . 54fc5ca 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputValidateOnlyOverlappingFalse . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputValidateOnlyOverlappingFalse . java 
 @ @ - 212 , 7 + 212 , 7 @ @ public class InputValidateOnlyOverlappingFalse { 
 
 void foo24 ( ) { 
 String field1 = " Hello " ; 
 - field1 = " Java " ; / / violation 
 + field1 = " Java " ; / / No violation . Local var allowed 
 this . booleanField = true ; 
 this . booleanField = booleanField ; 
 } 
 @ @ - 222 , 10 + 222 , 10 @ @ public class InputValidateOnlyOverlappingFalse { 
 if ( true ) { 
 String field1 = " Hello , World ! " ; 
 if ( true ) { 
 - field1 = new String ( ) ; / / violation 
 + field1 = new String ( ) ; / / No violation . Local var allowed 
 } 
 else { 
 - field1 = new String ( ) ; / / violation 
 + field1 + = field1 ; / / violation 
 } 
 } 
 } 
 @ @ - 380 , 7 + 380 , 7 @ @ public class InputValidateOnlyOverlappingFalse { 
 servletRelativeAction = " " + servletRelativeAction ; 
 } 
 } 
 - servletRelativeAction = " servletRelativeAction " ; / / violation 
 + servletRelativeAction = " servletRelativeAction " ; / / No violation . Local var allowed 
 return processAction ( servletRelativeAction ) ; / / violation ( Method call to ' processAction ' needs " this . " . ) 
 } 
 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 91e2aad . . bb3e155 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 3486 , 7 + 3486 , 7 @ @ public static class B { 
 Please , be aware of the following logic , which is implemented in the check : 
 < / p > 
 < p > 
 - 1 ) If you arranges ' this ' in your code on your own , the check will not rise violation for 
 + 1 ) If you arrange ' this ' in your code on your own , the check will not raise violation for 
 variables which use ' this ' to reference a class field , for example : 
 < / p > 
 < source > 
 @ @ - 3503 , 7 + 3503 , 7 @ @ public class C { 
 } 
 < / source > 
 < p > 
 - 2 ) If method parameter is returned from the method , the check will not rise violation for 
 + 2 ) If method parameter is returned from the method , the check will not raise violation for 
 returned variable / parameter , for example : 
 < / p > 
 < source > 
 @ @ - 3526 , 13 + 3526 , 15 @ @ public static class A { 
 public A ( int field1 ) { 
 field1 = field1 ; / / violation : Reference to instance variable " field1 " needs " this " . 
 field2 = 0 ; / / violation : Reference to instance variable " field2 " needs " this " . 
 + String field2 ; 
 + field2 = " 0 " ; / / No violation . Local var allowed 
 } 
 
 void foo3 ( ) { 
 String field1 = " values " ; 
 field1 = field1 ; / / violation : Reference to instance variable " field1 " needs " this " . 
 - } 
 } 
 + } 
 
 public static class B { 
 private int field1 ; 
 @ @ - 3545 , 6 + 3547 , 19 @ @ public static class B { 
 return field1 + = " suffix " ; / / violation : Reference to instance variable " field1 " needs " this " . 
 } 
 } 
 + 
 + / / If the variable is locally defined , there won ' t be a violation provided the variable doesn ' t overlap . 
 + class C { 
 + private String s1 = " foo1 " ; 
 + String s2 = " foo2 " ; 
 + 
 + C ( ) { 
 + s1 = " bar1 " ; / / Violation . Reference to instance variable ' s1 ' needs " this . " . 
 + String s2 ; 
 + s2 = " bar2 " ; / / No violation . Local var allowed . 
 + s2 + = s2 ; / / Violation . Overlapping . Reference to instance variable ' s2 ' needs " this . " . 
 + } 
 + } 
 < / source > 
 < / subsection > 

