BLEU SCORE: 0.03732910952137788

TEST MSG: config : update cobertura result validation for travis build
GENERATED MSG: config : fix all - sevntu - checks travis validation , as full package is used now in config

TEST DIFF (one line): diff - - git a / . ci / travis / travis . sh b / . ci / travis / travis . sh <nl> index 06d6866 . . 7456d5c 100755 <nl> - - - a / . ci / travis / travis . sh <nl> + + + b / . ci / travis / travis . sh <nl> @ @ - 188 , 7 + 188 , 7 @ @ cobertura - check ) <nl> cat mvn - log . log <nl> set - e <nl> echo " Grep for hidden errors ( due to quiet = true mode in pom . xml ) : " <nl> - grep - R " < td class = \ " nbHitsUncovered \ " > & nbsp ; 0 < / td > " target / site / cobertura / * - - exclude = * grammars * | cat > mvn - log - grep . log <nl> + grep - R " < td class = \ " nbHitsUncovered \ " " target / site / cobertura / * - - exclude = * grammars * | cat > mvn - log - grep . log <nl> cat mvn - log - grep . log <nl> if [ [ $ ( cat mvn - log - grep . log | wc - l ) - gt 0 ] ] ; then <nl> exit 1
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> index e090c19 . . 82c3d6c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> @ @ - 191 , 7 + 191 , 7 @ @ public class VisibilityModifierCheckTest <nl> createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; <nl> checkConfig . addAttribute ( " immutableClassCanonicalNames " , <nl> - " com . puppycrawl . tools . checkstyle . checks . coding . InputGregorianCalendar , " <nl> + " com . puppycrawl . tools . checkstyle . checks . design . InputGregorianCalendar , " <nl> + " com . puppycrawl . tools . checkstyle . checks . design . InetSocketAddress " ) ; <nl> final String [ ] expected = { <nl> " 7 : 46 : " + getCheckMessage ( MSG _ KEY , " calendar " ) , <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / Input15Extensions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / Input15Extensions . java <nl> deleted file mode 100644 <nl> index 11ec5df . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / Input15Extensions . java <nl> + + + / dev / null <nl> @ @ - 1 , 36 + 0 , 0 @ @ <nl> - / / someexamples of 1 . 5 extensions <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - @ interface MyAnnotation1 { <nl> - String name ( ) ; <nl> - int version ( ) ; <nl> - } <nl> - <nl> - @ MyAnnotation1 ( name = " ABC " , version = 1 ) <nl> - public class Input15Extensions <nl> - { <nl> - <nl> - } <nl> - <nl> - enum Enum2 <nl> - { <nl> - A , B , C ; <nl> - Enum2 ( ) { } <nl> - public String toString ( ) { <nl> - return " " ; / / some custom implementation <nl> - } <nl> - } <nl> - <nl> - interface TestRequireThisEnum <nl> - { <nl> - enum DAY _ OF _ WEEK <nl> - { <nl> - SUNDAY , <nl> - MONDAY , <nl> - TUESDAY , <nl> - WEDNESDAY , <nl> - THURSDAY , <nl> - FRIDAY , <nl> - SATURDAY <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java <nl> deleted file mode 100644 <nl> index 1921aa4 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java <nl> + + + / dev / null <nl> @ @ - 1 , 524 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - public class InputFallThrough <nl> - { <nl> - void method ( int i , int j , boolean cond ) { <nl> - while ( true ) { <nl> - switch ( i ) { <nl> - case 0 : / / no problem <nl> - case 1 : <nl> - i + + ; <nl> - break ; <nl> - case 2 : <nl> - i + + ; <nl> - case 3 : / / fall through ! ! ! <nl> - i + + ; <nl> - break ; <nl> - case 4 : <nl> - return ; <nl> - case 5 : <nl> - throw new RuntimeException ( " " ) ; <nl> - case 6 : <nl> - continue ; <nl> - case 7 : { <nl> - break ; <nl> - } <nl> - case 8 : { <nl> - return ; <nl> - } <nl> - case 9 : { <nl> - throw new RuntimeException ( " " ) ; <nl> - } <nl> - case 10 : { <nl> - continue ; <nl> - } <nl> - case 11 : { <nl> - i + + ; <nl> - } <nl> - case 12 : / / fall through ! ! ! <nl> - if ( false ) <nl> - break ; <nl> - else <nl> - break ; <nl> - case 13 : <nl> - if ( true ) { <nl> - return ; <nl> - } <nl> - case 14 : <nl> - if ( true ) { <nl> - return ; <nl> - } else { <nl> - / / do nothing <nl> - } <nl> - case 15 : / / fall through ! ! ! <nl> - do { <nl> - System . identityHashCode ( " something " ) ; <nl> - return ; <nl> - } while ( true ) ; <nl> - case 16 : <nl> - for ( int j1 = 0 ; j1 < 10 ; j1 + + ) { <nl> - String . valueOf ( " something " ) ; <nl> - return ; <nl> - } <nl> - case 17 : <nl> - while ( true ) <nl> - throw new RuntimeException ( " " ) ; <nl> - case 18 : <nl> - while ( cond ) { <nl> - break ; <nl> - } <nl> - case 19 : / / fall through ! ! ! <nl> - try { <nl> - i + + ; <nl> - break ; <nl> - } catch ( RuntimeException e ) { <nl> - break ; <nl> - } catch ( Error e ) { <nl> - return ; <nl> - } <nl> - case 20 : <nl> - try { <nl> - i + + ; <nl> - break ; <nl> - } catch ( RuntimeException e ) { <nl> - } catch ( Error e ) { <nl> - return ; <nl> - } <nl> - case 21 : / / fall through ! ! ! <nl> - try { <nl> - i + + ; <nl> - } catch ( RuntimeException e ) { <nl> - i - - ; <nl> - } finally { <nl> - break ; <nl> - } <nl> - case 22 : <nl> - try { <nl> - i + + ; <nl> - break ; <nl> - } catch ( RuntimeException e ) { <nl> - i - - ; <nl> - break ; <nl> - } finally { <nl> - i + + ; <nl> - } <nl> - case 23 : <nl> - switch ( j ) { <nl> - case 1 : <nl> - continue ; <nl> - case 2 : <nl> - return ; <nl> - default : <nl> - return ; <nl> - } <nl> - case 24 : <nl> - switch ( j ) { <nl> - case 1 : <nl> - continue ; <nl> - case 2 : <nl> - break ; <nl> - default : <nl> - return ; <nl> - } <nl> - default : / / fall through ! ! ! <nl> - / / this is the last label <nl> - i + + ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - <nl> - <nl> - / * Like above , but all fall throughs with relief comment * / <nl> - void methodFallThru ( int i , int j , boolean cond ) { <nl> - while ( true ) { <nl> - switch ( i ) { <nl> - case - 1 : / / FALLTHRU <nl> - <nl> - case 0 : / / no problem <nl> - case 1 : <nl> - i + + ; <nl> - break ; <nl> - case 2 : <nl> - i + + ; <nl> - / / fallthru <nl> - case 3 : <nl> - i + + ; <nl> - break ; <nl> - case 4 : <nl> - return ; <nl> - case 5 : <nl> - throw new RuntimeException ( " " ) ; <nl> - case 6 : <nl> - continue ; <nl> - case 7 : { <nl> - break ; <nl> - } <nl> - case 8 : { <nl> - return ; <nl> - } <nl> - case 9 : { <nl> - throw new RuntimeException ( " " ) ; <nl> - } <nl> - case 10 : { <nl> - continue ; <nl> - } <nl> - case 11 : { <nl> - i + + ; <nl> - } <nl> - / / fallthru <nl> - case 12 : <nl> - if ( false ) <nl> - break ; <nl> - else <nl> - break ; <nl> - case 13 : <nl> - if ( true ) { <nl> - return ; <nl> - } <nl> - case 14 : <nl> - if ( true ) { <nl> - return ; <nl> - } else { <nl> - / / do nothing <nl> - } <nl> - / / fallthru <nl> - case 15 : <nl> - do { <nl> - System . identityHashCode ( " something " ) ; <nl> - return ; <nl> - } while ( true ) ; <nl> - case 16 : <nl> - for ( int j1 = 0 ; j1 < 10 ; j1 + + ) { <nl> - String . valueOf ( " something " ) ; <nl> - return ; <nl> - } <nl> - case 17 : <nl> - while ( cond ) <nl> - throw new RuntimeException ( " " ) ; <nl> - case 18 : <nl> - while ( cond ) { <nl> - break ; <nl> - } <nl> - / / fallthru <nl> - case 19 : <nl> - try { <nl> - i + + ; <nl> - break ; <nl> - } catch ( RuntimeException e ) { <nl> - break ; <nl> - } catch ( Error e ) { <nl> - return ; <nl> - } <nl> - case 20 : <nl> - try { <nl> - i + + ; <nl> - break ; <nl> - } catch ( RuntimeException e ) { <nl> - } catch ( Error e ) { <nl> - return ; <nl> - } <nl> - / / fallthru <nl> - case 21 : <nl> - try { <nl> - i + + ; <nl> - } catch ( RuntimeException e ) { <nl> - i - - ; <nl> - } finally { <nl> - break ; <nl> - } <nl> - case 22 : <nl> - try { <nl> - i + + ; <nl> - break ; <nl> - } catch ( RuntimeException e ) { <nl> - i - - ; <nl> - break ; <nl> - } finally { <nl> - i + + ; <nl> - } <nl> - <nl> - case 23 : <nl> - switch ( j ) { <nl> - case 1 : <nl> - continue ; <nl> - case 2 : <nl> - return ; <nl> - default : <nl> - return ; <nl> - } <nl> - case 24 : <nl> - i + + ; <nl> - / * fallthru * / case 25 : <nl> - i + + ; <nl> - break ; <nl> - <nl> - case 26 : <nl> - switch ( j ) { <nl> - case 1 : <nl> - continue ; <nl> - case 2 : <nl> - break ; <nl> - default : <nl> - return ; <nl> - } <nl> - / / fallthru <nl> - default : <nl> - / / this is the last label <nl> - i + + ; <nl> - / / fallthru <nl> - } <nl> - } <nl> - } <nl> - <nl> - / * Test relief comment . * / <nl> - void methodFallThruCC ( int i , int j , boolean cond ) { <nl> - while ( true ) { <nl> - switch ( i ) { <nl> - case 0 : <nl> - i + + ; / / fallthru <nl> - <nl> - case 1 : <nl> - i + + ; <nl> - / / fallthru <nl> - case 2 : { <nl> - i + + ; <nl> - } <nl> - / / fallthru <nl> - case 3 : <nl> - i + + ; <nl> - / * fallthru * / case 4 : <nl> - break ; <nl> - case 5 : <nl> - i + + ; <nl> - / / fallthru <nl> - } <nl> - } <nl> - } <nl> - <nl> - / * Like above , but C - style comments . * / <nl> - void methodFallThruC ( int i , int j , boolean cond ) { <nl> - while ( true ) { <nl> - switch ( i ) { <nl> - case 0 : <nl> - i + + ; / * fallthru * / <nl> - <nl> - case 1 : <nl> - i + + ; <nl> - / * fallthru * / <nl> - case 2 : <nl> - i + + ; <nl> - / * fallthru * / case 3 : <nl> - break ; <nl> - case 4 : <nl> - i + + ; <nl> - / * fallthru * / <nl> - } <nl> - } <nl> - } <nl> - <nl> - / * Like above , but C - style comments with no spaces . * / <nl> - void methodFallThruC2 ( int i , int j , boolean cond ) { <nl> - while ( true ) { <nl> - switch ( i ) { <nl> - case 0 : <nl> - i + + ; / * fallthru * / <nl> - <nl> - case 1 : <nl> - i + + ; <nl> - / * fallthru * / <nl> - case 2 : <nl> - i + + ; <nl> - / * fallthru * / case 3 : <nl> - break ; <nl> - case 4 : <nl> - i + + ; <nl> - / * fallthru * / <nl> - } <nl> - } <nl> - } <nl> - <nl> - / * C - style comments with other default fallthru - comment . * / <nl> - void methodFallThruCOtherWords ( int i , int j , boolean cond ) { <nl> - while ( true ) { <nl> - switch ( i ) { <nl> - case 0 : <nl> - i + + ; / * falls through * / <nl> - <nl> - case 1 : <nl> - i + + ; <nl> - / * falls through * / <nl> - case 2 : <nl> - i + + ; <nl> - / * falls through * / case 3 : <nl> - break ; <nl> - case 4 : <nl> - i + + ; <nl> - / * falls through * / <nl> - } <nl> - } <nl> - } <nl> - <nl> - / * C - style comments with custom fallthru - comment . * / <nl> - void methodFallThruCCustomWords ( int i , int j , boolean cond ) { <nl> - while ( true ) { <nl> - switch ( i ) { <nl> - case 0 : <nl> - i + + ; / * Continue with next case * / <nl> - <nl> - case 1 : <nl> - i + + ; <nl> - / * Continue with next case * / <nl> - case 2 : <nl> - i + + ; <nl> - / * Continue with next case * / case 3 : <nl> - break ; <nl> - case 4 : <nl> - i + + ; <nl> - / * Continue with next case * / <nl> - } <nl> - } <nl> - } <nl> - <nl> - void methodFallThruLastCaseGroup ( int i , int j , boolean cond ) { <nl> - while ( true ) { <nl> - switch ( i ) { <nl> - case 0 : <nl> - i + + ; / / fallthru <nl> - } <nl> - switch ( i ) { <nl> - case 0 : <nl> - i + + ; <nl> - / / fallthru <nl> - } <nl> - switch ( i ) { <nl> - case 0 : <nl> - i + + ; <nl> - / * fallthru * / } <nl> - } <nl> - } <nl> - <nl> - void method1472228 ( int i ) { <nl> - switch ( i ) { <nl> - case 2 : <nl> - / / do nothing <nl> - break ; <nl> - default : <nl> - } <nl> - } <nl> - <nl> - void nestedSwitches ( ) { <nl> - switch ( hashCode ( ) ) { <nl> - case 1 : <nl> - switch ( hashCode ( ) ) { / / causing NullPointerException in the past <nl> - case 1 : <nl> - } <nl> - default : / / violation - no fall through comment <nl> - } <nl> - } <nl> - <nl> - void nextedSwitches2 ( ) { <nl> - switch ( hashCode ( ) ) { <nl> - case 1 : <nl> - switch ( hashCode ( ) ) { } <nl> - case 2 : <nl> - System . lineSeparator ( ) ; <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - void ifWithoutBreak ( ) { <nl> - switch ( hashCode ( ) ) { <nl> - case 1 : <nl> - if ( true ) { <nl> - System . lineSeparator ( ) ; <nl> - } <nl> - case 2 : <nl> - System . lineSeparator ( ) ; <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - void noCommentAtTheEnd ( ) { <nl> - switch ( hashCode ( ) ) { <nl> - case 1 : System . lineSeparator ( ) ; <nl> - <nl> - case 2 : <nl> - System . lineSeparator ( ) ; <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - void tryResource ( ) throws Exception { <nl> - switch ( hashCode ( ) ) { <nl> - case 1 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - case 2 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - finally { <nl> - return ; <nl> - } <nl> - case 3 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - catch ( Exception ex ) { <nl> - return ; <nl> - } <nl> - case 4 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - finally { <nl> - return ; <nl> - } <nl> - case 5 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - finally { <nl> - } <nl> - case 6 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - catch ( Exception ex ) { <nl> - return ; <nl> - } <nl> - / / fallthru <nl> - case 7 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - / / fallthru <nl> - case 8 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - finally { <nl> - } <nl> - / / fallthru <nl> - case 9 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - catch ( Exception ex ) { <nl> - } <nl> - / / fallthru <nl> - case 10 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - catch ( Exception ex ) { <nl> - } <nl> - / / fallthru <nl> - default : <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - private static class Resource implements AutoCloseable { <nl> - @ Override <nl> - public void close ( ) throws Exception { <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputGregorianCalendar . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputGregorianCalendar . java <nl> deleted file mode 100644 <nl> index 4b804a4 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputGregorianCalendar . java <nl> + + + / dev / null <nl> @ @ - 1 , 8 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - public class InputGregorianCalendar <nl> - { <nl> - class SubCalendar { <nl> - <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSimplifyBoolean . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSimplifyBoolean . java <nl> deleted file mode 100644 <nl> index 36d3b81 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSimplifyBoolean . java <nl> + + + / dev / null <nl> @ @ - 1 , 88 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - / * * <nl> - Contains boolean logic that can be simplified . <nl> - <nl> - @ author lkuehne <nl> - * / <nl> - public class InputSimplifyBoolean <nl> - { <nl> - <nl> - public static boolean isOddMillis ( ) <nl> - { <nl> - boolean even = System . currentTimeMillis ( ) % 2 = = 0 ; <nl> - <nl> - / / can be simplified to " if ( even ) " <nl> - if ( even = = true ) { <nl> - return false ; <nl> - } <nl> - else { <nl> - return true ; <nl> - } <nl> - / / return can be simplified to " return ! even " <nl> - } <nl> - <nl> - public static boolean isOddMillis2 ( ) <nl> - { <nl> - boolean even = System . currentTimeMillis ( ) % 2 = = 0 ; <nl> - / / can be simplified to " return ! even " <nl> - if ( ! even ) <nl> - return true ; <nl> - else <nl> - return false ; <nl> - } <nl> - <nl> - public static boolean giveMeTrue ( ) <nl> - { <nl> - boolean tt = isOddMillis ( ) | | true ; <nl> - boolean ff = isOddMillis ( ) & & false ; <nl> - return ! false | | ( true ! = false ) ; <nl> - } <nl> - <nl> - public void tryToProvokeNPE ( ) <nl> - { <nl> - if ( true ) { <nl> - } <nl> - else { <nl> - } <nl> - <nl> - if ( true ) { <nl> - return ; <nl> - } <nl> - else { <nl> - return ; <nl> - } <nl> - } <nl> - <nl> - public boolean ifNoElse ( ) <nl> - { <nl> - if ( isOddMillis ( ) ) { <nl> - return true ; <nl> - } <nl> - return false ; <nl> - } <nl> - <nl> - boolean a ( ) { <nl> - boolean asd = false ; <nl> - boolean dasa = true ; <nl> - <nl> - if ( asd ) { <nl> - return true ; <nl> - } else { <nl> - return dasa ; <nl> - } <nl> - } <nl> - <nl> - boolean b ( ) { <nl> - boolean asd = false ; <nl> - <nl> - if ( asd ) ; <nl> - else ; <nl> - <nl> - return true ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputGregorianCalendar . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputGregorianCalendar . java <nl> new file mode 100644 <nl> index 0000000 . . 629dc3b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputGregorianCalendar . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + public class InputGregorianCalendar <nl> + { <nl> + class SubCalendar { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutableSameTypeName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutableSameTypeName . java <nl> index 7c815f5 . . 0b06a76 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutableSameTypeName . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutableSameTypeName . java <nl> @ @ - 1 , 12 + 1 , 12 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . design ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . checks . coding . InputGregorianCalendar ; <nl> + import com . puppycrawl . tools . checkstyle . checks . design . InputGregorianCalendar ; <nl> import com . puppycrawl . tools . checkstyle . checks . design . InetSocketAddress ; <nl> public final class InputImmutableSameTypeName <nl> { <nl> public final java . util . GregorianCalendar calendar = null ; <nl> public final InputGregorianCalendar calendar2 = null ; <nl> - public final com . puppycrawl . tools . checkstyle . checks . coding . InputGregorianCalendar calendar3 = null ; <nl> + public final com . puppycrawl . tools . checkstyle . checks . design . InputGregorianCalendar calendar3 = null ; <nl> public final InetSocketAddress address = null ; <nl> public final java . net . InetSocketAddress adr = null ; <nl> }

TEST DIFF:
diff - - git a / . ci / travis / travis . sh b / . ci / travis / travis . sh 
 index 06d6866 . . 7456d5c 100755 
 - - - a / . ci / travis / travis . sh 
 + + + b / . ci / travis / travis . sh 
 @ @ - 188 , 7 + 188 , 7 @ @ cobertura - check ) 
 cat mvn - log . log 
 set - e 
 echo " Grep for hidden errors ( due to quiet = true mode in pom . xml ) : " 
 - grep - R " < td class = \ " nbHitsUncovered \ " > & nbsp ; 0 < / td > " target / site / cobertura / * - - exclude = * grammars * | cat > mvn - log - grep . log 
 + grep - R " < td class = \ " nbHitsUncovered \ " " target / site / cobertura / * - - exclude = * grammars * | cat > mvn - log - grep . log 
 cat mvn - log - grep . log 
 if [ [ $ ( cat mvn - log - grep . log | wc - l ) - gt 0 ] ] ; then 
 exit 1

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 index e090c19 . . 82c3d6c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 @ @ - 191 , 7 + 191 , 7 @ @ public class VisibilityModifierCheckTest 
 createCheckConfig ( VisibilityModifierCheck . class ) ; 
 checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; 
 checkConfig . addAttribute ( " immutableClassCanonicalNames " , 
 - " com . puppycrawl . tools . checkstyle . checks . coding . InputGregorianCalendar , " 
 + " com . puppycrawl . tools . checkstyle . checks . design . InputGregorianCalendar , " 
 + " com . puppycrawl . tools . checkstyle . checks . design . InetSocketAddress " ) ; 
 final String [ ] expected = { 
 " 7 : 46 : " + getCheckMessage ( MSG _ KEY , " calendar " ) , 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / Input15Extensions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / Input15Extensions . java 
 deleted file mode 100644 
 index 11ec5df . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / Input15Extensions . java 
 + + + / dev / null 
 @ @ - 1 , 36 + 0 , 0 @ @ 
 - / / someexamples of 1 . 5 extensions 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - @ interface MyAnnotation1 { 
 - String name ( ) ; 
 - int version ( ) ; 
 - } 
 - 
 - @ MyAnnotation1 ( name = " ABC " , version = 1 ) 
 - public class Input15Extensions 
 - { 
 - 
 - } 
 - 
 - enum Enum2 
 - { 
 - A , B , C ; 
 - Enum2 ( ) { } 
 - public String toString ( ) { 
 - return " " ; / / some custom implementation 
 - } 
 - } 
 - 
 - interface TestRequireThisEnum 
 - { 
 - enum DAY _ OF _ WEEK 
 - { 
 - SUNDAY , 
 - MONDAY , 
 - TUESDAY , 
 - WEDNESDAY , 
 - THURSDAY , 
 - FRIDAY , 
 - SATURDAY 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java 
 deleted file mode 100644 
 index 1921aa4 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java 
 + + + / dev / null 
 @ @ - 1 , 524 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - public class InputFallThrough 
 - { 
 - void method ( int i , int j , boolean cond ) { 
 - while ( true ) { 
 - switch ( i ) { 
 - case 0 : / / no problem 
 - case 1 : 
 - i + + ; 
 - break ; 
 - case 2 : 
 - i + + ; 
 - case 3 : / / fall through ! ! ! 
 - i + + ; 
 - break ; 
 - case 4 : 
 - return ; 
 - case 5 : 
 - throw new RuntimeException ( " " ) ; 
 - case 6 : 
 - continue ; 
 - case 7 : { 
 - break ; 
 - } 
 - case 8 : { 
 - return ; 
 - } 
 - case 9 : { 
 - throw new RuntimeException ( " " ) ; 
 - } 
 - case 10 : { 
 - continue ; 
 - } 
 - case 11 : { 
 - i + + ; 
 - } 
 - case 12 : / / fall through ! ! ! 
 - if ( false ) 
 - break ; 
 - else 
 - break ; 
 - case 13 : 
 - if ( true ) { 
 - return ; 
 - } 
 - case 14 : 
 - if ( true ) { 
 - return ; 
 - } else { 
 - / / do nothing 
 - } 
 - case 15 : / / fall through ! ! ! 
 - do { 
 - System . identityHashCode ( " something " ) ; 
 - return ; 
 - } while ( true ) ; 
 - case 16 : 
 - for ( int j1 = 0 ; j1 < 10 ; j1 + + ) { 
 - String . valueOf ( " something " ) ; 
 - return ; 
 - } 
 - case 17 : 
 - while ( true ) 
 - throw new RuntimeException ( " " ) ; 
 - case 18 : 
 - while ( cond ) { 
 - break ; 
 - } 
 - case 19 : / / fall through ! ! ! 
 - try { 
 - i + + ; 
 - break ; 
 - } catch ( RuntimeException e ) { 
 - break ; 
 - } catch ( Error e ) { 
 - return ; 
 - } 
 - case 20 : 
 - try { 
 - i + + ; 
 - break ; 
 - } catch ( RuntimeException e ) { 
 - } catch ( Error e ) { 
 - return ; 
 - } 
 - case 21 : / / fall through ! ! ! 
 - try { 
 - i + + ; 
 - } catch ( RuntimeException e ) { 
 - i - - ; 
 - } finally { 
 - break ; 
 - } 
 - case 22 : 
 - try { 
 - i + + ; 
 - break ; 
 - } catch ( RuntimeException e ) { 
 - i - - ; 
 - break ; 
 - } finally { 
 - i + + ; 
 - } 
 - case 23 : 
 - switch ( j ) { 
 - case 1 : 
 - continue ; 
 - case 2 : 
 - return ; 
 - default : 
 - return ; 
 - } 
 - case 24 : 
 - switch ( j ) { 
 - case 1 : 
 - continue ; 
 - case 2 : 
 - break ; 
 - default : 
 - return ; 
 - } 
 - default : / / fall through ! ! ! 
 - / / this is the last label 
 - i + + ; 
 - } 
 - } 
 - } 
 - 
 - 
 - 
 - / * Like above , but all fall throughs with relief comment * / 
 - void methodFallThru ( int i , int j , boolean cond ) { 
 - while ( true ) { 
 - switch ( i ) { 
 - case - 1 : / / FALLTHRU 
 - 
 - case 0 : / / no problem 
 - case 1 : 
 - i + + ; 
 - break ; 
 - case 2 : 
 - i + + ; 
 - / / fallthru 
 - case 3 : 
 - i + + ; 
 - break ; 
 - case 4 : 
 - return ; 
 - case 5 : 
 - throw new RuntimeException ( " " ) ; 
 - case 6 : 
 - continue ; 
 - case 7 : { 
 - break ; 
 - } 
 - case 8 : { 
 - return ; 
 - } 
 - case 9 : { 
 - throw new RuntimeException ( " " ) ; 
 - } 
 - case 10 : { 
 - continue ; 
 - } 
 - case 11 : { 
 - i + + ; 
 - } 
 - / / fallthru 
 - case 12 : 
 - if ( false ) 
 - break ; 
 - else 
 - break ; 
 - case 13 : 
 - if ( true ) { 
 - return ; 
 - } 
 - case 14 : 
 - if ( true ) { 
 - return ; 
 - } else { 
 - / / do nothing 
 - } 
 - / / fallthru 
 - case 15 : 
 - do { 
 - System . identityHashCode ( " something " ) ; 
 - return ; 
 - } while ( true ) ; 
 - case 16 : 
 - for ( int j1 = 0 ; j1 < 10 ; j1 + + ) { 
 - String . valueOf ( " something " ) ; 
 - return ; 
 - } 
 - case 17 : 
 - while ( cond ) 
 - throw new RuntimeException ( " " ) ; 
 - case 18 : 
 - while ( cond ) { 
 - break ; 
 - } 
 - / / fallthru 
 - case 19 : 
 - try { 
 - i + + ; 
 - break ; 
 - } catch ( RuntimeException e ) { 
 - break ; 
 - } catch ( Error e ) { 
 - return ; 
 - } 
 - case 20 : 
 - try { 
 - i + + ; 
 - break ; 
 - } catch ( RuntimeException e ) { 
 - } catch ( Error e ) { 
 - return ; 
 - } 
 - / / fallthru 
 - case 21 : 
 - try { 
 - i + + ; 
 - } catch ( RuntimeException e ) { 
 - i - - ; 
 - } finally { 
 - break ; 
 - } 
 - case 22 : 
 - try { 
 - i + + ; 
 - break ; 
 - } catch ( RuntimeException e ) { 
 - i - - ; 
 - break ; 
 - } finally { 
 - i + + ; 
 - } 
 - 
 - case 23 : 
 - switch ( j ) { 
 - case 1 : 
 - continue ; 
 - case 2 : 
 - return ; 
 - default : 
 - return ; 
 - } 
 - case 24 : 
 - i + + ; 
 - / * fallthru * / case 25 : 
 - i + + ; 
 - break ; 
 - 
 - case 26 : 
 - switch ( j ) { 
 - case 1 : 
 - continue ; 
 - case 2 : 
 - break ; 
 - default : 
 - return ; 
 - } 
 - / / fallthru 
 - default : 
 - / / this is the last label 
 - i + + ; 
 - / / fallthru 
 - } 
 - } 
 - } 
 - 
 - / * Test relief comment . * / 
 - void methodFallThruCC ( int i , int j , boolean cond ) { 
 - while ( true ) { 
 - switch ( i ) { 
 - case 0 : 
 - i + + ; / / fallthru 
 - 
 - case 1 : 
 - i + + ; 
 - / / fallthru 
 - case 2 : { 
 - i + + ; 
 - } 
 - / / fallthru 
 - case 3 : 
 - i + + ; 
 - / * fallthru * / case 4 : 
 - break ; 
 - case 5 : 
 - i + + ; 
 - / / fallthru 
 - } 
 - } 
 - } 
 - 
 - / * Like above , but C - style comments . * / 
 - void methodFallThruC ( int i , int j , boolean cond ) { 
 - while ( true ) { 
 - switch ( i ) { 
 - case 0 : 
 - i + + ; / * fallthru * / 
 - 
 - case 1 : 
 - i + + ; 
 - / * fallthru * / 
 - case 2 : 
 - i + + ; 
 - / * fallthru * / case 3 : 
 - break ; 
 - case 4 : 
 - i + + ; 
 - / * fallthru * / 
 - } 
 - } 
 - } 
 - 
 - / * Like above , but C - style comments with no spaces . * / 
 - void methodFallThruC2 ( int i , int j , boolean cond ) { 
 - while ( true ) { 
 - switch ( i ) { 
 - case 0 : 
 - i + + ; / * fallthru * / 
 - 
 - case 1 : 
 - i + + ; 
 - / * fallthru * / 
 - case 2 : 
 - i + + ; 
 - / * fallthru * / case 3 : 
 - break ; 
 - case 4 : 
 - i + + ; 
 - / * fallthru * / 
 - } 
 - } 
 - } 
 - 
 - / * C - style comments with other default fallthru - comment . * / 
 - void methodFallThruCOtherWords ( int i , int j , boolean cond ) { 
 - while ( true ) { 
 - switch ( i ) { 
 - case 0 : 
 - i + + ; / * falls through * / 
 - 
 - case 1 : 
 - i + + ; 
 - / * falls through * / 
 - case 2 : 
 - i + + ; 
 - / * falls through * / case 3 : 
 - break ; 
 - case 4 : 
 - i + + ; 
 - / * falls through * / 
 - } 
 - } 
 - } 
 - 
 - / * C - style comments with custom fallthru - comment . * / 
 - void methodFallThruCCustomWords ( int i , int j , boolean cond ) { 
 - while ( true ) { 
 - switch ( i ) { 
 - case 0 : 
 - i + + ; / * Continue with next case * / 
 - 
 - case 1 : 
 - i + + ; 
 - / * Continue with next case * / 
 - case 2 : 
 - i + + ; 
 - / * Continue with next case * / case 3 : 
 - break ; 
 - case 4 : 
 - i + + ; 
 - / * Continue with next case * / 
 - } 
 - } 
 - } 
 - 
 - void methodFallThruLastCaseGroup ( int i , int j , boolean cond ) { 
 - while ( true ) { 
 - switch ( i ) { 
 - case 0 : 
 - i + + ; / / fallthru 
 - } 
 - switch ( i ) { 
 - case 0 : 
 - i + + ; 
 - / / fallthru 
 - } 
 - switch ( i ) { 
 - case 0 : 
 - i + + ; 
 - / * fallthru * / } 
 - } 
 - } 
 - 
 - void method1472228 ( int i ) { 
 - switch ( i ) { 
 - case 2 : 
 - / / do nothing 
 - break ; 
 - default : 
 - } 
 - } 
 - 
 - void nestedSwitches ( ) { 
 - switch ( hashCode ( ) ) { 
 - case 1 : 
 - switch ( hashCode ( ) ) { / / causing NullPointerException in the past 
 - case 1 : 
 - } 
 - default : / / violation - no fall through comment 
 - } 
 - } 
 - 
 - void nextedSwitches2 ( ) { 
 - switch ( hashCode ( ) ) { 
 - case 1 : 
 - switch ( hashCode ( ) ) { } 
 - case 2 : 
 - System . lineSeparator ( ) ; 
 - break ; 
 - } 
 - } 
 - 
 - void ifWithoutBreak ( ) { 
 - switch ( hashCode ( ) ) { 
 - case 1 : 
 - if ( true ) { 
 - System . lineSeparator ( ) ; 
 - } 
 - case 2 : 
 - System . lineSeparator ( ) ; 
 - break ; 
 - } 
 - } 
 - 
 - void noCommentAtTheEnd ( ) { 
 - switch ( hashCode ( ) ) { 
 - case 1 : System . lineSeparator ( ) ; 
 - 
 - case 2 : 
 - System . lineSeparator ( ) ; 
 - break ; 
 - } 
 - } 
 - 
 - void tryResource ( ) throws Exception { 
 - switch ( hashCode ( ) ) { 
 - case 1 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - case 2 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - finally { 
 - return ; 
 - } 
 - case 3 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - catch ( Exception ex ) { 
 - return ; 
 - } 
 - case 4 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - finally { 
 - return ; 
 - } 
 - case 5 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - finally { 
 - } 
 - case 6 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - catch ( Exception ex ) { 
 - return ; 
 - } 
 - / / fallthru 
 - case 7 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - / / fallthru 
 - case 8 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - finally { 
 - } 
 - / / fallthru 
 - case 9 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - catch ( Exception ex ) { 
 - } 
 - / / fallthru 
 - case 10 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - catch ( Exception ex ) { 
 - } 
 - / / fallthru 
 - default : 
 - break ; 
 - } 
 - } 
 - 
 - private static class Resource implements AutoCloseable { 
 - @ Override 
 - public void close ( ) throws Exception { 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputGregorianCalendar . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputGregorianCalendar . java 
 deleted file mode 100644 
 index 4b804a4 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputGregorianCalendar . java 
 + + + / dev / null 
 @ @ - 1 , 8 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - public class InputGregorianCalendar 
 - { 
 - class SubCalendar { 
 - 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSimplifyBoolean . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSimplifyBoolean . java 
 deleted file mode 100644 
 index 36d3b81 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSimplifyBoolean . java 
 + + + / dev / null 
 @ @ - 1 , 88 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - / * * 
 - Contains boolean logic that can be simplified . 
 - 
 - @ author lkuehne 
 - * / 
 - public class InputSimplifyBoolean 
 - { 
 - 
 - public static boolean isOddMillis ( ) 
 - { 
 - boolean even = System . currentTimeMillis ( ) % 2 = = 0 ; 
 - 
 - / / can be simplified to " if ( even ) " 
 - if ( even = = true ) { 
 - return false ; 
 - } 
 - else { 
 - return true ; 
 - } 
 - / / return can be simplified to " return ! even " 
 - } 
 - 
 - public static boolean isOddMillis2 ( ) 
 - { 
 - boolean even = System . currentTimeMillis ( ) % 2 = = 0 ; 
 - / / can be simplified to " return ! even " 
 - if ( ! even ) 
 - return true ; 
 - else 
 - return false ; 
 - } 
 - 
 - public static boolean giveMeTrue ( ) 
 - { 
 - boolean tt = isOddMillis ( ) | | true ; 
 - boolean ff = isOddMillis ( ) & & false ; 
 - return ! false | | ( true ! = false ) ; 
 - } 
 - 
 - public void tryToProvokeNPE ( ) 
 - { 
 - if ( true ) { 
 - } 
 - else { 
 - } 
 - 
 - if ( true ) { 
 - return ; 
 - } 
 - else { 
 - return ; 
 - } 
 - } 
 - 
 - public boolean ifNoElse ( ) 
 - { 
 - if ( isOddMillis ( ) ) { 
 - return true ; 
 - } 
 - return false ; 
 - } 
 - 
 - boolean a ( ) { 
 - boolean asd = false ; 
 - boolean dasa = true ; 
 - 
 - if ( asd ) { 
 - return true ; 
 - } else { 
 - return dasa ; 
 - } 
 - } 
 - 
 - boolean b ( ) { 
 - boolean asd = false ; 
 - 
 - if ( asd ) ; 
 - else ; 
 - 
 - return true ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputGregorianCalendar . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputGregorianCalendar . java 
 new file mode 100644 
 index 0000000 . . 629dc3b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputGregorianCalendar . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + public class InputGregorianCalendar 
 + { 
 + class SubCalendar { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutableSameTypeName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutableSameTypeName . java 
 index 7c815f5 . . 0b06a76 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutableSameTypeName . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutableSameTypeName . java 
 @ @ - 1 , 12 + 1 , 12 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . design ; 
 
 - import com . puppycrawl . tools . checkstyle . checks . coding . InputGregorianCalendar ; 
 + import com . puppycrawl . tools . checkstyle . checks . design . InputGregorianCalendar ; 
 import com . puppycrawl . tools . checkstyle . checks . design . InetSocketAddress ; 
 public final class InputImmutableSameTypeName 
 { 
 public final java . util . GregorianCalendar calendar = null ; 
 public final InputGregorianCalendar calendar2 = null ; 
 - public final com . puppycrawl . tools . checkstyle . checks . coding . InputGregorianCalendar calendar3 = null ; 
 + public final com . puppycrawl . tools . checkstyle . checks . design . InputGregorianCalendar calendar3 = null ; 
 public final InetSocketAddress address = null ; 
 public final java . net . InetSocketAddress adr = null ; 
 }
