BLEU SCORE: 0.04767707020457096

TEST MSG: minor : fixed test / resources wrong package location
GENERATED MSG: fix eclipse package declaration error in InputPackageDeclaration

TEST DIFF (one line): diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java <nl> index 4d326a6 . . d4bc493 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + package com . puppycrawl . tools . checkstyle . coding ; <nl> <nl> public class InputRequireThis3 { <nl> interface AnonWithEmpty {
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 34768b8 . . a95488a 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 878 , 7 + 878 , 7 @ @ <nl> < regex > < pattern > . * . checks . naming . AbstractAccessControlNameCheck < / pattern > < branchRate > 95 < / branchRate > < lineRate > 80 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . naming . AbstractClassNameCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 90 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . naming . AbstractNameCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 87 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . checks . naming . AbstractTypeParameterNameCheck < / pattern > < branchRate > 75 < / branchRate > < lineRate > 83 < / lineRate > < / regex > <nl> + < regex > < pattern > . * . checks . naming . AbstractTypeParameterNameCheck < / pattern > < branchRate > 75 < / branchRate > < lineRate > 81 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . naming . ConstantNameCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 92 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . naming . LocalFinalVariableNameCheck < / pattern > < branchRate > 87 < / branchRate > < lineRate > 85 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . naming . LocalVariableNameCheck < / pattern > < branchRate > 94 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> index 05591b0 . . 9f94b3b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> @ @ - 276 , 10 + 276 , 6 @ @ public class SuppressWarningsCheck extends AbstractFormatCheck { <nl> * @ return the string without two quotes <nl> * / <nl> private String removeQuotes ( final String warning ) { <nl> - assert warning ! = null : " the warning was null " ; <nl> - assert warning . charAt ( 0 ) = = ' " ' ; <nl> - assert warning . charAt ( warning . length ( ) - 1 ) = = ' " ' ; <nl> - <nl> return warning . substring ( 1 , warning . length ( ) - 1 ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java <nl> index 9c7d8d3 . . 08ef243 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java <nl> @ @ - 36 , 7 + 36 , 6 @ @ public abstract class AbstractIllegalCheck extends Check { <nl> * @ param initialNames the initial class names to treat as illegal <nl> * / <nl> protected AbstractIllegalCheck ( final String . . . initialNames ) { <nl> - assert initialNames ! = null ; <nl> setIllegalClassNames ( initialNames ) ; <nl> } <nl> <nl> @ @ - 58 , 7 + 57 , 6 @ @ public abstract class AbstractIllegalCheck extends Check { <nl> * array of illegal exception classes <nl> * / <nl> public final void setIllegalClassNames ( final String . . . classNames ) { <nl> - assert classNames ! = null ; <nl> illegalClassNames . clear ( ) ; <nl> for ( final String name : classNames ) { <nl> illegalClassNames . add ( name ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / Guard . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / Guard . java <nl> index c1b5acf . . 78cc62d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / Guard . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / Guard . java <nl> @ @ - 87 , 7 + 87 , 6 @ @ class Guard { <nl> * @ return a result { @ link AccessResult } indicating whether it can be used . <nl> * / <nl> AccessResult verifyImport ( final String forImport ) { <nl> - assert forImport ! = null ; <nl> if ( className ! = null ) { <nl> final boolean classMatch = regExp <nl> ? forImport . matches ( className ) <nl> @ @ - 99 , 7 + 98 , 6 @ @ class Guard { <nl> / / the package . Then check if matched and we must be an exact match . <nl> / / In this case , the text after the first " . " must not contain <nl> / / another " . " as this indicates that it is not an exact match . <nl> - assert pkgName ! = null ; <nl> boolean pkgMatch ; <nl> if ( regExp ) { <nl> pkgMatch = forImport . matches ( pkgName + " \ \ . . * " ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractTypeParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractTypeParameterNameCheck . java <nl> index bd495a4 . . 56c3a47 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractTypeParameterNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractTypeParameterNameCheck . java <nl> @ @ - 62 , 10 + 62 , 6 @ @ public abstract class AbstractTypeParameterNameCheck <nl> @ Override <nl> public final void init ( ) { <nl> this . location = getLocation ( ) ; <nl> - <nl> - assert this . location = = TokenTypes . CLASS _ DEF <nl> - | | this . location = = TokenTypes . METHOD _ DEF <nl> - | | this . location = = TokenTypes . INTERFACE _ DEF ; <nl> } <nl> <nl> @ Override

TEST DIFF:
diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java 
 index 4d326a6 . . d4bc493 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputRequireThis3 . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + package com . puppycrawl . tools . checkstyle . coding ; 
 
 public class InputRequireThis3 { 
 interface AnonWithEmpty {

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 34768b8 . . a95488a 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 878 , 7 + 878 , 7 @ @ 
 < regex > < pattern > . * . checks . naming . AbstractAccessControlNameCheck < / pattern > < branchRate > 95 < / branchRate > < lineRate > 80 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . naming . AbstractClassNameCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 90 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . naming . AbstractNameCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 87 < / lineRate > < / regex > 
 - < regex > < pattern > . * . checks . naming . AbstractTypeParameterNameCheck < / pattern > < branchRate > 75 < / branchRate > < lineRate > 83 < / lineRate > < / regex > 
 + < regex > < pattern > . * . checks . naming . AbstractTypeParameterNameCheck < / pattern > < branchRate > 75 < / branchRate > < lineRate > 81 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . naming . ConstantNameCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 92 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . naming . LocalFinalVariableNameCheck < / pattern > < branchRate > 87 < / branchRate > < lineRate > 85 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . naming . LocalVariableNameCheck < / pattern > < branchRate > 94 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 index 05591b0 . . 9f94b3b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 @ @ - 276 , 10 + 276 , 6 @ @ public class SuppressWarningsCheck extends AbstractFormatCheck { 
 * @ return the string without two quotes 
 * / 
 private String removeQuotes ( final String warning ) { 
 - assert warning ! = null : " the warning was null " ; 
 - assert warning . charAt ( 0 ) = = ' " ' ; 
 - assert warning . charAt ( warning . length ( ) - 1 ) = = ' " ' ; 
 - 
 return warning . substring ( 1 , warning . length ( ) - 1 ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java 
 index 9c7d8d3 . . 08ef243 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . java 
 @ @ - 36 , 7 + 36 , 6 @ @ public abstract class AbstractIllegalCheck extends Check { 
 * @ param initialNames the initial class names to treat as illegal 
 * / 
 protected AbstractIllegalCheck ( final String . . . initialNames ) { 
 - assert initialNames ! = null ; 
 setIllegalClassNames ( initialNames ) ; 
 } 
 
 @ @ - 58 , 7 + 57 , 6 @ @ public abstract class AbstractIllegalCheck extends Check { 
 * array of illegal exception classes 
 * / 
 public final void setIllegalClassNames ( final String . . . classNames ) { 
 - assert classNames ! = null ; 
 illegalClassNames . clear ( ) ; 
 for ( final String name : classNames ) { 
 illegalClassNames . add ( name ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / Guard . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / Guard . java 
 index c1b5acf . . 78cc62d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / Guard . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / Guard . java 
 @ @ - 87 , 7 + 87 , 6 @ @ class Guard { 
 * @ return a result { @ link AccessResult } indicating whether it can be used . 
 * / 
 AccessResult verifyImport ( final String forImport ) { 
 - assert forImport ! = null ; 
 if ( className ! = null ) { 
 final boolean classMatch = regExp 
 ? forImport . matches ( className ) 
 @ @ - 99 , 7 + 98 , 6 @ @ class Guard { 
 / / the package . Then check if matched and we must be an exact match . 
 / / In this case , the text after the first " . " must not contain 
 / / another " . " as this indicates that it is not an exact match . 
 - assert pkgName ! = null ; 
 boolean pkgMatch ; 
 if ( regExp ) { 
 pkgMatch = forImport . matches ( pkgName + " \ \ . . * " ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractTypeParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractTypeParameterNameCheck . java 
 index bd495a4 . . 56c3a47 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractTypeParameterNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractTypeParameterNameCheck . java 
 @ @ - 62 , 10 + 62 , 6 @ @ public abstract class AbstractTypeParameterNameCheck 
 @ Override 
 public final void init ( ) { 
 this . location = getLocation ( ) ; 
 - 
 - assert this . location = = TokenTypes . CLASS _ DEF 
 - | | this . location = = TokenTypes . METHOD _ DEF 
 - | | this . location = = TokenTypes . INTERFACE _ DEF ; 
 } 
 
 @ Override
