BLEU SCORE: 0.07807646168419155

TEST MSG: Issue # 4422 : Implement XpathFilter
GENERATED MSG: Issue # 4714 : Make SuppressionCommentFilter and SuppressWithNearbyCommentFilter children of TreeWalker

TEST DIFF (one line): diff - - git a / config / import - control . xml b / config / import - control . xml <nl> index 9b7fdb8 . . d3fbe8e 100644 <nl> - - - a / config / import - control . xml <nl> + + + b / config / import - control . xml <nl> @ @ - 143 , 11 + 143 , 13 @ @ <nl> < / subpackage > <nl> <nl> < subpackage name = " filters " > <nl> + < allow pkg = " net . sf . saxon " / > <nl> < allow class = " java . lang . ref . WeakReference " local - only = " true " / > <nl> < allow class = " com . puppycrawl . tools . checkstyle . TreeWalkerAuditEvent " local - only = " true " / > <nl> < allow class = " com . puppycrawl . tools . checkstyle . TreeWalkerFilter " local - only = " true " / > <nl> < disallow pkg = " com \ . puppycrawl \ . tools \ . checkstyle \ . checks \ . [ ^ . ] + " regex = " true " / > <nl> < allow pkg = " com . puppycrawl . tools . checkstyle . utils " / > <nl> + < allow pkg = " com . puppycrawl . tools . checkstyle . xpath " / > <nl> < / subpackage > <nl> <nl> < subpackage name = " gui " strategyOnMismatch = " disallowed " > <nl> diff - - git a / config / pmd - test . xml b / config / pmd - test . xml <nl> index e8b2303 . . 4c9dc37 100644 <nl> - - - a / config / pmd - test . xml <nl> + + + b / config / pmd - test . xml <nl> @ @ - 69 , 7 + 69 , 7 @ @ <nl> < ! - - pmd cannot find assert if it is located in private method of this class called from the test <nl> method or method of another class - - > <nl> < properties > <nl> - < ! - - in SuppressionCommentFilterTest , SuppressWithNearbyCommentFilterTest , SuppressionFilterTest <nl> + < ! - - in SuppressionCommentFilterTest , SuppressWithNearbyCommentFilterTest , SuppressionFilterTest , XpathFilterTest <nl> pmd does not accept nl . jqno . equalsverifier . EqualsVerifier # . verify ( ) as correctness check method - - > <nl> < ! - - in AbstractJavadocCheckTest pmd does not find asserts in another class methods called from the test method - - > <nl> < ! - - in ImportControlCheckTest , DetailASTTest <nl> @ @ - 88 , 6 + 88 , 7 @ @ <nl> | / / ClassOrInterfaceDeclaration [ @ Image = ' AstRegressionTest ' ] / / MethodDeclarator [ @ Image = ' testImpossibleValid ' ] <nl> | / / ClassOrInterfaceDeclaration [ @ Image = ' AllChecksTest ' ] / / MethodDeclarator [ @ Image = ' testAllModulesAreReferencedInConfigFile ' ] <nl> | / / ClassOrInterfaceDeclaration [ @ Image = ' DetailASTTest ' ] / / MethodDeclarator [ @ Image = ' testTreeStructure ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' XpathFilterTest ' ] / / MethodDeclarator [ @ Image = ' testEqualsAndHashCode ' ] <nl> " / > <nl> < / properties > <nl> < / rule > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index f0fd4a1 . . c2f9fe1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 209 , 9 + 209 , 14 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> <nl> walk ( astWithComments , contents , AstState . WITH _ COMMENTS ) ; <nl> } <nl> - final SortedSet < LocalizedMessage > filteredMessages = <nl> - getFilteredMessages ( fileName , contents ) ; <nl> - addMessages ( filteredMessages ) ; <nl> + if ( filters . isEmpty ( ) ) { <nl> + addMessages ( messages ) ; <nl> + } <nl> + else { <nl> + final SortedSet < LocalizedMessage > filteredMessages = <nl> + getFilteredMessages ( fileName , contents , rootAST ) ; <nl> + addMessages ( filteredMessages ) ; <nl> + } <nl> messages . clear ( ) ; <nl> } <nl> } <nl> @ @ - 232 , 14 + 237 , 15 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> * Returns filtered set of { @ link LocalizedMessage } . <nl> * @ param fileName path to the file <nl> * @ param fileContents the contents of the file <nl> + * @ param rootAST root AST element { @ link DetailAST } of the file <nl> * @ return filtered set of messages <nl> * / <nl> - private SortedSet < LocalizedMessage > getFilteredMessages ( String fileName , <nl> - FileContents fileContents ) { <nl> + private SortedSet < LocalizedMessage > getFilteredMessages ( <nl> + String fileName , FileContents fileContents , DetailAST rootAST ) { <nl> final SortedSet < LocalizedMessage > result = new TreeSet < > ( messages ) ; <nl> for ( LocalizedMessage element : messages ) { <nl> final TreeWalkerAuditEvent event = <nl> - new TreeWalkerAuditEvent ( fileContents , fileName , element ) ; <nl> + new TreeWalkerAuditEvent ( fileContents , fileName , element , rootAST ) ; <nl> for ( TreeWalkerFilter filter : filters ) { <nl> if ( ! filter . accept ( event ) ) { <nl> result . remove ( element ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalkerAuditEvent . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalkerAuditEvent . java <nl> index 00beac9 . . 629c680 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalkerAuditEvent . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalkerAuditEvent . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> <nl> @ @ - 34 , 6 + 35 , 8 @ @ public class TreeWalkerAuditEvent { <nl> private final FileContents fileContents ; <nl> / * * Message associated with the event . * * / <nl> private final LocalizedMessage localizedMessage ; <nl> + / * * Root ast element . * * / <nl> + private final DetailAST rootAst ; <nl> <nl> / * * <nl> * Creates a new { @ code TreeWalkerAuditEvent } instance . <nl> @ @ - 41 , 12 + 44 , 14 @ @ public class TreeWalkerAuditEvent { <nl> * @ param fileContents contents of the file associated with the event <nl> * @ param fileName file associated with the event <nl> * @ param localizedMessage the actual message <nl> + * @ param rootAst root AST element { @ link DetailAST } of the file <nl> * / <nl> public TreeWalkerAuditEvent ( FileContents fileContents , String fileName , <nl> - LocalizedMessage localizedMessage ) { <nl> + LocalizedMessage localizedMessage , DetailAST rootAst ) { <nl> this . fileContents = fileContents ; <nl> this . fileName = fileName ; <nl> this . localizedMessage = localizedMessage ; <nl> + this . rootAst = rootAst ; <nl> } <nl> <nl> / * * <nl> @ @ - 115 , 4 + 120 , 20 @ @ public class TreeWalkerAuditEvent { <nl> public String getSourceName ( ) { <nl> return localizedMessage . getSourceName ( ) ; <nl> } <nl> + <nl> + / * * <nl> + * Gets the token type of the message . <nl> + * @ return the token type of the message <nl> + * / <nl> + public int getTokenType ( ) { <nl> + return localizedMessage . getTokenType ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets the root element of the AST tree . <nl> + * @ return the root element of the AST tree <nl> + * / <nl> + public DetailAST getRootAst ( ) { <nl> + return rootAst ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / XpathFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / XpathFilter . java <nl> new file mode 100644 <nl> index 0000000 . . 8079be3 <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / XpathFilter . java <nl> @ @ - 0 , 0 + 1 , 185 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . filters ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . Objects ; <nl> + import java . util . regex . Pattern ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . TreeWalkerAuditEvent ; <nl> + import com . puppycrawl . tools . checkstyle . TreeWalkerFilter ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> + import com . puppycrawl . tools . checkstyle . xpath . AbstractNode ; <nl> + import com . puppycrawl . tools . checkstyle . xpath . RootNode ; <nl> + import net . sf . saxon . om . Item ; <nl> + import net . sf . saxon . sxpath . XPathDynamicContext ; <nl> + import net . sf . saxon . sxpath . XPathEvaluator ; <nl> + import net . sf . saxon . sxpath . XPathExpression ; <nl> + import net . sf . saxon . trans . XPathException ; <nl> + <nl> + / * * <nl> + * This filter processes { @ link TreeWalkerAuditEvent } <nl> + * objects based on the criteria of file , check , module id , xpathQuery . <nl> + * <nl> + * @ author Timur Tibeyev . <nl> + * / <nl> + public class XpathFilter implements TreeWalkerFilter { <nl> + / * * The regexp to match file names against . * / <nl> + private final Pattern fileRegexp ; <nl> + <nl> + / * * The pattern for file names . * / <nl> + private final String filePattern ; <nl> + <nl> + / * * The regexp to match check names against . * / <nl> + private final Pattern checkRegexp ; <nl> + <nl> + / * * The pattern for check class names . * / <nl> + private final String checkPattern ; <nl> + <nl> + / * * Module id filter . * / <nl> + private final String moduleId ; <nl> + <nl> + / * * Xpath expression . * / <nl> + private final XPathExpression xpathExpression ; <nl> + <nl> + / * * Xpath query . * / <nl> + private final String xpathQuery ; <nl> + <nl> + / * * <nl> + * Creates a { @ code XpathElement } instance . <nl> + * @ param files regular expression for names of filtered files <nl> + * @ param checks regular expression for filtered check classes <nl> + * @ param moduleId the module id <nl> + * @ param query the xpath query <nl> + * / <nl> + public XpathFilter ( String files , String checks , <nl> + String moduleId , String query ) { <nl> + filePattern = files ; <nl> + fileRegexp = Pattern . compile ( files ) ; <nl> + checkPattern = checks ; <nl> + if ( checks = = null ) { <nl> + checkRegexp = null ; <nl> + } <nl> + else { <nl> + checkRegexp = CommonUtils . createPattern ( checks ) ; <nl> + } <nl> + this . moduleId = moduleId ; <nl> + xpathQuery = query ; <nl> + if ( xpathQuery = = null ) { <nl> + xpathExpression = null ; <nl> + } <nl> + else { <nl> + final XPathEvaluator xpathEvaluator = new XPathEvaluator ( ) ; <nl> + try { <nl> + xpathExpression = xpathEvaluator . createExpression ( xpathQuery ) ; <nl> + } <nl> + catch ( XPathException ex ) { <nl> + throw new IllegalStateException ( " Unexpected xpath query : " + xpathQuery , ex ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public boolean accept ( TreeWalkerAuditEvent event ) { <nl> + return ! isFileNameAndModuleAndCheckNameMatching ( event ) <nl> + | | ! isXpathQueryMatching ( event ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Is matching by file name , moduleId and Check name . <nl> + * @ param event event <nl> + * @ return true if it is matching <nl> + * / <nl> + private boolean isFileNameAndModuleAndCheckNameMatching ( TreeWalkerAuditEvent event ) { <nl> + return event . getFileName ( ) ! = null <nl> + & & fileRegexp . matcher ( event . getFileName ( ) ) . find ( ) <nl> + & & event . getLocalizedMessage ( ) ! = null <nl> + & & ( moduleId = = null | | moduleId . equals ( event . getModuleId ( ) ) ) <nl> + & & ( checkRegexp = = null | | checkRegexp . matcher ( event . getSourceName ( ) ) . find ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Is matching by xpath query . <nl> + * @ param event event <nl> + * @ return true is matching <nl> + * / <nl> + private boolean isXpathQueryMatching ( TreeWalkerAuditEvent event ) { <nl> + boolean isMatching = false ; <nl> + if ( xpathExpression ! = null ) { <nl> + final List < Item > items = getItems ( event ) ; <nl> + for ( Item item : items ) { <nl> + final AbstractNode abstractNode = ( AbstractNode ) item ; <nl> + isMatching = abstractNode . getTokenType ( ) = = event . getTokenType ( ) <nl> + & & abstractNode . getLineNumber ( ) = = event . getLine ( ) <nl> + & & abstractNode . getColumnNumber ( ) = = event . getColumn ( ) ; <nl> + if ( isMatching ) { <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + return isMatching ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns list of nodes matching xpath expression given event . <nl> + * @ param event { @ code TreeWalkerAuditEvent } object <nl> + * @ return list of nodes matching xpath expression given event <nl> + * / <nl> + private List < Item > getItems ( TreeWalkerAuditEvent event ) { <nl> + final RootNode rootNode ; <nl> + if ( event . getRootAst ( ) = = null ) { <nl> + rootNode = null ; <nl> + } <nl> + else { <nl> + rootNode = new RootNode ( event . getRootAst ( ) ) ; <nl> + } <nl> + final List < Item > items ; <nl> + try { <nl> + final XPathDynamicContext xpathDynamicContext = <nl> + xpathExpression . createDynamicContext ( rootNode ) ; <nl> + items = xpathExpression . evaluate ( xpathDynamicContext ) ; <nl> + } <nl> + catch ( XPathException ex ) { <nl> + throw new IllegalStateException ( " Cannot initialize context and evaluate query : " <nl> + + xpathQuery , ex ) ; <nl> + } <nl> + return items ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) { <nl> + return Objects . hash ( filePattern , checkPattern , moduleId , xpathQuery ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object other ) { <nl> + if ( this = = other ) { <nl> + return true ; <nl> + } <nl> + if ( other = = null | | getClass ( ) ! = other . getClass ( ) ) { <nl> + return false ; <nl> + } <nl> + final XpathFilter xpathFilter = ( XpathFilter ) other ; <nl> + return Objects . equals ( filePattern , xpathFilter . filePattern ) <nl> + & & Objects . equals ( checkPattern , xpathFilter . checkPattern ) <nl> + & & Objects . equals ( moduleId , xpathFilter . moduleId ) <nl> + & & Objects . equals ( xpathQuery , xpathFilter . xpathQuery ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java <nl> index 120daef . . 7d05a9c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java <nl> @ @ - 297 , 7 + 297 , 7 @ @ public class SuppressWithNearbyCommentFilterTest <nl> @ Test <nl> public void testAcceptNullLocalizedMessage ( ) { <nl> final SuppressWithNearbyCommentFilter filter = new SuppressWithNearbyCommentFilter ( ) ; <nl> - final TreeWalkerAuditEvent auditEvent = new TreeWalkerAuditEvent ( null , null , null ) ; <nl> + final TreeWalkerAuditEvent auditEvent = new TreeWalkerAuditEvent ( null , null , null , null ) ; <nl> assertTrue ( " Filter should accept null localized message " , filter . accept ( auditEvent ) ) ; <nl> } <nl> <nl> @ @ - 353 , 13 + 353 , 13 @ @ public class SuppressWithNearbyCommentFilterTest <nl> new FileContents ( " filename " , " / / SUPPRESS CHECKSTYLE ignore " , " line2 " ) ; <nl> contents . reportSingleLineComment ( 1 , 0 ) ; <nl> final TreeWalkerAuditEvent dummyEvent = new TreeWalkerAuditEvent ( contents , " filename " , <nl> - new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) ) ; <nl> + new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) , null ) ; <nl> suppressionCommentFilter . accept ( dummyEvent ) ; <nl> final FileContents contents2 = <nl> new FileContents ( " filename2 " , " some line " , " / / SUPPRESS CHECKSTYLE ignore " ) ; <nl> contents2 . reportSingleLineComment ( 2 , 0 ) ; <nl> final TreeWalkerAuditEvent dummyEvent2 = new TreeWalkerAuditEvent ( contents2 , " filename " , <nl> - new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) ) ; <nl> + new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) , null ) ; <nl> suppressionCommentFilter . accept ( dummyEvent2 ) ; <nl> final List < SuppressionCommentFilter . Tag > tags = <nl> Whitebox . getInternalState ( suppressionCommentFilter , " tags " ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> index e27bada . . 407efd7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> @ @ - 297 , 7 + 297 , 7 @ @ public class SuppressionCommentFilterTest <nl> @ Test <nl> public void testAcceptNullLocalizedMessage ( ) { <nl> final SuppressionCommentFilter filter = new SuppressionCommentFilter ( ) ; <nl> - final TreeWalkerAuditEvent auditEvent = new TreeWalkerAuditEvent ( null , null , null ) ; <nl> + final TreeWalkerAuditEvent auditEvent = new TreeWalkerAuditEvent ( null , null , null , null ) ; <nl> Assert . assertTrue ( " Filter should accept audit event " , filter . accept ( auditEvent ) ) ; <nl> Assert . assertNull ( " File name should not be null " , auditEvent . getFileName ( ) ) ; <nl> } <nl> @ @ - 332 , 7 + 332 , 7 @ @ public class SuppressionCommentFilterTest <nl> new FileContents ( " filename " , " / / CHECKSTYLE : OFF : ConstantNameCheck " , " line2 " ) ; <nl> contents . reportSingleLineComment ( 1 , 0 ) ; <nl> final TreeWalkerAuditEvent dummyEvent = new TreeWalkerAuditEvent ( contents , " filename " , <nl> - new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) ) ; <nl> + new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) , null ) ; <nl> final boolean result = suppressionCommentFilter . accept ( dummyEvent ) ; <nl> assertFalse ( " Fileter should not accept event " , result ) ; <nl> } <nl> @ @ - 344 , 13 + 344 , 13 @ @ public class SuppressionCommentFilterTest <nl> new FileContents ( " filename " , " / / CHECKSTYLE : OFF " , " line2 " ) ; <nl> contents . reportSingleLineComment ( 1 , 0 ) ; <nl> final TreeWalkerAuditEvent dummyEvent = new TreeWalkerAuditEvent ( contents , " filename " , <nl> - new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) ) ; <nl> + new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) , null ) ; <nl> suppressionCommentFilter . accept ( dummyEvent ) ; <nl> final FileContents contents2 = <nl> new FileContents ( " filename2 " , " some line " , " / / CHECKSTYLE : OFF " ) ; <nl> contents2 . reportSingleLineComment ( 2 , 0 ) ; <nl> final TreeWalkerAuditEvent dummyEvent2 = new TreeWalkerAuditEvent ( contents2 , " filename " , <nl> - new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) ) ; <nl> + new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) , null ) ; <nl> suppressionCommentFilter . accept ( dummyEvent2 ) ; <nl> final List < SuppressionCommentFilter . Tag > tags = <nl> Whitebox . getInternalState ( suppressionCommentFilter , " tags " ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java <nl> new file mode 100644 <nl> index 0000000 . . 4f7a7c5 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java <nl> @ @ - 0 , 0 + 1 , 267 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . filters ; <nl> + <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . fail ; <nl> + <nl> + import java . io . File ; <nl> + import java . nio . charset . StandardCharsets ; <nl> + <nl> + import org . junit . Before ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . TreeWalkerAuditEvent ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; <nl> + import net . sf . saxon . sxpath . XPathEvaluator ; <nl> + import net . sf . saxon . sxpath . XPathExpression ; <nl> + import nl . jqno . equalsverifier . EqualsVerifier ; <nl> + <nl> + public class XpathFilterTest extends AbstractModuleTestSupport { <nl> + <nl> + private File file ; <nl> + private FileContents fileContents ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) throws Exception { <nl> + file = new File ( getPath ( " InputSuppressByXpath . java " ) ) ; <nl> + fileContents = new FileContents ( new FileText ( file , <nl> + StandardCharsets . UTF _ 8 . name ( ) ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected String getPackageLocation ( ) { <nl> + return " com / puppycrawl / tools / checkstyle / filters / xpathfilter " ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMatching ( ) throws Exception { <nl> + final String xpath = " / CLASS _ DEF [ @ text = ' InputSuppressByXpath ' ] " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; <nl> + final TreeWalkerAuditEvent ev = getEvent ( 3 , 0 , <nl> + TokenTypes . CLASS _ DEF ) ; <nl> + assertFalse ( " Event should be rejected " , filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonMatchingTokenType ( ) throws Exception { <nl> + final String xpath = " / / METHOD _ DEF [ @ text = ' countTokens ' ] " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; <nl> + final TreeWalkerAuditEvent ev = getEvent ( 3 , 0 , <nl> + TokenTypes . CLASS _ DEF ) ; <nl> + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonMatchingLineNumber ( ) throws Exception { <nl> + final String xpath = " / CLASS _ DEF [ @ text = ' InputSuppressByXpath ' ] " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; <nl> + final TreeWalkerAuditEvent ev = getEvent ( 100 , 0 , <nl> + TokenTypes . CLASS _ DEF ) ; <nl> + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonMatchingColumnNumber ( ) throws Exception { <nl> + final String xpath = " / CLASS _ DEF [ @ text = ' InputSuppressByXpath ' ] " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; <nl> + final TreeWalkerAuditEvent ev = getEvent ( 3 , 100 , <nl> + TokenTypes . CLASS _ DEF ) ; <nl> + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testComplexQuery ( ) throws Exception { <nl> + final String xpath = " / / VARIABLE _ DEF [ @ text = ' pi ' and " <nl> + + " . . / . . [ @ text = ' countTokens ' ] ] " <nl> + + " | / / VARIABLE _ DEF [ @ text = ' someVariable ' and . . / . . [ @ text = ' sum ' ] ] " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; <nl> + final TreeWalkerAuditEvent eventOne = getEvent ( 5 , 8 , <nl> + TokenTypes . VARIABLE _ DEF ) ; <nl> + final TreeWalkerAuditEvent eventTwo = getEvent ( 10 , 4 , <nl> + TokenTypes . VARIABLE _ DEF ) ; <nl> + final TreeWalkerAuditEvent eventThree = getEvent ( 15 , 8 , <nl> + TokenTypes . VARIABLE _ DEF ) ; <nl> + assertFalse ( " Event should be rejected " , filter . accept ( eventOne ) ) ; <nl> + assertTrue ( " Event should be accepted " , filter . accept ( eventTwo ) ) ; <nl> + assertFalse ( " Event should be rejected " , filter . accept ( eventThree ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIncorrectQuery ( ) throws Exception { <nl> + final String xpath = " 1 @ # " ; <nl> + try { <nl> + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; <nl> + fail ( " Exception was expected " ) ; <nl> + } <nl> + catch ( IllegalStateException ex ) { <nl> + assertTrue ( " Message should be : Unexpected xpath query " , <nl> + ex . getMessage ( ) . contains ( " Unexpected xpath query " ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testNoQuery ( ) throws Exception { <nl> + final TreeWalkerAuditEvent event = getEvent ( 15 , 8 , <nl> + TokenTypes . VARIABLE _ DEF ) ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , null ) ; <nl> + assertTrue ( " Event should be accepted " , filter . accept ( event ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNullFileName ( ) throws Exception { <nl> + final String xpath = " NON _ MATCHING _ QUERY " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; <nl> + final TreeWalkerAuditEvent ev = new TreeWalkerAuditEvent ( null , <nl> + null , null , null ) ; <nl> + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonMatchingFileRegexp ( ) throws Exception { <nl> + final String xpath = " NON _ MATCHING _ QUERY " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " NonMatchingRegexp " , " Test " , null , xpath ) ; <nl> + final TreeWalkerAuditEvent ev = getEvent ( 3 , 0 , <nl> + TokenTypes . CLASS _ DEF ) ; <nl> + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNullLocalizedMessage ( ) throws Exception { <nl> + final String xpath = " NON _ MATCHING _ QUERY " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; <nl> + final TreeWalkerAuditEvent ev = new TreeWalkerAuditEvent ( null , <nl> + file . getName ( ) , null , null ) ; <nl> + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonMatchingModuleId ( ) throws Exception { <nl> + final String xpath = " NON _ MATCHING _ QUERY " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , " Test " , " id19 " , xpath ) ; <nl> + final LocalizedMessage message = <nl> + new LocalizedMessage ( 3 , 0 , TokenTypes . CLASS _ DEF , " " , " " , null , null , " id20 " , <nl> + getClass ( ) , null ) ; <nl> + final TreeWalkerAuditEvent ev = new TreeWalkerAuditEvent ( fileContents , <nl> + file . getName ( ) , message , TestUtils . parseFile ( file ) ) ; <nl> + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMatchingModuleId ( ) throws Exception { <nl> + final String xpath = " / CLASS _ DEF [ @ text = ' InputSuppressByXpath ' ] " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , " Test " , " id19 " , xpath ) ; <nl> + final LocalizedMessage message = <nl> + new LocalizedMessage ( 3 , 0 , TokenTypes . CLASS _ DEF , " " , " " , null , null , " id19 " , <nl> + getClass ( ) , null ) ; <nl> + final TreeWalkerAuditEvent ev = new TreeWalkerAuditEvent ( fileContents , <nl> + file . getName ( ) , message , TestUtils . parseFile ( file ) ) ; <nl> + assertFalse ( " Event should be rejected " , filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonMatchingChecks ( ) throws Exception { <nl> + final String xpath = " NON _ MATCHING _ QUERY " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , " NonMatchingRegexp " , " id19 " , xpath ) ; <nl> + final LocalizedMessage message = <nl> + new LocalizedMessage ( 3 , 0 , TokenTypes . CLASS _ DEF , " " , " " , null , null , " id19 " , <nl> + getClass ( ) , null ) ; <nl> + final TreeWalkerAuditEvent ev = new TreeWalkerAuditEvent ( fileContents , <nl> + file . getName ( ) , message , TestUtils . parseFile ( file ) ) ; <nl> + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonMatchingFileNameModuleIdAndCheck ( ) throws Exception { <nl> + final String xpath = " NON _ MATCHING _ QUERY " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , null , null , xpath ) ; <nl> + final TreeWalkerAuditEvent ev = getEvent ( 3 , 0 , <nl> + TokenTypes . CLASS _ DEF ) ; <nl> + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNullModuleIdAndNonMatchingChecks ( ) throws Exception { <nl> + final String xpath = " NON _ MATCHING _ QUERY " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , " NonMatchingRegexp " , null , xpath ) ; <nl> + final TreeWalkerAuditEvent ev = getEvent ( 3 , 0 , <nl> + TokenTypes . CLASS _ DEF ) ; <nl> + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testThrowException ( ) throws Exception { <nl> + final String xpath = " / CLASS _ DEF [ @ text = ' InputSuppressByXpath ' ] " ; <nl> + final XpathFilter filter = <nl> + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; <nl> + final LocalizedMessage message = <nl> + new LocalizedMessage ( 3 , 0 , TokenTypes . CLASS _ DEF , " " , " " , null , null , " id19 " , <nl> + getClass ( ) , null ) ; <nl> + final TreeWalkerAuditEvent ev = new TreeWalkerAuditEvent ( fileContents , <nl> + file . getName ( ) , message , null ) ; <nl> + try { <nl> + filter . accept ( ev ) ; <nl> + } <nl> + catch ( IllegalStateException ex ) { <nl> + assertTrue ( " Exception message does not match expected one " , <nl> + ex . getMessage ( ) . contains ( " Cannot initialize context and evaluate query " ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testEqualsAndHashCode ( ) throws Exception { <nl> + final XPathEvaluator xpathEvaluator = new XPathEvaluator ( ) ; <nl> + EqualsVerifier . forClass ( XpathFilter . class ) . withPrefabValues ( XPathExpression . class , <nl> + xpathEvaluator . createExpression ( " / / METHOD _ DEF " ) , <nl> + xpathEvaluator . createExpression ( " / / VARIABLE _ DEF " ) ) <nl> + . usingGetClass ( ) <nl> + . withIgnoredFields ( " fileRegexp " , " checkRegexp " , " xpathExpression " ) <nl> + . verify ( ) ; <nl> + } <nl> + <nl> + private TreeWalkerAuditEvent getEvent ( int line , int column , int tokenType ) <nl> + throws Exception { <nl> + final LocalizedMessage message = <nl> + new LocalizedMessage ( line , column , tokenType , " " , " " , null , null , null , <nl> + getClass ( ) , null ) ; <nl> + return new TreeWalkerAuditEvent ( fileContents , file . getName ( ) , message , <nl> + TestUtils . parseFile ( file ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / filters / xpathfilter / InputSuppressByXpath . java b / src / test / resources / com / puppycrawl / tools / checkstyle / filters / xpathfilter / InputSuppressByXpath . java <nl> new file mode 100644 <nl> index 0000000 . . 22a1218 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / filters / xpathfilter / InputSuppressByXpath . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . filters . xpathfilter ; <nl> + <nl> + public class InputSuppressByXpath { <nl> + private int countTokens ( ) { <nl> + double pi = 3 . 14 ; <nl> + return 123 ; <nl> + } <nl> + <nl> + public String getName ( ) { <nl> + int someVariable = 123 ; <nl> + return " InputSuppressByXpathThree " ; <nl> + } <nl> + <nl> + public int sum ( int a , int b ) { <nl> + String someVariable = " Hello World " ; <nl> + return a + b ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / config - custom - root - module . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / config - custom - root - module . xml <nl> deleted file mode 100644 <nl> index 20e6f58 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / config - custom - root - module . xml <nl> + + + / dev / null <nl> @ @ - 1 , 8 + 0 , 0 @ @ <nl> - < ? xml version = " 1 . 0 " ? > <nl> - < ! DOCTYPE module PUBLIC <nl> - " - / / Puppy Crawl / / DTD Check Configuration 1 . 3 / / EN " <nl> - " http : / / checkstyle . sourceforge . net / dtds / configuration _ 1 _ 3 . dtd " > <nl> - <nl> - < module name = " com . puppycrawl . tools . checkstyle . TestRootModuleChecker " > <nl> - < property name = " property " value = " $ { lineLength . severity } " default = " " / > <nl> - < / module > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / package - info . java <nl> deleted file mode 100644 <nl> index 7d353d6 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / package - info . java <nl> + + + / dev / null <nl> @ @ - 1 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle ;

TEST DIFF:
diff - - git a / config / import - control . xml b / config / import - control . xml 
 index 9b7fdb8 . . d3fbe8e 100644 
 - - - a / config / import - control . xml 
 + + + b / config / import - control . xml 
 @ @ - 143 , 11 + 143 , 13 @ @ 
 < / subpackage > 
 
 < subpackage name = " filters " > 
 + < allow pkg = " net . sf . saxon " / > 
 < allow class = " java . lang . ref . WeakReference " local - only = " true " / > 
 < allow class = " com . puppycrawl . tools . checkstyle . TreeWalkerAuditEvent " local - only = " true " / > 
 < allow class = " com . puppycrawl . tools . checkstyle . TreeWalkerFilter " local - only = " true " / > 
 < disallow pkg = " com \ . puppycrawl \ . tools \ . checkstyle \ . checks \ . [ ^ . ] + " regex = " true " / > 
 < allow pkg = " com . puppycrawl . tools . checkstyle . utils " / > 
 + < allow pkg = " com . puppycrawl . tools . checkstyle . xpath " / > 
 < / subpackage > 
 
 < subpackage name = " gui " strategyOnMismatch = " disallowed " > 
 diff - - git a / config / pmd - test . xml b / config / pmd - test . xml 
 index e8b2303 . . 4c9dc37 100644 
 - - - a / config / pmd - test . xml 
 + + + b / config / pmd - test . xml 
 @ @ - 69 , 7 + 69 , 7 @ @ 
 < ! - - pmd cannot find assert if it is located in private method of this class called from the test 
 method or method of another class - - > 
 < properties > 
 - < ! - - in SuppressionCommentFilterTest , SuppressWithNearbyCommentFilterTest , SuppressionFilterTest 
 + < ! - - in SuppressionCommentFilterTest , SuppressWithNearbyCommentFilterTest , SuppressionFilterTest , XpathFilterTest 
 pmd does not accept nl . jqno . equalsverifier . EqualsVerifier # . verify ( ) as correctness check method - - > 
 < ! - - in AbstractJavadocCheckTest pmd does not find asserts in another class methods called from the test method - - > 
 < ! - - in ImportControlCheckTest , DetailASTTest 
 @ @ - 88 , 6 + 88 , 7 @ @ 
 | / / ClassOrInterfaceDeclaration [ @ Image = ' AstRegressionTest ' ] / / MethodDeclarator [ @ Image = ' testImpossibleValid ' ] 
 | / / ClassOrInterfaceDeclaration [ @ Image = ' AllChecksTest ' ] / / MethodDeclarator [ @ Image = ' testAllModulesAreReferencedInConfigFile ' ] 
 | / / ClassOrInterfaceDeclaration [ @ Image = ' DetailASTTest ' ] / / MethodDeclarator [ @ Image = ' testTreeStructure ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' XpathFilterTest ' ] / / MethodDeclarator [ @ Image = ' testEqualsAndHashCode ' ] 
 " / > 
 < / properties > 
 < / rule > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index f0fd4a1 . . c2f9fe1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 209 , 9 + 209 , 14 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 
 walk ( astWithComments , contents , AstState . WITH _ COMMENTS ) ; 
 } 
 - final SortedSet < LocalizedMessage > filteredMessages = 
 - getFilteredMessages ( fileName , contents ) ; 
 - addMessages ( filteredMessages ) ; 
 + if ( filters . isEmpty ( ) ) { 
 + addMessages ( messages ) ; 
 + } 
 + else { 
 + final SortedSet < LocalizedMessage > filteredMessages = 
 + getFilteredMessages ( fileName , contents , rootAST ) ; 
 + addMessages ( filteredMessages ) ; 
 + } 
 messages . clear ( ) ; 
 } 
 } 
 @ @ - 232 , 14 + 237 , 15 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 * Returns filtered set of { @ link LocalizedMessage } . 
 * @ param fileName path to the file 
 * @ param fileContents the contents of the file 
 + * @ param rootAST root AST element { @ link DetailAST } of the file 
 * @ return filtered set of messages 
 * / 
 - private SortedSet < LocalizedMessage > getFilteredMessages ( String fileName , 
 - FileContents fileContents ) { 
 + private SortedSet < LocalizedMessage > getFilteredMessages ( 
 + String fileName , FileContents fileContents , DetailAST rootAST ) { 
 final SortedSet < LocalizedMessage > result = new TreeSet < > ( messages ) ; 
 for ( LocalizedMessage element : messages ) { 
 final TreeWalkerAuditEvent event = 
 - new TreeWalkerAuditEvent ( fileContents , fileName , element ) ; 
 + new TreeWalkerAuditEvent ( fileContents , fileName , element , rootAST ) ; 
 for ( TreeWalkerFilter filter : filters ) { 
 if ( ! filter . accept ( event ) ) { 
 result . remove ( element ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalkerAuditEvent . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalkerAuditEvent . java 
 index 00beac9 . . 629c680 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalkerAuditEvent . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalkerAuditEvent . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle ; 
 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 
 @ @ - 34 , 6 + 35 , 8 @ @ public class TreeWalkerAuditEvent { 
 private final FileContents fileContents ; 
 / * * Message associated with the event . * * / 
 private final LocalizedMessage localizedMessage ; 
 + / * * Root ast element . * * / 
 + private final DetailAST rootAst ; 
 
 / * * 
 * Creates a new { @ code TreeWalkerAuditEvent } instance . 
 @ @ - 41 , 12 + 44 , 14 @ @ public class TreeWalkerAuditEvent { 
 * @ param fileContents contents of the file associated with the event 
 * @ param fileName file associated with the event 
 * @ param localizedMessage the actual message 
 + * @ param rootAst root AST element { @ link DetailAST } of the file 
 * / 
 public TreeWalkerAuditEvent ( FileContents fileContents , String fileName , 
 - LocalizedMessage localizedMessage ) { 
 + LocalizedMessage localizedMessage , DetailAST rootAst ) { 
 this . fileContents = fileContents ; 
 this . fileName = fileName ; 
 this . localizedMessage = localizedMessage ; 
 + this . rootAst = rootAst ; 
 } 
 
 / * * 
 @ @ - 115 , 4 + 120 , 20 @ @ public class TreeWalkerAuditEvent { 
 public String getSourceName ( ) { 
 return localizedMessage . getSourceName ( ) ; 
 } 
 + 
 + / * * 
 + * Gets the token type of the message . 
 + * @ return the token type of the message 
 + * / 
 + public int getTokenType ( ) { 
 + return localizedMessage . getTokenType ( ) ; 
 + } 
 + 
 + / * * 
 + * Gets the root element of the AST tree . 
 + * @ return the root element of the AST tree 
 + * / 
 + public DetailAST getRootAst ( ) { 
 + return rootAst ; 
 + } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / XpathFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / XpathFilter . java 
 new file mode 100644 
 index 0000000 . . 8079be3 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / XpathFilter . java 
 @ @ - 0 , 0 + 1 , 185 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . filters ; 
 + 
 + import java . util . List ; 
 + import java . util . Objects ; 
 + import java . util . regex . Pattern ; 
 + 
 + import com . puppycrawl . tools . checkstyle . TreeWalkerAuditEvent ; 
 + import com . puppycrawl . tools . checkstyle . TreeWalkerFilter ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 + import com . puppycrawl . tools . checkstyle . xpath . AbstractNode ; 
 + import com . puppycrawl . tools . checkstyle . xpath . RootNode ; 
 + import net . sf . saxon . om . Item ; 
 + import net . sf . saxon . sxpath . XPathDynamicContext ; 
 + import net . sf . saxon . sxpath . XPathEvaluator ; 
 + import net . sf . saxon . sxpath . XPathExpression ; 
 + import net . sf . saxon . trans . XPathException ; 
 + 
 + / * * 
 + * This filter processes { @ link TreeWalkerAuditEvent } 
 + * objects based on the criteria of file , check , module id , xpathQuery . 
 + * 
 + * @ author Timur Tibeyev . 
 + * / 
 + public class XpathFilter implements TreeWalkerFilter { 
 + / * * The regexp to match file names against . * / 
 + private final Pattern fileRegexp ; 
 + 
 + / * * The pattern for file names . * / 
 + private final String filePattern ; 
 + 
 + / * * The regexp to match check names against . * / 
 + private final Pattern checkRegexp ; 
 + 
 + / * * The pattern for check class names . * / 
 + private final String checkPattern ; 
 + 
 + / * * Module id filter . * / 
 + private final String moduleId ; 
 + 
 + / * * Xpath expression . * / 
 + private final XPathExpression xpathExpression ; 
 + 
 + / * * Xpath query . * / 
 + private final String xpathQuery ; 
 + 
 + / * * 
 + * Creates a { @ code XpathElement } instance . 
 + * @ param files regular expression for names of filtered files 
 + * @ param checks regular expression for filtered check classes 
 + * @ param moduleId the module id 
 + * @ param query the xpath query 
 + * / 
 + public XpathFilter ( String files , String checks , 
 + String moduleId , String query ) { 
 + filePattern = files ; 
 + fileRegexp = Pattern . compile ( files ) ; 
 + checkPattern = checks ; 
 + if ( checks = = null ) { 
 + checkRegexp = null ; 
 + } 
 + else { 
 + checkRegexp = CommonUtils . createPattern ( checks ) ; 
 + } 
 + this . moduleId = moduleId ; 
 + xpathQuery = query ; 
 + if ( xpathQuery = = null ) { 
 + xpathExpression = null ; 
 + } 
 + else { 
 + final XPathEvaluator xpathEvaluator = new XPathEvaluator ( ) ; 
 + try { 
 + xpathExpression = xpathEvaluator . createExpression ( xpathQuery ) ; 
 + } 
 + catch ( XPathException ex ) { 
 + throw new IllegalStateException ( " Unexpected xpath query : " + xpathQuery , ex ) ; 
 + } 
 + } 
 + } 
 + 
 + @ Override 
 + public boolean accept ( TreeWalkerAuditEvent event ) { 
 + return ! isFileNameAndModuleAndCheckNameMatching ( event ) 
 + | | ! isXpathQueryMatching ( event ) ; 
 + } 
 + 
 + / * * 
 + * Is matching by file name , moduleId and Check name . 
 + * @ param event event 
 + * @ return true if it is matching 
 + * / 
 + private boolean isFileNameAndModuleAndCheckNameMatching ( TreeWalkerAuditEvent event ) { 
 + return event . getFileName ( ) ! = null 
 + & & fileRegexp . matcher ( event . getFileName ( ) ) . find ( ) 
 + & & event . getLocalizedMessage ( ) ! = null 
 + & & ( moduleId = = null | | moduleId . equals ( event . getModuleId ( ) ) ) 
 + & & ( checkRegexp = = null | | checkRegexp . matcher ( event . getSourceName ( ) ) . find ( ) ) ; 
 + } 
 + 
 + / * * 
 + * Is matching by xpath query . 
 + * @ param event event 
 + * @ return true is matching 
 + * / 
 + private boolean isXpathQueryMatching ( TreeWalkerAuditEvent event ) { 
 + boolean isMatching = false ; 
 + if ( xpathExpression ! = null ) { 
 + final List < Item > items = getItems ( event ) ; 
 + for ( Item item : items ) { 
 + final AbstractNode abstractNode = ( AbstractNode ) item ; 
 + isMatching = abstractNode . getTokenType ( ) = = event . getTokenType ( ) 
 + & & abstractNode . getLineNumber ( ) = = event . getLine ( ) 
 + & & abstractNode . getColumnNumber ( ) = = event . getColumn ( ) ; 
 + if ( isMatching ) { 
 + break ; 
 + } 
 + } 
 + } 
 + return isMatching ; 
 + } 
 + 
 + / * * 
 + * Returns list of nodes matching xpath expression given event . 
 + * @ param event { @ code TreeWalkerAuditEvent } object 
 + * @ return list of nodes matching xpath expression given event 
 + * / 
 + private List < Item > getItems ( TreeWalkerAuditEvent event ) { 
 + final RootNode rootNode ; 
 + if ( event . getRootAst ( ) = = null ) { 
 + rootNode = null ; 
 + } 
 + else { 
 + rootNode = new RootNode ( event . getRootAst ( ) ) ; 
 + } 
 + final List < Item > items ; 
 + try { 
 + final XPathDynamicContext xpathDynamicContext = 
 + xpathExpression . createDynamicContext ( rootNode ) ; 
 + items = xpathExpression . evaluate ( xpathDynamicContext ) ; 
 + } 
 + catch ( XPathException ex ) { 
 + throw new IllegalStateException ( " Cannot initialize context and evaluate query : " 
 + + xpathQuery , ex ) ; 
 + } 
 + return items ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) { 
 + return Objects . hash ( filePattern , checkPattern , moduleId , xpathQuery ) ; 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object other ) { 
 + if ( this = = other ) { 
 + return true ; 
 + } 
 + if ( other = = null | | getClass ( ) ! = other . getClass ( ) ) { 
 + return false ; 
 + } 
 + final XpathFilter xpathFilter = ( XpathFilter ) other ; 
 + return Objects . equals ( filePattern , xpathFilter . filePattern ) 
 + & & Objects . equals ( checkPattern , xpathFilter . checkPattern ) 
 + & & Objects . equals ( moduleId , xpathFilter . moduleId ) 
 + & & Objects . equals ( xpathQuery , xpathFilter . xpathQuery ) ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java 
 index 120daef . . 7d05a9c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java 
 @ @ - 297 , 7 + 297 , 7 @ @ public class SuppressWithNearbyCommentFilterTest 
 @ Test 
 public void testAcceptNullLocalizedMessage ( ) { 
 final SuppressWithNearbyCommentFilter filter = new SuppressWithNearbyCommentFilter ( ) ; 
 - final TreeWalkerAuditEvent auditEvent = new TreeWalkerAuditEvent ( null , null , null ) ; 
 + final TreeWalkerAuditEvent auditEvent = new TreeWalkerAuditEvent ( null , null , null , null ) ; 
 assertTrue ( " Filter should accept null localized message " , filter . accept ( auditEvent ) ) ; 
 } 
 
 @ @ - 353 , 13 + 353 , 13 @ @ public class SuppressWithNearbyCommentFilterTest 
 new FileContents ( " filename " , " / / SUPPRESS CHECKSTYLE ignore " , " line2 " ) ; 
 contents . reportSingleLineComment ( 1 , 0 ) ; 
 final TreeWalkerAuditEvent dummyEvent = new TreeWalkerAuditEvent ( contents , " filename " , 
 - new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) ) ; 
 + new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) , null ) ; 
 suppressionCommentFilter . accept ( dummyEvent ) ; 
 final FileContents contents2 = 
 new FileContents ( " filename2 " , " some line " , " / / SUPPRESS CHECKSTYLE ignore " ) ; 
 contents2 . reportSingleLineComment ( 2 , 0 ) ; 
 final TreeWalkerAuditEvent dummyEvent2 = new TreeWalkerAuditEvent ( contents2 , " filename " , 
 - new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) ) ; 
 + new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) , null ) ; 
 suppressionCommentFilter . accept ( dummyEvent2 ) ; 
 final List < SuppressionCommentFilter . Tag > tags = 
 Whitebox . getInternalState ( suppressionCommentFilter , " tags " ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 index e27bada . . 407efd7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 @ @ - 297 , 7 + 297 , 7 @ @ public class SuppressionCommentFilterTest 
 @ Test 
 public void testAcceptNullLocalizedMessage ( ) { 
 final SuppressionCommentFilter filter = new SuppressionCommentFilter ( ) ; 
 - final TreeWalkerAuditEvent auditEvent = new TreeWalkerAuditEvent ( null , null , null ) ; 
 + final TreeWalkerAuditEvent auditEvent = new TreeWalkerAuditEvent ( null , null , null , null ) ; 
 Assert . assertTrue ( " Filter should accept audit event " , filter . accept ( auditEvent ) ) ; 
 Assert . assertNull ( " File name should not be null " , auditEvent . getFileName ( ) ) ; 
 } 
 @ @ - 332 , 7 + 332 , 7 @ @ public class SuppressionCommentFilterTest 
 new FileContents ( " filename " , " / / CHECKSTYLE : OFF : ConstantNameCheck " , " line2 " ) ; 
 contents . reportSingleLineComment ( 1 , 0 ) ; 
 final TreeWalkerAuditEvent dummyEvent = new TreeWalkerAuditEvent ( contents , " filename " , 
 - new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) ) ; 
 + new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) , null ) ; 
 final boolean result = suppressionCommentFilter . accept ( dummyEvent ) ; 
 assertFalse ( " Fileter should not accept event " , result ) ; 
 } 
 @ @ - 344 , 13 + 344 , 13 @ @ public class SuppressionCommentFilterTest 
 new FileContents ( " filename " , " / / CHECKSTYLE : OFF " , " line2 " ) ; 
 contents . reportSingleLineComment ( 1 , 0 ) ; 
 final TreeWalkerAuditEvent dummyEvent = new TreeWalkerAuditEvent ( contents , " filename " , 
 - new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) ) ; 
 + new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) , null ) ; 
 suppressionCommentFilter . accept ( dummyEvent ) ; 
 final FileContents contents2 = 
 new FileContents ( " filename2 " , " some line " , " / / CHECKSTYLE : OFF " ) ; 
 contents2 . reportSingleLineComment ( 2 , 0 ) ; 
 final TreeWalkerAuditEvent dummyEvent2 = new TreeWalkerAuditEvent ( contents2 , " filename " , 
 - new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) ) ; 
 + new LocalizedMessage ( 1 , null , null , null , null , Object . class , null ) , null ) ; 
 suppressionCommentFilter . accept ( dummyEvent2 ) ; 
 final List < SuppressionCommentFilter . Tag > tags = 
 Whitebox . getInternalState ( suppressionCommentFilter , " tags " ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java 
 new file mode 100644 
 index 0000000 . . 4f7a7c5 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java 
 @ @ - 0 , 0 + 1 , 267 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . filters ; 
 + 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . fail ; 
 + 
 + import java . io . File ; 
 + import java . nio . charset . StandardCharsets ; 
 + 
 + import org . junit . Before ; 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . TreeWalkerAuditEvent ; 
 + import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; 
 + import net . sf . saxon . sxpath . XPathEvaluator ; 
 + import net . sf . saxon . sxpath . XPathExpression ; 
 + import nl . jqno . equalsverifier . EqualsVerifier ; 
 + 
 + public class XpathFilterTest extends AbstractModuleTestSupport { 
 + 
 + private File file ; 
 + private FileContents fileContents ; 
 + 
 + @ Before 
 + public void setUp ( ) throws Exception { 
 + file = new File ( getPath ( " InputSuppressByXpath . java " ) ) ; 
 + fileContents = new FileContents ( new FileText ( file , 
 + StandardCharsets . UTF _ 8 . name ( ) ) ) ; 
 + } 
 + 
 + @ Override 
 + protected String getPackageLocation ( ) { 
 + return " com / puppycrawl / tools / checkstyle / filters / xpathfilter " ; 
 + } 
 + 
 + @ Test 
 + public void testMatching ( ) throws Exception { 
 + final String xpath = " / CLASS _ DEF [ @ text = ' InputSuppressByXpath ' ] " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; 
 + final TreeWalkerAuditEvent ev = getEvent ( 3 , 0 , 
 + TokenTypes . CLASS _ DEF ) ; 
 + assertFalse ( " Event should be rejected " , filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNonMatchingTokenType ( ) throws Exception { 
 + final String xpath = " / / METHOD _ DEF [ @ text = ' countTokens ' ] " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; 
 + final TreeWalkerAuditEvent ev = getEvent ( 3 , 0 , 
 + TokenTypes . CLASS _ DEF ) ; 
 + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNonMatchingLineNumber ( ) throws Exception { 
 + final String xpath = " / CLASS _ DEF [ @ text = ' InputSuppressByXpath ' ] " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; 
 + final TreeWalkerAuditEvent ev = getEvent ( 100 , 0 , 
 + TokenTypes . CLASS _ DEF ) ; 
 + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNonMatchingColumnNumber ( ) throws Exception { 
 + final String xpath = " / CLASS _ DEF [ @ text = ' InputSuppressByXpath ' ] " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; 
 + final TreeWalkerAuditEvent ev = getEvent ( 3 , 100 , 
 + TokenTypes . CLASS _ DEF ) ; 
 + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testComplexQuery ( ) throws Exception { 
 + final String xpath = " / / VARIABLE _ DEF [ @ text = ' pi ' and " 
 + + " . . / . . [ @ text = ' countTokens ' ] ] " 
 + + " | / / VARIABLE _ DEF [ @ text = ' someVariable ' and . . / . . [ @ text = ' sum ' ] ] " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; 
 + final TreeWalkerAuditEvent eventOne = getEvent ( 5 , 8 , 
 + TokenTypes . VARIABLE _ DEF ) ; 
 + final TreeWalkerAuditEvent eventTwo = getEvent ( 10 , 4 , 
 + TokenTypes . VARIABLE _ DEF ) ; 
 + final TreeWalkerAuditEvent eventThree = getEvent ( 15 , 8 , 
 + TokenTypes . VARIABLE _ DEF ) ; 
 + assertFalse ( " Event should be rejected " , filter . accept ( eventOne ) ) ; 
 + assertTrue ( " Event should be accepted " , filter . accept ( eventTwo ) ) ; 
 + assertFalse ( " Event should be rejected " , filter . accept ( eventThree ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIncorrectQuery ( ) throws Exception { 
 + final String xpath = " 1 @ # " ; 
 + try { 
 + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; 
 + fail ( " Exception was expected " ) ; 
 + } 
 + catch ( IllegalStateException ex ) { 
 + assertTrue ( " Message should be : Unexpected xpath query " , 
 + ex . getMessage ( ) . contains ( " Unexpected xpath query " ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testNoQuery ( ) throws Exception { 
 + final TreeWalkerAuditEvent event = getEvent ( 15 , 8 , 
 + TokenTypes . VARIABLE _ DEF ) ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , null ) ; 
 + assertTrue ( " Event should be accepted " , filter . accept ( event ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNullFileName ( ) throws Exception { 
 + final String xpath = " NON _ MATCHING _ QUERY " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; 
 + final TreeWalkerAuditEvent ev = new TreeWalkerAuditEvent ( null , 
 + null , null , null ) ; 
 + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNonMatchingFileRegexp ( ) throws Exception { 
 + final String xpath = " NON _ MATCHING _ QUERY " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " NonMatchingRegexp " , " Test " , null , xpath ) ; 
 + final TreeWalkerAuditEvent ev = getEvent ( 3 , 0 , 
 + TokenTypes . CLASS _ DEF ) ; 
 + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNullLocalizedMessage ( ) throws Exception { 
 + final String xpath = " NON _ MATCHING _ QUERY " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; 
 + final TreeWalkerAuditEvent ev = new TreeWalkerAuditEvent ( null , 
 + file . getName ( ) , null , null ) ; 
 + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNonMatchingModuleId ( ) throws Exception { 
 + final String xpath = " NON _ MATCHING _ QUERY " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , " Test " , " id19 " , xpath ) ; 
 + final LocalizedMessage message = 
 + new LocalizedMessage ( 3 , 0 , TokenTypes . CLASS _ DEF , " " , " " , null , null , " id20 " , 
 + getClass ( ) , null ) ; 
 + final TreeWalkerAuditEvent ev = new TreeWalkerAuditEvent ( fileContents , 
 + file . getName ( ) , message , TestUtils . parseFile ( file ) ) ; 
 + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testMatchingModuleId ( ) throws Exception { 
 + final String xpath = " / CLASS _ DEF [ @ text = ' InputSuppressByXpath ' ] " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , " Test " , " id19 " , xpath ) ; 
 + final LocalizedMessage message = 
 + new LocalizedMessage ( 3 , 0 , TokenTypes . CLASS _ DEF , " " , " " , null , null , " id19 " , 
 + getClass ( ) , null ) ; 
 + final TreeWalkerAuditEvent ev = new TreeWalkerAuditEvent ( fileContents , 
 + file . getName ( ) , message , TestUtils . parseFile ( file ) ) ; 
 + assertFalse ( " Event should be rejected " , filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNonMatchingChecks ( ) throws Exception { 
 + final String xpath = " NON _ MATCHING _ QUERY " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , " NonMatchingRegexp " , " id19 " , xpath ) ; 
 + final LocalizedMessage message = 
 + new LocalizedMessage ( 3 , 0 , TokenTypes . CLASS _ DEF , " " , " " , null , null , " id19 " , 
 + getClass ( ) , null ) ; 
 + final TreeWalkerAuditEvent ev = new TreeWalkerAuditEvent ( fileContents , 
 + file . getName ( ) , message , TestUtils . parseFile ( file ) ) ; 
 + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNonMatchingFileNameModuleIdAndCheck ( ) throws Exception { 
 + final String xpath = " NON _ MATCHING _ QUERY " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , null , null , xpath ) ; 
 + final TreeWalkerAuditEvent ev = getEvent ( 3 , 0 , 
 + TokenTypes . CLASS _ DEF ) ; 
 + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNullModuleIdAndNonMatchingChecks ( ) throws Exception { 
 + final String xpath = " NON _ MATCHING _ QUERY " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , " NonMatchingRegexp " , null , xpath ) ; 
 + final TreeWalkerAuditEvent ev = getEvent ( 3 , 0 , 
 + TokenTypes . CLASS _ DEF ) ; 
 + assertTrue ( " Event should be accepted " , filter . accept ( ev ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testThrowException ( ) throws Exception { 
 + final String xpath = " / CLASS _ DEF [ @ text = ' InputSuppressByXpath ' ] " ; 
 + final XpathFilter filter = 
 + new XpathFilter ( " InputSuppressByXpath " , " Test " , null , xpath ) ; 
 + final LocalizedMessage message = 
 + new LocalizedMessage ( 3 , 0 , TokenTypes . CLASS _ DEF , " " , " " , null , null , " id19 " , 
 + getClass ( ) , null ) ; 
 + final TreeWalkerAuditEvent ev = new TreeWalkerAuditEvent ( fileContents , 
 + file . getName ( ) , message , null ) ; 
 + try { 
 + filter . accept ( ev ) ; 
 + } 
 + catch ( IllegalStateException ex ) { 
 + assertTrue ( " Exception message does not match expected one " , 
 + ex . getMessage ( ) . contains ( " Cannot initialize context and evaluate query " ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testEqualsAndHashCode ( ) throws Exception { 
 + final XPathEvaluator xpathEvaluator = new XPathEvaluator ( ) ; 
 + EqualsVerifier . forClass ( XpathFilter . class ) . withPrefabValues ( XPathExpression . class , 
 + xpathEvaluator . createExpression ( " / / METHOD _ DEF " ) , 
 + xpathEvaluator . createExpression ( " / / VARIABLE _ DEF " ) ) 
 + . usingGetClass ( ) 
 + . withIgnoredFields ( " fileRegexp " , " checkRegexp " , " xpathExpression " ) 
 + . verify ( ) ; 
 + } 
 + 
 + private TreeWalkerAuditEvent getEvent ( int line , int column , int tokenType ) 
 + throws Exception { 
 + final LocalizedMessage message = 
 + new LocalizedMessage ( line , column , tokenType , " " , " " , null , null , null , 
 + getClass ( ) , null ) ; 
 + return new TreeWalkerAuditEvent ( fileContents , file . getName ( ) , message , 
 + TestUtils . parseFile ( file ) ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / filters / xpathfilter / InputSuppressByXpath . java b / src / test / resources / com / puppycrawl / tools / checkstyle / filters / xpathfilter / InputSuppressByXpath . java 
 new file mode 100644 
 index 0000000 . . 22a1218 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / filters / xpathfilter / InputSuppressByXpath . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . filters . xpathfilter ; 
 + 
 + public class InputSuppressByXpath { 
 + private int countTokens ( ) { 
 + double pi = 3 . 14 ; 
 + return 123 ; 
 + } 
 + 
 + public String getName ( ) { 
 + int someVariable = 123 ; 
 + return " InputSuppressByXpathThree " ; 
 + } 
 + 
 + public int sum ( int a , int b ) { 
 + String someVariable = " Hello World " ; 
 + return a + b ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / config - custom - root - module . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / config - custom - root - module . xml 
 deleted file mode 100644 
 index 20e6f58 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / config - custom - root - module . xml 
 + + + / dev / null 
 @ @ - 1 , 8 + 0 , 0 @ @ 
 - < ? xml version = " 1 . 0 " ? > 
 - < ! DOCTYPE module PUBLIC 
 - " - / / Puppy Crawl / / DTD Check Configuration 1 . 3 / / EN " 
 - " http : / / checkstyle . sourceforge . net / dtds / configuration _ 1 _ 3 . dtd " > 
 - 
 - < module name = " com . puppycrawl . tools . checkstyle . TestRootModuleChecker " > 
 - < property name = " property " value = " $ { lineLength . severity } " default = " " / > 
 - < / module > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / package - info . java 
 deleted file mode 100644 
 index 7d353d6 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / package - info . java 
 + + + / dev / null 
 @ @ - 1 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle ;
