BLEU SCORE: 0.02383853510228548

TEST MSG: Issue # 2451 : removed excess hierarchy from NoCloneCheck
GENERATED MSG: Refactor out common code .

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java <nl> index d30e3a6 . . b70b9ba 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java <nl> @ @ - 19 , 6 + 19 , 10 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> / * * <nl> * < p > <nl> * Checks that the clone method is not overridden from the <nl> @ @ - 112 , 7 + 116 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> * @ author Travis Schneeberger <nl> * @ see Object # clone ( ) <nl> * / <nl> - public class NoCloneCheck extends AbstractIllegalMethodCheck { <nl> + public class NoCloneCheck extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 120 , 10 + 124 , 35 @ @ public class NoCloneCheck extends AbstractIllegalMethodCheck { <nl> * / <nl> public static final String MSG _ KEY = " avoid . clone . method " ; <nl> <nl> - / * * <nl> - * Creates an instance . <nl> - * / <nl> - public NoCloneCheck ( ) { <nl> - super ( " clone " , MSG _ KEY ) ; <nl> + @ Override <nl> + public int [ ] getDefaultTokens ( ) { <nl> + return getAcceptableTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return new int [ ] { TokenTypes . METHOD _ DEF } ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getAcceptableTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visitToken ( DetailAST aAST ) { <nl> + final DetailAST mid = aAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> + final String name = mid . getText ( ) ; <nl> + <nl> + if ( " clone " . equals ( name ) ) { <nl> + <nl> + final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> + final boolean hasEmptyParamList = <nl> + ! params . branchContains ( TokenTypes . PARAMETER _ DEF ) ; <nl> + <nl> + if ( hasEmptyParamList ) { <nl> + log ( aAST . getLineNo ( ) , MSG _ KEY ) ; <nl> + } <nl> + } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> index 37fae17 . . c7f3271 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> @ @ - 80 , 12 + 80 , 30 @ @ public class GenericWhitespaceCheck extends Check <nl> } <nl> <nl> if ( after < line . length ( ) ) { <nl> + <nl> / / Check if the last Generic , in which case must be a whitespace <nl> - / / or a ' ( ) , ' . <nl> + / / or a ' ( ) , [ . ' . <nl> if ( 1 = = mDepth ) { <nl> final char charAfter = line . charAt ( after ) ; <nl> - if ( ! Character . isWhitespace ( charAfter ) & & ( ' ( ' ! = charAfter ) <nl> - & & ( ' ) ' ! = charAfter ) & & ( ' , ' ! = charAfter ) ) <nl> + <nl> + / / Need to handle a number of cases . First is : <nl> + / / Collections . < Object > emptySet ( ) ; <nl> + / / ^ <nl> + / / + - - - whitespace not allowed <nl> + if ( ( aAST . getParent ( ) . getType ( ) = = TokenTypes . TYPE _ ARGUMENTS ) <nl> + & & ( aAST . getParent ( ) . getParent ( ) . getType ( ) <nl> + = = TokenTypes . DOT ) <nl> + & & ( aAST . getParent ( ) . getParent ( ) . getParent ( ) . getType ( ) <nl> + = = TokenTypes . METHOD _ CALL ) ) <nl> + { <nl> + if ( Character . isWhitespace ( charAfter ) ) { <nl> + log ( aAST . getLineNo ( ) , after , " ws . followed " , " > " ) ; <nl> + } <nl> + } <nl> + else if ( ! Character . isWhitespace ( charAfter ) <nl> + & & ( ' ( ' ! = charAfter ) & & ( ' ) ' ! = charAfter ) <nl> + & & ( ' , ' ! = charAfter ) & & ( ' [ ' ! = charAfter ) <nl> + & & ( ' . ' ! = charAfter ) ) <nl> { <nl> log ( aAST . getLineNo ( ) , after , " ws . illegalFollow " , " > " ) ; <nl> } <nl> @ @ - 121 , 7 + 139 , 8 @ @ public class GenericWhitespaceCheck extends Check <nl> final DetailAST parent = aAST . getParent ( ) ; <nl> final DetailAST grandparent = parent . getParent ( ) ; <nl> if ( ( TokenTypes . TYPE _ PARAMETERS = = parent . getType ( ) ) <nl> - & & ( TokenTypes . METHOD _ DEF = = grandparent . getType ( ) ) ) <nl> + & & ( ( TokenTypes . CTOR _ DEF = = grandparent . getType ( ) ) <nl> + | | ( TokenTypes . METHOD _ DEF = = grandparent . getType ( ) ) ) ) <nl> { <nl> / / Require whitespace <nl> if ( ! Character . isWhitespace ( line . charAt ( before ) ) ) { <nl> diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / whitespace / InputGenericWhitespaceCheck . java b / src / testinputs / com / puppycrawl / tools / checkstyle / whitespace / InputGenericWhitespaceCheck . java <nl> index 3f633de . . f5d8e87 100644 <nl> - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / whitespace / InputGenericWhitespaceCheck . java <nl> + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / whitespace / InputGenericWhitespaceCheck . java <nl> @ @ - 6 , 8 + 6 , 8 @ @ import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . concurrent . Callable ; <nl> - <nl> - class InputSimpleGenerics implements Comparable < InputSimpleGenerics > , Serializable <nl> + import java . util . Collections ; <nl> + class InputGenericWhitespaceCheck implements Comparable < InputGenericWhitespaceCheck > , Serializable <nl> { <nl> void meth ( ) <nl> { <nl> @ @ - 17 , 7 + 17 , 7 @ @ class InputSimpleGenerics implements Comparable < InputSimpleGenerics > , Serializab <nl> List < List < Integer > > b = new ArrayList < List < Integer > > ( ) ; <nl> } <nl> <nl> - public int compareTo ( InputSimpleGenerics aObject ) <nl> + public int compareTo ( InputGenericWhitespaceCheck aObject ) <nl> { <nl> return 0 ; <nl> } <nl> @ @ - 33 , 6 + 33 , 21 @ @ class InputSimpleGenerics implements Comparable < InputSimpleGenerics > , Serializab <nl> for ( final Map . Entry < Class < ? > , Integer > entry : x . entrySet ( ) ) { <nl> entry . getValue ( ) ; <nl> } <nl> + Class < ? > [ ] parameterClasses = new Class < ? > [ 0 ] ; <nl> return null ; <nl> } <nl> + public int getConstructor ( Class < ? > . . . parameterTypes ) <nl> + { <nl> + Collections . < Object > emptySet ( ) ; <nl> + Collections . < Object > emptySet ( ) ; <nl> + return 666 ; <nl> + } <nl> + <nl> + < T > InputGenericWhitespaceCheck ( List < T > things , int i ) <nl> + { <nl> + } <nl> + <nl> + public < T > InputGenericWhitespaceCheck ( List < T > things ) <nl> + { <nl> + } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> index d1f4a54 . . 105ecca 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> @ @ - 46 , 6 + 46 , 8 @ @ public class GenericWhitespaceCheckTest <nl> " 17 : 71 : ' > ' is preceded with whitespace . " , <nl> " 30 : 17 : ' < ' is not preceded with whitespace . " , <nl> " 30 : 21 : ' > ' is followed by an illegal character . " , <nl> + " 42 : 21 : ' < ' is preceded with whitespace . " , <nl> + " 42 : 30 : ' > ' is followed by whitespace . " , <nl> } ; <nl> verify ( mCheckConfig , <nl> getPath ( " whitespace / InputGenericWhitespaceCheck . java " ) ,

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java 
 index d30e3a6 . . b70b9ba 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheck . java 
 @ @ - 19 , 6 + 19 , 10 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 / * * 
 * < p > 
 * Checks that the clone method is not overridden from the 
 @ @ - 112 , 7 + 116 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 * @ author Travis Schneeberger 
 * @ see Object # clone ( ) 
 * / 
 - public class NoCloneCheck extends AbstractIllegalMethodCheck { 
 + public class NoCloneCheck extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 120 , 10 + 124 , 35 @ @ public class NoCloneCheck extends AbstractIllegalMethodCheck { 
 * / 
 public static final String MSG _ KEY = " avoid . clone . method " ; 
 
 - / * * 
 - * Creates an instance . 
 - * / 
 - public NoCloneCheck ( ) { 
 - super ( " clone " , MSG _ KEY ) ; 
 + @ Override 
 + public int [ ] getDefaultTokens ( ) { 
 + return getAcceptableTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return new int [ ] { TokenTypes . METHOD _ DEF } ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getAcceptableTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public void visitToken ( DetailAST aAST ) { 
 + final DetailAST mid = aAST . findFirstToken ( TokenTypes . IDENT ) ; 
 + final String name = mid . getText ( ) ; 
 + 
 + if ( " clone " . equals ( name ) ) { 
 + 
 + final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 + final boolean hasEmptyParamList = 
 + ! params . branchContains ( TokenTypes . PARAMETER _ DEF ) ; 
 + 
 + if ( hasEmptyParamList ) { 
 + log ( aAST . getLineNo ( ) , MSG _ KEY ) ; 
 + } 
 + } 
 } 
 }

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 index 37fae17 . . c7f3271 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 @ @ - 80 , 12 + 80 , 30 @ @ public class GenericWhitespaceCheck extends Check 
 } 
 
 if ( after < line . length ( ) ) { 
 + 
 / / Check if the last Generic , in which case must be a whitespace 
 - / / or a ' ( ) , ' . 
 + / / or a ' ( ) , [ . ' . 
 if ( 1 = = mDepth ) { 
 final char charAfter = line . charAt ( after ) ; 
 - if ( ! Character . isWhitespace ( charAfter ) & & ( ' ( ' ! = charAfter ) 
 - & & ( ' ) ' ! = charAfter ) & & ( ' , ' ! = charAfter ) ) 
 + 
 + / / Need to handle a number of cases . First is : 
 + / / Collections . < Object > emptySet ( ) ; 
 + / / ^ 
 + / / + - - - whitespace not allowed 
 + if ( ( aAST . getParent ( ) . getType ( ) = = TokenTypes . TYPE _ ARGUMENTS ) 
 + & & ( aAST . getParent ( ) . getParent ( ) . getType ( ) 
 + = = TokenTypes . DOT ) 
 + & & ( aAST . getParent ( ) . getParent ( ) . getParent ( ) . getType ( ) 
 + = = TokenTypes . METHOD _ CALL ) ) 
 + { 
 + if ( Character . isWhitespace ( charAfter ) ) { 
 + log ( aAST . getLineNo ( ) , after , " ws . followed " , " > " ) ; 
 + } 
 + } 
 + else if ( ! Character . isWhitespace ( charAfter ) 
 + & & ( ' ( ' ! = charAfter ) & & ( ' ) ' ! = charAfter ) 
 + & & ( ' , ' ! = charAfter ) & & ( ' [ ' ! = charAfter ) 
 + & & ( ' . ' ! = charAfter ) ) 
 { 
 log ( aAST . getLineNo ( ) , after , " ws . illegalFollow " , " > " ) ; 
 } 
 @ @ - 121 , 7 + 139 , 8 @ @ public class GenericWhitespaceCheck extends Check 
 final DetailAST parent = aAST . getParent ( ) ; 
 final DetailAST grandparent = parent . getParent ( ) ; 
 if ( ( TokenTypes . TYPE _ PARAMETERS = = parent . getType ( ) ) 
 - & & ( TokenTypes . METHOD _ DEF = = grandparent . getType ( ) ) ) 
 + & & ( ( TokenTypes . CTOR _ DEF = = grandparent . getType ( ) ) 
 + | | ( TokenTypes . METHOD _ DEF = = grandparent . getType ( ) ) ) ) 
 { 
 / / Require whitespace 
 if ( ! Character . isWhitespace ( line . charAt ( before ) ) ) { 
 diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / whitespace / InputGenericWhitespaceCheck . java b / src / testinputs / com / puppycrawl / tools / checkstyle / whitespace / InputGenericWhitespaceCheck . java 
 index 3f633de . . f5d8e87 100644 
 - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / whitespace / InputGenericWhitespaceCheck . java 
 + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / whitespace / InputGenericWhitespaceCheck . java 
 @ @ - 6 , 8 + 6 , 8 @ @ import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . concurrent . Callable ; 
 - 
 - class InputSimpleGenerics implements Comparable < InputSimpleGenerics > , Serializable 
 + import java . util . Collections ; 
 + class InputGenericWhitespaceCheck implements Comparable < InputGenericWhitespaceCheck > , Serializable 
 { 
 void meth ( ) 
 { 
 @ @ - 17 , 7 + 17 , 7 @ @ class InputSimpleGenerics implements Comparable < InputSimpleGenerics > , Serializab 
 List < List < Integer > > b = new ArrayList < List < Integer > > ( ) ; 
 } 
 
 - public int compareTo ( InputSimpleGenerics aObject ) 
 + public int compareTo ( InputGenericWhitespaceCheck aObject ) 
 { 
 return 0 ; 
 } 
 @ @ - 33 , 6 + 33 , 21 @ @ class InputSimpleGenerics implements Comparable < InputSimpleGenerics > , Serializab 
 for ( final Map . Entry < Class < ? > , Integer > entry : x . entrySet ( ) ) { 
 entry . getValue ( ) ; 
 } 
 + Class < ? > [ ] parameterClasses = new Class < ? > [ 0 ] ; 
 return null ; 
 } 
 + public int getConstructor ( Class < ? > . . . parameterTypes ) 
 + { 
 + Collections . < Object > emptySet ( ) ; 
 + Collections . < Object > emptySet ( ) ; 
 + return 666 ; 
 + } 
 + 
 + < T > InputGenericWhitespaceCheck ( List < T > things , int i ) 
 + { 
 + } 
 + 
 + public < T > InputGenericWhitespaceCheck ( List < T > things ) 
 + { 
 + } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 index d1f4a54 . . 105ecca 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 @ @ - 46 , 6 + 46 , 8 @ @ public class GenericWhitespaceCheckTest 
 " 17 : 71 : ' > ' is preceded with whitespace . " , 
 " 30 : 17 : ' < ' is not preceded with whitespace . " , 
 " 30 : 21 : ' > ' is followed by an illegal character . " , 
 + " 42 : 21 : ' < ' is preceded with whitespace . " , 
 + " 42 : 30 : ' > ' is followed by whitespace . " , 
 } ; 
 verify ( mCheckConfig , 
 getPath ( " whitespace / InputGenericWhitespaceCheck . java " ) ,
