BLEU SCORE: 0.04753622060013115

TEST MSG: Issue # 4165 : Split and Organize Checkstyle inputs by Test for checks in coding package : SuperFinalize
GENERATED MSG: Issue # 2161 : unify test input locations

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperFinalizeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperFinalizeCheckTest . java <nl> index 6fc8c03 . . 6fb0b3d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperFinalizeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperFinalizeCheckTest . java <nl> @ @ - 34 , 7 + 34 , 9 @ @ public class SuperFinalizeCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " superfinalize " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 45 , 6 + 47 , 6 @ @ public class SuperFinalizeCheckTest <nl> " 27 : 17 : " + getCheckMessage ( MSG _ KEY , " finalize " , " super . finalize " ) , <nl> " 34 : 17 : " + getCheckMessage ( MSG _ KEY , " finalize " , " super . finalize " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputFinalize . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputSuperFinalizeVariations . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalize . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalize . java <nl> deleted file mode 100644 <nl> index f2abdb7 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalize . java <nl> + + + / dev / null <nl> @ @ - 1 , 68 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - public class InputFinalize <nl> - { <nl> - public InputFinalize ( ) throws Throwable <nl> - { <nl> - super . equals ( new String ( ) ) ; <nl> - super . finalize ( ) ; <nl> - } <nl> - <nl> - public void finalize ( ) / * * comment test * / throws Throwable <nl> - { <nl> - super . finalize ( ) ; <nl> - } <nl> - <nl> - public void method ( ) throws Throwable <nl> - { <nl> - super . finalize ( ) ; <nl> - } <nl> - <nl> - { <nl> - super . finalize ( ) ; <nl> - } <nl> - } <nl> - <nl> - class NoSuperFinalize <nl> - { <nl> - public void finalize ( ) <nl> - { <nl> - } <nl> - } <nl> - <nl> - class InnerFinalize <nl> - { <nl> - public void finalize ( ) <nl> - { <nl> - class Inner <nl> - { <nl> - public void finalize ( ) throws Throwable <nl> - { <nl> - super . finalize ( ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> - / / Check that super keword isn ' t snagged here <nl> - class MyClassWithGenericSuperMethod1 <nl> - { <nl> - void someMethod ( java . util . List < ? super java . util . Map > l ) <nl> - { <nl> - <nl> - } <nl> - } <nl> - <nl> - class TestNative { <nl> - public native void finalize ( ) ; <nl> - } <nl> - <nl> - class OneMore { <nl> - <nl> - public void doSmt ( ) throws Throwable { <nl> - { <nl> - { <nl> - super . finalize ( ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superfinalize / InputSuperFinalizeVariations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superfinalize / InputSuperFinalizeVariations . java <nl> new file mode 100644 <nl> index 0000000 . . 03f7356 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superfinalize / InputSuperFinalizeVariations . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . superfinalize ; <nl> + public class InputSuperFinalizeVariations <nl> + { <nl> + public InputSuperFinalizeVariations ( ) throws Throwable <nl> + { <nl> + super . equals ( new String ( ) ) ; <nl> + super . finalize ( ) ; <nl> + } <nl> + <nl> + public void finalize ( ) / * * comment test * / throws Throwable <nl> + { <nl> + super . finalize ( ) ; <nl> + } <nl> + <nl> + public void method ( ) throws Throwable <nl> + { <nl> + super . finalize ( ) ; <nl> + } <nl> + <nl> + { <nl> + super . finalize ( ) ; <nl> + } <nl> + } <nl> + <nl> + class NoSuperFinalize <nl> + { <nl> + public void finalize ( ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + class InnerFinalize <nl> + { <nl> + public void finalize ( ) <nl> + { <nl> + class Inner <nl> + { <nl> + public void finalize ( ) throws Throwable <nl> + { <nl> + super . finalize ( ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + / / Check that super keword isn ' t snagged here <nl> + class MyClassWithGenericSuperMethod1 <nl> + { <nl> + void someMethod ( java . util . List < ? super java . util . Map > l ) <nl> + { <nl> + <nl> + } <nl> + } <nl> + <nl> + class TestNative { <nl> + public native void finalize ( ) ; <nl> + } <nl> + <nl> + class OneMore { <nl> + <nl> + public void doSmt ( ) throws Throwable { <nl> + { <nl> + { <nl> + super . finalize ( ) ; <nl> + } <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> index 9af22a9 . . 2cdac81 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { <nl> } <nl> <nl> private static List < RevCommit > getCommitsToCheck ( ) throws Exception { <nl> - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; <nl> - <nl> - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> List < RevCommit > commits ; <nl> - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> - } <nl> - else { <nl> - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { <nl> + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> + else { <nl> + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> } <nl> return commits ; <nl> } <nl> @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { <nl> <nl> private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { <nl> RevCommitsPair revCommitIteratorPair ; <nl> - try { <nl> + <nl> + try ( RevWalk revWalk = new RevWalk ( repo ) ) { <nl> Iterator < RevCommit > first ; <nl> Iterator < RevCommit > second ; <nl> - <nl> - RevWalk revWalk = new RevWalk ( repo ) ; <nl> - <nl> ObjectId headId = repo . resolve ( Constants . HEAD ) ; <nl> RevCommit headCommit = revWalk . parseCommit ( headId ) ; <nl> <nl> @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { <nl> RevCommit firstParent = headCommit . getParent ( 0 ) ; <nl> RevCommit secondParent = headCommit . getParent ( 1 ) ; <nl> <nl> - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + } <nl> } <nl> else { <nl> - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . call ( ) . iterator ( ) ; <nl> + } <nl> second = Collections . emptyIterator ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperFinalizeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperFinalizeCheckTest . java 
 index 6fc8c03 . . 6fb0b3d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperFinalizeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperFinalizeCheckTest . java 
 @ @ - 34 , 7 + 34 , 9 @ @ public class SuperFinalizeCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " superfinalize " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 45 , 6 + 47 , 6 @ @ public class SuperFinalizeCheckTest 
 " 27 : 17 : " + getCheckMessage ( MSG _ KEY , " finalize " , " super . finalize " ) , 
 " 34 : 17 : " + getCheckMessage ( MSG _ KEY , " finalize " , " super . finalize " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputFinalize . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputSuperFinalizeVariations . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalize . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalize . java 
 deleted file mode 100644 
 index f2abdb7 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalize . java 
 + + + / dev / null 
 @ @ - 1 , 68 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - public class InputFinalize 
 - { 
 - public InputFinalize ( ) throws Throwable 
 - { 
 - super . equals ( new String ( ) ) ; 
 - super . finalize ( ) ; 
 - } 
 - 
 - public void finalize ( ) / * * comment test * / throws Throwable 
 - { 
 - super . finalize ( ) ; 
 - } 
 - 
 - public void method ( ) throws Throwable 
 - { 
 - super . finalize ( ) ; 
 - } 
 - 
 - { 
 - super . finalize ( ) ; 
 - } 
 - } 
 - 
 - class NoSuperFinalize 
 - { 
 - public void finalize ( ) 
 - { 
 - } 
 - } 
 - 
 - class InnerFinalize 
 - { 
 - public void finalize ( ) 
 - { 
 - class Inner 
 - { 
 - public void finalize ( ) throws Throwable 
 - { 
 - super . finalize ( ) ; 
 - } 
 - } 
 - } 
 - } 
 - 
 - / / Check that super keword isn ' t snagged here 
 - class MyClassWithGenericSuperMethod1 
 - { 
 - void someMethod ( java . util . List < ? super java . util . Map > l ) 
 - { 
 - 
 - } 
 - } 
 - 
 - class TestNative { 
 - public native void finalize ( ) ; 
 - } 
 - 
 - class OneMore { 
 - 
 - public void doSmt ( ) throws Throwable { 
 - { 
 - { 
 - super . finalize ( ) ; 
 - } 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superfinalize / InputSuperFinalizeVariations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superfinalize / InputSuperFinalizeVariations . java 
 new file mode 100644 
 index 0000000 . . 03f7356 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superfinalize / InputSuperFinalizeVariations . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . superfinalize ; 
 + public class InputSuperFinalizeVariations 
 + { 
 + public InputSuperFinalizeVariations ( ) throws Throwable 
 + { 
 + super . equals ( new String ( ) ) ; 
 + super . finalize ( ) ; 
 + } 
 + 
 + public void finalize ( ) / * * comment test * / throws Throwable 
 + { 
 + super . finalize ( ) ; 
 + } 
 + 
 + public void method ( ) throws Throwable 
 + { 
 + super . finalize ( ) ; 
 + } 
 + 
 + { 
 + super . finalize ( ) ; 
 + } 
 + } 
 + 
 + class NoSuperFinalize 
 + { 
 + public void finalize ( ) 
 + { 
 + } 
 + } 
 + 
 + class InnerFinalize 
 + { 
 + public void finalize ( ) 
 + { 
 + class Inner 
 + { 
 + public void finalize ( ) throws Throwable 
 + { 
 + super . finalize ( ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + / / Check that super keword isn ' t snagged here 
 + class MyClassWithGenericSuperMethod1 
 + { 
 + void someMethod ( java . util . List < ? super java . util . Map > l ) 
 + { 
 + 
 + } 
 + } 
 + 
 + class TestNative { 
 + public native void finalize ( ) ; 
 + } 
 + 
 + class OneMore { 
 + 
 + public void doSmt ( ) throws Throwable { 
 + { 
 + { 
 + super . finalize ( ) ; 
 + } 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 index 9af22a9 . . 2cdac81 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { 
 } 
 
 private static List < RevCommit > getCommitsToCheck ( ) throws Exception { 
 - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; 
 - 
 - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 List < RevCommit > commits ; 
 - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 - } 
 - else { 
 - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { 
 + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 + else { 
 + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 } 
 return commits ; 
 } 
 @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { 
 
 private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { 
 RevCommitsPair revCommitIteratorPair ; 
 - try { 
 + 
 + try ( RevWalk revWalk = new RevWalk ( repo ) ) { 
 Iterator < RevCommit > first ; 
 Iterator < RevCommit > second ; 
 - 
 - RevWalk revWalk = new RevWalk ( repo ) ; 
 - 
 ObjectId headId = repo . resolve ( Constants . HEAD ) ; 
 RevCommit headCommit = revWalk . parseCommit ( headId ) ; 
 
 @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { 
 RevCommit firstParent = headCommit . getParent ( 0 ) ; 
 RevCommit secondParent = headCommit . getParent ( 1 ) ; 
 
 - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + } 
 } 
 else { 
 - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . call ( ) . iterator ( ) ; 
 + } 
 second = Collections . emptyIterator ( ) ; 
 } 

