BLEU SCORE: 0.05816635421147513

TEST MSG: Issue # 2480 : Fix skipping validation for non empty classes when allowEmptyTypes is true
GENERATED MSG: Issue # 1289 : ' AbstractParenPadCheck ' UT coverage improved

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> index c361c1d . . 972d975 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> @ @ - 139 , 6 + 139 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * <nl> * @ author Oliver Burn <nl> * @ author maxvetrenko <nl> + * @ author Andrei Selkin <nl> * / <nl> public class WhitespaceAroundCheck extends Check { <nl> <nl> @ @ - 390 , 7 + 391 , 7 @ @ public class WhitespaceAroundCheck extends Check { <nl> isColonOfCaseOrDefault ( currentType , parentType ) <nl> | | isColonOfForEach ( currentType , parentType ) ; <nl> final boolean emptyBlockOrType = isEmptyBlock ( ast , parentType ) <nl> - | | allowEmptyTypes & & isEmptyType ( ast , parentType ) ; <nl> + | | allowEmptyTypes & & isEmptyType ( ast ) ; <nl> <nl> return starImportOrSlistInsideCaseGroup <nl> | | colonOfCaseOrDefaultOrForEach <nl> @ @ - 525 , 14 + 526 , 18 @ @ public class WhitespaceAroundCheck extends Check { <nl> * < / p > <nl> * <nl> * @ param ast ast the { @ code DetailAST } to test . <nl> - * @ param parentType the token type of { @ code ast } ' s parent . <nl> * @ return { @ code true } if { @ code ast } makes up part of an <nl> * empty block contained under a { @ code match } token type <nl> * node . <nl> * / <nl> - private static boolean isEmptyType ( DetailAST ast , int parentType ) { <nl> + private static boolean isEmptyType ( DetailAST ast ) { <nl> final int type = ast . getType ( ) ; <nl> - return ( type = = TokenTypes . RCURLY | | type = = TokenTypes . LCURLY ) <nl> - & & parentType = = TokenTypes . OBJBLOCK ; <nl> + final DetailAST nextSibling = ast . getNextSibling ( ) ; <nl> + final DetailAST previousSibling = ast . getPreviousSibling ( ) ; <nl> + return type = = TokenTypes . LCURLY <nl> + & & nextSibling . getType ( ) = = TokenTypes . RCURLY <nl> + | | type = = TokenTypes . RCURLY <nl> + & & previousSibling ! = null <nl> + & & previousSibling . getType ( ) = = TokenTypes . LCURLY ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java <nl> index 4305a37 . . 89d57b7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java <nl> @ @ - 286 , 4 + 286 , 48 @ @ public class WhitespaceAroundCheckTest <nl> } ; <nl> assertArrayEquals ( expected , actual ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testAllowEmptyTypesIsSetToFalseAndNonEmptyClasses ( ) throws Exception { <nl> + checkConfig . addAttribute ( " allowEmptyTypes " , " false " ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 52 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , <nl> + " 10 : 20 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , <nl> + " 14 : 32 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , <nl> + " 18 : 18 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , <nl> + " 20 : 24 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , <nl> + " 20 : 25 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " { " ) , <nl> + " 20 : 31 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " } " ) , <nl> + " 22 : 31 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " } " ) , <nl> + " 24 : 18 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " { " ) , <nl> + " 24 : 18 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " } " ) , <nl> + " 26 : 69 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " { " ) , <nl> + " 26 : 69 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " } " ) , <nl> + " 28 : 24 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , <nl> + " 31 : 13 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " { " ) , <nl> + " 31 : 13 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " } " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputAllowEmptyTypesAndNonEmptyClasses . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAllowEmptyTypesIsSetToTrueAndNonEmptyClasses ( ) throws Exception { <nl> + checkConfig . addAttribute ( " allowEmptyTypes " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 52 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , <nl> + " 10 : 20 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , <nl> + " 14 : 32 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , <nl> + " 18 : 18 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , <nl> + " 20 : 24 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , <nl> + " 20 : 25 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " { " ) , <nl> + " 20 : 31 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " } " ) , <nl> + " 22 : 31 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " } " ) , <nl> + " 28 : 24 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , <nl> + " 31 : 13 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " { " ) , <nl> + " 31 : 13 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " } " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputAllowEmptyTypesAndNonEmptyClasses . java " ) , <nl> + expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputAllowEmptyTypesAndNonEmptyClasses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputAllowEmptyTypesAndNonEmptyClasses . java <nl> new file mode 100644 <nl> index 0000000 . . befda30 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputAllowEmptyTypesAndNonEmptyClasses . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> + <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . base . Supplier ; <nl> + <nl> + public class InputAllowEmptyTypesAndNonEmptyClasses { <nl> + <nl> + private Object object ; <nl> + <nl> + class SomeClass { <nl> + int a = 5 ; <nl> + } <nl> + <nl> + public class CheckstyleTest { <nl> + private static final int SOMETHING = 1 ; <nl> + } <nl> + <nl> + class MyClass { int a ; } <nl> + <nl> + class SomeTestClass { int a ; } <nl> + <nl> + class TestClass { int a ; } int b ; <nl> + <nl> + class Table { } <nl> + <nl> + interface SupplierFunction < T > extends Function < Supplier < T > , T > { } <nl> + <nl> + class NotEmptyClass { public void foo1 ( ) { foo2 ( ) ; } } <nl> + <nl> + public void foo2 ( ) { <nl> + do { } while ( true ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> index 50c5347 . . 76503c5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import org . junit . Test ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassDataAbstractionCouplingCheck <nl> . MSG _ KEY ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport { <nl> @ Test <nl> @ @ - 46 , 4 + 47 , 23 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport <nl> getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , <nl> expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testDefaultConfiguration ( ) throws Exception { <nl> + DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ClassDataAbstractionCouplingCheck . class ) ; <nl> + String [ ] expected = { <nl> + } ; <nl> + <nl> + try { <nl> + createChecker ( checkConfig ) ; <nl> + verify ( checkConfig , <nl> + getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , <nl> + expected ) ; <nl> + } <nl> + catch ( Exception ex ) { <nl> + / / Exception is not expected <nl> + fail ( ) ; <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 index c361c1d . . 972d975 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 @ @ - 139 , 6 + 139 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * 
 * @ author Oliver Burn 
 * @ author maxvetrenko 
 + * @ author Andrei Selkin 
 * / 
 public class WhitespaceAroundCheck extends Check { 
 
 @ @ - 390 , 7 + 391 , 7 @ @ public class WhitespaceAroundCheck extends Check { 
 isColonOfCaseOrDefault ( currentType , parentType ) 
 | | isColonOfForEach ( currentType , parentType ) ; 
 final boolean emptyBlockOrType = isEmptyBlock ( ast , parentType ) 
 - | | allowEmptyTypes & & isEmptyType ( ast , parentType ) ; 
 + | | allowEmptyTypes & & isEmptyType ( ast ) ; 
 
 return starImportOrSlistInsideCaseGroup 
 | | colonOfCaseOrDefaultOrForEach 
 @ @ - 525 , 14 + 526 , 18 @ @ public class WhitespaceAroundCheck extends Check { 
 * < / p > 
 * 
 * @ param ast ast the { @ code DetailAST } to test . 
 - * @ param parentType the token type of { @ code ast } ' s parent . 
 * @ return { @ code true } if { @ code ast } makes up part of an 
 * empty block contained under a { @ code match } token type 
 * node . 
 * / 
 - private static boolean isEmptyType ( DetailAST ast , int parentType ) { 
 + private static boolean isEmptyType ( DetailAST ast ) { 
 final int type = ast . getType ( ) ; 
 - return ( type = = TokenTypes . RCURLY | | type = = TokenTypes . LCURLY ) 
 - & & parentType = = TokenTypes . OBJBLOCK ; 
 + final DetailAST nextSibling = ast . getNextSibling ( ) ; 
 + final DetailAST previousSibling = ast . getPreviousSibling ( ) ; 
 + return type = = TokenTypes . LCURLY 
 + & & nextSibling . getType ( ) = = TokenTypes . RCURLY 
 + | | type = = TokenTypes . RCURLY 
 + & & previousSibling ! = null 
 + & & previousSibling . getType ( ) = = TokenTypes . LCURLY ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java 
 index 4305a37 . . 89d57b7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java 
 @ @ - 286 , 4 + 286 , 48 @ @ public class WhitespaceAroundCheckTest 
 } ; 
 assertArrayEquals ( expected , actual ) ; 
 } 
 + 
 + @ Test 
 + public void testAllowEmptyTypesIsSetToFalseAndNonEmptyClasses ( ) throws Exception { 
 + checkConfig . addAttribute ( " allowEmptyTypes " , " false " ) ; 
 + final String [ ] expected = { 
 + " 6 : 52 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , 
 + " 10 : 20 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , 
 + " 14 : 32 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , 
 + " 18 : 18 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , 
 + " 20 : 24 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , 
 + " 20 : 25 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " { " ) , 
 + " 20 : 31 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " } " ) , 
 + " 22 : 31 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " } " ) , 
 + " 24 : 18 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " { " ) , 
 + " 24 : 18 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " } " ) , 
 + " 26 : 69 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " { " ) , 
 + " 26 : 69 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " } " ) , 
 + " 28 : 24 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , 
 + " 31 : 13 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " { " ) , 
 + " 31 : 13 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " } " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputAllowEmptyTypesAndNonEmptyClasses . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testAllowEmptyTypesIsSetToTrueAndNonEmptyClasses ( ) throws Exception { 
 + checkConfig . addAttribute ( " allowEmptyTypes " , " true " ) ; 
 + final String [ ] expected = { 
 + " 6 : 52 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , 
 + " 10 : 20 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , 
 + " 14 : 32 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , 
 + " 18 : 18 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , 
 + " 20 : 24 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , 
 + " 20 : 25 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " { " ) , 
 + " 20 : 31 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " } " ) , 
 + " 22 : 31 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " } " ) , 
 + " 28 : 24 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " { " ) , 
 + " 31 : 13 : " + getCheckMessage ( WS _ NOT _ FOLLOWED , " { " ) , 
 + " 31 : 13 : " + getCheckMessage ( WS _ NOT _ PRECEDED , " } " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputAllowEmptyTypesAndNonEmptyClasses . java " ) , 
 + expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputAllowEmptyTypesAndNonEmptyClasses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputAllowEmptyTypesAndNonEmptyClasses . java 
 new file mode 100644 
 index 0000000 . . befda30 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputAllowEmptyTypesAndNonEmptyClasses . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 + 
 + import com . google . common . base . Function ; 
 + import com . google . common . base . Supplier ; 
 + 
 + public class InputAllowEmptyTypesAndNonEmptyClasses { 
 + 
 + private Object object ; 
 + 
 + class SomeClass { 
 + int a = 5 ; 
 + } 
 + 
 + public class CheckstyleTest { 
 + private static final int SOMETHING = 1 ; 
 + } 
 + 
 + class MyClass { int a ; } 
 + 
 + class SomeTestClass { int a ; } 
 + 
 + class TestClass { int a ; } int b ; 
 + 
 + class Table { } 
 + 
 + interface SupplierFunction < T > extends Function < Supplier < T > , T > { } 
 + 
 + class NotEmptyClass { public void foo1 ( ) { foo2 ( ) ; } } 
 + 
 + public void foo2 ( ) { 
 + do { } while ( true ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 index 50c5347 . . 76503c5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import org . junit . Test ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassDataAbstractionCouplingCheck 
 . MSG _ KEY ; 
 + import static org . junit . Assert . fail ; 
 
 public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport { 
 @ Test 
 @ @ - 46 , 4 + 47 , 23 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport 
 getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , 
 expected ) ; 
 } 
 + 
 + @ Test 
 + public void testDefaultConfiguration ( ) throws Exception { 
 + DefaultConfiguration checkConfig = 
 + createCheckConfig ( ClassDataAbstractionCouplingCheck . class ) ; 
 + String [ ] expected = { 
 + } ; 
 + 
 + try { 
 + createChecker ( checkConfig ) ; 
 + verify ( checkConfig , 
 + getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , 
 + expected ) ; 
 + } 
 + catch ( Exception ex ) { 
 + / / Exception is not expected 
 + fail ( ) ; 
 + } 
 + } 
 }
