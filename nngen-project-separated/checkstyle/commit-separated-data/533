BLEU SCORE: 0.08171014300726602

TEST MSG: Issue # 5116 : fixed eclipse violations in test code
GENERATED MSG: Issue # 1243 : ' Local variable is not used ' fixed

TEST DIFF (one line): diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index 7891e48 . . 8305a5a 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 2103 , 6 + 2103 , 7 @ @ isolated classes and we cannot put them to separate package as it will affect us <nl> < option value = " MagicNumber " / > <nl> < ! - - it is used for test purposes - - > <nl> < option value = " AssignmentToStaticFieldFromInstanceMethod " / > <nl> + < option value = " SuperClassHasFrequentlyUsedInheritors " / > <nl> < ! - - we still have classes derived from deprecated ones - - > <nl> < option value = " DeprecatedIsStillUsed " / > <nl> < ! - - these are base classes for checks and not all their methods may need to be overwritten - - > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index 3de8fc5 . . 3e43563 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 583 , 7 + 583 , 6 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { <nl> <nl> @ Test <nl> public void testLoadConfigurationDeprecated ( ) throws Exception { <nl> - @ SuppressWarnings ( " deprecation " ) <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> new FileInputStream ( <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> index 2e80998 . . 8d87c20 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> @ @ - 69 , 8 + 69 , 8 @ @ public class PackageObjectFactoryTest { <nl> @ Test <nl> public void testCtorNullLoaderException1 ( ) { <nl> try { <nl> - new PackageObjectFactory ( new HashSet < > ( ) , null ) ; <nl> - fail ( " Exception is expected " ) ; <nl> + final Object test = new PackageObjectFactory ( new HashSet < > ( ) , null ) ; <nl> + fail ( " Exception is expected but got " + test ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " Invalid exception message " , NULL _ LOADER _ MESSAGE , ex . getMessage ( ) ) ; <nl> @ @ - 80 , 8 + 80 , 8 @ @ public class PackageObjectFactoryTest { <nl> @ Test <nl> public void testCtorNullLoaderException2 ( ) { <nl> try { <nl> - new PackageObjectFactory ( " test " , null ) ; <nl> - fail ( " Exception is expected " ) ; <nl> + final Object test = new PackageObjectFactory ( " test " , null ) ; <nl> + fail ( " Exception is expected but got " + test ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " Invalid exception message " , NULL _ LOADER _ MESSAGE , ex . getMessage ( ) ) ; <nl> @ @ - 92 , 8 + 92 , 8 @ @ public class PackageObjectFactoryTest { <nl> public void testCtorNullPackageException1 ( ) { <nl> final ClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; <nl> try { <nl> - new PackageObjectFactory ( Collections . singleton ( null ) , classLoader ) ; <nl> - fail ( " Exception is expected " ) ; <nl> + final Object test = new PackageObjectFactory ( Collections . singleton ( null ) , classLoader ) ; <nl> + fail ( " Exception is expected but got " + test ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " Invalid exception message " , NULL _ PACKAGE _ MESSAGE , ex . getMessage ( ) ) ; <nl> @ @ - 104 , 8 + 104 , 8 @ @ public class PackageObjectFactoryTest { <nl> public void testCtorNullPackageException2 ( ) { <nl> final ClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; <nl> try { <nl> - new PackageObjectFactory ( ( String ) null , classLoader ) ; <nl> - fail ( " Exception is expected " ) ; <nl> + final Object test = new PackageObjectFactory ( ( String ) null , classLoader ) ; <nl> + fail ( " Exception is expected but got " + test ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " Invalid exception message " , NULL _ PACKAGE _ MESSAGE , ex . getMessage ( ) ) ; <nl> @ @ - 131 , 7 + 131 , 7 @ @ public class PackageObjectFactoryTest { <nl> } <nl> <nl> @ Test <nl> - public void testCreateModuleWithNonExistName ( ) throws CheckstyleException { <nl> + public void testCreateModuleWithNonExistName ( ) { <nl> testCreateModuleWithNonExistName ( " NonExistClassOne " ) ; <nl> testCreateModuleWithNonExistName ( " NonExistClassTwo " ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertiesExpanderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertiesExpanderTest . java <nl> index 52ce562 . . 94455b4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertiesExpanderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertiesExpanderTest . java <nl> @ @ - 29 , 8 + 29 , 8 @ @ public class PropertiesExpanderTest { <nl> @ Test <nl> public void testCtorException ( ) { <nl> try { <nl> - new PropertiesExpander ( null ) ; <nl> - Assert . fail ( " exception expected " ) ; <nl> + final Object test = new PropertiesExpander ( null ) ; <nl> + Assert . fail ( " exception expected but got " + test ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> Assert . assertEquals ( " Invalid exception message " , " cannot pass null " , ex . getMessage ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> index b7a43c6 . . d391e64 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> @ @ - 85 , 7 + 85 , 8 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testCtor ( ) { <nl> try { <nl> - new PropertyCacheFile ( null , " " ) ; <nl> + final Object test = new PropertyCacheFile ( null , " " ) ; <nl> + fail ( " exception expected but got " + test ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " Invalid exception message " , <nl> @ @ - 93 , 7 + 94 , 8 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { <nl> } <nl> try { <nl> final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> - new PropertyCacheFile ( config , null ) ; <nl> + final Object test = new PropertyCacheFile ( config , null ) ; <nl> + fail ( " exception expected but got " + test ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " Invalid exception message " , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> index ac7f241 . . 0e2e0b4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> import java . io . BufferedReader ; <nl> @ @ - 54 , 7 + 55 , 8 @ @ public class XMLLoggerTest { <nl> @ Test <nl> public void testEncode ( ) <nl> throws IOException { <nl> - new XMLLogger ( outStream , false ) ; <nl> + final XMLLogger test = new XMLLogger ( outStream , false ) ; <nl> + assertNotNull ( " should be able to create XMLLogger without issue " , test ) ; <nl> final String [ ] [ ] encodings = { <nl> { " < " , " & lt ; " } , <nl> { " > " , " & gt ; " } , <nl> @ @ - 77 , 7 + 79 , 8 @ @ public class XMLLoggerTest { <nl> @ Test <nl> public void testIsReference ( ) <nl> throws IOException { <nl> - new XMLLogger ( outStream , false ) ; <nl> + final XMLLogger test = new XMLLogger ( outStream , false ) ; <nl> + assertNotNull ( " should be able to create XMLLogger without issue " , test ) ; <nl> final String [ ] references = { <nl> " & # 0 ; " , <nl> " & # x0 ; " , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java <nl> index 95babde . . 9b4b841 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java <nl> @ @ - 68 , 13 + 68 , 12 @ @ public class AbstractFileSetCheckTest { <nl> / * * <nl> * This javadoc exists only to suppress Intellij Idea inspection <nl> * @ throws Exception it happens <nl> - * @ noinspection NullArgumentToVariableArgMethod <nl> * / <nl> @ Test <nl> public void testSetExtentionThrowsExceptionWhenTheyAreNull ( ) throws Exception { <nl> final DummyFileSetCheck check = new DummyFileSetCheck ( ) ; <nl> try { <nl> - check . setFileExtensions ( null ) ; <nl> + check . setFileExtensions ( ( String [ ] ) null ) ; <nl> fail ( " Expected exception . " ) ; <nl> } <nl> catch ( IllegalArgumentException exception ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> index 2db6a01 . . 4a0edb4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> @ @ - 149 , 6 + 149 , 7 @ @ public class AutomaticBeanTest { <nl> final TestBean testBean = new TestBean ( ) ; <nl> testBean . setVal ( 0 ) ; <nl> testBean . setWrong ( " wrongVal " ) ; <nl> + testBean . assignPrivateFieldSecretly ( null ) ; <nl> try { <nl> testBean . setExceptionalMethod ( " someValue " ) ; <nl> fail ( " exception expected " ) ; <nl> @ @ - 198 , 12 + 199 , 12 @ @ public class AutomaticBeanTest { <nl> this . val = val ; <nl> } <nl> <nl> - public void setExceptionalMethod ( String value ) { <nl> - throw new IllegalStateException ( privateField + " , " + wrong + " , " + val + " , " + value ) ; <nl> + public void assignPrivateFieldSecretly ( String input ) { <nl> + privateField = input ; <nl> } <nl> <nl> - public void doSmth ( ) { <nl> - privateField = " some value , just for fun " ; <nl> + public void setExceptionalMethod ( String value ) { <nl> + throw new IllegalStateException ( privateField + " , " + wrong + " , " + val + " , " + value ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> index 3e06265 . . 5bd90a8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> @ @ - 39 , 7 + 39 , 6 @ @ import com . google . common . collect . ImmutableMap ; <nl> public class FileContentsTest { <nl> <nl> @ Test <nl> - @ SuppressWarnings ( " deprecation " ) <nl> public void testDeprecatedAbbreviatedMethod ( ) { <nl> / / just to make UT coverage 100 % <nl> final FileContents fileContents = new FileContents ( " filename " , " 123 " , " 456 " ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> index 1c7964d . . 2c84a1d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> @ @ - 53 , 8 + 53 , 8 @ @ public class FileTextTest extends AbstractPathTestSupport { <nl> / / just to make UT coverage 100 % <nl> final String charsetName = " STRANGE _ CHARSET " ; <nl> try { <nl> - new FileText ( new File ( " any name " ) , charsetName ) ; <nl> - fail ( " UnsupportedEncodingException is expected " ) ; <nl> + final Object test = new FileText ( new File ( " any name " ) , charsetName ) ; <nl> + fail ( " UnsupportedEncodingException is expected but got " + test ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> assertEquals ( " Invalid exception message " , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelCounterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelCounterTest . java <nl> index 47d441e . . adab0e4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelCounterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelCounterTest . java <nl> @ @ - 29 , 8 + 29 , 8 @ @ public class SeverityLevelCounterTest { <nl> @ Test <nl> public void testCtorException ( ) { <nl> try { <nl> - new SeverityLevelCounter ( null ) ; <nl> - fail ( " exception expected " ) ; <nl> + final Object test = new SeverityLevelCounter ( null ) ; <nl> + fail ( " exception expected but got " + test ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " Invalid exception message " , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java <nl> index bd8c856 . . 3937d65 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java <nl> @ @ - 37 , 7 + 37 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> - @ SuppressWarnings ( " deprecation " ) <nl> public class AbstractTypeAwareCheckTest extends AbstractModuleTestSupport { <nl> private DefaultConfiguration checkConfig ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java <nl> index 6bc7971 . . e95b4fa 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . doclets ; <nl> import static com . puppycrawl . tools . checkstyle . internal . utils . TestUtil . isUtilsClassHasPrivateConstructor ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ @ - 106 , 7 + 107 , 8 @ @ public class TokenTypesDocletTest extends AbstractPathTestSupport { <nl> names . add ( getPath ( " InputTokenTypesDocletNotConstants . java " ) ) ; <nl> <nl> final Context context = new Context ( ) ; <nl> - new TestMessager ( context ) ; <nl> + final TestMessager test = new TestMessager ( context ) ; <nl> + assertNotNull ( " should be able to create TestMessager without issue " , test ) ; <nl> final JavadocTool javadocTool = JavadocTool . make0 ( context ) ; <nl> final RootDoc rootDoc = getRootDoc ( javadocTool , options , names ) ; <nl> <nl> @ @ - 122 , 7 + 124 , 8 @ @ public class TokenTypesDocletTest extends AbstractPathTestSupport { <nl> names . add ( getPath ( " InputTokenTypesDocletEmptyJavadoc . java " ) ) ; <nl> <nl> final Context context = new Context ( ) ; <nl> - new TestMessager ( context ) ; <nl> + final TestMessager test = new TestMessager ( context ) ; <nl> + assertNotNull ( " should be able to create TestMessager without issue " , test ) ; <nl> final JavadocTool javadocTool = JavadocTool . make0 ( context ) ; <nl> final RootDoc rootDoc = getRootDoc ( javadocTool , options , names ) ; <nl> <nl> @ @ - 146 , 7 + 149 , 8 @ @ public class TokenTypesDocletTest extends AbstractPathTestSupport { <nl> names . add ( getPath ( " InputTokenTypesDocletCorrect . java " ) ) ; <nl> <nl> final Context context = new Context ( ) ; <nl> - new TestMessager ( context ) ; <nl> + final TestMessager test = new TestMessager ( context ) ; <nl> + assertNotNull ( " should be able to create TestMessager without issue " , test ) ; <nl> final JavadocTool javadocTool = JavadocTool . make0 ( context ) ; <nl> final RootDoc rootDoc = getRootDoc ( javadocTool , options , names ) ; <nl> <nl> @ @ - 168 , 7 + 172 , 8 @ @ public class TokenTypesDocletTest extends AbstractPathTestSupport { <nl> names . add ( getPath ( " InputTokenTypesDocletJavadocParseError . java " ) ) ; <nl> <nl> final Context context = new Context ( ) ; <nl> - new TestMessager ( context ) ; <nl> + final TestMessager test = new TestMessager ( context ) ; <nl> + assertNotNull ( " should be able to create TestMessager without issue " , test ) ; <nl> final JavadocTool javadocTool = JavadocTool . make0 ( context ) ; <nl> final RootDoc rootDoc = getRootDoc ( javadocTool , options , names ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java <nl> index 2d97854 . . d882ddc 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java <nl> @ @ - 119 , 8 + 119 , 9 @ @ public class XpathFilterTest extends AbstractModuleTestSupport { <nl> public void testIncorrectQuery ( ) throws Exception { <nl> final String xpath = " 1 @ # " ; <nl> try { <nl> - new XpathFilter ( " InputXpathFilterSuppressByXpath " , " Test " , null , xpath ) ; <nl> - fail ( " Exception was expected " ) ; <nl> + final Object test = new XpathFilter ( " InputXpathFilterSuppressByXpath " , " Test " , null , <nl> + xpath ) ; <nl> + fail ( " Exception was expected but got " + test ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> assertTrue ( " Message should be : Unexpected xpath query " , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> index fe92cd5 . . ed20df7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> @ @ - 20 , 7 + 20 , 9 @ @ <nl> package com . puppycrawl . tools . checkstyle . utils ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . internal . utils . TestUtil . isUtilsClassHasPrivateConstructor ; <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> import java . io . File ; <nl> @ @ - 138 , 16 + 140 , 20 @ @ public class ModuleReflectionUtilsTest { <nl> ModuleReflectionUtils . isRootModule ( NotCheckstyleCheck . class ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testKeepEclipseHappy ( ) { <nl> + final InvalidNonDefaultConstructorClass test = new InvalidNonDefaultConstructorClass ( 0 ) ; <nl> + assertNotNull ( " should use constructor " , test ) ; <nl> + assertEquals ( " should use field " , 1 , test . getField ( ) ) ; <nl> + } <nl> + <nl> + / * * @ noinspection SuperClassHasFrequentlyUsedInheritors * / <nl> private static class ValidCheckstyleClass extends AutomaticBean { <nl> - protected ValidCheckstyleClass ( ) { <nl> - / / keep pmd calm and happy <nl> - } <nl> + / / empty , use default constructor <nl> } <nl> <nl> private static class InvalidNonAutomaticBeanClass { <nl> - protected InvalidNonAutomaticBeanClass ( ) { <nl> - / / keep pmd calm and happy <nl> - } <nl> + / / empty , use default constructor <nl> } <nl> <nl> / * * @ noinspection AbstractClassNeverImplemented * / <nl> @ @ - 257 , 9 + 263 , 7 @ @ public class ModuleReflectionUtilsTest { <nl> } <nl> <nl> private static class NotCheckstyleCheck { <nl> - protected NotCheckstyleCheck ( ) { <nl> - / / keep pmd calm and happy <nl> - } <nl> + / / empty , use default constructor <nl> } <nl> <nl> private static class InvalidNonDefaultConstructorClass extends AutomaticBean { <nl> @ @ - 277 , 5 + 281 , 9 @ @ public class ModuleReflectionUtilsTest { <nl> method ( data - 1 ) ; <nl> } <nl> } <nl> + <nl> + public int getField ( ) { <nl> + return field ; <nl> + } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> index c7f88d5 . . 5a94092 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> @ @ - 118 , 7 + 118 , 7 @ @ public class DefaultLogger <nl> sb . append ( " : warning " ) ; <nl> } <nl> sb . append ( " : " ) . append ( message ) ; <nl> - errorWriter . println ( sb . toString ( ) ) ; <nl> + errorWriter . println ( sb ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> index 577d24a . . 4be6ff0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> @ @ - 201 , 7 + 201 , 7 @ @ public final class ModifiedControlVariableCheck extends Check { <nl> checkIdent ( ast ) ; <nl> break ; <nl> default : <nl> - throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast . toString ( ) ) ; <nl> + throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast ) ; <nl> } <nl> } <nl> <nl> @ @ - 244 , 7 + 244 , 7 @ @ public final class ModifiedControlVariableCheck extends Check { <nl> / / we need that Tokens only at visitToken ( ) <nl> break ; <nl> default : <nl> - throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast . toString ( ) ) ; <nl> + throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index 30b8a4c . . a7b7945 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 375 , 7 + 375 , 7 @ @ public class ImportOrderCheck <nl> } <nl> else { <nl> throw new IllegalStateException ( <nl> - " Unexpected option for static imports : " + abstractOption . toString ( ) ) ; <nl> + " Unexpected option for static imports : " + abstractOption ) ; <nl> } <nl> <nl> lastImportLine = ast . findFirstToken ( TokenTypes . SEMI ) . getLineNo ( ) ;

TEST DIFF:
diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index 7891e48 . . 8305a5a 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 2103 , 6 + 2103 , 7 @ @ isolated classes and we cannot put them to separate package as it will affect us 
 < option value = " MagicNumber " / > 
 < ! - - it is used for test purposes - - > 
 < option value = " AssignmentToStaticFieldFromInstanceMethod " / > 
 + < option value = " SuperClassHasFrequentlyUsedInheritors " / > 
 < ! - - we still have classes derived from deprecated ones - - > 
 < option value = " DeprecatedIsStillUsed " / > 
 < ! - - these are base classes for checks and not all their methods may need to be overwritten - - > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index 3de8fc5 . . 3e43563 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 583 , 7 + 583 , 6 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { 
 
 @ Test 
 public void testLoadConfigurationDeprecated ( ) throws Exception { 
 - @ SuppressWarnings ( " deprecation " ) 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 new FileInputStream ( 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 index 2e80998 . . 8d87c20 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 @ @ - 69 , 8 + 69 , 8 @ @ public class PackageObjectFactoryTest { 
 @ Test 
 public void testCtorNullLoaderException1 ( ) { 
 try { 
 - new PackageObjectFactory ( new HashSet < > ( ) , null ) ; 
 - fail ( " Exception is expected " ) ; 
 + final Object test = new PackageObjectFactory ( new HashSet < > ( ) , null ) ; 
 + fail ( " Exception is expected but got " + test ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " Invalid exception message " , NULL _ LOADER _ MESSAGE , ex . getMessage ( ) ) ; 
 @ @ - 80 , 8 + 80 , 8 @ @ public class PackageObjectFactoryTest { 
 @ Test 
 public void testCtorNullLoaderException2 ( ) { 
 try { 
 - new PackageObjectFactory ( " test " , null ) ; 
 - fail ( " Exception is expected " ) ; 
 + final Object test = new PackageObjectFactory ( " test " , null ) ; 
 + fail ( " Exception is expected but got " + test ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " Invalid exception message " , NULL _ LOADER _ MESSAGE , ex . getMessage ( ) ) ; 
 @ @ - 92 , 8 + 92 , 8 @ @ public class PackageObjectFactoryTest { 
 public void testCtorNullPackageException1 ( ) { 
 final ClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; 
 try { 
 - new PackageObjectFactory ( Collections . singleton ( null ) , classLoader ) ; 
 - fail ( " Exception is expected " ) ; 
 + final Object test = new PackageObjectFactory ( Collections . singleton ( null ) , classLoader ) ; 
 + fail ( " Exception is expected but got " + test ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " Invalid exception message " , NULL _ PACKAGE _ MESSAGE , ex . getMessage ( ) ) ; 
 @ @ - 104 , 8 + 104 , 8 @ @ public class PackageObjectFactoryTest { 
 public void testCtorNullPackageException2 ( ) { 
 final ClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; 
 try { 
 - new PackageObjectFactory ( ( String ) null , classLoader ) ; 
 - fail ( " Exception is expected " ) ; 
 + final Object test = new PackageObjectFactory ( ( String ) null , classLoader ) ; 
 + fail ( " Exception is expected but got " + test ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " Invalid exception message " , NULL _ PACKAGE _ MESSAGE , ex . getMessage ( ) ) ; 
 @ @ - 131 , 7 + 131 , 7 @ @ public class PackageObjectFactoryTest { 
 } 
 
 @ Test 
 - public void testCreateModuleWithNonExistName ( ) throws CheckstyleException { 
 + public void testCreateModuleWithNonExistName ( ) { 
 testCreateModuleWithNonExistName ( " NonExistClassOne " ) ; 
 testCreateModuleWithNonExistName ( " NonExistClassTwo " ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertiesExpanderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertiesExpanderTest . java 
 index 52ce562 . . 94455b4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertiesExpanderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertiesExpanderTest . java 
 @ @ - 29 , 8 + 29 , 8 @ @ public class PropertiesExpanderTest { 
 @ Test 
 public void testCtorException ( ) { 
 try { 
 - new PropertiesExpander ( null ) ; 
 - Assert . fail ( " exception expected " ) ; 
 + final Object test = new PropertiesExpander ( null ) ; 
 + Assert . fail ( " exception expected but got " + test ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 Assert . assertEquals ( " Invalid exception message " , " cannot pass null " , ex . getMessage ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 index b7a43c6 . . d391e64 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 @ @ - 85 , 7 + 85 , 8 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { 
 @ Test 
 public void testCtor ( ) { 
 try { 
 - new PropertyCacheFile ( null , " " ) ; 
 + final Object test = new PropertyCacheFile ( null , " " ) ; 
 + fail ( " exception expected but got " + test ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " Invalid exception message " , 
 @ @ - 93 , 7 + 94 , 8 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { 
 } 
 try { 
 final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 - new PropertyCacheFile ( config , null ) ; 
 + final Object test = new PropertyCacheFile ( config , null ) ; 
 + fail ( " exception expected but got " + test ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " Invalid exception message " , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 index ac7f241 . . 0e2e0b4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 
 import java . io . BufferedReader ; 
 @ @ - 54 , 7 + 55 , 8 @ @ public class XMLLoggerTest { 
 @ Test 
 public void testEncode ( ) 
 throws IOException { 
 - new XMLLogger ( outStream , false ) ; 
 + final XMLLogger test = new XMLLogger ( outStream , false ) ; 
 + assertNotNull ( " should be able to create XMLLogger without issue " , test ) ; 
 final String [ ] [ ] encodings = { 
 { " < " , " & lt ; " } , 
 { " > " , " & gt ; " } , 
 @ @ - 77 , 7 + 79 , 8 @ @ public class XMLLoggerTest { 
 @ Test 
 public void testIsReference ( ) 
 throws IOException { 
 - new XMLLogger ( outStream , false ) ; 
 + final XMLLogger test = new XMLLogger ( outStream , false ) ; 
 + assertNotNull ( " should be able to create XMLLogger without issue " , test ) ; 
 final String [ ] references = { 
 " & # 0 ; " , 
 " & # x0 ; " , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java 
 index 95babde . . 9b4b841 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java 
 @ @ - 68 , 13 + 68 , 12 @ @ public class AbstractFileSetCheckTest { 
 / * * 
 * This javadoc exists only to suppress Intellij Idea inspection 
 * @ throws Exception it happens 
 - * @ noinspection NullArgumentToVariableArgMethod 
 * / 
 @ Test 
 public void testSetExtentionThrowsExceptionWhenTheyAreNull ( ) throws Exception { 
 final DummyFileSetCheck check = new DummyFileSetCheck ( ) ; 
 try { 
 - check . setFileExtensions ( null ) ; 
 + check . setFileExtensions ( ( String [ ] ) null ) ; 
 fail ( " Expected exception . " ) ; 
 } 
 catch ( IllegalArgumentException exception ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 index 2db6a01 . . 4a0edb4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 @ @ - 149 , 6 + 149 , 7 @ @ public class AutomaticBeanTest { 
 final TestBean testBean = new TestBean ( ) ; 
 testBean . setVal ( 0 ) ; 
 testBean . setWrong ( " wrongVal " ) ; 
 + testBean . assignPrivateFieldSecretly ( null ) ; 
 try { 
 testBean . setExceptionalMethod ( " someValue " ) ; 
 fail ( " exception expected " ) ; 
 @ @ - 198 , 12 + 199 , 12 @ @ public class AutomaticBeanTest { 
 this . val = val ; 
 } 
 
 - public void setExceptionalMethod ( String value ) { 
 - throw new IllegalStateException ( privateField + " , " + wrong + " , " + val + " , " + value ) ; 
 + public void assignPrivateFieldSecretly ( String input ) { 
 + privateField = input ; 
 } 
 
 - public void doSmth ( ) { 
 - privateField = " some value , just for fun " ; 
 + public void setExceptionalMethod ( String value ) { 
 + throw new IllegalStateException ( privateField + " , " + wrong + " , " + val + " , " + value ) ; 
 } 
 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 index 3e06265 . . 5bd90a8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 @ @ - 39 , 7 + 39 , 6 @ @ import com . google . common . collect . ImmutableMap ; 
 public class FileContentsTest { 
 
 @ Test 
 - @ SuppressWarnings ( " deprecation " ) 
 public void testDeprecatedAbbreviatedMethod ( ) { 
 / / just to make UT coverage 100 % 
 final FileContents fileContents = new FileContents ( " filename " , " 123 " , " 456 " ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 index 1c7964d . . 2c84a1d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 @ @ - 53 , 8 + 53 , 8 @ @ public class FileTextTest extends AbstractPathTestSupport { 
 / / just to make UT coverage 100 % 
 final String charsetName = " STRANGE _ CHARSET " ; 
 try { 
 - new FileText ( new File ( " any name " ) , charsetName ) ; 
 - fail ( " UnsupportedEncodingException is expected " ) ; 
 + final Object test = new FileText ( new File ( " any name " ) , charsetName ) ; 
 + fail ( " UnsupportedEncodingException is expected but got " + test ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 assertEquals ( " Invalid exception message " , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelCounterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelCounterTest . java 
 index 47d441e . . adab0e4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelCounterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelCounterTest . java 
 @ @ - 29 , 8 + 29 , 8 @ @ public class SeverityLevelCounterTest { 
 @ Test 
 public void testCtorException ( ) { 
 try { 
 - new SeverityLevelCounter ( null ) ; 
 - fail ( " exception expected " ) ; 
 + final Object test = new SeverityLevelCounter ( null ) ; 
 + fail ( " exception expected but got " + test ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " Invalid exception message " , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java 
 index bd8c856 . . 3937d65 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java 
 @ @ - 37 , 7 + 37 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 - @ SuppressWarnings ( " deprecation " ) 
 public class AbstractTypeAwareCheckTest extends AbstractModuleTestSupport { 
 private DefaultConfiguration checkConfig ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java 
 index 6bc7971 . . e95b4fa 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . doclets ; 
 import static com . puppycrawl . tools . checkstyle . internal . utils . TestUtil . isUtilsClassHasPrivateConstructor ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ @ - 106 , 7 + 107 , 8 @ @ public class TokenTypesDocletTest extends AbstractPathTestSupport { 
 names . add ( getPath ( " InputTokenTypesDocletNotConstants . java " ) ) ; 
 
 final Context context = new Context ( ) ; 
 - new TestMessager ( context ) ; 
 + final TestMessager test = new TestMessager ( context ) ; 
 + assertNotNull ( " should be able to create TestMessager without issue " , test ) ; 
 final JavadocTool javadocTool = JavadocTool . make0 ( context ) ; 
 final RootDoc rootDoc = getRootDoc ( javadocTool , options , names ) ; 
 
 @ @ - 122 , 7 + 124 , 8 @ @ public class TokenTypesDocletTest extends AbstractPathTestSupport { 
 names . add ( getPath ( " InputTokenTypesDocletEmptyJavadoc . java " ) ) ; 
 
 final Context context = new Context ( ) ; 
 - new TestMessager ( context ) ; 
 + final TestMessager test = new TestMessager ( context ) ; 
 + assertNotNull ( " should be able to create TestMessager without issue " , test ) ; 
 final JavadocTool javadocTool = JavadocTool . make0 ( context ) ; 
 final RootDoc rootDoc = getRootDoc ( javadocTool , options , names ) ; 
 
 @ @ - 146 , 7 + 149 , 8 @ @ public class TokenTypesDocletTest extends AbstractPathTestSupport { 
 names . add ( getPath ( " InputTokenTypesDocletCorrect . java " ) ) ; 
 
 final Context context = new Context ( ) ; 
 - new TestMessager ( context ) ; 
 + final TestMessager test = new TestMessager ( context ) ; 
 + assertNotNull ( " should be able to create TestMessager without issue " , test ) ; 
 final JavadocTool javadocTool = JavadocTool . make0 ( context ) ; 
 final RootDoc rootDoc = getRootDoc ( javadocTool , options , names ) ; 
 
 @ @ - 168 , 7 + 172 , 8 @ @ public class TokenTypesDocletTest extends AbstractPathTestSupport { 
 names . add ( getPath ( " InputTokenTypesDocletJavadocParseError . java " ) ) ; 
 
 final Context context = new Context ( ) ; 
 - new TestMessager ( context ) ; 
 + final TestMessager test = new TestMessager ( context ) ; 
 + assertNotNull ( " should be able to create TestMessager without issue " , test ) ; 
 final JavadocTool javadocTool = JavadocTool . make0 ( context ) ; 
 final RootDoc rootDoc = getRootDoc ( javadocTool , options , names ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java 
 index 2d97854 . . d882ddc 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / XpathFilterTest . java 
 @ @ - 119 , 8 + 119 , 9 @ @ public class XpathFilterTest extends AbstractModuleTestSupport { 
 public void testIncorrectQuery ( ) throws Exception { 
 final String xpath = " 1 @ # " ; 
 try { 
 - new XpathFilter ( " InputXpathFilterSuppressByXpath " , " Test " , null , xpath ) ; 
 - fail ( " Exception was expected " ) ; 
 + final Object test = new XpathFilter ( " InputXpathFilterSuppressByXpath " , " Test " , null , 
 + xpath ) ; 
 + fail ( " Exception was expected but got " + test ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 assertTrue ( " Message should be : Unexpected xpath query " , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 index fe92cd5 . . ed20df7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 @ @ - 20 , 7 + 20 , 9 @ @ 
 package com . puppycrawl . tools . checkstyle . utils ; 
 
 import static com . puppycrawl . tools . checkstyle . internal . utils . TestUtil . isUtilsClassHasPrivateConstructor ; 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 
 import java . io . File ; 
 @ @ - 138 , 16 + 140 , 20 @ @ public class ModuleReflectionUtilsTest { 
 ModuleReflectionUtils . isRootModule ( NotCheckstyleCheck . class ) ) ; 
 } 
 
 + @ Test 
 + public void testKeepEclipseHappy ( ) { 
 + final InvalidNonDefaultConstructorClass test = new InvalidNonDefaultConstructorClass ( 0 ) ; 
 + assertNotNull ( " should use constructor " , test ) ; 
 + assertEquals ( " should use field " , 1 , test . getField ( ) ) ; 
 + } 
 + 
 + / * * @ noinspection SuperClassHasFrequentlyUsedInheritors * / 
 private static class ValidCheckstyleClass extends AutomaticBean { 
 - protected ValidCheckstyleClass ( ) { 
 - / / keep pmd calm and happy 
 - } 
 + / / empty , use default constructor 
 } 
 
 private static class InvalidNonAutomaticBeanClass { 
 - protected InvalidNonAutomaticBeanClass ( ) { 
 - / / keep pmd calm and happy 
 - } 
 + / / empty , use default constructor 
 } 
 
 / * * @ noinspection AbstractClassNeverImplemented * / 
 @ @ - 257 , 9 + 263 , 7 @ @ public class ModuleReflectionUtilsTest { 
 } 
 
 private static class NotCheckstyleCheck { 
 - protected NotCheckstyleCheck ( ) { 
 - / / keep pmd calm and happy 
 - } 
 + / / empty , use default constructor 
 } 
 
 private static class InvalidNonDefaultConstructorClass extends AutomaticBean { 
 @ @ - 277 , 5 + 281 , 9 @ @ public class ModuleReflectionUtilsTest { 
 method ( data - 1 ) ; 
 } 
 } 
 + 
 + public int getField ( ) { 
 + return field ; 
 + } 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 index c7f88d5 . . 5a94092 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 @ @ - 118 , 7 + 118 , 7 @ @ public class DefaultLogger 
 sb . append ( " : warning " ) ; 
 } 
 sb . append ( " : " ) . append ( message ) ; 
 - errorWriter . println ( sb . toString ( ) ) ; 
 + errorWriter . println ( sb ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 index 577d24a . . 4be6ff0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 @ @ - 201 , 7 + 201 , 7 @ @ public final class ModifiedControlVariableCheck extends Check { 
 checkIdent ( ast ) ; 
 break ; 
 default : 
 - throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast . toString ( ) ) ; 
 + throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast ) ; 
 } 
 } 
 
 @ @ - 244 , 7 + 244 , 7 @ @ public final class ModifiedControlVariableCheck extends Check { 
 / / we need that Tokens only at visitToken ( ) 
 break ; 
 default : 
 - throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast . toString ( ) ) ; 
 + throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index 30b8a4c . . a7b7945 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 375 , 7 + 375 , 7 @ @ public class ImportOrderCheck 
 } 
 else { 
 throw new IllegalStateException ( 
 - " Unexpected option for static imports : " + abstractOption . toString ( ) ) ; 
 + " Unexpected option for static imports : " + abstractOption ) ; 
 } 
 
 lastImportLine = ast . findFirstToken ( TokenTypes . SEMI ) . getLineNo ( ) ;
