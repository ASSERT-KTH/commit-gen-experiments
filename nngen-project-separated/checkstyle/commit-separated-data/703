BLEU SCORE: 0.05861955497706755

TEST MSG: Issue # 3034 : FileText should not extends AbstractList
GENERATED MSG: Issue # 3989 : UTs should not use ROOT locale when they test violation / error message

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java <nl> index d83e5fe . . 81d2a3d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java <nl> @ @ - 168 , 8 + 168 , 6 @ @ public final class DetailNodeTreeStringPrinter { <nl> * @ throws IOException if the file could not be read . <nl> * / <nl> private static DetailNode parseFile ( File file ) throws IOException { <nl> - / / Details : https : / / github . com / checkstyle / checkstyle / issues / 3034 <nl> - / / noinspection MismatchedQueryAndUpdateOfCollection <nl> final FileText text = new FileText ( file . getAbsoluteFile ( ) , <nl> System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; <nl> return parseJavadocAsDetailNode ( text . getFullText ( ) . toString ( ) ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index b85aaa6 . . af13446 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import java . util . AbstractMap . SimpleEntry ; <nl> import java . util . Arrays ; <nl> import java . util . Collection ; <nl> import java . util . HashSet ; <nl> - import java . util . List ; <nl> import java . util . Locale ; <nl> import java . util . Map . Entry ; <nl> import java . util . Set ; <nl> @ @ - 165 , 7 + 164 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { <nl> + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { <nl> / / check if already checked and passed the file <nl> if ( CommonUtils . matchesFileExtension ( file , getFileExtensions ( ) ) ) { <nl> final String msg = " % s occurred during the analysis of file % s . " ; <nl> @ @ - 173 , 8 + 172 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> try { <nl> if ( ! ordinaryChecks . isEmpty ( ) <nl> | | ! commentChecks . isEmpty ( ) ) { <nl> - final FileText text = FileText . fromLines ( file , lines ) ; <nl> - final FileContents contents = new FileContents ( text ) ; <nl> + final FileContents contents = new FileContents ( fileText ) ; <nl> final DetailAST rootAST = parse ( contents ) ; <nl> <nl> if ( ! ordinaryChecks . isEmpty ( ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> index 8381ac4 . . eb87efe 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import java . io . File ; <nl> import java . util . Arrays ; <nl> - import java . util . List ; <nl> import java . util . SortedSet ; <nl> import java . util . TreeSet ; <nl> <nl> @ @ - 49 , 10 + 48 , 10 @ @ public abstract class AbstractFileSetCheck <nl> / * * <nl> * Called to process a file that matches the specified file extensions . <nl> * @ param file the file to be processed <nl> - * @ param lines an immutable list of the contents of the file . <nl> + * @ param fileText the contents of the file . <nl> * @ throws CheckstyleException if error condition within Checkstyle occurs . <nl> * / <nl> - protected abstract void processFiltered ( File file , List < String > lines ) <nl> + protected abstract void processFiltered ( File file , FileText fileText ) <nl> throws CheckstyleException ; <nl> <nl> @ Override <nl> @ @ - 71 , 12 + 70 , 12 @ @ public abstract class AbstractFileSetCheck <nl> } <nl> <nl> @ Override <nl> - public final SortedSet < LocalizedMessage > process ( File file , List < String > lines ) <nl> + public final SortedSet < LocalizedMessage > process ( File file , FileText fileText ) <nl> throws CheckstyleException { <nl> messageCollector . clear ( ) ; <nl> / / Process only what interested in <nl> if ( CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { <nl> - processFiltered ( file , lines ) ; <nl> + processFiltered ( file , fileText ) ; <nl> } <nl> return new TreeSet < > ( messageCollector ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> index 8a97825 . . 4b7f0c0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> @ @ - 77 , 7 + 77 , 7 @ @ public final class FileContents implements CommentListener { <nl> @ Deprecated <nl> public FileContents ( String filename , String . . . lines ) { <nl> fileName = filename ; <nl> - text = FileText . fromLines ( new File ( filename ) , Arrays . asList ( lines ) ) ; <nl> + text = new FileText ( new File ( filename ) , Arrays . asList ( lines ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java <nl> index 63053eb . . 6c348bc 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java <nl> @ @ - 20 , 7 + 20 , 6 @ @ <nl> package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import java . io . File ; <nl> - import java . util . List ; <nl> import java . util . SortedSet ; <nl> <nl> / * * <nl> @ @ - 68 , 11 + 67 , 11 @ @ public interface FileSetCheck <nl> * < / p > <nl> * <nl> * @ param file the file to be processed <nl> - * @ param lines an immutable list of the contents of the file . <nl> + * @ param fileText the contents of the file . <nl> * @ return the sorted set of messages to be logged . <nl> * @ throws CheckstyleException if error condition within Checkstyle occurs <nl> * / <nl> - SortedSet < LocalizedMessage > process ( File file , List < String > lines ) throws CheckstyleException ; <nl> + SortedSet < LocalizedMessage > process ( File file , FileText fileText ) throws CheckstyleException ; <nl> <nl> / * * <nl> * Called when all the files have been processed . This is the time to <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java <nl> index b87507c . . 91b31b5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java <nl> @ @ - 31 , 7 + 31 , 6 @ @ import java . nio . charset . Charset ; <nl> import java . nio . charset . CharsetDecoder ; <nl> import java . nio . charset . CodingErrorAction ; <nl> import java . nio . charset . UnsupportedCharsetException ; <nl> - import java . util . AbstractList ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> @ @ - 44 , 15 + 43 , 12 @ @ import com . google . common . io . Closeables ; <nl> * Represents the text contents of a file of arbitrary plain text type . <nl> * < p > <nl> * This class will be passed to instances of class FileSetCheck by <nl> - * Checker . It implements a string list to ensure backwards <nl> - * compatibility , but can be extended in the future to allow more <nl> - * flexible , more powerful or more efficient handling of certain <nl> - * situations . <nl> + * Checker . <nl> * < / p > <nl> * <nl> * @ author Martin von Gagern <nl> * / <nl> - public final class FileText extends AbstractList < String > { <nl> + public final class FileText { <nl> <nl> / * * <nl> * The number of characters to read in one go . <nl> @ @ - 171 , 7 + 167 , 7 @ @ public final class FileText extends AbstractList < String > { <nl> * @ param lines the lines of the text , without terminators <nl> * @ throws NullPointerException if the lines array is null <nl> * / <nl> - private FileText ( File file , List < String > lines ) { <nl> + public FileText ( File file , List < String > lines ) { <nl> final StringBuilder buf = new StringBuilder ( ) ; <nl> for ( final String line : lines ) { <nl> buf . append ( line ) . append ( ' \ n ' ) ; <nl> @ @ - 216 , 30 + 212 , 6 @ @ public final class FileText extends AbstractList < String > { <nl> } <nl> <nl> / * * <nl> - * Compatibility conversion . <nl> - * <nl> - * < p > This method can be used to convert the arguments passed to <nl> - * { @ link FileSetCheck # process ( File , List ) } to a FileText <nl> - * object . If the list of lines already is a FileText , it is <nl> - * returned as is . Otherwise , a new FileText is constructed by <nl> - * joining the lines using line feed characters . <nl> - * <nl> - * @ param file the name of the file <nl> - * @ param lines the lines of the text , without terminators <nl> - * @ return an object representing the denoted text file <nl> - * / <nl> - public static FileText fromLines ( File file , List < String > lines ) { <nl> - final FileText fileText ; <nl> - if ( lines instanceof FileText ) { <nl> - fileText = ( FileText ) lines ; <nl> - } <nl> - else { <nl> - fileText = new FileText ( file , lines ) ; <nl> - } <nl> - return fileText ; <nl> - } <nl> - <nl> - / * * <nl> * Get the name of the file . <nl> * @ return an object containing the name of the file <nl> * / <nl> @ @ - 265 , 6 + 237 , 14 @ @ public final class FileText extends AbstractList < String > { <nl> } <nl> <nl> / * * <nl> + * Returns a list of lines . <nl> + * @ return a list of all lines of the file <nl> + * / <nl> + public List < String > getLines ( ) { <nl> + return new ArrayList < > ( Arrays . asList ( lines ) ) ; <nl> + } <nl> + <nl> + / * * <nl> * Returns an array of all lines . <nl> * { @ code text . toLinesArray ( ) } is equivalent to <nl> * { @ code text . toArray ( new String [ text . size ( ) ] ) } . <nl> @ @ - 321 , 7 + 301 , 6 @ @ public final class FileText extends AbstractList < String > { <nl> * @ param lineNo the number of the line to get , starting at zero <nl> * @ return the line with the given number <nl> * / <nl> - @ Override <nl> public String get ( final int lineNo ) { <nl> return lines [ lineNo ] ; <nl> } <nl> @ @ - 330 , 7 + 309 , 6 @ @ public final class FileText extends AbstractList < String > { <nl> * Counts the lines of the text . <nl> * @ return the number of lines in the text <nl> * / <nl> - @ Override <nl> public int size ( ) { <nl> return lines . length ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java <nl> index 460c6e0 . . bf11b70 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java <nl> @ @ - 22 , 11 + 22 , 11 @ @ package com . puppycrawl . tools . checkstyle . checks ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . RandomAccessFile ; <nl> - import java . util . List ; <nl> import java . util . Locale ; <nl> <nl> import com . google . common . io . Closeables ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 75 , 7 + 75 , 7 @ @ public class NewlineAtEndOfFileCheck <nl> private LineSeparatorOption lineSeparator = LineSeparatorOption . SYSTEM ; <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> / / Cannot use lines as the line separators have been removed ! <nl> try { <nl> final RandomAccessFile randomAccessFile = new RandomAccessFile ( file , " r " ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> index 607f7c5 . . 218225c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> @ @ - 27 , 7 + 27 , 6 @ @ import java . io . InputStream ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . HashSet ; <nl> - import java . util . List ; <nl> import java . util . Locale ; <nl> import java . util . Optional ; <nl> import java . util . Properties ; <nl> @ @ - 46 , 6 + 45 , 7 @ @ import com . google . common . collect . SetMultimap ; <nl> import com . google . common . io . Closeables ; <nl> import com . puppycrawl . tools . checkstyle . Definitions ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> @ @ - 241 , 7 + 241 , 7 @ @ public class TranslationCheck extends AbstractFileSetCheck { <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> / / We just collecting files for processing at finishProcessing ( ) <nl> filesToProcess . add ( file ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java <nl> index f7cb4ed . . 3714249 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import com . google . common . collect . ImmutableMultiset ; <nl> import com . google . common . collect . Multiset ; <nl> import com . google . common . collect . Multiset . Entry ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> <nl> / * * <nl> * Checks the uniqueness of property keys ( left from equal sign ) in the <nl> @ @ - 63 , 7 + 64 , 7 @ @ public class UniquePropertiesCheck extends AbstractFileSetCheck { <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> final UniqueProperties properties = new UniqueProperties ( ) ; <nl> <nl> try { <nl> @ @ - 84 , 6 + 85 , 7 @ @ public class UniquePropertiesCheck extends AbstractFileSetCheck { <nl> for ( Entry < String > duplication : properties <nl> . getDuplicatedKeys ( ) . entrySet ( ) ) { <nl> final String keyName = duplication . getElement ( ) ; <nl> + final List < String > lines = fileText . getLines ( ) ; <nl> final int lineNumber = getLineNumber ( lines , keyName ) ; <nl> / / Number of occurrences is number of duplications + 1 <nl> log ( lineNumber , MSG _ KEY , keyName , duplication . getCount ( ) + 1 ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java <nl> index bc82d4c . . f7b84d4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java <nl> @ @ - 23 , 6 + 23 , 8 @ @ import java . io . File ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> + <nl> / * * <nl> * Checks the header of the source against a fixed header file . <nl> * In default configuration , if header is not specified , <nl> @ @ - 88 , 7 + 90 , 8 @ @ public class HeaderCheck extends AbstractHeaderCheck { <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> + final List < String > lines = fileText . getLines ( ) ; <nl> if ( getHeaderLines ( ) . size ( ) > lines . size ( ) ) { <nl> log ( 1 , MSG _ MISSING ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> index c659aac . . e69749b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . List ; <nl> import java . util . regex . Pattern ; <nl> import java . util . regex . PatternSyntaxException ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> @ @ - 77 , 8 + 78 , 9 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> final int headerSize = getHeaderLines ( ) . size ( ) ; <nl> + final List < String > lines = fileText . getLines ( ) ; <nl> final int fileSize = lines . size ( ) ; <nl> <nl> if ( headerSize - multiLines . length > fileSize ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocPackageCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocPackageCheck . java <nl> index 07e2526 . . 527f8df 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocPackageCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocPackageCheck . java <nl> @ @ - 21 , 10 + 21 , 10 @ @ package com . puppycrawl . tools . checkstyle . checks . javadoc ; <nl> <nl> import java . io . File ; <nl> import java . util . HashSet ; <nl> - import java . util . List ; <nl> import java . util . Set ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> <nl> / * * <nl> * Checks that all packages have a package documentation . See the documentation <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class JavadocPackageCheck extends AbstractFileSetCheck { <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> / / Check if already processed directory <nl> final File dir = file . getParentFile ( ) ; <nl> if ( ! directoriesChecked . contains ( dir ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java <nl> index 2f2aed6 . . 7a26e28 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java <nl> @ @ - 20 , 7 + 20 , 6 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . regexp ; <nl> <nl> import java . io . File ; <nl> - import java . util . List ; <nl> import java . util . regex . Pattern ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> @ @ - 63 , 8 + 62 , 8 @ @ public class RegexpMultilineCheck extends AbstractFileSetCheck { <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> - detector . processLines ( FileText . fromLines ( file , lines ) ) ; <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> + detector . processLines ( fileText ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java <nl> index a013549 . . 76535a5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java <nl> @ @ - 21 , 11 + 21 , 11 @ @ package com . puppycrawl . tools . checkstyle . checks . regexp ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> - import java . util . List ; <nl> import java . util . regex . Pattern ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> @ @ - 248 , 7 + 248 , 7 @ @ public class RegexpOnFilenameCheck extends AbstractFileSetCheck { <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { <nl> + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { <nl> final String fileName = getFileName ( file ) ; <nl> final String folderPath = getFolderPath ( file ) ; <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java <nl> index a1e2b60 . . 57171ba 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . io . File ; <nl> import java . util . List ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> <nl> / * * <nl> * Implementation of a check that looks for a single line in any file type . <nl> @ @ - 60 , 7 + 61 , 8 @ @ public class RegexpSinglelineCheck extends AbstractFileSetCheck { <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> + final List < String > lines = fileText . getLines ( ) ; <nl> detector . processLines ( lines ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheck . java <nl> index 0e91407 . . 4208672 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheck . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . io . File ; <nl> import java . util . List ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 69 , 7 + 70 , 8 @ @ public class FileLengthCheck extends AbstractFileSetCheck { <nl> private int max = DEFAULT _ MAX _ LINES ; <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> + final List < String > lines = fileText . getLines ( ) ; <nl> if ( lines . size ( ) > max ) { <nl> log ( 1 , MSG _ KEY , lines . size ( ) , max ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java <nl> index 922851e . . b956fb2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java <nl> @ @ - 20 , 9 + 20 , 9 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> <nl> import java . io . File ; <nl> - import java . util . List ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> <nl> / * * <nl> * Checks to see if a file contains a tab character . <nl> @ @ - 46 , 9 + 46 , 9 @ @ public class FileTabCharacterCheck extends AbstractFileSetCheck { <nl> private boolean eachLine ; <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> int lineNum = 0 ; <nl> - for ( final String line : lines ) { <nl> + for ( final String line : fileText . getLines ( ) ) { <nl> lineNum + + ; <nl> final int tabPosition = line . indexOf ( ' \ t ' ) ; <nl> if ( tabPosition ! = - 1 ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 28d3562 . . cb3cdc8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 65 , 6 + 65 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . api . Context ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . ExternalResourceHolder ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . Filter ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; <nl> @ @ - 1010 , 7 + 1011 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> implements ExternalResourceHolder { <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { <nl> + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { <nl> log ( 0 , " test " ) ; <nl> } <nl> <nl> @ @ - 1037 , 7 + 1038 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { <nl> + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { <nl> / / there is no need in implementation of the method <nl> } <nl> <nl> @ @ - 1208 , 7 + 1209 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { <nl> + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { <nl> methodCalls . add ( " processFiltered " ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> index a513022 . . 1a5ec8a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java <nl> @ @ - 44 , 7 + 44 , 6 @ @ import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . HashSet ; <nl> import java . util . LinkedHashSet ; <nl> - import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> <nl> @ @ - 52 , 6 + 51 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; <nl> import com . puppycrawl . tools . checkstyle . internal . CheckUtil ; <nl> @ @ - 246 , 7 + 246 , 7 @ @ public class PackageObjectFactoryTest { <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> / / not used <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index da1b944 . . 9b3cda8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ import org . mockito . internal . util . reflection . Whitebox ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Context ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . indentation . CommentsIndentationCheck ; <nl> @ @ - 178 , 13 + 179 , 13 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> treeWalker . configure ( new DefaultConfiguration ( " default config " ) ) ; <nl> final DefaultConfiguration childConfig = createCheckConfig ( JavadocParagraphCheck . class ) ; <nl> treeWalker . setupChild ( childConfig ) ; <nl> - <nl> + final File file = new File ( " input . java " ) ; <nl> final List < String > lines = <nl> new ArrayList < > ( Arrays . asList ( " package com . puppycrawl . tools . checkstyle ; " , " " , <nl> " error public class InputTreeWalkerFileWithViolation { } " ) ) ; <nl> - <nl> + final FileText fileText = new FileText ( file , lines ) ; <nl> try { <nl> - treeWalker . processFiltered ( new File ( " input . java " ) , lines ) ; <nl> + treeWalker . processFiltered ( file , fileText ) ; <nl> fail ( " Exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> @ @ - 192 , 9 + 193 , 20 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> " MismatchedTokenException occurred during the analysis of file input . java . " , <nl> ex . getMessage ( ) ) ; <nl> } <nl> + } <nl> <nl> - / / Should not throw exception as file with txt extension should not be processed at all <nl> - treeWalker . processFiltered ( new File ( " input . txt " ) , lines ) ; <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + @ Test <nl> + public void testProcessNonJavaFilesWithoutException ( ) throws Exception { <nl> + final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> + treeWalker . setTabWidth ( 1 ) ; <nl> + treeWalker . configure ( new DefaultConfiguration ( " default config " ) ) ; <nl> + final File file = new File ( " src / main / resources / checkstyle _ packages . xml " ) ; <nl> + final FileText fileText = new FileText ( file , StandardCharsets . ISO _ 8859 _ 1 . name ( ) ) ; <nl> + treeWalker . processFiltered ( file , fileText ) ; <nl> + final Collection < Checks > checks = <nl> + ( Collection < Checks > ) Whitebox . getInternalState ( treeWalker , " ordinaryChecks " ) ; <nl> + assertTrue ( " No checks - > No parsing " , checks . isEmpty ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 220 , 9 + 232 , 9 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> lines . add ( " classD a { } " ) ; <nl> - <nl> + final FileText fileText = new FileText ( file , lines ) ; <nl> try { <nl> - treeWalker . processFiltered ( file , lines ) ; <nl> + treeWalker . processFiltered ( file , fileText ) ; <nl> } <nl> catch ( CheckstyleException exception ) { <nl> assertTrue ( " Error message is unexpected " , <nl> @ @ - 242 , 9 + 254 , 9 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> lines . add ( " class a % $ # { } " ) ; <nl> - <nl> + final FileText fileText = new FileText ( file , lines ) ; <nl> try { <nl> - treeWalker . processFiltered ( file , lines ) ; <nl> + treeWalker . processFiltered ( file , fileText ) ; <nl> } <nl> catch ( CheckstyleException exception ) { <nl> assertTrue ( " Error message is unexpected " , <nl> @ @ - 298 , 10 + 310 , 11 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> treeWalker . setModuleFactory ( factory ) ; <nl> / / create file that should throw exception <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> + final FileText fileText = new FileText ( file , new ArrayList < > ( ) ) ; <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> lines . add ( " class a % $ # { } " ) ; <nl> <nl> - treeWalker . processFiltered ( file , lines ) ; <nl> + treeWalker . processFiltered ( file , fileText ) ; <nl> final Collection < Checks > checks = <nl> ( Collection < Checks > ) Whitebox . getInternalState ( treeWalker , " ordinaryChecks " ) ; <nl> assertTrue ( " No checks - > No parsing " , checks . isEmpty ( ) ) ; <nl> @ @ - 318 , 9 + 331 , 10 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> lines . add ( " class a % $ # { } " ) ; <nl> + final FileText fileText = new FileText ( file , lines ) ; <nl> <nl> try { <nl> - treeWalker . processFiltered ( file , lines ) ; <nl> + treeWalker . processFiltered ( file , fileText ) ; <nl> fail ( " file is not compilable , exception is expected " ) ; <nl> } <nl> catch ( CheckstyleException exception ) { <nl> @ @ - 342 , 9 + 356 , 10 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> lines . add ( " class a % $ # { } " ) ; <nl> + final FileText fileText = new FileText ( file , lines ) ; <nl> <nl> try { <nl> - treeWalker . processFiltered ( file , lines ) ; <nl> + treeWalker . processFiltered ( file , fileText ) ; <nl> fail ( " file is not compilable , exception is expected " ) ; <nl> } <nl> catch ( CheckstyleException exception ) { <nl> @ @ - 368 , 9 + 383 , 10 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> lines . add ( " class a % $ # { } " ) ; <nl> + final FileText fileText = new FileText ( file , lines ) ; <nl> <nl> try { <nl> - treeWalker . processFiltered ( file , lines ) ; <nl> + treeWalker . processFiltered ( file , fileText ) ; <nl> fail ( " file is not compilable , exception is expected " ) ; <nl> } <nl> catch ( CheckstyleException exception ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java <nl> index 5bab91b . . d221b54 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java <nl> @ @ - 42 , 11 + 42 , 13 @ @ public class AbstractFileSetCheckTest { <nl> final DummyFileSetCheck check = new DummyFileSetCheck ( ) ; <nl> check . configure ( new DefaultConfiguration ( " filesetcheck " ) ) ; <nl> check . setFileExtensions ( " tmp " ) ; <nl> - final List < String > lines = Arrays . asList ( " key = value " , " ext = tmp " ) ; <nl> + final File firstFile = new File ( " inputAbstractFileSetCheck . tmp " ) ; <nl> final SortedSet < LocalizedMessage > firstFileMessages = <nl> - check . process ( new File ( " inputAbstractFileSetCheck . tmp " ) , Collections . emptyList ( ) ) ; <nl> + check . process ( firstFile , new FileText ( firstFile , Collections . emptyList ( ) ) ) ; <nl> + final File secondFile = new File ( " inputAbstractFileSetCheck . txt " ) ; <nl> + final List < String > lines = Arrays . asList ( " key = value " , " ext = tmp " ) ; <nl> final SortedSet < LocalizedMessage > secondFileMessages = <nl> - check . process ( new File ( " inputAbstractFileSetCheck . txt " ) , lines ) ; <nl> + check . process ( secondFile , new FileText ( secondFile , lines ) ) ; <nl> <nl> assertEquals ( " File should not be empty . " , <nl> firstFileMessages . first ( ) . getMessage ( ) ) ; <nl> @ @ - 88 , 7 + 90 , 8 @ @ public class AbstractFileSetCheckTest { <nl> private static final String MSG _ KEY = " File should not be empty . " ; <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { <nl> + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { <nl> + final List < String > lines = fileText . getLines ( ) ; <nl> if ( lines . isEmpty ( ) ) { <nl> log ( 1 , MSG _ KEY ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> index 165e5ac . . d276c67 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> @ @ - 44 , 7 + 44 , 7 @ @ public class FileContentsTest { <nl> public void testSinglelineCommentNotIntersect ( ) { <nl> / / just to make UT coverage 100 % <nl> final FileContents fileContents = new FileContents ( <nl> - FileText . fromLines ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; <nl> + new FileText ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; <nl> fileContents . reportSingleLineComment ( 1 , 2 ) ; <nl> assertFalse ( fileContents . hasIntersectionWithComment ( 1 , 0 , 1 , 1 ) ) ; <nl> } <nl> @ @ - 53 , 7 + 53 , 7 @ @ public class FileContentsTest { <nl> public void testSinglelineCommentIntersect ( ) { <nl> / / just to make UT coverage 100 % <nl> final FileContents fileContents = new FileContents ( <nl> - FileText . fromLines ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; <nl> + new FileText ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; <nl> fileContents . reportSingleLineComment ( 1 , 2 ) ; <nl> assertTrue ( fileContents . hasIntersectionWithComment ( 1 , 5 , 1 , 6 ) ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> index 908e042 . . a7cd73c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import static org . junit . Assert . assertTrue ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> - import java . util . List ; <nl> import java . util . Locale ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 36 , 6 + 35 , 7 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . checks . imports . AvoidStarImportCheck ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class FileSetCheckLifecycleTest <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> / / dummy method <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> index 986cea6 . . cdfd276 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> @ @ - 44 , 6 + 44 , 7 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ @ - 187 , 7 + 188 , 8 @ @ public class NewlineAtEndOfFileCheckTest <nl> final List < String > lines = new ArrayList < > ( 1 ) ; <nl> lines . add ( " txt " ) ; <nl> final File impossibleFile = new File ( " " ) ; <nl> - final Set < LocalizedMessage > messages = check . process ( impossibleFile , lines ) ; <nl> + final FileText fileText = new FileText ( impossibleFile , lines ) ; <nl> + final Set < LocalizedMessage > messages = check . process ( impossibleFile , fileText ) ; <nl> assertEquals ( " Ammount of messages is unexpected " , <nl> 1 , messages . size ( ) ) ; <nl> final Iterator < LocalizedMessage > iterator = messages . iterator ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> index 90f02f4 . . db17e7b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> @ @ - 42 , 6 + 42 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> <nl> / * * <nl> @ @ - 113 , 8 + 114 , 9 @ @ public class UniquePropertiesCheckTest extends BaseFileSetCheckTestSupport { <nl> final String fileName = <nl> getPath ( " InputUniquePropertiesCheckNotExisting . properties " ) ; <nl> final File file = new File ( fileName ) ; <nl> + final FileText fileText = new FileText ( file , Collections . emptyList ( ) ) ; <nl> final SortedSet < LocalizedMessage > messages = <nl> - check . process ( file , Collections . emptyList ( ) ) ; <nl> + check . process ( file , fileText ) ; <nl> assertEquals ( " Wrong messages count : " + messages . size ( ) , <nl> 1 , messages . size ( ) ) ; <nl> final LocalizedMessage message = messages . iterator ( ) . next ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> index 6354901 . . 4100fcd 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> @ @ - 215 , 7 + 215 , 7 @ @ public class AstRegressionTest extends BaseCheckTestSupport { <nl> final String expectedContents = new FileText ( expectedFile , System . getProperty ( <nl> " file . encoding " , " UTF - 8 " ) ) . getFullText ( ) . toString ( ) . replace ( " \ r " , " " ) ; <nl> <nl> - final FileText actualFileContents = FileText . fromLines ( new File ( " " ) , <nl> + final FileText actualFileContents = new FileText ( new File ( " " ) , <nl> Arrays . asList ( actualJava . split ( " \ \ n | \ \ r \ \ n ? " ) ) ) ; <nl> final String actualContents = AstTreeStringPrinter . printAst ( actualFileContents , <nl> withComments ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> index 0211102 . . ccd5dd4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AuditListener ; <nl> import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; <nl> import com . puppycrawl . tools . checkstyle . api . BeforeExecutionFileFilter ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . Filter ; <nl> import com . puppycrawl . tools . checkstyle . api . RootModule ; <nl> <nl> @ @ - 134 , 7 + 135 , 7 @ @ public class ModuleReflectionUtilsTest { <nl> <nl> private static class FileSetModuleClass extends AbstractFileSetCheck { <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { <nl> + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { <nl> / / dummy method <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> index b74a614 . . 1ad746a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import java . util . Optional ; <nl> import java . util . Set ; <nl> import java . util . function . Predicate ; <nl> import java . util . stream . Collectors ; <nl> - import java . util . stream . Stream ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> @ @ - 102 , 8 + 101 , 8 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> / * * <nl> * A set of annotations which allow the check to skip the method from validation . <nl> * / <nl> - private Set < String > ignoredAnnotations = Stream . of ( " Test " , " Before " , " After " , " BeforeClass " , <nl> - " AfterClass " ) . collect ( Collectors . toSet ( ) ) ; <nl> + private Set < String > ignoredAnnotations = Arrays . stream ( new String [ ] { " Test " , " Before " , " After " , <nl> + " BeforeClass " , " AfterClass " , } ) . collect ( Collectors . toSet ( ) ) ; <nl> <nl> / * * <nl> * Sets annotations which allow the check to skip the method from validation . <nl> @ @ - 139 , 9 + 138 , 9 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> if ( ! hasJavadocComment ( ast ) <nl> + & & canBeOverridden ( ast ) <nl> & & ( isNativeMethod ( ast ) <nl> | | ! hasEmptyImplementation ( ast ) ) <nl> - & & canBeOverridden ( ast ) <nl> & & ! hasIgnoredAnnotation ( ast , ignoredAnnotations ) ) { <nl> <nl> final DetailAST classDef = getNearestClassOrEnumDefinition ( ast ) ; <nl> @ @ - 182 , 19 + 181 , 17 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> private static boolean hasEmptyImplementation ( DetailAST ast ) { <nl> boolean hasEmptyBody = true ; <nl> final DetailAST methodImplOpenBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> - if ( methodImplOpenBrace ! = null ) { <nl> - final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; <nl> - final Predicate < DetailAST > predicate = currentNode - > { <nl> - return currentNode ! = null <nl> - & & currentNode ! = methodImplCloseBrace <nl> - & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) <nl> - & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; <nl> - } ; <nl> - final Optional < DetailAST > methodBody = <nl> - TokenUtils . findFirstTokenByPredicate ( methodImplOpenBrace , predicate ) ; <nl> - if ( methodBody . isPresent ( ) ) { <nl> - hasEmptyBody = false ; <nl> - } <nl> + final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; <nl> + final Predicate < DetailAST > predicate = currentNode - > { <nl> + return currentNode ! = null <nl> + & & currentNode ! = methodImplCloseBrace <nl> + & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) <nl> + & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; <nl> + } ; <nl> + final Optional < DetailAST > methodBody = <nl> + TokenUtils . findFirstTokenByPredicate ( methodImplOpenBrace , predicate ) ; <nl> + if ( methodBody . isPresent ( ) ) { <nl> + hasEmptyBody = false ; <nl> } <nl> return hasEmptyBody ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java <nl> index afa1512 . . 8453755 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java <nl> @ @ - 218 , 4 + 218 , 8 @ @ public class InputDesignForExtensionOverridableMethods { <nl> <nl> protected final int foo4 ( int a , int b ) { return a + b ; } <nl> } <nl> + <nl> + public abstract class C { <nl> + public abstract void foo1 ( int a ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java 
 index d83e5fe . . 81d2a3d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java 
 @ @ - 168 , 8 + 168 , 6 @ @ public final class DetailNodeTreeStringPrinter { 
 * @ throws IOException if the file could not be read . 
 * / 
 private static DetailNode parseFile ( File file ) throws IOException { 
 - / / Details : https : / / github . com / checkstyle / checkstyle / issues / 3034 
 - / / noinspection MismatchedQueryAndUpdateOfCollection 
 final FileText text = new FileText ( file . getAbsoluteFile ( ) , 
 System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; 
 return parseJavadocAsDetailNode ( text . getFullText ( ) . toString ( ) ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index b85aaa6 . . af13446 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import java . util . AbstractMap . SimpleEntry ; 
 import java . util . Arrays ; 
 import java . util . Collection ; 
 import java . util . HashSet ; 
 - import java . util . List ; 
 import java . util . Locale ; 
 import java . util . Map . Entry ; 
 import java . util . Set ; 
 @ @ - 165 , 7 + 164 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { 
 + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { 
 / / check if already checked and passed the file 
 if ( CommonUtils . matchesFileExtension ( file , getFileExtensions ( ) ) ) { 
 final String msg = " % s occurred during the analysis of file % s . " ; 
 @ @ - 173 , 8 + 172 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 try { 
 if ( ! ordinaryChecks . isEmpty ( ) 
 | | ! commentChecks . isEmpty ( ) ) { 
 - final FileText text = FileText . fromLines ( file , lines ) ; 
 - final FileContents contents = new FileContents ( text ) ; 
 + final FileContents contents = new FileContents ( fileText ) ; 
 final DetailAST rootAST = parse ( contents ) ; 
 
 if ( ! ordinaryChecks . isEmpty ( ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 index 8381ac4 . . eb87efe 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 
 import java . io . File ; 
 import java . util . Arrays ; 
 - import java . util . List ; 
 import java . util . SortedSet ; 
 import java . util . TreeSet ; 
 
 @ @ - 49 , 10 + 48 , 10 @ @ public abstract class AbstractFileSetCheck 
 / * * 
 * Called to process a file that matches the specified file extensions . 
 * @ param file the file to be processed 
 - * @ param lines an immutable list of the contents of the file . 
 + * @ param fileText the contents of the file . 
 * @ throws CheckstyleException if error condition within Checkstyle occurs . 
 * / 
 - protected abstract void processFiltered ( File file , List < String > lines ) 
 + protected abstract void processFiltered ( File file , FileText fileText ) 
 throws CheckstyleException ; 
 
 @ Override 
 @ @ - 71 , 12 + 70 , 12 @ @ public abstract class AbstractFileSetCheck 
 } 
 
 @ Override 
 - public final SortedSet < LocalizedMessage > process ( File file , List < String > lines ) 
 + public final SortedSet < LocalizedMessage > process ( File file , FileText fileText ) 
 throws CheckstyleException { 
 messageCollector . clear ( ) ; 
 / / Process only what interested in 
 if ( CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { 
 - processFiltered ( file , lines ) ; 
 + processFiltered ( file , fileText ) ; 
 } 
 return new TreeSet < > ( messageCollector ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 index 8a97825 . . 4b7f0c0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 @ @ - 77 , 7 + 77 , 7 @ @ public final class FileContents implements CommentListener { 
 @ Deprecated 
 public FileContents ( String filename , String . . . lines ) { 
 fileName = filename ; 
 - text = FileText . fromLines ( new File ( filename ) , Arrays . asList ( lines ) ) ; 
 + text = new FileText ( new File ( filename ) , Arrays . asList ( lines ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java 
 index 63053eb . . 6c348bc 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java 
 @ @ - 20 , 7 + 20 , 6 @ @ 
 package com . puppycrawl . tools . checkstyle . api ; 
 
 import java . io . File ; 
 - import java . util . List ; 
 import java . util . SortedSet ; 
 
 / * * 
 @ @ - 68 , 11 + 67 , 11 @ @ public interface FileSetCheck 
 * < / p > 
 * 
 * @ param file the file to be processed 
 - * @ param lines an immutable list of the contents of the file . 
 + * @ param fileText the contents of the file . 
 * @ return the sorted set of messages to be logged . 
 * @ throws CheckstyleException if error condition within Checkstyle occurs 
 * / 
 - SortedSet < LocalizedMessage > process ( File file , List < String > lines ) throws CheckstyleException ; 
 + SortedSet < LocalizedMessage > process ( File file , FileText fileText ) throws CheckstyleException ; 
 
 / * * 
 * Called when all the files have been processed . This is the time to 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java 
 index b87507c . . 91b31b5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java 
 @ @ - 31 , 7 + 31 , 6 @ @ import java . nio . charset . Charset ; 
 import java . nio . charset . CharsetDecoder ; 
 import java . nio . charset . CodingErrorAction ; 
 import java . nio . charset . UnsupportedCharsetException ; 
 - import java . util . AbstractList ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 @ @ - 44 , 15 + 43 , 12 @ @ import com . google . common . io . Closeables ; 
 * Represents the text contents of a file of arbitrary plain text type . 
 * < p > 
 * This class will be passed to instances of class FileSetCheck by 
 - * Checker . It implements a string list to ensure backwards 
 - * compatibility , but can be extended in the future to allow more 
 - * flexible , more powerful or more efficient handling of certain 
 - * situations . 
 + * Checker . 
 * < / p > 
 * 
 * @ author Martin von Gagern 
 * / 
 - public final class FileText extends AbstractList < String > { 
 + public final class FileText { 
 
 / * * 
 * The number of characters to read in one go . 
 @ @ - 171 , 7 + 167 , 7 @ @ public final class FileText extends AbstractList < String > { 
 * @ param lines the lines of the text , without terminators 
 * @ throws NullPointerException if the lines array is null 
 * / 
 - private FileText ( File file , List < String > lines ) { 
 + public FileText ( File file , List < String > lines ) { 
 final StringBuilder buf = new StringBuilder ( ) ; 
 for ( final String line : lines ) { 
 buf . append ( line ) . append ( ' \ n ' ) ; 
 @ @ - 216 , 30 + 212 , 6 @ @ public final class FileText extends AbstractList < String > { 
 } 
 
 / * * 
 - * Compatibility conversion . 
 - * 
 - * < p > This method can be used to convert the arguments passed to 
 - * { @ link FileSetCheck # process ( File , List ) } to a FileText 
 - * object . If the list of lines already is a FileText , it is 
 - * returned as is . Otherwise , a new FileText is constructed by 
 - * joining the lines using line feed characters . 
 - * 
 - * @ param file the name of the file 
 - * @ param lines the lines of the text , without terminators 
 - * @ return an object representing the denoted text file 
 - * / 
 - public static FileText fromLines ( File file , List < String > lines ) { 
 - final FileText fileText ; 
 - if ( lines instanceof FileText ) { 
 - fileText = ( FileText ) lines ; 
 - } 
 - else { 
 - fileText = new FileText ( file , lines ) ; 
 - } 
 - return fileText ; 
 - } 
 - 
 - / * * 
 * Get the name of the file . 
 * @ return an object containing the name of the file 
 * / 
 @ @ - 265 , 6 + 237 , 14 @ @ public final class FileText extends AbstractList < String > { 
 } 
 
 / * * 
 + * Returns a list of lines . 
 + * @ return a list of all lines of the file 
 + * / 
 + public List < String > getLines ( ) { 
 + return new ArrayList < > ( Arrays . asList ( lines ) ) ; 
 + } 
 + 
 + / * * 
 * Returns an array of all lines . 
 * { @ code text . toLinesArray ( ) } is equivalent to 
 * { @ code text . toArray ( new String [ text . size ( ) ] ) } . 
 @ @ - 321 , 7 + 301 , 6 @ @ public final class FileText extends AbstractList < String > { 
 * @ param lineNo the number of the line to get , starting at zero 
 * @ return the line with the given number 
 * / 
 - @ Override 
 public String get ( final int lineNo ) { 
 return lines [ lineNo ] ; 
 } 
 @ @ - 330 , 7 + 309 , 6 @ @ public final class FileText extends AbstractList < String > { 
 * Counts the lines of the text . 
 * @ return the number of lines in the text 
 * / 
 - @ Override 
 public int size ( ) { 
 return lines . length ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java 
 index 460c6e0 . . bf11b70 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheck . java 
 @ @ - 22 , 11 + 22 , 11 @ @ package com . puppycrawl . tools . checkstyle . checks ; 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . io . RandomAccessFile ; 
 - import java . util . List ; 
 import java . util . Locale ; 
 
 import com . google . common . io . Closeables ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 
 / * * 
 * < p > 
 @ @ - 75 , 7 + 75 , 7 @ @ public class NewlineAtEndOfFileCheck 
 private LineSeparatorOption lineSeparator = LineSeparatorOption . SYSTEM ; 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 + protected void processFiltered ( File file , FileText fileText ) { 
 / / Cannot use lines as the line separators have been removed ! 
 try { 
 final RandomAccessFile randomAccessFile = new RandomAccessFile ( file , " r " ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 index 607f7c5 . . 218225c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 @ @ - 27 , 7 + 27 , 6 @ @ import java . io . InputStream ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . HashSet ; 
 - import java . util . List ; 
 import java . util . Locale ; 
 import java . util . Optional ; 
 import java . util . Properties ; 
 @ @ - 46 , 6 + 45 , 7 @ @ import com . google . common . collect . SetMultimap ; 
 import com . google . common . io . Closeables ; 
 import com . puppycrawl . tools . checkstyle . Definitions ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 @ @ - 241 , 7 + 241 , 7 @ @ public class TranslationCheck extends AbstractFileSetCheck { 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 + protected void processFiltered ( File file , FileText fileText ) { 
 / / We just collecting files for processing at finishProcessing ( ) 
 filesToProcess . add ( file ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java 
 index f7cb4ed . . 3714249 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import com . google . common . collect . ImmutableMultiset ; 
 import com . google . common . collect . Multiset ; 
 import com . google . common . collect . Multiset . Entry ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 
 / * * 
 * Checks the uniqueness of property keys ( left from equal sign ) in the 
 @ @ - 63 , 7 + 64 , 7 @ @ public class UniquePropertiesCheck extends AbstractFileSetCheck { 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 + protected void processFiltered ( File file , FileText fileText ) { 
 final UniqueProperties properties = new UniqueProperties ( ) ; 
 
 try { 
 @ @ - 84 , 6 + 85 , 7 @ @ public class UniquePropertiesCheck extends AbstractFileSetCheck { 
 for ( Entry < String > duplication : properties 
 . getDuplicatedKeys ( ) . entrySet ( ) ) { 
 final String keyName = duplication . getElement ( ) ; 
 + final List < String > lines = fileText . getLines ( ) ; 
 final int lineNumber = getLineNumber ( lines , keyName ) ; 
 / / Number of occurrences is number of duplications + 1 
 log ( lineNumber , MSG _ KEY , keyName , duplication . getCount ( ) + 1 ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java 
 index bc82d4c . . f7b84d4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java 
 @ @ - 23 , 6 + 23 , 8 @ @ import java . io . File ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 + 
 / * * 
 * Checks the header of the source against a fixed header file . 
 * In default configuration , if header is not specified , 
 @ @ - 88 , 7 + 90 , 8 @ @ public class HeaderCheck extends AbstractHeaderCheck { 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 + protected void processFiltered ( File file , FileText fileText ) { 
 + final List < String > lines = fileText . getLines ( ) ; 
 if ( getHeaderLines ( ) . size ( ) > lines . size ( ) ) { 
 log ( 1 , MSG _ MISSING ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 index c659aac . . e69749b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . List ; 
 import java . util . regex . Pattern ; 
 import java . util . regex . PatternSyntaxException ; 
 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 @ @ - 77 , 8 + 78 , 9 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 + protected void processFiltered ( File file , FileText fileText ) { 
 final int headerSize = getHeaderLines ( ) . size ( ) ; 
 + final List < String > lines = fileText . getLines ( ) ; 
 final int fileSize = lines . size ( ) ; 
 
 if ( headerSize - multiLines . length > fileSize ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocPackageCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocPackageCheck . java 
 index 07e2526 . . 527f8df 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocPackageCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocPackageCheck . java 
 @ @ - 21 , 10 + 21 , 10 @ @ package com . puppycrawl . tools . checkstyle . checks . javadoc ; 
 
 import java . io . File ; 
 import java . util . HashSet ; 
 - import java . util . List ; 
 import java . util . Set ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 
 / * * 
 * Checks that all packages have a package documentation . See the documentation 
 @ @ - 67 , 7 + 67 , 7 @ @ public class JavadocPackageCheck extends AbstractFileSetCheck { 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 + protected void processFiltered ( File file , FileText fileText ) { 
 / / Check if already processed directory 
 final File dir = file . getParentFile ( ) ; 
 if ( ! directoriesChecked . contains ( dir ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java 
 index 2f2aed6 . . 7a26e28 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java 
 @ @ - 20 , 7 + 20 , 6 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . regexp ; 
 
 import java . io . File ; 
 - import java . util . List ; 
 import java . util . regex . Pattern ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 @ @ - 63 , 8 + 62 , 8 @ @ public class RegexpMultilineCheck extends AbstractFileSetCheck { 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 - detector . processLines ( FileText . fromLines ( file , lines ) ) ; 
 + protected void processFiltered ( File file , FileText fileText ) { 
 + detector . processLines ( fileText ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java 
 index a013549 . . 76535a5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java 
 @ @ - 21 , 11 + 21 , 11 @ @ package com . puppycrawl . tools . checkstyle . checks . regexp ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 - import java . util . List ; 
 import java . util . regex . Pattern ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 @ @ - 248 , 7 + 248 , 7 @ @ public class RegexpOnFilenameCheck extends AbstractFileSetCheck { 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { 
 + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { 
 final String fileName = getFileName ( file ) ; 
 final String folderPath = getFolderPath ( file ) ; 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java 
 index a1e2b60 . . 57171ba 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . io . File ; 
 import java . util . List ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 
 / * * 
 * Implementation of a check that looks for a single line in any file type . 
 @ @ - 60 , 7 + 61 , 8 @ @ public class RegexpSinglelineCheck extends AbstractFileSetCheck { 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 + protected void processFiltered ( File file , FileText fileText ) { 
 + final List < String > lines = fileText . getLines ( ) ; 
 detector . processLines ( lines ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheck . java 
 index 0e91407 . . 4208672 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheck . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . io . File ; 
 import java . util . List ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 
 / * * 
 * < p > 
 @ @ - 69 , 7 + 70 , 8 @ @ public class FileLengthCheck extends AbstractFileSetCheck { 
 private int max = DEFAULT _ MAX _ LINES ; 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 + protected void processFiltered ( File file , FileText fileText ) { 
 + final List < String > lines = fileText . getLines ( ) ; 
 if ( lines . size ( ) > max ) { 
 log ( 1 , MSG _ KEY , lines . size ( ) , max ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java 
 index 922851e . . b956fb2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java 
 @ @ - 20 , 9 + 20 , 9 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 
 import java . io . File ; 
 - import java . util . List ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 
 / * * 
 * Checks to see if a file contains a tab character . 
 @ @ - 46 , 9 + 46 , 9 @ @ public class FileTabCharacterCheck extends AbstractFileSetCheck { 
 private boolean eachLine ; 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 + protected void processFiltered ( File file , FileText fileText ) { 
 int lineNum = 0 ; 
 - for ( final String line : lines ) { 
 + for ( final String line : fileText . getLines ( ) ) { 
 lineNum + + ; 
 final int tabPosition = line . indexOf ( ' \ t ' ) ; 
 if ( tabPosition ! = - 1 ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 28d3562 . . cb3cdc8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 65 , 6 + 65 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . api . Context ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . ExternalResourceHolder ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . Filter ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; 
 @ @ - 1010 , 7 + 1011 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 implements ExternalResourceHolder { 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { 
 + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { 
 log ( 0 , " test " ) ; 
 } 
 
 @ @ - 1037 , 7 + 1038 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { 
 + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { 
 / / there is no need in implementation of the method 
 } 
 
 @ @ - 1208 , 7 + 1209 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { 
 + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { 
 methodCalls . add ( " processFiltered " ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 index a513022 . . 1a5ec8a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageObjectFactoryTest . java 
 @ @ - 44 , 7 + 44 , 6 @ @ import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . HashSet ; 
 import java . util . LinkedHashSet ; 
 - import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 
 @ @ - 52 , 6 + 51 , 7 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; 
 import com . puppycrawl . tools . checkstyle . internal . CheckUtil ; 
 @ @ - 246 , 7 + 246 , 7 @ @ public class PackageObjectFactoryTest { 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 + protected void processFiltered ( File file , FileText fileText ) { 
 / / not used 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index da1b944 . . 9b3cda8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 47 , 6 + 47 , 7 @ @ import org . mockito . internal . util . reflection . Whitebox ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Context ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . indentation . CommentsIndentationCheck ; 
 @ @ - 178 , 13 + 179 , 13 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 treeWalker . configure ( new DefaultConfiguration ( " default config " ) ) ; 
 final DefaultConfiguration childConfig = createCheckConfig ( JavadocParagraphCheck . class ) ; 
 treeWalker . setupChild ( childConfig ) ; 
 - 
 + final File file = new File ( " input . java " ) ; 
 final List < String > lines = 
 new ArrayList < > ( Arrays . asList ( " package com . puppycrawl . tools . checkstyle ; " , " " , 
 " error public class InputTreeWalkerFileWithViolation { } " ) ) ; 
 - 
 + final FileText fileText = new FileText ( file , lines ) ; 
 try { 
 - treeWalker . processFiltered ( new File ( " input . java " ) , lines ) ; 
 + treeWalker . processFiltered ( file , fileText ) ; 
 fail ( " Exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 @ @ - 192 , 9 + 193 , 20 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 " MismatchedTokenException occurred during the analysis of file input . java . " , 
 ex . getMessage ( ) ) ; 
 } 
 + } 
 
 - / / Should not throw exception as file with txt extension should not be processed at all 
 - treeWalker . processFiltered ( new File ( " input . txt " ) , lines ) ; 
 + @ SuppressWarnings ( " unchecked " ) 
 + @ Test 
 + public void testProcessNonJavaFilesWithoutException ( ) throws Exception { 
 + final TreeWalker treeWalker = new TreeWalker ( ) ; 
 + treeWalker . setTabWidth ( 1 ) ; 
 + treeWalker . configure ( new DefaultConfiguration ( " default config " ) ) ; 
 + final File file = new File ( " src / main / resources / checkstyle _ packages . xml " ) ; 
 + final FileText fileText = new FileText ( file , StandardCharsets . ISO _ 8859 _ 1 . name ( ) ) ; 
 + treeWalker . processFiltered ( file , fileText ) ; 
 + final Collection < Checks > checks = 
 + ( Collection < Checks > ) Whitebox . getInternalState ( treeWalker , " ordinaryChecks " ) ; 
 + assertTrue ( " No checks - > No parsing " , checks . isEmpty ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 220 , 9 + 232 , 9 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 final List < String > lines = new ArrayList < > ( ) ; 
 lines . add ( " classD a { } " ) ; 
 - 
 + final FileText fileText = new FileText ( file , lines ) ; 
 try { 
 - treeWalker . processFiltered ( file , lines ) ; 
 + treeWalker . processFiltered ( file , fileText ) ; 
 } 
 catch ( CheckstyleException exception ) { 
 assertTrue ( " Error message is unexpected " , 
 @ @ - 242 , 9 + 254 , 9 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 final List < String > lines = new ArrayList < > ( ) ; 
 lines . add ( " class a % $ # { } " ) ; 
 - 
 + final FileText fileText = new FileText ( file , lines ) ; 
 try { 
 - treeWalker . processFiltered ( file , lines ) ; 
 + treeWalker . processFiltered ( file , fileText ) ; 
 } 
 catch ( CheckstyleException exception ) { 
 assertTrue ( " Error message is unexpected " , 
 @ @ - 298 , 10 + 310 , 11 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 treeWalker . setModuleFactory ( factory ) ; 
 / / create file that should throw exception 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 + final FileText fileText = new FileText ( file , new ArrayList < > ( ) ) ; 
 final List < String > lines = new ArrayList < > ( ) ; 
 lines . add ( " class a % $ # { } " ) ; 
 
 - treeWalker . processFiltered ( file , lines ) ; 
 + treeWalker . processFiltered ( file , fileText ) ; 
 final Collection < Checks > checks = 
 ( Collection < Checks > ) Whitebox . getInternalState ( treeWalker , " ordinaryChecks " ) ; 
 assertTrue ( " No checks - > No parsing " , checks . isEmpty ( ) ) ; 
 @ @ - 318 , 9 + 331 , 10 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 final List < String > lines = new ArrayList < > ( ) ; 
 lines . add ( " class a % $ # { } " ) ; 
 + final FileText fileText = new FileText ( file , lines ) ; 
 
 try { 
 - treeWalker . processFiltered ( file , lines ) ; 
 + treeWalker . processFiltered ( file , fileText ) ; 
 fail ( " file is not compilable , exception is expected " ) ; 
 } 
 catch ( CheckstyleException exception ) { 
 @ @ - 342 , 9 + 356 , 10 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 final List < String > lines = new ArrayList < > ( ) ; 
 lines . add ( " class a % $ # { } " ) ; 
 + final FileText fileText = new FileText ( file , lines ) ; 
 
 try { 
 - treeWalker . processFiltered ( file , lines ) ; 
 + treeWalker . processFiltered ( file , fileText ) ; 
 fail ( " file is not compilable , exception is expected " ) ; 
 } 
 catch ( CheckstyleException exception ) { 
 @ @ - 368 , 9 + 383 , 10 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 final List < String > lines = new ArrayList < > ( ) ; 
 lines . add ( " class a % $ # { } " ) ; 
 + final FileText fileText = new FileText ( file , lines ) ; 
 
 try { 
 - treeWalker . processFiltered ( file , lines ) ; 
 + treeWalker . processFiltered ( file , fileText ) ; 
 fail ( " file is not compilable , exception is expected " ) ; 
 } 
 catch ( CheckstyleException exception ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java 
 index 5bab91b . . d221b54 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java 
 @ @ - 42 , 11 + 42 , 13 @ @ public class AbstractFileSetCheckTest { 
 final DummyFileSetCheck check = new DummyFileSetCheck ( ) ; 
 check . configure ( new DefaultConfiguration ( " filesetcheck " ) ) ; 
 check . setFileExtensions ( " tmp " ) ; 
 - final List < String > lines = Arrays . asList ( " key = value " , " ext = tmp " ) ; 
 + final File firstFile = new File ( " inputAbstractFileSetCheck . tmp " ) ; 
 final SortedSet < LocalizedMessage > firstFileMessages = 
 - check . process ( new File ( " inputAbstractFileSetCheck . tmp " ) , Collections . emptyList ( ) ) ; 
 + check . process ( firstFile , new FileText ( firstFile , Collections . emptyList ( ) ) ) ; 
 + final File secondFile = new File ( " inputAbstractFileSetCheck . txt " ) ; 
 + final List < String > lines = Arrays . asList ( " key = value " , " ext = tmp " ) ; 
 final SortedSet < LocalizedMessage > secondFileMessages = 
 - check . process ( new File ( " inputAbstractFileSetCheck . txt " ) , lines ) ; 
 + check . process ( secondFile , new FileText ( secondFile , lines ) ) ; 
 
 assertEquals ( " File should not be empty . " , 
 firstFileMessages . first ( ) . getMessage ( ) ) ; 
 @ @ - 88 , 7 + 90 , 8 @ @ public class AbstractFileSetCheckTest { 
 private static final String MSG _ KEY = " File should not be empty . " ; 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { 
 + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { 
 + final List < String > lines = fileText . getLines ( ) ; 
 if ( lines . isEmpty ( ) ) { 
 log ( 1 , MSG _ KEY ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 index 165e5ac . . d276c67 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 @ @ - 44 , 7 + 44 , 7 @ @ public class FileContentsTest { 
 public void testSinglelineCommentNotIntersect ( ) { 
 / / just to make UT coverage 100 % 
 final FileContents fileContents = new FileContents ( 
 - FileText . fromLines ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; 
 + new FileText ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; 
 fileContents . reportSingleLineComment ( 1 , 2 ) ; 
 assertFalse ( fileContents . hasIntersectionWithComment ( 1 , 0 , 1 , 1 ) ) ; 
 } 
 @ @ - 53 , 7 + 53 , 7 @ @ public class FileContentsTest { 
 public void testSinglelineCommentIntersect ( ) { 
 / / just to make UT coverage 100 % 
 final FileContents fileContents = new FileContents ( 
 - FileText . fromLines ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; 
 + new FileText ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; 
 fileContents . reportSingleLineComment ( 1 , 2 ) ; 
 assertTrue ( fileContents . hasIntersectionWithComment ( 1 , 5 , 1 , 6 ) ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 index 908e042 . . a7cd73c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import static org . junit . Assert . assertTrue ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 - import java . util . List ; 
 import java . util . Locale ; 
 
 import org . junit . Test ; 
 @ @ - 36 , 6 + 35 , 7 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . checks . imports . AvoidStarImportCheck ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ @ - 120 , 7 + 120 , 7 @ @ public class FileSetCheckLifecycleTest 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 + protected void processFiltered ( File file , FileText fileText ) { 
 / / dummy method 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 index 986cea6 . . cdfd276 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 @ @ - 44 , 6 + 44 , 7 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ @ - 187 , 7 + 188 , 8 @ @ public class NewlineAtEndOfFileCheckTest 
 final List < String > lines = new ArrayList < > ( 1 ) ; 
 lines . add ( " txt " ) ; 
 final File impossibleFile = new File ( " " ) ; 
 - final Set < LocalizedMessage > messages = check . process ( impossibleFile , lines ) ; 
 + final FileText fileText = new FileText ( impossibleFile , lines ) ; 
 + final Set < LocalizedMessage > messages = check . process ( impossibleFile , fileText ) ; 
 assertEquals ( " Ammount of messages is unexpected " , 
 1 , messages . size ( ) ) ; 
 final Iterator < LocalizedMessage > iterator = messages . iterator ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 index 90f02f4 . . db17e7b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 @ @ - 42 , 6 + 42 , 7 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 
 / * * 
 @ @ - 113 , 8 + 114 , 9 @ @ public class UniquePropertiesCheckTest extends BaseFileSetCheckTestSupport { 
 final String fileName = 
 getPath ( " InputUniquePropertiesCheckNotExisting . properties " ) ; 
 final File file = new File ( fileName ) ; 
 + final FileText fileText = new FileText ( file , Collections . emptyList ( ) ) ; 
 final SortedSet < LocalizedMessage > messages = 
 - check . process ( file , Collections . emptyList ( ) ) ; 
 + check . process ( file , fileText ) ; 
 assertEquals ( " Wrong messages count : " + messages . size ( ) , 
 1 , messages . size ( ) ) ; 
 final LocalizedMessage message = messages . iterator ( ) . next ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 index 6354901 . . 4100fcd 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 @ @ - 215 , 7 + 215 , 7 @ @ public class AstRegressionTest extends BaseCheckTestSupport { 
 final String expectedContents = new FileText ( expectedFile , System . getProperty ( 
 " file . encoding " , " UTF - 8 " ) ) . getFullText ( ) . toString ( ) . replace ( " \ r " , " " ) ; 
 
 - final FileText actualFileContents = FileText . fromLines ( new File ( " " ) , 
 + final FileText actualFileContents = new FileText ( new File ( " " ) , 
 Arrays . asList ( actualJava . split ( " \ \ n | \ \ r \ \ n ? " ) ) ) ; 
 final String actualContents = AstTreeStringPrinter . printAst ( actualFileContents , 
 withComments ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 index 0211102 . . ccd5dd4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AuditListener ; 
 import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; 
 import com . puppycrawl . tools . checkstyle . api . BeforeExecutionFileFilter ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . Filter ; 
 import com . puppycrawl . tools . checkstyle . api . RootModule ; 
 
 @ @ - 134 , 7 + 135 , 7 @ @ public class ModuleReflectionUtilsTest { 
 
 private static class FileSetModuleClass extends AbstractFileSetCheck { 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { 
 + protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { 
 / / dummy method 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 index b74a614 . . 1ad746a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import java . util . Optional ; 
 import java . util . Set ; 
 import java . util . function . Predicate ; 
 import java . util . stream . Collectors ; 
 - import java . util . stream . Stream ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 @ @ - 102 , 8 + 101 , 8 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 / * * 
 * A set of annotations which allow the check to skip the method from validation . 
 * / 
 - private Set < String > ignoredAnnotations = Stream . of ( " Test " , " Before " , " After " , " BeforeClass " , 
 - " AfterClass " ) . collect ( Collectors . toSet ( ) ) ; 
 + private Set < String > ignoredAnnotations = Arrays . stream ( new String [ ] { " Test " , " Before " , " After " , 
 + " BeforeClass " , " AfterClass " , } ) . collect ( Collectors . toSet ( ) ) ; 
 
 / * * 
 * Sets annotations which allow the check to skip the method from validation . 
 @ @ - 139 , 9 + 138 , 9 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 if ( ! hasJavadocComment ( ast ) 
 + & & canBeOverridden ( ast ) 
 & & ( isNativeMethod ( ast ) 
 | | ! hasEmptyImplementation ( ast ) ) 
 - & & canBeOverridden ( ast ) 
 & & ! hasIgnoredAnnotation ( ast , ignoredAnnotations ) ) { 
 
 final DetailAST classDef = getNearestClassOrEnumDefinition ( ast ) ; 
 @ @ - 182 , 19 + 181 , 17 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 private static boolean hasEmptyImplementation ( DetailAST ast ) { 
 boolean hasEmptyBody = true ; 
 final DetailAST methodImplOpenBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 - if ( methodImplOpenBrace ! = null ) { 
 - final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; 
 - final Predicate < DetailAST > predicate = currentNode - > { 
 - return currentNode ! = null 
 - & & currentNode ! = methodImplCloseBrace 
 - & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) 
 - & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; 
 - } ; 
 - final Optional < DetailAST > methodBody = 
 - TokenUtils . findFirstTokenByPredicate ( methodImplOpenBrace , predicate ) ; 
 - if ( methodBody . isPresent ( ) ) { 
 - hasEmptyBody = false ; 
 - } 
 + final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; 
 + final Predicate < DetailAST > predicate = currentNode - > { 
 + return currentNode ! = null 
 + & & currentNode ! = methodImplCloseBrace 
 + & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) 
 + & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; 
 + } ; 
 + final Optional < DetailAST > methodBody = 
 + TokenUtils . findFirstTokenByPredicate ( methodImplOpenBrace , predicate ) ; 
 + if ( methodBody . isPresent ( ) ) { 
 + hasEmptyBody = false ; 
 } 
 return hasEmptyBody ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java 
 index afa1512 . . 8453755 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java 
 @ @ - 218 , 4 + 218 , 8 @ @ public class InputDesignForExtensionOverridableMethods { 
 
 protected final int foo4 ( int a , int b ) { return a + b ; } 
 } 
 + 
 + public abstract class C { 
 + public abstract void foo1 ( int a ) ; 
 + } 
 }
