BLEU SCORE: 0.0254507234234606

TEST MSG: Issue # 3234 : ClassDataAbstractionCoupling : Add a regex attribut
GENERATED MSG: Added option to Illegal Throws Check due to twitter custom checks , issue # 430

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java <nl> index 946bfaa . . dee5aff 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java <nl> @ @ - 20 , 11 + 20 , 14 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> <nl> import java . util . ArrayDeque ; <nl> + import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . Deque ; <nl> + import java . util . List ; <nl> import java . util . Set ; <nl> import java . util . TreeSet ; <nl> + import java . util . regex . Pattern ; <nl> import java . util . stream . Collectors ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> @ @ - 32 , 6 + 35 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * Base class for coupling calculation . <nl> @ @ - 73 , 6 + 77 , 8 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { <nl> private int max ; <nl> / * * Package of the file we check . * / <nl> private String packageName ; <nl> + / * * User - configured regular expressions to ignore classes . * / <nl> + private List < Pattern > excludeClassesRegexps = new ArrayList < > ( ) ; <nl> <nl> / * * Current context . * / <nl> private Context context = new Context ( " " , 0 , 0 ) ; <nl> @ @ - 83 , 6 + 89 , 7 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { <nl> * / <nl> protected AbstractClassCouplingCheck ( int defaultMax ) { <nl> max = defaultMax ; <nl> + excludeClassesRegexps . add ( CommonUtils . createPattern ( " ^ $ " ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 119 , 6 + 126 , 18 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { <nl> Collections . unmodifiableSet ( Arrays . stream ( excludedClasses ) . collect ( Collectors . toSet ( ) ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Sets user - excluded regular expression of classes to ignore . <nl> + * @ param from array representing regular expressions of classes to ignore . <nl> + * / <nl> + public void setExcludeClassesRegexps ( String . . . from ) { <nl> + excludeClassesRegexps . clear ( ) ; <nl> + excludeClassesRegexps . addAll ( Arrays . asList ( from . clone ( ) ) <nl> + . stream ( ) <nl> + . map ( CommonUtils : : createPattern ) <nl> + . collect ( Collectors . toSet ( ) ) ) ; <nl> + } <nl> + <nl> @ Override <nl> public final void beginTree ( DetailAST ast ) { <nl> packageName = " " ; <nl> @ @ - 293 , 8 + 312 , 17 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { <nl> * @ return true if we should count this class . <nl> * / <nl> private boolean isSignificant ( String candidateClassName ) { <nl> - return ! excludedClasses . contains ( candidateClassName ) <nl> + boolean result = ! excludedClasses . contains ( candidateClassName ) <nl> & & ! candidateClassName . startsWith ( " java . lang . " ) ; <nl> + if ( result ) { <nl> + for ( Pattern pattern : excludeClassesRegexps ) { <nl> + if ( pattern . matcher ( candidateClassName ) . matches ( ) ) { <nl> + result = false ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + return result ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> index eded2d3 . . 557076c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> @ @ - 83 , 4 + 83 , 39 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport <nl> assertEquals ( " Unknown type : ctor [ 0x - 1 ] " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void testRegularExpression ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ClassDataAbstractionCouplingCheck . class ) ; <nl> + <nl> + checkConfig . addAttribute ( " max " , " 0 " ) ; <nl> + checkConfig . addAttribute ( " excludedClasses " , " InnerClass " ) ; <nl> + checkConfig . addAttribute ( " excludeClassesRegexps " , " ^ Hash . * " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 6 : 1 : " + getCheckMessage ( MSG _ KEY , 2 , 0 , " [ AnotherInnerClass , int ] " ) , <nl> + " 7 : 5 : " + getCheckMessage ( MSG _ KEY , 1 , 0 , " [ ArrayList ] " ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testEmptyRegularExpression ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ClassDataAbstractionCouplingCheck . class ) ; <nl> + <nl> + checkConfig . addAttribute ( " max " , " 0 " ) ; <nl> + checkConfig . addAttribute ( " excludedClasses " , " InnerClass " ) ; <nl> + checkConfig . addAttribute ( " excludeClassesRegexps " , " " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 6 : 1 : " + getCheckMessage ( MSG _ KEY , 4 , 0 , " [ AnotherInnerClass , HashMap , HashSet , int ] " ) , <nl> + " 7 : 5 : " + getCheckMessage ( MSG _ KEY , 1 , 0 , " [ ArrayList ] " ) , <nl> + " 27 : 1 : " + getCheckMessage ( MSG _ KEY , 2 , 0 , " [ HashMap , HashSet ] " ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> index 301aa20 . . d8fec41 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> @ @ - 94 , 4 + 94 , 36 @ @ public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { <nl> Assert . assertNotNull ( actual ) ; <nl> Assert . assertArrayEquals ( expected , actual ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testRegularExpression ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ClassFanOutComplexityCheck . class ) ; <nl> + <nl> + checkConfig . addAttribute ( " max " , " 0 " ) ; <nl> + checkConfig . addAttribute ( " excludeClassesRegexps " , " ^ Inner . * " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 6 : 1 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> + " 38 : 1 : " + getCheckMessage ( MSG _ KEY , 1 , 0 ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testEmptyRegularExpression ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ClassFanOutComplexityCheck . class ) ; <nl> + <nl> + checkConfig . addAttribute ( " max " , " 0 " ) ; <nl> + checkConfig . addAttribute ( " excludeClassesRegexps " , " " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 6 : 1 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> + " 38 : 1 : " + getCheckMessage ( MSG _ KEY , 1 , 0 ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / xdocs / config _ metrics . xml b / src / xdocs / config _ metrics . xml <nl> index e8e7768 . . 089c81e 100644 <nl> - - - a / src / xdocs / config _ metrics . xml <nl> + + + b / src / xdocs / config _ metrics . xml <nl> @ @ - 197 , 6 + 197 , 12 @ @ <nl> Set , HashSet , SortedSet , TreeSet , <nl> Map , HashMap , SortedMap , TreeMap < / td > <nl> < / tr > <nl> + < tr > <nl> + < td > excludeClassesRegexps < / td > <nl> + < td > User - configured regular expressions to ignore classes < / td > <nl> + < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > <nl> + < td > < code > " ^ $ " < / code > < / td > <nl> + < / tr > <nl> < / table > <nl> < / subsection > <nl> <nl> @ @ - 216 , 6 + 222 , 45 @ @ <nl> & lt ; property name = & quot ; max & quot ; value = & quot ; 5 & quot ; / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> + <nl> + < p > <nl> + To configure the check with two excluded classes < code > HashMap < / code > and < code > HashSet < / code > : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; ClassDataAbstractionCoupling & quot ; & gt ; <nl> + & lt ; property name = & quot ; excludedClasses & quot ; value = & quot ; HashMap , HashSet & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + <nl> + < p > <nl> + To configure the check with two regular expressions < code > ^ Array . * < / code > and < code > . * Exception $ < / code > : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; ClassDataAbstractionCoupling & quot ; & gt ; <nl> + & lt ; property name = & quot ; excludeClassesRegexps & quot ; value = & quot ; ^ Array . * , . * Exception $ & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + <nl> + < p > <nl> + The following example demonstrates usage of < b > excludedClasses < / b > and < b > excludeClassesRegexps < / b > properties <nl> + < / p > <nl> + < p > <nl> + Expected result is one class < code > Date < / code > <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; ClassDataAbstractionCoupling & quot ; & gt ; <nl> + & lt ; property name = & quot ; excludedClasses & quot ; value = & quot ; ArrayList & quot ; / & gt ; <nl> + & lt ; property name = & quot ; excludeClassesRegexps & quot ; value = & quot ; ^ Hash . * & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < source > <nl> + public class InputClassCoupling { <nl> + public Set _ set = new HashSet ( ) ; <nl> + public Map _ map = new HashMap ( ) ; <nl> + public List & lt ; String & gt ; _ list = new ArrayList & lt ; & gt ; ( ) ; <nl> + public Date _ date = new Date ( ) ; <nl> + } <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " > <nl> @ @ - 294 , 6 + 339 , 12 @ @ <nl> Set , HashSet , SortedSet , TreeSet , <nl> Map , HashMap , SortedMap , TreeMap < / td > <nl> < / tr > <nl> + < tr > <nl> + < td > excludeClassesRegexps < / td > <nl> + < td > User - configured regular expressions to ignore classes < / td > <nl> + < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > <nl> + < td > < code > " ^ $ " < / code > < / td > <nl> + < / tr > <nl> < / table > <nl> < / subsection > <nl>
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java <nl> index 8a36c87 . . 9ea54a0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java <nl> @ @ - 34 , 12 + 34 , 12 @ @ public class RedundantImportCheckTest <nl> createCheckConfig ( RedundantImportCheck . class ) ; <nl> final String [ ] expected = { <nl> " 7 : 1 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . * . " , <nl> - " 8 : 38 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . GlobalProperties . " , <nl> + " 8 : 1 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . InputImportBug . " , <nl> " 10 : 1 : Redundant import from the java . lang package - java . lang . * . " , <nl> " 11 : 1 : Redundant import from the java . lang package - java . lang . String . " , <nl> " 14 : 1 : Duplicate import to line 13 - java . util . List . " , <nl> " 26 : 1 : Duplicate import to line 25 - javax . swing . WindowConstants . * . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator + " InputRedundantImportCheck . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 49cdf5a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java <nl> @ @ - 0 , 0 + 1 , 111 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . imports ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . imports . * ; <nl> + import com . puppycrawl . tools . checkstyle . imports . InputImportBug ; <nl> + import java . io . * ; <nl> + import java . lang . * ; <nl> + import java . lang . String ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . List ; <nl> + import java . util . Iterator ; <nl> + import java . util . Enumeration ; <nl> + import java . util . Arrays ; <nl> + <nl> + import javax . swing . JToolBar ; <nl> + import javax . swing . JToggleButton ; <nl> + import javax . swing . ScrollPaneLayout ; <nl> + import javax . swing . BorderFactory ; <nl> + import static java . io . File . listRoots ; <nl> + <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static java . io . File . createTempFile ; <nl> + import static java . io . File . pathSeparator ; <nl> + <nl> + import java . awt . Component ; <nl> + import java . awt . Graphics2D ; <nl> + import java . awt . HeadlessException ; <nl> + import java . awt . Label ; <nl> + import java . util . Date ; <nl> + import java . util . Calendar ; <nl> + import java . util . BitSet ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . Checker ; <nl> + import com . puppycrawl . tools . checkstyle . CheckerTest ; <nl> + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . Defn ; <nl> + import com . puppycrawl . tools . checkstyle . Input15Extensions ; <nl> + import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; <nl> + import com . puppycrawl . tools . checkstyle . CheckStyleTask ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> + <nl> + / * * <nl> + * Test case for imports <nl> + * Here ' s an import used only by javadoc : { @ link Date } . <nl> + * @ author Oliver Burn <nl> + * @ author lkuehne <nl> + * @ author Michael Studman <nl> + * @ see Calendar Should avoid unused import for Calendar <nl> + * * / <nl> + class InputRedundantImportCheck <nl> + { <nl> + / * * ignore * * / <nl> + private Class mUse1 = null ; <nl> + / * * ignore * * / <nl> + private Class mUse2 = java . io . File . class ; <nl> + / * * ignore * * / <nl> + private Class mUse3 = Iterator [ ] . class ; <nl> + / * * ignore * * / <nl> + private Class mUse4 = java . util . Enumeration [ ] . class ; <nl> + / * * usage of illegal import * * / <nl> + private String ftpClient = null ; <nl> + <nl> + / * * usage via static method , both normal and fully qualified * / <nl> + { <nl> + int [ ] x = { } ; <nl> + Arrays . sort ( x ) ; <nl> + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; <nl> + File [ ] files = listRoots ( ) ; <nl> + } <nl> + <nl> + / * * usage of inner class as type * / <nl> + private JToolBar . Separator mSep = null ; <nl> + <nl> + / * * usage of inner class in Constructor * / <nl> + private Object mUse5 = new Object ( ) ; <nl> + <nl> + / * * usage of inner class in constructor , fully qualified * / <nl> + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; <nl> + <nl> + / * * we use class name as member ' s name . <nl> + * also an inline JavaDoc - only import { @ link Vector linkText } * / <nl> + private int Component ; <nl> + <nl> + / * * <nl> + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } <nl> + * / <nl> + public void Label ( ) { } <nl> + <nl> + / * * <nl> + * Renders to a { @ linkplain Graphics2D graphics context } . <nl> + * @ throws HeadlessException if no graphis environment can be found . <nl> + * @ exception HeadlessException if no graphis environment can be found . <nl> + * / <nl> + public void render ( ) { } <nl> + <nl> + / * * <nl> + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . <nl> + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . <nl> + * <nl> + * @ param param1 with a link { @ link TestClass6 } <nl> + * @ throws TestClass7 when broken <nl> + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } <nl> + * / <nl> + public void aMethodWithManyLinks ( ) { } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java 
 index 946bfaa . . dee5aff 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java 
 @ @ - 20 , 11 + 20 , 14 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 
 import java . util . ArrayDeque ; 
 + import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . Deque ; 
 + import java . util . List ; 
 import java . util . Set ; 
 import java . util . TreeSet ; 
 + import java . util . regex . Pattern ; 
 import java . util . stream . Collectors ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 @ @ - 32 , 6 + 35 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * Base class for coupling calculation . 
 @ @ - 73 , 6 + 77 , 8 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { 
 private int max ; 
 / * * Package of the file we check . * / 
 private String packageName ; 
 + / * * User - configured regular expressions to ignore classes . * / 
 + private List < Pattern > excludeClassesRegexps = new ArrayList < > ( ) ; 
 
 / * * Current context . * / 
 private Context context = new Context ( " " , 0 , 0 ) ; 
 @ @ - 83 , 6 + 89 , 7 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { 
 * / 
 protected AbstractClassCouplingCheck ( int defaultMax ) { 
 max = defaultMax ; 
 + excludeClassesRegexps . add ( CommonUtils . createPattern ( " ^ $ " ) ) ; 
 } 
 
 / * * 
 @ @ - 119 , 6 + 126 , 18 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { 
 Collections . unmodifiableSet ( Arrays . stream ( excludedClasses ) . collect ( Collectors . toSet ( ) ) ) ; 
 } 
 
 + / * * 
 + * Sets user - excluded regular expression of classes to ignore . 
 + * @ param from array representing regular expressions of classes to ignore . 
 + * / 
 + public void setExcludeClassesRegexps ( String . . . from ) { 
 + excludeClassesRegexps . clear ( ) ; 
 + excludeClassesRegexps . addAll ( Arrays . asList ( from . clone ( ) ) 
 + . stream ( ) 
 + . map ( CommonUtils : : createPattern ) 
 + . collect ( Collectors . toSet ( ) ) ) ; 
 + } 
 + 
 @ Override 
 public final void beginTree ( DetailAST ast ) { 
 packageName = " " ; 
 @ @ - 293 , 8 + 312 , 17 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { 
 * @ return true if we should count this class . 
 * / 
 private boolean isSignificant ( String candidateClassName ) { 
 - return ! excludedClasses . contains ( candidateClassName ) 
 + boolean result = ! excludedClasses . contains ( candidateClassName ) 
 & & ! candidateClassName . startsWith ( " java . lang . " ) ; 
 + if ( result ) { 
 + for ( Pattern pattern : excludeClassesRegexps ) { 
 + if ( pattern . matcher ( candidateClassName ) . matches ( ) ) { 
 + result = false ; 
 + break ; 
 + } 
 + } 
 + } 
 + return result ; 
 } 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 index eded2d3 . . 557076c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 @ @ - 83 , 4 + 83 , 39 @ @ public class ClassDataAbstractionCouplingCheckTest extends BaseCheckTestSupport 
 assertEquals ( " Unknown type : ctor [ 0x - 1 ] " , ex . getMessage ( ) ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void testRegularExpression ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ClassDataAbstractionCouplingCheck . class ) ; 
 + 
 + checkConfig . addAttribute ( " max " , " 0 " ) ; 
 + checkConfig . addAttribute ( " excludedClasses " , " InnerClass " ) ; 
 + checkConfig . addAttribute ( " excludeClassesRegexps " , " ^ Hash . * " ) ; 
 + 
 + final String [ ] expected = { 
 + " 6 : 1 : " + getCheckMessage ( MSG _ KEY , 2 , 0 , " [ AnotherInnerClass , int ] " ) , 
 + " 7 : 5 : " + getCheckMessage ( MSG _ KEY , 1 , 0 , " [ ArrayList ] " ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testEmptyRegularExpression ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ClassDataAbstractionCouplingCheck . class ) ; 
 + 
 + checkConfig . addAttribute ( " max " , " 0 " ) ; 
 + checkConfig . addAttribute ( " excludedClasses " , " InnerClass " ) ; 
 + checkConfig . addAttribute ( " excludeClassesRegexps " , " " ) ; 
 + 
 + final String [ ] expected = { 
 + " 6 : 1 : " + getCheckMessage ( MSG _ KEY , 4 , 0 , " [ AnotherInnerClass , HashMap , HashSet , int ] " ) , 
 + " 7 : 5 : " + getCheckMessage ( MSG _ KEY , 1 , 0 , " [ ArrayList ] " ) , 
 + " 27 : 1 : " + getCheckMessage ( MSG _ KEY , 2 , 0 , " [ HashMap , HashSet ] " ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 index 301aa20 . . d8fec41 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 @ @ - 94 , 4 + 94 , 36 @ @ public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { 
 Assert . assertNotNull ( actual ) ; 
 Assert . assertArrayEquals ( expected , actual ) ; 
 } 
 + 
 + @ Test 
 + public void testRegularExpression ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ClassFanOutComplexityCheck . class ) ; 
 + 
 + checkConfig . addAttribute ( " max " , " 0 " ) ; 
 + checkConfig . addAttribute ( " excludeClassesRegexps " , " ^ Inner . * " ) ; 
 + 
 + final String [ ] expected = { 
 + " 6 : 1 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 + " 38 : 1 : " + getCheckMessage ( MSG _ KEY , 1 , 0 ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testEmptyRegularExpression ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ClassFanOutComplexityCheck . class ) ; 
 + 
 + checkConfig . addAttribute ( " max " , " 0 " ) ; 
 + checkConfig . addAttribute ( " excludeClassesRegexps " , " " ) ; 
 + 
 + final String [ ] expected = { 
 + " 6 : 1 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 + " 38 : 1 : " + getCheckMessage ( MSG _ KEY , 1 , 0 ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " InputClassCoupling . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / xdocs / config _ metrics . xml b / src / xdocs / config _ metrics . xml 
 index e8e7768 . . 089c81e 100644 
 - - - a / src / xdocs / config _ metrics . xml 
 + + + b / src / xdocs / config _ metrics . xml 
 @ @ - 197 , 6 + 197 , 12 @ @ 
 Set , HashSet , SortedSet , TreeSet , 
 Map , HashMap , SortedMap , TreeMap < / td > 
 < / tr > 
 + < tr > 
 + < td > excludeClassesRegexps < / td > 
 + < td > User - configured regular expressions to ignore classes < / td > 
 + < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > 
 + < td > < code > " ^ $ " < / code > < / td > 
 + < / tr > 
 < / table > 
 < / subsection > 
 
 @ @ - 216 , 6 + 222 , 45 @ @ 
 & lt ; property name = & quot ; max & quot ; value = & quot ; 5 & quot ; / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 + 
 + < p > 
 + To configure the check with two excluded classes < code > HashMap < / code > and < code > HashSet < / code > : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; ClassDataAbstractionCoupling & quot ; & gt ; 
 + & lt ; property name = & quot ; excludedClasses & quot ; value = & quot ; HashMap , HashSet & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + 
 + < p > 
 + To configure the check with two regular expressions < code > ^ Array . * < / code > and < code > . * Exception $ < / code > : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; ClassDataAbstractionCoupling & quot ; & gt ; 
 + & lt ; property name = & quot ; excludeClassesRegexps & quot ; value = & quot ; ^ Array . * , . * Exception $ & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + 
 + < p > 
 + The following example demonstrates usage of < b > excludedClasses < / b > and < b > excludeClassesRegexps < / b > properties 
 + < / p > 
 + < p > 
 + Expected result is one class < code > Date < / code > 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; ClassDataAbstractionCoupling & quot ; & gt ; 
 + & lt ; property name = & quot ; excludedClasses & quot ; value = & quot ; ArrayList & quot ; / & gt ; 
 + & lt ; property name = & quot ; excludeClassesRegexps & quot ; value = & quot ; ^ Hash . * & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < source > 
 + public class InputClassCoupling { 
 + public Set _ set = new HashSet ( ) ; 
 + public Map _ map = new HashMap ( ) ; 
 + public List & lt ; String & gt ; _ list = new ArrayList & lt ; & gt ; ( ) ; 
 + public Date _ date = new Date ( ) ; 
 + } 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Example of Usage " > 
 @ @ - 294 , 6 + 339 , 12 @ @ 
 Set , HashSet , SortedSet , TreeSet , 
 Map , HashMap , SortedMap , TreeMap < / td > 
 < / tr > 
 + < tr > 
 + < td > excludeClassesRegexps < / td > 
 + < td > User - configured regular expressions to ignore classes < / td > 
 + < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > 
 + < td > < code > " ^ $ " < / code > < / td > 
 + < / tr > 
 < / table > 
 < / subsection > 


NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java 
 index 8a36c87 . . 9ea54a0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheckTest . java 
 @ @ - 34 , 12 + 34 , 12 @ @ public class RedundantImportCheckTest 
 createCheckConfig ( RedundantImportCheck . class ) ; 
 final String [ ] expected = { 
 " 7 : 1 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . * . " , 
 - " 8 : 38 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . GlobalProperties . " , 
 + " 8 : 1 : Redundant import from the same package - com . puppycrawl . tools . checkstyle . imports . InputImportBug . " , 
 " 10 : 1 : Redundant import from the java . lang package - java . lang . * . " , 
 " 11 : 1 : Redundant import from the java . lang package - java . lang . String . " , 
 " 14 : 1 : Duplicate import to line 13 - java . util . List . " , 
 " 26 : 1 : Duplicate import to line 25 - javax . swing . WindowConstants . * . " , 
 } ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator + " InputRedundantImportCheck . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java 
 new file mode 100644 
 index 0000000 . . 49cdf5a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputRedundantImportCheck . java 
 @ @ - 0 , 0 + 1 , 111 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . imports ; 
 + 
 + import com . puppycrawl . tools . checkstyle . imports . * ; 
 + import com . puppycrawl . tools . checkstyle . imports . InputImportBug ; 
 + import java . io . * ; 
 + import java . lang . * ; 
 + import java . lang . String ; 
 + 
 + import java . util . List ; 
 + import java . util . List ; 
 + import java . util . Iterator ; 
 + import java . util . Enumeration ; 
 + import java . util . Arrays ; 
 + 
 + import javax . swing . JToolBar ; 
 + import javax . swing . JToggleButton ; 
 + import javax . swing . ScrollPaneLayout ; 
 + import javax . swing . BorderFactory ; 
 + import static java . io . File . listRoots ; 
 + 
 + import static javax . swing . WindowConstants . * ; 
 + import static javax . swing . WindowConstants . * ; 
 + import static java . io . File . createTempFile ; 
 + import static java . io . File . pathSeparator ; 
 + 
 + import java . awt . Component ; 
 + import java . awt . Graphics2D ; 
 + import java . awt . HeadlessException ; 
 + import java . awt . Label ; 
 + import java . util . Date ; 
 + import java . util . Calendar ; 
 + import java . util . BitSet ; 
 + 
 + import com . puppycrawl . tools . checkstyle . Checker ; 
 + import com . puppycrawl . tools . checkstyle . CheckerTest ; 
 + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . Defn ; 
 + import com . puppycrawl . tools . checkstyle . Input15Extensions ; 
 + import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; 
 + import com . puppycrawl . tools . checkstyle . CheckStyleTask ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 + 
 + / * * 
 + * Test case for imports 
 + * Here ' s an import used only by javadoc : { @ link Date } . 
 + * @ author Oliver Burn 
 + * @ author lkuehne 
 + * @ author Michael Studman 
 + * @ see Calendar Should avoid unused import for Calendar 
 + * * / 
 + class InputRedundantImportCheck 
 + { 
 + / * * ignore * * / 
 + private Class mUse1 = null ; 
 + / * * ignore * * / 
 + private Class mUse2 = java . io . File . class ; 
 + / * * ignore * * / 
 + private Class mUse3 = Iterator [ ] . class ; 
 + / * * ignore * * / 
 + private Class mUse4 = java . util . Enumeration [ ] . class ; 
 + / * * usage of illegal import * * / 
 + private String ftpClient = null ; 
 + 
 + / * * usage via static method , both normal and fully qualified * / 
 + { 
 + int [ ] x = { } ; 
 + Arrays . sort ( x ) ; 
 + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; 
 + File [ ] files = listRoots ( ) ; 
 + } 
 + 
 + / * * usage of inner class as type * / 
 + private JToolBar . Separator mSep = null ; 
 + 
 + / * * usage of inner class in Constructor * / 
 + private Object mUse5 = new Object ( ) ; 
 + 
 + / * * usage of inner class in constructor , fully qualified * / 
 + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; 
 + 
 + / * * we use class name as member ' s name . 
 + * also an inline JavaDoc - only import { @ link Vector linkText } * / 
 + private int Component ; 
 + 
 + / * * 
 + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } 
 + * / 
 + public void Label ( ) { } 
 + 
 + / * * 
 + * Renders to a { @ linkplain Graphics2D graphics context } . 
 + * @ throws HeadlessException if no graphis environment can be found . 
 + * @ exception HeadlessException if no graphis environment can be found . 
 + * / 
 + public void render ( ) { } 
 + 
 + / * * 
 + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . 
 + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . 
 + * 
 + * @ param param1 with a link { @ link TestClass6 } 
 + * @ throws TestClass7 when broken 
 + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } 
 + * / 
 + public void aMethodWithManyLinks ( ) { } 
 + } 
 \ No newline at end of file
