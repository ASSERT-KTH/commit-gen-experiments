BLEU SCORE: 0.09469167282754097

TEST MSG: Issue # 3545 : Remove LocalizedMessages class
GENERATED MSG: Issue # 877 : fix third part of JUnitTestsShouldIncludeAssert violations

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index 49187e6 . . b85aaa6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 139 , 7 + 139 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> public void finishLocalSetup ( ) { <nl> final DefaultContext checkContext = new DefaultContext ( ) ; <nl> checkContext . add ( " classLoader " , classLoader ) ; <nl> - checkContext . add ( " messages " , getMessageCollector ( ) ) ; <nl> checkContext . add ( " severity " , getSeverity ( ) ) ; <nl> checkContext . add ( " tabWidth " , String . valueOf ( tabWidth ) ) ; <nl> <nl> @ @ - 331 , 6 + 330 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> <nl> for ( AbstractCheck check : checks ) { <nl> check . setFileContents ( contents ) ; <nl> + check . clearMessages ( ) ; <nl> check . beginTree ( rootAST ) ; <nl> } <nl> } <nl> @ @ - 352 , 6 + 352 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> <nl> for ( AbstractCheck check : checks ) { <nl> check . finishTree ( rootAST ) ; <nl> + addMessages ( check . getMessages ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java <nl> index 110ee37 . . 72f9839 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> import java . util . Collections ; <nl> import java . util . HashSet ; <nl> import java . util . Set ; <nl> + import java . util . SortedSet ; <nl> + import java . util . TreeSet ; <nl> <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ @ - 39 , 12 + 41 , 12 @ @ public abstract class AbstractCheck extends AbstractViolationReporter { <nl> / * * The tokens the check is interested in . * / <nl> private final Set < String > tokens = new HashSet < > ( ) ; <nl> <nl> + / * * The sorted set for collecting messages . * / <nl> + private final SortedSet < LocalizedMessage > messages = new TreeSet < > ( ) ; <nl> + <nl> / * * The current file contents . * / <nl> private FileContents fileContents ; <nl> <nl> - / * * The object for collecting messages . * / <nl> - private LocalizedMessages messages ; <nl> - <nl> / * * The tab width for column reporting . * / <nl> private int tabWidth = DEFAULT _ TAB _ WIDTH ; <nl> <nl> @ @ - 104 , 11 + 106 , 18 @ @ public abstract class AbstractCheck extends AbstractViolationReporter { <nl> } <nl> <nl> / * * <nl> - * Set the global object used to collect messages . <nl> - * @ param messages the messages to log with <nl> + * Returns the sorted set of { @ link LocalizedMessage } . <nl> + * @ return the sorted set of { @ link LocalizedMessage } . <nl> + * / <nl> + public SortedSet < LocalizedMessage > getMessages ( ) { <nl> + return new TreeSet < > ( messages ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Clears the sorted set of { @ link LocalizedMessage } of the check . <nl> * / <nl> - public final void setMessages ( LocalizedMessages messages ) { <nl> - this . messages = messages ; <nl> + public final void clearMessages ( ) { <nl> + messages . clear ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> index 294c73a . . 8381ac4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . io . File ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> import java . util . SortedSet ; <nl> + import java . util . TreeSet ; <nl> <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ @ - 37 , 7 + 38 , 7 @ @ public abstract class AbstractFileSetCheck <nl> implements FileSetCheck { <nl> <nl> / * * Collects the error messages . * / <nl> - private final LocalizedMessages messageCollector = new LocalizedMessages ( ) ; <nl> + private final SortedSet < LocalizedMessage > messageCollector = new TreeSet < > ( ) ; <nl> <nl> / * * The dispatcher errors are fired to . * / <nl> private MessageDispatcher messageDispatcher ; <nl> @ @ - 72 , 12 + 73 , 12 @ @ public abstract class AbstractFileSetCheck <nl> @ Override <nl> public final SortedSet < LocalizedMessage > process ( File file , List < String > lines ) <nl> throws CheckstyleException { <nl> - messageCollector . reset ( ) ; <nl> + messageCollector . clear ( ) ; <nl> / / Process only what interested in <nl> if ( CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { <nl> processFiltered ( file , lines ) ; <nl> } <nl> - return messageCollector . getMessages ( ) ; <nl> + return new TreeSet < > ( messageCollector ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 134 , 14 + 135 , 11 @ @ public abstract class AbstractFileSetCheck <nl> } <nl> <nl> / * * <nl> - * Returns the collector for violation messages . <nl> - * Subclasses can use the collector to find out the violation <nl> - * messages to fire via the message dispatcher . <nl> - * <nl> - * @ return the collector for localized messages . <nl> + * Adds the sorted set of { @ link LocalizedMessage } to the message collector . <nl> + * @ param messages the sorted set of { @ link LocalizedMessage } . <nl> * / <nl> - protected final LocalizedMessages getMessageCollector ( ) { <nl> - return messageCollector ; <nl> + protected final void addMessages ( SortedSet < LocalizedMessage > messages ) { <nl> + messageCollector . addAll ( messages ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 171 , 9 + 169 , 8 @ @ public abstract class AbstractFileSetCheck <nl> * @ param fileName the audited file <nl> * / <nl> protected final void fireErrors ( String fileName ) { <nl> - final SortedSet < LocalizedMessage > errors = messageCollector <nl> - . getMessages ( ) ; <nl> - messageCollector . reset ( ) ; <nl> + final SortedSet < LocalizedMessage > errors = new TreeSet < > ( messageCollector ) ; <nl> + messageCollector . clear ( ) ; <nl> getMessageDispatcher ( ) . fireErrors ( fileName , errors ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java <nl> deleted file mode 100644 <nl> index 985018a . . 0000000 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java <nl> + + + / dev / null <nl> @ @ - 1 , 62 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . api ; <nl> - <nl> - import java . util . Set ; <nl> - import java . util . SortedSet ; <nl> - import java . util . TreeSet ; <nl> - <nl> - / * * <nl> - * Collection of messages . <nl> - * @ author Oliver Burn <nl> - * / <nl> - public final class LocalizedMessages { <nl> - / * * Contains the messages logged . * * / <nl> - private final Set < LocalizedMessage > messages = new TreeSet < > ( ) ; <nl> - <nl> - / * * <nl> - * Gets the logged messages . <nl> - * @ return the logged messages <nl> - * / <nl> - public SortedSet < LocalizedMessage > getMessages ( ) { <nl> - return new TreeSet < > ( messages ) ; <nl> - } <nl> - <nl> - / * * Reset the object . * * / <nl> - public void reset ( ) { <nl> - messages . clear ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Logs a message to be reported . <nl> - * @ param message the message to log <nl> - * * / <nl> - public void add ( LocalizedMessage message ) { <nl> - messages . add ( message ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Gets the number of messages . <nl> - * @ return the number of messages <nl> - * / <nl> - public int size ( ) { <nl> - return messages . size ( ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java <nl> index c12400c . . 3b7c760 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java <nl> @ @ - 74 , 12 + 74 , 10 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { <nl> config . addMessage ( " msgKey " , " This is a custom message . " ) ; <nl> emptyCheck . configure ( config ) ; <nl> <nl> - final LocalizedMessages collector = new LocalizedMessages ( ) ; <nl> - emptyCheck . setMessages ( collector ) ; <nl> - <nl> emptyCheck . log ( 0 , " msgKey " ) ; <nl> <nl> - final SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; <nl> + final SortedSet < LocalizedMessage > messages = emptyCheck . getMessages ( ) ; <nl> + <nl> assertEquals ( " Amount of messages differs from expected " , <nl> 1 , messages . size ( ) ) ; <nl> assertEquals ( " Message differs from expected " , <nl> @ @ - 93 , 12 + 91 , 9 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { <nl> config . addMessage ( " msgKey " , " This is a custom message with { 0 } . " ) ; <nl> emptyCheck . configure ( config ) ; <nl> <nl> - final LocalizedMessages collector = new LocalizedMessages ( ) ; <nl> - emptyCheck . setMessages ( collector ) ; <nl> - <nl> emptyCheck . log ( 0 , " msgKey " , " TestParam " ) ; <nl> + final SortedSet < LocalizedMessage > messages = emptyCheck . getMessages ( ) ; <nl> <nl> - final SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; <nl> assertEquals ( " Amount of messages differs from expected " , <nl> 1 , messages . size ( ) ) ; <nl> <nl> @ @ - 113 , 9 + 108 , 6 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { <nl> config . addMessage ( " msgKey " , " This is a custom message { 0 . " ) ; <nl> emptyCheck . configure ( config ) ; <nl> <nl> - final LocalizedMessages collector = new LocalizedMessages ( ) ; <nl> - emptyCheck . setMessages ( collector ) ; <nl> - <nl> try { <nl> emptyCheck . log ( 0 , " msgKey " , " TestParam " ) ; <nl> fail ( " exception expected " ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessagesTest . java <nl> deleted file mode 100644 <nl> index 71e2af6 . . 0000000 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessagesTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 38 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . api ; <nl> - <nl> - import org . junit . Assert ; <nl> - import org . junit . Test ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . Definitions ; <nl> - <nl> - public class LocalizedMessagesTest { <nl> - @ Test <nl> - public void testSize ( ) { <nl> - / / Just to satisfy code coverage <nl> - final LocalizedMessages messages = new LocalizedMessages ( ) ; <nl> - messages . add ( new LocalizedMessage ( 0 , <nl> - Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , <nl> - new String [ ] { " args " } , null , getClass ( ) , <nl> - null ) ) ; <nl> - Assert . assertEquals ( 1 , messages . size ( ) ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> index ad72d2d . . f0e96d4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import static org . junit . Assert . assertEquals ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . util . SortedSet ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 34 , 7 + 35 , 7 @ @ import org . junit . Test ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; <nl> + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class DeclarationOrderCheckTest <nl> @ @ - 148 , 14 + 149 , 16 @ @ public class DeclarationOrderCheckTest <nl> method . setNextSibling ( ctor ) ; <nl> <nl> final DeclarationOrderCheck check = new DeclarationOrderCheck ( ) ; <nl> - final LocalizedMessages messages = new LocalizedMessages ( ) ; <nl> - check . setMessages ( messages ) ; <nl> <nl> check . visitToken ( method ) ; <nl> - assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; <nl> + final SortedSet < LocalizedMessage > messages1 = check . getMessages ( ) ; <nl> + <nl> + assertEquals ( " No exception messages expected " , 0 , messages1 . size ( ) ) ; <nl> <nl> check . visitToken ( ctor ) ; <nl> - assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; <nl> + final SortedSet < LocalizedMessage > messages2 = check . getMessages ( ) ; <nl> + <nl> + assertEquals ( " No exception messages expected " , 0 , messages2 . size ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 167 , 10 + 170 , 10 @ @ public class DeclarationOrderCheckTest <nl> parent . setFirstChild ( array ) ; <nl> <nl> final DeclarationOrderCheck check = new DeclarationOrderCheck ( ) ; <nl> - final LocalizedMessages messages = new LocalizedMessages ( ) ; <nl> - check . setMessages ( messages ) ; <nl> <nl> check . visitToken ( array ) ; <nl> + final SortedSet < LocalizedMessage > messages = check . getMessages ( ) ; <nl> + <nl> assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> index 9dfbdea . . cb09b9f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalInstantiation <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . util . SortedSet ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 33 , 7 + 34 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> - import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ @ - 164 , 21 + 164 , 23 @ @ public class IllegalInstantiationCheckTest <nl> final File inputFile = new File ( getNonCompilablePath ( " InputIllegalInstantiationLang . java " ) ) ; <nl> check . setFileContents ( new FileContents ( new FileText ( inputFile , " UTF - 8 " ) ) ) ; <nl> check . configure ( createCheckConfig ( IllegalInstantiationCheck . class ) ) ; <nl> - final LocalizedMessages messages = new LocalizedMessages ( ) ; <nl> - check . setMessages ( messages ) ; <nl> check . setClasses ( " java . lang . Boolean " ) ; <nl> <nl> check . visitToken ( newAst ) ; <nl> - Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; <nl> + final SortedSet < LocalizedMessage > messages1 = check . getMessages ( ) ; <nl> + <nl> + Assert . assertEquals ( " No exception messages expected " , 0 , messages1 . size ( ) ) ; <nl> <nl> check . finishTree ( newAst ) ; <nl> + final SortedSet < LocalizedMessage > messages2 = check . getMessages ( ) ; <nl> + <nl> final LocalizedMessage addExceptionMessage = new LocalizedMessage ( 0 , <nl> " com . puppycrawl . tools . checkstyle . checks . coding . messages " , " instantiation . avoid " , <nl> new String [ ] { " java . lang . Boolean " } , null , <nl> getClass ( ) , null ) ; <nl> Assert . assertEquals ( " Invalid exception message " , <nl> addExceptionMessage . getMessage ( ) , <nl> - messages . getMessages ( ) . first ( ) . getMessage ( ) ) ; <nl> + messages2 . first ( ) . getMessage ( ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index 9870b99 . . f680ed1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck . MSG <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . util . SortedSet ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 32 , 7 + 33 , 7 @ @ import antlr . CommonHiddenStreamToken ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; <nl> + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ @ - 153 , 13 + 154 , 13 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testDefaultSwitch ( ) { <nl> final RequireThisCheck check = new RequireThisCheck ( ) ; <nl> - final LocalizedMessages messages = new LocalizedMessages ( ) ; <nl> - check . setMessages ( messages ) ; <nl> <nl> final DetailAST ast = new DetailAST ( ) ; <nl> ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . ENUM , " ENUM " ) ) ; <nl> <nl> check . visitToken ( ast ) ; <nl> + final SortedSet < LocalizedMessage > messages = check . getMessages ( ) ; <nl> + <nl> Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> index 7705df2 . . 955f2e8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . metrics . NPathComplexityChec <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . util . SortedSet ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 31 , 7 + 32 , 7 @ @ import antlr . CommonHiddenStreamToken ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; <nl> + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ @ - 171 , 17 + 172 , 18 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testDefaultHooks ( ) { <nl> final NPathComplexityCheck npathComplexityCheckObj = new NPathComplexityCheck ( ) ; <nl> - final LocalizedMessages messages = new LocalizedMessages ( ) ; <nl> - npathComplexityCheckObj . setMessages ( messages ) ; <nl> - <nl> final DetailAST ast = new DetailAST ( ) ; <nl> ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . INTERFACE _ DEF , " interface " ) ) ; <nl> <nl> npathComplexityCheckObj . visitToken ( ast ) ; <nl> - Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; <nl> + final SortedSet < LocalizedMessage > messages1 = npathComplexityCheckObj . getMessages ( ) ; <nl> + <nl> + Assert . assertEquals ( " No exception messages expected " , 0 , messages1 . size ( ) ) ; <nl> <nl> npathComplexityCheckObj . leaveToken ( ast ) ; <nl> - Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; <nl> + final SortedSet < LocalizedMessage > messages2 = npathComplexityCheckObj . getMessages ( ) ; <nl> + <nl> + Assert . assertEquals ( " No exception messages expected " , 0 , messages2 . size ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 202 , 15 + 204 , 18 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { <nl> astTernary . addChild ( astTernaryTrue ) ; <nl> <nl> final NPathComplexityCheck npathComplexityCheckObj = new NPathComplexityCheck ( ) ; <nl> - final LocalizedMessages messages = new LocalizedMessages ( ) ; <nl> - npathComplexityCheckObj . setMessages ( messages ) ; <nl> <nl> / / visiting first ast , set expressionSpatialRange to [ 2 , 2 - 4 , 4 ] <nl> npathComplexityCheckObj . visitToken ( astIf ) ; <nl> - Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; <nl> + final SortedSet < LocalizedMessage > messages1 = npathComplexityCheckObj . getMessages ( ) ; <nl> + <nl> + Assert . assertEquals ( " No exception messages expected " , 0 , messages1 . size ( ) ) ; <nl> + <nl> / / visiting ternary , it lies before expressionSpatialRange <nl> npathComplexityCheckObj . visitToken ( astTernary ) ; <nl> - Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; <nl> + final SortedSet < LocalizedMessage > messages2 = npathComplexityCheckObj . getMessages ( ) ; <nl> + <nl> + Assert . assertEquals ( " No exception messages expected " , 0 , messages2 . size ( ) ) ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 17dc138 . . 3aa1419 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1949 , 7 + 1949 , 7 @ @ <nl> < ! - - till https : / / github . com / hcoles / pitest / issues / 353 - - > <nl> < param > fillShortToFullModuleNamesMap < / param > <nl> < / excludedMethods > <nl> - < mutationThreshold > 84 < / mutationThreshold > <nl> + < mutationThreshold > 89 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> index e8c2e45 . . 94f53d4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> @ @ - 23 , 15 + 23 , 22 @ @ import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> import static org . mockito . Matchers . any ; <nl> + import static org . mockito . Mockito . times ; <nl> + import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> + import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . when ; <nl> <nl> import java . io . BufferedInputStream ; <nl> import java . io . File ; <nl> + import java . io . FileInputStream ; <nl> + import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> + import java . io . ObjectOutputStream ; <nl> import java . io . Serializable ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> @ @ - 48 , 16 + 55 , 20 @ @ import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . TemporaryFolder ; <nl> import org . junit . runner . RunWith ; <nl> + import org . mockito . Matchers ; <nl> import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> import com . google . common . io . ByteStreams ; <nl> + import com . google . common . io . Closeables ; <nl> + import com . google . common . io . Flushables ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ RunWith ( PowerMockRunner . class ) <nl> - @ PrepareForTest ( { PropertyCacheFile . class , ByteStreams . class , CommonUtils . class } ) <nl> + @ PrepareForTest ( { PropertyCacheFile . class , ByteStreams . class , <nl> + CommonUtils . class , Closeables . class , Flushables . class } ) <nl> public class PropertyCacheFileTest { <nl> <nl> @ Rule <nl> @ @ - 92 , 6 + 103 , 61 @ @ public class PropertyCacheFileTest { <nl> } <nl> <nl> @ Test <nl> + public void testResetIfFileDoesNotExist ( ) throws IOException { <nl> + final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> + final PropertyCacheFile cache = new PropertyCacheFile ( config , " fileDoesNotExist . txt " ) ; <nl> + <nl> + cache . load ( ) ; <nl> + <nl> + assertNotNull ( cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCloseAndFlushOutputStreamAfterCreatingHashCode ( ) throws IOException { <nl> + mockStatic ( Closeables . class ) ; <nl> + doNothing ( ) . when ( Closeables . class ) ; <nl> + Closeables . close ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + mockStatic ( Flushables . class ) ; <nl> + doNothing ( ) . when ( Flushables . class ) ; <nl> + Flushables . flush ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + <nl> + final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> + final PropertyCacheFile cache = new PropertyCacheFile ( config , " fileDoesNotExist . txt " ) ; <nl> + cache . load ( ) ; <nl> + <nl> + verifyStatic ( times ( 1 ) ) ; <nl> + <nl> + Closeables . close ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + verifyStatic ( times ( 1 ) ) ; <nl> + Flushables . flush ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testPopulateDetails ( ) throws IOException { <nl> + mockStatic ( Closeables . class ) ; <nl> + doNothing ( ) . when ( Closeables . class ) ; <nl> + Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; <nl> + <nl> + final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> + final PropertyCacheFile cache = new PropertyCacheFile ( config , <nl> + " src / test / resources / com / puppycrawl / tools / checkstyle / cache . tmp " ) ; <nl> + cache . load ( ) ; <nl> + <nl> + final String hash = cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ; <nl> + assertNotNull ( hash ) ; <nl> + assertNull ( cache . get ( " key " ) ) ; <nl> + <nl> + cache . load ( ) ; <nl> + <nl> + assertEquals ( hash , cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; <nl> + assertEquals ( " value " , cache . get ( " key " ) ) ; <nl> + assertNotNull ( cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; <nl> + <nl> + verifyStatic ( times ( 2 ) ) ; <nl> + Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testConfigHashOnReset ( ) throws IOException { <nl> final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> final String filePath = temporaryFolder . newFile ( ) . getPath ( ) ; <nl> @ @ - 129 , 6 + 195 , 23 @ @ public class PropertyCacheFileTest { <nl> assertFalse ( cache . isInCache ( " myFile " , 1 ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testExternalResourseIsSavedInCache ( ) throws IOException { <nl> + final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> + final String filePath = temporaryFolder . newFile ( ) . getPath ( ) ; <nl> + final PropertyCacheFile cache = new PropertyCacheFile ( config , filePath ) ; <nl> + <nl> + cache . load ( ) ; <nl> + <nl> + final Set < String > resources = new HashSet < > ( ) ; <nl> + final String pathToResource = <nl> + " src / test / resources / com / puppycrawl / tools / checkstyle / externalResourse . tmp " ; <nl> + resources . add ( pathToResource ) ; <nl> + cache . putExternalResources ( resources ) ; <nl> + <nl> + assertFalse ( cache . get ( " module - resource * ? : " + pathToResource ) . isEmpty ( ) ) ; <nl> + } <nl> + <nl> / * * <nl> * This SuppressWarning ( " unchecked " ) required to suppress <nl> * " Unchecked generics array creation for varargs parameter " during mock <nl> @ @ - 165 , 6 + 248 , 28 @ @ public class PropertyCacheFileTest { <nl> } <nl> <nl> @ Test <nl> + public void testFlushAndCloseCacheFileOutputStream ( ) throws IOException { <nl> + mockStatic ( Closeables . class ) ; <nl> + doNothing ( ) . when ( Closeables . class ) ; <nl> + Closeables . close ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + mockStatic ( Flushables . class ) ; <nl> + doNothing ( ) . when ( Flushables . class ) ; <nl> + Flushables . flush ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + <nl> + final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> + final PropertyCacheFile cache = new PropertyCacheFile ( config , <nl> + temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + <nl> + cache . put ( " CheckedFileName . java " , System . currentTimeMillis ( ) ) ; <nl> + cache . persist ( ) ; <nl> + <nl> + verifyStatic ( times ( 1 ) ) ; <nl> + Closeables . close ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + verifyStatic ( times ( 1 ) ) ; <nl> + Flushables . flush ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testCacheDirectoryDoesNotExistAndShouldBeCreated ( ) throws IOException { <nl> final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> final String filePath = String . format ( Locale . getDefault ( ) , " % s % 2 $ stemp % 2 $ scache . temp " , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> index 1317b95 . . 0998a10 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> @ @ - 25 , 11 + 25 , 14 @ @ import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> import static org . mockito . Mockito . when ; <nl> + import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . net . URL ; <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ @ - 41 , 13 + 44 , 18 @ @ import org . apache . tools . ant . types . Path ; <nl> import org . apache . tools . ant . types . Reference ; <nl> import org . apache . tools . ant . types . resources . FileResource ; <nl> import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> import org . powermock . api . mockito . PowerMockito ; <nl> + import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> + import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> import com . puppycrawl . tools . checkstyle . TestRootModuleChecker ; <nl> import com . puppycrawl . tools . checkstyle . XMLLogger ; <nl> <nl> + @ RunWith ( PowerMockRunner . class ) <nl> + @ PrepareForTest ( CheckstyleAntTask . class ) <nl> public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> <nl> private static final String FLAWLESS _ INPUT _ DIR = " ant / checkstyleanttask / flawless / " ; <nl> @ @ - 486 , 6 + 494 , 44 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> } <nl> } <nl> <nl> + @ Test <nl> + public final void testExecuteLogOutput ( ) throws Exception { <nl> + final CheckstyleAntTaskLogStub antTask = new CheckstyleAntTaskLogStub ( ) ; <nl> + final URL url = new File ( getPath ( CONFIG _ FILE ) ) . toURI ( ) . toURL ( ) ; <nl> + antTask . setProject ( new Project ( ) ) ; <nl> + antTask . setConfigURL ( url ) ; <nl> + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + <nl> + mockStatic ( System . class ) ; <nl> + when ( System . currentTimeMillis ( ) ) . thenReturn ( 1L ) ; <nl> + <nl> + antTask . execute ( ) ; <nl> + <nl> + final List < MessageLevelPair > expectedList = Arrays . asList ( <nl> + new MessageLevelPair ( " checkstyle version " , Project . MSG _ VERBOSE ) , <nl> + new MessageLevelPair ( " compiled on " , Project . MSG _ VERBOSE ) , <nl> + new MessageLevelPair ( " Adding standalone file for audit " , Project . MSG _ VERBOSE ) , <nl> + new MessageLevelPair ( " To locate the files took 0 ms . " , Project . MSG _ VERBOSE ) , <nl> + new MessageLevelPair ( " Running Checkstyle " , Project . MSG _ INFO ) , <nl> + new MessageLevelPair ( " Using configuration " , Project . MSG _ VERBOSE ) , <nl> + new MessageLevelPair ( " Starting audit " , Project . MSG _ DEBUG ) , <nl> + new MessageLevelPair ( " Audit done . " , Project . MSG _ DEBUG ) , <nl> + new MessageLevelPair ( " To process the files took 0 ms . " , Project . MSG _ VERBOSE ) , <nl> + new MessageLevelPair ( " Total execution took 0 ms . " , Project . MSG _ VERBOSE ) <nl> + ) ; <nl> + <nl> + final List < MessageLevelPair > loggedMessages = antTask . getLoggedMessages ( ) ; <nl> + <nl> + assertEquals ( expectedList . size ( ) , loggedMessages . size ( ) ) ; <nl> + for ( int i = 0 ; i < expectedList . size ( ) ; i + + ) { <nl> + final MessageLevelPair expected = expectedList . get ( i ) ; <nl> + final MessageLevelPair actual = loggedMessages . get ( i ) ; <nl> + assertTrue ( actual . getMsg ( ) . startsWith ( expected . getMsg ( ) ) ) ; <nl> + assertEquals ( expected . getLevel ( ) , actual . getLevel ( ) ) ; <nl> + } <nl> + <nl> + } <nl> + <nl> private static class CheckstyleAntTaskStub extends CheckstyleAntTask { <nl> @ Override <nl> protected List < File > scanFileSets ( ) { <nl> @ @ - 498 , 4 + 544 , 43 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> return list ; <nl> } <nl> } <nl> + <nl> + private static class CheckstyleAntTaskLogStub extends CheckstyleAntTask { <nl> + <nl> + private final List < MessageLevelPair > loggedMessages = new ArrayList < > ( ) ; <nl> + <nl> + @ Override <nl> + public void log ( String msg , int msgLevel ) { <nl> + loggedMessages . add ( new MessageLevelPair ( msg , msgLevel ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void log ( String msg , Throwable t , int msgLevel ) { <nl> + loggedMessages . add ( new MessageLevelPair ( msg , msgLevel ) ) ; <nl> + <nl> + } <nl> + <nl> + public List < MessageLevelPair > getLoggedMessages ( ) { <nl> + return Collections . unmodifiableList ( loggedMessages ) ; <nl> + } <nl> + } <nl> + <nl> + private static final class MessageLevelPair { <nl> + private final String msg ; <nl> + private final int level ; <nl> + <nl> + private MessageLevelPair ( String msg , int level ) { <nl> + this . msg = msg ; <nl> + this . level = level ; <nl> + } <nl> + <nl> + public String getMsg ( ) { <nl> + return msg ; <nl> + } <nl> + <nl> + public int getLevel ( ) { <nl> + return level ; <nl> + } <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / cache . tmp b / src / test / resources / com / puppycrawl / tools / checkstyle / cache . tmp <nl> new file mode 100644 <nl> index 0000000 . . 7b89edb <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / cache . tmp <nl> @ @ - 0 , 0 + 1 @ @ <nl> + key = value <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / externalResourse . tmp b / src / test / resources / com / puppycrawl / tools / checkstyle / externalResourse . tmp <nl> new file mode 100644 <nl> index 0000000 . . 7b89edb <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / externalResourse . tmp <nl> @ @ - 0 , 0 + 1 @ @ <nl> + key = value

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index 49187e6 . . b85aaa6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 139 , 7 + 139 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 public void finishLocalSetup ( ) { 
 final DefaultContext checkContext = new DefaultContext ( ) ; 
 checkContext . add ( " classLoader " , classLoader ) ; 
 - checkContext . add ( " messages " , getMessageCollector ( ) ) ; 
 checkContext . add ( " severity " , getSeverity ( ) ) ; 
 checkContext . add ( " tabWidth " , String . valueOf ( tabWidth ) ) ; 
 
 @ @ - 331 , 6 + 330 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 
 for ( AbstractCheck check : checks ) { 
 check . setFileContents ( contents ) ; 
 + check . clearMessages ( ) ; 
 check . beginTree ( rootAST ) ; 
 } 
 } 
 @ @ - 352 , 6 + 352 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 
 for ( AbstractCheck check : checks ) { 
 check . finishTree ( rootAST ) ; 
 + addMessages ( check . getMessages ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java 
 index 110ee37 . . 72f9839 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java 
 @ @ - 22 , 6 + 22 , 8 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 import java . util . Collections ; 
 import java . util . HashSet ; 
 import java . util . Set ; 
 + import java . util . SortedSet ; 
 + import java . util . TreeSet ; 
 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ @ - 39 , 12 + 41 , 12 @ @ public abstract class AbstractCheck extends AbstractViolationReporter { 
 / * * The tokens the check is interested in . * / 
 private final Set < String > tokens = new HashSet < > ( ) ; 
 
 + / * * The sorted set for collecting messages . * / 
 + private final SortedSet < LocalizedMessage > messages = new TreeSet < > ( ) ; 
 + 
 / * * The current file contents . * / 
 private FileContents fileContents ; 
 
 - / * * The object for collecting messages . * / 
 - private LocalizedMessages messages ; 
 - 
 / * * The tab width for column reporting . * / 
 private int tabWidth = DEFAULT _ TAB _ WIDTH ; 
 
 @ @ - 104 , 11 + 106 , 18 @ @ public abstract class AbstractCheck extends AbstractViolationReporter { 
 } 
 
 / * * 
 - * Set the global object used to collect messages . 
 - * @ param messages the messages to log with 
 + * Returns the sorted set of { @ link LocalizedMessage } . 
 + * @ return the sorted set of { @ link LocalizedMessage } . 
 + * / 
 + public SortedSet < LocalizedMessage > getMessages ( ) { 
 + return new TreeSet < > ( messages ) ; 
 + } 
 + 
 + / * * 
 + * Clears the sorted set of { @ link LocalizedMessage } of the check . 
 * / 
 - public final void setMessages ( LocalizedMessages messages ) { 
 - this . messages = messages ; 
 + public final void clearMessages ( ) { 
 + messages . clear ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 index 294c73a . . 8381ac4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . io . File ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 import java . util . SortedSet ; 
 + import java . util . TreeSet ; 
 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ @ - 37 , 7 + 38 , 7 @ @ public abstract class AbstractFileSetCheck 
 implements FileSetCheck { 
 
 / * * Collects the error messages . * / 
 - private final LocalizedMessages messageCollector = new LocalizedMessages ( ) ; 
 + private final SortedSet < LocalizedMessage > messageCollector = new TreeSet < > ( ) ; 
 
 / * * The dispatcher errors are fired to . * / 
 private MessageDispatcher messageDispatcher ; 
 @ @ - 72 , 12 + 73 , 12 @ @ public abstract class AbstractFileSetCheck 
 @ Override 
 public final SortedSet < LocalizedMessage > process ( File file , List < String > lines ) 
 throws CheckstyleException { 
 - messageCollector . reset ( ) ; 
 + messageCollector . clear ( ) ; 
 / / Process only what interested in 
 if ( CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { 
 processFiltered ( file , lines ) ; 
 } 
 - return messageCollector . getMessages ( ) ; 
 + return new TreeSet < > ( messageCollector ) ; 
 } 
 
 @ Override 
 @ @ - 134 , 14 + 135 , 11 @ @ public abstract class AbstractFileSetCheck 
 } 
 
 / * * 
 - * Returns the collector for violation messages . 
 - * Subclasses can use the collector to find out the violation 
 - * messages to fire via the message dispatcher . 
 - * 
 - * @ return the collector for localized messages . 
 + * Adds the sorted set of { @ link LocalizedMessage } to the message collector . 
 + * @ param messages the sorted set of { @ link LocalizedMessage } . 
 * / 
 - protected final LocalizedMessages getMessageCollector ( ) { 
 - return messageCollector ; 
 + protected final void addMessages ( SortedSet < LocalizedMessage > messages ) { 
 + messageCollector . addAll ( messages ) ; 
 } 
 
 @ Override 
 @ @ - 171 , 9 + 169 , 8 @ @ public abstract class AbstractFileSetCheck 
 * @ param fileName the audited file 
 * / 
 protected final void fireErrors ( String fileName ) { 
 - final SortedSet < LocalizedMessage > errors = messageCollector 
 - . getMessages ( ) ; 
 - messageCollector . reset ( ) ; 
 + final SortedSet < LocalizedMessage > errors = new TreeSet < > ( messageCollector ) ; 
 + messageCollector . clear ( ) ; 
 getMessageDispatcher ( ) . fireErrors ( fileName , errors ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java 
 deleted file mode 100644 
 index 985018a . . 0000000 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java 
 + + + / dev / null 
 @ @ - 1 , 62 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . api ; 
 - 
 - import java . util . Set ; 
 - import java . util . SortedSet ; 
 - import java . util . TreeSet ; 
 - 
 - / * * 
 - * Collection of messages . 
 - * @ author Oliver Burn 
 - * / 
 - public final class LocalizedMessages { 
 - / * * Contains the messages logged . * * / 
 - private final Set < LocalizedMessage > messages = new TreeSet < > ( ) ; 
 - 
 - / * * 
 - * Gets the logged messages . 
 - * @ return the logged messages 
 - * / 
 - public SortedSet < LocalizedMessage > getMessages ( ) { 
 - return new TreeSet < > ( messages ) ; 
 - } 
 - 
 - / * * Reset the object . * * / 
 - public void reset ( ) { 
 - messages . clear ( ) ; 
 - } 
 - 
 - / * * 
 - * Logs a message to be reported . 
 - * @ param message the message to log 
 - * * / 
 - public void add ( LocalizedMessage message ) { 
 - messages . add ( message ) ; 
 - } 
 - 
 - / * * 
 - * Gets the number of messages . 
 - * @ return the number of messages 
 - * / 
 - public int size ( ) { 
 - return messages . size ( ) ; 
 - } 
 - } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java 
 index c12400c . . 3b7c760 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java 
 @ @ - 74 , 12 + 74 , 10 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { 
 config . addMessage ( " msgKey " , " This is a custom message . " ) ; 
 emptyCheck . configure ( config ) ; 
 
 - final LocalizedMessages collector = new LocalizedMessages ( ) ; 
 - emptyCheck . setMessages ( collector ) ; 
 - 
 emptyCheck . log ( 0 , " msgKey " ) ; 
 
 - final SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; 
 + final SortedSet < LocalizedMessage > messages = emptyCheck . getMessages ( ) ; 
 + 
 assertEquals ( " Amount of messages differs from expected " , 
 1 , messages . size ( ) ) ; 
 assertEquals ( " Message differs from expected " , 
 @ @ - 93 , 12 + 91 , 9 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { 
 config . addMessage ( " msgKey " , " This is a custom message with { 0 } . " ) ; 
 emptyCheck . configure ( config ) ; 
 
 - final LocalizedMessages collector = new LocalizedMessages ( ) ; 
 - emptyCheck . setMessages ( collector ) ; 
 - 
 emptyCheck . log ( 0 , " msgKey " , " TestParam " ) ; 
 + final SortedSet < LocalizedMessage > messages = emptyCheck . getMessages ( ) ; 
 
 - final SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; 
 assertEquals ( " Amount of messages differs from expected " , 
 1 , messages . size ( ) ) ; 
 
 @ @ - 113 , 9 + 108 , 6 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { 
 config . addMessage ( " msgKey " , " This is a custom message { 0 . " ) ; 
 emptyCheck . configure ( config ) ; 
 
 - final LocalizedMessages collector = new LocalizedMessages ( ) ; 
 - emptyCheck . setMessages ( collector ) ; 
 - 
 try { 
 emptyCheck . log ( 0 , " msgKey " , " TestParam " ) ; 
 fail ( " exception expected " ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessagesTest . java 
 deleted file mode 100644 
 index 71e2af6 . . 0000000 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessagesTest . java 
 + + + / dev / null 
 @ @ - 1 , 38 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . api ; 
 - 
 - import org . junit . Assert ; 
 - import org . junit . Test ; 
 - 
 - import com . puppycrawl . tools . checkstyle . Definitions ; 
 - 
 - public class LocalizedMessagesTest { 
 - @ Test 
 - public void testSize ( ) { 
 - / / Just to satisfy code coverage 
 - final LocalizedMessages messages = new LocalizedMessages ( ) ; 
 - messages . add ( new LocalizedMessage ( 0 , 
 - Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , 
 - new String [ ] { " args " } , null , getClass ( ) , 
 - null ) ) ; 
 - Assert . assertEquals ( 1 , messages . size ( ) ) ; 
 - } 
 - } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 index ad72d2d . . f0e96d4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import static org . junit . Assert . assertEquals ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . util . SortedSet ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 34 , 7 + 35 , 7 @ @ import org . junit . Test ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; 
 + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class DeclarationOrderCheckTest 
 @ @ - 148 , 14 + 149 , 16 @ @ public class DeclarationOrderCheckTest 
 method . setNextSibling ( ctor ) ; 
 
 final DeclarationOrderCheck check = new DeclarationOrderCheck ( ) ; 
 - final LocalizedMessages messages = new LocalizedMessages ( ) ; 
 - check . setMessages ( messages ) ; 
 
 check . visitToken ( method ) ; 
 - assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; 
 + final SortedSet < LocalizedMessage > messages1 = check . getMessages ( ) ; 
 + 
 + assertEquals ( " No exception messages expected " , 0 , messages1 . size ( ) ) ; 
 
 check . visitToken ( ctor ) ; 
 - assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; 
 + final SortedSet < LocalizedMessage > messages2 = check . getMessages ( ) ; 
 + 
 + assertEquals ( " No exception messages expected " , 0 , messages2 . size ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 167 , 10 + 170 , 10 @ @ public class DeclarationOrderCheckTest 
 parent . setFirstChild ( array ) ; 
 
 final DeclarationOrderCheck check = new DeclarationOrderCheck ( ) ; 
 - final LocalizedMessages messages = new LocalizedMessages ( ) ; 
 - check . setMessages ( messages ) ; 
 
 check . visitToken ( array ) ; 
 + final SortedSet < LocalizedMessage > messages = check . getMessages ( ) ; 
 + 
 assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 index 9dfbdea . . cb09b9f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalInstantiation 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . util . SortedSet ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 33 , 7 + 34 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 - import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ @ - 164 , 21 + 164 , 23 @ @ public class IllegalInstantiationCheckTest 
 final File inputFile = new File ( getNonCompilablePath ( " InputIllegalInstantiationLang . java " ) ) ; 
 check . setFileContents ( new FileContents ( new FileText ( inputFile , " UTF - 8 " ) ) ) ; 
 check . configure ( createCheckConfig ( IllegalInstantiationCheck . class ) ) ; 
 - final LocalizedMessages messages = new LocalizedMessages ( ) ; 
 - check . setMessages ( messages ) ; 
 check . setClasses ( " java . lang . Boolean " ) ; 
 
 check . visitToken ( newAst ) ; 
 - Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; 
 + final SortedSet < LocalizedMessage > messages1 = check . getMessages ( ) ; 
 + 
 + Assert . assertEquals ( " No exception messages expected " , 0 , messages1 . size ( ) ) ; 
 
 check . finishTree ( newAst ) ; 
 + final SortedSet < LocalizedMessage > messages2 = check . getMessages ( ) ; 
 + 
 final LocalizedMessage addExceptionMessage = new LocalizedMessage ( 0 , 
 " com . puppycrawl . tools . checkstyle . checks . coding . messages " , " instantiation . avoid " , 
 new String [ ] { " java . lang . Boolean " } , null , 
 getClass ( ) , null ) ; 
 Assert . assertEquals ( " Invalid exception message " , 
 addExceptionMessage . getMessage ( ) , 
 - messages . getMessages ( ) . first ( ) . getMessage ( ) ) ; 
 + messages2 . first ( ) . getMessage ( ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index 9870b99 . . f680ed1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck . MSG 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . util . SortedSet ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 32 , 7 + 33 , 7 @ @ import antlr . CommonHiddenStreamToken ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; 
 + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ @ - 153 , 13 + 154 , 13 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 @ Test 
 public void testDefaultSwitch ( ) { 
 final RequireThisCheck check = new RequireThisCheck ( ) ; 
 - final LocalizedMessages messages = new LocalizedMessages ( ) ; 
 - check . setMessages ( messages ) ; 
 
 final DetailAST ast = new DetailAST ( ) ; 
 ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . ENUM , " ENUM " ) ) ; 
 
 check . visitToken ( ast ) ; 
 + final SortedSet < LocalizedMessage > messages = check . getMessages ( ) ; 
 + 
 Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 index 7705df2 . . 955f2e8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . metrics . NPathComplexityChec 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . util . SortedSet ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 31 , 7 + 32 , 7 @ @ import antlr . CommonHiddenStreamToken ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; 
 + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ @ - 171 , 17 + 172 , 18 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { 
 @ Test 
 public void testDefaultHooks ( ) { 
 final NPathComplexityCheck npathComplexityCheckObj = new NPathComplexityCheck ( ) ; 
 - final LocalizedMessages messages = new LocalizedMessages ( ) ; 
 - npathComplexityCheckObj . setMessages ( messages ) ; 
 - 
 final DetailAST ast = new DetailAST ( ) ; 
 ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . INTERFACE _ DEF , " interface " ) ) ; 
 
 npathComplexityCheckObj . visitToken ( ast ) ; 
 - Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; 
 + final SortedSet < LocalizedMessage > messages1 = npathComplexityCheckObj . getMessages ( ) ; 
 + 
 + Assert . assertEquals ( " No exception messages expected " , 0 , messages1 . size ( ) ) ; 
 
 npathComplexityCheckObj . leaveToken ( ast ) ; 
 - Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; 
 + final SortedSet < LocalizedMessage > messages2 = npathComplexityCheckObj . getMessages ( ) ; 
 + 
 + Assert . assertEquals ( " No exception messages expected " , 0 , messages2 . size ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 202 , 15 + 204 , 18 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { 
 astTernary . addChild ( astTernaryTrue ) ; 
 
 final NPathComplexityCheck npathComplexityCheckObj = new NPathComplexityCheck ( ) ; 
 - final LocalizedMessages messages = new LocalizedMessages ( ) ; 
 - npathComplexityCheckObj . setMessages ( messages ) ; 
 
 / / visiting first ast , set expressionSpatialRange to [ 2 , 2 - 4 , 4 ] 
 npathComplexityCheckObj . visitToken ( astIf ) ; 
 - Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; 
 + final SortedSet < LocalizedMessage > messages1 = npathComplexityCheckObj . getMessages ( ) ; 
 + 
 + Assert . assertEquals ( " No exception messages expected " , 0 , messages1 . size ( ) ) ; 
 + 
 / / visiting ternary , it lies before expressionSpatialRange 
 npathComplexityCheckObj . visitToken ( astTernary ) ; 
 - Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; 
 + final SortedSet < LocalizedMessage > messages2 = npathComplexityCheckObj . getMessages ( ) ; 
 + 
 + Assert . assertEquals ( " No exception messages expected " , 0 , messages2 . size ( ) ) ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 17dc138 . . 3aa1419 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1949 , 7 + 1949 , 7 @ @ 
 < ! - - till https : / / github . com / hcoles / pitest / issues / 353 - - > 
 < param > fillShortToFullModuleNamesMap < / param > 
 < / excludedMethods > 
 - < mutationThreshold > 84 < / mutationThreshold > 
 + < mutationThreshold > 89 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 index e8c2e45 . . 94f53d4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 @ @ - 23 , 15 + 23 , 22 @ @ import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 import static org . mockito . Matchers . any ; 
 + import static org . mockito . Mockito . times ; 
 + import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 + import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 import static org . powermock . api . mockito . PowerMockito . when ; 
 
 import java . io . BufferedInputStream ; 
 import java . io . File ; 
 + import java . io . FileInputStream ; 
 + import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 + import java . io . ObjectOutputStream ; 
 import java . io . Serializable ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 @ @ - 48 , 16 + 55 , 20 @ @ import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . TemporaryFolder ; 
 import org . junit . runner . RunWith ; 
 + import org . mockito . Matchers ; 
 import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 import com . google . common . io . ByteStreams ; 
 + import com . google . common . io . Closeables ; 
 + import com . google . common . io . Flushables ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ RunWith ( PowerMockRunner . class ) 
 - @ PrepareForTest ( { PropertyCacheFile . class , ByteStreams . class , CommonUtils . class } ) 
 + @ PrepareForTest ( { PropertyCacheFile . class , ByteStreams . class , 
 + CommonUtils . class , Closeables . class , Flushables . class } ) 
 public class PropertyCacheFileTest { 
 
 @ Rule 
 @ @ - 92 , 6 + 103 , 61 @ @ public class PropertyCacheFileTest { 
 } 
 
 @ Test 
 + public void testResetIfFileDoesNotExist ( ) throws IOException { 
 + final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 + final PropertyCacheFile cache = new PropertyCacheFile ( config , " fileDoesNotExist . txt " ) ; 
 + 
 + cache . load ( ) ; 
 + 
 + assertNotNull ( cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testCloseAndFlushOutputStreamAfterCreatingHashCode ( ) throws IOException { 
 + mockStatic ( Closeables . class ) ; 
 + doNothing ( ) . when ( Closeables . class ) ; 
 + Closeables . close ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + mockStatic ( Flushables . class ) ; 
 + doNothing ( ) . when ( Flushables . class ) ; 
 + Flushables . flush ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + 
 + final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 + final PropertyCacheFile cache = new PropertyCacheFile ( config , " fileDoesNotExist . txt " ) ; 
 + cache . load ( ) ; 
 + 
 + verifyStatic ( times ( 1 ) ) ; 
 + 
 + Closeables . close ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + verifyStatic ( times ( 1 ) ) ; 
 + Flushables . flush ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testPopulateDetails ( ) throws IOException { 
 + mockStatic ( Closeables . class ) ; 
 + doNothing ( ) . when ( Closeables . class ) ; 
 + Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; 
 + 
 + final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 + final PropertyCacheFile cache = new PropertyCacheFile ( config , 
 + " src / test / resources / com / puppycrawl / tools / checkstyle / cache . tmp " ) ; 
 + cache . load ( ) ; 
 + 
 + final String hash = cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ; 
 + assertNotNull ( hash ) ; 
 + assertNull ( cache . get ( " key " ) ) ; 
 + 
 + cache . load ( ) ; 
 + 
 + assertEquals ( hash , cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; 
 + assertEquals ( " value " , cache . get ( " key " ) ) ; 
 + assertNotNull ( cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; 
 + 
 + verifyStatic ( times ( 2 ) ) ; 
 + Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; 
 + } 
 + 
 + @ Test 
 public void testConfigHashOnReset ( ) throws IOException { 
 final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 final String filePath = temporaryFolder . newFile ( ) . getPath ( ) ; 
 @ @ - 129 , 6 + 195 , 23 @ @ public class PropertyCacheFileTest { 
 assertFalse ( cache . isInCache ( " myFile " , 1 ) ) ; 
 } 
 
 + @ Test 
 + public void testExternalResourseIsSavedInCache ( ) throws IOException { 
 + final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 + final String filePath = temporaryFolder . newFile ( ) . getPath ( ) ; 
 + final PropertyCacheFile cache = new PropertyCacheFile ( config , filePath ) ; 
 + 
 + cache . load ( ) ; 
 + 
 + final Set < String > resources = new HashSet < > ( ) ; 
 + final String pathToResource = 
 + " src / test / resources / com / puppycrawl / tools / checkstyle / externalResourse . tmp " ; 
 + resources . add ( pathToResource ) ; 
 + cache . putExternalResources ( resources ) ; 
 + 
 + assertFalse ( cache . get ( " module - resource * ? : " + pathToResource ) . isEmpty ( ) ) ; 
 + } 
 + 
 / * * 
 * This SuppressWarning ( " unchecked " ) required to suppress 
 * " Unchecked generics array creation for varargs parameter " during mock 
 @ @ - 165 , 6 + 248 , 28 @ @ public class PropertyCacheFileTest { 
 } 
 
 @ Test 
 + public void testFlushAndCloseCacheFileOutputStream ( ) throws IOException { 
 + mockStatic ( Closeables . class ) ; 
 + doNothing ( ) . when ( Closeables . class ) ; 
 + Closeables . close ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + mockStatic ( Flushables . class ) ; 
 + doNothing ( ) . when ( Flushables . class ) ; 
 + Flushables . flush ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + 
 + final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 + final PropertyCacheFile cache = new PropertyCacheFile ( config , 
 + temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + 
 + cache . put ( " CheckedFileName . java " , System . currentTimeMillis ( ) ) ; 
 + cache . persist ( ) ; 
 + 
 + verifyStatic ( times ( 1 ) ) ; 
 + Closeables . close ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + verifyStatic ( times ( 1 ) ) ; 
 + Flushables . flush ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + } 
 + 
 + @ Test 
 public void testCacheDirectoryDoesNotExistAndShouldBeCreated ( ) throws IOException { 
 final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 final String filePath = String . format ( Locale . getDefault ( ) , " % s % 2 $ stemp % 2 $ scache . temp " , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 index 1317b95 . . 0998a10 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 @ @ - 25 , 11 + 25 , 14 @ @ import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 import static org . mockito . Mockito . when ; 
 + import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . net . URL ; 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 + import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 @ @ - 41 , 13 + 44 , 18 @ @ import org . apache . tools . ant . types . Path ; 
 import org . apache . tools . ant . types . Reference ; 
 import org . apache . tools . ant . types . resources . FileResource ; 
 import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 import org . powermock . api . mockito . PowerMockito ; 
 + import org . powermock . core . classloader . annotations . PrepareForTest ; 
 + import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 import com . puppycrawl . tools . checkstyle . TestRootModuleChecker ; 
 import com . puppycrawl . tools . checkstyle . XMLLogger ; 
 
 + @ RunWith ( PowerMockRunner . class ) 
 + @ PrepareForTest ( CheckstyleAntTask . class ) 
 public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 
 private static final String FLAWLESS _ INPUT _ DIR = " ant / checkstyleanttask / flawless / " ; 
 @ @ - 486 , 6 + 494 , 44 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 } 
 } 
 
 + @ Test 
 + public final void testExecuteLogOutput ( ) throws Exception { 
 + final CheckstyleAntTaskLogStub antTask = new CheckstyleAntTaskLogStub ( ) ; 
 + final URL url = new File ( getPath ( CONFIG _ FILE ) ) . toURI ( ) . toURL ( ) ; 
 + antTask . setProject ( new Project ( ) ) ; 
 + antTask . setConfigURL ( url ) ; 
 + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + 
 + mockStatic ( System . class ) ; 
 + when ( System . currentTimeMillis ( ) ) . thenReturn ( 1L ) ; 
 + 
 + antTask . execute ( ) ; 
 + 
 + final List < MessageLevelPair > expectedList = Arrays . asList ( 
 + new MessageLevelPair ( " checkstyle version " , Project . MSG _ VERBOSE ) , 
 + new MessageLevelPair ( " compiled on " , Project . MSG _ VERBOSE ) , 
 + new MessageLevelPair ( " Adding standalone file for audit " , Project . MSG _ VERBOSE ) , 
 + new MessageLevelPair ( " To locate the files took 0 ms . " , Project . MSG _ VERBOSE ) , 
 + new MessageLevelPair ( " Running Checkstyle " , Project . MSG _ INFO ) , 
 + new MessageLevelPair ( " Using configuration " , Project . MSG _ VERBOSE ) , 
 + new MessageLevelPair ( " Starting audit " , Project . MSG _ DEBUG ) , 
 + new MessageLevelPair ( " Audit done . " , Project . MSG _ DEBUG ) , 
 + new MessageLevelPair ( " To process the files took 0 ms . " , Project . MSG _ VERBOSE ) , 
 + new MessageLevelPair ( " Total execution took 0 ms . " , Project . MSG _ VERBOSE ) 
 + ) ; 
 + 
 + final List < MessageLevelPair > loggedMessages = antTask . getLoggedMessages ( ) ; 
 + 
 + assertEquals ( expectedList . size ( ) , loggedMessages . size ( ) ) ; 
 + for ( int i = 0 ; i < expectedList . size ( ) ; i + + ) { 
 + final MessageLevelPair expected = expectedList . get ( i ) ; 
 + final MessageLevelPair actual = loggedMessages . get ( i ) ; 
 + assertTrue ( actual . getMsg ( ) . startsWith ( expected . getMsg ( ) ) ) ; 
 + assertEquals ( expected . getLevel ( ) , actual . getLevel ( ) ) ; 
 + } 
 + 
 + } 
 + 
 private static class CheckstyleAntTaskStub extends CheckstyleAntTask { 
 @ Override 
 protected List < File > scanFileSets ( ) { 
 @ @ - 498 , 4 + 544 , 43 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 return list ; 
 } 
 } 
 + 
 + private static class CheckstyleAntTaskLogStub extends CheckstyleAntTask { 
 + 
 + private final List < MessageLevelPair > loggedMessages = new ArrayList < > ( ) ; 
 + 
 + @ Override 
 + public void log ( String msg , int msgLevel ) { 
 + loggedMessages . add ( new MessageLevelPair ( msg , msgLevel ) ) ; 
 + } 
 + 
 + @ Override 
 + public void log ( String msg , Throwable t , int msgLevel ) { 
 + loggedMessages . add ( new MessageLevelPair ( msg , msgLevel ) ) ; 
 + 
 + } 
 + 
 + public List < MessageLevelPair > getLoggedMessages ( ) { 
 + return Collections . unmodifiableList ( loggedMessages ) ; 
 + } 
 + } 
 + 
 + private static final class MessageLevelPair { 
 + private final String msg ; 
 + private final int level ; 
 + 
 + private MessageLevelPair ( String msg , int level ) { 
 + this . msg = msg ; 
 + this . level = level ; 
 + } 
 + 
 + public String getMsg ( ) { 
 + return msg ; 
 + } 
 + 
 + public int getLevel ( ) { 
 + return level ; 
 + } 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / cache . tmp b / src / test / resources / com / puppycrawl / tools / checkstyle / cache . tmp 
 new file mode 100644 
 index 0000000 . . 7b89edb 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / cache . tmp 
 @ @ - 0 , 0 + 1 @ @ 
 + key = value 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / externalResourse . tmp b / src / test / resources / com / puppycrawl / tools / checkstyle / externalResourse . tmp 
 new file mode 100644 
 index 0000000 . . 7b89edb 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / externalResourse . tmp 
 @ @ - 0 , 0 + 1 @ @ 
 + key = value
