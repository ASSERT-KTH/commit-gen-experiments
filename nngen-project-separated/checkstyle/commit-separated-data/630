BLEU SCORE: 0.07320696493449273

TEST MSG: Issue # 3131 : Add support for try resources
GENERATED MSG: Issue # 1548 : Add lambda support to indentation check ( see # 281 )

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 50f22ba . . 5dca0c7 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 6 , 7 + 6 , 7 @ @ <nl> <nl> < suppressions > <nl> < suppress checks = " FileLength " <nl> - files = " TokenTypes . java " <nl> + files = " TokenTypes . java | IndentationCheckTest . java " <nl> lines = " 1 " / > <nl> <nl> < ! - - illegal words are part of Javadoc - - > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / TryHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / TryHandler . java <nl> index bcd12eb . . e5940f5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / TryHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / TryHandler . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . indentation ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> * Handler for try blocks . <nl> @ @ - 40 , 6 + 41 , 24 @ @ public class TryHandler extends BlockParentHandler { <nl> super ( indentCheck , " try " , ast , parent ) ; <nl> } <nl> <nl> + / * * <nl> + * Method to find left parenthesis of try with resources . <nl> + * <nl> + * @ return DetailAst left parenthesis of try with resources <nl> + * / <nl> + protected DetailAST getTryResLparen ( ) { <nl> + return getMainAst ( ) . getFirstChild ( ) . getFirstChild ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Method to find right parenthesis of try with resources . <nl> + * <nl> + * @ return DetailAst right parenthesis of try with resources <nl> + * / <nl> + protected DetailAST getTryResRparen ( ) { <nl> + return getMainAst ( ) . getFirstChild ( ) . getLastChild ( ) ; <nl> + } <nl> + <nl> @ Override <nl> public IndentLevel getSuggestedChildIndent ( AbstractExpressionHandler child ) { <nl> if ( child instanceof CatchHandler <nl> @ @ - 48 , 4 + 67 , 94 @ @ public class TryHandler extends BlockParentHandler { <nl> } <nl> return super . getSuggestedChildIndent ( child ) ; <nl> } <nl> + <nl> + @ Override <nl> + public void checkIndentation ( ) { <nl> + super . checkIndentation ( ) ; <nl> + if ( getMainAst ( ) . getFirstChild ( ) . getType ( ) = = TokenTypes . RESOURCE _ SPECIFICATION ) { <nl> + checkTryResParen ( getTryResLparen ( ) , " lparen " ) ; <nl> + checkTryResParen ( getTryResRparen ( ) , " rparen " ) ; <nl> + checkTryResources ( getMainAst ( ) . getFirstChild ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Method to check the indentation of left paren or right paren . <nl> + * This method itself checks whether either of these are on start of line . This method <nl> + * takes care of line wrapping strict condition as well . <nl> + * <nl> + * @ param parenAst lparen or rparen ast to check <nl> + * @ param subType name to be used in log message <nl> + * / <nl> + protected void checkTryResParen ( final DetailAST parenAst , <nl> + final String subType ) { <nl> + if ( isOnStartOfLine ( parenAst ) ) { <nl> + final IndentLevel expectedIdent = new IndentLevel ( getIndent ( ) , 0 , <nl> + getIndentCheck ( ) . getLineWrappingIndentation ( ) ) ; <nl> + <nl> + checkChildIndentation ( parenAst , subType , expectedIdent ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Method to check indentation of try resources children . <nl> + * It takes into account forceStrictCondition value when logging errors . <nl> + * Example of usage would include checking for try parenthesis and try resources . <nl> + * <nl> + * @ param ast AST to check . <nl> + * @ param subType String representing child type . <nl> + * @ param expectedIdent Expected indent level . <nl> + * / <nl> + private void checkChildIndentation ( DetailAST ast , String subType , IndentLevel expectedIdent ) { <nl> + if ( getIndentCheck ( ) . isForceStrictCondition ( ) ) { <nl> + if ( ! expectedIdent . isAcceptable ( expandedTabsColumnNo ( ast ) ) ) { <nl> + logError ( ast , subType , expandedTabsColumnNo ( ast ) , expectedIdent ) ; <nl> + } <nl> + } <nl> + else { <nl> + if ( expandedTabsColumnNo ( ast ) < expectedIdent . getFirstIndentLevel ( ) ) { <nl> + logError ( ast , subType , expandedTabsColumnNo ( ast ) , expectedIdent ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks indentation of resources parameters in try resources . <nl> + * <nl> + * @ param resourcesSpecAst Resource specification ast <nl> + * / <nl> + protected void checkTryResources ( final DetailAST resourcesSpecAst ) { <nl> + final DetailAST resourcesAst = resourcesSpecAst . findFirstToken ( TokenTypes . RESOURCES ) ; <nl> + final int indetation = getIndent ( ) . getFirstIndentLevel ( ) <nl> + + getIndentCheck ( ) . getLineWrappingIndentation ( ) ; <nl> + final IndentLevel expectedResourceIndent = new IndentLevel ( indetation ) ; <nl> + <nl> + final String subType = " resource " ; <nl> + <nl> + DetailAST resourceAst = resourcesAst . getFirstChild ( ) ; <nl> + while ( resourceAst ! = null ) { <nl> + if ( resourceAst . getType ( ) = = TokenTypes . RESOURCE ) { <nl> + final DetailAST nextSibling ; <nl> + if ( resourceAst . getNextSibling ( ) = = null ) { <nl> + nextSibling = getTryResRparen ( ) ; <nl> + } <nl> + else { <nl> + nextSibling = resourceAst . getNextSibling ( ) ; <nl> + } <nl> + if ( isOnStartOfLine ( resourceAst ) ) { <nl> + checkChildIndentation ( resourceAst , subType , expectedResourceIndent ) ; <nl> + checkWrappingIndentation ( <nl> + resourceAst , <nl> + nextSibling , <nl> + getIndentCheck ( ) . getLineWrappingIndentation ( ) , <nl> + expectedResourceIndent . getFirstIndentLevel ( ) , <nl> + true ) ; <nl> + } <nl> + else { <nl> + checkWrappingIndentation ( resourceAst , nextSibling ) ; <nl> + } <nl> + } <nl> + resourceAst = resourceAst . getNextSibling ( ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index 41c71ac . . 110a929 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 1800 , 6 + 1800 , 68 @ @ public class IndentationCheckTest extends AbstractModuleTestSupport { <nl> verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testTryResourcesStrict ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( IndentationCheck . class ) ; <nl> + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> + checkConfig . addAttribute ( " forceStrictCondition " , " true " ) ; <nl> + checkConfig . addAttribute ( " braceAdjustment " , " 0 " ) ; <nl> + checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> + final String fileName = getPath ( " InputTryWithResourcesStrict . java " ) ; <nl> + final String [ ] expected = { <nl> + " 26 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 0 , 12 ) , <nl> + " 28 : " + getCheckMessage ( MSG _ ERROR _ MULTI , " try rparen " , 13 , " 8 , 12 " ) , <nl> + " 33 : " + getCheckMessage ( MSG _ ERROR , " newBufferedWriter " , 0 , 16 ) , <nl> + " 39 : " + getCheckMessage ( MSG _ ERROR , " newBufferedWriter " , 0 , 12 ) , <nl> + " 59 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 20 , 16 ) , <nl> + " 84 : " + getCheckMessage ( MSG _ ERROR , " writ " , 19 , 12 ) , <nl> + " 91 : " + getCheckMessage ( MSG _ ERROR , " writ " , 19 , 16 ) , <nl> + " 98 : " + getCheckMessage ( MSG _ ERROR , " writ " , 21 , 16 ) , <nl> + " 113 : " + getCheckMessage ( MSG _ ERROR , " zipFileName " , 17 , 16 ) , <nl> + " 120 : " + getCheckMessage ( MSG _ ERROR , " zipFileName " , 15 , 16 ) , <nl> + " 130 : " + getCheckMessage ( MSG _ ERROR , " try " , 7 , 8 ) , <nl> + " 135 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " try " , 15 , 12 ) , <nl> + " 141 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 11 , 12 ) , <nl> + " 142 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " try " , 9 , 12 ) , <nl> + " 146 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 11 , 12 ) , <nl> + " 147 : " + getCheckMessage ( MSG _ ERROR , " newBufferedWriter " , 11 , 16 ) , <nl> + " 148 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " try " , 13 , 12 ) , <nl> + " 150 : " + getCheckMessage ( MSG _ ERROR , " try " , 7 , 8 ) , <nl> + " 151 : " + getCheckMessage ( MSG _ ERROR _ MULTI , " try rparen " , 7 , " 8 , 12 " ) , <nl> + " 155 : " + getCheckMessage ( MSG _ ERROR , " try " , 9 , 8 ) , <nl> + " 161 : " + getCheckMessage ( MSG _ ERROR , " . " , 13 , 12 ) , <nl> + " 167 : " + getCheckMessage ( MSG _ ERROR , " . " , 11 , 12 ) , <nl> + } ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTryResourcesNotStrict ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( IndentationCheck . class ) ; <nl> + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> + checkConfig . addAttribute ( " braceAdjustment " , " 0 " ) ; <nl> + checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> + final String fileName = getPath ( " InputTryResourcesNotStrict . java " ) ; <nl> + final String [ ] expected = { <nl> + " 27 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 0 , 12 ) , <nl> + " 33 : " + getCheckMessage ( MSG _ ERROR , " newBufferedWriter " , 0 , 16 ) , <nl> + " 39 : " + getCheckMessage ( MSG _ ERROR , " newBufferedWriter " , 0 , 12 ) , <nl> + " 120 : " + getCheckMessage ( MSG _ ERROR , " zipFileName " , 15 , 16 ) , <nl> + " 130 : " + getCheckMessage ( MSG _ ERROR , " try " , 7 , 8 ) , <nl> + " 135 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " try " , 15 , 12 ) , <nl> + " 141 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 11 , 12 ) , <nl> + " 142 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " try " , 9 , 12 ) , <nl> + " 146 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 11 , 12 ) , <nl> + " 147 : " + getCheckMessage ( MSG _ ERROR , " newBufferedWriter " , 11 , 16 ) , <nl> + " 148 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " try " , 13 , 12 ) , <nl> + " 150 : " + getCheckMessage ( MSG _ ERROR , " try " , 7 , 8 ) , <nl> + " 151 : " + getCheckMessage ( MSG _ ERROR _ MULTI , " try rparen " , 7 , " 8 , 12 " ) , <nl> + " 164 : " + getCheckMessage ( MSG _ ERROR , " . " , 8 , 12 ) , <nl> + " 172 : " + getCheckMessage ( MSG _ ERROR , " new " , 11 , 12 ) , <nl> + } ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> + } <nl> + <nl> / * * <nl> * Verifies that the arguments of { @ link IndentationCheck # MSG _ ERROR } , <nl> * { @ link IndentationCheck # MSG _ CHILD _ ERROR } , { @ link IndentationCheck # MSG _ CHILD _ ERROR _ MULTI } , <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationValidTryResourcesIndent . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationValidTryResourcesIndent . java <nl> index 56f02ea . . e279214 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationValidTryResourcesIndent . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationValidTryResourcesIndent . java <nl> @ @ - 25 , 8 + 25 , 7 @ @ class InputIndentationValidTryResourcesIndent / / indent : 0 exp : 0 <nl> / / Taken from JDK7 java . lang . Package src code . / / indent : 4 exp : 4 <nl> private static Manifest loadManifest ( String fn ) { / / indent : 4 exp : 4 <nl> try ( FileInputStream fis = new FileInputStream ( fn ) ; / / indent : 8 exp : 8 <nl> - / / This should be an error / / indent : 4 exp : 4 <nl> - JarInputStream jis = new JarInputStream ( fis , false ) ) / / indent : 4 exp : 4 <nl> + JarInputStream jis = new JarInputStream ( fis , false ) ) / / indent : 12 exp : 12 <nl> { / / indent : 8 exp : 8 <nl> return jis . getManifest ( ) ; / / indent : 12 exp : 12 <nl> } catch ( IOException e ) / / indent : 8 exp : 8 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputTryResourcesNotStrict . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputTryResourcesNotStrict . java <nl> new file mode 100644 <nl> index 0000000 . . 3f5775d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputTryResourcesNotStrict . java <nl> @ @ - 0 , 0 + 1 , 183 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . indentation . indentation ; / / indent : 0 exp : 0 <nl> + <nl> + import java . io . BufferedWriter ; / / indent : 0 exp : 0 <nl> + import java . io . IOException ; / / indent : 0 exp : 0 <nl> + import java . nio . charset . Charset ; / / indent : 0 exp : 0 <nl> + import java . nio . charset . MalformedInputException ; / / indent : 0 exp : 0 <nl> + import java . nio . charset . StandardCharsets ; / / indent : 0 exp : 0 <nl> + import java . nio . file . DirectoryStream ; / / indent : 0 exp : 0 <nl> + import java . nio . file . Files ; / / indent : 0 exp : 0 <nl> + import java . nio . file . Path ; / / indent : 0 exp : 0 <nl> + import java . nio . file . Paths ; / / indent : 0 exp : 0 <nl> + import java . util . zip . ZipFile ; / / indent : 0 exp : 0 <nl> + <nl> + public final class InputTryResourcesNotStrict { / / indent : 0 exp : 0 <nl> + <nl> + private InputTryResourcesNotStrict ( ) { / / indent : 4 exp : 4 <nl> + <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + static void fooMethod ( String zipFileName ) throws IOException { / / indent : 4 exp : 4 <nl> + <nl> + Charset charset = StandardCharsets . US _ ASCII ; / / indent : 8 exp : 8 <nl> + Path outputFilePath = Paths . get ( zipFileName ) ; / / indent : 8 exp : 8 <nl> + <nl> + try / / indent : 8 exp : 8 <nl> + ( / / indent : 12 exp : > = 8 <nl> + final BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 0 exp : 12 warn <nl> + ) { / / indent : 12 exp : > = 8 <nl> + ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = Files . / / indent : 12 exp : 12 <nl> + newBufferedWriter ( outputFilePath , charset ) ; / / indent : 0 exp : 16 warn <nl> + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 <nl> + ) { / / indent : 12 exp : > = 8 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = Files . / / indent : 8 exp : 8 <nl> + newBufferedWriter ( outputFilePath , charset ) ; / / indent : 0 exp : > = 12 warn <nl> + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 <nl> + ) { / / indent : 12 exp : > = 8 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = Files . / / indent : 12 exp : 12 <nl> + newBufferedWriter ( outputFilePath , charset ) ; / / indent : 16 exp : 16 <nl> + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 <nl> + ) { / / indent : 12 exp : > = 8 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 <nl> + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 <nl> + ) { / / indent : 12 exp : > = 8 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try { / / indent : 8 exp : 8 <nl> + try ( / / indent : 12 exp : 12 <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 20 exp : > = 16 <nl> + writer . flush ( ) ; / / indent : 16 exp : 16 <nl> + } catch ( MalformedInputException e ) { / / indent : 12 exp : 12 <nl> + / / Empty / / indent : 16 exp : 16 <nl> + } / / indent : 12 exp : 12 <nl> + } catch ( IOException e ) { / / indent : 8 exp : 8 <nl> + Integer . parseInt ( " 1 " ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try { / / indent : 8 exp : 8 <nl> + <nl> + } catch ( Exception e ) { / / indent : 8 exp : 8 <nl> + <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : 8 <nl> + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 <nl> + } catch ( Exception e ) { / / indent : 8 exp : 8 <nl> + <nl> + } / / indent : 8 exp : 8 <nl> + BufferedWriter writ = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = writ ) { / / indent : 8 exp : 8 <nl> + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 <nl> + } catch ( IOException e ) { / / indent : 8 exp : 8 <nl> + throw e ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = / / indent : 8 exp : 8 <nl> + writ ) { / / indent : 19 exp : > = 12 <nl> + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 <nl> + } catch ( IOException e ) { / / indent : 8 exp : 8 <nl> + throw e ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = / / indent : 12 exp : 12 <nl> + writ ) { / / indent : 19 exp : > = 16 <nl> + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 <nl> + } catch ( IOException e ) { / / indent : 8 exp : 8 <nl> + throw e ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = / / indent : 12 exp : 12 <nl> + writ ) { / / indent : 21 exp : > = 16 <nl> + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 <nl> + } catch ( IOException e ) { / / indent : 8 exp : 8 <nl> + throw e ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 <nl> + ZipFile zf = new ZipFile ( / / indent : 12 exp : 12 <nl> + zipFileName ) / / indent : 16 exp : 16 <nl> + ) { / / indent : 12 exp : > = 8 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 <nl> + ZipFile zf = new ZipFile ( / / indent : 12 exp : 12 <nl> + zipFileName ) / / indent : 17 exp : > = 16 <nl> + ) { / / indent : 12 exp : > = 8 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 <nl> + ZipFile zf = new ZipFile ( / / indent : 12 exp : 12 <nl> + zipFileName ) / / indent : 15 exp : > = 16 warn <nl> + ) { / / indent : 12 exp : > = 8 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : 8 <nl> + writer . close ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : 8 <nl> + writer . close ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 7 exp : 8 warn <nl> + <nl> + <nl> + <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 12 exp : 12 <nl> + writer . close ( ) ; / / indent : 15 exp : 12 warn <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + <nl> + <nl> + <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 11 exp : 12 warn <nl> + writer . close ( ) ; / / indent : 9 exp : 12 warn <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + <nl> + BufferedWriter writer = Files . / / indent : 11 exp : 12 warn <nl> + newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 11 exp : 16 warn <nl> + writer . close ( ) ; / / indent : 13 exp : 12 warn <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = writ / / indent : 7 exp : 8 warn <nl> + ) { / / indent : 7 exp : > = 8 , 12 warn <nl> + } catch ( MalformedInputException e ) { / / indent : 8 exp : 8 <nl> + throw e ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer1 = writ ; / / indent : 8 exp : 8 <nl> + BufferedWriter writer2 = writ ; / / indent : 12 exp : > = 12 <nl> + BufferedWriter writer3 = writ ; / / indent : 13 exp : > = 12 <nl> + BufferedWriter writer4 = writ ; / / indent : 14 exp : > = 12 <nl> + BufferedWriter writer5 = writ ) { / / indent : 15 exp : > = 12 <nl> + } catch ( MalformedInputException e ) { / / indent : 8 exp : 8 <nl> + ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = Files / / indent : 8 exp : 8 <nl> + . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : > = 12 warn <nl> + ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = Files / / indent : 8 exp : 8 <nl> + . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 13 exp : > = 12 <nl> + ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( DirectoryStream < Path > ds = Files . newDirectoryStream ( outputFilePath , / / indent : 8 exp : 8 <nl> + new DirectoryStream . Filter < Path > ( ) { / / indent : 11 exp : > = 12 warn <nl> + @ Override / / indent : 16 exp : 16 <nl> + public boolean accept ( Path path ) { / / indent : 16 exp : 16 <nl> + return path . toString ( ) . contains ( " " ) ; / / indent : 20 exp : 20 <nl> + } / / indent : 16 exp : 16 <nl> + } ) ) / / indent : 12 exp : 12 <nl> + { / / indent : 8 exp : 8 <nl> + for ( Path p : ds ) / / indent : 12 exp : 12 <nl> + ; / / indent : 16 exp : 16 <nl> + } / / indent : 8 exp : 8 <nl> + } / / indent : 4 exp : 4 <nl> + } / / indent : 0 exp : 0 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputTryWithResourcesStrict . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputTryWithResourcesStrict . java <nl> new file mode 100644 <nl> index 0000000 . . 44b70ee <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputTryWithResourcesStrict . java <nl> @ @ - 0 , 0 + 1 , 184 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . indentation . indentation ; / / indent : 0 exp : 0 <nl> + <nl> + import java . io . BufferedWriter ; / / indent : 0 exp : 0 <nl> + import java . io . IOException ; / / indent : 0 exp : 0 <nl> + import java . nio . charset . Charset ; / / indent : 0 exp : 0 <nl> + import java . nio . charset . MalformedInputException ; / / indent : 0 exp : 0 <nl> + import java . nio . charset . StandardCharsets ; / / indent : 0 exp : 0 <nl> + import java . nio . file . DirectoryStream ; / / indent : 0 exp : 0 <nl> + import java . nio . file . Files ; / / indent : 0 exp : 0 <nl> + import java . nio . file . Path ; / / indent : 0 exp : 0 <nl> + import java . nio . file . Paths ; / / indent : 0 exp : 0 <nl> + import java . util . zip . ZipFile ; / / indent : 0 exp : 0 <nl> + <nl> + public final class InputTryWithResourcesStrict { / / indent : 0 exp : 0 <nl> + <nl> + private InputTryWithResourcesStrict ( ) { / / indent : 4 exp : 4 <nl> + <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + static void fooMethod ( String zipFileName ) throws IOException { / / indent : 4 exp : 4 <nl> + <nl> + Charset charset = StandardCharsets . US _ ASCII ; / / indent : 8 exp : 8 <nl> + Path outputFilePath = Paths . get ( zipFileName ) ; / / indent : 8 exp : 8 <nl> + <nl> + try ( / / indent : 8 exp : 8 <nl> + final BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 0 exp : 12 warn <nl> + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 <nl> + ) { / / indent : 13 exp : 8 , 12 warn <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = Files . / / indent : 12 exp : 12 <nl> + newBufferedWriter ( outputFilePath , charset ) ; / / indent : 0 exp : 16 warn <nl> + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 <nl> + ) { / / indent : 8 exp : 8 , 12 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = Files . / / indent : 8 exp : 8 <nl> + newBufferedWriter ( outputFilePath , charset ) ; / / indent : 0 exp : 12 warn <nl> + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 <nl> + ) { / / indent : 12 exp : 8 , 12 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = Files . / / indent : 12 exp : 12 <nl> + newBufferedWriter ( outputFilePath , charset ) ; / / indent : 16 exp : 16 <nl> + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 <nl> + ) { / / indent : 12 exp : 8 , 12 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 <nl> + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 <nl> + ) { / / indent : 12 exp : 8 , 12 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try { / / indent : 8 exp : 8 <nl> + try ( / / indent : 12 exp : 12 <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 20 exp : 16 warn <nl> + writer . flush ( ) ; / / indent : 16 exp : 16 <nl> + } catch ( MalformedInputException e ) { / / indent : 12 exp : 8 , 12 <nl> + / / Empty / / indent : 16 exp : 16 <nl> + } / / indent : 12 exp : 12 <nl> + } catch ( IOException e ) { / / indent : 8 exp : 8 <nl> + Integer . parseInt ( " 1 " ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try { / / indent : 8 exp : 8 <nl> + <nl> + } catch ( Exception e ) { / / indent : 8 exp : 8 <nl> + <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : 8 <nl> + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 <nl> + } catch ( Exception e ) { / / indent : 8 exp : 8 <nl> + <nl> + } / / indent : 8 exp : 8 <nl> + BufferedWriter writ = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = writ ) { / / indent : 8 exp : 8 <nl> + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 <nl> + } catch ( IOException e ) { / / indent : 8 exp : 8 <nl> + throw e ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = / / indent : 8 exp : 8 <nl> + writ ) { / / indent : 19 exp : 12 warn <nl> + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 <nl> + } catch ( IOException e ) { / / indent : 8 exp : 8 <nl> + throw e ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = / / indent : 12 exp : 12 <nl> + writ ) { / / indent : 19 exp : 16 warn <nl> + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 <nl> + } catch ( IOException e ) { / / indent : 8 exp : 8 <nl> + throw e ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = / / indent : 12 exp : 12 <nl> + writ ) { / / indent : 21 exp : 16 warn <nl> + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 <nl> + } catch ( IOException e ) { / / indent : 8 exp : 8 <nl> + throw e ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 <nl> + ZipFile zf = new ZipFile ( / / indent : 12 exp : 12 <nl> + zipFileName ) / / indent : 16 exp : 16 <nl> + ) { / / indent : 12 exp : 8 , 12 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 <nl> + ZipFile zf = new ZipFile ( / / indent : 12 exp : 12 <nl> + zipFileName ) / / indent : 17 exp : 16 warn <nl> + ) { / / indent : 12 exp : 8 , 12 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 <nl> + ZipFile zf = new ZipFile ( / / indent : 12 exp : 12 <nl> + zipFileName ) / / indent : 15 exp : 16 warn <nl> + ) { / / indent : 12 exp : 8 , 12 <nl> + zf . getName ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : 8 <nl> + writer . close ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : 8 <nl> + writer . close ( ) ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 7 exp : 8 warn <nl> + <nl> + <nl> + <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 12 exp : 12 <nl> + writer . close ( ) ; / / indent : 15 exp : 12 warn <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + <nl> + <nl> + <nl> + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 11 exp : 12 warn <nl> + writer . close ( ) ; / / indent : 9 exp : 12 warn <nl> + } / / indent : 8 exp : 8 <nl> + try ( / / indent : 8 exp : 8 <nl> + <nl> + BufferedWriter writer = Files . / / indent : 11 exp : 12 warn <nl> + newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 11 exp : 16 warn <nl> + writer . close ( ) ; / / indent : 13 exp : 12 warn <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = writ / / indent : 7 exp : 8 warn <nl> + ) { / / indent : 7 exp : 8 , 12 warn <nl> + } catch ( MalformedInputException e ) { / / indent : 8 exp : 8 <nl> + throw e ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = writ / / indent : 9 exp : 8 warn <nl> + ) { / / indent : 12 exp : 8 , 12 <nl> + } catch ( MalformedInputException e ) { / / indent : 8 exp : 8 <nl> + throw e ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = Files / / indent : 8 exp : 8 <nl> + . newBufferedWriter ( outputFilePath , charset ) / / indent : 13 exp : 12 warn <nl> + ) { / / indent : 12 exp : 8 , 12 <nl> + } catch ( MalformedInputException e ) { / / indent : 8 exp : 8 <nl> + throw e ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( BufferedWriter writer = Files / / indent : 8 exp : 8 <nl> + . newBufferedWriter ( outputFilePath , charset ) / / indent : 11 exp : 12 warn <nl> + ) { / / indent : 12 exp : 8 , 12 <nl> + } catch ( MalformedInputException e ) { / / indent : 8 exp : 8 <nl> + throw e ; / / indent : 12 exp : 12 <nl> + } / / indent : 8 exp : 8 <nl> + try ( DirectoryStream < Path > ds = Files . newDirectoryStream ( outputFilePath , / / indent : 8 exp : 8 <nl> + new DirectoryStream . Filter < Path > ( ) { / / indent : 12 exp : 12 <nl> + @ Override / / indent : 16 exp : 16 <nl> + public boolean accept ( Path path ) { / / indent : 16 exp : 16 <nl> + return path . toString ( ) . contains ( " " ) ; / / indent : 20 exp : 20 <nl> + } / / indent : 16 exp : 16 <nl> + } ) ) / / indent : 12 exp : 12 <nl> + { / / indent : 8 exp : 8 <nl> + for ( Path p : ds ) / / indent : 12 exp : 12 <nl> + ; / / indent : 16 exp : 16 <nl> + } / / indent : 8 exp : 8 <nl> + } / / indent : 4 exp : 4 <nl> + } / / indent : 0 exp : 0
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 2369ad6 . . 5935064 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 514 , 7 + 514 , 7 @ @ <nl> < dependency > <nl> < groupId > org . apache . maven . wagon < / groupId > <nl> < artifactId > wagon - ssh < / artifactId > <nl> - < version > 2 . 9 < / version > <nl> + < version > 2 . 10 < / version > <nl> < / dependency > <nl> < / dependencies > <nl> < / plugin >

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 50f22ba . . 5dca0c7 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 6 , 7 + 6 , 7 @ @ 
 
 < suppressions > 
 < suppress checks = " FileLength " 
 - files = " TokenTypes . java " 
 + files = " TokenTypes . java | IndentationCheckTest . java " 
 lines = " 1 " / > 
 
 < ! - - illegal words are part of Javadoc - - > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / TryHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / TryHandler . java 
 index bcd12eb . . e5940f5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / TryHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / TryHandler . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . indentation ; 
 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 * Handler for try blocks . 
 @ @ - 40 , 6 + 41 , 24 @ @ public class TryHandler extends BlockParentHandler { 
 super ( indentCheck , " try " , ast , parent ) ; 
 } 
 
 + / * * 
 + * Method to find left parenthesis of try with resources . 
 + * 
 + * @ return DetailAst left parenthesis of try with resources 
 + * / 
 + protected DetailAST getTryResLparen ( ) { 
 + return getMainAst ( ) . getFirstChild ( ) . getFirstChild ( ) ; 
 + } 
 + 
 + / * * 
 + * Method to find right parenthesis of try with resources . 
 + * 
 + * @ return DetailAst right parenthesis of try with resources 
 + * / 
 + protected DetailAST getTryResRparen ( ) { 
 + return getMainAst ( ) . getFirstChild ( ) . getLastChild ( ) ; 
 + } 
 + 
 @ Override 
 public IndentLevel getSuggestedChildIndent ( AbstractExpressionHandler child ) { 
 if ( child instanceof CatchHandler 
 @ @ - 48 , 4 + 67 , 94 @ @ public class TryHandler extends BlockParentHandler { 
 } 
 return super . getSuggestedChildIndent ( child ) ; 
 } 
 + 
 + @ Override 
 + public void checkIndentation ( ) { 
 + super . checkIndentation ( ) ; 
 + if ( getMainAst ( ) . getFirstChild ( ) . getType ( ) = = TokenTypes . RESOURCE _ SPECIFICATION ) { 
 + checkTryResParen ( getTryResLparen ( ) , " lparen " ) ; 
 + checkTryResParen ( getTryResRparen ( ) , " rparen " ) ; 
 + checkTryResources ( getMainAst ( ) . getFirstChild ( ) ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Method to check the indentation of left paren or right paren . 
 + * This method itself checks whether either of these are on start of line . This method 
 + * takes care of line wrapping strict condition as well . 
 + * 
 + * @ param parenAst lparen or rparen ast to check 
 + * @ param subType name to be used in log message 
 + * / 
 + protected void checkTryResParen ( final DetailAST parenAst , 
 + final String subType ) { 
 + if ( isOnStartOfLine ( parenAst ) ) { 
 + final IndentLevel expectedIdent = new IndentLevel ( getIndent ( ) , 0 , 
 + getIndentCheck ( ) . getLineWrappingIndentation ( ) ) ; 
 + 
 + checkChildIndentation ( parenAst , subType , expectedIdent ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Method to check indentation of try resources children . 
 + * It takes into account forceStrictCondition value when logging errors . 
 + * Example of usage would include checking for try parenthesis and try resources . 
 + * 
 + * @ param ast AST to check . 
 + * @ param subType String representing child type . 
 + * @ param expectedIdent Expected indent level . 
 + * / 
 + private void checkChildIndentation ( DetailAST ast , String subType , IndentLevel expectedIdent ) { 
 + if ( getIndentCheck ( ) . isForceStrictCondition ( ) ) { 
 + if ( ! expectedIdent . isAcceptable ( expandedTabsColumnNo ( ast ) ) ) { 
 + logError ( ast , subType , expandedTabsColumnNo ( ast ) , expectedIdent ) ; 
 + } 
 + } 
 + else { 
 + if ( expandedTabsColumnNo ( ast ) < expectedIdent . getFirstIndentLevel ( ) ) { 
 + logError ( ast , subType , expandedTabsColumnNo ( ast ) , expectedIdent ) ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 + * Checks indentation of resources parameters in try resources . 
 + * 
 + * @ param resourcesSpecAst Resource specification ast 
 + * / 
 + protected void checkTryResources ( final DetailAST resourcesSpecAst ) { 
 + final DetailAST resourcesAst = resourcesSpecAst . findFirstToken ( TokenTypes . RESOURCES ) ; 
 + final int indetation = getIndent ( ) . getFirstIndentLevel ( ) 
 + + getIndentCheck ( ) . getLineWrappingIndentation ( ) ; 
 + final IndentLevel expectedResourceIndent = new IndentLevel ( indetation ) ; 
 + 
 + final String subType = " resource " ; 
 + 
 + DetailAST resourceAst = resourcesAst . getFirstChild ( ) ; 
 + while ( resourceAst ! = null ) { 
 + if ( resourceAst . getType ( ) = = TokenTypes . RESOURCE ) { 
 + final DetailAST nextSibling ; 
 + if ( resourceAst . getNextSibling ( ) = = null ) { 
 + nextSibling = getTryResRparen ( ) ; 
 + } 
 + else { 
 + nextSibling = resourceAst . getNextSibling ( ) ; 
 + } 
 + if ( isOnStartOfLine ( resourceAst ) ) { 
 + checkChildIndentation ( resourceAst , subType , expectedResourceIndent ) ; 
 + checkWrappingIndentation ( 
 + resourceAst , 
 + nextSibling , 
 + getIndentCheck ( ) . getLineWrappingIndentation ( ) , 
 + expectedResourceIndent . getFirstIndentLevel ( ) , 
 + true ) ; 
 + } 
 + else { 
 + checkWrappingIndentation ( resourceAst , nextSibling ) ; 
 + } 
 + } 
 + resourceAst = resourceAst . getNextSibling ( ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index 41c71ac . . 110a929 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 1800 , 6 + 1800 , 68 @ @ public class IndentationCheckTest extends AbstractModuleTestSupport { 
 verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 + @ Test 
 + public void testTryResourcesStrict ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( IndentationCheck . class ) ; 
 + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 + checkConfig . addAttribute ( " forceStrictCondition " , " true " ) ; 
 + checkConfig . addAttribute ( " braceAdjustment " , " 0 " ) ; 
 + checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 + final String fileName = getPath ( " InputTryWithResourcesStrict . java " ) ; 
 + final String [ ] expected = { 
 + " 26 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 0 , 12 ) , 
 + " 28 : " + getCheckMessage ( MSG _ ERROR _ MULTI , " try rparen " , 13 , " 8 , 12 " ) , 
 + " 33 : " + getCheckMessage ( MSG _ ERROR , " newBufferedWriter " , 0 , 16 ) , 
 + " 39 : " + getCheckMessage ( MSG _ ERROR , " newBufferedWriter " , 0 , 12 ) , 
 + " 59 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 20 , 16 ) , 
 + " 84 : " + getCheckMessage ( MSG _ ERROR , " writ " , 19 , 12 ) , 
 + " 91 : " + getCheckMessage ( MSG _ ERROR , " writ " , 19 , 16 ) , 
 + " 98 : " + getCheckMessage ( MSG _ ERROR , " writ " , 21 , 16 ) , 
 + " 113 : " + getCheckMessage ( MSG _ ERROR , " zipFileName " , 17 , 16 ) , 
 + " 120 : " + getCheckMessage ( MSG _ ERROR , " zipFileName " , 15 , 16 ) , 
 + " 130 : " + getCheckMessage ( MSG _ ERROR , " try " , 7 , 8 ) , 
 + " 135 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " try " , 15 , 12 ) , 
 + " 141 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 11 , 12 ) , 
 + " 142 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " try " , 9 , 12 ) , 
 + " 146 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 11 , 12 ) , 
 + " 147 : " + getCheckMessage ( MSG _ ERROR , " newBufferedWriter " , 11 , 16 ) , 
 + " 148 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " try " , 13 , 12 ) , 
 + " 150 : " + getCheckMessage ( MSG _ ERROR , " try " , 7 , 8 ) , 
 + " 151 : " + getCheckMessage ( MSG _ ERROR _ MULTI , " try rparen " , 7 , " 8 , 12 " ) , 
 + " 155 : " + getCheckMessage ( MSG _ ERROR , " try " , 9 , 8 ) , 
 + " 161 : " + getCheckMessage ( MSG _ ERROR , " . " , 13 , 12 ) , 
 + " 167 : " + getCheckMessage ( MSG _ ERROR , " . " , 11 , 12 ) , 
 + } ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testTryResourcesNotStrict ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( IndentationCheck . class ) ; 
 + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 + checkConfig . addAttribute ( " braceAdjustment " , " 0 " ) ; 
 + checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 + final String fileName = getPath ( " InputTryResourcesNotStrict . java " ) ; 
 + final String [ ] expected = { 
 + " 27 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 0 , 12 ) , 
 + " 33 : " + getCheckMessage ( MSG _ ERROR , " newBufferedWriter " , 0 , 16 ) , 
 + " 39 : " + getCheckMessage ( MSG _ ERROR , " newBufferedWriter " , 0 , 12 ) , 
 + " 120 : " + getCheckMessage ( MSG _ ERROR , " zipFileName " , 15 , 16 ) , 
 + " 130 : " + getCheckMessage ( MSG _ ERROR , " try " , 7 , 8 ) , 
 + " 135 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " try " , 15 , 12 ) , 
 + " 141 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 11 , 12 ) , 
 + " 142 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " try " , 9 , 12 ) , 
 + " 146 : " + getCheckMessage ( MSG _ ERROR , " try resource " , 11 , 12 ) , 
 + " 147 : " + getCheckMessage ( MSG _ ERROR , " newBufferedWriter " , 11 , 16 ) , 
 + " 148 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " try " , 13 , 12 ) , 
 + " 150 : " + getCheckMessage ( MSG _ ERROR , " try " , 7 , 8 ) , 
 + " 151 : " + getCheckMessage ( MSG _ ERROR _ MULTI , " try rparen " , 7 , " 8 , 12 " ) , 
 + " 164 : " + getCheckMessage ( MSG _ ERROR , " . " , 8 , 12 ) , 
 + " 172 : " + getCheckMessage ( MSG _ ERROR , " new " , 11 , 12 ) , 
 + } ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 + } 
 + 
 / * * 
 * Verifies that the arguments of { @ link IndentationCheck # MSG _ ERROR } , 
 * { @ link IndentationCheck # MSG _ CHILD _ ERROR } , { @ link IndentationCheck # MSG _ CHILD _ ERROR _ MULTI } , 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationValidTryResourcesIndent . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationValidTryResourcesIndent . java 
 index 56f02ea . . e279214 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationValidTryResourcesIndent . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationValidTryResourcesIndent . java 
 @ @ - 25 , 8 + 25 , 7 @ @ class InputIndentationValidTryResourcesIndent / / indent : 0 exp : 0 
 / / Taken from JDK7 java . lang . Package src code . / / indent : 4 exp : 4 
 private static Manifest loadManifest ( String fn ) { / / indent : 4 exp : 4 
 try ( FileInputStream fis = new FileInputStream ( fn ) ; / / indent : 8 exp : 8 
 - / / This should be an error / / indent : 4 exp : 4 
 - JarInputStream jis = new JarInputStream ( fis , false ) ) / / indent : 4 exp : 4 
 + JarInputStream jis = new JarInputStream ( fis , false ) ) / / indent : 12 exp : 12 
 { / / indent : 8 exp : 8 
 return jis . getManifest ( ) ; / / indent : 12 exp : 12 
 } catch ( IOException e ) / / indent : 8 exp : 8 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputTryResourcesNotStrict . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputTryResourcesNotStrict . java 
 new file mode 100644 
 index 0000000 . . 3f5775d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputTryResourcesNotStrict . java 
 @ @ - 0 , 0 + 1 , 183 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . indentation . indentation ; / / indent : 0 exp : 0 
 + 
 + import java . io . BufferedWriter ; / / indent : 0 exp : 0 
 + import java . io . IOException ; / / indent : 0 exp : 0 
 + import java . nio . charset . Charset ; / / indent : 0 exp : 0 
 + import java . nio . charset . MalformedInputException ; / / indent : 0 exp : 0 
 + import java . nio . charset . StandardCharsets ; / / indent : 0 exp : 0 
 + import java . nio . file . DirectoryStream ; / / indent : 0 exp : 0 
 + import java . nio . file . Files ; / / indent : 0 exp : 0 
 + import java . nio . file . Path ; / / indent : 0 exp : 0 
 + import java . nio . file . Paths ; / / indent : 0 exp : 0 
 + import java . util . zip . ZipFile ; / / indent : 0 exp : 0 
 + 
 + public final class InputTryResourcesNotStrict { / / indent : 0 exp : 0 
 + 
 + private InputTryResourcesNotStrict ( ) { / / indent : 4 exp : 4 
 + 
 + } / / indent : 4 exp : 4 
 + 
 + static void fooMethod ( String zipFileName ) throws IOException { / / indent : 4 exp : 4 
 + 
 + Charset charset = StandardCharsets . US _ ASCII ; / / indent : 8 exp : 8 
 + Path outputFilePath = Paths . get ( zipFileName ) ; / / indent : 8 exp : 8 
 + 
 + try / / indent : 8 exp : 8 
 + ( / / indent : 12 exp : > = 8 
 + final BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 0 exp : 12 warn 
 + ) { / / indent : 12 exp : > = 8 
 + ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = Files . / / indent : 12 exp : 12 
 + newBufferedWriter ( outputFilePath , charset ) ; / / indent : 0 exp : 16 warn 
 + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 
 + ) { / / indent : 12 exp : > = 8 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = Files . / / indent : 8 exp : 8 
 + newBufferedWriter ( outputFilePath , charset ) ; / / indent : 0 exp : > = 12 warn 
 + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 
 + ) { / / indent : 12 exp : > = 8 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = Files . / / indent : 12 exp : 12 
 + newBufferedWriter ( outputFilePath , charset ) ; / / indent : 16 exp : 16 
 + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 
 + ) { / / indent : 12 exp : > = 8 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 
 + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 
 + ) { / / indent : 12 exp : > = 8 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try { / / indent : 8 exp : 8 
 + try ( / / indent : 12 exp : 12 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 20 exp : > = 16 
 + writer . flush ( ) ; / / indent : 16 exp : 16 
 + } catch ( MalformedInputException e ) { / / indent : 12 exp : 12 
 + / / Empty / / indent : 16 exp : 16 
 + } / / indent : 12 exp : 12 
 + } catch ( IOException e ) { / / indent : 8 exp : 8 
 + Integer . parseInt ( " 1 " ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try { / / indent : 8 exp : 8 
 + 
 + } catch ( Exception e ) { / / indent : 8 exp : 8 
 + 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : 8 
 + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 
 + } catch ( Exception e ) { / / indent : 8 exp : 8 
 + 
 + } / / indent : 8 exp : 8 
 + BufferedWriter writ = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = writ ) { / / indent : 8 exp : 8 
 + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 
 + } catch ( IOException e ) { / / indent : 8 exp : 8 
 + throw e ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = / / indent : 8 exp : 8 
 + writ ) { / / indent : 19 exp : > = 12 
 + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 
 + } catch ( IOException e ) { / / indent : 8 exp : 8 
 + throw e ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = / / indent : 12 exp : 12 
 + writ ) { / / indent : 19 exp : > = 16 
 + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 
 + } catch ( IOException e ) { / / indent : 8 exp : 8 
 + throw e ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = / / indent : 12 exp : 12 
 + writ ) { / / indent : 21 exp : > = 16 
 + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 
 + } catch ( IOException e ) { / / indent : 8 exp : 8 
 + throw e ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 
 + ZipFile zf = new ZipFile ( / / indent : 12 exp : 12 
 + zipFileName ) / / indent : 16 exp : 16 
 + ) { / / indent : 12 exp : > = 8 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 
 + ZipFile zf = new ZipFile ( / / indent : 12 exp : 12 
 + zipFileName ) / / indent : 17 exp : > = 16 
 + ) { / / indent : 12 exp : > = 8 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 
 + ZipFile zf = new ZipFile ( / / indent : 12 exp : 12 
 + zipFileName ) / / indent : 15 exp : > = 16 warn 
 + ) { / / indent : 12 exp : > = 8 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : 8 
 + writer . close ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : 8 
 + writer . close ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 7 exp : 8 warn 
 + 
 + 
 + 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 12 exp : 12 
 + writer . close ( ) ; / / indent : 15 exp : 12 warn 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + 
 + 
 + 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 11 exp : 12 warn 
 + writer . close ( ) ; / / indent : 9 exp : 12 warn 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + 
 + BufferedWriter writer = Files . / / indent : 11 exp : 12 warn 
 + newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 11 exp : 16 warn 
 + writer . close ( ) ; / / indent : 13 exp : 12 warn 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = writ / / indent : 7 exp : 8 warn 
 + ) { / / indent : 7 exp : > = 8 , 12 warn 
 + } catch ( MalformedInputException e ) { / / indent : 8 exp : 8 
 + throw e ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer1 = writ ; / / indent : 8 exp : 8 
 + BufferedWriter writer2 = writ ; / / indent : 12 exp : > = 12 
 + BufferedWriter writer3 = writ ; / / indent : 13 exp : > = 12 
 + BufferedWriter writer4 = writ ; / / indent : 14 exp : > = 12 
 + BufferedWriter writer5 = writ ) { / / indent : 15 exp : > = 12 
 + } catch ( MalformedInputException e ) { / / indent : 8 exp : 8 
 + ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = Files / / indent : 8 exp : 8 
 + . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : > = 12 warn 
 + ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = Files / / indent : 8 exp : 8 
 + . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 13 exp : > = 12 
 + ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( DirectoryStream < Path > ds = Files . newDirectoryStream ( outputFilePath , / / indent : 8 exp : 8 
 + new DirectoryStream . Filter < Path > ( ) { / / indent : 11 exp : > = 12 warn 
 + @ Override / / indent : 16 exp : 16 
 + public boolean accept ( Path path ) { / / indent : 16 exp : 16 
 + return path . toString ( ) . contains ( " " ) ; / / indent : 20 exp : 20 
 + } / / indent : 16 exp : 16 
 + } ) ) / / indent : 12 exp : 12 
 + { / / indent : 8 exp : 8 
 + for ( Path p : ds ) / / indent : 12 exp : 12 
 + ; / / indent : 16 exp : 16 
 + } / / indent : 8 exp : 8 
 + } / / indent : 4 exp : 4 
 + } / / indent : 0 exp : 0 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputTryWithResourcesStrict . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputTryWithResourcesStrict . java 
 new file mode 100644 
 index 0000000 . . 44b70ee 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputTryWithResourcesStrict . java 
 @ @ - 0 , 0 + 1 , 184 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . indentation . indentation ; / / indent : 0 exp : 0 
 + 
 + import java . io . BufferedWriter ; / / indent : 0 exp : 0 
 + import java . io . IOException ; / / indent : 0 exp : 0 
 + import java . nio . charset . Charset ; / / indent : 0 exp : 0 
 + import java . nio . charset . MalformedInputException ; / / indent : 0 exp : 0 
 + import java . nio . charset . StandardCharsets ; / / indent : 0 exp : 0 
 + import java . nio . file . DirectoryStream ; / / indent : 0 exp : 0 
 + import java . nio . file . Files ; / / indent : 0 exp : 0 
 + import java . nio . file . Path ; / / indent : 0 exp : 0 
 + import java . nio . file . Paths ; / / indent : 0 exp : 0 
 + import java . util . zip . ZipFile ; / / indent : 0 exp : 0 
 + 
 + public final class InputTryWithResourcesStrict { / / indent : 0 exp : 0 
 + 
 + private InputTryWithResourcesStrict ( ) { / / indent : 4 exp : 4 
 + 
 + } / / indent : 4 exp : 4 
 + 
 + static void fooMethod ( String zipFileName ) throws IOException { / / indent : 4 exp : 4 
 + 
 + Charset charset = StandardCharsets . US _ ASCII ; / / indent : 8 exp : 8 
 + Path outputFilePath = Paths . get ( zipFileName ) ; / / indent : 8 exp : 8 
 + 
 + try ( / / indent : 8 exp : 8 
 + final BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 0 exp : 12 warn 
 + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 
 + ) { / / indent : 13 exp : 8 , 12 warn 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = Files . / / indent : 12 exp : 12 
 + newBufferedWriter ( outputFilePath , charset ) ; / / indent : 0 exp : 16 warn 
 + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 
 + ) { / / indent : 8 exp : 8 , 12 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = Files . / / indent : 8 exp : 8 
 + newBufferedWriter ( outputFilePath , charset ) ; / / indent : 0 exp : 12 warn 
 + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 
 + ) { / / indent : 12 exp : 8 , 12 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = Files . / / indent : 12 exp : 12 
 + newBufferedWriter ( outputFilePath , charset ) ; / / indent : 16 exp : 16 
 + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 
 + ) { / / indent : 12 exp : 8 , 12 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 
 + ZipFile zf = new ZipFile ( zipFileName ) / / indent : 12 exp : 12 
 + ) { / / indent : 12 exp : 8 , 12 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try { / / indent : 8 exp : 8 
 + try ( / / indent : 12 exp : 12 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 20 exp : 16 warn 
 + writer . flush ( ) ; / / indent : 16 exp : 16 
 + } catch ( MalformedInputException e ) { / / indent : 12 exp : 8 , 12 
 + / / Empty / / indent : 16 exp : 16 
 + } / / indent : 12 exp : 12 
 + } catch ( IOException e ) { / / indent : 8 exp : 8 
 + Integer . parseInt ( " 1 " ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try { / / indent : 8 exp : 8 
 + 
 + } catch ( Exception e ) { / / indent : 8 exp : 8 
 + 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : 8 
 + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 
 + } catch ( Exception e ) { / / indent : 8 exp : 8 
 + 
 + } / / indent : 8 exp : 8 
 + BufferedWriter writ = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = writ ) { / / indent : 8 exp : 8 
 + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 
 + } catch ( IOException e ) { / / indent : 8 exp : 8 
 + throw e ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = / / indent : 8 exp : 8 
 + writ ) { / / indent : 19 exp : 12 warn 
 + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 
 + } catch ( IOException e ) { / / indent : 8 exp : 8 
 + throw e ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = / / indent : 12 exp : 12 
 + writ ) { / / indent : 19 exp : 16 warn 
 + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 
 + } catch ( IOException e ) { / / indent : 8 exp : 8 
 + throw e ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = / / indent : 12 exp : 12 
 + writ ) { / / indent : 21 exp : 16 warn 
 + Integer . parseInt ( " 2 " ) ; / / indent : 12 exp : 12 
 + } catch ( IOException e ) { / / indent : 8 exp : 8 
 + throw e ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 
 + ZipFile zf = new ZipFile ( / / indent : 12 exp : 12 
 + zipFileName ) / / indent : 16 exp : 16 
 + ) { / / indent : 12 exp : 8 , 12 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 
 + ZipFile zf = new ZipFile ( / / indent : 12 exp : 12 
 + zipFileName ) / / indent : 17 exp : 16 warn 
 + ) { / / indent : 12 exp : 8 , 12 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ; / / indent : 12 exp : 12 
 + ZipFile zf = new ZipFile ( / / indent : 12 exp : 12 
 + zipFileName ) / / indent : 15 exp : 16 warn 
 + ) { / / indent : 12 exp : 8 , 12 
 + zf . getName ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : 8 
 + writer . close ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 8 exp : 8 
 + writer . close ( ) ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 7 exp : 8 warn 
 + 
 + 
 + 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 12 exp : 12 
 + writer . close ( ) ; / / indent : 15 exp : 12 warn 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + 
 + 
 + 
 + BufferedWriter writer = Files . newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 11 exp : 12 warn 
 + writer . close ( ) ; / / indent : 9 exp : 12 warn 
 + } / / indent : 8 exp : 8 
 + try ( / / indent : 8 exp : 8 
 + 
 + BufferedWriter writer = Files . / / indent : 11 exp : 12 warn 
 + newBufferedWriter ( outputFilePath , charset ) ) { / / indent : 11 exp : 16 warn 
 + writer . close ( ) ; / / indent : 13 exp : 12 warn 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = writ / / indent : 7 exp : 8 warn 
 + ) { / / indent : 7 exp : 8 , 12 warn 
 + } catch ( MalformedInputException e ) { / / indent : 8 exp : 8 
 + throw e ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = writ / / indent : 9 exp : 8 warn 
 + ) { / / indent : 12 exp : 8 , 12 
 + } catch ( MalformedInputException e ) { / / indent : 8 exp : 8 
 + throw e ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = Files / / indent : 8 exp : 8 
 + . newBufferedWriter ( outputFilePath , charset ) / / indent : 13 exp : 12 warn 
 + ) { / / indent : 12 exp : 8 , 12 
 + } catch ( MalformedInputException e ) { / / indent : 8 exp : 8 
 + throw e ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( BufferedWriter writer = Files / / indent : 8 exp : 8 
 + . newBufferedWriter ( outputFilePath , charset ) / / indent : 11 exp : 12 warn 
 + ) { / / indent : 12 exp : 8 , 12 
 + } catch ( MalformedInputException e ) { / / indent : 8 exp : 8 
 + throw e ; / / indent : 12 exp : 12 
 + } / / indent : 8 exp : 8 
 + try ( DirectoryStream < Path > ds = Files . newDirectoryStream ( outputFilePath , / / indent : 8 exp : 8 
 + new DirectoryStream . Filter < Path > ( ) { / / indent : 12 exp : 12 
 + @ Override / / indent : 16 exp : 16 
 + public boolean accept ( Path path ) { / / indent : 16 exp : 16 
 + return path . toString ( ) . contains ( " " ) ; / / indent : 20 exp : 20 
 + } / / indent : 16 exp : 16 
 + } ) ) / / indent : 12 exp : 12 
 + { / / indent : 8 exp : 8 
 + for ( Path p : ds ) / / indent : 12 exp : 12 
 + ; / / indent : 16 exp : 16 
 + } / / indent : 8 exp : 8 
 + } / / indent : 4 exp : 4 
 + } / / indent : 0 exp : 0

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 2369ad6 . . 5935064 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 514 , 7 + 514 , 7 @ @ 
 < dependency > 
 < groupId > org . apache . maven . wagon < / groupId > 
 < artifactId > wagon - ssh < / artifactId > 
 - < version > 2 . 9 < / version > 
 + < version > 2 . 10 < / version > 
 < / dependency > 
 < / dependencies > 
 < / plugin >
