BLEU SCORE: 0.8633400213704505

TEST MSG: Issue # 2451 : removed excess hierarchy from AbstractParenPadCheck
GENERATED MSG: Issue # 2451 : removed excess hierarchy from LeftCurlyCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java <nl> index 593b1cf . . 87b16bb 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java <nl> @ @ - 19 , 8 + 19 , 12 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> <nl> + import java . util . Locale ; <nl> + <nl> + import org . apache . commons . beanutils . ConversionException ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> @ @ - 31 , 7 + 35 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * @ author Oliver Burn <nl> * / <nl> abstract class AbstractParenPadCheck <nl> - extends AbstractOptionCheck < PadOption > { <nl> + extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 63 , 11 + 67 , 21 @ @ abstract class AbstractParenPadCheck <nl> / * * Close parenthesis literal . * / <nl> private static final char CLOSE _ PARENTHESIS = ' ) ' ; <nl> <nl> + / * * The policy to enforce . * / <nl> + private PadOption option = PadOption . NOSPACE ; <nl> + <nl> / * * <nl> - * Sets the paren pad option to nospace . <nl> + * Set the option to enforce . <nl> + * @ param optionStr string to decode option from <nl> + * @ throws ConversionException if unable to decode <nl> * / <nl> - AbstractParenPadCheck ( ) { <nl> - super ( PadOption . NOSPACE , PadOption . class ) ; <nl> + public void setOption ( String optionStr ) { <nl> + try { <nl> + option = PadOption . valueOf ( optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; <nl> + } <nl> + catch ( IllegalArgumentException iae ) { <nl> + throw new ConversionException ( " unable to parse " + optionStr , iae ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 78 , 11 + 92 , 11 @ @ abstract class AbstractParenPadCheck <nl> final String line = getLines ( ) [ ast . getLineNo ( ) - 1 ] ; <nl> final int after = ast . getColumnNo ( ) + 1 ; <nl> if ( after < line . length ( ) ) { <nl> - if ( getAbstractOption ( ) = = PadOption . NOSPACE <nl> + if ( option = = PadOption . NOSPACE <nl> & & Character . isWhitespace ( line . charAt ( after ) ) ) { <nl> log ( ast . getLineNo ( ) , after , WS _ FOLLOWED , OPEN _ PARENTHESIS ) ; <nl> } <nl> - else if ( getAbstractOption ( ) = = PadOption . SPACE <nl> + else if ( option = = PadOption . SPACE <nl> & & ! Character . isWhitespace ( line . charAt ( after ) ) <nl> & & line . charAt ( after ) ! = CLOSE _ PARENTHESIS ) { <nl> log ( ast . getLineNo ( ) , after , WS _ NOT _ FOLLOWED , OPEN _ PARENTHESIS ) ; <nl> @ @ - 98 , 12 + 112 , 12 @ @ abstract class AbstractParenPadCheck <nl> final String line = getLines ( ) [ ast . getLineNo ( ) - 1 ] ; <nl> final int before = ast . getColumnNo ( ) - 1 ; <nl> if ( before > = 0 ) { <nl> - if ( getAbstractOption ( ) = = PadOption . NOSPACE <nl> + if ( option = = PadOption . NOSPACE <nl> & & Character . isWhitespace ( line . charAt ( before ) ) <nl> & & ! CommonUtils . hasWhitespaceBefore ( before , line ) ) { <nl> log ( ast . getLineNo ( ) , before , WS _ PRECEDED , CLOSE _ PARENTHESIS ) ; <nl> } <nl> - else if ( getAbstractOption ( ) = = PadOption . SPACE <nl> + else if ( option = = PadOption . SPACE <nl> & & ! Character . isWhitespace ( line . charAt ( before ) ) <nl> & & line . charAt ( before ) ! = OPEN _ PARENTHESIS ) { <nl> log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> index ac508f2 . . 962e0df 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> <nl> public class ParenPadCheckTest <nl> extends BaseCheckTestSupport { <nl> @ @ - 239 , 4 + 240 , 13 @ @ public class ParenPadCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputParenPad . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test ( expected = CheckstyleException . class ) <nl> + public void testInvalidOption ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( ParenPadCheck . class ) ; <nl> + checkConfig . addAttribute ( " option " , " invalid _ option " ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputParenPad . java " ) , expected ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 709aa6e . . 9e6db7a 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 42 , 7 + 42 , 7 @ @ <nl> files = " AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java " / > <nl> <nl> < ! - - Tone down the checking for test code - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 329 " / > <nl> + < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 328 " / > <nl> < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > <nl> < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> < suppress checks = " Javadoc " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java <nl> index 6059bf3 . . d8b186f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java <nl> @ @ - 19 , 9 + 19 , 12 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> <nl> + import java . util . regex . Pattern ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . checks . AbstractFormatCheck ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 39 , 7 + 42 , 7 @ @ import com . puppycrawl . tools . checkstyle . checks . AbstractFormatCheck ; <nl> * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > <nl> * @ author < a href = " mailto : solid . danil @ gmail . com " > Danil Lopatin < / a > <nl> * / <nl> - public final class AbstractClassNameCheck extends AbstractFormatCheck { <nl> + public final class AbstractClassNameCheck extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 53 , 19 + 56 , 17 @ @ public final class AbstractClassNameCheck extends AbstractFormatCheck { <nl> * / <nl> public static final String NO _ ABSTRACT _ CLASS _ MODIFIER = " no . abstract . class . modifier " ; <nl> <nl> - / * * Default format for abstract class names . * / <nl> - private static final String DEFAULT _ FORMAT = " ^ Abstract . + $ " ; <nl> - <nl> / * * Whether to ignore checking the modifier . * / <nl> private boolean ignoreModifier ; <nl> <nl> / * * Whether to ignore checking the name . * / <nl> private boolean ignoreName ; <nl> <nl> - / * * Creates new instance of the check . * / <nl> - public AbstractClassNameCheck ( ) { <nl> - super ( DEFAULT _ FORMAT ) ; <nl> - } <nl> + / * * The format string of the regexp . * / <nl> + private String format = " ^ Abstract . + $ " ; <nl> + <nl> + / * * The regexp to match against . * / <nl> + private Pattern regexp = Pattern . compile ( format ) ; <nl> <nl> / * * <nl> * Whether to ignore checking for the { @ code abstract } modifier . <nl> @ @ - 83 , 6 + 84 , 16 @ @ public final class AbstractClassNameCheck extends AbstractFormatCheck { <nl> ignoreName = value ; <nl> } <nl> <nl> + / * * <nl> + * Set the format to the specified regular expression . <nl> + * @ param format a { @ code String } value <nl> + * @ throws org . apache . commons . beanutils . ConversionException unable to parse format <nl> + * / <nl> + public void setFormat ( String format ) { <nl> + this . format = format ; <nl> + regexp = CommonUtils . createPattern ( format ) ; <nl> + } <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> return new int [ ] { TokenTypes . CLASS _ DEF } ; <nl> @ @ - 114 , 7 + 125 , 7 @ @ public final class AbstractClassNameCheck extends AbstractFormatCheck { <nl> / / if class has abstract modifier <nl> if ( ! ignoreName & & ! isMatchingClassName ( className ) ) { <nl> log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> - ILLEGAL _ ABSTRACT _ CLASS _ NAME , className , getFormat ( ) ) ; <nl> + ILLEGAL _ ABSTRACT _ CLASS _ NAME , className , format ) ; <nl> } <nl> } <nl> else if ( ! ignoreModifier & & isMatchingClassName ( className ) ) { <nl> @ @ - 139 , 6 + 150 , 6 @ @ public final class AbstractClassNameCheck extends AbstractFormatCheck { <nl> * @ return true if class name matches format of abstract class names . <nl> * / <nl> private boolean isMatchingClassName ( String className ) { <nl> - return getRegexp ( ) . matcher ( className ) . find ( ) ; <nl> + return regexp . matcher ( className ) . find ( ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> index bacda83 . . b919653 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> @ @ - 110 , 7 + 110 , 6 @ @ public class XDocsPagesTest { <nl> <nl> private static final List < String > UNDOCUMENTED _ PROPERTIES = Arrays . asList ( <nl> " SuppressWithNearbyCommentFilter . fileContents " , <nl> - " AbstractClassNameCheck . compileFlags " , <nl> " ClassTypeParameterNameCheck . compileFlags " , <nl> " ConstantNameCheck . compileFlags " , <nl> " InterfaceTypeParameterNameCheck . compileFlags " , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java <nl> index 549d465 . . 6df625e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java <nl> @ @ - 60 , 6 + 60 , 26 @ @ public class AbstractClassNameCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testCustomFormat ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( AbstractClassNameCheck . class ) ; <nl> + checkConfig . addAttribute ( " ignoreName " , " false " ) ; <nl> + checkConfig . addAttribute ( " ignoreModifier " , " true " ) ; <nl> + final String pattern = " ^ NonAbstract . + $ " ; <nl> + checkConfig . addAttribute ( " format " , pattern ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 3 : 1 : " + getCheckMessage ( ILLEGAL _ ABSTRACT _ CLASS _ NAME , " InputAbstractClassName " , <nl> + pattern ) , <nl> + " 9 : 1 : " + getCheckMessage ( ILLEGAL _ ABSTRACT _ CLASS _ NAME , " AbstractClassOther " , pattern ) , <nl> + " 21 : 1 : " + getCheckMessage ( ILLEGAL _ ABSTRACT _ CLASS _ NAME , " AbstractClassName2 " , <nl> + pattern ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputAbstractClassName . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testIllegalClassType ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( AbstractClassNameCheck . class ) ; <nl> checkConfig . addAttribute ( " ignoreName " , " true " ) ;

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java 
 index 593b1cf . . 87b16bb 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java 
 @ @ - 19 , 8 + 19 , 12 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 
 + import java . util . Locale ; 
 + 
 + import org . apache . commons . beanutils . ConversionException ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 @ @ - 31 , 7 + 35 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * @ author Oliver Burn 
 * / 
 abstract class AbstractParenPadCheck 
 - extends AbstractOptionCheck < PadOption > { 
 + extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 63 , 11 + 67 , 21 @ @ abstract class AbstractParenPadCheck 
 / * * Close parenthesis literal . * / 
 private static final char CLOSE _ PARENTHESIS = ' ) ' ; 
 
 + / * * The policy to enforce . * / 
 + private PadOption option = PadOption . NOSPACE ; 
 + 
 / * * 
 - * Sets the paren pad option to nospace . 
 + * Set the option to enforce . 
 + * @ param optionStr string to decode option from 
 + * @ throws ConversionException if unable to decode 
 * / 
 - AbstractParenPadCheck ( ) { 
 - super ( PadOption . NOSPACE , PadOption . class ) ; 
 + public void setOption ( String optionStr ) { 
 + try { 
 + option = PadOption . valueOf ( optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; 
 + } 
 + catch ( IllegalArgumentException iae ) { 
 + throw new ConversionException ( " unable to parse " + optionStr , iae ) ; 
 + } 
 } 
 
 / * * 
 @ @ - 78 , 11 + 92 , 11 @ @ abstract class AbstractParenPadCheck 
 final String line = getLines ( ) [ ast . getLineNo ( ) - 1 ] ; 
 final int after = ast . getColumnNo ( ) + 1 ; 
 if ( after < line . length ( ) ) { 
 - if ( getAbstractOption ( ) = = PadOption . NOSPACE 
 + if ( option = = PadOption . NOSPACE 
 & & Character . isWhitespace ( line . charAt ( after ) ) ) { 
 log ( ast . getLineNo ( ) , after , WS _ FOLLOWED , OPEN _ PARENTHESIS ) ; 
 } 
 - else if ( getAbstractOption ( ) = = PadOption . SPACE 
 + else if ( option = = PadOption . SPACE 
 & & ! Character . isWhitespace ( line . charAt ( after ) ) 
 & & line . charAt ( after ) ! = CLOSE _ PARENTHESIS ) { 
 log ( ast . getLineNo ( ) , after , WS _ NOT _ FOLLOWED , OPEN _ PARENTHESIS ) ; 
 @ @ - 98 , 12 + 112 , 12 @ @ abstract class AbstractParenPadCheck 
 final String line = getLines ( ) [ ast . getLineNo ( ) - 1 ] ; 
 final int before = ast . getColumnNo ( ) - 1 ; 
 if ( before > = 0 ) { 
 - if ( getAbstractOption ( ) = = PadOption . NOSPACE 
 + if ( option = = PadOption . NOSPACE 
 & & Character . isWhitespace ( line . charAt ( before ) ) 
 & & ! CommonUtils . hasWhitespaceBefore ( before , line ) ) { 
 log ( ast . getLineNo ( ) , before , WS _ PRECEDED , CLOSE _ PARENTHESIS ) ; 
 } 
 - else if ( getAbstractOption ( ) = = PadOption . SPACE 
 + else if ( option = = PadOption . SPACE 
 & & ! Character . isWhitespace ( line . charAt ( before ) ) 
 & & line . charAt ( before ) ! = OPEN _ PARENTHESIS ) { 
 log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 index ac508f2 . . 962e0df 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 
 public class ParenPadCheckTest 
 extends BaseCheckTestSupport { 
 @ @ - 239 , 4 + 240 , 13 @ @ public class ParenPadCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputParenPad . java " ) , expected ) ; 
 } 
 + 
 + @ Test ( expected = CheckstyleException . class ) 
 + public void testInvalidOption ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( ParenPadCheck . class ) ; 
 + checkConfig . addAttribute ( " option " , " invalid _ option " ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , getPath ( " InputParenPad . java " ) , expected ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 709aa6e . . 9e6db7a 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 42 , 7 + 42 , 7 @ @ 
 files = " AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java " / > 
 
 < ! - - Tone down the checking for test code - - > 
 - < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 329 " / > 
 + < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 328 " / > 
 < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > 
 < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 < suppress checks = " Javadoc " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java 
 index 6059bf3 . . d8b186f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java 
 @ @ - 19 , 9 + 19 , 12 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . naming ; 
 
 + import java . util . regex . Pattern ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . checks . AbstractFormatCheck ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * < p > 
 @ @ - 39 , 7 + 42 , 7 @ @ import com . puppycrawl . tools . checkstyle . checks . AbstractFormatCheck ; 
 * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > 
 * @ author < a href = " mailto : solid . danil @ gmail . com " > Danil Lopatin < / a > 
 * / 
 - public final class AbstractClassNameCheck extends AbstractFormatCheck { 
 + public final class AbstractClassNameCheck extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 53 , 19 + 56 , 17 @ @ public final class AbstractClassNameCheck extends AbstractFormatCheck { 
 * / 
 public static final String NO _ ABSTRACT _ CLASS _ MODIFIER = " no . abstract . class . modifier " ; 
 
 - / * * Default format for abstract class names . * / 
 - private static final String DEFAULT _ FORMAT = " ^ Abstract . + $ " ; 
 - 
 / * * Whether to ignore checking the modifier . * / 
 private boolean ignoreModifier ; 
 
 / * * Whether to ignore checking the name . * / 
 private boolean ignoreName ; 
 
 - / * * Creates new instance of the check . * / 
 - public AbstractClassNameCheck ( ) { 
 - super ( DEFAULT _ FORMAT ) ; 
 - } 
 + / * * The format string of the regexp . * / 
 + private String format = " ^ Abstract . + $ " ; 
 + 
 + / * * The regexp to match against . * / 
 + private Pattern regexp = Pattern . compile ( format ) ; 
 
 / * * 
 * Whether to ignore checking for the { @ code abstract } modifier . 
 @ @ - 83 , 6 + 84 , 16 @ @ public final class AbstractClassNameCheck extends AbstractFormatCheck { 
 ignoreName = value ; 
 } 
 
 + / * * 
 + * Set the format to the specified regular expression . 
 + * @ param format a { @ code String } value 
 + * @ throws org . apache . commons . beanutils . ConversionException unable to parse format 
 + * / 
 + public void setFormat ( String format ) { 
 + this . format = format ; 
 + regexp = CommonUtils . createPattern ( format ) ; 
 + } 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 return new int [ ] { TokenTypes . CLASS _ DEF } ; 
 @ @ - 114 , 7 + 125 , 7 @ @ public final class AbstractClassNameCheck extends AbstractFormatCheck { 
 / / if class has abstract modifier 
 if ( ! ignoreName & & ! isMatchingClassName ( className ) ) { 
 log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 - ILLEGAL _ ABSTRACT _ CLASS _ NAME , className , getFormat ( ) ) ; 
 + ILLEGAL _ ABSTRACT _ CLASS _ NAME , className , format ) ; 
 } 
 } 
 else if ( ! ignoreModifier & & isMatchingClassName ( className ) ) { 
 @ @ - 139 , 6 + 150 , 6 @ @ public final class AbstractClassNameCheck extends AbstractFormatCheck { 
 * @ return true if class name matches format of abstract class names . 
 * / 
 private boolean isMatchingClassName ( String className ) { 
 - return getRegexp ( ) . matcher ( className ) . find ( ) ; 
 + return regexp . matcher ( className ) . find ( ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 index bacda83 . . b919653 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 @ @ - 110 , 7 + 110 , 6 @ @ public class XDocsPagesTest { 
 
 private static final List < String > UNDOCUMENTED _ PROPERTIES = Arrays . asList ( 
 " SuppressWithNearbyCommentFilter . fileContents " , 
 - " AbstractClassNameCheck . compileFlags " , 
 " ClassTypeParameterNameCheck . compileFlags " , 
 " ConstantNameCheck . compileFlags " , 
 " InterfaceTypeParameterNameCheck . compileFlags " , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java 
 index 549d465 . . 6df625e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java 
 @ @ - 60 , 6 + 60 , 26 @ @ public class AbstractClassNameCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public void testCustomFormat ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( AbstractClassNameCheck . class ) ; 
 + checkConfig . addAttribute ( " ignoreName " , " false " ) ; 
 + checkConfig . addAttribute ( " ignoreModifier " , " true " ) ; 
 + final String pattern = " ^ NonAbstract . + $ " ; 
 + checkConfig . addAttribute ( " format " , pattern ) ; 
 + 
 + final String [ ] expected = { 
 + " 3 : 1 : " + getCheckMessage ( ILLEGAL _ ABSTRACT _ CLASS _ NAME , " InputAbstractClassName " , 
 + pattern ) , 
 + " 9 : 1 : " + getCheckMessage ( ILLEGAL _ ABSTRACT _ CLASS _ NAME , " AbstractClassOther " , pattern ) , 
 + " 21 : 1 : " + getCheckMessage ( ILLEGAL _ ABSTRACT _ CLASS _ NAME , " AbstractClassName2 " , 
 + pattern ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " InputAbstractClassName . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testIllegalClassType ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( AbstractClassNameCheck . class ) ; 
 checkConfig . addAttribute ( " ignoreName " , " true " ) ;
