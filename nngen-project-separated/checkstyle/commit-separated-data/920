BLEU SCORE: 0.02383853510228548

TEST MSG: Issue # 3089 : documentation was extended for EmptyLineSeparator
GENERATED MSG: Fix comma replaced with period in docs

TEST DIFF (one line): diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml <nl> index 8a9c905 . . 49513b7 100644 <nl> - - - a / src / xdocs / config _ whitespace . xml <nl> + + + b / src / xdocs / config _ whitespace . xml <nl> @ @ - 216 , 6 + 216 , 9 @ @ for ( Iterator foo = very . long . line . iterator ( ) ; <nl> fields , constructors , methods , nested classes , <nl> static initializers and instance initializers . <nl> < / p > <nl> + < p > <nl> + ATTENTION : empty line separator is required between AST siblings , not after line where token is found . <nl> + < / p > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> index 5b30598 . . 90fb002 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> @ @ - 106 , 14 + 106 , 66 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> * <nl> - * @ author maxvetrenko <nl> + * < p > <nl> + * Example of declarations with multiple empty lines between class members ( allowed by default ) : <nl> + * < / p > <nl> + * <nl> + * < pre > <nl> + * / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + * / / HEADER <nl> + * / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + * <nl> + * <nl> + * package com . puppycrawl . tools . checkstyle . whitespace ; <nl> + * <nl> + * <nl> + * <nl> + * import java . io . Serializable ; <nl> + * <nl> + * <nl> + * class Foo <nl> + * { <nl> + * public static final int FOO _ CONST = 1 ; <nl> + * <nl> + * <nl> + * <nl> + * public void foo ( ) { } <nl> + * } <nl> + * < / pre > <nl> + * < p > <nl> + * An example how to disallow multiple empty lines between class members : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = " EmptyLineSeparator " & gt ; <nl> + * & lt ; property name = " allowMultipleEmptyLines " value = " false " / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> * <nl> + * @ author maxvetrenko <nl> + * @ author < a href = " mailto : nesterenko - aleksey @ list . ru " > Aleksey Nesterenko < / a > <nl> * / <nl> public class EmptyLineSeparatorCheck extends Check <nl> { <nl> + <nl> + / * * <nl> + * A key is pointing to the warning message empty . line . separator in " messages . properties " <nl> + * file . <nl> + * / <nl> + public static final String MSG _ SHOULD _ BE _ SEPARATED = " empty . line . separator " ; <nl> + <nl> + / * * <nl> + * A key is pointing to the warning message empty . line . separator . multiple . lines <nl> + * in " messages . properties " <nl> + * file . <nl> + * / <nl> + public static final String MSG _ MULTIPLE _ LINES = " empty . line . separator . multiple . lines " ; <nl> + <nl> / * * * / <nl> private boolean allowNoEmptyLineBetweenFields ; <nl> <nl> + / * * Allows multiple empty lines between class members . * / <nl> + private boolean allowMultipleEmptyLines = true ; <nl> + <nl> / * * <nl> * Allow no empty line between fields . <nl> * @ param allow <nl> @ @ - 124 , 6 + 176 , 15 @ @ public class EmptyLineSeparatorCheck extends Check <nl> allowNoEmptyLineBetweenFields = allow ; <nl> } <nl> <nl> + / * * <nl> + * Allow multiple empty lines between class members . <nl> + * @ param allow User ' s value . <nl> + * / <nl> + public void setAllowMultipleEmptyLines ( boolean allow ) <nl> + { <nl> + allowMultipleEmptyLines = allow ; <nl> + } <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> { <nl> @ @ - 146 , 44 + 207 , 75 @ @ public class EmptyLineSeparatorCheck extends Check <nl> { <nl> final DetailAST nextToken = ast . getNextSibling ( ) ; <nl> <nl> - if ( nextToken ! = null & & nextToken . getType ( ) ! = TokenTypes . RCURLY ) { <nl> + if ( nextToken ! = null ) { <nl> final int astType = ast . getType ( ) ; <nl> switch ( astType ) { <nl> case TokenTypes . VARIABLE _ DEF : <nl> if ( isTypeField ( ast ) & & ! hasEmptyLineAfter ( ast ) ) { <nl> if ( allowNoEmptyLineBetweenFields <nl> - & & nextToken . getType ( ) ! = TokenTypes . VARIABLE _ DEF ) <nl> + & & nextToken . getType ( ) ! = TokenTypes . VARIABLE _ DEF <nl> + & & nextToken . getType ( ) ! = TokenTypes . RCURLY ) <nl> { <nl> - log ( nextToken . getLineNo ( ) , " empty . line . separator " , <nl> + log ( nextToken . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , <nl> nextToken . getText ( ) ) ; <nl> } <nl> - else if ( ! allowNoEmptyLineBetweenFields ) { <nl> - log ( nextToken . getLineNo ( ) , " empty . line . separator " , <nl> + else if ( ( ! allowNoEmptyLineBetweenFields | | ! allowMultipleEmptyLines ) <nl> + & & nextToken . getType ( ) ! = TokenTypes . RCURLY ) <nl> + { <nl> + log ( nextToken . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , <nl> nextToken . getText ( ) ) ; <nl> } <nl> } <nl> + if ( ! allowMultipleEmptyLines & & isTypeField ( ast ) <nl> + & & isPrePreviousLineEmpty ( ast ) ) <nl> + { <nl> + log ( ast . getLineNo ( ) , MSG _ MULTIPLE _ LINES , ast . getText ( ) ) ; <nl> + } <nl> break ; <nl> case TokenTypes . IMPORT : <nl> if ( astType ! = nextToken . getType ( ) & & ! hasEmptyLineAfter ( ast ) <nl> | | ( ast . getLineNo ( ) > 1 & & ! hasEmptyLineBefore ( ast ) <nl> & & ast . getPreviousSibling ( ) = = null ) ) <nl> { <nl> - log ( nextToken . getLineNo ( ) , " empty . line . separator " , nextToken . getText ( ) ) ; <nl> + log ( nextToken . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , nextToken . getText ( ) ) ; <nl> + } <nl> + if ( ! allowMultipleEmptyLines & & isPrePreviousLineEmpty ( ast ) ) { <nl> + log ( ast . getLineNo ( ) , MSG _ MULTIPLE _ LINES , ast . getText ( ) ) ; <nl> } <nl> break ; <nl> case TokenTypes . PACKAGE _ DEF : <nl> if ( ast . getLineNo ( ) > 1 & & ! hasEmptyLineBefore ( ast ) ) { <nl> - log ( ast . getLineNo ( ) , " empty . line . separator " , ast . getText ( ) ) ; <nl> + log ( ast . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , ast . getText ( ) ) ; <nl> + } <nl> + if ( ! allowMultipleEmptyLines & & isPrePreviousLineEmpty ( ast ) ) { <nl> + log ( ast . getLineNo ( ) , MSG _ MULTIPLE _ LINES , ast . getText ( ) ) ; <nl> } <nl> default : <nl> - if ( ! hasEmptyLineAfter ( ast ) ) { <nl> - log ( nextToken . getLineNo ( ) , " empty . line . separator " , nextToken . getText ( ) ) ; <nl> + if ( nextToken . getType ( ) ! = TokenTypes . RCURLY & & ! hasEmptyLineAfter ( ast ) ) { <nl> + log ( nextToken . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , nextToken . getText ( ) ) ; <nl> + } <nl> + if ( ! allowMultipleEmptyLines & & isPrePreviousLineEmpty ( ast ) ) { <nl> + log ( ast . getLineNo ( ) , MSG _ MULTIPLE _ LINES , ast . getText ( ) ) ; <nl> } <nl> } <nl> } <nl> } <nl> <nl> / * * <nl> + * Checks if a token has empty pre - previous line . <nl> + * @ param token DetailAST token . <nl> + * @ return true , if token has empty lines before . <nl> + * / <nl> + private boolean isPrePreviousLineEmpty ( DetailAST token ) <nl> + { <nl> + final int lineNo = token . getLineNo ( ) ; <nl> + / / 3 is the number of the pre - previous line because the numbering starts from zero . <nl> + final int number = 3 ; <nl> + final String prePreviousLine = getLines ( ) [ lineNo - number ] ; <nl> + return prePreviousLine . trim ( ) . isEmpty ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Checks if token have empty line after . <nl> * @ param token token . <nl> * @ return true if token have empty line after . <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / messages . properties <nl> index f6776e7 . . 0f2cbe4 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / messages . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / messages . properties <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> empty . line . separator = ' ' { 0 } ' ' should be separated from previous statement . <nl> + empty . line . separator . multiple . lines = ' ' { 0 } ' ' has more than 1 empty lines before . <nl> <nl> containsTab = Line contains a tab character . <nl> file . containsTab = File contains tab characters ( this is the first instance ) . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> index f004e2f . . 2c34b18 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> @ @ - 66 , 4 + 66 , 19 @ @ public class EmptyLineSeparatorCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " whitespace / InputEmptyLineSeparatorCheckHeader . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testMultipleEmptyLinesBetweenClassMembers ( ) throws Exception <nl> + { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowMultipleEmptyLines " , " false " ) ; <nl> + final String [ ] expected = { <nl> + " 21 : ' package ' has more than 1 empty lines before . " , <nl> + " 24 : ' import ' has more than 1 empty lines before . " , <nl> + " 33 : ' VARIABLE _ DEF ' has more than 1 empty lines before . " , <nl> + " 38 : ' VARIABLE _ DEF ' has more than 1 empty lines before . " , <nl> + " 43 : ' METHOD _ DEF ' has more than 1 empty lines before . " , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " whitespace / InputEmptyLineSeparatorCheckMultipleEmptyLines . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheck . java <nl> index 75eea9a . . a962194 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheck . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheck . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . concurrent . Callable ; <nl> import java . util . Collections ; <nl> - import com . google . common . base . CharMatcher ; <nl> + <nl> import com . google . common . io . CharSource ; <nl> <nl> import javax . swing . AbstractAction ; <nl> @ @ - 34 , 29 + 34 , 29 @ @ import org . apache . commons . beanutils . locale . converters . ByteLocaleConverter ; <nl> import org . apache . commons . beanutils . BasicDynaBean ; <nl> class InputEmptyLineSeparatorCheck <nl> { <nl> - 	 public static final double FOO _ PI = 3 . 1415 ; <nl> - 	 private boolean flag = true ; <nl> - 	 static { <nl> + public static final double FOO _ PI = 3 . 1415 ; <nl> + private boolean flag = true ; <nl> + static { <nl> / / empty static initializer <nl> - 	 } <nl> - 	 / / separator blank line <nl> - 	 { <nl> - 	 	 / / empty instance initializer <nl> - 	 } <nl> - 	 / / separator blank line <nl> - 	 / * * <nl> - 	 * <nl> - 	 * <nl> - 	 * <nl> - 	 * / <nl> - 	 private InputEmptyLineSeparatorCheck ( ) <nl> - 	 { <nl> - 	 	 / / empty <nl> - 	 } <nl> - 	 / / separator blank line <nl> + } <nl> + / / separator blank line <nl> + { <nl> + / / empty instance initializer <nl> + } <nl> + / / separator blank line <nl> + / * * <nl> + * <nl> + * <nl> + * <nl> + * / <nl> + private InputEmptyLineSeparatorCheck ( ) <nl> + { <nl> + / / empty <nl> + } <nl> + / / separator blank line <nl> public int compareTo ( Object aObject ) <nl> { <nl> - 	 int number = 0 ; <nl> + int number = 0 ; <nl> return 0 ; <nl> } <nl> / * * <nl> @ @ - 78 , 18 + 78 , 34 @ @ class InputEmptyLineSeparatorCheck <nl> } <nl> / / separator blank line <nl> class InnerClass { <nl> - 	 <nl> - 	 public static final double FOO _ PI _ INNER = 3 . 1415 ; <nl> - 	 / / separator blank line <nl> - 	 private boolean flagInner = true ; <nl> - 	 / / separator blank line <nl> - 	 { <nl> - 	 	 / / empty instance initializer <nl> - 	 } <nl> - 	 / / separator blank line <nl> - 	 private InnerClass ( ) <nl> - 	 { <nl> - 	 	 / / empty <nl> - 	 } <nl> + <nl> + public static final double FOO _ PI _ INNER = 3 . 1415 ; <nl> + / / separator blank line <nl> + private boolean flagInner = true ; <nl> + / / separator blank line <nl> + { <nl> + / / empty instance initializer <nl> + } <nl> + / / separator blank line <nl> + private InnerClass ( ) <nl> + { <nl> + / / empty <nl> + } <nl> + } <nl> + } <nl> + <nl> + class Class2 { <nl> + public int compareTo ( InputEmptyLineSeparatorCheck aObject ) / / ok <nl> + { <nl> + int number = 0 ; <nl> + return 0 ; <nl> } <nl> + <nl> + Class2 anon = new Class2 ( ) { <nl> + public int compareTo ( InputEmptyLineSeparatorCheck aObject ) / / ok <nl> + { <nl> + int number = 0 ; <nl> + return 0 ; <nl> + } <nl> + } ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheckMultipleEmptyLines . java b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheckMultipleEmptyLines . java <nl> new file mode 100644 <nl> index 0000000 . . 0bf91f8 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheckMultipleEmptyLines . java <nl> @ @ - 0 , 0 + 1 , 47 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2014 Oliver Burn <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + <nl> + package com . puppycrawl . tools . checkstyle . whitespace ; <nl> + <nl> + <nl> + import java . util . * ; <nl> + <nl> + import java . io . * ; <nl> + <nl> + <nl> + public class InputEmptyLineSeparatorCheckMultipleEmptyLines <nl> + { <nl> + <nl> + <nl> + private int counter ; <nl> + <nl> + <nl> + <nl> + <nl> + private Object obj = null ; <nl> + <nl> + private int k ; <nl> + <nl> + <nl> + private static void foo ( ) { } <nl> + <nl> + private static void foo1 ( ) { } <nl> + <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml 
 index 8a9c905 . . 49513b7 100644 
 - - - a / src / xdocs / config _ whitespace . xml 
 + + + b / src / xdocs / config _ whitespace . xml 
 @ @ - 216 , 6 + 216 , 9 @ @ for ( Iterator foo = very . long . line . iterator ( ) ; 
 fields , constructors , methods , nested classes , 
 static initializers and instance initializers . 
 < / p > 
 + < p > 
 + ATTENTION : empty line separator is required between AST siblings , not after line where token is found . 
 + < / p > 
 < / subsection > 
 
 < subsection name = " Properties " >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 index 5b30598 . . 90fb002 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 @ @ - 106 , 14 + 106 , 66 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 * 
 - * @ author maxvetrenko 
 + * < p > 
 + * Example of declarations with multiple empty lines between class members ( allowed by default ) : 
 + * < / p > 
 + * 
 + * < pre > 
 + * / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + * / / HEADER 
 + * / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + * 
 + * 
 + * package com . puppycrawl . tools . checkstyle . whitespace ; 
 + * 
 + * 
 + * 
 + * import java . io . Serializable ; 
 + * 
 + * 
 + * class Foo 
 + * { 
 + * public static final int FOO _ CONST = 1 ; 
 + * 
 + * 
 + * 
 + * public void foo ( ) { } 
 + * } 
 + * < / pre > 
 + * < p > 
 + * An example how to disallow multiple empty lines between class members : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = " EmptyLineSeparator " & gt ; 
 + * & lt ; property name = " allowMultipleEmptyLines " value = " false " / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 * 
 + * @ author maxvetrenko 
 + * @ author < a href = " mailto : nesterenko - aleksey @ list . ru " > Aleksey Nesterenko < / a > 
 * / 
 public class EmptyLineSeparatorCheck extends Check 
 { 
 + 
 + / * * 
 + * A key is pointing to the warning message empty . line . separator in " messages . properties " 
 + * file . 
 + * / 
 + public static final String MSG _ SHOULD _ BE _ SEPARATED = " empty . line . separator " ; 
 + 
 + / * * 
 + * A key is pointing to the warning message empty . line . separator . multiple . lines 
 + * in " messages . properties " 
 + * file . 
 + * / 
 + public static final String MSG _ MULTIPLE _ LINES = " empty . line . separator . multiple . lines " ; 
 + 
 / * * * / 
 private boolean allowNoEmptyLineBetweenFields ; 
 
 + / * * Allows multiple empty lines between class members . * / 
 + private boolean allowMultipleEmptyLines = true ; 
 + 
 / * * 
 * Allow no empty line between fields . 
 * @ param allow 
 @ @ - 124 , 6 + 176 , 15 @ @ public class EmptyLineSeparatorCheck extends Check 
 allowNoEmptyLineBetweenFields = allow ; 
 } 
 
 + / * * 
 + * Allow multiple empty lines between class members . 
 + * @ param allow User ' s value . 
 + * / 
 + public void setAllowMultipleEmptyLines ( boolean allow ) 
 + { 
 + allowMultipleEmptyLines = allow ; 
 + } 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) 
 { 
 @ @ - 146 , 44 + 207 , 75 @ @ public class EmptyLineSeparatorCheck extends Check 
 { 
 final DetailAST nextToken = ast . getNextSibling ( ) ; 
 
 - if ( nextToken ! = null & & nextToken . getType ( ) ! = TokenTypes . RCURLY ) { 
 + if ( nextToken ! = null ) { 
 final int astType = ast . getType ( ) ; 
 switch ( astType ) { 
 case TokenTypes . VARIABLE _ DEF : 
 if ( isTypeField ( ast ) & & ! hasEmptyLineAfter ( ast ) ) { 
 if ( allowNoEmptyLineBetweenFields 
 - & & nextToken . getType ( ) ! = TokenTypes . VARIABLE _ DEF ) 
 + & & nextToken . getType ( ) ! = TokenTypes . VARIABLE _ DEF 
 + & & nextToken . getType ( ) ! = TokenTypes . RCURLY ) 
 { 
 - log ( nextToken . getLineNo ( ) , " empty . line . separator " , 
 + log ( nextToken . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , 
 nextToken . getText ( ) ) ; 
 } 
 - else if ( ! allowNoEmptyLineBetweenFields ) { 
 - log ( nextToken . getLineNo ( ) , " empty . line . separator " , 
 + else if ( ( ! allowNoEmptyLineBetweenFields | | ! allowMultipleEmptyLines ) 
 + & & nextToken . getType ( ) ! = TokenTypes . RCURLY ) 
 + { 
 + log ( nextToken . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , 
 nextToken . getText ( ) ) ; 
 } 
 } 
 + if ( ! allowMultipleEmptyLines & & isTypeField ( ast ) 
 + & & isPrePreviousLineEmpty ( ast ) ) 
 + { 
 + log ( ast . getLineNo ( ) , MSG _ MULTIPLE _ LINES , ast . getText ( ) ) ; 
 + } 
 break ; 
 case TokenTypes . IMPORT : 
 if ( astType ! = nextToken . getType ( ) & & ! hasEmptyLineAfter ( ast ) 
 | | ( ast . getLineNo ( ) > 1 & & ! hasEmptyLineBefore ( ast ) 
 & & ast . getPreviousSibling ( ) = = null ) ) 
 { 
 - log ( nextToken . getLineNo ( ) , " empty . line . separator " , nextToken . getText ( ) ) ; 
 + log ( nextToken . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , nextToken . getText ( ) ) ; 
 + } 
 + if ( ! allowMultipleEmptyLines & & isPrePreviousLineEmpty ( ast ) ) { 
 + log ( ast . getLineNo ( ) , MSG _ MULTIPLE _ LINES , ast . getText ( ) ) ; 
 } 
 break ; 
 case TokenTypes . PACKAGE _ DEF : 
 if ( ast . getLineNo ( ) > 1 & & ! hasEmptyLineBefore ( ast ) ) { 
 - log ( ast . getLineNo ( ) , " empty . line . separator " , ast . getText ( ) ) ; 
 + log ( ast . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , ast . getText ( ) ) ; 
 + } 
 + if ( ! allowMultipleEmptyLines & & isPrePreviousLineEmpty ( ast ) ) { 
 + log ( ast . getLineNo ( ) , MSG _ MULTIPLE _ LINES , ast . getText ( ) ) ; 
 } 
 default : 
 - if ( ! hasEmptyLineAfter ( ast ) ) { 
 - log ( nextToken . getLineNo ( ) , " empty . line . separator " , nextToken . getText ( ) ) ; 
 + if ( nextToken . getType ( ) ! = TokenTypes . RCURLY & & ! hasEmptyLineAfter ( ast ) ) { 
 + log ( nextToken . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , nextToken . getText ( ) ) ; 
 + } 
 + if ( ! allowMultipleEmptyLines & & isPrePreviousLineEmpty ( ast ) ) { 
 + log ( ast . getLineNo ( ) , MSG _ MULTIPLE _ LINES , ast . getText ( ) ) ; 
 } 
 } 
 } 
 } 
 
 / * * 
 + * Checks if a token has empty pre - previous line . 
 + * @ param token DetailAST token . 
 + * @ return true , if token has empty lines before . 
 + * / 
 + private boolean isPrePreviousLineEmpty ( DetailAST token ) 
 + { 
 + final int lineNo = token . getLineNo ( ) ; 
 + / / 3 is the number of the pre - previous line because the numbering starts from zero . 
 + final int number = 3 ; 
 + final String prePreviousLine = getLines ( ) [ lineNo - number ] ; 
 + return prePreviousLine . trim ( ) . isEmpty ( ) ; 
 + } 
 + 
 + / * * 
 * Checks if token have empty line after . 
 * @ param token token . 
 * @ return true if token have empty line after . 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / messages . properties 
 index f6776e7 . . 0f2cbe4 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / messages . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / messages . properties 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 empty . line . separator = ' ' { 0 } ' ' should be separated from previous statement . 
 + empty . line . separator . multiple . lines = ' ' { 0 } ' ' has more than 1 empty lines before . 
 
 containsTab = Line contains a tab character . 
 file . containsTab = File contains tab characters ( this is the first instance ) . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 index f004e2f . . 2c34b18 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 @ @ - 66 , 4 + 66 , 19 @ @ public class EmptyLineSeparatorCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " whitespace / InputEmptyLineSeparatorCheckHeader . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testMultipleEmptyLinesBetweenClassMembers ( ) throws Exception 
 + { 
 + DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; 
 + checkConfig . addAttribute ( " allowMultipleEmptyLines " , " false " ) ; 
 + final String [ ] expected = { 
 + " 21 : ' package ' has more than 1 empty lines before . " , 
 + " 24 : ' import ' has more than 1 empty lines before . " , 
 + " 33 : ' VARIABLE _ DEF ' has more than 1 empty lines before . " , 
 + " 38 : ' VARIABLE _ DEF ' has more than 1 empty lines before . " , 
 + " 43 : ' METHOD _ DEF ' has more than 1 empty lines before . " , 
 + } ; 
 + verify ( checkConfig , getPath ( " whitespace / InputEmptyLineSeparatorCheckMultipleEmptyLines . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheck . java 
 index 75eea9a . . a962194 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheck . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheck . java 
 @ @ - 25 , 7 + 25 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . concurrent . Callable ; 
 import java . util . Collections ; 
 - import com . google . common . base . CharMatcher ; 
 + 
 import com . google . common . io . CharSource ; 
 
 import javax . swing . AbstractAction ; 
 @ @ - 34 , 29 + 34 , 29 @ @ import org . apache . commons . beanutils . locale . converters . ByteLocaleConverter ; 
 import org . apache . commons . beanutils . BasicDynaBean ; 
 class InputEmptyLineSeparatorCheck 
 { 
 - 	 public static final double FOO _ PI = 3 . 1415 ; 
 - 	 private boolean flag = true ; 
 - 	 static { 
 + public static final double FOO _ PI = 3 . 1415 ; 
 + private boolean flag = true ; 
 + static { 
 / / empty static initializer 
 - 	 } 
 - 	 / / separator blank line 
 - 	 { 
 - 	 	 / / empty instance initializer 
 - 	 } 
 - 	 / / separator blank line 
 - 	 / * * 
 - 	 * 
 - 	 * 
 - 	 * 
 - 	 * / 
 - 	 private InputEmptyLineSeparatorCheck ( ) 
 - 	 { 
 - 	 	 / / empty 
 - 	 } 
 - 	 / / separator blank line 
 + } 
 + / / separator blank line 
 + { 
 + / / empty instance initializer 
 + } 
 + / / separator blank line 
 + / * * 
 + * 
 + * 
 + * 
 + * / 
 + private InputEmptyLineSeparatorCheck ( ) 
 + { 
 + / / empty 
 + } 
 + / / separator blank line 
 public int compareTo ( Object aObject ) 
 { 
 - 	 int number = 0 ; 
 + int number = 0 ; 
 return 0 ; 
 } 
 / * * 
 @ @ - 78 , 18 + 78 , 34 @ @ class InputEmptyLineSeparatorCheck 
 } 
 / / separator blank line 
 class InnerClass { 
 - 	 
 - 	 public static final double FOO _ PI _ INNER = 3 . 1415 ; 
 - 	 / / separator blank line 
 - 	 private boolean flagInner = true ; 
 - 	 / / separator blank line 
 - 	 { 
 - 	 	 / / empty instance initializer 
 - 	 } 
 - 	 / / separator blank line 
 - 	 private InnerClass ( ) 
 - 	 { 
 - 	 	 / / empty 
 - 	 } 
 + 
 + public static final double FOO _ PI _ INNER = 3 . 1415 ; 
 + / / separator blank line 
 + private boolean flagInner = true ; 
 + / / separator blank line 
 + { 
 + / / empty instance initializer 
 + } 
 + / / separator blank line 
 + private InnerClass ( ) 
 + { 
 + / / empty 
 + } 
 + } 
 + } 
 + 
 + class Class2 { 
 + public int compareTo ( InputEmptyLineSeparatorCheck aObject ) / / ok 
 + { 
 + int number = 0 ; 
 + return 0 ; 
 } 
 + 
 + Class2 anon = new Class2 ( ) { 
 + public int compareTo ( InputEmptyLineSeparatorCheck aObject ) / / ok 
 + { 
 + int number = 0 ; 
 + return 0 ; 
 + } 
 + } ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheckMultipleEmptyLines . java b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheckMultipleEmptyLines . java 
 new file mode 100644 
 index 0000000 . . 0bf91f8 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorCheckMultipleEmptyLines . java 
 @ @ - 0 , 0 + 1 , 47 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2014 Oliver Burn 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + 
 + package com . puppycrawl . tools . checkstyle . whitespace ; 
 + 
 + 
 + import java . util . * ; 
 + 
 + import java . io . * ; 
 + 
 + 
 + public class InputEmptyLineSeparatorCheckMultipleEmptyLines 
 + { 
 + 
 + 
 + private int counter ; 
 + 
 + 
 + 
 + 
 + private Object obj = null ; 
 + 
 + private int k ; 
 + 
 + 
 + private static void foo ( ) { } 
 + 
 + private static void foo1 ( ) { } 
 + 
 + } 
 \ No newline at end of file
