BLEU SCORE: 0.8633400213704505

TEST MSG: Issue # 2451 : removed excess hierarchy from SeparatorWrapCheck
GENERATED MSG: Issue # 2451 : removed excess hierarchy from OperatorWrapCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheck . java <nl> index 037195b . . 4a2c1ef 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheck . java <nl> @ @ - 19 , 11 + 19 , 14 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> <nl> + import java . util . Locale ; <nl> + <nl> + import org . apache . commons . beanutils . ConversionException ; <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 80 , 7 + 83 , 7 @ @ import com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck ; <nl> * @ author maxvetrenko <nl> * / <nl> public class SeparatorWrapCheck <nl> - extends AbstractOptionCheck < WrapOption > { <nl> + extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 94 , 11 + 97 , 21 @ @ public class SeparatorWrapCheck <nl> * / <nl> public static final String LINE _ NEW = " line . new " ; <nl> <nl> + / * * The policy to enforce . * / <nl> + private WrapOption option = WrapOption . EOL ; <nl> + <nl> / * * <nl> - * Sets the comma wrap option to end of the line . <nl> + * Set the option to enforce . <nl> + * @ param optionStr string to decode option from <nl> + * @ throws ConversionException if unable to decode <nl> * / <nl> - public SeparatorWrapCheck ( ) { <nl> - super ( WrapOption . EOL , WrapOption . class ) ; <nl> + public void setOption ( String optionStr ) { <nl> + try { <nl> + option = WrapOption . valueOf ( optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; <nl> + } <nl> + catch ( IllegalArgumentException iae ) { <nl> + throw new ConversionException ( " unable to parse " + optionStr , iae ) ; <nl> + } <nl> } <nl> <nl> @ Override <nl> @ @ - 139 , 13 + 152 , 12 @ @ public class SeparatorWrapCheck <nl> currentLine . substring ( colNo + text . length ( ) ) . trim ( ) ; <nl> final String substringBeforeToken = <nl> currentLine . substring ( 0 , colNo ) . trim ( ) ; <nl> - final WrapOption wSp = getAbstractOption ( ) ; <nl> <nl> - if ( wSp = = WrapOption . EOL <nl> + if ( option = = WrapOption . EOL <nl> & & substringBeforeToken . isEmpty ( ) ) { <nl> log ( lineNo , colNo , LINE _ PREVIOUS , text ) ; <nl> } <nl> - else if ( wSp = = WrapOption . NL <nl> + else if ( option = = WrapOption . NL <nl> & & substringAfterToken . isEmpty ( ) ) { <nl> log ( lineNo , colNo , LINE _ NEW , text ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java <nl> index 1a1e55c . . 4e654e8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java <nl> @ @ - 25 , 12 + 25 , 14 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . SeparatorWrapChe <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> + import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class SeparatorWrapCheckTest <nl> @ @ - 79 , 4 + 81 , 12 @ @ public class SeparatorWrapCheckTest <nl> } ; <nl> Assert . assertArrayEquals ( expected , actual ) ; <nl> } <nl> + <nl> + @ Test ( expected = CheckstyleException . class ) <nl> + public void testInvalidOption ( ) throws Exception { <nl> + checkConfig . addAttribute ( " option " , " invalid _ option " ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputSeparatorWrap . java " ) , expected ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index 6884859 . . 54a4f70 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 376 , 7 + 376 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verifyWarns ( checkConfig , getPath ( " IndentationCorrectIfAndParameterInput . java " ) , expected ) ; <nl> + verifyWarns ( checkConfig , getPath ( " InputIndentationCorrectIfAndParameter . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCorrectIfAndParameterInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCorrectIfAndParameterInput . java <nl> deleted file mode 100644 <nl> index 2ca8a49 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCorrectIfAndParameterInput . java <nl> + + + / dev / null <nl> @ @ - 1 , 157 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . indentation ; / / indent : 0 exp : 0 <nl> - <nl> - / * * / / indent : 0 exp : 0 <nl> - * This test - input is intended to be checked using following configuration : / / indent : 1 exp : 1 <nl> - * / / indent : 1 exp : 1 <nl> - * arrayInitIndent = 4 / / indent : 1 exp : 1 <nl> - * basicOffset = 2 / / indent : 1 exp : 1 <nl> - * braceAdjustment = 0 / / indent : 1 exp : 1 <nl> - * caseIndent = 4 / / indent : 1 exp : 1 <nl> - * forceStrictCondition = false / / indent : 1 exp : 1 <nl> - * lineWrappingIndentation = 4 / / indent : 1 exp : 1 <nl> - * tabWidth = 4 / / indent : 1 exp : 1 <nl> - * throwsIndent = 4 / / indent : 1 exp : 1 <nl> - * / / indent : 1 exp : 1 <nl> - * / / indent : 1 exp : 1 <nl> - * / / / indent : 1 exp : 1 <nl> - class FooIfClass { / / indent : 0 exp : 0 <nl> - <nl> - String getString ( int someInt , String someString ) { / / indent : 2 exp : 2 <nl> - return " String " ; / / indent : 4 exp : 4 <nl> - } / / indent : 2 exp : 2 <nl> - <nl> - void fooMethodWithIf ( ) { / / indent : 2 exp : 2 <nl> - <nl> - if ( conditionFirst ( " Loooooooooooooooooong " , new / / indent : 4 exp : 4 <nl> - SecondClassWithVeryVeryVeryLongName ( " Loooooooooooooooooog " ) . / / indent : 8 exp : 8 <nl> - getInteger ( new FooIfClass ( ) , " Loooooooooooooooooog " ) , / / indent : 8 exp : 8 <nl> - new InnerClassFoo ( ) ) ) { } / / indent : 8 exp : 8 <nl> - <nl> - if ( conditionSecond ( 10000000000 . 0 , new / / indent : 4 exp : 4 <nl> - SecondClassWithVeryVeryVeryLongName ( " Looooooooooooo " / / indent : 8 exp : 8 <nl> - + " oooooooooooong " ) . getString ( new FooIfClass ( ) , / / indent : 8 exp : 8 <nl> - new SecondClassWithVeryVeryVeryLongName ( " loooooooooong " ) . / / indent : 8 exp : 8 <nl> - getInteger ( new FooIfClass ( ) , " loooooooooooooong " ) ) , " loooooooooooong " ) / / indent : 8 exp : 8 <nl> - | | conditionThird ( 2048 ) | | conditionFourth ( new / / indent : 8 exp : 8 <nl> - SecondClassWithVeryVeryVeryLongName ( " Looooooooooooooo " / / indent : 8 exp : 8 <nl> - + " ooooooooooooong " ) . getBoolean ( new FooIfClass ( ) , false ) ) | | / / indent : 8 exp : 8 <nl> - conditionFifth ( true , new SecondClassWithVeryVeryVeryLongName ( getString ( 2048 , " Looo " / / indent : 8 exp : 8 <nl> - + " ooooooooooooooooooooooooooooooooooooooooooong " ) ) . getBoolean ( / / indent : 8 exp : 8 <nl> - new FooIfClass ( ) , true ) ) | | conditionSixth ( false , new / / indent : 8 exp : 8 <nl> - SecondClassWithVeryVeryVeryLongName ( getString ( 100000 , " Loooooong " / / indent : 8 exp : 8 <nl> - + " Fooooooo > < " ) ) ) | | conditionNoArg ( ) / / indent : 8 exp : 8 <nl> - | | conditionNoArg ( ) | | / / indent : 8 exp : 8 <nl> - conditionNoArg ( ) | | conditionNoArg ( ) ) { } / / indent : 8 exp : 8 <nl> - } / / indent : 2 exp : 2 <nl> - <nl> - private boolean conditionFirst ( String longString , int / / indent : 2 exp : 2 <nl> - integer , InnerClassFoo someInstance ) { / / indent : 6 exp : 6 <nl> - return false ; / / indent : 4 exp : 4 <nl> - } / / indent : 2 exp : 2 <nl> - <nl> - private boolean conditionSecond ( double longLongLongDoubleValue , / / indent : 2 exp : 2 <nl> - String longLongLongString , String secondLongLongString ) { / / indent : 6 exp : 6 <nl> - return false ; / / indent : 4 exp : 4 <nl> - } / / indent : 2 exp : 2 <nl> - <nl> - private boolean conditionThird ( long veryLongValue ) { / / indent : 2 exp : 2 <nl> - return false ; / / indent : 4 exp : 4 <nl> - } / / indent : 2 exp : 2 <nl> - <nl> - private boolean conditionFourth ( boolean flag ) { / / indent : 2 exp : 2 <nl> - return false ; / / indent : 4 exp : 4 <nl> - } / / indent : 2 exp : 2 <nl> - <nl> - private boolean conditionFifth ( boolean flag1 , boolean flag2 ) { / / indent : 2 exp : 2 <nl> - return false ; / / indent : 4 exp : 4 <nl> - } / / indent : 2 exp : 2 <nl> - <nl> - private boolean conditionSixth ( boolean flag , / / indent : 2 exp : 2 <nl> - SecondClassWithVeryVeryVeryLongName instance ) { / / indent : 6 exp : 6 <nl> - return false ; / / indent : 4 exp : 4 <nl> - } / / indent : 2 exp : 2 <nl> - <nl> - private boolean conditionNoArg ( ) { / / indent : 2 exp : 2 <nl> - return false ; / / indent : 4 exp : 4 <nl> - } / / indent : 2 exp : 2 <nl> - <nl> - class InnerClassFoo { / / indent : 2 exp : 2 <nl> - <nl> - void fooMethodWithIf ( ) { / / indent : 4 exp : 4 <nl> - if ( conditionFirst ( " Loooooooooooooooooong " , new / / indent : 6 exp : 6 <nl> - SecondClassWithVeryVeryVeryLongName ( " Loooooooooooooooooog " ) . / / indent : 10 exp : 10 <nl> - getInteger ( new FooIfClass ( ) , " Loooooooooooooooooog " ) , / / indent : 14 exp : > = 10 <nl> - new InnerClassFoo ( ) ) ) { } / / indent : 14 exp : > = 10 <nl> - <nl> - if ( conditionSecond ( 10000000000 . 0 , new / / indent : 6 exp : 6 <nl> - SecondClassWithVeryVeryVeryLongName ( " Looooooooooooo " / / indent : 10 exp : 10 <nl> - + " oooooooooooong " ) . getString ( new FooIfClass ( ) , / / indent : 10 exp : 10 <nl> - new SecondClassWithVeryVeryVeryLongName ( " loooooooooong " ) . / / indent : 10 exp : 10 <nl> - getInteger ( new FooIfClass ( ) , " loooooooooooooong " ) ) , " loooooooooooong " ) / / indent : 10 exp : 10 <nl> - | | conditionThird ( 2048 ) | | conditionFourth ( new / / indent : 10 exp : 10 <nl> - SecondClassWithVeryVeryVeryLongName ( " Looooooooooooooo " / / indent : 10 exp : 10 <nl> - + " ooooooooooooong " ) . getBoolean ( new FooIfClass ( ) , false ) ) | | / / indent : 12 exp : > = 10 <nl> - conditionFifth ( true , new SecondClassWithVeryVeryVeryLongName ( getString ( 2048 , " Looo " / / indent : 12 exp : > = 10 <nl> - + " ooooooooooooooooooooooooooooooooooooooooooong " ) ) . getBoolean ( / / indent : 12 exp : > = 10 <nl> - new FooIfClass ( ) , true ) ) | | conditionSixth ( false , new / / indent : 12 exp : > = 10 <nl> - SecondClassWithVeryVeryVeryLongName ( getString ( 100000 , " Loooooong " / / indent : 14 exp : > = 10 <nl> - + " Fooooooo > < " ) ) ) | | conditionNoArg ( ) / / indent : 14 exp : > = 10 <nl> - | | conditionNoArg ( ) | | / / indent : 14 exp : > = 10 <nl> - conditionNoArg ( ) | | conditionNoArg ( ) ) { } / / indent : 14 exp : > = 10 <nl> - } / / indent : 4 exp : 4 <nl> - <nl> - FooIfClass anonymousClass = new FooIfClass ( ) { / / indent : 4 exp : 4 <nl> - <nl> - void fooMethodWithIf ( String stringStringStringStringLooooongString , / / indent : 6 exp : 6 <nl> - int intIntIntVeryLongNameForIntVariable , boolean / / indent : 10 exp : 10 <nl> - fooooooooobooleanBooleanVeryLongName ) { / / indent : 14 exp : > = 10 <nl> - <nl> - if ( conditionFirst ( " Loooooooooooooooooong " , new / / indent : 8 exp : 8 <nl> - SecondClassWithVeryVeryVeryLongName ( " Loooooooooooooooooog " ) . / / indent : 12 exp : 12 <nl> - getInteger ( new FooIfClass ( ) , " Loooooooooooooooooog " ) , / / indent : 16 exp : > = 12 <nl> - new InnerClassFoo ( ) ) ) { } / / indent : 19 exp : > = 12 <nl> - <nl> - if ( conditionSecond ( 10000000000 . 0 , new / / indent : 8 exp : 8 <nl> - SecondClassWithVeryVeryVeryLongName ( " Looooooooooooo " / / indent : 12 exp : 12 <nl> - + " oooooooooooong " ) . getString ( new FooIfClass ( ) , / / indent : 12 exp : 12 <nl> - new SecondClassWithVeryVeryVeryLongName ( " loooooooooong " ) . / / indent : 12 exp : 12 <nl> - getInteger ( new FooIfClass ( ) , " loooooooooooooong " ) ) , " loooooooooooong " ) / / indent : 12 exp : 12 <nl> - | | conditionThird ( 2048 ) | | conditionFourth ( new / / indent : 12 exp : 12 <nl> - SecondClassWithVeryVeryVeryLongName ( " Looooooooooooooo " / / indent : 12 exp : 12 <nl> - + " ooooooooooooong " ) . getBoolean ( new FooIfClass ( ) , false ) ) | | / / indent : 14 exp : > = 12 <nl> - conditionFifth ( true , new SecondClassWithVeryVeryVeryLongName ( getString ( 2048 , " Looo " / / indent : 14 exp : > = 12 <nl> - + " ooooooooooooooooooooooooooooooooooooooooooong " ) ) . getBoolean ( / / indent : 14 exp : > = 12 <nl> - new FooIfClass ( ) , true ) ) | | conditionSixth ( false , new / / indent : 14 exp : > = 12 <nl> - SecondClassWithVeryVeryVeryLongName ( getString ( 100000 , " Loooooong " / / indent : 16 exp : > = 12 <nl> - + " Fooooooo > < " ) ) ) | | conditionNoArg ( ) / / indent : 16 exp : > = 12 <nl> - | | conditionNoArg ( ) | | / / indent : 16 exp : > = 12 <nl> - conditionNoArg ( ) | | conditionNoArg ( ) / / indent : 18 exp : > = 12 <nl> - & & fooooooooobooleanBooleanVeryLongName ) { } / / indent : 21 exp : > = 12 <nl> - } / / indent : 6 exp : 6 <nl> - } ; / / indent : 4 exp : 4 <nl> - } / / indent : 2 exp : 2 <nl> - } / / indent : 0 exp : 0 <nl> - <nl> - class SecondClassWithVeryVeryVeryLongName { / / indent : 0 exp : 0 <nl> - <nl> - public SecondClassWithVeryVeryVeryLongName ( String string ) { / / indent : 2 exp : 2 <nl> - <nl> - } / / indent : 2 exp : 2 <nl> - <nl> - String getString ( FooIfClass instance , int integer ) { / / indent : 2 exp : 2 <nl> - return " String " ; / / indent : 4 exp : 4 <nl> - } / / indent : 2 exp : 2 <nl> - <nl> - int getInteger ( FooIfClass instance , String string ) { / / indent : 2 exp : 2 <nl> - return - 1 ; / / indent : 4 exp : 4 <nl> - } / / indent : 2 exp : 2 <nl> - <nl> - boolean getBoolean ( FooIfClass instance , boolean flag ) { / / indent : 2 exp : 2 <nl> - return false ; / / indent : 4 exp : 4 <nl> - } / / indent : 2 exp : 2 <nl> - <nl> - SecondClassWithVeryVeryVeryLongName getInstanse ( ) { / / indent : 2 exp : 2 <nl> - return new SecondClassWithVeryVeryVeryLongName ( " VeryLoooooooooo " / / indent : 4 exp : 4 <nl> - + " oongString " ) ; / / indent : 8 exp : 8 <nl> - } / / indent : 2 exp : 2 <nl> - } / / indent : 0 exp : 0 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputIndentationCorrectIfAndParameter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputIndentationCorrectIfAndParameter . java <nl> new file mode 100644 <nl> index 0000000 . . 2ca8a49 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputIndentationCorrectIfAndParameter . java <nl> @ @ - 0 , 0 + 1 , 157 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . indentation ; / / indent : 0 exp : 0 <nl> + <nl> + / * * / / indent : 0 exp : 0 <nl> + * This test - input is intended to be checked using following configuration : / / indent : 1 exp : 1 <nl> + * / / indent : 1 exp : 1 <nl> + * arrayInitIndent = 4 / / indent : 1 exp : 1 <nl> + * basicOffset = 2 / / indent : 1 exp : 1 <nl> + * braceAdjustment = 0 / / indent : 1 exp : 1 <nl> + * caseIndent = 4 / / indent : 1 exp : 1 <nl> + * forceStrictCondition = false / / indent : 1 exp : 1 <nl> + * lineWrappingIndentation = 4 / / indent : 1 exp : 1 <nl> + * tabWidth = 4 / / indent : 1 exp : 1 <nl> + * throwsIndent = 4 / / indent : 1 exp : 1 <nl> + * / / indent : 1 exp : 1 <nl> + * / / indent : 1 exp : 1 <nl> + * / / / indent : 1 exp : 1 <nl> + class FooIfClass { / / indent : 0 exp : 0 <nl> + <nl> + String getString ( int someInt , String someString ) { / / indent : 2 exp : 2 <nl> + return " String " ; / / indent : 4 exp : 4 <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + void fooMethodWithIf ( ) { / / indent : 2 exp : 2 <nl> + <nl> + if ( conditionFirst ( " Loooooooooooooooooong " , new / / indent : 4 exp : 4 <nl> + SecondClassWithVeryVeryVeryLongName ( " Loooooooooooooooooog " ) . / / indent : 8 exp : 8 <nl> + getInteger ( new FooIfClass ( ) , " Loooooooooooooooooog " ) , / / indent : 8 exp : 8 <nl> + new InnerClassFoo ( ) ) ) { } / / indent : 8 exp : 8 <nl> + <nl> + if ( conditionSecond ( 10000000000 . 0 , new / / indent : 4 exp : 4 <nl> + SecondClassWithVeryVeryVeryLongName ( " Looooooooooooo " / / indent : 8 exp : 8 <nl> + + " oooooooooooong " ) . getString ( new FooIfClass ( ) , / / indent : 8 exp : 8 <nl> + new SecondClassWithVeryVeryVeryLongName ( " loooooooooong " ) . / / indent : 8 exp : 8 <nl> + getInteger ( new FooIfClass ( ) , " loooooooooooooong " ) ) , " loooooooooooong " ) / / indent : 8 exp : 8 <nl> + | | conditionThird ( 2048 ) | | conditionFourth ( new / / indent : 8 exp : 8 <nl> + SecondClassWithVeryVeryVeryLongName ( " Looooooooooooooo " / / indent : 8 exp : 8 <nl> + + " ooooooooooooong " ) . getBoolean ( new FooIfClass ( ) , false ) ) | | / / indent : 8 exp : 8 <nl> + conditionFifth ( true , new SecondClassWithVeryVeryVeryLongName ( getString ( 2048 , " Looo " / / indent : 8 exp : 8 <nl> + + " ooooooooooooooooooooooooooooooooooooooooooong " ) ) . getBoolean ( / / indent : 8 exp : 8 <nl> + new FooIfClass ( ) , true ) ) | | conditionSixth ( false , new / / indent : 8 exp : 8 <nl> + SecondClassWithVeryVeryVeryLongName ( getString ( 100000 , " Loooooong " / / indent : 8 exp : 8 <nl> + + " Fooooooo > < " ) ) ) | | conditionNoArg ( ) / / indent : 8 exp : 8 <nl> + | | conditionNoArg ( ) | | / / indent : 8 exp : 8 <nl> + conditionNoArg ( ) | | conditionNoArg ( ) ) { } / / indent : 8 exp : 8 <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + private boolean conditionFirst ( String longString , int / / indent : 2 exp : 2 <nl> + integer , InnerClassFoo someInstance ) { / / indent : 6 exp : 6 <nl> + return false ; / / indent : 4 exp : 4 <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + private boolean conditionSecond ( double longLongLongDoubleValue , / / indent : 2 exp : 2 <nl> + String longLongLongString , String secondLongLongString ) { / / indent : 6 exp : 6 <nl> + return false ; / / indent : 4 exp : 4 <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + private boolean conditionThird ( long veryLongValue ) { / / indent : 2 exp : 2 <nl> + return false ; / / indent : 4 exp : 4 <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + private boolean conditionFourth ( boolean flag ) { / / indent : 2 exp : 2 <nl> + return false ; / / indent : 4 exp : 4 <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + private boolean conditionFifth ( boolean flag1 , boolean flag2 ) { / / indent : 2 exp : 2 <nl> + return false ; / / indent : 4 exp : 4 <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + private boolean conditionSixth ( boolean flag , / / indent : 2 exp : 2 <nl> + SecondClassWithVeryVeryVeryLongName instance ) { / / indent : 6 exp : 6 <nl> + return false ; / / indent : 4 exp : 4 <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + private boolean conditionNoArg ( ) { / / indent : 2 exp : 2 <nl> + return false ; / / indent : 4 exp : 4 <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + class InnerClassFoo { / / indent : 2 exp : 2 <nl> + <nl> + void fooMethodWithIf ( ) { / / indent : 4 exp : 4 <nl> + if ( conditionFirst ( " Loooooooooooooooooong " , new / / indent : 6 exp : 6 <nl> + SecondClassWithVeryVeryVeryLongName ( " Loooooooooooooooooog " ) . / / indent : 10 exp : 10 <nl> + getInteger ( new FooIfClass ( ) , " Loooooooooooooooooog " ) , / / indent : 14 exp : > = 10 <nl> + new InnerClassFoo ( ) ) ) { } / / indent : 14 exp : > = 10 <nl> + <nl> + if ( conditionSecond ( 10000000000 . 0 , new / / indent : 6 exp : 6 <nl> + SecondClassWithVeryVeryVeryLongName ( " Looooooooooooo " / / indent : 10 exp : 10 <nl> + + " oooooooooooong " ) . getString ( new FooIfClass ( ) , / / indent : 10 exp : 10 <nl> + new SecondClassWithVeryVeryVeryLongName ( " loooooooooong " ) . / / indent : 10 exp : 10 <nl> + getInteger ( new FooIfClass ( ) , " loooooooooooooong " ) ) , " loooooooooooong " ) / / indent : 10 exp : 10 <nl> + | | conditionThird ( 2048 ) | | conditionFourth ( new / / indent : 10 exp : 10 <nl> + SecondClassWithVeryVeryVeryLongName ( " Looooooooooooooo " / / indent : 10 exp : 10 <nl> + + " ooooooooooooong " ) . getBoolean ( new FooIfClass ( ) , false ) ) | | / / indent : 12 exp : > = 10 <nl> + conditionFifth ( true , new SecondClassWithVeryVeryVeryLongName ( getString ( 2048 , " Looo " / / indent : 12 exp : > = 10 <nl> + + " ooooooooooooooooooooooooooooooooooooooooooong " ) ) . getBoolean ( / / indent : 12 exp : > = 10 <nl> + new FooIfClass ( ) , true ) ) | | conditionSixth ( false , new / / indent : 12 exp : > = 10 <nl> + SecondClassWithVeryVeryVeryLongName ( getString ( 100000 , " Loooooong " / / indent : 14 exp : > = 10 <nl> + + " Fooooooo > < " ) ) ) | | conditionNoArg ( ) / / indent : 14 exp : > = 10 <nl> + | | conditionNoArg ( ) | | / / indent : 14 exp : > = 10 <nl> + conditionNoArg ( ) | | conditionNoArg ( ) ) { } / / indent : 14 exp : > = 10 <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + FooIfClass anonymousClass = new FooIfClass ( ) { / / indent : 4 exp : 4 <nl> + <nl> + void fooMethodWithIf ( String stringStringStringStringLooooongString , / / indent : 6 exp : 6 <nl> + int intIntIntVeryLongNameForIntVariable , boolean / / indent : 10 exp : 10 <nl> + fooooooooobooleanBooleanVeryLongName ) { / / indent : 14 exp : > = 10 <nl> + <nl> + if ( conditionFirst ( " Loooooooooooooooooong " , new / / indent : 8 exp : 8 <nl> + SecondClassWithVeryVeryVeryLongName ( " Loooooooooooooooooog " ) . / / indent : 12 exp : 12 <nl> + getInteger ( new FooIfClass ( ) , " Loooooooooooooooooog " ) , / / indent : 16 exp : > = 12 <nl> + new InnerClassFoo ( ) ) ) { } / / indent : 19 exp : > = 12 <nl> + <nl> + if ( conditionSecond ( 10000000000 . 0 , new / / indent : 8 exp : 8 <nl> + SecondClassWithVeryVeryVeryLongName ( " Looooooooooooo " / / indent : 12 exp : 12 <nl> + + " oooooooooooong " ) . getString ( new FooIfClass ( ) , / / indent : 12 exp : 12 <nl> + new SecondClassWithVeryVeryVeryLongName ( " loooooooooong " ) . / / indent : 12 exp : 12 <nl> + getInteger ( new FooIfClass ( ) , " loooooooooooooong " ) ) , " loooooooooooong " ) / / indent : 12 exp : 12 <nl> + | | conditionThird ( 2048 ) | | conditionFourth ( new / / indent : 12 exp : 12 <nl> + SecondClassWithVeryVeryVeryLongName ( " Looooooooooooooo " / / indent : 12 exp : 12 <nl> + + " ooooooooooooong " ) . getBoolean ( new FooIfClass ( ) , false ) ) | | / / indent : 14 exp : > = 12 <nl> + conditionFifth ( true , new SecondClassWithVeryVeryVeryLongName ( getString ( 2048 , " Looo " / / indent : 14 exp : > = 12 <nl> + + " ooooooooooooooooooooooooooooooooooooooooooong " ) ) . getBoolean ( / / indent : 14 exp : > = 12 <nl> + new FooIfClass ( ) , true ) ) | | conditionSixth ( false , new / / indent : 14 exp : > = 12 <nl> + SecondClassWithVeryVeryVeryLongName ( getString ( 100000 , " Loooooong " / / indent : 16 exp : > = 12 <nl> + + " Fooooooo > < " ) ) ) | | conditionNoArg ( ) / / indent : 16 exp : > = 12 <nl> + | | conditionNoArg ( ) | | / / indent : 16 exp : > = 12 <nl> + conditionNoArg ( ) | | conditionNoArg ( ) / / indent : 18 exp : > = 12 <nl> + & & fooooooooobooleanBooleanVeryLongName ) { } / / indent : 21 exp : > = 12 <nl> + } / / indent : 6 exp : 6 <nl> + } ; / / indent : 4 exp : 4 <nl> + } / / indent : 2 exp : 2 <nl> + } / / indent : 0 exp : 0 <nl> + <nl> + class SecondClassWithVeryVeryVeryLongName { / / indent : 0 exp : 0 <nl> + <nl> + public SecondClassWithVeryVeryVeryLongName ( String string ) { / / indent : 2 exp : 2 <nl> + <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + String getString ( FooIfClass instance , int integer ) { / / indent : 2 exp : 2 <nl> + return " String " ; / / indent : 4 exp : 4 <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + int getInteger ( FooIfClass instance , String string ) { / / indent : 2 exp : 2 <nl> + return - 1 ; / / indent : 4 exp : 4 <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + boolean getBoolean ( FooIfClass instance , boolean flag ) { / / indent : 2 exp : 2 <nl> + return false ; / / indent : 4 exp : 4 <nl> + } / / indent : 2 exp : 2 <nl> + <nl> + SecondClassWithVeryVeryVeryLongName getInstanse ( ) { / / indent : 2 exp : 2 <nl> + return new SecondClassWithVeryVeryVeryLongName ( " VeryLoooooooooo " / / indent : 4 exp : 4 <nl> + + " oongString " ) ; / / indent : 8 exp : 8 <nl> + } / / indent : 2 exp : 2 <nl> + } / / indent : 0 exp : 0

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheck . java 
 index 037195b . . 4a2c1ef 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheck . java 
 @ @ - 19 , 11 + 19 , 14 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 
 + import java . util . Locale ; 
 + 
 + import org . apache . commons . beanutils . ConversionException ; 
 import org . apache . commons . lang3 . ArrayUtils ; 
 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck ; 
 
 / * * 
 * < p > 
 @ @ - 80 , 7 + 83 , 7 @ @ import com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck ; 
 * @ author maxvetrenko 
 * / 
 public class SeparatorWrapCheck 
 - extends AbstractOptionCheck < WrapOption > { 
 + extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 94 , 11 + 97 , 21 @ @ public class SeparatorWrapCheck 
 * / 
 public static final String LINE _ NEW = " line . new " ; 
 
 + / * * The policy to enforce . * / 
 + private WrapOption option = WrapOption . EOL ; 
 + 
 / * * 
 - * Sets the comma wrap option to end of the line . 
 + * Set the option to enforce . 
 + * @ param optionStr string to decode option from 
 + * @ throws ConversionException if unable to decode 
 * / 
 - public SeparatorWrapCheck ( ) { 
 - super ( WrapOption . EOL , WrapOption . class ) ; 
 + public void setOption ( String optionStr ) { 
 + try { 
 + option = WrapOption . valueOf ( optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; 
 + } 
 + catch ( IllegalArgumentException iae ) { 
 + throw new ConversionException ( " unable to parse " + optionStr , iae ) ; 
 + } 
 } 
 
 @ Override 
 @ @ - 139 , 13 + 152 , 12 @ @ public class SeparatorWrapCheck 
 currentLine . substring ( colNo + text . length ( ) ) . trim ( ) ; 
 final String substringBeforeToken = 
 currentLine . substring ( 0 , colNo ) . trim ( ) ; 
 - final WrapOption wSp = getAbstractOption ( ) ; 
 
 - if ( wSp = = WrapOption . EOL 
 + if ( option = = WrapOption . EOL 
 & & substringBeforeToken . isEmpty ( ) ) { 
 log ( lineNo , colNo , LINE _ PREVIOUS , text ) ; 
 } 
 - else if ( wSp = = WrapOption . NL 
 + else if ( option = = WrapOption . NL 
 & & substringAfterToken . isEmpty ( ) ) { 
 log ( lineNo , colNo , LINE _ NEW , text ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java 
 index 1a1e55c . . 4e654e8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java 
 @ @ - 25 , 12 + 25 , 14 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . SeparatorWrapChe 
 import java . io . File ; 
 import java . io . IOException ; 
 
 + import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class SeparatorWrapCheckTest 
 @ @ - 79 , 4 + 81 , 12 @ @ public class SeparatorWrapCheckTest 
 } ; 
 Assert . assertArrayEquals ( expected , actual ) ; 
 } 
 + 
 + @ Test ( expected = CheckstyleException . class ) 
 + public void testInvalidOption ( ) throws Exception { 
 + checkConfig . addAttribute ( " option " , " invalid _ option " ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , getPath ( " InputSeparatorWrap . java " ) , expected ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index 6884859 . . 54a4f70 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 376 , 7 + 376 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verifyWarns ( checkConfig , getPath ( " IndentationCorrectIfAndParameterInput . java " ) , expected ) ; 
 + verifyWarns ( checkConfig , getPath ( " InputIndentationCorrectIfAndParameter . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCorrectIfAndParameterInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCorrectIfAndParameterInput . java 
 deleted file mode 100644 
 index 2ca8a49 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCorrectIfAndParameterInput . java 
 + + + / dev / null 
 @ @ - 1 , 157 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . indentation ; / / indent : 0 exp : 0 
 - 
 - / * * / / indent : 0 exp : 0 
 - * This test - input is intended to be checked using following configuration : / / indent : 1 exp : 1 
 - * / / indent : 1 exp : 1 
 - * arrayInitIndent = 4 / / indent : 1 exp : 1 
 - * basicOffset = 2 / / indent : 1 exp : 1 
 - * braceAdjustment = 0 / / indent : 1 exp : 1 
 - * caseIndent = 4 / / indent : 1 exp : 1 
 - * forceStrictCondition = false / / indent : 1 exp : 1 
 - * lineWrappingIndentation = 4 / / indent : 1 exp : 1 
 - * tabWidth = 4 / / indent : 1 exp : 1 
 - * throwsIndent = 4 / / indent : 1 exp : 1 
 - * / / indent : 1 exp : 1 
 - * / / indent : 1 exp : 1 
 - * / / / indent : 1 exp : 1 
 - class FooIfClass { / / indent : 0 exp : 0 
 - 
 - String getString ( int someInt , String someString ) { / / indent : 2 exp : 2 
 - return " String " ; / / indent : 4 exp : 4 
 - } / / indent : 2 exp : 2 
 - 
 - void fooMethodWithIf ( ) { / / indent : 2 exp : 2 
 - 
 - if ( conditionFirst ( " Loooooooooooooooooong " , new / / indent : 4 exp : 4 
 - SecondClassWithVeryVeryVeryLongName ( " Loooooooooooooooooog " ) . / / indent : 8 exp : 8 
 - getInteger ( new FooIfClass ( ) , " Loooooooooooooooooog " ) , / / indent : 8 exp : 8 
 - new InnerClassFoo ( ) ) ) { } / / indent : 8 exp : 8 
 - 
 - if ( conditionSecond ( 10000000000 . 0 , new / / indent : 4 exp : 4 
 - SecondClassWithVeryVeryVeryLongName ( " Looooooooooooo " / / indent : 8 exp : 8 
 - + " oooooooooooong " ) . getString ( new FooIfClass ( ) , / / indent : 8 exp : 8 
 - new SecondClassWithVeryVeryVeryLongName ( " loooooooooong " ) . / / indent : 8 exp : 8 
 - getInteger ( new FooIfClass ( ) , " loooooooooooooong " ) ) , " loooooooooooong " ) / / indent : 8 exp : 8 
 - | | conditionThird ( 2048 ) | | conditionFourth ( new / / indent : 8 exp : 8 
 - SecondClassWithVeryVeryVeryLongName ( " Looooooooooooooo " / / indent : 8 exp : 8 
 - + " ooooooooooooong " ) . getBoolean ( new FooIfClass ( ) , false ) ) | | / / indent : 8 exp : 8 
 - conditionFifth ( true , new SecondClassWithVeryVeryVeryLongName ( getString ( 2048 , " Looo " / / indent : 8 exp : 8 
 - + " ooooooooooooooooooooooooooooooooooooooooooong " ) ) . getBoolean ( / / indent : 8 exp : 8 
 - new FooIfClass ( ) , true ) ) | | conditionSixth ( false , new / / indent : 8 exp : 8 
 - SecondClassWithVeryVeryVeryLongName ( getString ( 100000 , " Loooooong " / / indent : 8 exp : 8 
 - + " Fooooooo > < " ) ) ) | | conditionNoArg ( ) / / indent : 8 exp : 8 
 - | | conditionNoArg ( ) | | / / indent : 8 exp : 8 
 - conditionNoArg ( ) | | conditionNoArg ( ) ) { } / / indent : 8 exp : 8 
 - } / / indent : 2 exp : 2 
 - 
 - private boolean conditionFirst ( String longString , int / / indent : 2 exp : 2 
 - integer , InnerClassFoo someInstance ) { / / indent : 6 exp : 6 
 - return false ; / / indent : 4 exp : 4 
 - } / / indent : 2 exp : 2 
 - 
 - private boolean conditionSecond ( double longLongLongDoubleValue , / / indent : 2 exp : 2 
 - String longLongLongString , String secondLongLongString ) { / / indent : 6 exp : 6 
 - return false ; / / indent : 4 exp : 4 
 - } / / indent : 2 exp : 2 
 - 
 - private boolean conditionThird ( long veryLongValue ) { / / indent : 2 exp : 2 
 - return false ; / / indent : 4 exp : 4 
 - } / / indent : 2 exp : 2 
 - 
 - private boolean conditionFourth ( boolean flag ) { / / indent : 2 exp : 2 
 - return false ; / / indent : 4 exp : 4 
 - } / / indent : 2 exp : 2 
 - 
 - private boolean conditionFifth ( boolean flag1 , boolean flag2 ) { / / indent : 2 exp : 2 
 - return false ; / / indent : 4 exp : 4 
 - } / / indent : 2 exp : 2 
 - 
 - private boolean conditionSixth ( boolean flag , / / indent : 2 exp : 2 
 - SecondClassWithVeryVeryVeryLongName instance ) { / / indent : 6 exp : 6 
 - return false ; / / indent : 4 exp : 4 
 - } / / indent : 2 exp : 2 
 - 
 - private boolean conditionNoArg ( ) { / / indent : 2 exp : 2 
 - return false ; / / indent : 4 exp : 4 
 - } / / indent : 2 exp : 2 
 - 
 - class InnerClassFoo { / / indent : 2 exp : 2 
 - 
 - void fooMethodWithIf ( ) { / / indent : 4 exp : 4 
 - if ( conditionFirst ( " Loooooooooooooooooong " , new / / indent : 6 exp : 6 
 - SecondClassWithVeryVeryVeryLongName ( " Loooooooooooooooooog " ) . / / indent : 10 exp : 10 
 - getInteger ( new FooIfClass ( ) , " Loooooooooooooooooog " ) , / / indent : 14 exp : > = 10 
 - new InnerClassFoo ( ) ) ) { } / / indent : 14 exp : > = 10 
 - 
 - if ( conditionSecond ( 10000000000 . 0 , new / / indent : 6 exp : 6 
 - SecondClassWithVeryVeryVeryLongName ( " Looooooooooooo " / / indent : 10 exp : 10 
 - + " oooooooooooong " ) . getString ( new FooIfClass ( ) , / / indent : 10 exp : 10 
 - new SecondClassWithVeryVeryVeryLongName ( " loooooooooong " ) . / / indent : 10 exp : 10 
 - getInteger ( new FooIfClass ( ) , " loooooooooooooong " ) ) , " loooooooooooong " ) / / indent : 10 exp : 10 
 - | | conditionThird ( 2048 ) | | conditionFourth ( new / / indent : 10 exp : 10 
 - SecondClassWithVeryVeryVeryLongName ( " Looooooooooooooo " / / indent : 10 exp : 10 
 - + " ooooooooooooong " ) . getBoolean ( new FooIfClass ( ) , false ) ) | | / / indent : 12 exp : > = 10 
 - conditionFifth ( true , new SecondClassWithVeryVeryVeryLongName ( getString ( 2048 , " Looo " / / indent : 12 exp : > = 10 
 - + " ooooooooooooooooooooooooooooooooooooooooooong " ) ) . getBoolean ( / / indent : 12 exp : > = 10 
 - new FooIfClass ( ) , true ) ) | | conditionSixth ( false , new / / indent : 12 exp : > = 10 
 - SecondClassWithVeryVeryVeryLongName ( getString ( 100000 , " Loooooong " / / indent : 14 exp : > = 10 
 - + " Fooooooo > < " ) ) ) | | conditionNoArg ( ) / / indent : 14 exp : > = 10 
 - | | conditionNoArg ( ) | | / / indent : 14 exp : > = 10 
 - conditionNoArg ( ) | | conditionNoArg ( ) ) { } / / indent : 14 exp : > = 10 
 - } / / indent : 4 exp : 4 
 - 
 - FooIfClass anonymousClass = new FooIfClass ( ) { / / indent : 4 exp : 4 
 - 
 - void fooMethodWithIf ( String stringStringStringStringLooooongString , / / indent : 6 exp : 6 
 - int intIntIntVeryLongNameForIntVariable , boolean / / indent : 10 exp : 10 
 - fooooooooobooleanBooleanVeryLongName ) { / / indent : 14 exp : > = 10 
 - 
 - if ( conditionFirst ( " Loooooooooooooooooong " , new / / indent : 8 exp : 8 
 - SecondClassWithVeryVeryVeryLongName ( " Loooooooooooooooooog " ) . / / indent : 12 exp : 12 
 - getInteger ( new FooIfClass ( ) , " Loooooooooooooooooog " ) , / / indent : 16 exp : > = 12 
 - new InnerClassFoo ( ) ) ) { } / / indent : 19 exp : > = 12 
 - 
 - if ( conditionSecond ( 10000000000 . 0 , new / / indent : 8 exp : 8 
 - SecondClassWithVeryVeryVeryLongName ( " Looooooooooooo " / / indent : 12 exp : 12 
 - + " oooooooooooong " ) . getString ( new FooIfClass ( ) , / / indent : 12 exp : 12 
 - new SecondClassWithVeryVeryVeryLongName ( " loooooooooong " ) . / / indent : 12 exp : 12 
 - getInteger ( new FooIfClass ( ) , " loooooooooooooong " ) ) , " loooooooooooong " ) / / indent : 12 exp : 12 
 - | | conditionThird ( 2048 ) | | conditionFourth ( new / / indent : 12 exp : 12 
 - SecondClassWithVeryVeryVeryLongName ( " Looooooooooooooo " / / indent : 12 exp : 12 
 - + " ooooooooooooong " ) . getBoolean ( new FooIfClass ( ) , false ) ) | | / / indent : 14 exp : > = 12 
 - conditionFifth ( true , new SecondClassWithVeryVeryVeryLongName ( getString ( 2048 , " Looo " / / indent : 14 exp : > = 12 
 - + " ooooooooooooooooooooooooooooooooooooooooooong " ) ) . getBoolean ( / / indent : 14 exp : > = 12 
 - new FooIfClass ( ) , true ) ) | | conditionSixth ( false , new / / indent : 14 exp : > = 12 
 - SecondClassWithVeryVeryVeryLongName ( getString ( 100000 , " Loooooong " / / indent : 16 exp : > = 12 
 - + " Fooooooo > < " ) ) ) | | conditionNoArg ( ) / / indent : 16 exp : > = 12 
 - | | conditionNoArg ( ) | | / / indent : 16 exp : > = 12 
 - conditionNoArg ( ) | | conditionNoArg ( ) / / indent : 18 exp : > = 12 
 - & & fooooooooobooleanBooleanVeryLongName ) { } / / indent : 21 exp : > = 12 
 - } / / indent : 6 exp : 6 
 - } ; / / indent : 4 exp : 4 
 - } / / indent : 2 exp : 2 
 - } / / indent : 0 exp : 0 
 - 
 - class SecondClassWithVeryVeryVeryLongName { / / indent : 0 exp : 0 
 - 
 - public SecondClassWithVeryVeryVeryLongName ( String string ) { / / indent : 2 exp : 2 
 - 
 - } / / indent : 2 exp : 2 
 - 
 - String getString ( FooIfClass instance , int integer ) { / / indent : 2 exp : 2 
 - return " String " ; / / indent : 4 exp : 4 
 - } / / indent : 2 exp : 2 
 - 
 - int getInteger ( FooIfClass instance , String string ) { / / indent : 2 exp : 2 
 - return - 1 ; / / indent : 4 exp : 4 
 - } / / indent : 2 exp : 2 
 - 
 - boolean getBoolean ( FooIfClass instance , boolean flag ) { / / indent : 2 exp : 2 
 - return false ; / / indent : 4 exp : 4 
 - } / / indent : 2 exp : 2 
 - 
 - SecondClassWithVeryVeryVeryLongName getInstanse ( ) { / / indent : 2 exp : 2 
 - return new SecondClassWithVeryVeryVeryLongName ( " VeryLoooooooooo " / / indent : 4 exp : 4 
 - + " oongString " ) ; / / indent : 8 exp : 8 
 - } / / indent : 2 exp : 2 
 - } / / indent : 0 exp : 0 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputIndentationCorrectIfAndParameter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputIndentationCorrectIfAndParameter . java 
 new file mode 100644 
 index 0000000 . . 2ca8a49 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputIndentationCorrectIfAndParameter . java 
 @ @ - 0 , 0 + 1 , 157 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . indentation ; / / indent : 0 exp : 0 
 + 
 + / * * / / indent : 0 exp : 0 
 + * This test - input is intended to be checked using following configuration : / / indent : 1 exp : 1 
 + * / / indent : 1 exp : 1 
 + * arrayInitIndent = 4 / / indent : 1 exp : 1 
 + * basicOffset = 2 / / indent : 1 exp : 1 
 + * braceAdjustment = 0 / / indent : 1 exp : 1 
 + * caseIndent = 4 / / indent : 1 exp : 1 
 + * forceStrictCondition = false / / indent : 1 exp : 1 
 + * lineWrappingIndentation = 4 / / indent : 1 exp : 1 
 + * tabWidth = 4 / / indent : 1 exp : 1 
 + * throwsIndent = 4 / / indent : 1 exp : 1 
 + * / / indent : 1 exp : 1 
 + * / / indent : 1 exp : 1 
 + * / / / indent : 1 exp : 1 
 + class FooIfClass { / / indent : 0 exp : 0 
 + 
 + String getString ( int someInt , String someString ) { / / indent : 2 exp : 2 
 + return " String " ; / / indent : 4 exp : 4 
 + } / / indent : 2 exp : 2 
 + 
 + void fooMethodWithIf ( ) { / / indent : 2 exp : 2 
 + 
 + if ( conditionFirst ( " Loooooooooooooooooong " , new / / indent : 4 exp : 4 
 + SecondClassWithVeryVeryVeryLongName ( " Loooooooooooooooooog " ) . / / indent : 8 exp : 8 
 + getInteger ( new FooIfClass ( ) , " Loooooooooooooooooog " ) , / / indent : 8 exp : 8 
 + new InnerClassFoo ( ) ) ) { } / / indent : 8 exp : 8 
 + 
 + if ( conditionSecond ( 10000000000 . 0 , new / / indent : 4 exp : 4 
 + SecondClassWithVeryVeryVeryLongName ( " Looooooooooooo " / / indent : 8 exp : 8 
 + + " oooooooooooong " ) . getString ( new FooIfClass ( ) , / / indent : 8 exp : 8 
 + new SecondClassWithVeryVeryVeryLongName ( " loooooooooong " ) . / / indent : 8 exp : 8 
 + getInteger ( new FooIfClass ( ) , " loooooooooooooong " ) ) , " loooooooooooong " ) / / indent : 8 exp : 8 
 + | | conditionThird ( 2048 ) | | conditionFourth ( new / / indent : 8 exp : 8 
 + SecondClassWithVeryVeryVeryLongName ( " Looooooooooooooo " / / indent : 8 exp : 8 
 + + " ooooooooooooong " ) . getBoolean ( new FooIfClass ( ) , false ) ) | | / / indent : 8 exp : 8 
 + conditionFifth ( true , new SecondClassWithVeryVeryVeryLongName ( getString ( 2048 , " Looo " / / indent : 8 exp : 8 
 + + " ooooooooooooooooooooooooooooooooooooooooooong " ) ) . getBoolean ( / / indent : 8 exp : 8 
 + new FooIfClass ( ) , true ) ) | | conditionSixth ( false , new / / indent : 8 exp : 8 
 + SecondClassWithVeryVeryVeryLongName ( getString ( 100000 , " Loooooong " / / indent : 8 exp : 8 
 + + " Fooooooo > < " ) ) ) | | conditionNoArg ( ) / / indent : 8 exp : 8 
 + | | conditionNoArg ( ) | | / / indent : 8 exp : 8 
 + conditionNoArg ( ) | | conditionNoArg ( ) ) { } / / indent : 8 exp : 8 
 + } / / indent : 2 exp : 2 
 + 
 + private boolean conditionFirst ( String longString , int / / indent : 2 exp : 2 
 + integer , InnerClassFoo someInstance ) { / / indent : 6 exp : 6 
 + return false ; / / indent : 4 exp : 4 
 + } / / indent : 2 exp : 2 
 + 
 + private boolean conditionSecond ( double longLongLongDoubleValue , / / indent : 2 exp : 2 
 + String longLongLongString , String secondLongLongString ) { / / indent : 6 exp : 6 
 + return false ; / / indent : 4 exp : 4 
 + } / / indent : 2 exp : 2 
 + 
 + private boolean conditionThird ( long veryLongValue ) { / / indent : 2 exp : 2 
 + return false ; / / indent : 4 exp : 4 
 + } / / indent : 2 exp : 2 
 + 
 + private boolean conditionFourth ( boolean flag ) { / / indent : 2 exp : 2 
 + return false ; / / indent : 4 exp : 4 
 + } / / indent : 2 exp : 2 
 + 
 + private boolean conditionFifth ( boolean flag1 , boolean flag2 ) { / / indent : 2 exp : 2 
 + return false ; / / indent : 4 exp : 4 
 + } / / indent : 2 exp : 2 
 + 
 + private boolean conditionSixth ( boolean flag , / / indent : 2 exp : 2 
 + SecondClassWithVeryVeryVeryLongName instance ) { / / indent : 6 exp : 6 
 + return false ; / / indent : 4 exp : 4 
 + } / / indent : 2 exp : 2 
 + 
 + private boolean conditionNoArg ( ) { / / indent : 2 exp : 2 
 + return false ; / / indent : 4 exp : 4 
 + } / / indent : 2 exp : 2 
 + 
 + class InnerClassFoo { / / indent : 2 exp : 2 
 + 
 + void fooMethodWithIf ( ) { / / indent : 4 exp : 4 
 + if ( conditionFirst ( " Loooooooooooooooooong " , new / / indent : 6 exp : 6 
 + SecondClassWithVeryVeryVeryLongName ( " Loooooooooooooooooog " ) . / / indent : 10 exp : 10 
 + getInteger ( new FooIfClass ( ) , " Loooooooooooooooooog " ) , / / indent : 14 exp : > = 10 
 + new InnerClassFoo ( ) ) ) { } / / indent : 14 exp : > = 10 
 + 
 + if ( conditionSecond ( 10000000000 . 0 , new / / indent : 6 exp : 6 
 + SecondClassWithVeryVeryVeryLongName ( " Looooooooooooo " / / indent : 10 exp : 10 
 + + " oooooooooooong " ) . getString ( new FooIfClass ( ) , / / indent : 10 exp : 10 
 + new SecondClassWithVeryVeryVeryLongName ( " loooooooooong " ) . / / indent : 10 exp : 10 
 + getInteger ( new FooIfClass ( ) , " loooooooooooooong " ) ) , " loooooooooooong " ) / / indent : 10 exp : 10 
 + | | conditionThird ( 2048 ) | | conditionFourth ( new / / indent : 10 exp : 10 
 + SecondClassWithVeryVeryVeryLongName ( " Looooooooooooooo " / / indent : 10 exp : 10 
 + + " ooooooooooooong " ) . getBoolean ( new FooIfClass ( ) , false ) ) | | / / indent : 12 exp : > = 10 
 + conditionFifth ( true , new SecondClassWithVeryVeryVeryLongName ( getString ( 2048 , " Looo " / / indent : 12 exp : > = 10 
 + + " ooooooooooooooooooooooooooooooooooooooooooong " ) ) . getBoolean ( / / indent : 12 exp : > = 10 
 + new FooIfClass ( ) , true ) ) | | conditionSixth ( false , new / / indent : 12 exp : > = 10 
 + SecondClassWithVeryVeryVeryLongName ( getString ( 100000 , " Loooooong " / / indent : 14 exp : > = 10 
 + + " Fooooooo > < " ) ) ) | | conditionNoArg ( ) / / indent : 14 exp : > = 10 
 + | | conditionNoArg ( ) | | / / indent : 14 exp : > = 10 
 + conditionNoArg ( ) | | conditionNoArg ( ) ) { } / / indent : 14 exp : > = 10 
 + } / / indent : 4 exp : 4 
 + 
 + FooIfClass anonymousClass = new FooIfClass ( ) { / / indent : 4 exp : 4 
 + 
 + void fooMethodWithIf ( String stringStringStringStringLooooongString , / / indent : 6 exp : 6 
 + int intIntIntVeryLongNameForIntVariable , boolean / / indent : 10 exp : 10 
 + fooooooooobooleanBooleanVeryLongName ) { / / indent : 14 exp : > = 10 
 + 
 + if ( conditionFirst ( " Loooooooooooooooooong " , new / / indent : 8 exp : 8 
 + SecondClassWithVeryVeryVeryLongName ( " Loooooooooooooooooog " ) . / / indent : 12 exp : 12 
 + getInteger ( new FooIfClass ( ) , " Loooooooooooooooooog " ) , / / indent : 16 exp : > = 12 
 + new InnerClassFoo ( ) ) ) { } / / indent : 19 exp : > = 12 
 + 
 + if ( conditionSecond ( 10000000000 . 0 , new / / indent : 8 exp : 8 
 + SecondClassWithVeryVeryVeryLongName ( " Looooooooooooo " / / indent : 12 exp : 12 
 + + " oooooooooooong " ) . getString ( new FooIfClass ( ) , / / indent : 12 exp : 12 
 + new SecondClassWithVeryVeryVeryLongName ( " loooooooooong " ) . / / indent : 12 exp : 12 
 + getInteger ( new FooIfClass ( ) , " loooooooooooooong " ) ) , " loooooooooooong " ) / / indent : 12 exp : 12 
 + | | conditionThird ( 2048 ) | | conditionFourth ( new / / indent : 12 exp : 12 
 + SecondClassWithVeryVeryVeryLongName ( " Looooooooooooooo " / / indent : 12 exp : 12 
 + + " ooooooooooooong " ) . getBoolean ( new FooIfClass ( ) , false ) ) | | / / indent : 14 exp : > = 12 
 + conditionFifth ( true , new SecondClassWithVeryVeryVeryLongName ( getString ( 2048 , " Looo " / / indent : 14 exp : > = 12 
 + + " ooooooooooooooooooooooooooooooooooooooooooong " ) ) . getBoolean ( / / indent : 14 exp : > = 12 
 + new FooIfClass ( ) , true ) ) | | conditionSixth ( false , new / / indent : 14 exp : > = 12 
 + SecondClassWithVeryVeryVeryLongName ( getString ( 100000 , " Loooooong " / / indent : 16 exp : > = 12 
 + + " Fooooooo > < " ) ) ) | | conditionNoArg ( ) / / indent : 16 exp : > = 12 
 + | | conditionNoArg ( ) | | / / indent : 16 exp : > = 12 
 + conditionNoArg ( ) | | conditionNoArg ( ) / / indent : 18 exp : > = 12 
 + & & fooooooooobooleanBooleanVeryLongName ) { } / / indent : 21 exp : > = 12 
 + } / / indent : 6 exp : 6 
 + } ; / / indent : 4 exp : 4 
 + } / / indent : 2 exp : 2 
 + } / / indent : 0 exp : 0 
 + 
 + class SecondClassWithVeryVeryVeryLongName { / / indent : 0 exp : 0 
 + 
 + public SecondClassWithVeryVeryVeryLongName ( String string ) { / / indent : 2 exp : 2 
 + 
 + } / / indent : 2 exp : 2 
 + 
 + String getString ( FooIfClass instance , int integer ) { / / indent : 2 exp : 2 
 + return " String " ; / / indent : 4 exp : 4 
 + } / / indent : 2 exp : 2 
 + 
 + int getInteger ( FooIfClass instance , String string ) { / / indent : 2 exp : 2 
 + return - 1 ; / / indent : 4 exp : 4 
 + } / / indent : 2 exp : 2 
 + 
 + boolean getBoolean ( FooIfClass instance , boolean flag ) { / / indent : 2 exp : 2 
 + return false ; / / indent : 4 exp : 4 
 + } / / indent : 2 exp : 2 
 + 
 + SecondClassWithVeryVeryVeryLongName getInstanse ( ) { / / indent : 2 exp : 2 
 + return new SecondClassWithVeryVeryVeryLongName ( " VeryLoooooooooo " / / indent : 4 exp : 4 
 + + " oongString " ) ; / / indent : 8 exp : 8 
 + } / / indent : 2 exp : 2 
 + } / / indent : 0 exp : 0
