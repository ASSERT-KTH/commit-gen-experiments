BLEU SCORE: 0.04567211833282236

TEST MSG: Issue # 4165 : Split and Organize Checkstyle inputs by Test for checks in coding package : UnnecessaryParentheses - rerun CI
GENERATED MSG: Issue # 3900 : Modified TypecastParenPadCheckTest . java and moved its test - files to a subdir

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> index b9dfad6 . . 896ca2b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> @ @ - 45 , 7 + 45 , 9 @ @ public class UnnecessaryParenthesesCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " unnecessaryparentheses " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 100 , 7 + 102 , 7 @ @ public class UnnecessaryParenthesesCheckTest extends BaseCheckTestSupport { <nl> " 82 : 39 : " + getCheckMessage ( MSG _ ASSIGN ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputUnnecessaryParentheses . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputUnnecessaryParenthesesOperatorsAndCasts . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 108 , 7 + 110 , 7 @ @ public class UnnecessaryParenthesesCheckTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( UnnecessaryParenthesesCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " Input15Extensions . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputUnnecessaryParentheses15Extensions . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputUnnecessaryParentheses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputUnnecessaryParentheses . java <nl> deleted file mode 100644 <nl> index 04f11dd . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputUnnecessaryParentheses . java <nl> + + + / dev / null <nl> @ @ - 1 , 94 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - public class InputUnnecessaryParentheses { <nl> - int f1 ( ) { <nl> - int x = 0 ; <nl> - for ( int i = ( 0 + 1 ) ; ( ( i ) < ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { <nl> - x + = ( i + 100 ) ; <nl> - ( x ) + = ( i + 100 / * * comment test * / ) ; <nl> - x = ( x + i + 100 ) ; <nl> - ( x ) = ( x + i + 100 ) ; <nl> - } <nl> - <nl> - for ( int i = ( 0 + 1 ) ; ( i ) < ( ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { <nl> - System . identityHashCode ( " hi " ) ; <nl> - } <nl> - <nl> - return ( 0 ) ; <nl> - } <nl> - <nl> - private int f2 ( int arg1 , double arg2 ) { <nl> - int x , a , b , c , d ; <nl> - String e , f ; <nl> - <nl> - x = 0 ; <nl> - a = 0 ; <nl> - b = 0 ; <nl> - c = ( a + b ) ; <nl> - d = c - 1 ; <nl> - <nl> - int i = ( int ) arg2 ; <nl> - i = ( ( int ) arg2 ) ; <nl> - <nl> - x + = ( i + 100 + arg1 ) ; <nl> - a = ( a + b ) * ( c + d ) ; <nl> - b = ( ( ( ( a + b ) * ( c + d ) ) ) ) ; <nl> - c = ( ( ( a ) < = b ) ) ? 0 : 1 ; <nl> - d = ( a ) + ( b ) * ( 600 ) / ( int ) ( 12 . 5f ) + ( int ) ( arg2 ) ; <nl> - e = ( " this " ) + ( " that " ) + ( " is " + " other " ) ; <nl> - f = ( " this is a really , really long string that should be truncated . " ) ; <nl> - <nl> - return ( x + a + b + d ) ; <nl> - } <nl> - <nl> - private boolean f3 ( ) { <nl> - int x = f2 ( ( 1 ) , ( 13 . 5 ) ) ; <nl> - boolean b = ( true ) ; <nl> - return ( b ) ; <nl> - } <nl> - <nl> - public static int f4 ( int z , int a ) { <nl> - int r = ( z * a ) ; <nl> - r = ( a > z ) ? a : z ; <nl> - r = ( ( a > z ) ? a : z ) ; <nl> - r = ( a > z ) ? a : ( z + z ) ; <nl> - return ( r * r - 1 ) ; <nl> - } <nl> - <nl> - public void f5 ( ) { <nl> - int x , y ; <nl> - x = 0 ; <nl> - y = 0 ; <nl> - if ( x = = y ) { <nl> - print ( x ) ; <nl> - } <nl> - if ( ( x > y ) ) { <nl> - print ( y ) ; <nl> - } <nl> - <nl> - while ( ( x < 10 ) ) { <nl> - print ( x + + ) ; <nl> - } <nl> - <nl> - do { <nl> - print ( ( y + = 100 ) ) ; <nl> - } while ( y < ( 4000 ) ) ; <nl> - } <nl> - <nl> - private void f6 ( TypeA a ) { <nl> - TypeB b = ( TypeB ) a ; <nl> - TypeC c = ( ( TypeC ) a ) ; <nl> - int r = 12345 ; <nl> - r < < = ( 3 ) ; <nl> - TypeParameterized < String > d = ( ( TypeParameterized < String > ) a ) ; <nl> - } <nl> - <nl> - private void print ( int arg ) <nl> - { <nl> - System . identityHashCode ( " arg = " + arg ) ; <nl> - } <nl> - <nl> - static class TypeParameterized < T > { } <nl> - static class TypeA extends TypeParameterized < String > { } <nl> - static class TypeB extends TypeA { } <nl> - static class TypeC extends TypeA { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParentheses15Extensions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParentheses15Extensions . java <nl> new file mode 100644 <nl> index 0000000 . . 477e4a3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParentheses15Extensions . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + / / someexamples of 1 . 5 extensions <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . unnecessaryparentheses ; <nl> + <nl> + @ interface MyAnnotation1 { <nl> + String name ( ) ; <nl> + int version ( ) ; <nl> + } <nl> + <nl> + @ MyAnnotation1 ( name = " ABC " , version = 1 ) <nl> + public class InputUnnecessaryParentheses15Extensions <nl> + { <nl> + <nl> + } <nl> + <nl> + enum Enum2 <nl> + { <nl> + A , B , C ; <nl> + Enum2 ( ) { } <nl> + public String toString ( ) { <nl> + return " " ; / / some custom implementation <nl> + } <nl> + } <nl> + <nl> + interface TestRequireThisEnum <nl> + { <nl> + enum DAY _ OF _ WEEK <nl> + { <nl> + SUNDAY , <nl> + MONDAY , <nl> + TUESDAY , <nl> + WEDNESDAY , <nl> + THURSDAY , <nl> + FRIDAY , <nl> + SATURDAY <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java <nl> new file mode 100644 <nl> index 0000000 . . 777f4b1 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java <nl> @ @ - 0 , 0 + 1 , 94 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . unnecessaryparentheses ; <nl> + public class InputUnnecessaryParenthesesOperatorsAndCasts { <nl> + int f1 ( ) { <nl> + int x = 0 ; <nl> + for ( int i = ( 0 + 1 ) ; ( ( i ) < ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { <nl> + x + = ( i + 100 ) ; <nl> + ( x ) + = ( i + 100 / * * comment test * / ) ; <nl> + x = ( x + i + 100 ) ; <nl> + ( x ) = ( x + i + 100 ) ; <nl> + } <nl> + <nl> + for ( int i = ( 0 + 1 ) ; ( i ) < ( ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { <nl> + System . identityHashCode ( " hi " ) ; <nl> + } <nl> + <nl> + return ( 0 ) ; <nl> + } <nl> + <nl> + private int f2 ( int arg1 , double arg2 ) { <nl> + int x , a , b , c , d ; <nl> + String e , f ; <nl> + <nl> + x = 0 ; <nl> + a = 0 ; <nl> + b = 0 ; <nl> + c = ( a + b ) ; <nl> + d = c - 1 ; <nl> + <nl> + int i = ( int ) arg2 ; <nl> + i = ( ( int ) arg2 ) ; <nl> + <nl> + x + = ( i + 100 + arg1 ) ; <nl> + a = ( a + b ) * ( c + d ) ; <nl> + b = ( ( ( ( a + b ) * ( c + d ) ) ) ) ; <nl> + c = ( ( ( a ) < = b ) ) ? 0 : 1 ; <nl> + d = ( a ) + ( b ) * ( 600 ) / ( int ) ( 12 . 5f ) + ( int ) ( arg2 ) ; <nl> + e = ( " this " ) + ( " that " ) + ( " is " + " other " ) ; <nl> + f = ( " this is a really , really long string that should be truncated . " ) ; <nl> + <nl> + return ( x + a + b + d ) ; <nl> + } <nl> + <nl> + private boolean f3 ( ) { <nl> + int x = f2 ( ( 1 ) , ( 13 . 5 ) ) ; <nl> + boolean b = ( true ) ; <nl> + return ( b ) ; <nl> + } <nl> + <nl> + public static int f4 ( int z , int a ) { <nl> + int r = ( z * a ) ; <nl> + r = ( a > z ) ? a : z ; <nl> + r = ( ( a > z ) ? a : z ) ; <nl> + r = ( a > z ) ? a : ( z + z ) ; <nl> + return ( r * r - 1 ) ; <nl> + } <nl> + <nl> + public void f5 ( ) { <nl> + int x , y ; <nl> + x = 0 ; <nl> + y = 0 ; <nl> + if ( x = = y ) { <nl> + print ( x ) ; <nl> + } <nl> + if ( ( x > y ) ) { <nl> + print ( y ) ; <nl> + } <nl> + <nl> + while ( ( x < 10 ) ) { <nl> + print ( x + + ) ; <nl> + } <nl> + <nl> + do { <nl> + print ( ( y + = 100 ) ) ; <nl> + } while ( y < ( 4000 ) ) ; <nl> + } <nl> + <nl> + private void f6 ( TypeA a ) { <nl> + TypeB b = ( TypeB ) a ; <nl> + TypeC c = ( ( TypeC ) a ) ; <nl> + int r = 12345 ; <nl> + r < < = ( 3 ) ; <nl> + TypeParameterized < String > d = ( ( TypeParameterized < String > ) a ) ; <nl> + } <nl> + <nl> + private void print ( int arg ) <nl> + { <nl> + System . identityHashCode ( " arg = " + arg ) ; <nl> + } <nl> + <nl> + static class TypeParameterized < T > { } <nl> + static class TypeA extends TypeParameterized < String > { } <nl> + static class TypeB extends TypeA { } <nl> + static class TypeC extends TypeA { } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm <nl> index 46e2299 . . 2809831 100644 <nl> - - - a / src / xdocs / index . xml . vm <nl> + + + b / src / xdocs / index . xml . vm <nl> @ @ - 168 , 14 + 168 , 14 @ @ <nl> < / td > <nl> < / tr > <nl> < tr > <nl> - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> + < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> < td > David Schneider < / td > <nl> < td > <nl> < a href = " http : / / eclipse - cs . sourceforge . net / " > Eclipse - CS Home Page < / a > <nl> < / td > <nl> < td > <nl> In 2007 was awarded <nl> - < a href = " http : / / www . eclipse . org / org / press - release / 20070306eclipsecommunityawards . php " > <nl> + < a href = " https : / / eclipse . org / org / press - release / 20070306eclipsecommunityawards . php " > <nl> Best Open Source Eclipse - based Developer tool <nl> < / a > . <nl> < / td > <nl> @ @ - 201 , 7 + 201 , 7 @ @ <nl> < td / > <nl> < / tr > <nl> < tr > <nl> - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> + < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> < td > Roman Ivanov < / td > <nl> < td > <nl> < a href = " https : / / github . com / sevntu - checkstyle " > Project Page < / a > <nl> @ @ - 344 , 7 + 344 , 7 @ @ <nl> < td / > <nl> < / tr > <nl> < tr > <nl> - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> + < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> < td > Marco van Meegen < / td > <nl> < td > <nl> < a href = " http : / / www . mvmsoft . de / content / plugins / checkclipse / checkclipse . htm " > Checklipse Home Page < / a >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 index b9dfad6 . . 896ca2b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 @ @ - 45 , 7 + 45 , 9 @ @ public class UnnecessaryParenthesesCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " unnecessaryparentheses " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 100 , 7 + 102 , 7 @ @ public class UnnecessaryParenthesesCheckTest extends BaseCheckTestSupport { 
 " 82 : 39 : " + getCheckMessage ( MSG _ ASSIGN ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputUnnecessaryParentheses . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputUnnecessaryParenthesesOperatorsAndCasts . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 108 , 7 + 110 , 7 @ @ public class UnnecessaryParenthesesCheckTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( UnnecessaryParenthesesCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " Input15Extensions . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputUnnecessaryParentheses15Extensions . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputUnnecessaryParentheses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputUnnecessaryParentheses . java 
 deleted file mode 100644 
 index 04f11dd . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputUnnecessaryParentheses . java 
 + + + / dev / null 
 @ @ - 1 , 94 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - public class InputUnnecessaryParentheses { 
 - int f1 ( ) { 
 - int x = 0 ; 
 - for ( int i = ( 0 + 1 ) ; ( ( i ) < ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { 
 - x + = ( i + 100 ) ; 
 - ( x ) + = ( i + 100 / * * comment test * / ) ; 
 - x = ( x + i + 100 ) ; 
 - ( x ) = ( x + i + 100 ) ; 
 - } 
 - 
 - for ( int i = ( 0 + 1 ) ; ( i ) < ( ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { 
 - System . identityHashCode ( " hi " ) ; 
 - } 
 - 
 - return ( 0 ) ; 
 - } 
 - 
 - private int f2 ( int arg1 , double arg2 ) { 
 - int x , a , b , c , d ; 
 - String e , f ; 
 - 
 - x = 0 ; 
 - a = 0 ; 
 - b = 0 ; 
 - c = ( a + b ) ; 
 - d = c - 1 ; 
 - 
 - int i = ( int ) arg2 ; 
 - i = ( ( int ) arg2 ) ; 
 - 
 - x + = ( i + 100 + arg1 ) ; 
 - a = ( a + b ) * ( c + d ) ; 
 - b = ( ( ( ( a + b ) * ( c + d ) ) ) ) ; 
 - c = ( ( ( a ) < = b ) ) ? 0 : 1 ; 
 - d = ( a ) + ( b ) * ( 600 ) / ( int ) ( 12 . 5f ) + ( int ) ( arg2 ) ; 
 - e = ( " this " ) + ( " that " ) + ( " is " + " other " ) ; 
 - f = ( " this is a really , really long string that should be truncated . " ) ; 
 - 
 - return ( x + a + b + d ) ; 
 - } 
 - 
 - private boolean f3 ( ) { 
 - int x = f2 ( ( 1 ) , ( 13 . 5 ) ) ; 
 - boolean b = ( true ) ; 
 - return ( b ) ; 
 - } 
 - 
 - public static int f4 ( int z , int a ) { 
 - int r = ( z * a ) ; 
 - r = ( a > z ) ? a : z ; 
 - r = ( ( a > z ) ? a : z ) ; 
 - r = ( a > z ) ? a : ( z + z ) ; 
 - return ( r * r - 1 ) ; 
 - } 
 - 
 - public void f5 ( ) { 
 - int x , y ; 
 - x = 0 ; 
 - y = 0 ; 
 - if ( x = = y ) { 
 - print ( x ) ; 
 - } 
 - if ( ( x > y ) ) { 
 - print ( y ) ; 
 - } 
 - 
 - while ( ( x < 10 ) ) { 
 - print ( x + + ) ; 
 - } 
 - 
 - do { 
 - print ( ( y + = 100 ) ) ; 
 - } while ( y < ( 4000 ) ) ; 
 - } 
 - 
 - private void f6 ( TypeA a ) { 
 - TypeB b = ( TypeB ) a ; 
 - TypeC c = ( ( TypeC ) a ) ; 
 - int r = 12345 ; 
 - r < < = ( 3 ) ; 
 - TypeParameterized < String > d = ( ( TypeParameterized < String > ) a ) ; 
 - } 
 - 
 - private void print ( int arg ) 
 - { 
 - System . identityHashCode ( " arg = " + arg ) ; 
 - } 
 - 
 - static class TypeParameterized < T > { } 
 - static class TypeA extends TypeParameterized < String > { } 
 - static class TypeB extends TypeA { } 
 - static class TypeC extends TypeA { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParentheses15Extensions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParentheses15Extensions . java 
 new file mode 100644 
 index 0000000 . . 477e4a3 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParentheses15Extensions . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / / someexamples of 1 . 5 extensions 
 + package com . puppycrawl . tools . checkstyle . checks . coding . unnecessaryparentheses ; 
 + 
 + @ interface MyAnnotation1 { 
 + String name ( ) ; 
 + int version ( ) ; 
 + } 
 + 
 + @ MyAnnotation1 ( name = " ABC " , version = 1 ) 
 + public class InputUnnecessaryParentheses15Extensions 
 + { 
 + 
 + } 
 + 
 + enum Enum2 
 + { 
 + A , B , C ; 
 + Enum2 ( ) { } 
 + public String toString ( ) { 
 + return " " ; / / some custom implementation 
 + } 
 + } 
 + 
 + interface TestRequireThisEnum 
 + { 
 + enum DAY _ OF _ WEEK 
 + { 
 + SUNDAY , 
 + MONDAY , 
 + TUESDAY , 
 + WEDNESDAY , 
 + THURSDAY , 
 + FRIDAY , 
 + SATURDAY 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java 
 new file mode 100644 
 index 0000000 . . 777f4b1 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java 
 @ @ - 0 , 0 + 1 , 94 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . unnecessaryparentheses ; 
 + public class InputUnnecessaryParenthesesOperatorsAndCasts { 
 + int f1 ( ) { 
 + int x = 0 ; 
 + for ( int i = ( 0 + 1 ) ; ( ( i ) < ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { 
 + x + = ( i + 100 ) ; 
 + ( x ) + = ( i + 100 / * * comment test * / ) ; 
 + x = ( x + i + 100 ) ; 
 + ( x ) = ( x + i + 100 ) ; 
 + } 
 + 
 + for ( int i = ( 0 + 1 ) ; ( i ) < ( ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { 
 + System . identityHashCode ( " hi " ) ; 
 + } 
 + 
 + return ( 0 ) ; 
 + } 
 + 
 + private int f2 ( int arg1 , double arg2 ) { 
 + int x , a , b , c , d ; 
 + String e , f ; 
 + 
 + x = 0 ; 
 + a = 0 ; 
 + b = 0 ; 
 + c = ( a + b ) ; 
 + d = c - 1 ; 
 + 
 + int i = ( int ) arg2 ; 
 + i = ( ( int ) arg2 ) ; 
 + 
 + x + = ( i + 100 + arg1 ) ; 
 + a = ( a + b ) * ( c + d ) ; 
 + b = ( ( ( ( a + b ) * ( c + d ) ) ) ) ; 
 + c = ( ( ( a ) < = b ) ) ? 0 : 1 ; 
 + d = ( a ) + ( b ) * ( 600 ) / ( int ) ( 12 . 5f ) + ( int ) ( arg2 ) ; 
 + e = ( " this " ) + ( " that " ) + ( " is " + " other " ) ; 
 + f = ( " this is a really , really long string that should be truncated . " ) ; 
 + 
 + return ( x + a + b + d ) ; 
 + } 
 + 
 + private boolean f3 ( ) { 
 + int x = f2 ( ( 1 ) , ( 13 . 5 ) ) ; 
 + boolean b = ( true ) ; 
 + return ( b ) ; 
 + } 
 + 
 + public static int f4 ( int z , int a ) { 
 + int r = ( z * a ) ; 
 + r = ( a > z ) ? a : z ; 
 + r = ( ( a > z ) ? a : z ) ; 
 + r = ( a > z ) ? a : ( z + z ) ; 
 + return ( r * r - 1 ) ; 
 + } 
 + 
 + public void f5 ( ) { 
 + int x , y ; 
 + x = 0 ; 
 + y = 0 ; 
 + if ( x = = y ) { 
 + print ( x ) ; 
 + } 
 + if ( ( x > y ) ) { 
 + print ( y ) ; 
 + } 
 + 
 + while ( ( x < 10 ) ) { 
 + print ( x + + ) ; 
 + } 
 + 
 + do { 
 + print ( ( y + = 100 ) ) ; 
 + } while ( y < ( 4000 ) ) ; 
 + } 
 + 
 + private void f6 ( TypeA a ) { 
 + TypeB b = ( TypeB ) a ; 
 + TypeC c = ( ( TypeC ) a ) ; 
 + int r = 12345 ; 
 + r < < = ( 3 ) ; 
 + TypeParameterized < String > d = ( ( TypeParameterized < String > ) a ) ; 
 + } 
 + 
 + private void print ( int arg ) 
 + { 
 + System . identityHashCode ( " arg = " + arg ) ; 
 + } 
 + 
 + static class TypeParameterized < T > { } 
 + static class TypeA extends TypeParameterized < String > { } 
 + static class TypeB extends TypeA { } 
 + static class TypeC extends TypeA { } 
 + }

NEAREST DIFF:
diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm 
 index 46e2299 . . 2809831 100644 
 - - - a / src / xdocs / index . xml . vm 
 + + + b / src / xdocs / index . xml . vm 
 @ @ - 168 , 14 + 168 , 14 @ @ 
 < / td > 
 < / tr > 
 < tr > 
 - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 + < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 < td > David Schneider < / td > 
 < td > 
 < a href = " http : / / eclipse - cs . sourceforge . net / " > Eclipse - CS Home Page < / a > 
 < / td > 
 < td > 
 In 2007 was awarded 
 - < a href = " http : / / www . eclipse . org / org / press - release / 20070306eclipsecommunityawards . php " > 
 + < a href = " https : / / eclipse . org / org / press - release / 20070306eclipsecommunityawards . php " > 
 Best Open Source Eclipse - based Developer tool 
 < / a > . 
 < / td > 
 @ @ - 201 , 7 + 201 , 7 @ @ 
 < td / > 
 < / tr > 
 < tr > 
 - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 + < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 < td > Roman Ivanov < / td > 
 < td > 
 < a href = " https : / / github . com / sevntu - checkstyle " > Project Page < / a > 
 @ @ - 344 , 7 + 344 , 7 @ @ 
 < td / > 
 < / tr > 
 < tr > 
 - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 + < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 < td > Marco van Meegen < / td > 
 < td > 
 < a href = " http : / / www . mvmsoft . de / content / plugins / checkclipse / checkclipse . htm " > Checklipse Home Page < / a >
