BLEU SCORE: 0.03057230827292727

TEST MSG: spelling : value
GENERATED MSG: Suppress wrong root element in tests . # 1555

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index 5300864 . . 37c6ee5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 210 , 7 + 210 , 7 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { <nl> assertTrue ( " Invalid exception message : " + ex . getMessage ( ) , <nl> ex . getMessage ( ) . contains ( " \ " property \ " " ) ) ; <nl> assertTrue ( " Invalid exception message : " + ex . getMessage ( ) , <nl> - ex . getMessage ( ) . endsWith ( " : 8 : 41 " ) ) ; <nl> + ex . getMessage ( ) . endsWith ( " : 8 : 43 " ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / configurationloader / InputConfigurationLoaderMissingPropertyValue . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / configurationloader / InputConfigurationLoaderMissingPropertyValue . xml <nl> index 69bafff . . c50ed1f 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / configurationloader / InputConfigurationLoaderMissingPropertyValue . xml <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / configurationloader / InputConfigurationLoaderMissingPropertyValue . xml <nl> @ @ - 5 , 5 + 5 , 5 @ @ <nl> " http : / / checkstyle . sourceforge . net / dtds / configuration _ 1 _ 1 . dtd " > <nl> <nl> < module name = " Checker " > <nl> - < property name = " tabWidth " valu = " 4 " / > <nl> + < property name = " tabWidth " value _ = " 4 " / > <nl> < / module >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index d874d10 . . 5e7272d 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1078 , 7 + 1078 , 7 @ @ <nl> < totalBranchRate > 89 < / totalBranchRate > <nl> < totalLineRate > 95 < / totalLineRate > <nl> < regexes > <nl> - < regex > < pattern > . * . Checker < / pattern > < branchRate > 80 < / branchRate > < lineRate > 85 < / lineRate > < / regex > <nl> + < regex > < pattern > . * . Checker < / pattern > < branchRate > 100 < / branchRate > < lineRate > 97 < / lineRate > < / regex > <nl> <nl> < regex > < pattern > . * . checks . AbstractOptionCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 80 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . AbstractTypeAwareCheck < / pattern > < branchRate > 87 < / branchRate > < lineRate > 84 < / lineRate > < / regex > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 20e22d8 . . b6348f3 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 22 , 15 + 22 , 20 @ @ package com . puppycrawl . tools . checkstyle ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> import java . io . File ; <nl> + import java . io . UnsupportedEncodingException ; <nl> import java . util . ArrayList ; <nl> + import java . util . HashSet ; <nl> import java . util . List ; <nl> import java . util . TreeSet ; <nl> <nl> import org . junit . Test ; <nl> <nl> import com . google . common . collect . Sets ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> <nl> public class CheckerTest { <nl> @ @ - 175 , 4 + 180 , 91 @ @ public class CheckerTest { <nl> final int counter = c . process ( files ) ; <nl> assertEquals ( counter , 1 ) ; / / comparing to 1 as there is only one legal file in input <nl> } <nl> + <nl> + @ Test <nl> + public void testSetters ( ) throws Exception { <nl> + / / all that is set by reflection , so just make code coverage be happy <nl> + final Checker c = new Checker ( ) ; <nl> + c . setClassLoader ( this . getClass ( ) . getClassLoader ( ) ) ; <nl> + c . setClassloader ( this . getClass ( ) . getClassLoader ( ) ) ; <nl> + c . setBasedir ( " some " ) ; <nl> + c . setSeverity ( " ignore " ) ; <nl> + <nl> + PackageObjectFactory factory = new PackageObjectFactory ( <nl> + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + c . setModuleFactory ( factory ) ; <nl> + <nl> + c . setFileExtensions ( null ) ; <nl> + c . setFileExtensions ( new String [ ] { " . java " , " xml " } ) ; <nl> + <nl> + try { <nl> + c . setCharset ( " UNKNOW - CHARSET " ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( UnsupportedEncodingException ex ) { <nl> + assertEquals ( " unsupported charset : ' UNKNOW - CHARSET ' " , ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testNoClassLoaderNoModuleFactory ( ) throws Exception { <nl> + final Checker c = new Checker ( ) ; <nl> + <nl> + try { <nl> + c . finishLocalSetup ( ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( CheckstyleException ex ) { <nl> + assertEquals ( " if no custom moduleFactory is set , " <nl> + + " moduleClassLoader must be specified " , ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testNoModuleFactory ( ) throws Exception { <nl> + final Checker c = new Checker ( ) ; <nl> + c . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + <nl> + c . finishLocalSetup ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFinishLocalSetupFullyInitialized ( ) throws Exception { <nl> + final Checker c = new Checker ( ) ; <nl> + c . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + PackageObjectFactory factory = new PackageObjectFactory ( <nl> + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + c . setModuleFactory ( factory ) ; <nl> + <nl> + c . finishLocalSetup ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSetupChildExceptions ( ) throws Exception { <nl> + final Checker c = new Checker ( ) ; <nl> + PackageObjectFactory factory = new PackageObjectFactory ( <nl> + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + c . setModuleFactory ( factory ) ; <nl> + <nl> + Configuration config = new DefaultConfiguration ( " java . lang . String " ) ; <nl> + try { <nl> + c . setupChild ( config ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( CheckstyleException ex ) { <nl> + assertEquals ( " cannot initialize module java . lang . String " <nl> + + " - java . lang . String is not allowed as a child in Checker " , ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testSetupChildListener ( ) throws Exception { <nl> + final Checker c = new Checker ( ) ; <nl> + PackageObjectFactory factory = new PackageObjectFactory ( <nl> + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + c . setModuleFactory ( factory ) ; <nl> + <nl> + Configuration config = new DefaultConfiguration ( DebugAuditAdapter . class . getCanonicalName ( ) ) ; <nl> + c . setupChild ( config ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index 5300864 . . 37c6ee5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 210 , 7 + 210 , 7 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { 
 assertTrue ( " Invalid exception message : " + ex . getMessage ( ) , 
 ex . getMessage ( ) . contains ( " \ " property \ " " ) ) ; 
 assertTrue ( " Invalid exception message : " + ex . getMessage ( ) , 
 - ex . getMessage ( ) . endsWith ( " : 8 : 41 " ) ) ; 
 + ex . getMessage ( ) . endsWith ( " : 8 : 43 " ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / configurationloader / InputConfigurationLoaderMissingPropertyValue . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / configurationloader / InputConfigurationLoaderMissingPropertyValue . xml 
 index 69bafff . . c50ed1f 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / configurationloader / InputConfigurationLoaderMissingPropertyValue . xml 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / configurationloader / InputConfigurationLoaderMissingPropertyValue . xml 
 @ @ - 5 , 5 + 5 , 5 @ @ 
 " http : / / checkstyle . sourceforge . net / dtds / configuration _ 1 _ 1 . dtd " > 
 
 < module name = " Checker " > 
 - < property name = " tabWidth " valu = " 4 " / > 
 + < property name = " tabWidth " value _ = " 4 " / > 
 < / module >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index d874d10 . . 5e7272d 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1078 , 7 + 1078 , 7 @ @ 
 < totalBranchRate > 89 < / totalBranchRate > 
 < totalLineRate > 95 < / totalLineRate > 
 < regexes > 
 - < regex > < pattern > . * . Checker < / pattern > < branchRate > 80 < / branchRate > < lineRate > 85 < / lineRate > < / regex > 
 + < regex > < pattern > . * . Checker < / pattern > < branchRate > 100 < / branchRate > < lineRate > 97 < / lineRate > < / regex > 
 
 < regex > < pattern > . * . checks . AbstractOptionCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 80 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . AbstractTypeAwareCheck < / pattern > < branchRate > 87 < / branchRate > < lineRate > 84 < / lineRate > < / regex > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 20e22d8 . . b6348f3 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 22 , 15 + 22 , 20 @ @ package com . puppycrawl . tools . checkstyle ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . fail ; 
 
 import java . io . File ; 
 + import java . io . UnsupportedEncodingException ; 
 import java . util . ArrayList ; 
 + import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . TreeSet ; 
 
 import org . junit . Test ; 
 
 import com . google . common . collect . Sets ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 
 public class CheckerTest { 
 @ @ - 175 , 4 + 180 , 91 @ @ public class CheckerTest { 
 final int counter = c . process ( files ) ; 
 assertEquals ( counter , 1 ) ; / / comparing to 1 as there is only one legal file in input 
 } 
 + 
 + @ Test 
 + public void testSetters ( ) throws Exception { 
 + / / all that is set by reflection , so just make code coverage be happy 
 + final Checker c = new Checker ( ) ; 
 + c . setClassLoader ( this . getClass ( ) . getClassLoader ( ) ) ; 
 + c . setClassloader ( this . getClass ( ) . getClassLoader ( ) ) ; 
 + c . setBasedir ( " some " ) ; 
 + c . setSeverity ( " ignore " ) ; 
 + 
 + PackageObjectFactory factory = new PackageObjectFactory ( 
 + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + c . setModuleFactory ( factory ) ; 
 + 
 + c . setFileExtensions ( null ) ; 
 + c . setFileExtensions ( new String [ ] { " . java " , " xml " } ) ; 
 + 
 + try { 
 + c . setCharset ( " UNKNOW - CHARSET " ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( UnsupportedEncodingException ex ) { 
 + assertEquals ( " unsupported charset : ' UNKNOW - CHARSET ' " , ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testNoClassLoaderNoModuleFactory ( ) throws Exception { 
 + final Checker c = new Checker ( ) ; 
 + 
 + try { 
 + c . finishLocalSetup ( ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( CheckstyleException ex ) { 
 + assertEquals ( " if no custom moduleFactory is set , " 
 + + " moduleClassLoader must be specified " , ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testNoModuleFactory ( ) throws Exception { 
 + final Checker c = new Checker ( ) ; 
 + c . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + 
 + c . finishLocalSetup ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testFinishLocalSetupFullyInitialized ( ) throws Exception { 
 + final Checker c = new Checker ( ) ; 
 + c . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + PackageObjectFactory factory = new PackageObjectFactory ( 
 + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + c . setModuleFactory ( factory ) ; 
 + 
 + c . finishLocalSetup ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testSetupChildExceptions ( ) throws Exception { 
 + final Checker c = new Checker ( ) ; 
 + PackageObjectFactory factory = new PackageObjectFactory ( 
 + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + c . setModuleFactory ( factory ) ; 
 + 
 + Configuration config = new DefaultConfiguration ( " java . lang . String " ) ; 
 + try { 
 + c . setupChild ( config ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( CheckstyleException ex ) { 
 + assertEquals ( " cannot initialize module java . lang . String " 
 + + " - java . lang . String is not allowed as a child in Checker " , ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testSetupChildListener ( ) throws Exception { 
 + final Checker c = new Checker ( ) ; 
 + PackageObjectFactory factory = new PackageObjectFactory ( 
 + new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + c . setModuleFactory ( factory ) ; 
 + 
 + Configuration config = new DefaultConfiguration ( DebugAuditAdapter . class . getCanonicalName ( ) ) ; 
 + c . setupChild ( config ) ; 
 + } 
 }
