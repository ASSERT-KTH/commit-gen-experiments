BLEU SCORE: 0.06917184228205472

TEST MSG: Issue # 3153 : IllegalTokenTextCheck and IllegalTokenCheck does not work with COMMENT _ CONTENT token
GENERATED MSG: Issue # 1293 : Refactoring of IllegalTokenCheck and IllegalTokenTextCheck . Coverage has been improved .

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java <nl> index e8b8873 . . 18ef30f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> - import java . util . regex . Pattern ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> @ @ - 39 , 13 + 38 , 6 @ @ public final class DetailNodeTreeStringPrinter { <nl> / * * OS specific line separator . * / <nl> private static final String LINE _ SEPARATOR = System . getProperty ( " line . separator " ) ; <nl> <nl> - / * * Newline pattern . * / <nl> - private static final Pattern NEWLINE = Pattern . compile ( " \ n " ) ; <nl> - / * * Return pattern . * / <nl> - private static final Pattern RETURN = Pattern . compile ( " \ r " ) ; <nl> - / * * Tab pattern . * / <nl> - private static final Pattern TAB = Pattern . compile ( " \ t " ) ; <nl> - <nl> / * * Prevent instances . * / <nl> private DetailNodeTreeStringPrinter ( ) { <nl> / / no code <nl> @ @ - 91 , 7 + 83 , 7 @ @ public final class DetailNodeTreeStringPrinter { <nl> } <nl> messageBuilder . append ( getIndentation ( node ) ) <nl> . append ( JavadocUtils . getTokenName ( node . getType ( ) ) ) . append ( " - > " ) <nl> - . append ( excapeAllControlChars ( node . getText ( ) ) ) . append ( " [ " ) <nl> + . append ( JavadocUtils . excapeAllControlChars ( node . getText ( ) ) ) . append ( " [ " ) <nl> . append ( node . getLineNumber ( ) ) . append ( ' : ' ) . append ( node . getColumnNumber ( ) ) <nl> . append ( ' ] ' ) . append ( LINE _ SEPARATOR ) <nl> . append ( printTree ( JavadocUtils . getFirstChild ( node ) , rootPrefix , prefix ) ) ; <nl> @ @ - 101 , 17 + 93 , 6 @ @ public final class DetailNodeTreeStringPrinter { <nl> } <nl> <nl> / * * <nl> - * Replace all control chars with excaped symbols . <nl> - * @ param text the String to process . <nl> - * @ return the processed String with all control chars excaped . <nl> - * / <nl> - private static String excapeAllControlChars ( String text ) { <nl> - final String textWithoutNewlines = NEWLINE . matcher ( text ) . replaceAll ( " \ \ \ \ n " ) ; <nl> - final String textWithoutReturns = RETURN . matcher ( textWithoutNewlines ) . replaceAll ( " \ \ \ \ r " ) ; <nl> - return TAB . matcher ( textWithoutReturns ) . replaceAll ( " \ \ \ \ t " ) ; <nl> - } <nl> - <nl> - / * * <nl> * Get indentation for a node . <nl> * @ param node the DetailNode to get the indentation for . <nl> * @ return the indentation in String format . <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheck . java <nl> index 6810da7 . . 5180d9d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheck . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> + import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> <nl> / * * <nl> @ @ - 79 , 6 + 80 , 11 @ @ public class IllegalTokenCheck <nl> } <nl> <nl> @ Override <nl> + public boolean isCommentNodesRequired ( ) { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> log ( <nl> ast . getLineNo ( ) , <nl> @ @ - 95 , 11 + 101 , 17 @ @ public class IllegalTokenCheck <nl> * / <nl> private static String convertToString ( DetailAST ast ) { <nl> final String tokenText ; <nl> - if ( ast . getType ( ) = = TokenTypes . LABELED _ STAT ) { <nl> - tokenText = ast . getFirstChild ( ) . getText ( ) + ast . getText ( ) ; <nl> - } <nl> - else { <nl> - tokenText = ast . getText ( ) ; <nl> + switch ( ast . getType ( ) ) { <nl> + case TokenTypes . LABELED _ STAT : <nl> + tokenText = ast . getFirstChild ( ) . getText ( ) + ast . getText ( ) ; <nl> + break ; <nl> + / / multyline tokens need to become singlelined <nl> + case TokenTypes . COMMENT _ CONTENT : <nl> + tokenText = JavadocUtils . excapeAllControlChars ( ast . getText ( ) ) ; <nl> + break ; <nl> + default : <nl> + tokenText = ast . getText ( ) ; <nl> + break ; <nl> } <nl> return tokenText ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java <nl> index bf5dac5 . . 1c544e2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java <nl> @ @ - 91 , 6 + 91 , 11 @ @ public class IllegalTokenTextCheck <nl> } <nl> <nl> @ Override <nl> + public boolean isCommentNodesRequired ( ) { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> final String text = ast . getText ( ) ; <nl> if ( regexp . matcher ( text ) . find ( ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> index e035c79 . . d079628 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> @ @ - 79 , 6 + 79 , 15 @ @ public final class JavadocUtils { <nl> private static final Pattern INLINE _ TAG _ PATTERN = Pattern . compile ( <nl> " . * ? \ \ { @ ( \ \ p { Alpha } + ) \ \ s + ( . * ? ) \ \ } " ) ; <nl> <nl> + / * * Newline pattern . * / <nl> + private static final Pattern NEWLINE = Pattern . compile ( " \ n " ) ; <nl> + <nl> + / * * Return pattern . * / <nl> + private static final Pattern RETURN = Pattern . compile ( " \ r " ) ; <nl> + <nl> + / * * Tab pattern . * / <nl> + private static final Pattern TAB = Pattern . compile ( " \ t " ) ; <nl> + <nl> / / Using reflection gets all token names and values from JavadocTokenTypes class <nl> / / and saves to TOKEN _ NAME _ TO _ VALUE and TOKEN _ VALUE _ TO _ NAME collections . <nl> static { <nl> @ @ - 448 , 4 + 457 , 14 @ @ public final class JavadocUtils { <nl> return javadocTagName ; <nl> } <nl> <nl> + / * * <nl> + * Replace all control chars with excaped symbols . <nl> + * @ param text the String to process . <nl> + * @ return the processed String with all control chars excaped . <nl> + * / <nl> + public static String excapeAllControlChars ( String text ) { <nl> + final String textWithoutNewlines = NEWLINE . matcher ( text ) . replaceAll ( " \ \ \ \ n " ) ; <nl> + final String textWithoutReturns = RETURN . matcher ( textWithoutNewlines ) . replaceAll ( " \ \ \ \ r " ) ; <nl> + return TAB . matcher ( textWithoutReturns ) . replaceAll ( " \ \ \ \ t " ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheckTest . java <nl> index 7568c18 . . 55ac7b6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheckTest . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; <nl> <nl> public class IllegalTokenCheckTest <nl> extends BaseCheckTestSupport { <nl> @ @ - 73 , 4 + 74 , 67 @ @ public class IllegalTokenCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testCommentContentToken ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( IllegalTokenCheck . class ) ; <nl> + checkConfig . addAttribute ( " tokens " , " COMMENT _ CONTENT " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 3 : 3 : " + getCheckMessage ( MSG _ KEY , <nl> + JavadocUtils . excapeAllControlChars ( <nl> + " * " + System . lineSeparator ( ) <nl> + + " * Test for illegal tokens " <nl> + + System . lineSeparator ( ) + " " ) ) , <nl> + " 31 : 29 : " + getCheckMessage ( MSG _ KEY , <nl> + JavadocUtils . excapeAllControlChars ( <nl> + " some comment href " + System . lineSeparator ( ) ) ) , <nl> + " 35 : 28 : " + getCheckMessage ( MSG _ KEY , <nl> + JavadocUtils . excapeAllControlChars ( <nl> + " some a href " + System . lineSeparator ( ) ) ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testBlockCommentBeginToken ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( IllegalTokenCheck . class ) ; <nl> + checkConfig . addAttribute ( " tokens " , " BLOCK _ COMMENT _ BEGIN " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 3 : 1 : " + getCheckMessage ( MSG _ KEY , " / * " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testBlockCommentEndToken ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( IllegalTokenCheck . class ) ; <nl> + checkConfig . addAttribute ( " tokens " , " BLOCK _ COMMENT _ END " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 5 : 2 : " + getCheckMessage ( MSG _ KEY , " * / " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSingleLineCommentToken ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( IllegalTokenCheck . class ) ; <nl> + checkConfig . addAttribute ( " tokens " , " SINGLE _ LINE _ COMMENT " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 31 : 27 : " + getCheckMessage ( MSG _ KEY , " / / " ) , <nl> + " 35 : 26 : " + getCheckMessage ( MSG _ KEY , " / / " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java <nl> index fa71b27 . . 0a899d7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java <nl> @ @ - 104 , 5 + 104 , 22 @ @ public class IllegalTokenTextCheckTest <nl> Assert . assertNotNull ( check . getAcceptableTokens ( ) ) ; <nl> Assert . assertNotNull ( check . getDefaultTokens ( ) ) ; <nl> Assert . assertNotNull ( check . getRequiredTokens ( ) ) ; <nl> + Assert . assertTrue ( " Comments are also TokenType token " , check . isCommentNodesRequired ( ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testCommentToken ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( IllegalTokenTextCheck . class ) ; <nl> + checkConfig . addAttribute ( " tokens " , " COMMENT _ CONTENT " ) ; <nl> + checkConfig . addAttribute ( " format " , " a href " ) ; <nl> + <nl> + checkConfig . addAttribute ( " message " , null ) ; <nl> + final String [ ] expected = { <nl> + " 35 : 28 : " + getCheckMessage ( MSG _ KEY , " a href " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTokens . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTokens . java <nl> index 6a70448 . . 55cf3a8 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTokens . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTokens . java <nl> @ @ - 28 , 11 + 28 , 11 @ @ public class InputIllegalTokens <nl> public void methodWithLabels ( ) { <nl> label : <nl> { <nl> - anotherLabel : <nl> + anotherLabel : / / some comment href <nl> do { <nl> continue anotherLabel ; <nl> } while ( false ) ; <nl> - break label ; <nl> + break label ; / / some a href <nl> } <nl> } <nl> } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 1cb58de . . f0e46e2 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1232 , 7 + 1232 , 6 @ @ <nl> < regex > < pattern > . * . checks . whitespace . WhitespaceAfterCheck < / pattern > < branchRate > 86 < / branchRate > < lineRate > 90 < / lineRate > < / regex > <nl> <nl> <nl> - < regex > < pattern > . * . filters . IntMatchFilter < / pattern > < branchRate > 100 < / branchRate > < lineRate > 90 < / lineRate > < / regex > <nl> < regex > < pattern > . * . filters . SuppressElement < / pattern > < branchRate > 82 < / branchRate > < lineRate > 88 < / lineRate > < / regex > <nl> < regex > < pattern > . * . filters . SuppressionCommentFilter < / pattern > < branchRate > 83 < / branchRate > < lineRate > 93 < / lineRate > < / regex > <nl> < regex > < pattern > . * . filters . SuppressionCommentFilter \ $ Tag < / pattern > < branchRate > 96 < / branchRate > < lineRate > 94 < / lineRate > < / regex > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / IntMatchFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / IntMatchFilterTest . java <nl> index cb61c49 . . dd3a206 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / IntMatchFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / IntMatchFilterTest . java <nl> @ @ - 44 , 4 + 44 , 10 @ @ public class IntMatchFilterTest { <nl> assertFalse ( " 0 ! = this " , filter . equals ( this ) ) ; <nl> assertFalse ( " 0 ! = null " , filter . equals ( null ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testToString ( ) { <nl> + final IntFilter filter = new IntMatchFilter ( 6 ) ; <nl> + assertEquals ( " IntMatchFilter [ 6 ] " , filter . toString ( ) ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java 
 index e8b8873 . . 18ef30f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java 
 @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 - import java . util . regex . Pattern ; 
 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 @ @ - 39 , 13 + 38 , 6 @ @ public final class DetailNodeTreeStringPrinter { 
 / * * OS specific line separator . * / 
 private static final String LINE _ SEPARATOR = System . getProperty ( " line . separator " ) ; 
 
 - / * * Newline pattern . * / 
 - private static final Pattern NEWLINE = Pattern . compile ( " \ n " ) ; 
 - / * * Return pattern . * / 
 - private static final Pattern RETURN = Pattern . compile ( " \ r " ) ; 
 - / * * Tab pattern . * / 
 - private static final Pattern TAB = Pattern . compile ( " \ t " ) ; 
 - 
 / * * Prevent instances . * / 
 private DetailNodeTreeStringPrinter ( ) { 
 / / no code 
 @ @ - 91 , 7 + 83 , 7 @ @ public final class DetailNodeTreeStringPrinter { 
 } 
 messageBuilder . append ( getIndentation ( node ) ) 
 . append ( JavadocUtils . getTokenName ( node . getType ( ) ) ) . append ( " - > " ) 
 - . append ( excapeAllControlChars ( node . getText ( ) ) ) . append ( " [ " ) 
 + . append ( JavadocUtils . excapeAllControlChars ( node . getText ( ) ) ) . append ( " [ " ) 
 . append ( node . getLineNumber ( ) ) . append ( ' : ' ) . append ( node . getColumnNumber ( ) ) 
 . append ( ' ] ' ) . append ( LINE _ SEPARATOR ) 
 . append ( printTree ( JavadocUtils . getFirstChild ( node ) , rootPrefix , prefix ) ) ; 
 @ @ - 101 , 17 + 93 , 6 @ @ public final class DetailNodeTreeStringPrinter { 
 } 
 
 / * * 
 - * Replace all control chars with excaped symbols . 
 - * @ param text the String to process . 
 - * @ return the processed String with all control chars excaped . 
 - * / 
 - private static String excapeAllControlChars ( String text ) { 
 - final String textWithoutNewlines = NEWLINE . matcher ( text ) . replaceAll ( " \ \ \ \ n " ) ; 
 - final String textWithoutReturns = RETURN . matcher ( textWithoutNewlines ) . replaceAll ( " \ \ \ \ r " ) ; 
 - return TAB . matcher ( textWithoutReturns ) . replaceAll ( " \ \ \ \ t " ) ; 
 - } 
 - 
 - / * * 
 * Get indentation for a node . 
 * @ param node the DetailNode to get the indentation for . 
 * @ return the indentation in String format . 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheck . java 
 index 6810da7 . . 5180d9d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheck . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 + import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 
 / * * 
 @ @ - 79 , 6 + 80 , 11 @ @ public class IllegalTokenCheck 
 } 
 
 @ Override 
 + public boolean isCommentNodesRequired ( ) { 
 + return true ; 
 + } 
 + 
 + @ Override 
 public void visitToken ( DetailAST ast ) { 
 log ( 
 ast . getLineNo ( ) , 
 @ @ - 95 , 11 + 101 , 17 @ @ public class IllegalTokenCheck 
 * / 
 private static String convertToString ( DetailAST ast ) { 
 final String tokenText ; 
 - if ( ast . getType ( ) = = TokenTypes . LABELED _ STAT ) { 
 - tokenText = ast . getFirstChild ( ) . getText ( ) + ast . getText ( ) ; 
 - } 
 - else { 
 - tokenText = ast . getText ( ) ; 
 + switch ( ast . getType ( ) ) { 
 + case TokenTypes . LABELED _ STAT : 
 + tokenText = ast . getFirstChild ( ) . getText ( ) + ast . getText ( ) ; 
 + break ; 
 + / / multyline tokens need to become singlelined 
 + case TokenTypes . COMMENT _ CONTENT : 
 + tokenText = JavadocUtils . excapeAllControlChars ( ast . getText ( ) ) ; 
 + break ; 
 + default : 
 + tokenText = ast . getText ( ) ; 
 + break ; 
 } 
 return tokenText ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java 
 index bf5dac5 . . 1c544e2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java 
 @ @ - 91 , 6 + 91 , 11 @ @ public class IllegalTokenTextCheck 
 } 
 
 @ Override 
 + public boolean isCommentNodesRequired ( ) { 
 + return true ; 
 + } 
 + 
 + @ Override 
 public void visitToken ( DetailAST ast ) { 
 final String text = ast . getText ( ) ; 
 if ( regexp . matcher ( text ) . find ( ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 index e035c79 . . d079628 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 @ @ - 79 , 6 + 79 , 15 @ @ public final class JavadocUtils { 
 private static final Pattern INLINE _ TAG _ PATTERN = Pattern . compile ( 
 " . * ? \ \ { @ ( \ \ p { Alpha } + ) \ \ s + ( . * ? ) \ \ } " ) ; 
 
 + / * * Newline pattern . * / 
 + private static final Pattern NEWLINE = Pattern . compile ( " \ n " ) ; 
 + 
 + / * * Return pattern . * / 
 + private static final Pattern RETURN = Pattern . compile ( " \ r " ) ; 
 + 
 + / * * Tab pattern . * / 
 + private static final Pattern TAB = Pattern . compile ( " \ t " ) ; 
 + 
 / / Using reflection gets all token names and values from JavadocTokenTypes class 
 / / and saves to TOKEN _ NAME _ TO _ VALUE and TOKEN _ VALUE _ TO _ NAME collections . 
 static { 
 @ @ - 448 , 4 + 457 , 14 @ @ public final class JavadocUtils { 
 return javadocTagName ; 
 } 
 
 + / * * 
 + * Replace all control chars with excaped symbols . 
 + * @ param text the String to process . 
 + * @ return the processed String with all control chars excaped . 
 + * / 
 + public static String excapeAllControlChars ( String text ) { 
 + final String textWithoutNewlines = NEWLINE . matcher ( text ) . replaceAll ( " \ \ \ \ n " ) ; 
 + final String textWithoutReturns = RETURN . matcher ( textWithoutNewlines ) . replaceAll ( " \ \ \ \ r " ) ; 
 + return TAB . matcher ( textWithoutReturns ) . replaceAll ( " \ \ \ \ t " ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheckTest . java 
 index 7568c18 . . 55ac7b6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenCheckTest . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; 
 
 public class IllegalTokenCheckTest 
 extends BaseCheckTestSupport { 
 @ @ - 73 , 4 + 74 , 67 @ @ public class IllegalTokenCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testCommentContentToken ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( IllegalTokenCheck . class ) ; 
 + checkConfig . addAttribute ( " tokens " , " COMMENT _ CONTENT " ) ; 
 + 
 + final String [ ] expected = { 
 + " 3 : 3 : " + getCheckMessage ( MSG _ KEY , 
 + JavadocUtils . excapeAllControlChars ( 
 + " * " + System . lineSeparator ( ) 
 + + " * Test for illegal tokens " 
 + + System . lineSeparator ( ) + " " ) ) , 
 + " 31 : 29 : " + getCheckMessage ( MSG _ KEY , 
 + JavadocUtils . excapeAllControlChars ( 
 + " some comment href " + System . lineSeparator ( ) ) ) , 
 + " 35 : 28 : " + getCheckMessage ( MSG _ KEY , 
 + JavadocUtils . excapeAllControlChars ( 
 + " some a href " + System . lineSeparator ( ) ) ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testBlockCommentBeginToken ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( IllegalTokenCheck . class ) ; 
 + checkConfig . addAttribute ( " tokens " , " BLOCK _ COMMENT _ BEGIN " ) ; 
 + 
 + final String [ ] expected = { 
 + " 3 : 1 : " + getCheckMessage ( MSG _ KEY , " / * " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testBlockCommentEndToken ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( IllegalTokenCheck . class ) ; 
 + checkConfig . addAttribute ( " tokens " , " BLOCK _ COMMENT _ END " ) ; 
 + 
 + final String [ ] expected = { 
 + " 5 : 2 : " + getCheckMessage ( MSG _ KEY , " * / " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testSingleLineCommentToken ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( IllegalTokenCheck . class ) ; 
 + checkConfig . addAttribute ( " tokens " , " SINGLE _ LINE _ COMMENT " ) ; 
 + 
 + final String [ ] expected = { 
 + " 31 : 27 : " + getCheckMessage ( MSG _ KEY , " / / " ) , 
 + " 35 : 26 : " + getCheckMessage ( MSG _ KEY , " / / " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java 
 index fa71b27 . . 0a899d7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java 
 @ @ - 104 , 5 + 104 , 22 @ @ public class IllegalTokenTextCheckTest 
 Assert . assertNotNull ( check . getAcceptableTokens ( ) ) ; 
 Assert . assertNotNull ( check . getDefaultTokens ( ) ) ; 
 Assert . assertNotNull ( check . getRequiredTokens ( ) ) ; 
 + Assert . assertTrue ( " Comments are also TokenType token " , check . isCommentNodesRequired ( ) ) ; 
 } 
 + 
 + @ Test 
 + public void testCommentToken ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( IllegalTokenTextCheck . class ) ; 
 + checkConfig . addAttribute ( " tokens " , " COMMENT _ CONTENT " ) ; 
 + checkConfig . addAttribute ( " format " , " a href " ) ; 
 + 
 + checkConfig . addAttribute ( " message " , null ) ; 
 + final String [ ] expected = { 
 + " 35 : 28 : " + getCheckMessage ( MSG _ KEY , " a href " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTokens . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTokens . java 
 index 6a70448 . . 55cf3a8 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTokens . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalTokens . java 
 @ @ - 28 , 11 + 28 , 11 @ @ public class InputIllegalTokens 
 public void methodWithLabels ( ) { 
 label : 
 { 
 - anotherLabel : 
 + anotherLabel : / / some comment href 
 do { 
 continue anotherLabel ; 
 } while ( false ) ; 
 - break label ; 
 + break label ; / / some a href 
 } 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 1cb58de . . f0e46e2 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1232 , 7 + 1232 , 6 @ @ 
 < regex > < pattern > . * . checks . whitespace . WhitespaceAfterCheck < / pattern > < branchRate > 86 < / branchRate > < lineRate > 90 < / lineRate > < / regex > 
 
 
 - < regex > < pattern > . * . filters . IntMatchFilter < / pattern > < branchRate > 100 < / branchRate > < lineRate > 90 < / lineRate > < / regex > 
 < regex > < pattern > . * . filters . SuppressElement < / pattern > < branchRate > 82 < / branchRate > < lineRate > 88 < / lineRate > < / regex > 
 < regex > < pattern > . * . filters . SuppressionCommentFilter < / pattern > < branchRate > 83 < / branchRate > < lineRate > 93 < / lineRate > < / regex > 
 < regex > < pattern > . * . filters . SuppressionCommentFilter \ $ Tag < / pattern > < branchRate > 96 < / branchRate > < lineRate > 94 < / lineRate > < / regex > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / IntMatchFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / IntMatchFilterTest . java 
 index cb61c49 . . dd3a206 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / IntMatchFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / IntMatchFilterTest . java 
 @ @ - 44 , 4 + 44 , 10 @ @ public class IntMatchFilterTest { 
 assertFalse ( " 0 ! = this " , filter . equals ( this ) ) ; 
 assertFalse ( " 0 ! = null " , filter . equals ( null ) ) ; 
 } 
 + 
 + @ Test 
 + public void testToString ( ) { 
 + final IntFilter filter = new IntMatchFilter ( 6 ) ; 
 + assertEquals ( " IntMatchFilter [ 6 ] " , filter . toString ( ) ) ; 
 + } 
 }
