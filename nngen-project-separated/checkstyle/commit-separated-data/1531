BLEU SCORE: 0.08400788786839637

TEST MSG: Issue # 2080 : Fix typos in code
GENERATED MSG: Issue # 2161 : unify test input locations for naming package

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> index 863845a . . 824b281 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> @ @ - 193 , 7 + 193 , 7 @ @ final class PropertyCacheFile { <nl> flushAndCloseOutStream ( oos ) ; <nl> } <nl> <nl> - / / Instead of hexEncoding baos . toByteArray ( ) directly we <nl> + / / Instead of hexEncoding outputStream . toByteArray ( ) directly we <nl> / / use a message digest here to keep the length of the <nl> / / hashcode reasonable <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> index ca205f5 . . 83aeff2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> @ @ - 384 , 12 + 384 , 12 @ @ public class JavadocStyleCheck <nl> / / Skip multiples , like < b > . . . < b > <nl> String lastFound = " " ; <nl> final List < String > typeParameters = CheckUtils . getTypeParameterNames ( ast ) ; <nl> - for ( final HtmlTag htag : htmlStack ) { <nl> - if ( ! isSingleTag ( htag ) <nl> - & & ! htag . getId ( ) . equals ( lastFound ) <nl> - & & ! typeParameters . contains ( htag . getId ( ) ) ) { <nl> - log ( htag . getLineNo ( ) , htag . getPosition ( ) , UNCLOSED _ HTML , htag ) ; <nl> - lastFound = htag . getId ( ) ; <nl> + for ( final HtmlTag htmlTag : htmlStack ) { <nl> + if ( ! isSingleTag ( htmlTag ) <nl> + & & ! htmlTag . getId ( ) . equals ( lastFound ) <nl> + & & ! typeParameters . contains ( htmlTag . getId ( ) ) ) { <nl> + log ( htmlTag . getLineNo ( ) , htmlTag . getPosition ( ) , UNCLOSED _ HTML , htmlTag ) ; <nl> + lastFound = htmlTag . getId ( ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeModel . java <nl> index 0329e82 . . 53406db 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeModel . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeModel . java <nl> @ @ - 133 , 11 + 133 , 11 @ @ public class ParseTreeModel extends AbstractTreeTableModel { <nl> @ Override <nl> public Object getChild ( Object parent , int index ) { <nl> final DetailAST ast = ( DetailAST ) parent ; <nl> - int indx = 0 ; <nl> + int currentIndex = 0 ; <nl> AST child = ast . getFirstChild ( ) ; <nl> - while ( indx < index ) { <nl> + while ( currentIndex < index ) { <nl> child = child . getNextSibling ( ) ; <nl> - indx + + ; <nl> + currentIndex + + ; <nl> } <nl> return child ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> index 98ccad8 . . dae6cd4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> @ @ - 266 , 7 + 266 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> <nl> / * * <nl> * Checks whether a class may be considered as the checkstyle filter . <nl> - * Checkstyle ' s filters are classes which are subclasses of AutomicBean , <nl> + * Checkstyle ' s filters are classes which are subclasses of AutomaticBean , <nl> * implement ' Filter ' interface , and which names end with ' Filter ' . <nl> * @ param loadedClass class to check . <nl> * @ param className class name to check . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index cdf0f8e . . 63ca583 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 159 , 10 + 159 , 10 @ @ public class CheckerTest { <nl> checker . removeFilter ( filter ) ; <nl> <nl> f2 . resetFilter ( ) ; <nl> - final SortedSet < LocalizedMessage > msgs = Sets . newTreeSet ( ) ; <nl> - msgs . add ( new LocalizedMessage ( 0 , 0 , " a Bundle " , " message . key " , <nl> + final SortedSet < LocalizedMessage > messages = Sets . newTreeSet ( ) ; <nl> + messages . add ( new LocalizedMessage ( 0 , 0 , " a Bundle " , " message . key " , <nl> new Object [ ] { " arg " } , null , getClass ( ) , null ) ) ; <nl> - checker . fireErrors ( " Some File Name " , msgs ) ; <nl> + checker . fireErrors ( " Some File Name " , messages ) ; <nl> assertTrue ( " Checker . fireErrors ( ) doesn ' t call filter " , f2 . wasCalled ( ) ) ; <nl> assertFalse ( " Checker . fireErrors ( ) does call removed filter " , filter . wasCalled ( ) ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java <nl> index c6dcd5f . . 963e18c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java <nl> @ @ - 114 , 11 + 114 , 11 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { <nl> public void testIsSuppressed ( ) throws Exception { <nl> Class < ? > entry = Class <nl> . forName ( " com . puppycrawl . tools . checkstyle . checks . SuppressWarningsHolder $ Entry " ) ; <nl> - Constructor < ? > entryConstr = entry . getDeclaredConstructor ( String . class , int . class , <nl> + Constructor < ? > entryConstructor = entry . getDeclaredConstructor ( String . class , int . class , <nl> int . class , int . class , int . class ) ; <nl> - entryConstr . setAccessible ( true ) ; <nl> + entryConstructor . setAccessible ( true ) ; <nl> <nl> - Object entryInstance = entryConstr . newInstance ( " MockEntry " , 100 , 100 , 350 , 350 ) ; <nl> + Object entryInstance = entryConstructor . newInstance ( " MockEntry " , 100 , 100 , 350 , 350 ) ; <nl> <nl> List < Object > entriesList = new ArrayList < > ( ) ; <nl> entriesList . add ( entryInstance ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index 6afa809 . . da5b2f0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 114 , 7 + 114 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testWithAnnonymousClass ( ) throws Exception { <nl> + public void testWithAnonymousClass ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( RequireThisCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java <nl> index a6969dd . . 8f587f5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java <nl> @ @ - 106 , 7 + 106 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " HideUtilityClassContructor3041574 _ 1 . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " HideUtilityClassConstructor3041574 _ 1 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 114 , 7 + 114 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " HideUtilityClassContructor3041574 _ 2 . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " HideUtilityClassConstructor3041574 _ 2 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " HideUtilityClassContructor3041574 _ 3 . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " HideUtilityClassConstructor3041574 _ 3 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index f2130d1 . . f650793 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 64 , 10 + 64 , 10 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> private static final Pattern MULTILEVEL _ COMMENT _ REGEX = <nl> Pattern . compile ( " / / indent : \ \ d + exp : ( \ \ d + ( , \ \ d + ) + ? ) ( warn ) ? " ) ; <nl> <nl> - private static final Pattern SINGLELEVEL _ COMMENT _ REGEX = <nl> + private static final Pattern SINGLE _ LEVEL _ COMMENT _ REGEX = <nl> Pattern . compile ( " / / indent : \ \ d + exp : ( \ \ d + ) ( warn ) ? " ) ; <nl> <nl> - private static final Pattern NONSTRICT _ LEVEL _ COMMENT _ REGEX = <nl> + private static final Pattern NON _ STRICT _ LEVEL _ COMMENT _ REGEX = <nl> Pattern . compile ( " / / indent : \ \ d + exp : > = ( \ \ d + ) ( warn ) ? " ) ; <nl> <nl> private static final String [ ] EMPTY _ EXPECTED = { } ; <nl> @ @ - 145 , 13 + 145 , 13 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> | | ! containsActualLevel & & isWarnComment ; <nl> } <nl> <nl> - Matcher singleLevelMatch = SINGLELEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> + Matcher singleLevelMatch = SINGLE _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> if ( singleLevelMatch . matches ( ) ) { <nl> final int expectedLevel = Integer . parseInt ( singleLevelMatch . group ( 1 ) ) ; <nl> return isSingleLevelCommentConsistent ( indentInComment , isWarnComment , expectedLevel ) ; <nl> } <nl> <nl> - Matcher nonStrictLevelMatch = NONSTRICT _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> + Matcher nonStrictLevelMatch = NON _ STRICT _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> if ( nonStrictLevelMatch . matches ( ) ) { <nl> final int expectedMinimalIndent = Integer . parseInt ( nonStrictLevelMatch . group ( 1 ) ) ; <nl> <nl> @ @ - 534 , 11 + 534 , 11 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidIfIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidIfIndent . java " ) ; <nl> final String [ ] expected = { <nl> " 231 : " + getCheckMessage ( MSG _ ERROR , " ( " , 8 , 12 ) , <nl> } ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 554 , 9 + 554 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidDotIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidDotIndent . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 572 , 12 + 572 , 12 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidMethodIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidMethodIndent . java " ) ; <nl> final String [ ] expected = { <nl> " 129 : " + getCheckMessage ( MSG _ ERROR , " void " , 4 , 8 ) , <nl> " 130 : " + getCheckMessage ( MSG _ ERROR , " method5 " , 4 , 8 ) , <nl> } ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 593 , 7 + 593 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputInvalidMethodIndent . java " ) ; <nl> + final String fileName = getPath ( " InputInvalidMethodIndent . java " ) ; <nl> final String [ ] expected = { <nl> " 23 : " + getCheckMessage ( MSG _ ERROR , " ctor def rcurly " , 6 , 4 ) , <nl> " 26 : " + getCheckMessage ( MSG _ ERROR , " ctor def modifier " , 6 , 4 ) , <nl> @ @ - 635 , 7 + 635 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> " 180 : " + getCheckMessage ( MSG _ ERROR , " method9 " , 4 , 8 ) , <nl> " 190 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method def " , 12 , 8 ) , <nl> } ; <nl> - verifyWarns ( checkConfig , fname , expected , 6 ) ; <nl> + verifyWarns ( checkConfig , fileName , expected , 6 ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 652 , 7 + 652 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputInvalidSwitchIndent . java " ) ; <nl> + final String fileName = getPath ( " InputInvalidSwitchIndent . java " ) ; <nl> final String [ ] expected = { <nl> " 30 : " + getCheckMessage ( MSG _ ERROR , " switch " , 6 , 8 ) , <nl> " 32 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " case " , 10 , 12 ) , <nl> @ @ - 681 , 7 + 681 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> " 95 : " + getCheckMessage ( MSG _ ERROR , " switch lcurly " , 10 , 8 ) , <nl> " 96 : " + getCheckMessage ( MSG _ ERROR , " switch rcurly " , 6 , 8 ) , <nl> } ; <nl> - verifyWarns ( checkConfig , fname , expected , 3 ) ; <nl> + verifyWarns ( checkConfig , fileName , expected , 3 ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 697 , 9 + 697 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidSwitchIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidSwitchIndent . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 715 , 9 + 715 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidArrayInitDefaultIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidArrayInitDefaultIndent . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 733 , 9 + 733 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidArrayInitIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidArrayInitIndent . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 751 , 7 + 751 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputInvalidArrayInitIndent . java " ) ; <nl> + final String fileName = getPath ( " InputInvalidArrayInitIndent . java " ) ; <nl> final String [ ] expected = { <nl> " 21 : " + getCheckMessage ( MSG _ ERROR , " member def type " , 2 , 4 ) , <nl> " 22 : " + getCheckMessage ( MSG _ ERROR , " member def type " , 6 , 4 ) , <nl> @ @ - 787 , 7 + 787 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> / / Test input for this test case is not checked due to issue # 693 . <nl> - verify ( checkConfig , fname , expected ) ; <nl> + verify ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 803 , 9 + 803 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidTryIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidTryIndent . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 821 , 7 + 821 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputInvalidTryIndent . java " ) ; <nl> + final String fileName = getPath ( " InputInvalidTryIndent . java " ) ; <nl> final String [ ] expected = { <nl> " 25 : " + getCheckMessage ( MSG _ ERROR , " try " , 9 , 8 ) , <nl> " 26 : " + getCheckMessage ( MSG _ ERROR , " try rcurly " , 7 , 8 ) , <nl> @ @ - 850 , 7 + 850 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> " 80 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " catch " , 10 , 12 ) , <nl> " 80 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 10 , 12 ) , <nl> } ; <nl> - verifyWarns ( checkConfig , fname , expected , 6 ) ; <nl> + verifyWarns ( checkConfig , fileName , expected , 6 ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 866 , 7 + 866 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputInvalidClassDefIndent . java " ) ; <nl> + final String fileName = getPath ( " InputInvalidClassDefIndent . java " ) ; <nl> final String [ ] expected = { <nl> " 22 : " + getCheckMessage ( MSG _ ERROR , " class def modifier " , 2 , 0 ) , <nl> " 28 : " + getCheckMessage ( MSG _ ERROR , " class def lcurly " , 2 , 0 ) , <nl> @ @ - 905 , 7 + 905 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> " 152 : " + getCheckMessage ( MSG _ ERROR , " method def rcurly " , 10 , 12 ) , <nl> " 188 : " + getCheckMessage ( MSG _ ERROR , " class " , 0 , 4 ) , <nl> } ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 921 , 7 + 921 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputInvalidBlockIndent . java " ) ; <nl> + final String fileName = getPath ( " InputInvalidBlockIndent . java " ) ; <nl> final String [ ] expected = { <nl> " 26 : " + getCheckMessage ( MSG _ ERROR , " block lcurly " , 7 , 8 ) , <nl> " 27 : " + getCheckMessage ( MSG _ ERROR , " block lcurly " , 9 , 8 ) , <nl> @ @ - 980 , 7 + 980 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> " 150 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " block " , 6 , 8 ) , <nl> " 150 : " + getCheckMessage ( MSG _ ERROR , " member def type " , 6 , 8 ) , <nl> } ; <nl> - verifyWarns ( checkConfig , fname , expected , 10 ) ; <nl> + verifyWarns ( checkConfig , fileName , expected , 10 ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 996 , 7 + 996 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputInvalidIfIndent . java " ) ; <nl> + final String fileName = getPath ( " InputInvalidIfIndent . java " ) ; <nl> final String [ ] expected = { <nl> " 55 : " + getCheckMessage ( MSG _ ERROR , " if " , 1 , 8 ) , <nl> " 60 : " + getCheckMessage ( MSG _ ERROR , " if " , 9 , 8 ) , <nl> @ @ - 1083 , 7 + 1083 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> " 251 : " + getCheckMessage ( MSG _ ERROR , " if lparen " , 6 , 8 ) , <nl> " 253 : " + getCheckMessage ( MSG _ ERROR , " if rparen " , 6 , 8 ) , <nl> } ; <nl> - verifyWarns ( checkConfig , fname , expected , 11 ) ; <nl> + verifyWarns ( checkConfig , fileName , expected , 11 ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1099 , 7 + 1099 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputInvalidWhileIndent . java " ) ; <nl> + final String fileName = getPath ( " InputInvalidWhileIndent . java " ) ; <nl> final String [ ] expected = { <nl> " 25 : " + getCheckMessage ( MSG _ ERROR , " while " , 9 , 8 ) , <nl> " 26 : " + getCheckMessage ( MSG _ ERROR , " while rcurly " , 7 , 8 ) , <nl> @ @ - 1134 , 7 + 1134 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> " 92 : " + getCheckMessage ( MSG _ ERROR , " while rparen " , 10 , 8 ) , <nl> " 99 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " while " , 8 , 12 ) , <nl> } ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1149 , 11 + 1149 , 11 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputInvalidAnonymousClassIndent . java " ) ; <nl> + final String fileName = getPath ( " InputInvalidAnonymousClassIndent . java " ) ; <nl> final String [ ] expected = { <nl> " 28 : " + getCheckMessage ( MSG _ ERROR _ MULTI , " method def rcurly " , 17 , " 12 , 16 " ) , <nl> } ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1169 , 7 + 1169 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputInvalidForIndent . java " ) ; <nl> + final String fileName = getPath ( " InputInvalidForIndent . java " ) ; <nl> final String [ ] expected = { <nl> " 26 : " + getCheckMessage ( MSG _ ERROR , " for " , 6 , 8 ) , <nl> " 27 : " + getCheckMessage ( MSG _ ERROR , " for rcurly " , 10 , 8 ) , <nl> @ @ - 1200 , 7 + 1200 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> " 77 : " + getCheckMessage ( MSG _ ERROR , " for rcurly " , 39 , 8 ) , <nl> " 81 : " + getCheckMessage ( MSG _ ERROR , " for rparen " , 12 , 8 ) , <nl> } ; <nl> - verifyWarns ( checkConfig , fname , expected , 6 ) ; <nl> + verifyWarns ( checkConfig , fileName , expected , 6 ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1216 , 9 + 1216 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidForIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidForIndent . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1234 , 9 + 1234 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidDoWhileIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidDoWhileIndent . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1252 , 9 + 1252 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidBlockIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidBlockIndent . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1270 , 9 + 1270 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidWhileIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidWhileIndent . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1288 , 12 + 1288 , 12 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidClassDefIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidClassDefIndent . java " ) ; <nl> final String [ ] expected = { <nl> " 49 : " + getCheckMessage ( MSG _ ERROR , " class " , 0 , 4 ) , <nl> " 71 : " + getCheckMessage ( MSG _ ERROR , " int " , 8 , 12 ) , <nl> } ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1309 , 9 + 1309 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidInterfaceDefIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidInterfaceDefIndent . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 1328 , 9 + 1328 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; <nl> checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; <nl> - final String fname = getPath ( " InputValidCommaIndent . java " ) ; <nl> + final String fileName = getPath ( " InputValidCommaIndent . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verifyWarns ( checkConfig , fname , expected ) ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 1 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 1 . java <nl> new file mode 100644 <nl> index 0000000 . . 4d28f84 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 1 . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import java . io . Serializable ; <nl> + / * input file * / <nl> + public abstract class HideUtilityClassConstructor3041574 _ 1 implements Serializable { <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 2 . java <nl> new file mode 100644 <nl> index 0000000 . . b719936 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 2 . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import java . io . Serializable ; <nl> + / * input file * / <nl> + public class HideUtilityClassConstructor3041574 _ 2 implements Serializable { <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 3 . java <nl> new file mode 100644 <nl> index 0000000 . . 25f3e5f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 3 . java <nl> @ @ - 0 , 0 + 1 , 48 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import java . io . Serializable ; <nl> + <nl> + public class HideUtilityClassConstructor3041574 _ 3 implements Serializable { <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> + public HideUtilityClassConstructor3041574 _ 3 ( int i ) { <nl> + / / no code <nl> + } <nl> + <nl> + public String getValue ( ) { <nl> + return " " ; <nl> + } <nl> + <nl> + / / It is NOT Utility Inner class <nl> + @ SuppressWarnings ( " unused " ) <nl> + public static class Event { <nl> + / / Top level class have access to fields - no need in public getters <nl> + private String ind ; <nl> + private String ind1 ; <nl> + <nl> + public Event ( String value ) { <nl> + / / do a lot of calculations <nl> + } <nl> + <nl> + / / static because this method is utility <nl> + public static String getEmptyString ( ) { <nl> + return " " ; <nl> + } <nl> + } <nl> + <nl> + / / It is Utility Inner class <nl> + @ SuppressWarnings ( " unused " ) <nl> + public static class Event1 { <nl> + private String ind ; <nl> + private String ind1 ; <nl> + <nl> + private Event1 ( ) { <nl> + / / do a lot of calculations <nl> + } <nl> + <nl> + / / static because this method is utility <nl> + public static String getEmptyString ( ) { <nl> + return " " ; <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 1 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 1 . java <nl> deleted file mode 100644 <nl> index 8c5e3fe . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 1 . java <nl> + + + / dev / null <nl> @ @ - 1 , 8 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . design ; <nl> - <nl> - import java . io . Serializable ; <nl> - / * input file * / <nl> - public abstract class HideUtilityClassContructor3041574 _ 1 implements Serializable { <nl> - private static final long serialVersionUID = 1L ; <nl> - <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 2 . java <nl> deleted file mode 100644 <nl> index 946f931 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 8 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . design ; <nl> - <nl> - import java . io . Serializable ; <nl> - / * input file * / <nl> - public class HideUtilityClassContructor3041574 _ 2 implements Serializable { <nl> - private static final long serialVersionUID = 1L ; <nl> - <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 3 . java <nl> deleted file mode 100644 <nl> index 55d53a1 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 3 . java <nl> + + + / dev / null <nl> @ @ - 1 , 48 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . design ; <nl> - <nl> - import java . io . Serializable ; <nl> - <nl> - public class HideUtilityClassContructor3041574 _ 3 implements Serializable { <nl> - private static final long serialVersionUID = 1L ; <nl> - <nl> - public HideUtilityClassContructor3041574 _ 3 ( int i ) { <nl> - / / no code <nl> - } <nl> - <nl> - public String getValue ( ) { <nl> - return " " ; <nl> - } <nl> - <nl> - / / It is NOT Utility Inner class <nl> - @ SuppressWarnings ( " unused " ) <nl> - public static class Event { <nl> - / / Top level class have access to fields - no need in public getters <nl> - private String ind ; <nl> - private String ind1 ; <nl> - <nl> - public Event ( String value ) { <nl> - / / do a lot of calculations <nl> - } <nl> - <nl> - / / static because this method is utility <nl> - public static String getEmptyString ( ) { <nl> - return " " ; <nl> - } <nl> - } <nl> - <nl> - / / It is Utility Inner class <nl> - @ SuppressWarnings ( " unused " ) <nl> - public static class Event1 { <nl> - private String ind ; <nl> - private String ind1 ; <nl> - <nl> - private Event1 ( ) { <nl> - / / do a lot of calculations <nl> - } <nl> - <nl> - / / static because this method is utility <nl> - public static String getEmptyString ( ) { <nl> - return " " ; <nl> - } <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / xdocs / idea . xml b / src / xdocs / idea . xml <nl> index 6da1f6d . . 1bfac2c 100644 <nl> - - - a / src / xdocs / idea . xml <nl> + + + b / src / xdocs / idea . xml <nl> @ @ - 53 , 7 + 53 , 7 @ @ <nl> <nl> < section name = " Organize Imports " > <nl> < p > <nl> - One of the Checkstyle checks we run on our own code require sertain order of import <nl> + One of the Checkstyle checks we run on our own code require certain order of import <nl> statements . Few changes in IDE settings are required to help your IDE do it automatically . < br / > <nl> To change formatter settings please go to File - > Settings in menu . < br / > <nl> Then in the tree go to : Editor - > Code Style - > Java , open Import tab ( follow numbers on a <nl> diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index 54349f4 . . 491ff8b 100644 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 864 , 7 + 864 , 7 @ @ <nl> Ineffective suppressions are removed from checkstyle ' s configs . Author : Bhavik Patel <nl> < / li > <nl> < li > <nl> - Checking existance of config file before processing target file . . Author : Bhavik Patel <nl> + Checking existence of config file before processing target file . . Author : Bhavik Patel <nl> < / li > <nl> < li > <nl> Changed Integration Tests to use / src / it / . Author : Aleksandr Ivanov < a href = " https : / / github . com / checkstyle / checkstyle / issues / 1200 " > # 1200 < / a >
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> index 89a41fc . . 2a550da 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> @ @ - 539 , 7 + 539 , 7 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> createChecker ( checkConfig ) ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator <nl> + verify ( checkConfig , getPath ( " checks " + File . separator + " imports " + File . separator <nl> + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> new file mode 100644 <nl> index 0000000 . . 10b8399 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; <nl> + <nl> + / / every import from javadoc package has comment in brackets indicating presence of keywords <nl> + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) <nl> + <nl> + / / STANDARD - keyword Check <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) <nl> + <nl> + / / SPECIAL _ IMPORTS - keyword Tag <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) <nl> + <nl> + import com . puppycrawl . tools . * ; <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) <nl> + <nl> + public class InputCustomImportOrder _ OverlappingPatterns { <nl> + } <nl> + / * <nl> + test : testRulesOrder _ ThirdBeforeSame ( ) <nl> + configuration : <nl> + checkConfig . addAttribute ( " customImportOrderRules " , <nl> + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; <nl> + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> + * / <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> deleted file mode 100644 <nl> index 10b8399 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> + + + / dev / null <nl> @ @ - 1 , 37 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; <nl> - <nl> - / / every import from javadoc package has comment in brackets indicating presence of keywords <nl> - / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) <nl> - <nl> - / / STANDARD - keyword Check <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) <nl> - <nl> - / / SPECIAL _ IMPORTS - keyword Tag <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) <nl> - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) <nl> - <nl> - import com . puppycrawl . tools . * ; <nl> - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) <nl> - <nl> - public class InputCustomImportOrder _ OverlappingPatterns { <nl> - } <nl> - / * <nl> - test : testRulesOrder _ ThirdBeforeSame ( ) <nl> - configuration : <nl> - checkConfig . addAttribute ( " customImportOrderRules " , <nl> - " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; <nl> - checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> - * /

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 index 863845a . . 824b281 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 @ @ - 193 , 7 + 193 , 7 @ @ final class PropertyCacheFile { 
 flushAndCloseOutStream ( oos ) ; 
 } 
 
 - / / Instead of hexEncoding baos . toByteArray ( ) directly we 
 + / / Instead of hexEncoding outputStream . toByteArray ( ) directly we 
 / / use a message digest here to keep the length of the 
 / / hashcode reasonable 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 index ca205f5 . . 83aeff2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 @ @ - 384 , 12 + 384 , 12 @ @ public class JavadocStyleCheck 
 / / Skip multiples , like < b > . . . < b > 
 String lastFound = " " ; 
 final List < String > typeParameters = CheckUtils . getTypeParameterNames ( ast ) ; 
 - for ( final HtmlTag htag : htmlStack ) { 
 - if ( ! isSingleTag ( htag ) 
 - & & ! htag . getId ( ) . equals ( lastFound ) 
 - & & ! typeParameters . contains ( htag . getId ( ) ) ) { 
 - log ( htag . getLineNo ( ) , htag . getPosition ( ) , UNCLOSED _ HTML , htag ) ; 
 - lastFound = htag . getId ( ) ; 
 + for ( final HtmlTag htmlTag : htmlStack ) { 
 + if ( ! isSingleTag ( htmlTag ) 
 + & & ! htmlTag . getId ( ) . equals ( lastFound ) 
 + & & ! typeParameters . contains ( htmlTag . getId ( ) ) ) { 
 + log ( htmlTag . getLineNo ( ) , htmlTag . getPosition ( ) , UNCLOSED _ HTML , htmlTag ) ; 
 + lastFound = htmlTag . getId ( ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeModel . java 
 index 0329e82 . . 53406db 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeModel . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeModel . java 
 @ @ - 133 , 11 + 133 , 11 @ @ public class ParseTreeModel extends AbstractTreeTableModel { 
 @ Override 
 public Object getChild ( Object parent , int index ) { 
 final DetailAST ast = ( DetailAST ) parent ; 
 - int indx = 0 ; 
 + int currentIndex = 0 ; 
 AST child = ast . getFirstChild ( ) ; 
 - while ( indx < index ) { 
 + while ( currentIndex < index ) { 
 child = child . getNextSibling ( ) ; 
 - indx + + ; 
 + currentIndex + + ; 
 } 
 return child ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 index 98ccad8 . . dae6cd4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 @ @ - 266 , 7 + 266 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 
 / * * 
 * Checks whether a class may be considered as the checkstyle filter . 
 - * Checkstyle ' s filters are classes which are subclasses of AutomicBean , 
 + * Checkstyle ' s filters are classes which are subclasses of AutomaticBean , 
 * implement ' Filter ' interface , and which names end with ' Filter ' . 
 * @ param loadedClass class to check . 
 * @ param className class name to check . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index cdf0f8e . . 63ca583 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 159 , 10 + 159 , 10 @ @ public class CheckerTest { 
 checker . removeFilter ( filter ) ; 
 
 f2 . resetFilter ( ) ; 
 - final SortedSet < LocalizedMessage > msgs = Sets . newTreeSet ( ) ; 
 - msgs . add ( new LocalizedMessage ( 0 , 0 , " a Bundle " , " message . key " , 
 + final SortedSet < LocalizedMessage > messages = Sets . newTreeSet ( ) ; 
 + messages . add ( new LocalizedMessage ( 0 , 0 , " a Bundle " , " message . key " , 
 new Object [ ] { " arg " } , null , getClass ( ) , null ) ) ; 
 - checker . fireErrors ( " Some File Name " , msgs ) ; 
 + checker . fireErrors ( " Some File Name " , messages ) ; 
 assertTrue ( " Checker . fireErrors ( ) doesn ' t call filter " , f2 . wasCalled ( ) ) ; 
 assertFalse ( " Checker . fireErrors ( ) does call removed filter " , filter . wasCalled ( ) ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java 
 index c6dcd5f . . 963e18c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java 
 @ @ - 114 , 11 + 114 , 11 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { 
 public void testIsSuppressed ( ) throws Exception { 
 Class < ? > entry = Class 
 . forName ( " com . puppycrawl . tools . checkstyle . checks . SuppressWarningsHolder $ Entry " ) ; 
 - Constructor < ? > entryConstr = entry . getDeclaredConstructor ( String . class , int . class , 
 + Constructor < ? > entryConstructor = entry . getDeclaredConstructor ( String . class , int . class , 
 int . class , int . class , int . class ) ; 
 - entryConstr . setAccessible ( true ) ; 
 + entryConstructor . setAccessible ( true ) ; 
 
 - Object entryInstance = entryConstr . newInstance ( " MockEntry " , 100 , 100 , 350 , 350 ) ; 
 + Object entryInstance = entryConstructor . newInstance ( " MockEntry " , 100 , 100 , 350 , 350 ) ; 
 
 List < Object > entriesList = new ArrayList < > ( ) ; 
 entriesList . add ( entryInstance ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index 6afa809 . . da5b2f0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 114 , 7 + 114 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testWithAnnonymousClass ( ) throws Exception { 
 + public void testWithAnonymousClass ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( RequireThisCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java 
 index a6969dd . . 8f587f5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java 
 @ @ - 106 , 7 + 106 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " HideUtilityClassContructor3041574 _ 1 . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " HideUtilityClassConstructor3041574 _ 1 . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 114 , 7 + 114 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " HideUtilityClassContructor3041574 _ 2 . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " HideUtilityClassConstructor3041574 _ 2 . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 122 , 7 + 122 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " HideUtilityClassContructor3041574 _ 3 . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " HideUtilityClassConstructor3041574 _ 3 . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index f2130d1 . . f650793 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 64 , 10 + 64 , 10 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 private static final Pattern MULTILEVEL _ COMMENT _ REGEX = 
 Pattern . compile ( " / / indent : \ \ d + exp : ( \ \ d + ( , \ \ d + ) + ? ) ( warn ) ? " ) ; 
 
 - private static final Pattern SINGLELEVEL _ COMMENT _ REGEX = 
 + private static final Pattern SINGLE _ LEVEL _ COMMENT _ REGEX = 
 Pattern . compile ( " / / indent : \ \ d + exp : ( \ \ d + ) ( warn ) ? " ) ; 
 
 - private static final Pattern NONSTRICT _ LEVEL _ COMMENT _ REGEX = 
 + private static final Pattern NON _ STRICT _ LEVEL _ COMMENT _ REGEX = 
 Pattern . compile ( " / / indent : \ \ d + exp : > = ( \ \ d + ) ( warn ) ? " ) ; 
 
 private static final String [ ] EMPTY _ EXPECTED = { } ; 
 @ @ - 145 , 13 + 145 , 13 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 | | ! containsActualLevel & & isWarnComment ; 
 } 
 
 - Matcher singleLevelMatch = SINGLELEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 + Matcher singleLevelMatch = SINGLE _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 if ( singleLevelMatch . matches ( ) ) { 
 final int expectedLevel = Integer . parseInt ( singleLevelMatch . group ( 1 ) ) ; 
 return isSingleLevelCommentConsistent ( indentInComment , isWarnComment , expectedLevel ) ; 
 } 
 
 - Matcher nonStrictLevelMatch = NONSTRICT _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 + Matcher nonStrictLevelMatch = NON _ STRICT _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 if ( nonStrictLevelMatch . matches ( ) ) { 
 final int expectedMinimalIndent = Integer . parseInt ( nonStrictLevelMatch . group ( 1 ) ) ; 
 
 @ @ - 534 , 11 + 534 , 11 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidIfIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidIfIndent . java " ) ; 
 final String [ ] expected = { 
 " 231 : " + getCheckMessage ( MSG _ ERROR , " ( " , 8 , 12 ) , 
 } ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 554 , 9 + 554 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidDotIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidDotIndent . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 572 , 12 + 572 , 12 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidMethodIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidMethodIndent . java " ) ; 
 final String [ ] expected = { 
 " 129 : " + getCheckMessage ( MSG _ ERROR , " void " , 4 , 8 ) , 
 " 130 : " + getCheckMessage ( MSG _ ERROR , " method5 " , 4 , 8 ) , 
 } ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 593 , 7 + 593 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputInvalidMethodIndent . java " ) ; 
 + final String fileName = getPath ( " InputInvalidMethodIndent . java " ) ; 
 final String [ ] expected = { 
 " 23 : " + getCheckMessage ( MSG _ ERROR , " ctor def rcurly " , 6 , 4 ) , 
 " 26 : " + getCheckMessage ( MSG _ ERROR , " ctor def modifier " , 6 , 4 ) , 
 @ @ - 635 , 7 + 635 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 " 180 : " + getCheckMessage ( MSG _ ERROR , " method9 " , 4 , 8 ) , 
 " 190 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method def " , 12 , 8 ) , 
 } ; 
 - verifyWarns ( checkConfig , fname , expected , 6 ) ; 
 + verifyWarns ( checkConfig , fileName , expected , 6 ) ; 
 } 
 
 @ Test 
 @ @ - 652 , 7 + 652 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputInvalidSwitchIndent . java " ) ; 
 + final String fileName = getPath ( " InputInvalidSwitchIndent . java " ) ; 
 final String [ ] expected = { 
 " 30 : " + getCheckMessage ( MSG _ ERROR , " switch " , 6 , 8 ) , 
 " 32 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " case " , 10 , 12 ) , 
 @ @ - 681 , 7 + 681 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 " 95 : " + getCheckMessage ( MSG _ ERROR , " switch lcurly " , 10 , 8 ) , 
 " 96 : " + getCheckMessage ( MSG _ ERROR , " switch rcurly " , 6 , 8 ) , 
 } ; 
 - verifyWarns ( checkConfig , fname , expected , 3 ) ; 
 + verifyWarns ( checkConfig , fileName , expected , 3 ) ; 
 } 
 
 @ Test 
 @ @ - 697 , 9 + 697 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidSwitchIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidSwitchIndent . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 715 , 9 + 715 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidArrayInitDefaultIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidArrayInitDefaultIndent . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 733 , 9 + 733 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidArrayInitIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidArrayInitIndent . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 751 , 7 + 751 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputInvalidArrayInitIndent . java " ) ; 
 + final String fileName = getPath ( " InputInvalidArrayInitIndent . java " ) ; 
 final String [ ] expected = { 
 " 21 : " + getCheckMessage ( MSG _ ERROR , " member def type " , 2 , 4 ) , 
 " 22 : " + getCheckMessage ( MSG _ ERROR , " member def type " , 6 , 4 ) , 
 @ @ - 787 , 7 + 787 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 / / Test input for this test case is not checked due to issue # 693 . 
 - verify ( checkConfig , fname , expected ) ; 
 + verify ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 803 , 9 + 803 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidTryIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidTryIndent . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 821 , 7 + 821 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputInvalidTryIndent . java " ) ; 
 + final String fileName = getPath ( " InputInvalidTryIndent . java " ) ; 
 final String [ ] expected = { 
 " 25 : " + getCheckMessage ( MSG _ ERROR , " try " , 9 , 8 ) , 
 " 26 : " + getCheckMessage ( MSG _ ERROR , " try rcurly " , 7 , 8 ) , 
 @ @ - 850 , 7 + 850 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 " 80 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " catch " , 10 , 12 ) , 
 " 80 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " method call " , 10 , 12 ) , 
 } ; 
 - verifyWarns ( checkConfig , fname , expected , 6 ) ; 
 + verifyWarns ( checkConfig , fileName , expected , 6 ) ; 
 } 
 
 @ Test 
 @ @ - 866 , 7 + 866 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputInvalidClassDefIndent . java " ) ; 
 + final String fileName = getPath ( " InputInvalidClassDefIndent . java " ) ; 
 final String [ ] expected = { 
 " 22 : " + getCheckMessage ( MSG _ ERROR , " class def modifier " , 2 , 0 ) , 
 " 28 : " + getCheckMessage ( MSG _ ERROR , " class def lcurly " , 2 , 0 ) , 
 @ @ - 905 , 7 + 905 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 " 152 : " + getCheckMessage ( MSG _ ERROR , " method def rcurly " , 10 , 12 ) , 
 " 188 : " + getCheckMessage ( MSG _ ERROR , " class " , 0 , 4 ) , 
 } ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 921 , 7 + 921 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputInvalidBlockIndent . java " ) ; 
 + final String fileName = getPath ( " InputInvalidBlockIndent . java " ) ; 
 final String [ ] expected = { 
 " 26 : " + getCheckMessage ( MSG _ ERROR , " block lcurly " , 7 , 8 ) , 
 " 27 : " + getCheckMessage ( MSG _ ERROR , " block lcurly " , 9 , 8 ) , 
 @ @ - 980 , 7 + 980 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 " 150 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " block " , 6 , 8 ) , 
 " 150 : " + getCheckMessage ( MSG _ ERROR , " member def type " , 6 , 8 ) , 
 } ; 
 - verifyWarns ( checkConfig , fname , expected , 10 ) ; 
 + verifyWarns ( checkConfig , fileName , expected , 10 ) ; 
 } 
 
 @ Test 
 @ @ - 996 , 7 + 996 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputInvalidIfIndent . java " ) ; 
 + final String fileName = getPath ( " InputInvalidIfIndent . java " ) ; 
 final String [ ] expected = { 
 " 55 : " + getCheckMessage ( MSG _ ERROR , " if " , 1 , 8 ) , 
 " 60 : " + getCheckMessage ( MSG _ ERROR , " if " , 9 , 8 ) , 
 @ @ - 1083 , 7 + 1083 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 " 251 : " + getCheckMessage ( MSG _ ERROR , " if lparen " , 6 , 8 ) , 
 " 253 : " + getCheckMessage ( MSG _ ERROR , " if rparen " , 6 , 8 ) , 
 } ; 
 - verifyWarns ( checkConfig , fname , expected , 11 ) ; 
 + verifyWarns ( checkConfig , fileName , expected , 11 ) ; 
 } 
 
 @ Test 
 @ @ - 1099 , 7 + 1099 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputInvalidWhileIndent . java " ) ; 
 + final String fileName = getPath ( " InputInvalidWhileIndent . java " ) ; 
 final String [ ] expected = { 
 " 25 : " + getCheckMessage ( MSG _ ERROR , " while " , 9 , 8 ) , 
 " 26 : " + getCheckMessage ( MSG _ ERROR , " while rcurly " , 7 , 8 ) , 
 @ @ - 1134 , 7 + 1134 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 " 92 : " + getCheckMessage ( MSG _ ERROR , " while rparen " , 10 , 8 ) , 
 " 99 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " while " , 8 , 12 ) , 
 } ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 1149 , 11 + 1149 , 11 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputInvalidAnonymousClassIndent . java " ) ; 
 + final String fileName = getPath ( " InputInvalidAnonymousClassIndent . java " ) ; 
 final String [ ] expected = { 
 " 28 : " + getCheckMessage ( MSG _ ERROR _ MULTI , " method def rcurly " , 17 , " 12 , 16 " ) , 
 } ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 1169 , 7 + 1169 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputInvalidForIndent . java " ) ; 
 + final String fileName = getPath ( " InputInvalidForIndent . java " ) ; 
 final String [ ] expected = { 
 " 26 : " + getCheckMessage ( MSG _ ERROR , " for " , 6 , 8 ) , 
 " 27 : " + getCheckMessage ( MSG _ ERROR , " for rcurly " , 10 , 8 ) , 
 @ @ - 1200 , 7 + 1200 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 " 77 : " + getCheckMessage ( MSG _ ERROR , " for rcurly " , 39 , 8 ) , 
 " 81 : " + getCheckMessage ( MSG _ ERROR , " for rparen " , 12 , 8 ) , 
 } ; 
 - verifyWarns ( checkConfig , fname , expected , 6 ) ; 
 + verifyWarns ( checkConfig , fileName , expected , 6 ) ; 
 } 
 
 @ Test 
 @ @ - 1216 , 9 + 1216 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidForIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidForIndent . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 1234 , 9 + 1234 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidDoWhileIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidDoWhileIndent . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 1252 , 9 + 1252 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidBlockIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidBlockIndent . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 1270 , 9 + 1270 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidWhileIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidWhileIndent . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 1288 , 12 + 1288 , 12 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidClassDefIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidClassDefIndent . java " ) ; 
 final String [ ] expected = { 
 " 49 : " + getCheckMessage ( MSG _ ERROR , " class " , 0 , 4 ) , 
 " 71 : " + getCheckMessage ( MSG _ ERROR , " int " , 8 , 12 ) , 
 } ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 1309 , 9 + 1309 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidInterfaceDefIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidInterfaceDefIndent . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 @ @ - 1328 , 9 + 1328 , 9 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " lineWrappingIndentation " , " 4 " ) ; 
 checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 checkConfig . addAttribute ( " throwsIndent " , " 4 " ) ; 
 - final String fname = getPath ( " InputValidCommaIndent . java " ) ; 
 + final String fileName = getPath ( " InputValidCommaIndent . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verifyWarns ( checkConfig , fname , expected ) ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 1 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 1 . java 
 new file mode 100644 
 index 0000000 . . 4d28f84 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 1 . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import java . io . Serializable ; 
 + / * input file * / 
 + public abstract class HideUtilityClassConstructor3041574 _ 1 implements Serializable { 
 + private static final long serialVersionUID = 1L ; 
 + 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 2 . java 
 new file mode 100644 
 index 0000000 . . b719936 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 2 . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import java . io . Serializable ; 
 + / * input file * / 
 + public class HideUtilityClassConstructor3041574 _ 2 implements Serializable { 
 + private static final long serialVersionUID = 1L ; 
 + 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 3 . java 
 new file mode 100644 
 index 0000000 . . 25f3e5f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor3041574 _ 3 . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import java . io . Serializable ; 
 + 
 + public class HideUtilityClassConstructor3041574 _ 3 implements Serializable { 
 + private static final long serialVersionUID = 1L ; 
 + 
 + public HideUtilityClassConstructor3041574 _ 3 ( int i ) { 
 + / / no code 
 + } 
 + 
 + public String getValue ( ) { 
 + return " " ; 
 + } 
 + 
 + / / It is NOT Utility Inner class 
 + @ SuppressWarnings ( " unused " ) 
 + public static class Event { 
 + / / Top level class have access to fields - no need in public getters 
 + private String ind ; 
 + private String ind1 ; 
 + 
 + public Event ( String value ) { 
 + / / do a lot of calculations 
 + } 
 + 
 + / / static because this method is utility 
 + public static String getEmptyString ( ) { 
 + return " " ; 
 + } 
 + } 
 + 
 + / / It is Utility Inner class 
 + @ SuppressWarnings ( " unused " ) 
 + public static class Event1 { 
 + private String ind ; 
 + private String ind1 ; 
 + 
 + private Event1 ( ) { 
 + / / do a lot of calculations 
 + } 
 + 
 + / / static because this method is utility 
 + public static String getEmptyString ( ) { 
 + return " " ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 1 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 1 . java 
 deleted file mode 100644 
 index 8c5e3fe . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 1 . java 
 + + + / dev / null 
 @ @ - 1 , 8 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . design ; 
 - 
 - import java . io . Serializable ; 
 - / * input file * / 
 - public abstract class HideUtilityClassContructor3041574 _ 1 implements Serializable { 
 - private static final long serialVersionUID = 1L ; 
 - 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 2 . java 
 deleted file mode 100644 
 index 946f931 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 2 . java 
 + + + / dev / null 
 @ @ - 1 , 8 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . design ; 
 - 
 - import java . io . Serializable ; 
 - / * input file * / 
 - public class HideUtilityClassContructor3041574 _ 2 implements Serializable { 
 - private static final long serialVersionUID = 1L ; 
 - 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 3 . java 
 deleted file mode 100644 
 index 55d53a1 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 3 . java 
 + + + / dev / null 
 @ @ - 1 , 48 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . design ; 
 - 
 - import java . io . Serializable ; 
 - 
 - public class HideUtilityClassContructor3041574 _ 3 implements Serializable { 
 - private static final long serialVersionUID = 1L ; 
 - 
 - public HideUtilityClassContructor3041574 _ 3 ( int i ) { 
 - / / no code 
 - } 
 - 
 - public String getValue ( ) { 
 - return " " ; 
 - } 
 - 
 - / / It is NOT Utility Inner class 
 - @ SuppressWarnings ( " unused " ) 
 - public static class Event { 
 - / / Top level class have access to fields - no need in public getters 
 - private String ind ; 
 - private String ind1 ; 
 - 
 - public Event ( String value ) { 
 - / / do a lot of calculations 
 - } 
 - 
 - / / static because this method is utility 
 - public static String getEmptyString ( ) { 
 - return " " ; 
 - } 
 - } 
 - 
 - / / It is Utility Inner class 
 - @ SuppressWarnings ( " unused " ) 
 - public static class Event1 { 
 - private String ind ; 
 - private String ind1 ; 
 - 
 - private Event1 ( ) { 
 - / / do a lot of calculations 
 - } 
 - 
 - / / static because this method is utility 
 - public static String getEmptyString ( ) { 
 - return " " ; 
 - } 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / src / xdocs / idea . xml b / src / xdocs / idea . xml 
 index 6da1f6d . . 1bfac2c 100644 
 - - - a / src / xdocs / idea . xml 
 + + + b / src / xdocs / idea . xml 
 @ @ - 53 , 7 + 53 , 7 @ @ 
 
 < section name = " Organize Imports " > 
 < p > 
 - One of the Checkstyle checks we run on our own code require sertain order of import 
 + One of the Checkstyle checks we run on our own code require certain order of import 
 statements . Few changes in IDE settings are required to help your IDE do it automatically . < br / > 
 To change formatter settings please go to File - > Settings in menu . < br / > 
 Then in the tree go to : Editor - > Code Style - > Java , open Import tab ( follow numbers on a 
 diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index 54349f4 . . 491ff8b 100644 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 864 , 7 + 864 , 7 @ @ 
 Ineffective suppressions are removed from checkstyle ' s configs . Author : Bhavik Patel 
 < / li > 
 < li > 
 - Checking existance of config file before processing target file . . Author : Bhavik Patel 
 + Checking existence of config file before processing target file . . Author : Bhavik Patel 
 < / li > 
 < li > 
 Changed Integration Tests to use / src / it / . Author : Aleksandr Ivanov < a href = " https : / / github . com / checkstyle / checkstyle / issues / 1200 " > # 1200 < / a >

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 index 89a41fc . . 2a550da 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 @ @ - 539 , 7 + 539 , 7 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 createChecker ( checkConfig ) ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator 
 + verify ( checkConfig , getPath ( " checks " + File . separator + " imports " + File . separator 
 + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 new file mode 100644 
 index 0000000 . . 10b8399 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; 
 + 
 + / / every import from javadoc package has comment in brackets indicating presence of keywords 
 + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) 
 + 
 + / / STANDARD - keyword Check 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) 
 + 
 + / / SPECIAL _ IMPORTS - keyword Tag 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) 
 + 
 + import com . puppycrawl . tools . * ; 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) 
 + 
 + public class InputCustomImportOrder _ OverlappingPatterns { 
 + } 
 + / * 
 + test : testRulesOrder _ ThirdBeforeSame ( ) 
 + configuration : 
 + checkConfig . addAttribute ( " customImportOrderRules " , 
 + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; 
 + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 + * / 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 deleted file mode 100644 
 index 10b8399 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . imports ; 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; 
 - 
 - / / every import from javadoc package has comment in brackets indicating presence of keywords 
 - / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) 
 - 
 - / / STANDARD - keyword Check 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) 
 - 
 - / / SPECIAL _ IMPORTS - keyword Tag 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) 
 - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) 
 - 
 - import com . puppycrawl . tools . * ; 
 - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) 
 - 
 - public class InputCustomImportOrder _ OverlappingPatterns { 
 - } 
 - / * 
 - test : testRulesOrder _ ThirdBeforeSame ( ) 
 - configuration : 
 - checkConfig . addAttribute ( " customImportOrderRules " , 
 - " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; 
 - checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 - * /
