BLEU SCORE: 0.8633400213704505

TEST MSG: Issue # 2451 : removed excess hierarchy from InterfaceTypeParameterName
GENERATED MSG: Issue # 2451 : removed excess hierarchy from NoFinalizerCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheck . java <nl> index 69b712d . . 1c9d320 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheck . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> @ @ - 47 , 19 + 48 , 33 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * @ author maxvetrenko <nl> * / <nl> public class InterfaceTypeParameterNameCheck <nl> - extends AbstractTypeParameterNameCheck { <nl> + extends AbstractNameCheck { <nl> / * * Creates a new { @ code InterfaceTypeParameterNameCheck } instance . * / <nl> public InterfaceTypeParameterNameCheck ( ) { <nl> super ( " ^ [ A - Z ] $ " ) ; <nl> } <nl> <nl> @ Override <nl> + public int [ ] getDefaultTokens ( ) { <nl> + return getAcceptableTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return new int [ ] { <nl> + TokenTypes . TYPE _ PARAMETER , <nl> + } ; <nl> + } <nl> + <nl> + @ Override <nl> public int [ ] getRequiredTokens ( ) { <nl> - return new int [ ] { TokenTypes . TYPE _ PARAMETER } ; <nl> + return getAcceptableTokens ( ) ; <nl> } <nl> <nl> @ Override <nl> - protected final int getLocation ( ) { <nl> - return TokenTypes . INTERFACE _ DEF ; <nl> + protected final boolean mustCheckName ( DetailAST ast ) { <nl> + final DetailAST location = <nl> + ast . getParent ( ) . getParent ( ) ; <nl> + return location . getType ( ) = = TokenTypes . INTERFACE _ DEF ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 7461156 . . 4b82755 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 37 , 7 + 37 , 7 @ @ <nl> files = " AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java " / > <nl> <nl> < ! - - Tone down the checking for test code - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 319 " / > <nl> + < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 318 " / > <nl> < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > <nl> < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> < suppress checks = " Javadoc " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> index 6564d8f . . d5f6207 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> @ @ - 21 , 10 + 21 , 12 @ @ package com . puppycrawl . tools . checkstyle . checks . design ; <nl> <nl> import java . util . ArrayDeque ; <nl> import java . util . Deque ; <nl> + import java . util . regex . Pattern ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . checks . AbstractFormatCheck ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * < p > Ensures that exceptions ( classes with names conforming to some regular <nl> @ @ - 39 , 7 + 41 , 7 @ @ import com . puppycrawl . tools . checkstyle . checks . AbstractFormatCheck ; <nl> * <nl> * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > <nl> * / <nl> - public final class MutableExceptionCheck extends AbstractFormatCheck { <nl> + public final class MutableExceptionCheck extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 50 , 17 + 52 , 15 @ @ public final class MutableExceptionCheck extends AbstractFormatCheck { <nl> / * * Default value for format and extendedClassNameFormat properties . * / <nl> private static final String DEFAULT _ FORMAT = " ^ . * Exception $ | ^ . * Error $ | ^ . * Throwable $ " ; <nl> / * * Pattern for class name that is being extended . * / <nl> - private String extendedClassNameFormat ; <nl> + private String extendedClassNameFormat = DEFAULT _ FORMAT ; <nl> / * * Stack of checking information for classes . * / <nl> private final Deque < Boolean > checkingStack = new ArrayDeque < > ( ) ; <nl> / * * Should we check current class or not . * / <nl> private boolean checking ; <nl> - <nl> - / * * Creates new instance of the check . * / <nl> - public MutableExceptionCheck ( ) { <nl> - super ( DEFAULT _ FORMAT ) ; <nl> - extendedClassNameFormat = DEFAULT _ FORMAT ; <nl> - } <nl> + / * * The format string of the regexp . * / <nl> + private String format = DEFAULT _ FORMAT ; <nl> + / * * The regexp to match against . * / <nl> + private Pattern regexp = Pattern . compile ( format ) ; <nl> <nl> / * * <nl> * Sets the format of extended class name to the specified regular expression . <nl> @ @ - 70 , 6 + 70 , 16 @ @ public final class MutableExceptionCheck extends AbstractFormatCheck { <nl> this . extendedClassNameFormat = extendedClassNameFormat ; <nl> } <nl> <nl> + / * * <nl> + * Set the format to the specified regular expression . <nl> + * @ param format a { @ code String } value <nl> + * @ throws org . apache . commons . beanutils . ConversionException unable to parse format <nl> + * / <nl> + public void setFormat ( String format ) { <nl> + this . format = format ; <nl> + regexp = CommonUtils . createPattern ( format ) ; <nl> + } <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> return new int [ ] { TokenTypes . CLASS _ DEF , TokenTypes . VARIABLE _ DEF } ; <nl> @ @ - 143 , 7 + 153 , 7 @ @ public final class MutableExceptionCheck extends AbstractFormatCheck { <nl> * / <nl> private boolean isNamedAsException ( DetailAST ast ) { <nl> final String className = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> - return getRegexp ( ) . matcher ( className ) . find ( ) ; <nl> + return regexp . matcher ( className ) . find ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> index 8239ca2 . . 744f3c2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> @ @ - 111 , 7 + 111 , 6 @ @ public class XDocsPagesTest { <nl> private static final List < String > UNDOCUMENTED _ PROPERTIES = Arrays . asList ( <nl> " SuppressWithNearbyCommentFilter . fileContents " , <nl> " IllegalTokenTextCheck . compileFlags " , <nl> - " MutableExceptionCheck . compileFlags " , <nl> " AbstractClassNameCheck . compileFlags " , <nl> " ClassTypeParameterNameCheck . compileFlags " , <nl> " ConstantNameCheck . compileFlags " ,

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheck . java 
 index 69b712d . . 1c9d320 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / InterfaceTypeParameterNameCheck . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . naming ; 
 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 @ @ - 47 , 19 + 48 , 33 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * @ author maxvetrenko 
 * / 
 public class InterfaceTypeParameterNameCheck 
 - extends AbstractTypeParameterNameCheck { 
 + extends AbstractNameCheck { 
 / * * Creates a new { @ code InterfaceTypeParameterNameCheck } instance . * / 
 public InterfaceTypeParameterNameCheck ( ) { 
 super ( " ^ [ A - Z ] $ " ) ; 
 } 
 
 @ Override 
 + public int [ ] getDefaultTokens ( ) { 
 + return getAcceptableTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return new int [ ] { 
 + TokenTypes . TYPE _ PARAMETER , 
 + } ; 
 + } 
 + 
 + @ Override 
 public int [ ] getRequiredTokens ( ) { 
 - return new int [ ] { TokenTypes . TYPE _ PARAMETER } ; 
 + return getAcceptableTokens ( ) ; 
 } 
 
 @ Override 
 - protected final int getLocation ( ) { 
 - return TokenTypes . INTERFACE _ DEF ; 
 + protected final boolean mustCheckName ( DetailAST ast ) { 
 + final DetailAST location = 
 + ast . getParent ( ) . getParent ( ) ; 
 + return location . getType ( ) = = TokenTypes . INTERFACE _ DEF ; 
 } 
 }

NEAREST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 7461156 . . 4b82755 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 37 , 7 + 37 , 7 @ @ 
 files = " AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java " / > 
 
 < ! - - Tone down the checking for test code - - > 
 - < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 319 " / > 
 + < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 318 " / > 
 < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > 
 < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 < suppress checks = " Javadoc " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 index 6564d8f . . d5f6207 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 @ @ - 21 , 10 + 21 , 12 @ @ package com . puppycrawl . tools . checkstyle . checks . design ; 
 
 import java . util . ArrayDeque ; 
 import java . util . Deque ; 
 + import java . util . regex . Pattern ; 
 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . checks . AbstractFormatCheck ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * < p > Ensures that exceptions ( classes with names conforming to some regular 
 @ @ - 39 , 7 + 41 , 7 @ @ import com . puppycrawl . tools . checkstyle . checks . AbstractFormatCheck ; 
 * 
 * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > 
 * / 
 - public final class MutableExceptionCheck extends AbstractFormatCheck { 
 + public final class MutableExceptionCheck extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 50 , 17 + 52 , 15 @ @ public final class MutableExceptionCheck extends AbstractFormatCheck { 
 / * * Default value for format and extendedClassNameFormat properties . * / 
 private static final String DEFAULT _ FORMAT = " ^ . * Exception $ | ^ . * Error $ | ^ . * Throwable $ " ; 
 / * * Pattern for class name that is being extended . * / 
 - private String extendedClassNameFormat ; 
 + private String extendedClassNameFormat = DEFAULT _ FORMAT ; 
 / * * Stack of checking information for classes . * / 
 private final Deque < Boolean > checkingStack = new ArrayDeque < > ( ) ; 
 / * * Should we check current class or not . * / 
 private boolean checking ; 
 - 
 - / * * Creates new instance of the check . * / 
 - public MutableExceptionCheck ( ) { 
 - super ( DEFAULT _ FORMAT ) ; 
 - extendedClassNameFormat = DEFAULT _ FORMAT ; 
 - } 
 + / * * The format string of the regexp . * / 
 + private String format = DEFAULT _ FORMAT ; 
 + / * * The regexp to match against . * / 
 + private Pattern regexp = Pattern . compile ( format ) ; 
 
 / * * 
 * Sets the format of extended class name to the specified regular expression . 
 @ @ - 70 , 6 + 70 , 16 @ @ public final class MutableExceptionCheck extends AbstractFormatCheck { 
 this . extendedClassNameFormat = extendedClassNameFormat ; 
 } 
 
 + / * * 
 + * Set the format to the specified regular expression . 
 + * @ param format a { @ code String } value 
 + * @ throws org . apache . commons . beanutils . ConversionException unable to parse format 
 + * / 
 + public void setFormat ( String format ) { 
 + this . format = format ; 
 + regexp = CommonUtils . createPattern ( format ) ; 
 + } 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 return new int [ ] { TokenTypes . CLASS _ DEF , TokenTypes . VARIABLE _ DEF } ; 
 @ @ - 143 , 7 + 153 , 7 @ @ public final class MutableExceptionCheck extends AbstractFormatCheck { 
 * / 
 private boolean isNamedAsException ( DetailAST ast ) { 
 final String className = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 - return getRegexp ( ) . matcher ( className ) . find ( ) ; 
 + return regexp . matcher ( className ) . find ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 index 8239ca2 . . 744f3c2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 @ @ - 111 , 7 + 111 , 6 @ @ public class XDocsPagesTest { 
 private static final List < String > UNDOCUMENTED _ PROPERTIES = Arrays . asList ( 
 " SuppressWithNearbyCommentFilter . fileContents " , 
 " IllegalTokenTextCheck . compileFlags " , 
 - " MutableExceptionCheck . compileFlags " , 
 " AbstractClassNameCheck . compileFlags " , 
 " ClassTypeParameterNameCheck . compileFlags " , 
 " ConstantNameCheck . compileFlags " ,
