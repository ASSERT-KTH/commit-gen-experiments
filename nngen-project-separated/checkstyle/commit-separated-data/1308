BLEU SCORE: 0.036601145083241325

TEST MSG: Issue # 2904 : fixed SuperCloneCheck from bad code in input
GENERATED MSG: Issue # 46 : Loops should not contain more than a single ' break ' or ' continue ' statement

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> index ba4f2fc . . 29977f0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> @ @ - 101 , 8 + 101 , 7 @ @ public abstract class AbstractSuperCheck <nl> / / dot operator ? <nl> final DetailAST dotAst = literalSuperAst . getParent ( ) ; <nl> <nl> - if ( dotAst . getType ( ) = = TokenTypes . DOT <nl> - & & ! isSameNameMethod ( literalSuperAst ) <nl> + if ( ! isSameNameMethod ( literalSuperAst ) <nl> & & ! hasArguments ( dotAst ) ) { <nl> superCall = isSuperCallInOverridingMethod ( dotAst ) ; <nl> } <nl> @ @ - 120 , 8 + 119 , 7 @ @ public abstract class AbstractSuperCheck <nl> boolean inOverridingMethod = false ; <nl> DetailAST dotAst = ast ; <nl> <nl> - while ( dotAst ! = null <nl> - & & dotAst . getType ( ) ! = TokenTypes . CTOR _ DEF <nl> + while ( dotAst . getType ( ) ! = TokenTypes . CTOR _ DEF <nl> & & dotAst . getType ( ) ! = TokenTypes . INSTANCE _ INIT ) { <nl> <nl> if ( dotAst . getType ( ) = = TokenTypes . METHOD _ DEF ) { <nl> @ @ - 157 , 7 + 155 , 7 @ @ public abstract class AbstractSuperCheck <nl> & & sibling . getType ( ) = = TokenTypes . TYPE _ ARGUMENTS ) { <nl> sibling = sibling . getNextSibling ( ) ; <nl> } <nl> - if ( sibling = = null | | sibling . getType ( ) ! = TokenTypes . IDENT ) { <nl> + if ( sibling = = null ) { <nl> return true ; <nl> } <nl> final String name = sibling . getText ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> index 1b089d0 . . c014bcc 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> @ @ - 61 , 8 + 61 , 7 @ @ public class SuperCloneCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( SuperCloneCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 13 : 8 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , <nl> - " 19 : 8 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , <nl> + " 9 : 17 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , <nl> } ; <nl> verify ( checkConfig , getNonCompilablePath ( " InputSuperClone . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java <nl> index 0f4abd3 . . 16bfeaf 100644 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - / / Requires Java8 <nl> + / / Compilable with Java8 <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> interface InputSuperClone { <nl> @ @ - 6 , 26 + 6 , 34 @ @ interface InputSuperClone { <nl> } <nl> <nl> class A { <nl> - static { <nl> - Runnable a = ( ) - > super . clone ( ) ; <nl> - } <nl> - <nl> - void clone ( ) { <nl> - obj . super ( ) ; <nl> + public Object clone ( ) { <nl> + return null ; <nl> } <nl> } <nl> <nl> class B { <nl> - void clone ( ) { <nl> - ( super ) . clone ( ) ; <nl> + public Object clone ( ) throws CloneNotSupportedException { <nl> + super . clone ( ) ; <nl> + return null ; <nl> + } <nl> + void clone ( Object asd , Object asd2 ) { <nl> } <nl> } <nl> <nl> - class C { <nl> - void method ( ) { <nl> - super ( ) ; <nl> + class C extends B { <nl> + void method ( ) throws CloneNotSupportedException { <nl> Object asd = null ; <nl> super . clone ( asd , asd ) ; <nl> super . clone ( ) ; <nl> + Runnable a = ( ) - > super . clone ( null , null ) ; <nl> + } <nl> + <nl> + void method2 ( ) { <nl> + new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + C . super . clone ( null , null ) ; <nl> + } <nl> + } ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> index bb6aab9 . . f35f19e 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> @ @ - 126 , 10 + 126 , 10 @ @ public abstract class BaseCheckTestSupport <nl> final int errs = aC . process ( theFiles ) ; <nl> <nl> / / process each of the lines <nl> - final ByteArrayInputStream bais = <nl> + final ByteArrayInputStream localStream = <nl> new ByteArrayInputStream ( stream . toByteArray ( ) ) ; <nl> final LineNumberReader lnr = <nl> - new LineNumberReader ( new InputStreamReader ( bais , StandardCharsets . UTF _ 8 ) ) ; <nl> + new LineNumberReader ( new InputStreamReader ( localStream , StandardCharsets . UTF _ 8 ) ) ; <nl> <nl> for ( int i = 0 ; i < aExpected . length ; i + + ) { <nl> final String expected = aMessageFileName + " : " + aExpected [ i ] ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index ad1f24c . . d7c3047 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 50 , 7 + 50 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * <nl> * * / <nl> public final class Main { <nl> - / * * Exit code returned when excecution finishes with { @ link CheckstyleException } * / <nl> + / * * Exit code returned when execution finishes with { @ link CheckstyleException } * / <nl> private static final int EXIT _ WITH _ CHECKSTYLE _ EXCEPTION _ CODE = - 2 ; <nl> <nl> / * * Name for the option ' v ' . * / <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ModuleFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / ModuleFactory . java <nl> index 68e0bcc . . 565c5ef 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ModuleFactory . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ModuleFactory . java <nl> @ @ - 23 , 8 + 23 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> <nl> / * * <nl> * A module factory creates Objects from a given name . <nl> - * It ' s purpose is to map the shortnames like <nl> - * { @ code AvoidStarImport } to full classnames like <nl> + * It ' s purpose is to map the short names like <nl> + * { @ code AvoidStarImport } to full class names like <nl> * { @ code com . puppycrawl . tools . checkstyle . checks . AvoidStarImportCheck } . <nl> * A ModuleFactory can implement this name resolution by using naming <nl> * conventions , fallback strategies , etc . <nl> @ @ - 38 , 7 + 38 , 7 @ @ public interface ModuleFactory { <nl> * is returned . If the name is not a class name the ModuleFactory uses <nl> * heuristics to find the corresponding class . <nl> * <nl> - * @ param name the name of the module , might be a shortname <nl> + * @ param name the name of the module , might be a short name <nl> * @ return the created module <nl> * @ throws CheckstyleException if no module can be instantiated from name <nl> * / <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> index 33e2aa1 . . f3f878f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> @ @ - 39 , 7 + 39 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; <nl> * Check has an option < b > ignorePrimitiveTypes < / b > which allows ignoring lack of <nl> * final modifier at <nl> * < a href = " http : / / docs . oracle . com / javase / tutorial / java / nutsandbolts / datatypes . html " > <nl> - * primitive datatype < / a > parameter . Default value < b > false < / b > . <nl> + * primitive data type < / a > parameter . Default value < b > false < / b > . <nl> * < / p > <nl> * E . g . : <nl> * < p > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> index d8e81da . . e1bea9f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class JavadocStyleCheck <nl> <nl> / * * HTML tags that are allowed in java docs . <nl> * From http : / / www . w3schools . com / tags / default . asp <nl> - * The froms and structure tags are not allowed <nl> + * The forms and structure tags are not allowed <nl> * / <nl> private static final Set < String > ALLOWED _ TAGS = ImmutableSortedSet . of ( <nl> " a " , " abbr " , " acronym " , " address " , " area " , " b " , " bdo " , " big " , <nl> @ @ - 183 , 7 + 183 , 7 @ @ public class JavadocStyleCheck <nl> } <nl> <nl> / * * <nl> - * Performs the various checks agains the Javadoc comment . <nl> + * Performs the various checks against the Javadoc comment . <nl> * <nl> * @ param ast the AST of the element being documented <nl> * @ param comment the source lines that make up the Javadoc comment . <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java <nl> index 0f52a65 . . 6923e40 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java <nl> @ @ - 145 , 7 + 145 , 7 @ @ class TagParser { <nl> final int column = pos . getColumnNo ( ) + 1 ; <nl> final String text = javadocText [ pos . getLineNo ( ) ] ; <nl> <nl> - / / Character . isJavidentifier . . . may not be a valid HTML <nl> + / / Character . isJavaIdentifier . . . may not be a valid HTML <nl> / / identifier but is valid for generics <nl> return column < text . length ( ) <nl> & & ( Character . isJavaIdentifierStart ( text . charAt ( column ) ) <nl> @ @ - 173 , 7 + 173 , 7 @ @ class TagParser { <nl> text = text . substring ( column ) . trim ( ) ; <nl> int position = 0 ; <nl> <nl> - / / Character . isJavidentifier . . . may not be a valid HTML <nl> + / / Character . isJavaIdentifier . . . may not be a valid HTML <nl> / / identifier but is valid for generics <nl> while ( position < text . length ( ) <nl> & & ( Character . isJavaIdentifierStart ( text . charAt ( position ) ) <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java <nl> index ed230eb . . 6d981f2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java <nl> @ @ - 39 , 7 + 39 , 7 @ @ public class FinalClassCheckTest <nl> } <nl> <nl> @ Test <nl> - public void testFianlClass ( ) throws Exception { <nl> + public void testFinalClass ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( FinalClassCheck . class ) ; <nl> final String [ ] expected = { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java <nl> index 1d9c205 . . d5a9dab 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> verify ( checkConfig , getPath ( " design " + File . separator + " UtilityClassConstructorPrivate . java " ) , expected ) ; <nl> } <nl> <nl> - / * * Nonstatic methods - always OK * / <nl> + / * * Non - static methods - always OK * / <nl> @ Test <nl> public void testNonUtilClass ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> @ @ - 88 , 7 + 88 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> } <nl> <nl> @ Test <nl> - public void testOnlyNonstaticFieldNonUtilClass ( ) throws Exception { <nl> + public void testOnlyNonStaticFieldNonUtilClass ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java <nl> index 54a6109 . . ae0ec1b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java <nl> @ @ - 202 , 10 + 202 , 10 @ @ public class WriteTagCheckTest extends BaseCheckTestSupport { <nl> final int errs = checker . process ( theFiles ) ; <nl> <nl> / / process each of the lines <nl> - final ByteArrayInputStream bais = <nl> + final ByteArrayInputStream localStream = <nl> new ByteArrayInputStream ( stream . toByteArray ( ) ) ; <nl> try ( final LineNumberReader lnr = new LineNumberReader ( <nl> - new InputStreamReader ( bais , StandardCharsets . UTF _ 8 ) ) ) { <nl> + new InputStreamReader ( localStream , StandardCharsets . UTF _ 8 ) ) ) { <nl> <nl> for ( int i = 0 ; i < expected . length ; i + + ) { <nl> final String expectedResult = messageFileName + " : " + expected [ i ] ;

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 index ba4f2fc . . 29977f0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 @ @ - 101 , 8 + 101 , 7 @ @ public abstract class AbstractSuperCheck 
 / / dot operator ? 
 final DetailAST dotAst = literalSuperAst . getParent ( ) ; 
 
 - if ( dotAst . getType ( ) = = TokenTypes . DOT 
 - & & ! isSameNameMethod ( literalSuperAst ) 
 + if ( ! isSameNameMethod ( literalSuperAst ) 
 & & ! hasArguments ( dotAst ) ) { 
 superCall = isSuperCallInOverridingMethod ( dotAst ) ; 
 } 
 @ @ - 120 , 8 + 119 , 7 @ @ public abstract class AbstractSuperCheck 
 boolean inOverridingMethod = false ; 
 DetailAST dotAst = ast ; 
 
 - while ( dotAst ! = null 
 - & & dotAst . getType ( ) ! = TokenTypes . CTOR _ DEF 
 + while ( dotAst . getType ( ) ! = TokenTypes . CTOR _ DEF 
 & & dotAst . getType ( ) ! = TokenTypes . INSTANCE _ INIT ) { 
 
 if ( dotAst . getType ( ) = = TokenTypes . METHOD _ DEF ) { 
 @ @ - 157 , 7 + 155 , 7 @ @ public abstract class AbstractSuperCheck 
 & & sibling . getType ( ) = = TokenTypes . TYPE _ ARGUMENTS ) { 
 sibling = sibling . getNextSibling ( ) ; 
 } 
 - if ( sibling = = null | | sibling . getType ( ) ! = TokenTypes . IDENT ) { 
 + if ( sibling = = null ) { 
 return true ; 
 } 
 final String name = sibling . getText ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 index 1b089d0 . . c014bcc 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 @ @ - 61 , 8 + 61 , 7 @ @ public class SuperCloneCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( SuperCloneCheck . class ) ; 
 final String [ ] expected = { 
 - " 13 : 8 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , 
 - " 19 : 8 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , 
 + " 9 : 17 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , 
 } ; 
 verify ( checkConfig , getNonCompilablePath ( " InputSuperClone . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java 
 index 0f4abd3 . . 16bfeaf 100644 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperClone . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - / / Requires Java8 
 + / / Compilable with Java8 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 interface InputSuperClone { 
 @ @ - 6 , 26 + 6 , 34 @ @ interface InputSuperClone { 
 } 
 
 class A { 
 - static { 
 - Runnable a = ( ) - > super . clone ( ) ; 
 - } 
 - 
 - void clone ( ) { 
 - obj . super ( ) ; 
 + public Object clone ( ) { 
 + return null ; 
 } 
 } 
 
 class B { 
 - void clone ( ) { 
 - ( super ) . clone ( ) ; 
 + public Object clone ( ) throws CloneNotSupportedException { 
 + super . clone ( ) ; 
 + return null ; 
 + } 
 + void clone ( Object asd , Object asd2 ) { 
 } 
 } 
 
 - class C { 
 - void method ( ) { 
 - super ( ) ; 
 + class C extends B { 
 + void method ( ) throws CloneNotSupportedException { 
 Object asd = null ; 
 super . clone ( asd , asd ) ; 
 super . clone ( ) ; 
 + Runnable a = ( ) - > super . clone ( null , null ) ; 
 + } 
 + 
 + void method2 ( ) { 
 + new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + C . super . clone ( null , null ) ; 
 + } 
 + } ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 index bb6aab9 . . f35f19e 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 @ @ - 126 , 10 + 126 , 10 @ @ public abstract class BaseCheckTestSupport 
 final int errs = aC . process ( theFiles ) ; 
 
 / / process each of the lines 
 - final ByteArrayInputStream bais = 
 + final ByteArrayInputStream localStream = 
 new ByteArrayInputStream ( stream . toByteArray ( ) ) ; 
 final LineNumberReader lnr = 
 - new LineNumberReader ( new InputStreamReader ( bais , StandardCharsets . UTF _ 8 ) ) ; 
 + new LineNumberReader ( new InputStreamReader ( localStream , StandardCharsets . UTF _ 8 ) ) ; 
 
 for ( int i = 0 ; i < aExpected . length ; i + + ) { 
 final String expected = aMessageFileName + " : " + aExpected [ i ] ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index ad1f24c . . d7c3047 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 50 , 7 + 50 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * 
 * * / 
 public final class Main { 
 - / * * Exit code returned when excecution finishes with { @ link CheckstyleException } * / 
 + / * * Exit code returned when execution finishes with { @ link CheckstyleException } * / 
 private static final int EXIT _ WITH _ CHECKSTYLE _ EXCEPTION _ CODE = - 2 ; 
 
 / * * Name for the option ' v ' . * / 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ModuleFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / ModuleFactory . java 
 index 68e0bcc . . 565c5ef 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ModuleFactory . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ModuleFactory . java 
 @ @ - 23 , 8 + 23 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 
 / * * 
 * A module factory creates Objects from a given name . 
 - * It ' s purpose is to map the shortnames like 
 - * { @ code AvoidStarImport } to full classnames like 
 + * It ' s purpose is to map the short names like 
 + * { @ code AvoidStarImport } to full class names like 
 * { @ code com . puppycrawl . tools . checkstyle . checks . AvoidStarImportCheck } . 
 * A ModuleFactory can implement this name resolution by using naming 
 * conventions , fallback strategies , etc . 
 @ @ - 38 , 7 + 38 , 7 @ @ public interface ModuleFactory { 
 * is returned . If the name is not a class name the ModuleFactory uses 
 * heuristics to find the corresponding class . 
 * 
 - * @ param name the name of the module , might be a shortname 
 + * @ param name the name of the module , might be a short name 
 * @ return the created module 
 * @ throws CheckstyleException if no module can be instantiated from name 
 * / 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 index 33e2aa1 . . f3f878f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 @ @ - 39 , 7 + 39 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; 
 * Check has an option < b > ignorePrimitiveTypes < / b > which allows ignoring lack of 
 * final modifier at 
 * < a href = " http : / / docs . oracle . com / javase / tutorial / java / nutsandbolts / datatypes . html " > 
 - * primitive datatype < / a > parameter . Default value < b > false < / b > . 
 + * primitive data type < / a > parameter . Default value < b > false < / b > . 
 * < / p > 
 * E . g . : 
 * < p > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 index d8e81da . . e1bea9f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public class JavadocStyleCheck 
 
 / * * HTML tags that are allowed in java docs . 
 * From http : / / www . w3schools . com / tags / default . asp 
 - * The froms and structure tags are not allowed 
 + * The forms and structure tags are not allowed 
 * / 
 private static final Set < String > ALLOWED _ TAGS = ImmutableSortedSet . of ( 
 " a " , " abbr " , " acronym " , " address " , " area " , " b " , " bdo " , " big " , 
 @ @ - 183 , 7 + 183 , 7 @ @ public class JavadocStyleCheck 
 } 
 
 / * * 
 - * Performs the various checks agains the Javadoc comment . 
 + * Performs the various checks against the Javadoc comment . 
 * 
 * @ param ast the AST of the element being documented 
 * @ param comment the source lines that make up the Javadoc comment . 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java 
 index 0f52a65 . . 6923e40 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java 
 @ @ - 145 , 7 + 145 , 7 @ @ class TagParser { 
 final int column = pos . getColumnNo ( ) + 1 ; 
 final String text = javadocText [ pos . getLineNo ( ) ] ; 
 
 - / / Character . isJavidentifier . . . may not be a valid HTML 
 + / / Character . isJavaIdentifier . . . may not be a valid HTML 
 / / identifier but is valid for generics 
 return column < text . length ( ) 
 & & ( Character . isJavaIdentifierStart ( text . charAt ( column ) ) 
 @ @ - 173 , 7 + 173 , 7 @ @ class TagParser { 
 text = text . substring ( column ) . trim ( ) ; 
 int position = 0 ; 
 
 - / / Character . isJavidentifier . . . may not be a valid HTML 
 + / / Character . isJavaIdentifier . . . may not be a valid HTML 
 / / identifier but is valid for generics 
 while ( position < text . length ( ) 
 & & ( Character . isJavaIdentifierStart ( text . charAt ( position ) ) 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java 
 index ed230eb . . 6d981f2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java 
 @ @ - 39 , 7 + 39 , 7 @ @ public class FinalClassCheckTest 
 } 
 
 @ Test 
 - public void testFianlClass ( ) throws Exception { 
 + public void testFinalClass ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( FinalClassCheck . class ) ; 
 final String [ ] expected = { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java 
 index 1d9c205 . . d5a9dab 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 verify ( checkConfig , getPath ( " design " + File . separator + " UtilityClassConstructorPrivate . java " ) , expected ) ; 
 } 
 
 - / * * Nonstatic methods - always OK * / 
 + / * * Non - static methods - always OK * / 
 @ Test 
 public void testNonUtilClass ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 @ @ - 88 , 7 + 88 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 } 
 
 @ Test 
 - public void testOnlyNonstaticFieldNonUtilClass ( ) throws Exception { 
 + public void testOnlyNonStaticFieldNonUtilClass ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java 
 index 54a6109 . . ae0ec1b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java 
 @ @ - 202 , 10 + 202 , 10 @ @ public class WriteTagCheckTest extends BaseCheckTestSupport { 
 final int errs = checker . process ( theFiles ) ; 
 
 / / process each of the lines 
 - final ByteArrayInputStream bais = 
 + final ByteArrayInputStream localStream = 
 new ByteArrayInputStream ( stream . toByteArray ( ) ) ; 
 try ( final LineNumberReader lnr = new LineNumberReader ( 
 - new InputStreamReader ( bais , StandardCharsets . UTF _ 8 ) ) ) { 
 + new InputStreamReader ( localStream , StandardCharsets . UTF _ 8 ) ) ) { 
 
 for ( int i = 0 ; i < expected . length ; i + + ) { 
 final String expectedResult = messageFileName + " : " + expected [ i ] ;
