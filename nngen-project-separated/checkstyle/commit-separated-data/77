BLEU SCORE: 0.10552670315936319

TEST MSG: Issue # 6301 : ArrayTypeStyle support for method definitions
GENERATED MSG: Issue # 1566 : InnerTypeLast turned on

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java <nl> index 2124ee9 . . 0cc533e 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java <nl> @ @ - 41 , 8 + 41 , 11 @ @ public class ArrayTypeStyleTest extends AbstractModuleTestSupport { <nl> " 15 : 44 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> " 21 : 20 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> " 22 : 23 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> - " 41 : 16 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> - " 42 : 19 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> + " 41 : 33 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> + " 46 : 36 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> + " 52 : 27 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> + " 62 : 16 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> + " 63 : 19 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , <nl> } ; <nl> <nl> final Configuration checkConfig = getModuleConfig ( " ArrayTypeStyle " ) ; <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / InputArrayTypeStyle . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / InputArrayTypeStyle . java <nl> index ed2bb06 . . 5563366 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / InputArrayTypeStyle . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / InputArrayTypeStyle . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ public class InputArrayTypeStyle <nl> <nl> public Test [ ] <nl> getTests ( ) <nl> - { / / we shouldn ' t check methods because there is no alternatives . <nl> + { <nl> return null ; <nl> } <nl> <nl> @ @ - 37 , 6 + 37 , 27 @ @ public class InputArrayTypeStyle <nl> { <nl> return null ; <nl> } <nl> + <nl> + public Test getOldTest ( ) [ ] / / warn <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + public Test getOldTests ( ) [ ] [ ] / / warn <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + public Test [ ] <nl> + getMoreTests ( ) [ ] / / warn <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + public Test [ ] [ ] getTests2 ( ) / / ok <nl> + { <nl> + return null ; <nl> + } <nl> } <nl> int [ ] array [ ] = new int [ 2 ] [ 2 ] ; / / warn <nl> int array2 [ ] [ ] [ ] = new int [ 3 ] [ 3 ] [ 3 ] ; / / warn <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> index 17523ce . . a16d292 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> @ @ - 27 , 9 + 27 , 13 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> / * * <nl> * Checks the style of array type definitions . <nl> * Some like Java - style : { @ code public static void main ( String [ ] args ) } <nl> - * and some like C - style : public static void main ( String args [ ] ) <nl> + * and some like C - style : { @ code public static void main ( String args [ ] ) } . <nl> * <nl> - * < p > By default the Check enforces Java style . <nl> + * < p > By default the Check enforces Java style . < / p > <nl> + * <nl> + * < p > This check strictly enforces only Java style for method return types <nl> + * regardless of the value for ' javaStyle ' . For example , { @ code byte [ ] getData ( ) } . <nl> + * This is because C doesn ' t compile methods with array declarations on the name . < / p > <nl> * / <nl> @ StatelessCheck <nl> public class ArrayTypeStyleCheck extends AbstractCheck { <nl> @ @ - 61 , 17 + 65 , 18 @ @ public class ArrayTypeStyleCheck extends AbstractCheck { <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> final DetailAST typeAST = ast . getParent ( ) ; <nl> - if ( typeAST . getType ( ) = = TokenTypes . TYPE <nl> - / / Do not check method ' s return type . <nl> - / / We have no alternatives here . <nl> - & & typeAST . getParent ( ) . getType ( ) ! = TokenTypes . METHOD _ DEF ) { <nl> + if ( typeAST . getType ( ) = = TokenTypes . TYPE ) { <nl> final DetailAST variableAST = typeAST . getNextSibling ( ) ; <nl> if ( variableAST ! = null ) { <nl> - final boolean isJavaStyle = <nl> - variableAST . getLineNo ( ) > ast . getLineNo ( ) <nl> + final boolean isMethod = typeAST . getParent ( ) . getType ( ) = = TokenTypes . METHOD _ DEF ; <nl> + final boolean isJavaStyle = variableAST . getLineNo ( ) > ast . getLineNo ( ) <nl> | | variableAST . getColumnNo ( ) - ast . getColumnNo ( ) > - 1 ; <nl> <nl> - if ( isJavaStyle ! = javaStyle ) { <nl> + / / force all methods to be Java style ( see note in top Javadoc ) <nl> + final boolean isMethodViolation = isMethod & & ! isJavaStyle ; <nl> + final boolean isVariableViolation = ! isMethod & & isJavaStyle ! = javaStyle ; <nl> + <nl> + if ( isMethodViolation | | isVariableViolation ) { <nl> log ( ast , MSG _ KEY ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java <nl> index fcada1c . . 7c247c5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java <nl> @ @ - 54 , 6 + 54 , 9 @ @ public class ArrayTypeStyleCheckTest <nl> " 14 : 23 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 15 : 18 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 21 : 44 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 45 : 33 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 50 : 36 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 56 : 29 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputArrayTypeStyle . java " ) , expected ) ; <nl> } <nl> @ @ - 69 , 6 + 72 , 9 @ @ public class ArrayTypeStyleCheckTest <nl> " 17 : 39 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 23 : 18 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 31 : 20 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 45 : 33 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 50 : 36 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 56 : 29 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputArrayTypeStyle . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / arraytypestyle / InputArrayTypeStyle . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / arraytypestyle / InputArrayTypeStyle . java <nl> index df738b2 . . 0ee2df7 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / arraytypestyle / InputArrayTypeStyle . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / arraytypestyle / InputArrayTypeStyle . java <nl> @ @ - 33 , 7 + 33 , 7 @ @ public class InputArrayTypeStyle <nl> <nl> public Test [ ] <nl> getTests ( ) <nl> - { / / we shouldn ' t check methods because there is no alternatives . <nl> + { <nl> return null ; <nl> } <nl> <nl> @ @ - 41 , 6 + 41 , 27 @ @ public class InputArrayTypeStyle <nl> { <nl> return null ; <nl> } <nl> + <nl> + public Test getOldTest ( ) [ ] <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + public Test getOldTests ( ) [ ] [ ] <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + public Test [ ] <nl> + getMoreTests ( ) [ ] [ ] <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + public Test [ ] [ ] getTests2 ( ) <nl> + { <nl> + return null ; <nl> + } <nl> } <nl> public static void foo ( java . util . Collection < ? extends InputArrayTypeStyle [ ] > collection ) { } <nl> } <nl> diff - - git a / src / xdocs / config _ misc . xml b / src / xdocs / config _ misc . xml <nl> index 8be002d . . f2072ae 100644 <nl> - - - a / src / xdocs / config _ misc . xml <nl> + + + b / src / xdocs / config _ misc . xml <nl> @ @ - 28 , 7 + 28 , 15 @ @ <nl> < p > <nl> Checks the style of array type definitions . Some like Java style : <nl> < code > public static void main ( String [ ] args ) < / code > and some like <nl> - C style : public static void main ( String args [ ] ) <nl> + C style : < code > public static void main ( String args [ ] ) < / code > . <nl> + < / p > <nl> + < p > <nl> + By default the Check enforces Java style . <nl> + < / p > <nl> + < p > <nl> + This check strictly enforces only Java style for method return types <nl> + regardless of the value for ' javaStyle ' . For example , < code > byte [ ] getData ( ) < / code > . <nl> + This is because C doesn ' t compile methods with array declarations on the name . <nl> < / p > <nl> < / subsection > <nl> <nl> @ @ - 60 , 7 + 68 , 23 @ @ <nl> < source > <nl> & lt ; module name = & quot ; ArrayTypeStyle & quot ; / & gt ; <nl> < / source > <nl> + < p > <nl> + Example : <nl> + < / p > <nl> + < source > <nl> + public class MyClass { <nl> + int [ ] nums ; / / OK <nl> + String strings [ ] ; / / violation <nl> + <nl> + char [ ] toCharArray ( ) { / / OK <nl> + return null ; <nl> + } <nl> <nl> + byte getData ( ) [ ] { / / violation <nl> + return null ; <nl> + } <nl> + } <nl> + < / source > <nl> < p > <nl> To configure the check to enforce C style : <nl> < / p > <nl> @ @ - 69 , 6 + 93 , 23 @ @ <nl> & lt ; property name = & quot ; javaStyle & quot ; value = & quot ; false & quot ; / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> + < p > <nl> + Example : <nl> + < / p > <nl> + < source > <nl> + public class MyClass { <nl> + int [ ] nums ; / / violation <nl> + String strings [ ] ; / / OK <nl> + <nl> + char [ ] toCharArray ( ) { / / OK <nl> + return null ; <nl> + } <nl> + <nl> + byte getData ( ) [ ] { / / violation <nl> + return null ; <nl> + } <nl> + } <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " id = " ArrayTypeStyle _ Example _ of _ Usage " >
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index 2bfe1c6 . . 6dfe7cf 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 140 , 7 + 140 , 7 @ @ public class ConfigurationLoaderTest { <nl> assertTrue ( <nl> ex . getMessage ( ) . endsWith ( <nl> " Document root element \ " property \ " , must match DOCTYPE " <nl> - + " root \ " module \ " . : 7 : 38 " ) ) ; <nl> + + " root \ " module \ " . : 8 : 38 " ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / configs / missing _ config _ parent . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / configs / missing _ config _ parent . xml <nl> index 4ab4de3 . . 07768c6 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / configs / missing _ config _ parent . xml <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / configs / missing _ config _ parent . xml <nl> @ @ - 4 , 5 + 4 , 6 @ @ <nl> " - / / Puppy Crawl / / DTD Check Configuration 1 . 1 / / EN " <nl> " http : / / www . puppycrawl . com / dtds / configuration _ 1 _ 1 . dtd " > <nl> <nl> + < ! - - suppress XmlWrongRootElement - wrong element used for test purposes - - > <nl> < property name = " tabWidth " value = " 4 " / > <nl>

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java 
 index 2124ee9 . . 0cc533e 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / ArrayTypeStyleTest . java 
 @ @ - 41 , 8 + 41 , 11 @ @ public class ArrayTypeStyleTest extends AbstractModuleTestSupport { 
 " 15 : 44 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 " 21 : 20 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 " 22 : 23 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 - " 41 : 16 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 - " 42 : 19 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 + " 41 : 33 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 + " 46 : 36 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 + " 52 : 27 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 + " 62 : 16 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 + " 63 : 19 : " + getCheckMessage ( ArrayTypeStyleCheck . class , MSG _ KEY ) , 
 } ; 
 
 final Configuration checkConfig = getModuleConfig ( " ArrayTypeStyle " ) ; 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / InputArrayTypeStyle . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / InputArrayTypeStyle . java 
 index ed2bb06 . . 5563366 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / InputArrayTypeStyle . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4832nocstylearray / InputArrayTypeStyle . java 
 @ @ - 29 , 7 + 29 , 7 @ @ public class InputArrayTypeStyle 
 
 public Test [ ] 
 getTests ( ) 
 - { / / we shouldn ' t check methods because there is no alternatives . 
 + { 
 return null ; 
 } 
 
 @ @ - 37 , 6 + 37 , 27 @ @ public class InputArrayTypeStyle 
 { 
 return null ; 
 } 
 + 
 + public Test getOldTest ( ) [ ] / / warn 
 + { 
 + return null ; 
 + } 
 + 
 + public Test getOldTests ( ) [ ] [ ] / / warn 
 + { 
 + return null ; 
 + } 
 + 
 + public Test [ ] 
 + getMoreTests ( ) [ ] / / warn 
 + { 
 + return null ; 
 + } 
 + 
 + public Test [ ] [ ] getTests2 ( ) / / ok 
 + { 
 + return null ; 
 + } 
 } 
 int [ ] array [ ] = new int [ 2 ] [ 2 ] ; / / warn 
 int array2 [ ] [ ] [ ] = new int [ 3 ] [ 3 ] [ 3 ] ; / / warn 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 index 17523ce . . a16d292 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 @ @ - 27 , 9 + 27 , 13 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 / * * 
 * Checks the style of array type definitions . 
 * Some like Java - style : { @ code public static void main ( String [ ] args ) } 
 - * and some like C - style : public static void main ( String args [ ] ) 
 + * and some like C - style : { @ code public static void main ( String args [ ] ) } . 
 * 
 - * < p > By default the Check enforces Java style . 
 + * < p > By default the Check enforces Java style . < / p > 
 + * 
 + * < p > This check strictly enforces only Java style for method return types 
 + * regardless of the value for ' javaStyle ' . For example , { @ code byte [ ] getData ( ) } . 
 + * This is because C doesn ' t compile methods with array declarations on the name . < / p > 
 * / 
 @ StatelessCheck 
 public class ArrayTypeStyleCheck extends AbstractCheck { 
 @ @ - 61 , 17 + 65 , 18 @ @ public class ArrayTypeStyleCheck extends AbstractCheck { 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 final DetailAST typeAST = ast . getParent ( ) ; 
 - if ( typeAST . getType ( ) = = TokenTypes . TYPE 
 - / / Do not check method ' s return type . 
 - / / We have no alternatives here . 
 - & & typeAST . getParent ( ) . getType ( ) ! = TokenTypes . METHOD _ DEF ) { 
 + if ( typeAST . getType ( ) = = TokenTypes . TYPE ) { 
 final DetailAST variableAST = typeAST . getNextSibling ( ) ; 
 if ( variableAST ! = null ) { 
 - final boolean isJavaStyle = 
 - variableAST . getLineNo ( ) > ast . getLineNo ( ) 
 + final boolean isMethod = typeAST . getParent ( ) . getType ( ) = = TokenTypes . METHOD _ DEF ; 
 + final boolean isJavaStyle = variableAST . getLineNo ( ) > ast . getLineNo ( ) 
 | | variableAST . getColumnNo ( ) - ast . getColumnNo ( ) > - 1 ; 
 
 - if ( isJavaStyle ! = javaStyle ) { 
 + / / force all methods to be Java style ( see note in top Javadoc ) 
 + final boolean isMethodViolation = isMethod & & ! isJavaStyle ; 
 + final boolean isVariableViolation = ! isMethod & & isJavaStyle ! = javaStyle ; 
 + 
 + if ( isMethodViolation | | isVariableViolation ) { 
 log ( ast , MSG _ KEY ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java 
 index fcada1c . . 7c247c5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java 
 @ @ - 54 , 6 + 54 , 9 @ @ public class ArrayTypeStyleCheckTest 
 " 14 : 23 : " + getCheckMessage ( MSG _ KEY ) , 
 " 15 : 18 : " + getCheckMessage ( MSG _ KEY ) , 
 " 21 : 44 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 45 : 33 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 50 : 36 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 56 : 29 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputArrayTypeStyle . java " ) , expected ) ; 
 } 
 @ @ - 69 , 6 + 72 , 9 @ @ public class ArrayTypeStyleCheckTest 
 " 17 : 39 : " + getCheckMessage ( MSG _ KEY ) , 
 " 23 : 18 : " + getCheckMessage ( MSG _ KEY ) , 
 " 31 : 20 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 45 : 33 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 50 : 36 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 56 : 29 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputArrayTypeStyle . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / arraytypestyle / InputArrayTypeStyle . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / arraytypestyle / InputArrayTypeStyle . java 
 index df738b2 . . 0ee2df7 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / arraytypestyle / InputArrayTypeStyle . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / arraytypestyle / InputArrayTypeStyle . java 
 @ @ - 33 , 7 + 33 , 7 @ @ public class InputArrayTypeStyle 
 
 public Test [ ] 
 getTests ( ) 
 - { / / we shouldn ' t check methods because there is no alternatives . 
 + { 
 return null ; 
 } 
 
 @ @ - 41 , 6 + 41 , 27 @ @ public class InputArrayTypeStyle 
 { 
 return null ; 
 } 
 + 
 + public Test getOldTest ( ) [ ] 
 + { 
 + return null ; 
 + } 
 + 
 + public Test getOldTests ( ) [ ] [ ] 
 + { 
 + return null ; 
 + } 
 + 
 + public Test [ ] 
 + getMoreTests ( ) [ ] [ ] 
 + { 
 + return null ; 
 + } 
 + 
 + public Test [ ] [ ] getTests2 ( ) 
 + { 
 + return null ; 
 + } 
 } 
 public static void foo ( java . util . Collection < ? extends InputArrayTypeStyle [ ] > collection ) { } 
 } 
 diff - - git a / src / xdocs / config _ misc . xml b / src / xdocs / config _ misc . xml 
 index 8be002d . . f2072ae 100644 
 - - - a / src / xdocs / config _ misc . xml 
 + + + b / src / xdocs / config _ misc . xml 
 @ @ - 28 , 7 + 28 , 15 @ @ 
 < p > 
 Checks the style of array type definitions . Some like Java style : 
 < code > public static void main ( String [ ] args ) < / code > and some like 
 - C style : public static void main ( String args [ ] ) 
 + C style : < code > public static void main ( String args [ ] ) < / code > . 
 + < / p > 
 + < p > 
 + By default the Check enforces Java style . 
 + < / p > 
 + < p > 
 + This check strictly enforces only Java style for method return types 
 + regardless of the value for ' javaStyle ' . For example , < code > byte [ ] getData ( ) < / code > . 
 + This is because C doesn ' t compile methods with array declarations on the name . 
 < / p > 
 < / subsection > 
 
 @ @ - 60 , 7 + 68 , 23 @ @ 
 < source > 
 & lt ; module name = & quot ; ArrayTypeStyle & quot ; / & gt ; 
 < / source > 
 + < p > 
 + Example : 
 + < / p > 
 + < source > 
 + public class MyClass { 
 + int [ ] nums ; / / OK 
 + String strings [ ] ; / / violation 
 + 
 + char [ ] toCharArray ( ) { / / OK 
 + return null ; 
 + } 
 
 + byte getData ( ) [ ] { / / violation 
 + return null ; 
 + } 
 + } 
 + < / source > 
 < p > 
 To configure the check to enforce C style : 
 < / p > 
 @ @ - 69 , 6 + 93 , 23 @ @ 
 & lt ; property name = & quot ; javaStyle & quot ; value = & quot ; false & quot ; / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 + < p > 
 + Example : 
 + < / p > 
 + < source > 
 + public class MyClass { 
 + int [ ] nums ; / / violation 
 + String strings [ ] ; / / OK 
 + 
 + char [ ] toCharArray ( ) { / / OK 
 + return null ; 
 + } 
 + 
 + byte getData ( ) [ ] { / / violation 
 + return null ; 
 + } 
 + } 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Example of Usage " id = " ArrayTypeStyle _ Example _ of _ Usage " >

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index 2bfe1c6 . . 6dfe7cf 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 140 , 7 + 140 , 7 @ @ public class ConfigurationLoaderTest { 
 assertTrue ( 
 ex . getMessage ( ) . endsWith ( 
 " Document root element \ " property \ " , must match DOCTYPE " 
 - + " root \ " module \ " . : 7 : 38 " ) ) ; 
 + + " root \ " module \ " . : 8 : 38 " ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / configs / missing _ config _ parent . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / configs / missing _ config _ parent . xml 
 index 4ab4de3 . . 07768c6 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / configs / missing _ config _ parent . xml 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / configs / missing _ config _ parent . xml 
 @ @ - 4 , 5 + 4 , 6 @ @ 
 " - / / Puppy Crawl / / DTD Check Configuration 1 . 1 / / EN " 
 " http : / / www . puppycrawl . com / dtds / configuration _ 1 _ 1 . dtd " > 
 
 + < ! - - suppress XmlWrongRootElement - wrong element used for test purposes - - > 
 < property name = " tabWidth " value = " 4 " / > 

