BLEU SCORE: 0.06285596338261261

TEST MSG: Issue # 3381 : Update Google style coverage to state of 12 July 2016
GENERATED MSG: Issue # 3473 : ParameterNameCheck : new scope and excludeScope properties

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> index 908a2d5 . . 7cd7ae9 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> @ @ - 254 , 19 + 254 , 35 @ @ public class BaseCheckTestSupport { <nl> * @ throws CheckstyleException if exception occurs during configuration loading . <nl> * / <nl> protected static Configuration getCheckConfig ( String checkName ) throws CheckstyleException { <nl> - Configuration result = null ; <nl> + final List < Configuration > configs = getCheckConfigs ( checkName ) ; <nl> + if ( configs . isEmpty ( ) ) { <nl> + return null ; <nl> + } <nl> + else { <nl> + return configs . get ( 0 ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Returns a list of all { @ link Configuration } instances for the given check name . <nl> + * This implementation uses { @ link BaseCheckTestSupport # getConfiguration ( ) } method inside . <nl> + * @ param checkName check name . <nl> + * @ return { @ link Configuration } instance for the given check name . <nl> + * @ throws CheckstyleException if exception occurs during configuration loading . <nl> + * / <nl> + protected static List < Configuration > getCheckConfigs ( String checkName ) <nl> + throws CheckstyleException { <nl> + final List < Configuration > result = new ArrayList < > ( ) ; <nl> for ( Configuration currentConfig : getConfiguration ( ) . getChildren ( ) ) { <nl> if ( " TreeWalker " . equals ( currentConfig . getName ( ) ) ) { <nl> for ( Configuration checkConfig : currentConfig . getChildren ( ) ) { <nl> if ( checkName . equals ( checkConfig . getName ( ) ) ) { <nl> - result = checkConfig ; <nl> - break ; <nl> + result . add ( checkConfig ) ; <nl> } <nl> } <nl> } <nl> else if ( checkName . equals ( currentConfig . getName ( ) ) ) { <nl> - result = currentConfig ; <nl> - break ; <nl> + result . add ( currentConfig ) ; <nl> } <nl> } <nl> return result ; <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java <nl> index f1ece5a . . a561db8 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java <nl> @ @ - 64 , 6 + 64 , 9 @ @ public class WhitespaceAroundTest extends BaseCheckTestSupport { <nl> " 118 : 20 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " / " ) , <nl> " 147 : 15 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " assert " ) , <nl> " 150 : 20 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " : " ) , <nl> + " 249 : 14 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " - > " ) , <nl> + " 250 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " - > " ) , <nl> + " 250 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " { " ) , <nl> } ; <nl> <nl> final String filePath = getPath ( " InputWhitespaceAroundBasic . java " ) ; <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java <nl> index bab33e9 . . d85318e 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java <nl> @ @ - 21 , 7 + 21 , 9 @ @ package com . google . checkstyle . test . chapter5naming . rule526parameternames ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . util . List ; <nl> <nl> + import org . junit . Assert ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 32 , 8 + 34 , 10 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> public class ParameterNameTest extends BaseCheckTestSupport { <nl> <nl> private static final String MSG _ KEY = " name . invalidPattern " ; <nl> - private static String format ; <nl> - private static Configuration checkConfig ; <nl> + private static String privFormat ; <nl> + private static String pubFormat ; <nl> + private static Configuration privConfig ; <nl> + private static Configuration pubConfig ; <nl> <nl> @ Override <nl> protected String getPath ( String fileName ) throws IOException { <nl> @ @ - 43 , 36 + 47 , 55 @ @ public class ParameterNameTest extends BaseCheckTestSupport { <nl> <nl> @ BeforeClass <nl> public static void setConfigurationBuilder ( ) throws CheckstyleException { <nl> - checkConfig = getCheckConfig ( " ParameterName " ) ; <nl> - format = checkConfig . getAttribute ( " format " ) ; <nl> + final List < Configuration > configs = getCheckConfigs ( " ParameterName " ) ; <nl> + <nl> + Assert . assertEquals ( configs . size ( ) , 2 ) ; <nl> + <nl> + privConfig = configs . get ( 0 ) ; <nl> + Assert . assertEquals ( privConfig . getAttribute ( " excludeScope " ) , " public " ) ; <nl> + privFormat = privConfig . getAttribute ( " format " ) ; <nl> + <nl> + pubConfig = configs . get ( 1 ) ; <nl> + Assert . assertEquals ( pubConfig . getAttribute ( " scope " ) , " public " ) ; <nl> + pubFormat = pubConfig . getAttribute ( " format " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void privParameterNameTest ( ) throws Exception { <nl> + <nl> + final String [ ] expected = { <nl> + " 8 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " $ arg1 " , privFormat ) , <nl> + " 9 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " ar $ g2 " , privFormat ) , <nl> + " 10 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " arg3 $ " , privFormat ) , <nl> + " 11 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " a _ rg4 " , privFormat ) , <nl> + " 12 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " _ arg5 " , privFormat ) , <nl> + " 13 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " arg6 _ " , privFormat ) , <nl> + " 14 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " aArg7 " , privFormat ) , <nl> + " 15 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " aArg8 " , privFormat ) , <nl> + " 16 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " aar _ g " , privFormat ) , <nl> + } ; <nl> + <nl> + final String filePath = getPath ( " InputParameterNameSimplePriv . java " ) ; <nl> + <nl> + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> + verify ( privConfig , filePath , expected , warnList ) ; <nl> } <nl> <nl> @ Test <nl> - public void parameterNameTest ( ) throws Exception { <nl> + public void pubParameterNameTest ( ) throws Exception { <nl> <nl> final String [ ] expected = { <nl> - " 8 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " $ arg1 " , format ) , <nl> - " 9 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " ar $ g2 " , format ) , <nl> - " 10 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " arg3 $ " , format ) , <nl> - " 11 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " a _ rg4 " , format ) , <nl> - " 12 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " _ arg5 " , format ) , <nl> - " 13 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " arg6 _ " , format ) , <nl> - " 14 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " aArg7 " , format ) , <nl> - " 15 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " aArg8 " , format ) , <nl> - " 16 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " aar _ g " , format ) , <nl> - " 26 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " bB " , format ) , <nl> - " 49 : 22 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " llll _ llll " , format ) , <nl> - " 50 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " bB " , format ) , <nl> - " 60 : 23 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , <nl> - " 63 : 24 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , <nl> - " 69 : 31 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , <nl> - " 74 : 41 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , <nl> - " 77 : 44 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , <nl> + " 10 : 21 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " bB " , pubFormat ) , <nl> + " 33 : 22 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " llll _ llll " , pubFormat ) , <nl> + " 34 : 21 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " bB " , pubFormat ) , <nl> + " 44 : 23 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " p " , pubFormat ) , <nl> + " 53 : 31 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " p " , pubFormat ) , <nl> + " 58 : 44 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " p " , pubFormat ) , <nl> } ; <nl> <nl> - final String filePath = getPath ( " InputParameterNameSimple . java " ) ; <nl> + final String filePath = getPath ( " InputParameterNameSimplePub . java " ) ; <nl> <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> - verify ( checkConfig , filePath , expected , warnList ) ; <nl> + verify ( pubConfig , filePath , expected , warnList ) ; <nl> } <nl> } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputWhitespaceAroundBasic . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputWhitespaceAroundBasic . java <nl> index 28ddb78 . . 4a481b1 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputWhitespaceAroundBasic . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputWhitespaceAroundBasic . java <nl> @ @ - 236 , 3 + 236 , 24 @ @ class SpecialCasesInForLoop <nl> return null ; <nl> } <nl> } <nl> + <nl> + / * * <nl> + * Operators mentioned in Google Coding Standards 2016 - 07 - 12 <nl> + * / <nl> + class NewGoogleOperators <nl> + { <nl> + NewGoogleOperators ( ) <nl> + { <nl> + Runnable l ; <nl> + <nl> + l = ( ) - > { } ; / / warn <nl> + l = ( ) - > { } ; / / warn <nl> + l = ( ) - > { } ; <nl> + <nl> + java . util . Arrays . sort ( null , String : : compareToIgnoreCase ) ; <nl> + java . util . Arrays . sort ( null , String : : compareToIgnoreCase ) ; <nl> + <nl> + new Object ( ) . toString ( ) ; <nl> + new Object ( ) . toString ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java <nl> deleted file mode 100644 <nl> index 6f7bf9c . . 0000000 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java <nl> + + + / dev / null <nl> @ @ - 1 , 78 + 0 , 0 @ @ <nl> - package com . google . checkstyle . test . chapter5naming . rule526parameternames ; <nl> - <nl> - import java . io . * ; <nl> - <nl> - final class InputSimple <nl> - { <nl> - void toManyArgs ( <nl> - 	 	 int $ arg1 , / / warn <nl> - 	 	 int ar $ g2 , / / warn <nl> - 	 	 int arg3 $ , / / warn <nl> - 	 	 int a _ rg4 , / / warn <nl> - 	 	 int _ arg5 , / / warn <nl> - 	 	 int arg6 _ , / / warn <nl> - 	 	 int aArg7 , / / warn <nl> - 	 	 int aArg8 , / / warn <nl> - 	 	 int aar _ g ) / / warn <nl> - <nl> - { } <nl> - } <nl> - <nl> - class InputSimple2 <nl> - { <nl> - <nl> - / * * Some more Javadoc . * / <nl> - public void doSomething ( int aaa , int abn , String aaA , <nl> - boolean bB ) / / warn <nl> - { <nl> - for ( Object O : new java . util . ArrayList ( ) ) <nl> - { <nl> - <nl> - } <nl> - } <nl> - } <nl> - <nl> - <nl> - / * * Test enum for member naming check * / <nl> - enum MyEnum1 <nl> - { <nl> - / * * ABC constant * / <nl> - ABC , <nl> - <nl> - / * * XYZ constant * / <nl> - XYZ ; <nl> - <nl> - / * * Should be mSomeMemeber * / <nl> - private int someMember ; <nl> - <nl> - public void doEnum ( int aaaL , <nl> - 	 	 long llll _ llll , / / warn <nl> - boolean bB ) { } / / warn <nl> - } <nl> - <nl> - / * * Test public vs private method parameter naming check . * / <nl> - class InputParameterNameSimple <nl> - { <nl> - / * * Valid : public and more than one char Long * / <nl> - public void a ( int par , int parA ) { } <nl> - <nl> - / * * Invalid : public and one char long * / <nl> - public void b ( int p ) { } / / warn <nl> - <nl> - / * * Invalid : private and one char long . * / <nl> - private void c ( int p ) { } / / warn <nl> - <nl> - / * * Holder for inner anonymous classes * / <nl> - private void d ( int param ) { <nl> - new Object ( ) { <nl> - / * * Invalid : public and one char long . * / <nl> - public void e ( int p ) { } / / warn <nl> - } ; <nl> - } <nl> - <nl> - / * * Invalid : public constructor and one char long * / <nl> - public InputParameterNameSimple ( int p ) { } / / warn <nl> - <nl> - / * * Invalid : private constructor and one char long * / <nl> - private InputParameterNameSimple ( float p ) { } / / warn <nl> - } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePriv . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePriv . java <nl> new file mode 100644 <nl> index 0000000 . . dced1c3 <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePriv . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . google . checkstyle . test . chapter5naming . rule526parameternames ; <nl> + <nl> + import java . io . * ; <nl> + <nl> + final class InputSimple <nl> + { <nl> + void toManyArgs ( <nl> + 	 	 int $ arg1 , / / warn <nl> + 	 	 int ar $ g2 , / / warn <nl> + 	 	 int arg3 $ , / / warn <nl> + 	 	 int a _ rg4 , / / warn <nl> + 	 	 int _ arg5 , / / warn <nl> + 	 	 int arg6 _ , / / warn <nl> + 	 	 int aArg7 , / / warn <nl> + 	 	 int aArg8 , / / warn <nl> + 	 	 int aar _ g ) / / warn <nl> + <nl> + { } <nl> + } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePub . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePub . java <nl> new file mode 100644 <nl> index 0000000 . . 0f39b79 <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePub . java <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + package com . google . checkstyle . test . chapter5naming . rule526parameternames ; <nl> + <nl> + import java . io . * ; <nl> + <nl> + class InputSimple2 <nl> + { <nl> + <nl> + / * * Some more Javadoc . * / <nl> + public void doSomething ( int aaa , int abn , String aaA , <nl> + boolean bB ) / / warn <nl> + { <nl> + for ( Object O : new java . util . ArrayList ( ) ) <nl> + { <nl> + <nl> + } <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * Test enum for member naming check * / <nl> + enum MyEnum1 <nl> + { <nl> + / * * ABC constant * / <nl> + ABC , <nl> + <nl> + / * * XYZ constant * / <nl> + XYZ ; <nl> + <nl> + / * * Should be mSomeMemeber * / <nl> + private int someMember ; <nl> + <nl> + public void doEnum ( int aaaL , <nl> + 	 	 long llll _ llll , / / warn <nl> + boolean bB ) { } / / warn <nl> + } <nl> + <nl> + / * * Test public vs private method parameter naming check . * / <nl> + class InputParameterNameSimplePub <nl> + { <nl> + / * * Valid : public and more than one char Long * / <nl> + public void a ( int par , int parA ) { } <nl> + <nl> + / * * Invalid : public and one char long * / <nl> + public void b ( int p ) { } / / warn <nl> + <nl> + / * * Valid : private and one char long . * / <nl> + private void c ( int p ) { } <nl> + <nl> + / * * Holder for inner anonymous classes * / <nl> + private void d ( int param ) { <nl> + new Object ( ) { <nl> + / * * Invalid : public and one char long . * / <nl> + public void e ( int p ) { } / / warn <nl> + } ; <nl> + } <nl> + <nl> + / * * Invalid : public constructor and one char long * / <nl> + public InputParameterNameSimplePub ( int p ) { } / / warn <nl> + <nl> + / * * Valid : private constructor and one char long * / <nl> + private InputParameterNameSimplePub ( float p ) { } <nl> + } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter6programpractice / rule62donotignoreexceptions / InputEmptyBlockCatch . java b / src / it / resources / com / google / checkstyle / test / chapter6programpractice / rule62donotignoreexceptions / InputEmptyBlockCatch . java <nl> index f5efc09 . . e6c4d05 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter6programpractice / rule62donotignoreexceptions / InputEmptyBlockCatch . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter6programpractice / rule62donotignoreexceptions / InputEmptyBlockCatch . java <nl> @ @ - 72 , 4 + 72 , 20 @ @ class Catch { <nl> finally { } / / warn <nl> } <nl> } ; <nl> + <nl> + void bar1 ( ) { <nl> + try { <nl> + if ( ! flag ) { <nl> + doSm ( ) ; <nl> + } <nl> + } catch ( Exception expected ) { } <nl> + } <nl> + <nl> + void bar2 ( ) { <nl> + try { <nl> + if ( ! flag ) { <nl> + doSm ( ) ; <nl> + } <nl> + } catch ( Exception expected ) { } <nl> + } <nl> } <nl> diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml <nl> index 2c06945 . . 925c76c 100644 <nl> - - - a / src / main / resources / google _ checks . xml <nl> + + + b / src / main / resources / google _ checks . xml <nl> @ @ - 102 , 7 + 102 , 14 @ @ <nl> value = " Member name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > <nl> < / module > <nl> < module name = " ParameterName " > <nl> + < property name = " format " value = " ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ " / > <nl> + < property name = " excludeScope " value = " public " / > <nl> + < message key = " name . invalidPattern " <nl> + value = " Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > <nl> + < / module > <nl> + < module name = " ParameterName " > <nl> < property name = " format " value = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " / > <nl> + < property name = " scope " value = " public " / > <nl> < message key = " name . invalidPattern " <nl> value = " Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > <nl> < / module > <nl> @ @ - 166 , 7 + 173 , 7 @ @ <nl> < module name = " MethodParamPad " / > <nl> < module name = " OperatorWrap " > <nl> < property name = " option " value = " NL " / > <nl> - < property name = " tokens " value = " BAND , BOR , BSR , BXOR , DIV , EQUAL , GE , GT , LAND , LE , LITERAL _ INSTANCEOF , LOR , LT , MINUS , MOD , NOT _ EQUAL , PLUS , QUESTION , SL , SR , STAR " / > <nl> + < property name = " tokens " value = " BAND , BOR , BSR , BXOR , DIV , EQUAL , GE , GT , LAND , LE , LITERAL _ INSTANCEOF , LOR , LT , MINUS , MOD , NOT _ EQUAL , PLUS , QUESTION , SL , SR , STAR , METHOD _ REF " / > <nl> < / module > <nl> < module name = " AnnotationLocation " > <nl> < property name = " tokens " value = " CLASS _ DEF , INTERFACE _ DEF , ENUM _ DEF , METHOD _ DEF , CTOR _ DEF " / >
NEAREST DIFF (one line): diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm <nl> index b2d7b6f . . bbedeaa 100644 <nl> - - - a / src / xdocs / index . xml . vm <nl> + + + b / src / xdocs / index . xml . vm <nl> @ @ - 99 , 6 + 99 , 23 @ @ <nl> <nl> < / section > <nl> <nl> + < section name = " Backport " > <nl> + < p > <nl> + Since Checkstyle 7 , some users have been unable to continue upgrading to newer versions <nl> + of the utility because of the new JDK 1 . 8 compile requirement . The development team doesn ' t <nl> + have the resources to keep updating the utility for older JDKs for those that can ' t <nl> + work with the latest version . <nl> + < / p > <nl> + < p > <nl> + However , some members of the community have created an unofficial backport of the latest <nl> + Checkstyle releases to be run with JDKs as old as 1 . 6 . If you wish to continue using new <nl> + Checkstyle versions on older JDKs , we recommend you either checkout the <nl> + < a href = " https : / / github . com / rnveach / checkstyle - backport - jre6 " > github site < / a > or the <nl> + < a href = " https : / / rnveach . github . io / checkstyle - backport - jre6 " > documentation site < / a > on how <nl> + to use the backport version of the utility , in place of the official Checkstyle version . <nl> + < / p > <nl> + < / section > <nl> + <nl> < section name = " Related Tools " > <nl> < p > <nl> Checkstyle is most useful if you integrate it in your build process or

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 index 908a2d5 . . 7cd7ae9 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 @ @ - 254 , 19 + 254 , 35 @ @ public class BaseCheckTestSupport { 
 * @ throws CheckstyleException if exception occurs during configuration loading . 
 * / 
 protected static Configuration getCheckConfig ( String checkName ) throws CheckstyleException { 
 - Configuration result = null ; 
 + final List < Configuration > configs = getCheckConfigs ( checkName ) ; 
 + if ( configs . isEmpty ( ) ) { 
 + return null ; 
 + } 
 + else { 
 + return configs . get ( 0 ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Returns a list of all { @ link Configuration } instances for the given check name . 
 + * This implementation uses { @ link BaseCheckTestSupport # getConfiguration ( ) } method inside . 
 + * @ param checkName check name . 
 + * @ return { @ link Configuration } instance for the given check name . 
 + * @ throws CheckstyleException if exception occurs during configuration loading . 
 + * / 
 + protected static List < Configuration > getCheckConfigs ( String checkName ) 
 + throws CheckstyleException { 
 + final List < Configuration > result = new ArrayList < > ( ) ; 
 for ( Configuration currentConfig : getConfiguration ( ) . getChildren ( ) ) { 
 if ( " TreeWalker " . equals ( currentConfig . getName ( ) ) ) { 
 for ( Configuration checkConfig : currentConfig . getChildren ( ) ) { 
 if ( checkName . equals ( checkConfig . getName ( ) ) ) { 
 - result = checkConfig ; 
 - break ; 
 + result . add ( checkConfig ) ; 
 } 
 } 
 } 
 else if ( checkName . equals ( currentConfig . getName ( ) ) ) { 
 - result = currentConfig ; 
 - break ; 
 + result . add ( currentConfig ) ; 
 } 
 } 
 return result ; 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java 
 index f1ece5a . . a561db8 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java 
 @ @ - 64 , 6 + 64 , 9 @ @ public class WhitespaceAroundTest extends BaseCheckTestSupport { 
 " 118 : 20 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " / " ) , 
 " 147 : 15 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " assert " ) , 
 " 150 : 20 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " : " ) , 
 + " 249 : 14 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " - > " ) , 
 + " 250 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " - > " ) , 
 + " 250 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " { " ) , 
 } ; 
 
 final String filePath = getPath ( " InputWhitespaceAroundBasic . java " ) ; 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java 
 index bab33e9 . . d85318e 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java 
 @ @ - 21 , 7 + 21 , 9 @ @ package com . google . checkstyle . test . chapter5naming . rule526parameternames ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . util . List ; 
 
 + import org . junit . Assert ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 @ @ - 32 , 8 + 34 , 10 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 public class ParameterNameTest extends BaseCheckTestSupport { 
 
 private static final String MSG _ KEY = " name . invalidPattern " ; 
 - private static String format ; 
 - private static Configuration checkConfig ; 
 + private static String privFormat ; 
 + private static String pubFormat ; 
 + private static Configuration privConfig ; 
 + private static Configuration pubConfig ; 
 
 @ Override 
 protected String getPath ( String fileName ) throws IOException { 
 @ @ - 43 , 36 + 47 , 55 @ @ public class ParameterNameTest extends BaseCheckTestSupport { 
 
 @ BeforeClass 
 public static void setConfigurationBuilder ( ) throws CheckstyleException { 
 - checkConfig = getCheckConfig ( " ParameterName " ) ; 
 - format = checkConfig . getAttribute ( " format " ) ; 
 + final List < Configuration > configs = getCheckConfigs ( " ParameterName " ) ; 
 + 
 + Assert . assertEquals ( configs . size ( ) , 2 ) ; 
 + 
 + privConfig = configs . get ( 0 ) ; 
 + Assert . assertEquals ( privConfig . getAttribute ( " excludeScope " ) , " public " ) ; 
 + privFormat = privConfig . getAttribute ( " format " ) ; 
 + 
 + pubConfig = configs . get ( 1 ) ; 
 + Assert . assertEquals ( pubConfig . getAttribute ( " scope " ) , " public " ) ; 
 + pubFormat = pubConfig . getAttribute ( " format " ) ; 
 + } 
 + 
 + @ Test 
 + public void privParameterNameTest ( ) throws Exception { 
 + 
 + final String [ ] expected = { 
 + " 8 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " $ arg1 " , privFormat ) , 
 + " 9 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " ar $ g2 " , privFormat ) , 
 + " 10 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " arg3 $ " , privFormat ) , 
 + " 11 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " a _ rg4 " , privFormat ) , 
 + " 12 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " _ arg5 " , privFormat ) , 
 + " 13 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " arg6 _ " , privFormat ) , 
 + " 14 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " aArg7 " , privFormat ) , 
 + " 15 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " aArg8 " , privFormat ) , 
 + " 16 : 21 : " + getCheckMessage ( privConfig . getMessages ( ) , MSG _ KEY , " aar _ g " , privFormat ) , 
 + } ; 
 + 
 + final String filePath = getPath ( " InputParameterNameSimplePriv . java " ) ; 
 + 
 + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 + verify ( privConfig , filePath , expected , warnList ) ; 
 } 
 
 @ Test 
 - public void parameterNameTest ( ) throws Exception { 
 + public void pubParameterNameTest ( ) throws Exception { 
 
 final String [ ] expected = { 
 - " 8 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " $ arg1 " , format ) , 
 - " 9 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " ar $ g2 " , format ) , 
 - " 10 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " arg3 $ " , format ) , 
 - " 11 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " a _ rg4 " , format ) , 
 - " 12 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " _ arg5 " , format ) , 
 - " 13 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " arg6 _ " , format ) , 
 - " 14 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " aArg7 " , format ) , 
 - " 15 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " aArg8 " , format ) , 
 - " 16 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " aar _ g " , format ) , 
 - " 26 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " bB " , format ) , 
 - " 49 : 22 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " llll _ llll " , format ) , 
 - " 50 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " bB " , format ) , 
 - " 60 : 23 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , 
 - " 63 : 24 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , 
 - " 69 : 31 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , 
 - " 74 : 41 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , 
 - " 77 : 44 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , 
 + " 10 : 21 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " bB " , pubFormat ) , 
 + " 33 : 22 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " llll _ llll " , pubFormat ) , 
 + " 34 : 21 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " bB " , pubFormat ) , 
 + " 44 : 23 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " p " , pubFormat ) , 
 + " 53 : 31 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " p " , pubFormat ) , 
 + " 58 : 44 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " p " , pubFormat ) , 
 } ; 
 
 - final String filePath = getPath ( " InputParameterNameSimple . java " ) ; 
 + final String filePath = getPath ( " InputParameterNameSimplePub . java " ) ; 
 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 - verify ( checkConfig , filePath , expected , warnList ) ; 
 + verify ( pubConfig , filePath , expected , warnList ) ; 
 } 
 } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputWhitespaceAroundBasic . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputWhitespaceAroundBasic . java 
 index 28ddb78 . . 4a481b1 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputWhitespaceAroundBasic . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / InputWhitespaceAroundBasic . java 
 @ @ - 236 , 3 + 236 , 24 @ @ class SpecialCasesInForLoop 
 return null ; 
 } 
 } 
 + 
 + / * * 
 + * Operators mentioned in Google Coding Standards 2016 - 07 - 12 
 + * / 
 + class NewGoogleOperators 
 + { 
 + NewGoogleOperators ( ) 
 + { 
 + Runnable l ; 
 + 
 + l = ( ) - > { } ; / / warn 
 + l = ( ) - > { } ; / / warn 
 + l = ( ) - > { } ; 
 + 
 + java . util . Arrays . sort ( null , String : : compareToIgnoreCase ) ; 
 + java . util . Arrays . sort ( null , String : : compareToIgnoreCase ) ; 
 + 
 + new Object ( ) . toString ( ) ; 
 + new Object ( ) . toString ( ) ; 
 + } 
 + } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java 
 deleted file mode 100644 
 index 6f7bf9c . . 0000000 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java 
 + + + / dev / null 
 @ @ - 1 , 78 + 0 , 0 @ @ 
 - package com . google . checkstyle . test . chapter5naming . rule526parameternames ; 
 - 
 - import java . io . * ; 
 - 
 - final class InputSimple 
 - { 
 - void toManyArgs ( 
 - 	 	 int $ arg1 , / / warn 
 - 	 	 int ar $ g2 , / / warn 
 - 	 	 int arg3 $ , / / warn 
 - 	 	 int a _ rg4 , / / warn 
 - 	 	 int _ arg5 , / / warn 
 - 	 	 int arg6 _ , / / warn 
 - 	 	 int aArg7 , / / warn 
 - 	 	 int aArg8 , / / warn 
 - 	 	 int aar _ g ) / / warn 
 - 
 - { } 
 - } 
 - 
 - class InputSimple2 
 - { 
 - 
 - / * * Some more Javadoc . * / 
 - public void doSomething ( int aaa , int abn , String aaA , 
 - boolean bB ) / / warn 
 - { 
 - for ( Object O : new java . util . ArrayList ( ) ) 
 - { 
 - 
 - } 
 - } 
 - } 
 - 
 - 
 - / * * Test enum for member naming check * / 
 - enum MyEnum1 
 - { 
 - / * * ABC constant * / 
 - ABC , 
 - 
 - / * * XYZ constant * / 
 - XYZ ; 
 - 
 - / * * Should be mSomeMemeber * / 
 - private int someMember ; 
 - 
 - public void doEnum ( int aaaL , 
 - 	 	 long llll _ llll , / / warn 
 - boolean bB ) { } / / warn 
 - } 
 - 
 - / * * Test public vs private method parameter naming check . * / 
 - class InputParameterNameSimple 
 - { 
 - / * * Valid : public and more than one char Long * / 
 - public void a ( int par , int parA ) { } 
 - 
 - / * * Invalid : public and one char long * / 
 - public void b ( int p ) { } / / warn 
 - 
 - / * * Invalid : private and one char long . * / 
 - private void c ( int p ) { } / / warn 
 - 
 - / * * Holder for inner anonymous classes * / 
 - private void d ( int param ) { 
 - new Object ( ) { 
 - / * * Invalid : public and one char long . * / 
 - public void e ( int p ) { } / / warn 
 - } ; 
 - } 
 - 
 - / * * Invalid : public constructor and one char long * / 
 - public InputParameterNameSimple ( int p ) { } / / warn 
 - 
 - / * * Invalid : private constructor and one char long * / 
 - private InputParameterNameSimple ( float p ) { } / / warn 
 - } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePriv . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePriv . java 
 new file mode 100644 
 index 0000000 . . dced1c3 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePriv . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . google . checkstyle . test . chapter5naming . rule526parameternames ; 
 + 
 + import java . io . * ; 
 + 
 + final class InputSimple 
 + { 
 + void toManyArgs ( 
 + 	 	 int $ arg1 , / / warn 
 + 	 	 int ar $ g2 , / / warn 
 + 	 	 int arg3 $ , / / warn 
 + 	 	 int a _ rg4 , / / warn 
 + 	 	 int _ arg5 , / / warn 
 + 	 	 int arg6 _ , / / warn 
 + 	 	 int aArg7 , / / warn 
 + 	 	 int aArg8 , / / warn 
 + 	 	 int aar _ g ) / / warn 
 + 
 + { } 
 + } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePub . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePub . java 
 new file mode 100644 
 index 0000000 . . 0f39b79 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePub . java 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + package com . google . checkstyle . test . chapter5naming . rule526parameternames ; 
 + 
 + import java . io . * ; 
 + 
 + class InputSimple2 
 + { 
 + 
 + / * * Some more Javadoc . * / 
 + public void doSomething ( int aaa , int abn , String aaA , 
 + boolean bB ) / / warn 
 + { 
 + for ( Object O : new java . util . ArrayList ( ) ) 
 + { 
 + 
 + } 
 + } 
 + } 
 + 
 + 
 + / * * Test enum for member naming check * / 
 + enum MyEnum1 
 + { 
 + / * * ABC constant * / 
 + ABC , 
 + 
 + / * * XYZ constant * / 
 + XYZ ; 
 + 
 + / * * Should be mSomeMemeber * / 
 + private int someMember ; 
 + 
 + public void doEnum ( int aaaL , 
 + 	 	 long llll _ llll , / / warn 
 + boolean bB ) { } / / warn 
 + } 
 + 
 + / * * Test public vs private method parameter naming check . * / 
 + class InputParameterNameSimplePub 
 + { 
 + / * * Valid : public and more than one char Long * / 
 + public void a ( int par , int parA ) { } 
 + 
 + / * * Invalid : public and one char long * / 
 + public void b ( int p ) { } / / warn 
 + 
 + / * * Valid : private and one char long . * / 
 + private void c ( int p ) { } 
 + 
 + / * * Holder for inner anonymous classes * / 
 + private void d ( int param ) { 
 + new Object ( ) { 
 + / * * Invalid : public and one char long . * / 
 + public void e ( int p ) { } / / warn 
 + } ; 
 + } 
 + 
 + / * * Invalid : public constructor and one char long * / 
 + public InputParameterNameSimplePub ( int p ) { } / / warn 
 + 
 + / * * Valid : private constructor and one char long * / 
 + private InputParameterNameSimplePub ( float p ) { } 
 + } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter6programpractice / rule62donotignoreexceptions / InputEmptyBlockCatch . java b / src / it / resources / com / google / checkstyle / test / chapter6programpractice / rule62donotignoreexceptions / InputEmptyBlockCatch . java 
 index f5efc09 . . e6c4d05 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter6programpractice / rule62donotignoreexceptions / InputEmptyBlockCatch . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter6programpractice / rule62donotignoreexceptions / InputEmptyBlockCatch . java 
 @ @ - 72 , 4 + 72 , 20 @ @ class Catch { 
 finally { } / / warn 
 } 
 } ; 
 + 
 + void bar1 ( ) { 
 + try { 
 + if ( ! flag ) { 
 + doSm ( ) ; 
 + } 
 + } catch ( Exception expected ) { } 
 + } 
 + 
 + void bar2 ( ) { 
 + try { 
 + if ( ! flag ) { 
 + doSm ( ) ; 
 + } 
 + } catch ( Exception expected ) { } 
 + } 
 } 
 diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml 
 index 2c06945 . . 925c76c 100644 
 - - - a / src / main / resources / google _ checks . xml 
 + + + b / src / main / resources / google _ checks . xml 
 @ @ - 102 , 7 + 102 , 14 @ @ 
 value = " Member name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > 
 < / module > 
 < module name = " ParameterName " > 
 + < property name = " format " value = " ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ " / > 
 + < property name = " excludeScope " value = " public " / > 
 + < message key = " name . invalidPattern " 
 + value = " Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > 
 + < / module > 
 + < module name = " ParameterName " > 
 < property name = " format " value = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " / > 
 + < property name = " scope " value = " public " / > 
 < message key = " name . invalidPattern " 
 value = " Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > 
 < / module > 
 @ @ - 166 , 7 + 173 , 7 @ @ 
 < module name = " MethodParamPad " / > 
 < module name = " OperatorWrap " > 
 < property name = " option " value = " NL " / > 
 - < property name = " tokens " value = " BAND , BOR , BSR , BXOR , DIV , EQUAL , GE , GT , LAND , LE , LITERAL _ INSTANCEOF , LOR , LT , MINUS , MOD , NOT _ EQUAL , PLUS , QUESTION , SL , SR , STAR " / > 
 + < property name = " tokens " value = " BAND , BOR , BSR , BXOR , DIV , EQUAL , GE , GT , LAND , LE , LITERAL _ INSTANCEOF , LOR , LT , MINUS , MOD , NOT _ EQUAL , PLUS , QUESTION , SL , SR , STAR , METHOD _ REF " / > 
 < / module > 
 < module name = " AnnotationLocation " > 
 < property name = " tokens " value = " CLASS _ DEF , INTERFACE _ DEF , ENUM _ DEF , METHOD _ DEF , CTOR _ DEF " / >

NEAREST DIFF:
diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm 
 index b2d7b6f . . bbedeaa 100644 
 - - - a / src / xdocs / index . xml . vm 
 + + + b / src / xdocs / index . xml . vm 
 @ @ - 99 , 6 + 99 , 23 @ @ 
 
 < / section > 
 
 + < section name = " Backport " > 
 + < p > 
 + Since Checkstyle 7 , some users have been unable to continue upgrading to newer versions 
 + of the utility because of the new JDK 1 . 8 compile requirement . The development team doesn ' t 
 + have the resources to keep updating the utility for older JDKs for those that can ' t 
 + work with the latest version . 
 + < / p > 
 + < p > 
 + However , some members of the community have created an unofficial backport of the latest 
 + Checkstyle releases to be run with JDKs as old as 1 . 6 . If you wish to continue using new 
 + Checkstyle versions on older JDKs , we recommend you either checkout the 
 + < a href = " https : / / github . com / rnveach / checkstyle - backport - jre6 " > github site < / a > or the 
 + < a href = " https : / / rnveach . github . io / checkstyle - backport - jre6 " > documentation site < / a > on how 
 + to use the backport version of the utility , in place of the official Checkstyle version . 
 + < / p > 
 + < / section > 
 + 
 < section name = " Related Tools " > 
 < p > 
 Checkstyle is most useful if you integrate it in your build process or
