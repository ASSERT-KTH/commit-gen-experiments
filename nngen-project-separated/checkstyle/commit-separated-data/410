BLEU SCORE: 0.018738883683389617

TEST MSG: Issue # 5427 : AvoidEscapedUnicodeCharactersCheck : re - organize regular expressions
GENERATED MSG: Implemented UniqueProperties check

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> index 43ef542 . . 3fdacaa 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> @ @ - 129 , 39 + 129 , 104 @ @ public class AvoidEscapedUnicodeCharactersCheck <nl> * Appendix : Control characters < / a > <nl> * / <nl> private static final Pattern UNICODE _ CONTROL = Pattern . compile ( " \ \ \ \ [ uU ] " <nl> - + " ( 00 [ 0 - 1 ] [ 0 - 9A - Fa - f ] | 00 [ 8 - 9 ] [ 0 - 9A - Fa - f ] | 00 [ aA ] [ dD ] | 034 [ fF ] | 070 [ fF ] " <nl> - + " | 180 [ eE ] | 200 [ b - fB - F ] | 202 [ a - eA - E ] | 206 [ 0 - 4a - fA - F ] " <nl> - + " | [ fF ] { 3 } [ 9a - bA - B ] | [ fF ] [ eE ] [ fF ] { 2 } ) " ) ; <nl> + + " ( 00 [ 0 - 1 ] [ 0 - 9A - Fa - f ] " <nl> + + " | 00 [ 8 - 9 ] [ 0 - 9A - Fa - f ] " <nl> + + " | 00 [ aA ] [ dD ] " <nl> + + " | 034 [ fF ] " <nl> + + " | 070 [ fF ] " <nl> + + " | 180 [ eE ] " <nl> + + " | 200 [ b - fB - F ] " <nl> + + " | 202 [ a - eA - E ] " <nl> + + " | 206 [ 0 - 4a - fA - F ] " <nl> + + " | [ fF ] { 3 } [ 9a - bA - B ] " <nl> + + " | [ fF ] [ eE ] [ fF ] { 2 } ) " ) ; <nl> <nl> / * * Regular expression for all escaped chars . * / <nl> - private static final Pattern ALL _ ESCAPED _ CHARS = <nl> - Pattern . compile ( " ^ ( ( \ \ \ \ u ) [ a - fA - F0 - 9 ] { 4 } " <nl> - + " | \ \ \ \ b | \ \ \ \ t | \ \ \ \ n | \ \ \ \ f | \ \ \ \ r | \ \ \ \ | \ " | \ ' ) + $ " ) ; <nl> + private static final Pattern ALL _ ESCAPED _ CHARS = Pattern . compile ( " ^ ( ( \ \ \ \ u ) [ a - fA - F0 - 9 ] { 4 } " <nl> + + " | \ " " <nl> + + " | \ ' " <nl> + + " | \ \ \ \ " <nl> + + " | \ \ \ \ b " <nl> + + " | \ \ \ \ f " <nl> + + " | \ \ \ \ n " <nl> + + " | \ \ \ \ r " <nl> + + " | \ \ \ \ t " <nl> + + " ) + $ " ) ; <nl> <nl> / * * Regular expression for escaped backslash . * / <nl> private static final Pattern ESCAPED _ BACKSLASH = Pattern . compile ( " \ \ \ \ \ \ \ \ " ) ; <nl> <nl> / * * Regular expression for non - printable unicode chars . * / <nl> - private static final Pattern NON _ PRINTABLE _ CHARS = Pattern . compile ( " \ \ \ \ u1680 | \ \ \ \ u2028 " <nl> - + " | \ \ \ \ u2029 | \ \ \ \ u205 [ fF ] | \ \ \ \ u3000 | \ \ \ \ u2007 | \ \ \ \ u2000 | \ \ \ \ u200 [ aA ] " <nl> - + " | \ \ \ \ u007 [ fF ] | \ \ \ \ u009 [ fF ] | \ \ \ \ u [ fF ] { 4 } | \ \ \ \ u00 [ aA ] [ dD ] " <nl> - + " | \ \ \ \ u0600 | \ \ \ \ u061 [ cC ] | \ \ \ \ u06 [ dD ] { 2 } | \ \ \ \ u070 [ fF ] | \ \ \ \ u180 [ eE ] " <nl> - + " | \ \ \ \ u2066 | \ \ \ \ u2067 | \ \ \ \ u2068 | \ \ \ \ u2069 " <nl> - + " | \ \ \ \ u206 [ aA ] | \ \ \ \ u [ dD ] 800 | \ \ \ \ u [ fF ] [ eE ] [ fF ] { 2 } | \ \ \ \ u [ fF ] { 3 } 9 " <nl> - + " | \ \ \ \ u [ fF ] { 3 } [ aA ] | \ \ \ \ u0020 | \ \ \ \ u00 [ aA ] 0 | \ \ \ \ u0604 " <nl> + private static final Pattern NON _ PRINTABLE _ CHARS = Pattern . compile ( " \ \ \ \ u0000 " <nl> + + " | \ \ \ \ u0009 " <nl> + + " | \ \ \ \ u000 [ bB ] " <nl> + + " | \ \ \ \ u000 [ cC ] " <nl> + + " | \ \ \ \ u0020 " <nl> + + " | \ \ \ \ u007 [ fF ] " <nl> + + " | \ \ \ \ u0085 " <nl> + + " | \ \ \ \ u009 [ fF ] " <nl> + + " | \ \ \ \ u00 [ aA ] 0 " <nl> + + " | \ \ \ \ u00 [ aA ] [ dD ] " <nl> + + " | \ \ \ \ u04 [ fF ] 9 " <nl> + + " | \ \ \ \ u05 [ bB ] [ eE ] " <nl> + + " | \ \ \ \ u05 [ dD ] 0 " <nl> + + " | \ \ \ \ u05 [ eE ] [ aA ] " <nl> + + " | \ \ \ \ u05 [ fF ] 3 " <nl> + + " | \ \ \ \ u05 [ fF ] 4 " <nl> + + " | \ \ \ \ u0600 " <nl> + + " | \ \ \ \ u0604 " <nl> + + " | \ \ \ \ u061 [ cC ] " <nl> + + " | \ \ \ \ u06 [ dD ] { 2 } " <nl> + + " | \ \ \ \ u06 [ fF ] { 2 } " <nl> + + " | \ \ \ \ u070 [ fF ] " <nl> + + " | \ \ \ \ u0750 " <nl> + + " | \ \ \ \ u077 [ fF ] " <nl> + + " | \ \ \ \ u0 [ eE ] 00 " <nl> + + " | \ \ \ \ u0 [ eE ] 7 [ fF ] " <nl> + + " | \ \ \ \ u1680 " <nl> + + " | \ \ \ \ u180 [ eE ] " <nl> + + " | \ \ \ \ u1 [ eE ] 00 " <nl> + + " | \ \ \ \ u2000 " <nl> + + " | \ \ \ \ u2001 " <nl> + + " | \ \ \ \ u2002 " <nl> + + " | \ \ \ \ u2003 " <nl> + + " | \ \ \ \ u2004 " <nl> + + " | \ \ \ \ u2005 " <nl> + + " | \ \ \ \ u2006 " <nl> + + " | \ \ \ \ u2007 " <nl> + + " | \ \ \ \ u2008 " <nl> + + " | \ \ \ \ u2009 " <nl> + + " | \ \ \ \ u200 [ aA ] " <nl> + " | \ \ \ \ u200 [ fF ] " <nl> - + " | \ \ \ \ u202 [ fF ] | \ \ \ \ u2064 | \ \ \ \ u206 [ fF ] " <nl> - + " | \ \ \ \ u [ fF ] 8 [ fF ] { 2 } | \ \ \ \ u [ fF ] { 3 } [ bB ] " <nl> - + " | \ \ \ \ u05 [ dD ] 0 | \ \ \ \ u05 [ fF ] 3 | \ \ \ \ u0750 | \ \ \ \ u0 [ eE ] 00 | \ \ \ \ u1 [ eE ] 00 " <nl> - + " | \ \ \ \ u2100 | \ \ \ \ u [ fF ] [ bB ] 50 | \ \ \ \ u [ fF ] [ eE ] 70 | \ \ \ \ u [ fF ] { 2 } 61 | \ \ \ \ u04 [ fF ] 9 " <nl> - + " | \ \ \ \ u05 [ bB ] [ eE ] | \ \ \ \ u05 [ eE ] [ aA ] | \ \ \ \ u05 [ fF ] 4 | \ \ \ \ u06 [ fF ] { 2 } " <nl> - + " | \ \ \ \ u077 [ fF ] | \ \ \ \ u0 [ eE ] 7 [ fF ] | \ \ \ \ u20 [ aA ] [ fF ] | \ \ \ \ u213 [ aA ] | \ \ \ \ u0000 " <nl> - + " | \ \ \ \ u [ fF ] [ dD ] [ fF ] { 2 } | \ \ \ \ u [ fF ] { 2 } [ dD ] [ cC ] " <nl> - + " | \ \ \ \ u2002 | \ \ \ \ u0085 | \ \ \ \ u2005 | \ \ \ \ u000 [ bB ] " <nl> - + " | \ \ \ \ u2008 | \ \ \ \ u2003 | \ \ \ \ u0009 | \ \ \ \ u2006 " <nl> - + " | \ \ \ \ u2001 | \ \ \ \ u000 [ cC ] | \ \ \ \ u2009 | \ \ \ \ u2004 " <nl> + " | \ \ \ \ u2025 " <nl> - + " | \ \ \ \ u [ fF ] { 2 } 0 [ eE ] " ) ; <nl> + + " | \ \ \ \ u2028 " <nl> + + " | \ \ \ \ u2029 " <nl> + + " | \ \ \ \ u202 [ fF ] " <nl> + + " | \ \ \ \ u205 [ fF ] " <nl> + + " | \ \ \ \ u2064 " <nl> + + " | \ \ \ \ u2066 " <nl> + + " | \ \ \ \ u2067 " <nl> + + " | \ \ \ \ u2068 " <nl> + + " | \ \ \ \ u2069 " <nl> + + " | \ \ \ \ u206 [ aA ] " <nl> + + " | \ \ \ \ u206 [ fF ] " <nl> + + " | \ \ \ \ u20 [ aA ] [ fF ] " <nl> + + " | \ \ \ \ u2100 " <nl> + + " | \ \ \ \ u213 [ aA ] " <nl> + + " | \ \ \ \ u3000 " <nl> + + " | \ \ \ \ u [ dD ] 800 " <nl> + + " | \ \ \ \ u [ fF ] 8 [ fF ] { 2 } " <nl> + + " | \ \ \ \ u [ fF ] [ bB ] 50 " <nl> + + " | \ \ \ \ u [ fF ] [ dD ] [ fF ] { 2 } " <nl> + + " | \ \ \ \ u [ fF ] [ eE ] 70 " <nl> + + " | \ \ \ \ u [ fF ] [ eE ] [ fF ] { 2 } " <nl> + + " | \ \ \ \ u [ fF ] { 2 } 0 [ eE ] " <nl> + + " | \ \ \ \ u [ fF ] { 2 } 61 " <nl> + + " | \ \ \ \ u [ fF ] { 2 } [ dD ] [ cC ] " <nl> + + " | \ \ \ \ u [ fF ] { 3 } 9 " <nl> + + " | \ \ \ \ u [ fF ] { 3 } [ aA ] " <nl> + + " | \ \ \ \ u [ fF ] { 3 } [ bB ] " <nl> + + " | \ \ \ \ u [ fF ] { 4 } " ) ; <nl> <nl> / * * Cpp style comments . * / <nl> private Map < Integer , TextBlock > singlelineComments ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> index dfd7c54 . . 716a2ca 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> @ @ - 22 , 9 + 22 , 12 @ @ package com . puppycrawl . tools . checkstyle . checks ; <nl> import static com . puppycrawl . tools . checkstyle . checks . AvoidEscapedUnicodeCharactersCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> + import java . lang . reflect . Field ; <nl> import java . lang . reflect . Method ; <nl> import java . util . Arrays ; <nl> + import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> import java . util . stream . IntStream ; <nl> <nl> @ @ - 34 , 6 + 37 , 7 @ @ import org . powermock . reflect . Whitebox ; <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . internal . utils . TestUtil ; <nl> <nl> public class AvoidEscapedUnicodeCharactersCheckTest extends AbstractModuleTestSupport { <nl> <nl> @ @ - 378 , 6 + 382 , 58 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends AbstractModuleTestSu <nl> assertEquals ( " Unexpected matches count " , 1 , actual ) ; <nl> } <nl> <nl> + / * * <nl> + * Testing , that all elements in the constant NON _ PRINTABLE _ CHARS are sorted . <nl> + * This is very convenient for the sake of maintainability . <nl> + * <nl> + * @ throws Exception when code tested throws some exception <nl> + * / <nl> + @ Test <nl> + public void testNonPrintableCharsAreSorted ( ) throws Exception { <nl> + / / Getting Field Value via Reflection , becaues the field is private <nl> + final Field field = TestUtil . getClassDeclaredField ( <nl> + AvoidEscapedUnicodeCharactersCheck . class , " NON _ PRINTABLE _ CHARS " ) ; <nl> + field . setAccessible ( true ) ; <nl> + String expression = ( ( Pattern ) field . get ( null ) ) . pattern ( ) ; <nl> + <nl> + / / Replacing expressions like " \ \ u000 [ bB ] " with " \ \ u000B " <nl> + final String [ ] charExpressions = { " Aa " , " Bb " , " Cc " , " Dd " , " Ee " , " Ff " } ; <nl> + for ( String charExpression : charExpressions ) { <nl> + final String regex = " \ \ [ [ " + charExpression + " ] { 2 } ] " ; <nl> + expression = expression . replaceAll ( regex , charExpression . substring ( 0 , 1 ) ) ; <nl> + } <nl> + <nl> + / / Replacing duplications like " \ \ uF { 3 } 9 " with " \ \ uFFF9 " <nl> + for ( int i = 4 ; i > 1 ; i - - ) { <nl> + final String regex = " ( [ A - F ] ) \ \ { " + i + " } " ; <nl> + String replacement = " $ 1 $ 1 { " + ( i - 1 ) + " } " ; <nl> + if ( i = = 2 ) { <nl> + replacement = " $ 1 $ 1 " ; <nl> + } <nl> + expression = expression . replaceAll ( regex , replacement ) ; <nl> + } <nl> + <nl> + / / Verifying character order <nl> + final String [ ] expressionParts = expression . split ( " \ \ | " ) ; <nl> + final Pattern unicodeCharPattern = Pattern . compile ( " ^ \ \ \ \ \ \ \ \ u [ 0 - 9A - F ] { 4 } $ " ) ; <nl> + String lastChar = null ; <nl> + for ( int i = 0 ; i < expressionParts . length ; i + + ) { <nl> + final String currentChar = expressionParts [ i ] ; <nl> + final Matcher matcher = unicodeCharPattern . matcher ( currentChar ) ; <nl> + if ( ! matcher . matches ( ) ) { <nl> + final String message = " Character ' " + currentChar + " ' ( at position " + i <nl> + + " ) doesn ' t match the pattern " ; <nl> + assertTrue ( message , matcher . matches ( ) ) ; <nl> + } <nl> + if ( lastChar ! = null ) { <nl> + final String message = " Character ' " + lastChar + " ' should be after ' " <nl> + + currentChar + " ' , position : " + i ; <nl> + assertTrue ( message , lastChar . compareTo ( currentChar ) < 0 ) ; <nl> + } <nl> + lastChar = currentChar ; <nl> + } <nl> + } <nl> + <nl> private static boolean isControlCharacter ( final int character ) { <nl> return Arrays . binarySearch ( C0 _ CONTROL _ CHARACTER _ INDICES , character ) > = 0 <nl> | | Arrays . binarySearch ( C1 _ CONTROL _ CHARACTER _ INDICES , character ) > = 0
NEAREST DIFF (one line): diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index ae832bc . . 1dead6f 100755 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 49 , 12 + 49 , 6 @ @ <nl> Thanks to Travis Schneeberger for patch # 1921815 ( bug # 1649038 ) . <nl> < / li > <nl> < / ul > <nl> - < p > Notes : < / p > <nl> - < ul > <nl> - < li > <nl> - . . . <nl> - < / li > <nl> - < / ul > <nl> < / section > <nl> <nl> < section name = " Release 5 . 4 " >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 index 43ef542 . . 3fdacaa 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 @ @ - 129 , 39 + 129 , 104 @ @ public class AvoidEscapedUnicodeCharactersCheck 
 * Appendix : Control characters < / a > 
 * / 
 private static final Pattern UNICODE _ CONTROL = Pattern . compile ( " \ \ \ \ [ uU ] " 
 - + " ( 00 [ 0 - 1 ] [ 0 - 9A - Fa - f ] | 00 [ 8 - 9 ] [ 0 - 9A - Fa - f ] | 00 [ aA ] [ dD ] | 034 [ fF ] | 070 [ fF ] " 
 - + " | 180 [ eE ] | 200 [ b - fB - F ] | 202 [ a - eA - E ] | 206 [ 0 - 4a - fA - F ] " 
 - + " | [ fF ] { 3 } [ 9a - bA - B ] | [ fF ] [ eE ] [ fF ] { 2 } ) " ) ; 
 + + " ( 00 [ 0 - 1 ] [ 0 - 9A - Fa - f ] " 
 + + " | 00 [ 8 - 9 ] [ 0 - 9A - Fa - f ] " 
 + + " | 00 [ aA ] [ dD ] " 
 + + " | 034 [ fF ] " 
 + + " | 070 [ fF ] " 
 + + " | 180 [ eE ] " 
 + + " | 200 [ b - fB - F ] " 
 + + " | 202 [ a - eA - E ] " 
 + + " | 206 [ 0 - 4a - fA - F ] " 
 + + " | [ fF ] { 3 } [ 9a - bA - B ] " 
 + + " | [ fF ] [ eE ] [ fF ] { 2 } ) " ) ; 
 
 / * * Regular expression for all escaped chars . * / 
 - private static final Pattern ALL _ ESCAPED _ CHARS = 
 - Pattern . compile ( " ^ ( ( \ \ \ \ u ) [ a - fA - F0 - 9 ] { 4 } " 
 - + " | \ \ \ \ b | \ \ \ \ t | \ \ \ \ n | \ \ \ \ f | \ \ \ \ r | \ \ \ \ | \ " | \ ' ) + $ " ) ; 
 + private static final Pattern ALL _ ESCAPED _ CHARS = Pattern . compile ( " ^ ( ( \ \ \ \ u ) [ a - fA - F0 - 9 ] { 4 } " 
 + + " | \ " " 
 + + " | \ ' " 
 + + " | \ \ \ \ " 
 + + " | \ \ \ \ b " 
 + + " | \ \ \ \ f " 
 + + " | \ \ \ \ n " 
 + + " | \ \ \ \ r " 
 + + " | \ \ \ \ t " 
 + + " ) + $ " ) ; 
 
 / * * Regular expression for escaped backslash . * / 
 private static final Pattern ESCAPED _ BACKSLASH = Pattern . compile ( " \ \ \ \ \ \ \ \ " ) ; 
 
 / * * Regular expression for non - printable unicode chars . * / 
 - private static final Pattern NON _ PRINTABLE _ CHARS = Pattern . compile ( " \ \ \ \ u1680 | \ \ \ \ u2028 " 
 - + " | \ \ \ \ u2029 | \ \ \ \ u205 [ fF ] | \ \ \ \ u3000 | \ \ \ \ u2007 | \ \ \ \ u2000 | \ \ \ \ u200 [ aA ] " 
 - + " | \ \ \ \ u007 [ fF ] | \ \ \ \ u009 [ fF ] | \ \ \ \ u [ fF ] { 4 } | \ \ \ \ u00 [ aA ] [ dD ] " 
 - + " | \ \ \ \ u0600 | \ \ \ \ u061 [ cC ] | \ \ \ \ u06 [ dD ] { 2 } | \ \ \ \ u070 [ fF ] | \ \ \ \ u180 [ eE ] " 
 - + " | \ \ \ \ u2066 | \ \ \ \ u2067 | \ \ \ \ u2068 | \ \ \ \ u2069 " 
 - + " | \ \ \ \ u206 [ aA ] | \ \ \ \ u [ dD ] 800 | \ \ \ \ u [ fF ] [ eE ] [ fF ] { 2 } | \ \ \ \ u [ fF ] { 3 } 9 " 
 - + " | \ \ \ \ u [ fF ] { 3 } [ aA ] | \ \ \ \ u0020 | \ \ \ \ u00 [ aA ] 0 | \ \ \ \ u0604 " 
 + private static final Pattern NON _ PRINTABLE _ CHARS = Pattern . compile ( " \ \ \ \ u0000 " 
 + + " | \ \ \ \ u0009 " 
 + + " | \ \ \ \ u000 [ bB ] " 
 + + " | \ \ \ \ u000 [ cC ] " 
 + + " | \ \ \ \ u0020 " 
 + + " | \ \ \ \ u007 [ fF ] " 
 + + " | \ \ \ \ u0085 " 
 + + " | \ \ \ \ u009 [ fF ] " 
 + + " | \ \ \ \ u00 [ aA ] 0 " 
 + + " | \ \ \ \ u00 [ aA ] [ dD ] " 
 + + " | \ \ \ \ u04 [ fF ] 9 " 
 + + " | \ \ \ \ u05 [ bB ] [ eE ] " 
 + + " | \ \ \ \ u05 [ dD ] 0 " 
 + + " | \ \ \ \ u05 [ eE ] [ aA ] " 
 + + " | \ \ \ \ u05 [ fF ] 3 " 
 + + " | \ \ \ \ u05 [ fF ] 4 " 
 + + " | \ \ \ \ u0600 " 
 + + " | \ \ \ \ u0604 " 
 + + " | \ \ \ \ u061 [ cC ] " 
 + + " | \ \ \ \ u06 [ dD ] { 2 } " 
 + + " | \ \ \ \ u06 [ fF ] { 2 } " 
 + + " | \ \ \ \ u070 [ fF ] " 
 + + " | \ \ \ \ u0750 " 
 + + " | \ \ \ \ u077 [ fF ] " 
 + + " | \ \ \ \ u0 [ eE ] 00 " 
 + + " | \ \ \ \ u0 [ eE ] 7 [ fF ] " 
 + + " | \ \ \ \ u1680 " 
 + + " | \ \ \ \ u180 [ eE ] " 
 + + " | \ \ \ \ u1 [ eE ] 00 " 
 + + " | \ \ \ \ u2000 " 
 + + " | \ \ \ \ u2001 " 
 + + " | \ \ \ \ u2002 " 
 + + " | \ \ \ \ u2003 " 
 + + " | \ \ \ \ u2004 " 
 + + " | \ \ \ \ u2005 " 
 + + " | \ \ \ \ u2006 " 
 + + " | \ \ \ \ u2007 " 
 + + " | \ \ \ \ u2008 " 
 + + " | \ \ \ \ u2009 " 
 + + " | \ \ \ \ u200 [ aA ] " 
 + " | \ \ \ \ u200 [ fF ] " 
 - + " | \ \ \ \ u202 [ fF ] | \ \ \ \ u2064 | \ \ \ \ u206 [ fF ] " 
 - + " | \ \ \ \ u [ fF ] 8 [ fF ] { 2 } | \ \ \ \ u [ fF ] { 3 } [ bB ] " 
 - + " | \ \ \ \ u05 [ dD ] 0 | \ \ \ \ u05 [ fF ] 3 | \ \ \ \ u0750 | \ \ \ \ u0 [ eE ] 00 | \ \ \ \ u1 [ eE ] 00 " 
 - + " | \ \ \ \ u2100 | \ \ \ \ u [ fF ] [ bB ] 50 | \ \ \ \ u [ fF ] [ eE ] 70 | \ \ \ \ u [ fF ] { 2 } 61 | \ \ \ \ u04 [ fF ] 9 " 
 - + " | \ \ \ \ u05 [ bB ] [ eE ] | \ \ \ \ u05 [ eE ] [ aA ] | \ \ \ \ u05 [ fF ] 4 | \ \ \ \ u06 [ fF ] { 2 } " 
 - + " | \ \ \ \ u077 [ fF ] | \ \ \ \ u0 [ eE ] 7 [ fF ] | \ \ \ \ u20 [ aA ] [ fF ] | \ \ \ \ u213 [ aA ] | \ \ \ \ u0000 " 
 - + " | \ \ \ \ u [ fF ] [ dD ] [ fF ] { 2 } | \ \ \ \ u [ fF ] { 2 } [ dD ] [ cC ] " 
 - + " | \ \ \ \ u2002 | \ \ \ \ u0085 | \ \ \ \ u2005 | \ \ \ \ u000 [ bB ] " 
 - + " | \ \ \ \ u2008 | \ \ \ \ u2003 | \ \ \ \ u0009 | \ \ \ \ u2006 " 
 - + " | \ \ \ \ u2001 | \ \ \ \ u000 [ cC ] | \ \ \ \ u2009 | \ \ \ \ u2004 " 
 + " | \ \ \ \ u2025 " 
 - + " | \ \ \ \ u [ fF ] { 2 } 0 [ eE ] " ) ; 
 + + " | \ \ \ \ u2028 " 
 + + " | \ \ \ \ u2029 " 
 + + " | \ \ \ \ u202 [ fF ] " 
 + + " | \ \ \ \ u205 [ fF ] " 
 + + " | \ \ \ \ u2064 " 
 + + " | \ \ \ \ u2066 " 
 + + " | \ \ \ \ u2067 " 
 + + " | \ \ \ \ u2068 " 
 + + " | \ \ \ \ u2069 " 
 + + " | \ \ \ \ u206 [ aA ] " 
 + + " | \ \ \ \ u206 [ fF ] " 
 + + " | \ \ \ \ u20 [ aA ] [ fF ] " 
 + + " | \ \ \ \ u2100 " 
 + + " | \ \ \ \ u213 [ aA ] " 
 + + " | \ \ \ \ u3000 " 
 + + " | \ \ \ \ u [ dD ] 800 " 
 + + " | \ \ \ \ u [ fF ] 8 [ fF ] { 2 } " 
 + + " | \ \ \ \ u [ fF ] [ bB ] 50 " 
 + + " | \ \ \ \ u [ fF ] [ dD ] [ fF ] { 2 } " 
 + + " | \ \ \ \ u [ fF ] [ eE ] 70 " 
 + + " | \ \ \ \ u [ fF ] [ eE ] [ fF ] { 2 } " 
 + + " | \ \ \ \ u [ fF ] { 2 } 0 [ eE ] " 
 + + " | \ \ \ \ u [ fF ] { 2 } 61 " 
 + + " | \ \ \ \ u [ fF ] { 2 } [ dD ] [ cC ] " 
 + + " | \ \ \ \ u [ fF ] { 3 } 9 " 
 + + " | \ \ \ \ u [ fF ] { 3 } [ aA ] " 
 + + " | \ \ \ \ u [ fF ] { 3 } [ bB ] " 
 + + " | \ \ \ \ u [ fF ] { 4 } " ) ; 
 
 / * * Cpp style comments . * / 
 private Map < Integer , TextBlock > singlelineComments ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 index dfd7c54 . . 716a2ca 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 @ @ - 22 , 9 + 22 , 12 @ @ package com . puppycrawl . tools . checkstyle . checks ; 
 import static com . puppycrawl . tools . checkstyle . checks . AvoidEscapedUnicodeCharactersCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 
 + import java . lang . reflect . Field ; 
 import java . lang . reflect . Method ; 
 import java . util . Arrays ; 
 + import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 import java . util . stream . IntStream ; 
 
 @ @ - 34 , 6 + 37 , 7 @ @ import org . powermock . reflect . Whitebox ; 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . internal . utils . TestUtil ; 
 
 public class AvoidEscapedUnicodeCharactersCheckTest extends AbstractModuleTestSupport { 
 
 @ @ - 378 , 6 + 382 , 58 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends AbstractModuleTestSu 
 assertEquals ( " Unexpected matches count " , 1 , actual ) ; 
 } 
 
 + / * * 
 + * Testing , that all elements in the constant NON _ PRINTABLE _ CHARS are sorted . 
 + * This is very convenient for the sake of maintainability . 
 + * 
 + * @ throws Exception when code tested throws some exception 
 + * / 
 + @ Test 
 + public void testNonPrintableCharsAreSorted ( ) throws Exception { 
 + / / Getting Field Value via Reflection , becaues the field is private 
 + final Field field = TestUtil . getClassDeclaredField ( 
 + AvoidEscapedUnicodeCharactersCheck . class , " NON _ PRINTABLE _ CHARS " ) ; 
 + field . setAccessible ( true ) ; 
 + String expression = ( ( Pattern ) field . get ( null ) ) . pattern ( ) ; 
 + 
 + / / Replacing expressions like " \ \ u000 [ bB ] " with " \ \ u000B " 
 + final String [ ] charExpressions = { " Aa " , " Bb " , " Cc " , " Dd " , " Ee " , " Ff " } ; 
 + for ( String charExpression : charExpressions ) { 
 + final String regex = " \ \ [ [ " + charExpression + " ] { 2 } ] " ; 
 + expression = expression . replaceAll ( regex , charExpression . substring ( 0 , 1 ) ) ; 
 + } 
 + 
 + / / Replacing duplications like " \ \ uF { 3 } 9 " with " \ \ uFFF9 " 
 + for ( int i = 4 ; i > 1 ; i - - ) { 
 + final String regex = " ( [ A - F ] ) \ \ { " + i + " } " ; 
 + String replacement = " $ 1 $ 1 { " + ( i - 1 ) + " } " ; 
 + if ( i = = 2 ) { 
 + replacement = " $ 1 $ 1 " ; 
 + } 
 + expression = expression . replaceAll ( regex , replacement ) ; 
 + } 
 + 
 + / / Verifying character order 
 + final String [ ] expressionParts = expression . split ( " \ \ | " ) ; 
 + final Pattern unicodeCharPattern = Pattern . compile ( " ^ \ \ \ \ \ \ \ \ u [ 0 - 9A - F ] { 4 } $ " ) ; 
 + String lastChar = null ; 
 + for ( int i = 0 ; i < expressionParts . length ; i + + ) { 
 + final String currentChar = expressionParts [ i ] ; 
 + final Matcher matcher = unicodeCharPattern . matcher ( currentChar ) ; 
 + if ( ! matcher . matches ( ) ) { 
 + final String message = " Character ' " + currentChar + " ' ( at position " + i 
 + + " ) doesn ' t match the pattern " ; 
 + assertTrue ( message , matcher . matches ( ) ) ; 
 + } 
 + if ( lastChar ! = null ) { 
 + final String message = " Character ' " + lastChar + " ' should be after ' " 
 + + currentChar + " ' , position : " + i ; 
 + assertTrue ( message , lastChar . compareTo ( currentChar ) < 0 ) ; 
 + } 
 + lastChar = currentChar ; 
 + } 
 + } 
 + 
 private static boolean isControlCharacter ( final int character ) { 
 return Arrays . binarySearch ( C0 _ CONTROL _ CHARACTER _ INDICES , character ) > = 0 
 | | Arrays . binarySearch ( C1 _ CONTROL _ CHARACTER _ INDICES , character ) > = 0

NEAREST DIFF:
diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index ae832bc . . 1dead6f 100755 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 49 , 12 + 49 , 6 @ @ 
 Thanks to Travis Schneeberger for patch # 1921815 ( bug # 1649038 ) . 
 < / li > 
 < / ul > 
 - < p > Notes : < / p > 
 - < ul > 
 - < li > 
 - . . . 
 - < / li > 
 - < / ul > 
 < / section > 
 
 < section name = " Release 5 . 4 " >
