BLEU SCORE: 0.12673718536830808

TEST MSG: minor : Added gui and filefilters folders to resources - noncompilable directory and InputIncorrectClass to each of these folders
GENERATED MSG: Redundant Modifier Check moved java8 input to resources - noncompilable folder

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java <nl> index 8e0ea95 . . 5d94064 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ package com . puppycrawl . tools . checkstyle . filefilters ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> import java . util . regex . Pattern ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 32 , 6 + 34 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class ExclusionBeforeExecutionFileFilterTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getNonCompilablePath ( String filename ) throws IOException { <nl> + return super . getNonCompilablePath ( " filefilters " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testAccept ( ) { <nl> final String fileName = " BAD " ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java <nl> index d403b1f . . 0229a83 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java <nl> @ @ - 55 , 7 + 55 , 7 @ @ public class MainFrameModelTest { <nl> } <nl> <nl> private static String getNonCompilablePath ( String filename ) { <nl> - return " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " + filename ; <nl> + return " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / gui / " + filename ; <nl> } <nl> <nl> @ Before <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputIncorrectClass . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputIncorrectClass . java <nl> deleted file mode 100644 <nl> index 5adc947 . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputIncorrectClass . java <nl> + + + / dev / null <nl> @ @ - 1 + 0 , 0 @ @ <nl> - ! @ # $ ^ $ ^ & % 5 <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / InputIncorrectClass . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / InputIncorrectClass . java <nl> new file mode 100644 <nl> index 0000000 . . 5adc947 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / InputIncorrectClass . java <nl> @ @ - 0 , 0 + 1 @ @ <nl> + ! @ # $ ^ $ ^ & % 5 <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / gui / InputIncorrectClass . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / gui / InputIncorrectClass . java <nl> new file mode 100644 <nl> index 0000000 . . 5adc947 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / gui / InputIncorrectClass . java <nl> @ @ - 0 , 0 + 1 @ @ <nl> + ! @ # $ ^ $ ^ & % 5
NEAREST DIFF (one line): diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> index 1d8f2a7 . . d8115f8 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g <nl> @ @ - 1400 , 7 + 1400 , 7 @ @ postfixExpression <nl> 	 	 ( options { warnWhenFollowAmbig = false ; } : 	 / / qualified id ( id . id . id . id . . . ) - - build the name <nl> 	 	 	 DOT ^ <nl> 	 	 	 ( ( typeArguments [ false ] ) ? <nl> - 	 	 	 ( IDENT <nl> + 	 	 	 ( IDENT ( ( typeArguments [ false ] DOUBLE _ COLON ) = > typeArguments [ false ] ) ? <nl> 	 	 	 | " this " <nl> 	 	 	 | " super " / / ClassName . super . field <nl> 	 	 	 ) <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java <nl> index 84d6abf . . 4562a70 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java <nl> @ @ - 48 , 4 + 48 , 15 @ @ public class MethodReferencesTest extends BaseCheckTestSupport <nl> verify ( checkConfig , getPath ( " grammars / java8 / InputMethodReferencesTest2 . java " ) , expected ) ; <nl> <nl> } <nl> + <nl> + @ Test <nl> + public void testGenericInPostfixExpressionBeforeReference ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " grammars / java8 / InputMethodReferencesTest3 . java " ) , expected ) ; <nl> + <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest3 . java <nl> new file mode 100644 <nl> index 0000000 . . e724e6d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest3 . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + import java . util . function . Supplier ; <nl> + <nl> + public static class InputMethodReferencesTest3 <nl> + { <nl> + public static class SomeClass { <nl> + public static class Nested < V > { <nl> + public Nested ( ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + public < V > void methodName ( V value ) { <nl> + MyClass < T > : : myMethod ; <nl> + Supplier < SomeClass . Nested < V > > passes = SomeClass . Nested : : new ; <nl> + Supplier < SomeClass . Nested < V > > fails = SomeClass . Nested < V > : : new ; <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java 
 index 8e0ea95 . . 5d94064 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java 
 @ @ - 22 , 6 + 22 , 8 @ @ package com . puppycrawl . tools . checkstyle . filefilters ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertTrue ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 import java . util . regex . Pattern ; 
 
 import org . junit . Test ; 
 @ @ - 32 , 6 + 34 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class ExclusionBeforeExecutionFileFilterTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getNonCompilablePath ( String filename ) throws IOException { 
 + return super . getNonCompilablePath ( " filefilters " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testAccept ( ) { 
 final String fileName = " BAD " ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java 
 index d403b1f . . 0229a83 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / gui / MainFrameModelTest . java 
 @ @ - 55 , 7 + 55 , 7 @ @ public class MainFrameModelTest { 
 } 
 
 private static String getNonCompilablePath ( String filename ) { 
 - return " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " + filename ; 
 + return " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / gui / " + filename ; 
 } 
 
 @ Before 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputIncorrectClass . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputIncorrectClass . java 
 deleted file mode 100644 
 index 5adc947 . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputIncorrectClass . java 
 + + + / dev / null 
 @ @ - 1 + 0 , 0 @ @ 
 - ! @ # $ ^ $ ^ & % 5 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / InputIncorrectClass . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / InputIncorrectClass . java 
 new file mode 100644 
 index 0000000 . . 5adc947 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / InputIncorrectClass . java 
 @ @ - 0 , 0 + 1 @ @ 
 + ! @ # $ ^ $ ^ & % 5 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / gui / InputIncorrectClass . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / gui / InputIncorrectClass . java 
 new file mode 100644 
 index 0000000 . . 5adc947 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / gui / InputIncorrectClass . java 
 @ @ - 0 , 0 + 1 @ @ 
 + ! @ # $ ^ $ ^ & % 5

NEAREST DIFF:
diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 index 1d8f2a7 . . d8115f8 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / grammars / java . g 
 @ @ - 1400 , 7 + 1400 , 7 @ @ postfixExpression 
 	 	 ( options { warnWhenFollowAmbig = false ; } : 	 / / qualified id ( id . id . id . id . . . ) - - build the name 
 	 	 	 DOT ^ 
 	 	 	 ( ( typeArguments [ false ] ) ? 
 - 	 	 	 ( IDENT 
 + 	 	 	 ( IDENT ( ( typeArguments [ false ] DOUBLE _ COLON ) = > typeArguments [ false ] ) ? 
 	 	 	 | " this " 
 	 	 	 | " super " / / ClassName . super . field 
 	 	 	 ) 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java 
 index 84d6abf . . 4562a70 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java 
 @ @ - 48 , 4 + 48 , 15 @ @ public class MethodReferencesTest extends BaseCheckTestSupport 
 verify ( checkConfig , getPath ( " grammars / java8 / InputMethodReferencesTest2 . java " ) , expected ) ; 
 
 } 
 + 
 + @ Test 
 + public void testGenericInPostfixExpressionBeforeReference ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " grammars / java8 / InputMethodReferencesTest3 . java " ) , expected ) ; 
 + 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest3 . java 
 new file mode 100644 
 index 0000000 . . e724e6d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferencesTest3 . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + import java . util . function . Supplier ; 
 + 
 + public static class InputMethodReferencesTest3 
 + { 
 + public static class SomeClass { 
 + public static class Nested < V > { 
 + public Nested ( ) { 
 + } 
 + } 
 + } 
 + 
 + public < V > void methodName ( V value ) { 
 + MyClass < T > : : myMethod ; 
 + Supplier < SomeClass . Nested < V > > passes = SomeClass . Nested : : new ; 
 + Supplier < SomeClass . Nested < V > > fails = SomeClass . Nested < V > : : new ; 
 + } 
 + } 
 \ No newline at end of file
