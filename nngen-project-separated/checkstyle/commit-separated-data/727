BLEU SCORE: 0.14025775160081475

TEST MSG: Issue # 4316 : move argLine to properties to let it be overriden from CLI for Travis localized builds
GENERATED MSG: Issue # 4316 : disable ConfigurationLoaderTest as experiment and stabilize Travis builds

TEST DIFF (one line): diff - - git a / . travis . yml b / . travis . yml <nl> index 03f0f92 . . f0d4606 100644 <nl> - - - a / . travis . yml <nl> + + + b / . travis . yml <nl> @ @ - 84 , 42 + 84 , 42 @ @ matrix : <nl> - jdk : oraclejdk8 <nl> env : <nl> - DESC = " tests de " <nl> - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = de - Duser . country = DE ' " <nl> + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = de - Duser . country = DE ' " <nl> # unit tests in Spanish locale ( oraclejdk8 ) <nl> - jdk : oraclejdk8 <nl> env : <nl> - DESC = " tests es " <nl> - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = es - Duser . country = ES ' " <nl> + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = es - Duser . country = ES ' " <nl> # unit tests in Finnish locale ( oraclejdk8 ) <nl> - jdk : oraclejdk8 <nl> env : <nl> - DESC = " tests fi " <nl> - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = fi - Duser . country = FI ' " <nl> + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = fi - Duser . country = FI ' " <nl> # unit tests in French locale ( oraclejdk8 ) <nl> - jdk : oraclejdk8 <nl> env : <nl> - DESC = " tests fr " <nl> - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = fr - Duser . country = FR ' " <nl> + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = fr - Duser . country = FR ' " <nl> # unit tests in Chinese locale ( oraclejdk8 ) <nl> - jdk : oraclejdk8 <nl> env : <nl> - DESC = " tests zh " <nl> - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = zh - Duser . country = CN ' " <nl> + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = zh - Duser . country = CN ' " <nl> # unit tests in Japanese locale ( oraclejdk8 ) <nl> - jdk : oraclejdk8 <nl> env : <nl> - DESC = " tests ja " <nl> - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = ja - Duser . country = JP ' " <nl> + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = ja - Duser . country = JP ' " <nl> # unit tests in Portuguese locale ( oraclejdk8 ) <nl> - jdk : oraclejdk8 <nl> env : <nl> - DESC = " tests pt " <nl> - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = pt - Duser . country = PT ' " <nl> + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = pt - Duser . country = PT ' " <nl> # unit tests in Turkish locale ( oraclejdk8 ) <nl> - jdk : oraclejdk8 <nl> env : <nl> - DESC = " tests tr " <nl> - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = tr - Duser . country = TR ' " <nl> + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = tr - Duser . country = TR ' " <nl> <nl> # assembly ( oraclejdk8 ) <nl> - jdk : oraclejdk8 <nl> diff - - git a / pom . xml b / pom . xml <nl> index 5f0ea2b . . 3fe1eef 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 215 , 6 + 215 , 8 @ @ <nl> < pitest . plugin . timeout . factor > 10 < / pitest . plugin . timeout . factor > <nl> < pitest . plugin . timeout . constant > 50000 < / pitest . plugin . timeout . constant > <nl> < pitest . plugin . threads > 4 < / pitest . plugin . threads > <nl> + < ! - - argLine is required due unstable problem with Travis builds ; extraArgLine is used in Travis localized builds - - > <nl> + < argLine > - Xms1024m - Xmx2048m $ { extraArgLine } < / argLine > <nl> < / properties > <nl> <nl> < ! - - that repositories are required for testing plugin ' s snapshot version - - > <nl> @ @ - 860 , 9 + 862 , 6 @ @ <nl> < artifactId > maven - surefire - plugin < / artifactId > <nl> < version > 2 . 20 < / version > <nl> < configuration > <nl> - < ! - - Travis build workaround - - > <nl> - < argLine > - Xms1024m - Xmx2048m < / argLine > <nl> - <nl> < systemPropertyVariables > <nl> < jacoco - agent . destfile > $ { project . build . directory } / jacoco / jacoco . exec < / jacoco - agent . destfile > <nl> < / systemPropertyVariables >
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> index 43c9001 . . dac8a70 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> @ @ - 34 , 13 + 34 , 17 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " blocks " + File . separator + filename ) ; <nl> + + " blocks " + File . separator <nl> + + " needbraces " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Override <nl> protected String getNonCompilablePath ( String filename ) throws IOException { <nl> return super . getNonCompilablePath ( " checks " + File . separator <nl> - + " blocks " + File . separator + filename ) ; <nl> + + " blocks " + File . separator <nl> + + " needbraces " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 66 , 7 + 70 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> " 99 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> " 100 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputBraces . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNeedBraces . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 87 , 7 + 91 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> " 107 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> " 114 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNeedBracesSingleLineStatements . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 99 , 7 + 103 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 7 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " - > " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSingleLineLambda . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNeedBracesSingleLineLambda . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 112 , 7 + 116 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> " 72 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> " 75 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNeedBracesSingleLineStatements . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 131 , 7 + 135 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " tokens " , " LITERAL _ WHILE , LITERAL _ DO , LITERAL _ FOR " ) ; <nl> checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputNeedBraces . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNeedBracesConditional . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 149 , 7 + 153 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> " 49 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " default " ) , <nl> " 56 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " default " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputNeedBraces . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNeedBracesConditional . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputBraces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputBraces . java <nl> deleted file mode 100644 <nl> index 702d68d . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputBraces . java <nl> + + + / dev / null <nl> @ @ - 1 , 119 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> - <nl> - / * * <nl> - * Test case for correct use of braces . <nl> - * @ author Oliver Burn <nl> - * * / <nl> - class InputBraces <nl> - { <nl> - / * * @ return helper func * * / <nl> - boolean condition ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - / * * Test do / while loops * * / <nl> - void testDoWhile ( ) <nl> - { <nl> - / / Valid <nl> - do { <nl> - testDoWhile ( ) ; <nl> - } <nl> - while ( condition ( ) ) ; <nl> - <nl> - / / Invalid <nl> - do testDoWhile ( ) ; while ( condition ( ) ) ; <nl> - } <nl> - <nl> - / * * Test while loops * * / <nl> - void testWhile ( ) <nl> - { <nl> - / / Valid <nl> - while ( condition ( ) ) { <nl> - testWhile ( ) ; <nl> - } <nl> - <nl> - / / Invalid <nl> - while ( condition ( ) ) ; <nl> - while ( condition ( ) ) <nl> - testWhile ( ) ; <nl> - while ( condition ( ) ) <nl> - if ( condition ( ) ) <nl> - testWhile ( ) ; <nl> - } <nl> - <nl> - / * * Test for loops * * / <nl> - void testFor ( ) <nl> - { <nl> - / / Valid <nl> - for ( int i = 1 ; i < 5 ; i + + ) { <nl> - testFor ( ) ; <nl> - } <nl> - <nl> - / / Invalid <nl> - for ( int i = 1 ; i < 5 ; i + + ) ; <nl> - for ( int i = 1 ; i < 5 ; i + + ) <nl> - testFor ( ) ; <nl> - for ( int i = 1 ; i < 5 ; <nl> - i + + ) <nl> - if ( i > 2 ) <nl> - testFor ( ) ; <nl> - } <nl> - <nl> - / * * Test if constructs * * / <nl> - public void testIf ( ) <nl> - { <nl> - / / Valid <nl> - if ( condition ( ) ) { <nl> - testIf ( ) ; <nl> - } <nl> - else if ( condition ( ) ) { <nl> - testIf ( ) ; <nl> - } <nl> - else { <nl> - testIf ( ) ; <nl> - } <nl> - <nl> - / / Invalid <nl> - if ( condition ( ) ) ; <nl> - if ( condition ( ) ) <nl> - testIf ( ) ; <nl> - if ( condition ( ) ) <nl> - testIf ( ) ; <nl> - else <nl> - testIf ( ) ; <nl> - if ( condition ( ) ) <nl> - testIf ( ) ; <nl> - else { <nl> - testIf ( ) ; <nl> - } <nl> - if ( condition ( ) ) { <nl> - testIf ( ) ; <nl> - } <nl> - else <nl> - testIf ( ) ; <nl> - if ( condition ( ) ) <nl> - if ( condition ( ) ) <nl> - testIf ( ) ; <nl> - } <nl> - <nl> - void whitespaceAfterSemi ( ) <nl> - { <nl> - / / reject <nl> - int i = 1 ; int j = 2 ; <nl> - <nl> - / / accept <nl> - for ( ; ; ) { <nl> - } <nl> - } <nl> - <nl> - / * * Empty constructor block . * * / <nl> - public InputBraces ( ) { } <nl> - <nl> - / * * Empty method block . * * / <nl> - public void emptyImplementation ( ) { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputBracesSingleLineStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputBracesSingleLineStatements . java <nl> deleted file mode 100644 <nl> index 5e89a77 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputBracesSingleLineStatements . java <nl> + + + / dev / null <nl> @ @ - 1 , 117 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> - <nl> - public class InputBracesSingleLineStatements <nl> - { <nl> - private static class SomeClass { <nl> - boolean flag = true ; <nl> - private static boolean test ( boolean k ) { <nl> - return k ; <nl> - } <nl> - } <nl> - <nl> - private int foo ( ) { <nl> - if ( SomeClass . test ( true ) = = true ) return 4 ; / / No warning if ' mAllowSingleLineIf ' is true <nl> - return 0 ; <nl> - } <nl> - <nl> - private int foo1 ( ) { <nl> - if ( SomeClass . test ( true ) = = true ) return 4 ; int k = 3 ; / / No warning if ' mAllowSingleLineIf ' is true <nl> - return 0 ; <nl> - } <nl> - <nl> - private int foo2 ( ) { <nl> - if ( SomeClass . test ( true ) = = true ) / / Warning , not single - line if - statement <nl> - return 4 ; <nl> - return 0 ; <nl> - } <nl> - <nl> - private int foo3 ( ) { <nl> - if ( SomeClass . test ( true ) = = true ) if ( true ) return 4 ; / / Warning , complex block <nl> - return 0 ; <nl> - } <nl> - <nl> - private void foo ( Object o ) { <nl> - if ( o ! = null ) this . notify ( ) ; <nl> - } <nl> - <nl> - private void foo2 ( Object o ) { <nl> - if ( o ! = null ) <nl> - this . notify ( ) ; <nl> - } <nl> - <nl> - private void loopTest ( Object o ) { <nl> - while ( o ! = null ) { <nl> - this . notify ( ) ; <nl> - } <nl> - while ( o ! = null ) <nl> - this . notify ( ) ; <nl> - while ( o ! = null ) this . notify ( ) ; <nl> - do { <nl> - this . notify ( ) ; <nl> - } while ( o ! = null ) ; <nl> - do this . notify ( ) ; while ( o ! = null ) ; <nl> - do <nl> - this . notify ( ) ; <nl> - while ( o ! = null ) ; <nl> - for ( ; ; ) <nl> - break ; <nl> - for ( ; ; ) break ; <nl> - for ( int i = 0 ; i < 10 ; i + + ) { <nl> - this . notify ( ) ; <nl> - } <nl> - for ( int i = 0 ; i < 10 ; i + + ) <nl> - this . notify ( ) ; <nl> - for ( int i = 0 ; ; ) this . notify ( ) ; <nl> - } <nl> - <nl> - private int getSmth ( int num ) <nl> - { <nl> - int counter = 0 ; <nl> - switch ( num ) { <nl> - case 1 : counter + + ; break ; <nl> - case 2 : <nl> - counter + = 2 ; <nl> - break ; <nl> - case 3 : <nl> - counter + = 3 ; <nl> - break ; <nl> - case 6 : counter + = 10 ; break ; <nl> - default : counter = 100 ; break ; <nl> - } <nl> - return counter ; <nl> - } <nl> - <nl> - private void testElse ( int k ) { <nl> - if ( k = = 4 ) System . identityHashCode ( " yes " ) ; <nl> - else System . identityHashCode ( " no " ) ; <nl> - for ( ; ; ) ; <nl> - } <nl> - <nl> - private int testMissingWarnings ( ) { <nl> - if ( true ) <nl> - throw new RuntimeException ( ) ; <nl> - if ( true ) { <nl> - return 1 ; <nl> - } else <nl> - return 2 ; <nl> - } <nl> - <nl> - void enhancedForLoop ( int [ ] array ) { <nl> - for ( int value : array ) return ; <nl> - } <nl> - <nl> - int [ ] sourceLocators ; <nl> - <nl> - private class StateInfo { <nl> - public boolean isInitial ( ) { <nl> - for ( int locator : sourceLocators ) if ( locator ! = 0 ) return false ; <nl> - return true ; <nl> - } <nl> - } <nl> - <nl> - private void forEachLoop ( ) { <nl> - for ( String s : new String [ ] { " " } ) break ; <nl> - for ( String s : new String [ ] { " " } ) <nl> - break ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBraces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBraces . java <nl> deleted file mode 100644 <nl> index 74a8f9e . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBraces . java <nl> + + + / dev / null <nl> @ @ - 1 , 61 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> - <nl> - public class InputNeedBraces <nl> - { <nl> - public void method ( ) { <nl> - if ( false ) <nl> - while ( true ) <nl> - { <nl> - <nl> - } <nl> - <nl> - if ( true ) <nl> - do { <nl> - int a = 1 ; <nl> - } <nl> - while ( true ) ; <nl> - <nl> - if ( true ) <nl> - for ( ; ; ) { <nl> - assert true ; } <nl> - <nl> - if ( true ) { <nl> - <nl> - } else { <nl> - <nl> - } <nl> - <nl> - switch ( 1 ) { <nl> - case 1 : { <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - switch ( 1 ) { <nl> - case 1 : System . lineSeparator ( ) ; <nl> - case 2 : { break ; } <nl> - <nl> - case 3 : { <nl> - break ; } <nl> - <nl> - case 4 : <nl> - break ; <nl> - <nl> - case 5 : System . lineSeparator ( ) ; <nl> - break ; <nl> - } <nl> - <nl> - switch ( 1 ) { <nl> - default : <nl> - { <nl> - <nl> - } <nl> - } <nl> - <nl> - switch ( 1 ) { <nl> - default : <nl> - break ; <nl> - } <nl> - <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesEmptyDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesEmptyDefault . java <nl> deleted file mode 100644 <nl> index d482bdd . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesEmptyDefault . java <nl> + + + / dev / null <nl> @ @ - 1 , 19 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> - <nl> - public class InputNeedBracesEmptyDefault { <nl> - int value ; <nl> - private void main ( ) { <nl> - switch ( value ) { <nl> - default : <nl> - } <nl> - } <nl> - private void main1 ( ) { <nl> - switch ( value ) { <nl> - case 1 : <nl> - } <nl> - } <nl> - } <nl> - <nl> - @ interface Example { <nl> - String priority ( ) default " value " ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesNoBodyLoops . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesNoBodyLoops . java <nl> deleted file mode 100644 <nl> index cf74266 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesNoBodyLoops . java <nl> + + + / dev / null <nl> @ @ - 1 , 123 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> - <nl> - public class InputNeedBracesNoBodyLoops { <nl> - <nl> - private int value ; <nl> - private InputNeedBracesNoBodyLoops fco = new InputNeedBracesNoBodyLoops ( ) ; <nl> - <nl> - { <nl> - value = 0 ; <nl> - while ( incrementValue ( ) < 5 ) ; ; <nl> - } <nl> - <nl> - public void foo ( ) { <nl> - while ( incrementValue ( ) < 5 ) ; <nl> - } <nl> - <nl> - public void foo2 ( ) { <nl> - for ( int i = 0 ; i < 10 ; incrementValue ( ) ) ; <nl> - for ( int i = 0 ; incrementValue ( ) < 8 ; i + + ) ; <nl> - } <nl> - <nl> - public void foo3 ( ) { <nl> - while ( incrementValue ( ) <nl> - < 5 ) ; <nl> - } <nl> - <nl> - public void foo4 ( ) { <nl> - while ( incrementValue ( ) < 5 ) <nl> - ; <nl> - } <nl> - <nl> - public void foo5 ( ) { <nl> - while ( incrementValue ( ) <nl> - < 5 ) <nl> - ; <nl> - } <nl> - <nl> - public void foo6 ( ) { <nl> - while ( <nl> - incrementValue ( ) < 5 <nl> - ) ; <nl> - } <nl> - <nl> - public void foo7 ( ) { <nl> - while ( <nl> - incrementValue ( ) < 5 ) ; <nl> - } <nl> - <nl> - public void foo8 ( ) { <nl> - for ( int i = 0 ; incrementValue ( ) < 8 ; i + + ) ; <nl> - } <nl> - <nl> - public void foo9 ( ) { <nl> - for ( int i = 0 ; <nl> - incrementValue ( ) < 8 ; <nl> - i + + ) ; <nl> - } <nl> - <nl> - public void foo10 ( ) { <nl> - for ( <nl> - int i = 0 ; <nl> - incrementValue ( ) < 8 ; <nl> - i + + ) ; <nl> - } <nl> - <nl> - public void foo11 ( ) { <nl> - for <nl> - ( <nl> - int i = 0 ; <nl> - incrementValue ( ) < 8 ; <nl> - i + + <nl> - ) <nl> - ; <nl> - } <nl> - <nl> - public void foo12 ( ) { <nl> - for ( int i = 0 ; incrementValue ( ) < 8 ; i + + ) { <nl> - int a = 5 ; <nl> - } <nl> - } <nl> - <nl> - public void foo14 ( ) { <nl> - while ( incrementValue ( ) < 5 ) { <nl> - return ; <nl> - } <nl> - } <nl> - <nl> - public void foo15 ( ) { <nl> - while ( true ) ; <nl> - } <nl> - <nl> - public void foo16 ( ) { <nl> - for ( ; ; ) ; <nl> - } <nl> - <nl> - public void foo17 ( ) { <nl> - if ( true ) ; <nl> - } <nl> - <nl> - public void foo18 ( ) { <nl> - if ( true ) { <nl> - int a ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public String toString ( ) { <nl> - while ( fco . removeAssignedRole ( this ) ) ; <nl> - return " " ; <nl> - } <nl> - <nl> - private boolean removeAssignedRole ( InputNeedBracesNoBodyLoops inputNeedBracesNoBodyLoops ) { <nl> - return true ; <nl> - } <nl> - <nl> - private int incrementValue ( ) { <nl> - return value + + ; <nl> - } <nl> - <nl> - private void decrementValue ( ) { <nl> - value - - ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSingleLineLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSingleLineLambda . java <nl> deleted file mode 100644 <nl> index d3a15d5 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSingleLineLambda . java <nl> + + + / dev / null <nl> @ @ - 1 , 10 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> - <nl> - public class InputSingleLineLambda { <nl> - <nl> - static Runnable r1 = ( ) - > String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world one ! " ) ; <nl> - static Runnable r2 = ( ) - > String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world two ! " ) ; <nl> - static Runnable r3 = ( ) - > <nl> - String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world two ! " ) ; <nl> - static Runnable r4 = ( ) - > { String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world two ! " ) ; } ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBraces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBraces . java <nl> new file mode 100644 <nl> index 0000000 . . 5a04483 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBraces . java <nl> @ @ - 0 , 0 + 1 , 119 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . needbraces ; <nl> + <nl> + / * * <nl> + * Test case for correct use of braces . <nl> + * @ author Oliver Burn <nl> + * * / <nl> + class InputNeedBraces <nl> + { <nl> + / * * @ return helper func * * / <nl> + boolean condition ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + / * * Test do / while loops * * / <nl> + void testDoWhile ( ) <nl> + { <nl> + / / Valid <nl> + do { <nl> + testDoWhile ( ) ; <nl> + } <nl> + while ( condition ( ) ) ; <nl> + <nl> + / / Invalid <nl> + do testDoWhile ( ) ; while ( condition ( ) ) ; <nl> + } <nl> + <nl> + / * * Test while loops * * / <nl> + void testWhile ( ) <nl> + { <nl> + / / Valid <nl> + while ( condition ( ) ) { <nl> + testWhile ( ) ; <nl> + } <nl> + <nl> + / / Invalid <nl> + while ( condition ( ) ) ; <nl> + while ( condition ( ) ) <nl> + testWhile ( ) ; <nl> + while ( condition ( ) ) <nl> + if ( condition ( ) ) <nl> + testWhile ( ) ; <nl> + } <nl> + <nl> + / * * Test for loops * * / <nl> + void testFor ( ) <nl> + { <nl> + / / Valid <nl> + for ( int i = 1 ; i < 5 ; i + + ) { <nl> + testFor ( ) ; <nl> + } <nl> + <nl> + / / Invalid <nl> + for ( int i = 1 ; i < 5 ; i + + ) ; <nl> + for ( int i = 1 ; i < 5 ; i + + ) <nl> + testFor ( ) ; <nl> + for ( int i = 1 ; i < 5 ; <nl> + i + + ) <nl> + if ( i > 2 ) <nl> + testFor ( ) ; <nl> + } <nl> + <nl> + / * * Test if constructs * * / <nl> + public void testIf ( ) <nl> + { <nl> + / / Valid <nl> + if ( condition ( ) ) { <nl> + testIf ( ) ; <nl> + } <nl> + else if ( condition ( ) ) { <nl> + testIf ( ) ; <nl> + } <nl> + else { <nl> + testIf ( ) ; <nl> + } <nl> + <nl> + / / Invalid <nl> + if ( condition ( ) ) ; <nl> + if ( condition ( ) ) <nl> + testIf ( ) ; <nl> + if ( condition ( ) ) <nl> + testIf ( ) ; <nl> + else <nl> + testIf ( ) ; <nl> + if ( condition ( ) ) <nl> + testIf ( ) ; <nl> + else { <nl> + testIf ( ) ; <nl> + } <nl> + if ( condition ( ) ) { <nl> + testIf ( ) ; <nl> + } <nl> + else <nl> + testIf ( ) ; <nl> + if ( condition ( ) ) <nl> + if ( condition ( ) ) <nl> + testIf ( ) ; <nl> + } <nl> + <nl> + void whitespaceAfterSemi ( ) <nl> + { <nl> + / / reject <nl> + int i = 1 ; int j = 2 ; <nl> + <nl> + / / accept <nl> + for ( ; ; ) { <nl> + } <nl> + } <nl> + <nl> + / * * Empty constructor block . * * / <nl> + public InputNeedBraces ( ) { } <nl> + <nl> + / * * Empty method block . * * / <nl> + public void emptyImplementation ( ) { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesConditional . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesConditional . java <nl> new file mode 100644 <nl> index 0000000 . . 765fb99 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesConditional . java <nl> @ @ - 0 , 0 + 1 , 61 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . needbraces ; <nl> + <nl> + public class InputNeedBracesConditional <nl> + { <nl> + public void method ( ) { <nl> + if ( false ) <nl> + while ( true ) <nl> + { <nl> + <nl> + } <nl> + <nl> + if ( true ) <nl> + do { <nl> + int a = 1 ; <nl> + } <nl> + while ( true ) ; <nl> + <nl> + if ( true ) <nl> + for ( ; ; ) { <nl> + assert true ; } <nl> + <nl> + if ( true ) { <nl> + <nl> + } else { <nl> + <nl> + } <nl> + <nl> + switch ( 1 ) { <nl> + case 1 : { <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + switch ( 1 ) { <nl> + case 1 : System . lineSeparator ( ) ; <nl> + case 2 : { break ; } <nl> + <nl> + case 3 : { <nl> + break ; } <nl> + <nl> + case 4 : <nl> + break ; <nl> + <nl> + case 5 : System . lineSeparator ( ) ; <nl> + break ; <nl> + } <nl> + <nl> + switch ( 1 ) { <nl> + default : <nl> + { <nl> + <nl> + } <nl> + } <nl> + <nl> + switch ( 1 ) { <nl> + default : <nl> + break ; <nl> + } <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesEmptyDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesEmptyDefault . java <nl> new file mode 100644 <nl> index 0000000 . . d8abe01 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesEmptyDefault . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . needbraces ; <nl> + <nl> + public class InputNeedBracesEmptyDefault { <nl> + int value ; <nl> + private void main ( ) { <nl> + switch ( value ) { <nl> + default : <nl> + } <nl> + } <nl> + private void main1 ( ) { <nl> + switch ( value ) { <nl> + case 1 : <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ interface Example { <nl> + String priority ( ) default " value " ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesNoBodyLoops . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesNoBodyLoops . java <nl> new file mode 100644 <nl> index 0000000 . . 94d1144 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesNoBodyLoops . java <nl> @ @ - 0 , 0 + 1 , 123 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . needbraces ; <nl> + <nl> + public class InputNeedBracesNoBodyLoops { <nl> + <nl> + private int value ; <nl> + private InputNeedBracesNoBodyLoops fco = new InputNeedBracesNoBodyLoops ( ) ; <nl> + <nl> + { <nl> + value = 0 ; <nl> + while ( incrementValue ( ) < 5 ) ; ; <nl> + } <nl> + <nl> + public void foo ( ) { <nl> + while ( incrementValue ( ) < 5 ) ; <nl> + } <nl> + <nl> + public void foo2 ( ) { <nl> + for ( int i = 0 ; i < 10 ; incrementValue ( ) ) ; <nl> + for ( int i = 0 ; incrementValue ( ) < 8 ; i + + ) ; <nl> + } <nl> + <nl> + public void foo3 ( ) { <nl> + while ( incrementValue ( ) <nl> + < 5 ) ; <nl> + } <nl> + <nl> + public void foo4 ( ) { <nl> + while ( incrementValue ( ) < 5 ) <nl> + ; <nl> + } <nl> + <nl> + public void foo5 ( ) { <nl> + while ( incrementValue ( ) <nl> + < 5 ) <nl> + ; <nl> + } <nl> + <nl> + public void foo6 ( ) { <nl> + while ( <nl> + incrementValue ( ) < 5 <nl> + ) ; <nl> + } <nl> + <nl> + public void foo7 ( ) { <nl> + while ( <nl> + incrementValue ( ) < 5 ) ; <nl> + } <nl> + <nl> + public void foo8 ( ) { <nl> + for ( int i = 0 ; incrementValue ( ) < 8 ; i + + ) ; <nl> + } <nl> + <nl> + public void foo9 ( ) { <nl> + for ( int i = 0 ; <nl> + incrementValue ( ) < 8 ; <nl> + i + + ) ; <nl> + } <nl> + <nl> + public void foo10 ( ) { <nl> + for ( <nl> + int i = 0 ; <nl> + incrementValue ( ) < 8 ; <nl> + i + + ) ; <nl> + } <nl> + <nl> + public void foo11 ( ) { <nl> + for <nl> + ( <nl> + int i = 0 ; <nl> + incrementValue ( ) < 8 ; <nl> + i + + <nl> + ) <nl> + ; <nl> + } <nl> + <nl> + public void foo12 ( ) { <nl> + for ( int i = 0 ; incrementValue ( ) < 8 ; i + + ) { <nl> + int a = 5 ; <nl> + } <nl> + } <nl> + <nl> + public void foo14 ( ) { <nl> + while ( incrementValue ( ) < 5 ) { <nl> + return ; <nl> + } <nl> + } <nl> + <nl> + public void foo15 ( ) { <nl> + while ( true ) ; <nl> + } <nl> + <nl> + public void foo16 ( ) { <nl> + for ( ; ; ) ; <nl> + } <nl> + <nl> + public void foo17 ( ) { <nl> + if ( true ) ; <nl> + } <nl> + <nl> + public void foo18 ( ) { <nl> + if ( true ) { <nl> + int a ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + while ( fco . removeAssignedRole ( this ) ) ; <nl> + return " " ; <nl> + } <nl> + <nl> + private boolean removeAssignedRole ( InputNeedBracesNoBodyLoops inputNeedBracesNoBodyLoops ) { <nl> + return true ; <nl> + } <nl> + <nl> + private int incrementValue ( ) { <nl> + return value + + ; <nl> + } <nl> + <nl> + private void decrementValue ( ) { <nl> + value - - ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesSingleLineLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesSingleLineLambda . java <nl> new file mode 100644 <nl> index 0000000 . . b3e5737 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesSingleLineLambda . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . needbraces ; <nl> + <nl> + public class InputNeedBracesSingleLineLambda { <nl> + <nl> + static Runnable r1 = ( ) - > String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world one ! " ) ; <nl> + static Runnable r2 = ( ) - > String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world two ! " ) ; <nl> + static Runnable r3 = ( ) - > <nl> + String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world two ! " ) ; <nl> + static Runnable r4 = ( ) - > { String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world two ! " ) ; } ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesSingleLineStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesSingleLineStatements . java <nl> new file mode 100644 <nl> index 0000000 . . a116339 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesSingleLineStatements . java <nl> @ @ - 0 , 0 + 1 , 117 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . needbraces ; <nl> + <nl> + public class InputNeedBracesSingleLineStatements <nl> + { <nl> + private static class SomeClass { <nl> + boolean flag = true ; <nl> + private static boolean test ( boolean k ) { <nl> + return k ; <nl> + } <nl> + } <nl> + <nl> + private int foo ( ) { <nl> + if ( SomeClass . test ( true ) = = true ) return 4 ; / / No warning if ' mAllowSingleLineIf ' is true <nl> + return 0 ; <nl> + } <nl> + <nl> + private int foo1 ( ) { <nl> + if ( SomeClass . test ( true ) = = true ) return 4 ; int k = 3 ; / / No warning if ' mAllowSingleLineIf ' is true <nl> + return 0 ; <nl> + } <nl> + <nl> + private int foo2 ( ) { <nl> + if ( SomeClass . test ( true ) = = true ) / / Warning , not single - line if - statement <nl> + return 4 ; <nl> + return 0 ; <nl> + } <nl> + <nl> + private int foo3 ( ) { <nl> + if ( SomeClass . test ( true ) = = true ) if ( true ) return 4 ; / / Warning , complex block <nl> + return 0 ; <nl> + } <nl> + <nl> + private void foo ( Object o ) { <nl> + if ( o ! = null ) this . notify ( ) ; <nl> + } <nl> + <nl> + private void foo2 ( Object o ) { <nl> + if ( o ! = null ) <nl> + this . notify ( ) ; <nl> + } <nl> + <nl> + private void loopTest ( Object o ) { <nl> + while ( o ! = null ) { <nl> + this . notify ( ) ; <nl> + } <nl> + while ( o ! = null ) <nl> + this . notify ( ) ; <nl> + while ( o ! = null ) this . notify ( ) ; <nl> + do { <nl> + this . notify ( ) ; <nl> + } while ( o ! = null ) ; <nl> + do this . notify ( ) ; while ( o ! = null ) ; <nl> + do <nl> + this . notify ( ) ; <nl> + while ( o ! = null ) ; <nl> + for ( ; ; ) <nl> + break ; <nl> + for ( ; ; ) break ; <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + this . notify ( ) ; <nl> + } <nl> + for ( int i = 0 ; i < 10 ; i + + ) <nl> + this . notify ( ) ; <nl> + for ( int i = 0 ; ; ) this . notify ( ) ; <nl> + } <nl> + <nl> + private int getSmth ( int num ) <nl> + { <nl> + int counter = 0 ; <nl> + switch ( num ) { <nl> + case 1 : counter + + ; break ; <nl> + case 2 : <nl> + counter + = 2 ; <nl> + break ; <nl> + case 3 : <nl> + counter + = 3 ; <nl> + break ; <nl> + case 6 : counter + = 10 ; break ; <nl> + default : counter = 100 ; break ; <nl> + } <nl> + return counter ; <nl> + } <nl> + <nl> + private void testElse ( int k ) { <nl> + if ( k = = 4 ) System . identityHashCode ( " yes " ) ; <nl> + else System . identityHashCode ( " no " ) ; <nl> + for ( ; ; ) ; <nl> + } <nl> + <nl> + private int testMissingWarnings ( ) { <nl> + if ( true ) <nl> + throw new RuntimeException ( ) ; <nl> + if ( true ) { <nl> + return 1 ; <nl> + } else <nl> + return 2 ; <nl> + } <nl> + <nl> + void enhancedForLoop ( int [ ] array ) { <nl> + for ( int value : array ) return ; <nl> + } <nl> + <nl> + int [ ] sourceLocators ; <nl> + <nl> + private class StateInfo { <nl> + public boolean isInitial ( ) { <nl> + for ( int locator : sourceLocators ) if ( locator ! = 0 ) return false ; <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> + private void forEachLoop ( ) { <nl> + for ( String s : new String [ ] { " " } ) break ; <nl> + for ( String s : new String [ ] { " " } ) <nl> + break ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / . travis . yml b / . travis . yml 
 index 03f0f92 . . f0d4606 100644 
 - - - a / . travis . yml 
 + + + b / . travis . yml 
 @ @ - 84 , 42 + 84 , 42 @ @ matrix : 
 - jdk : oraclejdk8 
 env : 
 - DESC = " tests de " 
 - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = de - Duser . country = DE ' " 
 + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = de - Duser . country = DE ' " 
 # unit tests in Spanish locale ( oraclejdk8 ) 
 - jdk : oraclejdk8 
 env : 
 - DESC = " tests es " 
 - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = es - Duser . country = ES ' " 
 + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = es - Duser . country = ES ' " 
 # unit tests in Finnish locale ( oraclejdk8 ) 
 - jdk : oraclejdk8 
 env : 
 - DESC = " tests fi " 
 - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = fi - Duser . country = FI ' " 
 + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = fi - Duser . country = FI ' " 
 # unit tests in French locale ( oraclejdk8 ) 
 - jdk : oraclejdk8 
 env : 
 - DESC = " tests fr " 
 - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = fr - Duser . country = FR ' " 
 + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = fr - Duser . country = FR ' " 
 # unit tests in Chinese locale ( oraclejdk8 ) 
 - jdk : oraclejdk8 
 env : 
 - DESC = " tests zh " 
 - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = zh - Duser . country = CN ' " 
 + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = zh - Duser . country = CN ' " 
 # unit tests in Japanese locale ( oraclejdk8 ) 
 - jdk : oraclejdk8 
 env : 
 - DESC = " tests ja " 
 - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = ja - Duser . country = JP ' " 
 + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = ja - Duser . country = JP ' " 
 # unit tests in Portuguese locale ( oraclejdk8 ) 
 - jdk : oraclejdk8 
 env : 
 - DESC = " tests pt " 
 - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = pt - Duser . country = PT ' " 
 + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = pt - Duser . country = PT ' " 
 # unit tests in Turkish locale ( oraclejdk8 ) 
 - jdk : oraclejdk8 
 env : 
 - DESC = " tests tr " 
 - - CMD = " mvn - X clean integration - test failsafe : verify - DargLine = ' - Duser . language = tr - Duser . country = TR ' " 
 + - CMD = " mvn clean integration - test failsafe : verify - DextraArgLine = ' - Duser . language = tr - Duser . country = TR ' " 
 
 # assembly ( oraclejdk8 ) 
 - jdk : oraclejdk8 
 diff - - git a / pom . xml b / pom . xml 
 index 5f0ea2b . . 3fe1eef 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 215 , 6 + 215 , 8 @ @ 
 < pitest . plugin . timeout . factor > 10 < / pitest . plugin . timeout . factor > 
 < pitest . plugin . timeout . constant > 50000 < / pitest . plugin . timeout . constant > 
 < pitest . plugin . threads > 4 < / pitest . plugin . threads > 
 + < ! - - argLine is required due unstable problem with Travis builds ; extraArgLine is used in Travis localized builds - - > 
 + < argLine > - Xms1024m - Xmx2048m $ { extraArgLine } < / argLine > 
 < / properties > 
 
 < ! - - that repositories are required for testing plugin ' s snapshot version - - > 
 @ @ - 860 , 9 + 862 , 6 @ @ 
 < artifactId > maven - surefire - plugin < / artifactId > 
 < version > 2 . 20 < / version > 
 < configuration > 
 - < ! - - Travis build workaround - - > 
 - < argLine > - Xms1024m - Xmx2048m < / argLine > 
 - 
 < systemPropertyVariables > 
 < jacoco - agent . destfile > $ { project . build . directory } / jacoco / jacoco . exec < / jacoco - agent . destfile > 
 < / systemPropertyVariables >

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 index 43c9001 . . dac8a70 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 @ @ - 34 , 13 + 34 , 17 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " blocks " + File . separator + filename ) ; 
 + + " blocks " + File . separator 
 + + " needbraces " + File . separator 
 + + filename ) ; 
 } 
 
 @ Override 
 protected String getNonCompilablePath ( String filename ) throws IOException { 
 return super . getNonCompilablePath ( " checks " + File . separator 
 - + " blocks " + File . separator + filename ) ; 
 + + " blocks " + File . separator 
 + + " needbraces " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 66 , 7 + 70 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 " 99 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 " 100 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputBraces . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNeedBraces . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 87 , 7 + 91 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 " 107 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 " 114 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNeedBracesSingleLineStatements . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 99 , 7 + 103 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 7 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " - > " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSingleLineLambda . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNeedBracesSingleLineLambda . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 112 , 7 + 116 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 " 72 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 " 75 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNeedBracesSingleLineStatements . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 131 , 7 + 135 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " tokens " , " LITERAL _ WHILE , LITERAL _ DO , LITERAL _ FOR " ) ; 
 checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputNeedBraces . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNeedBracesConditional . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 149 , 7 + 153 , 7 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 " 49 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " default " ) , 
 " 56 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " default " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputNeedBraces . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNeedBracesConditional . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputBraces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputBraces . java 
 deleted file mode 100644 
 index 702d68d . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputBraces . java 
 + + + / dev / null 
 @ @ - 1 , 119 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 - 
 - / * * 
 - * Test case for correct use of braces . 
 - * @ author Oliver Burn 
 - * * / 
 - class InputBraces 
 - { 
 - / * * @ return helper func * * / 
 - boolean condition ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - / * * Test do / while loops * * / 
 - void testDoWhile ( ) 
 - { 
 - / / Valid 
 - do { 
 - testDoWhile ( ) ; 
 - } 
 - while ( condition ( ) ) ; 
 - 
 - / / Invalid 
 - do testDoWhile ( ) ; while ( condition ( ) ) ; 
 - } 
 - 
 - / * * Test while loops * * / 
 - void testWhile ( ) 
 - { 
 - / / Valid 
 - while ( condition ( ) ) { 
 - testWhile ( ) ; 
 - } 
 - 
 - / / Invalid 
 - while ( condition ( ) ) ; 
 - while ( condition ( ) ) 
 - testWhile ( ) ; 
 - while ( condition ( ) ) 
 - if ( condition ( ) ) 
 - testWhile ( ) ; 
 - } 
 - 
 - / * * Test for loops * * / 
 - void testFor ( ) 
 - { 
 - / / Valid 
 - for ( int i = 1 ; i < 5 ; i + + ) { 
 - testFor ( ) ; 
 - } 
 - 
 - / / Invalid 
 - for ( int i = 1 ; i < 5 ; i + + ) ; 
 - for ( int i = 1 ; i < 5 ; i + + ) 
 - testFor ( ) ; 
 - for ( int i = 1 ; i < 5 ; 
 - i + + ) 
 - if ( i > 2 ) 
 - testFor ( ) ; 
 - } 
 - 
 - / * * Test if constructs * * / 
 - public void testIf ( ) 
 - { 
 - / / Valid 
 - if ( condition ( ) ) { 
 - testIf ( ) ; 
 - } 
 - else if ( condition ( ) ) { 
 - testIf ( ) ; 
 - } 
 - else { 
 - testIf ( ) ; 
 - } 
 - 
 - / / Invalid 
 - if ( condition ( ) ) ; 
 - if ( condition ( ) ) 
 - testIf ( ) ; 
 - if ( condition ( ) ) 
 - testIf ( ) ; 
 - else 
 - testIf ( ) ; 
 - if ( condition ( ) ) 
 - testIf ( ) ; 
 - else { 
 - testIf ( ) ; 
 - } 
 - if ( condition ( ) ) { 
 - testIf ( ) ; 
 - } 
 - else 
 - testIf ( ) ; 
 - if ( condition ( ) ) 
 - if ( condition ( ) ) 
 - testIf ( ) ; 
 - } 
 - 
 - void whitespaceAfterSemi ( ) 
 - { 
 - / / reject 
 - int i = 1 ; int j = 2 ; 
 - 
 - / / accept 
 - for ( ; ; ) { 
 - } 
 - } 
 - 
 - / * * Empty constructor block . * * / 
 - public InputBraces ( ) { } 
 - 
 - / * * Empty method block . * * / 
 - public void emptyImplementation ( ) { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputBracesSingleLineStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputBracesSingleLineStatements . java 
 deleted file mode 100644 
 index 5e89a77 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputBracesSingleLineStatements . java 
 + + + / dev / null 
 @ @ - 1 , 117 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 - 
 - public class InputBracesSingleLineStatements 
 - { 
 - private static class SomeClass { 
 - boolean flag = true ; 
 - private static boolean test ( boolean k ) { 
 - return k ; 
 - } 
 - } 
 - 
 - private int foo ( ) { 
 - if ( SomeClass . test ( true ) = = true ) return 4 ; / / No warning if ' mAllowSingleLineIf ' is true 
 - return 0 ; 
 - } 
 - 
 - private int foo1 ( ) { 
 - if ( SomeClass . test ( true ) = = true ) return 4 ; int k = 3 ; / / No warning if ' mAllowSingleLineIf ' is true 
 - return 0 ; 
 - } 
 - 
 - private int foo2 ( ) { 
 - if ( SomeClass . test ( true ) = = true ) / / Warning , not single - line if - statement 
 - return 4 ; 
 - return 0 ; 
 - } 
 - 
 - private int foo3 ( ) { 
 - if ( SomeClass . test ( true ) = = true ) if ( true ) return 4 ; / / Warning , complex block 
 - return 0 ; 
 - } 
 - 
 - private void foo ( Object o ) { 
 - if ( o ! = null ) this . notify ( ) ; 
 - } 
 - 
 - private void foo2 ( Object o ) { 
 - if ( o ! = null ) 
 - this . notify ( ) ; 
 - } 
 - 
 - private void loopTest ( Object o ) { 
 - while ( o ! = null ) { 
 - this . notify ( ) ; 
 - } 
 - while ( o ! = null ) 
 - this . notify ( ) ; 
 - while ( o ! = null ) this . notify ( ) ; 
 - do { 
 - this . notify ( ) ; 
 - } while ( o ! = null ) ; 
 - do this . notify ( ) ; while ( o ! = null ) ; 
 - do 
 - this . notify ( ) ; 
 - while ( o ! = null ) ; 
 - for ( ; ; ) 
 - break ; 
 - for ( ; ; ) break ; 
 - for ( int i = 0 ; i < 10 ; i + + ) { 
 - this . notify ( ) ; 
 - } 
 - for ( int i = 0 ; i < 10 ; i + + ) 
 - this . notify ( ) ; 
 - for ( int i = 0 ; ; ) this . notify ( ) ; 
 - } 
 - 
 - private int getSmth ( int num ) 
 - { 
 - int counter = 0 ; 
 - switch ( num ) { 
 - case 1 : counter + + ; break ; 
 - case 2 : 
 - counter + = 2 ; 
 - break ; 
 - case 3 : 
 - counter + = 3 ; 
 - break ; 
 - case 6 : counter + = 10 ; break ; 
 - default : counter = 100 ; break ; 
 - } 
 - return counter ; 
 - } 
 - 
 - private void testElse ( int k ) { 
 - if ( k = = 4 ) System . identityHashCode ( " yes " ) ; 
 - else System . identityHashCode ( " no " ) ; 
 - for ( ; ; ) ; 
 - } 
 - 
 - private int testMissingWarnings ( ) { 
 - if ( true ) 
 - throw new RuntimeException ( ) ; 
 - if ( true ) { 
 - return 1 ; 
 - } else 
 - return 2 ; 
 - } 
 - 
 - void enhancedForLoop ( int [ ] array ) { 
 - for ( int value : array ) return ; 
 - } 
 - 
 - int [ ] sourceLocators ; 
 - 
 - private class StateInfo { 
 - public boolean isInitial ( ) { 
 - for ( int locator : sourceLocators ) if ( locator ! = 0 ) return false ; 
 - return true ; 
 - } 
 - } 
 - 
 - private void forEachLoop ( ) { 
 - for ( String s : new String [ ] { " " } ) break ; 
 - for ( String s : new String [ ] { " " } ) 
 - break ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBraces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBraces . java 
 deleted file mode 100644 
 index 74a8f9e . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBraces . java 
 + + + / dev / null 
 @ @ - 1 , 61 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 - 
 - public class InputNeedBraces 
 - { 
 - public void method ( ) { 
 - if ( false ) 
 - while ( true ) 
 - { 
 - 
 - } 
 - 
 - if ( true ) 
 - do { 
 - int a = 1 ; 
 - } 
 - while ( true ) ; 
 - 
 - if ( true ) 
 - for ( ; ; ) { 
 - assert true ; } 
 - 
 - if ( true ) { 
 - 
 - } else { 
 - 
 - } 
 - 
 - switch ( 1 ) { 
 - case 1 : { 
 - break ; 
 - } 
 - } 
 - 
 - switch ( 1 ) { 
 - case 1 : System . lineSeparator ( ) ; 
 - case 2 : { break ; } 
 - 
 - case 3 : { 
 - break ; } 
 - 
 - case 4 : 
 - break ; 
 - 
 - case 5 : System . lineSeparator ( ) ; 
 - break ; 
 - } 
 - 
 - switch ( 1 ) { 
 - default : 
 - { 
 - 
 - } 
 - } 
 - 
 - switch ( 1 ) { 
 - default : 
 - break ; 
 - } 
 - 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesEmptyDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesEmptyDefault . java 
 deleted file mode 100644 
 index d482bdd . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesEmptyDefault . java 
 + + + / dev / null 
 @ @ - 1 , 19 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 - 
 - public class InputNeedBracesEmptyDefault { 
 - int value ; 
 - private void main ( ) { 
 - switch ( value ) { 
 - default : 
 - } 
 - } 
 - private void main1 ( ) { 
 - switch ( value ) { 
 - case 1 : 
 - } 
 - } 
 - } 
 - 
 - @ interface Example { 
 - String priority ( ) default " value " ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesNoBodyLoops . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesNoBodyLoops . java 
 deleted file mode 100644 
 index cf74266 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesNoBodyLoops . java 
 + + + / dev / null 
 @ @ - 1 , 123 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 - 
 - public class InputNeedBracesNoBodyLoops { 
 - 
 - private int value ; 
 - private InputNeedBracesNoBodyLoops fco = new InputNeedBracesNoBodyLoops ( ) ; 
 - 
 - { 
 - value = 0 ; 
 - while ( incrementValue ( ) < 5 ) ; ; 
 - } 
 - 
 - public void foo ( ) { 
 - while ( incrementValue ( ) < 5 ) ; 
 - } 
 - 
 - public void foo2 ( ) { 
 - for ( int i = 0 ; i < 10 ; incrementValue ( ) ) ; 
 - for ( int i = 0 ; incrementValue ( ) < 8 ; i + + ) ; 
 - } 
 - 
 - public void foo3 ( ) { 
 - while ( incrementValue ( ) 
 - < 5 ) ; 
 - } 
 - 
 - public void foo4 ( ) { 
 - while ( incrementValue ( ) < 5 ) 
 - ; 
 - } 
 - 
 - public void foo5 ( ) { 
 - while ( incrementValue ( ) 
 - < 5 ) 
 - ; 
 - } 
 - 
 - public void foo6 ( ) { 
 - while ( 
 - incrementValue ( ) < 5 
 - ) ; 
 - } 
 - 
 - public void foo7 ( ) { 
 - while ( 
 - incrementValue ( ) < 5 ) ; 
 - } 
 - 
 - public void foo8 ( ) { 
 - for ( int i = 0 ; incrementValue ( ) < 8 ; i + + ) ; 
 - } 
 - 
 - public void foo9 ( ) { 
 - for ( int i = 0 ; 
 - incrementValue ( ) < 8 ; 
 - i + + ) ; 
 - } 
 - 
 - public void foo10 ( ) { 
 - for ( 
 - int i = 0 ; 
 - incrementValue ( ) < 8 ; 
 - i + + ) ; 
 - } 
 - 
 - public void foo11 ( ) { 
 - for 
 - ( 
 - int i = 0 ; 
 - incrementValue ( ) < 8 ; 
 - i + + 
 - ) 
 - ; 
 - } 
 - 
 - public void foo12 ( ) { 
 - for ( int i = 0 ; incrementValue ( ) < 8 ; i + + ) { 
 - int a = 5 ; 
 - } 
 - } 
 - 
 - public void foo14 ( ) { 
 - while ( incrementValue ( ) < 5 ) { 
 - return ; 
 - } 
 - } 
 - 
 - public void foo15 ( ) { 
 - while ( true ) ; 
 - } 
 - 
 - public void foo16 ( ) { 
 - for ( ; ; ) ; 
 - } 
 - 
 - public void foo17 ( ) { 
 - if ( true ) ; 
 - } 
 - 
 - public void foo18 ( ) { 
 - if ( true ) { 
 - int a ; 
 - } 
 - } 
 - 
 - @ Override 
 - public String toString ( ) { 
 - while ( fco . removeAssignedRole ( this ) ) ; 
 - return " " ; 
 - } 
 - 
 - private boolean removeAssignedRole ( InputNeedBracesNoBodyLoops inputNeedBracesNoBodyLoops ) { 
 - return true ; 
 - } 
 - 
 - private int incrementValue ( ) { 
 - return value + + ; 
 - } 
 - 
 - private void decrementValue ( ) { 
 - value - - ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSingleLineLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSingleLineLambda . java 
 deleted file mode 100644 
 index d3a15d5 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputSingleLineLambda . java 
 + + + / dev / null 
 @ @ - 1 , 10 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 - 
 - public class InputSingleLineLambda { 
 - 
 - static Runnable r1 = ( ) - > String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world one ! " ) ; 
 - static Runnable r2 = ( ) - > String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world two ! " ) ; 
 - static Runnable r3 = ( ) - > 
 - String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world two ! " ) ; 
 - static Runnable r4 = ( ) - > { String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world two ! " ) ; } ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBraces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBraces . java 
 new file mode 100644 
 index 0000000 . . 5a04483 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBraces . java 
 @ @ - 0 , 0 + 1 , 119 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . needbraces ; 
 + 
 + / * * 
 + * Test case for correct use of braces . 
 + * @ author Oliver Burn 
 + * * / 
 + class InputNeedBraces 
 + { 
 + / * * @ return helper func * * / 
 + boolean condition ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + / * * Test do / while loops * * / 
 + void testDoWhile ( ) 
 + { 
 + / / Valid 
 + do { 
 + testDoWhile ( ) ; 
 + } 
 + while ( condition ( ) ) ; 
 + 
 + / / Invalid 
 + do testDoWhile ( ) ; while ( condition ( ) ) ; 
 + } 
 + 
 + / * * Test while loops * * / 
 + void testWhile ( ) 
 + { 
 + / / Valid 
 + while ( condition ( ) ) { 
 + testWhile ( ) ; 
 + } 
 + 
 + / / Invalid 
 + while ( condition ( ) ) ; 
 + while ( condition ( ) ) 
 + testWhile ( ) ; 
 + while ( condition ( ) ) 
 + if ( condition ( ) ) 
 + testWhile ( ) ; 
 + } 
 + 
 + / * * Test for loops * * / 
 + void testFor ( ) 
 + { 
 + / / Valid 
 + for ( int i = 1 ; i < 5 ; i + + ) { 
 + testFor ( ) ; 
 + } 
 + 
 + / / Invalid 
 + for ( int i = 1 ; i < 5 ; i + + ) ; 
 + for ( int i = 1 ; i < 5 ; i + + ) 
 + testFor ( ) ; 
 + for ( int i = 1 ; i < 5 ; 
 + i + + ) 
 + if ( i > 2 ) 
 + testFor ( ) ; 
 + } 
 + 
 + / * * Test if constructs * * / 
 + public void testIf ( ) 
 + { 
 + / / Valid 
 + if ( condition ( ) ) { 
 + testIf ( ) ; 
 + } 
 + else if ( condition ( ) ) { 
 + testIf ( ) ; 
 + } 
 + else { 
 + testIf ( ) ; 
 + } 
 + 
 + / / Invalid 
 + if ( condition ( ) ) ; 
 + if ( condition ( ) ) 
 + testIf ( ) ; 
 + if ( condition ( ) ) 
 + testIf ( ) ; 
 + else 
 + testIf ( ) ; 
 + if ( condition ( ) ) 
 + testIf ( ) ; 
 + else { 
 + testIf ( ) ; 
 + } 
 + if ( condition ( ) ) { 
 + testIf ( ) ; 
 + } 
 + else 
 + testIf ( ) ; 
 + if ( condition ( ) ) 
 + if ( condition ( ) ) 
 + testIf ( ) ; 
 + } 
 + 
 + void whitespaceAfterSemi ( ) 
 + { 
 + / / reject 
 + int i = 1 ; int j = 2 ; 
 + 
 + / / accept 
 + for ( ; ; ) { 
 + } 
 + } 
 + 
 + / * * Empty constructor block . * * / 
 + public InputNeedBraces ( ) { } 
 + 
 + / * * Empty method block . * * / 
 + public void emptyImplementation ( ) { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesConditional . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesConditional . java 
 new file mode 100644 
 index 0000000 . . 765fb99 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesConditional . java 
 @ @ - 0 , 0 + 1 , 61 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . needbraces ; 
 + 
 + public class InputNeedBracesConditional 
 + { 
 + public void method ( ) { 
 + if ( false ) 
 + while ( true ) 
 + { 
 + 
 + } 
 + 
 + if ( true ) 
 + do { 
 + int a = 1 ; 
 + } 
 + while ( true ) ; 
 + 
 + if ( true ) 
 + for ( ; ; ) { 
 + assert true ; } 
 + 
 + if ( true ) { 
 + 
 + } else { 
 + 
 + } 
 + 
 + switch ( 1 ) { 
 + case 1 : { 
 + break ; 
 + } 
 + } 
 + 
 + switch ( 1 ) { 
 + case 1 : System . lineSeparator ( ) ; 
 + case 2 : { break ; } 
 + 
 + case 3 : { 
 + break ; } 
 + 
 + case 4 : 
 + break ; 
 + 
 + case 5 : System . lineSeparator ( ) ; 
 + break ; 
 + } 
 + 
 + switch ( 1 ) { 
 + default : 
 + { 
 + 
 + } 
 + } 
 + 
 + switch ( 1 ) { 
 + default : 
 + break ; 
 + } 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesEmptyDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesEmptyDefault . java 
 new file mode 100644 
 index 0000000 . . d8abe01 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesEmptyDefault . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . needbraces ; 
 + 
 + public class InputNeedBracesEmptyDefault { 
 + int value ; 
 + private void main ( ) { 
 + switch ( value ) { 
 + default : 
 + } 
 + } 
 + private void main1 ( ) { 
 + switch ( value ) { 
 + case 1 : 
 + } 
 + } 
 + } 
 + 
 + @ interface Example { 
 + String priority ( ) default " value " ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesNoBodyLoops . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesNoBodyLoops . java 
 new file mode 100644 
 index 0000000 . . 94d1144 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesNoBodyLoops . java 
 @ @ - 0 , 0 + 1 , 123 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . needbraces ; 
 + 
 + public class InputNeedBracesNoBodyLoops { 
 + 
 + private int value ; 
 + private InputNeedBracesNoBodyLoops fco = new InputNeedBracesNoBodyLoops ( ) ; 
 + 
 + { 
 + value = 0 ; 
 + while ( incrementValue ( ) < 5 ) ; ; 
 + } 
 + 
 + public void foo ( ) { 
 + while ( incrementValue ( ) < 5 ) ; 
 + } 
 + 
 + public void foo2 ( ) { 
 + for ( int i = 0 ; i < 10 ; incrementValue ( ) ) ; 
 + for ( int i = 0 ; incrementValue ( ) < 8 ; i + + ) ; 
 + } 
 + 
 + public void foo3 ( ) { 
 + while ( incrementValue ( ) 
 + < 5 ) ; 
 + } 
 + 
 + public void foo4 ( ) { 
 + while ( incrementValue ( ) < 5 ) 
 + ; 
 + } 
 + 
 + public void foo5 ( ) { 
 + while ( incrementValue ( ) 
 + < 5 ) 
 + ; 
 + } 
 + 
 + public void foo6 ( ) { 
 + while ( 
 + incrementValue ( ) < 5 
 + ) ; 
 + } 
 + 
 + public void foo7 ( ) { 
 + while ( 
 + incrementValue ( ) < 5 ) ; 
 + } 
 + 
 + public void foo8 ( ) { 
 + for ( int i = 0 ; incrementValue ( ) < 8 ; i + + ) ; 
 + } 
 + 
 + public void foo9 ( ) { 
 + for ( int i = 0 ; 
 + incrementValue ( ) < 8 ; 
 + i + + ) ; 
 + } 
 + 
 + public void foo10 ( ) { 
 + for ( 
 + int i = 0 ; 
 + incrementValue ( ) < 8 ; 
 + i + + ) ; 
 + } 
 + 
 + public void foo11 ( ) { 
 + for 
 + ( 
 + int i = 0 ; 
 + incrementValue ( ) < 8 ; 
 + i + + 
 + ) 
 + ; 
 + } 
 + 
 + public void foo12 ( ) { 
 + for ( int i = 0 ; incrementValue ( ) < 8 ; i + + ) { 
 + int a = 5 ; 
 + } 
 + } 
 + 
 + public void foo14 ( ) { 
 + while ( incrementValue ( ) < 5 ) { 
 + return ; 
 + } 
 + } 
 + 
 + public void foo15 ( ) { 
 + while ( true ) ; 
 + } 
 + 
 + public void foo16 ( ) { 
 + for ( ; ; ) ; 
 + } 
 + 
 + public void foo17 ( ) { 
 + if ( true ) ; 
 + } 
 + 
 + public void foo18 ( ) { 
 + if ( true ) { 
 + int a ; 
 + } 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + while ( fco . removeAssignedRole ( this ) ) ; 
 + return " " ; 
 + } 
 + 
 + private boolean removeAssignedRole ( InputNeedBracesNoBodyLoops inputNeedBracesNoBodyLoops ) { 
 + return true ; 
 + } 
 + 
 + private int incrementValue ( ) { 
 + return value + + ; 
 + } 
 + 
 + private void decrementValue ( ) { 
 + value - - ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesSingleLineLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesSingleLineLambda . java 
 new file mode 100644 
 index 0000000 . . b3e5737 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesSingleLineLambda . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . needbraces ; 
 + 
 + public class InputNeedBracesSingleLineLambda { 
 + 
 + static Runnable r1 = ( ) - > String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world one ! " ) ; 
 + static Runnable r2 = ( ) - > String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world two ! " ) ; 
 + static Runnable r3 = ( ) - > 
 + String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world two ! " ) ; 
 + static Runnable r4 = ( ) - > { String . CASE _ INSENSITIVE _ ORDER . equals ( " Hello world two ! " ) ; } ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesSingleLineStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesSingleLineStatements . java 
 new file mode 100644 
 index 0000000 . . a116339 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / needbraces / InputNeedBracesSingleLineStatements . java 
 @ @ - 0 , 0 + 1 , 117 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . needbraces ; 
 + 
 + public class InputNeedBracesSingleLineStatements 
 + { 
 + private static class SomeClass { 
 + boolean flag = true ; 
 + private static boolean test ( boolean k ) { 
 + return k ; 
 + } 
 + } 
 + 
 + private int foo ( ) { 
 + if ( SomeClass . test ( true ) = = true ) return 4 ; / / No warning if ' mAllowSingleLineIf ' is true 
 + return 0 ; 
 + } 
 + 
 + private int foo1 ( ) { 
 + if ( SomeClass . test ( true ) = = true ) return 4 ; int k = 3 ; / / No warning if ' mAllowSingleLineIf ' is true 
 + return 0 ; 
 + } 
 + 
 + private int foo2 ( ) { 
 + if ( SomeClass . test ( true ) = = true ) / / Warning , not single - line if - statement 
 + return 4 ; 
 + return 0 ; 
 + } 
 + 
 + private int foo3 ( ) { 
 + if ( SomeClass . test ( true ) = = true ) if ( true ) return 4 ; / / Warning , complex block 
 + return 0 ; 
 + } 
 + 
 + private void foo ( Object o ) { 
 + if ( o ! = null ) this . notify ( ) ; 
 + } 
 + 
 + private void foo2 ( Object o ) { 
 + if ( o ! = null ) 
 + this . notify ( ) ; 
 + } 
 + 
 + private void loopTest ( Object o ) { 
 + while ( o ! = null ) { 
 + this . notify ( ) ; 
 + } 
 + while ( o ! = null ) 
 + this . notify ( ) ; 
 + while ( o ! = null ) this . notify ( ) ; 
 + do { 
 + this . notify ( ) ; 
 + } while ( o ! = null ) ; 
 + do this . notify ( ) ; while ( o ! = null ) ; 
 + do 
 + this . notify ( ) ; 
 + while ( o ! = null ) ; 
 + for ( ; ; ) 
 + break ; 
 + for ( ; ; ) break ; 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + this . notify ( ) ; 
 + } 
 + for ( int i = 0 ; i < 10 ; i + + ) 
 + this . notify ( ) ; 
 + for ( int i = 0 ; ; ) this . notify ( ) ; 
 + } 
 + 
 + private int getSmth ( int num ) 
 + { 
 + int counter = 0 ; 
 + switch ( num ) { 
 + case 1 : counter + + ; break ; 
 + case 2 : 
 + counter + = 2 ; 
 + break ; 
 + case 3 : 
 + counter + = 3 ; 
 + break ; 
 + case 6 : counter + = 10 ; break ; 
 + default : counter = 100 ; break ; 
 + } 
 + return counter ; 
 + } 
 + 
 + private void testElse ( int k ) { 
 + if ( k = = 4 ) System . identityHashCode ( " yes " ) ; 
 + else System . identityHashCode ( " no " ) ; 
 + for ( ; ; ) ; 
 + } 
 + 
 + private int testMissingWarnings ( ) { 
 + if ( true ) 
 + throw new RuntimeException ( ) ; 
 + if ( true ) { 
 + return 1 ; 
 + } else 
 + return 2 ; 
 + } 
 + 
 + void enhancedForLoop ( int [ ] array ) { 
 + for ( int value : array ) return ; 
 + } 
 + 
 + int [ ] sourceLocators ; 
 + 
 + private class StateInfo { 
 + public boolean isInitial ( ) { 
 + for ( int locator : sourceLocators ) if ( locator ! = 0 ) return false ; 
 + return true ; 
 + } 
 + } 
 + 
 + private void forEachLoop ( ) { 
 + for ( String s : new String [ ] { " " } ) break ; 
 + for ( String s : new String [ ] { " " } ) 
 + break ; 
 + } 
 + }
