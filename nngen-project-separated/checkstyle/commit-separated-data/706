BLEU SCORE: 0.05439330544349821

TEST MSG: Issue # 4575 : Modified NPathComplexityCheckTest . java and moved its input files to the npathcomplexity subdirectory
GENERATED MSG: Issue # 2161 : unify test input locations for metrics package

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> index 955f2e8 . . 88bf0b7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> @ @ - 41 , 7 + 41 , 7 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " metrics " + File . separator + filename ) ; <nl> + + " metrics " + File . separator + " npathcomplexity " + File . separator + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 62 , 7 + 62 , 7 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { <nl> " 104 : 13 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputComplexity . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNPathComplexityDefault . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 104 , 7 + 104 , 7 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { <nl> " 13 : 5 : " + getCheckMessage ( MSG _ KEY , largerThanMaxInt , 0 ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputComplexityOverflow . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNPathComplexityOverflow . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 114 , 7 + 114 , 7 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { <nl> <nl> createChecker ( checkConfig ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputComplexity . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNPathComplexityDefault . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java <nl> deleted file mode 100644 <nl> index 0d44a79 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java <nl> + + + / dev / null <nl> @ @ - 1 , 112 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> - <nl> - public class InputComplexity { <nl> - / / NP = 2 <nl> - public void foo ( ) { <nl> - / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 <nl> - while ( true ) { <nl> - Runnable runnable = new Runnable ( ) { <nl> - / / NP = 2 <nl> - public void run ( ) { <nl> - / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 <nl> - while ( true ) { <nl> - } <nl> - } <nl> - } ; <nl> - <nl> - new Thread ( runnable ) . start ( ) ; <nl> - } <nl> - } <nl> - <nl> - / / NP = 10 <nl> - public void bar ( ) { <nl> - / / NP = ( if - range = 3 * 3 ) + ( expr = 0 ) + 1 = 10 <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 1 ) = 3 <nl> - if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 1 ) = 3 <nl> - if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - } <nl> - } <nl> - <nl> - / / NP = 3 <nl> - public void simpleElseIf ( ) { <nl> - / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - / / NP = 7 <nl> - public void stupidElseIf ( ) { <nl> - / / NP = ( if - range = 1 ) + ( else - range = 3 * 2 ) + ( expr = 0 ) = 7 <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - / / NP = ( if - range = 1 ) + ( else - range = 2 ) + ( expr = 0 ) = 3 <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - } <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - } <nl> - } <nl> - <nl> - / / NP = 3 <nl> - public InputComplexity ( ) <nl> - { <nl> - int i = 1 ; <nl> - / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - / / STATIC _ INIT <nl> - / / NP = 3 <nl> - static { <nl> - int i = 1 ; <nl> - / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - / / INSTANCE _ INIT <nl> - / / NP = 3 <nl> - { <nl> - int i = 1 ; <nl> - / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - / * * Inner * / <nl> - / / NP = 0 <nl> - public InputComplexity ( int aParam ) <nl> - { <nl> - Runnable runnable = new Runnable ( ) { <nl> - / / NP = 2 <nl> - public void run ( ) { <nl> - / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 <nl> - while ( true ) { <nl> - } <nl> - } <nl> - } ; <nl> - new Thread ( runnable ) . start ( ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java <nl> deleted file mode 100644 <nl> index 6a49ca2 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java <nl> + + + / dev / null <nl> @ @ - 1 , 256 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> - <nl> - / * * <nl> - * This class has methods that have an NPath complexity larger than MAXINT . <nl> - * Test case for bug 1654769 . <nl> - * / <nl> - public class InputComplexityOverflow { <nl> - <nl> - / * NP = ( if - range [ 1 ] = 9 ) * ( if - range [ 2 ] = 9 ) * ( if - range [ 3 ] = 9 ) * ( if - range [ 4 ] = 9 ) <nl> - * ( if - range [ 5 ] = 9 ) * ( if - range [ 6 ] = 9 ) * ( if - range [ 7 ] = 9 ) * ( if - range [ 8 ] = 9 ) <nl> - * ( if - range [ 9 ] = 9 ) * ( if - range [ 10 ] = 9 ) = 3486784401 <nl> - * / <nl> - public void provokeNpathIntegerOverflow ( ) <nl> - { <nl> - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> - if ( true ) { <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( true ) { <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputNPathComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputNPathComplexity . java <nl> deleted file mode 100644 <nl> index c4ce470 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputNPathComplexity . java <nl> + + + / dev / null <nl> @ @ - 1 , 178 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> - / / Advise : for lack of ambiguity try to make all factors prime numbers <nl> - public class InputNPathComplexity { <nl> - / / NP = 5 <nl> - void testIfWithExpression ( ) { <nl> - / / NP = ( if - range = 1 ) + 1 + ( expr = 3 ) = 5 <nl> - if ( true & & true | | ( true | | true ) ) { } <nl> - } <nl> - <nl> - / / NP = 5 <nl> - void testIfElseWithExpression ( ) { <nl> - / / NP = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 3 ) = 5 <nl> - if ( true & & true | | ( true | | true ) ) { } <nl> - else { } <nl> - } <nl> - <nl> - / / NP = 4 <nl> - int testSimpleSwitch ( ) { <nl> - int a = 0 ; <nl> - / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) <nl> - / / + ( default - range = 1 ) + ( expr = 0 ) = 4 <nl> - switch ( a ) { <nl> - case 1 : <nl> - break ; <nl> - case 2 : <nl> - case 3 : <nl> - break ; <nl> - } <nl> - return a ; <nl> - } <nl> - <nl> - / / NP = 4 <nl> - void testSimpleSwitchWithDefault ( ) { <nl> - int a = 0 ; <nl> - / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) <nl> - / / + ( default - range = 1 ) + ( expr = 0 ) = 4 <nl> - switch ( a ) { <nl> - case 1 : <nl> - break ; <nl> - case 2 : <nl> - case 3 : <nl> - break ; <nl> - default : <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - / / NP = 6 <nl> - void testSwitchWithExpression ( ) { <nl> - int a = 0 ; <nl> - / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) <nl> - / / + ( default - range = 1 ) + ( expr = 2 ) = 6 <nl> - switch ( true ? a : a ) { <nl> - case 1 : <nl> - break ; <nl> - case 2 : <nl> - case 3 : <nl> - break ; <nl> - default : <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - / / NP = 15 <nl> - void testComplexSwitch ( ) { <nl> - int a = 0 ; <nl> - / / NP = ( case - range [ 1 ] = 2 ) + ( case - range [ 2 ] = 5 * 2 ) + ( case - range [ 3 ] = 2 ) <nl> - / / + ( default - range = 1 ) + ( expr = 0 ) = 15 <nl> - switch ( a ) { <nl> - case 1 : <nl> - / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( true ) { } <nl> - break ; <nl> - case 2 : <nl> - / / NP ( case - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 3 ) = 5 <nl> - if ( true & & true | | ( true | | true ) ) { } <nl> - else { } <nl> - / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( true ) { } <nl> - case 3 : <nl> - / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> - if ( true ) { } <nl> - break ; <nl> - default : <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - / / NP = 11 <nl> - void testComplexIfElse ( ) { <nl> - / / NP = ( if - range = 1 ) + ( else - range = 9 ) + ( expr = 1 ) = 11 <nl> - if ( true & & true ) { } <nl> - / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 6 ) + ( expr = 2 ) = 9 <nl> - else if ( true | | true | | true ) { } <nl> - / / NP ( else - range ) = ( if - range = 1 ) + 1 + ( expr = 4 ) = 6 <nl> - else if ( true & & true & & true | | true | | true ) { } <nl> - } <nl> - <nl> - / / NP = 8 <nl> - boolean testComplexReturn ( ) { <nl> - / / NP = ( if - range = 3 ) + ( else - range = 4 ) + ( expr = 1 ) = 8 <nl> - if ( true & & true ) { <nl> - / / NP ( if - range ) = 3 <nl> - return true & & true | | ( true & & true ) ; <nl> - } else { <nl> - / / NP ( else - range ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 ) + ( expr ( 3 ) = 1 ) + 2 = 4 <nl> - return true ? true & & true : true | | true ; <nl> - } <nl> - } <nl> - <nl> - / / NP = ( for - statement [ 1 ] = 2 ) * ( for - statement [ 2 ] = 3 ) <nl> - / / * ( for - statement [ 3 ] = 4 ) * ( for - statement [ 4 ] = 5 ) = 120 <nl> - void testForCyclesComplex ( ) { <nl> - / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 0 ) + 1 = 2 <nl> - for ( int i = 0 ; i < 10 ; i + + ) ; <nl> - / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 ) + ( expr ( 3 ) = 0 ) + 1 = 3 <nl> - for ( int i = 0 ; i < 10 & & true ; i + + ) ; <nl> - / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 2 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 0 ) + 1 = 4 <nl> - for ( int i = true ? 0 : 0 ; i < 10 ; i + + ) ; <nl> - / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 + 2 ) + ( expr ( 3 ) = 0 ) + 1 = 5 <nl> - for ( int i = 0 ; true ? i < 10 : true | | true ; i + + ) ; <nl> - } <nl> - <nl> - / / NP = ( while - statement [ 1 ] = 2 ) * ( while - statement [ 2 ] = 3 ) = 6 <nl> - boolean testWhileCyclesComplex ( ) { <nl> - int a = 0 ; <nl> - / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 <nl> - while ( a ! = 0 ) { } <nl> - / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 1 ) + 1 = 3 <nl> - while ( a ! = 0 & & a = = 0 ) { return a = = 0 | | a = = 0 ; } <nl> - return true ; <nl> - } <nl> - <nl> - / / NP = ( do - statement [ 1 ] = 6 ) * ( do - statement [ 2 ] = 3 ) = 21 <nl> - void testDoWhileCyclesComplex ( ) { <nl> - int a = 0 ; <nl> - / / NP ( do - statement ) = ( do - range = 1 ) + ( expr = 1 ) + 1 = 3 <nl> - do { } while ( a < 10 & & true ) ; <nl> - / / NP ( do - statement ) = <nl> - / / ( do - range = 3 ) + ( ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 1 ) + 2 ) + 1 = 7 <nl> - do { <nl> - / / NP ( do - range ) = ( do - range = 1 ) + ( expr = 1 ) + 1 = 3 <nl> - do { } while ( a < 10 | | true ) ; <nl> - } while ( true ? a > 10 : ( a < 10 | | true ) ) ; <nl> - } <nl> - <nl> - / / NP = ( question - statement [ 1 ] = 5 ) * ( question - statement [ 2 ] = 7 ) = 35 <nl> - void testComplexTernaryOperator ( ) { <nl> - / / NP ( question - statement ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 2 ) + ( expr ( 3 ) = 1 + 2 ) + 2 = 7 <nl> - boolean a = true ? ( true ? true : true ) : ( false ? ( true | | false ) : true ) ; <nl> - / / NP ( question - statement ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 2 ) + ( expr ( 3 ) = 1 ) + 2 = 5 ; <nl> - boolean b = true ? ( true ? true : true ) : true | | true ; <nl> - } <nl> - <nl> - / / NP = ( if - expression [ 1 ] = 5 ) * ( if - expression [ 2 ] = 5 ) = 25 <nl> - void testSimpleTernaryBadFormatting ( ) { <nl> - / / NP ( if - expression ) = ( if - range = 2 ) + 1 + ( expr = 2 ) = 5 <nl> - if ( <nl> - true ? true : true <nl> - ) { boolean a = true ? true <nl> - : true ; <nl> - } <nl> - / / NP ( if - expression ) = ( if - range = 2 ) + 1 + ( expr = 2 ) = 5 <nl> - if ( <nl> - true ? true : true ) { boolean b = true ? true : true ; <nl> - } <nl> - } <nl> - <nl> - / / Calculation for try - catch is wrong now <nl> - / / See issue # 3814 https : / / github . com / checkstyle / checkstyle / issues / 3814 <nl> - void testTryCatch ( ) { <nl> - try { <nl> - } <nl> - catch ( Exception e ) { <nl> - } <nl> - } <nl> - <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexity . java <nl> new file mode 100644 <nl> index 0000000 . . 105a8bf <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexity . java <nl> @ @ - 0 , 0 + 1 , 178 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics . npathcomplexity ; <nl> + / / Advise : for lack of ambiguity try to make all factors prime numbers <nl> + public class InputNPathComplexity { <nl> + / / NP = 5 <nl> + void testIfWithExpression ( ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 3 ) = 5 <nl> + if ( true & & true | | ( true | | true ) ) { } <nl> + } <nl> + <nl> + / / NP = 5 <nl> + void testIfElseWithExpression ( ) { <nl> + / / NP = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 3 ) = 5 <nl> + if ( true & & true | | ( true | | true ) ) { } <nl> + else { } <nl> + } <nl> + <nl> + / / NP = 4 <nl> + int testSimpleSwitch ( ) { <nl> + int a = 0 ; <nl> + / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) <nl> + / / + ( default - range = 1 ) + ( expr = 0 ) = 4 <nl> + switch ( a ) { <nl> + case 1 : <nl> + break ; <nl> + case 2 : <nl> + case 3 : <nl> + break ; <nl> + } <nl> + return a ; <nl> + } <nl> + <nl> + / / NP = 4 <nl> + void testSimpleSwitchWithDefault ( ) { <nl> + int a = 0 ; <nl> + / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) <nl> + / / + ( default - range = 1 ) + ( expr = 0 ) = 4 <nl> + switch ( a ) { <nl> + case 1 : <nl> + break ; <nl> + case 2 : <nl> + case 3 : <nl> + break ; <nl> + default : <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + / / NP = 6 <nl> + void testSwitchWithExpression ( ) { <nl> + int a = 0 ; <nl> + / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) <nl> + / / + ( default - range = 1 ) + ( expr = 2 ) = 6 <nl> + switch ( true ? a : a ) { <nl> + case 1 : <nl> + break ; <nl> + case 2 : <nl> + case 3 : <nl> + break ; <nl> + default : <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + / / NP = 15 <nl> + void testComplexSwitch ( ) { <nl> + int a = 0 ; <nl> + / / NP = ( case - range [ 1 ] = 2 ) + ( case - range [ 2 ] = 5 * 2 ) + ( case - range [ 3 ] = 2 ) <nl> + / / + ( default - range = 1 ) + ( expr = 0 ) = 15 <nl> + switch ( a ) { <nl> + case 1 : <nl> + / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { } <nl> + break ; <nl> + case 2 : <nl> + / / NP ( case - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 3 ) = 5 <nl> + if ( true & & true | | ( true | | true ) ) { } <nl> + else { } <nl> + / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { } <nl> + case 3 : <nl> + / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { } <nl> + break ; <nl> + default : <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + / / NP = 11 <nl> + void testComplexIfElse ( ) { <nl> + / / NP = ( if - range = 1 ) + ( else - range = 9 ) + ( expr = 1 ) = 11 <nl> + if ( true & & true ) { } <nl> + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 6 ) + ( expr = 2 ) = 9 <nl> + else if ( true | | true | | true ) { } <nl> + / / NP ( else - range ) = ( if - range = 1 ) + 1 + ( expr = 4 ) = 6 <nl> + else if ( true & & true & & true | | true | | true ) { } <nl> + } <nl> + <nl> + / / NP = 8 <nl> + boolean testComplexReturn ( ) { <nl> + / / NP = ( if - range = 3 ) + ( else - range = 4 ) + ( expr = 1 ) = 8 <nl> + if ( true & & true ) { <nl> + / / NP ( if - range ) = 3 <nl> + return true & & true | | ( true & & true ) ; <nl> + } else { <nl> + / / NP ( else - range ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 ) + ( expr ( 3 ) = 1 ) + 2 = 4 <nl> + return true ? true & & true : true | | true ; <nl> + } <nl> + } <nl> + <nl> + / / NP = ( for - statement [ 1 ] = 2 ) * ( for - statement [ 2 ] = 3 ) <nl> + / / * ( for - statement [ 3 ] = 4 ) * ( for - statement [ 4 ] = 5 ) = 120 <nl> + void testForCyclesComplex ( ) { <nl> + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 0 ) + 1 = 2 <nl> + for ( int i = 0 ; i < 10 ; i + + ) ; <nl> + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 ) + ( expr ( 3 ) = 0 ) + 1 = 3 <nl> + for ( int i = 0 ; i < 10 & & true ; i + + ) ; <nl> + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 2 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 0 ) + 1 = 4 <nl> + for ( int i = true ? 0 : 0 ; i < 10 ; i + + ) ; <nl> + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 + 2 ) + ( expr ( 3 ) = 0 ) + 1 = 5 <nl> + for ( int i = 0 ; true ? i < 10 : true | | true ; i + + ) ; <nl> + } <nl> + <nl> + / / NP = ( while - statement [ 1 ] = 2 ) * ( while - statement [ 2 ] = 3 ) = 6 <nl> + boolean testWhileCyclesComplex ( ) { <nl> + int a = 0 ; <nl> + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 <nl> + while ( a ! = 0 ) { } <nl> + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 1 ) + 1 = 3 <nl> + while ( a ! = 0 & & a = = 0 ) { return a = = 0 | | a = = 0 ; } <nl> + return true ; <nl> + } <nl> + <nl> + / / NP = ( do - statement [ 1 ] = 6 ) * ( do - statement [ 2 ] = 3 ) = 21 <nl> + void testDoWhileCyclesComplex ( ) { <nl> + int a = 0 ; <nl> + / / NP ( do - statement ) = ( do - range = 1 ) + ( expr = 1 ) + 1 = 3 <nl> + do { } while ( a < 10 & & true ) ; <nl> + / / NP ( do - statement ) = <nl> + / / ( do - range = 3 ) + ( ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 1 ) + 2 ) + 1 = 7 <nl> + do { <nl> + / / NP ( do - range ) = ( do - range = 1 ) + ( expr = 1 ) + 1 = 3 <nl> + do { } while ( a < 10 | | true ) ; <nl> + } while ( true ? a > 10 : ( a < 10 | | true ) ) ; <nl> + } <nl> + <nl> + / / NP = ( question - statement [ 1 ] = 5 ) * ( question - statement [ 2 ] = 7 ) = 35 <nl> + void testComplexTernaryOperator ( ) { <nl> + / / NP ( question - statement ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 2 ) + ( expr ( 3 ) = 1 + 2 ) + 2 = 7 <nl> + boolean a = true ? ( true ? true : true ) : ( false ? ( true | | false ) : true ) ; <nl> + / / NP ( question - statement ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 2 ) + ( expr ( 3 ) = 1 ) + 2 = 5 ; <nl> + boolean b = true ? ( true ? true : true ) : true | | true ; <nl> + } <nl> + <nl> + / / NP = ( if - expression [ 1 ] = 5 ) * ( if - expression [ 2 ] = 5 ) = 25 <nl> + void testSimpleTernaryBadFormatting ( ) { <nl> + / / NP ( if - expression ) = ( if - range = 2 ) + 1 + ( expr = 2 ) = 5 <nl> + if ( <nl> + true ? true : true <nl> + ) { boolean a = true ? true <nl> + : true ; <nl> + } <nl> + / / NP ( if - expression ) = ( if - range = 2 ) + 1 + ( expr = 2 ) = 5 <nl> + if ( <nl> + true ? true : true ) { boolean b = true ? true : true ; <nl> + } <nl> + } <nl> + <nl> + / / Calculation for try - catch is wrong now <nl> + / / See issue # 3814 https : / / github . com / checkstyle / checkstyle / issues / 3814 <nl> + void testTryCatch ( ) { <nl> + try { <nl> + } <nl> + catch ( Exception e ) { <nl> + } <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexityDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexityDefault . java <nl> new file mode 100644 <nl> index 0000000 . . 390d4dd <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexityDefault . java <nl> @ @ - 0 , 0 + 1 , 112 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics . npathcomplexity ; <nl> + <nl> + public class InputNPathComplexityDefault { <nl> + / / NP = 2 <nl> + public void foo ( ) { <nl> + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 <nl> + while ( true ) { <nl> + Runnable runnable = new Runnable ( ) { <nl> + / / NP = 2 <nl> + public void run ( ) { <nl> + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 <nl> + while ( true ) { <nl> + } <nl> + } <nl> + } ; <nl> + <nl> + new Thread ( runnable ) . start ( ) ; <nl> + } <nl> + } <nl> + <nl> + / / NP = 10 <nl> + public void bar ( ) { <nl> + / / NP = ( if - range = 3 * 3 ) + ( expr = 0 ) + 1 = 10 <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 1 ) = 3 <nl> + if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 1 ) = 3 <nl> + if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + / / NP = 3 <nl> + public void simpleElseIf ( ) { <nl> + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + / / NP = 7 <nl> + public void stupidElseIf ( ) { <nl> + / / NP = ( if - range = 1 ) + ( else - range = 3 * 2 ) + ( expr = 0 ) = 7 <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + ( expr = 0 ) = 3 <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + } <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + / / NP = 3 <nl> + public InputNPathComplexityDefault ( ) <nl> + { <nl> + int i = 1 ; <nl> + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + / / STATIC _ INIT <nl> + / / NP = 3 <nl> + static { <nl> + int i = 1 ; <nl> + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + / / INSTANCE _ INIT <nl> + / / NP = 3 <nl> + { <nl> + int i = 1 ; <nl> + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + / * * Inner * / <nl> + / / NP = 0 <nl> + public InputNPathComplexityDefault ( int aParam ) <nl> + { <nl> + Runnable runnable = new Runnable ( ) { <nl> + / / NP = 2 <nl> + public void run ( ) { <nl> + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 <nl> + while ( true ) { <nl> + } <nl> + } <nl> + } ; <nl> + new Thread ( runnable ) . start ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexityOverflow . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexityOverflow . java <nl> new file mode 100644 <nl> index 0000000 . . f60d657 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexityOverflow . java <nl> @ @ - 0 , 0 + 1 , 256 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics . npathcomplexity ; <nl> + <nl> + / * * <nl> + * This class has methods that have an NPath complexity larger than MAXINT . <nl> + * Test case for bug 1654769 . <nl> + * / <nl> + public class InputNPathComplexityOverflow { <nl> + <nl> + / * NP = ( if - range [ 1 ] = 9 ) * ( if - range [ 2 ] = 9 ) * ( if - range [ 3 ] = 9 ) * ( if - range [ 4 ] = 9 ) <nl> + * ( if - range [ 5 ] = 9 ) * ( if - range [ 6 ] = 9 ) * ( if - range [ 7 ] = 9 ) * ( if - range [ 8 ] = 9 ) <nl> + * ( if - range [ 9 ] = 9 ) * ( if - range [ 10 ] = 9 ) = 3486784401 <nl> + * / <nl> + public void provokeNpathIntegerOverflow ( ) <nl> + { <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> + if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> index d9c8b97 . . 37f29c9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> @ @ - 283 , 7 + 283 , 12 @ @ public class NeedBracesCheck extends Check { <nl> else if ( literalFor . getParent ( ) . getType ( ) = = TokenTypes . SLIST <nl> & & literalFor . getLastChild ( ) . getType ( ) ! = TokenTypes . SLIST ) { <nl> final DetailAST block = findExpressionBlockInForLoop ( literalFor ) ; <nl> - result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; <nl> + if ( block = = null ) { <nl> + result = literalFor . getLineNo ( ) = = literalFor . getLastChild ( ) . getLineNo ( ) ; <nl> + } <nl> + else { <nl> + result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; <nl> + } <nl> } <nl> return result ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> index e1d3561 . . e3b1443 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> @ @ - 67 , 10 + 67 , 11 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> " 38 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> " 46 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " while " ) , <nl> " 53 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " do " ) , <nl> - " 59 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , <nl> - " 88 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> - " 92 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , <nl> - " 104 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> + " 56 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , <nl> + " 62 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , <nl> + " 91 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> + " 95 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , <nl> + " 107 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; <nl> } <nl> @ @ - 96 , 8 + 97 , 8 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " tokens " , " LITERAL _ CASE , LITERAL _ DEFAULT " ) ; <nl> checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; <nl> final String [ ] expected = { <nl> - " 69 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> " 72 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> + " 75 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java <nl> index 0a9c5c2 . . 9d04f7f 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java <nl> @ @ - 53 , 6 + 53 , 9 @ @ public class InputBracesSingleLineStatements <nl> do <nl> this . notify ( ) ; <nl> while ( o ! = null ) ; <nl> + for ( ; ; ) <nl> + break ; <nl> + for ( ; ; ) break ; <nl> for ( int i = 0 ; i < 10 ; i + + ) { <nl> this . notify ( ) ; <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 index 955f2e8 . . 88bf0b7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 @ @ - 41 , 7 + 41 , 7 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " metrics " + File . separator + filename ) ; 
 + + " metrics " + File . separator + " npathcomplexity " + File . separator + filename ) ; 
 } 
 
 @ Test 
 @ @ - 62 , 7 + 62 , 7 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { 
 " 104 : 13 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputComplexity . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNPathComplexityDefault . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 104 , 7 + 104 , 7 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { 
 " 13 : 5 : " + getCheckMessage ( MSG _ KEY , largerThanMaxInt , 0 ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputComplexityOverflow . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNPathComplexityOverflow . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 114 , 7 + 114 , 7 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { 
 
 createChecker ( checkConfig ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputComplexity . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNPathComplexityDefault . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java 
 deleted file mode 100644 
 index 0d44a79 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java 
 + + + / dev / null 
 @ @ - 1 , 112 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 - 
 - public class InputComplexity { 
 - / / NP = 2 
 - public void foo ( ) { 
 - / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 
 - while ( true ) { 
 - Runnable runnable = new Runnable ( ) { 
 - / / NP = 2 
 - public void run ( ) { 
 - / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 
 - while ( true ) { 
 - } 
 - } 
 - } ; 
 - 
 - new Thread ( runnable ) . start ( ) ; 
 - } 
 - } 
 - 
 - / / NP = 10 
 - public void bar ( ) { 
 - / / NP = ( if - range = 3 * 3 ) + ( expr = 0 ) + 1 = 10 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 1 ) = 3 
 - if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 1 ) = 3 
 - if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - } 
 - } 
 - 
 - / / NP = 3 
 - public void simpleElseIf ( ) { 
 - / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - / / NP = 7 
 - public void stupidElseIf ( ) { 
 - / / NP = ( if - range = 1 ) + ( else - range = 3 * 2 ) + ( expr = 0 ) = 7 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - / / NP = ( if - range = 1 ) + ( else - range = 2 ) + ( expr = 0 ) = 3 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - } 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - } 
 - } 
 - 
 - / / NP = 3 
 - public InputComplexity ( ) 
 - { 
 - int i = 1 ; 
 - / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - / / STATIC _ INIT 
 - / / NP = 3 
 - static { 
 - int i = 1 ; 
 - / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - / / INSTANCE _ INIT 
 - / / NP = 3 
 - { 
 - int i = 1 ; 
 - / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - / * * Inner * / 
 - / / NP = 0 
 - public InputComplexity ( int aParam ) 
 - { 
 - Runnable runnable = new Runnable ( ) { 
 - / / NP = 2 
 - public void run ( ) { 
 - / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 
 - while ( true ) { 
 - } 
 - } 
 - } ; 
 - new Thread ( runnable ) . start ( ) ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java 
 deleted file mode 100644 
 index 6a49ca2 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java 
 + + + / dev / null 
 @ @ - 1 , 256 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 - 
 - / * * 
 - * This class has methods that have an NPath complexity larger than MAXINT . 
 - * Test case for bug 1654769 . 
 - * / 
 - public class InputComplexityOverflow { 
 - 
 - / * NP = ( if - range [ 1 ] = 9 ) * ( if - range [ 2 ] = 9 ) * ( if - range [ 3 ] = 9 ) * ( if - range [ 4 ] = 9 ) 
 - * ( if - range [ 5 ] = 9 ) * ( if - range [ 6 ] = 9 ) * ( if - range [ 7 ] = 9 ) * ( if - range [ 8 ] = 9 ) 
 - * ( if - range [ 9 ] = 9 ) * ( if - range [ 10 ] = 9 ) = 3486784401 
 - * / 
 - public void provokeNpathIntegerOverflow ( ) 
 - { 
 - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 - if ( true ) { 
 - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 - if ( true ) { 
 - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 - if ( true ) { 
 - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 - if ( true ) { 
 - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 - if ( true ) { 
 - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 - if ( true ) { 
 - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 - if ( true ) { 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 - if ( true ) { 
 - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 - if ( true ) { 
 - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 - if ( true ) { 
 - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 - if ( true ) { 
 - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 - if ( true ) { 
 - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 - if ( true ) { 
 - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 - if ( true ) { 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 - if ( true ) { 
 - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 - if ( true ) { 
 - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 - if ( true ) { 
 - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 - if ( true ) { 
 - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 - if ( true ) { 
 - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 - if ( true ) { 
 - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 - if ( true ) { 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 - if ( true ) { 
 - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 - if ( true ) { 
 - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 - if ( true ) { 
 - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 - if ( true ) { 
 - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 - if ( true ) { 
 - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 - if ( true ) { 
 - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 - if ( true ) { 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 - if ( true ) { 
 - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 - if ( true ) { 
 - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 - if ( true ) { 
 - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 - if ( true ) { 
 - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 - if ( true ) { 
 - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 - if ( true ) { 
 - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 - if ( true ) { 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 - if ( true ) { 
 - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 - if ( true ) { 
 - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 - if ( true ) { 
 - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 - if ( true ) { 
 - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 - if ( true ) { 
 - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 - if ( true ) { 
 - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 - if ( true ) { 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 - if ( true ) { 
 - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 - if ( true ) { 
 - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 - if ( true ) { 
 - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 - if ( true ) { 
 - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 - if ( true ) { 
 - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 - if ( true ) { 
 - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 - if ( true ) { 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 - if ( true ) { 
 - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 - if ( true ) { 
 - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 - if ( true ) { 
 - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 - if ( true ) { 
 - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 - if ( true ) { 
 - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 - if ( true ) { 
 - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 - if ( true ) { 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 - if ( true ) { 
 - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 - if ( true ) { 
 - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 - if ( true ) { 
 - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 - if ( true ) { 
 - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 - if ( true ) { 
 - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 - if ( true ) { 
 - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 - if ( true ) { 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 - if ( true ) { 
 - / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 - if ( true ) { 
 - / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 - if ( true ) { 
 - / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 - if ( true ) { 
 - / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 - if ( true ) { 
 - / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 - if ( true ) { 
 - / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 - if ( true ) { 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( true ) { 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputNPathComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputNPathComplexity . java 
 deleted file mode 100644 
 index c4ce470 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputNPathComplexity . java 
 + + + / dev / null 
 @ @ - 1 , 178 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 - / / Advise : for lack of ambiguity try to make all factors prime numbers 
 - public class InputNPathComplexity { 
 - / / NP = 5 
 - void testIfWithExpression ( ) { 
 - / / NP = ( if - range = 1 ) + 1 + ( expr = 3 ) = 5 
 - if ( true & & true | | ( true | | true ) ) { } 
 - } 
 - 
 - / / NP = 5 
 - void testIfElseWithExpression ( ) { 
 - / / NP = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 3 ) = 5 
 - if ( true & & true | | ( true | | true ) ) { } 
 - else { } 
 - } 
 - 
 - / / NP = 4 
 - int testSimpleSwitch ( ) { 
 - int a = 0 ; 
 - / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) 
 - / / + ( default - range = 1 ) + ( expr = 0 ) = 4 
 - switch ( a ) { 
 - case 1 : 
 - break ; 
 - case 2 : 
 - case 3 : 
 - break ; 
 - } 
 - return a ; 
 - } 
 - 
 - / / NP = 4 
 - void testSimpleSwitchWithDefault ( ) { 
 - int a = 0 ; 
 - / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) 
 - / / + ( default - range = 1 ) + ( expr = 0 ) = 4 
 - switch ( a ) { 
 - case 1 : 
 - break ; 
 - case 2 : 
 - case 3 : 
 - break ; 
 - default : 
 - break ; 
 - } 
 - } 
 - 
 - / / NP = 6 
 - void testSwitchWithExpression ( ) { 
 - int a = 0 ; 
 - / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) 
 - / / + ( default - range = 1 ) + ( expr = 2 ) = 6 
 - switch ( true ? a : a ) { 
 - case 1 : 
 - break ; 
 - case 2 : 
 - case 3 : 
 - break ; 
 - default : 
 - break ; 
 - } 
 - } 
 - 
 - / / NP = 15 
 - void testComplexSwitch ( ) { 
 - int a = 0 ; 
 - / / NP = ( case - range [ 1 ] = 2 ) + ( case - range [ 2 ] = 5 * 2 ) + ( case - range [ 3 ] = 2 ) 
 - / / + ( default - range = 1 ) + ( expr = 0 ) = 15 
 - switch ( a ) { 
 - case 1 : 
 - / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( true ) { } 
 - break ; 
 - case 2 : 
 - / / NP ( case - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 3 ) = 5 
 - if ( true & & true | | ( true | | true ) ) { } 
 - else { } 
 - / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( true ) { } 
 - case 3 : 
 - / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 - if ( true ) { } 
 - break ; 
 - default : 
 - break ; 
 - } 
 - } 
 - 
 - / / NP = 11 
 - void testComplexIfElse ( ) { 
 - / / NP = ( if - range = 1 ) + ( else - range = 9 ) + ( expr = 1 ) = 11 
 - if ( true & & true ) { } 
 - / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 6 ) + ( expr = 2 ) = 9 
 - else if ( true | | true | | true ) { } 
 - / / NP ( else - range ) = ( if - range = 1 ) + 1 + ( expr = 4 ) = 6 
 - else if ( true & & true & & true | | true | | true ) { } 
 - } 
 - 
 - / / NP = 8 
 - boolean testComplexReturn ( ) { 
 - / / NP = ( if - range = 3 ) + ( else - range = 4 ) + ( expr = 1 ) = 8 
 - if ( true & & true ) { 
 - / / NP ( if - range ) = 3 
 - return true & & true | | ( true & & true ) ; 
 - } else { 
 - / / NP ( else - range ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 ) + ( expr ( 3 ) = 1 ) + 2 = 4 
 - return true ? true & & true : true | | true ; 
 - } 
 - } 
 - 
 - / / NP = ( for - statement [ 1 ] = 2 ) * ( for - statement [ 2 ] = 3 ) 
 - / / * ( for - statement [ 3 ] = 4 ) * ( for - statement [ 4 ] = 5 ) = 120 
 - void testForCyclesComplex ( ) { 
 - / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 0 ) + 1 = 2 
 - for ( int i = 0 ; i < 10 ; i + + ) ; 
 - / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 ) + ( expr ( 3 ) = 0 ) + 1 = 3 
 - for ( int i = 0 ; i < 10 & & true ; i + + ) ; 
 - / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 2 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 0 ) + 1 = 4 
 - for ( int i = true ? 0 : 0 ; i < 10 ; i + + ) ; 
 - / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 + 2 ) + ( expr ( 3 ) = 0 ) + 1 = 5 
 - for ( int i = 0 ; true ? i < 10 : true | | true ; i + + ) ; 
 - } 
 - 
 - / / NP = ( while - statement [ 1 ] = 2 ) * ( while - statement [ 2 ] = 3 ) = 6 
 - boolean testWhileCyclesComplex ( ) { 
 - int a = 0 ; 
 - / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 
 - while ( a ! = 0 ) { } 
 - / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 1 ) + 1 = 3 
 - while ( a ! = 0 & & a = = 0 ) { return a = = 0 | | a = = 0 ; } 
 - return true ; 
 - } 
 - 
 - / / NP = ( do - statement [ 1 ] = 6 ) * ( do - statement [ 2 ] = 3 ) = 21 
 - void testDoWhileCyclesComplex ( ) { 
 - int a = 0 ; 
 - / / NP ( do - statement ) = ( do - range = 1 ) + ( expr = 1 ) + 1 = 3 
 - do { } while ( a < 10 & & true ) ; 
 - / / NP ( do - statement ) = 
 - / / ( do - range = 3 ) + ( ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 1 ) + 2 ) + 1 = 7 
 - do { 
 - / / NP ( do - range ) = ( do - range = 1 ) + ( expr = 1 ) + 1 = 3 
 - do { } while ( a < 10 | | true ) ; 
 - } while ( true ? a > 10 : ( a < 10 | | true ) ) ; 
 - } 
 - 
 - / / NP = ( question - statement [ 1 ] = 5 ) * ( question - statement [ 2 ] = 7 ) = 35 
 - void testComplexTernaryOperator ( ) { 
 - / / NP ( question - statement ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 2 ) + ( expr ( 3 ) = 1 + 2 ) + 2 = 7 
 - boolean a = true ? ( true ? true : true ) : ( false ? ( true | | false ) : true ) ; 
 - / / NP ( question - statement ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 2 ) + ( expr ( 3 ) = 1 ) + 2 = 5 ; 
 - boolean b = true ? ( true ? true : true ) : true | | true ; 
 - } 
 - 
 - / / NP = ( if - expression [ 1 ] = 5 ) * ( if - expression [ 2 ] = 5 ) = 25 
 - void testSimpleTernaryBadFormatting ( ) { 
 - / / NP ( if - expression ) = ( if - range = 2 ) + 1 + ( expr = 2 ) = 5 
 - if ( 
 - true ? true : true 
 - ) { boolean a = true ? true 
 - : true ; 
 - } 
 - / / NP ( if - expression ) = ( if - range = 2 ) + 1 + ( expr = 2 ) = 5 
 - if ( 
 - true ? true : true ) { boolean b = true ? true : true ; 
 - } 
 - } 
 - 
 - / / Calculation for try - catch is wrong now 
 - / / See issue # 3814 https : / / github . com / checkstyle / checkstyle / issues / 3814 
 - void testTryCatch ( ) { 
 - try { 
 - } 
 - catch ( Exception e ) { 
 - } 
 - } 
 - 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexity . java 
 new file mode 100644 
 index 0000000 . . 105a8bf 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexity . java 
 @ @ - 0 , 0 + 1 , 178 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics . npathcomplexity ; 
 + / / Advise : for lack of ambiguity try to make all factors prime numbers 
 + public class InputNPathComplexity { 
 + / / NP = 5 
 + void testIfWithExpression ( ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 3 ) = 5 
 + if ( true & & true | | ( true | | true ) ) { } 
 + } 
 + 
 + / / NP = 5 
 + void testIfElseWithExpression ( ) { 
 + / / NP = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 3 ) = 5 
 + if ( true & & true | | ( true | | true ) ) { } 
 + else { } 
 + } 
 + 
 + / / NP = 4 
 + int testSimpleSwitch ( ) { 
 + int a = 0 ; 
 + / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) 
 + / / + ( default - range = 1 ) + ( expr = 0 ) = 4 
 + switch ( a ) { 
 + case 1 : 
 + break ; 
 + case 2 : 
 + case 3 : 
 + break ; 
 + } 
 + return a ; 
 + } 
 + 
 + / / NP = 4 
 + void testSimpleSwitchWithDefault ( ) { 
 + int a = 0 ; 
 + / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) 
 + / / + ( default - range = 1 ) + ( expr = 0 ) = 4 
 + switch ( a ) { 
 + case 1 : 
 + break ; 
 + case 2 : 
 + case 3 : 
 + break ; 
 + default : 
 + break ; 
 + } 
 + } 
 + 
 + / / NP = 6 
 + void testSwitchWithExpression ( ) { 
 + int a = 0 ; 
 + / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) 
 + / / + ( default - range = 1 ) + ( expr = 2 ) = 6 
 + switch ( true ? a : a ) { 
 + case 1 : 
 + break ; 
 + case 2 : 
 + case 3 : 
 + break ; 
 + default : 
 + break ; 
 + } 
 + } 
 + 
 + / / NP = 15 
 + void testComplexSwitch ( ) { 
 + int a = 0 ; 
 + / / NP = ( case - range [ 1 ] = 2 ) + ( case - range [ 2 ] = 5 * 2 ) + ( case - range [ 3 ] = 2 ) 
 + / / + ( default - range = 1 ) + ( expr = 0 ) = 15 
 + switch ( a ) { 
 + case 1 : 
 + / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { } 
 + break ; 
 + case 2 : 
 + / / NP ( case - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 3 ) = 5 
 + if ( true & & true | | ( true | | true ) ) { } 
 + else { } 
 + / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { } 
 + case 3 : 
 + / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { } 
 + break ; 
 + default : 
 + break ; 
 + } 
 + } 
 + 
 + / / NP = 11 
 + void testComplexIfElse ( ) { 
 + / / NP = ( if - range = 1 ) + ( else - range = 9 ) + ( expr = 1 ) = 11 
 + if ( true & & true ) { } 
 + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 6 ) + ( expr = 2 ) = 9 
 + else if ( true | | true | | true ) { } 
 + / / NP ( else - range ) = ( if - range = 1 ) + 1 + ( expr = 4 ) = 6 
 + else if ( true & & true & & true | | true | | true ) { } 
 + } 
 + 
 + / / NP = 8 
 + boolean testComplexReturn ( ) { 
 + / / NP = ( if - range = 3 ) + ( else - range = 4 ) + ( expr = 1 ) = 8 
 + if ( true & & true ) { 
 + / / NP ( if - range ) = 3 
 + return true & & true | | ( true & & true ) ; 
 + } else { 
 + / / NP ( else - range ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 ) + ( expr ( 3 ) = 1 ) + 2 = 4 
 + return true ? true & & true : true | | true ; 
 + } 
 + } 
 + 
 + / / NP = ( for - statement [ 1 ] = 2 ) * ( for - statement [ 2 ] = 3 ) 
 + / / * ( for - statement [ 3 ] = 4 ) * ( for - statement [ 4 ] = 5 ) = 120 
 + void testForCyclesComplex ( ) { 
 + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 0 ) + 1 = 2 
 + for ( int i = 0 ; i < 10 ; i + + ) ; 
 + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 ) + ( expr ( 3 ) = 0 ) + 1 = 3 
 + for ( int i = 0 ; i < 10 & & true ; i + + ) ; 
 + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 2 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 0 ) + 1 = 4 
 + for ( int i = true ? 0 : 0 ; i < 10 ; i + + ) ; 
 + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 + 2 ) + ( expr ( 3 ) = 0 ) + 1 = 5 
 + for ( int i = 0 ; true ? i < 10 : true | | true ; i + + ) ; 
 + } 
 + 
 + / / NP = ( while - statement [ 1 ] = 2 ) * ( while - statement [ 2 ] = 3 ) = 6 
 + boolean testWhileCyclesComplex ( ) { 
 + int a = 0 ; 
 + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 
 + while ( a ! = 0 ) { } 
 + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 1 ) + 1 = 3 
 + while ( a ! = 0 & & a = = 0 ) { return a = = 0 | | a = = 0 ; } 
 + return true ; 
 + } 
 + 
 + / / NP = ( do - statement [ 1 ] = 6 ) * ( do - statement [ 2 ] = 3 ) = 21 
 + void testDoWhileCyclesComplex ( ) { 
 + int a = 0 ; 
 + / / NP ( do - statement ) = ( do - range = 1 ) + ( expr = 1 ) + 1 = 3 
 + do { } while ( a < 10 & & true ) ; 
 + / / NP ( do - statement ) = 
 + / / ( do - range = 3 ) + ( ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 1 ) + 2 ) + 1 = 7 
 + do { 
 + / / NP ( do - range ) = ( do - range = 1 ) + ( expr = 1 ) + 1 = 3 
 + do { } while ( a < 10 | | true ) ; 
 + } while ( true ? a > 10 : ( a < 10 | | true ) ) ; 
 + } 
 + 
 + / / NP = ( question - statement [ 1 ] = 5 ) * ( question - statement [ 2 ] = 7 ) = 35 
 + void testComplexTernaryOperator ( ) { 
 + / / NP ( question - statement ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 2 ) + ( expr ( 3 ) = 1 + 2 ) + 2 = 7 
 + boolean a = true ? ( true ? true : true ) : ( false ? ( true | | false ) : true ) ; 
 + / / NP ( question - statement ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 2 ) + ( expr ( 3 ) = 1 ) + 2 = 5 ; 
 + boolean b = true ? ( true ? true : true ) : true | | true ; 
 + } 
 + 
 + / / NP = ( if - expression [ 1 ] = 5 ) * ( if - expression [ 2 ] = 5 ) = 25 
 + void testSimpleTernaryBadFormatting ( ) { 
 + / / NP ( if - expression ) = ( if - range = 2 ) + 1 + ( expr = 2 ) = 5 
 + if ( 
 + true ? true : true 
 + ) { boolean a = true ? true 
 + : true ; 
 + } 
 + / / NP ( if - expression ) = ( if - range = 2 ) + 1 + ( expr = 2 ) = 5 
 + if ( 
 + true ? true : true ) { boolean b = true ? true : true ; 
 + } 
 + } 
 + 
 + / / Calculation for try - catch is wrong now 
 + / / See issue # 3814 https : / / github . com / checkstyle / checkstyle / issues / 3814 
 + void testTryCatch ( ) { 
 + try { 
 + } 
 + catch ( Exception e ) { 
 + } 
 + } 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexityDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexityDefault . java 
 new file mode 100644 
 index 0000000 . . 390d4dd 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexityDefault . java 
 @ @ - 0 , 0 + 1 , 112 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics . npathcomplexity ; 
 + 
 + public class InputNPathComplexityDefault { 
 + / / NP = 2 
 + public void foo ( ) { 
 + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 
 + while ( true ) { 
 + Runnable runnable = new Runnable ( ) { 
 + / / NP = 2 
 + public void run ( ) { 
 + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 
 + while ( true ) { 
 + } 
 + } 
 + } ; 
 + 
 + new Thread ( runnable ) . start ( ) ; 
 + } 
 + } 
 + 
 + / / NP = 10 
 + public void bar ( ) { 
 + / / NP = ( if - range = 3 * 3 ) + ( expr = 0 ) + 1 = 10 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 1 ) = 3 
 + if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 1 ) = 3 
 + if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + } 
 + } 
 + 
 + / / NP = 3 
 + public void simpleElseIf ( ) { 
 + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + / / NP = 7 
 + public void stupidElseIf ( ) { 
 + / / NP = ( if - range = 1 ) + ( else - range = 3 * 2 ) + ( expr = 0 ) = 7 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + ( expr = 0 ) = 3 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + } 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + } 
 + } 
 + 
 + / / NP = 3 
 + public InputNPathComplexityDefault ( ) 
 + { 
 + int i = 1 ; 
 + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + / / STATIC _ INIT 
 + / / NP = 3 
 + static { 
 + int i = 1 ; 
 + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + / / INSTANCE _ INIT 
 + / / NP = 3 
 + { 
 + int i = 1 ; 
 + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + / * * Inner * / 
 + / / NP = 0 
 + public InputNPathComplexityDefault ( int aParam ) 
 + { 
 + Runnable runnable = new Runnable ( ) { 
 + / / NP = 2 
 + public void run ( ) { 
 + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 
 + while ( true ) { 
 + } 
 + } 
 + } ; 
 + new Thread ( runnable ) . start ( ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexityOverflow . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexityOverflow . java 
 new file mode 100644 
 index 0000000 . . f60d657 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / npathcomplexity / InputNPathComplexityOverflow . java 
 @ @ - 0 , 0 + 1 , 256 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics . npathcomplexity ; 
 + 
 + / * * 
 + * This class has methods that have an NPath complexity larger than MAXINT . 
 + * Test case for bug 1654769 . 
 + * / 
 + public class InputNPathComplexityOverflow { 
 + 
 + / * NP = ( if - range [ 1 ] = 9 ) * ( if - range [ 2 ] = 9 ) * ( if - range [ 3 ] = 9 ) * ( if - range [ 4 ] = 9 ) 
 + * ( if - range [ 5 ] = 9 ) * ( if - range [ 6 ] = 9 ) * ( if - range [ 7 ] = 9 ) * ( if - range [ 8 ] = 9 ) 
 + * ( if - range [ 9 ] = 9 ) * ( if - range [ 10 ] = 9 ) = 3486784401 
 + * / 
 + public void provokeNpathIntegerOverflow ( ) 
 + { 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 + if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 + if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 + if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 + if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 + if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 + if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 + if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 + if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 + if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 + if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 + if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 + if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 + if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 + if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 + if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 + if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 + if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 + if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 + if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 + if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 + if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 + if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 + if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 + if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 + if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 + if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 + if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 + if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 + if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 + if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 + if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 + if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 + if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 + if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 + if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 + if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 + if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 + if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 + if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 + if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 + if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 + if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 + if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 + if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 + if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 + if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 + if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 + if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 + if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 + if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 + if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 + if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 + if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 + if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 + if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 + if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 + if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 + if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 + if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 + if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 + if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 + if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 + if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 + if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 + if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 + if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 + if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 + if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 + if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 + if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 index d9c8b97 . . 37f29c9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 @ @ - 283 , 7 + 283 , 12 @ @ public class NeedBracesCheck extends Check { 
 else if ( literalFor . getParent ( ) . getType ( ) = = TokenTypes . SLIST 
 & & literalFor . getLastChild ( ) . getType ( ) ! = TokenTypes . SLIST ) { 
 final DetailAST block = findExpressionBlockInForLoop ( literalFor ) ; 
 - result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; 
 + if ( block = = null ) { 
 + result = literalFor . getLineNo ( ) = = literalFor . getLastChild ( ) . getLineNo ( ) ; 
 + } 
 + else { 
 + result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; 
 + } 
 } 
 return result ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 index e1d3561 . . e3b1443 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 @ @ - 67 , 10 + 67 , 11 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 " 38 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 " 46 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " while " ) , 
 " 53 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " do " ) , 
 - " 59 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , 
 - " 88 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 - " 92 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , 
 - " 104 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 + " 56 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , 
 + " 62 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , 
 + " 91 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 + " 95 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , 
 + " 107 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; 
 } 
 @ @ - 96 , 8 + 97 , 8 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " tokens " , " LITERAL _ CASE , LITERAL _ DEFAULT " ) ; 
 checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; 
 final String [ ] expected = { 
 - " 69 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 " 72 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 + " 75 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java 
 index 0a9c5c2 . . 9d04f7f 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java 
 @ @ - 53 , 6 + 53 , 9 @ @ public class InputBracesSingleLineStatements 
 do 
 this . notify ( ) ; 
 while ( o ! = null ) ; 
 + for ( ; ; ) 
 + break ; 
 + for ( ; ; ) break ; 
 for ( int i = 0 ; i < 10 ; i + + ) { 
 this . notify ( ) ; 
 }
