BLEU SCORE: 0.041961149062965476

TEST MSG: doc : Fix typo in config _ imports . xml
GENERATED MSG: Fix a broken link

TEST DIFF (one line): diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml <nl> index ebf89e5 . . 4316ca1 100644 <nl> - - - a / src / xdocs / config _ imports . xml <nl> + + + b / src / xdocs / config _ imports . xml <nl> @ @ - 728 , 7 + 728 , 7 @ @ import android . * ; <nl> <nl> < subsection name = " Examples " > <nl> < p > <nl> - To configure the check using a import control file called <nl> + To configure the check using an import control file called <nl> & quot ; config / import - control . xml & quot ; , then have the following : <nl> < / p > <nl>
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> index 481ef2e . . 7d17d4c 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> import java . util . HashSet ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> @ @ - 149 , 42 + 148 , 6 @ @ public abstract class AbstractTypeAwareCheck extends Check <nl> } <nl> <nl> / * * <nl> - * Calculate if one type name is a shortname for another type name . <nl> - * @ param aShortName a shorthand , such as < code > IOException < / code > <nl> - * @ param aFullName a full name , such as < code > java . io . IOException < / code > <nl> - * @ return true iff aShortName represents the same type as aFullName <nl> - * / <nl> - protected boolean isShortName ( String aShortName , String aFullName ) <nl> - { <nl> - if ( aShortName . length ( ) > = aFullName . length ( ) ) { <nl> - return false ; <nl> - } <nl> - <nl> - final String base = Utils . baseClassname ( aFullName ) ; <nl> - if ( aShortName . length ( ) > = aFullName . length ( ) <nl> - | | ! base . equals ( aShortName ) ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - / / check fully qualified import <nl> - if ( mImports . contains ( aFullName ) ) { <nl> - return true ; <nl> - } <nl> - <nl> - / / check . * import <nl> - final int endIndex = aFullName . length ( ) - base . length ( ) - 1 ; <nl> - final String packageName = aFullName . substring ( 0 , endIndex ) ; <nl> - final String starImport = packageName + " . * " ; <nl> - if ( mImports . contains ( starImport ) ) { <nl> - return true ; <nl> - } <nl> - <nl> - / / check fully qualified class from same package <nl> - return packageName . equals ( mPackageFullIdent . getText ( ) ) ; <nl> - } <nl> - <nl> - / * * <nl> * Is exception is unchecked ( subclass of < code > RuntimeException < / code > <nl> * or < code > Error < / code > <nl> * <nl> @ @ - 214 , 21 + 177 , 6 @ @ public abstract class AbstractTypeAwareCheck extends Check <nl> & & aParent . isAssignableFrom ( aChild ) ; <nl> } <nl> <nl> - / * * <nl> - * Return if two Strings represent the same type , inspecting the <nl> - * import statements if necessary <nl> - * <nl> - * @ param aFirst first type declared in throws clause <nl> - * @ param aSecond second type declared in thros tag <nl> - * @ return true iff type names represent the same type <nl> - * / <nl> - protected boolean isSameType ( String aFirst , String aSecond ) <nl> - { <nl> - return aFirst . equals ( aSecond ) <nl> - | | isShortName ( aFirst , aSecond ) <nl> - | | isShortName ( aSecond , aFirst ) ; <nl> - } <nl> - <nl> / * * @ return < code > ClassResolver < / code > for current tree . * / <nl> private ClassResolver getClassResolver ( ) <nl> { <nl> @ @ - 248 , 8 + 196 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check <nl> * @ return the resolved class or < code > null < / code > <nl> * if unable to resolve the class . <nl> * / <nl> - protected final Class resolveClass ( String aClassName , <nl> - String aCurrentClass ) <nl> + protected final Class resolveClass ( String aClassName , String aCurrentClass ) <nl> { <nl> try { <nl> return getClassResolver ( ) . resolve ( aClassName , aCurrentClass ) ; <nl> @ @ - 528 , 6 + 475 , 13 @ @ public abstract class AbstractTypeAwareCheck extends Check <nl> { <nl> return mClassInfo . getClazz ( ) ; <nl> } <nl> + <nl> + / * * { @ inheritDoc } * / <nl> + public String toString ( ) <nl> + { <nl> + return " ClassAlias [ alias " + getName ( ) <nl> + + " for " + mClassInfo + " ] " ; <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 583 , 5 + 537 , 12 @ @ public abstract class AbstractTypeAwareCheck extends Check <nl> { <nl> return mText ; <nl> } <nl> + <nl> + / * * { @ inheritDoc } * / <nl> + public String toString ( ) <nl> + { <nl> + return " Token [ " + getText ( ) + " ( " + getLineNo ( ) <nl> + + " x " + getColumnNo ( ) + " ) ] " ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java <nl> index 3656dc7 . . b94cf14 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java <nl> @ @ - 50 , 6 + 50 , 7 @ @ public class ClassResolver <nl> mLoader = aLoader ; <nl> mPkg = aPkg ; <nl> mImports = aImports ; <nl> + mImports . add ( " java . lang . * " ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 68 , 17 + 69 , 9 @ @ public class ClassResolver <nl> throws ClassNotFoundException <nl> { <nl> / / See if the class is full qualified <nl> - if ( isLoadable ( aName ) ) { <nl> - return safeLoad ( aName ) ; <nl> - } <nl> - / / Perhaps it ' s fully - qualified inner class <nl> - int dotIdx = aName . lastIndexOf ( " . " ) ; <nl> - if ( dotIdx ! = - 1 ) { <nl> - final String cn = aName . substring ( 0 , dotIdx ) + " $ " <nl> - + aName . substring ( dotIdx + 1 ) ; <nl> - if ( isLoadable ( cn ) ) { <nl> - return safeLoad ( cn ) ; <nl> - } <nl> + Class clazz = resolveQualifiedName ( aName ) ; <nl> + if ( clazz ! = null ) { <nl> + return clazz ; <nl> } <nl> <nl> / / try matching explicit imports <nl> @ @ - 90 , 27 + 83 , 19 @ @ public class ClassResolver <nl> / / " SecurityDataException " . This has been the cause of a very <nl> / / difficult bug to resolve ! <nl> if ( imp . endsWith ( " . " + aName ) ) { <nl> - if ( isLoadable ( imp ) ) { <nl> - return safeLoad ( imp ) ; <nl> - } <nl> - / / perhaps this is a import for inner class <nl> - / / let ' s try load it . <nl> - final int dot = imp . lastIndexOf ( " . " ) ; <nl> - if ( dot ! = - 1 ) { <nl> - final String innerName = imp . substring ( 0 , dot ) + " $ " <nl> - + imp . substring ( dot + 1 ) ; <nl> - if ( isLoadable ( innerName ) ) { <nl> - return safeLoad ( innerName ) ; <nl> - } <nl> + clazz = resolveQualifiedName ( imp ) ; <nl> + if ( clazz ! = null ) { <nl> + return clazz ; <nl> } <nl> + <nl> } <nl> } <nl> <nl> / / See if in the package <nl> if ( ! " " . equals ( mPkg ) ) { <nl> - final String fqn = mPkg + " . " + aName ; <nl> - if ( isLoadable ( fqn ) ) { <nl> - return safeLoad ( fqn ) ; <nl> + clazz = resolveQualifiedName ( mPkg + " . " + aName ) ; <nl> + if ( clazz ! = null ) { <nl> + return clazz ; <nl> } <nl> } <nl> <nl> @ @ - 123 , 12 + 108 , 6 @ @ public class ClassResolver <nl> } <nl> } <nl> <nl> - / / try " java . lang . " <nl> - final String langClass = " java . lang . " + aName ; <nl> - if ( isLoadable ( langClass ) ) { <nl> - return safeLoad ( langClass ) ; <nl> - } <nl> - <nl> / / try star imports <nl> it = mImports . iterator ( ) ; <nl> while ( it . hasNext ( ) ) { <nl> @ @ - 136 , 8 + 115 , 9 @ @ public class ClassResolver <nl> if ( imp . endsWith ( " . * " ) ) { <nl> final String fqn = imp . substring ( 0 , imp . lastIndexOf ( ' . ' ) + 1 ) <nl> + aName ; <nl> - if ( isLoadable ( fqn ) ) { <nl> - return safeLoad ( fqn ) ; <nl> + clazz = resolveQualifiedName ( fqn ) ; <nl> + if ( clazz ! = null ) { <nl> + return clazz ; <nl> } <nl> } <nl> } <nl> @ @ - 177 , 4 + 157 , 34 @ @ public class ClassResolver <nl> / / class will not be initialised . Very , very important . <nl> return Class . forName ( aName , false , mLoader ) ; <nl> } <nl> + <nl> + / * * <nl> + * Tries to resolve a class for fully - specified name . <nl> + * @ param aName a given name of class . <nl> + * @ return Class object for the given name or null . <nl> + * / <nl> + private Class resolveQualifiedName ( final String aName ) <nl> + { <nl> + try { <nl> + if ( isLoadable ( aName ) ) { <nl> + return safeLoad ( aName ) ; <nl> + } <nl> + / / Perhaps it ' s fully - qualified inner class <nl> + final int dot = aName . lastIndexOf ( " . " ) ; <nl> + if ( dot ! = - 1 ) { <nl> + final String innerName = <nl> + aName . substring ( 0 , dot ) + " $ " + aName . substring ( dot + 1 ) ; <nl> + if ( isLoadable ( innerName ) ) { <nl> + return safeLoad ( innerName ) ; <nl> + } <nl> + } <nl> + } <nl> + catch ( ClassNotFoundException ex ) { <nl> + / / we shouldn ' t get this exception here , <nl> + / / so this is unexpected runtime exception <nl> + throw new RuntimeException ( ex ) ; <nl> + } <nl> + <nl> + return null ; <nl> + } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> index 429bdcf . . f6d66e2 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> @ @ - 153 , 7 + 153 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck <nl> final ClassInfo ci = ( ClassInfo ) known . next ( ) ; <nl> final Token fi = ci . getName ( ) ; <nl> <nl> - if ( isSameType ( fi . getText ( ) , aExc . getText ( ) ) ) { <nl> + if ( ci . getClazz ( ) = = newClassInfo . getClazz ( ) ) { <nl> shouldAdd = false ; <nl> log ( aExc . getLineNo ( ) , aExc . getColumnNo ( ) , <nl> " redundant . throws . duplicate " , aExc . getText ( ) ) ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index b2d91c1 . . 0e2f467 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 700 , 7 + 700 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> final Token fi = ei . getName ( ) ; <nl> final String declaredEx = fi . getText ( ) ; <nl> <nl> - if ( isSameType ( declaredEx , documentedEx ) ) { <nl> + if ( documentedCI . getClazz ( ) = = ei . getClazz ( ) ) { <nl> found = true ; <nl> ei . setFound ( ) ; <nl> foundThrows . add ( documentedEx ) ; <nl> diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / javadoc / Test _ 1379666 . java b / src / testinputs / com / puppycrawl / tools / checkstyle / javadoc / Test _ 1379666 . java <nl> new file mode 100644 <nl> index 0000000 . . 7af1d0c <nl> - - - / dev / null <nl> + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / javadoc / Test _ 1379666 . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + package test . javadoc . method ; <nl> + <nl> + / * * <nl> + * comment . <nl> + * / <nl> + public class Test _ 1379666 { <nl> + / * * <nl> + * @ throws BadStringFormat some text <nl> + * / <nl> + public void ok ( ) throws BadStringFormat { <nl> + } <nl> + <nl> + / * * <nl> + * @ throws Test _ 1379666 . BadStringFormat some text <nl> + * / <nl> + public void error1 ( ) <nl> + throws test . javadoc . method . Test _ 1379666 . BadStringFormat <nl> + { <nl> + } <nl> + <nl> + / * * <nl> + * Some comment . <nl> + * @ throws test . javadoc . method . Test _ 1379666 . BadStringFormat some text <nl> + * / <nl> + public void error2 ( ) throws Test _ 1379666 . BadStringFormat { <nl> + } <nl> + <nl> + / * * <nl> + * Some exception class . <nl> + * / <nl> + public static class BadStringFormat extends Exception { <nl> + / * * <nl> + * Some comment . <nl> + * @ param s string . <nl> + * / <nl> + BadStringFormat ( String s ) { <nl> + super ( s ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java <nl> index 1f14f1d . . 4f86d2b 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java <nl> @ @ - 3 , 13 + 3 , 17 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestCase ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> - public class RedundantThrowsCheckTest <nl> - extends BaseCheckTestCase <nl> + public class RedundantThrowsCheckTest extends BaseCheckTestCase <nl> { <nl> + private DefaultConfiguration mCheckConfig ; <nl> + <nl> + public void setUp ( ) <nl> + { <nl> + mCheckConfig = createCheckConfig ( RedundantThrowsCheck . class ) ; <nl> + } <nl> + <nl> public void testDefaults ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( RedundantThrowsCheck . class ) ; <nl> final String [ ] expected = { <nl> " 7 : 37 : Redundant throws : ' java . io . FileNotFoundException ' is subclass of ' java . io . IOException ' . " , <nl> " 13 : 16 : Redundant throws : ' RuntimeException ' is unchecked exception . " , <nl> @ @ - 18 , 85 + 22 , 69 @ @ public class RedundantThrowsCheckTest <nl> " 39 : 27 : Redundant throws : ' NullPointerException ' is unchecked exception . " , <nl> " 39 : 49 : Redundant throws : ' RuntimeException ' is unchecked exception . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; <nl> } <nl> <nl> public void testAllowUnchecked ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( RedundantThrowsCheck . class ) ; <nl> - checkConfig . addAttribute ( " allowUnchecked " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowUnchecked " , " true " ) ; <nl> final String [ ] expected = { <nl> " 7 : 37 : Redundant throws : ' java . io . FileNotFoundException ' is subclass of ' java . io . IOException ' . " , <nl> " 19 : 29 : Redundant throws : ' java . io . IOException ' listed more then one time . " , <nl> / / " 35 : 27 : Unable to get class information for WrongException . " , <nl> " 39 : 27 : Redundant throws : ' NullPointerException ' is subclass of ' RuntimeException ' . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; <nl> } <nl> <nl> public void testAllowSubclasses ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( RedundantThrowsCheck . class ) ; <nl> - checkConfig . addAttribute ( " allowSubclasses " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowSubclasses " , " true " ) ; <nl> final String [ ] expected = { <nl> " 13 : 16 : Redundant throws : ' RuntimeException ' is unchecked exception . " , <nl> " 19 : 29 : Redundant throws : ' java . io . IOException ' listed more then one time . " , <nl> " 39 : 27 : Redundant throws : ' NullPointerException ' is unchecked exception . " , <nl> " 39 : 49 : Redundant throws : ' RuntimeException ' is unchecked exception . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; <nl> } <nl> <nl> public void testRejectDuplicatesOnly ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( RedundantThrowsCheck . class ) ; <nl> - checkConfig . addAttribute ( " allowSubclasses " , " true " ) ; <nl> - checkConfig . addAttribute ( " allowUnchecked " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowSubclasses " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowUnchecked " , " true " ) ; <nl> final String [ ] expected = { <nl> " 19 : 29 : Redundant throws : ' java . io . IOException ' listed more then one time . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; <nl> } <nl> <nl> public void test _ 1168408 _ 1 ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( RedundantThrowsCheck . class ) ; <nl> final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " javadoc / Test1 . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " javadoc / Test1 . java " ) , expected ) ; <nl> } <nl> <nl> public void test _ 1168408 _ 2 ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( RedundantThrowsCheck . class ) ; <nl> final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " javadoc / Test2 . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " javadoc / Test2 . java " ) , expected ) ; <nl> } <nl> <nl> public void test _ 1168408 _ 3 ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( RedundantThrowsCheck . class ) ; <nl> final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " javadoc / Test3 . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " javadoc / Test3 . java " ) , expected ) ; <nl> } <nl> <nl> public void test _ 1220726 ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( RedundantThrowsCheck . class ) ; <nl> final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " javadoc / BadCls . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " javadoc / BadCls . java " ) , expected ) ; <nl> } <nl> <nl> public void test _ generics _ params ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( RedundantThrowsCheck . class ) ; <nl> final String [ ] expected = { <nl> " 15 : 34 : Redundant throws : ' RE ' is unchecked exception . " , <nl> " 23 : 37 : Redundant throws : ' RE ' is subclass of ' E ' . " , <nl> @ @ - 106 , 10 + 94 , 16 @ @ public class RedundantThrowsCheckTest <nl> " 31 : 74 : Redundant throws : ' RE ' is unchecked exception . " , <nl> " 41 : 38 : Redundant throws : ' RuntimeException ' is subclass of ' RE ' . " , <nl> " 41 : 38 : Redundant throws : ' RuntimeException ' is unchecked exception . " , <nl> - " 41 : 56 : Redundant throws : ' RE ' is subclass of ' java . lang . RuntimeException ' . " , <nl> " 41 : 56 : Redundant throws : ' RE ' is unchecked exception . " , <nl> " 42 : 13 : Redundant throws : ' java . lang . RuntimeException ' is unchecked exception . " , <nl> + " 42 : 13 : Redundant throws : ' java . lang . RuntimeException ' listed more then one time . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; <nl> + } <nl> + <nl> + public void test _ 1379666 ( ) throws Exception <nl> + { <nl> + final String [ ] expected = { } ; <nl> + verify ( mCheckConfig , getPath ( " javadoc / Test _ 1379666 . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java <nl> index 3ec5d32 . . 7af17a9 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java <nl> @ @ - 8 , 10 + 8 , 15 @ @ import java . io . File ; <nl> <nl> public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> { <nl> + private DefaultConfiguration mCheckConfig ; <nl> + <nl> + public void setUp ( ) <nl> + { <nl> + mCheckConfig = createCheckConfig ( JavadocMethodCheck . class ) ; <nl> + } <nl> + <nl> public void testTags ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> final String [ ] expected = { <nl> " 14 : 5 : Missing a Javadoc comment . " , <nl> " 18 : 9 : Unused @ param tag for ' unused ' . " , <nl> @ @ - 44 , 14 + 49 , 12 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> " 333 : Unused Javadoc tag . " , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputTags . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputTags . java " ) , expected ) ; <nl> } <nl> <nl> public void testTagsWithResolver ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; <nl> final String [ ] expected = { <nl> " 14 : 5 : Missing a Javadoc comment . " , <nl> " 18 : 9 : Unused @ param tag for ' unused ' . " , <nl> @ @ - 79 , 13 + 82 , 11 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> " 320 : 9 : Missing a Javadoc comment . " , <nl> " 329 : 5 : Missing a Javadoc comment . " , <nl> " 333 : Unused Javadoc tag . " , } ; <nl> - verify ( checkConfig , getPath ( " InputTags . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputTags . java " ) , expected ) ; <nl> } <nl> <nl> public void testStrictJavadoc ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> final String [ ] expected = { <nl> " 12 : 9 : Missing a Javadoc comment . " , <nl> " 18 : 13 : Missing a Javadoc comment . " , <nl> @ @ - 100 , 79 + 101 , 64 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> " 79 : 5 : Missing a Javadoc comment . " , <nl> " 84 : 5 : Missing a Javadoc comment . " , <nl> " 94 : 32 : Expected @ param tag for ' aA ' . " } ; <nl> - verify ( checkConfig , getPath ( " InputPublicOnly . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputPublicOnly . java " ) , expected ) ; <nl> } <nl> <nl> public void testNoJavadoc ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " scope " , Scope . NOTHING . getName ( ) ) ; <nl> + mCheckConfig . addAttribute ( " scope " , Scope . NOTHING . getName ( ) ) ; <nl> final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " InputPublicOnly . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputPublicOnly . java " ) , expected ) ; <nl> } <nl> <nl> / / pre 1 . 4 relaxed mode is roughly equivalent with check = protected <nl> public void testRelaxedJavadoc ( ) throws Exception <nl> { <nl> - <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " scope " , Scope . PROTECTED . getName ( ) ) ; <nl> + mCheckConfig . addAttribute ( " scope " , Scope . PROTECTED . getName ( ) ) ; <nl> final String [ ] expected = { <nl> " 59 : 5 : Missing a Javadoc comment . " , <nl> " 64 : 5 : Missing a Javadoc comment . " , <nl> " 79 : 5 : Missing a Javadoc comment . " , <nl> " 84 : 5 : Missing a Javadoc comment . " } ; <nl> - verify ( checkConfig , getPath ( " InputPublicOnly . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputPublicOnly . java " ) , expected ) ; <nl> } <nl> <nl> public void testScopeInnerInterfacesPublic ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " scope " , Scope . PUBLIC . getName ( ) ) ; <nl> + mCheckConfig . addAttribute ( " scope " , Scope . PUBLIC . getName ( ) ) ; <nl> final String [ ] expected = { <nl> " 43 : 9 : Missing a Javadoc comment . " , <nl> " 44 : 9 : Missing a Javadoc comment . " } ; <nl> - verify ( checkConfig , getPath ( " InputScopeInnerInterfaces . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputScopeInnerInterfaces . java " ) , expected ) ; <nl> } <nl> <nl> public void testScopeAnonInnerPrivate ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " scope " , Scope . PRIVATE . getName ( ) ) ; <nl> + mCheckConfig . addAttribute ( " scope " , Scope . PRIVATE . getName ( ) ) ; <nl> final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " InputScopeAnonInner . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputScopeAnonInner . java " ) , expected ) ; <nl> } <nl> <nl> public void testScopeAnonInnerAnonInner ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " scope " , Scope . ANONINNER . getName ( ) ) ; <nl> + mCheckConfig . addAttribute ( " scope " , Scope . ANONINNER . getName ( ) ) ; <nl> final String [ ] expected = { <nl> " 26 : 9 : Missing a Javadoc comment . " , <nl> " 39 : 17 : Missing a Javadoc comment . " , <nl> " 53 : 17 : Missing a Javadoc comment . " , } ; <nl> - verify ( checkConfig , getPath ( " InputScopeAnonInner . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputScopeAnonInner . java " ) , expected ) ; <nl> } <nl> <nl> public void testScopeAnonInnerWithResolver ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; <nl> final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " InputScopeAnonInner . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputScopeAnonInner . java " ) , expected ) ; <nl> } <nl> <nl> public void testTagsWithSubclassesAllowed ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; <nl> final String [ ] expected = { <nl> " 14 : 5 : Missing a Javadoc comment . " , <nl> " 18 : 9 : Unused @ param tag for ' unused ' . " , <nl> @ @ - 200 , 13 + 186 , 11 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> " 320 : 9 : Missing a Javadoc comment . " , <nl> " 329 : 5 : Missing a Javadoc comment . " , <nl> " 333 : Unused Javadoc tag . " , } ; <nl> - verify ( checkConfig , getPath ( " InputTags . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputTags . java " ) , expected ) ; <nl> } <nl> <nl> public void testScopes ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> final String [ ] expected = { <nl> " 8 : 5 : Missing a Javadoc comment . " , <nl> " 9 : 5 : Missing a Javadoc comment . " , <nl> @ @ - 244 , 30 + 228 , 26 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> " 104 : 9 : Missing a Javadoc comment . " , <nl> " 105 : 9 : Missing a Javadoc comment . " , <nl> " 106 : 9 : Missing a Javadoc comment . " , } ; <nl> - verify ( checkConfig , getPath ( " javadoc " + File . separator <nl> + verify ( mCheckConfig , getPath ( " javadoc " + File . separator <nl> + " InputNoJavadoc . java " ) , expected ) ; <nl> } <nl> <nl> public void testScopes2 ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " scope " , Scope . PROTECTED . getName ( ) ) ; <nl> + mCheckConfig . addAttribute ( " scope " , Scope . PROTECTED . getName ( ) ) ; <nl> final String [ ] expected = { <nl> " 8 : 5 : Missing a Javadoc comment . " , <nl> " 9 : 5 : Missing a Javadoc comment . " , <nl> " 19 : 9 : Missing a Javadoc comment . " , <nl> " 20 : 9 : Missing a Javadoc comment . " , } ; <nl> - verify ( checkConfig , getPath ( " javadoc " + File . separator <nl> + verify ( mCheckConfig , getPath ( " javadoc " + File . separator <nl> + " InputNoJavadoc . java " ) , expected ) ; <nl> } <nl> <nl> public void testExcludeScope ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " scope " , Scope . PRIVATE . getName ( ) ) ; <nl> - checkConfig . addAttribute ( " excludeScope " , Scope . PROTECTED . getName ( ) ) ; <nl> + mCheckConfig . addAttribute ( " scope " , Scope . PRIVATE . getName ( ) ) ; <nl> + mCheckConfig . addAttribute ( " excludeScope " , Scope . PROTECTED . getName ( ) ) ; <nl> final String [ ] expected = { <nl> " 10 : 5 : Missing a Javadoc comment . " , <nl> " 11 : 5 : Missing a Javadoc comment . " , <nl> @ @ - 301 , 24 + 281 , 20 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> " 104 : 9 : Missing a Javadoc comment . " , <nl> " 105 : 9 : Missing a Javadoc comment . " , <nl> " 106 : 9 : Missing a Javadoc comment . " , } ; <nl> - verify ( checkConfig , getPath ( " javadoc " + File . separator <nl> + verify ( mCheckConfig , getPath ( " javadoc " + File . separator <nl> + " InputNoJavadoc . java " ) , expected ) ; <nl> } <nl> <nl> public void testAllowMissingJavadoc ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " allowMissingJavadoc " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowMissingJavadoc " , " true " ) ; <nl> final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " javadoc " + File . separator <nl> + verify ( mCheckConfig , getPath ( " javadoc " + File . separator <nl> + " InputNoJavadoc . java " ) , expected ) ; <nl> } <nl> <nl> public void testSetterGetterOff ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> final String [ ] expected = { <nl> " 5 : 5 : Missing a Javadoc comment . " , <nl> " 10 : 5 : Missing a Javadoc comment . " , <nl> @ @ - 329 , 15 + 305 , 13 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> " 35 : 5 : Missing a Javadoc comment . " , <nl> " 41 : 5 : Missing a Javadoc comment . " , <nl> " 46 : 5 : Missing a Javadoc comment . " , } ; <nl> - verify ( checkConfig , getPath ( " javadoc " + File . separator <nl> + verify ( mCheckConfig , getPath ( " javadoc " + File . separator <nl> + " InputSetterGetter . java " ) , expected ) ; <nl> } <nl> <nl> public void testSetterGetterOn ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " allowMissingPropertyJavadoc " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowMissingPropertyJavadoc " , " true " ) ; <nl> final String [ ] expected = { <nl> " 15 : 5 : Missing a Javadoc comment . " , <nl> " 20 : 5 : Missing a Javadoc comment . " , <nl> @ @ - 345 , 52 + 319 , 42 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> " 30 : 5 : Missing a Javadoc comment . " , <nl> " 35 : 5 : Missing a Javadoc comment . " , <nl> " 41 : 5 : Missing a Javadoc comment . " , } ; <nl> - verify ( checkConfig , getPath ( " javadoc " + File . separator <nl> + verify ( mCheckConfig , getPath ( " javadoc " + File . separator <nl> + " InputSetterGetter . java " ) , expected ) ; <nl> } <nl> <nl> public void testTypeParamsTags ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> final String [ ] expected = { <nl> " 26 : 8 : Unused @ param tag for ' < BB > ' . " , <nl> " 28 : 13 : Expected @ param tag for ' < Z > ' . " , } ; <nl> - verify ( checkConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; <nl> } <nl> <nl> public void test _ 1168408 _ 1 ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " javadoc / Test1 . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " javadoc / Test1 . java " ) , expected ) ; <nl> } <nl> <nl> public void test _ 1168408 _ 2 ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " javadoc / Test2 . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " javadoc / Test2 . java " ) , expected ) ; <nl> } <nl> <nl> public void test _ 1168408 _ 3 ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; <nl> - checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; <nl> final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " javadoc / Test3 . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " javadoc / Test3 . java " ) , expected ) ; <nl> } <nl> <nl> public void test _ generics _ 1 ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; <nl> - checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; <nl> final String [ ] expected = { <nl> " 15 : 34 : Expected @ throws tag for ' RE ' . " , <nl> " 23 : 37 : Expected @ throws tag for ' RE ' . " , <nl> @ @ - 399 , 14 + 363 , 12 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> " 41 : 38 : Expected @ throws tag for ' RuntimeException ' . " , <nl> " 42 : 13 : Expected @ throws tag for ' java . lang . RuntimeException ' . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; <nl> } <nl> <nl> public void test _ generics _ 2 ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> - checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; <nl> final String [ ] expected = { <nl> " 15 : 34 : Expected @ throws tag for ' RE ' . " , <nl> " 23 : 37 : Expected @ throws tag for ' RE ' . " , <nl> @ @ - 415 , 13 + 377 , 11 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> " 41 : 38 : Expected @ throws tag for ' RuntimeException ' . " , <nl> " 42 : 13 : Expected @ throws tag for ' java . lang . RuntimeException ' . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; <nl> } <nl> <nl> public void test _ generics _ 3 ( ) throws Exception <nl> { <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( JavadocMethodCheck . class ) ; <nl> final String [ ] expected = { <nl> " 6 : 8 : Unused @ throws tag for ' RE ' . " , <nl> " 15 : 34 : Expected @ throws tag for ' RE ' . " , <nl> @ @ - 430 , 6 + 390 , 14 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> " 41 : 38 : Expected @ throws tag for ' RuntimeException ' . " , <nl> " 42 : 13 : Expected @ throws tag for ' java . lang . RuntimeException ' . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; <nl> + verify ( mCheckConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; <nl> + } <nl> + <nl> + public void test _ 1379666 ( ) throws Exception <nl> + { <nl> + mCheckConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; <nl> + mCheckConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( mCheckConfig , getPath ( " javadoc / Test _ 1379666 . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index 250d159 . . cf52f6d 100755 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 9 , 27 + 9 , 39 @ @ <nl> < / properties > <nl> <nl> < body > <nl> + < section name = " Release 4 . 2 " > <nl> + < p > Fixed Bugs : < / p > <nl> + <nl> + < ul > <nl> + < li > <nl> + Fixed problem in type aware checks with loading <nl> + inner - classes which were referenced as <nl> + & lt ; outer _ class _ name & gt ; . & lt ; inner _ class _ name & gt ; ( bug <nl> + 1379666 , modules JavadocMethod and RedundantThrows ) . <nl> + < / li > <nl> + < / ul > <nl> + < / section > <nl> <nl> < section name = " Release 4 . 1 " > <nl> < p > Fixed Bugs : < / p > <nl> <nl> < ul > <nl> < li > <nl> - 	 Documentation for JavadocMethod check corrected to indicate <nl> + Documentation for JavadocMethod check corrected to indicate <nl> that after fix for 1290379 javadoc which contains only @ see <nl> tag is not valid any more ( bug 1369615 ) <nl> < / li > <nl> < li > <nl> - 	 Fixed StackOverflowError in GenericIllegalRegexp check <nl> + Fixed StackOverflowError in GenericIllegalRegexp check <nl> which may occur if ignoreComments is true and there is an <nl> illegal match in comment at the end of line . ( bug 1371588 ) <nl> < / li > <nl> < li > <nl> - 	 InnerAssignment now ignores assignments in annotations . ( bug <nl> + InnerAssignment now ignores assignments in annotations . ( bug <nl> 1369425 ) <nl> < / li > <nl> < li > <nl> - 	 Applied patch from Ralf ( rakus ) to remove javadoc ' s <nl> + Applied patch from Ralf ( rakus ) to remove javadoc ' s <nl> complainings . ( patch 1352862 ) <nl> < / li > <nl> < li > <nl> @ @ - 37 , 9 + 49 , 9 @ @ <nl> throws if someone tries to create object of generic class <nl> ( with any params ) ( bug 1374792 ) . <nl> < / li > <nl> - 	 < li > <nl> - 	 Added information to the manifest file . ( bug 1380322 ) . <nl> - 	 < / li > <nl> + < li > <nl> + Added information to the manifest file . ( bug 1380322 ) . <nl> + < / li > <nl> < / ul > <nl> < / section > <nl>

TEST DIFF:
diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml 
 index ebf89e5 . . 4316ca1 100644 
 - - - a / src / xdocs / config _ imports . xml 
 + + + b / src / xdocs / config _ imports . xml 
 @ @ - 728 , 7 + 728 , 7 @ @ import android . * ; 
 
 < subsection name = " Examples " > 
 < p > 
 - To configure the check using a import control file called 
 + To configure the check using an import control file called 
 & quot ; config / import - control . xml & quot ; , then have the following : 
 < / p > 


NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 index 481ef2e . . 7d17d4c 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . api . Utils ; 
 import java . util . HashSet ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 @ @ - 149 , 42 + 148 , 6 @ @ public abstract class AbstractTypeAwareCheck extends Check 
 } 
 
 / * * 
 - * Calculate if one type name is a shortname for another type name . 
 - * @ param aShortName a shorthand , such as < code > IOException < / code > 
 - * @ param aFullName a full name , such as < code > java . io . IOException < / code > 
 - * @ return true iff aShortName represents the same type as aFullName 
 - * / 
 - protected boolean isShortName ( String aShortName , String aFullName ) 
 - { 
 - if ( aShortName . length ( ) > = aFullName . length ( ) ) { 
 - return false ; 
 - } 
 - 
 - final String base = Utils . baseClassname ( aFullName ) ; 
 - if ( aShortName . length ( ) > = aFullName . length ( ) 
 - | | ! base . equals ( aShortName ) ) 
 - { 
 - return false ; 
 - } 
 - 
 - / / check fully qualified import 
 - if ( mImports . contains ( aFullName ) ) { 
 - return true ; 
 - } 
 - 
 - / / check . * import 
 - final int endIndex = aFullName . length ( ) - base . length ( ) - 1 ; 
 - final String packageName = aFullName . substring ( 0 , endIndex ) ; 
 - final String starImport = packageName + " . * " ; 
 - if ( mImports . contains ( starImport ) ) { 
 - return true ; 
 - } 
 - 
 - / / check fully qualified class from same package 
 - return packageName . equals ( mPackageFullIdent . getText ( ) ) ; 
 - } 
 - 
 - / * * 
 * Is exception is unchecked ( subclass of < code > RuntimeException < / code > 
 * or < code > Error < / code > 
 * 
 @ @ - 214 , 21 + 177 , 6 @ @ public abstract class AbstractTypeAwareCheck extends Check 
 & & aParent . isAssignableFrom ( aChild ) ; 
 } 
 
 - / * * 
 - * Return if two Strings represent the same type , inspecting the 
 - * import statements if necessary 
 - * 
 - * @ param aFirst first type declared in throws clause 
 - * @ param aSecond second type declared in thros tag 
 - * @ return true iff type names represent the same type 
 - * / 
 - protected boolean isSameType ( String aFirst , String aSecond ) 
 - { 
 - return aFirst . equals ( aSecond ) 
 - | | isShortName ( aFirst , aSecond ) 
 - | | isShortName ( aSecond , aFirst ) ; 
 - } 
 - 
 / * * @ return < code > ClassResolver < / code > for current tree . * / 
 private ClassResolver getClassResolver ( ) 
 { 
 @ @ - 248 , 8 + 196 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check 
 * @ return the resolved class or < code > null < / code > 
 * if unable to resolve the class . 
 * / 
 - protected final Class resolveClass ( String aClassName , 
 - String aCurrentClass ) 
 + protected final Class resolveClass ( String aClassName , String aCurrentClass ) 
 { 
 try { 
 return getClassResolver ( ) . resolve ( aClassName , aCurrentClass ) ; 
 @ @ - 528 , 6 + 475 , 13 @ @ public abstract class AbstractTypeAwareCheck extends Check 
 { 
 return mClassInfo . getClazz ( ) ; 
 } 
 + 
 + / * * { @ inheritDoc } * / 
 + public String toString ( ) 
 + { 
 + return " ClassAlias [ alias " + getName ( ) 
 + + " for " + mClassInfo + " ] " ; 
 + } 
 } 
 
 / * * 
 @ @ - 583 , 5 + 537 , 12 @ @ public abstract class AbstractTypeAwareCheck extends Check 
 { 
 return mText ; 
 } 
 + 
 + / * * { @ inheritDoc } * / 
 + public String toString ( ) 
 + { 
 + return " Token [ " + getText ( ) + " ( " + getLineNo ( ) 
 + + " x " + getColumnNo ( ) + " ) ] " ; 
 + } 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java 
 index 3656dc7 . . b94cf14 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java 
 @ @ - 50 , 6 + 50 , 7 @ @ public class ClassResolver 
 mLoader = aLoader ; 
 mPkg = aPkg ; 
 mImports = aImports ; 
 + mImports . add ( " java . lang . * " ) ; 
 } 
 
 / * * 
 @ @ - 68 , 17 + 69 , 9 @ @ public class ClassResolver 
 throws ClassNotFoundException 
 { 
 / / See if the class is full qualified 
 - if ( isLoadable ( aName ) ) { 
 - return safeLoad ( aName ) ; 
 - } 
 - / / Perhaps it ' s fully - qualified inner class 
 - int dotIdx = aName . lastIndexOf ( " . " ) ; 
 - if ( dotIdx ! = - 1 ) { 
 - final String cn = aName . substring ( 0 , dotIdx ) + " $ " 
 - + aName . substring ( dotIdx + 1 ) ; 
 - if ( isLoadable ( cn ) ) { 
 - return safeLoad ( cn ) ; 
 - } 
 + Class clazz = resolveQualifiedName ( aName ) ; 
 + if ( clazz ! = null ) { 
 + return clazz ; 
 } 
 
 / / try matching explicit imports 
 @ @ - 90 , 27 + 83 , 19 @ @ public class ClassResolver 
 / / " SecurityDataException " . This has been the cause of a very 
 / / difficult bug to resolve ! 
 if ( imp . endsWith ( " . " + aName ) ) { 
 - if ( isLoadable ( imp ) ) { 
 - return safeLoad ( imp ) ; 
 - } 
 - / / perhaps this is a import for inner class 
 - / / let ' s try load it . 
 - final int dot = imp . lastIndexOf ( " . " ) ; 
 - if ( dot ! = - 1 ) { 
 - final String innerName = imp . substring ( 0 , dot ) + " $ " 
 - + imp . substring ( dot + 1 ) ; 
 - if ( isLoadable ( innerName ) ) { 
 - return safeLoad ( innerName ) ; 
 - } 
 + clazz = resolveQualifiedName ( imp ) ; 
 + if ( clazz ! = null ) { 
 + return clazz ; 
 } 
 + 
 } 
 } 
 
 / / See if in the package 
 if ( ! " " . equals ( mPkg ) ) { 
 - final String fqn = mPkg + " . " + aName ; 
 - if ( isLoadable ( fqn ) ) { 
 - return safeLoad ( fqn ) ; 
 + clazz = resolveQualifiedName ( mPkg + " . " + aName ) ; 
 + if ( clazz ! = null ) { 
 + return clazz ; 
 } 
 } 
 
 @ @ - 123 , 12 + 108 , 6 @ @ public class ClassResolver 
 } 
 } 
 
 - / / try " java . lang . " 
 - final String langClass = " java . lang . " + aName ; 
 - if ( isLoadable ( langClass ) ) { 
 - return safeLoad ( langClass ) ; 
 - } 
 - 
 / / try star imports 
 it = mImports . iterator ( ) ; 
 while ( it . hasNext ( ) ) { 
 @ @ - 136 , 8 + 115 , 9 @ @ public class ClassResolver 
 if ( imp . endsWith ( " . * " ) ) { 
 final String fqn = imp . substring ( 0 , imp . lastIndexOf ( ' . ' ) + 1 ) 
 + aName ; 
 - if ( isLoadable ( fqn ) ) { 
 - return safeLoad ( fqn ) ; 
 + clazz = resolveQualifiedName ( fqn ) ; 
 + if ( clazz ! = null ) { 
 + return clazz ; 
 } 
 } 
 } 
 @ @ - 177 , 4 + 157 , 34 @ @ public class ClassResolver 
 / / class will not be initialised . Very , very important . 
 return Class . forName ( aName , false , mLoader ) ; 
 } 
 + 
 + / * * 
 + * Tries to resolve a class for fully - specified name . 
 + * @ param aName a given name of class . 
 + * @ return Class object for the given name or null . 
 + * / 
 + private Class resolveQualifiedName ( final String aName ) 
 + { 
 + try { 
 + if ( isLoadable ( aName ) ) { 
 + return safeLoad ( aName ) ; 
 + } 
 + / / Perhaps it ' s fully - qualified inner class 
 + final int dot = aName . lastIndexOf ( " . " ) ; 
 + if ( dot ! = - 1 ) { 
 + final String innerName = 
 + aName . substring ( 0 , dot ) + " $ " + aName . substring ( dot + 1 ) ; 
 + if ( isLoadable ( innerName ) ) { 
 + return safeLoad ( innerName ) ; 
 + } 
 + } 
 + } 
 + catch ( ClassNotFoundException ex ) { 
 + / / we shouldn ' t get this exception here , 
 + / / so this is unexpected runtime exception 
 + throw new RuntimeException ( ex ) ; 
 + } 
 + 
 + return null ; 
 + } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 index 429bdcf . . f6d66e2 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 @ @ - 153 , 7 + 153 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck 
 final ClassInfo ci = ( ClassInfo ) known . next ( ) ; 
 final Token fi = ci . getName ( ) ; 
 
 - if ( isSameType ( fi . getText ( ) , aExc . getText ( ) ) ) { 
 + if ( ci . getClazz ( ) = = newClassInfo . getClazz ( ) ) { 
 shouldAdd = false ; 
 log ( aExc . getLineNo ( ) , aExc . getColumnNo ( ) , 
 " redundant . throws . duplicate " , aExc . getText ( ) ) ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index b2d91c1 . . 0e2f467 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 700 , 7 + 700 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 final Token fi = ei . getName ( ) ; 
 final String declaredEx = fi . getText ( ) ; 
 
 - if ( isSameType ( declaredEx , documentedEx ) ) { 
 + if ( documentedCI . getClazz ( ) = = ei . getClazz ( ) ) { 
 found = true ; 
 ei . setFound ( ) ; 
 foundThrows . add ( documentedEx ) ; 
 diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / javadoc / Test _ 1379666 . java b / src / testinputs / com / puppycrawl / tools / checkstyle / javadoc / Test _ 1379666 . java 
 new file mode 100644 
 index 0000000 . . 7af1d0c 
 - - - / dev / null 
 + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / javadoc / Test _ 1379666 . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package test . javadoc . method ; 
 + 
 + / * * 
 + * comment . 
 + * / 
 + public class Test _ 1379666 { 
 + / * * 
 + * @ throws BadStringFormat some text 
 + * / 
 + public void ok ( ) throws BadStringFormat { 
 + } 
 + 
 + / * * 
 + * @ throws Test _ 1379666 . BadStringFormat some text 
 + * / 
 + public void error1 ( ) 
 + throws test . javadoc . method . Test _ 1379666 . BadStringFormat 
 + { 
 + } 
 + 
 + / * * 
 + * Some comment . 
 + * @ throws test . javadoc . method . Test _ 1379666 . BadStringFormat some text 
 + * / 
 + public void error2 ( ) throws Test _ 1379666 . BadStringFormat { 
 + } 
 + 
 + / * * 
 + * Some exception class . 
 + * / 
 + public static class BadStringFormat extends Exception { 
 + / * * 
 + * Some comment . 
 + * @ param s string . 
 + * / 
 + BadStringFormat ( String s ) { 
 + super ( s ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java 
 index 1f14f1d . . 4f86d2b 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java 
 @ @ - 3 , 13 + 3 , 17 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestCase ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 - public class RedundantThrowsCheckTest 
 - extends BaseCheckTestCase 
 + public class RedundantThrowsCheckTest extends BaseCheckTestCase 
 { 
 + private DefaultConfiguration mCheckConfig ; 
 + 
 + public void setUp ( ) 
 + { 
 + mCheckConfig = createCheckConfig ( RedundantThrowsCheck . class ) ; 
 + } 
 + 
 public void testDefaults ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( RedundantThrowsCheck . class ) ; 
 final String [ ] expected = { 
 " 7 : 37 : Redundant throws : ' java . io . FileNotFoundException ' is subclass of ' java . io . IOException ' . " , 
 " 13 : 16 : Redundant throws : ' RuntimeException ' is unchecked exception . " , 
 @ @ - 18 , 85 + 22 , 69 @ @ public class RedundantThrowsCheckTest 
 " 39 : 27 : Redundant throws : ' NullPointerException ' is unchecked exception . " , 
 " 39 : 49 : Redundant throws : ' RuntimeException ' is unchecked exception . " , 
 } ; 
 - verify ( checkConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; 
 } 
 
 public void testAllowUnchecked ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( RedundantThrowsCheck . class ) ; 
 - checkConfig . addAttribute ( " allowUnchecked " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowUnchecked " , " true " ) ; 
 final String [ ] expected = { 
 " 7 : 37 : Redundant throws : ' java . io . FileNotFoundException ' is subclass of ' java . io . IOException ' . " , 
 " 19 : 29 : Redundant throws : ' java . io . IOException ' listed more then one time . " , 
 / / " 35 : 27 : Unable to get class information for WrongException . " , 
 " 39 : 27 : Redundant throws : ' NullPointerException ' is subclass of ' RuntimeException ' . " , 
 } ; 
 - verify ( checkConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; 
 } 
 
 public void testAllowSubclasses ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( RedundantThrowsCheck . class ) ; 
 - checkConfig . addAttribute ( " allowSubclasses " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowSubclasses " , " true " ) ; 
 final String [ ] expected = { 
 " 13 : 16 : Redundant throws : ' RuntimeException ' is unchecked exception . " , 
 " 19 : 29 : Redundant throws : ' java . io . IOException ' listed more then one time . " , 
 " 39 : 27 : Redundant throws : ' NullPointerException ' is unchecked exception . " , 
 " 39 : 49 : Redundant throws : ' RuntimeException ' is unchecked exception . " , 
 } ; 
 - verify ( checkConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; 
 } 
 
 public void testRejectDuplicatesOnly ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( RedundantThrowsCheck . class ) ; 
 - checkConfig . addAttribute ( " allowSubclasses " , " true " ) ; 
 - checkConfig . addAttribute ( " allowUnchecked " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowSubclasses " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowUnchecked " , " true " ) ; 
 final String [ ] expected = { 
 " 19 : 29 : Redundant throws : ' java . io . IOException ' listed more then one time . " , 
 } ; 
 - verify ( checkConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputRedundantThrows . java " ) , expected ) ; 
 } 
 
 public void test _ 1168408 _ 1 ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( RedundantThrowsCheck . class ) ; 
 final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " javadoc / Test1 . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " javadoc / Test1 . java " ) , expected ) ; 
 } 
 
 public void test _ 1168408 _ 2 ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( RedundantThrowsCheck . class ) ; 
 final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " javadoc / Test2 . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " javadoc / Test2 . java " ) , expected ) ; 
 } 
 
 public void test _ 1168408 _ 3 ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( RedundantThrowsCheck . class ) ; 
 final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " javadoc / Test3 . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " javadoc / Test3 . java " ) , expected ) ; 
 } 
 
 public void test _ 1220726 ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( RedundantThrowsCheck . class ) ; 
 final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " javadoc / BadCls . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " javadoc / BadCls . java " ) , expected ) ; 
 } 
 
 public void test _ generics _ params ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( RedundantThrowsCheck . class ) ; 
 final String [ ] expected = { 
 " 15 : 34 : Redundant throws : ' RE ' is unchecked exception . " , 
 " 23 : 37 : Redundant throws : ' RE ' is subclass of ' E ' . " , 
 @ @ - 106 , 10 + 94 , 16 @ @ public class RedundantThrowsCheckTest 
 " 31 : 74 : Redundant throws : ' RE ' is unchecked exception . " , 
 " 41 : 38 : Redundant throws : ' RuntimeException ' is subclass of ' RE ' . " , 
 " 41 : 38 : Redundant throws : ' RuntimeException ' is unchecked exception . " , 
 - " 41 : 56 : Redundant throws : ' RE ' is subclass of ' java . lang . RuntimeException ' . " , 
 " 41 : 56 : Redundant throws : ' RE ' is unchecked exception . " , 
 " 42 : 13 : Redundant throws : ' java . lang . RuntimeException ' is unchecked exception . " , 
 + " 42 : 13 : Redundant throws : ' java . lang . RuntimeException ' listed more then one time . " , 
 } ; 
 - verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; 
 + } 
 + 
 + public void test _ 1379666 ( ) throws Exception 
 + { 
 + final String [ ] expected = { } ; 
 + verify ( mCheckConfig , getPath ( " javadoc / Test _ 1379666 . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java 
 index 3ec5d32 . . 7af17a9 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java 
 @ @ - 8 , 10 + 8 , 15 @ @ import java . io . File ; 
 
 public class JavadocMethodCheckTest extends BaseCheckTestCase 
 { 
 + private DefaultConfiguration mCheckConfig ; 
 + 
 + public void setUp ( ) 
 + { 
 + mCheckConfig = createCheckConfig ( JavadocMethodCheck . class ) ; 
 + } 
 + 
 public void testTags ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 final String [ ] expected = { 
 " 14 : 5 : Missing a Javadoc comment . " , 
 " 18 : 9 : Unused @ param tag for ' unused ' . " , 
 @ @ - 44 , 14 + 49 , 12 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 " 333 : Unused Javadoc tag . " , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputTags . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputTags . java " ) , expected ) ; 
 } 
 
 public void testTagsWithResolver ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; 
 final String [ ] expected = { 
 " 14 : 5 : Missing a Javadoc comment . " , 
 " 18 : 9 : Unused @ param tag for ' unused ' . " , 
 @ @ - 79 , 13 + 82 , 11 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 " 320 : 9 : Missing a Javadoc comment . " , 
 " 329 : 5 : Missing a Javadoc comment . " , 
 " 333 : Unused Javadoc tag . " , } ; 
 - verify ( checkConfig , getPath ( " InputTags . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputTags . java " ) , expected ) ; 
 } 
 
 public void testStrictJavadoc ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 final String [ ] expected = { 
 " 12 : 9 : Missing a Javadoc comment . " , 
 " 18 : 13 : Missing a Javadoc comment . " , 
 @ @ - 100 , 79 + 101 , 64 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 " 79 : 5 : Missing a Javadoc comment . " , 
 " 84 : 5 : Missing a Javadoc comment . " , 
 " 94 : 32 : Expected @ param tag for ' aA ' . " } ; 
 - verify ( checkConfig , getPath ( " InputPublicOnly . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputPublicOnly . java " ) , expected ) ; 
 } 
 
 public void testNoJavadoc ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " scope " , Scope . NOTHING . getName ( ) ) ; 
 + mCheckConfig . addAttribute ( " scope " , Scope . NOTHING . getName ( ) ) ; 
 final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " InputPublicOnly . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputPublicOnly . java " ) , expected ) ; 
 } 
 
 / / pre 1 . 4 relaxed mode is roughly equivalent with check = protected 
 public void testRelaxedJavadoc ( ) throws Exception 
 { 
 - 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " scope " , Scope . PROTECTED . getName ( ) ) ; 
 + mCheckConfig . addAttribute ( " scope " , Scope . PROTECTED . getName ( ) ) ; 
 final String [ ] expected = { 
 " 59 : 5 : Missing a Javadoc comment . " , 
 " 64 : 5 : Missing a Javadoc comment . " , 
 " 79 : 5 : Missing a Javadoc comment . " , 
 " 84 : 5 : Missing a Javadoc comment . " } ; 
 - verify ( checkConfig , getPath ( " InputPublicOnly . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputPublicOnly . java " ) , expected ) ; 
 } 
 
 public void testScopeInnerInterfacesPublic ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " scope " , Scope . PUBLIC . getName ( ) ) ; 
 + mCheckConfig . addAttribute ( " scope " , Scope . PUBLIC . getName ( ) ) ; 
 final String [ ] expected = { 
 " 43 : 9 : Missing a Javadoc comment . " , 
 " 44 : 9 : Missing a Javadoc comment . " } ; 
 - verify ( checkConfig , getPath ( " InputScopeInnerInterfaces . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputScopeInnerInterfaces . java " ) , expected ) ; 
 } 
 
 public void testScopeAnonInnerPrivate ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " scope " , Scope . PRIVATE . getName ( ) ) ; 
 + mCheckConfig . addAttribute ( " scope " , Scope . PRIVATE . getName ( ) ) ; 
 final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " InputScopeAnonInner . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputScopeAnonInner . java " ) , expected ) ; 
 } 
 
 public void testScopeAnonInnerAnonInner ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " scope " , Scope . ANONINNER . getName ( ) ) ; 
 + mCheckConfig . addAttribute ( " scope " , Scope . ANONINNER . getName ( ) ) ; 
 final String [ ] expected = { 
 " 26 : 9 : Missing a Javadoc comment . " , 
 " 39 : 17 : Missing a Javadoc comment . " , 
 " 53 : 17 : Missing a Javadoc comment . " , } ; 
 - verify ( checkConfig , getPath ( " InputScopeAnonInner . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputScopeAnonInner . java " ) , expected ) ; 
 } 
 
 public void testScopeAnonInnerWithResolver ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; 
 final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " InputScopeAnonInner . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputScopeAnonInner . java " ) , expected ) ; 
 } 
 
 public void testTagsWithSubclassesAllowed ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; 
 final String [ ] expected = { 
 " 14 : 5 : Missing a Javadoc comment . " , 
 " 18 : 9 : Unused @ param tag for ' unused ' . " , 
 @ @ - 200 , 13 + 186 , 11 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 " 320 : 9 : Missing a Javadoc comment . " , 
 " 329 : 5 : Missing a Javadoc comment . " , 
 " 333 : Unused Javadoc tag . " , } ; 
 - verify ( checkConfig , getPath ( " InputTags . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputTags . java " ) , expected ) ; 
 } 
 
 public void testScopes ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 final String [ ] expected = { 
 " 8 : 5 : Missing a Javadoc comment . " , 
 " 9 : 5 : Missing a Javadoc comment . " , 
 @ @ - 244 , 30 + 228 , 26 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 " 104 : 9 : Missing a Javadoc comment . " , 
 " 105 : 9 : Missing a Javadoc comment . " , 
 " 106 : 9 : Missing a Javadoc comment . " , } ; 
 - verify ( checkConfig , getPath ( " javadoc " + File . separator 
 + verify ( mCheckConfig , getPath ( " javadoc " + File . separator 
 + " InputNoJavadoc . java " ) , expected ) ; 
 } 
 
 public void testScopes2 ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " scope " , Scope . PROTECTED . getName ( ) ) ; 
 + mCheckConfig . addAttribute ( " scope " , Scope . PROTECTED . getName ( ) ) ; 
 final String [ ] expected = { 
 " 8 : 5 : Missing a Javadoc comment . " , 
 " 9 : 5 : Missing a Javadoc comment . " , 
 " 19 : 9 : Missing a Javadoc comment . " , 
 " 20 : 9 : Missing a Javadoc comment . " , } ; 
 - verify ( checkConfig , getPath ( " javadoc " + File . separator 
 + verify ( mCheckConfig , getPath ( " javadoc " + File . separator 
 + " InputNoJavadoc . java " ) , expected ) ; 
 } 
 
 public void testExcludeScope ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " scope " , Scope . PRIVATE . getName ( ) ) ; 
 - checkConfig . addAttribute ( " excludeScope " , Scope . PROTECTED . getName ( ) ) ; 
 + mCheckConfig . addAttribute ( " scope " , Scope . PRIVATE . getName ( ) ) ; 
 + mCheckConfig . addAttribute ( " excludeScope " , Scope . PROTECTED . getName ( ) ) ; 
 final String [ ] expected = { 
 " 10 : 5 : Missing a Javadoc comment . " , 
 " 11 : 5 : Missing a Javadoc comment . " , 
 @ @ - 301 , 24 + 281 , 20 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 " 104 : 9 : Missing a Javadoc comment . " , 
 " 105 : 9 : Missing a Javadoc comment . " , 
 " 106 : 9 : Missing a Javadoc comment . " , } ; 
 - verify ( checkConfig , getPath ( " javadoc " + File . separator 
 + verify ( mCheckConfig , getPath ( " javadoc " + File . separator 
 + " InputNoJavadoc . java " ) , expected ) ; 
 } 
 
 public void testAllowMissingJavadoc ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " allowMissingJavadoc " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowMissingJavadoc " , " true " ) ; 
 final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " javadoc " + File . separator 
 + verify ( mCheckConfig , getPath ( " javadoc " + File . separator 
 + " InputNoJavadoc . java " ) , expected ) ; 
 } 
 
 public void testSetterGetterOff ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 final String [ ] expected = { 
 " 5 : 5 : Missing a Javadoc comment . " , 
 " 10 : 5 : Missing a Javadoc comment . " , 
 @ @ - 329 , 15 + 305 , 13 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 " 35 : 5 : Missing a Javadoc comment . " , 
 " 41 : 5 : Missing a Javadoc comment . " , 
 " 46 : 5 : Missing a Javadoc comment . " , } ; 
 - verify ( checkConfig , getPath ( " javadoc " + File . separator 
 + verify ( mCheckConfig , getPath ( " javadoc " + File . separator 
 + " InputSetterGetter . java " ) , expected ) ; 
 } 
 
 public void testSetterGetterOn ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " allowMissingPropertyJavadoc " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowMissingPropertyJavadoc " , " true " ) ; 
 final String [ ] expected = { 
 " 15 : 5 : Missing a Javadoc comment . " , 
 " 20 : 5 : Missing a Javadoc comment . " , 
 @ @ - 345 , 52 + 319 , 42 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 " 30 : 5 : Missing a Javadoc comment . " , 
 " 35 : 5 : Missing a Javadoc comment . " , 
 " 41 : 5 : Missing a Javadoc comment . " , } ; 
 - verify ( checkConfig , getPath ( " javadoc " + File . separator 
 + verify ( mCheckConfig , getPath ( " javadoc " + File . separator 
 + " InputSetterGetter . java " ) , expected ) ; 
 } 
 
 public void testTypeParamsTags ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 final String [ ] expected = { 
 " 26 : 8 : Unused @ param tag for ' < BB > ' . " , 
 " 28 : 13 : Expected @ param tag for ' < Z > ' . " , } ; 
 - verify ( checkConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; 
 } 
 
 public void test _ 1168408 _ 1 ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " javadoc / Test1 . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " javadoc / Test1 . java " ) , expected ) ; 
 } 
 
 public void test _ 1168408 _ 2 ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " javadoc / Test2 . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " javadoc / Test2 . java " ) , expected ) ; 
 } 
 
 public void test _ 1168408 _ 3 ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; 
 - checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; 
 final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " javadoc / Test3 . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " javadoc / Test3 . java " ) , expected ) ; 
 } 
 
 public void test _ generics _ 1 ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; 
 - checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; 
 final String [ ] expected = { 
 " 15 : 34 : Expected @ throws tag for ' RE ' . " , 
 " 23 : 37 : Expected @ throws tag for ' RE ' . " , 
 @ @ - 399 , 14 + 363 , 12 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 " 41 : 38 : Expected @ throws tag for ' RuntimeException ' . " , 
 " 42 : 13 : Expected @ throws tag for ' java . lang . RuntimeException ' . " , 
 } ; 
 - verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; 
 } 
 
 public void test _ generics _ 2 ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 - checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; 
 final String [ ] expected = { 
 " 15 : 34 : Expected @ throws tag for ' RE ' . " , 
 " 23 : 37 : Expected @ throws tag for ' RE ' . " , 
 @ @ - 415 , 13 + 377 , 11 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 " 41 : 38 : Expected @ throws tag for ' RuntimeException ' . " , 
 " 42 : 13 : Expected @ throws tag for ' java . lang . RuntimeException ' . " , 
 } ; 
 - verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; 
 } 
 
 public void test _ generics _ 3 ( ) throws Exception 
 { 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( JavadocMethodCheck . class ) ; 
 final String [ ] expected = { 
 " 6 : 8 : Unused @ throws tag for ' RE ' . " , 
 " 15 : 34 : Expected @ throws tag for ' RE ' . " , 
 @ @ - 430 , 6 + 390 , 14 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 " 41 : 38 : Expected @ throws tag for ' RuntimeException ' . " , 
 " 42 : 13 : Expected @ throws tag for ' java . lang . RuntimeException ' . " , 
 } ; 
 - verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; 
 + verify ( mCheckConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; 
 + } 
 + 
 + public void test _ 1379666 ( ) throws Exception 
 + { 
 + mCheckConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; 
 + mCheckConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; 
 + final String [ ] expected = { } ; 
 + verify ( mCheckConfig , getPath ( " javadoc / Test _ 1379666 . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index 250d159 . . cf52f6d 100755 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 9 , 27 + 9 , 39 @ @ 
 < / properties > 
 
 < body > 
 + < section name = " Release 4 . 2 " > 
 + < p > Fixed Bugs : < / p > 
 + 
 + < ul > 
 + < li > 
 + Fixed problem in type aware checks with loading 
 + inner - classes which were referenced as 
 + & lt ; outer _ class _ name & gt ; . & lt ; inner _ class _ name & gt ; ( bug 
 + 1379666 , modules JavadocMethod and RedundantThrows ) . 
 + < / li > 
 + < / ul > 
 + < / section > 
 
 < section name = " Release 4 . 1 " > 
 < p > Fixed Bugs : < / p > 
 
 < ul > 
 < li > 
 - 	 Documentation for JavadocMethod check corrected to indicate 
 + Documentation for JavadocMethod check corrected to indicate 
 that after fix for 1290379 javadoc which contains only @ see 
 tag is not valid any more ( bug 1369615 ) 
 < / li > 
 < li > 
 - 	 Fixed StackOverflowError in GenericIllegalRegexp check 
 + Fixed StackOverflowError in GenericIllegalRegexp check 
 which may occur if ignoreComments is true and there is an 
 illegal match in comment at the end of line . ( bug 1371588 ) 
 < / li > 
 < li > 
 - 	 InnerAssignment now ignores assignments in annotations . ( bug 
 + InnerAssignment now ignores assignments in annotations . ( bug 
 1369425 ) 
 < / li > 
 < li > 
 - 	 Applied patch from Ralf ( rakus ) to remove javadoc ' s 
 + Applied patch from Ralf ( rakus ) to remove javadoc ' s 
 complainings . ( patch 1352862 ) 
 < / li > 
 < li > 
 @ @ - 37 , 9 + 49 , 9 @ @ 
 throws if someone tries to create object of generic class 
 ( with any params ) ( bug 1374792 ) . 
 < / li > 
 - 	 < li > 
 - 	 Added information to the manifest file . ( bug 1380322 ) . 
 - 	 < / li > 
 + < li > 
 + Added information to the manifest file . ( bug 1380322 ) . 
 + < / li > 
 < / ul > 
 < / section > 

