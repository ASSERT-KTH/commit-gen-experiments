BLEU SCORE: 0.038229746997386335

TEST MSG: minor : remove gratipay ( https : / / gratipay . news / the - end - cbfba8f50981 ) , restore freedomsponsors
GENERATED MSG: minor : bountysource - checkstyle _ java is removed as I got control over checkstyle team

TEST DIFF (one line): diff - - git a / src / xdocs / sponsoring . xml b / src / xdocs / sponsoring . xml <nl> index 8168a65 . . 5df8b34 100644 <nl> - - - a / src / xdocs / sponsoring . xml <nl> + + + b / src / xdocs / sponsoring . xml <nl> @ @ - 22 , 16 + 22 , 12 @ @ <nl> < / p > <nl> <nl> < p > <nl> - < ! - - " 502 Bad Gateway " for more than a day <nl> < a href = " https : / / freedomsponsors . org / search / ? project _ name = checkstyle " > freedomsponsors - checkstyle < / a > <nl> < br / > <nl> - - - > <nl> < a href = " https : / / www . bountysource . com / teams / checkstyle / issues " > bountysource - checkstyle < / a > <nl> < br / > <nl> < a href = " https : / / salt . bountysource . com / teams / checkstyle " > bountysource ( salt ) - checkstyle < / a > <nl> < br / > <nl> - < a href = " https : / / gratipay . com / checkstyle / " > gratipay - checkstyle < / a > <nl> - < br / > <nl> < a href = " https : / / flattr . com / submit / auto ? fid = g39d10 & amp ; url = http % 3A % 2F % 2Fcheckstyle . sourceforge . net " target = " _ blank " > < img src = " https : / / button . flattr . com / flattr - badge - large . png " alt = " Flattr this " title = " Flattr this " border = " 0 " / > < / a > <nl> < / p > <nl>
NEAREST DIFF (one line): diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm <nl> index 425378f . . b32e130 100644 <nl> - - - a / src / xdocs / writingjavadocchecks . xml . vm <nl> + + + b / src / xdocs / writingjavadocchecks . xml . vm <nl> @ @ - 22 , 9 + 22 , 27 @ @ <nl> < / section > <nl> <nl> < section name = " Overview " > <nl> + < p > <nl> + To start implementing your own Check create new class and extend AbstractJavadocCheck . It has two abstract methods : <nl> + < / p > <nl> + < ul > <nl> + < li > getDefaultJavadocTokens ( ) - return array of token types that your new Check requires to process ( see " Token Types " section ) < / li > <nl> + < li > visitJavadocToken ( DetailNode ) - it ' s the place you should put tree nodes proccessing . The argument is Javadoc tree node of type you described <nl> + before in getDefaultJavadocTokens ( ) method . < / li > <nl> + < / ul > <nl> + < p > <nl> + Javadoc parser requires XHTML to be used in Javadoc comments , i . e . if there is some open tag ( for example & lt ; div & gt ; ) then there have to be its close tag & lt ; / div & gt ; . <nl> + This means that if Javadoc comment has incorrect XHTML structure then Javadoc Parser will fail processing the comment , therefore , your new Check can ' t get its parse tree and process anything from this Javadoc comment . For more details and examples go to " HTML code in Javadoc comments " section . <nl> + < / p > <nl> < / section > <nl> <nl> < section name = " Difference between Java Grammar and Javadoc comments Grammar " > <nl> + < p > <nl> + Java grammar parses java file due to language specifications . So , there are singleline comments and multiline / block comments in it . Java compiler doesn ' t know about Javadoc because it is just a multiline comment . <nl> + To parse multiline comment as a Javadoc comment , checkstyle has second grammar - Javadoc grammar . So , it ' s supposed to proccess block comments and parse them to Abstract Syntax Tree . <nl> + The problem is that Java grammar is old one and uses ANTLR v2 , while Javadoc grammar uses ANTLR v4 . Because of that , these two grammars and their trees are not compatible . <nl> + Java AST consists of DetailAST objects , while Javadoc AST consists of DetailNode objects . <nl> + < / p > <nl> < / section > <nl> <nl> < section name = " Tools to see Javadoc tree structure " > <nl> @ @ - 142 , 13 + 160 , 14 @ @ JAVADOC - > * My < b > class < / b > . \ r \ n * @ see AbstractClass < EOF > [ 0 : 0 ] <nl> | ` - - CLASS - > AbstractClass [ 1 : 8 ] <nl> ` - - EOF - > < EOF > [ 1 : 21 ] <nl> ] ] > < / source > <nl> - <nl> - <nl> < / section > <nl> <nl> < section name = " Token types " > <nl> < / section > <nl> <nl> + < section name = " HTML code in Javadoc comments " > <nl> + < / section > <nl> + <nl> < section name = " Checkstyle SDK GUI " > <nl> < / section > <nl>

TEST DIFF:
diff - - git a / src / xdocs / sponsoring . xml b / src / xdocs / sponsoring . xml 
 index 8168a65 . . 5df8b34 100644 
 - - - a / src / xdocs / sponsoring . xml 
 + + + b / src / xdocs / sponsoring . xml 
 @ @ - 22 , 16 + 22 , 12 @ @ 
 < / p > 
 
 < p > 
 - < ! - - " 502 Bad Gateway " for more than a day 
 < a href = " https : / / freedomsponsors . org / search / ? project _ name = checkstyle " > freedomsponsors - checkstyle < / a > 
 < br / > 
 - - - > 
 < a href = " https : / / www . bountysource . com / teams / checkstyle / issues " > bountysource - checkstyle < / a > 
 < br / > 
 < a href = " https : / / salt . bountysource . com / teams / checkstyle " > bountysource ( salt ) - checkstyle < / a > 
 < br / > 
 - < a href = " https : / / gratipay . com / checkstyle / " > gratipay - checkstyle < / a > 
 - < br / > 
 < a href = " https : / / flattr . com / submit / auto ? fid = g39d10 & amp ; url = http % 3A % 2F % 2Fcheckstyle . sourceforge . net " target = " _ blank " > < img src = " https : / / button . flattr . com / flattr - badge - large . png " alt = " Flattr this " title = " Flattr this " border = " 0 " / > < / a > 
 < / p > 


NEAREST DIFF:
diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm 
 index 425378f . . b32e130 100644 
 - - - a / src / xdocs / writingjavadocchecks . xml . vm 
 + + + b / src / xdocs / writingjavadocchecks . xml . vm 
 @ @ - 22 , 9 + 22 , 27 @ @ 
 < / section > 
 
 < section name = " Overview " > 
 + < p > 
 + To start implementing your own Check create new class and extend AbstractJavadocCheck . It has two abstract methods : 
 + < / p > 
 + < ul > 
 + < li > getDefaultJavadocTokens ( ) - return array of token types that your new Check requires to process ( see " Token Types " section ) < / li > 
 + < li > visitJavadocToken ( DetailNode ) - it ' s the place you should put tree nodes proccessing . The argument is Javadoc tree node of type you described 
 + before in getDefaultJavadocTokens ( ) method . < / li > 
 + < / ul > 
 + < p > 
 + Javadoc parser requires XHTML to be used in Javadoc comments , i . e . if there is some open tag ( for example & lt ; div & gt ; ) then there have to be its close tag & lt ; / div & gt ; . 
 + This means that if Javadoc comment has incorrect XHTML structure then Javadoc Parser will fail processing the comment , therefore , your new Check can ' t get its parse tree and process anything from this Javadoc comment . For more details and examples go to " HTML code in Javadoc comments " section . 
 + < / p > 
 < / section > 
 
 < section name = " Difference between Java Grammar and Javadoc comments Grammar " > 
 + < p > 
 + Java grammar parses java file due to language specifications . So , there are singleline comments and multiline / block comments in it . Java compiler doesn ' t know about Javadoc because it is just a multiline comment . 
 + To parse multiline comment as a Javadoc comment , checkstyle has second grammar - Javadoc grammar . So , it ' s supposed to proccess block comments and parse them to Abstract Syntax Tree . 
 + The problem is that Java grammar is old one and uses ANTLR v2 , while Javadoc grammar uses ANTLR v4 . Because of that , these two grammars and their trees are not compatible . 
 + Java AST consists of DetailAST objects , while Javadoc AST consists of DetailNode objects . 
 + < / p > 
 < / section > 
 
 < section name = " Tools to see Javadoc tree structure " > 
 @ @ - 142 , 13 + 160 , 14 @ @ JAVADOC - > * My < b > class < / b > . \ r \ n * @ see AbstractClass < EOF > [ 0 : 0 ] 
 | ` - - CLASS - > AbstractClass [ 1 : 8 ] 
 ` - - EOF - > < EOF > [ 1 : 21 ] 
 ] ] > < / source > 
 - 
 - 
 < / section > 
 
 < section name = " Token types " > 
 < / section > 
 
 + < section name = " HTML code in Javadoc comments " > 
 + < / section > 
 + 
 < section name = " Checkstyle SDK GUI " > 
 < / section > 

