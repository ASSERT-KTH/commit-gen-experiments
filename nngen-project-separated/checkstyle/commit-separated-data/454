BLEU SCORE: 0.029079340872079116

TEST MSG: config : disabled forbiddenapis on inputs
GENERATED MSG: fix for build problem , exclusion is provided

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 2e8fff1 . . e6f2ec0 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1110 , 8 + 1110 , 7 @ @ <nl> < ! - - generated classes , unfortunately use problematic api - - > <nl> < exclude > * * / GeneratedJavaLexer . class < / exclude > <nl> < exclude > * * / JavadocParser . class < / exclude > <nl> - < ! - - excluded till https : / / github . com / policeman - tools / forbidden - apis / issues / 108 - - > <nl> - < exclude > * * / checks / annotation / annotationlocation / InputAnnotationLocationDeprecatedAndCustom * < / exclude > <nl> + < exclude > * * / Input * < / exclude > <nl> < / excludes > <nl> < / configuration > <nl> < executions >
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> index 7417fd1 . . e655a0e 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> @ @ - 284 , 7 + 284 , 7 @ @ public class CheckStyleTask extends Task <nl> log ( " compiled on " + compileTimestamp , Project . MSG _ VERBOSE ) ; <nl> <nl> / / Check for no arguments <nl> - if ( ( mFileName = = null ) & & ( mFileSets . size ( ) = = 0 ) ) { <nl> + if ( ( mFileName = = null ) & & mFileSets . isEmpty ( ) ) { <nl> throw new BuildException ( <nl> " Must specify at least one of ' file ' or nested ' fileset ' . " , <nl> getLocation ( ) ) ; <nl> @ @ - 449 , 7 + 449 , 7 @ @ public class CheckStyleTask extends Task <nl> final AuditListener [ ] listeners = new AuditListener [ formatterCount ] ; <nl> <nl> / / formatters <nl> - if ( mFormatters . size ( ) = = 0 ) { <nl> + if ( mFormatters . isEmpty ( ) ) { <nl> final OutputStream debug = new LogOutputStream ( this , <nl> Project . MSG _ DEBUG ) ; <nl> final OutputStream err = new LogOutputStream ( this , Project . MSG _ ERR ) ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> index 74eae23 . . f8d96af 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; <nl> import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; <nl> import com . puppycrawl . tools . checkstyle . api . SeverityLevelCounter ; <nl> import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> + <nl> import java . io . File ; <nl> import java . io . FileNotFoundException ; <nl> import java . io . IOException ; <nl> @ @ - 44 , 8 + 45 , 8 @ @ import java . nio . charset . Charset ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> import java . util . Set ; <nl> + import java . util . SortedSet ; <nl> import java . util . StringTokenizer ; <nl> - import java . util . TreeSet ; <nl> <nl> / * * <nl> * This class provides the functionality to check a set of files . <nl> @ @ - 254 , 7 + 255 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher <nl> for ( final File f : aFiles ) { <nl> final String fileName = f . getAbsolutePath ( ) ; <nl> fireFileStarted ( fileName ) ; <nl> - final TreeSet < LocalizedMessage > fileMessages = Sets . newTreeSet ( ) ; <nl> + final SortedSet < LocalizedMessage > fileMessages = Sets . newTreeSet ( ) ; <nl> try { <nl> final FileText theText = new FileText ( f . getAbsoluteFile ( ) , <nl> mCharset ) ; <nl> @ @ - 501 , 7 + 502 , 8 @ @ public class Checker extends AutomaticBean implements MessageDispatcher <nl> * @ param aFileName the audited file <nl> * @ param aErrors the audit errors from the file <nl> * / <nl> - public void fireErrors ( String aFileName , TreeSet < LocalizedMessage > aErrors ) <nl> + public void fireErrors ( String aFileName , <nl> + SortedSet < LocalizedMessage > aErrors ) <nl> { <nl> final String stripped = getStrippedFileName ( aFileName ) ; <nl> for ( final LocalizedMessage element : aErrors ) { <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / MessageDispatcher . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / MessageDispatcher . java <nl> index a4d50c1 . . 59927ba 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / MessageDispatcher . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / MessageDispatcher . java <nl> @ @ - 18 , 7 + 18 , 7 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> - import java . util . TreeSet ; <nl> + import java . util . SortedSet ; <nl> <nl> / * * <nl> * Used by FileSetChecks to distribute AuditEvents to AuditListeners . <nl> @ @ - 43 , 5 + 43 , 5 @ @ public interface MessageDispatcher <nl> * @ param aFileName the audited file <nl> * @ param aErrors the audit errors from the file <nl> * / <nl> - void fireErrors ( String aFileName , TreeSet < LocalizedMessage > aErrors ) ; <nl> + void fireErrors ( String aFileName , SortedSet < LocalizedMessage > aErrors ) ; <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> index 4363879 . . c420d38 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> @ @ - 101 , 13 + 101 , 13 @ @ public class EmptyBlockCheck <nl> aAST . getText ( ) ) ; <nl> } <nl> } <nl> - else if ( getAbstractOption ( ) = = BlockOption . TEXT ) { <nl> - if ( ! hasText ( slistAST ) ) { <nl> - log ( slistAST . getLineNo ( ) , <nl> - slistAST . getColumnNo ( ) , <nl> - " block . empty " , <nl> - aAST . getText ( ) ) ; <nl> - } <nl> + else if ( getAbstractOption ( ) = = BlockOption . TEXT <nl> + & & ! hasText ( slistAST ) ) <nl> + { <nl> + log ( slistAST . getLineNo ( ) , <nl> + slistAST . getColumnNo ( ) , <nl> + " block . empty " , <nl> + aAST . getText ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java <nl> index a44729f . . ca1e871 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java <nl> @ @ - 69 , 14 + 69 , 14 @ @ public class CovariantEqualsCheck extends Check <nl> if ( objBlock ! = null ) { <nl> DetailAST child = objBlock . getFirstChild ( ) ; <nl> while ( child ! = null ) { <nl> - if ( child . getType ( ) = = TokenTypes . METHOD _ DEF ) { <nl> - if ( CheckUtils . isEqualsMethod ( child ) ) { <nl> - if ( hasObjectParameter ( child ) ) { <nl> - hasEqualsObject = true ; <nl> - } <nl> - else { <nl> - mEqualsMethods . add ( child ) ; <nl> - } <nl> + if ( child . getType ( ) = = TokenTypes . METHOD _ DEF <nl> + & & CheckUtils . isEqualsMethod ( child ) ) <nl> + { <nl> + if ( hasObjectParameter ( child ) ) { <nl> + hasEqualsObject = true ; <nl> + } <nl> + else { <nl> + mEqualsMethods . add ( child ) ; <nl> } <nl> } <nl> child = child . getNextSibling ( ) ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> index b53552d . . e670bd3 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> @ @ - 123 , 15 + 123 , 18 @ @ public class EqualsAvoidNullCheck extends Check <nl> final DetailAST expr = dot . getNextSibling ( ) . getFirstChild ( ) ; <nl> <nl> if ( " equals " . equals ( method . getText ( ) ) <nl> - | | ( ! mIgnoreEqualsIgnoreCase & & " equalsIgnoreCase " <nl> - . equals ( method . getText ( ) ) ) ) <nl> + & & containsOneArg ( expr ) & & containsAllSafeTokens ( expr ) ) <nl> { <nl> - if ( containsOneArg ( expr ) & & containsAllSafeTokens ( expr ) ) { <nl> - log ( aMethodCall . getLineNo ( ) , aMethodCall . getColumnNo ( ) , <nl> - " equals " . equals ( method . getText ( ) ) <nl> - ? " equals . avoid . null " <nl> - : " equalsIgnoreCase . avoid . null " ) ; <nl> - } <nl> + log ( aMethodCall . getLineNo ( ) , aMethodCall . getColumnNo ( ) , <nl> + " equals . avoid . null " ) ; <nl> + } <nl> + <nl> + if ( ! mIgnoreEqualsIgnoreCase <nl> + & & " equalsIgnoreCase " . equals ( method . getText ( ) ) <nl> + & & containsOneArg ( expr ) & & containsAllSafeTokens ( expr ) ) <nl> + { <nl> + log ( aMethodCall . getLineNo ( ) , aMethodCall . getColumnNo ( ) , <nl> + " equalsIgnoreCase . avoid . null " ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> index 75e4755 . . a85075f 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> @ @ - 133 , 14 + 133 , 14 @ @ public class FallThroughCheck extends Check <nl> <nl> final DetailAST slist = aAST . findFirstToken ( TokenTypes . SLIST ) ; <nl> <nl> - if ( ! isTerminated ( slist , true , true ) ) { <nl> - if ( ! hasFallTruComment ( aAST , nextGroup ) ) { <nl> - if ( ! isLastGroup ) { <nl> - log ( nextGroup , " fall . through " ) ; <nl> - } <nl> - else { <nl> - log ( aAST , " fall . through . last " ) ; <nl> - } <nl> + if ( ! isTerminated ( slist , true , true ) <nl> + & & ! hasFallTruComment ( aAST , nextGroup ) ) <nl> + { <nl> + if ( ! isLastGroup ) { <nl> + log ( nextGroup , " fall . through " ) ; <nl> + } <nl> + else { <nl> + log ( aAST , " fall . through . last " ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java <nl> index 79e8917 . . 1e81e79 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java <nl> @ @ - 99 , 10 + 99 , 11 @ @ public final class OneStatementPerLineCheck extends Check <nl> private void visitExpr ( DetailAST aAst ) <nl> { <nl> mExprDepth + + ; <nl> - if ( mExprDepth = = 1 ) { <nl> - if ( ! mInForHeader & & ( mLastStatementEnd = = aAst . getLineNo ( ) ) ) { <nl> - log ( aAst , " multiple . statements . line " ) ; <nl> - } <nl> + if ( mExprDepth = = 1 <nl> + & & ! mInForHeader <nl> + & & ( mLastStatementEnd = = aAst . getLineNo ( ) ) ) <nl> + { <nl> + log ( aAst , " multiple . statements . line " ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> index 431c53b . . f96eb99 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> @ @ - 134 , 11 + 134 , 9 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck <nl> final ClassInfo newClassInfo = <nl> createClassInfo ( new Token ( aExc ) , getCurrentClassName ( ) ) ; <nl> <nl> - if ( ! mAllowUnchecked ) { <nl> - if ( isUnchecked ( newClassInfo . getClazz ( ) ) ) { <nl> - log ( aExc . getLineNo ( ) , aExc . getColumnNo ( ) , <nl> - " redundant . throws . unchecked " , aExc . getText ( ) ) ; <nl> - } <nl> + if ( ! mAllowUnchecked & & isUnchecked ( newClassInfo . getClazz ( ) ) ) { <nl> + log ( aExc . getLineNo ( ) , aExc . getColumnNo ( ) , <nl> + " redundant . throws . unchecked " , aExc . getText ( ) ) ; <nl> } <nl> <nl> boolean shouldAdd = true ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java <nl> index 19e61a0 . . 72e6c61 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java <nl> @ @ - 430 , 11 + 430 , 8 @ @ public final class StrictDuplicateCodeCheck extends AbstractFileSetCheck <nl> } <nl> <nl> final Collection < Integer > ignoreEntries = aIgnore . get ( aILine ) ; <nl> - / / avoid Integer constructor whenever we can <nl> - if ( ignoreEntries ! = null ) { <nl> - if ( ignoreEntries . contains ( jLine ) ) { <nl> - continue ; <nl> - } <nl> + if ( ignoreEntries ! = null & & ignoreEntries . contains ( jLine ) ) { <nl> + continue ; <nl> } <nl> <nl> final int duplicateLines = <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java <nl> index c5d6f48 . . d053178 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java <nl> @ @ - 89 , 12 + 89 , 12 @ @ final class ImportControlLoader extends AbstractLoader <nl> mStack . push ( new PkgControl ( pkg ) ) ; <nl> } <nl> else if ( " subpackage " . equals ( aQName ) ) { <nl> - assert mStack . size ( ) > 0 ; <nl> + assert ! mStack . isEmpty ( ) ; <nl> final String name = safeGet ( aAtts , " name " ) ; <nl> mStack . push ( new PkgControl ( mStack . peek ( ) , name ) ) ; <nl> } <nl> else if ( " allow " . equals ( aQName ) | | " disallow " . equals ( aQName ) ) { <nl> - assert mStack . size ( ) > 0 ; <nl> + assert ! mStack . isEmpty ( ) ; <nl> / / Need to handle either " pkg " or " class " attribute . <nl> / / May have " exact - match " for " pkg " <nl> / / May have " local - only " <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index 86eb0a6 . . 2c36a78 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 294 , 8 + 294 , 7 @ @ public class ImportOrderCheck <nl> } <nl> } <nl> else if ( groupIdx = = mLastGroup ) { <nl> - doVisitTokenInSameGroup ( aIdent , aIsStatic , aPrevious , name , <nl> - line ) ; <nl> + doVisitTokenInSameGroup ( aIsStatic , aPrevious , name , line ) ; <nl> } <nl> else { <nl> log ( line , " import . ordering " , name ) ; <nl> @ @ - 309 , 14 + 308 , 13 @ @ public class ImportOrderCheck <nl> / * * <nl> * Shares processing . . . <nl> * <nl> - * @ param aIdent the import to process . <nl> * @ param aIsStatic whether the token is static or not . <nl> * @ param aPrevious previous non - static but current is static ( above ) , or <nl> * previous static but current is non - static ( under ) . <nl> * @ param aName the name of the current import . <nl> * @ param aLine the line of the current import . <nl> * / <nl> - private void doVisitTokenInSameGroup ( FullIdent aIdent , boolean aIsStatic , <nl> + private void doVisitTokenInSameGroup ( boolean aIsStatic , <nl> boolean aPrevious , String aName , int aLine ) <nl> { <nl> if ( ! mOrdered ) { <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index d23a239 . . d90cbb8 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 260 , 7 + 260 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> } <nl> } <nl> else { <nl> - checkComment ( aAST , cmt , theScope ) ; <nl> + checkComment ( aAST , cmt ) ; <nl> } <nl> } <nl> } <nl> @ @ - 313 , 13 + 313 , 12 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> * <nl> * @ param aAST the token for the method <nl> * @ param aComment the Javadoc comment <nl> - * @ param aScope the scope of the method . <nl> * / <nl> - private void checkComment ( DetailAST aAST , TextBlock aComment , Scope aScope ) <nl> + private void checkComment ( DetailAST aAST , TextBlock aComment ) <nl> { <nl> final List < JavadocTag > tags = getMethodTags ( aComment ) ; <nl> <nl> - if ( hasShortCircuitTag ( aAST , tags , aScope ) ) { <nl> + if ( hasShortCircuitTag ( aAST , tags ) ) { <nl> return ; <nl> } <nl> <nl> @ @ - 354 , 11 + 353 , 10 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> * <nl> * @ param aAST the construct being checked <nl> * @ param aTags the list of Javadoc tags associated with the construct <nl> - * @ param aScope the scope of the construct <nl> * @ return true if the construct has a short circuit tag . <nl> * / <nl> private boolean hasShortCircuitTag ( final DetailAST aAST , <nl> - final List < JavadocTag > aTags , final Scope aScope ) <nl> + final List < JavadocTag > aTags ) <nl> { <nl> / / Check if it contains { @ inheritDoc } tag <nl> if ( ( aTags . size ( ) ! = 1 ) <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java <nl> index acca921 . . 7f42a1f 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java <nl> @ @ - 74 , 7 + 74 , 7 @ @ class TagParser <nl> * / <nl> public boolean hasNextTag ( ) <nl> { <nl> - return ( mTags . size ( ) > 0 ) ; <nl> + return ! mTags . isEmpty ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java <nl> index 15e0a58 . . 44b372c 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java <nl> @ @ - 91 , 14 + 91 , 13 @ @ public class ParenPadCheck extends AbstractParenPadCheck <nl> processLeft ( theAst ) ; <nl> } <nl> } <nl> - else if ( ( theAst . getParent ( ) = = null ) <nl> + else if ( ( ( theAst . getParent ( ) = = null ) <nl> | | ( theAst . getParent ( ) . getType ( ) ! = TokenTypes . TYPECAST ) <nl> | | ( theAst . getParent ( ) . findFirstToken ( TokenTypes . RPAREN ) <nl> ! = theAst ) ) <nl> + & & ! isFollowsEmptyForIterator ( theAst ) ) <nl> { <nl> - if ( ! isFollowsEmptyForIterator ( theAst ) ) { <nl> - processRight ( theAst ) ; <nl> - } <nl> + processRight ( theAst ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java <nl> index 82d2342 . . ecd3135 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java <nl> @ @ - 154 , 18 + 154 , 12 @ @ public class SuppressElement <nl> return false ; <nl> } <nl> <nl> - / / reject if line matches a line CSV value . <nl> - if ( mLineFilter ! = null ) { <nl> - if ( mLineFilter . accept ( aEvent . getLine ( ) ) ) { <nl> - return false ; <nl> - } <nl> + if ( mLineFilter ! = null & & mLineFilter . accept ( aEvent . getLine ( ) ) ) { <nl> + return false ; <nl> } <nl> <nl> - / / reject if column matches a column CSV value . <nl> - if ( mColumnFilter ! = null ) { <nl> - if ( mColumnFilter . accept ( aEvent . getColumn ( ) ) ) { <nl> - return false ; <nl> - } <nl> + if ( mColumnFilter ! = null & & mColumnFilter . accept ( aEvent . getColumn ( ) ) ) { <nl> + return false ; <nl> } <nl> return true ; <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> index d615dcf . . adf31fc 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> @ @ - 484 , 9 + 484 , 9 @ @ public class SuppressWithNearbyCommentFilter <nl> for ( final TextBlock comment : aComments ) { <nl> final int startLineNo = comment . getStartLineNo ( ) ; <nl> final String [ ] text = comment . getText ( ) ; <nl> - tagCommentLine ( text [ 0 ] , startLineNo , comment . getStartColNo ( ) ) ; <nl> + tagCommentLine ( text [ 0 ] , startLineNo ) ; <nl> for ( int i = 1 ; i < text . length ; i + + ) { <nl> - tagCommentLine ( text [ i ] , startLineNo + i , 0 ) ; <nl> + tagCommentLine ( text [ i ] , startLineNo + i ) ; <nl> } <nl> } <nl> } <nl> @ @ - 496 , 9 + 496 , 8 @ @ public class SuppressWithNearbyCommentFilter <nl> * checkstyle reporting on or the format for turning reporting off . <nl> * @ param aText the string to tag . <nl> * @ param aLine the line number of aText . <nl> - * @ param aColumn the column number of aText . <nl> * / <nl> - private void tagCommentLine ( String aText , int aLine , int aColumn ) <nl> + private void tagCommentLine ( String aText , int aLine ) <nl> { <nl> final Matcher matcher = mCommentRegexp . matcher ( aText ) ; <nl> if ( matcher . find ( ) ) {

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 2e8fff1 . . e6f2ec0 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1110 , 8 + 1110 , 7 @ @ 
 < ! - - generated classes , unfortunately use problematic api - - > 
 < exclude > * * / GeneratedJavaLexer . class < / exclude > 
 < exclude > * * / JavadocParser . class < / exclude > 
 - < ! - - excluded till https : / / github . com / policeman - tools / forbidden - apis / issues / 108 - - > 
 - < exclude > * * / checks / annotation / annotationlocation / InputAnnotationLocationDeprecatedAndCustom * < / exclude > 
 + < exclude > * * / Input * < / exclude > 
 < / excludes > 
 < / configuration > 
 < executions >

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 index 7417fd1 . . e655a0e 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 @ @ - 284 , 7 + 284 , 7 @ @ public class CheckStyleTask extends Task 
 log ( " compiled on " + compileTimestamp , Project . MSG _ VERBOSE ) ; 
 
 / / Check for no arguments 
 - if ( ( mFileName = = null ) & & ( mFileSets . size ( ) = = 0 ) ) { 
 + if ( ( mFileName = = null ) & & mFileSets . isEmpty ( ) ) { 
 throw new BuildException ( 
 " Must specify at least one of ' file ' or nested ' fileset ' . " , 
 getLocation ( ) ) ; 
 @ @ - 449 , 7 + 449 , 7 @ @ public class CheckStyleTask extends Task 
 final AuditListener [ ] listeners = new AuditListener [ formatterCount ] ; 
 
 / / formatters 
 - if ( mFormatters . size ( ) = = 0 ) { 
 + if ( mFormatters . isEmpty ( ) ) { 
 final OutputStream debug = new LogOutputStream ( this , 
 Project . MSG _ DEBUG ) ; 
 final OutputStream err = new LogOutputStream ( this , Project . MSG _ ERR ) ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 index 74eae23 . . f8d96af 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; 
 import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; 
 import com . puppycrawl . tools . checkstyle . api . SeverityLevelCounter ; 
 import com . puppycrawl . tools . checkstyle . api . Utils ; 
 + 
 import java . io . File ; 
 import java . io . FileNotFoundException ; 
 import java . io . IOException ; 
 @ @ - 44 , 8 + 45 , 8 @ @ import java . nio . charset . Charset ; 
 import java . util . List ; 
 import java . util . Locale ; 
 import java . util . Set ; 
 + import java . util . SortedSet ; 
 import java . util . StringTokenizer ; 
 - import java . util . TreeSet ; 
 
 / * * 
 * This class provides the functionality to check a set of files . 
 @ @ - 254 , 7 + 255 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher 
 for ( final File f : aFiles ) { 
 final String fileName = f . getAbsolutePath ( ) ; 
 fireFileStarted ( fileName ) ; 
 - final TreeSet < LocalizedMessage > fileMessages = Sets . newTreeSet ( ) ; 
 + final SortedSet < LocalizedMessage > fileMessages = Sets . newTreeSet ( ) ; 
 try { 
 final FileText theText = new FileText ( f . getAbsoluteFile ( ) , 
 mCharset ) ; 
 @ @ - 501 , 7 + 502 , 8 @ @ public class Checker extends AutomaticBean implements MessageDispatcher 
 * @ param aFileName the audited file 
 * @ param aErrors the audit errors from the file 
 * / 
 - public void fireErrors ( String aFileName , TreeSet < LocalizedMessage > aErrors ) 
 + public void fireErrors ( String aFileName , 
 + SortedSet < LocalizedMessage > aErrors ) 
 { 
 final String stripped = getStrippedFileName ( aFileName ) ; 
 for ( final LocalizedMessage element : aErrors ) { 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / MessageDispatcher . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / MessageDispatcher . java 
 index a4d50c1 . . 59927ba 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / MessageDispatcher . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / MessageDispatcher . java 
 @ @ - 18 , 7 + 18 , 7 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . api ; 
 
 - import java . util . TreeSet ; 
 + import java . util . SortedSet ; 
 
 / * * 
 * Used by FileSetChecks to distribute AuditEvents to AuditListeners . 
 @ @ - 43 , 5 + 43 , 5 @ @ public interface MessageDispatcher 
 * @ param aFileName the audited file 
 * @ param aErrors the audit errors from the file 
 * / 
 - void fireErrors ( String aFileName , TreeSet < LocalizedMessage > aErrors ) ; 
 + void fireErrors ( String aFileName , SortedSet < LocalizedMessage > aErrors ) ; 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 index 4363879 . . c420d38 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 @ @ - 101 , 13 + 101 , 13 @ @ public class EmptyBlockCheck 
 aAST . getText ( ) ) ; 
 } 
 } 
 - else if ( getAbstractOption ( ) = = BlockOption . TEXT ) { 
 - if ( ! hasText ( slistAST ) ) { 
 - log ( slistAST . getLineNo ( ) , 
 - slistAST . getColumnNo ( ) , 
 - " block . empty " , 
 - aAST . getText ( ) ) ; 
 - } 
 + else if ( getAbstractOption ( ) = = BlockOption . TEXT 
 + & & ! hasText ( slistAST ) ) 
 + { 
 + log ( slistAST . getLineNo ( ) , 
 + slistAST . getColumnNo ( ) , 
 + " block . empty " , 
 + aAST . getText ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java 
 index a44729f . . ca1e871 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java 
 @ @ - 69 , 14 + 69 , 14 @ @ public class CovariantEqualsCheck extends Check 
 if ( objBlock ! = null ) { 
 DetailAST child = objBlock . getFirstChild ( ) ; 
 while ( child ! = null ) { 
 - if ( child . getType ( ) = = TokenTypes . METHOD _ DEF ) { 
 - if ( CheckUtils . isEqualsMethod ( child ) ) { 
 - if ( hasObjectParameter ( child ) ) { 
 - hasEqualsObject = true ; 
 - } 
 - else { 
 - mEqualsMethods . add ( child ) ; 
 - } 
 + if ( child . getType ( ) = = TokenTypes . METHOD _ DEF 
 + & & CheckUtils . isEqualsMethod ( child ) ) 
 + { 
 + if ( hasObjectParameter ( child ) ) { 
 + hasEqualsObject = true ; 
 + } 
 + else { 
 + mEqualsMethods . add ( child ) ; 
 } 
 } 
 child = child . getNextSibling ( ) ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 index b53552d . . e670bd3 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 @ @ - 123 , 15 + 123 , 18 @ @ public class EqualsAvoidNullCheck extends Check 
 final DetailAST expr = dot . getNextSibling ( ) . getFirstChild ( ) ; 
 
 if ( " equals " . equals ( method . getText ( ) ) 
 - | | ( ! mIgnoreEqualsIgnoreCase & & " equalsIgnoreCase " 
 - . equals ( method . getText ( ) ) ) ) 
 + & & containsOneArg ( expr ) & & containsAllSafeTokens ( expr ) ) 
 { 
 - if ( containsOneArg ( expr ) & & containsAllSafeTokens ( expr ) ) { 
 - log ( aMethodCall . getLineNo ( ) , aMethodCall . getColumnNo ( ) , 
 - " equals " . equals ( method . getText ( ) ) 
 - ? " equals . avoid . null " 
 - : " equalsIgnoreCase . avoid . null " ) ; 
 - } 
 + log ( aMethodCall . getLineNo ( ) , aMethodCall . getColumnNo ( ) , 
 + " equals . avoid . null " ) ; 
 + } 
 + 
 + if ( ! mIgnoreEqualsIgnoreCase 
 + & & " equalsIgnoreCase " . equals ( method . getText ( ) ) 
 + & & containsOneArg ( expr ) & & containsAllSafeTokens ( expr ) ) 
 + { 
 + log ( aMethodCall . getLineNo ( ) , aMethodCall . getColumnNo ( ) , 
 + " equalsIgnoreCase . avoid . null " ) ; 
 } 
 } 
 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 index 75e4755 . . a85075f 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 @ @ - 133 , 14 + 133 , 14 @ @ public class FallThroughCheck extends Check 
 
 final DetailAST slist = aAST . findFirstToken ( TokenTypes . SLIST ) ; 
 
 - if ( ! isTerminated ( slist , true , true ) ) { 
 - if ( ! hasFallTruComment ( aAST , nextGroup ) ) { 
 - if ( ! isLastGroup ) { 
 - log ( nextGroup , " fall . through " ) ; 
 - } 
 - else { 
 - log ( aAST , " fall . through . last " ) ; 
 - } 
 + if ( ! isTerminated ( slist , true , true ) 
 + & & ! hasFallTruComment ( aAST , nextGroup ) ) 
 + { 
 + if ( ! isLastGroup ) { 
 + log ( nextGroup , " fall . through " ) ; 
 + } 
 + else { 
 + log ( aAST , " fall . through . last " ) ; 
 } 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java 
 index 79e8917 . . 1e81e79 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java 
 @ @ - 99 , 10 + 99 , 11 @ @ public final class OneStatementPerLineCheck extends Check 
 private void visitExpr ( DetailAST aAst ) 
 { 
 mExprDepth + + ; 
 - if ( mExprDepth = = 1 ) { 
 - if ( ! mInForHeader & & ( mLastStatementEnd = = aAst . getLineNo ( ) ) ) { 
 - log ( aAst , " multiple . statements . line " ) ; 
 - } 
 + if ( mExprDepth = = 1 
 + & & ! mInForHeader 
 + & & ( mLastStatementEnd = = aAst . getLineNo ( ) ) ) 
 + { 
 + log ( aAst , " multiple . statements . line " ) ; 
 } 
 } 
 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 index 431c53b . . f96eb99 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 @ @ - 134 , 11 + 134 , 9 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck 
 final ClassInfo newClassInfo = 
 createClassInfo ( new Token ( aExc ) , getCurrentClassName ( ) ) ; 
 
 - if ( ! mAllowUnchecked ) { 
 - if ( isUnchecked ( newClassInfo . getClazz ( ) ) ) { 
 - log ( aExc . getLineNo ( ) , aExc . getColumnNo ( ) , 
 - " redundant . throws . unchecked " , aExc . getText ( ) ) ; 
 - } 
 + if ( ! mAllowUnchecked & & isUnchecked ( newClassInfo . getClazz ( ) ) ) { 
 + log ( aExc . getLineNo ( ) , aExc . getColumnNo ( ) , 
 + " redundant . throws . unchecked " , aExc . getText ( ) ) ; 
 } 
 
 boolean shouldAdd = true ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java 
 index 19e61a0 . . 72e6c61 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / duplicates / StrictDuplicateCodeCheck . java 
 @ @ - 430 , 11 + 430 , 8 @ @ public final class StrictDuplicateCodeCheck extends AbstractFileSetCheck 
 } 
 
 final Collection < Integer > ignoreEntries = aIgnore . get ( aILine ) ; 
 - / / avoid Integer constructor whenever we can 
 - if ( ignoreEntries ! = null ) { 
 - if ( ignoreEntries . contains ( jLine ) ) { 
 - continue ; 
 - } 
 + if ( ignoreEntries ! = null & & ignoreEntries . contains ( jLine ) ) { 
 + continue ; 
 } 
 
 final int duplicateLines = 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java 
 index c5d6f48 . . d053178 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java 
 @ @ - 89 , 12 + 89 , 12 @ @ final class ImportControlLoader extends AbstractLoader 
 mStack . push ( new PkgControl ( pkg ) ) ; 
 } 
 else if ( " subpackage " . equals ( aQName ) ) { 
 - assert mStack . size ( ) > 0 ; 
 + assert ! mStack . isEmpty ( ) ; 
 final String name = safeGet ( aAtts , " name " ) ; 
 mStack . push ( new PkgControl ( mStack . peek ( ) , name ) ) ; 
 } 
 else if ( " allow " . equals ( aQName ) | | " disallow " . equals ( aQName ) ) { 
 - assert mStack . size ( ) > 0 ; 
 + assert ! mStack . isEmpty ( ) ; 
 / / Need to handle either " pkg " or " class " attribute . 
 / / May have " exact - match " for " pkg " 
 / / May have " local - only " 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index 86eb0a6 . . 2c36a78 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 294 , 8 + 294 , 7 @ @ public class ImportOrderCheck 
 } 
 } 
 else if ( groupIdx = = mLastGroup ) { 
 - doVisitTokenInSameGroup ( aIdent , aIsStatic , aPrevious , name , 
 - line ) ; 
 + doVisitTokenInSameGroup ( aIsStatic , aPrevious , name , line ) ; 
 } 
 else { 
 log ( line , " import . ordering " , name ) ; 
 @ @ - 309 , 14 + 308 , 13 @ @ public class ImportOrderCheck 
 / * * 
 * Shares processing . . . 
 * 
 - * @ param aIdent the import to process . 
 * @ param aIsStatic whether the token is static or not . 
 * @ param aPrevious previous non - static but current is static ( above ) , or 
 * previous static but current is non - static ( under ) . 
 * @ param aName the name of the current import . 
 * @ param aLine the line of the current import . 
 * / 
 - private void doVisitTokenInSameGroup ( FullIdent aIdent , boolean aIsStatic , 
 + private void doVisitTokenInSameGroup ( boolean aIsStatic , 
 boolean aPrevious , String aName , int aLine ) 
 { 
 if ( ! mOrdered ) { 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index d23a239 . . d90cbb8 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 260 , 7 + 260 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 } 
 } 
 else { 
 - checkComment ( aAST , cmt , theScope ) ; 
 + checkComment ( aAST , cmt ) ; 
 } 
 } 
 } 
 @ @ - 313 , 13 + 313 , 12 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 * 
 * @ param aAST the token for the method 
 * @ param aComment the Javadoc comment 
 - * @ param aScope the scope of the method . 
 * / 
 - private void checkComment ( DetailAST aAST , TextBlock aComment , Scope aScope ) 
 + private void checkComment ( DetailAST aAST , TextBlock aComment ) 
 { 
 final List < JavadocTag > tags = getMethodTags ( aComment ) ; 
 
 - if ( hasShortCircuitTag ( aAST , tags , aScope ) ) { 
 + if ( hasShortCircuitTag ( aAST , tags ) ) { 
 return ; 
 } 
 
 @ @ - 354 , 11 + 353 , 10 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 * 
 * @ param aAST the construct being checked 
 * @ param aTags the list of Javadoc tags associated with the construct 
 - * @ param aScope the scope of the construct 
 * @ return true if the construct has a short circuit tag . 
 * / 
 private boolean hasShortCircuitTag ( final DetailAST aAST , 
 - final List < JavadocTag > aTags , final Scope aScope ) 
 + final List < JavadocTag > aTags ) 
 { 
 / / Check if it contains { @ inheritDoc } tag 
 if ( ( aTags . size ( ) ! = 1 ) 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java 
 index acca921 . . 7f42a1f 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java 
 @ @ - 74 , 7 + 74 , 7 @ @ class TagParser 
 * / 
 public boolean hasNextTag ( ) 
 { 
 - return ( mTags . size ( ) > 0 ) ; 
 + return ! mTags . isEmpty ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java 
 index 15e0a58 . . 44b372c 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheck . java 
 @ @ - 91 , 14 + 91 , 13 @ @ public class ParenPadCheck extends AbstractParenPadCheck 
 processLeft ( theAst ) ; 
 } 
 } 
 - else if ( ( theAst . getParent ( ) = = null ) 
 + else if ( ( ( theAst . getParent ( ) = = null ) 
 | | ( theAst . getParent ( ) . getType ( ) ! = TokenTypes . TYPECAST ) 
 | | ( theAst . getParent ( ) . findFirstToken ( TokenTypes . RPAREN ) 
 ! = theAst ) ) 
 + & & ! isFollowsEmptyForIterator ( theAst ) ) 
 { 
 - if ( ! isFollowsEmptyForIterator ( theAst ) ) { 
 - processRight ( theAst ) ; 
 - } 
 + processRight ( theAst ) ; 
 } 
 } 
 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java 
 index 82d2342 . . ecd3135 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java 
 @ @ - 154 , 18 + 154 , 12 @ @ public class SuppressElement 
 return false ; 
 } 
 
 - / / reject if line matches a line CSV value . 
 - if ( mLineFilter ! = null ) { 
 - if ( mLineFilter . accept ( aEvent . getLine ( ) ) ) { 
 - return false ; 
 - } 
 + if ( mLineFilter ! = null & & mLineFilter . accept ( aEvent . getLine ( ) ) ) { 
 + return false ; 
 } 
 
 - / / reject if column matches a column CSV value . 
 - if ( mColumnFilter ! = null ) { 
 - if ( mColumnFilter . accept ( aEvent . getColumn ( ) ) ) { 
 - return false ; 
 - } 
 + if ( mColumnFilter ! = null & & mColumnFilter . accept ( aEvent . getColumn ( ) ) ) { 
 + return false ; 
 } 
 return true ; 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 index d615dcf . . adf31fc 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 @ @ - 484 , 9 + 484 , 9 @ @ public class SuppressWithNearbyCommentFilter 
 for ( final TextBlock comment : aComments ) { 
 final int startLineNo = comment . getStartLineNo ( ) ; 
 final String [ ] text = comment . getText ( ) ; 
 - tagCommentLine ( text [ 0 ] , startLineNo , comment . getStartColNo ( ) ) ; 
 + tagCommentLine ( text [ 0 ] , startLineNo ) ; 
 for ( int i = 1 ; i < text . length ; i + + ) { 
 - tagCommentLine ( text [ i ] , startLineNo + i , 0 ) ; 
 + tagCommentLine ( text [ i ] , startLineNo + i ) ; 
 } 
 } 
 } 
 @ @ - 496 , 9 + 496 , 8 @ @ public class SuppressWithNearbyCommentFilter 
 * checkstyle reporting on or the format for turning reporting off . 
 * @ param aText the string to tag . 
 * @ param aLine the line number of aText . 
 - * @ param aColumn the column number of aText . 
 * / 
 - private void tagCommentLine ( String aText , int aLine , int aColumn ) 
 + private void tagCommentLine ( String aText , int aLine ) 
 { 
 final Matcher matcher = mCommentRegexp . matcher ( aText ) ; 
 if ( matcher . find ( ) ) {
