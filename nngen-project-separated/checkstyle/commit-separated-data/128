BLEU SCORE: 0.06837203339116285

TEST MSG: Issue # 6289 : added new tests to kill CONSTRUCTOR _ CALLS mutations
GENERATED MSG: Issue # 2080 : Fix typos in code

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index 72d58a6 . . acc032c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 727 , 7 + 727 , 7 @ @ public class ImportOrderCheck <nl> } <nl> else if ( CommonUtil . startsWithChar ( pkg , ' / ' ) ) { <nl> if ( ! CommonUtil . endsWithChar ( pkg , ' / ' ) ) { <nl> - throw new IllegalArgumentException ( " Invalid group " ) ; <nl> + throw new IllegalArgumentException ( " Invalid group : " + pkg ) ; <nl> } <nl> pkg = pkg . substring ( 1 , pkg . length ( ) - 1 ) ; <nl> grp = Pattern . compile ( pkg ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 6c75632 . . 93c34b8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 151 , 18 + 151 , 22 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> / / Let ' s try fire some events <nl> getFireAuditStartedMethod ( ) . invoke ( checker ) ; <nl> assertTrue ( " Checker . fireAuditStarted ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; <nl> + assertTrue ( " Checker . fireAuditStarted ( ) doesn ' t pass event " , auditAdapter . wasEventPassed ( ) ) ; <nl> <nl> auditAdapter . resetListener ( ) ; <nl> getFireAuditFinished ( ) . invoke ( checker ) ; <nl> assertTrue ( " Checker . fireAuditFinished ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; <nl> + assertTrue ( " Checker . fireAuditFinished ( ) doesn ' t pass event " , auditAdapter . wasEventPassed ( ) ) ; <nl> <nl> auditAdapter . resetListener ( ) ; <nl> checker . fireFileStarted ( " Some File Name " ) ; <nl> assertTrue ( " Checker . fireFileStarted ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; <nl> + assertTrue ( " Checker . fireFileStarted ( ) doesn ' t pass event " , auditAdapter . wasEventPassed ( ) ) ; <nl> <nl> auditAdapter . resetListener ( ) ; <nl> checker . fireFileFinished ( " Some File Name " ) ; <nl> assertTrue ( " Checker . fireFileFinished ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; <nl> + assertTrue ( " Checker . fireFileFinished ( ) doesn ' t pass event " , auditAdapter . wasEventPassed ( ) ) ; <nl> <nl> auditAdapter . resetListener ( ) ; <nl> final SortedSet < LocalizedMessage > messages = new TreeSet < > ( ) ; <nl> @ @ - 170 , 6 + 174 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> new Object [ ] { " arg " } , null , getClass ( ) , null ) ) ; <nl> checker . fireErrors ( " Some File Name " , messages ) ; <nl> assertTrue ( " Checker . fireErrors ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; <nl> + assertTrue ( " Checker . fireErrors ( ) doesn ' t pass event " , auditAdapter . wasEventPassed ( ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java <nl> index 4d1c284 . . 639f271 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java <nl> @ @ - 41 , 6 + 41 , 14 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> <nl> public class DefaultLoggerTest { <nl> <nl> + private final LocalizedMessage auditStartMessage = new LocalizedMessage ( 1 , <nl> + Definitions . CHECKSTYLE _ BUNDLE , " DefaultLogger . auditStarted " , null , null , <nl> + getClass ( ) , null ) ; <nl> + <nl> + private final LocalizedMessage auditFinishMessage = new LocalizedMessage ( 1 , <nl> + Definitions . CHECKSTYLE _ BUNDLE , " DefaultLogger . auditFinished " , null , null , <nl> + getClass ( ) , null ) ; <nl> + <nl> @ Test <nl> public void testCtor ( ) throws UnsupportedEncodingException { <nl> final OutputStream infoStream = new ByteArrayOutputStream ( ) ; <nl> @ @ - 148 , 6 + 156 , 40 @ @ public class DefaultLoggerTest { <nl> } <nl> <nl> @ Test <nl> + public void testAddError ( ) { <nl> + final OutputStream infoStream = new ByteArrayOutputStream ( ) ; <nl> + final OutputStream errorStream = new ByteArrayOutputStream ( ) ; <nl> + final DefaultLogger dl = new DefaultLogger ( infoStream , <nl> + AutomaticBean . OutputStreamOptions . CLOSE , errorStream , <nl> + AutomaticBean . OutputStreamOptions . CLOSE ) ; <nl> + dl . finishLocalSetup ( ) ; <nl> + dl . auditStarted ( null ) ; <nl> + dl . addError ( new AuditEvent ( this , " fileName " , new LocalizedMessage ( 1 , 2 , " bundle " , " key " , <nl> + null , null , getClass ( ) , " customMessage " ) ) ) ; <nl> + dl . auditFinished ( null ) ; <nl> + assertEquals ( " expected output " , auditStartMessage . getMessage ( ) + System . lineSeparator ( ) <nl> + + auditFinishMessage . getMessage ( ) + System . lineSeparator ( ) , infoStream . toString ( ) ) ; <nl> + assertEquals ( " expected output " , " [ ERROR ] fileName : 1 : 2 : customMessage [ DefaultLoggerTest ] " <nl> + + System . lineSeparator ( ) , errorStream . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAddErrorModuleId ( ) { <nl> + final OutputStream infoStream = new ByteArrayOutputStream ( ) ; <nl> + final OutputStream errorStream = new ByteArrayOutputStream ( ) ; <nl> + final DefaultLogger dl = new DefaultLogger ( infoStream , true , errorStream , true ) ; <nl> + dl . finishLocalSetup ( ) ; <nl> + dl . auditStarted ( null ) ; <nl> + dl . addError ( new AuditEvent ( this , " fileName " , new LocalizedMessage ( 1 , 2 , " bundle " , " key " , <nl> + null , " moduleId " , getClass ( ) , " customMessage " ) ) ) ; <nl> + dl . auditFinished ( null ) ; <nl> + assertEquals ( " expected output " , auditStartMessage . getMessage ( ) + System . lineSeparator ( ) <nl> + + auditFinishMessage . getMessage ( ) + System . lineSeparator ( ) , infoStream . toString ( ) ) ; <nl> + assertEquals ( " expected output " , " [ ERROR ] fileName : 1 : 2 : customMessage [ moduleId ] " <nl> + + System . lineSeparator ( ) , errorStream . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testFinishLocalSetup ( ) { <nl> final OutputStream infoStream = new ByteArrayOutputStream ( ) ; <nl> final DefaultLogger dl = new DefaultLogger ( infoStream , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> index bc60b5a . . d6c9423 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; <nl> + import com . puppycrawl . tools . checkstyle . api . AutomaticBean . OutputStreamOptions ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; <nl> import com . puppycrawl . tools . checkstyle . internal . utils . CloseAndFlushTestByteArrayOutputStream ; <nl> @ @ - 246 , 7 + 247 , 7 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { <nl> @ Test <nl> public void testAddException ( ) <nl> throws Exception { <nl> - final XMLLogger logger = new XMLLogger ( outStream , true ) ; <nl> + final XMLLogger logger = new XMLLogger ( outStream , OutputStreamOptions . CLOSE ) ; <nl> logger . auditStarted ( null ) ; <nl> final LocalizedMessage message = <nl> new LocalizedMessage ( 1 , 1 , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java <nl> index cb3c914 . . fc36df0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java <nl> @ @ - 21 , 6 + 21 , 8 @ @ package com . puppycrawl . tools . checkstyle ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . internal . utils . TestUtil . isUtilsClassHasPrivateConstructor ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> import java . util . HashMap ; <nl> @ @ - 48 , 6 + 50 , 22 @ @ public class XmlLoaderTest { <nl> XmlLoader . FeaturesForVerySecureJavaInstallations . class , true ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testResolveEntityDefault ( ) throws Exception { <nl> + final Map < String , String > map = new HashMap < > ( ) ; <nl> + map . put ( " predefined " , " / google . xml " ) ; <nl> + final DummyLoader dummyLoader = new DummyLoader ( map ) ; <nl> + assertNull ( " Invalid entity " , dummyLoader . resolveEntity ( " notPredefined " , " BAD " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testResolveEntityMap ( ) throws Exception { <nl> + final Map < String , String > map = new HashMap < > ( ) ; <nl> + map . put ( " predefined " , " / google . xml " ) ; <nl> + final DummyLoader dummyLoader = new DummyLoader ( map ) ; <nl> + assertNotNull ( " Invalid entity " , dummyLoader . resolveEntity ( " predefined " , " BAD " ) ) ; <nl> + } <nl> + <nl> private static final class DummyLoader extends XmlLoader { <nl> <nl> DummyLoader ( Map < String , String > publicIdToResourceNameMap ) <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> index fcb9574 . . cbdd207 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> @ @ - 177 , 7 + 177 , 9 @ @ public class AutomaticBeanTest { <nl> @ Override <nl> public void register ( Converter converter , Class < ? > clazz ) { <nl> super . register ( converter , clazz ) ; <nl> - registerCount + + ; <nl> + if ( converter ! = null ) { <nl> + registerCount + + ; <nl> + } <nl> } <nl> <nl> public int getRegisterCount ( ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> index ea3864b . . a149846 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> @ @ - 37 , 6 + 37 , 13 @ @ import org . powermock . reflect . Whitebox ; <nl> public class FileContentsTest { <nl> <nl> @ Test <nl> + public void testTextFileName ( ) { <nl> + final FileContents fileContents = new FileContents ( " filename " , " 123 " , " 456 " ) ; <nl> + <nl> + assertEquals ( " Invalid file name " , " filename " , fileContents . getText ( ) . getFile ( ) . getName ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testDeprecatedAbbreviatedMethod ( ) { <nl> / / just to make UT coverage 100 % <nl> final FileContents fileContents = new FileContents ( " filename " , " 123 " , " 456 " ) ; <nl> @ @ - 128 , 6 + 135 , 29 @ @ public class FileContentsTest { <nl> } <nl> <nl> @ Test <nl> + public void testReportJavadocComment ( ) { <nl> + final FileContents fileContents = new FileContents ( <nl> + new FileText ( new File ( " filename " ) , Collections . singletonList ( " / * * * / " ) ) ) ; <nl> + fileContents . reportCComment ( 1 , 2 , 1 , 6 ) ; <nl> + final TextBlock comment = fileContents . getJavadocBefore ( 2 ) ; <nl> + <nl> + assertEquals ( " Invalid comment " , <nl> + new Comment ( new String [ ] { " / * * * " } , 2 , 1 , 6 ) . toString ( ) , <nl> + comment . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testReportJavadocComment2 ( ) { <nl> + final FileContents fileContents = new FileContents ( " filename " , " / * * * / " ) ; <nl> + fileContents . reportCComment ( 1 , 2 , 1 , 6 ) ; <nl> + final TextBlock comment = fileContents . getJavadocBefore ( 2 ) ; <nl> + <nl> + assertEquals ( " Invalid comment " , <nl> + new Comment ( new String [ ] { " / * * * " } , 2 , 1 , 6 ) . toString ( ) , <nl> + comment . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testInPackageInfo ( ) { <nl> final FileContents fileContents = new FileContents ( new FileText ( <nl> new File ( " filename . package - info . java " ) , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> index a53b2d5 . . e8ccd63 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> @ @ - 49 , 6 + 49 , 14 @ @ public class IllegalInstantiationCheckTest <nl> public void testDefault ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createModuleConfig ( IllegalInstantiationCheck . class ) ; <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputIllegalInstantiationSemantic . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testClasses ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( IllegalInstantiationCheck . class ) ; <nl> checkConfig . addAttribute ( <nl> " classes " , <nl> " java . lang . Boolean , " <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> index 6c6e994 . . cc88b40 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> @ @ - 123 , 6 + 123 , 8 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { <nl> + " - Cannot set property ' charset ' to ' XSO - 8859 - 1 ' in module " <nl> + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " , <nl> ex . getMessage ( ) ) ; <nl> + assertEquals ( " Invalid exception message " , " unsupported charset : ' XSO - 8859 - 1 ' " , <nl> + ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 140 , 6 + 142 , 10 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { <nl> + " - Cannot set property ' headerFile ' to ' ' in module " <nl> + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " , <nl> ex . getMessage ( ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " property ' headerFile ' is missing or invalid in module " <nl> + + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " , <nl> + ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> index 8da8597 . . 7691e43 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> @ @ - 532 , 6 + 532 , 9 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { <nl> + " ' SAME _ PACKAGE ( - 1 ) ' in module " ; <nl> assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " SAME _ PACKAGE rule parameter should be positive integer : SAME _ PACKAGE ( - 1 ) " , <nl> + ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 557 , 6 + 560 , 9 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { <nl> + " ' SAME _ PACKAGE ( 0 ) ' in module " ; <nl> assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " SAME _ PACKAGE rule parameter should be positive integer : SAME _ PACKAGE ( 0 ) " , <nl> + ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 581 , 6 + 587 , 8 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { <nl> + " ' SAME _ PACKAGE ( 3 ) # # # UNSUPPORTED _ RULE ' in module " ; <nl> assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , " Unexpected rule : UNSUPPORTED _ RULE " , ex <nl> + . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 604 , 6 + 612 , 9 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { <nl> + " ' SAME _ PACKAGE ( INT _ IS _ REQUIRED _ HERE ) ' in module " ; <nl> assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " For input string : \ " INT _ IS _ REQUIRED _ HERE \ " " , <nl> + ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> index 4c1123a . . 7ddce15 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> @ @ - 630 , 6 + 630 , 8 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> <nl> assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , " Invalid group : / ^ javax " , <nl> + ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index 773a038 . . 062e338 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 1599 , 6 + 1599 , 7 @ @ public class IndentationCheckTest extends AbstractModuleTestSupport { <nl> checkConfig . addAttribute ( " throwsIndent " , " 8 " ) ; <nl> final String [ ] expected = { <nl> " 27 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " synchronized " , 0 , 12 ) , <nl> + " 30 : " + getCheckMessage ( MSG _ ERROR , " synchronized lparen " , 12 , 8 ) , <nl> } ; <nl> verifyWarns ( checkConfig , getPath ( " InputIndentationSynchronizedStatement . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> index 37fa6ba . . 2f1a1c0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> @ @ - 133 , 6 + 133 , 10 @ @ public class ClassDataAbstractionCouplingCheckTest extends AbstractModuleTestSup <nl> <nl> assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message , " , <nl> + " the following values are not valid identifiers : [ " <nl> + + " com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ] " , ex <nl> + . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> index 8179b86 . . 9f764ce 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassFanOutComplexityCheck . MSG _ KEY ; <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ @ - 113 , 6 + 114 , 10 @ @ public class ClassFanOutComplexityCheckTest extends AbstractModuleTestSupport { <nl> <nl> assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message , " , <nl> + " the following values are not valid identifiers : [ " <nl> + + " com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ] " , ex <nl> + . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> index 739a896 . . 6fa6a5b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> @ @ - 35 , 6 + 35 , 26 @ @ public class AbbreviationAsWordInNameCheckTest extends AbstractModuleTestSupport <nl> } <nl> <nl> @ Test <nl> + public void testDefault ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> + final int expectedCapitalCount = 4 ; <nl> + <nl> + final String [ ] expected = { <nl> + " 9 : " + getWarningMessage ( " FactoryWithBADNAme " , expectedCapitalCount ) , <nl> + " 12 : " + getWarningMessage ( " AbstractCLASSName " , expectedCapitalCount ) , <nl> + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , <nl> + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , <nl> + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , <nl> + " 39 : " + getWarningMessage ( " marazmaticVARIABLEName " , expectedCapitalCount ) , <nl> + " 40 : " + getWarningMessage ( " MARAZMATICVariableName " , expectedCapitalCount ) , <nl> + " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testTypeNamesForThreePermittedCapitalLetters ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createModuleConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / DebugAuditAdapter . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / DebugAuditAdapter . java <nl> index 539013c . . d9d9558 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / DebugAuditAdapter . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / DebugAuditAdapter . java <nl> @ @ - 27 , 6 + 27 , 9 @ @ public final class DebugAuditAdapter implements AuditListener { <nl> / * * Keeps track whether this { @ code AuditListener } was called . * / <nl> private boolean called ; <nl> <nl> + / * * Keeps track whether this { @ code AuditListener } was given { @ code AuditEvent } . * / <nl> + private boolean passedEvent ; <nl> + <nl> / * * Keeps track of the number of files started . * / <nl> private int numFilesStarted ; <nl> <nl> @ @ - 45 , 40 + 48 , 63 @ @ public final class DebugAuditAdapter implements AuditListener { <nl> return called ; <nl> } <nl> <nl> + public boolean wasEventPassed ( ) { <nl> + return passedEvent ; <nl> + } <nl> + <nl> public void resetListener ( ) { <nl> called = false ; <nl> + passedEvent = false ; <nl> } <nl> <nl> @ Override <nl> public void addError ( AuditEvent event ) { <nl> called = true ; <nl> + if ( event ! = null ) { <nl> + passedEvent = true ; <nl> + } <nl> } <nl> <nl> @ Override <nl> public void addException ( AuditEvent event , Throwable throwable ) { <nl> called = true ; <nl> + if ( event ! = null ) { <nl> + passedEvent = true ; <nl> + } <nl> } <nl> <nl> @ Override <nl> public void auditStarted ( AuditEvent event ) { <nl> called = true ; <nl> + if ( event ! = null ) { <nl> + passedEvent = true ; <nl> + } <nl> } <nl> <nl> @ Override <nl> public void fileStarted ( AuditEvent event ) { <nl> called = true ; <nl> numFilesStarted + + ; <nl> + if ( event ! = null ) { <nl> + passedEvent = true ; <nl> + } <nl> } <nl> <nl> @ Override <nl> public void auditFinished ( AuditEvent event ) { <nl> called = true ; <nl> + if ( event ! = null ) { <nl> + passedEvent = true ; <nl> + } <nl> } <nl> <nl> @ Override <nl> public void fileFinished ( AuditEvent event ) { <nl> called = true ; <nl> numFilesFinished + + ; <nl> + if ( event ! = null ) { <nl> + passedEvent = true ; <nl> + } <nl> } <nl> <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilTest . java <nl> index b81ea12 . . e1c0af8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilTest . java <nl> @ @ - 34 , 6 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; <nl> import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; <nl> import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; <nl> import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagInfo ; <nl> @ @ - 153 , 7 + 154 , 13 @ @ public class JavadocUtilTest { <nl> final JavadocTags allTags = <nl> JavadocUtil . getJavadocTags ( comment , JavadocUtil . JavadocTagType . ALL ) ; <nl> assertEquals ( " Unexpected invalid tags size " , 2 , allTags . getInvalidTags ( ) . size ( ) ) ; <nl> + assertTag ( " Unexpected invalid tag " , new InvalidJavadocTag ( 1 , 4 , " fake " ) , <nl> + allTags . getInvalidTags ( ) . get ( 0 ) ) ; <nl> + assertTag ( " Unexpected invalid tag " , new InvalidJavadocTag ( 2 , 4 , " bogus " ) , <nl> + allTags . getInvalidTags ( ) . get ( 1 ) ) ; <nl> assertEquals ( " Unexpected valid tags size " , 1 , allTags . getValidTags ( ) . size ( ) ) ; <nl> + assertTag ( " Unexpected valid tag " , new JavadocTag ( 3 , 4 , " link " , " List valid " ) , <nl> + allTags . getValidTags ( ) . get ( 0 ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 369 , 4 + 376 , 19 @ @ public class JavadocUtilTest { <nl> JavadocUtil . escapeAllControlChars ( " 1 \ \ r2 \ \ n3 \ \ t " ) ) ; <nl> } <nl> <nl> + private static void assertTag ( String message , InvalidJavadocTag expected , <nl> + InvalidJavadocTag actual ) { <nl> + assertEquals ( message + " line " , expected . getLine ( ) , actual . getLine ( ) ) ; <nl> + assertEquals ( message + " column " , expected . getCol ( ) , actual . getCol ( ) ) ; <nl> + assertEquals ( message + " name " , expected . getName ( ) , actual . getName ( ) ) ; <nl> + } <nl> + <nl> + private static void assertTag ( String message , JavadocTag expected , <nl> + JavadocTag actual ) { <nl> + assertEquals ( message + " line " , expected . getLineNo ( ) , actual . getLineNo ( ) ) ; <nl> + assertEquals ( message + " column " , expected . getColumnNo ( ) , actual . getColumnNo ( ) ) ; <nl> + assertEquals ( message + " first arg " , expected . getFirstArg ( ) , actual . getFirstArg ( ) ) ; <nl> + assertEquals ( message + " tag name " , expected . getTagName ( ) , actual . getTagName ( ) ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java <nl> index 2695bfa . . 0f4d10a 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java <nl> @ @ - 26 , 6 + 26 , 8 @ @ public class InputIndentationSynchronizedStatement { / / indent : 0 exp : 0 <nl> synchronized ( new Object ( ) ) { / / indent : 8 exp : 8 <nl> instance = instance ; / / indent : 0 exp : 12 warn <nl> } / / indent : 8 exp : 8 <nl> + synchronized / / indent : 8 exp : 8 <nl> + ( new Object ( ) ) { } / / indent : 12 exp : 8 warn <nl> return instance ; / / indent : 8 exp : 8 <nl> } / / indent : 4 exp : 4 <nl> } / / indent : 0 exp : 0
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index ae4ec79 . . 089ed64 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 346 , 6 + 346 , 7 @ @ <nl> < module name = " SingleLineJavadoc " / > <nl> < module name = " JavadocTagContinuationIndentation " / > <nl> < module name = " JavadocParagraph " / > <nl> + < module name = " WriteTag " / > <nl> <nl> < ! - - <nl> All Checks bellow are our futute plan to enforce over our code . <nl> @ @ - 356 , 9 + 357 , 6 @ @ <nl> < module name = " SummaryJavadoc " > <nl> < property name = " severity " value = " ignore " / > <nl> < / module > <nl> - < module name = " WriteTag " > <nl> - < property name = " severity " value = " ignore " / > <nl> - < / module > <nl> <nl> < module name = " MissingCtor " > <nl> < ! - - <nl> diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 2c7cee0 . . cd8d97c 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 38 , 6 + 38 , 7 @ @ <nl> < suppress checks = " MethodCount " files = " [ \ \ / ] IndentationCheckTest . java $ " / > <nl> < suppress checks = " MethodCount " files = " [ \ \ / ] MainTest . java $ " / > <nl> < suppress checks = " EqualsAvoidNull " files = " [ \ \ / ] Int . * FilterTest . java $ " / > <nl> + < suppress checks = " WriteTag " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > <nl> <nl> < ! - - suppressions to remove over time - - > <nl> < suppress checks = " FinalLocalVariable " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java <nl> index b6055a3 . . df92965 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java <nl> @ @ - 248 , 6 + 248 , 9 @ @ class FileDrop { <nl> void filesDropped ( File . . . files ) ; <nl> } <nl> <nl> + / * * <nl> + * Listener and handler for file drop target events . <nl> + * / <nl> private class FileDropTargetListener extends DropTargetAdapter { <nl> / * * Target component to drop to . * / <nl> private final Component component ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java <nl> index 8e76bdb . . 224933c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java <nl> @ @ - 259 , 6 + 259 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Filter for Java files . <nl> + * / <nl> private static class JavaFileFilter extends FileFilter { <nl> @ Override <nl> public boolean accept ( File file ) { <nl> @ @ - 274 , 6 + 277 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Handler for file selection action events . <nl> + * / <nl> private class FileSelectionAction extends AbstractAction { <nl> / * * <nl> * Serial ID . <nl> @ @ - 300 , 6 + 306 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Handler for reload action events . <nl> + * / <nl> private class ReloadAction extends AbstractAction { <nl> / * * <nl> * Serial UID . <nl> @ @ - 320 , 6 + 329 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Listener and handler for file dropped events . <nl> + * / <nl> private class FileDropListener implements FileDrop . Listener { <nl> / * * Scroll pane . * / <nl> private final JScrollPane scrollPane ;

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index 72d58a6 . . acc032c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 727 , 7 + 727 , 7 @ @ public class ImportOrderCheck 
 } 
 else if ( CommonUtil . startsWithChar ( pkg , ' / ' ) ) { 
 if ( ! CommonUtil . endsWithChar ( pkg , ' / ' ) ) { 
 - throw new IllegalArgumentException ( " Invalid group " ) ; 
 + throw new IllegalArgumentException ( " Invalid group : " + pkg ) ; 
 } 
 pkg = pkg . substring ( 1 , pkg . length ( ) - 1 ) ; 
 grp = Pattern . compile ( pkg ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 6c75632 . . 93c34b8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 151 , 18 + 151 , 22 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 / / Let ' s try fire some events 
 getFireAuditStartedMethod ( ) . invoke ( checker ) ; 
 assertTrue ( " Checker . fireAuditStarted ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; 
 + assertTrue ( " Checker . fireAuditStarted ( ) doesn ' t pass event " , auditAdapter . wasEventPassed ( ) ) ; 
 
 auditAdapter . resetListener ( ) ; 
 getFireAuditFinished ( ) . invoke ( checker ) ; 
 assertTrue ( " Checker . fireAuditFinished ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; 
 + assertTrue ( " Checker . fireAuditFinished ( ) doesn ' t pass event " , auditAdapter . wasEventPassed ( ) ) ; 
 
 auditAdapter . resetListener ( ) ; 
 checker . fireFileStarted ( " Some File Name " ) ; 
 assertTrue ( " Checker . fireFileStarted ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; 
 + assertTrue ( " Checker . fireFileStarted ( ) doesn ' t pass event " , auditAdapter . wasEventPassed ( ) ) ; 
 
 auditAdapter . resetListener ( ) ; 
 checker . fireFileFinished ( " Some File Name " ) ; 
 assertTrue ( " Checker . fireFileFinished ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; 
 + assertTrue ( " Checker . fireFileFinished ( ) doesn ' t pass event " , auditAdapter . wasEventPassed ( ) ) ; 
 
 auditAdapter . resetListener ( ) ; 
 final SortedSet < LocalizedMessage > messages = new TreeSet < > ( ) ; 
 @ @ - 170 , 6 + 174 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 new Object [ ] { " arg " } , null , getClass ( ) , null ) ) ; 
 checker . fireErrors ( " Some File Name " , messages ) ; 
 assertTrue ( " Checker . fireErrors ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; 
 + assertTrue ( " Checker . fireErrors ( ) doesn ' t pass event " , auditAdapter . wasEventPassed ( ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java 
 index 4d1c284 . . 639f271 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java 
 @ @ - 41 , 6 + 41 , 14 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 
 public class DefaultLoggerTest { 
 
 + private final LocalizedMessage auditStartMessage = new LocalizedMessage ( 1 , 
 + Definitions . CHECKSTYLE _ BUNDLE , " DefaultLogger . auditStarted " , null , null , 
 + getClass ( ) , null ) ; 
 + 
 + private final LocalizedMessage auditFinishMessage = new LocalizedMessage ( 1 , 
 + Definitions . CHECKSTYLE _ BUNDLE , " DefaultLogger . auditFinished " , null , null , 
 + getClass ( ) , null ) ; 
 + 
 @ Test 
 public void testCtor ( ) throws UnsupportedEncodingException { 
 final OutputStream infoStream = new ByteArrayOutputStream ( ) ; 
 @ @ - 148 , 6 + 156 , 40 @ @ public class DefaultLoggerTest { 
 } 
 
 @ Test 
 + public void testAddError ( ) { 
 + final OutputStream infoStream = new ByteArrayOutputStream ( ) ; 
 + final OutputStream errorStream = new ByteArrayOutputStream ( ) ; 
 + final DefaultLogger dl = new DefaultLogger ( infoStream , 
 + AutomaticBean . OutputStreamOptions . CLOSE , errorStream , 
 + AutomaticBean . OutputStreamOptions . CLOSE ) ; 
 + dl . finishLocalSetup ( ) ; 
 + dl . auditStarted ( null ) ; 
 + dl . addError ( new AuditEvent ( this , " fileName " , new LocalizedMessage ( 1 , 2 , " bundle " , " key " , 
 + null , null , getClass ( ) , " customMessage " ) ) ) ; 
 + dl . auditFinished ( null ) ; 
 + assertEquals ( " expected output " , auditStartMessage . getMessage ( ) + System . lineSeparator ( ) 
 + + auditFinishMessage . getMessage ( ) + System . lineSeparator ( ) , infoStream . toString ( ) ) ; 
 + assertEquals ( " expected output " , " [ ERROR ] fileName : 1 : 2 : customMessage [ DefaultLoggerTest ] " 
 + + System . lineSeparator ( ) , errorStream . toString ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAddErrorModuleId ( ) { 
 + final OutputStream infoStream = new ByteArrayOutputStream ( ) ; 
 + final OutputStream errorStream = new ByteArrayOutputStream ( ) ; 
 + final DefaultLogger dl = new DefaultLogger ( infoStream , true , errorStream , true ) ; 
 + dl . finishLocalSetup ( ) ; 
 + dl . auditStarted ( null ) ; 
 + dl . addError ( new AuditEvent ( this , " fileName " , new LocalizedMessage ( 1 , 2 , " bundle " , " key " , 
 + null , " moduleId " , getClass ( ) , " customMessage " ) ) ) ; 
 + dl . auditFinished ( null ) ; 
 + assertEquals ( " expected output " , auditStartMessage . getMessage ( ) + System . lineSeparator ( ) 
 + + auditFinishMessage . getMessage ( ) + System . lineSeparator ( ) , infoStream . toString ( ) ) ; 
 + assertEquals ( " expected output " , " [ ERROR ] fileName : 1 : 2 : customMessage [ moduleId ] " 
 + + System . lineSeparator ( ) , errorStream . toString ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testFinishLocalSetup ( ) { 
 final OutputStream infoStream = new ByteArrayOutputStream ( ) ; 
 final DefaultLogger dl = new DefaultLogger ( infoStream , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 index bc60b5a . . d6c9423 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; 
 + import com . puppycrawl . tools . checkstyle . api . AutomaticBean . OutputStreamOptions ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; 
 import com . puppycrawl . tools . checkstyle . internal . utils . CloseAndFlushTestByteArrayOutputStream ; 
 @ @ - 246 , 7 + 247 , 7 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { 
 @ Test 
 public void testAddException ( ) 
 throws Exception { 
 - final XMLLogger logger = new XMLLogger ( outStream , true ) ; 
 + final XMLLogger logger = new XMLLogger ( outStream , OutputStreamOptions . CLOSE ) ; 
 logger . auditStarted ( null ) ; 
 final LocalizedMessage message = 
 new LocalizedMessage ( 1 , 1 , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java 
 index cb3c914 . . fc36df0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java 
 @ @ - 21 , 6 + 21 , 8 @ @ package com . puppycrawl . tools . checkstyle ; 
 
 import static com . puppycrawl . tools . checkstyle . internal . utils . TestUtil . isUtilsClassHasPrivateConstructor ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 
 import java . util . HashMap ; 
 @ @ - 48 , 6 + 50 , 22 @ @ public class XmlLoaderTest { 
 XmlLoader . FeaturesForVerySecureJavaInstallations . class , true ) ) ; 
 } 
 
 + @ Test 
 + public void testResolveEntityDefault ( ) throws Exception { 
 + final Map < String , String > map = new HashMap < > ( ) ; 
 + map . put ( " predefined " , " / google . xml " ) ; 
 + final DummyLoader dummyLoader = new DummyLoader ( map ) ; 
 + assertNull ( " Invalid entity " , dummyLoader . resolveEntity ( " notPredefined " , " BAD " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testResolveEntityMap ( ) throws Exception { 
 + final Map < String , String > map = new HashMap < > ( ) ; 
 + map . put ( " predefined " , " / google . xml " ) ; 
 + final DummyLoader dummyLoader = new DummyLoader ( map ) ; 
 + assertNotNull ( " Invalid entity " , dummyLoader . resolveEntity ( " predefined " , " BAD " ) ) ; 
 + } 
 + 
 private static final class DummyLoader extends XmlLoader { 
 
 DummyLoader ( Map < String , String > publicIdToResourceNameMap ) 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 index fcb9574 . . cbdd207 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 @ @ - 177 , 7 + 177 , 9 @ @ public class AutomaticBeanTest { 
 @ Override 
 public void register ( Converter converter , Class < ? > clazz ) { 
 super . register ( converter , clazz ) ; 
 - registerCount + + ; 
 + if ( converter ! = null ) { 
 + registerCount + + ; 
 + } 
 } 
 
 public int getRegisterCount ( ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 index ea3864b . . a149846 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 @ @ - 37 , 6 + 37 , 13 @ @ import org . powermock . reflect . Whitebox ; 
 public class FileContentsTest { 
 
 @ Test 
 + public void testTextFileName ( ) { 
 + final FileContents fileContents = new FileContents ( " filename " , " 123 " , " 456 " ) ; 
 + 
 + assertEquals ( " Invalid file name " , " filename " , fileContents . getText ( ) . getFile ( ) . getName ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testDeprecatedAbbreviatedMethod ( ) { 
 / / just to make UT coverage 100 % 
 final FileContents fileContents = new FileContents ( " filename " , " 123 " , " 456 " ) ; 
 @ @ - 128 , 6 + 135 , 29 @ @ public class FileContentsTest { 
 } 
 
 @ Test 
 + public void testReportJavadocComment ( ) { 
 + final FileContents fileContents = new FileContents ( 
 + new FileText ( new File ( " filename " ) , Collections . singletonList ( " / * * * / " ) ) ) ; 
 + fileContents . reportCComment ( 1 , 2 , 1 , 6 ) ; 
 + final TextBlock comment = fileContents . getJavadocBefore ( 2 ) ; 
 + 
 + assertEquals ( " Invalid comment " , 
 + new Comment ( new String [ ] { " / * * * " } , 2 , 1 , 6 ) . toString ( ) , 
 + comment . toString ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testReportJavadocComment2 ( ) { 
 + final FileContents fileContents = new FileContents ( " filename " , " / * * * / " ) ; 
 + fileContents . reportCComment ( 1 , 2 , 1 , 6 ) ; 
 + final TextBlock comment = fileContents . getJavadocBefore ( 2 ) ; 
 + 
 + assertEquals ( " Invalid comment " , 
 + new Comment ( new String [ ] { " / * * * " } , 2 , 1 , 6 ) . toString ( ) , 
 + comment . toString ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testInPackageInfo ( ) { 
 final FileContents fileContents = new FileContents ( new FileText ( 
 new File ( " filename . package - info . java " ) , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 index a53b2d5 . . e8ccd63 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 @ @ - 49 , 6 + 49 , 14 @ @ public class IllegalInstantiationCheckTest 
 public void testDefault ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createModuleConfig ( IllegalInstantiationCheck . class ) ; 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputIllegalInstantiationSemantic . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testClasses ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( IllegalInstantiationCheck . class ) ; 
 checkConfig . addAttribute ( 
 " classes " , 
 " java . lang . Boolean , " 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 index 6c6e994 . . cc88b40 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 @ @ - 123 , 6 + 123 , 8 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { 
 + " - Cannot set property ' charset ' to ' XSO - 8859 - 1 ' in module " 
 + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " , 
 ex . getMessage ( ) ) ; 
 + assertEquals ( " Invalid exception message " , " unsupported charset : ' XSO - 8859 - 1 ' " , 
 + ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 140 , 6 + 142 , 10 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { 
 + " - Cannot set property ' headerFile ' to ' ' in module " 
 + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " , 
 ex . getMessage ( ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " property ' headerFile ' is missing or invalid in module " 
 + + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " , 
 + ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 index 8da8597 . . 7691e43 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 @ @ - 532 , 6 + 532 , 9 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { 
 + " ' SAME _ PACKAGE ( - 1 ) ' in module " ; 
 assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " SAME _ PACKAGE rule parameter should be positive integer : SAME _ PACKAGE ( - 1 ) " , 
 + ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 557 , 6 + 560 , 9 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { 
 + " ' SAME _ PACKAGE ( 0 ) ' in module " ; 
 assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " SAME _ PACKAGE rule parameter should be positive integer : SAME _ PACKAGE ( 0 ) " , 
 + ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 581 , 6 + 587 , 8 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { 
 + " ' SAME _ PACKAGE ( 3 ) # # # UNSUPPORTED _ RULE ' in module " ; 
 assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , " Unexpected rule : UNSUPPORTED _ RULE " , ex 
 + . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 604 , 6 + 612 , 9 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { 
 + " ' SAME _ PACKAGE ( INT _ IS _ REQUIRED _ HERE ) ' in module " ; 
 assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " For input string : \ " INT _ IS _ REQUIRED _ HERE \ " " , 
 + ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 index 4c1123a . . 7ddce15 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 @ @ - 630 , 6 + 630 , 8 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 
 assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , " Invalid group : / ^ javax " , 
 + ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index 773a038 . . 062e338 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 1599 , 6 + 1599 , 7 @ @ public class IndentationCheckTest extends AbstractModuleTestSupport { 
 checkConfig . addAttribute ( " throwsIndent " , " 8 " ) ; 
 final String [ ] expected = { 
 " 27 : " + getCheckMessage ( MSG _ CHILD _ ERROR , " synchronized " , 0 , 12 ) , 
 + " 30 : " + getCheckMessage ( MSG _ ERROR , " synchronized lparen " , 12 , 8 ) , 
 } ; 
 verifyWarns ( checkConfig , getPath ( " InputIndentationSynchronizedStatement . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 index 37fa6ba . . 2f1a1c0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 @ @ - 133 , 6 + 133 , 10 @ @ public class ClassDataAbstractionCouplingCheckTest extends AbstractModuleTestSup 
 
 assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message , " , 
 + " the following values are not valid identifiers : [ " 
 + + " com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ] " , ex 
 + . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 index 8179b86 . . 9f764ce 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassFanOutComplexityCheck . MSG _ KEY ; 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ @ - 113 , 6 + 114 , 10 @ @ public class ClassFanOutComplexityCheckTest extends AbstractModuleTestSupport { 
 
 assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message , " , 
 + " the following values are not valid identifiers : [ " 
 + + " com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ] " , ex 
 + . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 index 739a896 . . 6fa6a5b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 @ @ - 35 , 6 + 35 , 26 @ @ public class AbbreviationAsWordInNameCheckTest extends AbstractModuleTestSupport 
 } 
 
 @ Test 
 + public void testDefault ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 + final int expectedCapitalCount = 4 ; 
 + 
 + final String [ ] expected = { 
 + " 9 : " + getWarningMessage ( " FactoryWithBADNAme " , expectedCapitalCount ) , 
 + " 12 : " + getWarningMessage ( " AbstractCLASSName " , expectedCapitalCount ) , 
 + " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , 
 + " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , 
 + " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , 
 + " 39 : " + getWarningMessage ( " marazmaticVARIABLEName " , expectedCapitalCount ) , 
 + " 40 : " + getWarningMessage ( " MARAZMATICVariableName " , expectedCapitalCount ) , 
 + " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testTypeNamesForThreePermittedCapitalLetters ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createModuleConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / DebugAuditAdapter . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / DebugAuditAdapter . java 
 index 539013c . . d9d9558 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / DebugAuditAdapter . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / testmodules / DebugAuditAdapter . java 
 @ @ - 27 , 6 + 27 , 9 @ @ public final class DebugAuditAdapter implements AuditListener { 
 / * * Keeps track whether this { @ code AuditListener } was called . * / 
 private boolean called ; 
 
 + / * * Keeps track whether this { @ code AuditListener } was given { @ code AuditEvent } . * / 
 + private boolean passedEvent ; 
 + 
 / * * Keeps track of the number of files started . * / 
 private int numFilesStarted ; 
 
 @ @ - 45 , 40 + 48 , 63 @ @ public final class DebugAuditAdapter implements AuditListener { 
 return called ; 
 } 
 
 + public boolean wasEventPassed ( ) { 
 + return passedEvent ; 
 + } 
 + 
 public void resetListener ( ) { 
 called = false ; 
 + passedEvent = false ; 
 } 
 
 @ Override 
 public void addError ( AuditEvent event ) { 
 called = true ; 
 + if ( event ! = null ) { 
 + passedEvent = true ; 
 + } 
 } 
 
 @ Override 
 public void addException ( AuditEvent event , Throwable throwable ) { 
 called = true ; 
 + if ( event ! = null ) { 
 + passedEvent = true ; 
 + } 
 } 
 
 @ Override 
 public void auditStarted ( AuditEvent event ) { 
 called = true ; 
 + if ( event ! = null ) { 
 + passedEvent = true ; 
 + } 
 } 
 
 @ Override 
 public void fileStarted ( AuditEvent event ) { 
 called = true ; 
 numFilesStarted + + ; 
 + if ( event ! = null ) { 
 + passedEvent = true ; 
 + } 
 } 
 
 @ Override 
 public void auditFinished ( AuditEvent event ) { 
 called = true ; 
 + if ( event ! = null ) { 
 + passedEvent = true ; 
 + } 
 } 
 
 @ Override 
 public void fileFinished ( AuditEvent event ) { 
 called = true ; 
 numFilesFinished + + ; 
 + if ( event ! = null ) { 
 + passedEvent = true ; 
 + } 
 } 
 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilTest . java 
 index b81ea12 . . e1c0af8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilTest . java 
 @ @ - 34 , 6 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; 
 import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; 
 import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; 
 import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagInfo ; 
 @ @ - 153 , 7 + 154 , 13 @ @ public class JavadocUtilTest { 
 final JavadocTags allTags = 
 JavadocUtil . getJavadocTags ( comment , JavadocUtil . JavadocTagType . ALL ) ; 
 assertEquals ( " Unexpected invalid tags size " , 2 , allTags . getInvalidTags ( ) . size ( ) ) ; 
 + assertTag ( " Unexpected invalid tag " , new InvalidJavadocTag ( 1 , 4 , " fake " ) , 
 + allTags . getInvalidTags ( ) . get ( 0 ) ) ; 
 + assertTag ( " Unexpected invalid tag " , new InvalidJavadocTag ( 2 , 4 , " bogus " ) , 
 + allTags . getInvalidTags ( ) . get ( 1 ) ) ; 
 assertEquals ( " Unexpected valid tags size " , 1 , allTags . getValidTags ( ) . size ( ) ) ; 
 + assertTag ( " Unexpected valid tag " , new JavadocTag ( 3 , 4 , " link " , " List valid " ) , 
 + allTags . getValidTags ( ) . get ( 0 ) ) ; 
 } 
 
 @ Test 
 @ @ - 369 , 4 + 376 , 19 @ @ public class JavadocUtilTest { 
 JavadocUtil . escapeAllControlChars ( " 1 \ \ r2 \ \ n3 \ \ t " ) ) ; 
 } 
 
 + private static void assertTag ( String message , InvalidJavadocTag expected , 
 + InvalidJavadocTag actual ) { 
 + assertEquals ( message + " line " , expected . getLine ( ) , actual . getLine ( ) ) ; 
 + assertEquals ( message + " column " , expected . getCol ( ) , actual . getCol ( ) ) ; 
 + assertEquals ( message + " name " , expected . getName ( ) , actual . getName ( ) ) ; 
 + } 
 + 
 + private static void assertTag ( String message , JavadocTag expected , 
 + JavadocTag actual ) { 
 + assertEquals ( message + " line " , expected . getLineNo ( ) , actual . getLineNo ( ) ) ; 
 + assertEquals ( message + " column " , expected . getColumnNo ( ) , actual . getColumnNo ( ) ) ; 
 + assertEquals ( message + " first arg " , expected . getFirstArg ( ) , actual . getFirstArg ( ) ) ; 
 + assertEquals ( message + " tag name " , expected . getTagName ( ) , actual . getTagName ( ) ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java 
 index 2695bfa . . 0f4d10a 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationSynchronizedStatement . java 
 @ @ - 26 , 6 + 26 , 8 @ @ public class InputIndentationSynchronizedStatement { / / indent : 0 exp : 0 
 synchronized ( new Object ( ) ) { / / indent : 8 exp : 8 
 instance = instance ; / / indent : 0 exp : 12 warn 
 } / / indent : 8 exp : 8 
 + synchronized / / indent : 8 exp : 8 
 + ( new Object ( ) ) { } / / indent : 12 exp : 8 warn 
 return instance ; / / indent : 8 exp : 8 
 } / / indent : 4 exp : 4 
 } / / indent : 0 exp : 0

NEAREST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index ae4ec79 . . 089ed64 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 346 , 6 + 346 , 7 @ @ 
 < module name = " SingleLineJavadoc " / > 
 < module name = " JavadocTagContinuationIndentation " / > 
 < module name = " JavadocParagraph " / > 
 + < module name = " WriteTag " / > 
 
 < ! - - 
 All Checks bellow are our futute plan to enforce over our code . 
 @ @ - 356 , 9 + 357 , 6 @ @ 
 < module name = " SummaryJavadoc " > 
 < property name = " severity " value = " ignore " / > 
 < / module > 
 - < module name = " WriteTag " > 
 - < property name = " severity " value = " ignore " / > 
 - < / module > 
 
 < module name = " MissingCtor " > 
 < ! - - 
 diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 2c7cee0 . . cd8d97c 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 38 , 6 + 38 , 7 @ @ 
 < suppress checks = " MethodCount " files = " [ \ \ / ] IndentationCheckTest . java $ " / > 
 < suppress checks = " MethodCount " files = " [ \ \ / ] MainTest . java $ " / > 
 < suppress checks = " EqualsAvoidNull " files = " [ \ \ / ] Int . * FilterTest . java $ " / > 
 + < suppress checks = " WriteTag " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > 
 
 < ! - - suppressions to remove over time - - > 
 < suppress checks = " FinalLocalVariable " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java 
 index b6055a3 . . df92965 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java 
 @ @ - 248 , 6 + 248 , 9 @ @ class FileDrop { 
 void filesDropped ( File . . . files ) ; 
 } 
 
 + / * * 
 + * Listener and handler for file drop target events . 
 + * / 
 private class FileDropTargetListener extends DropTargetAdapter { 
 / * * Target component to drop to . * / 
 private final Component component ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java 
 index 8e76bdb . . 224933c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java 
 @ @ - 259 , 6 + 259 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { 
 } 
 } 
 
 + / * * 
 + * Filter for Java files . 
 + * / 
 private static class JavaFileFilter extends FileFilter { 
 @ Override 
 public boolean accept ( File file ) { 
 @ @ - 274 , 6 + 277 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { 
 } 
 } 
 
 + / * * 
 + * Handler for file selection action events . 
 + * / 
 private class FileSelectionAction extends AbstractAction { 
 / * * 
 * Serial ID . 
 @ @ - 300 , 6 + 306 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { 
 } 
 } 
 
 + / * * 
 + * Handler for reload action events . 
 + * / 
 private class ReloadAction extends AbstractAction { 
 / * * 
 * Serial UID . 
 @ @ - 320 , 6 + 329 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { 
 } 
 } 
 
 + / * * 
 + * Listener and handler for file dropped events . 
 + * / 
 private class FileDropListener implements FileDrop . Listener { 
 / * * Scroll pane . * / 
 private final JScrollPane scrollPane ;
