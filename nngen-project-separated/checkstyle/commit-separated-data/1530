BLEU SCORE: 0.01095203863317687

TEST MSG: Issue # 2326 : Fix reusability of JavaDoc checks
GENERATED MSG: Update UnusedImportsCheck to correctly detect classes in parameters and inline tags nested within block tags .

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> index 318a443 . . 8ea27cf 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> @ @ - 89 , 8 + 89 , 7 @ @ public abstract class AbstractJavadocCheck extends Check { <nl> / * * <nl> * Custom error listener . <nl> * / <nl> - private final DescriptiveErrorListener errorListener = <nl> - new DescriptiveErrorListener ( ) ; <nl> + private DescriptiveErrorListener errorListener ; <nl> <nl> / * * <nl> * DetailAST node of considered Javadoc comment that is just a block comment <nl> @ @ - 216 , 6 + 215 , 11 @ @ public abstract class AbstractJavadocCheck extends Check { <nl> private ParseStatus parseJavadocAsDetailNode ( DetailAST javadocCommentAst ) { <nl> final String javadocComment = JavadocUtils . getJavadocCommentContent ( javadocCommentAst ) ; <nl> <nl> + / / Use a new error listener each time to be able to use <nl> + / / one check instance for multiple files to be checked <nl> + / / without getting side effects . <nl> + errorListener = new DescriptiveErrorListener ( ) ; <nl> + <nl> / / Log messages should have line number in scope of file , <nl> / / not in scope of Javadoc comment . <nl> / / Offset is line number of beginning of Javadoc comment . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> index 25665b5 . . 6775d6a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> - import static org . junit . Assert . assertEquals ; <nl> + import static java . util . Arrays . asList ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> import java . io . ByteArrayInputStream ; <nl> import java . io . ByteArrayOutputStream ; <nl> @ @ - 11 , 12 + 12 , 19 @ @ import java . io . LineNumberReader ; <nl> import java . io . OutputStream ; <nl> import java . nio . charset . StandardCharsets ; <nl> import java . text . MessageFormat ; <nl> + import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> + import java . util . Map ; <nl> import java . util . Properties ; <nl> <nl> + import com . google . common . base . Predicate ; <nl> import com . google . common . collect . Lists ; <nl> + import com . google . common . collect . MapDifference ; <nl> + import com . google . common . collect . MapDifference . ValueDifference ; <nl> + import com . google . common . collect . Maps ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> <nl> @ @ - 135 , 6 + 143 , 15 @ @ public class BaseCheckTestSupport { <nl> String messageFileName , <nl> String . . . expected ) <nl> throws Exception { <nl> + final Map < String , List < String > > expectedMessages = new HashMap < > ( 1 ) ; <nl> + expectedMessages . put ( messageFileName , asList ( expected ) ) ; <nl> + verify ( checker , processedFiles , expectedMessages ) ; <nl> + } <nl> + <nl> + protected void verify ( Checker checker , <nl> + File [ ] processedFiles , <nl> + Map < String , List < String > > expectedViolations ) <nl> + throws Exception { <nl> stream . flush ( ) ; <nl> final List < File > theFiles = Lists . newArrayList ( ) ; <nl> Collections . addAll ( theFiles , processedFiles ) ; <nl> @ @ - 146 , 14 + 163 , 55 @ @ public class BaseCheckTestSupport { <nl> try ( final LineNumberReader lnr = new LineNumberReader ( <nl> new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { <nl> <nl> - for ( int i = 0 ; i < expected . length ; i + + ) { <nl> - final String expectedResult = messageFileName + " : " + expected [ i ] ; <nl> - final String actual = lnr . readLine ( ) ; <nl> - assertEquals ( " error message " + i , expectedResult , actual ) ; <nl> + final Map < String , List < String > > actualViolations = new HashMap < > ( ) ; <nl> + for ( String line = lnr . readLine ( ) ; line ! = null & & lnr . getLineNumber ( ) < = errs ; line = lnr . readLine ( ) ) { <nl> + / / have at least 2 characters before the splitting colon , <nl> + / / to not split after the drive letter on windows <nl> + final String [ ] actualViolation = line . split ( " ( ? < = . { 2 } ) : " , 2 ) ; <nl> + final String actualViolationFileName = actualViolation [ 0 ] ; <nl> + final String actualViolationMessage = actualViolation [ 1 ] ; <nl> + <nl> + List < String > actualViolationsPerFile = actualViolations . get ( actualViolationFileName ) ; <nl> + if ( actualViolationsPerFile = = null ) { <nl> + actualViolationsPerFile = new ArrayList < > ( ) ; <nl> + actualViolations . put ( actualViolationFileName , actualViolationsPerFile ) ; <nl> + } <nl> + actualViolationsPerFile . add ( actualViolationMessage ) ; <nl> + } <nl> + <nl> + final Map < String , List < String > > realExpectedViolations = Maps . filterValues ( expectedViolations , new Predicate < List < String > > ( ) { <nl> + @ Override <nl> + public boolean apply ( List < String > input ) { <nl> + return ! input . isEmpty ( ) ; <nl> + } <nl> + } ) ; <nl> + final MapDifference < String , List < String > > violationDifferences = Maps . difference ( realExpectedViolations , actualViolations ) ; <nl> + <nl> + final Map < String , List < String > > missingViolations = violationDifferences . entriesOnlyOnLeft ( ) ; <nl> + final Map < String , List < String > > unexpectedViolations = violationDifferences . entriesOnlyOnRight ( ) ; <nl> + final Map < String , ValueDifference < List < String > > > differingViolations = violationDifferences . entriesDiffering ( ) ; <nl> + <nl> + final StringBuilder message = new StringBuilder ( ) ; <nl> + if ( ! missingViolations . isEmpty ( ) ) { <nl> + message . append ( " missing violations : " ) . append ( missingViolations ) ; <nl> + } <nl> + if ( ! unexpectedViolations . isEmpty ( ) ) { <nl> + if ( message . length ( ) > 0 ) { <nl> + message . append ( ' \ n ' ) ; <nl> + } <nl> + message . append ( " unexpected violations : " ) . append ( unexpectedViolations ) ; <nl> + } <nl> + if ( ! differingViolations . isEmpty ( ) ) { <nl> + if ( message . length ( ) > 0 ) { <nl> + message . append ( ' \ n ' ) ; <nl> + } <nl> + message . append ( " differing violations : " ) . append ( differingViolations ) ; <nl> } <nl> <nl> - assertEquals ( " unexpected output : " + lnr . readLine ( ) , <nl> - expected . length , errs ) ; <nl> + assertTrue ( message . toString ( ) , <nl> + missingViolations . isEmpty ( ) <nl> + & & unexpectedViolations . isEmpty ( ) <nl> + & & differingViolations . isEmpty ( ) ) ; <nl> } <nl> checker . destroy ( ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> index e2e11ce . . 5528bcb 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> @ @ - 23 , 11 + 23 , 15 @ @ import static com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocChec <nl> import static com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck . JAVADOC _ WRONG _ SINGLETON _ TAG ; <nl> import static com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck . PARSE _ ERROR _ MESSAGE _ KEY ; <nl> import static com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck . UNRECOGNIZED _ ANTLR _ ERROR _ MESSAGE _ KEY ; <nl> + import static java . util . Arrays . asList ; <nl> + import static java . util . Collections . singletonList ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . util . LinkedHashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> <nl> - import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> @ @ - 85 , 8 + 89 , 42 @ @ public class AbstractJavadocCheckTest extends BaseCheckTestSupport { <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . configure ( checkerConfig ) ; <nl> <nl> - final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checker , getPath ( " InputCorrectJavaDocParagraphCheck . java " ) , expected ) ; <nl> + verify ( checker , getPath ( " InputCorrectJavaDocParagraphCheck . java " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAntlrError ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( TempCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 3 : " + getCheckMessage ( UNRECOGNIZED _ ANTLR _ ERROR _ MESSAGE _ KEY , 0 , null ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputTestInvalidAtSeeReference . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCheckReuseAfterParseErrorWithFollowingAntlrErrorInTwoFiles ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( TempCheck . class ) ; <nl> + Map < String , List < String > > expectedMessages = new LinkedHashMap < > ( 2 ) ; <nl> + expectedMessages . put ( getPath ( " InputParsingErrors . java " ) , asList ( <nl> + " 4 : " + getCheckMessage ( JAVADOC _ MISSED _ HTML _ CLOSE , 4 , " unclosedTag " ) , <nl> + " 8 : " + getCheckMessage ( JAVADOC _ WRONG _ SINGLETON _ TAG , 35 , " img " ) <nl> + ) ) ; <nl> + expectedMessages . put ( getPath ( " InputTestInvalidAtSeeReference . java " ) , singletonList ( <nl> + " 3 : " + getCheckMessage ( UNRECOGNIZED _ ANTLR _ ERROR _ MESSAGE _ KEY , 0 , null ) <nl> + ) ) ; <nl> + verify ( createChecker ( checkConfig ) , new File [ ] { <nl> + new File ( getPath ( " InputParsingErrors . java " ) ) , <nl> + new File ( getPath ( " InputTestInvalidAtSeeReference . java " ) ) , } , expectedMessages ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCheckReuseAfterParseErrorWithFollowingAntlrErrorInSingleFile ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( TempCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 4 : " + getCheckMessage ( JAVADOC _ MISSED _ HTML _ CLOSE , 4 , " unclosedTag " ) , <nl> + " 7 : " + getCheckMessage ( UNRECOGNIZED _ ANTLR _ ERROR _ MESSAGE _ KEY , 4 , null ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputTestUnclosedTagAndInvalidAtSeeReference . java " ) , expected ) ; <nl> } <nl> <nl> private static class TempCheck extends AbstractJavadocCheck { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputTestInvalidAtSeeReference . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputTestInvalidAtSeeReference . java <nl> new file mode 100644 <nl> index 0000000 . . 13f5d62 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputTestInvalidAtSeeReference . java <nl> @ @ - 0 , 0 + 1 , 7 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . javadoc ; <nl> + <nl> + / * * <nl> + * @ see javax . swing . tree . DefaultTreeCellRenderer . getTreeCellRendererComponent ( ) <nl> + * / <nl> + class InputTestInvalidAtSeeReference { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputTestUnclosedTagAndInvalidAtSeeReference . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputTestUnclosedTagAndInvalidAtSeeReference . java <nl> new file mode 100644 <nl> index 0000000 . . 9f899e5 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputTestUnclosedTagAndInvalidAtSeeReference . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . javadoc ; <nl> + <nl> + / * * <nl> + * < unclosedTag > <nl> + * / <nl> + class InputTestUnclosedTagAndInvalidAtSeeReference { <nl> + / * * <nl> + * @ see javax . swing . tree . DefaultTreeCellRenderer . getTreeCellRendererComponent ( ) <nl> + * / <nl> + void invalidAtSeeReference ( ) { <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / . travis . yml b / . travis . yml <nl> index 68e0a3c . . 6ad4227 100644 <nl> - - - a / . travis . yml <nl> + + + b / . travis . yml <nl> @ @ - 2 , 3 + 2 , 5 @ @ language : java <nl> jdk : <nl> - openjdk6 <nl> - openjdk7 <nl> + - oraclejdk7 <nl> + install : mvn clean package

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 index 318a443 . . 8ea27cf 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 @ @ - 89 , 8 + 89 , 7 @ @ public abstract class AbstractJavadocCheck extends Check { 
 / * * 
 * Custom error listener . 
 * / 
 - private final DescriptiveErrorListener errorListener = 
 - new DescriptiveErrorListener ( ) ; 
 + private DescriptiveErrorListener errorListener ; 
 
 / * * 
 * DetailAST node of considered Javadoc comment that is just a block comment 
 @ @ - 216 , 6 + 215 , 11 @ @ public abstract class AbstractJavadocCheck extends Check { 
 private ParseStatus parseJavadocAsDetailNode ( DetailAST javadocCommentAst ) { 
 final String javadocComment = JavadocUtils . getJavadocCommentContent ( javadocCommentAst ) ; 
 
 + / / Use a new error listener each time to be able to use 
 + / / one check instance for multiple files to be checked 
 + / / without getting side effects . 
 + errorListener = new DescriptiveErrorListener ( ) ; 
 + 
 / / Log messages should have line number in scope of file , 
 / / not in scope of Javadoc comment . 
 / / Offset is line number of beginning of Javadoc comment . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 index 25665b5 . . 6775d6a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle ; 
 
 - import static org . junit . Assert . assertEquals ; 
 + import static java . util . Arrays . asList ; 
 + import static org . junit . Assert . assertTrue ; 
 
 import java . io . ByteArrayInputStream ; 
 import java . io . ByteArrayOutputStream ; 
 @ @ - 11 , 12 + 12 , 19 @ @ import java . io . LineNumberReader ; 
 import java . io . OutputStream ; 
 import java . nio . charset . StandardCharsets ; 
 import java . text . MessageFormat ; 
 + import java . util . ArrayList ; 
 import java . util . Collections ; 
 + import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Locale ; 
 + import java . util . Map ; 
 import java . util . Properties ; 
 
 + import com . google . common . base . Predicate ; 
 import com . google . common . collect . Lists ; 
 + import com . google . common . collect . MapDifference ; 
 + import com . google . common . collect . MapDifference . ValueDifference ; 
 + import com . google . common . collect . Maps ; 
 import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 
 @ @ - 135 , 6 + 143 , 15 @ @ public class BaseCheckTestSupport { 
 String messageFileName , 
 String . . . expected ) 
 throws Exception { 
 + final Map < String , List < String > > expectedMessages = new HashMap < > ( 1 ) ; 
 + expectedMessages . put ( messageFileName , asList ( expected ) ) ; 
 + verify ( checker , processedFiles , expectedMessages ) ; 
 + } 
 + 
 + protected void verify ( Checker checker , 
 + File [ ] processedFiles , 
 + Map < String , List < String > > expectedViolations ) 
 + throws Exception { 
 stream . flush ( ) ; 
 final List < File > theFiles = Lists . newArrayList ( ) ; 
 Collections . addAll ( theFiles , processedFiles ) ; 
 @ @ - 146 , 14 + 163 , 55 @ @ public class BaseCheckTestSupport { 
 try ( final LineNumberReader lnr = new LineNumberReader ( 
 new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { 
 
 - for ( int i = 0 ; i < expected . length ; i + + ) { 
 - final String expectedResult = messageFileName + " : " + expected [ i ] ; 
 - final String actual = lnr . readLine ( ) ; 
 - assertEquals ( " error message " + i , expectedResult , actual ) ; 
 + final Map < String , List < String > > actualViolations = new HashMap < > ( ) ; 
 + for ( String line = lnr . readLine ( ) ; line ! = null & & lnr . getLineNumber ( ) < = errs ; line = lnr . readLine ( ) ) { 
 + / / have at least 2 characters before the splitting colon , 
 + / / to not split after the drive letter on windows 
 + final String [ ] actualViolation = line . split ( " ( ? < = . { 2 } ) : " , 2 ) ; 
 + final String actualViolationFileName = actualViolation [ 0 ] ; 
 + final String actualViolationMessage = actualViolation [ 1 ] ; 
 + 
 + List < String > actualViolationsPerFile = actualViolations . get ( actualViolationFileName ) ; 
 + if ( actualViolationsPerFile = = null ) { 
 + actualViolationsPerFile = new ArrayList < > ( ) ; 
 + actualViolations . put ( actualViolationFileName , actualViolationsPerFile ) ; 
 + } 
 + actualViolationsPerFile . add ( actualViolationMessage ) ; 
 + } 
 + 
 + final Map < String , List < String > > realExpectedViolations = Maps . filterValues ( expectedViolations , new Predicate < List < String > > ( ) { 
 + @ Override 
 + public boolean apply ( List < String > input ) { 
 + return ! input . isEmpty ( ) ; 
 + } 
 + } ) ; 
 + final MapDifference < String , List < String > > violationDifferences = Maps . difference ( realExpectedViolations , actualViolations ) ; 
 + 
 + final Map < String , List < String > > missingViolations = violationDifferences . entriesOnlyOnLeft ( ) ; 
 + final Map < String , List < String > > unexpectedViolations = violationDifferences . entriesOnlyOnRight ( ) ; 
 + final Map < String , ValueDifference < List < String > > > differingViolations = violationDifferences . entriesDiffering ( ) ; 
 + 
 + final StringBuilder message = new StringBuilder ( ) ; 
 + if ( ! missingViolations . isEmpty ( ) ) { 
 + message . append ( " missing violations : " ) . append ( missingViolations ) ; 
 + } 
 + if ( ! unexpectedViolations . isEmpty ( ) ) { 
 + if ( message . length ( ) > 0 ) { 
 + message . append ( ' \ n ' ) ; 
 + } 
 + message . append ( " unexpected violations : " ) . append ( unexpectedViolations ) ; 
 + } 
 + if ( ! differingViolations . isEmpty ( ) ) { 
 + if ( message . length ( ) > 0 ) { 
 + message . append ( ' \ n ' ) ; 
 + } 
 + message . append ( " differing violations : " ) . append ( differingViolations ) ; 
 } 
 
 - assertEquals ( " unexpected output : " + lnr . readLine ( ) , 
 - expected . length , errs ) ; 
 + assertTrue ( message . toString ( ) , 
 + missingViolations . isEmpty ( ) 
 + & & unexpectedViolations . isEmpty ( ) 
 + & & differingViolations . isEmpty ( ) ) ; 
 } 
 checker . destroy ( ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 index e2e11ce . . 5528bcb 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 @ @ - 23 , 11 + 23 , 15 @ @ import static com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocChec 
 import static com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck . JAVADOC _ WRONG _ SINGLETON _ TAG ; 
 import static com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck . PARSE _ ERROR _ MESSAGE _ KEY ; 
 import static com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck . UNRECOGNIZED _ ANTLR _ ERROR _ MESSAGE _ KEY ; 
 + import static java . util . Arrays . asList ; 
 + import static java . util . Collections . singletonList ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . util . LinkedHashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 
 - import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 @ @ - 85 , 8 + 89 , 42 @ @ public class AbstractJavadocCheckTest extends BaseCheckTestSupport { 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . configure ( checkerConfig ) ; 
 
 - final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checker , getPath ( " InputCorrectJavaDocParagraphCheck . java " ) , expected ) ; 
 + verify ( checker , getPath ( " InputCorrectJavaDocParagraphCheck . java " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAntlrError ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( TempCheck . class ) ; 
 + final String [ ] expected = { 
 + " 3 : " + getCheckMessage ( UNRECOGNIZED _ ANTLR _ ERROR _ MESSAGE _ KEY , 0 , null ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputTestInvalidAtSeeReference . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testCheckReuseAfterParseErrorWithFollowingAntlrErrorInTwoFiles ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( TempCheck . class ) ; 
 + Map < String , List < String > > expectedMessages = new LinkedHashMap < > ( 2 ) ; 
 + expectedMessages . put ( getPath ( " InputParsingErrors . java " ) , asList ( 
 + " 4 : " + getCheckMessage ( JAVADOC _ MISSED _ HTML _ CLOSE , 4 , " unclosedTag " ) , 
 + " 8 : " + getCheckMessage ( JAVADOC _ WRONG _ SINGLETON _ TAG , 35 , " img " ) 
 + ) ) ; 
 + expectedMessages . put ( getPath ( " InputTestInvalidAtSeeReference . java " ) , singletonList ( 
 + " 3 : " + getCheckMessage ( UNRECOGNIZED _ ANTLR _ ERROR _ MESSAGE _ KEY , 0 , null ) 
 + ) ) ; 
 + verify ( createChecker ( checkConfig ) , new File [ ] { 
 + new File ( getPath ( " InputParsingErrors . java " ) ) , 
 + new File ( getPath ( " InputTestInvalidAtSeeReference . java " ) ) , } , expectedMessages ) ; 
 + } 
 + 
 + @ Test 
 + public void testCheckReuseAfterParseErrorWithFollowingAntlrErrorInSingleFile ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( TempCheck . class ) ; 
 + final String [ ] expected = { 
 + " 4 : " + getCheckMessage ( JAVADOC _ MISSED _ HTML _ CLOSE , 4 , " unclosedTag " ) , 
 + " 7 : " + getCheckMessage ( UNRECOGNIZED _ ANTLR _ ERROR _ MESSAGE _ KEY , 4 , null ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputTestUnclosedTagAndInvalidAtSeeReference . java " ) , expected ) ; 
 } 
 
 private static class TempCheck extends AbstractJavadocCheck { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputTestInvalidAtSeeReference . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputTestInvalidAtSeeReference . java 
 new file mode 100644 
 index 0000000 . . 13f5d62 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputTestInvalidAtSeeReference . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . javadoc ; 
 + 
 + / * * 
 + * @ see javax . swing . tree . DefaultTreeCellRenderer . getTreeCellRendererComponent ( ) 
 + * / 
 + class InputTestInvalidAtSeeReference { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputTestUnclosedTagAndInvalidAtSeeReference . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputTestUnclosedTagAndInvalidAtSeeReference . java 
 new file mode 100644 
 index 0000000 . . 9f899e5 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputTestUnclosedTagAndInvalidAtSeeReference . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . javadoc ; 
 + 
 + / * * 
 + * < unclosedTag > 
 + * / 
 + class InputTestUnclosedTagAndInvalidAtSeeReference { 
 + / * * 
 + * @ see javax . swing . tree . DefaultTreeCellRenderer . getTreeCellRendererComponent ( ) 
 + * / 
 + void invalidAtSeeReference ( ) { 
 + } 
 + }

NEAREST DIFF:
diff - - git a / . travis . yml b / . travis . yml 
 index 68e0a3c . . 6ad4227 100644 
 - - - a / . travis . yml 
 + + + b / . travis . yml 
 @ @ - 2 , 3 + 2 , 5 @ @ language : java 
 jdk : 
 - openjdk6 
 - openjdk7 
 + - oraclejdk7 
 + install : mvn clean package
