BLEU SCORE: 0.04567211833282236

TEST MSG: Issue # 2285 : Add possibility to track down the name of source file which caused the internal Exception or Error
GENERATED MSG: Issue # 2109 : CLI should print a file name where exception is happen

TEST DIFF (one line): diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index 57f9e9a . . a8b2fe9 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 1977 , 6 + 1977 , 9 @ @ <nl> < option value = " deprecation " / > <nl> < option value = " unchecked " / > <nl> < option value = " rawtypes " / > <nl> + < ! - - There is no other way to deliver filename that was under processing . <nl> + See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > <nl> + < option value = " ProhibitedExceptionThrown " / > <nl> < / list > <nl> < / option > <nl> < / inspection _ tool > <nl> diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 72ec709 . . 91ddab9 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 270 , 8 + 270 , 16 @ @ <nl> < / rule > <nl> < rule ref = " rulesets / java / strictexception . xml / AvoidCatchingGenericException " > <nl> < properties > <nl> - < ! - - There is no other way to deliver filename that was under processing - - > <nl> - < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' process ' and . . / . . / . . [ @ Image = ' Checker ' ] ] " / > <nl> + < ! - - There is no other way to deliver filename that was under processing . <nl> + See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > <nl> + < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' processFiles ' and . . / . . / . . [ @ Image = ' Checker ' ] ] " / > <nl> + < / properties > <nl> + < / rule > <nl> + < rule ref = " rulesets / java / strictexception . xml / AvoidThrowingRawExceptionTypes " > <nl> + < properties > <nl> + < ! - - There is no other way to deliver filename that was under processing . <nl> + See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > <nl> + < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' processFiles ' and . . / . . / . . [ @ Image = ' Checker ' ] ] " / > <nl> < / properties > <nl> < / rule > <nl> <nl> diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index f1ee0ff . . f1de850 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 9 , 10 + 9 , 18 @ @ <nl> files = " TokenTypes . java " <nl> lines = " 1 " / > <nl> <nl> - < ! - - There is no other way to deliver filename that was under processing - - > <nl> + < ! - - There is no other way to deliver filename that was under processing . <nl> + See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > <nl> < suppress checks = " IllegalCatch " <nl> files = " Checker . java " <nl> - lines = " 327 " / > <nl> + lines = " 316 " / > <nl> + < suppress checks = " IllegalCatch " <nl> + files = " Checker . java " <nl> + lines = " 321 " / > <nl> + < ! - - Test to reproduce error catching in Checker and satisfy coverage rate . - - > <nl> + < suppress checks = " IllegalCatch " <nl> + files = " CheckerTest . java " <nl> + lines = " 520 " / > <nl> <nl> < ! - - we can not change it as , Check name is part of API ( used in configurations ) - - > <nl> < suppress checks = " AbbreviationAsWordInName " <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> index dc2b3dd . . 9d69646 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 294 , 6 + 294 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> * Processes a list of files with all FileSetChecks . <nl> * @ param files a list of files to process . <nl> * @ throws CheckstyleException if error condition within Checkstyle occurs . <nl> + * @ noinspection ProhibitedExceptionThrown <nl> * / <nl> private void processFiles ( List < File > files ) throws CheckstyleException { <nl> for ( final File file : files ) { <nl> @ @ - 302 , 22 + 303 , 10 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> fireFileStarted ( fileName ) ; <nl> final long timestamp = file . lastModified ( ) ; <nl> if ( cache ! = null & & cache . isInCache ( fileName , timestamp ) <nl> - | | ! CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { <nl> + | | ! CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { <nl> continue ; <nl> } <nl> - final SortedSet < LocalizedMessage > fileMessages = Sets . newTreeSet ( ) ; <nl> - try { <nl> - final FileText theText = new FileText ( file . getAbsoluteFile ( ) , charset ) ; <nl> - for ( final FileSetCheck fsc : fileSetChecks ) { <nl> - fileMessages . addAll ( fsc . process ( file , theText ) ) ; <nl> - } <nl> - } <nl> - catch ( final IOException ioe ) { <nl> - LOG . debug ( " IOException occurred . " , ioe ) ; <nl> - fileMessages . add ( new LocalizedMessage ( 0 , <nl> - Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , <nl> - new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , null ) ) ; <nl> - } <nl> + final SortedSet < LocalizedMessage > fileMessages = processFile ( file ) ; <nl> fireErrors ( fileName , fileMessages ) ; <nl> fireFileFinished ( fileName ) ; <nl> if ( cache ! = null & & fileMessages . isEmpty ( ) ) { <nl> @ @ - 325 , 11 + 314 , 38 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> } <nl> } <nl> catch ( Exception ex ) { <nl> - / / We need to catch all exception to put a reason failure ( file name ) in exception <nl> + / / We need to catch all exceptions to put a reason failure ( file name ) in exception <nl> throw new CheckstyleException ( " Exception was thrown while processing " <nl> + file . getPath ( ) , ex ) ; <nl> } <nl> + catch ( Error error ) { <nl> + / / We need to catch all errors to put a reason failure ( file name ) in error <nl> + throw new Error ( " Error was thrown while processing " + file . getPath ( ) , error ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Processes a file with all FileSetChecks . <nl> + * @ param file a file to process . <nl> + * @ return a sorted set of messages to be logged . <nl> + * @ throws CheckstyleException if error condition within Checkstyle occurs . <nl> + * / <nl> + private SortedSet < LocalizedMessage > processFile ( File file ) throws CheckstyleException { <nl> + final SortedSet < LocalizedMessage > fileMessages = Sets . newTreeSet ( ) ; <nl> + try { <nl> + final FileText theText = new FileText ( file . getAbsoluteFile ( ) , charset ) ; <nl> + for ( final FileSetCheck fsc : fileSetChecks ) { <nl> + fileMessages . addAll ( fsc . process ( file , theText ) ) ; <nl> + } <nl> + } <nl> + catch ( final IOException ioe ) { <nl> + LOG . debug ( " IOException occurred . " , ioe ) ; <nl> + fileMessages . add ( new LocalizedMessage ( 0 , <nl> + Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , <nl> + new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , null ) ) ; <nl> } <nl> + return fileMessages ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index a9d35c9 . . b50f78b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 26 , 8 + 26 , 10 @ @ import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> + import static org . mockito . Mockito . when ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOError ; <nl> import java . io . IOException ; <nl> import java . io . UnsupportedEncodingException ; <nl> import java . nio . file . InvalidPathException ; <nl> @ @ - 42 , 7 + 44 , 9 @ @ import org . junit . Assume ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . TemporaryFolder ; <nl> + import org . powermock . api . mockito . PowerMockito ; <nl> <nl> + import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Sets ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> @ @ - 492 , 4 + 496 , 31 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> / / one more time , but cache does not exist <nl> verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testCatchErrorInProcessFilesMethod ( ) throws Exception { <nl> + / / The idea of the test is to satisfy coverage rate . <nl> + / / An Error indicates serious problems that a reasonable application should not try to <nl> + / / catch , but due to issue https : / / github . com / checkstyle / checkstyle / issues / 2285 <nl> + / / we catch errors in ' processFiles ' method . Most such errors are abnormal conditions , <nl> + / / that is why we use PowerMockito to reproduse them . <nl> + final File mock = PowerMockito . mock ( File . class ) ; <nl> + / / Assume that I / O error is happened when we try to invoke ' lastModified ( ) ' method . <nl> + final String errorMessage = " Java Virtual Machine is broken " <nl> + + " or has run out of resources necessary for it to continue operating . " ; <nl> + final Error expectedError = new IOError ( new InternalError ( errorMessage ) ) ; <nl> + when ( mock . lastModified ( ) ) . thenThrow ( expectedError ) ; <nl> + final Checker checker = new Checker ( ) ; <nl> + final List < File > filesToProcess = Lists . newArrayList ( ) ; <nl> + filesToProcess . add ( mock ) ; <nl> + try { <nl> + checker . process ( filesToProcess ) ; <nl> + fail ( " IOError is expected ! " ) ; <nl> + } <nl> + catch ( Error error ) { <nl> + assertThat ( error . getCause ( ) , instanceOf ( IOError . class ) ) ; <nl> + assertThat ( error . getCause ( ) . getCause ( ) , instanceOf ( InternalError . class ) ) ; <nl> + assertEquals ( errorMessage , error . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> index dae6cd4 . . 348d5d0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> @ @ - 58 , 8 + 58 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> public void testAllChecksWithDefaultConfiguration ( ) throws Exception { <nl> <nl> final Set < Class < ? > > checkstyleChecks = getCheckstyleChecks ( ) ; <nl> - final String inputFilePath = " src / test / resources - noncompilable / " <nl> - + " com / puppycrawl / tools / checkstyle / InputDefaultConfig . java " ; <nl> + final String inputFilePath = getNonCompilablePath ( " InputDefaultConfig . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> for ( Class < ? > check : checkstyleChecks ) { <nl> @ @ - 69 , 8 + 68 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> / / Checks which have Check as a parent . <nl> if ( check . equals ( ImportControlCheck . class ) ) { <nl> / / ImportControlCheck must have the import control configuration file to avoid violation . <nl> - checkConfig . addAttribute ( " file " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ complete . xml " ) ; <nl> + checkConfig . addAttribute ( " file " , getPath ( " import - control _ complete . xml " ) ) ; <nl> } <nl> checker = createChecker ( checkConfig ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index cfa3873 . . c30edb7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 44 , 6 + 44 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> * @ author lkuehne <nl> * / <nl> public class ConfigurationLoaderTest { <nl> + private static String getConfigPath ( String filename ) { <nl> + return " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + filename ; <nl> + } <nl> <nl> private static Configuration loadConfiguration ( String name ) <nl> throws CheckstyleException { <nl> @ @ - 52 , 8 + 55 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> private static Configuration loadConfiguration ( <nl> String name , Properties props ) throws CheckstyleException { <nl> - final String fName = <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + name ; <nl> + final String fName = getConfigPath ( name ) ; <nl> <nl> return ConfigurationLoader . loadConfiguration ( <nl> fName , new PropertiesExpander ( props ) ) ; <nl> @ @ - 66 , 7 + 68 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> / / load config that ' s only found in the classpath <nl> final DefaultConfiguration config = ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / checkstyle _ checks . xml " , new PropertiesExpander ( props ) ) ; <nl> + getConfigPath ( " checkstyle _ checks . xml " ) , new PropertiesExpander ( props ) ) ; <nl> <nl> / / verify the root , and property substitution <nl> final Properties attributes = new Properties ( ) ; <nl> @ @ - 334 , 8 + 336 , 7 @ @ public class ConfigurationLoaderTest { <nl> final Properties props = new Properties ( ) ; <nl> props . setProperty ( " checkstyle . basedir " , " basedir " ) ; <nl> <nl> - final File file = new File ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / subdir / including . xml " ) ; <nl> + final File file = new File ( getConfigPath ( " subdir / including . xml " ) ) ; <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> file . toURI ( ) . toString ( ) , new PropertiesExpander ( props ) ) ; <nl> @ @ - 403 , 8 + 404 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " , <nl> + getConfigPath ( " config _ with _ ignore . xml " ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 416 , 8 + 416 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( new InputSource ( <nl> - new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " ) . toURI ( ) . toString ( ) ) , <nl> + new File ( getConfigPath ( " config _ with _ ignore . xml " ) ) . toURI ( ) . toString ( ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 429 , 8 + 428 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ checker _ ignore . xml " , <nl> + getConfigPath ( " config _ with _ checker _ ignore . xml " ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 460 , 9 + 458 , 7 @ @ public class ConfigurationLoaderTest { <nl> @ SuppressWarnings ( " deprecation " ) <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - new FileInputStream ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " ) , <nl> + new FileInputStream ( getConfigPath ( " config _ with _ ignore . xml " ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 806a1c1 . . 3b7bf29 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 55 , 6 + 55 , 14 @ @ public class MainTest { <nl> @ Rule <nl> public final SystemOutRule systemOut = new SystemOutRule ( ) . enableLog ( ) . mute ( ) ; <nl> <nl> + private static String getPath ( String filename ) { <nl> + return " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ; <nl> + } <nl> + <nl> + private static String getFilePath ( String filename ) throws IOException { <nl> + return new File ( getPath ( filename ) ) . getCanonicalPath ( ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { <nl> assertUtilsClassHasPrivateConstructor ( Main . class ) ; <nl> @ @ - 110 , 7 + 118 , 7 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 143 , 7 + 151 , 7 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 158 , 7 + 166 , 7 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , " / google _ checks . xml " , " - f " , " xmlp " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 198 , 8 + 206 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - non - existing - classname . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - non - existing - classname . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 213 , 8 + 221 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 223 , 10 + 231 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> final ResourceBundle compilationProperties = <nl> ResourceBundle . getBundle ( " checkstylecompilation " ) ; <nl> String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; <nl> @ @ - 239 , 9 + 244 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 255 , 9 + 260 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 266 , 10 + 271 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : " <nl> + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> @ @ - 280 , 8 + 282 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname2 . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 291 , 10 + 293 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : error : " <nl> + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> @ @ - 306 , 8 + 305 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 - error . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " config - classname2 - error . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 321 , 10 + 320 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , temporaryFolder . getRoot ( ) + " / output . txt " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 338 , 10 + 337 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 359 , 10 + 358 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 384 , 10 + 383 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 402 , 10 + 401 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - classname - prop . xml " , <nl> - " - p " , " src / test / resources / com / puppycrawl / tools / checkstyle / mycheckstyle . properties " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , <nl> + " - p " , getPath ( " mycheckstyle . properties " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 420 , 10 + 418 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - classname - prop . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , <nl> " - p " , " nonexisting . properties " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 443 , 9 + 440 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - Incorrect . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - Incorrect . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 522 , 10 + 518 , 7 @ @ public class MainTest { <nl> <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; <nl> @ @ - 541 , 8 + 534 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; <nl> + Main . main ( " - c " , getPath ( " config - filelength . xml " ) , <nl> + getPath ( " checks / metrics " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml <nl> new file mode 100644 <nl> index 0000000 . . 3bdfcad <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + < ? xml version = " 1 . 0 " ? > <nl> + < ! DOCTYPE import - control PUBLIC <nl> + " - / / Puppy Crawl / / DTD Import Control 1 . 0 / / EN " <nl> + " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 0 . dtd " > <nl> + <nl> + < import - control pkg = " com " > <nl> + < allow class = " some . class " / > <nl> + < disallow class = " another . class " local - only = " true " / > <nl> + < allow pkg = " some . pkg " / > <nl> + < disallow pkg = " another . pkg " local - only = " true " / > <nl> + < disallow pkg = " and . another . pkg " exact - match = " true " / > <nl> + < subpackage name = " puppycrawl " > <nl> + < disallow pkg = " some . pkg " / > <nl> + < disallow class = " some . class " / > <nl> + < / subpackage > <nl> + < / import - control > <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index 57f9e9a . . a8b2fe9 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 1977 , 6 + 1977 , 9 @ @ 
 < option value = " deprecation " / > 
 < option value = " unchecked " / > 
 < option value = " rawtypes " / > 
 + < ! - - There is no other way to deliver filename that was under processing . 
 + See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > 
 + < option value = " ProhibitedExceptionThrown " / > 
 < / list > 
 < / option > 
 < / inspection _ tool > 
 diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 72ec709 . . 91ddab9 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 270 , 8 + 270 , 16 @ @ 
 < / rule > 
 < rule ref = " rulesets / java / strictexception . xml / AvoidCatchingGenericException " > 
 < properties > 
 - < ! - - There is no other way to deliver filename that was under processing - - > 
 - < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' process ' and . . / . . / . . [ @ Image = ' Checker ' ] ] " / > 
 + < ! - - There is no other way to deliver filename that was under processing . 
 + See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > 
 + < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' processFiles ' and . . / . . / . . [ @ Image = ' Checker ' ] ] " / > 
 + < / properties > 
 + < / rule > 
 + < rule ref = " rulesets / java / strictexception . xml / AvoidThrowingRawExceptionTypes " > 
 + < properties > 
 + < ! - - There is no other way to deliver filename that was under processing . 
 + See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > 
 + < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' processFiles ' and . . / . . / . . [ @ Image = ' Checker ' ] ] " / > 
 < / properties > 
 < / rule > 
 
 diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index f1ee0ff . . f1de850 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 9 , 10 + 9 , 18 @ @ 
 files = " TokenTypes . java " 
 lines = " 1 " / > 
 
 - < ! - - There is no other way to deliver filename that was under processing - - > 
 + < ! - - There is no other way to deliver filename that was under processing . 
 + See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > 
 < suppress checks = " IllegalCatch " 
 files = " Checker . java " 
 - lines = " 327 " / > 
 + lines = " 316 " / > 
 + < suppress checks = " IllegalCatch " 
 + files = " Checker . java " 
 + lines = " 321 " / > 
 + < ! - - Test to reproduce error catching in Checker and satisfy coverage rate . - - > 
 + < suppress checks = " IllegalCatch " 
 + files = " CheckerTest . java " 
 + lines = " 520 " / > 
 
 < ! - - we can not change it as , Check name is part of API ( used in configurations ) - - > 
 < suppress checks = " AbbreviationAsWordInName " 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 index dc2b3dd . . 9d69646 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 294 , 6 + 294 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 * Processes a list of files with all FileSetChecks . 
 * @ param files a list of files to process . 
 * @ throws CheckstyleException if error condition within Checkstyle occurs . 
 + * @ noinspection ProhibitedExceptionThrown 
 * / 
 private void processFiles ( List < File > files ) throws CheckstyleException { 
 for ( final File file : files ) { 
 @ @ - 302 , 22 + 303 , 10 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 fireFileStarted ( fileName ) ; 
 final long timestamp = file . lastModified ( ) ; 
 if ( cache ! = null & & cache . isInCache ( fileName , timestamp ) 
 - | | ! CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { 
 + | | ! CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { 
 continue ; 
 } 
 - final SortedSet < LocalizedMessage > fileMessages = Sets . newTreeSet ( ) ; 
 - try { 
 - final FileText theText = new FileText ( file . getAbsoluteFile ( ) , charset ) ; 
 - for ( final FileSetCheck fsc : fileSetChecks ) { 
 - fileMessages . addAll ( fsc . process ( file , theText ) ) ; 
 - } 
 - } 
 - catch ( final IOException ioe ) { 
 - LOG . debug ( " IOException occurred . " , ioe ) ; 
 - fileMessages . add ( new LocalizedMessage ( 0 , 
 - Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , 
 - new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , null ) ) ; 
 - } 
 + final SortedSet < LocalizedMessage > fileMessages = processFile ( file ) ; 
 fireErrors ( fileName , fileMessages ) ; 
 fireFileFinished ( fileName ) ; 
 if ( cache ! = null & & fileMessages . isEmpty ( ) ) { 
 @ @ - 325 , 11 + 314 , 38 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 } 
 } 
 catch ( Exception ex ) { 
 - / / We need to catch all exception to put a reason failure ( file name ) in exception 
 + / / We need to catch all exceptions to put a reason failure ( file name ) in exception 
 throw new CheckstyleException ( " Exception was thrown while processing " 
 + file . getPath ( ) , ex ) ; 
 } 
 + catch ( Error error ) { 
 + / / We need to catch all errors to put a reason failure ( file name ) in error 
 + throw new Error ( " Error was thrown while processing " + file . getPath ( ) , error ) ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 + * Processes a file with all FileSetChecks . 
 + * @ param file a file to process . 
 + * @ return a sorted set of messages to be logged . 
 + * @ throws CheckstyleException if error condition within Checkstyle occurs . 
 + * / 
 + private SortedSet < LocalizedMessage > processFile ( File file ) throws CheckstyleException { 
 + final SortedSet < LocalizedMessage > fileMessages = Sets . newTreeSet ( ) ; 
 + try { 
 + final FileText theText = new FileText ( file . getAbsoluteFile ( ) , charset ) ; 
 + for ( final FileSetCheck fsc : fileSetChecks ) { 
 + fileMessages . addAll ( fsc . process ( file , theText ) ) ; 
 + } 
 + } 
 + catch ( final IOException ioe ) { 
 + LOG . debug ( " IOException occurred . " , ioe ) ; 
 + fileMessages . add ( new LocalizedMessage ( 0 , 
 + Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , 
 + new String [ ] { ioe . getMessage ( ) } , null , getClass ( ) , null ) ) ; 
 } 
 + return fileMessages ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index a9d35c9 . . b50f78b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 26 , 8 + 26 , 10 @ @ import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 + import static org . mockito . Mockito . when ; 
 
 import java . io . File ; 
 + import java . io . IOError ; 
 import java . io . IOException ; 
 import java . io . UnsupportedEncodingException ; 
 import java . nio . file . InvalidPathException ; 
 @ @ - 42 , 7 + 44 , 9 @ @ import org . junit . Assume ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . TemporaryFolder ; 
 + import org . powermock . api . mockito . PowerMockito ; 
 
 + import com . google . common . collect . Lists ; 
 import com . google . common . collect . Sets ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 @ @ - 492 , 4 + 496 , 31 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 / / one more time , but cache does not exist 
 verify ( checker , pathToEmptyFile , pathToEmptyFile , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testCatchErrorInProcessFilesMethod ( ) throws Exception { 
 + / / The idea of the test is to satisfy coverage rate . 
 + / / An Error indicates serious problems that a reasonable application should not try to 
 + / / catch , but due to issue https : / / github . com / checkstyle / checkstyle / issues / 2285 
 + / / we catch errors in ' processFiles ' method . Most such errors are abnormal conditions , 
 + / / that is why we use PowerMockito to reproduse them . 
 + final File mock = PowerMockito . mock ( File . class ) ; 
 + / / Assume that I / O error is happened when we try to invoke ' lastModified ( ) ' method . 
 + final String errorMessage = " Java Virtual Machine is broken " 
 + + " or has run out of resources necessary for it to continue operating . " ; 
 + final Error expectedError = new IOError ( new InternalError ( errorMessage ) ) ; 
 + when ( mock . lastModified ( ) ) . thenThrow ( expectedError ) ; 
 + final Checker checker = new Checker ( ) ; 
 + final List < File > filesToProcess = Lists . newArrayList ( ) ; 
 + filesToProcess . add ( mock ) ; 
 + try { 
 + checker . process ( filesToProcess ) ; 
 + fail ( " IOError is expected ! " ) ; 
 + } 
 + catch ( Error error ) { 
 + assertThat ( error . getCause ( ) , instanceOf ( IOError . class ) ) ; 
 + assertThat ( error . getCause ( ) . getCause ( ) , instanceOf ( InternalError . class ) ) ; 
 + assertEquals ( errorMessage , error . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 index dae6cd4 . . 348d5d0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 @ @ - 58 , 8 + 58 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 public void testAllChecksWithDefaultConfiguration ( ) throws Exception { 
 
 final Set < Class < ? > > checkstyleChecks = getCheckstyleChecks ( ) ; 
 - final String inputFilePath = " src / test / resources - noncompilable / " 
 - + " com / puppycrawl / tools / checkstyle / InputDefaultConfig . java " ; 
 + final String inputFilePath = getNonCompilablePath ( " InputDefaultConfig . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 for ( Class < ? > check : checkstyleChecks ) { 
 @ @ - 69 , 8 + 68 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 / / Checks which have Check as a parent . 
 if ( check . equals ( ImportControlCheck . class ) ) { 
 / / ImportControlCheck must have the import control configuration file to avoid violation . 
 - checkConfig . addAttribute ( " file " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ complete . xml " ) ; 
 + checkConfig . addAttribute ( " file " , getPath ( " import - control _ complete . xml " ) ) ; 
 } 
 checker = createChecker ( checkConfig ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index cfa3873 . . c30edb7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 44 , 6 + 44 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 * @ author lkuehne 
 * / 
 public class ConfigurationLoaderTest { 
 + private static String getConfigPath ( String filename ) { 
 + return " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + filename ; 
 + } 
 
 private static Configuration loadConfiguration ( String name ) 
 throws CheckstyleException { 
 @ @ - 52 , 8 + 55 , 7 @ @ public class ConfigurationLoaderTest { 
 
 private static Configuration loadConfiguration ( 
 String name , Properties props ) throws CheckstyleException { 
 - final String fName = 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + name ; 
 + final String fName = getConfigPath ( name ) ; 
 
 return ConfigurationLoader . loadConfiguration ( 
 fName , new PropertiesExpander ( props ) ) ; 
 @ @ - 66 , 7 + 68 , 7 @ @ public class ConfigurationLoaderTest { 
 
 / / load config that ' s only found in the classpath 
 final DefaultConfiguration config = ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / checkstyle _ checks . xml " , new PropertiesExpander ( props ) ) ; 
 + getConfigPath ( " checkstyle _ checks . xml " ) , new PropertiesExpander ( props ) ) ; 
 
 / / verify the root , and property substitution 
 final Properties attributes = new Properties ( ) ; 
 @ @ - 334 , 8 + 336 , 7 @ @ public class ConfigurationLoaderTest { 
 final Properties props = new Properties ( ) ; 
 props . setProperty ( " checkstyle . basedir " , " basedir " ) ; 
 
 - final File file = new File ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / subdir / including . xml " ) ; 
 + final File file = new File ( getConfigPath ( " subdir / including . xml " ) ) ; 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 file . toURI ( ) . toString ( ) , new PropertiesExpander ( props ) ) ; 
 @ @ - 403 , 8 + 404 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " , 
 + getConfigPath ( " config _ with _ ignore . xml " ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 416 , 8 + 416 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( new InputSource ( 
 - new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " ) . toURI ( ) . toString ( ) ) , 
 + new File ( getConfigPath ( " config _ with _ ignore . xml " ) ) . toURI ( ) . toString ( ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 429 , 8 + 428 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ checker _ ignore . xml " , 
 + getConfigPath ( " config _ with _ checker _ ignore . xml " ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 460 , 9 + 458 , 7 @ @ public class ConfigurationLoaderTest { 
 @ SuppressWarnings ( " deprecation " ) 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - new FileInputStream ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " ) , 
 + new FileInputStream ( getConfigPath ( " config _ with _ ignore . xml " ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 806a1c1 . . 3b7bf29 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 55 , 6 + 55 , 14 @ @ public class MainTest { 
 @ Rule 
 public final SystemOutRule systemOut = new SystemOutRule ( ) . enableLog ( ) . mute ( ) ; 
 
 + private static String getPath ( String filename ) { 
 + return " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ; 
 + } 
 + 
 + private static String getFilePath ( String filename ) throws IOException { 
 + return new File ( getPath ( filename ) ) . getCanonicalPath ( ) ; 
 + } 
 + 
 @ Test 
 public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { 
 assertUtilsClassHasPrivateConstructor ( Main . class ) ; 
 @ @ - 110 , 7 + 118 , 7 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 143 , 7 + 151 , 7 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 158 , 7 + 166 , 7 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , " / google _ checks . xml " , " - f " , " xmlp " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 198 , 8 + 206 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - non - existing - classname . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - non - existing - classname . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 213 , 8 + 221 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 223 , 10 + 231 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 final ResourceBundle compilationProperties = 
 ResourceBundle . getBundle ( " checkstylecompilation " ) ; 
 String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; 
 @ @ - 239 , 9 + 244 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 255 , 9 + 260 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 266 , 10 + 271 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : " 
 + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 @ @ - 280 , 8 + 282 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname2 . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 291 , 10 + 293 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : error : " 
 + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 @ @ - 306 , 8 + 305 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 - error . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " config - classname2 - error . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 321 , 10 + 320 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , temporaryFolder . getRoot ( ) + " / output . txt " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 338 , 10 + 337 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 359 , 10 + 358 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 384 , 10 + 383 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 402 , 10 + 401 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - classname - prop . xml " , 
 - " - p " , " src / test / resources / com / puppycrawl / tools / checkstyle / mycheckstyle . properties " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , 
 + " - p " , getPath ( " mycheckstyle . properties " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 420 , 10 + 418 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - classname - prop . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , 
 " - p " , " nonexisting . properties " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 443 , 9 + 440 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - Incorrect . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - Incorrect . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 522 , 10 + 518 , 7 @ @ public class MainTest { 
 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; 
 StringBuilder sb = new StringBuilder ( ) ; 
 sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; 
 String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; 
 @ @ - 541 , 8 + 534 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; 
 + Main . main ( " - c " , getPath ( " config - filelength . xml " ) , 
 + getPath ( " checks / metrics " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml 
 new file mode 100644 
 index 0000000 . . 3bdfcad 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + < ? xml version = " 1 . 0 " ? > 
 + < ! DOCTYPE import - control PUBLIC 
 + " - / / Puppy Crawl / / DTD Import Control 1 . 0 / / EN " 
 + " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 0 . dtd " > 
 + 
 + < import - control pkg = " com " > 
 + < allow class = " some . class " / > 
 + < disallow class = " another . class " local - only = " true " / > 
 + < allow pkg = " some . pkg " / > 
 + < disallow pkg = " another . pkg " local - only = " true " / > 
 + < disallow pkg = " and . another . pkg " exact - match = " true " / > 
 + < subpackage name = " puppycrawl " > 
 + < disallow pkg = " some . pkg " / > 
 + < disallow class = " some . class " / > 
 + < / subpackage > 
 + < / import - control > 
 \ No newline at end of file
