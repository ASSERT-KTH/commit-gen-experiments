BLEU SCORE: 0.05633171091207463

TEST MSG: infra : swich appveyor to definig whole task through matrix
GENERATED MSG: infra : Add - e switch to display stack trace of the errors in AppVeyor

TEST DIFF (one line): diff - - git a / appveyor . yml b / appveyor . yml <nl> index 0a29fc9 . . da5f4e7 100644 <nl> - - - a / appveyor . yml <nl> + + + b / appveyor . yml <nl> @ @ - 32 , 16 + 32 , 23 @ @ matrix : <nl> <nl> environment : <nl> matrix : <nl> - # - JAVA _ HOME : C : \ Program Files \ Java \ jdk1 . 7 . 0 <nl> - # checkstyle <nl> + # checkstyle and sevntu . checkstyle <nl> - JAVA _ HOME : C : \ Program Files \ Java \ jdk1 . 8 . 0 <nl> - CMD _ ARGS : verify - DskipTests - DskipITs - Dpmd . skip = true - Dfindbugs . skip = true - Dcobertura . skip = true - e <nl> + CMD : mvn - e verify - DskipTests - DskipITs - Dpmd . skip = true - Dfindbugs . skip = true - Dcobertura . skip = true <nl> # verify without checkstyle <nl> - JAVA _ HOME : C : \ Program Files \ Java \ jdk1 . 8 . 0 <nl> - CMD _ ARGS : verify - Dcheckstyle . ant . skip = true - e <nl> + CMD : mvn - e verify - Dcheckstyle . ant . skip = true <nl> # site , without verify <nl> - JAVA _ HOME : C : \ Program Files \ Java \ jdk1 . 8 . 0 <nl> - CMD _ ARGS : site - Dlinkcheck . skip = true - Dmaven . javadoc . skip = true - DskipTests - DskipITs - Dcobertura . skip = true - Dpmd . skip = true - Dfindbugs . skip = true - Dcheckstyle . ant . skip = true - e <nl> + CMD : mvn - e site - Dlinkcheck . skip = true - Dmaven . javadoc . skip = true - DskipTests - DskipITs - Dcobertura . skip = true - Dpmd . skip = true - Dfindbugs . skip = true - Dcheckstyle . ant . skip = true <nl> <nl> build _ script : <nl> - - mvn clean % CMD _ ARGS % <nl> + - ps : $ PSVersionTable <nl> + - ps : $ cmdline = get - content env : CMD <nl> + - ps : $ cmdline = " try { ` $ ErrorActionPreference = ' Stop ' ; $ ( $ cmdline ) ; if ( ` $ ? ) { } else { Exit 1 } } catch { } " <nl> + - ps : $ cmdline = $ cmdline . replace ( ' - D ' , ' ` - D ' ) <nl> + # We can not use Invoke - Expression as ANTLR write all in error log and error log is highlighted in Appveyor as RED - too scary <nl> + # - ps : Invoke - Expression $ cmdline - ErrorAction SilentlyContinue <nl> + - ps : $ cmdline | Out - File command . ps1 <nl> + - ps : get - content command . ps1 <nl> + - ps : " & . \ \ command . ps1 "
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> index 49acc5a . . 1397236 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> @ @ - 19 , 15 + 19 , 24 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> + import java . io . File ; <nl> import java . io . IOException ; <nl> import java . lang . reflect . Modifier ; <nl> import java . util . Arrays ; <nl> import java . util . HashSet ; <nl> import java . util . Set ; <nl> <nl> + import javax . xml . parsers . DocumentBuilder ; <nl> + import javax . xml . parsers . DocumentBuilderFactory ; <nl> + import javax . xml . parsers . ParserConfigurationException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> + import org . w3c . dom . Document ; <nl> + import org . w3c . dom . Element ; <nl> + import org . w3c . dom . Node ; <nl> + import org . w3c . dom . NodeList ; <nl> <nl> import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . reflect . ClassPath ; <nl> @ @ - 130 , 6 + 139 , 22 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> } <nl> } <nl> <nl> + @ Test <nl> + public void testAllChecksAreReferencedInConfigFile ( ) throws Exception { <nl> + final String configFilePath = " config / checkstyle _ checks . xml " ; <nl> + final Set < Class < ? > > checksFromClassPath = getCheckstyleChecks ( ) ; <nl> + final Set < String > checksReferencedInConfig = getCheckStyleChecksReferencedInConfig ( configFilePath ) ; <nl> + final Set < String > checksNames = getChecksNames ( checksFromClassPath ) ; <nl> + <nl> + for ( String check : checksNames ) { <nl> + if ( ! checksReferencedInConfig . contains ( check ) ) { <nl> + String errorMessage = String . format ( " % s is not refferenced in checkstyle _ checks . xml " , check ) ; <nl> + Assert . fail ( errorMessage ) ; <nl> + } <nl> + } <nl> + <nl> + } <nl> + <nl> / * * <nl> * Gets the checkstyle ' s non abstract checks . <nl> * @ return the set of checkstyle ' s non abstract check classes . <nl> @ @ - 171 , 4 + 196 , 63 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> } <nl> return true ; <nl> } <nl> + <nl> + / * * <nl> + * Gets a set of names of checkstyle ' s checks which are referenced in checkstyle _ checks . xml . <nl> + * @ param configFilePath file path of checkstyle _ checks . xml . <nl> + * @ return names of checkstyle ' s checks which are referenced in checkstyle _ checks . xml . <nl> + * @ throws ParserConfigurationException if a DocumentBuilder cannot be created which satisfies the configuration requested . <nl> + * @ throws IOException if any IO errors occur . <nl> + * @ throws SAXException if any parse errors occur . <nl> + * / <nl> + private static Set < String > getCheckStyleChecksReferencedInConfig ( String configFilePath ) <nl> + throws ParserConfigurationException , IOException , org . xml . sax . SAXException { <nl> + <nl> + final DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; <nl> + <nl> + / / Validations of XML file make parsing too slow , that is why we disable all validations . <nl> + factory . setNamespaceAware ( false ) ; <nl> + factory . setValidating ( false ) ; <nl> + factory . setFeature ( " http : / / xml . org / sax / features / namespaces " , false ) ; <nl> + factory . setFeature ( " http : / / xml . org / sax / features / validation " , false ) ; <nl> + factory . setFeature ( " http : / / apache . org / xml / features / nonvalidating / load - dtd - grammar " , false ) ; <nl> + factory . setFeature ( " http : / / apache . org / xml / features / nonvalidating / load - external - dtd " , false ) ; <nl> + <nl> + final DocumentBuilder builder = factory . newDocumentBuilder ( ) ; <nl> + final Document document = builder . parse ( new File ( configFilePath ) ) ; <nl> + <nl> + / / optional , but recommended <nl> + / / FYI : http : / / stackoverflow . com / questions / 13786607 / normalization - in - dom - parsing - with - java - how - does - it - work <nl> + document . getDocumentElement ( ) . normalize ( ) ; <nl> + <nl> + final NodeList nodeList = document . getElementsByTagName ( " module " ) ; <nl> + <nl> + Set < String > checksReferencedInCheckstyleChecksXML = new HashSet < > ( ) ; <nl> + for ( int i = 0 ; i < nodeList . getLength ( ) ; i + + ) { <nl> + final Node currentNode = nodeList . item ( i ) ; <nl> + if ( currentNode . getNodeType ( ) = = Node . ELEMENT _ NODE ) { <nl> + final Element module = ( Element ) currentNode ; <nl> + final String checkName = module . getAttribute ( " name " ) ; <nl> + if ( ! " Checker " . equals ( checkName ) <nl> + & & ! " TreeWalker " . equals ( checkName ) <nl> + & & ! " SuppressionFilter " . equals ( checkName ) ) { <nl> + checksReferencedInCheckstyleChecksXML . add ( checkName ) ; <nl> + } <nl> + } <nl> + } <nl> + return checksReferencedInCheckstyleChecksXML ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets checks names from a set of checks which are Class instances . <nl> + * @ param checks are Class instances . <nl> + * @ return a set of checks names . <nl> + * / <nl> + private static Set < String > getChecksNames ( Set < Class < ? > > checks ) { <nl> + final Set < String > checksNames = new HashSet < > ( ) ; <nl> + for ( Class < ? > check : checks ) { <nl> + checksNames . add ( check . getSimpleName ( ) . replace ( " Check " , " " ) ) ; <nl> + } <nl> + return checksNames ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / appveyor . yml b / appveyor . yml 
 index 0a29fc9 . . da5f4e7 100644 
 - - - a / appveyor . yml 
 + + + b / appveyor . yml 
 @ @ - 32 , 16 + 32 , 23 @ @ matrix : 
 
 environment : 
 matrix : 
 - # - JAVA _ HOME : C : \ Program Files \ Java \ jdk1 . 7 . 0 
 - # checkstyle 
 + # checkstyle and sevntu . checkstyle 
 - JAVA _ HOME : C : \ Program Files \ Java \ jdk1 . 8 . 0 
 - CMD _ ARGS : verify - DskipTests - DskipITs - Dpmd . skip = true - Dfindbugs . skip = true - Dcobertura . skip = true - e 
 + CMD : mvn - e verify - DskipTests - DskipITs - Dpmd . skip = true - Dfindbugs . skip = true - Dcobertura . skip = true 
 # verify without checkstyle 
 - JAVA _ HOME : C : \ Program Files \ Java \ jdk1 . 8 . 0 
 - CMD _ ARGS : verify - Dcheckstyle . ant . skip = true - e 
 + CMD : mvn - e verify - Dcheckstyle . ant . skip = true 
 # site , without verify 
 - JAVA _ HOME : C : \ Program Files \ Java \ jdk1 . 8 . 0 
 - CMD _ ARGS : site - Dlinkcheck . skip = true - Dmaven . javadoc . skip = true - DskipTests - DskipITs - Dcobertura . skip = true - Dpmd . skip = true - Dfindbugs . skip = true - Dcheckstyle . ant . skip = true - e 
 + CMD : mvn - e site - Dlinkcheck . skip = true - Dmaven . javadoc . skip = true - DskipTests - DskipITs - Dcobertura . skip = true - Dpmd . skip = true - Dfindbugs . skip = true - Dcheckstyle . ant . skip = true 
 
 build _ script : 
 - - mvn clean % CMD _ ARGS % 
 + - ps : $ PSVersionTable 
 + - ps : $ cmdline = get - content env : CMD 
 + - ps : $ cmdline = " try { ` $ ErrorActionPreference = ' Stop ' ; $ ( $ cmdline ) ; if ( ` $ ? ) { } else { Exit 1 } } catch { } " 
 + - ps : $ cmdline = $ cmdline . replace ( ' - D ' , ' ` - D ' ) 
 + # We can not use Invoke - Expression as ANTLR write all in error log and error log is highlighted in Appveyor as RED - too scary 
 + # - ps : Invoke - Expression $ cmdline - ErrorAction SilentlyContinue 
 + - ps : $ cmdline | Out - File command . ps1 
 + - ps : get - content command . ps1 
 + - ps : " & . \ \ command . ps1 "

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 index 49acc5a . . 1397236 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 @ @ - 19 , 15 + 19 , 24 @ @ 
 
 package com . puppycrawl . tools . checkstyle ; 
 
 + import java . io . File ; 
 import java . io . IOException ; 
 import java . lang . reflect . Modifier ; 
 import java . util . Arrays ; 
 import java . util . HashSet ; 
 import java . util . Set ; 
 
 + import javax . xml . parsers . DocumentBuilder ; 
 + import javax . xml . parsers . DocumentBuilderFactory ; 
 + import javax . xml . parsers . ParserConfigurationException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 + import org . w3c . dom . Document ; 
 + import org . w3c . dom . Element ; 
 + import org . w3c . dom . Node ; 
 + import org . w3c . dom . NodeList ; 
 
 import com . google . common . collect . ImmutableSet ; 
 import com . google . common . reflect . ClassPath ; 
 @ @ - 130 , 6 + 139 , 22 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 } 
 } 
 
 + @ Test 
 + public void testAllChecksAreReferencedInConfigFile ( ) throws Exception { 
 + final String configFilePath = " config / checkstyle _ checks . xml " ; 
 + final Set < Class < ? > > checksFromClassPath = getCheckstyleChecks ( ) ; 
 + final Set < String > checksReferencedInConfig = getCheckStyleChecksReferencedInConfig ( configFilePath ) ; 
 + final Set < String > checksNames = getChecksNames ( checksFromClassPath ) ; 
 + 
 + for ( String check : checksNames ) { 
 + if ( ! checksReferencedInConfig . contains ( check ) ) { 
 + String errorMessage = String . format ( " % s is not refferenced in checkstyle _ checks . xml " , check ) ; 
 + Assert . fail ( errorMessage ) ; 
 + } 
 + } 
 + 
 + } 
 + 
 / * * 
 * Gets the checkstyle ' s non abstract checks . 
 * @ return the set of checkstyle ' s non abstract check classes . 
 @ @ - 171 , 4 + 196 , 63 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 } 
 return true ; 
 } 
 + 
 + / * * 
 + * Gets a set of names of checkstyle ' s checks which are referenced in checkstyle _ checks . xml . 
 + * @ param configFilePath file path of checkstyle _ checks . xml . 
 + * @ return names of checkstyle ' s checks which are referenced in checkstyle _ checks . xml . 
 + * @ throws ParserConfigurationException if a DocumentBuilder cannot be created which satisfies the configuration requested . 
 + * @ throws IOException if any IO errors occur . 
 + * @ throws SAXException if any parse errors occur . 
 + * / 
 + private static Set < String > getCheckStyleChecksReferencedInConfig ( String configFilePath ) 
 + throws ParserConfigurationException , IOException , org . xml . sax . SAXException { 
 + 
 + final DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; 
 + 
 + / / Validations of XML file make parsing too slow , that is why we disable all validations . 
 + factory . setNamespaceAware ( false ) ; 
 + factory . setValidating ( false ) ; 
 + factory . setFeature ( " http : / / xml . org / sax / features / namespaces " , false ) ; 
 + factory . setFeature ( " http : / / xml . org / sax / features / validation " , false ) ; 
 + factory . setFeature ( " http : / / apache . org / xml / features / nonvalidating / load - dtd - grammar " , false ) ; 
 + factory . setFeature ( " http : / / apache . org / xml / features / nonvalidating / load - external - dtd " , false ) ; 
 + 
 + final DocumentBuilder builder = factory . newDocumentBuilder ( ) ; 
 + final Document document = builder . parse ( new File ( configFilePath ) ) ; 
 + 
 + / / optional , but recommended 
 + / / FYI : http : / / stackoverflow . com / questions / 13786607 / normalization - in - dom - parsing - with - java - how - does - it - work 
 + document . getDocumentElement ( ) . normalize ( ) ; 
 + 
 + final NodeList nodeList = document . getElementsByTagName ( " module " ) ; 
 + 
 + Set < String > checksReferencedInCheckstyleChecksXML = new HashSet < > ( ) ; 
 + for ( int i = 0 ; i < nodeList . getLength ( ) ; i + + ) { 
 + final Node currentNode = nodeList . item ( i ) ; 
 + if ( currentNode . getNodeType ( ) = = Node . ELEMENT _ NODE ) { 
 + final Element module = ( Element ) currentNode ; 
 + final String checkName = module . getAttribute ( " name " ) ; 
 + if ( ! " Checker " . equals ( checkName ) 
 + & & ! " TreeWalker " . equals ( checkName ) 
 + & & ! " SuppressionFilter " . equals ( checkName ) ) { 
 + checksReferencedInCheckstyleChecksXML . add ( checkName ) ; 
 + } 
 + } 
 + } 
 + return checksReferencedInCheckstyleChecksXML ; 
 + } 
 + 
 + / * * 
 + * Gets checks names from a set of checks which are Class instances . 
 + * @ param checks are Class instances . 
 + * @ return a set of checks names . 
 + * / 
 + private static Set < String > getChecksNames ( Set < Class < ? > > checks ) { 
 + final Set < String > checksNames = new HashSet < > ( ) ; 
 + for ( Class < ? > check : checks ) { 
 + checksNames . add ( check . getSimpleName ( ) . replace ( " Check " , " " ) ) ; 
 + } 
 + return checksNames ; 
 + } 
 }
