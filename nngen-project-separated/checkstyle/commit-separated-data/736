BLEU SCORE: 0.027196652721749117

TEST MSG: Issue # 3110 : Modified DefaultLogger to remove hardcoded messages and to support i18n for the messages
GENERATED MSG: Apply parts of patch # 1952556 fixing some FindBugs bugs . Thanks to Travis Schneeberger

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> index bd4596d . . e806827 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . nio . charset . StandardCharsets ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditListener ; <nl> import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; <nl> + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; <nl> <nl> / * * <nl> @ @ - 42 , 6 + 43 , 22 @ @ import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; <nl> * / <nl> public class DefaultLogger extends AutomaticBean implements AuditListener { <nl> <nl> + / * * <nl> + * A key pointing to the add exception <nl> + * message in the " messages . properties " file . <nl> + * / <nl> + public static final String ADD _ EXCEPTION _ MESSAGE = " DefaultLogger . addException " ; <nl> + / * * <nl> + * A key pointing to the started audit <nl> + * message in the " messages . properties " file . <nl> + * / <nl> + public static final String AUDIT _ STARTED _ MESSAGE = " DefaultLogger . auditStarted " ; <nl> + / * * <nl> + * A key pointing to the finished audit <nl> + * message in the " messages . properties " file . <nl> + * / <nl> + public static final String AUDIT _ FINISHED _ MESSAGE = " DefaultLogger . auditFinished " ; <nl> + <nl> / * * Where to write info messages . * * / <nl> private final PrintWriter infoWriter ; <nl> / * * Close info stream after use . * / <nl> @ @ - 127 , 20 + 144 , 30 @ @ public class DefaultLogger extends AutomaticBean implements AuditListener { <nl> @ Override <nl> public void addException ( AuditEvent event , Throwable throwable ) { <nl> synchronized ( errorWriter ) { <nl> - errorWriter . println ( " Error auditing " + event . getFileName ( ) ) ; <nl> + final LocalizedMessage addExceptionMessage = new LocalizedMessage ( 0 , <nl> + Definitions . CHECKSTYLE _ BUNDLE , ADD _ EXCEPTION _ MESSAGE , <nl> + new String [ ] { event . getFileName ( ) } , null , <nl> + LocalizedMessage . class , null ) ; <nl> + errorWriter . println ( addExceptionMessage . getMessage ( ) ) ; <nl> throwable . printStackTrace ( errorWriter ) ; <nl> } <nl> } <nl> <nl> @ Override <nl> public void auditStarted ( AuditEvent event ) { <nl> - infoWriter . println ( " Starting audit . . . " ) ; <nl> + final LocalizedMessage auditStartMessage = new LocalizedMessage ( 0 , <nl> + Definitions . CHECKSTYLE _ BUNDLE , AUDIT _ STARTED _ MESSAGE , null , null , <nl> + LocalizedMessage . class , null ) ; <nl> + infoWriter . println ( auditStartMessage . getMessage ( ) ) ; <nl> infoWriter . flush ( ) ; <nl> } <nl> <nl> @ Override <nl> public void auditFinished ( AuditEvent event ) { <nl> - infoWriter . println ( " Audit done . " ) ; <nl> + final LocalizedMessage auditFinishMessage = new LocalizedMessage ( 0 , <nl> + Definitions . CHECKSTYLE _ BUNDLE , AUDIT _ FINISHED _ MESSAGE , null , null , <nl> + LocalizedMessage . class , null ) ; <nl> + infoWriter . println ( auditFinishMessage . getMessage ( ) ) ; <nl> closeStreams ( ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index 43f4652 . . d1ac18d 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 228 , 7 + 228 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> mAllowMissingPropertyJavadoc = aFlag ; <nl> } <nl> <nl> - / * * { @ inheritDoc } * / <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> { <nl> @ @ - 239 , 7 + 238 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> } ; <nl> } <nl> <nl> - / * * { @ inheritDoc } * / <nl> @ Override <nl> public int [ ] getAcceptableTokens ( ) <nl> { <nl> @ @ - 248 , 11 + 246 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> } ; <nl> } <nl> <nl> - / * * <nl> - * Checks Javadoc comments for a method or constructor . <nl> - * <nl> - * @ param aAST the tree node for the method or constructor . <nl> - * / <nl> @ Override <nl> protected final void processAST ( DetailAST aAST ) <nl> { <nl> @ @ - 272 , 11 + 265 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> } <nl> } <nl> <nl> - / * * <nl> - * Logs error if unable to load class information . <nl> - * <nl> - * @ param aIdent class name for which we can no load class . <nl> - * / <nl> @ Override <nl> protected final void logLoadError ( Token aIdent ) <nl> { <nl> @ @ - 297 , 7 + 285 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> * / <nl> protected boolean isMissingJavadocAllowed ( final DetailAST aAST ) <nl> { <nl> - return mAllowMissingJavadoc <nl> + return mAllowMissingJavadoc | | isOverrideMethod ( aAST ) <nl> | | ( mAllowMissingPropertyJavadoc <nl> & & ( isSetterMethod ( aAST ) | | isGetterMethod ( aAST ) ) ) ; <nl> } <nl> @ @ - 881 , 6 + 869 , 38 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> return true ; <nl> } <nl> <nl> + / * * <nl> + * Returns is a method has the " @ Override " annotation . <nl> + * @ param aAST the AST to check with <nl> + * @ return whether the AST represents a method that has the annotation . <nl> + * / <nl> + private boolean isOverrideMethod ( DetailAST aAST ) <nl> + { <nl> + / / Need it to be a method , cannot have an override on anything else . <nl> + / / Must also have MODIFIERS token to hold the @ Override <nl> + if ( ( TokenTypes . METHOD _ DEF ! = aAST . getType ( ) ) <nl> + | | ( TokenTypes . MODIFIERS ! = aAST . getFirstChild ( ) . getType ( ) ) ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + / / Now loop over all nodes while they are annotations looking for <nl> + / / an " @ Override " . <nl> + DetailAST node = ( DetailAST ) aAST . getFirstChild ( ) . getFirstChild ( ) ; <nl> + while ( ( null ! = node ) & & ( TokenTypes . ANNOTATION = = node . getType ( ) ) ) { <nl> + if ( ( node . getFirstChild ( ) . getType ( ) = = TokenTypes . AT ) <nl> + & & ( node . getFirstChild ( ) . getNextSibling ( ) . getType ( ) <nl> + = = TokenTypes . IDENT ) <nl> + & & ( " Override " . equals ( <nl> + node . getFirstChild ( ) . getNextSibling ( ) . getText ( ) ) ) ) <nl> + { <nl> + return true ; <nl> + } <nl> + node = ( DetailAST ) node . getNextSibling ( ) ; <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> / * * Stores useful information about declared exception . * / <nl> private class ExceptionInfo <nl> {

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 index bd4596d . . e806827 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . nio . charset . StandardCharsets ; 
 import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 import com . puppycrawl . tools . checkstyle . api . AuditListener ; 
 import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; 
 + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; 
 
 / * * 
 @ @ - 42 , 6 + 43 , 22 @ @ import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; 
 * / 
 public class DefaultLogger extends AutomaticBean implements AuditListener { 
 
 + / * * 
 + * A key pointing to the add exception 
 + * message in the " messages . properties " file . 
 + * / 
 + public static final String ADD _ EXCEPTION _ MESSAGE = " DefaultLogger . addException " ; 
 + / * * 
 + * A key pointing to the started audit 
 + * message in the " messages . properties " file . 
 + * / 
 + public static final String AUDIT _ STARTED _ MESSAGE = " DefaultLogger . auditStarted " ; 
 + / * * 
 + * A key pointing to the finished audit 
 + * message in the " messages . properties " file . 
 + * / 
 + public static final String AUDIT _ FINISHED _ MESSAGE = " DefaultLogger . auditFinished " ; 
 + 
 / * * Where to write info messages . * * / 
 private final PrintWriter infoWriter ; 
 / * * Close info stream after use . * / 
 @ @ - 127 , 20 + 144 , 30 @ @ public class DefaultLogger extends AutomaticBean implements AuditListener { 
 @ Override 
 public void addException ( AuditEvent event , Throwable throwable ) { 
 synchronized ( errorWriter ) { 
 - errorWriter . println ( " Error auditing " + event . getFileName ( ) ) ; 
 + final LocalizedMessage addExceptionMessage = new LocalizedMessage ( 0 , 
 + Definitions . CHECKSTYLE _ BUNDLE , ADD _ EXCEPTION _ MESSAGE , 
 + new String [ ] { event . getFileName ( ) } , null , 
 + LocalizedMessage . class , null ) ; 
 + errorWriter . println ( addExceptionMessage . getMessage ( ) ) ; 
 throwable . printStackTrace ( errorWriter ) ; 
 } 
 } 
 
 @ Override 
 public void auditStarted ( AuditEvent event ) { 
 - infoWriter . println ( " Starting audit . . . " ) ; 
 + final LocalizedMessage auditStartMessage = new LocalizedMessage ( 0 , 
 + Definitions . CHECKSTYLE _ BUNDLE , AUDIT _ STARTED _ MESSAGE , null , null , 
 + LocalizedMessage . class , null ) ; 
 + infoWriter . println ( auditStartMessage . getMessage ( ) ) ; 
 infoWriter . flush ( ) ; 
 } 
 
 @ Override 
 public void auditFinished ( AuditEvent event ) { 
 - infoWriter . println ( " Audit done . " ) ; 
 + final LocalizedMessage auditFinishMessage = new LocalizedMessage ( 0 , 
 + Definitions . CHECKSTYLE _ BUNDLE , AUDIT _ FINISHED _ MESSAGE , null , null , 
 + LocalizedMessage . class , null ) ; 
 + infoWriter . println ( auditFinishMessage . getMessage ( ) ) ; 
 closeStreams ( ) ; 
 } 


NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index 43f4652 . . d1ac18d 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 228 , 7 + 228 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 mAllowMissingPropertyJavadoc = aFlag ; 
 } 
 
 - / * * { @ inheritDoc } * / 
 @ Override 
 public int [ ] getDefaultTokens ( ) 
 { 
 @ @ - 239 , 7 + 238 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 } ; 
 } 
 
 - / * * { @ inheritDoc } * / 
 @ Override 
 public int [ ] getAcceptableTokens ( ) 
 { 
 @ @ - 248 , 11 + 246 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 } ; 
 } 
 
 - / * * 
 - * Checks Javadoc comments for a method or constructor . 
 - * 
 - * @ param aAST the tree node for the method or constructor . 
 - * / 
 @ Override 
 protected final void processAST ( DetailAST aAST ) 
 { 
 @ @ - 272 , 11 + 265 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 } 
 } 
 
 - / * * 
 - * Logs error if unable to load class information . 
 - * 
 - * @ param aIdent class name for which we can no load class . 
 - * / 
 @ Override 
 protected final void logLoadError ( Token aIdent ) 
 { 
 @ @ - 297 , 7 + 285 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 * / 
 protected boolean isMissingJavadocAllowed ( final DetailAST aAST ) 
 { 
 - return mAllowMissingJavadoc 
 + return mAllowMissingJavadoc | | isOverrideMethod ( aAST ) 
 | | ( mAllowMissingPropertyJavadoc 
 & & ( isSetterMethod ( aAST ) | | isGetterMethod ( aAST ) ) ) ; 
 } 
 @ @ - 881 , 6 + 869 , 38 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 return true ; 
 } 
 
 + / * * 
 + * Returns is a method has the " @ Override " annotation . 
 + * @ param aAST the AST to check with 
 + * @ return whether the AST represents a method that has the annotation . 
 + * / 
 + private boolean isOverrideMethod ( DetailAST aAST ) 
 + { 
 + / / Need it to be a method , cannot have an override on anything else . 
 + / / Must also have MODIFIERS token to hold the @ Override 
 + if ( ( TokenTypes . METHOD _ DEF ! = aAST . getType ( ) ) 
 + | | ( TokenTypes . MODIFIERS ! = aAST . getFirstChild ( ) . getType ( ) ) ) 
 + { 
 + return false ; 
 + } 
 + 
 + / / Now loop over all nodes while they are annotations looking for 
 + / / an " @ Override " . 
 + DetailAST node = ( DetailAST ) aAST . getFirstChild ( ) . getFirstChild ( ) ; 
 + while ( ( null ! = node ) & & ( TokenTypes . ANNOTATION = = node . getType ( ) ) ) { 
 + if ( ( node . getFirstChild ( ) . getType ( ) = = TokenTypes . AT ) 
 + & & ( node . getFirstChild ( ) . getNextSibling ( ) . getType ( ) 
 + = = TokenTypes . IDENT ) 
 + & & ( " Override " . equals ( 
 + node . getFirstChild ( ) . getNextSibling ( ) . getText ( ) ) ) ) 
 + { 
 + return true ; 
 + } 
 + node = ( DetailAST ) node . getNextSibling ( ) ; 
 + } 
 + return false ; 
 + } 
 + 
 / * * Stores useful information about declared exception . * / 
 private class ExceptionInfo 
 {
