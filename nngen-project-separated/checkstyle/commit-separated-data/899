BLEU SCORE: 0.018738883683389617

TEST MSG: Issue # 3491 : DetailAst class unclear logic in addChild method
GENERATED MSG: fixed NPE

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> index 69330a4 . . 16b2013 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> @ @ - 152 , 11 + 152 , 11 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { <nl> public void addChild ( AST ast ) { <nl> clearBranchTokenTypes ( ) ; <nl> clearChildCountCache ( this ) ; <nl> - super . addChild ( ast ) ; <nl> if ( ast ! = null ) { <nl> ( ( DetailAST ) ast ) . setParent ( this ) ; <nl> - getFirstChild ( ) . setParent ( this ) ; <nl> + ( ( DetailAST ) ast ) . previousSibling = getLastChild ( ) ; <nl> } <nl> + super . addChild ( ast ) ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 38ce1f8 . . 6d3ce56 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 206 , 6 + 206 , 19 @ @ <nl> < / target > <nl> <nl> < ! - - runs the command line version on a file - - > <nl> + < target name = " run . simple " depends = " compile . tests " <nl> + description = " Runs the command line version on a file " > <nl> + < java classname = " com . puppycrawl . tools . checkstyle . Main " <nl> + fork = " yes " <nl> + dir = " . " <nl> + classpathref = " run . classpath " > <nl> + < sysproperty key = " checkstyle . allow . tabs " value = " yes " / > <nl> + < arg value = " docs / checkstyle _ checks . xml " / > <nl> + < arg value = " src / testinputs / com / puppycrawl / tools / checkstyle / InputSimple . java " / > <nl> + < / java > <nl> + < / target > <nl> + <nl> + < ! - - runs the command line version on a file - - > <nl> < target name = " run . checkstyle " depends = " compile . tests " <nl> description = " Runs the command line version on a file " > <nl> < java classname = " com . puppycrawl . tools . checkstyle . Main " <nl> diff - - git a / docs / checkstyle _ checks . xml b / docs / checkstyle _ checks . xml <nl> new file mode 100644 <nl> index 0000000 . . f2781aa <nl> - - - / dev / null <nl> + + + b / docs / checkstyle _ checks . xml <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + < ? xml version = " 1 . 0 " ? > <nl> + <nl> + < configuration > <nl> + < ! - - <nl> + < check classname = " visitor . checks . ModifierCheck " > <nl> + < set - property name = " order " value = " public , private , minus , negative " / > <nl> + < set - property name = " level " value = " doggy " / > <nl> + < tokens > MODIFIERS < / tokens > <nl> + < / check > <nl> + - - > <nl> + <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . AvoidStarImport " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . ConstantNameCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . ConstructorLengthCheck " / > <nl> + <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . EmptyBlockCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . EqualsHashCodeCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . FileLengthCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . GenericIllegalRegexpCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . HeaderCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . IllegalImportCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . IllegalInstantiationCheck " / > <nl> + <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . InnerAssignmentCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . JavadocTypeCheck " / > <nl> + <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . JavadocVariableCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . LineLengthCheck " / > <nl> + <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . LocalFinalVariableNameCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . LocalVariableNameCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . MemberNameCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . MethodLeftCurlyCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . MethodLengthCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . MethodNameCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . ModifierCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . NoWhiteSpaceAroundCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . OtherLeftCurlyCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . PackageNameCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . ParameterNameCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . ParameterNumberCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . ParenPadCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . PublicMemberNameCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . RedundantImportCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . RedundantModifierCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . RegexpHeaderCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . RightCurlyCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . SimplifyBooleanExpressionCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . SimplifyBooleanReturnCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . StaticVariableNameCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . TabCharacterCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . TypeLeftCurlyCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . TypeNameCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . UnusedImportsCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . UpperEllCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . VisibilityModifierCheck " / > <nl> + < check classname = " com . puppycrawl . tools . checkstyle . checks . WhitespaceAroundCheck " / > <nl> + <nl> + <nl> + <nl> + <nl> + < / configuration > <nl> \ No newline at end of file <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckConfiguration . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckConfiguration . java <nl> index 559a25f . . d7b48d0 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckConfiguration . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckConfiguration . java <nl> @ @ - 176 , 27 + 176 , 42 @ @ class CheckConfiguration <nl> * <nl> * @ param aLoader the < code > ClassLoader < / code > to create the instance with <nl> * @ return the created check <nl> - * @ throws ClassNotFoundException if an error occurs <nl> - * @ throws InstantiationException if an error occurs <nl> - * @ throws IllegalAccessException if an error occurs <nl> - * @ throws InvocationTargetException if an error occurs <nl> - * @ throws NoSuchMethodException if an error occurs <nl> + * @ throws CheckstyleException if an error occurs <nl> * / <nl> Check createInstance ( ClassLoader aLoader ) <nl> - throws ClassNotFoundException , InstantiationException , <nl> - IllegalAccessException , InvocationTargetException , <nl> - NoSuchMethodException <nl> + throws CheckstyleException <nl> { <nl> - final Class clazz = Class . forName ( mClassname , true , aLoader ) ; <nl> - final Check check = ( Check ) clazz . newInstance ( ) ; <nl> - / / TODO : need to set the properties <nl> - / / Loop setting the properties <nl> - final Iterator keyIt = mProperties . keySet ( ) . iterator ( ) ; <nl> - while ( keyIt . hasNext ( ) ) { <nl> - final String key = ( String ) keyIt . next ( ) ; <nl> - final String value = ( String ) mProperties . get ( key ) ; <nl> - BeanUtils . copyProperty ( check , key , value ) ; <nl> + try { <nl> + final Class clazz = Class . forName ( mClassname , true , aLoader ) ; <nl> + final Check check = ( Check ) clazz . newInstance ( ) ; <nl> + / / TODO : need to set the properties <nl> + / / Loop setting the properties <nl> + final Iterator keyIt = mProperties . keySet ( ) . iterator ( ) ; <nl> + while ( keyIt . hasNext ( ) ) { <nl> + final String key = ( String ) keyIt . next ( ) ; <nl> + final String value = ( String ) mProperties . get ( key ) ; <nl> + try { <nl> + BeanUtils . copyProperty ( check , key , value ) ; <nl> + } <nl> + catch ( InvocationTargetException e ) { <nl> + throw new CheckstyleException ( <nl> + " for check " + mClassname + " unable to set " + key <nl> + + " with " + value ) ; <nl> + } <nl> + } <nl> + return check ; <nl> + } <nl> + catch ( ClassNotFoundException e ) { <nl> + throw new CheckstyleException ( <nl> + " Unable to find class for " + mClassname ) ; <nl> + } <nl> + catch ( InstantiationException e ) { <nl> + throw new CheckstyleException ( <nl> + " Unable to instantiate " + mClassname ) ; <nl> + } <nl> + catch ( IllegalAccessException e ) { <nl> + throw new CheckstyleException ( <nl> + " Unable to instantiate " + mClassname ) ; <nl> } <nl> - return check ; <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> index c591acc . . 9f8729f 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 18 , 27 + 18 , 23 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> - import antlr . RecognitionException ; <nl> - import antlr . TokenStreamException ; <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> - import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; <nl> - import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> - import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> - import org . apache . regexp . RESyntaxException ; <nl> - import org . xml . sax . SAXException ; <nl> - <nl> - import javax . xml . parsers . ParserConfigurationException ; <nl> import java . io . File ; <nl> import java . io . FileNotFoundException ; <nl> import java . io . IOException ; <nl> import java . io . Reader ; <nl> - import java . lang . reflect . InvocationTargetException ; <nl> import java . util . ArrayList ; <nl> import java . util . HashSet ; <nl> import java . util . Iterator ; <nl> import java . util . Locale ; <nl> <nl> + import antlr . RecognitionException ; <nl> + import antlr . TokenStreamException ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> + import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; <nl> + import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> + <nl> / * * <nl> * This class provides the functionality to check a set of files . <nl> * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > <nl> @ @ - 158 , 16 + 154 , 10 @ @ public class Checker <nl> * <nl> * @ param aConfig the configuration to use <nl> * @ param aConfigs the configuation of the checks to use <nl> - * @ throws ClassNotFoundException if an error occurs <nl> - * @ throws InstantiationException if an error occurs <nl> - * @ throws IllegalAccessException if an error occurs <nl> - * @ throws InvocationTargetException if an error occurs <nl> - * @ throws NoSuchMethodException if an error occurs <nl> + * @ throws CheckstyleException if an error occurs <nl> * / <nl> public Checker ( Configuration aConfig , CheckConfiguration [ ] aConfigs ) <nl> - throws ClassNotFoundException , InstantiationException , <nl> - IllegalAccessException , InvocationTargetException , <nl> - NoSuchMethodException <nl> + throws CheckstyleException <nl> { <nl> mConfig = aConfig ; <nl> mCache = new PropertyCacheFile ( aConfig ) ; <nl> @ @ - 186 , 22 + 176 , 10 @ @ public class Checker <nl> / * * <nl> * Constructs the object . <nl> * @ param aConfig contains the configuration to check with <nl> - * @ throws RESyntaxException unable to create a regexp object <nl> - * @ throws IOException if an error occurs <nl> - * @ throws ParserConfigurationException if an error occurs <nl> - * @ throws SAXException if an error occurs <nl> - * @ throws ClassNotFoundException if an error occurs <nl> - * @ throws InstantiationException if an error occurs <nl> - * @ throws IllegalAccessException if an error occurs <nl> - * @ throws InvocationTargetException if an error occurs <nl> - * @ throws NoSuchMethodException if an error occurs <nl> + * @ throws CheckstyleException if an error occurs <nl> * / <nl> public Checker ( Configuration aConfig ) <nl> - throws RESyntaxException , IOException , <nl> - ParserConfigurationException , SAXException , <nl> - ClassNotFoundException , InstantiationException , <nl> - IllegalAccessException , InvocationTargetException , <nl> - NoSuchMethodException <nl> + throws CheckstyleException <nl> { <nl> / / TODO : delete this method eventually <nl> this ( aConfig , new CheckConfiguration [ 0 ] ) ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckstyleException . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckstyleException . java <nl> new file mode 100644 <nl> index 0000000 . . fdaa9b8 <nl> - - - / dev / null <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckstyleException . java <nl> @ @ - 0 , 0 + 1 , 38 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2002 Oliver Burn <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + / * * <nl> + * Represents an error condition within Checkstyle . <nl> + * <nl> + * @ author < a href = " mailto : checkstyle @ puppycrawl . com " > Oliver Burn < / a > <nl> + * @ version 1 . 0 <nl> + * / <nl> + class CheckstyleException extends Exception <nl> + { <nl> + / * * <nl> + * Creates a new < code > CheckstyleException < / code > instance . <nl> + * <nl> + * @ param aMessage a < code > String < / code > value <nl> + * / <nl> + CheckstyleException ( String aMessage ) <nl> + { <nl> + super ( aMessage ) ; <nl> + } <nl> + } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> index 276a490 . . 299ee66 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 28 , 6 + 28 , 10 @ @ import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . Properties ; <nl> <nl> + import javax . xml . parsers . ParserConfigurationException ; <nl> + <nl> + import org . xml . sax . SAXException ; <nl> + <nl> / * * <nl> * Wrapper command line program for the Checker . <nl> * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > <nl> @ @ - 48 , 7 + 52 , 8 @ @ public final class Main <nl> / / be brain dead about arguments parsing <nl> String format = " plain " ; <nl> String output = null ; <nl> - Properties properties = System . getProperties ( ) ; <nl> + Properties props = System . getProperties ( ) ; <nl> + final List foundFiles = new ArrayList ( ) ; <nl> final ArrayList files = new ArrayList ( ) ; <nl> for ( int i = 0 ; i < aArgs . length ; i + + ) { <nl> if ( " - f " . equals ( aArgs [ i ] ) ) { <nl> @ @ - 58 , 10 + 63 , 10 @ @ public final class Main <nl> output = aArgs [ + + i ] ; <nl> } <nl> else if ( " - r " . equals ( aArgs [ i ] ) ) { <nl> - traverse ( new File ( aArgs [ + + i ] ) , files ) ; <nl> + traverse ( new File ( aArgs [ + + i ] ) , foundFiles ) ; <nl> } <nl> else if ( " - p " . equals ( aArgs [ i ] ) ) { <nl> - properties = loadProperties ( new File ( aArgs [ + + i ] ) ) ; <nl> + props = loadProperties ( new File ( aArgs [ + + i ] ) ) ; <nl> } <nl> else { <nl> files . add ( aArgs [ i ] ) ; <nl> @ @ - 94 , 9 + 99 , 27 @ @ public final class Main <nl> usage ( ) ; <nl> } <nl> <nl> + / / Check that I have a config file <nl> + if ( files . isEmpty ( ) ) { <nl> + System . out . println ( " Need to specify a config file " ) ; <nl> + usage ( ) ; <nl> + } <nl> + <nl> + / / Load the config file <nl> + final String configFname = ( String ) files . remove ( 0 ) ; <nl> + CheckConfiguration [ ] checkConfigs = null ; <nl> + try { <nl> + checkConfigs = loadConfigs ( configFname ) ; <nl> + } <nl> + catch ( CheckstyleException e ) { <nl> + System . out . println ( " Error loading configuration file " ) ; <nl> + e . printStackTrace ( System . out ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + <nl> Checker c = null ; <nl> try { <nl> - c = new Checker ( new Configuration ( properties , System . out ) ) ; <nl> + c = new Checker ( new Configuration ( props , System . out ) , checkConfigs ) ; <nl> c . addListener ( listener ) ; <nl> } <nl> catch ( Exception e ) { <nl> @ @ - 106 , 17 + 129 , 48 @ @ public final class Main <nl> System . exit ( 1 ) ; <nl> } <nl> <nl> + files . addAll ( foundFiles ) ; <nl> final int numErrs = <nl> - c . process ( ( String [ ] ) files . toArray ( new String [ files . size ( ) ] ) ) ; <nl> + c . processNEW ( ( String [ ] ) files . toArray ( new String [ files . size ( ) ] ) ) ; <nl> c . destroy ( ) ; <nl> System . exit ( numErrs ) ; <nl> } <nl> <nl> + / * * <nl> + * Returns the check configurations in a specified file . <nl> + * @ param aConfigFname name of config file <nl> + * @ return the check configurations <nl> + * @ throws CheckstyleException if an error occurs <nl> + * / <nl> + private static CheckConfiguration [ ] loadConfigs ( String aConfigFname ) <nl> + throws CheckstyleException <nl> + { <nl> + System . out . println ( " Loading from " + aConfigFname ) ; <nl> + try { <nl> + final ConfigurationLoader loader = new ConfigurationLoader ( ) ; <nl> + loader . parseFile ( aConfigFname ) ; <nl> + return loader . getConfigs ( ) ; <nl> + } <nl> + catch ( FileNotFoundException e ) { <nl> + throw new CheckstyleException ( " unable to find " + aConfigFname ) ; <nl> + } <nl> + catch ( ParserConfigurationException e ) { <nl> + throw new CheckstyleException ( " unable to parse " + aConfigFname ) ; <nl> + } <nl> + catch ( SAXException e ) { <nl> + throw new CheckstyleException ( " unable to parse " + aConfigFname ) ; <nl> + } <nl> + catch ( IOException e ) { <nl> + throw new CheckstyleException ( " unable to read " + aConfigFname ) ; <nl> + } <nl> + } <nl> + <nl> / * * Prints the usage information . * * / <nl> private static void usage ( ) <nl> { <nl> System . out . println ( <nl> - " Usage : java " + Main . class . getName ( ) + " < options > < file > . . . . . . " ) ; <nl> + " Usage : java " + Main . class . getName ( ) <nl> + + " < options > config < file > . . . . . . " ) ; <nl> System . out . println ( " Options " ) ; <nl> System . out . println ( <nl> " \ t - f < format > \ tsets output format . ( plain | xml ) . " <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java b / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java <nl> index c535eef . . 98615fe 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java <nl> @ @ - 3 , 19 + 3 , 14 @ @ package com . puppycrawl . tools . checkstyle ; <nl> import java . io . ByteArrayInputStream ; <nl> import java . io . ByteArrayOutputStream ; <nl> import java . io . File ; <nl> - import java . io . FileNotFoundException ; <nl> import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> import java . io . LineNumberReader ; <nl> import java . io . OutputStream ; <nl> import java . io . PrintStream ; <nl> - import java . lang . reflect . InvocationTargetException ; <nl> import java . util . Properties ; <nl> - import javax . xml . parsers . ParserConfigurationException ; <nl> <nl> import junit . framework . TestCase ; <nl> - import org . apache . regexp . RESyntaxException ; <nl> - import org . xml . sax . SAXException ; <nl> <nl> public abstract class BaseCheckTestCase <nl> extends TestCase <nl> @ @ - 43 , 9 + 38 , 7 @ @ public abstract class BaseCheckTestCase <nl> } <nl> <nl> protected Checker createChecker ( CheckConfiguration aCheckConfig ) <nl> - throws RESyntaxException , FileNotFoundException , IOException , <nl> - ParserConfigurationException , SAXException , ClassNotFoundException , <nl> - InstantiationException , IllegalAccessException , InvocationTargetException , NoSuchMethodException <nl> + throws Exception <nl> { <nl> final Checker c = new Checker ( new Configuration ( mProps , mStream ) , <nl> new CheckConfiguration [ ] { aCheckConfig } ) ; <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 9f1cfc5 . . 147b307 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 1 , 22 + 1 , 17 @ @ <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> - import junit . framework . TestCase ; <nl> - import org . apache . regexp . RESyntaxException ; <nl> - import org . xml . sax . SAXException ; <nl> - <nl> - import javax . xml . parsers . ParserConfigurationException ; <nl> + import java . io . ByteArrayInputStream ; <nl> import java . io . ByteArrayOutputStream ; <nl> - import java . io . OutputStream ; <nl> - import java . io . PrintStream ; <nl> - import java . io . IOException ; <nl> - import java . io . FileNotFoundException ; <nl> import java . io . File ; <nl> - import java . io . ByteArrayInputStream ; <nl> - import java . io . LineNumberReader ; <nl> + import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> + import java . io . LineNumberReader ; <nl> + import java . io . OutputStream ; <nl> + import java . io . PrintStream ; <nl> import java . util . Locale ; <nl> import java . util . Properties ; <nl> - import java . lang . reflect . InvocationTargetException ; <nl> + <nl> + import junit . framework . TestCase ; <nl> <nl> public class CheckerTest <nl> extends TestCase <nl> @ @ - 61 , 11 + 56 , 7 @ @ public class CheckerTest <nl> } <nl> <nl> protected Checker createChecker ( ) <nl> - throws RESyntaxException , FileNotFoundException , IOException , <nl> - ParserConfigurationException , SAXException , <nl> - ClassNotFoundException , InstantiationException , <nl> - IllegalAccessException , InvocationTargetException , <nl> - NoSuchMethodException <nl> + throws Exception <nl> { <nl> final Configuration config = new Configuration ( mProps , mStream ) ; <nl> final Checker c = new Checker ( config ) ;

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 index 69330a4 . . 16b2013 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 @ @ - 152 , 11 + 152 , 11 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { 
 public void addChild ( AST ast ) { 
 clearBranchTokenTypes ( ) ; 
 clearChildCountCache ( this ) ; 
 - super . addChild ( ast ) ; 
 if ( ast ! = null ) { 
 ( ( DetailAST ) ast ) . setParent ( this ) ; 
 - getFirstChild ( ) . setParent ( this ) ; 
 + ( ( DetailAST ) ast ) . previousSibling = getLastChild ( ) ; 
 } 
 + super . addChild ( ast ) ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index 38ce1f8 . . 6d3ce56 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 206 , 6 + 206 , 19 @ @ 
 < / target > 
 
 < ! - - runs the command line version on a file - - > 
 + < target name = " run . simple " depends = " compile . tests " 
 + description = " Runs the command line version on a file " > 
 + < java classname = " com . puppycrawl . tools . checkstyle . Main " 
 + fork = " yes " 
 + dir = " . " 
 + classpathref = " run . classpath " > 
 + < sysproperty key = " checkstyle . allow . tabs " value = " yes " / > 
 + < arg value = " docs / checkstyle _ checks . xml " / > 
 + < arg value = " src / testinputs / com / puppycrawl / tools / checkstyle / InputSimple . java " / > 
 + < / java > 
 + < / target > 
 + 
 + < ! - - runs the command line version on a file - - > 
 < target name = " run . checkstyle " depends = " compile . tests " 
 description = " Runs the command line version on a file " > 
 < java classname = " com . puppycrawl . tools . checkstyle . Main " 
 diff - - git a / docs / checkstyle _ checks . xml b / docs / checkstyle _ checks . xml 
 new file mode 100644 
 index 0000000 . . f2781aa 
 - - - / dev / null 
 + + + b / docs / checkstyle _ checks . xml 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + < ? xml version = " 1 . 0 " ? > 
 + 
 + < configuration > 
 + < ! - - 
 + < check classname = " visitor . checks . ModifierCheck " > 
 + < set - property name = " order " value = " public , private , minus , negative " / > 
 + < set - property name = " level " value = " doggy " / > 
 + < tokens > MODIFIERS < / tokens > 
 + < / check > 
 + - - > 
 + 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . AvoidStarImport " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . ConstantNameCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . ConstructorLengthCheck " / > 
 + 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . EmptyBlockCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . EqualsHashCodeCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . FileLengthCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . GenericIllegalRegexpCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . HeaderCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . IllegalImportCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . IllegalInstantiationCheck " / > 
 + 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . InnerAssignmentCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . JavadocTypeCheck " / > 
 + 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . JavadocVariableCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . LineLengthCheck " / > 
 + 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . LocalFinalVariableNameCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . LocalVariableNameCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . MemberNameCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . MethodLeftCurlyCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . MethodLengthCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . MethodNameCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . ModifierCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . NoWhiteSpaceAroundCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . OtherLeftCurlyCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . PackageNameCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . ParameterNameCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . ParameterNumberCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . ParenPadCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . PublicMemberNameCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . RedundantImportCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . RedundantModifierCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . RegexpHeaderCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . RightCurlyCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . SimplifyBooleanExpressionCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . SimplifyBooleanReturnCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . StaticVariableNameCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . TabCharacterCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . TypeLeftCurlyCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . TypeNameCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . UnusedImportsCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . UpperEllCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . VisibilityModifierCheck " / > 
 + < check classname = " com . puppycrawl . tools . checkstyle . checks . WhitespaceAroundCheck " / > 
 + 
 + 
 + 
 + 
 + < / configuration > 
 \ No newline at end of file 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckConfiguration . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckConfiguration . java 
 index 559a25f . . d7b48d0 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckConfiguration . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckConfiguration . java 
 @ @ - 176 , 27 + 176 , 42 @ @ class CheckConfiguration 
 * 
 * @ param aLoader the < code > ClassLoader < / code > to create the instance with 
 * @ return the created check 
 - * @ throws ClassNotFoundException if an error occurs 
 - * @ throws InstantiationException if an error occurs 
 - * @ throws IllegalAccessException if an error occurs 
 - * @ throws InvocationTargetException if an error occurs 
 - * @ throws NoSuchMethodException if an error occurs 
 + * @ throws CheckstyleException if an error occurs 
 * / 
 Check createInstance ( ClassLoader aLoader ) 
 - throws ClassNotFoundException , InstantiationException , 
 - IllegalAccessException , InvocationTargetException , 
 - NoSuchMethodException 
 + throws CheckstyleException 
 { 
 - final Class clazz = Class . forName ( mClassname , true , aLoader ) ; 
 - final Check check = ( Check ) clazz . newInstance ( ) ; 
 - / / TODO : need to set the properties 
 - / / Loop setting the properties 
 - final Iterator keyIt = mProperties . keySet ( ) . iterator ( ) ; 
 - while ( keyIt . hasNext ( ) ) { 
 - final String key = ( String ) keyIt . next ( ) ; 
 - final String value = ( String ) mProperties . get ( key ) ; 
 - BeanUtils . copyProperty ( check , key , value ) ; 
 + try { 
 + final Class clazz = Class . forName ( mClassname , true , aLoader ) ; 
 + final Check check = ( Check ) clazz . newInstance ( ) ; 
 + / / TODO : need to set the properties 
 + / / Loop setting the properties 
 + final Iterator keyIt = mProperties . keySet ( ) . iterator ( ) ; 
 + while ( keyIt . hasNext ( ) ) { 
 + final String key = ( String ) keyIt . next ( ) ; 
 + final String value = ( String ) mProperties . get ( key ) ; 
 + try { 
 + BeanUtils . copyProperty ( check , key , value ) ; 
 + } 
 + catch ( InvocationTargetException e ) { 
 + throw new CheckstyleException ( 
 + " for check " + mClassname + " unable to set " + key 
 + + " with " + value ) ; 
 + } 
 + } 
 + return check ; 
 + } 
 + catch ( ClassNotFoundException e ) { 
 + throw new CheckstyleException ( 
 + " Unable to find class for " + mClassname ) ; 
 + } 
 + catch ( InstantiationException e ) { 
 + throw new CheckstyleException ( 
 + " Unable to instantiate " + mClassname ) ; 
 + } 
 + catch ( IllegalAccessException e ) { 
 + throw new CheckstyleException ( 
 + " Unable to instantiate " + mClassname ) ; 
 } 
 - return check ; 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 index c591acc . . 9f8729f 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 18 , 27 + 18 , 23 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle ; 
 
 - import antlr . RecognitionException ; 
 - import antlr . TokenStreamException ; 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 - import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; 
 - import com . puppycrawl . tools . checkstyle . api . Utils ; 
 - import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 - import org . apache . regexp . RESyntaxException ; 
 - import org . xml . sax . SAXException ; 
 - 
 - import javax . xml . parsers . ParserConfigurationException ; 
 import java . io . File ; 
 import java . io . FileNotFoundException ; 
 import java . io . IOException ; 
 import java . io . Reader ; 
 - import java . lang . reflect . InvocationTargetException ; 
 import java . util . ArrayList ; 
 import java . util . HashSet ; 
 import java . util . Iterator ; 
 import java . util . Locale ; 
 
 + import antlr . RecognitionException ; 
 + import antlr . TokenStreamException ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 + import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; 
 + import com . puppycrawl . tools . checkstyle . api . Utils ; 
 + 
 / * * 
 * This class provides the functionality to check a set of files . 
 * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > 
 @ @ - 158 , 16 + 154 , 10 @ @ public class Checker 
 * 
 * @ param aConfig the configuration to use 
 * @ param aConfigs the configuation of the checks to use 
 - * @ throws ClassNotFoundException if an error occurs 
 - * @ throws InstantiationException if an error occurs 
 - * @ throws IllegalAccessException if an error occurs 
 - * @ throws InvocationTargetException if an error occurs 
 - * @ throws NoSuchMethodException if an error occurs 
 + * @ throws CheckstyleException if an error occurs 
 * / 
 public Checker ( Configuration aConfig , CheckConfiguration [ ] aConfigs ) 
 - throws ClassNotFoundException , InstantiationException , 
 - IllegalAccessException , InvocationTargetException , 
 - NoSuchMethodException 
 + throws CheckstyleException 
 { 
 mConfig = aConfig ; 
 mCache = new PropertyCacheFile ( aConfig ) ; 
 @ @ - 186 , 22 + 176 , 10 @ @ public class Checker 
 / * * 
 * Constructs the object . 
 * @ param aConfig contains the configuration to check with 
 - * @ throws RESyntaxException unable to create a regexp object 
 - * @ throws IOException if an error occurs 
 - * @ throws ParserConfigurationException if an error occurs 
 - * @ throws SAXException if an error occurs 
 - * @ throws ClassNotFoundException if an error occurs 
 - * @ throws InstantiationException if an error occurs 
 - * @ throws IllegalAccessException if an error occurs 
 - * @ throws InvocationTargetException if an error occurs 
 - * @ throws NoSuchMethodException if an error occurs 
 + * @ throws CheckstyleException if an error occurs 
 * / 
 public Checker ( Configuration aConfig ) 
 - throws RESyntaxException , IOException , 
 - ParserConfigurationException , SAXException , 
 - ClassNotFoundException , InstantiationException , 
 - IllegalAccessException , InvocationTargetException , 
 - NoSuchMethodException 
 + throws CheckstyleException 
 { 
 / / TODO : delete this method eventually 
 this ( aConfig , new CheckConfiguration [ 0 ] ) ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckstyleException . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckstyleException . java 
 new file mode 100644 
 index 0000000 . . fdaa9b8 
 - - - / dev / null 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckstyleException . java 
 @ @ - 0 , 0 + 1 , 38 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2002 Oliver Burn 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + / * * 
 + * Represents an error condition within Checkstyle . 
 + * 
 + * @ author < a href = " mailto : checkstyle @ puppycrawl . com " > Oliver Burn < / a > 
 + * @ version 1 . 0 
 + * / 
 + class CheckstyleException extends Exception 
 + { 
 + / * * 
 + * Creates a new < code > CheckstyleException < / code > instance . 
 + * 
 + * @ param aMessage a < code > String < / code > value 
 + * / 
 + CheckstyleException ( String aMessage ) 
 + { 
 + super ( aMessage ) ; 
 + } 
 + } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 index 276a490 . . 299ee66 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 28 , 6 + 28 , 10 @ @ import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . Properties ; 
 
 + import javax . xml . parsers . ParserConfigurationException ; 
 + 
 + import org . xml . sax . SAXException ; 
 + 
 / * * 
 * Wrapper command line program for the Checker . 
 * @ author < a href = " mailto : oliver @ puppycrawl . com " > Oliver Burn < / a > 
 @ @ - 48 , 7 + 52 , 8 @ @ public final class Main 
 / / be brain dead about arguments parsing 
 String format = " plain " ; 
 String output = null ; 
 - Properties properties = System . getProperties ( ) ; 
 + Properties props = System . getProperties ( ) ; 
 + final List foundFiles = new ArrayList ( ) ; 
 final ArrayList files = new ArrayList ( ) ; 
 for ( int i = 0 ; i < aArgs . length ; i + + ) { 
 if ( " - f " . equals ( aArgs [ i ] ) ) { 
 @ @ - 58 , 10 + 63 , 10 @ @ public final class Main 
 output = aArgs [ + + i ] ; 
 } 
 else if ( " - r " . equals ( aArgs [ i ] ) ) { 
 - traverse ( new File ( aArgs [ + + i ] ) , files ) ; 
 + traverse ( new File ( aArgs [ + + i ] ) , foundFiles ) ; 
 } 
 else if ( " - p " . equals ( aArgs [ i ] ) ) { 
 - properties = loadProperties ( new File ( aArgs [ + + i ] ) ) ; 
 + props = loadProperties ( new File ( aArgs [ + + i ] ) ) ; 
 } 
 else { 
 files . add ( aArgs [ i ] ) ; 
 @ @ - 94 , 9 + 99 , 27 @ @ public final class Main 
 usage ( ) ; 
 } 
 
 + / / Check that I have a config file 
 + if ( files . isEmpty ( ) ) { 
 + System . out . println ( " Need to specify a config file " ) ; 
 + usage ( ) ; 
 + } 
 + 
 + / / Load the config file 
 + final String configFname = ( String ) files . remove ( 0 ) ; 
 + CheckConfiguration [ ] checkConfigs = null ; 
 + try { 
 + checkConfigs = loadConfigs ( configFname ) ; 
 + } 
 + catch ( CheckstyleException e ) { 
 + System . out . println ( " Error loading configuration file " ) ; 
 + e . printStackTrace ( System . out ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + 
 Checker c = null ; 
 try { 
 - c = new Checker ( new Configuration ( properties , System . out ) ) ; 
 + c = new Checker ( new Configuration ( props , System . out ) , checkConfigs ) ; 
 c . addListener ( listener ) ; 
 } 
 catch ( Exception e ) { 
 @ @ - 106 , 17 + 129 , 48 @ @ public final class Main 
 System . exit ( 1 ) ; 
 } 
 
 + files . addAll ( foundFiles ) ; 
 final int numErrs = 
 - c . process ( ( String [ ] ) files . toArray ( new String [ files . size ( ) ] ) ) ; 
 + c . processNEW ( ( String [ ] ) files . toArray ( new String [ files . size ( ) ] ) ) ; 
 c . destroy ( ) ; 
 System . exit ( numErrs ) ; 
 } 
 
 + / * * 
 + * Returns the check configurations in a specified file . 
 + * @ param aConfigFname name of config file 
 + * @ return the check configurations 
 + * @ throws CheckstyleException if an error occurs 
 + * / 
 + private static CheckConfiguration [ ] loadConfigs ( String aConfigFname ) 
 + throws CheckstyleException 
 + { 
 + System . out . println ( " Loading from " + aConfigFname ) ; 
 + try { 
 + final ConfigurationLoader loader = new ConfigurationLoader ( ) ; 
 + loader . parseFile ( aConfigFname ) ; 
 + return loader . getConfigs ( ) ; 
 + } 
 + catch ( FileNotFoundException e ) { 
 + throw new CheckstyleException ( " unable to find " + aConfigFname ) ; 
 + } 
 + catch ( ParserConfigurationException e ) { 
 + throw new CheckstyleException ( " unable to parse " + aConfigFname ) ; 
 + } 
 + catch ( SAXException e ) { 
 + throw new CheckstyleException ( " unable to parse " + aConfigFname ) ; 
 + } 
 + catch ( IOException e ) { 
 + throw new CheckstyleException ( " unable to read " + aConfigFname ) ; 
 + } 
 + } 
 + 
 / * * Prints the usage information . * * / 
 private static void usage ( ) 
 { 
 System . out . println ( 
 - " Usage : java " + Main . class . getName ( ) + " < options > < file > . . . . . . " ) ; 
 + " Usage : java " + Main . class . getName ( ) 
 + + " < options > config < file > . . . . . . " ) ; 
 System . out . println ( " Options " ) ; 
 System . out . println ( 
 " \ t - f < format > \ tsets output format . ( plain | xml ) . " 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java b / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java 
 index c535eef . . 98615fe 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / BaseCheckTestCase . java 
 @ @ - 3 , 19 + 3 , 14 @ @ package com . puppycrawl . tools . checkstyle ; 
 import java . io . ByteArrayInputStream ; 
 import java . io . ByteArrayOutputStream ; 
 import java . io . File ; 
 - import java . io . FileNotFoundException ; 
 import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 import java . io . LineNumberReader ; 
 import java . io . OutputStream ; 
 import java . io . PrintStream ; 
 - import java . lang . reflect . InvocationTargetException ; 
 import java . util . Properties ; 
 - import javax . xml . parsers . ParserConfigurationException ; 
 
 import junit . framework . TestCase ; 
 - import org . apache . regexp . RESyntaxException ; 
 - import org . xml . sax . SAXException ; 
 
 public abstract class BaseCheckTestCase 
 extends TestCase 
 @ @ - 43 , 9 + 38 , 7 @ @ public abstract class BaseCheckTestCase 
 } 
 
 protected Checker createChecker ( CheckConfiguration aCheckConfig ) 
 - throws RESyntaxException , FileNotFoundException , IOException , 
 - ParserConfigurationException , SAXException , ClassNotFoundException , 
 - InstantiationException , IllegalAccessException , InvocationTargetException , NoSuchMethodException 
 + throws Exception 
 { 
 final Checker c = new Checker ( new Configuration ( mProps , mStream ) , 
 new CheckConfiguration [ ] { aCheckConfig } ) ; 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 9f1cfc5 . . 147b307 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 1 , 22 + 1 , 17 @ @ 
 package com . puppycrawl . tools . checkstyle ; 
 
 - import junit . framework . TestCase ; 
 - import org . apache . regexp . RESyntaxException ; 
 - import org . xml . sax . SAXException ; 
 - 
 - import javax . xml . parsers . ParserConfigurationException ; 
 + import java . io . ByteArrayInputStream ; 
 import java . io . ByteArrayOutputStream ; 
 - import java . io . OutputStream ; 
 - import java . io . PrintStream ; 
 - import java . io . IOException ; 
 - import java . io . FileNotFoundException ; 
 import java . io . File ; 
 - import java . io . ByteArrayInputStream ; 
 - import java . io . LineNumberReader ; 
 + import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 + import java . io . LineNumberReader ; 
 + import java . io . OutputStream ; 
 + import java . io . PrintStream ; 
 import java . util . Locale ; 
 import java . util . Properties ; 
 - import java . lang . reflect . InvocationTargetException ; 
 + 
 + import junit . framework . TestCase ; 
 
 public class CheckerTest 
 extends TestCase 
 @ @ - 61 , 11 + 56 , 7 @ @ public class CheckerTest 
 } 
 
 protected Checker createChecker ( ) 
 - throws RESyntaxException , FileNotFoundException , IOException , 
 - ParserConfigurationException , SAXException , 
 - ClassNotFoundException , InstantiationException , 
 - IllegalAccessException , InvocationTargetException , 
 - NoSuchMethodException 
 + throws Exception 
 { 
 final Configuration config = new Configuration ( mProps , mStream ) ; 
 final Checker c = new Checker ( config ) ;
