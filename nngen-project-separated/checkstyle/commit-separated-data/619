BLEU SCORE: 0.028398387225677897

TEST MSG: Pull # 4907 : disallow java . util . Comparator in import - control
GENERATED MSG: fix a checkstyle . checkstyle error

TEST DIFF (one line): diff - - git a / config / import - control . xml b / config / import - control . xml <nl> index f3e38d5 . . 89d8be0 100644 <nl> - - - a / config / import - control . xml <nl> + + + b / config / import - control . xml <nl> @ @ - 27 , 6 + 27 , 7 @ @ <nl> < disallow class = " java . util . stream . LongStream . Builder " / > <nl> < disallow class = " java . util . stream . BaseStream " / > <nl> < disallow class = " java . util . stream . Collector " / > <nl> + < disallow class = " java . util . Comparator " / > <nl> <nl> < ! - - The local ones - - > <nl> < allow pkg = " java . lang . reflect " local - only = " true " / >
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> index 56d5c54 . . f9ab99a 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> @ @ - 154 , 7 + 154 , 7 @ @ public abstract class AbstractFileSetCheck <nl> * { @ inheritDoc } <nl> * / <nl> @ Override <nl> - protected final void log ( int aLine , String aKey , Object aArgs [ ] ) <nl> + protected final void log ( int aLine , String aKey , Object . . . aArgs ) <nl> { <nl> log ( aLine , 0 , aKey , aArgs ) ; <nl> } <nl> @ @ - 165 , 8 + 165 , 8 @ @ public abstract class AbstractFileSetCheck <nl> * { @ inheritDoc } <nl> * / <nl> @ Override <nl> - protected final void log ( int aLineNo , int aColNo , <nl> - String aKey , Object [ ] aArgs ) <nl> + protected final void log ( int aLineNo , int aColNo , String aKey , <nl> + Object . . . aArgs ) <nl> { <nl> getMessageCollector ( ) . add ( <nl> new LocalizedMessage ( aLineNo , <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> index 83b78fe . . a4fe8ab 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> @ @ - 28 , 9 + 28 , 6 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> public abstract class AbstractViolationReporter <nl> extends AutomaticBean <nl> { <nl> - / * * resuable constant for message formating * / <nl> - private static final Object [ ] EMPTY _ OBJECT _ ARRAY = new Object [ 0 ] ; <nl> - <nl> / * * the severity level of any violations found * / <nl> private SeverityLevel mSeverityLevel = SeverityLevel . ERROR ; <nl> <nl> @ @ - 89 , 120 + 86 , 16 @ @ public abstract class AbstractViolationReporter <nl> } <nl> <nl> / * * <nl> - * Log a message . <nl> - * <nl> - * @ param aLine the line number where the error was found <nl> - * @ param aKey the message that describes the error <nl> - * / <nl> - protected final void log ( int aLine , String aKey ) <nl> - { <nl> - log ( aLine , aKey , EMPTY _ OBJECT _ ARRAY ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Helper method to log a LocalizedMessage . Column defaults to 0 . <nl> - * <nl> - * @ param aLineNo line number to associate with the message <nl> - * @ param aKey key to locale message format <nl> - * @ param aArg0 first argument <nl> - * / <nl> - protected final void log ( int aLineNo , String aKey , Object aArg0 ) <nl> - { <nl> - log ( aLineNo , aKey , new Object [ ] { aArg0 } ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Helper method to log a LocalizedMessage . Column defaults to 0 . <nl> - * <nl> - * @ param aLineNo line number to associate with the message <nl> - * @ param aKey key to locale message format <nl> - * @ param aArg0 first argument <nl> - * @ param aArg1 second argument <nl> - * / <nl> - protected final void log ( int aLineNo , String aKey , <nl> - Object aArg0 , Object aArg1 ) <nl> - { <nl> - log ( aLineNo , aKey , new Object [ ] { aArg0 , aArg1 } ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Helper method to log a LocalizedMessage . <nl> - * <nl> - * @ param aLineNo line number to associate with the message <nl> - * @ param aColNo column number to associate with the message <nl> - * @ param aKey key to locale message format <nl> - * / <nl> - protected final void log ( int aLineNo , int aColNo , String aKey ) <nl> - { <nl> - log ( aLineNo , aColNo , aKey , EMPTY _ OBJECT _ ARRAY ) ; <nl> - } <nl> - <nl> - / * * <nl> * Helper method to log a LocalizedMessage . <nl> * <nl> * @ param aAST a node to get line and column numbers associated <nl> * with the message <nl> * @ param aKey key to locale message format <nl> + * @ param aArgs arguments to format <nl> * / <nl> - protected final void log ( DetailAST aAST , String aKey ) <nl> + protected final void log ( DetailAST aAST , String aKey , Object . . . aArgs ) <nl> { <nl> - log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , aKey ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Helper method to log a LocalizedMessage . <nl> - * <nl> - * @ param aLineNo line number to associate with the message <nl> - * @ param aColNo column number to associate with the message <nl> - * @ param aKey key to locale message format <nl> - * @ param aArg0 an < code > Object < / code > value <nl> - * / <nl> - protected final void log ( int aLineNo , int aColNo , String aKey , <nl> - Object aArg0 ) <nl> - { <nl> - log ( aLineNo , aColNo , aKey , new Object [ ] { aArg0 } ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Helper method to log a LocalizedMessage . <nl> - * <nl> - * @ param aAST a node to get line and column numbers associated <nl> - * with the message <nl> - * @ param aKey key to locale message format <nl> - * @ param aArg0 an < code > Object < / code > value <nl> - * / <nl> - protected final void log ( DetailAST aAST , String aKey , Object aArg0 ) <nl> - { <nl> - log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , aKey , aArg0 ) ; <nl> - } <nl> - / * * <nl> - * Helper method to log a LocalizedMessage . <nl> - * <nl> - * @ param aLineNo line number to associate with the message <nl> - * @ param aColNo column number to associate with the message <nl> - * @ param aKey key to locale message format <nl> - * @ param aArg0 an < code > Object < / code > value <nl> - * @ param aArg1 an < code > Object < / code > value <nl> - * / <nl> - protected final void log ( int aLineNo , int aColNo , String aKey , <nl> - Object aArg0 , Object aArg1 ) <nl> - { <nl> - log ( aLineNo , aColNo , aKey , new Object [ ] { aArg0 , aArg1 } ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Helper method to log a LocalizedMessage . <nl> - * <nl> - * @ param aAST a node to get line and column numbers associated <nl> - * with the message <nl> - * @ param aKey key to locale message format <nl> - * @ param aArg0 an < code > Object < / code > value <nl> - * @ param aArg1 an < code > Object < / code > value <nl> - * / <nl> - protected final void log ( DetailAST aAST , String aKey , <nl> - Object aArg0 , Object aArg1 ) <nl> - { <nl> - log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , aKey , aArg0 , aArg1 ) ; <nl> + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , aKey , aArgs ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 253 , 7 + 146 , 7 @ @ public abstract class AbstractViolationReporter <nl> * <nl> * @ see java . text . MessageFormat <nl> * / <nl> - protected abstract void log ( int aLine , String aKey , Object aArgs [ ] ) ; <nl> + protected abstract void log ( int aLine , String aKey , Object . . . aArgs ) ; <nl> <nl> / * * <nl> * Log a message that has column information . <nl> @ @ - 265 , 9 + 158 , 6 @ @ public abstract class AbstractViolationReporter <nl> * <nl> * @ see java . text . MessageFormat <nl> * / <nl> - protected abstract void log ( int aLine , <nl> - int aCol , <nl> - String aKey , <nl> - Object [ ] aArgs ) ; <nl> - <nl> + protected abstract void log ( int aLine , int aCol , String aKey , <nl> + Object . . . aArgs ) ; <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java <nl> index f68626f . . d616257 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java <nl> @ @ - 234 , 7 + 234 , 7 @ @ public abstract class Check extends AbstractViolationReporter <nl> * @ see java . text . MessageFormat <nl> * / <nl> @ Override <nl> - protected final void log ( int aLine , String aKey , Object aArgs [ ] ) <nl> + protected final void log ( int aLine , String aKey , Object . . . aArgs ) <nl> { <nl> mMessages . add ( <nl> new LocalizedMessage ( <nl> @ @ - 257 , 8 + 257 , 8 @ @ public abstract class Check extends AbstractViolationReporter <nl> * @ param aArgs arguments for message <nl> * / <nl> @ Override <nl> - protected final void log ( int aLineNo , int aColNo , <nl> - String aKey , Object [ ] aArgs ) <nl> + protected final void log ( int aLineNo , int aColNo , String aKey , <nl> + Object . . . aArgs ) <nl> { <nl> final int col = 1 + Utils . lengthExpandedTabs ( <nl> getLines ( ) [ aLineNo - 1 ] , aColNo , getTabWidth ( ) ) ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> index 8d16044 . . 207d335 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> @ @ - 23 , 8 + 23 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import java . util . HashSet ; <nl> import java . util . HashMap ; <nl> + import java . util . HashSet ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> import java . util . Vector ; <nl> @ @ - 283 , 7 + 283 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check <nl> * @ param aValues values to fill the message out . <nl> * / <nl> protected final void logLoadErrorImpl ( int aLineNo , int aColumnNo , <nl> - String aMsgKey , Object [ ] aValues ) <nl> + String aMsgKey , Object . . . aValues ) <nl> { <nl> if ( ! mLogLoadErrors ) { <nl> final LocalizedMessage msg = new LocalizedMessage ( aLineNo , <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> index 313d818 . . 4a87557 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> @ @ - 19 , 8 + 19 , 8 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> * Checks the style of array type definitions . <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java <nl> index 59c9c04 . . 559b1b1 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java <nl> @ @ - 215 , 28 + 215 , 16 @ @ public class DescendantTokenCheck extends Check <nl> if ( tokenCount < mMinimumNumber ) { <nl> final String descendantName = <nl> TokenTypes . getTokenName ( element ) ; <nl> - log ( aAST . getLineNo ( ) , <nl> - aAST . getColumnNo ( ) , <nl> - mMinimumMessage , <nl> - new String [ ] { <nl> - " " + tokenCount , <nl> - " " + mMinimumNumber , <nl> - name , <nl> - descendantName , <nl> - } ) ; <nl> + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , mMinimumMessage , <nl> + " " + tokenCount , " " + mMinimumNumber , <nl> + name , descendantName ) ; <nl> } <nl> if ( tokenCount > mMaximumNumber ) { <nl> final String descendantName = <nl> TokenTypes . getTokenName ( element ) ; <nl> - log ( aAST . getLineNo ( ) , <nl> - aAST . getColumnNo ( ) , <nl> - mMaximumMessage , <nl> - new String [ ] { <nl> - " " + tokenCount , <nl> - " " + mMaximumNumber , <nl> - name , <nl> - descendantName , <nl> - } ) ; <nl> + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , mMaximumMessage , <nl> + " " + tokenCount , " " + mMaximumNumber , <nl> + name , descendantName ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> index 43e68a4 . . 335d33a 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> @ @ - 19 , 8 + 19 , 8 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> * Check that method / constructor / catch / foreach parameters are final . <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / GenericIllegalRegexpCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / GenericIllegalRegexpCheck . java <nl> index 0a6b519 . . 13d6b6e 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / GenericIllegalRegexpCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / GenericIllegalRegexpCheck . java <nl> @ @ - 18 , 11 + 18 , 10 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - <nl> / * * <nl> * < p > <nl> * A generic check for code problems , the user can search for any pattern . <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / UpperEllCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / UpperEllCheck . java <nl> index 249debc . . 80477bd 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / UpperEllCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / UpperEllCheck . java <nl> @ @ - 18 , 9 + 18 , 9 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> * < p > Checks that long constants are defined with an upper ell . <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> index 8577ddb . . 9dcf5e7 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> @ @ - 122 , 8 + 122 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck <nl> protected final void logLoadError ( Token aIdent ) <nl> { <nl> logLoadErrorImpl ( aIdent . getLineNo ( ) , aIdent . getColumnNo ( ) , <nl> - " redundant . throws . classInfo " , <nl> - new Object [ ] { aIdent . getText ( ) } ) ; <nl> + " redundant . throws . classInfo " , aIdent . getText ( ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / AbstractJ2eeCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / AbstractJ2eeCheck . java <nl> index fe98bc1 . . 9f99a44 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / AbstractJ2eeCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / AbstractJ2eeCheck . java <nl> @ @ - 39 , 7 + 39 , 7 @ @ public abstract class AbstractJ2eeCheck <nl> * @ param aKey key to locale message format <nl> * @ param aArgs arguments for message <nl> * / <nl> - protected void log ( DetailAST aAST , String aKey , Object [ ] aArgs ) <nl> + protected void mylog ( DetailAST aAST , String aKey , Object . . . aArgs ) <nl> { <nl> final DetailAST nameAST = aAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> log ( nameAST . getLineNo ( ) , nameAST . getColumnNo ( ) , aKey , aArgs ) ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / MethodChecker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / MethodChecker . java <nl> index ae1242c . . e04c4d0 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / MethodChecker . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / MethodChecker . java <nl> @ @ - 133 , 9 + 133 , 9 @ @ public abstract class MethodChecker <nl> * @ param aKey key for message . <nl> * @ param aArgs message arguments . <nl> * / <nl> - protected void log ( DetailAST aMethodAST , String aKey , Object [ ] aArgs ) <nl> + protected void log ( DetailAST aMethodAST , String aKey , Object . . . aArgs ) <nl> { <nl> - mCheck . log ( aMethodAST , aKey , aArgs ) ; <nl> + mCheck . mylog ( aMethodAST , aKey , aArgs ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index b4e9a8f . . ecb3abb 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 305 , 8 + 305 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> protected final void logLoadError ( Token aIdent ) <nl> { <nl> logLoadErrorImpl ( aIdent . getLineNo ( ) , aIdent . getColumnNo ( ) , <nl> - " javadoc . classInfo " , <nl> - new Object [ ] { " @ throws " , aIdent . getText ( ) } ) ; <nl> + " javadoc . classInfo " , " @ throws " , aIdent . getText ( ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java <nl> index 8184864 . . 0f738a2 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java <nl> @ @ - 294 , 11 + 294 , 9 @ @ public abstract class AbstractClassCouplingCheck extends Check <nl> mReferencedClassNames . remove ( mPackageName + " . " + mClassName ) ; <nl> <nl> if ( mReferencedClassNames . size ( ) > mMax ) { <nl> - log ( mLineNo , mColumnNo , getLogMessageId ( ) , <nl> - new Object [ ] { <nl> - new Integer ( mReferencedClassNames . size ( ) ) , <nl> - new Integer ( getMax ( ) ) , <nl> - mReferencedClassNames . toString ( ) , } ) ; <nl> + log ( mLineNo , mColumnNo , getLogMessageId ( ) , new Integer ( <nl> + mReferencedClassNames . size ( ) ) , new Integer ( getMax ( ) ) , <nl> + mReferencedClassNames . toString ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java <nl> index 9c41f4f . . ff3d313 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java <nl> @ @ - 197 , 9 + 197 , 7 @ @ public abstract class AbstractComplexityCheck <nl> { <nl> BigInteger max = BigInteger . valueOf ( mMax ) ; <nl> if ( mCurrentValue . compareTo ( max ) > 0 ) { <nl> - log ( aAST , getMessageID ( ) , <nl> - mCurrentValue , <nl> - max ) ; <nl> + log ( aAST , getMessageID ( ) , mCurrentValue , max ) ; <nl> } <nl> popValue ( ) ; <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> index 31a8af6 . . c3adde8 100755 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> @ @ - 20 , 8 + 20 , 8 @ @ package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> * Checks for redundant modifiers in interface and annotation definitions . <nl> @ @ - 71 , 10 + 71 , 8 @ @ public class RedundantModifierCheck <nl> | | ( type = = TokenTypes . LITERAL _ STATIC ) <nl> | | ( type = = TokenTypes . FINAL ) ) <nl> { <nl> - log ( modifier . getLineNo ( ) , <nl> - modifier . getColumnNo ( ) , <nl> - " redundantModifier " , <nl> - new String [ ] { modifier . getText ( ) } ) ; <nl> + log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , <nl> + " redundantModifier " , modifier . getText ( ) ) ; <nl> break ; <nl> } <nl> <nl> @ @ - 104 , 10 + 102 , 8 @ @ public class RedundantModifierCheck <nl> while ( modifier ! = null ) { <nl> final int type = modifier . getType ( ) ; <nl> if ( type = = TokenTypes . FINAL ) { <nl> - log ( modifier . getLineNo ( ) , <nl> - modifier . getColumnNo ( ) , <nl> - " redundantModifier " , <nl> - new String [ ] { modifier . getText ( ) } ) ; <nl> + log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , <nl> + " redundantModifier " , modifier . getText ( ) ) ; <nl> break ; <nl> } <nl> modifier = ( DetailAST ) modifier . getNextSibling ( ) ;

TEST DIFF:
diff - - git a / config / import - control . xml b / config / import - control . xml 
 index f3e38d5 . . 89d8be0 100644 
 - - - a / config / import - control . xml 
 + + + b / config / import - control . xml 
 @ @ - 27 , 6 + 27 , 7 @ @ 
 < disallow class = " java . util . stream . LongStream . Builder " / > 
 < disallow class = " java . util . stream . BaseStream " / > 
 < disallow class = " java . util . stream . Collector " / > 
 + < disallow class = " java . util . Comparator " / > 
 
 < ! - - The local ones - - > 
 < allow pkg = " java . lang . reflect " local - only = " true " / >

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 index 56d5c54 . . f9ab99a 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 @ @ - 154 , 7 + 154 , 7 @ @ public abstract class AbstractFileSetCheck 
 * { @ inheritDoc } 
 * / 
 @ Override 
 - protected final void log ( int aLine , String aKey , Object aArgs [ ] ) 
 + protected final void log ( int aLine , String aKey , Object . . . aArgs ) 
 { 
 log ( aLine , 0 , aKey , aArgs ) ; 
 } 
 @ @ - 165 , 8 + 165 , 8 @ @ public abstract class AbstractFileSetCheck 
 * { @ inheritDoc } 
 * / 
 @ Override 
 - protected final void log ( int aLineNo , int aColNo , 
 - String aKey , Object [ ] aArgs ) 
 + protected final void log ( int aLineNo , int aColNo , String aKey , 
 + Object . . . aArgs ) 
 { 
 getMessageCollector ( ) . add ( 
 new LocalizedMessage ( aLineNo , 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 index 83b78fe . . a4fe8ab 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 @ @ - 28 , 9 + 28 , 6 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 public abstract class AbstractViolationReporter 
 extends AutomaticBean 
 { 
 - / * * resuable constant for message formating * / 
 - private static final Object [ ] EMPTY _ OBJECT _ ARRAY = new Object [ 0 ] ; 
 - 
 / * * the severity level of any violations found * / 
 private SeverityLevel mSeverityLevel = SeverityLevel . ERROR ; 
 
 @ @ - 89 , 120 + 86 , 16 @ @ public abstract class AbstractViolationReporter 
 } 
 
 / * * 
 - * Log a message . 
 - * 
 - * @ param aLine the line number where the error was found 
 - * @ param aKey the message that describes the error 
 - * / 
 - protected final void log ( int aLine , String aKey ) 
 - { 
 - log ( aLine , aKey , EMPTY _ OBJECT _ ARRAY ) ; 
 - } 
 - 
 - / * * 
 - * Helper method to log a LocalizedMessage . Column defaults to 0 . 
 - * 
 - * @ param aLineNo line number to associate with the message 
 - * @ param aKey key to locale message format 
 - * @ param aArg0 first argument 
 - * / 
 - protected final void log ( int aLineNo , String aKey , Object aArg0 ) 
 - { 
 - log ( aLineNo , aKey , new Object [ ] { aArg0 } ) ; 
 - } 
 - 
 - / * * 
 - * Helper method to log a LocalizedMessage . Column defaults to 0 . 
 - * 
 - * @ param aLineNo line number to associate with the message 
 - * @ param aKey key to locale message format 
 - * @ param aArg0 first argument 
 - * @ param aArg1 second argument 
 - * / 
 - protected final void log ( int aLineNo , String aKey , 
 - Object aArg0 , Object aArg1 ) 
 - { 
 - log ( aLineNo , aKey , new Object [ ] { aArg0 , aArg1 } ) ; 
 - } 
 - 
 - / * * 
 - * Helper method to log a LocalizedMessage . 
 - * 
 - * @ param aLineNo line number to associate with the message 
 - * @ param aColNo column number to associate with the message 
 - * @ param aKey key to locale message format 
 - * / 
 - protected final void log ( int aLineNo , int aColNo , String aKey ) 
 - { 
 - log ( aLineNo , aColNo , aKey , EMPTY _ OBJECT _ ARRAY ) ; 
 - } 
 - 
 - / * * 
 * Helper method to log a LocalizedMessage . 
 * 
 * @ param aAST a node to get line and column numbers associated 
 * with the message 
 * @ param aKey key to locale message format 
 + * @ param aArgs arguments to format 
 * / 
 - protected final void log ( DetailAST aAST , String aKey ) 
 + protected final void log ( DetailAST aAST , String aKey , Object . . . aArgs ) 
 { 
 - log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , aKey ) ; 
 - } 
 - 
 - / * * 
 - * Helper method to log a LocalizedMessage . 
 - * 
 - * @ param aLineNo line number to associate with the message 
 - * @ param aColNo column number to associate with the message 
 - * @ param aKey key to locale message format 
 - * @ param aArg0 an < code > Object < / code > value 
 - * / 
 - protected final void log ( int aLineNo , int aColNo , String aKey , 
 - Object aArg0 ) 
 - { 
 - log ( aLineNo , aColNo , aKey , new Object [ ] { aArg0 } ) ; 
 - } 
 - 
 - / * * 
 - * Helper method to log a LocalizedMessage . 
 - * 
 - * @ param aAST a node to get line and column numbers associated 
 - * with the message 
 - * @ param aKey key to locale message format 
 - * @ param aArg0 an < code > Object < / code > value 
 - * / 
 - protected final void log ( DetailAST aAST , String aKey , Object aArg0 ) 
 - { 
 - log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , aKey , aArg0 ) ; 
 - } 
 - / * * 
 - * Helper method to log a LocalizedMessage . 
 - * 
 - * @ param aLineNo line number to associate with the message 
 - * @ param aColNo column number to associate with the message 
 - * @ param aKey key to locale message format 
 - * @ param aArg0 an < code > Object < / code > value 
 - * @ param aArg1 an < code > Object < / code > value 
 - * / 
 - protected final void log ( int aLineNo , int aColNo , String aKey , 
 - Object aArg0 , Object aArg1 ) 
 - { 
 - log ( aLineNo , aColNo , aKey , new Object [ ] { aArg0 , aArg1 } ) ; 
 - } 
 - 
 - / * * 
 - * Helper method to log a LocalizedMessage . 
 - * 
 - * @ param aAST a node to get line and column numbers associated 
 - * with the message 
 - * @ param aKey key to locale message format 
 - * @ param aArg0 an < code > Object < / code > value 
 - * @ param aArg1 an < code > Object < / code > value 
 - * / 
 - protected final void log ( DetailAST aAST , String aKey , 
 - Object aArg0 , Object aArg1 ) 
 - { 
 - log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , aKey , aArg0 , aArg1 ) ; 
 + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , aKey , aArgs ) ; 
 } 
 
 / * * 
 @ @ - 253 , 7 + 146 , 7 @ @ public abstract class AbstractViolationReporter 
 * 
 * @ see java . text . MessageFormat 
 * / 
 - protected abstract void log ( int aLine , String aKey , Object aArgs [ ] ) ; 
 + protected abstract void log ( int aLine , String aKey , Object . . . aArgs ) ; 
 
 / * * 
 * Log a message that has column information . 
 @ @ - 265 , 9 + 158 , 6 @ @ public abstract class AbstractViolationReporter 
 * 
 * @ see java . text . MessageFormat 
 * / 
 - protected abstract void log ( int aLine , 
 - int aCol , 
 - String aKey , 
 - Object [ ] aArgs ) ; 
 - 
 + protected abstract void log ( int aLine , int aCol , String aKey , 
 + Object . . . aArgs ) ; 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java 
 index f68626f . . d616257 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / Check . java 
 @ @ - 234 , 7 + 234 , 7 @ @ public abstract class Check extends AbstractViolationReporter 
 * @ see java . text . MessageFormat 
 * / 
 @ Override 
 - protected final void log ( int aLine , String aKey , Object aArgs [ ] ) 
 + protected final void log ( int aLine , String aKey , Object . . . aArgs ) 
 { 
 mMessages . add ( 
 new LocalizedMessage ( 
 @ @ - 257 , 8 + 257 , 8 @ @ public abstract class Check extends AbstractViolationReporter 
 * @ param aArgs arguments for message 
 * / 
 @ Override 
 - protected final void log ( int aLineNo , int aColNo , 
 - String aKey , Object [ ] aArgs ) 
 + protected final void log ( int aLineNo , int aColNo , String aKey , 
 + Object . . . aArgs ) 
 { 
 final int col = 1 + Utils . lengthExpandedTabs ( 
 getLines ( ) [ aLineNo - 1 ] , aColNo , getTabWidth ( ) ) ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 index 8d16044 . . 207d335 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 @ @ - 23 , 8 + 23 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import java . util . HashSet ; 
 import java . util . HashMap ; 
 + import java . util . HashSet ; 
 import java . util . Map ; 
 import java . util . Set ; 
 import java . util . Vector ; 
 @ @ - 283 , 7 + 283 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check 
 * @ param aValues values to fill the message out . 
 * / 
 protected final void logLoadErrorImpl ( int aLineNo , int aColumnNo , 
 - String aMsgKey , Object [ ] aValues ) 
 + String aMsgKey , Object . . . aValues ) 
 { 
 if ( ! mLogLoadErrors ) { 
 final LocalizedMessage msg = new LocalizedMessage ( aLineNo , 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 index 313d818 . . 4a87557 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 @ @ - 19 , 8 + 19 , 8 @ @ 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 * Checks the style of array type definitions . 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java 
 index 59c9c04 . . 559b1b1 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java 
 @ @ - 215 , 28 + 215 , 16 @ @ public class DescendantTokenCheck extends Check 
 if ( tokenCount < mMinimumNumber ) { 
 final String descendantName = 
 TokenTypes . getTokenName ( element ) ; 
 - log ( aAST . getLineNo ( ) , 
 - aAST . getColumnNo ( ) , 
 - mMinimumMessage , 
 - new String [ ] { 
 - " " + tokenCount , 
 - " " + mMinimumNumber , 
 - name , 
 - descendantName , 
 - } ) ; 
 + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , mMinimumMessage , 
 + " " + tokenCount , " " + mMinimumNumber , 
 + name , descendantName ) ; 
 } 
 if ( tokenCount > mMaximumNumber ) { 
 final String descendantName = 
 TokenTypes . getTokenName ( element ) ; 
 - log ( aAST . getLineNo ( ) , 
 - aAST . getColumnNo ( ) , 
 - mMaximumMessage , 
 - new String [ ] { 
 - " " + tokenCount , 
 - " " + mMaximumNumber , 
 - name , 
 - descendantName , 
 - } ) ; 
 + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , mMaximumMessage , 
 + " " + tokenCount , " " + mMaximumNumber , 
 + name , descendantName ) ; 
 } 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 index 43e68a4 . . 335d33a 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 @ @ - 19 , 8 + 19 , 8 @ @ 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 * Check that method / constructor / catch / foreach parameters are final . 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / GenericIllegalRegexpCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / GenericIllegalRegexpCheck . java 
 index 0a6b519 . . 13d6b6e 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / GenericIllegalRegexpCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / GenericIllegalRegexpCheck . java 
 @ @ - 18 , 11 + 18 , 10 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - 
 / * * 
 * < p > 
 * A generic check for code problems , the user can search for any pattern . 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / UpperEllCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / UpperEllCheck . java 
 index 249debc . . 80477bd 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / UpperEllCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / UpperEllCheck . java 
 @ @ - 18 , 9 + 18 , 9 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 * < p > Checks that long constants are defined with an upper ell . 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 index 8577ddb . . 9dcf5e7 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 @ @ - 122 , 8 + 122 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck 
 protected final void logLoadError ( Token aIdent ) 
 { 
 logLoadErrorImpl ( aIdent . getLineNo ( ) , aIdent . getColumnNo ( ) , 
 - " redundant . throws . classInfo " , 
 - new Object [ ] { aIdent . getText ( ) } ) ; 
 + " redundant . throws . classInfo " , aIdent . getText ( ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / AbstractJ2eeCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / AbstractJ2eeCheck . java 
 index fe98bc1 . . 9f99a44 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / AbstractJ2eeCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / AbstractJ2eeCheck . java 
 @ @ - 39 , 7 + 39 , 7 @ @ public abstract class AbstractJ2eeCheck 
 * @ param aKey key to locale message format 
 * @ param aArgs arguments for message 
 * / 
 - protected void log ( DetailAST aAST , String aKey , Object [ ] aArgs ) 
 + protected void mylog ( DetailAST aAST , String aKey , Object . . . aArgs ) 
 { 
 final DetailAST nameAST = aAST . findFirstToken ( TokenTypes . IDENT ) ; 
 log ( nameAST . getLineNo ( ) , nameAST . getColumnNo ( ) , aKey , aArgs ) ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / MethodChecker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / MethodChecker . java 
 index ae1242c . . e04c4d0 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / MethodChecker . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / j2ee / MethodChecker . java 
 @ @ - 133 , 9 + 133 , 9 @ @ public abstract class MethodChecker 
 * @ param aKey key for message . 
 * @ param aArgs message arguments . 
 * / 
 - protected void log ( DetailAST aMethodAST , String aKey , Object [ ] aArgs ) 
 + protected void log ( DetailAST aMethodAST , String aKey , Object . . . aArgs ) 
 { 
 - mCheck . log ( aMethodAST , aKey , aArgs ) ; 
 + mCheck . mylog ( aMethodAST , aKey , aArgs ) ; 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index b4e9a8f . . ecb3abb 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 305 , 8 + 305 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 protected final void logLoadError ( Token aIdent ) 
 { 
 logLoadErrorImpl ( aIdent . getLineNo ( ) , aIdent . getColumnNo ( ) , 
 - " javadoc . classInfo " , 
 - new Object [ ] { " @ throws " , aIdent . getText ( ) } ) ; 
 + " javadoc . classInfo " , " @ throws " , aIdent . getText ( ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java 
 index 8184864 . . 0f738a2 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java 
 @ @ - 294 , 11 + 294 , 9 @ @ public abstract class AbstractClassCouplingCheck extends Check 
 mReferencedClassNames . remove ( mPackageName + " . " + mClassName ) ; 
 
 if ( mReferencedClassNames . size ( ) > mMax ) { 
 - log ( mLineNo , mColumnNo , getLogMessageId ( ) , 
 - new Object [ ] { 
 - new Integer ( mReferencedClassNames . size ( ) ) , 
 - new Integer ( getMax ( ) ) , 
 - mReferencedClassNames . toString ( ) , } ) ; 
 + log ( mLineNo , mColumnNo , getLogMessageId ( ) , new Integer ( 
 + mReferencedClassNames . size ( ) ) , new Integer ( getMax ( ) ) , 
 + mReferencedClassNames . toString ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java 
 index 9c41f4f . . ff3d313 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java 
 @ @ - 197 , 9 + 197 , 7 @ @ public abstract class AbstractComplexityCheck 
 { 
 BigInteger max = BigInteger . valueOf ( mMax ) ; 
 if ( mCurrentValue . compareTo ( max ) > 0 ) { 
 - log ( aAST , getMessageID ( ) , 
 - mCurrentValue , 
 - max ) ; 
 + log ( aAST , getMessageID ( ) , mCurrentValue , max ) ; 
 } 
 popValue ( ) ; 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 index 31a8af6 . . c3adde8 100755 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 @ @ - 20 , 8 + 20 , 8 @ @ package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 * Checks for redundant modifiers in interface and annotation definitions . 
 @ @ - 71 , 10 + 71 , 8 @ @ public class RedundantModifierCheck 
 | | ( type = = TokenTypes . LITERAL _ STATIC ) 
 | | ( type = = TokenTypes . FINAL ) ) 
 { 
 - log ( modifier . getLineNo ( ) , 
 - modifier . getColumnNo ( ) , 
 - " redundantModifier " , 
 - new String [ ] { modifier . getText ( ) } ) ; 
 + log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , 
 + " redundantModifier " , modifier . getText ( ) ) ; 
 break ; 
 } 
 
 @ @ - 104 , 10 + 102 , 8 @ @ public class RedundantModifierCheck 
 while ( modifier ! = null ) { 
 final int type = modifier . getType ( ) ; 
 if ( type = = TokenTypes . FINAL ) { 
 - log ( modifier . getLineNo ( ) , 
 - modifier . getColumnNo ( ) , 
 - " redundantModifier " , 
 - new String [ ] { modifier . getText ( ) } ) ; 
 + log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , 
 + " redundantModifier " , modifier . getText ( ) ) ; 
 break ; 
 } 
 modifier = ( DetailAST ) modifier . getNextSibling ( ) ;
