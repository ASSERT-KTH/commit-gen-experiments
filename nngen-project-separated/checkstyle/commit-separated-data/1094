BLEU SCORE: 0.05061867434834411

TEST MSG: Issue # 3433 : Cut down on Checkstyle ' s dependencies on Guava ( part 3 )
GENERATED MSG: Issue # 2109 : CLI should print a file name where exception is happen

TEST DIFF (one line): diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml <nl> index ebcd921 . . 8aca176 100644 <nl> - - - a / config / checkstyle _ sevntu _ checks . xml <nl> + + + b / config / checkstyle _ sevntu _ checks . xml <nl> @ @ - 44 , 7 + 44 , 8 @ @ <nl> com . google . common . base . Preconditions , com . google . common . base . Predicate , <nl> com . google . common . io . CharSource , com . google . common . annotations . Beta , <nl> com . google . common . collect . Queues , com . google . common . collect . Sets , <nl> - com . google . common . collect . Lists " / > <nl> + com . google . common . collect . Lists , com . google . common . annotations . GwtCompatible , <nl> + com . google . common . io . Files , com . google . common . collect . TreeTraverser " / > <nl> < / module > <nl> < module name = " ForbidCCommentsInMethods " / > <nl> < module name = " FinalizeImplementationCheck " / > <nl> @ @ - 111 , 7 + 112 , 9 @ @ <nl> com \ . google \ . common \ . base \ . Equivalence | com \ . google \ . common \ . base \ . Preconditions | <nl> com \ . google \ . common \ . base \ . Optional | com \ . google \ . common \ . io \ . CharSource | <nl> com \ . google \ . common \ . primitives . * | com \ . google \ . common \ . collect \ . Sets | <nl> - com \ . google \ . common \ . collect \ . Queues | com \ . google \ . common \ . collect \ . Lists " / > <nl> + com \ . google \ . common \ . collect \ . Queues | com \ . google \ . common \ . collect \ . Lists | <nl> + com \ . google \ . common \ . annotations \ . GwtCompatible | com \ . google \ . common \ . io \ . Files | <nl> + com \ . google \ . common \ . collect \ . TreeTraverser " / > <nl> < property name = " forbiddenImportsExcludesRegexp " value = " " / > <nl> < / module > <nl> < module name = " ForbidCertainImports " > <nl> diff - - git a / config / import - control . xml b / config / import - control . xml <nl> index 92d1aaf . . a07897e 100644 <nl> - - - a / config / import - control . xml <nl> + + + b / config / import - control . xml <nl> @ @ - 70 , 7 + 70 , 6 @ @ <nl> < subpackage name = " checks " > <nl> < allow pkg = " com . puppycrawl . tools . checkstyle . checks " / > <nl> < allow class = " com . puppycrawl . tools . checkstyle . Definitions " / > <nl> - < allow class = " com . google . common . io . Files " local - only = " true " / > <nl> < allow class = " com . google . common . io . Closeables " local - only = " true " / > <nl> < allow class = " com . google . common . collect . HashMultiset " local - only = " true " / > <nl> < allow class = " com . google . common . collect . HashMultimap " local - only = " true " / > <nl> @ @ - 99 , 24 + 98 , 16 @ @ <nl> < allow pkg = " com . puppycrawl . tools . checkstyle . grammars . javadoc " / > <nl> < allow pkg = " java . lang . reflect " / > <nl> < allow class = " com . google . common . base . CharMatcher " local - only = " true " / > <nl> - < allow class = " com . google . common . annotations . GwtCompatible " local - only = " true " / > <nl> - < allow class = " com . google . common . annotations . GwtIncompatible " local - only = " true " / > <nl> < allow class = " com . google . common . collect . ImmutableList " local - only = " true " / > <nl> < allow class = " com . google . common . collect . ImmutableMap " local - only = " true " / > <nl> < allow class = " com . google . common . collect . ImmutableSortedSet " local - only = " true " / > <nl> < allow class = " com . google . common . collect . Multiset " local - only = " true " / > <nl> < / subpackage > <nl> - < subpackage name = " whitespace " > <nl> - < allow class = " com . google . common . annotations . GwtCompatible " local - only = " true " / > <nl> - < / subpackage > <nl> < subpackage name = " design " > <nl> < allow class = " com . google . common . annotations . VisibleForTesting " local - only = " true " / > <nl> < allow class = " com . google . common . collect . ImmutableList " local - only = " true " / > <nl> < allow class = " com . google . common . collect . ImmutableMap " local - only = " true " / > <nl> < / subpackage > <nl> - < subpackage name = " regexp " > <nl> - < allow class = " com . google . common . io . Files " local - only = " true " / > <nl> - < / subpackage > <nl> < subpackage name = " imports " > <nl> < allow class = " com . google . common . collect . HashMultimap " local - only = " true " / > <nl> < allow class = " com . google . common . collect . ImmutableSet " local - only = " true " / > <nl> @ @ - 164 , 8 + 155 , 6 @ @ <nl> <nl> < subpackage name = " internal " > <nl> < allow class = " com . google . common . reflect . ClassPath " local - only = " true " / > <nl> - < allow class = " com . google . common . io . Files " local - only = " true " / > <nl> < allow class = " com . google . common . collect . FluentIterable " local - only = " true " / > <nl> - < allow class = " com . google . common . collect . TreeTraverser " / > <nl> < / subpackage > <nl> < / import - control > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> index ab9a73a . . 5c41f09 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> @ @ - 44 , 7 + 44 , 6 @ @ import org . apache . commons . logging . LogFactory ; <nl> import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . SetMultimap ; <nl> import com . google . common . io . Closeables ; <nl> - import com . google . common . io . Files ; <nl> import com . puppycrawl . tools . checkstyle . Definitions ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> @ @ - 351 , 7 + 350 , 7 @ @ public class TranslationCheck extends AbstractFileSetCheck { <nl> final String baseName = extractBaseName ( fileName ) ; <nl> final Matcher baseNameMatcher = baseNameRegexp . matcher ( baseName ) ; <nl> if ( baseNameMatcher . matches ( ) ) { <nl> - final String extension = Files . getFileExtension ( fileName ) ; <nl> + final String extension = CommonUtils . getFileExtension ( fileName ) ; <nl> final String path = getPath ( currentFile . getAbsolutePath ( ) ) ; <nl> final ResourceBundle newBundle = new ResourceBundle ( baseName , path , extension ) ; <nl> final Optional < ResourceBundle > bundle = findBundle ( resourceBundles , newBundle ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java <nl> index b98b6b9 . . 2d090fc 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import java . io . IOException ; <nl> import java . util . List ; <nl> import java . util . regex . Pattern ; <nl> <nl> - import com . google . common . io . Files ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> @ @ - 272 , 7 + 271 , 7 @ @ public class RegexpOnFilenameCheck extends AbstractFileSetCheck { <nl> String fileName = file . getName ( ) ; <nl> <nl> if ( ignoreFileNameExtensions ) { <nl> - fileName = Files . getNameWithoutExtension ( fileName ) ; <nl> + fileName = CommonUtils . getFileNameWithoutExtension ( fileName ) ; <nl> } <nl> <nl> return fileName ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> index 3bc4b83 . . 2b00c14 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> @ @ - 425 , 4 + 425 , 46 @ @ public final class CommonUtils { <nl> public static boolean isBlank ( String str ) { <nl> return str = = null | | CharMatcher . WHITESPACE . matchesAllOf ( str ) ; <nl> } <nl> + <nl> + / * * <nl> + * Returns file name without extension . <nl> + * We do not use the method from Guava library to reduce Checkstyle ' s dependencies <nl> + * on external libraries . <nl> + * @ param fullFilename file name with extension . <nl> + * @ return file name without extension . <nl> + * / <nl> + public static String getFileNameWithoutExtension ( String fullFilename ) { <nl> + final String fileName = new File ( fullFilename ) . getName ( ) ; <nl> + final int dotIndex = fileName . lastIndexOf ( ' . ' ) ; <nl> + final String fileNameWithoutExtension ; <nl> + if ( dotIndex = = - 1 ) { <nl> + fileNameWithoutExtension = fileName ; <nl> + } <nl> + else { <nl> + fileNameWithoutExtension = fileName . substring ( 0 , dotIndex ) ; <nl> + } <nl> + return fileNameWithoutExtension ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns file extension for the given file name <nl> + * or empty string if file does not have an extension . <nl> + * We do not use the method from Guava library to reduce Checkstyle ' s dependencies <nl> + * on external libraries . <nl> + * @ param fileNameWithExtension file name with extension . <nl> + * @ return file extension for the given file name <nl> + * or empty string if file does not have an extension . <nl> + * / <nl> + public static String getFileExtension ( String fileNameWithExtension ) { <nl> + final String fileName = Paths . get ( fileNameWithExtension ) . toString ( ) ; <nl> + final int dotIndex = fileName . lastIndexOf ( ' . ' ) ; <nl> + final String extension ; <nl> + if ( dotIndex = = - 1 ) { <nl> + extension = " " ; <nl> + } <nl> + else { <nl> + extension = fileName . substring ( dotIndex + 1 ) ; <nl> + } <nl> + return extension ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java <nl> index 4bf0e89 . . 6a20e3b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java <nl> @ @ - 91 , 7 + 91 , 7 @ @ public class JavadocMethodCheckTest extends BaseCheckTestSupport { <nl> config . addAttribute ( " allowedAnnotations " , " MyAnnotation , Override " ) ; <nl> config . addAttribute ( " minLineCount " , " 2 " ) ; <nl> final String [ ] expected = { <nl> - " 46 : 1 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + " 44 : 1 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> } ; <nl> verify ( config , getPath ( " InputExtendAnnotation . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> index 71804ce . . ac5345e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> @ @ - 27 , 13 + 27 , 13 @ @ import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . MS <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . nio . charset . StandardCharsets ; <nl> + import java . nio . file . Files ; <nl> <nl> import org . junit . Before ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . TemporaryFolder ; <nl> <nl> - import com . google . common . io . Files ; <nl> import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> @ @ - 121 , 7 + 121 , 8 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { <nl> } ; <nl> <nl> final File file = temporaryFolder . newFile ( ) ; <nl> - Files . write ( " first line \ r \ n second line \ n \ r third line " , file , StandardCharsets . UTF _ 8 ) ; <nl> + Files . write ( file . toPath ( ) , <nl> + " first line \ r \ n second line \ n \ r third line " . getBytes ( StandardCharsets . UTF _ 8 ) ) ; <nl> <nl> verify ( checkConfig , file . getPath ( ) , expected ) ; <nl> } <nl> @ @ - 160 , 7 + 161 , 7 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { <nl> } ; <nl> <nl> final File file = temporaryFolder . newFile ( ) ; <nl> - Files . write ( makeLargeXyString ( ) , file , StandardCharsets . UTF _ 8 ) ; <nl> + Files . write ( file . toPath ( ) , makeLargeXyString ( ) . toString ( ) . getBytes ( StandardCharsets . UTF _ 8 ) ) ; <nl> <nl> verify ( checkConfig , file . getPath ( ) , expected ) ; <nl> } <nl> @ @ - 175 , 7 + 176 , 7 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { <nl> } ; <nl> <nl> final File file = temporaryFolder . newFile ( ) ; <nl> - Files . write ( " " , file , StandardCharsets . UTF _ 8 ) ; <nl> + Files . write ( file . toPath ( ) , " " . getBytes ( StandardCharsets . UTF _ 8 ) ) ; <nl> <nl> verify ( checkConfig , file . getPath ( ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java <nl> index 1a4951d . . 2af998d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java <nl> @ @ - 26 , 7 + 26 , 9 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . StringReader ; <nl> import java . lang . reflect . Field ; <nl> + import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> + import java . nio . file . Paths ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . HashSet ; <nl> @ @ - 49 , 7 + 51 , 6 @ @ import org . w3c . dom . NodeList ; <nl> import org . xml . sax . InputSource ; <nl> <nl> import com . google . common . collect . ImmutableSet ; <nl> - import com . google . common . io . Files ; <nl> import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . ConfigurationLoader ; <nl> import com . puppycrawl . tools . checkstyle . ModuleFactory ; <nl> @ @ - 60 , 9 + 61 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> <nl> public class XDocsPagesTest { <nl> - private static final File JAVA _ SOURCES _ DIRECTORY = new File ( " src / main / java " ) ; <nl> - private static final String AVAILABLE _ CHECKS _ PATH = " src / xdocs / checks . xml " ; <nl> - private static final File AVAILABLE _ CHECKS _ FILE = new File ( AVAILABLE _ CHECKS _ PATH ) ; <nl> + private static final Path JAVA _ SOURCES _ DIRECTORY = Paths . get ( " src / main / java " ) ; <nl> + private static final Path AVAILABLE _ CHECKS _ PATH = Paths . get ( " src / xdocs / checks . xml " ) ; <nl> private static final String CHECK _ FILE _ NAME = " . + Check . java $ " ; <nl> private static final String CHECK _ SUFFIX = " Check . java " ; <nl> private static final String LINK _ TEMPLATE = <nl> @ @ - 125 , 18 + 125 , 18 @ @ public class XDocsPagesTest { <nl> <nl> @ Test <nl> public void testAllChecksPresentOnAvailableChecksPage ( ) throws IOException { <nl> - final String availableChecks = Files . toString ( AVAILABLE _ CHECKS _ FILE , UTF _ 8 ) ; <nl> - for ( File file : Files . fileTreeTraverser ( ) . preOrderTraversal ( JAVA _ SOURCES _ DIRECTORY ) ) { <nl> - final String fileName = file . getName ( ) ; <nl> + final String availableChecks = new String ( Files . readAllBytes ( AVAILABLE _ CHECKS _ PATH ) , UTF _ 8 ) ; <nl> + Files . walk ( JAVA _ SOURCES _ DIRECTORY ) . forEach ( filePath - > { <nl> + final String fileName = filePath . getFileName ( ) . toString ( ) ; <nl> if ( fileName . matches ( CHECK _ FILE _ NAME ) <nl> & & ! CHECKS _ ON _ PAGE _ IGNORE _ LIST . contains ( fileName ) ) { <nl> final String checkName = fileName . replace ( CHECK _ SUFFIX , " " ) ; <nl> if ( ! isPresent ( availableChecks , checkName ) ) { <nl> Assert . fail ( checkName + " is not correctly listed on Available Checks page " <nl> - + " - add it to " + AVAILABLE _ CHECKS _ PATH ) ; <nl> + + " - add it to " + AVAILABLE _ CHECKS _ PATH ) ; <nl> } <nl> } <nl> - } <nl> + } ) ; <nl> } <nl> <nl> private static boolean isPresent ( String availableChecks , String checkName ) { <nl> @ @ - 147 , 9 + 147 , 8 @ @ public class XDocsPagesTest { <nl> @ Test <nl> public void testAllXmlExamples ( ) throws Exception { <nl> for ( Path path : XDocUtil . getXdocsFilePaths ( ) ) { <nl> - final File file = path . toFile ( ) ; <nl> - final String input = Files . toString ( file , UTF _ 8 ) ; <nl> - final String fileName = file . getName ( ) ; <nl> + final String input = new String ( Files . readAllBytes ( path ) , UTF _ 8 ) ; <nl> + final String fileName = path . getFileName ( ) . toString ( ) ; <nl> <nl> final Document document = XmlUtil . getRawXml ( fileName , input , input ) ; <nl> final NodeList sources = document . getElementsByTagName ( " source " ) ; <nl> @ @ - 254 , 14 + 253 , 13 @ @ public class XDocsPagesTest { <nl> final ModuleFactory moduleFactory = TestUtils . getPackageObjectFactory ( ) ; <nl> <nl> for ( Path path : XDocUtil . getXdocsConfigFilePaths ( XDocUtil . getXdocsFilePaths ( ) ) ) { <nl> - final File file = path . toFile ( ) ; <nl> - final String fileName = file . getName ( ) ; <nl> + final String fileName = path . getFileName ( ) . toString ( ) ; <nl> <nl> if ( " config _ reporting . xml " . equals ( fileName ) ) { <nl> continue ; <nl> } <nl> <nl> - final String input = Files . toString ( file , UTF _ 8 ) ; <nl> + final String input = new String ( Files . readAllBytes ( path ) , UTF _ 8 ) ; <nl> final Document document = XmlUtil . getRawXml ( fileName , input , input ) ; <nl> final NodeList sources = document . getElementsByTagName ( " section " ) ; <nl> String lastSectioName = null ; <nl> @ @ - 767 , 9 + 765 , 8 @ @ public class XDocsPagesTest { <nl> @ Test <nl> public void testAllStyleRules ( ) throws Exception { <nl> for ( Path path : XDocUtil . getXdocsStyleFilePaths ( XDocUtil . getXdocsFilePaths ( ) ) ) { <nl> - final File file = path . toFile ( ) ; <nl> - final String fileName = file . getName ( ) ; <nl> - final String input = Files . toString ( file , UTF _ 8 ) ; <nl> + final String fileName = path . getFileName ( ) . toString ( ) ; <nl> + final String input = new String ( Files . readAllBytes ( path ) , UTF _ 8 ) ; <nl> final Document document = XmlUtil . getRawXml ( fileName , input , input ) ; <nl> final NodeList sources = document . getElementsByTagName ( " tr " ) ; <nl> String lastRuleName = null ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> index 8f442a1 . . 82d7a99 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> @ @ - 204 , 6 + 204 , 13 @ @ public class CommonUtilsTest { <nl> } <nl> <nl> @ Test <nl> + public void testGetFileExtensionForFileNameWithoutExtension ( ) { <nl> + final String fileNameWithoutExtension = " file " ; <nl> + final String extension = CommonUtils . getFileExtension ( fileNameWithoutExtension ) ; <nl> + assertEquals ( " " , extension ) ; <nl> + } <nl> + <nl> + @ Test <nl> @ PrepareForTest ( { CommonUtils . class , CommonUtilsTest . class } ) <nl> @ SuppressWarnings ( " unchecked " ) <nl> public void testLoadSuppressionsUriSyntaxException ( ) throws Exception { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputExtendAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputExtendAnnotation . java <nl> index 09792fb . . 09e7100 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputExtendAnnotation . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputExtendAnnotation . java <nl> @ @ - 16 , 8 + 16 , 6 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . javadoc ; <nl> <nl> - import com . google . common . annotations . GwtCompatible ; <nl> - import com . google . common . annotations . GwtIncompatible ; <nl> import com . google . common . collect . Multiset ; <nl> import com . google . common . collect . Multiset . Entry ; <nl> <nl> @ @ - 36 , 7 + 34 , 7 @ @ import java . util . List ; <nl> * <nl> * @ author Chris Povirk <nl> * / <nl> - @ GwtCompatible ( emulated = true ) <nl> + @ SuppressWarnings ( value = " unchecked " ) <nl> public abstract class InputExtendAnnotation < E > <nl> { <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyTypesAndCycles . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyTypesAndCycles . java <nl> index e1794a3 . . 0309eca 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyTypesAndCycles . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyTypesAndCycles . java <nl> @ @ - 12 , 7 + 12 , 7 @ @ import java . lang . annotation . Target ; <nl> import java . util . function . Function ; <nl> import java . util . function . Supplier ; <nl> <nl> - import com . google . common . annotations . GwtCompatible ; <nl> + <nl> <nl> class myFoo <nl> { <nl> @ @ - 56 , 7 + 56 , 7 @ @ class WithEmptyAnonymous <nl> @ Target ( <nl> ElementType . ANNOTATION _ TYPE ) <nl> @ Documented <nl> - @ GwtCompatible <nl> + @ Deprecated <nl> @ interface Beta { } <nl> @ interface MapFeature { <nl> 	 @ interface Require {
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> index dae6cd4 . . 348d5d0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> @ @ - 58 , 8 + 58 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> public void testAllChecksWithDefaultConfiguration ( ) throws Exception { <nl> <nl> final Set < Class < ? > > checkstyleChecks = getCheckstyleChecks ( ) ; <nl> - final String inputFilePath = " src / test / resources - noncompilable / " <nl> - + " com / puppycrawl / tools / checkstyle / InputDefaultConfig . java " ; <nl> + final String inputFilePath = getNonCompilablePath ( " InputDefaultConfig . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> for ( Class < ? > check : checkstyleChecks ) { <nl> @ @ - 69 , 8 + 68 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> / / Checks which have Check as a parent . <nl> if ( check . equals ( ImportControlCheck . class ) ) { <nl> / / ImportControlCheck must have the import control configuration file to avoid violation . <nl> - checkConfig . addAttribute ( " file " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ complete . xml " ) ; <nl> + checkConfig . addAttribute ( " file " , getPath ( " import - control _ complete . xml " ) ) ; <nl> } <nl> checker = createChecker ( checkConfig ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index cfa3873 . . c30edb7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 44 , 6 + 44 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> * @ author lkuehne <nl> * / <nl> public class ConfigurationLoaderTest { <nl> + private static String getConfigPath ( String filename ) { <nl> + return " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + filename ; <nl> + } <nl> <nl> private static Configuration loadConfiguration ( String name ) <nl> throws CheckstyleException { <nl> @ @ - 52 , 8 + 55 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> private static Configuration loadConfiguration ( <nl> String name , Properties props ) throws CheckstyleException { <nl> - final String fName = <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + name ; <nl> + final String fName = getConfigPath ( name ) ; <nl> <nl> return ConfigurationLoader . loadConfiguration ( <nl> fName , new PropertiesExpander ( props ) ) ; <nl> @ @ - 66 , 7 + 68 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> / / load config that ' s only found in the classpath <nl> final DefaultConfiguration config = ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / checkstyle _ checks . xml " , new PropertiesExpander ( props ) ) ; <nl> + getConfigPath ( " checkstyle _ checks . xml " ) , new PropertiesExpander ( props ) ) ; <nl> <nl> / / verify the root , and property substitution <nl> final Properties attributes = new Properties ( ) ; <nl> @ @ - 334 , 8 + 336 , 7 @ @ public class ConfigurationLoaderTest { <nl> final Properties props = new Properties ( ) ; <nl> props . setProperty ( " checkstyle . basedir " , " basedir " ) ; <nl> <nl> - final File file = new File ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / subdir / including . xml " ) ; <nl> + final File file = new File ( getConfigPath ( " subdir / including . xml " ) ) ; <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> file . toURI ( ) . toString ( ) , new PropertiesExpander ( props ) ) ; <nl> @ @ - 403 , 8 + 404 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " , <nl> + getConfigPath ( " config _ with _ ignore . xml " ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 416 , 8 + 416 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( new InputSource ( <nl> - new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " ) . toURI ( ) . toString ( ) ) , <nl> + new File ( getConfigPath ( " config _ with _ ignore . xml " ) ) . toURI ( ) . toString ( ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 429 , 8 + 428 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ checker _ ignore . xml " , <nl> + getConfigPath ( " config _ with _ checker _ ignore . xml " ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 460 , 9 + 458 , 7 @ @ public class ConfigurationLoaderTest { <nl> @ SuppressWarnings ( " deprecation " ) <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - new FileInputStream ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " ) , <nl> + new FileInputStream ( getConfigPath ( " config _ with _ ignore . xml " ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 806a1c1 . . 3b7bf29 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 55 , 6 + 55 , 14 @ @ public class MainTest { <nl> @ Rule <nl> public final SystemOutRule systemOut = new SystemOutRule ( ) . enableLog ( ) . mute ( ) ; <nl> <nl> + private static String getPath ( String filename ) { <nl> + return " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ; <nl> + } <nl> + <nl> + private static String getFilePath ( String filename ) throws IOException { <nl> + return new File ( getPath ( filename ) ) . getCanonicalPath ( ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { <nl> assertUtilsClassHasPrivateConstructor ( Main . class ) ; <nl> @ @ - 110 , 7 + 118 , 7 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 143 , 7 + 151 , 7 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 158 , 7 + 166 , 7 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , " / google _ checks . xml " , " - f " , " xmlp " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 198 , 8 + 206 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - non - existing - classname . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - non - existing - classname . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 213 , 8 + 221 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 223 , 10 + 231 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> final ResourceBundle compilationProperties = <nl> ResourceBundle . getBundle ( " checkstylecompilation " ) ; <nl> String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; <nl> @ @ - 239 , 9 + 244 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 255 , 9 + 260 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 266 , 10 + 271 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : " <nl> + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> @ @ - 280 , 8 + 282 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname2 . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 291 , 10 + 293 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : error : " <nl> + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> @ @ - 306 , 8 + 305 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 - error . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " config - classname2 - error . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 321 , 10 + 320 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , temporaryFolder . getRoot ( ) + " / output . txt " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 338 , 10 + 337 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 359 , 10 + 358 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 384 , 10 + 383 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 402 , 10 + 401 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - classname - prop . xml " , <nl> - " - p " , " src / test / resources / com / puppycrawl / tools / checkstyle / mycheckstyle . properties " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , <nl> + " - p " , getPath ( " mycheckstyle . properties " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 420 , 10 + 418 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - classname - prop . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , <nl> " - p " , " nonexisting . properties " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 443 , 9 + 440 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - Incorrect . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - Incorrect . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 522 , 10 + 518 , 7 @ @ public class MainTest { <nl> <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; <nl> @ @ - 541 , 8 + 534 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; <nl> + Main . main ( " - c " , getPath ( " config - filelength . xml " ) , <nl> + getPath ( " checks / metrics " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml <nl> new file mode 100644 <nl> index 0000000 . . 3bdfcad <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + < ? xml version = " 1 . 0 " ? > <nl> + < ! DOCTYPE import - control PUBLIC <nl> + " - / / Puppy Crawl / / DTD Import Control 1 . 0 / / EN " <nl> + " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 0 . dtd " > <nl> + <nl> + < import - control pkg = " com " > <nl> + < allow class = " some . class " / > <nl> + < disallow class = " another . class " local - only = " true " / > <nl> + < allow pkg = " some . pkg " / > <nl> + < disallow pkg = " another . pkg " local - only = " true " / > <nl> + < disallow pkg = " and . another . pkg " exact - match = " true " / > <nl> + < subpackage name = " puppycrawl " > <nl> + < disallow pkg = " some . pkg " / > <nl> + < disallow class = " some . class " / > <nl> + < / subpackage > <nl> + < / import - control > <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml 
 index ebcd921 . . 8aca176 100644 
 - - - a / config / checkstyle _ sevntu _ checks . xml 
 + + + b / config / checkstyle _ sevntu _ checks . xml 
 @ @ - 44 , 7 + 44 , 8 @ @ 
 com . google . common . base . Preconditions , com . google . common . base . Predicate , 
 com . google . common . io . CharSource , com . google . common . annotations . Beta , 
 com . google . common . collect . Queues , com . google . common . collect . Sets , 
 - com . google . common . collect . Lists " / > 
 + com . google . common . collect . Lists , com . google . common . annotations . GwtCompatible , 
 + com . google . common . io . Files , com . google . common . collect . TreeTraverser " / > 
 < / module > 
 < module name = " ForbidCCommentsInMethods " / > 
 < module name = " FinalizeImplementationCheck " / > 
 @ @ - 111 , 7 + 112 , 9 @ @ 
 com \ . google \ . common \ . base \ . Equivalence | com \ . google \ . common \ . base \ . Preconditions | 
 com \ . google \ . common \ . base \ . Optional | com \ . google \ . common \ . io \ . CharSource | 
 com \ . google \ . common \ . primitives . * | com \ . google \ . common \ . collect \ . Sets | 
 - com \ . google \ . common \ . collect \ . Queues | com \ . google \ . common \ . collect \ . Lists " / > 
 + com \ . google \ . common \ . collect \ . Queues | com \ . google \ . common \ . collect \ . Lists | 
 + com \ . google \ . common \ . annotations \ . GwtCompatible | com \ . google \ . common \ . io \ . Files | 
 + com \ . google \ . common \ . collect \ . TreeTraverser " / > 
 < property name = " forbiddenImportsExcludesRegexp " value = " " / > 
 < / module > 
 < module name = " ForbidCertainImports " > 
 diff - - git a / config / import - control . xml b / config / import - control . xml 
 index 92d1aaf . . a07897e 100644 
 - - - a / config / import - control . xml 
 + + + b / config / import - control . xml 
 @ @ - 70 , 7 + 70 , 6 @ @ 
 < subpackage name = " checks " > 
 < allow pkg = " com . puppycrawl . tools . checkstyle . checks " / > 
 < allow class = " com . puppycrawl . tools . checkstyle . Definitions " / > 
 - < allow class = " com . google . common . io . Files " local - only = " true " / > 
 < allow class = " com . google . common . io . Closeables " local - only = " true " / > 
 < allow class = " com . google . common . collect . HashMultiset " local - only = " true " / > 
 < allow class = " com . google . common . collect . HashMultimap " local - only = " true " / > 
 @ @ - 99 , 24 + 98 , 16 @ @ 
 < allow pkg = " com . puppycrawl . tools . checkstyle . grammars . javadoc " / > 
 < allow pkg = " java . lang . reflect " / > 
 < allow class = " com . google . common . base . CharMatcher " local - only = " true " / > 
 - < allow class = " com . google . common . annotations . GwtCompatible " local - only = " true " / > 
 - < allow class = " com . google . common . annotations . GwtIncompatible " local - only = " true " / > 
 < allow class = " com . google . common . collect . ImmutableList " local - only = " true " / > 
 < allow class = " com . google . common . collect . ImmutableMap " local - only = " true " / > 
 < allow class = " com . google . common . collect . ImmutableSortedSet " local - only = " true " / > 
 < allow class = " com . google . common . collect . Multiset " local - only = " true " / > 
 < / subpackage > 
 - < subpackage name = " whitespace " > 
 - < allow class = " com . google . common . annotations . GwtCompatible " local - only = " true " / > 
 - < / subpackage > 
 < subpackage name = " design " > 
 < allow class = " com . google . common . annotations . VisibleForTesting " local - only = " true " / > 
 < allow class = " com . google . common . collect . ImmutableList " local - only = " true " / > 
 < allow class = " com . google . common . collect . ImmutableMap " local - only = " true " / > 
 < / subpackage > 
 - < subpackage name = " regexp " > 
 - < allow class = " com . google . common . io . Files " local - only = " true " / > 
 - < / subpackage > 
 < subpackage name = " imports " > 
 < allow class = " com . google . common . collect . HashMultimap " local - only = " true " / > 
 < allow class = " com . google . common . collect . ImmutableSet " local - only = " true " / > 
 @ @ - 164 , 8 + 155 , 6 @ @ 
 
 < subpackage name = " internal " > 
 < allow class = " com . google . common . reflect . ClassPath " local - only = " true " / > 
 - < allow class = " com . google . common . io . Files " local - only = " true " / > 
 < allow class = " com . google . common . collect . FluentIterable " local - only = " true " / > 
 - < allow class = " com . google . common . collect . TreeTraverser " / > 
 < / subpackage > 
 < / import - control > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 index ab9a73a . . 5c41f09 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 @ @ - 44 , 7 + 44 , 6 @ @ import org . apache . commons . logging . LogFactory ; 
 import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . SetMultimap ; 
 import com . google . common . io . Closeables ; 
 - import com . google . common . io . Files ; 
 import com . puppycrawl . tools . checkstyle . Definitions ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 @ @ - 351 , 7 + 350 , 7 @ @ public class TranslationCheck extends AbstractFileSetCheck { 
 final String baseName = extractBaseName ( fileName ) ; 
 final Matcher baseNameMatcher = baseNameRegexp . matcher ( baseName ) ; 
 if ( baseNameMatcher . matches ( ) ) { 
 - final String extension = Files . getFileExtension ( fileName ) ; 
 + final String extension = CommonUtils . getFileExtension ( fileName ) ; 
 final String path = getPath ( currentFile . getAbsolutePath ( ) ) ; 
 final ResourceBundle newBundle = new ResourceBundle ( baseName , path , extension ) ; 
 final Optional < ResourceBundle > bundle = findBundle ( resourceBundles , newBundle ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java 
 index b98b6b9 . . 2d090fc 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import java . io . IOException ; 
 import java . util . List ; 
 import java . util . regex . Pattern ; 
 
 - import com . google . common . io . Files ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 @ @ - 272 , 7 + 271 , 7 @ @ public class RegexpOnFilenameCheck extends AbstractFileSetCheck { 
 String fileName = file . getName ( ) ; 
 
 if ( ignoreFileNameExtensions ) { 
 - fileName = Files . getNameWithoutExtension ( fileName ) ; 
 + fileName = CommonUtils . getFileNameWithoutExtension ( fileName ) ; 
 } 
 
 return fileName ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 index 3bc4b83 . . 2b00c14 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 @ @ - 425 , 4 + 425 , 46 @ @ public final class CommonUtils { 
 public static boolean isBlank ( String str ) { 
 return str = = null | | CharMatcher . WHITESPACE . matchesAllOf ( str ) ; 
 } 
 + 
 + / * * 
 + * Returns file name without extension . 
 + * We do not use the method from Guava library to reduce Checkstyle ' s dependencies 
 + * on external libraries . 
 + * @ param fullFilename file name with extension . 
 + * @ return file name without extension . 
 + * / 
 + public static String getFileNameWithoutExtension ( String fullFilename ) { 
 + final String fileName = new File ( fullFilename ) . getName ( ) ; 
 + final int dotIndex = fileName . lastIndexOf ( ' . ' ) ; 
 + final String fileNameWithoutExtension ; 
 + if ( dotIndex = = - 1 ) { 
 + fileNameWithoutExtension = fileName ; 
 + } 
 + else { 
 + fileNameWithoutExtension = fileName . substring ( 0 , dotIndex ) ; 
 + } 
 + return fileNameWithoutExtension ; 
 + } 
 + 
 + / * * 
 + * Returns file extension for the given file name 
 + * or empty string if file does not have an extension . 
 + * We do not use the method from Guava library to reduce Checkstyle ' s dependencies 
 + * on external libraries . 
 + * @ param fileNameWithExtension file name with extension . 
 + * @ return file extension for the given file name 
 + * or empty string if file does not have an extension . 
 + * / 
 + public static String getFileExtension ( String fileNameWithExtension ) { 
 + final String fileName = Paths . get ( fileNameWithExtension ) . toString ( ) ; 
 + final int dotIndex = fileName . lastIndexOf ( ' . ' ) ; 
 + final String extension ; 
 + if ( dotIndex = = - 1 ) { 
 + extension = " " ; 
 + } 
 + else { 
 + extension = fileName . substring ( dotIndex + 1 ) ; 
 + } 
 + return extension ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java 
 index 4bf0e89 . . 6a20e3b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java 
 @ @ - 91 , 7 + 91 , 7 @ @ public class JavadocMethodCheckTest extends BaseCheckTestSupport { 
 config . addAttribute ( " allowedAnnotations " , " MyAnnotation , Override " ) ; 
 config . addAttribute ( " minLineCount " , " 2 " ) ; 
 final String [ ] expected = { 
 - " 46 : 1 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + " 44 : 1 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 } ; 
 verify ( config , getPath ( " InputExtendAnnotation . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 index 71804ce . . ac5345e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 @ @ - 27 , 13 + 27 , 13 @ @ import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . MS 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . nio . charset . StandardCharsets ; 
 + import java . nio . file . Files ; 
 
 import org . junit . Before ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . TemporaryFolder ; 
 
 - import com . google . common . io . Files ; 
 import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 @ @ - 121 , 7 + 121 , 8 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { 
 } ; 
 
 final File file = temporaryFolder . newFile ( ) ; 
 - Files . write ( " first line \ r \ n second line \ n \ r third line " , file , StandardCharsets . UTF _ 8 ) ; 
 + Files . write ( file . toPath ( ) , 
 + " first line \ r \ n second line \ n \ r third line " . getBytes ( StandardCharsets . UTF _ 8 ) ) ; 
 
 verify ( checkConfig , file . getPath ( ) , expected ) ; 
 } 
 @ @ - 160 , 7 + 161 , 7 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { 
 } ; 
 
 final File file = temporaryFolder . newFile ( ) ; 
 - Files . write ( makeLargeXyString ( ) , file , StandardCharsets . UTF _ 8 ) ; 
 + Files . write ( file . toPath ( ) , makeLargeXyString ( ) . toString ( ) . getBytes ( StandardCharsets . UTF _ 8 ) ) ; 
 
 verify ( checkConfig , file . getPath ( ) , expected ) ; 
 } 
 @ @ - 175 , 7 + 176 , 7 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { 
 } ; 
 
 final File file = temporaryFolder . newFile ( ) ; 
 - Files . write ( " " , file , StandardCharsets . UTF _ 8 ) ; 
 + Files . write ( file . toPath ( ) , " " . getBytes ( StandardCharsets . UTF _ 8 ) ) ; 
 
 verify ( checkConfig , file . getPath ( ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java 
 index 1a4951d . . 2af998d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java 
 @ @ - 26 , 7 + 26 , 9 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . io . StringReader ; 
 import java . lang . reflect . Field ; 
 + import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 + import java . nio . file . Paths ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . HashSet ; 
 @ @ - 49 , 7 + 51 , 6 @ @ import org . w3c . dom . NodeList ; 
 import org . xml . sax . InputSource ; 
 
 import com . google . common . collect . ImmutableSet ; 
 - import com . google . common . io . Files ; 
 import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . ConfigurationLoader ; 
 import com . puppycrawl . tools . checkstyle . ModuleFactory ; 
 @ @ - 60 , 9 + 61 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 
 public class XDocsPagesTest { 
 - private static final File JAVA _ SOURCES _ DIRECTORY = new File ( " src / main / java " ) ; 
 - private static final String AVAILABLE _ CHECKS _ PATH = " src / xdocs / checks . xml " ; 
 - private static final File AVAILABLE _ CHECKS _ FILE = new File ( AVAILABLE _ CHECKS _ PATH ) ; 
 + private static final Path JAVA _ SOURCES _ DIRECTORY = Paths . get ( " src / main / java " ) ; 
 + private static final Path AVAILABLE _ CHECKS _ PATH = Paths . get ( " src / xdocs / checks . xml " ) ; 
 private static final String CHECK _ FILE _ NAME = " . + Check . java $ " ; 
 private static final String CHECK _ SUFFIX = " Check . java " ; 
 private static final String LINK _ TEMPLATE = 
 @ @ - 125 , 18 + 125 , 18 @ @ public class XDocsPagesTest { 
 
 @ Test 
 public void testAllChecksPresentOnAvailableChecksPage ( ) throws IOException { 
 - final String availableChecks = Files . toString ( AVAILABLE _ CHECKS _ FILE , UTF _ 8 ) ; 
 - for ( File file : Files . fileTreeTraverser ( ) . preOrderTraversal ( JAVA _ SOURCES _ DIRECTORY ) ) { 
 - final String fileName = file . getName ( ) ; 
 + final String availableChecks = new String ( Files . readAllBytes ( AVAILABLE _ CHECKS _ PATH ) , UTF _ 8 ) ; 
 + Files . walk ( JAVA _ SOURCES _ DIRECTORY ) . forEach ( filePath - > { 
 + final String fileName = filePath . getFileName ( ) . toString ( ) ; 
 if ( fileName . matches ( CHECK _ FILE _ NAME ) 
 & & ! CHECKS _ ON _ PAGE _ IGNORE _ LIST . contains ( fileName ) ) { 
 final String checkName = fileName . replace ( CHECK _ SUFFIX , " " ) ; 
 if ( ! isPresent ( availableChecks , checkName ) ) { 
 Assert . fail ( checkName + " is not correctly listed on Available Checks page " 
 - + " - add it to " + AVAILABLE _ CHECKS _ PATH ) ; 
 + + " - add it to " + AVAILABLE _ CHECKS _ PATH ) ; 
 } 
 } 
 - } 
 + } ) ; 
 } 
 
 private static boolean isPresent ( String availableChecks , String checkName ) { 
 @ @ - 147 , 9 + 147 , 8 @ @ public class XDocsPagesTest { 
 @ Test 
 public void testAllXmlExamples ( ) throws Exception { 
 for ( Path path : XDocUtil . getXdocsFilePaths ( ) ) { 
 - final File file = path . toFile ( ) ; 
 - final String input = Files . toString ( file , UTF _ 8 ) ; 
 - final String fileName = file . getName ( ) ; 
 + final String input = new String ( Files . readAllBytes ( path ) , UTF _ 8 ) ; 
 + final String fileName = path . getFileName ( ) . toString ( ) ; 
 
 final Document document = XmlUtil . getRawXml ( fileName , input , input ) ; 
 final NodeList sources = document . getElementsByTagName ( " source " ) ; 
 @ @ - 254 , 14 + 253 , 13 @ @ public class XDocsPagesTest { 
 final ModuleFactory moduleFactory = TestUtils . getPackageObjectFactory ( ) ; 
 
 for ( Path path : XDocUtil . getXdocsConfigFilePaths ( XDocUtil . getXdocsFilePaths ( ) ) ) { 
 - final File file = path . toFile ( ) ; 
 - final String fileName = file . getName ( ) ; 
 + final String fileName = path . getFileName ( ) . toString ( ) ; 
 
 if ( " config _ reporting . xml " . equals ( fileName ) ) { 
 continue ; 
 } 
 
 - final String input = Files . toString ( file , UTF _ 8 ) ; 
 + final String input = new String ( Files . readAllBytes ( path ) , UTF _ 8 ) ; 
 final Document document = XmlUtil . getRawXml ( fileName , input , input ) ; 
 final NodeList sources = document . getElementsByTagName ( " section " ) ; 
 String lastSectioName = null ; 
 @ @ - 767 , 9 + 765 , 8 @ @ public class XDocsPagesTest { 
 @ Test 
 public void testAllStyleRules ( ) throws Exception { 
 for ( Path path : XDocUtil . getXdocsStyleFilePaths ( XDocUtil . getXdocsFilePaths ( ) ) ) { 
 - final File file = path . toFile ( ) ; 
 - final String fileName = file . getName ( ) ; 
 - final String input = Files . toString ( file , UTF _ 8 ) ; 
 + final String fileName = path . getFileName ( ) . toString ( ) ; 
 + final String input = new String ( Files . readAllBytes ( path ) , UTF _ 8 ) ; 
 final Document document = XmlUtil . getRawXml ( fileName , input , input ) ; 
 final NodeList sources = document . getElementsByTagName ( " tr " ) ; 
 String lastRuleName = null ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 index 8f442a1 . . 82d7a99 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 @ @ - 204 , 6 + 204 , 13 @ @ public class CommonUtilsTest { 
 } 
 
 @ Test 
 + public void testGetFileExtensionForFileNameWithoutExtension ( ) { 
 + final String fileNameWithoutExtension = " file " ; 
 + final String extension = CommonUtils . getFileExtension ( fileNameWithoutExtension ) ; 
 + assertEquals ( " " , extension ) ; 
 + } 
 + 
 + @ Test 
 @ PrepareForTest ( { CommonUtils . class , CommonUtilsTest . class } ) 
 @ SuppressWarnings ( " unchecked " ) 
 public void testLoadSuppressionsUriSyntaxException ( ) throws Exception { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputExtendAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputExtendAnnotation . java 
 index 09792fb . . 09e7100 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputExtendAnnotation . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputExtendAnnotation . java 
 @ @ - 16 , 8 + 16 , 6 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . javadoc ; 
 
 - import com . google . common . annotations . GwtCompatible ; 
 - import com . google . common . annotations . GwtIncompatible ; 
 import com . google . common . collect . Multiset ; 
 import com . google . common . collect . Multiset . Entry ; 
 
 @ @ - 36 , 7 + 34 , 7 @ @ import java . util . List ; 
 * 
 * @ author Chris Povirk 
 * / 
 - @ GwtCompatible ( emulated = true ) 
 + @ SuppressWarnings ( value = " unchecked " ) 
 public abstract class InputExtendAnnotation < E > 
 { 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyTypesAndCycles . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyTypesAndCycles . java 
 index e1794a3 . . 0309eca 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyTypesAndCycles . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyTypesAndCycles . java 
 @ @ - 12 , 7 + 12 , 7 @ @ import java . lang . annotation . Target ; 
 import java . util . function . Function ; 
 import java . util . function . Supplier ; 
 
 - import com . google . common . annotations . GwtCompatible ; 
 + 
 
 class myFoo 
 { 
 @ @ - 56 , 7 + 56 , 7 @ @ class WithEmptyAnonymous 
 @ Target ( 
 ElementType . ANNOTATION _ TYPE ) 
 @ Documented 
 - @ GwtCompatible 
 + @ Deprecated 
 @ interface Beta { } 
 @ interface MapFeature { 
 	 @ interface Require {

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 index dae6cd4 . . 348d5d0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 @ @ - 58 , 8 + 58 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 public void testAllChecksWithDefaultConfiguration ( ) throws Exception { 
 
 final Set < Class < ? > > checkstyleChecks = getCheckstyleChecks ( ) ; 
 - final String inputFilePath = " src / test / resources - noncompilable / " 
 - + " com / puppycrawl / tools / checkstyle / InputDefaultConfig . java " ; 
 + final String inputFilePath = getNonCompilablePath ( " InputDefaultConfig . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 for ( Class < ? > check : checkstyleChecks ) { 
 @ @ - 69 , 8 + 68 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 / / Checks which have Check as a parent . 
 if ( check . equals ( ImportControlCheck . class ) ) { 
 / / ImportControlCheck must have the import control configuration file to avoid violation . 
 - checkConfig . addAttribute ( " file " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ complete . xml " ) ; 
 + checkConfig . addAttribute ( " file " , getPath ( " import - control _ complete . xml " ) ) ; 
 } 
 checker = createChecker ( checkConfig ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index cfa3873 . . c30edb7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 44 , 6 + 44 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 * @ author lkuehne 
 * / 
 public class ConfigurationLoaderTest { 
 + private static String getConfigPath ( String filename ) { 
 + return " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + filename ; 
 + } 
 
 private static Configuration loadConfiguration ( String name ) 
 throws CheckstyleException { 
 @ @ - 52 , 8 + 55 , 7 @ @ public class ConfigurationLoaderTest { 
 
 private static Configuration loadConfiguration ( 
 String name , Properties props ) throws CheckstyleException { 
 - final String fName = 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + name ; 
 + final String fName = getConfigPath ( name ) ; 
 
 return ConfigurationLoader . loadConfiguration ( 
 fName , new PropertiesExpander ( props ) ) ; 
 @ @ - 66 , 7 + 68 , 7 @ @ public class ConfigurationLoaderTest { 
 
 / / load config that ' s only found in the classpath 
 final DefaultConfiguration config = ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / checkstyle _ checks . xml " , new PropertiesExpander ( props ) ) ; 
 + getConfigPath ( " checkstyle _ checks . xml " ) , new PropertiesExpander ( props ) ) ; 
 
 / / verify the root , and property substitution 
 final Properties attributes = new Properties ( ) ; 
 @ @ - 334 , 8 + 336 , 7 @ @ public class ConfigurationLoaderTest { 
 final Properties props = new Properties ( ) ; 
 props . setProperty ( " checkstyle . basedir " , " basedir " ) ; 
 
 - final File file = new File ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / subdir / including . xml " ) ; 
 + final File file = new File ( getConfigPath ( " subdir / including . xml " ) ) ; 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 file . toURI ( ) . toString ( ) , new PropertiesExpander ( props ) ) ; 
 @ @ - 403 , 8 + 404 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " , 
 + getConfigPath ( " config _ with _ ignore . xml " ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 416 , 8 + 416 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( new InputSource ( 
 - new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " ) . toURI ( ) . toString ( ) ) , 
 + new File ( getConfigPath ( " config _ with _ ignore . xml " ) ) . toURI ( ) . toString ( ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 429 , 8 + 428 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ checker _ ignore . xml " , 
 + getConfigPath ( " config _ with _ checker _ ignore . xml " ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 460 , 9 + 458 , 7 @ @ public class ConfigurationLoaderTest { 
 @ SuppressWarnings ( " deprecation " ) 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - new FileInputStream ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " ) , 
 + new FileInputStream ( getConfigPath ( " config _ with _ ignore . xml " ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 806a1c1 . . 3b7bf29 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 55 , 6 + 55 , 14 @ @ public class MainTest { 
 @ Rule 
 public final SystemOutRule systemOut = new SystemOutRule ( ) . enableLog ( ) . mute ( ) ; 
 
 + private static String getPath ( String filename ) { 
 + return " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ; 
 + } 
 + 
 + private static String getFilePath ( String filename ) throws IOException { 
 + return new File ( getPath ( filename ) ) . getCanonicalPath ( ) ; 
 + } 
 + 
 @ Test 
 public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { 
 assertUtilsClassHasPrivateConstructor ( Main . class ) ; 
 @ @ - 110 , 7 + 118 , 7 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 143 , 7 + 151 , 7 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 158 , 7 + 166 , 7 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , " / google _ checks . xml " , " - f " , " xmlp " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 198 , 8 + 206 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - non - existing - classname . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - non - existing - classname . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 213 , 8 + 221 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 223 , 10 + 231 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 final ResourceBundle compilationProperties = 
 ResourceBundle . getBundle ( " checkstylecompilation " ) ; 
 String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; 
 @ @ - 239 , 9 + 244 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 255 , 9 + 260 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 266 , 10 + 271 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : " 
 + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 @ @ - 280 , 8 + 282 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname2 . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 291 , 10 + 293 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : error : " 
 + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 @ @ - 306 , 8 + 305 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 - error . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " config - classname2 - error . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 321 , 10 + 320 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , temporaryFolder . getRoot ( ) + " / output . txt " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 338 , 10 + 337 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 359 , 10 + 358 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 384 , 10 + 383 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 402 , 10 + 401 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - classname - prop . xml " , 
 - " - p " , " src / test / resources / com / puppycrawl / tools / checkstyle / mycheckstyle . properties " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , 
 + " - p " , getPath ( " mycheckstyle . properties " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 420 , 10 + 418 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - classname - prop . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , 
 " - p " , " nonexisting . properties " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 443 , 9 + 440 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - Incorrect . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - Incorrect . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 522 , 10 + 518 , 7 @ @ public class MainTest { 
 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; 
 StringBuilder sb = new StringBuilder ( ) ; 
 sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; 
 String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; 
 @ @ - 541 , 8 + 534 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; 
 + Main . main ( " - c " , getPath ( " config - filelength . xml " ) , 
 + getPath ( " checks / metrics " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml 
 new file mode 100644 
 index 0000000 . . 3bdfcad 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + < ? xml version = " 1 . 0 " ? > 
 + < ! DOCTYPE import - control PUBLIC 
 + " - / / Puppy Crawl / / DTD Import Control 1 . 0 / / EN " 
 + " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 0 . dtd " > 
 + 
 + < import - control pkg = " com " > 
 + < allow class = " some . class " / > 
 + < disallow class = " another . class " local - only = " true " / > 
 + < allow pkg = " some . pkg " / > 
 + < disallow pkg = " another . pkg " local - only = " true " / > 
 + < disallow pkg = " and . another . pkg " exact - match = " true " / > 
 + < subpackage name = " puppycrawl " > 
 + < disallow pkg = " some . pkg " / > 
 + < disallow class = " some . class " / > 
 + < / subpackage > 
 + < / import - control > 
 \ No newline at end of file
