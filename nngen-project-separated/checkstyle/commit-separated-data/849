BLEU SCORE: 0.06837203339116285

TEST MSG: Issue # 3933 : Split and Organize Checkstyle inputs by Test for NoLineWrap
GENERATED MSG: Issue # 1289 : ' EmptyLineSeparatorCheck ' refactored , UT coverage improved

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoLineWrapCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoLineWrapCheckTest . java <nl> index 168bc2f . . b3d4540 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoLineWrapCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoLineWrapCheckTest . java <nl> @ @ - 35 , 7 + 35 , 9 @ @ public class NoLineWrapCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " whitespace " + File . separator + filename ) ; <nl> + + " whitespace " + File . separator <nl> + + " nolinewrap " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoLineWrapBad . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoLineWrapBad . java <nl> deleted file mode 100644 <nl> index 5a768ef . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoLineWrapBad . java <nl> + + + / dev / null <nl> @ @ - 1 , 28 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . / / violation <nl> - checkstyle . checks . whitespace ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> - <nl> - import javax . accessibility . / / violation <nl> - AccessibleAttributeSequence ; <nl> - import java . util . concurrent . atomic . AtomicIntegerFieldUpdater ; <nl> - <nl> - import static java . math . / / violation <nl> - 	 	 BigInteger . ZERO ; <nl> - <nl> - public class / / violation <nl> - InputNoLineWrapBad { <nl> - <nl> - 	 public void <nl> - 	 fooMethod ( ) { <nl> - 	 	 final int <nl> - 	 	 foo = 0 ; <nl> - 	 } <nl> - } <nl> - <nl> - enum / / violation <nl> - FooFoo { <nl> - } <nl> - <nl> - interface <nl> - InterFoo { } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoLineWrapGood . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoLineWrapGood . java <nl> deleted file mode 100644 <nl> index 07e75e4 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoLineWrapGood . java <nl> + + + / dev / null <nl> @ @ - 1 , 15 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> - <nl> - import javax . accessibility . AccessibleAttributeSequence ; <nl> - import java . util . concurrent . atomic . AtomicIntegerFieldUpdater ; <nl> - <nl> - import static java . math . BigInteger . ZERO ; <nl> - <nl> - public class InputNoLineWrapGood { <nl> - <nl> - 	 public void fooMethod ( ) { <nl> - 	 	 / / <nl> - 	 } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nolinewrap / InputNoLineWrapBad . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nolinewrap / InputNoLineWrapBad . java <nl> new file mode 100644 <nl> index 0000000 . . 5b17912 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nolinewrap / InputNoLineWrapBad . java <nl> @ @ - 0 , 0 + 1 , 28 @ @ <nl> + package com . puppycrawl . tools . / / violation <nl> + checkstyle . checks . whitespace . nolinewrap ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> + <nl> + import javax . accessibility . / / violation <nl> + AccessibleAttributeSequence ; <nl> + import java . util . concurrent . atomic . AtomicIntegerFieldUpdater ; <nl> + <nl> + import static java . math . / / violation <nl> + 	 	 BigInteger . ZERO ; <nl> + <nl> + public class / / violation <nl> + InputNoLineWrapBad { <nl> + <nl> + 	 public void <nl> + 	 fooMethod ( ) { <nl> + 	 	 final int <nl> + 	 	 foo = 0 ; <nl> + 	 } <nl> + } <nl> + <nl> + enum / / violation <nl> + FooFoo { <nl> + } <nl> + <nl> + interface <nl> + InterFoo { } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nolinewrap / InputNoLineWrapGood . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nolinewrap / InputNoLineWrapGood . java <nl> new file mode 100644 <nl> index 0000000 . . 337f609 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nolinewrap / InputNoLineWrapGood . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . nolinewrap ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> + <nl> + import javax . accessibility . AccessibleAttributeSequence ; <nl> + import java . util . concurrent . atomic . AtomicIntegerFieldUpdater ; <nl> + <nl> + import static java . math . BigInteger . ZERO ; <nl> + <nl> + public class InputNoLineWrapGood { <nl> + <nl> + 	 public void fooMethod ( ) { <nl> + 	 	 / / <nl> + 	 } <nl> + }
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 5f43b18 . . bcae5fa 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1108 , 7 + 1108 , 6 @ @ <nl> < regex > < pattern > . * . checks . coding . IllegalTokenTextCheck < / pattern > < branchRate > 60 < / branchRate > < lineRate > 92 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . coding . IllegalTypeCheck < / pattern > < branchRate > 93 < / branchRate > < lineRate > 94 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . coding . InnerAssignmentCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . checks . coding . MissingCtorCheck < / pattern > < branchRate > 75 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . coding . ModifiedControlVariableCheck < / pattern > < branchRate > 91 < / branchRate > < lineRate > 97 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . coding . MultipleStringLiteralsCheck < / pattern > < branchRate > 90 < / branchRate > < lineRate > 96 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . coding . MultipleVariableDeclarationsCheck < / pattern > < branchRate > 96 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java <nl> index 69dd353 . . f2fa9db 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java <nl> @ @ - 22 , 7 + 22 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import com . puppycrawl . tools . checkstyle . Utils ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - <nl> import com . puppycrawl . tools . checkstyle . checks . DescendantTokenCheck ; <nl> <nl> / * * <nl> @ @ - 66 , 14 + 65 , 15 @ @ public class MissingCtorCheck extends DescendantTokenCheck { <nl> } <nl> <nl> @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - if ( modifiers ! = null <nl> - & & modifiers . branchContains ( TokenTypes . ABSTRACT ) ) { <nl> - / / should apply the check to abstract class <nl> - return ; <nl> + if ( ! modifiers . branchContains ( TokenTypes . ABSTRACT ) ) { <nl> + super . visitToken ( ast ) ; <nl> } <nl> - <nl> - super . visitToken ( ast ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheck . java <nl> index 21a8b4a . . 35f69c6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheck . java <nl> @ @ - 69 , 4 + 69 , 9 @ @ public class MissingSwitchDefaultCheck extends DescendantTokenCheck { <nl> public int [ ] getAcceptableTokens ( ) { <nl> return getDefaultTokens ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoLineWrapCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoLineWrapCheckTest . java 
 index 168bc2f . . b3d4540 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoLineWrapCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoLineWrapCheckTest . java 
 @ @ - 35 , 7 + 35 , 9 @ @ public class NoLineWrapCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " whitespace " + File . separator + filename ) ; 
 + + " whitespace " + File . separator 
 + + " nolinewrap " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoLineWrapBad . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoLineWrapBad . java 
 deleted file mode 100644 
 index 5a768ef . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoLineWrapBad . java 
 + + + / dev / null 
 @ @ - 1 , 28 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . / / violation 
 - checkstyle . checks . whitespace ; 
 - 
 - import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 - 
 - import javax . accessibility . / / violation 
 - AccessibleAttributeSequence ; 
 - import java . util . concurrent . atomic . AtomicIntegerFieldUpdater ; 
 - 
 - import static java . math . / / violation 
 - 	 	 BigInteger . ZERO ; 
 - 
 - public class / / violation 
 - InputNoLineWrapBad { 
 - 
 - 	 public void 
 - 	 fooMethod ( ) { 
 - 	 	 final int 
 - 	 	 foo = 0 ; 
 - 	 } 
 - } 
 - 
 - enum / / violation 
 - FooFoo { 
 - } 
 - 
 - interface 
 - InterFoo { } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoLineWrapGood . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoLineWrapGood . java 
 deleted file mode 100644 
 index 07e75e4 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoLineWrapGood . java 
 + + + / dev / null 
 @ @ - 1 , 15 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 - 
 - import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 - 
 - import javax . accessibility . AccessibleAttributeSequence ; 
 - import java . util . concurrent . atomic . AtomicIntegerFieldUpdater ; 
 - 
 - import static java . math . BigInteger . ZERO ; 
 - 
 - public class InputNoLineWrapGood { 
 - 
 - 	 public void fooMethod ( ) { 
 - 	 	 / / 
 - 	 } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nolinewrap / InputNoLineWrapBad . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nolinewrap / InputNoLineWrapBad . java 
 new file mode 100644 
 index 0000000 . . 5b17912 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nolinewrap / InputNoLineWrapBad . java 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + package com . puppycrawl . tools . / / violation 
 + checkstyle . checks . whitespace . nolinewrap ; 
 + 
 + import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 + 
 + import javax . accessibility . / / violation 
 + AccessibleAttributeSequence ; 
 + import java . util . concurrent . atomic . AtomicIntegerFieldUpdater ; 
 + 
 + import static java . math . / / violation 
 + 	 	 BigInteger . ZERO ; 
 + 
 + public class / / violation 
 + InputNoLineWrapBad { 
 + 
 + 	 public void 
 + 	 fooMethod ( ) { 
 + 	 	 final int 
 + 	 	 foo = 0 ; 
 + 	 } 
 + } 
 + 
 + enum / / violation 
 + FooFoo { 
 + } 
 + 
 + interface 
 + InterFoo { } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nolinewrap / InputNoLineWrapGood . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nolinewrap / InputNoLineWrapGood . java 
 new file mode 100644 
 index 0000000 . . 337f609 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nolinewrap / InputNoLineWrapGood . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . nolinewrap ; 
 + 
 + import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 + 
 + import javax . accessibility . AccessibleAttributeSequence ; 
 + import java . util . concurrent . atomic . AtomicIntegerFieldUpdater ; 
 + 
 + import static java . math . BigInteger . ZERO ; 
 + 
 + public class InputNoLineWrapGood { 
 + 
 + 	 public void fooMethod ( ) { 
 + 	 	 / / 
 + 	 } 
 + }

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 5f43b18 . . bcae5fa 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1108 , 7 + 1108 , 6 @ @ 
 < regex > < pattern > . * . checks . coding . IllegalTokenTextCheck < / pattern > < branchRate > 60 < / branchRate > < lineRate > 92 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . coding . IllegalTypeCheck < / pattern > < branchRate > 93 < / branchRate > < lineRate > 94 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . coding . InnerAssignmentCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 - < regex > < pattern > . * . checks . coding . MissingCtorCheck < / pattern > < branchRate > 75 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . coding . ModifiedControlVariableCheck < / pattern > < branchRate > 91 < / branchRate > < lineRate > 97 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . coding . MultipleStringLiteralsCheck < / pattern > < branchRate > 90 < / branchRate > < lineRate > 96 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . coding . MultipleVariableDeclarationsCheck < / pattern > < branchRate > 96 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java 
 index 69dd353 . . f2fa9db 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingCtorCheck . java 
 @ @ - 22 , 7 + 22 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import com . puppycrawl . tools . checkstyle . Utils ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - 
 import com . puppycrawl . tools . checkstyle . checks . DescendantTokenCheck ; 
 
 / * * 
 @ @ - 66 , 14 + 65 , 15 @ @ public class MissingCtorCheck extends DescendantTokenCheck { 
 } 
 
 @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + @ Override 
 public void visitToken ( DetailAST ast ) { 
 final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - if ( modifiers ! = null 
 - & & modifiers . branchContains ( TokenTypes . ABSTRACT ) ) { 
 - / / should apply the check to abstract class 
 - return ; 
 + if ( ! modifiers . branchContains ( TokenTypes . ABSTRACT ) ) { 
 + super . visitToken ( ast ) ; 
 } 
 - 
 - super . visitToken ( ast ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheck . java 
 index 21a8b4a . . 35f69c6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MissingSwitchDefaultCheck . java 
 @ @ - 69 , 4 + 69 , 9 @ @ public class MissingSwitchDefaultCheck extends DescendantTokenCheck { 
 public int [ ] getAcceptableTokens ( ) { 
 return getDefaultTokens ( ) ; 
 } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 }
