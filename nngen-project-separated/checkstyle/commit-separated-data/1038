BLEU SCORE: 0.03416211359799979

TEST MSG: Issue # 3575 : changed module setters for uri
GENERATED MSG: Added file extensions property to Checker & TreeWalker , issue # 25

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> index 83cd4b3 . . 93b7719 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import java . beans . PropertyDescriptor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> + import java . net . URI ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> import java . util . List ; <nl> @ @ - 67 , 6 + 68 , 19 @ @ public class AutomaticBean <nl> private static BeanUtilsBean createBeanUtilsBean ( ) { <nl> final ConvertUtilsBean cub = new ConvertUtilsBean ( ) ; <nl> <nl> + registerIntegralTypes ( cub ) ; <nl> + registerCustomTypes ( cub ) ; <nl> + <nl> + return new BeanUtilsBean ( cub , new PropertyUtilsBean ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Register basic types of JDK like boolean , int , and String to use with BeanUtils . All these <nl> + * types are found in the { @ code java . lang } package . <nl> + * @ param cub <nl> + * Instance of { @ link ConvertUtilsBean } to register types with . <nl> + * / <nl> + private static void registerIntegralTypes ( ConvertUtilsBean cub ) { <nl> cub . register ( new BooleanConverter ( ) , Boolean . TYPE ) ; <nl> cub . register ( new BooleanConverter ( ) , Boolean . class ) ; <nl> cub . register ( new ArrayConverter ( <nl> @ @ - 99 , 15 + 113 , 23 @ @ public class AutomaticBean <nl> cub . register ( new ShortConverter ( ) , Short . class ) ; <nl> cub . register ( new ArrayConverter ( short [ ] . class , new ShortConverter ( ) ) , <nl> short [ ] . class ) ; <nl> - cub . register ( new PatternConverter ( ) , Pattern . class ) ; <nl> - cub . register ( new ServerityLevelConverter ( ) , SeverityLevel . class ) ; <nl> - cub . register ( new ScopeConverter ( ) , Scope . class ) ; <nl> cub . register ( new RelaxedStringArrayConverter ( ) , String [ ] . class ) ; <nl> <nl> / / BigDecimal , BigInteger , Class , Date , String , Time , TimeStamp <nl> / / do not use defaults in the default configuration of ConvertUtilsBean <nl> + } <nl> <nl> - return new BeanUtilsBean ( cub , new PropertyUtilsBean ( ) ) ; <nl> + / * * <nl> + * Register custom types of JDK like URI and Checkstyle specific classes to use with BeanUtils . <nl> + * None of these types should be found in the { @ code java . lang } package . <nl> + * @ param cub <nl> + * Instance of { @ link ConvertUtilsBean } to register types with . <nl> + * / <nl> + private static void registerCustomTypes ( ConvertUtilsBean cub ) { <nl> + cub . register ( new PatternConverter ( ) , Pattern . class ) ; <nl> + cub . register ( new ServerityLevelConverter ( ) , SeverityLevel . class ) ; <nl> + cub . register ( new ScopeConverter ( ) , Scope . class ) ; <nl> + cub . register ( new UriConverter ( ) , URI . class ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 274 , 6 + 296 , 27 @ @ public class AutomaticBean <nl> } <nl> } <nl> <nl> + / * * A converter that converts strings to uri . * / <nl> + private static class UriConverter implements Converter { <nl> + @ SuppressWarnings ( { " unchecked " , " rawtypes " } ) <nl> + @ Override <nl> + public Object convert ( Class type , Object value ) { <nl> + final String url = value . toString ( ) ; <nl> + URI result = null ; <nl> + <nl> + if ( ! CommonUtils . isBlank ( url ) ) { <nl> + try { <nl> + result = CommonUtils . getUriByFilename ( url ) ; <nl> + } <nl> + catch ( CheckstyleException ex ) { <nl> + throw new ConversionException ( ex ) ; <nl> + } <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * A converter that does not care whether the array elements contain String <nl> * characters like ' * ' or ' _ ' . The normal ArrayConverter class has problems <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> index 8763c32 . . 765d1c3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> @ @ - 56 , 7 + 56 , 7 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck <nl> private final List < String > readerLines = new ArrayList < > ( ) ; <nl> <nl> / * * The file that contains the header to check against . * / <nl> - private String headerFile ; <nl> + private URI headerFile ; <nl> <nl> / * * Name of a charset to use for loading the header from a file . * / <nl> private String charset = System . getProperty ( " file . encoding " , " UTF - 8 " ) ; <nl> @ @ - 91 , 17 + 91 , 17 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck <nl> <nl> / * * <nl> * Set the header file to check against . <nl> - * @ param fileName the file that contains the header to check against . <nl> + * @ param uri the uri of the header to load . <nl> * @ throws CheckstyleException if fileName is empty . <nl> * / <nl> - public void setHeaderFile ( String fileName ) throws CheckstyleException { <nl> - if ( CommonUtils . isBlank ( fileName ) ) { <nl> + public void setHeaderFile ( URI uri ) throws CheckstyleException { <nl> + if ( uri = = null ) { <nl> throw new CheckstyleException ( <nl> " property ' headerFile ' is missing or invalid in module " <nl> + getConfiguration ( ) . getName ( ) ) ; <nl> } <nl> <nl> - headerFile = fileName ; <nl> + headerFile = uri ; <nl> } <nl> <nl> / * * <nl> @ @ - 112 , 9 + 112 , 8 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck <nl> checkHeaderNotInitialized ( ) ; <nl> Reader headerReader = null ; <nl> try { <nl> - final URI uri = CommonUtils . getUriByFilename ( headerFile ) ; <nl> headerReader = new InputStreamReader ( new BufferedInputStream ( <nl> - uri . toURL ( ) . openStream ( ) ) , charset ) ; <nl> + headerFile . toURL ( ) . openStream ( ) ) , charset ) ; <nl> loadHeader ( headerReader ) ; <nl> } <nl> catch ( final IOException ex ) { <nl> @ @ - 194 , 6 + 193 , 6 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck <nl> <nl> @ Override <nl> public Set < String > getExternalResourceLocations ( ) { <nl> - return Collections . singleton ( headerFile ) ; <nl> + return Collections . singleton ( headerFile . toString ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java <nl> index a28bb0c . . 2474c3e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java <nl> @ @ - 31 , 7 + 31 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . ExternalResourceHolder ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * Check that controls what packages can be imported in each package . Useful <nl> @ @ - 166 , 18 + 165 , 18 @ @ public class ImportControlCheck extends AbstractCheck implements ExternalResourc <nl> * Set the name for the file containing the import control <nl> * configuration . It can also be a URL or resource in the classpath . <nl> * It will cause the file to be loaded . <nl> - * @ param name the name of the file to load . <nl> + * @ param uri the uri of the file to load . <nl> * @ throws ConversionException on error loading the file . <nl> * / <nl> - public void setFile ( final String name ) { <nl> + public void setFile ( URI uri ) { <nl> / / Handle empty param <nl> - if ( ! CommonUtils . isBlank ( name ) ) { <nl> + if ( uri ! = null ) { <nl> try { <nl> - root = ImportControlLoader . load ( CommonUtils . getUriByFilename ( name ) ) ; <nl> - fileLocation = name ; <nl> + root = ImportControlLoader . load ( uri ) ; <nl> + fileLocation = uri . toString ( ) ; <nl> } <nl> catch ( final CheckstyleException ex ) { <nl> - throw new ConversionException ( UNABLE _ TO _ LOAD + name , ex ) ; <nl> + throw new ConversionException ( UNABLE _ TO _ LOAD + uri , ex ) ; <nl> } <nl> } <nl> } <nl> @ @ - 185 , 28 + 184 , 12 @ @ public class ImportControlCheck extends AbstractCheck implements ExternalResourc <nl> / * * <nl> * Set the parameter for the url containing the import control <nl> * configuration . It will cause the url to be loaded . <nl> - * @ param url the url of the file to load . <nl> + * @ param uri the uri of the file to load . <nl> * @ throws ConversionException on error loading the file . <nl> - * @ deprecated use { @ link # setFile ( String name ) } to load URLs instead <nl> + * @ deprecated use { @ link # setFile ( URI uri ) } to load URLs instead <nl> * / <nl> @ Deprecated <nl> - public void setUrl ( final String url ) { <nl> - / / Handle empty param <nl> - if ( ! CommonUtils . isBlank ( url ) ) { <nl> - final URI uri ; <nl> - try { <nl> - uri = URI . create ( url ) ; <nl> - } <nl> - catch ( final IllegalArgumentException ex ) { <nl> - throw new ConversionException ( " Syntax error in url " + url , ex ) ; <nl> - } <nl> - try { <nl> - root = ImportControlLoader . load ( uri ) ; <nl> - fileLocation = url ; <nl> - } <nl> - catch ( final CheckstyleException ex ) { <nl> - throw new ConversionException ( UNABLE _ TO _ LOAD + url , ex ) ; <nl> - } <nl> - } <nl> + public void setUrl ( URI uri ) { <nl> + setFile ( uri ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> index d27dc1a . . 3e933b6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> @ @ - 116 , 8 + 116 , 9 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { <nl> assertTrue ( ex . getMessage ( ) <nl> . startsWith ( " cannot initialize module " <nl> + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " <nl> - + " - Unable to find : " ) ) ; <nl> - assertTrue ( ex . getMessage ( ) . endsWith ( " nonExisting . file " ) ) ; <nl> + + " - illegal value " ) ) ; <nl> + assertTrue ( ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) <nl> + . startsWith ( " Unable to find : " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 230 , 7 + 231 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { <nl> PowerMockito . doThrow ( new IOException ( " expected exception " ) ) . when ( check , " loadHeader " , <nl> anyObject ( ) ) ; <nl> <nl> - check . setHeaderFile ( getPath ( " InputRegexpHeader1 . java " ) ) ; <nl> + check . setHeaderFile ( CommonUtils . getUriByFilename ( getPath ( " InputRegexpHeader1 . java " ) ) ) ; <nl> <nl> final Method loadHeaderFile = AbstractHeaderCheck . class . getDeclaredMethod ( " loadHeaderFile " ) ; <nl> loadHeaderFile . setAccessible ( true ) ; <nl> @ @ - 240 , 8 + 241 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { <nl> } <nl> catch ( InvocationTargetException ex ) { <nl> assertTrue ( ex . getCause ( ) instanceof CheckstyleException ) ; <nl> - assertEquals ( " unable to load header file " <nl> - + getPath ( " InputRegexpHeader1 . java " ) , ex . getCause ( ) . getMessage ( ) ) ; <nl> + assertTrue ( ex . getCause ( ) . getMessage ( ) . startsWith ( " unable to load header file " ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> index 66919a9 . . 6ca0cde 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> @ @ - 28 , 7 + 28 , 6 @ @ import static org . junit . Assert . fail ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> - import java . lang . reflect . InvocationTargetException ; <nl> <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> @ @ - 138 , 8 + 137 , 8 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { <nl> fail ( " Test should fail if exception was not thrown " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String message = getInvocationTargetExceptionMessage ( ex ) ; <nl> - assertTrue ( message . startsWith ( " Unable to load " ) ) ; <nl> + final String message = getCheckstyleExceptionMessage ( ex ) ; <nl> + assertTrue ( message . startsWith ( " Unable to find : " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 153 , 7 + 152 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { <nl> fail ( " Test should fail if exception was not thrown " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String message = getInvocationTargetExceptionMessage ( ex ) ; <nl> + final String message = getCheckstyleExceptionMessage ( ex ) ; <nl> assertTrue ( message . startsWith ( " Unable to load " ) ) ; <nl> } <nl> } <nl> @ @ - 256 , 7 + 255 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { <nl> fail ( " Test should fail if exception was not thrown " ) ; <nl> } <nl> catch ( final CheckstyleException ex ) { <nl> - final String message = getInvocationTargetExceptionMessage ( ex ) ; <nl> + final String message = getCheckstyleExceptionMessage ( ex ) ; <nl> assertTrue ( message . startsWith ( " Unable to load " ) ) ; <nl> } <nl> } <nl> @ @ - 272 , 8 + 271 , 8 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { <nl> fail ( " Test should fail if exception was not thrown " ) ; <nl> } <nl> catch ( final CheckstyleException ex ) { <nl> - final String message = getInvocationTargetExceptionMessage ( ex ) ; <nl> - assertTrue ( message . startsWith ( " Syntax error in url " ) ) ; <nl> + final String message = getCheckstyleExceptionMessage ( ex ) ; <nl> + assertTrue ( message . startsWith ( " Unable to find : " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 297 , 8 + 296 , 8 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { <nl> fail ( " Test should fail if exception was not thrown " ) ; <nl> } <nl> catch ( final CheckstyleException ex ) { <nl> - final String message = getInvocationTargetExceptionMessage ( ex ) ; <nl> - assertTrue ( message . startsWith ( " Unable to load " ) ) ; <nl> + final String message = getCheckstyleExceptionMessage ( ex ) ; <nl> + assertTrue ( message . startsWith ( " Unable to find : " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 322 , 7 + 321 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { <nl> fail ( " Test should fail if exception was not thrown " ) ; <nl> } <nl> catch ( final CheckstyleException ex ) { <nl> - final String message = getInvocationTargetExceptionMessage ( ex ) ; <nl> + final String message = getCheckstyleExceptionMessage ( ex ) ; <nl> assertTrue ( message . startsWith ( " Unable to load " ) ) ; <nl> } <nl> } <nl> @ @ - 382 , 8 + 381 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { <nl> * @ param exception Exception <nl> * @ return String message of original exception <nl> * / <nl> - private static String getInvocationTargetExceptionMessage ( CheckstyleException exception ) { <nl> - return ( ( InvocationTargetException ) exception . getCause ( ) . getCause ( ) ) <nl> - . getTargetException ( ) . getMessage ( ) ; <nl> + private static String getCheckstyleExceptionMessage ( CheckstyleException exception ) { <nl> + return exception . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java <nl> index 2fb7c5f . . 4270634 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . StringReader ; <nl> import java . lang . reflect . Field ; <nl> + import java . net . URI ; <nl> import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> import java . nio . file . Paths ; <nl> @ @ - 608 , 6 + 609 , 9 @ @ public class XDocsPagesTest { <nl> result = " String Set " ; <nl> } <nl> } <nl> + else if ( clss = = URI . class ) { <nl> + result = " URI " ; <nl> + } <nl> else if ( clss = = Pattern . class ) { <nl> result = " Regular Expression " ; <nl> } <nl> @ @ - 661 , 6 + 665 , 11 @ @ public class XDocsPagesTest { <nl> result = " { } " ; <nl> } <nl> } <nl> + else if ( clss = = URI . class ) { <nl> + if ( value ! = null ) { <nl> + result = ' " ' + value . toString ( ) + ' " ' ; <nl> + } <nl> + } <nl> else if ( clss = = Pattern . class ) { <nl> if ( value ! = null ) { <nl> result = ' " ' + value . toString ( ) . replace ( " \ n " , " \ \ n " ) . replace ( " \ t " , " \ \ t " ) <nl> diff - - git a / src / xdocs / config _ header . xml b / src / xdocs / config _ header . xml <nl> index 2cbe446 . . 03a856f 100644 <nl> - - - a / src / xdocs / config _ header . xml <nl> + + + b / src / xdocs / config _ header . xml <nl> @ @ - 63 , 7 + 63 , 7 @ @ line 5 : / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> < tr > <nl> < td > headerFile < / td > <nl> < td > name of the file containing the required header < / td > <nl> - < td > < a href = " property _ types . html # string " > string < / a > < / td > <nl> + < td > < a href = " property _ types . html # uri " > URI < / a > < / td > <nl> < td > < code > null < / code > < / td > <nl> < / tr > <nl> < tr > <nl> @ @ - 261 , 7 + 261 , 7 @ @ line 6 : ^ \ W * $ <nl> < tr > <nl> < td > headerFile < / td > <nl> < td > name of the file containing the required header < / td > <nl> - < td > < a href = " property _ types . html # string " > string < / a > < / td > <nl> + < td > < a href = " property _ types . html # uri " > URI < / a > < / td > <nl> < td > < code > null < / code > < / td > <nl> < / tr > <nl> < tr > <nl> diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml <nl> index 23c386b . . 4b1aca4 100644 <nl> - - - a / src / xdocs / config _ imports . xml <nl> + + + b / src / xdocs / config _ imports . xml <nl> @ @ - 710 , 7 + 710 , 7 @ @ import android . * ; <nl> It can be a regular file , URL or resource path . It will try loading <nl> the path as a URL first , then as a file , and finally as a resource . <nl> < / td > <nl> - < td > < a href = " property _ types . html # string " > string < / a > < / td > <nl> + < td > < a href = " property _ types . html # uri " > URI < / a > < / td > <nl> < td > < code > null < / code > < / td > <nl> < / tr > <nl> < tr > <nl> @ @ - 720 , 7 + 720 , 7 @ @ import android . * ; <nl> This property is deprecated . Please use the file property to load configurations <nl> from URLs . <nl> < / td > <nl> - < td > < a href = " property _ types . html # string " > string < / a > < / td > <nl> + < td > < a href = " property _ types . html # uri " > URI < / a > < / td > <nl> < td > < code > null < / code > < / td > <nl> < / tr > <nl> < / table > <nl> diff - - git a / src / xdocs / property _ types . xml b / src / xdocs / property _ types . xml <nl> index 11a5a3a . . 5c0668a5 100644 <nl> - - - a / src / xdocs / property _ types . xml <nl> + + + b / src / xdocs / property _ types . xml <nl> @ @ - 108 , 6 + 108 , 16 @ @ <nl> < / p > <nl> < / section > <nl> <nl> + < section name = " uri " > <nl> + < p > <nl> + This property represents a URI . The string representation is parsed using a custom <nl> + routine to analyze what type of URI the string is . <nl> + It can be a URL , regular file , or a resource path . It will try loading the path as <nl> + a URL first , then as a file that must exist , and then finally as a resource on the <nl> + classpath . <nl> + < / p > <nl> + < / section > <nl> + <nl> < section name = " parenPad " > <nl> < p > <nl> This property represents the policy for padding with white space . The
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> index a81ac42 . . 798a11f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . AnnotationUtility ; <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 28 , 6 + 29 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * Checks the number of parameters that a method or constructor has . <nl> * The default allowable number of parameters is 7 . <nl> * To change the number of allowable parameters , set property max . <nl> + * Allows to ignore number of parameters for methods with <nl> + * & # 064 ; { @ link java . lang . Override } annotation . <nl> * < / p > <nl> * < p > <nl> * An example of how to configure the check is : <nl> @ @ - 36 , 26 + 39 , 48 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * & lt ; module name = " ParameterNumber " / & gt ; <nl> * < / pre > <nl> * < p > <nl> - * An example of how to configure the check to allow 10 parameters is : <nl> + * An example of how to configure the check to allow 10 parameters <nl> + * and ignoring parameters for methods with & # 064 ; { @ link java . lang . Override } <nl> + * annotation is : <nl> * < / p > <nl> * < pre > <nl> * & lt ; module name = " ParameterNumber " & gt ; <nl> * & lt ; property name = " max " value = " 10 " / & gt ; <nl> + * & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> - <nl> + * Java code that will be ignored : <nl> + * < pre > <nl> + * < code > <nl> + * <nl> + * & # 064 ; Override <nl> + * public void needsLotsOfParameters ( int a , <nl> + * int b , int c , int d , int e , int f , int g , int h ) { <nl> + * . . . <nl> + * } <nl> + * < / code > <nl> + * < / pre > <nl> * @ author Oliver Burn <nl> * @ version 1 . 0 <nl> * / <nl> public class ParameterNumberCheck <nl> extends Check <nl> { <nl> + / * * { @ link Override Override } annotation name * / <nl> + private static final String OVERRIDE = " Override " ; <nl> + <nl> + / * * fully - qualified { @ link Override Override } annotation name * / <nl> + private static final String FQ _ OVERRIDE = " java . lang . " + OVERRIDE ; <nl> + <nl> / * * default maximum number of allowed parameters * / <nl> private static final int DEFAULT _ MAX _ PARAMETERS = 7 ; <nl> <nl> / * * the maximum number of allowed parameters * / <nl> private int mMax = DEFAULT _ MAX _ PARAMETERS ; <nl> <nl> + / * * ignore overridden methods * / <nl> + private boolean mIgnoreOverriddenMethods ; <nl> + <nl> / * * <nl> * Sets the maximum number of allowed parameters . <nl> * @ param aMax the max allowed parameters <nl> @ @ - 65 , 6 + 90 , 16 @ @ public class ParameterNumberCheck <nl> mMax = aMax ; <nl> } <nl> <nl> + / * * <nl> + * Ignore number of parameters for methods with <nl> + * & # 064 ; { @ link java . lang . Override } annotation . <nl> + * @ param aIgnoreOverriddenMethods set ignore overridden methods <nl> + * / <nl> + public void setIgnoreOverriddenMethods ( boolean aIgnoreOverriddenMethods ) <nl> + { <nl> + mIgnoreOverriddenMethods = aIgnoreOverriddenMethods ; <nl> + } <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> { <nl> @ @ - 76 , 9 + 111 , 23 @ @ public class ParameterNumberCheck <nl> { <nl> final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> final int count = params . getChildCount ( TokenTypes . PARAMETER _ DEF ) ; <nl> - if ( count > mMax ) { <nl> + if ( count > mMax & & ! ignoreNumberOfParameters ( aAST ) ) { <nl> final DetailAST name = aAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> log ( name . getLineNo ( ) , name . getColumnNo ( ) , " maxParam " , mMax , count ) ; <nl> } <nl> } <nl> + <nl> + / * * Determine whether to ignore number of parameters for the method . <nl> + * <nl> + * @ param aAST the token to process <nl> + * @ return true if this is overridden method and number of parameters should be ignored <nl> + * false otherwise <nl> + * / <nl> + private boolean ignoreNumberOfParameters ( DetailAST aAST ) <nl> + { <nl> + / / if you override a method , you have no power over the number of parameters <nl> + return mIgnoreOverriddenMethods <nl> + & & ( AnnotationUtility . containsAnnotation ( aAST , OVERRIDE ) <nl> + | | AnnotationUtility . containsAnnotation ( aAST , FQ _ OVERRIDE ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> index 7d293f2 . . 674b2b5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> @ @ - 63 , 4 + 63 , 17 @ @ public class ParameterNumberCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void shouldIgnoreMethodsWithOverrideAnnotation ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ParameterNumberCheck . class ) ; <nl> + checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 10 : More than 7 parameters ( found 8 ) . " , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputParameterNumberCheck . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java <nl> new file mode 100644 <nl> index 0000000 . . e90969d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + class InputParameterNumberCheckBase <nl> + { <nl> + / / method with many parameters <nl> + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + public class InputParameterNumberCheck extends InputParameterNumberCheckBase <nl> + { <nl> + @ Override <nl> + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ sizes . xml b / src / xdocs / config _ sizes . xml <nl> index 5ece323 . . d75c39e 100644 <nl> - - - a / src / xdocs / config _ sizes . xml <nl> + + + b / src / xdocs / config _ sizes . xml <nl> @ @ - 411 , 6 + 411 , 12 @ @ <nl> < td > 7 < / td > <nl> < / tr > <nl> < tr > <nl> + < td > ignoreOverriddenMethods < / td > <nl> + < td > Ignore number of parameters for methods with @ Override annotation < / td > <nl> + < td > < a href = " property _ types . html # boolean " > boolean < / a > < / td > <nl> + < td > false < / td > <nl> + < / tr > <nl> + < tr > <nl> < td > tokens < / td > <nl> < td > declarations to check < / td > <nl> <nl> @ @ - 448 , 6 + 454 , 28 @ @ <nl> & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> + < p > <nl> + To configure the check to ignore number of parameters for methods with @ Override or @ java . lang . Override annotation . <nl> + < / p > <nl> + < p > <nl> + Rationale : developer may need to override method with many parameters from 3 - rd party library . <nl> + In this case developer has no control over number of parameters . <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = " ParameterNumber " & gt ; <nl> + & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; <nl> + & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < p > <nl> + Java code example <nl> + < / p > <nl> + < source > <nl> + @ Override <nl> + public void needsLotsOfParameters ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + . . . <nl> + } <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Package " >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 index 83cd4b3 . . 93b7719 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 
 import java . beans . PropertyDescriptor ; 
 import java . lang . reflect . InvocationTargetException ; 
 + import java . net . URI ; 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 import java . util . List ; 
 @ @ - 67 , 6 + 68 , 19 @ @ public class AutomaticBean 
 private static BeanUtilsBean createBeanUtilsBean ( ) { 
 final ConvertUtilsBean cub = new ConvertUtilsBean ( ) ; 
 
 + registerIntegralTypes ( cub ) ; 
 + registerCustomTypes ( cub ) ; 
 + 
 + return new BeanUtilsBean ( cub , new PropertyUtilsBean ( ) ) ; 
 + } 
 + 
 + / * * 
 + * Register basic types of JDK like boolean , int , and String to use with BeanUtils . All these 
 + * types are found in the { @ code java . lang } package . 
 + * @ param cub 
 + * Instance of { @ link ConvertUtilsBean } to register types with . 
 + * / 
 + private static void registerIntegralTypes ( ConvertUtilsBean cub ) { 
 cub . register ( new BooleanConverter ( ) , Boolean . TYPE ) ; 
 cub . register ( new BooleanConverter ( ) , Boolean . class ) ; 
 cub . register ( new ArrayConverter ( 
 @ @ - 99 , 15 + 113 , 23 @ @ public class AutomaticBean 
 cub . register ( new ShortConverter ( ) , Short . class ) ; 
 cub . register ( new ArrayConverter ( short [ ] . class , new ShortConverter ( ) ) , 
 short [ ] . class ) ; 
 - cub . register ( new PatternConverter ( ) , Pattern . class ) ; 
 - cub . register ( new ServerityLevelConverter ( ) , SeverityLevel . class ) ; 
 - cub . register ( new ScopeConverter ( ) , Scope . class ) ; 
 cub . register ( new RelaxedStringArrayConverter ( ) , String [ ] . class ) ; 
 
 / / BigDecimal , BigInteger , Class , Date , String , Time , TimeStamp 
 / / do not use defaults in the default configuration of ConvertUtilsBean 
 + } 
 
 - return new BeanUtilsBean ( cub , new PropertyUtilsBean ( ) ) ; 
 + / * * 
 + * Register custom types of JDK like URI and Checkstyle specific classes to use with BeanUtils . 
 + * None of these types should be found in the { @ code java . lang } package . 
 + * @ param cub 
 + * Instance of { @ link ConvertUtilsBean } to register types with . 
 + * / 
 + private static void registerCustomTypes ( ConvertUtilsBean cub ) { 
 + cub . register ( new PatternConverter ( ) , Pattern . class ) ; 
 + cub . register ( new ServerityLevelConverter ( ) , SeverityLevel . class ) ; 
 + cub . register ( new ScopeConverter ( ) , Scope . class ) ; 
 + cub . register ( new UriConverter ( ) , URI . class ) ; 
 } 
 
 / * * 
 @ @ - 274 , 6 + 296 , 27 @ @ public class AutomaticBean 
 } 
 } 
 
 + / * * A converter that converts strings to uri . * / 
 + private static class UriConverter implements Converter { 
 + @ SuppressWarnings ( { " unchecked " , " rawtypes " } ) 
 + @ Override 
 + public Object convert ( Class type , Object value ) { 
 + final String url = value . toString ( ) ; 
 + URI result = null ; 
 + 
 + if ( ! CommonUtils . isBlank ( url ) ) { 
 + try { 
 + result = CommonUtils . getUriByFilename ( url ) ; 
 + } 
 + catch ( CheckstyleException ex ) { 
 + throw new ConversionException ( ex ) ; 
 + } 
 + } 
 + 
 + return result ; 
 + } 
 + } 
 + 
 / * * 
 * A converter that does not care whether the array elements contain String 
 * characters like ' * ' or ' _ ' . The normal ArrayConverter class has problems 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 index 8763c32 . . 765d1c3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 @ @ - 56 , 7 + 56 , 7 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck 
 private final List < String > readerLines = new ArrayList < > ( ) ; 
 
 / * * The file that contains the header to check against . * / 
 - private String headerFile ; 
 + private URI headerFile ; 
 
 / * * Name of a charset to use for loading the header from a file . * / 
 private String charset = System . getProperty ( " file . encoding " , " UTF - 8 " ) ; 
 @ @ - 91 , 17 + 91 , 17 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck 
 
 / * * 
 * Set the header file to check against . 
 - * @ param fileName the file that contains the header to check against . 
 + * @ param uri the uri of the header to load . 
 * @ throws CheckstyleException if fileName is empty . 
 * / 
 - public void setHeaderFile ( String fileName ) throws CheckstyleException { 
 - if ( CommonUtils . isBlank ( fileName ) ) { 
 + public void setHeaderFile ( URI uri ) throws CheckstyleException { 
 + if ( uri = = null ) { 
 throw new CheckstyleException ( 
 " property ' headerFile ' is missing or invalid in module " 
 + getConfiguration ( ) . getName ( ) ) ; 
 } 
 
 - headerFile = fileName ; 
 + headerFile = uri ; 
 } 
 
 / * * 
 @ @ - 112 , 9 + 112 , 8 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck 
 checkHeaderNotInitialized ( ) ; 
 Reader headerReader = null ; 
 try { 
 - final URI uri = CommonUtils . getUriByFilename ( headerFile ) ; 
 headerReader = new InputStreamReader ( new BufferedInputStream ( 
 - uri . toURL ( ) . openStream ( ) ) , charset ) ; 
 + headerFile . toURL ( ) . openStream ( ) ) , charset ) ; 
 loadHeader ( headerReader ) ; 
 } 
 catch ( final IOException ex ) { 
 @ @ - 194 , 6 + 193 , 6 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck 
 
 @ Override 
 public Set < String > getExternalResourceLocations ( ) { 
 - return Collections . singleton ( headerFile ) ; 
 + return Collections . singleton ( headerFile . toString ( ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java 
 index a28bb0c . . 2474c3e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheck . java 
 @ @ - 31 , 7 + 31 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . ExternalResourceHolder ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * Check that controls what packages can be imported in each package . Useful 
 @ @ - 166 , 18 + 165 , 18 @ @ public class ImportControlCheck extends AbstractCheck implements ExternalResourc 
 * Set the name for the file containing the import control 
 * configuration . It can also be a URL or resource in the classpath . 
 * It will cause the file to be loaded . 
 - * @ param name the name of the file to load . 
 + * @ param uri the uri of the file to load . 
 * @ throws ConversionException on error loading the file . 
 * / 
 - public void setFile ( final String name ) { 
 + public void setFile ( URI uri ) { 
 / / Handle empty param 
 - if ( ! CommonUtils . isBlank ( name ) ) { 
 + if ( uri ! = null ) { 
 try { 
 - root = ImportControlLoader . load ( CommonUtils . getUriByFilename ( name ) ) ; 
 - fileLocation = name ; 
 + root = ImportControlLoader . load ( uri ) ; 
 + fileLocation = uri . toString ( ) ; 
 } 
 catch ( final CheckstyleException ex ) { 
 - throw new ConversionException ( UNABLE _ TO _ LOAD + name , ex ) ; 
 + throw new ConversionException ( UNABLE _ TO _ LOAD + uri , ex ) ; 
 } 
 } 
 } 
 @ @ - 185 , 28 + 184 , 12 @ @ public class ImportControlCheck extends AbstractCheck implements ExternalResourc 
 / * * 
 * Set the parameter for the url containing the import control 
 * configuration . It will cause the url to be loaded . 
 - * @ param url the url of the file to load . 
 + * @ param uri the uri of the file to load . 
 * @ throws ConversionException on error loading the file . 
 - * @ deprecated use { @ link # setFile ( String name ) } to load URLs instead 
 + * @ deprecated use { @ link # setFile ( URI uri ) } to load URLs instead 
 * / 
 @ Deprecated 
 - public void setUrl ( final String url ) { 
 - / / Handle empty param 
 - if ( ! CommonUtils . isBlank ( url ) ) { 
 - final URI uri ; 
 - try { 
 - uri = URI . create ( url ) ; 
 - } 
 - catch ( final IllegalArgumentException ex ) { 
 - throw new ConversionException ( " Syntax error in url " + url , ex ) ; 
 - } 
 - try { 
 - root = ImportControlLoader . load ( uri ) ; 
 - fileLocation = url ; 
 - } 
 - catch ( final CheckstyleException ex ) { 
 - throw new ConversionException ( UNABLE _ TO _ LOAD + url , ex ) ; 
 - } 
 - } 
 + public void setUrl ( URI uri ) { 
 + setFile ( uri ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 index d27dc1a . . 3e933b6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 @ @ - 116 , 8 + 116 , 9 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { 
 assertTrue ( ex . getMessage ( ) 
 . startsWith ( " cannot initialize module " 
 + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " 
 - + " - Unable to find : " ) ) ; 
 - assertTrue ( ex . getMessage ( ) . endsWith ( " nonExisting . file " ) ) ; 
 + + " - illegal value " ) ) ; 
 + assertTrue ( ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) 
 + . startsWith ( " Unable to find : " ) ) ; 
 } 
 } 
 
 @ @ - 230 , 7 + 231 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { 
 PowerMockito . doThrow ( new IOException ( " expected exception " ) ) . when ( check , " loadHeader " , 
 anyObject ( ) ) ; 
 
 - check . setHeaderFile ( getPath ( " InputRegexpHeader1 . java " ) ) ; 
 + check . setHeaderFile ( CommonUtils . getUriByFilename ( getPath ( " InputRegexpHeader1 . java " ) ) ) ; 
 
 final Method loadHeaderFile = AbstractHeaderCheck . class . getDeclaredMethod ( " loadHeaderFile " ) ; 
 loadHeaderFile . setAccessible ( true ) ; 
 @ @ - 240 , 8 + 241 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { 
 } 
 catch ( InvocationTargetException ex ) { 
 assertTrue ( ex . getCause ( ) instanceof CheckstyleException ) ; 
 - assertEquals ( " unable to load header file " 
 - + getPath ( " InputRegexpHeader1 . java " ) , ex . getCause ( ) . getMessage ( ) ) ; 
 + assertTrue ( ex . getCause ( ) . getMessage ( ) . startsWith ( " unable to load header file " ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 index 66919a9 . . 6ca0cde 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 @ @ - 28 , 7 + 28 , 6 @ @ import static org . junit . Assert . fail ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 - import java . lang . reflect . InvocationTargetException ; 
 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 @ @ - 138 , 8 + 137 , 8 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { 
 fail ( " Test should fail if exception was not thrown " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String message = getInvocationTargetExceptionMessage ( ex ) ; 
 - assertTrue ( message . startsWith ( " Unable to load " ) ) ; 
 + final String message = getCheckstyleExceptionMessage ( ex ) ; 
 + assertTrue ( message . startsWith ( " Unable to find : " ) ) ; 
 } 
 } 
 
 @ @ - 153 , 7 + 152 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { 
 fail ( " Test should fail if exception was not thrown " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String message = getInvocationTargetExceptionMessage ( ex ) ; 
 + final String message = getCheckstyleExceptionMessage ( ex ) ; 
 assertTrue ( message . startsWith ( " Unable to load " ) ) ; 
 } 
 } 
 @ @ - 256 , 7 + 255 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { 
 fail ( " Test should fail if exception was not thrown " ) ; 
 } 
 catch ( final CheckstyleException ex ) { 
 - final String message = getInvocationTargetExceptionMessage ( ex ) ; 
 + final String message = getCheckstyleExceptionMessage ( ex ) ; 
 assertTrue ( message . startsWith ( " Unable to load " ) ) ; 
 } 
 } 
 @ @ - 272 , 8 + 271 , 8 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { 
 fail ( " Test should fail if exception was not thrown " ) ; 
 } 
 catch ( final CheckstyleException ex ) { 
 - final String message = getInvocationTargetExceptionMessage ( ex ) ; 
 - assertTrue ( message . startsWith ( " Syntax error in url " ) ) ; 
 + final String message = getCheckstyleExceptionMessage ( ex ) ; 
 + assertTrue ( message . startsWith ( " Unable to find : " ) ) ; 
 } 
 } 
 
 @ @ - 297 , 8 + 296 , 8 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { 
 fail ( " Test should fail if exception was not thrown " ) ; 
 } 
 catch ( final CheckstyleException ex ) { 
 - final String message = getInvocationTargetExceptionMessage ( ex ) ; 
 - assertTrue ( message . startsWith ( " Unable to load " ) ) ; 
 + final String message = getCheckstyleExceptionMessage ( ex ) ; 
 + assertTrue ( message . startsWith ( " Unable to find : " ) ) ; 
 } 
 } 
 
 @ @ - 322 , 7 + 321 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { 
 fail ( " Test should fail if exception was not thrown " ) ; 
 } 
 catch ( final CheckstyleException ex ) { 
 - final String message = getInvocationTargetExceptionMessage ( ex ) ; 
 + final String message = getCheckstyleExceptionMessage ( ex ) ; 
 assertTrue ( message . startsWith ( " Unable to load " ) ) ; 
 } 
 } 
 @ @ - 382 , 8 + 381 , 7 @ @ public class ImportControlCheckTest extends BaseCheckTestSupport { 
 * @ param exception Exception 
 * @ return String message of original exception 
 * / 
 - private static String getInvocationTargetExceptionMessage ( CheckstyleException exception ) { 
 - return ( ( InvocationTargetException ) exception . getCause ( ) . getCause ( ) ) 
 - . getTargetException ( ) . getMessage ( ) ; 
 + private static String getCheckstyleExceptionMessage ( CheckstyleException exception ) { 
 + return exception . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java 
 index 2fb7c5f . . 4270634 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . io . StringReader ; 
 import java . lang . reflect . Field ; 
 + import java . net . URI ; 
 import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 import java . nio . file . Paths ; 
 @ @ - 608 , 6 + 609 , 9 @ @ public class XDocsPagesTest { 
 result = " String Set " ; 
 } 
 } 
 + else if ( clss = = URI . class ) { 
 + result = " URI " ; 
 + } 
 else if ( clss = = Pattern . class ) { 
 result = " Regular Expression " ; 
 } 
 @ @ - 661 , 6 + 665 , 11 @ @ public class XDocsPagesTest { 
 result = " { } " ; 
 } 
 } 
 + else if ( clss = = URI . class ) { 
 + if ( value ! = null ) { 
 + result = ' " ' + value . toString ( ) + ' " ' ; 
 + } 
 + } 
 else if ( clss = = Pattern . class ) { 
 if ( value ! = null ) { 
 result = ' " ' + value . toString ( ) . replace ( " \ n " , " \ \ n " ) . replace ( " \ t " , " \ \ t " ) 
 diff - - git a / src / xdocs / config _ header . xml b / src / xdocs / config _ header . xml 
 index 2cbe446 . . 03a856f 100644 
 - - - a / src / xdocs / config _ header . xml 
 + + + b / src / xdocs / config _ header . xml 
 @ @ - 63 , 7 + 63 , 7 @ @ line 5 : / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 < tr > 
 < td > headerFile < / td > 
 < td > name of the file containing the required header < / td > 
 - < td > < a href = " property _ types . html # string " > string < / a > < / td > 
 + < td > < a href = " property _ types . html # uri " > URI < / a > < / td > 
 < td > < code > null < / code > < / td > 
 < / tr > 
 < tr > 
 @ @ - 261 , 7 + 261 , 7 @ @ line 6 : ^ \ W * $ 
 < tr > 
 < td > headerFile < / td > 
 < td > name of the file containing the required header < / td > 
 - < td > < a href = " property _ types . html # string " > string < / a > < / td > 
 + < td > < a href = " property _ types . html # uri " > URI < / a > < / td > 
 < td > < code > null < / code > < / td > 
 < / tr > 
 < tr > 
 diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml 
 index 23c386b . . 4b1aca4 100644 
 - - - a / src / xdocs / config _ imports . xml 
 + + + b / src / xdocs / config _ imports . xml 
 @ @ - 710 , 7 + 710 , 7 @ @ import android . * ; 
 It can be a regular file , URL or resource path . It will try loading 
 the path as a URL first , then as a file , and finally as a resource . 
 < / td > 
 - < td > < a href = " property _ types . html # string " > string < / a > < / td > 
 + < td > < a href = " property _ types . html # uri " > URI < / a > < / td > 
 < td > < code > null < / code > < / td > 
 < / tr > 
 < tr > 
 @ @ - 720 , 7 + 720 , 7 @ @ import android . * ; 
 This property is deprecated . Please use the file property to load configurations 
 from URLs . 
 < / td > 
 - < td > < a href = " property _ types . html # string " > string < / a > < / td > 
 + < td > < a href = " property _ types . html # uri " > URI < / a > < / td > 
 < td > < code > null < / code > < / td > 
 < / tr > 
 < / table > 
 diff - - git a / src / xdocs / property _ types . xml b / src / xdocs / property _ types . xml 
 index 11a5a3a . . 5c0668a5 100644 
 - - - a / src / xdocs / property _ types . xml 
 + + + b / src / xdocs / property _ types . xml 
 @ @ - 108 , 6 + 108 , 16 @ @ 
 < / p > 
 < / section > 
 
 + < section name = " uri " > 
 + < p > 
 + This property represents a URI . The string representation is parsed using a custom 
 + routine to analyze what type of URI the string is . 
 + It can be a URL , regular file , or a resource path . It will try loading the path as 
 + a URL first , then as a file that must exist , and then finally as a resource on the 
 + classpath . 
 + < / p > 
 + < / section > 
 + 
 < section name = " parenPad " > 
 < p > 
 This property represents the policy for padding with white space . The

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 index a81ac42 . . 798a11f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 
 + import com . puppycrawl . tools . checkstyle . api . AnnotationUtility ; 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 28 , 6 + 29 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * Checks the number of parameters that a method or constructor has . 
 * The default allowable number of parameters is 7 . 
 * To change the number of allowable parameters , set property max . 
 + * Allows to ignore number of parameters for methods with 
 + * & # 064 ; { @ link java . lang . Override } annotation . 
 * < / p > 
 * < p > 
 * An example of how to configure the check is : 
 @ @ - 36 , 26 + 39 , 48 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * & lt ; module name = " ParameterNumber " / & gt ; 
 * < / pre > 
 * < p > 
 - * An example of how to configure the check to allow 10 parameters is : 
 + * An example of how to configure the check to allow 10 parameters 
 + * and ignoring parameters for methods with & # 064 ; { @ link java . lang . Override } 
 + * annotation is : 
 * < / p > 
 * < pre > 
 * & lt ; module name = " ParameterNumber " & gt ; 
 * & lt ; property name = " max " value = " 10 " / & gt ; 
 + * & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 - 
 + * Java code that will be ignored : 
 + * < pre > 
 + * < code > 
 + * 
 + * & # 064 ; Override 
 + * public void needsLotsOfParameters ( int a , 
 + * int b , int c , int d , int e , int f , int g , int h ) { 
 + * . . . 
 + * } 
 + * < / code > 
 + * < / pre > 
 * @ author Oliver Burn 
 * @ version 1 . 0 
 * / 
 public class ParameterNumberCheck 
 extends Check 
 { 
 + / * * { @ link Override Override } annotation name * / 
 + private static final String OVERRIDE = " Override " ; 
 + 
 + / * * fully - qualified { @ link Override Override } annotation name * / 
 + private static final String FQ _ OVERRIDE = " java . lang . " + OVERRIDE ; 
 + 
 / * * default maximum number of allowed parameters * / 
 private static final int DEFAULT _ MAX _ PARAMETERS = 7 ; 
 
 / * * the maximum number of allowed parameters * / 
 private int mMax = DEFAULT _ MAX _ PARAMETERS ; 
 
 + / * * ignore overridden methods * / 
 + private boolean mIgnoreOverriddenMethods ; 
 + 
 / * * 
 * Sets the maximum number of allowed parameters . 
 * @ param aMax the max allowed parameters 
 @ @ - 65 , 6 + 90 , 16 @ @ public class ParameterNumberCheck 
 mMax = aMax ; 
 } 
 
 + / * * 
 + * Ignore number of parameters for methods with 
 + * & # 064 ; { @ link java . lang . Override } annotation . 
 + * @ param aIgnoreOverriddenMethods set ignore overridden methods 
 + * / 
 + public void setIgnoreOverriddenMethods ( boolean aIgnoreOverriddenMethods ) 
 + { 
 + mIgnoreOverriddenMethods = aIgnoreOverriddenMethods ; 
 + } 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) 
 { 
 @ @ - 76 , 9 + 111 , 23 @ @ public class ParameterNumberCheck 
 { 
 final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 final int count = params . getChildCount ( TokenTypes . PARAMETER _ DEF ) ; 
 - if ( count > mMax ) { 
 + if ( count > mMax & & ! ignoreNumberOfParameters ( aAST ) ) { 
 final DetailAST name = aAST . findFirstToken ( TokenTypes . IDENT ) ; 
 log ( name . getLineNo ( ) , name . getColumnNo ( ) , " maxParam " , mMax , count ) ; 
 } 
 } 
 + 
 + / * * Determine whether to ignore number of parameters for the method . 
 + * 
 + * @ param aAST the token to process 
 + * @ return true if this is overridden method and number of parameters should be ignored 
 + * false otherwise 
 + * / 
 + private boolean ignoreNumberOfParameters ( DetailAST aAST ) 
 + { 
 + / / if you override a method , you have no power over the number of parameters 
 + return mIgnoreOverriddenMethods 
 + & & ( AnnotationUtility . containsAnnotation ( aAST , OVERRIDE ) 
 + | | AnnotationUtility . containsAnnotation ( aAST , FQ _ OVERRIDE ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 index 7d293f2 . . 674b2b5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 @ @ - 63 , 4 + 63 , 17 @ @ public class ParameterNumberCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void shouldIgnoreMethodsWithOverrideAnnotation ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ParameterNumberCheck . class ) ; 
 + checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; 
 + final String [ ] expected = { 
 + " 6 : 10 : More than 7 parameters ( found 8 ) . " , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputParameterNumberCheck . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java 
 new file mode 100644 
 index 0000000 . . e90969d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + class InputParameterNumberCheckBase 
 + { 
 + / / method with many parameters 
 + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + 
 + } 
 + } 
 + 
 + public class InputParameterNumberCheck extends InputParameterNumberCheckBase 
 + { 
 + @ Override 
 + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ sizes . xml b / src / xdocs / config _ sizes . xml 
 index 5ece323 . . d75c39e 100644 
 - - - a / src / xdocs / config _ sizes . xml 
 + + + b / src / xdocs / config _ sizes . xml 
 @ @ - 411 , 6 + 411 , 12 @ @ 
 < td > 7 < / td > 
 < / tr > 
 < tr > 
 + < td > ignoreOverriddenMethods < / td > 
 + < td > Ignore number of parameters for methods with @ Override annotation < / td > 
 + < td > < a href = " property _ types . html # boolean " > boolean < / a > < / td > 
 + < td > false < / td > 
 + < / tr > 
 + < tr > 
 < td > tokens < / td > 
 < td > declarations to check < / td > 
 
 @ @ - 448 , 6 + 454 , 28 @ @ 
 & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 + < p > 
 + To configure the check to ignore number of parameters for methods with @ Override or @ java . lang . Override annotation . 
 + < / p > 
 + < p > 
 + Rationale : developer may need to override method with many parameters from 3 - rd party library . 
 + In this case developer has no control over number of parameters . 
 + < / p > 
 + < source > 
 + & lt ; module name = " ParameterNumber " & gt ; 
 + & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; 
 + & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < p > 
 + Java code example 
 + < / p > 
 + < source > 
 + @ Override 
 + public void needsLotsOfParameters ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + . . . 
 + } 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Package " >
