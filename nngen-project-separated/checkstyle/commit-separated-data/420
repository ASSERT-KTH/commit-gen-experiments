BLEU SCORE: 0.06567274736060397

TEST MSG: minor : fix linkcheck maven plugin violations
GENERATED MSG: minor links fixes

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 95ed908 . . cfca1d4 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1434 , 6 + 1434 , 8 @ @ <nl> < excludedLink > https : / / www . bountysource . com / teams / checkstyle / issues < / excludedLink > <nl> < ! - - javax . net . ssl . SSLHandshakeException : Received fatal alert : handshake _ failure - - > <nl> < excludedLink > https : / / eclipse . org < / excludedLink > <nl> + < ! - - avax . net . ssl . SSLHandshakeException : Received fatal alert : handshake _ failure - - > <nl> + < excludedLink > https : / / plugins . jetbrains . com / plugin / 4594 - qaplug < / excludedLink > <nl> < / excludedLinks > <nl> < / configuration > <nl> < / plugin > <nl> diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm <nl> index 2f28a77 . . 371e5d0 100644 <nl> - - - a / src / xdocs / index . xml . vm <nl> + + + b / src / xdocs / index . xml . vm <nl> @ @ - 151 , 7 + 151 , 7 @ @ <nl> < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> < td > David Schneider < / td > <nl> < td > <nl> - < a href = " http : / / eclipse - cs . sourceforge . net / " > Eclipse - CS Home Page < / a > <nl> + < a href = " https : / / checkstyle . github . io / eclipse - cs " > Eclipse - CS Home Page < / a > <nl> < / td > <nl> < td > <nl> In 2007 was awarded
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> index defcb32 . . 7f58353 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ import java . io . ByteArrayInputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . nio . charset . Charset ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> <nl> import org . antlr . v4 . runtime . ANTLRInputStream ; <nl> import org . antlr . v4 . runtime . BailErrorStrategy ; <nl> @ @ - 42 , 6 + 44 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . grammars . javadoc . JavadocLexer ; <nl> import com . puppycrawl . tools . checkstyle . grammars . javadoc . JavadocParser ; <nl> @ @ - 53 , 6 + 56 , 12 @ @ import com . puppycrawl . tools . checkstyle . grammars . javadoc . JavadocParser ; <nl> public abstract class AbstractJavadocCheck extends Check <nl> { <nl> / * * <nl> + * key is " line : column " <nl> + * value is DetailNode tree <nl> + * / <nl> + private static final Map < String , ParseStatus > TREE _ CACHE = new HashMap < String , ParseStatus > ( ) ; <nl> + <nl> + / * * <nl> * Custom error listener . <nl> * / <nl> private final DescriptiveErrorListener mErrorListener = <nl> @ @ - 139 , 6 + 148 , 7 @ @ public abstract class AbstractJavadocCheck extends Check <nl> @ Override <nl> public final void finishTree ( DetailAST aRootAST ) <nl> { <nl> + TREE _ CACHE . clear ( ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 149 , 38 + 159 , 32 @ @ public abstract class AbstractJavadocCheck extends Check <nl> @ Override <nl> public final void visitToken ( DetailAST aBlockCommentAst ) <nl> { <nl> - mBlockCommentAst = aBlockCommentAst ; <nl> - <nl> - final String commentContent = JavadocUtils . getBlockCommentContent ( aBlockCommentAst ) ; <nl> - <nl> - if ( JavadocUtils . isJavadocComment ( commentContent ) ) { <nl> + if ( JavadocUtils . isJavadocComment ( aBlockCommentAst ) ) { <nl> + mBlockCommentAst = aBlockCommentAst ; <nl> <nl> - final String javadocComment = commentContent . substring ( 1 ) ; <nl> + final String treeCacheKey = aBlockCommentAst . getLineNo ( ) + " : " <nl> + + aBlockCommentAst . getColumnNo ( ) ; <nl> <nl> - / / Log messages should have line number in scope of file , <nl> - / / not in scope of Javadoc comment . <nl> - / / Offset is line number of beginning of Javadoc comment . <nl> - mErrorListener . setOffset ( aBlockCommentAst . getLineNo ( ) - 1 ) ; <nl> + ParseStatus ps ; <nl> <nl> - try { <nl> - final ParseTree parseTree = parseJavadoc ( javadocComment ) ; <nl> - <nl> - final DetailNode node = convertParseTree2DetailNode ( parseTree ) ; <nl> - <nl> - processTree ( node ) ; <nl> + if ( TREE _ CACHE . containsKey ( treeCacheKey ) ) { <nl> + ps = TREE _ CACHE . get ( treeCacheKey ) ; <nl> + } <nl> + else { <nl> + ps = parseJavadocAsDetailNode ( aBlockCommentAst ) ; <nl> + TREE _ CACHE . put ( treeCacheKey , ps ) ; <nl> } <nl> - catch ( IOException e ) { <nl> - / / Antlr can not initiate its ANTLRInputStream <nl> - log ( aBlockCommentAst . getLineNo ( ) , " javadoc . parse . error " , <nl> - e . getMessage ( ) ) ; <nl> + <nl> + if ( ps . getParseErrorMessage ( ) = = null ) { <nl> + processTree ( ps . getTree ( ) ) ; <nl> } <nl> - catch ( ParseCancellationException e ) { <nl> - / / If syntax error occurs then message is printed by error listener <nl> - / / and parser throws this runtime exception to stop parsing . <nl> - / / Just stop processing current Javadoc comment . <nl> - return ; <nl> + else { <nl> + final LocalizedMessage parseErrorMessage = ps . getParseErrorMessage ( ) ; <nl> + log ( parseErrorMessage . getLineNo ( ) , parseErrorMessage . getColumnNo ( ) <nl> + , parseErrorMessage . getMessage ( ) ) ; <nl> } <nl> } <nl> + <nl> } <nl> <nl> protected DetailAST getBlockCommentAst ( ) <nl> @ @ - 189 , 12 + 193 , 82 @ @ public abstract class AbstractJavadocCheck extends Check <nl> } <nl> <nl> / * * <nl> + * Parses Javadoc comment as DetailNode tree . <nl> + * @ param aJavadocCommentAst <nl> + * DetailAST of Javadoc comment <nl> + * @ return DetailNode tree of Javadoc comment <nl> + * / <nl> + private ParseStatus parseJavadocAsDetailNode ( DetailAST aJavadocCommentAst ) <nl> + { <nl> + final String javadocComment = JavadocUtils . getJavadocCommentContent ( aJavadocCommentAst ) ; <nl> + <nl> + / / Log messages should have line number in scope of file , <nl> + / / not in scope of Javadoc comment . <nl> + / / Offset is line number of beginning of Javadoc comment . <nl> + mErrorListener . setOffset ( aJavadocCommentAst . getLineNo ( ) - 1 ) ; <nl> + <nl> + final ParseStatus result = new ParseStatus ( ) ; <nl> + ParseTree parseTree = null ; <nl> + LocalizedMessage parseErrorMessage = null ; <nl> + <nl> + try { <nl> + parseTree = parseJavadocAsParseTree ( javadocComment ) ; <nl> + } <nl> + catch ( IOException e ) { <nl> + / / Antlr can not initiate its ANTLRInputStream <nl> + parseErrorMessage = createLogMessage ( aJavadocCommentAst . getLineNo ( ) , <nl> + " javadoc . parse . error " , <nl> + aJavadocCommentAst . getColumnNo ( ) , e . getMessage ( ) ) ; <nl> + } <nl> + catch ( ParseCancellationException e ) { <nl> + / / If syntax error occurs then message is printed by error listener <nl> + / / and parser throws this runtime exception to stop parsing . <nl> + / / Just stop processing current Javadoc comment . <nl> + parseErrorMessage = mErrorListener . getErrorMessage ( ) ; <nl> + } <nl> + <nl> + if ( parseErrorMessage = = null ) { <nl> + final DetailNode tree = convertParseTree2DetailNode ( parseTree ) ; <nl> + result . setTree ( tree ) ; <nl> + } <nl> + else { <nl> + result . setParseErrorMessage ( parseErrorMessage ) ; <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates log message . <nl> + * @ param aLine <nl> + * line number <nl> + * @ param aKey <nl> + * key in messages . properties <nl> + * @ param aArgs <nl> + * message arguments <nl> + * @ return log localized message . <nl> + * / <nl> + private LocalizedMessage createLogMessage ( int aLine , String aKey , Object . . . aArgs ) <nl> + { <nl> + return new LocalizedMessage ( <nl> + aLine , <nl> + getMessageBundle ( ) , <nl> + aKey , <nl> + aArgs , <nl> + getSeverityLevel ( ) , <nl> + getId ( ) , <nl> + this . getClass ( ) , <nl> + this . getCustomMessages ( ) . get ( aKey ) ) ; <nl> + } <nl> + <nl> + <nl> + / * * <nl> * Converts ParseTree ( that is generated by ANTLRv4 ) to DetailNode tree . <nl> * <nl> * @ param aRootParseTree root node of ParseTree <nl> * @ return root of DetailNode tree <nl> * / <nl> - public DetailNode convertParseTree2DetailNode ( ParseTree aRootParseTree ) <nl> + private DetailNode convertParseTree2DetailNode ( ParseTree aRootParseTree ) <nl> { <nl> final ParseTree currentParseTreeNode = aRootParseTree ; <nl> final JavadocNodeImpl rootJavadocNode = createJavadocNode ( currentParseTreeNode , null , - 1 ) ; <nl> @ @ - 392 , 7 + 466 , 7 @ @ public abstract class AbstractJavadocCheck extends Check <nl> * @ throws IOException <nl> * errors in ANTLRInputStream <nl> * / <nl> - private ParseTree parseJavadoc ( String aBlockComment ) <nl> + private ParseTree parseJavadocAsParseTree ( String aBlockComment ) <nl> throws IOException <nl> { <nl> final Charset utf8Charset = Charset . forName ( " UTF - 8 " ) ; <nl> @ @ - 479 , 6 + 553 , 16 @ @ public abstract class AbstractJavadocCheck extends Check <nl> class DescriptiveErrorListener extends BaseErrorListener <nl> { <nl> / * * <nl> + * Parse error while token recognition . <nl> + * / <nl> + private static final String JAVADOC _ PARSE _ TOKEN _ ERROR = " javadoc . parse . token . error " ; <nl> + <nl> + / * * <nl> + * Parse error while rule recognition . <nl> + * / <nl> + private static final String JAVADOC _ PARSE _ RULE _ ERROR = " javadoc . parse . rule . error " ; <nl> + <nl> + / * * <nl> * Message key of error message . Missed close HTML tag breaks structure <nl> * of parse tree , so parser stops parsing and generates such error <nl> * message . This case is special because parser prints error like <nl> @ @ - 501 , 6 + 585 , 16 @ @ public abstract class AbstractJavadocCheck extends Check <nl> private int mOffset ; <nl> <nl> / * * <nl> + * Error message that appeared while parsing . <nl> + * / <nl> + private LocalizedMessage mErrorMessage ; <nl> + <nl> + public LocalizedMessage getErrorMessage ( ) <nl> + { <nl> + return mErrorMessage ; <nl> + } <nl> + <nl> + / * * <nl> * Sets offset . Offset is line number of beginning of the Javadoc <nl> * comment . Log messages should have line number in scope of file , not <nl> * in scope of Javadoc comment . <nl> @ @ - 532 , 11 + 626 , 15 @ @ public abstract class AbstractJavadocCheck extends Check <nl> final Token token = ( Token ) aOffendingSymbol ; <nl> <nl> if ( JAVADOC _ MISSED _ HTML _ CLOSE . equals ( aMsg ) ) { <nl> - log ( lineNumber , JAVADOC _ MISSED _ HTML _ CLOSE , token . getText ( ) ) ; <nl> + mErrorMessage = createLogMessage ( lineNumber , <nl> + JAVADOC _ MISSED _ HTML _ CLOSE , aCharPositionInLine , token . getText ( ) ) ; <nl> + <nl> throw new ParseCancellationException ( ) ; <nl> } <nl> else if ( JAVADOC _ WRONG _ SINGLETON _ TAG . equals ( aMsg ) ) { <nl> - log ( lineNumber , JAVADOC _ WRONG _ SINGLETON _ TAG , token . getText ( ) ) ; <nl> + mErrorMessage = createLogMessage ( lineNumber , <nl> + JAVADOC _ WRONG _ SINGLETON _ TAG , aCharPositionInLine , token . getText ( ) ) ; <nl> + <nl> throw new ParseCancellationException ( ) ; <nl> } <nl> else { <nl> @ @ - 546 , 13 + 644 , 54 @ @ public abstract class AbstractJavadocCheck extends Check <nl> final String ruleName = aRecognizer . getRuleNames ( ) [ ruleIndex ] ; <nl> final String upperCaseRuleName = CaseFormat . UPPER _ CAMEL . to ( <nl> CaseFormat . UPPER _ UNDERSCORE , ruleName ) ; <nl> - log ( lineNumber , " javadoc . parse . rule . error " , aMsg , upperCaseRuleName ) ; <nl> + <nl> + mErrorMessage = createLogMessage ( lineNumber , <nl> + JAVADOC _ PARSE _ RULE _ ERROR , aCharPositionInLine , aMsg , upperCaseRuleName ) ; <nl> } <nl> else { <nl> - log ( lineNumber , " javadoc . parse . token . error " , aMsg ) ; <nl> + mErrorMessage = createLogMessage ( lineNumber , JAVADOC _ PARSE _ TOKEN _ ERROR , <nl> + aCharPositionInLine , aMsg , aCharPositionInLine ) ; <nl> } <nl> } <nl> } <nl> } <nl> <nl> + / * * <nl> + * Contains result of parsing javadoc comment : DetailNode tree and parse <nl> + * error message . <nl> + * / <nl> + private static class ParseStatus <nl> + { <nl> + / * * <nl> + * DetailNode tree ( is null if parsing fails ) <nl> + * / <nl> + private DetailNode mTree ; <nl> + <nl> + / * * <nl> + * Parse error message ( is null if parsing is successful ) <nl> + * / <nl> + private LocalizedMessage mParseErrorMessage ; <nl> + <nl> + public DetailNode getTree ( ) <nl> + { <nl> + return mTree ; <nl> + } <nl> + <nl> + public void setTree ( DetailNode aTree ) <nl> + { <nl> + this . mTree = aTree ; <nl> + } <nl> + <nl> + public LocalizedMessage getParseErrorMessage ( ) <nl> + { <nl> + return mParseErrorMessage ; <nl> + } <nl> + <nl> + public void setParseErrorMessage ( LocalizedMessage aParseErrorMessage ) <nl> + { <nl> + this . mParseErrorMessage = aParseErrorMessage ; <nl> + } <nl> + <nl> + } <nl> + <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java <nl> index 9a8dbab . . 5c45ae6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java <nl> @ @ - 245 , 6 + 245 , 18 @ @ public final class JavadocUtils <nl> } <nl> <nl> / * * <nl> + * Get content of Javadoc comment . <nl> + * @ param aJavadocCommentBegin <nl> + * Javadoc comment AST <nl> + * @ return content of Javadoc comment . <nl> + * / <nl> + public static String getJavadocCommentContent ( DetailAST aJavadocCommentBegin ) <nl> + { <nl> + final DetailAST commentContent = aJavadocCommentBegin . getFirstChild ( ) ; <nl> + return commentContent . getText ( ) . substring ( 1 ) ; <nl> + } <nl> + <nl> + / * * <nl> * Returns the first child token that has a specified type . <nl> * @ param aNode <nl> * Javadoc AST node <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / messages . properties <nl> index 009fbb5 . . 9f4bffe 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / messages . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / messages . properties <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> - javadoc . parse . token . error = Javadoc comment parse error . Details : { 0 } <nl> - javadoc . parse . rule . error = Javadoc comment parse error . Details : { 0 } while parsing { 1 } <nl> - javadoc . missed . html . close = Javadoc comment parse error . Missed HTML close tag ' ' { 0 } ' ' . Sometimes it means that close tag missed for one of previous tags . <nl> - javadoc . wrong . singleton . html . tag = Javadoc comment parse error . It is forbidden to close singleton HTML tags . Tag : { 0 } . <nl> + javadoc . parse . token . error = Javadoc comment at column { 0 } has parse error . Details : { 1 } <nl> + javadoc . parse . rule . error = Javadoc comment at column { 0 } has parse error . Details : { 1 } while parsing { 2 } <nl> + javadoc . missed . html . close = Javadoc comment at column { 0 } has parse error . Missed HTML close tag ' ' { 1 } ' ' . Sometimes it means that close tag missed for one of previous tags . <nl> + javadoc . wrong . singleton . html . tag = Javadoc comment at column { 0 } has parse error . It is forbidden to close singleton HTML tags . Tag : { 1 } . <nl> <nl> javadoc . classInfo = Unable to get class information for { 0 } tag ' ' { 1 } ' ' . <nl> javadoc . expectedTag = Expected { 0 } tag for ' ' { 1 } ' ' .

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 95ed908 . . cfca1d4 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1434 , 6 + 1434 , 8 @ @ 
 < excludedLink > https : / / www . bountysource . com / teams / checkstyle / issues < / excludedLink > 
 < ! - - javax . net . ssl . SSLHandshakeException : Received fatal alert : handshake _ failure - - > 
 < excludedLink > https : / / eclipse . org < / excludedLink > 
 + < ! - - avax . net . ssl . SSLHandshakeException : Received fatal alert : handshake _ failure - - > 
 + < excludedLink > https : / / plugins . jetbrains . com / plugin / 4594 - qaplug < / excludedLink > 
 < / excludedLinks > 
 < / configuration > 
 < / plugin > 
 diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm 
 index 2f28a77 . . 371e5d0 100644 
 - - - a / src / xdocs / index . xml . vm 
 + + + b / src / xdocs / index . xml . vm 
 @ @ - 151 , 7 + 151 , 7 @ @ 
 < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 < td > David Schneider < / td > 
 < td > 
 - < a href = " http : / / eclipse - cs . sourceforge . net / " > Eclipse - CS Home Page < / a > 
 + < a href = " https : / / checkstyle . github . io / eclipse - cs " > Eclipse - CS Home Page < / a > 
 < / td > 
 < td > 
 In 2007 was awarded

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 index defcb32 . . 7f58353 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 @ @ - 22 , 6 + 22 , 8 @ @ import java . io . ByteArrayInputStream ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . nio . charset . Charset ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 
 import org . antlr . v4 . runtime . ANTLRInputStream ; 
 import org . antlr . v4 . runtime . BailErrorStrategy ; 
 @ @ - 42 , 6 + 44 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . grammars . javadoc . JavadocLexer ; 
 import com . puppycrawl . tools . checkstyle . grammars . javadoc . JavadocParser ; 
 @ @ - 53 , 6 + 56 , 12 @ @ import com . puppycrawl . tools . checkstyle . grammars . javadoc . JavadocParser ; 
 public abstract class AbstractJavadocCheck extends Check 
 { 
 / * * 
 + * key is " line : column " 
 + * value is DetailNode tree 
 + * / 
 + private static final Map < String , ParseStatus > TREE _ CACHE = new HashMap < String , ParseStatus > ( ) ; 
 + 
 + / * * 
 * Custom error listener . 
 * / 
 private final DescriptiveErrorListener mErrorListener = 
 @ @ - 139 , 6 + 148 , 7 @ @ public abstract class AbstractJavadocCheck extends Check 
 @ Override 
 public final void finishTree ( DetailAST aRootAST ) 
 { 
 + TREE _ CACHE . clear ( ) ; 
 } 
 
 @ Override 
 @ @ - 149 , 38 + 159 , 32 @ @ public abstract class AbstractJavadocCheck extends Check 
 @ Override 
 public final void visitToken ( DetailAST aBlockCommentAst ) 
 { 
 - mBlockCommentAst = aBlockCommentAst ; 
 - 
 - final String commentContent = JavadocUtils . getBlockCommentContent ( aBlockCommentAst ) ; 
 - 
 - if ( JavadocUtils . isJavadocComment ( commentContent ) ) { 
 + if ( JavadocUtils . isJavadocComment ( aBlockCommentAst ) ) { 
 + mBlockCommentAst = aBlockCommentAst ; 
 
 - final String javadocComment = commentContent . substring ( 1 ) ; 
 + final String treeCacheKey = aBlockCommentAst . getLineNo ( ) + " : " 
 + + aBlockCommentAst . getColumnNo ( ) ; 
 
 - / / Log messages should have line number in scope of file , 
 - / / not in scope of Javadoc comment . 
 - / / Offset is line number of beginning of Javadoc comment . 
 - mErrorListener . setOffset ( aBlockCommentAst . getLineNo ( ) - 1 ) ; 
 + ParseStatus ps ; 
 
 - try { 
 - final ParseTree parseTree = parseJavadoc ( javadocComment ) ; 
 - 
 - final DetailNode node = convertParseTree2DetailNode ( parseTree ) ; 
 - 
 - processTree ( node ) ; 
 + if ( TREE _ CACHE . containsKey ( treeCacheKey ) ) { 
 + ps = TREE _ CACHE . get ( treeCacheKey ) ; 
 + } 
 + else { 
 + ps = parseJavadocAsDetailNode ( aBlockCommentAst ) ; 
 + TREE _ CACHE . put ( treeCacheKey , ps ) ; 
 } 
 - catch ( IOException e ) { 
 - / / Antlr can not initiate its ANTLRInputStream 
 - log ( aBlockCommentAst . getLineNo ( ) , " javadoc . parse . error " , 
 - e . getMessage ( ) ) ; 
 + 
 + if ( ps . getParseErrorMessage ( ) = = null ) { 
 + processTree ( ps . getTree ( ) ) ; 
 } 
 - catch ( ParseCancellationException e ) { 
 - / / If syntax error occurs then message is printed by error listener 
 - / / and parser throws this runtime exception to stop parsing . 
 - / / Just stop processing current Javadoc comment . 
 - return ; 
 + else { 
 + final LocalizedMessage parseErrorMessage = ps . getParseErrorMessage ( ) ; 
 + log ( parseErrorMessage . getLineNo ( ) , parseErrorMessage . getColumnNo ( ) 
 + , parseErrorMessage . getMessage ( ) ) ; 
 } 
 } 
 + 
 } 
 
 protected DetailAST getBlockCommentAst ( ) 
 @ @ - 189 , 12 + 193 , 82 @ @ public abstract class AbstractJavadocCheck extends Check 
 } 
 
 / * * 
 + * Parses Javadoc comment as DetailNode tree . 
 + * @ param aJavadocCommentAst 
 + * DetailAST of Javadoc comment 
 + * @ return DetailNode tree of Javadoc comment 
 + * / 
 + private ParseStatus parseJavadocAsDetailNode ( DetailAST aJavadocCommentAst ) 
 + { 
 + final String javadocComment = JavadocUtils . getJavadocCommentContent ( aJavadocCommentAst ) ; 
 + 
 + / / Log messages should have line number in scope of file , 
 + / / not in scope of Javadoc comment . 
 + / / Offset is line number of beginning of Javadoc comment . 
 + mErrorListener . setOffset ( aJavadocCommentAst . getLineNo ( ) - 1 ) ; 
 + 
 + final ParseStatus result = new ParseStatus ( ) ; 
 + ParseTree parseTree = null ; 
 + LocalizedMessage parseErrorMessage = null ; 
 + 
 + try { 
 + parseTree = parseJavadocAsParseTree ( javadocComment ) ; 
 + } 
 + catch ( IOException e ) { 
 + / / Antlr can not initiate its ANTLRInputStream 
 + parseErrorMessage = createLogMessage ( aJavadocCommentAst . getLineNo ( ) , 
 + " javadoc . parse . error " , 
 + aJavadocCommentAst . getColumnNo ( ) , e . getMessage ( ) ) ; 
 + } 
 + catch ( ParseCancellationException e ) { 
 + / / If syntax error occurs then message is printed by error listener 
 + / / and parser throws this runtime exception to stop parsing . 
 + / / Just stop processing current Javadoc comment . 
 + parseErrorMessage = mErrorListener . getErrorMessage ( ) ; 
 + } 
 + 
 + if ( parseErrorMessage = = null ) { 
 + final DetailNode tree = convertParseTree2DetailNode ( parseTree ) ; 
 + result . setTree ( tree ) ; 
 + } 
 + else { 
 + result . setParseErrorMessage ( parseErrorMessage ) ; 
 + } 
 + 
 + return result ; 
 + } 
 + 
 + / * * 
 + * Creates log message . 
 + * @ param aLine 
 + * line number 
 + * @ param aKey 
 + * key in messages . properties 
 + * @ param aArgs 
 + * message arguments 
 + * @ return log localized message . 
 + * / 
 + private LocalizedMessage createLogMessage ( int aLine , String aKey , Object . . . aArgs ) 
 + { 
 + return new LocalizedMessage ( 
 + aLine , 
 + getMessageBundle ( ) , 
 + aKey , 
 + aArgs , 
 + getSeverityLevel ( ) , 
 + getId ( ) , 
 + this . getClass ( ) , 
 + this . getCustomMessages ( ) . get ( aKey ) ) ; 
 + } 
 + 
 + 
 + / * * 
 * Converts ParseTree ( that is generated by ANTLRv4 ) to DetailNode tree . 
 * 
 * @ param aRootParseTree root node of ParseTree 
 * @ return root of DetailNode tree 
 * / 
 - public DetailNode convertParseTree2DetailNode ( ParseTree aRootParseTree ) 
 + private DetailNode convertParseTree2DetailNode ( ParseTree aRootParseTree ) 
 { 
 final ParseTree currentParseTreeNode = aRootParseTree ; 
 final JavadocNodeImpl rootJavadocNode = createJavadocNode ( currentParseTreeNode , null , - 1 ) ; 
 @ @ - 392 , 7 + 466 , 7 @ @ public abstract class AbstractJavadocCheck extends Check 
 * @ throws IOException 
 * errors in ANTLRInputStream 
 * / 
 - private ParseTree parseJavadoc ( String aBlockComment ) 
 + private ParseTree parseJavadocAsParseTree ( String aBlockComment ) 
 throws IOException 
 { 
 final Charset utf8Charset = Charset . forName ( " UTF - 8 " ) ; 
 @ @ - 479 , 6 + 553 , 16 @ @ public abstract class AbstractJavadocCheck extends Check 
 class DescriptiveErrorListener extends BaseErrorListener 
 { 
 / * * 
 + * Parse error while token recognition . 
 + * / 
 + private static final String JAVADOC _ PARSE _ TOKEN _ ERROR = " javadoc . parse . token . error " ; 
 + 
 + / * * 
 + * Parse error while rule recognition . 
 + * / 
 + private static final String JAVADOC _ PARSE _ RULE _ ERROR = " javadoc . parse . rule . error " ; 
 + 
 + / * * 
 * Message key of error message . Missed close HTML tag breaks structure 
 * of parse tree , so parser stops parsing and generates such error 
 * message . This case is special because parser prints error like 
 @ @ - 501 , 6 + 585 , 16 @ @ public abstract class AbstractJavadocCheck extends Check 
 private int mOffset ; 
 
 / * * 
 + * Error message that appeared while parsing . 
 + * / 
 + private LocalizedMessage mErrorMessage ; 
 + 
 + public LocalizedMessage getErrorMessage ( ) 
 + { 
 + return mErrorMessage ; 
 + } 
 + 
 + / * * 
 * Sets offset . Offset is line number of beginning of the Javadoc 
 * comment . Log messages should have line number in scope of file , not 
 * in scope of Javadoc comment . 
 @ @ - 532 , 11 + 626 , 15 @ @ public abstract class AbstractJavadocCheck extends Check 
 final Token token = ( Token ) aOffendingSymbol ; 
 
 if ( JAVADOC _ MISSED _ HTML _ CLOSE . equals ( aMsg ) ) { 
 - log ( lineNumber , JAVADOC _ MISSED _ HTML _ CLOSE , token . getText ( ) ) ; 
 + mErrorMessage = createLogMessage ( lineNumber , 
 + JAVADOC _ MISSED _ HTML _ CLOSE , aCharPositionInLine , token . getText ( ) ) ; 
 + 
 throw new ParseCancellationException ( ) ; 
 } 
 else if ( JAVADOC _ WRONG _ SINGLETON _ TAG . equals ( aMsg ) ) { 
 - log ( lineNumber , JAVADOC _ WRONG _ SINGLETON _ TAG , token . getText ( ) ) ; 
 + mErrorMessage = createLogMessage ( lineNumber , 
 + JAVADOC _ WRONG _ SINGLETON _ TAG , aCharPositionInLine , token . getText ( ) ) ; 
 + 
 throw new ParseCancellationException ( ) ; 
 } 
 else { 
 @ @ - 546 , 13 + 644 , 54 @ @ public abstract class AbstractJavadocCheck extends Check 
 final String ruleName = aRecognizer . getRuleNames ( ) [ ruleIndex ] ; 
 final String upperCaseRuleName = CaseFormat . UPPER _ CAMEL . to ( 
 CaseFormat . UPPER _ UNDERSCORE , ruleName ) ; 
 - log ( lineNumber , " javadoc . parse . rule . error " , aMsg , upperCaseRuleName ) ; 
 + 
 + mErrorMessage = createLogMessage ( lineNumber , 
 + JAVADOC _ PARSE _ RULE _ ERROR , aCharPositionInLine , aMsg , upperCaseRuleName ) ; 
 } 
 else { 
 - log ( lineNumber , " javadoc . parse . token . error " , aMsg ) ; 
 + mErrorMessage = createLogMessage ( lineNumber , JAVADOC _ PARSE _ TOKEN _ ERROR , 
 + aCharPositionInLine , aMsg , aCharPositionInLine ) ; 
 } 
 } 
 } 
 } 
 
 + / * * 
 + * Contains result of parsing javadoc comment : DetailNode tree and parse 
 + * error message . 
 + * / 
 + private static class ParseStatus 
 + { 
 + / * * 
 + * DetailNode tree ( is null if parsing fails ) 
 + * / 
 + private DetailNode mTree ; 
 + 
 + / * * 
 + * Parse error message ( is null if parsing is successful ) 
 + * / 
 + private LocalizedMessage mParseErrorMessage ; 
 + 
 + public DetailNode getTree ( ) 
 + { 
 + return mTree ; 
 + } 
 + 
 + public void setTree ( DetailNode aTree ) 
 + { 
 + this . mTree = aTree ; 
 + } 
 + 
 + public LocalizedMessage getParseErrorMessage ( ) 
 + { 
 + return mParseErrorMessage ; 
 + } 
 + 
 + public void setParseErrorMessage ( LocalizedMessage aParseErrorMessage ) 
 + { 
 + this . mParseErrorMessage = aParseErrorMessage ; 
 + } 
 + 
 + } 
 + 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java 
 index 9a8dbab . . 5c45ae6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java 
 @ @ - 245 , 6 + 245 , 18 @ @ public final class JavadocUtils 
 } 
 
 / * * 
 + * Get content of Javadoc comment . 
 + * @ param aJavadocCommentBegin 
 + * Javadoc comment AST 
 + * @ return content of Javadoc comment . 
 + * / 
 + public static String getJavadocCommentContent ( DetailAST aJavadocCommentBegin ) 
 + { 
 + final DetailAST commentContent = aJavadocCommentBegin . getFirstChild ( ) ; 
 + return commentContent . getText ( ) . substring ( 1 ) ; 
 + } 
 + 
 + / * * 
 * Returns the first child token that has a specified type . 
 * @ param aNode 
 * Javadoc AST node 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / messages . properties 
 index 009fbb5 . . 9f4bffe 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / messages . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / messages . properties 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 - javadoc . parse . token . error = Javadoc comment parse error . Details : { 0 } 
 - javadoc . parse . rule . error = Javadoc comment parse error . Details : { 0 } while parsing { 1 } 
 - javadoc . missed . html . close = Javadoc comment parse error . Missed HTML close tag ' ' { 0 } ' ' . Sometimes it means that close tag missed for one of previous tags . 
 - javadoc . wrong . singleton . html . tag = Javadoc comment parse error . It is forbidden to close singleton HTML tags . Tag : { 0 } . 
 + javadoc . parse . token . error = Javadoc comment at column { 0 } has parse error . Details : { 1 } 
 + javadoc . parse . rule . error = Javadoc comment at column { 0 } has parse error . Details : { 1 } while parsing { 2 } 
 + javadoc . missed . html . close = Javadoc comment at column { 0 } has parse error . Missed HTML close tag ' ' { 1 } ' ' . Sometimes it means that close tag missed for one of previous tags . 
 + javadoc . wrong . singleton . html . tag = Javadoc comment at column { 0 } has parse error . It is forbidden to close singleton HTML tags . Tag : { 1 } . 
 
 javadoc . classInfo = Unable to get class information for { 0 } tag ' ' { 1 } ' ' . 
 javadoc . expectedTag = Expected { 0 } tag for ' ' { 1 } ' ' .
