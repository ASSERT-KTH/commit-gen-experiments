BLEU SCORE: 0.009298395269585749

TEST MSG: Issue # 1013 : Fix NoWhitespaceAfterCheck
GENERATED MSG: No Whitespace After Check , fixed NPE , fixed false - positives at multidimensional arrays , issue # 542

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java <nl> index bac22a6 . . 1710667 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java <nl> @ @ - 19 , 8 + 19 , 6 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> <nl> - import org . apache . commons . lang3 . ArrayUtils ; <nl> - <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 29 , 8 + 27 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * < p > <nl> * Checks that there is no whitespace after a token . <nl> * More specifically , it checks that it is not followed by whitespace , <nl> - * or ( if line breaks are allowed ) all characters on the line after are <nl> - * whitespace . To forbid line breaks after a token , set property <nl> + * or ( if linebreaks are allowed ) all characters on the line after are <nl> + * whitespace . To forbid linebreaks after a token , set property <nl> * allowLineBreaks to false . <nl> * < / p > <nl> * < p > By default the check will check the following operators : <nl> @ @ - 41 , 9 + 39 , 17 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * { @ link TokenTypes # INC INC } , <nl> * { @ link TokenTypes # LNOT LNOT } , <nl> * { @ link TokenTypes # UNARY _ MINUS UNARY _ MINUS } , <nl> + * { @ link TokenTypes # UNARY _ PLUS UNARY _ PLUS } , <nl> + * { @ link TokenTypes # TYPECAST TYPECAST } , <nl> * { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } , <nl> - * { @ link TokenTypes # UNARY _ PLUS UNARY _ PLUS } . It also supports the operator <nl> - * { @ link TokenTypes # TYPECAST TYPECAST } . <nl> + * { @ link TokenTypes # INDEX _ OP INDEX _ OP } . <nl> + * < / p > <nl> + * < p > <nl> + * The check processes <nl> + * { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } , <nl> + * { @ link TokenTypes # INDEX _ OP INDEX _ OP } <nl> + * specially from other tokens . Actually it is checked that there is <nl> + * no whitespace before this tokens , not after them . <nl> * < / p > <nl> * < p > <nl> * An example of how to configure the check is : <nl> @ @ - 51 , 7 + 57 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * < pre > <nl> * & lt ; module name = " NoWhitespaceAfter " / & gt ; <nl> * < / pre > <nl> - * < p > An example of how to configure the check to forbid line breaks after <nl> + * < p > An example of how to configure the check to forbid linebreaks after <nl> * a { @ link TokenTypes # DOT DOT } token is : <nl> * < / p > <nl> * < pre > <nl> @ @ - 63 , 6 + 69 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * @ author Rick Giles <nl> * @ author lkuehne <nl> * @ author < a href = " mailto : nesterenko - aleksey @ list . ru " > Aleksey Nesterenko < / a > <nl> + * @ author attatrol <nl> * / <nl> public class NoWhitespaceAfterCheck extends Check { <nl> <nl> @ @ - 87 , 6 + 94 , 7 @ @ public class NoWhitespaceAfterCheck extends Check { <nl> TokenTypes . LNOT , <nl> TokenTypes . DOT , <nl> TokenTypes . ARRAY _ DECLARATOR , <nl> + TokenTypes . INDEX _ OP , <nl> } ; <nl> } <nl> <nl> @ @ - 103 , 48 + 111 , 55 @ @ public class NoWhitespaceAfterCheck extends Check { <nl> TokenTypes . DOT , <nl> TokenTypes . TYPECAST , <nl> TokenTypes . ARRAY _ DECLARATOR , <nl> - TokenTypes . GENERIC _ START , <nl> - TokenTypes . GENERIC _ END , <nl> + TokenTypes . INDEX _ OP , <nl> } ; <nl> } <nl> <nl> - @ Override <nl> - public int [ ] getRequiredTokens ( ) { <nl> - return ArrayUtils . EMPTY _ INT _ ARRAY ; <nl> + / * * <nl> + * Control whether whitespace is flagged at linebreaks . <nl> + * @ param allowLineBreaks whether whitespace should be <nl> + * flagged at linebreaks . <nl> + * / <nl> + public void setAllowLineBreaks ( boolean allowLineBreaks ) { <nl> + this . allowLineBreaks = allowLineBreaks ; <nl> } <nl> <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> - final DetailAST astNode = getPreceded ( ast ) ; <nl> - final String line = getLine ( ast . getLineNo ( ) - 1 ) ; <nl> - final int after = getPositionAfter ( astNode ) ; <nl> + final DetailAST whitespaceFollowedAst = getWhitespaceFollowedNode ( ast ) ; <nl> <nl> - if ( ( after > = line . length ( ) | | Character . isWhitespace ( line . charAt ( after ) ) ) <nl> - & & hasRedundantWhitespace ( line , after ) ) { <nl> - log ( astNode . getLineNo ( ) , after , <nl> - MSG _ KEY , astNode . getText ( ) ) ; <nl> + final int whitespaceColumnNo = getPositionAfter ( whitespaceFollowedAst ) ; <nl> + final int whitespaceLineNo = whitespaceFollowedAst . getLineNo ( ) ; <nl> + <nl> + if ( hasTrailingWhitespace ( ast , whitespaceColumnNo , whitespaceLineNo ) ) { <nl> + log ( whitespaceLineNo , whitespaceColumnNo , <nl> + MSG _ KEY , whitespaceFollowedAst . getText ( ) ) ; <nl> } <nl> } <nl> <nl> / * * <nl> - * Gets possible place where redundant whitespace could be . <nl> - * @ param ast Node representing token . <nl> - * @ return possible place of redundant whitespace . <nl> + * For a visited ast node returns node that should be checked <nl> + * for not being followed by whitespace . <nl> + * @ param ast <nl> + * , visited node . <nl> + * @ return node before ast . <nl> * / <nl> - private static DetailAST getPreceded ( DetailAST ast ) { <nl> - DetailAST preceded ; <nl> - <nl> + private static DetailAST getWhitespaceFollowedNode ( DetailAST ast ) { <nl> + DetailAST whitespaceFollowedAst ; <nl> switch ( ast . getType ( ) ) { <nl> case TokenTypes . TYPECAST : <nl> - preceded = ast . findFirstToken ( TokenTypes . RPAREN ) ; <nl> + whitespaceFollowedAst = ast . findFirstToken ( TokenTypes . RPAREN ) ; <nl> break ; <nl> case TokenTypes . ARRAY _ DECLARATOR : <nl> - preceded = getArrayTypeOrIdentifier ( ast ) ; <nl> + whitespaceFollowedAst = getArrayDeclaratorPreviousElement ( ast ) ; <nl> + break ; <nl> + case TokenTypes . INDEX _ OP : <nl> + whitespaceFollowedAst = getIndexOpPreviousElement ( ast ) ; <nl> break ; <nl> default : <nl> - preceded = ast ; <nl> + whitespaceFollowedAst = ast ; <nl> } <nl> - return preceded ; <nl> + return whitespaceFollowedAst ; <nl> } <nl> <nl> / * * <nl> @ @ - 153 , 8 + 168 , 8 @ @ public class NoWhitespaceAfterCheck extends Check { <nl> * @ return position after token . <nl> * / <nl> private static int getPositionAfter ( DetailAST ast ) { <nl> - int after ; <nl> - / / If target of possible redundant whitespace is in method definition <nl> + final int after ; <nl> + / / If target of possible redundant whitespace is in method definition . <nl> if ( ast . getType ( ) = = TokenTypes . IDENT <nl> & & ast . getNextSibling ( ) ! = null <nl> & & ast . getNextSibling ( ) . getType ( ) = = TokenTypes . LPAREN ) { <nl> @ @ - 169 , 163 + 184 , 219 @ @ public class NoWhitespaceAfterCheck extends Check { <nl> } <nl> <nl> / * * <nl> - * Gets target place of possible redundant whitespace ( array ' s type or identifier ) <nl> - * after which { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } is set . <nl> - * @ param arrayDeclarator { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } <nl> - * @ return target place before possible redundant whitespace . <nl> + * Checks if there is unwanted whitespace after the visited node . <nl> + * @ param ast <nl> + * , visited node . <nl> + * @ param whitespaceColumnNo <nl> + * , column number of a possible whitespace . <nl> + * @ param whitespaceLineNo <nl> + * , line number of a possible whitespace . <nl> + * @ return true if whitespace found . <nl> * / <nl> - private static DetailAST getArrayTypeOrIdentifier ( DetailAST arrayDeclarator ) { <nl> - DetailAST typeOrIdent = arrayDeclarator ; <nl> - if ( isArrayInstantiation ( arrayDeclarator ) ) { <nl> - typeOrIdent = arrayDeclarator . getParent ( ) . getFirstChild ( ) ; <nl> - } <nl> - else if ( isMultiDimensionalArray ( arrayDeclarator ) ) { <nl> - if ( isCStyleMultiDimensionalArrayDeclaration ( arrayDeclarator ) ) { <nl> - if ( arrayDeclarator . getParent ( ) . getType ( ) ! = TokenTypes . ARRAY _ DECLARATOR ) { <nl> - typeOrIdent = getArrayIdentifier ( arrayDeclarator ) ; <nl> - } <nl> - } <nl> - else { <nl> - DetailAST arrayIdentifier = arrayDeclarator . getFirstChild ( ) ; <nl> - while ( arrayIdentifier ! = null ) { <nl> - typeOrIdent = arrayIdentifier ; <nl> - arrayIdentifier = arrayIdentifier . getFirstChild ( ) ; <nl> - } <nl> - } <nl> + boolean hasTrailingWhitespace ( DetailAST ast , <nl> + int whitespaceColumnNo , int whitespaceLineNo ) { <nl> + final boolean result ; <nl> + final int astLineNo = ast . getLineNo ( ) ; <nl> + final String line = getLine ( astLineNo - 1 ) ; <nl> + if ( astLineNo = = whitespaceLineNo & & whitespaceColumnNo < line . length ( ) ) { <nl> + result = Character . isWhitespace ( line . charAt ( whitespaceColumnNo ) ) ; <nl> } <nl> else { <nl> - if ( isCStyleArrayDeclaration ( arrayDeclarator ) ) { <nl> - typeOrIdent = getArrayIdentifier ( arrayDeclarator ) ; <nl> - } <nl> - else { <nl> - if ( isArrayUsedAsTypeForGenericBoundedWildcard ( arrayDeclarator ) ) { <nl> - typeOrIdent = arrayDeclarator . getParent ( ) ; <nl> - } <nl> - else { <nl> - typeOrIdent = arrayDeclarator . getFirstChild ( ) ; <nl> - } <nl> - } <nl> + result = ! allowLineBreaks ; <nl> } <nl> - return typeOrIdent ; <nl> - } <nl> - <nl> - / * * <nl> - * Gets array identifier , e . g . : <nl> - * < p > <nl> - * { @ code <nl> - * int [ ] someArray ; <nl> - * } <nl> - * < / p > <nl> - * < p > <nl> - * someArray is identifier . <nl> - * < / p > <nl> - * @ param arrayDeclarator { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } <nl> - * @ return array identifier . <nl> - * / <nl> - private static DetailAST getArrayIdentifier ( DetailAST arrayDeclarator ) { <nl> - return arrayDeclarator . getParent ( ) . getNextSibling ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Checks if current array is multidimensional . <nl> - * @ param arrayDeclaration { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } <nl> - * @ return true if current array is multidimensional . <nl> - * / <nl> - private static boolean isMultiDimensionalArray ( DetailAST arrayDeclaration ) { <nl> - return arrayDeclaration . getParent ( ) . getType ( ) = = TokenTypes . ARRAY _ DECLARATOR <nl> - | | arrayDeclaration . getFirstChild ( ) . getType ( ) = = TokenTypes . ARRAY _ DECLARATOR ; <nl> + return result ; <nl> } <nl> <nl> / * * <nl> - * Checks if current array declaration is part of array instantiation . <nl> - * @ param arrayDeclaration { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } <nl> - * @ return true if current array declaration is part of array instantiation . <nl> + * Returns proper argument for getPositionAfter method , it is a token after <nl> + * { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } , in can be { @ link TokenTypes # RBRACK <nl> + * RBRACK } , { @ link TokenTypes # IDENT IDENT } or an array type definition ( literal ) . <nl> + * @ param ast <nl> + * , { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } node . <nl> + * @ return previous node by text order . <nl> * / <nl> - private static boolean isArrayInstantiation ( DetailAST arrayDeclaration ) { <nl> - return arrayDeclaration . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ NEW ; <nl> + private static DetailAST getArrayDeclaratorPreviousElement ( DetailAST ast ) { <nl> + final DetailAST previousElement ; <nl> + final DetailAST firstChild = ast . getFirstChild ( ) ; <nl> + if ( firstChild . getType ( ) = = TokenTypes . ARRAY _ DECLARATOR ) { <nl> + / / second or higher array index <nl> + previousElement = firstChild . findFirstToken ( TokenTypes . RBRACK ) ; <nl> + } <nl> + else { <nl> + / / first array index , is preceded with identifier or type <nl> + final DetailAST parent = getFirstNonArrayDeclaratorParent ( ast ) ; <nl> + switch ( parent . getType ( ) ) { <nl> + / / generics <nl> + case TokenTypes . TYPE _ ARGUMENT : <nl> + final DetailAST wildcard = parent . findFirstToken ( TokenTypes . WILDCARD _ TYPE ) ; <nl> + if ( wildcard = = null ) { <nl> + / / usual generic type argument like < char [ ] > <nl> + previousElement = getTypeLastNode ( ast ) ; <nl> + } <nl> + else { <nl> + / / constructions with wildcard like < ? extends String [ ] > <nl> + previousElement = getTypeLastNode ( ast . getFirstChild ( ) ) ; <nl> + } <nl> + break ; <nl> + / / ' new ' is a special case with its own subtree structure <nl> + case TokenTypes . LITERAL _ NEW : <nl> + previousElement = getTypeLastNode ( parent ) ; <nl> + break ; <nl> + / / mundane array declaration , can be either java style or C style <nl> + case TokenTypes . TYPE : <nl> + previousElement = getPreviousNodeWithParentOfTypeAst ( ast , parent ) ; <nl> + break ; <nl> + / / i . e . boolean [ ] . class <nl> + case TokenTypes . DOT : <nl> + previousElement = getTypeLastNode ( ast ) ; <nl> + break ; <nl> + / / java 8 method reference <nl> + case TokenTypes . METHOD _ REF : <nl> + final DetailAST ident = getIdentLastToken ( ast ) ; <nl> + if ( ident = = null ) { <nl> + / / i . e . int [ ] : : new <nl> + previousElement = ast . getFirstChild ( ) ; <nl> + } <nl> + else { <nl> + previousElement = ident ; <nl> + } <nl> + break ; <nl> + default : <nl> + throw new IllegalStateException ( " unexpected ast syntax " + parent ) ; <nl> + } <nl> + } <nl> + return previousElement ; <nl> } <nl> <nl> / * * <nl> - * Checks if current array is used as type for generic bounded wildcard . <nl> - * < p > <nl> - * E . g . { @ code < ? extends String [ ] > } or { @ code < ? super Object [ ] > } . <nl> - * < / p > <nl> - * @ param arrayDeclarator { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } <nl> - * @ return true if current array is used as type for generic bounded wildcard . <nl> + * Gets previous node for { @ link TokenTypes # INDEX _ OP INDEX _ OP } token <nl> + * for usage in getPositionAfter method , it is a simplified copy of <nl> + * getArrayDeclaratorPreviousElement method . <nl> + * @ param ast <nl> + * , { @ link TokenTypes # INDEX _ OP INDEX _ OP } node . <nl> + * @ return previous node by text order . <nl> * / <nl> - private static boolean isArrayUsedAsTypeForGenericBoundedWildcard ( DetailAST arrayDeclarator ) { <nl> - final int firstChildType = arrayDeclarator . getFirstChild ( ) . getType ( ) ; <nl> - return firstChildType = = TokenTypes . TYPE _ UPPER _ BOUNDS <nl> - | | firstChildType = = TokenTypes . TYPE _ LOWER _ BOUNDS ; <nl> + private static DetailAST getIndexOpPreviousElement ( DetailAST ast ) { <nl> + DetailAST result ; <nl> + final DetailAST firstChild = ast . getFirstChild ( ) ; <nl> + if ( firstChild . getType ( ) = = TokenTypes . INDEX _ OP ) { <nl> + / / second or higher array index <nl> + result = firstChild . findFirstToken ( TokenTypes . RBRACK ) ; <nl> + } <nl> + else { <nl> + final DetailAST ident = getIdentLastToken ( ast ) ; <nl> + if ( ident = = null ) { <nl> + / / construction like ( ( byte [ ] ) pixels ) [ 0 ] <nl> + result = ast . findFirstToken ( TokenTypes . RPAREN ) ; <nl> + } <nl> + else { <nl> + result = ident ; <nl> + } <nl> + } <nl> + return result ; <nl> } <nl> <nl> / * * <nl> - * Control whether whitespace is flagged at line breaks . <nl> - * @ param allowLineBreaks whether whitespace should be <nl> - * flagged at line breaks . <nl> + * Get node that owns { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } sequence . <nl> + * @ param ast <nl> + * , { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } node . <nl> + * @ return owner node . <nl> * / <nl> - public void setAllowLineBreaks ( boolean allowLineBreaks ) { <nl> - this . allowLineBreaks = allowLineBreaks ; <nl> + private static DetailAST getFirstNonArrayDeclaratorParent ( DetailAST ast ) { <nl> + DetailAST parent = ast . getParent ( ) ; <nl> + while ( parent . getType ( ) = = TokenTypes . ARRAY _ DECLARATOR ) { <nl> + parent = parent . getParent ( ) ; <nl> + } <nl> + return parent ; <nl> } <nl> <nl> / * * <nl> - * Checks if current array is declared in C style , e . g . : <nl> - * < p > <nl> - * { @ code <nl> - * int array [ ] = { . . . } ; / / C style <nl> - * } <nl> - * < / p > <nl> - * < p > <nl> - * { @ code <nl> - * int [ ] array = { . . . } ; / / Java style <nl> - * } <nl> - * < / p > <nl> - * @ param arrayDeclaration { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } <nl> - * @ return true if array is declared in C style <nl> + * Searches parameter node for a type node . <nl> + * Returns it or its last node if it has an extended structure . <nl> + * @ param ast <nl> + * , subject node . <nl> + * @ return type node . <nl> * / <nl> - private static boolean isCStyleArrayDeclaration ( DetailAST arrayDeclaration ) { <nl> - boolean result = false ; <nl> - final DetailAST identifier = getArrayIdentifier ( arrayDeclaration ) ; <nl> - if ( identifier ! = null ) { <nl> - final int arrayDeclarationStart = arrayDeclaration . getColumnNo ( ) ; <nl> - final int identifierEnd = identifier . getColumnNo ( ) + identifier . getText ( ) . length ( ) ; <nl> - result = arrayDeclarationStart = = identifierEnd <nl> - | | arrayDeclarationStart > identifierEnd ; <nl> + private static DetailAST getTypeLastNode ( DetailAST ast ) { <nl> + DetailAST result = ast . findFirstToken ( TokenTypes . TYPE _ ARGUMENTS ) ; <nl> + if ( result = = null ) { <nl> + result = getIdentLastToken ( ast ) ; <nl> + if ( result = = null ) { <nl> + / / primitive literal expected <nl> + result = ast . getFirstChild ( ) ; <nl> + } <nl> + } <nl> + else { <nl> + result = result . findFirstToken ( TokenTypes . GENERIC _ END ) ; <nl> } <nl> return result ; <nl> } <nl> <nl> / * * <nl> - * Works with multidimensional arrays . <nl> - * @ param arrayDeclaration { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } <nl> - * @ return true if multidimensional array is declared in C style . <nl> + * Finds previous node by text order for an array declarator , <nl> + * which parent type is { @ link TokenTypes # TYPE TYPE } . <nl> + * @ param ast <nl> + * , array declarator node . <nl> + * @ param parent <nl> + * , its parent node . <nl> + * @ return previous node by text order . <nl> * / <nl> - private static boolean isCStyleMultiDimensionalArrayDeclaration ( DetailAST arrayDeclaration ) { <nl> - boolean result = false ; <nl> - DetailAST parentArrayDeclaration = arrayDeclaration ; <nl> - while ( parentArrayDeclaration ! = null ) { <nl> - if ( parentArrayDeclaration . getParent ( ) ! = null <nl> - & & parentArrayDeclaration . getParent ( ) . getType ( ) = = TokenTypes . TYPE ) { <nl> - result = isCStyleArrayDeclaration ( parentArrayDeclaration ) ; <nl> + private static DetailAST getPreviousNodeWithParentOfTypeAst ( DetailAST ast , DetailAST parent ) { <nl> + final DetailAST previousElement ; <nl> + final DetailAST ident = getIdentLastToken ( parent . getParent ( ) ) ; <nl> + final DetailAST lastTypeNode = getTypeLastNode ( ast ) ; <nl> + / / sometimes there are ident - less sentences <nl> + / / i . e . " ( Object [ ] ) null " , but in casual case should be <nl> + / / checked whether ident or lastTypeNode has preceding position <nl> + / / determining if it is java style or C style <nl> + if ( ident = = null | | ident . getLineNo ( ) > ast . getLineNo ( ) ) { <nl> + previousElement = lastTypeNode ; <nl> + } <nl> + else if ( ident . getLineNo ( ) < ast . getLineNo ( ) ) { <nl> + previousElement = ident ; <nl> + } <nl> + / / ident and lastTypeNode lay on one line <nl> + else { <nl> + if ( ident . getColumnNo ( ) > ast . getColumnNo ( ) <nl> + | | lastTypeNode . getColumnNo ( ) > ident . getColumnNo ( ) ) { <nl> + previousElement = lastTypeNode ; <nl> + } <nl> + else { <nl> + previousElement = ident ; <nl> } <nl> - parentArrayDeclaration = parentArrayDeclaration . getParent ( ) ; <nl> } <nl> - return result ; <nl> + return previousElement ; <nl> } <nl> <nl> / * * <nl> - * Checks if current line has redundant whitespace after specified index . <nl> - * @ param line line of java source . <nl> - * @ param after specified index . <nl> - * @ return true if line contains redundant whitespace . <nl> + * Gets leftmost token of identifier . <nl> + * @ param ast <nl> + * , token possibly possessing an identifier . <nl> + * @ return leftmost token of identifier . <nl> * / <nl> - private boolean hasRedundantWhitespace ( String line , int after ) { <nl> - boolean result = ! allowLineBreaks ; <nl> - for ( int i = after + 1 ; ! result & & i < line . length ( ) ; i + + ) { <nl> - if ( ! Character . isWhitespace ( line . charAt ( i ) ) ) { <nl> - result = true ; <nl> + private static DetailAST getIdentLastToken ( DetailAST ast ) { <nl> + / / single identifier token as a name is the most common case <nl> + DetailAST result = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> + if ( result = = null ) { <nl> + final DetailAST dot = ast . findFirstToken ( TokenTypes . DOT ) ; <nl> + / / method call case <nl> + if ( dot = = null ) { <nl> + final DetailAST methodCall = ast . findFirstToken ( TokenTypes . METHOD _ CALL ) ; <nl> + if ( methodCall ! = null ) { <nl> + result = methodCall . findFirstToken ( TokenTypes . RPAREN ) ; <nl> + } <nl> + } <nl> + / / qualified name case <nl> + else { <nl> + if ( dot . findFirstToken ( TokenTypes . DOT ) = = null ) { <nl> + result = dot . getFirstChild ( ) . getNextSibling ( ) ; <nl> + } <nl> + else { <nl> + result = dot . findFirstToken ( TokenTypes . IDENT ) ; <nl> + } <nl> } <nl> } <nl> return result ; <nl> } <nl> + <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java <nl> index 75ec4a3 . . 57dd015 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java <nl> @ @ - 20 , 16 + 20 , 21 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . NoWhitespaceAfterCheck . MSG _ KEY ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> - import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> + import antlr . CommonHiddenStreamToken ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class NoWhitespaceAfterCheckTest <nl> extends BaseCheckTestSupport { <nl> @ @ - 41 , 6 + 46 , 12 @ @ public class NoWhitespaceAfterCheckTest <nl> + " whitespace " + File . separator + filename ) ; <nl> } <nl> <nl> + @ Override <nl> + protected String getNonCompilablePath ( String filename ) throws IOException { <nl> + return super . getNonCompilablePath ( " checks " + File . separator <nl> + + " whitespace " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Before <nl> public void setUp ( ) { <nl> checkConfig = createCheckConfig ( NoWhitespaceAfterCheck . class ) ; <nl> @ @ - 91 , 6 + 102 , 7 @ @ public class NoWhitespaceAfterCheckTest <nl> @ Test <nl> public void testArrayDeclarations ( ) throws Exception { <nl> checkConfig . addAttribute ( " tokens " , " ARRAY _ DECLARATOR " ) ; <nl> + checkConfig . addAttribute ( " tokens " , " INDEX _ OP " ) ; <nl> final String [ ] expected = { <nl> " 6 : 11 : " + getCheckMessage ( MSG _ KEY , " Object " ) , <nl> " 8 : 22 : " + getCheckMessage ( MSG _ KEY , " someStuff3 " ) , <nl> @ @ - 113 , 9 + 125 , 105 @ @ public class NoWhitespaceAfterCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testArrayDeclarations2 ( ) throws Exception { <nl> + checkConfig . addAttribute ( " tokens " , " ARRAY _ DECLARATOR " ) ; <nl> + checkConfig . addAttribute ( " tokens " , " INDEX _ OP " ) ; <nl> + final String [ ] expected = { <nl> + " 12 : 30 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 17 : 40 : " + getCheckMessage ( MSG _ KEY , " create " ) , <nl> + " 18 : 27 : " + getCheckMessage ( MSG _ KEY , " int " ) , <nl> + " 29 : 23 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 30 : 27 : " + getCheckMessage ( MSG _ KEY , " int " ) , <nl> + " 30 : 38 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 30 : 51 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 35 : 44 : " + getCheckMessage ( MSG _ KEY , " int " ) , <nl> + " 35 : 56 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 36 : 18 : " + getCheckMessage ( MSG _ KEY , " e " ) , <nl> + " 36 : 23 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 36 : 43 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 37 : 14 : " + getCheckMessage ( MSG _ KEY , " e " ) , <nl> + " 37 : 18 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 42 : 30 : " + getCheckMessage ( MSG _ KEY , " Integer " ) , <nl> + " 43 : 20 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 48 : 28 : " + getCheckMessage ( MSG _ KEY , " > " ) , <nl> + " 48 : 31 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 48 : 34 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 52 : 34 : " + getCheckMessage ( MSG _ KEY , " int " ) , <nl> + " 54 : 14 : " + getCheckMessage ( MSG _ KEY , " g " ) , <nl> + " 55 : 17 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 56 : 14 : " + getCheckMessage ( MSG _ KEY , " g " ) , <nl> + " 56 : 18 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 56 : 22 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 62 : 50 : " + getCheckMessage ( MSG _ KEY , " create " ) , <nl> + " 62 : 57 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 67 : 32 : " + getCheckMessage ( MSG _ KEY , " boolean " ) , <nl> + " 69 : 46 : " + getCheckMessage ( MSG _ KEY , " String " ) , <nl> + " 69 : 50 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 70 : 36 : " + getCheckMessage ( MSG _ KEY , " String " ) , <nl> + " 81 : 40 : " + getCheckMessage ( MSG _ KEY , " Integer " ) , <nl> + " 85 : 14 : " + getCheckMessage ( MSG _ KEY , " char " ) , <nl> + " 86 : 52 : " + getCheckMessage ( MSG _ KEY , " A " ) , <nl> + " 87 : 86 : " + getCheckMessage ( MSG _ KEY , " Object " ) , <nl> + " 90 : 41 : " + getCheckMessage ( MSG _ KEY , " ) " ) , <nl> + " 90 : 49 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + " 92 : 35 : " + getCheckMessage ( MSG _ KEY , " Object " ) , <nl> + " 94 : 45 : " + getCheckMessage ( MSG _ KEY , " ) " ) , <nl> + " 97 : 41 : " + getCheckMessage ( MSG _ KEY , " Object " ) , <nl> + " 100 : 43 : " + getCheckMessage ( MSG _ KEY , " ] " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputNoWhitespaceAfterArrayDeclarations2 . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testNpe ( ) throws Exception { <nl> - final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputNoWhiteSpaceAfterFormerNpe . java " ) , <nl> + verify ( checkConfig , getPath ( " InputNoWhiteSpaceAfterFormerNpe . java " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMethodReference ( ) throws Exception { <nl> + final String [ ] expected = { <nl> + " 10 : 40 : " + getCheckMessage ( MSG _ KEY , " int " ) , <nl> + " 11 : 63 : " + getCheckMessage ( MSG _ KEY , " Message " ) , <nl> + } ; <nl> + verify ( checkConfig , <nl> + getNonCompilablePath ( " InputNoWhitespaceAfterMethodRef . java " ) , <nl> expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testVisitTokenSwitchReflection ( ) throws Exception { <nl> + / / unexpected parent for ARRAY _ DECLARATOR token <nl> + final DetailAST astImport = mockAST ( TokenTypes . IMPORT , " import " , " mockfile " ) ; <nl> + final DetailAST astArrayDeclarator = mockAST ( TokenTypes . ARRAY _ DECLARATOR , " [ " , " mockfile " ) ; <nl> + final DetailAST astRBrake = mockAST ( TokenTypes . RBRACK , " [ " , " mockfile " ) ; <nl> + astImport . addChild ( astArrayDeclarator ) ; <nl> + astArrayDeclarator . addChild ( astRBrake ) ; <nl> + <nl> + final NoWhitespaceAfterCheck check = new NoWhitespaceAfterCheck ( ) ; <nl> + try { <nl> + check . visitToken ( astArrayDeclarator ) ; <nl> + fail ( " no intended exception thrown " ) ; <nl> + } <nl> + catch ( IllegalStateException e ) { <nl> + assertEquals ( " unexpected ast syntaximport [ 0x - 1 ] " , e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Creates MOCK lexical token and returns AST node for this token <nl> + * @ param tokenType type of token <nl> + * @ param tokenText text of token <nl> + * @ param tokenFileName file name of token <nl> + * @ return AST node for the token <nl> + * / <nl> + private static DetailAST mockAST ( final int tokenType , final String tokenText , <nl> + final String tokenFileName ) { <nl> + final CommonHiddenStreamToken tokenImportSemi = new CommonHiddenStreamToken ( ) ; <nl> + tokenImportSemi . setType ( tokenType ) ; <nl> + tokenImportSemi . setText ( tokenText ) ; <nl> + tokenImportSemi . setFilename ( tokenFileName ) ; <nl> + final DetailAST astSemi = new DetailAST ( ) ; <nl> + astSemi . initialize ( tokenImportSemi ) ; <nl> + return astSemi ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterMethodRef . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterMethodRef . java <nl> new file mode 100644 <nl> index 0000000 . . dcea3bf <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterMethodRef . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . whitespace ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . sun . corba . se . impl . protocol . giopmsgheaders . Message ; <nl> + <nl> + public class InputNoWhitespaceAfterMethodRef <nl> + { <nl> + IntFunction < int [ ] > arrayMaker = int [ ] : : new ; / / incorrect 10 : 40 <nl> + Function < Integer , Message [ ] > messageArrayFactory = Message [ ] : : new ; / / incorrect 11 : 63 <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations2 . java <nl> new file mode 100644 <nl> index 0000000 . . 21dfb26 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations2 . java <nl> @ @ - 0 , 0 + 1 , 108 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> + public class InputNoWhitespaceAfterArrayDeclarations2 <nl> + { <nl> + <nl> + public class A { <nl> + public int [ ] [ ] create ( int i , int j ) { <nl> + return new int [ 3 ] [ 3 ] ; / / incorrect , 12 : 30 <nl> + } <nl> + } <nl> + <nl> + public class B { <nl> + public int create ( int i , int j ) [ ] [ ] { / / incorrect , 17 : 40 <nl> + return new int [ 3 ] [ i + j ] ; / / incorrect , 18 : 27 <nl> + } <nl> + } <nl> + <nl> + public class C { <nl> + public int [ ] [ ] create ( int i , int j ) { <nl> + return new int [ i + j ] [ i + j ] ; / / correct <nl> + } <nl> + } <nl> + <nl> + public class D { <nl> + public int [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 29 : 23 <nl> + return new int [ i + j ] [ i + j ] [ 0 ] ; / / incorrect 30 : 27 , 38 , 51 <nl> + } <nl> + } <nl> + <nl> + public class E { <nl> + public int create ( int i , int j , int [ ] [ ] k ) [ ] [ ] [ ] { / / incorrect , 35 : 44 , 56 <nl> + int e [ ] [ ] [ ] = new int [ i + j ] [ 2 ] [ i + j ] ; / / incorrect , 36 : 18 , 23 , 43 <nl> + e [ 0 ] [ 1 ] [ 2 ] = 0 ; e [ 1 ] [ 1 ] [ 1 ] = 0 ; / / incorrect , 37 : 14 , 18 <nl> + return e ; <nl> + } <nl> + } <nl> + public static class F { <nl> + public static Integer [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 42 : 23 <nl> + int [ ] [ ] [ ] f = new int [ 0 ] [ 1 ] [ 2 ] ; <nl> + return new Integer [ i + j ] [ i + j ] [ 0 ] ; <nl> + } <nl> + } <nl> + public class G { <nl> + public List < String > [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 48 : 28 , 31 , 34 <nl> + / / cannot build with this check - generic array creation error , but whitespaces still catched <nl> + / / List < String > g [ ] [ ] [ ] = new List < String > [ 0 ] [ 1 ] [ 2 ] ; / / incorrect 49 : 33 , 55 <nl> + / / return new List < String > [ i + j ] [ i + j ] [ 0 ] ; / / correct <nl> + int g [ ] [ ] [ ] = new int [ 0 ] [ 1 ] [ 2 ] ; <nl> + g [ 0 ] [ 0 ] [ 0 ] = 0 ; <nl> + g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 54 : 14 <nl> + g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 55 : 17 <nl> + g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 56 : 14 , 18 , 22 <nl> + return null ; <nl> + } <nl> + <nl> + } <nl> + public class H { <nl> + public List < Integer > create ( int i , int j ) [ ] [ ] [ ] { / / incorrect , 62 : 46 , 53 <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + Object someStuff4 = boolean [ ] . class ; / / incorrect , 67 : 32 <nl> + String [ ] [ ] someStuff5 = new String [ 4 ] [ 9 ] ; <nl> + String [ ] [ ] someStuff6 = ( java . lang . String [ ] [ ] ) someStuff5 ; / / incorrect , 69 : 46 , 50 <nl> + String [ ] [ ] someStuff7 = ( String [ ] [ ] ) someStuff5 ; / / incorrect , 70 : 36 <nl> + <nl> + / / this is legal until allowLineBreaks is set to false <nl> + int someStuff8 <nl> + [ ] ; <nl> + <nl> + / / this is legal until allowLineBreaks is set to false <nl> + int [ ] <nl> + someStuff81 ; <nl> + <nl> + / / incorrect 81 : 40 <nl> + Integer someStuff9 [ ] [ ] [ ] = ( Integer [ ] [ ] [ ] ) InputNoWhitespaceAfterArrayDeclarations2 . F . create ( 1 , 2 ) ; <nl> + <nl> + / / type arguments <nl> + List < char [ ] > someStuff10 ; / / correct <nl> + List < char [ ] [ ] > someStuff11 ; / / incorrect 85 : 14 <nl> + List < InputNoWhitespaceAfterArrayDeclarations2 . A [ ] > someStuff12 ; / / incorrect 86 : 52 <nl> + public void foo ( java . util . List < ? extends String [ ] > bar , Comparable < ? super Object [ ] > baz ) { } / / incorrect 87 : 86 <nl> + <nl> + Integer someStuff13 = F . create ( 1 , 1 ) [ 0 ] [ 0 ] [ 0 ] ; <nl> + Integer someStuff131 = F . create ( 1 , 1 ) [ 0 ] [ 0 ] [ 0 ] ; / / incorrect 90 : 41 , 49 <nl> + Object [ ] someStuff14 = ( Object [ ] ) null ; <nl> + Object [ ] someStuff15 = ( Object [ ] ) null ; / / incorrect 92 : 35 <nl> + <nl> + byte someStuff16 = ( ( byte [ ] ) someStuff4 ) [ 0 ] ; / / incorrect 94 : 45 <nl> + <nl> + public void bar ( ) { <nl> + if ( someStuff15 instanceof Object [ ] ) { / / incorrect 97 : 41 <nl> + <nl> + } <nl> + if ( someStuff15 instanceof Object [ ] [ ] ) { / / incorrect 100 : 43 <nl> + <nl> + } <nl> + if ( someStuff15 instanceof Object [ ] [ ] ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml <nl> index c567a73 . . 79e7c92 100644 <nl> - - - a / src / xdocs / config _ whitespace . xml <nl> + + + b / src / xdocs / config _ whitespace . xml <nl> @ @ - 381 , 6 + 381 , 16 @ @ for ( Iterator foo = very . long . line . iterator ( ) ; <nl> forbid linebreaks after a token , set property < code > allowLineBreaks < / code > to < code > <nl> false < / code > . <nl> < / p > <nl> + < p > <nl> + The check processes <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ARRAY _ DECLARATOR " > ARRAY _ DECLARATOR < / a > <nl> + and <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INDEX _ OP " > INDEX _ OP < / a > <nl> + tokens specially from other tokens . Actually it is checked that there is <nl> + no whitespace before this tokens , not after them . <nl> + < / p > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " > <nl> @ @ - 425 , 9 + 435 , 7 @ @ for ( Iterator foo = very . long . line . iterator ( ) ; <nl> < a <nl> href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ARRAY _ DECLARATOR " > ARRAY _ DECLARATOR < / a > , <nl> < a <nl> - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # GENERIC _ START " > GENERIC _ START < / a > , <nl> - < a <nl> - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # GENERIC _ END " > GENERIC _ END < / a > . <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INDEX _ OP " > INDEX _ OP < / a > . <nl> < / td > <nl> <nl> < td > <nl> @ @ - 448 , 7 + 456 , 9 @ @ for ( Iterator foo = very . long . line . iterator ( ) ; <nl> < a <nl> href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # DOT " > DOT < / a > , <nl> < a <nl> - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ARRAY _ DECLARATOR " > ARRAY _ DECLARATOR < / a > . <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ARRAY _ DECLARATOR " > ARRAY _ DECLARATOR < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INDEX _ OP " > INDEX _ OP < / a > . <nl> < / td > <nl> < / tr > <nl> < / table >
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java <nl> index 9143b10 . . 01ba42a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java <nl> @ @ - 37 , 7 + 37 , 8 @ @ public class IllegalImportCheckTest extends BaseCheckTestSupport <nl> " 23 : 1 : Import from illegal package - java . io . File . listRoots . " , <nl> " 27 : 1 : Import from illegal package - java . io . File . createTempFile . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator + " InputIllegalImportCheck . java " ) , <nl> + expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 47 , 9 + 48 , 10 @ @ public class IllegalImportCheckTest extends BaseCheckTestSupport <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( IllegalImportCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 15 : 1 : Import from illegal package - sun . net . ftpclient . FtpClient . " , <nl> - " 28 : 1 : Import from illegal package - sun . net . ftpclient . FtpClient . * . " , <nl> + " 15 : 1 : Import from illegal package - sun . applet . * . " , <nl> + " 28 : 1 : Import from illegal package - sun . * . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator + " InputIllegalImportCheck . java " ) , <nl> + expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputIllegalImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputIllegalImportCheck . java <nl> new file mode 100644 <nl> index 0000000 . . aea09e4 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputIllegalImportCheck . java <nl> @ @ - 0 , 0 + 1 , 111 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . imports ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . imports . * ; <nl> + <nl> + import java . io . * ; <nl> + import java . lang . * ; <nl> + import java . sql . Connection ; <nl> + import java . util . List ; <nl> + import java . util . List ; <nl> + import java . lang . ArithmeticException ; <nl> + import sun . applet . * ; <nl> + import java . util . Enumeration ; <nl> + import java . util . Arrays ; <nl> + <nl> + import javax . swing . JToolBar ; <nl> + import javax . swing . JToggleButton ; <nl> + import javax . swing . ScrollPaneLayout ; <nl> + import javax . swing . BorderFactory ; <nl> + import static java . io . File . listRoots ; <nl> + <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static java . io . File . createTempFile ; <nl> + import sun . * ; <nl> + <nl> + import java . awt . Component ; <nl> + import java . awt . Graphics2D ; <nl> + import java . awt . HeadlessException ; <nl> + import java . awt . Label ; <nl> + import java . util . Date ; <nl> + import java . util . Calendar ; <nl> + import java . util . BitSet ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . Checker ; <nl> + import com . puppycrawl . tools . checkstyle . CheckerTest ; <nl> + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . Defn ; <nl> + import com . puppycrawl . tools . checkstyle . Input15Extensions ; <nl> + import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; <nl> + import com . puppycrawl . tools . checkstyle . CheckStyleTask ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> + <nl> + / * * <nl> + * Test case for imports <nl> + * Here ' s an import used only by javadoc : { @ link Date } . <nl> + * @ author Oliver Burn <nl> + * @ author lkuehne <nl> + * @ author Michael Studman <nl> + * @ see Calendar Should avoid unused import for Calendar <nl> + * * / <nl> + class InputIllegalImportCheck <nl> + { <nl> + / * * ignore * * / <nl> + private Class mUse1 = Connection . class ; <nl> + / * * ignore * * / <nl> + private Class mUse2 = java . io . File . class ; <nl> + / * * ignore * * / <nl> + private Class mUse3 = null ; <nl> + / * * ignore * * / <nl> + private Class mUse4 = java . util . Enumeration [ ] . class ; <nl> + / * * usage of illegal import * * / <nl> + private String ftpClient = null ; <nl> + <nl> + / * * usage via static method , both normal and fully qualified * / <nl> + { <nl> + int [ ] x = { } ; <nl> + Arrays . sort ( x ) ; <nl> + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; <nl> + File [ ] files = listRoots ( ) ; <nl> + } <nl> + <nl> + / * * usage of inner class as type * / <nl> + private JToolBar . Separator mSep = null ; <nl> + <nl> + / * * usage of inner class in Constructor * / <nl> + private Object mUse5 = new Object ( ) ; <nl> + <nl> + / * * usage of inner class in constructor , fully qualified * / <nl> + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; <nl> + <nl> + / * * we use class name as member ' s name . <nl> + * also an inline JavaDoc - only import { @ link Vector linkText } * / <nl> + private int Component ; <nl> + <nl> + / * * <nl> + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } <nl> + * / <nl> + public void Label ( ) { } <nl> + <nl> + / * * <nl> + * Renders to a { @ linkplain Graphics2D graphics context } . <nl> + * @ throws HeadlessException if no graphis environment can be found . <nl> + * @ exception HeadlessException if no graphis environment can be found . <nl> + * / <nl> + public void render ( ) { } <nl> + <nl> + / * * <nl> + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . <nl> + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . <nl> + * <nl> + * @ param param1 with a link { @ link TestClass6 } <nl> + * @ throws TestClass7 when broken <nl> + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } <nl> + * / <nl> + public void aMethodWithManyLinks ( ) { } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java 
 index bac22a6 . . 1710667 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java 
 @ @ - 19 , 8 + 19 , 6 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 
 - import org . apache . commons . lang3 . ArrayUtils ; 
 - 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 29 , 8 + 27 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * < p > 
 * Checks that there is no whitespace after a token . 
 * More specifically , it checks that it is not followed by whitespace , 
 - * or ( if line breaks are allowed ) all characters on the line after are 
 - * whitespace . To forbid line breaks after a token , set property 
 + * or ( if linebreaks are allowed ) all characters on the line after are 
 + * whitespace . To forbid linebreaks after a token , set property 
 * allowLineBreaks to false . 
 * < / p > 
 * < p > By default the check will check the following operators : 
 @ @ - 41 , 9 + 39 , 17 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * { @ link TokenTypes # INC INC } , 
 * { @ link TokenTypes # LNOT LNOT } , 
 * { @ link TokenTypes # UNARY _ MINUS UNARY _ MINUS } , 
 + * { @ link TokenTypes # UNARY _ PLUS UNARY _ PLUS } , 
 + * { @ link TokenTypes # TYPECAST TYPECAST } , 
 * { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } , 
 - * { @ link TokenTypes # UNARY _ PLUS UNARY _ PLUS } . It also supports the operator 
 - * { @ link TokenTypes # TYPECAST TYPECAST } . 
 + * { @ link TokenTypes # INDEX _ OP INDEX _ OP } . 
 + * < / p > 
 + * < p > 
 + * The check processes 
 + * { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } , 
 + * { @ link TokenTypes # INDEX _ OP INDEX _ OP } 
 + * specially from other tokens . Actually it is checked that there is 
 + * no whitespace before this tokens , not after them . 
 * < / p > 
 * < p > 
 * An example of how to configure the check is : 
 @ @ - 51 , 7 + 57 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * < pre > 
 * & lt ; module name = " NoWhitespaceAfter " / & gt ; 
 * < / pre > 
 - * < p > An example of how to configure the check to forbid line breaks after 
 + * < p > An example of how to configure the check to forbid linebreaks after 
 * a { @ link TokenTypes # DOT DOT } token is : 
 * < / p > 
 * < pre > 
 @ @ - 63 , 6 + 69 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * @ author Rick Giles 
 * @ author lkuehne 
 * @ author < a href = " mailto : nesterenko - aleksey @ list . ru " > Aleksey Nesterenko < / a > 
 + * @ author attatrol 
 * / 
 public class NoWhitespaceAfterCheck extends Check { 
 
 @ @ - 87 , 6 + 94 , 7 @ @ public class NoWhitespaceAfterCheck extends Check { 
 TokenTypes . LNOT , 
 TokenTypes . DOT , 
 TokenTypes . ARRAY _ DECLARATOR , 
 + TokenTypes . INDEX _ OP , 
 } ; 
 } 
 
 @ @ - 103 , 48 + 111 , 55 @ @ public class NoWhitespaceAfterCheck extends Check { 
 TokenTypes . DOT , 
 TokenTypes . TYPECAST , 
 TokenTypes . ARRAY _ DECLARATOR , 
 - TokenTypes . GENERIC _ START , 
 - TokenTypes . GENERIC _ END , 
 + TokenTypes . INDEX _ OP , 
 } ; 
 } 
 
 - @ Override 
 - public int [ ] getRequiredTokens ( ) { 
 - return ArrayUtils . EMPTY _ INT _ ARRAY ; 
 + / * * 
 + * Control whether whitespace is flagged at linebreaks . 
 + * @ param allowLineBreaks whether whitespace should be 
 + * flagged at linebreaks . 
 + * / 
 + public void setAllowLineBreaks ( boolean allowLineBreaks ) { 
 + this . allowLineBreaks = allowLineBreaks ; 
 } 
 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 - final DetailAST astNode = getPreceded ( ast ) ; 
 - final String line = getLine ( ast . getLineNo ( ) - 1 ) ; 
 - final int after = getPositionAfter ( astNode ) ; 
 + final DetailAST whitespaceFollowedAst = getWhitespaceFollowedNode ( ast ) ; 
 
 - if ( ( after > = line . length ( ) | | Character . isWhitespace ( line . charAt ( after ) ) ) 
 - & & hasRedundantWhitespace ( line , after ) ) { 
 - log ( astNode . getLineNo ( ) , after , 
 - MSG _ KEY , astNode . getText ( ) ) ; 
 + final int whitespaceColumnNo = getPositionAfter ( whitespaceFollowedAst ) ; 
 + final int whitespaceLineNo = whitespaceFollowedAst . getLineNo ( ) ; 
 + 
 + if ( hasTrailingWhitespace ( ast , whitespaceColumnNo , whitespaceLineNo ) ) { 
 + log ( whitespaceLineNo , whitespaceColumnNo , 
 + MSG _ KEY , whitespaceFollowedAst . getText ( ) ) ; 
 } 
 } 
 
 / * * 
 - * Gets possible place where redundant whitespace could be . 
 - * @ param ast Node representing token . 
 - * @ return possible place of redundant whitespace . 
 + * For a visited ast node returns node that should be checked 
 + * for not being followed by whitespace . 
 + * @ param ast 
 + * , visited node . 
 + * @ return node before ast . 
 * / 
 - private static DetailAST getPreceded ( DetailAST ast ) { 
 - DetailAST preceded ; 
 - 
 + private static DetailAST getWhitespaceFollowedNode ( DetailAST ast ) { 
 + DetailAST whitespaceFollowedAst ; 
 switch ( ast . getType ( ) ) { 
 case TokenTypes . TYPECAST : 
 - preceded = ast . findFirstToken ( TokenTypes . RPAREN ) ; 
 + whitespaceFollowedAst = ast . findFirstToken ( TokenTypes . RPAREN ) ; 
 break ; 
 case TokenTypes . ARRAY _ DECLARATOR : 
 - preceded = getArrayTypeOrIdentifier ( ast ) ; 
 + whitespaceFollowedAst = getArrayDeclaratorPreviousElement ( ast ) ; 
 + break ; 
 + case TokenTypes . INDEX _ OP : 
 + whitespaceFollowedAst = getIndexOpPreviousElement ( ast ) ; 
 break ; 
 default : 
 - preceded = ast ; 
 + whitespaceFollowedAst = ast ; 
 } 
 - return preceded ; 
 + return whitespaceFollowedAst ; 
 } 
 
 / * * 
 @ @ - 153 , 8 + 168 , 8 @ @ public class NoWhitespaceAfterCheck extends Check { 
 * @ return position after token . 
 * / 
 private static int getPositionAfter ( DetailAST ast ) { 
 - int after ; 
 - / / If target of possible redundant whitespace is in method definition 
 + final int after ; 
 + / / If target of possible redundant whitespace is in method definition . 
 if ( ast . getType ( ) = = TokenTypes . IDENT 
 & & ast . getNextSibling ( ) ! = null 
 & & ast . getNextSibling ( ) . getType ( ) = = TokenTypes . LPAREN ) { 
 @ @ - 169 , 163 + 184 , 219 @ @ public class NoWhitespaceAfterCheck extends Check { 
 } 
 
 / * * 
 - * Gets target place of possible redundant whitespace ( array ' s type or identifier ) 
 - * after which { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } is set . 
 - * @ param arrayDeclarator { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } 
 - * @ return target place before possible redundant whitespace . 
 + * Checks if there is unwanted whitespace after the visited node . 
 + * @ param ast 
 + * , visited node . 
 + * @ param whitespaceColumnNo 
 + * , column number of a possible whitespace . 
 + * @ param whitespaceLineNo 
 + * , line number of a possible whitespace . 
 + * @ return true if whitespace found . 
 * / 
 - private static DetailAST getArrayTypeOrIdentifier ( DetailAST arrayDeclarator ) { 
 - DetailAST typeOrIdent = arrayDeclarator ; 
 - if ( isArrayInstantiation ( arrayDeclarator ) ) { 
 - typeOrIdent = arrayDeclarator . getParent ( ) . getFirstChild ( ) ; 
 - } 
 - else if ( isMultiDimensionalArray ( arrayDeclarator ) ) { 
 - if ( isCStyleMultiDimensionalArrayDeclaration ( arrayDeclarator ) ) { 
 - if ( arrayDeclarator . getParent ( ) . getType ( ) ! = TokenTypes . ARRAY _ DECLARATOR ) { 
 - typeOrIdent = getArrayIdentifier ( arrayDeclarator ) ; 
 - } 
 - } 
 - else { 
 - DetailAST arrayIdentifier = arrayDeclarator . getFirstChild ( ) ; 
 - while ( arrayIdentifier ! = null ) { 
 - typeOrIdent = arrayIdentifier ; 
 - arrayIdentifier = arrayIdentifier . getFirstChild ( ) ; 
 - } 
 - } 
 + boolean hasTrailingWhitespace ( DetailAST ast , 
 + int whitespaceColumnNo , int whitespaceLineNo ) { 
 + final boolean result ; 
 + final int astLineNo = ast . getLineNo ( ) ; 
 + final String line = getLine ( astLineNo - 1 ) ; 
 + if ( astLineNo = = whitespaceLineNo & & whitespaceColumnNo < line . length ( ) ) { 
 + result = Character . isWhitespace ( line . charAt ( whitespaceColumnNo ) ) ; 
 } 
 else { 
 - if ( isCStyleArrayDeclaration ( arrayDeclarator ) ) { 
 - typeOrIdent = getArrayIdentifier ( arrayDeclarator ) ; 
 - } 
 - else { 
 - if ( isArrayUsedAsTypeForGenericBoundedWildcard ( arrayDeclarator ) ) { 
 - typeOrIdent = arrayDeclarator . getParent ( ) ; 
 - } 
 - else { 
 - typeOrIdent = arrayDeclarator . getFirstChild ( ) ; 
 - } 
 - } 
 + result = ! allowLineBreaks ; 
 } 
 - return typeOrIdent ; 
 - } 
 - 
 - / * * 
 - * Gets array identifier , e . g . : 
 - * < p > 
 - * { @ code 
 - * int [ ] someArray ; 
 - * } 
 - * < / p > 
 - * < p > 
 - * someArray is identifier . 
 - * < / p > 
 - * @ param arrayDeclarator { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } 
 - * @ return array identifier . 
 - * / 
 - private static DetailAST getArrayIdentifier ( DetailAST arrayDeclarator ) { 
 - return arrayDeclarator . getParent ( ) . getNextSibling ( ) ; 
 - } 
 - 
 - / * * 
 - * Checks if current array is multidimensional . 
 - * @ param arrayDeclaration { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } 
 - * @ return true if current array is multidimensional . 
 - * / 
 - private static boolean isMultiDimensionalArray ( DetailAST arrayDeclaration ) { 
 - return arrayDeclaration . getParent ( ) . getType ( ) = = TokenTypes . ARRAY _ DECLARATOR 
 - | | arrayDeclaration . getFirstChild ( ) . getType ( ) = = TokenTypes . ARRAY _ DECLARATOR ; 
 + return result ; 
 } 
 
 / * * 
 - * Checks if current array declaration is part of array instantiation . 
 - * @ param arrayDeclaration { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } 
 - * @ return true if current array declaration is part of array instantiation . 
 + * Returns proper argument for getPositionAfter method , it is a token after 
 + * { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } , in can be { @ link TokenTypes # RBRACK 
 + * RBRACK } , { @ link TokenTypes # IDENT IDENT } or an array type definition ( literal ) . 
 + * @ param ast 
 + * , { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } node . 
 + * @ return previous node by text order . 
 * / 
 - private static boolean isArrayInstantiation ( DetailAST arrayDeclaration ) { 
 - return arrayDeclaration . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ NEW ; 
 + private static DetailAST getArrayDeclaratorPreviousElement ( DetailAST ast ) { 
 + final DetailAST previousElement ; 
 + final DetailAST firstChild = ast . getFirstChild ( ) ; 
 + if ( firstChild . getType ( ) = = TokenTypes . ARRAY _ DECLARATOR ) { 
 + / / second or higher array index 
 + previousElement = firstChild . findFirstToken ( TokenTypes . RBRACK ) ; 
 + } 
 + else { 
 + / / first array index , is preceded with identifier or type 
 + final DetailAST parent = getFirstNonArrayDeclaratorParent ( ast ) ; 
 + switch ( parent . getType ( ) ) { 
 + / / generics 
 + case TokenTypes . TYPE _ ARGUMENT : 
 + final DetailAST wildcard = parent . findFirstToken ( TokenTypes . WILDCARD _ TYPE ) ; 
 + if ( wildcard = = null ) { 
 + / / usual generic type argument like < char [ ] > 
 + previousElement = getTypeLastNode ( ast ) ; 
 + } 
 + else { 
 + / / constructions with wildcard like < ? extends String [ ] > 
 + previousElement = getTypeLastNode ( ast . getFirstChild ( ) ) ; 
 + } 
 + break ; 
 + / / ' new ' is a special case with its own subtree structure 
 + case TokenTypes . LITERAL _ NEW : 
 + previousElement = getTypeLastNode ( parent ) ; 
 + break ; 
 + / / mundane array declaration , can be either java style or C style 
 + case TokenTypes . TYPE : 
 + previousElement = getPreviousNodeWithParentOfTypeAst ( ast , parent ) ; 
 + break ; 
 + / / i . e . boolean [ ] . class 
 + case TokenTypes . DOT : 
 + previousElement = getTypeLastNode ( ast ) ; 
 + break ; 
 + / / java 8 method reference 
 + case TokenTypes . METHOD _ REF : 
 + final DetailAST ident = getIdentLastToken ( ast ) ; 
 + if ( ident = = null ) { 
 + / / i . e . int [ ] : : new 
 + previousElement = ast . getFirstChild ( ) ; 
 + } 
 + else { 
 + previousElement = ident ; 
 + } 
 + break ; 
 + default : 
 + throw new IllegalStateException ( " unexpected ast syntax " + parent ) ; 
 + } 
 + } 
 + return previousElement ; 
 } 
 
 / * * 
 - * Checks if current array is used as type for generic bounded wildcard . 
 - * < p > 
 - * E . g . { @ code < ? extends String [ ] > } or { @ code < ? super Object [ ] > } . 
 - * < / p > 
 - * @ param arrayDeclarator { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } 
 - * @ return true if current array is used as type for generic bounded wildcard . 
 + * Gets previous node for { @ link TokenTypes # INDEX _ OP INDEX _ OP } token 
 + * for usage in getPositionAfter method , it is a simplified copy of 
 + * getArrayDeclaratorPreviousElement method . 
 + * @ param ast 
 + * , { @ link TokenTypes # INDEX _ OP INDEX _ OP } node . 
 + * @ return previous node by text order . 
 * / 
 - private static boolean isArrayUsedAsTypeForGenericBoundedWildcard ( DetailAST arrayDeclarator ) { 
 - final int firstChildType = arrayDeclarator . getFirstChild ( ) . getType ( ) ; 
 - return firstChildType = = TokenTypes . TYPE _ UPPER _ BOUNDS 
 - | | firstChildType = = TokenTypes . TYPE _ LOWER _ BOUNDS ; 
 + private static DetailAST getIndexOpPreviousElement ( DetailAST ast ) { 
 + DetailAST result ; 
 + final DetailAST firstChild = ast . getFirstChild ( ) ; 
 + if ( firstChild . getType ( ) = = TokenTypes . INDEX _ OP ) { 
 + / / second or higher array index 
 + result = firstChild . findFirstToken ( TokenTypes . RBRACK ) ; 
 + } 
 + else { 
 + final DetailAST ident = getIdentLastToken ( ast ) ; 
 + if ( ident = = null ) { 
 + / / construction like ( ( byte [ ] ) pixels ) [ 0 ] 
 + result = ast . findFirstToken ( TokenTypes . RPAREN ) ; 
 + } 
 + else { 
 + result = ident ; 
 + } 
 + } 
 + return result ; 
 } 
 
 / * * 
 - * Control whether whitespace is flagged at line breaks . 
 - * @ param allowLineBreaks whether whitespace should be 
 - * flagged at line breaks . 
 + * Get node that owns { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } sequence . 
 + * @ param ast 
 + * , { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } node . 
 + * @ return owner node . 
 * / 
 - public void setAllowLineBreaks ( boolean allowLineBreaks ) { 
 - this . allowLineBreaks = allowLineBreaks ; 
 + private static DetailAST getFirstNonArrayDeclaratorParent ( DetailAST ast ) { 
 + DetailAST parent = ast . getParent ( ) ; 
 + while ( parent . getType ( ) = = TokenTypes . ARRAY _ DECLARATOR ) { 
 + parent = parent . getParent ( ) ; 
 + } 
 + return parent ; 
 } 
 
 / * * 
 - * Checks if current array is declared in C style , e . g . : 
 - * < p > 
 - * { @ code 
 - * int array [ ] = { . . . } ; / / C style 
 - * } 
 - * < / p > 
 - * < p > 
 - * { @ code 
 - * int [ ] array = { . . . } ; / / Java style 
 - * } 
 - * < / p > 
 - * @ param arrayDeclaration { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } 
 - * @ return true if array is declared in C style 
 + * Searches parameter node for a type node . 
 + * Returns it or its last node if it has an extended structure . 
 + * @ param ast 
 + * , subject node . 
 + * @ return type node . 
 * / 
 - private static boolean isCStyleArrayDeclaration ( DetailAST arrayDeclaration ) { 
 - boolean result = false ; 
 - final DetailAST identifier = getArrayIdentifier ( arrayDeclaration ) ; 
 - if ( identifier ! = null ) { 
 - final int arrayDeclarationStart = arrayDeclaration . getColumnNo ( ) ; 
 - final int identifierEnd = identifier . getColumnNo ( ) + identifier . getText ( ) . length ( ) ; 
 - result = arrayDeclarationStart = = identifierEnd 
 - | | arrayDeclarationStart > identifierEnd ; 
 + private static DetailAST getTypeLastNode ( DetailAST ast ) { 
 + DetailAST result = ast . findFirstToken ( TokenTypes . TYPE _ ARGUMENTS ) ; 
 + if ( result = = null ) { 
 + result = getIdentLastToken ( ast ) ; 
 + if ( result = = null ) { 
 + / / primitive literal expected 
 + result = ast . getFirstChild ( ) ; 
 + } 
 + } 
 + else { 
 + result = result . findFirstToken ( TokenTypes . GENERIC _ END ) ; 
 } 
 return result ; 
 } 
 
 / * * 
 - * Works with multidimensional arrays . 
 - * @ param arrayDeclaration { @ link TokenTypes # ARRAY _ DECLARATOR ARRAY _ DECLARATOR } 
 - * @ return true if multidimensional array is declared in C style . 
 + * Finds previous node by text order for an array declarator , 
 + * which parent type is { @ link TokenTypes # TYPE TYPE } . 
 + * @ param ast 
 + * , array declarator node . 
 + * @ param parent 
 + * , its parent node . 
 + * @ return previous node by text order . 
 * / 
 - private static boolean isCStyleMultiDimensionalArrayDeclaration ( DetailAST arrayDeclaration ) { 
 - boolean result = false ; 
 - DetailAST parentArrayDeclaration = arrayDeclaration ; 
 - while ( parentArrayDeclaration ! = null ) { 
 - if ( parentArrayDeclaration . getParent ( ) ! = null 
 - & & parentArrayDeclaration . getParent ( ) . getType ( ) = = TokenTypes . TYPE ) { 
 - result = isCStyleArrayDeclaration ( parentArrayDeclaration ) ; 
 + private static DetailAST getPreviousNodeWithParentOfTypeAst ( DetailAST ast , DetailAST parent ) { 
 + final DetailAST previousElement ; 
 + final DetailAST ident = getIdentLastToken ( parent . getParent ( ) ) ; 
 + final DetailAST lastTypeNode = getTypeLastNode ( ast ) ; 
 + / / sometimes there are ident - less sentences 
 + / / i . e . " ( Object [ ] ) null " , but in casual case should be 
 + / / checked whether ident or lastTypeNode has preceding position 
 + / / determining if it is java style or C style 
 + if ( ident = = null | | ident . getLineNo ( ) > ast . getLineNo ( ) ) { 
 + previousElement = lastTypeNode ; 
 + } 
 + else if ( ident . getLineNo ( ) < ast . getLineNo ( ) ) { 
 + previousElement = ident ; 
 + } 
 + / / ident and lastTypeNode lay on one line 
 + else { 
 + if ( ident . getColumnNo ( ) > ast . getColumnNo ( ) 
 + | | lastTypeNode . getColumnNo ( ) > ident . getColumnNo ( ) ) { 
 + previousElement = lastTypeNode ; 
 + } 
 + else { 
 + previousElement = ident ; 
 } 
 - parentArrayDeclaration = parentArrayDeclaration . getParent ( ) ; 
 } 
 - return result ; 
 + return previousElement ; 
 } 
 
 / * * 
 - * Checks if current line has redundant whitespace after specified index . 
 - * @ param line line of java source . 
 - * @ param after specified index . 
 - * @ return true if line contains redundant whitespace . 
 + * Gets leftmost token of identifier . 
 + * @ param ast 
 + * , token possibly possessing an identifier . 
 + * @ return leftmost token of identifier . 
 * / 
 - private boolean hasRedundantWhitespace ( String line , int after ) { 
 - boolean result = ! allowLineBreaks ; 
 - for ( int i = after + 1 ; ! result & & i < line . length ( ) ; i + + ) { 
 - if ( ! Character . isWhitespace ( line . charAt ( i ) ) ) { 
 - result = true ; 
 + private static DetailAST getIdentLastToken ( DetailAST ast ) { 
 + / / single identifier token as a name is the most common case 
 + DetailAST result = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 + if ( result = = null ) { 
 + final DetailAST dot = ast . findFirstToken ( TokenTypes . DOT ) ; 
 + / / method call case 
 + if ( dot = = null ) { 
 + final DetailAST methodCall = ast . findFirstToken ( TokenTypes . METHOD _ CALL ) ; 
 + if ( methodCall ! = null ) { 
 + result = methodCall . findFirstToken ( TokenTypes . RPAREN ) ; 
 + } 
 + } 
 + / / qualified name case 
 + else { 
 + if ( dot . findFirstToken ( TokenTypes . DOT ) = = null ) { 
 + result = dot . getFirstChild ( ) . getNextSibling ( ) ; 
 + } 
 + else { 
 + result = dot . findFirstToken ( TokenTypes . IDENT ) ; 
 + } 
 } 
 } 
 return result ; 
 } 
 + 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java 
 index 75ec4a3 . . 57dd015 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java 
 @ @ - 20 , 16 + 20 , 21 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . NoWhitespaceAfterCheck . MSG _ KEY ; 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . fail ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 
 - import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 
 + import antlr . CommonHiddenStreamToken ; 
 + 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class NoWhitespaceAfterCheckTest 
 extends BaseCheckTestSupport { 
 @ @ - 41 , 6 + 46 , 12 @ @ public class NoWhitespaceAfterCheckTest 
 + " whitespace " + File . separator + filename ) ; 
 } 
 
 + @ Override 
 + protected String getNonCompilablePath ( String filename ) throws IOException { 
 + return super . getNonCompilablePath ( " checks " + File . separator 
 + + " whitespace " + File . separator + filename ) ; 
 + } 
 + 
 @ Before 
 public void setUp ( ) { 
 checkConfig = createCheckConfig ( NoWhitespaceAfterCheck . class ) ; 
 @ @ - 91 , 6 + 102 , 7 @ @ public class NoWhitespaceAfterCheckTest 
 @ Test 
 public void testArrayDeclarations ( ) throws Exception { 
 checkConfig . addAttribute ( " tokens " , " ARRAY _ DECLARATOR " ) ; 
 + checkConfig . addAttribute ( " tokens " , " INDEX _ OP " ) ; 
 final String [ ] expected = { 
 " 6 : 11 : " + getCheckMessage ( MSG _ KEY , " Object " ) , 
 " 8 : 22 : " + getCheckMessage ( MSG _ KEY , " someStuff3 " ) , 
 @ @ - 113 , 9 + 125 , 105 @ @ public class NoWhitespaceAfterCheckTest 
 } 
 
 @ Test 
 + public void testArrayDeclarations2 ( ) throws Exception { 
 + checkConfig . addAttribute ( " tokens " , " ARRAY _ DECLARATOR " ) ; 
 + checkConfig . addAttribute ( " tokens " , " INDEX _ OP " ) ; 
 + final String [ ] expected = { 
 + " 12 : 30 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 17 : 40 : " + getCheckMessage ( MSG _ KEY , " create " ) , 
 + " 18 : 27 : " + getCheckMessage ( MSG _ KEY , " int " ) , 
 + " 29 : 23 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 30 : 27 : " + getCheckMessage ( MSG _ KEY , " int " ) , 
 + " 30 : 38 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 30 : 51 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 35 : 44 : " + getCheckMessage ( MSG _ KEY , " int " ) , 
 + " 35 : 56 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 36 : 18 : " + getCheckMessage ( MSG _ KEY , " e " ) , 
 + " 36 : 23 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 36 : 43 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 37 : 14 : " + getCheckMessage ( MSG _ KEY , " e " ) , 
 + " 37 : 18 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 42 : 30 : " + getCheckMessage ( MSG _ KEY , " Integer " ) , 
 + " 43 : 20 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 48 : 28 : " + getCheckMessage ( MSG _ KEY , " > " ) , 
 + " 48 : 31 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 48 : 34 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 52 : 34 : " + getCheckMessage ( MSG _ KEY , " int " ) , 
 + " 54 : 14 : " + getCheckMessage ( MSG _ KEY , " g " ) , 
 + " 55 : 17 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 56 : 14 : " + getCheckMessage ( MSG _ KEY , " g " ) , 
 + " 56 : 18 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 56 : 22 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 62 : 50 : " + getCheckMessage ( MSG _ KEY , " create " ) , 
 + " 62 : 57 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 67 : 32 : " + getCheckMessage ( MSG _ KEY , " boolean " ) , 
 + " 69 : 46 : " + getCheckMessage ( MSG _ KEY , " String " ) , 
 + " 69 : 50 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 70 : 36 : " + getCheckMessage ( MSG _ KEY , " String " ) , 
 + " 81 : 40 : " + getCheckMessage ( MSG _ KEY , " Integer " ) , 
 + " 85 : 14 : " + getCheckMessage ( MSG _ KEY , " char " ) , 
 + " 86 : 52 : " + getCheckMessage ( MSG _ KEY , " A " ) , 
 + " 87 : 86 : " + getCheckMessage ( MSG _ KEY , " Object " ) , 
 + " 90 : 41 : " + getCheckMessage ( MSG _ KEY , " ) " ) , 
 + " 90 : 49 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + " 92 : 35 : " + getCheckMessage ( MSG _ KEY , " Object " ) , 
 + " 94 : 45 : " + getCheckMessage ( MSG _ KEY , " ) " ) , 
 + " 97 : 41 : " + getCheckMessage ( MSG _ KEY , " Object " ) , 
 + " 100 : 43 : " + getCheckMessage ( MSG _ KEY , " ] " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputNoWhitespaceAfterArrayDeclarations2 . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testNpe ( ) throws Exception { 
 - final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputNoWhiteSpaceAfterFormerNpe . java " ) , 
 + verify ( checkConfig , getPath ( " InputNoWhiteSpaceAfterFormerNpe . java " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testMethodReference ( ) throws Exception { 
 + final String [ ] expected = { 
 + " 10 : 40 : " + getCheckMessage ( MSG _ KEY , " int " ) , 
 + " 11 : 63 : " + getCheckMessage ( MSG _ KEY , " Message " ) , 
 + } ; 
 + verify ( checkConfig , 
 + getNonCompilablePath ( " InputNoWhitespaceAfterMethodRef . java " ) , 
 expected ) ; 
 } 
 + 
 + @ Test 
 + public void testVisitTokenSwitchReflection ( ) throws Exception { 
 + / / unexpected parent for ARRAY _ DECLARATOR token 
 + final DetailAST astImport = mockAST ( TokenTypes . IMPORT , " import " , " mockfile " ) ; 
 + final DetailAST astArrayDeclarator = mockAST ( TokenTypes . ARRAY _ DECLARATOR , " [ " , " mockfile " ) ; 
 + final DetailAST astRBrake = mockAST ( TokenTypes . RBRACK , " [ " , " mockfile " ) ; 
 + astImport . addChild ( astArrayDeclarator ) ; 
 + astArrayDeclarator . addChild ( astRBrake ) ; 
 + 
 + final NoWhitespaceAfterCheck check = new NoWhitespaceAfterCheck ( ) ; 
 + try { 
 + check . visitToken ( astArrayDeclarator ) ; 
 + fail ( " no intended exception thrown " ) ; 
 + } 
 + catch ( IllegalStateException e ) { 
 + assertEquals ( " unexpected ast syntaximport [ 0x - 1 ] " , e . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Creates MOCK lexical token and returns AST node for this token 
 + * @ param tokenType type of token 
 + * @ param tokenText text of token 
 + * @ param tokenFileName file name of token 
 + * @ return AST node for the token 
 + * / 
 + private static DetailAST mockAST ( final int tokenType , final String tokenText , 
 + final String tokenFileName ) { 
 + final CommonHiddenStreamToken tokenImportSemi = new CommonHiddenStreamToken ( ) ; 
 + tokenImportSemi . setType ( tokenType ) ; 
 + tokenImportSemi . setText ( tokenText ) ; 
 + tokenImportSemi . setFilename ( tokenFileName ) ; 
 + final DetailAST astSemi = new DetailAST ( ) ; 
 + astSemi . initialize ( tokenImportSemi ) ; 
 + return astSemi ; 
 + } 
 } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterMethodRef . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterMethodRef . java 
 new file mode 100644 
 index 0000000 . . dcea3bf 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterMethodRef . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . whitespace ; 
 + 
 + import java . util . List ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . sun . corba . se . impl . protocol . giopmsgheaders . Message ; 
 + 
 + public class InputNoWhitespaceAfterMethodRef 
 + { 
 + IntFunction < int [ ] > arrayMaker = int [ ] : : new ; / / incorrect 10 : 40 
 + Function < Integer , Message [ ] > messageArrayFactory = Message [ ] : : new ; / / incorrect 11 : 63 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations2 . java 
 new file mode 100644 
 index 0000000 . . 21dfb26 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations2 . java 
 @ @ - 0 , 0 + 1 , 108 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 + 
 + import java . util . List ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 + public class InputNoWhitespaceAfterArrayDeclarations2 
 + { 
 + 
 + public class A { 
 + public int [ ] [ ] create ( int i , int j ) { 
 + return new int [ 3 ] [ 3 ] ; / / incorrect , 12 : 30 
 + } 
 + } 
 + 
 + public class B { 
 + public int create ( int i , int j ) [ ] [ ] { / / incorrect , 17 : 40 
 + return new int [ 3 ] [ i + j ] ; / / incorrect , 18 : 27 
 + } 
 + } 
 + 
 + public class C { 
 + public int [ ] [ ] create ( int i , int j ) { 
 + return new int [ i + j ] [ i + j ] ; / / correct 
 + } 
 + } 
 + 
 + public class D { 
 + public int [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 29 : 23 
 + return new int [ i + j ] [ i + j ] [ 0 ] ; / / incorrect 30 : 27 , 38 , 51 
 + } 
 + } 
 + 
 + public class E { 
 + public int create ( int i , int j , int [ ] [ ] k ) [ ] [ ] [ ] { / / incorrect , 35 : 44 , 56 
 + int e [ ] [ ] [ ] = new int [ i + j ] [ 2 ] [ i + j ] ; / / incorrect , 36 : 18 , 23 , 43 
 + e [ 0 ] [ 1 ] [ 2 ] = 0 ; e [ 1 ] [ 1 ] [ 1 ] = 0 ; / / incorrect , 37 : 14 , 18 
 + return e ; 
 + } 
 + } 
 + public static class F { 
 + public static Integer [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 42 : 23 
 + int [ ] [ ] [ ] f = new int [ 0 ] [ 1 ] [ 2 ] ; 
 + return new Integer [ i + j ] [ i + j ] [ 0 ] ; 
 + } 
 + } 
 + public class G { 
 + public List < String > [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 48 : 28 , 31 , 34 
 + / / cannot build with this check - generic array creation error , but whitespaces still catched 
 + / / List < String > g [ ] [ ] [ ] = new List < String > [ 0 ] [ 1 ] [ 2 ] ; / / incorrect 49 : 33 , 55 
 + / / return new List < String > [ i + j ] [ i + j ] [ 0 ] ; / / correct 
 + int g [ ] [ ] [ ] = new int [ 0 ] [ 1 ] [ 2 ] ; 
 + g [ 0 ] [ 0 ] [ 0 ] = 0 ; 
 + g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 54 : 14 
 + g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 55 : 17 
 + g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 56 : 14 , 18 , 22 
 + return null ; 
 + } 
 + 
 + } 
 + public class H { 
 + public List < Integer > create ( int i , int j ) [ ] [ ] [ ] { / / incorrect , 62 : 46 , 53 
 + return null ; 
 + } 
 + } 
 + 
 + Object someStuff4 = boolean [ ] . class ; / / incorrect , 67 : 32 
 + String [ ] [ ] someStuff5 = new String [ 4 ] [ 9 ] ; 
 + String [ ] [ ] someStuff6 = ( java . lang . String [ ] [ ] ) someStuff5 ; / / incorrect , 69 : 46 , 50 
 + String [ ] [ ] someStuff7 = ( String [ ] [ ] ) someStuff5 ; / / incorrect , 70 : 36 
 + 
 + / / this is legal until allowLineBreaks is set to false 
 + int someStuff8 
 + [ ] ; 
 + 
 + / / this is legal until allowLineBreaks is set to false 
 + int [ ] 
 + someStuff81 ; 
 + 
 + / / incorrect 81 : 40 
 + Integer someStuff9 [ ] [ ] [ ] = ( Integer [ ] [ ] [ ] ) InputNoWhitespaceAfterArrayDeclarations2 . F . create ( 1 , 2 ) ; 
 + 
 + / / type arguments 
 + List < char [ ] > someStuff10 ; / / correct 
 + List < char [ ] [ ] > someStuff11 ; / / incorrect 85 : 14 
 + List < InputNoWhitespaceAfterArrayDeclarations2 . A [ ] > someStuff12 ; / / incorrect 86 : 52 
 + public void foo ( java . util . List < ? extends String [ ] > bar , Comparable < ? super Object [ ] > baz ) { } / / incorrect 87 : 86 
 + 
 + Integer someStuff13 = F . create ( 1 , 1 ) [ 0 ] [ 0 ] [ 0 ] ; 
 + Integer someStuff131 = F . create ( 1 , 1 ) [ 0 ] [ 0 ] [ 0 ] ; / / incorrect 90 : 41 , 49 
 + Object [ ] someStuff14 = ( Object [ ] ) null ; 
 + Object [ ] someStuff15 = ( Object [ ] ) null ; / / incorrect 92 : 35 
 + 
 + byte someStuff16 = ( ( byte [ ] ) someStuff4 ) [ 0 ] ; / / incorrect 94 : 45 
 + 
 + public void bar ( ) { 
 + if ( someStuff15 instanceof Object [ ] ) { / / incorrect 97 : 41 
 + 
 + } 
 + if ( someStuff15 instanceof Object [ ] [ ] ) { / / incorrect 100 : 43 
 + 
 + } 
 + if ( someStuff15 instanceof Object [ ] [ ] ) { 
 + 
 + } 
 + } 
 + 
 + } 
 diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml 
 index c567a73 . . 79e7c92 100644 
 - - - a / src / xdocs / config _ whitespace . xml 
 + + + b / src / xdocs / config _ whitespace . xml 
 @ @ - 381 , 6 + 381 , 16 @ @ for ( Iterator foo = very . long . line . iterator ( ) ; 
 forbid linebreaks after a token , set property < code > allowLineBreaks < / code > to < code > 
 false < / code > . 
 < / p > 
 + < p > 
 + The check processes 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ARRAY _ DECLARATOR " > ARRAY _ DECLARATOR < / a > 
 + and 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INDEX _ OP " > INDEX _ OP < / a > 
 + tokens specially from other tokens . Actually it is checked that there is 
 + no whitespace before this tokens , not after them . 
 + < / p > 
 < / subsection > 
 
 < subsection name = " Properties " > 
 @ @ - 425 , 9 + 435 , 7 @ @ for ( Iterator foo = very . long . line . iterator ( ) ; 
 < a 
 href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ARRAY _ DECLARATOR " > ARRAY _ DECLARATOR < / a > , 
 < a 
 - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # GENERIC _ START " > GENERIC _ START < / a > , 
 - < a 
 - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # GENERIC _ END " > GENERIC _ END < / a > . 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INDEX _ OP " > INDEX _ OP < / a > . 
 < / td > 
 
 < td > 
 @ @ - 448 , 7 + 456 , 9 @ @ for ( Iterator foo = very . long . line . iterator ( ) ; 
 < a 
 href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # DOT " > DOT < / a > , 
 < a 
 - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ARRAY _ DECLARATOR " > ARRAY _ DECLARATOR < / a > . 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # ARRAY _ DECLARATOR " > ARRAY _ DECLARATOR < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INDEX _ OP " > INDEX _ OP < / a > . 
 < / td > 
 < / tr > 
 < / table >

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java 
 index 9143b10 . . 01ba42a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheckTest . java 
 @ @ - 37 , 7 + 37 , 8 @ @ public class IllegalImportCheckTest extends BaseCheckTestSupport 
 " 23 : 1 : Import from illegal package - java . io . File . listRoots . " , 
 " 27 : 1 : Import from illegal package - java . io . File . createTempFile . " , 
 } ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator + " InputIllegalImportCheck . java " ) , 
 + expected ) ; 
 } 
 
 @ Test 
 @ @ - 47 , 9 + 48 , 10 @ @ public class IllegalImportCheckTest extends BaseCheckTestSupport 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( IllegalImportCheck . class ) ; 
 final String [ ] expected = { 
 - " 15 : 1 : Import from illegal package - sun . net . ftpclient . FtpClient . " , 
 - " 28 : 1 : Import from illegal package - sun . net . ftpclient . FtpClient . * . " , 
 + " 15 : 1 : Import from illegal package - sun . applet . * . " , 
 + " 28 : 1 : Import from illegal package - sun . * . " , 
 } ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator + " InputIllegalImportCheck . java " ) , 
 + expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputIllegalImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputIllegalImportCheck . java 
 new file mode 100644 
 index 0000000 . . aea09e4 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputIllegalImportCheck . java 
 @ @ - 0 , 0 + 1 , 111 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . imports ; 
 + 
 + import com . puppycrawl . tools . checkstyle . imports . * ; 
 + 
 + import java . io . * ; 
 + import java . lang . * ; 
 + import java . sql . Connection ; 
 + import java . util . List ; 
 + import java . util . List ; 
 + import java . lang . ArithmeticException ; 
 + import sun . applet . * ; 
 + import java . util . Enumeration ; 
 + import java . util . Arrays ; 
 + 
 + import javax . swing . JToolBar ; 
 + import javax . swing . JToggleButton ; 
 + import javax . swing . ScrollPaneLayout ; 
 + import javax . swing . BorderFactory ; 
 + import static java . io . File . listRoots ; 
 + 
 + import static javax . swing . WindowConstants . * ; 
 + import static javax . swing . WindowConstants . * ; 
 + import static java . io . File . createTempFile ; 
 + import sun . * ; 
 + 
 + import java . awt . Component ; 
 + import java . awt . Graphics2D ; 
 + import java . awt . HeadlessException ; 
 + import java . awt . Label ; 
 + import java . util . Date ; 
 + import java . util . Calendar ; 
 + import java . util . BitSet ; 
 + 
 + import com . puppycrawl . tools . checkstyle . Checker ; 
 + import com . puppycrawl . tools . checkstyle . CheckerTest ; 
 + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . Defn ; 
 + import com . puppycrawl . tools . checkstyle . Input15Extensions ; 
 + import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; 
 + import com . puppycrawl . tools . checkstyle . CheckStyleTask ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 + 
 + / * * 
 + * Test case for imports 
 + * Here ' s an import used only by javadoc : { @ link Date } . 
 + * @ author Oliver Burn 
 + * @ author lkuehne 
 + * @ author Michael Studman 
 + * @ see Calendar Should avoid unused import for Calendar 
 + * * / 
 + class InputIllegalImportCheck 
 + { 
 + / * * ignore * * / 
 + private Class mUse1 = Connection . class ; 
 + / * * ignore * * / 
 + private Class mUse2 = java . io . File . class ; 
 + / * * ignore * * / 
 + private Class mUse3 = null ; 
 + / * * ignore * * / 
 + private Class mUse4 = java . util . Enumeration [ ] . class ; 
 + / * * usage of illegal import * * / 
 + private String ftpClient = null ; 
 + 
 + / * * usage via static method , both normal and fully qualified * / 
 + { 
 + int [ ] x = { } ; 
 + Arrays . sort ( x ) ; 
 + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; 
 + File [ ] files = listRoots ( ) ; 
 + } 
 + 
 + / * * usage of inner class as type * / 
 + private JToolBar . Separator mSep = null ; 
 + 
 + / * * usage of inner class in Constructor * / 
 + private Object mUse5 = new Object ( ) ; 
 + 
 + / * * usage of inner class in constructor , fully qualified * / 
 + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; 
 + 
 + / * * we use class name as member ' s name . 
 + * also an inline JavaDoc - only import { @ link Vector linkText } * / 
 + private int Component ; 
 + 
 + / * * 
 + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } 
 + * / 
 + public void Label ( ) { } 
 + 
 + / * * 
 + * Renders to a { @ linkplain Graphics2D graphics context } . 
 + * @ throws HeadlessException if no graphis environment can be found . 
 + * @ exception HeadlessException if no graphis environment can be found . 
 + * / 
 + public void render ( ) { } 
 + 
 + / * * 
 + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . 
 + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . 
 + * 
 + * @ param param1 with a link { @ link TestClass6 } 
 + * @ throws TestClass7 when broken 
 + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } 
 + * / 
 + public void aMethodWithManyLinks ( ) { } 
 + } 
 \ No newline at end of file
