BLEU SCORE: 0.033864985683445356

TEST MSG: Issue # 5208 : avoid error code from grep if nothing found
GENERATED MSG: config : versions - maven - plugin is introduced to reporting

TEST DIFF (one line): diff - - git a / . ci / travis / travis . sh b / . ci / travis / travis . sh <nl> index 0cd1ca1 . . 91b3f04 100755 <nl> - - - a / . ci / travis / travis . sh <nl> + + + b / . ci / travis / travis . sh <nl> @ @ - 22 , 8 + 22 , 8 @ @ versions ) <nl> echo " Version reports ( plugin - updates - report . xml ) : " <nl> cat target / plugin - updates - report . xml <nl> echo " New versions : " <nl> - grep - B 7 " < nextVersion > " target / dependency - updates - report . xml <nl> - grep - B 4 " < nextVersion > " target / plugin - updates - report . xml <nl> + grep - B 7 - A 7 " < nextVersion > " target / dependency - updates - report . xml | cat <nl> + grep - B 4 - A 7 " < nextVersion > " target / plugin - updates - report . xml | cat <nl> false <nl> else <nl> echo " No new versions found "
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> index 4ef9bba . . adeae49 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> @ @ - 480 , 16 + 480 , 38 @ @ public class CommentsIndentationCheck extends AbstractCheck { <nl> comment . getColumnNo ( ) , nextStmt . getColumnNo ( ) ) ; <nl> } <nl> } <nl> + else if ( isCommentForMultiblock ( nextStmt ) ) { <nl> + if ( ! areSameLevelIndented ( comment , prevStmt , nextStmt ) ) { <nl> + logMultilineIndentation ( prevStmt , comment , nextStmt ) ; <nl> + } <nl> + } <nl> else if ( ! areSameLevelIndented ( comment , prevStmt , prevStmt ) ) { <nl> final int prevStmtLineNo = prevStmt . getLineNo ( ) ; <nl> log ( comment . getLineNo ( ) , getMessageKey ( comment ) , prevStmtLineNo , <nl> - comment . getColumnNo ( ) , getLineStart ( prevStmtLineNo ) ) ; <nl> + comment . getColumnNo ( ) , getLineStart ( prevStmtLineNo ) ) ; <nl> } <nl> } <nl> <nl> } <nl> <nl> / * * <nl> + * Whether the comment might have been used for the next block in a multi - block structure . <nl> + * @ param endBlockStmt the end of the current block . <nl> + * @ return true , if the comment might have been used for the next <nl> + * block in a multi - block structure . <nl> + * / <nl> + private static boolean isCommentForMultiblock ( DetailAST endBlockStmt ) { <nl> + final DetailAST nextBlock = endBlockStmt . getParent ( ) . getNextSibling ( ) ; <nl> + final int endBlockLineNo = endBlockStmt . getLineNo ( ) ; <nl> + final DetailAST catchAst = endBlockStmt . getParent ( ) . getParent ( ) ; <nl> + final DetailAST finallyAst = catchAst . getNextSibling ( ) ; <nl> + return nextBlock ! = null & & nextBlock . getLineNo ( ) = = endBlockLineNo <nl> + | | finallyAst ! = null <nl> + & & catchAst . getType ( ) = = TokenTypes . LITERAL _ CATCH <nl> + & & finallyAst . getLineNo ( ) = = endBlockLineNo ; <nl> + } <nl> + <nl> + / * * <nl> * Handles a comment which is placed within the empty code block . <nl> * Note , if comment is placed at the end of the empty code block , we have Checkstyle ' s <nl> * limitations to clearly detect user intention of explanation target - above or below . The <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java <nl> index 9d47ac3 . . 7ecbf57 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java <nl> @ @ - 241 , 4 + 241 , 31 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { <nl> verify ( checkConfig , getPath ( testInputFile ) , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testMultiblockStructures ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( CommentsIndentationCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 12 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 11 , 8 , 12 ) , <nl> + " 18 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 17 , 19 " , 16 , " 12 , 8 " ) , <nl> + " 23 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 22 , 24 " , 0 , " 12 , 8 " ) , <nl> + " 33 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 32 , 8 , 12 ) , <nl> + " 39 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 38 , 40 " , 0 , " 12 , 8 " ) , <nl> + " 44 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 43 , 45 " , 16 , " 12 , 8 " ) , <nl> + " 54 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 53 , 8 , 12 ) , <nl> + " 60 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 59 , 61 " , 0 , " 12 , 8 " ) , <nl> + " 65 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 64 , 66 " , 16 , " 12 , 8 " ) , <nl> + " 75 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 74 , 8 , 12 ) , <nl> + " 81 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 80 , 82 " , 0 , " 12 , 8 " ) , <nl> + " 86 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 85 , 87 " , 16 , " 12 , 8 " ) , <nl> + " 96 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 95 , 8 , 12 ) , <nl> + " 102 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 101 , 103 " , 0 , " 12 , 8 " ) , <nl> + " 107 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 106 , 108 " , 16 , " 12 , 8 " ) , <nl> + " 117 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 116 , 8 , 12 ) , <nl> + " 123 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 122 , 124 " , 16 , " 12 , 8 " ) , <nl> + " 128 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 127 , 129 " , 0 , " 12 , 8 " ) , <nl> + } ; <nl> + final String testInputFile = " InputCommentsIndentationInMultiblockStructures . java " ; <nl> + verify ( checkConfig , getPath ( testInputFile ) , expected ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationInMultiblockStructures . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationInMultiblockStructures . java <nl> new file mode 100644 <nl> index 0000000 . . ef53884 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationInMultiblockStructures . java <nl> @ @ - 0 , 0 + 1 , 131 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . indentation ; <nl> + <nl> + public class InputCommentsIndentationInMultiblockStructures { <nl> + void foo ( ) { <nl> + if ( true ) { <nl> + assert true ; <nl> + / / comment for else <nl> + } else { } <nl> + <nl> + if ( true ) { <nl> + assert true ; <nl> + / / violation <nl> + } <nl> + else { } <nl> + <nl> + if ( true ) { <nl> + assert true ; <nl> + / / violation <nl> + } else { } <nl> + <nl> + if ( true ) { <nl> + assert true ; <nl> + / / violation <nl> + } else { } <nl> + <nl> + try { <nl> + assert true ; <nl> + / / comment for catch <nl> + } catch ( Exception ex ) { } <nl> + <nl> + try { <nl> + assert true ; <nl> + / / violation <nl> + } <nl> + catch ( Exception ex ) { } <nl> + <nl> + try { <nl> + assert true ; <nl> + / / violation <nl> + } catch ( Exception ex ) { } <nl> + <nl> + try { <nl> + assert true ; <nl> + / / violation <nl> + } catch ( Exception ex ) { } <nl> + <nl> + try { <nl> + assert true ; <nl> + / / comment for finally <nl> + } finally { } <nl> + <nl> + try { <nl> + assert true ; <nl> + / / violation <nl> + } <nl> + finally { } <nl> + <nl> + try { <nl> + assert true ; <nl> + / / violation <nl> + } finally { } <nl> + <nl> + try { <nl> + assert true ; <nl> + / / violation <nl> + } finally { } <nl> + <nl> + try { } catch ( Exception ex ) { <nl> + assert true ; <nl> + / / comment for finally <nl> + } finally { } <nl> + <nl> + try { } catch ( Exception ex ) { <nl> + assert true ; <nl> + / / violation <nl> + } <nl> + finally { } <nl> + <nl> + try { } catch ( Exception ex ) { <nl> + assert true ; <nl> + / / violation <nl> + } finally { } <nl> + <nl> + try { } catch ( Exception ex ) { <nl> + assert true ; <nl> + / / violation <nl> + } finally { } <nl> + <nl> + try { } catch ( ClassCastException ex ) { <nl> + assert true ; <nl> + / / comment for catch <nl> + } catch ( Exception ex ) { } <nl> + <nl> + try { } catch ( ClassCastException ex ) { <nl> + assert true ; <nl> + / / violation <nl> + } <nl> + catch ( Exception ex ) { } <nl> + <nl> + try { } catch ( ClassCastException ex ) { <nl> + assert true ; <nl> + / / violation <nl> + } catch ( Exception ex ) { } <nl> + <nl> + try { } catch ( ClassCastException ex ) { <nl> + assert true ; <nl> + / / violation <nl> + } catch ( Exception ex ) { } <nl> + <nl> + do { <nl> + assert true ; <nl> + / / comment for while <nl> + } while ( false ) ; <nl> + <nl> + do { <nl> + assert true ; <nl> + / / violation <nl> + } <nl> + while ( false ) ; <nl> + <nl> + do { <nl> + assert true ; <nl> + / / violation <nl> + } while ( false ) ; <nl> + <nl> + do { <nl> + assert true ; <nl> + / / violation <nl> + } while ( false ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / . ci / travis / travis . sh b / . ci / travis / travis . sh 
 index 0cd1ca1 . . 91b3f04 100755 
 - - - a / . ci / travis / travis . sh 
 + + + b / . ci / travis / travis . sh 
 @ @ - 22 , 8 + 22 , 8 @ @ versions ) 
 echo " Version reports ( plugin - updates - report . xml ) : " 
 cat target / plugin - updates - report . xml 
 echo " New versions : " 
 - grep - B 7 " < nextVersion > " target / dependency - updates - report . xml 
 - grep - B 4 " < nextVersion > " target / plugin - updates - report . xml 
 + grep - B 7 - A 7 " < nextVersion > " target / dependency - updates - report . xml | cat 
 + grep - B 4 - A 7 " < nextVersion > " target / plugin - updates - report . xml | cat 
 false 
 else 
 echo " No new versions found "

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 index 4ef9bba . . adeae49 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 @ @ - 480 , 16 + 480 , 38 @ @ public class CommentsIndentationCheck extends AbstractCheck { 
 comment . getColumnNo ( ) , nextStmt . getColumnNo ( ) ) ; 
 } 
 } 
 + else if ( isCommentForMultiblock ( nextStmt ) ) { 
 + if ( ! areSameLevelIndented ( comment , prevStmt , nextStmt ) ) { 
 + logMultilineIndentation ( prevStmt , comment , nextStmt ) ; 
 + } 
 + } 
 else if ( ! areSameLevelIndented ( comment , prevStmt , prevStmt ) ) { 
 final int prevStmtLineNo = prevStmt . getLineNo ( ) ; 
 log ( comment . getLineNo ( ) , getMessageKey ( comment ) , prevStmtLineNo , 
 - comment . getColumnNo ( ) , getLineStart ( prevStmtLineNo ) ) ; 
 + comment . getColumnNo ( ) , getLineStart ( prevStmtLineNo ) ) ; 
 } 
 } 
 
 } 
 
 / * * 
 + * Whether the comment might have been used for the next block in a multi - block structure . 
 + * @ param endBlockStmt the end of the current block . 
 + * @ return true , if the comment might have been used for the next 
 + * block in a multi - block structure . 
 + * / 
 + private static boolean isCommentForMultiblock ( DetailAST endBlockStmt ) { 
 + final DetailAST nextBlock = endBlockStmt . getParent ( ) . getNextSibling ( ) ; 
 + final int endBlockLineNo = endBlockStmt . getLineNo ( ) ; 
 + final DetailAST catchAst = endBlockStmt . getParent ( ) . getParent ( ) ; 
 + final DetailAST finallyAst = catchAst . getNextSibling ( ) ; 
 + return nextBlock ! = null & & nextBlock . getLineNo ( ) = = endBlockLineNo 
 + | | finallyAst ! = null 
 + & & catchAst . getType ( ) = = TokenTypes . LITERAL _ CATCH 
 + & & finallyAst . getLineNo ( ) = = endBlockLineNo ; 
 + } 
 + 
 + / * * 
 * Handles a comment which is placed within the empty code block . 
 * Note , if comment is placed at the end of the empty code block , we have Checkstyle ' s 
 * limitations to clearly detect user intention of explanation target - above or below . The 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java 
 index 9d47ac3 . . 7ecbf57 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheckTest . java 
 @ @ - 241 , 4 + 241 , 31 @ @ public class CommentsIndentationCheckTest extends BaseCheckTestSupport { 
 verify ( checkConfig , getPath ( testInputFile ) , expected ) ; 
 } 
 
 + @ Test 
 + public void testMultiblockStructures ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( CommentsIndentationCheck . class ) ; 
 + final String [ ] expected = { 
 + " 12 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 11 , 8 , 12 ) , 
 + " 18 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 17 , 19 " , 16 , " 12 , 8 " ) , 
 + " 23 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 22 , 24 " , 0 , " 12 , 8 " ) , 
 + " 33 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 32 , 8 , 12 ) , 
 + " 39 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 38 , 40 " , 0 , " 12 , 8 " ) , 
 + " 44 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 43 , 45 " , 16 , " 12 , 8 " ) , 
 + " 54 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 53 , 8 , 12 ) , 
 + " 60 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 59 , 61 " , 0 , " 12 , 8 " ) , 
 + " 65 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 64 , 66 " , 16 , " 12 , 8 " ) , 
 + " 75 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 74 , 8 , 12 ) , 
 + " 81 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 80 , 82 " , 0 , " 12 , 8 " ) , 
 + " 86 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 85 , 87 " , 16 , " 12 , 8 " ) , 
 + " 96 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 95 , 8 , 12 ) , 
 + " 102 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 101 , 103 " , 0 , " 12 , 8 " ) , 
 + " 107 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 106 , 108 " , 16 , " 12 , 8 " ) , 
 + " 117 : " + getCheckMessage ( MSG _ KEY _ SINGLE , 116 , 8 , 12 ) , 
 + " 123 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 122 , 124 " , 16 , " 12 , 8 " ) , 
 + " 128 : " + getCheckMessage ( MSG _ KEY _ SINGLE , " 127 , 129 " , 0 , " 12 , 8 " ) , 
 + } ; 
 + final String testInputFile = " InputCommentsIndentationInMultiblockStructures . java " ; 
 + verify ( checkConfig , getPath ( testInputFile ) , expected ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationInMultiblockStructures . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationInMultiblockStructures . java 
 new file mode 100644 
 index 0000000 . . ef53884 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputCommentsIndentationInMultiblockStructures . java 
 @ @ - 0 , 0 + 1 , 131 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . indentation ; 
 + 
 + public class InputCommentsIndentationInMultiblockStructures { 
 + void foo ( ) { 
 + if ( true ) { 
 + assert true ; 
 + / / comment for else 
 + } else { } 
 + 
 + if ( true ) { 
 + assert true ; 
 + / / violation 
 + } 
 + else { } 
 + 
 + if ( true ) { 
 + assert true ; 
 + / / violation 
 + } else { } 
 + 
 + if ( true ) { 
 + assert true ; 
 + / / violation 
 + } else { } 
 + 
 + try { 
 + assert true ; 
 + / / comment for catch 
 + } catch ( Exception ex ) { } 
 + 
 + try { 
 + assert true ; 
 + / / violation 
 + } 
 + catch ( Exception ex ) { } 
 + 
 + try { 
 + assert true ; 
 + / / violation 
 + } catch ( Exception ex ) { } 
 + 
 + try { 
 + assert true ; 
 + / / violation 
 + } catch ( Exception ex ) { } 
 + 
 + try { 
 + assert true ; 
 + / / comment for finally 
 + } finally { } 
 + 
 + try { 
 + assert true ; 
 + / / violation 
 + } 
 + finally { } 
 + 
 + try { 
 + assert true ; 
 + / / violation 
 + } finally { } 
 + 
 + try { 
 + assert true ; 
 + / / violation 
 + } finally { } 
 + 
 + try { } catch ( Exception ex ) { 
 + assert true ; 
 + / / comment for finally 
 + } finally { } 
 + 
 + try { } catch ( Exception ex ) { 
 + assert true ; 
 + / / violation 
 + } 
 + finally { } 
 + 
 + try { } catch ( Exception ex ) { 
 + assert true ; 
 + / / violation 
 + } finally { } 
 + 
 + try { } catch ( Exception ex ) { 
 + assert true ; 
 + / / violation 
 + } finally { } 
 + 
 + try { } catch ( ClassCastException ex ) { 
 + assert true ; 
 + / / comment for catch 
 + } catch ( Exception ex ) { } 
 + 
 + try { } catch ( ClassCastException ex ) { 
 + assert true ; 
 + / / violation 
 + } 
 + catch ( Exception ex ) { } 
 + 
 + try { } catch ( ClassCastException ex ) { 
 + assert true ; 
 + / / violation 
 + } catch ( Exception ex ) { } 
 + 
 + try { } catch ( ClassCastException ex ) { 
 + assert true ; 
 + / / violation 
 + } catch ( Exception ex ) { } 
 + 
 + do { 
 + assert true ; 
 + / / comment for while 
 + } while ( false ) ; 
 + 
 + do { 
 + assert true ; 
 + / / violation 
 + } 
 + while ( false ) ; 
 + 
 + do { 
 + assert true ; 
 + / / violation 
 + } while ( false ) ; 
 + 
 + do { 
 + assert true ; 
 + / / violation 
 + } while ( false ) ; 
 + } 
 + }
