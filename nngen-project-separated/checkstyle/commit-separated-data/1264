BLEU SCORE: 0.05341087579952926

TEST MSG: minor : Reorganized AnnotationLocationCheck methods
GENERATED MSG: JavaDocParagraph # 315

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java <nl> index 1d6ee44 . . 4bd5f3b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java <nl> @ @ - 223 , 6 + 223 , 24 @ @ public class AnnotationLocationCheck extends AbstractCheck { <nl> / * * <nl> * Some javadoc . <nl> * @ param modifierNode Some javadoc . <nl> + * @ return Some javadoc . <nl> + * / <nl> + private static boolean hasAnnotations ( DetailAST modifierNode ) { <nl> + return modifierNode . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; <nl> + } <nl> + <nl> + / * * <nl> + * Some javadoc . <nl> + * @ param modifierNode Some javadoc . <nl> + * @ return Some javadoc . <nl> + * / <nl> + private static int getAnnotationLevel ( DetailAST modifierNode ) { <nl> + return modifierNode . getParent ( ) . getColumnNo ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Some javadoc . <nl> + * @ param modifierNode Some javadoc . <nl> * @ param correctLevel Some javadoc . <nl> * / <nl> private void checkAnnotations ( DetailAST modifierNode , int correctLevel ) { <nl> @ @ - 246 , 21 + 264 , 10 @ @ public class AnnotationLocationCheck extends AbstractCheck { <nl> / * * <nl> * Some javadoc . <nl> * @ param annotation Some javadoc . <nl> - * @ param hasParams Some javadoc . <nl> * @ return Some javadoc . <nl> * / <nl> - private boolean isCorrectLocation ( DetailAST annotation , boolean hasParams ) { <nl> - final boolean allowingCondition ; <nl> - <nl> - if ( hasParams ) { <nl> - allowingCondition = allowSamelineParameterizedAnnotation ; <nl> - } <nl> - else { <nl> - allowingCondition = allowSamelineSingleParameterlessAnnotation ; <nl> - } <nl> - return allowSamelineMultipleAnnotations <nl> - | | allowingCondition & & ! hasNodeBefore ( annotation ) <nl> - | | ! allowingCondition & & ! hasNodeBeside ( annotation ) ; <nl> + private static boolean isParameterized ( DetailAST annotation ) { <nl> + return annotation . findFirstToken ( TokenTypes . EXPR ) ! = null ; <nl> } <nl> <nl> / * * <nl> @ @ - 279 , 17 + 286 , 21 @ @ public class AnnotationLocationCheck extends AbstractCheck { <nl> / * * <nl> * Some javadoc . <nl> * @ param annotation Some javadoc . <nl> + * @ param hasParams Some javadoc . <nl> * @ return Some javadoc . <nl> * / <nl> - private static boolean hasNodeAfter ( DetailAST annotation ) { <nl> - final int annotationLineNo = annotation . getLineNo ( ) ; <nl> - DetailAST nextNode = annotation . getNextSibling ( ) ; <nl> + private boolean isCorrectLocation ( DetailAST annotation , boolean hasParams ) { <nl> + final boolean allowingCondition ; <nl> <nl> - if ( nextNode = = null ) { <nl> - nextNode = annotation . getParent ( ) . getNextSibling ( ) ; <nl> + if ( hasParams ) { <nl> + allowingCondition = allowSamelineParameterizedAnnotation ; <nl> } <nl> - <nl> - return annotationLineNo = = nextNode . getLineNo ( ) ; <nl> + else { <nl> + allowingCondition = allowSamelineSingleParameterlessAnnotation ; <nl> + } <nl> + return allowSamelineMultipleAnnotations <nl> + | | allowingCondition & & ! hasNodeBefore ( annotation ) <nl> + | | ! allowingCondition & & ! hasNodeBeside ( annotation ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 315 , 28 + 326 , 17 @ @ public class AnnotationLocationCheck extends AbstractCheck { <nl> <nl> / * * <nl> * Some javadoc . <nl> - * @ param modifierNode Some javadoc . <nl> - * @ return Some javadoc . <nl> - * / <nl> - private static int getAnnotationLevel ( DetailAST modifierNode ) { <nl> - return modifierNode . getParent ( ) . getColumnNo ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Some javadoc . <nl> * @ param annotation Some javadoc . <nl> * @ return Some javadoc . <nl> * / <nl> - private static boolean isParameterized ( DetailAST annotation ) { <nl> - return annotation . findFirstToken ( TokenTypes . EXPR ) ! = null ; <nl> - } <nl> + private static boolean hasNodeAfter ( DetailAST annotation ) { <nl> + final int annotationLineNo = annotation . getLineNo ( ) ; <nl> + DetailAST nextNode = annotation . getNextSibling ( ) ; <nl> <nl> - / * * <nl> - * Some javadoc . <nl> - * @ param modifierNode Some javadoc . <nl> - * @ return Some javadoc . <nl> - * / <nl> - private static boolean hasAnnotations ( DetailAST modifierNode ) { <nl> - return modifierNode . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; <nl> + if ( nextNode = = null ) { <nl> + nextNode = annotation . getParent ( ) . getNextSibling ( ) ; <nl> + } <nl> + <nl> + return annotationLineNo = = nextNode . getLineNo ( ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> index 3580ea9 . . a7d8660 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> @ @ - 350 , 7 + 350 , 8 @ @ public class WhitespaceAroundCheck extends Check <nl> & & ! ( ( currentType = = TokenTypes . RCURLY ) <nl> & & ( ( nextChar = = ' ) ' ) <nl> | | ( nextChar = = ' ; ' ) <nl> - | | ( nextChar = = ' , ' ) ) ) ) <nl> + | | ( nextChar = = ' , ' ) <nl> + | | ( nextChar = = ' . ' ) ) ) ) <nl> { <nl> log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) + aAST . getText ( ) . length ( ) , <nl> " ws . notFollowed " , aAST . getText ( ) ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputWhitespace . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputWhitespace . java <nl> index a9af6af . . 1dfc039 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputWhitespace . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputWhitespace . java <nl> @ @ - 241 , 4 + 241 , 11 @ @ class SpecialCasesInForLoop <nl> int i = ( int ) ( 2 / 3 ) ; <nl> return null ; <nl> } <nl> - } <nl> + <nl> + public myMethod ( ) { <nl> + new Thread ( ) { <nl> + public void run ( ) { <nl> + } <nl> + } . start ( ) ; <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java 
 index 1d6ee44 . . 4bd5f3b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java 
 @ @ - 223 , 6 + 223 , 24 @ @ public class AnnotationLocationCheck extends AbstractCheck { 
 / * * 
 * Some javadoc . 
 * @ param modifierNode Some javadoc . 
 + * @ return Some javadoc . 
 + * / 
 + private static boolean hasAnnotations ( DetailAST modifierNode ) { 
 + return modifierNode . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; 
 + } 
 + 
 + / * * 
 + * Some javadoc . 
 + * @ param modifierNode Some javadoc . 
 + * @ return Some javadoc . 
 + * / 
 + private static int getAnnotationLevel ( DetailAST modifierNode ) { 
 + return modifierNode . getParent ( ) . getColumnNo ( ) ; 
 + } 
 + 
 + / * * 
 + * Some javadoc . 
 + * @ param modifierNode Some javadoc . 
 * @ param correctLevel Some javadoc . 
 * / 
 private void checkAnnotations ( DetailAST modifierNode , int correctLevel ) { 
 @ @ - 246 , 21 + 264 , 10 @ @ public class AnnotationLocationCheck extends AbstractCheck { 
 / * * 
 * Some javadoc . 
 * @ param annotation Some javadoc . 
 - * @ param hasParams Some javadoc . 
 * @ return Some javadoc . 
 * / 
 - private boolean isCorrectLocation ( DetailAST annotation , boolean hasParams ) { 
 - final boolean allowingCondition ; 
 - 
 - if ( hasParams ) { 
 - allowingCondition = allowSamelineParameterizedAnnotation ; 
 - } 
 - else { 
 - allowingCondition = allowSamelineSingleParameterlessAnnotation ; 
 - } 
 - return allowSamelineMultipleAnnotations 
 - | | allowingCondition & & ! hasNodeBefore ( annotation ) 
 - | | ! allowingCondition & & ! hasNodeBeside ( annotation ) ; 
 + private static boolean isParameterized ( DetailAST annotation ) { 
 + return annotation . findFirstToken ( TokenTypes . EXPR ) ! = null ; 
 } 
 
 / * * 
 @ @ - 279 , 17 + 286 , 21 @ @ public class AnnotationLocationCheck extends AbstractCheck { 
 / * * 
 * Some javadoc . 
 * @ param annotation Some javadoc . 
 + * @ param hasParams Some javadoc . 
 * @ return Some javadoc . 
 * / 
 - private static boolean hasNodeAfter ( DetailAST annotation ) { 
 - final int annotationLineNo = annotation . getLineNo ( ) ; 
 - DetailAST nextNode = annotation . getNextSibling ( ) ; 
 + private boolean isCorrectLocation ( DetailAST annotation , boolean hasParams ) { 
 + final boolean allowingCondition ; 
 
 - if ( nextNode = = null ) { 
 - nextNode = annotation . getParent ( ) . getNextSibling ( ) ; 
 + if ( hasParams ) { 
 + allowingCondition = allowSamelineParameterizedAnnotation ; 
 } 
 - 
 - return annotationLineNo = = nextNode . getLineNo ( ) ; 
 + else { 
 + allowingCondition = allowSamelineSingleParameterlessAnnotation ; 
 + } 
 + return allowSamelineMultipleAnnotations 
 + | | allowingCondition & & ! hasNodeBefore ( annotation ) 
 + | | ! allowingCondition & & ! hasNodeBeside ( annotation ) ; 
 } 
 
 / * * 
 @ @ - 315 , 28 + 326 , 17 @ @ public class AnnotationLocationCheck extends AbstractCheck { 
 
 / * * 
 * Some javadoc . 
 - * @ param modifierNode Some javadoc . 
 - * @ return Some javadoc . 
 - * / 
 - private static int getAnnotationLevel ( DetailAST modifierNode ) { 
 - return modifierNode . getParent ( ) . getColumnNo ( ) ; 
 - } 
 - 
 - / * * 
 - * Some javadoc . 
 * @ param annotation Some javadoc . 
 * @ return Some javadoc . 
 * / 
 - private static boolean isParameterized ( DetailAST annotation ) { 
 - return annotation . findFirstToken ( TokenTypes . EXPR ) ! = null ; 
 - } 
 + private static boolean hasNodeAfter ( DetailAST annotation ) { 
 + final int annotationLineNo = annotation . getLineNo ( ) ; 
 + DetailAST nextNode = annotation . getNextSibling ( ) ; 
 
 - / * * 
 - * Some javadoc . 
 - * @ param modifierNode Some javadoc . 
 - * @ return Some javadoc . 
 - * / 
 - private static boolean hasAnnotations ( DetailAST modifierNode ) { 
 - return modifierNode . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; 
 + if ( nextNode = = null ) { 
 + nextNode = annotation . getParent ( ) . getNextSibling ( ) ; 
 + } 
 + 
 + return annotationLineNo = = nextNode . getLineNo ( ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 index 3580ea9 . . a7d8660 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 @ @ - 350 , 7 + 350 , 8 @ @ public class WhitespaceAroundCheck extends Check 
 & & ! ( ( currentType = = TokenTypes . RCURLY ) 
 & & ( ( nextChar = = ' ) ' ) 
 | | ( nextChar = = ' ; ' ) 
 - | | ( nextChar = = ' , ' ) ) ) ) 
 + | | ( nextChar = = ' , ' ) 
 + | | ( nextChar = = ' . ' ) ) ) ) 
 { 
 log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) + aAST . getText ( ) . length ( ) , 
 " ws . notFollowed " , aAST . getText ( ) ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputWhitespace . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputWhitespace . java 
 index a9af6af . . 1dfc039 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputWhitespace . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputWhitespace . java 
 @ @ - 241 , 4 + 241 , 11 @ @ class SpecialCasesInForLoop 
 int i = ( int ) ( 2 / 3 ) ; 
 return null ; 
 } 
 - } 
 + 
 + public myMethod ( ) { 
 + new Thread ( ) { 
 + public void run ( ) { 
 + } 
 + } . start ( ) ; 
 + } 
 + } 
 \ No newline at end of file
