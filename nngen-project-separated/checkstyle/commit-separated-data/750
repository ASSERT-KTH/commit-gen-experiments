BLEU SCORE: 0.06150343144231885

TEST MSG: Issue # 4400 : increase coverage of pitest - checkstyle - common profile to 92 %
GENERATED MSG: Issue # 3594 : resolve Unexpected loss of coverage for PropertyCacheFile

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 710ceff . . 300ba6e 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1963 , 7 + 1963 , 7 @ @ <nl> < ! - - till https : / / github . com / hcoles / pitest / issues / 353 - - > <nl> < param > fillShortToFullModuleNamesMap < / param > <nl> < / excludedMethods > <nl> - < mutationThreshold > 89 < / mutationThreshold > <nl> + < mutationThreshold > 92 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 9ab60b6 . . 61a3a26 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 870 , 6 + 870 , 45 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> assertTrue ( " FileSetCheck . init ( ) wasn ' t called " , fileSet . isInitCalled ( ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testDefaultLoggerClosesItStreams ( ) throws Exception { <nl> + final Checker checker = new Checker ( ) ; <nl> + final CloseAndFlushTestByteArrayOutputStream testInfoOutputStream = <nl> + new CloseAndFlushTestByteArrayOutputStream ( ) ; <nl> + final CloseAndFlushTestByteArrayOutputStream testErrorOutputStream = <nl> + new CloseAndFlushTestByteArrayOutputStream ( ) ; <nl> + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . addListener ( new DefaultLogger ( testInfoOutputStream , <nl> + true , testErrorOutputStream , true ) ) ; <nl> + <nl> + final File tmpFile = temporaryFolder . newFile ( " file . java " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checker , tmpFile . getPath ( ) , tmpFile . getPath ( ) , expected ) ; <nl> + <nl> + assertEquals ( 1 , testInfoOutputStream . getCloseCount ( ) ) ; <nl> + assertEquals ( 3 , testInfoOutputStream . getFlushCount ( ) ) ; <nl> + assertEquals ( 1 , testErrorOutputStream . getCloseCount ( ) ) ; <nl> + assertEquals ( 1 , testErrorOutputStream . getFlushCount ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testXmlLoggerClosesItStreams ( ) throws Exception { <nl> + final Checker checker = new Checker ( ) ; <nl> + final CloseAndFlushTestByteArrayOutputStream testInfoOutputStream = <nl> + new CloseAndFlushTestByteArrayOutputStream ( ) ; <nl> + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . addListener ( new XMLLogger ( testInfoOutputStream , true ) ) ; <nl> + <nl> + final File tmpFile = temporaryFolder . newFile ( " file . java " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checker , tmpFile . getPath ( ) , tmpFile . getPath ( ) , expected ) ; <nl> + <nl> + assertEquals ( 1 , testInfoOutputStream . getCloseCount ( ) ) ; <nl> + assertEquals ( 0 , testInfoOutputStream . getFlushCount ( ) ) ; <nl> + } <nl> + <nl> private static class DummyFilter implements Filter { <nl> <nl> @ Override <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CloseAndFlushTestByteArrayOutputStream . java b / src / test / java / com / puppycrawl / tools / checkstyle / CloseAndFlushTestByteArrayOutputStream . java <nl> new file mode 100644 <nl> index 0000000 . . 3cb4b43 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CloseAndFlushTestByteArrayOutputStream . java <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import java . io . ByteArrayOutputStream ; <nl> + import java . io . IOException ; <nl> + <nl> + public final class CloseAndFlushTestByteArrayOutputStream extends ByteArrayOutputStream { <nl> + <nl> + private int closeCount ; <nl> + private int flushCount ; <nl> + <nl> + @ Override <nl> + public void flush ( ) throws IOException { <nl> + super . flush ( ) ; <nl> + flushCount + + ; <nl> + } <nl> + <nl> + @ Override <nl> + public void close ( ) throws IOException { <nl> + super . close ( ) ; <nl> + closeCount + + ; <nl> + } <nl> + <nl> + public int getCloseCount ( ) { <nl> + return closeCount ; <nl> + } <nl> + <nl> + public int getFlushCount ( ) { <nl> + return flushCount ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java <nl> index 088f962 . . 5e0a183 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java <nl> @ @ - 19 , 8 + 19 , 11 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> import java . io . ByteArrayOutputStream ; <nl> import java . io . OutputStream ; <nl> + import java . io . UnsupportedEncodingException ; <nl> <nl> import org . junit . Test ; <nl> <nl> @ @ - 29 , 12 + 32 , 16 @ @ import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> public class DefaultLoggerTest { <nl> <nl> @ Test <nl> - public void testCtor ( ) { <nl> + public void testCtor ( ) throws UnsupportedEncodingException { <nl> final OutputStream infoStream = new ByteArrayOutputStream ( ) ; <nl> - final OutputStream errorStream = new ByteArrayOutputStream ( ) ; <nl> + final ByteArrayOutputStream errorStream = new ByteArrayOutputStream ( ) ; <nl> final DefaultLogger dl = new DefaultLogger ( infoStream , true , errorStream , true ) ; <nl> dl . addException ( new AuditEvent ( 5000 , " myfile " ) , new IllegalStateException ( " upsss " ) ) ; <nl> dl . auditFinished ( new AuditEvent ( 6000 , " myfile " ) ) ; <nl> + final String output = errorStream . toString ( " UTF - 8 " ) ; <nl> + <nl> + assertTrue ( output . contains ( " Error auditing myfile " ) ) ; <nl> + assertTrue ( output . contains ( " java . lang . IllegalStateException : upsss " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> index 18d7184 . . 45d03a4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> @ @ - 25 , 7 + 25 , 6 @ @ import static org . junit . Assert . assertTrue ; <nl> <nl> import java . io . BufferedReader ; <nl> import java . io . ByteArrayInputStream ; <nl> - import java . io . ByteArrayOutputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> import java . io . PrintWriter ; <nl> @ @ - 47 , 7 + 46 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * / <nl> / / - @ cs [ AbbreviationAsWordInName ] Test should be named as its main class . <nl> public class XMLLoggerTest { <nl> - private final ByteArrayOutputStream outStream = new ByteArrayOutputStream ( ) ; <nl> + private final CloseAndFlushTestByteArrayOutputStream outStream = <nl> + new CloseAndFlushTestByteArrayOutputStream ( ) ; <nl> <nl> @ Test <nl> public void testEncode ( ) <nl> @ @ - 213 , 7 + 213 , 9 @ @ public class XMLLoggerTest { <nl> " & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; " <nl> + " & # 10 ; & lt ; / exception & gt ; & # 10 ; " , <nl> } ; <nl> + <nl> verifyLines ( expectedLines ) ; <nl> + assertEquals ( 1 , outStream . getCloseCount ( ) ) ; <nl> } <nl> <nl> private String [ ] getOutStreamLines ( ) <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> index 4565eee . . 53620d2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> @ @ - 24 , 11 + 24 , 15 @ @ import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> + import static org . mockito . Matchers . any ; <nl> import static org . mockito . Mockito . when ; <nl> + import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> + import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . net . URL ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> @ @ - 49 , 13 + 53 , 16 @ @ import org . powermock . api . mockito . PowerMockito ; <nl> import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> + import com . google . common . io . Closeables ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> + import com . puppycrawl . tools . checkstyle . PackageNamesLoader ; <nl> import com . puppycrawl . tools . checkstyle . TestRootModuleChecker ; <nl> import com . puppycrawl . tools . checkstyle . XMLLogger ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> <nl> @ RunWith ( PowerMockRunner . class ) <nl> - @ PrepareForTest ( CheckstyleAntTask . class ) <nl> + @ PrepareForTest ( { CheckstyleAntTask . class , Closeables . class } ) <nl> public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> <nl> private static final String FLAWLESS _ INPUT _ DIR = " ant / checkstyleanttask / flawless / " ; <nl> @ @ - 532 , 6 + 539 , 17 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> <nl> } <nl> <nl> + @ Test <nl> + public void testPackageNamesLoaderStreamClosed ( ) throws CheckstyleException { <nl> + mockStatic ( Closeables . class ) ; <nl> + doNothing ( ) . when ( Closeables . class ) ; <nl> + Closeables . closeQuietly ( any ( InputStream . class ) ) ; <nl> + <nl> + PackageNamesLoader . getPackageNames ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + verifyStatic ( ) ; <nl> + Closeables . closeQuietly ( any ( InputStream . class ) ) ; <nl> + } <nl> + <nl> private static class CheckstyleAntTaskStub extends CheckstyleAntTask { <nl> @ Override <nl> protected List < File > scanFileSets ( ) {
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 1cfb33a . . 56e3411 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 22 , 7 + 22 , 7 @ @ <nl> <nl> < groupId > com . puppycrawl . tools < / groupId > <nl> < artifactId > checkstyle < / artifactId > <nl> - < version > 7 . 2 < / version > <nl> + < version > 7 . 2 - SNAPSHOT < / version > <nl> < packaging > jar < / packaging > <nl> <nl> < name > checkstyle < / name >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 710ceff . . 300ba6e 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1963 , 7 + 1963 , 7 @ @ 
 < ! - - till https : / / github . com / hcoles / pitest / issues / 353 - - > 
 < param > fillShortToFullModuleNamesMap < / param > 
 < / excludedMethods > 
 - < mutationThreshold > 89 < / mutationThreshold > 
 + < mutationThreshold > 92 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 9ab60b6 . . 61a3a26 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 870 , 6 + 870 , 45 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 assertTrue ( " FileSetCheck . init ( ) wasn ' t called " , fileSet . isInitCalled ( ) ) ; 
 } 
 
 + @ Test 
 + public void testDefaultLoggerClosesItStreams ( ) throws Exception { 
 + final Checker checker = new Checker ( ) ; 
 + final CloseAndFlushTestByteArrayOutputStream testInfoOutputStream = 
 + new CloseAndFlushTestByteArrayOutputStream ( ) ; 
 + final CloseAndFlushTestByteArrayOutputStream testErrorOutputStream = 
 + new CloseAndFlushTestByteArrayOutputStream ( ) ; 
 + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . addListener ( new DefaultLogger ( testInfoOutputStream , 
 + true , testErrorOutputStream , true ) ) ; 
 + 
 + final File tmpFile = temporaryFolder . newFile ( " file . java " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checker , tmpFile . getPath ( ) , tmpFile . getPath ( ) , expected ) ; 
 + 
 + assertEquals ( 1 , testInfoOutputStream . getCloseCount ( ) ) ; 
 + assertEquals ( 3 , testInfoOutputStream . getFlushCount ( ) ) ; 
 + assertEquals ( 1 , testErrorOutputStream . getCloseCount ( ) ) ; 
 + assertEquals ( 1 , testErrorOutputStream . getFlushCount ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testXmlLoggerClosesItStreams ( ) throws Exception { 
 + final Checker checker = new Checker ( ) ; 
 + final CloseAndFlushTestByteArrayOutputStream testInfoOutputStream = 
 + new CloseAndFlushTestByteArrayOutputStream ( ) ; 
 + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . addListener ( new XMLLogger ( testInfoOutputStream , true ) ) ; 
 + 
 + final File tmpFile = temporaryFolder . newFile ( " file . java " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checker , tmpFile . getPath ( ) , tmpFile . getPath ( ) , expected ) ; 
 + 
 + assertEquals ( 1 , testInfoOutputStream . getCloseCount ( ) ) ; 
 + assertEquals ( 0 , testInfoOutputStream . getFlushCount ( ) ) ; 
 + } 
 + 
 private static class DummyFilter implements Filter { 
 
 @ Override 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CloseAndFlushTestByteArrayOutputStream . java b / src / test / java / com / puppycrawl / tools / checkstyle / CloseAndFlushTestByteArrayOutputStream . java 
 new file mode 100644 
 index 0000000 . . 3cb4b43 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CloseAndFlushTestByteArrayOutputStream . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import java . io . ByteArrayOutputStream ; 
 + import java . io . IOException ; 
 + 
 + public final class CloseAndFlushTestByteArrayOutputStream extends ByteArrayOutputStream { 
 + 
 + private int closeCount ; 
 + private int flushCount ; 
 + 
 + @ Override 
 + public void flush ( ) throws IOException { 
 + super . flush ( ) ; 
 + flushCount + + ; 
 + } 
 + 
 + @ Override 
 + public void close ( ) throws IOException { 
 + super . close ( ) ; 
 + closeCount + + ; 
 + } 
 + 
 + public int getCloseCount ( ) { 
 + return closeCount ; 
 + } 
 + 
 + public int getFlushCount ( ) { 
 + return flushCount ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java 
 index 088f962 . . 5e0a183 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java 
 @ @ - 19 , 8 + 19 , 11 @ @ 
 
 package com . puppycrawl . tools . checkstyle ; 
 
 + import static org . junit . Assert . assertTrue ; 
 + 
 import java . io . ByteArrayOutputStream ; 
 import java . io . OutputStream ; 
 + import java . io . UnsupportedEncodingException ; 
 
 import org . junit . Test ; 
 
 @ @ - 29 , 12 + 32 , 16 @ @ import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 public class DefaultLoggerTest { 
 
 @ Test 
 - public void testCtor ( ) { 
 + public void testCtor ( ) throws UnsupportedEncodingException { 
 final OutputStream infoStream = new ByteArrayOutputStream ( ) ; 
 - final OutputStream errorStream = new ByteArrayOutputStream ( ) ; 
 + final ByteArrayOutputStream errorStream = new ByteArrayOutputStream ( ) ; 
 final DefaultLogger dl = new DefaultLogger ( infoStream , true , errorStream , true ) ; 
 dl . addException ( new AuditEvent ( 5000 , " myfile " ) , new IllegalStateException ( " upsss " ) ) ; 
 dl . auditFinished ( new AuditEvent ( 6000 , " myfile " ) ) ; 
 + final String output = errorStream . toString ( " UTF - 8 " ) ; 
 + 
 + assertTrue ( output . contains ( " Error auditing myfile " ) ) ; 
 + assertTrue ( output . contains ( " java . lang . IllegalStateException : upsss " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 index 18d7184 . . 45d03a4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 @ @ - 25 , 7 + 25 , 6 @ @ import static org . junit . Assert . assertTrue ; 
 
 import java . io . BufferedReader ; 
 import java . io . ByteArrayInputStream ; 
 - import java . io . ByteArrayOutputStream ; 
 import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 import java . io . PrintWriter ; 
 @ @ - 47 , 7 + 46 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * / 
 / / - @ cs [ AbbreviationAsWordInName ] Test should be named as its main class . 
 public class XMLLoggerTest { 
 - private final ByteArrayOutputStream outStream = new ByteArrayOutputStream ( ) ; 
 + private final CloseAndFlushTestByteArrayOutputStream outStream = 
 + new CloseAndFlushTestByteArrayOutputStream ( ) ; 
 
 @ Test 
 public void testEncode ( ) 
 @ @ - 213 , 7 + 213 , 9 @ @ public class XMLLoggerTest { 
 " & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; " 
 + " & # 10 ; & lt ; / exception & gt ; & # 10 ; " , 
 } ; 
 + 
 verifyLines ( expectedLines ) ; 
 + assertEquals ( 1 , outStream . getCloseCount ( ) ) ; 
 } 
 
 private String [ ] getOutStreamLines ( ) 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 index 4565eee . . 53620d2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 @ @ - 24 , 11 + 24 , 15 @ @ import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 + import static org . mockito . Matchers . any ; 
 import static org . mockito . Mockito . when ; 
 + import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 + import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . net . URL ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 @ @ - 49 , 13 + 53 , 16 @ @ import org . powermock . api . mockito . PowerMockito ; 
 import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 + import com . google . common . io . Closeables ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 + import com . puppycrawl . tools . checkstyle . PackageNamesLoader ; 
 import com . puppycrawl . tools . checkstyle . TestRootModuleChecker ; 
 import com . puppycrawl . tools . checkstyle . XMLLogger ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 
 @ RunWith ( PowerMockRunner . class ) 
 - @ PrepareForTest ( CheckstyleAntTask . class ) 
 + @ PrepareForTest ( { CheckstyleAntTask . class , Closeables . class } ) 
 public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 
 private static final String FLAWLESS _ INPUT _ DIR = " ant / checkstyleanttask / flawless / " ; 
 @ @ - 532 , 6 + 539 , 17 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 
 } 
 
 + @ Test 
 + public void testPackageNamesLoaderStreamClosed ( ) throws CheckstyleException { 
 + mockStatic ( Closeables . class ) ; 
 + doNothing ( ) . when ( Closeables . class ) ; 
 + Closeables . closeQuietly ( any ( InputStream . class ) ) ; 
 + 
 + PackageNamesLoader . getPackageNames ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + verifyStatic ( ) ; 
 + Closeables . closeQuietly ( any ( InputStream . class ) ) ; 
 + } 
 + 
 private static class CheckstyleAntTaskStub extends CheckstyleAntTask { 
 @ Override 
 protected List < File > scanFileSets ( ) {

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 1cfb33a . . 56e3411 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 22 , 7 + 22 , 7 @ @ 
 
 < groupId > com . puppycrawl . tools < / groupId > 
 < artifactId > checkstyle < / artifactId > 
 - < version > 7 . 2 < / version > 
 + < version > 7 . 2 - SNAPSHOT < / version > 
 < packaging > jar < / packaging > 
 
 < name > checkstyle < / name >
