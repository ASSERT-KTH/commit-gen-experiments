BLEU SCORE: 0.030569602392969023

TEST MSG: Issue # 5750 : exclude inner types from XdocsJavaDocsTest
GENERATED MSG: added check for equals ( ) vs . hashCode , RFE # 554373

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 3af18f2 . . 4f03a66 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . io . File ; <nl> import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 47 , 12 + 48 , 14 @ @ import com . puppycrawl . tools . checkstyle . ModuleFactory ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . Scope ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . internal . utils . TestUtil ; <nl> import com . puppycrawl . tools . checkstyle . internal . utils . XdocUtil ; <nl> import com . puppycrawl . tools . checkstyle . internal . utils . XmlUtil ; <nl> import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; <nl> import com . puppycrawl . tools . checkstyle . utils . JavadocUtil ; <nl> + import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; <nl> import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; <nl> <nl> public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> @ @ - 60 , 10 + 63 , 40 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> private static final Map < String , String > CHECK _ PROPERTY _ DOC = new HashMap < > ( ) ; <nl> private static final Map < String , String > CHECK _ TEXT = new HashMap < > ( ) ; <nl> <nl> + / * * <nl> + * The list of checks that are compatible with this rule . <nl> + * When the list becomes large , it should be replaced by a suppression list . <nl> + * / <nl> + private static final String [ ] COMPATIBLE _ CHECKS = { <nl> + " AbbreviationAsWordInName " , <nl> + " AbstractClassName " , <nl> + " AtclauseOrder " , <nl> + " CatchParameterName " , <nl> + " ClassMemberImpliedModifier " , <nl> + " ClassTypeParameterName " , <nl> + " ConstantName " , <nl> + " InterfaceMemberImpliedModifier " , <nl> + " InterfaceTypeParameterName " , <nl> + " LambdaParameterName " , <nl> + " LocalFinalVariableName " , <nl> + " LocalVariableName " , <nl> + " MemberName " , <nl> + " MethodName " , <nl> + " MethodTypeParameterName " , <nl> + " PackageName " , <nl> + " ParameterName " , <nl> + " StaticVariableName " , <nl> + " TypeName " , <nl> + } ; <nl> + <nl> private static Checker checker ; <nl> <nl> private static String checkName ; <nl> <nl> + static { <nl> + Arrays . sort ( COMPATIBLE _ CHECKS ) ; <nl> + } <nl> + <nl> @ Override <nl> protected String getPackageLocation ( ) { <nl> return " com . puppycrawl . tools . checkstyle . internal " ; <nl> @ @ - 78 , 9 + 111 , 8 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> <nl> / * * <nl> * Test contains asserts in callstack , but idea does not see them . <nl> - * @ noinspection JUnitTestMethodWithNoAssertions , OverlyComplexBooleanExpression <nl> + * @ noinspection JUnitTestMethodWithNoAssertions <nl> * / <nl> - / / - @ cs [ CyclomaticComplexity ] needed until all suppressions are removed <nl> @ Test <nl> public void testAllCheckSectionJavaDocs ( ) throws Exception { <nl> final ModuleFactory moduleFactory = TestUtil . getPackageObjectFactory ( ) ; <nl> @ @ - 102 , 29 + 134 , 8 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> final String sectionName = section . getAttributes ( ) . getNamedItem ( " name " ) <nl> . getNodeValue ( ) ; <nl> <nl> - / / - @ cs [ BooleanExpressionComplexity ] needed until all suppressions are removed <nl> if ( " Content " . equals ( sectionName ) | | " Overview " . equals ( sectionName ) <nl> - / / suppression list <nl> - | | ! " AbbreviationAsWordInName " . equals ( sectionName ) <nl> - & & ! " AbstractClassName " . equals ( sectionName ) <nl> - & & ! " CatchParameterName " . equals ( sectionName ) <nl> - & & ! " ClassMemberImpliedModifier " . equals ( sectionName ) <nl> - & & ! " ClassTypeParameterName " . equals ( sectionName ) <nl> - & & ! " ConstantName " . equals ( sectionName ) <nl> - & & ! " InterfaceMemberImpliedModifier " . equals ( sectionName ) <nl> - & & ! " InterfaceTypeParameterName " . equals ( sectionName ) <nl> - & & ! " LambdaParameterName " . equals ( sectionName ) <nl> - & & ! " LocalFinalVariableName " . equals ( sectionName ) <nl> - & & ! " LocalVariableName " . equals ( sectionName ) <nl> - & & ! " MemberName " . equals ( sectionName ) <nl> - & & ! " MethodName " . equals ( sectionName ) <nl> - & & ! " MethodTypeParameterName " . equals ( sectionName ) <nl> - & & ! " PackageName " . equals ( sectionName ) <nl> - & & ! " ParameterName " . equals ( sectionName ) <nl> - & & ! " StaticVariableName " . equals ( sectionName ) <nl> - & & ! " TypeName " . equals ( sectionName ) <nl> - & & ! " AtclauseOrder " . equals ( sectionName ) <nl> - ) { <nl> + | | Arrays . binarySearch ( COMPATIBLE _ CHECKS , sectionName ) < 0 ) { <nl> continue ; <nl> } <nl> <nl> @ @ - 179 , 6 + 190 , 8 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> switch ( subSectionName ) { <nl> case " Description " : <nl> case " Examples " : <nl> + case " Notes " : <nl> + case " Rule Description " : <nl> CHECK _ TEXT . put ( subSectionName , getNodeText ( subSection , true ) . replace ( " \ r " , " " ) ) ; <nl> break ; <nl> case " Properties " : <nl> @ @ - 193 , 10 + 206 , 6 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> break ; <nl> case " Parent Module " : <nl> break ; <nl> - case " Notes " : <nl> - break ; <nl> - case " Rule Description " : <nl> - break ; <nl> default : <nl> break ; <nl> } <nl> @ @ - 281 , 10 + 290 , 11 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> / / - @ cs [ CyclomaticComplexity ] No simple way to split this apart . <nl> private static void appendNodeText ( StringBuffer result , Node node , boolean fixLinks ) { <nl> final String name = transformXmlToJavaDocName ( node . getNodeName ( ) ) ; <nl> - final boolean newLineOpenBefore = " p " . equals ( name ) | | " pre " . equals ( name ) <nl> - | | " ul " . equals ( name ) | | " li " . equals ( name ) ; <nl> - final boolean newLineOpenAfter = newLineOpenBefore & & ! " ul " . equals ( name ) ; <nl> - final boolean newLineClose = newLineOpenAfter | | " ul " . equals ( name ) ; <nl> + final boolean list = " ol " . equals ( name ) | | " ul " . equals ( name ) ; <nl> + final boolean newLineOpenBefore = list | | " p " . equals ( name ) | | " pre " . equals ( name ) <nl> + | | " li " . equals ( name ) ; <nl> + final boolean newLineOpenAfter = newLineOpenBefore & & ! list ; <nl> + final boolean newLineClose = newLineOpenAfter | | list ; <nl> final boolean sanitize = " pre " . equals ( name ) ; <nl> final boolean changeToTag = " code " . equals ( name ) ; <nl> <nl> @ @ - 397 , 8 + 407 , 6 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> private static class JavaDocCapture extends AbstractCheck { <nl> private static final Pattern SETTER _ PATTERN = Pattern . compile ( " ^ set [ A - Z ] . * " ) ; <nl> <nl> - private int depth ; <nl> - <nl> @ Override <nl> public boolean isCommentNodesRequired ( ) { <nl> return true ; <nl> @ @ - 422 , 11 + 430 , 6 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Override <nl> - public void beginTree ( DetailAST rootAST ) { <nl> - depth = 0 ; <nl> - } <nl> - <nl> - @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> if ( JavadocUtil . isJavadocComment ( ast ) ) { <nl> final DetailAST node = getParent ( ast ) ; <nl> @ @ - 461 , 15 + 464 , 6 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> } <nl> } <nl> <nl> - @ Override <nl> - public void leaveToken ( DetailAST ast ) { <nl> - final DetailAST node = getParent ( ast ) ; <nl> - <nl> - if ( node . getType ( ) = = TokenTypes . CLASS _ DEF & & JavadocUtil . isJavadocComment ( ast ) ) { <nl> - depth - - ; <nl> - } <nl> - } <nl> - <nl> private static DetailAST getParent ( DetailAST node ) { <nl> DetailAST result = node . getParent ( ) ; <nl> int type = result . getType ( ) ; <nl> @ @ - 482 , 20 + 476 , 21 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> return result ; <nl> } <nl> <nl> - private void visitClass ( DetailAST ast ) { <nl> - if ( depth = = 0 ) { <nl> + private static void visitClass ( DetailAST ast ) { <nl> + if ( ScopeUtil . isInScope ( ast , Scope . PUBLIC ) ) { <nl> Assert . assertEquals ( <nl> checkName + " ' s class - level JavaDoc " , <nl> - CHECK _ TEXT . get ( " Description " ) + CHECK _ TEXT . get ( " Properties " ) <nl> + CHECK _ TEXT . get ( " Description " ) <nl> + + CHECK _ TEXT . computeIfAbsent ( " Rule Description " , unused - > " " ) <nl> + + CHECK _ TEXT . computeIfAbsent ( " Notes " , unused - > " " ) <nl> + + CHECK _ TEXT . get ( " Properties " ) <nl> + CHECK _ TEXT . get ( " Examples " ) + " @ since " <nl> + CHECK _ TEXT . get ( " since " ) , getJavaDocText ( ast ) ) ; <nl> } <nl> - <nl> - depth + + ; <nl> } <nl> <nl> - private void visitMethod ( DetailAST ast , DetailAST node ) { <nl> - if ( depth = = 0 & & isSetterMethod ( node ) ) { <nl> + private static void visitMethod ( DetailAST ast , DetailAST node ) { <nl> + if ( ScopeUtil . isInScope ( ast , Scope . PUBLIC ) & & isSetterMethod ( node ) ) { <nl> final String propertyUpper = node . findFirstToken ( TokenTypes . IDENT ) <nl> . getText ( ) . substring ( 3 ) ; <nl> final String propertyName = makeFirstLower ( propertyUpper ) ;
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 9cb78b7 . . 38ce1f8 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 186 , 6 + 186 , 14 @ @ <nl> < ! - - TEST TARGETS - - > <nl> < ! - - - - > <nl> <nl> + < ! - - Run the GUI - - > <nl> + < target name = " run . gui " depends = " compile . checkstyle " <nl> + description = " Run the GUI for displaying a tree " > <nl> + < java classname = " com . puppycrawl . tools . checkstyle . gui . Main " <nl> + fork = " yes " classpathref = " run . classpath " > <nl> + < / java > <nl> + < / target > <nl> + <nl> < ! - - display a specified file in a UI frame - - > <nl> < target name = " run . treeviewer " depends = " compile . checkstyle " <nl> description = " Display a specified file in GUI tree " > <nl> @ @ - 252 , 7 + 260 , 7 @ @ <nl> < checkstyle properties = " docs / checkstyle . rules " > <nl> < fileset dir = " src / checkstyle " <nl> includes = " * * / * . java " <nl> - excludes = " * * / Generated * . java , * * / Java * . java " / > <nl> + excludes = " * * / Generated * . java , * * / Java * . java , * * / gui / * " / > <nl> < formatter type = " plain " / > <nl> < formatter type = " xml " toFile = " target / cs _ errors . xml " / > <nl> < classpath refid = " run . classpath " / >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 3af18f2 . . 4f03a66 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . io . File ; 
 import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 47 , 12 + 48 , 14 @ @ import com . puppycrawl . tools . checkstyle . ModuleFactory ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . Scope ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . internal . utils . TestUtil ; 
 import com . puppycrawl . tools . checkstyle . internal . utils . XdocUtil ; 
 import com . puppycrawl . tools . checkstyle . internal . utils . XmlUtil ; 
 import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; 
 import com . puppycrawl . tools . checkstyle . utils . JavadocUtil ; 
 + import com . puppycrawl . tools . checkstyle . utils . ScopeUtil ; 
 import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; 
 
 public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 @ @ - 60 , 10 + 63 , 40 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 private static final Map < String , String > CHECK _ PROPERTY _ DOC = new HashMap < > ( ) ; 
 private static final Map < String , String > CHECK _ TEXT = new HashMap < > ( ) ; 
 
 + / * * 
 + * The list of checks that are compatible with this rule . 
 + * When the list becomes large , it should be replaced by a suppression list . 
 + * / 
 + private static final String [ ] COMPATIBLE _ CHECKS = { 
 + " AbbreviationAsWordInName " , 
 + " AbstractClassName " , 
 + " AtclauseOrder " , 
 + " CatchParameterName " , 
 + " ClassMemberImpliedModifier " , 
 + " ClassTypeParameterName " , 
 + " ConstantName " , 
 + " InterfaceMemberImpliedModifier " , 
 + " InterfaceTypeParameterName " , 
 + " LambdaParameterName " , 
 + " LocalFinalVariableName " , 
 + " LocalVariableName " , 
 + " MemberName " , 
 + " MethodName " , 
 + " MethodTypeParameterName " , 
 + " PackageName " , 
 + " ParameterName " , 
 + " StaticVariableName " , 
 + " TypeName " , 
 + } ; 
 + 
 private static Checker checker ; 
 
 private static String checkName ; 
 
 + static { 
 + Arrays . sort ( COMPATIBLE _ CHECKS ) ; 
 + } 
 + 
 @ Override 
 protected String getPackageLocation ( ) { 
 return " com . puppycrawl . tools . checkstyle . internal " ; 
 @ @ - 78 , 9 + 111 , 8 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 
 / * * 
 * Test contains asserts in callstack , but idea does not see them . 
 - * @ noinspection JUnitTestMethodWithNoAssertions , OverlyComplexBooleanExpression 
 + * @ noinspection JUnitTestMethodWithNoAssertions 
 * / 
 - / / - @ cs [ CyclomaticComplexity ] needed until all suppressions are removed 
 @ Test 
 public void testAllCheckSectionJavaDocs ( ) throws Exception { 
 final ModuleFactory moduleFactory = TestUtil . getPackageObjectFactory ( ) ; 
 @ @ - 102 , 29 + 134 , 8 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 final String sectionName = section . getAttributes ( ) . getNamedItem ( " name " ) 
 . getNodeValue ( ) ; 
 
 - / / - @ cs [ BooleanExpressionComplexity ] needed until all suppressions are removed 
 if ( " Content " . equals ( sectionName ) | | " Overview " . equals ( sectionName ) 
 - / / suppression list 
 - | | ! " AbbreviationAsWordInName " . equals ( sectionName ) 
 - & & ! " AbstractClassName " . equals ( sectionName ) 
 - & & ! " CatchParameterName " . equals ( sectionName ) 
 - & & ! " ClassMemberImpliedModifier " . equals ( sectionName ) 
 - & & ! " ClassTypeParameterName " . equals ( sectionName ) 
 - & & ! " ConstantName " . equals ( sectionName ) 
 - & & ! " InterfaceMemberImpliedModifier " . equals ( sectionName ) 
 - & & ! " InterfaceTypeParameterName " . equals ( sectionName ) 
 - & & ! " LambdaParameterName " . equals ( sectionName ) 
 - & & ! " LocalFinalVariableName " . equals ( sectionName ) 
 - & & ! " LocalVariableName " . equals ( sectionName ) 
 - & & ! " MemberName " . equals ( sectionName ) 
 - & & ! " MethodName " . equals ( sectionName ) 
 - & & ! " MethodTypeParameterName " . equals ( sectionName ) 
 - & & ! " PackageName " . equals ( sectionName ) 
 - & & ! " ParameterName " . equals ( sectionName ) 
 - & & ! " StaticVariableName " . equals ( sectionName ) 
 - & & ! " TypeName " . equals ( sectionName ) 
 - & & ! " AtclauseOrder " . equals ( sectionName ) 
 - ) { 
 + | | Arrays . binarySearch ( COMPATIBLE _ CHECKS , sectionName ) < 0 ) { 
 continue ; 
 } 
 
 @ @ - 179 , 6 + 190 , 8 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 switch ( subSectionName ) { 
 case " Description " : 
 case " Examples " : 
 + case " Notes " : 
 + case " Rule Description " : 
 CHECK _ TEXT . put ( subSectionName , getNodeText ( subSection , true ) . replace ( " \ r " , " " ) ) ; 
 break ; 
 case " Properties " : 
 @ @ - 193 , 10 + 206 , 6 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 break ; 
 case " Parent Module " : 
 break ; 
 - case " Notes " : 
 - break ; 
 - case " Rule Description " : 
 - break ; 
 default : 
 break ; 
 } 
 @ @ - 281 , 10 + 290 , 11 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 / / - @ cs [ CyclomaticComplexity ] No simple way to split this apart . 
 private static void appendNodeText ( StringBuffer result , Node node , boolean fixLinks ) { 
 final String name = transformXmlToJavaDocName ( node . getNodeName ( ) ) ; 
 - final boolean newLineOpenBefore = " p " . equals ( name ) | | " pre " . equals ( name ) 
 - | | " ul " . equals ( name ) | | " li " . equals ( name ) ; 
 - final boolean newLineOpenAfter = newLineOpenBefore & & ! " ul " . equals ( name ) ; 
 - final boolean newLineClose = newLineOpenAfter | | " ul " . equals ( name ) ; 
 + final boolean list = " ol " . equals ( name ) | | " ul " . equals ( name ) ; 
 + final boolean newLineOpenBefore = list | | " p " . equals ( name ) | | " pre " . equals ( name ) 
 + | | " li " . equals ( name ) ; 
 + final boolean newLineOpenAfter = newLineOpenBefore & & ! list ; 
 + final boolean newLineClose = newLineOpenAfter | | list ; 
 final boolean sanitize = " pre " . equals ( name ) ; 
 final boolean changeToTag = " code " . equals ( name ) ; 
 
 @ @ - 397 , 8 + 407 , 6 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 private static class JavaDocCapture extends AbstractCheck { 
 private static final Pattern SETTER _ PATTERN = Pattern . compile ( " ^ set [ A - Z ] . * " ) ; 
 
 - private int depth ; 
 - 
 @ Override 
 public boolean isCommentNodesRequired ( ) { 
 return true ; 
 @ @ - 422 , 11 + 430 , 6 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 } 
 
 @ Override 
 - public void beginTree ( DetailAST rootAST ) { 
 - depth = 0 ; 
 - } 
 - 
 - @ Override 
 public void visitToken ( DetailAST ast ) { 
 if ( JavadocUtil . isJavadocComment ( ast ) ) { 
 final DetailAST node = getParent ( ast ) ; 
 @ @ - 461 , 15 + 464 , 6 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 } 
 } 
 
 - @ Override 
 - public void leaveToken ( DetailAST ast ) { 
 - final DetailAST node = getParent ( ast ) ; 
 - 
 - if ( node . getType ( ) = = TokenTypes . CLASS _ DEF & & JavadocUtil . isJavadocComment ( ast ) ) { 
 - depth - - ; 
 - } 
 - } 
 - 
 private static DetailAST getParent ( DetailAST node ) { 
 DetailAST result = node . getParent ( ) ; 
 int type = result . getType ( ) ; 
 @ @ - 482 , 20 + 476 , 21 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 return result ; 
 } 
 
 - private void visitClass ( DetailAST ast ) { 
 - if ( depth = = 0 ) { 
 + private static void visitClass ( DetailAST ast ) { 
 + if ( ScopeUtil . isInScope ( ast , Scope . PUBLIC ) ) { 
 Assert . assertEquals ( 
 checkName + " ' s class - level JavaDoc " , 
 - CHECK _ TEXT . get ( " Description " ) + CHECK _ TEXT . get ( " Properties " ) 
 + CHECK _ TEXT . get ( " Description " ) 
 + + CHECK _ TEXT . computeIfAbsent ( " Rule Description " , unused - > " " ) 
 + + CHECK _ TEXT . computeIfAbsent ( " Notes " , unused - > " " ) 
 + + CHECK _ TEXT . get ( " Properties " ) 
 + CHECK _ TEXT . get ( " Examples " ) + " @ since " 
 + CHECK _ TEXT . get ( " since " ) , getJavaDocText ( ast ) ) ; 
 } 
 - 
 - depth + + ; 
 } 
 
 - private void visitMethod ( DetailAST ast , DetailAST node ) { 
 - if ( depth = = 0 & & isSetterMethod ( node ) ) { 
 + private static void visitMethod ( DetailAST ast , DetailAST node ) { 
 + if ( ScopeUtil . isInScope ( ast , Scope . PUBLIC ) & & isSetterMethod ( node ) ) { 
 final String propertyUpper = node . findFirstToken ( TokenTypes . IDENT ) 
 . getText ( ) . substring ( 3 ) ; 
 final String propertyName = makeFirstLower ( propertyUpper ) ;

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index 9cb78b7 . . 38ce1f8 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 186 , 6 + 186 , 14 @ @ 
 < ! - - TEST TARGETS - - > 
 < ! - - - - > 
 
 + < ! - - Run the GUI - - > 
 + < target name = " run . gui " depends = " compile . checkstyle " 
 + description = " Run the GUI for displaying a tree " > 
 + < java classname = " com . puppycrawl . tools . checkstyle . gui . Main " 
 + fork = " yes " classpathref = " run . classpath " > 
 + < / java > 
 + < / target > 
 + 
 < ! - - display a specified file in a UI frame - - > 
 < target name = " run . treeviewer " depends = " compile . checkstyle " 
 description = " Display a specified file in GUI tree " > 
 @ @ - 252 , 7 + 260 , 7 @ @ 
 < checkstyle properties = " docs / checkstyle . rules " > 
 < fileset dir = " src / checkstyle " 
 includes = " * * / * . java " 
 - excludes = " * * / Generated * . java , * * / Java * . java " / > 
 + excludes = " * * / Generated * . java , * * / Java * . java , * * / gui / * " / > 
 < formatter type = " plain " / > 
 < formatter type = " xml " toFile = " target / cs _ errors . xml " / > 
 < classpath refid = " run . classpath " / >
