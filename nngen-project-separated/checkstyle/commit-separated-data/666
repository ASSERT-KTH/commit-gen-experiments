BLEU SCORE: 0.028265205879007455

TEST MSG: Issue # 4592 : Added AbstractModuleTestSupport and GenericWhitespaceCheckTest , ParenPadCheckTest , FileTabCharacterCheckTest , PackageAnnotationCheckTest now extend from it
GENERATED MSG: Added file extensions property to Checker & TreeWalker , issue # 25

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 9119129 . . 6c88945 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 34 , 7 + 34 , 7 @ @ <nl> < suppress checks = " AvoidStaticImport " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " [ \ \ / ] IndentationCheckTest . java $ " / > <nl> < suppress checks = " EqualsAvoidNull " files = " [ \ \ / ] Int . * FilterTest . java $ " / > <nl> - < suppress checks = " VisibilityModifier " files = " [ \ \ / ] BaseCheckTestSupport . java $ " / > <nl> + < suppress checks = " VisibilityModifier " files = " [ \ \ / ] BaseCheckTestSupport . java $ | [ \ \ / ] AbstractModuleTestSupport . java $ " / > <nl> < suppress checks = " WriteTag " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> < suppress checks = " MethodCount " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> <nl> @ @ - 73 , 7 + 73 , 7 @ @ <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " AutomaticBean \ . java " / > <nl> < ! - - they are aggregators of logic , usage a several of classes are ok - - > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " ( Checker | TreeWalker | Main | CheckstyleAntTask | JavadocDetailNodeParser ) \ . java " / > <nl> - < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | XdocsPagesTest | CheckstyleAntTaskTest ) \ . java " / > <nl> + < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | AbstractModuleTestSupport | XdocsPagesTest | CheckstyleAntTaskTest ) \ . java " / > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " PropertyCacheFile \ . java " / > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " PropertyCacheFileTest \ . java " / > <nl> < suppress checks = " ClassFanOutComplexity " files = " [ \ \ / ] Main \ . java " / > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java <nl> new file mode 100644 <nl> index 0000000 . . 6007e59 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java <nl> @ @ - 0 , 0 + 1 , 327 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + import java . io . ByteArrayInputStream ; <nl> + import java . io . ByteArrayOutputStream ; <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStreamReader ; <nl> + import java . io . LineNumberReader ; <nl> + import java . nio . charset . StandardCharsets ; <nl> + import java . text . MessageFormat ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Locale ; <nl> + import java . util . Map ; <nl> + import java . util . ResourceBundle ; <nl> + import java . util . stream . Collectors ; <nl> + <nl> + import com . google . common . collect . MapDifference ; <nl> + import com . google . common . collect . Maps ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> + <nl> + public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport { <nl> + <nl> + protected final ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; <nl> + <nl> + protected static DefaultConfiguration createCheckConfig ( Class < ? > clazz ) { <nl> + return new DefaultConfiguration ( clazz . getName ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates { @ link Checker } instance based on the given { @ link Configuration } instance . <nl> + * @ param checkConfig { @ link Configuration } instance . <nl> + * @ return { @ link Checker } instance based on the given { @ link Configuration } instance . <nl> + * @ throws Exception if an exception occurs during checker configuration . <nl> + * / <nl> + public Checker createChecker ( Configuration checkConfig ) <nl> + throws Exception { <nl> + final DefaultConfiguration dc = createCheckerConfig ( checkConfig ) ; <nl> + final Checker checker = new Checker ( ) ; <nl> + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + checker . configure ( dc ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> + return checker ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates { @ link DefaultConfiguration } for the { @ link Checker } <nl> + * based on the given { @ link Configuration } instance . <nl> + * @ param config { @ link Configuration } instance . <nl> + * @ return { @ link DefaultConfiguration } for the { @ link Checker } <nl> + * based on the given { @ link Configuration } instance . <nl> + * / <nl> + protected DefaultConfiguration createCheckerConfig ( Configuration config ) { <nl> + final DefaultConfiguration dc = <nl> + new DefaultConfiguration ( " configuration " ) ; <nl> + final DefaultConfiguration twConf = createCheckConfig ( TreeWalker . class ) ; <nl> + / / make sure that the tests always run with this charset <nl> + dc . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> + dc . addChild ( twConf ) ; <nl> + twConf . addChild ( config ) ; <nl> + return dc ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns canonical path for the file with the given file name . <nl> + * The path is formed base on the non - compilable resources location . <nl> + * This implementation uses ' src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / ' <nl> + * as a non - compilable resource location . <nl> + * @ param filename file name . <nl> + * @ return canonical path for the file with the given file name . <nl> + * @ throws IOException if I / O exception occurs while forming the path . <nl> + * / <nl> + protected final String getNonCompilablePath ( String filename ) throws IOException { <nl> + return new File ( " src / test / resources - noncompilable / " + getPackageLocation ( ) + " / " <nl> + + filename ) . getCanonicalPath ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Performs verification of the file with the given file name . Uses specified configuration . <nl> + * Expected messages are represented by the array of strings . <nl> + * This implementation uses overloaded <nl> + * { @ link BaseCheckTestSupport # verify ( Checker , File [ ] , String , String . . . ) } method inside . <nl> + * @ param aConfig configuration . <nl> + * @ param fileName file name to verify . <nl> + * @ param expected an array of expected messages . <nl> + * @ throws Exception if exception occurs during verification process . <nl> + * / <nl> + protected void verify ( Configuration aConfig , String fileName , String . . . expected ) <nl> + throws Exception { <nl> + verify ( createChecker ( aConfig ) , fileName , fileName , expected ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Performs verification of the file with the given file name . <nl> + * Uses provided { @ link Checker } instance . <nl> + * Expected messages are represented by the array of strings . <nl> + * This implementation uses overloaded <nl> + * { @ link BaseCheckTestSupport # verify ( Checker , String , String , String . . . ) } method inside . <nl> + * @ param checker { @ link Checker } instance . <nl> + * @ param fileName file name to verify . <nl> + * @ param expected an array of expected messages . <nl> + * @ throws Exception if exception occurs during verification process . <nl> + * / <nl> + protected void verify ( Checker checker , String fileName , String . . . expected ) <nl> + throws Exception { <nl> + verify ( checker , fileName , fileName , expected ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Performs verification of the file with the given file name . <nl> + * Uses provided { @ link Checker } instance . <nl> + * Expected messages are represented by the array of strings . <nl> + * This implementation uses overloaded <nl> + * { @ link BaseCheckTestSupport # verify ( Checker , File [ ] , String , String . . . ) } method inside . <nl> + * @ param checker { @ link Checker } instance . <nl> + * @ param processedFilename file name to verify . <nl> + * @ param messageFileName message file name . <nl> + * @ param expected an array of expected messages . <nl> + * @ throws Exception if exception occurs during verification process . <nl> + * / <nl> + protected void verify ( Checker checker , <nl> + String processedFilename , <nl> + String messageFileName , <nl> + String . . . expected ) <nl> + throws Exception { <nl> + verify ( checker , <nl> + new File [ ] { new File ( processedFilename ) } , <nl> + messageFileName , expected ) ; <nl> + } <nl> + <nl> + / * * <nl> + * We keep two verify methods with separate logic only for convenience of debugging <nl> + * We have minimum amount of multi - file test cases <nl> + * / <nl> + protected void verify ( Checker checker , <nl> + File [ ] processedFiles , <nl> + String messageFileName , <nl> + String . . . expected ) <nl> + throws Exception { <nl> + stream . flush ( ) ; <nl> + final List < File > theFiles = new ArrayList < > ( ) ; <nl> + Collections . addAll ( theFiles , processedFiles ) ; <nl> + final int errs = checker . process ( theFiles ) ; <nl> + <nl> + / / process each of the lines <nl> + final ByteArrayInputStream inputStream = <nl> + new ByteArrayInputStream ( stream . toByteArray ( ) ) ; <nl> + try ( LineNumberReader lnr = new LineNumberReader ( <nl> + new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { <nl> + <nl> + final List < String > actuals = lnr . lines ( ) . limit ( expected . length ) <nl> + . sorted ( ) . collect ( Collectors . toList ( ) ) ; <nl> + Arrays . sort ( expected ) ; <nl> + <nl> + for ( int i = 0 ; i < expected . length ; i + + ) { <nl> + final String expectedResult = messageFileName + " : " + expected [ i ] ; <nl> + assertEquals ( " error message " + i , expectedResult , actuals . get ( i ) ) ; <nl> + } <nl> + <nl> + assertEquals ( " unexpected output : " + lnr . readLine ( ) , <nl> + expected . length , errs ) ; <nl> + } <nl> + <nl> + checker . destroy ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Performs verification of the given files . <nl> + * @ param checker { @ link Checker } instance <nl> + * @ param processedFiles files to process . <nl> + * @ param expectedViolations a map of expected violations per files . <nl> + * @ throws Exception if exception occurs during verification process . <nl> + * / <nl> + protected void verify ( Checker checker , <nl> + File [ ] processedFiles , <nl> + Map < String , List < String > > expectedViolations ) <nl> + throws Exception { <nl> + stream . flush ( ) ; <nl> + final List < File > theFiles = new ArrayList < > ( ) ; <nl> + Collections . addAll ( theFiles , processedFiles ) ; <nl> + final int errs = checker . process ( theFiles ) ; <nl> + <nl> + / / process each of the lines <nl> + final Map < String , List < String > > actualViolations = getActualViolations ( errs ) ; <nl> + final Map < String , List < String > > realExpectedViolations = <nl> + Maps . filterValues ( expectedViolations , input - > ! input . isEmpty ( ) ) ; <nl> + final MapDifference < String , List < String > > violationDifferences = <nl> + Maps . difference ( realExpectedViolations , actualViolations ) ; <nl> + <nl> + final Map < String , List < String > > missingViolations = <nl> + violationDifferences . entriesOnlyOnLeft ( ) ; <nl> + final Map < String , List < String > > unexpectedViolations = <nl> + violationDifferences . entriesOnlyOnRight ( ) ; <nl> + final Map < String , MapDifference . ValueDifference < List < String > > > differingViolations = <nl> + violationDifferences . entriesDiffering ( ) ; <nl> + <nl> + final StringBuilder message = new StringBuilder ( ) ; <nl> + if ( ! missingViolations . isEmpty ( ) ) { <nl> + message . append ( " missing violations : " ) . append ( missingViolations ) ; <nl> + } <nl> + if ( ! unexpectedViolations . isEmpty ( ) ) { <nl> + if ( message . length ( ) > 0 ) { <nl> + message . append ( ' \ n ' ) ; <nl> + } <nl> + message . append ( " unexpected violations : " ) . append ( unexpectedViolations ) ; <nl> + } <nl> + if ( ! differingViolations . isEmpty ( ) ) { <nl> + if ( message . length ( ) > 0 ) { <nl> + message . append ( ' \ n ' ) ; <nl> + } <nl> + message . append ( " differing violations : " ) . append ( differingViolations ) ; <nl> + } <nl> + <nl> + assertTrue ( message . toString ( ) , <nl> + missingViolations . isEmpty ( ) <nl> + & & unexpectedViolations . isEmpty ( ) <nl> + & & differingViolations . isEmpty ( ) ) ; <nl> + <nl> + checker . destroy ( ) ; <nl> + } <nl> + <nl> + private Map < String , List < String > > getActualViolations ( int errorCount ) throws IOException { <nl> + / / process each of the lines <nl> + final ByteArrayInputStream inputStream = <nl> + new ByteArrayInputStream ( stream . toByteArray ( ) ) ; <nl> + <nl> + try ( LineNumberReader lnr = new LineNumberReader ( <nl> + new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { <nl> + <nl> + final Map < String , List < String > > actualViolations = new HashMap < > ( ) ; <nl> + for ( String line = lnr . readLine ( ) ; line ! = null & & lnr . getLineNumber ( ) < = errorCount ; <nl> + line = lnr . readLine ( ) ) { <nl> + / / have at least 2 characters before the splitting colon , <nl> + / / to not split after the drive letter on windows <nl> + final String [ ] actualViolation = line . split ( " ( ? < = . { 2 } ) : " , 2 ) ; <nl> + final String actualViolationFileName = actualViolation [ 0 ] ; <nl> + final String actualViolationMessage = actualViolation [ 1 ] ; <nl> + <nl> + List < String > actualViolationsPerFile = <nl> + actualViolations . get ( actualViolationFileName ) ; <nl> + if ( actualViolationsPerFile = = null ) { <nl> + actualViolationsPerFile = new ArrayList < > ( ) ; <nl> + actualViolations . put ( actualViolationFileName , actualViolationsPerFile ) ; <nl> + } <nl> + actualViolationsPerFile . add ( actualViolationMessage ) ; <nl> + } <nl> + <nl> + return actualViolations ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Gets the check message ' as is ' from appropriate ' messages . properties ' <nl> + * file . <nl> + * <nl> + * @ param messageKey the key of message in ' messages . properties ' file . <nl> + * @ param arguments the arguments of message in ' messages . properties ' file . <nl> + * / <nl> + protected String getCheckMessage ( String messageKey , Object . . . arguments ) { <nl> + return internalGetCheckMessage ( getMessageBundle ( ) , messageKey , arguments ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets the check message ' as is ' from appropriate ' messages . properties ' <nl> + * file . <nl> + * <nl> + * @ param messageBundle the bundle name . <nl> + * @ param messageKey the key of message in ' messages . properties ' file . <nl> + * @ param arguments the arguments of message in ' messages . properties ' file . <nl> + * / <nl> + private static String internalGetCheckMessage ( <nl> + String messageBundle , String messageKey , Object . . . arguments ) { <nl> + final ResourceBundle resourceBundle = ResourceBundle . getBundle ( <nl> + messageBundle , <nl> + Locale . getDefault ( ) , <nl> + Thread . currentThread ( ) . getContextClassLoader ( ) , <nl> + new LocalizedMessage . Utf8Control ( ) ) ; <nl> + final String pattern = resourceBundle . getString ( messageKey ) ; <nl> + final MessageFormat formatter = new MessageFormat ( pattern , Locale . ROOT ) ; <nl> + return formatter . format ( arguments ) ; <nl> + } <nl> + <nl> + private String getMessageBundle ( ) { <nl> + final String className = getClass ( ) . getName ( ) ; <nl> + return getMessageBundle ( className ) ; <nl> + } <nl> + <nl> + private static String getMessageBundle ( String className ) { <nl> + final String messageBundle ; <nl> + final String messages = " messages " ; <nl> + final int endIndex = className . lastIndexOf ( ' . ' ) ; <nl> + if ( endIndex < 0 ) { <nl> + messageBundle = messages ; <nl> + } <nl> + else { <nl> + final String packageName = className . substring ( 0 , endIndex ) ; <nl> + messageBundle = packageName + " . " + messages ; <nl> + } <nl> + return messageBundle ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java <nl> index 971f916 . . 5bc5226 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java <nl> @ @ - 21 , 32 + 21 , 19 @ @ package com . puppycrawl . tools . checkstyle . checks . annotation ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . annotation . PackageAnnotationCheck . MSG _ KEY ; <nl> <nl> - import java . io . File ; <nl> - import java . io . IOException ; <nl> - <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> - public class PackageAnnotationCheckTest extends BaseCheckTestSupport { <nl> - @ Override <nl> - protected String getPath ( String filename ) throws IOException { <nl> - return super . getPath ( " checks " + File . separator <nl> - + " annotation " + File . separator <nl> - + " packageannotation " + File . separator <nl> - + filename ) ; <nl> - } <nl> + public class PackageAnnotationCheckTest extends AbstractModuleTestSupport { <nl> <nl> @ Override <nl> - protected String getNonCompilablePath ( String filename ) throws IOException { <nl> - return super . getNonCompilablePath ( " checks " + File . separator <nl> - + " annotation " + File . separator <nl> - + " packageannotation " + File . separator <nl> - + filename ) ; <nl> + protected String getPackageLocation ( ) { <nl> + return " com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation " ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java <nl> index d9607e7 . . ae9988e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java <nl> @ @ - 23 , 24 + 23 , 20 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . FileTabCharacter <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . FileTabCharacterCheck . MSG _ FILE _ CONTAINS _ TAB ; <nl> <nl> import java . io . File ; <nl> - import java . io . IOException ; <nl> <nl> import org . junit . Test ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . Definitions ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> <nl> public class FileTabCharacterCheckTest <nl> - extends BaseCheckTestSupport { <nl> + extends AbstractModuleTestSupport { <nl> @ Override <nl> - protected String getPath ( String filename ) throws IOException { <nl> - return super . getPath ( " checks " + File . separator <nl> - + " whitespace " + File . separator <nl> - + " filetabcharacter " + File . separator <nl> - + filename ) ; <nl> + protected String getPackageLocation ( ) { <nl> + return " com / puppycrawl / tools / checkstyle / checks / whitespace / filetabcharacter " ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> index bd88f1d . . 386df36 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> @ @ - 27 , 8 + 27 , 6 @ @ import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> <nl> - import java . io . File ; <nl> - import java . io . IOException ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> @ @ - 36 , 14 + 34 , 14 @ @ import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> import antlr . CommonHiddenStreamToken ; <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class GenericWhitespaceCheckTest <nl> - extends BaseCheckTestSupport { <nl> + extends AbstractModuleTestSupport { <nl> private DefaultConfiguration checkConfig ; <nl> <nl> @ Before <nl> @ @ - 54 , 15 + 52 , 8 @ @ public class GenericWhitespaceCheckTest <nl> } <nl> <nl> @ Override <nl> - protected String getPath ( String filename ) throws IOException { <nl> - return super . getPath ( " checks " + File . separator <nl> - + " whitespace " + File . separator + " genericwhitespace " + File . separator + filename ) ; <nl> - } <nl> - <nl> - @ Override <nl> - protected String getNonCompilablePath ( String filename ) throws IOException { <nl> - return super . getNonCompilablePath ( " checks " + File . separator <nl> - + " whitespace " + File . separator + " genericwhitespace " + File . separator + filename ) ; <nl> + protected String getPackageLocation ( ) { <nl> + return " com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace " ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> index 42ee4d7 . . b739f38 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> @ @ - 26 , 24 + 26 , 19 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . AbstractParenPad <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> - import java . io . File ; <nl> - import java . io . IOException ; <nl> - <nl> import org . junit . Test ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class ParenPadCheckTest <nl> - extends BaseCheckTestSupport { <nl> + extends AbstractModuleTestSupport { <nl> + <nl> @ Override <nl> - protected String getPath ( String filename ) throws IOException { <nl> - return super . getPath ( " checks " + File . separator <nl> - + " whitespace " + File . separator <nl> - + " parenpad " + File . separator <nl> - + filename ) ; <nl> + protected String getPackageLocation ( ) { <nl> + return " com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad " ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> index a81ac42 . . 798a11f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . AnnotationUtility ; <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 28 , 6 + 29 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * Checks the number of parameters that a method or constructor has . <nl> * The default allowable number of parameters is 7 . <nl> * To change the number of allowable parameters , set property max . <nl> + * Allows to ignore number of parameters for methods with <nl> + * & # 064 ; { @ link java . lang . Override } annotation . <nl> * < / p > <nl> * < p > <nl> * An example of how to configure the check is : <nl> @ @ - 36 , 26 + 39 , 48 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * & lt ; module name = " ParameterNumber " / & gt ; <nl> * < / pre > <nl> * < p > <nl> - * An example of how to configure the check to allow 10 parameters is : <nl> + * An example of how to configure the check to allow 10 parameters <nl> + * and ignoring parameters for methods with & # 064 ; { @ link java . lang . Override } <nl> + * annotation is : <nl> * < / p > <nl> * < pre > <nl> * & lt ; module name = " ParameterNumber " & gt ; <nl> * & lt ; property name = " max " value = " 10 " / & gt ; <nl> + * & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> - <nl> + * Java code that will be ignored : <nl> + * < pre > <nl> + * < code > <nl> + * <nl> + * & # 064 ; Override <nl> + * public void needsLotsOfParameters ( int a , <nl> + * int b , int c , int d , int e , int f , int g , int h ) { <nl> + * . . . <nl> + * } <nl> + * < / code > <nl> + * < / pre > <nl> * @ author Oliver Burn <nl> * @ version 1 . 0 <nl> * / <nl> public class ParameterNumberCheck <nl> extends Check <nl> { <nl> + / * * { @ link Override Override } annotation name * / <nl> + private static final String OVERRIDE = " Override " ; <nl> + <nl> + / * * fully - qualified { @ link Override Override } annotation name * / <nl> + private static final String FQ _ OVERRIDE = " java . lang . " + OVERRIDE ; <nl> + <nl> / * * default maximum number of allowed parameters * / <nl> private static final int DEFAULT _ MAX _ PARAMETERS = 7 ; <nl> <nl> / * * the maximum number of allowed parameters * / <nl> private int mMax = DEFAULT _ MAX _ PARAMETERS ; <nl> <nl> + / * * ignore overridden methods * / <nl> + private boolean mIgnoreOverriddenMethods ; <nl> + <nl> / * * <nl> * Sets the maximum number of allowed parameters . <nl> * @ param aMax the max allowed parameters <nl> @ @ - 65 , 6 + 90 , 16 @ @ public class ParameterNumberCheck <nl> mMax = aMax ; <nl> } <nl> <nl> + / * * <nl> + * Ignore number of parameters for methods with <nl> + * & # 064 ; { @ link java . lang . Override } annotation . <nl> + * @ param aIgnoreOverriddenMethods set ignore overridden methods <nl> + * / <nl> + public void setIgnoreOverriddenMethods ( boolean aIgnoreOverriddenMethods ) <nl> + { <nl> + mIgnoreOverriddenMethods = aIgnoreOverriddenMethods ; <nl> + } <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> { <nl> @ @ - 76 , 9 + 111 , 23 @ @ public class ParameterNumberCheck <nl> { <nl> final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> final int count = params . getChildCount ( TokenTypes . PARAMETER _ DEF ) ; <nl> - if ( count > mMax ) { <nl> + if ( count > mMax & & ! ignoreNumberOfParameters ( aAST ) ) { <nl> final DetailAST name = aAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> log ( name . getLineNo ( ) , name . getColumnNo ( ) , " maxParam " , mMax , count ) ; <nl> } <nl> } <nl> + <nl> + / * * Determine whether to ignore number of parameters for the method . <nl> + * <nl> + * @ param aAST the token to process <nl> + * @ return true if this is overridden method and number of parameters should be ignored <nl> + * false otherwise <nl> + * / <nl> + private boolean ignoreNumberOfParameters ( DetailAST aAST ) <nl> + { <nl> + / / if you override a method , you have no power over the number of parameters <nl> + return mIgnoreOverriddenMethods <nl> + & & ( AnnotationUtility . containsAnnotation ( aAST , OVERRIDE ) <nl> + | | AnnotationUtility . containsAnnotation ( aAST , FQ _ OVERRIDE ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> index 7d293f2 . . 674b2b5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> @ @ - 63 , 4 + 63 , 17 @ @ public class ParameterNumberCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void shouldIgnoreMethodsWithOverrideAnnotation ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ParameterNumberCheck . class ) ; <nl> + checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 10 : More than 7 parameters ( found 8 ) . " , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputParameterNumberCheck . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java <nl> new file mode 100644 <nl> index 0000000 . . e90969d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + class InputParameterNumberCheckBase <nl> + { <nl> + / / method with many parameters <nl> + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + public class InputParameterNumberCheck extends InputParameterNumberCheckBase <nl> + { <nl> + @ Override <nl> + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ sizes . xml b / src / xdocs / config _ sizes . xml <nl> index 5ece323 . . d75c39e 100644 <nl> - - - a / src / xdocs / config _ sizes . xml <nl> + + + b / src / xdocs / config _ sizes . xml <nl> @ @ - 411 , 6 + 411 , 12 @ @ <nl> < td > 7 < / td > <nl> < / tr > <nl> < tr > <nl> + < td > ignoreOverriddenMethods < / td > <nl> + < td > Ignore number of parameters for methods with @ Override annotation < / td > <nl> + < td > < a href = " property _ types . html # boolean " > boolean < / a > < / td > <nl> + < td > false < / td > <nl> + < / tr > <nl> + < tr > <nl> < td > tokens < / td > <nl> < td > declarations to check < / td > <nl> <nl> @ @ - 448 , 6 + 454 , 28 @ @ <nl> & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> + < p > <nl> + To configure the check to ignore number of parameters for methods with @ Override or @ java . lang . Override annotation . <nl> + < / p > <nl> + < p > <nl> + Rationale : developer may need to override method with many parameters from 3 - rd party library . <nl> + In this case developer has no control over number of parameters . <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = " ParameterNumber " & gt ; <nl> + & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; <nl> + & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < p > <nl> + Java code example <nl> + < / p > <nl> + < source > <nl> + @ Override <nl> + public void needsLotsOfParameters ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + . . . <nl> + } <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Package " >

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 9119129 . . 6c88945 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 34 , 7 + 34 , 7 @ @ 
 < suppress checks = " AvoidStaticImport " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " [ \ \ / ] IndentationCheckTest . java $ " / > 
 < suppress checks = " EqualsAvoidNull " files = " [ \ \ / ] Int . * FilterTest . java $ " / > 
 - < suppress checks = " VisibilityModifier " files = " [ \ \ / ] BaseCheckTestSupport . java $ " / > 
 + < suppress checks = " VisibilityModifier " files = " [ \ \ / ] BaseCheckTestSupport . java $ | [ \ \ / ] AbstractModuleTestSupport . java $ " / > 
 < suppress checks = " WriteTag " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 < suppress checks = " MethodCount " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 
 @ @ - 73 , 7 + 73 , 7 @ @ 
 < suppress checks = " ClassDataAbstractionCoupling " files = " AutomaticBean \ . java " / > 
 < ! - - they are aggregators of logic , usage a several of classes are ok - - > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " ( Checker | TreeWalker | Main | CheckstyleAntTask | JavadocDetailNodeParser ) \ . java " / > 
 - < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | XdocsPagesTest | CheckstyleAntTaskTest ) \ . java " / > 
 + < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | AbstractModuleTestSupport | XdocsPagesTest | CheckstyleAntTaskTest ) \ . java " / > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " PropertyCacheFile \ . java " / > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " PropertyCacheFileTest \ . java " / > 
 < suppress checks = " ClassFanOutComplexity " files = " [ \ \ / ] Main \ . java " / > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java 
 new file mode 100644 
 index 0000000 . . 6007e59 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java 
 @ @ - 0 , 0 + 1 , 327 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + import java . io . ByteArrayInputStream ; 
 + import java . io . ByteArrayOutputStream ; 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . io . InputStreamReader ; 
 + import java . io . LineNumberReader ; 
 + import java . nio . charset . StandardCharsets ; 
 + import java . text . MessageFormat ; 
 + import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 + import java . util . Collections ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + import java . util . Locale ; 
 + import java . util . Map ; 
 + import java . util . ResourceBundle ; 
 + import java . util . stream . Collectors ; 
 + 
 + import com . google . common . collect . MapDifference ; 
 + import com . google . common . collect . Maps ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 + 
 + public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport { 
 + 
 + protected final ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; 
 + 
 + protected static DefaultConfiguration createCheckConfig ( Class < ? > clazz ) { 
 + return new DefaultConfiguration ( clazz . getName ( ) ) ; 
 + } 
 + 
 + / * * 
 + * Creates { @ link Checker } instance based on the given { @ link Configuration } instance . 
 + * @ param checkConfig { @ link Configuration } instance . 
 + * @ return { @ link Checker } instance based on the given { @ link Configuration } instance . 
 + * @ throws Exception if an exception occurs during checker configuration . 
 + * / 
 + public Checker createChecker ( Configuration checkConfig ) 
 + throws Exception { 
 + final DefaultConfiguration dc = createCheckerConfig ( checkConfig ) ; 
 + final Checker checker = new Checker ( ) ; 
 + checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + checker . configure ( dc ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 + return checker ; 
 + } 
 + 
 + / * * 
 + * Creates { @ link DefaultConfiguration } for the { @ link Checker } 
 + * based on the given { @ link Configuration } instance . 
 + * @ param config { @ link Configuration } instance . 
 + * @ return { @ link DefaultConfiguration } for the { @ link Checker } 
 + * based on the given { @ link Configuration } instance . 
 + * / 
 + protected DefaultConfiguration createCheckerConfig ( Configuration config ) { 
 + final DefaultConfiguration dc = 
 + new DefaultConfiguration ( " configuration " ) ; 
 + final DefaultConfiguration twConf = createCheckConfig ( TreeWalker . class ) ; 
 + / / make sure that the tests always run with this charset 
 + dc . addAttribute ( " charset " , " UTF - 8 " ) ; 
 + dc . addChild ( twConf ) ; 
 + twConf . addChild ( config ) ; 
 + return dc ; 
 + } 
 + 
 + / * * 
 + * Returns canonical path for the file with the given file name . 
 + * The path is formed base on the non - compilable resources location . 
 + * This implementation uses ' src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / ' 
 + * as a non - compilable resource location . 
 + * @ param filename file name . 
 + * @ return canonical path for the file with the given file name . 
 + * @ throws IOException if I / O exception occurs while forming the path . 
 + * / 
 + protected final String getNonCompilablePath ( String filename ) throws IOException { 
 + return new File ( " src / test / resources - noncompilable / " + getPackageLocation ( ) + " / " 
 + + filename ) . getCanonicalPath ( ) ; 
 + } 
 + 
 + / * * 
 + * Performs verification of the file with the given file name . Uses specified configuration . 
 + * Expected messages are represented by the array of strings . 
 + * This implementation uses overloaded 
 + * { @ link BaseCheckTestSupport # verify ( Checker , File [ ] , String , String . . . ) } method inside . 
 + * @ param aConfig configuration . 
 + * @ param fileName file name to verify . 
 + * @ param expected an array of expected messages . 
 + * @ throws Exception if exception occurs during verification process . 
 + * / 
 + protected void verify ( Configuration aConfig , String fileName , String . . . expected ) 
 + throws Exception { 
 + verify ( createChecker ( aConfig ) , fileName , fileName , expected ) ; 
 + } 
 + 
 + / * * 
 + * Performs verification of the file with the given file name . 
 + * Uses provided { @ link Checker } instance . 
 + * Expected messages are represented by the array of strings . 
 + * This implementation uses overloaded 
 + * { @ link BaseCheckTestSupport # verify ( Checker , String , String , String . . . ) } method inside . 
 + * @ param checker { @ link Checker } instance . 
 + * @ param fileName file name to verify . 
 + * @ param expected an array of expected messages . 
 + * @ throws Exception if exception occurs during verification process . 
 + * / 
 + protected void verify ( Checker checker , String fileName , String . . . expected ) 
 + throws Exception { 
 + verify ( checker , fileName , fileName , expected ) ; 
 + } 
 + 
 + / * * 
 + * Performs verification of the file with the given file name . 
 + * Uses provided { @ link Checker } instance . 
 + * Expected messages are represented by the array of strings . 
 + * This implementation uses overloaded 
 + * { @ link BaseCheckTestSupport # verify ( Checker , File [ ] , String , String . . . ) } method inside . 
 + * @ param checker { @ link Checker } instance . 
 + * @ param processedFilename file name to verify . 
 + * @ param messageFileName message file name . 
 + * @ param expected an array of expected messages . 
 + * @ throws Exception if exception occurs during verification process . 
 + * / 
 + protected void verify ( Checker checker , 
 + String processedFilename , 
 + String messageFileName , 
 + String . . . expected ) 
 + throws Exception { 
 + verify ( checker , 
 + new File [ ] { new File ( processedFilename ) } , 
 + messageFileName , expected ) ; 
 + } 
 + 
 + / * * 
 + * We keep two verify methods with separate logic only for convenience of debugging 
 + * We have minimum amount of multi - file test cases 
 + * / 
 + protected void verify ( Checker checker , 
 + File [ ] processedFiles , 
 + String messageFileName , 
 + String . . . expected ) 
 + throws Exception { 
 + stream . flush ( ) ; 
 + final List < File > theFiles = new ArrayList < > ( ) ; 
 + Collections . addAll ( theFiles , processedFiles ) ; 
 + final int errs = checker . process ( theFiles ) ; 
 + 
 + / / process each of the lines 
 + final ByteArrayInputStream inputStream = 
 + new ByteArrayInputStream ( stream . toByteArray ( ) ) ; 
 + try ( LineNumberReader lnr = new LineNumberReader ( 
 + new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { 
 + 
 + final List < String > actuals = lnr . lines ( ) . limit ( expected . length ) 
 + . sorted ( ) . collect ( Collectors . toList ( ) ) ; 
 + Arrays . sort ( expected ) ; 
 + 
 + for ( int i = 0 ; i < expected . length ; i + + ) { 
 + final String expectedResult = messageFileName + " : " + expected [ i ] ; 
 + assertEquals ( " error message " + i , expectedResult , actuals . get ( i ) ) ; 
 + } 
 + 
 + assertEquals ( " unexpected output : " + lnr . readLine ( ) , 
 + expected . length , errs ) ; 
 + } 
 + 
 + checker . destroy ( ) ; 
 + } 
 + 
 + / * * 
 + * Performs verification of the given files . 
 + * @ param checker { @ link Checker } instance 
 + * @ param processedFiles files to process . 
 + * @ param expectedViolations a map of expected violations per files . 
 + * @ throws Exception if exception occurs during verification process . 
 + * / 
 + protected void verify ( Checker checker , 
 + File [ ] processedFiles , 
 + Map < String , List < String > > expectedViolations ) 
 + throws Exception { 
 + stream . flush ( ) ; 
 + final List < File > theFiles = new ArrayList < > ( ) ; 
 + Collections . addAll ( theFiles , processedFiles ) ; 
 + final int errs = checker . process ( theFiles ) ; 
 + 
 + / / process each of the lines 
 + final Map < String , List < String > > actualViolations = getActualViolations ( errs ) ; 
 + final Map < String , List < String > > realExpectedViolations = 
 + Maps . filterValues ( expectedViolations , input - > ! input . isEmpty ( ) ) ; 
 + final MapDifference < String , List < String > > violationDifferences = 
 + Maps . difference ( realExpectedViolations , actualViolations ) ; 
 + 
 + final Map < String , List < String > > missingViolations = 
 + violationDifferences . entriesOnlyOnLeft ( ) ; 
 + final Map < String , List < String > > unexpectedViolations = 
 + violationDifferences . entriesOnlyOnRight ( ) ; 
 + final Map < String , MapDifference . ValueDifference < List < String > > > differingViolations = 
 + violationDifferences . entriesDiffering ( ) ; 
 + 
 + final StringBuilder message = new StringBuilder ( ) ; 
 + if ( ! missingViolations . isEmpty ( ) ) { 
 + message . append ( " missing violations : " ) . append ( missingViolations ) ; 
 + } 
 + if ( ! unexpectedViolations . isEmpty ( ) ) { 
 + if ( message . length ( ) > 0 ) { 
 + message . append ( ' \ n ' ) ; 
 + } 
 + message . append ( " unexpected violations : " ) . append ( unexpectedViolations ) ; 
 + } 
 + if ( ! differingViolations . isEmpty ( ) ) { 
 + if ( message . length ( ) > 0 ) { 
 + message . append ( ' \ n ' ) ; 
 + } 
 + message . append ( " differing violations : " ) . append ( differingViolations ) ; 
 + } 
 + 
 + assertTrue ( message . toString ( ) , 
 + missingViolations . isEmpty ( ) 
 + & & unexpectedViolations . isEmpty ( ) 
 + & & differingViolations . isEmpty ( ) ) ; 
 + 
 + checker . destroy ( ) ; 
 + } 
 + 
 + private Map < String , List < String > > getActualViolations ( int errorCount ) throws IOException { 
 + / / process each of the lines 
 + final ByteArrayInputStream inputStream = 
 + new ByteArrayInputStream ( stream . toByteArray ( ) ) ; 
 + 
 + try ( LineNumberReader lnr = new LineNumberReader ( 
 + new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { 
 + 
 + final Map < String , List < String > > actualViolations = new HashMap < > ( ) ; 
 + for ( String line = lnr . readLine ( ) ; line ! = null & & lnr . getLineNumber ( ) < = errorCount ; 
 + line = lnr . readLine ( ) ) { 
 + / / have at least 2 characters before the splitting colon , 
 + / / to not split after the drive letter on windows 
 + final String [ ] actualViolation = line . split ( " ( ? < = . { 2 } ) : " , 2 ) ; 
 + final String actualViolationFileName = actualViolation [ 0 ] ; 
 + final String actualViolationMessage = actualViolation [ 1 ] ; 
 + 
 + List < String > actualViolationsPerFile = 
 + actualViolations . get ( actualViolationFileName ) ; 
 + if ( actualViolationsPerFile = = null ) { 
 + actualViolationsPerFile = new ArrayList < > ( ) ; 
 + actualViolations . put ( actualViolationFileName , actualViolationsPerFile ) ; 
 + } 
 + actualViolationsPerFile . add ( actualViolationMessage ) ; 
 + } 
 + 
 + return actualViolations ; 
 + } 
 + } 
 + 
 + / * * 
 + * Gets the check message ' as is ' from appropriate ' messages . properties ' 
 + * file . 
 + * 
 + * @ param messageKey the key of message in ' messages . properties ' file . 
 + * @ param arguments the arguments of message in ' messages . properties ' file . 
 + * / 
 + protected String getCheckMessage ( String messageKey , Object . . . arguments ) { 
 + return internalGetCheckMessage ( getMessageBundle ( ) , messageKey , arguments ) ; 
 + } 
 + 
 + / * * 
 + * Gets the check message ' as is ' from appropriate ' messages . properties ' 
 + * file . 
 + * 
 + * @ param messageBundle the bundle name . 
 + * @ param messageKey the key of message in ' messages . properties ' file . 
 + * @ param arguments the arguments of message in ' messages . properties ' file . 
 + * / 
 + private static String internalGetCheckMessage ( 
 + String messageBundle , String messageKey , Object . . . arguments ) { 
 + final ResourceBundle resourceBundle = ResourceBundle . getBundle ( 
 + messageBundle , 
 + Locale . getDefault ( ) , 
 + Thread . currentThread ( ) . getContextClassLoader ( ) , 
 + new LocalizedMessage . Utf8Control ( ) ) ; 
 + final String pattern = resourceBundle . getString ( messageKey ) ; 
 + final MessageFormat formatter = new MessageFormat ( pattern , Locale . ROOT ) ; 
 + return formatter . format ( arguments ) ; 
 + } 
 + 
 + private String getMessageBundle ( ) { 
 + final String className = getClass ( ) . getName ( ) ; 
 + return getMessageBundle ( className ) ; 
 + } 
 + 
 + private static String getMessageBundle ( String className ) { 
 + final String messageBundle ; 
 + final String messages = " messages " ; 
 + final int endIndex = className . lastIndexOf ( ' . ' ) ; 
 + if ( endIndex < 0 ) { 
 + messageBundle = messages ; 
 + } 
 + else { 
 + final String packageName = className . substring ( 0 , endIndex ) ; 
 + messageBundle = packageName + " . " + messages ; 
 + } 
 + return messageBundle ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java 
 index 971f916 . . 5bc5226 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheckTest . java 
 @ @ - 21 , 32 + 21 , 19 @ @ package com . puppycrawl . tools . checkstyle . checks . annotation ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . annotation . PackageAnnotationCheck . MSG _ KEY ; 
 
 - import java . io . File ; 
 - import java . io . IOException ; 
 - 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 - public class PackageAnnotationCheckTest extends BaseCheckTestSupport { 
 - @ Override 
 - protected String getPath ( String filename ) throws IOException { 
 - return super . getPath ( " checks " + File . separator 
 - + " annotation " + File . separator 
 - + " packageannotation " + File . separator 
 - + filename ) ; 
 - } 
 + public class PackageAnnotationCheckTest extends AbstractModuleTestSupport { 
 
 @ Override 
 - protected String getNonCompilablePath ( String filename ) throws IOException { 
 - return super . getNonCompilablePath ( " checks " + File . separator 
 - + " annotation " + File . separator 
 - + " packageannotation " + File . separator 
 - + filename ) ; 
 + protected String getPackageLocation ( ) { 
 + return " com / puppycrawl / tools / checkstyle / checks / annotation / packageannotation " ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java 
 index d9607e7 . . ae9988e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java 
 @ @ - 23 , 24 + 23 , 20 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . FileTabCharacter 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . FileTabCharacterCheck . MSG _ FILE _ CONTAINS _ TAB ; 
 
 import java . io . File ; 
 - import java . io . IOException ; 
 
 import org . junit . Test ; 
 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . Definitions ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 
 public class FileTabCharacterCheckTest 
 - extends BaseCheckTestSupport { 
 + extends AbstractModuleTestSupport { 
 @ Override 
 - protected String getPath ( String filename ) throws IOException { 
 - return super . getPath ( " checks " + File . separator 
 - + " whitespace " + File . separator 
 - + " filetabcharacter " + File . separator 
 - + filename ) ; 
 + protected String getPackageLocation ( ) { 
 + return " com / puppycrawl / tools / checkstyle / checks / whitespace / filetabcharacter " ; 
 } 
 
 @ Override 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 index bd88f1d . . 386df36 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 @ @ - 27 , 8 + 27 , 6 @ @ import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 
 - import java . io . File ; 
 - import java . io . IOException ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 
 @ @ - 36 , 14 + 34 , 14 @ @ import org . junit . Before ; 
 import org . junit . Test ; 
 
 import antlr . CommonHiddenStreamToken ; 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class GenericWhitespaceCheckTest 
 - extends BaseCheckTestSupport { 
 + extends AbstractModuleTestSupport { 
 private DefaultConfiguration checkConfig ; 
 
 @ Before 
 @ @ - 54 , 15 + 52 , 8 @ @ public class GenericWhitespaceCheckTest 
 } 
 
 @ Override 
 - protected String getPath ( String filename ) throws IOException { 
 - return super . getPath ( " checks " + File . separator 
 - + " whitespace " + File . separator + " genericwhitespace " + File . separator + filename ) ; 
 - } 
 - 
 - @ Override 
 - protected String getNonCompilablePath ( String filename ) throws IOException { 
 - return super . getNonCompilablePath ( " checks " + File . separator 
 - + " whitespace " + File . separator + " genericwhitespace " + File . separator + filename ) ; 
 + protected String getPackageLocation ( ) { 
 + return " com / puppycrawl / tools / checkstyle / checks / whitespace / genericwhitespace " ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 index 42ee4d7 . . b739f38 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 @ @ - 26 , 24 + 26 , 19 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . AbstractParenPad 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 - import java . io . File ; 
 - import java . io . IOException ; 
 - 
 import org . junit . Test ; 
 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class ParenPadCheckTest 
 - extends BaseCheckTestSupport { 
 + extends AbstractModuleTestSupport { 
 + 
 @ Override 
 - protected String getPath ( String filename ) throws IOException { 
 - return super . getPath ( " checks " + File . separator 
 - + " whitespace " + File . separator 
 - + " parenpad " + File . separator 
 - + filename ) ; 
 + protected String getPackageLocation ( ) { 
 + return " com / puppycrawl / tools / checkstyle / checks / whitespace / parenpad " ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 index a81ac42 . . 798a11f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 
 + import com . puppycrawl . tools . checkstyle . api . AnnotationUtility ; 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 28 , 6 + 29 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * Checks the number of parameters that a method or constructor has . 
 * The default allowable number of parameters is 7 . 
 * To change the number of allowable parameters , set property max . 
 + * Allows to ignore number of parameters for methods with 
 + * & # 064 ; { @ link java . lang . Override } annotation . 
 * < / p > 
 * < p > 
 * An example of how to configure the check is : 
 @ @ - 36 , 26 + 39 , 48 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * & lt ; module name = " ParameterNumber " / & gt ; 
 * < / pre > 
 * < p > 
 - * An example of how to configure the check to allow 10 parameters is : 
 + * An example of how to configure the check to allow 10 parameters 
 + * and ignoring parameters for methods with & # 064 ; { @ link java . lang . Override } 
 + * annotation is : 
 * < / p > 
 * < pre > 
 * & lt ; module name = " ParameterNumber " & gt ; 
 * & lt ; property name = " max " value = " 10 " / & gt ; 
 + * & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 - 
 + * Java code that will be ignored : 
 + * < pre > 
 + * < code > 
 + * 
 + * & # 064 ; Override 
 + * public void needsLotsOfParameters ( int a , 
 + * int b , int c , int d , int e , int f , int g , int h ) { 
 + * . . . 
 + * } 
 + * < / code > 
 + * < / pre > 
 * @ author Oliver Burn 
 * @ version 1 . 0 
 * / 
 public class ParameterNumberCheck 
 extends Check 
 { 
 + / * * { @ link Override Override } annotation name * / 
 + private static final String OVERRIDE = " Override " ; 
 + 
 + / * * fully - qualified { @ link Override Override } annotation name * / 
 + private static final String FQ _ OVERRIDE = " java . lang . " + OVERRIDE ; 
 + 
 / * * default maximum number of allowed parameters * / 
 private static final int DEFAULT _ MAX _ PARAMETERS = 7 ; 
 
 / * * the maximum number of allowed parameters * / 
 private int mMax = DEFAULT _ MAX _ PARAMETERS ; 
 
 + / * * ignore overridden methods * / 
 + private boolean mIgnoreOverriddenMethods ; 
 + 
 / * * 
 * Sets the maximum number of allowed parameters . 
 * @ param aMax the max allowed parameters 
 @ @ - 65 , 6 + 90 , 16 @ @ public class ParameterNumberCheck 
 mMax = aMax ; 
 } 
 
 + / * * 
 + * Ignore number of parameters for methods with 
 + * & # 064 ; { @ link java . lang . Override } annotation . 
 + * @ param aIgnoreOverriddenMethods set ignore overridden methods 
 + * / 
 + public void setIgnoreOverriddenMethods ( boolean aIgnoreOverriddenMethods ) 
 + { 
 + mIgnoreOverriddenMethods = aIgnoreOverriddenMethods ; 
 + } 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) 
 { 
 @ @ - 76 , 9 + 111 , 23 @ @ public class ParameterNumberCheck 
 { 
 final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 final int count = params . getChildCount ( TokenTypes . PARAMETER _ DEF ) ; 
 - if ( count > mMax ) { 
 + if ( count > mMax & & ! ignoreNumberOfParameters ( aAST ) ) { 
 final DetailAST name = aAST . findFirstToken ( TokenTypes . IDENT ) ; 
 log ( name . getLineNo ( ) , name . getColumnNo ( ) , " maxParam " , mMax , count ) ; 
 } 
 } 
 + 
 + / * * Determine whether to ignore number of parameters for the method . 
 + * 
 + * @ param aAST the token to process 
 + * @ return true if this is overridden method and number of parameters should be ignored 
 + * false otherwise 
 + * / 
 + private boolean ignoreNumberOfParameters ( DetailAST aAST ) 
 + { 
 + / / if you override a method , you have no power over the number of parameters 
 + return mIgnoreOverriddenMethods 
 + & & ( AnnotationUtility . containsAnnotation ( aAST , OVERRIDE ) 
 + | | AnnotationUtility . containsAnnotation ( aAST , FQ _ OVERRIDE ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 index 7d293f2 . . 674b2b5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 @ @ - 63 , 4 + 63 , 17 @ @ public class ParameterNumberCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void shouldIgnoreMethodsWithOverrideAnnotation ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ParameterNumberCheck . class ) ; 
 + checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; 
 + final String [ ] expected = { 
 + " 6 : 10 : More than 7 parameters ( found 8 ) . " , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputParameterNumberCheck . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java 
 new file mode 100644 
 index 0000000 . . e90969d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + class InputParameterNumberCheckBase 
 + { 
 + / / method with many parameters 
 + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + 
 + } 
 + } 
 + 
 + public class InputParameterNumberCheck extends InputParameterNumberCheckBase 
 + { 
 + @ Override 
 + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ sizes . xml b / src / xdocs / config _ sizes . xml 
 index 5ece323 . . d75c39e 100644 
 - - - a / src / xdocs / config _ sizes . xml 
 + + + b / src / xdocs / config _ sizes . xml 
 @ @ - 411 , 6 + 411 , 12 @ @ 
 < td > 7 < / td > 
 < / tr > 
 < tr > 
 + < td > ignoreOverriddenMethods < / td > 
 + < td > Ignore number of parameters for methods with @ Override annotation < / td > 
 + < td > < a href = " property _ types . html # boolean " > boolean < / a > < / td > 
 + < td > false < / td > 
 + < / tr > 
 + < tr > 
 < td > tokens < / td > 
 < td > declarations to check < / td > 
 
 @ @ - 448 , 6 + 454 , 28 @ @ 
 & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 + < p > 
 + To configure the check to ignore number of parameters for methods with @ Override or @ java . lang . Override annotation . 
 + < / p > 
 + < p > 
 + Rationale : developer may need to override method with many parameters from 3 - rd party library . 
 + In this case developer has no control over number of parameters . 
 + < / p > 
 + < source > 
 + & lt ; module name = " ParameterNumber " & gt ; 
 + & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; 
 + & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < p > 
 + Java code example 
 + < / p > 
 + < source > 
 + @ Override 
 + public void needsLotsOfParameters ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + . . . 
 + } 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Package " >
