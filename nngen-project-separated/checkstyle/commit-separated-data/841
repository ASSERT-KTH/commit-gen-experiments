BLEU SCORE: 0.019146030690102508

TEST MSG: Issue # 3496 : Enforce ReturnCount max = 1 in com . google . checkstyle . test . base package
GENERATED MSG: rename fields in ConfigurationBuilder and BaseCheckTestSupport

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 4d5f4d7 . . 123730d 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 94 , 5 + 94 , 5 @ @ <nl> < suppress id = " returnCountMaxOne " files = " . * [ \ \ / ] ant [ \ \ / ] | . * [ \ \ / ] filters [ \ \ / ] | . * [ \ \ / ] api [ \ \ / ] | . * [ \ \ / ] annotation [ \ \ / ] | <nl> | . * [ \ \ / ] coding [ \ \ / ] | . * [ \ \ / ] design [ \ \ / ] | . * [ \ \ / ] imports [ \ \ / ] | . * [ \ \ / ] indentation [ \ \ / ] | . * [ \ \ / ] javadoc [ \ \ / ] | <nl> | . * [ \ \ / ] naming [ \ \ / ] | . * [ \ \ / ] regexp [ \ \ / ] | . * [ \ \ / ] sizes [ \ \ / ] | . * [ \ \ / ] whitespace [ \ \ / ] | . * [ \ \ / ] doclets [ \ \ / ] | . * [ \ \ / ] gui [ \ \ / ] | <nl> - | . * [ \ \ / ] utils [ \ \ / ] | . * [ \ \ / ] doclets [ \ \ / ] | . * [ \ \ / ] internal [ \ \ / ] | | . * [ \ \ / ] base [ \ \ / ] | . * [ \ \ / ] checkstyle [ \ \ / ] . * \ . java | . * [ \ \ / ] checks [ \ \ / ] . * \ . java " / > <nl> + | . * [ \ \ / ] utils [ \ \ / ] | . * [ \ \ / ] doclets [ \ \ / ] | . * [ \ \ / ] internal [ \ \ / ] | . * [ \ \ / ] checkstyle [ \ \ / ] . * \ . java | . * [ \ \ / ] checks [ \ \ / ] . * \ . java " / > <nl> < / suppressions > <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> index caf9fb8 . . fa83159 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> @ @ - 218 , 16 + 218 , 18 @ @ public class BaseCheckTestSupport { <nl> * / <nl> protected String getCheckMessage ( Class < ? extends AbstractViolationReporter > aClass , <nl> String messageKey , Object . . . arguments ) { <nl> - final Properties pr = new Properties ( ) ; <nl> + String checkMessage ; <nl> try { <nl> + final Properties pr = new Properties ( ) ; <nl> pr . load ( aClass . getResourceAsStream ( " messages . properties " ) ) ; <nl> + final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , <nl> + Locale . ROOT ) ; <nl> + checkMessage = formatter . format ( arguments ) ; <nl> } <nl> catch ( IOException ex ) { <nl> - return null ; <nl> + checkMessage = null ; <nl> } <nl> - final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , <nl> - Locale . ROOT ) ; <nl> - return formatter . format ( arguments ) ; <nl> + return checkMessage ; <nl> } <nl> <nl> / * * <nl> @ @ - 237 , 13 + 239 , 15 @ @ public class BaseCheckTestSupport { <nl> * / <nl> protected String getCheckMessage ( Map < String , String > messages , String messageKey , <nl> Object . . . arguments ) { <nl> + String checkMessage = null ; <nl> for ( Map . Entry < String , String > entry : messages . entrySet ( ) ) { <nl> if ( messageKey . equals ( entry . getKey ( ) ) ) { <nl> final MessageFormat formatter = new MessageFormat ( entry . getValue ( ) , Locale . ROOT ) ; <nl> - return formatter . format ( arguments ) ; <nl> + checkMessage = formatter . format ( arguments ) ; <nl> + break ; <nl> } <nl> } <nl> - return null ; <nl> + return checkMessage ; <nl> } <nl> <nl> / * * <nl> @ @ - 319 , 11 + 323 , 12 @ @ public class BaseCheckTestSupport { <nl> } <nl> <nl> private static String removeDeviceFromPathOnWindows ( String path ) { <nl> + String fixedPath = path ; <nl> final String os = System . getProperty ( " os . name " , " Unix " ) ; <nl> if ( os . startsWith ( " Windows " ) ) { <nl> - return path . substring ( path . indexOf ( ' : ' ) + 1 ) ; <nl> + fixedPath = path . substring ( path . indexOf ( ' : ' ) + 1 ) ; <nl> } <nl> - return path ; <nl> + return fixedPath ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseIndentationCheckSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseIndentationCheckSupport . java <nl> index c03e795 . . a35b073 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / BaseIndentationCheckSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / BaseIndentationCheckSupport . java <nl> @ @ - 202 , 12 + 202 , 14 @ @ public class BaseIndentationCheckSupport extends BaseCheckTestSupport { <nl> } <nl> <nl> private static int getLineStart ( String line , final int tabWidth ) { <nl> + int lineStart = 0 ; <nl> for ( int index = 0 ; index < line . length ( ) ; + + index ) { <nl> if ( ! Character . isWhitespace ( line . charAt ( index ) ) ) { <nl> - return CommonUtils . lengthExpandedTabs ( line , index , tabWidth ) ; <nl> + lineStart = CommonUtils . lengthExpandedTabs ( line , index , tabWidth ) ; <nl> + break ; <nl> } <nl> } <nl> - return 0 ; <nl> + return lineStart ; <nl> } <nl> <nl> private enum CommentType {
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java <nl> index 483f0ed . . a11b953 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java <nl> @ @ - 48 , 6 + 48 , 11 @ @ class MultilineDetector { <nl> * file . <nl> * / <nl> public static final String EMPTY = " regexp . empty " ; <nl> + / * * <nl> + * A key is pointing to the warning message text in " messages . properties " <nl> + * file . <nl> + * / <nl> + public static final String STACKOVERFLOW = " regexp . StackOverflowError " ; <nl> <nl> / * * The detection options to use . * / <nl> private final DetectorOptions options ; <nl> @ @ - 86 , 27 + 91 , 39 @ @ class MultilineDetector { <nl> <nl> / * * Method that finds the matches . * / <nl> private void findMatch ( ) { <nl> - boolean foundMatch = matcher . find ( ) ; <nl> - while ( foundMatch ) { <nl> - final LineColumn start = text . lineColumn ( matcher . start ( ) ) ; <nl> - final LineColumn end = text . lineColumn ( matcher . end ( ) ) ; <nl> - <nl> - if ( ! options . getSuppressor ( ) . shouldSuppress ( start . getLine ( ) , <nl> - start . getColumn ( ) , end . getLine ( ) , end . getColumn ( ) ) ) { <nl> - currentMatches + + ; <nl> - if ( currentMatches > options . getMaximum ( ) ) { <nl> - if ( " " . equals ( options . getMessage ( ) ) ) { <nl> - options . getReporter ( ) . log ( start . getLine ( ) , <nl> - REGEXP _ EXCEEDED , matcher . pattern ( ) . toString ( ) ) ; <nl> - } <nl> - else { <nl> - options . getReporter ( ) <nl> - . log ( start . getLine ( ) , options . getMessage ( ) ) ; <nl> + try { <nl> + boolean foundMatch = matcher . find ( ) ; <nl> + <nl> + while ( foundMatch ) { <nl> + final LineColumn start = text . lineColumn ( matcher . start ( ) ) ; <nl> + final LineColumn end = text . lineColumn ( matcher . end ( ) ) ; <nl> + <nl> + if ( ! options . getSuppressor ( ) . shouldSuppress ( start . getLine ( ) , <nl> + start . getColumn ( ) , end . getLine ( ) , end . getColumn ( ) ) ) { <nl> + currentMatches + + ; <nl> + if ( currentMatches > options . getMaximum ( ) ) { <nl> + if ( " " . equals ( options . getMessage ( ) ) ) { <nl> + options . getReporter ( ) . log ( start . getLine ( ) , <nl> + REGEXP _ EXCEEDED , matcher . pattern ( ) . toString ( ) ) ; <nl> + } <nl> + else { <nl> + options . getReporter ( ) <nl> + . log ( start . getLine ( ) , options . getMessage ( ) ) ; <nl> + } <nl> } <nl> } <nl> + foundMatch = matcher . find ( ) ; <nl> } <nl> - foundMatch = matcher . find ( ) ; <nl> } <nl> + / / see http : / / bugs . java . com / bugdatabase / view _ bug . do ? bug _ id = 6337993 et al . <nl> + catch ( StackOverflowError e ) { <nl> + / / OK http : / / blog . igorminar . com / 2008 / 05 / catching - stackoverflowerror - and - bug - in . html <nl> + / / http : / / programmers . stackexchange . com / questions / <nl> + / / 209099 / is - it - ever - okay - to - catch - stackoverflowerror - in - java <nl> + options . getReporter ( ) . log ( 0 , STACKOVERFLOW , matcher . pattern ( ) . toString ( ) ) ; <nl> + return ; <nl> + } <nl> + <nl> } <nl> <nl> / * * Perform processing at the end of a set of lines . * / <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties <nl> index e9d7c33 . . de1d4e1 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties <nl> @ @ - 6 , 3 + 6 , 5 @ @ required . regexp = Required pattern ' ' { 0 } ' ' missing in file . <nl> duplicate . regexp = Found duplicate pattern ' ' { 0 } ' ' . <nl> <nl> regexp . empty = Empty ( null ) pattern . <nl> + regexp . StackOverflowError = java . util . regex . Matcher caused a java . lang . StackOverflowError for pattern ' ' { 1 } ' ' ( you may be scanning a binary file instead of text ? ) . <nl> + <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> index d210063 . . b6556f6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import java . io . File ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . REGEXP _ EXCEEDED ; <nl> import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . EMPTY ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . STACKOVERFLOW ; <nl> <nl> public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { <nl> @ Rule public TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ; <nl> @ @ - 115 , 7 + 116 , 6 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { <nl> <nl> @ Test <nl> public void testDefaultConfiguration ( ) throws Exception { <nl> - final DefaultConfiguration checkConfig = createCheckConfig ( RegexpMultilineCheck . class ) ; <nl> final String [ ] expected = { <nl> } ; <nl> verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> @ @ - 129 , 4 + 129 , 30 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { <nl> } ; <nl> verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testNoStackOverflowError ( ) throws Exception { <nl> + / / http : / / madbean . com / 2004 / mb2004 - 20 / <nl> + checkConfig . addAttribute ( " format " , " ( x | y ) * " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 0 : " + getCheckMessage ( STACKOVERFLOW ) , <nl> + } ; <nl> + <nl> + final File file = temporaryFolder . newFile ( ) ; <nl> + Files . write ( makeLargeXYString ( ) , file , Charsets . UTF _ 8 ) ; <nl> + <nl> + verify ( checkConfig , file . getPath ( ) , expected ) ; <nl> + } <nl> + <nl> + private CharSequence makeLargeXYString ( ) { <nl> + / / now needs 10 ' 000 or 100 ' 000 , as just 1000 is no longer enough today to provoke the StackOverflowError <nl> + final int size = 100000 ; <nl> + StringBuffer largeString = new StringBuffer ( size ) ; <nl> + for ( int i = 0 ; i < size / 2 ; i + + ) { <nl> + largeString . append ( " xy " ) ; <nl> + } <nl> + return largeString ; <nl> + } <nl> + <nl> }

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 4d5f4d7 . . 123730d 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 94 , 5 + 94 , 5 @ @ 
 < suppress id = " returnCountMaxOne " files = " . * [ \ \ / ] ant [ \ \ / ] | . * [ \ \ / ] filters [ \ \ / ] | . * [ \ \ / ] api [ \ \ / ] | . * [ \ \ / ] annotation [ \ \ / ] | 
 | . * [ \ \ / ] coding [ \ \ / ] | . * [ \ \ / ] design [ \ \ / ] | . * [ \ \ / ] imports [ \ \ / ] | . * [ \ \ / ] indentation [ \ \ / ] | . * [ \ \ / ] javadoc [ \ \ / ] | 
 | . * [ \ \ / ] naming [ \ \ / ] | . * [ \ \ / ] regexp [ \ \ / ] | . * [ \ \ / ] sizes [ \ \ / ] | . * [ \ \ / ] whitespace [ \ \ / ] | . * [ \ \ / ] doclets [ \ \ / ] | . * [ \ \ / ] gui [ \ \ / ] | 
 - | . * [ \ \ / ] utils [ \ \ / ] | . * [ \ \ / ] doclets [ \ \ / ] | . * [ \ \ / ] internal [ \ \ / ] | | . * [ \ \ / ] base [ \ \ / ] | . * [ \ \ / ] checkstyle [ \ \ / ] . * \ . java | . * [ \ \ / ] checks [ \ \ / ] . * \ . java " / > 
 + | . * [ \ \ / ] utils [ \ \ / ] | . * [ \ \ / ] doclets [ \ \ / ] | . * [ \ \ / ] internal [ \ \ / ] | . * [ \ \ / ] checkstyle [ \ \ / ] . * \ . java | . * [ \ \ / ] checks [ \ \ / ] . * \ . java " / > 
 < / suppressions > 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 index caf9fb8 . . fa83159 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 @ @ - 218 , 16 + 218 , 18 @ @ public class BaseCheckTestSupport { 
 * / 
 protected String getCheckMessage ( Class < ? extends AbstractViolationReporter > aClass , 
 String messageKey , Object . . . arguments ) { 
 - final Properties pr = new Properties ( ) ; 
 + String checkMessage ; 
 try { 
 + final Properties pr = new Properties ( ) ; 
 pr . load ( aClass . getResourceAsStream ( " messages . properties " ) ) ; 
 + final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , 
 + Locale . ROOT ) ; 
 + checkMessage = formatter . format ( arguments ) ; 
 } 
 catch ( IOException ex ) { 
 - return null ; 
 + checkMessage = null ; 
 } 
 - final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , 
 - Locale . ROOT ) ; 
 - return formatter . format ( arguments ) ; 
 + return checkMessage ; 
 } 
 
 / * * 
 @ @ - 237 , 13 + 239 , 15 @ @ public class BaseCheckTestSupport { 
 * / 
 protected String getCheckMessage ( Map < String , String > messages , String messageKey , 
 Object . . . arguments ) { 
 + String checkMessage = null ; 
 for ( Map . Entry < String , String > entry : messages . entrySet ( ) ) { 
 if ( messageKey . equals ( entry . getKey ( ) ) ) { 
 final MessageFormat formatter = new MessageFormat ( entry . getValue ( ) , Locale . ROOT ) ; 
 - return formatter . format ( arguments ) ; 
 + checkMessage = formatter . format ( arguments ) ; 
 + break ; 
 } 
 } 
 - return null ; 
 + return checkMessage ; 
 } 
 
 / * * 
 @ @ - 319 , 11 + 323 , 12 @ @ public class BaseCheckTestSupport { 
 } 
 
 private static String removeDeviceFromPathOnWindows ( String path ) { 
 + String fixedPath = path ; 
 final String os = System . getProperty ( " os . name " , " Unix " ) ; 
 if ( os . startsWith ( " Windows " ) ) { 
 - return path . substring ( path . indexOf ( ' : ' ) + 1 ) ; 
 + fixedPath = path . substring ( path . indexOf ( ' : ' ) + 1 ) ; 
 } 
 - return path ; 
 + return fixedPath ; 
 } 
 
 / * * 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseIndentationCheckSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseIndentationCheckSupport . java 
 index c03e795 . . a35b073 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / BaseIndentationCheckSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / BaseIndentationCheckSupport . java 
 @ @ - 202 , 12 + 202 , 14 @ @ public class BaseIndentationCheckSupport extends BaseCheckTestSupport { 
 } 
 
 private static int getLineStart ( String line , final int tabWidth ) { 
 + int lineStart = 0 ; 
 for ( int index = 0 ; index < line . length ( ) ; + + index ) { 
 if ( ! Character . isWhitespace ( line . charAt ( index ) ) ) { 
 - return CommonUtils . lengthExpandedTabs ( line , index , tabWidth ) ; 
 + lineStart = CommonUtils . lengthExpandedTabs ( line , index , tabWidth ) ; 
 + break ; 
 } 
 } 
 - return 0 ; 
 + return lineStart ; 
 } 
 
 private enum CommentType {

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java 
 index 483f0ed . . a11b953 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java 
 @ @ - 48 , 6 + 48 , 11 @ @ class MultilineDetector { 
 * file . 
 * / 
 public static final String EMPTY = " regexp . empty " ; 
 + / * * 
 + * A key is pointing to the warning message text in " messages . properties " 
 + * file . 
 + * / 
 + public static final String STACKOVERFLOW = " regexp . StackOverflowError " ; 
 
 / * * The detection options to use . * / 
 private final DetectorOptions options ; 
 @ @ - 86 , 27 + 91 , 39 @ @ class MultilineDetector { 
 
 / * * Method that finds the matches . * / 
 private void findMatch ( ) { 
 - boolean foundMatch = matcher . find ( ) ; 
 - while ( foundMatch ) { 
 - final LineColumn start = text . lineColumn ( matcher . start ( ) ) ; 
 - final LineColumn end = text . lineColumn ( matcher . end ( ) ) ; 
 - 
 - if ( ! options . getSuppressor ( ) . shouldSuppress ( start . getLine ( ) , 
 - start . getColumn ( ) , end . getLine ( ) , end . getColumn ( ) ) ) { 
 - currentMatches + + ; 
 - if ( currentMatches > options . getMaximum ( ) ) { 
 - if ( " " . equals ( options . getMessage ( ) ) ) { 
 - options . getReporter ( ) . log ( start . getLine ( ) , 
 - REGEXP _ EXCEEDED , matcher . pattern ( ) . toString ( ) ) ; 
 - } 
 - else { 
 - options . getReporter ( ) 
 - . log ( start . getLine ( ) , options . getMessage ( ) ) ; 
 + try { 
 + boolean foundMatch = matcher . find ( ) ; 
 + 
 + while ( foundMatch ) { 
 + final LineColumn start = text . lineColumn ( matcher . start ( ) ) ; 
 + final LineColumn end = text . lineColumn ( matcher . end ( ) ) ; 
 + 
 + if ( ! options . getSuppressor ( ) . shouldSuppress ( start . getLine ( ) , 
 + start . getColumn ( ) , end . getLine ( ) , end . getColumn ( ) ) ) { 
 + currentMatches + + ; 
 + if ( currentMatches > options . getMaximum ( ) ) { 
 + if ( " " . equals ( options . getMessage ( ) ) ) { 
 + options . getReporter ( ) . log ( start . getLine ( ) , 
 + REGEXP _ EXCEEDED , matcher . pattern ( ) . toString ( ) ) ; 
 + } 
 + else { 
 + options . getReporter ( ) 
 + . log ( start . getLine ( ) , options . getMessage ( ) ) ; 
 + } 
 } 
 } 
 + foundMatch = matcher . find ( ) ; 
 } 
 - foundMatch = matcher . find ( ) ; 
 } 
 + / / see http : / / bugs . java . com / bugdatabase / view _ bug . do ? bug _ id = 6337993 et al . 
 + catch ( StackOverflowError e ) { 
 + / / OK http : / / blog . igorminar . com / 2008 / 05 / catching - stackoverflowerror - and - bug - in . html 
 + / / http : / / programmers . stackexchange . com / questions / 
 + / / 209099 / is - it - ever - okay - to - catch - stackoverflowerror - in - java 
 + options . getReporter ( ) . log ( 0 , STACKOVERFLOW , matcher . pattern ( ) . toString ( ) ) ; 
 + return ; 
 + } 
 + 
 } 
 
 / * * Perform processing at the end of a set of lines . * / 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties 
 index e9d7c33 . . de1d4e1 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / regexp / messages . properties 
 @ @ - 6 , 3 + 6 , 5 @ @ required . regexp = Required pattern ' ' { 0 } ' ' missing in file . 
 duplicate . regexp = Found duplicate pattern ' ' { 0 } ' ' . 
 
 regexp . empty = Empty ( null ) pattern . 
 + regexp . StackOverflowError = java . util . regex . Matcher caused a java . lang . StackOverflowError for pattern ' ' { 1 } ' ' ( you may be scanning a binary file instead of text ? ) . 
 + 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 index d210063 . . b6556f6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import java . io . File ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . REGEXP _ EXCEEDED ; 
 import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . EMPTY ; 
 + import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . STACKOVERFLOW ; 
 
 public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { 
 @ Rule public TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ; 
 @ @ - 115 , 7 + 116 , 6 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { 
 
 @ Test 
 public void testDefaultConfiguration ( ) throws Exception { 
 - final DefaultConfiguration checkConfig = createCheckConfig ( RegexpMultilineCheck . class ) ; 
 final String [ ] expected = { 
 } ; 
 verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 @ @ - 129 , 4 + 129 , 30 @ @ public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport { 
 } ; 
 verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testNoStackOverflowError ( ) throws Exception { 
 + / / http : / / madbean . com / 2004 / mb2004 - 20 / 
 + checkConfig . addAttribute ( " format " , " ( x | y ) * " ) ; 
 + 
 + final String [ ] expected = { 
 + " 0 : " + getCheckMessage ( STACKOVERFLOW ) , 
 + } ; 
 + 
 + final File file = temporaryFolder . newFile ( ) ; 
 + Files . write ( makeLargeXYString ( ) , file , Charsets . UTF _ 8 ) ; 
 + 
 + verify ( checkConfig , file . getPath ( ) , expected ) ; 
 + } 
 + 
 + private CharSequence makeLargeXYString ( ) { 
 + / / now needs 10 ' 000 or 100 ' 000 , as just 1000 is no longer enough today to provoke the StackOverflowError 
 + final int size = 100000 ; 
 + StringBuffer largeString = new StringBuffer ( size ) ; 
 + for ( int i = 0 ; i < size / 2 ; i + + ) { 
 + largeString . append ( " xy " ) ; 
 + } 
 + return largeString ; 
 + } 
 + 
 }
