BLEU SCORE: 0.023309208103306354

TEST MSG: Issue # 4384 : fix JavadocParagraph violation in JavadocTokenTypes
GENERATED MSG: patch # 2782630 - fixing javadoc errors that were corrected in patch provided by Martin von Gagern

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 46600a8 . . 39928c6 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 53 , 8 + 53 , 6 @ @ <nl> <nl> < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4983 - - > <nl> < suppress checks = " MissingDeprecated " files = " . * JavadocTokenTypes \ . java " / > <nl> - < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4384 - - > <nl> - < suppress checks = " JavadocParagraph " files = " . * JavadocTokenTypes \ . java " / > <nl> < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4984 - - > <nl> < suppress checks = " DeclarationOrder " files = " . * JavadocTokenTypes \ . java " / > <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java <nl> index 5c42037 . . 1d6db59 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java <nl> @ @ - 39 , 8 + 39 , 7 @ @ public final class JavadocTokenTypes { <nl> * Root node of any Javadoc comment . <nl> * Last child is always { @ link # EOF } . <nl> * <nl> - * < p > <nl> - * < b > Tree for example : < / b > <nl> + * < p > < b > Tree for example : < / b > < / p > <nl> * < pre > { @ code <nl> * JAVADOC [ 3x0 ] <nl> * | - - NEWLINE [ 3x0 ] : [ \ n ] <nl> @ @ - 67 , 9 + 66 , 9 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * Javadoc tag . <nl> * <nl> - * < p > Type of Javadoc tag is resolved by literal node that is first child of this node . <nl> + * < p > Type of Javadoc tag is resolved by literal node that is first child of this node . < / p > <nl> * <nl> - * < p > As literal could be : <nl> + * < p > As literal could be : < / p > <nl> * < ul > <nl> * < li > { @ link # RETURN _ LITERAL } < / li > <nl> * < li > { @ link # DEPRECATED _ LITERAL } < / li > <nl> @ @ - 86 , 8 + 85 , 7 @ @ public final class JavadocTokenTypes { <nl> * < li > or { @ link # CUSTOM _ NAME } if it is custom Javadoc tag . < / li > <nl> * < / ul > <nl> * <nl> - * < p > <nl> - * < b > Example < / b > <nl> + * < p > < b > Example < / b > < / p > <nl> * < pre > { @ code & # 64 ; param T The bar . } < / pre > <nl> * < b > Tree < / b > <nl> * < pre > { @ code <nl> @ @ - 107 , 9 + 105 , 9 @ @ public final class JavadocTokenTypes { <nl> * <nl> * < p > Type of Javadoc inline tag is resolved by literal node that is second child of this node . <nl> * First child is always { @ link # JAVADOC _ INLINE _ TAG _ START } and last node is always <nl> - * { @ link # JAVADOC _ INLINE _ TAG _ END } . <nl> + * { @ link # JAVADOC _ INLINE _ TAG _ END } . < / p > <nl> * <nl> - * < p > As literal could be : <nl> + * < p > As literal could be : < / p > <nl> * < ul > <nl> * < li > { @ link # CODE _ LITERAL } < / li > <nl> * < li > { @ link # DOC _ ROOT _ LITERAL } < / li > <nl> @ @ - 121 , 8 + 119 , 7 @ @ public final class JavadocTokenTypes { <nl> * < li > or { @ link # CUSTOM _ NAME } if it is custom Javadoc inline tag . < / li > <nl> * < / ul > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code { & # 64 ; link String } } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 142 , 10 + 139 , 9 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ return ' literal in @ return Javadoc tag . <nl> * <nl> - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } <nl> + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ return true if file exists } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 166 , 10 + 162 , 9 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' { @ literal @ } deprecated ' literal in { @ literal @ } deprecated Javadoc tag . <nl> * <nl> - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } <nl> + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ deprecated it is deprecated method } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 190 , 10 + 185 , 9 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ since ' literal in @ since Javadoc tag . <nl> * <nl> - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } <nl> + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ since 3 . 4 RELEASE } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 214 , 10 + 208 , 9 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ serialData ' literal in @ serialData Javadoc tag . <nl> * <nl> - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } <nl> + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ serialData two values of Integer type } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 239 , 15 + 232 , 14 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ serialField ' literal in @ serialField Javadoc tag . <nl> * <nl> - * < p > Such Javadoc tag can have three arguments : <nl> + * < p > Such Javadoc tag can have three arguments : < / p > <nl> * < ol > <nl> * < li > { @ link # FIELD _ NAME } < / li > <nl> * < li > { @ link # FIELD _ TYPE } < / li > <nl> * < li > { @ link # DESCRIPTION } < / li > <nl> * < / ol > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ serialField counter Integer objects counter } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 272 , 14 + 264 , 13 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ param ' literal in @ param Javadoc tag . <nl> * <nl> - * < p > Such Javadoc tag can have two arguments : <nl> + * < p > Such Javadoc tag can have two arguments : < / p > <nl> * < ol > <nl> * < li > { @ link # PARAMETER _ NAME } < / li > <nl> * < li > { @ link # DESCRIPTION } < / li > <nl> * < / ol > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ param T The bar . } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 302 , 10 + 293 , 9 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ see ' literal in @ see Javadoc tag . <nl> * <nl> - * < p > Such Javadoc tag can have one argument - { @ link # REFERENCE } <nl> + * < p > Such Javadoc tag can have one argument - { @ link # REFERENCE } < / p > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ see org . apache . utils . Lists . Comparator # compare ( Object ) } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 337 , 10 + 327 , 9 @ @ public final class JavadocTokenTypes { <nl> * ' @ see ' literal in @ see Javadoc tag . <nl> * <nl> * < p > Such Javadoc tag can have one argument - { @ link # REFERENCE } or { @ link # LITERAL _ EXCLUDE } <nl> - * or { @ link # LITERAL _ INCLUDE } <nl> + * or { @ link # LITERAL _ INCLUDE } < / p > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ serial include } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 350 , 8 + 339 , 7 @ @ public final class JavadocTokenTypes { <nl> * | - - LITERAL _ INCLUDE [ 3x8 ] : [ include ] <nl> * } < / pre > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ serial serialized company name } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 372 , 10 + 360 , 9 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ version ' literal in @ version Javadoc tag . <nl> * <nl> - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } <nl> + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ version 1 . 3 } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 396 , 10 + 383 , 9 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ exception ' literal in @ exception Javadoc tag . <nl> * <nl> - * < p > Such Javadoc tag can have two argument - { @ link # CLASS _ NAME } and { @ link # DESCRIPTION } <nl> + * < p > Such Javadoc tag can have two argument - { @ link # CLASS _ NAME } and { @ link # DESCRIPTION } < / p > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ exception SQLException if query is not correct } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 422 , 10 + 408 , 9 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ throws ' literal in @ throws Javadoc tag . <nl> * <nl> - * < p > Such Javadoc tag can have two argument - { @ link # CLASS _ NAME } and { @ link # DESCRIPTION } <nl> + * < p > Such Javadoc tag can have two argument - { @ link # CLASS _ NAME } and { @ link # DESCRIPTION } < / p > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ throws SQLException if query is not correct } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 448 , 10 + 433 , 9 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ author ' literal in @ author Javadoc tag . <nl> * <nl> - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } <nl> + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ author Baratali Izmailov } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 472 , 10 + 456 , 9 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * Name of custom Javadoc tag ( or Javadoc inline tag ) . <nl> * <nl> - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } <nl> + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ myJavadocTag some magic } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > { @ code <nl> @ @ - 491 , 8 + 474 , 7 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * First child of { @ link # JAVADOC _ INLINE _ TAG } that represents left curly brace ' { ' . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code { & # 64 ; code Comparable & lt ; E & gt ; } } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 509 , 8 + 491 , 7 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * Last child of { @ link # JAVADOC _ INLINE _ TAG } that represents right curly brace ' } ' . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code { & # 64 ; code Comparable & lt ; E & gt ; } } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 528 , 15 + 509 , 14 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ code ' literal in { & # 64 ; code } Javadoc inline tag . <nl> * <nl> - * < p > Such Javadoc inline tag can have such child nodes : <nl> + * < p > Such Javadoc inline tag can have such child nodes : < / p > <nl> * < ul > <nl> * < li > { @ link # NEWLINE } < / li > <nl> * < li > { @ link # WS } < / li > <nl> * < li > { @ link # TEXT } < / li > <nl> * < / ul > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code { & # 64 ; code Comparable & lt ; E & gt ; } } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 559 , 14 + 539 , 13 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ docRoot ' literal in { & # 64 ; docRoot } Javadoc inline tag . <nl> * <nl> - * < p > Such Javadoc inline tag does not have any arguments and can have such child nodes : <nl> + * < p > Such Javadoc inline tag does not have any arguments and can have such child nodes : < / p > <nl> * < ul > <nl> * < li > { @ link # NEWLINE } < / li > <nl> * < li > { @ link # WS } < / li > <nl> * < / ul > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code { & # 64 ; docRoot } } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 577 , 8 + 556 , 7 @ @ public final class JavadocTokenTypes { <nl> * } <nl> * < / pre > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code { & # 64 ; docRoot <nl> * } } < / pre > <nl> * < b > Tree : < / b > <nl> @ @ - 601 , 9 + 579 , 7 @ @ public final class JavadocTokenTypes { <nl> <nl> / * * <nl> * ' @ link ' literal in { & # 64 ; link } Javadoc inline tag . <nl> - * < p > <nl> - * Such Javadoc inline tag can have one argument - { @ link # REFERENCE } <nl> - * < / p > <nl> + * < p > Such Javadoc inline tag can have one argument - { @ link # REFERENCE } < / p > <nl> * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code { & # 64 ; link org . apache . utils . Lists . Comparator # compare ( Object ) } } < / pre > <nl> * < p > < b > Tree : < / b > < / p > <nl> @ @ - 639 , 14 + 615 , 13 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ inheritDoc ' literal in { & # 64 ; inheritDoc } Javadoc inline tag . <nl> * <nl> - * < p > Such Javadoc inline tag does not have any arguments and can have such child nodes : <nl> + * < p > Such Javadoc inline tag does not have any arguments and can have such child nodes : < / p > <nl> * < ul > <nl> * < li > { @ link # NEWLINE } < / li > <nl> * < li > { @ link # WS } < / li > <nl> * < / ul > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code { & # 64 ; inheritDoc } } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 667 , 10 + 642 , 9 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ linkplain ' literal in { & # 64 ; linkplain } Javadoc inline tag . <nl> * <nl> - * < p > Such Javadoc inline tag can have one argument - { @ link # REFERENCE } <nl> + * < p > Such Javadoc inline tag can have one argument - { @ link # REFERENCE } < / p > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code { & # 64 ; linkplain org . apache . utils . Lists . Comparator # compare ( Object ) compare } } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 707 , 15 + 681 , 14 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * ' @ literal ' literal in { & # 64 ; literal } Javadoc inline tag . <nl> * <nl> - * < p > Such Javadoc inline tag can have such child nodes : <nl> + * < p > Such Javadoc inline tag can have such child nodes : < / p > <nl> * < ul > <nl> * < li > { @ link # NEWLINE } < / li > <nl> * < li > { @ link # WS } < / li > <nl> * < li > { @ link # TEXT } < / li > <nl> * < / ul > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code { & # 64 ; literal # compare ( Object ) } } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 739 , 14 + 712 , 13 @ @ public final class JavadocTokenTypes { <nl> * ' @ value ' literal in { & # 64 ; value } Javadoc inline tag . <nl> * <nl> * < p > Such Javadoc inline tag has one argument { @ link # REFERENCE } <nl> - * and can have such child nodes : <nl> + * and can have such child nodes : < / p > <nl> * < ul > <nl> * < li > { @ link # NEWLINE } < / li > <nl> * < li > { @ link # WS } < / li > <nl> * < / ul > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code { & # 64 ; value Integer # MAX _ VALUE } } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 784 , 8 + 756 , 7 @ @ public final class JavadocTokenTypes { <nl> * Package definition in { @ link # REFERENCE } . <nl> * Package definition is lowercase part of REFERENCE and before a hash character ( # ) . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ see org . apache . utils . Lists . Comparator # compare ( Object ) } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 814 , 8 + 785 , 7 @ @ public final class JavadocTokenTypes { <nl> * Class definition is part of REFERENCE , that is started by capital letter <nl> * and before a hash character ( # ) . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ see org . apache . utils . Lists . Comparator # compare ( Object ) } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 844 , 8 + 814 , 7 @ @ public final class JavadocTokenTypes { <nl> * Dot separator is used between { @ link # PACKAGE } and { @ link # CLASS } ; between { @ link # CLASS } <nl> * and { @ link # CLASS } <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ see org . apache . utils . Lists . Comparator # compare ( Object ) } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 873 , 8 + 842 , 7 @ @ public final class JavadocTokenTypes { <nl> * Hash character in { @ link # REFERENCE } . <nl> * Hash character is used before specifying a class member . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ see org . apache . utils . Lists . Comparator # compare ( Object ) } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 902 , 8 + 870 , 7 @ @ public final class JavadocTokenTypes { <nl> * A class member in { @ link # REFERENCE } . <nl> * Class member is specified after { @ link # HASH } symbol . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ see org . apache . utils . Lists . Comparator # compare ( Object ) } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 934 , 8 + 901 , 7 @ @ public final class JavadocTokenTypes { <nl> * Each parameter is represented by { @ link # ARGUMENT } node . <nl> * Arguments in braces are separated by { @ link # COMMA } ( and optional { @ link # WS } ) . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ see # method ( Processor , String ) } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 960 , 8 + 926 , 7 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * Left brace in { @ link # PARAMETERS } part of { @ link # REFERENCE } . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ see # method ( Processor , String ) } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 986 , 8 + 951 , 7 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * Right brace in { @ link # PARAMETERS } part of { @ link # REFERENCE } . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ see # method ( Processor , String ) } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 1012 , 8 + 976 , 7 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * Argument definition in { @ link # PARAMETERS } part of { @ link # REFERENCE } . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ see # method ( Processor , String ) } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 1038 , 8 + 1001 , 7 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * Comma separator between parameters in { @ link # PARAMETERS } part of { @ link # REFERENCE } . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ see # method ( Processor , String ) } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 1069 , 8 + 1031 , 7 @ @ public final class JavadocTokenTypes { <nl> * Quoted text . <nl> * One of possible @ see tag arguments . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ see " Spring Framework " } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 1086 , 7 + 1047 , 7 @ @ public final class JavadocTokenTypes { <nl> public static final int STRING = JavadocParser . STRING ; <nl> <nl> / * * <nl> - * Description node , that contains : <nl> + * Description node . It contains : <nl> * < ul > <nl> * < li > { @ link # TEXT } < / li > <nl> * < li > { @ link # WS } < / li > <nl> @ @ - 1094 , 10 + 1055 , 9 @ @ public final class JavadocTokenTypes { <nl> * < li > { @ link # HTML _ ELEMENT } < / li > <nl> * < / ul > <nl> * <nl> - * < p > It is argument for many Javadoc tags and inline tags . <nl> + * < p > It is argument for many Javadoc tags and inline tags . < / p > <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ throws IOException if & lt ; b & gt ; connection & lt ; / b & gt ; problems occur } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 1131 , 8 + 1091 , 7 @ @ public final class JavadocTokenTypes { <nl> * Exception class name . First argument in { @ link # THROWS _ LITERAL @ throws } and <nl> * { @ link # EXCEPTION _ LITERAL @ exception } Javadoc tags . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ throws IOException connection problems } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 1154 , 8 + 1113 , 7 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * First argument in { @ link # PARAM _ LITERAL @ param } Javadoc tag . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ param T The bar . } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 1180 , 8 + 1138 , 7 @ @ public final class JavadocTokenTypes { <nl> * ' exclude ' literal . <nl> * One of three possible { @ link # SERIAL _ LITERAL @ serial } tag arguments . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ serial exclude } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 1203 , 8 + 1160 , 7 @ @ public final class JavadocTokenTypes { <nl> * ' include ' literal . <nl> * One of three possible { @ link # SERIAL _ LITERAL @ serial } tag arguments . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ serial include } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 1225 , 8 + 1181 , 7 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * Field name . First argument of { @ link # SERIAL _ FIELD _ LITERAL @ serialField } Javadoc tag . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ serialField counter Integer objects counter } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre > <nl> @ @ - 1252 , 8 + 1207 , 7 @ @ public final class JavadocTokenTypes { <nl> / * * <nl> * Field type . Second argument of { @ link # SERIAL _ FIELD _ LITERAL @ serialField } Javadoc tag . <nl> * <nl> - * < p > <nl> - * < b > Example : < / b > <nl> + * < p > < b > Example : < / b > < / p > <nl> * < pre > { @ code @ serialField counter Integer objects counter } < / pre > <nl> * < b > Tree : < / b > <nl> * < pre >
NEAREST DIFF (one line): diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java <nl> index 3668753 . . 27e2b3a 100644 <nl> - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java <nl> + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java <nl> @ @ - 21 , 5 + 21 , 6 @ @ public class InputReturnFromFinallyCheck { <nl> public void thisNull ( ) { <nl> boolean result = ( this = = null ) | | ( null = = this ) ; <nl> boolean result2 = ( this ! = null ) & & ( null ! = this ) ; <nl> + boolean result3 = ( this . getClass ( ) . getName ( ) = = String . valueOf ( null = = System . getProperty ( " abc " ) ) ) ; <nl> } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java <nl> index b680796 . . ab8da13 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java <nl> @ @ - 263 , 6 + 263 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport <nl> checkConfig . addAttribute ( " tokens " , " NOT _ EQUAL , EQUAL " ) ; <nl> checkConfig . addAttribute ( " limitedTokens " , " LITERAL _ THIS , LITERAL _ NULL " ) ; <nl> checkConfig . addAttribute ( " maximumNumber " , " 1 " ) ; <nl> + checkConfig . addAttribute ( " maximumDepth " , " 1 " ) ; <nl> checkConfig . addAttribute ( " maximumMessage " , " this cannot be null . " ) ; <nl> checkConfig . addAttribute ( " sumTokenCounts " , " true " ) ; <nl> <nl> @ @ - 285 , 6 + 286 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport <nl> checkConfig . addAttribute ( " tokens " , " NOT _ EQUAL , EQUAL " ) ; <nl> checkConfig . addAttribute ( " limitedTokens " , " LITERAL _ THIS , LITERAL _ NULL " ) ; <nl> checkConfig . addAttribute ( " maximumNumber " , " 1 " ) ; <nl> + checkConfig . addAttribute ( " maximumDepth " , " 1 " ) ; <nl> checkConfig . addAttribute ( " sumTokenCounts " , " true " ) ; <nl> <nl> String [ ] expected = { <nl> diff - - git a / src / xdocs / config _ misc . xml b / src / xdocs / config _ misc . xml <nl> index 462a052 . . 9bdd0b0 100755 <nl> - - - a / src / xdocs / config _ misc . xml <nl> + + + b / src / xdocs / config _ misc . xml <nl> @ @ - 646 , 6 + 646 , 15 @ @ messages . properties : Key ' ok ' missing . <nl> < td > java . lang . Integer . MAX _ VALUE < / td > <nl> < / tr > <nl> < tr > <nl> + < td > sumTokenCounts < / td > <nl> + < td > <nl> + whether the number of tokens found should be calculated <nl> + from the sum of the individual token counts <nl> + < / td > <nl> + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> + < td > < span class = " default " > false < / span > < / td > <nl> + < / tr > <nl> + < tr > <nl> < td > minimumMessage < / td > <nl> < td > error message when minimum count not reached < / td > <nl> < td > < a href = " property _ types . html # String " > String < / a > < / td > <nl> @ @ - 661 , 24 + 670 , 46 @ @ messages . properties : Key ' ok ' missing . <nl> < / subsection > <nl> <nl> < subsection name = " Examples " > <nl> + < p > <nl> + Comparing < span class = " code " > this < / span > with < span <nl> + class = " code " > null < / span > ( i . e . < span class = " code " > this = = <nl> + null < / span > and < span class = " code " > this ! = null < / span > ) : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = " DescendantToken " & gt ; <nl> + & lt ; property name = " tokens " value = " EQUAL , NOT _ EQUAL " / & gt ; <nl> + & lt ; property name = " limitedTokens " value = " LITERAL _ THIS , LITERAL _ NULL " / & gt ; <nl> + & lt ; property name = " maximumNumber " value = " 1 " / & gt ; <nl> + & lt ; property name = " maximumDepth " value = " 1 " / & gt ; <nl> + & lt ; property name = " sumTokenCounts " value = " true " / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + <nl> + < p > String literal equality check : < / p > <nl> < source > <nl> - String literal equality check : <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " EQUAL , NOT _ EQUAL " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " STRING _ LITERAL " / & gt ; <nl> & lt ; property name = " maximumNumber " value = " 0 " / & gt ; <nl> & lt ; property name = " maximumDepth " value = " 1 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Switch with no default : <nl> + < p > Switch with no default : < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " LITERAL _ SWITCH " / & gt ; <nl> & lt ; property name = " maximumDepth " value = " 2 " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " LITERAL _ DEFAULT " / & gt ; <nl> & lt ; property name = " minimumNumber " value = " 1 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Assert statement may have side effects ( formatted for browser display ) : <nl> + < p > <nl> + Assert statement may have side effects ( formatted for browser <nl> + display ) : <nl> + < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " LITERAL _ ASSERT " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " ASSIGN , DEC , INC , POST _ DEC , <nl> @ @ - 687 , 89 + 718 , 119 @ @ Assert statement may have side effects ( formatted for browser display ) : <nl> METHOD _ CALL " / & gt ; <nl> & lt ; property name = " maximumNumber " value = " 0 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Initialiser in for performs no setup ( use while instead ? ) : <nl> + < p > <nl> + Initialiser in for performs no setup ( use while instead ? ) : <nl> + < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " FOR _ INIT " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " EXPR " / & gt ; <nl> & lt ; property name = " minimumNumber " value = " 1 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Condition in for performs no check : <nl> + < p > <nl> + Condition in for performs no check : <nl> + < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " FOR _ CONDITION " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " EXPR " / & gt ; <nl> & lt ; property name = " minimumNumber " value = " 1 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Switch within switch : <nl> + < p > <nl> + Switch within switch : <nl> + < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " LITERAL _ SWITCH " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " LITERAL _ SWITCH " / & gt ; <nl> & lt ; property name = " maximumNumber " value = " 0 " / & gt ; <nl> & lt ; property name = " minimumDepth " value = " 1 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Return from within a catch or finally block : <nl> + < p > Return from within a catch or finally block : < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " LITERAL _ FINALLY , LITERAL _ CATCH " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " LITERAL _ RETURN " / & gt ; <nl> & lt ; property name = " maximumNumber " value = " 0 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Try within catch or finally block : <nl> + < p > Try within catch or finally block : < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " LITERAL _ CATCH , LITERAL _ FINALLY " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " LITERAL _ TRY " / & gt ; <nl> & lt ; property name = " maximumNumber " value = " 0 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Too many cases within a switch : <nl> + < p > Too many cases within a switch : < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " LITERAL _ SWITCH " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " LITERAL _ CASE " / & gt ; <nl> & lt ; property name = " maximumDepth " value = " 2 " / & gt ; <nl> & lt ; property name = " maximumNumber " value = " 10 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Too many local variables within a method : <nl> + < p > Too many local variables within a method : < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " VARIABLE _ DEF " / & gt ; <nl> & lt ; property name = " maximumDepth " value = " 2 " / & gt ; <nl> & lt ; property name = " maximumNumber " value = " 10 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Too many returns from within a method : <nl> + < p > Too many returns from within a method : < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " LITERAL _ RETURN " / & gt ; <nl> & lt ; property name = " maximumNumber " value = " 3 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Too many fields within an interface : <nl> + < p > Too many fields within an interface : < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " INTERFACE _ DEF " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " VARIABLE _ DEF " / & gt ; <nl> & lt ; property name = " maximumDepth " value = " 2 " / & gt ; <nl> & lt ; property name = " maximumNumber " value = " 0 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Limit the number of exceptions a method can throw : <nl> + < p > Limit the number of exceptions a method can throw : < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " LITERAL _ THROWS " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " IDENT " / & gt ; <nl> & lt ; property name = " maximumNumber " value = " 1 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Limit the number of expressions in a method : <nl> + < p > Limit the number of expressions in a method : < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " EXPR " / & gt ; <nl> & lt ; property name = " maximumNumber " value = " 200 " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Disallow empty statements : <nl> + < p > Disallow empty statements : < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " EMPTY _ STAT " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " EMPTY _ STAT " / & gt ; <nl> @ @ - 778 , 8 + 839 , 10 @ @ Disallow empty statements : <nl> & lt ; property name = " maximumMessage " <nl> value = " Empty statement is not allowed . " / & gt ; <nl> & lt ; / module & gt ; <nl> + < / source > <nl> <nl> - Too many fields within a class : <nl> + < p > Too many fields within a class : < / p > <nl> + < source > <nl> & lt ; module name = " DescendantToken " & gt ; <nl> & lt ; property name = " tokens " value = " CLASS _ DEF " / & gt ; <nl> & lt ; property name = " limitedTokens " value = " VARIABLE _ DEF " / & gt ; <nl> diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index 997973a . . ab716cc 100755 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 19 , 6 + 19 , 12 @ @ <nl> by patch # 1145023 from Alexander Jesse . <nl> < / li > <nl> < li > <nl> + Added the option < i > sumTokenCounts < / i > to the < a <nl> + href = " config _ misc . html # DescendantToken " > DescendantToken < / a > to <nl> + allow for even more powerful checks . For example , detect <nl> + statements like < span class = " code " > this = = null < / span > . <nl> + < / li > <nl> + < li > <nl> Add new options to the < a <nl> href = " config _ sizes . html # ImportOrderCheck " > ImportOrderCheck < / a > <nl> to make it more flexible . Thanks to David Didier for providing <nl> @ @ - 42 , 7 + 48 , 10 @ @ <nl> <nl> < p > Notes : < / p > <nl> < ul > <nl> - < li > . . . < / li > <nl> + < li > <nl> + Please report any problems , as this may be the last beta <nl> + release . <nl> + < / li > <nl> < / ul > <nl> < / section > <nl>

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 46600a8 . . 39928c6 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 53 , 8 + 53 , 6 @ @ 
 
 < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4983 - - > 
 < suppress checks = " MissingDeprecated " files = " . * JavadocTokenTypes \ . java " / > 
 - < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4384 - - > 
 - < suppress checks = " JavadocParagraph " files = " . * JavadocTokenTypes \ . java " / > 
 < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4984 - - > 
 < suppress checks = " DeclarationOrder " files = " . * JavadocTokenTypes \ . java " / > 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java 
 index 5c42037 . . 1d6db59 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . java 
 @ @ - 39 , 8 + 39 , 7 @ @ public final class JavadocTokenTypes { 
 * Root node of any Javadoc comment . 
 * Last child is always { @ link # EOF } . 
 * 
 - * < p > 
 - * < b > Tree for example : < / b > 
 + * < p > < b > Tree for example : < / b > < / p > 
 * < pre > { @ code 
 * JAVADOC [ 3x0 ] 
 * | - - NEWLINE [ 3x0 ] : [ \ n ] 
 @ @ - 67 , 9 + 66 , 9 @ @ public final class JavadocTokenTypes { 
 / * * 
 * Javadoc tag . 
 * 
 - * < p > Type of Javadoc tag is resolved by literal node that is first child of this node . 
 + * < p > Type of Javadoc tag is resolved by literal node that is first child of this node . < / p > 
 * 
 - * < p > As literal could be : 
 + * < p > As literal could be : < / p > 
 * < ul > 
 * < li > { @ link # RETURN _ LITERAL } < / li > 
 * < li > { @ link # DEPRECATED _ LITERAL } < / li > 
 @ @ - 86 , 8 + 85 , 7 @ @ public final class JavadocTokenTypes { 
 * < li > or { @ link # CUSTOM _ NAME } if it is custom Javadoc tag . < / li > 
 * < / ul > 
 * 
 - * < p > 
 - * < b > Example < / b > 
 + * < p > < b > Example < / b > < / p > 
 * < pre > { @ code & # 64 ; param T The bar . } < / pre > 
 * < b > Tree < / b > 
 * < pre > { @ code 
 @ @ - 107 , 9 + 105 , 9 @ @ public final class JavadocTokenTypes { 
 * 
 * < p > Type of Javadoc inline tag is resolved by literal node that is second child of this node . 
 * First child is always { @ link # JAVADOC _ INLINE _ TAG _ START } and last node is always 
 - * { @ link # JAVADOC _ INLINE _ TAG _ END } . 
 + * { @ link # JAVADOC _ INLINE _ TAG _ END } . < / p > 
 * 
 - * < p > As literal could be : 
 + * < p > As literal could be : < / p > 
 * < ul > 
 * < li > { @ link # CODE _ LITERAL } < / li > 
 * < li > { @ link # DOC _ ROOT _ LITERAL } < / li > 
 @ @ - 121 , 8 + 119 , 7 @ @ public final class JavadocTokenTypes { 
 * < li > or { @ link # CUSTOM _ NAME } if it is custom Javadoc inline tag . < / li > 
 * < / ul > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code { & # 64 ; link String } } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 142 , 10 + 139 , 9 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ return ' literal in @ return Javadoc tag . 
 * 
 - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } 
 + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ return true if file exists } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 166 , 10 + 162 , 9 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' { @ literal @ } deprecated ' literal in { @ literal @ } deprecated Javadoc tag . 
 * 
 - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } 
 + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ deprecated it is deprecated method } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 190 , 10 + 185 , 9 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ since ' literal in @ since Javadoc tag . 
 * 
 - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } 
 + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ since 3 . 4 RELEASE } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 214 , 10 + 208 , 9 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ serialData ' literal in @ serialData Javadoc tag . 
 * 
 - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } 
 + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ serialData two values of Integer type } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 239 , 15 + 232 , 14 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ serialField ' literal in @ serialField Javadoc tag . 
 * 
 - * < p > Such Javadoc tag can have three arguments : 
 + * < p > Such Javadoc tag can have three arguments : < / p > 
 * < ol > 
 * < li > { @ link # FIELD _ NAME } < / li > 
 * < li > { @ link # FIELD _ TYPE } < / li > 
 * < li > { @ link # DESCRIPTION } < / li > 
 * < / ol > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ serialField counter Integer objects counter } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 272 , 14 + 264 , 13 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ param ' literal in @ param Javadoc tag . 
 * 
 - * < p > Such Javadoc tag can have two arguments : 
 + * < p > Such Javadoc tag can have two arguments : < / p > 
 * < ol > 
 * < li > { @ link # PARAMETER _ NAME } < / li > 
 * < li > { @ link # DESCRIPTION } < / li > 
 * < / ol > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ param T The bar . } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 302 , 10 + 293 , 9 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ see ' literal in @ see Javadoc tag . 
 * 
 - * < p > Such Javadoc tag can have one argument - { @ link # REFERENCE } 
 + * < p > Such Javadoc tag can have one argument - { @ link # REFERENCE } < / p > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ see org . apache . utils . Lists . Comparator # compare ( Object ) } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 337 , 10 + 327 , 9 @ @ public final class JavadocTokenTypes { 
 * ' @ see ' literal in @ see Javadoc tag . 
 * 
 * < p > Such Javadoc tag can have one argument - { @ link # REFERENCE } or { @ link # LITERAL _ EXCLUDE } 
 - * or { @ link # LITERAL _ INCLUDE } 
 + * or { @ link # LITERAL _ INCLUDE } < / p > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ serial include } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 350 , 8 + 339 , 7 @ @ public final class JavadocTokenTypes { 
 * | - - LITERAL _ INCLUDE [ 3x8 ] : [ include ] 
 * } < / pre > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ serial serialized company name } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 372 , 10 + 360 , 9 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ version ' literal in @ version Javadoc tag . 
 * 
 - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } 
 + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ version 1 . 3 } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 396 , 10 + 383 , 9 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ exception ' literal in @ exception Javadoc tag . 
 * 
 - * < p > Such Javadoc tag can have two argument - { @ link # CLASS _ NAME } and { @ link # DESCRIPTION } 
 + * < p > Such Javadoc tag can have two argument - { @ link # CLASS _ NAME } and { @ link # DESCRIPTION } < / p > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ exception SQLException if query is not correct } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 422 , 10 + 408 , 9 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ throws ' literal in @ throws Javadoc tag . 
 * 
 - * < p > Such Javadoc tag can have two argument - { @ link # CLASS _ NAME } and { @ link # DESCRIPTION } 
 + * < p > Such Javadoc tag can have two argument - { @ link # CLASS _ NAME } and { @ link # DESCRIPTION } < / p > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ throws SQLException if query is not correct } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 448 , 10 + 433 , 9 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ author ' literal in @ author Javadoc tag . 
 * 
 - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } 
 + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ author Baratali Izmailov } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 472 , 10 + 456 , 9 @ @ public final class JavadocTokenTypes { 
 / * * 
 * Name of custom Javadoc tag ( or Javadoc inline tag ) . 
 * 
 - * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } 
 + * < p > Such Javadoc tag can have one argument - { @ link # DESCRIPTION } < / p > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ myJavadocTag some magic } < / pre > 
 * < b > Tree : < / b > 
 * < pre > { @ code 
 @ @ - 491 , 8 + 474 , 7 @ @ public final class JavadocTokenTypes { 
 / * * 
 * First child of { @ link # JAVADOC _ INLINE _ TAG } that represents left curly brace ' { ' . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code { & # 64 ; code Comparable & lt ; E & gt ; } } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 509 , 8 + 491 , 7 @ @ public final class JavadocTokenTypes { 
 / * * 
 * Last child of { @ link # JAVADOC _ INLINE _ TAG } that represents right curly brace ' } ' . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code { & # 64 ; code Comparable & lt ; E & gt ; } } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 528 , 15 + 509 , 14 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ code ' literal in { & # 64 ; code } Javadoc inline tag . 
 * 
 - * < p > Such Javadoc inline tag can have such child nodes : 
 + * < p > Such Javadoc inline tag can have such child nodes : < / p > 
 * < ul > 
 * < li > { @ link # NEWLINE } < / li > 
 * < li > { @ link # WS } < / li > 
 * < li > { @ link # TEXT } < / li > 
 * < / ul > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code { & # 64 ; code Comparable & lt ; E & gt ; } } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 559 , 14 + 539 , 13 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ docRoot ' literal in { & # 64 ; docRoot } Javadoc inline tag . 
 * 
 - * < p > Such Javadoc inline tag does not have any arguments and can have such child nodes : 
 + * < p > Such Javadoc inline tag does not have any arguments and can have such child nodes : < / p > 
 * < ul > 
 * < li > { @ link # NEWLINE } < / li > 
 * < li > { @ link # WS } < / li > 
 * < / ul > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code { & # 64 ; docRoot } } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 577 , 8 + 556 , 7 @ @ public final class JavadocTokenTypes { 
 * } 
 * < / pre > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code { & # 64 ; docRoot 
 * } } < / pre > 
 * < b > Tree : < / b > 
 @ @ - 601 , 9 + 579 , 7 @ @ public final class JavadocTokenTypes { 
 
 / * * 
 * ' @ link ' literal in { & # 64 ; link } Javadoc inline tag . 
 - * < p > 
 - * Such Javadoc inline tag can have one argument - { @ link # REFERENCE } 
 - * < / p > 
 + * < p > Such Javadoc inline tag can have one argument - { @ link # REFERENCE } < / p > 
 * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code { & # 64 ; link org . apache . utils . Lists . Comparator # compare ( Object ) } } < / pre > 
 * < p > < b > Tree : < / b > < / p > 
 @ @ - 639 , 14 + 615 , 13 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ inheritDoc ' literal in { & # 64 ; inheritDoc } Javadoc inline tag . 
 * 
 - * < p > Such Javadoc inline tag does not have any arguments and can have such child nodes : 
 + * < p > Such Javadoc inline tag does not have any arguments and can have such child nodes : < / p > 
 * < ul > 
 * < li > { @ link # NEWLINE } < / li > 
 * < li > { @ link # WS } < / li > 
 * < / ul > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code { & # 64 ; inheritDoc } } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 667 , 10 + 642 , 9 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ linkplain ' literal in { & # 64 ; linkplain } Javadoc inline tag . 
 * 
 - * < p > Such Javadoc inline tag can have one argument - { @ link # REFERENCE } 
 + * < p > Such Javadoc inline tag can have one argument - { @ link # REFERENCE } < / p > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code { & # 64 ; linkplain org . apache . utils . Lists . Comparator # compare ( Object ) compare } } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 707 , 15 + 681 , 14 @ @ public final class JavadocTokenTypes { 
 / * * 
 * ' @ literal ' literal in { & # 64 ; literal } Javadoc inline tag . 
 * 
 - * < p > Such Javadoc inline tag can have such child nodes : 
 + * < p > Such Javadoc inline tag can have such child nodes : < / p > 
 * < ul > 
 * < li > { @ link # NEWLINE } < / li > 
 * < li > { @ link # WS } < / li > 
 * < li > { @ link # TEXT } < / li > 
 * < / ul > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code { & # 64 ; literal # compare ( Object ) } } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 739 , 14 + 712 , 13 @ @ public final class JavadocTokenTypes { 
 * ' @ value ' literal in { & # 64 ; value } Javadoc inline tag . 
 * 
 * < p > Such Javadoc inline tag has one argument { @ link # REFERENCE } 
 - * and can have such child nodes : 
 + * and can have such child nodes : < / p > 
 * < ul > 
 * < li > { @ link # NEWLINE } < / li > 
 * < li > { @ link # WS } < / li > 
 * < / ul > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code { & # 64 ; value Integer # MAX _ VALUE } } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 784 , 8 + 756 , 7 @ @ public final class JavadocTokenTypes { 
 * Package definition in { @ link # REFERENCE } . 
 * Package definition is lowercase part of REFERENCE and before a hash character ( # ) . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ see org . apache . utils . Lists . Comparator # compare ( Object ) } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 814 , 8 + 785 , 7 @ @ public final class JavadocTokenTypes { 
 * Class definition is part of REFERENCE , that is started by capital letter 
 * and before a hash character ( # ) . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ see org . apache . utils . Lists . Comparator # compare ( Object ) } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 844 , 8 + 814 , 7 @ @ public final class JavadocTokenTypes { 
 * Dot separator is used between { @ link # PACKAGE } and { @ link # CLASS } ; between { @ link # CLASS } 
 * and { @ link # CLASS } 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ see org . apache . utils . Lists . Comparator # compare ( Object ) } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 873 , 8 + 842 , 7 @ @ public final class JavadocTokenTypes { 
 * Hash character in { @ link # REFERENCE } . 
 * Hash character is used before specifying a class member . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ see org . apache . utils . Lists . Comparator # compare ( Object ) } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 902 , 8 + 870 , 7 @ @ public final class JavadocTokenTypes { 
 * A class member in { @ link # REFERENCE } . 
 * Class member is specified after { @ link # HASH } symbol . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ see org . apache . utils . Lists . Comparator # compare ( Object ) } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 934 , 8 + 901 , 7 @ @ public final class JavadocTokenTypes { 
 * Each parameter is represented by { @ link # ARGUMENT } node . 
 * Arguments in braces are separated by { @ link # COMMA } ( and optional { @ link # WS } ) . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ see # method ( Processor , String ) } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 960 , 8 + 926 , 7 @ @ public final class JavadocTokenTypes { 
 / * * 
 * Left brace in { @ link # PARAMETERS } part of { @ link # REFERENCE } . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ see # method ( Processor , String ) } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 986 , 8 + 951 , 7 @ @ public final class JavadocTokenTypes { 
 / * * 
 * Right brace in { @ link # PARAMETERS } part of { @ link # REFERENCE } . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ see # method ( Processor , String ) } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 1012 , 8 + 976 , 7 @ @ public final class JavadocTokenTypes { 
 / * * 
 * Argument definition in { @ link # PARAMETERS } part of { @ link # REFERENCE } . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ see # method ( Processor , String ) } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 1038 , 8 + 1001 , 7 @ @ public final class JavadocTokenTypes { 
 / * * 
 * Comma separator between parameters in { @ link # PARAMETERS } part of { @ link # REFERENCE } . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ see # method ( Processor , String ) } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 1069 , 8 + 1031 , 7 @ @ public final class JavadocTokenTypes { 
 * Quoted text . 
 * One of possible @ see tag arguments . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ see " Spring Framework " } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 1086 , 7 + 1047 , 7 @ @ public final class JavadocTokenTypes { 
 public static final int STRING = JavadocParser . STRING ; 
 
 / * * 
 - * Description node , that contains : 
 + * Description node . It contains : 
 * < ul > 
 * < li > { @ link # TEXT } < / li > 
 * < li > { @ link # WS } < / li > 
 @ @ - 1094 , 10 + 1055 , 9 @ @ public final class JavadocTokenTypes { 
 * < li > { @ link # HTML _ ELEMENT } < / li > 
 * < / ul > 
 * 
 - * < p > It is argument for many Javadoc tags and inline tags . 
 + * < p > It is argument for many Javadoc tags and inline tags . < / p > 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ throws IOException if & lt ; b & gt ; connection & lt ; / b & gt ; problems occur } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 1131 , 8 + 1091 , 7 @ @ public final class JavadocTokenTypes { 
 * Exception class name . First argument in { @ link # THROWS _ LITERAL @ throws } and 
 * { @ link # EXCEPTION _ LITERAL @ exception } Javadoc tags . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ throws IOException connection problems } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 1154 , 8 + 1113 , 7 @ @ public final class JavadocTokenTypes { 
 / * * 
 * First argument in { @ link # PARAM _ LITERAL @ param } Javadoc tag . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ param T The bar . } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 1180 , 8 + 1138 , 7 @ @ public final class JavadocTokenTypes { 
 * ' exclude ' literal . 
 * One of three possible { @ link # SERIAL _ LITERAL @ serial } tag arguments . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ serial exclude } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 1203 , 8 + 1160 , 7 @ @ public final class JavadocTokenTypes { 
 * ' include ' literal . 
 * One of three possible { @ link # SERIAL _ LITERAL @ serial } tag arguments . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ serial include } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 1225 , 8 + 1181 , 7 @ @ public final class JavadocTokenTypes { 
 / * * 
 * Field name . First argument of { @ link # SERIAL _ FIELD _ LITERAL @ serialField } Javadoc tag . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ serialField counter Integer objects counter } < / pre > 
 * < b > Tree : < / b > 
 * < pre > 
 @ @ - 1252 , 8 + 1207 , 7 @ @ public final class JavadocTokenTypes { 
 / * * 
 * Field type . Second argument of { @ link # SERIAL _ FIELD _ LITERAL @ serialField } Javadoc tag . 
 * 
 - * < p > 
 - * < b > Example : < / b > 
 + * < p > < b > Example : < / b > < / p > 
 * < pre > { @ code @ serialField counter Integer objects counter } < / pre > 
 * < b > Tree : < / b > 
 * < pre >

NEAREST DIFF:
diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java 
 index 3668753 . . 27e2b3a 100644 
 - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java 
 + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java 
 @ @ - 21 , 5 + 21 , 6 @ @ public class InputReturnFromFinallyCheck { 
 public void thisNull ( ) { 
 boolean result = ( this = = null ) | | ( null = = this ) ; 
 boolean result2 = ( this ! = null ) & & ( null ! = this ) ; 
 + boolean result3 = ( this . getClass ( ) . getName ( ) = = String . valueOf ( null = = System . getProperty ( " abc " ) ) ) ; 
 } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java 
 index b680796 . . ab8da13 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java 
 @ @ - 263 , 6 + 263 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport 
 checkConfig . addAttribute ( " tokens " , " NOT _ EQUAL , EQUAL " ) ; 
 checkConfig . addAttribute ( " limitedTokens " , " LITERAL _ THIS , LITERAL _ NULL " ) ; 
 checkConfig . addAttribute ( " maximumNumber " , " 1 " ) ; 
 + checkConfig . addAttribute ( " maximumDepth " , " 1 " ) ; 
 checkConfig . addAttribute ( " maximumMessage " , " this cannot be null . " ) ; 
 checkConfig . addAttribute ( " sumTokenCounts " , " true " ) ; 
 
 @ @ - 285 , 6 + 286 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport 
 checkConfig . addAttribute ( " tokens " , " NOT _ EQUAL , EQUAL " ) ; 
 checkConfig . addAttribute ( " limitedTokens " , " LITERAL _ THIS , LITERAL _ NULL " ) ; 
 checkConfig . addAttribute ( " maximumNumber " , " 1 " ) ; 
 + checkConfig . addAttribute ( " maximumDepth " , " 1 " ) ; 
 checkConfig . addAttribute ( " sumTokenCounts " , " true " ) ; 
 
 String [ ] expected = { 
 diff - - git a / src / xdocs / config _ misc . xml b / src / xdocs / config _ misc . xml 
 index 462a052 . . 9bdd0b0 100755 
 - - - a / src / xdocs / config _ misc . xml 
 + + + b / src / xdocs / config _ misc . xml 
 @ @ - 646 , 6 + 646 , 15 @ @ messages . properties : Key ' ok ' missing . 
 < td > java . lang . Integer . MAX _ VALUE < / td > 
 < / tr > 
 < tr > 
 + < td > sumTokenCounts < / td > 
 + < td > 
 + whether the number of tokens found should be calculated 
 + from the sum of the individual token counts 
 + < / td > 
 + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 + < td > < span class = " default " > false < / span > < / td > 
 + < / tr > 
 + < tr > 
 < td > minimumMessage < / td > 
 < td > error message when minimum count not reached < / td > 
 < td > < a href = " property _ types . html # String " > String < / a > < / td > 
 @ @ - 661 , 24 + 670 , 46 @ @ messages . properties : Key ' ok ' missing . 
 < / subsection > 
 
 < subsection name = " Examples " > 
 + < p > 
 + Comparing < span class = " code " > this < / span > with < span 
 + class = " code " > null < / span > ( i . e . < span class = " code " > this = = 
 + null < / span > and < span class = " code " > this ! = null < / span > ) : 
 + < / p > 
 + < source > 
 + & lt ; module name = " DescendantToken " & gt ; 
 + & lt ; property name = " tokens " value = " EQUAL , NOT _ EQUAL " / & gt ; 
 + & lt ; property name = " limitedTokens " value = " LITERAL _ THIS , LITERAL _ NULL " / & gt ; 
 + & lt ; property name = " maximumNumber " value = " 1 " / & gt ; 
 + & lt ; property name = " maximumDepth " value = " 1 " / & gt ; 
 + & lt ; property name = " sumTokenCounts " value = " true " / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + 
 + < p > String literal equality check : < / p > 
 < source > 
 - String literal equality check : 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " EQUAL , NOT _ EQUAL " / & gt ; 
 & lt ; property name = " limitedTokens " value = " STRING _ LITERAL " / & gt ; 
 & lt ; property name = " maximumNumber " value = " 0 " / & gt ; 
 & lt ; property name = " maximumDepth " value = " 1 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Switch with no default : 
 + < p > Switch with no default : < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " LITERAL _ SWITCH " / & gt ; 
 & lt ; property name = " maximumDepth " value = " 2 " / & gt ; 
 & lt ; property name = " limitedTokens " value = " LITERAL _ DEFAULT " / & gt ; 
 & lt ; property name = " minimumNumber " value = " 1 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Assert statement may have side effects ( formatted for browser display ) : 
 + < p > 
 + Assert statement may have side effects ( formatted for browser 
 + display ) : 
 + < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " LITERAL _ ASSERT " / & gt ; 
 & lt ; property name = " limitedTokens " value = " ASSIGN , DEC , INC , POST _ DEC , 
 @ @ - 687 , 89 + 718 , 119 @ @ Assert statement may have side effects ( formatted for browser display ) : 
 METHOD _ CALL " / & gt ; 
 & lt ; property name = " maximumNumber " value = " 0 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Initialiser in for performs no setup ( use while instead ? ) : 
 + < p > 
 + Initialiser in for performs no setup ( use while instead ? ) : 
 + < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " FOR _ INIT " / & gt ; 
 & lt ; property name = " limitedTokens " value = " EXPR " / & gt ; 
 & lt ; property name = " minimumNumber " value = " 1 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Condition in for performs no check : 
 + < p > 
 + Condition in for performs no check : 
 + < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " FOR _ CONDITION " / & gt ; 
 & lt ; property name = " limitedTokens " value = " EXPR " / & gt ; 
 & lt ; property name = " minimumNumber " value = " 1 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Switch within switch : 
 + < p > 
 + Switch within switch : 
 + < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " LITERAL _ SWITCH " / & gt ; 
 & lt ; property name = " limitedTokens " value = " LITERAL _ SWITCH " / & gt ; 
 & lt ; property name = " maximumNumber " value = " 0 " / & gt ; 
 & lt ; property name = " minimumDepth " value = " 1 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Return from within a catch or finally block : 
 + < p > Return from within a catch or finally block : < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " LITERAL _ FINALLY , LITERAL _ CATCH " / & gt ; 
 & lt ; property name = " limitedTokens " value = " LITERAL _ RETURN " / & gt ; 
 & lt ; property name = " maximumNumber " value = " 0 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Try within catch or finally block : 
 + < p > Try within catch or finally block : < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " LITERAL _ CATCH , LITERAL _ FINALLY " / & gt ; 
 & lt ; property name = " limitedTokens " value = " LITERAL _ TRY " / & gt ; 
 & lt ; property name = " maximumNumber " value = " 0 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Too many cases within a switch : 
 + < p > Too many cases within a switch : < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " LITERAL _ SWITCH " / & gt ; 
 & lt ; property name = " limitedTokens " value = " LITERAL _ CASE " / & gt ; 
 & lt ; property name = " maximumDepth " value = " 2 " / & gt ; 
 & lt ; property name = " maximumNumber " value = " 10 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Too many local variables within a method : 
 + < p > Too many local variables within a method : < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; 
 & lt ; property name = " limitedTokens " value = " VARIABLE _ DEF " / & gt ; 
 & lt ; property name = " maximumDepth " value = " 2 " / & gt ; 
 & lt ; property name = " maximumNumber " value = " 10 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Too many returns from within a method : 
 + < p > Too many returns from within a method : < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; 
 & lt ; property name = " limitedTokens " value = " LITERAL _ RETURN " / & gt ; 
 & lt ; property name = " maximumNumber " value = " 3 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Too many fields within an interface : 
 + < p > Too many fields within an interface : < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " INTERFACE _ DEF " / & gt ; 
 & lt ; property name = " limitedTokens " value = " VARIABLE _ DEF " / & gt ; 
 & lt ; property name = " maximumDepth " value = " 2 " / & gt ; 
 & lt ; property name = " maximumNumber " value = " 0 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Limit the number of exceptions a method can throw : 
 + < p > Limit the number of exceptions a method can throw : < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " LITERAL _ THROWS " / & gt ; 
 & lt ; property name = " limitedTokens " value = " IDENT " / & gt ; 
 & lt ; property name = " maximumNumber " value = " 1 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Limit the number of expressions in a method : 
 + < p > Limit the number of expressions in a method : < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; 
 & lt ; property name = " limitedTokens " value = " EXPR " / & gt ; 
 & lt ; property name = " maximumNumber " value = " 200 " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Disallow empty statements : 
 + < p > Disallow empty statements : < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " EMPTY _ STAT " / & gt ; 
 & lt ; property name = " limitedTokens " value = " EMPTY _ STAT " / & gt ; 
 @ @ - 778 , 8 + 839 , 10 @ @ Disallow empty statements : 
 & lt ; property name = " maximumMessage " 
 value = " Empty statement is not allowed . " / & gt ; 
 & lt ; / module & gt ; 
 + < / source > 
 
 - Too many fields within a class : 
 + < p > Too many fields within a class : < / p > 
 + < source > 
 & lt ; module name = " DescendantToken " & gt ; 
 & lt ; property name = " tokens " value = " CLASS _ DEF " / & gt ; 
 & lt ; property name = " limitedTokens " value = " VARIABLE _ DEF " / & gt ; 
 diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index 997973a . . ab716cc 100755 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 19 , 6 + 19 , 12 @ @ 
 by patch # 1145023 from Alexander Jesse . 
 < / li > 
 < li > 
 + Added the option < i > sumTokenCounts < / i > to the < a 
 + href = " config _ misc . html # DescendantToken " > DescendantToken < / a > to 
 + allow for even more powerful checks . For example , detect 
 + statements like < span class = " code " > this = = null < / span > . 
 + < / li > 
 + < li > 
 Add new options to the < a 
 href = " config _ sizes . html # ImportOrderCheck " > ImportOrderCheck < / a > 
 to make it more flexible . Thanks to David Didier for providing 
 @ @ - 42 , 7 + 48 , 10 @ @ 
 
 < p > Notes : < / p > 
 < ul > 
 - < li > . . . < / li > 
 + < li > 
 + Please report any problems , as this may be the last beta 
 + release . 
 + < / li > 
 < / ul > 
 < / section > 

