BLEU SCORE: 0.09287528999566796

TEST MSG: Issue # 3509 : fixed try with resource on FallThroughCheck
GENERATED MSG: Issue # 2161 : unify test input locations

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> index 06cd799 . . 98c5351 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> @ @ - 267 , 7 + 267 , 13 @ @ public class FallThroughCheck extends AbstractCheck { <nl> } <nl> <nl> if ( ! isTerminated ) { <nl> - isTerminated = isTerminated ( ast . getFirstChild ( ) , <nl> + DetailAST firstChild = ast . getFirstChild ( ) ; <nl> + <nl> + if ( firstChild . getType ( ) = = TokenTypes . RESOURCE _ SPECIFICATION ) { <nl> + firstChild = firstChild . getNextSibling ( ) ; <nl> + } <nl> + <nl> + isTerminated = isTerminated ( firstChild , <nl> useBreak , useContinue ) ; <nl> <nl> DetailAST catchStmt = ast . findFirstToken ( TokenTypes . LITERAL _ CATCH ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java <nl> index de5a2f5 . . 3c5f413 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java <nl> @ @ - 132 , 6 + 132 , 11 @ @ public class FallThroughCheckTest extends BaseCheckTestSupport { <nl> " 424 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 436 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 446 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 491 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 495 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 501 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 507 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 514 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputFallThrough . java " ) , <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java <nl> index 246f231 . . 1921aa4 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java <nl> @ @ - 448 , 4 + 448 , 77 @ @ public class InputFallThrough <nl> break ; <nl> } <nl> } <nl> + <nl> + void tryResource ( ) throws Exception { <nl> + switch ( hashCode ( ) ) { <nl> + case 1 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + case 2 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + finally { <nl> + return ; <nl> + } <nl> + case 3 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + catch ( Exception ex ) { <nl> + return ; <nl> + } <nl> + case 4 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + finally { <nl> + return ; <nl> + } <nl> + case 5 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + finally { <nl> + } <nl> + case 6 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + catch ( Exception ex ) { <nl> + return ; <nl> + } <nl> + / / fallthru <nl> + case 7 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + / / fallthru <nl> + case 8 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + finally { <nl> + } <nl> + / / fallthru <nl> + case 9 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + catch ( Exception ex ) { <nl> + } <nl> + / / fallthru <nl> + case 10 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + catch ( Exception ex ) { <nl> + } <nl> + / / fallthru <nl> + default : <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + private static class Resource implements AutoCloseable { <nl> + @ Override <nl> + public void close ( ) throws Exception { <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> index 9af22a9 . . 2cdac81 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { <nl> } <nl> <nl> private static List < RevCommit > getCommitsToCheck ( ) throws Exception { <nl> - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; <nl> - <nl> - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> List < RevCommit > commits ; <nl> - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> - } <nl> - else { <nl> - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { <nl> + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> + else { <nl> + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> } <nl> return commits ; <nl> } <nl> @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { <nl> <nl> private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { <nl> RevCommitsPair revCommitIteratorPair ; <nl> - try { <nl> + <nl> + try ( RevWalk revWalk = new RevWalk ( repo ) ) { <nl> Iterator < RevCommit > first ; <nl> Iterator < RevCommit > second ; <nl> - <nl> - RevWalk revWalk = new RevWalk ( repo ) ; <nl> - <nl> ObjectId headId = repo . resolve ( Constants . HEAD ) ; <nl> RevCommit headCommit = revWalk . parseCommit ( headId ) ; <nl> <nl> @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { <nl> RevCommit firstParent = headCommit . getParent ( 0 ) ; <nl> RevCommit secondParent = headCommit . getParent ( 1 ) ; <nl> <nl> - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + } <nl> } <nl> else { <nl> - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . call ( ) . iterator ( ) ; <nl> + } <nl> second = Collections . emptyIterator ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 index 06cd799 . . 98c5351 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 @ @ - 267 , 7 + 267 , 13 @ @ public class FallThroughCheck extends AbstractCheck { 
 } 
 
 if ( ! isTerminated ) { 
 - isTerminated = isTerminated ( ast . getFirstChild ( ) , 
 + DetailAST firstChild = ast . getFirstChild ( ) ; 
 + 
 + if ( firstChild . getType ( ) = = TokenTypes . RESOURCE _ SPECIFICATION ) { 
 + firstChild = firstChild . getNextSibling ( ) ; 
 + } 
 + 
 + isTerminated = isTerminated ( firstChild , 
 useBreak , useContinue ) ; 
 
 DetailAST catchStmt = ast . findFirstToken ( TokenTypes . LITERAL _ CATCH ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java 
 index de5a2f5 . . 3c5f413 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java 
 @ @ - 132 , 6 + 132 , 11 @ @ public class FallThroughCheckTest extends BaseCheckTestSupport { 
 " 424 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 436 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 446 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 491 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 495 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 501 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 507 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 514 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputFallThrough . java " ) , 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java 
 index 246f231 . . 1921aa4 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFallThrough . java 
 @ @ - 448 , 4 + 448 , 77 @ @ public class InputFallThrough 
 break ; 
 } 
 } 
 + 
 + void tryResource ( ) throws Exception { 
 + switch ( hashCode ( ) ) { 
 + case 1 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + case 2 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + finally { 
 + return ; 
 + } 
 + case 3 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + catch ( Exception ex ) { 
 + return ; 
 + } 
 + case 4 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + finally { 
 + return ; 
 + } 
 + case 5 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + finally { 
 + } 
 + case 6 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + catch ( Exception ex ) { 
 + return ; 
 + } 
 + / / fallthru 
 + case 7 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + / / fallthru 
 + case 8 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + finally { 
 + } 
 + / / fallthru 
 + case 9 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + catch ( Exception ex ) { 
 + } 
 + / / fallthru 
 + case 10 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + catch ( Exception ex ) { 
 + } 
 + / / fallthru 
 + default : 
 + break ; 
 + } 
 + } 
 + 
 + private static class Resource implements AutoCloseable { 
 + @ Override 
 + public void close ( ) throws Exception { 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 index 9af22a9 . . 2cdac81 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { 
 } 
 
 private static List < RevCommit > getCommitsToCheck ( ) throws Exception { 
 - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; 
 - 
 - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 List < RevCommit > commits ; 
 - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 - } 
 - else { 
 - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { 
 + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 + else { 
 + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 } 
 return commits ; 
 } 
 @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { 
 
 private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { 
 RevCommitsPair revCommitIteratorPair ; 
 - try { 
 + 
 + try ( RevWalk revWalk = new RevWalk ( repo ) ) { 
 Iterator < RevCommit > first ; 
 Iterator < RevCommit > second ; 
 - 
 - RevWalk revWalk = new RevWalk ( repo ) ; 
 - 
 ObjectId headId = repo . resolve ( Constants . HEAD ) ; 
 RevCommit headCommit = revWalk . parseCommit ( headId ) ; 
 
 @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { 
 RevCommit firstParent = headCommit . getParent ( 0 ) ; 
 RevCommit secondParent = headCommit . getParent ( 1 ) ; 
 
 - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + } 
 } 
 else { 
 - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . call ( ) . iterator ( ) ; 
 + } 
 second = Collections . emptyIterator ( ) ; 
 } 

