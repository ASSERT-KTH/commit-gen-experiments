BLEU SCORE: 0.0844991782262014

TEST MSG: Issue # 6330 : Update eclipse compiler to R10
GENERATED MSG: Issue # 4587 : Moved resources for descendant token check test

TEST DIFF (one line): diff - - git a / . ci / eclipse - compiler - javac . sh b / . ci / eclipse - compiler - javac . sh <nl> index 1502fc3 . . cc9491e 100755 <nl> - - - a / . ci / eclipse - compiler - javac . sh <nl> + + + b / . ci / eclipse - compiler - javac . sh <nl> @ @ - 7 , 8 + 7 , 8 @ @ if [ - z " $ 1 " ] ; then <nl> exit 1 <nl> fi <nl> <nl> - ECJ _ JAR = " ecj - 4 . 7 . jar " <nl> - ECJ _ MAVEN _ VERSION = " R - 4 . 7 - 201706120950 " <nl> + ECJ _ JAR = " ecj - 4 . 10 . jar " <nl> + ECJ _ MAVEN _ VERSION = " R - 4 . 10 - 201812060815 " <nl> ECJ _ PATH = ~ / . m2 / repository / $ ECJ _ MAVEN _ VERSION / $ ECJ _ JAR <nl> <nl> if [ ! - f $ ECJ _ PATH ] ; then <nl> diff - - git a / . ci / jsoref - spellchecker / whitelist . words b / . ci / jsoref - spellchecker / whitelist . words <nl> index 660fdb5 . . 35efec7 100644 <nl> - - - a / . ci / jsoref - spellchecker / whitelist . words <nl> + + + b / . ci / jsoref - spellchecker / whitelist . words <nl> @ @ - 1075 , 7 + 1075 , 6 @ @ rp <nl> rparen <nl> rpmfind <nl> rq <nl> - Rrequired <nl> Rrridden <nl> RRRR <nl> RSPEC <nl> diff - - git a / config / checkstyle _ resources _ suppressions . xml b / config / checkstyle _ resources _ suppressions . xml <nl> index 3aef04c . . 9212077 100644 <nl> - - - a / config / checkstyle _ resources _ suppressions . xml <nl> + + + b / config / checkstyle _ resources _ suppressions . xml <nl> @ @ - 8 , 6 + 8 , 8 @ @ <nl> <nl> < ! - - intentional problem for testing - - > <nl> < suppress checks = " PackageDeclarationCheck " <nl> + files = " packagedeclaration [ \ \ / ] InputPackageDeclarationNoPackage \ . java " / > <nl> + < suppress checks = " PackageDeclarationCheck " <nl> files = " packagedeclaration [ \ \ / ] InputPackageDeclarationWithCommentOnly \ . java " / > <nl> < suppress checks = " PackageDeclarationCheck " <nl> files = " [ \ \ / ] resources - noncompilable [ \ \ / ] . * [ \ \ / ] packagedeclaration [ \ \ / ] Input . * \ . java " / > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java <nl> index fdfc26f . . 5df7aab 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> <nl> public class FallThroughCheckTest extends AbstractModuleTestSupport { <nl> <nl> @ @ - 54 , 9 + 55 , 9 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { <nl> " 424 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 436 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 446 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 555 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 556 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 557 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 482 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 483 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 484 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputFallThrough . java " ) , <nl> @ @ - 64 , 6 + 65 , 15 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testTryWithResources ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( FallThroughCheck . class ) ; <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , <nl> + getNonCompilablePath ( " InputFallThrough . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testLastCaseGroup ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( FallThroughCheck . class ) ; <nl> checkConfig . addAttribute ( " checkLastCaseGroup " , " true " ) ; <nl> @ @ - 85 , 9 + 95 , 9 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { <nl> " 424 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 436 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 446 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 555 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 556 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 557 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 482 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 483 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 484 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputFallThrough . java " ) , <nl> @ @ - 133 , 15 + 143 , 10 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { <nl> " 424 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 436 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 446 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 491 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 495 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 501 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 507 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 514 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 546 : 12 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 555 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 556 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - " 557 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 473 : 12 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 482 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 483 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 484 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputFallThrough . java " ) , <nl> @ @ - 149 , 11 + 154 , 29 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testOwnPatternTryWithResources ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( FallThroughCheck . class ) ; <nl> + checkConfig . addAttribute ( " reliefPattern " , " Continue with next case " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 46 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 50 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 56 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 62 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 69 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + } ; <nl> + verify ( checkConfig , <nl> + getNonCompilablePath ( " InputFallThrough . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testTokensNotNull ( ) { <nl> final FallThroughCheck check = new FallThroughCheck ( ) ; <nl> Assert . assertNotNull ( " Acceptable tokens should not be null " , check . getAcceptableTokens ( ) ) ; <nl> Assert . assertNotNull ( " Default tokens should not be null " , check . getDefaultTokens ( ) ) ; <nl> - Assert . assertNotNull ( " Rrequired tokens should not be null " , check . getRequiredTokens ( ) ) ; <nl> + Assert . assertNotNull ( " Required tokens should not be null " , check . getRequiredTokens ( ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> index 8fb68d9 . . fd31ad3 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> @ @ - 106 , 11 + 106 , 9 @ @ public class IllegalInstantiationCheckTest <nl> " classes " , <nl> " java . lang . Boolean " ) ; <nl> final String [ ] expected = { <nl> - " 3 : 20 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , <nl> + " 2 : 20 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , <nl> } ; <nl> - verify ( checkConfig , <nl> - getNonCompilablePath ( " InputIllegalInstantiationNoPackage . java " ) , <nl> - expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalInstantiationNoPackage . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java <nl> index afa5a91 . . f8ece94 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java <nl> @ @ - 71 , 4 + 71 , 13 @ @ public class NoFinalizerCheckTest <nl> verify ( checkConfig , getPath ( " InputNoFinalizerFallThrough . java " ) , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testHasNoFinalizerTryWithResource ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( NoFinalizerCheck . class ) ; <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputNoFinalizerFallThrough . java " ) , expected ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java <nl> index 29eb8eb . . 816ff03 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java <nl> @ @ - 41 , 11 + 41 , 10 @ @ public class PackageDeclarationCheckTest extends AbstractModuleTestSupport { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( PackageDeclarationCheck . class ) ; <nl> <nl> final String [ ] expected = { <nl> - " 2 : " + getCheckMessage ( MSG _ KEY _ MISSING ) , <nl> + " 1 : " + getCheckMessage ( MSG _ KEY _ MISSING ) , <nl> } ; <nl> <nl> - verify ( checkConfig , <nl> - getNonCompilablePath ( " InputPackageDeclarationNoPackage . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputPackageDeclarationNoPackage . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java <nl> new file mode 100644 <nl> index 0000000 . . 47ff982 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java <nl> @ @ - 0 , 0 + 1 , 80 @ @ <nl> + / / non - compiled with eclipse till https : / / bugs . eclipse . org / bugs / show _ bug . cgi ? id = 543090 <nl> + / / Compilable by javac , but noncompilable by eclipse <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . fallthrough ; <nl> + <nl> + public class InputFallThrough <nl> + { <nl> + void tryResource ( ) throws Exception { <nl> + switch ( hashCode ( ) ) { <nl> + case 1 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + case 2 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + finally { <nl> + return ; <nl> + } <nl> + case 3 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + catch ( Exception ex ) { <nl> + return ; <nl> + } <nl> + case 4 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + finally { <nl> + return ; <nl> + } <nl> + case 5 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + finally { <nl> + } <nl> + case 6 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + catch ( Exception ex ) { <nl> + return ; <nl> + } <nl> + / / fallthru <nl> + case 7 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + / / fallthru <nl> + case 8 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + finally { <nl> + } <nl> + / / fallthru <nl> + case 9 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + catch ( Exception ex ) { <nl> + } <nl> + / / fallthru <nl> + case 10 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + catch ( Exception ex ) { <nl> + } <nl> + / / fallthru <nl> + default : <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + private static class Resource implements AutoCloseable { <nl> + @ Override <nl> + public void close ( ) throws Exception { <nl> + } <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java <nl> deleted file mode 100644 <nl> index 19cbc42 . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java <nl> + + + / dev / null <nl> @ @ - 1 , 5 + 0 , 0 @ @ <nl> - / / non - compiled with eclipse : no package required by test <nl> - public class InputIllegalInstantiationNoPackage { <nl> - Boolean obj1 = new Boolean ( true ) ; <nl> - String obj2 = new String ( ) ; <nl> - } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java <nl> new file mode 100644 <nl> index 0000000 . . fd206ea <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java <nl> @ @ - 0 , 0 + 1 , 79 @ @ <nl> + / / non - compiled with eclipse till https : / / bugs . eclipse . org / bugs / show _ bug . cgi ? id = 543090 <nl> + / / Compilable by javac , but noncompilable by eclipse <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . nofinalizer ; <nl> + <nl> + public class InputNoFinalizerFallThrough { <nl> + <nl> + void tryResource ( ) throws Exception { <nl> + switch ( hashCode ( ) ) { <nl> + case 1 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + case 2 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + finally { <nl> + return ; <nl> + } <nl> + case 3 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + catch ( Exception ex ) { <nl> + return ; <nl> + } <nl> + case 4 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + finally { <nl> + return ; <nl> + } <nl> + case 5 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + finally { <nl> + } <nl> + case 6 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + catch ( Exception ex ) { <nl> + return ; <nl> + } <nl> + / / fallthru <nl> + case 7 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + / / fallthru <nl> + case 8 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + finally { <nl> + } <nl> + / / fallthru <nl> + case 9 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + catch ( Exception ex ) { <nl> + } <nl> + / / fallthru <nl> + case 10 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + catch ( Exception ex ) { <nl> + } <nl> + / / fallthru <nl> + default : <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + private static class Resource implements AutoCloseable { <nl> + @ Override <nl> + public void close ( ) throws Exception { <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java <nl> deleted file mode 100644 <nl> index 70441cf . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java <nl> + + + / dev / null <nl> @ @ - 1 , 3 + 0 , 0 @ @ <nl> - / / non - compiled with eclipse : No package here . Compilable by javac , but noncompilable by eclipse <nl> - public class InputPackageDeclarationNoPackage { <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java <nl> index 384499f . . 4f4e7c8 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java <nl> @ @ - 449 , 79 + 449 , 6 @ @ public class InputFallThrough <nl> } <nl> } <nl> <nl> - void tryResource ( ) throws Exception { <nl> - switch ( hashCode ( ) ) { <nl> - case 1 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - case 2 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - finally { <nl> - return ; <nl> - } <nl> - case 3 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - catch ( Exception ex ) { <nl> - return ; <nl> - } <nl> - case 4 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - finally { <nl> - return ; <nl> - } <nl> - case 5 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - finally { <nl> - } <nl> - case 6 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - catch ( Exception ex ) { <nl> - return ; <nl> - } <nl> - / / fallthru <nl> - case 7 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - / / fallthru <nl> - case 8 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - finally { <nl> - } <nl> - / / fallthru <nl> - case 9 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - catch ( Exception ex ) { <nl> - } <nl> - / / fallthru <nl> - case 10 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - catch ( Exception ex ) { <nl> - } <nl> - / / fallthru <nl> - default : <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - private static class Resource implements AutoCloseable { <nl> - @ Override <nl> - public void close ( ) throws Exception { <nl> - } <nl> - } <nl> - <nl> void synchronizedStatement ( ) { <nl> switch ( hashCode ( ) ) { <nl> case 1 : <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java <nl> new file mode 100644 <nl> index 0000000 . . 46d4cf0 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java <nl> @ @ - 0 , 0 + 1 , 4 @ @ <nl> + public class InputIllegalInstantiationNoPackage { <nl> + Boolean obj1 = new Boolean ( true ) ; <nl> + String obj2 = new String ( ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java <nl> index 6d7f6e3 . . ed9547b 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java <nl> @ @ - 449 , 76 + 449 , 4 @ @ public class InputNoFinalizerFallThrough <nl> } <nl> } <nl> <nl> - void tryResource ( ) throws Exception { <nl> - switch ( hashCode ( ) ) { <nl> - case 1 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - case 2 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - finally { <nl> - return ; <nl> - } <nl> - case 3 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - catch ( Exception ex ) { <nl> - return ; <nl> - } <nl> - case 4 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - finally { <nl> - return ; <nl> - } <nl> - case 5 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - finally { <nl> - } <nl> - case 6 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - catch ( Exception ex ) { <nl> - return ; <nl> - } <nl> - / / fallthru <nl> - case 7 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - / / fallthru <nl> - case 8 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - finally { <nl> - } <nl> - / / fallthru <nl> - case 9 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - } <nl> - catch ( Exception ex ) { <nl> - } <nl> - / / fallthru <nl> - case 10 : <nl> - try ( final Resource resource = new Resource ( ) ) { <nl> - return ; <nl> - } <nl> - catch ( Exception ex ) { <nl> - } <nl> - / / fallthru <nl> - default : <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - private static class Resource implements AutoCloseable { <nl> - @ Override <nl> - public void close ( ) throws Exception { <nl> - } <nl> - } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java <nl> new file mode 100644 <nl> index 0000000 . . dee50bd <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java <nl> @ @ - 0 , 0 + 1 , 2 @ @ <nl> + public class InputPackageDeclarationNoPackage { <nl> + }
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index a025c91 . . 1780d72 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 303 , 7 + 303 , 7 @ @ <nl> < dependency > <nl> < groupId > org . eclipse . jgit < / groupId > <nl> < artifactId > org . eclipse . jgit < / artifactId > <nl> - < version > 4 . 7 . 1 . 201706071930 - r < / version > <nl> + < version > 4 . 8 . 0 . 201706111038 - r < / version > <nl> < scope > test < / scope > <nl> < / dependency > <nl> < dependency >

TEST DIFF:
diff - - git a / . ci / eclipse - compiler - javac . sh b / . ci / eclipse - compiler - javac . sh 
 index 1502fc3 . . cc9491e 100755 
 - - - a / . ci / eclipse - compiler - javac . sh 
 + + + b / . ci / eclipse - compiler - javac . sh 
 @ @ - 7 , 8 + 7 , 8 @ @ if [ - z " $ 1 " ] ; then 
 exit 1 
 fi 
 
 - ECJ _ JAR = " ecj - 4 . 7 . jar " 
 - ECJ _ MAVEN _ VERSION = " R - 4 . 7 - 201706120950 " 
 + ECJ _ JAR = " ecj - 4 . 10 . jar " 
 + ECJ _ MAVEN _ VERSION = " R - 4 . 10 - 201812060815 " 
 ECJ _ PATH = ~ / . m2 / repository / $ ECJ _ MAVEN _ VERSION / $ ECJ _ JAR 
 
 if [ ! - f $ ECJ _ PATH ] ; then 
 diff - - git a / . ci / jsoref - spellchecker / whitelist . words b / . ci / jsoref - spellchecker / whitelist . words 
 index 660fdb5 . . 35efec7 100644 
 - - - a / . ci / jsoref - spellchecker / whitelist . words 
 + + + b / . ci / jsoref - spellchecker / whitelist . words 
 @ @ - 1075 , 7 + 1075 , 6 @ @ rp 
 rparen 
 rpmfind 
 rq 
 - Rrequired 
 Rrridden 
 RRRR 
 RSPEC 
 diff - - git a / config / checkstyle _ resources _ suppressions . xml b / config / checkstyle _ resources _ suppressions . xml 
 index 3aef04c . . 9212077 100644 
 - - - a / config / checkstyle _ resources _ suppressions . xml 
 + + + b / config / checkstyle _ resources _ suppressions . xml 
 @ @ - 8 , 6 + 8 , 8 @ @ 
 
 < ! - - intentional problem for testing - - > 
 < suppress checks = " PackageDeclarationCheck " 
 + files = " packagedeclaration [ \ \ / ] InputPackageDeclarationNoPackage \ . java " / > 
 + < suppress checks = " PackageDeclarationCheck " 
 files = " packagedeclaration [ \ \ / ] InputPackageDeclarationWithCommentOnly \ . java " / > 
 < suppress checks = " PackageDeclarationCheck " 
 files = " [ \ \ / ] resources - noncompilable [ \ \ / ] . * [ \ \ / ] packagedeclaration [ \ \ / ] Input . * \ . java " / > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java 
 index fdfc26f . . 5df7aab 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 
 public class FallThroughCheckTest extends AbstractModuleTestSupport { 
 
 @ @ - 54 , 9 + 55 , 9 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { 
 " 424 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 436 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 446 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 555 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 556 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 557 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 482 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 483 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 484 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputFallThrough . java " ) , 
 @ @ - 64 , 6 + 65 , 15 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testTryWithResources ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( FallThroughCheck . class ) ; 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , 
 + getNonCompilablePath ( " InputFallThrough . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 public void testLastCaseGroup ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( FallThroughCheck . class ) ; 
 checkConfig . addAttribute ( " checkLastCaseGroup " , " true " ) ; 
 @ @ - 85 , 9 + 95 , 9 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { 
 " 424 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 436 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 446 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 555 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 556 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 557 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 482 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 483 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 484 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputFallThrough . java " ) , 
 @ @ - 133 , 15 + 143 , 10 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { 
 " 424 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 436 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 446 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 491 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 495 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 501 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 507 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 514 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 546 : 12 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 555 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 556 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - " 557 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 473 : 12 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 482 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 483 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 484 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputFallThrough . java " ) , 
 @ @ - 149 , 11 + 154 , 29 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testOwnPatternTryWithResources ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( FallThroughCheck . class ) ; 
 + checkConfig . addAttribute ( " reliefPattern " , " Continue with next case " ) ; 
 + 
 + final String [ ] expected = { 
 + " 46 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 50 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 56 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 62 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 69 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + } ; 
 + verify ( checkConfig , 
 + getNonCompilablePath ( " InputFallThrough . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 public void testTokensNotNull ( ) { 
 final FallThroughCheck check = new FallThroughCheck ( ) ; 
 Assert . assertNotNull ( " Acceptable tokens should not be null " , check . getAcceptableTokens ( ) ) ; 
 Assert . assertNotNull ( " Default tokens should not be null " , check . getDefaultTokens ( ) ) ; 
 - Assert . assertNotNull ( " Rrequired tokens should not be null " , check . getRequiredTokens ( ) ) ; 
 + Assert . assertNotNull ( " Required tokens should not be null " , check . getRequiredTokens ( ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 index 8fb68d9 . . fd31ad3 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 @ @ - 106 , 11 + 106 , 9 @ @ public class IllegalInstantiationCheckTest 
 " classes " , 
 " java . lang . Boolean " ) ; 
 final String [ ] expected = { 
 - " 3 : 20 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , 
 + " 2 : 20 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , 
 } ; 
 - verify ( checkConfig , 
 - getNonCompilablePath ( " InputIllegalInstantiationNoPackage . java " ) , 
 - expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalInstantiationNoPackage . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java 
 index afa5a91 . . f8ece94 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java 
 @ @ - 71 , 4 + 71 , 13 @ @ public class NoFinalizerCheckTest 
 verify ( checkConfig , getPath ( " InputNoFinalizerFallThrough . java " ) , expected ) ; 
 } 
 
 + @ Test 
 + public void testHasNoFinalizerTryWithResource ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( NoFinalizerCheck . class ) ; 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputNoFinalizerFallThrough . java " ) , expected ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java 
 index 29eb8eb . . 816ff03 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java 
 @ @ - 41 , 11 + 41 , 10 @ @ public class PackageDeclarationCheckTest extends AbstractModuleTestSupport { 
 final DefaultConfiguration checkConfig = createModuleConfig ( PackageDeclarationCheck . class ) ; 
 
 final String [ ] expected = { 
 - " 2 : " + getCheckMessage ( MSG _ KEY _ MISSING ) , 
 + " 1 : " + getCheckMessage ( MSG _ KEY _ MISSING ) , 
 } ; 
 
 - verify ( checkConfig , 
 - getNonCompilablePath ( " InputPackageDeclarationNoPackage . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputPackageDeclarationNoPackage . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java 
 new file mode 100644 
 index 0000000 . . 47ff982 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java 
 @ @ - 0 , 0 + 1 , 80 @ @ 
 + / / non - compiled with eclipse till https : / / bugs . eclipse . org / bugs / show _ bug . cgi ? id = 543090 
 + / / Compilable by javac , but noncompilable by eclipse 
 + package com . puppycrawl . tools . checkstyle . checks . coding . fallthrough ; 
 + 
 + public class InputFallThrough 
 + { 
 + void tryResource ( ) throws Exception { 
 + switch ( hashCode ( ) ) { 
 + case 1 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + case 2 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + finally { 
 + return ; 
 + } 
 + case 3 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + catch ( Exception ex ) { 
 + return ; 
 + } 
 + case 4 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + finally { 
 + return ; 
 + } 
 + case 5 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + finally { 
 + } 
 + case 6 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + catch ( Exception ex ) { 
 + return ; 
 + } 
 + / / fallthru 
 + case 7 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + / / fallthru 
 + case 8 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + finally { 
 + } 
 + / / fallthru 
 + case 9 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + catch ( Exception ex ) { 
 + } 
 + / / fallthru 
 + case 10 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + catch ( Exception ex ) { 
 + } 
 + / / fallthru 
 + default : 
 + break ; 
 + } 
 + } 
 + 
 + private static class Resource implements AutoCloseable { 
 + @ Override 
 + public void close ( ) throws Exception { 
 + } 
 + } 
 + 
 + } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java 
 deleted file mode 100644 
 index 19cbc42 . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java 
 + + + / dev / null 
 @ @ - 1 , 5 + 0 , 0 @ @ 
 - / / non - compiled with eclipse : no package required by test 
 - public class InputIllegalInstantiationNoPackage { 
 - Boolean obj1 = new Boolean ( true ) ; 
 - String obj2 = new String ( ) ; 
 - } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java 
 new file mode 100644 
 index 0000000 . . fd206ea 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java 
 @ @ - 0 , 0 + 1 , 79 @ @ 
 + / / non - compiled with eclipse till https : / / bugs . eclipse . org / bugs / show _ bug . cgi ? id = 543090 
 + / / Compilable by javac , but noncompilable by eclipse 
 + package com . puppycrawl . tools . checkstyle . checks . coding . nofinalizer ; 
 + 
 + public class InputNoFinalizerFallThrough { 
 + 
 + void tryResource ( ) throws Exception { 
 + switch ( hashCode ( ) ) { 
 + case 1 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + case 2 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + finally { 
 + return ; 
 + } 
 + case 3 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + catch ( Exception ex ) { 
 + return ; 
 + } 
 + case 4 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + finally { 
 + return ; 
 + } 
 + case 5 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + finally { 
 + } 
 + case 6 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + catch ( Exception ex ) { 
 + return ; 
 + } 
 + / / fallthru 
 + case 7 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + / / fallthru 
 + case 8 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + finally { 
 + } 
 + / / fallthru 
 + case 9 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + catch ( Exception ex ) { 
 + } 
 + / / fallthru 
 + case 10 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + catch ( Exception ex ) { 
 + } 
 + / / fallthru 
 + default : 
 + break ; 
 + } 
 + } 
 + 
 + private static class Resource implements AutoCloseable { 
 + @ Override 
 + public void close ( ) throws Exception { 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java 
 deleted file mode 100644 
 index 70441cf . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java 
 + + + / dev / null 
 @ @ - 1 , 3 + 0 , 0 @ @ 
 - / / non - compiled with eclipse : No package here . Compilable by javac , but noncompilable by eclipse 
 - public class InputPackageDeclarationNoPackage { 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java 
 index 384499f . . 4f4e7c8 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java 
 @ @ - 449 , 79 + 449 , 6 @ @ public class InputFallThrough 
 } 
 } 
 
 - void tryResource ( ) throws Exception { 
 - switch ( hashCode ( ) ) { 
 - case 1 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - case 2 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - finally { 
 - return ; 
 - } 
 - case 3 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - catch ( Exception ex ) { 
 - return ; 
 - } 
 - case 4 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - finally { 
 - return ; 
 - } 
 - case 5 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - finally { 
 - } 
 - case 6 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - catch ( Exception ex ) { 
 - return ; 
 - } 
 - / / fallthru 
 - case 7 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - / / fallthru 
 - case 8 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - finally { 
 - } 
 - / / fallthru 
 - case 9 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - catch ( Exception ex ) { 
 - } 
 - / / fallthru 
 - case 10 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - catch ( Exception ex ) { 
 - } 
 - / / fallthru 
 - default : 
 - break ; 
 - } 
 - } 
 - 
 - private static class Resource implements AutoCloseable { 
 - @ Override 
 - public void close ( ) throws Exception { 
 - } 
 - } 
 - 
 void synchronizedStatement ( ) { 
 switch ( hashCode ( ) ) { 
 case 1 : 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java 
 new file mode 100644 
 index 0000000 . . 46d4cf0 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + public class InputIllegalInstantiationNoPackage { 
 + Boolean obj1 = new Boolean ( true ) ; 
 + String obj2 = new String ( ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java 
 index 6d7f6e3 . . ed9547b 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java 
 @ @ - 449 , 76 + 449 , 4 @ @ public class InputNoFinalizerFallThrough 
 } 
 } 
 
 - void tryResource ( ) throws Exception { 
 - switch ( hashCode ( ) ) { 
 - case 1 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - case 2 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - finally { 
 - return ; 
 - } 
 - case 3 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - catch ( Exception ex ) { 
 - return ; 
 - } 
 - case 4 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - finally { 
 - return ; 
 - } 
 - case 5 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - finally { 
 - } 
 - case 6 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - catch ( Exception ex ) { 
 - return ; 
 - } 
 - / / fallthru 
 - case 7 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - / / fallthru 
 - case 8 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - finally { 
 - } 
 - / / fallthru 
 - case 9 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - } 
 - catch ( Exception ex ) { 
 - } 
 - / / fallthru 
 - case 10 : 
 - try ( final Resource resource = new Resource ( ) ) { 
 - return ; 
 - } 
 - catch ( Exception ex ) { 
 - } 
 - / / fallthru 
 - default : 
 - break ; 
 - } 
 - } 
 - 
 - private static class Resource implements AutoCloseable { 
 - @ Override 
 - public void close ( ) throws Exception { 
 - } 
 - } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java 
 new file mode 100644 
 index 0000000 . . dee50bd 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java 
 @ @ - 0 , 0 + 1 , 2 @ @ 
 + public class InputPackageDeclarationNoPackage { 
 + }

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index a025c91 . . 1780d72 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 303 , 7 + 303 , 7 @ @ 
 < dependency > 
 < groupId > org . eclipse . jgit < / groupId > 
 < artifactId > org . eclipse . jgit < / artifactId > 
 - < version > 4 . 7 . 1 . 201706071930 - r < / version > 
 + < version > 4 . 8 . 0 . 201706111038 - r < / version > 
 < scope > test < / scope > 
 < / dependency > 
 < dependency >
