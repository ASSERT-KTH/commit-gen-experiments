BLEU SCORE: 0.02383853510228548

TEST MSG: Issue # 2836 : changed AbstractParenPadCheck to public class
GENERATED MSG: fix for Checkstyle violations

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java <nl> index eae298b . . 10c5f25 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java <nl> @ @ - 34 , 7 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < / p > <nl> * @ author Oliver Burn <nl> * / <nl> - abstract class AbstractParenPadCheck <nl> + public abstract class AbstractParenPadCheck <nl> extends Check { <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java <nl> index 149ed0f . . 21a7243 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java <nl> @ @ - 18 , 9 + 18 , 12 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> <nl> + import java . util . regex . Pattern ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 46 , 18 + 49 , 51 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * & lt ; property name = " format " value = " ^ [ a - z ] ( _ ? [ a - zA - Z0 - 9 ] + ) * $ " / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> + * < p > <nl> + * An example of one character variable name in <nl> + * initialization expression ( like " i " ) in FOR loop : <nl> + * < / p > <nl> + * < pre > <nl> + * for ( int i = 1 ; i & lt ; 10 ; i + + ) { } <nl> + * < / pre > <nl> + * < p > <nl> + * An example of how to configure the check to allow one char variable name in <nl> + * < a href = " http : / / docs . oracle . com / javase / tutorial / java / nutsandbolts / for . html " > <nl> + * initialization expressions < / a > in FOR loop : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = " LocalVariableName " & gt ; <nl> + * & lt ; property name = " allowOneCharVarInForLoop " value = " true " / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * <nl> * @ author Rick Giles <nl> + * @ author maxvetrenko <nl> * @ version 1 . 0 <nl> * / <nl> public class LocalVariableNameCheck <nl> extends AbstractNameCheck <nl> { <nl> + / * * <nl> + * Allow one character name for initialization expression in FOR loop . <nl> + * / <nl> + private boolean mAllowOneCharVarInForLoop ; <nl> + <nl> + / * * Regexp for one - char loop variables . * / <nl> + private static Pattern sSingleChar = Utils . getPattern ( " ^ [ a - z ] $ " ) ; <nl> + <nl> / * * Creates a new < code > LocalVariableNameCheck < / code > instance . * / <nl> public LocalVariableNameCheck ( ) <nl> { <nl> super ( " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) ; <nl> } <nl> <nl> + public final void setAllowOneCharVarInForLoop ( boolean aAllow ) <nl> + { <nl> + mAllowOneCharVarInForLoop = aAllow ; <nl> + } <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> { <nl> @ @ - 74 , 6 + 110 , 23 @ @ public class LocalVariableNameCheck <nl> aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> final boolean isFinal = ( modifiersAST ! = null ) <nl> & & modifiersAST . branchContains ( TokenTypes . FINAL ) ; <nl> + if ( mAllowOneCharVarInForLoop & & isForLoopVariable ( aAST ) ) { <nl> + final String variableName = <nl> + aAST . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + return ! sSingleChar . matcher ( variableName ) . find ( ) ; <nl> + } <nl> return ( ! isFinal & & ScopeUtils . isLocalVariableDef ( aAST ) ) ; <nl> } <nl> + <nl> + / * * <nl> + * Checks if a variable is the loop ' s one . <nl> + * @ param aVariableDef variable definition . <nl> + * @ return true if a variable is the loop ' s one . <nl> + * / <nl> + private boolean isForLoopVariable ( DetailAST aVariableDef ) <nl> + { <nl> + final int parentType = aVariableDef . getParent ( ) . getType ( ) ; <nl> + return parentType = = TokenTypes . FOR _ INIT <nl> + | | parentType = = TokenTypes . FOR _ EACH _ CLAUSE ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheckTest . java <nl> index 8cb94f4 . . 59fc924 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheckTest . java <nl> @ @ - 63 , 5 + 63 , 20 @ @ public class LocalVariableNameCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputEmptyStatement . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testLoopVariables ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( LocalVariableNameCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , " ^ [ a - z ] { 2 , } [ a - zA - Z0 - 9 ] * $ " ) ; <nl> + checkConfig . addAttribute ( " allowOneCharVarInForLoop " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 19 : 21 : Name ' i ' must match pattern ' ^ [ a - z ] { 2 , } [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 25 : 17 : Name ' Index ' must match pattern ' ^ [ a - z ] { 2 , } [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputOneCharInintVarName . java " ) , expected ) ; <nl> + } <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputOneCharInintVarName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputOneCharInintVarName . java <nl> new file mode 100644 <nl> index 0000000 . . 329e3c2 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputOneCharInintVarName . java <nl> @ @ - 0 , 0 + 1 , 45 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : Feb - 2001 <nl> + / / Ignore error <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + import java . io . * ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> + class InputOneCharInintVarName <nl> + { <nl> + 	 public void fooMethod ( ) <nl> + 	 { <nl> + 	 	 for ( int i = 1 ; i < 10 ; i + + ) { <nl> + 	 	 	 / / come code <nl> + 	 	 } <nl> + 	 	 <nl> + 	 	 int i = 0 ; <nl> + 	 	 <nl> + for ( int index = 1 ; index < 10 ; index + + ) { <nl> + 	 	 	 / / come code <nl> + 	 	 } <nl> + <nl> + for ( int Index = 1 ; Index < 10 ; Index + + ) { <nl> + 	 	 	 / / come code <nl> + 	 	 } <nl> + <nl> + int index = 1 ; <nl> + <nl> + 	 	 for ( ; index < 10 ; index + + ) { <nl> + 	 	 	 / / come code <nl> + 	 	 } <nl> + 	 	 <nl> + 	 	 for ( ; i < 12 ; i + + ) { <nl> + 	 	 	 / / come code <nl> + 	 	 } <nl> + 	 	 <nl> + 	 	 Map < String , String > map = new HashMap < String , String > ( ) ; <nl> + 	 	 <nl> + 	 	 for ( Map . Entry < String , String > e : map . entrySet ( ) ) { <nl> + 	 	 	 / / some code <nl> + 	 	 } <nl> + 	 } <nl> + } <nl> diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml <nl> index 7dfc1e1 . . 49ced23 100644 <nl> - - - a / src / xdocs / config _ naming . xml <nl> + + + b / src / xdocs / config _ naming . xml <nl> @ @ - 136 , 8 + 136 , 40 @ @ <nl> & lt ; property name = & quot ; tokens & quot ; value = & quot ; PARAMETER _ DEF & quot ; / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> + < p > <nl> + The check provides the following properties : <nl> + < / p > <nl> < / subsection > <nl> <nl> + < table > <nl> + < tr > <nl> + < th > name < / th > <nl> + < th > description < / th > <nl> + < th > type < / th > <nl> + < th > default value < / th > <nl> + < / tr > <nl> + < tr > <nl> + < td > allowOneCharVarInForLoop < / td > <nl> + < td > <nl> + Allow one character variable name in < a href = " http : / / docs . oracle . com / javase / tutorial / java / nutsandbolts / for . html " > initialization expressions < / a > in FOR loop . For example : <nl> + < pre > <nl> + for ( int i = 1 ; i & lt ; 10 ; i + + ) { } <nl> + < / pre > <nl> + < / td > <nl> + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> + < td > < code > false < / code > < / td > <nl> + < / tr > <nl> + < / table > <nl> + < p > <nl> + An example of how to configure the check to allow one character variable name in <nl> + < a href = " http : / / docs . oracle . com / javase / tutorial / java / nutsandbolts / for . html " > <nl> + initialization expressions < / a > in FOR loop : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = " LocalVariableName " & gt ; <nl> + & lt ; property name = " allowOneCharVarInForLoop " value = " true " / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> < subsection name = " TypeName " > <nl> < p > <nl> Module < code > TypeName < / code > also has property

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java 
 index eae298b . . 10c5f25 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java 
 @ @ - 34 , 7 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < / p > 
 * @ author Oliver Burn 
 * / 
 - abstract class AbstractParenPadCheck 
 + public abstract class AbstractParenPadCheck 
 extends Check { 
 
 / * *

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java 
 index 149ed0f . . 21a7243 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java 
 @ @ - 18 , 9 + 18 , 12 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks . naming ; 
 
 + import java . util . regex . Pattern ; 
 + 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . api . Utils ; 
 
 / * * 
 * < p > 
 @ @ - 46 , 18 + 49 , 51 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * & lt ; property name = " format " value = " ^ [ a - z ] ( _ ? [ a - zA - Z0 - 9 ] + ) * $ " / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 + * < p > 
 + * An example of one character variable name in 
 + * initialization expression ( like " i " ) in FOR loop : 
 + * < / p > 
 + * < pre > 
 + * for ( int i = 1 ; i & lt ; 10 ; i + + ) { } 
 + * < / pre > 
 + * < p > 
 + * An example of how to configure the check to allow one char variable name in 
 + * < a href = " http : / / docs . oracle . com / javase / tutorial / java / nutsandbolts / for . html " > 
 + * initialization expressions < / a > in FOR loop : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = " LocalVariableName " & gt ; 
 + * & lt ; property name = " allowOneCharVarInForLoop " value = " true " / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * 
 * @ author Rick Giles 
 + * @ author maxvetrenko 
 * @ version 1 . 0 
 * / 
 public class LocalVariableNameCheck 
 extends AbstractNameCheck 
 { 
 + / * * 
 + * Allow one character name for initialization expression in FOR loop . 
 + * / 
 + private boolean mAllowOneCharVarInForLoop ; 
 + 
 + / * * Regexp for one - char loop variables . * / 
 + private static Pattern sSingleChar = Utils . getPattern ( " ^ [ a - z ] $ " ) ; 
 + 
 / * * Creates a new < code > LocalVariableNameCheck < / code > instance . * / 
 public LocalVariableNameCheck ( ) 
 { 
 super ( " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) ; 
 } 
 
 + public final void setAllowOneCharVarInForLoop ( boolean aAllow ) 
 + { 
 + mAllowOneCharVarInForLoop = aAllow ; 
 + } 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) 
 { 
 @ @ - 74 , 6 + 110 , 23 @ @ public class LocalVariableNameCheck 
 aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 final boolean isFinal = ( modifiersAST ! = null ) 
 & & modifiersAST . branchContains ( TokenTypes . FINAL ) ; 
 + if ( mAllowOneCharVarInForLoop & & isForLoopVariable ( aAST ) ) { 
 + final String variableName = 
 + aAST . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + return ! sSingleChar . matcher ( variableName ) . find ( ) ; 
 + } 
 return ( ! isFinal & & ScopeUtils . isLocalVariableDef ( aAST ) ) ; 
 } 
 + 
 + / * * 
 + * Checks if a variable is the loop ' s one . 
 + * @ param aVariableDef variable definition . 
 + * @ return true if a variable is the loop ' s one . 
 + * / 
 + private boolean isForLoopVariable ( DetailAST aVariableDef ) 
 + { 
 + final int parentType = aVariableDef . getParent ( ) . getType ( ) ; 
 + return parentType = = TokenTypes . FOR _ INIT 
 + | | parentType = = TokenTypes . FOR _ EACH _ CLAUSE ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheckTest . java 
 index 8cb94f4 . . 59fc924 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheckTest . java 
 @ @ - 63 , 5 + 63 , 20 @ @ public class LocalVariableNameCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputEmptyStatement . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testLoopVariables ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( LocalVariableNameCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , " ^ [ a - z ] { 2 , } [ a - zA - Z0 - 9 ] * $ " ) ; 
 + checkConfig . addAttribute ( " allowOneCharVarInForLoop " , " true " ) ; 
 + final String [ ] expected = { 
 + " 19 : 21 : Name ' i ' must match pattern ' ^ [ a - z ] { 2 , } [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 25 : 17 : Name ' Index ' must match pattern ' ^ [ a - z ] { 2 , } [ a - zA - Z0 - 9 ] * $ ' . " , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputOneCharInintVarName . java " ) , expected ) ; 
 + } 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputOneCharInintVarName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputOneCharInintVarName . java 
 new file mode 100644 
 index 0000000 . . 329e3c2 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputOneCharInintVarName . java 
 @ @ - 0 , 0 + 1 , 45 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : Feb - 2001 
 + / / Ignore error 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle ; 
 + import java . io . * ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 + class InputOneCharInintVarName 
 + { 
 + 	 public void fooMethod ( ) 
 + 	 { 
 + 	 	 for ( int i = 1 ; i < 10 ; i + + ) { 
 + 	 	 	 / / come code 
 + 	 	 } 
 + 	 	 
 + 	 	 int i = 0 ; 
 + 	 	 
 + for ( int index = 1 ; index < 10 ; index + + ) { 
 + 	 	 	 / / come code 
 + 	 	 } 
 + 
 + for ( int Index = 1 ; Index < 10 ; Index + + ) { 
 + 	 	 	 / / come code 
 + 	 	 } 
 + 
 + int index = 1 ; 
 + 
 + 	 	 for ( ; index < 10 ; index + + ) { 
 + 	 	 	 / / come code 
 + 	 	 } 
 + 	 	 
 + 	 	 for ( ; i < 12 ; i + + ) { 
 + 	 	 	 / / come code 
 + 	 	 } 
 + 	 	 
 + 	 	 Map < String , String > map = new HashMap < String , String > ( ) ; 
 + 	 	 
 + 	 	 for ( Map . Entry < String , String > e : map . entrySet ( ) ) { 
 + 	 	 	 / / some code 
 + 	 	 } 
 + 	 } 
 + } 
 diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml 
 index 7dfc1e1 . . 49ced23 100644 
 - - - a / src / xdocs / config _ naming . xml 
 + + + b / src / xdocs / config _ naming . xml 
 @ @ - 136 , 8 + 136 , 40 @ @ 
 & lt ; property name = & quot ; tokens & quot ; value = & quot ; PARAMETER _ DEF & quot ; / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 + < p > 
 + The check provides the following properties : 
 + < / p > 
 < / subsection > 
 
 + < table > 
 + < tr > 
 + < th > name < / th > 
 + < th > description < / th > 
 + < th > type < / th > 
 + < th > default value < / th > 
 + < / tr > 
 + < tr > 
 + < td > allowOneCharVarInForLoop < / td > 
 + < td > 
 + Allow one character variable name in < a href = " http : / / docs . oracle . com / javase / tutorial / java / nutsandbolts / for . html " > initialization expressions < / a > in FOR loop . For example : 
 + < pre > 
 + for ( int i = 1 ; i & lt ; 10 ; i + + ) { } 
 + < / pre > 
 + < / td > 
 + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 + < td > < code > false < / code > < / td > 
 + < / tr > 
 + < / table > 
 + < p > 
 + An example of how to configure the check to allow one character variable name in 
 + < a href = " http : / / docs . oracle . com / javase / tutorial / java / nutsandbolts / for . html " > 
 + initialization expressions < / a > in FOR loop : 
 + < / p > 
 + < source > 
 + & lt ; module name = " LocalVariableName " & gt ; 
 + & lt ; property name = " allowOneCharVarInForLoop " value = " true " / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 < subsection name = " TypeName " > 
 < p > 
 Module < code > TypeName < / code > also has property
