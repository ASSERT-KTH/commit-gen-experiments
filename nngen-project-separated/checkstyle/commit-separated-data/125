BLEU SCORE: 0.02190407726635374

TEST MSG: Issue # 6273 : removed comment support from JavadocMethodCheck
GENERATED MSG: Added option to Javadoc Method Name Check - ignore method name regex , issue # 430

TEST DIFF (one line): diff - - git a / . ci / pitest . sh b / . ci / pitest . sh <nl> index b7808d7 . . 1a2475a 100755 <nl> - - - a / . ci / pitest . sh <nl> + + + b / . ci / pitest . sh <nl> @ @ - 128 , 7 + 128 , 6 @ @ pitest - javadoc ) <nl> " AbstractTypeAwareCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > typeParams . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > final int col = noargMultilineStart . start ( 1 ) - 1 ; < / span > < / pre > < / td > < / tr > " <nl> " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return ( ast . getType ( ) = = TokenTypes . METHOD _ DEF | | ast . getType ( ) = = TokenTypes . CTOR _ DEF ) < / span > < / pre > < / td > < / tr > " <nl> - " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return true ; < / span > < / pre > < / td > < / tr > " <nl> " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( remIndex & # 60 ; lines . length ) { < / span > < / pre > < / td > < / tr > " <nl> " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( remIndex & # 60 ; lines . length ) { < / span > < / pre > < / td > < / tr > " <nl> " JavadocPackageCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > directoriesChecked . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index 849f607 . . 0a9ac24 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 335 , 11 + 335 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck { <nl> } <nl> <nl> @ Override <nl> - public boolean isCommentNodesRequired ( ) { <nl> - return true ; <nl> - } <nl> - <nl> - @ Override <nl> protected final void processAST ( DetailAST ast ) { <nl> final Scope theScope = calculateScope ( ast ) ; <nl> if ( shouldCheck ( ast , theScope ) ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java <nl> index e3fd6a6 . . db9de7b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java <nl> @ @ - 627 , 4 + 627 , 16 @ @ public class JavadocMethodCheckTest extends AbstractModuleTestSupport { <nl> verify ( checkConfig , getPath ( " InputJavadocMethodReceiverParameter . java " ) , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testJavadocInMethod ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( JavadocMethodCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 4 : 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + " 6 : 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + " 9 : 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + " 13 : 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputJavadocMethodJavadocInMethod . java " ) , expected ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / javadocmethod / InputJavadocMethodJavadocInMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / javadocmethod / InputJavadocMethodJavadocInMethod . java <nl> new file mode 100644 <nl> index 0000000 . . 6863438 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / javadocmethod / InputJavadocMethodJavadocInMethod . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . javadoc . javadocmethod ; <nl> + <nl> + public class InputJavadocMethodJavadocInMethod { <nl> + public void foo1 ( ) { } <nl> + <nl> + @ Deprecated <nl> + public void foo2 ( ) { } <nl> + <nl> + @ Deprecated <nl> + / * * * / <nl> + public void foo3 ( ) { } <nl> + <nl> + public void foo4 ( ) { / * * * / } <nl> + <nl> + @ Deprecated <nl> + public void foo5 ( ) { / * * * / } <nl> + <nl> + @ Deprecated <nl> + / * * * / <nl> + public void foo6 ( ) { / * * * / } <nl> + <nl> + / * * * / <nl> + public void foo7 ( ) { / * * * / } <nl> + <nl> + / * * * / <nl> + @ Deprecated <nl> + public void foo8 ( ) { / * * * / } <nl> + <nl> + / * * * / <nl> + @ Deprecated <nl> + / * * * / <nl> + public void foo9 ( ) { / * * * / } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java <nl> index 6df1449 . . f4502d8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java <nl> @ @ - 37 , 10 + 37 , 10 @ @ public class AvoidStaticImportTest <nl> " 25 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , <nl> " 26 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , <nl> " 27 : Using a static member import should be avoided - java . io . File . createTempFile . " , <nl> - " 28 : Using a static member import should be avoided - sun . net . ftpclient . FtpClient . * . " , <nl> + " 28 : Using a static member import should be avoided - java . io . File . pathSeparator . " , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 55 , 7 + 55 , 7 @ @ public class AvoidStaticImportTest <nl> " 25 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , <nl> " 26 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 70 , 9 + 70 , 9 @ @ public class AvoidStaticImportTest <nl> " 25 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , <nl> " 26 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , <nl> " 27 : Using a static member import should be avoided - java . io . File . createTempFile . " , <nl> - " 28 : Using a static member import should be avoided - sun . net . ftpclient . FtpClient . * . " , <nl> + " 28 : Using a static member import should be avoided - java . io . File . pathSeparator . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 91 , 8 + 91 , 8 @ @ public class AvoidStaticImportTest <nl> " 25 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , <nl> " 26 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , <nl> " 27 : Using a static member import should be avoided - java . io . File . createTempFile . " , <nl> - " 28 : Using a static member import should be avoided - sun . net . ftpclient . FtpClient . * . " , <nl> + " 28 : Using a static member import should be avoided - java . io . File . pathSeparator . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputAvoidStaticImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputAvoidStaticImportCheck . java <nl> new file mode 100644 <nl> index 0000000 . . b4a285d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputAvoidStaticImportCheck . java <nl> @ @ - 0 , 0 + 1 , 111 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . imports ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . imports . * ; <nl> + <nl> + import java . io . * ; <nl> + import java . lang . * ; <nl> + import java . sql . Connection ; <nl> + import java . util . List ; <nl> + import java . util . List ; <nl> + import java . lang . * ; <nl> + import java . util . Iterator ; <nl> + import java . util . Enumeration ; <nl> + import java . util . Arrays ; <nl> + <nl> + import javax . swing . JToolBar ; <nl> + import javax . swing . JToggleButton ; <nl> + import javax . swing . ScrollPaneLayout ; <nl> + import javax . swing . BorderFactory ; <nl> + import static java . io . File . listRoots ; <nl> + <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static java . io . File . createTempFile ; <nl> + import static java . io . File . pathSeparator ; <nl> + <nl> + import java . awt . Component ; <nl> + import java . awt . Graphics2D ; <nl> + import java . awt . HeadlessException ; <nl> + import java . awt . Label ; <nl> + import java . util . Date ; <nl> + import java . util . Calendar ; <nl> + import java . util . BitSet ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . Checker ; <nl> + import com . puppycrawl . tools . checkstyle . CheckerTest ; <nl> + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . Defn ; <nl> + import com . puppycrawl . tools . checkstyle . Input15Extensions ; <nl> + import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; <nl> + import com . puppycrawl . tools . checkstyle . CheckStyleTask ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> + <nl> + / * * <nl> + * Test case for imports <nl> + * Here ' s an import used only by javadoc : { @ link Date } . <nl> + * @ author Oliver Burn <nl> + * @ author lkuehne <nl> + * @ author Michael Studman <nl> + * @ see Calendar Should avoid unused import for Calendar <nl> + * * / <nl> + class InputAvoidStaticImportCheck <nl> + { <nl> + / * * ignore * * / <nl> + private Class mUse1 = Connection . class ; <nl> + / * * ignore * * / <nl> + private Class mUse2 = java . io . File . class ; <nl> + / * * ignore * * / <nl> + private Class mUse3 = Iterator [ ] . class ; <nl> + / * * ignore * * / <nl> + private Class mUse4 = java . util . Enumeration [ ] . class ; <nl> + / * * usage of illegal import * * / <nl> + private String ftpClient = null ; <nl> + <nl> + / * * usage via static method , both normal and fully qualified * / <nl> + { <nl> + int [ ] x = { } ; <nl> + Arrays . sort ( x ) ; <nl> + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; <nl> + File [ ] files = listRoots ( ) ; <nl> + } <nl> + <nl> + / * * usage of inner class as type * / <nl> + private JToolBar . Separator mSep = null ; <nl> + <nl> + / * * usage of inner class in Constructor * / <nl> + private Object mUse5 = new Object ( ) ; <nl> + <nl> + / * * usage of inner class in constructor , fully qualified * / <nl> + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; <nl> + <nl> + / * * we use class name as member ' s name . <nl> + * also an inline JavaDoc - only import { @ link Vector linkText } * / <nl> + private int Component ; <nl> + <nl> + / * * <nl> + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } <nl> + * / <nl> + public void Label ( ) { } <nl> + <nl> + / * * <nl> + * Renders to a { @ linkplain Graphics2D graphics context } . <nl> + * @ throws HeadlessException if no graphis environment can be found . <nl> + * @ exception HeadlessException if no graphis environment can be found . <nl> + * / <nl> + public void render ( ) { } <nl> + <nl> + / * * <nl> + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . <nl> + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . <nl> + * <nl> + * @ param param1 with a link { @ link TestClass6 } <nl> + * @ throws TestClass7 when broken <nl> + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } <nl> + * / <nl> + public void aMethodWithManyLinks ( ) { } <nl> + }

TEST DIFF:
diff - - git a / . ci / pitest . sh b / . ci / pitest . sh 
 index b7808d7 . . 1a2475a 100755 
 - - - a / . ci / pitest . sh 
 + + + b / . ci / pitest . sh 
 @ @ - 128 , 7 + 128 , 6 @ @ pitest - javadoc ) 
 " AbstractTypeAwareCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > typeParams . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > final int col = noargMultilineStart . start ( 1 ) - 1 ; < / span > < / pre > < / td > < / tr > " 
 " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return ( ast . getType ( ) = = TokenTypes . METHOD _ DEF | | ast . getType ( ) = = TokenTypes . CTOR _ DEF ) < / span > < / pre > < / td > < / tr > " 
 - " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return true ; < / span > < / pre > < / td > < / tr > " 
 " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( remIndex & # 60 ; lines . length ) { < / span > < / pre > < / td > < / tr > " 
 " JavadocMethodCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > while ( remIndex & # 60 ; lines . length ) { < / span > < / pre > < / td > < / tr > " 
 " JavadocPackageCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > directoriesChecked . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index 849f607 . . 0a9ac24 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 335 , 11 + 335 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck { 
 } 
 
 @ Override 
 - public boolean isCommentNodesRequired ( ) { 
 - return true ; 
 - } 
 - 
 - @ Override 
 protected final void processAST ( DetailAST ast ) { 
 final Scope theScope = calculateScope ( ast ) ; 
 if ( shouldCheck ( ast , theScope ) ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java 
 index e3fd6a6 . . db9de7b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java 
 @ @ - 627 , 4 + 627 , 16 @ @ public class JavadocMethodCheckTest extends AbstractModuleTestSupport { 
 verify ( checkConfig , getPath ( " InputJavadocMethodReceiverParameter . java " ) , expected ) ; 
 } 
 
 + @ Test 
 + public void testJavadocInMethod ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( JavadocMethodCheck . class ) ; 
 + final String [ ] expected = { 
 + " 4 : 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + " 6 : 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + " 9 : 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + " 13 : 5 : " + getCheckMessage ( MSG _ JAVADOC _ MISSING ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputJavadocMethodJavadocInMethod . java " ) , expected ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / javadocmethod / InputJavadocMethodJavadocInMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / javadocmethod / InputJavadocMethodJavadocInMethod . java 
 new file mode 100644 
 index 0000000 . . 6863438 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / javadocmethod / InputJavadocMethodJavadocInMethod . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . javadoc . javadocmethod ; 
 + 
 + public class InputJavadocMethodJavadocInMethod { 
 + public void foo1 ( ) { } 
 + 
 + @ Deprecated 
 + public void foo2 ( ) { } 
 + 
 + @ Deprecated 
 + / * * * / 
 + public void foo3 ( ) { } 
 + 
 + public void foo4 ( ) { / * * * / } 
 + 
 + @ Deprecated 
 + public void foo5 ( ) { / * * * / } 
 + 
 + @ Deprecated 
 + / * * * / 
 + public void foo6 ( ) { / * * * / } 
 + 
 + / * * * / 
 + public void foo7 ( ) { / * * * / } 
 + 
 + / * * * / 
 + @ Deprecated 
 + public void foo8 ( ) { / * * * / } 
 + 
 + / * * * / 
 + @ Deprecated 
 + / * * * / 
 + public void foo9 ( ) { / * * * / } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java 
 index 6df1449 . . f4502d8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java 
 @ @ - 37 , 10 + 37 , 10 @ @ public class AvoidStaticImportTest 
 " 25 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , 
 " 26 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , 
 " 27 : Using a static member import should be avoided - java . io . File . createTempFile . " , 
 - " 28 : Using a static member import should be avoided - sun . net . ftpclient . FtpClient . * . " , 
 + " 28 : Using a static member import should be avoided - java . io . File . pathSeparator . " , 
 } ; 
 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 55 , 7 + 55 , 7 @ @ public class AvoidStaticImportTest 
 " 25 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , 
 " 26 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , 
 } ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 70 , 9 + 70 , 9 @ @ public class AvoidStaticImportTest 
 " 25 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , 
 " 26 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , 
 " 27 : Using a static member import should be avoided - java . io . File . createTempFile . " , 
 - " 28 : Using a static member import should be avoided - sun . net . ftpclient . FtpClient . * . " , 
 + " 28 : Using a static member import should be avoided - java . io . File . pathSeparator . " , 
 } ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 91 , 8 + 91 , 8 @ @ public class AvoidStaticImportTest 
 " 25 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , 
 " 26 : Using a static member import should be avoided - javax . swing . WindowConstants . * . " , 
 " 27 : Using a static member import should be avoided - java . io . File . createTempFile . " , 
 - " 28 : Using a static member import should be avoided - sun . net . ftpclient . FtpClient . * . " , 
 + " 28 : Using a static member import should be avoided - java . io . File . pathSeparator . " , 
 } ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputImport . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputAvoidStaticImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputAvoidStaticImportCheck . java 
 new file mode 100644 
 index 0000000 . . b4a285d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputAvoidStaticImportCheck . java 
 @ @ - 0 , 0 + 1 , 111 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . imports ; 
 + 
 + import com . puppycrawl . tools . checkstyle . imports . * ; 
 + 
 + import java . io . * ; 
 + import java . lang . * ; 
 + import java . sql . Connection ; 
 + import java . util . List ; 
 + import java . util . List ; 
 + import java . lang . * ; 
 + import java . util . Iterator ; 
 + import java . util . Enumeration ; 
 + import java . util . Arrays ; 
 + 
 + import javax . swing . JToolBar ; 
 + import javax . swing . JToggleButton ; 
 + import javax . swing . ScrollPaneLayout ; 
 + import javax . swing . BorderFactory ; 
 + import static java . io . File . listRoots ; 
 + 
 + import static javax . swing . WindowConstants . * ; 
 + import static javax . swing . WindowConstants . * ; 
 + import static java . io . File . createTempFile ; 
 + import static java . io . File . pathSeparator ; 
 + 
 + import java . awt . Component ; 
 + import java . awt . Graphics2D ; 
 + import java . awt . HeadlessException ; 
 + import java . awt . Label ; 
 + import java . util . Date ; 
 + import java . util . Calendar ; 
 + import java . util . BitSet ; 
 + 
 + import com . puppycrawl . tools . checkstyle . Checker ; 
 + import com . puppycrawl . tools . checkstyle . CheckerTest ; 
 + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . Defn ; 
 + import com . puppycrawl . tools . checkstyle . Input15Extensions ; 
 + import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; 
 + import com . puppycrawl . tools . checkstyle . CheckStyleTask ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 + 
 + / * * 
 + * Test case for imports 
 + * Here ' s an import used only by javadoc : { @ link Date } . 
 + * @ author Oliver Burn 
 + * @ author lkuehne 
 + * @ author Michael Studman 
 + * @ see Calendar Should avoid unused import for Calendar 
 + * * / 
 + class InputAvoidStaticImportCheck 
 + { 
 + / * * ignore * * / 
 + private Class mUse1 = Connection . class ; 
 + / * * ignore * * / 
 + private Class mUse2 = java . io . File . class ; 
 + / * * ignore * * / 
 + private Class mUse3 = Iterator [ ] . class ; 
 + / * * ignore * * / 
 + private Class mUse4 = java . util . Enumeration [ ] . class ; 
 + / * * usage of illegal import * * / 
 + private String ftpClient = null ; 
 + 
 + / * * usage via static method , both normal and fully qualified * / 
 + { 
 + int [ ] x = { } ; 
 + Arrays . sort ( x ) ; 
 + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; 
 + File [ ] files = listRoots ( ) ; 
 + } 
 + 
 + / * * usage of inner class as type * / 
 + private JToolBar . Separator mSep = null ; 
 + 
 + / * * usage of inner class in Constructor * / 
 + private Object mUse5 = new Object ( ) ; 
 + 
 + / * * usage of inner class in constructor , fully qualified * / 
 + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; 
 + 
 + / * * we use class name as member ' s name . 
 + * also an inline JavaDoc - only import { @ link Vector linkText } * / 
 + private int Component ; 
 + 
 + / * * 
 + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } 
 + * / 
 + public void Label ( ) { } 
 + 
 + / * * 
 + * Renders to a { @ linkplain Graphics2D graphics context } . 
 + * @ throws HeadlessException if no graphis environment can be found . 
 + * @ exception HeadlessException if no graphis environment can be found . 
 + * / 
 + public void render ( ) { } 
 + 
 + / * * 
 + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . 
 + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . 
 + * 
 + * @ param param1 with a link { @ link TestClass6 } 
 + * @ throws TestClass7 when broken 
 + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } 
 + * / 
 + public void aMethodWithManyLinks ( ) { } 
 + }
