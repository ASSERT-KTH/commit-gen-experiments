BLEU SCORE: 0.17423472443716534

TEST MSG: config : bump sevntu version to 1 . 31 . 0
GENERATED MSG: config : bump saxon to 9 . 8 . 0 - 10

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 4c5f9f3 . . 8ea6c20 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 208 , 7 + 208 , 7 @ @ <nl> < powermock . version > 2 . 0 . 0 - beta . 5 < / powermock . version > <nl> < saxon . version > 9 . 8 . 0 - 14 < / saxon . version > <nl> < maven . checkstyle . plugin . version > 3 . 0 . 0 < / maven . checkstyle . plugin . version > <nl> - < maven . sevntu . checkstyle . plugin . version > 1 . 30 . 0 < / maven . sevntu . checkstyle . plugin . version > <nl> + < maven . sevntu . checkstyle . plugin . version > 1 . 31 . 0 < / maven . sevntu . checkstyle . plugin . version > <nl> < maven . sevntu - checkstyle - check . checkstyle . version > <nl> 8 . 10 . 1 <nl> < / maven . sevntu - checkstyle - check . checkstyle . version >
NEAREST DIFF (one line): diff - - git a / . ci / shippable . sh b / . ci / shippable . sh <nl> index b1fa40e . . 40a9db6 100755 <nl> - - - a / . ci / shippable . sh <nl> + + + b / . ci / shippable . sh <nl> @ @ - 59 , 7 + 59 , 6 @ @ pitest - checks - coding ) <nl> # Format of ignored items : < report _ name > : < survived line > <nl> declare - a ignoredItems = ( <nl> " EqualsAvoidNullCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; field . getColumnNo ( ) + minimumSymbolsBetween & # 60 ; = objCalledOn . getColumnNo ( ) ) { < / span > < / pre > < / td > < / tr > " <nl> - " FallThroughCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > lineNo , matcher . end ( ) - 1 ) ; < / span > < / pre > < / td > < / tr > " <nl> " HiddenFieldCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > processVariable ( ast ) ; < / span > < / pre > < / td > < / tr > " <nl> " IllegalInstantiationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > classNames . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> " IllegalInstantiationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > imports . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> @ @ - 72 , 7 + 71 , 6 @ @ pitest - checks - coding ) <nl> " RequireThisCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; ast1 . getColumnNo ( ) & # 60 ; ast2 . getColumnNo ( ) ) { < / span > < / pre > < / td > < / tr > " <nl> " RequireThisCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > current . clear ( ) ; < / span > < / pre > < / td > < / tr > " <nl> " RequireThisCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > final boolean methodNameInMethodCall = parentType = = TokenTypes . DOT < / span > < / pre > < / td > < / tr > " <nl> - " RequireThisCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return FrameType . CATCH _ FRAME ; < / span > < / pre > < / td > < / tr > " <nl> " UnnecessaryParenthesesCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( type ! = TokenTypes . ASSIGN < / span > < / pre > < / td > < / tr > " <nl> " VariableDeclarationUsageDistanceCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; currentNode . getType ( ) = = TokenTypes . LITERAL _ CATCH ) { < / span > < / pre > < / td > < / tr > " <nl> " VariableDeclarationUsageDistanceCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( currentNode . getType ( ) = = TokenTypes . LITERAL _ IF ) { < / span > < / pre > < / td > < / tr > " <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> index 83e4350 . . cb3c1a2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> @ @ - 395 , 9 + 395 , 8 @ @ public class FallThroughCheck extends AbstractCheck { <nl> boolean matches = false ; <nl> <nl> if ( matcher . find ( ) ) { <nl> - / / - 1 because it returns the char position beyond the match <nl> matches = getFileContents ( ) . hasIntersectionWithComment ( lineNo , matcher . start ( ) , <nl> - lineNo , matcher . end ( ) - 1 ) ; <nl> + lineNo , matcher . end ( ) ) ; <nl> } <nl> return matches ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index c3e54eb . . 7760493 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 370 , 6 + 370 , 8 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { <nl> <nl> Assert . assertEquals ( " expected ident token " , ident , <nl> TestUtil . getClassDeclaredMethod ( cls , " getFrameNameIdent " ) . invoke ( o ) ) ; <nl> + Assert . assertEquals ( " expected catch frame type " , " CATCH _ FRAME " , <nl> + TestUtil . getClassDeclaredMethod ( cls , " getType " ) . invoke ( o ) . toString ( ) ) ; <nl> } <nl> <nl> }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 4c5f9f3 . . 8ea6c20 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 208 , 7 + 208 , 7 @ @ 
 < powermock . version > 2 . 0 . 0 - beta . 5 < / powermock . version > 
 < saxon . version > 9 . 8 . 0 - 14 < / saxon . version > 
 < maven . checkstyle . plugin . version > 3 . 0 . 0 < / maven . checkstyle . plugin . version > 
 - < maven . sevntu . checkstyle . plugin . version > 1 . 30 . 0 < / maven . sevntu . checkstyle . plugin . version > 
 + < maven . sevntu . checkstyle . plugin . version > 1 . 31 . 0 < / maven . sevntu . checkstyle . plugin . version > 
 < maven . sevntu - checkstyle - check . checkstyle . version > 
 8 . 10 . 1 
 < / maven . sevntu - checkstyle - check . checkstyle . version >

NEAREST DIFF:
diff - - git a / . ci / shippable . sh b / . ci / shippable . sh 
 index b1fa40e . . 40a9db6 100755 
 - - - a / . ci / shippable . sh 
 + + + b / . ci / shippable . sh 
 @ @ - 59 , 7 + 59 , 6 @ @ pitest - checks - coding ) 
 # Format of ignored items : < report _ name > : < survived line > 
 declare - a ignoredItems = ( 
 " EqualsAvoidNullCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; field . getColumnNo ( ) + minimumSymbolsBetween & # 60 ; = objCalledOn . getColumnNo ( ) ) { < / span > < / pre > < / td > < / tr > " 
 - " FallThroughCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > lineNo , matcher . end ( ) - 1 ) ; < / span > < / pre > < / td > < / tr > " 
 " HiddenFieldCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > processVariable ( ast ) ; < / span > < / pre > < / td > < / tr > " 
 " IllegalInstantiationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > classNames . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 " IllegalInstantiationCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > imports . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 @ @ - 72 , 7 + 71 , 6 @ @ pitest - checks - coding ) 
 " RequireThisCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; ast1 . getColumnNo ( ) & # 60 ; ast2 . getColumnNo ( ) ) { < / span > < / pre > < / td > < / tr > " 
 " RequireThisCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > current . clear ( ) ; < / span > < / pre > < / td > < / tr > " 
 " RequireThisCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > final boolean methodNameInMethodCall = parentType = = TokenTypes . DOT < / span > < / pre > < / td > < / tr > " 
 - " RequireThisCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > return FrameType . CATCH _ FRAME ; < / span > < / pre > < / td > < / tr > " 
 " UnnecessaryParenthesesCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( type ! = TokenTypes . ASSIGN < / span > < / pre > < / td > < / tr > " 
 " VariableDeclarationUsageDistanceCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > & # 38 ; & # 38 ; currentNode . getType ( ) = = TokenTypes . LITERAL _ CATCH ) { < / span > < / pre > < / td > < / tr > " 
 " VariableDeclarationUsageDistanceCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( currentNode . getType ( ) = = TokenTypes . LITERAL _ IF ) { < / span > < / pre > < / td > < / tr > " 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 index 83e4350 . . cb3c1a2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 @ @ - 395 , 9 + 395 , 8 @ @ public class FallThroughCheck extends AbstractCheck { 
 boolean matches = false ; 
 
 if ( matcher . find ( ) ) { 
 - / / - 1 because it returns the char position beyond the match 
 matches = getFileContents ( ) . hasIntersectionWithComment ( lineNo , matcher . start ( ) , 
 - lineNo , matcher . end ( ) - 1 ) ; 
 + lineNo , matcher . end ( ) ) ; 
 } 
 return matches ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index c3e54eb . . 7760493 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 370 , 6 + 370 , 8 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { 
 
 Assert . assertEquals ( " expected ident token " , ident , 
 TestUtil . getClassDeclaredMethod ( cls , " getFrameNameIdent " ) . invoke ( o ) ) ; 
 + Assert . assertEquals ( " expected catch frame type " , " CATCH _ FRAME " , 
 + TestUtil . getClassDeclaredMethod ( cls , " getType " ) . invoke ( o ) . toString ( ) ) ; 
 } 
 
 }
