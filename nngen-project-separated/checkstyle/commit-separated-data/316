BLEU SCORE: 0.03737437943747671

TEST MSG: Issue # 5603 : Use category / java / documentation in the PMD config
GENERATED MSG: Fix typos and formatting in PMD configuration , issue # 744

TEST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 57b83d7 . . 91476d2 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 36 , 6 + 36 , 22 @ @ <nl> < / properties > <nl> < / rule > <nl> <nl> + < rule ref = " category / java / documentation . xml " > <nl> + < ! - - We use class comments as source for xdoc files , so content is big and that is by design . - - > <nl> + < exclude name = " CommentSize " / > <nl> + < / rule > <nl> + < rule ref = " category / java / documentation . xml / CommentRequired " > <nl> + < properties > <nl> + < ! - - * TokenTypes are special class , comments are as trailing comments . <nl> + RequireThisCheck $ AbstractFrame is a private class , no comment is required . <nl> + Main . runCli has a false positive for an anonymous class . <nl> + - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' JavadocTokenTypes ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' RequireThisCheck ' ] / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractFrame ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' Main ' ] / / MethodDeclaration [ @ Name = ' runCli ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> + <nl> < rule ref = " category / java / codestyle . xml " > <nl> < ! - - Opposite to UnnecessaryConstructor . - - > <nl> < exclude name = " AtLeastOneConstructor " / > <nl> @ @ - 66 , 6 + 82 , 24 @ @ <nl> < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractClassNameCheck ' or @ Image = ' AutomaticBean ' ] " / > <nl> < / properties > <nl> < / rule > <nl> + < rule ref = " category / java / codestyle . xml / ConfusingTernary " > <nl> + < properties > <nl> + < ! - - False positives on IF _ ELSE - IF - ELSE - IF . - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' XMLLogger ' ] / / MethodDeclarator [ @ Image = ' isReference ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' DetailAST ' ] / / MethodDeclarator [ @ Image = ' addPreviousSibling ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' AnnotationLocationCheck ' ] / / MethodDeclarator [ @ Image = ' checkAnnotations ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' ImportControl ' ] / / MethodDeclarator [ @ Image = ' checkAccess ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' HandlerFactory ' ] / / MethodDeclarator [ @ Image = ' getHandler ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> + < rule ref = " category / java / codestyle . xml / EmptyMethodInAbstractClassShouldBeAbstract " > <nl> + < properties > <nl> + < ! - - Can not change the API . - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractFileSetCheck ' <nl> + or @ Image = ' AbstractCheck ' or @ Image = ' AbstractJavadocCheck ' or @ Image = ' AbstractNode ' <nl> + or @ Image = ' AbstractViolationReporter ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> < rule ref = " category / java / codestyle . xml / LongVariable " > <nl> < properties > <nl> < ! - - Nothing bad with the long and descriptive variable names if only they fit the line , <nl> @ @ - 130 , 6 + 164 , 8 @ @ <nl> < exclude name = " GodClass " / > <nl> < ! - - Too many violations , will be suppressed until we find out how use these metrics . - - > <nl> < exclude name = " LawOfDemeter " / > <nl> + < ! - - We use our ImportControl to control imports in packages and classes . - - > <nl> + < exclude name = " LoosePackageCoupling " / > <nl> < / rule > <nl> < rule ref = " category / java / design . xml / AvoidCatchingGenericException " > <nl> < properties > <nl> @ @ - 138 , 6 + 174 , 14 @ @ <nl> < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' Checker ' ] / / MethodDeclaration [ @ Name = ' processFiles ' ] " / > <nl> < / properties > <nl> < / rule > <nl> + < rule ref = " category / java / design . xml / AvoidDeeplyNestedIfStmts " > <nl> + < properties > <nl> + < ! - - The default is 3 but we try to use single point of exit from the method and that require <nl> + some extra IFs . - - > <nl> + < property name = " problemDepth " value = " 4 " / > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' ClassResolver ' ] / / MethodDeclarator [ @ Image = ' resolve ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> < rule ref = " category / java / design . xml / AvoidThrowingRawExceptionTypes " > <nl> < properties > <nl> < ! - - There is no other way to deliver the filename that was under processing . <nl> @ @ - 260 , 6 + 304 , 13 @ @ <nl> < ! - - Checkstyle is not thread safe till https : / / github . com / checkstyle / checkstyle / projects / 5 . - - > <nl> < exclude name = " UseConcurrentHashMap " / > <nl> < / rule > <nl> + < rule ref = " category / java / multithreading . xml / AvoidSynchronizedAtMethodLevel " > <nl> + < properties > <nl> + < ! - - UniqueProperties # put overloads a synchronized method , so it should have synchronized <nl> + modifier . - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' UniqueProperties ' ] / / MethodDeclarator [ @ Image = ' put ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> <nl> < rule ref = " category / java / performance . xml " > <nl> < ! - - Produces more false positives than real problems . - - > <nl> @ @ - 288 , 127 + 339 , 29 @ @ <nl> < / properties > <nl> < / rule > <nl> <nl> - < rule ref = " rulesets / java / comments . xml " > <nl> - < ! - - < exclude name = " CommentRequired " / > - - > <nl> - < ! - - we use class comments as source for xdoc files , so content is big and that is by design - - > <nl> - < exclude name = " CommentSize " / > <nl> - < ! - - Till https : / / github . com / checkstyle / checkstyle / issues / 5665 - - > <nl> - < exclude name = " CommentDefaultAccessModifier " / > <nl> - < / rule > <nl> - < rule ref = " rulesets / java / comments . xml / CommentRequired " > <nl> - < properties > <nl> - < ! - - * TokenTypes are special class , comments are as trailing comments - - > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' JavadocTokenTypes ' ] | / / Annotation / MarkerAnnotation / / Name [ @ Image = ' Override ' ] " / > <nl> - < / properties > <nl> - < / rule > <nl> - < rule ref = " rulesets / java / comments . xml / CommentSize " > <nl> - < properties > <nl> - < ! - - we use class comments as source for xdoc files , so content is big and that is by design - - > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration | / / PackageDeclaration | / / ClassOrInterfaceDeclaration [ @ Image = ' JavadocTagInfo ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' SeverityLevel ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' LeftCurlyOption ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' RightCurlyOption ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' ImportOrderOption ' ] " / > <nl> - < property name = " maxLines " value = " 8 " / > <nl> - < property name = " maxLineLength " value = " 100 " / > <nl> - < / properties > <nl> - < / rule > <nl> - <nl> - < rule ref = " rulesets / java / design . xml " > <nl> - < ! - - extra final modifier does not make code more secure in that cases - - > <nl> - < exclude name = " ImmutableField " / > <nl> - < ! - - this rule does not have any option , unreasonable to use - - > <nl> - < exclude name = " MissingBreakInSwitch " / > <nl> - < ! - - we need compare by ref as Tree structure is immutable , we can easily rely on refs - - > <nl> - < exclude name = " CompareObjectsWithEquals " / > <nl> - < ! - - we will use our own declaration order logic - - > <nl> - < exclude name = " FieldDeclarationsShouldBeAtStartOfClass " / > <nl> - < ! - - too much alarms of Checks , we will never move logic out of Check , each Check is independent logic container - - > <nl> - < exclude name = " GodClass " / > <nl> - < ! - - we do not care about this minor overhead , we are not Android application and we do not want to change <nl> - visibility of methods . Package - private visibility should be avoid almost always . - - > <nl> - < exclude name = " AccessorMethodGeneration " / > <nl> - < ! - - Conflicts with the ToArrayCallWithZeroLengthArrayArgument check from the Idea <nl> - This rule is based on a study by Aleksey Shipil Ñ‘ v <nl> - https : / / shipilev . net / blog / 2016 / arrays - wisdom - ancients / <nl> - However , in modern JVM the result is different : <nl> - Benchmark ( size ) ( type ) Mode Cnt Score Error Units <nl> - simple 1000 arraylist avgt 15 400 . 156 4 . 154 ns / op <nl> - sized 1000 arraylist avgt 15 1051 . 462 26 . 820 ns / op <nl> - zero 1000 arraylist avgt 15 743 . 794 27 . 400 ns / op <nl> - simple 1000 hashset avgt 15 4728 . 179 130 . 822 ns / op <nl> - sized 1000 hashset avgt 15 4960 . 655 179 . 637 ns / op <nl> - zero 1000 hashset avgt 15 5101 . 816 159 . 180 ns / op <nl> - The advantages of this rule are questionable , and the flaws are obvious . <nl> - - - > <nl> - < exclude name = " OptimizableToArrayCall " / > <nl> - < ! - - Too much " false - positives " on the Checks classes . <nl> - We do not follow the philosophy of complete encapsulation , we like data classes <nl> - ( preferable immutable ) to transfer content from one part to another . <nl> - There is no way to configure the rule ( it has no properties ) . - - > <nl> - < exclude name = " DataClass " / > <nl> - < / rule > <nl> - <nl> - < rule ref = " rulesets / java / design . xml / ConfusingTernary " > <nl> - < properties > <nl> - < ! - - false positives on IF _ ELSE - IF - ELSE - IF - - > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' XMLLogger ' ] / / MethodDeclarator [ @ Image = ' isReference ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' DetailAST ' ] / / MethodDeclarator [ @ Image = ' addPreviousSibling ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' AnnotationLocationCheck ' ] / / MethodDeclarator [ @ Image = ' checkAnnotations ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' ImportControl ' ] / / MethodDeclarator [ @ Image = ' checkAccess ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' HandlerFactory ' ] / / MethodDeclarator [ @ Image = ' getHandler ' ] " / > <nl> - < / properties > <nl> - < / rule > <nl> - < rule ref = " rulesets / java / design . xml / AccessorClassGeneration " > <nl> - < properties > <nl> - < ! - - We do instantiation by way of private constructors from outside of the constructor â€™ s <nl> - class in DetectorOptions intentionally as it is a whole idea of Builder pattern . - - > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' DetectorOptions ' ] " / > <nl> - < / properties > <nl> - < / rule > <nl> - < rule ref = " rulesets / java / design . xml / PreserveStackTrace " > <nl> - < properties > <nl> - < ! - - yes we swallow one exception and try to do another attempt , second attempt does not hide cause - - > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' PackageObjectFactory ' ] / / MethodDeclarator [ @ Image = ' createModule ' ] " / > <nl> - < / properties > <nl> - < / rule > <nl> - < rule ref = " rulesets / java / design . xml / EmptyMethodInAbstractClassShouldBeAbstract " > <nl> - < properties > <nl> - < ! - - Can not change API - - > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractFileSetCheck ' <nl> - or @ Image = ' AbstractCheck ' or @ Image = ' AbstractJavadocCheck ' or @ Image = ' AbstractNode ' or @ Image = ' AbstractViolationReporter ' ] " / > <nl> - < / properties > <nl> - < / rule > <nl> - <nl> - < rule ref = " rulesets / java / design . xml / AvoidDeeplyNestedIfStmts " > <nl> + < ! - - Checkstyle own rules . - - > <nl> + < rule name = " CheckstyleCustomShortVariable " <nl> + message = " Avoid variables with short names that shorter than 2 symbols : { 0 } " <nl> + language = " java " <nl> + class = " net . sourceforge . pmd . lang . rule . XPathRule " <nl> + externalInfoUrl = " " > <nl> + < description > <nl> + Fields , local variables , or parameter names that are very short are not helpful to the reader . <nl> + < / description > <nl> + < priority > 3 < / priority > <nl> < properties > <nl> - < ! - - default is 3 but we try to use single point of exit from method and that require extra IFs - - > <nl> - < property name = " problemDepth " value = " 4 " / > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' ClassResolver ' ] / / MethodDeclarator [ @ Image = ' resolve ' ] " / > <nl> + < property name = " xpath " > <nl> + < value > <nl> + < ! [ CDATA [ <nl> + / / VariableDeclaratorId [ string - length ( @ Image ) < 2 ] <nl> + [ not ( ancestor : : ForInit ) ] <nl> + [ not ( . . / . . / VariableDeclarator and . . / . . / . . / LocalVariableDeclaration and . . / . . / . . / . . / ForStatement ) ] <nl> + [ not ( ( ancestor : : FormalParameter ) and ( ancestor : : TryStatement ) ) ] <nl> + [ not ( ancestor : : ClassOrInterfaceDeclaration [ / / MarkerAnnotation / Name [ pmd - java : typeof ( @ Image , ' java . lang . Override ' , ' Override ' ) ] ] ) ] <nl> + ] ] > <nl> + < / value > <nl> + < / property > <nl> < / properties > <nl> < / rule > <nl> <nl> - < rule ref = " rulesets / java / design . xml / AvoidSynchronizedAtMethodLevel " > <nl> - < properties > <nl> - < ! - - UniqueProperties # put overloads synchronized method , so it should have synchronized modifier - - > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' UniqueProperties ' ] / / MethodDeclarator [ @ Image = ' put ' ] " / > <nl> - < / properties > <nl> - < / rule > <nl> - <nl> - < rule name = " CheckstyleCustomShortVariable " <nl> - message = " Avoid variables with short names that shorter than 2 symbols : { 0 } " <nl> - language = " java " <nl> - class = " net . sourceforge . pmd . lang . rule . XPathRule " <nl> - externalInfoUrl = " " > <nl> - < description > <nl> - Fields , local variables , or parameter names that are very short are not helpful to the reader . <nl> - < / description > <nl> - < priority > 3 < / priority > <nl> - < properties > <nl> - < property name = " xpath " > <nl> - < value > <nl> - < ! [ CDATA [ <nl> - / / VariableDeclaratorId [ string - length ( @ Image ) < 2 ] <nl> - [ not ( ancestor : : ForInit ) ] <nl> - [ not ( . . / . . / VariableDeclarator and . . / . . / . . / LocalVariableDeclaration and . . / . . / . . / . . / ForStatement ) ] <nl> - [ not ( ( ancestor : : FormalParameter ) and ( ancestor : : TryStatement ) ) ] <nl> - [ not ( ancestor : : ClassOrInterfaceDeclaration [ / / MarkerAnnotation / Name [ pmd - java : typeof ( @ Image , ' java . lang . Override ' , ' Override ' ) ] ] ) ] <nl> - ] ] > <nl> - < / value > <nl> - < / property > <nl> - < / properties > <nl> - < / rule > <nl> - <nl> < / ruleset >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 7dae5aa . . ab7274d 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 249 , 7 + 249 , 7 @ @ <nl> < ! - - < ruleset > rulesets / java / strictexception . xml < / ruleset > - - > <nl> < ! - - < ruleset > rulesets / java / strings . xml < / ruleset > - - > <nl> < ! - - < ruleset > rulesets / java / sunsecure . xml < / ruleset > - - > <nl> - < ! - - < ruleset > rulesets / java / typeresolution . xml < / ruleset > - - > <nl> + < ruleset > rulesets / java / typeresolution . xml < / ruleset > <nl> < ruleset > rulesets / java / unnecessary . xml < / ruleset > <nl> < ruleset > rulesets / java / unusedcode . xml < / ruleset > <nl> < / rulesets > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> index 7417ce4 . . 4bdc82c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> import java . io . File ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> - import java . util . TreeSet ; <nl> + import java . util . SortedSet ; <nl> <nl> import com . puppycrawl . tools . checkstyle . Utils ; <nl> <nl> @ @ - 71 , 7 + 71 , 7 @ @ public abstract class AbstractFileSetCheck <nl> <nl> / * * { @ inheritDoc } * / <nl> @ Override <nl> - public final TreeSet < LocalizedMessage > process ( File file , <nl> + public final SortedSet < LocalizedMessage > process ( File file , <nl> List < String > lines ) <nl> { <nl> getMessageCollector ( ) . reset ( ) ; <nl> @ @ - 182 , 7 + 182 , 7 @ @ public abstract class AbstractFileSetCheck <nl> * / <nl> protected final void fireErrors ( String fileName ) <nl> { <nl> - final TreeSet < LocalizedMessage > errors = getMessageCollector ( ) <nl> + final SortedSet < LocalizedMessage > errors = getMessageCollector ( ) <nl> . getMessages ( ) ; <nl> getMessageCollector ( ) . reset ( ) ; <nl> getMessageDispatcher ( ) . fireErrors ( fileName , errors ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java <nl> index aec2207 . . 935f810 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import java . io . File ; <nl> import java . util . List ; <nl> - import java . util . TreeSet ; <nl> + import java . util . SortedSet ; <nl> <nl> / * * <nl> * Interface for Checking a set of files for some criteria . <nl> @ @ - 69 , 9 + 69 , 9 @ @ public interface FileSetCheck <nl> * <nl> * @ param file the file to be processed <nl> * @ param lines an immutable list of the contents of the file . <nl> - * @ return the list of messages to be logged . <nl> + * @ return the sorted set of messages to be logged . <nl> * / <nl> - TreeSet < LocalizedMessage > process ( File file , List < String > lines ) ; <nl> + SortedSet < LocalizedMessage > process ( File file , List < String > lines ) ; <nl> <nl> / * * <nl> * Called when all the files have been processed . This is the time to <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java <nl> index 3f6b6ae . . 4d384ea 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java <nl> @ @ - 23 , 7 + 23 , 9 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> / / this class is not necessary as a part of the public api <nl> <nl> import com . google . common . collect . Sets ; <nl> - import java . util . TreeSet ; <nl> + <nl> + import java . util . Set ; <nl> + import java . util . SortedSet ; <nl> <nl> / * * <nl> * Collection of messages . <nl> @ @ - 32 , 10 + 34 , 10 @ @ import java . util . TreeSet ; <nl> public final class LocalizedMessages <nl> { <nl> / * * contains the messages logged * * / <nl> - private final TreeSet < LocalizedMessage > messages = Sets . newTreeSet ( ) ; <nl> + private final Set < LocalizedMessage > messages = Sets . newTreeSet ( ) ; <nl> <nl> / * * @ return the logged messages * * / <nl> - public TreeSet < LocalizedMessage > getMessages ( ) <nl> + public SortedSet < LocalizedMessage > getMessages ( ) <nl> { <nl> return Sets . newTreeSet ( messages ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> index d66e5d8 . . 4e26856 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> @ @ - 37 , 7 + 37 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Properties ; <nl> import java . util . Set ; <nl> - import java . util . TreeSet ; <nl> + import java . util . SortedSet ; <nl> import java . util . Map . Entry ; <nl> <nl> / * * <nl> @ @ - 227 , 7 + 227 , 7 @ @ public class TranslationCheck <nl> args , <nl> getId ( ) , <nl> this . getClass ( ) , null ) ; <nl> - final TreeSet < LocalizedMessage > messages = Sets . newTreeSet ( ) ; <nl> + final SortedSet < LocalizedMessage > messages = Sets . newTreeSet ( ) ; <nl> messages . add ( message ) ; <nl> getMessageDispatcher ( ) . fireErrors ( file . getPath ( ) , messages ) ; <nl> Utils . getExceptionLogger ( ) . debug ( " IOException occured . " , ex ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> index a7a9efd . . 7f3d3cf 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> @ @ - 25 , 7 + 25 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import java . util . LinkedList ; <nl> + <nl> + import java . util . Deque ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 97 , 7 + 98 , 7 @ @ public abstract class AbstractSuperCheck <nl> } <nl> <nl> / * * stack of methods * / <nl> - private final LinkedList < MethodNode > methodStack = Lists . newLinkedList ( ) ; <nl> + private final Deque < MethodNode > methodStack = Lists . newLinkedList ( ) ; <nl> <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java <nl> index 2e07686 . . 81e4eb8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . design ; <nl> <nl> import java . util . Map ; <nl> + import java . util . SortedMap ; <nl> import java . util . TreeMap ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> @ @ - 93 , 7 + 94 , 7 @ @ public class OneTopLevelClassCheck extends Check <nl> private boolean publicTypeFound ; <nl> <nl> / * * Mapping between type names and line numbers of the type declarations . * / <nl> - private TreeMap < Integer , String > lineNumberTypeMap = new TreeMap < > ( ) ; <nl> + private SortedMap < Integer , String > lineNumberTypeMap = new TreeMap < > ( ) ; <nl> <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java <nl> index 83e06a5 . . 382c3f1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java <nl> @ @ - 19 , 7 + 19 , 8 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> <nl> import com . google . common . collect . Lists ; <nl> - import java . util . LinkedList ; <nl> + <nl> + import java . util . Deque ; <nl> import java . util . List ; <nl> <nl> / * * <nl> @ @ - 32 , 7 + 33 , 7 @ @ import java . util . List ; <nl> class PkgControl <nl> { <nl> / * * List of { @ link Guard } objects to check . * / <nl> - private final LinkedList < Guard > guards = Lists . newLinkedList ( ) ; <nl> + private final Deque < Guard > guards = Lists . newLinkedList ( ) ; <nl> / * * List of children { @ link PkgControl } objects . * / <nl> private final List < PkgControl > children = Lists . newArrayList ( ) ; <nl> / * * The parent . Null indicates we are the root node . * / <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java <nl> index 0533d61 . . 7d307f4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java <nl> @ @ - 23 , 9 + 23 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . Scope ; <nl> import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> import java . util . ArrayDeque ; <nl> import java . util . Deque ; <nl> import java . util . EnumMap ; <nl> + import java . util . Map ; <nl> <nl> / * * <nl> * Counts the methods of the type - definition and checks whether this <nl> @ @ - 74 , 7 + 76 , 7 @ @ public final class MethodCountCheck extends Check <nl> private static class MethodCounter <nl> { <nl> / * * Maintains the counts . * / <nl> - private final EnumMap < Scope , Integer > counts = new EnumMap < > ( Scope . class ) ; <nl> + private final Map < Scope , Integer > counts = new EnumMap < > ( Scope . class ) ; <nl> / * * indicated is an interface , in which case all methods are public * / <nl> private final boolean inInterface ; <nl> / * * tracks the total . * / <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java <nl> index b406f03 . . 732bc92 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> <nl> - import java . util . TreeSet ; <nl> + import java . util . SortedSet ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> @ @ - 69 , 7 + 69 , 7 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport <nl> <nl> emptyCheck . log ( 0 , " msgKey " ) ; <nl> <nl> - TreeSet < LocalizedMessage > messages = collector . getMessages ( ) ; <nl> + SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; <nl> Assert . assertTrue ( messages . size ( ) = = 1 ) ; <nl> Assert . assertEquals ( " This is a custom message . " , messages . first ( ) <nl> . getMessage ( ) ) ; <nl> @ @ - 87 , 7 + 87 , 7 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport <nl> <nl> emptyCheck . log ( 0 , " msgKey " , " TestParam " ) ; <nl> <nl> - TreeSet < LocalizedMessage > messages = collector . getMessages ( ) ; <nl> + SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; <nl> Assert . assertTrue ( messages . size ( ) = = 1 ) ; <nl> <nl> Assert . assertEquals ( " This is a custom message with TestParam . " , <nl> @ @ - 106 , 7 + 106 , 7 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport <nl> <nl> emptyCheck . log ( 0 , " msgKey " , " TestParam " ) ; <nl> <nl> - TreeSet < LocalizedMessage > messages = collector . getMessages ( ) ; <nl> + SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; <nl> Assert . assertTrue ( messages . size ( ) = = 1 ) ; <nl> <nl> / / we expect an exception here because of the bogus custom message <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> index 7893591 . . 1761a65 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ import java . io . InputStream ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> - import java . util . TreeSet ; <nl> + import java . util . SortedSet ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Before ; <nl> @ @ - 106 , 7 + 106 , 7 @ @ public class UniquePropertiesCheckTest extends BaseFileSetCheckTestSupport <nl> final String fileName = <nl> getPath ( " InputUniquePropertiesCheckNotExisting . properties " ) ; <nl> final File file = new File ( fileName ) ; <nl> - final TreeSet < LocalizedMessage > messages = <nl> + final SortedSet < LocalizedMessage > messages = <nl> check . process ( file , Collections . < String > emptyList ( ) ) ; <nl> Assert . assertEquals ( " Wrong messages count : " + messages . size ( ) , <nl> messages . size ( ) , 1 ) ;

TEST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 57b83d7 . . 91476d2 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 36 , 6 + 36 , 22 @ @ 
 < / properties > 
 < / rule > 
 
 + < rule ref = " category / java / documentation . xml " > 
 + < ! - - We use class comments as source for xdoc files , so content is big and that is by design . - - > 
 + < exclude name = " CommentSize " / > 
 + < / rule > 
 + < rule ref = " category / java / documentation . xml / CommentRequired " > 
 + < properties > 
 + < ! - - * TokenTypes are special class , comments are as trailing comments . 
 + RequireThisCheck $ AbstractFrame is a private class , no comment is required . 
 + Main . runCli has a false positive for an anonymous class . 
 + - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' JavadocTokenTypes ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' RequireThisCheck ' ] / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractFrame ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' Main ' ] / / MethodDeclaration [ @ Name = ' runCli ' ] " / > 
 + < / properties > 
 + < / rule > 
 + 
 < rule ref = " category / java / codestyle . xml " > 
 < ! - - Opposite to UnnecessaryConstructor . - - > 
 < exclude name = " AtLeastOneConstructor " / > 
 @ @ - 66 , 6 + 82 , 24 @ @ 
 < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractClassNameCheck ' or @ Image = ' AutomaticBean ' ] " / > 
 < / properties > 
 < / rule > 
 + < rule ref = " category / java / codestyle . xml / ConfusingTernary " > 
 + < properties > 
 + < ! - - False positives on IF _ ELSE - IF - ELSE - IF . - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' XMLLogger ' ] / / MethodDeclarator [ @ Image = ' isReference ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' DetailAST ' ] / / MethodDeclarator [ @ Image = ' addPreviousSibling ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' AnnotationLocationCheck ' ] / / MethodDeclarator [ @ Image = ' checkAnnotations ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' ImportControl ' ] / / MethodDeclarator [ @ Image = ' checkAccess ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' HandlerFactory ' ] / / MethodDeclarator [ @ Image = ' getHandler ' ] " / > 
 + < / properties > 
 + < / rule > 
 + < rule ref = " category / java / codestyle . xml / EmptyMethodInAbstractClassShouldBeAbstract " > 
 + < properties > 
 + < ! - - Can not change the API . - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractFileSetCheck ' 
 + or @ Image = ' AbstractCheck ' or @ Image = ' AbstractJavadocCheck ' or @ Image = ' AbstractNode ' 
 + or @ Image = ' AbstractViolationReporter ' ] " / > 
 + < / properties > 
 + < / rule > 
 < rule ref = " category / java / codestyle . xml / LongVariable " > 
 < properties > 
 < ! - - Nothing bad with the long and descriptive variable names if only they fit the line , 
 @ @ - 130 , 6 + 164 , 8 @ @ 
 < exclude name = " GodClass " / > 
 < ! - - Too many violations , will be suppressed until we find out how use these metrics . - - > 
 < exclude name = " LawOfDemeter " / > 
 + < ! - - We use our ImportControl to control imports in packages and classes . - - > 
 + < exclude name = " LoosePackageCoupling " / > 
 < / rule > 
 < rule ref = " category / java / design . xml / AvoidCatchingGenericException " > 
 < properties > 
 @ @ - 138 , 6 + 174 , 14 @ @ 
 < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' Checker ' ] / / MethodDeclaration [ @ Name = ' processFiles ' ] " / > 
 < / properties > 
 < / rule > 
 + < rule ref = " category / java / design . xml / AvoidDeeplyNestedIfStmts " > 
 + < properties > 
 + < ! - - The default is 3 but we try to use single point of exit from the method and that require 
 + some extra IFs . - - > 
 + < property name = " problemDepth " value = " 4 " / > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' ClassResolver ' ] / / MethodDeclarator [ @ Image = ' resolve ' ] " / > 
 + < / properties > 
 + < / rule > 
 < rule ref = " category / java / design . xml / AvoidThrowingRawExceptionTypes " > 
 < properties > 
 < ! - - There is no other way to deliver the filename that was under processing . 
 @ @ - 260 , 6 + 304 , 13 @ @ 
 < ! - - Checkstyle is not thread safe till https : / / github . com / checkstyle / checkstyle / projects / 5 . - - > 
 < exclude name = " UseConcurrentHashMap " / > 
 < / rule > 
 + < rule ref = " category / java / multithreading . xml / AvoidSynchronizedAtMethodLevel " > 
 + < properties > 
 + < ! - - UniqueProperties # put overloads a synchronized method , so it should have synchronized 
 + modifier . - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' UniqueProperties ' ] / / MethodDeclarator [ @ Image = ' put ' ] " / > 
 + < / properties > 
 + < / rule > 
 
 < rule ref = " category / java / performance . xml " > 
 < ! - - Produces more false positives than real problems . - - > 
 @ @ - 288 , 127 + 339 , 29 @ @ 
 < / properties > 
 < / rule > 
 
 - < rule ref = " rulesets / java / comments . xml " > 
 - < ! - - < exclude name = " CommentRequired " / > - - > 
 - < ! - - we use class comments as source for xdoc files , so content is big and that is by design - - > 
 - < exclude name = " CommentSize " / > 
 - < ! - - Till https : / / github . com / checkstyle / checkstyle / issues / 5665 - - > 
 - < exclude name = " CommentDefaultAccessModifier " / > 
 - < / rule > 
 - < rule ref = " rulesets / java / comments . xml / CommentRequired " > 
 - < properties > 
 - < ! - - * TokenTypes are special class , comments are as trailing comments - - > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' JavadocTokenTypes ' ] | / / Annotation / MarkerAnnotation / / Name [ @ Image = ' Override ' ] " / > 
 - < / properties > 
 - < / rule > 
 - < rule ref = " rulesets / java / comments . xml / CommentSize " > 
 - < properties > 
 - < ! - - we use class comments as source for xdoc files , so content is big and that is by design - - > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration | / / PackageDeclaration | / / ClassOrInterfaceDeclaration [ @ Image = ' JavadocTagInfo ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' SeverityLevel ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' LeftCurlyOption ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' RightCurlyOption ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' ImportOrderOption ' ] " / > 
 - < property name = " maxLines " value = " 8 " / > 
 - < property name = " maxLineLength " value = " 100 " / > 
 - < / properties > 
 - < / rule > 
 - 
 - < rule ref = " rulesets / java / design . xml " > 
 - < ! - - extra final modifier does not make code more secure in that cases - - > 
 - < exclude name = " ImmutableField " / > 
 - < ! - - this rule does not have any option , unreasonable to use - - > 
 - < exclude name = " MissingBreakInSwitch " / > 
 - < ! - - we need compare by ref as Tree structure is immutable , we can easily rely on refs - - > 
 - < exclude name = " CompareObjectsWithEquals " / > 
 - < ! - - we will use our own declaration order logic - - > 
 - < exclude name = " FieldDeclarationsShouldBeAtStartOfClass " / > 
 - < ! - - too much alarms of Checks , we will never move logic out of Check , each Check is independent logic container - - > 
 - < exclude name = " GodClass " / > 
 - < ! - - we do not care about this minor overhead , we are not Android application and we do not want to change 
 - visibility of methods . Package - private visibility should be avoid almost always . - - > 
 - < exclude name = " AccessorMethodGeneration " / > 
 - < ! - - Conflicts with the ToArrayCallWithZeroLengthArrayArgument check from the Idea 
 - This rule is based on a study by Aleksey Shipil Ñ‘ v 
 - https : / / shipilev . net / blog / 2016 / arrays - wisdom - ancients / 
 - However , in modern JVM the result is different : 
 - Benchmark ( size ) ( type ) Mode Cnt Score Error Units 
 - simple 1000 arraylist avgt 15 400 . 156 4 . 154 ns / op 
 - sized 1000 arraylist avgt 15 1051 . 462 26 . 820 ns / op 
 - zero 1000 arraylist avgt 15 743 . 794 27 . 400 ns / op 
 - simple 1000 hashset avgt 15 4728 . 179 130 . 822 ns / op 
 - sized 1000 hashset avgt 15 4960 . 655 179 . 637 ns / op 
 - zero 1000 hashset avgt 15 5101 . 816 159 . 180 ns / op 
 - The advantages of this rule are questionable , and the flaws are obvious . 
 - - - > 
 - < exclude name = " OptimizableToArrayCall " / > 
 - < ! - - Too much " false - positives " on the Checks classes . 
 - We do not follow the philosophy of complete encapsulation , we like data classes 
 - ( preferable immutable ) to transfer content from one part to another . 
 - There is no way to configure the rule ( it has no properties ) . - - > 
 - < exclude name = " DataClass " / > 
 - < / rule > 
 - 
 - < rule ref = " rulesets / java / design . xml / ConfusingTernary " > 
 - < properties > 
 - < ! - - false positives on IF _ ELSE - IF - ELSE - IF - - > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' XMLLogger ' ] / / MethodDeclarator [ @ Image = ' isReference ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' DetailAST ' ] / / MethodDeclarator [ @ Image = ' addPreviousSibling ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' AnnotationLocationCheck ' ] / / MethodDeclarator [ @ Image = ' checkAnnotations ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' ImportControl ' ] / / MethodDeclarator [ @ Image = ' checkAccess ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' HandlerFactory ' ] / / MethodDeclarator [ @ Image = ' getHandler ' ] " / > 
 - < / properties > 
 - < / rule > 
 - < rule ref = " rulesets / java / design . xml / AccessorClassGeneration " > 
 - < properties > 
 - < ! - - We do instantiation by way of private constructors from outside of the constructor â€™ s 
 - class in DetectorOptions intentionally as it is a whole idea of Builder pattern . - - > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' DetectorOptions ' ] " / > 
 - < / properties > 
 - < / rule > 
 - < rule ref = " rulesets / java / design . xml / PreserveStackTrace " > 
 - < properties > 
 - < ! - - yes we swallow one exception and try to do another attempt , second attempt does not hide cause - - > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' PackageObjectFactory ' ] / / MethodDeclarator [ @ Image = ' createModule ' ] " / > 
 - < / properties > 
 - < / rule > 
 - < rule ref = " rulesets / java / design . xml / EmptyMethodInAbstractClassShouldBeAbstract " > 
 - < properties > 
 - < ! - - Can not change API - - > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractFileSetCheck ' 
 - or @ Image = ' AbstractCheck ' or @ Image = ' AbstractJavadocCheck ' or @ Image = ' AbstractNode ' or @ Image = ' AbstractViolationReporter ' ] " / > 
 - < / properties > 
 - < / rule > 
 - 
 - < rule ref = " rulesets / java / design . xml / AvoidDeeplyNestedIfStmts " > 
 + < ! - - Checkstyle own rules . - - > 
 + < rule name = " CheckstyleCustomShortVariable " 
 + message = " Avoid variables with short names that shorter than 2 symbols : { 0 } " 
 + language = " java " 
 + class = " net . sourceforge . pmd . lang . rule . XPathRule " 
 + externalInfoUrl = " " > 
 + < description > 
 + Fields , local variables , or parameter names that are very short are not helpful to the reader . 
 + < / description > 
 + < priority > 3 < / priority > 
 < properties > 
 - < ! - - default is 3 but we try to use single point of exit from method and that require extra IFs - - > 
 - < property name = " problemDepth " value = " 4 " / > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' ClassResolver ' ] / / MethodDeclarator [ @ Image = ' resolve ' ] " / > 
 + < property name = " xpath " > 
 + < value > 
 + < ! [ CDATA [ 
 + / / VariableDeclaratorId [ string - length ( @ Image ) < 2 ] 
 + [ not ( ancestor : : ForInit ) ] 
 + [ not ( . . / . . / VariableDeclarator and . . / . . / . . / LocalVariableDeclaration and . . / . . / . . / . . / ForStatement ) ] 
 + [ not ( ( ancestor : : FormalParameter ) and ( ancestor : : TryStatement ) ) ] 
 + [ not ( ancestor : : ClassOrInterfaceDeclaration [ / / MarkerAnnotation / Name [ pmd - java : typeof ( @ Image , ' java . lang . Override ' , ' Override ' ) ] ] ) ] 
 + ] ] > 
 + < / value > 
 + < / property > 
 < / properties > 
 < / rule > 
 
 - < rule ref = " rulesets / java / design . xml / AvoidSynchronizedAtMethodLevel " > 
 - < properties > 
 - < ! - - UniqueProperties # put overloads synchronized method , so it should have synchronized modifier - - > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' UniqueProperties ' ] / / MethodDeclarator [ @ Image = ' put ' ] " / > 
 - < / properties > 
 - < / rule > 
 - 
 - < rule name = " CheckstyleCustomShortVariable " 
 - message = " Avoid variables with short names that shorter than 2 symbols : { 0 } " 
 - language = " java " 
 - class = " net . sourceforge . pmd . lang . rule . XPathRule " 
 - externalInfoUrl = " " > 
 - < description > 
 - Fields , local variables , or parameter names that are very short are not helpful to the reader . 
 - < / description > 
 - < priority > 3 < / priority > 
 - < properties > 
 - < property name = " xpath " > 
 - < value > 
 - < ! [ CDATA [ 
 - / / VariableDeclaratorId [ string - length ( @ Image ) < 2 ] 
 - [ not ( ancestor : : ForInit ) ] 
 - [ not ( . . / . . / VariableDeclarator and . . / . . / . . / LocalVariableDeclaration and . . / . . / . . / . . / ForStatement ) ] 
 - [ not ( ( ancestor : : FormalParameter ) and ( ancestor : : TryStatement ) ) ] 
 - [ not ( ancestor : : ClassOrInterfaceDeclaration [ / / MarkerAnnotation / Name [ pmd - java : typeof ( @ Image , ' java . lang . Override ' , ' Override ' ) ] ] ) ] 
 - ] ] > 
 - < / value > 
 - < / property > 
 - < / properties > 
 - < / rule > 
 - 
 < / ruleset >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 7dae5aa . . ab7274d 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 249 , 7 + 249 , 7 @ @ 
 < ! - - < ruleset > rulesets / java / strictexception . xml < / ruleset > - - > 
 < ! - - < ruleset > rulesets / java / strings . xml < / ruleset > - - > 
 < ! - - < ruleset > rulesets / java / sunsecure . xml < / ruleset > - - > 
 - < ! - - < ruleset > rulesets / java / typeresolution . xml < / ruleset > - - > 
 + < ruleset > rulesets / java / typeresolution . xml < / ruleset > 
 < ruleset > rulesets / java / unnecessary . xml < / ruleset > 
 < ruleset > rulesets / java / unusedcode . xml < / ruleset > 
 < / rulesets > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 index 7417ce4 . . 4bdc82c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 import java . io . File ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 - import java . util . TreeSet ; 
 + import java . util . SortedSet ; 
 
 import com . puppycrawl . tools . checkstyle . Utils ; 
 
 @ @ - 71 , 7 + 71 , 7 @ @ public abstract class AbstractFileSetCheck 
 
 / * * { @ inheritDoc } * / 
 @ Override 
 - public final TreeSet < LocalizedMessage > process ( File file , 
 + public final SortedSet < LocalizedMessage > process ( File file , 
 List < String > lines ) 
 { 
 getMessageCollector ( ) . reset ( ) ; 
 @ @ - 182 , 7 + 182 , 7 @ @ public abstract class AbstractFileSetCheck 
 * / 
 protected final void fireErrors ( String fileName ) 
 { 
 - final TreeSet < LocalizedMessage > errors = getMessageCollector ( ) 
 + final SortedSet < LocalizedMessage > errors = getMessageCollector ( ) 
 . getMessages ( ) ; 
 getMessageCollector ( ) . reset ( ) ; 
 getMessageDispatcher ( ) . fireErrors ( fileName , errors ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java 
 index aec2207 . . 935f810 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java 
 @ @ - 20 , 7 + 20 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 
 import java . io . File ; 
 import java . util . List ; 
 - import java . util . TreeSet ; 
 + import java . util . SortedSet ; 
 
 / * * 
 * Interface for Checking a set of files for some criteria . 
 @ @ - 69 , 9 + 69 , 9 @ @ public interface FileSetCheck 
 * 
 * @ param file the file to be processed 
 * @ param lines an immutable list of the contents of the file . 
 - * @ return the list of messages to be logged . 
 + * @ return the sorted set of messages to be logged . 
 * / 
 - TreeSet < LocalizedMessage > process ( File file , List < String > lines ) ; 
 + SortedSet < LocalizedMessage > process ( File file , List < String > lines ) ; 
 
 / * * 
 * Called when all the files have been processed . This is the time to 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java 
 index 3f6b6ae . . 4d384ea 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessages . java 
 @ @ - 23 , 7 + 23 , 9 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 / / this class is not necessary as a part of the public api 
 
 import com . google . common . collect . Sets ; 
 - import java . util . TreeSet ; 
 + 
 + import java . util . Set ; 
 + import java . util . SortedSet ; 
 
 / * * 
 * Collection of messages . 
 @ @ - 32 , 10 + 34 , 10 @ @ import java . util . TreeSet ; 
 public final class LocalizedMessages 
 { 
 / * * contains the messages logged * * / 
 - private final TreeSet < LocalizedMessage > messages = Sets . newTreeSet ( ) ; 
 + private final Set < LocalizedMessage > messages = Sets . newTreeSet ( ) ; 
 
 / * * @ return the logged messages * * / 
 - public TreeSet < LocalizedMessage > getMessages ( ) 
 + public SortedSet < LocalizedMessage > getMessages ( ) 
 { 
 return Sets . newTreeSet ( messages ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 index d66e5d8 . . 4e26856 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 @ @ - 37 , 7 + 37 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . Properties ; 
 import java . util . Set ; 
 - import java . util . TreeSet ; 
 + import java . util . SortedSet ; 
 import java . util . Map . Entry ; 
 
 / * * 
 @ @ - 227 , 7 + 227 , 7 @ @ public class TranslationCheck 
 args , 
 getId ( ) , 
 this . getClass ( ) , null ) ; 
 - final TreeSet < LocalizedMessage > messages = Sets . newTreeSet ( ) ; 
 + final SortedSet < LocalizedMessage > messages = Sets . newTreeSet ( ) ; 
 messages . add ( message ) ; 
 getMessageDispatcher ( ) . fireErrors ( file . getPath ( ) , messages ) ; 
 Utils . getExceptionLogger ( ) . debug ( " IOException occured . " , ex ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 index a7a9efd . . 7f3d3cf 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 @ @ - 25 , 7 + 25 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import java . util . LinkedList ; 
 + 
 + import java . util . Deque ; 
 
 / * * 
 * < p > 
 @ @ - 97 , 7 + 98 , 7 @ @ public abstract class AbstractSuperCheck 
 } 
 
 / * * stack of methods * / 
 - private final LinkedList < MethodNode > methodStack = Lists . newLinkedList ( ) ; 
 + private final Deque < MethodNode > methodStack = Lists . newLinkedList ( ) ; 
 
 @ Override 
 public int [ ] getDefaultTokens ( ) 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java 
 index 2e07686 . . 81e4eb8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheck . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . design ; 
 
 import java . util . Map ; 
 + import java . util . SortedMap ; 
 import java . util . TreeMap ; 
 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 @ @ - 93 , 7 + 94 , 7 @ @ public class OneTopLevelClassCheck extends Check 
 private boolean publicTypeFound ; 
 
 / * * Mapping between type names and line numbers of the type declarations . * / 
 - private TreeMap < Integer , String > lineNumberTypeMap = new TreeMap < > ( ) ; 
 + private SortedMap < Integer , String > lineNumberTypeMap = new TreeMap < > ( ) ; 
 
 @ Override 
 public int [ ] getDefaultTokens ( ) 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java 
 index 83e06a5 . . 382c3f1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgControl . java 
 @ @ - 19 , 7 + 19 , 8 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . imports ; 
 
 import com . google . common . collect . Lists ; 
 - import java . util . LinkedList ; 
 + 
 + import java . util . Deque ; 
 import java . util . List ; 
 
 / * * 
 @ @ - 32 , 7 + 33 , 7 @ @ import java . util . List ; 
 class PkgControl 
 { 
 / * * List of { @ link Guard } objects to check . * / 
 - private final LinkedList < Guard > guards = Lists . newLinkedList ( ) ; 
 + private final Deque < Guard > guards = Lists . newLinkedList ( ) ; 
 / * * List of children { @ link PkgControl } objects . * / 
 private final List < PkgControl > children = Lists . newArrayList ( ) ; 
 / * * The parent . Null indicates we are the root node . * / 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java 
 index 0533d61 . . 7d307f4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java 
 @ @ - 23 , 9 + 23 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . Scope ; 
 import com . puppycrawl . tools . checkstyle . api . ScopeUtils ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 import java . util . ArrayDeque ; 
 import java . util . Deque ; 
 import java . util . EnumMap ; 
 + import java . util . Map ; 
 
 / * * 
 * Counts the methods of the type - definition and checks whether this 
 @ @ - 74 , 7 + 76 , 7 @ @ public final class MethodCountCheck extends Check 
 private static class MethodCounter 
 { 
 / * * Maintains the counts . * / 
 - private final EnumMap < Scope , Integer > counts = new EnumMap < > ( Scope . class ) ; 
 + private final Map < Scope , Integer > counts = new EnumMap < > ( Scope . class ) ; 
 / * * indicated is an interface , in which case all methods are public * / 
 private final boolean inInterface ; 
 / * * tracks the total . * / 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java 
 index b406f03 . . 732bc92 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java 
 @ @ - 20 , 7 + 20 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 
 import static org . junit . Assert . assertEquals ; 
 
 - import java . util . TreeSet ; 
 + import java . util . SortedSet ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 @ @ - 69 , 7 + 69 , 7 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport 
 
 emptyCheck . log ( 0 , " msgKey " ) ; 
 
 - TreeSet < LocalizedMessage > messages = collector . getMessages ( ) ; 
 + SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; 
 Assert . assertTrue ( messages . size ( ) = = 1 ) ; 
 Assert . assertEquals ( " This is a custom message . " , messages . first ( ) 
 . getMessage ( ) ) ; 
 @ @ - 87 , 7 + 87 , 7 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport 
 
 emptyCheck . log ( 0 , " msgKey " , " TestParam " ) ; 
 
 - TreeSet < LocalizedMessage > messages = collector . getMessages ( ) ; 
 + SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; 
 Assert . assertTrue ( messages . size ( ) = = 1 ) ; 
 
 Assert . assertEquals ( " This is a custom message with TestParam . " , 
 @ @ - 106 , 7 + 106 , 7 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport 
 
 emptyCheck . log ( 0 , " msgKey " , " TestParam " ) ; 
 
 - TreeSet < LocalizedMessage > messages = collector . getMessages ( ) ; 
 + SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; 
 Assert . assertTrue ( messages . size ( ) = = 1 ) ; 
 
 / / we expect an exception here because of the bogus custom message 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 index 7893591 . . 1761a65 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 @ @ - 25 , 7 + 25 , 7 @ @ import java . io . InputStream ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 import java . util . List ; 
 - import java . util . TreeSet ; 
 + import java . util . SortedSet ; 
 
 import org . junit . Assert ; 
 import org . junit . Before ; 
 @ @ - 106 , 7 + 106 , 7 @ @ public class UniquePropertiesCheckTest extends BaseFileSetCheckTestSupport 
 final String fileName = 
 getPath ( " InputUniquePropertiesCheckNotExisting . properties " ) ; 
 final File file = new File ( fileName ) ; 
 - final TreeSet < LocalizedMessage > messages = 
 + final SortedSet < LocalizedMessage > messages = 
 check . process ( file , Collections . < String > emptyList ( ) ) ; 
 Assert . assertEquals ( " Wrong messages count : " + messages . size ( ) , 
 messages . size ( ) , 1 ) ;
