BLEU SCORE: 0.24234418241351588

TEST MSG: conifg : bump maven - surefire - plugin to 2 . 20 . 1
GENERATED MSG: Revert " Revert " config : bump maven - surefire - xxxxxx to 2 . 20 " due to unstable locale UTs # 4316 "

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 65d1217 . . 7defda3 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 879 , 7 + 879 , 7 @ @ <nl> < plugin > <nl> < groupId > org . apache . maven . plugins < / groupId > <nl> < artifactId > maven - surefire - plugin < / artifactId > <nl> - < version > 2 . 20 < / version > <nl> + < version > 2 . 20 . 1 < / version > <nl> < configuration > <nl> < systemPropertyVariables > <nl> < jacoco - agent . destfile > $ { project . build . directory } / jacoco / jacoco . exec < / jacoco - agent . destfile > <nl> @ @ - 1140 , 7 + 1140 , 7 @ @ <nl> < plugin > <nl> < groupId > org . apache . maven . plugins < / groupId > <nl> < artifactId > maven - surefire - report - plugin < / artifactId > <nl> - < version > 2 . 20 < / version > <nl> + < version > 2 . 20 . 1 < / version > <nl> < / plugin > <nl> <nl> < plugin >
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java <nl> index 0d92046 . . 2924a2b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java <nl> @ @ - 38 , 7 + 38 , 9 @ @ public class NoCloneCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " noclone " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 55 , 7 + 57 , 7 @ @ public class NoCloneCheckTest <nl> " 60 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 98 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputClone . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNoClone . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputClone . java <nl> deleted file mode 100644 <nl> index d641483 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputClone . java <nl> + + + / dev / null <nl> @ @ - 1 , 99 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - public class InputClone <nl> - { / * class body * / <nl> - public InputClone ( ) throws CloneNotSupportedException <nl> - { / / constructor body <nl> - super . equals ( new String ( ) ) ; <nl> - super . clone ( ) ; <nl> - } <nl> - <nl> - public Object clone ( ) throws CloneNotSupportedException <nl> - { <nl> - return super . clone ( ) ; <nl> - } <nl> - <nl> - public void method ( ) throws CloneNotSupportedException <nl> - { <nl> - super . clone ( ) ; <nl> - } <nl> - <nl> - { <nl> - super . clone ( ) ; <nl> - } <nl> - } <nl> - <nl> - class NoSuperClone <nl> - { <nl> - public Object clone ( ) <nl> - { <nl> - return null ; <nl> - } <nl> - } <nl> - <nl> - class InnerClone <nl> - { <nl> - public Object clone ( ) <nl> - { <nl> - class Inner <nl> - { <nl> - public Object clone ( ) throws CloneNotSupportedException <nl> - { <nl> - return super . clone ( ) ; <nl> - } <nl> - } <nl> - return null ; <nl> - } <nl> - } <nl> - <nl> - / / This could not pass as valid semantically but tests that <nl> - / / type arguments are ignored when checking super calls <nl> - class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > <nl> - { <nl> - public CloneWithTypeArguments < T > clone ( ) throws CloneNotSupportedException <nl> - { <nl> - return ( CloneWithTypeArguments < T > ) super . < T > clone ( ) ; <nl> - } <nl> - } <nl> - <nl> - class CloneWithTypeArgumentsAndNoSuper < T > <nl> - { <nl> - public CloneWithTypeArgumentsAndNoSuper < T > clone ( ) throws CloneNotSupportedException <nl> - { <nl> - return null ; <nl> - } <nl> - } <nl> - <nl> - / / Check that super keword isn ' t snagged here <nl> - class MyClassWithGenericSuperMethod <nl> - { <nl> - void someMethod ( java . util . List < ? super java . util . Map < Object , Object > > l ) <nl> - { <nl> - <nl> - } <nl> - <nl> - / * * <nl> - * Not a valid clone override . Should not get flagged . <nl> - * @ param o some object <nl> - * @ return a cloned Object ? <nl> - * / <nl> - public static Object clone ( Object o ) { <nl> - 	 return null ; <nl> - } <nl> - } <nl> - <nl> - class AnotherClass { <nl> - <nl> - / * * <nl> - * Not a valid clone override . Should not get flagged . <nl> - * @ param t some type <nl> - * @ param < T > a type <nl> - * @ return a cloned type ? <nl> - * / <nl> - public < T > T clone ( T t ) { <nl> - 	 return null ; <nl> - } <nl> - } <nl> - <nl> - class NativeTest { <nl> - public native Object clone ( ) ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / noclone / InputNoClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / noclone / InputNoClone . java <nl> new file mode 100644 <nl> index 0000000 . . e47ceb3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / noclone / InputNoClone . java <nl> @ @ - 0 , 0 + 1 , 99 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . noclone ; <nl> + public class InputNoClone <nl> + { / * class body * / <nl> + public InputNoClone ( ) throws CloneNotSupportedException <nl> + { / / constructor body <nl> + super . equals ( new String ( ) ) ; <nl> + super . clone ( ) ; <nl> + } <nl> + <nl> + public Object clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return super . clone ( ) ; <nl> + } <nl> + <nl> + public void method ( ) throws CloneNotSupportedException <nl> + { <nl> + super . clone ( ) ; <nl> + } <nl> + <nl> + { <nl> + super . clone ( ) ; <nl> + } <nl> + } <nl> + <nl> + class NoSuperClone <nl> + { <nl> + public Object clone ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + class InnerClone <nl> + { <nl> + public Object clone ( ) <nl> + { <nl> + class Inner <nl> + { <nl> + public Object clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return super . clone ( ) ; <nl> + } <nl> + } <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + / / This could not pass as valid semantically but tests that <nl> + / / type arguments are ignored when checking super calls <nl> + class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > <nl> + { <nl> + public CloneWithTypeArguments < T > clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return ( CloneWithTypeArguments < T > ) super . < T > clone ( ) ; <nl> + } <nl> + } <nl> + <nl> + class CloneWithTypeArgumentsAndNoSuper < T > <nl> + { <nl> + public CloneWithTypeArgumentsAndNoSuper < T > clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + / / Check that super keword isn ' t snagged here <nl> + class MyClassWithGenericSuperMethod <nl> + { <nl> + void someMethod ( java . util . List < ? super java . util . Map < Object , Object > > l ) <nl> + { <nl> + <nl> + } <nl> + <nl> + / * * <nl> + * Not a valid clone override . Should not get flagged . <nl> + * @ param o some object <nl> + * @ return a cloned Object ? <nl> + * / <nl> + public static Object clone ( Object o ) { <nl> + 	 return null ; <nl> + } <nl> + } <nl> + <nl> + class AnotherClass { <nl> + <nl> + / * * <nl> + * Not a valid clone override . Should not get flagged . <nl> + * @ param t some type <nl> + * @ param < T > a type <nl> + * @ return a cloned type ? <nl> + * / <nl> + public < T > T clone ( T t ) { <nl> + 	 return null ; <nl> + } <nl> + } <nl> + <nl> + class NativeTest { <nl> + public native Object clone ( ) ; <nl> + }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 65d1217 . . 7defda3 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 879 , 7 + 879 , 7 @ @ 
 < plugin > 
 < groupId > org . apache . maven . plugins < / groupId > 
 < artifactId > maven - surefire - plugin < / artifactId > 
 - < version > 2 . 20 < / version > 
 + < version > 2 . 20 . 1 < / version > 
 < configuration > 
 < systemPropertyVariables > 
 < jacoco - agent . destfile > $ { project . build . directory } / jacoco / jacoco . exec < / jacoco - agent . destfile > 
 @ @ - 1140 , 7 + 1140 , 7 @ @ 
 < plugin > 
 < groupId > org . apache . maven . plugins < / groupId > 
 < artifactId > maven - surefire - report - plugin < / artifactId > 
 - < version > 2 . 20 < / version > 
 + < version > 2 . 20 . 1 < / version > 
 < / plugin > 
 
 < plugin >

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java 
 index 0d92046 . . 2924a2b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoCloneCheckTest . java 
 @ @ - 38 , 7 + 38 , 9 @ @ public class NoCloneCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " noclone " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 55 , 7 + 57 , 7 @ @ public class NoCloneCheckTest 
 " 60 : " + getCheckMessage ( MSG _ KEY ) , 
 " 98 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputClone . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNoClone . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputClone . java 
 deleted file mode 100644 
 index d641483 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputClone . java 
 + + + / dev / null 
 @ @ - 1 , 99 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - public class InputClone 
 - { / * class body * / 
 - public InputClone ( ) throws CloneNotSupportedException 
 - { / / constructor body 
 - super . equals ( new String ( ) ) ; 
 - super . clone ( ) ; 
 - } 
 - 
 - public Object clone ( ) throws CloneNotSupportedException 
 - { 
 - return super . clone ( ) ; 
 - } 
 - 
 - public void method ( ) throws CloneNotSupportedException 
 - { 
 - super . clone ( ) ; 
 - } 
 - 
 - { 
 - super . clone ( ) ; 
 - } 
 - } 
 - 
 - class NoSuperClone 
 - { 
 - public Object clone ( ) 
 - { 
 - return null ; 
 - } 
 - } 
 - 
 - class InnerClone 
 - { 
 - public Object clone ( ) 
 - { 
 - class Inner 
 - { 
 - public Object clone ( ) throws CloneNotSupportedException 
 - { 
 - return super . clone ( ) ; 
 - } 
 - } 
 - return null ; 
 - } 
 - } 
 - 
 - / / This could not pass as valid semantically but tests that 
 - / / type arguments are ignored when checking super calls 
 - class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > 
 - { 
 - public CloneWithTypeArguments < T > clone ( ) throws CloneNotSupportedException 
 - { 
 - return ( CloneWithTypeArguments < T > ) super . < T > clone ( ) ; 
 - } 
 - } 
 - 
 - class CloneWithTypeArgumentsAndNoSuper < T > 
 - { 
 - public CloneWithTypeArgumentsAndNoSuper < T > clone ( ) throws CloneNotSupportedException 
 - { 
 - return null ; 
 - } 
 - } 
 - 
 - / / Check that super keword isn ' t snagged here 
 - class MyClassWithGenericSuperMethod 
 - { 
 - void someMethod ( java . util . List < ? super java . util . Map < Object , Object > > l ) 
 - { 
 - 
 - } 
 - 
 - / * * 
 - * Not a valid clone override . Should not get flagged . 
 - * @ param o some object 
 - * @ return a cloned Object ? 
 - * / 
 - public static Object clone ( Object o ) { 
 - 	 return null ; 
 - } 
 - } 
 - 
 - class AnotherClass { 
 - 
 - / * * 
 - * Not a valid clone override . Should not get flagged . 
 - * @ param t some type 
 - * @ param < T > a type 
 - * @ return a cloned type ? 
 - * / 
 - public < T > T clone ( T t ) { 
 - 	 return null ; 
 - } 
 - } 
 - 
 - class NativeTest { 
 - public native Object clone ( ) ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / noclone / InputNoClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / noclone / InputNoClone . java 
 new file mode 100644 
 index 0000000 . . e47ceb3 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / noclone / InputNoClone . java 
 @ @ - 0 , 0 + 1 , 99 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . noclone ; 
 + public class InputNoClone 
 + { / * class body * / 
 + public InputNoClone ( ) throws CloneNotSupportedException 
 + { / / constructor body 
 + super . equals ( new String ( ) ) ; 
 + super . clone ( ) ; 
 + } 
 + 
 + public Object clone ( ) throws CloneNotSupportedException 
 + { 
 + return super . clone ( ) ; 
 + } 
 + 
 + public void method ( ) throws CloneNotSupportedException 
 + { 
 + super . clone ( ) ; 
 + } 
 + 
 + { 
 + super . clone ( ) ; 
 + } 
 + } 
 + 
 + class NoSuperClone 
 + { 
 + public Object clone ( ) 
 + { 
 + return null ; 
 + } 
 + } 
 + 
 + class InnerClone 
 + { 
 + public Object clone ( ) 
 + { 
 + class Inner 
 + { 
 + public Object clone ( ) throws CloneNotSupportedException 
 + { 
 + return super . clone ( ) ; 
 + } 
 + } 
 + return null ; 
 + } 
 + } 
 + 
 + / / This could not pass as valid semantically but tests that 
 + / / type arguments are ignored when checking super calls 
 + class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > 
 + { 
 + public CloneWithTypeArguments < T > clone ( ) throws CloneNotSupportedException 
 + { 
 + return ( CloneWithTypeArguments < T > ) super . < T > clone ( ) ; 
 + } 
 + } 
 + 
 + class CloneWithTypeArgumentsAndNoSuper < T > 
 + { 
 + public CloneWithTypeArgumentsAndNoSuper < T > clone ( ) throws CloneNotSupportedException 
 + { 
 + return null ; 
 + } 
 + } 
 + 
 + / / Check that super keword isn ' t snagged here 
 + class MyClassWithGenericSuperMethod 
 + { 
 + void someMethod ( java . util . List < ? super java . util . Map < Object , Object > > l ) 
 + { 
 + 
 + } 
 + 
 + / * * 
 + * Not a valid clone override . Should not get flagged . 
 + * @ param o some object 
 + * @ return a cloned Object ? 
 + * / 
 + public static Object clone ( Object o ) { 
 + 	 return null ; 
 + } 
 + } 
 + 
 + class AnotherClass { 
 + 
 + / * * 
 + * Not a valid clone override . Should not get flagged . 
 + * @ param t some type 
 + * @ param < T > a type 
 + * @ return a cloned type ? 
 + * / 
 + public < T > T clone ( T t ) { 
 + 	 return null ; 
 + } 
 + } 
 + 
 + class NativeTest { 
 + public native Object clone ( ) ; 
 + }
