BLEU SCORE: 0.04753622060013115

TEST MSG: Issue # 4165 : Split and Organize Checkstyle inputs by Test for checks in coding package : ReturnCount
GENERATED MSG: Issue # 2161 : unify test input locations

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java <nl> index 1731dc2 . . 617a517 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java <nl> @ @ - 37 , 7 + 37 , 9 @ @ public class ReturnCountCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " returncount " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 56 , 7 + 58 , 7 @ @ public class ReturnCountCheckTest extends BaseCheckTestSupport { <nl> " 35 : 17 : " + getCheckMessage ( MSG _ KEY , 6 , 1 ) , <nl> " 49 : 5 : " + getCheckMessage ( MSG _ KEY , 7 , 2 ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputReturnCount . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputReturnCountSwitches . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 71 , 7 + 73 , 7 @ @ public class ReturnCountCheckTest extends BaseCheckTestSupport { <nl> " 35 : 17 : " + getCheckMessage ( MSG _ KEY , 6 , 1 ) , <nl> " 49 : 5 : " + getCheckMessage ( MSG _ KEY , 7 , 2 ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputReturnCount . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputReturnCountSwitches . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCount . java <nl> deleted file mode 100644 <nl> index 9714530 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCount . java <nl> + + + / dev / null <nl> @ @ - 1 , 66 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - / * к о м м е н т а р и й н а р у с с к о м * / <nl> - public class InputReturnCount <nl> - { <nl> - public boolean equals ( Object obj ) { <nl> - int i = 1 ; <nl> - switch ( i ) { <nl> - case 1 : return true ; <nl> - case 2 : return true ; <nl> - case 3 : return true ; <nl> - case 4 : return true ; <nl> - case 5 : return true ; <nl> - case 6 : return true ; <nl> - } <nl> - return false ; <nl> - } <nl> - <nl> - void foo ( int i ) { <nl> - switch ( i ) { <nl> - case 1 : return ; <nl> - case 2 : return ; <nl> - case 3 : return ; <nl> - case 4 : return ; <nl> - case 5 : return ; <nl> - case 6 : return ; <nl> - } <nl> - return ; <nl> - } <nl> - <nl> - void foo1 ( int i ) { <nl> - if ( i = = 1 ) { <nl> - return ; <nl> - } <nl> - Object obj = new Object ( ) { <nl> - void method1 ( int i ) { <nl> - switch ( i ) { <nl> - case 1 : return ; <nl> - case 2 : return ; <nl> - case 3 : return ; <nl> - case 4 : return ; <nl> - case 5 : return ; <nl> - } <nl> - return ; <nl> - } <nl> - } ; <nl> - return ; <nl> - } <nl> - <nl> - public boolean foo2 ( ) { <nl> - int i = 1 ; <nl> - switch ( i ) { <nl> - case 1 : return true ; <nl> - case 2 : return true ; <nl> - case 3 : return true ; <nl> - case 4 : return true ; <nl> - case 5 : return true ; <nl> - case 6 : return true ; <nl> - } <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - class Test { <nl> - <nl> - public Test ( ) { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCountLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCountLambda . java <nl> deleted file mode 100644 <nl> index 6030e15 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCountLambda . java <nl> + + + / dev / null <nl> @ @ - 1 , 63 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - import java . lang . Integer ; <nl> - import java . util . Optional ; <nl> - import java . util . concurrent . Callable ; <nl> - import java . util . function . Supplier ; <nl> - <nl> - <nl> - public class InputReturnCountLambda { <nl> - <nl> - Runnable fieldWithOneReturnInLambda = ( ) - > { <nl> - return ; <nl> - } ; <nl> - <nl> - Callable < Integer > fieldWithTwoReturnInLambda = ( ) - > { <nl> - if ( hashCode ( ) = = 0 ) return 0 ; <nl> - else return 1 ; <nl> - } ; <nl> - <nl> - Optional < Integer > methodWithOneReturnInLambda ( ) { <nl> - return Optional . of ( hashCode ( ) ) . filter ( i - > { <nl> - return i > 0 ; <nl> - } ) ; <nl> - } <nl> - <nl> - Optional < Integer > methodWithTwoReturnInLambda ( ) { <nl> - return Optional . of ( hashCode ( ) ) . filter ( i - > { <nl> - if ( i > 0 ) return true ; <nl> - else return false ; <nl> - } ) ; <nl> - } <nl> - <nl> - Optional < Object > methodWithThreeReturnInLambda ( int number ) { <nl> - return Optional . of ( number ) . map ( i - > { <nl> - if ( i = = 42 ) return true ; <nl> - else if ( i = = 7 ) return true ; <nl> - else return false ; <nl> - } ) ; <nl> - } <nl> - <nl> - int methodWithTwoReturnWithLambdas ( final int number ) { <nl> - if ( hashCode ( ) > 0 ) { <nl> - new Thread ( <nl> - ( ) - > { <nl> - } <nl> - ) . start ( ) ; <nl> - return number ; <nl> - } else { <nl> - return Optional . of ( hashCode ( ) ) . orElseGet ( ( ) - > { <nl> - if ( number > 0 ) return number ; <nl> - else return 0 ; <nl> - } ) ; <nl> - } <nl> - } <nl> - <nl> - Supplier < Supplier < Integer > > methodWithOneReturnPerLambda ( ) { <nl> - return ( ) - > { <nl> - return ( ) - > { <nl> - return 1 ; <nl> - } ; <nl> - } ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCountVoid . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCountVoid . java <nl> deleted file mode 100644 <nl> index b2551f4 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCountVoid . java <nl> + + + / dev / null <nl> @ @ - 1 , 40 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - class InputReturnCountVoid { <nl> - public InputReturnCountVoid ( ) { <nl> - return ; <nl> - } <nl> - <nl> - public void method ( ) { <nl> - if ( true ) { <nl> - return ; <nl> - } <nl> - } <nl> - <nl> - public void method2 ( ) { <nl> - if ( true ) { <nl> - return ; <nl> - } <nl> - <nl> - return ; <nl> - } <nl> - <nl> - public int method3 ( ) { <nl> - if ( true ) { <nl> - return 0 ; <nl> - } <nl> - <nl> - return 0 ; <nl> - } <nl> - <nl> - public int method4 ( ) { <nl> - if ( true ) { <nl> - return 0 ; <nl> - } <nl> - if ( false ) { <nl> - return 0 ; <nl> - } <nl> - <nl> - return 0 ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountLambda . java <nl> new file mode 100644 <nl> index 0000000 . . 5a7dd3d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountLambda . java <nl> @ @ - 0 , 0 + 1 , 63 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . returncount ; <nl> + <nl> + import java . lang . Integer ; <nl> + import java . util . Optional ; <nl> + import java . util . concurrent . Callable ; <nl> + import java . util . function . Supplier ; <nl> + <nl> + <nl> + public class InputReturnCountLambda { <nl> + <nl> + Runnable fieldWithOneReturnInLambda = ( ) - > { <nl> + return ; <nl> + } ; <nl> + <nl> + Callable < Integer > fieldWithTwoReturnInLambda = ( ) - > { <nl> + if ( hashCode ( ) = = 0 ) return 0 ; <nl> + else return 1 ; <nl> + } ; <nl> + <nl> + Optional < Integer > methodWithOneReturnInLambda ( ) { <nl> + return Optional . of ( hashCode ( ) ) . filter ( i - > { <nl> + return i > 0 ; <nl> + } ) ; <nl> + } <nl> + <nl> + Optional < Integer > methodWithTwoReturnInLambda ( ) { <nl> + return Optional . of ( hashCode ( ) ) . filter ( i - > { <nl> + if ( i > 0 ) return true ; <nl> + else return false ; <nl> + } ) ; <nl> + } <nl> + <nl> + Optional < Object > methodWithThreeReturnInLambda ( int number ) { <nl> + return Optional . of ( number ) . map ( i - > { <nl> + if ( i = = 42 ) return true ; <nl> + else if ( i = = 7 ) return true ; <nl> + else return false ; <nl> + } ) ; <nl> + } <nl> + <nl> + int methodWithTwoReturnWithLambdas ( final int number ) { <nl> + if ( hashCode ( ) > 0 ) { <nl> + new Thread ( <nl> + ( ) - > { <nl> + } <nl> + ) . start ( ) ; <nl> + return number ; <nl> + } else { <nl> + return Optional . of ( hashCode ( ) ) . orElseGet ( ( ) - > { <nl> + if ( number > 0 ) return number ; <nl> + else return 0 ; <nl> + } ) ; <nl> + } <nl> + } <nl> + <nl> + Supplier < Supplier < Integer > > methodWithOneReturnPerLambda ( ) { <nl> + return ( ) - > { <nl> + return ( ) - > { <nl> + return 1 ; <nl> + } ; <nl> + } ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountSwitches . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountSwitches . java <nl> new file mode 100644 <nl> index 0000000 . . b172203 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountSwitches . java <nl> @ @ - 0 , 0 + 1 , 66 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . returncount ; <nl> + / * к о м м е н т а р и й н а р у с с к о м * / <nl> + public class InputReturnCountSwitches <nl> + { <nl> + public boolean equals ( Object obj ) { <nl> + int i = 1 ; <nl> + switch ( i ) { <nl> + case 1 : return true ; <nl> + case 2 : return true ; <nl> + case 3 : return true ; <nl> + case 4 : return true ; <nl> + case 5 : return true ; <nl> + case 6 : return true ; <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> + void foo ( int i ) { <nl> + switch ( i ) { <nl> + case 1 : return ; <nl> + case 2 : return ; <nl> + case 3 : return ; <nl> + case 4 : return ; <nl> + case 5 : return ; <nl> + case 6 : return ; <nl> + } <nl> + return ; <nl> + } <nl> + <nl> + void foo1 ( int i ) { <nl> + if ( i = = 1 ) { <nl> + return ; <nl> + } <nl> + Object obj = new Object ( ) { <nl> + void method1 ( int i ) { <nl> + switch ( i ) { <nl> + case 1 : return ; <nl> + case 2 : return ; <nl> + case 3 : return ; <nl> + case 4 : return ; <nl> + case 5 : return ; <nl> + } <nl> + return ; <nl> + } <nl> + } ; <nl> + return ; <nl> + } <nl> + <nl> + public boolean foo2 ( ) { <nl> + int i = 1 ; <nl> + switch ( i ) { <nl> + case 1 : return true ; <nl> + case 2 : return true ; <nl> + case 3 : return true ; <nl> + case 4 : return true ; <nl> + case 5 : return true ; <nl> + case 6 : return true ; <nl> + } <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + class Test { <nl> + <nl> + public Test ( ) { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountVoid . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountVoid . java <nl> new file mode 100644 <nl> index 0000000 . . 9a2d48f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountVoid . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . returncount ; <nl> + <nl> + class InputReturnCountVoid { <nl> + public InputReturnCountVoid ( ) { <nl> + return ; <nl> + } <nl> + <nl> + public void method ( ) { <nl> + if ( true ) { <nl> + return ; <nl> + } <nl> + } <nl> + <nl> + public void method2 ( ) { <nl> + if ( true ) { <nl> + return ; <nl> + } <nl> + <nl> + return ; <nl> + } <nl> + <nl> + public int method3 ( ) { <nl> + if ( true ) { <nl> + return 0 ; <nl> + } <nl> + <nl> + return 0 ; <nl> + } <nl> + <nl> + public int method4 ( ) { <nl> + if ( true ) { <nl> + return 0 ; <nl> + } <nl> + if ( false ) { <nl> + return 0 ; <nl> + } <nl> + <nl> + return 0 ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> index 9af22a9 . . 2cdac81 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { <nl> } <nl> <nl> private static List < RevCommit > getCommitsToCheck ( ) throws Exception { <nl> - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; <nl> - <nl> - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> List < RevCommit > commits ; <nl> - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> - } <nl> - else { <nl> - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { <nl> + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> + else { <nl> + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> } <nl> return commits ; <nl> } <nl> @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { <nl> <nl> private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { <nl> RevCommitsPair revCommitIteratorPair ; <nl> - try { <nl> + <nl> + try ( RevWalk revWalk = new RevWalk ( repo ) ) { <nl> Iterator < RevCommit > first ; <nl> Iterator < RevCommit > second ; <nl> - <nl> - RevWalk revWalk = new RevWalk ( repo ) ; <nl> - <nl> ObjectId headId = repo . resolve ( Constants . HEAD ) ; <nl> RevCommit headCommit = revWalk . parseCommit ( headId ) ; <nl> <nl> @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { <nl> RevCommit firstParent = headCommit . getParent ( 0 ) ; <nl> RevCommit secondParent = headCommit . getParent ( 1 ) ; <nl> <nl> - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + } <nl> } <nl> else { <nl> - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . call ( ) . iterator ( ) ; <nl> + } <nl> second = Collections . emptyIterator ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java 
 index 1731dc2 . . 617a517 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java 
 @ @ - 37 , 7 + 37 , 9 @ @ public class ReturnCountCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " returncount " + File . separator 
 + + filename ) ; 
 } 
 
 @ Override 
 @ @ - 56 , 7 + 58 , 7 @ @ public class ReturnCountCheckTest extends BaseCheckTestSupport { 
 " 35 : 17 : " + getCheckMessage ( MSG _ KEY , 6 , 1 ) , 
 " 49 : 5 : " + getCheckMessage ( MSG _ KEY , 7 , 2 ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputReturnCount . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputReturnCountSwitches . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 71 , 7 + 73 , 7 @ @ public class ReturnCountCheckTest extends BaseCheckTestSupport { 
 " 35 : 17 : " + getCheckMessage ( MSG _ KEY , 6 , 1 ) , 
 " 49 : 5 : " + getCheckMessage ( MSG _ KEY , 7 , 2 ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputReturnCount . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputReturnCountSwitches . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCount . java 
 deleted file mode 100644 
 index 9714530 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCount . java 
 + + + / dev / null 
 @ @ - 1 , 66 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - / * к о м м е н т а р и й н а р у с с к о м * / 
 - public class InputReturnCount 
 - { 
 - public boolean equals ( Object obj ) { 
 - int i = 1 ; 
 - switch ( i ) { 
 - case 1 : return true ; 
 - case 2 : return true ; 
 - case 3 : return true ; 
 - case 4 : return true ; 
 - case 5 : return true ; 
 - case 6 : return true ; 
 - } 
 - return false ; 
 - } 
 - 
 - void foo ( int i ) { 
 - switch ( i ) { 
 - case 1 : return ; 
 - case 2 : return ; 
 - case 3 : return ; 
 - case 4 : return ; 
 - case 5 : return ; 
 - case 6 : return ; 
 - } 
 - return ; 
 - } 
 - 
 - void foo1 ( int i ) { 
 - if ( i = = 1 ) { 
 - return ; 
 - } 
 - Object obj = new Object ( ) { 
 - void method1 ( int i ) { 
 - switch ( i ) { 
 - case 1 : return ; 
 - case 2 : return ; 
 - case 3 : return ; 
 - case 4 : return ; 
 - case 5 : return ; 
 - } 
 - return ; 
 - } 
 - } ; 
 - return ; 
 - } 
 - 
 - public boolean foo2 ( ) { 
 - int i = 1 ; 
 - switch ( i ) { 
 - case 1 : return true ; 
 - case 2 : return true ; 
 - case 3 : return true ; 
 - case 4 : return true ; 
 - case 5 : return true ; 
 - case 6 : return true ; 
 - } 
 - return false ; 
 - } 
 - } 
 - 
 - class Test { 
 - 
 - public Test ( ) { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCountLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCountLambda . java 
 deleted file mode 100644 
 index 6030e15 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCountLambda . java 
 + + + / dev / null 
 @ @ - 1 , 63 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - import java . lang . Integer ; 
 - import java . util . Optional ; 
 - import java . util . concurrent . Callable ; 
 - import java . util . function . Supplier ; 
 - 
 - 
 - public class InputReturnCountLambda { 
 - 
 - Runnable fieldWithOneReturnInLambda = ( ) - > { 
 - return ; 
 - } ; 
 - 
 - Callable < Integer > fieldWithTwoReturnInLambda = ( ) - > { 
 - if ( hashCode ( ) = = 0 ) return 0 ; 
 - else return 1 ; 
 - } ; 
 - 
 - Optional < Integer > methodWithOneReturnInLambda ( ) { 
 - return Optional . of ( hashCode ( ) ) . filter ( i - > { 
 - return i > 0 ; 
 - } ) ; 
 - } 
 - 
 - Optional < Integer > methodWithTwoReturnInLambda ( ) { 
 - return Optional . of ( hashCode ( ) ) . filter ( i - > { 
 - if ( i > 0 ) return true ; 
 - else return false ; 
 - } ) ; 
 - } 
 - 
 - Optional < Object > methodWithThreeReturnInLambda ( int number ) { 
 - return Optional . of ( number ) . map ( i - > { 
 - if ( i = = 42 ) return true ; 
 - else if ( i = = 7 ) return true ; 
 - else return false ; 
 - } ) ; 
 - } 
 - 
 - int methodWithTwoReturnWithLambdas ( final int number ) { 
 - if ( hashCode ( ) > 0 ) { 
 - new Thread ( 
 - ( ) - > { 
 - } 
 - ) . start ( ) ; 
 - return number ; 
 - } else { 
 - return Optional . of ( hashCode ( ) ) . orElseGet ( ( ) - > { 
 - if ( number > 0 ) return number ; 
 - else return 0 ; 
 - } ) ; 
 - } 
 - } 
 - 
 - Supplier < Supplier < Integer > > methodWithOneReturnPerLambda ( ) { 
 - return ( ) - > { 
 - return ( ) - > { 
 - return 1 ; 
 - } ; 
 - } ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCountVoid . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCountVoid . java 
 deleted file mode 100644 
 index b2551f4 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputReturnCountVoid . java 
 + + + / dev / null 
 @ @ - 1 , 40 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - class InputReturnCountVoid { 
 - public InputReturnCountVoid ( ) { 
 - return ; 
 - } 
 - 
 - public void method ( ) { 
 - if ( true ) { 
 - return ; 
 - } 
 - } 
 - 
 - public void method2 ( ) { 
 - if ( true ) { 
 - return ; 
 - } 
 - 
 - return ; 
 - } 
 - 
 - public int method3 ( ) { 
 - if ( true ) { 
 - return 0 ; 
 - } 
 - 
 - return 0 ; 
 - } 
 - 
 - public int method4 ( ) { 
 - if ( true ) { 
 - return 0 ; 
 - } 
 - if ( false ) { 
 - return 0 ; 
 - } 
 - 
 - return 0 ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountLambda . java 
 new file mode 100644 
 index 0000000 . . 5a7dd3d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountLambda . java 
 @ @ - 0 , 0 + 1 , 63 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . returncount ; 
 + 
 + import java . lang . Integer ; 
 + import java . util . Optional ; 
 + import java . util . concurrent . Callable ; 
 + import java . util . function . Supplier ; 
 + 
 + 
 + public class InputReturnCountLambda { 
 + 
 + Runnable fieldWithOneReturnInLambda = ( ) - > { 
 + return ; 
 + } ; 
 + 
 + Callable < Integer > fieldWithTwoReturnInLambda = ( ) - > { 
 + if ( hashCode ( ) = = 0 ) return 0 ; 
 + else return 1 ; 
 + } ; 
 + 
 + Optional < Integer > methodWithOneReturnInLambda ( ) { 
 + return Optional . of ( hashCode ( ) ) . filter ( i - > { 
 + return i > 0 ; 
 + } ) ; 
 + } 
 + 
 + Optional < Integer > methodWithTwoReturnInLambda ( ) { 
 + return Optional . of ( hashCode ( ) ) . filter ( i - > { 
 + if ( i > 0 ) return true ; 
 + else return false ; 
 + } ) ; 
 + } 
 + 
 + Optional < Object > methodWithThreeReturnInLambda ( int number ) { 
 + return Optional . of ( number ) . map ( i - > { 
 + if ( i = = 42 ) return true ; 
 + else if ( i = = 7 ) return true ; 
 + else return false ; 
 + } ) ; 
 + } 
 + 
 + int methodWithTwoReturnWithLambdas ( final int number ) { 
 + if ( hashCode ( ) > 0 ) { 
 + new Thread ( 
 + ( ) - > { 
 + } 
 + ) . start ( ) ; 
 + return number ; 
 + } else { 
 + return Optional . of ( hashCode ( ) ) . orElseGet ( ( ) - > { 
 + if ( number > 0 ) return number ; 
 + else return 0 ; 
 + } ) ; 
 + } 
 + } 
 + 
 + Supplier < Supplier < Integer > > methodWithOneReturnPerLambda ( ) { 
 + return ( ) - > { 
 + return ( ) - > { 
 + return 1 ; 
 + } ; 
 + } ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountSwitches . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountSwitches . java 
 new file mode 100644 
 index 0000000 . . b172203 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountSwitches . java 
 @ @ - 0 , 0 + 1 , 66 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . returncount ; 
 + / * к о м м е н т а р и й н а р у с с к о м * / 
 + public class InputReturnCountSwitches 
 + { 
 + public boolean equals ( Object obj ) { 
 + int i = 1 ; 
 + switch ( i ) { 
 + case 1 : return true ; 
 + case 2 : return true ; 
 + case 3 : return true ; 
 + case 4 : return true ; 
 + case 5 : return true ; 
 + case 6 : return true ; 
 + } 
 + return false ; 
 + } 
 + 
 + void foo ( int i ) { 
 + switch ( i ) { 
 + case 1 : return ; 
 + case 2 : return ; 
 + case 3 : return ; 
 + case 4 : return ; 
 + case 5 : return ; 
 + case 6 : return ; 
 + } 
 + return ; 
 + } 
 + 
 + void foo1 ( int i ) { 
 + if ( i = = 1 ) { 
 + return ; 
 + } 
 + Object obj = new Object ( ) { 
 + void method1 ( int i ) { 
 + switch ( i ) { 
 + case 1 : return ; 
 + case 2 : return ; 
 + case 3 : return ; 
 + case 4 : return ; 
 + case 5 : return ; 
 + } 
 + return ; 
 + } 
 + } ; 
 + return ; 
 + } 
 + 
 + public boolean foo2 ( ) { 
 + int i = 1 ; 
 + switch ( i ) { 
 + case 1 : return true ; 
 + case 2 : return true ; 
 + case 3 : return true ; 
 + case 4 : return true ; 
 + case 5 : return true ; 
 + case 6 : return true ; 
 + } 
 + return false ; 
 + } 
 + } 
 + 
 + class Test { 
 + 
 + public Test ( ) { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountVoid . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountVoid . java 
 new file mode 100644 
 index 0000000 . . 9a2d48f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / returncount / InputReturnCountVoid . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . returncount ; 
 + 
 + class InputReturnCountVoid { 
 + public InputReturnCountVoid ( ) { 
 + return ; 
 + } 
 + 
 + public void method ( ) { 
 + if ( true ) { 
 + return ; 
 + } 
 + } 
 + 
 + public void method2 ( ) { 
 + if ( true ) { 
 + return ; 
 + } 
 + 
 + return ; 
 + } 
 + 
 + public int method3 ( ) { 
 + if ( true ) { 
 + return 0 ; 
 + } 
 + 
 + return 0 ; 
 + } 
 + 
 + public int method4 ( ) { 
 + if ( true ) { 
 + return 0 ; 
 + } 
 + if ( false ) { 
 + return 0 ; 
 + } 
 + 
 + return 0 ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 index 9af22a9 . . 2cdac81 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { 
 } 
 
 private static List < RevCommit > getCommitsToCheck ( ) throws Exception { 
 - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; 
 - 
 - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 List < RevCommit > commits ; 
 - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 - } 
 - else { 
 - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { 
 + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 + else { 
 + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 } 
 return commits ; 
 } 
 @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { 
 
 private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { 
 RevCommitsPair revCommitIteratorPair ; 
 - try { 
 + 
 + try ( RevWalk revWalk = new RevWalk ( repo ) ) { 
 Iterator < RevCommit > first ; 
 Iterator < RevCommit > second ; 
 - 
 - RevWalk revWalk = new RevWalk ( repo ) ; 
 - 
 ObjectId headId = repo . resolve ( Constants . HEAD ) ; 
 RevCommit headCommit = revWalk . parseCommit ( headId ) ; 
 
 @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { 
 RevCommit firstParent = headCommit . getParent ( 0 ) ; 
 RevCommit secondParent = headCommit . getParent ( 1 ) ; 
 
 - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + } 
 } 
 else { 
 - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . call ( ) . iterator ( ) ; 
 + } 
 second = Collections . emptyIterator ( ) ; 
 } 

