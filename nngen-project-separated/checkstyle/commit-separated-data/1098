BLEU SCORE: 0.033864985683445356

TEST MSG: Issue # 2226 : Replace line - based suppressions with inline ones
GENERATED MSG: Fix PMD violations from UseVarargs rule , issue # 999

TEST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index 480b41f . . 226add9 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 38 , 14 + 38 , 9 @ @ <nl> < / module > <nl> < module name = " SuppressWarningsFilter " / > <nl> < module name = " SuppressWithNearbyCommentFilter " > <nl> - < ! - - <nl> - Use suppressions . xml for suppressions , this is only example . <nl> - checkFormat will prevent suppression comments from being valid . <nl> - - - > <nl> - < property name = " checkFormat " value = " IGNORETHIS " / > <nl> - < property name = " commentFormat " value = " SUPPRESS CHECKSTYLE , ( \ w + ) " / > <nl> - < property name = " messageFormat " value = " $ 1 " / > <nl> - < property name = " influenceFormat " value = " - 1 " / > <nl> + < property name = " commentFormat " value = " - @ cs \ [ ( \ w { 8 , } ) \ ] \ w [ \ ( \ ) \ - \ . \ ' \ ` \ , \ : \ ; \ w ] { 10 , } " / > <nl> + < property name = " checkFormat " value = " $ 1 " / > <nl> + < property name = " influenceFormat " value = " 3 " / > <nl> < / module > <nl> <nl> < ! - - Headers - - > <nl> diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml <nl> index bed9499 . . 7402870 100644 <nl> - - - a / config / checkstyle _ sevntu _ checks . xml <nl> + + + b / config / checkstyle _ sevntu _ checks . xml <nl> @ @ - 11 , 8 + 11 , 14 @ @ <nl> < module name = " SuppressionFilter " > <nl> < property name = " file " value = " $ { project . basedir } / config / sevntu _ suppressions . xml " / > <nl> < / module > <nl> + < module name = " SuppressWithNearbyCommentFilter " > <nl> + < property name = " commentFormat " value = " - @ cs \ [ ( \ w { 8 , } ) \ ] \ w [ \ ( \ ) \ - \ . \ ' \ ` \ , \ : \ ; \ w ] { 10 , } " / > <nl> + < property name = " checkFormat " value = " $ 1 " / > <nl> + < property name = " influenceFormat " value = " 3 " / > <nl> + < / module > <nl> <nl> < module name = " TreeWalker " > <nl> + < module name = " FileContentsHolder " / > <nl> < module name = " StaticMethodCandidate " / > <nl> < module name = " UselessSingleCatchCheck " / > <nl> < module name = " NestedSwitchCheck " / > <nl> diff - - git a / config / sevntu _ suppressions . xml b / config / sevntu _ suppressions . xml <nl> index 80d2936 . . d05a9aa 100644 <nl> - - - a / config / sevntu _ suppressions . xml <nl> + + + b / config / sevntu _ suppressions . xml <nl> @ @ - 15 , 47 + 15 , 10 @ @ <nl> < suppress checks = " LineLengthExtended " <nl> files = " ParseTreeBuilder \ . java " / > <nl> <nl> - < ! - - Override methods from base class . <nl> - Issue : https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 166 - - > <nl> - < suppress checks = " SimpleAccessorNameNotation " <nl> - files = " ClassDataAbstractionCouplingCheck \ . java " <nl> - lines = " 71 " / > <nl> - < suppress checks = " SimpleAccessorNameNotation " <nl> - files = " ClassFanOutComplexityCheck \ . java " <nl> - lines = " 76 " / > <nl> - < suppress checks = " SimpleAccessorNameNotation " <nl> - files = " SingleSpaceSeparatorCheck \ . java " <nl> - lines = " 110 " / > <nl> - <nl> - < ! - - These classes are deprecated and will be removed soon . - - > <nl> - < suppress checks = " ForbidWildcardAsReturnType " <nl> - files = " AbstractTypeAwareCheck \ . java " <nl> - lines = " 230 , 246 , 409 " / > <nl> - < suppress checks = " ForbidWildcardAsReturnType " <nl> - files = " ClassResolver \ . java " <nl> - lines = " 72 , 184 " / > <nl> - < ! - - We need to satisfy javax . swing . table . AbstractTableModel <nl> - public Class < ? > getColumnClass ( int columnIndex ) { - - > <nl> - < suppress checks = " ForbidWildcardAsReturnType " <nl> - files = " ParseTreeTableModel \ . java " <nl> - lines = " 92 " / > <nl> - < suppress checks = " ForbidWildcardAsReturnType " <nl> - files = " ParseTreeTablePModel \ . java " <nl> - lines = " 109 " / > <nl> < ! - - If we change declaration order , Illegal forward reference will appear . <nl> See https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 415 - - > <nl> < suppress checks = " CustomDeclarationOrder " <nl> files = " JavadocTokenTypes . java " / > <nl> - < ! - - CustomDeclarationOrder does not treat groups of overloaded methods . <nl> - See https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 414 - - > <nl> - < suppress checks = " CustomDeclarationOrder " <nl> - files = " AbstractViolationReporter . java " <nl> - lines = " 152 , 164 " / > <nl> - <nl> - < ! - - testing for catch Error is part of 100 % coverage - - > <nl> - < suppress checks = " IllegalCatchExtended " <nl> - files = " CheckerTest \ . java " <nl> - lines = " 543 " / > <nl> <nl> < ! - - JavadocTagInfo . java , JavadocTags . java , InvalidJavadocTag . java , JavadocTag . java will be <nl> deprecated as we completely switch to ANTLR parser for javadoc . All of the mentioned classes <nl> diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 8b83e37 . . 23dc286 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 9 , 57 + 9 , 6 @ @ <nl> files = " TokenTypes . java " <nl> lines = " 1 " / > <nl> <nl> - < ! - - There is no other way to deliver filename that was under processing . <nl> - See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > <nl> - < suppress checks = " IllegalCatch " <nl> - files = " Checker . java " <nl> - lines = " 272 " / > <nl> - < ! - - Test to reproduce error catching in Checker and satisfy coverage rate . - - > <nl> - < suppress checks = " IllegalCatch " <nl> - files = " CheckerTest . java " <nl> - lines = " 576 " / > <nl> - <nl> - < ! - - we can not change it as , Check name is part of API ( used in configurations ) - - > <nl> - < suppress checks = " AbbreviationAsWordInName " <nl> - files = " JavaNCSSCheck . java " <nl> - lines = " 41 " / > <nl> - < ! - - test should be named as their main class - - > <nl> - < suppress checks = " AbbreviationAsWordInName " <nl> - files = " JavaNCSSCheckTest . java " <nl> - lines = " 42 " / > <nl> - <nl> - < ! - - we can not change it as , Check name is part of API ( used in configurations ) - - > <nl> - < suppress checks = " AbbreviationAsWordInName " <nl> - files = " XMLLogger . java " <nl> - lines = " 44 " / > <nl> - < ! - - test should be named as their main class - - > <nl> - < suppress checks = " AbbreviationAsWordInName " <nl> - files = " XMLLoggerTest . java " <nl> - lines = " 48 " / > <nl> - <nl> - < ! - - we can not change it as , Check property is part of API ( used in configurations ) - - > <nl> - < suppress checks = " AbbreviationAsWordInName " <nl> - files = " JavadocMethodCheck . java " <nl> - lines = " 146 , 252 " / > <nl> - < ! - - we can not change it as , Check property is part of API ( used in configurations ) - - > <nl> - < suppress checks = " AbbreviationAsWordInName " <nl> - files = " SuppressWithNearbyCommentFilter . java " <nl> - lines = " 97 , 183 " / > <nl> - < ! - - we can not change it as , Check property is part of API ( used in configurations ) - - > <nl> - < suppress checks = " AbbreviationAsWordInName " <nl> - files = " SuppressionCommentFilter . java " <nl> - lines = " 85 , 172 " / > <nl> - <nl> - < ! - - should be removed at 7 . 0 version , we keep for some time to avoid braking compatibiilty - - > <nl> - < suppress checks = " AbbreviationAsWordInName " <nl> - files = " CheckstyleAntTask . java " <nl> - lines = " 230 " / > <nl> - <nl> - < ! - - should be removed at 7 . 0 version , we keep for some time to avoid braking compatibiilty - - > <nl> - < suppress checks = " AbbreviationAsWordInName " <nl> - files = " AbstractComplexityCheck . java " <nl> - lines = " 65 " / > <nl> - <nl> < ! - - illegal words are part of Javadoc - - > <nl> < suppress checks = " TodoComment " files = " . * TodoCommentCheck \ . java " / > <nl> <nl> @ @ - 123 , 10 + 72 , 6 @ @ <nl> < ! - - VisibilityModifierCheck has 7 options which require 7 additional methods ( setters ) - - > <nl> < suppress checks = " MethodCount " files = " [ \ \ / ] VisibilityModifierCheck . java $ " / > <nl> <nl> - < ! - - getDetails ( ) method - huge Switch , it has to be monolithic - - > <nl> - < suppress checks = " ExecutableStatementCount " files = " RightCurlyCheck \ . java " lines = " 313 " / > <nl> - < suppress checks = " JavaNCSS " files = " RightCurlyCheck \ . java " lines = " 313 " / > <nl> - <nl> < ! - - we need that set of converters - - > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " AutomaticBean \ . java " / > <nl> < ! - - they are aggregators of logic , usage a several of classes are ok - - > <nl> @ @ - 139 , 36 + 84 , 10 @ @ <nl> < ! - - Should be fixed after moving https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / blob / master / sevntu - checks / src / main / java / com / github / sevntu / checkstyle / checks / coding / ReturnCountExtendedCheck . java into the main repo - - > <nl> < suppress checks = " ReturnCount " files = " ( ClassResolver | ConfigurationLoader | IndentationCheckTest ) \ . java " / > <nl> <nl> - < ! - - Method getClassFrameWhereViolationIsFound already have too much abstract methods that fully <nl> - explain a logic , additional abstraction will not make logic / algorithm more readable . - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " RequireThisCheck \ . java " lines = " 416 " / > <nl> - < ! - - The only optimization which can be there is to move CASE - block expressions to separate method , <nl> - but that will not increase readability . - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " FinalLocalVariableCheck \ . java " lines = " 176 , 326 " / > <nl> - <nl> < ! - - Suppressions from PMD configuration - - > <nl> - < ! - - validateCli is not reasonable to split as encapsulation of logic will be damaged - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " Main \ . java " lines = " 247 " / > <nl> < ! - - JavadocMethodCheck , JavadocStyleCheck , JavadocUtils . getJavadocTags ( ) - deprecated - - > <nl> < suppress checks = " CyclomaticComplexity " files = " JavadocMethodCheck \ . java " / > <nl> < suppress checks = " CyclomaticComplexity " files = " JavadocStyleCheck \ . java " / > <nl> < suppress checks = " CyclomaticComplexity " files = " CustomImportOrderCheck \ . java " / > <nl> <nl> - < ! - - equals ( ) - a lot of fields to check - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " LocalizedMessage \ . java " lines = " 210 " / > <nl> - < ! - - SWITCH was transformed into IF - ELSE - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " ImportOrderCheck \ . java " lines = " 357 " / > <nl> - <nl> - < ! - - LocalizedMessage class is immutable , we need that amount of arguments . - - > <nl> - < suppress checks = " ParameterNumber " <nl> - files = " LocalizedMessage . java " <nl> - lines = " 105 , 143 , 174 " / > <nl> - <nl> - < ! - - Not reasonable to split as encapsulation of logic will be damaged . - - > <nl> - < suppress checks = " ExecutableStatementCount " files = " Main \ . java " lines = " 128 " / > <nl> - < suppress checks = " JavaNCSS " files = " Main \ . java " lines = " 128 " / > <nl> - <nl> - < ! - - too complex to break apart - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " MissingOverrideCheck \ . java " lines = " 144 " / > <nl> - < suppress checks = " ReturnCount " files = " JavadocStyleCheck \ . java " lines = " 342 " / > <nl> < / suppressions > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> index 2059978 . . 9ff42ba 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 269 , 6 + 269 , 8 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> cache . put ( fileName , timestamp ) ; <nl> } <nl> } <nl> + / / - @ cs [ IllegalCatch ] There is no other way to deliver filename that was under <nl> + / / processing . See https : / / github . com / checkstyle / checkstyle / issues / 2285 <nl> catch ( Exception ex ) { <nl> / / We need to catch all exceptions to put a reason failure ( file name ) in exception <nl> throw new CheckstyleException ( " Exception was thrown while processing " <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index 0fce092 . . a8418ed 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 244 , 6 + 244 , 7 @ @ public final class Main { <nl> * @ param filesToProcess List of files to process found from the command line . <nl> * @ return list of violations <nl> * / <nl> + / / - @ cs [ CyclomaticComplexity ] Breaking apart will damage encapsulation <nl> private static List < String > validateCli ( CommandLine cmdLine , List < File > filesToProcess ) { <nl> final List < String > result = new ArrayList < > ( ) ; <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> index ed6fbb7 . . 63a0233 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> @ @ - 41 , 6 + 41 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> * @ author < a href = " mailto : stephane . bailliez @ wanadoo . fr " > Stephane Bailliez < / a > <nl> * / <nl> + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , <nl> + / / check ' s name is part of API ( used in configurations ) . <nl> public class XMLLogger <nl> extends AutomaticBean <nl> implements AuditListener { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> index b3d5072 . . 1274ad7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> @ @ - 226 , 6 + 226 , 8 @ @ public class CheckstyleAntTask extends Task { <nl> * @ param url the URL of the configuration to use <nl> * @ deprecated please use setConfigUrl instead <nl> * / <nl> + / / - @ cs [ AbbreviationAsWordInName ] Should be removed at 7 . 0 version , <nl> + / / we keep for some time to avoid braking compatibility . <nl> @ Deprecated <nl> public void setConfigURL ( URL url ) { <nl> setConfigUrl ( url ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> index da3885a . . 44b511e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> @ @ - 149 , 6 + 149 , 8 @ @ public abstract class AbstractViolationReporter <nl> * <nl> * @ see java . text . MessageFormat <nl> * / <nl> + / / - @ cs [ CustomDeclarationOrder ] CustomDeclarationOrder does not treat groups of <nl> + / / overloaded methods . See https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 414 <nl> public abstract void log ( int line , String key , Object . . . args ) ; <nl> <nl> / * * <nl> @ @ - 161 , 6 + 163 , 8 @ @ public abstract class AbstractViolationReporter <nl> * <nl> * @ see java . text . MessageFormat <nl> * / <nl> + / / - @ cs [ CustomDeclarationOrder ] CustomDeclarationOrder does not treat groups of <nl> + / / overloaded methods . See https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 414 <nl> public abstract void log ( int line , int col , String key , <nl> Object . . . args ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java <nl> index a809eae . . 25f2552 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java <nl> @ @ - 102 , 6 + 102 , 7 @ @ public final class LocalizedMessage <nl> * @ param sourceClass the Class that is the source of the message <nl> * @ param customMessage optional custom message overriding the default <nl> * / <nl> + / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . <nl> public LocalizedMessage ( int lineNo , <nl> int columnNo , <nl> String bundle , <nl> @ @ - 140 , 6 + 141 , 7 @ @ public final class LocalizedMessage <nl> * @ param sourceClass the Class that is the source of the message <nl> * @ param customMessage optional custom message overriding the default <nl> * / <nl> + / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . <nl> public LocalizedMessage ( int lineNo , <nl> int columnNo , <nl> String bundle , <nl> @ @ - 171 , 6 + 173 , 7 @ @ public final class LocalizedMessage <nl> * @ param sourceClass the source class for the message <nl> * @ param customMessage optional custom message overriding the default <nl> * / <nl> + / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . <nl> public LocalizedMessage ( int lineNo , <nl> String bundle , <nl> String key , <nl> @ @ - 207 , 6 + 210 , 7 @ @ public final class LocalizedMessage <nl> sourceClass , customMessage ) ; <nl> } <nl> <nl> + / / - @ cs [ CyclomaticComplexity ] equals - a lot of fields to check . <nl> @ Override <nl> public boolean equals ( Object object ) { <nl> if ( this = = object ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> index 6d8390e . . 1141700 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> @ @ - 227 , 6 + 227 , 7 @ @ public abstract class AbstractTypeAwareCheck extends AbstractCheck { <nl> * @ return the resolved class or { @ code null } <nl> * if unable to resolve the class . <nl> * / <nl> + / / - @ cs [ ForbidWildcardAsReturnType ] The class is deprecated and will be removed soon . <nl> protected final Class < ? > resolveClass ( String resolvableClassName , <nl> String className ) { <nl> try { <nl> @ @ - 243 , 6 + 244 , 7 @ @ public abstract class AbstractTypeAwareCheck extends AbstractCheck { <nl> * @ param className name of surrounding class . <nl> * @ return { @ code Class } for a ident . <nl> * / <nl> + / / - @ cs [ ForbidWildcardAsReturnType ] The class is deprecated and will be removed soon . <nl> protected final Class < ? > tryLoadClass ( Token ident , String className ) { <nl> final Class < ? > clazz = resolveClass ( ident . getText ( ) , className ) ; <nl> if ( clazz = = null ) { <nl> @ @ - 406 , 6 + 408 , 7 @ @ public abstract class AbstractTypeAwareCheck extends AbstractCheck { <nl> / * * <nl> * @ return { @ code Class } associated with an object . <nl> * / <nl> + / / - @ cs [ ForbidWildcardAsReturnType ] The class is deprecated and will be removed soon . <nl> public abstract Class < ? > getClazz ( ) ; <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java <nl> index fa25cb6 . . ca17d73 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java <nl> @ @ - 69 , 6 + 69 , 7 @ @ public class ClassResolver { <nl> * @ return the resolved class <nl> * @ throws ClassNotFoundException if unable to resolve the class <nl> * / <nl> + / / - @ cs [ ForbidWildcardAsReturnType ] The class is deprecated and will be removed soon . <nl> public Class < ? > resolve ( String name , String currentClass ) <nl> throws ClassNotFoundException { <nl> / / See if the class is full qualified <nl> @ @ - 182 , 6 + 183 , 7 @ @ public class ClassResolver { <nl> * @ throws ClassNotFoundException if an error occurs <nl> * @ throws NoClassDefFoundError if an error occurs <nl> * / <nl> + / / - @ cs [ ForbidWildcardAsReturnType ] The class is deprecated and will be removed soon . <nl> private Class < ? > safeLoad ( String name ) throws ClassNotFoundException , NoClassDefFoundError { <nl> / / The next line will load the class using the specified class <nl> / / loader . The magic is having the " false " parameter . This means the <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java <nl> index 7e9d69e . . b3a5216 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java <nl> @ @ - 141 , 6 + 141 , 7 @ @ public final class MissingOverrideCheck extends AbstractCheck { <nl> { TokenTypes . METHOD _ DEF , } ; <nl> } <nl> <nl> + / / - @ cs [ CyclomaticComplexity ] Too complex to break apart . <nl> @ Override <nl> public void visitToken ( final DetailAST ast ) { <nl> final TextBlock javadoc = <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> index bd5fdbd . . 974a4f6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> @ @ - 310 , 6 + 310 , 8 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> * @ param ast detail ast . <nl> * @ return object that contain all details to make a validation . <nl> * / <nl> + / / - @ cs [ JavaNCSS ] getDetails ( ) method is a huge SWITCH , it has to be monolithic <nl> + / / - @ cs [ ExecutableStatementCount ] getDetails ( ) method is a huge SWITCH , it has to be monolithic <nl> private static Details getDetails ( DetailAST ast ) { <nl> / / Attempt to locate the tokens to do the check <nl> boolean shouldCheckLastRcurly = false ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> index 355be8f . . 4578076 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> @ @ - 173 , 6 + 173 , 8 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> } ; <nl> } <nl> <nl> + / / - @ cs [ CyclomaticComplexity ] The only optimization which can be done here is moving CASE - block <nl> + / / expressions to separate methods , but that will not increase readability . <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> switch ( ast . getType ( ) ) { <nl> @ @ - 323 , 6 + 325 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> * @ param prevScopeUnitializedVariableData variable for previous stack of uninitialized <nl> * variables <nl> * / <nl> + / / - @ cs [ CyclomaticComplexity ] Breaking apart will damage encapsulation . <nl> private void updateUninitializedVariables ( Deque < DetailAST > prevScopeUnitializedVariableData ) { <nl> / / Check for only previous scope <nl> for ( DetailAST variable : prevScopeUnitializedVariableData ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index 67961c7 . . 11d8c47 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 413 , 6 + 413 , 8 @ @ public class RequireThisCheck extends AbstractCheck { <nl> * @ param ast IDENT ast to check . <nl> * @ return the class frame where violation is found or null otherwise . <nl> * / <nl> + / / - @ cs [ CyclomaticComplexity ] Method already invokes too many methods that fully explain <nl> + / / a logic , additional abstraction will not make logic / algorithm more readable . <nl> private AbstractFrame getClassFrameWhereViolationIsFound ( DetailAST ast ) { <nl> AbstractFrame frameWhereViolationIsFound = null ; <nl> final AbstractFrame variableDeclarationFrame = findFrame ( ast , false ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index fdb2661 . . 973dec9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 354 , 6 + 354 , 7 @ @ public class ImportOrderCheck <nl> beforeFirstImport = true ; <nl> } <nl> <nl> + / / - @ cs [ CyclomaticComplexity ] SWITCH was transformed into IF - ELSE . <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> final FullIdent ident ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index a657108 . . 5c9d563 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 143 , 6 + 143 , 8 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck { <nl> * Controls whether to allow documented exceptions that are not declared if <nl> * they are a subclass of java . lang . RuntimeException . <nl> * / <nl> + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , <nl> + / / check ' s property is part of API ( used in configurations ) . <nl> private boolean allowUndeclaredRTE ; <nl> <nl> / * * <nl> @ @ - 249 , 6 + 251 , 8 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck { <nl> * <nl> * @ param flag a { @ code Boolean } value <nl> * / <nl> + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , <nl> + / / check ' s property is part of API ( used in configurations ) . <nl> public void setAllowUndeclaredRTE ( boolean flag ) { <nl> allowUndeclaredRTE = flag ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> index bd754a6 . . e0f5d5d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> @ @ - 339 , 6 + 339 , 7 @ @ public class JavadocStyleCheck <nl> * @ param comment the { @ code TextBlock } which represents <nl> * the Javadoc comment . <nl> * / <nl> + / / - @ cs [ ReturnCount ] Too complex to break apart . <nl> private void checkHtmlTags ( final DetailAST ast , final TextBlock comment ) { <nl> final int lineNo = comment . getStartLineNo ( ) ; <nl> final Deque < HtmlTag > htmlStack = new ArrayDeque < > ( ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java <nl> index ff5dc9f . . aabe927 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java <nl> @ @ - 62 , 6 + 62 , 8 @ @ public abstract class AbstractComplexityCheck <nl> * Gets the message ID to log violations with . <nl> * @ return the message ID to log violations with <nl> * / <nl> + / / - @ cs [ AbbreviationAsWordInName ] Should be removed at 7 . 0 version , <nl> + / / we keep for some time to avoid breaking of compatibility <nl> protected abstract String getMessageID ( ) ; <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java <nl> index eda6b75 . . d9618bc 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java <nl> @ @ - 68 , 6 + 68 , 8 @ @ public final class ClassDataAbstractionCouplingCheck <nl> } ; <nl> } <nl> <nl> + / / - @ cs [ SimpleAccessorNameNotation ] Overrides method from the base class . <nl> + / / Issue : https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 166 <nl> @ Override <nl> protected String getLogMessageId ( ) { <nl> return MSG _ KEY ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheck . java <nl> index 5b1cfd9 . . 0f4e8f3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheck . java <nl> @ @ - 73 , 6 + 73 , 8 @ @ public final class ClassFanOutComplexityCheck extends AbstractClassCouplingCheck <nl> } ; <nl> } <nl> <nl> + / / - @ cs [ SimpleAccessorNameNotation ] Override methods from base class . <nl> + / / Issue : https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 166 <nl> @ Override <nl> protected String getLogMessageId ( ) { <nl> return MSG _ KEY ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java <nl> index 569df5c . . a3105c1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java <nl> @ @ - 38 , 6 + 38 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * <nl> * @ author Lars K ö dderitzsch <nl> * / <nl> + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , <nl> + / / check ' s name is a part of API ( used in configurations ) . <nl> public class JavaNCSSCheck extends AbstractCheck { <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java <nl> index f41c83b . . 11de571 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java <nl> @ @ - 107 , 6 + 107 , 8 @ @ public class SingleSpaceSeparatorCheck extends AbstractCheck { <nl> return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> } <nl> <nl> + / / - @ cs [ SimpleAccessorNameNotation ] Overrides method from base class . <nl> + / / Issue : https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 166 <nl> @ Override <nl> public boolean isCommentNodesRequired ( ) { <nl> return validateComments ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> index 155bc4b . . 993e90f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> @ @ - 94 , 6 + 94 , 8 @ @ public class SuppressWithNearbyCommentFilter <nl> private boolean checkC = true ; <nl> <nl> / * * Whether to look for trigger in C + + - style comments . * / <nl> + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , <nl> + / / check ' s property is a part of API ( used in configurations ) . <nl> private boolean checkCPP = true ; <nl> <nl> / * * Parsed comment regexp that marks checkstyle suppression region . * / <nl> @ @ - 180 , 6 + 182 , 8 @ @ public class SuppressWithNearbyCommentFilter <nl> * Set whether to look in C + + comments . <nl> * @ param checkCpp { @ code true } if C + + comments are checked . <nl> * / <nl> + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , <nl> + / / check ' s property is a part of API ( used in configurations ) . <nl> public void setCheckCPP ( boolean checkCpp ) { <nl> checkCPP = checkCpp ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> index bea5e9c . . b9ddad1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> @ @ - 82 , 6 + 82 , 8 @ @ public class SuppressionCommentFilter <nl> private boolean checkC = true ; <nl> <nl> / * * Whether to look in comments of the C + + type . * / <nl> + / / - @ cs [ AbbreviationAsWordInName ] we can not change it as , <nl> + / / Check property is a part of API ( used in configurations ) <nl> private boolean checkCPP = true ; <nl> <nl> / * * Parsed comment regexp that turns checkstyle reporting off . * / <nl> @ @ - 169 , 6 + 171 , 8 @ @ public class SuppressionCommentFilter <nl> * Set whether to look in C + + comments . <nl> * @ param checkCpp { @ code true } if C + + comments are checked . <nl> * / <nl> + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , <nl> + / / check ' s property is a part of API ( used in configurations ) . <nl> public void setCheckCPP ( boolean checkCpp ) { <nl> checkCPP = checkCpp ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java <nl> index f86e4e4 . . 323b1a6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java <nl> @ @ - 89 , 6 + 89 , 8 @ @ public class ParseTreeTableModel implements TreeModel { <nl> * @ param column the column number <nl> * @ return the type for column number { @ code column } . <nl> * / <nl> + / / - @ cs [ ForbidWildcardAsReturnType ] We need to satisfy javax . swing . table . AbstractTableModel <nl> + / / public Class < ? > getColumnClass ( int columnIndex ) { . . . } <nl> public Class < ? > getColumnClass ( int column ) { <nl> return pModel . getColumnClass ( column ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java <nl> index f0b7c33 . . a49c625 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java <nl> @ @ - 106 , 6 + 106 , 8 @ @ public class ParseTreeTablePModel { <nl> * @ param column the column number <nl> * @ return the type for column number { @ code column } . <nl> * / <nl> + / / - @ cs [ ForbidWildcardAsReturnType ] We need to satisfy javax . swing . table . AbstractTableModel <nl> + / / public Class < ? > getColumnClass ( int columnIndex ) { . . . } <nl> public Class < ? > getColumnClass ( int column ) { <nl> final Class < ? > columnClass ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index a910d7b . . c984650 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 540 , 6 + 540 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> checker . process ( filesToProcess ) ; <nl> fail ( " IOError is expected ! " ) ; <nl> } <nl> + / / - @ cs [ IllegalCatchExtended ] Testing for catch Error is part of 100 % coverage . <nl> catch ( Error error ) { <nl> assertThat ( error . getCause ( ) , instanceOf ( IOError . class ) ) ; <nl> assertThat ( error . getCause ( ) . getCause ( ) , instanceOf ( InternalError . class ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> index 63a3889 . . 5b2b2b5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> @ @ - 45 , 6 + 45 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * Enter a description of class XMLLoggerTest . java . <nl> * @ author Rick Giles <nl> * / <nl> + / / - @ cs [ AbbreviationAsWordInName ] Test should be named as its main class . <nl> public class XMLLoggerTest { <nl> private final ByteArrayOutputStream outStream = new ByteArrayOutputStream ( ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java <nl> index 44ebc3f . . 7a4ed5b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * <nl> * @ author Lars K ö dderitzsch <nl> * / <nl> + / / - @ cs [ AbbreviationAsWordInName ] Test should be named as its main class . <nl> public class JavaNCSSCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException {
NEAREST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 0dd0b3c . . 3a42cba 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 60 , 7 + 60 , 9 @ @ <nl> < rule ref = " rulesets / java / controversial . xml " > <nl> < ! - - calling super ( ) is completely pointless , no matter if class inherits anything or not ; it is meaningful only if you do not call implicit constructor of base class - - > <nl> < exclude name = " CallSuperInConstructor " / > <nl> + < ! - - We reuse Check instances between java files , we need to clear state of class in beginTree ( ) methods - - > <nl> < exclude name = " NullAssignment " / > <nl> + < ! - - it is possible only in functional languages and fanatically - pristine code , withot aditional option that are done at ReturnCountExtendedCheck it is not good rule - - > <nl> < exclude name = " OnlyOneReturn " / > <nl> < exclude name = " AssignmentInOperand " / > <nl> < exclude name = " AtLeastOneConstructor " / >

TEST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index 480b41f . . 226add9 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 38 , 14 + 38 , 9 @ @ 
 < / module > 
 < module name = " SuppressWarningsFilter " / > 
 < module name = " SuppressWithNearbyCommentFilter " > 
 - < ! - - 
 - Use suppressions . xml for suppressions , this is only example . 
 - checkFormat will prevent suppression comments from being valid . 
 - - - > 
 - < property name = " checkFormat " value = " IGNORETHIS " / > 
 - < property name = " commentFormat " value = " SUPPRESS CHECKSTYLE , ( \ w + ) " / > 
 - < property name = " messageFormat " value = " $ 1 " / > 
 - < property name = " influenceFormat " value = " - 1 " / > 
 + < property name = " commentFormat " value = " - @ cs \ [ ( \ w { 8 , } ) \ ] \ w [ \ ( \ ) \ - \ . \ ' \ ` \ , \ : \ ; \ w ] { 10 , } " / > 
 + < property name = " checkFormat " value = " $ 1 " / > 
 + < property name = " influenceFormat " value = " 3 " / > 
 < / module > 
 
 < ! - - Headers - - > 
 diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml 
 index bed9499 . . 7402870 100644 
 - - - a / config / checkstyle _ sevntu _ checks . xml 
 + + + b / config / checkstyle _ sevntu _ checks . xml 
 @ @ - 11 , 8 + 11 , 14 @ @ 
 < module name = " SuppressionFilter " > 
 < property name = " file " value = " $ { project . basedir } / config / sevntu _ suppressions . xml " / > 
 < / module > 
 + < module name = " SuppressWithNearbyCommentFilter " > 
 + < property name = " commentFormat " value = " - @ cs \ [ ( \ w { 8 , } ) \ ] \ w [ \ ( \ ) \ - \ . \ ' \ ` \ , \ : \ ; \ w ] { 10 , } " / > 
 + < property name = " checkFormat " value = " $ 1 " / > 
 + < property name = " influenceFormat " value = " 3 " / > 
 + < / module > 
 
 < module name = " TreeWalker " > 
 + < module name = " FileContentsHolder " / > 
 < module name = " StaticMethodCandidate " / > 
 < module name = " UselessSingleCatchCheck " / > 
 < module name = " NestedSwitchCheck " / > 
 diff - - git a / config / sevntu _ suppressions . xml b / config / sevntu _ suppressions . xml 
 index 80d2936 . . d05a9aa 100644 
 - - - a / config / sevntu _ suppressions . xml 
 + + + b / config / sevntu _ suppressions . xml 
 @ @ - 15 , 47 + 15 , 10 @ @ 
 < suppress checks = " LineLengthExtended " 
 files = " ParseTreeBuilder \ . java " / > 
 
 - < ! - - Override methods from base class . 
 - Issue : https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 166 - - > 
 - < suppress checks = " SimpleAccessorNameNotation " 
 - files = " ClassDataAbstractionCouplingCheck \ . java " 
 - lines = " 71 " / > 
 - < suppress checks = " SimpleAccessorNameNotation " 
 - files = " ClassFanOutComplexityCheck \ . java " 
 - lines = " 76 " / > 
 - < suppress checks = " SimpleAccessorNameNotation " 
 - files = " SingleSpaceSeparatorCheck \ . java " 
 - lines = " 110 " / > 
 - 
 - < ! - - These classes are deprecated and will be removed soon . - - > 
 - < suppress checks = " ForbidWildcardAsReturnType " 
 - files = " AbstractTypeAwareCheck \ . java " 
 - lines = " 230 , 246 , 409 " / > 
 - < suppress checks = " ForbidWildcardAsReturnType " 
 - files = " ClassResolver \ . java " 
 - lines = " 72 , 184 " / > 
 - < ! - - We need to satisfy javax . swing . table . AbstractTableModel 
 - public Class < ? > getColumnClass ( int columnIndex ) { - - > 
 - < suppress checks = " ForbidWildcardAsReturnType " 
 - files = " ParseTreeTableModel \ . java " 
 - lines = " 92 " / > 
 - < suppress checks = " ForbidWildcardAsReturnType " 
 - files = " ParseTreeTablePModel \ . java " 
 - lines = " 109 " / > 
 < ! - - If we change declaration order , Illegal forward reference will appear . 
 See https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 415 - - > 
 < suppress checks = " CustomDeclarationOrder " 
 files = " JavadocTokenTypes . java " / > 
 - < ! - - CustomDeclarationOrder does not treat groups of overloaded methods . 
 - See https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 414 - - > 
 - < suppress checks = " CustomDeclarationOrder " 
 - files = " AbstractViolationReporter . java " 
 - lines = " 152 , 164 " / > 
 - 
 - < ! - - testing for catch Error is part of 100 % coverage - - > 
 - < suppress checks = " IllegalCatchExtended " 
 - files = " CheckerTest \ . java " 
 - lines = " 543 " / > 
 
 < ! - - JavadocTagInfo . java , JavadocTags . java , InvalidJavadocTag . java , JavadocTag . java will be 
 deprecated as we completely switch to ANTLR parser for javadoc . All of the mentioned classes 
 diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 8b83e37 . . 23dc286 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 9 , 57 + 9 , 6 @ @ 
 files = " TokenTypes . java " 
 lines = " 1 " / > 
 
 - < ! - - There is no other way to deliver filename that was under processing . 
 - See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > 
 - < suppress checks = " IllegalCatch " 
 - files = " Checker . java " 
 - lines = " 272 " / > 
 - < ! - - Test to reproduce error catching in Checker and satisfy coverage rate . - - > 
 - < suppress checks = " IllegalCatch " 
 - files = " CheckerTest . java " 
 - lines = " 576 " / > 
 - 
 - < ! - - we can not change it as , Check name is part of API ( used in configurations ) - - > 
 - < suppress checks = " AbbreviationAsWordInName " 
 - files = " JavaNCSSCheck . java " 
 - lines = " 41 " / > 
 - < ! - - test should be named as their main class - - > 
 - < suppress checks = " AbbreviationAsWordInName " 
 - files = " JavaNCSSCheckTest . java " 
 - lines = " 42 " / > 
 - 
 - < ! - - we can not change it as , Check name is part of API ( used in configurations ) - - > 
 - < suppress checks = " AbbreviationAsWordInName " 
 - files = " XMLLogger . java " 
 - lines = " 44 " / > 
 - < ! - - test should be named as their main class - - > 
 - < suppress checks = " AbbreviationAsWordInName " 
 - files = " XMLLoggerTest . java " 
 - lines = " 48 " / > 
 - 
 - < ! - - we can not change it as , Check property is part of API ( used in configurations ) - - > 
 - < suppress checks = " AbbreviationAsWordInName " 
 - files = " JavadocMethodCheck . java " 
 - lines = " 146 , 252 " / > 
 - < ! - - we can not change it as , Check property is part of API ( used in configurations ) - - > 
 - < suppress checks = " AbbreviationAsWordInName " 
 - files = " SuppressWithNearbyCommentFilter . java " 
 - lines = " 97 , 183 " / > 
 - < ! - - we can not change it as , Check property is part of API ( used in configurations ) - - > 
 - < suppress checks = " AbbreviationAsWordInName " 
 - files = " SuppressionCommentFilter . java " 
 - lines = " 85 , 172 " / > 
 - 
 - < ! - - should be removed at 7 . 0 version , we keep for some time to avoid braking compatibiilty - - > 
 - < suppress checks = " AbbreviationAsWordInName " 
 - files = " CheckstyleAntTask . java " 
 - lines = " 230 " / > 
 - 
 - < ! - - should be removed at 7 . 0 version , we keep for some time to avoid braking compatibiilty - - > 
 - < suppress checks = " AbbreviationAsWordInName " 
 - files = " AbstractComplexityCheck . java " 
 - lines = " 65 " / > 
 - 
 < ! - - illegal words are part of Javadoc - - > 
 < suppress checks = " TodoComment " files = " . * TodoCommentCheck \ . java " / > 
 
 @ @ - 123 , 10 + 72 , 6 @ @ 
 < ! - - VisibilityModifierCheck has 7 options which require 7 additional methods ( setters ) - - > 
 < suppress checks = " MethodCount " files = " [ \ \ / ] VisibilityModifierCheck . java $ " / > 
 
 - < ! - - getDetails ( ) method - huge Switch , it has to be monolithic - - > 
 - < suppress checks = " ExecutableStatementCount " files = " RightCurlyCheck \ . java " lines = " 313 " / > 
 - < suppress checks = " JavaNCSS " files = " RightCurlyCheck \ . java " lines = " 313 " / > 
 - 
 < ! - - we need that set of converters - - > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " AutomaticBean \ . java " / > 
 < ! - - they are aggregators of logic , usage a several of classes are ok - - > 
 @ @ - 139 , 36 + 84 , 10 @ @ 
 < ! - - Should be fixed after moving https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / blob / master / sevntu - checks / src / main / java / com / github / sevntu / checkstyle / checks / coding / ReturnCountExtendedCheck . java into the main repo - - > 
 < suppress checks = " ReturnCount " files = " ( ClassResolver | ConfigurationLoader | IndentationCheckTest ) \ . java " / > 
 
 - < ! - - Method getClassFrameWhereViolationIsFound already have too much abstract methods that fully 
 - explain a logic , additional abstraction will not make logic / algorithm more readable . - - > 
 - < suppress checks = " CyclomaticComplexity " files = " RequireThisCheck \ . java " lines = " 416 " / > 
 - < ! - - The only optimization which can be there is to move CASE - block expressions to separate method , 
 - but that will not increase readability . - - > 
 - < suppress checks = " CyclomaticComplexity " files = " FinalLocalVariableCheck \ . java " lines = " 176 , 326 " / > 
 - 
 < ! - - Suppressions from PMD configuration - - > 
 - < ! - - validateCli is not reasonable to split as encapsulation of logic will be damaged - - > 
 - < suppress checks = " CyclomaticComplexity " files = " Main \ . java " lines = " 247 " / > 
 < ! - - JavadocMethodCheck , JavadocStyleCheck , JavadocUtils . getJavadocTags ( ) - deprecated - - > 
 < suppress checks = " CyclomaticComplexity " files = " JavadocMethodCheck \ . java " / > 
 < suppress checks = " CyclomaticComplexity " files = " JavadocStyleCheck \ . java " / > 
 < suppress checks = " CyclomaticComplexity " files = " CustomImportOrderCheck \ . java " / > 
 
 - < ! - - equals ( ) - a lot of fields to check - - > 
 - < suppress checks = " CyclomaticComplexity " files = " LocalizedMessage \ . java " lines = " 210 " / > 
 - < ! - - SWITCH was transformed into IF - ELSE - - > 
 - < suppress checks = " CyclomaticComplexity " files = " ImportOrderCheck \ . java " lines = " 357 " / > 
 - 
 - < ! - - LocalizedMessage class is immutable , we need that amount of arguments . - - > 
 - < suppress checks = " ParameterNumber " 
 - files = " LocalizedMessage . java " 
 - lines = " 105 , 143 , 174 " / > 
 - 
 - < ! - - Not reasonable to split as encapsulation of logic will be damaged . - - > 
 - < suppress checks = " ExecutableStatementCount " files = " Main \ . java " lines = " 128 " / > 
 - < suppress checks = " JavaNCSS " files = " Main \ . java " lines = " 128 " / > 
 - 
 - < ! - - too complex to break apart - - > 
 - < suppress checks = " CyclomaticComplexity " files = " MissingOverrideCheck \ . java " lines = " 144 " / > 
 - < suppress checks = " ReturnCount " files = " JavadocStyleCheck \ . java " lines = " 342 " / > 
 < / suppressions > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 index 2059978 . . 9ff42ba 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 269 , 6 + 269 , 8 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 cache . put ( fileName , timestamp ) ; 
 } 
 } 
 + / / - @ cs [ IllegalCatch ] There is no other way to deliver filename that was under 
 + / / processing . See https : / / github . com / checkstyle / checkstyle / issues / 2285 
 catch ( Exception ex ) { 
 / / We need to catch all exceptions to put a reason failure ( file name ) in exception 
 throw new CheckstyleException ( " Exception was thrown while processing " 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index 0fce092 . . a8418ed 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 244 , 6 + 244 , 7 @ @ public final class Main { 
 * @ param filesToProcess List of files to process found from the command line . 
 * @ return list of violations 
 * / 
 + / / - @ cs [ CyclomaticComplexity ] Breaking apart will damage encapsulation 
 private static List < String > validateCli ( CommandLine cmdLine , List < File > filesToProcess ) { 
 final List < String > result = new ArrayList < > ( ) ; 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 index ed6fbb7 . . 63a0233 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 @ @ - 41 , 6 + 41 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 * @ author < a href = " mailto : stephane . bailliez @ wanadoo . fr " > Stephane Bailliez < / a > 
 * / 
 + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , 
 + / / check ' s name is part of API ( used in configurations ) . 
 public class XMLLogger 
 extends AutomaticBean 
 implements AuditListener { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 index b3d5072 . . 1274ad7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 @ @ - 226 , 6 + 226 , 8 @ @ public class CheckstyleAntTask extends Task { 
 * @ param url the URL of the configuration to use 
 * @ deprecated please use setConfigUrl instead 
 * / 
 + / / - @ cs [ AbbreviationAsWordInName ] Should be removed at 7 . 0 version , 
 + / / we keep for some time to avoid braking compatibility . 
 @ Deprecated 
 public void setConfigURL ( URL url ) { 
 setConfigUrl ( url ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 index da3885a . . 44b511e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 @ @ - 149 , 6 + 149 , 8 @ @ public abstract class AbstractViolationReporter 
 * 
 * @ see java . text . MessageFormat 
 * / 
 + / / - @ cs [ CustomDeclarationOrder ] CustomDeclarationOrder does not treat groups of 
 + / / overloaded methods . See https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 414 
 public abstract void log ( int line , String key , Object . . . args ) ; 
 
 / * * 
 @ @ - 161 , 6 + 163 , 8 @ @ public abstract class AbstractViolationReporter 
 * 
 * @ see java . text . MessageFormat 
 * / 
 + / / - @ cs [ CustomDeclarationOrder ] CustomDeclarationOrder does not treat groups of 
 + / / overloaded methods . See https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 414 
 public abstract void log ( int line , int col , String key , 
 Object . . . args ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java 
 index a809eae . . 25f2552 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java 
 @ @ - 102 , 6 + 102 , 7 @ @ public final class LocalizedMessage 
 * @ param sourceClass the Class that is the source of the message 
 * @ param customMessage optional custom message overriding the default 
 * / 
 + / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . 
 public LocalizedMessage ( int lineNo , 
 int columnNo , 
 String bundle , 
 @ @ - 140 , 6 + 141 , 7 @ @ public final class LocalizedMessage 
 * @ param sourceClass the Class that is the source of the message 
 * @ param customMessage optional custom message overriding the default 
 * / 
 + / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . 
 public LocalizedMessage ( int lineNo , 
 int columnNo , 
 String bundle , 
 @ @ - 171 , 6 + 173 , 7 @ @ public final class LocalizedMessage 
 * @ param sourceClass the source class for the message 
 * @ param customMessage optional custom message overriding the default 
 * / 
 + / / - @ cs [ ParameterNumber ] Class is immutable , we need that amount of arguments . 
 public LocalizedMessage ( int lineNo , 
 String bundle , 
 String key , 
 @ @ - 207 , 6 + 210 , 7 @ @ public final class LocalizedMessage 
 sourceClass , customMessage ) ; 
 } 
 
 + / / - @ cs [ CyclomaticComplexity ] equals - a lot of fields to check . 
 @ Override 
 public boolean equals ( Object object ) { 
 if ( this = = object ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 index 6d8390e . . 1141700 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 @ @ - 227 , 6 + 227 , 7 @ @ public abstract class AbstractTypeAwareCheck extends AbstractCheck { 
 * @ return the resolved class or { @ code null } 
 * if unable to resolve the class . 
 * / 
 + / / - @ cs [ ForbidWildcardAsReturnType ] The class is deprecated and will be removed soon . 
 protected final Class < ? > resolveClass ( String resolvableClassName , 
 String className ) { 
 try { 
 @ @ - 243 , 6 + 244 , 7 @ @ public abstract class AbstractTypeAwareCheck extends AbstractCheck { 
 * @ param className name of surrounding class . 
 * @ return { @ code Class } for a ident . 
 * / 
 + / / - @ cs [ ForbidWildcardAsReturnType ] The class is deprecated and will be removed soon . 
 protected final Class < ? > tryLoadClass ( Token ident , String className ) { 
 final Class < ? > clazz = resolveClass ( ident . getText ( ) , className ) ; 
 if ( clazz = = null ) { 
 @ @ - 406 , 6 + 408 , 7 @ @ public abstract class AbstractTypeAwareCheck extends AbstractCheck { 
 / * * 
 * @ return { @ code Class } associated with an object . 
 * / 
 + / / - @ cs [ ForbidWildcardAsReturnType ] The class is deprecated and will be removed soon . 
 public abstract Class < ? > getClazz ( ) ; 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java 
 index fa25cb6 . . ca17d73 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ClassResolver . java 
 @ @ - 69 , 6 + 69 , 7 @ @ public class ClassResolver { 
 * @ return the resolved class 
 * @ throws ClassNotFoundException if unable to resolve the class 
 * / 
 + / / - @ cs [ ForbidWildcardAsReturnType ] The class is deprecated and will be removed soon . 
 public Class < ? > resolve ( String name , String currentClass ) 
 throws ClassNotFoundException { 
 / / See if the class is full qualified 
 @ @ - 182 , 6 + 183 , 7 @ @ public class ClassResolver { 
 * @ throws ClassNotFoundException if an error occurs 
 * @ throws NoClassDefFoundError if an error occurs 
 * / 
 + / / - @ cs [ ForbidWildcardAsReturnType ] The class is deprecated and will be removed soon . 
 private Class < ? > safeLoad ( String name ) throws ClassNotFoundException , NoClassDefFoundError { 
 / / The next line will load the class using the specified class 
 / / loader . The magic is having the " false " parameter . This means the 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java 
 index 7e9d69e . . b3a5216 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java 
 @ @ - 141 , 6 + 141 , 7 @ @ public final class MissingOverrideCheck extends AbstractCheck { 
 { TokenTypes . METHOD _ DEF , } ; 
 } 
 
 + / / - @ cs [ CyclomaticComplexity ] Too complex to break apart . 
 @ Override 
 public void visitToken ( final DetailAST ast ) { 
 final TextBlock javadoc = 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 index bd5fdbd . . 974a4f6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 @ @ - 310 , 6 + 310 , 8 @ @ public class RightCurlyCheck extends AbstractCheck { 
 * @ param ast detail ast . 
 * @ return object that contain all details to make a validation . 
 * / 
 + / / - @ cs [ JavaNCSS ] getDetails ( ) method is a huge SWITCH , it has to be monolithic 
 + / / - @ cs [ ExecutableStatementCount ] getDetails ( ) method is a huge SWITCH , it has to be monolithic 
 private static Details getDetails ( DetailAST ast ) { 
 / / Attempt to locate the tokens to do the check 
 boolean shouldCheckLastRcurly = false ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 index 355be8f . . 4578076 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 @ @ - 173 , 6 + 173 , 8 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 } ; 
 } 
 
 + / / - @ cs [ CyclomaticComplexity ] The only optimization which can be done here is moving CASE - block 
 + / / expressions to separate methods , but that will not increase readability . 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 switch ( ast . getType ( ) ) { 
 @ @ - 323 , 6 + 325 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 * @ param prevScopeUnitializedVariableData variable for previous stack of uninitialized 
 * variables 
 * / 
 + / / - @ cs [ CyclomaticComplexity ] Breaking apart will damage encapsulation . 
 private void updateUninitializedVariables ( Deque < DetailAST > prevScopeUnitializedVariableData ) { 
 / / Check for only previous scope 
 for ( DetailAST variable : prevScopeUnitializedVariableData ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index 67961c7 . . 11d8c47 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 413 , 6 + 413 , 8 @ @ public class RequireThisCheck extends AbstractCheck { 
 * @ param ast IDENT ast to check . 
 * @ return the class frame where violation is found or null otherwise . 
 * / 
 + / / - @ cs [ CyclomaticComplexity ] Method already invokes too many methods that fully explain 
 + / / a logic , additional abstraction will not make logic / algorithm more readable . 
 private AbstractFrame getClassFrameWhereViolationIsFound ( DetailAST ast ) { 
 AbstractFrame frameWhereViolationIsFound = null ; 
 final AbstractFrame variableDeclarationFrame = findFrame ( ast , false ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index fdb2661 . . 973dec9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 354 , 6 + 354 , 7 @ @ public class ImportOrderCheck 
 beforeFirstImport = true ; 
 } 
 
 + / / - @ cs [ CyclomaticComplexity ] SWITCH was transformed into IF - ELSE . 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 final FullIdent ident ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index a657108 . . 5c9d563 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 143 , 6 + 143 , 8 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck { 
 * Controls whether to allow documented exceptions that are not declared if 
 * they are a subclass of java . lang . RuntimeException . 
 * / 
 + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , 
 + / / check ' s property is part of API ( used in configurations ) . 
 private boolean allowUndeclaredRTE ; 
 
 / * * 
 @ @ - 249 , 6 + 251 , 8 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck { 
 * 
 * @ param flag a { @ code Boolean } value 
 * / 
 + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , 
 + / / check ' s property is part of API ( used in configurations ) . 
 public void setAllowUndeclaredRTE ( boolean flag ) { 
 allowUndeclaredRTE = flag ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 index bd754a6 . . e0f5d5d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 @ @ - 339 , 6 + 339 , 7 @ @ public class JavadocStyleCheck 
 * @ param comment the { @ code TextBlock } which represents 
 * the Javadoc comment . 
 * / 
 + / / - @ cs [ ReturnCount ] Too complex to break apart . 
 private void checkHtmlTags ( final DetailAST ast , final TextBlock comment ) { 
 final int lineNo = comment . getStartLineNo ( ) ; 
 final Deque < HtmlTag > htmlStack = new ArrayDeque < > ( ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java 
 index ff5dc9f . . aabe927 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java 
 @ @ - 62 , 6 + 62 , 8 @ @ public abstract class AbstractComplexityCheck 
 * Gets the message ID to log violations with . 
 * @ return the message ID to log violations with 
 * / 
 + / / - @ cs [ AbbreviationAsWordInName ] Should be removed at 7 . 0 version , 
 + / / we keep for some time to avoid breaking of compatibility 
 protected abstract String getMessageID ( ) ; 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java 
 index eda6b75 . . d9618bc 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java 
 @ @ - 68 , 6 + 68 , 8 @ @ public final class ClassDataAbstractionCouplingCheck 
 } ; 
 } 
 
 + / / - @ cs [ SimpleAccessorNameNotation ] Overrides method from the base class . 
 + / / Issue : https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 166 
 @ Override 
 protected String getLogMessageId ( ) { 
 return MSG _ KEY ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheck . java 
 index 5b1cfd9 . . 0f4e8f3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheck . java 
 @ @ - 73 , 6 + 73 , 8 @ @ public final class ClassFanOutComplexityCheck extends AbstractClassCouplingCheck 
 } ; 
 } 
 
 + / / - @ cs [ SimpleAccessorNameNotation ] Override methods from base class . 
 + / / Issue : https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 166 
 @ Override 
 protected String getLogMessageId ( ) { 
 return MSG _ KEY ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java 
 index 569df5c . . a3105c1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java 
 @ @ - 38 , 6 + 38 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * 
 * @ author Lars K ö dderitzsch 
 * / 
 + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , 
 + / / check ' s name is a part of API ( used in configurations ) . 
 public class JavaNCSSCheck extends AbstractCheck { 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java 
 index f41c83b . . 11de571 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java 
 @ @ - 107 , 6 + 107 , 8 @ @ public class SingleSpaceSeparatorCheck extends AbstractCheck { 
 return CommonUtils . EMPTY _ INT _ ARRAY ; 
 } 
 
 + / / - @ cs [ SimpleAccessorNameNotation ] Overrides method from base class . 
 + / / Issue : https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 166 
 @ Override 
 public boolean isCommentNodesRequired ( ) { 
 return validateComments ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 index 155bc4b . . 993e90f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 @ @ - 94 , 6 + 94 , 8 @ @ public class SuppressWithNearbyCommentFilter 
 private boolean checkC = true ; 
 
 / * * Whether to look for trigger in C + + - style comments . * / 
 + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , 
 + / / check ' s property is a part of API ( used in configurations ) . 
 private boolean checkCPP = true ; 
 
 / * * Parsed comment regexp that marks checkstyle suppression region . * / 
 @ @ - 180 , 6 + 182 , 8 @ @ public class SuppressWithNearbyCommentFilter 
 * Set whether to look in C + + comments . 
 * @ param checkCpp { @ code true } if C + + comments are checked . 
 * / 
 + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , 
 + / / check ' s property is a part of API ( used in configurations ) . 
 public void setCheckCPP ( boolean checkCpp ) { 
 checkCPP = checkCpp ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 index bea5e9c . . b9ddad1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 @ @ - 82 , 6 + 82 , 8 @ @ public class SuppressionCommentFilter 
 private boolean checkC = true ; 
 
 / * * Whether to look in comments of the C + + type . * / 
 + / / - @ cs [ AbbreviationAsWordInName ] we can not change it as , 
 + / / Check property is a part of API ( used in configurations ) 
 private boolean checkCPP = true ; 
 
 / * * Parsed comment regexp that turns checkstyle reporting off . * / 
 @ @ - 169 , 6 + 171 , 8 @ @ public class SuppressionCommentFilter 
 * Set whether to look in C + + comments . 
 * @ param checkCpp { @ code true } if C + + comments are checked . 
 * / 
 + / / - @ cs [ AbbreviationAsWordInName ] We can not change it as , 
 + / / check ' s property is a part of API ( used in configurations ) . 
 public void setCheckCPP ( boolean checkCpp ) { 
 checkCPP = checkCpp ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java 
 index f86e4e4 . . 323b1a6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTableModel . java 
 @ @ - 89 , 6 + 89 , 8 @ @ public class ParseTreeTableModel implements TreeModel { 
 * @ param column the column number 
 * @ return the type for column number { @ code column } . 
 * / 
 + / / - @ cs [ ForbidWildcardAsReturnType ] We need to satisfy javax . swing . table . AbstractTableModel 
 + / / public Class < ? > getColumnClass ( int columnIndex ) { . . . } 
 public Class < ? > getColumnClass ( int column ) { 
 return pModel . getColumnClass ( column ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java 
 index f0b7c33 . . a49c625 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeTablePModel . java 
 @ @ - 106 , 6 + 106 , 8 @ @ public class ParseTreeTablePModel { 
 * @ param column the column number 
 * @ return the type for column number { @ code column } . 
 * / 
 + / / - @ cs [ ForbidWildcardAsReturnType ] We need to satisfy javax . swing . table . AbstractTableModel 
 + / / public Class < ? > getColumnClass ( int columnIndex ) { . . . } 
 public Class < ? > getColumnClass ( int column ) { 
 final Class < ? > columnClass ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index a910d7b . . c984650 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 540 , 6 + 540 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 checker . process ( filesToProcess ) ; 
 fail ( " IOError is expected ! " ) ; 
 } 
 + / / - @ cs [ IllegalCatchExtended ] Testing for catch Error is part of 100 % coverage . 
 catch ( Error error ) { 
 assertThat ( error . getCause ( ) , instanceOf ( IOError . class ) ) ; 
 assertThat ( error . getCause ( ) . getCause ( ) , instanceOf ( InternalError . class ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 index 63a3889 . . 5b2b2b5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 @ @ - 45 , 6 + 45 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * Enter a description of class XMLLoggerTest . java . 
 * @ author Rick Giles 
 * / 
 + / / - @ cs [ AbbreviationAsWordInName ] Test should be named as its main class . 
 public class XMLLoggerTest { 
 private final ByteArrayOutputStream outStream = new ByteArrayOutputStream ( ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java 
 index 44ebc3f . . 7a4ed5b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheckTest . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * 
 * @ author Lars K ö dderitzsch 
 * / 
 + / / - @ cs [ AbbreviationAsWordInName ] Test should be named as its main class . 
 public class JavaNCSSCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException {

NEAREST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 0dd0b3c . . 3a42cba 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 60 , 7 + 60 , 9 @ @ 
 < rule ref = " rulesets / java / controversial . xml " > 
 < ! - - calling super ( ) is completely pointless , no matter if class inherits anything or not ; it is meaningful only if you do not call implicit constructor of base class - - > 
 < exclude name = " CallSuperInConstructor " / > 
 + < ! - - We reuse Check instances between java files , we need to clear state of class in beginTree ( ) methods - - > 
 < exclude name = " NullAssignment " / > 
 + < ! - - it is possible only in functional languages and fanatically - pristine code , withot aditional option that are done at ReturnCountExtendedCheck it is not good rule - - > 
 < exclude name = " OnlyOneReturn " / > 
 < exclude name = " AssignmentInOperand " / > 
 < exclude name = " AtLeastOneConstructor " / >
