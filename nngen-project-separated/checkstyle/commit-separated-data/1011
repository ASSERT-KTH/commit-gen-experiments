BLEU SCORE: 0.014971158614143297

TEST MSG: Issue # 3667 : fixed documentation and tests for checkstyle modules
GENERATED MSG: New check OuterTypeNumber for enforcing the maximum number of outer types per file . Inspired by patch # 1145023 from Alexander Jesse .

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CompareTreesWithComments . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CompareTreesWithComments . java <nl> deleted file mode 100644 <nl> index 19886cb . . 0000000 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CompareTreesWithComments . java <nl> + + + / dev / null <nl> @ @ - 1 , 103 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . grammars . comments ; <nl> - <nl> - import org . junit . Assert ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> - <nl> - class CompareTreesWithComments extends AbstractCheck { <nl> - private static DetailAST expectedTree ; <nl> - <nl> - @ Override <nl> - public boolean isCommentNodesRequired ( ) { <nl> - return true ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getDefaultTokens ( ) { <nl> - return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getAcceptableTokens ( ) { <nl> - return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getRequiredTokens ( ) { <nl> - return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> - } <nl> - <nl> - @ Override <nl> - public void beginTree ( DetailAST rootAST ) { <nl> - if ( ! isAstEquals ( expectedTree , rootAST ) ) { <nl> - Assert . assertEquals ( expectedTree , rootAST ) ; <nl> - } <nl> - } <nl> - <nl> - private static boolean isAstEquals ( DetailAST expected , DetailAST actual ) { <nl> - final boolean result ; <nl> - if ( expected = = actual ) { <nl> - result = true ; <nl> - } <nl> - else if ( actual = = null | | expected = = null ) { <nl> - result = false ; <nl> - } <nl> - else { <nl> - result = isAstEqualsSafe ( expected , actual ) ; <nl> - } <nl> - return result ; <nl> - } <nl> - <nl> - private static boolean isAstEqualsSafe ( DetailAST expected , DetailAST actual ) { <nl> - boolean result = false ; <nl> - <nl> - if ( expected . getType ( ) = = actual . getType ( ) <nl> - & & expected . getLineNo ( ) = = actual . getLineNo ( ) <nl> - & & expected . getColumnNo ( ) = = actual . getColumnNo ( ) ) { <nl> - if ( expected . getText ( ) = = null ) { <nl> - result = actual . getText ( ) = = null ; <nl> - } <nl> - else if ( expected . getText ( ) . equals ( actual . getText ( ) ) ) { <nl> - result = true ; <nl> - } <nl> - } <nl> - <nl> - if ( result ) { <nl> - final DetailAST childExpected = expected . getFirstChild ( ) ; <nl> - final DetailAST childActual = actual . getFirstChild ( ) ; <nl> - result = isAstEquals ( childExpected , childActual ) ; <nl> - if ( result ) { <nl> - final DetailAST nextSiblingExpected = expected . getNextSibling ( ) ; <nl> - final DetailAST nextSiblingActual = actual . getNextSibling ( ) ; <nl> - result = isAstEquals ( nextSiblingExpected , nextSiblingActual ) ; <nl> - } <nl> - } <nl> - <nl> - return result ; <nl> - } <nl> - <nl> - public static void setExpectedTree ( DetailAST expectedTree ) { <nl> - CompareTreesWithComments . expectedTree = expectedTree ; <nl> - } <nl> - } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> index 927db3d . . 822b8de 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> @ @ - 147 , 11 + 147 , 11 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testAllChecksAreReferencedInConfigFile ( ) throws Exception { <nl> - final Set < String > checksReferencedInConfig = CheckUtil . getConfigCheckStyleChecks ( ) ; <nl> - final Set < String > checksNames = getSimpleNames ( CheckUtil . getCheckstyleChecks ( ) ) ; <nl> + public void testAllModulesAreReferencedInConfigFile ( ) throws Exception { <nl> + final Set < String > modulesReferencedInConfig = CheckUtil . getConfigCheckStyleModules ( ) ; <nl> + final Set < String > moduleNames = getSimpleNames ( CheckUtil . getCheckstyleModules ( ) ) ; <nl> <nl> - checksNames . stream ( ) . filter ( check - > ! checksReferencedInConfig . contains ( check ) ) <nl> + moduleNames . stream ( ) . filter ( check - > ! modulesReferencedInConfig . contains ( check ) ) <nl> . forEach ( check - > { <nl> final String errorMessage = String . format ( Locale . ROOT , <nl> " % s is not referenced in checkstyle _ checks . xml " , check ) ; <nl> @ @ - 164 , 6 + 164 , 10 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> final Set < String > checkstyleModulesNames = getSimpleNames ( CheckUtil . getCheckstyleModules ( ) ) ; <nl> final Set < String > modulesNamesWhichHaveXdocs = XDocUtil . getModulesNamesWhichHaveXdoc ( ) ; <nl> <nl> + / / these are documented on non - ' config _ ' pages <nl> + checkstyleModulesNames . remove ( " TreeWalker " ) ; <nl> + checkstyleModulesNames . remove ( " Checker " ) ; <nl> + <nl> checkstyleModulesNames . stream ( ) <nl> . filter ( moduleName - > ! modulesNamesWhichHaveXdocs . contains ( moduleName ) ) <nl> . forEach ( moduleName - > { <nl> @ @ - 176 , 7 + 180 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> <nl> @ Test <nl> public void testAllCheckstyleModulesInCheckstyleConfig ( ) throws Exception { <nl> - final Set < String > configChecks = CheckUtil . getConfigCheckStyleChecks ( ) ; <nl> + final Set < String > configChecks = CheckUtil . getConfigCheckStyleModules ( ) ; <nl> <nl> for ( String moduleName : getSimpleNames ( CheckUtil . getCheckstyleModules ( ) ) ) { <nl> Assert . assertTrue ( " checkstyle _ checks . xml is missing module : " + moduleName , <nl> @ @ - 185 , 11 + 189 , 20 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testAllCheckstyleModulesHaveMessage ( ) throws Exception { <nl> + public void testAllCheckstyleChecksHaveMessage ( ) throws Exception { <nl> for ( Class < ? > module : CheckUtil . getCheckstyleChecks ( ) ) { <nl> - Assert . assertFalse ( module . getSimpleName ( ) <nl> - + " should have atleast one ' MSG _ * ' field for error messages " , CheckUtil <nl> - . getCheckMessages ( module ) . isEmpty ( ) ) ; <nl> + final String name = module . getSimpleName ( ) ; <nl> + <nl> + if ( " FileContentsHolder " . equals ( name ) ) { <nl> + Assert . assertTrue ( name <nl> + + " should not have any ' MSG _ * ' field for error messages " , CheckUtil <nl> + . getCheckMessages ( module ) . isEmpty ( ) ) ; <nl> + } <nl> + else { <nl> + Assert . assertFalse ( name <nl> + + " should have atleast one ' MSG _ * ' field for error messages " , CheckUtil <nl> + . getCheckMessages ( module ) . isEmpty ( ) ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 197 , 7 + 210 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> public void testAllCheckstyleMessages ( ) throws Exception { <nl> final Map < String , List < String > > usedMessages = new TreeMap < > ( ) ; <nl> <nl> - / / test validity of messages from checks <nl> + / / test validity of messages from modules <nl> for ( Class < ? > module : CheckUtil . getCheckstyleModules ( ) ) { <nl> for ( Field message : CheckUtil . getCheckMessages ( module ) ) { <nl> Assert . assertEquals ( module . getSimpleName ( ) + " . " + message . getName ( ) <nl> @ @ - 288 , 12 + 301 , 20 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> } <nl> <nl> / * * <nl> - * Removes ' Check ' suffix from each class name in the set . <nl> + * Retrieves a list of class names , removing ' Check ' from the end if the class is <nl> + * a checkstyle check . <nl> * @ param checks class instances . <nl> * @ return a set of simple names . <nl> * / <nl> private static Set < String > getSimpleNames ( Set < Class < ? > > checks ) { <nl> - return checks . stream ( ) . map ( check - > check . getSimpleName ( ) . replace ( " Check " , " " ) ) <nl> - . collect ( Collectors . toSet ( ) ) ; <nl> + return checks . stream ( ) . map ( check - > { <nl> + String name = check . getSimpleName ( ) ; <nl> + <nl> + if ( name . endsWith ( " Check " ) ) { <nl> + name = name . substring ( 0 , name . length ( ) - 5 ) ; <nl> + } <nl> + <nl> + return name ; <nl> + } ) . collect ( Collectors . toSet ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java <nl> index d680c36 . . 0f0b5d3 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java <nl> @ @ - 40 , 9 + 40 , 12 @ @ import org . w3c . dom . NodeList ; <nl> <nl> import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . reflect . ClassPath ; <nl> + import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> + import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; <nl> import com . puppycrawl . tools . checkstyle . api . BeforeExecutionFileFilter ; <nl> import com . puppycrawl . tools . checkstyle . api . Filter ; <nl> + import com . puppycrawl . tools . checkstyle . api . RootModule ; <nl> import com . puppycrawl . tools . checkstyle . checks . regexp . RegexpMultilineCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . regexp . RegexpSinglelineCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . regexp . RegexpSinglelineJavaCheck ; <nl> @ @ - 53 , 16 + 56 , 16 @ @ public final class CheckUtil { <nl> private CheckUtil ( ) { <nl> } <nl> <nl> - public static Set < String > getConfigCheckStyleChecks ( ) { <nl> - return getCheckStyleChecksReferencedInConfig ( " config / checkstyle _ checks . xml " ) ; <nl> + public static Set < String > getConfigCheckStyleModules ( ) { <nl> + return getCheckStyleModulesReferencedInConfig ( " config / checkstyle _ checks . xml " ) ; <nl> } <nl> <nl> - public static Set < String > getConfigSunStyleChecks ( ) { <nl> - return getCheckStyleChecksReferencedInConfig ( " src / main / resources / sun _ checks . xml " ) ; <nl> + public static Set < String > getConfigSunStyleModules ( ) { <nl> + return getCheckStyleModulesReferencedInConfig ( " src / main / resources / sun _ checks . xml " ) ; <nl> } <nl> <nl> - public static Set < String > getConfigGoogleStyleChecks ( ) { <nl> - return getCheckStyleChecksReferencedInConfig ( " src / main / resources / google _ checks . xml " ) ; <nl> + public static Set < String > getConfigGoogleStyleModules ( ) { <nl> + return getCheckStyleModulesReferencedInConfig ( " src / main / resources / google _ checks . xml " ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 72 , 7 + 75 , 7 @ @ public final class CheckUtil { <nl> * file path of checkstyle _ checks . xml . <nl> * @ return names of checkstyle ' s checks which are referenced in checkstyle _ checks . xml . <nl> * / <nl> - private static Set < String > getCheckStyleChecksReferencedInConfig ( String configFilePath ) { <nl> + private static Set < String > getCheckStyleModulesReferencedInConfig ( String configFilePath ) { <nl> try { <nl> final DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; <nl> <nl> @ @ - 104 , 9 + 107 , 7 @ @ public final class CheckUtil { <nl> if ( currentNode . getNodeType ( ) = = Node . ELEMENT _ NODE ) { <nl> final Element module = ( Element ) currentNode ; <nl> final String checkName = module . getAttribute ( " name " ) ; <nl> - if ( ! " Checker " . equals ( checkName ) & & ! " TreeWalker " . equals ( checkName ) ) { <nl> - checksReferencedInCheckstyleChecksXml . add ( checkName ) ; <nl> - } <nl> + checksReferencedInCheckstyleChecksXml . add ( checkName ) ; <nl> } <nl> } <nl> return checksReferencedInCheckstyleChecksXml ; <nl> @ @ - 117 , 9 + 118 , 11 @ @ public final class CheckUtil { <nl> } <nl> <nl> / * * <nl> - * Gets the checkstyle ' s non abstract checks . <nl> - * @ return the set of checkstyle ' s non abstract check classes . <nl> + * Gets all checkstyle ' s non - abstract checks . <nl> + * @ return the set of checkstyle ' s non - abstract check classes . <nl> * @ throws IOException if the attempt to read class path resources failed . <nl> + * @ see # isValidCheckstyleClass ( Class , String ) <nl> + * @ see # isCheckstyleCheck ( Class ) <nl> * / <nl> public static Set < Class < ? > > getCheckstyleChecks ( ) throws IOException { <nl> final Set < Class < ? > > checkstyleChecks = new HashSet < > ( ) ; <nl> @ @ - 134 , 7 + 137 , 8 @ @ public final class CheckUtil { <nl> for ( ClassPath . ClassInfo clazz : checkstyleClasses ) { <nl> final String className = clazz . getSimpleName ( ) ; <nl> final Class < ? > loadedClass = clazz . load ( ) ; <nl> - if ( isCheckstyleNonAbstractCheck ( loadedClass , className ) ) { <nl> + if ( isValidCheckstyleClass ( loadedClass , className ) <nl> + & & isCheckstyleCheck ( loadedClass ) ) { <nl> checkstyleChecks . add ( loadedClass ) ; <nl> } <nl> } <nl> @ @ - 142 , 12 + 146 , 10 @ @ public final class CheckUtil { <nl> } <nl> <nl> / * * <nl> - * Gets the checkstyle ' s modules . <nl> - * Checkstyle ' s modules are nonabstract classes from com . puppycrawl . tools . checkstyle package <nl> - * which names end with ' Check ' , do not contain the word ' Input ' ( are not input files for UTs ) , <nl> - * checkstyle ' s filters and SuppressWarningsHolder class . <nl> - * @ return a set of checkstyle ' s modules names . <nl> + * Gets all checkstyle ' s modules . <nl> + * @ return the set of checkstyle ' s module classes . <nl> * @ throws IOException if the attempt to read class path resources failed . <nl> + * @ see # isCheckstyleModule ( Class ) <nl> * / <nl> public static Set < Class < ? > > getCheckstyleModules ( ) throws IOException { <nl> final Set < Class < ? > > checkstyleModules = new HashSet < > ( ) ; <nl> @ @ - 169 , 62 + 171 , 83 @ @ public final class CheckUtil { <nl> } <nl> <nl> / * * <nl> - * Checks whether a class may be considered as the checkstyle check . <nl> - * Checkstyle ' s checks are nonabstract classes which names end with ' Check ' , <nl> - * do not contain the word ' Input ' ( are not input files for UTs ) . <nl> + * Checks whether a class may be considered as a checkstyle module . Checkstyle ' s modules are <nl> + * non - abstract classes , which names do not start with the word ' Input ' ( are not input files for <nl> + * UTs ) , and are either checkstyle ' s checks , file sets , filters , file filters , or root module . <nl> + * @ param loadedClass class to check . <nl> + * @ return true if the class may be considered as the checkstyle module . <nl> + * / <nl> + private static boolean isCheckstyleModule ( Class < ? > loadedClass ) { <nl> + final String className = loadedClass . getSimpleName ( ) ; <nl> + return isValidCheckstyleClass ( loadedClass , className ) <nl> + & & ( isCheckstyleCheck ( loadedClass ) <nl> + | | isFileSetModule ( loadedClass ) <nl> + | | isFilterModule ( loadedClass ) <nl> + | | isFileFilterModule ( loadedClass ) <nl> + | | isRootModule ( loadedClass ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks whether a class extends ' AutomaticBean ' , is non - abstract , and doesn ' t start with the <nl> + * word ' Input ' ( are not input files for UTs ) . <nl> * @ param loadedClass class to check . <nl> * @ param className class name to check . <nl> + * @ return true if a class may be considered a valid production class . <nl> + * / <nl> + public static boolean isValidCheckstyleClass ( Class < ? > loadedClass , String className ) { <nl> + return AutomaticBean . class . isAssignableFrom ( loadedClass ) <nl> + & & ! Modifier . isAbstract ( loadedClass . getModifiers ( ) ) <nl> + & & ! className . contains ( " Input " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks whether a class may be considered as the checkstyle check . <nl> + * Checkstyle ' s checks are classes which implement ' AbstractCheck ' interface . <nl> + * @ param loadedClass class to check . <nl> * @ return true if a class may be considered as the checkstyle check . <nl> * / <nl> - private static boolean isCheckstyleNonAbstractCheck ( Class < ? > loadedClass , String className ) { <nl> - return ! Modifier . isAbstract ( loadedClass . getModifiers ( ) ) <nl> - & & className . endsWith ( " Check " ) <nl> - & & ! className . contains ( " Input " ) ; <nl> + public static boolean isCheckstyleCheck ( Class < ? > loadedClass ) { <nl> + return AbstractCheck . class . isAssignableFrom ( loadedClass ) ; <nl> } <nl> <nl> / * * <nl> - * Checks whether a class may be considered as the checkstyle module . <nl> - * Checkstyle ' s modules are nonabstract classes which names end with ' Check ' , <nl> - * do not contain the word ' Input ' ( are not input files for UTs ) , <nl> - * checkstyle ' s filters , checkstyle ' s file filters and SuppressWarningsHolder class . <nl> + * Checks whether a class may be considered as the checkstyle file set . <nl> + * Checkstyle ' s file sets are classes which implement ' AbstractFileSetCheck ' interface . <nl> * @ param loadedClass class to check . <nl> - * @ return true if the class may be considered as the checkstyle module . <nl> + * @ return true if a class may be considered as the checkstyle file set . <nl> * / <nl> - private static boolean isCheckstyleModule ( Class < ? > loadedClass ) { <nl> - final String className = loadedClass . getSimpleName ( ) ; <nl> - return isCheckstyleNonAbstractCheck ( loadedClass , className ) <nl> - | | isFilterModule ( loadedClass , className ) <nl> - | | isFileFilterModule ( loadedClass , className ) <nl> - | | " SuppressWarningsHolder " . equals ( className ) <nl> - | | " FileContentsHolder " . equals ( className ) ; <nl> + public static boolean isFileSetModule ( Class < ? > loadedClass ) { <nl> + return AbstractFileSetCheck . class . isAssignableFrom ( loadedClass ) ; <nl> } <nl> <nl> / * * <nl> * Checks whether a class may be considered as the checkstyle filter . <nl> - * Checkstyle ' s filters are classes which are subclasses of AutomaticBean , <nl> - * implement ' Filter ' interface , and which names end with ' Filter ' . <nl> + * Checkstyle ' s filters are classes which implement ' Filter ' interface . <nl> * @ param loadedClass class to check . <nl> - * @ param className class name to check . <nl> * @ return true if a class may be considered as the checkstyle filter . <nl> * / <nl> - private static boolean isFilterModule ( Class < ? > loadedClass , String className ) { <nl> - return Filter . class . isAssignableFrom ( loadedClass ) <nl> - & & AutomaticBean . class . isAssignableFrom ( loadedClass ) <nl> - & & className . endsWith ( " Filter " ) ; <nl> + public static boolean isFilterModule ( Class < ? > loadedClass ) { <nl> + return Filter . class . isAssignableFrom ( loadedClass ) ; <nl> } <nl> <nl> / * * <nl> * Checks whether a class may be considered as the checkstyle file filter . <nl> - * Checkstyle ' s file filters are classes which are subclasses of AutomaticBean , <nl> - * implement ' BeforeExecutionFileFilter ' interface , and which names end with ' FileFilter ' . <nl> + * Checkstyle ' s file filters are classes which implement ' BeforeExecutionFileFilter ' interface . <nl> * @ param loadedClass class to check . <nl> - * @ param className class name to check . <nl> * @ return true if a class may be considered as the checkstyle file filter . <nl> * / <nl> - private static boolean isFileFilterModule ( Class < ? > loadedClass , String className ) { <nl> - return BeforeExecutionFileFilter . class . isAssignableFrom ( loadedClass ) <nl> - & & AutomaticBean . class . isAssignableFrom ( loadedClass ) <nl> - & & className . endsWith ( " FileFilter " ) ; <nl> + public static boolean isFileFilterModule ( Class < ? > loadedClass ) { <nl> + return BeforeExecutionFileFilter . class . isAssignableFrom ( loadedClass ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks whether a class may be considered as the checkstyle root module . <nl> + * Checkstyle ' s root modules are classes which implement ' RootModule ' interface . <nl> + * @ param loadedClass class to check . <nl> + * @ return true if a class may be considered as the checkstyle root module . <nl> + * / <nl> + public static boolean isRootModule ( Class < ? > loadedClass ) { <nl> + return RootModule . class . isAssignableFrom ( loadedClass ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java <nl> index 2495f0a . . 8e89717 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java <nl> @ @ - 73 , 7 + 73 , 7 @ @ public class XDocsPagesTest { <nl> private static final String LINK _ TEMPLATE = <nl> " ( ? s ) . * < a href = \ " config _ \ \ w + \ \ . html # % 1 $ s \ " > % 1 $ s < / a > . * " ; <nl> <nl> - private static final List < String > CHECKS _ ON _ PAGE _ IGNORE _ LIST = Arrays . asList ( <nl> + private static final List < String > MODULES _ ON _ PAGE _ IGNORE _ LIST = Arrays . asList ( <nl> " AbstractAccessControlNameCheck . java " , <nl> " AbstractCheck . java " , <nl> " AbstractClassCouplingCheck . java " , <nl> @ @ - 134 , 10 + 134 , 10 @ @ public class XDocsPagesTest { <nl> " SuppressionCommentFilter . fileContents " <nl> ) ; <nl> <nl> - private static final Set < String > SUN _ CHECKS = Collections . unmodifiableSet ( <nl> - new HashSet < > ( CheckUtil . getConfigSunStyleChecks ( ) ) ) ; <nl> - private static final Set < String > GOOGLE _ CHECKS = Collections . unmodifiableSet ( <nl> - new HashSet < > ( CheckUtil . getConfigGoogleStyleChecks ( ) ) ) ; <nl> + private static final Set < String > SUN _ MODULES = Collections . unmodifiableSet ( <nl> + new HashSet < > ( CheckUtil . getConfigSunStyleModules ( ) ) ) ; <nl> + private static final Set < String > GOOGLE _ MODULES = Collections . unmodifiableSet ( <nl> + new HashSet < > ( CheckUtil . getConfigGoogleStyleModules ( ) ) ) ; <nl> <nl> @ Test <nl> public void testAllChecksPresentOnAvailableChecksPage ( ) throws IOException { <nl> @ @ - 145 , 7 + 145 , 7 @ @ public class XDocsPagesTest { <nl> Files . walk ( JAVA _ SOURCES _ DIRECTORY ) . forEach ( filePath - > { <nl> final String fileName = filePath . getFileName ( ) . toString ( ) ; <nl> if ( fileName . matches ( CHECK _ FILE _ NAME ) <nl> - & & ! CHECKS _ ON _ PAGE _ IGNORE _ LIST . contains ( fileName ) ) { <nl> + & & ! MODULES _ ON _ PAGE _ IGNORE _ LIST . contains ( fileName ) ) { <nl> final String checkName = fileName . replace ( CHECK _ SUFFIX , " " ) ; <nl> if ( ! isPresent ( availableChecks , checkName ) ) { <nl> Assert . fail ( checkName + " is not correctly listed on Available Checks page " <nl> @ @ - 557 , 8 + 557 , 8 @ @ public class XDocsPagesTest { <nl> propertyName ) ; <nl> final Class < ? > clss = descriptor . getPropertyType ( ) ; <nl> final String expectedTypeName = <nl> - getCheckPropertyExpectedTypeName ( clss , instance , propertyName ) ; <nl> - final String expectedValue = getCheckPropertyExpectedValue ( clss , instance , <nl> + getModulePropertyExpectedTypeName ( clss , instance , propertyName ) ; <nl> + final String expectedValue = getModulePropertyExpectedValue ( clss , instance , <nl> propertyName ) ; <nl> <nl> if ( expectedTypeName ! = null ) { <nl> @ @ - 613 , 7 + 613 , 7 @ @ public class XDocsPagesTest { <nl> } <nl> <nl> / * * @ noinspection IfStatementWithTooManyBranches * / <nl> - private static String getCheckPropertyExpectedTypeName ( Class < ? > clss , Object instance , <nl> + private static String getModulePropertyExpectedTypeName ( Class < ? > clss , Object instance , <nl> String propertyName ) { <nl> final String instanceName = instance . getClass ( ) . getSimpleName ( ) ; <nl> String result = null ; <nl> @ @ - 665 , 7 + 665 , 7 @ @ public class XDocsPagesTest { <nl> return result ; <nl> } <nl> <nl> - private static String getCheckPropertyExpectedValue ( Class < ? > clss , Object instance , <nl> + private static String getModulePropertyExpectedValue ( Class < ? > clss , Object instance , <nl> String propertyName ) throws Exception { <nl> final Field field = getField ( instance . getClass ( ) , propertyName ) ; <nl> String result = null ; <nl> @ @ - 829 , 7 + 829 , 7 @ @ public class XDocsPagesTest { <nl> <nl> Assert . assertTrue ( fileName + " section ' " + sectionName <nl> + " ' should be in google _ checks . xml or not reference ' Google Style ' " , <nl> - GOOGLE _ CHECKS . contains ( sectionName ) ) ; <nl> + GOOGLE _ MODULES . contains ( sectionName ) ) ; <nl> } <nl> else if ( " Sun Style " . equals ( linkText ) ) { <nl> hasSun = true ; <nl> @ @ - 840 , 7 + 840 , 7 @ @ public class XDocsPagesTest { <nl> <nl> Assert . assertTrue ( fileName + " section ' " + sectionName <nl> + " ' should be in sun _ checks . xml or not reference ' Sun Style ' " , <nl> - SUN _ CHECKS . contains ( sectionName ) ) ; <nl> + SUN _ MODULES . contains ( sectionName ) ) ; <nl> } <nl> <nl> Assert . assertEquals ( fileName + " section ' " + sectionName <nl> @ @ - 851 , 10 + 851 , 10 @ @ public class XDocsPagesTest { <nl> + " ' should have a checkstyle section " , hasCheckstyle ) ; <nl> Assert . assertTrue ( fileName + " section ' " + sectionName <nl> + " ' should have a google section since it is in it ' s config " , hasGoogle <nl> - | | ! GOOGLE _ CHECKS . contains ( sectionName ) ) ; <nl> + | | ! GOOGLE _ MODULES . contains ( sectionName ) ) ; <nl> Assert . assertTrue ( fileName + " section ' " + sectionName <nl> + " ' should have a sun section since it is in it ' s config " , <nl> - hasSun | | ! SUN _ CHECKS . contains ( sectionName ) ) ; <nl> + hasSun | | ! SUN _ MODULES . contains ( sectionName ) ) ; <nl> } <nl> <nl> private static void validatePackageSection ( String fileName , String sectionName , <nl> @ @ - 918 , 7 + 918 , 7 @ @ public class XDocsPagesTest { <nl> Set < String > styleChecks = null ; <nl> <nl> if ( path . toFile ( ) . getName ( ) . contains ( " google " ) ) { <nl> - styleChecks = new HashSet < > ( GOOGLE _ CHECKS ) ; <nl> + styleChecks = new HashSet < > ( GOOGLE _ MODULES ) ; <nl> } <nl> else if ( path . toFile ( ) . getName ( ) . contains ( " sun " ) ) { <nl> styleChecks = new HashSet < > ( ) ; <nl> @ @ - 950 , 13 + 950 , 17 @ @ public class XDocsPagesTest { <nl> fileName , ruleName ) ; <nl> } <nl> <nl> - validateStyleChecks ( XmlUtil . findChildElementsByTag ( columns . get ( 2 ) , " a " ) , <nl> + validateStyleModules ( XmlUtil . findChildElementsByTag ( columns . get ( 2 ) , " a " ) , <nl> XmlUtil . findChildElementsByTag ( columns . get ( 3 ) , " a " ) , styleChecks , fileName , <nl> ruleName ) ; <nl> <nl> lastRuleName = ruleName ; <nl> } <nl> <nl> + / / these modules aren ' t documented , but are added to the config <nl> + styleChecks . remove ( " TreeWalker " ) ; <nl> + styleChecks . remove ( " Checker " ) ; <nl> + <nl> Assert . assertTrue ( fileName + " requires the following check ( s ) to appear : " <nl> + styleChecks , styleChecks . isEmpty ( ) ) ; <nl> } <nl> @ @ - 995 , 24 + 999 , 24 @ @ public class XDocsPagesTest { <nl> } <nl> } <nl> <nl> - private static void validateStyleChecks ( Set < Node > checks , Set < Node > configs , <nl> + private static void validateStyleModules ( Set < Node > checks , Set < Node > configs , <nl> Set < String > styleChecks , String fileName , String ruleName ) { <nl> final Iterator < Node > itrChecks = checks . iterator ( ) ; <nl> final Iterator < Node > itrConfigs = configs . iterator ( ) ; <nl> <nl> while ( itrChecks . hasNext ( ) ) { <nl> - final Node check = itrChecks . next ( ) ; <nl> - final String checkName = check . getTextContent ( ) . trim ( ) ; <nl> + final Node module = itrChecks . next ( ) ; <nl> + final String moduleName = module . getTextContent ( ) . trim ( ) ; <nl> <nl> - if ( ! check . getAttributes ( ) . getNamedItem ( " href " ) . getTextContent ( ) <nl> + if ( ! module . getAttributes ( ) . getNamedItem ( " href " ) . getTextContent ( ) <nl> . startsWith ( " config _ " ) ) { <nl> continue ; <nl> } <nl> <nl> - Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' check ' " + checkName <nl> - + " ' shouldn ' t end with ' Check ' " , ! checkName . endsWith ( " Check " ) ) ; <nl> + Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName <nl> + + " ' shouldn ' t end with ' Check ' " , ! moduleName . endsWith ( " Check " ) ) ; <nl> <nl> - styleChecks . remove ( checkName ) ; <nl> + styleChecks . remove ( moduleName ) ; <nl> <nl> for ( String configName : new String [ ] { " config " , " test " } ) { <nl> Node config = null ; <nl> @ @ - 1021 , 11 + 1025 , 11 @ @ public class XDocsPagesTest { <nl> config = itrConfigs . next ( ) ; <nl> } <nl> catch ( NoSuchElementException ignore ) { <nl> - Assert . fail ( fileName + " rule ' " + ruleName + " ' check ' " + checkName <nl> + Assert . fail ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName <nl> + " ' is missing the config link : " + configName ) ; <nl> } <nl> <nl> - Assert . assertEquals ( fileName + " rule ' " + ruleName + " ' check ' " + checkName <nl> + Assert . assertEquals ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName <nl> + " ' has mismatched config / test links " , configName , config . getTextContent ( ) <nl> . trim ( ) ) ; <nl> <nl> @ @ - 1035 , 22 + 1039 , 22 @ @ public class XDocsPagesTest { <nl> if ( " config " . equals ( configName ) ) { <nl> final String expectedUrl = " https : / / github . com / search ? q = " <nl> + " path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + " <nl> - + " repo % 3Acheckstyle % 2Fcheckstyle + " + checkName ; <nl> + + " repo % 3Acheckstyle % 2Fcheckstyle + " + moduleName ; <nl> <nl> - Assert . assertEquals ( fileName + " rule ' " + ruleName + " ' check ' " + checkName <nl> + Assert . assertEquals ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName <nl> + " ' should have matching " + configName + " url " , expectedUrl , <nl> configUrl ) ; <nl> } <nl> else if ( " test " . equals ( configName ) ) { <nl> - Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' check ' " + checkName <nl> + Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName <nl> + " ' should have matching " + configName + " url " , <nl> configUrl . startsWith ( " https : / / github . com / checkstyle / checkstyle / " <nl> + " blob / master / src / it / java / com / google / checkstyle / test / " ) ) ; <nl> - Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' check ' " + checkName <nl> + Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName <nl> + " ' should have matching " + configName + " url " , <nl> - configUrl . endsWith ( " / " + checkName + " Test . java " ) ) ; <nl> + configUrl . endsWith ( " / " + moduleName + " Test . java " ) ) ; <nl> <nl> - Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' check ' " + checkName <nl> + Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName <nl> + " ' should have a test that exists " , new File ( configUrl . substring ( 53 ) <nl> . replace ( ' / ' , File . separatorChar ) ) . exists ( ) ) ; <nl> } <nl> diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml <nl> index 73f0cad . . a771ea5 100644 <nl> - - - a / src / xdocs / config . xml <nl> + + + b / src / xdocs / config . xml <nl> @ @ - 274 , 6 + 274 , 8 @ @ <nl> files . < / li > <nl> < li > < em > Filter < / em > children : modules that filter audit <nl> events . < / li > <nl> + < li > < em > FileFilter < / em > children : modules that filter files <nl> + for Checkstyle to process . < / li > <nl> < li > < em > AuditListener < / em > children : modules that report <nl> filtered events . < / li > <nl> < / ul >
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 6fab664 <nl> - - - / dev / null <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java <nl> @ @ - 0 , 0 + 1 , 59 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2008 Oliver Burn <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> + / * * <nl> + * Checks that no method having zero parameters is defined <nl> + * using the name < em > finalize < / em > . <nl> + * <nl> + * @ author fqian @ google . com ( Feng Qian ) <nl> + * @ author smckay @ google . com ( Steve McKay ) <nl> + * @ author lkuehne <nl> + * / <nl> + public class NoFinalizerCheck extends Check <nl> + { <nl> + <nl> + @ Override <nl> + public int [ ] getDefaultTokens ( ) <nl> + { <nl> + return new int [ ] { TokenTypes . METHOD _ DEF } ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visitToken ( DetailAST aAST ) <nl> + { <nl> + final DetailAST mid = aAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> + final String methodName = mid . getText ( ) ; <nl> + <nl> + if ( methodName . equals ( " finalize " ) ) { <nl> + <nl> + final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> + final boolean hasEmptyParamList = <nl> + ! params . branchContains ( TokenTypes . PARAMETER _ DEF ) ; <nl> + <nl> + if ( hasEmptyParamList ) { <nl> + log ( aAST . getLineNo ( ) , " avoid . finalizer . method " ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> index c5163da . . 76ad1b1 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> array . trailing . comma = Array should contain trailing comma . <nl> assignment . inner . avoid = Inner assignments should be avoided . <nl> + avoid . finalizer . method = Avoid using finalizer method . <nl> covariant . equals = covariant equals without overriding equals ( java . lang . Object ) . <nl> declaration . order . constructor = Constructor definition in wrong order . <nl> declaration . order . method = Method definition in wrong order . <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> index 6a8b644 . . 38207b4 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> array . trailing . comma = Array sollte mit einem Komma abheschlossen werden . <nl> assignment . inner . avoid = Innere Zuweisungen sollten vermieden werden . <nl> + avoid . finalizer . method = Die Verwendung von finalizer Methoden sollte vermieden werden . <nl> covariant . equals = Kovariante Definition von equals ( ) ohne equ

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CompareTreesWithComments . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CompareTreesWithComments . java 
 deleted file mode 100644 
 index 19886cb . . 0000000 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CompareTreesWithComments . java 
 + + + / dev / null 
 @ @ - 1 , 103 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . grammars . comments ; 
 - 
 - import org . junit . Assert ; 
 - 
 - import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 - 
 - class CompareTreesWithComments extends AbstractCheck { 
 - private static DetailAST expectedTree ; 
 - 
 - @ Override 
 - public boolean isCommentNodesRequired ( ) { 
 - return true ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getDefaultTokens ( ) { 
 - return CommonUtils . EMPTY _ INT _ ARRAY ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getAcceptableTokens ( ) { 
 - return CommonUtils . EMPTY _ INT _ ARRAY ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getRequiredTokens ( ) { 
 - return CommonUtils . EMPTY _ INT _ ARRAY ; 
 - } 
 - 
 - @ Override 
 - public void beginTree ( DetailAST rootAST ) { 
 - if ( ! isAstEquals ( expectedTree , rootAST ) ) { 
 - Assert . assertEquals ( expectedTree , rootAST ) ; 
 - } 
 - } 
 - 
 - private static boolean isAstEquals ( DetailAST expected , DetailAST actual ) { 
 - final boolean result ; 
 - if ( expected = = actual ) { 
 - result = true ; 
 - } 
 - else if ( actual = = null | | expected = = null ) { 
 - result = false ; 
 - } 
 - else { 
 - result = isAstEqualsSafe ( expected , actual ) ; 
 - } 
 - return result ; 
 - } 
 - 
 - private static boolean isAstEqualsSafe ( DetailAST expected , DetailAST actual ) { 
 - boolean result = false ; 
 - 
 - if ( expected . getType ( ) = = actual . getType ( ) 
 - & & expected . getLineNo ( ) = = actual . getLineNo ( ) 
 - & & expected . getColumnNo ( ) = = actual . getColumnNo ( ) ) { 
 - if ( expected . getText ( ) = = null ) { 
 - result = actual . getText ( ) = = null ; 
 - } 
 - else if ( expected . getText ( ) . equals ( actual . getText ( ) ) ) { 
 - result = true ; 
 - } 
 - } 
 - 
 - if ( result ) { 
 - final DetailAST childExpected = expected . getFirstChild ( ) ; 
 - final DetailAST childActual = actual . getFirstChild ( ) ; 
 - result = isAstEquals ( childExpected , childActual ) ; 
 - if ( result ) { 
 - final DetailAST nextSiblingExpected = expected . getNextSibling ( ) ; 
 - final DetailAST nextSiblingActual = actual . getNextSibling ( ) ; 
 - result = isAstEquals ( nextSiblingExpected , nextSiblingActual ) ; 
 - } 
 - } 
 - 
 - return result ; 
 - } 
 - 
 - public static void setExpectedTree ( DetailAST expectedTree ) { 
 - CompareTreesWithComments . expectedTree = expectedTree ; 
 - } 
 - } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 index 927db3d . . 822b8de 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 @ @ - 147 , 11 + 147 , 11 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testAllChecksAreReferencedInConfigFile ( ) throws Exception { 
 - final Set < String > checksReferencedInConfig = CheckUtil . getConfigCheckStyleChecks ( ) ; 
 - final Set < String > checksNames = getSimpleNames ( CheckUtil . getCheckstyleChecks ( ) ) ; 
 + public void testAllModulesAreReferencedInConfigFile ( ) throws Exception { 
 + final Set < String > modulesReferencedInConfig = CheckUtil . getConfigCheckStyleModules ( ) ; 
 + final Set < String > moduleNames = getSimpleNames ( CheckUtil . getCheckstyleModules ( ) ) ; 
 
 - checksNames . stream ( ) . filter ( check - > ! checksReferencedInConfig . contains ( check ) ) 
 + moduleNames . stream ( ) . filter ( check - > ! modulesReferencedInConfig . contains ( check ) ) 
 . forEach ( check - > { 
 final String errorMessage = String . format ( Locale . ROOT , 
 " % s is not referenced in checkstyle _ checks . xml " , check ) ; 
 @ @ - 164 , 6 + 164 , 10 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 final Set < String > checkstyleModulesNames = getSimpleNames ( CheckUtil . getCheckstyleModules ( ) ) ; 
 final Set < String > modulesNamesWhichHaveXdocs = XDocUtil . getModulesNamesWhichHaveXdoc ( ) ; 
 
 + / / these are documented on non - ' config _ ' pages 
 + checkstyleModulesNames . remove ( " TreeWalker " ) ; 
 + checkstyleModulesNames . remove ( " Checker " ) ; 
 + 
 checkstyleModulesNames . stream ( ) 
 . filter ( moduleName - > ! modulesNamesWhichHaveXdocs . contains ( moduleName ) ) 
 . forEach ( moduleName - > { 
 @ @ - 176 , 7 + 180 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 
 @ Test 
 public void testAllCheckstyleModulesInCheckstyleConfig ( ) throws Exception { 
 - final Set < String > configChecks = CheckUtil . getConfigCheckStyleChecks ( ) ; 
 + final Set < String > configChecks = CheckUtil . getConfigCheckStyleModules ( ) ; 
 
 for ( String moduleName : getSimpleNames ( CheckUtil . getCheckstyleModules ( ) ) ) { 
 Assert . assertTrue ( " checkstyle _ checks . xml is missing module : " + moduleName , 
 @ @ - 185 , 11 + 189 , 20 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testAllCheckstyleModulesHaveMessage ( ) throws Exception { 
 + public void testAllCheckstyleChecksHaveMessage ( ) throws Exception { 
 for ( Class < ? > module : CheckUtil . getCheckstyleChecks ( ) ) { 
 - Assert . assertFalse ( module . getSimpleName ( ) 
 - + " should have atleast one ' MSG _ * ' field for error messages " , CheckUtil 
 - . getCheckMessages ( module ) . isEmpty ( ) ) ; 
 + final String name = module . getSimpleName ( ) ; 
 + 
 + if ( " FileContentsHolder " . equals ( name ) ) { 
 + Assert . assertTrue ( name 
 + + " should not have any ' MSG _ * ' field for error messages " , CheckUtil 
 + . getCheckMessages ( module ) . isEmpty ( ) ) ; 
 + } 
 + else { 
 + Assert . assertFalse ( name 
 + + " should have atleast one ' MSG _ * ' field for error messages " , CheckUtil 
 + . getCheckMessages ( module ) . isEmpty ( ) ) ; 
 + } 
 } 
 } 
 
 @ @ - 197 , 7 + 210 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 public void testAllCheckstyleMessages ( ) throws Exception { 
 final Map < String , List < String > > usedMessages = new TreeMap < > ( ) ; 
 
 - / / test validity of messages from checks 
 + / / test validity of messages from modules 
 for ( Class < ? > module : CheckUtil . getCheckstyleModules ( ) ) { 
 for ( Field message : CheckUtil . getCheckMessages ( module ) ) { 
 Assert . assertEquals ( module . getSimpleName ( ) + " . " + message . getName ( ) 
 @ @ - 288 , 12 + 301 , 20 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 } 
 
 / * * 
 - * Removes ' Check ' suffix from each class name in the set . 
 + * Retrieves a list of class names , removing ' Check ' from the end if the class is 
 + * a checkstyle check . 
 * @ param checks class instances . 
 * @ return a set of simple names . 
 * / 
 private static Set < String > getSimpleNames ( Set < Class < ? > > checks ) { 
 - return checks . stream ( ) . map ( check - > check . getSimpleName ( ) . replace ( " Check " , " " ) ) 
 - . collect ( Collectors . toSet ( ) ) ; 
 + return checks . stream ( ) . map ( check - > { 
 + String name = check . getSimpleName ( ) ; 
 + 
 + if ( name . endsWith ( " Check " ) ) { 
 + name = name . substring ( 0 , name . length ( ) - 5 ) ; 
 + } 
 + 
 + return name ; 
 + } ) . collect ( Collectors . toSet ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java 
 index d680c36 . . 0f0b5d3 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java 
 @ @ - 40 , 9 + 40 , 12 @ @ import org . w3c . dom . NodeList ; 
 
 import com . google . common . collect . ImmutableSet ; 
 import com . google . common . reflect . ClassPath ; 
 + import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 + import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; 
 import com . puppycrawl . tools . checkstyle . api . BeforeExecutionFileFilter ; 
 import com . puppycrawl . tools . checkstyle . api . Filter ; 
 + import com . puppycrawl . tools . checkstyle . api . RootModule ; 
 import com . puppycrawl . tools . checkstyle . checks . regexp . RegexpMultilineCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . regexp . RegexpSinglelineCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . regexp . RegexpSinglelineJavaCheck ; 
 @ @ - 53 , 16 + 56 , 16 @ @ public final class CheckUtil { 
 private CheckUtil ( ) { 
 } 
 
 - public static Set < String > getConfigCheckStyleChecks ( ) { 
 - return getCheckStyleChecksReferencedInConfig ( " config / checkstyle _ checks . xml " ) ; 
 + public static Set < String > getConfigCheckStyleModules ( ) { 
 + return getCheckStyleModulesReferencedInConfig ( " config / checkstyle _ checks . xml " ) ; 
 } 
 
 - public static Set < String > getConfigSunStyleChecks ( ) { 
 - return getCheckStyleChecksReferencedInConfig ( " src / main / resources / sun _ checks . xml " ) ; 
 + public static Set < String > getConfigSunStyleModules ( ) { 
 + return getCheckStyleModulesReferencedInConfig ( " src / main / resources / sun _ checks . xml " ) ; 
 } 
 
 - public static Set < String > getConfigGoogleStyleChecks ( ) { 
 - return getCheckStyleChecksReferencedInConfig ( " src / main / resources / google _ checks . xml " ) ; 
 + public static Set < String > getConfigGoogleStyleModules ( ) { 
 + return getCheckStyleModulesReferencedInConfig ( " src / main / resources / google _ checks . xml " ) ; 
 } 
 
 / * * 
 @ @ - 72 , 7 + 75 , 7 @ @ public final class CheckUtil { 
 * file path of checkstyle _ checks . xml . 
 * @ return names of checkstyle ' s checks which are referenced in checkstyle _ checks . xml . 
 * / 
 - private static Set < String > getCheckStyleChecksReferencedInConfig ( String configFilePath ) { 
 + private static Set < String > getCheckStyleModulesReferencedInConfig ( String configFilePath ) { 
 try { 
 final DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; 
 
 @ @ - 104 , 9 + 107 , 7 @ @ public final class CheckUtil { 
 if ( currentNode . getNodeType ( ) = = Node . ELEMENT _ NODE ) { 
 final Element module = ( Element ) currentNode ; 
 final String checkName = module . getAttribute ( " name " ) ; 
 - if ( ! " Checker " . equals ( checkName ) & & ! " TreeWalker " . equals ( checkName ) ) { 
 - checksReferencedInCheckstyleChecksXml . add ( checkName ) ; 
 - } 
 + checksReferencedInCheckstyleChecksXml . add ( checkName ) ; 
 } 
 } 
 return checksReferencedInCheckstyleChecksXml ; 
 @ @ - 117 , 9 + 118 , 11 @ @ public final class CheckUtil { 
 } 
 
 / * * 
 - * Gets the checkstyle ' s non abstract checks . 
 - * @ return the set of checkstyle ' s non abstract check classes . 
 + * Gets all checkstyle ' s non - abstract checks . 
 + * @ return the set of checkstyle ' s non - abstract check classes . 
 * @ throws IOException if the attempt to read class path resources failed . 
 + * @ see # isValidCheckstyleClass ( Class , String ) 
 + * @ see # isCheckstyleCheck ( Class ) 
 * / 
 public static Set < Class < ? > > getCheckstyleChecks ( ) throws IOException { 
 final Set < Class < ? > > checkstyleChecks = new HashSet < > ( ) ; 
 @ @ - 134 , 7 + 137 , 8 @ @ public final class CheckUtil { 
 for ( ClassPath . ClassInfo clazz : checkstyleClasses ) { 
 final String className = clazz . getSimpleName ( ) ; 
 final Class < ? > loadedClass = clazz . load ( ) ; 
 - if ( isCheckstyleNonAbstractCheck ( loadedClass , className ) ) { 
 + if ( isValidCheckstyleClass ( loadedClass , className ) 
 + & & isCheckstyleCheck ( loadedClass ) ) { 
 checkstyleChecks . add ( loadedClass ) ; 
 } 
 } 
 @ @ - 142 , 12 + 146 , 10 @ @ public final class CheckUtil { 
 } 
 
 / * * 
 - * Gets the checkstyle ' s modules . 
 - * Checkstyle ' s modules are nonabstract classes from com . puppycrawl . tools . checkstyle package 
 - * which names end with ' Check ' , do not contain the word ' Input ' ( are not input files for UTs ) , 
 - * checkstyle ' s filters and SuppressWarningsHolder class . 
 - * @ return a set of checkstyle ' s modules names . 
 + * Gets all checkstyle ' s modules . 
 + * @ return the set of checkstyle ' s module classes . 
 * @ throws IOException if the attempt to read class path resources failed . 
 + * @ see # isCheckstyleModule ( Class ) 
 * / 
 public static Set < Class < ? > > getCheckstyleModules ( ) throws IOException { 
 final Set < Class < ? > > checkstyleModules = new HashSet < > ( ) ; 
 @ @ - 169 , 62 + 171 , 83 @ @ public final class CheckUtil { 
 } 
 
 / * * 
 - * Checks whether a class may be considered as the checkstyle check . 
 - * Checkstyle ' s checks are nonabstract classes which names end with ' Check ' , 
 - * do not contain the word ' Input ' ( are not input files for UTs ) . 
 + * Checks whether a class may be considered as a checkstyle module . Checkstyle ' s modules are 
 + * non - abstract classes , which names do not start with the word ' Input ' ( are not input files for 
 + * UTs ) , and are either checkstyle ' s checks , file sets , filters , file filters , or root module . 
 + * @ param loadedClass class to check . 
 + * @ return true if the class may be considered as the checkstyle module . 
 + * / 
 + private static boolean isCheckstyleModule ( Class < ? > loadedClass ) { 
 + final String className = loadedClass . getSimpleName ( ) ; 
 + return isValidCheckstyleClass ( loadedClass , className ) 
 + & & ( isCheckstyleCheck ( loadedClass ) 
 + | | isFileSetModule ( loadedClass ) 
 + | | isFilterModule ( loadedClass ) 
 + | | isFileFilterModule ( loadedClass ) 
 + | | isRootModule ( loadedClass ) ) ; 
 + } 
 + 
 + / * * 
 + * Checks whether a class extends ' AutomaticBean ' , is non - abstract , and doesn ' t start with the 
 + * word ' Input ' ( are not input files for UTs ) . 
 * @ param loadedClass class to check . 
 * @ param className class name to check . 
 + * @ return true if a class may be considered a valid production class . 
 + * / 
 + public static boolean isValidCheckstyleClass ( Class < ? > loadedClass , String className ) { 
 + return AutomaticBean . class . isAssignableFrom ( loadedClass ) 
 + & & ! Modifier . isAbstract ( loadedClass . getModifiers ( ) ) 
 + & & ! className . contains ( " Input " ) ; 
 + } 
 + 
 + / * * 
 + * Checks whether a class may be considered as the checkstyle check . 
 + * Checkstyle ' s checks are classes which implement ' AbstractCheck ' interface . 
 + * @ param loadedClass class to check . 
 * @ return true if a class may be considered as the checkstyle check . 
 * / 
 - private static boolean isCheckstyleNonAbstractCheck ( Class < ? > loadedClass , String className ) { 
 - return ! Modifier . isAbstract ( loadedClass . getModifiers ( ) ) 
 - & & className . endsWith ( " Check " ) 
 - & & ! className . contains ( " Input " ) ; 
 + public static boolean isCheckstyleCheck ( Class < ? > loadedClass ) { 
 + return AbstractCheck . class . isAssignableFrom ( loadedClass ) ; 
 } 
 
 / * * 
 - * Checks whether a class may be considered as the checkstyle module . 
 - * Checkstyle ' s modules are nonabstract classes which names end with ' Check ' , 
 - * do not contain the word ' Input ' ( are not input files for UTs ) , 
 - * checkstyle ' s filters , checkstyle ' s file filters and SuppressWarningsHolder class . 
 + * Checks whether a class may be considered as the checkstyle file set . 
 + * Checkstyle ' s file sets are classes which implement ' AbstractFileSetCheck ' interface . 
 * @ param loadedClass class to check . 
 - * @ return true if the class may be considered as the checkstyle module . 
 + * @ return true if a class may be considered as the checkstyle file set . 
 * / 
 - private static boolean isCheckstyleModule ( Class < ? > loadedClass ) { 
 - final String className = loadedClass . getSimpleName ( ) ; 
 - return isCheckstyleNonAbstractCheck ( loadedClass , className ) 
 - | | isFilterModule ( loadedClass , className ) 
 - | | isFileFilterModule ( loadedClass , className ) 
 - | | " SuppressWarningsHolder " . equals ( className ) 
 - | | " FileContentsHolder " . equals ( className ) ; 
 + public static boolean isFileSetModule ( Class < ? > loadedClass ) { 
 + return AbstractFileSetCheck . class . isAssignableFrom ( loadedClass ) ; 
 } 
 
 / * * 
 * Checks whether a class may be considered as the checkstyle filter . 
 - * Checkstyle ' s filters are classes which are subclasses of AutomaticBean , 
 - * implement ' Filter ' interface , and which names end with ' Filter ' . 
 + * Checkstyle ' s filters are classes which implement ' Filter ' interface . 
 * @ param loadedClass class to check . 
 - * @ param className class name to check . 
 * @ return true if a class may be considered as the checkstyle filter . 
 * / 
 - private static boolean isFilterModule ( Class < ? > loadedClass , String className ) { 
 - return Filter . class . isAssignableFrom ( loadedClass ) 
 - & & AutomaticBean . class . isAssignableFrom ( loadedClass ) 
 - & & className . endsWith ( " Filter " ) ; 
 + public static boolean isFilterModule ( Class < ? > loadedClass ) { 
 + return Filter . class . isAssignableFrom ( loadedClass ) ; 
 } 
 
 / * * 
 * Checks whether a class may be considered as the checkstyle file filter . 
 - * Checkstyle ' s file filters are classes which are subclasses of AutomaticBean , 
 - * implement ' BeforeExecutionFileFilter ' interface , and which names end with ' FileFilter ' . 
 + * Checkstyle ' s file filters are classes which implement ' BeforeExecutionFileFilter ' interface . 
 * @ param loadedClass class to check . 
 - * @ param className class name to check . 
 * @ return true if a class may be considered as the checkstyle file filter . 
 * / 
 - private static boolean isFileFilterModule ( Class < ? > loadedClass , String className ) { 
 - return BeforeExecutionFileFilter . class . isAssignableFrom ( loadedClass ) 
 - & & AutomaticBean . class . isAssignableFrom ( loadedClass ) 
 - & & className . endsWith ( " FileFilter " ) ; 
 + public static boolean isFileFilterModule ( Class < ? > loadedClass ) { 
 + return BeforeExecutionFileFilter . class . isAssignableFrom ( loadedClass ) ; 
 + } 
 + 
 + / * * 
 + * Checks whether a class may be considered as the checkstyle root module . 
 + * Checkstyle ' s root modules are classes which implement ' RootModule ' interface . 
 + * @ param loadedClass class to check . 
 + * @ return true if a class may be considered as the checkstyle root module . 
 + * / 
 + public static boolean isRootModule ( Class < ? > loadedClass ) { 
 + return RootModule . class . isAssignableFrom ( loadedClass ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java 
 index 2495f0a . . 8e89717 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XDocsPagesTest . java 
 @ @ - 73 , 7 + 73 , 7 @ @ public class XDocsPagesTest { 
 private static final String LINK _ TEMPLATE = 
 " ( ? s ) . * < a href = \ " config _ \ \ w + \ \ . html # % 1 $ s \ " > % 1 $ s < / a > . * " ; 
 
 - private static final List < String > CHECKS _ ON _ PAGE _ IGNORE _ LIST = Arrays . asList ( 
 + private static final List < String > MODULES _ ON _ PAGE _ IGNORE _ LIST = Arrays . asList ( 
 " AbstractAccessControlNameCheck . java " , 
 " AbstractCheck . java " , 
 " AbstractClassCouplingCheck . java " , 
 @ @ - 134 , 10 + 134 , 10 @ @ public class XDocsPagesTest { 
 " SuppressionCommentFilter . fileContents " 
 ) ; 
 
 - private static final Set < String > SUN _ CHECKS = Collections . unmodifiableSet ( 
 - new HashSet < > ( CheckUtil . getConfigSunStyleChecks ( ) ) ) ; 
 - private static final Set < String > GOOGLE _ CHECKS = Collections . unmodifiableSet ( 
 - new HashSet < > ( CheckUtil . getConfigGoogleStyleChecks ( ) ) ) ; 
 + private static final Set < String > SUN _ MODULES = Collections . unmodifiableSet ( 
 + new HashSet < > ( CheckUtil . getConfigSunStyleModules ( ) ) ) ; 
 + private static final Set < String > GOOGLE _ MODULES = Collections . unmodifiableSet ( 
 + new HashSet < > ( CheckUtil . getConfigGoogleStyleModules ( ) ) ) ; 
 
 @ Test 
 public void testAllChecksPresentOnAvailableChecksPage ( ) throws IOException { 
 @ @ - 145 , 7 + 145 , 7 @ @ public class XDocsPagesTest { 
 Files . walk ( JAVA _ SOURCES _ DIRECTORY ) . forEach ( filePath - > { 
 final String fileName = filePath . getFileName ( ) . toString ( ) ; 
 if ( fileName . matches ( CHECK _ FILE _ NAME ) 
 - & & ! CHECKS _ ON _ PAGE _ IGNORE _ LIST . contains ( fileName ) ) { 
 + & & ! MODULES _ ON _ PAGE _ IGNORE _ LIST . contains ( fileName ) ) { 
 final String checkName = fileName . replace ( CHECK _ SUFFIX , " " ) ; 
 if ( ! isPresent ( availableChecks , checkName ) ) { 
 Assert . fail ( checkName + " is not correctly listed on Available Checks page " 
 @ @ - 557 , 8 + 557 , 8 @ @ public class XDocsPagesTest { 
 propertyName ) ; 
 final Class < ? > clss = descriptor . getPropertyType ( ) ; 
 final String expectedTypeName = 
 - getCheckPropertyExpectedTypeName ( clss , instance , propertyName ) ; 
 - final String expectedValue = getCheckPropertyExpectedValue ( clss , instance , 
 + getModulePropertyExpectedTypeName ( clss , instance , propertyName ) ; 
 + final String expectedValue = getModulePropertyExpectedValue ( clss , instance , 
 propertyName ) ; 
 
 if ( expectedTypeName ! = null ) { 
 @ @ - 613 , 7 + 613 , 7 @ @ public class XDocsPagesTest { 
 } 
 
 / * * @ noinspection IfStatementWithTooManyBranches * / 
 - private static String getCheckPropertyExpectedTypeName ( Class < ? > clss , Object instance , 
 + private static String getModulePropertyExpectedTypeName ( Class < ? > clss , Object instance , 
 String propertyName ) { 
 final String instanceName = instance . getClass ( ) . getSimpleName ( ) ; 
 String result = null ; 
 @ @ - 665 , 7 + 665 , 7 @ @ public class XDocsPagesTest { 
 return result ; 
 } 
 
 - private static String getCheckPropertyExpectedValue ( Class < ? > clss , Object instance , 
 + private static String getModulePropertyExpectedValue ( Class < ? > clss , Object instance , 
 String propertyName ) throws Exception { 
 final Field field = getField ( instance . getClass ( ) , propertyName ) ; 
 String result = null ; 
 @ @ - 829 , 7 + 829 , 7 @ @ public class XDocsPagesTest { 
 
 Assert . assertTrue ( fileName + " section ' " + sectionName 
 + " ' should be in google _ checks . xml or not reference ' Google Style ' " , 
 - GOOGLE _ CHECKS . contains ( sectionName ) ) ; 
 + GOOGLE _ MODULES . contains ( sectionName ) ) ; 
 } 
 else if ( " Sun Style " . equals ( linkText ) ) { 
 hasSun = true ; 
 @ @ - 840 , 7 + 840 , 7 @ @ public class XDocsPagesTest { 
 
 Assert . assertTrue ( fileName + " section ' " + sectionName 
 + " ' should be in sun _ checks . xml or not reference ' Sun Style ' " , 
 - SUN _ CHECKS . contains ( sectionName ) ) ; 
 + SUN _ MODULES . contains ( sectionName ) ) ; 
 } 
 
 Assert . assertEquals ( fileName + " section ' " + sectionName 
 @ @ - 851 , 10 + 851 , 10 @ @ public class XDocsPagesTest { 
 + " ' should have a checkstyle section " , hasCheckstyle ) ; 
 Assert . assertTrue ( fileName + " section ' " + sectionName 
 + " ' should have a google section since it is in it ' s config " , hasGoogle 
 - | | ! GOOGLE _ CHECKS . contains ( sectionName ) ) ; 
 + | | ! GOOGLE _ MODULES . contains ( sectionName ) ) ; 
 Assert . assertTrue ( fileName + " section ' " + sectionName 
 + " ' should have a sun section since it is in it ' s config " , 
 - hasSun | | ! SUN _ CHECKS . contains ( sectionName ) ) ; 
 + hasSun | | ! SUN _ MODULES . contains ( sectionName ) ) ; 
 } 
 
 private static void validatePackageSection ( String fileName , String sectionName , 
 @ @ - 918 , 7 + 918 , 7 @ @ public class XDocsPagesTest { 
 Set < String > styleChecks = null ; 
 
 if ( path . toFile ( ) . getName ( ) . contains ( " google " ) ) { 
 - styleChecks = new HashSet < > ( GOOGLE _ CHECKS ) ; 
 + styleChecks = new HashSet < > ( GOOGLE _ MODULES ) ; 
 } 
 else if ( path . toFile ( ) . getName ( ) . contains ( " sun " ) ) { 
 styleChecks = new HashSet < > ( ) ; 
 @ @ - 950 , 13 + 950 , 17 @ @ public class XDocsPagesTest { 
 fileName , ruleName ) ; 
 } 
 
 - validateStyleChecks ( XmlUtil . findChildElementsByTag ( columns . get ( 2 ) , " a " ) , 
 + validateStyleModules ( XmlUtil . findChildElementsByTag ( columns . get ( 2 ) , " a " ) , 
 XmlUtil . findChildElementsByTag ( columns . get ( 3 ) , " a " ) , styleChecks , fileName , 
 ruleName ) ; 
 
 lastRuleName = ruleName ; 
 } 
 
 + / / these modules aren ' t documented , but are added to the config 
 + styleChecks . remove ( " TreeWalker " ) ; 
 + styleChecks . remove ( " Checker " ) ; 
 + 
 Assert . assertTrue ( fileName + " requires the following check ( s ) to appear : " 
 + styleChecks , styleChecks . isEmpty ( ) ) ; 
 } 
 @ @ - 995 , 24 + 999 , 24 @ @ public class XDocsPagesTest { 
 } 
 } 
 
 - private static void validateStyleChecks ( Set < Node > checks , Set < Node > configs , 
 + private static void validateStyleModules ( Set < Node > checks , Set < Node > configs , 
 Set < String > styleChecks , String fileName , String ruleName ) { 
 final Iterator < Node > itrChecks = checks . iterator ( ) ; 
 final Iterator < Node > itrConfigs = configs . iterator ( ) ; 
 
 while ( itrChecks . hasNext ( ) ) { 
 - final Node check = itrChecks . next ( ) ; 
 - final String checkName = check . getTextContent ( ) . trim ( ) ; 
 + final Node module = itrChecks . next ( ) ; 
 + final String moduleName = module . getTextContent ( ) . trim ( ) ; 
 
 - if ( ! check . getAttributes ( ) . getNamedItem ( " href " ) . getTextContent ( ) 
 + if ( ! module . getAttributes ( ) . getNamedItem ( " href " ) . getTextContent ( ) 
 . startsWith ( " config _ " ) ) { 
 continue ; 
 } 
 
 - Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' check ' " + checkName 
 - + " ' shouldn ' t end with ' Check ' " , ! checkName . endsWith ( " Check " ) ) ; 
 + Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName 
 + + " ' shouldn ' t end with ' Check ' " , ! moduleName . endsWith ( " Check " ) ) ; 
 
 - styleChecks . remove ( checkName ) ; 
 + styleChecks . remove ( moduleName ) ; 
 
 for ( String configName : new String [ ] { " config " , " test " } ) { 
 Node config = null ; 
 @ @ - 1021 , 11 + 1025 , 11 @ @ public class XDocsPagesTest { 
 config = itrConfigs . next ( ) ; 
 } 
 catch ( NoSuchElementException ignore ) { 
 - Assert . fail ( fileName + " rule ' " + ruleName + " ' check ' " + checkName 
 + Assert . fail ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName 
 + " ' is missing the config link : " + configName ) ; 
 } 
 
 - Assert . assertEquals ( fileName + " rule ' " + ruleName + " ' check ' " + checkName 
 + Assert . assertEquals ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName 
 + " ' has mismatched config / test links " , configName , config . getTextContent ( ) 
 . trim ( ) ) ; 
 
 @ @ - 1035 , 22 + 1039 , 22 @ @ public class XDocsPagesTest { 
 if ( " config " . equals ( configName ) ) { 
 final String expectedUrl = " https : / / github . com / search ? q = " 
 + " path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + " 
 - + " repo % 3Acheckstyle % 2Fcheckstyle + " + checkName ; 
 + + " repo % 3Acheckstyle % 2Fcheckstyle + " + moduleName ; 
 
 - Assert . assertEquals ( fileName + " rule ' " + ruleName + " ' check ' " + checkName 
 + Assert . assertEquals ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName 
 + " ' should have matching " + configName + " url " , expectedUrl , 
 configUrl ) ; 
 } 
 else if ( " test " . equals ( configName ) ) { 
 - Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' check ' " + checkName 
 + Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName 
 + " ' should have matching " + configName + " url " , 
 configUrl . startsWith ( " https : / / github . com / checkstyle / checkstyle / " 
 + " blob / master / src / it / java / com / google / checkstyle / test / " ) ) ; 
 - Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' check ' " + checkName 
 + Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName 
 + " ' should have matching " + configName + " url " , 
 - configUrl . endsWith ( " / " + checkName + " Test . java " ) ) ; 
 + configUrl . endsWith ( " / " + moduleName + " Test . java " ) ) ; 
 
 - Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' check ' " + checkName 
 + Assert . assertTrue ( fileName + " rule ' " + ruleName + " ' module ' " + moduleName 
 + " ' should have a test that exists " , new File ( configUrl . substring ( 53 ) 
 . replace ( ' / ' , File . separatorChar ) ) . exists ( ) ) ; 
 } 
 diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml 
 index 73f0cad . . a771ea5 100644 
 - - - a / src / xdocs / config . xml 
 + + + b / src / xdocs / config . xml 
 @ @ - 274 , 6 + 274 , 8 @ @ 
 files . < / li > 
 < li > < em > Filter < / em > children : modules that filter audit 
 events . < / li > 
 + < li > < em > FileFilter < / em > children : modules that filter files 
 + for Checkstyle to process . < / li > 
 < li > < em > AuditListener < / em > children : modules that report 
 filtered events . < / li > 
 < / ul >

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java 
 new file mode 100644 
 index 0000000 . . 6fab664 
 - - - / dev / null 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java 
 @ @ - 0 , 0 + 1 , 59 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2008 Oliver Burn 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 + / * * 
 + * Checks that no method having zero parameters is defined 
 + * using the name < em > finalize < / em > . 
 + * 
 + * @ author fqian @ google . com ( Feng Qian ) 
 + * @ author smckay @ google . com ( Steve McKay ) 
 + * @ author lkuehne 
 + * / 
 + public class NoFinalizerCheck extends Check 
 + { 
 + 
 + @ Override 
 + public int [ ] getDefaultTokens ( ) 
 + { 
 + return new int [ ] { TokenTypes . METHOD _ DEF } ; 
 + } 
 + 
 + @ Override 
 + public void visitToken ( DetailAST aAST ) 
 + { 
 + final DetailAST mid = aAST . findFirstToken ( TokenTypes . IDENT ) ; 
 + final String methodName = mid . getText ( ) ; 
 + 
 + if ( methodName . equals ( " finalize " ) ) { 
 + 
 + final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 + final boolean hasEmptyParamList = 
 + ! params . branchContains ( TokenTypes . PARAMETER _ DEF ) ; 
 + 
 + if ( hasEmptyParamList ) { 
 + log ( aAST . getLineNo ( ) , " avoid . finalizer . method " ) ; 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 index c5163da . . 76ad1b1 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 array . trailing . comma = Array should contain trailing comma . 
 assignment . inner . avoid = Inner assignments should be avoided . 
 + avoid . finalizer . method = Avoid using finalizer method . 
 covariant . equals = covariant equals without overriding equals ( java . lang . Object ) . 
 declaration . order . constructor = Constructor definition in wrong order . 
 declaration . order . method = Method definition in wrong order . 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 index 6a8b644 . . 38207b4 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 array . trailing . comma = Array sollte mit einem Komma abheschlossen werden . 
 assignment . inner . avoid = Innere Zuweisungen sollten vermieden werden . 
 + avoid . finalizer . method = Die Verwendung von finalizer Methoden sollte vermieden werden . 
 covariant . equals = Kovariante Definition von equals ( ) ohne equ
