BLEU SCORE: 0.033864985683445356

TEST MSG: Issue # 6130 : AbbreviationAsWordInName false positive at end of the word
GENERATED MSG: AbbreviationAsWordInNameCheck updated to follow Cyclomatic Complexity rule . # 954

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java <nl> index eb8777e . . acf6886 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java <nl> @ @ - 42 , 13 + 42 , 10 @ @ public class AbbreviationAsWordInNameTest extends AbstractModuleTestSupport { <nl> final int maxCapitalCount = 2 ; <nl> <nl> final String [ ] expected = { <nl> - " 50 : " + getWarningMessage ( " newCustomerID " , maxCapitalCount ) , <nl> " 52 : " + getWarningMessage ( " supportsIPv6OnIOS " , maxCapitalCount ) , <nl> " 54 : " + getWarningMessage ( " XMLHTTPRequest " , maxCapitalCount ) , <nl> - " 58 : " + getWarningMessage ( " newCustomerID " , maxCapitalCount ) , <nl> " 60 : " + getWarningMessage ( " supportsIPv6OnIOS " , maxCapitalCount ) , <nl> " 62 : " + getWarningMessage ( " XMLHTTPRequest " , maxCapitalCount ) , <nl> - " 67 : " + getWarningMessage ( " newCustomerID " , maxCapitalCount ) , <nl> " 69 : " + getWarningMessage ( " supportsIPv6OnIOS " , maxCapitalCount ) , <nl> " 71 : " + getWarningMessage ( " XMLHTTPRequest " , maxCapitalCount ) , <nl> } ; <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule53camelcase / InputAbbreviationAsWordInTypeNameCheck . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule53camelcase / InputAbbreviationAsWordInTypeNameCheck . java <nl> index 6c0220a . . 4e38dad 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule53camelcase / InputAbbreviationAsWordInTypeNameCheck . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule53camelcase / InputAbbreviationAsWordInTypeNameCheck . java <nl> @ @ - 47 , 7 + 47 , 7 @ @ class AbbreviationsCorrect { <nl> <nl> class AbbreviationsIncorrect { <nl> <nl> - int newCustomerID ; / / warn <nl> + int newCustomerID ; <nl> <nl> boolean supportsIPv6OnIOS ; / / warn <nl> <nl> @ @ - 55 , 7 + 55 , 7 @ @ class AbbreviationsIncorrect { <nl> <nl> class InnerBad { <nl> <nl> - int newCustomerID ; / / warn <nl> + int newCustomerID ; <nl> <nl> boolean supportsIPv6OnIOS ; / / warn <nl> <nl> @ @ - 64 , 7 + 64 , 7 @ @ class AbbreviationsIncorrect { <nl> <nl> AbbreviationsCorrect anonymousBad = new AbbreviationsCorrect ( ) { <nl> <nl> - int newCustomerID ; / / warn <nl> + int newCustomerID ; <nl> <nl> boolean supportsIPv6OnIOS ; / / warn <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> index 8f56437 . . f6a353b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> @ @ - 386 , 7 + 386 , 6 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { <nl> abbrStarted = false ; <nl> <nl> final int endIndex = index - 1 ; <nl> - / / - 1 as a first capital is usually beginning of next word <nl> result = getAbbreviationIfIllegal ( str , beginIndex , endIndex ) ; <nl> if ( result ! = null ) { <nl> break ; <nl> @ @ - 394 , 26 + 393 , 28 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { <nl> beginIndex = - 1 ; <nl> } <nl> } <nl> - / / if abbreviation at the end of name and it is not single character ( example : scaleX ) <nl> - if ( abbrStarted & & beginIndex ! = str . length ( ) - 1 ) { <nl> - final int endIndex = str . length ( ) ; <nl> + / / if abbreviation at the end of name ( example : scaleX ) <nl> + if ( abbrStarted ) { <nl> + final int endIndex = str . length ( ) - 1 ; <nl> result = getAbbreviationIfIllegal ( str , beginIndex , endIndex ) ; <nl> } <nl> return result ; <nl> } <nl> <nl> / * * <nl> - * Get Abbreviation if it is illegal . <nl> + * Get Abbreviation if it is illegal , where { @ code beginIndex } and { @ code endIndex } are <nl> + * inclusive indexes of a sequence of consecutive upper - case characters . <nl> * @ param str name <nl> * @ param beginIndex begin index <nl> * @ param endIndex end index <nl> - * @ return true is abbreviation is bigger that required and not in ignore list <nl> + * @ return the abbreviation if it is bigger than required and not in the <nl> + * ignore list , otherwise { @ code null } <nl> * / <nl> private String getAbbreviationIfIllegal ( String str , int beginIndex , int endIndex ) { <nl> String result = null ; <nl> final int abbrLength = endIndex - beginIndex ; <nl> if ( abbrLength > allowedAbbreviationLength ) { <nl> - final String abbr = str . substring ( beginIndex , endIndex ) ; <nl> + final String abbr = getAbbreviation ( str , beginIndex , endIndex ) ; <nl> if ( ! allowedAbbreviations . contains ( abbr ) ) { <nl> result = abbr ; <nl> } <nl> @ @ - 422 , 6 + 423 , 34 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> + * Gets the abbreviation , where { @ code beginIndex } and { @ code endIndex } are <nl> + * inclusive indexes of a sequence of consecutive upper - case characters . <nl> + * < p > <nl> + * The character at { @ code endIndex } is only included in the abbreviation if <nl> + * it is the last character in the string ; otherwise it is usually the first <nl> + * capital in the next word . <nl> + * < / p > <nl> + * < p > <nl> + * For example , { @ code getAbbreviation ( " getXMLParser " , 3 , 6 ) } returns " XML " <nl> + * ( not " XMLP " ) , and so does { @ code getAbbreviation ( " parseXML " , 5 , 7 ) } . <nl> + * < / p > <nl> + * @ param str name <nl> + * @ param beginIndex begin index <nl> + * @ param endIndex end index <nl> + * @ return the specified abbreviation <nl> + * / <nl> + private static String getAbbreviation ( String str , int beginIndex , int endIndex ) { <nl> + final String result ; <nl> + if ( endIndex = = str . length ( ) - 1 ) { <nl> + result = str . substring ( beginIndex ) ; <nl> + } <nl> + else { <nl> + result = str . substring ( beginIndex , endIndex ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> * Gets all the children which are one level below on the current DetailAST <nl> * parent node . <nl> * @ param node <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> index b8e9cb5 . . 739a896 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> @ @ - 107 , 7 + 107 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends AbstractModuleTestSupport <nl> " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , <nl> " 39 : " + getWarningMessage ( " marazmaticVARIABLEName " , expectedCapitalCount ) , <nl> " 40 : " + getWarningMessage ( " MARAZMATICVariableName " , expectedCapitalCount ) , <nl> - " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; <nl> @ @ - 212 , 9 + 211 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends AbstractModuleTestSupport <nl> " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , <nl> " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , <nl> " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , <nl> - " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , / / not in ignore list <nl> - " 59 : " <nl> - + getWarningMessage ( " s1erialNUMBER " , expectedCapitalCount ) , / / no ignore for final <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ;
NEAREST DIFF (one line): diff - - git a / src / main / resources / checkstyletask . properties b / src / main / resources / checkstyletask . properties <nl> deleted file mode 100644 <nl> index 5b4093b . . 0000000 <nl> - - - a / src / main / resources / checkstyletask . properties <nl> + + + / dev / null <nl> @ @ - 1 + 0 , 0 @ @ <nl> - checkstyle = com . puppycrawl . tools . checkstyle . ant . CheckstyleAntTask <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / ant / checkstyletask . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / ant / checkstyletask . properties <nl> new file mode 100644 <nl> index 0000000 . . 5b4093b <nl> - - - / dev / null <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / ant / checkstyletask . properties <nl> @ @ - 0 , 0 + 1 @ @ <nl> + checkstyle = com . puppycrawl . tools . checkstyle . ant . CheckstyleAntTask <nl> diff - - git a / src / xdocs / anttask . xml . vm b / src / xdocs / anttask . xml . vm <nl> index e853c56 . . 3dcb108 100644 <nl> - - - a / src / xdocs / anttask . xml . vm <nl> + + + b / src / xdocs / anttask . xml . vm <nl> @ @ - 49 , 7 + 49 , 7 @ @ <nl> < / p > <nl> <nl> < source > <nl> - & lt ; taskdef resource = & quot ; checkstyletask . properties & quot ; <nl> + & lt ; taskdef resource = & quot ; com / puppycrawl / tools / checkstyle / ant / checkstyle - ant - task . properties & quot ; <nl> classpath = & quot ; / path / to / checkstyle - $ { projectVersion } - all . jar & quot ; / & gt ; <nl> < / source > <nl> <nl> @ @ - 60 , 7 + 60 , 7 @ @ <nl> < / p > <nl> <nl> < source > <nl> - & lt ; taskdef resource = & quot ; checkstyletask . properties & quot ; / & gt ; <nl> + & lt ; taskdef resource = & quot ; com / puppycrawl / tools / checkstyle / ant / checkstyle - ant - task . properties & quot ; / & gt ; <nl> < / source > <nl> <nl> < p >

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java 
 index eb8777e . . acf6886 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java 
 @ @ - 42 , 13 + 42 , 10 @ @ public class AbbreviationAsWordInNameTest extends AbstractModuleTestSupport { 
 final int maxCapitalCount = 2 ; 
 
 final String [ ] expected = { 
 - " 50 : " + getWarningMessage ( " newCustomerID " , maxCapitalCount ) , 
 " 52 : " + getWarningMessage ( " supportsIPv6OnIOS " , maxCapitalCount ) , 
 " 54 : " + getWarningMessage ( " XMLHTTPRequest " , maxCapitalCount ) , 
 - " 58 : " + getWarningMessage ( " newCustomerID " , maxCapitalCount ) , 
 " 60 : " + getWarningMessage ( " supportsIPv6OnIOS " , maxCapitalCount ) , 
 " 62 : " + getWarningMessage ( " XMLHTTPRequest " , maxCapitalCount ) , 
 - " 67 : " + getWarningMessage ( " newCustomerID " , maxCapitalCount ) , 
 " 69 : " + getWarningMessage ( " supportsIPv6OnIOS " , maxCapitalCount ) , 
 " 71 : " + getWarningMessage ( " XMLHTTPRequest " , maxCapitalCount ) , 
 } ; 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule53camelcase / InputAbbreviationAsWordInTypeNameCheck . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule53camelcase / InputAbbreviationAsWordInTypeNameCheck . java 
 index 6c0220a . . 4e38dad 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule53camelcase / InputAbbreviationAsWordInTypeNameCheck . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule53camelcase / InputAbbreviationAsWordInTypeNameCheck . java 
 @ @ - 47 , 7 + 47 , 7 @ @ class AbbreviationsCorrect { 
 
 class AbbreviationsIncorrect { 
 
 - int newCustomerID ; / / warn 
 + int newCustomerID ; 
 
 boolean supportsIPv6OnIOS ; / / warn 
 
 @ @ - 55 , 7 + 55 , 7 @ @ class AbbreviationsIncorrect { 
 
 class InnerBad { 
 
 - int newCustomerID ; / / warn 
 + int newCustomerID ; 
 
 boolean supportsIPv6OnIOS ; / / warn 
 
 @ @ - 64 , 7 + 64 , 7 @ @ class AbbreviationsIncorrect { 
 
 AbbreviationsCorrect anonymousBad = new AbbreviationsCorrect ( ) { 
 
 - int newCustomerID ; / / warn 
 + int newCustomerID ; 
 
 boolean supportsIPv6OnIOS ; / / warn 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 index 8f56437 . . f6a353b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 @ @ - 386 , 7 + 386 , 6 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { 
 abbrStarted = false ; 
 
 final int endIndex = index - 1 ; 
 - / / - 1 as a first capital is usually beginning of next word 
 result = getAbbreviationIfIllegal ( str , beginIndex , endIndex ) ; 
 if ( result ! = null ) { 
 break ; 
 @ @ - 394 , 26 + 393 , 28 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { 
 beginIndex = - 1 ; 
 } 
 } 
 - / / if abbreviation at the end of name and it is not single character ( example : scaleX ) 
 - if ( abbrStarted & & beginIndex ! = str . length ( ) - 1 ) { 
 - final int endIndex = str . length ( ) ; 
 + / / if abbreviation at the end of name ( example : scaleX ) 
 + if ( abbrStarted ) { 
 + final int endIndex = str . length ( ) - 1 ; 
 result = getAbbreviationIfIllegal ( str , beginIndex , endIndex ) ; 
 } 
 return result ; 
 } 
 
 / * * 
 - * Get Abbreviation if it is illegal . 
 + * Get Abbreviation if it is illegal , where { @ code beginIndex } and { @ code endIndex } are 
 + * inclusive indexes of a sequence of consecutive upper - case characters . 
 * @ param str name 
 * @ param beginIndex begin index 
 * @ param endIndex end index 
 - * @ return true is abbreviation is bigger that required and not in ignore list 
 + * @ return the abbreviation if it is bigger than required and not in the 
 + * ignore list , otherwise { @ code null } 
 * / 
 private String getAbbreviationIfIllegal ( String str , int beginIndex , int endIndex ) { 
 String result = null ; 
 final int abbrLength = endIndex - beginIndex ; 
 if ( abbrLength > allowedAbbreviationLength ) { 
 - final String abbr = str . substring ( beginIndex , endIndex ) ; 
 + final String abbr = getAbbreviation ( str , beginIndex , endIndex ) ; 
 if ( ! allowedAbbreviations . contains ( abbr ) ) { 
 result = abbr ; 
 } 
 @ @ - 422 , 6 + 423 , 34 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { 
 } 
 
 / * * 
 + * Gets the abbreviation , where { @ code beginIndex } and { @ code endIndex } are 
 + * inclusive indexes of a sequence of consecutive upper - case characters . 
 + * < p > 
 + * The character at { @ code endIndex } is only included in the abbreviation if 
 + * it is the last character in the string ; otherwise it is usually the first 
 + * capital in the next word . 
 + * < / p > 
 + * < p > 
 + * For example , { @ code getAbbreviation ( " getXMLParser " , 3 , 6 ) } returns " XML " 
 + * ( not " XMLP " ) , and so does { @ code getAbbreviation ( " parseXML " , 5 , 7 ) } . 
 + * < / p > 
 + * @ param str name 
 + * @ param beginIndex begin index 
 + * @ param endIndex end index 
 + * @ return the specified abbreviation 
 + * / 
 + private static String getAbbreviation ( String str , int beginIndex , int endIndex ) { 
 + final String result ; 
 + if ( endIndex = = str . length ( ) - 1 ) { 
 + result = str . substring ( beginIndex ) ; 
 + } 
 + else { 
 + result = str . substring ( beginIndex , endIndex ) ; 
 + } 
 + return result ; 
 + } 
 + 
 + / * * 
 * Gets all the children which are one level below on the current DetailAST 
 * parent node . 
 * @ param node 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 index b8e9cb5 . . 739a896 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 @ @ - 107 , 7 + 107 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends AbstractModuleTestSupport 
 " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , 
 " 39 : " + getWarningMessage ( " marazmaticVARIABLEName " , expectedCapitalCount ) , 
 " 40 : " + getWarningMessage ( " MARAZMATICVariableName " , expectedCapitalCount ) , 
 - " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; 
 @ @ - 212 , 9 + 211 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends AbstractModuleTestSupport 
 " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , 
 " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , 
 " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , 
 - " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , / / not in ignore list 
 - " 59 : " 
 - + getWarningMessage ( " s1erialNUMBER " , expectedCapitalCount ) , / / no ignore for final 
 } ; 
 
 verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ;

NEAREST DIFF:
diff - - git a / src / main / resources / checkstyletask . properties b / src / main / resources / checkstyletask . properties 
 deleted file mode 100644 
 index 5b4093b . . 0000000 
 - - - a / src / main / resources / checkstyletask . properties 
 + + + / dev / null 
 @ @ - 1 + 0 , 0 @ @ 
 - checkstyle = com . puppycrawl . tools . checkstyle . ant . CheckstyleAntTask 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / ant / checkstyletask . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / ant / checkstyletask . properties 
 new file mode 100644 
 index 0000000 . . 5b4093b 
 - - - / dev / null 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / ant / checkstyletask . properties 
 @ @ - 0 , 0 + 1 @ @ 
 + checkstyle = com . puppycrawl . tools . checkstyle . ant . CheckstyleAntTask 
 diff - - git a / src / xdocs / anttask . xml . vm b / src / xdocs / anttask . xml . vm 
 index e853c56 . . 3dcb108 100644 
 - - - a / src / xdocs / anttask . xml . vm 
 + + + b / src / xdocs / anttask . xml . vm 
 @ @ - 49 , 7 + 49 , 7 @ @ 
 < / p > 
 
 < source > 
 - & lt ; taskdef resource = & quot ; checkstyletask . properties & quot ; 
 + & lt ; taskdef resource = & quot ; com / puppycrawl / tools / checkstyle / ant / checkstyle - ant - task . properties & quot ; 
 classpath = & quot ; / path / to / checkstyle - $ { projectVersion } - all . jar & quot ; / & gt ; 
 < / source > 
 
 @ @ - 60 , 7 + 60 , 7 @ @ 
 < / p > 
 
 < source > 
 - & lt ; taskdef resource = & quot ; checkstyletask . properties & quot ; / & gt ; 
 + & lt ; taskdef resource = & quot ; com / puppycrawl / tools / checkstyle / ant / checkstyle - ant - task . properties & quot ; / & gt ; 
 < / source > 
 
 < p >
