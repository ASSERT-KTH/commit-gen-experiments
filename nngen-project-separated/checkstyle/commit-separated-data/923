BLEU SCORE: 0.06054630691682828

TEST MSG: Issue # 3848 : Increase code coverage of RequireThisCheck
GENERATED MSG: Issue # 3334 : fixed RequireThis when can ' t find end block token

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index dedf088 . . 15658ef 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1437 , 12 + 1437 , 6 @ @ <nl> < branchRate > 79 < / branchRate > <nl> < lineRate > 97 < / lineRate > <nl> < / regex > <nl> - < ! - - Until https : / / github . com / checkstyle / checkstyle / issues / 3848 - - > <nl> - < regex > <nl> - < pattern > com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck < / pattern > <nl> - < branchRate > 99 < / branchRate > <nl> - < lineRate > 100 < / lineRate > <nl> - < / regex > <nl> < / regexes > <nl> < / check > <nl> < instrumentation > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index cdc0c05 . . f44a4e1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 428 , 7 + 428 , 8 @ @ public class RequireThisCheck extends AbstractCheck { <nl> * / <nl> private static boolean isAnonymousClassDef ( DetailAST ast ) { <nl> final DetailAST lastChild = ast . getLastChild ( ) ; <nl> - return lastChild ! = null & & lastChild . getType ( ) = = TokenTypes . OBJBLOCK ; <nl> + return lastChild ! = null <nl> + & & lastChild . getType ( ) = = TokenTypes . OBJBLOCK ; <nl> } <nl> <nl> / * * <nl> @ @ - 800 , 8 + 801 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> private AbstractFrame getMethodWithoutThis ( DetailAST ast ) { <nl> AbstractFrame result = null ; <nl> final AbstractFrame frame = findFrame ( ast , true ) ; <nl> - if ( frame ! = null <nl> - & & ! validateOnlyOverlapping <nl> + if ( ! validateOnlyOverlapping <nl> & & ( ( ClassFrame ) frame ) . hasInstanceMethod ( ast ) <nl> & & ! ( ( ClassFrame ) frame ) . hasStaticMethod ( ast ) ) { <nl> result = frame ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index 1b83715 . . ec08a33 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 252 , 4 + 252 , 13 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , getPath ( " InputRequireThisStatic . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testMethodReferencess ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( RequireThisCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 15 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " tags " , " " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputRequireThisMetodReferences . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThisMetodReferences . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThisMetodReferences . java <nl> new file mode 100644 <nl> index 0000000 . . 779a56c <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThisMetodReferences . java <nl> @ @ - 0 , 0 + 1 , 23 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> + import java . util . Set ; <nl> + import java . util . TreeSet ; <nl> + import java . util . stream . Collectors ; <nl> + <nl> + public class InputRequireThisMetodReferences { <nl> + private Set < String > tags = Collections . unmodifiableSortedSet ( <nl> + Arrays . stream ( new String [ ] { " br " , " li " , " dt " , " dd " , " hr " , " img " , " p " , " td " , " tr " , " th " , } ) <nl> + . collect ( Collectors . toCollection ( TreeSet : : new ) ) ) ; <nl> + <nl> + public InputRequireThisMetodReferences ( Set < String > tags ) { <nl> + tags = tags ; / / violation <nl> + } <nl> + <nl> + public InputRequireThisMetodReferences ( ) { <nl> + this . tags = Arrays . stream ( <nl> + new String [ ] { " br " , " li " , " dt " , " dd " , " hr " , " img " , " p " , " td " , " tr " , " th " , } ) <nl> + . collect ( Collectors . toCollection ( TreeSet : : new ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm <nl> index e43ddcd . . 293fd84 100644 <nl> - - - a / src / xdocs / writingjavadocchecks . xml . vm <nl> + + + b / src / xdocs / writingjavadocchecks . xml . vm <nl> @ @ - 287 , 6 + 287 , 13 @ @ class MyCheck extends AbstractJavadocCheck { <nl> Void HTML elements : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , <nl> & lt ; HR & gt ; , & lt ; IMG & gt ; , & lt ; INPUT & gt ; , & lt ; ISINDEX & gt ; , & lt ; LINK & gt ; , & lt ; META & gt ; , & lt ; PARAM & gt ; . <nl> < / p > <nl> + <nl> + < p > <nl> + To make Checkstyle support HTML5 tags whose end tag is optional and HTML5 void elements we should update Javadoc Parser <nl> + bacause each element that breaks < a href = " # XHTML - style _ rules " > XHTML - style rules < / a > have to be defined in Javadoc grammar . <nl> + In future we should update Javadoc grammar if those tag lists extend ( new tags , new HTML standard , etc . ) . <nl> + < / p > <nl> + <nl> < p > <nl> If Checkstyle meets unknown tag ( for example HTML5 tag ) <nl> it doesn ' t fail and parses this tag as < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # HTML _ TAG " > HTML _ TAG < / a > Javadoc token type .

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index dedf088 . . 15658ef 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1437 , 12 + 1437 , 6 @ @ 
 < branchRate > 79 < / branchRate > 
 < lineRate > 97 < / lineRate > 
 < / regex > 
 - < ! - - Until https : / / github . com / checkstyle / checkstyle / issues / 3848 - - > 
 - < regex > 
 - < pattern > com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck < / pattern > 
 - < branchRate > 99 < / branchRate > 
 - < lineRate > 100 < / lineRate > 
 - < / regex > 
 < / regexes > 
 < / check > 
 < instrumentation > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index cdc0c05 . . f44a4e1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 428 , 7 + 428 , 8 @ @ public class RequireThisCheck extends AbstractCheck { 
 * / 
 private static boolean isAnonymousClassDef ( DetailAST ast ) { 
 final DetailAST lastChild = ast . getLastChild ( ) ; 
 - return lastChild ! = null & & lastChild . getType ( ) = = TokenTypes . OBJBLOCK ; 
 + return lastChild ! = null 
 + & & lastChild . getType ( ) = = TokenTypes . OBJBLOCK ; 
 } 
 
 / * * 
 @ @ - 800 , 8 + 801 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 private AbstractFrame getMethodWithoutThis ( DetailAST ast ) { 
 AbstractFrame result = null ; 
 final AbstractFrame frame = findFrame ( ast , true ) ; 
 - if ( frame ! = null 
 - & & ! validateOnlyOverlapping 
 + if ( ! validateOnlyOverlapping 
 & & ( ( ClassFrame ) frame ) . hasInstanceMethod ( ast ) 
 & & ! ( ( ClassFrame ) frame ) . hasStaticMethod ( ast ) ) { 
 result = frame ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index 1b83715 . . ec08a33 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 252 , 4 + 252 , 13 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , getPath ( " InputRequireThisStatic . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testMethodReferencess ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( RequireThisCheck . class ) ; 
 + final String [ ] expected = { 
 + " 15 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " tags " , " " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputRequireThisMetodReferences . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThisMetodReferences . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThisMetodReferences . java 
 new file mode 100644 
 index 0000000 . . 779a56c 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThisMetodReferences . java 
 @ @ - 0 , 0 + 1 , 23 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . Collections ; 
 + import java . util . Set ; 
 + import java . util . TreeSet ; 
 + import java . util . stream . Collectors ; 
 + 
 + public class InputRequireThisMetodReferences { 
 + private Set < String > tags = Collections . unmodifiableSortedSet ( 
 + Arrays . stream ( new String [ ] { " br " , " li " , " dt " , " dd " , " hr " , " img " , " p " , " td " , " tr " , " th " , } ) 
 + . collect ( Collectors . toCollection ( TreeSet : : new ) ) ) ; 
 + 
 + public InputRequireThisMetodReferences ( Set < String > tags ) { 
 + tags = tags ; / / violation 
 + } 
 + 
 + public InputRequireThisMetodReferences ( ) { 
 + this . tags = Arrays . stream ( 
 + new String [ ] { " br " , " li " , " dt " , " dd " , " hr " , " img " , " p " , " td " , " tr " , " th " , } ) 
 + . collect ( Collectors . toCollection ( TreeSet : : new ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm 
 index e43ddcd . . 293fd84 100644 
 - - - a / src / xdocs / writingjavadocchecks . xml . vm 
 + + + b / src / xdocs / writingjavadocchecks . xml . vm 
 @ @ - 287 , 6 + 287 , 13 @ @ class MyCheck extends AbstractJavadocCheck { 
 Void HTML elements : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , 
 & lt ; HR & gt ; , & lt ; IMG & gt ; , & lt ; INPUT & gt ; , & lt ; ISINDEX & gt ; , & lt ; LINK & gt ; , & lt ; META & gt ; , & lt ; PARAM & gt ; . 
 < / p > 
 + 
 + < p > 
 + To make Checkstyle support HTML5 tags whose end tag is optional and HTML5 void elements we should update Javadoc Parser 
 + bacause each element that breaks < a href = " # XHTML - style _ rules " > XHTML - style rules < / a > have to be defined in Javadoc grammar . 
 + In future we should update Javadoc grammar if those tag lists extend ( new tags , new HTML standard , etc . ) . 
 + < / p > 
 + 
 < p > 
 If Checkstyle meets unknown tag ( for example HTML5 tag ) 
 it doesn ' t fail and parses this tag as < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # HTML _ TAG " > HTML _ TAG < / a > Javadoc token type .
