BLEU SCORE: 0.017928600661603712

TEST MSG: Issue # 5695 : fix javadoc for MismatchStrategy
GENERATED MSG: Fixed javadoc issues ( strange that project checker didn ' t catch it during verify phase )

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / MismatchStrategy . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / MismatchStrategy . java <nl> index 896918a . . 0f71f65 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / MismatchStrategy . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / MismatchStrategy . java <nl> @ @ - 20 , 7 + 20 , 8 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> <nl> / * * <nl> - * Represents the strategy for checking rules inside ImportControl . <nl> + * Represents the strategy when none of the rules ( allow / disallow tags ) match <nl> + * inside subpackage and import - control tag of ImportControl config . <nl> * @ author Timur Tibeyev <nl> * @ see ImportControlCheck <nl> * /
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheck . java <nl> index 46f4ab4 . . 4e8243b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheck . java <nl> @ @ - 68 , 6 + 68 , 7 @ @ public class TypeNameCheck <nl> return new int [ ] { TokenTypes . CLASS _ DEF , <nl> TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . ENUM _ DEF , <nl> + TokenTypes . ANNOTATION _ DEF , <nl> } ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java <nl> index c5ecd71 . . e8fe1d2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class TypeNameCheckTest <nl> extends BaseCheckTestSupport <nl> @ @ - 69 , 6 + 70 , 8 @ @ public class TypeNameCheckTest <nl> TypeNameCheck . DEFAULT _ PATTERN ) , <nl> buildMesssage ( 7 , 17 , " inputHeaderEnum " , <nl> TypeNameCheck . DEFAULT _ PATTERN ) , <nl> + buildMesssage ( 9 , 23 , " inputHeaderAnnotation " , <nl> + TypeNameCheck . DEFAULT _ PATTERN ) , <nl> } ; <nl> verify ( checkConfig , inputFilename , expected ) ; <nl> } <nl> @ @ - 79 , 7 + 82 , 7 @ @ public class TypeNameCheckTest <nl> { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( TypeNameCheck . class ) ; <nl> - checkConfig . addAttribute ( " tokens " , " CLASS _ DEF " ) ; <nl> + checkConfig . addAttribute ( " tokens " , TokenTypes . getTokenName ( TokenTypes . CLASS _ DEF ) ) ; <nl> final String [ ] expected = { <nl> buildMesssage ( 3 , 7 , " inputHeaderClass " , <nl> TypeNameCheck . DEFAULT _ PATTERN ) , <nl> @ @ - 93 , 7 + 96 , 7 @ @ public class TypeNameCheckTest <nl> { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( TypeNameCheck . class ) ; <nl> - checkConfig . addAttribute ( " tokens " , " INTERFACE _ DEF " ) ; <nl> + checkConfig . addAttribute ( " tokens " , TokenTypes . getTokenName ( TokenTypes . INTERFACE _ DEF ) ) ; <nl> final String [ ] expected = { <nl> buildMesssage ( 5 , 22 , " inputHeaderInterface " , <nl> TypeNameCheck . DEFAULT _ PATTERN ) , <nl> @ @ - 107 , 7 + 110 , 7 @ @ public class TypeNameCheckTest <nl> { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( TypeNameCheck . class ) ; <nl> - checkConfig . addAttribute ( " tokens " , " ENUM _ DEF " ) ; <nl> + checkConfig . addAttribute ( " tokens " , TokenTypes . getTokenName ( TokenTypes . ENUM _ DEF ) ) ; <nl> final String [ ] expected = { <nl> buildMesssage ( 7 , 17 , " inputHeaderEnum " , <nl> TypeNameCheck . DEFAULT _ PATTERN ) , <nl> @ @ - 115 , 6 + 118 , 20 @ @ public class TypeNameCheckTest <nl> verify ( checkConfig , inputFilename , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testAnnotationSpecific ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( TypeNameCheck . class ) ; <nl> + checkConfig . addAttribute ( " tokens " , TokenTypes . getTokenName ( TokenTypes . ANNOTATION _ DEF ) ) ; <nl> + final String [ ] expected = { <nl> + buildMesssage ( 9 , 23 , " inputHeaderAnnotation " , <nl> + TypeNameCheck . DEFAULT _ PATTERN ) , <nl> + } ; <nl> + verify ( checkConfig , inputFilename , expected ) ; <nl> + } <nl> + <nl> private String buildMesssage ( int lineNumber , int colNumber , String name , <nl> String pattern ) <nl> { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java <nl> index add423b . . cbcfac9 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java <nl> @ @ - 6 , 4 + 6 , 6 @ @ class inputHeaderClass { <nl> <nl> public enum inputHeaderEnum { one , two } ; <nl> <nl> + public @ interface inputHeaderAnnotation { } ; <nl> + <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / MismatchStrategy . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / MismatchStrategy . java 
 index 896918a . . 0f71f65 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / MismatchStrategy . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / MismatchStrategy . java 
 @ @ - 20 , 7 + 20 , 8 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . imports ; 
 
 / * * 
 - * Represents the strategy for checking rules inside ImportControl . 
 + * Represents the strategy when none of the rules ( allow / disallow tags ) match 
 + * inside subpackage and import - control tag of ImportControl config . 
 * @ author Timur Tibeyev 
 * @ see ImportControlCheck 
 * /

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheck . java 
 index 46f4ab4 . . 4e8243b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheck . java 
 @ @ - 68 , 6 + 68 , 7 @ @ public class TypeNameCheck 
 return new int [ ] { TokenTypes . CLASS _ DEF , 
 TokenTypes . INTERFACE _ DEF , 
 TokenTypes . ENUM _ DEF , 
 + TokenTypes . ANNOTATION _ DEF , 
 } ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java 
 index c5ecd71 . . e8fe1d2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class TypeNameCheckTest 
 extends BaseCheckTestSupport 
 @ @ - 69 , 6 + 70 , 8 @ @ public class TypeNameCheckTest 
 TypeNameCheck . DEFAULT _ PATTERN ) , 
 buildMesssage ( 7 , 17 , " inputHeaderEnum " , 
 TypeNameCheck . DEFAULT _ PATTERN ) , 
 + buildMesssage ( 9 , 23 , " inputHeaderAnnotation " , 
 + TypeNameCheck . DEFAULT _ PATTERN ) , 
 } ; 
 verify ( checkConfig , inputFilename , expected ) ; 
 } 
 @ @ - 79 , 7 + 82 , 7 @ @ public class TypeNameCheckTest 
 { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( TypeNameCheck . class ) ; 
 - checkConfig . addAttribute ( " tokens " , " CLASS _ DEF " ) ; 
 + checkConfig . addAttribute ( " tokens " , TokenTypes . getTokenName ( TokenTypes . CLASS _ DEF ) ) ; 
 final String [ ] expected = { 
 buildMesssage ( 3 , 7 , " inputHeaderClass " , 
 TypeNameCheck . DEFAULT _ PATTERN ) , 
 @ @ - 93 , 7 + 96 , 7 @ @ public class TypeNameCheckTest 
 { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( TypeNameCheck . class ) ; 
 - checkConfig . addAttribute ( " tokens " , " INTERFACE _ DEF " ) ; 
 + checkConfig . addAttribute ( " tokens " , TokenTypes . getTokenName ( TokenTypes . INTERFACE _ DEF ) ) ; 
 final String [ ] expected = { 
 buildMesssage ( 5 , 22 , " inputHeaderInterface " , 
 TypeNameCheck . DEFAULT _ PATTERN ) , 
 @ @ - 107 , 7 + 110 , 7 @ @ public class TypeNameCheckTest 
 { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( TypeNameCheck . class ) ; 
 - checkConfig . addAttribute ( " tokens " , " ENUM _ DEF " ) ; 
 + checkConfig . addAttribute ( " tokens " , TokenTypes . getTokenName ( TokenTypes . ENUM _ DEF ) ) ; 
 final String [ ] expected = { 
 buildMesssage ( 7 , 17 , " inputHeaderEnum " , 
 TypeNameCheck . DEFAULT _ PATTERN ) , 
 @ @ - 115 , 6 + 118 , 20 @ @ public class TypeNameCheckTest 
 verify ( checkConfig , inputFilename , expected ) ; 
 } 
 
 + @ Test 
 + public void testAnnotationSpecific ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( TypeNameCheck . class ) ; 
 + checkConfig . addAttribute ( " tokens " , TokenTypes . getTokenName ( TokenTypes . ANNOTATION _ DEF ) ) ; 
 + final String [ ] expected = { 
 + buildMesssage ( 9 , 23 , " inputHeaderAnnotation " , 
 + TypeNameCheck . DEFAULT _ PATTERN ) , 
 + } ; 
 + verify ( checkConfig , inputFilename , expected ) ; 
 + } 
 + 
 private String buildMesssage ( int lineNumber , int colNumber , String name , 
 String pattern ) 
 { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java 
 index add423b . . cbcfac9 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java 
 @ @ - 6 , 4 + 6 , 6 @ @ class inputHeaderClass { 
 
 public enum inputHeaderEnum { one , two } ; 
 
 + public @ interface inputHeaderAnnotation { } ; 
 + 
 }
