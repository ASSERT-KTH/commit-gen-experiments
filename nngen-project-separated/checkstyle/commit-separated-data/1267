BLEU SCORE: 0.08532663385913801

TEST MSG: Issue # 1487 : Improve code coverage of CheckstyleAntTask
GENERATED MSG: huge refactoring for CLI Main class . Issue # 596

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 8b123ae . . f716d62 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 130 , 7 + 130 , 7 @ @ <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " AutomaticBean \ . java " / > <nl> < ! - - they are aggregators of logic , usage a several of classes are ok - - > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " ( Checker | TreeWalker | Main | CheckstyleAntTask | AbstractJavadocCheck ) \ . java " / > <nl> - < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | XDocsPagesTest ) \ . java " / > <nl> + < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | XDocsPagesTest | CheckstyleAntTaskTest ) \ . java " / > <nl> < ! - - a lot of GUI elements is OK - - > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " ( JTreeTable | MainFrame ) \ . java " / > <nl> <nl> diff - - git a / pom . xml b / pom . xml <nl> index fc4d426 . . 8cdddd7 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1807 , 11 + 1807 , 15 @ @ <nl> < branchRate > 75 < / branchRate > <nl> < lineRate > 92 < / lineRate > <nl> < / regex > <nl> + < regex > <nl> + < pattern > com . puppycrawl . tools . checkstyle . ant . CheckstyleAntTask < / pattern > <nl> + < branchRate > 97 < / branchRate > <nl> + < lineRate > 100 < / lineRate > <nl> + < / regex > <nl> < / regexes > <nl> < / check > <nl> < instrumentation > <nl> < excludes > <nl> - < exclude > com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask * . class < / exclude > <nl> < exclude > com / puppycrawl / tools / checkstyle / grammars / javadoc / * . class < / exclude > <nl> < exclude > com / puppycrawl / tools / checkstyle / gui / * . class < / exclude > <nl> < ! - - deprecated classes - - > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> index 38f0a5b . . b9d22a9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> @ @ - 115 , 7 + 115 , 7 @ @ public class CheckstyleAntTask extends Task { <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> <nl> / * * <nl> - * Tells this task to set the named property to " true " when there <nl> + * Tells this task to write failure message to the named property when there <nl> * is a violation . <nl> * @ param propertyName the name of the property to set <nl> * in the event of an failure . <nl> @ @ - 540 , 7 + 540 , 7 @ @ public class CheckstyleAntTask extends Task { <nl> * / <nl> public static class Formatter { <nl> / * * The formatter type . * / <nl> - private FormatterType formatterType ; <nl> + private FormatterType type ; <nl> / * * The file to output to . * / <nl> private File toFile ; <nl> / * * Whether or not the write to the named file . * / <nl> @ @ - 551 , 12 + 551 , 7 @ @ public class CheckstyleAntTask extends Task { <nl> * @ param type the type <nl> * / <nl> public void setType ( FormatterType type ) { <nl> - final String val = type . getValue ( ) ; <nl> - if ( ! E _ XML . equals ( val ) & & ! E _ PLAIN . equals ( val ) ) { <nl> - throw new BuildException ( " Invalid formatter type : " + val ) ; <nl> - } <nl> - <nl> - formatterType = type ; <nl> + this . type = type ; <nl> } <nl> <nl> / * * <nl> @ @ - 582 , 8 + 577 , 8 @ @ public class CheckstyleAntTask extends Task { <nl> * @ throws IOException if an error occurs <nl> * / <nl> public AuditListener createListener ( Task task ) throws IOException { <nl> - if ( formatterType ! = null <nl> - & & E _ XML . equals ( formatterType . getValue ( ) ) ) { <nl> + if ( type ! = null <nl> + & & E _ XML . equals ( type . getValue ( ) ) ) { <nl> return createXmlLogger ( task ) ; <nl> } <nl> return createDefaultLogger ( task ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> new file mode 100644 <nl> index 0000000 . . 3ebe003 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> @ @ - 0 , 0 + 1 , 432 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . ant ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . fail ; <nl> + import static org . mockito . Mockito . when ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . net . URL ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + <nl> + import org . apache . commons . io . FileUtils ; <nl> + import org . apache . tools . ant . BuildException ; <nl> + import org . apache . tools . ant . Project ; <nl> + import org . apache . tools . ant . types . FileSet ; <nl> + import org . apache . tools . ant . types . Path ; <nl> + import org . apache . tools . ant . types . Reference ; <nl> + import org . junit . Test ; <nl> + import org . powermock . api . mockito . PowerMockito ; <nl> + <nl> + import com . google . common . collect . Lists ; <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> + import com . puppycrawl . tools . checkstyle . XMLLogger ; <nl> + <nl> + public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> + <nl> + private static final String FLAWLESS _ INPUT = " ant / InputCheckstyleAntTaskFlawless . java " ; <nl> + private static final String VIOLATED _ INPUT = " ant / InputCheckstyleAntTaskError . java " ; <nl> + private static final String CONFIG _ FILE = " ant / ant _ task _ test _ checks . xml " ; <nl> + private static final String NOT _ EXISTING _ FILE = " target / not _ existing . xml " ; <nl> + private static final String FAILURE _ PROPERTY _ VALUE = " myValue " ; <nl> + <nl> + private CheckstyleAntTask getCheckstyleAntTask ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; <nl> + antTask . setConfig ( new File ( getPath ( CONFIG _ FILE ) ) ) ; <nl> + antTask . setProject ( new Project ( ) ) ; <nl> + return antTask ; <nl> + } <nl> + <nl> + @ Test <nl> + public final void testDefaultFlawless ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; <nl> + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + antTask . execute ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public final void testFileSet ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; <nl> + final FileSet examinationFileSet = new FileSet ( ) ; <nl> + examinationFileSet . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + antTask . addFileset ( examinationFileSet ) ; <nl> + antTask . execute ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public final void testNoConfigFile ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; <nl> + antTask . setProject ( new Project ( ) ) ; <nl> + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + try { <nl> + antTask . execute ( ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( BuildException ex ) { <nl> + assertEquals ( " Must specify ' config ' . " , ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public final void testNonExistingConfig ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; <nl> + antTask . setConfig ( new File ( getPath ( NOT _ EXISTING _ FILE ) ) ) ; <nl> + antTask . setProject ( new Project ( ) ) ; <nl> + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + try { <nl> + antTask . execute ( ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( BuildException ex ) { <nl> + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create a Checker : configLocation " ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public final void testEmptyConfigFile ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; <nl> + antTask . setConfig ( new File ( getPath ( " ant / empty _ config . xml " ) ) ) ; <nl> + antTask . setProject ( new Project ( ) ) ; <nl> + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + try { <nl> + antTask . execute ( ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( BuildException ex ) { <nl> + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create a Checker : configLocation " ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public final void testNoFile ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; <nl> + try { <nl> + antTask . execute ( ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( BuildException ex ) { <nl> + assertEquals ( " Must specify at least one of ' file ' or nested ' fileset ' . " , <nl> + ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public final void testMaxWarningExeeded ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; <nl> + antTask . setFile ( new File ( getPath ( " ant / InputCheckstyleAntTaskWarning . java " ) ) ) ; <nl> + antTask . setMaxWarnings ( 0 ) ; <nl> + try { <nl> + antTask . execute ( ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( BuildException ex ) { <nl> + assertEquals ( " Got 0 errors and 1 warnings . " , ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public final void testMaxErrors ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; <nl> + antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; <nl> + antTask . setMaxErrors ( 2 ) ; <nl> + antTask . execute ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public final void testFailureProperty ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; <nl> + antTask . setConfig ( new File ( getPath ( CONFIG _ FILE ) ) ) ; <nl> + antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; <nl> + <nl> + final Project project = new Project ( ) ; <nl> + final String failurePropertyName = " myProperty " ; <nl> + project . setProperty ( failurePropertyName , FAILURE _ PROPERTY _ VALUE ) ; <nl> + <nl> + antTask . setProject ( project ) ; <nl> + antTask . setFailureProperty ( failurePropertyName ) ; <nl> + try { <nl> + antTask . execute ( ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( BuildException ex ) { <nl> + final Map < String , Object > hashtable = project . getProperties ( ) ; <nl> + final Object propertyValue = hashtable . get ( failurePropertyName ) ; <nl> + assertEquals ( " Got 2 errors and 0 warnings . " , propertyValue ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public final void testOverrideProperty ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; <nl> + antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; <nl> + final CheckstyleAntTask . Property property = new CheckstyleAntTask . Property ( ) ; <nl> + property . setKey ( " lineLength . severity " ) ; <nl> + property . setValue ( " ignore " ) ; <nl> + antTask . addProperty ( property ) ; <nl> + antTask . execute ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public final void testOmitIgnoredModules ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; <nl> + antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; <nl> + antTask . setFailOnViolation ( false ) ; <nl> + antTask . setOmitIgnoredModules ( false ) ; <nl> + <nl> + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; <nl> + final File outputFile = new File ( " target / ant _ task _ plain _ output . txt " ) ; <nl> + formatter . setTofile ( outputFile ) ; <nl> + final CheckstyleAntTask . FormatterType formatterType = new CheckstyleAntTask . FormatterType ( ) ; <nl> + formatterType . setValue ( " plain " ) ; <nl> + formatter . setType ( formatterType ) ; <nl> + formatter . createListener ( null ) ; <nl> + <nl> + antTask . addFormatter ( formatter ) ; <nl> + antTask . execute ( ) ; <nl> + <nl> + final List < String > output = FileUtils . readLines ( outputFile ) ; <nl> + assertEquals ( " Starting audit . . . " , output . get ( 0 ) ) ; <nl> + assertTrue ( output . get ( 1 ) . startsWith ( " [ WARN ] " ) ) ; <nl> + assertTrue ( output . get ( 1 ) . endsWith ( " InputCheckstyleAntTaskError . java : 4 : " <nl> + + " @ incomplete = Some javadoc [ WriteTag ] " ) ) ; <nl> + assertTrue ( output . get ( 2 ) . startsWith ( " [ ERROR ] " ) ) ; <nl> + assertTrue ( output . get ( 2 ) . endsWith ( " InputCheckstyleAntTaskError . java : 7 : " <nl> + + " Line is longer than 70 characters ( found 80 ) . [ LineLength ] " ) ) ; <nl> + assertTrue ( output . get ( 3 ) . startsWith ( " [ ERROR ] " ) ) ; <nl> + assertTrue ( output . get ( 3 ) . endsWith ( " InputCheckstyleAntTaskError . java : 9 : " <nl> + + " Line is longer than 70 characters ( found 81 ) . [ LineLength ] " ) ) ; <nl> + assertEquals ( " Audit done . " , output . get ( 4 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public final void testConfigurationByUrl ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; <nl> + antTask . setProject ( new Project ( ) ) ; <nl> + final URL url = new File ( getPath ( CONFIG _ FILE ) ) . toURI ( ) . toURL ( ) ; <nl> + antTask . setConfigURL ( url ) ; <nl> + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + antTask . execute ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public final void testSimultaneousConfiguration ( ) throws IOException { <nl> + CheckstyleAntTask antTask ; <nl> + final File file = new File ( getPath ( CONFIG _ FILE ) ) ; <nl> + final URL url = file . toURI ( ) . toURL ( ) ; <nl> + final String expected = <nl> + " Attributes ' config ' and ' configURL ' must not be set at the same time " ; <nl> + try { <nl> + antTask = new CheckstyleAntTask ( ) ; <nl> + antTask . setConfigUrl ( url ) ; <nl> + antTask . setConfig ( file ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( BuildException ex ) { <nl> + assertEquals ( expected , ex . getMessage ( ) ) ; <nl> + } <nl> + try { <nl> + antTask = new CheckstyleAntTask ( ) ; <nl> + antTask . setConfig ( file ) ; <nl> + antTask . setConfigUrl ( url ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( BuildException ex ) { <nl> + assertEquals ( expected , ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public final void testSetPropertiesFile ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; <nl> + antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; <nl> + antTask . setProperties ( new File ( getPath ( " ant / checkstyleAntTest . properties " ) ) ) ; <nl> + antTask . execute ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public final void testSetPropertiesNonExistingFile ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; <nl> + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + antTask . setProperties ( new File ( getPath ( NOT _ EXISTING _ FILE ) ) ) ; <nl> + try { <nl> + antTask . execute ( ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( BuildException ex ) { <nl> + assertTrue ( ex . getMessage ( ) . startsWith ( " Error loading Properties file " ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public final void testXmlOutput ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; <nl> + antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; <nl> + antTask . setFailOnViolation ( false ) ; <nl> + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; <nl> + final File outputFile = new File ( " target / log . xml " ) ; <nl> + formatter . setTofile ( outputFile ) ; <nl> + final CheckstyleAntTask . FormatterType formatterType = new CheckstyleAntTask . FormatterType ( ) ; <nl> + formatterType . setValue ( " xml " ) ; <nl> + formatter . setType ( formatterType ) ; <nl> + antTask . addFormatter ( formatter ) ; <nl> + antTask . execute ( ) ; <nl> + <nl> + final List < String > expected = FileUtils . readLines ( <nl> + new File ( getPath ( " ant / ant _ task _ xml _ output . xml " ) ) ) ; <nl> + final List < String > actual = FileUtils . readLines ( outputFile ) ; <nl> + for ( int i = 0 ; i < expected . size ( ) ; i + + ) { <nl> + final String line = expected . get ( i ) ; <nl> + if ( ! line . startsWith ( " < checkstyle version " ) & & ! line . startsWith ( " < file " ) ) { <nl> + assertEquals ( line , actual . get ( i ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public final void testCreateListenerException ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; <nl> + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; <nl> + final File outputFile = new File ( " target / " ) ; <nl> + formatter . setTofile ( outputFile ) ; <nl> + antTask . addFormatter ( formatter ) ; <nl> + try { <nl> + antTask . execute ( ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( BuildException ex ) { <nl> + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create listeners : formatters " ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testSetInvalidType ( ) { <nl> + final CheckstyleAntTask . FormatterType formatterType = new CheckstyleAntTask . FormatterType ( ) ; <nl> + try { <nl> + formatterType . setValue ( " foo " ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( BuildException ex ) { <nl> + assertEquals ( " foo is not a legal value for this attribute " , ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public final void testSetClassName ( ) { <nl> + final String customName = " customName " ; <nl> + final CheckstyleAntTask . Listener listener = new CheckstyleAntTask . Listener ( ) ; <nl> + listener . setClassname ( customName ) ; <nl> + assertEquals ( customName , listener . getClassname ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSetFileValueByFile ( ) throws IOException { <nl> + final String filename = getPath ( " ant / checkstyleAntTest . properties " ) ; <nl> + final CheckstyleAntTask . Property property = new CheckstyleAntTask . Property ( ) ; <nl> + property . setFile ( new File ( filename ) ) ; <nl> + assertEquals ( property . getValue ( ) , new File ( filename ) . getAbsolutePath ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDefaultLoggerListener ( ) throws IOException { <nl> + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; <nl> + formatter . setUseFile ( false ) ; <nl> + assertTrue ( formatter . createListener ( null ) instanceof DefaultLogger ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDefaultLoggerListenerWithToFile ( ) throws IOException { <nl> + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; <nl> + formatter . setUseFile ( false ) ; <nl> + formatter . setTofile ( new File ( " target / " ) ) ; <nl> + assertTrue ( formatter . createListener ( null ) instanceof DefaultLogger ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testXmlLoggerListener ( ) throws IOException { <nl> + final CheckstyleAntTask . FormatterType formatterType = new CheckstyleAntTask . FormatterType ( ) ; <nl> + formatterType . setValue ( " xml " ) ; <nl> + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; <nl> + formatter . setType ( formatterType ) ; <nl> + formatter . setUseFile ( false ) ; <nl> + assertTrue ( formatter . createListener ( null ) instanceof XMLLogger ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testXmlLoggerListenerWithToFile ( ) throws IOException { <nl> + final CheckstyleAntTask . FormatterType formatterType = new CheckstyleAntTask . FormatterType ( ) ; <nl> + formatterType . setValue ( " xml " ) ; <nl> + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; <nl> + formatter . setType ( formatterType ) ; <nl> + formatter . setUseFile ( false ) ; <nl> + formatter . setTofile ( new File ( " target / " ) ) ; <nl> + assertTrue ( formatter . createListener ( null ) instanceof XMLLogger ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSetClasspath ( ) { <nl> + / / temporary fake test <nl> + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; <nl> + final Project project = new Project ( ) ; <nl> + antTask . setClasspath ( new Path ( project , " / " ) ) ; <nl> + antTask . setClasspath ( new Path ( project , " / checkstyle " ) ) ; <nl> + antTask . setClasspathRef ( new Reference ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSetClasspathRef ( ) { <nl> + / / temporary fake test <nl> + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; <nl> + antTask . setClasspathRef ( new Reference ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCheckerException ( ) throws IOException { <nl> + final CheckstyleAntTask antTask = new CheckstyleAntTaskStub ( ) ; <nl> + antTask . setConfig ( new File ( getPath ( CONFIG _ FILE ) ) ) ; <nl> + antTask . setProject ( new Project ( ) ) ; <nl> + antTask . setFile ( new File ( " " ) ) ; <nl> + try { <nl> + antTask . execute ( ) ; <nl> + fail ( " Exception is expected " ) ; <nl> + } <nl> + catch ( BuildException ex ) { <nl> + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to process files : " ) ) ; <nl> + } <nl> + } <nl> + <nl> + private static class CheckstyleAntTaskStub extends CheckstyleAntTask { <nl> + @ Override <nl> + protected List < File > scanFileSets ( ) { <nl> + final File mock = PowerMockito . mock ( File . class ) ; <nl> + / / Assume that I / O error is happened when we try to invoke ' lastModified ( ) ' method . <nl> + final Exception expectedError = new RuntimeException ( " " ) ; <nl> + when ( mock . lastModified ( ) ) . thenThrow ( expectedError ) ; <nl> + final List < File > list = Lists . newArrayList ( ) ; <nl> + list . add ( mock ) ; <nl> + return list ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskError . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskError . java <nl> new file mode 100644 <nl> index 0000000 . . c41171e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskError . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package com . puppycrawl . tools . checkstyle . ant ; <nl> + <nl> + / * * <nl> + * @ incomplete Some javadoc <nl> + * / <nl> + public final class InputCheckstyleAntTaskError { <nl> + private static final String FOO = " This line is longer then 70 characters . " ; <nl> + <nl> + private static final String FOOO = " This line is longer then 70 characters . " ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskFlawless . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskFlawless . java <nl> new file mode 100644 <nl> index 0000000 . . 28d107c <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskFlawless . java <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + package com . puppycrawl . tools . checkstyle . ant ; <nl> + <nl> + public final class InputCheckstyleAntTaskFlawless { <nl> + private String foo = " A short line " ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskWarning . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskWarning . java <nl> new file mode 100644 <nl> index 0000000 . . 34eb959 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskWarning . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + package com . puppycrawl . tools . checkstyle . ant ; <nl> + <nl> + public final class InputCheckstyleAntTaskWarning { <nl> + int foo ; <nl> + int foo1 ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / ant _ task _ test _ checks . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / ant _ task _ test _ checks . xml <nl> new file mode 100644 <nl> index 0000000 . . 4f6bfb9 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / ant _ task _ test _ checks . xml <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + < ? xml version = " 1 . 0 " ? > <nl> + < ! DOCTYPE module PUBLIC <nl> + " - / / Puppy Crawl / / DTD Check Configuration 1 . 3 / / EN " <nl> + " http : / / www . puppycrawl . com / dtds / configuration _ 1 _ 3 . dtd " > <nl> + <nl> + < module name = " Checker " > <nl> + < module name = " TreeWalker " > <nl> + < module name = " LineLength " > <nl> + < property name = " max " value = " 70 " / > <nl> + < property name = " severity " <nl> + value = " $ { lineLength . severity } " <nl> + default = " error " / > <nl> + < / module > <nl> + < module name = " EmptyLineSeparator " > <nl> + < property name = " severity " value = " warning " / > <nl> + < / module > <nl> + < module name = " WriteTag " > <nl> + < property name = " tag " value = " @ incomplete " / > <nl> + < property name = " tagFormat " value = " \ S " / > <nl> + < property name = " severity " value = " ignore " / > <nl> + < property name = " tagSeverity " value = " warning " / > <nl> + < / module > <nl> + < / module > <nl> + < / module > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / ant _ task _ xml _ output . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / ant _ task _ xml _ output . xml <nl> new file mode 100644 <nl> index 0000000 . . 3a297ba <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / ant _ task _ xml _ output . xml <nl> @ @ - 0 , 0 + 1 , 7 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> + < checkstyle version = " 6 . 16 - SNAPSHOT " > <nl> + < file name = " / home / vlad / projects / checkstyle / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskError . java " > <nl> + < error line = " 7 " severity = " error " message = " Line is longer than 70 characters ( found 80 ) . " source = " com . puppycrawl . tools . checkstyle . checks . sizes . LineLengthCheck " / > <nl> + < error line = " 9 " severity = " error " message = " Line is longer than 70 characters ( found 81 ) . " source = " com . puppycrawl . tools . checkstyle . checks . sizes . LineLengthCheck " / > <nl> + < / file > <nl> + < / checkstyle > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleAntTest . properties b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleAntTest . properties <nl> new file mode 100644 <nl> index 0000000 . . 5758177 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleAntTest . properties <nl> @ @ - 0 , 0 + 1 @ @ <nl> + lineLength . severity = ignore <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / empty _ config . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / empty _ config . xml <nl> new file mode 100644 <nl> index 0000000 . . e69de29
NEAREST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 61fc1f9 . . f26f475 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 113 , 9 + 113 , 8 @ @ <nl> < exclude name = " ConfusingTernary " / > <nl> < ! - - extra final modifier does not make code more secure in that cases - - > <nl> < exclude name = " ImmutableField " / > <nl> + < ! - - this rule does not have any option , unreasonable to use - - > <nl> < exclude name = " MissingBreakInSwitch " / > <nl> - < exclude name = " UseNotifyAllInsteadOfNotify " / > <nl> - < exclude name = " AvoidInstanceofChecksInCatchClause " / > <nl> < exclude name = " AbstractClassWithoutAbstractMethod " / > <nl> < exclude name = " SimplifyConditional " / > <nl> < exclude name = " CompareObjectsWithEquals " / >

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 8b123ae . . f716d62 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 130 , 7 + 130 , 7 @ @ 
 < suppress checks = " ClassDataAbstractionCoupling " files = " AutomaticBean \ . java " / > 
 < ! - - they are aggregators of logic , usage a several of classes are ok - - > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " ( Checker | TreeWalker | Main | CheckstyleAntTask | AbstractJavadocCheck ) \ . java " / > 
 - < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | XDocsPagesTest ) \ . java " / > 
 + < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | XDocsPagesTest | CheckstyleAntTaskTest ) \ . java " / > 
 < ! - - a lot of GUI elements is OK - - > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " ( JTreeTable | MainFrame ) \ . java " / > 
 
 diff - - git a / pom . xml b / pom . xml 
 index fc4d426 . . 8cdddd7 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1807 , 11 + 1807 , 15 @ @ 
 < branchRate > 75 < / branchRate > 
 < lineRate > 92 < / lineRate > 
 < / regex > 
 + < regex > 
 + < pattern > com . puppycrawl . tools . checkstyle . ant . CheckstyleAntTask < / pattern > 
 + < branchRate > 97 < / branchRate > 
 + < lineRate > 100 < / lineRate > 
 + < / regex > 
 < / regexes > 
 < / check > 
 < instrumentation > 
 < excludes > 
 - < exclude > com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask * . class < / exclude > 
 < exclude > com / puppycrawl / tools / checkstyle / grammars / javadoc / * . class < / exclude > 
 < exclude > com / puppycrawl / tools / checkstyle / gui / * . class < / exclude > 
 < ! - - deprecated classes - - > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 index 38f0a5b . . b9d22a9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 @ @ - 115 , 7 + 115 , 7 @ @ public class CheckstyleAntTask extends Task { 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 / * * 
 - * Tells this task to set the named property to " true " when there 
 + * Tells this task to write failure message to the named property when there 
 * is a violation . 
 * @ param propertyName the name of the property to set 
 * in the event of an failure . 
 @ @ - 540 , 7 + 540 , 7 @ @ public class CheckstyleAntTask extends Task { 
 * / 
 public static class Formatter { 
 / * * The formatter type . * / 
 - private FormatterType formatterType ; 
 + private FormatterType type ; 
 / * * The file to output to . * / 
 private File toFile ; 
 / * * Whether or not the write to the named file . * / 
 @ @ - 551 , 12 + 551 , 7 @ @ public class CheckstyleAntTask extends Task { 
 * @ param type the type 
 * / 
 public void setType ( FormatterType type ) { 
 - final String val = type . getValue ( ) ; 
 - if ( ! E _ XML . equals ( val ) & & ! E _ PLAIN . equals ( val ) ) { 
 - throw new BuildException ( " Invalid formatter type : " + val ) ; 
 - } 
 - 
 - formatterType = type ; 
 + this . type = type ; 
 } 
 
 / * * 
 @ @ - 582 , 8 + 577 , 8 @ @ public class CheckstyleAntTask extends Task { 
 * @ throws IOException if an error occurs 
 * / 
 public AuditListener createListener ( Task task ) throws IOException { 
 - if ( formatterType ! = null 
 - & & E _ XML . equals ( formatterType . getValue ( ) ) ) { 
 + if ( type ! = null 
 + & & E _ XML . equals ( type . getValue ( ) ) ) { 
 return createXmlLogger ( task ) ; 
 } 
 return createDefaultLogger ( task ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 new file mode 100644 
 index 0000000 . . 3ebe003 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 @ @ - 0 , 0 + 1 , 432 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . ant ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . fail ; 
 + import static org . mockito . Mockito . when ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . net . URL ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + 
 + import org . apache . commons . io . FileUtils ; 
 + import org . apache . tools . ant . BuildException ; 
 + import org . apache . tools . ant . Project ; 
 + import org . apache . tools . ant . types . FileSet ; 
 + import org . apache . tools . ant . types . Path ; 
 + import org . apache . tools . ant . types . Reference ; 
 + import org . junit . Test ; 
 + import org . powermock . api . mockito . PowerMockito ; 
 + 
 + import com . google . common . collect . Lists ; 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 + import com . puppycrawl . tools . checkstyle . XMLLogger ; 
 + 
 + public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 + 
 + private static final String FLAWLESS _ INPUT = " ant / InputCheckstyleAntTaskFlawless . java " ; 
 + private static final String VIOLATED _ INPUT = " ant / InputCheckstyleAntTaskError . java " ; 
 + private static final String CONFIG _ FILE = " ant / ant _ task _ test _ checks . xml " ; 
 + private static final String NOT _ EXISTING _ FILE = " target / not _ existing . xml " ; 
 + private static final String FAILURE _ PROPERTY _ VALUE = " myValue " ; 
 + 
 + private CheckstyleAntTask getCheckstyleAntTask ( ) throws IOException { 
 + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; 
 + antTask . setConfig ( new File ( getPath ( CONFIG _ FILE ) ) ) ; 
 + antTask . setProject ( new Project ( ) ) ; 
 + return antTask ; 
 + } 
 + 
 + @ Test 
 + public final void testDefaultFlawless ( ) throws IOException { 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; 
 + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + antTask . execute ( ) ; 
 + } 
 + 
 + @ Test 
 + public final void testFileSet ( ) throws IOException { 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; 
 + final FileSet examinationFileSet = new FileSet ( ) ; 
 + examinationFileSet . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + antTask . addFileset ( examinationFileSet ) ; 
 + antTask . execute ( ) ; 
 + } 
 + 
 + @ Test 
 + public final void testNoConfigFile ( ) throws IOException { 
 + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; 
 + antTask . setProject ( new Project ( ) ) ; 
 + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + try { 
 + antTask . execute ( ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( BuildException ex ) { 
 + assertEquals ( " Must specify ' config ' . " , ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public final void testNonExistingConfig ( ) throws IOException { 
 + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; 
 + antTask . setConfig ( new File ( getPath ( NOT _ EXISTING _ FILE ) ) ) ; 
 + antTask . setProject ( new Project ( ) ) ; 
 + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + try { 
 + antTask . execute ( ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( BuildException ex ) { 
 + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create a Checker : configLocation " ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public final void testEmptyConfigFile ( ) throws IOException { 
 + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; 
 + antTask . setConfig ( new File ( getPath ( " ant / empty _ config . xml " ) ) ) ; 
 + antTask . setProject ( new Project ( ) ) ; 
 + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + try { 
 + antTask . execute ( ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( BuildException ex ) { 
 + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create a Checker : configLocation " ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public final void testNoFile ( ) throws IOException { 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; 
 + try { 
 + antTask . execute ( ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( BuildException ex ) { 
 + assertEquals ( " Must specify at least one of ' file ' or nested ' fileset ' . " , 
 + ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public final void testMaxWarningExeeded ( ) throws IOException { 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; 
 + antTask . setFile ( new File ( getPath ( " ant / InputCheckstyleAntTaskWarning . java " ) ) ) ; 
 + antTask . setMaxWarnings ( 0 ) ; 
 + try { 
 + antTask . execute ( ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( BuildException ex ) { 
 + assertEquals ( " Got 0 errors and 1 warnings . " , ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public final void testMaxErrors ( ) throws IOException { 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; 
 + antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; 
 + antTask . setMaxErrors ( 2 ) ; 
 + antTask . execute ( ) ; 
 + } 
 + 
 + @ Test 
 + public final void testFailureProperty ( ) throws IOException { 
 + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; 
 + antTask . setConfig ( new File ( getPath ( CONFIG _ FILE ) ) ) ; 
 + antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; 
 + 
 + final Project project = new Project ( ) ; 
 + final String failurePropertyName = " myProperty " ; 
 + project . setProperty ( failurePropertyName , FAILURE _ PROPERTY _ VALUE ) ; 
 + 
 + antTask . setProject ( project ) ; 
 + antTask . setFailureProperty ( failurePropertyName ) ; 
 + try { 
 + antTask . execute ( ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( BuildException ex ) { 
 + final Map < String , Object > hashtable = project . getProperties ( ) ; 
 + final Object propertyValue = hashtable . get ( failurePropertyName ) ; 
 + assertEquals ( " Got 2 errors and 0 warnings . " , propertyValue ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public final void testOverrideProperty ( ) throws IOException { 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; 
 + antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; 
 + final CheckstyleAntTask . Property property = new CheckstyleAntTask . Property ( ) ; 
 + property . setKey ( " lineLength . severity " ) ; 
 + property . setValue ( " ignore " ) ; 
 + antTask . addProperty ( property ) ; 
 + antTask . execute ( ) ; 
 + } 
 + 
 + @ Test 
 + public final void testOmitIgnoredModules ( ) throws IOException { 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; 
 + antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; 
 + antTask . setFailOnViolation ( false ) ; 
 + antTask . setOmitIgnoredModules ( false ) ; 
 + 
 + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; 
 + final File outputFile = new File ( " target / ant _ task _ plain _ output . txt " ) ; 
 + formatter . setTofile ( outputFile ) ; 
 + final CheckstyleAntTask . FormatterType formatterType = new CheckstyleAntTask . FormatterType ( ) ; 
 + formatterType . setValue ( " plain " ) ; 
 + formatter . setType ( formatterType ) ; 
 + formatter . createListener ( null ) ; 
 + 
 + antTask . addFormatter ( formatter ) ; 
 + antTask . execute ( ) ; 
 + 
 + final List < String > output = FileUtils . readLines ( outputFile ) ; 
 + assertEquals ( " Starting audit . . . " , output . get ( 0 ) ) ; 
 + assertTrue ( output . get ( 1 ) . startsWith ( " [ WARN ] " ) ) ; 
 + assertTrue ( output . get ( 1 ) . endsWith ( " InputCheckstyleAntTaskError . java : 4 : " 
 + + " @ incomplete = Some javadoc [ WriteTag ] " ) ) ; 
 + assertTrue ( output . get ( 2 ) . startsWith ( " [ ERROR ] " ) ) ; 
 + assertTrue ( output . get ( 2 ) . endsWith ( " InputCheckstyleAntTaskError . java : 7 : " 
 + + " Line is longer than 70 characters ( found 80 ) . [ LineLength ] " ) ) ; 
 + assertTrue ( output . get ( 3 ) . startsWith ( " [ ERROR ] " ) ) ; 
 + assertTrue ( output . get ( 3 ) . endsWith ( " InputCheckstyleAntTaskError . java : 9 : " 
 + + " Line is longer than 70 characters ( found 81 ) . [ LineLength ] " ) ) ; 
 + assertEquals ( " Audit done . " , output . get ( 4 ) ) ; 
 + } 
 + 
 + @ Test 
 + public final void testConfigurationByUrl ( ) throws IOException { 
 + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; 
 + antTask . setProject ( new Project ( ) ) ; 
 + final URL url = new File ( getPath ( CONFIG _ FILE ) ) . toURI ( ) . toURL ( ) ; 
 + antTask . setConfigURL ( url ) ; 
 + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + antTask . execute ( ) ; 
 + } 
 + 
 + @ Test 
 + public final void testSimultaneousConfiguration ( ) throws IOException { 
 + CheckstyleAntTask antTask ; 
 + final File file = new File ( getPath ( CONFIG _ FILE ) ) ; 
 + final URL url = file . toURI ( ) . toURL ( ) ; 
 + final String expected = 
 + " Attributes ' config ' and ' configURL ' must not be set at the same time " ; 
 + try { 
 + antTask = new CheckstyleAntTask ( ) ; 
 + antTask . setConfigUrl ( url ) ; 
 + antTask . setConfig ( file ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( BuildException ex ) { 
 + assertEquals ( expected , ex . getMessage ( ) ) ; 
 + } 
 + try { 
 + antTask = new CheckstyleAntTask ( ) ; 
 + antTask . setConfig ( file ) ; 
 + antTask . setConfigUrl ( url ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( BuildException ex ) { 
 + assertEquals ( expected , ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public final void testSetPropertiesFile ( ) throws IOException { 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; 
 + antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; 
 + antTask . setProperties ( new File ( getPath ( " ant / checkstyleAntTest . properties " ) ) ) ; 
 + antTask . execute ( ) ; 
 + } 
 + 
 + @ Test 
 + public final void testSetPropertiesNonExistingFile ( ) throws IOException { 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; 
 + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + antTask . setProperties ( new File ( getPath ( NOT _ EXISTING _ FILE ) ) ) ; 
 + try { 
 + antTask . execute ( ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( BuildException ex ) { 
 + assertTrue ( ex . getMessage ( ) . startsWith ( " Error loading Properties file " ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public final void testXmlOutput ( ) throws IOException { 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; 
 + antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; 
 + antTask . setFailOnViolation ( false ) ; 
 + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; 
 + final File outputFile = new File ( " target / log . xml " ) ; 
 + formatter . setTofile ( outputFile ) ; 
 + final CheckstyleAntTask . FormatterType formatterType = new CheckstyleAntTask . FormatterType ( ) ; 
 + formatterType . setValue ( " xml " ) ; 
 + formatter . setType ( formatterType ) ; 
 + antTask . addFormatter ( formatter ) ; 
 + antTask . execute ( ) ; 
 + 
 + final List < String > expected = FileUtils . readLines ( 
 + new File ( getPath ( " ant / ant _ task _ xml _ output . xml " ) ) ) ; 
 + final List < String > actual = FileUtils . readLines ( outputFile ) ; 
 + for ( int i = 0 ; i < expected . size ( ) ; i + + ) { 
 + final String line = expected . get ( i ) ; 
 + if ( ! line . startsWith ( " < checkstyle version " ) & & ! line . startsWith ( " < file " ) ) { 
 + assertEquals ( line , actual . get ( i ) ) ; 
 + } 
 + } 
 + } 
 + 
 + @ Test 
 + public final void testCreateListenerException ( ) throws IOException { 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( ) ; 
 + antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; 
 + final File outputFile = new File ( " target / " ) ; 
 + formatter . setTofile ( outputFile ) ; 
 + antTask . addFormatter ( formatter ) ; 
 + try { 
 + antTask . execute ( ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( BuildException ex ) { 
 + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to create listeners : formatters " ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testSetInvalidType ( ) { 
 + final CheckstyleAntTask . FormatterType formatterType = new CheckstyleAntTask . FormatterType ( ) ; 
 + try { 
 + formatterType . setValue ( " foo " ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( BuildException ex ) { 
 + assertEquals ( " foo is not a legal value for this attribute " , ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public final void testSetClassName ( ) { 
 + final String customName = " customName " ; 
 + final CheckstyleAntTask . Listener listener = new CheckstyleAntTask . Listener ( ) ; 
 + listener . setClassname ( customName ) ; 
 + assertEquals ( customName , listener . getClassname ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testSetFileValueByFile ( ) throws IOException { 
 + final String filename = getPath ( " ant / checkstyleAntTest . properties " ) ; 
 + final CheckstyleAntTask . Property property = new CheckstyleAntTask . Property ( ) ; 
 + property . setFile ( new File ( filename ) ) ; 
 + assertEquals ( property . getValue ( ) , new File ( filename ) . getAbsolutePath ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testDefaultLoggerListener ( ) throws IOException { 
 + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; 
 + formatter . setUseFile ( false ) ; 
 + assertTrue ( formatter . createListener ( null ) instanceof DefaultLogger ) ; 
 + } 
 + 
 + @ Test 
 + public void testDefaultLoggerListenerWithToFile ( ) throws IOException { 
 + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; 
 + formatter . setUseFile ( false ) ; 
 + formatter . setTofile ( new File ( " target / " ) ) ; 
 + assertTrue ( formatter . createListener ( null ) instanceof DefaultLogger ) ; 
 + } 
 + 
 + @ Test 
 + public void testXmlLoggerListener ( ) throws IOException { 
 + final CheckstyleAntTask . FormatterType formatterType = new CheckstyleAntTask . FormatterType ( ) ; 
 + formatterType . setValue ( " xml " ) ; 
 + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; 
 + formatter . setType ( formatterType ) ; 
 + formatter . setUseFile ( false ) ; 
 + assertTrue ( formatter . createListener ( null ) instanceof XMLLogger ) ; 
 + } 
 + 
 + @ Test 
 + public void testXmlLoggerListenerWithToFile ( ) throws IOException { 
 + final CheckstyleAntTask . FormatterType formatterType = new CheckstyleAntTask . FormatterType ( ) ; 
 + formatterType . setValue ( " xml " ) ; 
 + final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; 
 + formatter . setType ( formatterType ) ; 
 + formatter . setUseFile ( false ) ; 
 + formatter . setTofile ( new File ( " target / " ) ) ; 
 + assertTrue ( formatter . createListener ( null ) instanceof XMLLogger ) ; 
 + } 
 + 
 + @ Test 
 + public void testSetClasspath ( ) { 
 + / / temporary fake test 
 + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; 
 + final Project project = new Project ( ) ; 
 + antTask . setClasspath ( new Path ( project , " / " ) ) ; 
 + antTask . setClasspath ( new Path ( project , " / checkstyle " ) ) ; 
 + antTask . setClasspathRef ( new Reference ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testSetClasspathRef ( ) { 
 + / / temporary fake test 
 + final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; 
 + antTask . setClasspathRef ( new Reference ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testCheckerException ( ) throws IOException { 
 + final CheckstyleAntTask antTask = new CheckstyleAntTaskStub ( ) ; 
 + antTask . setConfig ( new File ( getPath ( CONFIG _ FILE ) ) ) ; 
 + antTask . setProject ( new Project ( ) ) ; 
 + antTask . setFile ( new File ( " " ) ) ; 
 + try { 
 + antTask . execute ( ) ; 
 + fail ( " Exception is expected " ) ; 
 + } 
 + catch ( BuildException ex ) { 
 + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to process files : " ) ) ; 
 + } 
 + } 
 + 
 + private static class CheckstyleAntTaskStub extends CheckstyleAntTask { 
 + @ Override 
 + protected List < File > scanFileSets ( ) { 
 + final File mock = PowerMockito . mock ( File . class ) ; 
 + / / Assume that I / O error is happened when we try to invoke ' lastModified ( ) ' method . 
 + final Exception expectedError = new RuntimeException ( " " ) ; 
 + when ( mock . lastModified ( ) ) . thenThrow ( expectedError ) ; 
 + final List < File > list = Lists . newArrayList ( ) ; 
 + list . add ( mock ) ; 
 + return list ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskError . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskError . java 
 new file mode 100644 
 index 0000000 . . c41171e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskError . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package com . puppycrawl . tools . checkstyle . ant ; 
 + 
 + / * * 
 + * @ incomplete Some javadoc 
 + * / 
 + public final class InputCheckstyleAntTaskError { 
 + private static final String FOO = " This line is longer then 70 characters . " ; 
 + 
 + private static final String FOOO = " This line is longer then 70 characters . " ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskFlawless . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskFlawless . java 
 new file mode 100644 
 index 0000000 . . 28d107c 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskFlawless . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package com . puppycrawl . tools . checkstyle . ant ; 
 + 
 + public final class InputCheckstyleAntTaskFlawless { 
 + private String foo = " A short line " ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskWarning . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskWarning . java 
 new file mode 100644 
 index 0000000 . . 34eb959 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskWarning . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package com . puppycrawl . tools . checkstyle . ant ; 
 + 
 + public final class InputCheckstyleAntTaskWarning { 
 + int foo ; 
 + int foo1 ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / ant _ task _ test _ checks . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / ant _ task _ test _ checks . xml 
 new file mode 100644 
 index 0000000 . . 4f6bfb9 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / ant _ task _ test _ checks . xml 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + < ? xml version = " 1 . 0 " ? > 
 + < ! DOCTYPE module PUBLIC 
 + " - / / Puppy Crawl / / DTD Check Configuration 1 . 3 / / EN " 
 + " http : / / www . puppycrawl . com / dtds / configuration _ 1 _ 3 . dtd " > 
 + 
 + < module name = " Checker " > 
 + < module name = " TreeWalker " > 
 + < module name = " LineLength " > 
 + < property name = " max " value = " 70 " / > 
 + < property name = " severity " 
 + value = " $ { lineLength . severity } " 
 + default = " error " / > 
 + < / module > 
 + < module name = " EmptyLineSeparator " > 
 + < property name = " severity " value = " warning " / > 
 + < / module > 
 + < module name = " WriteTag " > 
 + < property name = " tag " value = " @ incomplete " / > 
 + < property name = " tagFormat " value = " \ S " / > 
 + < property name = " severity " value = " ignore " / > 
 + < property name = " tagSeverity " value = " warning " / > 
 + < / module > 
 + < / module > 
 + < / module > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / ant _ task _ xml _ output . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / ant _ task _ xml _ output . xml 
 new file mode 100644 
 index 0000000 . . 3a297ba 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / ant _ task _ xml _ output . xml 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 + < checkstyle version = " 6 . 16 - SNAPSHOT " > 
 + < file name = " / home / vlad / projects / checkstyle / src / test / resources / com / puppycrawl / tools / checkstyle / ant / InputCheckstyleAntTaskError . java " > 
 + < error line = " 7 " severity = " error " message = " Line is longer than 70 characters ( found 80 ) . " source = " com . puppycrawl . tools . checkstyle . checks . sizes . LineLengthCheck " / > 
 + < error line = " 9 " severity = " error " message = " Line is longer than 70 characters ( found 81 ) . " source = " com . puppycrawl . tools . checkstyle . checks . sizes . LineLengthCheck " / > 
 + < / file > 
 + < / checkstyle > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleAntTest . properties b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleAntTest . properties 
 new file mode 100644 
 index 0000000 . . 5758177 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleAntTest . properties 
 @ @ - 0 , 0 + 1 @ @ 
 + lineLength . severity = ignore 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / empty _ config . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / empty _ config . xml 
 new file mode 100644 
 index 0000000 . . e69de29

NEAREST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 61fc1f9 . . f26f475 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 113 , 9 + 113 , 8 @ @ 
 < exclude name = " ConfusingTernary " / > 
 < ! - - extra final modifier does not make code more secure in that cases - - > 
 < exclude name = " ImmutableField " / > 
 + < ! - - this rule does not have any option , unreasonable to use - - > 
 < exclude name = " MissingBreakInSwitch " / > 
 - < exclude name = " UseNotifyAllInsteadOfNotify " / > 
 - < exclude name = " AvoidInstanceofChecksInCatchClause " / > 
 < exclude name = " AbstractClassWithoutAbstractMethod " / > 
 < exclude name = " SimplifyConditional " / > 
 < exclude name = " CompareObjectsWithEquals " / >
