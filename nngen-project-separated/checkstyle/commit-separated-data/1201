BLEU SCORE: 0.08295193507109855

TEST MSG: Issue # 3168 : allow new line on end of commit
GENERATED MSG: Issue # 2451 : removed excess hierarchy from RegexpCheck

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CommitValidationTest . java <nl> index 137e72a . . 16e9743 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CommitValidationTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CommitValidationTest . java <nl> @ @ - 112 , 17 + 112 , 26 @ @ public class CommitValidationTest { <nl> @ Test <nl> public void testCommitMessage ( ) { <nl> assertFalse ( " should not accept commit message with periods on end " , <nl> - ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( " minor : Test . Test . " ) . matches ( ) ) ; <nl> + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " minor : Test . Test . " ) ) <nl> + . matches ( ) ) ; <nl> assertFalse ( " should not accept commit message with spaces on end " , <nl> - ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( " minor : Test . " ) . matches ( ) ) ; <nl> + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " minor : Test . " ) ) <nl> + . matches ( ) ) ; <nl> assertFalse ( " should not accept commit message with tabs on end " , <nl> - ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( " minor : Test . \ t " ) . matches ( ) ) ; <nl> - assertFalse ( " should not accept commit message with newline on end " , <nl> - ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( " minor : Test . \ n " ) . matches ( ) ) ; <nl> + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " minor : Test . \ t " ) ) <nl> + . matches ( ) ) ; <nl> + assertFalse ( " should not accept commit message with period on end , ignoring new line " , <nl> + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " minor : Test . \ n " ) ) <nl> + . matches ( ) ) ; <nl> assertFalse ( " should not accept commit message with missing prefix " , <nl> - ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( " Test . Test " ) . matches ( ) ) ; <nl> + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " Test . Test " ) ) . matches ( ) ) ; <nl> + / / test ' testCommitMessageHasSingleLine ' verifies that nothing is pass that new line <nl> + assertTrue ( " should accept commit message with new line on end and no period before it " , <nl> + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " minor : Test \ n " ) ) <nl> + . matches ( ) ) ; <nl> assertTrue ( " should accept commit message that ends properly " , <nl> - ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( " minor : Test . Test " ) . matches ( ) ) ; <nl> + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " minor : Test . Test " ) ) <nl> + . matches ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 130 , 12 + 139 , 17 @ @ public class CommitValidationTest { <nl> for ( RevCommit commit : filterValidCommits ( lastCommits ) ) { <nl> final String commitId = commit . getId ( ) . getName ( ) ; <nl> final String commitMessage = commit . getFullMessage ( ) ; <nl> - final Matcher matcher = ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( commitMessage ) ; <nl> + final Matcher matcher = ACCEPTED _ COMMIT _ MESSAGE _ PATTERN <nl> + . matcher ( fixCommitMessage ( commitMessage ) ) ; <nl> assertTrue ( getInvalidCommitMessageFormattingError ( commitId , commitMessage ) , <nl> matcher . matches ( ) ) ; <nl> } <nl> } <nl> <nl> + private static String fixCommitMessage ( String fullMessage ) { <nl> + return fullMessage . split ( " \ \ r ? \ \ n " ) [ 0 ] ; <nl> + } <nl> + <nl> @ Test <nl> public void testCommitMessageHasSingleLine ( ) { <nl> for ( RevCommit commit : filterValidCommits ( lastCommits ) ) {
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> index b90d0b7 . . 3ac4f0b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . naming . AbbreviationAsWordInNameCheck . MSG _ KEY ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 28 , 10 + 31 , 15 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> - <nl> / * * Warning message . * / <nl> private String warningMessage ; <nl> <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " naming " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testTypeNamesForThreePermittedCapitalLetters ( ) throws Exception { <nl> <nl> @ @ - 50 , 7 + 58 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 37 : " + warningMessage , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 68 , 7 + 76 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 32 : " + warningMessage , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 86 , 7 + 94 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 37 : " + warningMessage , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 112 , 7 + 120 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 58 : " + warningMessage , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 141 , 7 + 149 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 84 : " + warningMessage , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 166 , 7 + 174 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 38 : " + warningMessage , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 194 , 7 + 202 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 60 : " + warningMessage , / / no ignore for static <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 221 , 7 + 229 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 59 : " + warningMessage , / / no ignore for final <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 240 , 7 + 248 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java " ) , expected ) ; <nl> + getPath ( " InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 286 , 7 + 294 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 98 : " + warningMessage , <nl> } ; <nl> verify ( checkConfig , <nl> - getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> + getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 301 , 6 + 309 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checkConfig , getPath ( " naming / AbstractMultisetSetCountTester . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " AbstractMultisetSetCountTester . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java <nl> index 0d13204 . . 795187a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractClassNameChe <nl> import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractClassNameCheck . NO _ ABSTRACT _ CLASS _ MODIFIER ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 32 , 6 + 33 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class AbstractClassNameCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " naming " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testIllegalAbstractClassName ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> @ @ - 47 , 7 + 54 , 7 @ @ public class AbstractClassNameCheckTest extends BaseCheckTestSupport { <nl> " 10 : 5 : " + getCheckMessage ( ILLEGAL _ ABSTRACT _ CLASS _ NAME , " NonAbstractInnerClass " , pattern ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " naming " + File . separator + " InputAbstractClassName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbstractClassName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 61 , 7 + 68 , 7 @ @ public class AbstractClassNameCheckTest extends BaseCheckTestSupport { <nl> " 22 : 5 : " + getCheckMessage ( NO _ ABSTRACT _ CLASS _ MODIFIER , " AbstractInnerClass " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " naming " + File . separator + " InputAbstractClassName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbstractClassName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 80 , 7 + 87 , 7 @ @ public class AbstractClassNameCheckTest extends BaseCheckTestSupport { <nl> " 22 : 5 : " + getCheckMessage ( NO _ ABSTRACT _ CLASS _ MODIFIER , " AbstractInnerClass " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " naming " + File . separator + " InputAbstractClassName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbstractClassName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 91 , 8 + 98 , 7 @ @ public class AbstractClassNameCheckTest extends BaseCheckTestSupport { <nl> " 9 : 5 : " + getCheckMessage ( NO _ ABSTRACT _ CLASS _ MODIFIER , " AbstractClass " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " naming " + File . separator <nl> - + " InputAbstractClassNameFormerFalsePositive . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbstractClassNameFormerFalsePositive . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java <nl> index e3790d3 . . 6a2d83f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> - import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> @ @ - 36 , 12 + 35 , 10 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> <nl> public class TypeNameCheckTest <nl> extends BaseCheckTestSupport { <nl> - <nl> - private String inputFilename ; <nl> - <nl> - @ Before <nl> - public void setUp ( ) throws IOException { <nl> - inputFilename = getPath ( " naming " + File . separator + " InputTypeName . java " ) ; <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " naming " + File . separator + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 51 , 7 + 48 , 7 @ @ public class TypeNameCheckTest <nl> createCheckConfig ( TypeNameCheck . class ) ; <nl> checkConfig . addAttribute ( " format " , " ^ inputHe " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , inputFilename , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypeName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 69 , 7 + 66 , 7 @ @ public class TypeNameCheckTest <nl> " 9 : 23 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , <nl> " inputHeaderAnnotation " , DEFAULT _ PATTERN ) , <nl> } ; <nl> - verify ( checkConfig , inputFilename , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypeName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 82 , 7 + 79 , 7 @ @ public class TypeNameCheckTest <nl> " 3 : 7 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , <nl> " inputHeaderClass " , DEFAULT _ PATTERN ) , <nl> } ; <nl> - verify ( checkConfig , inputFilename , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypeName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 95 , 7 + 92 , 7 @ @ public class TypeNameCheckTest <nl> " 5 : 22 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , <nl> " inputHeaderInterface " , DEFAULT _ PATTERN ) , <nl> } ; <nl> - verify ( checkConfig , inputFilename , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypeName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 108 , 7 + 105 , 7 @ @ public class TypeNameCheckTest <nl> " 7 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , <nl> " inputHeaderEnum " , DEFAULT _ PATTERN ) , <nl> } ; <nl> - verify ( checkConfig , inputFilename , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypeName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 121 , 6 + 118 , 6 @ @ public class TypeNameCheckTest <nl> " 9 : 23 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , <nl> " inputHeaderAnnotation " , DEFAULT _ PATTERN ) , <nl> } ; <nl> - verify ( checkConfig , inputFilename , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypeName . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeParameterNameTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeParameterNameTest . java <nl> index c6319a9 . . 14d8745 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeParameterNameTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeParameterNameTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MS <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . Test ; <nl> <nl> @ @ - 32 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class TypeParameterNameTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " naming " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetInterfaceRequiredTokens ( ) { <nl> @ @ - 70 , 7 + 76 , 7 @ @ public class TypeParameterNameTest <nl> " 13 : 14 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , <nl> " 27 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " naming " + File . separator + " InputTypeParameterName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 88 , 7 + 94 , 7 @ @ public class TypeParameterNameTest <nl> " 23 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , <nl> " 28 : 10 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " _ fo " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " naming " + File . separator + " InputTypeParameterName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 102 , 7 + 108 , 7 @ @ public class TypeParameterNameTest <nl> final String [ ] expected = { <nl> " 48 : 15 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Input " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " naming " + File . separator + " InputTypeParameterName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 118 , 7 + 124 , 7 @ @ public class TypeParameterNameTest <nl> " 5 : 38 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t " , pattern ) , <nl> " 33 : 18 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " naming " + File . separator + " InputTypeParameterName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 139 , 7 + 145 , 7 @ @ public class TypeParameterNameTest <nl> " 37 : 14 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , <nl> / / " 40 : 14 : Name ' EE ' must match pattern ' ^ foo $ ' . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " naming " + File . separator + " InputTypeParameterName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 155 , 7 + 161 , 7 @ @ public class TypeParameterNameTest <nl> " 48 : 15 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Input " , pattern ) , <nl> " 52 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " naming " + File . separator + " InputTypeParameterName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / AbstractMultisetSetCountTester . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / AbstractMultisetSetCountTester . java <nl> new file mode 100644 <nl> index 0000000 . . 02a21ca <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / AbstractMultisetSetCountTester . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + public abstract class AbstractMultisetSetCountTester < E > { <nl> + <nl> + private static final String SUPPORTS _ REMOVE = " " ; <nl> + <nl> + @ CollectionFeature . Require ( absent = SUPPORTS _ REMOVE ) <nl> + public void testSetCount _ negative _ removeUnsupported ( ) { <nl> + } <nl> + } <nl> + <nl> + @ interface CollectionFeature { <nl> + <nl> + public @ interface Require <nl> + { <nl> + String absent ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 6dd9a7e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameCheck . java <nl> @ @ - 0 , 0 + 1 , 104 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + abstract class IIIInputAbstractClassName { <nl> + } <nl> + <nl> + abstract class NonAAAAbstractClassName { <nl> + } <nl> + <nl> + abstract class FactoryWithBADNAme { <nl> + } <nl> + <nl> + abstract class AbstractCLASSName { <nl> + abstract class NonAbstractInnerClass { <nl> + } <nl> + } <nl> + <nl> + abstract class ClassFactory1 { <nl> + abstract class WellNamedFactory { <nl> + } <nl> + } <nl> + <nl> + class NonAbstractClass1 { <nl> + } <nl> + <nl> + class AbstractClass1 { <nl> + } <nl> + <nl> + class Class1Factory1 { <nl> + } <nl> + <nl> + abstract class AbstractClassName3 { <nl> + class AbstractINNERRClass { <nl> + } <nl> + } <nl> + <nl> + abstract class Class3Factory { <nl> + class WellNamedFACTORY { <nl> + 	 public void marazmaticMETHODName ( ) { <nl> + 	 	 int marazmaticVARIABLEName = 2 ; <nl> + 	 	 int MARAZMATICVariableName = 1 ; <nl> + 	 } <nl> + } <nl> + } <nl> + <nl> + interface Directions { <nl> + int RIGHT = 1 ; <nl> + int LEFT = 2 ; <nl> + int UP = 3 ; <nl> + int DOWN = 4 ; <nl> + } <nl> + <nl> + interface BadNameForInterfeis <nl> + { <nl> + void interfaceMethod ( ) ; <nl> + } <nl> + <nl> + abstract class NonAAAAbstractClassName2 { <nl> + 	 public int serialNUMBER = 6 ; <nl> + 	 public final int s1erialNUMBER = 6 ; <nl> + 	 private static int s2erialNUMBER = 6 ; <nl> + 	 private static final int s3erialNUMBER = 6 ; <nl> + } <nl> + <nl> + interface Interface1 { <nl> + 	 <nl> + 	 String VALUEEEE = " value " ; / / in interface this is final / static <nl> + 	 <nl> + } <nl> + <nl> + interface Interface2 { <nl> + 	 <nl> + 	 static String VALUEEEE = " value " ; / / in interface this is final / static <nl> + 	 <nl> + } <nl> + <nl> + interface Interface3 { <nl> + 	 <nl> + 	 final String VALUEEEE = " value " ; / / in interface this is final / static <nl> + 	 <nl> + } <nl> + <nl> + interface Interface4 { <nl> + 	 <nl> + 	 final static String VALUEEEE = " value " ; / / in interface this is final / static <nl> + 	 <nl> + } <nl> + <nl> + class FIleNameFormatException extends Exception { <nl> + <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> + public FIleNameFormatException ( Exception e ) { <nl> + super ( e ) ; <nl> + } <nl> + } <nl> + <nl> + class StateX { <nl> + int userID ; <nl> + int scaleX , scaleY , scaleZ ; <nl> + <nl> + int getScaleX ( ) { <nl> + return this . scaleX ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java <nl> new file mode 100644 <nl> index 0000000 . . 9c2031d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + import org . junit . Before ; <nl> + <nl> + abstract class NonAAAAbstractClassName1 extends Class1 { <nl> + 	 public int serialNUMBER = 6 ; <nl> + 	 public final int s1erialNUMBER = 6 ; <nl> + 	 private static int s2erialNUMBER = 6 ; <nl> + 	 private static final int s3erialNUMBER = 6 ; <nl> + 	 <nl> + 	 @ Override <nl> + 	 @ SuppressWarnings ( value = { " " } ) <nl> + 	 @ Before <nl> + 	 protected void oveRRRRRrriddenMethod ( ) { <nl> + 	 int a = 0 ; <nl> + 	 / / blah - blah <nl> + 	 } <nl> + } <nl> + <nl> + class Class1 { <nl> + @ SuppressWarnings ( value = { " " } ) <nl> + protected void oveRRRRRrriddenMethod ( ) { <nl> + int a = 0 ; <nl> + / / blah - blah <nl> + } <nl> + <nl> + } <nl> + <nl> + class Class2 extends Class1 { <nl> + <nl> + @ Override <nl> + @ SuppressWarnings ( value = { " " } ) <nl> + @ Before <nl> + 	 protected void oveRRRRRrriddenMethod ( ) { <nl> + int a = 0 ; <nl> + / / blah - blah <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassName . java <nl> new file mode 100644 <nl> index 0000000 . . 70f96bf <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassName . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + abstract public class InputAbstractClassName { <nl> + } <nl> + / / abstract - - > ^ Abstract . * $ <nl> + abstract class NonAbstractClassName { <nl> + } <nl> + <nl> + abstract class AbstractClassOther { <nl> + abstract class NonAbstractInnerClass { <nl> + } <nl> + } <nl> + <nl> + class NonAbstractClass { <nl> + } <nl> + <nl> + / / ^ Abstract . * $ - - > abstract <nl> + class AbstractClass { <nl> + } <nl> + <nl> + abstract class AbstractClassName2 { <nl> + class AbstractInnerClass { <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassNameFormerFalsePositive . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassNameFormerFalsePositive . java <nl> new file mode 100644 <nl> index 0000000 . . e1912cc <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassNameFormerFalsePositive . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + public class InputAbstractClassNameFormerFalsePositive <nl> + { <nl> + class Abstract { <nl> + <nl> + } <nl> + <nl> + class AbstractClass { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputTypeName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputTypeName . java <nl> new file mode 100644 <nl> index 0000000 . . fa7128d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputTypeName . java <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + class inputHeaderClass { <nl> + <nl> + public interface inputHeaderInterface { } ; <nl> + / / comment <nl> + public enum inputHeaderEnum { one , two } ; <nl> + <nl> + public @ interface inputHeaderAnnotation { } ; <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputTypeParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputTypeParameterName . java <nl> new file mode 100644 <nl> index 0000000 . . d003cdd <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputTypeParameterName . java <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + import java . io . Serializable ; <nl> + <nl> + public class InputTypeParameterName < t > <nl> + { <nl> + public < TT > void foo ( ) { } <nl> + <nl> + < e _ e > void foo ( int i ) { <nl> + } <nl> + } <nl> + <nl> + class Other < foo extends Serializable & Cloneable > { <nl> + <nl> + foo getOne ( ) { <nl> + 	 return null ; / / comment <nl> + } <nl> + <nl> + < Tfo $ o2T extends foo > / * comment * / Tfo $ o2T getTwo ( Tfo $ o2T a ) { <nl> + 	 return null ; <nl> + } <nl> + <nl> + < foo extends Runnable > foo getShadow ( ) { <nl> + 	 return null ; <nl> + } <nl> + <nl> + static class Junk < foo > { <nl> + < _ fo extends foo > void getMoreFoo ( ) { <nl> + 	 } <nl> + } <nl> + } <nl> + <nl> + class MoreOther < T extends Cloneable > { <nl> + <nl> + < E extends T > void getMore ( ) { <nl> + new Other ( ) { <nl> + < T > void getMoreFoo ( ) { <nl> + 	 } <nl> + 	 } ; <nl> + 	 <nl> + / / Other o = new Other ( ) { <nl> + / / < EE > void getMoreFoo ( ) { <nl> + / / } <nl> + / / } ; <nl> + } <nl> + } <nl> + <nl> + interface Boo < Input > { <nl> + Input boo ( ) ; <nl> + } <nl> + <nl> + interface FooInterface < T > { <nl> + T foo ( ) ; <nl> + } <nl> + <nl> + interface FooInterface2 { <nl> + Input foo ( ) ; <nl> + } <nl> + <nl> + class Input { <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / AbstractMultisetSetCountTester . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / AbstractMultisetSetCountTester . java <nl> deleted file mode 100644 <nl> index 5d1ebae . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / AbstractMultisetSetCountTester . java <nl> + + + / dev / null <nl> @ @ - 1 , 18 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . naming ; <nl> - <nl> - public abstract class AbstractMultisetSetCountTester < E > { <nl> - <nl> - private static final String SUPPORTS _ REMOVE = " " ; <nl> - <nl> - @ CollectionFeature . Require ( absent = SUPPORTS _ REMOVE ) <nl> - public void testSetCount _ negative _ removeUnsupported ( ) { <nl> - } <nl> - } <nl> - <nl> - @ interface CollectionFeature { <nl> - <nl> - public @ interface Require <nl> - { <nl> - String absent ( ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbbreviationAsWordInTypeNameCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbbreviationAsWordInTypeNameCheck . java <nl> deleted file mode 100644 <nl> index 770a53c . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbbreviationAsWordInTypeNameCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 104 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . naming ; <nl> - <nl> - abstract class IIIInputAbstractClassName { <nl> - } <nl> - <nl> - abstract class NonAAAAbstractClassName { <nl> - } <nl> - <nl> - abstract class FactoryWithBADNAme { <nl> - } <nl> - <nl> - abstract class AbstractCLASSName { <nl> - abstract class NonAbstractInnerClass { <nl> - } <nl> - } <nl> - <nl> - abstract class ClassFactory1 { <nl> - abstract class WellNamedFactory { <nl> - } <nl> - } <nl> - <nl> - class NonAbstractClass1 { <nl> - } <nl> - <nl> - class AbstractClass1 { <nl> - } <nl> - <nl> - class Class1Factory1 { <nl> - } <nl> - <nl> - abstract class AbstractClassName3 { <nl> - class AbstractINNERRClass { <nl> - } <nl> - } <nl> - <nl> - abstract class Class3Factory { <nl> - class WellNamedFACTORY { <nl> - 	 public void marazmaticMETHODName ( ) { <nl> - 	 	 int marazmaticVARIABLEName = 2 ; <nl> - 	 	 int MARAZMATICVariableName = 1 ; <nl> - 	 } <nl> - } <nl> - } <nl> - <nl> - interface Directions { <nl> - int RIGHT = 1 ; <nl> - int LEFT = 2 ; <nl> - int UP = 3 ; <nl> - int DOWN = 4 ; <nl> - } <nl> - <nl> - interface BadNameForInterfeis <nl> - { <nl> - void interfaceMethod ( ) ; <nl> - } <nl> - <nl> - abstract class NonAAAAbstractClassName2 { <nl> - 	 public int serialNUMBER = 6 ; <nl> - 	 public final int s1erialNUMBER = 6 ; <nl> - 	 private static int s2erialNUMBER = 6 ; <nl> - 	 private static final int s3erialNUMBER = 6 ; <nl> - } <nl> - <nl> - interface Interface1 { <nl> - 	 <nl> - 	 String VALUEEEE = " value " ; / / in interface this is final / static <nl> - 	 <nl> - } <nl> - <nl> - interface Interface2 { <nl> - 	 <nl> - 	 static String VALUEEEE = " value " ; / / in interface this is final / static <nl> - 	 <nl> - } <nl> - <nl> - interface Interface3 { <nl> - 	 <nl> - 	 final String VALUEEEE = " value " ; / / in interface this is final / static <nl> - 	 <nl> - } <nl> - <nl> - interface Interface4 { <nl> - 	 <nl> - 	 final static String VALUEEEE = " value " ; / / in interface this is final / static <nl> - 	 <nl> - } <nl> - <nl> - class FIleNameFormatException extends Exception { <nl> - <nl> - private static final long serialVersionUID = 1L ; <nl> - <nl> - public FIleNameFormatException ( Exception e ) { <nl> - super ( e ) ; <nl> - } <nl> - } <nl> - <nl> - class StateX { <nl> - int userID ; <nl> - int scaleX , scaleY , scaleZ ; <nl> - <nl> - int getScaleX ( ) { <nl> - return this . scaleX ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java <nl> deleted file mode 100644 <nl> index c965d1a . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java <nl> + + + / dev / null <nl> @ @ - 1 , 39 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . naming ; <nl> - <nl> - import org . junit . Before ; <nl> - <nl> - abstract class NonAAAAbstractClassName1 extends Class1 { <nl> - 	 public int serialNUMBER = 6 ; <nl> - 	 public final int s1erialNUMBER = 6 ; <nl> - 	 private static int s2erialNUMBER = 6 ; <nl> - 	 private static final int s3erialNUMBER = 6 ; <nl> - 	 <nl> - 	 @ Override <nl> - 	 @ SuppressWarnings ( value = { " " } ) <nl> - 	 @ Before <nl> - 	 protected void oveRRRRRrriddenMethod ( ) { <nl> - 	 int a = 0 ; <nl> - 	 / / blah - blah <nl> - 	 } <nl> - } <nl> - <nl> - class Class1 { <nl> - @ SuppressWarnings ( value = { " " } ) <nl> - protected void oveRRRRRrriddenMethod ( ) { <nl> - int a = 0 ; <nl> - / / blah - blah <nl> - } <nl> - <nl> - } <nl> - <nl> - class Class2 extends Class1 { <nl> - <nl> - @ Override <nl> - @ SuppressWarnings ( value = { " " } ) <nl> - @ Before <nl> - 	 protected void oveRRRRRrriddenMethod ( ) { <nl> - int a = 0 ; <nl> - / / blah - blah <nl> - } <nl> - <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbstractClassName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbstractClassName . java <nl> deleted file mode 100644 <nl> index 425c10a . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbstractClassName . java <nl> + + + / dev / null <nl> @ @ - 1 , 24 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . naming ; <nl> - <nl> - abstract public class InputAbstractClassName { <nl> - } <nl> - / / abstract - - > ^ Abstract . * $ <nl> - abstract class NonAbstractClassName { <nl> - } <nl> - <nl> - abstract class AbstractClassOther { <nl> - abstract class NonAbstractInnerClass { <nl> - } <nl> - } <nl> - <nl> - class NonAbstractClass { <nl> - } <nl> - <nl> - / / ^ Abstract . * $ - - > abstract <nl> - class AbstractClass { <nl> - } <nl> - <nl> - abstract class AbstractClassName2 { <nl> - class AbstractInnerClass { <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbstractClassNameFormerFalsePositive . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbstractClassNameFormerFalsePositive . java <nl> deleted file mode 100644 <nl> index bcfc28d . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbstractClassNameFormerFalsePositive . java <nl> + + + / dev / null <nl> @ @ - 1 , 12 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . naming ; <nl> - <nl> - public class InputAbstractClassNameFormerFalsePositive <nl> - { <nl> - class Abstract { <nl> - <nl> - } <nl> - <nl> - class AbstractClass { <nl> - <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java <nl> deleted file mode 100644 <nl> index 982b906 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java <nl> + + + / dev / null <nl> @ @ - 1 , 11 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . naming ; <nl> - <nl> - class inputHeaderClass { <nl> - <nl> - public interface inputHeaderInterface { } ; <nl> - / / comment <nl> - public enum inputHeaderEnum { one , two } ; <nl> - <nl> - public @ interface inputHeaderAnnotation { } ; <nl> - <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeParameterName . java <nl> deleted file mode 100644 <nl> index f2d7d8c . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeParameterName . java <nl> + + + / dev / null <nl> @ @ - 1 , 62 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . naming ; <nl> - <nl> - import java . io . Serializable ; <nl> - <nl> - public class InputTypeParameterName < t > <nl> - { <nl> - public < TT > void foo ( ) { } <nl> - <nl> - < e _ e > void foo ( int i ) { <nl> - } <nl> - } <nl> - <nl> - class Other < foo extends Serializable & Cloneable > { <nl> - <nl> - foo getOne ( ) { <nl> - 	 return null ; / / comment <nl> - } <nl> - <nl> - < Tfo $ o2T extends foo > / * comment * / Tfo $ o2T getTwo ( Tfo $ o2T a ) { <nl> - 	 return null ; <nl> - } <nl> - <nl> - < foo extends Runnable > foo getShadow ( ) { <nl> - 	 return null ; <nl> - } <nl> - <nl> - static class Junk < foo > { <nl> - < _ fo extends foo > void getMoreFoo ( ) { <nl> - 	 } <nl> - } <nl> - } <nl> - <nl> - class MoreOther < T extends Cloneable > { <nl> - <nl> - < E extends T > void getMore ( ) { <nl> - new Other ( ) { <nl> - < T > void getMoreFoo ( ) { <nl> - 	 } <nl> - 	 } ; <nl> - 	 <nl> - / / Other o = new Other ( ) { <nl> - / / < EE > void getMoreFoo ( ) { <nl> - / / } <nl> - / / } ; <nl> - } <nl> - } <nl> - <nl> - interface Boo < Input > { <nl> - Input boo ( ) ; <nl> - } <nl> - <nl> - interface FooInterface < T > { <nl> - T foo ( ) ; <nl> - } <nl> - <nl> - interface FooInterface2 { <nl> - Input foo ( ) ; <nl> - } <nl> - <nl> - class Input { <nl> - <nl> - }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CommitValidationTest . java 
 index 137e72a . . 16e9743 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CommitValidationTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CommitValidationTest . java 
 @ @ - 112 , 17 + 112 , 26 @ @ public class CommitValidationTest { 
 @ Test 
 public void testCommitMessage ( ) { 
 assertFalse ( " should not accept commit message with periods on end " , 
 - ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( " minor : Test . Test . " ) . matches ( ) ) ; 
 + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " minor : Test . Test . " ) ) 
 + . matches ( ) ) ; 
 assertFalse ( " should not accept commit message with spaces on end " , 
 - ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( " minor : Test . " ) . matches ( ) ) ; 
 + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " minor : Test . " ) ) 
 + . matches ( ) ) ; 
 assertFalse ( " should not accept commit message with tabs on end " , 
 - ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( " minor : Test . \ t " ) . matches ( ) ) ; 
 - assertFalse ( " should not accept commit message with newline on end " , 
 - ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( " minor : Test . \ n " ) . matches ( ) ) ; 
 + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " minor : Test . \ t " ) ) 
 + . matches ( ) ) ; 
 + assertFalse ( " should not accept commit message with period on end , ignoring new line " , 
 + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " minor : Test . \ n " ) ) 
 + . matches ( ) ) ; 
 assertFalse ( " should not accept commit message with missing prefix " , 
 - ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( " Test . Test " ) . matches ( ) ) ; 
 + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " Test . Test " ) ) . matches ( ) ) ; 
 + / / test ' testCommitMessageHasSingleLine ' verifies that nothing is pass that new line 
 + assertTrue ( " should accept commit message with new line on end and no period before it " , 
 + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " minor : Test \ n " ) ) 
 + . matches ( ) ) ; 
 assertTrue ( " should accept commit message that ends properly " , 
 - ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( " minor : Test . Test " ) . matches ( ) ) ; 
 + ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( fixCommitMessage ( " minor : Test . Test " ) ) 
 + . matches ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 130 , 12 + 139 , 17 @ @ public class CommitValidationTest { 
 for ( RevCommit commit : filterValidCommits ( lastCommits ) ) { 
 final String commitId = commit . getId ( ) . getName ( ) ; 
 final String commitMessage = commit . getFullMessage ( ) ; 
 - final Matcher matcher = ACCEPTED _ COMMIT _ MESSAGE _ PATTERN . matcher ( commitMessage ) ; 
 + final Matcher matcher = ACCEPTED _ COMMIT _ MESSAGE _ PATTERN 
 + . matcher ( fixCommitMessage ( commitMessage ) ) ; 
 assertTrue ( getInvalidCommitMessageFormattingError ( commitId , commitMessage ) , 
 matcher . matches ( ) ) ; 
 } 
 } 
 
 + private static String fixCommitMessage ( String fullMessage ) { 
 + return fullMessage . split ( " \ \ r ? \ \ n " ) [ 0 ] ; 
 + } 
 + 
 @ Test 
 public void testCommitMessageHasSingleLine ( ) { 
 for ( RevCommit commit : filterValidCommits ( lastCommits ) ) {

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 index b90d0b7 . . 3ac4f0b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . naming ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . naming . AbbreviationAsWordInNameCheck . MSG _ KEY ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 28 , 10 + 31 , 15 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 - 
 / * * Warning message . * / 
 private String warningMessage ; 
 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " naming " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testTypeNamesForThreePermittedCapitalLetters ( ) throws Exception { 
 
 @ @ - 50 , 7 + 58 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 37 : " + warningMessage , 
 } ; 
 
 - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 68 , 7 + 76 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 32 : " + warningMessage , 
 } ; 
 
 - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 86 , 7 + 94 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 37 : " + warningMessage , 
 } ; 
 
 - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 112 , 7 + 120 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 58 : " + warningMessage , 
 } ; 
 
 - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 141 , 7 + 149 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 84 : " + warningMessage , 
 } ; 
 
 - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 166 , 7 + 174 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 38 : " + warningMessage , 
 } ; 
 
 - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 194 , 7 + 202 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 60 : " + warningMessage , / / no ignore for static 
 } ; 
 
 - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 221 , 7 + 229 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 59 : " + warningMessage , / / no ignore for final 
 } ; 
 
 - verify ( checkConfig , getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 240 , 7 + 248 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java " ) , expected ) ; 
 + getPath ( " InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 286 , 7 + 294 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 98 : " + warningMessage , 
 } ; 
 verify ( checkConfig , 
 - getPath ( " naming / InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 + getPath ( " InputAbbreviationAsWordInTypeNameCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 301 , 6 + 309 , 6 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checkConfig , getPath ( " naming / AbstractMultisetSetCountTester . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " AbstractMultisetSetCountTester . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java 
 index 0d13204 . . 795187a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractClassNameChe 
 import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractClassNameCheck . NO _ ABSTRACT _ CLASS _ MODIFIER ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 32 , 6 + 33 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class AbstractClassNameCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " naming " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testIllegalAbstractClassName ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 @ @ - 47 , 7 + 54 , 7 @ @ public class AbstractClassNameCheckTest extends BaseCheckTestSupport { 
 " 10 : 5 : " + getCheckMessage ( ILLEGAL _ ABSTRACT _ CLASS _ NAME , " NonAbstractInnerClass " , pattern ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " naming " + File . separator + " InputAbstractClassName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbstractClassName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 61 , 7 + 68 , 7 @ @ public class AbstractClassNameCheckTest extends BaseCheckTestSupport { 
 " 22 : 5 : " + getCheckMessage ( NO _ ABSTRACT _ CLASS _ MODIFIER , " AbstractInnerClass " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " naming " + File . separator + " InputAbstractClassName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbstractClassName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 80 , 7 + 87 , 7 @ @ public class AbstractClassNameCheckTest extends BaseCheckTestSupport { 
 " 22 : 5 : " + getCheckMessage ( NO _ ABSTRACT _ CLASS _ MODIFIER , " AbstractInnerClass " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " naming " + File . separator + " InputAbstractClassName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbstractClassName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 91 , 8 + 98 , 7 @ @ public class AbstractClassNameCheckTest extends BaseCheckTestSupport { 
 " 9 : 5 : " + getCheckMessage ( NO _ ABSTRACT _ CLASS _ MODIFIER , " AbstractClass " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " naming " + File . separator 
 - + " InputAbstractClassNameFormerFalsePositive . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbstractClassNameFormerFalsePositive . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java 
 index e3790d3 . . 6a2d83f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeNameCheckTest . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import java . io . File ; 
 import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 - import org . junit . Before ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 @ @ - 36 , 12 + 35 , 10 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 
 public class TypeNameCheckTest 
 extends BaseCheckTestSupport { 
 - 
 - private String inputFilename ; 
 - 
 - @ Before 
 - public void setUp ( ) throws IOException { 
 - inputFilename = getPath ( " naming " + File . separator + " InputTypeName . java " ) ; 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " naming " + File . separator + filename ) ; 
 } 
 
 @ Test 
 @ @ - 51 , 7 + 48 , 7 @ @ public class TypeNameCheckTest 
 createCheckConfig ( TypeNameCheck . class ) ; 
 checkConfig . addAttribute ( " format " , " ^ inputHe " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , inputFilename , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypeName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 69 , 7 + 66 , 7 @ @ public class TypeNameCheckTest 
 " 9 : 23 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , 
 " inputHeaderAnnotation " , DEFAULT _ PATTERN ) , 
 } ; 
 - verify ( checkConfig , inputFilename , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypeName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 82 , 7 + 79 , 7 @ @ public class TypeNameCheckTest 
 " 3 : 7 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , 
 " inputHeaderClass " , DEFAULT _ PATTERN ) , 
 } ; 
 - verify ( checkConfig , inputFilename , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypeName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 95 , 7 + 92 , 7 @ @ public class TypeNameCheckTest 
 " 5 : 22 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , 
 " inputHeaderInterface " , DEFAULT _ PATTERN ) , 
 } ; 
 - verify ( checkConfig , inputFilename , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypeName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 108 , 7 + 105 , 7 @ @ public class TypeNameCheckTest 
 " 7 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , 
 " inputHeaderEnum " , DEFAULT _ PATTERN ) , 
 } ; 
 - verify ( checkConfig , inputFilename , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypeName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 121 , 6 + 118 , 6 @ @ public class TypeNameCheckTest 
 " 9 : 23 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , 
 " inputHeaderAnnotation " , DEFAULT _ PATTERN ) , 
 } ; 
 - verify ( checkConfig , inputFilename , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypeName . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeParameterNameTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeParameterNameTest . java 
 index c6319a9 . . 14d8745 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeParameterNameTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / TypeParameterNameTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MS 
 import static org . junit . Assert . assertArrayEquals ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . Test ; 
 
 @ @ - 32 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class TypeParameterNameTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " naming " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetInterfaceRequiredTokens ( ) { 
 @ @ - 70 , 7 + 76 , 7 @ @ public class TypeParameterNameTest 
 " 13 : 14 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , 
 " 27 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " naming " + File . separator + " InputTypeParameterName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 88 , 7 + 94 , 7 @ @ public class TypeParameterNameTest 
 " 23 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , 
 " 28 : 10 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " _ fo " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " naming " + File . separator + " InputTypeParameterName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 102 , 7 + 108 , 7 @ @ public class TypeParameterNameTest 
 final String [ ] expected = { 
 " 48 : 15 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Input " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " naming " + File . separator + " InputTypeParameterName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 118 , 7 + 124 , 7 @ @ public class TypeParameterNameTest 
 " 5 : 38 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t " , pattern ) , 
 " 33 : 18 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " naming " + File . separator + " InputTypeParameterName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 139 , 7 + 145 , 7 @ @ public class TypeParameterNameTest 
 " 37 : 14 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , 
 / / " 40 : 14 : Name ' EE ' must match pattern ' ^ foo $ ' . " , 
 } ; 
 - verify ( checkConfig , getPath ( " naming " + File . separator + " InputTypeParameterName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 155 , 7 + 161 , 7 @ @ public class TypeParameterNameTest 
 " 48 : 15 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " Input " , pattern ) , 
 " 52 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " naming " + File . separator + " InputTypeParameterName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / AbstractMultisetSetCountTester . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / AbstractMultisetSetCountTester . java 
 new file mode 100644 
 index 0000000 . . 02a21ca 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / AbstractMultisetSetCountTester . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + public abstract class AbstractMultisetSetCountTester < E > { 
 + 
 + private static final String SUPPORTS _ REMOVE = " " ; 
 + 
 + @ CollectionFeature . Require ( absent = SUPPORTS _ REMOVE ) 
 + public void testSetCount _ negative _ removeUnsupported ( ) { 
 + } 
 + } 
 + 
 + @ interface CollectionFeature { 
 + 
 + public @ interface Require 
 + { 
 + String absent ( ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameCheck . java 
 new file mode 100644 
 index 0000000 . . 6dd9a7e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameCheck . java 
 @ @ - 0 , 0 + 1 , 104 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + abstract class IIIInputAbstractClassName { 
 + } 
 + 
 + abstract class NonAAAAbstractClassName { 
 + } 
 + 
 + abstract class FactoryWithBADNAme { 
 + } 
 + 
 + abstract class AbstractCLASSName { 
 + abstract class NonAbstractInnerClass { 
 + } 
 + } 
 + 
 + abstract class ClassFactory1 { 
 + abstract class WellNamedFactory { 
 + } 
 + } 
 + 
 + class NonAbstractClass1 { 
 + } 
 + 
 + class AbstractClass1 { 
 + } 
 + 
 + class Class1Factory1 { 
 + } 
 + 
 + abstract class AbstractClassName3 { 
 + class AbstractINNERRClass { 
 + } 
 + } 
 + 
 + abstract class Class3Factory { 
 + class WellNamedFACTORY { 
 + 	 public void marazmaticMETHODName ( ) { 
 + 	 	 int marazmaticVARIABLEName = 2 ; 
 + 	 	 int MARAZMATICVariableName = 1 ; 
 + 	 } 
 + } 
 + } 
 + 
 + interface Directions { 
 + int RIGHT = 1 ; 
 + int LEFT = 2 ; 
 + int UP = 3 ; 
 + int DOWN = 4 ; 
 + } 
 + 
 + interface BadNameForInterfeis 
 + { 
 + void interfaceMethod ( ) ; 
 + } 
 + 
 + abstract class NonAAAAbstractClassName2 { 
 + 	 public int serialNUMBER = 6 ; 
 + 	 public final int s1erialNUMBER = 6 ; 
 + 	 private static int s2erialNUMBER = 6 ; 
 + 	 private static final int s3erialNUMBER = 6 ; 
 + } 
 + 
 + interface Interface1 { 
 + 	 
 + 	 String VALUEEEE = " value " ; / / in interface this is final / static 
 + 	 
 + } 
 + 
 + interface Interface2 { 
 + 	 
 + 	 static String VALUEEEE = " value " ; / / in interface this is final / static 
 + 	 
 + } 
 + 
 + interface Interface3 { 
 + 	 
 + 	 final String VALUEEEE = " value " ; / / in interface this is final / static 
 + 	 
 + } 
 + 
 + interface Interface4 { 
 + 	 
 + 	 final static String VALUEEEE = " value " ; / / in interface this is final / static 
 + 	 
 + } 
 + 
 + class FIleNameFormatException extends Exception { 
 + 
 + private static final long serialVersionUID = 1L ; 
 + 
 + public FIleNameFormatException ( Exception e ) { 
 + super ( e ) ; 
 + } 
 + } 
 + 
 + class StateX { 
 + int userID ; 
 + int scaleX , scaleY , scaleZ ; 
 + 
 + int getScaleX ( ) { 
 + return this . scaleX ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java 
 new file mode 100644 
 index 0000000 . . 9c2031d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + import org . junit . Before ; 
 + 
 + abstract class NonAAAAbstractClassName1 extends Class1 { 
 + 	 public int serialNUMBER = 6 ; 
 + 	 public final int s1erialNUMBER = 6 ; 
 + 	 private static int s2erialNUMBER = 6 ; 
 + 	 private static final int s3erialNUMBER = 6 ; 
 + 	 
 + 	 @ Override 
 + 	 @ SuppressWarnings ( value = { " " } ) 
 + 	 @ Before 
 + 	 protected void oveRRRRRrriddenMethod ( ) { 
 + 	 int a = 0 ; 
 + 	 / / blah - blah 
 + 	 } 
 + } 
 + 
 + class Class1 { 
 + @ SuppressWarnings ( value = { " " } ) 
 + protected void oveRRRRRrriddenMethod ( ) { 
 + int a = 0 ; 
 + / / blah - blah 
 + } 
 + 
 + } 
 + 
 + class Class2 extends Class1 { 
 + 
 + @ Override 
 + @ SuppressWarnings ( value = { " " } ) 
 + @ Before 
 + 	 protected void oveRRRRRrriddenMethod ( ) { 
 + int a = 0 ; 
 + / / blah - blah 
 + } 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassName . java 
 new file mode 100644 
 index 0000000 . . 70f96bf 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassName . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + abstract public class InputAbstractClassName { 
 + } 
 + / / abstract - - > ^ Abstract . * $ 
 + abstract class NonAbstractClassName { 
 + } 
 + 
 + abstract class AbstractClassOther { 
 + abstract class NonAbstractInnerClass { 
 + } 
 + } 
 + 
 + class NonAbstractClass { 
 + } 
 + 
 + / / ^ Abstract . * $ - - > abstract 
 + class AbstractClass { 
 + } 
 + 
 + abstract class AbstractClassName2 { 
 + class AbstractInnerClass { 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassNameFormerFalsePositive . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassNameFormerFalsePositive . java 
 new file mode 100644 
 index 0000000 . . e1912cc 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassNameFormerFalsePositive . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + public class InputAbstractClassNameFormerFalsePositive 
 + { 
 + class Abstract { 
 + 
 + } 
 + 
 + class AbstractClass { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputTypeName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputTypeName . java 
 new file mode 100644 
 index 0000000 . . fa7128d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputTypeName . java 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + class inputHeaderClass { 
 + 
 + public interface inputHeaderInterface { } ; 
 + / / comment 
 + public enum inputHeaderEnum { one , two } ; 
 + 
 + public @ interface inputHeaderAnnotation { } ; 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputTypeParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputTypeParameterName . java 
 new file mode 100644 
 index 0000000 . . d003cdd 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputTypeParameterName . java 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + import java . io . Serializable ; 
 + 
 + public class InputTypeParameterName < t > 
 + { 
 + public < TT > void foo ( ) { } 
 + 
 + < e _ e > void foo ( int i ) { 
 + } 
 + } 
 + 
 + class Other < foo extends Serializable & Cloneable > { 
 + 
 + foo getOne ( ) { 
 + 	 return null ; / / comment 
 + } 
 + 
 + < Tfo $ o2T extends foo > / * comment * / Tfo $ o2T getTwo ( Tfo $ o2T a ) { 
 + 	 return null ; 
 + } 
 + 
 + < foo extends Runnable > foo getShadow ( ) { 
 + 	 return null ; 
 + } 
 + 
 + static class Junk < foo > { 
 + < _ fo extends foo > void getMoreFoo ( ) { 
 + 	 } 
 + } 
 + } 
 + 
 + class MoreOther < T extends Cloneable > { 
 + 
 + < E extends T > void getMore ( ) { 
 + new Other ( ) { 
 + < T > void getMoreFoo ( ) { 
 + 	 } 
 + 	 } ; 
 + 	 
 + / / Other o = new Other ( ) { 
 + / / < EE > void getMoreFoo ( ) { 
 + / / } 
 + / / } ; 
 + } 
 + } 
 + 
 + interface Boo < Input > { 
 + Input boo ( ) ; 
 + } 
 + 
 + interface FooInterface < T > { 
 + T foo ( ) ; 
 + } 
 + 
 + interface FooInterface2 { 
 + Input foo ( ) ; 
 + } 
 + 
 + class Input { 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / AbstractMultisetSetCountTester . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / AbstractMultisetSetCountTester . java 
 deleted file mode 100644 
 index 5d1ebae . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / AbstractMultisetSetCountTester . java 
 + + + / dev / null 
 @ @ - 1 , 18 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . naming ; 
 - 
 - public abstract class AbstractMultisetSetCountTester < E > { 
 - 
 - private static final String SUPPORTS _ REMOVE = " " ; 
 - 
 - @ CollectionFeature . Require ( absent = SUPPORTS _ REMOVE ) 
 - public void testSetCount _ negative _ removeUnsupported ( ) { 
 - } 
 - } 
 - 
 - @ interface CollectionFeature { 
 - 
 - public @ interface Require 
 - { 
 - String absent ( ) ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbbreviationAsWordInTypeNameCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbbreviationAsWordInTypeNameCheck . java 
 deleted file mode 100644 
 index 770a53c . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbbreviationAsWordInTypeNameCheck . java 
 + + + / dev / null 
 @ @ - 1 , 104 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . naming ; 
 - 
 - abstract class IIIInputAbstractClassName { 
 - } 
 - 
 - abstract class NonAAAAbstractClassName { 
 - } 
 - 
 - abstract class FactoryWithBADNAme { 
 - } 
 - 
 - abstract class AbstractCLASSName { 
 - abstract class NonAbstractInnerClass { 
 - } 
 - } 
 - 
 - abstract class ClassFactory1 { 
 - abstract class WellNamedFactory { 
 - } 
 - } 
 - 
 - class NonAbstractClass1 { 
 - } 
 - 
 - class AbstractClass1 { 
 - } 
 - 
 - class Class1Factory1 { 
 - } 
 - 
 - abstract class AbstractClassName3 { 
 - class AbstractINNERRClass { 
 - } 
 - } 
 - 
 - abstract class Class3Factory { 
 - class WellNamedFACTORY { 
 - 	 public void marazmaticMETHODName ( ) { 
 - 	 	 int marazmaticVARIABLEName = 2 ; 
 - 	 	 int MARAZMATICVariableName = 1 ; 
 - 	 } 
 - } 
 - } 
 - 
 - interface Directions { 
 - int RIGHT = 1 ; 
 - int LEFT = 2 ; 
 - int UP = 3 ; 
 - int DOWN = 4 ; 
 - } 
 - 
 - interface BadNameForInterfeis 
 - { 
 - void interfaceMethod ( ) ; 
 - } 
 - 
 - abstract class NonAAAAbstractClassName2 { 
 - 	 public int serialNUMBER = 6 ; 
 - 	 public final int s1erialNUMBER = 6 ; 
 - 	 private static int s2erialNUMBER = 6 ; 
 - 	 private static final int s3erialNUMBER = 6 ; 
 - } 
 - 
 - interface Interface1 { 
 - 	 
 - 	 String VALUEEEE = " value " ; / / in interface this is final / static 
 - 	 
 - } 
 - 
 - interface Interface2 { 
 - 	 
 - 	 static String VALUEEEE = " value " ; / / in interface this is final / static 
 - 	 
 - } 
 - 
 - interface Interface3 { 
 - 	 
 - 	 final String VALUEEEE = " value " ; / / in interface this is final / static 
 - 	 
 - } 
 - 
 - interface Interface4 { 
 - 	 
 - 	 final static String VALUEEEE = " value " ; / / in interface this is final / static 
 - 	 
 - } 
 - 
 - class FIleNameFormatException extends Exception { 
 - 
 - private static final long serialVersionUID = 1L ; 
 - 
 - public FIleNameFormatException ( Exception e ) { 
 - super ( e ) ; 
 - } 
 - } 
 - 
 - class StateX { 
 - int userID ; 
 - int scaleX , scaleY , scaleZ ; 
 - 
 - int getScaleX ( ) { 
 - return this . scaleX ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java 
 deleted file mode 100644 
 index c965d1a . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbbreviationAsWordInTypeNameCheckOverridableMethod . java 
 + + + / dev / null 
 @ @ - 1 , 39 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . naming ; 
 - 
 - import org . junit . Before ; 
 - 
 - abstract class NonAAAAbstractClassName1 extends Class1 { 
 - 	 public int serialNUMBER = 6 ; 
 - 	 public final int s1erialNUMBER = 6 ; 
 - 	 private static int s2erialNUMBER = 6 ; 
 - 	 private static final int s3erialNUMBER = 6 ; 
 - 	 
 - 	 @ Override 
 - 	 @ SuppressWarnings ( value = { " " } ) 
 - 	 @ Before 
 - 	 protected void oveRRRRRrriddenMethod ( ) { 
 - 	 int a = 0 ; 
 - 	 / / blah - blah 
 - 	 } 
 - } 
 - 
 - class Class1 { 
 - @ SuppressWarnings ( value = { " " } ) 
 - protected void oveRRRRRrriddenMethod ( ) { 
 - int a = 0 ; 
 - / / blah - blah 
 - } 
 - 
 - } 
 - 
 - class Class2 extends Class1 { 
 - 
 - @ Override 
 - @ SuppressWarnings ( value = { " " } ) 
 - @ Before 
 - 	 protected void oveRRRRRrriddenMethod ( ) { 
 - int a = 0 ; 
 - / / blah - blah 
 - } 
 - 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbstractClassName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbstractClassName . java 
 deleted file mode 100644 
 index 425c10a . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbstractClassName . java 
 + + + / dev / null 
 @ @ - 1 , 24 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . naming ; 
 - 
 - abstract public class InputAbstractClassName { 
 - } 
 - / / abstract - - > ^ Abstract . * $ 
 - abstract class NonAbstractClassName { 
 - } 
 - 
 - abstract class AbstractClassOther { 
 - abstract class NonAbstractInnerClass { 
 - } 
 - } 
 - 
 - class NonAbstractClass { 
 - } 
 - 
 - / / ^ Abstract . * $ - - > abstract 
 - class AbstractClass { 
 - } 
 - 
 - abstract class AbstractClassName2 { 
 - class AbstractInnerClass { 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbstractClassNameFormerFalsePositive . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbstractClassNameFormerFalsePositive . java 
 deleted file mode 100644 
 index bcfc28d . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputAbstractClassNameFormerFalsePositive . java 
 + + + / dev / null 
 @ @ - 1 , 12 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . naming ; 
 - 
 - public class InputAbstractClassNameFormerFalsePositive 
 - { 
 - class Abstract { 
 - 
 - } 
 - 
 - class AbstractClass { 
 - 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java 
 deleted file mode 100644 
 index 982b906 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeName . java 
 + + + / dev / null 
 @ @ - 1 , 11 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . naming ; 
 - 
 - class inputHeaderClass { 
 - 
 - public interface inputHeaderInterface { } ; 
 - / / comment 
 - public enum inputHeaderEnum { one , two } ; 
 - 
 - public @ interface inputHeaderAnnotation { } ; 
 - 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeParameterName . java 
 deleted file mode 100644 
 index f2d7d8c . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputTypeParameterName . java 
 + + + / dev / null 
 @ @ - 1 , 62 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . naming ; 
 - 
 - import java . io . Serializable ; 
 - 
 - public class InputTypeParameterName < t > 
 - { 
 - public < TT > void foo ( ) { } 
 - 
 - < e _ e > void foo ( int i ) { 
 - } 
 - } 
 - 
 - class Other < foo extends Serializable & Cloneable > { 
 - 
 - foo getOne ( ) { 
 - 	 return null ; / / comment 
 - } 
 - 
 - < Tfo $ o2T extends foo > / * comment * / Tfo $ o2T getTwo ( Tfo $ o2T a ) { 
 - 	 return null ; 
 - } 
 - 
 - < foo extends Runnable > foo getShadow ( ) { 
 - 	 return null ; 
 - } 
 - 
 - static class Junk < foo > { 
 - < _ fo extends foo > void getMoreFoo ( ) { 
 - 	 } 
 - } 
 - } 
 - 
 - class MoreOther < T extends Cloneable > { 
 - 
 - < E extends T > void getMore ( ) { 
 - new Other ( ) { 
 - < T > void getMoreFoo ( ) { 
 - 	 } 
 - 	 } ; 
 - 	 
 - / / Other o = new Other ( ) { 
 - / / < EE > void getMoreFoo ( ) { 
 - / / } 
 - / / } ; 
 - } 
 - } 
 - 
 - interface Boo < Input > { 
 - Input boo ( ) ; 
 - } 
 - 
 - interface FooInterface < T > { 
 - T foo ( ) ; 
 - } 
 - 
 - interface FooInterface2 { 
 - Input foo ( ) ; 
 - } 
 - 
 - class Input { 
 - 
 - }
