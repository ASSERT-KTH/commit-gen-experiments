BLEU SCORE: 0.04767707020457096

TEST MSG: Issue # 957 : Add VisibleForTesting annotation where applicable
GENERATED MSG: Return unmodifiable collections from methods . # 1555

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> index cd19d72 . . 9084a77 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import org . xml . sax . InputSource ; <nl> import org . xml . sax . SAXException ; <nl> import org . xml . sax . SAXParseException ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractLoader ; <nl> @ @ - 264 , 7 + 265 , 7 @ @ public final class ConfigurationLoader { <nl> * { @ code $ { } without a closing <nl> * { @ code } } <nl> * / <nl> - / / Package visible for testing purposes <nl> + @ VisibleForTesting <nl> static String replaceProperties ( <nl> String value , PropertyResolver props , String defaultValue ) <nl> throws CheckstyleException { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> index b741311 . . 33f5423 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . Set ; <nl> import org . apache . commons . logging . Log ; <nl> import org . apache . commons . logging . LogFactory ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Joiner ; <nl> import com . google . common . collect . Sets ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> @ @ - 74 , 6 + 75 , 7 @ @ class PackageObjectFactory implements ModuleFactory { <nl> * Registers a package name to use for shortName resolution . <nl> * @ param packageName the package name <nl> * / <nl> + @ VisibleForTesting <nl> void addPackage ( String packageName ) { <nl> packages . add ( packageName ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> index db07fc2 . . 13584bd 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java <nl> @ @ - 21 , 6 + 21 , 8 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import java . util . Map ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> + <nl> / * * <nl> * Serves as an abstract base class for all modules that report inspection <nl> * findings . Such modules have a Severity level which is used for the <nl> @ @ - 109 , 6 + 111 , 7 @ @ public abstract class AbstractViolationReporter <nl> * @ return name of a resource bundle that contains the messages <nl> * used by the module . <nl> * / <nl> + @ VisibleForTesting <nl> static String getMessageBundle ( final String className ) { <nl> final int endIndex = className . lastIndexOf ( ' . ' ) ; <nl> final String messages = " messages " ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> index 4d591d4 . . 410577b 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ import java . util . BitSet ; <nl> import antlr . CommonASTWithHiddenTokens ; <nl> import antlr . Token ; <nl> import antlr . collections . AST ; <nl> - <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> <nl> / * * <nl> @ @ - 192 , 6 + 192 , 7 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { <nl> * Set the parent token . <nl> * @ param parent the parent token <nl> * / <nl> + @ VisibleForTesting <nl> void setParent ( DetailAST parent ) { <nl> this . parent = parent ; <nl> final DetailAST nextSibling = getNextSibling ( ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java b / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java <nl> index 5ce2f9c . . 467d164 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java <nl> @ @ - 169 , 17 + 169 , 17 @ @ public final class Utils { <nl> * Returns the length of a String prefix with tabs expanded . <nl> * Each tab is counted as the number of characters is takes to <nl> * jump to the next tab stop . <nl> - * @ param string the input String <nl> + * @ param inputString the input String <nl> * @ param toIdx index in string ( exclusive ) where the calculation stops <nl> * @ param tabWidth the distance between tab stop position . <nl> * @ return the length of string . substring ( 0 , toIdx ) with tabs expanded . <nl> * / <nl> - public static int lengthExpandedTabs ( String string , <nl> + public static int lengthExpandedTabs ( String inputString , <nl> int toIdx , <nl> int tabWidth ) { <nl> int len = 0 ; <nl> for ( int idx = 0 ; idx < toIdx ; idx + + ) { <nl> - if ( string . charAt ( idx ) = = ' \ t ' ) { <nl> + if ( inputString . charAt ( idx ) = = ' \ t ' ) { <nl> len = ( len / tabWidth + 1 ) * tabWidth ; <nl> } <nl> else { <nl> @ @ - 253 , 13 + 253 , 13 @ @ public final class Utils { <nl> * prefixes at the expense of some readability . Suggested by SimplifyStartsWith PMD rule : <nl> * http : / / pmd . sourceforge . net / pmd - 5 . 3 . 1 / pmd - java / rules / java / optimizations . html # SimplifyStartsWith <nl> * <nl> - * @ param string the < code > String < / code > to check <nl> + * @ param value the < code > String < / code > to check <nl> * @ param prefix the prefix to find <nl> * @ return < code > true < / code > if the < code > char < / code > is a prefix of the given <nl> * < code > String < / code > ; < code > false < / code > otherwise . <nl> * / <nl> - public static boolean startsWithChar ( String string , char prefix ) { <nl> - return ! string . isEmpty ( ) & & string . charAt ( 0 ) = = prefix ; <nl> + public static boolean startsWithChar ( String value , char prefix ) { <nl> + return ! value . isEmpty ( ) & & value . charAt ( 0 ) = = prefix ; <nl> } <nl> <nl> / * * <nl> @ @ - 269 , 13 + 269 , 13 @ @ public final class Utils { <nl> * suffixes at the expense of some readability . Suggested by SimplifyStartsWith PMD rule : <nl> * http : / / pmd . sourceforge . net / pmd - 5 . 3 . 1 / pmd - java / rules / java / optimizations . html # SimplifyStartsWith <nl> * <nl> - * @ param string the < code > String < / code > to check <nl> + * @ param value the < code > String < / code > to check <nl> * @ param suffix the suffix to find <nl> * @ return < code > true < / code > if the < code > char < / code > is a suffix of the given <nl> * < code > String < / code > ; < code > false < / code > otherwise . <nl> * / <nl> - public static boolean endsWithChar ( String string , char suffix ) { <nl> - return ! string . isEmpty ( ) & & string . charAt ( string . length ( ) - 1 ) = = suffix ; <nl> + public static boolean endsWithChar ( String value , char suffix ) { <nl> + return ! value . isEmpty ( ) & & value . charAt ( value . length ( ) - 1 ) = = suffix ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> index 6c8432d . . edcb09d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> @ @ - 135 , 9 + 135 , 9 @ @ public final class FileContents implements CommentListener { <nl> * * / <nl> public void reportCComment ( int startLineNo , int startColNo , <nl> int endLineNo , int endColNo ) { <nl> - final String [ ] cc = extractCComment ( startLineNo , startColNo , <nl> + final String [ ] cComment = extractCComment ( startLineNo , startColNo , <nl> endLineNo , endColNo ) ; <nl> - final Comment comment = new Comment ( cc , startColNo , endLineNo , <nl> + final Comment comment = new Comment ( cComment , startColNo , endLineNo , <nl> endColNo ) ; <nl> <nl> / / save the comment <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java <nl> index ce646da . . 48507b2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java <nl> @ @ - 71 , 9 + 71 , 9 @ @ public class LineColumn implements Comparable < LineColumn > { <nl> if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { <nl> return false ; <nl> } <nl> - final LineColumn that = ( LineColumn ) o ; <nl> - return Objects . equals ( line , that . line ) <nl> - & & Objects . equals ( col , that . col ) ; <nl> + final LineColumn lineColumn = ( LineColumn ) o ; <nl> + return Objects . equals ( line , lineColumn . line ) <nl> + & & Objects . equals ( col , lineColumn . col ) ; <nl> } <nl> <nl> / * * { @ inheritDoc } * / <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java <nl> index 889a664 . . 25726aa 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java <nl> @ @ - 210 , 16 + 210 , 16 @ @ public final class LocalizedMessage <nl> if ( object = = null | | getClass ( ) ! = object . getClass ( ) ) { <nl> return false ; <nl> } <nl> - final LocalizedMessage that = ( LocalizedMessage ) object ; <nl> - return Objects . equals ( lineNo , that . lineNo ) <nl> - & & Objects . equals ( colNo , that . colNo ) <nl> - & & Objects . equals ( severityLevel , that . severityLevel ) <nl> - & & Objects . equals ( moduleId , that . moduleId ) <nl> - & & Objects . equals ( key , that . key ) <nl> - & & Objects . equals ( bundle , that . bundle ) <nl> - & & Objects . equals ( sourceClass , that . sourceClass ) <nl> - & & Objects . equals ( customMessage , that . customMessage ) <nl> - & & Arrays . equals ( args , that . args ) ; <nl> + final LocalizedMessage localizedMessage = ( LocalizedMessage ) object ; <nl> + return Objects . equals ( lineNo , localizedMessage . lineNo ) <nl> + & & Objects . equals ( colNo , localizedMessage . colNo ) <nl> + & & Objects . equals ( severityLevel , localizedMessage . severityLevel ) <nl> + & & Objects . equals ( moduleId , localizedMessage . moduleId ) <nl> + & & Objects . equals ( key , localizedMessage . key ) <nl> + & & Objects . equals ( bundle , localizedMessage . bundle ) <nl> + & & Objects . equals ( sourceClass , localizedMessage . sourceClass ) <nl> + & & Objects . equals ( customMessage , localizedMessage . customMessage ) <nl> + & & Arrays . equals ( args , localizedMessage . args ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> index 56f492d . . 6b508a0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> @ @ - 209 , 16 + 209 , 16 @ @ public final class AnnotationUseStyleCheck extends Check { <nl> * Retrieves an { @ link Enum Enum } type from a @ { link String String } . <nl> * @ param < T > the enum type <nl> * @ param enuclass the enum class <nl> - * @ param string the string representing the enum <nl> + * @ param value the string representing the enum <nl> * @ return the enum type <nl> * / <nl> private static < T extends Enum < T > > T getOption ( final Class < T > enuclass , <nl> - final String string ) { <nl> + final String value ) { <nl> try { <nl> - return Enum . valueOf ( enuclass , string . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; <nl> + return Enum . valueOf ( enuclass , value . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; <nl> } <nl> catch ( final IllegalArgumentException iae ) { <nl> - throw new ConversionException ( " unable to parse " + string , iae ) ; <nl> + throw new ConversionException ( " unable to parse " + value , iae ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> index 904db6b . . 4982e32 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> @ @ - 347 , 8 + 347 , 8 @ @ public class FinalLocalVariableCheck extends Check { <nl> case TokenTypes . INSTANCE _ INIT : <nl> case TokenTypes . METHOD _ DEF : <nl> final Map < String , DetailAST > state = scopeStack . pop ( ) ; <nl> - for ( DetailAST var : state . values ( ) ) { <nl> - log ( var . getLineNo ( ) , var . getColumnNo ( ) , MSG _ KEY , var <nl> + for ( DetailAST node : state . values ( ) ) { <nl> + log ( node . getLineNo ( ) , node . getColumnNo ( ) , MSG _ KEY , node <nl> . getText ( ) ) ; <nl> } <nl> break ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> index 32fcfbf . . 67f9bf4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> @ @ - 322 , 14 + 322 , 14 @ @ public class UnnecessaryParenthesesCheck extends Check { <nl> * Returns the specified string chopped to < code > MAX _ QUOTED _ LENGTH < / code > <nl> * plus an ellipsis ( . . . ) if the length of the string exceeds < code > <nl> * MAX _ QUOTED _ LENGTH < / code > . <nl> - * @ param string the string to potentially chop . <nl> + * @ param value the string to potentially chop . <nl> * @ return the chopped string if < code > string < / code > is longer than <nl> * < code > MAX _ QUOTED _ LENGTH < / code > ; otherwise < code > string < / code > . <nl> * / <nl> - private static String chopString ( String string ) { <nl> - if ( string . length ( ) > MAX _ QUOTED _ LENGTH ) { <nl> - return string . substring ( 0 , MAX _ QUOTED _ LENGTH ) + " . . . \ " " ; <nl> + private static String chopString ( String value ) { <nl> + if ( value . length ( ) > MAX _ QUOTED _ LENGTH ) { <nl> + return value . substring ( 0 , MAX _ QUOTED _ LENGTH ) + " . . . \ " " ; <nl> } <nl> - return string ; <nl> + return value ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> index 27cddbc . . aba9a0c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> @ @ - 198 , 9 + 198 , 9 @ @ public class JavadocTypeCheck <nl> <nl> if ( ! allowMissingParamTags ) { <nl> / / Check type parameters that should exist , do <nl> - for ( final String string : typeParamNames ) { <nl> + for ( final String typeParamName : typeParamNames ) { <nl> checkTypeParamTag ( <nl> - lineNo , tags , string ) ; <nl> + lineNo , tags , typeParamName ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / IntRangeFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / IntRangeFilter . java <nl> index 3d49028 . . 48d26a3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / IntRangeFilter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / IntRangeFilter . java <nl> @ @ - 63 , 8 + 63 , 8 @ @ class IntRangeFilter implements IntFilter { <nl> if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { <nl> return false ; <nl> } <nl> - final IntRangeFilter that = ( IntRangeFilter ) o ; <nl> - return Objects . equals ( lowerBound , that . lowerBound ) <nl> - & & Objects . equals ( upperBound , that . upperBound ) ; <nl> + final IntRangeFilter intRangeFilter = ( IntRangeFilter ) o ; <nl> + return Objects . equals ( lowerBound , intRangeFilter . lowerBound ) <nl> + & & Objects . equals ( upperBound , intRangeFilter . upperBound ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java <nl> index bd087ed . . 6cd1d9a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java <nl> @ @ - 165 , 11 + 165 , 11 @ @ public class SuppressElement <nl> if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { <nl> return false ; <nl> } <nl> - final SuppressElement that = ( SuppressElement ) o ; <nl> - return Objects . equals ( filePattern , that . filePattern ) <nl> - & & Objects . equals ( checkPattern , that . checkPattern ) <nl> - & & Objects . equals ( moduleId , that . moduleId ) <nl> - & & Objects . equals ( linesCSV , that . linesCSV ) <nl> - & & Objects . equals ( columnsCSV , that . columnsCSV ) ; <nl> + final SuppressElement suppressElement = ( SuppressElement ) o ; <nl> + return Objects . equals ( filePattern , suppressElement . filePattern ) <nl> + & & Objects . equals ( checkPattern , suppressElement . checkPattern ) <nl> + & & Objects . equals ( moduleId , suppressElement . moduleId ) <nl> + & & Objects . equals ( linesCSV , suppressElement . linesCSV ) <nl> + & & Objects . equals ( columnsCSV , suppressElement . columnsCSV ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> index 9dde7e0 . . f7bab7e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> @ @ - 238 , 20 + 238 , 20 @ @ public class SuppressWithNearbyCommentFilter <nl> / * * <nl> * Expand based on a matching comment . <nl> * @ param comment the comment . <nl> - * @ param string the string to expand . <nl> + * @ param stringToExpand the string to expand . <nl> * @ param regexp the parsed expander . <nl> * @ return the expanded string <nl> * / <nl> private static String expandFrocomment ( <nl> String comment , <nl> - String string , <nl> + String stringToExpand , <nl> Pattern regexp ) { <nl> final Matcher matcher = regexp . matcher ( comment ) ; <nl> / / Match primarily for effect . <nl> if ( ! matcher . find ( ) ) { <nl> - return string ; <nl> + return stringToExpand ; <nl> } <nl> - String result = string ; <nl> + String result = stringToExpand ; <nl> for ( int i = 0 ; i < = matcher . groupCount ( ) ; i + + ) { <nl> / / $ n expands comment match like in Pattern . subst ( ) . <nl> result = result . replaceAll ( " \ \ $ " + i , matcher . group ( i ) ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> index a7e5679 . . 52d3034 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> @ @ - 233 , 20 + 233 , 20 @ @ public class SuppressionCommentFilter <nl> / * * <nl> * Expand based on a matching comment . <nl> * @ param comment the comment . <nl> - * @ param string the string to expand . <nl> + * @ param stringToExpand the string to expand . <nl> * @ param regexp the parsed expander . <nl> * @ return the expanded string <nl> * / <nl> private static String expandFromCoont ( <nl> String comment , <nl> - String string , <nl> + String stringToExpand , <nl> Pattern regexp ) { <nl> final Matcher matcher = regexp . matcher ( comment ) ; <nl> / / Match primarily for effect . <nl> if ( ! matcher . find ( ) ) { <nl> - return string ; <nl> + return stringToExpand ; <nl> } <nl> - String result = string ; <nl> + String result = stringToExpand ; <nl> for ( int i = 0 ; i < = matcher . groupCount ( ) ; i + + ) { <nl> / / $ n expands comment match like in Pattern . subst ( ) . <nl> result = result . replaceAll ( " \ \ $ " + i , matcher . group ( i ) ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java <nl> index 38fd9cf . . 995e60d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java <nl> @ @ - 64 , 8 + 64 , 8 @ @ public class SuppressionFilter <nl> if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) { <nl> return false ; <nl> } <nl> - final SuppressionFilter that = ( SuppressionFilter ) obj ; <nl> - return Objects . equals ( filters , that . filters ) ; <nl> + final SuppressionFilter suppressionFilter = ( SuppressionFilter ) obj ; <nl> + return Objects . equals ( filters , suppressionFilter . filters ) ; <nl> } <nl> <nl> @ Override

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 index cd19d72 . . 9084a77 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import org . xml . sax . InputSource ; 
 import org . xml . sax . SAXException ; 
 import org . xml . sax . SAXParseException ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractLoader ; 
 @ @ - 264 , 7 + 265 , 7 @ @ public final class ConfigurationLoader { 
 * { @ code $ { } without a closing 
 * { @ code } } 
 * / 
 - / / Package visible for testing purposes 
 + @ VisibleForTesting 
 static String replaceProperties ( 
 String value , PropertyResolver props , String defaultValue ) 
 throws CheckstyleException { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 index b741311 . . 33f5423 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . Set ; 
 import org . apache . commons . logging . Log ; 
 import org . apache . commons . logging . LogFactory ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Joiner ; 
 import com . google . common . collect . Sets ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 @ @ - 74 , 6 + 75 , 7 @ @ class PackageObjectFactory implements ModuleFactory { 
 * Registers a package name to use for shortName resolution . 
 * @ param packageName the package name 
 * / 
 + @ VisibleForTesting 
 void addPackage ( String packageName ) { 
 packages . add ( packageName ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 index db07fc2 . . 13584bd 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporter . java 
 @ @ - 21 , 6 + 21 , 8 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 
 import java . util . Map ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 + 
 / * * 
 * Serves as an abstract base class for all modules that report inspection 
 * findings . Such modules have a Severity level which is used for the 
 @ @ - 109 , 6 + 111 , 7 @ @ public abstract class AbstractViolationReporter 
 * @ return name of a resource bundle that contains the messages 
 * used by the module . 
 * / 
 + @ VisibleForTesting 
 static String getMessageBundle ( final String className ) { 
 final int endIndex = className . lastIndexOf ( ' . ' ) ; 
 final String messages = " messages " ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 index 4d591d4 . . 410577b 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 @ @ - 24 , 7 + 24 , 7 @ @ import java . util . BitSet ; 
 import antlr . CommonASTWithHiddenTokens ; 
 import antlr . Token ; 
 import antlr . collections . AST ; 
 - 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 
 / * * 
 @ @ - 192 , 6 + 192 , 7 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { 
 * Set the parent token . 
 * @ param parent the parent token 
 * / 
 + @ VisibleForTesting 
 void setParent ( DetailAST parent ) { 
 this . parent = parent ; 
 final DetailAST nextSibling = getNextSibling ( ) ;

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java b / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java 
 index 5ce2f9c . . 467d164 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java 
 @ @ - 169 , 17 + 169 , 17 @ @ public final class Utils { 
 * Returns the length of a String prefix with tabs expanded . 
 * Each tab is counted as the number of characters is takes to 
 * jump to the next tab stop . 
 - * @ param string the input String 
 + * @ param inputString the input String 
 * @ param toIdx index in string ( exclusive ) where the calculation stops 
 * @ param tabWidth the distance between tab stop position . 
 * @ return the length of string . substring ( 0 , toIdx ) with tabs expanded . 
 * / 
 - public static int lengthExpandedTabs ( String string , 
 + public static int lengthExpandedTabs ( String inputString , 
 int toIdx , 
 int tabWidth ) { 
 int len = 0 ; 
 for ( int idx = 0 ; idx < toIdx ; idx + + ) { 
 - if ( string . charAt ( idx ) = = ' \ t ' ) { 
 + if ( inputString . charAt ( idx ) = = ' \ t ' ) { 
 len = ( len / tabWidth + 1 ) * tabWidth ; 
 } 
 else { 
 @ @ - 253 , 13 + 253 , 13 @ @ public final class Utils { 
 * prefixes at the expense of some readability . Suggested by SimplifyStartsWith PMD rule : 
 * http : / / pmd . sourceforge . net / pmd - 5 . 3 . 1 / pmd - java / rules / java / optimizations . html # SimplifyStartsWith 
 * 
 - * @ param string the < code > String < / code > to check 
 + * @ param value the < code > String < / code > to check 
 * @ param prefix the prefix to find 
 * @ return < code > true < / code > if the < code > char < / code > is a prefix of the given 
 * < code > String < / code > ; < code > false < / code > otherwise . 
 * / 
 - public static boolean startsWithChar ( String string , char prefix ) { 
 - return ! string . isEmpty ( ) & & string . charAt ( 0 ) = = prefix ; 
 + public static boolean startsWithChar ( String value , char prefix ) { 
 + return ! value . isEmpty ( ) & & value . charAt ( 0 ) = = prefix ; 
 } 
 
 / * * 
 @ @ - 269 , 13 + 269 , 13 @ @ public final class Utils { 
 * suffixes at the expense of some readability . Suggested by SimplifyStartsWith PMD rule : 
 * http : / / pmd . sourceforge . net / pmd - 5 . 3 . 1 / pmd - java / rules / java / optimizations . html # SimplifyStartsWith 
 * 
 - * @ param string the < code > String < / code > to check 
 + * @ param value the < code > String < / code > to check 
 * @ param suffix the suffix to find 
 * @ return < code > true < / code > if the < code > char < / code > is a suffix of the given 
 * < code > String < / code > ; < code > false < / code > otherwise . 
 * / 
 - public static boolean endsWithChar ( String string , char suffix ) { 
 - return ! string . isEmpty ( ) & & string . charAt ( string . length ( ) - 1 ) = = suffix ; 
 + public static boolean endsWithChar ( String value , char suffix ) { 
 + return ! value . isEmpty ( ) & & value . charAt ( value . length ( ) - 1 ) = = suffix ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 index 6c8432d . . edcb09d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 @ @ - 135 , 9 + 135 , 9 @ @ public final class FileContents implements CommentListener { 
 * * / 
 public void reportCComment ( int startLineNo , int startColNo , 
 int endLineNo , int endColNo ) { 
 - final String [ ] cc = extractCComment ( startLineNo , startColNo , 
 + final String [ ] cComment = extractCComment ( startLineNo , startColNo , 
 endLineNo , endColNo ) ; 
 - final Comment comment = new Comment ( cc , startColNo , endLineNo , 
 + final Comment comment = new Comment ( cComment , startColNo , endLineNo , 
 endColNo ) ; 
 
 / / save the comment 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java 
 index ce646da . . 48507b2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java 
 @ @ - 71 , 9 + 71 , 9 @ @ public class LineColumn implements Comparable < LineColumn > { 
 if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { 
 return false ; 
 } 
 - final LineColumn that = ( LineColumn ) o ; 
 - return Objects . equals ( line , that . line ) 
 - & & Objects . equals ( col , that . col ) ; 
 + final LineColumn lineColumn = ( LineColumn ) o ; 
 + return Objects . equals ( line , lineColumn . line ) 
 + & & Objects . equals ( col , lineColumn . col ) ; 
 } 
 
 / * * { @ inheritDoc } * / 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java 
 index 889a664 . . 25726aa 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessage . java 
 @ @ - 210 , 16 + 210 , 16 @ @ public final class LocalizedMessage 
 if ( object = = null | | getClass ( ) ! = object . getClass ( ) ) { 
 return false ; 
 } 
 - final LocalizedMessage that = ( LocalizedMessage ) object ; 
 - return Objects . equals ( lineNo , that . lineNo ) 
 - & & Objects . equals ( colNo , that . colNo ) 
 - & & Objects . equals ( severityLevel , that . severityLevel ) 
 - & & Objects . equals ( moduleId , that . moduleId ) 
 - & & Objects . equals ( key , that . key ) 
 - & & Objects . equals ( bundle , that . bundle ) 
 - & & Objects . equals ( sourceClass , that . sourceClass ) 
 - & & Objects . equals ( customMessage , that . customMessage ) 
 - & & Arrays . equals ( args , that . args ) ; 
 + final LocalizedMessage localizedMessage = ( LocalizedMessage ) object ; 
 + return Objects . equals ( lineNo , localizedMessage . lineNo ) 
 + & & Objects . equals ( colNo , localizedMessage . colNo ) 
 + & & Objects . equals ( severityLevel , localizedMessage . severityLevel ) 
 + & & Objects . equals ( moduleId , localizedMessage . moduleId ) 
 + & & Objects . equals ( key , localizedMessage . key ) 
 + & & Objects . equals ( bundle , localizedMessage . bundle ) 
 + & & Objects . equals ( sourceClass , localizedMessage . sourceClass ) 
 + & & Objects . equals ( customMessage , localizedMessage . customMessage ) 
 + & & Arrays . equals ( args , localizedMessage . args ) ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 index 56f492d . . 6b508a0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 @ @ - 209 , 16 + 209 , 16 @ @ public final class AnnotationUseStyleCheck extends Check { 
 * Retrieves an { @ link Enum Enum } type from a @ { link String String } . 
 * @ param < T > the enum type 
 * @ param enuclass the enum class 
 - * @ param string the string representing the enum 
 + * @ param value the string representing the enum 
 * @ return the enum type 
 * / 
 private static < T extends Enum < T > > T getOption ( final Class < T > enuclass , 
 - final String string ) { 
 + final String value ) { 
 try { 
 - return Enum . valueOf ( enuclass , string . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; 
 + return Enum . valueOf ( enuclass , value . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; 
 } 
 catch ( final IllegalArgumentException iae ) { 
 - throw new ConversionException ( " unable to parse " + string , iae ) ; 
 + throw new ConversionException ( " unable to parse " + value , iae ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 index 904db6b . . 4982e32 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 @ @ - 347 , 8 + 347 , 8 @ @ public class FinalLocalVariableCheck extends Check { 
 case TokenTypes . INSTANCE _ INIT : 
 case TokenTypes . METHOD _ DEF : 
 final Map < String , DetailAST > state = scopeStack . pop ( ) ; 
 - for ( DetailAST var : state . values ( ) ) { 
 - log ( var . getLineNo ( ) , var . getColumnNo ( ) , MSG _ KEY , var 
 + for ( DetailAST node : state . values ( ) ) { 
 + log ( node . getLineNo ( ) , node . getColumnNo ( ) , MSG _ KEY , node 
 . getText ( ) ) ; 
 } 
 break ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 index 32fcfbf . . 67f9bf4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 @ @ - 322 , 14 + 322 , 14 @ @ public class UnnecessaryParenthesesCheck extends Check { 
 * Returns the specified string chopped to < code > MAX _ QUOTED _ LENGTH < / code > 
 * plus an ellipsis ( . . . ) if the length of the string exceeds < code > 
 * MAX _ QUOTED _ LENGTH < / code > . 
 - * @ param string the string to potentially chop . 
 + * @ param value the string to potentially chop . 
 * @ return the chopped string if < code > string < / code > is longer than 
 * < code > MAX _ QUOTED _ LENGTH < / code > ; otherwise < code > string < / code > . 
 * / 
 - private static String chopString ( String string ) { 
 - if ( string . length ( ) > MAX _ QUOTED _ LENGTH ) { 
 - return string . substring ( 0 , MAX _ QUOTED _ LENGTH ) + " . . . \ " " ; 
 + private static String chopString ( String value ) { 
 + if ( value . length ( ) > MAX _ QUOTED _ LENGTH ) { 
 + return value . substring ( 0 , MAX _ QUOTED _ LENGTH ) + " . . . \ " " ; 
 } 
 - return string ; 
 + return value ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 index 27cddbc . . aba9a0c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 @ @ - 198 , 9 + 198 , 9 @ @ public class JavadocTypeCheck 
 
 if ( ! allowMissingParamTags ) { 
 / / Check type parameters that should exist , do 
 - for ( final String string : typeParamNames ) { 
 + for ( final String typeParamName : typeParamNames ) { 
 checkTypeParamTag ( 
 - lineNo , tags , string ) ; 
 + lineNo , tags , typeParamName ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / IntRangeFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / IntRangeFilter . java 
 index 3d49028 . . 48d26a3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / IntRangeFilter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / IntRangeFilter . java 
 @ @ - 63 , 8 + 63 , 8 @ @ class IntRangeFilter implements IntFilter { 
 if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { 
 return false ; 
 } 
 - final IntRangeFilter that = ( IntRangeFilter ) o ; 
 - return Objects . equals ( lowerBound , that . lowerBound ) 
 - & & Objects . equals ( upperBound , that . upperBound ) ; 
 + final IntRangeFilter intRangeFilter = ( IntRangeFilter ) o ; 
 + return Objects . equals ( lowerBound , intRangeFilter . lowerBound ) 
 + & & Objects . equals ( upperBound , intRangeFilter . upperBound ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java 
 index bd087ed . . 6cd1d9a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressElement . java 
 @ @ - 165 , 11 + 165 , 11 @ @ public class SuppressElement 
 if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) { 
 return false ; 
 } 
 - final SuppressElement that = ( SuppressElement ) o ; 
 - return Objects . equals ( filePattern , that . filePattern ) 
 - & & Objects . equals ( checkPattern , that . checkPattern ) 
 - & & Objects . equals ( moduleId , that . moduleId ) 
 - & & Objects . equals ( linesCSV , that . linesCSV ) 
 - & & Objects . equals ( columnsCSV , that . columnsCSV ) ; 
 + final SuppressElement suppressElement = ( SuppressElement ) o ; 
 + return Objects . equals ( filePattern , suppressElement . filePattern ) 
 + & & Objects . equals ( checkPattern , suppressElement . checkPattern ) 
 + & & Objects . equals ( moduleId , suppressElement . moduleId ) 
 + & & Objects . equals ( linesCSV , suppressElement . linesCSV ) 
 + & & Objects . equals ( columnsCSV , suppressElement . columnsCSV ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 index 9dde7e0 . . f7bab7e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 @ @ - 238 , 20 + 238 , 20 @ @ public class SuppressWithNearbyCommentFilter 
 / * * 
 * Expand based on a matching comment . 
 * @ param comment the comment . 
 - * @ param string the string to expand . 
 + * @ param stringToExpand the string to expand . 
 * @ param regexp the parsed expander . 
 * @ return the expanded string 
 * / 
 private static String expandFrocomment ( 
 String comment , 
 - String string , 
 + String stringToExpand , 
 Pattern regexp ) { 
 final Matcher matcher = regexp . matcher ( comment ) ; 
 / / Match primarily for effect . 
 if ( ! matcher . find ( ) ) { 
 - return string ; 
 + return stringToExpand ; 
 } 
 - String result = string ; 
 + String result = stringToExpand ; 
 for ( int i = 0 ; i < = matcher . groupCount ( ) ; i + + ) { 
 / / $ n expands comment match like in Pattern . subst ( ) . 
 result = result . replaceAll ( " \ \ $ " + i , matcher . group ( i ) ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 index a7e5679 . . 52d3034 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 @ @ - 233 , 20 + 233 , 20 @ @ public class SuppressionCommentFilter 
 / * * 
 * Expand based on a matching comment . 
 * @ param comment the comment . 
 - * @ param string the string to expand . 
 + * @ param stringToExpand the string to expand . 
 * @ param regexp the parsed expander . 
 * @ return the expanded string 
 * / 
 private static String expandFromCoont ( 
 String comment , 
 - String string , 
 + String stringToExpand , 
 Pattern regexp ) { 
 final Matcher matcher = regexp . matcher ( comment ) ; 
 / / Match primarily for effect . 
 if ( ! matcher . find ( ) ) { 
 - return string ; 
 + return stringToExpand ; 
 } 
 - String result = string ; 
 + String result = stringToExpand ; 
 for ( int i = 0 ; i < = matcher . groupCount ( ) ; i + + ) { 
 / / $ n expands comment match like in Pattern . subst ( ) . 
 result = result . replaceAll ( " \ \ $ " + i , matcher . group ( i ) ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java 
 index 38fd9cf . . 995e60d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionFilter . java 
 @ @ - 64 , 8 + 64 , 8 @ @ public class SuppressionFilter 
 if ( obj = = null | | getClass ( ) ! = obj . getClass ( ) ) { 
 return false ; 
 } 
 - final SuppressionFilter that = ( SuppressionFilter ) obj ; 
 - return Objects . equals ( filters , that . filters ) ; 
 + final SuppressionFilter suppressionFilter = ( SuppressionFilter ) obj ; 
 + return Objects . equals ( filters , suppressionFilter . filters ) ; 
 } 
 
 @ Override
