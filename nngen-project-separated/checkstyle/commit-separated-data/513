BLEU SCORE: 0.01986954492793474

TEST MSG: Issue # 4714 : remove patch from wercker . yml for hibernate - search as it cause build problems
GENERATED MSG: config : use 5 . 8 . 0 . Beta1 as checkout version of werker build of Hibernate Search to skip elasticserarch run ( wercker failure )

TEST DIFF (one line): diff - - git a / wercker . yml b / wercker . yml <nl> index 305123d . . 91d7080 100644 <nl> - - - a / wercker . yml <nl> + + + b / wercker . yml <nl> @ @ - 126 , 9 + 126 , 6 @ @ build : <nl> echo CS _ version : $ { CS _ POM _ VERSION } <nl> for i in 1 2 3 4 5 ; do git clone https : / / github . com / hibernate / hibernate - search . git & & break | | sleep 15 ; done <nl> cd hibernate - search <nl> - git checkout 285c557fb51bbdf4bc81af8950c466f2ec336e9d <nl> - wget https : / / gist . githubusercontent . com / timurt / f8e6c08b681337dfee76fdf8cc4ebb37 / raw / c95333027111d055de8c943d3bc0b757ad638605 / hibernate . patch <nl> - git apply hibernate . patch <nl> mvn - s settings - example . xml clean install - DskipTests = true - Dtest . elasticsearch . host . provided = true - Dpuppycrawl . checkstyle . version = $ { CS _ POM _ VERSION } <nl> mvn - s settings - example . xml checkstyle : check - Dpuppycrawl . checkstyle . version = $ { CS _ POM _ VERSION } <nl> cd . . /
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java <nl> index 4292e80 . . 2912cf7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java <nl> @ @ - 36 , 7 + 36 , 9 @ @ public class MethodTypeParameterNameCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " naming " + File . separator + filename ) ; <nl> + + " naming " + File . separator <nl> + + " methodtypeparametername " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 62 , 7 + 64 , 7 @ @ public class MethodTypeParameterNameCheckTest <nl> " 23 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , <nl> " 28 : 10 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " _ fo " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputMethodTypeParameterName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 83 , 6 + 85 , 6 @ @ public class MethodTypeParameterNameCheckTest <nl> " 37 : 14 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , <nl> / / " 40 : 14 : Name ' EE ' must match pattern ' ^ foo $ ' . " , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputMethodTypeParameterName . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / methodtypeparametername / InputMethodTypeParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / methodtypeparametername / InputMethodTypeParameterName . java <nl> new file mode 100644 <nl> index 0000000 . . 008016d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / methodtypeparametername / InputMethodTypeParameterName . java <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . methodtypeparametername ; <nl> + <nl> + import java . io . Serializable ; <nl> + <nl> + public class InputMethodTypeParameterName < t > <nl> + { <nl> + public < TT > void foo ( ) { } <nl> + <nl> + < e _ e > void foo ( int i ) { <nl> + } <nl> + } <nl> + <nl> + class Other < foo extends Serializable & Cloneable > { <nl> + <nl> + foo getOne ( ) { <nl> + 	 return null ; / / comment <nl> + } <nl> + <nl> + < Tfo $ o2T extends foo > / * comment * / Tfo $ o2T getTwo ( Tfo $ o2T a ) { <nl> + 	 return null ; <nl> + } <nl> + <nl> + < foo extends Runnable > foo getShadow ( ) { <nl> + 	 return null ; <nl> + } <nl> + <nl> + static class Junk < foo > { <nl> + < _ fo extends foo > void getMoreFoo ( ) { <nl> + 	 } <nl> + } <nl> + } <nl> + <nl> + class MoreOther < T extends Cloneable > { <nl> + <nl> + < E extends T > void getMore ( ) { <nl> + new Other ( ) { <nl> + < T > void getMoreFoo ( ) { <nl> + 	 } <nl> + 	 } ; <nl> + 	 <nl> + / / Other o = new Other ( ) { <nl> + / / < EE > void getMoreFoo ( ) { <nl> + / / } <nl> + / / } ; <nl> + } <nl> + } <nl> + <nl> + interface Boo < Input > { <nl> + Input boo ( ) ; <nl> + } <nl> + <nl> + interface FooInterface < T > { <nl> + T foo ( ) ; <nl> + } <nl> + <nl> + interface FooInterface2 { <nl> + Input foo ( ) ; <nl> + } <nl> + <nl> + class Input { <nl> + <nl> + }

TEST DIFF:
diff - - git a / wercker . yml b / wercker . yml 
 index 305123d . . 91d7080 100644 
 - - - a / wercker . yml 
 + + + b / wercker . yml 
 @ @ - 126 , 9 + 126 , 6 @ @ build : 
 echo CS _ version : $ { CS _ POM _ VERSION } 
 for i in 1 2 3 4 5 ; do git clone https : / / github . com / hibernate / hibernate - search . git & & break | | sleep 15 ; done 
 cd hibernate - search 
 - git checkout 285c557fb51bbdf4bc81af8950c466f2ec336e9d 
 - wget https : / / gist . githubusercontent . com / timurt / f8e6c08b681337dfee76fdf8cc4ebb37 / raw / c95333027111d055de8c943d3bc0b757ad638605 / hibernate . patch 
 - git apply hibernate . patch 
 mvn - s settings - example . xml clean install - DskipTests = true - Dtest . elasticsearch . host . provided = true - Dpuppycrawl . checkstyle . version = $ { CS _ POM _ VERSION } 
 mvn - s settings - example . xml checkstyle : check - Dpuppycrawl . checkstyle . version = $ { CS _ POM _ VERSION } 
 cd . . /

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java 
 index 4292e80 . . 2912cf7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodTypeParameterNameCheckTest . java 
 @ @ - 36 , 7 + 36 , 9 @ @ public class MethodTypeParameterNameCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " naming " + File . separator + filename ) ; 
 + + " naming " + File . separator 
 + + " methodtypeparametername " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 62 , 7 + 64 , 7 @ @ public class MethodTypeParameterNameCheckTest 
 " 23 : 6 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , 
 " 28 : 10 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " _ fo " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputMethodTypeParameterName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 83 , 6 + 85 , 6 @ @ public class MethodTypeParameterNameCheckTest 
 " 37 : 14 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , 
 / / " 40 : 14 : Name ' EE ' must match pattern ' ^ foo $ ' . " , 
 } ; 
 - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputMethodTypeParameterName . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / methodtypeparametername / InputMethodTypeParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / methodtypeparametername / InputMethodTypeParameterName . java 
 new file mode 100644 
 index 0000000 . . 008016d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / methodtypeparametername / InputMethodTypeParameterName . java 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . methodtypeparametername ; 
 + 
 + import java . io . Serializable ; 
 + 
 + public class InputMethodTypeParameterName < t > 
 + { 
 + public < TT > void foo ( ) { } 
 + 
 + < e _ e > void foo ( int i ) { 
 + } 
 + } 
 + 
 + class Other < foo extends Serializable & Cloneable > { 
 + 
 + foo getOne ( ) { 
 + 	 return null ; / / comment 
 + } 
 + 
 + < Tfo $ o2T extends foo > / * comment * / Tfo $ o2T getTwo ( Tfo $ o2T a ) { 
 + 	 return null ; 
 + } 
 + 
 + < foo extends Runnable > foo getShadow ( ) { 
 + 	 return null ; 
 + } 
 + 
 + static class Junk < foo > { 
 + < _ fo extends foo > void getMoreFoo ( ) { 
 + 	 } 
 + } 
 + } 
 + 
 + class MoreOther < T extends Cloneable > { 
 + 
 + < E extends T > void getMore ( ) { 
 + new Other ( ) { 
 + < T > void getMoreFoo ( ) { 
 + 	 } 
 + 	 } ; 
 + 	 
 + / / Other o = new Other ( ) { 
 + / / < EE > void getMoreFoo ( ) { 
 + / / } 
 + / / } ; 
 + } 
 + } 
 + 
 + interface Boo < Input > { 
 + Input boo ( ) ; 
 + } 
 + 
 + interface FooInterface < T > { 
 + T foo ( ) ; 
 + } 
 + 
 + interface FooInterface2 { 
 + Input foo ( ) ; 
 + } 
 + 
 + class Input { 
 + 
 + }
