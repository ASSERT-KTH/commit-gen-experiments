BLEU SCORE: 0.8633400213704505

TEST MSG: Issue # 2451 : removed excess hierarchy from MethodParamPadCheck
GENERATED MSG: Issue # 2451 : removed excess hierarchy from EmptyForIteratorPadCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheck . java <nl> index cbc2fbc . . f18cc22 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheck . java <nl> @ @ - 19 , 11 + 19 , 14 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> <nl> + import java . util . Locale ; <nl> + <nl> + import org . apache . commons . beanutils . ConversionException ; <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> @ @ - 65 , 7 + 68 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * / <nl> <nl> public class MethodParamPadCheck <nl> - extends AbstractOptionCheck < PadOption > { <nl> + extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 91 , 12 + 94 , 8 @ @ public class MethodParamPadCheck <nl> * / <nl> private boolean allowLineBreaks ; <nl> <nl> - / * * <nl> - * Sets the pad option to nospace . <nl> - * / <nl> - public MethodParamPadCheck ( ) { <nl> - super ( PadOption . NOSPACE , PadOption . class ) ; <nl> - } <nl> + / * * The policy to enforce . * / <nl> + private PadOption option = PadOption . NOSPACE ; <nl> <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> @ @ - 141 , 11 + 140 , 11 @ @ public class MethodParamPadCheck <nl> } <nl> else { <nl> final int before = parenAST . getColumnNo ( ) - 1 ; <nl> - if ( getAbstractOption ( ) = = PadOption . NOSPACE <nl> + if ( option = = PadOption . NOSPACE <nl> & & Character . isWhitespace ( line . charAt ( before ) ) ) { <nl> log ( parenAST , WS _ PRECEDED , parenAST . getText ( ) ) ; <nl> } <nl> - else if ( getAbstractOption ( ) = = PadOption . SPACE <nl> + else if ( option = = PadOption . SPACE <nl> & & ! Character . isWhitespace ( line . charAt ( before ) ) ) { <nl> log ( parenAST , WS _ NOT _ PRECEDED , parenAST . getText ( ) ) ; <nl> } <nl> @ @ - 160 , 4 + 159 , 18 @ @ public class MethodParamPadCheck <nl> public void setAllowLineBreaks ( boolean allowLineBreaks ) { <nl> this . allowLineBreaks = allowLineBreaks ; <nl> } <nl> + <nl> + / * * <nl> + * Set the option to enforce . <nl> + * @ param optionStr string to decode option from <nl> + * @ throws ConversionException if unable to decode <nl> + * / <nl> + public void setOption ( String optionStr ) { <nl> + try { <nl> + option = PadOption . valueOf ( optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; <nl> + } <nl> + catch ( IllegalArgumentException iae ) { <nl> + throw new ConversionException ( " unable to parse " + optionStr , iae ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java <nl> index df1a548 . . 779b797 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class MethodParamPadCheckTest <nl> @ @ - 145 , 4 + 146 , 12 @ @ public class MethodParamPadCheckTest <nl> } ; <nl> assertArrayEquals ( expected , actual ) ; <nl> } <nl> + <nl> + @ Test ( expected = CheckstyleException . class ) <nl> + public void testInvalidOption ( ) throws Exception { <nl> + checkConfig . addAttribute ( " option " , " invalid _ option " ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputMethodParamPad . java " ) , expected ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractFormatCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractFormatCheck . java <nl> index 1781a95 . . 7e77955 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractFormatCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractFormatCheck . java <nl> @ @ - 31 , 9 + 31 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . Check ; <nl> * { @ link Pattern regular expression } . It <nl> * provides support for setting the regular <nl> * expression using the property name { @ code format } . < / p > <nl> - * <nl> + * @ deprecated Checkstyle will not support abstract checks anymore . Use { @ link Check } instead . <nl> * @ author Oliver Burn <nl> + * @ noinspection AbstractClassNeverImplemented <nl> * / <nl> + @ Deprecated <nl> public abstract class AbstractFormatCheck <nl> extends Check { <nl> / * * The flags to create the regular expression with . * /

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheck . java 
 index cbc2fbc . . f18cc22 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheck . java 
 @ @ - 19 , 11 + 19 , 14 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 
 + import java . util . Locale ; 
 + 
 + import org . apache . commons . beanutils . ConversionException ; 
 import org . apache . commons . lang3 . ArrayUtils ; 
 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 @ @ - 65 , 7 + 68 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * / 
 
 public class MethodParamPadCheck 
 - extends AbstractOptionCheck < PadOption > { 
 + extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 91 , 12 + 94 , 8 @ @ public class MethodParamPadCheck 
 * / 
 private boolean allowLineBreaks ; 
 
 - / * * 
 - * Sets the pad option to nospace . 
 - * / 
 - public MethodParamPadCheck ( ) { 
 - super ( PadOption . NOSPACE , PadOption . class ) ; 
 - } 
 + / * * The policy to enforce . * / 
 + private PadOption option = PadOption . NOSPACE ; 
 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 @ @ - 141 , 11 + 140 , 11 @ @ public class MethodParamPadCheck 
 } 
 else { 
 final int before = parenAST . getColumnNo ( ) - 1 ; 
 - if ( getAbstractOption ( ) = = PadOption . NOSPACE 
 + if ( option = = PadOption . NOSPACE 
 & & Character . isWhitespace ( line . charAt ( before ) ) ) { 
 log ( parenAST , WS _ PRECEDED , parenAST . getText ( ) ) ; 
 } 
 - else if ( getAbstractOption ( ) = = PadOption . SPACE 
 + else if ( option = = PadOption . SPACE 
 & & ! Character . isWhitespace ( line . charAt ( before ) ) ) { 
 log ( parenAST , WS _ NOT _ PRECEDED , parenAST . getText ( ) ) ; 
 } 
 @ @ - 160 , 4 + 159 , 18 @ @ public class MethodParamPadCheck 
 public void setAllowLineBreaks ( boolean allowLineBreaks ) { 
 this . allowLineBreaks = allowLineBreaks ; 
 } 
 + 
 + / * * 
 + * Set the option to enforce . 
 + * @ param optionStr string to decode option from 
 + * @ throws ConversionException if unable to decode 
 + * / 
 + public void setOption ( String optionStr ) { 
 + try { 
 + option = PadOption . valueOf ( optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; 
 + } 
 + catch ( IllegalArgumentException iae ) { 
 + throw new ConversionException ( " unable to parse " + optionStr , iae ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java 
 index df1a548 . . 779b797 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class MethodParamPadCheckTest 
 @ @ - 145 , 4 + 146 , 12 @ @ public class MethodParamPadCheckTest 
 } ; 
 assertArrayEquals ( expected , actual ) ; 
 } 
 + 
 + @ Test ( expected = CheckstyleException . class ) 
 + public void testInvalidOption ( ) throws Exception { 
 + checkConfig . addAttribute ( " option " , " invalid _ option " ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , getPath ( " InputMethodParamPad . java " ) , expected ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractFormatCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractFormatCheck . java 
 index 1781a95 . . 7e77955 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractFormatCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractFormatCheck . java 
 @ @ - 31 , 9 + 31 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . Check ; 
 * { @ link Pattern regular expression } . It 
 * provides support for setting the regular 
 * expression using the property name { @ code format } . < / p > 
 - * 
 + * @ deprecated Checkstyle will not support abstract checks anymore . Use { @ link Check } instead . 
 * @ author Oliver Burn 
 + * @ noinspection AbstractClassNeverImplemented 
 * / 
 + @ Deprecated 
 public abstract class AbstractFormatCheck 
 extends Check { 
 / * * The flags to create the regular expression with . * /
