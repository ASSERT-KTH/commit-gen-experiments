BLEU SCORE: 0.016466642419110007

TEST MSG: Issue # 2080 : ! ( lastImportStatic ^ isStatic ) can be simplified to ' lastImportStatic = = isStatic ' TCBuild = 436
GENERATED MSG: Replace assignment with operator assignment . # 1538

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index 3731431 . . 778d6eb 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 482 , 7 + 482 , 7 @ @ public class ImportOrderCheck <nl> final boolean shouldFireError = <nl> / / current and previous static or current and <nl> / / previous non - static <nl> - ! ( lastImportStatic ^ isStatic ) <nl> + lastImportStatic = = isStatic <nl> & & <nl> / / and out of lexicographic order <nl> compare ( lastImport , name , caseSensitive ) > 0
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 8133843 . . 7261505 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1128 , 7 + 1128 , 6 @ @ <nl> < regex > < pattern > . * . checks . regexp . MultilineDetector < / pattern > < branchRate > 58 < / branchRate > < lineRate > 87 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . regexp . RegexpCheck < / pattern > < branchRate > 97 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . regexp . RegexpMultilineCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 76 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . checks . regexp . RegexpSinglelineCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 76 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . regexp . SinglelineDetector < / pattern > < branchRate > 93 < / branchRate > < lineRate > 96 < / lineRate > < / regex > <nl> <nl> < regex > < pattern > . * . filters . SuppressionCommentFilter < / pattern > < branchRate > 83 < / branchRate > < lineRate > 93 < / lineRate > < / regex > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java <nl> index d978e5a . . ac6771c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . regexp ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . REGEXP _ EXCEEDED ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . REGEXP _ MINIMUM ; <nl> <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> @ @ - 63 , 6 + 64 , 8 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { <nl> final String illegal = " SYSTEM \ \ . ( OUT ) | ( ERR ) \ \ . PRINT ( LN ) ? \ \ ( " ; <nl> checkConfig . addAttribute ( " format " , illegal ) ; <nl> checkConfig . addAttribute ( " ignoreCase " , " true " ) ; <nl> + checkConfig . addAttribute ( " maximum " , " 0 " ) ; <nl> + <nl> final String [ ] expected = { <nl> " 69 : " + getCheckMessage ( REGEXP _ EXCEEDED , illegal ) , <nl> } ; <nl> @ @ - 77 , 4 + 80 , 17 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { <nl> final String [ ] expected = { } ; <nl> verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testMinimum ( ) throws Exception { <nl> + final String illegal = " \ \ r " ; <nl> + checkConfig . addAttribute ( " format " , illegal ) ; <nl> + checkConfig . addAttribute ( " minimum " , " 500 " ) ; <nl> + final String [ ] expected = { <nl> + " 0 : " + getCheckMessage ( REGEXP _ MINIMUM , " 500 " , illegal ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + } <nl> + <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index 3731431 . . 778d6eb 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 482 , 7 + 482 , 7 @ @ public class ImportOrderCheck 
 final boolean shouldFireError = 
 / / current and previous static or current and 
 / / previous non - static 
 - ! ( lastImportStatic ^ isStatic ) 
 + lastImportStatic = = isStatic 
 & & 
 / / and out of lexicographic order 
 compare ( lastImport , name , caseSensitive ) > 0

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 8133843 . . 7261505 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1128 , 7 + 1128 , 6 @ @ 
 < regex > < pattern > . * . checks . regexp . MultilineDetector < / pattern > < branchRate > 58 < / branchRate > < lineRate > 87 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . regexp . RegexpCheck < / pattern > < branchRate > 97 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . regexp . RegexpMultilineCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 76 < / lineRate > < / regex > 
 - < regex > < pattern > . * . checks . regexp . RegexpSinglelineCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 76 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . regexp . SinglelineDetector < / pattern > < branchRate > 93 < / branchRate > < lineRate > 96 < / lineRate > < / regex > 
 
 < regex > < pattern > . * . filters . SuppressionCommentFilter < / pattern > < branchRate > 83 < / branchRate > < lineRate > 93 < / lineRate > < / regex > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java 
 index d978e5a . . ac6771c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . regexp ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . REGEXP _ EXCEEDED ; 
 + import static com . puppycrawl . tools . checkstyle . checks . regexp . MultilineDetector . REGEXP _ MINIMUM ; 
 
 import org . junit . Before ; 
 import org . junit . Test ; 
 @ @ - 63 , 6 + 64 , 8 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { 
 final String illegal = " SYSTEM \ \ . ( OUT ) | ( ERR ) \ \ . PRINT ( LN ) ? \ \ ( " ; 
 checkConfig . addAttribute ( " format " , illegal ) ; 
 checkConfig . addAttribute ( " ignoreCase " , " true " ) ; 
 + checkConfig . addAttribute ( " maximum " , " 0 " ) ; 
 + 
 final String [ ] expected = { 
 " 69 : " + getCheckMessage ( REGEXP _ EXCEEDED , illegal ) , 
 } ; 
 @ @ - 77 , 4 + 80 , 17 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { 
 final String [ ] expected = { } ; 
 verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testMinimum ( ) throws Exception { 
 + final String illegal = " \ \ r " ; 
 + checkConfig . addAttribute ( " format " , illegal ) ; 
 + checkConfig . addAttribute ( " minimum " , " 500 " ) ; 
 + final String [ ] expected = { 
 + " 0 : " + getCheckMessage ( REGEXP _ MINIMUM , " 500 " , illegal ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + } 
 + 
 }
