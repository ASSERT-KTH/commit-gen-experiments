BLEU SCORE: 0.07495553473355841

TEST MSG: Issue # 5409 : fixed intellij 2017 . 3 violations part 1
GENERATED MSG: Issue # 2421 : enabling checking on it folder

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> index 95b4d01 . . f2e82c9 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java <nl> @ @ - 286 , 21 + 286 , 15 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> * @ param messageKey the key of message in ' messages . properties ' file . <nl> * @ param arguments the arguments of message in ' messages . properties ' file . <nl> * @ return The message of the check with the arguments applied . <nl> + * @ throws IOException if there is a problem loading the property file . <nl> * / <nl> protected static String getCheckMessage ( Class < ? extends AbstractViolationReporter > aClass , <nl> - String messageKey , Object . . . arguments ) { <nl> - String checkMessage ; <nl> - try { <nl> - final Properties pr = new Properties ( ) ; <nl> - pr . load ( aClass . getResourceAsStream ( " messages . properties " ) ) ; <nl> - final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , <nl> - Locale . ROOT ) ; <nl> - checkMessage = formatter . format ( arguments ) ; <nl> - } <nl> - catch ( IOException ex ) { <nl> - checkMessage = null ; <nl> - } <nl> - return checkMessage ; <nl> + String messageKey , Object . . . arguments ) throws IOException { <nl> + final Properties pr = new Properties ( ) ; <nl> + pr . load ( aClass . getResourceAsStream ( " messages . properties " ) ) ; <nl> + final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , <nl> + Locale . ROOT ) ; <nl> + return formatter . format ( arguments ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java <nl> index bd3d275 . . d12615c 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . google . checkstyle . test . base . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class GenericWhitespaceTest extends AbstractModuleTestSupport { <nl> <nl> @ @ - 108 , 8 + 109 , 7 @ @ public class GenericWhitespaceTest extends AbstractModuleTestSupport { <nl> @ Test <nl> public void genericEndsTheLine ( ) throws Exception { <nl> final Configuration checkConfig = getModuleConfig ( " GenericWhitespace " ) ; <nl> - final String [ ] expected = { <nl> - } ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , getPath ( " InputGenericWhitespaceEndsTheLine . java " ) , <nl> expected ) ; <nl> } <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java <nl> index c5ebe92 . . eb8777e 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package com . google . checkstyle . test . chapter5naming . rule53camelcase ; <nl> <nl> + import java . io . IOException ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import com . google . checkstyle . test . base . AbstractModuleTestSupport ; <nl> @ @ - 58 , 7 + 60 , 8 @ @ public class AbbreviationAsWordInNameTest extends AbstractModuleTestSupport { <nl> verify ( checkConfig , filePath , expected , warnList ) ; <nl> } <nl> <nl> - private String getWarningMessage ( String typeName , int expectedCapitalCount ) { <nl> + private String getWarningMessage ( String typeName , int expectedCapitalCount ) <nl> + throws IOException { <nl> return getCheckMessage ( clazz , MSG _ KEY , typeName , expectedCapitalCount ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> index 8353075 . . 07cfa52 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> @ @ - 128 , 40 + 128 , 40 @ @ public class AvoidEscapedUnicodeCharactersCheck <nl> * @ see < a href = " https : / / en . wiktionary . org / wiki / Appendix : Control _ characters " > <nl> * Appendix : Control characters < / a > <nl> * / <nl> - private static final Pattern UNICODE _ CONTROL = Pattern . compile ( " \ \ \ \ ( u | U ) " <nl> - + " ( 00 [ 0 - 1 ] [ 0 - 9A - Fa - f ] | 00 [ 8 - 9 ] [ 0 - 9A - Fa - f ] | 00 ( a | A ) ( d | D ) | 034 ( f | F ) | 070 ( f | F ) " <nl> - + " | 180 ( e | E ) | 200 [ b - fB - F ] | 202 [ a - eA - E ] | 206 [ 0 - 4a - fA - F ] " <nl> + private static final Pattern UNICODE _ CONTROL = Pattern . compile ( " \ \ \ \ [ uU ] " <nl> + + " ( 00 [ 0 - 1 ] [ 0 - 9A - Fa - f ] | 00 [ 8 - 9 ] [ 0 - 9A - Fa - f ] | 00 [ aA ] [ dD ] | 034 [ fF ] | 070 [ fF ] " <nl> + + " | 180 [ eE ] | 200 [ b - fB - F ] | 202 [ a - eA - E ] | 206 [ 0 - 4a - fA - F ] " <nl> + " | [ fF ] { 3 } [ 9a - bA - B ] | [ fF ] [ eE ] [ fF ] { 2 } ) " ) ; <nl> <nl> / * * Regular expression for all escaped chars . * / <nl> private static final Pattern ALL _ ESCAPED _ CHARS = <nl> Pattern . compile ( " ^ ( ( \ \ \ \ u ) [ a - fA - F0 - 9 ] { 4 } " <nl> - + " | | \ \ \ \ b | \ \ \ \ t | \ \ \ \ n | \ \ \ \ f | \ \ \ \ r | \ \ \ \ | \ " | \ ' ) + $ " ) ; <nl> + + " | \ \ \ \ b | \ \ \ \ t | \ \ \ \ n | \ \ \ \ f | \ \ \ \ r | \ \ \ \ | \ " | \ ' ) + $ " ) ; <nl> <nl> / * * Regular expression for escaped backslash . * / <nl> private static final Pattern ESCAPED _ BACKSLASH = Pattern . compile ( " \ \ \ \ \ \ \ \ " ) ; <nl> <nl> / * * Regular expression for non - printable unicode chars . * / <nl> private static final Pattern NON _ PRINTABLE _ CHARS = Pattern . compile ( " \ \ \ \ u1680 | \ \ \ \ u2028 " <nl> - + " | \ \ \ \ u2029 | \ \ \ \ u205 ( f | F ) | \ \ \ \ u3000 | \ \ \ \ u2007 | \ \ \ \ u2000 | \ \ \ \ u200 ( a | A ) " <nl> - + " | \ \ \ \ u007 ( F | f ) | \ \ \ \ u009 ( f | F ) | \ \ \ \ u ( f | F ) { 4 } | \ \ \ \ u007 ( F | f ) | \ \ \ \ u00 ( a | A ) ( d | D ) " <nl> - + " | \ \ \ \ u0600 | \ \ \ \ u061 ( c | C ) | \ \ \ \ u06 ( d | D ) { 2 } | \ \ \ \ u070 ( f | F ) | \ \ \ \ u1680 | \ \ \ \ u180 ( e | E ) " <nl> - + " | \ \ \ \ u2000 | \ \ \ \ u2028 | \ \ \ \ u205 ( f | F ) | \ \ \ \ u2066 | \ \ \ \ u2067 | \ \ \ \ u2068 | \ \ \ \ u2069 " <nl> - + " | \ \ \ \ u206 ( a | A ) | \ \ \ \ u ( d | D ) 800 | \ \ \ \ u ( f | F ) ( e | E ) ( f | F ) { 2 } | \ \ \ \ u ( f | F ) { 3 } 9 " <nl> - + " | \ \ \ \ u ( f | F ) { 3 } ( a | A ) | \ \ \ \ u0020 | \ \ \ \ u00 ( a | A ) 0 | \ \ \ \ u00 ( a | A ) ( d | D ) | \ \ \ \ u0604 " <nl> - + " | \ \ \ \ u061 ( c | C ) | \ \ \ \ u06 ( d | D ) { 2 } | \ \ \ \ u070 ( f | F ) | \ \ \ \ u1680 | \ \ \ \ u180 ( e | E ) | \ \ \ \ u200 ( f | F ) " <nl> - + " | \ \ \ \ u202 ( f | F ) | \ \ \ \ u2064 | \ \ \ \ u2066 | \ \ \ \ u2067 | \ \ \ \ u2068 | \ \ \ \ u2069 | \ \ \ \ u206 ( f | F ) " <nl> - + " | \ \ \ \ u ( f | F ) 8 ( f | F ) { 2 } | \ \ \ \ u ( f | F ) ( e | E ) ( f | F ) { 2 } | \ \ \ \ u ( f | F ) { 3 } 9 | \ \ \ \ u ( f | F ) { 3 } ( b | B ) " <nl> - + " | \ \ \ \ u05 ( d | D ) 0 | \ \ \ \ u05 ( f | F ) 3 | \ \ \ \ u0600 | \ \ \ \ u0750 | \ \ \ \ u0 ( e | E ) 00 | \ \ \ \ u1 ( e | E ) 00 " <nl> - + " | \ \ \ \ u2100 | \ \ \ \ u ( f | F ) ( b | B ) 50 | \ \ \ \ u ( f | F ) ( e | E ) 70 | \ \ \ \ u ( F | f ) { 2 } 61 | \ \ \ \ u04 ( f | F ) 9 " <nl> - + " | \ \ \ \ u05 ( b | B ) ( e | E ) | \ \ \ \ u05 ( e | E ) ( a | A ) | \ \ \ \ u05 ( f | F ) 4 | \ \ \ \ u06 ( f | F ) { 2 } " <nl> - + " | \ \ \ \ u077 ( f | F ) | \ \ \ \ u0 ( e | E ) 7 ( f | F ) | \ \ \ \ u20 ( a | A ) ( f | F ) | \ \ \ \ u213 ( a | A ) | \ \ \ \ u0000 " <nl> - + " | \ \ \ \ u ( f | F ) ( d | D ) ( f | F ) { 2 } | \ \ \ \ u ( f | F ) ( e | E ) ( f | F ) { 2 } | \ \ \ \ u ( f | F ) { 2 } ( d | D ) ( c | C ) " <nl> - + " | \ \ \ \ u2002 | \ \ \ \ u0085 | \ \ \ \ u200 ( a | A ) | \ \ \ \ u2005 | \ \ \ \ u2000 | \ \ \ \ u2029 | \ \ \ \ u000 ( B | b ) " <nl> - + " | \ \ \ \ u2008 | \ \ \ \ u2003 | \ \ \ \ u205 ( f | F ) | \ \ \ \ u1680 | \ \ \ \ u0009 | \ \ \ \ u0020 | \ \ \ \ u2006 " <nl> - + " | \ \ \ \ u2001 | \ \ \ \ u202 ( f | F ) | \ \ \ \ u00 ( a | A ) 0 | \ \ \ \ u000 ( c | C ) | \ \ \ \ u2009 | \ \ \ \ u2004 | \ \ \ \ u2028 " <nl> - + " | \ \ \ \ u2028 | \ \ \ \ u2007 | \ \ \ \ u2004 | \ \ \ \ u2028 | \ \ \ \ u2007 | \ \ \ \ u2025 " <nl> - + " | \ \ \ \ u ( f | F ) { 2 } 0 ( e | E ) | \ \ \ \ u ( f | F ) { 2 } 61 " ) ; <nl> + + " | \ \ \ \ u2029 | \ \ \ \ u205 [ fF ] | \ \ \ \ u3000 | \ \ \ \ u2007 | \ \ \ \ u2000 | \ \ \ \ u200 [ aA ] " <nl> + + " | \ \ \ \ u007 [ fF ] | \ \ \ \ u009 [ fF ] | \ \ \ \ u [ fF ] { 4 } | \ \ \ \ u00 [ aA ] [ dD ] " <nl> + + " | \ \ \ \ u0600 | \ \ \ \ u061 [ cC ] | \ \ \ \ u06 [ dD ] { 2 } | \ \ \ \ u070 [ fF ] | \ \ \ \ u180 [ eE ] " <nl> + + " | \ \ \ \ u2066 | \ \ \ \ u2067 | \ \ \ \ u2068 | \ \ \ \ u2069 " <nl> + + " | \ \ \ \ u206 [ aA ] | \ \ \ \ u [ dD ] 800 | \ \ \ \ u [ fF ] [ eE ] [ fF ] { 2 } | \ \ \ \ u [ fF ] { 3 } 9 " <nl> + + " | \ \ \ \ u [ fF ] { 3 } [ aA ] | \ \ \ \ u0020 | \ \ \ \ u00 [ aA ] 0 | \ \ \ \ u0604 " <nl> + + " | \ \ \ \ u200 [ fF ] " <nl> + + " | \ \ \ \ u202 [ fF ] | \ \ \ \ u2064 | \ \ \ \ u206 [ fF ] " <nl> + + " | \ \ \ \ u [ fF ] 8 [ fF ] { 2 } | \ \ \ \ u [ fF ] { 3 } [ bB ] " <nl> + + " | \ \ \ \ u05 [ dD ] 0 | \ \ \ \ u05 [ fF ] 3 | \ \ \ \ u0750 | \ \ \ \ u0 [ eE ] 00 | \ \ \ \ u1 [ eE ] 00 " <nl> + + " | \ \ \ \ u2100 | \ \ \ \ u [ fF ] [ bB ] 50 | \ \ \ \ u [ fF ] [ eE ] 70 | \ \ \ \ u [ fF ] { 2 } 61 | \ \ \ \ u04 [ fF ] 9 " <nl> + + " | \ \ \ \ u05 [ bB ] [ eE ] | \ \ \ \ u05 [ eE ] [ aA ] | \ \ \ \ u05 [ fF ] 4 | \ \ \ \ u06 [ fF ] { 2 } " <nl> + + " | \ \ \ \ u077 [ fF ] | \ \ \ \ u0 [ eE ] 7 [ fF ] | \ \ \ \ u20 [ aA ] [ fF ] | \ \ \ \ u213 [ aA ] | \ \ \ \ u0000 " <nl> + + " | \ \ \ \ u [ fF ] [ dD ] [ fF ] { 2 } | \ \ \ \ u [ fF ] { 2 } [ dD ] [ cC ] " <nl> + + " | \ \ \ \ u2002 | \ \ \ \ u0085 | \ \ \ \ u2005 | \ \ \ \ u000 [ bB ] " <nl> + + " | \ \ \ \ u2008 | \ \ \ \ u2003 | \ \ \ \ u0009 | \ \ \ \ u2006 " <nl> + + " | \ \ \ \ u2001 | \ \ \ \ u000 [ cC ] | \ \ \ \ u2009 | \ \ \ \ u2004 " <nl> + + " | \ \ \ \ u2025 " <nl> + + " | \ \ \ \ u [ fF ] { 2 } 0 [ eE ] " ) ; <nl> <nl> / * * Cpp style comments . * / <nl> private Map < Integer , TextBlock > singlelineComments ;
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> index 21c529d . . 75bf336 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> @ @ - 36 , 6 + 37 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class MutableExceptionCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " design " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testClassExtendsGenericClass ( ) throws Exception { <nl> @ @ - 43 , 8 + 49 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { <nl> <nl> String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checkConfig , getPath ( " design " + File . separator <nl> - + " InputMutableExceptionClassExtendsGenericClass . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputMutableExceptionClassExtendsGenericClass . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 57 , 7 + 62 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { <nl> " 46 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " InputMutableException . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputMutableException . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 69 , 7 + 74 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { <nl> " 34 : 13 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " InputMutableException . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputMutableException . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableException . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableException . java <nl> new file mode 100644 <nl> index 0000000 . . 7b0febc <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableException . java <nl> @ @ - 0 , 0 + 1 , 48 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + public class InputMutableException { <nl> + public class FooException extends Exception { <nl> + private final int finalErrorCode ; <nl> + private int errorCode = 1 ; <nl> + <nl> + public FooException ( ) { <nl> + finalErrorCode = 1 ; <nl> + } <nl> + <nl> + public class FooExceptionThisIsNot extends RuntimeException { <nl> + private final int finalErrorCode ; <nl> + private int errorCode = 1 ; <nl> + / * * constructor * / <nl> + public FooExceptionThisIsNot ( ) { <nl> + finalErrorCode = 1 ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public class BarError extends Throwable { <nl> + private int errorCode ; <nl> + } <nl> + <nl> + public class BazDoesNotExtendError { <nl> + private int errorCode ; <nl> + } <nl> + <nl> + public class CustomProblem extends ThreadDeath { <nl> + private int errorCode ; <nl> + <nl> + public class CustomFailure extends ThreadDeath { <nl> + private int errorCode ; <nl> + public void someMethod ( ) { <nl> + if ( true ) { <nl> + final int i = 0 ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + class CustomException extends java . lang . Exception { } <nl> + <nl> + class CustomMutableException extends java . lang . Exception { <nl> + int errorCode ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableExceptionClassExtendsGenericClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableExceptionClassExtendsGenericClass . java <nl> new file mode 100644 <nl> index 0000000 . . 6b12a88 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableExceptionClassExtendsGenericClass . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import java . util . concurrent . atomic . AtomicReference ; <nl> + <nl> + / * * <nl> + * Convenience class for holding an { @ link Exception } in a thread - safe way <nl> + * / <nl> + public class InputMutableExceptionClassExtendsGenericClass extends AtomicReference < Exception > { / / NPE is not expected <nl> + <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableException . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableException . java <nl> deleted file mode 100644 <nl> index 8f1a7f2 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableException . java <nl> + + + / dev / null <nl> @ @ - 1 , 48 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - public class InputMutableException { <nl> - public class FooException extends Exception { <nl> - private final int finalErrorCode ; <nl> - private int errorCode = 1 ; <nl> - <nl> - public FooException ( ) { <nl> - finalErrorCode = 1 ; <nl> - } <nl> - <nl> - public class FooExceptionThisIsNot extends RuntimeException { <nl> - private final int finalErrorCode ; <nl> - private int errorCode = 1 ; <nl> - / * * constructor * / <nl> - public FooExceptionThisIsNot ( ) { <nl> - finalErrorCode = 1 ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - public class BarError extends Throwable { <nl> - private int errorCode ; <nl> - } <nl> - <nl> - public class BazDoesNotExtendError { <nl> - private int errorCode ; <nl> - } <nl> - <nl> - public class CustomProblem extends ThreadDeath { <nl> - private int errorCode ; <nl> - <nl> - public class CustomFailure extends ThreadDeath { <nl> - private int errorCode ; <nl> - public void someMethod ( ) { <nl> - if ( true ) { <nl> - final int i = 0 ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> - class CustomException extends java . lang . Exception { } <nl> - <nl> - class CustomMutableException extends java . lang . Exception { <nl> - int errorCode ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java <nl> deleted file mode 100644 <nl> index 931128e . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java <nl> + + + / dev / null <nl> @ @ - 1 , 12 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - import java . util . concurrent . atomic . AtomicReference ; <nl> - <nl> - / * * <nl> - * Convenience class for holding an { @ link Exception } in a thread - safe way <nl> - * / <nl> - public class InputMutableExceptionClassExtendsGenericClass extends AtomicReference < Exception > { / / NPE is not expected <nl> - <nl> - private static final long serialVersionUID = 1L ; <nl> - <nl> - } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 index 95b4d01 . . f2e82c9 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / AbstractModuleTestSupport . java 
 @ @ - 286 , 21 + 286 , 15 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 * @ param messageKey the key of message in ' messages . properties ' file . 
 * @ param arguments the arguments of message in ' messages . properties ' file . 
 * @ return The message of the check with the arguments applied . 
 + * @ throws IOException if there is a problem loading the property file . 
 * / 
 protected static String getCheckMessage ( Class < ? extends AbstractViolationReporter > aClass , 
 - String messageKey , Object . . . arguments ) { 
 - String checkMessage ; 
 - try { 
 - final Properties pr = new Properties ( ) ; 
 - pr . load ( aClass . getResourceAsStream ( " messages . properties " ) ) ; 
 - final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , 
 - Locale . ROOT ) ; 
 - checkMessage = formatter . format ( arguments ) ; 
 - } 
 - catch ( IOException ex ) { 
 - checkMessage = null ; 
 - } 
 - return checkMessage ; 
 + String messageKey , Object . . . arguments ) throws IOException { 
 + final Properties pr = new Properties ( ) ; 
 + pr . load ( aClass . getResourceAsStream ( " messages . properties " ) ) ; 
 + final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , 
 + Locale . ROOT ) ; 
 + return formatter . format ( arguments ) ; 
 } 
 
 / * * 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java 
 index bd3d275 . . d12615c 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import org . junit . Test ; 
 
 import com . google . checkstyle . test . base . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class GenericWhitespaceTest extends AbstractModuleTestSupport { 
 
 @ @ - 108 , 8 + 109 , 7 @ @ public class GenericWhitespaceTest extends AbstractModuleTestSupport { 
 @ Test 
 public void genericEndsTheLine ( ) throws Exception { 
 final Configuration checkConfig = getModuleConfig ( " GenericWhitespace " ) ; 
 - final String [ ] expected = { 
 - } ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , getPath ( " InputGenericWhitespaceEndsTheLine . java " ) , 
 expected ) ; 
 } 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java 
 index c5ebe92 . . eb8777e 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule53camelcase / AbbreviationAsWordInNameTest . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package com . google . checkstyle . test . chapter5naming . rule53camelcase ; 
 
 + import java . io . IOException ; 
 + 
 import org . junit . Test ; 
 
 import com . google . checkstyle . test . base . AbstractModuleTestSupport ; 
 @ @ - 58 , 7 + 60 , 8 @ @ public class AbbreviationAsWordInNameTest extends AbstractModuleTestSupport { 
 verify ( checkConfig , filePath , expected , warnList ) ; 
 } 
 
 - private String getWarningMessage ( String typeName , int expectedCapitalCount ) { 
 + private String getWarningMessage ( String typeName , int expectedCapitalCount ) 
 + throws IOException { 
 return getCheckMessage ( clazz , MSG _ KEY , typeName , expectedCapitalCount ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 index 8353075 . . 07cfa52 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 @ @ - 128 , 40 + 128 , 40 @ @ public class AvoidEscapedUnicodeCharactersCheck 
 * @ see < a href = " https : / / en . wiktionary . org / wiki / Appendix : Control _ characters " > 
 * Appendix : Control characters < / a > 
 * / 
 - private static final Pattern UNICODE _ CONTROL = Pattern . compile ( " \ \ \ \ ( u | U ) " 
 - + " ( 00 [ 0 - 1 ] [ 0 - 9A - Fa - f ] | 00 [ 8 - 9 ] [ 0 - 9A - Fa - f ] | 00 ( a | A ) ( d | D ) | 034 ( f | F ) | 070 ( f | F ) " 
 - + " | 180 ( e | E ) | 200 [ b - fB - F ] | 202 [ a - eA - E ] | 206 [ 0 - 4a - fA - F ] " 
 + private static final Pattern UNICODE _ CONTROL = Pattern . compile ( " \ \ \ \ [ uU ] " 
 + + " ( 00 [ 0 - 1 ] [ 0 - 9A - Fa - f ] | 00 [ 8 - 9 ] [ 0 - 9A - Fa - f ] | 00 [ aA ] [ dD ] | 034 [ fF ] | 070 [ fF ] " 
 + + " | 180 [ eE ] | 200 [ b - fB - F ] | 202 [ a - eA - E ] | 206 [ 0 - 4a - fA - F ] " 
 + " | [ fF ] { 3 } [ 9a - bA - B ] | [ fF ] [ eE ] [ fF ] { 2 } ) " ) ; 
 
 / * * Regular expression for all escaped chars . * / 
 private static final Pattern ALL _ ESCAPED _ CHARS = 
 Pattern . compile ( " ^ ( ( \ \ \ \ u ) [ a - fA - F0 - 9 ] { 4 } " 
 - + " | | \ \ \ \ b | \ \ \ \ t | \ \ \ \ n | \ \ \ \ f | \ \ \ \ r | \ \ \ \ | \ " | \ ' ) + $ " ) ; 
 + + " | \ \ \ \ b | \ \ \ \ t | \ \ \ \ n | \ \ \ \ f | \ \ \ \ r | \ \ \ \ | \ " | \ ' ) + $ " ) ; 
 
 / * * Regular expression for escaped backslash . * / 
 private static final Pattern ESCAPED _ BACKSLASH = Pattern . compile ( " \ \ \ \ \ \ \ \ " ) ; 
 
 / * * Regular expression for non - printable unicode chars . * / 
 private static final Pattern NON _ PRINTABLE _ CHARS = Pattern . compile ( " \ \ \ \ u1680 | \ \ \ \ u2028 " 
 - + " | \ \ \ \ u2029 | \ \ \ \ u205 ( f | F ) | \ \ \ \ u3000 | \ \ \ \ u2007 | \ \ \ \ u2000 | \ \ \ \ u200 ( a | A ) " 
 - + " | \ \ \ \ u007 ( F | f ) | \ \ \ \ u009 ( f | F ) | \ \ \ \ u ( f | F ) { 4 } | \ \ \ \ u007 ( F | f ) | \ \ \ \ u00 ( a | A ) ( d | D ) " 
 - + " | \ \ \ \ u0600 | \ \ \ \ u061 ( c | C ) | \ \ \ \ u06 ( d | D ) { 2 } | \ \ \ \ u070 ( f | F ) | \ \ \ \ u1680 | \ \ \ \ u180 ( e | E ) " 
 - + " | \ \ \ \ u2000 | \ \ \ \ u2028 | \ \ \ \ u205 ( f | F ) | \ \ \ \ u2066 | \ \ \ \ u2067 | \ \ \ \ u2068 | \ \ \ \ u2069 " 
 - + " | \ \ \ \ u206 ( a | A ) | \ \ \ \ u ( d | D ) 800 | \ \ \ \ u ( f | F ) ( e | E ) ( f | F ) { 2 } | \ \ \ \ u ( f | F ) { 3 } 9 " 
 - + " | \ \ \ \ u ( f | F ) { 3 } ( a | A ) | \ \ \ \ u0020 | \ \ \ \ u00 ( a | A ) 0 | \ \ \ \ u00 ( a | A ) ( d | D ) | \ \ \ \ u0604 " 
 - + " | \ \ \ \ u061 ( c | C ) | \ \ \ \ u06 ( d | D ) { 2 } | \ \ \ \ u070 ( f | F ) | \ \ \ \ u1680 | \ \ \ \ u180 ( e | E ) | \ \ \ \ u200 ( f | F ) " 
 - + " | \ \ \ \ u202 ( f | F ) | \ \ \ \ u2064 | \ \ \ \ u2066 | \ \ \ \ u2067 | \ \ \ \ u2068 | \ \ \ \ u2069 | \ \ \ \ u206 ( f | F ) " 
 - + " | \ \ \ \ u ( f | F ) 8 ( f | F ) { 2 } | \ \ \ \ u ( f | F ) ( e | E ) ( f | F ) { 2 } | \ \ \ \ u ( f | F ) { 3 } 9 | \ \ \ \ u ( f | F ) { 3 } ( b | B ) " 
 - + " | \ \ \ \ u05 ( d | D ) 0 | \ \ \ \ u05 ( f | F ) 3 | \ \ \ \ u0600 | \ \ \ \ u0750 | \ \ \ \ u0 ( e | E ) 00 | \ \ \ \ u1 ( e | E ) 00 " 
 - + " | \ \ \ \ u2100 | \ \ \ \ u ( f | F ) ( b | B ) 50 | \ \ \ \ u ( f | F ) ( e | E ) 70 | \ \ \ \ u ( F | f ) { 2 } 61 | \ \ \ \ u04 ( f | F ) 9 " 
 - + " | \ \ \ \ u05 ( b | B ) ( e | E ) | \ \ \ \ u05 ( e | E ) ( a | A ) | \ \ \ \ u05 ( f | F ) 4 | \ \ \ \ u06 ( f | F ) { 2 } " 
 - + " | \ \ \ \ u077 ( f | F ) | \ \ \ \ u0 ( e | E ) 7 ( f | F ) | \ \ \ \ u20 ( a | A ) ( f | F ) | \ \ \ \ u213 ( a | A ) | \ \ \ \ u0000 " 
 - + " | \ \ \ \ u ( f | F ) ( d | D ) ( f | F ) { 2 } | \ \ \ \ u ( f | F ) ( e | E ) ( f | F ) { 2 } | \ \ \ \ u ( f | F ) { 2 } ( d | D ) ( c | C ) " 
 - + " | \ \ \ \ u2002 | \ \ \ \ u0085 | \ \ \ \ u200 ( a | A ) | \ \ \ \ u2005 | \ \ \ \ u2000 | \ \ \ \ u2029 | \ \ \ \ u000 ( B | b ) " 
 - + " | \ \ \ \ u2008 | \ \ \ \ u2003 | \ \ \ \ u205 ( f | F ) | \ \ \ \ u1680 | \ \ \ \ u0009 | \ \ \ \ u0020 | \ \ \ \ u2006 " 
 - + " | \ \ \ \ u2001 | \ \ \ \ u202 ( f | F ) | \ \ \ \ u00 ( a | A ) 0 | \ \ \ \ u000 ( c | C ) | \ \ \ \ u2009 | \ \ \ \ u2004 | \ \ \ \ u2028 " 
 - + " | \ \ \ \ u2028 | \ \ \ \ u2007 | \ \ \ \ u2004 | \ \ \ \ u2028 | \ \ \ \ u2007 | \ \ \ \ u2025 " 
 - + " | \ \ \ \ u ( f | F ) { 2 } 0 ( e | E ) | \ \ \ \ u ( f | F ) { 2 } 61 " ) ; 
 + + " | \ \ \ \ u2029 | \ \ \ \ u205 [ fF ] | \ \ \ \ u3000 | \ \ \ \ u2007 | \ \ \ \ u2000 | \ \ \ \ u200 [ aA ] " 
 + + " | \ \ \ \ u007 [ fF ] | \ \ \ \ u009 [ fF ] | \ \ \ \ u [ fF ] { 4 } | \ \ \ \ u00 [ aA ] [ dD ] " 
 + + " | \ \ \ \ u0600 | \ \ \ \ u061 [ cC ] | \ \ \ \ u06 [ dD ] { 2 } | \ \ \ \ u070 [ fF ] | \ \ \ \ u180 [ eE ] " 
 + + " | \ \ \ \ u2066 | \ \ \ \ u2067 | \ \ \ \ u2068 | \ \ \ \ u2069 " 
 + + " | \ \ \ \ u206 [ aA ] | \ \ \ \ u [ dD ] 800 | \ \ \ \ u [ fF ] [ eE ] [ fF ] { 2 } | \ \ \ \ u [ fF ] { 3 } 9 " 
 + + " | \ \ \ \ u [ fF ] { 3 } [ aA ] | \ \ \ \ u0020 | \ \ \ \ u00 [ aA ] 0 | \ \ \ \ u0604 " 
 + + " | \ \ \ \ u200 [ fF ] " 
 + + " | \ \ \ \ u202 [ fF ] | \ \ \ \ u2064 | \ \ \ \ u206 [ fF ] " 
 + + " | \ \ \ \ u [ fF ] 8 [ fF ] { 2 } | \ \ \ \ u [ fF ] { 3 } [ bB ] " 
 + + " | \ \ \ \ u05 [ dD ] 0 | \ \ \ \ u05 [ fF ] 3 | \ \ \ \ u0750 | \ \ \ \ u0 [ eE ] 00 | \ \ \ \ u1 [ eE ] 00 " 
 + + " | \ \ \ \ u2100 | \ \ \ \ u [ fF ] [ bB ] 50 | \ \ \ \ u [ fF ] [ eE ] 70 | \ \ \ \ u [ fF ] { 2 } 61 | \ \ \ \ u04 [ fF ] 9 " 
 + + " | \ \ \ \ u05 [ bB ] [ eE ] | \ \ \ \ u05 [ eE ] [ aA ] | \ \ \ \ u05 [ fF ] 4 | \ \ \ \ u06 [ fF ] { 2 } " 
 + + " | \ \ \ \ u077 [ fF ] | \ \ \ \ u0 [ eE ] 7 [ fF ] | \ \ \ \ u20 [ aA ] [ fF ] | \ \ \ \ u213 [ aA ] | \ \ \ \ u0000 " 
 + + " | \ \ \ \ u [ fF ] [ dD ] [ fF ] { 2 } | \ \ \ \ u [ fF ] { 2 } [ dD ] [ cC ] " 
 + + " | \ \ \ \ u2002 | \ \ \ \ u0085 | \ \ \ \ u2005 | \ \ \ \ u000 [ bB ] " 
 + + " | \ \ \ \ u2008 | \ \ \ \ u2003 | \ \ \ \ u0009 | \ \ \ \ u2006 " 
 + + " | \ \ \ \ u2001 | \ \ \ \ u000 [ cC ] | \ \ \ \ u2009 | \ \ \ \ u2004 " 
 + + " | \ \ \ \ u2025 " 
 + + " | \ \ \ \ u [ fF ] { 2 } 0 [ eE ] " ) ; 
 
 / * * Cpp style comments . * / 
 private Map < Integer , TextBlock > singlelineComments ;

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 index 21c529d . . 75bf336 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . fail ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 @ @ - 36 , 6 + 37 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class MutableExceptionCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " design " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testClassExtendsGenericClass ( ) throws Exception { 
 @ @ - 43 , 8 + 49 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { 
 
 String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checkConfig , getPath ( " design " + File . separator 
 - + " InputMutableExceptionClassExtendsGenericClass . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputMutableExceptionClassExtendsGenericClass . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 57 , 7 + 62 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { 
 " 46 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " design " + File . separator + " InputMutableException . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputMutableException . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 69 , 7 + 74 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { 
 " 34 : 13 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " design " + File . separator + " InputMutableException . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputMutableException . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableException . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableException . java 
 new file mode 100644 
 index 0000000 . . 7b0febc 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableException . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + public class InputMutableException { 
 + public class FooException extends Exception { 
 + private final int finalErrorCode ; 
 + private int errorCode = 1 ; 
 + 
 + public FooException ( ) { 
 + finalErrorCode = 1 ; 
 + } 
 + 
 + public class FooExceptionThisIsNot extends RuntimeException { 
 + private final int finalErrorCode ; 
 + private int errorCode = 1 ; 
 + / * * constructor * / 
 + public FooExceptionThisIsNot ( ) { 
 + finalErrorCode = 1 ; 
 + } 
 + } 
 + } 
 + 
 + public class BarError extends Throwable { 
 + private int errorCode ; 
 + } 
 + 
 + public class BazDoesNotExtendError { 
 + private int errorCode ; 
 + } 
 + 
 + public class CustomProblem extends ThreadDeath { 
 + private int errorCode ; 
 + 
 + public class CustomFailure extends ThreadDeath { 
 + private int errorCode ; 
 + public void someMethod ( ) { 
 + if ( true ) { 
 + final int i = 0 ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + class CustomException extends java . lang . Exception { } 
 + 
 + class CustomMutableException extends java . lang . Exception { 
 + int errorCode ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableExceptionClassExtendsGenericClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableExceptionClassExtendsGenericClass . java 
 new file mode 100644 
 index 0000000 . . 6b12a88 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableExceptionClassExtendsGenericClass . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import java . util . concurrent . atomic . AtomicReference ; 
 + 
 + / * * 
 + * Convenience class for holding an { @ link Exception } in a thread - safe way 
 + * / 
 + public class InputMutableExceptionClassExtendsGenericClass extends AtomicReference < Exception > { / / NPE is not expected 
 + 
 + private static final long serialVersionUID = 1L ; 
 + 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableException . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableException . java 
 deleted file mode 100644 
 index 8f1a7f2 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableException . java 
 + + + / dev / null 
 @ @ - 1 , 48 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - public class InputMutableException { 
 - public class FooException extends Exception { 
 - private final int finalErrorCode ; 
 - private int errorCode = 1 ; 
 - 
 - public FooException ( ) { 
 - finalErrorCode = 1 ; 
 - } 
 - 
 - public class FooExceptionThisIsNot extends RuntimeException { 
 - private final int finalErrorCode ; 
 - private int errorCode = 1 ; 
 - / * * constructor * / 
 - public FooExceptionThisIsNot ( ) { 
 - finalErrorCode = 1 ; 
 - } 
 - } 
 - } 
 - 
 - public class BarError extends Throwable { 
 - private int errorCode ; 
 - } 
 - 
 - public class BazDoesNotExtendError { 
 - private int errorCode ; 
 - } 
 - 
 - public class CustomProblem extends ThreadDeath { 
 - private int errorCode ; 
 - 
 - public class CustomFailure extends ThreadDeath { 
 - private int errorCode ; 
 - public void someMethod ( ) { 
 - if ( true ) { 
 - final int i = 0 ; 
 - } 
 - } 
 - } 
 - } 
 - 
 - class CustomException extends java . lang . Exception { } 
 - 
 - class CustomMutableException extends java . lang . Exception { 
 - int errorCode ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java 
 deleted file mode 100644 
 index 931128e . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java 
 + + + / dev / null 
 @ @ - 1 , 12 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - import java . util . concurrent . atomic . AtomicReference ; 
 - 
 - / * * 
 - * Convenience class for holding an { @ link Exception } in a thread - safe way 
 - * / 
 - public class InputMutableExceptionClassExtendsGenericClass extends AtomicReference < Exception > { / / NPE is not expected 
 - 
 - private static final long serialVersionUID = 1L ; 
 - 
 - } 
 \ No newline at end of file
