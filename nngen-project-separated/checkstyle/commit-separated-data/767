BLEU SCORE: 0.0321858262703621

TEST MSG: Issue # 4395 : increase coverage of pitest - checkstyle - utils profile to 49 %
GENERATED MSG: UTs coverage for ScopeUtils become 100 % . # 1294

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index d20f4a2 . . 42da97e 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2087 , 7 + 2087 , 7 @ @ <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . utils . * < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 40 < / mutationThreshold > <nl> + < mutationThreshold > 49 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java <nl> index fa200d5 . . 724e984 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java <nl> @ @ - 20 , 11 + 20 , 14 @ @ <nl> package com . puppycrawl . tools . checkstyle . utils ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> - import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . Scope ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class ScopeUtilsTest { <nl> @ @ - 36 , 117 + 39 , 163 @ @ public class ScopeUtilsTest { <nl> <nl> @ Test <nl> public void testInEnumOnRoot ( ) { <nl> - final DetailAST ast = new DetailAST ( ) ; <nl> - Assert . assertFalse ( ScopeUtils . isInEnumBlock ( ast ) ) ; <nl> + assertFalse ( ScopeUtils . isInEnumBlock ( new DetailAST ( ) ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testInEnumBlockInNew ( ) { <nl> - final DetailAST ast = new DetailAST ( ) ; <nl> - ast . setType ( TokenTypes . LITERAL _ NEW ) ; <nl> - final DetailAST ast2 = new DetailAST ( ) ; <nl> - ast2 . setType ( TokenTypes . MODIFIERS ) ; <nl> - ast . addChild ( ast2 ) ; <nl> - <nl> - Assert . assertFalse ( ScopeUtils . isInEnumBlock ( ast2 ) ) ; <nl> + assertFalse ( ScopeUtils . isInEnumBlock ( <nl> + getNode ( TokenTypes . LITERAL _ NEW , TokenTypes . MODIFIERS ) ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testInEnumBlockWithEnum ( ) { <nl> - final DetailAST ast0 = new DetailAST ( ) ; <nl> - ast0 . setType ( TokenTypes . OBJBLOCK ) ; <nl> - final DetailAST ast1 = new DetailAST ( ) ; <nl> - ast1 . setType ( TokenTypes . ENUM _ DEF ) ; <nl> - ast0 . addChild ( ast1 ) ; <nl> - final DetailAST ast2 = new DetailAST ( ) ; <nl> - ast2 . setType ( TokenTypes . MODIFIERS ) ; <nl> - ast1 . addChild ( ast2 ) ; <nl> - <nl> - Assert . assertTrue ( ScopeUtils . isInEnumBlock ( ast2 ) ) ; <nl> + assertTrue ( ScopeUtils . isInEnumBlock ( <nl> + getNode ( TokenTypes . OBJBLOCK , TokenTypes . ENUM _ DEF , TokenTypes . MODIFIERS ) ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testInEnumBlockInInterface ( ) { <nl> - final DetailAST ast = new DetailAST ( ) ; <nl> - ast . setType ( TokenTypes . INTERFACE _ DEF ) ; <nl> - final DetailAST ast2 = new DetailAST ( ) ; <nl> - ast2 . setType ( TokenTypes . MODIFIERS ) ; <nl> - ast . addChild ( ast2 ) ; <nl> - <nl> - Assert . assertFalse ( ScopeUtils . isInEnumBlock ( ast2 ) ) ; <nl> + assertFalse ( ScopeUtils . isInEnumBlock ( <nl> + getNode ( TokenTypes . INTERFACE _ DEF , TokenTypes . MODIFIERS ) ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testInEnumBlockInAnnotation ( ) { <nl> - final DetailAST ast = new DetailAST ( ) ; <nl> - ast . setType ( TokenTypes . ANNOTATION _ DEF ) ; <nl> - final DetailAST ast2 = new DetailAST ( ) ; <nl> - ast2 . setType ( TokenTypes . MODIFIERS ) ; <nl> - ast . addChild ( ast2 ) ; <nl> - <nl> - Assert . assertFalse ( ScopeUtils . isInEnumBlock ( ast2 ) ) ; <nl> + assertFalse ( ScopeUtils . isInEnumBlock ( <nl> + getNode ( TokenTypes . ANNOTATION _ DEF , TokenTypes . MODIFIERS ) ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testInEnumBlockInClass ( ) { <nl> - final DetailAST ast = new DetailAST ( ) ; <nl> - ast . setType ( TokenTypes . CLASS _ DEF ) ; <nl> - final DetailAST ast2 = new DetailAST ( ) ; <nl> - ast2 . setType ( TokenTypes . MODIFIERS ) ; <nl> - ast . addChild ( ast2 ) ; <nl> + assertFalse ( ScopeUtils . isInEnumBlock ( <nl> + getNode ( TokenTypes . CLASS _ DEF , TokenTypes . MODIFIERS ) ) ) ; <nl> + } <nl> <nl> - Assert . assertFalse ( ScopeUtils . isInEnumBlock ( ast2 ) ) ; <nl> + @ Test <nl> + public void testInEnumBlockInLiteralNew ( ) { <nl> + assertFalse ( ScopeUtils . isInEnumBlock ( <nl> + getNode ( TokenTypes . LITERAL _ NEW , TokenTypes . IDENT ) ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testIsOuterMostTypeInterface ( ) { <nl> - final DetailAST ast = new DetailAST ( ) ; <nl> - ast . setType ( TokenTypes . INTERFACE _ DEF ) ; <nl> - final DetailAST ast2 = new DetailAST ( ) ; <nl> - ast2 . setType ( TokenTypes . MODIFIERS ) ; <nl> - ast . addChild ( ast2 ) ; <nl> - <nl> - Assert . assertFalse ( ScopeUtils . isOuterMostType ( ast2 ) ) ; <nl> + assertFalse ( ScopeUtils . isOuterMostType ( <nl> + getNode ( TokenTypes . INTERFACE _ DEF , TokenTypes . MODIFIERS ) ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testIsOuterMostTypeAnnotation ( ) { <nl> - final DetailAST ast = new DetailAST ( ) ; <nl> - ast . setType ( TokenTypes . ANNOTATION _ DEF ) ; <nl> - final DetailAST ast2 = new DetailAST ( ) ; <nl> - ast2 . setType ( TokenTypes . MODIFIERS ) ; <nl> - ast . addChild ( ast2 ) ; <nl> - <nl> - Assert . assertFalse ( ScopeUtils . isOuterMostType ( ast2 ) ) ; <nl> + assertFalse ( ScopeUtils . isOuterMostType ( <nl> + getNode ( TokenTypes . ANNOTATION _ DEF , TokenTypes . MODIFIERS ) ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testIsOuterMostTypeEnum ( ) { <nl> - final DetailAST ast = new DetailAST ( ) ; <nl> - ast . setType ( TokenTypes . ENUM _ DEF ) ; <nl> - final DetailAST ast2 = new DetailAST ( ) ; <nl> - ast2 . setType ( TokenTypes . MODIFIERS ) ; <nl> - ast . addChild ( ast2 ) ; <nl> + assertFalse ( ScopeUtils . isOuterMostType ( <nl> + getNode ( TokenTypes . ENUM _ DEF , TokenTypes . MODIFIERS ) ) ) ; <nl> + } <nl> <nl> - Assert . assertFalse ( ScopeUtils . isOuterMostType ( ast2 ) ) ; <nl> + @ Test <nl> + public void testIsOuterMostTypeClass ( ) { <nl> + assertFalse ( ScopeUtils . isOuterMostType ( <nl> + getNode ( TokenTypes . CLASS _ DEF , TokenTypes . MODIFIERS ) ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testIsLocalVariableDefCatch ( ) { <nl> - final DetailAST ast = new DetailAST ( ) ; <nl> - ast . setType ( TokenTypes . LITERAL _ CATCH ) ; <nl> - final DetailAST ast2 = new DetailAST ( ) ; <nl> - ast2 . setType ( TokenTypes . PARAMETER _ DEF ) ; <nl> - ast . addChild ( ast2 ) ; <nl> - <nl> - Assert . assertTrue ( ScopeUtils . isLocalVariableDef ( ast2 ) ) ; <nl> + assertTrue ( ScopeUtils . isLocalVariableDef ( <nl> + getNode ( TokenTypes . LITERAL _ CATCH , TokenTypes . PARAMETER _ DEF ) ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testIsLocalVariableDefUnexpected ( ) { <nl> - final DetailAST ast = new DetailAST ( ) ; <nl> - ast . setType ( TokenTypes . LITERAL _ CATCH ) ; <nl> + assertFalse ( ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . LITERAL _ CATCH ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsClassFieldDef ( ) { <nl> + assertTrue ( ScopeUtils . isClassFieldDef ( <nl> + getNode ( TokenTypes . CLASS _ DEF , TokenTypes . OBJBLOCK , TokenTypes . VARIABLE _ DEF ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSurroundingScope ( ) { <nl> + assertEquals ( Scope . PUBLIC , ScopeUtils . getSurroundingScope ( getNodeWithParentScope ( <nl> + TokenTypes . LITERAL _ PUBLIC , " public " , TokenTypes . ANNOTATION _ DEF ) ) ) ; <nl> + assertEquals ( Scope . PROTECTED , ScopeUtils . getSurroundingScope ( <nl> + getNodeWithParentScope ( TokenTypes . LITERAL _ PROTECTED , " protected " , <nl> + TokenTypes . INTERFACE _ DEF ) ) ) ; <nl> + assertEquals ( Scope . PRIVATE , ScopeUtils . getSurroundingScope ( <nl> + getNodeWithParentScope ( TokenTypes . LITERAL _ PRIVATE , " private " , TokenTypes . ENUM _ DEF ) ) ) ; <nl> + assertEquals ( Scope . PACKAGE , ScopeUtils . getSurroundingScope ( <nl> + getNodeWithParentScope ( TokenTypes . LITERAL _ STATIC , " static " , TokenTypes . CLASS _ DEF ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsInScope ( ) { <nl> + assertTrue ( ScopeUtils . isInScope ( getNodeWithParentScope ( TokenTypes . LITERAL _ PUBLIC , <nl> + " public " , TokenTypes . ANNOTATION _ DEF ) , Scope . PUBLIC ) ) ; <nl> + assertFalse ( ScopeUtils . isInScope ( getNodeWithParentScope ( TokenTypes . LITERAL _ PROTECTED , <nl> + " protected " , TokenTypes . INTERFACE _ DEF ) , Scope . PRIVATE ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSurroundingScopeOfNodeChildOfLiteralNewIsAnoninner ( ) { <nl> + assertEquals ( Scope . ANONINNER , ScopeUtils . getSurroundingScope ( <nl> + getNode ( TokenTypes . LITERAL _ NEW , TokenTypes . IDENT ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsInInterfaceBlock ( ) { <nl> + final DetailAST ast = getNode ( TokenTypes . INTERFACE _ DEF , TokenTypes . OBJBLOCK , <nl> + TokenTypes . CLASS _ DEF , TokenTypes . MODIFIERS ) ; <nl> + <nl> + assertTrue ( ScopeUtils . isInInterfaceBlock ( ast . getParent ( ) ) ) ; <nl> + assertFalse ( ScopeUtils . isInInterfaceBlock ( ast ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsInAnnotationBlock ( ) { <nl> + final DetailAST ast = getNode ( TokenTypes . ANNOTATION _ DEF , TokenTypes . OBJBLOCK , <nl> + TokenTypes . INTERFACE _ DEF , TokenTypes . MODIFIERS ) ; <nl> + <nl> + assertTrue ( ScopeUtils . isInAnnotationBlock ( ast . getParent ( ) ) ) ; <nl> + assertFalse ( ScopeUtils . isInAnnotationBlock ( ast ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testisInInterfaceOrAnnotationBlock ( ) { <nl> + assertTrue ( ScopeUtils . isInInterfaceOrAnnotationBlock ( <nl> + getNode ( TokenTypes . ANNOTATION _ DEF , TokenTypes . OBJBLOCK ) ) ) ; <nl> + assertTrue ( ScopeUtils . isInInterfaceOrAnnotationBlock ( <nl> + getNode ( TokenTypes . INTERFACE _ DEF , TokenTypes . OBJBLOCK ) ) ) ; <nl> + assertFalse ( ScopeUtils . isInInterfaceOrAnnotationBlock ( <nl> + getNode ( TokenTypes . CLASS _ DEF , TokenTypes . OBJBLOCK ) ) ) ; <nl> + assertFalse ( ScopeUtils . isInInterfaceOrAnnotationBlock ( <nl> + getNode ( TokenTypes . LITERAL _ NEW , TokenTypes . IDENT ) ) ) ; <nl> + assertFalse ( ScopeUtils . isInInterfaceOrAnnotationBlock ( <nl> + getNode ( TokenTypes . ENUM _ DEF , TokenTypes . OBJBLOCK ) ) ) ; <nl> + } <nl> + <nl> + private static DetailAST getNode ( int . . . nodeTypes ) { <nl> + DetailAST ast = new DetailAST ( ) ; <nl> + ast . setType ( nodeTypes [ 0 ] ) ; <nl> + for ( int i = 1 ; i < nodeTypes . length ; i + + ) { <nl> + final DetailAST astChild = new DetailAST ( ) ; <nl> + astChild . setType ( nodeTypes [ i ] ) ; <nl> + ast . addChild ( astChild ) ; <nl> + ast = astChild ; <nl> + } <nl> + return ast ; <nl> + } <nl> <nl> - Assert . assertFalse ( ScopeUtils . isLocalVariableDef ( ast ) ) ; <nl> + private static DetailAST getNodeWithParentScope ( int literal , String scope , <nl> + int parentTokenType ) { <nl> + final DetailAST ast = getNode ( parentTokenType , TokenTypes . MODIFIERS , literal ) ; <nl> + ast . setText ( scope ) ; <nl> + final DetailAST ast2 = getNode ( TokenTypes . OBJBLOCK ) ; <nl> + ast . getParent ( ) . getParent ( ) . addChild ( ast2 ) ; <nl> + return ast ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index f87e77a . . 1a7783e 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 805 , 7 + 805 , 6 @ @ <nl> < regex > < pattern > . * . checks . coding . SimplifyBooleanExpressionCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 77 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . coding . SimplifyBooleanReturnCheck < / pattern > < branchRate > 83 < / branchRate > < lineRate > 96 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . coding . StringLiteralEqualityCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 87 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . checks . coding . UnnecessaryParenthesesCheck < / pattern > < branchRate > 91 < / branchRate > < lineRate > 96 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . coding . VariableDeclarationUsageDistanceCheck < / pattern > < branchRate > 90 < / branchRate > < lineRate > 97 < / lineRate > < / regex > <nl> <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> index c45ad43 . . b985632 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> - import antlr . collections . AST ; <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 89 , 8 + 88 , 6 @ @ public class UnnecessaryParenthesesCheck extends Check { <nl> * / <nl> public static final String MSG _ RETURN = " unnecessary . paren . return " ; <nl> <nl> - / * * The minimum number of child nodes to consider for a match . * / <nl> - private static final int MIN _ CHILDREN _ FOR _ MATCH = 3 ; <nl> / * * The maximum string length before we chop the string . * / <nl> private static final int MAX _ QUOTED _ LENGTH = 25 ; <nl> <nl> @ @ - 187 , 6 + 184 , 12 @ @ public class UnnecessaryParenthesesCheck extends Check { <nl> } <nl> <nl> @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + / / Check can work with any of acceptable tokens <nl> + return new int [ ] { } ; <nl> + } <nl> + <nl> + @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> final int type = ast . getType ( ) ; <nl> final DetailAST parent = ast . getParent ( ) ; <nl> @ @ - 246 , 7 + 249 , 7 @ @ public class UnnecessaryParenthesesCheck extends Check { <nl> / / warning about an immediate child node in visitToken , so we don ' t <nl> / / need to log another one here . <nl> <nl> - if ( parentToSkip ! = ast & & exprSurrounded ( ast ) ) { <nl> + if ( parentToSkip ! = ast & & isExprSurrounded ( ast ) ) { <nl> if ( assignDepth > = 1 ) { <nl> log ( ast , MSG _ ASSIGN ) ; <nl> } <nl> @ @ - 279 , 11 + 282 , 10 @ @ public class UnnecessaryParenthesesCheck extends Check { <nl> * parentheses . <nl> * / <nl> private boolean isSurrounded ( DetailAST ast ) { <nl> + / / if previous sibling is left parenthesis , <nl> + / / next sibling can ' t be other than right parenthesis <nl> final DetailAST prev = ast . getPreviousSibling ( ) ; <nl> - final DetailAST next = ast . getNextSibling ( ) ; <nl> - <nl> - return prev ! = null & & prev . getType ( ) = = TokenTypes . LPAREN <nl> - & & next ! = null & & next . getType ( ) = = TokenTypes . RPAREN ; <nl> + return prev ! = null & & prev . getType ( ) = = TokenTypes . LPAREN ; <nl> } <nl> <nl> / * * <nl> @ @ - 292 , 22 + 294 , 9 @ @ public class UnnecessaryParenthesesCheck extends Check { <nl> * < code > TokenTypes . EXPR < / code > . <nl> * @ return < code > true < / code > if the expression is surrounded by <nl> * parentheses . <nl> - * @ throws IllegalArgumentException if < code > ast . getType ( ) < / code > is not <nl> - * equal to < code > TokenTypes . EXPR < / code > . <nl> * / <nl> - private boolean exprSurrounded ( DetailAST ast ) { <nl> - if ( ast . getType ( ) ! = TokenTypes . EXPR ) { <nl> - throw new IllegalArgumentException ( " Not an expression node . " ) ; <nl> - } <nl> - boolean surrounded = false ; <nl> - if ( ast . getChildCount ( ) > = MIN _ CHILDREN _ FOR _ MATCH ) { <nl> - final AST n1 = ast . getFirstChild ( ) ; <nl> - final AST nn = ast . getLastChild ( ) ; <nl> - <nl> - surrounded = n1 . getType ( ) = = TokenTypes . LPAREN <nl> - & & nn . getType ( ) = = TokenTypes . RPAREN ; <nl> - } <nl> - return surrounded ; <nl> + private boolean isExprSurrounded ( DetailAST ast ) { <nl> + return ast . getFirstChild ( ) . getType ( ) = = TokenTypes . LPAREN ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> index bd5dffe . . 14f7834 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> @ @ - 19 , 11 + 19 , 6 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> - import java . io . File ; <nl> - import org . junit . Test ; <nl> - <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ ASSIGN ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ EXPR ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ IDENT ; <nl> @ @ - 31 , 6 + 26 , 14 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthes <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ RETURN ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ STRING ; <nl> <nl> + import java . io . File ; <nl> + <nl> + import org . junit . Assert ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + <nl> / * * <nl> * Test fixture for the UnnecessaryParenthesesCheck . <nl> * <nl> @ @ - 101 , 4 + 104 , 12 @ @ public class UnnecessaryParenthesesCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { } ; <nl> verify ( checkConfig , getPath ( " Input15Extensions . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testTokensNotNull ( ) { <nl> + UnnecessaryParenthesesCheck check = new UnnecessaryParenthesesCheck ( ) ; <nl> + Assert . assertNotNull ( check . getDefaultTokens ( ) ) ; <nl> + Assert . assertNotNull ( check . getAcceptableTokens ( ) ) ; <nl> + Assert . assertNotNull ( check . getRequiredTokens ( ) ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index d20f4a2 . . 42da97e 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2087 , 7 + 2087 , 7 @ @ 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . utils . * < / param > 
 < / targetTests > 
 - < mutationThreshold > 40 < / mutationThreshold > 
 + < mutationThreshold > 49 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java 
 index fa200d5 . . 724e984 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtilsTest . java 
 @ @ - 20 , 11 + 20 , 14 @ @ 
 package com . puppycrawl . tools . checkstyle . utils ; 
 
 import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 
 - import org . junit . Assert ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . Scope ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class ScopeUtilsTest { 
 @ @ - 36 , 117 + 39 , 163 @ @ public class ScopeUtilsTest { 
 
 @ Test 
 public void testInEnumOnRoot ( ) { 
 - final DetailAST ast = new DetailAST ( ) ; 
 - Assert . assertFalse ( ScopeUtils . isInEnumBlock ( ast ) ) ; 
 + assertFalse ( ScopeUtils . isInEnumBlock ( new DetailAST ( ) ) ) ; 
 } 
 
 @ Test 
 public void testInEnumBlockInNew ( ) { 
 - final DetailAST ast = new DetailAST ( ) ; 
 - ast . setType ( TokenTypes . LITERAL _ NEW ) ; 
 - final DetailAST ast2 = new DetailAST ( ) ; 
 - ast2 . setType ( TokenTypes . MODIFIERS ) ; 
 - ast . addChild ( ast2 ) ; 
 - 
 - Assert . assertFalse ( ScopeUtils . isInEnumBlock ( ast2 ) ) ; 
 + assertFalse ( ScopeUtils . isInEnumBlock ( 
 + getNode ( TokenTypes . LITERAL _ NEW , TokenTypes . MODIFIERS ) ) ) ; 
 } 
 
 @ Test 
 public void testInEnumBlockWithEnum ( ) { 
 - final DetailAST ast0 = new DetailAST ( ) ; 
 - ast0 . setType ( TokenTypes . OBJBLOCK ) ; 
 - final DetailAST ast1 = new DetailAST ( ) ; 
 - ast1 . setType ( TokenTypes . ENUM _ DEF ) ; 
 - ast0 . addChild ( ast1 ) ; 
 - final DetailAST ast2 = new DetailAST ( ) ; 
 - ast2 . setType ( TokenTypes . MODIFIERS ) ; 
 - ast1 . addChild ( ast2 ) ; 
 - 
 - Assert . assertTrue ( ScopeUtils . isInEnumBlock ( ast2 ) ) ; 
 + assertTrue ( ScopeUtils . isInEnumBlock ( 
 + getNode ( TokenTypes . OBJBLOCK , TokenTypes . ENUM _ DEF , TokenTypes . MODIFIERS ) ) ) ; 
 } 
 
 @ Test 
 public void testInEnumBlockInInterface ( ) { 
 - final DetailAST ast = new DetailAST ( ) ; 
 - ast . setType ( TokenTypes . INTERFACE _ DEF ) ; 
 - final DetailAST ast2 = new DetailAST ( ) ; 
 - ast2 . setType ( TokenTypes . MODIFIERS ) ; 
 - ast . addChild ( ast2 ) ; 
 - 
 - Assert . assertFalse ( ScopeUtils . isInEnumBlock ( ast2 ) ) ; 
 + assertFalse ( ScopeUtils . isInEnumBlock ( 
 + getNode ( TokenTypes . INTERFACE _ DEF , TokenTypes . MODIFIERS ) ) ) ; 
 } 
 
 @ Test 
 public void testInEnumBlockInAnnotation ( ) { 
 - final DetailAST ast = new DetailAST ( ) ; 
 - ast . setType ( TokenTypes . ANNOTATION _ DEF ) ; 
 - final DetailAST ast2 = new DetailAST ( ) ; 
 - ast2 . setType ( TokenTypes . MODIFIERS ) ; 
 - ast . addChild ( ast2 ) ; 
 - 
 - Assert . assertFalse ( ScopeUtils . isInEnumBlock ( ast2 ) ) ; 
 + assertFalse ( ScopeUtils . isInEnumBlock ( 
 + getNode ( TokenTypes . ANNOTATION _ DEF , TokenTypes . MODIFIERS ) ) ) ; 
 } 
 
 @ Test 
 public void testInEnumBlockInClass ( ) { 
 - final DetailAST ast = new DetailAST ( ) ; 
 - ast . setType ( TokenTypes . CLASS _ DEF ) ; 
 - final DetailAST ast2 = new DetailAST ( ) ; 
 - ast2 . setType ( TokenTypes . MODIFIERS ) ; 
 - ast . addChild ( ast2 ) ; 
 + assertFalse ( ScopeUtils . isInEnumBlock ( 
 + getNode ( TokenTypes . CLASS _ DEF , TokenTypes . MODIFIERS ) ) ) ; 
 + } 
 
 - Assert . assertFalse ( ScopeUtils . isInEnumBlock ( ast2 ) ) ; 
 + @ Test 
 + public void testInEnumBlockInLiteralNew ( ) { 
 + assertFalse ( ScopeUtils . isInEnumBlock ( 
 + getNode ( TokenTypes . LITERAL _ NEW , TokenTypes . IDENT ) ) ) ; 
 } 
 
 @ Test 
 public void testIsOuterMostTypeInterface ( ) { 
 - final DetailAST ast = new DetailAST ( ) ; 
 - ast . setType ( TokenTypes . INTERFACE _ DEF ) ; 
 - final DetailAST ast2 = new DetailAST ( ) ; 
 - ast2 . setType ( TokenTypes . MODIFIERS ) ; 
 - ast . addChild ( ast2 ) ; 
 - 
 - Assert . assertFalse ( ScopeUtils . isOuterMostType ( ast2 ) ) ; 
 + assertFalse ( ScopeUtils . isOuterMostType ( 
 + getNode ( TokenTypes . INTERFACE _ DEF , TokenTypes . MODIFIERS ) ) ) ; 
 } 
 
 @ Test 
 public void testIsOuterMostTypeAnnotation ( ) { 
 - final DetailAST ast = new DetailAST ( ) ; 
 - ast . setType ( TokenTypes . ANNOTATION _ DEF ) ; 
 - final DetailAST ast2 = new DetailAST ( ) ; 
 - ast2 . setType ( TokenTypes . MODIFIERS ) ; 
 - ast . addChild ( ast2 ) ; 
 - 
 - Assert . assertFalse ( ScopeUtils . isOuterMostType ( ast2 ) ) ; 
 + assertFalse ( ScopeUtils . isOuterMostType ( 
 + getNode ( TokenTypes . ANNOTATION _ DEF , TokenTypes . MODIFIERS ) ) ) ; 
 } 
 
 @ Test 
 public void testIsOuterMostTypeEnum ( ) { 
 - final DetailAST ast = new DetailAST ( ) ; 
 - ast . setType ( TokenTypes . ENUM _ DEF ) ; 
 - final DetailAST ast2 = new DetailAST ( ) ; 
 - ast2 . setType ( TokenTypes . MODIFIERS ) ; 
 - ast . addChild ( ast2 ) ; 
 + assertFalse ( ScopeUtils . isOuterMostType ( 
 + getNode ( TokenTypes . ENUM _ DEF , TokenTypes . MODIFIERS ) ) ) ; 
 + } 
 
 - Assert . assertFalse ( ScopeUtils . isOuterMostType ( ast2 ) ) ; 
 + @ Test 
 + public void testIsOuterMostTypeClass ( ) { 
 + assertFalse ( ScopeUtils . isOuterMostType ( 
 + getNode ( TokenTypes . CLASS _ DEF , TokenTypes . MODIFIERS ) ) ) ; 
 } 
 
 @ Test 
 public void testIsLocalVariableDefCatch ( ) { 
 - final DetailAST ast = new DetailAST ( ) ; 
 - ast . setType ( TokenTypes . LITERAL _ CATCH ) ; 
 - final DetailAST ast2 = new DetailAST ( ) ; 
 - ast2 . setType ( TokenTypes . PARAMETER _ DEF ) ; 
 - ast . addChild ( ast2 ) ; 
 - 
 - Assert . assertTrue ( ScopeUtils . isLocalVariableDef ( ast2 ) ) ; 
 + assertTrue ( ScopeUtils . isLocalVariableDef ( 
 + getNode ( TokenTypes . LITERAL _ CATCH , TokenTypes . PARAMETER _ DEF ) ) ) ; 
 } 
 
 @ Test 
 public void testIsLocalVariableDefUnexpected ( ) { 
 - final DetailAST ast = new DetailAST ( ) ; 
 - ast . setType ( TokenTypes . LITERAL _ CATCH ) ; 
 + assertFalse ( ScopeUtils . isLocalVariableDef ( getNode ( TokenTypes . LITERAL _ CATCH ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsClassFieldDef ( ) { 
 + assertTrue ( ScopeUtils . isClassFieldDef ( 
 + getNode ( TokenTypes . CLASS _ DEF , TokenTypes . OBJBLOCK , TokenTypes . VARIABLE _ DEF ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testSurroundingScope ( ) { 
 + assertEquals ( Scope . PUBLIC , ScopeUtils . getSurroundingScope ( getNodeWithParentScope ( 
 + TokenTypes . LITERAL _ PUBLIC , " public " , TokenTypes . ANNOTATION _ DEF ) ) ) ; 
 + assertEquals ( Scope . PROTECTED , ScopeUtils . getSurroundingScope ( 
 + getNodeWithParentScope ( TokenTypes . LITERAL _ PROTECTED , " protected " , 
 + TokenTypes . INTERFACE _ DEF ) ) ) ; 
 + assertEquals ( Scope . PRIVATE , ScopeUtils . getSurroundingScope ( 
 + getNodeWithParentScope ( TokenTypes . LITERAL _ PRIVATE , " private " , TokenTypes . ENUM _ DEF ) ) ) ; 
 + assertEquals ( Scope . PACKAGE , ScopeUtils . getSurroundingScope ( 
 + getNodeWithParentScope ( TokenTypes . LITERAL _ STATIC , " static " , TokenTypes . CLASS _ DEF ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsInScope ( ) { 
 + assertTrue ( ScopeUtils . isInScope ( getNodeWithParentScope ( TokenTypes . LITERAL _ PUBLIC , 
 + " public " , TokenTypes . ANNOTATION _ DEF ) , Scope . PUBLIC ) ) ; 
 + assertFalse ( ScopeUtils . isInScope ( getNodeWithParentScope ( TokenTypes . LITERAL _ PROTECTED , 
 + " protected " , TokenTypes . INTERFACE _ DEF ) , Scope . PRIVATE ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testSurroundingScopeOfNodeChildOfLiteralNewIsAnoninner ( ) { 
 + assertEquals ( Scope . ANONINNER , ScopeUtils . getSurroundingScope ( 
 + getNode ( TokenTypes . LITERAL _ NEW , TokenTypes . IDENT ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsInInterfaceBlock ( ) { 
 + final DetailAST ast = getNode ( TokenTypes . INTERFACE _ DEF , TokenTypes . OBJBLOCK , 
 + TokenTypes . CLASS _ DEF , TokenTypes . MODIFIERS ) ; 
 + 
 + assertTrue ( ScopeUtils . isInInterfaceBlock ( ast . getParent ( ) ) ) ; 
 + assertFalse ( ScopeUtils . isInInterfaceBlock ( ast ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsInAnnotationBlock ( ) { 
 + final DetailAST ast = getNode ( TokenTypes . ANNOTATION _ DEF , TokenTypes . OBJBLOCK , 
 + TokenTypes . INTERFACE _ DEF , TokenTypes . MODIFIERS ) ; 
 + 
 + assertTrue ( ScopeUtils . isInAnnotationBlock ( ast . getParent ( ) ) ) ; 
 + assertFalse ( ScopeUtils . isInAnnotationBlock ( ast ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testisInInterfaceOrAnnotationBlock ( ) { 
 + assertTrue ( ScopeUtils . isInInterfaceOrAnnotationBlock ( 
 + getNode ( TokenTypes . ANNOTATION _ DEF , TokenTypes . OBJBLOCK ) ) ) ; 
 + assertTrue ( ScopeUtils . isInInterfaceOrAnnotationBlock ( 
 + getNode ( TokenTypes . INTERFACE _ DEF , TokenTypes . OBJBLOCK ) ) ) ; 
 + assertFalse ( ScopeUtils . isInInterfaceOrAnnotationBlock ( 
 + getNode ( TokenTypes . CLASS _ DEF , TokenTypes . OBJBLOCK ) ) ) ; 
 + assertFalse ( ScopeUtils . isInInterfaceOrAnnotationBlock ( 
 + getNode ( TokenTypes . LITERAL _ NEW , TokenTypes . IDENT ) ) ) ; 
 + assertFalse ( ScopeUtils . isInInterfaceOrAnnotationBlock ( 
 + getNode ( TokenTypes . ENUM _ DEF , TokenTypes . OBJBLOCK ) ) ) ; 
 + } 
 + 
 + private static DetailAST getNode ( int . . . nodeTypes ) { 
 + DetailAST ast = new DetailAST ( ) ; 
 + ast . setType ( nodeTypes [ 0 ] ) ; 
 + for ( int i = 1 ; i < nodeTypes . length ; i + + ) { 
 + final DetailAST astChild = new DetailAST ( ) ; 
 + astChild . setType ( nodeTypes [ i ] ) ; 
 + ast . addChild ( astChild ) ; 
 + ast = astChild ; 
 + } 
 + return ast ; 
 + } 
 
 - Assert . assertFalse ( ScopeUtils . isLocalVariableDef ( ast ) ) ; 
 + private static DetailAST getNodeWithParentScope ( int literal , String scope , 
 + int parentTokenType ) { 
 + final DetailAST ast = getNode ( parentTokenType , TokenTypes . MODIFIERS , literal ) ; 
 + ast . setText ( scope ) ; 
 + final DetailAST ast2 = getNode ( TokenTypes . OBJBLOCK ) ; 
 + ast . getParent ( ) . getParent ( ) . addChild ( ast2 ) ; 
 + return ast ; 
 } 
 }

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index f87e77a . . 1a7783e 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 805 , 7 + 805 , 6 @ @ 
 < regex > < pattern > . * . checks . coding . SimplifyBooleanExpressionCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 77 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . coding . SimplifyBooleanReturnCheck < / pattern > < branchRate > 83 < / branchRate > < lineRate > 96 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . coding . StringLiteralEqualityCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 87 < / lineRate > < / regex > 
 - < regex > < pattern > . * . checks . coding . UnnecessaryParenthesesCheck < / pattern > < branchRate > 91 < / branchRate > < lineRate > 96 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . coding . VariableDeclarationUsageDistanceCheck < / pattern > < branchRate > 90 < / branchRate > < lineRate > 97 < / lineRate > < / regex > 
 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 index c45ad43 . . b985632 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 @ @ - 19 , 7 + 19 , 6 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 - import antlr . collections . AST ; 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 89 , 8 + 88 , 6 @ @ public class UnnecessaryParenthesesCheck extends Check { 
 * / 
 public static final String MSG _ RETURN = " unnecessary . paren . return " ; 
 
 - / * * The minimum number of child nodes to consider for a match . * / 
 - private static final int MIN _ CHILDREN _ FOR _ MATCH = 3 ; 
 / * * The maximum string length before we chop the string . * / 
 private static final int MAX _ QUOTED _ LENGTH = 25 ; 
 
 @ @ - 187 , 6 + 184 , 12 @ @ public class UnnecessaryParenthesesCheck extends Check { 
 } 
 
 @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + / / Check can work with any of acceptable tokens 
 + return new int [ ] { } ; 
 + } 
 + 
 + @ Override 
 public void visitToken ( DetailAST ast ) { 
 final int type = ast . getType ( ) ; 
 final DetailAST parent = ast . getParent ( ) ; 
 @ @ - 246 , 7 + 249 , 7 @ @ public class UnnecessaryParenthesesCheck extends Check { 
 / / warning about an immediate child node in visitToken , so we don ' t 
 / / need to log another one here . 
 
 - if ( parentToSkip ! = ast & & exprSurrounded ( ast ) ) { 
 + if ( parentToSkip ! = ast & & isExprSurrounded ( ast ) ) { 
 if ( assignDepth > = 1 ) { 
 log ( ast , MSG _ ASSIGN ) ; 
 } 
 @ @ - 279 , 11 + 282 , 10 @ @ public class UnnecessaryParenthesesCheck extends Check { 
 * parentheses . 
 * / 
 private boolean isSurrounded ( DetailAST ast ) { 
 + / / if previous sibling is left parenthesis , 
 + / / next sibling can ' t be other than right parenthesis 
 final DetailAST prev = ast . getPreviousSibling ( ) ; 
 - final DetailAST next = ast . getNextSibling ( ) ; 
 - 
 - return prev ! = null & & prev . getType ( ) = = TokenTypes . LPAREN 
 - & & next ! = null & & next . getType ( ) = = TokenTypes . RPAREN ; 
 + return prev ! = null & & prev . getType ( ) = = TokenTypes . LPAREN ; 
 } 
 
 / * * 
 @ @ - 292 , 22 + 294 , 9 @ @ public class UnnecessaryParenthesesCheck extends Check { 
 * < code > TokenTypes . EXPR < / code > . 
 * @ return < code > true < / code > if the expression is surrounded by 
 * parentheses . 
 - * @ throws IllegalArgumentException if < code > ast . getType ( ) < / code > is not 
 - * equal to < code > TokenTypes . EXPR < / code > . 
 * / 
 - private boolean exprSurrounded ( DetailAST ast ) { 
 - if ( ast . getType ( ) ! = TokenTypes . EXPR ) { 
 - throw new IllegalArgumentException ( " Not an expression node . " ) ; 
 - } 
 - boolean surrounded = false ; 
 - if ( ast . getChildCount ( ) > = MIN _ CHILDREN _ FOR _ MATCH ) { 
 - final AST n1 = ast . getFirstChild ( ) ; 
 - final AST nn = ast . getLastChild ( ) ; 
 - 
 - surrounded = n1 . getType ( ) = = TokenTypes . LPAREN 
 - & & nn . getType ( ) = = TokenTypes . RPAREN ; 
 - } 
 - return surrounded ; 
 + private boolean isExprSurrounded ( DetailAST ast ) { 
 + return ast . getFirstChild ( ) . getType ( ) = = TokenTypes . LPAREN ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 index bd5dffe . . 14f7834 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 @ @ - 19 , 11 + 19 , 6 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 - import java . io . File ; 
 - import org . junit . Test ; 
 - 
 import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ ASSIGN ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ EXPR ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ IDENT ; 
 @ @ - 31 , 6 + 26 , 14 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthes 
 import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ RETURN ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ STRING ; 
 
 + import java . io . File ; 
 + 
 + import org . junit . Assert ; 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + 
 / * * 
 * Test fixture for the UnnecessaryParenthesesCheck . 
 * 
 @ @ - 101 , 4 + 104 , 12 @ @ public class UnnecessaryParenthesesCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { } ; 
 verify ( checkConfig , getPath ( " Input15Extensions . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testTokensNotNull ( ) { 
 + UnnecessaryParenthesesCheck check = new UnnecessaryParenthesesCheck ( ) ; 
 + Assert . assertNotNull ( check . getDefaultTokens ( ) ) ; 
 + Assert . assertNotNull ( check . getAcceptableTokens ( ) ) ; 
 + Assert . assertNotNull ( check . getRequiredTokens ( ) ) ; 
 + } 
 }
