BLEU SCORE: 0.037477767366779206

TEST MSG: Issue # 3753 : updated reason for no NeedBracesCheck on lambda
GENERATED MSG: minor : added missing exception checks

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> index ca4cac6 . . c7c2530 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> @ @ - 216 , 11 + 216 , 8 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> / / which this check does not provide <nl> " LPAREN " , " RPAREN " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NeedBraces " , Stream . of ( <nl> - / / state of configuration until <nl> - / / https : / / github . com / checkstyle / checkstyle / issues / 3753 <nl> - " LAMBDA " , <nl> / / google doesn ' t require or prevent braces on these <nl> - " LITERAL _ DEFAULT " , " LITERAL _ CASE " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> + " LAMBDA " , " LITERAL _ DEFAULT " , " LITERAL _ CASE " ) . collect ( Collectors . toSet ( ) ) ) ; <nl> GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " EmptyBlock " , Stream . of ( <nl> / / state of the configuration when test was made until <nl> / / https : / / github . com / checkstyle / checkstyle / issues / 3748
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheckTest . java <nl> index 0f10c94 . . 5e7ca24 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheckTest . java <nl> @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . AvoidNestedBlocksCheck . MSG _ KEY _ BLOCK _ NESTED ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> @ @ - 30 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class AvoidNestedBlocksCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " blocks " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> @ @ - 74 , 5 + 82 , 4 @ @ public class AvoidNestedBlocksCheckTest <nl> int [ ] expected = { TokenTypes . SLIST } ; <nl> assertArrayEquals ( expected , actual ) ; <nl> } <nl> - <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputNestedBlocks . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputNestedBlocks . java <nl> deleted file mode 100644 <nl> index f12cdb3 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputNestedBlocks . java <nl> + + + / dev / null <nl> @ @ - 1 , 63 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - / * * <nl> - * Test case for finding nested blocks . <nl> - * @ author lkuehne <nl> - * * / <nl> - class InputNestedBlocks <nl> - { <nl> - static <nl> - { / / OK <nl> - } <nl> - <nl> - public void method ( ) <nl> - { <nl> - int x = 0 ; <nl> - <nl> - / / if ( condition that is not important anymore ) <nl> - { / / nested block , should be marked <nl> - int z = 1 ; <nl> - int y = z ; <nl> - } <nl> - <nl> - if ( x = = 1 ) <nl> - { / / OK <nl> - x = 2 ; <nl> - } <nl> - <nl> - / / case statements are a bit complicated , <nl> - / / they do not have its own variable scope by default . <nl> - / / Hence it may be OK in some development teams to allow <nl> - / / nested blocks if they are the complete case body . <nl> - switch ( x ) <nl> - { <nl> - case 0 : <nl> - / / OK <nl> - x = 3 ; <nl> - break ; <nl> - case 1 : <nl> - / / Not OK , SLIST is not complete case body <nl> - { <nl> - x = 1 ; <nl> - } <nl> - break ; <nl> - case 2 : <nl> - / / OK if allowInSwitchCase is true , SLIST is complete case body <nl> - { <nl> - x = 1 ; <nl> - break ; <nl> - } <nl> - case 3 : / / test fallthrough <nl> - default : <nl> - / / Not OK , SLIST is not complete case body <nl> - System . out . println ( " Hello " ) ; <nl> - { <nl> - x = 2 ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNestedBlocks . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNestedBlocks . java <nl> new file mode 100644 <nl> index 0000000 . . 4be8c9d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNestedBlocks . java <nl> @ @ - 0 , 0 + 1 , 63 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> + <nl> + / * * <nl> + * Test case for finding nested blocks . <nl> + * @ author lkuehne <nl> + * * / <nl> + class InputNestedBlocks <nl> + { <nl> + static <nl> + { / / OK <nl> + } <nl> + <nl> + public void method ( ) <nl> + { <nl> + int x = 0 ; <nl> + <nl> + / / if ( condition that is not important anymore ) <nl> + { / / nested block , should be marked <nl> + int z = 1 ; <nl> + int y = z ; <nl> + } <nl> + <nl> + if ( x = = 1 ) <nl> + { / / OK <nl> + x = 2 ; <nl> + } <nl> + <nl> + / / case statements are a bit complicated , <nl> + / / they do not have its own variable scope by default . <nl> + / / Hence it may be OK in some development teams to allow <nl> + / / nested blocks if they are the complete case body . <nl> + switch ( x ) <nl> + { <nl> + case 0 : <nl> + / / OK <nl> + x = 3 ; <nl> + break ; <nl> + case 1 : <nl> + / / Not OK , SLIST is not complete case body <nl> + { <nl> + x = 1 ; <nl> + } <nl> + break ; <nl> + case 2 : <nl> + / / OK if allowInSwitchCase is true , SLIST is complete case body <nl> + { <nl> + x = 1 ; <nl> + break ; <nl> + } <nl> + case 3 : / / test fallthrough <nl> + default : <nl> + / / Not OK , SLIST is not complete case body <nl> + System . out . println ( " Hello " ) ; <nl> + { <nl> + x = 2 ; <nl> + } <nl> + } <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 index ca4cac6 . . c7c2530 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 @ @ - 216 , 11 + 216 , 8 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 / / which this check does not provide 
 " LPAREN " , " RPAREN " ) . collect ( Collectors . toSet ( ) ) ) ; 
 GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " NeedBraces " , Stream . of ( 
 - / / state of configuration until 
 - / / https : / / github . com / checkstyle / checkstyle / issues / 3753 
 - " LAMBDA " , 
 / / google doesn ' t require or prevent braces on these 
 - " LITERAL _ DEFAULT " , " LITERAL _ CASE " ) . collect ( Collectors . toSet ( ) ) ) ; 
 + " LAMBDA " , " LITERAL _ DEFAULT " , " LITERAL _ CASE " ) . collect ( Collectors . toSet ( ) ) ) ; 
 GOOGLE _ TOKENS _ IN _ CONFIG _ TO _ IGNORE . put ( " EmptyBlock " , Stream . of ( 
 / / state of the configuration when test was made until 
 / / https : / / github . com / checkstyle / checkstyle / issues / 3748

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheckTest . java 
 index 0f10c94 . . 5e7ca24 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheckTest . java 
 @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . AvoidNestedBlocksCheck . MSG _ KEY _ BLOCK _ NESTED ; 
 import static org . junit . Assert . assertArrayEquals ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 @ @ - 30 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class AvoidNestedBlocksCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " blocks " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 @ @ - 74 , 5 + 82 , 4 @ @ public class AvoidNestedBlocksCheckTest 
 int [ ] expected = { TokenTypes . SLIST } ; 
 assertArrayEquals ( expected , actual ) ; 
 } 
 - 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputNestedBlocks . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputNestedBlocks . java 
 deleted file mode 100644 
 index f12cdb3 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputNestedBlocks . java 
 + + + / dev / null 
 @ @ - 1 , 63 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - / * * 
 - * Test case for finding nested blocks . 
 - * @ author lkuehne 
 - * * / 
 - class InputNestedBlocks 
 - { 
 - static 
 - { / / OK 
 - } 
 - 
 - public void method ( ) 
 - { 
 - int x = 0 ; 
 - 
 - / / if ( condition that is not important anymore ) 
 - { / / nested block , should be marked 
 - int z = 1 ; 
 - int y = z ; 
 - } 
 - 
 - if ( x = = 1 ) 
 - { / / OK 
 - x = 2 ; 
 - } 
 - 
 - / / case statements are a bit complicated , 
 - / / they do not have its own variable scope by default . 
 - / / Hence it may be OK in some development teams to allow 
 - / / nested blocks if they are the complete case body . 
 - switch ( x ) 
 - { 
 - case 0 : 
 - / / OK 
 - x = 3 ; 
 - break ; 
 - case 1 : 
 - / / Not OK , SLIST is not complete case body 
 - { 
 - x = 1 ; 
 - } 
 - break ; 
 - case 2 : 
 - / / OK if allowInSwitchCase is true , SLIST is complete case body 
 - { 
 - x = 1 ; 
 - break ; 
 - } 
 - case 3 : / / test fallthrough 
 - default : 
 - / / Not OK , SLIST is not complete case body 
 - System . out . println ( " Hello " ) ; 
 - { 
 - x = 2 ; 
 - } 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNestedBlocks . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNestedBlocks . java 
 new file mode 100644 
 index 0000000 . . 4be8c9d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNestedBlocks . java 
 @ @ - 0 , 0 + 1 , 63 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 + 
 + / * * 
 + * Test case for finding nested blocks . 
 + * @ author lkuehne 
 + * * / 
 + class InputNestedBlocks 
 + { 
 + static 
 + { / / OK 
 + } 
 + 
 + public void method ( ) 
 + { 
 + int x = 0 ; 
 + 
 + / / if ( condition that is not important anymore ) 
 + { / / nested block , should be marked 
 + int z = 1 ; 
 + int y = z ; 
 + } 
 + 
 + if ( x = = 1 ) 
 + { / / OK 
 + x = 2 ; 
 + } 
 + 
 + / / case statements are a bit complicated , 
 + / / they do not have its own variable scope by default . 
 + / / Hence it may be OK in some development teams to allow 
 + / / nested blocks if they are the complete case body . 
 + switch ( x ) 
 + { 
 + case 0 : 
 + / / OK 
 + x = 3 ; 
 + break ; 
 + case 1 : 
 + / / Not OK , SLIST is not complete case body 
 + { 
 + x = 1 ; 
 + } 
 + break ; 
 + case 2 : 
 + / / OK if allowInSwitchCase is true , SLIST is complete case body 
 + { 
 + x = 1 ; 
 + break ; 
 + } 
 + case 3 : / / test fallthrough 
 + default : 
 + / / Not OK , SLIST is not complete case body 
 + System . out . println ( " Hello " ) ; 
 + { 
 + x = 2 ; 
 + } 
 + } 
 + } 
 + }
