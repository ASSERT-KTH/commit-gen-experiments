BLEU SCORE: 0.01908840668714524

TEST MSG: Issue # 3561 : document isCommentNodesRequired method in xdoc
GENERATED MSG: Patch from Oleg Sukhodolsky to add MissingSwitchDefaultCheck to check that a

TEST DIFF (one line): diff - - git a / src / xdocs / writingchecks . xml b / src / xdocs / writingchecks . xml <nl> index 62a6a33 . . 5aa679f 100644 <nl> - - - a / src / xdocs / writingchecks . xml <nl> + + + b / src / xdocs / writingchecks . xml <nl> @ @ - 334 , 6 + 334 , 38 @ @ public class MethodLimitCheck extends AbstractCheck <nl> <nl> < / section > <nl> <nl> + < section name = " Comment Tokens in AST " > <nl> + <nl> + < p > <nl> + Before < a href = " releasenotes . html # Release _ 6 . 0 " > Checkstyle 6 . 0 < / a > , there was no comments in AST tree <nl> + as commnents are not a code and ignored by complier , so it was not a primary focus of Checkstyle . <nl> + But more and more requests appear to do validation of code vs javadoc or comments . <nl> + So there was a simple solution to receive plain text of file in Check , do own parsing and searching for required comments in file . <nl> + < / p > <nl> + < p > <nl> + Since 6 . 0 , there is a new method in AbstractCheck class that allow you to see or not comment nodes in AST Tree - <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / AbstractCheck . html # isCommentNodesRequired - - " > <nl> + isCommentNodesRequired ( ) < / a > . It should return TRUE if Check want to see comments in AST Tree . <nl> + < / p > <nl> + < p > <nl> + It is done as optional because it is change for a AST Tree structure , and non of existing Checks ready for this . <nl> + Checkstyle does not do re - parse file one more time , comments were already in grammar and parsed , but skipped during AST nodes creation . <nl> + < / p > <nl> + < p > <nl> + Before execution , all Checks are divided into 2 groups ( base on isCommentNodesRequired method ) : " java only Checks " , " comments Checks " . <nl> + Checkstyle execute " java only Checks " first , as all them finish , append to AST Tree missed comment AST nodes and call " comments Checks " . <nl> + All Javadoc Checks that are child of AbstractJavadocCheck are " comments Checks " . <nl> + < / p > <nl> + < p > <nl> + Comment tokens : <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SINGLE _ LINE _ COMMENT " > SINGLE _ LINE _ COMMENT < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # BLOCK _ COMMENT _ BEGIN " > BLOCK _ COMMENT _ BEGIN < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # BLOCK _ COMMENT _ END " > BLOCK _ COMMENT _ END < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # COMMENT _ CONTENT " > COMMENT _ CONTENT < / a > . <nl> + < / p > <nl> + <nl> + < / section > <nl> + <nl> < section name = " Navigating the AST " > <nl> <nl> < p >
NEAREST DIFF (one line): diff - - git a / docs / releasenotes . html b / docs / releasenotes . html <nl> index 6bf8888 . . 0cccd80 100644 <nl> - - - a / docs / releasenotes . html <nl> + + + b / docs / releasenotes . html <nl> @ @ - 101 , 8 + 101 , 13 @ @ <nl> < p class = " body " > <nl> Resolved bugs : <nl> < / p > <nl> - < ul > <nl> - < li class = " body " > False alarms from RightCurly module for code that does not have braces in if - then - else ( bug 689836 ) . < / li > <nl> + 	 < ul > <nl> + 	 <nl> + 	 < li class = " body " > False alarms from RightCurly module for code that <nl> + does not have braces in if - then - else ( bug 689836 ) . < / li > <nl> + <nl> + 	 < li class = " body " > Grammar incorrectly defaulting unqualified floating point literals to be float , when they should be double ( bug 713716 ) . < / li > <nl> + <nl> < li class = " body " > & quot ; threadsafe & quot ; was treated as a Java keyword , resulting in parser errors for <nl> sources that use it as an identifier ( bug 710319 ) . < / li > <nl> < li class = " body " > ConfigurationLoader was not public ( only relevant for IDE plugin authors ) . < / li > <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / java . g b / src / checkstyle / com / puppycrawl / tools / checkstyle / java . g <nl> index 9c7d73c . . 56e165d 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / java . g <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / java . g <nl> @ @ - 1154 , 11 + 1154 , 11 @ @ NUM _ INT <nl> : ' . ' { _ ttype = DOT ; } <nl> ( 	 ( ' 0 ' . . ' 9 ' ) + ( EXPONENT ) ? ( f1 : FLOAT _ SUFFIX { t = f1 ; } ) ? <nl> { <nl> - 	 	 	 	 if ( t ! = null & & t . getText ( ) . toUpperCase ( ) . indexOf ( ' D ' ) > = 0 ) { <nl> - 	 _ ttype = NUM _ DOUBLE ; <nl> + 	 	 	 	 if ( t ! = null & & t . getText ( ) . toUpperCase ( ) . indexOf ( ' F ' ) > = 0 ) { <nl> + 	 _ ttype = NUM _ FLOAT ; <nl> 	 	 	 	 } <nl> 	 	 	 	 else { <nl> - 	 _ ttype = NUM _ FLOAT ; <nl> + 	 _ ttype = NUM _ DOUBLE ; / / assume double <nl> 	 	 	 	 } <nl> 	 	 	 	 } <nl> ) ? <nl> @ @ - 1189 , 11 + 1189 , 11 @ @ NUM _ INT <nl> | f4 : FLOAT _ SUFFIX { t = f4 ; } <nl> ) <nl> { <nl> - 	 	 	 if ( t ! = null & & t . getText ( ) . toUpperCase ( ) . indexOf ( ' D ' ) > = 0 ) { <nl> - _ ttype = NUM _ DOUBLE ; <nl> + 	 	 	 if ( t ! = null & & t . getText ( ) . toUpperCase ( ) . indexOf ( ' F ' ) > = 0 ) { <nl> + _ ttype = NUM _ FLOAT ; <nl> 	 	 	 } <nl> else { <nl> - _ ttype = NUM _ FLOAT ; <nl> + 	 	 _ ttype = NUM _ DOUBLE ; / / assume double <nl> 	 	 	 } <nl> 	 	 	 } <nl> ) ?

TEST DIFF:
diff - - git a / src / xdocs / writingchecks . xml b / src / xdocs / writingchecks . xml 
 index 62a6a33 . . 5aa679f 100644 
 - - - a / src / xdocs / writingchecks . xml 
 + + + b / src / xdocs / writingchecks . xml 
 @ @ - 334 , 6 + 334 , 38 @ @ public class MethodLimitCheck extends AbstractCheck 
 
 < / section > 
 
 + < section name = " Comment Tokens in AST " > 
 + 
 + < p > 
 + Before < a href = " releasenotes . html # Release _ 6 . 0 " > Checkstyle 6 . 0 < / a > , there was no comments in AST tree 
 + as commnents are not a code and ignored by complier , so it was not a primary focus of Checkstyle . 
 + But more and more requests appear to do validation of code vs javadoc or comments . 
 + So there was a simple solution to receive plain text of file in Check , do own parsing and searching for required comments in file . 
 + < / p > 
 + < p > 
 + Since 6 . 0 , there is a new method in AbstractCheck class that allow you to see or not comment nodes in AST Tree - 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / AbstractCheck . html # isCommentNodesRequired - - " > 
 + isCommentNodesRequired ( ) < / a > . It should return TRUE if Check want to see comments in AST Tree . 
 + < / p > 
 + < p > 
 + It is done as optional because it is change for a AST Tree structure , and non of existing Checks ready for this . 
 + Checkstyle does not do re - parse file one more time , comments were already in grammar and parsed , but skipped during AST nodes creation . 
 + < / p > 
 + < p > 
 + Before execution , all Checks are divided into 2 groups ( base on isCommentNodesRequired method ) : " java only Checks " , " comments Checks " . 
 + Checkstyle execute " java only Checks " first , as all them finish , append to AST Tree missed comment AST nodes and call " comments Checks " . 
 + All Javadoc Checks that are child of AbstractJavadocCheck are " comments Checks " . 
 + < / p > 
 + < p > 
 + Comment tokens : 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SINGLE _ LINE _ COMMENT " > SINGLE _ LINE _ COMMENT < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # BLOCK _ COMMENT _ BEGIN " > BLOCK _ COMMENT _ BEGIN < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # BLOCK _ COMMENT _ END " > BLOCK _ COMMENT _ END < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # COMMENT _ CONTENT " > COMMENT _ CONTENT < / a > . 
 + < / p > 
 + 
 + < / section > 
 + 
 < section name = " Navigating the AST " > 
 
 < p >

NEAREST DIFF:
diff - - git a / docs / releasenotes . html b / docs / releasenotes . html 
 index 6bf8888 . . 0cccd80 100644 
 - - - a / docs / releasenotes . html 
 + + + b / docs / releasenotes . html 
 @ @ - 101 , 8 + 101 , 13 @ @ 
 < p class = " body " > 
 Resolved bugs : 
 < / p > 
 - < ul > 
 - < li class = " body " > False alarms from RightCurly module for code that does not have braces in if - then - else ( bug 689836 ) . < / li > 
 + 	 < ul > 
 + 	 
 + 	 < li class = " body " > False alarms from RightCurly module for code that 
 + does not have braces in if - then - else ( bug 689836 ) . < / li > 
 + 
 + 	 < li class = " body " > Grammar incorrectly defaulting unqualified floating point literals to be float , when they should be double ( bug 713716 ) . < / li > 
 + 
 < li class = " body " > & quot ; threadsafe & quot ; was treated as a Java keyword , resulting in parser errors for 
 sources that use it as an identifier ( bug 710319 ) . < / li > 
 < li class = " body " > ConfigurationLoader was not public ( only relevant for IDE plugin authors ) . < / li > 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / java . g b / src / checkstyle / com / puppycrawl / tools / checkstyle / java . g 
 index 9c7d73c . . 56e165d 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / java . g 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / java . g 
 @ @ - 1154 , 11 + 1154 , 11 @ @ NUM _ INT 
 : ' . ' { _ ttype = DOT ; } 
 ( 	 ( ' 0 ' . . ' 9 ' ) + ( EXPONENT ) ? ( f1 : FLOAT _ SUFFIX { t = f1 ; } ) ? 
 { 
 - 	 	 	 	 if ( t ! = null & & t . getText ( ) . toUpperCase ( ) . indexOf ( ' D ' ) > = 0 ) { 
 - 	 _ ttype = NUM _ DOUBLE ; 
 + 	 	 	 	 if ( t ! = null & & t . getText ( ) . toUpperCase ( ) . indexOf ( ' F ' ) > = 0 ) { 
 + 	 _ ttype = NUM _ FLOAT ; 
 	 	 	 	 } 
 	 	 	 	 else { 
 - 	 _ ttype = NUM _ FLOAT ; 
 + 	 _ ttype = NUM _ DOUBLE ; / / assume double 
 	 	 	 	 } 
 	 	 	 	 } 
 ) ? 
 @ @ - 1189 , 11 + 1189 , 11 @ @ NUM _ INT 
 | f4 : FLOAT _ SUFFIX { t = f4 ; } 
 ) 
 { 
 - 	 	 	 if ( t ! = null & & t . getText ( ) . toUpperCase ( ) . indexOf ( ' D ' ) > = 0 ) { 
 - _ ttype = NUM _ DOUBLE ; 
 + 	 	 	 if ( t ! = null & & t . getText ( ) . toUpperCase ( ) . indexOf ( ' F ' ) > = 0 ) { 
 + _ ttype = NUM _ FLOAT ; 
 	 	 	 } 
 else { 
 - _ ttype = NUM _ FLOAT ; 
 + 	 	 _ ttype = NUM _ DOUBLE ; / / assume double 
 	 	 	 } 
 	 	 	 } 
 ) ?
