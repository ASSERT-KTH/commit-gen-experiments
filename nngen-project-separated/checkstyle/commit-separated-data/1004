BLEU SCORE: 0.025006150769968642

TEST MSG: Issue # 3655 : Fix NPE in NeedBraces on single line default stmt
GENERATED MSG: Need Braces , added option which allows one line if - statements without braces , issue # 300

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> index 06fdafd . . de566f1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> @ @ - 204 , 16 + 204 , 31 @ @ public class NeedBracesCheck extends AbstractCheck { <nl> & & ast . findFirstToken ( TokenTypes . LITERAL _ IF ) ! = null ) { <nl> isElseIf = true ; <nl> } <nl> - <nl> + final boolean isDefaultInAnnotation = isDefaultInAnnotation ( ast ) ; <nl> final boolean skipStatement = isSkipStatement ( ast ) ; <nl> final boolean skipEmptyLoopBody = allowEmptyLoopBody & & isEmptyLoopBody ( ast ) ; <nl> <nl> - if ( slistAST = = null & & ! isElseIf & & ! skipStatement & & ! skipEmptyLoopBody ) { <nl> + if ( slistAST = = null & & ! isElseIf & & ! isDefaultInAnnotation <nl> + & & ! skipStatement & & ! skipEmptyLoopBody ) { <nl> log ( ast . getLineNo ( ) , MSG _ KEY _ NEED _ BRACES , ast . getText ( ) ) ; <nl> } <nl> } <nl> <nl> / * * <nl> + * Checks if ast is default in annotation <nl> + * @ param ast ast to test . <nl> + * @ return true if current ast is default and it is part of annatation . <nl> + * / <nl> + private boolean isDefaultInAnnotation ( DetailAST ast ) { <nl> + boolean isDefaultInAnnotation = false ; <nl> + if ( ast . getType ( ) = = TokenTypes . LITERAL _ DEFAULT <nl> + & & ast . getParent ( ) . getType ( ) = = TokenTypes . ANNOTATION _ FIELD _ DEF ) { <nl> + isDefaultInAnnotation = true ; <nl> + } <nl> + return isDefaultInAnnotation ; <nl> + } <nl> + <nl> + / * * <nl> * Checks if current statement can be skipped by " need braces " warning . <nl> * @ param statement if , for , while , do - while , lambda , else , case , default statements . <nl> * @ return true if current statement can be skipped by Check . <nl> @ @ - 410 , 6 + 425 , 7 @ @ public class NeedBracesCheck extends AbstractCheck { <nl> * { @ code <nl> * case 1 : doSomeStuff ( ) ; break ; <nl> * case 2 : doSomeStuff ( ) ; break ; <nl> + * case 3 : ; <nl> * } <nl> * < / p > <nl> * @ param literalCase { @ link TokenTypes # LITERAL _ CASE case statement } . <nl> @ @ - 418 , 12 + 434 , 17 @ @ public class NeedBracesCheck extends AbstractCheck { <nl> private static boolean isSingleLineCase ( DetailAST literalCase ) { <nl> boolean result = false ; <nl> final DetailAST slist = literalCase . getNextSibling ( ) ; <nl> - final DetailAST block = slist . getFirstChild ( ) ; <nl> - if ( block . getType ( ) ! = TokenTypes . SLIST ) { <nl> - final DetailAST caseBreak = slist . findFirstToken ( TokenTypes . LITERAL _ BREAK ) ; <nl> - final boolean atOneLine = literalCase . getLineNo ( ) = = block . getLineNo ( ) ; <nl> - if ( caseBreak ! = null ) { <nl> - result = atOneLine & & block . getLineNo ( ) = = caseBreak . getLineNo ( ) ; <nl> + if ( slist = = null ) { <nl> + result = true ; <nl> + } <nl> + else { <nl> + final DetailAST block = slist . getFirstChild ( ) ; <nl> + if ( block . getType ( ) ! = TokenTypes . SLIST ) { <nl> + final DetailAST caseBreak = slist . findFirstToken ( TokenTypes . LITERAL _ BREAK ) ; <nl> + final boolean atOneLine = literalCase . getLineNo ( ) = = block . getLineNo ( ) ; <nl> + if ( caseBreak ! = null ) { <nl> + result = atOneLine & & block . getLineNo ( ) = = caseBreak . getLineNo ( ) ; <nl> + } <nl> } <nl> } <nl> return result ; <nl> @ @ - 442 , 9 + 463 , 14 @ @ public class NeedBracesCheck extends AbstractCheck { <nl> private static boolean isSingleLineDefault ( DetailAST literalDefault ) { <nl> boolean result = false ; <nl> final DetailAST slist = literalDefault . getNextSibling ( ) ; <nl> - final DetailAST block = slist . getFirstChild ( ) ; <nl> - if ( block . getType ( ) ! = TokenTypes . SLIST ) { <nl> - result = literalDefault . getLineNo ( ) = = block . getLineNo ( ) ; <nl> + if ( slist = = null ) { <nl> + result = true ; <nl> + } <nl> + else { <nl> + final DetailAST block = slist . getFirstChild ( ) ; <nl> + if ( block ! = null & & block . getType ( ) ! = TokenTypes . SLIST ) { <nl> + result = literalDefault . getLineNo ( ) = = block . getLineNo ( ) ; <nl> + } <nl> } <nl> return result ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> index 4bd6a01 . . 5e35b6a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> @ @ - 116 , 6 + 116 , 16 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testSingleLineCaseDefault2 ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( NeedBracesCheck . class ) ; <nl> + checkConfig . addAttribute ( " tokens " , " LITERAL _ CASE , LITERAL _ DEFAULT " ) ; <nl> + checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputNeedBracesEmptyDefault . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testCycles ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( NeedBracesCheck . class ) ; <nl> checkConfig . addAttribute ( " tokens " , " LITERAL _ WHILE , LITERAL _ DO , LITERAL _ FOR " ) ; <nl> @ @ - 178 , 4 + 188 , 13 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> verify ( checkConfig , getPath ( " InputNeedBracesNoBodyLoops . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testEmptySingleLineDefaultStmt ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( NeedBracesCheck . class ) ; <nl> + checkConfig . addAttribute ( " tokens " , " LITERAL _ DEFAULT " ) ; <nl> + checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputNeedBracesEmptyDefault . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesEmptyDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesEmptyDefault . java <nl> new file mode 100644 <nl> index 0000000 . . d482bdd <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesEmptyDefault . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> + <nl> + public class InputNeedBracesEmptyDefault { <nl> + int value ; <nl> + private void main ( ) { <nl> + switch ( value ) { <nl> + default : <nl> + } <nl> + } <nl> + private void main1 ( ) { <nl> + switch ( value ) { <nl> + case 1 : <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ interface Example { <nl> + String priority ( ) default " value " ; <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> index d24e69a . . 47053b7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> @ @ - 234 , 4 + 234 , 37 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport <nl> verify ( checkConfig , getPath ( " imports " + File . separator <nl> + " DOMSource . java " ) , expected ) ; <nl> } <nl> + <nl> + / * * <nl> + * @ throws Exception <nl> + * / <nl> + @ Test <nl> + public void testDefaultPackage2 ( ) throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( CustomImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " standardPackageRegExp " , " java | javax " ) ; <nl> + checkConfig . addAttribute ( " thirdPartyPackageRegExp " , " com | org " ) ; <nl> + checkConfig . addAttribute ( " customImportOrderRules " , <nl> + " STATIC # # # SAME _ PACKAGE ( 3 ) # # # THIRD _ PARTY _ PACKAGE # # # STANDARD _ JAVA _ PACKAGE " ) ; <nl> + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 5 : Wrong lexicographical order for ' java . awt . Button . ABORT ' import . " , <nl> + " 8 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , <nl> + " 9 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , <nl> + " 10 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , <nl> + " 11 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , <nl> + " 12 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , <nl> + " 13 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , <nl> + " 14 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , <nl> + " 15 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , <nl> + " 16 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , <nl> + " 17 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , <nl> + " 21 : Wrong lexicographical order for ' com . google . common . * ' import . " , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " imports " + File . separator <nl> + + " InputDefaultPackage . java " ) , expected ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 index 06fdafd . . de566f1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 @ @ - 204 , 16 + 204 , 31 @ @ public class NeedBracesCheck extends AbstractCheck { 
 & & ast . findFirstToken ( TokenTypes . LITERAL _ IF ) ! = null ) { 
 isElseIf = true ; 
 } 
 - 
 + final boolean isDefaultInAnnotation = isDefaultInAnnotation ( ast ) ; 
 final boolean skipStatement = isSkipStatement ( ast ) ; 
 final boolean skipEmptyLoopBody = allowEmptyLoopBody & & isEmptyLoopBody ( ast ) ; 
 
 - if ( slistAST = = null & & ! isElseIf & & ! skipStatement & & ! skipEmptyLoopBody ) { 
 + if ( slistAST = = null & & ! isElseIf & & ! isDefaultInAnnotation 
 + & & ! skipStatement & & ! skipEmptyLoopBody ) { 
 log ( ast . getLineNo ( ) , MSG _ KEY _ NEED _ BRACES , ast . getText ( ) ) ; 
 } 
 } 
 
 / * * 
 + * Checks if ast is default in annotation 
 + * @ param ast ast to test . 
 + * @ return true if current ast is default and it is part of annatation . 
 + * / 
 + private boolean isDefaultInAnnotation ( DetailAST ast ) { 
 + boolean isDefaultInAnnotation = false ; 
 + if ( ast . getType ( ) = = TokenTypes . LITERAL _ DEFAULT 
 + & & ast . getParent ( ) . getType ( ) = = TokenTypes . ANNOTATION _ FIELD _ DEF ) { 
 + isDefaultInAnnotation = true ; 
 + } 
 + return isDefaultInAnnotation ; 
 + } 
 + 
 + / * * 
 * Checks if current statement can be skipped by " need braces " warning . 
 * @ param statement if , for , while , do - while , lambda , else , case , default statements . 
 * @ return true if current statement can be skipped by Check . 
 @ @ - 410 , 6 + 425 , 7 @ @ public class NeedBracesCheck extends AbstractCheck { 
 * { @ code 
 * case 1 : doSomeStuff ( ) ; break ; 
 * case 2 : doSomeStuff ( ) ; break ; 
 + * case 3 : ; 
 * } 
 * < / p > 
 * @ param literalCase { @ link TokenTypes # LITERAL _ CASE case statement } . 
 @ @ - 418 , 12 + 434 , 17 @ @ public class NeedBracesCheck extends AbstractCheck { 
 private static boolean isSingleLineCase ( DetailAST literalCase ) { 
 boolean result = false ; 
 final DetailAST slist = literalCase . getNextSibling ( ) ; 
 - final DetailAST block = slist . getFirstChild ( ) ; 
 - if ( block . getType ( ) ! = TokenTypes . SLIST ) { 
 - final DetailAST caseBreak = slist . findFirstToken ( TokenTypes . LITERAL _ BREAK ) ; 
 - final boolean atOneLine = literalCase . getLineNo ( ) = = block . getLineNo ( ) ; 
 - if ( caseBreak ! = null ) { 
 - result = atOneLine & & block . getLineNo ( ) = = caseBreak . getLineNo ( ) ; 
 + if ( slist = = null ) { 
 + result = true ; 
 + } 
 + else { 
 + final DetailAST block = slist . getFirstChild ( ) ; 
 + if ( block . getType ( ) ! = TokenTypes . SLIST ) { 
 + final DetailAST caseBreak = slist . findFirstToken ( TokenTypes . LITERAL _ BREAK ) ; 
 + final boolean atOneLine = literalCase . getLineNo ( ) = = block . getLineNo ( ) ; 
 + if ( caseBreak ! = null ) { 
 + result = atOneLine & & block . getLineNo ( ) = = caseBreak . getLineNo ( ) ; 
 + } 
 } 
 } 
 return result ; 
 @ @ - 442 , 9 + 463 , 14 @ @ public class NeedBracesCheck extends AbstractCheck { 
 private static boolean isSingleLineDefault ( DetailAST literalDefault ) { 
 boolean result = false ; 
 final DetailAST slist = literalDefault . getNextSibling ( ) ; 
 - final DetailAST block = slist . getFirstChild ( ) ; 
 - if ( block . getType ( ) ! = TokenTypes . SLIST ) { 
 - result = literalDefault . getLineNo ( ) = = block . getLineNo ( ) ; 
 + if ( slist = = null ) { 
 + result = true ; 
 + } 
 + else { 
 + final DetailAST block = slist . getFirstChild ( ) ; 
 + if ( block ! = null & & block . getType ( ) ! = TokenTypes . SLIST ) { 
 + result = literalDefault . getLineNo ( ) = = block . getLineNo ( ) ; 
 + } 
 } 
 return result ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 index 4bd6a01 . . 5e35b6a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 @ @ - 116 , 6 + 116 , 16 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public void testSingleLineCaseDefault2 ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( NeedBracesCheck . class ) ; 
 + checkConfig . addAttribute ( " tokens " , " LITERAL _ CASE , LITERAL _ DEFAULT " ) ; 
 + checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputNeedBracesEmptyDefault . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testCycles ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( NeedBracesCheck . class ) ; 
 checkConfig . addAttribute ( " tokens " , " LITERAL _ WHILE , LITERAL _ DO , LITERAL _ FOR " ) ; 
 @ @ - 178 , 4 + 188 , 13 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 } ; 
 verify ( checkConfig , getPath ( " InputNeedBracesNoBodyLoops . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testEmptySingleLineDefaultStmt ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( NeedBracesCheck . class ) ; 
 + checkConfig . addAttribute ( " tokens " , " LITERAL _ DEFAULT " ) ; 
 + checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputNeedBracesEmptyDefault . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesEmptyDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesEmptyDefault . java 
 new file mode 100644 
 index 0000000 . . d482bdd 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputNeedBracesEmptyDefault . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 + 
 + public class InputNeedBracesEmptyDefault { 
 + int value ; 
 + private void main ( ) { 
 + switch ( value ) { 
 + default : 
 + } 
 + } 
 + private void main1 ( ) { 
 + switch ( value ) { 
 + case 1 : 
 + } 
 + } 
 + } 
 + 
 + @ interface Example { 
 + String priority ( ) default " value " ; 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 index d24e69a . . 47053b7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 @ @ - 234 , 4 + 234 , 37 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport 
 verify ( checkConfig , getPath ( " imports " + File . separator 
 + " DOMSource . java " ) , expected ) ; 
 } 
 + 
 + / * * 
 + * @ throws Exception 
 + * / 
 + @ Test 
 + public void testDefaultPackage2 ( ) throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( CustomImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " standardPackageRegExp " , " java | javax " ) ; 
 + checkConfig . addAttribute ( " thirdPartyPackageRegExp " , " com | org " ) ; 
 + checkConfig . addAttribute ( " customImportOrderRules " , 
 + " STATIC # # # SAME _ PACKAGE ( 3 ) # # # THIRD _ PARTY _ PACKAGE # # # STANDARD _ JAVA _ PACKAGE " ) ; 
 + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 + 
 + final String [ ] expected = { 
 + " 5 : Wrong lexicographical order for ' java . awt . Button . ABORT ' import . " , 
 + " 8 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , 
 + " 9 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , 
 + " 10 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , 
 + " 11 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , 
 + " 12 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , 
 + " 13 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , 
 + " 14 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , 
 + " 15 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , 
 + " 16 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , 
 + " 17 : Import statement is in the wrong order . Should be in the ' STANDARD _ JAVA _ PACKAGE ' group . " , 
 + " 21 : Wrong lexicographical order for ' com . google . common . * ' import . " , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " imports " + File . separator 
 + + " InputDefaultPackage . java " ) , expected ) ; 
 + } 
 }
