BLEU SCORE: 0.03582342119128718

TEST MSG: Issue # 3702 : Allow single character names in local variables , method and catch - blocks parameters names in accordance with Google Style Guide
GENERATED MSG: Issue # 3473 : ParameterNameCheck : new scope and excludeScope properties

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java <nl> index 2b8ce40 . . a182c2b 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java <nl> @ @ - 22 , 29 + 22 , 40 @ @ package com . google . checkstyle . test . chapter5naming . rule51identifiernames ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> + import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> import com . google . checkstyle . test . base . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> <nl> public class CatchParameterNameTest extends BaseCheckTestSupport { <nl> + private static Configuration checkConfig ; <nl> + private static String format ; <nl> + <nl> @ Override <nl> protected String getPath ( String fileName ) throws IOException { <nl> return super . getPath ( " chapter5naming " + File . separator + " rule51identifiernames " <nl> + File . separator + fileName ) ; <nl> } <nl> <nl> + @ BeforeClass <nl> + public static void setConfigurationBuilder ( ) throws CheckstyleException { <nl> + checkConfig = getCheckConfig ( " CatchParameterName " ) ; <nl> + format = checkConfig . getAttribute ( " format " ) ; <nl> + } <nl> + <nl> @ Test <nl> public void catchParameterNameTest ( ) throws Exception { <nl> - final Configuration checkConfig = getCheckConfig ( " CatchParameterName " ) ; <nl> final String msgKey = " name . invalidPattern " ; <nl> - final String format = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " ; <nl> <nl> final String [ ] expected = { <nl> - " 6 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " e " , format ) , <nl> - " 24 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " t " , format ) , <nl> " 47 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " iException " , format ) , <nl> - " 50 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " x " , format ) , <nl> + " 50 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " ex _ 1 " , format ) , <nl> + " 53 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " eX " , format ) , <nl> + " 56 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " eXX " , format ) , <nl> + " 59 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " x _ y _ z " , format ) , <nl> + " 62 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " Ex " , format ) , <nl> } ; <nl> <nl> final String filePath = getPath ( " InputCatchParameterName . java " ) ; <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java <nl> index 3e38402 . . eb288b2 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java <nl> @ @ - 34 , 10 + 34 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> public class ParameterNameTest extends BaseCheckTestSupport { <nl> <nl> private static final String MSG _ KEY = " name . invalidPattern " ; <nl> - private static String genealFormat ; <nl> - private static String pubFormat ; <nl> - private static Configuration generalConfig ; <nl> - private static Configuration pubConfig ; <nl> + private static String format ; <nl> + private static Configuration config ; <nl> <nl> @ Override <nl> protected String getPath ( String fileName ) throws IOException { <nl> @ @ - 49 , 63 + 47 , 34 @ @ public class ParameterNameTest extends BaseCheckTestSupport { <nl> public static void setConfigurationBuilder ( ) throws CheckstyleException { <nl> final List < Configuration > configs = getCheckConfigs ( " ParameterName " ) ; <nl> <nl> - Assert . assertEquals ( configs . size ( ) , 2 ) ; <nl> + Assert . assertEquals ( configs . size ( ) , 1 ) ; <nl> <nl> - generalConfig = configs . get ( 0 ) ; <nl> - Assert . assertEquals ( generalConfig . getAttribute ( " accessModifiers " ) , <nl> - " protected , package , private " ) ; <nl> - genealFormat = generalConfig . getAttribute ( " format " ) ; <nl> - <nl> - pubConfig = configs . get ( 1 ) ; <nl> - Assert . assertEquals ( pubConfig . getAttribute ( " accessModifiers " ) , " public " ) ; <nl> - pubFormat = pubConfig . getAttribute ( " format " ) ; <nl> + config = configs . get ( 0 ) ; <nl> + format = config . getAttribute ( " format " ) ; <nl> } <nl> <nl> @ Test <nl> public void generalParameterNameTest ( ) throws Exception { <nl> <nl> final String [ ] expected = { <nl> - " 8 : 21 : " <nl> - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " $ arg1 " , genealFormat ) , <nl> - " 9 : 21 : " <nl> - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " ar $ g2 " , genealFormat ) , <nl> - " 10 : 21 : " <nl> - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " arg3 $ " , genealFormat ) , <nl> - " 11 : 21 : " <nl> - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " a _ rg4 " , genealFormat ) , <nl> - " 12 : 21 : " <nl> - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " _ arg5 " , genealFormat ) , <nl> - " 13 : 21 : " <nl> - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " arg6 _ " , genealFormat ) , <nl> - " 14 : 21 : " <nl> - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " aArg7 " , genealFormat ) , <nl> - " 15 : 21 : " <nl> - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " aArg8 " , genealFormat ) , <nl> - " 16 : 21 : " <nl> - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " aar _ g " , genealFormat ) , <nl> + " 10 : 21 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " bB " , format ) , <nl> + " 33 : 22 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " llll _ llll " , format ) , <nl> + " 34 : 21 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " bB " , format ) , <nl> + " 64 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " $ arg1 " , format ) , <nl> + " 65 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " ar $ g2 " , format ) , <nl> + " 66 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " arg3 $ " , format ) , <nl> + " 67 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " a _ rg4 " , format ) , <nl> + " 68 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " _ arg5 " , format ) , <nl> + " 69 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " arg6 _ " , format ) , <nl> + " 70 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " aArg7 " , format ) , <nl> + " 71 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " aArg8 " , format ) , <nl> + " 72 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " aar _ g " , format ) , <nl> } ; <nl> <nl> - final String filePath = getPath ( " InputParameterNameSimpleGeneral . java " ) ; <nl> + final String filePath = getPath ( " InputParameterName . java " ) ; <nl> <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> - verify ( generalConfig , filePath , expected , warnList ) ; <nl> + verify ( config , filePath , expected , warnList ) ; <nl> } <nl> <nl> - @ Test <nl> - public void pubParameterNameTest ( ) throws Exception { <nl> - <nl> - final String [ ] expected = { <nl> - " 10 : 21 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " bB " , pubFormat ) , <nl> - " 33 : 22 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " llll _ llll " , pubFormat ) , <nl> - " 34 : 21 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " bB " , pubFormat ) , <nl> - " 44 : 23 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " p " , pubFormat ) , <nl> - " 53 : 31 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " p " , pubFormat ) , <nl> - " 58 : 44 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " p " , pubFormat ) , <nl> - } ; <nl> - <nl> - final String filePath = getPath ( " InputParameterNameSimplePub . java " ) ; <nl> - <nl> - final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> - verify ( pubConfig , filePath , expected , warnList ) ; <nl> - } <nl> } <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java <nl> index 838cd56 . . dd6c265 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java <nl> @ @ - 51 , 7 + 51 , 6 @ @ public class LocalVariableNameTest extends BaseCheckTestSupport { <nl> public void localVariableNameTest ( ) throws Exception { <nl> <nl> final String [ ] expected = { <nl> - " 26 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " a " , format ) , <nl> " 27 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " aA " , format ) , <nl> " 28 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " a1 _ a " , format ) , <nl> " 29 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " A _ A " , format ) , <nl> @ @ - 74 , 7 + 73 , 6 @ @ public class LocalVariableNameTest extends BaseCheckTestSupport { <nl> public void oneCharTest ( ) throws Exception { <nl> <nl> final String [ ] expected = { <nl> - " 15 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " i " , format ) , <nl> " 21 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " I _ ndex " , format ) , <nl> " 45 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " i _ ndex " , format ) , <nl> " 49 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " ii _ i1 " , format ) , <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java <nl> index acb175a . . 42133bf 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java <nl> @ @ - 3 , 7 + 3 , 7 @ @ package com . google . checkstyle . test . chapter5naming . rule51identifiernames ; <nl> public class InputCatchParameterName { <nl> { <nl> try { <nl> - } catch ( Exception e ) { / / warn <nl> + } catch ( Exception e ) { / / ok <nl> } <nl> try { <nl> } catch ( Exception ex ) { / / ok <nl> @ @ - 21 , 7 + 21 , 7 @ @ public class InputCatchParameterName { <nl> } catch ( Exception noWorries ) { / / ok <nl> } <nl> try { <nl> - } catch ( Throwable t ) { / / warn <nl> + } catch ( Throwable t ) { / / ok <nl> } <nl> try { <nl> throw new InterruptedException ( " interruptedException " ) ; <nl> @ @ - 47 , 7 + 47 , 19 @ @ public class InputCatchParameterName { <nl> } catch ( Exception iException ) { / / warn <nl> } <nl> try { <nl> - } catch ( Exception x ) { / / warn <nl> + } catch ( Exception ex _ 1 ) { / / warn <nl> + } <nl> + try { <nl> + } catch ( Exception eX ) { / / warn <nl> + } <nl> + try { <nl> + } catch ( Exception eXX ) { / / warn <nl> + } <nl> + try { <nl> + } catch ( Exception x _ y _ z ) { / / warn <nl> + } <nl> + try { <nl> + } catch ( Exception Ex ) { / / warn <nl> } <nl> } <nl> } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterName . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterName . java <nl> new file mode 100644 <nl> index 0000000 . . 40fdf92 <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterName . java <nl> @ @ - 0 , 0 + 1 , 75 @ @ <nl> + package com . google . checkstyle . test . chapter5naming . rule526parameternames ; <nl> + <nl> + import java . io . * ; <nl> + <nl> + class InputParameterName <nl> + { <nl> + <nl> + / * * Some more Javadoc . * / <nl> + public void doSomething ( int aaa , int abn , String aaA , <nl> + boolean bB ) / / warn <nl> + { <nl> + for ( Object O : new java . util . ArrayList ( ) ) <nl> + { <nl> + <nl> + } <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * Test enum for member naming check * / <nl> + enum MyEnum1 <nl> + { <nl> + / * * ABC constant * / <nl> + ABC , <nl> + <nl> + / * * XYZ constant * / <nl> + XYZ ; <nl> + <nl> + / * * Should be mSomeMemeber * / <nl> + private int someMember ; <nl> + <nl> + public void doEnum ( int aaaL , <nl> + 	 	 long llll _ llll , / / warn <nl> + boolean bB ) { } / / warn <nl> + } <nl> + <nl> + / * * Test public vs private method parameter naming check . * / <nl> + class InputParameterNameSimplePub <nl> + { <nl> + / * * Valid : public and more than one char Long * / <nl> + public void a ( int par , int parA ) { } <nl> + <nl> + / * * Invalid : public and one char long * / <nl> + public void b ( int p ) { } <nl> + <nl> + / * * Valid : private and one char long . * / <nl> + private void c ( int p ) { } <nl> + <nl> + / * * Holder for inner anonymous classes * / <nl> + private void d ( int param ) { <nl> + new Object ( ) { <nl> + / * * Invalid : public and one char long . * / <nl> + public void e ( int p ) { } <nl> + } ; <nl> + } <nl> + <nl> + / * * Invalid : public constructor and one char long * / <nl> + public InputParameterNameSimplePub ( int p ) { } <nl> + <nl> + / * * Valid : private constructor and one char long * / <nl> + private InputParameterNameSimplePub ( float p ) { } <nl> + <nl> + void toManyArgs ( <nl> + int $ arg1 , / / warn <nl> + int ar $ g2 , / / warn <nl> + int arg3 $ , / / warn <nl> + int a _ rg4 , / / warn <nl> + int _ arg5 , / / warn <nl> + int arg6 _ , / / warn <nl> + int aArg7 , / / warn <nl> + int aArg8 , / / warn <nl> + int aar _ g ) / / warn <nl> + <nl> + { } <nl> + } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimpleGeneral . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimpleGeneral . java <nl> deleted file mode 100644 <nl> index dced1c3 . . 0000000 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimpleGeneral . java <nl> + + + / dev / null <nl> @ @ - 1 , 19 + 0 , 0 @ @ <nl> - package com . google . checkstyle . test . chapter5naming . rule526parameternames ; <nl> - <nl> - import java . io . * ; <nl> - <nl> - final class InputSimple <nl> - { <nl> - void toManyArgs ( <nl> - 	 	 int $ arg1 , / / warn <nl> - 	 	 int ar $ g2 , / / warn <nl> - 	 	 int arg3 $ , / / warn <nl> - 	 	 int a _ rg4 , / / warn <nl> - 	 	 int _ arg5 , / / warn <nl> - 	 	 int arg6 _ , / / warn <nl> - 	 	 int aArg7 , / / warn <nl> - 	 	 int aArg8 , / / warn <nl> - 	 	 int aar _ g ) / / warn <nl> - <nl> - { } <nl> - } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePub . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePub . java <nl> deleted file mode 100644 <nl> index 0f39b79 . . 0000000 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePub . java <nl> + + + / dev / null <nl> @ @ - 1 , 62 + 0 , 0 @ @ <nl> - package com . google . checkstyle . test . chapter5naming . rule526parameternames ; <nl> - <nl> - import java . io . * ; <nl> - <nl> - class InputSimple2 <nl> - { <nl> - <nl> - / * * Some more Javadoc . * / <nl> - public void doSomething ( int aaa , int abn , String aaA , <nl> - boolean bB ) / / warn <nl> - { <nl> - for ( Object O : new java . util . ArrayList ( ) ) <nl> - { <nl> - <nl> - } <nl> - } <nl> - } <nl> - <nl> - <nl> - / * * Test enum for member naming check * / <nl> - enum MyEnum1 <nl> - { <nl> - / * * ABC constant * / <nl> - ABC , <nl> - <nl> - / * * XYZ constant * / <nl> - XYZ ; <nl> - <nl> - / * * Should be mSomeMemeber * / <nl> - private int someMember ; <nl> - <nl> - public void doEnum ( int aaaL , <nl> - 	 	 long llll _ llll , / / warn <nl> - boolean bB ) { } / / warn <nl> - } <nl> - <nl> - / * * Test public vs private method parameter naming check . * / <nl> - class InputParameterNameSimplePub <nl> - { <nl> - / * * Valid : public and more than one char Long * / <nl> - public void a ( int par , int parA ) { } <nl> - <nl> - / * * Invalid : public and one char long * / <nl> - public void b ( int p ) { } / / warn <nl> - <nl> - / * * Valid : private and one char long . * / <nl> - private void c ( int p ) { } <nl> - <nl> - / * * Holder for inner anonymous classes * / <nl> - private void d ( int param ) { <nl> - new Object ( ) { <nl> - / * * Invalid : public and one char long . * / <nl> - public void e ( int p ) { } / / warn <nl> - } ; <nl> - } <nl> - <nl> - / * * Invalid : public constructor and one char long * / <nl> - public InputParameterNameSimplePub ( int p ) { } / / warn <nl> - <nl> - / * * Valid : private constructor and one char long * / <nl> - private InputParameterNameSimplePub ( float p ) { } <nl> - } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameOneCharVarName . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameOneCharVarName . java <nl> index 462a5f7 . . a3e2d4e 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameOneCharVarName . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameOneCharVarName . java <nl> @ @ - 12 , 7 + 12 , 7 @ @ class InputOneCharInitVarName <nl> / / some code <nl> } <nl> <nl> - int i = 0 ; / / warn <nl> + int i = 0 ; / / ok <nl> <nl> for ( int index = 1 ; index < 10 ; index + + ) { / / ok <nl> / / some code <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameSimple . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameSimple . java <nl> index 3a3764d . . 8a60123 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameSimple . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameSimple . java <nl> @ @ - 23 , 7 + 23 , 7 @ @ final class InputSimple <nl> private void localVariables ( ) <nl> { <nl> / / bad examples <nl> - int a ; / / warn <nl> + int a ; <nl> int aA ; / / warn <nl> int a1 _ a ; / / warn <nl> int A _ A ; / / warn <nl> diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml <nl> index 2146586 . . d3fe68e 100644 <nl> - - - a / src / main / resources / google _ checks . xml <nl> + + + b / src / main / resources / google _ checks . xml <nl> @ @ - 108 , 28 + 108 , 18 @ @ <nl> value = " Member name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > <nl> < / module > <nl> < module name = " ParameterName " > <nl> - < property name = " id " value = " ParameterNameNonPublic " / > <nl> < property name = " format " value = " ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ " / > <nl> - < property name = " accessModifiers " value = " protected , package , private " / > <nl> - < message key = " name . invalidPattern " <nl> - value = " Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > <nl> - < / module > <nl> - < module name = " ParameterName " > <nl> - < property name = " id " value = " ParameterNamePublic " / > <nl> - < property name = " format " value = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " / > <nl> - < property name = " accessModifiers " value = " public " / > <nl> < message key = " name . invalidPattern " <nl> value = " Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > <nl> < / module > <nl> < module name = " CatchParameterName " > <nl> - < property name = " format " value = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " / > <nl> + < property name = " format " value = " ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ " / > <nl> < message key = " name . invalidPattern " <nl> value = " Catch parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > <nl> < / module > <nl> < module name = " LocalVariableName " > <nl> < property name = " tokens " value = " VARIABLE _ DEF " / > <nl> - < property name = " format " value = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " / > <nl> - < property name = " allowOneCharVarInForLoop " value = " true " / > <nl> + < property name = " format " value = " ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ " / > <nl> < message key = " name . invalidPattern " <nl> value = " Local variable name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > <nl> < / module >
NEAREST DIFF (one line): diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm <nl> index b2d7b6f . . bbedeaa 100644 <nl> - - - a / src / xdocs / index . xml . vm <nl> + + + b / src / xdocs / index . xml . vm <nl> @ @ - 99 , 6 + 99 , 23 @ @ <nl> <nl> < / section > <nl> <nl> + < section name = " Backport " > <nl> + < p > <nl> + Since Checkstyle 7 , some users have been unable to continue upgrading to newer versions <nl> + of the utility because of the new JDK 1 . 8 compile requirement . The development team doesn ' t <nl> + have the resources to keep updating the utility for older JDKs for those that can ' t <nl> + work with the latest version . <nl> + < / p > <nl> + < p > <nl> + However , some members of the community have created an unofficial backport of the latest <nl> + Checkstyle releases to be run with JDKs as old as 1 . 6 . If you wish to continue using new <nl> + Checkstyle versions on older JDKs , we recommend you either checkout the <nl> + < a href = " https : / / github . com / rnveach / checkstyle - backport - jre6 " > github site < / a > or the <nl> + < a href = " https : / / rnveach . github . io / checkstyle - backport - jre6 " > documentation site < / a > on how <nl> + to use the backport version of the utility , in place of the official Checkstyle version . <nl> + < / p > <nl> + < / section > <nl> + <nl> < section name = " Related Tools " > <nl> < p > <nl> Checkstyle is most useful if you integrate it in your build process or

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java 
 index 2b8ce40 . . a182c2b 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java 
 @ @ - 22 , 29 + 22 , 40 @ @ package com . google . checkstyle . test . chapter5naming . rule51identifiernames ; 
 import java . io . File ; 
 import java . io . IOException ; 
 
 + import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 import com . google . checkstyle . test . base . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 
 public class CatchParameterNameTest extends BaseCheckTestSupport { 
 + private static Configuration checkConfig ; 
 + private static String format ; 
 + 
 @ Override 
 protected String getPath ( String fileName ) throws IOException { 
 return super . getPath ( " chapter5naming " + File . separator + " rule51identifiernames " 
 + File . separator + fileName ) ; 
 } 
 
 + @ BeforeClass 
 + public static void setConfigurationBuilder ( ) throws CheckstyleException { 
 + checkConfig = getCheckConfig ( " CatchParameterName " ) ; 
 + format = checkConfig . getAttribute ( " format " ) ; 
 + } 
 + 
 @ Test 
 public void catchParameterNameTest ( ) throws Exception { 
 - final Configuration checkConfig = getCheckConfig ( " CatchParameterName " ) ; 
 final String msgKey = " name . invalidPattern " ; 
 - final String format = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " ; 
 
 final String [ ] expected = { 
 - " 6 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " e " , format ) , 
 - " 24 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " t " , format ) , 
 " 47 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " iException " , format ) , 
 - " 50 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " x " , format ) , 
 + " 50 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " ex _ 1 " , format ) , 
 + " 53 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " eX " , format ) , 
 + " 56 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " eXX " , format ) , 
 + " 59 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " x _ y _ z " , format ) , 
 + " 62 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " Ex " , format ) , 
 } ; 
 
 final String filePath = getPath ( " InputCatchParameterName . java " ) ; 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java 
 index 3e38402 . . eb288b2 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java 
 @ @ - 34 , 10 + 34 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 public class ParameterNameTest extends BaseCheckTestSupport { 
 
 private static final String MSG _ KEY = " name . invalidPattern " ; 
 - private static String genealFormat ; 
 - private static String pubFormat ; 
 - private static Configuration generalConfig ; 
 - private static Configuration pubConfig ; 
 + private static String format ; 
 + private static Configuration config ; 
 
 @ Override 
 protected String getPath ( String fileName ) throws IOException { 
 @ @ - 49 , 63 + 47 , 34 @ @ public class ParameterNameTest extends BaseCheckTestSupport { 
 public static void setConfigurationBuilder ( ) throws CheckstyleException { 
 final List < Configuration > configs = getCheckConfigs ( " ParameterName " ) ; 
 
 - Assert . assertEquals ( configs . size ( ) , 2 ) ; 
 + Assert . assertEquals ( configs . size ( ) , 1 ) ; 
 
 - generalConfig = configs . get ( 0 ) ; 
 - Assert . assertEquals ( generalConfig . getAttribute ( " accessModifiers " ) , 
 - " protected , package , private " ) ; 
 - genealFormat = generalConfig . getAttribute ( " format " ) ; 
 - 
 - pubConfig = configs . get ( 1 ) ; 
 - Assert . assertEquals ( pubConfig . getAttribute ( " accessModifiers " ) , " public " ) ; 
 - pubFormat = pubConfig . getAttribute ( " format " ) ; 
 + config = configs . get ( 0 ) ; 
 + format = config . getAttribute ( " format " ) ; 
 } 
 
 @ Test 
 public void generalParameterNameTest ( ) throws Exception { 
 
 final String [ ] expected = { 
 - " 8 : 21 : " 
 - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " $ arg1 " , genealFormat ) , 
 - " 9 : 21 : " 
 - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " ar $ g2 " , genealFormat ) , 
 - " 10 : 21 : " 
 - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " arg3 $ " , genealFormat ) , 
 - " 11 : 21 : " 
 - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " a _ rg4 " , genealFormat ) , 
 - " 12 : 21 : " 
 - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " _ arg5 " , genealFormat ) , 
 - " 13 : 21 : " 
 - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " arg6 _ " , genealFormat ) , 
 - " 14 : 21 : " 
 - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " aArg7 " , genealFormat ) , 
 - " 15 : 21 : " 
 - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " aArg8 " , genealFormat ) , 
 - " 16 : 21 : " 
 - + getCheckMessage ( generalConfig . getMessages ( ) , MSG _ KEY , " aar _ g " , genealFormat ) , 
 + " 10 : 21 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " bB " , format ) , 
 + " 33 : 22 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " llll _ llll " , format ) , 
 + " 34 : 21 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " bB " , format ) , 
 + " 64 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " $ arg1 " , format ) , 
 + " 65 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " ar $ g2 " , format ) , 
 + " 66 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " arg3 $ " , format ) , 
 + " 67 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " a _ rg4 " , format ) , 
 + " 68 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " _ arg5 " , format ) , 
 + " 69 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " arg6 _ " , format ) , 
 + " 70 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " aArg7 " , format ) , 
 + " 71 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " aArg8 " , format ) , 
 + " 72 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " aar _ g " , format ) , 
 } ; 
 
 - final String filePath = getPath ( " InputParameterNameSimpleGeneral . java " ) ; 
 + final String filePath = getPath ( " InputParameterName . java " ) ; 
 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 - verify ( generalConfig , filePath , expected , warnList ) ; 
 + verify ( config , filePath , expected , warnList ) ; 
 } 
 
 - @ Test 
 - public void pubParameterNameTest ( ) throws Exception { 
 - 
 - final String [ ] expected = { 
 - " 10 : 21 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " bB " , pubFormat ) , 
 - " 33 : 22 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " llll _ llll " , pubFormat ) , 
 - " 34 : 21 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " bB " , pubFormat ) , 
 - " 44 : 23 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " p " , pubFormat ) , 
 - " 53 : 31 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " p " , pubFormat ) , 
 - " 58 : 44 : " + getCheckMessage ( pubConfig . getMessages ( ) , MSG _ KEY , " p " , pubFormat ) , 
 - } ; 
 - 
 - final String filePath = getPath ( " InputParameterNameSimplePub . java " ) ; 
 - 
 - final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 - verify ( pubConfig , filePath , expected , warnList ) ; 
 - } 
 } 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java 
 index 838cd56 . . dd6c265 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java 
 @ @ - 51 , 7 + 51 , 6 @ @ public class LocalVariableNameTest extends BaseCheckTestSupport { 
 public void localVariableNameTest ( ) throws Exception { 
 
 final String [ ] expected = { 
 - " 26 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " a " , format ) , 
 " 27 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " aA " , format ) , 
 " 28 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " a1 _ a " , format ) , 
 " 29 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " A _ A " , format ) , 
 @ @ - 74 , 7 + 73 , 6 @ @ public class LocalVariableNameTest extends BaseCheckTestSupport { 
 public void oneCharTest ( ) throws Exception { 
 
 final String [ ] expected = { 
 - " 15 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " i " , format ) , 
 " 21 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " I _ ndex " , format ) , 
 " 45 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " i _ ndex " , format ) , 
 " 49 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " ii _ i1 " , format ) , 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java 
 index acb175a . . 42133bf 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule51identifiernames / InputCatchParameterName . java 
 @ @ - 3 , 7 + 3 , 7 @ @ package com . google . checkstyle . test . chapter5naming . rule51identifiernames ; 
 public class InputCatchParameterName { 
 { 
 try { 
 - } catch ( Exception e ) { / / warn 
 + } catch ( Exception e ) { / / ok 
 } 
 try { 
 } catch ( Exception ex ) { / / ok 
 @ @ - 21 , 7 + 21 , 7 @ @ public class InputCatchParameterName { 
 } catch ( Exception noWorries ) { / / ok 
 } 
 try { 
 - } catch ( Throwable t ) { / / warn 
 + } catch ( Throwable t ) { / / ok 
 } 
 try { 
 throw new InterruptedException ( " interruptedException " ) ; 
 @ @ - 47 , 7 + 47 , 19 @ @ public class InputCatchParameterName { 
 } catch ( Exception iException ) { / / warn 
 } 
 try { 
 - } catch ( Exception x ) { / / warn 
 + } catch ( Exception ex _ 1 ) { / / warn 
 + } 
 + try { 
 + } catch ( Exception eX ) { / / warn 
 + } 
 + try { 
 + } catch ( Exception eXX ) { / / warn 
 + } 
 + try { 
 + } catch ( Exception x _ y _ z ) { / / warn 
 + } 
 + try { 
 + } catch ( Exception Ex ) { / / warn 
 } 
 } 
 } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterName . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterName . java 
 new file mode 100644 
 index 0000000 . . 40fdf92 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterName . java 
 @ @ - 0 , 0 + 1 , 75 @ @ 
 + package com . google . checkstyle . test . chapter5naming . rule526parameternames ; 
 + 
 + import java . io . * ; 
 + 
 + class InputParameterName 
 + { 
 + 
 + / * * Some more Javadoc . * / 
 + public void doSomething ( int aaa , int abn , String aaA , 
 + boolean bB ) / / warn 
 + { 
 + for ( Object O : new java . util . ArrayList ( ) ) 
 + { 
 + 
 + } 
 + } 
 + } 
 + 
 + 
 + / * * Test enum for member naming check * / 
 + enum MyEnum1 
 + { 
 + / * * ABC constant * / 
 + ABC , 
 + 
 + / * * XYZ constant * / 
 + XYZ ; 
 + 
 + / * * Should be mSomeMemeber * / 
 + private int someMember ; 
 + 
 + public void doEnum ( int aaaL , 
 + 	 	 long llll _ llll , / / warn 
 + boolean bB ) { } / / warn 
 + } 
 + 
 + / * * Test public vs private method parameter naming check . * / 
 + class InputParameterNameSimplePub 
 + { 
 + / * * Valid : public and more than one char Long * / 
 + public void a ( int par , int parA ) { } 
 + 
 + / * * Invalid : public and one char long * / 
 + public void b ( int p ) { } 
 + 
 + / * * Valid : private and one char long . * / 
 + private void c ( int p ) { } 
 + 
 + / * * Holder for inner anonymous classes * / 
 + private void d ( int param ) { 
 + new Object ( ) { 
 + / * * Invalid : public and one char long . * / 
 + public void e ( int p ) { } 
 + } ; 
 + } 
 + 
 + / * * Invalid : public constructor and one char long * / 
 + public InputParameterNameSimplePub ( int p ) { } 
 + 
 + / * * Valid : private constructor and one char long * / 
 + private InputParameterNameSimplePub ( float p ) { } 
 + 
 + void toManyArgs ( 
 + int $ arg1 , / / warn 
 + int ar $ g2 , / / warn 
 + int arg3 $ , / / warn 
 + int a _ rg4 , / / warn 
 + int _ arg5 , / / warn 
 + int arg6 _ , / / warn 
 + int aArg7 , / / warn 
 + int aArg8 , / / warn 
 + int aar _ g ) / / warn 
 + 
 + { } 
 + } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimpleGeneral . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimpleGeneral . java 
 deleted file mode 100644 
 index dced1c3 . . 0000000 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimpleGeneral . java 
 + + + / dev / null 
 @ @ - 1 , 19 + 0 , 0 @ @ 
 - package com . google . checkstyle . test . chapter5naming . rule526parameternames ; 
 - 
 - import java . io . * ; 
 - 
 - final class InputSimple 
 - { 
 - void toManyArgs ( 
 - 	 	 int $ arg1 , / / warn 
 - 	 	 int ar $ g2 , / / warn 
 - 	 	 int arg3 $ , / / warn 
 - 	 	 int a _ rg4 , / / warn 
 - 	 	 int _ arg5 , / / warn 
 - 	 	 int arg6 _ , / / warn 
 - 	 	 int aArg7 , / / warn 
 - 	 	 int aArg8 , / / warn 
 - 	 	 int aar _ g ) / / warn 
 - 
 - { } 
 - } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePub . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePub . java 
 deleted file mode 100644 
 index 0f39b79 . . 0000000 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimplePub . java 
 + + + / dev / null 
 @ @ - 1 , 62 + 0 , 0 @ @ 
 - package com . google . checkstyle . test . chapter5naming . rule526parameternames ; 
 - 
 - import java . io . * ; 
 - 
 - class InputSimple2 
 - { 
 - 
 - / * * Some more Javadoc . * / 
 - public void doSomething ( int aaa , int abn , String aaA , 
 - boolean bB ) / / warn 
 - { 
 - for ( Object O : new java . util . ArrayList ( ) ) 
 - { 
 - 
 - } 
 - } 
 - } 
 - 
 - 
 - / * * Test enum for member naming check * / 
 - enum MyEnum1 
 - { 
 - / * * ABC constant * / 
 - ABC , 
 - 
 - / * * XYZ constant * / 
 - XYZ ; 
 - 
 - / * * Should be mSomeMemeber * / 
 - private int someMember ; 
 - 
 - public void doEnum ( int aaaL , 
 - 	 	 long llll _ llll , / / warn 
 - boolean bB ) { } / / warn 
 - } 
 - 
 - / * * Test public vs private method parameter naming check . * / 
 - class InputParameterNameSimplePub 
 - { 
 - / * * Valid : public and more than one char Long * / 
 - public void a ( int par , int parA ) { } 
 - 
 - / * * Invalid : public and one char long * / 
 - public void b ( int p ) { } / / warn 
 - 
 - / * * Valid : private and one char long . * / 
 - private void c ( int p ) { } 
 - 
 - / * * Holder for inner anonymous classes * / 
 - private void d ( int param ) { 
 - new Object ( ) { 
 - / * * Invalid : public and one char long . * / 
 - public void e ( int p ) { } / / warn 
 - } ; 
 - } 
 - 
 - / * * Invalid : public constructor and one char long * / 
 - public InputParameterNameSimplePub ( int p ) { } / / warn 
 - 
 - / * * Valid : private constructor and one char long * / 
 - private InputParameterNameSimplePub ( float p ) { } 
 - } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameOneCharVarName . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameOneCharVarName . java 
 index 462a5f7 . . a3e2d4e 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameOneCharVarName . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameOneCharVarName . java 
 @ @ - 12 , 7 + 12 , 7 @ @ class InputOneCharInitVarName 
 / / some code 
 } 
 
 - int i = 0 ; / / warn 
 + int i = 0 ; / / ok 
 
 for ( int index = 1 ; index < 10 ; index + + ) { / / ok 
 / / some code 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameSimple . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameSimple . java 
 index 3a3764d . . 8a60123 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameSimple . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / InputLocalVariableNameSimple . java 
 @ @ - 23 , 7 + 23 , 7 @ @ final class InputSimple 
 private void localVariables ( ) 
 { 
 / / bad examples 
 - int a ; / / warn 
 + int a ; 
 int aA ; / / warn 
 int a1 _ a ; / / warn 
 int A _ A ; / / warn 
 diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml 
 index 2146586 . . d3fe68e 100644 
 - - - a / src / main / resources / google _ checks . xml 
 + + + b / src / main / resources / google _ checks . xml 
 @ @ - 108 , 28 + 108 , 18 @ @ 
 value = " Member name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > 
 < / module > 
 < module name = " ParameterName " > 
 - < property name = " id " value = " ParameterNameNonPublic " / > 
 < property name = " format " value = " ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ " / > 
 - < property name = " accessModifiers " value = " protected , package , private " / > 
 - < message key = " name . invalidPattern " 
 - value = " Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > 
 - < / module > 
 - < module name = " ParameterName " > 
 - < property name = " id " value = " ParameterNamePublic " / > 
 - < property name = " format " value = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " / > 
 - < property name = " accessModifiers " value = " public " / > 
 < message key = " name . invalidPattern " 
 value = " Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > 
 < / module > 
 < module name = " CatchParameterName " > 
 - < property name = " format " value = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " / > 
 + < property name = " format " value = " ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ " / > 
 < message key = " name . invalidPattern " 
 value = " Catch parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > 
 < / module > 
 < module name = " LocalVariableName " > 
 < property name = " tokens " value = " VARIABLE _ DEF " / > 
 - < property name = " format " value = " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " / > 
 - < property name = " allowOneCharVarInForLoop " value = " true " / > 
 + < property name = " format " value = " ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ " / > 
 < message key = " name . invalidPattern " 
 value = " Local variable name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > 
 < / module >

NEAREST DIFF:
diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm 
 index b2d7b6f . . bbedeaa 100644 
 - - - a / src / xdocs / index . xml . vm 
 + + + b / src / xdocs / index . xml . vm 
 @ @ - 99 , 6 + 99 , 23 @ @ 
 
 < / section > 
 
 + < section name = " Backport " > 
 + < p > 
 + Since Checkstyle 7 , some users have been unable to continue upgrading to newer versions 
 + of the utility because of the new JDK 1 . 8 compile requirement . The development team doesn ' t 
 + have the resources to keep updating the utility for older JDKs for those that can ' t 
 + work with the latest version . 
 + < / p > 
 + < p > 
 + However , some members of the community have created an unofficial backport of the latest 
 + Checkstyle releases to be run with JDKs as old as 1 . 6 . If you wish to continue using new 
 + Checkstyle versions on older JDKs , we recommend you either checkout the 
 + < a href = " https : / / github . com / rnveach / checkstyle - backport - jre6 " > github site < / a > or the 
 + < a href = " https : / / rnveach . github . io / checkstyle - backport - jre6 " > documentation site < / a > on how 
 + to use the backport version of the utility , in place of the official Checkstyle version . 
 + < / p > 
 + < / section > 
 + 
 < section name = " Related Tools " > 
 < p > 
 Checkstyle is most useful if you integrate it in your build process or
