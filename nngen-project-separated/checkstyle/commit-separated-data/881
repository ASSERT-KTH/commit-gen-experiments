BLEU SCORE: 0.024455939372403628

TEST MSG: Issue # 3616 : Fix / suppress TC " Deprecated member is still used " errors
GENERATED MSG: Remove calls to simple getters within classes . # 1555

TEST DIFF (one line): diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index a75d450 . . f1741a1 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 501 , 6 + 501 , 7 @ @ <nl> < inspection _ tool class = " Dependency " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " DeprecatedCallableAddReplaceWith " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " DeprecatedClassUsageInspection " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > <nl> + < inspection _ tool class = " DeprecatedIsStillUsed " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " Deprecation " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " DeserializableClassInSecureContext " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " DesignForExtension " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> index 98f5aa2 . . d464760 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> @ @ - 92 , 7 + 92 , 7 @ @ public final class FileContents implements CommentListener { <nl> @ Override <nl> public void reportSingleLineComment ( String type , int startLineNo , <nl> int startColNo ) { <nl> - reportCppComment ( startLineNo , startColNo ) ; <nl> + reportSingleLineComment ( startLineNo , startColNo ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 111 , 7 + 111 , 7 @ @ public final class FileContents implements CommentListener { <nl> @ Override <nl> public void reportBlockComment ( String type , int startLineNo , <nl> int startColNo , int endLineNo , int endColNo ) { <nl> - reportCComment ( startLineNo , startColNo , endLineNo , endColNo ) ; <nl> + reportBlockComment ( startLineNo , startColNo , endLineNo , endColNo ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> index 344d03f . . a5822a6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * @ author Oliver Burn <nl> * @ deprecated Checkstyle is not type aware tool and all Checks derived from this <nl> * class are potentially unstable . <nl> + * @ noinspection DeprecatedIsStillUsed <nl> * / <nl> @ Deprecated <nl> public abstract class AbstractTypeAwareCheck extends AbstractCheck { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> index 568017c . . 28e52a6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> @ @ - 41 , 9 + 41 , 11 @ @ public class FileContentsTest { <nl> @ SuppressWarnings ( " deprecation " ) <nl> public void testDeprecatedAbbreviatedMethod ( ) { <nl> / / just to make UT coverage 100 % <nl> - final FileContents o = new FileContents ( " filename " , " 1 " , " 2 " ) ; <nl> + final FileContents o = new FileContents ( " filename " , " 123 " , " 456 " ) ; <nl> o . getCppComments ( ) ; <nl> o . getCComments ( ) ; <nl> + o . reportCppComment ( 1 , 1 ) ; <nl> + o . reportCComment ( 1 , 1 , 1 , 1 ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java <nl> index a246400 . . cf09c05 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . TrailingCommentCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> + import static org . junit . Assert . assertEquals ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> @ @ - 85 , 7 + 86 , 7 @ @ public class TrailingCommentCheckTest extends BaseCheckTestSupport { <nl> Assert . fail ( ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> - " visitToken ( ) shouldn ' t be called . " . equals ( ex . getMessage ( ) ) ; <nl> + assertEquals ( " visitToken ( ) shouldn ' t be called . " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> index 0a971a1 . . e334ae6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . UncommentedMainCheck . MSG _ KEY ; <nl> + import static org . junit . Assert . assertEquals ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 102 , 7 + 103 , 7 @ @ public class UncommentedMainCheckTest <nl> Assert . fail ( ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> - ast . toString ( ) . equals ( ex . getMessage ( ) ) ; <nl> + assertEquals ( ast . toString ( ) , ex . getMessage ( ) ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleTest . java <nl> index 262bb0a . . bfb45ef 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleTest . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationUseSty <nl> import static com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationUseStyleCheck . MSG _ KEY _ ANNOTATION _ TRAILING _ COMMA _ MISSING ; <nl> import static com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationUseStyleCheck . MSG _ KEY _ ANNOTATION _ TRAILING _ COMMA _ PRESENT ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> import java . io . File ; <nl> <nl> @ @ - 263 , 7 + 264 , 7 @ @ public class AnnotationUseStyleTest extends BaseCheckTestSupport { <nl> check . setElementStyle ( " SHOULD _ PRODUCE _ ERROR " ) ; <nl> } <nl> catch ( ConversionException ex ) { <nl> - ex . getMessage ( ) . startsWith ( " unable to parse " ) ; <nl> + assertTrue ( ex . getMessage ( ) . startsWith ( " unable to parse " ) ) ; <nl> return ; <nl> } <nl>

TEST DIFF:
diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index a75d450 . . f1741a1 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 501 , 6 + 501 , 7 @ @ 
 < inspection _ tool class = " Dependency " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " DeprecatedCallableAddReplaceWith " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " DeprecatedClassUsageInspection " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > 
 + < inspection _ tool class = " DeprecatedIsStillUsed " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " Deprecation " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " DeserializableClassInSecureContext " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " DesignForExtension " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 index 98f5aa2 . . d464760 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 @ @ - 92 , 7 + 92 , 7 @ @ public final class FileContents implements CommentListener { 
 @ Override 
 public void reportSingleLineComment ( String type , int startLineNo , 
 int startColNo ) { 
 - reportCppComment ( startLineNo , startColNo ) ; 
 + reportSingleLineComment ( startLineNo , startColNo ) ; 
 } 
 
 / * * 
 @ @ - 111 , 7 + 111 , 7 @ @ public final class FileContents implements CommentListener { 
 @ Override 
 public void reportBlockComment ( String type , int startLineNo , 
 int startColNo , int endLineNo , int endColNo ) { 
 - reportCComment ( startLineNo , startColNo , endLineNo , endColNo ) ; 
 + reportBlockComment ( startLineNo , startColNo , endLineNo , endColNo ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 index 344d03f . . a5822a6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 @ @ - 41 , 6 + 41 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * @ author Oliver Burn 
 * @ deprecated Checkstyle is not type aware tool and all Checks derived from this 
 * class are potentially unstable . 
 + * @ noinspection DeprecatedIsStillUsed 
 * / 
 @ Deprecated 
 public abstract class AbstractTypeAwareCheck extends AbstractCheck { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 index 568017c . . 28e52a6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 @ @ - 41 , 9 + 41 , 11 @ @ public class FileContentsTest { 
 @ SuppressWarnings ( " deprecation " ) 
 public void testDeprecatedAbbreviatedMethod ( ) { 
 / / just to make UT coverage 100 % 
 - final FileContents o = new FileContents ( " filename " , " 1 " , " 2 " ) ; 
 + final FileContents o = new FileContents ( " filename " , " 123 " , " 456 " ) ; 
 o . getCppComments ( ) ; 
 o . getCComments ( ) ; 
 + o . reportCppComment ( 1 , 1 ) ; 
 + o . reportCComment ( 1 , 1 , 1 , 1 ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java 
 index a246400 . . cf09c05 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . TrailingCommentCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 + import static org . junit . Assert . assertEquals ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 @ @ - 85 , 7 + 86 , 7 @ @ public class TrailingCommentCheckTest extends BaseCheckTestSupport { 
 Assert . fail ( ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 - " visitToken ( ) shouldn ' t be called . " . equals ( ex . getMessage ( ) ) ; 
 + assertEquals ( " visitToken ( ) shouldn ' t be called . " , ex . getMessage ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 index 0a971a1 . . e334ae6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . UncommentedMainCheck . MSG _ KEY ; 
 + import static org . junit . Assert . assertEquals ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 102 , 7 + 103 , 7 @ @ public class UncommentedMainCheckTest 
 Assert . fail ( ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 - ast . toString ( ) . equals ( ex . getMessage ( ) ) ; 
 + assertEquals ( ast . toString ( ) , ex . getMessage ( ) ) ; 
 } 
 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleTest . java 
 index 262bb0a . . bfb45ef 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleTest . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationUseSty 
 import static com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationUseStyleCheck . MSG _ KEY _ ANNOTATION _ TRAILING _ COMMA _ MISSING ; 
 import static com . puppycrawl . tools . checkstyle . checks . annotation . AnnotationUseStyleCheck . MSG _ KEY _ ANNOTATION _ TRAILING _ COMMA _ PRESENT ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 
 import java . io . File ; 
 
 @ @ - 263 , 7 + 264 , 7 @ @ public class AnnotationUseStyleTest extends BaseCheckTestSupport { 
 check . setElementStyle ( " SHOULD _ PRODUCE _ ERROR " ) ; 
 } 
 catch ( ConversionException ex ) { 
 - ex . getMessage ( ) . startsWith ( " unable to parse " ) ; 
 + assertTrue ( ex . getMessage ( ) . startsWith ( " unable to parse " ) ) ; 
 return ; 
 } 

