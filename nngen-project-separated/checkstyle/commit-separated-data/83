BLEU SCORE: 0.09980099403873663

TEST MSG: Issue # 6399 : expanded exclude options to include files
GENERATED MSG: Issue # 3287 : added exclude directory option

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index 321a2eb . . f5eda40 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 202 , 7 + 202 , 8 @ @ public final class Main { <nl> * a specified list . Subdirectories are also traversed . <nl> * @ param node <nl> * the node to process <nl> - * @ param patternsToExclude The list of directory patterns to exclude from searching . <nl> + * @ param patternsToExclude The list of patterns to exclude from searching or being added as <nl> + * files . <nl> * @ return found files <nl> * / <nl> private static List < File > listFiles ( File node , List < Pattern > patternsToExclude ) { <nl> @ @ - 211 , 8 + 212 , 8 @ @ public final class Main { <nl> final List < File > result = new LinkedList < > ( ) ; <nl> <nl> if ( node . canRead ( ) ) { <nl> - if ( node . isDirectory ( ) ) { <nl> - if ( ! isDirectoryExcluded ( node . getAbsolutePath ( ) , patternsToExclude ) ) { <nl> + if ( ! isPathExcluded ( node . getAbsolutePath ( ) , patternsToExclude ) ) { <nl> + if ( node . isDirectory ( ) ) { <nl> final File [ ] files = node . listFiles ( ) ; <nl> / / listFiles ( ) can return null , so we need to check it <nl> if ( files ! = null ) { <nl> @ @ - 221 , 22 + 222 , 23 @ @ public final class Main { <nl> } <nl> } <nl> } <nl> - } <nl> - else if ( node . isFile ( ) ) { <nl> - result . add ( node ) ; <nl> + else if ( node . isFile ( ) ) { <nl> + result . add ( node ) ; <nl> + } <nl> } <nl> } <nl> return result ; <nl> } <nl> <nl> / * * <nl> - * Checks if a directory { @ code path } should be excluded based on if it matches one of the <nl> + * Checks if a directory / file { @ code path } should be excluded based on if it matches one of the <nl> * patterns supplied . <nl> - * @ param path The path of the directory to check <nl> - * @ param patternsToExclude The list of directory patterns to exclude from searching . <nl> - * @ return True if the directory matches one of the patterns . <nl> + * @ param path The path of the directory / file to check <nl> + * @ param patternsToExclude The list of patterns to exclude from searching or being added as <nl> + * files . <nl> + * @ return True if the directory / file matches one of the patterns . <nl> * / <nl> - private static boolean isDirectoryExcluded ( String path , List < Pattern > patternsToExclude ) { <nl> + private static boolean isPathExcluded ( String path , List < Pattern > patternsToExclude ) { <nl> boolean result = false ; <nl> <nl> for ( Pattern pattern : patternsToExclude ) { <nl> @ @ - 666 , 7 + 668 , 7 @ @ public final class Main { <nl> * @ noinspection CanBeFinal <nl> * / <nl> @ Option ( names = { " - e " , " - - exclude " } , <nl> - description = " Directory path to exclude from CheckStyle " ) <nl> + description = " Directory / File path to exclude from CheckStyle " ) <nl> private List < File > exclude = new ArrayList < > ( ) ; <nl> <nl> / * * Option that allows users to specify a regex of paths to exclude . <nl> @ @ - 674 , 7 + 676 , 7 @ @ public final class Main { <nl> * @ noinspection CanBeFinal <nl> * / <nl> @ Option ( names = { " - x " , " - - exclude - regexp " } , <nl> - description = " Regular expression of directory to exclude from CheckStyle " ) <nl> + description = " Regular expression of directory / file to exclude from CheckStyle " ) <nl> private List < Pattern > excludeRegex = new ArrayList < > ( ) ; <nl> <nl> / * * Switch whether to execute ignored modules or not . * / <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index d9e2f70 . . 4ec37c8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 96 , 7 + 96 , 7 @ @ public class MainTest { <nl> + " ( experimental ) The number of Checker threads ( must be " <nl> + " greater than zero ) % n " <nl> + " - d , - - debug Print all debug logging of CheckStyle utility % n " <nl> - + " - e , - - exclude = < exclude > Directory path to exclude from CheckStyle % n " <nl> + + " - e , - - exclude = < exclude > Directory / File path to exclude from CheckStyle % n " <nl> + " - f = < format > Sets the output format . Valid values : xml , plain . " <nl> + " Defaults to plain % n " <nl> + " - g , - - generate - xpath - suppression % n " <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class MainTest { <nl> + " ( experimental ) The number of TreeWalker threads ( must be " <nl> + " greater than zero ) % n " <nl> + " - x , - - exclude - regexp = < excludeRegex > % n " <nl> - + " Regular expression of directory to exclude from " <nl> + + " Regular expression of directory / file to exclude from " <nl> + " CheckStyle % n " ) ; <nl> <nl> private static final Logger LOG = Logger . getLogger ( MainTest . class . getName ( ) ) . getParent ( ) ; <nl> @ @ - 637 , 7 + 637 , 8 @ @ public class MainTest { <nl> when ( fileMock . isDirectory ( ) ) . thenReturn ( false ) ; <nl> when ( fileMock . isFile ( ) ) . thenReturn ( false ) ; <nl> <nl> - final List < File > result = ( List < File > ) method . invoke ( null , fileMock , null ) ; <nl> + final List < File > result = ( List < File > ) method . invoke ( null , fileMock , <nl> + new ArrayList < Pattern > ( ) ) ; <nl> assertEquals ( " Invalid result size " , 0 , result . size ( ) ) ; <nl> } <nl> <nl> @ @ - 1180 , 6 + 1181 , 18 @ @ public class MainTest { <nl> } <nl> <nl> @ Test <nl> + public void testExcludeOptionFile ( ) throws Exception { <nl> + exit . expectSystemExitWithStatus ( - 1 ) ; <nl> + exit . checkAssertionAfterwards ( ( ) - > { <nl> + assertEquals ( " Unexpected output log " , " Files to process must be specified , found 0 . " <nl> + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; <nl> + assertEquals ( " Unexpected system error log " , " " , systemErr . getLog ( ) ) ; <nl> + } ) ; <nl> + Main . main ( " - c " , " / google _ checks . xml " , getFilePath ( " InputMain . java " ) , " - e " , <nl> + getFilePath ( " InputMain . java " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testExcludeRegexpOption ( ) throws Exception { <nl> exit . expectSystemExitWithStatus ( - 1 ) ; <nl> exit . checkAssertionAfterwards ( ( ) - > { <nl> @ @ - 1191 , 6 + 1204 , 17 @ @ public class MainTest { <nl> } <nl> <nl> @ Test <nl> + public void testExcludeRegexpOptionFile ( ) throws Exception { <nl> + exit . expectSystemExitWithStatus ( - 1 ) ; <nl> + exit . checkAssertionAfterwards ( ( ) - > { <nl> + assertEquals ( " Unexpected output log " , " Files to process must be specified , found 0 . " <nl> + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; <nl> + assertEquals ( " Unexpected output log " , " " , systemErr . getLog ( ) ) ; <nl> + } ) ; <nl> + Main . main ( " - c " , " / google _ checks . xml " , getFilePath ( " InputMain . java " ) , " - x " , " . " ) ; <nl> + } <nl> + <nl> + @ Test <nl> @ SuppressWarnings ( " unchecked " ) <nl> public void testExcludeDirectoryNotMatch ( ) throws Exception { <nl> final Class < ? > optionsClass = Class . forName ( Main . class . getName ( ) ) ; <nl> diff - - git a / src / xdocs / cmdline . xml . vm b / src / xdocs / cmdline . xml . vm <nl> index 9abe6b4 . . 32264c3 100644 <nl> - - - a / src / xdocs / cmdline . xml . vm <nl> + + + b / src / xdocs / cmdline . xml . vm <nl> @ @ - 134 , 12 + 134 , 12 @ @ java - D & lt ; property & gt ; = & lt ; value & gt ; \ <nl> < code > - d , - - debug < / code > - Print all debug logging of CheckStyle utility . <nl> < / li > <nl> < li > <nl> - < code > - e , - - exclude excludedDirectory < / code > - Directory to exclude from <nl> - CheckStyle . The directory can be the full , absolute path , or relative to the current path . <nl> + < code > - e , - - exclude excludedPath < / code > - Directory / file to exclude from <nl> + CheckStyle . The path can be the full , absolute path , or relative to the current path . <nl> Multiple excludes are allowed . <nl> < / li > <nl> < li > <nl> - < code > - x , - - exclude - regexp excludedDirectoryPattern < / code > - Directory pattern to <nl> + < code > - x , - - exclude - regexp excludedPathPattern < / code > - Directory / file pattern to <nl> exclude from CheckStyle . Multiple excludes are allowed . <nl> < / li > <nl> < li >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 8afacb8 . . 43ec6b5 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 200 , 7 + 200 , 6 @ @ <nl> < java . version > 1 . 8 < / java . version > <nl> < tools . jar . version > $ { java . version } . 0 < / tools . jar . version > <nl> < tools . jar . path > $ { java . home } / . . / lib / tools . jar < / tools . jar . path > <nl> - < checkstyle . version > 6 . 18 < / checkstyle . version > <nl> < / properties > <nl> <nl> < ! - - that repositories are required for testing plugin ' s snapshot version - - >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index 321a2eb . . f5eda40 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 202 , 7 + 202 , 8 @ @ public final class Main { 
 * a specified list . Subdirectories are also traversed . 
 * @ param node 
 * the node to process 
 - * @ param patternsToExclude The list of directory patterns to exclude from searching . 
 + * @ param patternsToExclude The list of patterns to exclude from searching or being added as 
 + * files . 
 * @ return found files 
 * / 
 private static List < File > listFiles ( File node , List < Pattern > patternsToExclude ) { 
 @ @ - 211 , 8 + 212 , 8 @ @ public final class Main { 
 final List < File > result = new LinkedList < > ( ) ; 
 
 if ( node . canRead ( ) ) { 
 - if ( node . isDirectory ( ) ) { 
 - if ( ! isDirectoryExcluded ( node . getAbsolutePath ( ) , patternsToExclude ) ) { 
 + if ( ! isPathExcluded ( node . getAbsolutePath ( ) , patternsToExclude ) ) { 
 + if ( node . isDirectory ( ) ) { 
 final File [ ] files = node . listFiles ( ) ; 
 / / listFiles ( ) can return null , so we need to check it 
 if ( files ! = null ) { 
 @ @ - 221 , 22 + 222 , 23 @ @ public final class Main { 
 } 
 } 
 } 
 - } 
 - else if ( node . isFile ( ) ) { 
 - result . add ( node ) ; 
 + else if ( node . isFile ( ) ) { 
 + result . add ( node ) ; 
 + } 
 } 
 } 
 return result ; 
 } 
 
 / * * 
 - * Checks if a directory { @ code path } should be excluded based on if it matches one of the 
 + * Checks if a directory / file { @ code path } should be excluded based on if it matches one of the 
 * patterns supplied . 
 - * @ param path The path of the directory to check 
 - * @ param patternsToExclude The list of directory patterns to exclude from searching . 
 - * @ return True if the directory matches one of the patterns . 
 + * @ param path The path of the directory / file to check 
 + * @ param patternsToExclude The list of patterns to exclude from searching or being added as 
 + * files . 
 + * @ return True if the directory / file matches one of the patterns . 
 * / 
 - private static boolean isDirectoryExcluded ( String path , List < Pattern > patternsToExclude ) { 
 + private static boolean isPathExcluded ( String path , List < Pattern > patternsToExclude ) { 
 boolean result = false ; 
 
 for ( Pattern pattern : patternsToExclude ) { 
 @ @ - 666 , 7 + 668 , 7 @ @ public final class Main { 
 * @ noinspection CanBeFinal 
 * / 
 @ Option ( names = { " - e " , " - - exclude " } , 
 - description = " Directory path to exclude from CheckStyle " ) 
 + description = " Directory / File path to exclude from CheckStyle " ) 
 private List < File > exclude = new ArrayList < > ( ) ; 
 
 / * * Option that allows users to specify a regex of paths to exclude . 
 @ @ - 674 , 7 + 676 , 7 @ @ public final class Main { 
 * @ noinspection CanBeFinal 
 * / 
 @ Option ( names = { " - x " , " - - exclude - regexp " } , 
 - description = " Regular expression of directory to exclude from CheckStyle " ) 
 + description = " Regular expression of directory / file to exclude from CheckStyle " ) 
 private List < Pattern > excludeRegex = new ArrayList < > ( ) ; 
 
 / * * Switch whether to execute ignored modules or not . * / 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index d9e2f70 . . 4ec37c8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 96 , 7 + 96 , 7 @ @ public class MainTest { 
 + " ( experimental ) The number of Checker threads ( must be " 
 + " greater than zero ) % n " 
 + " - d , - - debug Print all debug logging of CheckStyle utility % n " 
 - + " - e , - - exclude = < exclude > Directory path to exclude from CheckStyle % n " 
 + + " - e , - - exclude = < exclude > Directory / File path to exclude from CheckStyle % n " 
 + " - f = < format > Sets the output format . Valid values : xml , plain . " 
 + " Defaults to plain % n " 
 + " - g , - - generate - xpath - suppression % n " 
 @ @ - 122 , 7 + 122 , 7 @ @ public class MainTest { 
 + " ( experimental ) The number of TreeWalker threads ( must be " 
 + " greater than zero ) % n " 
 + " - x , - - exclude - regexp = < excludeRegex > % n " 
 - + " Regular expression of directory to exclude from " 
 + + " Regular expression of directory / file to exclude from " 
 + " CheckStyle % n " ) ; 
 
 private static final Logger LOG = Logger . getLogger ( MainTest . class . getName ( ) ) . getParent ( ) ; 
 @ @ - 637 , 7 + 637 , 8 @ @ public class MainTest { 
 when ( fileMock . isDirectory ( ) ) . thenReturn ( false ) ; 
 when ( fileMock . isFile ( ) ) . thenReturn ( false ) ; 
 
 - final List < File > result = ( List < File > ) method . invoke ( null , fileMock , null ) ; 
 + final List < File > result = ( List < File > ) method . invoke ( null , fileMock , 
 + new ArrayList < Pattern > ( ) ) ; 
 assertEquals ( " Invalid result size " , 0 , result . size ( ) ) ; 
 } 
 
 @ @ - 1180 , 6 + 1181 , 18 @ @ public class MainTest { 
 } 
 
 @ Test 
 + public void testExcludeOptionFile ( ) throws Exception { 
 + exit . expectSystemExitWithStatus ( - 1 ) ; 
 + exit . checkAssertionAfterwards ( ( ) - > { 
 + assertEquals ( " Unexpected output log " , " Files to process must be specified , found 0 . " 
 + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; 
 + assertEquals ( " Unexpected system error log " , " " , systemErr . getLog ( ) ) ; 
 + } ) ; 
 + Main . main ( " - c " , " / google _ checks . xml " , getFilePath ( " InputMain . java " ) , " - e " , 
 + getFilePath ( " InputMain . java " ) ) ; 
 + } 
 + 
 + @ Test 
 public void testExcludeRegexpOption ( ) throws Exception { 
 exit . expectSystemExitWithStatus ( - 1 ) ; 
 exit . checkAssertionAfterwards ( ( ) - > { 
 @ @ - 1191 , 6 + 1204 , 17 @ @ public class MainTest { 
 } 
 
 @ Test 
 + public void testExcludeRegexpOptionFile ( ) throws Exception { 
 + exit . expectSystemExitWithStatus ( - 1 ) ; 
 + exit . checkAssertionAfterwards ( ( ) - > { 
 + assertEquals ( " Unexpected output log " , " Files to process must be specified , found 0 . " 
 + + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; 
 + assertEquals ( " Unexpected output log " , " " , systemErr . getLog ( ) ) ; 
 + } ) ; 
 + Main . main ( " - c " , " / google _ checks . xml " , getFilePath ( " InputMain . java " ) , " - x " , " . " ) ; 
 + } 
 + 
 + @ Test 
 @ SuppressWarnings ( " unchecked " ) 
 public void testExcludeDirectoryNotMatch ( ) throws Exception { 
 final Class < ? > optionsClass = Class . forName ( Main . class . getName ( ) ) ; 
 diff - - git a / src / xdocs / cmdline . xml . vm b / src / xdocs / cmdline . xml . vm 
 index 9abe6b4 . . 32264c3 100644 
 - - - a / src / xdocs / cmdline . xml . vm 
 + + + b / src / xdocs / cmdline . xml . vm 
 @ @ - 134 , 12 + 134 , 12 @ @ java - D & lt ; property & gt ; = & lt ; value & gt ; \ 
 < code > - d , - - debug < / code > - Print all debug logging of CheckStyle utility . 
 < / li > 
 < li > 
 - < code > - e , - - exclude excludedDirectory < / code > - Directory to exclude from 
 - CheckStyle . The directory can be the full , absolute path , or relative to the current path . 
 + < code > - e , - - exclude excludedPath < / code > - Directory / file to exclude from 
 + CheckStyle . The path can be the full , absolute path , or relative to the current path . 
 Multiple excludes are allowed . 
 < / li > 
 < li > 
 - < code > - x , - - exclude - regexp excludedDirectoryPattern < / code > - Directory pattern to 
 + < code > - x , - - exclude - regexp excludedPathPattern < / code > - Directory / file pattern to 
 exclude from CheckStyle . Multiple excludes are allowed . 
 < / li > 
 < li >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 8afacb8 . . 43ec6b5 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 200 , 7 + 200 , 6 @ @ 
 < java . version > 1 . 8 < / java . version > 
 < tools . jar . version > $ { java . version } . 0 < / tools . jar . version > 
 < tools . jar . path > $ { java . home } / . . / lib / tools . jar < / tools . jar . path > 
 - < checkstyle . version > 6 . 18 < / checkstyle . version > 
 < / properties > 
 
 < ! - - that repositories are required for testing plugin ' s snapshot version - - >
