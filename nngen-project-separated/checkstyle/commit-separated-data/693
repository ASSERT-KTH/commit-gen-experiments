BLEU SCORE: 0.04063257670723637

TEST MSG: minor : remove BaseCheckTestSupport . getSrcPath ( . . . . . ) as it is not used
GENERATED MSG: minor : fix IntelijIdea violations ' Declaration can have final modifier ' , ' Method may be static '

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> index 9743683 . . 4951b0c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> @ @ - 122 , 20 + 122 , 6 @ @ public class BaseCheckTestSupport { <nl> <nl> / * * <nl> * Returns canonical path for the file with the given file name . <nl> - * The path is formed base on the sources location . <nl> - * This implementation uses ' src / test / java / com / puppycrawl / tools / checkstyle / ' <nl> - * as a src location . <nl> - * @ param filename file name . <nl> - * @ return canonical path for the file with the given file name . <nl> - * @ throws IOException if I / O exception occurs while forming the path . <nl> - * / <nl> - protected static String getSrcPath ( String filename ) throws IOException { <nl> - return new File ( " src / test / java / com / puppycrawl / tools / checkstyle / " + filename ) <nl> - . getCanonicalPath ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Returns canonical path for the file with the given file name . <nl> * The path is formed base on the non - compilable resources location . <nl> * This implementation uses ' src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / ' <nl> * as a non - compilable resource location .
NEAREST DIFF (one line): diff - - git a / config / sevntu _ suppressions . xml b / config / sevntu _ suppressions . xml <nl> index d7ef9d7 . . d838af5 100644 <nl> - - - a / config / sevntu _ suppressions . xml <nl> + + + b / config / sevntu _ suppressions . xml <nl> @ @ - 55 , 5 + 55 , 5 @ @ <nl> < ! - - testing for catch Error is part of 100 % coverage - - > <nl> < suppress checks = " IllegalCatchExtended " <nl> files = " CheckerTest \ . java " <nl> - lines = " 579 " / > <nl> + lines = " 545 " / > <nl> < / suppressions > <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> index 7de98c2 . . 9463638 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> @ @ - 30 , 9 + 30 , 7 @ @ import java . io . ObjectOutputStream ; <nl> import java . io . OutputStream ; <nl> import java . io . Serializable ; <nl> import java . net . URI ; <nl> - import java . nio . file . AccessDeniedException ; <nl> import java . nio . file . Files ; <nl> - import java . nio . file . InvalidPathException ; <nl> import java . nio . file . Path ; <nl> import java . nio . file . Paths ; <nl> import java . security . MessageDigest ; <nl> @ @ - 138 , 14 + 136 , 9 @ @ final class PropertyCacheFile { <nl> * @ throws IOException when there is a problems with file save <nl> * / <nl> public void persist ( ) throws IOException { <nl> - try { <nl> - final Path directory = Paths . get ( fileName ) . getParent ( ) ; <nl> - if ( directory ! = null ) { <nl> - Files . createDirectories ( directory ) ; <nl> - } <nl> - } <nl> - catch ( InvalidPathException | AccessDeniedException ex ) { <nl> - throw new IllegalStateException ( ex . getMessage ( ) , ex ) ; <nl> + final Path directory = Paths . get ( fileName ) . getParent ( ) ; <nl> + if ( directory ! = null ) { <nl> + Files . createDirectories ( directory ) ; <nl> } <nl> FileOutputStream out = null ; <nl> try { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index ade8f4f . . 4da6845 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> - import static org . hamcrest . CoreMatchers . anyOf ; <nl> import static org . hamcrest . CoreMatchers . instanceOf ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> @ @ - 33 , 7 + 32 , 6 @ @ import java . io . IOError ; <nl> import java . io . IOException ; <nl> import java . io . UnsupportedEncodingException ; <nl> import java . lang . reflect . Method ; <nl> - import java . nio . file . InvalidPathException ; <nl> import java . util . ArrayList ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> @ @ - 41 , 7 + 39 , 6 @ @ import java . util . Locale ; <nl> import java . util . Set ; <nl> import java . util . SortedSet ; <nl> <nl> - import org . junit . Assume ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . TemporaryFolder ; <nl> @ @ - 363 , 20 + 360 , 17 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testDestroyNonExistingCache ( ) throws Exception { <nl> - / / We use assumption to satisfy coverage rate on OS Windows , since persist ( ) method of <nl> - / / class PropertyCacheFile does not throw IOException on OS Linux when path to a cache <nl> - / / directory is invalid on OS Windows . <nl> - Assume . assumeTrue ( System . getProperty ( " os . name " ) <nl> - . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) ; <nl> - <nl> + public void testDestroyCacheWithWrongFileNameLength ( ) throws Exception { <nl> final Checker checker = new Checker ( ) ; <nl> final PackageObjectFactory factory = new PackageObjectFactory ( <nl> - new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . setModuleFactory ( factory ) ; <nl> checker . configure ( new DefaultConfiguration ( " default config " ) ) ; <nl> - final String tempFilePath = temporaryFolder . newFile ( ) . getPath ( ) + " . \ \ \ ' " ; <nl> - checker . setCacheFile ( tempFilePath ) ; <nl> + / / We set wrong file name length in order to reproduce IOException on OS Linux , OS Windows . <nl> + / / The maximum file name length which is allowed in most UNIX , Windows file systems is 255 . <nl> + / / See https : / / en . wikipedia . org / wiki / Filename <nl> + final int wrongFileNameLength = 300 ; <nl> + checker . setCacheFile ( Strings . padEnd ( " fileName " , wrongFileNameLength , ' e ' ) ) ; <nl> try { <nl> checker . destroy ( ) ; <nl> fail ( " Exception did not happen " ) ; <nl> @ @ - 387 , 34 + 381 , 6 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testDestroyCacheFileWithInvalidPath ( ) throws Exception { <nl> - final Checker checker = new Checker ( ) ; <nl> - final PackageObjectFactory factory = new PackageObjectFactory ( <nl> - new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - checker . setModuleFactory ( factory ) ; <nl> - checker . configure ( new DefaultConfiguration ( " default config " ) ) ; <nl> - if ( System . getProperty ( " os . name " ) <nl> - . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { <nl> - / / https : / / support . microsoft . com / en - us / kb / 177506 but this only for NTFS <nl> - / / WindowsServer 2012 use Resilient File System ( ReFS ) , so any name is ok <nl> - final File file = new File ( " C \ \ : invalid " ) ; <nl> - checker . setCacheFile ( file . getAbsolutePath ( ) ) ; <nl> - } <nl> - else { <nl> - final int wrongFileNameLength = 300 ; <nl> - checker . setCacheFile ( Strings . padEnd ( File . separator , wrongFileNameLength , ' * ' ) ) ; <nl> - } <nl> - try { <nl> - checker . destroy ( ) ; <nl> - fail ( " Exception did not happen " ) ; <nl> - } <nl> - catch ( IllegalStateException ex ) { <nl> - assertThat ( ex . getCause ( ) , anyOf ( instanceOf ( IOException . class ) , <nl> - instanceOf ( InvalidPathException . class ) ) ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> public void testCacheFile ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> index 527b349 . . 8a0282e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> @ @ - 19 , 16 + 19 , 10 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> - import static org . hamcrest . CoreMatchers . containsString ; <nl> - import static org . hamcrest . CoreMatchers . instanceOf ; <nl> - import static org . hamcrest . core . StringEndsWith . endsWith ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> - import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> - import static org . mockito . Mockito . doThrow ; <nl> - import static org . powermock . api . mockito . PowerMockito . mock ; <nl> import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . when ; <nl> <nl> @ @ - 38 , 9 + 32 , 7 @ @ import java . io . IOException ; <nl> import java . io . Serializable ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> - import java . nio . file . AccessDeniedException ; <nl> import java . nio . file . Files ; <nl> - import java . nio . file . InvalidPathException ; <nl> import java . nio . file . Paths ; <nl> import java . security . MessageDigest ; <nl> import java . security . NoSuchAlgorithmException ; <nl> @ @ - 63 , 21 + 55 , 6 @ @ public class PropertyCacheFileTest { <nl> public final TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ; <nl> <nl> @ Test <nl> - public void testNonAccessibleFile ( ) throws IOException { <nl> - final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> - final File file = temporaryFolder . newFile ( " file . output " ) ; <nl> - file . setReadable ( true , false ) ; <nl> - file . setWritable ( false , false ) ; <nl> - try { <nl> - new PropertyCacheFile ( config , file . getAbsolutePath ( ) ) . persist ( ) ; <nl> - fail ( " FileNotFoundException is expected , since access to the file was denied ! " ) ; <nl> - } <nl> - catch ( FileNotFoundException ex ) { <nl> - assertThat ( ex . getMessage ( ) , containsString ( " file . output " ) ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> public void testCtor ( ) { <nl> try { <nl> new PropertyCacheFile ( null , " " ) ; <nl> @ @ - 138 , 63 + 115 , 6 @ @ public class PropertyCacheFileTest { <nl> } <nl> <nl> @ Test <nl> - public void testPathToCacheFileContainsIllegalCharacters ( ) throws IOException { <nl> - final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> - final String filePath = " \ \ \ 0 : FOO \ \ server . properties " ; <nl> - final PropertyCacheFile cache = new PropertyCacheFile ( config , filePath ) ; <nl> - try { <nl> - cache . persist ( ) ; <nl> - fail ( " Exception is expected ! " ) ; <nl> - } <nl> - catch ( IllegalStateException ex ) { <nl> - assertThat ( ex . getCause ( ) , instanceOf ( InvalidPathException . class ) ) ; <nl> - assertThat ( ex . getMessage ( ) , endsWith ( " server . properties " ) ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void testNonAccessibleDirectory ( ) throws Exception { <nl> - <nl> - final PropertyCacheFile cache ; <nl> - final String failMessage ; <nl> - <nl> - / / That works fine on Linux / Unix , but . . . . <nl> - / / It ' s not possible to make a directory / file unreadable in Windows NTFS for owner , that <nl> - / / is why we use mock for testing on OS Windows . <nl> - / / http : / / stackoverflow . com / a / 4354686 <nl> - / / https : / / github . com / google / google - oauth - java - client / issues / 55 # issuecomment - 69403681 <nl> - if ( System . getProperty ( " os . name " ) . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { <nl> - / / We use mock on Windows just to satisfy coverage rate <nl> - cache = mock ( PropertyCacheFile . class ) ; <nl> - final String mockExceptionMessage = " . . . cache " ; <nl> - final AccessDeniedException mockException = <nl> - new AccessDeniedException ( mockExceptionMessage ) ; <nl> - doThrow ( new IllegalStateException ( mockException ) ) . when ( cache ) . persist ( ) ; <nl> - failMessage = " AccessDeniedException is expected since we use the mock object . " ; <nl> - <nl> - } <nl> - else { <nl> - final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> - final File directory = temporaryFolder . newFolder ( " directory " ) ; <nl> - directory . setReadable ( true , false ) ; <nl> - directory . setWritable ( false , false ) ; <nl> - final String filePath = String . format ( Locale . getDefault ( ) , " % s % 2 $ sscache % 2 $ stemp . cache " , <nl> - directory . getAbsolutePath ( ) , File . separator ) ; <nl> - cache = new PropertyCacheFile ( config , filePath ) ; <nl> - failMessage = " AccessDeniedException is expected since directory is readonly . " ; <nl> - } <nl> - <nl> - try { <nl> - cache . persist ( ) ; <nl> - fail ( failMessage ) ; <nl> - } <nl> - catch ( IllegalStateException ex ) { <nl> - assertTrue ( ex . getCause ( ) instanceof AccessDeniedException ) ; <nl> - assertThat ( ex . getMessage ( ) , endsWith ( " cache " ) ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> @ SuppressWarnings ( " unchecked " ) <nl> public void testExceptionNoSuchAlgorithmException ( ) throws Exception { <nl>

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 index 9743683 . . 4951b0c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 @ @ - 122 , 20 + 122 , 6 @ @ public class BaseCheckTestSupport { 
 
 / * * 
 * Returns canonical path for the file with the given file name . 
 - * The path is formed base on the sources location . 
 - * This implementation uses ' src / test / java / com / puppycrawl / tools / checkstyle / ' 
 - * as a src location . 
 - * @ param filename file name . 
 - * @ return canonical path for the file with the given file name . 
 - * @ throws IOException if I / O exception occurs while forming the path . 
 - * / 
 - protected static String getSrcPath ( String filename ) throws IOException { 
 - return new File ( " src / test / java / com / puppycrawl / tools / checkstyle / " + filename ) 
 - . getCanonicalPath ( ) ; 
 - } 
 - 
 - / * * 
 - * Returns canonical path for the file with the given file name . 
 * The path is formed base on the non - compilable resources location . 
 * This implementation uses ' src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / ' 
 * as a non - compilable resource location .

NEAREST DIFF:
diff - - git a / config / sevntu _ suppressions . xml b / config / sevntu _ suppressions . xml 
 index d7ef9d7 . . d838af5 100644 
 - - - a / config / sevntu _ suppressions . xml 
 + + + b / config / sevntu _ suppressions . xml 
 @ @ - 55 , 5 + 55 , 5 @ @ 
 < ! - - testing for catch Error is part of 100 % coverage - - > 
 < suppress checks = " IllegalCatchExtended " 
 files = " CheckerTest \ . java " 
 - lines = " 579 " / > 
 + lines = " 545 " / > 
 < / suppressions > 
 \ No newline at end of file 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 index 7de98c2 . . 9463638 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 @ @ - 30 , 9 + 30 , 7 @ @ import java . io . ObjectOutputStream ; 
 import java . io . OutputStream ; 
 import java . io . Serializable ; 
 import java . net . URI ; 
 - import java . nio . file . AccessDeniedException ; 
 import java . nio . file . Files ; 
 - import java . nio . file . InvalidPathException ; 
 import java . nio . file . Path ; 
 import java . nio . file . Paths ; 
 import java . security . MessageDigest ; 
 @ @ - 138 , 14 + 136 , 9 @ @ final class PropertyCacheFile { 
 * @ throws IOException when there is a problems with file save 
 * / 
 public void persist ( ) throws IOException { 
 - try { 
 - final Path directory = Paths . get ( fileName ) . getParent ( ) ; 
 - if ( directory ! = null ) { 
 - Files . createDirectories ( directory ) ; 
 - } 
 - } 
 - catch ( InvalidPathException | AccessDeniedException ex ) { 
 - throw new IllegalStateException ( ex . getMessage ( ) , ex ) ; 
 + final Path directory = Paths . get ( fileName ) . getParent ( ) ; 
 + if ( directory ! = null ) { 
 + Files . createDirectories ( directory ) ; 
 } 
 FileOutputStream out = null ; 
 try { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index ade8f4f . . 4da6845 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 19 , 7 + 19 , 6 @ @ 
 
 package com . puppycrawl . tools . checkstyle ; 
 
 - import static org . hamcrest . CoreMatchers . anyOf ; 
 import static org . hamcrest . CoreMatchers . instanceOf ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 @ @ - 33 , 7 + 32 , 6 @ @ import java . io . IOError ; 
 import java . io . IOException ; 
 import java . io . UnsupportedEncodingException ; 
 import java . lang . reflect . Method ; 
 - import java . nio . file . InvalidPathException ; 
 import java . util . ArrayList ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 @ @ - 41 , 7 + 39 , 6 @ @ import java . util . Locale ; 
 import java . util . Set ; 
 import java . util . SortedSet ; 
 
 - import org . junit . Assume ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . TemporaryFolder ; 
 @ @ - 363 , 20 + 360 , 17 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testDestroyNonExistingCache ( ) throws Exception { 
 - / / We use assumption to satisfy coverage rate on OS Windows , since persist ( ) method of 
 - / / class PropertyCacheFile does not throw IOException on OS Linux when path to a cache 
 - / / directory is invalid on OS Windows . 
 - Assume . assumeTrue ( System . getProperty ( " os . name " ) 
 - . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) ; 
 - 
 + public void testDestroyCacheWithWrongFileNameLength ( ) throws Exception { 
 final Checker checker = new Checker ( ) ; 
 final PackageObjectFactory factory = new PackageObjectFactory ( 
 - new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . setModuleFactory ( factory ) ; 
 checker . configure ( new DefaultConfiguration ( " default config " ) ) ; 
 - final String tempFilePath = temporaryFolder . newFile ( ) . getPath ( ) + " . \ \ \ ' " ; 
 - checker . setCacheFile ( tempFilePath ) ; 
 + / / We set wrong file name length in order to reproduce IOException on OS Linux , OS Windows . 
 + / / The maximum file name length which is allowed in most UNIX , Windows file systems is 255 . 
 + / / See https : / / en . wikipedia . org / wiki / Filename 
 + final int wrongFileNameLength = 300 ; 
 + checker . setCacheFile ( Strings . padEnd ( " fileName " , wrongFileNameLength , ' e ' ) ) ; 
 try { 
 checker . destroy ( ) ; 
 fail ( " Exception did not happen " ) ; 
 @ @ - 387 , 34 + 381 , 6 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testDestroyCacheFileWithInvalidPath ( ) throws Exception { 
 - final Checker checker = new Checker ( ) ; 
 - final PackageObjectFactory factory = new PackageObjectFactory ( 
 - new HashSet < String > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - checker . setModuleFactory ( factory ) ; 
 - checker . configure ( new DefaultConfiguration ( " default config " ) ) ; 
 - if ( System . getProperty ( " os . name " ) 
 - . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { 
 - / / https : / / support . microsoft . com / en - us / kb / 177506 but this only for NTFS 
 - / / WindowsServer 2012 use Resilient File System ( ReFS ) , so any name is ok 
 - final File file = new File ( " C \ \ : invalid " ) ; 
 - checker . setCacheFile ( file . getAbsolutePath ( ) ) ; 
 - } 
 - else { 
 - final int wrongFileNameLength = 300 ; 
 - checker . setCacheFile ( Strings . padEnd ( File . separator , wrongFileNameLength , ' * ' ) ) ; 
 - } 
 - try { 
 - checker . destroy ( ) ; 
 - fail ( " Exception did not happen " ) ; 
 - } 
 - catch ( IllegalStateException ex ) { 
 - assertThat ( ex . getCause ( ) , anyOf ( instanceOf ( IOException . class ) , 
 - instanceOf ( InvalidPathException . class ) ) ) ; 
 - } 
 - } 
 - 
 - @ Test 
 public void testCacheFile ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 index 527b349 . . 8a0282e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 @ @ - 19 , 16 + 19 , 10 @ @ 
 
 package com . puppycrawl . tools . checkstyle ; 
 
 - import static org . hamcrest . CoreMatchers . containsString ; 
 - import static org . hamcrest . CoreMatchers . instanceOf ; 
 - import static org . hamcrest . core . StringEndsWith . endsWith ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 - import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 - import static org . mockito . Mockito . doThrow ; 
 - import static org . powermock . api . mockito . PowerMockito . mock ; 
 import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 import static org . powermock . api . mockito . PowerMockito . when ; 
 
 @ @ - 38 , 9 + 32 , 7 @ @ import java . io . IOException ; 
 import java . io . Serializable ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 - import java . nio . file . AccessDeniedException ; 
 import java . nio . file . Files ; 
 - import java . nio . file . InvalidPathException ; 
 import java . nio . file . Paths ; 
 import java . security . MessageDigest ; 
 import java . security . NoSuchAlgorithmException ; 
 @ @ - 63 , 21 + 55 , 6 @ @ public class PropertyCacheFileTest { 
 public final TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ; 
 
 @ Test 
 - public void testNonAccessibleFile ( ) throws IOException { 
 - final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 - final File file = temporaryFolder . newFile ( " file . output " ) ; 
 - file . setReadable ( true , false ) ; 
 - file . setWritable ( false , false ) ; 
 - try { 
 - new PropertyCacheFile ( config , file . getAbsolutePath ( ) ) . persist ( ) ; 
 - fail ( " FileNotFoundException is expected , since access to the file was denied ! " ) ; 
 - } 
 - catch ( FileNotFoundException ex ) { 
 - assertThat ( ex . getMessage ( ) , containsString ( " file . output " ) ) ; 
 - } 
 - } 
 - 
 - @ Test 
 public void testCtor ( ) { 
 try { 
 new PropertyCacheFile ( null , " " ) ; 
 @ @ - 138 , 63 + 115 , 6 @ @ public class PropertyCacheFileTest { 
 } 
 
 @ Test 
 - public void testPathToCacheFileContainsIllegalCharacters ( ) throws IOException { 
 - final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 - final String filePath = " \ \ \ 0 : FOO \ \ server . properties " ; 
 - final PropertyCacheFile cache = new PropertyCacheFile ( config , filePath ) ; 
 - try { 
 - cache . persist ( ) ; 
 - fail ( " Exception is expected ! " ) ; 
 - } 
 - catch ( IllegalStateException ex ) { 
 - assertThat ( ex . getCause ( ) , instanceOf ( InvalidPathException . class ) ) ; 
 - assertThat ( ex . getMessage ( ) , endsWith ( " server . properties " ) ) ; 
 - } 
 - } 
 - 
 - @ Test 
 - public void testNonAccessibleDirectory ( ) throws Exception { 
 - 
 - final PropertyCacheFile cache ; 
 - final String failMessage ; 
 - 
 - / / That works fine on Linux / Unix , but . . . . 
 - / / It ' s not possible to make a directory / file unreadable in Windows NTFS for owner , that 
 - / / is why we use mock for testing on OS Windows . 
 - / / http : / / stackoverflow . com / a / 4354686 
 - / / https : / / github . com / google / google - oauth - java - client / issues / 55 # issuecomment - 69403681 
 - if ( System . getProperty ( " os . name " ) . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { 
 - / / We use mock on Windows just to satisfy coverage rate 
 - cache = mock ( PropertyCacheFile . class ) ; 
 - final String mockExceptionMessage = " . . . cache " ; 
 - final AccessDeniedException mockException = 
 - new AccessDeniedException ( mockExceptionMessage ) ; 
 - doThrow ( new IllegalStateException ( mockException ) ) . when ( cache ) . persist ( ) ; 
 - failMessage = " AccessDeniedException is expected since we use the mock object . " ; 
 - 
 - } 
 - else { 
 - final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 - final File directory = temporaryFolder . newFolder ( " directory " ) ; 
 - directory . setReadable ( true , false ) ; 
 - directory . setWritable ( false , false ) ; 
 - final String filePath = String . format ( Locale . getDefault ( ) , " % s % 2 $ sscache % 2 $ stemp . cache " , 
 - directory . getAbsolutePath ( ) , File . separator ) ; 
 - cache = new PropertyCacheFile ( config , filePath ) ; 
 - failMessage = " AccessDeniedException is expected since directory is readonly . " ; 
 - } 
 - 
 - try { 
 - cache . persist ( ) ; 
 - fail ( failMessage ) ; 
 - } 
 - catch ( IllegalStateException ex ) { 
 - assertTrue ( ex . getCause ( ) instanceof AccessDeniedException ) ; 
 - assertThat ( ex . getMessage ( ) , endsWith ( " cache " ) ) ; 
 - } 
 - } 
 - 
 - @ Test 
 @ SuppressWarnings ( " unchecked " ) 
 public void testExceptionNoSuchAlgorithmException ( ) throws Exception { 

