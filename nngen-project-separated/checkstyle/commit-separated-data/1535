BLEU SCORE: 0.8070557274927982

TEST MSG: Issue # 2161 : unify test input locations for coding package
GENERATED MSG: Issue # 2161 : unify test input locations for naming package

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheckTest . java <nl> index 8123101 . . ed34c92 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheckTest . java <nl> @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . AvoidInlineConditionalsCheck . MSG _ KEY ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 29 , 15 + 32 , 21 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class AvoidInlineConditionalsCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testIt ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( AvoidInlineConditionalsCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 97 : 29 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 98 : 20 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 150 : 34 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 32 : 29 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 33 : 20 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 46 : 34 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> index 5f3630c . . 75232ab 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> @ @ - 24 , 6 + 24 , 9 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . DeclarationOrderChec <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . DeclarationOrderCheck . MSG _ INSTANCE ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . DeclarationOrderCheck . MSG _ STATIC ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 34 , 6 + 37 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class DeclarationOrderCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testDefault ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> @ @ - 68 , 7 + 77 , 7 @ @ public class DeclarationOrderCheckTest <nl> " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> " 182 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " coding / InputDeclarationOrder . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 87 , 7 + 96 , 7 @ @ public class DeclarationOrderCheckTest <nl> " 152 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , <nl> " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " coding / InputDeclarationOrder . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 124 , 7 + 133 , 7 @ @ public class DeclarationOrderCheckTest <nl> " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> " 182 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " coding / InputDeclarationOrder . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 162 , 5 + 171 , 4 @ @ public class DeclarationOrderCheckTest <nl> DeclarationOrderCheck check = new DeclarationOrderCheck ( ) ; <nl> check . visitToken ( array ) ; <nl> } <nl> - <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheckTest . java <nl> index 84c0104 . . 2c55ba1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheckTest . java <nl> @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . EmptyStatementCheck . MSG _ KEY ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 29 , 6 + 32 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class EmptyStatementCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testEmptyStatements ( ) <nl> throws Exception { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java <nl> index 37de5fd . . b412a91 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java <nl> @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . EqualsHashCodeCheck . MSG _ KEY ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 30 , 14 + 33 , 20 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class EqualsHashCodeCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testIt ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( EqualsHashCodeCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 126 : 9 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 163 : 13 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 191 : 9 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 57 : 9 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 94 : 13 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 122 : 9 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> } <nl> @ @ - 47 , 7 + 56 , 7 @ @ public class EqualsHashCodeCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( EqualsHashCodeCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " coding / InputEqualsHashCodeCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputEqualsHashCodeCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> index 33e782d . . 1a065ab 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> @ @ - 44 , 18 + 44 , 18 @ @ public class IllegalInstantiationCheckTest <nl> checkConfig . addAttribute ( <nl> " classes " , <nl> " java . lang . Boolean , " <nl> - + " com . puppycrawl . tools . checkstyle . InputModifier , " <nl> + + " com . puppycrawl . tools . checkstyle . checks . coding . InputModifier , " <nl> + " java . io . File , " <nl> + " java . awt . Color " ) ; <nl> final String [ ] expected = { <nl> " 19 : 21 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , <nl> " 24 : 21 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , <nl> " 31 : 16 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , <nl> - " 38 : 21 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . InputModifier " ) , <nl> + " 38 : 21 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . checks . coding . InputModifier " ) , <nl> " 41 : 18 : " + getCheckMessage ( MSG _ KEY , " java . io . File " ) , <nl> " 44 : 21 : " + getCheckMessage ( MSG _ KEY , " java . awt . Color " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " checks / coding / InputSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> index a5f4ddb . . 7a29a02 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> @ @ - 124 , 9 + 124 , 9 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( OneTopLevelClassCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 83 : " + getCheckMessage ( MSG _ KEY , " InputDeclarationOrderEnum " ) , <nl> + " 10 : " + getCheckMessage ( MSG _ KEY , " InputDeclarationOrderEnum " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputDeclarationOrder . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " checks " + File . separator + " design " + File . separator + " InputDeclarationOrder . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrder . java <nl> new file mode 100644 <nl> index 0000000 . . 90a6569 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrder . java <nl> @ @ - 0 , 0 + 1 , 184 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputDeclarationOrder <nl> + { <nl> + static final int FOO2 = 3 ; <nl> + <nl> + / / error public before package <nl> + public static final int FOO = 3 ; <nl> + <nl> + private static final int FOO3 = 3 ; <nl> + <nl> + / / eror public before package and private <nl> + public static final int FOO4 = 3 ; <nl> + <nl> + private static final String ERROR = " error " ; <nl> + <nl> + / / error protected before private <nl> + protected static final String ERROR1 = " error " ; <nl> + <nl> + / / error public before private <nl> + public static final String WARNING = " warning " ; <nl> + <nl> + private int mMaxInitVars = 3 ; <nl> + <nl> + / / error statics should be before instance members <nl> + / / error publics before private <nl> + public static final int MAX _ ITER _ VARS = 3 ; <nl> + <nl> + private class InnerClass <nl> + { <nl> + private static final int INNER _ FOO = 2 ; <nl> + <nl> + / / error public before private <nl> + public static final int INNER _ FOO2 = 2 ; <nl> + <nl> + public InnerClass ( ) <nl> + { <nl> + int foo = INNER _ FOO ; <nl> + foo + = INNER _ FOO2 ; <nl> + foo + = INNER _ FOO3 ; <nl> + } <nl> + <nl> + / / error member variables should be before methods or ctors <nl> + / / error public before private <nl> + public static final int INNER _ FOO3 = 2 ; <nl> + } <nl> + <nl> + public int getFoo1 ( ) <nl> + { <nl> + return mFoo ; <nl> + } <nl> + <nl> + / / error ctors before methods <nl> + public InputDeclarationOrder ( ) <nl> + { <nl> + String foo = ERROR ; <nl> + foo + = ERROR1 ; <nl> + foo + = WARNING ; <nl> + int fooInt = mMaxInitVars ; <nl> + fooInt + = MAX _ ITER _ VARS ; <nl> + fooInt + = mFoo ; <nl> + } <nl> + <nl> + public static int getFoo2 ( ) <nl> + { <nl> + return 13 ; <nl> + } <nl> + <nl> + public int getFoo ( ) <nl> + { <nl> + return mFoo ; <nl> + } <nl> + <nl> + private static int getFoo21 ( ) <nl> + { <nl> + return 14 ; <nl> + } <nl> + <nl> + / / error member variables should be before methods or ctors <nl> + private int mFoo = 0 ; <nl> + } <nl> + <nl> + enum InputDeclarationOrderEnum <nl> + { <nl> + ENUM _ VALUE _ 1 , <nl> + ENUM _ VALUE _ 2 , <nl> + ENUM _ VALUE _ 3 <nl> + { <nl> + private static final int INNER _ FOO = 2 ; <nl> + <nl> + / / error public before private <nl> + public static final int INNER _ FOO2 = 2 ; <nl> + <nl> + public void doIt ( ) <nl> + { <nl> + } <nl> + <nl> + / / error member variables should be before methods or ctors <nl> + / / error public before private <nl> + public static final int INNER _ FOO3 = 2 ; <nl> + } ; <nl> + <nl> + static final int FOO2 = 3 ; <nl> + <nl> + / / error public before package <nl> + public static final int FOO = 3 ; <nl> + <nl> + private static final int FOO3 = 3 ; <nl> + <nl> + / / eror public before package and private <nl> + public static final int FOO4 = 3 ; <nl> + <nl> + private static final String ERROR = " error " ; <nl> + <nl> + / / error protected before private <nl> + protected static final String ERROR1 = " error " ; <nl> + <nl> + / / error public before private <nl> + public static final String WARNING = " warning " ; <nl> + <nl> + private int mMaxInitVars = 3 ; <nl> + <nl> + / / error statics should be before instance members <nl> + / / error publics before private <nl> + public static final int MAX _ ITER _ VARS = 3 ; <nl> + <nl> + private class InnerClass <nl> + { <nl> + private static final int INNER _ FOO = 2 ; <nl> + <nl> + / / error public before private <nl> + public static final int INNER _ FOO2 = 2 ; <nl> + <nl> + public InnerClass ( ) <nl> + { <nl> + int foo = INNER _ FOO ; <nl> + foo + = INNER _ FOO2 ; <nl> + foo + = INNER _ FOO3 ; <nl> + } <nl> + <nl> + / / error member variables should be before methods or ctors <nl> + / / error public before private <nl> + public static final int INNER _ FOO3 = 2 ; <nl> + } <nl> + <nl> + public int getFoo1 ( ) <nl> + { <nl> + return mFoo ; <nl> + } <nl> + <nl> + / / error ctors before methods <nl> + InputDeclarationOrderEnum ( ) <nl> + { <nl> + String foo = ERROR ; <nl> + foo + = ERROR1 ; <nl> + foo + = WARNING ; <nl> + int fooInt = mMaxInitVars ; <nl> + fooInt + = MAX _ ITER _ VARS ; <nl> + fooInt + = mFoo ; <nl> + } <nl> + <nl> + public static int getFoo2 ( ) <nl> + { <nl> + return 2 ; <nl> + } <nl> + <nl> + public int getFoo ( ) <nl> + { <nl> + return mFoo ; <nl> + } <nl> + <nl> + private static int getFoo21 ( ) <nl> + { <nl> + return 1 ; <nl> + } <nl> + <nl> + / / error member variables should be before methods or ctors <nl> + private int mFoo = 0 ; <nl> + <nl> + class AsyncProcess { <nl> + private final int startLogErrorsCnt = 0 ; <nl> + protected final int maxTotalConcurrentTasks = 0 ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEmptyStatement . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEmptyStatement . java <nl> new file mode 100644 <nl> index 0000000 . . 2407c50 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEmptyStatement . java <nl> @ @ - 0 , 0 + 1 , 83 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + / * * <nl> + * Input class for testing EmptyStatementCheck <nl> + * @ author Rick Giles <nl> + * @ version 5 - May - 2003 <nl> + * / <nl> + public class InputEmptyStatement <nl> + { <nl> + public InputEmptyStatement ( ) <nl> + { <nl> + ; <nl> + } <nl> + <nl> + public void EmptyMethod ( ) <nl> + { <nl> + ; <nl> + } <nl> + <nl> + public void EmptyStatements ( boolean cond ) <nl> + { <nl> + for ( ; cond ; ) ; <nl> + <nl> + for ( ; cond ; ) <nl> + { <nl> + ; <nl> + } <nl> + <nl> + if ( true ) ; <nl> + <nl> + if ( true ) <nl> + { <nl> + ; <nl> + } <nl> + <nl> + if ( cond ) <nl> + { <nl> + int i ; <nl> + } <nl> + <nl> + else <nl> + { <nl> + ; <nl> + } <nl> + <nl> + switch ( 1 ) <nl> + { <nl> + case 1 : <nl> + ; <nl> + default : <nl> + ; <nl> + } <nl> + <nl> + while ( cond ) ; <nl> + <nl> + while ( cond ) <nl> + { <nl> + ; <nl> + } <nl> + <nl> + do ; <nl> + while ( cond ) ; <nl> + <nl> + do <nl> + { <nl> + ; <nl> + } <nl> + while ( cond ) ; <nl> + <nl> + try <nl> + { <nl> + ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + ; <nl> + } <nl> + finally <nl> + { <nl> + ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCodeCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCodeCheck . java <nl> new file mode 100644 <nl> index 0000000 . . a6734fe <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCodeCheck . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputEqualsHashCodeCheck { <nl> + public boolean notEquals ( ) { <nl> + return true ; <nl> + } <nl> + <nl> + public boolean equals ( ) { <nl> + return false ; <nl> + } <nl> + <nl> + public boolean equals ( Object o1 ) { <nl> + return false ; <nl> + } <nl> + <nl> + private boolean equals ( Object o1 , Object o2 ) { <nl> + return false ; <nl> + } <nl> + <nl> + protected int notHashCode ( ) { <nl> + return 1 ; <nl> + } <nl> + <nl> + public int hashCode ( ) { <nl> + return 1 ; <nl> + } <nl> + <nl> + public int hashCode ( Object o1 ) { <nl> + return 1 ; <nl> + } <nl> + <nl> + private int hashCode ( Object o1 , Object o2 ) { <nl> + return 1 ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java <nl> new file mode 100644 <nl> index 0000000 . . 2cd27f3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java <nl> @ @ - 0 , 0 + 1 , 135 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + import java . io . * ; / / star import for instantiation tests <nl> + import java . awt . Dimension ; / / explicit import for instantiation tests <nl> + import java . awt . Color ; <nl> + <nl> + / * * <nl> + * Test case for detecting simple semantic errors . <nl> + * @ author Lars K ü hne <nl> + * * / <nl> + class InputSemantic <nl> + { <nl> + / * Boolean instantiation in a static initializer * / <nl> + static { <nl> + Boolean x = new Boolean ( true ) ; <nl> + } <nl> + <nl> + / * Boolean instantiation in a non - static initializer * / <nl> + { <nl> + Boolean x = new Boolean ( true ) ; <nl> + Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; <nl> + } <nl> + <nl> + / * * fully qualified Boolean instantiation in a method . * * / <nl> + Boolean getBoolean ( ) <nl> + { <nl> + return new java . lang . Boolean ( true ) ; <nl> + } <nl> + <nl> + void otherInstantiations ( ) <nl> + { <nl> + / / instantiation of classes in the same package <nl> + Object o1 = new InputBraces ( ) ; <nl> + Object o2 = new InputModifier ( ) ; <nl> + / / classes in another package with . * import <nl> + ByteArrayOutputStream s = new ByteArrayOutputStream ( ) ; <nl> + File f = new File ( " / tmp " ) ; <nl> + / / classes in another package with explicit import <nl> + Dimension dim = new Dimension ( ) ; <nl> + Color col = new Color ( 0 , 0 , 0 ) ; <nl> + } <nl> + <nl> + public class EqualsVsHashCode1 <nl> + { <nl> + public boolean equals ( int a ) / / wrong arg type , don ' t flag <nl> + { <nl> + return a = = 1 ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode2 <nl> + { <nl> + public boolean equals ( String a ) / / flag <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode3 <nl> + { <nl> + public boolean equals ( Object a ) / / don ' t flag <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + public int hashCode ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode4 <nl> + { <nl> + / / in anon inner class <nl> + ByteArrayOutputStream bos1 = new ByteArrayOutputStream ( ) <nl> + { <nl> + public boolean equals ( Object a ) / / don ' t flag <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + public int hashCode ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + } ; <nl> + <nl> + ByteArrayOutputStream bos2 = new ByteArrayOutputStream ( ) <nl> + { <nl> + public boolean equals ( Object a ) / / flag <nl> + { <nl> + return true ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + public void triggerEmptyBlockWithoutBlock ( ) <nl> + { <nl> + / / an if statement without a block to increase test coverage <nl> + if ( true ) <nl> + return ; <nl> + } <nl> + <nl> + / / empty instance initializer <nl> + { <nl> + } <nl> + <nl> + public class EqualsVsHashCode5 <nl> + { <nl> + public < A > boolean equals ( int a ) / / wrong arg type , don ' t flag even with generics <nl> + { <nl> + return a = = 1 ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode6 <nl> + { <nl> + public < A > boolean equals ( Comparable < A > a ) / / flag , weven with generics <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> + private class InputBraces { <nl> + <nl> + } <nl> + <nl> + private class InputModifier { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputWhitespace . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputWhitespace . java <nl> new file mode 100644 <nl> index 0000000 . . f7ba5f5 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputWhitespace . java <nl> @ @ - 0 , 0 + 1 , 54 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl <nl> + . tools . <nl> + checkstyle . checks . coding ; <nl> + <nl> + / * * <nl> + * Class for testing inline conditionals . <nl> + * error missing author tag <nl> + * * / <nl> + class InputWhitespace <nl> + { <nl> + / * * method * * / <nl> + void method1 ( ) <nl> + { <nl> + final int a = 1 ; <nl> + int b = 1 ; / / Ignore 1 <nl> + b = 1 ; / / Ignore 1 <nl> + b + = 1 ; / / Ignore 1 <nl> + b - = - 1 + ( + b ) ; / / Ignore 2 <nl> + b = b + + + b - - ; / / Ignore 1 <nl> + b = + + b - - - b ; / / Ignore 1 <nl> + } <nl> + <nl> + private int mVar4 = 1 ; <nl> + <nl> + / * * test questions * * / <nl> + private void testQuestions ( ) <nl> + { <nl> + boolean b = ( 1 = = 2 ) ? true : false ; <nl> + b = ( 1 = = 2 ) ? false : true ; <nl> + } <nl> + <nl> + / * * assert statement test * / <nl> + public void assertTest ( ) <nl> + { <nl> + / / OK <nl> + assert true ; <nl> + <nl> + / / OK <nl> + assert true : " Whups " ; <nl> + <nl> + / / evil colons , should be OK <nl> + assert " OK " . equals ( null ) ? false : true : " Whups " ; <nl> + <nl> + / / missing WS around assert <nl> + assert ( true ) ; <nl> + <nl> + / / missing WS around colon <nl> + assert true : " Whups " ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDeclarationOrder . java <nl> new file mode 100644 <nl> index 0000000 . . d47b8e8 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDeclarationOrder . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + public class InputDeclarationOrder <nl> + { <nl> + private class InnerClass <nl> + { <nl> + } <nl> + } <nl> + <nl> + enum InputDeclarationOrderEnum <nl> + { <nl> + ENUM _ VALUE _ 1 ; <nl> + <nl> + class AsyncProcess { <nl> + private final int startLogErrorsCnt = 0 ; <nl> + protected final int maxTotalConcurrentTasks = 0 ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputDeclarationOrder . java <nl> deleted file mode 100644 <nl> index c3aa136 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputDeclarationOrder . java <nl> + + + / dev / null <nl> @ @ - 1 , 184 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - public class InputDeclarationOrder <nl> - { <nl> - static final int FOO2 = 3 ; <nl> - <nl> - / / error public before package <nl> - public static final int FOO = 3 ; <nl> - <nl> - private static final int FOO3 = 3 ; <nl> - <nl> - / / eror public before package and private <nl> - public static final int FOO4 = 3 ; <nl> - <nl> - private static final String ERROR = " error " ; <nl> - <nl> - / / error protected before private <nl> - protected static final String ERROR1 = " error " ; <nl> - <nl> - / / error public before private <nl> - public static final String WARNING = " warning " ; <nl> - <nl> - private int mMaxInitVars = 3 ; <nl> - <nl> - / / error statics should be before instance members <nl> - / / error publics before private <nl> - public static final int MAX _ ITER _ VARS = 3 ; <nl> - <nl> - private class InnerClass <nl> - { <nl> - private static final int INNER _ FOO = 2 ; <nl> - <nl> - / / error public before private <nl> - public static final int INNER _ FOO2 = 2 ; <nl> - <nl> - public InnerClass ( ) <nl> - { <nl> - int foo = INNER _ FOO ; <nl> - foo + = INNER _ FOO2 ; <nl> - foo + = INNER _ FOO3 ; <nl> - } <nl> - <nl> - / / error member variables should be before methods or ctors <nl> - / / error public before private <nl> - public static final int INNER _ FOO3 = 2 ; <nl> - } <nl> - <nl> - public int getFoo1 ( ) <nl> - { <nl> - return mFoo ; <nl> - } <nl> - <nl> - / / error ctors before methods <nl> - public InputDeclarationOrder ( ) <nl> - { <nl> - String foo = ERROR ; <nl> - foo + = ERROR1 ; <nl> - foo + = WARNING ; <nl> - int fooInt = mMaxInitVars ; <nl> - fooInt + = MAX _ ITER _ VARS ; <nl> - fooInt + = mFoo ; <nl> - } <nl> - <nl> - public static int getFoo2 ( ) <nl> - { <nl> - return 13 ; <nl> - } <nl> - <nl> - public int getFoo ( ) <nl> - { <nl> - return mFoo ; <nl> - } <nl> - <nl> - private static int getFoo21 ( ) <nl> - { <nl> - return 14 ; <nl> - } <nl> - <nl> - / / error member variables should be before methods or ctors <nl> - private int mFoo = 0 ; <nl> - } <nl> - <nl> - enum InputDeclarationOrderEnum <nl> - { <nl> - ENUM _ VALUE _ 1 , <nl> - ENUM _ VALUE _ 2 , <nl> - ENUM _ VALUE _ 3 <nl> - { <nl> - private static final int INNER _ FOO = 2 ; <nl> - <nl> - / / error public before private <nl> - public static final int INNER _ FOO2 = 2 ; <nl> - <nl> - public void doIt ( ) <nl> - { <nl> - } <nl> - <nl> - / / error member variables should be before methods or ctors <nl> - / / error public before private <nl> - public static final int INNER _ FOO3 = 2 ; <nl> - } ; <nl> - <nl> - static final int FOO2 = 3 ; <nl> - <nl> - / / error public before package <nl> - public static final int FOO = 3 ; <nl> - <nl> - private static final int FOO3 = 3 ; <nl> - <nl> - / / eror public before package and private <nl> - public static final int FOO4 = 3 ; <nl> - <nl> - private static final String ERROR = " error " ; <nl> - <nl> - / / error protected before private <nl> - protected static final String ERROR1 = " error " ; <nl> - <nl> - / / error public before private <nl> - public static final String WARNING = " warning " ; <nl> - <nl> - private int mMaxInitVars = 3 ; <nl> - <nl> - / / error statics should be before instance members <nl> - / / error publics before private <nl> - public static final int MAX _ ITER _ VARS = 3 ; <nl> - <nl> - private class InnerClass <nl> - { <nl> - private static final int INNER _ FOO = 2 ; <nl> - <nl> - / / error public before private <nl> - public static final int INNER _ FOO2 = 2 ; <nl> - <nl> - public InnerClass ( ) <nl> - { <nl> - int foo = INNER _ FOO ; <nl> - foo + = INNER _ FOO2 ; <nl> - foo + = INNER _ FOO3 ; <nl> - } <nl> - <nl> - / / error member variables should be before methods or ctors <nl> - / / error public before private <nl> - public static final int INNER _ FOO3 = 2 ; <nl> - } <nl> - <nl> - public int getFoo1 ( ) <nl> - { <nl> - return mFoo ; <nl> - } <nl> - <nl> - / / error ctors before methods <nl> - InputDeclarationOrderEnum ( ) <nl> - { <nl> - String foo = ERROR ; <nl> - foo + = ERROR1 ; <nl> - foo + = WARNING ; <nl> - int fooInt = mMaxInitVars ; <nl> - fooInt + = MAX _ ITER _ VARS ; <nl> - fooInt + = mFoo ; <nl> - } <nl> - <nl> - public static int getFoo2 ( ) <nl> - { <nl> - return 2 ; <nl> - } <nl> - <nl> - public int getFoo ( ) <nl> - { <nl> - return mFoo ; <nl> - } <nl> - <nl> - private static int getFoo21 ( ) <nl> - { <nl> - return 1 ; <nl> - } <nl> - <nl> - / / error member variables should be before methods or ctors <nl> - private int mFoo = 0 ; <nl> - <nl> - class AsyncProcess { <nl> - private final int startLogErrorsCnt = 0 ; <nl> - protected final int maxTotalConcurrentTasks = 0 ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputEqualsHashCodeCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputEqualsHashCodeCheck . java <nl> deleted file mode 100644 <nl> index d3bfa45 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputEqualsHashCodeCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 35 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - public class InputEqualsHashCodeCheck { <nl> - public boolean notEquals ( ) { <nl> - return true ; <nl> - } <nl> - <nl> - public boolean equals ( ) { <nl> - return false ; <nl> - } <nl> - <nl> - public boolean equals ( Object o1 ) { <nl> - return false ; <nl> - } <nl> - <nl> - private boolean equals ( Object o1 , Object o2 ) { <nl> - return false ; <nl> - } <nl> - <nl> - protected int notHashCode ( ) { <nl> - return 1 ; <nl> - } <nl> - <nl> - public int hashCode ( ) { <nl> - return 1 ; <nl> - } <nl> - <nl> - public int hashCode ( Object o1 ) { <nl> - return 1 ; <nl> - } <nl> - <nl> - private int hashCode ( Object o1 , Object o2 ) { <nl> - return 1 ; <nl> - } <nl> - } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> index 89a41fc . . 2a550da 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> @ @ - 539 , 7 + 539 , 7 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> createChecker ( checkConfig ) ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator <nl> + verify ( checkConfig , getPath ( " checks " + File . separator + " imports " + File . separator <nl> + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> new file mode 100644 <nl> index 0000000 . . 10b8399 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; <nl> + <nl> + / / every import from javadoc package has comment in brackets indicating presence of keywords <nl> + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) <nl> + <nl> + / / STANDARD - keyword Check <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) <nl> + <nl> + / / SPECIAL _ IMPORTS - keyword Tag <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) <nl> + <nl> + import com . puppycrawl . tools . * ; <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) <nl> + <nl> + public class InputCustomImportOrder _ OverlappingPatterns { <nl> + } <nl> + / * <nl> + test : testRulesOrder _ ThirdBeforeSame ( ) <nl> + configuration : <nl> + checkConfig . addAttribute ( " customImportOrderRules " , <nl> + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; <nl> + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> + * / <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> deleted file mode 100644 <nl> index 10b8399 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> + + + / dev / null <nl> @ @ - 1 , 37 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; <nl> - <nl> - / / every import from javadoc package has comment in brackets indicating presence of keywords <nl> - / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) <nl> - <nl> - / / STANDARD - keyword Check <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) <nl> - <nl> - / / SPECIAL _ IMPORTS - keyword Tag <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) <nl> - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) <nl> - <nl> - import com . puppycrawl . tools . * ; <nl> - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) <nl> - <nl> - public class InputCustomImportOrder _ OverlappingPatterns { <nl> - } <nl> - / * <nl> - test : testRulesOrder _ ThirdBeforeSame ( ) <nl> - configuration : <nl> - checkConfig . addAttribute ( " customImportOrderRules " , <nl> - " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; <nl> - checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> - * /

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheckTest . java 
 index 8123101 . . ed34c92 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheckTest . java 
 @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . AvoidInlineConditionalsCheck . MSG _ KEY ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 @ @ - 29 , 15 + 32 , 21 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class AvoidInlineConditionalsCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testIt ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( AvoidInlineConditionalsCheck . class ) ; 
 final String [ ] expected = { 
 - " 97 : 29 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 98 : 20 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 150 : 34 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 32 : 29 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 33 : 20 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 46 : 34 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 index 5f3630c . . 75232ab 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 @ @ - 24 , 6 + 24 , 9 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . DeclarationOrderChec 
 import static com . puppycrawl . tools . checkstyle . checks . coding . DeclarationOrderCheck . MSG _ INSTANCE ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . DeclarationOrderCheck . MSG _ STATIC ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 @ @ - 34 , 6 + 37 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class DeclarationOrderCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testDefault ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 @ @ - 68 , 7 + 77 , 7 @ @ public class DeclarationOrderCheckTest 
 " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 " 182 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 } ; 
 - verify ( checkConfig , getPath ( " coding / InputDeclarationOrder . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 87 , 7 + 96 , 7 @ @ public class DeclarationOrderCheckTest 
 " 152 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , 
 " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 } ; 
 - verify ( checkConfig , getPath ( " coding / InputDeclarationOrder . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 124 , 7 + 133 , 7 @ @ public class DeclarationOrderCheckTest 
 " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 " 182 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 } ; 
 - verify ( checkConfig , getPath ( " coding / InputDeclarationOrder . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 162 , 5 + 171 , 4 @ @ public class DeclarationOrderCheckTest 
 DeclarationOrderCheck check = new DeclarationOrderCheck ( ) ; 
 check . visitToken ( array ) ; 
 } 
 - 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheckTest . java 
 index 84c0104 . . 2c55ba1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheckTest . java 
 @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . EmptyStatementCheck . MSG _ KEY ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 @ @ - 29 , 6 + 32 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class EmptyStatementCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testEmptyStatements ( ) 
 throws Exception { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java 
 index 37de5fd . . b412a91 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java 
 @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . EqualsHashCodeCheck . MSG _ KEY ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 30 , 14 + 33 , 20 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class EqualsHashCodeCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testIt ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( EqualsHashCodeCheck . class ) ; 
 final String [ ] expected = { 
 - " 126 : 9 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 163 : 13 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 191 : 9 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 57 : 9 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 94 : 13 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 122 : 9 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 } 
 @ @ - 47 , 7 + 56 , 7 @ @ public class EqualsHashCodeCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( EqualsHashCodeCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " coding / InputEqualsHashCodeCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputEqualsHashCodeCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 index 33e782d . . 1a065ab 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 @ @ - 44 , 18 + 44 , 18 @ @ public class IllegalInstantiationCheckTest 
 checkConfig . addAttribute ( 
 " classes " , 
 " java . lang . Boolean , " 
 - + " com . puppycrawl . tools . checkstyle . InputModifier , " 
 + + " com . puppycrawl . tools . checkstyle . checks . coding . InputModifier , " 
 + " java . io . File , " 
 + " java . awt . Color " ) ; 
 final String [ ] expected = { 
 " 19 : 21 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , 
 " 24 : 21 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , 
 " 31 : 16 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , 
 - " 38 : 21 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . InputModifier " ) , 
 + " 38 : 21 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . checks . coding . InputModifier " ) , 
 " 41 : 18 : " + getCheckMessage ( MSG _ KEY , " java . io . File " ) , 
 " 44 : 21 : " + getCheckMessage ( MSG _ KEY , " java . awt . Color " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " checks / coding / InputSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 index a5f4ddb . . 7a29a02 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 @ @ - 124 , 9 + 124 , 9 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( OneTopLevelClassCheck . class ) ; 
 final String [ ] expected = { 
 - " 83 : " + getCheckMessage ( MSG _ KEY , " InputDeclarationOrderEnum " ) , 
 + " 10 : " + getCheckMessage ( MSG _ KEY , " InputDeclarationOrderEnum " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputDeclarationOrder . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " checks " + File . separator + " design " + File . separator + " InputDeclarationOrder . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrder . java 
 new file mode 100644 
 index 0000000 . . 90a6569 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrder . java 
 @ @ - 0 , 0 + 1 , 184 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputDeclarationOrder 
 + { 
 + static final int FOO2 = 3 ; 
 + 
 + / / error public before package 
 + public static final int FOO = 3 ; 
 + 
 + private static final int FOO3 = 3 ; 
 + 
 + / / eror public before package and private 
 + public static final int FOO4 = 3 ; 
 + 
 + private static final String ERROR = " error " ; 
 + 
 + / / error protected before private 
 + protected static final String ERROR1 = " error " ; 
 + 
 + / / error public before private 
 + public static final String WARNING = " warning " ; 
 + 
 + private int mMaxInitVars = 3 ; 
 + 
 + / / error statics should be before instance members 
 + / / error publics before private 
 + public static final int MAX _ ITER _ VARS = 3 ; 
 + 
 + private class InnerClass 
 + { 
 + private static final int INNER _ FOO = 2 ; 
 + 
 + / / error public before private 
 + public static final int INNER _ FOO2 = 2 ; 
 + 
 + public InnerClass ( ) 
 + { 
 + int foo = INNER _ FOO ; 
 + foo + = INNER _ FOO2 ; 
 + foo + = INNER _ FOO3 ; 
 + } 
 + 
 + / / error member variables should be before methods or ctors 
 + / / error public before private 
 + public static final int INNER _ FOO3 = 2 ; 
 + } 
 + 
 + public int getFoo1 ( ) 
 + { 
 + return mFoo ; 
 + } 
 + 
 + / / error ctors before methods 
 + public InputDeclarationOrder ( ) 
 + { 
 + String foo = ERROR ; 
 + foo + = ERROR1 ; 
 + foo + = WARNING ; 
 + int fooInt = mMaxInitVars ; 
 + fooInt + = MAX _ ITER _ VARS ; 
 + fooInt + = mFoo ; 
 + } 
 + 
 + public static int getFoo2 ( ) 
 + { 
 + return 13 ; 
 + } 
 + 
 + public int getFoo ( ) 
 + { 
 + return mFoo ; 
 + } 
 + 
 + private static int getFoo21 ( ) 
 + { 
 + return 14 ; 
 + } 
 + 
 + / / error member variables should be before methods or ctors 
 + private int mFoo = 0 ; 
 + } 
 + 
 + enum InputDeclarationOrderEnum 
 + { 
 + ENUM _ VALUE _ 1 , 
 + ENUM _ VALUE _ 2 , 
 + ENUM _ VALUE _ 3 
 + { 
 + private static final int INNER _ FOO = 2 ; 
 + 
 + / / error public before private 
 + public static final int INNER _ FOO2 = 2 ; 
 + 
 + public void doIt ( ) 
 + { 
 + } 
 + 
 + / / error member variables should be before methods or ctors 
 + / / error public before private 
 + public static final int INNER _ FOO3 = 2 ; 
 + } ; 
 + 
 + static final int FOO2 = 3 ; 
 + 
 + / / error public before package 
 + public static final int FOO = 3 ; 
 + 
 + private static final int FOO3 = 3 ; 
 + 
 + / / eror public before package and private 
 + public static final int FOO4 = 3 ; 
 + 
 + private static final String ERROR = " error " ; 
 + 
 + / / error protected before private 
 + protected static final String ERROR1 = " error " ; 
 + 
 + / / error public before private 
 + public static final String WARNING = " warning " ; 
 + 
 + private int mMaxInitVars = 3 ; 
 + 
 + / / error statics should be before instance members 
 + / / error publics before private 
 + public static final int MAX _ ITER _ VARS = 3 ; 
 + 
 + private class InnerClass 
 + { 
 + private static final int INNER _ FOO = 2 ; 
 + 
 + / / error public before private 
 + public static final int INNER _ FOO2 = 2 ; 
 + 
 + public InnerClass ( ) 
 + { 
 + int foo = INNER _ FOO ; 
 + foo + = INNER _ FOO2 ; 
 + foo + = INNER _ FOO3 ; 
 + } 
 + 
 + / / error member variables should be before methods or ctors 
 + / / error public before private 
 + public static final int INNER _ FOO3 = 2 ; 
 + } 
 + 
 + public int getFoo1 ( ) 
 + { 
 + return mFoo ; 
 + } 
 + 
 + / / error ctors before methods 
 + InputDeclarationOrderEnum ( ) 
 + { 
 + String foo = ERROR ; 
 + foo + = ERROR1 ; 
 + foo + = WARNING ; 
 + int fooInt = mMaxInitVars ; 
 + fooInt + = MAX _ ITER _ VARS ; 
 + fooInt + = mFoo ; 
 + } 
 + 
 + public static int getFoo2 ( ) 
 + { 
 + return 2 ; 
 + } 
 + 
 + public int getFoo ( ) 
 + { 
 + return mFoo ; 
 + } 
 + 
 + private static int getFoo21 ( ) 
 + { 
 + return 1 ; 
 + } 
 + 
 + / / error member variables should be before methods or ctors 
 + private int mFoo = 0 ; 
 + 
 + class AsyncProcess { 
 + private final int startLogErrorsCnt = 0 ; 
 + protected final int maxTotalConcurrentTasks = 0 ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEmptyStatement . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEmptyStatement . java 
 new file mode 100644 
 index 0000000 . . 2407c50 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEmptyStatement . java 
 @ @ - 0 , 0 + 1 , 83 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + / * * 
 + * Input class for testing EmptyStatementCheck 
 + * @ author Rick Giles 
 + * @ version 5 - May - 2003 
 + * / 
 + public class InputEmptyStatement 
 + { 
 + public InputEmptyStatement ( ) 
 + { 
 + ; 
 + } 
 + 
 + public void EmptyMethod ( ) 
 + { 
 + ; 
 + } 
 + 
 + public void EmptyStatements ( boolean cond ) 
 + { 
 + for ( ; cond ; ) ; 
 + 
 + for ( ; cond ; ) 
 + { 
 + ; 
 + } 
 + 
 + if ( true ) ; 
 + 
 + if ( true ) 
 + { 
 + ; 
 + } 
 + 
 + if ( cond ) 
 + { 
 + int i ; 
 + } 
 + 
 + else 
 + { 
 + ; 
 + } 
 + 
 + switch ( 1 ) 
 + { 
 + case 1 : 
 + ; 
 + default : 
 + ; 
 + } 
 + 
 + while ( cond ) ; 
 + 
 + while ( cond ) 
 + { 
 + ; 
 + } 
 + 
 + do ; 
 + while ( cond ) ; 
 + 
 + do 
 + { 
 + ; 
 + } 
 + while ( cond ) ; 
 + 
 + try 
 + { 
 + ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + ; 
 + } 
 + finally 
 + { 
 + ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCodeCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCodeCheck . java 
 new file mode 100644 
 index 0000000 . . a6734fe 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsHashCodeCheck . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputEqualsHashCodeCheck { 
 + public boolean notEquals ( ) { 
 + return true ; 
 + } 
 + 
 + public boolean equals ( ) { 
 + return false ; 
 + } 
 + 
 + public boolean equals ( Object o1 ) { 
 + return false ; 
 + } 
 + 
 + private boolean equals ( Object o1 , Object o2 ) { 
 + return false ; 
 + } 
 + 
 + protected int notHashCode ( ) { 
 + return 1 ; 
 + } 
 + 
 + public int hashCode ( ) { 
 + return 1 ; 
 + } 
 + 
 + public int hashCode ( Object o1 ) { 
 + return 1 ; 
 + } 
 + 
 + private int hashCode ( Object o1 , Object o2 ) { 
 + return 1 ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java 
 new file mode 100644 
 index 0000000 . . 2cd27f3 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java 
 @ @ - 0 , 0 + 1 , 135 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + import java . io . * ; / / star import for instantiation tests 
 + import java . awt . Dimension ; / / explicit import for instantiation tests 
 + import java . awt . Color ; 
 + 
 + / * * 
 + * Test case for detecting simple semantic errors . 
 + * @ author Lars K ü hne 
 + * * / 
 + class InputSemantic 
 + { 
 + / * Boolean instantiation in a static initializer * / 
 + static { 
 + Boolean x = new Boolean ( true ) ; 
 + } 
 + 
 + / * Boolean instantiation in a non - static initializer * / 
 + { 
 + Boolean x = new Boolean ( true ) ; 
 + Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; 
 + } 
 + 
 + / * * fully qualified Boolean instantiation in a method . * * / 
 + Boolean getBoolean ( ) 
 + { 
 + return new java . lang . Boolean ( true ) ; 
 + } 
 + 
 + void otherInstantiations ( ) 
 + { 
 + / / instantiation of classes in the same package 
 + Object o1 = new InputBraces ( ) ; 
 + Object o2 = new InputModifier ( ) ; 
 + / / classes in another package with . * import 
 + ByteArrayOutputStream s = new ByteArrayOutputStream ( ) ; 
 + File f = new File ( " / tmp " ) ; 
 + / / classes in another package with explicit import 
 + Dimension dim = new Dimension ( ) ; 
 + Color col = new Color ( 0 , 0 , 0 ) ; 
 + } 
 + 
 + public class EqualsVsHashCode1 
 + { 
 + public boolean equals ( int a ) / / wrong arg type , don ' t flag 
 + { 
 + return a = = 1 ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode2 
 + { 
 + public boolean equals ( String a ) / / flag 
 + { 
 + return true ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode3 
 + { 
 + public boolean equals ( Object a ) / / don ' t flag 
 + { 
 + return true ; 
 + } 
 + 
 + public int hashCode ( ) 
 + { 
 + return 0 ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode4 
 + { 
 + / / in anon inner class 
 + ByteArrayOutputStream bos1 = new ByteArrayOutputStream ( ) 
 + { 
 + public boolean equals ( Object a ) / / don ' t flag 
 + { 
 + return true ; 
 + } 
 + 
 + public int hashCode ( ) 
 + { 
 + return 0 ; 
 + } 
 + } ; 
 + 
 + ByteArrayOutputStream bos2 = new ByteArrayOutputStream ( ) 
 + { 
 + public boolean equals ( Object a ) / / flag 
 + { 
 + return true ; 
 + } 
 + } ; 
 + } 
 + 
 + public void triggerEmptyBlockWithoutBlock ( ) 
 + { 
 + / / an if statement without a block to increase test coverage 
 + if ( true ) 
 + return ; 
 + } 
 + 
 + / / empty instance initializer 
 + { 
 + } 
 + 
 + public class EqualsVsHashCode5 
 + { 
 + public < A > boolean equals ( int a ) / / wrong arg type , don ' t flag even with generics 
 + { 
 + return a = = 1 ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode6 
 + { 
 + public < A > boolean equals ( Comparable < A > a ) / / flag , weven with generics 
 + { 
 + return true ; 
 + } 
 + } 
 + 
 + private class InputBraces { 
 + 
 + } 
 + 
 + private class InputModifier { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputWhitespace . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputWhitespace . java 
 new file mode 100644 
 index 0000000 . . f7ba5f5 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputWhitespace . java 
 @ @ - 0 , 0 + 1 , 54 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl 
 + . tools . 
 + checkstyle . checks . coding ; 
 + 
 + / * * 
 + * Class for testing inline conditionals . 
 + * error missing author tag 
 + * * / 
 + class InputWhitespace 
 + { 
 + / * * method * * / 
 + void method1 ( ) 
 + { 
 + final int a = 1 ; 
 + int b = 1 ; / / Ignore 1 
 + b = 1 ; / / Ignore 1 
 + b + = 1 ; / / Ignore 1 
 + b - = - 1 + ( + b ) ; / / Ignore 2 
 + b = b + + + b - - ; / / Ignore 1 
 + b = + + b - - - b ; / / Ignore 1 
 + } 
 + 
 + private int mVar4 = 1 ; 
 + 
 + / * * test questions * * / 
 + private void testQuestions ( ) 
 + { 
 + boolean b = ( 1 = = 2 ) ? true : false ; 
 + b = ( 1 = = 2 ) ? false : true ; 
 + } 
 + 
 + / * * assert statement test * / 
 + public void assertTest ( ) 
 + { 
 + / / OK 
 + assert true ; 
 + 
 + / / OK 
 + assert true : " Whups " ; 
 + 
 + / / evil colons , should be OK 
 + assert " OK " . equals ( null ) ? false : true : " Whups " ; 
 + 
 + / / missing WS around assert 
 + assert ( true ) ; 
 + 
 + / / missing WS around colon 
 + assert true : " Whups " ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDeclarationOrder . java 
 new file mode 100644 
 index 0000000 . . d47b8e8 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDeclarationOrder . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + public class InputDeclarationOrder 
 + { 
 + private class InnerClass 
 + { 
 + } 
 + } 
 + 
 + enum InputDeclarationOrderEnum 
 + { 
 + ENUM _ VALUE _ 1 ; 
 + 
 + class AsyncProcess { 
 + private final int startLogErrorsCnt = 0 ; 
 + protected final int maxTotalConcurrentTasks = 0 ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputDeclarationOrder . java 
 deleted file mode 100644 
 index c3aa136 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputDeclarationOrder . java 
 + + + / dev / null 
 @ @ - 1 , 184 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - public class InputDeclarationOrder 
 - { 
 - static final int FOO2 = 3 ; 
 - 
 - / / error public before package 
 - public static final int FOO = 3 ; 
 - 
 - private static final int FOO3 = 3 ; 
 - 
 - / / eror public before package and private 
 - public static final int FOO4 = 3 ; 
 - 
 - private static final String ERROR = " error " ; 
 - 
 - / / error protected before private 
 - protected static final String ERROR1 = " error " ; 
 - 
 - / / error public before private 
 - public static final String WARNING = " warning " ; 
 - 
 - private int mMaxInitVars = 3 ; 
 - 
 - / / error statics should be before instance members 
 - / / error publics before private 
 - public static final int MAX _ ITER _ VARS = 3 ; 
 - 
 - private class InnerClass 
 - { 
 - private static final int INNER _ FOO = 2 ; 
 - 
 - / / error public before private 
 - public static final int INNER _ FOO2 = 2 ; 
 - 
 - public InnerClass ( ) 
 - { 
 - int foo = INNER _ FOO ; 
 - foo + = INNER _ FOO2 ; 
 - foo + = INNER _ FOO3 ; 
 - } 
 - 
 - / / error member variables should be before methods or ctors 
 - / / error public before private 
 - public static final int INNER _ FOO3 = 2 ; 
 - } 
 - 
 - public int getFoo1 ( ) 
 - { 
 - return mFoo ; 
 - } 
 - 
 - / / error ctors before methods 
 - public InputDeclarationOrder ( ) 
 - { 
 - String foo = ERROR ; 
 - foo + = ERROR1 ; 
 - foo + = WARNING ; 
 - int fooInt = mMaxInitVars ; 
 - fooInt + = MAX _ ITER _ VARS ; 
 - fooInt + = mFoo ; 
 - } 
 - 
 - public static int getFoo2 ( ) 
 - { 
 - return 13 ; 
 - } 
 - 
 - public int getFoo ( ) 
 - { 
 - return mFoo ; 
 - } 
 - 
 - private static int getFoo21 ( ) 
 - { 
 - return 14 ; 
 - } 
 - 
 - / / error member variables should be before methods or ctors 
 - private int mFoo = 0 ; 
 - } 
 - 
 - enum InputDeclarationOrderEnum 
 - { 
 - ENUM _ VALUE _ 1 , 
 - ENUM _ VALUE _ 2 , 
 - ENUM _ VALUE _ 3 
 - { 
 - private static final int INNER _ FOO = 2 ; 
 - 
 - / / error public before private 
 - public static final int INNER _ FOO2 = 2 ; 
 - 
 - public void doIt ( ) 
 - { 
 - } 
 - 
 - / / error member variables should be before methods or ctors 
 - / / error public before private 
 - public static final int INNER _ FOO3 = 2 ; 
 - } ; 
 - 
 - static final int FOO2 = 3 ; 
 - 
 - / / error public before package 
 - public static final int FOO = 3 ; 
 - 
 - private static final int FOO3 = 3 ; 
 - 
 - / / eror public before package and private 
 - public static final int FOO4 = 3 ; 
 - 
 - private static final String ERROR = " error " ; 
 - 
 - / / error protected before private 
 - protected static final String ERROR1 = " error " ; 
 - 
 - / / error public before private 
 - public static final String WARNING = " warning " ; 
 - 
 - private int mMaxInitVars = 3 ; 
 - 
 - / / error statics should be before instance members 
 - / / error publics before private 
 - public static final int MAX _ ITER _ VARS = 3 ; 
 - 
 - private class InnerClass 
 - { 
 - private static final int INNER _ FOO = 2 ; 
 - 
 - / / error public before private 
 - public static final int INNER _ FOO2 = 2 ; 
 - 
 - public InnerClass ( ) 
 - { 
 - int foo = INNER _ FOO ; 
 - foo + = INNER _ FOO2 ; 
 - foo + = INNER _ FOO3 ; 
 - } 
 - 
 - / / error member variables should be before methods or ctors 
 - / / error public before private 
 - public static final int INNER _ FOO3 = 2 ; 
 - } 
 - 
 - public int getFoo1 ( ) 
 - { 
 - return mFoo ; 
 - } 
 - 
 - / / error ctors before methods 
 - InputDeclarationOrderEnum ( ) 
 - { 
 - String foo = ERROR ; 
 - foo + = ERROR1 ; 
 - foo + = WARNING ; 
 - int fooInt = mMaxInitVars ; 
 - fooInt + = MAX _ ITER _ VARS ; 
 - fooInt + = mFoo ; 
 - } 
 - 
 - public static int getFoo2 ( ) 
 - { 
 - return 2 ; 
 - } 
 - 
 - public int getFoo ( ) 
 - { 
 - return mFoo ; 
 - } 
 - 
 - private static int getFoo21 ( ) 
 - { 
 - return 1 ; 
 - } 
 - 
 - / / error member variables should be before methods or ctors 
 - private int mFoo = 0 ; 
 - 
 - class AsyncProcess { 
 - private final int startLogErrorsCnt = 0 ; 
 - protected final int maxTotalConcurrentTasks = 0 ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputEqualsHashCodeCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputEqualsHashCodeCheck . java 
 deleted file mode 100644 
 index d3bfa45 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputEqualsHashCodeCheck . java 
 + + + / dev / null 
 @ @ - 1 , 35 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - public class InputEqualsHashCodeCheck { 
 - public boolean notEquals ( ) { 
 - return true ; 
 - } 
 - 
 - public boolean equals ( ) { 
 - return false ; 
 - } 
 - 
 - public boolean equals ( Object o1 ) { 
 - return false ; 
 - } 
 - 
 - private boolean equals ( Object o1 , Object o2 ) { 
 - return false ; 
 - } 
 - 
 - protected int notHashCode ( ) { 
 - return 1 ; 
 - } 
 - 
 - public int hashCode ( ) { 
 - return 1 ; 
 - } 
 - 
 - public int hashCode ( Object o1 ) { 
 - return 1 ; 
 - } 
 - 
 - private int hashCode ( Object o1 , Object o2 ) { 
 - return 1 ; 
 - } 
 - } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 index 89a41fc . . 2a550da 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 @ @ - 539 , 7 + 539 , 7 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 createChecker ( checkConfig ) ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator 
 + verify ( checkConfig , getPath ( " checks " + File . separator + " imports " + File . separator 
 + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 new file mode 100644 
 index 0000000 . . 10b8399 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; 
 + 
 + / / every import from javadoc package has comment in brackets indicating presence of keywords 
 + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) 
 + 
 + / / STANDARD - keyword Check 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) 
 + 
 + / / SPECIAL _ IMPORTS - keyword Tag 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) 
 + 
 + import com . puppycrawl . tools . * ; 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) 
 + 
 + public class InputCustomImportOrder _ OverlappingPatterns { 
 + } 
 + / * 
 + test : testRulesOrder _ ThirdBeforeSame ( ) 
 + configuration : 
 + checkConfig . addAttribute ( " customImportOrderRules " , 
 + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; 
 + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 + * / 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 deleted file mode 100644 
 index 10b8399 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . imports ; 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; 
 - 
 - / / every import from javadoc package has comment in brackets indicating presence of keywords 
 - / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) 
 - 
 - / / STANDARD - keyword Check 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) 
 - 
 - / / SPECIAL _ IMPORTS - keyword Tag 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) 
 - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) 
 - 
 - import com . puppycrawl . tools . * ; 
 - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) 
 - 
 - public class InputCustomImportOrder _ OverlappingPatterns { 
 - } 
 - / * 
 - test : testRulesOrder _ ThirdBeforeSame ( ) 
 - configuration : 
 - checkConfig . addAttribute ( " customImportOrderRules " , 
 - " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; 
 - checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 - * /
