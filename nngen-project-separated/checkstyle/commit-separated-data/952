BLEU SCORE: 0.8907171682201394

TEST MSG: Revert " infra : workaround for FileAlreadyExistsException : src / main / java / empty _ file at launch . generateCheckstyleReport ( launch . groovy : 93 ) "
GENERATED MSG: infra : workaround for FileAlreadyExistsException : src / main / java / empty _ file at launch . generateCheckstyleReport ( launch . groovy : 93 )

TEST DIFF (one line): diff - - git a / circle . yml b / circle . yml <nl> index 864e2b1 . . f09fc52 100644 <nl> - - - a / circle . yml <nl> + + + b / circle . yml <nl> @ @ - 18 , 7 + 18 , 7 @ @ machine : <nl> CMD1 : " cd contribution / checkstyle - tester " <nl> DEP1 : " & & sed - i ' ' ' s / ^ guava / # guava / ' projects - to - test - on . properties " <nl> # we need this to let pass ' mvn site ' on no - projects mode to download all dependecies <nl> - DEP2 : " & & rm src / main / java / empty _ file & & echo ' class ClassEmpty { } ' > src / main / java / EmptyClass . java " <nl> + DEP2 : " & & echo ' class ClassEmpty { } ' > src / main / java / EmptyClass . java " <nl> DEP3 : " & & / home / ubuntu / checkstyle / groovy - 2 . 4 . 7 / bin / groovy launch . groovy - - listOfProjects projects - to - test - on . properties - - config my _ check . xml " <nl> TESTER _ DEPENDENCIES : $ CMD1 $ DEP1 $ DEP2 $ DEP3 <nl> CMD2 : " & & sed - i ' ' ' s / ^ openjdk / # openjdk / ' projects - for - circle . properties "
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java <nl> index 7559961 . . 3264593 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java <nl> @ @ - 58 , 15 + 58 , 19 @ @ public class UnusedImportsCheck extends AbstractCheck { <nl> public static final String MSG _ KEY = " import . unused " ; <nl> <nl> / * * Regex to match class names . * / <nl> - private static final Pattern CLASS _ NAME = Pattern . compile ( <nl> + private static final Pattern CLASS _ NAME = CommonUtils . createPattern ( <nl> " ( ( : ? [ \ \ p { L } _ $ ] [ \ \ p { L } \ \ p { N } _ $ ] * \ \ . ) * [ \ \ p { L } _ $ ] [ \ \ p { L } \ \ p { N } _ $ ] * ) " ) ; <nl> / * * Regex to match the first class name . * / <nl> - private static final Pattern FIRST _ CLASS _ NAME = Pattern . compile ( <nl> + private static final Pattern FIRST _ CLASS _ NAME = CommonUtils . createPattern ( <nl> " ^ " + CLASS _ NAME ) ; <nl> / * * Regex to match argument names . * / <nl> - private static final Pattern ARGUMENT _ NAME = Pattern . compile ( <nl> + private static final Pattern ARGUMENT _ NAME = CommonUtils . createPattern ( <nl> " [ ( , ] \ \ s * " + CLASS _ NAME . pattern ( ) ) ; <nl> <nl> + / * * Regexp pattern to match java . lang package . * / <nl> + private static final Pattern JAVA _ LANG _ PACKAGE _ PATTERN = <nl> + CommonUtils . createPattern ( " ^ java \ \ . lang \ \ . [ a - zA - Z ] + $ " ) ; <nl> + <nl> / * * Suffix for the star import . * / <nl> private static final String STAR _ IMPORT _ SUFFIX = " . * " ; <nl> <nl> @ @ - 101 , 10 + 105 , 10 @ @ public class UnusedImportsCheck extends AbstractCheck { <nl> public void finishTree ( DetailAST rootAST ) { <nl> / / loop over all the imports to see if referenced . <nl> imports . stream ( ) <nl> - . filter ( imp - > ! referenced . contains ( CommonUtils . baseClassName ( imp . getText ( ) ) ) ) <nl> - . forEach ( imp - > log ( imp . getLineNo ( ) , <nl> - imp . getColumnNo ( ) , <nl> - MSG _ KEY , imp . getText ( ) ) ) ; <nl> + . filter ( imprt - > isUnusedImport ( imprt . getText ( ) ) ) <nl> + . forEach ( imprt - > log ( imprt . getLineNo ( ) , <nl> + imprt . getColumnNo ( ) , <nl> + MSG _ KEY , imprt . getText ( ) ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 174 , 6 + 178 , 17 @ @ public class UnusedImportsCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> + * Checks whether an import is unused . <nl> + * @ param imprt an import . <nl> + * @ return true if an import is unused . <nl> + * / <nl> + private boolean isUnusedImport ( String imprt ) { <nl> + final Matcher javaLangPackageMatcher = JAVA _ LANG _ PACKAGE _ PATTERN . matcher ( imprt ) ; <nl> + return ! referenced . contains ( CommonUtils . baseClassName ( imprt ) ) <nl> + | | javaLangPackageMatcher . matches ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Collects references made by IDENT . <nl> * @ param ast the IDENT node to process <nl> * / <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java <nl> index e8c6c4d . . e002946 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java <nl> @ @ - 186 , 4 + 186 , 22 @ @ public class UnusedImportsCheckTest extends BaseCheckTestSupport { <nl> expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testImportsFromJavaLang ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( UnusedImportsCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 3 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . String " ) , <nl> + " 4 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Math " ) , <nl> + " 5 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Class " ) , <nl> + " 6 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Exception " ) , <nl> + " 7 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Runnable " ) , <nl> + " 8 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . RuntimeException " ) , <nl> + " 9 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . ProcessBuilder " ) , <nl> + " 10 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Double " ) , <nl> + " 11 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Integer " ) , <nl> + " 12 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Float " ) , <nl> + " 13 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Short " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputUnusedImportFromJavaLang . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputUnusedImportFromJavaLang . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputUnusedImportFromJavaLang . java <nl> new file mode 100644 <nl> index 0000000 . . 0fcded4 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputUnusedImportFromJavaLang . java <nl> @ @ - 0 , 0 + 1 , 44 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> + <nl> + import java . lang . String ; / / VIOLATION <nl> + import java . lang . Math ; / / VIOLATION <nl> + import java . lang . Class ; / / VIOLATION <nl> + import java . lang . Exception ; / / VIOLATION <nl> + import java . lang . Runnable ; / / VIOLATION <nl> + import java . lang . RuntimeException ; / / VIOLATION <nl> + import java . lang . ProcessBuilder ; / / VIOLATION <nl> + import java . lang . Double ; / / VIOLATION <nl> + import java . lang . Integer ; / / VIOLATION <nl> + import java . lang . Float ; / / VIOLATION <nl> + import java . lang . Short ; / / VIOLATION <nl> + <nl> + import java . lang . annotation . Annotation ; / / OK <nl> + import java . lang . reflect . Modifier ; / / OK <nl> + import java . lang . reflect . Field ; / / OK <nl> + <nl> + import java . lang . * ; / / OK <nl> + <nl> + public class InputUnusedImportFromJavaLang { <nl> + private static final String SOMETHING = " a string " ; <nl> + private static final double PI = Math . PI ; <nl> + <nl> + private Class clazz = this . getClass ( ) ; <nl> + private Exception ex = new RuntimeException ( ) ; <nl> + private Runnable runnable = new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + <nl> + } <nl> + } ; <nl> + private ProcessBuilder processBuilder = new ProcessBuilder ( ) ; <nl> + private Modifier modifier = new Modifier ( ) ; <nl> + private Field field ; <nl> + private Annotation annotation ; <nl> + <nl> + public static void main ( String [ ] args ) { <nl> + Double d = new Double ( 0 . 0d ) ; <nl> + Float f = new Float ( 0 . 1f ) ; <nl> + Integer i = new Integer ( 1 ) ; <nl> + Short s = Short . MIN _ VALUE ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / circle . yml b / circle . yml 
 index 864e2b1 . . f09fc52 100644 
 - - - a / circle . yml 
 + + + b / circle . yml 
 @ @ - 18 , 7 + 18 , 7 @ @ machine : 
 CMD1 : " cd contribution / checkstyle - tester " 
 DEP1 : " & & sed - i ' ' ' s / ^ guava / # guava / ' projects - to - test - on . properties " 
 # we need this to let pass ' mvn site ' on no - projects mode to download all dependecies 
 - DEP2 : " & & rm src / main / java / empty _ file & & echo ' class ClassEmpty { } ' > src / main / java / EmptyClass . java " 
 + DEP2 : " & & echo ' class ClassEmpty { } ' > src / main / java / EmptyClass . java " 
 DEP3 : " & & / home / ubuntu / checkstyle / groovy - 2 . 4 . 7 / bin / groovy launch . groovy - - listOfProjects projects - to - test - on . properties - - config my _ check . xml " 
 TESTER _ DEPENDENCIES : $ CMD1 $ DEP1 $ DEP2 $ DEP3 
 CMD2 : " & & sed - i ' ' ' s / ^ openjdk / # openjdk / ' projects - for - circle . properties "

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java 
 index 7559961 . . 3264593 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java 
 @ @ - 58 , 15 + 58 , 19 @ @ public class UnusedImportsCheck extends AbstractCheck { 
 public static final String MSG _ KEY = " import . unused " ; 
 
 / * * Regex to match class names . * / 
 - private static final Pattern CLASS _ NAME = Pattern . compile ( 
 + private static final Pattern CLASS _ NAME = CommonUtils . createPattern ( 
 " ( ( : ? [ \ \ p { L } _ $ ] [ \ \ p { L } \ \ p { N } _ $ ] * \ \ . ) * [ \ \ p { L } _ $ ] [ \ \ p { L } \ \ p { N } _ $ ] * ) " ) ; 
 / * * Regex to match the first class name . * / 
 - private static final Pattern FIRST _ CLASS _ NAME = Pattern . compile ( 
 + private static final Pattern FIRST _ CLASS _ NAME = CommonUtils . createPattern ( 
 " ^ " + CLASS _ NAME ) ; 
 / * * Regex to match argument names . * / 
 - private static final Pattern ARGUMENT _ NAME = Pattern . compile ( 
 + private static final Pattern ARGUMENT _ NAME = CommonUtils . createPattern ( 
 " [ ( , ] \ \ s * " + CLASS _ NAME . pattern ( ) ) ; 
 
 + / * * Regexp pattern to match java . lang package . * / 
 + private static final Pattern JAVA _ LANG _ PACKAGE _ PATTERN = 
 + CommonUtils . createPattern ( " ^ java \ \ . lang \ \ . [ a - zA - Z ] + $ " ) ; 
 + 
 / * * Suffix for the star import . * / 
 private static final String STAR _ IMPORT _ SUFFIX = " . * " ; 
 
 @ @ - 101 , 10 + 105 , 10 @ @ public class UnusedImportsCheck extends AbstractCheck { 
 public void finishTree ( DetailAST rootAST ) { 
 / / loop over all the imports to see if referenced . 
 imports . stream ( ) 
 - . filter ( imp - > ! referenced . contains ( CommonUtils . baseClassName ( imp . getText ( ) ) ) ) 
 - . forEach ( imp - > log ( imp . getLineNo ( ) , 
 - imp . getColumnNo ( ) , 
 - MSG _ KEY , imp . getText ( ) ) ) ; 
 + . filter ( imprt - > isUnusedImport ( imprt . getText ( ) ) ) 
 + . forEach ( imprt - > log ( imprt . getLineNo ( ) , 
 + imprt . getColumnNo ( ) , 
 + MSG _ KEY , imprt . getText ( ) ) ) ; 
 } 
 
 @ Override 
 @ @ - 174 , 6 + 178 , 17 @ @ public class UnusedImportsCheck extends AbstractCheck { 
 } 
 
 / * * 
 + * Checks whether an import is unused . 
 + * @ param imprt an import . 
 + * @ return true if an import is unused . 
 + * / 
 + private boolean isUnusedImport ( String imprt ) { 
 + final Matcher javaLangPackageMatcher = JAVA _ LANG _ PACKAGE _ PATTERN . matcher ( imprt ) ; 
 + return ! referenced . contains ( CommonUtils . baseClassName ( imprt ) ) 
 + | | javaLangPackageMatcher . matches ( ) ; 
 + } 
 + 
 + / * * 
 * Collects references made by IDENT . 
 * @ param ast the IDENT node to process 
 * / 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java 
 index e8c6c4d . . e002946 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java 
 @ @ - 186 , 4 + 186 , 22 @ @ public class UnusedImportsCheckTest extends BaseCheckTestSupport { 
 expected ) ; 
 } 
 
 + @ Test 
 + public void testImportsFromJavaLang ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( UnusedImportsCheck . class ) ; 
 + final String [ ] expected = { 
 + " 3 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . String " ) , 
 + " 4 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Math " ) , 
 + " 5 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Class " ) , 
 + " 6 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Exception " ) , 
 + " 7 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Runnable " ) , 
 + " 8 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . RuntimeException " ) , 
 + " 9 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . ProcessBuilder " ) , 
 + " 10 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Double " ) , 
 + " 11 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Integer " ) , 
 + " 12 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Float " ) , 
 + " 13 : 8 : " + getCheckMessage ( MSG _ KEY , " java . lang . Short " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputUnusedImportFromJavaLang . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputUnusedImportFromJavaLang . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputUnusedImportFromJavaLang . java 
 new file mode 100644 
 index 0000000 . . 0fcded4 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputUnusedImportFromJavaLang . java 
 @ @ - 0 , 0 + 1 , 44 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports ; 
 + 
 + import java . lang . String ; / / VIOLATION 
 + import java . lang . Math ; / / VIOLATION 
 + import java . lang . Class ; / / VIOLATION 
 + import java . lang . Exception ; / / VIOLATION 
 + import java . lang . Runnable ; / / VIOLATION 
 + import java . lang . RuntimeException ; / / VIOLATION 
 + import java . lang . ProcessBuilder ; / / VIOLATION 
 + import java . lang . Double ; / / VIOLATION 
 + import java . lang . Integer ; / / VIOLATION 
 + import java . lang . Float ; / / VIOLATION 
 + import java . lang . Short ; / / VIOLATION 
 + 
 + import java . lang . annotation . Annotation ; / / OK 
 + import java . lang . reflect . Modifier ; / / OK 
 + import java . lang . reflect . Field ; / / OK 
 + 
 + import java . lang . * ; / / OK 
 + 
 + public class InputUnusedImportFromJavaLang { 
 + private static final String SOMETHING = " a string " ; 
 + private static final double PI = Math . PI ; 
 + 
 + private Class clazz = this . getClass ( ) ; 
 + private Exception ex = new RuntimeException ( ) ; 
 + private Runnable runnable = new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + 
 + } 
 + } ; 
 + private ProcessBuilder processBuilder = new ProcessBuilder ( ) ; 
 + private Modifier modifier = new Modifier ( ) ; 
 + private Field field ; 
 + private Annotation annotation ; 
 + 
 + public static void main ( String [ ] args ) { 
 + Double d = new Double ( 0 . 0d ) ; 
 + Float f = new Float ( 0 . 1f ) ; 
 + Integer i = new Integer ( 1 ) ; 
 + Short s = Short . MIN _ VALUE ; 
 + } 
 + }
