BLEU SCORE: 0.4347208719449915

TEST MSG: doc : release notes 7 . 7
GENERATED MSG: doc : release notes 6 . 18

TEST DIFF (one line): diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index 0d1356f . . bec2c6b 100644 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 17 , 6 + 17 , 111 @ @ <nl> <nl> < ! - - placeholder for a new section - - > <nl> <nl> + < section name = " Release 7 . 7 " > <nl> + < p > Bug fixes : < / p > <nl> + < ul > <nl> + < li > <nl> + SummaryJavadoc : need special processing of inheritDoc tag . Author : Sagar < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3908 " > # 3908 < / a > <nl> + < / li > <nl> + < li > <nl> + Indentation check fails for Line Wrapped Anonymous Inner Class with LCurly on newline . Author : Andrew Kuchev < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3612 " > # 3612 < / a > <nl> + < / li > <nl> + < li > <nl> + Regression false - positive FinalLocalVariable . Author : Luolc < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3172 " > # 3172 < / a > <nl> + < / li > <nl> + < li > <nl> + ImportControlLoader does not close InputStream and leaks filehandles when xml is malformed . Author : Giorgos Gaganis < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3962 " > # 3962 < / a > <nl> + < / li > <nl> + < li > <nl> + RightCurly : ALONE option doen & # 39 ; t work for a singleline IF . Author : Andrei Selkin < a href = " https : / / github . com / checkstyle / checkstyle / issues / 4044 " > # 4044 < / a > <nl> + < / li > <nl> + < li > <nl> + Test failed due to locale message settings . ( with non - English locale settings ) . Author : Luolc < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3896 " > # 3896 < / a > <nl> + < / li > <nl> + < li > <nl> + Control Characters are not skipped with google _ checks config . Author : Luolc < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3700 " > # 3700 < / a > <nl> + < / li > <nl> + < li > <nl> + WhitespaceAfterCheck : problem with multiline typecast . Author : Andrew Kuchev < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3850 " > # 3850 < / a > <nl> + < / li > <nl> + < li > <nl> + try to avoid non jdk runtime exceptions in code . Author : Vladislav Lisetskii < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3763 " > # 3763 < / a > <nl> + < / li > <nl> + < / ul > <nl> + < p > Notes : < / p > <nl> + < ul > <nl> + < li > <nl> + README : broken link . Author : unrealwork < a href = " https : / / github . com / checkstyle / checkstyle / issues / 4093 " > # 4093 < / a > <nl> + < / li > <nl> + < li > <nl> + Wrong German translation of declaration . order . access in messages _ de . properties . Author : sirdis < a href = " https : / / github . com / checkstyle / checkstyle / issues / 4081 " > # 4081 < / a > <nl> + < / li > <nl> + < li > <nl> + Perform refactoring of AnnotationLocationCheck to increase code readability . Author : Andrei Selkin < a href = " https : / / github . com / checkstyle / checkstyle / issues / 4055 " > # 4055 < / a > <nl> + < / li > <nl> + < li > <nl> + google _ checks : update to most recent version of style guide ( Feb 28 , 2017 ) . Author : Roman Ivanov < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3888 " > # 3888 < / a > <nl> + < / li > <nl> + < li > <nl> + spelling : fix spelling and punctuation in comments ( RightCurly ) . Author : Andrei Selkin <nl> + < / li > <nl> + < li > <nl> + google _ checks : update to most recent version of style guide ( 3 November 2016 ) . Author : Andrei Selkin < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3755 " > # 3755 < / a > <nl> + < / li > <nl> + < li > <nl> + NPath for empty block is 1 . Author : Roman Ivanov < a href = " https : / / github . com / checkstyle / checkstyle / issues / 4045 " > # 4045 < / a > <nl> + < / li > <nl> + < li > <nl> + Add new setting in Beginning Development for IDEA docs . Author : Vikramaditya Kukreja < a href = " https : / / github . com / checkstyle / checkstyle / issues / 4030 " > # 4030 < / a > <nl> + < / li > <nl> + < li > <nl> + doc : fix typos in Travis PR validation messages . Author : Vladislav Lisetskii <nl> + < / li > <nl> + < li > <nl> + UTs should not use ROOT locale when they test violation / error message . Author : Luolc < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3989 " > # 3989 < / a > <nl> + < / li > <nl> + < li > <nl> + wercker ci should have most of testing launches on real code to shorten time of Travis execution . Author : Roman Ivanov < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3798 " > # 3798 < / a > <nl> + < / li > <nl> + < li > <nl> + Split and Organize Checkstyle inputs by Test for SeparatorWrap . Author : Sagar < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3904 " > # 3904 < / a > <nl> + < / li > <nl> + < li > <nl> + doc : update documentation for usage of & quot ; period & quot ; property at SummaryJavadoc . Author : Sagar < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3906 " > # 3906 < / a > <nl> + < / li > <nl> + < li > <nl> + spelling : corrected sentence . Author : Sagar <nl> + < / li > <nl> + < li > <nl> + EmptyLineSeparator check not enforcing empty line after class def , enum def or interface def tokens . Author : Roman Ivanov < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3089 " > # 3089 < / a > <nl> + < / li > <nl> + < li > <nl> + spelling : change & # 39 ; suite & # 39 ; to & # 39 ; suit & # 39 ; . Author : ljacqu <nl> + < / li > <nl> + < li > <nl> + WritingChecks : add documentation on java grammar . Author : Sagar < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3883 " > # 3883 < / a > <nl> + < / li > <nl> + < li > <nl> + expand documentation on METHOD _ REF token . Author : Luolc < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3731 " > # 3731 < / a > <nl> + < / li > <nl> + < li > <nl> + circleci : provide ability to skip CI executions base on commit files . Author : Vladislav Lisetskii < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3869 " > # 3869 < / a > <nl> + < / li > <nl> + < li > <nl> + RequireThisCheck is not fully covered with UTs . Author : Andrei Selkin < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3848 " > # 3848 < / a > <nl> + < / li > <nl> + < li > <nl> + spelling : fix typo in documentation . Author : Craig P . Motlin <nl> + < / li > <nl> + < li > <nl> + Code coverage is not working for certain classes in checkstyle . Author : Andrei Selkin < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3843 " > # 3843 < / a > <nl> + < / li > <nl> + < li > <nl> + Travis faliure : & quot ; sonatype - nexus - staging not found & quot ; during release . Author : Roman Ivanov < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3868 " > # 3868 < / a > <nl> + < / li > <nl> + < / ul > <nl> + < / section > <nl> + <nl> < section name = " Release 7 . 6 " > <nl> < p > New : < / p > <nl> < ul >
NEAREST DIFF (one line): diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index c52f94c . . 3c01679 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 1982 , 6 + 1982 , 8 @ @ <nl> See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > <nl> < option value = " ProhibitedExceptionThrown " / > <nl> < option value = " MismatchedQueryAndUpdateOfCollection " / > <nl> + < ! - - Till https : / / github . com / checkstyle / checkstyle / issues / 3066 - - > <nl> + < option value = " ProhibitedExceptionCaught " / > <nl> < / list > <nl> < / option > <nl> < / inspection _ tool > <nl> diff - - git a / pom . xml b / pom . xml <nl> index f4f5199 . . a35031a 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1811 , 18 + 1811 , 18 @ @ <nl> < haltOnFailure > true < / haltOnFailure > <nl> < branchRate > 100 < / branchRate > <nl> < lineRate > 100 < / lineRate > <nl> - < totalBranchRate > 90 < / totalBranchRate > <nl> - < totalLineRate > 90 < / totalLineRate > <nl> + < totalBranchRate > 92 < / totalBranchRate > <nl> + < totalLineRate > 98 < / totalLineRate > <nl> < regexes > <nl> < regex > <nl> < pattern > com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaRecognizer < / pattern > <nl> - < branchRate > 71 < / branchRate > <nl> - < lineRate > 95 < / lineRate > <nl> + < branchRate > 72 < / branchRate > <nl> + < lineRate > 96 < / lineRate > <nl> < / regex > <nl> < regex > <nl> < pattern > com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaLexer < / pattern > <nl> - < branchRate > 75 < / branchRate > <nl> - < lineRate > 92 < / lineRate > <nl> + < branchRate > 79 < / branchRate > <nl> + < lineRate > 97 < / lineRate > <nl> < / regex > <nl> < / regexes > <nl> < / check > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java <nl> index 92617bc . . a7ffb7d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java <nl> @ @ - 67 , 6 + 67 , 17 @ @ public final class AstTreeStringPrinter { <nl> } <nl> <nl> / * * <nl> + * Parse a file and print the parse tree . <nl> + * @ param text the text to parse . <nl> + * @ param withComments true to include comments to AST <nl> + * @ return the AST of the file in String form . <nl> + * @ throws CheckstyleException if the file is not a Java source . <nl> + * / <nl> + public static String printAst ( FileText text , boolean withComments ) throws CheckstyleException { <nl> + return printTree ( parseFileText ( text , withComments ) ) ; <nl> + } <nl> + <nl> + / * * <nl> * Print AST . <nl> * @ param ast the root AST node . <nl> * @ return string AST . <nl> @ @ - 142 , 6 + 153 , 18 @ @ public final class AstTreeStringPrinter { <nl> throws IOException , CheckstyleException { <nl> final FileText text = new FileText ( file . getAbsoluteFile ( ) , <nl> System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; <nl> + return parseFileText ( text , withComments ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Parse a text and return the parse tree . <nl> + * @ param text the text to parse . <nl> + * @ param withComments true to include comment nodes to the tree <nl> + * @ return the root node of the parse tree . <nl> + * @ throws CheckstyleException if the file is not a Java source . <nl> + * / <nl> + private static DetailAST parseFileText ( FileText text , boolean withComments ) <nl> + throws CheckstyleException { <nl> final FileContents contents = new FileContents ( text ) ; <nl> final DetailAST result ; <nl> try { <nl> @ @ - 155 , 7 + 178 , 7 @ @ public final class AstTreeStringPrinter { <nl> catch ( RecognitionException | TokenStreamException ex ) { <nl> final String exceptionMsg = String . format ( Locale . ROOT , <nl> " % s occurred during the analysis of file % s . " , <nl> - ex . getClass ( ) . getSimpleName ( ) , file . getPath ( ) ) ; <nl> + ex . getClass ( ) . getSimpleName ( ) , text . getFile ( ) . getPath ( ) ) ; <nl> throw new CheckstyleException ( exceptionMsg , ex ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> index 475c2d1 . . 34c48fa 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> @ @ - 19 , 14 + 19 , 29 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . fail ; <nl> + <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . lang . reflect . Constructor ; <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + import java . lang . reflect . Method ; <nl> + import java . util . Arrays ; <nl> <nl> import org . junit . Test ; <nl> <nl> + import antlr . NoViableAltForCharException ; <nl> + import antlr . ParserSharedInputState ; <nl> + import antlr . SemanticException ; <nl> + import antlr . TokenBuffer ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . AstTreeStringPrinter ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> <nl> public class AstRegressionTest extends BaseCheckTestSupport { <nl> @ Override <nl> @ @ - 94 , 10 + 109 , 199 @ @ public class AstRegressionTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testUnusedMethods ( ) throws Exception { <nl> + public void testUnusedConstructors1 ( ) throws Exception { <nl> final Class < ? > clss = GeneratedJavaLexer . class ; <nl> final Constructor < ? > constructor = clss . getDeclaredConstructor ( InputStream . class ) ; <nl> <nl> constructor . newInstance ( ( InputStream ) null ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testUnusedConstructors2 ( ) throws Exception { <nl> + final Class < ? > clss = GeneratedJavaRecognizer . class ; <nl> + final Constructor < ? > constructor = clss <nl> + . getDeclaredConstructor ( ParserSharedInputState . class ) ; <nl> + <nl> + constructor . newInstance ( ( ParserSharedInputState ) null ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testUnusedConstructors3 ( ) throws Exception { <nl> + final Class < ? > clss = GeneratedJavaRecognizer . class ; <nl> + final Constructor < ? > constructor = clss . getDeclaredConstructor ( TokenBuffer . class ) ; <nl> + <nl> + constructor . newInstance ( ( TokenBuffer ) null ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCustomAstTree ( ) throws Exception { <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ t " ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ r \ n " ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ n " ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ r \ r " ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ r " ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ u000c \ f " ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ n " , true ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ r " , true ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ r \ n " , true ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ n * / " , true ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ r \ n * / " , true ) ; <nl> + / / noinspection ProhibitedExceptionCaught <nl> + try { <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ r " + " \ u0000 \ u0000 " + " * / " , <nl> + true ) ; <nl> + fail ( " Expected Exception " ) ; <nl> + } <nl> + catch ( ArrayIndexOutOfBoundsException ex ) { <nl> + / / expected , as ' FileContents . extractCComment ' is confused if the <nl> + / / comment is a 1 line comment or 2 . Part of FileContents thinks it <nl> + / / is 1 line while other parts think it is 2 lines . The exception <nl> + / / occurs when trying to retrieve the non - existent second line . <nl> + assertEquals ( " expected exception " , " 1 " , ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testImpossibleExceptions ( ) throws Exception { <nl> + AssertGeneratedJavaLexer . verifyFail ( " mSTD _ ESC " , ' a ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mSTD _ ESC " , ' 0 ' , ( char ) 0xFFFF ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mSTD _ ESC " , ' 4 ' , ( char ) 0xFFFF ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mCHAR _ LITERAL " , ' \ ' ' , ' \ ' ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mHEX _ DIGIT " , ' ; ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mEXPONENT " , ' ; ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mBINARY _ DIGIT " , ' 2 ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mSIGNED _ INTEGER " , ' a ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mID _ START " , ' % ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mID _ START " , ( char ) 0xBF ) ; <nl> + AssertGeneratedJavaLexer . verifyFailNoGuessing ( " mID _ START " , ( char ) 0xBF ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mID _ PART " , ' % ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mID _ PART " , ( char ) 0xBF ) ; <nl> + AssertGeneratedJavaLexer . verifyFailNoGuessing ( " mID _ PART " , ( char ) 0xBF ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mESC " , ' \ \ ' , ' a ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mLONG _ LITERAL " , ' 0 ' , ' ; ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mLONG _ LITERAL " , ' 1 ' , ' ; ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mLONG _ LITERAL " , ' ; ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mINT _ LITERAL " , ' ; ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mHEX _ DOUBLE _ LITERAL " , ' 0 ' , ' a ' ) ; <nl> + AssertGeneratedJavaLexer . verifyFail ( " mHEX _ FLOAT _ LITERAL " , ' 0 ' , ' a ' ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testImpossibleValid ( ) throws Exception { <nl> + AssertGeneratedJavaLexer . verifyPass ( " mSTD _ ESC " , ' n ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mELLIPSIS " , ' . ' , ' . ' , ' . ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mDOT " , ' . ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mBINARY _ EXPONENT " , ' p ' , ' 0 ' , ' ; ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mHEX _ DIGIT " , ' 0 ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mEXPONENT " , ' e ' , ' 0 ' , ' ; ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mBINARY _ DIGIT " , ' 0 ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mSIGNED _ INTEGER " , ' 0 ' , ' ; ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mWS " , ' ' , ' ; ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mID _ START " , ' $ ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mID _ PART " , ' $ ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mESC " , ' \ \ ' , ' \ \ ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mLONG _ LITERAL " , ' 1 ' , ' L ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mINT _ LITERAL " , ' 0 ' , ' ; ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mFLOAT _ LITERAL " , ' 0 ' , ' f ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mDOUBLE _ LITERAL " , ' 0 ' , ' d ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mHEX _ FLOAT _ LITERAL " , ' 0 ' , ' x ' , ' 2 ' , ' _ ' , ' 4 ' , ' . ' , <nl> + ' 4 ' , ' 4 ' , ' . ' , ' 4 ' , ' P ' , ' 4 ' , ' ; ' ) ; <nl> + AssertGeneratedJavaLexer . verifyPass ( " mHEX _ DOUBLE _ LITERAL " , ' 0 ' , ' x ' , ' 2 ' , ' _ ' , ' 4 ' , ' . ' , <nl> + ' 4 ' , ' 4 ' , ' . ' , ' 4 ' , ' P ' , ' 4 ' , ' D ' , ' ; ' ) ; <nl> + } <nl> + <nl> + private static void verifyAstRaw ( String expectedTextPrintFileName , String actualJava ) <nl> + throws Exception { <nl> + verifyAstRaw ( expectedTextPrintFileName , actualJava , false ) ; <nl> + } <nl> + <nl> + private static void verifyAstRaw ( String expectedTextPrintFileName , String actualJava , <nl> + boolean withComments ) throws Exception { <nl> + final File expectedFile = new File ( expectedTextPrintFileName ) ; <nl> + final String expectedContents = new FileText ( expectedFile , System . getProperty ( <nl> + " file . encoding " , " UTF - 8 " ) ) . getFullText ( ) . toString ( ) . replace ( " \ r " , " " ) ; <nl> + <nl> + final FileText actualFileContents = FileText . fromLines ( new File ( " " ) , <nl> + Arrays . asList ( actualJava . split ( " \ \ n " ) ) ) ; <nl> + final String actualContents = AstTreeStringPrinter . printAst ( actualFileContents , <nl> + withComments ) ; <nl> + <nl> + assertEquals ( " Generated AST from Java code should match pre - defined AST " , expectedContents , <nl> + actualContents ) ; <nl> + } <nl> + <nl> + private static final class AssertGeneratedJavaLexer extends GeneratedJavaLexer { <nl> + private int laPosition ; <nl> + private char [ ] laResults ; <nl> + <nl> + private AssertGeneratedJavaLexer ( ) { <nl> + super ( ( InputStream ) null ) ; <nl> + } <nl> + <nl> + public static void verifyFailNoGuessing ( String methodName , char . . . laResults ) <nl> + throws Exception { <nl> + verify ( methodName , false , 0 , laResults ) ; <nl> + } <nl> + <nl> + public static void verifyPass ( String methodName , char . . . laResults ) throws Exception { <nl> + verify ( methodName , true , 1 , laResults ) ; <nl> + } <nl> + <nl> + public static void verifyFail ( String methodName , char . . . laResults ) throws Exception { <nl> + verify ( methodName , false , 1 , laResults ) ; <nl> + } <nl> + <nl> + public static void verify ( String methodName , boolean expectPass , int guessing , <nl> + char . . . laResults ) throws Exception { <nl> + final AssertGeneratedJavaLexer instance = new AssertGeneratedJavaLexer ( ) ; <nl> + instance . laPosition = 0 ; <nl> + instance . laResults = laResults . clone ( ) ; <nl> + instance . inputState . guessing = guessing ; <nl> + <nl> + final Method method = GeneratedJavaLexer . class . getDeclaredMethod ( methodName , <nl> + boolean . class ) ; <nl> + boolean exception ; <nl> + <nl> + try { <nl> + method . invoke ( instance , true ) ; <nl> + exception = false ; <nl> + } <nl> + catch ( InvocationTargetException ex ) { <nl> + if ( expectPass ) { <nl> + throw ex ; <nl> + } <nl> + <nl> + final Class < ? > clss = ex . getTargetException ( ) . getClass ( ) ; <nl> + if ( clss ! = NoViableAltForCharException . class <nl> + & & clss ! = SemanticException . class ) { <nl> + throw ex ; <nl> + } <nl> + exception = true ; <nl> + } <nl> + <nl> + if ( expectPass ) { <nl> + assertFalse ( " Call to GeneratedJavaLexer . " + methodName <nl> + + " resulted in an exception " , exception ) ; <nl> + } <nl> + else { <nl> + assertTrue ( " Call to GeneratedJavaLexer . " + methodName <nl> + + " did not result in an exception " , exception ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public char LA ( int i ) { <nl> + return laResults [ laPosition + i - 1 ] ; <nl> + } <nl> + <nl> + @ Override <nl> + public void consume ( ) { <nl> + laPosition + + ; <nl> + } <nl> + <nl> + @ Override <nl> + public int mark ( ) { <nl> + return 1 ; <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index 0d1356f . . bec2c6b 100644 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 17 , 6 + 17 , 111 @ @ 
 
 < ! - - placeholder for a new section - - > 
 
 + < section name = " Release 7 . 7 " > 
 + < p > Bug fixes : < / p > 
 + < ul > 
 + < li > 
 + SummaryJavadoc : need special processing of inheritDoc tag . Author : Sagar < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3908 " > # 3908 < / a > 
 + < / li > 
 + < li > 
 + Indentation check fails for Line Wrapped Anonymous Inner Class with LCurly on newline . Author : Andrew Kuchev < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3612 " > # 3612 < / a > 
 + < / li > 
 + < li > 
 + Regression false - positive FinalLocalVariable . Author : Luolc < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3172 " > # 3172 < / a > 
 + < / li > 
 + < li > 
 + ImportControlLoader does not close InputStream and leaks filehandles when xml is malformed . Author : Giorgos Gaganis < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3962 " > # 3962 < / a > 
 + < / li > 
 + < li > 
 + RightCurly : ALONE option doen & # 39 ; t work for a singleline IF . Author : Andrei Selkin < a href = " https : / / github . com / checkstyle / checkstyle / issues / 4044 " > # 4044 < / a > 
 + < / li > 
 + < li > 
 + Test failed due to locale message settings . ( with non - English locale settings ) . Author : Luolc < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3896 " > # 3896 < / a > 
 + < / li > 
 + < li > 
 + Control Characters are not skipped with google _ checks config . Author : Luolc < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3700 " > # 3700 < / a > 
 + < / li > 
 + < li > 
 + WhitespaceAfterCheck : problem with multiline typecast . Author : Andrew Kuchev < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3850 " > # 3850 < / a > 
 + < / li > 
 + < li > 
 + try to avoid non jdk runtime exceptions in code . Author : Vladislav Lisetskii < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3763 " > # 3763 < / a > 
 + < / li > 
 + < / ul > 
 + < p > Notes : < / p > 
 + < ul > 
 + < li > 
 + README : broken link . Author : unrealwork < a href = " https : / / github . com / checkstyle / checkstyle / issues / 4093 " > # 4093 < / a > 
 + < / li > 
 + < li > 
 + Wrong German translation of declaration . order . access in messages _ de . properties . Author : sirdis < a href = " https : / / github . com / checkstyle / checkstyle / issues / 4081 " > # 4081 < / a > 
 + < / li > 
 + < li > 
 + Perform refactoring of AnnotationLocationCheck to increase code readability . Author : Andrei Selkin < a href = " https : / / github . com / checkstyle / checkstyle / issues / 4055 " > # 4055 < / a > 
 + < / li > 
 + < li > 
 + google _ checks : update to most recent version of style guide ( Feb 28 , 2017 ) . Author : Roman Ivanov < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3888 " > # 3888 < / a > 
 + < / li > 
 + < li > 
 + spelling : fix spelling and punctuation in comments ( RightCurly ) . Author : Andrei Selkin 
 + < / li > 
 + < li > 
 + google _ checks : update to most recent version of style guide ( 3 November 2016 ) . Author : Andrei Selkin < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3755 " > # 3755 < / a > 
 + < / li > 
 + < li > 
 + NPath for empty block is 1 . Author : Roman Ivanov < a href = " https : / / github . com / checkstyle / checkstyle / issues / 4045 " > # 4045 < / a > 
 + < / li > 
 + < li > 
 + Add new setting in Beginning Development for IDEA docs . Author : Vikramaditya Kukreja < a href = " https : / / github . com / checkstyle / checkstyle / issues / 4030 " > # 4030 < / a > 
 + < / li > 
 + < li > 
 + doc : fix typos in Travis PR validation messages . Author : Vladislav Lisetskii 
 + < / li > 
 + < li > 
 + UTs should not use ROOT locale when they test violation / error message . Author : Luolc < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3989 " > # 3989 < / a > 
 + < / li > 
 + < li > 
 + wercker ci should have most of testing launches on real code to shorten time of Travis execution . Author : Roman Ivanov < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3798 " > # 3798 < / a > 
 + < / li > 
 + < li > 
 + Split and Organize Checkstyle inputs by Test for SeparatorWrap . Author : Sagar < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3904 " > # 3904 < / a > 
 + < / li > 
 + < li > 
 + doc : update documentation for usage of & quot ; period & quot ; property at SummaryJavadoc . Author : Sagar < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3906 " > # 3906 < / a > 
 + < / li > 
 + < li > 
 + spelling : corrected sentence . Author : Sagar 
 + < / li > 
 + < li > 
 + EmptyLineSeparator check not enforcing empty line after class def , enum def or interface def tokens . Author : Roman Ivanov < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3089 " > # 3089 < / a > 
 + < / li > 
 + < li > 
 + spelling : change & # 39 ; suite & # 39 ; to & # 39 ; suit & # 39 ; . Author : ljacqu 
 + < / li > 
 + < li > 
 + WritingChecks : add documentation on java grammar . Author : Sagar < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3883 " > # 3883 < / a > 
 + < / li > 
 + < li > 
 + expand documentation on METHOD _ REF token . Author : Luolc < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3731 " > # 3731 < / a > 
 + < / li > 
 + < li > 
 + circleci : provide ability to skip CI executions base on commit files . Author : Vladislav Lisetskii < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3869 " > # 3869 < / a > 
 + < / li > 
 + < li > 
 + RequireThisCheck is not fully covered with UTs . Author : Andrei Selkin < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3848 " > # 3848 < / a > 
 + < / li > 
 + < li > 
 + spelling : fix typo in documentation . Author : Craig P . Motlin 
 + < / li > 
 + < li > 
 + Code coverage is not working for certain classes in checkstyle . Author : Andrei Selkin < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3843 " > # 3843 < / a > 
 + < / li > 
 + < li > 
 + Travis faliure : & quot ; sonatype - nexus - staging not found & quot ; during release . Author : Roman Ivanov < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3868 " > # 3868 < / a > 
 + < / li > 
 + < / ul > 
 + < / section > 
 + 
 < section name = " Release 7 . 6 " > 
 < p > New : < / p > 
 < ul >

NEAREST DIFF:
diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index c52f94c . . 3c01679 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 1982 , 6 + 1982 , 8 @ @ 
 See https : / / github . com / checkstyle / checkstyle / issues / 2285 - - > 
 < option value = " ProhibitedExceptionThrown " / > 
 < option value = " MismatchedQueryAndUpdateOfCollection " / > 
 + < ! - - Till https : / / github . com / checkstyle / checkstyle / issues / 3066 - - > 
 + < option value = " ProhibitedExceptionCaught " / > 
 < / list > 
 < / option > 
 < / inspection _ tool > 
 diff - - git a / pom . xml b / pom . xml 
 index f4f5199 . . a35031a 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1811 , 18 + 1811 , 18 @ @ 
 < haltOnFailure > true < / haltOnFailure > 
 < branchRate > 100 < / branchRate > 
 < lineRate > 100 < / lineRate > 
 - < totalBranchRate > 90 < / totalBranchRate > 
 - < totalLineRate > 90 < / totalLineRate > 
 + < totalBranchRate > 92 < / totalBranchRate > 
 + < totalLineRate > 98 < / totalLineRate > 
 < regexes > 
 < regex > 
 < pattern > com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaRecognizer < / pattern > 
 - < branchRate > 71 < / branchRate > 
 - < lineRate > 95 < / lineRate > 
 + < branchRate > 72 < / branchRate > 
 + < lineRate > 96 < / lineRate > 
 < / regex > 
 < regex > 
 < pattern > com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaLexer < / pattern > 
 - < branchRate > 75 < / branchRate > 
 - < lineRate > 92 < / lineRate > 
 + < branchRate > 79 < / branchRate > 
 + < lineRate > 97 < / lineRate > 
 < / regex > 
 < / regexes > 
 < / check > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java 
 index 92617bc . . a7ffb7d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java 
 @ @ - 67 , 6 + 67 , 17 @ @ public final class AstTreeStringPrinter { 
 } 
 
 / * * 
 + * Parse a file and print the parse tree . 
 + * @ param text the text to parse . 
 + * @ param withComments true to include comments to AST 
 + * @ return the AST of the file in String form . 
 + * @ throws CheckstyleException if the file is not a Java source . 
 + * / 
 + public static String printAst ( FileText text , boolean withComments ) throws CheckstyleException { 
 + return printTree ( parseFileText ( text , withComments ) ) ; 
 + } 
 + 
 + / * * 
 * Print AST . 
 * @ param ast the root AST node . 
 * @ return string AST . 
 @ @ - 142 , 6 + 153 , 18 @ @ public final class AstTreeStringPrinter { 
 throws IOException , CheckstyleException { 
 final FileText text = new FileText ( file . getAbsoluteFile ( ) , 
 System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; 
 + return parseFileText ( text , withComments ) ; 
 + } 
 + 
 + / * * 
 + * Parse a text and return the parse tree . 
 + * @ param text the text to parse . 
 + * @ param withComments true to include comment nodes to the tree 
 + * @ return the root node of the parse tree . 
 + * @ throws CheckstyleException if the file is not a Java source . 
 + * / 
 + private static DetailAST parseFileText ( FileText text , boolean withComments ) 
 + throws CheckstyleException { 
 final FileContents contents = new FileContents ( text ) ; 
 final DetailAST result ; 
 try { 
 @ @ - 155 , 7 + 178 , 7 @ @ public final class AstTreeStringPrinter { 
 catch ( RecognitionException | TokenStreamException ex ) { 
 final String exceptionMsg = String . format ( Locale . ROOT , 
 " % s occurred during the analysis of file % s . " , 
 - ex . getClass ( ) . getSimpleName ( ) , file . getPath ( ) ) ; 
 + ex . getClass ( ) . getSimpleName ( ) , text . getFile ( ) . getPath ( ) ) ; 
 throw new CheckstyleException ( exceptionMsg , ex ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 index 475c2d1 . . 34c48fa 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 @ @ - 19 , 14 + 19 , 29 @ @ 
 
 package com . puppycrawl . tools . checkstyle . grammars ; 
 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . fail ; 
 + 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . lang . reflect . Constructor ; 
 + import java . lang . reflect . InvocationTargetException ; 
 + import java . lang . reflect . Method ; 
 + import java . util . Arrays ; 
 
 import org . junit . Test ; 
 
 + import antlr . NoViableAltForCharException ; 
 + import antlr . ParserSharedInputState ; 
 + import antlr . SemanticException ; 
 + import antlr . TokenBuffer ; 
 + 
 + import com . puppycrawl . tools . checkstyle . AstTreeStringPrinter ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 
 public class AstRegressionTest extends BaseCheckTestSupport { 
 @ Override 
 @ @ - 94 , 10 + 109 , 199 @ @ public class AstRegressionTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testUnusedMethods ( ) throws Exception { 
 + public void testUnusedConstructors1 ( ) throws Exception { 
 final Class < ? > clss = GeneratedJavaLexer . class ; 
 final Constructor < ? > constructor = clss . getDeclaredConstructor ( InputStream . class ) ; 
 
 constructor . newInstance ( ( InputStream ) null ) ; 
 } 
 + 
 + @ Test 
 + public void testUnusedConstructors2 ( ) throws Exception { 
 + final Class < ? > clss = GeneratedJavaRecognizer . class ; 
 + final Constructor < ? > constructor = clss 
 + . getDeclaredConstructor ( ParserSharedInputState . class ) ; 
 + 
 + constructor . newInstance ( ( ParserSharedInputState ) null ) ; 
 + } 
 + 
 + @ Test 
 + public void testUnusedConstructors3 ( ) throws Exception { 
 + final Class < ? > clss = GeneratedJavaRecognizer . class ; 
 + final Constructor < ? > constructor = clss . getDeclaredConstructor ( TokenBuffer . class ) ; 
 + 
 + constructor . newInstance ( ( TokenBuffer ) null ) ; 
 + } 
 + 
 + @ Test 
 + public void testCustomAstTree ( ) throws Exception { 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ t " ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ r \ n " ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ n " ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ r \ r " ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ r " ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ u000c \ f " ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ n " , true ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ r " , true ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ r \ n " , true ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ n * / " , true ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ r \ n * / " , true ) ; 
 + / / noinspection ProhibitedExceptionCaught 
 + try { 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ r " + " \ u0000 \ u0000 " + " * / " , 
 + true ) ; 
 + fail ( " Expected Exception " ) ; 
 + } 
 + catch ( ArrayIndexOutOfBoundsException ex ) { 
 + / / expected , as ' FileContents . extractCComment ' is confused if the 
 + / / comment is a 1 line comment or 2 . Part of FileContents thinks it 
 + / / is 1 line while other parts think it is 2 lines . The exception 
 + / / occurs when trying to retrieve the non - existent second line . 
 + assertEquals ( " expected exception " , " 1 " , ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testImpossibleExceptions ( ) throws Exception { 
 + AssertGeneratedJavaLexer . verifyFail ( " mSTD _ ESC " , ' a ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mSTD _ ESC " , ' 0 ' , ( char ) 0xFFFF ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mSTD _ ESC " , ' 4 ' , ( char ) 0xFFFF ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mCHAR _ LITERAL " , ' \ ' ' , ' \ ' ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mHEX _ DIGIT " , ' ; ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mEXPONENT " , ' ; ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mBINARY _ DIGIT " , ' 2 ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mSIGNED _ INTEGER " , ' a ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mID _ START " , ' % ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mID _ START " , ( char ) 0xBF ) ; 
 + AssertGeneratedJavaLexer . verifyFailNoGuessing ( " mID _ START " , ( char ) 0xBF ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mID _ PART " , ' % ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mID _ PART " , ( char ) 0xBF ) ; 
 + AssertGeneratedJavaLexer . verifyFailNoGuessing ( " mID _ PART " , ( char ) 0xBF ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mESC " , ' \ \ ' , ' a ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mLONG _ LITERAL " , ' 0 ' , ' ; ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mLONG _ LITERAL " , ' 1 ' , ' ; ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mLONG _ LITERAL " , ' ; ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mINT _ LITERAL " , ' ; ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mHEX _ DOUBLE _ LITERAL " , ' 0 ' , ' a ' ) ; 
 + AssertGeneratedJavaLexer . verifyFail ( " mHEX _ FLOAT _ LITERAL " , ' 0 ' , ' a ' ) ; 
 + } 
 + 
 + @ Test 
 + public void testImpossibleValid ( ) throws Exception { 
 + AssertGeneratedJavaLexer . verifyPass ( " mSTD _ ESC " , ' n ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mELLIPSIS " , ' . ' , ' . ' , ' . ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mDOT " , ' . ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mBINARY _ EXPONENT " , ' p ' , ' 0 ' , ' ; ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mHEX _ DIGIT " , ' 0 ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mEXPONENT " , ' e ' , ' 0 ' , ' ; ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mBINARY _ DIGIT " , ' 0 ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mSIGNED _ INTEGER " , ' 0 ' , ' ; ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mWS " , ' ' , ' ; ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mID _ START " , ' $ ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mID _ PART " , ' $ ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mESC " , ' \ \ ' , ' \ \ ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mLONG _ LITERAL " , ' 1 ' , ' L ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mINT _ LITERAL " , ' 0 ' , ' ; ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mFLOAT _ LITERAL " , ' 0 ' , ' f ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mDOUBLE _ LITERAL " , ' 0 ' , ' d ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mHEX _ FLOAT _ LITERAL " , ' 0 ' , ' x ' , ' 2 ' , ' _ ' , ' 4 ' , ' . ' , 
 + ' 4 ' , ' 4 ' , ' . ' , ' 4 ' , ' P ' , ' 4 ' , ' ; ' ) ; 
 + AssertGeneratedJavaLexer . verifyPass ( " mHEX _ DOUBLE _ LITERAL " , ' 0 ' , ' x ' , ' 2 ' , ' _ ' , ' 4 ' , ' . ' , 
 + ' 4 ' , ' 4 ' , ' . ' , ' 4 ' , ' P ' , ' 4 ' , ' D ' , ' ; ' ) ; 
 + } 
 + 
 + private static void verifyAstRaw ( String expectedTextPrintFileName , String actualJava ) 
 + throws Exception { 
 + verifyAstRaw ( expectedTextPrintFileName , actualJava , false ) ; 
 + } 
 + 
 + private static void verifyAstRaw ( String expectedTextPrintFileName , String actualJava , 
 + boolean withComments ) throws Exception { 
 + final File expectedFile = new File ( expectedTextPrintFileName ) ; 
 + final String expectedContents = new FileText ( expectedFile , System . getProperty ( 
 + " file . encoding " , " UTF - 8 " ) ) . getFullText ( ) . toString ( ) . replace ( " \ r " , " " ) ; 
 + 
 + final FileText actualFileContents = FileText . fromLines ( new File ( " " ) , 
 + Arrays . asList ( actualJava . split ( " \ \ n " ) ) ) ; 
 + final String actualContents = AstTreeStringPrinter . printAst ( actualFileContents , 
 + withComments ) ; 
 + 
 + assertEquals ( " Generated AST from Java code should match pre - defined AST " , expectedContents , 
 + actualContents ) ; 
 + } 
 + 
 + private static final class AssertGeneratedJavaLexer extends GeneratedJavaLexer { 
 + private int laPosition ; 
 + private char [ ] laResults ; 
 + 
 + private AssertGeneratedJavaLexer ( ) { 
 + super ( ( InputStream ) null ) ; 
 + } 
 + 
 + public static void verifyFailNoGuessing ( String methodName , char . . . laResults ) 
 + throws Exception { 
 + verify ( methodName , false , 0 , laResults ) ; 
 + } 
 + 
 + public static void verifyPass ( String methodName , char . . . laResults ) throws Exception { 
 + verify ( methodName , true , 1 , laResults ) ; 
 + } 
 + 
 + public static void verifyFail ( String methodName , char . . . laResults ) throws Exception { 
 + verify ( methodName , false , 1 , laResults ) ; 
 + } 
 + 
 + public static void verify ( String methodName , boolean expectPass , int guessing , 
 + char . . . laResults ) throws Exception { 
 + final AssertGeneratedJavaLexer instance = new AssertGeneratedJavaLexer ( ) ; 
 + instance . laPosition = 0 ; 
 + instance . laResults = laResults . clone ( ) ; 
 + instance . inputState . guessing = guessing ; 
 + 
 + final Method method = GeneratedJavaLexer . class . getDeclaredMethod ( methodName , 
 + boolean . class ) ; 
 + boolean exception ; 
 + 
 + try { 
 + method . invoke ( instance , true ) ; 
 + exception = false ; 
 + } 
 + catch ( InvocationTargetException ex ) { 
 + if ( expectPass ) { 
 + throw ex ; 
 + } 
 + 
 + final Class < ? > clss = ex . getTargetException ( ) . getClass ( ) ; 
 + if ( clss ! = NoViableAltForCharException . class 
 + & & clss ! = SemanticException . class ) { 
 + throw ex ; 
 + } 
 + exception = true ; 
 + } 
 + 
 + if ( expectPass ) { 
 + assertFalse ( " Call to GeneratedJavaLexer . " + methodName 
 + + " resulted in an exception " , exception ) ; 
 + } 
 + else { 
 + assertTrue ( " Call to GeneratedJavaLexer . " + methodName 
 + + " did not result in an exception " , exception ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public char LA ( int i ) { 
 + return laResults [ laPosition + i - 1 ] ; 
 + } 
 + 
 + @ Override 
 + public void consume ( ) { 
 + laPosition + + ; 
 + } 
 + 
 + @ Override 
 + public int mark ( ) { 
 + return 1 ; 
 + } 
 + } 
 }
