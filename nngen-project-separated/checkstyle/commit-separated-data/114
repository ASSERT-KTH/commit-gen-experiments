BLEU SCORE: 0.044568827606990644

TEST MSG: Issue # 6320 : added REMOVE _ CONDITIONALS mutator for packagenameloader
GENERATED MSG: 100 % coverage for PackageNamesLoader . # 1294

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index ba6afc5 . . 959e81f 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2523 , 6 + 2523 , 7 @ @ <nl> < mutator > INVERT _ NEGS < / mutator > <nl> < mutator > MATH < / mutator > <nl> < mutator > NEGATE _ CONDITIONALS < / mutator > <nl> + < mutator > REMOVE _ CONDITIONALS < / mutator > <nl> < mutator > RETURN _ VALS < / mutator > <nl> < mutator > TRUE _ RETURNS < / mutator > <nl> < mutator > VOID _ METHOD _ CALLS < / mutator > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> index a2cfd6f . . 3b77721 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import java . nio . file . Paths ; <nl> import java . util . Arrays ; <nl> import java . util . Enumeration ; <nl> import java . util . HashSet ; <nl> + import java . util . Iterator ; <nl> import java . util . Set ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 146 , 6 + 147 , 33 @ @ public class PackageNamesLoaderTest extends AbstractPathTestSupport { <nl> <nl> @ Test <nl> @ SuppressWarnings ( " unchecked " ) <nl> + public void testPackagesWithDotsEx ( ) throws Exception { <nl> + final Constructor < PackageNamesLoader > constructor = <nl> + PackageNamesLoader . class . getDeclaredConstructor ( ) ; <nl> + constructor . setAccessible ( true ) ; <nl> + final PackageNamesLoader loader = constructor . newInstance ( ) ; <nl> + <nl> + final Attributes attributes1 = mock ( Attributes . class ) ; <nl> + when ( attributes1 . getValue ( " name " ) ) . thenReturn ( " coding . " ) ; <nl> + final Attributes attributes2 = mock ( Attributes . class ) ; <nl> + when ( attributes2 . getValue ( " name " ) ) . thenReturn ( " specific " ) ; <nl> + <nl> + loader . startElement ( " " , " " , " package " , attributes1 ) ; <nl> + loader . startElement ( " " , " " , " package " , attributes2 ) ; <nl> + loader . endElement ( " " , " " , " package " ) ; <nl> + loader . endElement ( " " , " " , " package " ) ; <nl> + <nl> + final Field field = PackageNamesLoader . class . getDeclaredField ( " packageNames " ) ; <nl> + field . setAccessible ( true ) ; <nl> + final Set < String > list = ( Set < String > ) field . get ( loader ) ; <nl> + assertEquals ( " Invalid list size " , 2 , list . size ( ) ) ; <nl> + final Iterator < String > iterator = list . iterator ( ) ; <nl> + assertEquals ( " Invalid package name " , " coding . specific " , iterator . next ( ) ) ; <nl> + assertEquals ( " Invalid package name " , " coding . " , iterator . next ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + @ SuppressWarnings ( " unchecked " ) <nl> public void testPackagesWithSaxException ( ) throws Exception { <nl> final URLConnection mockConnection = Mockito . mock ( URLConnection . class ) ; <nl> when ( mockConnection . getInputStream ( ) ) . thenReturn (
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> index 1366246 . . d9b9c5e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . io . File ; <nl> import org . junit . Test ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassFanOutComplexityCheck . MSG _ KEY ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { <nl> @ Test <nl> @ @ - 53 , 4 + 54 , 23 @ @ public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { <nl> <nl> verify ( checkConfig , getPath ( " Input15Extensions . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testDefaultConfiguration ( ) throws Exception { <nl> + DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ClassFanOutComplexityCheck . class ) ; <nl> + String [ ] expected = { <nl> + } ; <nl> + <nl> + try { <nl> + createChecker ( checkConfig ) ; <nl> + verify ( checkConfig , <nl> + getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , <nl> + expected ) ; <nl> + } <nl> + catch ( Exception ex ) { <nl> + / / Exception is not expected <nl> + fail ( ) ; <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index ba6afc5 . . 959e81f 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2523 , 6 + 2523 , 7 @ @ 
 < mutator > INVERT _ NEGS < / mutator > 
 < mutator > MATH < / mutator > 
 < mutator > NEGATE _ CONDITIONALS < / mutator > 
 + < mutator > REMOVE _ CONDITIONALS < / mutator > 
 < mutator > RETURN _ VALS < / mutator > 
 < mutator > TRUE _ RETURNS < / mutator > 
 < mutator > VOID _ METHOD _ CALLS < / mutator > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 index a2cfd6f . . 3b77721 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import java . nio . file . Paths ; 
 import java . util . Arrays ; 
 import java . util . Enumeration ; 
 import java . util . HashSet ; 
 + import java . util . Iterator ; 
 import java . util . Set ; 
 
 import org . junit . Test ; 
 @ @ - 146 , 6 + 147 , 33 @ @ public class PackageNamesLoaderTest extends AbstractPathTestSupport { 
 
 @ Test 
 @ SuppressWarnings ( " unchecked " ) 
 + public void testPackagesWithDotsEx ( ) throws Exception { 
 + final Constructor < PackageNamesLoader > constructor = 
 + PackageNamesLoader . class . getDeclaredConstructor ( ) ; 
 + constructor . setAccessible ( true ) ; 
 + final PackageNamesLoader loader = constructor . newInstance ( ) ; 
 + 
 + final Attributes attributes1 = mock ( Attributes . class ) ; 
 + when ( attributes1 . getValue ( " name " ) ) . thenReturn ( " coding . " ) ; 
 + final Attributes attributes2 = mock ( Attributes . class ) ; 
 + when ( attributes2 . getValue ( " name " ) ) . thenReturn ( " specific " ) ; 
 + 
 + loader . startElement ( " " , " " , " package " , attributes1 ) ; 
 + loader . startElement ( " " , " " , " package " , attributes2 ) ; 
 + loader . endElement ( " " , " " , " package " ) ; 
 + loader . endElement ( " " , " " , " package " ) ; 
 + 
 + final Field field = PackageNamesLoader . class . getDeclaredField ( " packageNames " ) ; 
 + field . setAccessible ( true ) ; 
 + final Set < String > list = ( Set < String > ) field . get ( loader ) ; 
 + assertEquals ( " Invalid list size " , 2 , list . size ( ) ) ; 
 + final Iterator < String > iterator = list . iterator ( ) ; 
 + assertEquals ( " Invalid package name " , " coding . specific " , iterator . next ( ) ) ; 
 + assertEquals ( " Invalid package name " , " coding . " , iterator . next ( ) ) ; 
 + } 
 + 
 + @ Test 
 + @ SuppressWarnings ( " unchecked " ) 
 public void testPackagesWithSaxException ( ) throws Exception { 
 final URLConnection mockConnection = Mockito . mock ( URLConnection . class ) ; 
 when ( mockConnection . getInputStream ( ) ) . thenReturn (

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 index 1366246 . . d9b9c5e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . io . File ; 
 import org . junit . Test ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassFanOutComplexityCheck . MSG _ KEY ; 
 + import static org . junit . Assert . fail ; 
 
 public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { 
 @ Test 
 @ @ - 53 , 4 + 54 , 23 @ @ public class ClassFanOutComplexityCheckTest extends BaseCheckTestSupport { 
 
 verify ( checkConfig , getPath ( " Input15Extensions . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testDefaultConfiguration ( ) throws Exception { 
 + DefaultConfiguration checkConfig = 
 + createCheckConfig ( ClassFanOutComplexityCheck . class ) ; 
 + String [ ] expected = { 
 + } ; 
 + 
 + try { 
 + createChecker ( checkConfig ) ; 
 + verify ( checkConfig , 
 + getPath ( " metrics " + File . separator + " ClassCouplingCheckTestInput . java " ) , 
 + expected ) ; 
 + } 
 + catch ( Exception ex ) { 
 + / / Exception is not expected 
 + fail ( ) ; 
 + } 
 + } 
 }
