BLEU SCORE: 0.028666091494718774

TEST MSG: Pull # 2293 : Update PowerMock to 1 . 6 . 3
GENERATED MSG: powermock artifacts were moved to test scope as they are required only for UTs

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 1e6a5c7 . . 1b63edf 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 269 , 13 + 269 , 13 @ @ <nl> < dependency > <nl> < groupId > org . powermock < / groupId > <nl> < artifactId > powermock - api - mockito < / artifactId > <nl> - < version > 1 . 6 . 2 < / version > <nl> + < version > 1 . 6 . 3 < / version > <nl> < scope > test < / scope > <nl> < / dependency > <nl> < dependency > <nl> < groupId > org . powermock < / groupId > <nl> < artifactId > powermock - module - junit4 < / artifactId > <nl> - < version > 1 . 6 . 2 < / version > <nl> + < version > 1 . 6 . 3 < / version > <nl> < scope > test < / scope > <nl> < / dependency > <nl> < dependency >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index ee8bfcf . . e7b274a 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1175 , 7 + 1175 , 7 @ @ <nl> < regex > < pattern > . * . checks . imports . CustomImportOrderCheck < / pattern > < branchRate > 98 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . imports . ImportControlCheck < / pattern > < branchRate > 85 < / branchRate > < lineRate > 73 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . imports . ImportControlLoader < / pattern > < branchRate > 72 < / branchRate > < lineRate > 88 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . checks . imports . ImportOrderCheck < / pattern > < branchRate > 91 < / branchRate > < lineRate > 99 < / lineRate > < / regex > <nl> + < regex > < pattern > . * . checks . imports . ImportOrderCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 98 < / lineRate > < / regex > <nl> <nl> <nl> < regex > < pattern > . * . checks . indentation . ArrayInitHandler < / pattern > < branchRate > 83 < / branchRate > < lineRate > 97 < / lineRate > < / regex > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index 24d359b . . 8851859 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 277 , 7 + 277 , 8 @ @ public class ImportOrderCheck <nl> <nl> final boolean isStaticAndNotLastImport = isStatic & & ! lastImportStatic ; <nl> final boolean isNotStaticAndLastImport = ! isStatic & & lastImportStatic ; <nl> - switch ( getAbstractOption ( ) ) { <nl> + final ImportOrderOption abstractOption = getAbstractOption ( ) ; <nl> + switch ( abstractOption ) { <nl> case TOP : <nl> if ( isNotStaticAndLastImport ) { <nl> lastGroup = Integer . MIN _ VALUE ; <nl> @ @ - 305 , 12 + 306 , 13 @ @ public class ImportOrderCheck <nl> break ; <nl> <nl> case UNDER : <nl> - / / previous static but current is non - static <nl> doVisitToken ( ident , isStatic , isNotStaticAndLastImport ) ; <nl> break ; <nl> <nl> default : <nl> - break ; <nl> + throw new IllegalStateException ( <nl> + " Unexpected option for static imports : " + abstractOption . toString ( ) ) ; <nl> + <nl> } <nl> <nl> lastImportLine = ast . findFirstToken ( TokenTypes . SEMI ) . getLineNo ( ) ; <nl> @ @ - 328 , 29 + 330 , 27 @ @ public class ImportOrderCheck <nl> * / <nl> private void doVisitToken ( FullIdent ident , boolean isStatic , <nl> boolean previous ) { <nl> - if ( ident ! = null ) { <nl> - final String name = ident . getText ( ) ; <nl> - final int groupIdx = getGroupNumber ( name ) ; <nl> - final int line = ident . getLineNo ( ) ; <nl> - <nl> - if ( groupIdx > lastGroup ) { <nl> - / / This check should be made more robust to handle <nl> - / / comments and imports that span more than one line . <nl> - if ( ! beforeFirstImport & & separated & & line - lastImportLine < 2 ) { <nl> - log ( line , MSG _ SEPARATION , name ) ; <nl> - } <nl> - } <nl> - else if ( groupIdx = = lastGroup | | sortStaticImportsAlphabetically <nl> - & & isAlphabeticallySortableStaticImport ( isStatic ) ) { <nl> - doVisitTokenInSameGroup ( isStatic , previous , name , line ) ; <nl> - } <nl> - else { <nl> - log ( line , MSG _ ORDERING , name ) ; <nl> + final String name = ident . getText ( ) ; <nl> + final int groupIdx = getGroupNumber ( name ) ; <nl> + final int line = ident . getLineNo ( ) ; <nl> + <nl> + if ( groupIdx > lastGroup ) { <nl> + / / This check should be made more robust to handle <nl> + / / comments and imports that span more than one line . <nl> + if ( ! beforeFirstImport & & separated & & line - lastImportLine < 2 ) { <nl> + log ( line , MSG _ SEPARATION , name ) ; <nl> } <nl> - <nl> - lastGroup = groupIdx ; <nl> - lastImport = name ; <nl> } <nl> + else if ( groupIdx = = lastGroup | | sortStaticImportsAlphabetically <nl> + & & isAlphabeticallySortableStaticImport ( isStatic ) ) { <nl> + doVisitTokenInSameGroup ( isStatic , previous , name , line ) ; <nl> + } <nl> + else { <nl> + log ( line , MSG _ ORDERING , name ) ; <nl> + } <nl> + <nl> + lastGroup = groupIdx ; <nl> + lastImport = name ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> index e845011 . . e97ffa0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> @ @ - 19 , 13 + 19 , 16 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck . MSG _ ORDERING ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck . MSG _ SEPARATION ; <nl> + <nl> import java . io . File ; <nl> + <nl> import org . junit . Test ; <nl> <nl> - import static com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck . MSG _ ORDERING ; <nl> - import static com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck . MSG _ SEPARATION ; <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> <nl> public class ImportOrderCheckTest extends BaseCheckTestSupport { <nl> @ Test <nl> @ @ - 72 , 7 + 75 , 7 @ @ public class ImportOrderCheckTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testSeparated ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( ImportOrderCheck . class ) ; <nl> - checkConfig . addAttribute ( " groups " , " java . awt , javax . swing , java . io " ) ; <nl> + checkConfig . addAttribute ( " groups " , " java . awt , javax . swing , java . io , java . util " ) ; <nl> checkConfig . addAttribute ( " separated " , " true " ) ; <nl> checkConfig . addAttribute ( " ordered " , " false " ) ; <nl> final String [ ] expected = { <nl> @ @ - 94 , 6 + 97 , 16 @ @ public class ImportOrderCheckTest extends BaseCheckTestSupport { <nl> verify ( checkConfig , getPath ( " imports " + File . separator + " InputImportOrderCaseInsensitive . java " ) , expected ) ; <nl> } <nl> <nl> + @ Test ( expected = CheckstyleException . class ) <nl> + public void testInvalidOption ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " option " , " invalid _ option " ) ; <nl> + final String [ ] expected = { } ; <nl> + <nl> + verify ( checkConfig , getPath ( " imports " + File . separator + " InputImportOrder _ Top . java " ) , expected ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testTop ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> @ @ - 265 , 7 + 278 , 7 @ @ public class ImportOrderCheckTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( ImportOrderCheck . class ) ; <nl> checkConfig . addAttribute ( " option " , " above " ) ; <nl> - checkConfig . addAttribute ( " groups " , " org , java " ) ; <nl> + checkConfig . addAttribute ( " groups " , " org , java , sun " ) ; <nl> checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; <nl> final String [ ] expected = { <nl> " 7 : " + getCheckMessage ( MSG _ ORDERING , " java . lang . Math . PI " ) , <nl> @ @ - 282 , 6 + 295 , 7 @ @ public class ImportOrderCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " groups " , " org , java " ) ; <nl> final String [ ] expected = { <nl> " 4 : " + getCheckMessage ( MSG _ ORDERING , " org . abego . treelayout . Configuration . * " ) , <nl> + " 9 : " + getCheckMessage ( MSG _ ORDERING , " org . junit . Test " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " imports " + File . separator <nl> + " InputImportOrderStaticOnDemandGroupOrder . java " ) , expected ) ; <nl> @ @ - 294 , 7 + 308 , 9 @ @ public class ImportOrderCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " option " , " top " ) ; <nl> checkConfig . addAttribute ( " groups " , " org , java " ) ; <nl> checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; <nl> - final String [ ] expected = { } ; <nl> + final String [ ] expected = { <nl> + " 9 : " + getCheckMessage ( MSG _ ORDERING , " org . junit . Test " ) , <nl> + } ; <nl> verify ( checkConfig , getPath ( " imports " + File . separator <nl> + " InputImportOrderStaticOnDemandGroupOrder . java " ) , expected ) ; <nl> } <nl> @ @ - 338 , 4 + 354 , 34 @ @ public class ImportOrderCheckTest extends BaseCheckTestSupport { <nl> verify ( checkConfig , getPath ( " imports " + File . separator <nl> + " InputImportOrderStaticOnDemandGroupOrderBottom . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test ( expected = CheckstyleException . class ) <nl> + public void testGroupWithSlashes ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " groups " , " / ^ javax " ) ; <nl> + final String [ ] expected = { } ; <nl> + <nl> + verify ( checkConfig , getPath ( " imports " + File . separator + " InputImportOrder . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGroupWithDot ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " groups " , " java . awt . " ) ; <nl> + final String [ ] expected = { } ; <nl> + <nl> + verify ( checkConfig , getPath ( " imports " + File . separator + " InputImportOrder _ NoFailureForRedundantImports . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMultiplePatternMatches ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " groups " , " / java / , / rga / , / myO / , / org / , / organ . / " ) ; <nl> + final String [ ] expected = { } ; <nl> + <nl> + verify ( checkConfig , new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / " <nl> + + " checkstyle / imports / " <nl> + + " InputImportOrder _ MultiplePatternMatches . java " ) . getCanonicalPath ( ) , expected ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / imports / InputImportOrder _ MultiplePatternMatches . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / imports / InputImportOrder _ MultiplePatternMatches . java <nl> new file mode 100644 <nl> index 0000000 . . 8ed7ab6 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / imports / InputImportOrder _ MultiplePatternMatches . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . imports ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import org . * ; <nl> + import org . myOrgorgan . Test ; <nl> + <nl> + public class InputImportOrder _ WildcardUnspecified { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrder . java <nl> index 1ad380e . . 3286efe 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrder . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrder . java <nl> @ @ - 15 , 5 + 15 , 8 @ @ import java . io . InputStream ; <nl> import java . io . Reader ; <nl> import static javax . swing . WindowConstants . * ; <nl> <nl> + import static sun . tools . util . ModifierFilter . ALL _ ACCESS ; <nl> + import static sun . tools . util . ModifierFilter . PACKAGE ; <nl> + <nl> public class InputImportOrder { <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrderStaticOnDemandGroupOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrderStaticOnDemandGroupOrder . java <nl> index 7ebac90 . . 5a4a391 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrderStaticOnDemandGroupOrder . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrderStaticOnDemandGroupOrder . java <nl> @ @ - 6 , 6 + 6 , 7 @ @ import static org . abego . treelayout . Configuration . * ; <nl> import org . * ; <nl> <nl> import java . util . Set ; <nl> + import org . junit . Test ; <nl> <nl> public class InputImportOrderStaticOnDemandGroupOrder <nl> {

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 1e6a5c7 . . 1b63edf 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 269 , 13 + 269 , 13 @ @ 
 < dependency > 
 < groupId > org . powermock < / groupId > 
 < artifactId > powermock - api - mockito < / artifactId > 
 - < version > 1 . 6 . 2 < / version > 
 + < version > 1 . 6 . 3 < / version > 
 < scope > test < / scope > 
 < / dependency > 
 < dependency > 
 < groupId > org . powermock < / groupId > 
 < artifactId > powermock - module - junit4 < / artifactId > 
 - < version > 1 . 6 . 2 < / version > 
 + < version > 1 . 6 . 3 < / version > 
 < scope > test < / scope > 
 < / dependency > 
 < dependency >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index ee8bfcf . . e7b274a 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1175 , 7 + 1175 , 7 @ @ 
 < regex > < pattern > . * . checks . imports . CustomImportOrderCheck < / pattern > < branchRate > 98 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . imports . ImportControlCheck < / pattern > < branchRate > 85 < / branchRate > < lineRate > 73 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . imports . ImportControlLoader < / pattern > < branchRate > 72 < / branchRate > < lineRate > 88 < / lineRate > < / regex > 
 - < regex > < pattern > . * . checks . imports . ImportOrderCheck < / pattern > < branchRate > 91 < / branchRate > < lineRate > 99 < / lineRate > < / regex > 
 + < regex > < pattern > . * . checks . imports . ImportOrderCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 98 < / lineRate > < / regex > 
 
 
 < regex > < pattern > . * . checks . indentation . ArrayInitHandler < / pattern > < branchRate > 83 < / branchRate > < lineRate > 97 < / lineRate > < / regex > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index 24d359b . . 8851859 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 277 , 7 + 277 , 8 @ @ public class ImportOrderCheck 
 
 final boolean isStaticAndNotLastImport = isStatic & & ! lastImportStatic ; 
 final boolean isNotStaticAndLastImport = ! isStatic & & lastImportStatic ; 
 - switch ( getAbstractOption ( ) ) { 
 + final ImportOrderOption abstractOption = getAbstractOption ( ) ; 
 + switch ( abstractOption ) { 
 case TOP : 
 if ( isNotStaticAndLastImport ) { 
 lastGroup = Integer . MIN _ VALUE ; 
 @ @ - 305 , 12 + 306 , 13 @ @ public class ImportOrderCheck 
 break ; 
 
 case UNDER : 
 - / / previous static but current is non - static 
 doVisitToken ( ident , isStatic , isNotStaticAndLastImport ) ; 
 break ; 
 
 default : 
 - break ; 
 + throw new IllegalStateException ( 
 + " Unexpected option for static imports : " + abstractOption . toString ( ) ) ; 
 + 
 } 
 
 lastImportLine = ast . findFirstToken ( TokenTypes . SEMI ) . getLineNo ( ) ; 
 @ @ - 328 , 29 + 330 , 27 @ @ public class ImportOrderCheck 
 * / 
 private void doVisitToken ( FullIdent ident , boolean isStatic , 
 boolean previous ) { 
 - if ( ident ! = null ) { 
 - final String name = ident . getText ( ) ; 
 - final int groupIdx = getGroupNumber ( name ) ; 
 - final int line = ident . getLineNo ( ) ; 
 - 
 - if ( groupIdx > lastGroup ) { 
 - / / This check should be made more robust to handle 
 - / / comments and imports that span more than one line . 
 - if ( ! beforeFirstImport & & separated & & line - lastImportLine < 2 ) { 
 - log ( line , MSG _ SEPARATION , name ) ; 
 - } 
 - } 
 - else if ( groupIdx = = lastGroup | | sortStaticImportsAlphabetically 
 - & & isAlphabeticallySortableStaticImport ( isStatic ) ) { 
 - doVisitTokenInSameGroup ( isStatic , previous , name , line ) ; 
 - } 
 - else { 
 - log ( line , MSG _ ORDERING , name ) ; 
 + final String name = ident . getText ( ) ; 
 + final int groupIdx = getGroupNumber ( name ) ; 
 + final int line = ident . getLineNo ( ) ; 
 + 
 + if ( groupIdx > lastGroup ) { 
 + / / This check should be made more robust to handle 
 + / / comments and imports that span more than one line . 
 + if ( ! beforeFirstImport & & separated & & line - lastImportLine < 2 ) { 
 + log ( line , MSG _ SEPARATION , name ) ; 
 } 
 - 
 - lastGroup = groupIdx ; 
 - lastImport = name ; 
 } 
 + else if ( groupIdx = = lastGroup | | sortStaticImportsAlphabetically 
 + & & isAlphabeticallySortableStaticImport ( isStatic ) ) { 
 + doVisitTokenInSameGroup ( isStatic , previous , name , line ) ; 
 + } 
 + else { 
 + log ( line , MSG _ ORDERING , name ) ; 
 + } 
 + 
 + lastGroup = groupIdx ; 
 + lastImport = name ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 index e845011 . . e97ffa0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 @ @ - 19 , 13 + 19 , 16 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . imports ; 
 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import static com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck . MSG _ ORDERING ; 
 + import static com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck . MSG _ SEPARATION ; 
 + 
 import java . io . File ; 
 + 
 import org . junit . Test ; 
 
 - import static com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck . MSG _ ORDERING ; 
 - import static com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck . MSG _ SEPARATION ; 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 
 public class ImportOrderCheckTest extends BaseCheckTestSupport { 
 @ Test 
 @ @ - 72 , 7 + 75 , 7 @ @ public class ImportOrderCheckTest extends BaseCheckTestSupport { 
 @ Test 
 public void testSeparated ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( ImportOrderCheck . class ) ; 
 - checkConfig . addAttribute ( " groups " , " java . awt , javax . swing , java . io " ) ; 
 + checkConfig . addAttribute ( " groups " , " java . awt , javax . swing , java . io , java . util " ) ; 
 checkConfig . addAttribute ( " separated " , " true " ) ; 
 checkConfig . addAttribute ( " ordered " , " false " ) ; 
 final String [ ] expected = { 
 @ @ - 94 , 6 + 97 , 16 @ @ public class ImportOrderCheckTest extends BaseCheckTestSupport { 
 verify ( checkConfig , getPath ( " imports " + File . separator + " InputImportOrderCaseInsensitive . java " ) , expected ) ; 
 } 
 
 + @ Test ( expected = CheckstyleException . class ) 
 + public void testInvalidOption ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " option " , " invalid _ option " ) ; 
 + final String [ ] expected = { } ; 
 + 
 + verify ( checkConfig , getPath ( " imports " + File . separator + " InputImportOrder _ Top . java " ) , expected ) ; 
 + } 
 + 
 @ Test 
 public void testTop ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 @ @ - 265 , 7 + 278 , 7 @ @ public class ImportOrderCheckTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( ImportOrderCheck . class ) ; 
 checkConfig . addAttribute ( " option " , " above " ) ; 
 - checkConfig . addAttribute ( " groups " , " org , java " ) ; 
 + checkConfig . addAttribute ( " groups " , " org , java , sun " ) ; 
 checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; 
 final String [ ] expected = { 
 " 7 : " + getCheckMessage ( MSG _ ORDERING , " java . lang . Math . PI " ) , 
 @ @ - 282 , 6 + 295 , 7 @ @ public class ImportOrderCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " groups " , " org , java " ) ; 
 final String [ ] expected = { 
 " 4 : " + getCheckMessage ( MSG _ ORDERING , " org . abego . treelayout . Configuration . * " ) , 
 + " 9 : " + getCheckMessage ( MSG _ ORDERING , " org . junit . Test " ) , 
 } ; 
 verify ( checkConfig , getPath ( " imports " + File . separator 
 + " InputImportOrderStaticOnDemandGroupOrder . java " ) , expected ) ; 
 @ @ - 294 , 7 + 308 , 9 @ @ public class ImportOrderCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " option " , " top " ) ; 
 checkConfig . addAttribute ( " groups " , " org , java " ) ; 
 checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; 
 - final String [ ] expected = { } ; 
 + final String [ ] expected = { 
 + " 9 : " + getCheckMessage ( MSG _ ORDERING , " org . junit . Test " ) , 
 + } ; 
 verify ( checkConfig , getPath ( " imports " + File . separator 
 + " InputImportOrderStaticOnDemandGroupOrder . java " ) , expected ) ; 
 } 
 @ @ - 338 , 4 + 354 , 34 @ @ public class ImportOrderCheckTest extends BaseCheckTestSupport { 
 verify ( checkConfig , getPath ( " imports " + File . separator 
 + " InputImportOrderStaticOnDemandGroupOrderBottom . java " ) , expected ) ; 
 } 
 + 
 + @ Test ( expected = CheckstyleException . class ) 
 + public void testGroupWithSlashes ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " groups " , " / ^ javax " ) ; 
 + final String [ ] expected = { } ; 
 + 
 + verify ( checkConfig , getPath ( " imports " + File . separator + " InputImportOrder . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testGroupWithDot ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " groups " , " java . awt . " ) ; 
 + final String [ ] expected = { } ; 
 + 
 + verify ( checkConfig , getPath ( " imports " + File . separator + " InputImportOrder _ NoFailureForRedundantImports . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testMultiplePatternMatches ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " groups " , " / java / , / rga / , / myO / , / org / , / organ . / " ) ; 
 + final String [ ] expected = { } ; 
 + 
 + verify ( checkConfig , new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / " 
 + + " checkstyle / imports / " 
 + + " InputImportOrder _ MultiplePatternMatches . java " ) . getCanonicalPath ( ) , expected ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / imports / InputImportOrder _ MultiplePatternMatches . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / imports / InputImportOrder _ MultiplePatternMatches . java 
 new file mode 100644 
 index 0000000 . . 8ed7ab6 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / imports / InputImportOrder _ MultiplePatternMatches . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . imports ; 
 + 
 + import java . io . File ; 
 + 
 + import org . * ; 
 + import org . myOrgorgan . Test ; 
 + 
 + public class InputImportOrder _ WildcardUnspecified { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrder . java 
 index 1ad380e . . 3286efe 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrder . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrder . java 
 @ @ - 15 , 5 + 15 , 8 @ @ import java . io . InputStream ; 
 import java . io . Reader ; 
 import static javax . swing . WindowConstants . * ; 
 
 + import static sun . tools . util . ModifierFilter . ALL _ ACCESS ; 
 + import static sun . tools . util . ModifierFilter . PACKAGE ; 
 + 
 public class InputImportOrder { 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrderStaticOnDemandGroupOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrderStaticOnDemandGroupOrder . java 
 index 7ebac90 . . 5a4a391 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrderStaticOnDemandGroupOrder . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputImportOrderStaticOnDemandGroupOrder . java 
 @ @ - 6 , 6 + 6 , 7 @ @ import static org . abego . treelayout . Configuration . * ; 
 import org . * ; 
 
 import java . util . Set ; 
 + import org . junit . Test ; 
 
 public class InputImportOrderStaticOnDemandGroupOrder 
 {
