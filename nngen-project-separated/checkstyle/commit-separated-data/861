BLEU SCORE: 0.03089055318156698

TEST MSG: Issue # 4165 : Split and Organize Checkstyle inputs by Test for EqualsAvoidNullCheckTest
GENERATED MSG: reimplement EqualsAvoidNullCheck , # 1377

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java <nl> index 8462b69 . . 01155e6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java <nl> @ @ - 35 , 7 + 35 , 7 @ @ public class EqualsAvoidNullCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator + " equalsavoidnull " + File . separator + filename ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java <nl> deleted file mode 100644 <nl> index 406c022 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java <nl> + + + / dev / null <nl> @ @ - 1 , 425 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - import java . util . Map ; <nl> - public class InputEqualsAvoidNull { <nl> - <nl> - public boolean equals ( Object o ) { <nl> - return false ; <nl> - } <nl> - / / antoher comment <nl> - / * * <nl> - * methods that should get flagged <nl> - * @ return <nl> - * / <nl> - public void flagForEquals ( ) { <nl> - <nl> - Object o = new Object ( ) ; <nl> - String s = " pizza " ; <nl> - <nl> - o . equals ( " hot pizza " ) / * comment test * / ; <nl> - <nl> - o . equals ( s = " cold pizza " ) ; <nl> - <nl> - o . equals ( ( ( s = " cold pizza " ) ) ) ; <nl> - <nl> - o . equals ( " cheese " + " ham " + " sauce " ) ; <nl> - <nl> - o . equals ( ( " cheese " + " ham " ) + " sauce " ) ; <nl> - <nl> - o . equals ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; <nl> - } <nl> - <nl> - / * * <nl> - * methods that should get flagged <nl> - * / <nl> - public void flagForEqualsIgnoreCase ( ) { <nl> - String s = " pizza " ; <nl> - <nl> - s . equalsIgnoreCase ( " hot pizza " ) ; <nl> - <nl> - s . equalsIgnoreCase ( s = " cold pizza " ) ; <nl> - <nl> - s . equalsIgnoreCase ( ( ( s = " cold pizza " ) ) ) ; <nl> - <nl> - s . equalsIgnoreCase ( " cheese " + " ham " + " sauce " ) ; <nl> - <nl> - s . equalsIgnoreCase ( ( " cheese " + " ham " ) + " sauce " ) ; <nl> - <nl> - s . equalsIgnoreCase ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; <nl> - } <nl> - <nl> - / * * <nl> - * methods that should get flagged <nl> - * / <nl> - public void flagForBoth ( ) { <nl> - Object o = new Object ( ) ; <nl> - String s = " pizza " ; <nl> - <nl> - o . equals ( " hot pizza " ) ; <nl> - <nl> - o . equals ( s = " cold pizza " ) ; <nl> - <nl> - o . equals ( ( ( s = " cold pizza " ) ) ) ; <nl> - <nl> - o . equals ( " cheese " + " ham " + " sauce " ) ; <nl> - <nl> - o . equals ( ( " cheese " + " ham " ) + " sauce " ) ; <nl> - <nl> - o . equals ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; <nl> - <nl> - s . equalsIgnoreCase ( " hot pizza " ) ; <nl> - <nl> - s . equalsIgnoreCase ( s = " cold pizza " ) ; <nl> - <nl> - s . equalsIgnoreCase ( ( ( s = " cold pizza " ) ) ) ; <nl> - <nl> - s . equalsIgnoreCase ( " cheese " + " ham " + " sauce " ) ; <nl> - <nl> - s . equalsIgnoreCase ( ( " cheese " + " ham " ) + " sauce " ) ; <nl> - <nl> - s . equalsIgnoreCase ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * methods that should not get flagged <nl> - * <nl> - * @ return <nl> - * / <nl> - public void noFlagForEquals ( ) { <nl> - Object o = new Object ( ) ; <nl> - String s = " peperoni " ; <nl> - <nl> - o . equals ( s + = " mushrooms " ) ; <nl> - <nl> - ( s = " thin crust " ) . equals ( " thick crust " ) ; <nl> - <nl> - ( s + = " garlic " ) . equals ( " basil " ) ; <nl> - <nl> - ( " Chicago Style " + " NY Style " ) . equals ( " California Style " + " Any Style " ) ; <nl> - <nl> - equals ( " peppers " ) ; <nl> - <nl> - " onions " . equals ( o ) ; <nl> - <nl> - o . equals ( new Object ( ) ) ; <nl> - <nl> - o . equals ( equals ( o ) ) ; <nl> - <nl> - equals ( " yummy " ) ; <nl> - <nl> - new Object ( ) . equals ( " more cheese " ) ; <nl> - <nl> - InputEqualsAvoidNullOutter outter = new InputEqualsAvoidNullOutter ( ) ; <nl> - <nl> - outter . new InputEqualsAvoidNullInner ( ) . equals ( " eat pizza and enjoy inner classes " ) ; <nl> - } <nl> - <nl> - / * * <nl> - * methods that should not get flagged <nl> - * / <nl> - public void noFlagForEqualsIgnoreCase ( ) { <nl> - String s = " peperoni " ; <nl> - String s1 = " tasty " ; <nl> - <nl> - s . equalsIgnoreCase ( s + = " mushrooms " ) ; <nl> - <nl> - s1 . equalsIgnoreCase ( s + = " mushrooms " ) ; <nl> - <nl> - ( s = " thin crust " ) . equalsIgnoreCase ( " thick crust " ) ; <nl> - <nl> - ( s + = " garlic " ) . equalsIgnoreCase ( " basil " ) ; <nl> - <nl> - ( " Chicago Style " + " NY Style " ) . equalsIgnoreCase ( " California Style " + " Any Style " ) ; <nl> - <nl> - " onions " . equalsIgnoreCase ( s ) ; <nl> - <nl> - s . equalsIgnoreCase ( new String ( ) ) ; <nl> - <nl> - s . equals ( s1 ) ; <nl> - <nl> - new String ( ) . equalsIgnoreCase ( " more cheese " ) ; <nl> - <nl> - } <nl> - <nl> - public void noFlagForBoth ( ) { <nl> - Object o = new Object ( ) ; <nl> - String s = " peperoni " ; <nl> - String s1 = " tasty " ; <nl> - <nl> - o . equals ( s + = " mushrooms " ) ; <nl> - <nl> - ( s = " thin crust " ) . equals ( " thick crust " ) ; <nl> - <nl> - ( s + = " garlic " ) . equals ( " basil " ) ; <nl> - <nl> - ( " Chicago Style " + " NY Style " ) . equals ( " California Style " + " Any Style " ) ; <nl> - <nl> - equals ( " peppers " ) ; <nl> - <nl> - " onions " . equals ( o ) ; <nl> - <nl> - o . equals ( new Object ( ) ) ; <nl> - <nl> - o . equals ( equals ( o ) ) ; <nl> - <nl> - equals ( " yummy " ) ; <nl> - <nl> - new Object ( ) . equals ( " more cheese " ) ; <nl> - <nl> - InputEqualsAvoidNullOutter outter = new InputEqualsAvoidNullOutter ( ) ; <nl> - <nl> - outter . new InputEqualsAvoidNullInner ( ) . equals ( " eat pizza and enjoy inner classes " ) ; <nl> - <nl> - s . equalsIgnoreCase ( s + = " mushrooms " ) ; <nl> - <nl> - s1 . equalsIgnoreCase ( s + = " mushrooms " ) ; <nl> - <nl> - ( s = " thin crust " ) . equalsIgnoreCase ( " thick crust " ) ; <nl> - <nl> - ( s + = " garlic " ) . equalsIgnoreCase ( " basil " ) ; <nl> - <nl> - ( " Chicago Style " + " NY Style " ) . equalsIgnoreCase ( " California Style " + " Any Style " ) ; <nl> - <nl> - " onions " . equalsIgnoreCase ( s ) ; <nl> - <nl> - s . equalsIgnoreCase ( new String ( ) ) ; <nl> - <nl> - s . equals ( s1 ) ; <nl> - <nl> - new String ( ) . equalsIgnoreCase ( " more cheese " ) ; <nl> - <nl> - } <nl> - <nl> - } <nl> - <nl> - class InputEqualsAvoidNullOutter { <nl> - public class InputEqualsAvoidNullInner { <nl> - 	 public boolean equals ( Object o ) { <nl> - 	 return true ; <nl> - 	 } <nl> - } <nl> - } <nl> - <nl> - class MyString { <nl> - public boolean equals ( ) { <nl> - return true ; <nl> - } <nl> - <nl> - public boolean equals ( String s1 ) { <nl> - return true ; <nl> - } <nl> - <nl> - public boolean equalsIgnoreCase ( ) { <nl> - return true ; <nl> - } <nl> - <nl> - public boolean equalsIgnoreCase ( String s1 ) { <nl> - return true ; <nl> - } <nl> - <nl> - private String pizza ; <nl> - <nl> - public void main ( ) { <nl> - MyString myString = new MyString ( ) ; <nl> - myString . equals ( ) ; <nl> - myString . equals ( " what " ) ; <nl> - myString . equalsIgnoreCase ( ) ; <nl> - myString . equalsIgnoreCase ( " what " ) ; <nl> - myString . equals ( this . pizza = " cold pizza " ) ; <nl> - } <nl> - } <nl> - <nl> - class NewTest { <nl> - static String classVar ; <nl> - String instanceVar ; <nl> - NewTest testObj = new NewTest ( " " ) ; <nl> - <nl> - NewTest ( String param ) { <nl> - param . equals ( " " ) ; <nl> - } <nl> - <nl> - public void method ( String param ) { <nl> - final String localVar = " " ; <nl> - <nl> - localVar . equals ( " " ) ; <nl> - param . equals ( " " ) ; <nl> - <nl> - classVar . equals ( " " ) ; <nl> - instanceVar . equals ( " " ) ; <nl> - NewTest . classVar . equals ( " " ) ; <nl> - this . classVar . equals ( " " ) ; <nl> - this . instanceVar . equals ( " " ) ; <nl> - <nl> - NewTest testObj = new NewTest ( " " ) ; <nl> - this . testObj . instanceVar . equals ( " " ) ; / / not violated , too confusing <nl> - testObj . classVar . equals ( " " ) ; / / not violated <nl> - <nl> - for ( Nested instanceVar = new Nested ( ) ; instanceVar ! = null ; ) { <nl> - instanceVar . equals ( 1 ) ; <nl> - if ( instanceVar . equals ( " " ) ) { <nl> - instanceVar . equals ( " " ) ; <nl> - } <nl> - } <nl> - <nl> - class Inner { <nl> - String instanceVarInner ; <nl> - <nl> - public void main ( ) { <nl> - classVar . equals ( " " ) ; <nl> - instanceVar . equals ( " " ) ; <nl> - NewTest . classVar . equals ( " " ) ; <nl> - <nl> - instanceVarInner . equals ( " " ) ; <nl> - this . instanceVarInner . equals ( " " ) ; <nl> - localVar . equals ( " " ) ; <nl> - <nl> - NewTest testObj = new NewTest ( " " ) ; <nl> - testObj . instanceVar . equals ( " " ) ; / / not violated <nl> - testObj . classVar . equals ( " " ) ; / / not violated <nl> - <nl> - Inner testInnerObj = new Inner ( ) ; <nl> - testInnerObj . instanceVarInner . equals ( " " ) ; / / not violated <nl> - } <nl> - } <nl> - <nl> - Inner testInnerObj = new Inner ( ) ; <nl> - testInnerObj . instanceVarInner . equals ( " " ) ; / / not violated <nl> - <nl> - Nested . nestedClassVar . equals ( " " ) ; / / not violated , because the equals call is not <nl> - Nested Nested = new Nested ( ) ; / / embedded in class Nested , what can lead to really <nl> - Nested . nestedInstanceVar . equals ( " " ) ; / / confusing constructions . But could be improved . <nl> - Nested . nestedClassVar . equals ( " " ) ; <nl> - } <nl> - static { <nl> - final String s = " " ; <nl> - s . equals ( " " ) ; <nl> - { <nl> - final String x = " " ; <nl> - class A { <nl> - void foo ( ) { <nl> - s . equals ( " " ) ; <nl> - x . equals ( " " ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - void foo ( String param ) { <nl> - try { <nl> - param . equals ( " " ) ; <nl> - do { <nl> - String s = " " ; <nl> - s . equals ( " " ) ; <nl> - } while ( param . equals ( " " ) ) ; <nl> - } catch ( Exception e ) { <nl> - while ( param . equals ( " " ) ) { <nl> - for ( String s = " " ; s . equals ( " " ) ; ) { <nl> - if ( s . equals ( " " ) ) { <nl> - synchronized ( this ) { <nl> - switch ( s ) { <nl> - case " 1 " : String str = " " ; str . equals ( " " ) ; <nl> - case " 2 " : s . equals ( " " ) ; str = " " ; str . equals ( " " ) ; <nl> - case " 3 " : param . equals ( " " ) ; <nl> - break ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> - static class Nested { <nl> - static String nestedClassVar ; <nl> - String nestedInstanceVar ; <nl> - public void method ( ) { <nl> - classVar . equals ( " " ) ; <nl> - NewTest . classVar . equals ( " " ) ; <nl> - this . nestedInstanceVar . equals ( " " ) ; <nl> - nestedClassVar . equals ( " " ) ; <nl> - nestedInstanceVar . equals ( " " ) ; <nl> - <nl> - class Inner { <nl> - public void method ( ) { <nl> - classVar . equals ( " " ) ; <nl> - NewTest . classVar . equals ( " " ) ; <nl> - nestedClassVar . equals ( " " ) ; <nl> - nestedInstanceVar . equals ( " " ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - enum EmbeddedEnum { <nl> - A ( 129 ) , <nl> - B ( 283 ) , <nl> - C ( 1212 ) { <nl> - String constDefVar ; <nl> - public void doSomething ( ) { <nl> - constDefVar . equals ( " " ) ; <nl> - } <nl> - } ; <nl> - <nl> - Map . Entry < String , Long > enumInstance ; <nl> - <nl> - EmbeddedEnum ( int i ) { <nl> - enumInstance . equals ( " " ) ; <nl> - } <nl> - <nl> - public static void doSomethingStatic ( ) { <nl> - enumStatic . equals ( " " ) ; <nl> - enumStatic . equals ( null ) ; <nl> - } <nl> - static String enumStatic ; <nl> - } <nl> - <nl> - private String foo ( ) { return " " ; } <nl> - private Object foo ( int i ) { return i ; } <nl> - <nl> - Object o2 = new Object ( ) ; <nl> - Object o3 = new Object ( ) ; <nl> - private void bar ( ) { <nl> - foo ( ) . equals ( " " ) ; / / methods are not checked <nl> - foo ( 0 ) . equals ( " " ) ; <nl> - this . foo ( ) . equals ( " " ) ; <nl> - Object o1 = new Object ( ) ; o1 . equals ( " " ) ; <nl> - o2 . equals ( " " ) ; String o2 = " " ; <nl> - o3 . equals ( " " ) ; <nl> - String o3 = " " ; <nl> - } <nl> - } <nl> - class Anonymous { <nl> - public static void main ( String [ ] args ) { <nl> - Runnable anonym = new Runnable ( ) { <nl> - String nullableStr = null ; <nl> - public void run ( ) { <nl> - nullableStr . equals ( " Null " ) ; <nl> - } ; <nl> - } ; <nl> - Object nullableStr = new Object ( ) ; <nl> - nullableStr . equals ( " " ) ; <nl> - } <nl> - { } <nl> - } <nl> - <nl> - enum TestEnum { <nl> - ONE ; <nl> - public void foo ( ) { <nl> - TestEnum . ONE . equals ( this ) ; <nl> - this . ONE . equals ( this ) ; <nl> - } <nl> - } <nl> - <nl> - class TestConcatenations { <nl> - String s = null ; <nl> - <nl> - void foo ( ) { <nl> - s . equals ( s + s ) ; <nl> - s . equals ( " a " + " b " ) ; <nl> - s . equals ( getInt ( ) + s ) ; <nl> - s . equals ( getInt ( ) + getInt ( ) ) ; <nl> - } <nl> - <nl> - int getInt ( ) { <nl> - return ( Integer ) null ; <nl> - } <nl> - } <nl> - <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java <nl> new file mode 100644 <nl> index 0000000 . . e01331d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java <nl> @ @ - 0 , 0 + 1 , 425 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . equalsavoidnull ; <nl> + import java . util . Map ; <nl> + public class InputEqualsAvoidNull { <nl> + <nl> + public boolean equals ( Object o ) { <nl> + return false ; <nl> + } <nl> + / / antoher comment <nl> + / * * <nl> + * methods that should get flagged <nl> + * @ return <nl> + * / <nl> + public void flagForEquals ( ) { <nl> + <nl> + Object o = new Object ( ) ; <nl> + String s = " pizza " ; <nl> + <nl> + o . equals ( " hot pizza " ) / * comment test * / ; <nl> + <nl> + o . equals ( s = " cold pizza " ) ; <nl> + <nl> + o . equals ( ( ( s = " cold pizza " ) ) ) ; <nl> + <nl> + o . equals ( " cheese " + " ham " + " sauce " ) ; <nl> + <nl> + o . equals ( ( " cheese " + " ham " ) + " sauce " ) ; <nl> + <nl> + o . equals ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * methods that should get flagged <nl> + * / <nl> + public void flagForEqualsIgnoreCase ( ) { <nl> + String s = " pizza " ; <nl> + <nl> + s . equalsIgnoreCase ( " hot pizza " ) ; <nl> + <nl> + s . equalsIgnoreCase ( s = " cold pizza " ) ; <nl> + <nl> + s . equalsIgnoreCase ( ( ( s = " cold pizza " ) ) ) ; <nl> + <nl> + s . equalsIgnoreCase ( " cheese " + " ham " + " sauce " ) ; <nl> + <nl> + s . equalsIgnoreCase ( ( " cheese " + " ham " ) + " sauce " ) ; <nl> + <nl> + s . equalsIgnoreCase ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * methods that should get flagged <nl> + * / <nl> + public void flagForBoth ( ) { <nl> + Object o = new Object ( ) ; <nl> + String s = " pizza " ; <nl> + <nl> + o . equals ( " hot pizza " ) ; <nl> + <nl> + o . equals ( s = " cold pizza " ) ; <nl> + <nl> + o . equals ( ( ( s = " cold pizza " ) ) ) ; <nl> + <nl> + o . equals ( " cheese " + " ham " + " sauce " ) ; <nl> + <nl> + o . equals ( ( " cheese " + " ham " ) + " sauce " ) ; <nl> + <nl> + o . equals ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; <nl> + <nl> + s . equalsIgnoreCase ( " hot pizza " ) ; <nl> + <nl> + s . equalsIgnoreCase ( s = " cold pizza " ) ; <nl> + <nl> + s . equalsIgnoreCase ( ( ( s = " cold pizza " ) ) ) ; <nl> + <nl> + s . equalsIgnoreCase ( " cheese " + " ham " + " sauce " ) ; <nl> + <nl> + s . equalsIgnoreCase ( ( " cheese " + " ham " ) + " sauce " ) ; <nl> + <nl> + s . equalsIgnoreCase ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * methods that should not get flagged <nl> + * <nl> + * @ return <nl> + * / <nl> + public void noFlagForEquals ( ) { <nl> + Object o = new Object ( ) ; <nl> + String s = " peperoni " ; <nl> + <nl> + o . equals ( s + = " mushrooms " ) ; <nl> + <nl> + ( s = " thin crust " ) . equals ( " thick crust " ) ; <nl> + <nl> + ( s + = " garlic " ) . equals ( " basil " ) ; <nl> + <nl> + ( " Chicago Style " + " NY Style " ) . equals ( " California Style " + " Any Style " ) ; <nl> + <nl> + equals ( " peppers " ) ; <nl> + <nl> + " onions " . equals ( o ) ; <nl> + <nl> + o . equals ( new Object ( ) ) ; <nl> + <nl> + o . equals ( equals ( o ) ) ; <nl> + <nl> + equals ( " yummy " ) ; <nl> + <nl> + new Object ( ) . equals ( " more cheese " ) ; <nl> + <nl> + InputEqualsAvoidNullOutter outter = new InputEqualsAvoidNullOutter ( ) ; <nl> + <nl> + outter . new InputEqualsAvoidNullInner ( ) . equals ( " eat pizza and enjoy inner classes " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * methods that should not get flagged <nl> + * / <nl> + public void noFlagForEqualsIgnoreCase ( ) { <nl> + String s = " peperoni " ; <nl> + String s1 = " tasty " ; <nl> + <nl> + s . equalsIgnoreCase ( s + = " mushrooms " ) ; <nl> + <nl> + s1 . equalsIgnoreCase ( s + = " mushrooms " ) ; <nl> + <nl> + ( s = " thin crust " ) . equalsIgnoreCase ( " thick crust " ) ; <nl> + <nl> + ( s + = " garlic " ) . equalsIgnoreCase ( " basil " ) ; <nl> + <nl> + ( " Chicago Style " + " NY Style " ) . equalsIgnoreCase ( " California Style " + " Any Style " ) ; <nl> + <nl> + " onions " . equalsIgnoreCase ( s ) ; <nl> + <nl> + s . equalsIgnoreCase ( new String ( ) ) ; <nl> + <nl> + s . equals ( s1 ) ; <nl> + <nl> + new String ( ) . equalsIgnoreCase ( " more cheese " ) ; <nl> + <nl> + } <nl> + <nl> + public void noFlagForBoth ( ) { <nl> + Object o = new Object ( ) ; <nl> + String s = " peperoni " ; <nl> + String s1 = " tasty " ; <nl> + <nl> + o . equals ( s + = " mushrooms " ) ; <nl> + <nl> + ( s = " thin crust " ) . equals ( " thick crust " ) ; <nl> + <nl> + ( s + = " garlic " ) . equals ( " basil " ) ; <nl> + <nl> + ( " Chicago Style " + " NY Style " ) . equals ( " California Style " + " Any Style " ) ; <nl> + <nl> + equals ( " peppers " ) ; <nl> + <nl> + " onions " . equals ( o ) ; <nl> + <nl> + o . equals ( new Object ( ) ) ; <nl> + <nl> + o . equals ( equals ( o ) ) ; <nl> + <nl> + equals ( " yummy " ) ; <nl> + <nl> + new Object ( ) . equals ( " more cheese " ) ; <nl> + <nl> + InputEqualsAvoidNullOutter outter = new InputEqualsAvoidNullOutter ( ) ; <nl> + <nl> + outter . new InputEqualsAvoidNullInner ( ) . equals ( " eat pizza and enjoy inner classes " ) ; <nl> + <nl> + s . equalsIgnoreCase ( s + = " mushrooms " ) ; <nl> + <nl> + s1 . equalsIgnoreCase ( s + = " mushrooms " ) ; <nl> + <nl> + ( s = " thin crust " ) . equalsIgnoreCase ( " thick crust " ) ; <nl> + <nl> + ( s + = " garlic " ) . equalsIgnoreCase ( " basil " ) ; <nl> + <nl> + ( " Chicago Style " + " NY Style " ) . equalsIgnoreCase ( " California Style " + " Any Style " ) ; <nl> + <nl> + " onions " . equalsIgnoreCase ( s ) ; <nl> + <nl> + s . equalsIgnoreCase ( new String ( ) ) ; <nl> + <nl> + s . equals ( s1 ) ; <nl> + <nl> + new String ( ) . equalsIgnoreCase ( " more cheese " ) ; <nl> + <nl> + } <nl> + <nl> + } <nl> + <nl> + class InputEqualsAvoidNullOutter { <nl> + public class InputEqualsAvoidNullInner { <nl> + 	 public boolean equals ( Object o ) { <nl> + 	 return true ; <nl> + 	 } <nl> + } <nl> + } <nl> + <nl> + class MyString { <nl> + public boolean equals ( ) { <nl> + return true ; <nl> + } <nl> + <nl> + public boolean equals ( String s1 ) { <nl> + return true ; <nl> + } <nl> + <nl> + public boolean equalsIgnoreCase ( ) { <nl> + return true ; <nl> + } <nl> + <nl> + public boolean equalsIgnoreCase ( String s1 ) { <nl> + return true ; <nl> + } <nl> + <nl> + private String pizza ; <nl> + <nl> + public void main ( ) { <nl> + MyString myString = new MyString ( ) ; <nl> + myString . equals ( ) ; <nl> + myString . equals ( " what " ) ; <nl> + myString . equalsIgnoreCase ( ) ; <nl> + myString . equalsIgnoreCase ( " what " ) ; <nl> + myString . equals ( this . pizza = " cold pizza " ) ; <nl> + } <nl> + } <nl> + <nl> + class NewTest { <nl> + static String classVar ; <nl> + String instanceVar ; <nl> + NewTest testObj = new NewTest ( " " ) ; <nl> + <nl> + NewTest ( String param ) { <nl> + param . equals ( " " ) ; <nl> + } <nl> + <nl> + public void method ( String param ) { <nl> + final String localVar = " " ; <nl> + <nl> + localVar . equals ( " " ) ; <nl> + param . equals ( " " ) ; <nl> + <nl> + classVar . equals ( " " ) ; <nl> + instanceVar . equals ( " " ) ; <nl> + NewTest . classVar . equals ( " " ) ; <nl> + this . classVar . equals ( " " ) ; <nl> + this . instanceVar . equals ( " " ) ; <nl> + <nl> + NewTest testObj = new NewTest ( " " ) ; <nl> + this . testObj . instanceVar . equals ( " " ) ; / / not violated , too confusing <nl> + testObj . classVar . equals ( " " ) ; / / not violated <nl> + <nl> + for ( Nested instanceVar = new Nested ( ) ; instanceVar ! = null ; ) { <nl> + instanceVar . equals ( 1 ) ; <nl> + if ( instanceVar . equals ( " " ) ) { <nl> + instanceVar . equals ( " " ) ; <nl> + } <nl> + } <nl> + <nl> + class Inner { <nl> + String instanceVarInner ; <nl> + <nl> + public void main ( ) { <nl> + classVar . equals ( " " ) ; <nl> + instanceVar . equals ( " " ) ; <nl> + NewTest . classVar . equals ( " " ) ; <nl> + <nl> + instanceVarInner . equals ( " " ) ; <nl> + this . instanceVarInner . equals ( " " ) ; <nl> + localVar . equals ( " " ) ; <nl> + <nl> + NewTest testObj = new NewTest ( " " ) ; <nl> + testObj . instanceVar . equals ( " " ) ; / / not violated <nl> + testObj . classVar . equals ( " " ) ; / / not violated <nl> + <nl> + Inner testInnerObj = new Inner ( ) ; <nl> + testInnerObj . instanceVarInner . equals ( " " ) ; / / not violated <nl> + } <nl> + } <nl> + <nl> + Inner testInnerObj = new Inner ( ) ; <nl> + testInnerObj . instanceVarInner . equals ( " " ) ; / / not violated <nl> + <nl> + Nested . nestedClassVar . equals ( " " ) ; / / not violated , because the equals call is not <nl> + Nested Nested = new Nested ( ) ; / / embedded in class Nested , what can lead to really <nl> + Nested . nestedInstanceVar . equals ( " " ) ; / / confusing constructions . But could be improved . <nl> + Nested . nestedClassVar . equals ( " " ) ; <nl> + } <nl> + static { <nl> + final String s = " " ; <nl> + s . equals ( " " ) ; <nl> + { <nl> + final String x = " " ; <nl> + class A { <nl> + void foo ( ) { <nl> + s . equals ( " " ) ; <nl> + x . equals ( " " ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + void foo ( String param ) { <nl> + try { <nl> + param . equals ( " " ) ; <nl> + do { <nl> + String s = " " ; <nl> + s . equals ( " " ) ; <nl> + } while ( param . equals ( " " ) ) ; <nl> + } catch ( Exception e ) { <nl> + while ( param . equals ( " " ) ) { <nl> + for ( String s = " " ; s . equals ( " " ) ; ) { <nl> + if ( s . equals ( " " ) ) { <nl> + synchronized ( this ) { <nl> + switch ( s ) { <nl> + case " 1 " : String str = " " ; str . equals ( " " ) ; <nl> + case " 2 " : s . equals ( " " ) ; str = " " ; str . equals ( " " ) ; <nl> + case " 3 " : param . equals ( " " ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + static class Nested { <nl> + static String nestedClassVar ; <nl> + String nestedInstanceVar ; <nl> + public void method ( ) { <nl> + classVar . equals ( " " ) ; <nl> + NewTest . classVar . equals ( " " ) ; <nl> + this . nestedInstanceVar . equals ( " " ) ; <nl> + nestedClassVar . equals ( " " ) ; <nl> + nestedInstanceVar . equals ( " " ) ; <nl> + <nl> + class Inner { <nl> + public void method ( ) { <nl> + classVar . equals ( " " ) ; <nl> + NewTest . classVar . equals ( " " ) ; <nl> + nestedClassVar . equals ( " " ) ; <nl> + nestedInstanceVar . equals ( " " ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + enum EmbeddedEnum { <nl> + A ( 129 ) , <nl> + B ( 283 ) , <nl> + C ( 1212 ) { <nl> + String constDefVar ; <nl> + public void doSomething ( ) { <nl> + constDefVar . equals ( " " ) ; <nl> + } <nl> + } ; <nl> + <nl> + Map . Entry < String , Long > enumInstance ; <nl> + <nl> + EmbeddedEnum ( int i ) { <nl> + enumInstance . equals ( " " ) ; <nl> + } <nl> + <nl> + public static void doSomethingStatic ( ) { <nl> + enumStatic . equals ( " " ) ; <nl> + enumStatic . equals ( null ) ; <nl> + } <nl> + static String enumStatic ; <nl> + } <nl> + <nl> + private String foo ( ) { return " " ; } <nl> + private Object foo ( int i ) { return i ; } <nl> + <nl> + Object o2 = new Object ( ) ; <nl> + Object o3 = new Object ( ) ; <nl> + private void bar ( ) { <nl> + foo ( ) . equals ( " " ) ; / / methods are not checked <nl> + foo ( 0 ) . equals ( " " ) ; <nl> + this . foo ( ) . equals ( " " ) ; <nl> + Object o1 = new Object ( ) ; o1 . equals ( " " ) ; <nl> + o2 . equals ( " " ) ; String o2 = " " ; <nl> + o3 . equals ( " " ) ; <nl> + String o3 = " " ; <nl> + } <nl> + } <nl> + class Anonymous { <nl> + public static void main ( String [ ] args ) { <nl> + Runnable anonym = new Runnable ( ) { <nl> + String nullableStr = null ; <nl> + public void run ( ) { <nl> + nullableStr . equals ( " Null " ) ; <nl> + } ; <nl> + } ; <nl> + Object nullableStr = new Object ( ) ; <nl> + nullableStr . equals ( " " ) ; <nl> + } <nl> + { } <nl> + } <nl> + <nl> + enum TestEnum { <nl> + ONE ; <nl> + public void foo ( ) { <nl> + TestEnum . ONE . equals ( this ) ; <nl> + this . ONE . equals ( this ) ; <nl> + } <nl> + } <nl> + <nl> + class TestConcatenations { <nl> + String s = null ; <nl> + <nl> + void foo ( ) { <nl> + s . equals ( s + s ) ; <nl> + s . equals ( " a " + " b " ) ; <nl> + s . equals ( getInt ( ) + s ) ; <nl> + s . equals ( getInt ( ) + getInt ( ) ) ; <nl> + } <nl> + <nl> + int getInt ( ) { <nl> + return ( Integer ) null ; <nl> + } <nl> + } <nl> +
NEAREST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java b / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java <nl> index d1c081d . . c4306f4 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java <nl> @ @ - 56 , 7 + 56 , 7 @ @ public class ConfigurationBuilder extends BaseCheckTestSupport { <nl> 	 } <nl> <nl> 	 public Configuration getCheckConfig ( String aCheckName ) { <nl> - 	 	 for ( Configuration currentConfig : getConfiguration ( ) . getChildren ( ) ) { <nl> + 	 	 for ( Configuration currentConfig : configuration . getChildren ( ) ) { <nl> 	 	 	 if ( " TreeWalker " . equals ( currentConfig . getName ( ) ) ) { <nl> 	 	 	 	 for ( Configuration checkConfig : currentConfig . getChildren ( ) ) { <nl> 	 	 	 	 	 if ( aCheckName . equals ( checkConfig . getName ( ) ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java <nl> index bf1995e . . b9a07ba 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java <nl> @ @ - 170 , 7 + 170 , 7 @ @ public abstract class Check extends AbstractViolationReporter { <nl> * @ return the file contents <nl> * / <nl> public final String [ ] getLines ( ) { <nl> - return getFileContents ( ) . getLines ( ) ; <nl> + return fileContents . getLines ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 179 , 7 + 179 , 7 @ @ public abstract class Check extends AbstractViolationReporter { <nl> * @ return the line from the file contents <nl> * / <nl> public final String getLine ( int index ) { <nl> - return getFileContents ( ) . getLine ( index ) ; <nl> + return fileContents . getLine ( index ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 245 , 7 + 245 , 7 @ @ public abstract class Check extends AbstractViolationReporter { <nl> public final void log ( int lineNo , int colNo , String key , <nl> Object . . . args ) { <nl> final int col = 1 + Utils . lengthExpandedTabs ( <nl> - getLines ( ) [ lineNo - 1 ] , colNo , getTabWidth ( ) ) ; <nl> + getLines ( ) [ lineNo - 1 ] , colNo , tabWidth ) ; <nl> messages . add ( <nl> new LocalizedMessage ( <nl> lineNo , <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> index cfaaccc . . c7ca339 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> @ @ - 110 , 7 + 110 , 7 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { <nl> public void addPreviousSibling ( DetailAST ast ) { <nl> if ( ast ! = null ) { <nl> ast . setParent ( parent ) ; <nl> - final DetailAST previousSiblingNode = getPreviousSibling ( ) ; <nl> + final DetailAST previousSiblingNode = previousSibling ; <nl> <nl> if ( previousSiblingNode ! = null ) { <nl> ast . previousSibling = previousSiblingNode ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> index dd81316 . . 9cfcf17 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> @ @ - 257 , 7 + 257 , 7 @ @ public final class FileContents implements CommentListener { <nl> * / <nl> @ Deprecated <nl> public String getFilename ( ) { <nl> - return getFileName ( ) ; <nl> + return fileName ; <nl> } <nl> <nl> / * * <nl> @ @ - 319 , 6 + 319 , 6 @ @ public final class FileContents implements CommentListener { <nl> * @ return true if the package file . <nl> * / <nl> public boolean inPackageInfo ( ) { <nl> - return getFileName ( ) . endsWith ( " package - info . java " ) ; <nl> + return fileName . endsWith ( " package - info . java " ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java <nl> index 64f17cf . . 8cc5c15 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java <nl> @ @ - 139 , 7 + 139 , 7 @ @ public final class FullIdent { <nl> <nl> @ Override <nl> public String toString ( ) { <nl> - return getText ( ) + " [ " + getLineNo ( ) + " x " + getColumnNo ( ) + " ] " ; <nl> + return getText ( ) + " [ " + lineNo + " x " + columnNo + " ] " ; <nl> } <nl> <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java <nl> index fc905e6 . . 5c11de8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java <nl> @ @ - 56 , 11 + 56 , 11 @ @ public class LineColumn implements Comparable < LineColumn > { <nl> <nl> @ Override <nl> public int compareTo ( LineColumn lineColumn ) { <nl> - if ( getLine ( ) = = lineColumn . getLine ( ) ) { <nl> - return Integer . compare ( getColumn ( ) , lineColumn . getColumn ( ) ) ; <nl> + if ( line = = lineColumn . line ) { <nl> + return Integer . compare ( column , lineColumn . column ) ; <nl> } <nl> else { <nl> - return Integer . compare ( getLine ( ) , lineColumn . getLine ( ) ) ; <nl> + return Integer . compare ( line , lineColumn . line ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java <nl> index 2340c04 . . 6e59b00 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java <nl> @ @ - 136 , 8 + 136 , 8 @ @ public class JavadocNodeImpl implements DetailNode { <nl> <nl> @ Override <nl> public String toString ( ) { <nl> - return JavadocUtils . getTokenName ( getType ( ) ) <nl> - + " [ " + getLineNumber ( ) + " x " + getColumnNumber ( ) + " ] " ; <nl> + return JavadocUtils . getTokenName ( type ) <nl> + + " [ " + lineNumber + " x " + columnNumber + " ] " ; <nl> } <nl> <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java <nl> index 7e2ba25 . . b060f16 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java <nl> @ @ - 38 , 4 + 38 , 14 @ @ public class JavadocNodeImplTest { <nl> <nl> assertEquals ( " CODE _ LITERAL [ 1x2 ] " , result ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testGetColumnNumber ( ) { <nl> + JavadocNodeImpl javadocNode = new JavadocNodeImpl ( ) ; <nl> + javadocNode . setColumnNumber ( 1 ) ; <nl> + <nl> + int result = javadocNode . getColumnNumber ( ) ; <nl> + <nl> + assertEquals ( 1 , result ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java 
 index 8462b69 . . 01155e6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java 
 @ @ - 35 , 7 + 35 , 7 @ @ public class EqualsAvoidNullCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator + " equalsavoidnull " + File . separator + filename ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java 
 deleted file mode 100644 
 index 406c022 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputEqualsAvoidNull . java 
 + + + / dev / null 
 @ @ - 1 , 425 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - import java . util . Map ; 
 - public class InputEqualsAvoidNull { 
 - 
 - public boolean equals ( Object o ) { 
 - return false ; 
 - } 
 - / / antoher comment 
 - / * * 
 - * methods that should get flagged 
 - * @ return 
 - * / 
 - public void flagForEquals ( ) { 
 - 
 - Object o = new Object ( ) ; 
 - String s = " pizza " ; 
 - 
 - o . equals ( " hot pizza " ) / * comment test * / ; 
 - 
 - o . equals ( s = " cold pizza " ) ; 
 - 
 - o . equals ( ( ( s = " cold pizza " ) ) ) ; 
 - 
 - o . equals ( " cheese " + " ham " + " sauce " ) ; 
 - 
 - o . equals ( ( " cheese " + " ham " ) + " sauce " ) ; 
 - 
 - o . equals ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; 
 - } 
 - 
 - / * * 
 - * methods that should get flagged 
 - * / 
 - public void flagForEqualsIgnoreCase ( ) { 
 - String s = " pizza " ; 
 - 
 - s . equalsIgnoreCase ( " hot pizza " ) ; 
 - 
 - s . equalsIgnoreCase ( s = " cold pizza " ) ; 
 - 
 - s . equalsIgnoreCase ( ( ( s = " cold pizza " ) ) ) ; 
 - 
 - s . equalsIgnoreCase ( " cheese " + " ham " + " sauce " ) ; 
 - 
 - s . equalsIgnoreCase ( ( " cheese " + " ham " ) + " sauce " ) ; 
 - 
 - s . equalsIgnoreCase ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; 
 - } 
 - 
 - / * * 
 - * methods that should get flagged 
 - * / 
 - public void flagForBoth ( ) { 
 - Object o = new Object ( ) ; 
 - String s = " pizza " ; 
 - 
 - o . equals ( " hot pizza " ) ; 
 - 
 - o . equals ( s = " cold pizza " ) ; 
 - 
 - o . equals ( ( ( s = " cold pizza " ) ) ) ; 
 - 
 - o . equals ( " cheese " + " ham " + " sauce " ) ; 
 - 
 - o . equals ( ( " cheese " + " ham " ) + " sauce " ) ; 
 - 
 - o . equals ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; 
 - 
 - s . equalsIgnoreCase ( " hot pizza " ) ; 
 - 
 - s . equalsIgnoreCase ( s = " cold pizza " ) ; 
 - 
 - s . equalsIgnoreCase ( ( ( s = " cold pizza " ) ) ) ; 
 - 
 - s . equalsIgnoreCase ( " cheese " + " ham " + " sauce " ) ; 
 - 
 - s . equalsIgnoreCase ( ( " cheese " + " ham " ) + " sauce " ) ; 
 - 
 - s . equalsIgnoreCase ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; 
 - } 
 - 
 - 
 - / * * 
 - * methods that should not get flagged 
 - * 
 - * @ return 
 - * / 
 - public void noFlagForEquals ( ) { 
 - Object o = new Object ( ) ; 
 - String s = " peperoni " ; 
 - 
 - o . equals ( s + = " mushrooms " ) ; 
 - 
 - ( s = " thin crust " ) . equals ( " thick crust " ) ; 
 - 
 - ( s + = " garlic " ) . equals ( " basil " ) ; 
 - 
 - ( " Chicago Style " + " NY Style " ) . equals ( " California Style " + " Any Style " ) ; 
 - 
 - equals ( " peppers " ) ; 
 - 
 - " onions " . equals ( o ) ; 
 - 
 - o . equals ( new Object ( ) ) ; 
 - 
 - o . equals ( equals ( o ) ) ; 
 - 
 - equals ( " yummy " ) ; 
 - 
 - new Object ( ) . equals ( " more cheese " ) ; 
 - 
 - InputEqualsAvoidNullOutter outter = new InputEqualsAvoidNullOutter ( ) ; 
 - 
 - outter . new InputEqualsAvoidNullInner ( ) . equals ( " eat pizza and enjoy inner classes " ) ; 
 - } 
 - 
 - / * * 
 - * methods that should not get flagged 
 - * / 
 - public void noFlagForEqualsIgnoreCase ( ) { 
 - String s = " peperoni " ; 
 - String s1 = " tasty " ; 
 - 
 - s . equalsIgnoreCase ( s + = " mushrooms " ) ; 
 - 
 - s1 . equalsIgnoreCase ( s + = " mushrooms " ) ; 
 - 
 - ( s = " thin crust " ) . equalsIgnoreCase ( " thick crust " ) ; 
 - 
 - ( s + = " garlic " ) . equalsIgnoreCase ( " basil " ) ; 
 - 
 - ( " Chicago Style " + " NY Style " ) . equalsIgnoreCase ( " California Style " + " Any Style " ) ; 
 - 
 - " onions " . equalsIgnoreCase ( s ) ; 
 - 
 - s . equalsIgnoreCase ( new String ( ) ) ; 
 - 
 - s . equals ( s1 ) ; 
 - 
 - new String ( ) . equalsIgnoreCase ( " more cheese " ) ; 
 - 
 - } 
 - 
 - public void noFlagForBoth ( ) { 
 - Object o = new Object ( ) ; 
 - String s = " peperoni " ; 
 - String s1 = " tasty " ; 
 - 
 - o . equals ( s + = " mushrooms " ) ; 
 - 
 - ( s = " thin crust " ) . equals ( " thick crust " ) ; 
 - 
 - ( s + = " garlic " ) . equals ( " basil " ) ; 
 - 
 - ( " Chicago Style " + " NY Style " ) . equals ( " California Style " + " Any Style " ) ; 
 - 
 - equals ( " peppers " ) ; 
 - 
 - " onions " . equals ( o ) ; 
 - 
 - o . equals ( new Object ( ) ) ; 
 - 
 - o . equals ( equals ( o ) ) ; 
 - 
 - equals ( " yummy " ) ; 
 - 
 - new Object ( ) . equals ( " more cheese " ) ; 
 - 
 - InputEqualsAvoidNullOutter outter = new InputEqualsAvoidNullOutter ( ) ; 
 - 
 - outter . new InputEqualsAvoidNullInner ( ) . equals ( " eat pizza and enjoy inner classes " ) ; 
 - 
 - s . equalsIgnoreCase ( s + = " mushrooms " ) ; 
 - 
 - s1 . equalsIgnoreCase ( s + = " mushrooms " ) ; 
 - 
 - ( s = " thin crust " ) . equalsIgnoreCase ( " thick crust " ) ; 
 - 
 - ( s + = " garlic " ) . equalsIgnoreCase ( " basil " ) ; 
 - 
 - ( " Chicago Style " + " NY Style " ) . equalsIgnoreCase ( " California Style " + " Any Style " ) ; 
 - 
 - " onions " . equalsIgnoreCase ( s ) ; 
 - 
 - s . equalsIgnoreCase ( new String ( ) ) ; 
 - 
 - s . equals ( s1 ) ; 
 - 
 - new String ( ) . equalsIgnoreCase ( " more cheese " ) ; 
 - 
 - } 
 - 
 - } 
 - 
 - class InputEqualsAvoidNullOutter { 
 - public class InputEqualsAvoidNullInner { 
 - 	 public boolean equals ( Object o ) { 
 - 	 return true ; 
 - 	 } 
 - } 
 - } 
 - 
 - class MyString { 
 - public boolean equals ( ) { 
 - return true ; 
 - } 
 - 
 - public boolean equals ( String s1 ) { 
 - return true ; 
 - } 
 - 
 - public boolean equalsIgnoreCase ( ) { 
 - return true ; 
 - } 
 - 
 - public boolean equalsIgnoreCase ( String s1 ) { 
 - return true ; 
 - } 
 - 
 - private String pizza ; 
 - 
 - public void main ( ) { 
 - MyString myString = new MyString ( ) ; 
 - myString . equals ( ) ; 
 - myString . equals ( " what " ) ; 
 - myString . equalsIgnoreCase ( ) ; 
 - myString . equalsIgnoreCase ( " what " ) ; 
 - myString . equals ( this . pizza = " cold pizza " ) ; 
 - } 
 - } 
 - 
 - class NewTest { 
 - static String classVar ; 
 - String instanceVar ; 
 - NewTest testObj = new NewTest ( " " ) ; 
 - 
 - NewTest ( String param ) { 
 - param . equals ( " " ) ; 
 - } 
 - 
 - public void method ( String param ) { 
 - final String localVar = " " ; 
 - 
 - localVar . equals ( " " ) ; 
 - param . equals ( " " ) ; 
 - 
 - classVar . equals ( " " ) ; 
 - instanceVar . equals ( " " ) ; 
 - NewTest . classVar . equals ( " " ) ; 
 - this . classVar . equals ( " " ) ; 
 - this . instanceVar . equals ( " " ) ; 
 - 
 - NewTest testObj = new NewTest ( " " ) ; 
 - this . testObj . instanceVar . equals ( " " ) ; / / not violated , too confusing 
 - testObj . classVar . equals ( " " ) ; / / not violated 
 - 
 - for ( Nested instanceVar = new Nested ( ) ; instanceVar ! = null ; ) { 
 - instanceVar . equals ( 1 ) ; 
 - if ( instanceVar . equals ( " " ) ) { 
 - instanceVar . equals ( " " ) ; 
 - } 
 - } 
 - 
 - class Inner { 
 - String instanceVarInner ; 
 - 
 - public void main ( ) { 
 - classVar . equals ( " " ) ; 
 - instanceVar . equals ( " " ) ; 
 - NewTest . classVar . equals ( " " ) ; 
 - 
 - instanceVarInner . equals ( " " ) ; 
 - this . instanceVarInner . equals ( " " ) ; 
 - localVar . equals ( " " ) ; 
 - 
 - NewTest testObj = new NewTest ( " " ) ; 
 - testObj . instanceVar . equals ( " " ) ; / / not violated 
 - testObj . classVar . equals ( " " ) ; / / not violated 
 - 
 - Inner testInnerObj = new Inner ( ) ; 
 - testInnerObj . instanceVarInner . equals ( " " ) ; / / not violated 
 - } 
 - } 
 - 
 - Inner testInnerObj = new Inner ( ) ; 
 - testInnerObj . instanceVarInner . equals ( " " ) ; / / not violated 
 - 
 - Nested . nestedClassVar . equals ( " " ) ; / / not violated , because the equals call is not 
 - Nested Nested = new Nested ( ) ; / / embedded in class Nested , what can lead to really 
 - Nested . nestedInstanceVar . equals ( " " ) ; / / confusing constructions . But could be improved . 
 - Nested . nestedClassVar . equals ( " " ) ; 
 - } 
 - static { 
 - final String s = " " ; 
 - s . equals ( " " ) ; 
 - { 
 - final String x = " " ; 
 - class A { 
 - void foo ( ) { 
 - s . equals ( " " ) ; 
 - x . equals ( " " ) ; 
 - } 
 - } 
 - } 
 - } 
 - void foo ( String param ) { 
 - try { 
 - param . equals ( " " ) ; 
 - do { 
 - String s = " " ; 
 - s . equals ( " " ) ; 
 - } while ( param . equals ( " " ) ) ; 
 - } catch ( Exception e ) { 
 - while ( param . equals ( " " ) ) { 
 - for ( String s = " " ; s . equals ( " " ) ; ) { 
 - if ( s . equals ( " " ) ) { 
 - synchronized ( this ) { 
 - switch ( s ) { 
 - case " 1 " : String str = " " ; str . equals ( " " ) ; 
 - case " 2 " : s . equals ( " " ) ; str = " " ; str . equals ( " " ) ; 
 - case " 3 " : param . equals ( " " ) ; 
 - break ; 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - 
 - static class Nested { 
 - static String nestedClassVar ; 
 - String nestedInstanceVar ; 
 - public void method ( ) { 
 - classVar . equals ( " " ) ; 
 - NewTest . classVar . equals ( " " ) ; 
 - this . nestedInstanceVar . equals ( " " ) ; 
 - nestedClassVar . equals ( " " ) ; 
 - nestedInstanceVar . equals ( " " ) ; 
 - 
 - class Inner { 
 - public void method ( ) { 
 - classVar . equals ( " " ) ; 
 - NewTest . classVar . equals ( " " ) ; 
 - nestedClassVar . equals ( " " ) ; 
 - nestedInstanceVar . equals ( " " ) ; 
 - } 
 - } 
 - } 
 - } 
 - enum EmbeddedEnum { 
 - A ( 129 ) , 
 - B ( 283 ) , 
 - C ( 1212 ) { 
 - String constDefVar ; 
 - public void doSomething ( ) { 
 - constDefVar . equals ( " " ) ; 
 - } 
 - } ; 
 - 
 - Map . Entry < String , Long > enumInstance ; 
 - 
 - EmbeddedEnum ( int i ) { 
 - enumInstance . equals ( " " ) ; 
 - } 
 - 
 - public static void doSomethingStatic ( ) { 
 - enumStatic . equals ( " " ) ; 
 - enumStatic . equals ( null ) ; 
 - } 
 - static String enumStatic ; 
 - } 
 - 
 - private String foo ( ) { return " " ; } 
 - private Object foo ( int i ) { return i ; } 
 - 
 - Object o2 = new Object ( ) ; 
 - Object o3 = new Object ( ) ; 
 - private void bar ( ) { 
 - foo ( ) . equals ( " " ) ; / / methods are not checked 
 - foo ( 0 ) . equals ( " " ) ; 
 - this . foo ( ) . equals ( " " ) ; 
 - Object o1 = new Object ( ) ; o1 . equals ( " " ) ; 
 - o2 . equals ( " " ) ; String o2 = " " ; 
 - o3 . equals ( " " ) ; 
 - String o3 = " " ; 
 - } 
 - } 
 - class Anonymous { 
 - public static void main ( String [ ] args ) { 
 - Runnable anonym = new Runnable ( ) { 
 - String nullableStr = null ; 
 - public void run ( ) { 
 - nullableStr . equals ( " Null " ) ; 
 - } ; 
 - } ; 
 - Object nullableStr = new Object ( ) ; 
 - nullableStr . equals ( " " ) ; 
 - } 
 - { } 
 - } 
 - 
 - enum TestEnum { 
 - ONE ; 
 - public void foo ( ) { 
 - TestEnum . ONE . equals ( this ) ; 
 - this . ONE . equals ( this ) ; 
 - } 
 - } 
 - 
 - class TestConcatenations { 
 - String s = null ; 
 - 
 - void foo ( ) { 
 - s . equals ( s + s ) ; 
 - s . equals ( " a " + " b " ) ; 
 - s . equals ( getInt ( ) + s ) ; 
 - s . equals ( getInt ( ) + getInt ( ) ) ; 
 - } 
 - 
 - int getInt ( ) { 
 - return ( Integer ) null ; 
 - } 
 - } 
 - 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java 
 new file mode 100644 
 index 0000000 . . e01331d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java 
 @ @ - 0 , 0 + 1 , 425 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . equalsavoidnull ; 
 + import java . util . Map ; 
 + public class InputEqualsAvoidNull { 
 + 
 + public boolean equals ( Object o ) { 
 + return false ; 
 + } 
 + / / antoher comment 
 + / * * 
 + * methods that should get flagged 
 + * @ return 
 + * / 
 + public void flagForEquals ( ) { 
 + 
 + Object o = new Object ( ) ; 
 + String s = " pizza " ; 
 + 
 + o . equals ( " hot pizza " ) / * comment test * / ; 
 + 
 + o . equals ( s = " cold pizza " ) ; 
 + 
 + o . equals ( ( ( s = " cold pizza " ) ) ) ; 
 + 
 + o . equals ( " cheese " + " ham " + " sauce " ) ; 
 + 
 + o . equals ( ( " cheese " + " ham " ) + " sauce " ) ; 
 + 
 + o . equals ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; 
 + } 
 + 
 + / * * 
 + * methods that should get flagged 
 + * / 
 + public void flagForEqualsIgnoreCase ( ) { 
 + String s = " pizza " ; 
 + 
 + s . equalsIgnoreCase ( " hot pizza " ) ; 
 + 
 + s . equalsIgnoreCase ( s = " cold pizza " ) ; 
 + 
 + s . equalsIgnoreCase ( ( ( s = " cold pizza " ) ) ) ; 
 + 
 + s . equalsIgnoreCase ( " cheese " + " ham " + " sauce " ) ; 
 + 
 + s . equalsIgnoreCase ( ( " cheese " + " ham " ) + " sauce " ) ; 
 + 
 + s . equalsIgnoreCase ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; 
 + } 
 + 
 + / * * 
 + * methods that should get flagged 
 + * / 
 + public void flagForBoth ( ) { 
 + Object o = new Object ( ) ; 
 + String s = " pizza " ; 
 + 
 + o . equals ( " hot pizza " ) ; 
 + 
 + o . equals ( s = " cold pizza " ) ; 
 + 
 + o . equals ( ( ( s = " cold pizza " ) ) ) ; 
 + 
 + o . equals ( " cheese " + " ham " + " sauce " ) ; 
 + 
 + o . equals ( ( " cheese " + " ham " ) + " sauce " ) ; 
 + 
 + o . equals ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; 
 + 
 + s . equalsIgnoreCase ( " hot pizza " ) ; 
 + 
 + s . equalsIgnoreCase ( s = " cold pizza " ) ; 
 + 
 + s . equalsIgnoreCase ( ( ( s = " cold pizza " ) ) ) ; 
 + 
 + s . equalsIgnoreCase ( " cheese " + " ham " + " sauce " ) ; 
 + 
 + s . equalsIgnoreCase ( ( " cheese " + " ham " ) + " sauce " ) ; 
 + 
 + s . equalsIgnoreCase ( ( ( " cheese " + " ham " ) ) + " sauce " ) ; 
 + } 
 + 
 + 
 + / * * 
 + * methods that should not get flagged 
 + * 
 + * @ return 
 + * / 
 + public void noFlagForEquals ( ) { 
 + Object o = new Object ( ) ; 
 + String s = " peperoni " ; 
 + 
 + o . equals ( s + = " mushrooms " ) ; 
 + 
 + ( s = " thin crust " ) . equals ( " thick crust " ) ; 
 + 
 + ( s + = " garlic " ) . equals ( " basil " ) ; 
 + 
 + ( " Chicago Style " + " NY Style " ) . equals ( " California Style " + " Any Style " ) ; 
 + 
 + equals ( " peppers " ) ; 
 + 
 + " onions " . equals ( o ) ; 
 + 
 + o . equals ( new Object ( ) ) ; 
 + 
 + o . equals ( equals ( o ) ) ; 
 + 
 + equals ( " yummy " ) ; 
 + 
 + new Object ( ) . equals ( " more cheese " ) ; 
 + 
 + InputEqualsAvoidNullOutter outter = new InputEqualsAvoidNullOutter ( ) ; 
 + 
 + outter . new InputEqualsAvoidNullInner ( ) . equals ( " eat pizza and enjoy inner classes " ) ; 
 + } 
 + 
 + / * * 
 + * methods that should not get flagged 
 + * / 
 + public void noFlagForEqualsIgnoreCase ( ) { 
 + String s = " peperoni " ; 
 + String s1 = " tasty " ; 
 + 
 + s . equalsIgnoreCase ( s + = " mushrooms " ) ; 
 + 
 + s1 . equalsIgnoreCase ( s + = " mushrooms " ) ; 
 + 
 + ( s = " thin crust " ) . equalsIgnoreCase ( " thick crust " ) ; 
 + 
 + ( s + = " garlic " ) . equalsIgnoreCase ( " basil " ) ; 
 + 
 + ( " Chicago Style " + " NY Style " ) . equalsIgnoreCase ( " California Style " + " Any Style " ) ; 
 + 
 + " onions " . equalsIgnoreCase ( s ) ; 
 + 
 + s . equalsIgnoreCase ( new String ( ) ) ; 
 + 
 + s . equals ( s1 ) ; 
 + 
 + new String ( ) . equalsIgnoreCase ( " more cheese " ) ; 
 + 
 + } 
 + 
 + public void noFlagForBoth ( ) { 
 + Object o = new Object ( ) ; 
 + String s = " peperoni " ; 
 + String s1 = " tasty " ; 
 + 
 + o . equals ( s + = " mushrooms " ) ; 
 + 
 + ( s = " thin crust " ) . equals ( " thick crust " ) ; 
 + 
 + ( s + = " garlic " ) . equals ( " basil " ) ; 
 + 
 + ( " Chicago Style " + " NY Style " ) . equals ( " California Style " + " Any Style " ) ; 
 + 
 + equals ( " peppers " ) ; 
 + 
 + " onions " . equals ( o ) ; 
 + 
 + o . equals ( new Object ( ) ) ; 
 + 
 + o . equals ( equals ( o ) ) ; 
 + 
 + equals ( " yummy " ) ; 
 + 
 + new Object ( ) . equals ( " more cheese " ) ; 
 + 
 + InputEqualsAvoidNullOutter outter = new InputEqualsAvoidNullOutter ( ) ; 
 + 
 + outter . new InputEqualsAvoidNullInner ( ) . equals ( " eat pizza and enjoy inner classes " ) ; 
 + 
 + s . equalsIgnoreCase ( s + = " mushrooms " ) ; 
 + 
 + s1 . equalsIgnoreCase ( s + = " mushrooms " ) ; 
 + 
 + ( s = " thin crust " ) . equalsIgnoreCase ( " thick crust " ) ; 
 + 
 + ( s + = " garlic " ) . equalsIgnoreCase ( " basil " ) ; 
 + 
 + ( " Chicago Style " + " NY Style " ) . equalsIgnoreCase ( " California Style " + " Any Style " ) ; 
 + 
 + " onions " . equalsIgnoreCase ( s ) ; 
 + 
 + s . equalsIgnoreCase ( new String ( ) ) ; 
 + 
 + s . equals ( s1 ) ; 
 + 
 + new String ( ) . equalsIgnoreCase ( " more cheese " ) ; 
 + 
 + } 
 + 
 + } 
 + 
 + class InputEqualsAvoidNullOutter { 
 + public class InputEqualsAvoidNullInner { 
 + 	 public boolean equals ( Object o ) { 
 + 	 return true ; 
 + 	 } 
 + } 
 + } 
 + 
 + class MyString { 
 + public boolean equals ( ) { 
 + return true ; 
 + } 
 + 
 + public boolean equals ( String s1 ) { 
 + return true ; 
 + } 
 + 
 + public boolean equalsIgnoreCase ( ) { 
 + return true ; 
 + } 
 + 
 + public boolean equalsIgnoreCase ( String s1 ) { 
 + return true ; 
 + } 
 + 
 + private String pizza ; 
 + 
 + public void main ( ) { 
 + MyString myString = new MyString ( ) ; 
 + myString . equals ( ) ; 
 + myString . equals ( " what " ) ; 
 + myString . equalsIgnoreCase ( ) ; 
 + myString . equalsIgnoreCase ( " what " ) ; 
 + myString . equals ( this . pizza = " cold pizza " ) ; 
 + } 
 + } 
 + 
 + class NewTest { 
 + static String classVar ; 
 + String instanceVar ; 
 + NewTest testObj = new NewTest ( " " ) ; 
 + 
 + NewTest ( String param ) { 
 + param . equals ( " " ) ; 
 + } 
 + 
 + public void method ( String param ) { 
 + final String localVar = " " ; 
 + 
 + localVar . equals ( " " ) ; 
 + param . equals ( " " ) ; 
 + 
 + classVar . equals ( " " ) ; 
 + instanceVar . equals ( " " ) ; 
 + NewTest . classVar . equals ( " " ) ; 
 + this . classVar . equals ( " " ) ; 
 + this . instanceVar . equals ( " " ) ; 
 + 
 + NewTest testObj = new NewTest ( " " ) ; 
 + this . testObj . instanceVar . equals ( " " ) ; / / not violated , too confusing 
 + testObj . classVar . equals ( " " ) ; / / not violated 
 + 
 + for ( Nested instanceVar = new Nested ( ) ; instanceVar ! = null ; ) { 
 + instanceVar . equals ( 1 ) ; 
 + if ( instanceVar . equals ( " " ) ) { 
 + instanceVar . equals ( " " ) ; 
 + } 
 + } 
 + 
 + class Inner { 
 + String instanceVarInner ; 
 + 
 + public void main ( ) { 
 + classVar . equals ( " " ) ; 
 + instanceVar . equals ( " " ) ; 
 + NewTest . classVar . equals ( " " ) ; 
 + 
 + instanceVarInner . equals ( " " ) ; 
 + this . instanceVarInner . equals ( " " ) ; 
 + localVar . equals ( " " ) ; 
 + 
 + NewTest testObj = new NewTest ( " " ) ; 
 + testObj . instanceVar . equals ( " " ) ; / / not violated 
 + testObj . classVar . equals ( " " ) ; / / not violated 
 + 
 + Inner testInnerObj = new Inner ( ) ; 
 + testInnerObj . instanceVarInner . equals ( " " ) ; / / not violated 
 + } 
 + } 
 + 
 + Inner testInnerObj = new Inner ( ) ; 
 + testInnerObj . instanceVarInner . equals ( " " ) ; / / not violated 
 + 
 + Nested . nestedClassVar . equals ( " " ) ; / / not violated , because the equals call is not 
 + Nested Nested = new Nested ( ) ; / / embedded in class Nested , what can lead to really 
 + Nested . nestedInstanceVar . equals ( " " ) ; / / confusing constructions . But could be improved . 
 + Nested . nestedClassVar . equals ( " " ) ; 
 + } 
 + static { 
 + final String s = " " ; 
 + s . equals ( " " ) ; 
 + { 
 + final String x = " " ; 
 + class A { 
 + void foo ( ) { 
 + s . equals ( " " ) ; 
 + x . equals ( " " ) ; 
 + } 
 + } 
 + } 
 + } 
 + void foo ( String param ) { 
 + try { 
 + param . equals ( " " ) ; 
 + do { 
 + String s = " " ; 
 + s . equals ( " " ) ; 
 + } while ( param . equals ( " " ) ) ; 
 + } catch ( Exception e ) { 
 + while ( param . equals ( " " ) ) { 
 + for ( String s = " " ; s . equals ( " " ) ; ) { 
 + if ( s . equals ( " " ) ) { 
 + synchronized ( this ) { 
 + switch ( s ) { 
 + case " 1 " : String str = " " ; str . equals ( " " ) ; 
 + case " 2 " : s . equals ( " " ) ; str = " " ; str . equals ( " " ) ; 
 + case " 3 " : param . equals ( " " ) ; 
 + break ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + 
 + static class Nested { 
 + static String nestedClassVar ; 
 + String nestedInstanceVar ; 
 + public void method ( ) { 
 + classVar . equals ( " " ) ; 
 + NewTest . classVar . equals ( " " ) ; 
 + this . nestedInstanceVar . equals ( " " ) ; 
 + nestedClassVar . equals ( " " ) ; 
 + nestedInstanceVar . equals ( " " ) ; 
 + 
 + class Inner { 
 + public void method ( ) { 
 + classVar . equals ( " " ) ; 
 + NewTest . classVar . equals ( " " ) ; 
 + nestedClassVar . equals ( " " ) ; 
 + nestedInstanceVar . equals ( " " ) ; 
 + } 
 + } 
 + } 
 + } 
 + enum EmbeddedEnum { 
 + A ( 129 ) , 
 + B ( 283 ) , 
 + C ( 1212 ) { 
 + String constDefVar ; 
 + public void doSomething ( ) { 
 + constDefVar . equals ( " " ) ; 
 + } 
 + } ; 
 + 
 + Map . Entry < String , Long > enumInstance ; 
 + 
 + EmbeddedEnum ( int i ) { 
 + enumInstance . equals ( " " ) ; 
 + } 
 + 
 + public static void doSomethingStatic ( ) { 
 + enumStatic . equals ( " " ) ; 
 + enumStatic . equals ( null ) ; 
 + } 
 + static String enumStatic ; 
 + } 
 + 
 + private String foo ( ) { return " " ; } 
 + private Object foo ( int i ) { return i ; } 
 + 
 + Object o2 = new Object ( ) ; 
 + Object o3 = new Object ( ) ; 
 + private void bar ( ) { 
 + foo ( ) . equals ( " " ) ; / / methods are not checked 
 + foo ( 0 ) . equals ( " " ) ; 
 + this . foo ( ) . equals ( " " ) ; 
 + Object o1 = new Object ( ) ; o1 . equals ( " " ) ; 
 + o2 . equals ( " " ) ; String o2 = " " ; 
 + o3 . equals ( " " ) ; 
 + String o3 = " " ; 
 + } 
 + } 
 + class Anonymous { 
 + public static void main ( String [ ] args ) { 
 + Runnable anonym = new Runnable ( ) { 
 + String nullableStr = null ; 
 + public void run ( ) { 
 + nullableStr . equals ( " Null " ) ; 
 + } ; 
 + } ; 
 + Object nullableStr = new Object ( ) ; 
 + nullableStr . equals ( " " ) ; 
 + } 
 + { } 
 + } 
 + 
 + enum TestEnum { 
 + ONE ; 
 + public void foo ( ) { 
 + TestEnum . ONE . equals ( this ) ; 
 + this . ONE . equals ( this ) ; 
 + } 
 + } 
 + 
 + class TestConcatenations { 
 + String s = null ; 
 + 
 + void foo ( ) { 
 + s . equals ( s + s ) ; 
 + s . equals ( " a " + " b " ) ; 
 + s . equals ( getInt ( ) + s ) ; 
 + s . equals ( getInt ( ) + getInt ( ) ) ; 
 + } 
 + 
 + int getInt ( ) { 
 + return ( Integer ) null ; 
 + } 
 + } 
 +

NEAREST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java b / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java 
 index d1c081d . . c4306f4 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java 
 @ @ - 56 , 7 + 56 , 7 @ @ public class ConfigurationBuilder extends BaseCheckTestSupport { 
 	 } 
 
 	 public Configuration getCheckConfig ( String aCheckName ) { 
 - 	 	 for ( Configuration currentConfig : getConfiguration ( ) . getChildren ( ) ) { 
 + 	 	 for ( Configuration currentConfig : configuration . getChildren ( ) ) { 
 	 	 	 if ( " TreeWalker " . equals ( currentConfig . getName ( ) ) ) { 
 	 	 	 	 for ( Configuration checkConfig : currentConfig . getChildren ( ) ) { 
 	 	 	 	 	 if ( aCheckName . equals ( checkConfig . getName ( ) ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java 
 index bf1995e . . b9a07ba 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / Check . java 
 @ @ - 170 , 7 + 170 , 7 @ @ public abstract class Check extends AbstractViolationReporter { 
 * @ return the file contents 
 * / 
 public final String [ ] getLines ( ) { 
 - return getFileContents ( ) . getLines ( ) ; 
 + return fileContents . getLines ( ) ; 
 } 
 
 / * * 
 @ @ - 179 , 7 + 179 , 7 @ @ public abstract class Check extends AbstractViolationReporter { 
 * @ return the line from the file contents 
 * / 
 public final String getLine ( int index ) { 
 - return getFileContents ( ) . getLine ( index ) ; 
 + return fileContents . getLine ( index ) ; 
 } 
 
 / * * 
 @ @ - 245 , 7 + 245 , 7 @ @ public abstract class Check extends AbstractViolationReporter { 
 public final void log ( int lineNo , int colNo , String key , 
 Object . . . args ) { 
 final int col = 1 + Utils . lengthExpandedTabs ( 
 - getLines ( ) [ lineNo - 1 ] , colNo , getTabWidth ( ) ) ; 
 + getLines ( ) [ lineNo - 1 ] , colNo , tabWidth ) ; 
 messages . add ( 
 new LocalizedMessage ( 
 lineNo , 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 index cfaaccc . . c7ca339 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 @ @ - 110 , 7 + 110 , 7 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { 
 public void addPreviousSibling ( DetailAST ast ) { 
 if ( ast ! = null ) { 
 ast . setParent ( parent ) ; 
 - final DetailAST previousSiblingNode = getPreviousSibling ( ) ; 
 + final DetailAST previousSiblingNode = previousSibling ; 
 
 if ( previousSiblingNode ! = null ) { 
 ast . previousSibling = previousSiblingNode ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 index dd81316 . . 9cfcf17 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 @ @ - 257 , 7 + 257 , 7 @ @ public final class FileContents implements CommentListener { 
 * / 
 @ Deprecated 
 public String getFilename ( ) { 
 - return getFileName ( ) ; 
 + return fileName ; 
 } 
 
 / * * 
 @ @ - 319 , 6 + 319 , 6 @ @ public final class FileContents implements CommentListener { 
 * @ return true if the package file . 
 * / 
 public boolean inPackageInfo ( ) { 
 - return getFileName ( ) . endsWith ( " package - info . java " ) ; 
 + return fileName . endsWith ( " package - info . java " ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java 
 index 64f17cf . . 8cc5c15 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java 
 @ @ - 139 , 7 + 139 , 7 @ @ public final class FullIdent { 
 
 @ Override 
 public String toString ( ) { 
 - return getText ( ) + " [ " + getLineNo ( ) + " x " + getColumnNo ( ) + " ] " ; 
 + return getText ( ) + " [ " + lineNo + " x " + columnNo + " ] " ; 
 } 
 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java 
 index fc905e6 . . 5c11de8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / LineColumn . java 
 @ @ - 56 , 11 + 56 , 11 @ @ public class LineColumn implements Comparable < LineColumn > { 
 
 @ Override 
 public int compareTo ( LineColumn lineColumn ) { 
 - if ( getLine ( ) = = lineColumn . getLine ( ) ) { 
 - return Integer . compare ( getColumn ( ) , lineColumn . getColumn ( ) ) ; 
 + if ( line = = lineColumn . line ) { 
 + return Integer . compare ( column , lineColumn . column ) ; 
 } 
 else { 
 - return Integer . compare ( getLine ( ) , lineColumn . getLine ( ) ) ; 
 + return Integer . compare ( line , lineColumn . line ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java 
 index 2340c04 . . 6e59b00 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImpl . java 
 @ @ - 136 , 8 + 136 , 8 @ @ public class JavadocNodeImpl implements DetailNode { 
 
 @ Override 
 public String toString ( ) { 
 - return JavadocUtils . getTokenName ( getType ( ) ) 
 - + " [ " + getLineNumber ( ) + " x " + getColumnNumber ( ) + " ] " ; 
 + return JavadocUtils . getTokenName ( type ) 
 + + " [ " + lineNumber + " x " + columnNumber + " ] " ; 
 } 
 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java 
 index 7e2ba25 . . b060f16 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocNodeImplTest . java 
 @ @ - 38 , 4 + 38 , 14 @ @ public class JavadocNodeImplTest { 
 
 assertEquals ( " CODE _ LITERAL [ 1x2 ] " , result ) ; 
 } 
 + 
 + @ Test 
 + public void testGetColumnNumber ( ) { 
 + JavadocNodeImpl javadocNode = new JavadocNodeImpl ( ) ; 
 + javadocNode . setColumnNumber ( 1 ) ; 
 + 
 + int result = javadocNode . getColumnNumber ( ) ; 
 + 
 + assertEquals ( 1 , result ) ; 
 + } 
 }
