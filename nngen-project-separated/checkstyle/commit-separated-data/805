BLEU SCORE: 0.9391044157537525

TEST MSG: Issue # 4314 : Split and Organize Checkstyle inputs by Test for checks in design package : OneTopLevelClass
GENERATED MSG: Issue # 4314 : Split and Organize Checkstyle inputs by Test for checks in design package : FinalClass

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> index be3ca0e . . 575af9a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> @ @ - 36 , 13 + 36 , 17 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " design " + File . separator + filename ) ; <nl> + + " design " + File . separator <nl> + + " onetoplevelclass " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Override <nl> protected String getNonCompilablePath ( String filename ) throws IOException { <nl> return super . getNonCompilablePath ( " checks " + File . separator <nl> - + " design " + File . separator + filename ) ; <nl> + + " design " + File . separator <nl> + + " onetoplevelclass " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 129 , 7 + 133 , 7 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { <nl> " 45 : " + getCheckMessage ( MSG _ KEY , " AnotherClass " ) , <nl> " 48 : " + getCheckMessage ( MSG _ KEY , " NativeTest " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputClone . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputOneTopLevelClassClone . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 139 , 7 + 143 , 7 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 10 : " + getCheckMessage ( MSG _ KEY , " InputDeclarationOrderEnum " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputOneTopLevelClassDeclarationOrder . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / package - info . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / package - info . java <nl> new file mode 100644 <nl> index 0000000 . . 45b7235 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / package - info . java <nl> @ @ - 0 , 0 + 1 , 23 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + / * * <nl> + * Package containing input files for design checks . <nl> + * / <nl> + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / design / package - info . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / design / package - info . java <nl> deleted file mode 100644 <nl> index 2aedf51 . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / design / package - info . java <nl> + + + / dev / null <nl> @ @ - 1 , 23 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - / * * <nl> - * Package containing input files for design checks . <nl> - * / <nl> - package com . puppycrawl . tools . checkstyle . checks . design ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputClone . java <nl> deleted file mode 100644 <nl> index d70c859 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputClone . java <nl> + + + / dev / null <nl> @ @ - 1 , 50 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . design ; <nl> - public class InputClone <nl> - { / * class body * / <nl> - public InputClone ( ) throws CloneNotSupportedException <nl> - { / / constructor body <nl> - super . equals ( new String ( ) ) ; <nl> - super . clone ( ) ; <nl> - } <nl> - <nl> - public Object clone ( ) throws CloneNotSupportedException <nl> - { <nl> - return super . clone ( ) ; <nl> - } <nl> - <nl> - public void method ( ) throws CloneNotSupportedException <nl> - { <nl> - super . clone ( ) ; <nl> - } <nl> - <nl> - { <nl> - super . clone ( ) ; <nl> - } <nl> - } <nl> - <nl> - class NoSuperClone <nl> - { <nl> - } <nl> - <nl> - class InnerClone <nl> - { <nl> - } <nl> - <nl> - class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > <nl> - { <nl> - } <nl> - <nl> - class CloneWithTypeArgumentsAndNoSuper < T > <nl> - { <nl> - } <nl> - <nl> - class MyClassWithGenericSuperMethod <nl> - { <nl> - } <nl> - <nl> - class AnotherClass { <nl> - } <nl> - <nl> - class NativeTest { <nl> - public native Object clone ( ) ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDeclarationOrder . java <nl> deleted file mode 100644 <nl> index d47b8e8 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDeclarationOrder . java <nl> + + + / dev / null <nl> @ @ - 1 , 18 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . design ; <nl> - <nl> - public class InputDeclarationOrder <nl> - { <nl> - private class InnerClass <nl> - { <nl> - } <nl> - } <nl> - <nl> - enum InputDeclarationOrderEnum <nl> - { <nl> - ENUM _ VALUE _ 1 ; <nl> - <nl> - class AsyncProcess { <nl> - private final int startLogErrorsCnt = 0 ; <nl> - protected final int maxTotalConcurrentTasks = 0 ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelClass . java <nl> deleted file mode 100644 <nl> index 56b1f59 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelClass . java <nl> + + + / dev / null <nl> @ @ - 1 , 81 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . design ; <nl> - <nl> - public class InputOneTopLevelClass <nl> - { <nl> - static final int FOO2 = 3 ; <nl> - <nl> - / / error public before package <nl> - public static final int FOO = 3 ; <nl> - <nl> - private static final int FOO3 = 3 ; <nl> - <nl> - / / eror public before package and private <nl> - public static final int FOO4 = 3 ; <nl> - <nl> - private static final String ERROR = " error " ; <nl> - <nl> - / / error protected before private <nl> - protected static final String ERROR1 = " error " ; <nl> - <nl> - / / error public before private <nl> - public static final String WARNING = " warning " ; <nl> - <nl> - private int mMaxInitVars = 3 ; <nl> - <nl> - / / error statics should be before instance members <nl> - / / error publics before private <nl> - public static final int MAX _ ITER _ VARS = 3 ; <nl> - <nl> - private class InnerClass <nl> - { <nl> - private static final int INNER _ FOO = 2 ; <nl> - <nl> - / / error public before private <nl> - public static final int INNER _ FOO2 = 2 ; <nl> - <nl> - public InnerClass ( ) <nl> - { <nl> - int foo = INNER _ FOO ; <nl> - foo + = INNER _ FOO2 ; <nl> - foo + = INNER _ FOO3 ; <nl> - } <nl> - <nl> - / / error member variables should be before methods or ctors <nl> - / / error public before private <nl> - public static final int INNER _ FOO3 = 2 ; <nl> - } <nl> - <nl> - public int getFoo1 ( ) <nl> - { <nl> - return mFoo ; <nl> - } <nl> - <nl> - / / error ctors before methods <nl> - public InputOneTopLevelClass ( ) <nl> - { <nl> - String foo = ERROR ; <nl> - foo + = ERROR1 ; <nl> - foo + = WARNING ; <nl> - int fooInt = mMaxInitVars ; <nl> - fooInt + = MAX _ ITER _ VARS ; <nl> - fooInt + = mFoo ; <nl> - } <nl> - <nl> - public static int getFoo2 ( ) <nl> - { <nl> - return 13 ; <nl> - } <nl> - <nl> - public int getFoo ( ) <nl> - { <nl> - return mFoo ; <nl> - } <nl> - <nl> - private static int getFoo21 ( ) <nl> - { <nl> - return 14 ; <nl> - } <nl> - <nl> - / / error member variables should be before methods or ctors <nl> - private int mFoo = 0 ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelClassNoPublic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelClassNoPublic . java <nl> deleted file mode 100644 <nl> index 55411c8 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelClassNoPublic . java <nl> + + + / dev / null <nl> @ @ - 1 , 11 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . design ; <nl> - <nl> - class InputOneTopLevelClassNoPublic <nl> - { <nl> - <nl> - } <nl> - <nl> - class InputOneTopLevelClassNoPublic2 <nl> - { <nl> - <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelEnum . java <nl> deleted file mode 100644 <nl> index 46faae6 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelEnum . java <nl> + + + / dev / null <nl> @ @ - 1 , 5 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . design ; <nl> - <nl> - public enum InputOneTopLevelEnum { <nl> - VALUE1 , VALUE2 ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelEnum2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelEnum2 . java <nl> deleted file mode 100644 <nl> index e369ff5 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelEnum2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 13 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . design ; <nl> - <nl> - enum InputOneTopLevelEnum2inner1 { <nl> - VALUE1 , VALUE2 ; <nl> - } <nl> - <nl> - public enum InputOneTopLevelEnum2 { <nl> - VALUE1 , VALUE2 ; <nl> - } <nl> - <nl> - enum InputOneTopLevelEnum2inner2 { <nl> - VALUE1 , VALUE2 ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelInterface . java <nl> deleted file mode 100644 <nl> index 651e0fe . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelInterface . java <nl> + + + / dev / null <nl> @ @ - 1 , 5 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . design ; <nl> - <nl> - public interface InputOneTopLevelInterface { <nl> - int foo ( ) ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelInterface2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelInterface2 . java <nl> deleted file mode 100644 <nl> index 86de2f5 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelInterface2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 13 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . design ; <nl> - <nl> - interface InputOneTopLevelInterface2inner1 { <nl> - int foo ( ) ; <nl> - } <nl> - <nl> - public interface InputOneTopLevelInterface2 { <nl> - int foo ( ) ; <nl> - } <nl> - <nl> - interface InputOneTopLevelInterface2inner2 { <nl> - int foo ( ) ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClass . java <nl> new file mode 100644 <nl> index 0000000 . . 60eaddd <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClass . java <nl> @ @ - 0 , 0 + 1 , 81 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; <nl> + <nl> + public class InputOneTopLevelClass <nl> + { <nl> + static final int FOO2 = 3 ; <nl> + <nl> + / / error public before package <nl> + public static final int FOO = 3 ; <nl> + <nl> + private static final int FOO3 = 3 ; <nl> + <nl> + / / eror public before package and private <nl> + public static final int FOO4 = 3 ; <nl> + <nl> + private static final String ERROR = " error " ; <nl> + <nl> + / / error protected before private <nl> + protected static final String ERROR1 = " error " ; <nl> + <nl> + / / error public before private <nl> + public static final String WARNING = " warning " ; <nl> + <nl> + private int mMaxInitVars = 3 ; <nl> + <nl> + / / error statics should be before instance members <nl> + / / error publics before private <nl> + public static final int MAX _ ITER _ VARS = 3 ; <nl> + <nl> + private class InnerClass <nl> + { <nl> + private static final int INNER _ FOO = 2 ; <nl> + <nl> + / / error public before private <nl> + public static final int INNER _ FOO2 = 2 ; <nl> + <nl> + public InnerClass ( ) <nl> + { <nl> + int foo = INNER _ FOO ; <nl> + foo + = INNER _ FOO2 ; <nl> + foo + = INNER _ FOO3 ; <nl> + } <nl> + <nl> + / / error member variables should be before methods or ctors <nl> + / / error public before private <nl> + public static final int INNER _ FOO3 = 2 ; <nl> + } <nl> + <nl> + public int getFoo1 ( ) <nl> + { <nl> + return mFoo ; <nl> + } <nl> + <nl> + / / error ctors before methods <nl> + public InputOneTopLevelClass ( ) <nl> + { <nl> + String foo = ERROR ; <nl> + foo + = ERROR1 ; <nl> + foo + = WARNING ; <nl> + int fooInt = mMaxInitVars ; <nl> + fooInt + = MAX _ ITER _ VARS ; <nl> + fooInt + = mFoo ; <nl> + } <nl> + <nl> + public static int getFoo2 ( ) <nl> + { <nl> + return 13 ; <nl> + } <nl> + <nl> + public int getFoo ( ) <nl> + { <nl> + return mFoo ; <nl> + } <nl> + <nl> + private static int getFoo21 ( ) <nl> + { <nl> + return 14 ; <nl> + } <nl> + <nl> + / / error member variables should be before methods or ctors <nl> + private int mFoo = 0 ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassClone . java <nl> new file mode 100644 <nl> index 0000000 . . 5fee53e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassClone . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; <nl> + public class InputOneTopLevelClassClone <nl> + { / * class body * / <nl> + public InputOneTopLevelClassClone ( ) throws CloneNotSupportedException <nl> + { / / constructor body <nl> + super . equals ( new String ( ) ) ; <nl> + super . clone ( ) ; <nl> + } <nl> + <nl> + public Object clone ( ) throws CloneNotSupportedException <nl> + { <nl> + return super . clone ( ) ; <nl> + } <nl> + <nl> + public void method ( ) throws CloneNotSupportedException <nl> + { <nl> + super . clone ( ) ; <nl> + } <nl> + <nl> + { <nl> + super . clone ( ) ; <nl> + } <nl> + } <nl> + <nl> + class NoSuperClone <nl> + { <nl> + } <nl> + <nl> + class InnerClone <nl> + { <nl> + } <nl> + <nl> + class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > <nl> + { <nl> + } <nl> + <nl> + class CloneWithTypeArgumentsAndNoSuper < T > <nl> + { <nl> + } <nl> + <nl> + class MyClassWithGenericSuperMethod <nl> + { <nl> + } <nl> + <nl> + class AnotherClass { <nl> + } <nl> + <nl> + class NativeTest { <nl> + public native Object clone ( ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassDeclarationOrder . java <nl> new file mode 100644 <nl> index 0000000 . . 963e033 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassDeclarationOrder . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; <nl> + <nl> + public class InputOneTopLevelClassDeclarationOrder <nl> + { <nl> + private class InnerClass <nl> + { <nl> + } <nl> + } <nl> + <nl> + enum InputDeclarationOrderEnum <nl> + { <nl> + ENUM _ VALUE _ 1 ; <nl> + <nl> + class AsyncProcess { <nl> + private final int startLogErrorsCnt = 0 ; <nl> + protected final int maxTotalConcurrentTasks = 0 ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassNoPublic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassNoPublic . java <nl> new file mode 100644 <nl> index 0000000 . . 5fa33e6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassNoPublic . java <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; <nl> + <nl> + class InputOneTopLevelClassNoPublic <nl> + { <nl> + <nl> + } <nl> + <nl> + class InputOneTopLevelClassNoPublic2 <nl> + { <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelEnum . java <nl> new file mode 100644 <nl> index 0000000 . . 3043b7b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelEnum . java <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; <nl> + <nl> + public enum InputOneTopLevelEnum { <nl> + VALUE1 , VALUE2 ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelEnum2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelEnum2 . java <nl> new file mode 100644 <nl> index 0000000 . . 5b7673b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelEnum2 . java <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; <nl> + <nl> + enum InputOneTopLevelEnum2inner1 { <nl> + VALUE1 , VALUE2 ; <nl> + } <nl> + <nl> + public enum InputOneTopLevelEnum2 { <nl> + VALUE1 , VALUE2 ; <nl> + } <nl> + <nl> + enum InputOneTopLevelEnum2inner2 { <nl> + VALUE1 , VALUE2 ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelInterface . java <nl> new file mode 100644 <nl> index 0000000 . . 4a2fd11 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelInterface . java <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; <nl> + <nl> + public interface InputOneTopLevelInterface { <nl> + int foo ( ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelInterface2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelInterface2 . java <nl> new file mode 100644 <nl> index 0000000 . . ae13b97 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelInterface2 . java <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; <nl> + <nl> + interface InputOneTopLevelInterface2inner1 { <nl> + int foo ( ) ; <nl> + } <nl> + <nl> + public interface InputOneTopLevelInterface2 { <nl> + int foo ( ) ; <nl> + } <nl> + <nl> + interface InputOneTopLevelInterface2inner2 { <nl> + int foo ( ) ; <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> index 2a7ac52 . . 4448f67 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> @ @ - 109 , 7 + 109 , 7 @ @ public class TrailingCommentCheck extends AbstractCheck { <nl> private Pattern legalComment ; <nl> <nl> / * * The regexp to match against . * / <nl> - private Pattern format = Pattern . compile ( " ^ [ \ \ s \ \ } ) ; ] * $ " ) ; <nl> + private Pattern format = Pattern . compile ( " ^ [ \ \ s } ) ; ] * $ " ) ; <nl> <nl> / * * <nl> * Sets patter for legal trailing comments . <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> index f104402 . . bd14692 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> @ @ - 77 , 7 + 77 , 7 @ @ public final class JavadocUtils { <nl> <nl> / * * Inline tag pattern . * / <nl> private static final Pattern INLINE _ TAG _ PATTERN = Pattern . compile ( <nl> - " . * ? \ \ { @ ( \ \ p { Alpha } + ) \ \ s + ( . * ? ) \ \ } " ) ; <nl> + " . * ? \ \ { @ ( \ \ p { Alpha } + ) \ \ s + ( . * ? ) } " ) ; <nl> <nl> / * * Newline pattern . * / <nl> private static final Pattern NEWLINE = Pattern . compile ( " \ n " ) ; <nl> diff - - git a / src / xdocs / config _ misc . xml b / src / xdocs / config _ misc . xml <nl> index c209daa . . 9b4bc43 100644 <nl> - - - a / src / xdocs / config _ misc . xml <nl> + + + b / src / xdocs / config _ misc . xml <nl> @ @ - 1491 , 7 + 1491 , 7 @ @ d = e / f ; / / Another comment for this line <nl> < td > format < / td > <nl> < td > pattern for strings allowed before the comment < / td > <nl> < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td > <nl> - < td > < code > " ^ [ \ s \ } ) ; ] * $ " < / code > < / td > <nl> + < td > < code > " ^ [ \ s } ) ; ] * $ " < / code > < / td > <nl> < / tr > <nl> < tr > <nl> < td > legalComment < / td >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 index be3ca0e . . 575af9a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 @ @ - 36 , 13 + 36 , 17 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " design " + File . separator + filename ) ; 
 + + " design " + File . separator 
 + + " onetoplevelclass " + File . separator 
 + + filename ) ; 
 } 
 
 @ Override 
 protected String getNonCompilablePath ( String filename ) throws IOException { 
 return super . getNonCompilablePath ( " checks " + File . separator 
 - + " design " + File . separator + filename ) ; 
 + + " design " + File . separator 
 + + " onetoplevelclass " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 129 , 7 + 133 , 7 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { 
 " 45 : " + getCheckMessage ( MSG _ KEY , " AnotherClass " ) , 
 " 48 : " + getCheckMessage ( MSG _ KEY , " NativeTest " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputClone . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputOneTopLevelClassClone . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 139 , 7 + 143 , 7 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 10 : " + getCheckMessage ( MSG _ KEY , " InputDeclarationOrderEnum " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputOneTopLevelClassDeclarationOrder . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / package - info . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / package - info . java 
 new file mode 100644 
 index 0000000 . . 45b7235 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / package - info . java 
 @ @ - 0 , 0 + 1 , 23 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + / * * 
 + * Package containing input files for design checks . 
 + * / 
 + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / design / package - info . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / design / package - info . java 
 deleted file mode 100644 
 index 2aedf51 . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / design / package - info . java 
 + + + / dev / null 
 @ @ - 1 , 23 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - / * * 
 - * Package containing input files for design checks . 
 - * / 
 - package com . puppycrawl . tools . checkstyle . checks . design ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputClone . java 
 deleted file mode 100644 
 index d70c859 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputClone . java 
 + + + / dev / null 
 @ @ - 1 , 50 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . design ; 
 - public class InputClone 
 - { / * class body * / 
 - public InputClone ( ) throws CloneNotSupportedException 
 - { / / constructor body 
 - super . equals ( new String ( ) ) ; 
 - super . clone ( ) ; 
 - } 
 - 
 - public Object clone ( ) throws CloneNotSupportedException 
 - { 
 - return super . clone ( ) ; 
 - } 
 - 
 - public void method ( ) throws CloneNotSupportedException 
 - { 
 - super . clone ( ) ; 
 - } 
 - 
 - { 
 - super . clone ( ) ; 
 - } 
 - } 
 - 
 - class NoSuperClone 
 - { 
 - } 
 - 
 - class InnerClone 
 - { 
 - } 
 - 
 - class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > 
 - { 
 - } 
 - 
 - class CloneWithTypeArgumentsAndNoSuper < T > 
 - { 
 - } 
 - 
 - class MyClassWithGenericSuperMethod 
 - { 
 - } 
 - 
 - class AnotherClass { 
 - } 
 - 
 - class NativeTest { 
 - public native Object clone ( ) ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDeclarationOrder . java 
 deleted file mode 100644 
 index d47b8e8 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDeclarationOrder . java 
 + + + / dev / null 
 @ @ - 1 , 18 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . design ; 
 - 
 - public class InputDeclarationOrder 
 - { 
 - private class InnerClass 
 - { 
 - } 
 - } 
 - 
 - enum InputDeclarationOrderEnum 
 - { 
 - ENUM _ VALUE _ 1 ; 
 - 
 - class AsyncProcess { 
 - private final int startLogErrorsCnt = 0 ; 
 - protected final int maxTotalConcurrentTasks = 0 ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelClass . java 
 deleted file mode 100644 
 index 56b1f59 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelClass . java 
 + + + / dev / null 
 @ @ - 1 , 81 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . design ; 
 - 
 - public class InputOneTopLevelClass 
 - { 
 - static final int FOO2 = 3 ; 
 - 
 - / / error public before package 
 - public static final int FOO = 3 ; 
 - 
 - private static final int FOO3 = 3 ; 
 - 
 - / / eror public before package and private 
 - public static final int FOO4 = 3 ; 
 - 
 - private static final String ERROR = " error " ; 
 - 
 - / / error protected before private 
 - protected static final String ERROR1 = " error " ; 
 - 
 - / / error public before private 
 - public static final String WARNING = " warning " ; 
 - 
 - private int mMaxInitVars = 3 ; 
 - 
 - / / error statics should be before instance members 
 - / / error publics before private 
 - public static final int MAX _ ITER _ VARS = 3 ; 
 - 
 - private class InnerClass 
 - { 
 - private static final int INNER _ FOO = 2 ; 
 - 
 - / / error public before private 
 - public static final int INNER _ FOO2 = 2 ; 
 - 
 - public InnerClass ( ) 
 - { 
 - int foo = INNER _ FOO ; 
 - foo + = INNER _ FOO2 ; 
 - foo + = INNER _ FOO3 ; 
 - } 
 - 
 - / / error member variables should be before methods or ctors 
 - / / error public before private 
 - public static final int INNER _ FOO3 = 2 ; 
 - } 
 - 
 - public int getFoo1 ( ) 
 - { 
 - return mFoo ; 
 - } 
 - 
 - / / error ctors before methods 
 - public InputOneTopLevelClass ( ) 
 - { 
 - String foo = ERROR ; 
 - foo + = ERROR1 ; 
 - foo + = WARNING ; 
 - int fooInt = mMaxInitVars ; 
 - fooInt + = MAX _ ITER _ VARS ; 
 - fooInt + = mFoo ; 
 - } 
 - 
 - public static int getFoo2 ( ) 
 - { 
 - return 13 ; 
 - } 
 - 
 - public int getFoo ( ) 
 - { 
 - return mFoo ; 
 - } 
 - 
 - private static int getFoo21 ( ) 
 - { 
 - return 14 ; 
 - } 
 - 
 - / / error member variables should be before methods or ctors 
 - private int mFoo = 0 ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelClassNoPublic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelClassNoPublic . java 
 deleted file mode 100644 
 index 55411c8 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelClassNoPublic . java 
 + + + / dev / null 
 @ @ - 1 , 11 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . design ; 
 - 
 - class InputOneTopLevelClassNoPublic 
 - { 
 - 
 - } 
 - 
 - class InputOneTopLevelClassNoPublic2 
 - { 
 - 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelEnum . java 
 deleted file mode 100644 
 index 46faae6 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelEnum . java 
 + + + / dev / null 
 @ @ - 1 , 5 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . design ; 
 - 
 - public enum InputOneTopLevelEnum { 
 - VALUE1 , VALUE2 ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelEnum2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelEnum2 . java 
 deleted file mode 100644 
 index e369ff5 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelEnum2 . java 
 + + + / dev / null 
 @ @ - 1 , 13 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . design ; 
 - 
 - enum InputOneTopLevelEnum2inner1 { 
 - VALUE1 , VALUE2 ; 
 - } 
 - 
 - public enum InputOneTopLevelEnum2 { 
 - VALUE1 , VALUE2 ; 
 - } 
 - 
 - enum InputOneTopLevelEnum2inner2 { 
 - VALUE1 , VALUE2 ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelInterface . java 
 deleted file mode 100644 
 index 651e0fe . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelInterface . java 
 + + + / dev / null 
 @ @ - 1 , 5 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . design ; 
 - 
 - public interface InputOneTopLevelInterface { 
 - int foo ( ) ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelInterface2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelInterface2 . java 
 deleted file mode 100644 
 index 86de2f5 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputOneTopLevelInterface2 . java 
 + + + / dev / null 
 @ @ - 1 , 13 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . design ; 
 - 
 - interface InputOneTopLevelInterface2inner1 { 
 - int foo ( ) ; 
 - } 
 - 
 - public interface InputOneTopLevelInterface2 { 
 - int foo ( ) ; 
 - } 
 - 
 - interface InputOneTopLevelInterface2inner2 { 
 - int foo ( ) ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClass . java 
 new file mode 100644 
 index 0000000 . . 60eaddd 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClass . java 
 @ @ - 0 , 0 + 1 , 81 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; 
 + 
 + public class InputOneTopLevelClass 
 + { 
 + static final int FOO2 = 3 ; 
 + 
 + / / error public before package 
 + public static final int FOO = 3 ; 
 + 
 + private static final int FOO3 = 3 ; 
 + 
 + / / eror public before package and private 
 + public static final int FOO4 = 3 ; 
 + 
 + private static final String ERROR = " error " ; 
 + 
 + / / error protected before private 
 + protected static final String ERROR1 = " error " ; 
 + 
 + / / error public before private 
 + public static final String WARNING = " warning " ; 
 + 
 + private int mMaxInitVars = 3 ; 
 + 
 + / / error statics should be before instance members 
 + / / error publics before private 
 + public static final int MAX _ ITER _ VARS = 3 ; 
 + 
 + private class InnerClass 
 + { 
 + private static final int INNER _ FOO = 2 ; 
 + 
 + / / error public before private 
 + public static final int INNER _ FOO2 = 2 ; 
 + 
 + public InnerClass ( ) 
 + { 
 + int foo = INNER _ FOO ; 
 + foo + = INNER _ FOO2 ; 
 + foo + = INNER _ FOO3 ; 
 + } 
 + 
 + / / error member variables should be before methods or ctors 
 + / / error public before private 
 + public static final int INNER _ FOO3 = 2 ; 
 + } 
 + 
 + public int getFoo1 ( ) 
 + { 
 + return mFoo ; 
 + } 
 + 
 + / / error ctors before methods 
 + public InputOneTopLevelClass ( ) 
 + { 
 + String foo = ERROR ; 
 + foo + = ERROR1 ; 
 + foo + = WARNING ; 
 + int fooInt = mMaxInitVars ; 
 + fooInt + = MAX _ ITER _ VARS ; 
 + fooInt + = mFoo ; 
 + } 
 + 
 + public static int getFoo2 ( ) 
 + { 
 + return 13 ; 
 + } 
 + 
 + public int getFoo ( ) 
 + { 
 + return mFoo ; 
 + } 
 + 
 + private static int getFoo21 ( ) 
 + { 
 + return 14 ; 
 + } 
 + 
 + / / error member variables should be before methods or ctors 
 + private int mFoo = 0 ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassClone . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassClone . java 
 new file mode 100644 
 index 0000000 . . 5fee53e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassClone . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; 
 + public class InputOneTopLevelClassClone 
 + { / * class body * / 
 + public InputOneTopLevelClassClone ( ) throws CloneNotSupportedException 
 + { / / constructor body 
 + super . equals ( new String ( ) ) ; 
 + super . clone ( ) ; 
 + } 
 + 
 + public Object clone ( ) throws CloneNotSupportedException 
 + { 
 + return super . clone ( ) ; 
 + } 
 + 
 + public void method ( ) throws CloneNotSupportedException 
 + { 
 + super . clone ( ) ; 
 + } 
 + 
 + { 
 + super . clone ( ) ; 
 + } 
 + } 
 + 
 + class NoSuperClone 
 + { 
 + } 
 + 
 + class InnerClone 
 + { 
 + } 
 + 
 + class CloneWithTypeArguments < T > extends CloneWithTypeArgumentsAndNoSuper < T > 
 + { 
 + } 
 + 
 + class CloneWithTypeArgumentsAndNoSuper < T > 
 + { 
 + } 
 + 
 + class MyClassWithGenericSuperMethod 
 + { 
 + } 
 + 
 + class AnotherClass { 
 + } 
 + 
 + class NativeTest { 
 + public native Object clone ( ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassDeclarationOrder . java 
 new file mode 100644 
 index 0000000 . . 963e033 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassDeclarationOrder . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; 
 + 
 + public class InputOneTopLevelClassDeclarationOrder 
 + { 
 + private class InnerClass 
 + { 
 + } 
 + } 
 + 
 + enum InputDeclarationOrderEnum 
 + { 
 + ENUM _ VALUE _ 1 ; 
 + 
 + class AsyncProcess { 
 + private final int startLogErrorsCnt = 0 ; 
 + protected final int maxTotalConcurrentTasks = 0 ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassNoPublic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassNoPublic . java 
 new file mode 100644 
 index 0000000 . . 5fa33e6 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelClassNoPublic . java 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; 
 + 
 + class InputOneTopLevelClassNoPublic 
 + { 
 + 
 + } 
 + 
 + class InputOneTopLevelClassNoPublic2 
 + { 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelEnum . java 
 new file mode 100644 
 index 0000000 . . 3043b7b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelEnum . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; 
 + 
 + public enum InputOneTopLevelEnum { 
 + VALUE1 , VALUE2 ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelEnum2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelEnum2 . java 
 new file mode 100644 
 index 0000000 . . 5b7673b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelEnum2 . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; 
 + 
 + enum InputOneTopLevelEnum2inner1 { 
 + VALUE1 , VALUE2 ; 
 + } 
 + 
 + public enum InputOneTopLevelEnum2 { 
 + VALUE1 , VALUE2 ; 
 + } 
 + 
 + enum InputOneTopLevelEnum2inner2 { 
 + VALUE1 , VALUE2 ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelInterface . java 
 new file mode 100644 
 index 0000000 . . 4a2fd11 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelInterface . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; 
 + 
 + public interface InputOneTopLevelInterface { 
 + int foo ( ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelInterface2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelInterface2 . java 
 new file mode 100644 
 index 0000000 . . ae13b97 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / onetoplevelclass / InputOneTopLevelInterface2 . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design . onetoplevelclass ; 
 + 
 + interface InputOneTopLevelInterface2inner1 { 
 + int foo ( ) ; 
 + } 
 + 
 + public interface InputOneTopLevelInterface2 { 
 + int foo ( ) ; 
 + } 
 + 
 + interface InputOneTopLevelInterface2inner2 { 
 + int foo ( ) ; 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 index 2a7ac52 . . 4448f67 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 @ @ - 109 , 7 + 109 , 7 @ @ public class TrailingCommentCheck extends AbstractCheck { 
 private Pattern legalComment ; 
 
 / * * The regexp to match against . * / 
 - private Pattern format = Pattern . compile ( " ^ [ \ \ s \ \ } ) ; ] * $ " ) ; 
 + private Pattern format = Pattern . compile ( " ^ [ \ \ s } ) ; ] * $ " ) ; 
 
 / * * 
 * Sets patter for legal trailing comments . 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 index f104402 . . bd14692 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 @ @ - 77 , 7 + 77 , 7 @ @ public final class JavadocUtils { 
 
 / * * Inline tag pattern . * / 
 private static final Pattern INLINE _ TAG _ PATTERN = Pattern . compile ( 
 - " . * ? \ \ { @ ( \ \ p { Alpha } + ) \ \ s + ( . * ? ) \ \ } " ) ; 
 + " . * ? \ \ { @ ( \ \ p { Alpha } + ) \ \ s + ( . * ? ) } " ) ; 
 
 / * * Newline pattern . * / 
 private static final Pattern NEWLINE = Pattern . compile ( " \ n " ) ; 
 diff - - git a / src / xdocs / config _ misc . xml b / src / xdocs / config _ misc . xml 
 index c209daa . . 9b4bc43 100644 
 - - - a / src / xdocs / config _ misc . xml 
 + + + b / src / xdocs / config _ misc . xml 
 @ @ - 1491 , 7 + 1491 , 7 @ @ d = e / f ; / / Another comment for this line 
 < td > format < / td > 
 < td > pattern for strings allowed before the comment < / td > 
 < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td > 
 - < td > < code > " ^ [ \ s \ } ) ; ] * $ " < / code > < / td > 
 + < td > < code > " ^ [ \ s } ) ; ] * $ " < / code > < / td > 
 < / tr > 
 < tr > 
 < td > legalComment < / td >
