BLEU SCORE: 0.041961149062965476

TEST MSG: Issue # 2997 : added test to verify TokenType numbers
GENERATED MSG: added support for jdk 1 . 4 assert statements

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 70ab69b . . 8b123ae 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 104 , 6 + 104 , 9 @ @ <nl> < suppress checks = " MethodLength " files = " src [ \ \ / ] test [ \ \ / ] java [ \ \ / ] com [ \ \ / ] puppycrawl [ \ \ / ] tools [ \ \ / ] checkstyle [ \ \ / ] grammars [ \ \ / ] comments [ \ \ / ] CommentsTest \ . java " / > <nl> < suppress checks = " ExecutableStatementCount " files = " src [ \ \ / ] test [ \ \ / ] java [ \ \ / ] com [ \ \ / ] puppycrawl [ \ \ / ] tools [ \ \ / ] checkstyle [ \ \ / ] grammars [ \ \ / ] comments [ \ \ / ] CommentsTest \ . java " / > <nl> < suppress checks = " JavaNCSS " files = " src [ \ \ / ] test [ \ \ / ] java [ \ \ / ] com [ \ \ / ] puppycrawl [ \ \ / ] tools [ \ \ / ] checkstyle [ \ \ / ] grammars [ \ \ / ] comments [ \ \ / ] CommentsTest \ . java " / > <nl> + < suppress checks = " MethodLength " files = " . * GeneratedJavaTokenTypesTest \ . java " / > <nl> + < suppress checks = " ExecutableStatementCount " files = " . * GeneratedJavaTokenTypesTest \ . java " / > <nl> + < suppress checks = " JavaNCSS " files = " . * GeneratedJavaTokenTypesTest \ . java " / > <nl> <nl> < suppress checks = " . " files = " . * JavadocTokenTypes \ . java " / > <nl> < suppress checks = " . " files = " . * ParseTreeBuilder \ . java " / > <nl> @ @ - 133 , 7 + 136 , 7 @ @ <nl> <nl> < ! - - Should be fixed after moving https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / blob / master / sevntu - checks / src / main / java / com / github / sevntu / checkstyle / checks / coding / ReturnCountExtendedCheck . java into the main repo - - > <nl> < suppress checks = " ReturnCount " files = " ( ClassResolver | ConfigurationLoader | IndentationCheckTest ) \ . java " / > <nl> - <nl> + <nl> < ! - - Just big switches . Cannot be split to several methods . Till https : / / github . com / checkstyle / checkstyle / issues / 2029 - - > <nl> < suppress checks = " CyclomaticComplexity " files = " ( AbstractDeclarationCollector | RequireThisCheck | SuppressWarningsHolder | LeftCurlyCheck | FallThroughCheck | FinalLocalVariableCheck | ModifiedControlVariableCheck ) \ . java " / > <nl> < suppress checks = " CyclomaticComplexity " files = " ( ParameterAssignmentCheck | VariableDeclarationUsageDistanceCheck | BooleanExpressionComplexityCheck | NPathComplexityCheck | CheckUtils ) \ . java " / > <nl> @ @ - 145 , 7 + 148 , 7 @ @ <nl> < suppress checks = " CyclomaticComplexity " files = " JavadocMethodCheck \ . java " / > <nl> < suppress checks = " CyclomaticComplexity " files = " JavadocStyleCheck \ . java " / > <nl> < suppress checks = " CyclomaticComplexity " files = " CustomImportOrderCheck \ . java " / > <nl> - <nl> + <nl> < ! - - equals ( ) - a lot of fields to check - - > <nl> < suppress checks = " CyclomaticComplexity " files = " LocalizedMessage \ . java " lines = " 210 " / > <nl> < ! - - SWITCH was transformed into IF - ELSE - - > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJavaTokenTypesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJavaTokenTypesTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0960290 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJavaTokenTypesTest . java <nl> @ @ - 0 , 0 + 1 , 252 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2016 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . grammars ; <nl> + <nl> + import org . junit . Assert ; <nl> + import org . junit . Test ; <nl> + <nl> + public class GeneratedJavaTokenTypesTest { <nl> + / * * <nl> + * < p > <nl> + * New tokens must be added onto the end of the list with new numbers , and <nl> + * old tokens must remain and keep their current numbering . Old token <nl> + * numberings are not allowed to change . <nl> + * < / p > <nl> + * < p > <nl> + * The reason behind this is Java inlines static final field values directly <nl> + * into the compiled Java code . This loses all connections with the original <nl> + * class , GeneratedJavaTokenTypes , and so numbering updates are not picked <nl> + * up in user - created checks and causes conflicts . <nl> + * < / p > <nl> + * <nl> + * Issue : https : / / github . com / checkstyle / checkstyle / issues / 505 <nl> + * / <nl> + @ Test <nl> + public void testTokenNumbering ( ) { <nl> + final String message = " A token ' s number has changed . Please open " <nl> + + " ' GeneratedJavaTokenTypesTest ' and confirm which token is at fault . \ n " <nl> + + " Token numbers must not change or else they will create a conflict " <nl> + + " with users . \ n \ n " <nl> + + " See Issue : https : / / github . com / checkstyle / checkstyle / issues / 505 " ; <nl> + <nl> + / / Read JavaDoc before changing <nl> + Assert . assertEquals ( message , 1 , GeneratedJavaTokenTypes . EOF ) ; <nl> + Assert . assertEquals ( message , 3 , GeneratedJavaTokenTypes . NULL _ TREE _ LOOKAHEAD ) ; <nl> + Assert . assertEquals ( message , 4 , GeneratedJavaTokenTypes . BLOCK ) ; <nl> + Assert . assertEquals ( message , 5 , GeneratedJavaTokenTypes . MODIFIERS ) ; <nl> + Assert . assertEquals ( message , 6 , GeneratedJavaTokenTypes . OBJBLOCK ) ; <nl> + Assert . assertEquals ( message , 7 , GeneratedJavaTokenTypes . SLIST ) ; <nl> + Assert . assertEquals ( message , 8 , GeneratedJavaTokenTypes . CTOR _ DEF ) ; <nl> + Assert . assertEquals ( message , 9 , GeneratedJavaTokenTypes . METHOD _ DEF ) ; <nl> + Assert . assertEquals ( message , 10 , GeneratedJavaTokenTypes . VARIABLE _ DEF ) ; <nl> + Assert . assertEquals ( message , 11 , GeneratedJavaTokenTypes . INSTANCE _ INIT ) ; <nl> + Assert . assertEquals ( message , 12 , GeneratedJavaTokenTypes . STATIC _ INIT ) ; <nl> + Assert . assertEquals ( message , 13 , GeneratedJavaTokenTypes . TYPE ) ; <nl> + Assert . assertEquals ( message , 14 , GeneratedJavaTokenTypes . CLASS _ DEF ) ; <nl> + Assert . assertEquals ( message , 15 , GeneratedJavaTokenTypes . INTERFACE _ DEF ) ; <nl> + Assert . assertEquals ( message , 16 , GeneratedJavaTokenTypes . PACKAGE _ DEF ) ; <nl> + Assert . assertEquals ( message , 17 , GeneratedJavaTokenTypes . ARRAY _ DECLARATOR ) ; <nl> + Assert . assertEquals ( message , 18 , GeneratedJavaTokenTypes . EXTENDS _ CLAUSE ) ; <nl> + Assert . assertEquals ( message , 19 , GeneratedJavaTokenTypes . IMPLEMENTS _ CLAUSE ) ; <nl> + Assert . assertEquals ( message , 20 , GeneratedJavaTokenTypes . PARAMETERS ) ; <nl> + Assert . assertEquals ( message , 21 , GeneratedJavaTokenTypes . PARAMETER _ DEF ) ; <nl> + Assert . assertEquals ( message , 22 , GeneratedJavaTokenTypes . LABELED _ STAT ) ; <nl> + Assert . assertEquals ( message , 23 , GeneratedJavaTokenTypes . TYPECAST ) ; <nl> + Assert . assertEquals ( message , 24 , GeneratedJavaTokenTypes . INDEX _ OP ) ; <nl> + Assert . assertEquals ( message , 25 , GeneratedJavaTokenTypes . POST _ INC ) ; <nl> + Assert . assertEquals ( message , 26 , GeneratedJavaTokenTypes . POST _ DEC ) ; <nl> + Assert . assertEquals ( message , 27 , GeneratedJavaTokenTypes . METHOD _ CALL ) ; <nl> + Assert . assertEquals ( message , 28 , GeneratedJavaTokenTypes . EXPR ) ; <nl> + Assert . assertEquals ( message , 29 , GeneratedJavaTokenTypes . ARRAY _ INIT ) ; <nl> + Assert . assertEquals ( message , 30 , GeneratedJavaTokenTypes . IMPORT ) ; <nl> + Assert . assertEquals ( message , 31 , GeneratedJavaTokenTypes . UNARY _ MINUS ) ; <nl> + Assert . assertEquals ( message , 32 , GeneratedJavaTokenTypes . UNARY _ PLUS ) ; <nl> + Assert . assertEquals ( message , 33 , GeneratedJavaTokenTypes . CASE _ GROUP ) ; <nl> + Assert . assertEquals ( message , 34 , GeneratedJavaTokenTypes . ELIST ) ; <nl> + Assert . assertEquals ( message , 35 , GeneratedJavaTokenTypes . FOR _ INIT ) ; <nl> + Assert . assertEquals ( message , 36 , GeneratedJavaTokenTypes . FOR _ CONDITION ) ; <nl> + Assert . assertEquals ( message , 37 , GeneratedJavaTokenTypes . FOR _ ITERATOR ) ; <nl> + Assert . assertEquals ( message , 38 , GeneratedJavaTokenTypes . EMPTY _ STAT ) ; <nl> + Assert . assertEquals ( message , 39 , GeneratedJavaTokenTypes . FINAL ) ; <nl> + Assert . assertEquals ( message , 40 , GeneratedJavaTokenTypes . ABSTRACT ) ; <nl> + Assert . assertEquals ( message , 41 , GeneratedJavaTokenTypes . STRICTFP ) ; <nl> + Assert . assertEquals ( message , 42 , GeneratedJavaTokenTypes . SUPER _ CTOR _ CALL ) ; <nl> + Assert . assertEquals ( message , 43 , GeneratedJavaTokenTypes . CTOR _ CALL ) ; <nl> + Assert . assertEquals ( message , 44 , GeneratedJavaTokenTypes . LITERAL _ package ) ; <nl> + Assert . assertEquals ( message , 45 , GeneratedJavaTokenTypes . SEMI ) ; <nl> + Assert . assertEquals ( message , 46 , GeneratedJavaTokenTypes . LITERAL _ import ) ; <nl> + Assert . assertEquals ( message , 47 , GeneratedJavaTokenTypes . LBRACK ) ; <nl> + Assert . assertEquals ( message , 48 , GeneratedJavaTokenTypes . RBRACK ) ; <nl> + Assert . assertEquals ( message , 49 , GeneratedJavaTokenTypes . LITERAL _ void ) ; <nl> + Assert . assertEquals ( message , 50 , GeneratedJavaTokenTypes . LITERAL _ boolean ) ; <nl> + Assert . assertEquals ( message , 51 , GeneratedJavaTokenTypes . LITERAL _ byte ) ; <nl> + Assert . assertEquals ( message , 52 , GeneratedJavaTokenTypes . LITERAL _ char ) ; <nl> + Assert . assertEquals ( message , 53 , GeneratedJavaTokenTypes . LITERAL _ short ) ; <nl> + Assert . assertEquals ( message , 54 , GeneratedJavaTokenTypes . LITERAL _ int ) ; <nl> + Assert . assertEquals ( message , 55 , GeneratedJavaTokenTypes . LITERAL _ float ) ; <nl> + Assert . assertEquals ( message , 56 , GeneratedJavaTokenTypes . LITERAL _ long ) ; <nl> + Assert . assertEquals ( message , 57 , GeneratedJavaTokenTypes . LITERAL _ double ) ; <nl> + Assert . assertEquals ( message , 58 , GeneratedJavaTokenTypes . IDENT ) ; <nl> + Assert . assertEquals ( message , 59 , GeneratedJavaTokenTypes . DOT ) ; <nl> + Assert . assertEquals ( message , 60 , GeneratedJavaTokenTypes . STAR ) ; <nl> + Assert . assertEquals ( message , 61 , GeneratedJavaTokenTypes . LITERAL _ private ) ; <nl> + Assert . assertEquals ( message , 62 , GeneratedJavaTokenTypes . LITERAL _ public ) ; <nl> + Assert . assertEquals ( message , 63 , GeneratedJavaTokenTypes . LITERAL _ protected ) ; <nl> + Assert . assertEquals ( message , 64 , GeneratedJavaTokenTypes . LITERAL _ static ) ; <nl> + Assert . assertEquals ( message , 65 , GeneratedJavaTokenTypes . LITERAL _ transient ) ; <nl> + Assert . assertEquals ( message , 66 , GeneratedJavaTokenTypes . LITERAL _ native ) ; <nl> + Assert . assertEquals ( message , 67 , GeneratedJavaTokenTypes . LITERAL _ synchronized ) ; <nl> + Assert . assertEquals ( message , 68 , GeneratedJavaTokenTypes . LITERAL _ volatile ) ; <nl> + Assert . assertEquals ( message , 69 , GeneratedJavaTokenTypes . LITERAL _ class ) ; <nl> + Assert . assertEquals ( message , 70 , GeneratedJavaTokenTypes . LITERAL _ extends ) ; <nl> + Assert . assertEquals ( message , 71 , GeneratedJavaTokenTypes . LITERAL _ interface ) ; <nl> + Assert . assertEquals ( message , 72 , GeneratedJavaTokenTypes . LCURLY ) ; <nl> + Assert . assertEquals ( message , 73 , GeneratedJavaTokenTypes . RCURLY ) ; <nl> + Assert . assertEquals ( message , 74 , GeneratedJavaTokenTypes . COMMA ) ; <nl> + Assert . assertEquals ( message , 75 , GeneratedJavaTokenTypes . LITERAL _ implements ) ; <nl> + Assert . assertEquals ( message , 76 , GeneratedJavaTokenTypes . LPAREN ) ; <nl> + Assert . assertEquals ( message , 77 , GeneratedJavaTokenTypes . RPAREN ) ; <nl> + Assert . assertEquals ( message , 78 , GeneratedJavaTokenTypes . LITERAL _ this ) ; <nl> + Assert . assertEquals ( message , 79 , GeneratedJavaTokenTypes . LITERAL _ super ) ; <nl> + Assert . assertEquals ( message , 80 , GeneratedJavaTokenTypes . ASSIGN ) ; <nl> + Assert . assertEquals ( message , 81 , GeneratedJavaTokenTypes . LITERAL _ throws ) ; <nl> + Assert . assertEquals ( message , 82 , GeneratedJavaTokenTypes . COLON ) ; <nl> + Assert . assertEquals ( message , 83 , GeneratedJavaTokenTypes . LITERAL _ if ) ; <nl> + Assert . assertEquals ( message , 84 , GeneratedJavaTokenTypes . LITERAL _ while ) ; <nl> + Assert . assertEquals ( message , 85 , GeneratedJavaTokenTypes . LITERAL _ do ) ; <nl> + Assert . assertEquals ( message , 86 , GeneratedJavaTokenTypes . LITERAL _ break ) ; <nl> + Assert . assertEquals ( message , 87 , GeneratedJavaTokenTypes . LITERAL _ continue ) ; <nl> + Assert . assertEquals ( message , 88 , GeneratedJavaTokenTypes . LITERAL _ return ) ; <nl> + Assert . assertEquals ( message , 89 , GeneratedJavaTokenTypes . LITERAL _ switch ) ; <nl> + Assert . assertEquals ( message , 90 , GeneratedJavaTokenTypes . LITERAL _ throw ) ; <nl> + Assert . assertEquals ( message , 91 , GeneratedJavaTokenTypes . LITERAL _ for ) ; <nl> + Assert . assertEquals ( message , 92 , GeneratedJavaTokenTypes . LITERAL _ else ) ; <nl> + Assert . assertEquals ( message , 93 , GeneratedJavaTokenTypes . LITERAL _ case ) ; <nl> + Assert . assertEquals ( message , 94 , GeneratedJavaTokenTypes . LITERAL _ default ) ; <nl> + Assert . assertEquals ( message , 95 , GeneratedJavaTokenTypes . LITERAL _ try ) ; <nl> + Assert . assertEquals ( message , 96 , GeneratedJavaTokenTypes . LITERAL _ catch ) ; <nl> + Assert . assertEquals ( message , 97 , GeneratedJavaTokenTypes . LITERAL _ finally ) ; <nl> + Assert . assertEquals ( message , 98 , GeneratedJavaTokenTypes . PLUS _ ASSIGN ) ; <nl> + Assert . assertEquals ( message , 99 , GeneratedJavaTokenTypes . MINUS _ ASSIGN ) ; <nl> + Assert . assertEquals ( message , 100 , GeneratedJavaTokenTypes . STAR _ ASSIGN ) ; <nl> + Assert . assertEquals ( message , 101 , GeneratedJavaTokenTypes . DIV _ ASSIGN ) ; <nl> + Assert . assertEquals ( message , 102 , GeneratedJavaTokenTypes . MOD _ ASSIGN ) ; <nl> + Assert . assertEquals ( message , 103 , GeneratedJavaTokenTypes . SR _ ASSIGN ) ; <nl> + Assert . assertEquals ( message , 104 , GeneratedJavaTokenTypes . BSR _ ASSIGN ) ; <nl> + Assert . assertEquals ( message , 105 , GeneratedJavaTokenTypes . SL _ ASSIGN ) ; <nl> + Assert . assertEquals ( message , 106 , GeneratedJavaTokenTypes . BAND _ ASSIGN ) ; <nl> + Assert . assertEquals ( message , 107 , GeneratedJavaTokenTypes . BXOR _ ASSIGN ) ; <nl> + Assert . assertEquals ( message , 108 , GeneratedJavaTokenTypes . BOR _ ASSIGN ) ; <nl> + Assert . assertEquals ( message , 109 , GeneratedJavaTokenTypes . QUESTION ) ; <nl> + Assert . assertEquals ( message , 110 , GeneratedJavaTokenTypes . LOR ) ; <nl> + Assert . assertEquals ( message , 111 , GeneratedJavaTokenTypes . LAND ) ; <nl> + Assert . assertEquals ( message , 112 , GeneratedJavaTokenTypes . BOR ) ; <nl> + Assert . assertEquals ( message , 113 , GeneratedJavaTokenTypes . BXOR ) ; <nl> + Assert . assertEquals ( message , 114 , GeneratedJavaTokenTypes . BAND ) ; <nl> + Assert . assertEquals ( message , 115 , GeneratedJavaTokenTypes . NOT _ EQUAL ) ; <nl> + Assert . assertEquals ( message , 116 , GeneratedJavaTokenTypes . EQUAL ) ; <nl> + Assert . assertEquals ( message , 117 , GeneratedJavaTokenTypes . LT ) ; <nl> + Assert . assertEquals ( message , 118 , GeneratedJavaTokenTypes . GT ) ; <nl> + Assert . assertEquals ( message , 119 , GeneratedJavaTokenTypes . LE ) ; <nl> + Assert . assertEquals ( message , 120 , GeneratedJavaTokenTypes . GE ) ; <nl> + Assert . assertEquals ( message , 121 , GeneratedJavaTokenTypes . LITERAL _ instanceof ) ; <nl> + Assert . assertEquals ( message , 122 , GeneratedJavaTokenTypes . SL ) ; <nl> + Assert . assertEquals ( message , 123 , GeneratedJavaTokenTypes . SR ) ; <nl> + Assert . assertEquals ( message , 124 , GeneratedJavaTokenTypes . BSR ) ; <nl> + Assert . assertEquals ( message , 125 , GeneratedJavaTokenTypes . PLUS ) ; <nl> + Assert . assertEquals ( message , 126 , GeneratedJavaTokenTypes . MINUS ) ; <nl> + Assert . assertEquals ( message , 127 , GeneratedJavaTokenTypes . DIV ) ; <nl> + Assert . assertEquals ( message , 128 , GeneratedJavaTokenTypes . MOD ) ; <nl> + Assert . assertEquals ( message , 129 , GeneratedJavaTokenTypes . INC ) ; <nl> + Assert . assertEquals ( message , 130 , GeneratedJavaTokenTypes . DEC ) ; <nl> + Assert . assertEquals ( message , 131 , GeneratedJavaTokenTypes . BNOT ) ; <nl> + Assert . assertEquals ( message , 132 , GeneratedJavaTokenTypes . LNOT ) ; <nl> + Assert . assertEquals ( message , 133 , GeneratedJavaTokenTypes . LITERAL _ true ) ; <nl> + Assert . assertEquals ( message , 134 , GeneratedJavaTokenTypes . LITERAL _ false ) ; <nl> + Assert . assertEquals ( message , 135 , GeneratedJavaTokenTypes . LITERAL _ null ) ; <nl> + Assert . assertEquals ( message , 136 , GeneratedJavaTokenTypes . LITERAL _ new ) ; <nl> + Assert . assertEquals ( message , 137 , GeneratedJavaTokenTypes . NUM _ INT ) ; <nl> + Assert . assertEquals ( message , 138 , GeneratedJavaTokenTypes . CHAR _ LITERAL ) ; <nl> + Assert . assertEquals ( message , 139 , GeneratedJavaTokenTypes . STRING _ LITERAL ) ; <nl> + Assert . assertEquals ( message , 140 , GeneratedJavaTokenTypes . NUM _ FLOAT ) ; <nl> + Assert . assertEquals ( message , 141 , GeneratedJavaTokenTypes . NUM _ LONG ) ; <nl> + Assert . assertEquals ( message , 142 , GeneratedJavaTokenTypes . NUM _ DOUBLE ) ; <nl> + Assert . assertEquals ( message , 143 , GeneratedJavaTokenTypes . WS ) ; <nl> + Assert . assertEquals ( message , 144 , GeneratedJavaTokenTypes . SINGLE _ LINE _ COMMENT ) ; <nl> + Assert . assertEquals ( message , 145 , GeneratedJavaTokenTypes . BLOCK _ COMMENT _ BEGIN ) ; <nl> + Assert . assertEquals ( message , 146 , GeneratedJavaTokenTypes . ESC ) ; <nl> + Assert . assertEquals ( message , 147 , GeneratedJavaTokenTypes . HEX _ DIGIT ) ; <nl> + Assert . assertEquals ( message , 148 , GeneratedJavaTokenTypes . VOCAB ) ; <nl> + Assert . assertEquals ( message , 149 , GeneratedJavaTokenTypes . EXPONENT ) ; <nl> + Assert . assertEquals ( message , 150 , GeneratedJavaTokenTypes . FLOAT _ SUFFIX ) ; <nl> + Assert . assertEquals ( message , 151 , GeneratedJavaTokenTypes . ASSERT ) ; <nl> + Assert . assertEquals ( message , 152 , GeneratedJavaTokenTypes . STATIC _ IMPORT ) ; <nl> + Assert . assertEquals ( message , 153 , GeneratedJavaTokenTypes . ENUM ) ; <nl> + Assert . assertEquals ( message , 154 , GeneratedJavaTokenTypes . ENUM _ DEF ) ; <nl> + Assert . assertEquals ( message , 155 , GeneratedJavaTokenTypes . ENUM _ CONSTANT _ DEF ) ; <nl> + Assert . assertEquals ( message , 156 , GeneratedJavaTokenTypes . FOR _ EACH _ CLAUSE ) ; <nl> + Assert . assertEquals ( message , 157 , GeneratedJavaTokenTypes . ANNOTATION _ DEF ) ; <nl> + Assert . assertEquals ( message , 158 , GeneratedJavaTokenTypes . ANNOTATIONS ) ; <nl> + Assert . assertEquals ( message , 159 , GeneratedJavaTokenTypes . ANNOTATION ) ; <nl> + Assert . assertEquals ( message , 160 , GeneratedJavaTokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> + Assert . assertEquals ( message , 161 , GeneratedJavaTokenTypes . ANNOTATION _ FIELD _ DEF ) ; <nl> + Assert . assertEquals ( message , 162 , GeneratedJavaTokenTypes . ANNOTATION _ ARRAY _ INIT ) ; <nl> + Assert . assertEquals ( message , 163 , GeneratedJavaTokenTypes . TYPE _ ARGUMENTS ) ; <nl> + Assert . assertEquals ( message , 164 , GeneratedJavaTokenTypes . TYPE _ ARGUMENT ) ; <nl> + Assert . assertEquals ( message , 165 , GeneratedJavaTokenTypes . TYPE _ PARAMETERS ) ; <nl> + Assert . assertEquals ( message , 166 , GeneratedJavaTokenTypes . TYPE _ PARAMETER ) ; <nl> + Assert . assertEquals ( message , 167 , GeneratedJavaTokenTypes . WILDCARD _ TYPE ) ; <nl> + Assert . assertEquals ( message , 168 , GeneratedJavaTokenTypes . TYPE _ UPPER _ BOUNDS ) ; <nl> + Assert . assertEquals ( message , 169 , GeneratedJavaTokenTypes . TYPE _ LOWER _ BOUNDS ) ; <nl> + Assert . assertEquals ( message , 170 , GeneratedJavaTokenTypes . AT ) ; <nl> + Assert . assertEquals ( message , 171 , GeneratedJavaTokenTypes . ELLIPSIS ) ; <nl> + Assert . assertEquals ( message , 172 , GeneratedJavaTokenTypes . GENERIC _ START ) ; <nl> + Assert . assertEquals ( message , 173 , GeneratedJavaTokenTypes . GENERIC _ END ) ; <nl> + Assert . assertEquals ( message , 174 , GeneratedJavaTokenTypes . TYPE _ EXTENSION _ AND ) ; <nl> + Assert . assertEquals ( message , 175 , GeneratedJavaTokenTypes . DO _ WHILE ) ; <nl> + Assert . assertEquals ( message , 176 , GeneratedJavaTokenTypes . RESOURCE _ SPECIFICATION ) ; <nl> + Assert . assertEquals ( message , 177 , GeneratedJavaTokenTypes . RESOURCES ) ; <nl> + Assert . assertEquals ( message , 178 , GeneratedJavaTokenTypes . RESOURCE ) ; <nl> + Assert . assertEquals ( message , 179 , GeneratedJavaTokenTypes . DOUBLE _ COLON ) ; <nl> + Assert . assertEquals ( message , 180 , GeneratedJavaTokenTypes . METHOD _ REF ) ; <nl> + Assert . assertEquals ( message , 181 , GeneratedJavaTokenTypes . LAMBDA ) ; <nl> + Assert . assertEquals ( message , 182 , GeneratedJavaTokenTypes . BLOCK _ COMMENT _ END ) ; <nl> + Assert . assertEquals ( message , 183 , GeneratedJavaTokenTypes . COMMENT _ CONTENT ) ; <nl> + Assert . assertEquals ( message , 184 , GeneratedJavaTokenTypes . SINGLE _ LINE _ COMMENT _ CONTENT ) ; <nl> + Assert . assertEquals ( message , 185 , GeneratedJavaTokenTypes . BLOCK _ COMMENT _ CONTENT ) ; <nl> + Assert . assertEquals ( message , 186 , GeneratedJavaTokenTypes . STD _ ESC ) ; <nl> + Assert . assertEquals ( message , 187 , GeneratedJavaTokenTypes . BINARY _ DIGIT ) ; <nl> + Assert . assertEquals ( message , 188 , GeneratedJavaTokenTypes . ID _ START ) ; <nl> + Assert . assertEquals ( message , 189 , GeneratedJavaTokenTypes . ID _ PART ) ; <nl> + Assert . assertEquals ( message , 190 , GeneratedJavaTokenTypes . INT _ LITERAL ) ; <nl> + Assert . assertEquals ( message , 191 , GeneratedJavaTokenTypes . LONG _ LITERAL ) ; <nl> + Assert . assertEquals ( message , 192 , GeneratedJavaTokenTypes . FLOAT _ LITERAL ) ; <nl> + Assert . assertEquals ( message , 193 , GeneratedJavaTokenTypes . DOUBLE _ LITERAL ) ; <nl> + Assert . assertEquals ( message , 194 , GeneratedJavaTokenTypes . HEX _ FLOAT _ LITERAL ) ; <nl> + Assert . assertEquals ( message , 195 , GeneratedJavaTokenTypes . HEX _ DOUBLE _ LITERAL ) ; <nl> + Assert . assertEquals ( message , 196 , GeneratedJavaTokenTypes . SIGNED _ INTEGER ) ; <nl> + Assert . assertEquals ( message , 197 , GeneratedJavaTokenTypes . BINARY _ EXPONENT ) ; <nl> + / / Read JavaDoc before changing <nl> + Assert . assertEquals ( " all tokens must be added to list in " <nl> + + " ' GeneratedJavaTokenTypesTest ' and verified " <nl> + + " that their old numbering didn ' t change " , 196 , <nl> + GeneratedJavaTokenTypes . class . getDeclaredFields ( ) . length ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / ConfigSerializationTest . java b / src / tests / com / puppycrawl / tools / checkstyle / ConfigSerializationTest . java <nl> new file mode 100644 <nl> index 0000000 . . 7738e5d <nl> - - - / dev / null <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / ConfigSerializationTest . java <nl> @ @ - 0 , 0 + 1 , 90 @ @ <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import java . io . ByteArrayInputStream ; <nl> + import java . io . ByteArrayOutputStream ; <nl> + import java . io . ObjectInputStream ; <nl> + import java . io . ObjectOutputStream ; <nl> + import java . io . IOException ; <nl> + import java . lang . reflect . Method ; <nl> + import junit . framework . TestCase ; <nl> + import org . apache . regexp . RE ; <nl> + <nl> + public class ConfigSerializationTest <nl> + extends TestCase <nl> + { <nl> + public ConfigSerializationTest ( String name ) <nl> + { <nl> + super ( name ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Copy mConfig using in - memory serialization <nl> + * @ param aConfig the original <nl> + * @ return a copy of aConfig obtained by in - memory serialization <nl> + * / <nl> + private Configuration copyBySerialization ( Configuration aConfig ) <nl> + throws IOException , ClassNotFoundException <nl> + { <nl> + ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; <nl> + ObjectOutputStream oos = new ObjectOutputStream ( baos ) ; <nl> + oos . writeObject ( aConfig ) ; <nl> + oos . flush ( ) ; <nl> + oos . close ( ) ; <nl> + <nl> + ByteArrayInputStream bais = new ByteArrayInputStream ( baos . toByteArray ( ) ) ; <nl> + ObjectInputStream ois = new ObjectInputStream ( bais ) ; <nl> + Configuration configCopy = ( Configuration ) ois . readObject ( ) ; <nl> + ois . close ( ) ; <nl> + return configCopy ; <nl> + } <nl> + <nl> + / * * <nl> + * Test that the RE deserialization mechanism works for one example . <nl> + * / <nl> + public void testRegexpDesrialization ( ) <nl> + throws Exception <nl> + { <nl> + Configuration configOrig = new Configuration ( ) ; <nl> + configOrig . setTypePat ( " xyz " ) ; <nl> + <nl> + Configuration configCopy = copyBySerialization ( configOrig ) ; <nl> + assertNotNull ( configCopy ) ; <nl> + <nl> + / / test that the general deserialization mechanism for RE fields works <nl> + RE typeRegexp = configCopy . getTypeRegexp ( ) ; <nl> + assertTrue ( typeRegexp . match ( " xyz " ) ) ; <nl> + assertTrue ( ! typeRegexp . match ( " DefaultCompatibleTypeFormat " ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Tests that all RE fields are restored during deserialization . <nl> + * This test is designed to prevent addition of transient RE <nl> + * fields to Configuration without modification of <nl> + * Configuration . readObject ( ) . <nl> + * / <nl> + public void testAllRegexpsNotNull ( ) <nl> + throws Exception <nl> + { <nl> + Configuration configOrig = new Configuration ( ) ; <nl> + Configuration configCopy = copyBySerialization ( configOrig ) ; <nl> + assertNotNull ( configCopy ) ; <nl> + <nl> + / / ensure that none of the getSomeRE ( ) methods ( even the ones <nl> + / / we don ' t know yet ) of the configCopy returns null <nl> + <nl> + Method [ ] configMethods = Configuration . class . getMethods ( ) ; <nl> + for ( int i = 0 ; i < configMethods . length ; i + + ) <nl> + { <nl> + Method method = configMethods [ i ] ; <nl> + String methodName = method . getName ( ) ; <nl> + if ( methodName . startsWith ( " get " ) & & <nl> + method . getReturnType ( ) . equals ( RE . class ) & & <nl> + method . getParameterTypes ( ) . length = = 0 ) <nl> + { <nl> + Object [ ] noArgs = { } ; <nl> + Object obj = method . invoke ( configCopy , noArgs ) ; <nl> + assertNotNull ( methodName + " ( ) returned null " , obj ) ; <nl> + } <nl> + } <nl> + } <nl> + }

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 70ab69b . . 8b123ae 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 104 , 6 + 104 , 9 @ @ 
 < suppress checks = " MethodLength " files = " src [ \ \ / ] test [ \ \ / ] java [ \ \ / ] com [ \ \ / ] puppycrawl [ \ \ / ] tools [ \ \ / ] checkstyle [ \ \ / ] grammars [ \ \ / ] comments [ \ \ / ] CommentsTest \ . java " / > 
 < suppress checks = " ExecutableStatementCount " files = " src [ \ \ / ] test [ \ \ / ] java [ \ \ / ] com [ \ \ / ] puppycrawl [ \ \ / ] tools [ \ \ / ] checkstyle [ \ \ / ] grammars [ \ \ / ] comments [ \ \ / ] CommentsTest \ . java " / > 
 < suppress checks = " JavaNCSS " files = " src [ \ \ / ] test [ \ \ / ] java [ \ \ / ] com [ \ \ / ] puppycrawl [ \ \ / ] tools [ \ \ / ] checkstyle [ \ \ / ] grammars [ \ \ / ] comments [ \ \ / ] CommentsTest \ . java " / > 
 + < suppress checks = " MethodLength " files = " . * GeneratedJavaTokenTypesTest \ . java " / > 
 + < suppress checks = " ExecutableStatementCount " files = " . * GeneratedJavaTokenTypesTest \ . java " / > 
 + < suppress checks = " JavaNCSS " files = " . * GeneratedJavaTokenTypesTest \ . java " / > 
 
 < suppress checks = " . " files = " . * JavadocTokenTypes \ . java " / > 
 < suppress checks = " . " files = " . * ParseTreeBuilder \ . java " / > 
 @ @ - 133 , 7 + 136 , 7 @ @ 
 
 < ! - - Should be fixed after moving https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / blob / master / sevntu - checks / src / main / java / com / github / sevntu / checkstyle / checks / coding / ReturnCountExtendedCheck . java into the main repo - - > 
 < suppress checks = " ReturnCount " files = " ( ClassResolver | ConfigurationLoader | IndentationCheckTest ) \ . java " / > 
 - 
 + 
 < ! - - Just big switches . Cannot be split to several methods . Till https : / / github . com / checkstyle / checkstyle / issues / 2029 - - > 
 < suppress checks = " CyclomaticComplexity " files = " ( AbstractDeclarationCollector | RequireThisCheck | SuppressWarningsHolder | LeftCurlyCheck | FallThroughCheck | FinalLocalVariableCheck | ModifiedControlVariableCheck ) \ . java " / > 
 < suppress checks = " CyclomaticComplexity " files = " ( ParameterAssignmentCheck | VariableDeclarationUsageDistanceCheck | BooleanExpressionComplexityCheck | NPathComplexityCheck | CheckUtils ) \ . java " / > 
 @ @ - 145 , 7 + 148 , 7 @ @ 
 < suppress checks = " CyclomaticComplexity " files = " JavadocMethodCheck \ . java " / > 
 < suppress checks = " CyclomaticComplexity " files = " JavadocStyleCheck \ . java " / > 
 < suppress checks = " CyclomaticComplexity " files = " CustomImportOrderCheck \ . java " / > 
 - 
 + 
 < ! - - equals ( ) - a lot of fields to check - - > 
 < suppress checks = " CyclomaticComplexity " files = " LocalizedMessage \ . java " lines = " 210 " / > 
 < ! - - SWITCH was transformed into IF - ELSE - - > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJavaTokenTypesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJavaTokenTypesTest . java 
 new file mode 100644 
 index 0000000 . . 0960290 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJavaTokenTypesTest . java 
 @ @ - 0 , 0 + 1 , 252 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2016 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . grammars ; 
 + 
 + import org . junit . Assert ; 
 + import org . junit . Test ; 
 + 
 + public class GeneratedJavaTokenTypesTest { 
 + / * * 
 + * < p > 
 + * New tokens must be added onto the end of the list with new numbers , and 
 + * old tokens must remain and keep their current numbering . Old token 
 + * numberings are not allowed to change . 
 + * < / p > 
 + * < p > 
 + * The reason behind this is Java inlines static final field values directly 
 + * into the compiled Java code . This loses all connections with the original 
 + * class , GeneratedJavaTokenTypes , and so numbering updates are not picked 
 + * up in user - created checks and causes conflicts . 
 + * < / p > 
 + * 
 + * Issue : https : / / github . com / checkstyle / checkstyle / issues / 505 
 + * / 
 + @ Test 
 + public void testTokenNumbering ( ) { 
 + final String message = " A token ' s number has changed . Please open " 
 + + " ' GeneratedJavaTokenTypesTest ' and confirm which token is at fault . \ n " 
 + + " Token numbers must not change or else they will create a conflict " 
 + + " with users . \ n \ n " 
 + + " See Issue : https : / / github . com / checkstyle / checkstyle / issues / 505 " ; 
 + 
 + / / Read JavaDoc before changing 
 + Assert . assertEquals ( message , 1 , GeneratedJavaTokenTypes . EOF ) ; 
 + Assert . assertEquals ( message , 3 , GeneratedJavaTokenTypes . NULL _ TREE _ LOOKAHEAD ) ; 
 + Assert . assertEquals ( message , 4 , GeneratedJavaTokenTypes . BLOCK ) ; 
 + Assert . assertEquals ( message , 5 , GeneratedJavaTokenTypes . MODIFIERS ) ; 
 + Assert . assertEquals ( message , 6 , GeneratedJavaTokenTypes . OBJBLOCK ) ; 
 + Assert . assertEquals ( message , 7 , GeneratedJavaTokenTypes . SLIST ) ; 
 + Assert . assertEquals ( message , 8 , GeneratedJavaTokenTypes . CTOR _ DEF ) ; 
 + Assert . assertEquals ( message , 9 , GeneratedJavaTokenTypes . METHOD _ DEF ) ; 
 + Assert . assertEquals ( message , 10 , GeneratedJavaTokenTypes . VARIABLE _ DEF ) ; 
 + Assert . assertEquals ( message , 11 , GeneratedJavaTokenTypes . INSTANCE _ INIT ) ; 
 + Assert . assertEquals ( message , 12 , GeneratedJavaTokenTypes . STATIC _ INIT ) ; 
 + Assert . assertEquals ( message , 13 , GeneratedJavaTokenTypes . TYPE ) ; 
 + Assert . assertEquals ( message , 14 , GeneratedJavaTokenTypes . CLASS _ DEF ) ; 
 + Assert . assertEquals ( message , 15 , GeneratedJavaTokenTypes . INTERFACE _ DEF ) ; 
 + Assert . assertEquals ( message , 16 , GeneratedJavaTokenTypes . PACKAGE _ DEF ) ; 
 + Assert . assertEquals ( message , 17 , GeneratedJavaTokenTypes . ARRAY _ DECLARATOR ) ; 
 + Assert . assertEquals ( message , 18 , GeneratedJavaTokenTypes . EXTENDS _ CLAUSE ) ; 
 + Assert . assertEquals ( message , 19 , GeneratedJavaTokenTypes . IMPLEMENTS _ CLAUSE ) ; 
 + Assert . assertEquals ( message , 20 , GeneratedJavaTokenTypes . PARAMETERS ) ; 
 + Assert . assertEquals ( message , 21 , GeneratedJavaTokenTypes . PARAMETER _ DEF ) ; 
 + Assert . assertEquals ( message , 22 , GeneratedJavaTokenTypes . LABELED _ STAT ) ; 
 + Assert . assertEquals ( message , 23 , GeneratedJavaTokenTypes . TYPECAST ) ; 
 + Assert . assertEquals ( message , 24 , GeneratedJavaTokenTypes . INDEX _ OP ) ; 
 + Assert . assertEquals ( message , 25 , GeneratedJavaTokenTypes . POST _ INC ) ; 
 + Assert . assertEquals ( message , 26 , GeneratedJavaTokenTypes . POST _ DEC ) ; 
 + Assert . assertEquals ( message , 27 , GeneratedJavaTokenTypes . METHOD _ CALL ) ; 
 + Assert . assertEquals ( message , 28 , GeneratedJavaTokenTypes . EXPR ) ; 
 + Assert . assertEquals ( message , 29 , GeneratedJavaTokenTypes . ARRAY _ INIT ) ; 
 + Assert . assertEquals ( message , 30 , GeneratedJavaTokenTypes . IMPORT ) ; 
 + Assert . assertEquals ( message , 31 , GeneratedJavaTokenTypes . UNARY _ MINUS ) ; 
 + Assert . assertEquals ( message , 32 , GeneratedJavaTokenTypes . UNARY _ PLUS ) ; 
 + Assert . assertEquals ( message , 33 , GeneratedJavaTokenTypes . CASE _ GROUP ) ; 
 + Assert . assertEquals ( message , 34 , GeneratedJavaTokenTypes . ELIST ) ; 
 + Assert . assertEquals ( message , 35 , GeneratedJavaTokenTypes . FOR _ INIT ) ; 
 + Assert . assertEquals ( message , 36 , GeneratedJavaTokenTypes . FOR _ CONDITION ) ; 
 + Assert . assertEquals ( message , 37 , GeneratedJavaTokenTypes . FOR _ ITERATOR ) ; 
 + Assert . assertEquals ( message , 38 , GeneratedJavaTokenTypes . EMPTY _ STAT ) ; 
 + Assert . assertEquals ( message , 39 , GeneratedJavaTokenTypes . FINAL ) ; 
 + Assert . assertEquals ( message , 40 , GeneratedJavaTokenTypes . ABSTRACT ) ; 
 + Assert . assertEquals ( message , 41 , GeneratedJavaTokenTypes . STRICTFP ) ; 
 + Assert . assertEquals ( message , 42 , GeneratedJavaTokenTypes . SUPER _ CTOR _ CALL ) ; 
 + Assert . assertEquals ( message , 43 , GeneratedJavaTokenTypes . CTOR _ CALL ) ; 
 + Assert . assertEquals ( message , 44 , GeneratedJavaTokenTypes . LITERAL _ package ) ; 
 + Assert . assertEquals ( message , 45 , GeneratedJavaTokenTypes . SEMI ) ; 
 + Assert . assertEquals ( message , 46 , GeneratedJavaTokenTypes . LITERAL _ import ) ; 
 + Assert . assertEquals ( message , 47 , GeneratedJavaTokenTypes . LBRACK ) ; 
 + Assert . assertEquals ( message , 48 , GeneratedJavaTokenTypes . RBRACK ) ; 
 + Assert . assertEquals ( message , 49 , GeneratedJavaTokenTypes . LITERAL _ void ) ; 
 + Assert . assertEquals ( message , 50 , GeneratedJavaTokenTypes . LITERAL _ boolean ) ; 
 + Assert . assertEquals ( message , 51 , GeneratedJavaTokenTypes . LITERAL _ byte ) ; 
 + Assert . assertEquals ( message , 52 , GeneratedJavaTokenTypes . LITERAL _ char ) ; 
 + Assert . assertEquals ( message , 53 , GeneratedJavaTokenTypes . LITERAL _ short ) ; 
 + Assert . assertEquals ( message , 54 , GeneratedJavaTokenTypes . LITERAL _ int ) ; 
 + Assert . assertEquals ( message , 55 , GeneratedJavaTokenTypes . LITERAL _ float ) ; 
 + Assert . assertEquals ( message , 56 , GeneratedJavaTokenTypes . LITERAL _ long ) ; 
 + Assert . assertEquals ( message , 57 , GeneratedJavaTokenTypes . LITERAL _ double ) ; 
 + Assert . assertEquals ( message , 58 , GeneratedJavaTokenTypes . IDENT ) ; 
 + Assert . assertEquals ( message , 59 , GeneratedJavaTokenTypes . DOT ) ; 
 + Assert . assertEquals ( message , 60 , GeneratedJavaTokenTypes . STAR ) ; 
 + Assert . assertEquals ( message , 61 , GeneratedJavaTokenTypes . LITERAL _ private ) ; 
 + Assert . assertEquals ( message , 62 , GeneratedJavaTokenTypes . LITERAL _ public ) ; 
 + Assert . assertEquals ( message , 63 , GeneratedJavaTokenTypes . LITERAL _ protected ) ; 
 + Assert . assertEquals ( message , 64 , GeneratedJavaTokenTypes . LITERAL _ static ) ; 
 + Assert . assertEquals ( message , 65 , GeneratedJavaTokenTypes . LITERAL _ transient ) ; 
 + Assert . assertEquals ( message , 66 , GeneratedJavaTokenTypes . LITERAL _ native ) ; 
 + Assert . assertEquals ( message , 67 , GeneratedJavaTokenTypes . LITERAL _ synchronized ) ; 
 + Assert . assertEquals ( message , 68 , GeneratedJavaTokenTypes . LITERAL _ volatile ) ; 
 + Assert . assertEquals ( message , 69 , GeneratedJavaTokenTypes . LITERAL _ class ) ; 
 + Assert . assertEquals ( message , 70 , GeneratedJavaTokenTypes . LITERAL _ extends ) ; 
 + Assert . assertEquals ( message , 71 , GeneratedJavaTokenTypes . LITERAL _ interface ) ; 
 + Assert . assertEquals ( message , 72 , GeneratedJavaTokenTypes . LCURLY ) ; 
 + Assert . assertEquals ( message , 73 , GeneratedJavaTokenTypes . RCURLY ) ; 
 + Assert . assertEquals ( message , 74 , GeneratedJavaTokenTypes . COMMA ) ; 
 + Assert . assertEquals ( message , 75 , GeneratedJavaTokenTypes . LITERAL _ implements ) ; 
 + Assert . assertEquals ( message , 76 , GeneratedJavaTokenTypes . LPAREN ) ; 
 + Assert . assertEquals ( message , 77 , GeneratedJavaTokenTypes . RPAREN ) ; 
 + Assert . assertEquals ( message , 78 , GeneratedJavaTokenTypes . LITERAL _ this ) ; 
 + Assert . assertEquals ( message , 79 , GeneratedJavaTokenTypes . LITERAL _ super ) ; 
 + Assert . assertEquals ( message , 80 , GeneratedJavaTokenTypes . ASSIGN ) ; 
 + Assert . assertEquals ( message , 81 , GeneratedJavaTokenTypes . LITERAL _ throws ) ; 
 + Assert . assertEquals ( message , 82 , GeneratedJavaTokenTypes . COLON ) ; 
 + Assert . assertEquals ( message , 83 , GeneratedJavaTokenTypes . LITERAL _ if ) ; 
 + Assert . assertEquals ( message , 84 , GeneratedJavaTokenTypes . LITERAL _ while ) ; 
 + Assert . assertEquals ( message , 85 , GeneratedJavaTokenTypes . LITERAL _ do ) ; 
 + Assert . assertEquals ( message , 86 , GeneratedJavaTokenTypes . LITERAL _ break ) ; 
 + Assert . assertEquals ( message , 87 , GeneratedJavaTokenTypes . LITERAL _ continue ) ; 
 + Assert . assertEquals ( message , 88 , GeneratedJavaTokenTypes . LITERAL _ return ) ; 
 + Assert . assertEquals ( message , 89 , GeneratedJavaTokenTypes . LITERAL _ switch ) ; 
 + Assert . assertEquals ( message , 90 , GeneratedJavaTokenTypes . LITERAL _ throw ) ; 
 + Assert . assertEquals ( message , 91 , GeneratedJavaTokenTypes . LITERAL _ for ) ; 
 + Assert . assertEquals ( message , 92 , GeneratedJavaTokenTypes . LITERAL _ else ) ; 
 + Assert . assertEquals ( message , 93 , GeneratedJavaTokenTypes . LITERAL _ case ) ; 
 + Assert . assertEquals ( message , 94 , GeneratedJavaTokenTypes . LITERAL _ default ) ; 
 + Assert . assertEquals ( message , 95 , GeneratedJavaTokenTypes . LITERAL _ try ) ; 
 + Assert . assertEquals ( message , 96 , GeneratedJavaTokenTypes . LITERAL _ catch ) ; 
 + Assert . assertEquals ( message , 97 , GeneratedJavaTokenTypes . LITERAL _ finally ) ; 
 + Assert . assertEquals ( message , 98 , GeneratedJavaTokenTypes . PLUS _ ASSIGN ) ; 
 + Assert . assertEquals ( message , 99 , GeneratedJavaTokenTypes . MINUS _ ASSIGN ) ; 
 + Assert . assertEquals ( message , 100 , GeneratedJavaTokenTypes . STAR _ ASSIGN ) ; 
 + Assert . assertEquals ( message , 101 , GeneratedJavaTokenTypes . DIV _ ASSIGN ) ; 
 + Assert . assertEquals ( message , 102 , GeneratedJavaTokenTypes . MOD _ ASSIGN ) ; 
 + Assert . assertEquals ( message , 103 , GeneratedJavaTokenTypes . SR _ ASSIGN ) ; 
 + Assert . assertEquals ( message , 104 , GeneratedJavaTokenTypes . BSR _ ASSIGN ) ; 
 + Assert . assertEquals ( message , 105 , GeneratedJavaTokenTypes . SL _ ASSIGN ) ; 
 + Assert . assertEquals ( message , 106 , GeneratedJavaTokenTypes . BAND _ ASSIGN ) ; 
 + Assert . assertEquals ( message , 107 , GeneratedJavaTokenTypes . BXOR _ ASSIGN ) ; 
 + Assert . assertEquals ( message , 108 , GeneratedJavaTokenTypes . BOR _ ASSIGN ) ; 
 + Assert . assertEquals ( message , 109 , GeneratedJavaTokenTypes . QUESTION ) ; 
 + Assert . assertEquals ( message , 110 , GeneratedJavaTokenTypes . LOR ) ; 
 + Assert . assertEquals ( message , 111 , GeneratedJavaTokenTypes . LAND ) ; 
 + Assert . assertEquals ( message , 112 , GeneratedJavaTokenTypes . BOR ) ; 
 + Assert . assertEquals ( message , 113 , GeneratedJavaTokenTypes . BXOR ) ; 
 + Assert . assertEquals ( message , 114 , GeneratedJavaTokenTypes . BAND ) ; 
 + Assert . assertEquals ( message , 115 , GeneratedJavaTokenTypes . NOT _ EQUAL ) ; 
 + Assert . assertEquals ( message , 116 , GeneratedJavaTokenTypes . EQUAL ) ; 
 + Assert . assertEquals ( message , 117 , GeneratedJavaTokenTypes . LT ) ; 
 + Assert . assertEquals ( message , 118 , GeneratedJavaTokenTypes . GT ) ; 
 + Assert . assertEquals ( message , 119 , GeneratedJavaTokenTypes . LE ) ; 
 + Assert . assertEquals ( message , 120 , GeneratedJavaTokenTypes . GE ) ; 
 + Assert . assertEquals ( message , 121 , GeneratedJavaTokenTypes . LITERAL _ instanceof ) ; 
 + Assert . assertEquals ( message , 122 , GeneratedJavaTokenTypes . SL ) ; 
 + Assert . assertEquals ( message , 123 , GeneratedJavaTokenTypes . SR ) ; 
 + Assert . assertEquals ( message , 124 , GeneratedJavaTokenTypes . BSR ) ; 
 + Assert . assertEquals ( message , 125 , GeneratedJavaTokenTypes . PLUS ) ; 
 + Assert . assertEquals ( message , 126 , GeneratedJavaTokenTypes . MINUS ) ; 
 + Assert . assertEquals ( message , 127 , GeneratedJavaTokenTypes . DIV ) ; 
 + Assert . assertEquals ( message , 128 , GeneratedJavaTokenTypes . MOD ) ; 
 + Assert . assertEquals ( message , 129 , GeneratedJavaTokenTypes . INC ) ; 
 + Assert . assertEquals ( message , 130 , GeneratedJavaTokenTypes . DEC ) ; 
 + Assert . assertEquals ( message , 131 , GeneratedJavaTokenTypes . BNOT ) ; 
 + Assert . assertEquals ( message , 132 , GeneratedJavaTokenTypes . LNOT ) ; 
 + Assert . assertEquals ( message , 133 , GeneratedJavaTokenTypes . LITERAL _ true ) ; 
 + Assert . assertEquals ( message , 134 , GeneratedJavaTokenTypes . LITERAL _ false ) ; 
 + Assert . assertEquals ( message , 135 , GeneratedJavaTokenTypes . LITERAL _ null ) ; 
 + Assert . assertEquals ( message , 136 , GeneratedJavaTokenTypes . LITERAL _ new ) ; 
 + Assert . assertEquals ( message , 137 , GeneratedJavaTokenTypes . NUM _ INT ) ; 
 + Assert . assertEquals ( message , 138 , GeneratedJavaTokenTypes . CHAR _ LITERAL ) ; 
 + Assert . assertEquals ( message , 139 , GeneratedJavaTokenTypes . STRING _ LITERAL ) ; 
 + Assert . assertEquals ( message , 140 , GeneratedJavaTokenTypes . NUM _ FLOAT ) ; 
 + Assert . assertEquals ( message , 141 , GeneratedJavaTokenTypes . NUM _ LONG ) ; 
 + Assert . assertEquals ( message , 142 , GeneratedJavaTokenTypes . NUM _ DOUBLE ) ; 
 + Assert . assertEquals ( message , 143 , GeneratedJavaTokenTypes . WS ) ; 
 + Assert . assertEquals ( message , 144 , GeneratedJavaTokenTypes . SINGLE _ LINE _ COMMENT ) ; 
 + Assert . assertEquals ( message , 145 , GeneratedJavaTokenTypes . BLOCK _ COMMENT _ BEGIN ) ; 
 + Assert . assertEquals ( message , 146 , GeneratedJavaTokenTypes . ESC ) ; 
 + Assert . assertEquals ( message , 147 , GeneratedJavaTokenTypes . HEX _ DIGIT ) ; 
 + Assert . assertEquals ( message , 148 , GeneratedJavaTokenTypes . VOCAB ) ; 
 + Assert . assertEquals ( message , 149 , GeneratedJavaTokenTypes . EXPONENT ) ; 
 + Assert . assertEquals ( message , 150 , GeneratedJavaTokenTypes . FLOAT _ SUFFIX ) ; 
 + Assert . assertEquals ( message , 151 , GeneratedJavaTokenTypes . ASSERT ) ; 
 + Assert . assertEquals ( message , 152 , GeneratedJavaTokenTypes . STATIC _ IMPORT ) ; 
 + Assert . assertEquals ( message , 153 , GeneratedJavaTokenTypes . ENUM ) ; 
 + Assert . assertEquals ( message , 154 , GeneratedJavaTokenTypes . ENUM _ DEF ) ; 
 + Assert . assertEquals ( message , 155 , GeneratedJavaTokenTypes . ENUM _ CONSTANT _ DEF ) ; 
 + Assert . assertEquals ( message , 156 , GeneratedJavaTokenTypes . FOR _ EACH _ CLAUSE ) ; 
 + Assert . assertEquals ( message , 157 , GeneratedJavaTokenTypes . ANNOTATION _ DEF ) ; 
 + Assert . assertEquals ( message , 158 , GeneratedJavaTokenTypes . ANNOTATIONS ) ; 
 + Assert . assertEquals ( message , 159 , GeneratedJavaTokenTypes . ANNOTATION ) ; 
 + Assert . assertEquals ( message , 160 , GeneratedJavaTokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 + Assert . assertEquals ( message , 161 , GeneratedJavaTokenTypes . ANNOTATION _ FIELD _ DEF ) ; 
 + Assert . assertEquals ( message , 162 , GeneratedJavaTokenTypes . ANNOTATION _ ARRAY _ INIT ) ; 
 + Assert . assertEquals ( message , 163 , GeneratedJavaTokenTypes . TYPE _ ARGUMENTS ) ; 
 + Assert . assertEquals ( message , 164 , GeneratedJavaTokenTypes . TYPE _ ARGUMENT ) ; 
 + Assert . assertEquals ( message , 165 , GeneratedJavaTokenTypes . TYPE _ PARAMETERS ) ; 
 + Assert . assertEquals ( message , 166 , GeneratedJavaTokenTypes . TYPE _ PARAMETER ) ; 
 + Assert . assertEquals ( message , 167 , GeneratedJavaTokenTypes . WILDCARD _ TYPE ) ; 
 + Assert . assertEquals ( message , 168 , GeneratedJavaTokenTypes . TYPE _ UPPER _ BOUNDS ) ; 
 + Assert . assertEquals ( message , 169 , GeneratedJavaTokenTypes . TYPE _ LOWER _ BOUNDS ) ; 
 + Assert . assertEquals ( message , 170 , GeneratedJavaTokenTypes . AT ) ; 
 + Assert . assertEquals ( message , 171 , GeneratedJavaTokenTypes . ELLIPSIS ) ; 
 + Assert . assertEquals ( message , 172 , GeneratedJavaTokenTypes . GENERIC _ START ) ; 
 + Assert . assertEquals ( message , 173 , GeneratedJavaTokenTypes . GENERIC _ END ) ; 
 + Assert . assertEquals ( message , 174 , GeneratedJavaTokenTypes . TYPE _ EXTENSION _ AND ) ; 
 + Assert . assertEquals ( message , 175 , GeneratedJavaTokenTypes . DO _ WHILE ) ; 
 + Assert . assertEquals ( message , 176 , GeneratedJavaTokenTypes . RESOURCE _ SPECIFICATION ) ; 
 + Assert . assertEquals ( message , 177 , GeneratedJavaTokenTypes . RESOURCES ) ; 
 + Assert . assertEquals ( message , 178 , GeneratedJavaTokenTypes . RESOURCE ) ; 
 + Assert . assertEquals ( message , 179 , GeneratedJavaTokenTypes . DOUBLE _ COLON ) ; 
 + Assert . assertEquals ( message , 180 , GeneratedJavaTokenTypes . METHOD _ REF ) ; 
 + Assert . assertEquals ( message , 181 , GeneratedJavaTokenTypes . LAMBDA ) ; 
 + Assert . assertEquals ( message , 182 , GeneratedJavaTokenTypes . BLOCK _ COMMENT _ END ) ; 
 + Assert . assertEquals ( message , 183 , GeneratedJavaTokenTypes . COMMENT _ CONTENT ) ; 
 + Assert . assertEquals ( message , 184 , GeneratedJavaTokenTypes . SINGLE _ LINE _ COMMENT _ CONTENT ) ; 
 + Assert . assertEquals ( message , 185 , GeneratedJavaTokenTypes . BLOCK _ COMMENT _ CONTENT ) ; 
 + Assert . assertEquals ( message , 186 , GeneratedJavaTokenTypes . STD _ ESC ) ; 
 + Assert . assertEquals ( message , 187 , GeneratedJavaTokenTypes . BINARY _ DIGIT ) ; 
 + Assert . assertEquals ( message , 188 , GeneratedJavaTokenTypes . ID _ START ) ; 
 + Assert . assertEquals ( message , 189 , GeneratedJavaTokenTypes . ID _ PART ) ; 
 + Assert . assertEquals ( message , 190 , GeneratedJavaTokenTypes . INT _ LITERAL ) ; 
 + Assert . assertEquals ( message , 191 , GeneratedJavaTokenTypes . LONG _ LITERAL ) ; 
 + Assert . assertEquals ( message , 192 , GeneratedJavaTokenTypes . FLOAT _ LITERAL ) ; 
 + Assert . assertEquals ( message , 193 , GeneratedJavaTokenTypes . DOUBLE _ LITERAL ) ; 
 + Assert . assertEquals ( message , 194 , GeneratedJavaTokenTypes . HEX _ FLOAT _ LITERAL ) ; 
 + Assert . assertEquals ( message , 195 , GeneratedJavaTokenTypes . HEX _ DOUBLE _ LITERAL ) ; 
 + Assert . assertEquals ( message , 196 , GeneratedJavaTokenTypes . SIGNED _ INTEGER ) ; 
 + Assert . assertEquals ( message , 197 , GeneratedJavaTokenTypes . BINARY _ EXPONENT ) ; 
 + / / Read JavaDoc before changing 
 + Assert . assertEquals ( " all tokens must be added to list in " 
 + + " ' GeneratedJavaTokenTypesTest ' and verified " 
 + + " that their old numbering didn ' t change " , 196 , 
 + GeneratedJavaTokenTypes . class . getDeclaredFields ( ) . length ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / ConfigSerializationTest . java b / src / tests / com / puppycrawl / tools / checkstyle / ConfigSerializationTest . java 
 new file mode 100644 
 index 0000000 . . 7738e5d 
 - - - / dev / null 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / ConfigSerializationTest . java 
 @ @ - 0 , 0 + 1 , 90 @ @ 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import java . io . ByteArrayInputStream ; 
 + import java . io . ByteArrayOutputStream ; 
 + import java . io . ObjectInputStream ; 
 + import java . io . ObjectOutputStream ; 
 + import java . io . IOException ; 
 + import java . lang . reflect . Method ; 
 + import junit . framework . TestCase ; 
 + import org . apache . regexp . RE ; 
 + 
 + public class ConfigSerializationTest 
 + extends TestCase 
 + { 
 + public ConfigSerializationTest ( String name ) 
 + { 
 + super ( name ) ; 
 + } 
 + 
 + / * * 
 + * Copy mConfig using in - memory serialization 
 + * @ param aConfig the original 
 + * @ return a copy of aConfig obtained by in - memory serialization 
 + * / 
 + private Configuration copyBySerialization ( Configuration aConfig ) 
 + throws IOException , ClassNotFoundException 
 + { 
 + ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; 
 + ObjectOutputStream oos = new ObjectOutputStream ( baos ) ; 
 + oos . writeObject ( aConfig ) ; 
 + oos . flush ( ) ; 
 + oos . close ( ) ; 
 + 
 + ByteArrayInputStream bais = new ByteArrayInputStream ( baos . toByteArray ( ) ) ; 
 + ObjectInputStream ois = new ObjectInputStream ( bais ) ; 
 + Configuration configCopy = ( Configuration ) ois . readObject ( ) ; 
 + ois . close ( ) ; 
 + return configCopy ; 
 + } 
 + 
 + / * * 
 + * Test that the RE deserialization mechanism works for one example . 
 + * / 
 + public void testRegexpDesrialization ( ) 
 + throws Exception 
 + { 
 + Configuration configOrig = new Configuration ( ) ; 
 + configOrig . setTypePat ( " xyz " ) ; 
 + 
 + Configuration configCopy = copyBySerialization ( configOrig ) ; 
 + assertNotNull ( configCopy ) ; 
 + 
 + / / test that the general deserialization mechanism for RE fields works 
 + RE typeRegexp = configCopy . getTypeRegexp ( ) ; 
 + assertTrue ( typeRegexp . match ( " xyz " ) ) ; 
 + assertTrue ( ! typeRegexp . match ( " DefaultCompatibleTypeFormat " ) ) ; 
 + } 
 + 
 + / * * 
 + * Tests that all RE fields are restored during deserialization . 
 + * This test is designed to prevent addition of transient RE 
 + * fields to Configuration without modification of 
 + * Configuration . readObject ( ) . 
 + * / 
 + public void testAllRegexpsNotNull ( ) 
 + throws Exception 
 + { 
 + Configuration configOrig = new Configuration ( ) ; 
 + Configuration configCopy = copyBySerialization ( configOrig ) ; 
 + assertNotNull ( configCopy ) ; 
 + 
 + / / ensure that none of the getSomeRE ( ) methods ( even the ones 
 + / / we don ' t know yet ) of the configCopy returns null 
 + 
 + Method [ ] configMethods = Configuration . class . getMethods ( ) ; 
 + for ( int i = 0 ; i < configMethods . length ; i + + ) 
 + { 
 + Method method = configMethods [ i ] ; 
 + String methodName = method . getName ( ) ; 
 + if ( methodName . startsWith ( " get " ) & & 
 + method . getReturnType ( ) . equals ( RE . class ) & & 
 + method . getParameterTypes ( ) . length = = 0 ) 
 + { 
 + Object [ ] noArgs = { } ; 
 + Object obj = method . invoke ( configCopy , noArgs ) ; 
 + assertNotNull ( methodName + " ( ) returned null " , obj ) ; 
 + } 
 + } 
 + } 
 + }
