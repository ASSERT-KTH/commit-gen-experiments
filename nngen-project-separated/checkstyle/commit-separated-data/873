BLEU SCORE: 0.05401123513017143

TEST MSG: Issue # 4144 : Split and Organize Checkstyle inputs by Test for LocalFinalVariable
GENERATED MSG: Issue # 3900 : Modified TypecastParenPadCheckTest . java and moved its test - files to a subdir

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheckTest . java <nl> index 9ba2d16 . . e0ddbfe 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheckTest . java <nl> @ @ - 37 , 7 + 37 , 9 @ @ public class LocalFinalVariableNameCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " naming " + File . separator + filename ) ; <nl> + + " naming " + File . separator <nl> + + " localfinalvariablename " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 58 , 7 + 60 , 7 @ @ public class LocalFinalVariableNameCheckTest <nl> final String [ ] expected = { <nl> " 123 : 19 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " CDE " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputLocalFinalVariableName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 73 , 7 + 75 , 7 @ @ public class LocalFinalVariableNameCheckTest <nl> final String [ ] expected = { <nl> " 122 : 19 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " cde " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputLocalFinalVariableName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 82 , 7 + 84 , 7 @ @ public class LocalFinalVariableNameCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( LocalFinalVariableNameCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputInner . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputLocalFinalVariableNameInnerClass . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / localfinalvariablename / InputLocalFinalVariableName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / localfinalvariablename / InputLocalFinalVariableName . java <nl> new file mode 100644 <nl> index 0000000 . . 100ead7 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / localfinalvariablename / InputLocalFinalVariableName . java <nl> @ @ - 0 , 0 + 1 , 225 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : Feb - 2001 <nl> + / / Ignore error <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . localfinalvariablename ; <nl> + import java . io . * ; <nl> + / * * <nl> + * Contains simple mistakes : <nl> + * - Long lines <nl> + * - Tabs <nl> + * - Format of variables and parameters <nl> + * - Order of modifiers <nl> + * @ author Oliver Burn <nl> + * * / <nl> + final class InputLocalFinalVariableName <nl> + { <nl> + / / Long line - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + / / Contains a tab - > 	 < - <nl> + / / Contains trailing whitespace - > <nl> + <nl> + / / Name format tests <nl> + / / <nl> + / * * Invalid format * * / <nl> + public static final int badConstant = 2 ; <nl> + / * * Valid format * * / <nl> + public static final int MAX _ ROWS = 2 ; <nl> + <nl> + / * * Invalid format * * / <nl> + private static int badStatic = 2 ; <nl> + / * * Valid format * * / <nl> + private static int sNumCreated = 0 ; <nl> + <nl> + / * * Invalid format * * / <nl> + private int badMember = 2 ; <nl> + / * * Valid format * * / <nl> + private int mNumCreated1 = 0 ; <nl> + / * * Valid format * * / <nl> + protected int mNumCreated2 = 0 ; <nl> + <nl> + / * * commas are wrong * * / <nl> + private int [ ] mInts = new int [ ] { 1 , 2 , 3 , <nl> + 4 } ; <nl> + <nl> + / / <nl> + / / Accessor tests <nl> + / / <nl> + / * * should be private * * / <nl> + public static int sTest1 ; <nl> + / * * should be private * * / <nl> + protected static int sTest3 ; <nl> + / * * should be private * * / <nl> + static int sTest2 ; <nl> + <nl> + / * * should be private * * / <nl> + int mTest1 ; <nl> + / * * should be private * * / <nl> + public int mTest2 ; <nl> + <nl> + / / <nl> + / / Parameter name format tests <nl> + / / <nl> + <nl> + / * * <nl> + * @ return hack <nl> + * @ param badFormat1 bad format <nl> + * @ param badFormat2 bad format <nl> + * @ param badFormat3 bad format <nl> + * @ throws java . lang . Exception abc <nl> + * * / <nl> + int test1 ( int badFormat1 , int badFormat2 , <nl> + final int badFormat3 ) <nl> + throws java . lang . Exception <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + / * * method that is 20 lines long * * / <nl> + private void longMethod ( ) <nl> + { <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + } <nl> + <nl> + / * * constructor that is 10 lines long * * / <nl> + private InputLocalFinalVariableName ( ) <nl> + { <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + } <nl> + <nl> + / * * test local variables * / <nl> + private void localVariables ( ) <nl> + { <nl> + / / normal decl <nl> + int abc = 0 ; <nl> + int ABC = 0 ; <nl> + <nl> + / / final decls <nl> + final int cde = 0 ; <nl> + final int CDE = 0 ; <nl> + <nl> + / / decl in for loop init statement <nl> + for ( int k = 0 ; k < 1 ; k + + ) <nl> + { <nl> + String innerBlockVariable = " " ; <nl> + } <nl> + for ( int I = 0 ; I < 1 ; I + + ) <nl> + { <nl> + String InnerBlockVariable = " " ; <nl> + } <nl> + } <nl> + <nl> + / * * test method pattern * / <nl> + void ALL _ UPPERCASE _ METHOD ( ) <nl> + { <nl> + } <nl> + <nl> + / * * test illegal constant * * / <nl> + private static final int BAD _ _ NAME = 3 ; <nl> + <nl> + / / A very , very long line that is OK because it matches the regexp " ^ . * is OK . * regexp . * $ " <nl> + / / long line that has a tab - > 	 < - and would be OK if tab counted as 1 char <nl> + / / tabs that count as one char because of their position - > 	 < - - > 	 < - , OK <nl> + <nl> + / * * some lines to test the error column after tabs * / <nl> + void errorColumnAfterTabs ( ) <nl> + { <nl> + / / with tab - width 8 all statements below start at the same column , <nl> + / / with different combinations of ' ' and ' \ t ' before the statement <nl> + int tab0 = 1 ; <nl> + 	 int tab1 = 1 ; <nl> + 	 int tab2 = 1 ; <nl> + 	 	 int tab3 = 1 ; <nl> + 	 	 int tab4 = 1 ; <nl> + 	 int tab5 = 1 ; <nl> + } <nl> + <nl> + / / FIXME : <nl> + / * FIXME : a <nl> + * FIXME : <nl> + * TODO <nl> + * / <nl> + / * NOTHING * / <nl> + / * YES * / / * FIXME : x * / / * YES ! ! * / <nl> + <nl> + / * * test long comments * * / <nl> + void veryLong ( ) <nl> + { <nl> + / * <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + enough talk * / <nl> + } <nl> + <nl> + / * * <nl> + * @ see to lazy to document all args . Testing excessive # args <nl> + * * / <nl> + void toManyArgs ( int aArg1 , int aArg2 , int aArg3 , int aArg4 , int aArg5 , <nl> + int aArg6 , int aArg7 , int aArg8 , int aArg9 ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + / * * Test class for variable naming in for each clauses . * / <nl> + class InputLocalFinalVariableName2 <nl> + { <nl> + / * * Some more Javadoc . * / <nl> + public void doSomething ( ) <nl> + { <nl> + / / " O " should be named " o " <nl> + for ( Object O : new java . util . ArrayList ( ) ) <nl> + { <nl> + <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * Test enum for member naming check * / <nl> + enum InputLocalFinalVariableNameEnum1 <nl> + { <nl> + / * * ABC constant * / <nl> + ABC , <nl> + <nl> + / * * XYZ constant * / <nl> + XYZ ; <nl> + <nl> + / * * Should be mSomeMemeber * / <nl> + private int someMember ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / localfinalvariablename / InputLocalFinalVariableNameInnerClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / localfinalvariablename / InputLocalFinalVariableNameInnerClass . java <nl> new file mode 100644 <nl> index 0000000 . . ec88497 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / localfinalvariablename / InputLocalFinalVariableNameInnerClass . java <nl> @ @ - 0 , 0 + 1 , 79 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . localfinalvariablename ; <nl> + <nl> + / * * <nl> + * Tests having inner types <nl> + * @ author Oliver Burn <nl> + * * / <nl> + class InputLocalFinalVariableNameInnerClass <nl> + { <nl> + / / Ignore - two errors <nl> + class InnerInner2 <nl> + { <nl> + / / Ignore <nl> + public int fData ; <nl> + } <nl> + <nl> + / / Ignore - 2 errors <nl> + interface InnerInterface2 <nl> + { <nl> + / / Ignore - should be all upper case <nl> + String data = " zxzc " ; <nl> + <nl> + / / Ignore <nl> + class InnerInterfaceInnerClass <nl> + { <nl> + / / Ignore - need Javadoc and made private <nl> + public int rData ; <nl> + <nl> + / * * needs to be made private unless allowProtected . * / <nl> + protected int protectedVariable ; <nl> + <nl> + / * * needs to be made private unless allowPackage . * / <nl> + int packageVariable ; <nl> + } <nl> + } <nl> + <nl> + / * * demonstrate bug in handling static final * * / <nl> + protected static Object sWeird = new Object ( ) ; <nl> + / * * demonstrate bug in handling static final * * / <nl> + static Object sWeird2 = new Object ( ) ; <nl> + <nl> + / * * demonstrate bug in local final variable * / <nl> + public interface Inter <nl> + { <nl> + } <nl> + <nl> + public static void main ( ) <nl> + { <nl> + Inter m = new Inter ( ) <nl> + { <nl> + private static final int CDS = 1 ; <nl> + <nl> + private int ABC ; <nl> + } ; <nl> + } <nl> + <nl> + / * * annotation field incorrectly named . * / <nl> + @ interface InnerAnnotation <nl> + { <nl> + / * * Ignore - should be all upper case . * / <nl> + String data = " zxzc " ; <nl> + } <nl> + <nl> + / * * enum with public member variable * / <nl> + enum InnerEnum <nl> + { <nl> + / * * First constant * / <nl> + A , <nl> + <nl> + / * * Second constant * / <nl> + B ; <nl> + <nl> + / * * Should be private * / <nl> + public int someValue ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm <nl> index 46e2299 . . 2809831 100644 <nl> - - - a / src / xdocs / index . xml . vm <nl> + + + b / src / xdocs / index . xml . vm <nl> @ @ - 168 , 14 + 168 , 14 @ @ <nl> < / td > <nl> < / tr > <nl> < tr > <nl> - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> + < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> < td > David Schneider < / td > <nl> < td > <nl> < a href = " http : / / eclipse - cs . sourceforge . net / " > Eclipse - CS Home Page < / a > <nl> < / td > <nl> < td > <nl> In 2007 was awarded <nl> - < a href = " http : / / www . eclipse . org / org / press - release / 20070306eclipsecommunityawards . php " > <nl> + < a href = " https : / / eclipse . org / org / press - release / 20070306eclipsecommunityawards . php " > <nl> Best Open Source Eclipse - based Developer tool <nl> < / a > . <nl> < / td > <nl> @ @ - 201 , 7 + 201 , 7 @ @ <nl> < td / > <nl> < / tr > <nl> < tr > <nl> - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> + < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> < td > Roman Ivanov < / td > <nl> < td > <nl> < a href = " https : / / github . com / sevntu - checkstyle " > Project Page < / a > <nl> @ @ - 344 , 7 + 344 , 7 @ @ <nl> < td / > <nl> < / tr > <nl> < tr > <nl> - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> + < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> < td > Marco van Meegen < / td > <nl> < td > <nl> < a href = " http : / / www . mvmsoft . de / content / plugins / checkclipse / checkclipse . htm " > Checklipse Home Page < / a >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheckTest . java 
 index 9ba2d16 . . e0ddbfe 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalFinalVariableNameCheckTest . java 
 @ @ - 37 , 7 + 37 , 9 @ @ public class LocalFinalVariableNameCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " naming " + File . separator + filename ) ; 
 + + " naming " + File . separator 
 + + " localfinalvariablename " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 58 , 7 + 60 , 7 @ @ public class LocalFinalVariableNameCheckTest 
 final String [ ] expected = { 
 " 123 : 19 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " CDE " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputLocalFinalVariableName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 73 , 7 + 75 , 7 @ @ public class LocalFinalVariableNameCheckTest 
 final String [ ] expected = { 
 " 122 : 19 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " cde " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputLocalFinalVariableName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 82 , 7 + 84 , 7 @ @ public class LocalFinalVariableNameCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( LocalFinalVariableNameCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputInner . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputLocalFinalVariableNameInnerClass . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / localfinalvariablename / InputLocalFinalVariableName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / localfinalvariablename / InputLocalFinalVariableName . java 
 new file mode 100644 
 index 0000000 . . 100ead7 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / localfinalvariablename / InputLocalFinalVariableName . java 
 @ @ - 0 , 0 + 1 , 225 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : Feb - 2001 
 + / / Ignore error 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . naming . localfinalvariablename ; 
 + import java . io . * ; 
 + / * * 
 + * Contains simple mistakes : 
 + * - Long lines 
 + * - Tabs 
 + * - Format of variables and parameters 
 + * - Order of modifiers 
 + * @ author Oliver Burn 
 + * * / 
 + final class InputLocalFinalVariableName 
 + { 
 + / / Long line - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + / / Contains a tab - > 	 < - 
 + / / Contains trailing whitespace - > 
 + 
 + / / Name format tests 
 + / / 
 + / * * Invalid format * * / 
 + public static final int badConstant = 2 ; 
 + / * * Valid format * * / 
 + public static final int MAX _ ROWS = 2 ; 
 + 
 + / * * Invalid format * * / 
 + private static int badStatic = 2 ; 
 + / * * Valid format * * / 
 + private static int sNumCreated = 0 ; 
 + 
 + / * * Invalid format * * / 
 + private int badMember = 2 ; 
 + / * * Valid format * * / 
 + private int mNumCreated1 = 0 ; 
 + / * * Valid format * * / 
 + protected int mNumCreated2 = 0 ; 
 + 
 + / * * commas are wrong * * / 
 + private int [ ] mInts = new int [ ] { 1 , 2 , 3 , 
 + 4 } ; 
 + 
 + / / 
 + / / Accessor tests 
 + / / 
 + / * * should be private * * / 
 + public static int sTest1 ; 
 + / * * should be private * * / 
 + protected static int sTest3 ; 
 + / * * should be private * * / 
 + static int sTest2 ; 
 + 
 + / * * should be private * * / 
 + int mTest1 ; 
 + / * * should be private * * / 
 + public int mTest2 ; 
 + 
 + / / 
 + / / Parameter name format tests 
 + / / 
 + 
 + / * * 
 + * @ return hack 
 + * @ param badFormat1 bad format 
 + * @ param badFormat2 bad format 
 + * @ param badFormat3 bad format 
 + * @ throws java . lang . Exception abc 
 + * * / 
 + int test1 ( int badFormat1 , int badFormat2 , 
 + final int badFormat3 ) 
 + throws java . lang . Exception 
 + { 
 + return 0 ; 
 + } 
 + 
 + / * * method that is 20 lines long * * / 
 + private void longMethod ( ) 
 + { 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + } 
 + 
 + / * * constructor that is 10 lines long * * / 
 + private InputLocalFinalVariableName ( ) 
 + { 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + } 
 + 
 + / * * test local variables * / 
 + private void localVariables ( ) 
 + { 
 + / / normal decl 
 + int abc = 0 ; 
 + int ABC = 0 ; 
 + 
 + / / final decls 
 + final int cde = 0 ; 
 + final int CDE = 0 ; 
 + 
 + / / decl in for loop init statement 
 + for ( int k = 0 ; k < 1 ; k + + ) 
 + { 
 + String innerBlockVariable = " " ; 
 + } 
 + for ( int I = 0 ; I < 1 ; I + + ) 
 + { 
 + String InnerBlockVariable = " " ; 
 + } 
 + } 
 + 
 + / * * test method pattern * / 
 + void ALL _ UPPERCASE _ METHOD ( ) 
 + { 
 + } 
 + 
 + / * * test illegal constant * * / 
 + private static final int BAD _ _ NAME = 3 ; 
 + 
 + / / A very , very long line that is OK because it matches the regexp " ^ . * is OK . * regexp . * $ " 
 + / / long line that has a tab - > 	 < - and would be OK if tab counted as 1 char 
 + / / tabs that count as one char because of their position - > 	 < - - > 	 < - , OK 
 + 
 + / * * some lines to test the error column after tabs * / 
 + void errorColumnAfterTabs ( ) 
 + { 
 + / / with tab - width 8 all statements below start at the same column , 
 + / / with different combinations of ' ' and ' \ t ' before the statement 
 + int tab0 = 1 ; 
 + 	 int tab1 = 1 ; 
 + 	 int tab2 = 1 ; 
 + 	 	 int tab3 = 1 ; 
 + 	 	 int tab4 = 1 ; 
 + 	 int tab5 = 1 ; 
 + } 
 + 
 + / / FIXME : 
 + / * FIXME : a 
 + * FIXME : 
 + * TODO 
 + * / 
 + / * NOTHING * / 
 + / * YES * / / * FIXME : x * / / * YES ! ! * / 
 + 
 + / * * test long comments * * / 
 + void veryLong ( ) 
 + { 
 + / * 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + enough talk * / 
 + } 
 + 
 + / * * 
 + * @ see to lazy to document all args . Testing excessive # args 
 + * * / 
 + void toManyArgs ( int aArg1 , int aArg2 , int aArg3 , int aArg4 , int aArg5 , 
 + int aArg6 , int aArg7 , int aArg8 , int aArg9 ) 
 + { 
 + } 
 + } 
 + 
 + / * * Test class for variable naming in for each clauses . * / 
 + class InputLocalFinalVariableName2 
 + { 
 + / * * Some more Javadoc . * / 
 + public void doSomething ( ) 
 + { 
 + / / " O " should be named " o " 
 + for ( Object O : new java . util . ArrayList ( ) ) 
 + { 
 + 
 + } 
 + } 
 + } 
 + 
 + / * * Test enum for member naming check * / 
 + enum InputLocalFinalVariableNameEnum1 
 + { 
 + / * * ABC constant * / 
 + ABC , 
 + 
 + / * * XYZ constant * / 
 + XYZ ; 
 + 
 + / * * Should be mSomeMemeber * / 
 + private int someMember ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / localfinalvariablename / InputLocalFinalVariableNameInnerClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / localfinalvariablename / InputLocalFinalVariableNameInnerClass . java 
 new file mode 100644 
 index 0000000 . . ec88497 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / localfinalvariablename / InputLocalFinalVariableNameInnerClass . java 
 @ @ - 0 , 0 + 1 , 79 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . naming . localfinalvariablename ; 
 + 
 + / * * 
 + * Tests having inner types 
 + * @ author Oliver Burn 
 + * * / 
 + class InputLocalFinalVariableNameInnerClass 
 + { 
 + / / Ignore - two errors 
 + class InnerInner2 
 + { 
 + / / Ignore 
 + public int fData ; 
 + } 
 + 
 + / / Ignore - 2 errors 
 + interface InnerInterface2 
 + { 
 + / / Ignore - should be all upper case 
 + String data = " zxzc " ; 
 + 
 + / / Ignore 
 + class InnerInterfaceInnerClass 
 + { 
 + / / Ignore - need Javadoc and made private 
 + public int rData ; 
 + 
 + / * * needs to be made private unless allowProtected . * / 
 + protected int protectedVariable ; 
 + 
 + / * * needs to be made private unless allowPackage . * / 
 + int packageVariable ; 
 + } 
 + } 
 + 
 + / * * demonstrate bug in handling static final * * / 
 + protected static Object sWeird = new Object ( ) ; 
 + / * * demonstrate bug in handling static final * * / 
 + static Object sWeird2 = new Object ( ) ; 
 + 
 + / * * demonstrate bug in local final variable * / 
 + public interface Inter 
 + { 
 + } 
 + 
 + public static void main ( ) 
 + { 
 + Inter m = new Inter ( ) 
 + { 
 + private static final int CDS = 1 ; 
 + 
 + private int ABC ; 
 + } ; 
 + } 
 + 
 + / * * annotation field incorrectly named . * / 
 + @ interface InnerAnnotation 
 + { 
 + / * * Ignore - should be all upper case . * / 
 + String data = " zxzc " ; 
 + } 
 + 
 + / * * enum with public member variable * / 
 + enum InnerEnum 
 + { 
 + / * * First constant * / 
 + A , 
 + 
 + / * * Second constant * / 
 + B ; 
 + 
 + / * * Should be private * / 
 + public int someValue ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm 
 index 46e2299 . . 2809831 100644 
 - - - a / src / xdocs / index . xml . vm 
 + + + b / src / xdocs / index . xml . vm 
 @ @ - 168 , 14 + 168 , 14 @ @ 
 < / td > 
 < / tr > 
 < tr > 
 - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 + < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 < td > David Schneider < / td > 
 < td > 
 < a href = " http : / / eclipse - cs . sourceforge . net / " > Eclipse - CS Home Page < / a > 
 < / td > 
 < td > 
 In 2007 was awarded 
 - < a href = " http : / / www . eclipse . org / org / press - release / 20070306eclipsecommunityawards . php " > 
 + < a href = " https : / / eclipse . org / org / press - release / 20070306eclipsecommunityawards . php " > 
 Best Open Source Eclipse - based Developer tool 
 < / a > . 
 < / td > 
 @ @ - 201 , 7 + 201 , 7 @ @ 
 < td / > 
 < / tr > 
 < tr > 
 - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 + < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 < td > Roman Ivanov < / td > 
 < td > 
 < a href = " https : / / github . com / sevntu - checkstyle " > Project Page < / a > 
 @ @ - 344 , 7 + 344 , 7 @ @ 
 < td / > 
 < / tr > 
 < tr > 
 - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 + < td > < a href = " https : / / eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 < td > Marco van Meegen < / td > 
 < td > 
 < a href = " http : / / www . mvmsoft . de / content / plugins / checkclipse / checkclipse . htm " > Checklipse Home Page < / a >
