BLEU SCORE: 0.1641932816209669

TEST MSG: Issue # 4586 : Moved all resources for NonEmptyAtclauseDescription
GENERATED MSG: Issue # 4586 : Moved InputCorrectJavadocParagraph . java to javadocparagraph subdirectory and Copied InputInCorrectJavadocParagraph . java to subdirectory

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheckTest . java <nl> index 3dc063b . . b589e00 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheckTest . java <nl> @ @ - 36 , 7 + 36 , 8 @ @ public class NonEmptyAtclauseDescriptionCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " javadoc " + File . separator + filename ) ; <nl> + + " javadoc " + File . separator <nl> + + " nonemptyatclausedescription " + File . separator + filename ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputNonEmptyAtclauseDescription . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputNonEmptyAtclauseDescription . java <nl> deleted file mode 100644 <nl> index 91c2eb1 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputNonEmptyAtclauseDescription . java <nl> + + + / dev / null <nl> @ @ - 1 , 99 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . javadoc ; <nl> - class InputNonEmptyAtclauseDescription <nl> - { <nl> - 	 / * * <nl> - 	 * Some javadoc . <nl> - 	 * @ param a Some javadoc . <nl> - 	 * @ param b Some javadoc . <nl> - 	 * / <nl> - 	 public InputNonEmptyAtclauseDescription ( String a , int b ) <nl> - 	 { <nl> - 	 	 <nl> - 	 } <nl> - 	 <nl> - 	 / * * <nl> - 	 * Some javadoc . <nl> - 	 * @ param a Some javadoc . <nl> - 	 * @ deprecated Some javadoc . <nl> - 	 * / <nl> - 	 public InputNonEmptyAtclauseDescription ( String a ) <nl> - 	 { <nl> - 	 	 <nl> - 	 } <nl> - 	 <nl> - 	 / * * <nl> - 	 * Some javadoc . <nl> - 	 * @ param a <nl> - 	 * @ param b <nl> - 	 * @ param c <nl> - 	 * / <nl> - 	 public InputNonEmptyAtclauseDescription ( String a , int b , double c ) <nl> - 	 { <nl> - 	 	 <nl> - 	 } <nl> - 	 <nl> - 	 / * * <nl> - 	 * <nl> - 	 * @ param a <nl> - 	 * @ param e <nl> - 	 * @ deprecated <nl> - 	 * / <nl> - 	 public InputNonEmptyAtclauseDescription ( String a , boolean e ) <nl> - 	 { <nl> - 	 	 <nl> - 	 } <nl> - 	 <nl> - 	 / * * <nl> - 	 * Some javadoc <nl> - 	 * @ param a Some javadoc <nl> - 	 * @ param b Some javadoc <nl> - 	 * @ param c Some javadoc <nl> - 	 * @ return Some javadoc <nl> - 	 * @ throws Exception Some javadoc <nl> - 	 * @ deprecated Some javadoc <nl> - 	 * / <nl> - 	 public int foo1 ( String a , int b , double c ) throws Exception <nl> - 	 { <nl> - 	 	 return 1 ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * <nl> - 	 * @ param a Some javadoc <nl> - 	 * @ param b Some javadoc <nl> - 	 * @ param c Some javadoc <nl> - 	 * @ return Some javadoc <nl> - 	 * @ throws Exception Some javadoc <nl> - 	 * / <nl> - 	 public int foo2 ( String a , int b , double c ) throws Exception <nl> - 	 { <nl> - 	 	 return 1 ; <nl> - 	 } <nl> - 	 <nl> - 	 / * * <nl> - 	 * <nl> - 	 * @ param a <nl> - 	 * @ param b <nl> - 	 * @ param c <nl> - 	 * @ return <nl> - 	 * @ throws Exception <nl> - 	 * @ deprecated <nl> - 	 * / <nl> - 	 public int foo3 ( String a , int b , double c ) throws Exception <nl> - 	 { <nl> - 	 	 return 1 ; <nl> - 	 } <nl> - 	 <nl> - 	 / * * <nl> - 	 * <nl> - 	 * @ param a <nl> - 	 * @ param b <nl> - 	 * @ param c <nl> - 	 * @ return <nl> - 	 * @ throws Exception <nl> - 	 * / <nl> - 	 public int foo4 ( String a , int b , double c ) throws Exception <nl> - 	 { <nl> - 	 	 return 1 ; <nl> - 	 } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / nonemptyatclausedescription / InputNonEmptyAtclauseDescription . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / nonemptyatclausedescription / InputNonEmptyAtclauseDescription . java <nl> new file mode 100644 <nl> index 0000000 . . ee78802 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / nonemptyatclausedescription / InputNonEmptyAtclauseDescription . java <nl> @ @ - 0 , 0 + 1 , 99 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . javadoc . nonemptyatclausedescription ; <nl> + class InputNonEmptyAtclauseDescription <nl> + { <nl> + 	 / * * <nl> + 	 * Some javadoc . <nl> + 	 * @ param a Some javadoc . <nl> + 	 * @ param b Some javadoc . <nl> + 	 * / <nl> + 	 public InputNonEmptyAtclauseDescription ( String a , int b ) <nl> + 	 { <nl> + 	 	 <nl> + 	 } <nl> + 	 <nl> + 	 / * * <nl> + 	 * Some javadoc . <nl> + 	 * @ param a Some javadoc . <nl> + 	 * @ deprecated Some javadoc . <nl> + 	 * / <nl> + 	 public InputNonEmptyAtclauseDescription ( String a ) <nl> + 	 { <nl> + 	 	 <nl> + 	 } <nl> + 	 <nl> + 	 / * * <nl> + 	 * Some javadoc . <nl> + 	 * @ param a <nl> + 	 * @ param b <nl> + 	 * @ param c <nl> + 	 * / <nl> + 	 public InputNonEmptyAtclauseDescription ( String a , int b , double c ) <nl> + 	 { <nl> + 	 	 <nl> + 	 } <nl> + 	 <nl> + 	 / * * <nl> + 	 * <nl> + 	 * @ param a <nl> + 	 * @ param e <nl> + 	 * @ deprecated <nl> + 	 * / <nl> + 	 public InputNonEmptyAtclauseDescription ( String a , boolean e ) <nl> + 	 { <nl> + 	 	 <nl> + 	 } <nl> + 	 <nl> + 	 / * * <nl> + 	 * Some javadoc <nl> + 	 * @ param a Some javadoc <nl> + 	 * @ param b Some javadoc <nl> + 	 * @ param c Some javadoc <nl> + 	 * @ return Some javadoc <nl> + 	 * @ throws Exception Some javadoc <nl> + 	 * @ deprecated Some javadoc <nl> + 	 * / <nl> + 	 public int foo1 ( String a , int b , double c ) throws Exception <nl> + 	 { <nl> + 	 	 return 1 ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * <nl> + 	 * @ param a Some javadoc <nl> + 	 * @ param b Some javadoc <nl> + 	 * @ param c Some javadoc <nl> + 	 * @ return Some javadoc <nl> + 	 * @ throws Exception Some javadoc <nl> + 	 * / <nl> + 	 public int foo2 ( String a , int b , double c ) throws Exception <nl> + 	 { <nl> + 	 	 return 1 ; <nl> + 	 } <nl> + 	 <nl> + 	 / * * <nl> + 	 * <nl> + 	 * @ param a <nl> + 	 * @ param b <nl> + 	 * @ param c <nl> + 	 * @ return <nl> + 	 * @ throws Exception <nl> + 	 * @ deprecated <nl> + 	 * / <nl> + 	 public int foo3 ( String a , int b , double c ) throws Exception <nl> + 	 { <nl> + 	 	 return 1 ; <nl> + 	 } <nl> + 	 <nl> + 	 / * * <nl> + 	 * <nl> + 	 * @ param a <nl> + 	 * @ param b <nl> + 	 * @ param c <nl> + 	 * @ return <nl> + 	 * @ throws Exception <nl> + 	 * / <nl> + 	 public int foo4 ( String a , int b , double c ) throws Exception <nl> + 	 { <nl> + 	 	 return 1 ; <nl> + 	 } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java <nl> index 204dae4 . . 110ee37 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java <nl> @ @ - 63 , 14 + 63 , 6 @ @ public abstract class AbstractCheck extends AbstractViolationReporter { <nl> public abstract int [ ] getDefaultTokens ( ) ; <nl> <nl> / * * <nl> - * Whether comment nodes are required or not . <nl> - * @ return false as a default value . <nl> - * / <nl> - public boolean isCommentNodesRequired ( ) { <nl> - return false ; <nl> - } <nl> - <nl> - / * * <nl> * The configurable token set . <nl> * Used to protect Checks against malicious users who specify an <nl> * unacceptable token set in the configuration file . <nl> @ @ - 78 , 20 + 70 , 21 @ @ public abstract class AbstractCheck extends AbstractViolationReporter { <nl> * @ return the token set this check is designed for . <nl> * @ see TokenTypes <nl> * / <nl> - public int [ ] getAcceptableTokens ( ) { <nl> - final int [ ] defaultTokens = getDefaultTokens ( ) ; <nl> - final int [ ] copy = new int [ defaultTokens . length ] ; <nl> - System . arraycopy ( defaultTokens , 0 , copy , 0 , defaultTokens . length ) ; <nl> - return copy ; <nl> - } <nl> + public abstract int [ ] getAcceptableTokens ( ) ; <nl> <nl> / * * <nl> * The tokens that this check must be registered for . <nl> * @ return the token set this must be registered for . <nl> * @ see TokenTypes <nl> * / <nl> - public int [ ] getRequiredTokens ( ) { <nl> - return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> + public abstract int [ ] getRequiredTokens ( ) ; <nl> + <nl> + / * * <nl> + * Whether comment nodes are required or not . <nl> + * @ return false as a default value . <nl> + * / <nl> + public boolean isCommentNodesRequired ( ) { <nl> + return false ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> index 1e98844 . . d2af06b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java <nl> @ @ - 229 , 6 + 229 , 16 @ @ public abstract class AbstractJavadocCheck extends AbstractCheck { <nl> return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; <nl> } <nl> <nl> + @ Override <nl> + public final int [ ] getAcceptableTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public final int [ ] getRequiredTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Defined final because all JavadocChecks require comment nodes . <nl> * @ return true <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java <nl> index db7044a . . 3523cbc 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java <nl> @ @ - 141 , 16 + 141 , 6 @ @ public class AtclauseOrderCheck extends AbstractJavadocCheck { <nl> } <nl> <nl> @ Override <nl> - public int [ ] getAcceptableTokens ( ) { <nl> - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getRequiredTokens ( ) { <nl> - return getAcceptableTokens ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> public void visitJavadocToken ( DetailNode ast ) { <nl> final int parentType = getParentType ( getBlockCommentAst ( ) ) ; <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java <nl> index 619627e . . 8f56eff 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . javadoc ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; <nl> <nl> @ @ - 125 , 16 + 124 , 6 @ @ public class JavadocParagraphCheck extends AbstractJavadocCheck { <nl> } <nl> <nl> @ Override <nl> - public int [ ] getAcceptableTokens ( ) { <nl> - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getRequiredTokens ( ) { <nl> - return getAcceptableTokens ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> public void visitJavadocToken ( DetailNode ast ) { <nl> if ( ast . getType ( ) = = JavadocTokenTypes . NEWLINE & & isEmptyLine ( ast ) ) { <nl> checkEmptyLine ( ast ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java <nl> index ebfc3c2 . . 8ea614d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import java . util . List ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; <nl> <nl> @ @ - 79 , 16 + 78 , 6 @ @ public class JavadocTagContinuationIndentationCheck extends AbstractJavadocCheck <nl> } <nl> <nl> @ Override <nl> - public int [ ] getAcceptableTokens ( ) { <nl> - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getRequiredTokens ( ) { <nl> - return getAcceptableTokens ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> public void visitJavadocToken ( DetailNode ast ) { <nl> if ( ! isInlineDescription ( ast ) ) { <nl> final List < DetailNode > textNodes = getAllNewlineNodes ( ast ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheck . java <nl> index 1de89c7 . . 7751620 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheck . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . javadoc ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; <nl> <nl> / * * <nl> @ @ - 54 , 16 + 53 , 6 @ @ public class NonEmptyAtclauseDescriptionCheck extends AbstractJavadocCheck { <nl> } <nl> <nl> @ Override <nl> - public int [ ] getAcceptableTokens ( ) { <nl> - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getRequiredTokens ( ) { <nl> - return getAcceptableTokens ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> public void visitJavadocToken ( DetailNode ast ) { <nl> if ( isEmptyTag ( ast . getParent ( ) ) ) { <nl> log ( ast . getLineNumber ( ) , MSG _ KEY , ast . getText ( ) ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SingleLineJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SingleLineJavadocCheck . java <nl> index ec58a41 . . 971ba83 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SingleLineJavadocCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SingleLineJavadocCheck . java <nl> @ @ - 27 , 7 + 27 , 6 @ @ import java . util . stream . Collectors ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; <nl> <nl> / * * <nl> @ @ - 106 , 16 + 105 , 6 @ @ public class SingleLineJavadocCheck extends AbstractJavadocCheck { <nl> } <nl> <nl> @ Override <nl> - public int [ ] getAcceptableTokens ( ) { <nl> - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getRequiredTokens ( ) { <nl> - return getAcceptableTokens ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> public void visitJavadocToken ( DetailNode ast ) { <nl> if ( isSingleLineJavadoc ( getBlockCommentAst ( ) ) <nl> & & ( hasJavadocTags ( ast ) | | ! ignoreInlineTags & & hasJavadocInlineTags ( ast ) ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java <nl> index 81eccd8 . . 828d223 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java <nl> @ @ - 27 , 7 + 27 , 6 @ @ import java . util . regex . Pattern ; <nl> import com . google . common . base . CharMatcher ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> @ @ - 132 , 16 + 131 , 6 @ @ public class SummaryJavadocCheck extends AbstractJavadocCheck { <nl> } <nl> <nl> @ Override <nl> - public int [ ] getAcceptableTokens ( ) { <nl> - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getRequiredTokens ( ) { <nl> - return getAcceptableTokens ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> public void visitJavadocToken ( DetailNode ast ) { <nl> String firstSentence = getFirstSentence ( ast ) ; <nl> final int endOfSentence = firstSentence . lastIndexOf ( period ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java <nl> index 525734b . . fda2732 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 117 , 6 + 118 , 11 @ @ public class NoWhitespaceAfterCheck extends AbstractCheck { <nl> } ; <nl> } <nl> <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> + } <nl> + <nl> / * * <nl> * Control whether whitespace is flagged at linebreaks . <nl> * @ param allowLineBreaks whether whitespace should be <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java <nl> index bf285d5 . . 23d492d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java <nl> @ @ - 107 , 6 + 107 , 16 @ @ public class SingleSpaceSeparatorCheck extends AbstractCheck { <nl> return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> } <nl> <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> / / - @ cs [ SimpleAccessorNameNotation ] Overrides method from base class . <nl> / / Issue : https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 166 <nl> @ Override <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index 899aead . . 8a1f246 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 417 , 6 + 417 , 16 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> public void init ( ) { <nl> super . init ( ) ; <nl> initWasCalled = true ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java <nl> index 5c67922 . . 37df889 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java <nl> @ @ - 38 , 6 + 38 , 16 @ @ public class AbstractCheckTest { <nl> public int [ ] getDefaultTokens ( ) { <nl> return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> } ; <nl> / / Eventually it will become clear abstract method <nl> Assert . assertArrayEquals ( CommonUtils . EMPTY _ INT _ ARRAY , check . getRequiredTokens ( ) ) ; <nl> @ @ - 50 , 6 + 60 , 16 @ @ public class AbstractCheckTest { <nl> public int [ ] getDefaultTokens ( ) { <nl> return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> } ; <nl> / / Eventually it will become clear abstract method <nl> Assert . assertArrayEquals ( CommonUtils . EMPTY _ INT _ ARRAY , check . getAcceptableTokens ( ) ) ; <nl> @ @ - 84 , 6 + 104 , 16 @ @ public class AbstractCheckTest { <nl> public int [ ] getDefaultTokens ( ) { <nl> return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> } ; <nl> check . setFileContents ( new FileContents ( new FileText ( <nl> new File ( INPUT _ FOLDER + " InputAbstractCheckTestFileContence . java " ) , <nl> @ @ - 99 , 6 + 129 , 16 @ @ public class AbstractCheckTest { <nl> public int [ ] getDefaultTokens ( ) { <nl> return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> } ; <nl> final int tabWidth = 4 ; <nl> check . setTabWidth ( tabWidth ) ; <nl> @ @ - 113 , 6 + 153 , 16 @ @ public class AbstractCheckTest { <nl> public int [ ] getDefaultTokens ( ) { <nl> return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> } ; <nl> final ClassLoader classLoader = ClassLoader . getSystemClassLoader ( ) ; <nl> check . setClassLoader ( classLoader ) ; <nl> @ @ - 123 , 14 + 173 , 27 @ @ public class AbstractCheckTest { <nl> @ Test <nl> public void testGetAcceptableTokens ( ) throws Exception { <nl> final int [ ] defaultTokens = { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; <nl> + final int [ ] acceptableTokens = { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; <nl> + final int [ ] requiredTokens = { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; <nl> final AbstractCheck check = new AbstractCheck ( ) { <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> return defaultTokens ; <nl> } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return acceptableTokens ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return requiredTokens ; <nl> + } <nl> } ; <nl> <nl> - Assert . assertNotEquals ( defaultTokens , check . getAcceptableTokens ( ) ) ; <nl> + Assert . assertArrayEquals ( defaultTokens , check . getDefaultTokens ( ) ) ; <nl> Assert . assertArrayEquals ( defaultTokens , check . getAcceptableTokens ( ) ) ; <nl> + Assert . assertArrayEquals ( requiredTokens , check . getRequiredTokens ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> index 6d1cb44 . . c0a9e3e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> @ @ - 43 , 7 + 43 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . internal . TestUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . BlockCommentPosition ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> @ @ - 172 , 6 + 171 , 30 @ @ public class AbstractJavadocCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testTokens ( ) throws Exception { <nl> + final int [ ] defaultJavadocTokens = { JavadocTokenTypes . JAVADOC } ; <nl> + final AbstractJavadocCheck check = new AbstractJavadocCheck ( ) { <nl> + <nl> + @ Override <nl> + public void visitJavadocToken ( DetailNode ast ) { <nl> + / / no code necessary <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getDefaultJavadocTokens ( ) { <nl> + return defaultJavadocTokens ; <nl> + } <nl> + } ; <nl> + <nl> + Assert . assertNotNull ( check . getDefaultTokens ( ) ) ; <nl> + Assert . assertArrayEquals ( check . getDefaultTokens ( ) , check . getAcceptableTokens ( ) ) ; <nl> + Assert . assertArrayEquals ( check . getDefaultTokens ( ) , check . getRequiredTokens ( ) ) ; <nl> + Assert . assertArrayEquals ( defaultJavadocTokens , check . getDefaultJavadocTokens ( ) ) ; <nl> + Assert . assertArrayEquals ( defaultJavadocTokens , check . getAcceptableJavadocTokens ( ) ) ; <nl> + Assert . assertNotEquals ( defaultJavadocTokens , check . getRequiredJavadocTokens ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testAcceptableTokensFail ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> @ @ - 237 , 16 + 260 , 6 @ @ public class AbstractJavadocCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Override <nl> - public int [ ] getAcceptableTokens ( ) { <nl> - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getRequiredTokens ( ) { <nl> - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; <nl> - } <nl> - <nl> - @ Override <nl> public void visitJavadocToken ( DetailNode ast ) { <nl> / / do nothing <nl> } <nl> @ @ - 265 , 16 + 278 , 6 @ @ public class AbstractJavadocCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Override <nl> - public int [ ] getAcceptableTokens ( ) { <nl> - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; <nl> - } <nl> - <nl> - @ Override <nl> - public int [ ] getRequiredTokens ( ) { <nl> - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; <nl> - } <nl> - <nl> - @ Override <nl> public void visitJavadocToken ( DetailNode ast ) { <nl> Assert . assertEquals ( ast . toString ( ) , " JAVADOC " , ast . getText ( ) ) ; <nl> javadocsNumber + + ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> index 979fa71 . . 0211102 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java <nl> @ @ - 120 , 6 + 120 , 16 @ @ public class ModuleReflectionUtilsTest { <nl> public int [ ] getDefaultTokens ( ) { <nl> return new int [ ] { 0 } ; <nl> } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> } <nl> <nl> private static class FileSetModuleClass extends AbstractFileSetCheck { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / bar / FooCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / bar / FooCheck . java <nl> index abc8a28 . . ff0095c 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / bar / FooCheck . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / bar / FooCheck . java <nl> @ @ - 7 , 4 + 7 , 14 @ @ public class FooCheck extends AbstractCheck { <nl> public int [ ] getDefaultTokens ( ) { <nl> return new int [ ] { 0 } ; <nl> } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / foo / FooCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / foo / FooCheck . java <nl> index 44649b3 . . 883ab24 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / foo / FooCheck . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / foo / FooCheck . java <nl> @ @ - 7 , 4 + 7 , 14 @ @ public class FooCheck extends AbstractCheck { <nl> public int [ ] getDefaultTokens ( ) { <nl> return new int [ ] { 0 } ; <nl> } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheckTest . java 
 index 3dc063b . . b589e00 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheckTest . java 
 @ @ - 36 , 7 + 36 , 8 @ @ public class NonEmptyAtclauseDescriptionCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " javadoc " + File . separator + filename ) ; 
 + + " javadoc " + File . separator 
 + + " nonemptyatclausedescription " + File . separator + filename ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputNonEmptyAtclauseDescription . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputNonEmptyAtclauseDescription . java 
 deleted file mode 100644 
 index 91c2eb1 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputNonEmptyAtclauseDescription . java 
 + + + / dev / null 
 @ @ - 1 , 99 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . javadoc ; 
 - class InputNonEmptyAtclauseDescription 
 - { 
 - 	 / * * 
 - 	 * Some javadoc . 
 - 	 * @ param a Some javadoc . 
 - 	 * @ param b Some javadoc . 
 - 	 * / 
 - 	 public InputNonEmptyAtclauseDescription ( String a , int b ) 
 - 	 { 
 - 	 	 
 - 	 } 
 - 	 
 - 	 / * * 
 - 	 * Some javadoc . 
 - 	 * @ param a Some javadoc . 
 - 	 * @ deprecated Some javadoc . 
 - 	 * / 
 - 	 public InputNonEmptyAtclauseDescription ( String a ) 
 - 	 { 
 - 	 	 
 - 	 } 
 - 	 
 - 	 / * * 
 - 	 * Some javadoc . 
 - 	 * @ param a 
 - 	 * @ param b 
 - 	 * @ param c 
 - 	 * / 
 - 	 public InputNonEmptyAtclauseDescription ( String a , int b , double c ) 
 - 	 { 
 - 	 	 
 - 	 } 
 - 	 
 - 	 / * * 
 - 	 * 
 - 	 * @ param a 
 - 	 * @ param e 
 - 	 * @ deprecated 
 - 	 * / 
 - 	 public InputNonEmptyAtclauseDescription ( String a , boolean e ) 
 - 	 { 
 - 	 	 
 - 	 } 
 - 	 
 - 	 / * * 
 - 	 * Some javadoc 
 - 	 * @ param a Some javadoc 
 - 	 * @ param b Some javadoc 
 - 	 * @ param c Some javadoc 
 - 	 * @ return Some javadoc 
 - 	 * @ throws Exception Some javadoc 
 - 	 * @ deprecated Some javadoc 
 - 	 * / 
 - 	 public int foo1 ( String a , int b , double c ) throws Exception 
 - 	 { 
 - 	 	 return 1 ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * 
 - 	 * @ param a Some javadoc 
 - 	 * @ param b Some javadoc 
 - 	 * @ param c Some javadoc 
 - 	 * @ return Some javadoc 
 - 	 * @ throws Exception Some javadoc 
 - 	 * / 
 - 	 public int foo2 ( String a , int b , double c ) throws Exception 
 - 	 { 
 - 	 	 return 1 ; 
 - 	 } 
 - 	 
 - 	 / * * 
 - 	 * 
 - 	 * @ param a 
 - 	 * @ param b 
 - 	 * @ param c 
 - 	 * @ return 
 - 	 * @ throws Exception 
 - 	 * @ deprecated 
 - 	 * / 
 - 	 public int foo3 ( String a , int b , double c ) throws Exception 
 - 	 { 
 - 	 	 return 1 ; 
 - 	 } 
 - 	 
 - 	 / * * 
 - 	 * 
 - 	 * @ param a 
 - 	 * @ param b 
 - 	 * @ param c 
 - 	 * @ return 
 - 	 * @ throws Exception 
 - 	 * / 
 - 	 public int foo4 ( String a , int b , double c ) throws Exception 
 - 	 { 
 - 	 	 return 1 ; 
 - 	 } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / nonemptyatclausedescription / InputNonEmptyAtclauseDescription . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / nonemptyatclausedescription / InputNonEmptyAtclauseDescription . java 
 new file mode 100644 
 index 0000000 . . ee78802 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / nonemptyatclausedescription / InputNonEmptyAtclauseDescription . java 
 @ @ - 0 , 0 + 1 , 99 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . javadoc . nonemptyatclausedescription ; 
 + class InputNonEmptyAtclauseDescription 
 + { 
 + 	 / * * 
 + 	 * Some javadoc . 
 + 	 * @ param a Some javadoc . 
 + 	 * @ param b Some javadoc . 
 + 	 * / 
 + 	 public InputNonEmptyAtclauseDescription ( String a , int b ) 
 + 	 { 
 + 	 	 
 + 	 } 
 + 	 
 + 	 / * * 
 + 	 * Some javadoc . 
 + 	 * @ param a Some javadoc . 
 + 	 * @ deprecated Some javadoc . 
 + 	 * / 
 + 	 public InputNonEmptyAtclauseDescription ( String a ) 
 + 	 { 
 + 	 	 
 + 	 } 
 + 	 
 + 	 / * * 
 + 	 * Some javadoc . 
 + 	 * @ param a 
 + 	 * @ param b 
 + 	 * @ param c 
 + 	 * / 
 + 	 public InputNonEmptyAtclauseDescription ( String a , int b , double c ) 
 + 	 { 
 + 	 	 
 + 	 } 
 + 	 
 + 	 / * * 
 + 	 * 
 + 	 * @ param a 
 + 	 * @ param e 
 + 	 * @ deprecated 
 + 	 * / 
 + 	 public InputNonEmptyAtclauseDescription ( String a , boolean e ) 
 + 	 { 
 + 	 	 
 + 	 } 
 + 	 
 + 	 / * * 
 + 	 * Some javadoc 
 + 	 * @ param a Some javadoc 
 + 	 * @ param b Some javadoc 
 + 	 * @ param c Some javadoc 
 + 	 * @ return Some javadoc 
 + 	 * @ throws Exception Some javadoc 
 + 	 * @ deprecated Some javadoc 
 + 	 * / 
 + 	 public int foo1 ( String a , int b , double c ) throws Exception 
 + 	 { 
 + 	 	 return 1 ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * 
 + 	 * @ param a Some javadoc 
 + 	 * @ param b Some javadoc 
 + 	 * @ param c Some javadoc 
 + 	 * @ return Some javadoc 
 + 	 * @ throws Exception Some javadoc 
 + 	 * / 
 + 	 public int foo2 ( String a , int b , double c ) throws Exception 
 + 	 { 
 + 	 	 return 1 ; 
 + 	 } 
 + 	 
 + 	 / * * 
 + 	 * 
 + 	 * @ param a 
 + 	 * @ param b 
 + 	 * @ param c 
 + 	 * @ return 
 + 	 * @ throws Exception 
 + 	 * @ deprecated 
 + 	 * / 
 + 	 public int foo3 ( String a , int b , double c ) throws Exception 
 + 	 { 
 + 	 	 return 1 ; 
 + 	 } 
 + 	 
 + 	 / * * 
 + 	 * 
 + 	 * @ param a 
 + 	 * @ param b 
 + 	 * @ param c 
 + 	 * @ return 
 + 	 * @ throws Exception 
 + 	 * / 
 + 	 public int foo4 ( String a , int b , double c ) throws Exception 
 + 	 { 
 + 	 	 return 1 ; 
 + 	 } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java 
 index 204dae4 . . 110ee37 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java 
 @ @ - 63 , 14 + 63 , 6 @ @ public abstract class AbstractCheck extends AbstractViolationReporter { 
 public abstract int [ ] getDefaultTokens ( ) ; 
 
 / * * 
 - * Whether comment nodes are required or not . 
 - * @ return false as a default value . 
 - * / 
 - public boolean isCommentNodesRequired ( ) { 
 - return false ; 
 - } 
 - 
 - / * * 
 * The configurable token set . 
 * Used to protect Checks against malicious users who specify an 
 * unacceptable token set in the configuration file . 
 @ @ - 78 , 20 + 70 , 21 @ @ public abstract class AbstractCheck extends AbstractViolationReporter { 
 * @ return the token set this check is designed for . 
 * @ see TokenTypes 
 * / 
 - public int [ ] getAcceptableTokens ( ) { 
 - final int [ ] defaultTokens = getDefaultTokens ( ) ; 
 - final int [ ] copy = new int [ defaultTokens . length ] ; 
 - System . arraycopy ( defaultTokens , 0 , copy , 0 , defaultTokens . length ) ; 
 - return copy ; 
 - } 
 + public abstract int [ ] getAcceptableTokens ( ) ; 
 
 / * * 
 * The tokens that this check must be registered for . 
 * @ return the token set this must be registered for . 
 * @ see TokenTypes 
 * / 
 - public int [ ] getRequiredTokens ( ) { 
 - return CommonUtils . EMPTY _ INT _ ARRAY ; 
 + public abstract int [ ] getRequiredTokens ( ) ; 
 + 
 + / * * 
 + * Whether comment nodes are required or not . 
 + * @ return false as a default value . 
 + * / 
 + public boolean isCommentNodesRequired ( ) { 
 + return false ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 index 1e98844 . . d2af06b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheck . java 
 @ @ - 229 , 6 + 229 , 16 @ @ public abstract class AbstractJavadocCheck extends AbstractCheck { 
 return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; 
 } 
 
 + @ Override 
 + public final int [ ] getAcceptableTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public final int [ ] getRequiredTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 / * * 
 * Defined final because all JavadocChecks require comment nodes . 
 * @ return true 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java 
 index db7044a . . 3523cbc 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java 
 @ @ - 141 , 16 + 141 , 6 @ @ public class AtclauseOrderCheck extends AbstractJavadocCheck { 
 } 
 
 @ Override 
 - public int [ ] getAcceptableTokens ( ) { 
 - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getRequiredTokens ( ) { 
 - return getAcceptableTokens ( ) ; 
 - } 
 - 
 - @ Override 
 public void visitJavadocToken ( DetailNode ast ) { 
 final int parentType = getParentType ( getBlockCommentAst ( ) ) ; 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java 
 index 619627e . . 8f56eff 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java 
 @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . javadoc ; 
 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; 
 
 @ @ - 125 , 16 + 124 , 6 @ @ public class JavadocParagraphCheck extends AbstractJavadocCheck { 
 } 
 
 @ Override 
 - public int [ ] getAcceptableTokens ( ) { 
 - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getRequiredTokens ( ) { 
 - return getAcceptableTokens ( ) ; 
 - } 
 - 
 - @ Override 
 public void visitJavadocToken ( DetailNode ast ) { 
 if ( ast . getType ( ) = = JavadocTokenTypes . NEWLINE & & isEmptyLine ( ast ) ) { 
 checkEmptyLine ( ast ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java 
 index ebfc3c2 . . 8ea614d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import java . util . List ; 
 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; 
 
 @ @ - 79 , 16 + 78 , 6 @ @ public class JavadocTagContinuationIndentationCheck extends AbstractJavadocCheck 
 } 
 
 @ Override 
 - public int [ ] getAcceptableTokens ( ) { 
 - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getRequiredTokens ( ) { 
 - return getAcceptableTokens ( ) ; 
 - } 
 - 
 - @ Override 
 public void visitJavadocToken ( DetailNode ast ) { 
 if ( ! isInlineDescription ( ast ) ) { 
 final List < DetailNode > textNodes = getAllNewlineNodes ( ast ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheck . java 
 index 1de89c7 . . 7751620 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / NonEmptyAtclauseDescriptionCheck . java 
 @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . javadoc ; 
 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; 
 
 / * * 
 @ @ - 54 , 16 + 53 , 6 @ @ public class NonEmptyAtclauseDescriptionCheck extends AbstractJavadocCheck { 
 } 
 
 @ Override 
 - public int [ ] getAcceptableTokens ( ) { 
 - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getRequiredTokens ( ) { 
 - return getAcceptableTokens ( ) ; 
 - } 
 - 
 - @ Override 
 public void visitJavadocToken ( DetailNode ast ) { 
 if ( isEmptyTag ( ast . getParent ( ) ) ) { 
 log ( ast . getLineNumber ( ) , MSG _ KEY , ast . getText ( ) ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SingleLineJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SingleLineJavadocCheck . java 
 index ec58a41 . . 971ba83 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SingleLineJavadocCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SingleLineJavadocCheck . java 
 @ @ - 27 , 7 + 27 , 6 @ @ import java . util . stream . Collectors ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; 
 
 / * * 
 @ @ - 106 , 16 + 105 , 6 @ @ public class SingleLineJavadocCheck extends AbstractJavadocCheck { 
 } 
 
 @ Override 
 - public int [ ] getAcceptableTokens ( ) { 
 - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getRequiredTokens ( ) { 
 - return getAcceptableTokens ( ) ; 
 - } 
 - 
 - @ Override 
 public void visitJavadocToken ( DetailNode ast ) { 
 if ( isSingleLineJavadoc ( getBlockCommentAst ( ) ) 
 & & ( hasJavadocTags ( ast ) | | ! ignoreInlineTags & & hasJavadocInlineTags ( ast ) ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java 
 index 81eccd8 . . 828d223 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java 
 @ @ - 27 , 7 + 27 , 6 @ @ import java . util . regex . Pattern ; 
 import com . google . common . base . CharMatcher ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 @ @ - 132 , 16 + 131 , 6 @ @ public class SummaryJavadocCheck extends AbstractJavadocCheck { 
 } 
 
 @ Override 
 - public int [ ] getAcceptableTokens ( ) { 
 - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getRequiredTokens ( ) { 
 - return getAcceptableTokens ( ) ; 
 - } 
 - 
 - @ Override 
 public void visitJavadocToken ( DetailNode ast ) { 
 String firstSentence = getFirstSentence ( ast ) ; 
 final int endOfSentence = firstSentence . lastIndexOf ( period ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java 
 index 525734b . . fda2732 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheck . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * < p > 
 @ @ - 117 , 6 + 118 , 11 @ @ public class NoWhitespaceAfterCheck extends AbstractCheck { 
 } ; 
 } 
 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return CommonUtils . EMPTY _ INT _ ARRAY ; 
 + } 
 + 
 / * * 
 * Control whether whitespace is flagged at linebreaks . 
 * @ param allowLineBreaks whether whitespace should be 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java 
 index bf285d5 . . 23d492d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java 
 @ @ - 107 , 6 + 107 , 16 @ @ public class SingleSpaceSeparatorCheck extends AbstractCheck { 
 return CommonUtils . EMPTY _ INT _ ARRAY ; 
 } 
 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 / / - @ cs [ SimpleAccessorNameNotation ] Overrides method from base class . 
 / / Issue : https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / issues / 166 
 @ Override 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index 899aead . . 8a1f246 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 417 , 6 + 417 , 16 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 } 
 
 @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + @ Override 
 public void init ( ) { 
 super . init ( ) ; 
 initWasCalled = true ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java 
 index 5c67922 . . 37df889 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java 
 @ @ - 38 , 6 + 38 , 16 @ @ public class AbstractCheckTest { 
 public int [ ] getDefaultTokens ( ) { 
 return CommonUtils . EMPTY _ INT _ ARRAY ; 
 } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 } ; 
 / / Eventually it will become clear abstract method 
 Assert . assertArrayEquals ( CommonUtils . EMPTY _ INT _ ARRAY , check . getRequiredTokens ( ) ) ; 
 @ @ - 50 , 6 + 60 , 16 @ @ public class AbstractCheckTest { 
 public int [ ] getDefaultTokens ( ) { 
 return CommonUtils . EMPTY _ INT _ ARRAY ; 
 } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 } ; 
 / / Eventually it will become clear abstract method 
 Assert . assertArrayEquals ( CommonUtils . EMPTY _ INT _ ARRAY , check . getAcceptableTokens ( ) ) ; 
 @ @ - 84 , 6 + 104 , 16 @ @ public class AbstractCheckTest { 
 public int [ ] getDefaultTokens ( ) { 
 return CommonUtils . EMPTY _ INT _ ARRAY ; 
 } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 } ; 
 check . setFileContents ( new FileContents ( new FileText ( 
 new File ( INPUT _ FOLDER + " InputAbstractCheckTestFileContence . java " ) , 
 @ @ - 99 , 6 + 129 , 16 @ @ public class AbstractCheckTest { 
 public int [ ] getDefaultTokens ( ) { 
 return CommonUtils . EMPTY _ INT _ ARRAY ; 
 } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 } ; 
 final int tabWidth = 4 ; 
 check . setTabWidth ( tabWidth ) ; 
 @ @ - 113 , 6 + 153 , 16 @ @ public class AbstractCheckTest { 
 public int [ ] getDefaultTokens ( ) { 
 return CommonUtils . EMPTY _ INT _ ARRAY ; 
 } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 } ; 
 final ClassLoader classLoader = ClassLoader . getSystemClassLoader ( ) ; 
 check . setClassLoader ( classLoader ) ; 
 @ @ - 123 , 14 + 173 , 27 @ @ public class AbstractCheckTest { 
 @ Test 
 public void testGetAcceptableTokens ( ) throws Exception { 
 final int [ ] defaultTokens = { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; 
 + final int [ ] acceptableTokens = { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; 
 + final int [ ] requiredTokens = { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; 
 final AbstractCheck check = new AbstractCheck ( ) { 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 return defaultTokens ; 
 } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return acceptableTokens ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return requiredTokens ; 
 + } 
 } ; 
 
 - Assert . assertNotEquals ( defaultTokens , check . getAcceptableTokens ( ) ) ; 
 + Assert . assertArrayEquals ( defaultTokens , check . getDefaultTokens ( ) ) ; 
 Assert . assertArrayEquals ( defaultTokens , check . getAcceptableTokens ( ) ) ; 
 + Assert . assertArrayEquals ( requiredTokens , check . getRequiredTokens ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 index 6d1cb44 . . c0a9e3e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 @ @ - 43 , 7 + 43 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . internal . TestUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . BlockCommentPosition ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 @ @ - 172 , 6 + 171 , 30 @ @ public class AbstractJavadocCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public void testTokens ( ) throws Exception { 
 + final int [ ] defaultJavadocTokens = { JavadocTokenTypes . JAVADOC } ; 
 + final AbstractJavadocCheck check = new AbstractJavadocCheck ( ) { 
 + 
 + @ Override 
 + public void visitJavadocToken ( DetailNode ast ) { 
 + / / no code necessary 
 + } 
 + 
 + @ Override 
 + public int [ ] getDefaultJavadocTokens ( ) { 
 + return defaultJavadocTokens ; 
 + } 
 + } ; 
 + 
 + Assert . assertNotNull ( check . getDefaultTokens ( ) ) ; 
 + Assert . assertArrayEquals ( check . getDefaultTokens ( ) , check . getAcceptableTokens ( ) ) ; 
 + Assert . assertArrayEquals ( check . getDefaultTokens ( ) , check . getRequiredTokens ( ) ) ; 
 + Assert . assertArrayEquals ( defaultJavadocTokens , check . getDefaultJavadocTokens ( ) ) ; 
 + Assert . assertArrayEquals ( defaultJavadocTokens , check . getAcceptableJavadocTokens ( ) ) ; 
 + Assert . assertNotEquals ( defaultJavadocTokens , check . getRequiredJavadocTokens ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testAcceptableTokensFail ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = 
 @ @ - 237 , 16 + 260 , 6 @ @ public class AbstractJavadocCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Override 
 - public int [ ] getAcceptableTokens ( ) { 
 - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getRequiredTokens ( ) { 
 - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; 
 - } 
 - 
 - @ Override 
 public void visitJavadocToken ( DetailNode ast ) { 
 / / do nothing 
 } 
 @ @ - 265 , 16 + 278 , 6 @ @ public class AbstractJavadocCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Override 
 - public int [ ] getAcceptableTokens ( ) { 
 - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; 
 - } 
 - 
 - @ Override 
 - public int [ ] getRequiredTokens ( ) { 
 - return new int [ ] { TokenTypes . BLOCK _ COMMENT _ BEGIN } ; 
 - } 
 - 
 - @ Override 
 public void visitJavadocToken ( DetailNode ast ) { 
 Assert . assertEquals ( ast . toString ( ) , " JAVADOC " , ast . getText ( ) ) ; 
 javadocsNumber + + ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 index 979fa71 . . 0211102 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / ModuleReflectionUtilsTest . java 
 @ @ - 120 , 6 + 120 , 16 @ @ public class ModuleReflectionUtilsTest { 
 public int [ ] getDefaultTokens ( ) { 
 return new int [ ] { 0 } ; 
 } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 } 
 
 private static class FileSetModuleClass extends AbstractFileSetCheck { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / bar / FooCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / bar / FooCheck . java 
 index abc8a28 . . ff0095c 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / bar / FooCheck . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / bar / FooCheck . java 
 @ @ - 7 , 4 + 7 , 14 @ @ public class FooCheck extends AbstractCheck { 
 public int [ ] getDefaultTokens ( ) { 
 return new int [ ] { 0 } ; 
 } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / foo / FooCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / foo / FooCheck . java 
 index 44649b3 . . 883ab24 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / foo / FooCheck . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / packageobjectfactory / foo / FooCheck . java 
 @ @ - 7 , 4 + 7 , 14 @ @ public class FooCheck extends AbstractCheck { 
 public int [ ] getDefaultTokens ( ) { 
 return new int [ ] { 0 } ; 
 } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return getDefaultTokens ( ) ; 
 + } 
 }
