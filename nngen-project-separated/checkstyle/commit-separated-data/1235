BLEU SCORE: 0.026279617104084448

TEST MSG: doc : DesignForExtension documentation is extended to warn user about possible misusage of this Check
GENERATED MSG: Issue # 2064 : ignore classes nested in interaces or annotations in Final

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> index 8095baa . . 5ad6f33 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> @ @ - 26 , 7 + 26 , 21 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> <nl> / * * <nl> - * Checks that classes are designed for inheritance . <nl> + * Checks find classes that are designed for inheritance . <nl> + * <nl> + * < p > <nl> + * Nothing wrong could be with founded classes <nl> + * this Check make sence only for library project ( not a application projects ) <nl> + * who care about ideal OOP design to make sure clas work in all cases even misusage . <nl> + * Even in library projects this Check most likely find classes that are not required to check . <nl> + * User need to use suppressions extensively to got a benefit from this Check and avoid <nl> + * false positives . <nl> + * < / p > <nl> + * <nl> + * < p > <nl> + * ATTENTION : Only user can deside whether class is designed for extension or not . <nl> + * Check just show all possible . If smth inappropriate is found please use supporession . <nl> + * < / p > <nl> * <nl> * < p > <nl> * More specifically , it enforces a programming style <nl> diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml <nl> index 9df8e77 . . 37e2ce8 100644 <nl> - - - a / src / xdocs / config _ design . xml <nl> + + + b / src / xdocs / config _ design . xml <nl> @ @ - 27 , 6 + 27 , 18 @ @ <nl> The Check finds classes that are designed for extension ( subclass creation ) . <nl> < / p > <nl> < p > <nl> + Nothing wrong could be with founded classes <nl> + this Check make sence only for library project ( not a application projects ) <nl> + who care about ideal OOP design to make sure class work in all cases even misusage . <nl> + Even in library projects this Check most likely finds classes that are not required to check . <nl> + User need to use suppressions extensively to got a benefit from this Check and avoid <nl> + false positives . <nl> + < / p > <nl> + < p > <nl> + ATTENTION : Only user can deside whether class is designed for extension or not . <nl> + Check just show all possible . If smth inappropriate is found please use supporession . <nl> + < / p > <nl> + < p > <nl> Problem is described at " Effective Java , 2nd Edition by Josh Bloch " book , chapter " Item 17 : Design and document for inheritance or else prohibit it " . <nl> < / p > <nl> < p >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> index fe74d30 . . 60c43a3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 240 , 9 + 240 , 10 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> * the destroy method to close and remove the listeners . <nl> * @ param files the list of files to be audited . <nl> * @ return the total number of errors found <nl> + * @ throws CheckstyleException if error condition within Checkstyle occurs <nl> * @ see # destroy ( ) <nl> * / <nl> - public int process ( List < File > files ) { <nl> + public int process ( List < File > files ) throws CheckstyleException { <nl> / / Prepare to start <nl> fireAuditStarted ( ) ; <nl> for ( final FileSetCheck fsc : fileSetChecks ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index b8215bd . . b5af18e 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 51 , 7 + 51 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . Context ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> - import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaLexer ; <nl> import com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaRecognizer ; <nl> @ @ - 181 , 7 + 180 , 7 @ @ public final class TreeWalker <nl> } <nl> <nl> @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> + protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { <nl> / / check if already checked and passed the file <nl> final String fileName = file . getPath ( ) ; <nl> final long timestamp = file . lastModified ( ) ; <nl> @ @ - 209 , 16 + 208 , 11 @ @ public final class TreeWalker <nl> catch ( final TokenStreamRecognitionException tre ) { <nl> final String exceptionMsg = String . format ( msg , " TokenStreamRecognitionException " , <nl> fileName ) ; <nl> - LOG . error ( exceptionMsg ) ; <nl> - final RecognitionException re = tre . recog ; <nl> - final String message = re . getMessage ( ) ; <nl> - getMessageCollector ( ) . add ( createLocalizedMessage ( message ) ) ; <nl> + throw new CheckstyleException ( exceptionMsg , tre ) ; <nl> } <nl> - / / RecognitionException and any other ( need to check if needed ) <nl> - catch ( Throwable ex ) { <nl> + catch ( RecognitionException | TokenStreamException ex ) { <nl> final String exceptionMsg = String . format ( msg , ex . getClass ( ) . getSimpleName ( ) , fileName ) ; <nl> - LOG . error ( exceptionMsg , ex ) ; <nl> - getMessageCollector ( ) . add ( createLocalizedMessage ( ex . getMessage ( ) ) ) ; <nl> + throw new CheckstyleException ( exceptionMsg , ex ) ; <nl> } <nl> <nl> if ( cache ! = null & & getMessageCollector ( ) . size ( ) = = 0 ) { <nl> @ @ - 227 , 22 + 221 , 6 @ @ public final class TreeWalker <nl> } <nl> <nl> / * * <nl> - * Creates { @ link LocalizedMessage } object using default attributes . <nl> - * @ param message <nl> - * message that will be used for created object <nl> - * @ return instance of created object <nl> - * / <nl> - private LocalizedMessage createLocalizedMessage ( String message ) { <nl> - return new LocalizedMessage ( <nl> - 0 , <nl> - Definitions . CHECKSTYLE _ BUNDLE , <nl> - " general . exception " , <nl> - new String [ ] { message } , <nl> - getId ( ) , <nl> - getClass ( ) , null ) ; <nl> - } <nl> - <nl> - / * * <nl> * Register a check for a given configuration . <nl> * @ param check the check to register <nl> * @ throws CheckstyleException if an error occurs <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> index e906954 . . 24331aa 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> @ @ - 326 , 14 + 326 , 20 @ @ public class CheckstyleAntTask extends Task { <nl> + " files " , Project . MSG _ INFO ) ; <nl> log ( " Using configuration " + configLocation , Project . MSG _ VERBOSE ) ; <nl> <nl> - final long processingStartTime = System . currentTimeMillis ( ) ; <nl> - final int numErrs = checker . process ( files ) ; <nl> - final long processingEndTime = System . currentTimeMillis ( ) ; <nl> - log ( " To process the files took " + ( processingEndTime - processingStartTime ) + TIME _ SUFFIX , <nl> - Project . MSG _ VERBOSE ) ; <nl> + int numErrs = 0 ; <nl> + <nl> + try { <nl> + final long processingStartTime = System . currentTimeMillis ( ) ; <nl> + numErrs = checker . process ( files ) ; <nl> + final long processingEndTime = System . currentTimeMillis ( ) ; <nl> + log ( " To process the files took " + ( processingEndTime - processingStartTime ) <nl> + + TIME _ SUFFIX , Project . MSG _ VERBOSE ) ; <nl> + } <nl> + catch ( CheckstyleException e ) { <nl> + throw new BuildException ( " Unable to process files : " + files , e ) ; <nl> + } <nl> final int numWarnings = warningCounter . getCount ( ) ; <nl> - final boolean ok = numErrs < = maxErrors <nl> - & & numWarnings < = maxWarnings ; <nl> + final boolean ok = numErrs < = maxErrors & & numWarnings < = maxWarnings ; <nl> <nl> / / Handle the return status <nl> if ( ! ok ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> index 24bd587 . . d3096d1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> @ @ - 50 , 8 + 50 , 10 @ @ public abstract class AbstractFileSetCheck <nl> * Called to process a file that matches the specified file extensions . <nl> * @ param file the file to be processed <nl> * @ param lines an immutable list of the contents of the file . <nl> + * @ throws CheckstyleException if error condition within Checkstyle occurs . <nl> * / <nl> - protected abstract void processFiltered ( File file , List < String > lines ) ; <nl> + protected abstract void processFiltered ( File file , List < String > lines ) <nl> + throws CheckstyleException ; <nl> <nl> @ Override <nl> public void init ( ) { <nl> @ @ - 69 , 8 + 71 , 8 @ @ public abstract class AbstractFileSetCheck <nl> } <nl> <nl> @ Override <nl> - public final SortedSet < LocalizedMessage > process ( File file , <nl> - List < String > lines ) { <nl> + public final SortedSet < LocalizedMessage > process ( File file , List < String > lines ) <nl> + throws CheckstyleException { <nl> messageCollector . reset ( ) ; <nl> / / Process only what interested in <nl> if ( CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java <nl> index 46b3955 . . cf8e9b7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java <nl> @ @ - 70 , 8 + 70 , 9 @ @ public interface FileSetCheck <nl> * @ param file the file to be processed <nl> * @ param lines an immutable list of the contents of the file . <nl> * @ return the sorted set of messages to be logged . <nl> + * @ throws CheckstyleException if error condition within Checkstyle occurs <nl> * / <nl> - SortedSet < LocalizedMessage > process ( File file , List < String > lines ) ; <nl> + SortedSet < LocalizedMessage > process ( File file , List < String > lines ) throws CheckstyleException ; <nl> <nl> / * * <nl> * Called when all the files have been processed . This is the time to <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index 4b19ff6 . . 0f22407 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 272 , 7 + 272 , 13 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> ArrayList < String > lines = new ArrayList < > ( ) ; <nl> lines . add ( " classD a { } " ) ; <nl> <nl> - treeWalker . processFiltered ( file , lines ) ; <nl> + try { <nl> + treeWalker . processFiltered ( file , lines ) ; <nl> + } <nl> + catch ( CheckstyleException exception ) { <nl> + assertTrue ( exception . getMessage ( ) . contains ( <nl> + " occurred during the analysis of file " ) ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> @ @ - 288 , 7 + 294 , 13 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> ArrayList < String > lines = new ArrayList < > ( ) ; <nl> lines . add ( " class a % $ # { } " ) ; <nl> <nl> - treeWalker . processFiltered ( file , lines ) ; <nl> + try { <nl> + treeWalker . processFiltered ( file , lines ) ; <nl> + } <nl> + catch ( CheckstyleException exception ) { <nl> + assertTrue ( exception . getMessage ( ) . contains ( <nl> + " TokenStreamRecognitionException occurred during the analysis of file " ) ) ; <nl> + } <nl> } <nl> <nl> @ Test

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 index 8095baa . . 5ad6f33 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 @ @ - 26 , 7 + 26 , 21 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 
 / * * 
 - * Checks that classes are designed for inheritance . 
 + * Checks find classes that are designed for inheritance . 
 + * 
 + * < p > 
 + * Nothing wrong could be with founded classes 
 + * this Check make sence only for library project ( not a application projects ) 
 + * who care about ideal OOP design to make sure clas work in all cases even misusage . 
 + * Even in library projects this Check most likely find classes that are not required to check . 
 + * User need to use suppressions extensively to got a benefit from this Check and avoid 
 + * false positives . 
 + * < / p > 
 + * 
 + * < p > 
 + * ATTENTION : Only user can deside whether class is designed for extension or not . 
 + * Check just show all possible . If smth inappropriate is found please use supporession . 
 + * < / p > 
 * 
 * < p > 
 * More specifically , it enforces a programming style 
 diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml 
 index 9df8e77 . . 37e2ce8 100644 
 - - - a / src / xdocs / config _ design . xml 
 + + + b / src / xdocs / config _ design . xml 
 @ @ - 27 , 6 + 27 , 18 @ @ 
 The Check finds classes that are designed for extension ( subclass creation ) . 
 < / p > 
 < p > 
 + Nothing wrong could be with founded classes 
 + this Check make sence only for library project ( not a application projects ) 
 + who care about ideal OOP design to make sure class work in all cases even misusage . 
 + Even in library projects this Check most likely finds classes that are not required to check . 
 + User need to use suppressions extensively to got a benefit from this Check and avoid 
 + false positives . 
 + < / p > 
 + < p > 
 + ATTENTION : Only user can deside whether class is designed for extension or not . 
 + Check just show all possible . If smth inappropriate is found please use supporession . 
 + < / p > 
 + < p > 
 Problem is described at " Effective Java , 2nd Edition by Josh Bloch " book , chapter " Item 17 : Design and document for inheritance or else prohibit it " . 
 < / p > 
 < p >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 index fe74d30 . . 60c43a3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 240 , 9 + 240 , 10 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 * the destroy method to close and remove the listeners . 
 * @ param files the list of files to be audited . 
 * @ return the total number of errors found 
 + * @ throws CheckstyleException if error condition within Checkstyle occurs 
 * @ see # destroy ( ) 
 * / 
 - public int process ( List < File > files ) { 
 + public int process ( List < File > files ) throws CheckstyleException { 
 / / Prepare to start 
 fireAuditStarted ( ) ; 
 for ( final FileSetCheck fsc : fileSetChecks ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index b8215bd . . b5af18e 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 51 , 7 + 51 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . Context ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 - import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaLexer ; 
 import com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaRecognizer ; 
 @ @ - 181 , 7 + 180 , 7 @ @ public final class TreeWalker 
 } 
 
 @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 + protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { 
 / / check if already checked and passed the file 
 final String fileName = file . getPath ( ) ; 
 final long timestamp = file . lastModified ( ) ; 
 @ @ - 209 , 16 + 208 , 11 @ @ public final class TreeWalker 
 catch ( final TokenStreamRecognitionException tre ) { 
 final String exceptionMsg = String . format ( msg , " TokenStreamRecognitionException " , 
 fileName ) ; 
 - LOG . error ( exceptionMsg ) ; 
 - final RecognitionException re = tre . recog ; 
 - final String message = re . getMessage ( ) ; 
 - getMessageCollector ( ) . add ( createLocalizedMessage ( message ) ) ; 
 + throw new CheckstyleException ( exceptionMsg , tre ) ; 
 } 
 - / / RecognitionException and any other ( need to check if needed ) 
 - catch ( Throwable ex ) { 
 + catch ( RecognitionException | TokenStreamException ex ) { 
 final String exceptionMsg = String . format ( msg , ex . getClass ( ) . getSimpleName ( ) , fileName ) ; 
 - LOG . error ( exceptionMsg , ex ) ; 
 - getMessageCollector ( ) . add ( createLocalizedMessage ( ex . getMessage ( ) ) ) ; 
 + throw new CheckstyleException ( exceptionMsg , ex ) ; 
 } 
 
 if ( cache ! = null & & getMessageCollector ( ) . size ( ) = = 0 ) { 
 @ @ - 227 , 22 + 221 , 6 @ @ public final class TreeWalker 
 } 
 
 / * * 
 - * Creates { @ link LocalizedMessage } object using default attributes . 
 - * @ param message 
 - * message that will be used for created object 
 - * @ return instance of created object 
 - * / 
 - private LocalizedMessage createLocalizedMessage ( String message ) { 
 - return new LocalizedMessage ( 
 - 0 , 
 - Definitions . CHECKSTYLE _ BUNDLE , 
 - " general . exception " , 
 - new String [ ] { message } , 
 - getId ( ) , 
 - getClass ( ) , null ) ; 
 - } 
 - 
 - / * * 
 * Register a check for a given configuration . 
 * @ param check the check to register 
 * @ throws CheckstyleException if an error occurs 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 index e906954 . . 24331aa 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 @ @ - 326 , 14 + 326 , 20 @ @ public class CheckstyleAntTask extends Task { 
 + " files " , Project . MSG _ INFO ) ; 
 log ( " Using configuration " + configLocation , Project . MSG _ VERBOSE ) ; 
 
 - final long processingStartTime = System . currentTimeMillis ( ) ; 
 - final int numErrs = checker . process ( files ) ; 
 - final long processingEndTime = System . currentTimeMillis ( ) ; 
 - log ( " To process the files took " + ( processingEndTime - processingStartTime ) + TIME _ SUFFIX , 
 - Project . MSG _ VERBOSE ) ; 
 + int numErrs = 0 ; 
 + 
 + try { 
 + final long processingStartTime = System . currentTimeMillis ( ) ; 
 + numErrs = checker . process ( files ) ; 
 + final long processingEndTime = System . currentTimeMillis ( ) ; 
 + log ( " To process the files took " + ( processingEndTime - processingStartTime ) 
 + + TIME _ SUFFIX , Project . MSG _ VERBOSE ) ; 
 + } 
 + catch ( CheckstyleException e ) { 
 + throw new BuildException ( " Unable to process files : " + files , e ) ; 
 + } 
 final int numWarnings = warningCounter . getCount ( ) ; 
 - final boolean ok = numErrs < = maxErrors 
 - & & numWarnings < = maxWarnings ; 
 + final boolean ok = numErrs < = maxErrors & & numWarnings < = maxWarnings ; 
 
 / / Handle the return status 
 if ( ! ok ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 index 24bd587 . . d3096d1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 @ @ - 50 , 8 + 50 , 10 @ @ public abstract class AbstractFileSetCheck 
 * Called to process a file that matches the specified file extensions . 
 * @ param file the file to be processed 
 * @ param lines an immutable list of the contents of the file . 
 + * @ throws CheckstyleException if error condition within Checkstyle occurs . 
 * / 
 - protected abstract void processFiltered ( File file , List < String > lines ) ; 
 + protected abstract void processFiltered ( File file , List < String > lines ) 
 + throws CheckstyleException ; 
 
 @ Override 
 public void init ( ) { 
 @ @ - 69 , 8 + 71 , 8 @ @ public abstract class AbstractFileSetCheck 
 } 
 
 @ Override 
 - public final SortedSet < LocalizedMessage > process ( File file , 
 - List < String > lines ) { 
 + public final SortedSet < LocalizedMessage > process ( File file , List < String > lines ) 
 + throws CheckstyleException { 
 messageCollector . reset ( ) ; 
 / / Process only what interested in 
 if ( CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java 
 index 46b3955 . . cf8e9b7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileSetCheck . java 
 @ @ - 70 , 8 + 70 , 9 @ @ public interface FileSetCheck 
 * @ param file the file to be processed 
 * @ param lines an immutable list of the contents of the file . 
 * @ return the sorted set of messages to be logged . 
 + * @ throws CheckstyleException if error condition within Checkstyle occurs 
 * / 
 - SortedSet < LocalizedMessage > process ( File file , List < String > lines ) ; 
 + SortedSet < LocalizedMessage > process ( File file , List < String > lines ) throws CheckstyleException ; 
 
 / * * 
 * Called when all the files have been processed . This is the time to 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index 4b19ff6 . . 0f22407 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 272 , 7 + 272 , 13 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 ArrayList < String > lines = new ArrayList < > ( ) ; 
 lines . add ( " classD a { } " ) ; 
 
 - treeWalker . processFiltered ( file , lines ) ; 
 + try { 
 + treeWalker . processFiltered ( file , lines ) ; 
 + } 
 + catch ( CheckstyleException exception ) { 
 + assertTrue ( exception . getMessage ( ) . contains ( 
 + " occurred during the analysis of file " ) ) ; 
 + } 
 } 
 
 @ Test 
 @ @ - 288 , 7 + 294 , 13 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 ArrayList < String > lines = new ArrayList < > ( ) ; 
 lines . add ( " class a % $ # { } " ) ; 
 
 - treeWalker . processFiltered ( file , lines ) ; 
 + try { 
 + treeWalker . processFiltered ( file , lines ) ; 
 + } 
 + catch ( CheckstyleException exception ) { 
 + assertTrue ( exception . getMessage ( ) . contains ( 
 + " TokenStreamRecognitionException occurred during the analysis of file " ) ) ; 
 + } 
 } 
 
 @ Test
