BLEU SCORE: 0.07768562846380175

TEST MSG: Issue # 4394 : rearranged pitest - checkstyle - api - filters profile
GENERATED MSG: Issue # 4367 : add pitest non - check code profiles

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 7f0fd8e . . 2276f69 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2123 , 7 + 2123 , 7 @ @ <nl> < / build > <nl> < / profile > <nl> < profile > <nl> - < id > pitest - checkstyle - api - filters < / id > <nl> + < id > pitest - checkstyle - api < / id > <nl> < build > <nl> < plugins > <nl> < plugin > <nl> @ @ - 2133 , 8 + 2133 , 6 @ @ <nl> < configuration > <nl> < targetClasses > <nl> < param > com . puppycrawl . tools . checkstyle . api . * < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . filefilters . * < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . filters . * < / param > <nl> < / targetClasses > <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . api . * < / param > <nl> @ @ - 2146 , 7 + 2144 , 45 @ @ <nl> < param > com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheckTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . checks . naming . ParameterNameCheckTest < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 90 < / mutationThreshold > <nl> + < mutationThreshold > 88 < / mutationThreshold > <nl> + < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> + < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> + < threads > $ { pitest . plugin . threads } < / threads > <nl> + < / configuration > <nl> + < / plugin > <nl> + < / plugins > <nl> + < / build > <nl> + < / profile > <nl> + < profile > <nl> + < id > pitest - checkstyle - filters < / id > <nl> + < build > <nl> + < plugins > <nl> + < plugin > <nl> + < groupId > org . pitest < / groupId > <nl> + < artifactId > pitest - maven < / artifactId > <nl> + < version > $ { pitest . plugin . version } < / version > <nl> + < configuration > <nl> + < targetClasses > <nl> + < param > com . puppycrawl . tools . checkstyle . filefilters . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . filters . * < / param > <nl> + < / targetClasses > <nl> + < targetTests > <nl> + < param > com . puppycrawl . tools . checkstyle . filefilters . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . filters . * < / param > <nl> + < / targetTests > <nl> + < excludedMethods > <nl> + < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4396 - - > <nl> + < param > compareTo < / param > <nl> + < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4396 - - > <nl> + < param > findNearestMatch < / param > <nl> + < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4396 - - > <nl> + < param > tagSuppressions < / param > <nl> + < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4396 - - > <nl> + < param > tagSuppressions < / param > <nl> + < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4396 - - > <nl> + < param > startElement < / param > <nl> + < / excludedMethods > <nl> + < mutationThreshold > 100 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / shippable . yml b / shippable . yml <nl> index f55eb14 . . 5529732 100644 <nl> - - - a / shippable . yml <nl> + + + b / shippable . yml <nl> @ @ - 9 , 7 + 9 , 8 @ @ env : <nl> - PROFILE = " - Ppitest - checkstyle - common , no - validations " <nl> - PROFILE = " - Ppitest - checkstyle - main , no - validations " <nl> - PROFILE = " - Ppitest - checkstyle - tree - walker , no - validations " <nl> - - PROFILE = " - Ppitest - checkstyle - api - filters , no - validations " <nl> + - PROFILE = " - Ppitest - checkstyle - api , no - validations " <nl> + - PROFILE = " - Ppitest - checkstyle - filters , no - validations " <nl> - PROFILE = " - Ppitest - checkstyle - utils , no - validations " <nl> - PROFILE = " - Ppitest - checks - annotation , no - validations " <nl> - PROFILE = " - Ppitest - checks - blocks , no - validations " <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> index 7ff3a58 . . a0d2556 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java <nl> @ @ - 333 , 7 + 333 , 7 @ @ public class SuppressWithNearbyCommentFilter <nl> throw new IllegalArgumentException ( " unable to parse influence from ' " + text <nl> + " ' using " + filter . influenceFormat , ex ) ; <nl> } <nl> - if ( influence > = 0 ) { <nl> + if ( influence > = 1 ) { <nl> firstLine = line ; <nl> lastLine = line + influence ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java <nl> index c71e130 . . 4e1851a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java <nl> @ @ - 259 , 6 + 259 , 25 @ @ public class SuppressWithNearbyCommentFilterTest <nl> } <nl> <nl> @ Test <nl> + public void testInfluenceFormat ( ) throws Exception { <nl> + final DefaultConfiguration filterConfig = <nl> + createFilterConfig ( SuppressWithNearbyCommentFilter . class ) ; <nl> + filterConfig . addAttribute ( " influenceFormat " , " 1 " ) ; <nl> + <nl> + final String [ ] suppressed = { <nl> + " 14 : 17 : Name ' A1 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 15 : 17 : Name ' A2 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 16 : 59 : Name ' A3 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 18 : 17 : Name ' B1 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 19 : 17 : Name ' B2 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 20 : 59 : Name ' B3 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 80 : 59 : Name ' A2 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 81 : 17 : Name ' A1 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + } ; <nl> + verifySuppressed ( filterConfig , suppressed ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testInvalidCheckFormat ( ) throws Exception { <nl> final DefaultConfiguration filterConfig = <nl> createFilterConfig ( SuppressWithNearbyCommentFilter . class ) ;
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheckTest . java <nl> index 00bfbce . . 857056c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheckTest . java <nl> @ @ - 37 , 7 + 37 , 9 @ @ public class PackageNameCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " naming " + File . separator + filename ) ; <nl> + + " naming " + File . separator <nl> + + " packagename " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 58 , 9 + 60 , 9 @ @ public class PackageNameCheckTest <nl> <nl> final String [ ] expected = { <nl> " 6 : 9 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , <nl> - " com . puppycrawl . tools . checkstyle . checks . naming " , pattern ) , <nl> + " com . puppycrawl . tools . checkstyle . checks . naming . packagename " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputPackageNameSimple . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 69 , 7 + 71 , 7 @ @ public class PackageNameCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( PackageNameCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputPackageNameSimple . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / packagename / InputPackageNameSimple . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / packagename / InputPackageNameSimple . java <nl> new file mode 100644 <nl> index 0000000 . . fea9d2a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / packagename / InputPackageNameSimple . java <nl> @ @ - 0 , 0 + 1 , 225 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : Feb - 2001 <nl> + / / Ignore error <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . packagename ; <nl> + import java . io . * ; <nl> + / * * <nl> + * Contains simple mistakes : <nl> + * - Long lines <nl> + * - Tabs <nl> + * - Format of variables and parameters <nl> + * - Order of modifiers <nl> + * @ author Oliver Burn <nl> + * * / <nl> + final class InputPackageNameSimple <nl> + { <nl> + / / Long line - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + / / Contains a tab - > 	 < - <nl> + / / Contains trailing whitespace - > <nl> + <nl> + / / Name format tests <nl> + / / <nl> + / * * Invalid format * * / <nl> + public static final int badConstant = 2 ; <nl> + / * * Valid format * * / <nl> + public static final int MAX _ ROWS = 2 ; <nl> + <nl> + / * * Invalid format * * / <nl> + private static int badStatic = 2 ; <nl> + / * * Valid format * * / <nl> + private static int sNumCreated = 0 ; <nl> + <nl> + / * * Invalid format * * / <nl> + private int badMember = 2 ; <nl> + / * * Valid format * * / <nl> + private int mNumCreated1 = 0 ; <nl> + / * * Valid format * * / <nl> + protected int mNumCreated2 = 0 ; <nl> + <nl> + / * * commas are wrong * * / <nl> + private int [ ] mInts = new int [ ] { 1 , 2 , 3 , <nl> + 4 } ; <nl> + <nl> + / / <nl> + / / Accessor tests <nl> + / / <nl> + / * * should be private * * / <nl> + public static int sTest1 ; <nl> + / * * should be private * * / <nl> + protected static int sTest3 ; <nl> + / * * should be private * * / <nl> + static int sTest2 ; <nl> + <nl> + / * * should be private * * / <nl> + int mTest1 ; <nl> + / * * should be private * * / <nl> + public int mTest2 ; <nl> + <nl> + / / <nl> + / / Parameter name format tests <nl> + / / <nl> + <nl> + / * * <nl> + * @ return hack <nl> + * @ param badFormat1 bad format <nl> + * @ param badFormat2 bad format <nl> + * @ param badFormat3 bad format <nl> + * @ throws java . lang . Exception abc <nl> + * * / <nl> + int test1 ( int badFormat1 , int badFormat2 , <nl> + final int badFormat3 ) <nl> + throws java . lang . Exception <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + / * * method that is 20 lines long * * / <nl> + private void longMethod ( ) <nl> + { <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + } <nl> + <nl> + / * * constructor that is 10 lines long * * / <nl> + private InputPackageNameSimple ( ) <nl> + { <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + } <nl> + <nl> + / * * test local variables * / <nl> + private void localVariables ( ) <nl> + { <nl> + / / normal decl <nl> + int abc = 0 ; <nl> + int ABC = 0 ; <nl> + <nl> + / / final decls <nl> + final int cde = 0 ; <nl> + final int CDE = 0 ; <nl> + <nl> + / / decl in for loop init statement <nl> + for ( int k = 0 ; k < 1 ; k + + ) <nl> + { <nl> + String innerBlockVariable = " " ; <nl> + } <nl> + for ( int I = 0 ; I < 1 ; I + + ) <nl> + { <nl> + String InnerBlockVariable = " " ; <nl> + } <nl> + } <nl> + <nl> + / * * test method pattern * / <nl> + void ALL _ UPPERCASE _ METHOD ( ) <nl> + { <nl> + } <nl> + <nl> + / * * test illegal constant * * / <nl> + private static final int BAD _ _ NAME = 3 ; <nl> + <nl> + / / A very , very long line that is OK because it matches the regexp " ^ . * is OK . * regexp . * $ " <nl> + / / long line that has a tab - > 	 < - and would be OK if tab counted as 1 char <nl> + / / tabs that count as one char because of their position - > 	 < - - > 	 < - , OK <nl> + <nl> + / * * some lines to test the error column after tabs * / <nl> + void errorColumnAfterTabs ( ) <nl> + { <nl> + / / with tab - width 8 all statements below start at the same column , <nl> + / / with different combinations of ' ' and ' \ t ' before the statement <nl> + int tab0 = 1 ; <nl> + 	 int tab1 = 1 ; <nl> + 	 int tab2 = 1 ; <nl> + 	 	 int tab3 = 1 ; <nl> + 	 	 int tab4 = 1 ; <nl> + 	 int tab5 = 1 ; <nl> + } <nl> + <nl> + / / FIXME : <nl> + / * FIXME : a <nl> + * FIXME : <nl> + * TODO <nl> + * / <nl> + / * NOTHING * / <nl> + / * YES * / / * FIXME : x * / / * YES ! ! * / <nl> + <nl> + / * * test long comments * * / <nl> + void veryLong ( ) <nl> + { <nl> + / * <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + enough talk * / <nl> + } <nl> + <nl> + / * * <nl> + * @ see to lazy to document all args . Testing excessive # args <nl> + * * / <nl> + void toManyArgs ( int aArg1 , int aArg2 , int aArg3 , int aArg4 , int aArg5 , <nl> + int aArg6 , int aArg7 , int aArg8 , int aArg9 ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + / * * Test class for variable naming in for each clauses . * / <nl> + class InputPackageNameSimple2 <nl> + { <nl> + / * * Some more Javadoc . * / <nl> + public void doSomething ( ) <nl> + { <nl> + / / " O " should be named " o " <nl> + for ( Object O : new java . util . ArrayList ( ) ) <nl> + { <nl> + <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * Test enum for member naming check * / <nl> + enum MyEnum1 <nl> + { <nl> + / * * ABC constant * / <nl> + ABC , <nl> + <nl> + / * * XYZ constant * / <nl> + XYZ ; <nl> + <nl> + / * * Should be mSomeMemeber * / <nl> + private int someMember ; <nl> + }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 7f0fd8e . . 2276f69 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2123 , 7 + 2123 , 7 @ @ 
 < / build > 
 < / profile > 
 < profile > 
 - < id > pitest - checkstyle - api - filters < / id > 
 + < id > pitest - checkstyle - api < / id > 
 < build > 
 < plugins > 
 < plugin > 
 @ @ - 2133 , 8 + 2133 , 6 @ @ 
 < configuration > 
 < targetClasses > 
 < param > com . puppycrawl . tools . checkstyle . api . * < / param > 
 - < param > com . puppycrawl . tools . checkstyle . filefilters . * < / param > 
 - < param > com . puppycrawl . tools . checkstyle . filters . * < / param > 
 < / targetClasses > 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . api . * < / param > 
 @ @ - 2146 , 7 + 2144 , 45 @ @ 
 < param > com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheckTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . checks . naming . ParameterNameCheckTest < / param > 
 < / targetTests > 
 - < mutationThreshold > 90 < / mutationThreshold > 
 + < mutationThreshold > 88 < / mutationThreshold > 
 + < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 + < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 + < threads > $ { pitest . plugin . threads } < / threads > 
 + < / configuration > 
 + < / plugin > 
 + < / plugins > 
 + < / build > 
 + < / profile > 
 + < profile > 
 + < id > pitest - checkstyle - filters < / id > 
 + < build > 
 + < plugins > 
 + < plugin > 
 + < groupId > org . pitest < / groupId > 
 + < artifactId > pitest - maven < / artifactId > 
 + < version > $ { pitest . plugin . version } < / version > 
 + < configuration > 
 + < targetClasses > 
 + < param > com . puppycrawl . tools . checkstyle . filefilters . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . filters . * < / param > 
 + < / targetClasses > 
 + < targetTests > 
 + < param > com . puppycrawl . tools . checkstyle . filefilters . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . filters . * < / param > 
 + < / targetTests > 
 + < excludedMethods > 
 + < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4396 - - > 
 + < param > compareTo < / param > 
 + < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4396 - - > 
 + < param > findNearestMatch < / param > 
 + < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4396 - - > 
 + < param > tagSuppressions < / param > 
 + < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4396 - - > 
 + < param > tagSuppressions < / param > 
 + < ! - - till https : / / github . com / checkstyle / checkstyle / issues / 4396 - - > 
 + < param > startElement < / param > 
 + < / excludedMethods > 
 + < mutationThreshold > 100 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / shippable . yml b / shippable . yml 
 index f55eb14 . . 5529732 100644 
 - - - a / shippable . yml 
 + + + b / shippable . yml 
 @ @ - 9 , 7 + 9 , 8 @ @ env : 
 - PROFILE = " - Ppitest - checkstyle - common , no - validations " 
 - PROFILE = " - Ppitest - checkstyle - main , no - validations " 
 - PROFILE = " - Ppitest - checkstyle - tree - walker , no - validations " 
 - - PROFILE = " - Ppitest - checkstyle - api - filters , no - validations " 
 + - PROFILE = " - Ppitest - checkstyle - api , no - validations " 
 + - PROFILE = " - Ppitest - checkstyle - filters , no - validations " 
 - PROFILE = " - Ppitest - checkstyle - utils , no - validations " 
 - PROFILE = " - Ppitest - checks - annotation , no - validations " 
 - PROFILE = " - Ppitest - checks - blocks , no - validations " 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 index 7ff3a58 . . a0d2556 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilter . java 
 @ @ - 333 , 7 + 333 , 7 @ @ public class SuppressWithNearbyCommentFilter 
 throw new IllegalArgumentException ( " unable to parse influence from ' " + text 
 + " ' using " + filter . influenceFormat , ex ) ; 
 } 
 - if ( influence > = 0 ) { 
 + if ( influence > = 1 ) { 
 firstLine = line ; 
 lastLine = line + influence ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java 
 index c71e130 . . 4e1851a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java 
 @ @ - 259 , 6 + 259 , 25 @ @ public class SuppressWithNearbyCommentFilterTest 
 } 
 
 @ Test 
 + public void testInfluenceFormat ( ) throws Exception { 
 + final DefaultConfiguration filterConfig = 
 + createFilterConfig ( SuppressWithNearbyCommentFilter . class ) ; 
 + filterConfig . addAttribute ( " influenceFormat " , " 1 " ) ; 
 + 
 + final String [ ] suppressed = { 
 + " 14 : 17 : Name ' A1 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 15 : 17 : Name ' A2 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 16 : 59 : Name ' A3 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 18 : 17 : Name ' B1 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 19 : 17 : Name ' B2 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 20 : 59 : Name ' B3 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 80 : 59 : Name ' A2 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 81 : 17 : Name ' A1 ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + } ; 
 + verifySuppressed ( filterConfig , suppressed ) ; 
 + } 
 + 
 + @ Test 
 public void testInvalidCheckFormat ( ) throws Exception { 
 final DefaultConfiguration filterConfig = 
 createFilterConfig ( SuppressWithNearbyCommentFilter . class ) ;

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheckTest . java 
 index 00bfbce . . 857056c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / PackageNameCheckTest . java 
 @ @ - 37 , 7 + 37 , 9 @ @ public class PackageNameCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " naming " + File . separator + filename ) ; 
 + + " naming " + File . separator 
 + + " packagename " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 58 , 9 + 60 , 9 @ @ public class PackageNameCheckTest 
 
 final String [ ] expected = { 
 " 6 : 9 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , 
 - " com . puppycrawl . tools . checkstyle . checks . naming " , pattern ) , 
 + " com . puppycrawl . tools . checkstyle . checks . naming . packagename " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputPackageNameSimple . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 69 , 7 + 71 , 7 @ @ public class PackageNameCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( PackageNameCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputPackageNameSimple . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / packagename / InputPackageNameSimple . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / packagename / InputPackageNameSimple . java 
 new file mode 100644 
 index 0000000 . . fea9d2a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / packagename / InputPackageNameSimple . java 
 @ @ - 0 , 0 + 1 , 225 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : Feb - 2001 
 + / / Ignore error 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . naming . packagename ; 
 + import java . io . * ; 
 + / * * 
 + * Contains simple mistakes : 
 + * - Long lines 
 + * - Tabs 
 + * - Format of variables and parameters 
 + * - Order of modifiers 
 + * @ author Oliver Burn 
 + * * / 
 + final class InputPackageNameSimple 
 + { 
 + / / Long line - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + / / Contains a tab - > 	 < - 
 + / / Contains trailing whitespace - > 
 + 
 + / / Name format tests 
 + / / 
 + / * * Invalid format * * / 
 + public static final int badConstant = 2 ; 
 + / * * Valid format * * / 
 + public static final int MAX _ ROWS = 2 ; 
 + 
 + / * * Invalid format * * / 
 + private static int badStatic = 2 ; 
 + / * * Valid format * * / 
 + private static int sNumCreated = 0 ; 
 + 
 + / * * Invalid format * * / 
 + private int badMember = 2 ; 
 + / * * Valid format * * / 
 + private int mNumCreated1 = 0 ; 
 + / * * Valid format * * / 
 + protected int mNumCreated2 = 0 ; 
 + 
 + / * * commas are wrong * * / 
 + private int [ ] mInts = new int [ ] { 1 , 2 , 3 , 
 + 4 } ; 
 + 
 + / / 
 + / / Accessor tests 
 + / / 
 + / * * should be private * * / 
 + public static int sTest1 ; 
 + / * * should be private * * / 
 + protected static int sTest3 ; 
 + / * * should be private * * / 
 + static int sTest2 ; 
 + 
 + / * * should be private * * / 
 + int mTest1 ; 
 + / * * should be private * * / 
 + public int mTest2 ; 
 + 
 + / / 
 + / / Parameter name format tests 
 + / / 
 + 
 + / * * 
 + * @ return hack 
 + * @ param badFormat1 bad format 
 + * @ param badFormat2 bad format 
 + * @ param badFormat3 bad format 
 + * @ throws java . lang . Exception abc 
 + * * / 
 + int test1 ( int badFormat1 , int badFormat2 , 
 + final int badFormat3 ) 
 + throws java . lang . Exception 
 + { 
 + return 0 ; 
 + } 
 + 
 + / * * method that is 20 lines long * * / 
 + private void longMethod ( ) 
 + { 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + } 
 + 
 + / * * constructor that is 10 lines long * * / 
 + private InputPackageNameSimple ( ) 
 + { 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + } 
 + 
 + / * * test local variables * / 
 + private void localVariables ( ) 
 + { 
 + / / normal decl 
 + int abc = 0 ; 
 + int ABC = 0 ; 
 + 
 + / / final decls 
 + final int cde = 0 ; 
 + final int CDE = 0 ; 
 + 
 + / / decl in for loop init statement 
 + for ( int k = 0 ; k < 1 ; k + + ) 
 + { 
 + String innerBlockVariable = " " ; 
 + } 
 + for ( int I = 0 ; I < 1 ; I + + ) 
 + { 
 + String InnerBlockVariable = " " ; 
 + } 
 + } 
 + 
 + / * * test method pattern * / 
 + void ALL _ UPPERCASE _ METHOD ( ) 
 + { 
 + } 
 + 
 + / * * test illegal constant * * / 
 + private static final int BAD _ _ NAME = 3 ; 
 + 
 + / / A very , very long line that is OK because it matches the regexp " ^ . * is OK . * regexp . * $ " 
 + / / long line that has a tab - > 	 < - and would be OK if tab counted as 1 char 
 + / / tabs that count as one char because of their position - > 	 < - - > 	 < - , OK 
 + 
 + / * * some lines to test the error column after tabs * / 
 + void errorColumnAfterTabs ( ) 
 + { 
 + / / with tab - width 8 all statements below start at the same column , 
 + / / with different combinations of ' ' and ' \ t ' before the statement 
 + int tab0 = 1 ; 
 + 	 int tab1 = 1 ; 
 + 	 int tab2 = 1 ; 
 + 	 	 int tab3 = 1 ; 
 + 	 	 int tab4 = 1 ; 
 + 	 int tab5 = 1 ; 
 + } 
 + 
 + / / FIXME : 
 + / * FIXME : a 
 + * FIXME : 
 + * TODO 
 + * / 
 + / * NOTHING * / 
 + / * YES * / / * FIXME : x * / / * YES ! ! * / 
 + 
 + / * * test long comments * * / 
 + void veryLong ( ) 
 + { 
 + / * 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + enough talk * / 
 + } 
 + 
 + / * * 
 + * @ see to lazy to document all args . Testing excessive # args 
 + * * / 
 + void toManyArgs ( int aArg1 , int aArg2 , int aArg3 , int aArg4 , int aArg5 , 
 + int aArg6 , int aArg7 , int aArg8 , int aArg9 ) 
 + { 
 + } 
 + } 
 + 
 + / * * Test class for variable naming in for each clauses . * / 
 + class InputPackageNameSimple2 
 + { 
 + / * * Some more Javadoc . * / 
 + public void doSomething ( ) 
 + { 
 + / / " O " should be named " o " 
 + for ( Object O : new java . util . ArrayList ( ) ) 
 + { 
 + 
 + } 
 + } 
 + } 
 + 
 + / * * Test enum for member naming check * / 
 + enum MyEnum1 
 + { 
 + / * * ABC constant * / 
 + ABC , 
 + 
 + / * * XYZ constant * / 
 + XYZ ; 
 + 
 + / * * Should be mSomeMemeber * / 
 + private int someMember ; 
 + }
