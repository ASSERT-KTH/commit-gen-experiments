BLEU SCORE: 0.02955926526467443

TEST MSG: Issue # 2161 : unify test input locations
GENERATED MSG: added check for equals ( ) vs . hashCode , RFE # 554373

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java <nl> index 8c689aa . . 3914925 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java <nl> @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . CovariantEqualsCheck . MSG _ KEY ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 29 , 6 + 32 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class CovariantEqualsCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testDefault ( ) <nl> throws Exception { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputCovariant . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputCovariant . java <nl> deleted file mode 100644 <nl> index 8c65791 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputCovariant . java <nl> + + + / dev / null <nl> @ @ - 1 , 141 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - / * * <nl> - * Test file for covariant equals methods . <nl> - * @ author Rick Giles <nl> - * / <nl> - public class InputCovariant <nl> - { <nl> - private class Inner <nl> - { <nl> - public boolean equals ( Inner aInner ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - private class Inner2 <nl> - { <nl> - public boolean equals ( Inner2 aInner2 ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - public boolean equals ( Object aObj ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - public boolean equals ( InputCovariant aInputCovariant ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - class InputCovariant2 <nl> - { <nl> - public boolean equals ( InputCovariant2 aInputCovariant2 ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - public boolean equals ( Object aObject ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - class InputCovariant3 <nl> - { <nl> - public boolean equals ( InputCovariant3 aInputCovariant3 ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - public boolean equals ( java . lang . Object aObject ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - class InputCovariant4 <nl> - { <nl> - public boolean equals ( int i ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - class Anonymous <nl> - { <nl> - Comparable comp = new Comparable ( ) <nl> - { <nl> - public int compareTo ( Object aObject ) <nl> - { <nl> - return 0 ; <nl> - } <nl> - public boolean equals ( String aString ) <nl> - { <nl> - return false ; <nl> - } <nl> - } ; <nl> - <nl> - public boolean equals ( Object aObject ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - public void method ( ) <nl> - { <nl> - Double d = new Double ( 1 ) ; <nl> - } <nl> - } <nl> - <nl> - abstract class InputCovariant5 <nl> - { <nl> - public abstract boolean equals ( InputCovariant4 aInputCovariant4 ) ; <nl> - } <nl> - <nl> - interface InputCovariant6 <nl> - { <nl> - public boolean equals ( InputCovariant5 aInputCovariant5 ) ; <nl> - } <nl> - <nl> - class InputGenericCovariant7 <nl> - { <nl> - public < A > boolean equals ( InputGenericCovariant7 aInputCovariant7 ) <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - public boolean equals ( Object aObject ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - class InputGenericCovariant8 <nl> - { <nl> - public < A > boolean equals ( InputGenericCovariant8 aInputCovariant8 ) <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - public boolean equals ( Object aObject ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - enum InputEnumCovariant { <nl> - EQUALS ; <nl> - <nl> - public boolean equals ( InputEnumCovariant inputEnumCovariant ) { <nl> - return false ; <nl> - } <nl> - <nl> - int equals ( Integer integer ) { <nl> - return 0 ; <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputCovariant . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputCovariant . java <nl> new file mode 100644 <nl> index 0000000 . . fdf7df0 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputCovariant . java <nl> @ @ - 0 , 0 + 1 , 141 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + / * * <nl> + * Test file for covariant equals methods . <nl> + * @ author Rick Giles <nl> + * / <nl> + public class InputCovariant <nl> + { <nl> + private class Inner <nl> + { <nl> + public boolean equals ( Inner aInner ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + private class Inner2 <nl> + { <nl> + public boolean equals ( Inner2 aInner2 ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public boolean equals ( Object aObj ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + public boolean equals ( InputCovariant aInputCovariant ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + class InputCovariant2 <nl> + { <nl> + public boolean equals ( InputCovariant2 aInputCovariant2 ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public boolean equals ( Object aObject ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + class InputCovariant3 <nl> + { <nl> + public boolean equals ( InputCovariant3 aInputCovariant3 ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public boolean equals ( java . lang . Object aObject ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + class InputCovariant4 <nl> + { <nl> + public boolean equals ( int i ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + class Anonymous <nl> + { <nl> + Comparable comp = new Comparable ( ) <nl> + { <nl> + public int compareTo ( Object aObject ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + public boolean equals ( String aString ) <nl> + { <nl> + return false ; <nl> + } <nl> + } ; <nl> + <nl> + public boolean equals ( Object aObject ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public void method ( ) <nl> + { <nl> + Double d = new Double ( 1 ) ; <nl> + } <nl> + } <nl> + <nl> + abstract class InputCovariant5 <nl> + { <nl> + public abstract boolean equals ( InputCovariant4 aInputCovariant4 ) ; <nl> + } <nl> + <nl> + interface InputCovariant6 <nl> + { <nl> + public boolean equals ( InputCovariant5 aInputCovariant5 ) ; <nl> + } <nl> + <nl> + class InputGenericCovariant7 <nl> + { <nl> + public < A > boolean equals ( InputGenericCovariant7 aInputCovariant7 ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + public boolean equals ( Object aObject ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + class InputGenericCovariant8 <nl> + { <nl> + public < A > boolean equals ( InputGenericCovariant8 aInputCovariant8 ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + public boolean equals ( Object aObject ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + enum InputEnumCovariant { <nl> + EQUALS ; <nl> + <nl> + public boolean equals ( InputEnumCovariant inputEnumCovariant ) { <nl> + return false ; <nl> + } <nl> + <nl> + int equals ( Integer integer ) { <nl> + return 0 ; <nl> + } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 9cb78b7 . . 38ce1f8 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 186 , 6 + 186 , 14 @ @ <nl> < ! - - TEST TARGETS - - > <nl> < ! - - - - > <nl> <nl> + < ! - - Run the GUI - - > <nl> + < target name = " run . gui " depends = " compile . checkstyle " <nl> + description = " Run the GUI for displaying a tree " > <nl> + < java classname = " com . puppycrawl . tools . checkstyle . gui . Main " <nl> + fork = " yes " classpathref = " run . classpath " > <nl> + < / java > <nl> + < / target > <nl> + <nl> < ! - - display a specified file in a UI frame - - > <nl> < target name = " run . treeviewer " depends = " compile . checkstyle " <nl> description = " Display a specified file in GUI tree " > <nl> @ @ - 252 , 7 + 260 , 7 @ @ <nl> < checkstyle properties = " docs / checkstyle . rules " > <nl> < fileset dir = " src / checkstyle " <nl> includes = " * * / * . java " <nl> - excludes = " * * / Generated * . java , * * / Java * . java " / > <nl> + excludes = " * * / Generated * . java , * * / Java * . java , * * / gui / * " / > <nl> < formatter type = " plain " / > <nl> < formatter type = " xml " toFile = " target / cs _ errors . xml " / > <nl> < classpath refid = " run . classpath " / >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java 
 index 8c689aa . . 3914925 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java 
 @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . CovariantEqualsCheck . MSG _ KEY ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 @ @ - 29 , 6 + 32 , 12 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class CovariantEqualsCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testDefault ( ) 
 throws Exception { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputCovariant . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputCovariant . java 
 deleted file mode 100644 
 index 8c65791 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputCovariant . java 
 + + + / dev / null 
 @ @ - 1 , 141 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - / * * 
 - * Test file for covariant equals methods . 
 - * @ author Rick Giles 
 - * / 
 - public class InputCovariant 
 - { 
 - private class Inner 
 - { 
 - public boolean equals ( Inner aInner ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - private class Inner2 
 - { 
 - public boolean equals ( Inner2 aInner2 ) 
 - { 
 - return false ; 
 - } 
 - 
 - public boolean equals ( Object aObj ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - public boolean equals ( InputCovariant aInputCovariant ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - class InputCovariant2 
 - { 
 - public boolean equals ( InputCovariant2 aInputCovariant2 ) 
 - { 
 - return false ; 
 - } 
 - 
 - public boolean equals ( Object aObject ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - class InputCovariant3 
 - { 
 - public boolean equals ( InputCovariant3 aInputCovariant3 ) 
 - { 
 - return false ; 
 - } 
 - 
 - public boolean equals ( java . lang . Object aObject ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - class InputCovariant4 
 - { 
 - public boolean equals ( int i ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - class Anonymous 
 - { 
 - Comparable comp = new Comparable ( ) 
 - { 
 - public int compareTo ( Object aObject ) 
 - { 
 - return 0 ; 
 - } 
 - public boolean equals ( String aString ) 
 - { 
 - return false ; 
 - } 
 - } ; 
 - 
 - public boolean equals ( Object aObject ) 
 - { 
 - return false ; 
 - } 
 - 
 - public void method ( ) 
 - { 
 - Double d = new Double ( 1 ) ; 
 - } 
 - } 
 - 
 - abstract class InputCovariant5 
 - { 
 - public abstract boolean equals ( InputCovariant4 aInputCovariant4 ) ; 
 - } 
 - 
 - interface InputCovariant6 
 - { 
 - public boolean equals ( InputCovariant5 aInputCovariant5 ) ; 
 - } 
 - 
 - class InputGenericCovariant7 
 - { 
 - public < A > boolean equals ( InputGenericCovariant7 aInputCovariant7 ) 
 - { 
 - return true ; 
 - } 
 - 
 - public boolean equals ( Object aObject ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - class InputGenericCovariant8 
 - { 
 - public < A > boolean equals ( InputGenericCovariant8 aInputCovariant8 ) 
 - { 
 - return true ; 
 - } 
 - 
 - public boolean equals ( Object aObject ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - enum InputEnumCovariant { 
 - EQUALS ; 
 - 
 - public boolean equals ( InputEnumCovariant inputEnumCovariant ) { 
 - return false ; 
 - } 
 - 
 - int equals ( Integer integer ) { 
 - return 0 ; 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputCovariant . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputCovariant . java 
 new file mode 100644 
 index 0000000 . . fdf7df0 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputCovariant . java 
 @ @ - 0 , 0 + 1 , 141 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + / * * 
 + * Test file for covariant equals methods . 
 + * @ author Rick Giles 
 + * / 
 + public class InputCovariant 
 + { 
 + private class Inner 
 + { 
 + public boolean equals ( Inner aInner ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + private class Inner2 
 + { 
 + public boolean equals ( Inner2 aInner2 ) 
 + { 
 + return false ; 
 + } 
 + 
 + public boolean equals ( Object aObj ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + public boolean equals ( InputCovariant aInputCovariant ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + class InputCovariant2 
 + { 
 + public boolean equals ( InputCovariant2 aInputCovariant2 ) 
 + { 
 + return false ; 
 + } 
 + 
 + public boolean equals ( Object aObject ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + class InputCovariant3 
 + { 
 + public boolean equals ( InputCovariant3 aInputCovariant3 ) 
 + { 
 + return false ; 
 + } 
 + 
 + public boolean equals ( java . lang . Object aObject ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + class InputCovariant4 
 + { 
 + public boolean equals ( int i ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + class Anonymous 
 + { 
 + Comparable comp = new Comparable ( ) 
 + { 
 + public int compareTo ( Object aObject ) 
 + { 
 + return 0 ; 
 + } 
 + public boolean equals ( String aString ) 
 + { 
 + return false ; 
 + } 
 + } ; 
 + 
 + public boolean equals ( Object aObject ) 
 + { 
 + return false ; 
 + } 
 + 
 + public void method ( ) 
 + { 
 + Double d = new Double ( 1 ) ; 
 + } 
 + } 
 + 
 + abstract class InputCovariant5 
 + { 
 + public abstract boolean equals ( InputCovariant4 aInputCovariant4 ) ; 
 + } 
 + 
 + interface InputCovariant6 
 + { 
 + public boolean equals ( InputCovariant5 aInputCovariant5 ) ; 
 + } 
 + 
 + class InputGenericCovariant7 
 + { 
 + public < A > boolean equals ( InputGenericCovariant7 aInputCovariant7 ) 
 + { 
 + return true ; 
 + } 
 + 
 + public boolean equals ( Object aObject ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + class InputGenericCovariant8 
 + { 
 + public < A > boolean equals ( InputGenericCovariant8 aInputCovariant8 ) 
 + { 
 + return true ; 
 + } 
 + 
 + public boolean equals ( Object aObject ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + enum InputEnumCovariant { 
 + EQUALS ; 
 + 
 + public boolean equals ( InputEnumCovariant inputEnumCovariant ) { 
 + return false ; 
 + } 
 + 
 + int equals ( Integer integer ) { 
 + return 0 ; 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index 9cb78b7 . . 38ce1f8 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 186 , 6 + 186 , 14 @ @ 
 < ! - - TEST TARGETS - - > 
 < ! - - - - > 
 
 + < ! - - Run the GUI - - > 
 + < target name = " run . gui " depends = " compile . checkstyle " 
 + description = " Run the GUI for displaying a tree " > 
 + < java classname = " com . puppycrawl . tools . checkstyle . gui . Main " 
 + fork = " yes " classpathref = " run . classpath " > 
 + < / java > 
 + < / target > 
 + 
 < ! - - display a specified file in a UI frame - - > 
 < target name = " run . treeviewer " depends = " compile . checkstyle " 
 description = " Display a specified file in GUI tree " > 
 @ @ - 252 , 7 + 260 , 7 @ @ 
 < checkstyle properties = " docs / checkstyle . rules " > 
 < fileset dir = " src / checkstyle " 
 includes = " * * / * . java " 
 - excludes = " * * / Generated * . java , * * / Java * . java " / > 
 + excludes = " * * / Generated * . java , * * / Java * . java , * * / gui / * " / > 
 < formatter type = " plain " / > 
 < formatter type = " xml " toFile = " target / cs _ errors . xml " / > 
 < classpath refid = " run . classpath " / >
