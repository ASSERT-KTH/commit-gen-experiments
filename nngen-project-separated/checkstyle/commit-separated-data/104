BLEU SCORE: 0.09425159511373678

TEST MSG: Issue # 6350 : kill remaining whitespace REMOVE _ CONDITIONALS mutation
GENERATED MSG: Issue # 6289 : resolved final CONSTRUCTOR _ CALLS mutation

TEST DIFF (one line): diff - - git a / . ci / pitest . sh b / . ci / pitest . sh <nl> index d686f4b . . 3c67759 100755 <nl> - - - a / . ci / pitest . sh <nl> + + + b / . ci / pitest . sh <nl> @ @ - 33 , 7 + 33 , 7 @ @ case $ 1 in <nl> <nl> pitest - annotation | pitest - design | pitest - header | pitest - imports \ <nl> | pitest - metrics | pitest - modifier | pitest - naming \ <nl> - | pitest - regexp | pitest - sizes | pitest - ant \ <nl> + | pitest - regexp | pitest - sizes | pitest - whitespace | pitest - ant \ <nl> | pitest - api | pitest - common | pitest - filters | pitest - main \ <nl> | pitest - packagenamesloader | pitest - tree - walker | pitest - utils \ <nl> | pitest - xpath | pitest - common - 2 | pitest - misc | pitest - blocks ) <nl> @ @ - 42 , 15 + 42 , 6 @ @ pitest - annotation | pitest - design | pitest - header | pitest - imports \ <nl> checkPitestReport " $ { ignoredItems [ @ ] } " <nl> ; ; <nl> <nl> - pitest - whitespace ) <nl> - mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; <nl> - declare - a ignoredItems = ( <nl> - # till https : / / github . com / checkstyle / checkstyle / issues / 6350 <nl> - " EmptyLineSeparatorCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( getFileContents ( ) . getFileName ( ) . endsWith ( & # 34 ; package - info . java & # 34 ; ) ) { < / span > < / pre > < / td > < / tr > " <nl> - ) ; <nl> - checkPitestReport " $ { ignoredItems [ @ ] } " <nl> - ; ; <nl> - <nl> pitest - coding ) <nl> mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; <nl> declare - a ignoredItems = ( <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> index f830336 . . c976150 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> @ @ - 278 , 6 + 278 , 17 @ @ public class EmptyLineSeparatorCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testNonPackageInfoWithJavadocBeforePackage ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( EmptyLineSeparatorCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 3 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " package " ) , <nl> + } ; <nl> + verify ( checkConfig , <nl> + getPath ( " InputEmptyLineSeparatorNonPackageInfoWithJavadocBeforePackage . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testClassOnly ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( EmptyLineSeparatorCheck . class ) ; <nl> checkConfig . addAttribute ( " tokens " , " CLASS _ DEF " ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorNonPackageInfoWithJavadocBeforePackage . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorNonPackageInfoWithJavadocBeforePackage . java <nl> new file mode 100644 <nl> index 0000000 . . 2fe0621 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorNonPackageInfoWithJavadocBeforePackage . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + / * * Comment1 <nl> + Comment2 * / <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . emptylineseparator ; <nl> + <nl> + public class InputEmptyLineSeparatorNonPackageInfoWithJavadocBeforePackage { <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> index 529f658 . . ec932f8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> @ @ - 47 , 11 + 47 , 9 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { <nl> public static final String MSG _ KEY = " multiple . string . literal " ; <nl> <nl> / * * <nl> - * The found strings and their positions . <nl> - * { @ code < String , ArrayList > } , with the ArrayList containing StringInfo <nl> - * objects . <nl> + * The found strings and their tokens . <nl> * / <nl> - private final Map < String , List < StringInfo > > stringMap = new HashMap < > ( ) ; <nl> + private final Map < String , List < DetailAST > > stringMap = new HashMap < > ( ) ; <nl> <nl> / * * <nl> * Marks the TokenTypes where duplicate strings should be ignored . <nl> @ @ - 132 , 14 + 130 , 12 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { <nl> if ( ! isInIgnoreOccurrenceContext ( ast ) ) { <nl> final String currentString = ast . getText ( ) ; <nl> if ( ignoreStringsRegexp = = null | | ! ignoreStringsRegexp . matcher ( currentString ) . find ( ) ) { <nl> - List < StringInfo > hitList = stringMap . get ( currentString ) ; <nl> + List < DetailAST > hitList = stringMap . get ( currentString ) ; <nl> if ( hitList = = null ) { <nl> hitList = new ArrayList < > ( ) ; <nl> stringMap . put ( currentString , hitList ) ; <nl> } <nl> - final int line = ast . getLineNo ( ) ; <nl> - final int col = ast . getColumnNo ( ) ; <nl> - hitList . add ( new StringInfo ( line , col ) ) ; <nl> + hitList . add ( ast ) ; <nl> } <nl> } <nl> } <nl> @ @ - 173 , 57 + 169 , 13 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { <nl> <nl> @ Override <nl> public void finishTree ( DetailAST rootAST ) { <nl> - for ( Map . Entry < String , List < StringInfo > > stringListEntry : stringMap . entrySet ( ) ) { <nl> - final List < StringInfo > hits = stringListEntry . getValue ( ) ; <nl> + for ( Map . Entry < String , List < DetailAST > > stringListEntry : stringMap . entrySet ( ) ) { <nl> + final List < DetailAST > hits = stringListEntry . getValue ( ) ; <nl> if ( hits . size ( ) > allowedDuplicates ) { <nl> - final StringInfo firstFinding = hits . get ( 0 ) ; <nl> - final int line = firstFinding . getLine ( ) ; <nl> - final int col = firstFinding . getCol ( ) ; <nl> - log ( line , col , MSG _ KEY , stringListEntry . getKey ( ) , hits . size ( ) ) ; <nl> + final DetailAST firstFinding = hits . get ( 0 ) ; <nl> + log ( firstFinding , MSG _ KEY , stringListEntry . getKey ( ) , hits . size ( ) ) ; <nl> } <nl> } <nl> } <nl> <nl> - / * * <nl> - * This class contains information about where a string was found . <nl> - * / <nl> - private static final class StringInfo { <nl> - <nl> - / * * <nl> - * Line of finding . <nl> - * / <nl> - private final int line ; <nl> - / * * <nl> - * Column of finding . <nl> - * / <nl> - private final int col ; <nl> - <nl> - / * * <nl> - * Creates information about a string position . <nl> - * @ param line int <nl> - * @ param col int <nl> - * / <nl> - StringInfo ( int line , int col ) { <nl> - this . line = line ; <nl> - this . col = col ; <nl> - } <nl> - <nl> - / * * <nl> - * The line where a string was found . <nl> - * @ return int Line of the string . <nl> - * / <nl> - private int getLine ( ) { <nl> - return line ; <nl> - } <nl> - <nl> - / * * <nl> - * The column where a string was found . <nl> - * @ return int Column of the string . <nl> - * / <nl> - private int getCol ( ) { <nl> - return col ; <nl> - } <nl> - <nl> - } <nl> - <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java <nl> index dbaaa32 . . 3022259 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java <nl> @ @ - 226 , 7 + 226 , 7 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { <nl> * / <nl> private void visitClassDef ( DetailAST classDef ) { <nl> final String className = classDef . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> - fileContext . createNewClassContext ( className , classDef . getLineNo ( ) , classDef . getColumnNo ( ) ) ; <nl> + fileContext . createNewClassContext ( className , classDef ) ; <nl> } <nl> <nl> / * * Restores previous context . * / <nl> @ @ - 250 , 7 + 250 , 7 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { <nl> private String packageName = " " ; <nl> <nl> / * * Current context . * / <nl> - private ClassContext classContext = new ClassContext ( this , " " , 0 , 0 ) ; <nl> + private ClassContext classContext = new ClassContext ( this , " " , null ) ; <nl> <nl> / * * <nl> * Retrieves current file package name . <nl> @ @ - 295 , 12 + 295 , 11 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { <nl> / * * <nl> * Creates new inner class context with given name and location . <nl> * @ param className The class name . <nl> - * @ param lineNo The class line number . <nl> - * @ param columnNo The class column number . <nl> + * @ param ast The class ast . <nl> * / <nl> - public void createNewClassContext ( String className , int lineNo , int columnNo ) { <nl> + public void createNewClassContext ( String className , DetailAST ast ) { <nl> classesContexts . push ( classContext ) ; <nl> - classContext = new ClassContext ( this , className , lineNo , columnNo ) ; <nl> + classContext = new ClassContext ( this , className , ast ) ; <nl> } <nl> <nl> / * * Restores previous context . * / <nl> @ @ - 361 , 23 + 360 , 19 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { <nl> / * * Own class name . * / <nl> private final String className ; <nl> / * Location of own class . ( Used to log violations ) * / <nl> - / * * Line number of class definition . * / <nl> - private final int lineNo ; <nl> - / * * Column number of class definition . * / <nl> - private final int columnNo ; <nl> + / * * AST of class definition . * / <nl> + private final DetailAST classAst ; <nl> <nl> / * * <nl> * Create new context associated with given class . <nl> * @ param parentContext Parent file context . <nl> * @ param className name of the given class . <nl> - * @ param lineNo line of class definition . <nl> - * @ param columnNo column of class definition . <nl> + * @ param ast ast of class definition . <nl> * / <nl> - ClassContext ( FileContext parentContext , String className , int lineNo , int columnNo ) { <nl> + ClassContext ( FileContext parentContext , String className , DetailAST ast ) { <nl> this . parentContext = parentContext ; <nl> this . className = className ; <nl> - this . lineNo = lineNo ; <nl> - this . columnNo = columnNo ; <nl> + classAst = ast ; <nl> } <nl> <nl> / * * <nl> @ @ - 436 , 7 + 431 , 7 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { <nl> referencedClassNames . remove ( parentContext . getPackageName ( ) + DOT + className ) ; <nl> <nl> if ( referencedClassNames . size ( ) > max ) { <nl> - log ( lineNo , columnNo , getLogMessageId ( ) , <nl> + log ( classAst , getLogMessageId ( ) , <nl> referencedClassNames . size ( ) , max , <nl> referencedClassNames . toString ( ) ) ; <nl> } <nl> diff - - git a / src / xdocs / config _ filters . xml b / src / xdocs / config _ filters . xml <nl> index 94c0b1e . . cc3865e 100644 <nl> - - - a / src / xdocs / config _ filters . xml <nl> + + + b / src / xdocs / config _ filters . xml <nl> @ @ - 671 , 6 + 671 , 8 @ @ public class UserService { <nl> < li > AvoidNestedBlocksCheck < / li > <nl> < li > BooleanExpressionComplexityCheck < / li > <nl> < li > CatchParameterNameCheck < / li > <nl> + < li > ClassDataAbstractionCouplingCheck < / li > <nl> + < li > ClassFanOutComplexityCheck < / li > <nl> < li > ClassTypeParameterNameCheck < / li > <nl> < li > ConstantNameCheck < / li > <nl> < li > CovariantEqualsCheck < / li > <nl> @ @ - 693 , 6 + 695 , 7 @ @ public class UserService { <nl> < li > IllegalInstantiationCheck < / li > <nl> < li > IllegalTokenCheck < / li > <nl> < li > IllegalTokenTextCheck < / li > <nl> + < li > IllegalTypeCheck < / li > <nl> < li > InnerAssignmentCheck < / li > <nl> < li > InnerTypeLastCheck < / li > <nl> < li > InterfaceTypeParameterNameCheck < / li > <nl> @ @ - 712 , 6 + 715 , 7 @ @ public class UserService { <nl> < li > MethodTypeParameterNameCheck < / li > <nl> < li > ModifiedControlVariableCheck < / li > <nl> < li > ModifierOrderCheck < / li > <nl> + < li > MultipleStringLiteralsCheck < / li > <nl> < li > MultipleVariableDeclarationsCheck < / li > <nl> < li > MutableExceptionCheck < / li > <nl> < li > NestedForDepthCheck < / li > <nl> @ @ - 721 , 6 + 725 , 7 @ @ public class UserService { <nl> < li > OneStatementPerLineCheck < / li > <nl> < li > OperatorWrapCheck < / li > <nl> < li > OuterTypeNumberCheck < / li > <nl> + < li > PackageNameCheck < / li > <nl> < li > ParameterAssignmentCheck < / li > <nl> < li > ParameterNameCheck < / li > <nl> < li > ParameterNumberCheck < / li > <nl> @ @ - 739 , 6 + 744 , 7 @ @ public class UserService { <nl> < li > SuppressWarningsCheck < / li > <nl> < li > ThrowsCountCheck < / li > <nl> < li > TypeNameCheck < / li > <nl> + < li > UnusedImportsCheck < / li > <nl> < li > VisibilityModifierCheck < / li > <nl> < / ul > <nl> < p >

TEST DIFF:
diff - - git a / . ci / pitest . sh b / . ci / pitest . sh 
 index d686f4b . . 3c67759 100755 
 - - - a / . ci / pitest . sh 
 + + + b / . ci / pitest . sh 
 @ @ - 33 , 7 + 33 , 7 @ @ case $ 1 in 
 
 pitest - annotation | pitest - design | pitest - header | pitest - imports \ 
 | pitest - metrics | pitest - modifier | pitest - naming \ 
 - | pitest - regexp | pitest - sizes | pitest - ant \ 
 + | pitest - regexp | pitest - sizes | pitest - whitespace | pitest - ant \ 
 | pitest - api | pitest - common | pitest - filters | pitest - main \ 
 | pitest - packagenamesloader | pitest - tree - walker | pitest - utils \ 
 | pitest - xpath | pitest - common - 2 | pitest - misc | pitest - blocks ) 
 @ @ - 42 , 15 + 42 , 6 @ @ pitest - annotation | pitest - design | pitest - header | pitest - imports \ 
 checkPitestReport " $ { ignoredItems [ @ ] } " 
 ; ; 
 
 - pitest - whitespace ) 
 - mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; 
 - declare - a ignoredItems = ( 
 - # till https : / / github . com / checkstyle / checkstyle / issues / 6350 
 - " EmptyLineSeparatorCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( getFileContents ( ) . getFileName ( ) . endsWith ( & # 34 ; package - info . java & # 34 ; ) ) { < / span > < / pre > < / td > < / tr > " 
 - ) ; 
 - checkPitestReport " $ { ignoredItems [ @ ] } " 
 - ; ; 
 - 
 pitest - coding ) 
 mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; 
 declare - a ignoredItems = ( 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 index f830336 . . c976150 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 @ @ - 278 , 6 + 278 , 17 @ @ public class EmptyLineSeparatorCheckTest 
 } 
 
 @ Test 
 + public void testNonPackageInfoWithJavadocBeforePackage ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( EmptyLineSeparatorCheck . class ) ; 
 + final String [ ] expected = { 
 + " 3 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " package " ) , 
 + } ; 
 + verify ( checkConfig , 
 + getPath ( " InputEmptyLineSeparatorNonPackageInfoWithJavadocBeforePackage . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 public void testClassOnly ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( EmptyLineSeparatorCheck . class ) ; 
 checkConfig . addAttribute ( " tokens " , " CLASS _ DEF " ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorNonPackageInfoWithJavadocBeforePackage . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorNonPackageInfoWithJavadocBeforePackage . java 
 new file mode 100644 
 index 0000000 . . 2fe0621 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / emptylineseparator / InputEmptyLineSeparatorNonPackageInfoWithJavadocBeforePackage . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + / * * Comment1 
 + Comment2 * / 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . emptylineseparator ; 
 + 
 + public class InputEmptyLineSeparatorNonPackageInfoWithJavadocBeforePackage { 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 index 529f658 . . ec932f8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 @ @ - 47 , 11 + 47 , 9 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { 
 public static final String MSG _ KEY = " multiple . string . literal " ; 
 
 / * * 
 - * The found strings and their positions . 
 - * { @ code < String , ArrayList > } , with the ArrayList containing StringInfo 
 - * objects . 
 + * The found strings and their tokens . 
 * / 
 - private final Map < String , List < StringInfo > > stringMap = new HashMap < > ( ) ; 
 + private final Map < String , List < DetailAST > > stringMap = new HashMap < > ( ) ; 
 
 / * * 
 * Marks the TokenTypes where duplicate strings should be ignored . 
 @ @ - 132 , 14 + 130 , 12 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { 
 if ( ! isInIgnoreOccurrenceContext ( ast ) ) { 
 final String currentString = ast . getText ( ) ; 
 if ( ignoreStringsRegexp = = null | | ! ignoreStringsRegexp . matcher ( currentString ) . find ( ) ) { 
 - List < StringInfo > hitList = stringMap . get ( currentString ) ; 
 + List < DetailAST > hitList = stringMap . get ( currentString ) ; 
 if ( hitList = = null ) { 
 hitList = new ArrayList < > ( ) ; 
 stringMap . put ( currentString , hitList ) ; 
 } 
 - final int line = ast . getLineNo ( ) ; 
 - final int col = ast . getColumnNo ( ) ; 
 - hitList . add ( new StringInfo ( line , col ) ) ; 
 + hitList . add ( ast ) ; 
 } 
 } 
 } 
 @ @ - 173 , 57 + 169 , 13 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { 
 
 @ Override 
 public void finishTree ( DetailAST rootAST ) { 
 - for ( Map . Entry < String , List < StringInfo > > stringListEntry : stringMap . entrySet ( ) ) { 
 - final List < StringInfo > hits = stringListEntry . getValue ( ) ; 
 + for ( Map . Entry < String , List < DetailAST > > stringListEntry : stringMap . entrySet ( ) ) { 
 + final List < DetailAST > hits = stringListEntry . getValue ( ) ; 
 if ( hits . size ( ) > allowedDuplicates ) { 
 - final StringInfo firstFinding = hits . get ( 0 ) ; 
 - final int line = firstFinding . getLine ( ) ; 
 - final int col = firstFinding . getCol ( ) ; 
 - log ( line , col , MSG _ KEY , stringListEntry . getKey ( ) , hits . size ( ) ) ; 
 + final DetailAST firstFinding = hits . get ( 0 ) ; 
 + log ( firstFinding , MSG _ KEY , stringListEntry . getKey ( ) , hits . size ( ) ) ; 
 } 
 } 
 } 
 
 - / * * 
 - * This class contains information about where a string was found . 
 - * / 
 - private static final class StringInfo { 
 - 
 - / * * 
 - * Line of finding . 
 - * / 
 - private final int line ; 
 - / * * 
 - * Column of finding . 
 - * / 
 - private final int col ; 
 - 
 - / * * 
 - * Creates information about a string position . 
 - * @ param line int 
 - * @ param col int 
 - * / 
 - StringInfo ( int line , int col ) { 
 - this . line = line ; 
 - this . col = col ; 
 - } 
 - 
 - / * * 
 - * The line where a string was found . 
 - * @ return int Line of the string . 
 - * / 
 - private int getLine ( ) { 
 - return line ; 
 - } 
 - 
 - / * * 
 - * The column where a string was found . 
 - * @ return int Column of the string . 
 - * / 
 - private int getCol ( ) { 
 - return col ; 
 - } 
 - 
 - } 
 - 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java 
 index dbaaa32 . . 3022259 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractClassCouplingCheck . java 
 @ @ - 226 , 7 + 226 , 7 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { 
 * / 
 private void visitClassDef ( DetailAST classDef ) { 
 final String className = classDef . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 - fileContext . createNewClassContext ( className , classDef . getLineNo ( ) , classDef . getColumnNo ( ) ) ; 
 + fileContext . createNewClassContext ( className , classDef ) ; 
 } 
 
 / * * Restores previous context . * / 
 @ @ - 250 , 7 + 250 , 7 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { 
 private String packageName = " " ; 
 
 / * * Current context . * / 
 - private ClassContext classContext = new ClassContext ( this , " " , 0 , 0 ) ; 
 + private ClassContext classContext = new ClassContext ( this , " " , null ) ; 
 
 / * * 
 * Retrieves current file package name . 
 @ @ - 295 , 12 + 295 , 11 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { 
 / * * 
 * Creates new inner class context with given name and location . 
 * @ param className The class name . 
 - * @ param lineNo The class line number . 
 - * @ param columnNo The class column number . 
 + * @ param ast The class ast . 
 * / 
 - public void createNewClassContext ( String className , int lineNo , int columnNo ) { 
 + public void createNewClassContext ( String className , DetailAST ast ) { 
 classesContexts . push ( classContext ) ; 
 - classContext = new ClassContext ( this , className , lineNo , columnNo ) ; 
 + classContext = new ClassContext ( this , className , ast ) ; 
 } 
 
 / * * Restores previous context . * / 
 @ @ - 361 , 23 + 360 , 19 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { 
 / * * Own class name . * / 
 private final String className ; 
 / * Location of own class . ( Used to log violations ) * / 
 - / * * Line number of class definition . * / 
 - private final int lineNo ; 
 - / * * Column number of class definition . * / 
 - private final int columnNo ; 
 + / * * AST of class definition . * / 
 + private final DetailAST classAst ; 
 
 / * * 
 * Create new context associated with given class . 
 * @ param parentContext Parent file context . 
 * @ param className name of the given class . 
 - * @ param lineNo line of class definition . 
 - * @ param columnNo column of class definition . 
 + * @ param ast ast of class definition . 
 * / 
 - ClassContext ( FileContext parentContext , String className , int lineNo , int columnNo ) { 
 + ClassContext ( FileContext parentContext , String className , DetailAST ast ) { 
 this . parentContext = parentContext ; 
 this . className = className ; 
 - this . lineNo = lineNo ; 
 - this . columnNo = columnNo ; 
 + classAst = ast ; 
 } 
 
 / * * 
 @ @ - 436 , 7 + 431 , 7 @ @ public abstract class AbstractClassCouplingCheck extends AbstractCheck { 
 referencedClassNames . remove ( parentContext . getPackageName ( ) + DOT + className ) ; 
 
 if ( referencedClassNames . size ( ) > max ) { 
 - log ( lineNo , columnNo , getLogMessageId ( ) , 
 + log ( classAst , getLogMessageId ( ) , 
 referencedClassNames . size ( ) , max , 
 referencedClassNames . toString ( ) ) ; 
 } 
 diff - - git a / src / xdocs / config _ filters . xml b / src / xdocs / config _ filters . xml 
 index 94c0b1e . . cc3865e 100644 
 - - - a / src / xdocs / config _ filters . xml 
 + + + b / src / xdocs / config _ filters . xml 
 @ @ - 671 , 6 + 671 , 8 @ @ public class UserService { 
 < li > AvoidNestedBlocksCheck < / li > 
 < li > BooleanExpressionComplexityCheck < / li > 
 < li > CatchParameterNameCheck < / li > 
 + < li > ClassDataAbstractionCouplingCheck < / li > 
 + < li > ClassFanOutComplexityCheck < / li > 
 < li > ClassTypeParameterNameCheck < / li > 
 < li > ConstantNameCheck < / li > 
 < li > CovariantEqualsCheck < / li > 
 @ @ - 693 , 6 + 695 , 7 @ @ public class UserService { 
 < li > IllegalInstantiationCheck < / li > 
 < li > IllegalTokenCheck < / li > 
 < li > IllegalTokenTextCheck < / li > 
 + < li > IllegalTypeCheck < / li > 
 < li > InnerAssignmentCheck < / li > 
 < li > InnerTypeLastCheck < / li > 
 < li > InterfaceTypeParameterNameCheck < / li > 
 @ @ - 712 , 6 + 715 , 7 @ @ public class UserService { 
 < li > MethodTypeParameterNameCheck < / li > 
 < li > ModifiedControlVariableCheck < / li > 
 < li > ModifierOrderCheck < / li > 
 + < li > MultipleStringLiteralsCheck < / li > 
 < li > MultipleVariableDeclarationsCheck < / li > 
 < li > MutableExceptionCheck < / li > 
 < li > NestedForDepthCheck < / li > 
 @ @ - 721 , 6 + 725 , 7 @ @ public class UserService { 
 < li > OneStatementPerLineCheck < / li > 
 < li > OperatorWrapCheck < / li > 
 < li > OuterTypeNumberCheck < / li > 
 + < li > PackageNameCheck < / li > 
 < li > ParameterAssignmentCheck < / li > 
 < li > ParameterNameCheck < / li > 
 < li > ParameterNumberCheck < / li > 
 @ @ - 739 , 6 + 744 , 7 @ @ public class UserService { 
 < li > SuppressWarningsCheck < / li > 
 < li > ThrowsCountCheck < / li > 
 < li > TypeNameCheck < / li > 
 + < li > UnusedImportsCheck < / li > 
 < li > VisibilityModifierCheck < / li > 
 < / ul > 
 < p >
