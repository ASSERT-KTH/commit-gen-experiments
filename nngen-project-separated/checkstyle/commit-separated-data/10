BLEU SCORE: 0.8801117367933934

TEST MSG: Issue # 6586 : aligned javadoc / xdoc for IllegalCatch
GENERATED MSG: Issue # 6586 : aligned javadoc / xdoc for IllegalInstantiation

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java <nl> index c2fd8f9 . . 737b117 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java <nl> @ @ - 33 , 8 + 33 , 31 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; <nl> <nl> / * * <nl> - * Catching java . lang . Exception , java . lang . Error or java . lang . RuntimeException <nl> - * is almost never acceptable . <nl> + * < p > <nl> + * Checks that certain exception types do not appear in a { @ code catch } statement . <nl> + * < / p > <nl> + * < p > <nl> + * Rationale : catching { @ code java . lang . Exception } , { @ code java . lang . Error } or <nl> + * { @ code java . lang . RuntimeException } is almost never acceptable . <nl> + * Novice developers often simply catch Exception in an attempt to handle <nl> + * multiple exception classes . This unfortunately leads to code that inadvertently <nl> + * catches { @ code NullPointerException } , { @ code OutOfMemoryError } , etc . <nl> + * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code illegalClassNames } - Specify exception class names to reject . <nl> + * Default value is { @ code java . lang . Throwable , RuntimeException , Error , Throwable , <nl> + * java . lang . Error , java . lang . RuntimeException , Exception , java . lang . Exception } . <nl> + * < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * To configure the check : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; IllegalCatch & quot ; / & gt ; <nl> + * < / pre > <nl> + * <nl> + * @ since 3 . 2 <nl> * / <nl> @ StatelessCheck <nl> public final class IllegalCatchCheck extends AbstractCheck { <nl> @ @ - 45 , 13 + 68 , 13 @ @ public final class IllegalCatchCheck extends AbstractCheck { <nl> * / <nl> public static final String MSG _ KEY = " illegal . catch " ; <nl> <nl> - / * * Illegal class names . * / <nl> + / * * Specify exception class names to reject . * / <nl> private final Set < String > illegalClassNames = Arrays . stream ( new String [ ] { " Exception " , " Error " , <nl> " RuntimeException " , " Throwable " , " java . lang . Error " , " java . lang . Exception " , <nl> " java . lang . RuntimeException " , " java . lang . Throwable " , } ) . collect ( Collectors . toSet ( ) ) ; <nl> <nl> / * * <nl> - * Set the list of illegal classes . <nl> + * Setter to specify exception class names to reject . <nl> * <nl> * @ param classNames <nl> * array of illegal exception classes <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index a747583 . . 47446bd 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 93 , 6 + 93 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " ExplicitInitialization " , <nl> " FallThrough " , <nl> " FinalLocalVariable " , <nl> + " IllegalCatch " , <nl> " IllegalInstantiation " , <nl> " IllegalThrows " , <nl> " IllegalTokenText " , <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 0747c25 . . e71adfb 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 1542 , 19 + 1542 , 20 @ @ class SomeClass <nl> < / section > <nl> <nl> < section name = " IllegalCatch " > <nl> + < p > Since Checkstyle 3 . 2 < / p > <nl> < subsection name = " Description " id = " IllegalCatch _ Description " > <nl> - < p > Since Checkstyle 3 . 2 < / p > <nl> < p > <nl> Checks that certain exception types do not appear in a < code > catch < / code > statement . <nl> < / p > <nl> <nl> < p > <nl> Rationale : <nl> - Catching java . lang . Exception , java . lang . Error or <nl> - java . lang . RuntimeException is almost never acceptable . <nl> + catching < code > java . lang . Exception < / code > , < code > java . lang . Error < / code > or <nl> + < code > java . lang . RuntimeException < / code > is almost never acceptable . <nl> Novice developers often simply catch Exception in an <nl> attempt to handle multiple exception classes . This unfortunately <nl> - leads to code that inadvertently catches NullPointerException , OutOfMemoryError , etc . <nl> + leads to code that inadvertently catches < code > NullPointerException < / code > , <nl> + < code > OutOfMemoryError < / code > , etc . <nl> < / p > <nl> < / subsection > <nl> <nl> @ @ - 1569 , 7 + 1570 , 7 @ @ class SomeClass <nl> < / tr > <nl> < tr > <nl> < td > illegalClassNames < / td > <nl> - < td > exception class names to reject < / td > <nl> + < td > Specify exception class names to reject . < / td > <nl> < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > <nl> < td > < code > java . lang . Throwable , RuntimeException , Error , Throwable , java . lang . Error , <nl> java . lang . RuntimeException , Exception , java . lang . Exception < / code > < / td >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> index a06ba24 . . 5a31318 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> @ @ - 110 , 7 + 110 , 7 @ @ public class SuppressWarningsCheck extends AbstractCheck { <nl> " java . lang . " + SUPPRESS _ WARNINGS ; <nl> <nl> / * * The regexp to match against . * / <nl> - private Pattern format = Pattern . compile ( " ^ $ | ^ \ \ s + $ " ) ; <nl> + private Pattern format = Pattern . compile ( " ^ \ \ s * + $ " ) ; <nl> <nl> / * * <nl> * Set the format for the specified regular expression . <nl> diff - - git a / src / xdocs / config _ annotation . xml b / src / xdocs / config _ annotation . xml <nl> index 3ae3fb1 . . e9be909 100644 <nl> - - - a / src / xdocs / config _ annotation . xml <nl> + + + b / src / xdocs / config _ annotation . xml <nl> @ @ - 814 , 7 + 814 , 7 @ @ public static final int COUNTER = 10 ; / / violation as javadoc exists <nl> < a href = " property _ types . html # regexp " > Regular Expression < / a > <nl> < / td > <nl> < td > <nl> - < code > " ^ $ | ^ \ s + $ " < / code > <nl> + < code > " ^ \ s * + $ " < / code > <nl> < / td > <nl> < td > 5 . 0 < / td > <nl> < / tr >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java 
 index c2fd8f9 . . 737b117 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheck . java 
 @ @ - 33 , 8 + 33 , 31 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; 
 
 / * * 
 - * Catching java . lang . Exception , java . lang . Error or java . lang . RuntimeException 
 - * is almost never acceptable . 
 + * < p > 
 + * Checks that certain exception types do not appear in a { @ code catch } statement . 
 + * < / p > 
 + * < p > 
 + * Rationale : catching { @ code java . lang . Exception } , { @ code java . lang . Error } or 
 + * { @ code java . lang . RuntimeException } is almost never acceptable . 
 + * Novice developers often simply catch Exception in an attempt to handle 
 + * multiple exception classes . This unfortunately leads to code that inadvertently 
 + * catches { @ code NullPointerException } , { @ code OutOfMemoryError } , etc . 
 + * < / p > 
 + * < ul > 
 + * < li > 
 + * Property { @ code illegalClassNames } - Specify exception class names to reject . 
 + * Default value is { @ code java . lang . Throwable , RuntimeException , Error , Throwable , 
 + * java . lang . Error , java . lang . RuntimeException , Exception , java . lang . Exception } . 
 + * < / li > 
 + * < / ul > 
 + * < p > 
 + * To configure the check : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; IllegalCatch & quot ; / & gt ; 
 + * < / pre > 
 + * 
 + * @ since 3 . 2 
 * / 
 @ StatelessCheck 
 public final class IllegalCatchCheck extends AbstractCheck { 
 @ @ - 45 , 13 + 68 , 13 @ @ public final class IllegalCatchCheck extends AbstractCheck { 
 * / 
 public static final String MSG _ KEY = " illegal . catch " ; 
 
 - / * * Illegal class names . * / 
 + / * * Specify exception class names to reject . * / 
 private final Set < String > illegalClassNames = Arrays . stream ( new String [ ] { " Exception " , " Error " , 
 " RuntimeException " , " Throwable " , " java . lang . Error " , " java . lang . Exception " , 
 " java . lang . RuntimeException " , " java . lang . Throwable " , } ) . collect ( Collectors . toSet ( ) ) ; 
 
 / * * 
 - * Set the list of illegal classes . 
 + * Setter to specify exception class names to reject . 
 * 
 * @ param classNames 
 * array of illegal exception classes 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index a747583 . . 47446bd 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 93 , 6 + 93 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " ExplicitInitialization " , 
 " FallThrough " , 
 " FinalLocalVariable " , 
 + " IllegalCatch " , 
 " IllegalInstantiation " , 
 " IllegalThrows " , 
 " IllegalTokenText " , 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 0747c25 . . e71adfb 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 1542 , 19 + 1542 , 20 @ @ class SomeClass 
 < / section > 
 
 < section name = " IllegalCatch " > 
 + < p > Since Checkstyle 3 . 2 < / p > 
 < subsection name = " Description " id = " IllegalCatch _ Description " > 
 - < p > Since Checkstyle 3 . 2 < / p > 
 < p > 
 Checks that certain exception types do not appear in a < code > catch < / code > statement . 
 < / p > 
 
 < p > 
 Rationale : 
 - Catching java . lang . Exception , java . lang . Error or 
 - java . lang . RuntimeException is almost never acceptable . 
 + catching < code > java . lang . Exception < / code > , < code > java . lang . Error < / code > or 
 + < code > java . lang . RuntimeException < / code > is almost never acceptable . 
 Novice developers often simply catch Exception in an 
 attempt to handle multiple exception classes . This unfortunately 
 - leads to code that inadvertently catches NullPointerException , OutOfMemoryError , etc . 
 + leads to code that inadvertently catches < code > NullPointerException < / code > , 
 + < code > OutOfMemoryError < / code > , etc . 
 < / p > 
 < / subsection > 
 
 @ @ - 1569 , 7 + 1570 , 7 @ @ class SomeClass 
 < / tr > 
 < tr > 
 < td > illegalClassNames < / td > 
 - < td > exception class names to reject < / td > 
 + < td > Specify exception class names to reject . < / td > 
 < td > < a href = " property _ types . html # stringSet " > String Set < / a > < / td > 
 < td > < code > java . lang . Throwable , RuntimeException , Error , Throwable , java . lang . Error , 
 java . lang . RuntimeException , Exception , java . lang . Exception < / code > < / td >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 index a06ba24 . . 5a31318 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 @ @ - 110 , 7 + 110 , 7 @ @ public class SuppressWarningsCheck extends AbstractCheck { 
 " java . lang . " + SUPPRESS _ WARNINGS ; 
 
 / * * The regexp to match against . * / 
 - private Pattern format = Pattern . compile ( " ^ $ | ^ \ \ s + $ " ) ; 
 + private Pattern format = Pattern . compile ( " ^ \ \ s * + $ " ) ; 
 
 / * * 
 * Set the format for the specified regular expression . 
 diff - - git a / src / xdocs / config _ annotation . xml b / src / xdocs / config _ annotation . xml 
 index 3ae3fb1 . . e9be909 100644 
 - - - a / src / xdocs / config _ annotation . xml 
 + + + b / src / xdocs / config _ annotation . xml 
 @ @ - 814 , 7 + 814 , 7 @ @ public static final int COUNTER = 10 ; / / violation as javadoc exists 
 < a href = " property _ types . html # regexp " > Regular Expression < / a > 
 < / td > 
 < td > 
 - < code > " ^ $ | ^ \ s + $ " < / code > 
 + < code > " ^ \ s * + $ " < / code > 
 < / td > 
 < td > 5 . 0 < / td > 
 < / tr >
