BLEU SCORE: 0.031251907639724415

TEST MSG: Issue # 5278 : fix NullPointerException when relative path is used to run checkstyle CLI
GENERATED MSG: NullPointerException at java . util . regex . Pattern , fixes # 1224 ; from

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java <nl> index c2f9623 . . 5671589 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java <nl> @ @ - 285 , 7 + 285 , 7 @ @ public class RegexpOnFilenameCheck extends AbstractFileSetCheck { <nl> * / <nl> private static String getFolderPath ( File file ) throws CheckstyleException { <nl> try { <nl> - return file . getParentFile ( ) . getCanonicalPath ( ) ; <nl> + return file . getCanonicalFile ( ) . getParent ( ) ; <nl> } <nl> catch ( IOException ex ) { <nl> throw new CheckstyleException ( " unable to create canonical path names for " <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java <nl> index 0ced080 . . 7350d89 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java <nl> @ @ - 23 , 6 + 23 , 8 @ @ import static com . puppycrawl . tools . checkstyle . checks . regexp . RegexpOnFilenameChec <nl> import static com . puppycrawl . tools . checkstyle . checks . regexp . RegexpOnFilenameCheck . MSG _ MISMATCH ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> + import static org . mockito . Mockito . spy ; <nl> + import static org . mockito . Mockito . when ; <nl> <nl> import java . io . File ; <nl> import java . util . regex . Pattern ; <nl> @ @ - 251 , 4 + 253 , 23 @ @ public class RegexpOnFilenameCheckTest extends AbstractModuleTestSupport { <nl> ex . getMessage ( ) ) ; <nl> } <nl> } <nl> + <nl> + / * * <nl> + * Test require readable file with no parent to be used . <nl> + * Usage of Mockito . spy ( ) is the only way to satisfy these requirements <nl> + * without the need to create new file in current working directory . <nl> + * <nl> + * @ throws Exception if error occurs <nl> + * / <nl> + @ Test <nl> + public void testWithFileWithoutParent ( ) throws Exception { <nl> + final DefaultConfiguration moduleConfig = createModuleConfig ( RegexpOnFilenameCheck . class ) ; <nl> + final File fileWithoutParent = spy ( new File ( getPath ( " package - info . java " ) ) ) ; <nl> + when ( fileWithoutParent . getParent ( ) ) . thenReturn ( null ) ; <nl> + when ( fileWithoutParent . getParentFile ( ) ) . thenReturn ( null ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( createChecker ( moduleConfig ) , <nl> + new File [ ] { fileWithoutParent } , <nl> + getPath ( " package - info . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexponfilename / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexponfilename / package - info . java <nl> new file mode 100644 <nl> index 0000000 . . 2218226 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexponfilename / package - info . java <nl> @ @ - 0 , 0 + 1 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . regexp . regexponfilename ;
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java <nl> index 94ef42b . . d023a99 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> * < p > <nl> - * Restricts throws statements to a specified count ( default = 1 ) . <nl> + * Restricts throws statements to a specified count ( default = 4 ) . <nl> * Methods with " Override " or " java . lang . Override " annotation are skipped <nl> * from validation as current class cannot change signature of these methods . <nl> * < / p > <nl> @ @ - 35 , 11 + 35 , 16 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * a method to throw too many differently rooted <nl> * exceptions makes exception handling onerous and leads <nl> * to poor programming practices such as catch <nl> - * ( Exception ) . This check forces developers to put <nl> - * exceptions into a hierarchy such that in the simplest <nl> + * ( Exception ) . 4 is the empirical value which is based <nl> + * on reports that we had for the ThrowsCountCheck over big projects <nl> + * such as OpenJDK . This check also forces developers to put exceptions <nl> + * into a hierarchy such that in the simplest <nl> * case , only one type of exception need be checked for by <nl> * a caller but allows any sub - classes to be caught <nl> - * specifically if necessary . <nl> + * specifically if necessary . For more information on rules <nl> + * for the exceptions and their issues , see Effective Java : <nl> + * Programming Language Guide Second Edition <nl> + * by Joshua Bloch pages 264 - 273 . <nl> * < / p > <nl> * < p > <nl> * < b > ignorePrivateMethods < / b > - allows to skip private methods as they do <nl> @ @ - 56 , 7 + 61 , 7 @ @ public final class ThrowsCountCheck extends Check { <nl> public static final String MSG _ KEY = " throws . count " ; <nl> <nl> / * * default value of max property * / <nl> - private static final int DEFAULT _ MAX = 1 ; <nl> + private static final int DEFAULT _ MAX = 4 ; <nl> <nl> / * * whether private methods must be ignored * * / <nl> private boolean ignorePrivateMethods = true ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> index 4783dbe . . d6ea257 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> @ @ - 24 , 13 + 24 , 12 @ @ import antlr . CommonHiddenStreamToken ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> - import java . io . File ; <nl> - <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - <nl> import org . junit . Test ; <nl> <nl> + import java . io . File ; <nl> + <nl> import static com . puppycrawl . tools . checkstyle . checks . design . ThrowsCountCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> @ @ - 42 , 10 + 41 , 10 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { <nl> DefaultConfiguration checkConfig = createCheckConfig ( ThrowsCountCheck . class ) ; <nl> <nl> String [ ] expected = { <nl> - " 14 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , <nl> - " 18 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , <nl> - " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 3 , 1 ) , <nl> - " 48 : 43 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , <nl> + " 17 : 20 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , <nl> + " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , <nl> + " 27 : 20 : " + getCheckMessage ( MSG _ KEY , 6 , 4 ) , <nl> + " 55 : 43 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; <nl> @ @ - 54 , 10 + 53 , 10 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testMax ( ) throws Exception { <nl> DefaultConfiguration checkConfig = createCheckConfig ( ThrowsCountCheck . class ) ; <nl> - checkConfig . addAttribute ( " max " , " 2 " ) ; <nl> + checkConfig . addAttribute ( " max " , " 5 " ) ; <nl> <nl> String [ ] expected = { <nl> - " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 3 , 2 ) , <nl> + " 27 : 20 : " + getCheckMessage ( MSG _ KEY , 6 , 5 ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; <nl> @ @ - 96 , 11 + 95 , 11 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { <nl> DefaultConfiguration checkConfig = createCheckConfig ( ThrowsCountCheck . class ) ; <nl> checkConfig . addAttribute ( " ignorePrivateMethods " , " false " ) ; <nl> String [ ] expected = { <nl> - " 14 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , <nl> - " 18 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , <nl> - " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 3 , 1 ) , <nl> - " 29 : 28 : " + getCheckMessage ( MSG _ KEY , 3 , 1 ) , <nl> - " 48 : 43 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , <nl> + " 17 : 20 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , <nl> + " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , <nl> + " 27 : 20 : " + getCheckMessage ( MSG _ KEY , 6 , 4 ) , <nl> + " 35 : 28 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , <nl> + " 55 : 43 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java <nl> index 5024e71 . . bfbb74a 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java <nl> @ @ - 1 , 6 + 1 , 9 @ @ <nl> package com . puppycrawl . tools . checkstyle . design ; <nl> <nl> import java . awt . AWTException ; <nl> + import java . io . EOFException ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . sql . SQLException ; <nl> <nl> public class InputThrowsCount { <nl> void method1 ( ) throws Exception <nl> @ @ - 11 , 22 + 14 , 26 @ @ public class InputThrowsCount { <nl> { <nl> } <nl> <nl> - void method3 ( ) throws Exception , AWTException <nl> + void method3 ( ) throws Exception , AWTException , SQLException , <nl> + FileNotFoundException , EOFException <nl> { <nl> } <nl> <nl> - void method4 ( ) throws Exception , java . awt . AWTException <nl> + void method4 ( ) throws Exception , java . awt . AWTException , java . sql . SQLException , <nl> + java . io . FileNotFoundException , java . io . EOFException <nl> { <nl> } <nl> <nl> - void method5 ( ) throws Exception , AWTException , Throwable <nl> + void method5 ( ) throws Exception , AWTException , Throwable , SQLException , <nl> + FileNotFoundException , EOFException <nl> { <nl> } <nl> <nl> void method6 ( ) { <nl> } <nl> <nl> - private void method7 ( ) throws Exception , AWTException , Throwable { <nl> + private void method7 ( ) throws Exception , AWTException , SQLException , <nl> + FileNotFoundException , EOFException { <nl> } <nl> } <nl> <nl> @ @ - 41 , 11 + 48 , 12 @ @ class SubClass extends InputThrowsCount { <nl> } <nl> <nl> @ Override <nl> - void method5 ( ) throws Exception , AWTException , Throwable { <nl> + void method5 ( ) throws Exception , AWTException , Throwable { <nl> } <nl> <nl> @ SuppressWarnings ( " deprecation " ) <nl> - final void method2 ( Object . . . objects ) throws Exception , AWTException { <nl> + final void method2 ( Object . . . objects ) throws Exception , AWTException , SQLException , <nl> + FileNotFoundException , EOFException { <nl> } <nl> <nl> @ java . lang . Override <nl> diff - - git a / src / xdocs / checks . xml b / src / xdocs / checks . xml <nl> index ba7b17b . . d1eb749 100644 <nl> - - - a / src / xdocs / checks . xml <nl> + + + b / src / xdocs / checks . xml <nl> @ @ - 713 , 7 + 713 , 7 @ @ <nl> < tr > <nl> < td > < a href = " config _ design . html # ThrowsCount " > ThrowsCount < / a > < / td > <nl> < td > <nl> - Restricts throws statements to a specified count ( default = 1 ) . < / td > <nl> + Restricts throws statements to a specified count ( default = 4 ) . < / td > <nl> < / tr > <nl> < tr > <nl> < td > < a href = " config _ misc . html # TodoComment " > TodoComment < / a > < / td > <nl> diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml <nl> index f423f8c . . 581049b 100644 <nl> - - - a / src / xdocs / config _ design . xml <nl> + + + b / src / xdocs / config _ design . xml <nl> @ @ - 579 , 7 + 579 , 7 @ @ public class StringUtils / / not final to allow subclassing <nl> < section name = " ThrowsCount " > <nl> < subsection name = " Description " > <nl> < p > <nl> - Restricts throws statements to a specified count ( 1 by default ) . <nl> + Restricts throws statements to a specified count ( 4 by default ) . <nl> Methods with " Override " or " java . lang . Override " annotation are skipped <nl> from validation as current class cannot change signature of these methods . <nl> < / p > <nl> @ @ - 588 , 10 + 588 , 15 @ @ public class StringUtils / / not final to allow subclassing <nl> Rationale : Exceptions form part of a method ' s interface . Declaring a <nl> method to throw too many differently rooted exceptions makes <nl> exception handling onerous and leads to poor programming practices <nl> - such as writing code like < code > catch ( Exception ex ) < / code > . This check forces developers to put <nl> - exceptions into a hierarchy such that in the simplest case , only one <nl> - type of exception need be checked for by a caller but any <nl> - subclasses can be caught specifically if necessary . <nl> + such as writing code like < code > catch ( Exception ex ) < / code > . <nl> + 4 is the empirical value which is based on reports that we had for <nl> + the ThrowsCountCheck over big projects such as OpenJDK . <nl> + This check also forces developers to put exceptions into a hierarchy <nl> + such that in the simplest case , only one type of exception need be <nl> + checked for by a caller but any subclasses can be caught specifically <nl> + if necessary . For more information on rules for the exceptions and <nl> + their issues , see Effective Java : Programming Language Guide <nl> + Second Edition by Joshua Bloch pages 264 - 273 . <nl> < / p > <nl> <nl> < p > <nl> @ @ - 612 , 7 + 617 , 7 @ @ public class StringUtils / / not final to allow subclassing <nl> < td > max < / td > <nl> < td > maximum allowed number of throws statements < / td > <nl> < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > <nl> - < td > < code > 1 < / code > < / td > <nl> + < td > < code > 4 < / code > < / td > <nl> < / tr > <nl> < tr > <nl> < td > ignorePrivateMethods < / td >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java 
 index c2f9623 . . 5671589 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheck . java 
 @ @ - 285 , 7 + 285 , 7 @ @ public class RegexpOnFilenameCheck extends AbstractFileSetCheck { 
 * / 
 private static String getFolderPath ( File file ) throws CheckstyleException { 
 try { 
 - return file . getParentFile ( ) . getCanonicalPath ( ) ; 
 + return file . getCanonicalFile ( ) . getParent ( ) ; 
 } 
 catch ( IOException ex ) { 
 throw new CheckstyleException ( " unable to create canonical path names for " 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java 
 index 0ced080 . . 7350d89 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java 
 @ @ - 23 , 6 + 23 , 8 @ @ import static com . puppycrawl . tools . checkstyle . checks . regexp . RegexpOnFilenameChec 
 import static com . puppycrawl . tools . checkstyle . checks . regexp . RegexpOnFilenameCheck . MSG _ MISMATCH ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 + import static org . mockito . Mockito . spy ; 
 + import static org . mockito . Mockito . when ; 
 
 import java . io . File ; 
 import java . util . regex . Pattern ; 
 @ @ - 251 , 4 + 253 , 23 @ @ public class RegexpOnFilenameCheckTest extends AbstractModuleTestSupport { 
 ex . getMessage ( ) ) ; 
 } 
 } 
 + 
 + / * * 
 + * Test require readable file with no parent to be used . 
 + * Usage of Mockito . spy ( ) is the only way to satisfy these requirements 
 + * without the need to create new file in current working directory . 
 + * 
 + * @ throws Exception if error occurs 
 + * / 
 + @ Test 
 + public void testWithFileWithoutParent ( ) throws Exception { 
 + final DefaultConfiguration moduleConfig = createModuleConfig ( RegexpOnFilenameCheck . class ) ; 
 + final File fileWithoutParent = spy ( new File ( getPath ( " package - info . java " ) ) ) ; 
 + when ( fileWithoutParent . getParent ( ) ) . thenReturn ( null ) ; 
 + when ( fileWithoutParent . getParentFile ( ) ) . thenReturn ( null ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( createChecker ( moduleConfig ) , 
 + new File [ ] { fileWithoutParent } , 
 + getPath ( " package - info . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexponfilename / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexponfilename / package - info . java 
 new file mode 100644 
 index 0000000 . . 2218226 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexponfilename / package - info . java 
 @ @ - 0 , 0 + 1 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . regexp . regexponfilename ;

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java 
 index 94ef42b . . d023a99 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java 
 @ @ - 25 , 7 + 25 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 * < p > 
 - * Restricts throws statements to a specified count ( default = 1 ) . 
 + * Restricts throws statements to a specified count ( default = 4 ) . 
 * Methods with " Override " or " java . lang . Override " annotation are skipped 
 * from validation as current class cannot change signature of these methods . 
 * < / p > 
 @ @ - 35 , 11 + 35 , 16 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * a method to throw too many differently rooted 
 * exceptions makes exception handling onerous and leads 
 * to poor programming practices such as catch 
 - * ( Exception ) . This check forces developers to put 
 - * exceptions into a hierarchy such that in the simplest 
 + * ( Exception ) . 4 is the empirical value which is based 
 + * on reports that we had for the ThrowsCountCheck over big projects 
 + * such as OpenJDK . This check also forces developers to put exceptions 
 + * into a hierarchy such that in the simplest 
 * case , only one type of exception need be checked for by 
 * a caller but allows any sub - classes to be caught 
 - * specifically if necessary . 
 + * specifically if necessary . For more information on rules 
 + * for the exceptions and their issues , see Effective Java : 
 + * Programming Language Guide Second Edition 
 + * by Joshua Bloch pages 264 - 273 . 
 * < / p > 
 * < p > 
 * < b > ignorePrivateMethods < / b > - allows to skip private methods as they do 
 @ @ - 56 , 7 + 61 , 7 @ @ public final class ThrowsCountCheck extends Check { 
 public static final String MSG _ KEY = " throws . count " ; 
 
 / * * default value of max property * / 
 - private static final int DEFAULT _ MAX = 1 ; 
 + private static final int DEFAULT _ MAX = 4 ; 
 
 / * * whether private methods must be ignored * * / 
 private boolean ignorePrivateMethods = true ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 index 4783dbe . . d6ea257 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 @ @ - 24 , 13 + 24 , 12 @ @ import antlr . CommonHiddenStreamToken ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 - import java . io . File ; 
 - 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - 
 import org . junit . Test ; 
 
 + import java . io . File ; 
 + 
 import static com . puppycrawl . tools . checkstyle . checks . design . ThrowsCountCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 @ @ - 42 , 10 + 41 , 10 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { 
 DefaultConfiguration checkConfig = createCheckConfig ( ThrowsCountCheck . class ) ; 
 
 String [ ] expected = { 
 - " 14 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , 
 - " 18 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , 
 - " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 3 , 1 ) , 
 - " 48 : 43 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , 
 + " 17 : 20 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , 
 + " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , 
 + " 27 : 20 : " + getCheckMessage ( MSG _ KEY , 6 , 4 ) , 
 + " 55 : 43 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; 
 @ @ - 54 , 10 + 53 , 10 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { 
 @ Test 
 public void testMax ( ) throws Exception { 
 DefaultConfiguration checkConfig = createCheckConfig ( ThrowsCountCheck . class ) ; 
 - checkConfig . addAttribute ( " max " , " 2 " ) ; 
 + checkConfig . addAttribute ( " max " , " 5 " ) ; 
 
 String [ ] expected = { 
 - " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 3 , 2 ) , 
 + " 27 : 20 : " + getCheckMessage ( MSG _ KEY , 6 , 5 ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; 
 @ @ - 96 , 11 + 95 , 11 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { 
 DefaultConfiguration checkConfig = createCheckConfig ( ThrowsCountCheck . class ) ; 
 checkConfig . addAttribute ( " ignorePrivateMethods " , " false " ) ; 
 String [ ] expected = { 
 - " 14 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , 
 - " 18 : 20 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , 
 - " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 3 , 1 ) , 
 - " 29 : 28 : " + getCheckMessage ( MSG _ KEY , 3 , 1 ) , 
 - " 48 : 43 : " + getCheckMessage ( MSG _ KEY , 2 , 1 ) , 
 + " 17 : 20 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , 
 + " 22 : 20 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , 
 + " 27 : 20 : " + getCheckMessage ( MSG _ KEY , 6 , 4 ) , 
 + " 35 : 28 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , 
 + " 55 : 43 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , 
 } ; 
 verify ( checkConfig , getPath ( " design " + File . separator + " InputThrowsCount . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java 
 index 5024e71 . . bfbb74a 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputThrowsCount . java 
 @ @ - 1 , 6 + 1 , 9 @ @ 
 package com . puppycrawl . tools . checkstyle . design ; 
 
 import java . awt . AWTException ; 
 + import java . io . EOFException ; 
 + import java . io . FileNotFoundException ; 
 + import java . sql . SQLException ; 
 
 public class InputThrowsCount { 
 void method1 ( ) throws Exception 
 @ @ - 11 , 22 + 14 , 26 @ @ public class InputThrowsCount { 
 { 
 } 
 
 - void method3 ( ) throws Exception , AWTException 
 + void method3 ( ) throws Exception , AWTException , SQLException , 
 + FileNotFoundException , EOFException 
 { 
 } 
 
 - void method4 ( ) throws Exception , java . awt . AWTException 
 + void method4 ( ) throws Exception , java . awt . AWTException , java . sql . SQLException , 
 + java . io . FileNotFoundException , java . io . EOFException 
 { 
 } 
 
 - void method5 ( ) throws Exception , AWTException , Throwable 
 + void method5 ( ) throws Exception , AWTException , Throwable , SQLException , 
 + FileNotFoundException , EOFException 
 { 
 } 
 
 void method6 ( ) { 
 } 
 
 - private void method7 ( ) throws Exception , AWTException , Throwable { 
 + private void method7 ( ) throws Exception , AWTException , SQLException , 
 + FileNotFoundException , EOFException { 
 } 
 } 
 
 @ @ - 41 , 11 + 48 , 12 @ @ class SubClass extends InputThrowsCount { 
 } 
 
 @ Override 
 - void method5 ( ) throws Exception , AWTException , Throwable { 
 + void method5 ( ) throws Exception , AWTException , Throwable { 
 } 
 
 @ SuppressWarnings ( " deprecation " ) 
 - final void method2 ( Object . . . objects ) throws Exception , AWTException { 
 + final void method2 ( Object . . . objects ) throws Exception , AWTException , SQLException , 
 + FileNotFoundException , EOFException { 
 } 
 
 @ java . lang . Override 
 diff - - git a / src / xdocs / checks . xml b / src / xdocs / checks . xml 
 index ba7b17b . . d1eb749 100644 
 - - - a / src / xdocs / checks . xml 
 + + + b / src / xdocs / checks . xml 
 @ @ - 713 , 7 + 713 , 7 @ @ 
 < tr > 
 < td > < a href = " config _ design . html # ThrowsCount " > ThrowsCount < / a > < / td > 
 < td > 
 - Restricts throws statements to a specified count ( default = 1 ) . < / td > 
 + Restricts throws statements to a specified count ( default = 4 ) . < / td > 
 < / tr > 
 < tr > 
 < td > < a href = " config _ misc . html # TodoComment " > TodoComment < / a > < / td > 
 diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml 
 index f423f8c . . 581049b 100644 
 - - - a / src / xdocs / config _ design . xml 
 + + + b / src / xdocs / config _ design . xml 
 @ @ - 579 , 7 + 579 , 7 @ @ public class StringUtils / / not final to allow subclassing 
 < section name = " ThrowsCount " > 
 < subsection name = " Description " > 
 < p > 
 - Restricts throws statements to a specified count ( 1 by default ) . 
 + Restricts throws statements to a specified count ( 4 by default ) . 
 Methods with " Override " or " java . lang . Override " annotation are skipped 
 from validation as current class cannot change signature of these methods . 
 < / p > 
 @ @ - 588 , 10 + 588 , 15 @ @ public class StringUtils / / not final to allow subclassing 
 Rationale : Exceptions form part of a method ' s interface . Declaring a 
 method to throw too many differently rooted exceptions makes 
 exception handling onerous and leads to poor programming practices 
 - such as writing code like < code > catch ( Exception ex ) < / code > . This check forces developers to put 
 - exceptions into a hierarchy such that in the simplest case , only one 
 - type of exception need be checked for by a caller but any 
 - subclasses can be caught specifically if necessary . 
 + such as writing code like < code > catch ( Exception ex ) < / code > . 
 + 4 is the empirical value which is based on reports that we had for 
 + the ThrowsCountCheck over big projects such as OpenJDK . 
 + This check also forces developers to put exceptions into a hierarchy 
 + such that in the simplest case , only one type of exception need be 
 + checked for by a caller but any subclasses can be caught specifically 
 + if necessary . For more information on rules for the exceptions and 
 + their issues , see Effective Java : Programming Language Guide 
 + Second Edition by Joshua Bloch pages 264 - 273 . 
 < / p > 
 
 < p > 
 @ @ - 612 , 7 + 617 , 7 @ @ public class StringUtils / / not final to allow subclassing 
 < td > max < / td > 
 < td > maximum allowed number of throws statements < / td > 
 < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > 
 - < td > < code > 1 < / code > < / td > 
 + < td > < code > 4 < / code > < / td > 
 < / tr > 
 < tr > 
 < td > ignorePrivateMethods < / td >
