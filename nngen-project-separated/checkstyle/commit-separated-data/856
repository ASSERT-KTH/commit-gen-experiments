BLEU SCORE: 0.3706866381788037

TEST MSG: Issue # 4191 : Split and Organize Checkstyle inputs by Test for ParameterName
GENERATED MSG: Issue # 4013 : Split and Organize Checkstyle inputsby Test for LineLength

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> index 22166ad . . 35694ef 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> @ @ - 37 , 7 + 37 , 9 @ @ public class ParameterNameCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " naming " + File . separator + filename ) ; <nl> + + " naming " + File . separator <nl> + + " parametername " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 54 , 7 + 56 , 7 @ @ public class ParameterNameCheckTest <nl> createCheckConfig ( ParameterNameCheck . class ) ; <nl> checkConfig . addAttribute ( " format " , " ^ NO _ WAY _ MATEY $ " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputCatchOnly . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputParameterNameCatchOnly . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 71 , 7 + 73 , 7 @ @ public class ParameterNameCheckTest <nl> " 71 : 34 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " badFormat2 " , pattern ) , <nl> " 72 : 25 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " badFormat3 " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputParameterName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 80 , 7 + 82 , 7 @ @ public class ParameterNameCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( ParameterNameCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputParameterName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 166 , 7 + 168 , 7 @ @ public class ParameterNameCheckTest <nl> checkConfig . addAttribute ( " format " , " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) ; <nl> checkConfig . addAttribute ( " ignoreOverridden " , " true " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputOverrideAnnotationNoNPE . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputParameterNameOverrideAnnotationNoNPE . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAccessModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAccessModifier . java <nl> deleted file mode 100644 <nl> index a242550 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAccessModifier . java <nl> + + + / dev / null <nl> @ @ - 1 , 74 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> - <nl> - public class InputAccessModifier { <nl> - <nl> - public InputAccessModifier ( int pubconstr ) { } <nl> - <nl> - public void v1 ( int h ) { <nl> - new Object ( ) { <nl> - public void i ( int inner ) { } <nl> - } ; <nl> - } <nl> - <nl> - protected void v4 ( int h ) { } <nl> - <nl> - void v2 ( int h ) { } <nl> - <nl> - private void v3 ( int h ) { } <nl> - <nl> - public void i1 ( int pubpub ) { } <nl> - <nl> - protected void i4 ( int pubprot ) { } <nl> - <nl> - void i2 ( int pubpack ) { } <nl> - <nl> - private void i3 ( int pubpriv ) { } <nl> - <nl> - public interface InterfaceScope { <nl> - void v1 ( int h ) ; <nl> - <nl> - void i1 ( int pubifc ) ; <nl> - } <nl> - } <nl> - <nl> - class PrivateScope { <nl> - <nl> - public void v1 ( int h ) { } <nl> - <nl> - protected void v4 ( int h ) { } <nl> - <nl> - void v2 ( int h ) { } <nl> - <nl> - private void v3 ( int h ) { } <nl> - <nl> - public void i1 ( int packpub ) { } <nl> - <nl> - protected void i4 ( int packprot ) { } <nl> - <nl> - void i2 ( int packpack ) { } <nl> - <nl> - private void i3 ( int packpriv ) { <nl> - try { <nl> - / * Make sure catch var is ignored * / <nl> - } catch ( Exception exc ) { <nl> - } <nl> - } <nl> - <nl> - interface InterfaceScope { <nl> - void v1 ( int h ) ; <nl> - <nl> - void i1 ( int packifc ) ; <nl> - } <nl> - <nl> - interface FuncIfc { <nl> - void a ( int h ) ; <nl> - } <nl> - <nl> - public void l ( ) { <nl> - FuncIfc l1 = ( int lexp ) - > { } ; <nl> - <nl> - FuncIfc l2 = ( limp ) - > { } ; <nl> - } <nl> - } <nl> - <nl> - <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotation . java <nl> deleted file mode 100644 <nl> index e4e40d1 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotation . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> - <nl> - public class InputOverrideAnnotation { <nl> - <nl> - @ Override <nl> - public boolean equals ( Object o ) { <nl> - return super . equals ( o ) ; <nl> - } <nl> - <nl> - @ SuppressWarnings ( " " ) <nl> - public void foo ( Object object ) { <nl> - <nl> - } <nl> - <nl> - public void foo2 ( Integer aaaa ) { } <nl> - <nl> - void foo3 ( ) { } / / No NPE here ! <nl> - <nl> - void foo4 ( int abc , int bd ) { } / / No NPE here ! <nl> - <nl> - int foo5 ( int abc ) { return 1 ; } / / No NPE here ! <nl> - <nl> - private int field ; <nl> - private java . util . Set < String > packageNames ; <nl> - <nl> - InputOverrideAnnotation ( ) { } / / No NPE here ! <nl> - <nl> - InputOverrideAnnotation ( int field , java . util . Set < String > packageNames ) { } / / No NPE here ! <nl> - <nl> - <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotationNoNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotationNoNPE . java <nl> deleted file mode 100644 <nl> index 8295a12 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotationNoNPE . java <nl> + + + / dev / null <nl> @ @ - 1 , 27 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> - <nl> - class InputOverrideAnnotationNoNPE <nl> - { <nl> - / / method with many parameters <nl> - void myMethod ( int a , int b ) { <nl> - <nl> - } <nl> - <nl> - / / method with many parameters <nl> - void myMethod2 ( int a , int b ) { <nl> - <nl> - } <nl> - } <nl> - <nl> - class Test extends InputOverrideAnnotationNoNPE <nl> - { <nl> - @ Override <nl> - void myMethod ( int a , int b ) { <nl> - <nl> - } <nl> - <nl> - @ java . lang . Override <nl> - void myMethod2 ( int a , int b ) { <nl> - <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputParameterNameReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputParameterNameReceiver . java <nl> deleted file mode 100644 <nl> index 1047f7f . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputParameterNameReceiver . java <nl> + + + / dev / null <nl> @ @ - 1 , 9 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> - <nl> - public class InputParameterNameReceiver { <nl> - public void foo4 ( InputParameterNameReceiver this ) { } <nl> - <nl> - private class Inner { <nl> - public Inner ( InputParameterNameReceiver InputParameterNameReceiver . this ) { } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputAccessModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputAccessModifier . java <nl> new file mode 100644 <nl> index 0000000 . . 0fa58b8 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputAccessModifier . java <nl> @ @ - 0 , 0 + 1 , 74 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; <nl> + <nl> + public class InputAccessModifier { <nl> + <nl> + public InputAccessModifier ( int pubconstr ) { } <nl> + <nl> + public void v1 ( int h ) { <nl> + new Object ( ) { <nl> + public void i ( int inner ) { } <nl> + } ; <nl> + } <nl> + <nl> + protected void v4 ( int h ) { } <nl> + <nl> + void v2 ( int h ) { } <nl> + <nl> + private void v3 ( int h ) { } <nl> + <nl> + public void i1 ( int pubpub ) { } <nl> + <nl> + protected void i4 ( int pubprot ) { } <nl> + <nl> + void i2 ( int pubpack ) { } <nl> + <nl> + private void i3 ( int pubpriv ) { } <nl> + <nl> + public interface InterfaceScope { <nl> + void v1 ( int h ) ; <nl> + <nl> + void i1 ( int pubifc ) ; <nl> + } <nl> + } <nl> + <nl> + class PrivateScope { <nl> + <nl> + public void v1 ( int h ) { } <nl> + <nl> + protected void v4 ( int h ) { } <nl> + <nl> + void v2 ( int h ) { } <nl> + <nl> + private void v3 ( int h ) { } <nl> + <nl> + public void i1 ( int packpub ) { } <nl> + <nl> + protected void i4 ( int packprot ) { } <nl> + <nl> + void i2 ( int packpack ) { } <nl> + <nl> + private void i3 ( int packpriv ) { <nl> + try { <nl> + / * Make sure catch var is ignored * / <nl> + } catch ( Exception exc ) { <nl> + } <nl> + } <nl> + <nl> + interface InterfaceScope { <nl> + void v1 ( int h ) ; <nl> + <nl> + void i1 ( int packifc ) ; <nl> + } <nl> + <nl> + interface FuncIfc { <nl> + void a ( int h ) ; <nl> + } <nl> + <nl> + public void l ( ) { <nl> + FuncIfc l1 = ( int lexp ) - > { } ; <nl> + <nl> + FuncIfc l2 = ( limp ) - > { } ; <nl> + } <nl> + } <nl> + <nl> + <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputOverrideAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputOverrideAnnotation . java <nl> new file mode 100644 <nl> index 0000000 . . 3e7a91f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputOverrideAnnotation . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; <nl> + <nl> + public class InputOverrideAnnotation { <nl> + <nl> + @ Override <nl> + public boolean equals ( Object o ) { <nl> + return super . equals ( o ) ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " " ) <nl> + public void foo ( Object object ) { <nl> + <nl> + } <nl> + <nl> + public void foo2 ( Integer aaaa ) { } <nl> + <nl> + void foo3 ( ) { } / / No NPE here ! <nl> + <nl> + void foo4 ( int abc , int bd ) { } / / No NPE here ! <nl> + <nl> + int foo5 ( int abc ) { return 1 ; } / / No NPE here ! <nl> + <nl> + private int field ; <nl> + private java . util . Set < String > packageNames ; <nl> + <nl> + InputOverrideAnnotation ( ) { } / / No NPE here ! <nl> + <nl> + InputOverrideAnnotation ( int field , java . util . Set < String > packageNames ) { } / / No NPE here ! <nl> + <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterName . java <nl> new file mode 100644 <nl> index 0000000 . . d38b31e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterName . java <nl> @ @ - 0 , 0 + 1 , 225 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : Feb - 2001 <nl> + / / Ignore error <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; <nl> + import java . io . * ; <nl> + / * * <nl> + * Contains simple mistakes : <nl> + * - Long lines <nl> + * - Tabs <nl> + * - Format of variables and parameters <nl> + * - Order of modifiers <nl> + * @ author Oliver Burn <nl> + * * / <nl> + final class InputParameterName <nl> + { <nl> + / / Long line - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + / / Contains a tab - > 	 < - <nl> + / / Contains trailing whitespace - > <nl> + <nl> + / / Name format tests <nl> + / / <nl> + / * * Invalid format * * / <nl> + public static final int badConstant = 2 ; <nl> + / * * Valid format * * / <nl> + public static final int MAX _ ROWS = 2 ; <nl> + <nl> + / * * Invalid format * * / <nl> + private static int badStatic = 2 ; <nl> + / * * Valid format * * / <nl> + private static int sNumCreated = 0 ; <nl> + <nl> + / * * Invalid format * * / <nl> + private int badMember = 2 ; <nl> + / * * Valid format * * / <nl> + private int mNumCreated1 = 0 ; <nl> + / * * Valid format * * / <nl> + protected int mNumCreated2 = 0 ; <nl> + <nl> + / * * commas are wrong * * / <nl> + private int [ ] mInts = new int [ ] { 1 , 2 , 3 , <nl> + 4 } ; <nl> + <nl> + / / <nl> + / / Accessor tests <nl> + / / <nl> + / * * should be private * * / <nl> + public static int sTest1 ; <nl> + / * * should be private * * / <nl> + protected static int sTest3 ; <nl> + / * * should be private * * / <nl> + static int sTest2 ; <nl> + <nl> + / * * should be private * * / <nl> + int mTest1 ; <nl> + / * * should be private * * / <nl> + public int mTest2 ; <nl> + <nl> + / / <nl> + / / Parameter name format tests <nl> + / / <nl> + <nl> + / * * <nl> + * @ return hack <nl> + * @ param badFormat1 bad format <nl> + * @ param badFormat2 bad format <nl> + * @ param badFormat3 bad format <nl> + * @ throws java . lang . Exception abc <nl> + * * / <nl> + int test1 ( int badFormat1 , int badFormat2 , <nl> + final int badFormat3 ) <nl> + throws java . lang . Exception <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + / * * method that is 20 lines long * * / <nl> + private void longMethod ( ) <nl> + { <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + } <nl> + <nl> + / * * constructor that is 10 lines long * * / <nl> + private InputParameterName ( ) <nl> + { <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + } <nl> + <nl> + / * * test local variables * / <nl> + private void localVariables ( ) <nl> + { <nl> + / / normal decl <nl> + int abc = 0 ; <nl> + int ABC = 0 ; <nl> + <nl> + / / final decls <nl> + final int cde = 0 ; <nl> + final int CDE = 0 ; <nl> + <nl> + / / decl in for loop init statement <nl> + for ( int k = 0 ; k < 1 ; k + + ) <nl> + { <nl> + String innerBlockVariable = " " ; <nl> + } <nl> + for ( int I = 0 ; I < 1 ; I + + ) <nl> + { <nl> + String InnerBlockVariable = " " ; <nl> + } <nl> + } <nl> + <nl> + / * * test method pattern * / <nl> + void ALL _ UPPERCASE _ METHOD ( ) <nl> + { <nl> + } <nl> + <nl> + / * * test illegal constant * * / <nl> + private static final int BAD _ _ NAME = 3 ; <nl> + <nl> + / / A very , very long line that is OK because it matches the regexp " ^ . * is OK . * regexp . * $ " <nl> + / / long line that has a tab - > 	 < - and would be OK if tab counted as 1 char <nl> + / / tabs that count as one char because of their position - > 	 < - - > 	 < - , OK <nl> + <nl> + / * * some lines to test the error column after tabs * / <nl> + void errorColumnAfterTabs ( ) <nl> + { <nl> + / / with tab - width 8 all statements below start at the same column , <nl> + / / with different combinations of ' ' and ' \ t ' before the statement <nl> + int tab0 = 1 ; <nl> + 	 int tab1 = 1 ; <nl> + 	 int tab2 = 1 ; <nl> + 	 	 int tab3 = 1 ; <nl> + 	 	 int tab4 = 1 ; <nl> + 	 int tab5 = 1 ; <nl> + } <nl> + <nl> + / / FIXME : <nl> + / * FIXME : a <nl> + * FIXME : <nl> + * TODO <nl> + * / <nl> + / * NOTHING * / <nl> + / * YES * / / * FIXME : x * / / * YES ! ! * / <nl> + <nl> + / * * test long comments * * / <nl> + void veryLong ( ) <nl> + { <nl> + / * <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + enough talk * / <nl> + } <nl> + <nl> + / * * <nl> + * @ see to lazy to document all args . Testing excessive # args <nl> + * * / <nl> + void toManyArgs ( int aArg1 , int aArg2 , int aArg3 , int aArg4 , int aArg5 , <nl> + int aArg6 , int aArg7 , int aArg8 , int aArg9 ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + / * * Test class for variable naming in for each clauses . * / <nl> + class InputParameterName2 <nl> + { <nl> + / * * Some more Javadoc . * / <nl> + public void doSomething ( ) <nl> + { <nl> + / / " O " should be named " o " <nl> + for ( Object O : new java . util . ArrayList ( ) ) <nl> + { <nl> + <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * Test enum for member naming check * / <nl> + enum InputParameterNameEnum1 <nl> + { <nl> + / * * ABC constant * / <nl> + ABC , <nl> + <nl> + / * * XYZ constant * / <nl> + XYZ ; <nl> + <nl> + / * * Should be mSomeMemeber * / <nl> + private int someMember ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameCatchOnly . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameCatchOnly . java <nl> new file mode 100644 <nl> index 0000000 . . 966114b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameCatchOnly . java <nl> @ @ - 0 , 0 + 1 , 34 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; <nl> + <nl> + / * * <nl> + * Test case for skipping over catch names . <nl> + * * / <nl> + public class InputParameterNameCatchOnly { <nl> + int foo ( ) { <nl> + if ( System . currentTimeMillis ( ) > 1000 ) <nl> + return 1 ; <nl> + <nl> + int test = 0 ; <nl> + <nl> + try <nl> + { <nl> + return 1 ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + } <nl> + <nl> + public InputParameterNameCatchOnly ( ) <nl> + { <nl> + return ; <nl> + } <nl> + <nl> + class InnerFoo <nl> + { <nl> + public void fooInnerMethod ( ) <nl> + { <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameOverrideAnnotationNoNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameOverrideAnnotationNoNPE . java <nl> new file mode 100644 <nl> index 0000000 . . 549e770 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameOverrideAnnotationNoNPE . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; <nl> + <nl> + class InputParameterNameOverrideAnnotationNoNPE <nl> + { <nl> + / / method with many parameters <nl> + void InputParameterNameOverrideAnnotationNoNPEMethod ( int a , int b ) { <nl> + <nl> + } <nl> + <nl> + / / method with many parameters <nl> + void InputParameterNameOverrideAnnotationNoNPEMethod2 ( int a , int b ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + class Test extends InputParameterNameOverrideAnnotationNoNPE <nl> + { <nl> + @ Override <nl> + void InputParameterNameOverrideAnnotationNoNPEMethod ( int a , int b ) { <nl> + <nl> + } <nl> + <nl> + @ java . lang . Override <nl> + void InputParameterNameOverrideAnnotationNoNPEMethod2 ( int a , int b ) { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameReceiver . java <nl> new file mode 100644 <nl> index 0000000 . . cd450bf <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameReceiver . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; <nl> + <nl> + public class InputParameterNameReceiver { <nl> + public void foo4 ( InputParameterNameReceiver this ) { } <nl> + <nl> + private class Inner { <nl> + public Inner ( InputParameterNameReceiver InputParameterNameReceiver . this ) { } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> index cf3cbb8 . . 93d0a59 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> @ @ - 174 , 15 + 174 , 7 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> final DetailAST rcurly = details . rcurly ; <nl> <nl> if ( rcurly ! = null ) { <nl> - final String violation ; <nl> - if ( shouldStartLine ) { <nl> - final String targetSourceLine = getLines ( ) [ rcurly . getLineNo ( ) - 1 ] ; <nl> - violation = validate ( details , option , true , targetSourceLine ) ; <nl> - } <nl> - else { <nl> - violation = validate ( details , option , false , " " ) ; <nl> - } <nl> - <nl> + final String violation = validate ( details ) ; <nl> if ( ! violation . isEmpty ( ) ) { <nl> log ( rcurly , violation , " } " , rcurly . getColumnNo ( ) + 1 ) ; <nl> } <nl> @ @ - 192 , 21 + 184 , 16 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> / * * <nl> * Does general validation . <nl> * @ param details for validation . <nl> - * @ param bracePolicy for placing the right curly brace . <nl> - * @ param shouldStartLine do we need to check if right curly starts line . <nl> - * @ param targetSourceLine line that we need to check if shouldStartLine is true . <nl> * @ return violation message or empty string <nl> * if there was not violation during validation . <nl> * / <nl> - private static String validate ( Details details , RightCurlyOption bracePolicy , <nl> - boolean shouldStartLine , String targetSourceLine ) { <nl> + private String validate ( Details details ) { <nl> final DetailAST rcurly = details . rcurly ; <nl> final DetailAST lcurly = details . lcurly ; <nl> final DetailAST nextToken = details . nextToken ; <nl> final boolean shouldCheckLastRcurly = details . shouldCheckLastRcurly ; <nl> String violation = " " ; <nl> - <nl> - if ( bracePolicy = = RightCurlyOption . SAME <nl> + if ( option = = RightCurlyOption . SAME <nl> & & ! hasLineBreakBefore ( rcurly ) <nl> & & lcurly . getLineNo ( ) ! = rcurly . getLineNo ( ) ) { <nl> violation = MSG _ KEY _ LINE _ BREAK _ BEFORE ; <nl> @ @ - 216 , 14 + 203 , 17 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> violation = MSG _ KEY _ LINE _ ALONE ; <nl> } <nl> } <nl> - else if ( shouldBeOnSameLine ( bracePolicy , details ) ) { <nl> + else if ( shouldBeOnSameLine ( option , details ) ) { <nl> violation = MSG _ KEY _ LINE _ SAME ; <nl> } <nl> - else if ( shouldBeAloneOnLine ( bracePolicy , details ) ) { <nl> + else if ( shouldBeAloneOnLine ( option , details ) ) { <nl> violation = MSG _ KEY _ LINE _ ALONE ; <nl> } <nl> - else if ( shouldStartLine & & ! isOnStartOfLine ( details , targetSourceLine ) ) { <nl> - violation = MSG _ KEY _ LINE _ NEW ; <nl> + else if ( shouldStartLine ) { <nl> + final String targetSourceLine = getLines ( ) [ rcurly . getLineNo ( ) - 1 ] ; <nl> + if ( ! isOnStartOfLine ( details , targetSourceLine ) ) { <nl> + violation = MSG _ KEY _ LINE _ NEW ; <nl> + } <nl> } <nl> return violation ; <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 index 22166ad . . 35694ef 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 @ @ - 37 , 7 + 37 , 9 @ @ public class ParameterNameCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " naming " + File . separator + filename ) ; 
 + + " naming " + File . separator 
 + + " parametername " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 54 , 7 + 56 , 7 @ @ public class ParameterNameCheckTest 
 createCheckConfig ( ParameterNameCheck . class ) ; 
 checkConfig . addAttribute ( " format " , " ^ NO _ WAY _ MATEY $ " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputCatchOnly . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputParameterNameCatchOnly . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 71 , 7 + 73 , 7 @ @ public class ParameterNameCheckTest 
 " 71 : 34 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " badFormat2 " , pattern ) , 
 " 72 : 25 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " badFormat3 " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputParameterName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 80 , 7 + 82 , 7 @ @ public class ParameterNameCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( ParameterNameCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputParameterName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 166 , 7 + 168 , 7 @ @ public class ParameterNameCheckTest 
 checkConfig . addAttribute ( " format " , " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) ; 
 checkConfig . addAttribute ( " ignoreOverridden " , " true " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputOverrideAnnotationNoNPE . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputParameterNameOverrideAnnotationNoNPE . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAccessModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAccessModifier . java 
 deleted file mode 100644 
 index a242550 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAccessModifier . java 
 + + + / dev / null 
 @ @ - 1 , 74 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . naming ; 
 - 
 - public class InputAccessModifier { 
 - 
 - public InputAccessModifier ( int pubconstr ) { } 
 - 
 - public void v1 ( int h ) { 
 - new Object ( ) { 
 - public void i ( int inner ) { } 
 - } ; 
 - } 
 - 
 - protected void v4 ( int h ) { } 
 - 
 - void v2 ( int h ) { } 
 - 
 - private void v3 ( int h ) { } 
 - 
 - public void i1 ( int pubpub ) { } 
 - 
 - protected void i4 ( int pubprot ) { } 
 - 
 - void i2 ( int pubpack ) { } 
 - 
 - private void i3 ( int pubpriv ) { } 
 - 
 - public interface InterfaceScope { 
 - void v1 ( int h ) ; 
 - 
 - void i1 ( int pubifc ) ; 
 - } 
 - } 
 - 
 - class PrivateScope { 
 - 
 - public void v1 ( int h ) { } 
 - 
 - protected void v4 ( int h ) { } 
 - 
 - void v2 ( int h ) { } 
 - 
 - private void v3 ( int h ) { } 
 - 
 - public void i1 ( int packpub ) { } 
 - 
 - protected void i4 ( int packprot ) { } 
 - 
 - void i2 ( int packpack ) { } 
 - 
 - private void i3 ( int packpriv ) { 
 - try { 
 - / * Make sure catch var is ignored * / 
 - } catch ( Exception exc ) { 
 - } 
 - } 
 - 
 - interface InterfaceScope { 
 - void v1 ( int h ) ; 
 - 
 - void i1 ( int packifc ) ; 
 - } 
 - 
 - interface FuncIfc { 
 - void a ( int h ) ; 
 - } 
 - 
 - public void l ( ) { 
 - FuncIfc l1 = ( int lexp ) - > { } ; 
 - 
 - FuncIfc l2 = ( limp ) - > { } ; 
 - } 
 - } 
 - 
 - 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotation . java 
 deleted file mode 100644 
 index e4e40d1 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotation . java 
 + + + / dev / null 
 @ @ - 1 , 31 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . naming ; 
 - 
 - public class InputOverrideAnnotation { 
 - 
 - @ Override 
 - public boolean equals ( Object o ) { 
 - return super . equals ( o ) ; 
 - } 
 - 
 - @ SuppressWarnings ( " " ) 
 - public void foo ( Object object ) { 
 - 
 - } 
 - 
 - public void foo2 ( Integer aaaa ) { } 
 - 
 - void foo3 ( ) { } / / No NPE here ! 
 - 
 - void foo4 ( int abc , int bd ) { } / / No NPE here ! 
 - 
 - int foo5 ( int abc ) { return 1 ; } / / No NPE here ! 
 - 
 - private int field ; 
 - private java . util . Set < String > packageNames ; 
 - 
 - InputOverrideAnnotation ( ) { } / / No NPE here ! 
 - 
 - InputOverrideAnnotation ( int field , java . util . Set < String > packageNames ) { } / / No NPE here ! 
 - 
 - 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotationNoNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotationNoNPE . java 
 deleted file mode 100644 
 index 8295a12 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotationNoNPE . java 
 + + + / dev / null 
 @ @ - 1 , 27 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . naming ; 
 - 
 - class InputOverrideAnnotationNoNPE 
 - { 
 - / / method with many parameters 
 - void myMethod ( int a , int b ) { 
 - 
 - } 
 - 
 - / / method with many parameters 
 - void myMethod2 ( int a , int b ) { 
 - 
 - } 
 - } 
 - 
 - class Test extends InputOverrideAnnotationNoNPE 
 - { 
 - @ Override 
 - void myMethod ( int a , int b ) { 
 - 
 - } 
 - 
 - @ java . lang . Override 
 - void myMethod2 ( int a , int b ) { 
 - 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputParameterNameReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputParameterNameReceiver . java 
 deleted file mode 100644 
 index 1047f7f . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputParameterNameReceiver . java 
 + + + / dev / null 
 @ @ - 1 , 9 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . naming ; 
 - 
 - public class InputParameterNameReceiver { 
 - public void foo4 ( InputParameterNameReceiver this ) { } 
 - 
 - private class Inner { 
 - public Inner ( InputParameterNameReceiver InputParameterNameReceiver . this ) { } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputAccessModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputAccessModifier . java 
 new file mode 100644 
 index 0000000 . . 0fa58b8 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputAccessModifier . java 
 @ @ - 0 , 0 + 1 , 74 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; 
 + 
 + public class InputAccessModifier { 
 + 
 + public InputAccessModifier ( int pubconstr ) { } 
 + 
 + public void v1 ( int h ) { 
 + new Object ( ) { 
 + public void i ( int inner ) { } 
 + } ; 
 + } 
 + 
 + protected void v4 ( int h ) { } 
 + 
 + void v2 ( int h ) { } 
 + 
 + private void v3 ( int h ) { } 
 + 
 + public void i1 ( int pubpub ) { } 
 + 
 + protected void i4 ( int pubprot ) { } 
 + 
 + void i2 ( int pubpack ) { } 
 + 
 + private void i3 ( int pubpriv ) { } 
 + 
 + public interface InterfaceScope { 
 + void v1 ( int h ) ; 
 + 
 + void i1 ( int pubifc ) ; 
 + } 
 + } 
 + 
 + class PrivateScope { 
 + 
 + public void v1 ( int h ) { } 
 + 
 + protected void v4 ( int h ) { } 
 + 
 + void v2 ( int h ) { } 
 + 
 + private void v3 ( int h ) { } 
 + 
 + public void i1 ( int packpub ) { } 
 + 
 + protected void i4 ( int packprot ) { } 
 + 
 + void i2 ( int packpack ) { } 
 + 
 + private void i3 ( int packpriv ) { 
 + try { 
 + / * Make sure catch var is ignored * / 
 + } catch ( Exception exc ) { 
 + } 
 + } 
 + 
 + interface InterfaceScope { 
 + void v1 ( int h ) ; 
 + 
 + void i1 ( int packifc ) ; 
 + } 
 + 
 + interface FuncIfc { 
 + void a ( int h ) ; 
 + } 
 + 
 + public void l ( ) { 
 + FuncIfc l1 = ( int lexp ) - > { } ; 
 + 
 + FuncIfc l2 = ( limp ) - > { } ; 
 + } 
 + } 
 + 
 + 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputOverrideAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputOverrideAnnotation . java 
 new file mode 100644 
 index 0000000 . . 3e7a91f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputOverrideAnnotation . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; 
 + 
 + public class InputOverrideAnnotation { 
 + 
 + @ Override 
 + public boolean equals ( Object o ) { 
 + return super . equals ( o ) ; 
 + } 
 + 
 + @ SuppressWarnings ( " " ) 
 + public void foo ( Object object ) { 
 + 
 + } 
 + 
 + public void foo2 ( Integer aaaa ) { } 
 + 
 + void foo3 ( ) { } / / No NPE here ! 
 + 
 + void foo4 ( int abc , int bd ) { } / / No NPE here ! 
 + 
 + int foo5 ( int abc ) { return 1 ; } / / No NPE here ! 
 + 
 + private int field ; 
 + private java . util . Set < String > packageNames ; 
 + 
 + InputOverrideAnnotation ( ) { } / / No NPE here ! 
 + 
 + InputOverrideAnnotation ( int field , java . util . Set < String > packageNames ) { } / / No NPE here ! 
 + 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterName . java 
 new file mode 100644 
 index 0000000 . . d38b31e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterName . java 
 @ @ - 0 , 0 + 1 , 225 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : Feb - 2001 
 + / / Ignore error 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; 
 + import java . io . * ; 
 + / * * 
 + * Contains simple mistakes : 
 + * - Long lines 
 + * - Tabs 
 + * - Format of variables and parameters 
 + * - Order of modifiers 
 + * @ author Oliver Burn 
 + * * / 
 + final class InputParameterName 
 + { 
 + / / Long line - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + / / Contains a tab - > 	 < - 
 + / / Contains trailing whitespace - > 
 + 
 + / / Name format tests 
 + / / 
 + / * * Invalid format * * / 
 + public static final int badConstant = 2 ; 
 + / * * Valid format * * / 
 + public static final int MAX _ ROWS = 2 ; 
 + 
 + / * * Invalid format * * / 
 + private static int badStatic = 2 ; 
 + / * * Valid format * * / 
 + private static int sNumCreated = 0 ; 
 + 
 + / * * Invalid format * * / 
 + private int badMember = 2 ; 
 + / * * Valid format * * / 
 + private int mNumCreated1 = 0 ; 
 + / * * Valid format * * / 
 + protected int mNumCreated2 = 0 ; 
 + 
 + / * * commas are wrong * * / 
 + private int [ ] mInts = new int [ ] { 1 , 2 , 3 , 
 + 4 } ; 
 + 
 + / / 
 + / / Accessor tests 
 + / / 
 + / * * should be private * * / 
 + public static int sTest1 ; 
 + / * * should be private * * / 
 + protected static int sTest3 ; 
 + / * * should be private * * / 
 + static int sTest2 ; 
 + 
 + / * * should be private * * / 
 + int mTest1 ; 
 + / * * should be private * * / 
 + public int mTest2 ; 
 + 
 + / / 
 + / / Parameter name format tests 
 + / / 
 + 
 + / * * 
 + * @ return hack 
 + * @ param badFormat1 bad format 
 + * @ param badFormat2 bad format 
 + * @ param badFormat3 bad format 
 + * @ throws java . lang . Exception abc 
 + * * / 
 + int test1 ( int badFormat1 , int badFormat2 , 
 + final int badFormat3 ) 
 + throws java . lang . Exception 
 + { 
 + return 0 ; 
 + } 
 + 
 + / * * method that is 20 lines long * * / 
 + private void longMethod ( ) 
 + { 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + } 
 + 
 + / * * constructor that is 10 lines long * * / 
 + private InputParameterName ( ) 
 + { 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + } 
 + 
 + / * * test local variables * / 
 + private void localVariables ( ) 
 + { 
 + / / normal decl 
 + int abc = 0 ; 
 + int ABC = 0 ; 
 + 
 + / / final decls 
 + final int cde = 0 ; 
 + final int CDE = 0 ; 
 + 
 + / / decl in for loop init statement 
 + for ( int k = 0 ; k < 1 ; k + + ) 
 + { 
 + String innerBlockVariable = " " ; 
 + } 
 + for ( int I = 0 ; I < 1 ; I + + ) 
 + { 
 + String InnerBlockVariable = " " ; 
 + } 
 + } 
 + 
 + / * * test method pattern * / 
 + void ALL _ UPPERCASE _ METHOD ( ) 
 + { 
 + } 
 + 
 + / * * test illegal constant * * / 
 + private static final int BAD _ _ NAME = 3 ; 
 + 
 + / / A very , very long line that is OK because it matches the regexp " ^ . * is OK . * regexp . * $ " 
 + / / long line that has a tab - > 	 < - and would be OK if tab counted as 1 char 
 + / / tabs that count as one char because of their position - > 	 < - - > 	 < - , OK 
 + 
 + / * * some lines to test the error column after tabs * / 
 + void errorColumnAfterTabs ( ) 
 + { 
 + / / with tab - width 8 all statements below start at the same column , 
 + / / with different combinations of ' ' and ' \ t ' before the statement 
 + int tab0 = 1 ; 
 + 	 int tab1 = 1 ; 
 + 	 int tab2 = 1 ; 
 + 	 	 int tab3 = 1 ; 
 + 	 	 int tab4 = 1 ; 
 + 	 int tab5 = 1 ; 
 + } 
 + 
 + / / FIXME : 
 + / * FIXME : a 
 + * FIXME : 
 + * TODO 
 + * / 
 + / * NOTHING * / 
 + / * YES * / / * FIXME : x * / / * YES ! ! * / 
 + 
 + / * * test long comments * * / 
 + void veryLong ( ) 
 + { 
 + / * 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + enough talk * / 
 + } 
 + 
 + / * * 
 + * @ see to lazy to document all args . Testing excessive # args 
 + * * / 
 + void toManyArgs ( int aArg1 , int aArg2 , int aArg3 , int aArg4 , int aArg5 , 
 + int aArg6 , int aArg7 , int aArg8 , int aArg9 ) 
 + { 
 + } 
 + } 
 + 
 + / * * Test class for variable naming in for each clauses . * / 
 + class InputParameterName2 
 + { 
 + / * * Some more Javadoc . * / 
 + public void doSomething ( ) 
 + { 
 + / / " O " should be named " o " 
 + for ( Object O : new java . util . ArrayList ( ) ) 
 + { 
 + 
 + } 
 + } 
 + } 
 + 
 + / * * Test enum for member naming check * / 
 + enum InputParameterNameEnum1 
 + { 
 + / * * ABC constant * / 
 + ABC , 
 + 
 + / * * XYZ constant * / 
 + XYZ ; 
 + 
 + / * * Should be mSomeMemeber * / 
 + private int someMember ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameCatchOnly . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameCatchOnly . java 
 new file mode 100644 
 index 0000000 . . 966114b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameCatchOnly . java 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; 
 + 
 + / * * 
 + * Test case for skipping over catch names . 
 + * * / 
 + public class InputParameterNameCatchOnly { 
 + int foo ( ) { 
 + if ( System . currentTimeMillis ( ) > 1000 ) 
 + return 1 ; 
 + 
 + int test = 0 ; 
 + 
 + try 
 + { 
 + return 1 ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + return 0 ; 
 + } 
 + } 
 + 
 + public InputParameterNameCatchOnly ( ) 
 + { 
 + return ; 
 + } 
 + 
 + class InnerFoo 
 + { 
 + public void fooInnerMethod ( ) 
 + { 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameOverrideAnnotationNoNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameOverrideAnnotationNoNPE . java 
 new file mode 100644 
 index 0000000 . . 549e770 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameOverrideAnnotationNoNPE . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; 
 + 
 + class InputParameterNameOverrideAnnotationNoNPE 
 + { 
 + / / method with many parameters 
 + void InputParameterNameOverrideAnnotationNoNPEMethod ( int a , int b ) { 
 + 
 + } 
 + 
 + / / method with many parameters 
 + void InputParameterNameOverrideAnnotationNoNPEMethod2 ( int a , int b ) { 
 + 
 + } 
 + } 
 + 
 + class Test extends InputParameterNameOverrideAnnotationNoNPE 
 + { 
 + @ Override 
 + void InputParameterNameOverrideAnnotationNoNPEMethod ( int a , int b ) { 
 + 
 + } 
 + 
 + @ java . lang . Override 
 + void InputParameterNameOverrideAnnotationNoNPEMethod2 ( int a , int b ) { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameReceiver . java 
 new file mode 100644 
 index 0000000 . . cd450bf 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / parametername / InputParameterNameReceiver . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . parametername ; 
 + 
 + public class InputParameterNameReceiver { 
 + public void foo4 ( InputParameterNameReceiver this ) { } 
 + 
 + private class Inner { 
 + public Inner ( InputParameterNameReceiver InputParameterNameReceiver . this ) { } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 index cf3cbb8 . . 93d0a59 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 @ @ - 174 , 15 + 174 , 7 @ @ public class RightCurlyCheck extends AbstractCheck { 
 final DetailAST rcurly = details . rcurly ; 
 
 if ( rcurly ! = null ) { 
 - final String violation ; 
 - if ( shouldStartLine ) { 
 - final String targetSourceLine = getLines ( ) [ rcurly . getLineNo ( ) - 1 ] ; 
 - violation = validate ( details , option , true , targetSourceLine ) ; 
 - } 
 - else { 
 - violation = validate ( details , option , false , " " ) ; 
 - } 
 - 
 + final String violation = validate ( details ) ; 
 if ( ! violation . isEmpty ( ) ) { 
 log ( rcurly , violation , " } " , rcurly . getColumnNo ( ) + 1 ) ; 
 } 
 @ @ - 192 , 21 + 184 , 16 @ @ public class RightCurlyCheck extends AbstractCheck { 
 / * * 
 * Does general validation . 
 * @ param details for validation . 
 - * @ param bracePolicy for placing the right curly brace . 
 - * @ param shouldStartLine do we need to check if right curly starts line . 
 - * @ param targetSourceLine line that we need to check if shouldStartLine is true . 
 * @ return violation message or empty string 
 * if there was not violation during validation . 
 * / 
 - private static String validate ( Details details , RightCurlyOption bracePolicy , 
 - boolean shouldStartLine , String targetSourceLine ) { 
 + private String validate ( Details details ) { 
 final DetailAST rcurly = details . rcurly ; 
 final DetailAST lcurly = details . lcurly ; 
 final DetailAST nextToken = details . nextToken ; 
 final boolean shouldCheckLastRcurly = details . shouldCheckLastRcurly ; 
 String violation = " " ; 
 - 
 - if ( bracePolicy = = RightCurlyOption . SAME 
 + if ( option = = RightCurlyOption . SAME 
 & & ! hasLineBreakBefore ( rcurly ) 
 & & lcurly . getLineNo ( ) ! = rcurly . getLineNo ( ) ) { 
 violation = MSG _ KEY _ LINE _ BREAK _ BEFORE ; 
 @ @ - 216 , 14 + 203 , 17 @ @ public class RightCurlyCheck extends AbstractCheck { 
 violation = MSG _ KEY _ LINE _ ALONE ; 
 } 
 } 
 - else if ( shouldBeOnSameLine ( bracePolicy , details ) ) { 
 + else if ( shouldBeOnSameLine ( option , details ) ) { 
 violation = MSG _ KEY _ LINE _ SAME ; 
 } 
 - else if ( shouldBeAloneOnLine ( bracePolicy , details ) ) { 
 + else if ( shouldBeAloneOnLine ( option , details ) ) { 
 violation = MSG _ KEY _ LINE _ ALONE ; 
 } 
 - else if ( shouldStartLine & & ! isOnStartOfLine ( details , targetSourceLine ) ) { 
 - violation = MSG _ KEY _ LINE _ NEW ; 
 + else if ( shouldStartLine ) { 
 + final String targetSourceLine = getLines ( ) [ rcurly . getLineNo ( ) - 1 ] ; 
 + if ( ! isOnStartOfLine ( details , targetSourceLine ) ) { 
 + violation = MSG _ KEY _ LINE _ NEW ; 
 + } 
 } 
 return violation ; 
 }
