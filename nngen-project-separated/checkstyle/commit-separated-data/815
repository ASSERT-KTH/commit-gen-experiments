BLEU SCORE: 0.07603985612048919

TEST MSG: Issue # 3312 : Add sourcepath property to Ant task
GENERATED MSG: Added file extensions property to Checker & TreeWalker , issue # 25

TEST DIFF (one line): diff - - git a / config / ant - phase - verify . xml b / config / ant - phase - verify . xml <nl> index bd0b886 . . ddc18b1 100644 <nl> - - - a / config / ant - phase - verify . xml <nl> + + + b / config / ant - phase - verify . xml <nl> @ @ - 18 , 7 + 18 , 7 @ @ <nl> < tstamp > <nl> < format property = " STARTED " pattern = " dd / MM / yyyy hh : mm : ss aa " / > <nl> < / tstamp > <nl> - < echo > Checkstyle started : $ { STARTED } < / echo > <nl> + < echo > Checkstyle started ( checkstyle _ checks . xml ) : $ { STARTED } < / echo > <nl> <nl> < checkstyle config = " $ { check . config } " <nl> failOnViolation = " false " <nl> @ @ - 39 , 9 + 39 , 74 @ @ <nl> < / checkstyle > <nl> <nl> < tstamp > <nl> - < format property = " FINISHED " pattern = " dd / MM / yyyy hh : mm : ss aa " / > <nl> + < format property = " FINISHED " pattern = " dd / MM / yyyy hh : mm : ss aa " / > <nl> < / tstamp > <nl> - < echo > Checkstyle finished : $ { FINISHED } < / echo > <nl> + < echo > Checkstyle finished ( checkstyle _ checks . xml ) : $ { FINISHED } < / echo > <nl> + <nl> + < tstamp > <nl> + < format property = " STARTED " pattern = " dd / MM / yyyy hh : mm : ss aa " / > <nl> + < / tstamp > <nl> + < echo > Checkstyle started ( checkstyle _ non _ main _ files _ checks . xml ) : $ { STARTED } < / echo > <nl> + <nl> + < checkstyle config = " config / checkstyle _ non _ main _ files _ checks . xml " <nl> + failOnViolation = " true " <nl> + failureProperty = " checkstyle . failure . property " > <nl> + < path > <nl> + < fileset dir = " $ { basedir } " includes = " * * / * " > <nl> + < exclude name = " . git / * * / * " / > <nl> + < exclude name = " src / main / * * / * " / > <nl> + < exclude name = " src / test / java / * * / * " / > <nl> + < exclude name = " src / site / resources / images / * * / * " / > <nl> + <nl> + < ! - - Eclipse project files - - > <nl> + < exclude name = " . settings / * * / * " / > <nl> + < exclude name = " . externalToolBuilders / * * / * " / > <nl> + < exclude name = " . classpath " / > <nl> + < exclude name = " . project " / > <nl> + <nl> + < ! - - m2e - code - quality Eclipse IDE plugin temporary configuration files for Eclipse CS Checkstyle / PMD / FindBugs Plug - Ins - - > <nl> + < exclude name = " . checkstyle / * * / * " / > <nl> + < exclude name = " . pmd / * * / * " / > <nl> + < exclude name = " . pmdruleset . xml " / > <nl> + < exclude name = " . fbExcludeFilterFile / * * / * " / > <nl> + <nl> + < ! - - NetBeans project files - - > <nl> + < exclude name = " * * / nbactions . xml " / > <nl> + < exclude name = " * * / nb - configuration . xml " / > <nl> + <nl> + < ! - - Maven build folder - - > <nl> + < exclude name = " target / * * / * " / > <nl> + < exclude name = " bin / * * / * " / > <nl> + <nl> + < ! - - IDEA project files - - > <nl> + < exclude name = " * . iml " / > <nl> + < exclude name = " * . ipr " / > <nl> + < exclude name = " * . iws " / > <nl> + < exclude name = " . idea / * * / * " / > <nl> + <nl> + < ! - - Temp files - - > <nl> + < exclude name = " * ~ " / > <nl> + <nl> + < ! - - Java Virtual machine crash logs - - > <nl> + < exclude name = " hs _ err _ pid * " / > <nl> + < exclude name = " replay _ pid * " / > <nl> + <nl> + < ! - - Apple MAC OSX hidden file - - > <nl> + < exclude name = " . DS _ Store " / > <nl> + <nl> + < ! - - NonDex files - - > <nl> + < exclude name = " . nondex / * * / * " / > <nl> + < / fileset > <nl> + < / path > <nl> + < formatter type = " plain " / > <nl> + < formatter type = " xml " toFile = " $ { mvn . project . build . directory } / cs _ non _ main _ files _ errors . xml " / > <nl> + < classpath path = " $ { mvn . runtime _ classpath } " / > <nl> + < / checkstyle > <nl> + <nl> + < tstamp > <nl> + < format property = " FINISHED " pattern = " dd / MM / yyyy hh : mm : ss aa " / > <nl> + < / tstamp > <nl> + < echo > Checkstyle finished ( checkstyle _ non _ main _ files _ checks . xml ) : $ { FINISHED } < / echo > <nl> <nl> < fail if = " checkstyle . failure . property " <nl> message = " Checkstyle failed : $ { checkstyle . failure . property } " <nl> diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index ad8ed39 . . 2c0c996 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 79 , 6 + 79 , 7 @ @ <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | XdocsPagesTest | CheckstyleAntTaskTest ) \ . java " / > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " PropertyCacheFile \ . java " / > <nl> < suppress checks = " ClassFanOutComplexity " files = " [ \ \ / ] Main \ . java " / > <nl> + < suppress checks = " ClassFanOutComplexity " files = " CheckstyleAntTask \ . java " / > <nl> < ! - - a lot of GUI elements is OK - - > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " ( TreeTable | MainFrame ) \ . java " / > <nl> <nl> diff - - git a / pom . xml b / pom . xml <nl> index 21f4a17 . . beb53a1 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 492 , 62 + 492 , 6 @ @ <nl> < goal > check < / goal > <nl> < / goals > <nl> < / execution > <nl> - < execution > <nl> - < id > checkstyle - non - main - check < / id > <nl> - < phase > verify < / phase > <nl> - < configuration > <nl> - < configLocation > $ { project . basedir } / config / checkstyle _ non _ main _ files _ checks . xml < / configLocation > <nl> - < failOnViolation > true < / failOnViolation > <nl> - < includeResources > false < / includeResources > <nl> - < includeTestResources > true < / includeTestResources > <nl> - < logViolationsToConsole > true < / logViolationsToConsole > <nl> - < maxAllowedViolations > 0 < / maxAllowedViolations > <nl> - < violationSeverity > error < / violationSeverity > <nl> - < propertyExpansion > project . basedir = $ { project . basedir } < / propertyExpansion > <nl> - < sourceDirectory > $ { project . basedir } < / sourceDirectory > <nl> - < includes > * * / * < / includes > <nl> - < ! - - All . gitignore files should be added to exclusions - - > <nl> - < excludes > <nl> - . git / * * / * , <nl> - src / main / * * / * , <nl> - src / test / java / * * / * , <nl> - src / site / resources / images / * * / * , <nl> - < ! - - Eclipse project files - - > <nl> - . settings / * * / * , <nl> - . externalToolBuilders / * * / * , <nl> - . classpath , <nl> - . project , <nl> - < ! - - m2e - code - quality Eclipse IDE plugin temporary configuration files for Eclipse CS Checkstyle / PMD / FindBugs Plug - Ins - - > <nl> - . checkstyle / * * / * , <nl> - . pmd / * * / * , <nl> - . pmdruleset . xml , <nl> - . fbExcludeFilterFile / * * / * , <nl> - < ! - - NetBeans project files - - > <nl> - nbactions . xml , <nl> - nb - configuration . xml , <nl> - < ! - - Maven build folder - - > <nl> - target / * * / * , <nl> - bin / * * / * , <nl> - < ! - - IDEA project files - - > <nl> - * . iml , <nl> - * . ipr , <nl> - * . iws , <nl> - . idea / * * / * , <nl> - < ! - - Temp files - - > <nl> - * ~ , <nl> - < ! - - Java Virtual machine crash logs - - > <nl> - hs _ err _ pid * , <nl> - replay _ pid * , <nl> - < ! - - Apple MAC OSX hidden file - - > <nl> - . DS _ Store , <nl> - < ! - - NonDex files - - > <nl> - . nondex / * * / * , <nl> - < / excludes > <nl> - < / configuration > <nl> - < goals > <nl> - < goal > check < / goal > <nl> - < / goals > <nl> - < / execution > <nl> < / executions > <nl> < / plugin > <nl> <nl> @ @ - 895 , 6 + 839 , 7 @ @ <nl> < property name = " mvn . project . build . directory " value = " $ { project . build . directory } " / > <nl> < property name = " mvn . project . version " value = " $ { project . version } " / > <nl> < property name = " mvn . runtime _ classpath " refid = " maven . runtime . classpath " / > <nl> + < property name = " project . basedir " value = " $ { project . basedir } " / > <nl> < ant antfile = " config / ant - phase - verify . xml " / > <nl> < / target > <nl> < / configuration > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> index e24326f . . ed1602c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> @ @ - 26 , 11 + 26 , 13 @ @ import java . io . IOException ; <nl> import java . io . OutputStream ; <nl> import java . net . URL ; <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> import java . util . Map ; <nl> import java . util . Properties ; <nl> import java . util . ResourceBundle ; <nl> + import java . util . stream . Collectors ; <nl> <nl> import org . apache . tools . ant . AntClassLoader ; <nl> import org . apache . tools . ant . BuildException ; <nl> @ @ - 72 , 6 + 74 , 9 @ @ public class CheckstyleAntTask extends Task { <nl> / * * Suffix for time string . * / <nl> private static final String TIME _ SUFFIX = " ms . " ; <nl> <nl> + / * * Contains the paths to process . * / <nl> + private final List < Path > paths = new ArrayList < > ( ) ; <nl> + <nl> / * * Contains the filesets to process . * / <nl> private final List < FileSet > fileSets = new ArrayList < > ( ) ; <nl> <nl> @ @ - 152 , 6 + 157 , 14 @ @ public class CheckstyleAntTask extends Task { <nl> } <nl> <nl> / * * <nl> + * Adds a path . <nl> + * @ param path the path to add . <nl> + * / <nl> + public void addPath ( Path path ) { <nl> + paths . add ( path ) ; <nl> + } <nl> + <nl> + / * * <nl> * Adds set of files ( nested fileset attribute ) . <nl> * @ param fileSet the file set to add <nl> * / <nl> @ @ - 296 , 9 + 309 , 11 @ @ public class CheckstyleAntTask extends Task { <nl> log ( " compiled on " + compileTimestamp , Project . MSG _ VERBOSE ) ; <nl> <nl> / / Check for no arguments <nl> - if ( fileName = = null & & fileSets . isEmpty ( ) ) { <nl> + if ( fileName = = null <nl> + & & fileSets . isEmpty ( ) <nl> + & & paths . isEmpty ( ) ) { <nl> throw new BuildException ( <nl> - " Must specify at least one of ' file ' or nested ' fileset ' . " , <nl> + " Must specify at least one of ' file ' or nested ' fileset ' or ' path ' . " , <nl> getLocation ( ) ) ; <nl> } <nl> if ( configLocation = = null ) { <nl> @ @ - 359 , 7 + 374 , 7 @ @ public class CheckstyleAntTask extends Task { <nl> private void processFiles ( RootModule rootModule , final SeverityLevelCounter warningCounter , <nl> final String checkstyleVersion ) { <nl> final long startTime = System . currentTimeMillis ( ) ; <nl> - final List < File > files = scanFileSets ( ) ; <nl> + final List < File > files = getFilesToCheck ( ) ; <nl> final long endTime = System . currentTimeMillis ( ) ; <nl> log ( " To locate the files took " + ( endTime - startTime ) + TIME _ SUFFIX , <nl> Project . MSG _ VERBOSE ) ; <nl> @ @ - 509 , 33 + 524 , 114 @ @ public class CheckstyleAntTask extends Task { <nl> <nl> / * * <nl> * Returns the list of files ( full path name ) to process . <nl> - * @ return the list of files included via the filesets . <nl> + * @ return the list of files included via the fileName , filesets and paths . <nl> * / <nl> - protected List < File > scanFileSets ( ) { <nl> - final List < File > list = new ArrayList < > ( ) ; <nl> + protected List < File > getFilesToCheck ( ) { <nl> + final List < File > allFiles = new ArrayList < > ( ) ; <nl> if ( fileName ! = null ) { <nl> / / oops we ' ve got an additional one to process , don ' t <nl> / / forget it . No sweat , it ' s fully resolved via the setter . <nl> log ( " Adding standalone file for audit " , Project . MSG _ VERBOSE ) ; <nl> - list . add ( new File ( fileName ) ) ; <nl> + allFiles . add ( new File ( fileName ) ) ; <nl> + } <nl> + <nl> + final List < File > filesFromFileSets = scanFileSets ( ) ; <nl> + allFiles . addAll ( filesFromFileSets ) ; <nl> + <nl> + final List < File > filesFromPaths = scanPaths ( ) ; <nl> + allFiles . addAll ( filesFromPaths ) ; <nl> + <nl> + return allFiles ; <nl> + } <nl> + <nl> + / * * <nl> + * Retrieves all files from the defined paths . <nl> + * @ return a list of files defined via paths . <nl> + * / <nl> + private List < File > scanPaths ( ) { <nl> + final List < File > allFiles = new ArrayList < > ( ) ; <nl> + <nl> + for ( int i = 0 ; i < paths . size ( ) ; i + + ) { <nl> + final Path currentPath = paths . get ( i ) ; <nl> + final List < File > pathFiles = scanPath ( currentPath , i + 1 ) ; <nl> + allFiles . addAll ( pathFiles ) ; <nl> + } <nl> + <nl> + return allFiles ; <nl> + } <nl> + <nl> + / * * <nl> + * Scans the given path and retrieves all files for the given path . <nl> + * <nl> + * @ param path A path to scan . <nl> + * @ param pathIndex The index of the given path . Used in log messages only . <nl> + * @ return A list of files , extracted from the given path . <nl> + * / <nl> + private List < File > scanPath ( Path path , int pathIndex ) { <nl> + final String [ ] resources = path . list ( ) ; <nl> + log ( pathIndex + " ) Scanning path " + path , Project . MSG _ VERBOSE ) ; <nl> + final List < File > allFiles = new ArrayList < > ( ) ; <nl> + int concreteFilesCount = 0 ; <nl> + <nl> + for ( String resource : resources ) { <nl> + final File file = new File ( resource ) ; <nl> + if ( file . isFile ( ) ) { <nl> + concreteFilesCount + + ; <nl> + allFiles . add ( file ) ; <nl> + } <nl> + else { <nl> + final DirectoryScanner scanner = new DirectoryScanner ( ) ; <nl> + scanner . setBasedir ( file ) ; <nl> + scanner . scan ( ) ; <nl> + final List < File > scannedFiles = retrieveAllScannedFiles ( scanner , pathIndex ) ; <nl> + allFiles . addAll ( scannedFiles ) ; <nl> + } <nl> + } <nl> + <nl> + if ( concreteFilesCount > 0 ) { <nl> + log ( String . format ( Locale . ROOT , " % d ) Adding % d files from path % s " , <nl> + pathIndex , concreteFilesCount , path ) , Project . MSG _ VERBOSE ) ; <nl> } <nl> + <nl> + return allFiles ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the list of files ( full path name ) to process . <nl> + * @ return the list of files included via the filesets . <nl> + * / <nl> + protected List < File > scanFileSets ( ) { <nl> + final List < File > allFiles = new ArrayList < > ( ) ; <nl> + <nl> for ( int i = 0 ; i < fileSets . size ( ) ; i + + ) { <nl> final FileSet fileSet = fileSets . get ( i ) ; <nl> final DirectoryScanner scanner = fileSet . getDirectoryScanner ( getProject ( ) ) ; <nl> scanner . scan ( ) ; <nl> <nl> - final String [ ] names = scanner . getIncludedFiles ( ) ; <nl> - log ( i + " ) Adding " + names . length + " files from directory " <nl> - + scanner . getBasedir ( ) , Project . MSG _ VERBOSE ) ; <nl> - <nl> - for ( String element : names ) { <nl> - final String pathname = scanner . getBasedir ( ) + File . separator <nl> - + element ; <nl> - list . add ( new File ( pathname ) ) ; <nl> - } <nl> + final List < File > scannedFiles = retrieveAllScannedFiles ( scanner , i ) ; <nl> + allFiles . addAll ( scannedFiles ) ; <nl> } <nl> <nl> - return list ; <nl> + return allFiles ; <nl> + } <nl> + <nl> + / * * <nl> + * Retrieves all matched files from the given scanner . <nl> + * <nl> + * @ param scanner A directory scanner . Note , that { @ link DirectoryScanner # scan ( ) } <nl> + * must be called before calling this method . <nl> + * @ param logIndex A log entry index . Used only for log messages . <nl> + * @ return A list of files , retrieved from the given scanner . <nl> + * / <nl> + private List < File > retrieveAllScannedFiles ( DirectoryScanner scanner , int logIndex ) { <nl> + final String [ ] fileNames = scanner . getIncludedFiles ( ) ; <nl> + log ( String . format ( Locale . ROOT , " % d ) Adding % d files from directory % s " , <nl> + logIndex , fileNames . length , scanner . getBasedir ( ) ) , Project . MSG _ VERBOSE ) ; <nl> + <nl> + return Arrays . stream ( fileNames ) <nl> + . map ( name - > scanner . getBasedir ( ) + File . separator + name ) <nl> + . map ( File : : new ) <nl> + . collect ( Collectors . toList ( ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java b / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java <nl> index 2f5ac0d . . adea93e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java <nl> @ @ - 20 , 6 + 20 , 8 @ @ <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> import java . io . File ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> import java . util . List ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AuditListener ; <nl> @ @ - 29 , 6 + 31 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . RootModule ; <nl> <nl> public class TestRootModuleChecker implements RootModule { <nl> private static boolean processed ; <nl> + private static List < File > filesToCheck ; <nl> <nl> @ Override <nl> public void configure ( Configuration configuration ) throws CheckstyleException { <nl> @ @ - 43 , 6 + 46 , 7 @ @ public class TestRootModuleChecker implements RootModule { <nl> @ Override <nl> public int process ( List < File > files ) throws CheckstyleException { <nl> processed = true ; <nl> + filesToCheck = new ArrayList < > ( files ) ; <nl> return 0 ; <nl> } <nl> <nl> @ @ - 62 , 5 + 66 , 10 @ @ public class TestRootModuleChecker implements RootModule { <nl> <nl> public static void reset ( ) { <nl> processed = false ; <nl> + filesToCheck = null ; <nl> + } <nl> + <nl> + public static List < File > getFilesToCheck ( ) { <nl> + return Collections . unmodifiableList ( filesToCheck ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> index eb5bdb4 . . 1317b95 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> @ @ - 19 , 7 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . ant ; <nl> <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> import static org . mockito . Mockito . when ; <nl> @ @ - 37 , 6 + 39 , 7 @ @ import org . apache . tools . ant . Project ; <nl> import org . apache . tools . ant . types . FileSet ; <nl> import org . apache . tools . ant . types . Path ; <nl> import org . apache . tools . ant . types . Reference ; <nl> + import org . apache . tools . ant . types . resources . FileResource ; <nl> import org . junit . Test ; <nl> import org . powermock . api . mockito . PowerMockito ; <nl> <nl> @ @ - 47 , 11 + 50 , 13 @ @ import com . puppycrawl . tools . checkstyle . XMLLogger ; <nl> <nl> public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> <nl> - public static final String FLAWLESS _ INPUT _ DIR = " ant / inputs / flawless / " ; <nl> + private static final String FLAWLESS _ INPUT _ DIR = " ant / checkstyleanttask / flawless / " ; <nl> private static final String FLAWLESS _ INPUT = <nl> FLAWLESS _ INPUT _ DIR + " InputCheckstyleAntTaskFlawless . java " ; <nl> - private static final String VIOLATED _ INPUT = " ant / inputs / InputCheckstyleAntTaskError . java " ; <nl> - private static final String WARNING _ INPUT = " ant / inputs / InputCheckstyleAntTaskWarning . java " ; <nl> + private static final String VIOLATED _ INPUT = <nl> + " ant / checkstyleanttask / InputCheckstyleAntTaskError . java " ; <nl> + private static final String WARNING _ INPUT = <nl> + " ant / checkstyleanttask / InputCheckstyleAntTaskWarning . java " ; <nl> private static final String CONFIG _ FILE = " ant / ant _ task _ test _ checks . xml " ; <nl> private static final String CUSTOM _ ROOT _ CONFIG _ FILE = " config - custom - root - module . xml " ; <nl> private static final String NOT _ EXISTING _ FILE = " target / not _ existing . xml " ; <nl> @ @ - 76 , 6 + 81 , 50 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public final void testPathsOneFile ( ) throws IOException { <nl> + / / given <nl> + TestRootModuleChecker . reset ( ) ; <nl> + <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( CUSTOM _ ROOT _ CONFIG _ FILE ) ; <nl> + final FileSet examinationFileSet = new FileSet ( ) ; <nl> + examinationFileSet . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + final Path sourcePath = new Path ( antTask . getProject ( ) ) ; <nl> + sourcePath . addFileset ( examinationFileSet ) ; <nl> + antTask . addPath ( sourcePath ) ; <nl> + <nl> + / / when <nl> + antTask . execute ( ) ; <nl> + <nl> + / / then <nl> + assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; <nl> + final List < File > filesToCheck = TestRootModuleChecker . getFilesToCheck ( ) ; <nl> + assertThat ( filesToCheck . size ( ) , is ( 1 ) ) ; <nl> + assertThat ( filesToCheck . get ( 0 ) . getAbsolutePath ( ) , is ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public final void testPathsDirectoryWithNestedFile ( ) throws IOException { <nl> + / / given <nl> + TestRootModuleChecker . reset ( ) ; <nl> + <nl> + final CheckstyleAntTask antTask = getCheckstyleAntTask ( CUSTOM _ ROOT _ CONFIG _ FILE ) ; <nl> + final FileResource fileResource = new FileResource ( <nl> + antTask . getProject ( ) , getPath ( FLAWLESS _ INPUT _ DIR ) ) ; <nl> + final Path sourcePath = new Path ( antTask . getProject ( ) ) ; <nl> + sourcePath . add ( fileResource ) ; <nl> + antTask . addPath ( sourcePath ) ; <nl> + <nl> + / / when <nl> + antTask . execute ( ) ; <nl> + <nl> + / / then <nl> + assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; <nl> + final List < File > filesToCheck = TestRootModuleChecker . getFilesToCheck ( ) ; <nl> + assertThat ( filesToCheck . size ( ) , is ( 1 ) ) ; <nl> + assertThat ( filesToCheck . get ( 0 ) . getAbsolutePath ( ) , is ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public final void testCustomRootModule ( ) throws IOException { <nl> TestRootModuleChecker . reset ( ) ; <nl> <nl> @ @ - 147 , 7 + 196 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( BuildException ex ) { <nl> - assertEquals ( " Must specify at least one of ' file ' or nested ' fileset ' or ' sourcepath ' . " , <nl> + assertEquals ( " Must specify at least one of ' file ' or nested ' fileset ' or ' path ' . " , <nl> ex . getMessage ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / InputCheckstyleAntTaskError . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / InputCheckstyleAntTaskError . java <nl> new file mode 100644 <nl> index 0000000 . . eaf82bd <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / InputCheckstyleAntTaskError . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package com . puppycrawl . tools . checkstyle . ant . checkstyleanttask ; <nl> + <nl> + / * * <nl> + * @ incomplete Some javadoc <nl> + * / <nl> + public final class InputCheckstyleAntTaskError { <nl> + private static final String FOO = " This line is longer then 70 characters . " ; <nl> + <nl> + private static final String FOOO = " This line is longer then 70 characters . " ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / InputCheckstyleAntTaskWarning . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / InputCheckstyleAntTaskWarning . java <nl> new file mode 100644 <nl> index 0000000 . . 22c8ecf <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / InputCheckstyleAntTaskWarning . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + package com . puppycrawl . tools . checkstyle . ant . checkstyleanttask ; <nl> + <nl> + public final class InputCheckstyleAntTaskWarning { <nl> + int foo ; <nl> + int foo1 ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / flawless / InputCheckstyleAntTaskFlawless . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / flawless / InputCheckstyleAntTaskFlawless . java <nl> new file mode 100644 <nl> index 0000000 . . 741c4aa <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / flawless / InputCheckstyleAntTaskFlawless . java <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + package com . puppycrawl . tools . checkstyle . ant . checkstyleanttask . flawless ; <nl> + <nl> + public final class InputCheckstyleAntTaskFlawless { <nl> + private String foo = " A short line " ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / InputCheckstyleAntTaskError . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / InputCheckstyleAntTaskError . java <nl> deleted file mode 100644 <nl> index ec7e4f1 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / InputCheckstyleAntTaskError . java <nl> + + + / dev / null <nl> @ @ - 1 , 10 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . ant . inputs ; <nl> - <nl> - / * * <nl> - * @ incomplete Some javadoc <nl> - * / <nl> - public final class InputCheckstyleAntTaskError { <nl> - private static final String FOO = " This line is longer then 70 characters . " ; <nl> - <nl> - private static final String FOOO = " This line is longer then 70 characters . " ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / InputCheckstyleAntTaskWarning . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / InputCheckstyleAntTaskWarning . java <nl> deleted file mode 100644 <nl> index 390148c . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / InputCheckstyleAntTaskWarning . java <nl> + + + / dev / null <nl> @ @ - 1 , 6 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . ant . inputs ; <nl> - <nl> - public final class InputCheckstyleAntTaskWarning { <nl> - int foo ; <nl> - int foo1 ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / flawless / InputCheckstyleAntTaskFlawless . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / flawless / InputCheckstyleAntTaskFlawless . java <nl> deleted file mode 100644 <nl> index 31aa462 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / flawless / InputCheckstyleAntTaskFlawless . java <nl> + + + / dev / null <nl> @ @ - 1 , 5 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . ant . inputs . flawless ; <nl> - <nl> - public final class InputCheckstyleAntTaskFlawless { <nl> - private String foo = " A short line " ; <nl> - } <nl> diff - - git a / src / xdocs / anttask . xml . vm b / src / xdocs / anttask . xml . vm <nl> index 5de3e63 . . 4417c0a 100644 <nl> - - - a / src / xdocs / anttask . xml . vm <nl> + + + b / src / xdocs / anttask . xml . vm <nl> @ @ - 101 , 7 + 101 , 33 @ @ <nl> < td > file < / td > <nl> < td > File to run checkstyle on . < / td > <nl> < td > <nl> - One of either < i > file < / i > or at least one nested < i > fileset < / i > <nl> + One of either < i > file < / i > or at least one nested < i > fileset < / i > or < i > path < / i > <nl> + element <nl> + < / td > <nl> + < / tr > <nl> + <nl> + < tr > <nl> + < td > fileset < / td > <nl> + < td > <nl> + A set of files to run checkstyle on . Nested attribute . <nl> + See < a href = " http : / / ant . apache . org / manual / Types / fileset . html " > fileset < / a > <nl> + ant documentation for details <nl> + < / td > <nl> + < td > <nl> + One of either < i > file < / i > or at least one nested < i > fileset < / i > or < i > path < / i > <nl> + element <nl> + < / td > <nl> + < / tr > <nl> + <nl> + < tr > <nl> + < td > path < / td > <nl> + < td > <nl> + A set of path to run checkstyle on . Nested attribute . <nl> + See < a href = " http : / / ant . apache . org / manual / using . html # path " > path < / a > <nl> + ant documentation for details <nl> + < / td > <nl> + < td > <nl> + One of either < i > file < / i > or at least one nested < i > fileset < / i > or < i > path < / i > <nl> element <nl> < / td > <nl> < / tr > <nl> @ @ - 212 , 6 + 238 , 11 @ @ <nl> significant changes regarding package name file handling . See < a <nl> href = " config . html # Packages " / > for details . <nl> < / p > <nl> + <nl> + < p > <nl> + Also note , that checkstyle ignores all duplicate files , <nl> + specified in the < i > file < / i > , < i > fileset < / i > or < i > path < / i > parameters <nl> + < / p > <nl> < / section > <nl> <nl> < section name = " Nested Elements " > <nl> @ @ - 221 , 6 + 252 , 8 @ @ <nl> href = " http : / / ant . apache . org / manual / Types / fileset . html " > & lt ; fileset & gt ; < / a > , <nl> < a <nl> href = " http : / / ant . apache . org / manual / using . html # path " > & lt ; classpath & gt ; < / a > , <nl> + < a <nl> + href = " http : / / ant . apache . org / manual / using . html # path " > & lt ; path & gt ; < / a > , <nl> < code > & lt ; formatter & gt ; < / code > , and < code > & lt ; property & gt ; < / code > . <nl> < / p > <nl> <nl> @ @ - 351 , 6 + 384 , 26 @ @ <nl> <nl> < p > <nl> < b > <nl> + Run checkstyle on a previously defined source path . <nl> + < / b > <nl> + < / p > <nl> + < source > <nl> + & lt ; ! - - Somewhere in your config - - & gt ; <nl> + & lt ; path id = " project . sourcepath " & gt ; <nl> + & lt ; fileset dir = " src " <nl> + includes = " * * / * " <nl> + excludes = " it / resources / * * / * , test / resources / * * / * , test / resources - noncompilable / * * / * " / & gt ; <nl> + & lt ; / path & gt ; <nl> + <nl> + & lt ; ! - - Actual checkstyle config - - & gt ; <nl> + & lt ; checkstyle config = & quot ; / path / to / site / sun _ checks . xml & quot ; & gt ; <nl> + & lt ; ! - - Refer to a previously defined source path - - & gt ; <nl> + & lt ; path refid = " project . sourcepath " / & gt ; <nl> + & lt ; / checkstyle & gt ; <nl> + < / source > <nl> + <nl> + < p > <nl> + < b > <nl> Run checkstyle on a set of files and output messages to standard <nl> output in plain format , and a file in XML format <nl> < / b >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> index a81ac42 . . 798a11f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . AnnotationUtility ; <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 28 , 6 + 29 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * Checks the number of parameters that a method or constructor has . <nl> * The default allowable number of parameters is 7 . <nl> * To change the number of allowable parameters , set property max . <nl> + * Allows to ignore number of parameters for methods with <nl> + * & # 064 ; { @ link java . lang . Override } annotation . <nl> * < / p > <nl> * < p > <nl> * An example of how to configure the check is : <nl> @ @ - 36 , 26 + 39 , 48 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * & lt ; module name = " ParameterNumber " / & gt ; <nl> * < / pre > <nl> * < p > <nl> - * An example of how to configure the check to allow 10 parameters is : <nl> + * An example of how to configure the check to allow 10 parameters <nl> + * and ignoring parameters for methods with & # 064 ; { @ link java . lang . Override } <nl> + * annotation is : <nl> * < / p > <nl> * < pre > <nl> * & lt ; module name = " ParameterNumber " & gt ; <nl> * & lt ; property name = " max " value = " 10 " / & gt ; <nl> + * & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> - <nl> + * Java code that will be ignored : <nl> + * < pre > <nl> + * < code > <nl> + * <nl> + * & # 064 ; Override <nl> + * public void needsLotsOfParameters ( int a , <nl> + * int b , int c , int d , int e , int f , int g , int h ) { <nl> + * . . . <nl> + * } <nl> + * < / code > <nl> + * < / pre > <nl> * @ author Oliver Burn <nl> * @ version 1 . 0 <nl> * / <nl> public class ParameterNumberCheck <nl> extends Check <nl> { <nl> + / * * { @ link Override Override } annotation name * / <nl> + private static final String OVERRIDE = " Override " ; <nl> + <nl> + / * * fully - qualified { @ link Override Override } annotation name * / <nl> + private static final String FQ _ OVERRIDE = " java . lang . " + OVERRIDE ; <nl> + <nl> / * * default maximum number of allowed parameters * / <nl> private static final int DEFAULT _ MAX _ PARAMETERS = 7 ; <nl> <nl> / * * the maximum number of allowed parameters * / <nl> private int mMax = DEFAULT _ MAX _ PARAMETERS ; <nl> <nl> + / * * ignore overridden methods * / <nl> + private boolean mIgnoreOverriddenMethods ; <nl> + <nl> / * * <nl> * Sets the maximum number of allowed parameters . <nl> * @ param aMax the max allowed parameters <nl> @ @ - 65 , 6 + 90 , 16 @ @ public class ParameterNumberCheck <nl> mMax = aMax ; <nl> } <nl> <nl> + / * * <nl> + * Ignore number of parameters for methods with <nl> + * & # 064 ; { @ link java . lang . Override } annotation . <nl> + * @ param aIgnoreOverriddenMethods set ignore overridden methods <nl> + * / <nl> + public void setIgnoreOverriddenMethods ( boolean aIgnoreOverriddenMethods ) <nl> + { <nl> + mIgnoreOverriddenMethods = aIgnoreOverriddenMethods ; <nl> + } <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> { <nl> @ @ - 76 , 9 + 111 , 23 @ @ public class ParameterNumberCheck <nl> { <nl> final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> final int count = params . getChildCount ( TokenTypes . PARAMETER _ DEF ) ; <nl> - if ( count > mMax ) { <nl> + if ( count > mMax & & ! ignoreNumberOfParameters ( aAST ) ) { <nl> final DetailAST name = aAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> log ( name . getLineNo ( ) , name . getColumnNo ( ) , " maxParam " , mMax , count ) ; <nl> } <nl> } <nl> + <nl> + / * * Determine whether to ignore number of parameters for the method . <nl> + * <nl> + * @ param aAST the token to process <nl> + * @ return true if this is overridden method and number of parameters should be ignored <nl> + * false otherwise <nl> + * / <nl> + private boolean ignoreNumberOfParameters ( DetailAST aAST ) <nl> + { <nl> + / / if you override a method , you have no power over the number of parameters <nl> + return mIgnoreOverriddenMethods <nl> + & & ( AnnotationUtility . containsAnnotation ( aAST , OVERRIDE ) <nl> + | | AnnotationUtility . containsAnnotation ( aAST , FQ _ OVERRIDE ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> index 7d293f2 . . 674b2b5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> @ @ - 63 , 4 + 63 , 17 @ @ public class ParameterNumberCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void shouldIgnoreMethodsWithOverrideAnnotation ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ParameterNumberCheck . class ) ; <nl> + checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 10 : More than 7 parameters ( found 8 ) . " , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputParameterNumberCheck . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java <nl> new file mode 100644 <nl> index 0000000 . . e90969d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + class InputParameterNumberCheckBase <nl> + { <nl> + / / method with many parameters <nl> + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + public class InputParameterNumberCheck extends InputParameterNumberCheckBase <nl> + { <nl> + @ Override <nl> + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ sizes . xml b / src / xdocs / config _ sizes . xml <nl> index 5ece323 . . d75c39e 100644 <nl> - - - a / src / xdocs / config _ sizes . xml <nl> + + + b / src / xdocs / config _ sizes . xml <nl> @ @ - 411 , 6 + 411 , 12 @ @ <nl> < td > 7 < / td > <nl> < / tr > <nl> < tr > <nl> + < td > ignoreOverriddenMethods < / td > <nl> + < td > Ignore number of parameters for methods with @ Override annotation < / td > <nl> + < td > < a href = " property _ types . html # boolean " > boolean < / a > < / td > <nl> + < td > false < / td > <nl> + < / tr > <nl> + < tr > <nl> < td > tokens < / td > <nl> < td > declarations to check < / td > <nl> <nl> @ @ - 448 , 6 + 454 , 28 @ @ <nl> & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> + < p > <nl> + To configure the check to ignore number of parameters for methods with @ Override or @ java . lang . Override annotation . <nl> + < / p > <nl> + < p > <nl> + Rationale : developer may need to override method with many parameters from 3 - rd party library . <nl> + In this case developer has no control over number of parameters . <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = " ParameterNumber " & gt ; <nl> + & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; <nl> + & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < p > <nl> + Java code example <nl> + < / p > <nl> + < source > <nl> + @ Override <nl> + public void needsLotsOfParameters ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + . . . <nl> + } <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Package " >

TEST DIFF:
diff - - git a / config / ant - phase - verify . xml b / config / ant - phase - verify . xml 
 index bd0b886 . . ddc18b1 100644 
 - - - a / config / ant - phase - verify . xml 
 + + + b / config / ant - phase - verify . xml 
 @ @ - 18 , 7 + 18 , 7 @ @ 
 < tstamp > 
 < format property = " STARTED " pattern = " dd / MM / yyyy hh : mm : ss aa " / > 
 < / tstamp > 
 - < echo > Checkstyle started : $ { STARTED } < / echo > 
 + < echo > Checkstyle started ( checkstyle _ checks . xml ) : $ { STARTED } < / echo > 
 
 < checkstyle config = " $ { check . config } " 
 failOnViolation = " false " 
 @ @ - 39 , 9 + 39 , 74 @ @ 
 < / checkstyle > 
 
 < tstamp > 
 - < format property = " FINISHED " pattern = " dd / MM / yyyy hh : mm : ss aa " / > 
 + < format property = " FINISHED " pattern = " dd / MM / yyyy hh : mm : ss aa " / > 
 < / tstamp > 
 - < echo > Checkstyle finished : $ { FINISHED } < / echo > 
 + < echo > Checkstyle finished ( checkstyle _ checks . xml ) : $ { FINISHED } < / echo > 
 + 
 + < tstamp > 
 + < format property = " STARTED " pattern = " dd / MM / yyyy hh : mm : ss aa " / > 
 + < / tstamp > 
 + < echo > Checkstyle started ( checkstyle _ non _ main _ files _ checks . xml ) : $ { STARTED } < / echo > 
 + 
 + < checkstyle config = " config / checkstyle _ non _ main _ files _ checks . xml " 
 + failOnViolation = " true " 
 + failureProperty = " checkstyle . failure . property " > 
 + < path > 
 + < fileset dir = " $ { basedir } " includes = " * * / * " > 
 + < exclude name = " . git / * * / * " / > 
 + < exclude name = " src / main / * * / * " / > 
 + < exclude name = " src / test / java / * * / * " / > 
 + < exclude name = " src / site / resources / images / * * / * " / > 
 + 
 + < ! - - Eclipse project files - - > 
 + < exclude name = " . settings / * * / * " / > 
 + < exclude name = " . externalToolBuilders / * * / * " / > 
 + < exclude name = " . classpath " / > 
 + < exclude name = " . project " / > 
 + 
 + < ! - - m2e - code - quality Eclipse IDE plugin temporary configuration files for Eclipse CS Checkstyle / PMD / FindBugs Plug - Ins - - > 
 + < exclude name = " . checkstyle / * * / * " / > 
 + < exclude name = " . pmd / * * / * " / > 
 + < exclude name = " . pmdruleset . xml " / > 
 + < exclude name = " . fbExcludeFilterFile / * * / * " / > 
 + 
 + < ! - - NetBeans project files - - > 
 + < exclude name = " * * / nbactions . xml " / > 
 + < exclude name = " * * / nb - configuration . xml " / > 
 + 
 + < ! - - Maven build folder - - > 
 + < exclude name = " target / * * / * " / > 
 + < exclude name = " bin / * * / * " / > 
 + 
 + < ! - - IDEA project files - - > 
 + < exclude name = " * . iml " / > 
 + < exclude name = " * . ipr " / > 
 + < exclude name = " * . iws " / > 
 + < exclude name = " . idea / * * / * " / > 
 + 
 + < ! - - Temp files - - > 
 + < exclude name = " * ~ " / > 
 + 
 + < ! - - Java Virtual machine crash logs - - > 
 + < exclude name = " hs _ err _ pid * " / > 
 + < exclude name = " replay _ pid * " / > 
 + 
 + < ! - - Apple MAC OSX hidden file - - > 
 + < exclude name = " . DS _ Store " / > 
 + 
 + < ! - - NonDex files - - > 
 + < exclude name = " . nondex / * * / * " / > 
 + < / fileset > 
 + < / path > 
 + < formatter type = " plain " / > 
 + < formatter type = " xml " toFile = " $ { mvn . project . build . directory } / cs _ non _ main _ files _ errors . xml " / > 
 + < classpath path = " $ { mvn . runtime _ classpath } " / > 
 + < / checkstyle > 
 + 
 + < tstamp > 
 + < format property = " FINISHED " pattern = " dd / MM / yyyy hh : mm : ss aa " / > 
 + < / tstamp > 
 + < echo > Checkstyle finished ( checkstyle _ non _ main _ files _ checks . xml ) : $ { FINISHED } < / echo > 
 
 < fail if = " checkstyle . failure . property " 
 message = " Checkstyle failed : $ { checkstyle . failure . property } " 
 diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index ad8ed39 . . 2c0c996 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 79 , 6 + 79 , 7 @ @ 
 < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | XdocsPagesTest | CheckstyleAntTaskTest ) \ . java " / > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " PropertyCacheFile \ . java " / > 
 < suppress checks = " ClassFanOutComplexity " files = " [ \ \ / ] Main \ . java " / > 
 + < suppress checks = " ClassFanOutComplexity " files = " CheckstyleAntTask \ . java " / > 
 < ! - - a lot of GUI elements is OK - - > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " ( TreeTable | MainFrame ) \ . java " / > 
 
 diff - - git a / pom . xml b / pom . xml 
 index 21f4a17 . . beb53a1 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 492 , 62 + 492 , 6 @ @ 
 < goal > check < / goal > 
 < / goals > 
 < / execution > 
 - < execution > 
 - < id > checkstyle - non - main - check < / id > 
 - < phase > verify < / phase > 
 - < configuration > 
 - < configLocation > $ { project . basedir } / config / checkstyle _ non _ main _ files _ checks . xml < / configLocation > 
 - < failOnViolation > true < / failOnViolation > 
 - < includeResources > false < / includeResources > 
 - < includeTestResources > true < / includeTestResources > 
 - < logViolationsToConsole > true < / logViolationsToConsole > 
 - < maxAllowedViolations > 0 < / maxAllowedViolations > 
 - < violationSeverity > error < / violationSeverity > 
 - < propertyExpansion > project . basedir = $ { project . basedir } < / propertyExpansion > 
 - < sourceDirectory > $ { project . basedir } < / sourceDirectory > 
 - < includes > * * / * < / includes > 
 - < ! - - All . gitignore files should be added to exclusions - - > 
 - < excludes > 
 - . git / * * / * , 
 - src / main / * * / * , 
 - src / test / java / * * / * , 
 - src / site / resources / images / * * / * , 
 - < ! - - Eclipse project files - - > 
 - . settings / * * / * , 
 - . externalToolBuilders / * * / * , 
 - . classpath , 
 - . project , 
 - < ! - - m2e - code - quality Eclipse IDE plugin temporary configuration files for Eclipse CS Checkstyle / PMD / FindBugs Plug - Ins - - > 
 - . checkstyle / * * / * , 
 - . pmd / * * / * , 
 - . pmdruleset . xml , 
 - . fbExcludeFilterFile / * * / * , 
 - < ! - - NetBeans project files - - > 
 - nbactions . xml , 
 - nb - configuration . xml , 
 - < ! - - Maven build folder - - > 
 - target / * * / * , 
 - bin / * * / * , 
 - < ! - - IDEA project files - - > 
 - * . iml , 
 - * . ipr , 
 - * . iws , 
 - . idea / * * / * , 
 - < ! - - Temp files - - > 
 - * ~ , 
 - < ! - - Java Virtual machine crash logs - - > 
 - hs _ err _ pid * , 
 - replay _ pid * , 
 - < ! - - Apple MAC OSX hidden file - - > 
 - . DS _ Store , 
 - < ! - - NonDex files - - > 
 - . nondex / * * / * , 
 - < / excludes > 
 - < / configuration > 
 - < goals > 
 - < goal > check < / goal > 
 - < / goals > 
 - < / execution > 
 < / executions > 
 < / plugin > 
 
 @ @ - 895 , 6 + 839 , 7 @ @ 
 < property name = " mvn . project . build . directory " value = " $ { project . build . directory } " / > 
 < property name = " mvn . project . version " value = " $ { project . version } " / > 
 < property name = " mvn . runtime _ classpath " refid = " maven . runtime . classpath " / > 
 + < property name = " project . basedir " value = " $ { project . basedir } " / > 
 < ant antfile = " config / ant - phase - verify . xml " / > 
 < / target > 
 < / configuration > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 index e24326f . . ed1602c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 @ @ - 26 , 11 + 26 , 13 @ @ import java . io . IOException ; 
 import java . io . OutputStream ; 
 import java . net . URL ; 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 import java . util . List ; 
 import java . util . Locale ; 
 import java . util . Map ; 
 import java . util . Properties ; 
 import java . util . ResourceBundle ; 
 + import java . util . stream . Collectors ; 
 
 import org . apache . tools . ant . AntClassLoader ; 
 import org . apache . tools . ant . BuildException ; 
 @ @ - 72 , 6 + 74 , 9 @ @ public class CheckstyleAntTask extends Task { 
 / * * Suffix for time string . * / 
 private static final String TIME _ SUFFIX = " ms . " ; 
 
 + / * * Contains the paths to process . * / 
 + private final List < Path > paths = new ArrayList < > ( ) ; 
 + 
 / * * Contains the filesets to process . * / 
 private final List < FileSet > fileSets = new ArrayList < > ( ) ; 
 
 @ @ - 152 , 6 + 157 , 14 @ @ public class CheckstyleAntTask extends Task { 
 } 
 
 / * * 
 + * Adds a path . 
 + * @ param path the path to add . 
 + * / 
 + public void addPath ( Path path ) { 
 + paths . add ( path ) ; 
 + } 
 + 
 + / * * 
 * Adds set of files ( nested fileset attribute ) . 
 * @ param fileSet the file set to add 
 * / 
 @ @ - 296 , 9 + 309 , 11 @ @ public class CheckstyleAntTask extends Task { 
 log ( " compiled on " + compileTimestamp , Project . MSG _ VERBOSE ) ; 
 
 / / Check for no arguments 
 - if ( fileName = = null & & fileSets . isEmpty ( ) ) { 
 + if ( fileName = = null 
 + & & fileSets . isEmpty ( ) 
 + & & paths . isEmpty ( ) ) { 
 throw new BuildException ( 
 - " Must specify at least one of ' file ' or nested ' fileset ' . " , 
 + " Must specify at least one of ' file ' or nested ' fileset ' or ' path ' . " , 
 getLocation ( ) ) ; 
 } 
 if ( configLocation = = null ) { 
 @ @ - 359 , 7 + 374 , 7 @ @ public class CheckstyleAntTask extends Task { 
 private void processFiles ( RootModule rootModule , final SeverityLevelCounter warningCounter , 
 final String checkstyleVersion ) { 
 final long startTime = System . currentTimeMillis ( ) ; 
 - final List < File > files = scanFileSets ( ) ; 
 + final List < File > files = getFilesToCheck ( ) ; 
 final long endTime = System . currentTimeMillis ( ) ; 
 log ( " To locate the files took " + ( endTime - startTime ) + TIME _ SUFFIX , 
 Project . MSG _ VERBOSE ) ; 
 @ @ - 509 , 33 + 524 , 114 @ @ public class CheckstyleAntTask extends Task { 
 
 / * * 
 * Returns the list of files ( full path name ) to process . 
 - * @ return the list of files included via the filesets . 
 + * @ return the list of files included via the fileName , filesets and paths . 
 * / 
 - protected List < File > scanFileSets ( ) { 
 - final List < File > list = new ArrayList < > ( ) ; 
 + protected List < File > getFilesToCheck ( ) { 
 + final List < File > allFiles = new ArrayList < > ( ) ; 
 if ( fileName ! = null ) { 
 / / oops we ' ve got an additional one to process , don ' t 
 / / forget it . No sweat , it ' s fully resolved via the setter . 
 log ( " Adding standalone file for audit " , Project . MSG _ VERBOSE ) ; 
 - list . add ( new File ( fileName ) ) ; 
 + allFiles . add ( new File ( fileName ) ) ; 
 + } 
 + 
 + final List < File > filesFromFileSets = scanFileSets ( ) ; 
 + allFiles . addAll ( filesFromFileSets ) ; 
 + 
 + final List < File > filesFromPaths = scanPaths ( ) ; 
 + allFiles . addAll ( filesFromPaths ) ; 
 + 
 + return allFiles ; 
 + } 
 + 
 + / * * 
 + * Retrieves all files from the defined paths . 
 + * @ return a list of files defined via paths . 
 + * / 
 + private List < File > scanPaths ( ) { 
 + final List < File > allFiles = new ArrayList < > ( ) ; 
 + 
 + for ( int i = 0 ; i < paths . size ( ) ; i + + ) { 
 + final Path currentPath = paths . get ( i ) ; 
 + final List < File > pathFiles = scanPath ( currentPath , i + 1 ) ; 
 + allFiles . addAll ( pathFiles ) ; 
 + } 
 + 
 + return allFiles ; 
 + } 
 + 
 + / * * 
 + * Scans the given path and retrieves all files for the given path . 
 + * 
 + * @ param path A path to scan . 
 + * @ param pathIndex The index of the given path . Used in log messages only . 
 + * @ return A list of files , extracted from the given path . 
 + * / 
 + private List < File > scanPath ( Path path , int pathIndex ) { 
 + final String [ ] resources = path . list ( ) ; 
 + log ( pathIndex + " ) Scanning path " + path , Project . MSG _ VERBOSE ) ; 
 + final List < File > allFiles = new ArrayList < > ( ) ; 
 + int concreteFilesCount = 0 ; 
 + 
 + for ( String resource : resources ) { 
 + final File file = new File ( resource ) ; 
 + if ( file . isFile ( ) ) { 
 + concreteFilesCount + + ; 
 + allFiles . add ( file ) ; 
 + } 
 + else { 
 + final DirectoryScanner scanner = new DirectoryScanner ( ) ; 
 + scanner . setBasedir ( file ) ; 
 + scanner . scan ( ) ; 
 + final List < File > scannedFiles = retrieveAllScannedFiles ( scanner , pathIndex ) ; 
 + allFiles . addAll ( scannedFiles ) ; 
 + } 
 + } 
 + 
 + if ( concreteFilesCount > 0 ) { 
 + log ( String . format ( Locale . ROOT , " % d ) Adding % d files from path % s " , 
 + pathIndex , concreteFilesCount , path ) , Project . MSG _ VERBOSE ) ; 
 } 
 + 
 + return allFiles ; 
 + } 
 + 
 + / * * 
 + * Returns the list of files ( full path name ) to process . 
 + * @ return the list of files included via the filesets . 
 + * / 
 + protected List < File > scanFileSets ( ) { 
 + final List < File > allFiles = new ArrayList < > ( ) ; 
 + 
 for ( int i = 0 ; i < fileSets . size ( ) ; i + + ) { 
 final FileSet fileSet = fileSets . get ( i ) ; 
 final DirectoryScanner scanner = fileSet . getDirectoryScanner ( getProject ( ) ) ; 
 scanner . scan ( ) ; 
 
 - final String [ ] names = scanner . getIncludedFiles ( ) ; 
 - log ( i + " ) Adding " + names . length + " files from directory " 
 - + scanner . getBasedir ( ) , Project . MSG _ VERBOSE ) ; 
 - 
 - for ( String element : names ) { 
 - final String pathname = scanner . getBasedir ( ) + File . separator 
 - + element ; 
 - list . add ( new File ( pathname ) ) ; 
 - } 
 + final List < File > scannedFiles = retrieveAllScannedFiles ( scanner , i ) ; 
 + allFiles . addAll ( scannedFiles ) ; 
 } 
 
 - return list ; 
 + return allFiles ; 
 + } 
 + 
 + / * * 
 + * Retrieves all matched files from the given scanner . 
 + * 
 + * @ param scanner A directory scanner . Note , that { @ link DirectoryScanner # scan ( ) } 
 + * must be called before calling this method . 
 + * @ param logIndex A log entry index . Used only for log messages . 
 + * @ return A list of files , retrieved from the given scanner . 
 + * / 
 + private List < File > retrieveAllScannedFiles ( DirectoryScanner scanner , int logIndex ) { 
 + final String [ ] fileNames = scanner . getIncludedFiles ( ) ; 
 + log ( String . format ( Locale . ROOT , " % d ) Adding % d files from directory % s " , 
 + logIndex , fileNames . length , scanner . getBasedir ( ) ) , Project . MSG _ VERBOSE ) ; 
 + 
 + return Arrays . stream ( fileNames ) 
 + . map ( name - > scanner . getBasedir ( ) + File . separator + name ) 
 + . map ( File : : new ) 
 + . collect ( Collectors . toList ( ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java b / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java 
 index 2f5ac0d . . adea93e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TestRootModuleChecker . java 
 @ @ - 20 , 6 + 20 , 8 @ @ 
 package com . puppycrawl . tools . checkstyle ; 
 
 import java . io . File ; 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 import java . util . List ; 
 
 import com . puppycrawl . tools . checkstyle . api . AuditListener ; 
 @ @ - 29 , 6 + 31 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . RootModule ; 
 
 public class TestRootModuleChecker implements RootModule { 
 private static boolean processed ; 
 + private static List < File > filesToCheck ; 
 
 @ Override 
 public void configure ( Configuration configuration ) throws CheckstyleException { 
 @ @ - 43 , 6 + 46 , 7 @ @ public class TestRootModuleChecker implements RootModule { 
 @ Override 
 public int process ( List < File > files ) throws CheckstyleException { 
 processed = true ; 
 + filesToCheck = new ArrayList < > ( files ) ; 
 return 0 ; 
 } 
 
 @ @ - 62 , 5 + 66 , 10 @ @ public class TestRootModuleChecker implements RootModule { 
 
 public static void reset ( ) { 
 processed = false ; 
 + filesToCheck = null ; 
 + } 
 + 
 + public static List < File > getFilesToCheck ( ) { 
 + return Collections . unmodifiableList ( filesToCheck ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 index eb5bdb4 . . 1317b95 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 @ @ - 19 , 7 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . ant ; 
 
 + import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 import static org . mockito . Mockito . when ; 
 @ @ - 37 , 6 + 39 , 7 @ @ import org . apache . tools . ant . Project ; 
 import org . apache . tools . ant . types . FileSet ; 
 import org . apache . tools . ant . types . Path ; 
 import org . apache . tools . ant . types . Reference ; 
 + import org . apache . tools . ant . types . resources . FileResource ; 
 import org . junit . Test ; 
 import org . powermock . api . mockito . PowerMockito ; 
 
 @ @ - 47 , 11 + 50 , 13 @ @ import com . puppycrawl . tools . checkstyle . XMLLogger ; 
 
 public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 
 - public static final String FLAWLESS _ INPUT _ DIR = " ant / inputs / flawless / " ; 
 + private static final String FLAWLESS _ INPUT _ DIR = " ant / checkstyleanttask / flawless / " ; 
 private static final String FLAWLESS _ INPUT = 
 FLAWLESS _ INPUT _ DIR + " InputCheckstyleAntTaskFlawless . java " ; 
 - private static final String VIOLATED _ INPUT = " ant / inputs / InputCheckstyleAntTaskError . java " ; 
 - private static final String WARNING _ INPUT = " ant / inputs / InputCheckstyleAntTaskWarning . java " ; 
 + private static final String VIOLATED _ INPUT = 
 + " ant / checkstyleanttask / InputCheckstyleAntTaskError . java " ; 
 + private static final String WARNING _ INPUT = 
 + " ant / checkstyleanttask / InputCheckstyleAntTaskWarning . java " ; 
 private static final String CONFIG _ FILE = " ant / ant _ task _ test _ checks . xml " ; 
 private static final String CUSTOM _ ROOT _ CONFIG _ FILE = " config - custom - root - module . xml " ; 
 private static final String NOT _ EXISTING _ FILE = " target / not _ existing . xml " ; 
 @ @ - 76 , 6 + 81 , 50 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public final void testPathsOneFile ( ) throws IOException { 
 + / / given 
 + TestRootModuleChecker . reset ( ) ; 
 + 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( CUSTOM _ ROOT _ CONFIG _ FILE ) ; 
 + final FileSet examinationFileSet = new FileSet ( ) ; 
 + examinationFileSet . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + final Path sourcePath = new Path ( antTask . getProject ( ) ) ; 
 + sourcePath . addFileset ( examinationFileSet ) ; 
 + antTask . addPath ( sourcePath ) ; 
 + 
 + / / when 
 + antTask . execute ( ) ; 
 + 
 + / / then 
 + assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; 
 + final List < File > filesToCheck = TestRootModuleChecker . getFilesToCheck ( ) ; 
 + assertThat ( filesToCheck . size ( ) , is ( 1 ) ) ; 
 + assertThat ( filesToCheck . get ( 0 ) . getAbsolutePath ( ) , is ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public final void testPathsDirectoryWithNestedFile ( ) throws IOException { 
 + / / given 
 + TestRootModuleChecker . reset ( ) ; 
 + 
 + final CheckstyleAntTask antTask = getCheckstyleAntTask ( CUSTOM _ ROOT _ CONFIG _ FILE ) ; 
 + final FileResource fileResource = new FileResource ( 
 + antTask . getProject ( ) , getPath ( FLAWLESS _ INPUT _ DIR ) ) ; 
 + final Path sourcePath = new Path ( antTask . getProject ( ) ) ; 
 + sourcePath . add ( fileResource ) ; 
 + antTask . addPath ( sourcePath ) ; 
 + 
 + / / when 
 + antTask . execute ( ) ; 
 + 
 + / / then 
 + assertTrue ( TestRootModuleChecker . isProcessed ( ) ) ; 
 + final List < File > filesToCheck = TestRootModuleChecker . getFilesToCheck ( ) ; 
 + assertThat ( filesToCheck . size ( ) , is ( 1 ) ) ; 
 + assertThat ( filesToCheck . get ( 0 ) . getAbsolutePath ( ) , is ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 + } 
 + 
 + @ Test 
 public final void testCustomRootModule ( ) throws IOException { 
 TestRootModuleChecker . reset ( ) ; 
 
 @ @ - 147 , 7 + 196 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( BuildException ex ) { 
 - assertEquals ( " Must specify at least one of ' file ' or nested ' fileset ' or ' sourcepath ' . " , 
 + assertEquals ( " Must specify at least one of ' file ' or nested ' fileset ' or ' path ' . " , 
 ex . getMessage ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / InputCheckstyleAntTaskError . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / InputCheckstyleAntTaskError . java 
 new file mode 100644 
 index 0000000 . . eaf82bd 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / InputCheckstyleAntTaskError . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package com . puppycrawl . tools . checkstyle . ant . checkstyleanttask ; 
 + 
 + / * * 
 + * @ incomplete Some javadoc 
 + * / 
 + public final class InputCheckstyleAntTaskError { 
 + private static final String FOO = " This line is longer then 70 characters . " ; 
 + 
 + private static final String FOOO = " This line is longer then 70 characters . " ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / InputCheckstyleAntTaskWarning . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / InputCheckstyleAntTaskWarning . java 
 new file mode 100644 
 index 0000000 . . 22c8ecf 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / InputCheckstyleAntTaskWarning . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package com . puppycrawl . tools . checkstyle . ant . checkstyleanttask ; 
 + 
 + public final class InputCheckstyleAntTaskWarning { 
 + int foo ; 
 + int foo1 ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / flawless / InputCheckstyleAntTaskFlawless . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / flawless / InputCheckstyleAntTaskFlawless . java 
 new file mode 100644 
 index 0000000 . . 741c4aa 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / flawless / InputCheckstyleAntTaskFlawless . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package com . puppycrawl . tools . checkstyle . ant . checkstyleanttask . flawless ; 
 + 
 + public final class InputCheckstyleAntTaskFlawless { 
 + private String foo = " A short line " ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / InputCheckstyleAntTaskError . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / InputCheckstyleAntTaskError . java 
 deleted file mode 100644 
 index ec7e4f1 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / InputCheckstyleAntTaskError . java 
 + + + / dev / null 
 @ @ - 1 , 10 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . ant . inputs ; 
 - 
 - / * * 
 - * @ incomplete Some javadoc 
 - * / 
 - public final class InputCheckstyleAntTaskError { 
 - private static final String FOO = " This line is longer then 70 characters . " ; 
 - 
 - private static final String FOOO = " This line is longer then 70 characters . " ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / InputCheckstyleAntTaskWarning . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / InputCheckstyleAntTaskWarning . java 
 deleted file mode 100644 
 index 390148c . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / InputCheckstyleAntTaskWarning . java 
 + + + / dev / null 
 @ @ - 1 , 6 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . ant . inputs ; 
 - 
 - public final class InputCheckstyleAntTaskWarning { 
 - int foo ; 
 - int foo1 ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / flawless / InputCheckstyleAntTaskFlawless . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / flawless / InputCheckstyleAntTaskFlawless . java 
 deleted file mode 100644 
 index 31aa462 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / ant / inputs / flawless / InputCheckstyleAntTaskFlawless . java 
 + + + / dev / null 
 @ @ - 1 , 5 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . ant . inputs . flawless ; 
 - 
 - public final class InputCheckstyleAntTaskFlawless { 
 - private String foo = " A short line " ; 
 - } 
 diff - - git a / src / xdocs / anttask . xml . vm b / src / xdocs / anttask . xml . vm 
 index 5de3e63 . . 4417c0a 100644 
 - - - a / src / xdocs / anttask . xml . vm 
 + + + b / src / xdocs / anttask . xml . vm 
 @ @ - 101 , 7 + 101 , 33 @ @ 
 < td > file < / td > 
 < td > File to run checkstyle on . < / td > 
 < td > 
 - One of either < i > file < / i > or at least one nested < i > fileset < / i > 
 + One of either < i > file < / i > or at least one nested < i > fileset < / i > or < i > path < / i > 
 + element 
 + < / td > 
 + < / tr > 
 + 
 + < tr > 
 + < td > fileset < / td > 
 + < td > 
 + A set of files to run checkstyle on . Nested attribute . 
 + See < a href = " http : / / ant . apache . org / manual / Types / fileset . html " > fileset < / a > 
 + ant documentation for details 
 + < / td > 
 + < td > 
 + One of either < i > file < / i > or at least one nested < i > fileset < / i > or < i > path < / i > 
 + element 
 + < / td > 
 + < / tr > 
 + 
 + < tr > 
 + < td > path < / td > 
 + < td > 
 + A set of path to run checkstyle on . Nested attribute . 
 + See < a href = " http : / / ant . apache . org / manual / using . html # path " > path < / a > 
 + ant documentation for details 
 + < / td > 
 + < td > 
 + One of either < i > file < / i > or at least one nested < i > fileset < / i > or < i > path < / i > 
 element 
 < / td > 
 < / tr > 
 @ @ - 212 , 6 + 238 , 11 @ @ 
 significant changes regarding package name file handling . See < a 
 href = " config . html # Packages " / > for details . 
 < / p > 
 + 
 + < p > 
 + Also note , that checkstyle ignores all duplicate files , 
 + specified in the < i > file < / i > , < i > fileset < / i > or < i > path < / i > parameters 
 + < / p > 
 < / section > 
 
 < section name = " Nested Elements " > 
 @ @ - 221 , 6 + 252 , 8 @ @ 
 href = " http : / / ant . apache . org / manual / Types / fileset . html " > & lt ; fileset & gt ; < / a > , 
 < a 
 href = " http : / / ant . apache . org / manual / using . html # path " > & lt ; classpath & gt ; < / a > , 
 + < a 
 + href = " http : / / ant . apache . org / manual / using . html # path " > & lt ; path & gt ; < / a > , 
 < code > & lt ; formatter & gt ; < / code > , and < code > & lt ; property & gt ; < / code > . 
 < / p > 
 
 @ @ - 351 , 6 + 384 , 26 @ @ 
 
 < p > 
 < b > 
 + Run checkstyle on a previously defined source path . 
 + < / b > 
 + < / p > 
 + < source > 
 + & lt ; ! - - Somewhere in your config - - & gt ; 
 + & lt ; path id = " project . sourcepath " & gt ; 
 + & lt ; fileset dir = " src " 
 + includes = " * * / * " 
 + excludes = " it / resources / * * / * , test / resources / * * / * , test / resources - noncompilable / * * / * " / & gt ; 
 + & lt ; / path & gt ; 
 + 
 + & lt ; ! - - Actual checkstyle config - - & gt ; 
 + & lt ; checkstyle config = & quot ; / path / to / site / sun _ checks . xml & quot ; & gt ; 
 + & lt ; ! - - Refer to a previously defined source path - - & gt ; 
 + & lt ; path refid = " project . sourcepath " / & gt ; 
 + & lt ; / checkstyle & gt ; 
 + < / source > 
 + 
 + < p > 
 + < b > 
 Run checkstyle on a set of files and output messages to standard 
 output in plain format , and a file in XML format 
 < / b >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 index a81ac42 . . 798a11f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 
 + import com . puppycrawl . tools . checkstyle . api . AnnotationUtility ; 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 28 , 6 + 29 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * Checks the number of parameters that a method or constructor has . 
 * The default allowable number of parameters is 7 . 
 * To change the number of allowable parameters , set property max . 
 + * Allows to ignore number of parameters for methods with 
 + * & # 064 ; { @ link java . lang . Override } annotation . 
 * < / p > 
 * < p > 
 * An example of how to configure the check is : 
 @ @ - 36 , 26 + 39 , 48 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * & lt ; module name = " ParameterNumber " / & gt ; 
 * < / pre > 
 * < p > 
 - * An example of how to configure the check to allow 10 parameters is : 
 + * An example of how to configure the check to allow 10 parameters 
 + * and ignoring parameters for methods with & # 064 ; { @ link java . lang . Override } 
 + * annotation is : 
 * < / p > 
 * < pre > 
 * & lt ; module name = " ParameterNumber " & gt ; 
 * & lt ; property name = " max " value = " 10 " / & gt ; 
 + * & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 - 
 + * Java code that will be ignored : 
 + * < pre > 
 + * < code > 
 + * 
 + * & # 064 ; Override 
 + * public void needsLotsOfParameters ( int a , 
 + * int b , int c , int d , int e , int f , int g , int h ) { 
 + * . . . 
 + * } 
 + * < / code > 
 + * < / pre > 
 * @ author Oliver Burn 
 * @ version 1 . 0 
 * / 
 public class ParameterNumberCheck 
 extends Check 
 { 
 + / * * { @ link Override Override } annotation name * / 
 + private static final String OVERRIDE = " Override " ; 
 + 
 + / * * fully - qualified { @ link Override Override } annotation name * / 
 + private static final String FQ _ OVERRIDE = " java . lang . " + OVERRIDE ; 
 + 
 / * * default maximum number of allowed parameters * / 
 private static final int DEFAULT _ MAX _ PARAMETERS = 7 ; 
 
 / * * the maximum number of allowed parameters * / 
 private int mMax = DEFAULT _ MAX _ PARAMETERS ; 
 
 + / * * ignore overridden methods * / 
 + private boolean mIgnoreOverriddenMethods ; 
 + 
 / * * 
 * Sets the maximum number of allowed parameters . 
 * @ param aMax the max allowed parameters 
 @ @ - 65 , 6 + 90 , 16 @ @ public class ParameterNumberCheck 
 mMax = aMax ; 
 } 
 
 + / * * 
 + * Ignore number of parameters for methods with 
 + * & # 064 ; { @ link java . lang . Override } annotation . 
 + * @ param aIgnoreOverriddenMethods set ignore overridden methods 
 + * / 
 + public void setIgnoreOverriddenMethods ( boolean aIgnoreOverriddenMethods ) 
 + { 
 + mIgnoreOverriddenMethods = aIgnoreOverriddenMethods ; 
 + } 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) 
 { 
 @ @ - 76 , 9 + 111 , 23 @ @ public class ParameterNumberCheck 
 { 
 final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 final int count = params . getChildCount ( TokenTypes . PARAMETER _ DEF ) ; 
 - if ( count > mMax ) { 
 + if ( count > mMax & & ! ignoreNumberOfParameters ( aAST ) ) { 
 final DetailAST name = aAST . findFirstToken ( TokenTypes . IDENT ) ; 
 log ( name . getLineNo ( ) , name . getColumnNo ( ) , " maxParam " , mMax , count ) ; 
 } 
 } 
 + 
 + / * * Determine whether to ignore number of parameters for the method . 
 + * 
 + * @ param aAST the token to process 
 + * @ return true if this is overridden method and number of parameters should be ignored 
 + * false otherwise 
 + * / 
 + private boolean ignoreNumberOfParameters ( DetailAST aAST ) 
 + { 
 + / / if you override a method , you have no power over the number of parameters 
 + return mIgnoreOverriddenMethods 
 + & & ( AnnotationUtility . containsAnnotation ( aAST , OVERRIDE ) 
 + | | AnnotationUtility . containsAnnotation ( aAST , FQ _ OVERRIDE ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 index 7d293f2 . . 674b2b5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 @ @ - 63 , 4 + 63 , 17 @ @ public class ParameterNumberCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void shouldIgnoreMethodsWithOverrideAnnotation ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ParameterNumberCheck . class ) ; 
 + checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; 
 + final String [ ] expected = { 
 + " 6 : 10 : More than 7 parameters ( found 8 ) . " , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputParameterNumberCheck . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java 
 new file mode 100644 
 index 0000000 . . e90969d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + class InputParameterNumberCheckBase 
 + { 
 + / / method with many parameters 
 + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + 
 + } 
 + } 
 + 
 + public class InputParameterNumberCheck extends InputParameterNumberCheckBase 
 + { 
 + @ Override 
 + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ sizes . xml b / src / xdocs / config _ sizes . xml 
 index 5ece323 . . d75c39e 100644 
 - - - a / src / xdocs / config _ sizes . xml 
 + + + b / src / xdocs / config _ sizes . xml 
 @ @ - 411 , 6 + 411 , 12 @ @ 
 < td > 7 < / td > 
 < / tr > 
 < tr > 
 + < td > ignoreOverriddenMethods < / td > 
 + < td > Ignore number of parameters for methods with @ Override annotation < / td > 
 + < td > < a href = " property _ types . html # boolean " > boolean < / a > < / td > 
 + < td > false < / td > 
 + < / tr > 
 + < tr > 
 < td > tokens < / td > 
 < td > declarations to check < / td > 
 
 @ @ - 448 , 6 + 454 , 28 @ @ 
 & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 + < p > 
 + To configure the check to ignore number of parameters for methods with @ Override or @ java . lang . Override annotation . 
 + < / p > 
 + < p > 
 + Rationale : developer may need to override method with many parameters from 3 - rd party library . 
 + In this case developer has no control over number of parameters . 
 + < / p > 
 + < source > 
 + & lt ; module name = " ParameterNumber " & gt ; 
 + & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; 
 + & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < p > 
 + Java code example 
 + < / p > 
 + < source > 
 + @ Override 
 + public void needsLotsOfParameters ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + . . . 
 + } 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Package " >
