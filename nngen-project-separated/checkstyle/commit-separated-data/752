BLEU SCORE: 0.04753622060013115

TEST MSG: Issue # 4398 : increase coverage of pitest - checkstyle - tree - walker profile to 89 %
GENERATED MSG: Issue # 2109 : CLI should print a file name where exception is happen

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 591b6b4 . . f80641b 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2007 , 15 + 2007 , 26 @ @ <nl> < param > com . puppycrawl . tools . checkstyle . DetailNodeTreeStringPrinter < / param > <nl> < param > com . puppycrawl . tools . checkstyle . AstTreeStringPrinter < / param > <nl> < param > com . puppycrawl . tools . checkstyle . TreeWalker < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . Main < / param > <nl> < / targetClasses > <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . DetailNodeTreeStringPrinterTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . AstTreeStringPrinterTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . TreeWalkerTest < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . MainTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . blocks . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . coding . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . design . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . header . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . imports . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . indentation . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . javadoc . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . metrics . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . modifiers . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . naming . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . regexp . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . sizes . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . whitespace . * < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 83 < / mutationThreshold > <nl> + < mutationThreshold > 89 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index 84dbf25 . . 49187e6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 178 , 8 + 178 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> final FileContents contents = new FileContents ( text ) ; <nl> final DetailAST rootAST = parse ( contents ) ; <nl> <nl> - getMessageCollector ( ) . reset ( ) ; <nl> - <nl> if ( ! ordinaryChecks . isEmpty ( ) ) { <nl> walk ( rootAST , contents , AstState . ORDINARY ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java <nl> index b2e84e1 . . 36613cc 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import org . junit . Test ; <nl> <nl> import antlr . NoViableAltException ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> <nl> public class AstTreeStringPrinterTest { <nl> <nl> @ @ - 70 , 6 + 71 , 18 @ @ public class AstTreeStringPrinterTest { <nl> } <nl> <nl> @ Test <nl> + public void testPrintAst ( ) throws Exception { <nl> + final FileText text = new FileText ( <nl> + new File ( getPath ( " InputAstTreeStringPrinterComments . java " ) ) . getAbsoluteFile ( ) , <nl> + System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; <nl> + final String actual = AstTreeStringPrinter . printAst ( text , false ) ; <nl> + final String expected = new String ( Files . readAllBytes ( Paths . get ( <nl> + getPath ( " expectedInputAstTreeStringPrinter . txt " ) ) ) , StandardCharsets . UTF _ 8 ) ; <nl> + <nl> + Assert . assertEquals ( expected , actual ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testParseFileWithComments ( ) throws Exception { <nl> final String actual = AstTreeStringPrinter . printFileAst ( <nl> new File ( getPath ( " InputAstTreeStringPrinterComments . java " ) ) , true ) <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java <nl> index 305af36 . . ec74142 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java <nl> @ @ - 20 , 8 + 20 , 10 @ @ <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; <nl> + import static org . junit . Assert . assertEquals ; <nl> <nl> import java . io . File ; <nl> + import java . lang . reflect . Method ; <nl> import java . nio . charset . StandardCharsets ; <nl> import java . nio . file . Files ; <nl> import java . nio . file . Paths ; <nl> @ @ - 29 , 8 + 31 , 11 @ @ import java . util . Locale ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> + import org . powermock . reflect . Whitebox ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class DetailNodeTreeStringPrinterTest { <nl> <nl> @ @ - 51 , 7 + 56 , 7 @ @ public class DetailNodeTreeStringPrinterTest { <nl> final String expected = new String ( Files . readAllBytes ( Paths . get ( <nl> getPath ( " expectedInputJavadocComment . txt " ) ) ) , StandardCharsets . UTF _ 8 ) <nl> . replaceAll ( " \ \ \ \ r \ \ \ \ n " , " \ \ \ \ n " ) ; <nl> - Assert . assertEquals ( expected , actual ) ; <nl> + assertEquals ( expected , actual ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 66 , 11 + 71 , 34 @ @ public class DetailNodeTreeStringPrinterTest { <nl> final String expected = " [ ERROR : 0 ] Javadoc comment at column 1 has parse error . " <nl> + " Missed HTML close tag ' qwe ' . Sometimes it means that close tag missed " <nl> + " for one of previous tags . " ; <nl> - Assert . assertEquals ( expected , ex . getMessage ( ) ) ; <nl> + assertEquals ( expected , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ Test <nl> + public void testCreationOfFakeCommentBlock ( ) throws Exception { <nl> + final Method createFakeBlockComment = <nl> + Whitebox . getMethod ( DetailNodeTreeStringPrinter . class , <nl> + " createFakeBlockComment " , String . class ) ; <nl> + <nl> + final DetailAST testCommentBlock = <nl> + ( DetailAST ) createFakeBlockComment . invoke ( null , " test _ comment " ) ; <nl> + assertEquals ( TokenTypes . BLOCK _ COMMENT _ BEGIN , testCommentBlock . getType ( ) ) ; <nl> + assertEquals ( " / * " , testCommentBlock . getText ( ) ) ; <nl> + assertEquals ( 0 , testCommentBlock . getLineNo ( ) ) ; <nl> + <nl> + final DetailAST contentCommentBlock = testCommentBlock . getFirstChild ( ) ; <nl> + assertEquals ( TokenTypes . COMMENT _ CONTENT , contentCommentBlock . getType ( ) ) ; <nl> + assertEquals ( " * test _ comment " , contentCommentBlock . getText ( ) ) ; <nl> + assertEquals ( 0 , contentCommentBlock . getLineNo ( ) ) ; <nl> + assertEquals ( - 1 , contentCommentBlock . getColumnNo ( ) ) ; <nl> + <nl> + final DetailAST endCommentBlock = contentCommentBlock . getNextSibling ( ) ; <nl> + assertEquals ( TokenTypes . BLOCK _ COMMENT _ END , endCommentBlock . getType ( ) ) ; <nl> + assertEquals ( " * / " , endCommentBlock . getText ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testNoUnnecessaryTextinJavadocAst ( ) throws Exception { <nl> final String actual = DetailNodeTreeStringPrinter . printFileAst ( <nl> new File ( getPath ( " InputNoUnnecessaryTextInJavadocAst . javadoc " ) ) ) <nl> @ @ - 78 , 6 + 106 , 6 @ @ public class DetailNodeTreeStringPrinterTest { <nl> final String expected = new String ( Files . readAllBytes ( Paths . get ( <nl> getPath ( " expectedNoUnnecessaryTextInJavadocAst . txt " ) ) ) , StandardCharsets . UTF _ 8 ) <nl> . replaceAll ( " \ \ \ \ r \ \ \ \ n " , " \ \ \ \ n " ) ; <nl> - Assert . assertEquals ( expected , actual ) ; <nl> + assertEquals ( expected , actual ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index dd26d31 . . 3955efa 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MSG _ INVALID _ PATTERN ; <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> import static org . mockito . Mockito . any ; <nl> @ @ - 48 , 11 + 49 , 13 @ @ import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . TemporaryFolder ; <nl> import org . junit . runner . RunWith ; <nl> + import org . mockito . internal . util . reflection . Whitebox ; <nl> import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . Context ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 351 , 6 + 354 , 31 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> TreeWalker . parse ( any ( FileContents . class ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testFinishLocalSetupFullyInitialized ( ) throws Exception { <nl> + final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> + final ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; <nl> + treeWalker . setClassLoader ( contextClassLoader ) ; <nl> + treeWalker . setSeverity ( " error " ) ; <nl> + treeWalker . setTabWidth ( 100 ) ; <nl> + treeWalker . finishLocalSetup ( ) ; <nl> + <nl> + final Context context = ( Context ) Whitebox . getInternalState ( treeWalker , " childContext " ) ; <nl> + assertEquals ( contextClassLoader , context . get ( " classLoader " ) ) ; <nl> + assertEquals ( " error " , context . get ( " severity " ) ) ; <nl> + assertEquals ( String . valueOf ( 100 ) , context . get ( " tabWidth " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCheckInitIsCalledInTreeWalker ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( VerifyInitCheck . class ) ; <nl> + final File file = temporaryFolder . newFile ( " file . pdf " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , file . getPath ( ) , expected ) ; <nl> + assertTrue ( VerifyInitCheck . isInitWasCalled ( ) ) ; <nl> + } <nl> + <nl> private static class BadJavaDocCheck extends AbstractCheck { <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> @ @ - 368 , 6 + 396 , 25 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> } <nl> } <nl> <nl> + private static class VerifyInitCheck extends AbstractCheck { <nl> + private static boolean initWasCalled ; <nl> + <nl> + @ Override <nl> + public int [ ] getDefaultTokens ( ) { <nl> + return CommonUtils . EMPTY _ INT _ ARRAY ; <nl> + } <nl> + <nl> + @ Override <nl> + public void init ( ) { <nl> + super . init ( ) ; <nl> + initWasCalled = true ; <nl> + } <nl> + <nl> + public static boolean isInitWasCalled ( ) { <nl> + return initWasCalled ; <nl> + } <nl> + } <nl> + <nl> private static class RequiredTokenIsNotInDefaultsCheck extends AbstractCheck { <nl> @ Override <nl> public int [ ] getRequiredTokens ( ) {
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> index dae6cd4 . . 348d5d0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> @ @ - 58 , 8 + 58 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> public void testAllChecksWithDefaultConfiguration ( ) throws Exception { <nl> <nl> final Set < Class < ? > > checkstyleChecks = getCheckstyleChecks ( ) ; <nl> - final String inputFilePath = " src / test / resources - noncompilable / " <nl> - + " com / puppycrawl / tools / checkstyle / InputDefaultConfig . java " ; <nl> + final String inputFilePath = getNonCompilablePath ( " InputDefaultConfig . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> for ( Class < ? > check : checkstyleChecks ) { <nl> @ @ - 69 , 8 + 68 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> / / Checks which have Check as a parent . <nl> if ( check . equals ( ImportControlCheck . class ) ) { <nl> / / ImportControlCheck must have the import control configuration file to avoid violation . <nl> - checkConfig . addAttribute ( " file " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ complete . xml " ) ; <nl> + checkConfig . addAttribute ( " file " , getPath ( " import - control _ complete . xml " ) ) ; <nl> } <nl> checker = createChecker ( checkConfig ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index cfa3873 . . c30edb7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 44 , 6 + 44 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> * @ author lkuehne <nl> * / <nl> public class ConfigurationLoaderTest { <nl> + private static String getConfigPath ( String filename ) { <nl> + return " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + filename ; <nl> + } <nl> <nl> private static Configuration loadConfiguration ( String name ) <nl> throws CheckstyleException { <nl> @ @ - 52 , 8 + 55 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> private static Configuration loadConfiguration ( <nl> String name , Properties props ) throws CheckstyleException { <nl> - final String fName = <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + name ; <nl> + final String fName = getConfigPath ( name ) ; <nl> <nl> return ConfigurationLoader . loadConfiguration ( <nl> fName , new PropertiesExpander ( props ) ) ; <nl> @ @ - 66 , 7 + 68 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> / / load config that ' s only found in the classpath <nl> final DefaultConfiguration config = ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / checkstyle _ checks . xml " , new PropertiesExpander ( props ) ) ; <nl> + getConfigPath ( " checkstyle _ checks . xml " ) , new PropertiesExpander ( props ) ) ; <nl> <nl> / / verify the root , and property substitution <nl> final Properties attributes = new Properties ( ) ; <nl> @ @ - 334 , 8 + 336 , 7 @ @ public class ConfigurationLoaderTest { <nl> final Properties props = new Properties ( ) ; <nl> props . setProperty ( " checkstyle . basedir " , " basedir " ) ; <nl> <nl> - final File file = new File ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / subdir / including . xml " ) ; <nl> + final File file = new File ( getConfigPath ( " subdir / including . xml " ) ) ; <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> file . toURI ( ) . toString ( ) , new PropertiesExpander ( props ) ) ; <nl> @ @ - 403 , 8 + 404 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " , <nl> + getConfigPath ( " config _ with _ ignore . xml " ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 416 , 8 + 416 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( new InputSource ( <nl> - new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " ) . toURI ( ) . toString ( ) ) , <nl> + new File ( getConfigPath ( " config _ with _ ignore . xml " ) ) . toURI ( ) . toString ( ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 429 , 8 + 428 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ checker _ ignore . xml " , <nl> + getConfigPath ( " config _ with _ checker _ ignore . xml " ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 460 , 9 + 458 , 7 @ @ public class ConfigurationLoaderTest { <nl> @ SuppressWarnings ( " deprecation " ) <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - new FileInputStream ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " ) , <nl> + new FileInputStream ( getConfigPath ( " config _ with _ ignore . xml " ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 806a1c1 . . 3b7bf29 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 55 , 6 + 55 , 14 @ @ public class MainTest { <nl> @ Rule <nl> public final SystemOutRule systemOut = new SystemOutRule ( ) . enableLog ( ) . mute ( ) ; <nl> <nl> + private static String getPath ( String filename ) { <nl> + return " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ; <nl> + } <nl> + <nl> + private static String getFilePath ( String filename ) throws IOException { <nl> + return new File ( getPath ( filename ) ) . getCanonicalPath ( ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { <nl> assertUtilsClassHasPrivateConstructor ( Main . class ) ; <nl> @ @ - 110 , 7 + 118 , 7 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 143 , 7 + 151 , 7 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 158 , 7 + 166 , 7 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , " / google _ checks . xml " , " - f " , " xmlp " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 198 , 8 + 206 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - non - existing - classname . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - non - existing - classname . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 213 , 8 + 221 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 223 , 10 + 231 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> final ResourceBundle compilationProperties = <nl> ResourceBundle . getBundle ( " checkstylecompilation " ) ; <nl> String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; <nl> @ @ - 239 , 9 + 244 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 255 , 9 + 260 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 266 , 10 + 271 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : " <nl> + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> @ @ - 280 , 8 + 282 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname2 . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 291 , 10 + 293 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : error : " <nl> + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> @ @ - 306 , 8 + 305 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 - error . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " config - classname2 - error . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 321 , 10 + 320 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , temporaryFolder . getRoot ( ) + " / output . txt " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 338 , 10 + 337 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 359 , 10 + 358 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 384 , 10 + 383 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 402 , 10 + 401 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - classname - prop . xml " , <nl> - " - p " , " src / test / resources / com / puppycrawl / tools / checkstyle / mycheckstyle . properties " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , <nl> + " - p " , getPath ( " mycheckstyle . properties " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 420 , 10 + 418 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - classname - prop . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , <nl> " - p " , " nonexisting . properties " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 443 , 9 + 440 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - Incorrect . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - Incorrect . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 522 , 10 + 518 , 7 @ @ public class MainTest { <nl> <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; <nl> @ @ - 541 , 8 + 534 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; <nl> + Main . main ( " - c " , getPath ( " config - filelength . xml " ) , <nl> + getPath ( " checks / metrics " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml <nl> new file mode 100644 <nl> index 0000000 . . 3bdfcad <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + < ? xml version = " 1 . 0 " ? > <nl> + < ! DOCTYPE import - control PUBLIC <nl> + " - / / Puppy Crawl / / DTD Import Control 1 . 0 / / EN " <nl> + " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 0 . dtd " > <nl> + <nl> + < import - control pkg = " com " > <nl> + < allow class = " some . class " / > <nl> + < disallow class = " another . class " local - only = " true " / > <nl> + < allow pkg = " some . pkg " / > <nl> + < disallow pkg = " another . pkg " local - only = " true " / > <nl> + < disallow pkg = " and . another . pkg " exact - match = " true " / > <nl> + < subpackage name = " puppycrawl " > <nl> + < disallow pkg = " some . pkg " / > <nl> + < disallow class = " some . class " / > <nl> + < / subpackage > <nl> + < / import - control > <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 591b6b4 . . f80641b 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2007 , 15 + 2007 , 26 @ @ 
 < param > com . puppycrawl . tools . checkstyle . DetailNodeTreeStringPrinter < / param > 
 < param > com . puppycrawl . tools . checkstyle . AstTreeStringPrinter < / param > 
 < param > com . puppycrawl . tools . checkstyle . TreeWalker < / param > 
 - < param > com . puppycrawl . tools . checkstyle . Main < / param > 
 < / targetClasses > 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . DetailNodeTreeStringPrinterTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . AstTreeStringPrinterTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . TreeWalkerTest < / param > 
 - < param > com . puppycrawl . tools . checkstyle . MainTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . blocks . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . coding . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . design . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . header . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . imports . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . indentation . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . javadoc . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . metrics . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . modifiers . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . naming . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . regexp . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . sizes . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . whitespace . * < / param > 
 < / targetTests > 
 - < mutationThreshold > 83 < / mutationThreshold > 
 + < mutationThreshold > 89 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index 84dbf25 . . 49187e6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 178 , 8 + 178 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 final FileContents contents = new FileContents ( text ) ; 
 final DetailAST rootAST = parse ( contents ) ; 
 
 - getMessageCollector ( ) . reset ( ) ; 
 - 
 if ( ! ordinaryChecks . isEmpty ( ) ) { 
 walk ( rootAST , contents , AstState . ORDINARY ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java 
 index b2e84e1 . . 36613cc 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import org . junit . Test ; 
 
 import antlr . NoViableAltException ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 
 public class AstTreeStringPrinterTest { 
 
 @ @ - 70 , 6 + 71 , 18 @ @ public class AstTreeStringPrinterTest { 
 } 
 
 @ Test 
 + public void testPrintAst ( ) throws Exception { 
 + final FileText text = new FileText ( 
 + new File ( getPath ( " InputAstTreeStringPrinterComments . java " ) ) . getAbsoluteFile ( ) , 
 + System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; 
 + final String actual = AstTreeStringPrinter . printAst ( text , false ) ; 
 + final String expected = new String ( Files . readAllBytes ( Paths . get ( 
 + getPath ( " expectedInputAstTreeStringPrinter . txt " ) ) ) , StandardCharsets . UTF _ 8 ) ; 
 + 
 + Assert . assertEquals ( expected , actual ) ; 
 + } 
 + 
 + @ Test 
 public void testParseFileWithComments ( ) throws Exception { 
 final String actual = AstTreeStringPrinter . printFileAst ( 
 new File ( getPath ( " InputAstTreeStringPrinterComments . java " ) ) , true ) 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java 
 index 305af36 . . ec74142 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java 
 @ @ - 20 , 8 + 20 , 10 @ @ 
 package com . puppycrawl . tools . checkstyle ; 
 
 import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; 
 + import static org . junit . Assert . assertEquals ; 
 
 import java . io . File ; 
 + import java . lang . reflect . Method ; 
 import java . nio . charset . StandardCharsets ; 
 import java . nio . file . Files ; 
 import java . nio . file . Paths ; 
 @ @ - 29 , 8 + 31 , 11 @ @ import java . util . Locale ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 + import org . powermock . reflect . Whitebox ; 
 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class DetailNodeTreeStringPrinterTest { 
 
 @ @ - 51 , 7 + 56 , 7 @ @ public class DetailNodeTreeStringPrinterTest { 
 final String expected = new String ( Files . readAllBytes ( Paths . get ( 
 getPath ( " expectedInputJavadocComment . txt " ) ) ) , StandardCharsets . UTF _ 8 ) 
 . replaceAll ( " \ \ \ \ r \ \ \ \ n " , " \ \ \ \ n " ) ; 
 - Assert . assertEquals ( expected , actual ) ; 
 + assertEquals ( expected , actual ) ; 
 } 
 
 @ Test 
 @ @ - 66 , 11 + 71 , 34 @ @ public class DetailNodeTreeStringPrinterTest { 
 final String expected = " [ ERROR : 0 ] Javadoc comment at column 1 has parse error . " 
 + " Missed HTML close tag ' qwe ' . Sometimes it means that close tag missed " 
 + " for one of previous tags . " ; 
 - Assert . assertEquals ( expected , ex . getMessage ( ) ) ; 
 + assertEquals ( expected , ex . getMessage ( ) ) ; 
 } 
 } 
 
 @ Test 
 + public void testCreationOfFakeCommentBlock ( ) throws Exception { 
 + final Method createFakeBlockComment = 
 + Whitebox . getMethod ( DetailNodeTreeStringPrinter . class , 
 + " createFakeBlockComment " , String . class ) ; 
 + 
 + final DetailAST testCommentBlock = 
 + ( DetailAST ) createFakeBlockComment . invoke ( null , " test _ comment " ) ; 
 + assertEquals ( TokenTypes . BLOCK _ COMMENT _ BEGIN , testCommentBlock . getType ( ) ) ; 
 + assertEquals ( " / * " , testCommentBlock . getText ( ) ) ; 
 + assertEquals ( 0 , testCommentBlock . getLineNo ( ) ) ; 
 + 
 + final DetailAST contentCommentBlock = testCommentBlock . getFirstChild ( ) ; 
 + assertEquals ( TokenTypes . COMMENT _ CONTENT , contentCommentBlock . getType ( ) ) ; 
 + assertEquals ( " * test _ comment " , contentCommentBlock . getText ( ) ) ; 
 + assertEquals ( 0 , contentCommentBlock . getLineNo ( ) ) ; 
 + assertEquals ( - 1 , contentCommentBlock . getColumnNo ( ) ) ; 
 + 
 + final DetailAST endCommentBlock = contentCommentBlock . getNextSibling ( ) ; 
 + assertEquals ( TokenTypes . BLOCK _ COMMENT _ END , endCommentBlock . getType ( ) ) ; 
 + assertEquals ( " * / " , endCommentBlock . getText ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testNoUnnecessaryTextinJavadocAst ( ) throws Exception { 
 final String actual = DetailNodeTreeStringPrinter . printFileAst ( 
 new File ( getPath ( " InputNoUnnecessaryTextInJavadocAst . javadoc " ) ) ) 
 @ @ - 78 , 6 + 106 , 6 @ @ public class DetailNodeTreeStringPrinterTest { 
 final String expected = new String ( Files . readAllBytes ( Paths . get ( 
 getPath ( " expectedNoUnnecessaryTextInJavadocAst . txt " ) ) ) , StandardCharsets . UTF _ 8 ) 
 . replaceAll ( " \ \ \ \ r \ \ \ \ n " , " \ \ \ \ n " ) ; 
 - Assert . assertEquals ( expected , actual ) ; 
 + assertEquals ( expected , actual ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index dd26d31 . . 3955efa 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MSG _ INVALID _ PATTERN ; 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 import static org . mockito . Mockito . any ; 
 @ @ - 48 , 11 + 49 , 13 @ @ import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . TemporaryFolder ; 
 import org . junit . runner . RunWith ; 
 + import org . mockito . internal . util . reflection . Whitebox ; 
 import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . Context ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 351 , 6 + 354 , 31 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 TreeWalker . parse ( any ( FileContents . class ) ) ; 
 } 
 
 + @ Test 
 + public void testFinishLocalSetupFullyInitialized ( ) throws Exception { 
 + final TreeWalker treeWalker = new TreeWalker ( ) ; 
 + final ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; 
 + treeWalker . setClassLoader ( contextClassLoader ) ; 
 + treeWalker . setSeverity ( " error " ) ; 
 + treeWalker . setTabWidth ( 100 ) ; 
 + treeWalker . finishLocalSetup ( ) ; 
 + 
 + final Context context = ( Context ) Whitebox . getInternalState ( treeWalker , " childContext " ) ; 
 + assertEquals ( contextClassLoader , context . get ( " classLoader " ) ) ; 
 + assertEquals ( " error " , context . get ( " severity " ) ) ; 
 + assertEquals ( String . valueOf ( 100 ) , context . get ( " tabWidth " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testCheckInitIsCalledInTreeWalker ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( VerifyInitCheck . class ) ; 
 + final File file = temporaryFolder . newFile ( " file . pdf " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , file . getPath ( ) , expected ) ; 
 + assertTrue ( VerifyInitCheck . isInitWasCalled ( ) ) ; 
 + } 
 + 
 private static class BadJavaDocCheck extends AbstractCheck { 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 @ @ - 368 , 6 + 396 , 25 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 } 
 } 
 
 + private static class VerifyInitCheck extends AbstractCheck { 
 + private static boolean initWasCalled ; 
 + 
 + @ Override 
 + public int [ ] getDefaultTokens ( ) { 
 + return CommonUtils . EMPTY _ INT _ ARRAY ; 
 + } 
 + 
 + @ Override 
 + public void init ( ) { 
 + super . init ( ) ; 
 + initWasCalled = true ; 
 + } 
 + 
 + public static boolean isInitWasCalled ( ) { 
 + return initWasCalled ; 
 + } 
 + } 
 + 
 private static class RequiredTokenIsNotInDefaultsCheck extends AbstractCheck { 
 @ Override 
 public int [ ] getRequiredTokens ( ) {

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 index dae6cd4 . . 348d5d0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 @ @ - 58 , 8 + 58 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 public void testAllChecksWithDefaultConfiguration ( ) throws Exception { 
 
 final Set < Class < ? > > checkstyleChecks = getCheckstyleChecks ( ) ; 
 - final String inputFilePath = " src / test / resources - noncompilable / " 
 - + " com / puppycrawl / tools / checkstyle / InputDefaultConfig . java " ; 
 + final String inputFilePath = getNonCompilablePath ( " InputDefaultConfig . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 for ( Class < ? > check : checkstyleChecks ) { 
 @ @ - 69 , 8 + 68 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 / / Checks which have Check as a parent . 
 if ( check . equals ( ImportControlCheck . class ) ) { 
 / / ImportControlCheck must have the import control configuration file to avoid violation . 
 - checkConfig . addAttribute ( " file " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ complete . xml " ) ; 
 + checkConfig . addAttribute ( " file " , getPath ( " import - control _ complete . xml " ) ) ; 
 } 
 checker = createChecker ( checkConfig ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index cfa3873 . . c30edb7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 44 , 6 + 44 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 * @ author lkuehne 
 * / 
 public class ConfigurationLoaderTest { 
 + private static String getConfigPath ( String filename ) { 
 + return " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + filename ; 
 + } 
 
 private static Configuration loadConfiguration ( String name ) 
 throws CheckstyleException { 
 @ @ - 52 , 8 + 55 , 7 @ @ public class ConfigurationLoaderTest { 
 
 private static Configuration loadConfiguration ( 
 String name , Properties props ) throws CheckstyleException { 
 - final String fName = 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + name ; 
 + final String fName = getConfigPath ( name ) ; 
 
 return ConfigurationLoader . loadConfiguration ( 
 fName , new PropertiesExpander ( props ) ) ; 
 @ @ - 66 , 7 + 68 , 7 @ @ public class ConfigurationLoaderTest { 
 
 / / load config that ' s only found in the classpath 
 final DefaultConfiguration config = ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / checkstyle _ checks . xml " , new PropertiesExpander ( props ) ) ; 
 + getConfigPath ( " checkstyle _ checks . xml " ) , new PropertiesExpander ( props ) ) ; 
 
 / / verify the root , and property substitution 
 final Properties attributes = new Properties ( ) ; 
 @ @ - 334 , 8 + 336 , 7 @ @ public class ConfigurationLoaderTest { 
 final Properties props = new Properties ( ) ; 
 props . setProperty ( " checkstyle . basedir " , " basedir " ) ; 
 
 - final File file = new File ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / subdir / including . xml " ) ; 
 + final File file = new File ( getConfigPath ( " subdir / including . xml " ) ) ; 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 file . toURI ( ) . toString ( ) , new PropertiesExpander ( props ) ) ; 
 @ @ - 403 , 8 + 404 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " , 
 + getConfigPath ( " config _ with _ ignore . xml " ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 416 , 8 + 416 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( new InputSource ( 
 - new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " ) . toURI ( ) . toString ( ) ) , 
 + new File ( getConfigPath ( " config _ with _ ignore . xml " ) ) . toURI ( ) . toString ( ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 429 , 8 + 428 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ checker _ ignore . xml " , 
 + getConfigPath ( " config _ with _ checker _ ignore . xml " ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 460 , 9 + 458 , 7 @ @ public class ConfigurationLoaderTest { 
 @ SuppressWarnings ( " deprecation " ) 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - new FileInputStream ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " ) , 
 + new FileInputStream ( getConfigPath ( " config _ with _ ignore . xml " ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 806a1c1 . . 3b7bf29 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 55 , 6 + 55 , 14 @ @ public class MainTest { 
 @ Rule 
 public final SystemOutRule systemOut = new SystemOutRule ( ) . enableLog ( ) . mute ( ) ; 
 
 + private static String getPath ( String filename ) { 
 + return " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ; 
 + } 
 + 
 + private static String getFilePath ( String filename ) throws IOException { 
 + return new File ( getPath ( filename ) ) . getCanonicalPath ( ) ; 
 + } 
 + 
 @ Test 
 public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { 
 assertUtilsClassHasPrivateConstructor ( Main . class ) ; 
 @ @ - 110 , 7 + 118 , 7 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 143 , 7 + 151 , 7 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 158 , 7 + 166 , 7 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , " / google _ checks . xml " , " - f " , " xmlp " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 198 , 8 + 206 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - non - existing - classname . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - non - existing - classname . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 213 , 8 + 221 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 223 , 10 + 231 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 final ResourceBundle compilationProperties = 
 ResourceBundle . getBundle ( " checkstylecompilation " ) ; 
 String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; 
 @ @ - 239 , 9 + 244 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 255 , 9 + 260 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 266 , 10 + 271 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : " 
 + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 @ @ - 280 , 8 + 282 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname2 . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 291 , 10 + 293 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : error : " 
 + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 @ @ - 306 , 8 + 305 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 - error . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " config - classname2 - error . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 321 , 10 + 320 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , temporaryFolder . getRoot ( ) + " / output . txt " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 338 , 10 + 337 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 359 , 10 + 358 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 384 , 10 + 383 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 402 , 10 + 401 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - classname - prop . xml " , 
 - " - p " , " src / test / resources / com / puppycrawl / tools / checkstyle / mycheckstyle . properties " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , 
 + " - p " , getPath ( " mycheckstyle . properties " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 420 , 10 + 418 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - classname - prop . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , 
 " - p " , " nonexisting . properties " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 443 , 9 + 440 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - Incorrect . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - Incorrect . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 522 , 10 + 518 , 7 @ @ public class MainTest { 
 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; 
 StringBuilder sb = new StringBuilder ( ) ; 
 sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; 
 String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; 
 @ @ - 541 , 8 + 534 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; 
 + Main . main ( " - c " , getPath ( " config - filelength . xml " ) , 
 + getPath ( " checks / metrics " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml 
 new file mode 100644 
 index 0000000 . . 3bdfcad 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + < ? xml version = " 1 . 0 " ? > 
 + < ! DOCTYPE import - control PUBLIC 
 + " - / / Puppy Crawl / / DTD Import Control 1 . 0 / / EN " 
 + " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 0 . dtd " > 
 + 
 + < import - control pkg = " com " > 
 + < allow class = " some . class " / > 
 + < disallow class = " another . class " local - only = " true " / > 
 + < allow pkg = " some . pkg " / > 
 + < disallow pkg = " another . pkg " local - only = " true " / > 
 + < disallow pkg = " and . another . pkg " exact - match = " true " / > 
 + < subpackage name = " puppycrawl " > 
 + < disallow pkg = " some . pkg " / > 
 + < disallow class = " some . class " / > 
 + < / subpackage > 
 + < / import - control > 
 \ No newline at end of file
