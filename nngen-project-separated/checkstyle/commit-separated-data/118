BLEU SCORE: 0.8801117367933934

TEST MSG: Issue # 5750 : aligned javadoc / xdoc for ImportOrderCheck
GENERATED MSG: Issue # 5750 : aligned javadoc / xdoc for CustomImportOrder

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index b62ea41 . . 9d56e24 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 31 , 163 + 31 , 342 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> <nl> / * * <nl> + * < p > <nl> * Checks the ordering / grouping of imports . Features are : <nl> + * < / p > <nl> * < ul > <nl> - * < li > groups imports : ensures that groups of imports come in a specific order <nl> - * ( e . g . , java . comes first , javax . comes second , then everything else ) < / li > <nl> - * < li > adds a separation between groups : ensures that a blank line sit between <nl> - * each group < / li > <nl> - * < li > import groups aren ' t separated internally : ensures that <nl> - * each group aren ' t separated internally by blank line or comment < / li > <nl> - * < li > sorts imports inside each group : ensures that imports within each group <nl> - * are in lexicographic order < / li > <nl> - * < li > sorts according to case : ensures that the comparison between import is <nl> - * case sensitive < / li > <nl> - * < li > groups static imports : ensures that static imports are at the top ( or the <nl> - * bottom ) of all the imports , or above ( or under ) each group , or are treated <nl> - * like non static imports ( @ see { @ link ImportOrderOption } < / li > <nl> - * < / ul > . <nl> - * <nl> + * < li > <nl> + * groups type / static imports : ensures that groups of imports come in a specific order <nl> + * ( e . g . , java . comes first , javax . comes second , then everything else ) <nl> + * < / li > <nl> + * < li > <nl> + * adds a separation between type import groups : ensures that a blank line sit between each group <nl> + * < / li > <nl> + * < li > <nl> + * type / static import groups aren ' t separated internally : ensures that each group aren ' t separated <nl> + * internally by blank line or comment <nl> + * < / li > <nl> + * < li > <nl> + * sorts type / static imports inside each group : ensures that imports within each group are in <nl> + * lexicographic order <nl> + * < / li > <nl> + * < li > <nl> + * sorts according to case : ensures that the comparison between imports is case sensitive , in <nl> + * < a href = " https : / / en . wikipedia . org / wiki / ASCII # Order " > ASCII sort order < / a > <nl> + * < / li > <nl> + * < li > <nl> + * arrange static imports : ensures the relative order between type imports and static imports <nl> + * ( see < a href = " property _ types . html # importOrder " > import orders < / a > ) <nl> + * < / li > <nl> + * < / ul > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code option } - specify policy on the relative order between type imports and static <nl> + * imports . <nl> + * Default value is { @ code under } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code groups } - specify list of < b > type import < / b > groups ( every group identified <nl> + * either by a common prefix string , or by a regular expression enclosed in forward slashes <nl> + * ( e . g . { @ code / regexp / } ) . All type imports , which does not match any group , falls into an <nl> + * additional group , located at the end . <nl> + * Thus , the empty list of type groups ( the default value ) means one group for all type imports . <nl> + * Default value is { @ code { } } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code ordered } - control whether type imports within each group should be <nl> + * sorted . <nl> + * It doesn ' t affect sorting for static imports . <nl> + * Default value is true . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code separated } - control whether type import groups should be separated <nl> + * by , at least , one blank line or comment and aren ' t separated internally . <nl> + * It doesn ' t affect separations for static imports . <nl> + * Default value is false . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code separatedStaticGroups } - control whether static import groups should <nl> + * be separated by , at least , one blank line or comment and aren ' t separated internally . <nl> + * This property has effect only when the property { @ code option } is is set to { @ code top } <nl> + * or { @ code bottom } . <nl> + * Default value is false . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code caseSensitive } - control whether string comparison should be case <nl> + * sensitive or not . Case sensitive sorting is in <nl> + * < a href = " https : / / en . wikipedia . org / wiki / ASCII # Order " > ASCII sort order < / a > . <nl> + * It affects both type imports and static imports . <nl> + * Default value is true . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code staticGroups } - specify list of < b > static < / b > import groups ( every group <nl> + * identified either by a common prefix string , or by a regular expression enclosed in forward <nl> + * slashes ( e . g . { @ code / regexp / } ) . All static imports , which does not match any group , falls into an <nl> + * additional group , located at the end . Thus , the empty list of static groups ( the default value ) <nl> + * means one group for all static imports . This property has effect only when the property <nl> + * { @ code option } is set to { @ code top } or { @ code bottom } . <nl> + * Default value is { @ code { } } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code sortStaticImportsAlphabetically } - control whether <nl> + * < b > static imports < / b > located at < b > top < / b > or < b > bottom < / b > are sorted within the group . <nl> + * Default value is false . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code useContainerOrderingForStatic } - control whether to use container <nl> + * ordering ( Eclipse IDE term ) for static imports or not . <nl> + * Default value is false . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code tokens } - tokens to check <nl> + * Default value is : <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STATIC _ IMPORT " > <nl> + * STATIC _ IMPORT < / a > . <nl> + * < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * To configure the check so that it matches default Eclipse formatter configuration <nl> + * ( tested on Kepler and Luna releases ) : <nl> + * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * group of static imports is on the top <nl> + * < / li > <nl> + * < li > <nl> + * groups of type imports : " java " and " javax " packages first , then " org " and then all other imports <nl> + * < / li > <nl> + * < li > <nl> + * imports will be sorted in the groups <nl> + * < / li > <nl> + * < li > <nl> + * groups are separated by , at least , one blank line and aren ' t separated internally <nl> + * < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * Notes : <nl> + * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * " com " package is not mentioned on configuration , because it is ignored by Eclipse Kepler and Luna <nl> + * ( looks like Eclipse defect ) <nl> + * < / li > <nl> + * < li > <nl> + * configuration below doesn ' t work in all 100 % cases due to inconsistent behavior prior to <nl> + * Mars release , but covers most scenarios <nl> + * < / li > <nl> + * < / ul > <nl> * < pre > <nl> - * Properties : <nl> + * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; <nl> + * & lt ; property name = & quot ; groups & quot ; value = & quot ; / ^ java \ . / , javax , org & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; separated & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; option & quot ; value = & quot ; above & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> * < / pre > <nl> - * < table summary = " Properties " border = " 1 " > <nl> - * < tr > < th > name < / th > < th > Description < / th > < th > type < / th > < th > default value < / th > < / tr > <nl> - * < tr > < td > option < / td > < td > policy on the relative order between regular imports and static <nl> - * imports < / td > < td > { @ link ImportOrderOption } < / td > < td > under < / td > < / tr > <nl> - * < tr > < td > groups < / td > < td > list of type import groups ( every group identified either by a <nl> - * common prefix string , or by a regular expression enclosed in forward slashes <nl> - * ( e . g . / regexp / ) . All type imports , which does not match any group , <nl> - * falls into an additional group , located at the end . Thus , the empty list of type groups <nl> - * ( the default value ) means one group for all type imports < / td > <nl> - * < td > list of strings < / td > < td > empty list < / td > < / tr > <nl> - * < tr > < td > ordered < / td > < td > whether type imports within group should be sorted < / td > <nl> - * < td > Boolean < / td > < td > true < / td > < / tr > <nl> - * < tr > < td > separated < / td > < td > whether type imports groups should be separated by , at least , <nl> - * one blank line or comment and aren ' t separated internally <nl> - * < / td > < td > Boolean < / td > < td > false < / td > < / tr > <nl> - * < tr > < td > separatedStaticGroups < / td > < td > whether static imports should be separated by , at least , <nl> - * one blank line or comment and aren ' t separated internally <nl> - * < / td > < td > Boolean < / td > < td > false < / td > < / tr > <nl> - * < tr > < td > caseSensitive < / td > < td > whether string comparison should be case sensitive or not . <nl> - * Case sensitive sorting is in ASCII sort order < / td > < td > Boolean < / td > < td > true < / td > < / tr > <nl> - * < tr > < td > staticGroups < / td > < td > list of static import groups ( every group identified either by a <nl> - * common prefix string , or by a regular expression enclosed in forward slashes <nl> - * ( e . g . / regexp / ) . All static imports , which does not match any group , <nl> - * falls into an additional group , located at the end . Thus , the empty list of static groups <nl> - * ( the default value ) means one group for all static imports < / td > <nl> - * < td > list of strings < / td > < td > empty list < / td > < / tr > <nl> - * < tr > < td > sortStaticImportsAlphabetically < / td > < td > whether static imports located at top or <nl> - * bottom are sorted within the group . < / td > < td > Boolean < / td > < td > false < / td > < / tr > <nl> - * < tr > < td > useContainerOrderingForStatic < / td > < td > whether to use container ordering <nl> - * ( Eclipse IDE term ) for static imports or not < / td > < td > Boolean < / td > < td > false < / td > < / tr > <nl> - * < / table > <nl> - * <nl> * < p > <nl> - * Example : <nl> + * To configure the check so that it matches default Eclipse formatter configuration <nl> + * ( tested on Mars release ) : <nl> * < / p > <nl> - * < p > To configure the check so that it matches default Eclipse formatter configuration <nl> - * ( tested on Kepler , Luna and Mars ) : < / p > <nl> * < ul > <nl> - * < li > group of static imports is on the top < / li > <nl> - * < li > groups of non - static imports : & quot ; java & quot ; then & quot ; javax & quot ; <nl> - * packages first , then & quot ; org & quot ; and then all other imports < / li > <nl> - * < li > imports will be sorted in the groups < / li > <nl> - * < li > groups are separated by , at least , one blank line and aren ' t separated internally < / li > <nl> + * < li > <nl> + * group of static imports is on the top <nl> + * < / li > <nl> + * < li > <nl> + * groups of type imports : " java " and " javax " packages first , then " org " and " com " , <nl> + * then all other imports as one group <nl> + * < / li > <nl> + * < li > <nl> + * imports will be sorted in the groups <nl> + * < / li > <nl> + * < li > <nl> + * groups are separated by , at least , one blank line and aren ' t separated internally <nl> + * < / li > <nl> * < / ul > <nl> - * <nl> * < pre > <nl> * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; <nl> - * & lt ; property name = & quot ; groups & quot ; value = & quot ; / ^ javax ? \ . / , org & quot ; / & gt ; <nl> - * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; <nl> - * & lt ; property name = & quot ; separated & quot ; value = & quot ; true & quot ; / & gt ; <nl> - * & lt ; property name = & quot ; option & quot ; value = & quot ; above & quot ; / & gt ; <nl> - * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; groups & quot ; value = & quot ; / ^ java \ . / , javax , org , com & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; separated & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; option & quot ; value = & quot ; above & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> - * <nl> - * < p > To configure the check so that it matches default IntelliJ IDEA formatter configuration <nl> - * ( tested on v14 ) : < / p > <nl> + * < p > <nl> + * To configure the check so that it matches default IntelliJ IDEA formatter configuration <nl> + * ( tested on v2018 . 2 ) : <nl> + * < / p > <nl> * < ul > <nl> - * < li > group of static imports is on the bottom < / li > <nl> - * < li > groups of non - static imports : all imports except of & quot ; javax & quot ; and <nl> - * & quot ; java & quot ; , then & quot ; javax & quot ; and & quot ; java & quot ; < / li > <nl> - * < li > imports will be sorted in the groups < / li > <nl> - * < li > groups are separated by , at least , one blank line and aren ' t separated internally < / li > <nl> + * < li > <nl> + * group of static imports is on the bottom <nl> + * < / li > <nl> + * < li > <nl> + * groups of type imports : all imports except of " javax " and " java " , then " javax " and " java " <nl> + * < / li > <nl> + * < li > <nl> + * imports will be sorted in the groups <nl> + * < / li > <nl> + * < li > <nl> + * groups are separated by , at least , one blank line and aren ' t separated internally <nl> + * < / li > <nl> * < / ul > <nl> - * <nl> - * < p > <nl> - * Note : & quot ; separated & quot ; option is disabled because IDEA default has blank line <nl> - * between & quot ; java & quot ; and static imports , and no blank line between <nl> - * & quot ; javax & quot ; and & quot ; java & quot ; <nl> - * < / p > <nl> - * <nl> + * < p > <nl> + * Note : a < a href = " config _ filters . html # SuppressionFilter " > suppression filter < / a > is needed because <nl> + * IDEA has no blank line between " javax " and " java " . <nl> + * ImportOrder has a limitation by design to enforce an empty line between groups ( " java " , " javax " ) . <nl> + * There is no flexibility to enforce empty lines between some groups and no empty lines between <nl> + * other groups . <nl> + * < / p > <nl> + * < p > <nl> + * Note : " separated " option is disabled because IDEA default has blank line between " java " and <nl> + * static imports , and no blank line between " javax " and " java " . <nl> + * < / p > <nl> * < pre > <nl> * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; <nl> - * & lt ; property name = & quot ; groups & quot ; value = & quot ; * , javax , java & quot ; / & gt ; <nl> - * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; <nl> - * & lt ; property name = & quot ; separated & quot ; value = & quot ; false & quot ; / & gt ; <nl> - * & lt ; property name = & quot ; option & quot ; value = & quot ; bottom & quot ; / & gt ; <nl> - * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; groups & quot ; value = & quot ; * , javax , java & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; separated & quot ; value = & quot ; false & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; option & quot ; value = & quot ; bottom & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> + * < pre > <nl> + * & lt ; ? xml version = & quot ; 1 . 0 & quot ; ? & gt ; <nl> + * & lt ; ! DOCTYPE suppressions PUBLIC <nl> + * & quot ; - / / Checkstyle / / DTD SuppressionFilter Configuration 1 . 2 / / EN & quot ; <nl> + * & quot ; https : / / checkstyle . org / dtds / suppressions _ 1 _ 2 . dtd & quot ; & gt ; <nl> * <nl> - * < p > To configure the check so that it matches default NetBeans formatter configuration <nl> - * ( tested on v8 ) : < / p > <nl> + * & lt ; suppressions & gt ; <nl> + * & lt ; ! - - message contains no message text to work well in multi - language environments - - & gt ; <nl> + * & lt ; suppress checks = & quot ; ImportOrder & quot ; message = & quot ; ^ ' java \ . . * ' . * & quot ; / & gt ; <nl> + * & lt ; / suppressions & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check so that it matches default NetBeans formatter configuration <nl> + * ( tested on v8 ) : <nl> + * < / p > <nl> * < ul > <nl> - * < li > groups of non - static imports are not defined , all imports will be sorted <nl> - * as a one group < / li > <nl> - * < li > static imports are not separated , they will be sorted along with other imports < / li > <nl> + * < li > <nl> + * groups of type imports are not defined , all imports will be sorted as a one group <nl> + * < / li > <nl> + * < li > <nl> + * static imports are not separated , they will be sorted along with other imports <nl> + * < / li > <nl> * < / ul > <nl> - * <nl> * < pre > <nl> * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; <nl> - * & lt ; property name = & quot ; option & quot ; value = & quot ; inflow & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; option & quot ; value = & quot ; inflow & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> - * <nl> * < p > <nl> - * Group descriptions enclosed in slashes are interpreted as regular <nl> - * expressions . If multiple groups match , the one matching a longer <nl> - * substring of the imported name will take precedence , with ties <nl> - * broken first in favor of earlier matches and finally in favor of <nl> - * the first matching group . <nl> + * Group descriptions enclosed in slashes are interpreted as regular expressions . <nl> + * If multiple groups match , the one matching a longer substring of the imported name <nl> + * will take precedence , with ties broken first in favor of earlier matches and finally <nl> + * in favor of the first matching group . <nl> * < / p > <nl> - * <nl> * < p > <nl> - * There is always a wildcard group to which everything not in a named group <nl> - * belongs . If an import does not match a named group , the group belongs to <nl> - * this wildcard group . The wildcard group position can be specified using the <nl> - * { @ code * } character . <nl> + * There is always a wildcard group to which everything not in a named group belongs . <nl> + * If an import does not match a named group , the group belongs to this wildcard group . <nl> + * The wildcard group position can be specified using the { @ code * } character . <nl> * < / p > <nl> - * <nl> - * < p > Check also has on option making it more flexible : <nl> - * < b > sortStaticImportsAlphabetically < / b > - sets whether static imports grouped by <nl> - * < b > top < / b > or < b > bottom < / b > option should be sorted alphabetically or <nl> - * not , default value is < b > false < / b > . It is applied to static imports grouped <nl> - * with < b > top < / b > or < b > bottom < / b > options . < br > <nl> - * This option is helping in reconciling of this Check and other tools like <nl> - * Eclipse ' s Organize Imports feature . <nl> + * < p > <nl> + * Check also has on option making it more flexible : < b > sortStaticImportsAlphabetically < / b > <nl> + * - sets whether static imports grouped by < b > top < / b > or < b > bottom < / b > option should be sorted <nl> + * alphabetically or not , default value is < b > false < / b > . It is applied to static imports grouped <nl> + * with < b > top < / b > or < b > bottom < / b > options . This option is helping in reconciling of this <nl> + * Check and other tools like Eclipse ' s Organize Imports feature . <nl> * < / p > <nl> * < p > <nl> - * To configure the Check allows static imports grouped to the < b > top < / b > <nl> - * being sorted alphabetically : <nl> + * To configure the Check allows static imports grouped to the < b > top < / b > being sorted <nl> + * alphabetically : <nl> * < / p > <nl> - * <nl> * < pre > <nl> - * { @ code <nl> - * import static java . lang . Math . abs ; <nl> + * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; <nl> + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; option & quot ; value = & quot ; top & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < pre > <nl> + * import static java . lang . Math . PI ; <nl> + * import static java . lang . Math . abs ; / / OK , alphabetical case sensitive ASCII order , ' P ' & lt ; ' a ' <nl> * import static org . abego . treelayout . Configuration . AlignmentInLevel ; / / OK , alphabetical order <nl> * <nl> * import org . abego . * ; <nl> * <nl> - * import java . util . Set ; <nl> + * import java . util . Set ; / / Wrong order for ' java . util . Set ' import . <nl> * <nl> * public class SomeClass { . . . } <nl> - * } <nl> * < / pre > <nl> + * < p > <nl> + * To configure the Check with groups of static imports : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; <nl> + * & lt ; property name = & quot ; staticGroups & quot ; value = & quot ; org , java & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < pre > <nl> + * import static org . abego . treelayout . Configuration . AlignmentInLevel ; / / Group 1 <nl> + * import static java . lang . Math . abs ; / / Group 2 <nl> + * import static java . lang . String . format ; / / Group 2 <nl> + * import static com . google . common . primitives . Doubles . BYTES ; / / Group " everything else " <nl> * <nl> + * public class SomeClass { . . . } <nl> + * < / pre > <nl> + * < p > <nl> + * The following example shows the idea of ' useContainerOrderingForStatic ' option that is <nl> + * useful for Eclipse IDE users to match ordering validation . <nl> + * This is how the import comparison works for static imports : we first compare <nl> + * the container of the static import , container is the type enclosing the static element <nl> + * being imported . When the result of the comparison is 0 ( containers are equal ) , <nl> + * we compare the fully qualified import names . <nl> + * For e . g . this is what is considered to be container names for the given example : <nl> + * <nl> + * import static HttpConstants . COLON = & gt ; HttpConstants <nl> + * import static HttpHeaders . addHeader = & gt ; HttpHeaders <nl> + * import static HttpHeaders . setHeader = & gt ; HttpHeaders <nl> + * import static HttpHeaders . Names . DATE = & gt ; HttpHeaders . Names <nl> + * <nl> + * According to this logic , HttpHeaders . Names should come after HttpHeaders . <nl> + * < / p > Example for { @ code useContainerOrderingForStatic = true } <nl> + * < pre > <nl> + * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; <nl> + * & lt ; property name = & quot ; useContainerOrderingForStatic & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; option & quot ; value = & quot ; top & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; caseSensitive & quot ; value = & quot ; false & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < pre > <nl> + * import static io . netty . handler . codec . http . HttpConstants . COLON ; <nl> + * import static io . netty . handler . codec . http . HttpHeaders . addHeader ; <nl> + * import static io . netty . handler . codec . http . HttpHeaders . setHeader ; <nl> + * import static io . netty . handler . codec . http . HttpHeaders . Names . DATE ; <nl> + * <nl> + * public class InputEclipseStaticImportsOrder { } <nl> + * < / pre > Example for { @ code useContainerOrderingForStatic = false } <nl> + * < pre > <nl> + * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; <nl> + * & lt ; property name = & quot ; useContainerOrderingForStatic & quot ; value = & quot ; false & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; option & quot ; value = & quot ; top & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; caseSensitive & quot ; value = & quot ; false & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < pre > <nl> + * import static io . netty . handler . codec . http . HttpConstants . COLON ; <nl> + * import static io . netty . handler . codec . http . HttpHeaders . addHeader ; <nl> + * import static io . netty . handler . codec . http . HttpHeaders . setHeader ; <nl> + * import static io . netty . handler . codec . http . HttpHeaders . Names . DATE ; / / violation <nl> + * <nl> + * public class InputEclipseStaticImportsOrder { } <nl> + * < / pre > <nl> * <nl> + * @ since 3 . 2 <nl> * / <nl> @ FileStatefulCheck <nl> public class ImportOrderCheck <nl> @ @ - 217 , 17 + 396 , 50 @ @ public class ImportOrderCheck <nl> / * * Empty array of pattern type needed to initialize check . * / <nl> private static final Pattern [ ] EMPTY _ PATTERN _ ARRAY = new Pattern [ 0 ] ; <nl> <nl> - / * * List of type import groups specified by the user . * / <nl> + / * * <nl> + * Specify list of < b > type import < / b > groups ( every group identified either by a common prefix <nl> + * string , or by a regular expression enclosed in forward slashes ( e . g . { @ code / regexp / } ) . <nl> + * All type imports , which does not match any group , falls into an additional group , <nl> + * located at the end . Thus , the empty list of type groups ( the default value ) means one group <nl> + * for all type imports . <nl> + * / <nl> private Pattern [ ] groups = EMPTY _ PATTERN _ ARRAY ; <nl> - / * * List of static import groups specified by the user . * / <nl> + <nl> + / * * <nl> + * Specify list of < b > static < / b > import groups ( every group identified either by a common prefix <nl> + * string , or by a regular expression enclosed in forward slashes ( e . g . { @ code / regexp / } ) . <nl> + * All static imports , which does not match any group , falls into an additional group , located <nl> + * at the end . Thus , the empty list of static groups ( the default value ) means one group for all <nl> + * static imports . This property has effect only when the property { @ code option } is set to <nl> + * { @ code top } or { @ code bottom } . <nl> + * / <nl> private Pattern [ ] staticGroups = EMPTY _ PATTERN _ ARRAY ; <nl> - / * * Require imports in group be separated . * / <nl> + <nl> + / * * <nl> + * Control whether type import groups should be separated by , at least , one blank <nl> + * line or comment and aren ' t separated internally . It doesn ' t affect separations for static <nl> + * imports . <nl> + * / <nl> private boolean separated ; <nl> - / * * Require static imports in group be separated . * / <nl> + <nl> + / * * <nl> + * Control whether static import groups should be separated by , at least , one blank <nl> + * line or comment and aren ' t separated internally . This property has effect only when the <nl> + * property { @ code option } is is set to { @ code top } or { @ code bottom } . <nl> + * / <nl> private boolean separatedStaticGroups ; <nl> - / * * Require imports in group . * / <nl> + <nl> + / * * <nl> + * Control whether type imports within each group should be sorted . <nl> + * It doesn ' t affect sorting for static imports . <nl> + * / <nl> private boolean ordered = true ; <nl> - / * * Should comparison be case sensitive . * / <nl> + <nl> + / * * <nl> + * Control whether string comparison should be case sensitive or not . Case sensitive <nl> + * sorting is in < a href = " https : / / en . wikipedia . org / wiki / ASCII # Order " > ASCII sort order < / a > . <nl> + * It affects both type imports and static imports . <nl> + * / <nl> private boolean caseSensitive = true ; <nl> <nl> / * * Last imported group . * / <nl> @ @ - 247 , 16 + 459 , 26 @ @ public class ImportOrderCheck <nl> * uses the properties { @ code staticGroups } and { @ code separatedStaticGroups } . <nl> * * / <nl> private boolean staticImportsApart ; <nl> - / * * Whether static imports should be sorted alphabetically or not . * / <nl> + <nl> + / * * <nl> + * Control whether < b > static imports < / b > located at < b > top < / b > or < b > bottom < / b > are <nl> + * sorted within the group . <nl> + * / <nl> private boolean sortStaticImportsAlphabetically ; <nl> - / * * Whether to use container ordering ( Eclipse IDE term ) for static imports or not . * / <nl> + <nl> + / * * <nl> + * Control whether to use container ordering ( Eclipse IDE term ) for static imports <nl> + * or not . <nl> + * / <nl> private boolean useContainerOrderingForStatic ; <nl> <nl> - / * * The policy to enforce . * / <nl> + / * * <nl> + * Specify policy on the relative order between type imports and static imports . <nl> + * / <nl> private ImportOrderOption option = ImportOrderOption . UNDER ; <nl> <nl> / * * <nl> - * Set the option to enforce . <nl> + * Setter to specify policy on the relative order between type imports and static imports . <nl> * @ param optionStr string to decode option from <nl> * @ throws IllegalArgumentException if unable to decode <nl> * / <nl> @ @ - 265 , 8 + 487 , 11 @ @ public class ImportOrderCheck <nl> } <nl> <nl> / * * <nl> - * Sets the list of package groups for type imports and the order they should occur in the <nl> - * file . <nl> + * Setter to specify list of < b > type import < / b > groups ( every group identified either by a <nl> + * common prefix string , or by a regular expression enclosed in forward slashes <nl> + * ( e . g . { @ code / regexp / } ) . All type imports , which does not match any group , falls into an <nl> + * additional group , located at the end . Thus , the empty list of type groups ( the default value ) <nl> + * means one group for all type imports . <nl> * <nl> * @ param packageGroups a comma - separated list of package names / prefixes . <nl> * / <nl> @ @ - 275 , 9 + 500 , 12 @ @ public class ImportOrderCheck <nl> } <nl> <nl> / * * <nl> - * Sets the list of package groups for static imports and the order they should occur in the <nl> - * file . This property has effect only when the property { @ code option } is set to { @ code top } <nl> - * or { @ code bottom } . ) <nl> + * Setter to specify list of < b > static < / b > import groups ( every group identified either by a <nl> + * common prefix string , or by a regular expression enclosed in forward slashes <nl> + * ( e . g . { @ code / regexp / } ) . All static imports , which does not match any group , falls into an <nl> + * additional group , located at the end . Thus , the empty list of static groups ( the default <nl> + * value ) means one group for all static imports . This property has effect only when <nl> + * the property { @ code option } is set to { @ code top } or { @ code bottom } . <nl> * <nl> * @ param packageGroups a comma - separated list of package names / prefixes . <nl> * / <nl> @ @ - 286 , 8 + 514 , 8 @ @ public class ImportOrderCheck <nl> } <nl> <nl> / * * <nl> - * Sets whether or not imports should be ordered within any one group of <nl> - * imports . <nl> + * Setter to control whether type imports within each group should be sorted . <nl> + * It doesn ' t affect sorting for static imports . <nl> * <nl> * @ param ordered <nl> * whether lexicographic ordering of imports within a group <nl> @ @ - 298 , 8 + 526 , 9 @ @ public class ImportOrderCheck <nl> } <nl> <nl> / * * <nl> - * Sets whether or not groups of type imports must be separated from one another <nl> - * by at least one blank line or comment . <nl> + * Setter to control whether type import groups should be separated by , at least , <nl> + * one blank line or comment and aren ' t separated internally . <nl> + * It doesn ' t affect separations for static imports . <nl> * <nl> * @ param separated <nl> * whether groups should be separated by one blank line or comment . <nl> @ @ - 309 , 9 + 538 , 10 @ @ public class ImportOrderCheck <nl> } <nl> <nl> / * * <nl> - * Sets whether or not groups of static imports must be separated from one another <nl> - * by at least one blank line or comment . This property has effect only when the property <nl> - * { @ code option } is set to { @ code top } or { @ code bottom } . ) <nl> + * Setter to control whether static import groups should be separated by , at least , <nl> + * one blank line or comment and aren ' t separated internally . <nl> + * This property has effect only when the property <nl> + * { @ code option } is is set to { @ code top } or { @ code bottom } . <nl> * <nl> * @ param separatedStaticGroups <nl> * whether groups should be separated by one blank line or comment . <nl> @ @ - 321 , 8 + 551 , 10 @ @ public class ImportOrderCheck <nl> } <nl> <nl> / * * <nl> - * Sets whether string comparison should be case sensitive or not . <nl> - * <nl> + * Setter to control whether string comparison should be case sensitive or not . <nl> + * Case sensitive sorting is in <nl> + * < a href = " https : / / en . wikipedia . org / wiki / ASCII # Order " > ASCII sort order < / a > . <nl> + * It affects both type imports and static imports . <nl> * @ param caseSensitive <nl> * whether string comparison should be case sensitive . <nl> * / <nl> @ @ - 331 , 8 + 563 , 8 @ @ public class ImportOrderCheck <nl> } <nl> <nl> / * * <nl> - * Sets whether static imports ( when grouped using ' top ' and ' bottom ' option ) <nl> - * are sorted alphabetically or according to the package groupings . <nl> + * Setter to control whether < b > static imports < / b > located at < b > top < / b > or <nl> + * < b > bottom < / b > are sorted within the group . <nl> * @ param sortAlphabetically true or false . <nl> * / <nl> public void setSortStaticImportsAlphabetically ( boolean sortAlphabetically ) { <nl> @ @ - 340 , 7 + 572 , 8 @ @ public class ImportOrderCheck <nl> } <nl> <nl> / * * <nl> - * Sets whether to use container ordering ( Eclipse IDE term ) for static imports or not . <nl> + * Setter to control whether to use container ordering ( Eclipse IDE term ) for static <nl> + * imports or not . <nl> * @ param useContainerOrdering whether to use container ordering for static imports or not . <nl> * / <nl> public void setUseContainerOrderingForStatic ( boolean useContainerOrdering ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 0772937 . . 2a8627a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 76 , 6 + 76 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " ClassTypeParameterName " , <nl> " ConstantName " , <nl> " CustomImportOrder " , <nl> + " ImportOrder " , <nl> " InterfaceMemberImpliedModifier " , <nl> " InterfaceTypeParameterName " , <nl> " LambdaParameterName " , <nl> diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml <nl> index da02dee . . 5b25fb5 100644 <nl> - - - a / src / xdocs / config _ imports . xml <nl> + + + b / src / xdocs / config _ imports . xml <nl> @ @ - 1348 , 8 + 1348 , 8 @ @ import java . util . stream . IntStream ; <nl> < / section > <nl> <nl> < section name = " ImportOrder " > <nl> + < p > Since Checkstyle 3 . 2 < / p > <nl> < subsection name = " Description " id = " ImportOrder _ Description " > <nl> - < p > Since Checkstyle 3 . 2 < / p > <nl> < p > Checks the ordering / grouping of imports . Features are : < / p > <nl> < ul > <nl> < li > groups type / static imports : ensures that groups of imports come in a <nl> @ @ - 1367 , 11 + 1367 , 7 @ @ import java . util . stream . IntStream ; <nl> < li > arrange static imports : ensures the relative order between <nl> type imports and static imports ( see <nl> < a href = " property _ types . html # importOrder " > import orders < / a > ) < / li > <nl> - < / ul > <nl> - < p > <nl> - < a href = " # ImportOrder _ Examples " > Examples section < / a > contains examples that <nl> - work with default formatter configurations of Eclipse , IntelliJ IDEA and NetBeans <nl> - < / p > <nl> + < / ul > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " id = " ImportOrder _ Properties " > <nl> @ @ - 1385 , 7 + 1381 , 7 @ @ import java . util . stream . IntStream ; <nl> < / tr > <nl> < tr > <nl> < td > option < / td > <nl> - < td > policy on the relative order between type imports and static imports < / td > <nl> + < td > specify policy on the relative order between type imports and static imports . < / td > <nl> < td > < a href = " property _ types . html # importOrder " > Import Order Policy < / a > < / td > <nl> < td > < code > under < / code > < / td > <nl> < td > 5 . 0 < / td > <nl> @ @ - 1393 , 7 + 1389 , 7 @ @ import java . util . stream . IntStream ; <nl> < tr > <nl> < td > groups < / td > <nl> < td > <nl> - list of < b > type import < / b > groups ( every group identified either by a <nl> + specify list of < b > type import < / b > groups ( every group identified either by a <nl> common prefix string , or by a regular expression enclosed <nl> in forward slashes ( e . g . < code > / regexp / < / code > ) . All type imports , <nl> which does not match any group , falls into an additional group , located at the end . <nl> @ @ - 1406 , 8 + 1402 , 8 @ @ import java . util . stream . IntStream ; <nl> < / tr > <nl> < tr > <nl> < td > ordered < / td > <nl> - < td > whether type imports within each group should be sorted <nl> - ( It doesn ' t affect sorting for static imports . ) < / td > <nl> + < td > control whether type imports within each group should be sorted . <nl> + It doesn ' t affect sorting for static imports . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > true < / td > <nl> < td > 3 . 2 < / td > <nl> @ @ - 1415 , 9 + 1411 , 9 @ @ import java . util . stream . IntStream ; <nl> < tr > <nl> < td > separated < / td > <nl> < td > <nl> - whether type import groups should be separated by , at least , one <nl> + control whether type import groups should be separated by , at least , one <nl> blank line or comment and aren ' t separated internally . <nl> - ( It doesn ' t affect separations for static imports . ) <nl> + It doesn ' t affect separations for static imports . <nl> < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > false < / td > <nl> @ @ - 1426 , 10 + 1422 , 10 @ @ import java . util . stream . IntStream ; <nl> < tr > <nl> < td > separatedStaticGroups < / td > <nl> < td > <nl> - whether static import groups should be separated by , at least , one <nl> + control whether static import groups should be separated by , at least , one <nl> blank line or comment and aren ' t separated internally . <nl> - ( This property has effect only when the property < code > option < / code > <nl> - is is set to < code > top < / code > or < code > bottom < / code > . ) <nl> + This property has effect only when the property < code > option < / code > <nl> + is is set to < code > top < / code > or < code > bottom < / code > . <nl> < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > false < / td > <nl> @ @ - 1437 , 10 + 1433 , 10 @ @ import java . util . stream . IntStream ; <nl> < / tr > <nl> < tr > <nl> < td > caseSensitive < / td > <nl> - < td > whether string comparison should be case sensitive or not . <nl> + < td > control whether string comparison should be case sensitive or not . <nl> Case sensitive sorting is in <nl> < a href = " https : / / en . wikipedia . org / wiki / ASCII # Order " > ASCII sort order < / a > . <nl> - ( It affects both type imports and static imports ) <nl> + It affects both type imports and static imports . <nl> < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > true < / td > <nl> @ @ - 1449 , 13 + 1445 , 13 @ @ import java . util . stream . IntStream ; <nl> < tr > <nl> < td > staticGroups < / td > <nl> < td > <nl> - list of < b > static < / b > import groups ( every group identified either by a <nl> + specify list of < b > static < / b > import groups ( every group identified either by a <nl> common prefix string , or by a regular expression enclosed <nl> in forward slashes ( e . g . < code > / regexp / < / code > ) . All static imports , <nl> which does not match any group , falls into an additional group , located at the end . <nl> Thus , the empty list of static groups ( the default value ) means <nl> - one group for all static imports . ( This property has effect only when <nl> - the property < code > option < / code > is set to < code > top < / code > or < code > bottom < / code > . ) <nl> + one group for all static imports . This property has effect only when <nl> + the property < code > option < / code > is set to < code > top < / code > or < code > bottom < / code > . <nl> < / td > <nl> < td > < a href = " property _ types . html # regexp " > Regular Expressions < / a > < / td > <nl> < td > < code > { } < / code > < / td > <nl> @ @ - 1463 , 15 + 1459 , 19 @ @ import java . util . stream . IntStream ; <nl> < / tr > <nl> < tr > <nl> < td > sortStaticImportsAlphabetically < / td > <nl> - < td > whether < b > static imports < / b > located at < b > top < / b > or < b > bottom < / b > are sorted <nl> - within the group . < / td > <nl> + < td > <nl> + control whether < b > static imports < / b > located at < b > top < / b > or <nl> + < b > bottom < / b > are sorted within the group . <nl> + < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > false < / td > <nl> < td > 6 . 5 < / td > <nl> < / tr > <nl> < tr > <nl> < td > useContainerOrderingForStatic < / td > <nl> - < td > whether to use container ordering ( Eclipse IDE term ) for static imports or not < / td > <nl> + < td > <nl> + control whether to use container ordering ( Eclipse IDE term ) for static <nl> + imports or not . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > false < / td > <nl> < td > 7 . 1 < / td > <nl> @ @ - 1559 , 12 + 1559 , 15 @ @ import java . util . stream . IntStream ; <nl> ImportOrder has a limitation by design to enforce an empty line between groups <nl> ( " java " , " javax " ) . There is no flexibility to enforce empty lines between some <nl> groups and no empty lines between other groups . < / p > <nl> - <nl> + < p > <nl> + Note : " separated " option is disabled because IDEA default has blank line <nl> + between " java " and static imports , and no blank line between " javax " and " java " . <nl> + < / p > <nl> < source > <nl> & lt ; module name = & quot ; ImportOrder & quot ; & gt ; <nl> & lt ; property name = & quot ; groups & quot ; value = & quot ; * , javax , java & quot ; / & gt ; <nl> & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; <nl> - & lt ; property name = & quot ; separated & quot ; value = & quot ; true & quot ; / & gt ; <nl> + & lt ; property name = & quot ; separated & quot ; value = & quot ; false & quot ; / & gt ; <nl> & lt ; property name = & quot ; option & quot ; value = & quot ; bottom & quot ; / & gt ; <nl> & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; <nl> & lt ; / module & gt ; <nl> @ @ - 1597 , 6 + 1600 , 27 @ @ import java . util . stream . IntStream ; <nl> < / source > <nl> <nl> < p > <nl> + Group descriptions enclosed in slashes are interpreted as regular expressions . <nl> + If multiple groups match , the one matching a longer <nl> + substring of the imported name will take precedence , with ties <nl> + broken first in favor of earlier matches and finally in favor of <nl> + the first matching group . <nl> + < / p > <nl> + < p > <nl> + There is always a wildcard group to which everything not in a named group <nl> + belongs . If an import does not match a named group , the group belongs to <nl> + this wildcard group . The wildcard group position can be specified using the <nl> + { @ code * } character . <nl> + < / p > <nl> + < p > <nl> + Check also has on option making it more flexible : <nl> + < b > sortStaticImportsAlphabetically < / b > - sets whether static imports grouped by <nl> + < b > top < / b > or < b > bottom < / b > option should be sorted alphabetically or <nl> + not , default value is < b > false < / b > . It is applied to static imports grouped <nl> + with < b > top < / b > or < b > bottom < / b > options . This option is helping in reconciling <nl> + of this Check and other tools like Eclipse ' s Organize Imports feature . <nl> + < / p > <nl> + < p > <nl> To configure the Check allows static imports grouped to the < b > top < / b > being sorted <nl> alphabetically : <nl> < / p > <nl> @ @ - 1649 , 10 + 1673 , 10 @ @ public class SomeClass { . . . } <nl> we compare the fully qualified import names . <nl> For e . g . this is what is considered to be container names for the given example : <nl> <nl> - import static HttpConstants . COLON = > HttpConstants <nl> - import static HttpHeaders . addHeader = > HttpHeaders <nl> - import static HttpHeaders . setHeader = > HttpHeaders <nl> - import static HttpHeaders . Names . DATE = > HttpHeaders . Names <nl> + import static HttpConstants . COLON = & gt ; HttpConstants <nl> + import static HttpHeaders . addHeader = & gt ; HttpHeaders <nl> + import static HttpHeaders . setHeader = & gt ; HttpHeaders <nl> + import static HttpHeaders . Names . DATE = & gt ; HttpHeaders . Names <nl> <nl> According to this logic , HttpHeaders . Names should come after HttpHeaders . <nl> < / p >
NEAREST DIFF (one line): diff - - git a / . travis . yml b / . travis . yml <nl> index ce3e079 . . 261a16e 100644 <nl> - - - a / . travis . yml <nl> + + + b / . travis . yml <nl> @ @ - 41 , 6 + 41 , 7 @ @ matrix : <nl> env : <nl> - DESC = " checkstyle and sevntu - checkstyle " <nl> - CMD = " . / . ci / travis / travis . sh checkstyle - and - sevntu " <nl> + - SKIP _ CI = " false " <nl> <nl> # jacoco and codecov ( oraclejdk8 ) <nl> - jdk : oraclejdk8 <nl> @ @ - 66 , 6 + 67 , 7 @ @ matrix : <nl> env : <nl> - DESC = " Releasenotes generation " <nl> - CMD = " . / . ci / travis / travis . sh releasenotes - gen " <nl> + - SKIP _ CI = " false " <nl> <nl> # NonDex ( oraclejdk8 ) <nl> - jdk : oraclejdk8

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index b62ea41 . . 9d56e24 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 31 , 163 + 31 , 342 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 
 / * * 
 + * < p > 
 * Checks the ordering / grouping of imports . Features are : 
 + * < / p > 
 * < ul > 
 - * < li > groups imports : ensures that groups of imports come in a specific order 
 - * ( e . g . , java . comes first , javax . comes second , then everything else ) < / li > 
 - * < li > adds a separation between groups : ensures that a blank line sit between 
 - * each group < / li > 
 - * < li > import groups aren ' t separated internally : ensures that 
 - * each group aren ' t separated internally by blank line or comment < / li > 
 - * < li > sorts imports inside each group : ensures that imports within each group 
 - * are in lexicographic order < / li > 
 - * < li > sorts according to case : ensures that the comparison between import is 
 - * case sensitive < / li > 
 - * < li > groups static imports : ensures that static imports are at the top ( or the 
 - * bottom ) of all the imports , or above ( or under ) each group , or are treated 
 - * like non static imports ( @ see { @ link ImportOrderOption } < / li > 
 - * < / ul > . 
 - * 
 + * < li > 
 + * groups type / static imports : ensures that groups of imports come in a specific order 
 + * ( e . g . , java . comes first , javax . comes second , then everything else ) 
 + * < / li > 
 + * < li > 
 + * adds a separation between type import groups : ensures that a blank line sit between each group 
 + * < / li > 
 + * < li > 
 + * type / static import groups aren ' t separated internally : ensures that each group aren ' t separated 
 + * internally by blank line or comment 
 + * < / li > 
 + * < li > 
 + * sorts type / static imports inside each group : ensures that imports within each group are in 
 + * lexicographic order 
 + * < / li > 
 + * < li > 
 + * sorts according to case : ensures that the comparison between imports is case sensitive , in 
 + * < a href = " https : / / en . wikipedia . org / wiki / ASCII # Order " > ASCII sort order < / a > 
 + * < / li > 
 + * < li > 
 + * arrange static imports : ensures the relative order between type imports and static imports 
 + * ( see < a href = " property _ types . html # importOrder " > import orders < / a > ) 
 + * < / li > 
 + * < / ul > 
 + * < ul > 
 + * < li > 
 + * Property { @ code option } - specify policy on the relative order between type imports and static 
 + * imports . 
 + * Default value is { @ code under } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code groups } - specify list of < b > type import < / b > groups ( every group identified 
 + * either by a common prefix string , or by a regular expression enclosed in forward slashes 
 + * ( e . g . { @ code / regexp / } ) . All type imports , which does not match any group , falls into an 
 + * additional group , located at the end . 
 + * Thus , the empty list of type groups ( the default value ) means one group for all type imports . 
 + * Default value is { @ code { } } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code ordered } - control whether type imports within each group should be 
 + * sorted . 
 + * It doesn ' t affect sorting for static imports . 
 + * Default value is true . 
 + * < / li > 
 + * < li > 
 + * Property { @ code separated } - control whether type import groups should be separated 
 + * by , at least , one blank line or comment and aren ' t separated internally . 
 + * It doesn ' t affect separations for static imports . 
 + * Default value is false . 
 + * < / li > 
 + * < li > 
 + * Property { @ code separatedStaticGroups } - control whether static import groups should 
 + * be separated by , at least , one blank line or comment and aren ' t separated internally . 
 + * This property has effect only when the property { @ code option } is is set to { @ code top } 
 + * or { @ code bottom } . 
 + * Default value is false . 
 + * < / li > 
 + * < li > 
 + * Property { @ code caseSensitive } - control whether string comparison should be case 
 + * sensitive or not . Case sensitive sorting is in 
 + * < a href = " https : / / en . wikipedia . org / wiki / ASCII # Order " > ASCII sort order < / a > . 
 + * It affects both type imports and static imports . 
 + * Default value is true . 
 + * < / li > 
 + * < li > 
 + * Property { @ code staticGroups } - specify list of < b > static < / b > import groups ( every group 
 + * identified either by a common prefix string , or by a regular expression enclosed in forward 
 + * slashes ( e . g . { @ code / regexp / } ) . All static imports , which does not match any group , falls into an 
 + * additional group , located at the end . Thus , the empty list of static groups ( the default value ) 
 + * means one group for all static imports . This property has effect only when the property 
 + * { @ code option } is set to { @ code top } or { @ code bottom } . 
 + * Default value is { @ code { } } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code sortStaticImportsAlphabetically } - control whether 
 + * < b > static imports < / b > located at < b > top < / b > or < b > bottom < / b > are sorted within the group . 
 + * Default value is false . 
 + * < / li > 
 + * < li > 
 + * Property { @ code useContainerOrderingForStatic } - control whether to use container 
 + * ordering ( Eclipse IDE term ) for static imports or not . 
 + * Default value is false . 
 + * < / li > 
 + * < li > 
 + * Property { @ code tokens } - tokens to check 
 + * Default value is : 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STATIC _ IMPORT " > 
 + * STATIC _ IMPORT < / a > . 
 + * < / li > 
 + * < / ul > 
 + * < p > 
 + * To configure the check so that it matches default Eclipse formatter configuration 
 + * ( tested on Kepler and Luna releases ) : 
 + * < / p > 
 + * < ul > 
 + * < li > 
 + * group of static imports is on the top 
 + * < / li > 
 + * < li > 
 + * groups of type imports : " java " and " javax " packages first , then " org " and then all other imports 
 + * < / li > 
 + * < li > 
 + * imports will be sorted in the groups 
 + * < / li > 
 + * < li > 
 + * groups are separated by , at least , one blank line and aren ' t separated internally 
 + * < / li > 
 + * < / ul > 
 + * < p > 
 + * Notes : 
 + * < / p > 
 + * < ul > 
 + * < li > 
 + * " com " package is not mentioned on configuration , because it is ignored by Eclipse Kepler and Luna 
 + * ( looks like Eclipse defect ) 
 + * < / li > 
 + * < li > 
 + * configuration below doesn ' t work in all 100 % cases due to inconsistent behavior prior to 
 + * Mars release , but covers most scenarios 
 + * < / li > 
 + * < / ul > 
 * < pre > 
 - * Properties : 
 + * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; 
 + * & lt ; property name = & quot ; groups & quot ; value = & quot ; / ^ java \ . / , javax , org & quot ; / & gt ; 
 + * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; property name = & quot ; separated & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; property name = & quot ; option & quot ; value = & quot ; above & quot ; / & gt ; 
 + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 * < / pre > 
 - * < table summary = " Properties " border = " 1 " > 
 - * < tr > < th > name < / th > < th > Description < / th > < th > type < / th > < th > default value < / th > < / tr > 
 - * < tr > < td > option < / td > < td > policy on the relative order between regular imports and static 
 - * imports < / td > < td > { @ link ImportOrderOption } < / td > < td > under < / td > < / tr > 
 - * < tr > < td > groups < / td > < td > list of type import groups ( every group identified either by a 
 - * common prefix string , or by a regular expression enclosed in forward slashes 
 - * ( e . g . / regexp / ) . All type imports , which does not match any group , 
 - * falls into an additional group , located at the end . Thus , the empty list of type groups 
 - * ( the default value ) means one group for all type imports < / td > 
 - * < td > list of strings < / td > < td > empty list < / td > < / tr > 
 - * < tr > < td > ordered < / td > < td > whether type imports within group should be sorted < / td > 
 - * < td > Boolean < / td > < td > true < / td > < / tr > 
 - * < tr > < td > separated < / td > < td > whether type imports groups should be separated by , at least , 
 - * one blank line or comment and aren ' t separated internally 
 - * < / td > < td > Boolean < / td > < td > false < / td > < / tr > 
 - * < tr > < td > separatedStaticGroups < / td > < td > whether static imports should be separated by , at least , 
 - * one blank line or comment and aren ' t separated internally 
 - * < / td > < td > Boolean < / td > < td > false < / td > < / tr > 
 - * < tr > < td > caseSensitive < / td > < td > whether string comparison should be case sensitive or not . 
 - * Case sensitive sorting is in ASCII sort order < / td > < td > Boolean < / td > < td > true < / td > < / tr > 
 - * < tr > < td > staticGroups < / td > < td > list of static import groups ( every group identified either by a 
 - * common prefix string , or by a regular expression enclosed in forward slashes 
 - * ( e . g . / regexp / ) . All static imports , which does not match any group , 
 - * falls into an additional group , located at the end . Thus , the empty list of static groups 
 - * ( the default value ) means one group for all static imports < / td > 
 - * < td > list of strings < / td > < td > empty list < / td > < / tr > 
 - * < tr > < td > sortStaticImportsAlphabetically < / td > < td > whether static imports located at top or 
 - * bottom are sorted within the group . < / td > < td > Boolean < / td > < td > false < / td > < / tr > 
 - * < tr > < td > useContainerOrderingForStatic < / td > < td > whether to use container ordering 
 - * ( Eclipse IDE term ) for static imports or not < / td > < td > Boolean < / td > < td > false < / td > < / tr > 
 - * < / table > 
 - * 
 * < p > 
 - * Example : 
 + * To configure the check so that it matches default Eclipse formatter configuration 
 + * ( tested on Mars release ) : 
 * < / p > 
 - * < p > To configure the check so that it matches default Eclipse formatter configuration 
 - * ( tested on Kepler , Luna and Mars ) : < / p > 
 * < ul > 
 - * < li > group of static imports is on the top < / li > 
 - * < li > groups of non - static imports : & quot ; java & quot ; then & quot ; javax & quot ; 
 - * packages first , then & quot ; org & quot ; and then all other imports < / li > 
 - * < li > imports will be sorted in the groups < / li > 
 - * < li > groups are separated by , at least , one blank line and aren ' t separated internally < / li > 
 + * < li > 
 + * group of static imports is on the top 
 + * < / li > 
 + * < li > 
 + * groups of type imports : " java " and " javax " packages first , then " org " and " com " , 
 + * then all other imports as one group 
 + * < / li > 
 + * < li > 
 + * imports will be sorted in the groups 
 + * < / li > 
 + * < li > 
 + * groups are separated by , at least , one blank line and aren ' t separated internally 
 + * < / li > 
 * < / ul > 
 - * 
 * < pre > 
 * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; 
 - * & lt ; property name = & quot ; groups & quot ; value = & quot ; / ^ javax ? \ . / , org & quot ; / & gt ; 
 - * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; 
 - * & lt ; property name = & quot ; separated & quot ; value = & quot ; true & quot ; / & gt ; 
 - * & lt ; property name = & quot ; option & quot ; value = & quot ; above & quot ; / & gt ; 
 - * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; property name = & quot ; groups & quot ; value = & quot ; / ^ java \ . / , javax , org , com & quot ; / & gt ; 
 + * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; property name = & quot ; separated & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; property name = & quot ; option & quot ; value = & quot ; above & quot ; / & gt ; 
 + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 - * 
 - * < p > To configure the check so that it matches default IntelliJ IDEA formatter configuration 
 - * ( tested on v14 ) : < / p > 
 + * < p > 
 + * To configure the check so that it matches default IntelliJ IDEA formatter configuration 
 + * ( tested on v2018 . 2 ) : 
 + * < / p > 
 * < ul > 
 - * < li > group of static imports is on the bottom < / li > 
 - * < li > groups of non - static imports : all imports except of & quot ; javax & quot ; and 
 - * & quot ; java & quot ; , then & quot ; javax & quot ; and & quot ; java & quot ; < / li > 
 - * < li > imports will be sorted in the groups < / li > 
 - * < li > groups are separated by , at least , one blank line and aren ' t separated internally < / li > 
 + * < li > 
 + * group of static imports is on the bottom 
 + * < / li > 
 + * < li > 
 + * groups of type imports : all imports except of " javax " and " java " , then " javax " and " java " 
 + * < / li > 
 + * < li > 
 + * imports will be sorted in the groups 
 + * < / li > 
 + * < li > 
 + * groups are separated by , at least , one blank line and aren ' t separated internally 
 + * < / li > 
 * < / ul > 
 - * 
 - * < p > 
 - * Note : & quot ; separated & quot ; option is disabled because IDEA default has blank line 
 - * between & quot ; java & quot ; and static imports , and no blank line between 
 - * & quot ; javax & quot ; and & quot ; java & quot ; 
 - * < / p > 
 - * 
 + * < p > 
 + * Note : a < a href = " config _ filters . html # SuppressionFilter " > suppression filter < / a > is needed because 
 + * IDEA has no blank line between " javax " and " java " . 
 + * ImportOrder has a limitation by design to enforce an empty line between groups ( " java " , " javax " ) . 
 + * There is no flexibility to enforce empty lines between some groups and no empty lines between 
 + * other groups . 
 + * < / p > 
 + * < p > 
 + * Note : " separated " option is disabled because IDEA default has blank line between " java " and 
 + * static imports , and no blank line between " javax " and " java " . 
 + * < / p > 
 * < pre > 
 * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; 
 - * & lt ; property name = & quot ; groups & quot ; value = & quot ; * , javax , java & quot ; / & gt ; 
 - * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; 
 - * & lt ; property name = & quot ; separated & quot ; value = & quot ; false & quot ; / & gt ; 
 - * & lt ; property name = & quot ; option & quot ; value = & quot ; bottom & quot ; / & gt ; 
 - * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; property name = & quot ; groups & quot ; value = & quot ; * , javax , java & quot ; / & gt ; 
 + * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; property name = & quot ; separated & quot ; value = & quot ; false & quot ; / & gt ; 
 + * & lt ; property name = & quot ; option & quot ; value = & quot ; bottom & quot ; / & gt ; 
 + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 + * < pre > 
 + * & lt ; ? xml version = & quot ; 1 . 0 & quot ; ? & gt ; 
 + * & lt ; ! DOCTYPE suppressions PUBLIC 
 + * & quot ; - / / Checkstyle / / DTD SuppressionFilter Configuration 1 . 2 / / EN & quot ; 
 + * & quot ; https : / / checkstyle . org / dtds / suppressions _ 1 _ 2 . dtd & quot ; & gt ; 
 * 
 - * < p > To configure the check so that it matches default NetBeans formatter configuration 
 - * ( tested on v8 ) : < / p > 
 + * & lt ; suppressions & gt ; 
 + * & lt ; ! - - message contains no message text to work well in multi - language environments - - & gt ; 
 + * & lt ; suppress checks = & quot ; ImportOrder & quot ; message = & quot ; ^ ' java \ . . * ' . * & quot ; / & gt ; 
 + * & lt ; / suppressions & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check so that it matches default NetBeans formatter configuration 
 + * ( tested on v8 ) : 
 + * < / p > 
 * < ul > 
 - * < li > groups of non - static imports are not defined , all imports will be sorted 
 - * as a one group < / li > 
 - * < li > static imports are not separated , they will be sorted along with other imports < / li > 
 + * < li > 
 + * groups of type imports are not defined , all imports will be sorted as a one group 
 + * < / li > 
 + * < li > 
 + * static imports are not separated , they will be sorted along with other imports 
 + * < / li > 
 * < / ul > 
 - * 
 * < pre > 
 * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; 
 - * & lt ; property name = & quot ; option & quot ; value = & quot ; inflow & quot ; / & gt ; 
 + * & lt ; property name = & quot ; option & quot ; value = & quot ; inflow & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 - * 
 * < p > 
 - * Group descriptions enclosed in slashes are interpreted as regular 
 - * expressions . If multiple groups match , the one matching a longer 
 - * substring of the imported name will take precedence , with ties 
 - * broken first in favor of earlier matches and finally in favor of 
 - * the first matching group . 
 + * Group descriptions enclosed in slashes are interpreted as regular expressions . 
 + * If multiple groups match , the one matching a longer substring of the imported name 
 + * will take precedence , with ties broken first in favor of earlier matches and finally 
 + * in favor of the first matching group . 
 * < / p > 
 - * 
 * < p > 
 - * There is always a wildcard group to which everything not in a named group 
 - * belongs . If an import does not match a named group , the group belongs to 
 - * this wildcard group . The wildcard group position can be specified using the 
 - * { @ code * } character . 
 + * There is always a wildcard group to which everything not in a named group belongs . 
 + * If an import does not match a named group , the group belongs to this wildcard group . 
 + * The wildcard group position can be specified using the { @ code * } character . 
 * < / p > 
 - * 
 - * < p > Check also has on option making it more flexible : 
 - * < b > sortStaticImportsAlphabetically < / b > - sets whether static imports grouped by 
 - * < b > top < / b > or < b > bottom < / b > option should be sorted alphabetically or 
 - * not , default value is < b > false < / b > . It is applied to static imports grouped 
 - * with < b > top < / b > or < b > bottom < / b > options . < br > 
 - * This option is helping in reconciling of this Check and other tools like 
 - * Eclipse ' s Organize Imports feature . 
 + * < p > 
 + * Check also has on option making it more flexible : < b > sortStaticImportsAlphabetically < / b > 
 + * - sets whether static imports grouped by < b > top < / b > or < b > bottom < / b > option should be sorted 
 + * alphabetically or not , default value is < b > false < / b > . It is applied to static imports grouped 
 + * with < b > top < / b > or < b > bottom < / b > options . This option is helping in reconciling of this 
 + * Check and other tools like Eclipse ' s Organize Imports feature . 
 * < / p > 
 * < p > 
 - * To configure the Check allows static imports grouped to the < b > top < / b > 
 - * being sorted alphabetically : 
 + * To configure the Check allows static imports grouped to the < b > top < / b > being sorted 
 + * alphabetically : 
 * < / p > 
 - * 
 * < pre > 
 - * { @ code 
 - * import static java . lang . Math . abs ; 
 + * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; 
 + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; property name = & quot ; option & quot ; value = & quot ; top & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < pre > 
 + * import static java . lang . Math . PI ; 
 + * import static java . lang . Math . abs ; / / OK , alphabetical case sensitive ASCII order , ' P ' & lt ; ' a ' 
 * import static org . abego . treelayout . Configuration . AlignmentInLevel ; / / OK , alphabetical order 
 * 
 * import org . abego . * ; 
 * 
 - * import java . util . Set ; 
 + * import java . util . Set ; / / Wrong order for ' java . util . Set ' import . 
 * 
 * public class SomeClass { . . . } 
 - * } 
 * < / pre > 
 + * < p > 
 + * To configure the Check with groups of static imports : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; 
 + * & lt ; property name = & quot ; staticGroups & quot ; value = & quot ; org , java & quot ; / & gt ; 
 + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < pre > 
 + * import static org . abego . treelayout . Configuration . AlignmentInLevel ; / / Group 1 
 + * import static java . lang . Math . abs ; / / Group 2 
 + * import static java . lang . String . format ; / / Group 2 
 + * import static com . google . common . primitives . Doubles . BYTES ; / / Group " everything else " 
 * 
 + * public class SomeClass { . . . } 
 + * < / pre > 
 + * < p > 
 + * The following example shows the idea of ' useContainerOrderingForStatic ' option that is 
 + * useful for Eclipse IDE users to match ordering validation . 
 + * This is how the import comparison works for static imports : we first compare 
 + * the container of the static import , container is the type enclosing the static element 
 + * being imported . When the result of the comparison is 0 ( containers are equal ) , 
 + * we compare the fully qualified import names . 
 + * For e . g . this is what is considered to be container names for the given example : 
 + * 
 + * import static HttpConstants . COLON = & gt ; HttpConstants 
 + * import static HttpHeaders . addHeader = & gt ; HttpHeaders 
 + * import static HttpHeaders . setHeader = & gt ; HttpHeaders 
 + * import static HttpHeaders . Names . DATE = & gt ; HttpHeaders . Names 
 + * 
 + * According to this logic , HttpHeaders . Names should come after HttpHeaders . 
 + * < / p > Example for { @ code useContainerOrderingForStatic = true } 
 + * < pre > 
 + * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; 
 + * & lt ; property name = & quot ; useContainerOrderingForStatic & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; property name = & quot ; option & quot ; value = & quot ; top & quot ; / & gt ; 
 + * & lt ; property name = & quot ; caseSensitive & quot ; value = & quot ; false & quot ; / & gt ; 
 + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < pre > 
 + * import static io . netty . handler . codec . http . HttpConstants . COLON ; 
 + * import static io . netty . handler . codec . http . HttpHeaders . addHeader ; 
 + * import static io . netty . handler . codec . http . HttpHeaders . setHeader ; 
 + * import static io . netty . handler . codec . http . HttpHeaders . Names . DATE ; 
 + * 
 + * public class InputEclipseStaticImportsOrder { } 
 + * < / pre > Example for { @ code useContainerOrderingForStatic = false } 
 + * < pre > 
 + * & lt ; module name = & quot ; ImportOrder & quot ; & gt ; 
 + * & lt ; property name = & quot ; useContainerOrderingForStatic & quot ; value = & quot ; false & quot ; / & gt ; 
 + * & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; property name = & quot ; option & quot ; value = & quot ; top & quot ; / & gt ; 
 + * & lt ; property name = & quot ; caseSensitive & quot ; value = & quot ; false & quot ; / & gt ; 
 + * & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < pre > 
 + * import static io . netty . handler . codec . http . HttpConstants . COLON ; 
 + * import static io . netty . handler . codec . http . HttpHeaders . addHeader ; 
 + * import static io . netty . handler . codec . http . HttpHeaders . setHeader ; 
 + * import static io . netty . handler . codec . http . HttpHeaders . Names . DATE ; / / violation 
 + * 
 + * public class InputEclipseStaticImportsOrder { } 
 + * < / pre > 
 * 
 + * @ since 3 . 2 
 * / 
 @ FileStatefulCheck 
 public class ImportOrderCheck 
 @ @ - 217 , 17 + 396 , 50 @ @ public class ImportOrderCheck 
 / * * Empty array of pattern type needed to initialize check . * / 
 private static final Pattern [ ] EMPTY _ PATTERN _ ARRAY = new Pattern [ 0 ] ; 
 
 - / * * List of type import groups specified by the user . * / 
 + / * * 
 + * Specify list of < b > type import < / b > groups ( every group identified either by a common prefix 
 + * string , or by a regular expression enclosed in forward slashes ( e . g . { @ code / regexp / } ) . 
 + * All type imports , which does not match any group , falls into an additional group , 
 + * located at the end . Thus , the empty list of type groups ( the default value ) means one group 
 + * for all type imports . 
 + * / 
 private Pattern [ ] groups = EMPTY _ PATTERN _ ARRAY ; 
 - / * * List of static import groups specified by the user . * / 
 + 
 + / * * 
 + * Specify list of < b > static < / b > import groups ( every group identified either by a common prefix 
 + * string , or by a regular expression enclosed in forward slashes ( e . g . { @ code / regexp / } ) . 
 + * All static imports , which does not match any group , falls into an additional group , located 
 + * at the end . Thus , the empty list of static groups ( the default value ) means one group for all 
 + * static imports . This property has effect only when the property { @ code option } is set to 
 + * { @ code top } or { @ code bottom } . 
 + * / 
 private Pattern [ ] staticGroups = EMPTY _ PATTERN _ ARRAY ; 
 - / * * Require imports in group be separated . * / 
 + 
 + / * * 
 + * Control whether type import groups should be separated by , at least , one blank 
 + * line or comment and aren ' t separated internally . It doesn ' t affect separations for static 
 + * imports . 
 + * / 
 private boolean separated ; 
 - / * * Require static imports in group be separated . * / 
 + 
 + / * * 
 + * Control whether static import groups should be separated by , at least , one blank 
 + * line or comment and aren ' t separated internally . This property has effect only when the 
 + * property { @ code option } is is set to { @ code top } or { @ code bottom } . 
 + * / 
 private boolean separatedStaticGroups ; 
 - / * * Require imports in group . * / 
 + 
 + / * * 
 + * Control whether type imports within each group should be sorted . 
 + * It doesn ' t affect sorting for static imports . 
 + * / 
 private boolean ordered = true ; 
 - / * * Should comparison be case sensitive . * / 
 + 
 + / * * 
 + * Control whether string comparison should be case sensitive or not . Case sensitive 
 + * sorting is in < a href = " https : / / en . wikipedia . org / wiki / ASCII # Order " > ASCII sort order < / a > . 
 + * It affects both type imports and static imports . 
 + * / 
 private boolean caseSensitive = true ; 
 
 / * * Last imported group . * / 
 @ @ - 247 , 16 + 459 , 26 @ @ public class ImportOrderCheck 
 * uses the properties { @ code staticGroups } and { @ code separatedStaticGroups } . 
 * * / 
 private boolean staticImportsApart ; 
 - / * * Whether static imports should be sorted alphabetically or not . * / 
 + 
 + / * * 
 + * Control whether < b > static imports < / b > located at < b > top < / b > or < b > bottom < / b > are 
 + * sorted within the group . 
 + * / 
 private boolean sortStaticImportsAlphabetically ; 
 - / * * Whether to use container ordering ( Eclipse IDE term ) for static imports or not . * / 
 + 
 + / * * 
 + * Control whether to use container ordering ( Eclipse IDE term ) for static imports 
 + * or not . 
 + * / 
 private boolean useContainerOrderingForStatic ; 
 
 - / * * The policy to enforce . * / 
 + / * * 
 + * Specify policy on the relative order between type imports and static imports . 
 + * / 
 private ImportOrderOption option = ImportOrderOption . UNDER ; 
 
 / * * 
 - * Set the option to enforce . 
 + * Setter to specify policy on the relative order between type imports and static imports . 
 * @ param optionStr string to decode option from 
 * @ throws IllegalArgumentException if unable to decode 
 * / 
 @ @ - 265 , 8 + 487 , 11 @ @ public class ImportOrderCheck 
 } 
 
 / * * 
 - * Sets the list of package groups for type imports and the order they should occur in the 
 - * file . 
 + * Setter to specify list of < b > type import < / b > groups ( every group identified either by a 
 + * common prefix string , or by a regular expression enclosed in forward slashes 
 + * ( e . g . { @ code / regexp / } ) . All type imports , which does not match any group , falls into an 
 + * additional group , located at the end . Thus , the empty list of type groups ( the default value ) 
 + * means one group for all type imports . 
 * 
 * @ param packageGroups a comma - separated list of package names / prefixes . 
 * / 
 @ @ - 275 , 9 + 500 , 12 @ @ public class ImportOrderCheck 
 } 
 
 / * * 
 - * Sets the list of package groups for static imports and the order they should occur in the 
 - * file . This property has effect only when the property { @ code option } is set to { @ code top } 
 - * or { @ code bottom } . ) 
 + * Setter to specify list of < b > static < / b > import groups ( every group identified either by a 
 + * common prefix string , or by a regular expression enclosed in forward slashes 
 + * ( e . g . { @ code / regexp / } ) . All static imports , which does not match any group , falls into an 
 + * additional group , located at the end . Thus , the empty list of static groups ( the default 
 + * value ) means one group for all static imports . This property has effect only when 
 + * the property { @ code option } is set to { @ code top } or { @ code bottom } . 
 * 
 * @ param packageGroups a comma - separated list of package names / prefixes . 
 * / 
 @ @ - 286 , 8 + 514 , 8 @ @ public class ImportOrderCheck 
 } 
 
 / * * 
 - * Sets whether or not imports should be ordered within any one group of 
 - * imports . 
 + * Setter to control whether type imports within each group should be sorted . 
 + * It doesn ' t affect sorting for static imports . 
 * 
 * @ param ordered 
 * whether lexicographic ordering of imports within a group 
 @ @ - 298 , 8 + 526 , 9 @ @ public class ImportOrderCheck 
 } 
 
 / * * 
 - * Sets whether or not groups of type imports must be separated from one another 
 - * by at least one blank line or comment . 
 + * Setter to control whether type import groups should be separated by , at least , 
 + * one blank line or comment and aren ' t separated internally . 
 + * It doesn ' t affect separations for static imports . 
 * 
 * @ param separated 
 * whether groups should be separated by one blank line or comment . 
 @ @ - 309 , 9 + 538 , 10 @ @ public class ImportOrderCheck 
 } 
 
 / * * 
 - * Sets whether or not groups of static imports must be separated from one another 
 - * by at least one blank line or comment . This property has effect only when the property 
 - * { @ code option } is set to { @ code top } or { @ code bottom } . ) 
 + * Setter to control whether static import groups should be separated by , at least , 
 + * one blank line or comment and aren ' t separated internally . 
 + * This property has effect only when the property 
 + * { @ code option } is is set to { @ code top } or { @ code bottom } . 
 * 
 * @ param separatedStaticGroups 
 * whether groups should be separated by one blank line or comment . 
 @ @ - 321 , 8 + 551 , 10 @ @ public class ImportOrderCheck 
 } 
 
 / * * 
 - * Sets whether string comparison should be case sensitive or not . 
 - * 
 + * Setter to control whether string comparison should be case sensitive or not . 
 + * Case sensitive sorting is in 
 + * < a href = " https : / / en . wikipedia . org / wiki / ASCII # Order " > ASCII sort order < / a > . 
 + * It affects both type imports and static imports . 
 * @ param caseSensitive 
 * whether string comparison should be case sensitive . 
 * / 
 @ @ - 331 , 8 + 563 , 8 @ @ public class ImportOrderCheck 
 } 
 
 / * * 
 - * Sets whether static imports ( when grouped using ' top ' and ' bottom ' option ) 
 - * are sorted alphabetically or according to the package groupings . 
 + * Setter to control whether < b > static imports < / b > located at < b > top < / b > or 
 + * < b > bottom < / b > are sorted within the group . 
 * @ param sortAlphabetically true or false . 
 * / 
 public void setSortStaticImportsAlphabetically ( boolean sortAlphabetically ) { 
 @ @ - 340 , 7 + 572 , 8 @ @ public class ImportOrderCheck 
 } 
 
 / * * 
 - * Sets whether to use container ordering ( Eclipse IDE term ) for static imports or not . 
 + * Setter to control whether to use container ordering ( Eclipse IDE term ) for static 
 + * imports or not . 
 * @ param useContainerOrdering whether to use container ordering for static imports or not . 
 * / 
 public void setUseContainerOrderingForStatic ( boolean useContainerOrdering ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 0772937 . . 2a8627a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 76 , 6 + 76 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " ClassTypeParameterName " , 
 " ConstantName " , 
 " CustomImportOrder " , 
 + " ImportOrder " , 
 " InterfaceMemberImpliedModifier " , 
 " InterfaceTypeParameterName " , 
 " LambdaParameterName " , 
 diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml 
 index da02dee . . 5b25fb5 100644 
 - - - a / src / xdocs / config _ imports . xml 
 + + + b / src / xdocs / config _ imports . xml 
 @ @ - 1348 , 8 + 1348 , 8 @ @ import java . util . stream . IntStream ; 
 < / section > 
 
 < section name = " ImportOrder " > 
 + < p > Since Checkstyle 3 . 2 < / p > 
 < subsection name = " Description " id = " ImportOrder _ Description " > 
 - < p > Since Checkstyle 3 . 2 < / p > 
 < p > Checks the ordering / grouping of imports . Features are : < / p > 
 < ul > 
 < li > groups type / static imports : ensures that groups of imports come in a 
 @ @ - 1367 , 11 + 1367 , 7 @ @ import java . util . stream . IntStream ; 
 < li > arrange static imports : ensures the relative order between 
 type imports and static imports ( see 
 < a href = " property _ types . html # importOrder " > import orders < / a > ) < / li > 
 - < / ul > 
 - < p > 
 - < a href = " # ImportOrder _ Examples " > Examples section < / a > contains examples that 
 - work with default formatter configurations of Eclipse , IntelliJ IDEA and NetBeans 
 - < / p > 
 + < / ul > 
 < / subsection > 
 
 < subsection name = " Properties " id = " ImportOrder _ Properties " > 
 @ @ - 1385 , 7 + 1381 , 7 @ @ import java . util . stream . IntStream ; 
 < / tr > 
 < tr > 
 < td > option < / td > 
 - < td > policy on the relative order between type imports and static imports < / td > 
 + < td > specify policy on the relative order between type imports and static imports . < / td > 
 < td > < a href = " property _ types . html # importOrder " > Import Order Policy < / a > < / td > 
 < td > < code > under < / code > < / td > 
 < td > 5 . 0 < / td > 
 @ @ - 1393 , 7 + 1389 , 7 @ @ import java . util . stream . IntStream ; 
 < tr > 
 < td > groups < / td > 
 < td > 
 - list of < b > type import < / b > groups ( every group identified either by a 
 + specify list of < b > type import < / b > groups ( every group identified either by a 
 common prefix string , or by a regular expression enclosed 
 in forward slashes ( e . g . < code > / regexp / < / code > ) . All type imports , 
 which does not match any group , falls into an additional group , located at the end . 
 @ @ - 1406 , 8 + 1402 , 8 @ @ import java . util . stream . IntStream ; 
 < / tr > 
 < tr > 
 < td > ordered < / td > 
 - < td > whether type imports within each group should be sorted 
 - ( It doesn ' t affect sorting for static imports . ) < / td > 
 + < td > control whether type imports within each group should be sorted . 
 + It doesn ' t affect sorting for static imports . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > true < / td > 
 < td > 3 . 2 < / td > 
 @ @ - 1415 , 9 + 1411 , 9 @ @ import java . util . stream . IntStream ; 
 < tr > 
 < td > separated < / td > 
 < td > 
 - whether type import groups should be separated by , at least , one 
 + control whether type import groups should be separated by , at least , one 
 blank line or comment and aren ' t separated internally . 
 - ( It doesn ' t affect separations for static imports . ) 
 + It doesn ' t affect separations for static imports . 
 < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > false < / td > 
 @ @ - 1426 , 10 + 1422 , 10 @ @ import java . util . stream . IntStream ; 
 < tr > 
 < td > separatedStaticGroups < / td > 
 < td > 
 - whether static import groups should be separated by , at least , one 
 + control whether static import groups should be separated by , at least , one 
 blank line or comment and aren ' t separated internally . 
 - ( This property has effect only when the property < code > option < / code > 
 - is is set to < code > top < / code > or < code > bottom < / code > . ) 
 + This property has effect only when the property < code > option < / code > 
 + is is set to < code > top < / code > or < code > bottom < / code > . 
 < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > false < / td > 
 @ @ - 1437 , 10 + 1433 , 10 @ @ import java . util . stream . IntStream ; 
 < / tr > 
 < tr > 
 < td > caseSensitive < / td > 
 - < td > whether string comparison should be case sensitive or not . 
 + < td > control whether string comparison should be case sensitive or not . 
 Case sensitive sorting is in 
 < a href = " https : / / en . wikipedia . org / wiki / ASCII # Order " > ASCII sort order < / a > . 
 - ( It affects both type imports and static imports ) 
 + It affects both type imports and static imports . 
 < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > true < / td > 
 @ @ - 1449 , 13 + 1445 , 13 @ @ import java . util . stream . IntStream ; 
 < tr > 
 < td > staticGroups < / td > 
 < td > 
 - list of < b > static < / b > import groups ( every group identified either by a 
 + specify list of < b > static < / b > import groups ( every group identified either by a 
 common prefix string , or by a regular expression enclosed 
 in forward slashes ( e . g . < code > / regexp / < / code > ) . All static imports , 
 which does not match any group , falls into an additional group , located at the end . 
 Thus , the empty list of static groups ( the default value ) means 
 - one group for all static imports . ( This property has effect only when 
 - the property < code > option < / code > is set to < code > top < / code > or < code > bottom < / code > . ) 
 + one group for all static imports . This property has effect only when 
 + the property < code > option < / code > is set to < code > top < / code > or < code > bottom < / code > . 
 < / td > 
 < td > < a href = " property _ types . html # regexp " > Regular Expressions < / a > < / td > 
 < td > < code > { } < / code > < / td > 
 @ @ - 1463 , 15 + 1459 , 19 @ @ import java . util . stream . IntStream ; 
 < / tr > 
 < tr > 
 < td > sortStaticImportsAlphabetically < / td > 
 - < td > whether < b > static imports < / b > located at < b > top < / b > or < b > bottom < / b > are sorted 
 - within the group . < / td > 
 + < td > 
 + control whether < b > static imports < / b > located at < b > top < / b > or 
 + < b > bottom < / b > are sorted within the group . 
 + < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > false < / td > 
 < td > 6 . 5 < / td > 
 < / tr > 
 < tr > 
 < td > useContainerOrderingForStatic < / td > 
 - < td > whether to use container ordering ( Eclipse IDE term ) for static imports or not < / td > 
 + < td > 
 + control whether to use container ordering ( Eclipse IDE term ) for static 
 + imports or not . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > false < / td > 
 < td > 7 . 1 < / td > 
 @ @ - 1559 , 12 + 1559 , 15 @ @ import java . util . stream . IntStream ; 
 ImportOrder has a limitation by design to enforce an empty line between groups 
 ( " java " , " javax " ) . There is no flexibility to enforce empty lines between some 
 groups and no empty lines between other groups . < / p > 
 - 
 + < p > 
 + Note : " separated " option is disabled because IDEA default has blank line 
 + between " java " and static imports , and no blank line between " javax " and " java " . 
 + < / p > 
 < source > 
 & lt ; module name = & quot ; ImportOrder & quot ; & gt ; 
 & lt ; property name = & quot ; groups & quot ; value = & quot ; * , javax , java & quot ; / & gt ; 
 & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / & gt ; 
 - & lt ; property name = & quot ; separated & quot ; value = & quot ; true & quot ; / & gt ; 
 + & lt ; property name = & quot ; separated & quot ; value = & quot ; false & quot ; / & gt ; 
 & lt ; property name = & quot ; option & quot ; value = & quot ; bottom & quot ; / & gt ; 
 & lt ; property name = & quot ; sortStaticImportsAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; 
 & lt ; / module & gt ; 
 @ @ - 1597 , 6 + 1600 , 27 @ @ import java . util . stream . IntStream ; 
 < / source > 
 
 < p > 
 + Group descriptions enclosed in slashes are interpreted as regular expressions . 
 + If multiple groups match , the one matching a longer 
 + substring of the imported name will take precedence , with ties 
 + broken first in favor of earlier matches and finally in favor of 
 + the first matching group . 
 + < / p > 
 + < p > 
 + There is always a wildcard group to which everything not in a named group 
 + belongs . If an import does not match a named group , the group belongs to 
 + this wildcard group . The wildcard group position can be specified using the 
 + { @ code * } character . 
 + < / p > 
 + < p > 
 + Check also has on option making it more flexible : 
 + < b > sortStaticImportsAlphabetically < / b > - sets whether static imports grouped by 
 + < b > top < / b > or < b > bottom < / b > option should be sorted alphabetically or 
 + not , default value is < b > false < / b > . It is applied to static imports grouped 
 + with < b > top < / b > or < b > bottom < / b > options . This option is helping in reconciling 
 + of this Check and other tools like Eclipse ' s Organize Imports feature . 
 + < / p > 
 + < p > 
 To configure the Check allows static imports grouped to the < b > top < / b > being sorted 
 alphabetically : 
 < / p > 
 @ @ - 1649 , 10 + 1673 , 10 @ @ public class SomeClass { . . . } 
 we compare the fully qualified import names . 
 For e . g . this is what is considered to be container names for the given example : 
 
 - import static HttpConstants . COLON = > HttpConstants 
 - import static HttpHeaders . addHeader = > HttpHeaders 
 - import static HttpHeaders . setHeader = > HttpHeaders 
 - import static HttpHeaders . Names . DATE = > HttpHeaders . Names 
 + import static HttpConstants . COLON = & gt ; HttpConstants 
 + import static HttpHeaders . addHeader = & gt ; HttpHeaders 
 + import static HttpHeaders . setHeader = & gt ; HttpHeaders 
 + import static HttpHeaders . Names . DATE = & gt ; HttpHeaders . Names 
 
 According to this logic , HttpHeaders . Names should come after HttpHeaders . 
 < / p >

NEAREST DIFF:
diff - - git a / . travis . yml b / . travis . yml 
 index ce3e079 . . 261a16e 100644 
 - - - a / . travis . yml 
 + + + b / . travis . yml 
 @ @ - 41 , 6 + 41 , 7 @ @ matrix : 
 env : 
 - DESC = " checkstyle and sevntu - checkstyle " 
 - CMD = " . / . ci / travis / travis . sh checkstyle - and - sevntu " 
 + - SKIP _ CI = " false " 
 
 # jacoco and codecov ( oraclejdk8 ) 
 - jdk : oraclejdk8 
 @ @ - 66 , 6 + 67 , 7 @ @ matrix : 
 env : 
 - DESC = " Releasenotes generation " 
 - CMD = " . / . ci / travis / travis . sh releasenotes - gen " 
 + - SKIP _ CI = " false " 
 
 # NonDex ( oraclejdk8 ) 
 - jdk : oraclejdk8
