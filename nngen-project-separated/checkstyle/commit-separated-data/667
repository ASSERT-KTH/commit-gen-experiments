BLEU SCORE: 0.050732163551227547

TEST MSG: Issue # 4592 : Added AbstractTreeTestSupport and JavadocParseTreeTest , AstTreeStringPrinterTest now extend from it
GENERATED MSG: Issue # 2609 : name ' Checkstyle ' was substituted to ' Main ' at class name

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java <nl> new file mode 100644 <nl> index 0000000 . . e4701ca <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java <nl> @ @ - 0 , 0 + 1 , 116 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . nio . charset . StandardCharsets ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Paths ; <nl> + <nl> + public abstract class AbstractTreeTestSupport extends AbstractPathTestSupport { <nl> + <nl> + protected static final String LF _ REGEX = " \ \ \ \ n " ; <nl> + <nl> + protected static final String CLRF _ REGEX = " \ \ \ \ r \ \ \ \ n " ; <nl> + <nl> + / * * <nl> + * Returns canonical path for the file with the given file name . <nl> + * The path is formed base on the non - compilable resources location . <nl> + * This implementation uses ' src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / ' <nl> + * as a non - compilable resource location . <nl> + * @ param filename file name . <nl> + * @ return canonical path for the file with the given file name . <nl> + * @ throws IOException if I / O exception occurs while forming the path . <nl> + * / <nl> + protected final String getNonCompilablePath ( String filename ) throws IOException { <nl> + return new File ( " src / test / resources - noncompilable / " + getPackageLocation ( ) <nl> + + filename ) . getCanonicalPath ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Performs verification of the given text ast tree representation . <nl> + * @ param expectedTextPrintFileName expected text ast tree representation . <nl> + * @ param actualJavaFileName actual text ast tree representation . <nl> + * @ param withComments whether to perform verification of comment nodes in tree . <nl> + * @ throws Exception if exception occurs during verification . <nl> + * / <nl> + protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName , <nl> + boolean withComments ) throws Exception { <nl> + final String expectedContents = readFile ( expectedTextPrintFileName ) ; <nl> + <nl> + final String actualContents = AstTreeStringPrinter . printFileAst ( <nl> + new File ( actualJavaFileName ) , withComments ) . replaceAll ( CLRF _ REGEX , LF _ REGEX ) ; <nl> + <nl> + assertEquals ( " Generated AST from Java file should match pre - defined AST " , expectedContents , <nl> + actualContents ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Verifies the java and javadoc AST generated for the supplied java file against <nl> + * the expected AST in supplied text file . <nl> + * @ param expectedTextPrintFilename name of the file having the expected ast . <nl> + * @ param actualJavaFilename name of the java file . <nl> + * @ throws Exception if exception occurs during verification . <nl> + * / <nl> + protected static void verifyJavaAndJavadocAst ( String expectedTextPrintFilename , <nl> + String actualJavaFilename ) throws Exception { <nl> + <nl> + final String expectedContents = readFile ( expectedTextPrintFilename ) ; <nl> + <nl> + final String actualContents = AstTreeStringPrinter . printJavaAndJavadocTree ( <nl> + new File ( actualJavaFilename ) ) . replaceAll ( CLRF _ REGEX , LF _ REGEX ) ; <nl> + <nl> + assertEquals ( " Generated AST from the java file should match the pre - defined AST " , <nl> + expectedContents , actualContents ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Verifies the javadoc tree generated for the supplied javadoc file against the expected tree <nl> + * in the supplied text file . <nl> + * @ param expectedTextPrintFilename name of the text file having the expected tree . <nl> + * @ param actualJavadocFilename name of the file containing the javadoc . <nl> + * @ throws Exception if exception occurs during verification . <nl> + * / <nl> + protected static void verifyJavadocTree ( String expectedTextPrintFilename , <nl> + String actualJavadocFilename ) throws Exception { <nl> + <nl> + final String expectedContents = readFile ( expectedTextPrintFilename ) ; <nl> + <nl> + final String actualContents = DetailNodeTreeStringPrinter . printFileAst ( <nl> + new File ( actualJavadocFilename ) ) . replaceAll ( CLRF _ REGEX , LF _ REGEX ) ; <nl> + <nl> + assertEquals ( " Generated tree from the javadoc file should match the pre - defined tree " , <nl> + expectedContents , actualContents ) ; <nl> + } <nl> + <nl> + / * * Reads the contents of a file . <nl> + * @ param filename the name of the file whose contents are to be read <nl> + * @ return contents of the file with all { @ code \ r \ n } replaced by { @ code \ n } <nl> + * @ throws IOException if I / O exception occurs while reading <nl> + * / <nl> + protected static String readFile ( String filename ) throws IOException { <nl> + return new String ( Files . readAllBytes ( <nl> + Paths . get ( filename ) ) , StandardCharsets . UTF _ 8 ) <nl> + . replaceAll ( CLRF _ REGEX , LF _ REGEX ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java <nl> index d663793 . . ad824a0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java <nl> @ @ - 22 , 7 + 22 , 6 @ @ package com . puppycrawl . tools . checkstyle ; <nl> import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; <nl> <nl> import java . io . File ; <nl> - import java . io . IOException ; <nl> import java . nio . charset . StandardCharsets ; <nl> import java . nio . file . Files ; <nl> import java . nio . file . Paths ; <nl> @ @ - 34 , 16 + 33 , 11 @ @ import antlr . NoViableAltException ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> <nl> - public class AstTreeStringPrinterTest extends BaseCheckTestSupport { <nl> + public class AstTreeStringPrinterTest extends AbstractTreeTestSupport { <nl> <nl> @ Override <nl> - protected String getPath ( String filename ) throws IOException { <nl> - return super . getPath ( " astprinter " + File . separator + filename ) ; <nl> - } <nl> - <nl> - @ Override <nl> - protected String getNonCompilablePath ( String filename ) throws IOException { <nl> - return super . getNonCompilablePath ( " astprinter " + File . separator + filename ) ; <nl> + protected String getPackageLocation ( ) { <nl> + return " com / puppycrawl / tools / checkstyle / astprinter / " ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java <nl> index b194e04 . . 33e207d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java <nl> @ @ - 24 , 13 + 24 , 13 @ @ import java . io . IOException ; <nl> <nl> import org . junit . Test ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . AbstractTreeTestSupport ; <nl> <nl> - public class JavadocParseTreeTest extends BaseCheckTestSupport { <nl> + public class JavadocParseTreeTest extends AbstractTreeTestSupport { <nl> <nl> @ Override <nl> - protected String getPath ( String filename ) throws IOException { <nl> - return super . getPath ( " grammars " + File . separator + " javadoc " + File . separator + filename ) ; <nl> + protected String getPackageLocation ( ) { <nl> + return " com / puppycrawl / tools / checkstyle / grammars / javadoc / " ; <nl> } <nl> <nl> private String getHtmlPath ( String filename ) throws IOException {
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml <nl> index d24a831 . . 4cb6aa4 100644 <nl> - - - a / config / checkstyle _ sevntu _ checks . xml <nl> + + + b / config / checkstyle _ sevntu _ checks . xml <nl> @ @ - 54 , 6 + 54 , 8 @ @ <nl> < module name = " EitherLogOrThrowCheck " / > <nl> < module name = " SingleSpaceSeparator " > <nl> < metadata name = " validateCommentNodes " value = " false " / > <nl> + < module name = " IllegalCatchExtended " > <nl> + < property name = " allowRethrow " value = " true " / > <nl> < / module > <nl> < / module > <nl> < / module >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java 
 new file mode 100644 
 index 0000000 . . e4701ca 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java 
 @ @ - 0 , 0 + 1 , 116 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . nio . charset . StandardCharsets ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Paths ; 
 + 
 + public abstract class AbstractTreeTestSupport extends AbstractPathTestSupport { 
 + 
 + protected static final String LF _ REGEX = " \ \ \ \ n " ; 
 + 
 + protected static final String CLRF _ REGEX = " \ \ \ \ r \ \ \ \ n " ; 
 + 
 + / * * 
 + * Returns canonical path for the file with the given file name . 
 + * The path is formed base on the non - compilable resources location . 
 + * This implementation uses ' src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / ' 
 + * as a non - compilable resource location . 
 + * @ param filename file name . 
 + * @ return canonical path for the file with the given file name . 
 + * @ throws IOException if I / O exception occurs while forming the path . 
 + * / 
 + protected final String getNonCompilablePath ( String filename ) throws IOException { 
 + return new File ( " src / test / resources - noncompilable / " + getPackageLocation ( ) 
 + + filename ) . getCanonicalPath ( ) ; 
 + } 
 + 
 + / * * 
 + * Performs verification of the given text ast tree representation . 
 + * @ param expectedTextPrintFileName expected text ast tree representation . 
 + * @ param actualJavaFileName actual text ast tree representation . 
 + * @ param withComments whether to perform verification of comment nodes in tree . 
 + * @ throws Exception if exception occurs during verification . 
 + * / 
 + protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName , 
 + boolean withComments ) throws Exception { 
 + final String expectedContents = readFile ( expectedTextPrintFileName ) ; 
 + 
 + final String actualContents = AstTreeStringPrinter . printFileAst ( 
 + new File ( actualJavaFileName ) , withComments ) . replaceAll ( CLRF _ REGEX , LF _ REGEX ) ; 
 + 
 + assertEquals ( " Generated AST from Java file should match pre - defined AST " , expectedContents , 
 + actualContents ) ; 
 + } 
 + 
 + / * * 
 + * Verifies the java and javadoc AST generated for the supplied java file against 
 + * the expected AST in supplied text file . 
 + * @ param expectedTextPrintFilename name of the file having the expected ast . 
 + * @ param actualJavaFilename name of the java file . 
 + * @ throws Exception if exception occurs during verification . 
 + * / 
 + protected static void verifyJavaAndJavadocAst ( String expectedTextPrintFilename , 
 + String actualJavaFilename ) throws Exception { 
 + 
 + final String expectedContents = readFile ( expectedTextPrintFilename ) ; 
 + 
 + final String actualContents = AstTreeStringPrinter . printJavaAndJavadocTree ( 
 + new File ( actualJavaFilename ) ) . replaceAll ( CLRF _ REGEX , LF _ REGEX ) ; 
 + 
 + assertEquals ( " Generated AST from the java file should match the pre - defined AST " , 
 + expectedContents , actualContents ) ; 
 + } 
 + 
 + / * * 
 + * Verifies the javadoc tree generated for the supplied javadoc file against the expected tree 
 + * in the supplied text file . 
 + * @ param expectedTextPrintFilename name of the text file having the expected tree . 
 + * @ param actualJavadocFilename name of the file containing the javadoc . 
 + * @ throws Exception if exception occurs during verification . 
 + * / 
 + protected static void verifyJavadocTree ( String expectedTextPrintFilename , 
 + String actualJavadocFilename ) throws Exception { 
 + 
 + final String expectedContents = readFile ( expectedTextPrintFilename ) ; 
 + 
 + final String actualContents = DetailNodeTreeStringPrinter . printFileAst ( 
 + new File ( actualJavadocFilename ) ) . replaceAll ( CLRF _ REGEX , LF _ REGEX ) ; 
 + 
 + assertEquals ( " Generated tree from the javadoc file should match the pre - defined tree " , 
 + expectedContents , actualContents ) ; 
 + } 
 + 
 + / * * Reads the contents of a file . 
 + * @ param filename the name of the file whose contents are to be read 
 + * @ return contents of the file with all { @ code \ r \ n } replaced by { @ code \ n } 
 + * @ throws IOException if I / O exception occurs while reading 
 + * / 
 + protected static String readFile ( String filename ) throws IOException { 
 + return new String ( Files . readAllBytes ( 
 + Paths . get ( filename ) ) , StandardCharsets . UTF _ 8 ) 
 + . replaceAll ( CLRF _ REGEX , LF _ REGEX ) ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java 
 index d663793 . . ad824a0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java 
 @ @ - 22 , 7 + 22 , 6 @ @ package com . puppycrawl . tools . checkstyle ; 
 import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; 
 
 import java . io . File ; 
 - import java . io . IOException ; 
 import java . nio . charset . StandardCharsets ; 
 import java . nio . file . Files ; 
 import java . nio . file . Paths ; 
 @ @ - 34 , 16 + 33 , 11 @ @ import antlr . NoViableAltException ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 
 - public class AstTreeStringPrinterTest extends BaseCheckTestSupport { 
 + public class AstTreeStringPrinterTest extends AbstractTreeTestSupport { 
 
 @ Override 
 - protected String getPath ( String filename ) throws IOException { 
 - return super . getPath ( " astprinter " + File . separator + filename ) ; 
 - } 
 - 
 - @ Override 
 - protected String getNonCompilablePath ( String filename ) throws IOException { 
 - return super . getNonCompilablePath ( " astprinter " + File . separator + filename ) ; 
 + protected String getPackageLocation ( ) { 
 + return " com / puppycrawl / tools / checkstyle / astprinter / " ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java 
 index b194e04 . . 33e207d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java 
 @ @ - 24 , 13 + 24 , 13 @ @ import java . io . IOException ; 
 
 import org . junit . Test ; 
 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . AbstractTreeTestSupport ; 
 
 - public class JavadocParseTreeTest extends BaseCheckTestSupport { 
 + public class JavadocParseTreeTest extends AbstractTreeTestSupport { 
 
 @ Override 
 - protected String getPath ( String filename ) throws IOException { 
 - return super . getPath ( " grammars " + File . separator + " javadoc " + File . separator + filename ) ; 
 + protected String getPackageLocation ( ) { 
 + return " com / puppycrawl / tools / checkstyle / grammars / javadoc / " ; 
 } 
 
 private String getHtmlPath ( String filename ) throws IOException {

NEAREST DIFF:
diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml 
 index d24a831 . . 4cb6aa4 100644 
 - - - a / config / checkstyle _ sevntu _ checks . xml 
 + + + b / config / checkstyle _ sevntu _ checks . xml 
 @ @ - 54 , 6 + 54 , 8 @ @ 
 < module name = " EitherLogOrThrowCheck " / > 
 < module name = " SingleSpaceSeparator " > 
 < metadata name = " validateCommentNodes " value = " false " / > 
 + < module name = " IllegalCatchExtended " > 
 + < property name = " allowRethrow " value = " true " / > 
 < / module > 
 < / module > 
 < / module >
