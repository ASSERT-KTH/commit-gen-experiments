BLEU SCORE: 0.0734705312597788

TEST MSG: Issue # 4095 : Split and Organize Checkstyle inputs by Test for AbbreviationAsWordInName
GENERATED MSG: Issue # 2161 : unify test input locations for naming package

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> index c076f65 . . 3a56ae1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> @ @ - 35 , 7 + 35 , 8 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " naming " + File . separator + filename ) ; <nl> + + " naming " + File . separator + " abbrevationaswordinname " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 56 , 7 + 57 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 74 , 7 + 75 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 92 , 7 + 93 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 118 , 7 + 119 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 147 , 7 + 148 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 84 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 172 , 7 + 173 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 201 , 7 + 202 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> + getWarningMessage ( " s2erialNUMBER " , expectedCapitalCount ) , / / no ignore for static <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 229 , 7 + 230 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> + getWarningMessage ( " s1erialNUMBER " , expectedCapitalCount ) , / / no ignore for final <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 249 , 7 + 250 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " InputAbbreviationAsWordInTypeNameOverridableMethod . java " ) , expected ) ; <nl> + getPath ( " InputAbbreviationAsWordInNameOverridableMethod . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 298 , 7 + 299 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> " 119 : " + getWarningMessage ( " VALUE " , expectedCapitalCount ) , <nl> } ; <nl> verify ( checkConfig , <nl> - getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; <nl> + getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 312 , 7 + 313 , 9 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checkConfig , getPath ( " InputAbstractMultisetSetCount . java " ) , expected ) ; <nl> + verify ( checkConfig , <nl> + getPath ( " InputAbbreviationAsWordInNameAbstractMultisetSetCount . java " ) , <nl> + expected ) ; <nl> } <nl> <nl> private String getWarningMessage ( String typeName , int expectedCapitalCount ) { <nl> @ @ - 325 , 6 + 328 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checkConfig , getPath ( " InputAbbreviationAsWordReceiver . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameReceiver . java " ) , <nl> + expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeName . java <nl> deleted file mode 100644 <nl> index 2e6633c . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeName . java <nl> + + + / dev / null <nl> @ @ - 1 , 120 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> - <nl> - abstract class IIIInputAbstractClassName { <nl> - } <nl> - <nl> - abstract class NonAAAAbstractClassName { <nl> - } <nl> - <nl> - abstract class FactoryWithBADNAme { <nl> - } <nl> - <nl> - abstract class AbstractCLASSName { <nl> - abstract class NonAbstractInnerClass { <nl> - } <nl> - } <nl> - <nl> - abstract class ClassFactory1 { <nl> - abstract class WellNamedFactory { <nl> - } <nl> - } <nl> - <nl> - class NonAbstractClass1 { <nl> - } <nl> - <nl> - class AbstractClass1 { <nl> - } <nl> - <nl> - class Class1Factory1 { <nl> - } <nl> - <nl> - abstract class AbstractClassName3 { <nl> - class AbstractINNERRClass { <nl> - } <nl> - } <nl> - <nl> - abstract class Class3Factory { <nl> - class WellNamedFACTORY { <nl> - 	 public void marazmaticMETHODName ( ) { <nl> - 	 	 int marazmaticVARIABLEName = 2 ; <nl> - 	 	 int MARAZMATICVariableName = 1 ; <nl> - 	 } <nl> - } <nl> - } <nl> - <nl> - interface Directions { <nl> - int RIGHT = 1 ; <nl> - int LEFT = 2 ; <nl> - int UP = 3 ; <nl> - int DOWN = 4 ; <nl> - } <nl> - <nl> - interface BadNameForInterfeis <nl> - { <nl> - void interfaceMethod ( ) ; <nl> - } <nl> - <nl> - abstract class NonAAAAbstractClassName2 { <nl> - 	 public int serialNUMBER = 6 ; <nl> - 	 public final int s1erialNUMBER = 6 ; <nl> - 	 private static int s2erialNUMBER = 6 ; <nl> - 	 private static final int s3erialNUMBER = 6 ; <nl> - } <nl> - <nl> - interface Interface1 { <nl> - 	 <nl> - 	 String VALUEEEE = " value " ; / / in interface this is final / static <nl> - 	 <nl> - } <nl> - <nl> - interface Interface2 { <nl> - 	 <nl> - 	 static String VALUEEEE = " value " ; / / in interface this is final / static <nl> - 	 <nl> - } <nl> - <nl> - interface Interface3 { <nl> - 	 <nl> - 	 final String VALUEEEE = " value " ; / / in interface this is final / static <nl> - 	 <nl> - } <nl> - <nl> - interface Interface4 { <nl> - 	 <nl> - 	 final static String VALUEEEE = " value " ; / / in interface this is final / static <nl> - 	 <nl> - } <nl> - <nl> - class FIleNameFormatException extends Exception { <nl> - <nl> - private static final long serialVersionUID = 1L ; <nl> - <nl> - public FIleNameFormatException ( Exception e ) { <nl> - super ( e ) ; <nl> - } <nl> - } <nl> - <nl> - class StateX { <nl> - int userID ; <nl> - int scaleX , scaleY , scaleZ ; <nl> - <nl> - int getScaleX ( ) { <nl> - return this . scaleX ; <nl> - } <nl> - } <nl> - <nl> - @ interface Annotation1 { <nl> - String VALUE = " value " ; / / in @ interface this is final / static <nl> - } <nl> - <nl> - @ interface Annotation2 { <nl> - static String VALUE = " value " ; / / in @ interface this is final / static <nl> - } <nl> - <nl> - @ interface Annotation3 { <nl> - final String VALUE = " value " ; / / in @ interface this is final / static <nl> - } <nl> - <nl> - @ interface Annotation4 { <nl> - final static String VALUE = " value " ; / / in @ interface this is final / static <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameOverridableMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameOverridableMethod . java <nl> deleted file mode 100644 <nl> index 9c2031d . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameOverridableMethod . java <nl> + + + / dev / null <nl> @ @ - 1 , 39 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> - <nl> - import org . junit . Before ; <nl> - <nl> - abstract class NonAAAAbstractClassName1 extends Class1 { <nl> - 	 public int serialNUMBER = 6 ; <nl> - 	 public final int s1erialNUMBER = 6 ; <nl> - 	 private static int s2erialNUMBER = 6 ; <nl> - 	 private static final int s3erialNUMBER = 6 ; <nl> - 	 <nl> - 	 @ Override <nl> - 	 @ SuppressWarnings ( value = { " " } ) <nl> - 	 @ Before <nl> - 	 protected void oveRRRRRrriddenMethod ( ) { <nl> - 	 int a = 0 ; <nl> - 	 / / blah - blah <nl> - 	 } <nl> - } <nl> - <nl> - class Class1 { <nl> - @ SuppressWarnings ( value = { " " } ) <nl> - protected void oveRRRRRrriddenMethod ( ) { <nl> - int a = 0 ; <nl> - / / blah - blah <nl> - } <nl> - <nl> - } <nl> - <nl> - class Class2 extends Class1 { <nl> - <nl> - @ Override <nl> - @ SuppressWarnings ( value = { " " } ) <nl> - @ Before <nl> - 	 protected void oveRRRRRrriddenMethod ( ) { <nl> - int a = 0 ; <nl> - / / blah - blah <nl> - } <nl> - <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordReceiver . java <nl> deleted file mode 100644 <nl> index b71c51b . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordReceiver . java <nl> + + + / dev / null <nl> @ @ - 1 , 9 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> - <nl> - public class InputAbbreviationAsWordReceiver { <nl> - public void foo4 ( InputAbbreviationAsWordReceiver this ) { } <nl> - <nl> - private class Inner { <nl> - public Inner ( InputAbbreviationAsWordReceiver InputAbbreviationAsWordReceiver . this ) { } <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractMultisetSetCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractMultisetSetCount . java <nl> deleted file mode 100644 <nl> index c49a2e5 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractMultisetSetCount . java <nl> + + + / dev / null <nl> @ @ - 1 , 18 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> - <nl> - public abstract class InputAbstractMultisetSetCount < E > { <nl> - <nl> - private static final String SUPPORTS _ REMOVE = " " ; <nl> - <nl> - @ CollectionFeature . Require ( absent = SUPPORTS _ REMOVE ) <nl> - public void testSetCount _ negative _ removeUnsupported ( ) { <nl> - } <nl> - } <nl> - <nl> - @ interface CollectionFeature { <nl> - <nl> - public @ interface Require <nl> - { <nl> - String absent ( ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameAbstractMultisetSetCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameAbstractMultisetSetCount . java <nl> new file mode 100644 <nl> index 0000000 . . d7a1756 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameAbstractMultisetSetCount . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . abbrevationaswordinname ; <nl> + <nl> + public abstract class InputAbbreviationAsWordInNameAbstractMultisetSetCount < E > { <nl> + <nl> + private static final String SUPPORTS _ REMOVE = " " ; <nl> + <nl> + @ CollectionFeature . Require ( absent = SUPPORTS _ REMOVE ) <nl> + public void testSetCount _ negative _ removeUnsupported ( ) { <nl> + } <nl> + } <nl> + <nl> + @ interface CollectionFeature { <nl> + <nl> + public @ interface Require <nl> + { <nl> + String absent ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameOverridableMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameOverridableMethod . java <nl> new file mode 100644 <nl> index 0000000 . . e769e04 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameOverridableMethod . java <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . abbrevationaswordinname ; <nl> + <nl> + import org . junit . Before ; <nl> + <nl> + abstract class NonAAAAbstractClassName1 extends Class1 { <nl> + 	 public int serialNUMBER = 6 ; <nl> + 	 public final int s1erialNUMBER = 6 ; <nl> + 	 private static int s2erialNUMBER = 6 ; <nl> + 	 private static final int s3erialNUMBER = 6 ; <nl> + 	 <nl> + 	 @ Override <nl> + 	 @ SuppressWarnings ( value = { " " } ) <nl> + 	 @ Before <nl> + 	 protected void oveRRRRRrriddenMethod ( ) { <nl> + 	 int a = 0 ; <nl> + 	 / / blah - blah <nl> + 	 } <nl> + } <nl> + <nl> + class Class1 { <nl> + @ SuppressWarnings ( value = { " " } ) <nl> + protected void oveRRRRRrriddenMethod ( ) { <nl> + int a = 0 ; <nl> + / / blah - blah <nl> + } <nl> + <nl> + } <nl> + <nl> + class Class2 extends Class1 { <nl> + <nl> + @ Override <nl> + @ SuppressWarnings ( value = { " " } ) <nl> + @ Before <nl> + 	 protected void oveRRRRRrriddenMethod ( ) { <nl> + int a = 0 ; <nl> + / / blah - blah <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameReceiver . java <nl> new file mode 100644 <nl> index 0000000 . . b55a9dc <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameReceiver . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . abbrevationaswordinname ; <nl> + <nl> + public class InputAbbreviationAsWordInNameReceiver { <nl> + public void foo4 ( InputAbbreviationAsWordInNameReceiver this ) { } <nl> + <nl> + private class Inner { <nl> + public Inner ( InputAbbreviationAsWordInNameReceiver InputAbbreviationAsWordInNameReceiver . this ) { } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameType . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameType . java <nl> new file mode 100644 <nl> index 0000000 . . fa5a3ab <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameType . java <nl> @ @ - 0 , 0 + 1 , 120 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . abbrevationaswordinname ; <nl> + <nl> + abstract class IIIInputAbstractClassName { <nl> + } <nl> + <nl> + abstract class NonAAAAbstractClassName { <nl> + } <nl> + <nl> + abstract class FactoryWithBADNAme { <nl> + } <nl> + <nl> + abstract class AbstractCLASSName { <nl> + abstract class NonAbstractInnerClass { <nl> + } <nl> + } <nl> + <nl> + abstract class ClassFactory1 { <nl> + abstract class WellNamedFactory { <nl> + } <nl> + } <nl> + <nl> + class NonAbstractClass1 { <nl> + } <nl> + <nl> + class AbstractClass1 { <nl> + } <nl> + <nl> + class Class1Factory1 { <nl> + } <nl> + <nl> + abstract class AbstractClassName3 { <nl> + class AbstractINNERRClass { <nl> + } <nl> + } <nl> + <nl> + abstract class Class3Factory { <nl> + class WellNamedFACTORY { <nl> + 	 public void marazmaticMETHODName ( ) { <nl> + 	 	 int marazmaticVARIABLEName = 2 ; <nl> + 	 	 int MARAZMATICVariableName = 1 ; <nl> + 	 } <nl> + } <nl> + } <nl> + <nl> + interface Directions { <nl> + int RIGHT = 1 ; <nl> + int LEFT = 2 ; <nl> + int UP = 3 ; <nl> + int DOWN = 4 ; <nl> + } <nl> + <nl> + interface BadNameForInterfeis <nl> + { <nl> + void interfaceMethod ( ) ; <nl> + } <nl> + <nl> + abstract class NonAAAAbstractClassName2 { <nl> + 	 public int serialNUMBER = 6 ; <nl> + 	 public final int s1erialNUMBER = 6 ; <nl> + 	 private static int s2erialNUMBER = 6 ; <nl> + 	 private static final int s3erialNUMBER = 6 ; <nl> + } <nl> + <nl> + interface Interface1 { <nl> + 	 <nl> + 	 String VALUEEEE = " value " ; / / in interface this is final / static <nl> + 	 <nl> + } <nl> + <nl> + interface Interface2 { <nl> + 	 <nl> + 	 static String VALUEEEE = " value " ; / / in interface this is final / static <nl> + 	 <nl> + } <nl> + <nl> + interface Interface3 { <nl> + 	 <nl> + 	 final String VALUEEEE = " value " ; / / in interface this is final / static <nl> + 	 <nl> + } <nl> + <nl> + interface Interface4 { <nl> + 	 <nl> + 	 final static String VALUEEEE = " value " ; / / in interface this is final / static <nl> + 	 <nl> + } <nl> + <nl> + class FIleNameFormatException extends Exception { <nl> + <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> + public FIleNameFormatException ( Exception e ) { <nl> + super ( e ) ; <nl> + } <nl> + } <nl> + <nl> + class StateX { <nl> + int userID ; <nl> + int scaleX , scaleY , scaleZ ; <nl> + <nl> + int getScaleX ( ) { <nl> + return this . scaleX ; <nl> + } <nl> + } <nl> + <nl> + @ interface Annotation1 { <nl> + String VALUE = " value " ; / / in @ interface this is final / static <nl> + } <nl> + <nl> + @ interface Annotation2 { <nl> + static String VALUE = " value " ; / / in @ interface this is final / static <nl> + } <nl> + <nl> + @ interface Annotation3 { <nl> + final String VALUE = " value " ; / / in @ interface this is final / static <nl> + } <nl> + <nl> + @ interface Annotation4 { <nl> + final static String VALUE = " value " ; / / in @ interface this is final / static <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> index 89a41fc . . 2a550da 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> @ @ - 539 , 7 + 539 , 7 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> createChecker ( checkConfig ) ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator <nl> + verify ( checkConfig , getPath ( " checks " + File . separator + " imports " + File . separator <nl> + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> new file mode 100644 <nl> index 0000000 . . 10b8399 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; <nl> + <nl> + / / every import from javadoc package has comment in brackets indicating presence of keywords <nl> + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) <nl> + <nl> + / / STANDARD - keyword Check <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) <nl> + <nl> + / / SPECIAL _ IMPORTS - keyword Tag <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) <nl> + <nl> + import com . puppycrawl . tools . * ; <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) <nl> + <nl> + public class InputCustomImportOrder _ OverlappingPatterns { <nl> + } <nl> + / * <nl> + test : testRulesOrder _ ThirdBeforeSame ( ) <nl> + configuration : <nl> + checkConfig . addAttribute ( " customImportOrderRules " , <nl> + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; <nl> + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> + * / <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> deleted file mode 100644 <nl> index 10b8399 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> + + + / dev / null <nl> @ @ - 1 , 37 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; <nl> - <nl> - / / every import from javadoc package has comment in brackets indicating presence of keywords <nl> - / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) <nl> - <nl> - / / STANDARD - keyword Check <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) <nl> - <nl> - / / SPECIAL _ IMPORTS - keyword Tag <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) <nl> - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) <nl> - <nl> - import com . puppycrawl . tools . * ; <nl> - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) <nl> - <nl> - public class InputCustomImportOrder _ OverlappingPatterns { <nl> - } <nl> - / * <nl> - test : testRulesOrder _ ThirdBeforeSame ( ) <nl> - configuration : <nl> - checkConfig . addAttribute ( " customImportOrderRules " , <nl> - " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; <nl> - checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> - * /

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 index c076f65 . . 3a56ae1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 @ @ - 35 , 7 + 35 , 8 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " naming " + File . separator + filename ) ; 
 + + " naming " + File . separator + " abbrevationaswordinname " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 56 , 7 + 57 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 74 , 7 + 75 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 32 : " + getWarningMessage ( " AbstractINNERRClass " , expectedCapitalCount ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 92 , 7 + 93 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 37 : " + getWarningMessage ( " WellNamedFACTORY " , expectedCapitalCount ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 118 , 7 + 119 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 58 : " + getWarningMessage ( " serialNUMBER " , expectedCapitalCount ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 147 , 7 + 148 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 84 : " + getWarningMessage ( " VALUEEEE " , expectedCapitalCount ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 172 , 7 + 173 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 38 : " + getWarningMessage ( " marazmaticMETHODName " , expectedCapitalCount ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 201 , 7 + 202 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 + getWarningMessage ( " s2erialNUMBER " , expectedCapitalCount ) , / / no ignore for static 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 229 , 7 + 230 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 + getWarningMessage ( " s1erialNUMBER " , expectedCapitalCount ) , / / no ignore for final 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 249 , 7 + 250 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " InputAbbreviationAsWordInTypeNameOverridableMethod . java " ) , expected ) ; 
 + getPath ( " InputAbbreviationAsWordInNameOverridableMethod . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 298 , 7 + 299 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 " 119 : " + getWarningMessage ( " VALUE " , expectedCapitalCount ) , 
 } ; 
 verify ( checkConfig , 
 - getPath ( " InputAbbreviationAsWordInTypeName . java " ) , expected ) ; 
 + getPath ( " InputAbbreviationAsWordInNameType . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 312 , 7 + 313 , 9 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checkConfig , getPath ( " InputAbstractMultisetSetCount . java " ) , expected ) ; 
 + verify ( checkConfig , 
 + getPath ( " InputAbbreviationAsWordInNameAbstractMultisetSetCount . java " ) , 
 + expected ) ; 
 } 
 
 private String getWarningMessage ( String typeName , int expectedCapitalCount ) { 
 @ @ - 325 , 6 + 328 , 7 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checkConfig , getPath ( " InputAbbreviationAsWordReceiver . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordInNameReceiver . java " ) , 
 + expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeName . java 
 deleted file mode 100644 
 index 2e6633c . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeName . java 
 + + + / dev / null 
 @ @ - 1 , 120 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . naming ; 
 - 
 - abstract class IIIInputAbstractClassName { 
 - } 
 - 
 - abstract class NonAAAAbstractClassName { 
 - } 
 - 
 - abstract class FactoryWithBADNAme { 
 - } 
 - 
 - abstract class AbstractCLASSName { 
 - abstract class NonAbstractInnerClass { 
 - } 
 - } 
 - 
 - abstract class ClassFactory1 { 
 - abstract class WellNamedFactory { 
 - } 
 - } 
 - 
 - class NonAbstractClass1 { 
 - } 
 - 
 - class AbstractClass1 { 
 - } 
 - 
 - class Class1Factory1 { 
 - } 
 - 
 - abstract class AbstractClassName3 { 
 - class AbstractINNERRClass { 
 - } 
 - } 
 - 
 - abstract class Class3Factory { 
 - class WellNamedFACTORY { 
 - 	 public void marazmaticMETHODName ( ) { 
 - 	 	 int marazmaticVARIABLEName = 2 ; 
 - 	 	 int MARAZMATICVariableName = 1 ; 
 - 	 } 
 - } 
 - } 
 - 
 - interface Directions { 
 - int RIGHT = 1 ; 
 - int LEFT = 2 ; 
 - int UP = 3 ; 
 - int DOWN = 4 ; 
 - } 
 - 
 - interface BadNameForInterfeis 
 - { 
 - void interfaceMethod ( ) ; 
 - } 
 - 
 - abstract class NonAAAAbstractClassName2 { 
 - 	 public int serialNUMBER = 6 ; 
 - 	 public final int s1erialNUMBER = 6 ; 
 - 	 private static int s2erialNUMBER = 6 ; 
 - 	 private static final int s3erialNUMBER = 6 ; 
 - } 
 - 
 - interface Interface1 { 
 - 	 
 - 	 String VALUEEEE = " value " ; / / in interface this is final / static 
 - 	 
 - } 
 - 
 - interface Interface2 { 
 - 	 
 - 	 static String VALUEEEE = " value " ; / / in interface this is final / static 
 - 	 
 - } 
 - 
 - interface Interface3 { 
 - 	 
 - 	 final String VALUEEEE = " value " ; / / in interface this is final / static 
 - 	 
 - } 
 - 
 - interface Interface4 { 
 - 	 
 - 	 final static String VALUEEEE = " value " ; / / in interface this is final / static 
 - 	 
 - } 
 - 
 - class FIleNameFormatException extends Exception { 
 - 
 - private static final long serialVersionUID = 1L ; 
 - 
 - public FIleNameFormatException ( Exception e ) { 
 - super ( e ) ; 
 - } 
 - } 
 - 
 - class StateX { 
 - int userID ; 
 - int scaleX , scaleY , scaleZ ; 
 - 
 - int getScaleX ( ) { 
 - return this . scaleX ; 
 - } 
 - } 
 - 
 - @ interface Annotation1 { 
 - String VALUE = " value " ; / / in @ interface this is final / static 
 - } 
 - 
 - @ interface Annotation2 { 
 - static String VALUE = " value " ; / / in @ interface this is final / static 
 - } 
 - 
 - @ interface Annotation3 { 
 - final String VALUE = " value " ; / / in @ interface this is final / static 
 - } 
 - 
 - @ interface Annotation4 { 
 - final static String VALUE = " value " ; / / in @ interface this is final / static 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameOverridableMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameOverridableMethod . java 
 deleted file mode 100644 
 index 9c2031d . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordInTypeNameOverridableMethod . java 
 + + + / dev / null 
 @ @ - 1 , 39 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . naming ; 
 - 
 - import org . junit . Before ; 
 - 
 - abstract class NonAAAAbstractClassName1 extends Class1 { 
 - 	 public int serialNUMBER = 6 ; 
 - 	 public final int s1erialNUMBER = 6 ; 
 - 	 private static int s2erialNUMBER = 6 ; 
 - 	 private static final int s3erialNUMBER = 6 ; 
 - 	 
 - 	 @ Override 
 - 	 @ SuppressWarnings ( value = { " " } ) 
 - 	 @ Before 
 - 	 protected void oveRRRRRrriddenMethod ( ) { 
 - 	 int a = 0 ; 
 - 	 / / blah - blah 
 - 	 } 
 - } 
 - 
 - class Class1 { 
 - @ SuppressWarnings ( value = { " " } ) 
 - protected void oveRRRRRrriddenMethod ( ) { 
 - int a = 0 ; 
 - / / blah - blah 
 - } 
 - 
 - } 
 - 
 - class Class2 extends Class1 { 
 - 
 - @ Override 
 - @ SuppressWarnings ( value = { " " } ) 
 - @ Before 
 - 	 protected void oveRRRRRrriddenMethod ( ) { 
 - int a = 0 ; 
 - / / blah - blah 
 - } 
 - 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordReceiver . java 
 deleted file mode 100644 
 index b71c51b . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordReceiver . java 
 + + + / dev / null 
 @ @ - 1 , 9 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . naming ; 
 - 
 - public class InputAbbreviationAsWordReceiver { 
 - public void foo4 ( InputAbbreviationAsWordReceiver this ) { } 
 - 
 - private class Inner { 
 - public Inner ( InputAbbreviationAsWordReceiver InputAbbreviationAsWordReceiver . this ) { } 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractMultisetSetCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractMultisetSetCount . java 
 deleted file mode 100644 
 index c49a2e5 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractMultisetSetCount . java 
 + + + / dev / null 
 @ @ - 1 , 18 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . naming ; 
 - 
 - public abstract class InputAbstractMultisetSetCount < E > { 
 - 
 - private static final String SUPPORTS _ REMOVE = " " ; 
 - 
 - @ CollectionFeature . Require ( absent = SUPPORTS _ REMOVE ) 
 - public void testSetCount _ negative _ removeUnsupported ( ) { 
 - } 
 - } 
 - 
 - @ interface CollectionFeature { 
 - 
 - public @ interface Require 
 - { 
 - String absent ( ) ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameAbstractMultisetSetCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameAbstractMultisetSetCount . java 
 new file mode 100644 
 index 0000000 . . d7a1756 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameAbstractMultisetSetCount . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . abbrevationaswordinname ; 
 + 
 + public abstract class InputAbbreviationAsWordInNameAbstractMultisetSetCount < E > { 
 + 
 + private static final String SUPPORTS _ REMOVE = " " ; 
 + 
 + @ CollectionFeature . Require ( absent = SUPPORTS _ REMOVE ) 
 + public void testSetCount _ negative _ removeUnsupported ( ) { 
 + } 
 + } 
 + 
 + @ interface CollectionFeature { 
 + 
 + public @ interface Require 
 + { 
 + String absent ( ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameOverridableMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameOverridableMethod . java 
 new file mode 100644 
 index 0000000 . . e769e04 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameOverridableMethod . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . abbrevationaswordinname ; 
 + 
 + import org . junit . Before ; 
 + 
 + abstract class NonAAAAbstractClassName1 extends Class1 { 
 + 	 public int serialNUMBER = 6 ; 
 + 	 public final int s1erialNUMBER = 6 ; 
 + 	 private static int s2erialNUMBER = 6 ; 
 + 	 private static final int s3erialNUMBER = 6 ; 
 + 	 
 + 	 @ Override 
 + 	 @ SuppressWarnings ( value = { " " } ) 
 + 	 @ Before 
 + 	 protected void oveRRRRRrriddenMethod ( ) { 
 + 	 int a = 0 ; 
 + 	 / / blah - blah 
 + 	 } 
 + } 
 + 
 + class Class1 { 
 + @ SuppressWarnings ( value = { " " } ) 
 + protected void oveRRRRRrriddenMethod ( ) { 
 + int a = 0 ; 
 + / / blah - blah 
 + } 
 + 
 + } 
 + 
 + class Class2 extends Class1 { 
 + 
 + @ Override 
 + @ SuppressWarnings ( value = { " " } ) 
 + @ Before 
 + 	 protected void oveRRRRRrriddenMethod ( ) { 
 + int a = 0 ; 
 + / / blah - blah 
 + } 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameReceiver . java 
 new file mode 100644 
 index 0000000 . . b55a9dc 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameReceiver . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . abbrevationaswordinname ; 
 + 
 + public class InputAbbreviationAsWordInNameReceiver { 
 + public void foo4 ( InputAbbreviationAsWordInNameReceiver this ) { } 
 + 
 + private class Inner { 
 + public Inner ( InputAbbreviationAsWordInNameReceiver InputAbbreviationAsWordInNameReceiver . this ) { } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameType . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameType . java 
 new file mode 100644 
 index 0000000 . . fa5a3ab 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbrevationaswordinname / InputAbbreviationAsWordInNameType . java 
 @ @ - 0 , 0 + 1 , 120 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . abbrevationaswordinname ; 
 + 
 + abstract class IIIInputAbstractClassName { 
 + } 
 + 
 + abstract class NonAAAAbstractClassName { 
 + } 
 + 
 + abstract class FactoryWithBADNAme { 
 + } 
 + 
 + abstract class AbstractCLASSName { 
 + abstract class NonAbstractInnerClass { 
 + } 
 + } 
 + 
 + abstract class ClassFactory1 { 
 + abstract class WellNamedFactory { 
 + } 
 + } 
 + 
 + class NonAbstractClass1 { 
 + } 
 + 
 + class AbstractClass1 { 
 + } 
 + 
 + class Class1Factory1 { 
 + } 
 + 
 + abstract class AbstractClassName3 { 
 + class AbstractINNERRClass { 
 + } 
 + } 
 + 
 + abstract class Class3Factory { 
 + class WellNamedFACTORY { 
 + 	 public void marazmaticMETHODName ( ) { 
 + 	 	 int marazmaticVARIABLEName = 2 ; 
 + 	 	 int MARAZMATICVariableName = 1 ; 
 + 	 } 
 + } 
 + } 
 + 
 + interface Directions { 
 + int RIGHT = 1 ; 
 + int LEFT = 2 ; 
 + int UP = 3 ; 
 + int DOWN = 4 ; 
 + } 
 + 
 + interface BadNameForInterfeis 
 + { 
 + void interfaceMethod ( ) ; 
 + } 
 + 
 + abstract class NonAAAAbstractClassName2 { 
 + 	 public int serialNUMBER = 6 ; 
 + 	 public final int s1erialNUMBER = 6 ; 
 + 	 private static int s2erialNUMBER = 6 ; 
 + 	 private static final int s3erialNUMBER = 6 ; 
 + } 
 + 
 + interface Interface1 { 
 + 	 
 + 	 String VALUEEEE = " value " ; / / in interface this is final / static 
 + 	 
 + } 
 + 
 + interface Interface2 { 
 + 	 
 + 	 static String VALUEEEE = " value " ; / / in interface this is final / static 
 + 	 
 + } 
 + 
 + interface Interface3 { 
 + 	 
 + 	 final String VALUEEEE = " value " ; / / in interface this is final / static 
 + 	 
 + } 
 + 
 + interface Interface4 { 
 + 	 
 + 	 final static String VALUEEEE = " value " ; / / in interface this is final / static 
 + 	 
 + } 
 + 
 + class FIleNameFormatException extends Exception { 
 + 
 + private static final long serialVersionUID = 1L ; 
 + 
 + public FIleNameFormatException ( Exception e ) { 
 + super ( e ) ; 
 + } 
 + } 
 + 
 + class StateX { 
 + int userID ; 
 + int scaleX , scaleY , scaleZ ; 
 + 
 + int getScaleX ( ) { 
 + return this . scaleX ; 
 + } 
 + } 
 + 
 + @ interface Annotation1 { 
 + String VALUE = " value " ; / / in @ interface this is final / static 
 + } 
 + 
 + @ interface Annotation2 { 
 + static String VALUE = " value " ; / / in @ interface this is final / static 
 + } 
 + 
 + @ interface Annotation3 { 
 + final String VALUE = " value " ; / / in @ interface this is final / static 
 + } 
 + 
 + @ interface Annotation4 { 
 + final static String VALUE = " value " ; / / in @ interface this is final / static 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 index 89a41fc . . 2a550da 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 @ @ - 539 , 7 + 539 , 7 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 createChecker ( checkConfig ) ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator 
 + verify ( checkConfig , getPath ( " checks " + File . separator + " imports " + File . separator 
 + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 new file mode 100644 
 index 0000000 . . 10b8399 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; 
 + 
 + / / every import from javadoc package has comment in brackets indicating presence of keywords 
 + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) 
 + 
 + / / STANDARD - keyword Check 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) 
 + 
 + / / SPECIAL _ IMPORTS - keyword Tag 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) 
 + 
 + import com . puppycrawl . tools . * ; 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) 
 + 
 + public class InputCustomImportOrder _ OverlappingPatterns { 
 + } 
 + / * 
 + test : testRulesOrder _ ThirdBeforeSame ( ) 
 + configuration : 
 + checkConfig . addAttribute ( " customImportOrderRules " , 
 + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; 
 + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 + * / 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 deleted file mode 100644 
 index 10b8399 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . imports ; 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; 
 - 
 - / / every import from javadoc package has comment in brackets indicating presence of keywords 
 - / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) 
 - 
 - / / STANDARD - keyword Check 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) 
 - 
 - / / SPECIAL _ IMPORTS - keyword Tag 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) 
 - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) 
 - 
 - import com . puppycrawl . tools . * ; 
 - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) 
 - 
 - public class InputCustomImportOrder _ OverlappingPatterns { 
 - } 
 - / * 
 - test : testRulesOrder _ ThirdBeforeSame ( ) 
 - configuration : 
 - checkConfig . addAttribute ( " customImportOrderRules " , 
 - " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; 
 - checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 - * /
