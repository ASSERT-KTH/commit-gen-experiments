BLEU SCORE: 0.8070557274927982

TEST MSG: Issue # 2161 : unify test input locations for modifier package
GENERATED MSG: Issue # 2161 : unify test input locations for naming package

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheckTest . java <nl> index d6bddd4 . . b26cb19 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheckTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . modifier . ModifierOrderCheck <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> @ @ - 35 , 6 + 36 , 17 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class ModifierOrderCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " modifier " + File . separator + filename ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected String getNonCompilablePath ( String filename ) throws IOException { <nl> + return super . getNonCompilablePath ( " checks " + File . separator <nl> + + " modifier " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> @ @ - 64 , 8 + 76 , 7 @ @ public class ModifierOrderCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( ModifierOrderCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , new File ( " src / test / resources - noncompilable / com / puppycrawl / tools " <nl> - + " / checkstyle / InputModifier2 . java " ) . getCanonicalPath ( ) , expected ) ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputModifier2 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java <nl> index 57e6055 . . b469374 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> import static com . puppycrawl . tools . checkstyle . checks . modifier . RedundantModifierCheck . MSG _ KEY ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> @ @ - 33 , 6 + 34 , 17 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class RedundantModifierTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " modifier " + File . separator + filename ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected String getNonCompilablePath ( String filename ) throws IOException { <nl> + return super . getNonCompilablePath ( " checks " + File . separator <nl> + + " modifier " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testClassesInsideOfInterfaces ( ) throws Exception { <nl> @ @ - 76 , 10 + 88 , 7 @ @ public class RedundantModifierTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( RedundantModifierCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , <nl> - new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / " <nl> - + " checkstyle / InputStaticModifierInInterface . java " ) . getCanonicalPath ( ) , <nl> - expected ) ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputStaticModifierInInterface . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 90 , 10 + 99 , 7 @ @ public class RedundantModifierTest <nl> final String [ ] expected = { <nl> " 3 : 9 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> } ; <nl> - verify ( checkConfig , <nl> - new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / " <nl> - + " checkstyle / InputFinalInDefaultMethods . java " ) . getCanonicalPath ( ) , <nl> - expected ) ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputFinalInDefaultMethods . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 114 , 7 + 120 , 8 @ @ public class RedundantModifierTest <nl> " 8 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , <nl> " 12 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputRedundantStaticModifierInInnerTypeOfInterface . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRedundantStaticModifierInInnerTypeOfInterface . java " ) , <nl> + expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 178 , 7 + 185 , 6 @ @ public class RedundantModifierTest <nl> " 8 : 9 : " + getCheckMessage ( MSG _ KEY , " static " ) , <nl> " 12 : 9 : " + getCheckMessage ( MSG _ KEY , " static " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputRedundantStatic " <nl> - + " ModifierInNestedEnum . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRedundantStaticModifierInNestedEnum . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputFinalInDefaultMethods . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputFinalInDefaultMethods . java <nl> deleted file mode 100644 <nl> index b6ddca5 . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputFinalInDefaultMethods . java <nl> + + + / dev / null <nl> @ @ - 1 , 15 + 0 , 0 @ @ <nl> - / / Compilable with Java8 <nl> - public interface MyInterface { <nl> - 	 final int k = 5 ; / / violation <nl> - 	 <nl> - default int defaultMethod ( final int x ) { <nl> - 	 if ( k = = 5 ) { <nl> - 	 	 final int t = 24 ; / / No violation here ! <nl> - 	 	 for ( ; ; ) { <nl> - 	 	 	 final String s = " some " ; / / No violation here ! <nl> - 	 	 } <nl> - 	 } <nl> - final int square = x * x ; / / No violation here ! <nl> - return square ; <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputModifier2 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputModifier2 . java <nl> deleted file mode 100644 <nl> index 3fd32cb . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputModifier2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 9 + 0 , 0 @ @ <nl> - / / Compilable with Java8 <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - import java . util . Comparator ; <nl> - public interface InputModifier2 extends Comparator < Integer > { <nl> - @ Override <nl> - default int compare ( Integer a , Integer b ) { <nl> - return 0 ; <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInDefaultMethods . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInDefaultMethods . java <nl> new file mode 100644 <nl> index 0000000 . . b6ddca5 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInDefaultMethods . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + / / Compilable with Java8 <nl> + public interface MyInterface { <nl> + 	 final int k = 5 ; / / violation <nl> + 	 <nl> + default int defaultMethod ( final int x ) { <nl> + 	 if ( k = = 5 ) { <nl> + 	 	 final int t = 24 ; / / No violation here ! <nl> + 	 	 for ( ; ; ) { <nl> + 	 	 	 final String s = " some " ; / / No violation here ! <nl> + 	 	 } <nl> + 	 } <nl> + final int square = x * x ; / / No violation here ! <nl> + return square ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifier2 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifier2 . java <nl> new file mode 100644 <nl> index 0000000 . . 2205619 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifier2 . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + / / Compilable with Java8 <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> + import java . util . Comparator ; <nl> + public interface InputModifier2 extends Comparator < Integer > { <nl> + @ Override <nl> + default int compare ( Integer a , Integer b ) { <nl> + return 0 ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputStaticModifierInInterface . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputStaticModifierInInterface . java <nl> new file mode 100644 <nl> index 0000000 . . 4741ff1 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputStaticModifierInInterface . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + / / Compilable with Java8 <nl> + public interface InputStaticModifierInInterface <nl> + { <nl> + static int f ( ) <nl> + { <nl> + int someName = 5 ; <nl> + return someName ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputModifierClassesInsideOfInterfaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputModifierClassesInsideOfInterfaces . java <nl> deleted file mode 100644 <nl> index e7042cd . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputModifierClassesInsideOfInterfaces . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - public interface InputModifierClassesInsideOfInterfaces { <nl> - <nl> - / / Class inside of interface can be abstract and non abstract , but always public static . <nl> - abstract class A { } <nl> - <nl> - class B { } <nl> - <nl> - / / All classes inside interfaces are public static classes , and static modifier is redundant . <nl> - static class C { / / violation <nl> - public static boolean verifyState ( A a ) { <nl> - return true ; <nl> - } <nl> - } <nl> - <nl> - public class E { } / / violation <nl> - <nl> - / / Enums are static implicit subclasses of Enum class . <nl> - public enum Role1 { / / violation <nl> - ADMIN , <nl> - EDITOR , <nl> - VANILLA ; <nl> - } <nl> - <nl> - static enum Role2 { / / violation <nl> - ADMIN , <nl> - EDITOR , <nl> - VANILLA ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputNestedClassInPublicInterfaceRedundantModifiers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputNestedClassInPublicInterfaceRedundantModifiers . java <nl> deleted file mode 100644 <nl> index ef1954b . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputNestedClassInPublicInterfaceRedundantModifiers . java <nl> + + + / dev / null <nl> @ @ - 1 , 50 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2015 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - public interface InputNestedClassInPublicInterfaceRedundantModifiers { <nl> - interface PublicInnerInterface { <nl> - interface PublicInnerInnerInterface { <nl> - class PublicInnerClassInNestedPublicInterfaces { <nl> - public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class <nl> - } <nl> - } <nl> - } <nl> - class PublicClassInsideInterface { <nl> - private interface PrivateNestedInterface { <nl> - class ClassInPrivateNestedInterface { <nl> - public ClassInPrivateNestedInterface ( ) { } / / Redundant in not public class <nl> - } <nl> - public interface PrivateNestedInterfaceWithPublicModifier { <nl> - class ClassInPrivateNestedInterface { <nl> - public ClassInPrivateNestedInterface ( ) { } / / Redundant in non public scope <nl> - } <nl> - } <nl> - } <nl> - public interface PublicInnerInnerPublicInterface { <nl> - class PublicInnerClassInNestedPublicInterfaces { <nl> - public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class <nl> - } <nl> - } <nl> - protected interface PublicInnerInnerProtectedInterface { <nl> - class PublicInnerClassInNestedProtectedInterfaces { <nl> - public PublicInnerClassInNestedProtectedInterfaces ( ) { } / / Redundant in non public scope <nl> - } <nl> - } <nl> - } <nl> - class PublicNestedClassInInterfaceWithPublicConstructor { <nl> - public PublicNestedClassInInterfaceWithPublicConstructor ( ) { } / / OK in public class <nl> - private class PrivateClassInPublicNestedClass { <nl> - public class PublicInPrivateClass { <nl> - public PublicInPrivateClass ( ) { } / / Redundant in non public class <nl> - } <nl> - } <nl> - } <nl> - final class FinalNestedClassInInterface { <nl> - interface InnerInterface { <nl> - final class FinalNestedClassInNestedInterface { } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantConstructorModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantConstructorModifier . java <nl> deleted file mode 100644 <nl> index 66e7672 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantConstructorModifier . java <nl> + + + / dev / null <nl> @ @ - 1 , 19 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2015 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - public enum InputRedundantConstructorModifier { <nl> - VAL1 , VAL2 ; <nl> - <nl> - private InputRedundantConstructorModifier ( ) { } / / violation <nl> - <nl> - InputRedundantConstructorModifier ( int i ) { } <nl> - <nl> - InputRedundantConstructorModifier ( char c ) { } <nl> - } <nl> - <nl> - class ProperPrivateConstructor { <nl> - private ProperPrivateConstructor ( ) { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantPublicModifierInNotPublicClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantPublicModifierInNotPublicClass . java <nl> deleted file mode 100644 <nl> index fb83ae1 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantPublicModifierInNotPublicClass . java <nl> + + + / dev / null <nl> @ @ - 1 , 24 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2015 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - public class InputRedundantPublicModifierInNotPublicClass { <nl> - public InputRedundantPublicModifierInNotPublicClass ( ) { } <nl> - protected class ProtectedClass { <nl> - public ProtectedClass ( ) { } <nl> - } <nl> - public class PublicInnerClass { <nl> - public PublicInnerClass ( ) { } / / OK for class accessible from public scope <nl> - } <nl> - } <nl> - <nl> - class PackagePrivateClass { <nl> - public PackagePrivateClass ( ) { } / / violation expected <nl> - } <nl> - <nl> - class PackagePrivateClassWithNotRedundantConstructor { <nl> - PackagePrivateClassWithNotRedundantConstructor ( ) { } <nl> - <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInInnerTypeOfInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInInnerTypeOfInterface . java <nl> deleted file mode 100644 <nl> index 8e7a8c6 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInInnerTypeOfInterface . java <nl> + + + / dev / null <nl> @ @ - 1 , 15 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2015 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - public interface InputRedundantStaticModifierInInnerTypeOfInterface { <nl> - static class MyInnerClass { } / / violation <nl> - <nl> - class MyInnerClass2 { } <nl> - <nl> - static enum MyInnerEnum { } / / violation <nl> - <nl> - enum MyInnerEnum2 { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInNestedEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInNestedEnum . java <nl> deleted file mode 100644 <nl> index 7ef65f7 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInNestedEnum . java <nl> + + + / dev / null <nl> @ @ - 1 , 14 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - public class InputRedundantStaticModifierInNestedEnum { <nl> - static enum NestedEnumWithRedundantStatic { } / / violation <nl> - <nl> - enum CorrectNestedEnum { <nl> - VAL ; <nl> - static enum NestedEnumWithRedundantStatic { } / / violation <nl> - } <nl> - <nl> - interface NestedInterface { <nl> - static enum NestedEnumWithRedundantStatic { } / / violation <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifier . java <nl> new file mode 100644 <nl> index 0000000 . . ae84d8c <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifier . java <nl> @ @ - 0 , 0 + 1 , 139 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> + <nl> + / * * <nl> + * Test case for Modifier checks : <nl> + * - order of modifiers <nl> + * - use of ' public ' in interface definition <nl> + * @ author lkuehne <nl> + * / <nl> + strictfp final class InputModifier / / illegal order of modifiers for class <nl> + { <nl> + <nl> + / * * Illegal order of modifiers for variables * / <nl> + static private boolean sModifierOrderVar = false ; <nl> + <nl> + / * * <nl> + * Illegal order of modifiers for methods . Make sure that the <nl> + * first and last modifier from the JLS sequence is used . <nl> + * / <nl> + strictfp private void doStuff ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Single annotation without other modifiers * / <nl> + @ MyAnnotation2 void someMethod ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Illegal order of annotation - must come first * / <nl> + private @ MyAnnotation2 void someMethod2 ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Annotation in middle of other modifiers otherwise in correct order * / <nl> + private @ MyAnnotation2 strictfp void someMethod3 ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Correct order * / <nl> + @ MyAnnotation2 private strictfp void someMethod4 ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Annotation in middle of other modifiers otherwise in correct order * / <nl> + @ MyAnnotation2 private static @ MyAnnotation4 strictfp void someMethod5 ( ) <nl> + { <nl> + } <nl> + <nl> + / * * holder for redundant ' public ' modifier check . * / <nl> + public static interface InputRedundantPublicModifier / / violation <nl> + { <nl> + / * * redundant ' public ' modifier * / <nl> + public void a ( ) ; / / violation <nl> + <nl> + / * * all OK * / <nl> + void b ( ) ; <nl> + <nl> + / * * redundant abstract modifier * / <nl> + abstract void c ( ) ; / / violation <nl> + <nl> + / * * redundant ' public ' modifier * / <nl> + public float PI _ PUBLIC = ( float ) 3 . 14 ; / / violation <nl> + <nl> + / * * redundant ' abstract ' modifier ( field can not be abstract ) * / <nl> + / / abstract float PI _ ABSTRACT = ( float ) 3 . 14 ; <nl> + <nl> + / * * redundant ' final ' modifier * / <nl> + final float PI _ FINAL = ( float ) 3 . 14 ; / / violation <nl> + <nl> + / * * all OK * / <nl> + float PI _ OK = ( float ) 3 . 14 ; <nl> + } <nl> + <nl> + / * * redundant ' final ' modifier * / <nl> + private final void method ( ) / / violation <nl> + { <nl> + } <nl> + } <nl> + <nl> + / * * Holder for redundant ' final ' check . * / <nl> + final class RedundantFinalClass <nl> + { <nl> + / * * redundant ' final ' modifier * / <nl> + public final void finalMethod ( ) / / violation <nl> + { <nl> + } <nl> + <nl> + / * * OK * / <nl> + public void method ( ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + / * * Holder for redundant modifiers of inner implementation * / <nl> + abstract interface InnerImplementation / / violation <nl> + { <nl> + InnerImplementation inner = <nl> + new InnerImplementation ( ) <nl> + { <nl> + / * * compiler requires ' public ' modifier * / <nl> + public void method ( ) <nl> + { <nl> + } <nl> + } ; <nl> + <nl> + void method ( ) ; <nl> + } <nl> + <nl> + / * * Holder for redundant modifiers of annotation fields / variables * / <nl> + @ interface Annotation <nl> + { <nl> + public String s1 = " " ; / / violation <nl> + final String s2 = " " ; / / violation <nl> + static String s3 = " " ; / / violation <nl> + String s4 = " " ; <nl> + public String blah ( ) ; / / violation <nl> + abstract String blah2 ( ) ; / / violation <nl> + } <nl> + <nl> + @ interface MyAnnotation2 { <nl> + } <nl> + <nl> + @ interface MyAnnotation4 { <nl> + } <nl> + <nl> + class SafeVarargsUsage { <nl> + @ Deprecated <nl> + @ SafeVarargs <nl> + private final void foo ( int . . . k ) { } <nl> + <nl> + @ Deprecated <nl> + @ SafeVarargs <nl> + @ SuppressWarnings ( " " ) <nl> + private final void foo1 ( Object . . . obj ) { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifierClassesInsideOfInterfaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifierClassesInsideOfInterfaces . java <nl> new file mode 100644 <nl> index 0000000 . . a7c1833 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifierClassesInsideOfInterfaces . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> + <nl> + public interface InputModifierClassesInsideOfInterfaces { <nl> + <nl> + / / Class inside of interface can be abstract and non abstract , but always public static . <nl> + abstract class A { } <nl> + <nl> + class B { } <nl> + <nl> + / / All classes inside interfaces are public static classes , and static modifier is redundant . <nl> + static class C { / / violation <nl> + public static boolean verifyState ( A a ) { <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> + public class E { } / / violation <nl> + <nl> + / / Enums are static implicit subclasses of Enum class . <nl> + public enum Role1 { / / violation <nl> + ADMIN , <nl> + EDITOR , <nl> + VANILLA ; <nl> + } <nl> + <nl> + static enum Role2 { / / violation <nl> + ADMIN , <nl> + EDITOR , <nl> + VANILLA ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputNestedClassInPublicInterfaceRedundantModifiers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputNestedClassInPublicInterfaceRedundantModifiers . java <nl> new file mode 100644 <nl> index 0000000 . . e6bb28d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputNestedClassInPublicInterfaceRedundantModifiers . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2015 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> + <nl> + public interface InputNestedClassInPublicInterfaceRedundantModifiers { <nl> + interface PublicInnerInterface { <nl> + interface PublicInnerInnerInterface { <nl> + class PublicInnerClassInNestedPublicInterfaces { <nl> + public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class <nl> + } <nl> + } <nl> + } <nl> + class PublicClassInsideInterface { <nl> + private interface PrivateNestedInterface { <nl> + class ClassInPrivateNestedInterface { <nl> + public ClassInPrivateNestedInterface ( ) { } / / Redundant in not public class <nl> + } <nl> + public interface PrivateNestedInterfaceWithPublicModifier { <nl> + class ClassInPrivateNestedInterface { <nl> + public ClassInPrivateNestedInterface ( ) { } / / Redundant in non public scope <nl> + } <nl> + } <nl> + } <nl> + public interface PublicInnerInnerPublicInterface { <nl> + class PublicInnerClassInNestedPublicInterfaces { <nl> + public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class <nl> + } <nl> + } <nl> + protected interface PublicInnerInnerProtectedInterface { <nl> + class PublicInnerClassInNestedProtectedInterfaces { <nl> + public PublicInnerClassInNestedProtectedInterfaces ( ) { } / / Redundant in non public scope <nl> + } <nl> + } <nl> + } <nl> + class PublicNestedClassInInterfaceWithPublicConstructor { <nl> + public PublicNestedClassInInterfaceWithPublicConstructor ( ) { } / / OK in public class <nl> + private class PrivateClassInPublicNestedClass { <nl> + public class PublicInPrivateClass { <nl> + public PublicInPrivateClass ( ) { } / / Redundant in non public class <nl> + } <nl> + } <nl> + } <nl> + final class FinalNestedClassInInterface { <nl> + interface InnerInterface { <nl> + final class FinalNestedClassInNestedInterface { } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantConstructorModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantConstructorModifier . java <nl> new file mode 100644 <nl> index 0000000 . . 1c1b5be <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantConstructorModifier . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2015 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> + <nl> + public enum InputRedundantConstructorModifier { <nl> + VAL1 , VAL2 ; <nl> + <nl> + private InputRedundantConstructorModifier ( ) { } / / violation <nl> + <nl> + InputRedundantConstructorModifier ( int i ) { } <nl> + <nl> + InputRedundantConstructorModifier ( char c ) { } <nl> + } <nl> + <nl> + class ProperPrivateConstructor { <nl> + private ProperPrivateConstructor ( ) { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantPublicModifierInNotPublicClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantPublicModifierInNotPublicClass . java <nl> new file mode 100644 <nl> index 0000000 . . 46a55d9 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantPublicModifierInNotPublicClass . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2015 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> + <nl> + public class InputRedundantPublicModifierInNotPublicClass { <nl> + public InputRedundantPublicModifierInNotPublicClass ( ) { } <nl> + protected class ProtectedClass { <nl> + public ProtectedClass ( ) { } <nl> + } <nl> + public class PublicInnerClass { <nl> + public PublicInnerClass ( ) { } / / OK for class accessible from public scope <nl> + } <nl> + } <nl> + <nl> + class PackagePrivateClass { <nl> + public PackagePrivateClass ( ) { } / / violation expected <nl> + } <nl> + <nl> + class PackagePrivateClassWithNotRedundantConstructor { <nl> + PackagePrivateClassWithNotRedundantConstructor ( ) { } <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInInnerTypeOfInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInInnerTypeOfInterface . java <nl> new file mode 100644 <nl> index 0000000 . . 06a3332 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInInnerTypeOfInterface . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2015 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> + <nl> + public interface InputRedundantStaticModifierInInnerTypeOfInterface { <nl> + static class MyInnerClass { } / / violation <nl> + <nl> + class MyInnerClass2 { } <nl> + <nl> + static enum MyInnerEnum { } / / violation <nl> + <nl> + enum MyInnerEnum2 { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInNestedEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInNestedEnum . java <nl> new file mode 100644 <nl> index 0000000 . . a1ed223 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInNestedEnum . java <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> + <nl> + public class InputRedundantStaticModifierInNestedEnum { <nl> + static enum NestedEnumWithRedundantStatic { } / / violation <nl> + <nl> + enum CorrectNestedEnum { <nl> + VAL ; <nl> + static enum NestedEnumWithRedundantStatic { } / / violation <nl> + } <nl> + <nl> + interface NestedInterface { <nl> + static enum NestedEnumWithRedundantStatic { } / / violation <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> index 89a41fc . . 2a550da 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> @ @ - 539 , 7 + 539 , 7 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> createChecker ( checkConfig ) ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator <nl> + verify ( checkConfig , getPath ( " checks " + File . separator + " imports " + File . separator <nl> + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> new file mode 100644 <nl> index 0000000 . . 10b8399 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; <nl> + <nl> + / / every import from javadoc package has comment in brackets indicating presence of keywords <nl> + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) <nl> + <nl> + / / STANDARD - keyword Check <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) <nl> + <nl> + / / SPECIAL _ IMPORTS - keyword Tag <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) <nl> + <nl> + import com . puppycrawl . tools . * ; <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) <nl> + <nl> + public class InputCustomImportOrder _ OverlappingPatterns { <nl> + } <nl> + / * <nl> + test : testRulesOrder _ ThirdBeforeSame ( ) <nl> + configuration : <nl> + checkConfig . addAttribute ( " customImportOrderRules " , <nl> + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; <nl> + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> + * / <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> deleted file mode 100644 <nl> index 10b8399 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> + + + / dev / null <nl> @ @ - 1 , 37 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; <nl> - <nl> - / / every import from javadoc package has comment in brackets indicating presence of keywords <nl> - / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) <nl> - <nl> - / / STANDARD - keyword Check <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) <nl> - <nl> - / / SPECIAL _ IMPORTS - keyword Tag <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) <nl> - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) <nl> - <nl> - import com . puppycrawl . tools . * ; <nl> - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) <nl> - <nl> - public class InputCustomImportOrder _ OverlappingPatterns { <nl> - } <nl> - / * <nl> - test : testRulesOrder _ ThirdBeforeSame ( ) <nl> - configuration : <nl> - checkConfig . addAttribute ( " customImportOrderRules " , <nl> - " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; <nl> - checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> - * /

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheckTest . java 
 index d6bddd4 . . b26cb19 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheckTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . modifier . ModifierOrderCheck 
 import static org . junit . Assert . assertArrayEquals ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 @ @ - 35 , 6 + 36 , 17 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class ModifierOrderCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " modifier " + File . separator + filename ) ; 
 + } 
 + 
 + @ Override 
 + protected String getNonCompilablePath ( String filename ) throws IOException { 
 + return super . getNonCompilablePath ( " checks " + File . separator 
 + + " modifier " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 @ @ - 64 , 8 + 76 , 7 @ @ public class ModifierOrderCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( ModifierOrderCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , new File ( " src / test / resources - noncompilable / com / puppycrawl / tools " 
 - + " / checkstyle / InputModifier2 . java " ) . getCanonicalPath ( ) , expected ) ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputModifier2 . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java 
 index 57e6055 . . b469374 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 import static com . puppycrawl . tools . checkstyle . checks . modifier . RedundantModifierCheck . MSG _ KEY ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 @ @ - 33 , 6 + 34 , 17 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class RedundantModifierTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " modifier " + File . separator + filename ) ; 
 + } 
 + 
 + @ Override 
 + protected String getNonCompilablePath ( String filename ) throws IOException { 
 + return super . getNonCompilablePath ( " checks " + File . separator 
 + + " modifier " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testClassesInsideOfInterfaces ( ) throws Exception { 
 @ @ - 76 , 10 + 88 , 7 @ @ public class RedundantModifierTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( RedundantModifierCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , 
 - new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / " 
 - + " checkstyle / InputStaticModifierInInterface . java " ) . getCanonicalPath ( ) , 
 - expected ) ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputStaticModifierInInterface . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 90 , 10 + 99 , 7 @ @ public class RedundantModifierTest 
 final String [ ] expected = { 
 " 3 : 9 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 } ; 
 - verify ( checkConfig , 
 - new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / " 
 - + " checkstyle / InputFinalInDefaultMethods . java " ) . getCanonicalPath ( ) , 
 - expected ) ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputFinalInDefaultMethods . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 114 , 7 + 120 , 8 @ @ public class RedundantModifierTest 
 " 8 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , 
 " 12 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputRedundantStaticModifierInInnerTypeOfInterface . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRedundantStaticModifierInInnerTypeOfInterface . java " ) , 
 + expected ) ; 
 } 
 
 @ Test 
 @ @ - 178 , 7 + 185 , 6 @ @ public class RedundantModifierTest 
 " 8 : 9 : " + getCheckMessage ( MSG _ KEY , " static " ) , 
 " 12 : 9 : " + getCheckMessage ( MSG _ KEY , " static " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputRedundantStatic " 
 - + " ModifierInNestedEnum . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRedundantStaticModifierInNestedEnum . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputFinalInDefaultMethods . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputFinalInDefaultMethods . java 
 deleted file mode 100644 
 index b6ddca5 . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputFinalInDefaultMethods . java 
 + + + / dev / null 
 @ @ - 1 , 15 + 0 , 0 @ @ 
 - / / Compilable with Java8 
 - public interface MyInterface { 
 - 	 final int k = 5 ; / / violation 
 - 	 
 - default int defaultMethod ( final int x ) { 
 - 	 if ( k = = 5 ) { 
 - 	 	 final int t = 24 ; / / No violation here ! 
 - 	 	 for ( ; ; ) { 
 - 	 	 	 final String s = " some " ; / / No violation here ! 
 - 	 	 } 
 - 	 } 
 - final int square = x * x ; / / No violation here ! 
 - return square ; 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputModifier2 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputModifier2 . java 
 deleted file mode 100644 
 index 3fd32cb . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / InputModifier2 . java 
 + + + / dev / null 
 @ @ - 1 , 9 + 0 , 0 @ @ 
 - / / Compilable with Java8 
 - package com . puppycrawl . tools . checkstyle ; 
 - import java . util . Comparator ; 
 - public interface InputModifier2 extends Comparator < Integer > { 
 - @ Override 
 - default int compare ( Integer a , Integer b ) { 
 - return 0 ; 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInDefaultMethods . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInDefaultMethods . java 
 new file mode 100644 
 index 0000000 . . b6ddca5 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInDefaultMethods . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + / / Compilable with Java8 
 + public interface MyInterface { 
 + 	 final int k = 5 ; / / violation 
 + 	 
 + default int defaultMethod ( final int x ) { 
 + 	 if ( k = = 5 ) { 
 + 	 	 final int t = 24 ; / / No violation here ! 
 + 	 	 for ( ; ; ) { 
 + 	 	 	 final String s = " some " ; / / No violation here ! 
 + 	 	 } 
 + 	 } 
 + final int square = x * x ; / / No violation here ! 
 + return square ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifier2 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifier2 . java 
 new file mode 100644 
 index 0000000 . . 2205619 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifier2 . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + / / Compilable with Java8 
 + package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 + import java . util . Comparator ; 
 + public interface InputModifier2 extends Comparator < Integer > { 
 + @ Override 
 + default int compare ( Integer a , Integer b ) { 
 + return 0 ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputStaticModifierInInterface . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputStaticModifierInInterface . java 
 new file mode 100644 
 index 0000000 . . 4741ff1 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / modifier / InputStaticModifierInInterface . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + / / Compilable with Java8 
 + public interface InputStaticModifierInInterface 
 + { 
 + static int f ( ) 
 + { 
 + int someName = 5 ; 
 + return someName ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputModifierClassesInsideOfInterfaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputModifierClassesInsideOfInterfaces . java 
 deleted file mode 100644 
 index e7042cd . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputModifierClassesInsideOfInterfaces . java 
 + + + / dev / null 
 @ @ - 1 , 31 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - public interface InputModifierClassesInsideOfInterfaces { 
 - 
 - / / Class inside of interface can be abstract and non abstract , but always public static . 
 - abstract class A { } 
 - 
 - class B { } 
 - 
 - / / All classes inside interfaces are public static classes , and static modifier is redundant . 
 - static class C { / / violation 
 - public static boolean verifyState ( A a ) { 
 - return true ; 
 - } 
 - } 
 - 
 - public class E { } / / violation 
 - 
 - / / Enums are static implicit subclasses of Enum class . 
 - public enum Role1 { / / violation 
 - ADMIN , 
 - EDITOR , 
 - VANILLA ; 
 - } 
 - 
 - static enum Role2 { / / violation 
 - ADMIN , 
 - EDITOR , 
 - VANILLA ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputNestedClassInPublicInterfaceRedundantModifiers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputNestedClassInPublicInterfaceRedundantModifiers . java 
 deleted file mode 100644 
 index ef1954b . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputNestedClassInPublicInterfaceRedundantModifiers . java 
 + + + / dev / null 
 @ @ - 1 , 50 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2015 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - public interface InputNestedClassInPublicInterfaceRedundantModifiers { 
 - interface PublicInnerInterface { 
 - interface PublicInnerInnerInterface { 
 - class PublicInnerClassInNestedPublicInterfaces { 
 - public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class 
 - } 
 - } 
 - } 
 - class PublicClassInsideInterface { 
 - private interface PrivateNestedInterface { 
 - class ClassInPrivateNestedInterface { 
 - public ClassInPrivateNestedInterface ( ) { } / / Redundant in not public class 
 - } 
 - public interface PrivateNestedInterfaceWithPublicModifier { 
 - class ClassInPrivateNestedInterface { 
 - public ClassInPrivateNestedInterface ( ) { } / / Redundant in non public scope 
 - } 
 - } 
 - } 
 - public interface PublicInnerInnerPublicInterface { 
 - class PublicInnerClassInNestedPublicInterfaces { 
 - public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class 
 - } 
 - } 
 - protected interface PublicInnerInnerProtectedInterface { 
 - class PublicInnerClassInNestedProtectedInterfaces { 
 - public PublicInnerClassInNestedProtectedInterfaces ( ) { } / / Redundant in non public scope 
 - } 
 - } 
 - } 
 - class PublicNestedClassInInterfaceWithPublicConstructor { 
 - public PublicNestedClassInInterfaceWithPublicConstructor ( ) { } / / OK in public class 
 - private class PrivateClassInPublicNestedClass { 
 - public class PublicInPrivateClass { 
 - public PublicInPrivateClass ( ) { } / / Redundant in non public class 
 - } 
 - } 
 - } 
 - final class FinalNestedClassInInterface { 
 - interface InnerInterface { 
 - final class FinalNestedClassInNestedInterface { } 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantConstructorModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantConstructorModifier . java 
 deleted file mode 100644 
 index 66e7672 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantConstructorModifier . java 
 + + + / dev / null 
 @ @ - 1 , 19 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2015 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - public enum InputRedundantConstructorModifier { 
 - VAL1 , VAL2 ; 
 - 
 - private InputRedundantConstructorModifier ( ) { } / / violation 
 - 
 - InputRedundantConstructorModifier ( int i ) { } 
 - 
 - InputRedundantConstructorModifier ( char c ) { } 
 - } 
 - 
 - class ProperPrivateConstructor { 
 - private ProperPrivateConstructor ( ) { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantPublicModifierInNotPublicClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantPublicModifierInNotPublicClass . java 
 deleted file mode 100644 
 index fb83ae1 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantPublicModifierInNotPublicClass . java 
 + + + / dev / null 
 @ @ - 1 , 24 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2015 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - public class InputRedundantPublicModifierInNotPublicClass { 
 - public InputRedundantPublicModifierInNotPublicClass ( ) { } 
 - protected class ProtectedClass { 
 - public ProtectedClass ( ) { } 
 - } 
 - public class PublicInnerClass { 
 - public PublicInnerClass ( ) { } / / OK for class accessible from public scope 
 - } 
 - } 
 - 
 - class PackagePrivateClass { 
 - public PackagePrivateClass ( ) { } / / violation expected 
 - } 
 - 
 - class PackagePrivateClassWithNotRedundantConstructor { 
 - PackagePrivateClassWithNotRedundantConstructor ( ) { } 
 - 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInInnerTypeOfInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInInnerTypeOfInterface . java 
 deleted file mode 100644 
 index 8e7a8c6 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInInnerTypeOfInterface . java 
 + + + / dev / null 
 @ @ - 1 , 15 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2015 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - public interface InputRedundantStaticModifierInInnerTypeOfInterface { 
 - static class MyInnerClass { } / / violation 
 - 
 - class MyInnerClass2 { } 
 - 
 - static enum MyInnerEnum { } / / violation 
 - 
 - enum MyInnerEnum2 { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInNestedEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInNestedEnum . java 
 deleted file mode 100644 
 index 7ef65f7 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInNestedEnum . java 
 + + + / dev / null 
 @ @ - 1 , 14 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - public class InputRedundantStaticModifierInNestedEnum { 
 - static enum NestedEnumWithRedundantStatic { } / / violation 
 - 
 - enum CorrectNestedEnum { 
 - VAL ; 
 - static enum NestedEnumWithRedundantStatic { } / / violation 
 - } 
 - 
 - interface NestedInterface { 
 - static enum NestedEnumWithRedundantStatic { } / / violation 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifier . java 
 new file mode 100644 
 index 0000000 . . ae84d8c 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifier . java 
 @ @ - 0 , 0 + 1 , 139 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 + 
 + / * * 
 + * Test case for Modifier checks : 
 + * - order of modifiers 
 + * - use of ' public ' in interface definition 
 + * @ author lkuehne 
 + * / 
 + strictfp final class InputModifier / / illegal order of modifiers for class 
 + { 
 + 
 + / * * Illegal order of modifiers for variables * / 
 + static private boolean sModifierOrderVar = false ; 
 + 
 + / * * 
 + * Illegal order of modifiers for methods . Make sure that the 
 + * first and last modifier from the JLS sequence is used . 
 + * / 
 + strictfp private void doStuff ( ) 
 + { 
 + } 
 + 
 + / * * Single annotation without other modifiers * / 
 + @ MyAnnotation2 void someMethod ( ) 
 + { 
 + } 
 + 
 + / * * Illegal order of annotation - must come first * / 
 + private @ MyAnnotation2 void someMethod2 ( ) 
 + { 
 + } 
 + 
 + / * * Annotation in middle of other modifiers otherwise in correct order * / 
 + private @ MyAnnotation2 strictfp void someMethod3 ( ) 
 + { 
 + } 
 + 
 + / * * Correct order * / 
 + @ MyAnnotation2 private strictfp void someMethod4 ( ) 
 + { 
 + } 
 + 
 + / * * Annotation in middle of other modifiers otherwise in correct order * / 
 + @ MyAnnotation2 private static @ MyAnnotation4 strictfp void someMethod5 ( ) 
 + { 
 + } 
 + 
 + / * * holder for redundant ' public ' modifier check . * / 
 + public static interface InputRedundantPublicModifier / / violation 
 + { 
 + / * * redundant ' public ' modifier * / 
 + public void a ( ) ; / / violation 
 + 
 + / * * all OK * / 
 + void b ( ) ; 
 + 
 + / * * redundant abstract modifier * / 
 + abstract void c ( ) ; / / violation 
 + 
 + / * * redundant ' public ' modifier * / 
 + public float PI _ PUBLIC = ( float ) 3 . 14 ; / / violation 
 + 
 + / * * redundant ' abstract ' modifier ( field can not be abstract ) * / 
 + / / abstract float PI _ ABSTRACT = ( float ) 3 . 14 ; 
 + 
 + / * * redundant ' final ' modifier * / 
 + final float PI _ FINAL = ( float ) 3 . 14 ; / / violation 
 + 
 + / * * all OK * / 
 + float PI _ OK = ( float ) 3 . 14 ; 
 + } 
 + 
 + / * * redundant ' final ' modifier * / 
 + private final void method ( ) / / violation 
 + { 
 + } 
 + } 
 + 
 + / * * Holder for redundant ' final ' check . * / 
 + final class RedundantFinalClass 
 + { 
 + / * * redundant ' final ' modifier * / 
 + public final void finalMethod ( ) / / violation 
 + { 
 + } 
 + 
 + / * * OK * / 
 + public void method ( ) 
 + { 
 + } 
 + } 
 + 
 + / * * Holder for redundant modifiers of inner implementation * / 
 + abstract interface InnerImplementation / / violation 
 + { 
 + InnerImplementation inner = 
 + new InnerImplementation ( ) 
 + { 
 + / * * compiler requires ' public ' modifier * / 
 + public void method ( ) 
 + { 
 + } 
 + } ; 
 + 
 + void method ( ) ; 
 + } 
 + 
 + / * * Holder for redundant modifiers of annotation fields / variables * / 
 + @ interface Annotation 
 + { 
 + public String s1 = " " ; / / violation 
 + final String s2 = " " ; / / violation 
 + static String s3 = " " ; / / violation 
 + String s4 = " " ; 
 + public String blah ( ) ; / / violation 
 + abstract String blah2 ( ) ; / / violation 
 + } 
 + 
 + @ interface MyAnnotation2 { 
 + } 
 + 
 + @ interface MyAnnotation4 { 
 + } 
 + 
 + class SafeVarargsUsage { 
 + @ Deprecated 
 + @ SafeVarargs 
 + private final void foo ( int . . . k ) { } 
 + 
 + @ Deprecated 
 + @ SafeVarargs 
 + @ SuppressWarnings ( " " ) 
 + private final void foo1 ( Object . . . obj ) { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifierClassesInsideOfInterfaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifierClassesInsideOfInterfaces . java 
 new file mode 100644 
 index 0000000 . . a7c1833 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifierClassesInsideOfInterfaces . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 + 
 + public interface InputModifierClassesInsideOfInterfaces { 
 + 
 + / / Class inside of interface can be abstract and non abstract , but always public static . 
 + abstract class A { } 
 + 
 + class B { } 
 + 
 + / / All classes inside interfaces are public static classes , and static modifier is redundant . 
 + static class C { / / violation 
 + public static boolean verifyState ( A a ) { 
 + return true ; 
 + } 
 + } 
 + 
 + public class E { } / / violation 
 + 
 + / / Enums are static implicit subclasses of Enum class . 
 + public enum Role1 { / / violation 
 + ADMIN , 
 + EDITOR , 
 + VANILLA ; 
 + } 
 + 
 + static enum Role2 { / / violation 
 + ADMIN , 
 + EDITOR , 
 + VANILLA ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputNestedClassInPublicInterfaceRedundantModifiers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputNestedClassInPublicInterfaceRedundantModifiers . java 
 new file mode 100644 
 index 0000000 . . e6bb28d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputNestedClassInPublicInterfaceRedundantModifiers . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2015 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 + 
 + public interface InputNestedClassInPublicInterfaceRedundantModifiers { 
 + interface PublicInnerInterface { 
 + interface PublicInnerInnerInterface { 
 + class PublicInnerClassInNestedPublicInterfaces { 
 + public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class 
 + } 
 + } 
 + } 
 + class PublicClassInsideInterface { 
 + private interface PrivateNestedInterface { 
 + class ClassInPrivateNestedInterface { 
 + public ClassInPrivateNestedInterface ( ) { } / / Redundant in not public class 
 + } 
 + public interface PrivateNestedInterfaceWithPublicModifier { 
 + class ClassInPrivateNestedInterface { 
 + public ClassInPrivateNestedInterface ( ) { } / / Redundant in non public scope 
 + } 
 + } 
 + } 
 + public interface PublicInnerInnerPublicInterface { 
 + class PublicInnerClassInNestedPublicInterfaces { 
 + public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class 
 + } 
 + } 
 + protected interface PublicInnerInnerProtectedInterface { 
 + class PublicInnerClassInNestedProtectedInterfaces { 
 + public PublicInnerClassInNestedProtectedInterfaces ( ) { } / / Redundant in non public scope 
 + } 
 + } 
 + } 
 + class PublicNestedClassInInterfaceWithPublicConstructor { 
 + public PublicNestedClassInInterfaceWithPublicConstructor ( ) { } / / OK in public class 
 + private class PrivateClassInPublicNestedClass { 
 + public class PublicInPrivateClass { 
 + public PublicInPrivateClass ( ) { } / / Redundant in non public class 
 + } 
 + } 
 + } 
 + final class FinalNestedClassInInterface { 
 + interface InnerInterface { 
 + final class FinalNestedClassInNestedInterface { } 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantConstructorModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantConstructorModifier . java 
 new file mode 100644 
 index 0000000 . . 1c1b5be 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantConstructorModifier . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2015 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 + 
 + public enum InputRedundantConstructorModifier { 
 + VAL1 , VAL2 ; 
 + 
 + private InputRedundantConstructorModifier ( ) { } / / violation 
 + 
 + InputRedundantConstructorModifier ( int i ) { } 
 + 
 + InputRedundantConstructorModifier ( char c ) { } 
 + } 
 + 
 + class ProperPrivateConstructor { 
 + private ProperPrivateConstructor ( ) { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantPublicModifierInNotPublicClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantPublicModifierInNotPublicClass . java 
 new file mode 100644 
 index 0000000 . . 46a55d9 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantPublicModifierInNotPublicClass . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2015 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 + 
 + public class InputRedundantPublicModifierInNotPublicClass { 
 + public InputRedundantPublicModifierInNotPublicClass ( ) { } 
 + protected class ProtectedClass { 
 + public ProtectedClass ( ) { } 
 + } 
 + public class PublicInnerClass { 
 + public PublicInnerClass ( ) { } / / OK for class accessible from public scope 
 + } 
 + } 
 + 
 + class PackagePrivateClass { 
 + public PackagePrivateClass ( ) { } / / violation expected 
 + } 
 + 
 + class PackagePrivateClassWithNotRedundantConstructor { 
 + PackagePrivateClassWithNotRedundantConstructor ( ) { } 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInInnerTypeOfInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInInnerTypeOfInterface . java 
 new file mode 100644 
 index 0000000 . . 06a3332 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInInnerTypeOfInterface . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2015 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 + 
 + public interface InputRedundantStaticModifierInInnerTypeOfInterface { 
 + static class MyInnerClass { } / / violation 
 + 
 + class MyInnerClass2 { } 
 + 
 + static enum MyInnerEnum { } / / violation 
 + 
 + enum MyInnerEnum2 { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInNestedEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInNestedEnum . java 
 new file mode 100644 
 index 0000000 . . a1ed223 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInNestedEnum . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 + 
 + public class InputRedundantStaticModifierInNestedEnum { 
 + static enum NestedEnumWithRedundantStatic { } / / violation 
 + 
 + enum CorrectNestedEnum { 
 + VAL ; 
 + static enum NestedEnumWithRedundantStatic { } / / violation 
 + } 
 + 
 + interface NestedInterface { 
 + static enum NestedEnumWithRedundantStatic { } / / violation 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 index 89a41fc . . 2a550da 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 @ @ - 539 , 7 + 539 , 7 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 createChecker ( checkConfig ) ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator 
 + verify ( checkConfig , getPath ( " checks " + File . separator + " imports " + File . separator 
 + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 new file mode 100644 
 index 0000000 . . 10b8399 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; 
 + 
 + / / every import from javadoc package has comment in brackets indicating presence of keywords 
 + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) 
 + 
 + / / STANDARD - keyword Check 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) 
 + 
 + / / SPECIAL _ IMPORTS - keyword Tag 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) 
 + 
 + import com . puppycrawl . tools . * ; 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) 
 + 
 + public class InputCustomImportOrder _ OverlappingPatterns { 
 + } 
 + / * 
 + test : testRulesOrder _ ThirdBeforeSame ( ) 
 + configuration : 
 + checkConfig . addAttribute ( " customImportOrderRules " , 
 + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; 
 + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 + * / 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 deleted file mode 100644 
 index 10b8399 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . imports ; 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; 
 - 
 - / / every import from javadoc package has comment in brackets indicating presence of keywords 
 - / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) 
 - 
 - / / STANDARD - keyword Check 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) 
 - 
 - / / SPECIAL _ IMPORTS - keyword Tag 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) 
 - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) 
 - 
 - import com . puppycrawl . tools . * ; 
 - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) 
 - 
 - public class InputCustomImportOrder _ OverlappingPatterns { 
 - } 
 - / * 
 - test : testRulesOrder _ ThirdBeforeSame ( ) 
 - configuration : 
 - checkConfig . addAttribute ( " customImportOrderRules " , 
 - " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; 
 - checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 - * /
