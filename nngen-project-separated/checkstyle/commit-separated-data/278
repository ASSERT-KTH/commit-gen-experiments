BLEU SCORE: 0.0734705312597788

TEST MSG: Issue # 5752 : Activate checks related to java . io . Closeable
GENERATED MSG: Issue # 4607 : Added moduleId to violation messages

TEST DIFF (one line): diff - - git a / . ci / eclipse - compiler - javac . sh b / . ci / eclipse - compiler - javac . sh <nl> index 9767558 . . 7a12b3a 100755 <nl> - - - a / . ci / eclipse - compiler - javac . sh <nl> + + + b / . ci / eclipse - compiler - javac . sh <nl> @ @ - 18 , 8 + 18 , 7 @ @ if [ ! - f $ ECJ _ PATH ] ; then <nl> wget $ ECLIPSE _ URL / $ ECJ _ MAVEN _ VERSION / $ ECJ _ JAR - O $ ECJ _ PATH <nl> fi <nl> <nl> - mkdir - p target / classes <nl> - mkdir - p target / eclipse <nl> + mkdir - p target / classes target / test - classes target / eclipse <nl> <nl> RESULT _ FILE = target / eclipse / report . txt <nl> <nl> diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index c2d8e66 . . f772010 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 175 , 7 + 175 , 7 @ @ <nl> < / module > <nl> < module name = " PackageAnnotation " / > <nl> < module name = " SuppressWarnings " > <nl> - < property name = " format " value = " ^ ( ( ? ! unchecked | deprecation | rawtypes ) . ) * $ " / > <nl> + < property name = " format " value = " ^ ( ( ? ! unchecked | deprecation | rawtypes | resource ) . ) * $ " / > <nl> < message key = " suppressed . warning . not . allowed " <nl> value = " The warning ' ' { 0 } ' ' cannot be suppressed at this location . <nl> Only few javac warnings are allowed to suppress . <nl> diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index 73271d6 . . 991a977 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 105 , 8 + 105 , 13 @ @ <nl> < inspection _ tool class = " AssignmentUsedAsCondition " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < ! - - we are ok to use auto - boxing as we use modern java - - > <nl> < inspection _ tool class = " AutoBoxing " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> - < ! - - we can not use try - with - resource till we switch to jacoco for code coverage - - > <nl> - < inspection _ tool class = " AutoCloseableResource " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> + < inspection _ tool class = " AutoCloseableResource " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> + < ! - - These classes do not contain any resources that need to be closed . - - > <nl> + < option name = " ignoredTypes " value = " java . io . ByteArrayOutputStream , java . util . stream . Stream , java . util . stream . IntStream , java . util . stream . LongStream , java . util . stream . DoubleStream , com . puppycrawl . tools . checkstyle . internal . utils . CloseAndFlushTestByteArrayOutputStream " / > <nl> + < ! - - False positives for the Closable returned from a builder method ( which return " this " ) . <nl> + Mock stubs shouldn ' t be closed . - - > <nl> + < option name = " METHOD _ MATCHER _ CONFIG " value = " java . util . Formatter , format , java . io . Writer , append , com . google . common . base . Preconditions , checkNotNull , org . hibernate . Session , close , java . io . PrintWriter , printf , org . mockito . Mockito , mock | verify , org . mockito . stubbing . Stubber , when " / > <nl> + < / inspection _ tool > <nl> < ! - - we are ok to use auto - unboxing as we use modern java - - > <nl> < inspection _ tool class = " AutoUnboxing " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " AutowiredDependenciesInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 2151 , 6 + 2156 , 10 @ @ isolated classes and we cannot put them to separate package as it will affect us <nl> < ! - - XDocs UT is very long and complex - - > <nl> < option value = " OverlyComplexBooleanExpression " / > <nl> < option value = " ReuseOfLocalVariable " / > <nl> + < ! - - Sometimes resources are created in one method and released in another . <nl> + In this case , there will be a warning " AutoCloseableResource " , which need <nl> + to be suppressed . - - > <nl> + < option value = " resource " / > <nl> < / list > <nl> < / option > <nl> < / inspection _ tool > <nl> diff - - git a / config / org . eclipse . jdt . core . prefs b / config / org . eclipse . jdt . core . prefs <nl> index d080b90 . . 920693b 100644 <nl> - - - a / config / org . eclipse . jdt . core . prefs <nl> + + + b / config / org . eclipse . jdt . core . prefs <nl> @ @ - 4 , 6 + 4 , 8 @ @ org . eclipse . jdt . core . compiler . problem . deadCode = error <nl> org . eclipse . jdt . core . compiler . problem . deprecationInDeprecatedCode = enabled <nl> org . eclipse . jdt . core . compiler . problem . deprecationWhenOverridingDeprecatedMethod = enabled <nl> org . eclipse . jdt . core . compiler . problem . discouragedReference = error <nl> + # The severity is set to ' warning ' , since we need to suppress it in some cases . <nl> + org . eclipse . jdt . core . compiler . problem . explicitlyClosedAutoCloseable = warning <nl> org . eclipse . jdt . core . compiler . problem . emptyStatement = error <nl> org . eclipse . jdt . core . compiler . problem . fallthroughCase = error <nl> org . eclipse . jdt . core . compiler . problem . fatalOptionalError = disabled <nl> @ @ - 58 , 8 + 60 , 6 @ @ org . eclipse . jdt . core . compiler . problem . typeParameterHiding = error <nl> org . eclipse . jdt . core . compiler . problem . fieldHiding = error <nl> # We can not efnforce this rule as we are library and we keep deprecated stuff for some time <nl> org . eclipse . jdt . core . compiler . problem . deprecation = ignore <nl> - # We can not use try - with - resources till we use cobertura for coverage <nl> - org . eclipse . jdt . core . compiler . problem . explicitlyClosedAutoCloseable = ignore <nl> # we will not put all String values to resources , it does not make sense in our project <nl> org . eclipse . jdt . core . compiler . problem . nonExternalizedStringLiteral = ignore <nl> # we should print errors on all throwables <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> index 6b52490 . . 412d761 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> @ @ - 176 , 7 + 176 , 13 @ @ public class DefaultLogger extends AutomaticBean implements AuditListener { <nl> OutputStream errorStream , <nl> OutputStreamOptions errorStreamOptions , <nl> AuditEventFormatter messageFormatter ) { <nl> + if ( infoStreamOptions = = null ) { <nl> + throw new IllegalArgumentException ( " Parameter infoStreamOptions can not be null " ) ; <nl> + } <nl> closeInfo = infoStreamOptions = = OutputStreamOptions . CLOSE ; <nl> + if ( errorStreamOptions = = null ) { <nl> + throw new IllegalArgumentException ( " Parameter errorStreamOptions can not be null " ) ; <nl> + } <nl> closeError = errorStreamOptions = = OutputStreamOptions . CLOSE ; <nl> final Writer infoStreamWriter = new OutputStreamWriter ( infoStream , StandardCharsets . UTF _ 8 ) ; <nl> infoWriter = new PrintWriter ( infoStreamWriter ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index 80dce9b . . 7e08900 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 45 , 6 + 45 , 7 @ @ import org . apache . commons . cli . ParseException ; <nl> import org . apache . commons . logging . Log ; <nl> import org . apache . commons . logging . LogFactory ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditListener ; <nl> import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> @ @ - 602 , 41 + 603 , 30 @ @ public final class Main { <nl> } <nl> <nl> / * * <nl> - * Creates the audit listener . <nl> - * <nl> + * This method creates in AuditListener an open stream for validation data , it must be closed by <nl> + * { @ link RootModule } ( default implementation is { @ link Checker } ) by calling <nl> + * { @ link AuditListener # auditFinished ( AuditEvent ) } . <nl> * @ param format format of the audit listener <nl> * @ param outputLocation the location of output <nl> * @ return a fresh new { @ code AuditListener } <nl> * @ exception IOException when provided output location is not found <nl> * / <nl> - private static AuditListener createListener ( String format , <nl> - String outputLocation ) <nl> + private static AuditListener createListener ( String format , String outputLocation ) <nl> throws IOException { <nl> - / / setup the output stream <nl> - final OutputStream out ; <nl> - final AutomaticBean . OutputStreamOptions closeOutputStream ; <nl> - if ( outputLocation = = null ) { <nl> - out = System . out ; <nl> - closeOutputStream = AutomaticBean . OutputStreamOptions . NONE ; <nl> - } <nl> - else { <nl> - out = Files . newOutputStream ( Paths . get ( outputLocation ) ) ; <nl> - closeOutputStream = AutomaticBean . OutputStreamOptions . CLOSE ; <nl> - } <nl> - <nl> - / / setup a listener <nl> final AuditListener listener ; <nl> if ( XML _ FORMAT _ NAME . equals ( format ) ) { <nl> - listener = new XMLLogger ( out , closeOutputStream ) ; <nl> + final OutputStream out = getOutputStream ( outputLocation ) ; <nl> + final AutomaticBean . OutputStreamOptions closeOutputStreamOption = <nl> + getOutputStreamOptions ( outputLocation ) ; <nl> + listener = new XMLLogger ( out , closeOutputStreamOption ) ; <nl> } <nl> else if ( PLAIN _ FORMAT _ NAME . equals ( format ) ) { <nl> - listener = new DefaultLogger ( out , closeOutputStream , out , <nl> - AutomaticBean . OutputStreamOptions . NONE ) ; <nl> + final OutputStream out = getOutputStream ( outputLocation ) ; <nl> + final AutomaticBean . OutputStreamOptions closeOutputStreamOption = <nl> + getOutputStreamOptions ( outputLocation ) ; <nl> + listener = new DefaultLogger ( out , closeOutputStreamOption ) ; <nl> } <nl> else { <nl> - if ( closeOutputStream = = AutomaticBean . OutputStreamOptions . CLOSE ) { <nl> - CommonUtils . close ( out ) ; <nl> - } <nl> final LocalizedMessage outputFormatExceptionMessage = new LocalizedMessage ( 0 , <nl> Definitions . CHECKSTYLE _ BUNDLE , CREATE _ LISTENER _ EXCEPTION , <nl> new String [ ] { format , PLAIN _ FORMAT _ NAME , XML _ FORMAT _ NAME } , null , <nl> @ @ - 648 , 6 + 638 , 40 @ @ public final class Main { <nl> } <nl> <nl> / * * <nl> + * Create output stream or return System . out <nl> + * @ param outputLocation output location <nl> + * @ return output stream <nl> + * @ throws IOException might happen <nl> + * / <nl> + @ SuppressWarnings ( " resource " ) <nl> + private static OutputStream getOutputStream ( String outputLocation ) throws IOException { <nl> + final OutputStream result ; <nl> + if ( outputLocation = = null ) { <nl> + result = System . out ; <nl> + } <nl> + else { <nl> + result = Files . newOutputStream ( Paths . get ( outputLocation ) ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> + * Create { @ link AutomaticBean . OutputStreamOptions } for the given location . <nl> + * @ param outputLocation output location <nl> + * @ return output stream options <nl> + * / <nl> + private static AutomaticBean . OutputStreamOptions getOutputStreamOptions ( String outputLocation ) { <nl> + final AutomaticBean . OutputStreamOptions result ; <nl> + if ( outputLocation = = null ) { <nl> + result = AutomaticBean . OutputStreamOptions . NONE ; <nl> + } <nl> + else { <nl> + result = AutomaticBean . OutputStreamOptions . CLOSE ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> * Determines the files to process . <nl> * @ param patternsToExclude The list of directory patterns to exclude from searching . <nl> * @ param filesToProcess <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> index 4953a4d . . 43571a0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> @ @ - 98 , 6 + 98 , 9 @ @ public class XMLLogger <nl> * / <nl> public XMLLogger ( OutputStream outputStream , OutputStreamOptions outputStreamOptions ) { <nl> writer = new PrintWriter ( new OutputStreamWriter ( outputStream , StandardCharsets . UTF _ 8 ) ) ; <nl> + if ( outputStreamOptions = = null ) { <nl> + throw new IllegalArgumentException ( " Parameter outputStreamOptions can not be null " ) ; <nl> + } <nl> closeStream = outputStreamOptions = = OutputStreamOptions . CLOSE ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java <nl> index df80ca7 . . d2fb952 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java <nl> @ @ - 19 , 8 + 19 , 10 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . fail ; <nl> import static org . mockito . Mockito . spy ; <nl> import static org . mockito . Mockito . times ; <nl> import static org . mockito . Mockito . verify ; <nl> @ @ - 117 , 6 + 119 , 35 @ @ public class DefaultLoggerTest { <nl> } <nl> <nl> @ Test <nl> + public void testNullInfoStreamOptions ( ) { <nl> + try { <nl> + final DefaultLogger logger = new DefaultLogger ( new ByteArrayOutputStream ( ) , null ) ; <nl> + / / assert required to calm down eclipse ' s ' The allocated object is never used ' violation <nl> + assertNotNull ( " Null instance " , logger ) ; <nl> + fail ( " Exception was expected " ) ; <nl> + } <nl> + catch ( IllegalArgumentException exception ) { <nl> + assertEquals ( " Invalid error message " , " Parameter infoStreamOptions can not be null " , <nl> + exception . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testNullErrorStreamOptions ( ) { <nl> + try { <nl> + final DefaultLogger logger = new DefaultLogger ( new ByteArrayOutputStream ( ) , <nl> + AutomaticBean . OutputStreamOptions . CLOSE , new ByteArrayOutputStream ( ) , null ) ; <nl> + / / assert required to calm down eclipse ' s ' The allocated object is never used ' violation <nl> + assertNotNull ( " Null instance " , logger ) ; <nl> + fail ( " Exception was expected " ) ; <nl> + } <nl> + catch ( IllegalArgumentException exception ) { <nl> + assertEquals ( " Invalid error message " , " Parameter errorStreamOptions can not be null " , <nl> + exception . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> public void testFinishLocalSetup ( ) { <nl> final OutputStream infoStream = new ByteArrayOutputStream ( ) ; <nl> final DefaultLogger dl = new DefaultLogger ( infoStream , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index aee357d . . 6a87204 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 25 , 17 + 25 , 12 @ @ import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> - import static org . mockito . ArgumentMatchers . any ; <nl> - import static org . mockito . Mockito . times ; <nl> - import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> import static org . powermock . api . mockito . PowerMockito . mock ; <nl> import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> - import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . when ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> - import java . io . OutputStream ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> import java . nio . charset . StandardCharsets ; <nl> @ @ - 50 , 7 + 45 , 6 @ @ import java . util . logging . Level ; <nl> import java . util . logging . Logger ; <nl> import java . util . regex . Pattern ; <nl> <nl> - import org . apache . commons . io . FileUtils ; <nl> import org . junit . Before ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> @ @ - 59 , 7 + 53 , 6 @ @ import org . junit . contrib . java . lang . system . SystemErrRule ; <nl> import org . junit . contrib . java . lang . system . SystemOutRule ; <nl> import org . junit . rules . TemporaryFolder ; <nl> import org . junit . runner . RunWith ; <nl> - import org . mockito . ArgumentCaptor ; <nl> import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> @ @ - 537 , 40 + 530 , 6 @ @ public class MainTest { <nl> } <nl> <nl> @ Test <nl> - public void testCreateListenerWithLocationIllegalStateException ( ) throws Exception { <nl> - mockStatic ( CommonUtils . class ) ; <nl> - doNothing ( ) . when ( CommonUtils . class ) ; <nl> - CommonUtils . close ( any ( OutputStream . class ) ) ; <nl> - <nl> - final Method method = Main . class . getDeclaredMethod ( " createListener " , String . class , <nl> - String . class ) ; <nl> - method . setAccessible ( true ) ; <nl> - final String outDir = " myfolder123 " ; <nl> - try { <nl> - method . invoke ( null , " myformat " , outDir ) ; <nl> - fail ( " InvocationTargetException is expected " ) ; <nl> - } <nl> - catch ( InvocationTargetException ex ) { <nl> - final LocalizedMessage createListenerMessage = new LocalizedMessage ( 0 , <nl> - Definitions . CHECKSTYLE _ BUNDLE , Main . CREATE _ LISTENER _ EXCEPTION , <nl> - new String [ ] { " myformat " , " plain " , " xml " } , null , getClass ( ) , null ) ; <nl> - assertEquals ( " Invalid error message " , <nl> - createListenerMessage . getMessage ( ) , ex . getCause ( ) . getLocalizedMessage ( ) ) ; <nl> - assertTrue ( " Invalid error cause " , <nl> - ex . getCause ( ) instanceof IllegalStateException ) ; <nl> - } <nl> - finally { <nl> - verifyStatic ( CommonUtils . class , times ( 1 ) ) ; <nl> - final ArgumentCaptor < OutputStream > out = <nl> - ArgumentCaptor . forClass ( OutputStream . class ) ; <nl> - CommonUtils . close ( out . capture ( ) ) ; <nl> - out . getValue ( ) . close ( ) ; <nl> - / / method creates output folder <nl> - FileUtils . deleteQuietly ( new File ( outDir ) ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> public void testExistingDirectoryWithViolations ( ) throws Exception { <nl> / / we just reference there all violations <nl> final String [ ] [ ] outputValues = { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> index 6d765fb . . 93d07c2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> import java . io . IOException ; <nl> import java . io . PrintWriter ; <nl> @ @ - 41 , 6 + 42 , 12 @ @ import com . puppycrawl . tools . checkstyle . internal . utils . CloseAndFlushTestByteArray <nl> / / - @ cs [ AbbreviationAsWordInName ] Test should be named as its main class . <nl> public class XMLLoggerTest extends AbstractXmlTestSupport { <nl> <nl> + / * * <nl> + * Output stream to hold the test results . The IntelliJ IDEA issues the AutoCloseableResource <nl> + * warning here , so it need to be suppressed . The { @ code ByteArrayOutputStream } does not hold <nl> + * any resources that need to be released . <nl> + * @ noinspection resource <nl> + * / <nl> private final CloseAndFlushTestByteArrayOutputStream outStream = <nl> new CloseAndFlushTestByteArrayOutputStream ( ) ; <nl> <nl> @ @ - 344 , 6 + 351 , 20 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testNullOutputStreamOptions ( ) { <nl> + try { <nl> + final XMLLogger logger = new XMLLogger ( outStream , null ) ; <nl> + / / assert required to calm down eclipse ' s ' The allocated object is never used ' violation <nl> + assertNotNull ( " Null instance " , logger ) ; <nl> + fail ( " Exception was expected " ) ; <nl> + } <nl> + catch ( IllegalArgumentException exception ) { <nl> + assertEquals ( " Invalid error message " , " Parameter outputStreamOptions can not be null " , <nl> + exception . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> public void testFinishLocalSetup ( ) { <nl> final XMLLogger logger = new XMLLogger ( outStream , true ) ; <nl> logger . finishLocalSetup ( ) ;
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 6daece9 . . feef8b2 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1660 , 7 + 1660 , 7 @ @ <nl> < param > com . puppycrawl . tools . checkstyle . checks . annotation . PackageAnnotationCheckTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . checks . annotation . SuppressWarningsCheckTest < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 99 < / mutationThreshold > <nl> + < mutationThreshold > 100 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java <nl> index 6034153 . . c9b6f18 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java <nl> @ @ - 242 , 7 + 242 , 7 @ @ public final class MissingDeprecatedCheck extends AbstractCheck { <nl> <nl> boolean found = false ; <nl> int reindex = index + 1 ; <nl> - while ( reindex < lines . length ) { <nl> + while ( reindex < = lines . length - 1 ) { <nl> final Matcher multilineCont = MATCH _ DEPRECATED _ MULTILINE _ CONT . matcher ( lines [ reindex ] ) ; <nl> <nl> if ( multilineCont . find ( ) ) {

TEST DIFF:
diff - - git a / . ci / eclipse - compiler - javac . sh b / . ci / eclipse - compiler - javac . sh 
 index 9767558 . . 7a12b3a 100755 
 - - - a / . ci / eclipse - compiler - javac . sh 
 + + + b / . ci / eclipse - compiler - javac . sh 
 @ @ - 18 , 8 + 18 , 7 @ @ if [ ! - f $ ECJ _ PATH ] ; then 
 wget $ ECLIPSE _ URL / $ ECJ _ MAVEN _ VERSION / $ ECJ _ JAR - O $ ECJ _ PATH 
 fi 
 
 - mkdir - p target / classes 
 - mkdir - p target / eclipse 
 + mkdir - p target / classes target / test - classes target / eclipse 
 
 RESULT _ FILE = target / eclipse / report . txt 
 
 diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index c2d8e66 . . f772010 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 175 , 7 + 175 , 7 @ @ 
 < / module > 
 < module name = " PackageAnnotation " / > 
 < module name = " SuppressWarnings " > 
 - < property name = " format " value = " ^ ( ( ? ! unchecked | deprecation | rawtypes ) . ) * $ " / > 
 + < property name = " format " value = " ^ ( ( ? ! unchecked | deprecation | rawtypes | resource ) . ) * $ " / > 
 < message key = " suppressed . warning . not . allowed " 
 value = " The warning ' ' { 0 } ' ' cannot be suppressed at this location . 
 Only few javac warnings are allowed to suppress . 
 diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index 73271d6 . . 991a977 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 105 , 8 + 105 , 13 @ @ 
 < inspection _ tool class = " AssignmentUsedAsCondition " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < ! - - we are ok to use auto - boxing as we use modern java - - > 
 < inspection _ tool class = " AutoBoxing " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 - < ! - - we can not use try - with - resource till we switch to jacoco for code coverage - - > 
 - < inspection _ tool class = " AutoCloseableResource " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 + < inspection _ tool class = " AutoCloseableResource " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 + < ! - - These classes do not contain any resources that need to be closed . - - > 
 + < option name = " ignoredTypes " value = " java . io . ByteArrayOutputStream , java . util . stream . Stream , java . util . stream . IntStream , java . util . stream . LongStream , java . util . stream . DoubleStream , com . puppycrawl . tools . checkstyle . internal . utils . CloseAndFlushTestByteArrayOutputStream " / > 
 + < ! - - False positives for the Closable returned from a builder method ( which return " this " ) . 
 + Mock stubs shouldn ' t be closed . - - > 
 + < option name = " METHOD _ MATCHER _ CONFIG " value = " java . util . Formatter , format , java . io . Writer , append , com . google . common . base . Preconditions , checkNotNull , org . hibernate . Session , close , java . io . PrintWriter , printf , org . mockito . Mockito , mock | verify , org . mockito . stubbing . Stubber , when " / > 
 + < / inspection _ tool > 
 < ! - - we are ok to use auto - unboxing as we use modern java - - > 
 < inspection _ tool class = " AutoUnboxing " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " AutowiredDependenciesInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 2151 , 6 + 2156 , 10 @ @ isolated classes and we cannot put them to separate package as it will affect us 
 < ! - - XDocs UT is very long and complex - - > 
 < option value = " OverlyComplexBooleanExpression " / > 
 < option value = " ReuseOfLocalVariable " / > 
 + < ! - - Sometimes resources are created in one method and released in another . 
 + In this case , there will be a warning " AutoCloseableResource " , which need 
 + to be suppressed . - - > 
 + < option value = " resource " / > 
 < / list > 
 < / option > 
 < / inspection _ tool > 
 diff - - git a / config / org . eclipse . jdt . core . prefs b / config / org . eclipse . jdt . core . prefs 
 index d080b90 . . 920693b 100644 
 - - - a / config / org . eclipse . jdt . core . prefs 
 + + + b / config / org . eclipse . jdt . core . prefs 
 @ @ - 4 , 6 + 4 , 8 @ @ org . eclipse . jdt . core . compiler . problem . deadCode = error 
 org . eclipse . jdt . core . compiler . problem . deprecationInDeprecatedCode = enabled 
 org . eclipse . jdt . core . compiler . problem . deprecationWhenOverridingDeprecatedMethod = enabled 
 org . eclipse . jdt . core . compiler . problem . discouragedReference = error 
 + # The severity is set to ' warning ' , since we need to suppress it in some cases . 
 + org . eclipse . jdt . core . compiler . problem . explicitlyClosedAutoCloseable = warning 
 org . eclipse . jdt . core . compiler . problem . emptyStatement = error 
 org . eclipse . jdt . core . compiler . problem . fallthroughCase = error 
 org . eclipse . jdt . core . compiler . problem . fatalOptionalError = disabled 
 @ @ - 58 , 8 + 60 , 6 @ @ org . eclipse . jdt . core . compiler . problem . typeParameterHiding = error 
 org . eclipse . jdt . core . compiler . problem . fieldHiding = error 
 # We can not efnforce this rule as we are library and we keep deprecated stuff for some time 
 org . eclipse . jdt . core . compiler . problem . deprecation = ignore 
 - # We can not use try - with - resources till we use cobertura for coverage 
 - org . eclipse . jdt . core . compiler . problem . explicitlyClosedAutoCloseable = ignore 
 # we will not put all String values to resources , it does not make sense in our project 
 org . eclipse . jdt . core . compiler . problem . nonExternalizedStringLiteral = ignore 
 # we should print errors on all throwables 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 index 6b52490 . . 412d761 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 @ @ - 176 , 7 + 176 , 13 @ @ public class DefaultLogger extends AutomaticBean implements AuditListener { 
 OutputStream errorStream , 
 OutputStreamOptions errorStreamOptions , 
 AuditEventFormatter messageFormatter ) { 
 + if ( infoStreamOptions = = null ) { 
 + throw new IllegalArgumentException ( " Parameter infoStreamOptions can not be null " ) ; 
 + } 
 closeInfo = infoStreamOptions = = OutputStreamOptions . CLOSE ; 
 + if ( errorStreamOptions = = null ) { 
 + throw new IllegalArgumentException ( " Parameter errorStreamOptions can not be null " ) ; 
 + } 
 closeError = errorStreamOptions = = OutputStreamOptions . CLOSE ; 
 final Writer infoStreamWriter = new OutputStreamWriter ( infoStream , StandardCharsets . UTF _ 8 ) ; 
 infoWriter = new PrintWriter ( infoStreamWriter ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index 80dce9b . . 7e08900 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 45 , 6 + 45 , 7 @ @ import org . apache . commons . cli . ParseException ; 
 import org . apache . commons . logging . Log ; 
 import org . apache . commons . logging . LogFactory ; 
 
 + import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 import com . puppycrawl . tools . checkstyle . api . AuditListener ; 
 import com . puppycrawl . tools . checkstyle . api . AutomaticBean ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 @ @ - 602 , 41 + 603 , 30 @ @ public final class Main { 
 } 
 
 / * * 
 - * Creates the audit listener . 
 - * 
 + * This method creates in AuditListener an open stream for validation data , it must be closed by 
 + * { @ link RootModule } ( default implementation is { @ link Checker } ) by calling 
 + * { @ link AuditListener # auditFinished ( AuditEvent ) } . 
 * @ param format format of the audit listener 
 * @ param outputLocation the location of output 
 * @ return a fresh new { @ code AuditListener } 
 * @ exception IOException when provided output location is not found 
 * / 
 - private static AuditListener createListener ( String format , 
 - String outputLocation ) 
 + private static AuditListener createListener ( String format , String outputLocation ) 
 throws IOException { 
 - / / setup the output stream 
 - final OutputStream out ; 
 - final AutomaticBean . OutputStreamOptions closeOutputStream ; 
 - if ( outputLocation = = null ) { 
 - out = System . out ; 
 - closeOutputStream = AutomaticBean . OutputStreamOptions . NONE ; 
 - } 
 - else { 
 - out = Files . newOutputStream ( Paths . get ( outputLocation ) ) ; 
 - closeOutputStream = AutomaticBean . OutputStreamOptions . CLOSE ; 
 - } 
 - 
 - / / setup a listener 
 final AuditListener listener ; 
 if ( XML _ FORMAT _ NAME . equals ( format ) ) { 
 - listener = new XMLLogger ( out , closeOutputStream ) ; 
 + final OutputStream out = getOutputStream ( outputLocation ) ; 
 + final AutomaticBean . OutputStreamOptions closeOutputStreamOption = 
 + getOutputStreamOptions ( outputLocation ) ; 
 + listener = new XMLLogger ( out , closeOutputStreamOption ) ; 
 } 
 else if ( PLAIN _ FORMAT _ NAME . equals ( format ) ) { 
 - listener = new DefaultLogger ( out , closeOutputStream , out , 
 - AutomaticBean . OutputStreamOptions . NONE ) ; 
 + final OutputStream out = getOutputStream ( outputLocation ) ; 
 + final AutomaticBean . OutputStreamOptions closeOutputStreamOption = 
 + getOutputStreamOptions ( outputLocation ) ; 
 + listener = new DefaultLogger ( out , closeOutputStreamOption ) ; 
 } 
 else { 
 - if ( closeOutputStream = = AutomaticBean . OutputStreamOptions . CLOSE ) { 
 - CommonUtils . close ( out ) ; 
 - } 
 final LocalizedMessage outputFormatExceptionMessage = new LocalizedMessage ( 0 , 
 Definitions . CHECKSTYLE _ BUNDLE , CREATE _ LISTENER _ EXCEPTION , 
 new String [ ] { format , PLAIN _ FORMAT _ NAME , XML _ FORMAT _ NAME } , null , 
 @ @ - 648 , 6 + 638 , 40 @ @ public final class Main { 
 } 
 
 / * * 
 + * Create output stream or return System . out 
 + * @ param outputLocation output location 
 + * @ return output stream 
 + * @ throws IOException might happen 
 + * / 
 + @ SuppressWarnings ( " resource " ) 
 + private static OutputStream getOutputStream ( String outputLocation ) throws IOException { 
 + final OutputStream result ; 
 + if ( outputLocation = = null ) { 
 + result = System . out ; 
 + } 
 + else { 
 + result = Files . newOutputStream ( Paths . get ( outputLocation ) ) ; 
 + } 
 + return result ; 
 + } 
 + 
 + / * * 
 + * Create { @ link AutomaticBean . OutputStreamOptions } for the given location . 
 + * @ param outputLocation output location 
 + * @ return output stream options 
 + * / 
 + private static AutomaticBean . OutputStreamOptions getOutputStreamOptions ( String outputLocation ) { 
 + final AutomaticBean . OutputStreamOptions result ; 
 + if ( outputLocation = = null ) { 
 + result = AutomaticBean . OutputStreamOptions . NONE ; 
 + } 
 + else { 
 + result = AutomaticBean . OutputStreamOptions . CLOSE ; 
 + } 
 + return result ; 
 + } 
 + 
 + / * * 
 * Determines the files to process . 
 * @ param patternsToExclude The list of directory patterns to exclude from searching . 
 * @ param filesToProcess 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 index 4953a4d . . 43571a0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 @ @ - 98 , 6 + 98 , 9 @ @ public class XMLLogger 
 * / 
 public XMLLogger ( OutputStream outputStream , OutputStreamOptions outputStreamOptions ) { 
 writer = new PrintWriter ( new OutputStreamWriter ( outputStream , StandardCharsets . UTF _ 8 ) ) ; 
 + if ( outputStreamOptions = = null ) { 
 + throw new IllegalArgumentException ( " Parameter outputStreamOptions can not be null " ) ; 
 + } 
 closeStream = outputStreamOptions = = OutputStreamOptions . CLOSE ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java 
 index df80ca7 . . d2fb952 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DefaultLoggerTest . java 
 @ @ - 19 , 8 + 19 , 10 @ @ 
 
 package com . puppycrawl . tools . checkstyle ; 
 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . fail ; 
 import static org . mockito . Mockito . spy ; 
 import static org . mockito . Mockito . times ; 
 import static org . mockito . Mockito . verify ; 
 @ @ - 117 , 6 + 119 , 35 @ @ public class DefaultLoggerTest { 
 } 
 
 @ Test 
 + public void testNullInfoStreamOptions ( ) { 
 + try { 
 + final DefaultLogger logger = new DefaultLogger ( new ByteArrayOutputStream ( ) , null ) ; 
 + / / assert required to calm down eclipse ' s ' The allocated object is never used ' violation 
 + assertNotNull ( " Null instance " , logger ) ; 
 + fail ( " Exception was expected " ) ; 
 + } 
 + catch ( IllegalArgumentException exception ) { 
 + assertEquals ( " Invalid error message " , " Parameter infoStreamOptions can not be null " , 
 + exception . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testNullErrorStreamOptions ( ) { 
 + try { 
 + final DefaultLogger logger = new DefaultLogger ( new ByteArrayOutputStream ( ) , 
 + AutomaticBean . OutputStreamOptions . CLOSE , new ByteArrayOutputStream ( ) , null ) ; 
 + / / assert required to calm down eclipse ' s ' The allocated object is never used ' violation 
 + assertNotNull ( " Null instance " , logger ) ; 
 + fail ( " Exception was expected " ) ; 
 + } 
 + catch ( IllegalArgumentException exception ) { 
 + assertEquals ( " Invalid error message " , " Parameter errorStreamOptions can not be null " , 
 + exception . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 public void testFinishLocalSetup ( ) { 
 final OutputStream infoStream = new ByteArrayOutputStream ( ) ; 
 final DefaultLogger dl = new DefaultLogger ( infoStream , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index aee357d . . 6a87204 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 25 , 17 + 25 , 12 @ @ import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 - import static org . mockito . ArgumentMatchers . any ; 
 - import static org . mockito . Mockito . times ; 
 - import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 import static org . powermock . api . mockito . PowerMockito . mock ; 
 import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 - import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 import static org . powermock . api . mockito . PowerMockito . when ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 - import java . io . OutputStream ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 import java . nio . charset . StandardCharsets ; 
 @ @ - 50 , 7 + 45 , 6 @ @ import java . util . logging . Level ; 
 import java . util . logging . Logger ; 
 import java . util . regex . Pattern ; 
 
 - import org . apache . commons . io . FileUtils ; 
 import org . junit . Before ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 @ @ - 59 , 7 + 53 , 6 @ @ import org . junit . contrib . java . lang . system . SystemErrRule ; 
 import org . junit . contrib . java . lang . system . SystemOutRule ; 
 import org . junit . rules . TemporaryFolder ; 
 import org . junit . runner . RunWith ; 
 - import org . mockito . ArgumentCaptor ; 
 import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 @ @ - 537 , 40 + 530 , 6 @ @ public class MainTest { 
 } 
 
 @ Test 
 - public void testCreateListenerWithLocationIllegalStateException ( ) throws Exception { 
 - mockStatic ( CommonUtils . class ) ; 
 - doNothing ( ) . when ( CommonUtils . class ) ; 
 - CommonUtils . close ( any ( OutputStream . class ) ) ; 
 - 
 - final Method method = Main . class . getDeclaredMethod ( " createListener " , String . class , 
 - String . class ) ; 
 - method . setAccessible ( true ) ; 
 - final String outDir = " myfolder123 " ; 
 - try { 
 - method . invoke ( null , " myformat " , outDir ) ; 
 - fail ( " InvocationTargetException is expected " ) ; 
 - } 
 - catch ( InvocationTargetException ex ) { 
 - final LocalizedMessage createListenerMessage = new LocalizedMessage ( 0 , 
 - Definitions . CHECKSTYLE _ BUNDLE , Main . CREATE _ LISTENER _ EXCEPTION , 
 - new String [ ] { " myformat " , " plain " , " xml " } , null , getClass ( ) , null ) ; 
 - assertEquals ( " Invalid error message " , 
 - createListenerMessage . getMessage ( ) , ex . getCause ( ) . getLocalizedMessage ( ) ) ; 
 - assertTrue ( " Invalid error cause " , 
 - ex . getCause ( ) instanceof IllegalStateException ) ; 
 - } 
 - finally { 
 - verifyStatic ( CommonUtils . class , times ( 1 ) ) ; 
 - final ArgumentCaptor < OutputStream > out = 
 - ArgumentCaptor . forClass ( OutputStream . class ) ; 
 - CommonUtils . close ( out . capture ( ) ) ; 
 - out . getValue ( ) . close ( ) ; 
 - / / method creates output folder 
 - FileUtils . deleteQuietly ( new File ( outDir ) ) ; 
 - } 
 - } 
 - 
 - @ Test 
 public void testExistingDirectoryWithViolations ( ) throws Exception { 
 / / we just reference there all violations 
 final String [ ] [ ] outputValues = { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 index 6d765fb . . 93d07c2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . fail ; 
 
 import java . io . IOException ; 
 import java . io . PrintWriter ; 
 @ @ - 41 , 6 + 42 , 12 @ @ import com . puppycrawl . tools . checkstyle . internal . utils . CloseAndFlushTestByteArray 
 / / - @ cs [ AbbreviationAsWordInName ] Test should be named as its main class . 
 public class XMLLoggerTest extends AbstractXmlTestSupport { 
 
 + / * * 
 + * Output stream to hold the test results . The IntelliJ IDEA issues the AutoCloseableResource 
 + * warning here , so it need to be suppressed . The { @ code ByteArrayOutputStream } does not hold 
 + * any resources that need to be released . 
 + * @ noinspection resource 
 + * / 
 private final CloseAndFlushTestByteArrayOutputStream outStream = 
 new CloseAndFlushTestByteArrayOutputStream ( ) ; 
 
 @ @ - 344 , 6 + 351 , 20 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { 
 } 
 
 @ Test 
 + public void testNullOutputStreamOptions ( ) { 
 + try { 
 + final XMLLogger logger = new XMLLogger ( outStream , null ) ; 
 + / / assert required to calm down eclipse ' s ' The allocated object is never used ' violation 
 + assertNotNull ( " Null instance " , logger ) ; 
 + fail ( " Exception was expected " ) ; 
 + } 
 + catch ( IllegalArgumentException exception ) { 
 + assertEquals ( " Invalid error message " , " Parameter outputStreamOptions can not be null " , 
 + exception . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 public void testFinishLocalSetup ( ) { 
 final XMLLogger logger = new XMLLogger ( outStream , true ) ; 
 logger . finishLocalSetup ( ) ;

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 6daece9 . . feef8b2 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1660 , 7 + 1660 , 7 @ @ 
 < param > com . puppycrawl . tools . checkstyle . checks . annotation . PackageAnnotationCheckTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . checks . annotation . SuppressWarningsCheckTest < / param > 
 < / targetTests > 
 - < mutationThreshold > 99 < / mutationThreshold > 
 + < mutationThreshold > 100 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java 
 index 6034153 . . c9b6f18 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java 
 @ @ - 242 , 7 + 242 , 7 @ @ public final class MissingDeprecatedCheck extends AbstractCheck { 
 
 boolean found = false ; 
 int reindex = index + 1 ; 
 - while ( reindex < lines . length ) { 
 + while ( reindex < = lines . length - 1 ) { 
 final Matcher multilineCont = MATCH _ DEPRECATED _ MULTILINE _ CONT . matcher ( lines [ reindex ] ) ; 
 
 if ( multilineCont . find ( ) ) {
