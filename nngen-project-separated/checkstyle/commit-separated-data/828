BLEU SCORE: 0.3215350411986714

TEST MSG: Issue # 3496 : Enforce ReturnCount max = 1 in imports , regexp , naming , design , sizes packages
GENERATED MSG: Issue # 3496 : Enforce ReturnCount max = 1 in com . puppycrawl . tools . checkstyle . checks and com . puppycrawl . tools . checkstyle

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index dc4ed62 . . 2d23421 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 92 , 6 + 92 , 5 @ @ <nl> <nl> < ! - - Until https : / / github . com / checkstyle / checkstyle / issues / 3496 - - > <nl> < suppress id = " returnCountMaxOne " files = " . * [ \ \ / ] ant [ \ \ / ] | . * [ \ \ / ] filters [ \ \ / ] | . * [ \ \ / ] api [ \ \ / ] | . * [ \ \ / ] annotation [ \ \ / ] | <nl> - | . * [ \ \ / ] coding [ \ \ / ] | . * [ \ \ / ] design [ \ \ / ] | . * [ \ \ / ] imports [ \ \ / ] | . * [ \ \ / ] indentation [ \ \ / ] | . * [ \ \ / ] javadoc [ \ \ / ] | <nl> - | . * [ \ \ / ] naming [ \ \ / ] | . * [ \ \ / ] regexp [ \ \ / ] | . * [ \ \ / ] sizes [ \ \ / ] " / > <nl> + | . * [ \ \ / ] coding [ \ \ / ] | . * [ \ \ / ] indentation [ \ \ / ] | . * [ \ \ / ] javadoc [ \ \ / ] " / > <nl> < / suppressions > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> index cd39fad . . 70d558c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> @ @ - 157 , 6 + 157 , 7 @ @ public final class MutableExceptionCheck extends AbstractCheck { <nl> * @ return true if extended class name conforms to specified format <nl> * / <nl> private boolean isExtendedClassNamedAsException ( DetailAST ast ) { <nl> + boolean result = false ; <nl> final DetailAST extendsClause = ast . findFirstToken ( TokenTypes . EXTENDS _ CLAUSE ) ; <nl> if ( extendsClause ! = null ) { <nl> DetailAST currentNode = extendsClause ; <nl> @ @ - 164 , 8 + 165 , 8 @ @ public final class MutableExceptionCheck extends AbstractCheck { <nl> currentNode = currentNode . getLastChild ( ) ; <nl> } <nl> final String extendedClassName = currentNode . getText ( ) ; <nl> - return extendedClassNameFormat . matcher ( extendedClassName ) . matches ( ) ; <nl> + result = extendedClassNameFormat . matcher ( extendedClassName ) . matches ( ) ; <nl> } <nl> - return false ; <nl> + return result ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java <nl> index feb3dd5 . . 54a0b72 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java <nl> @ @ - 593 , 12 + 593 , 14 @ @ public class CustomImportOrderCheck extends AbstractCheck { <nl> * true , if current group contains at least one import . <nl> * / <nl> private boolean hasAnyImportInCurrentGroup ( String currentGroup ) { <nl> + boolean result = false ; <nl> for ( ImportDetails currentImport : importToGroupList ) { <nl> if ( currentGroup . equals ( currentImport . getImportGroup ( ) ) ) { <nl> - return true ; <nl> + result = true ; <nl> + break ; <nl> } <nl> } <nl> - return false ; <nl> + return result ; <nl> } <nl> <nl> / * * <nl> @ @ - 723 , 12 + 725 , 11 @ @ public class CustomImportOrderCheck extends AbstractCheck { <nl> * @ return full path or null . <nl> * / <nl> private static String getFullImportIdent ( DetailAST token ) { <nl> - if ( token = = null ) { <nl> - return " " ; <nl> - } <nl> - else { <nl> - return FullIdent . createFullIdent ( token . findFirstToken ( TokenTypes . DOT ) ) . getText ( ) ; <nl> + String ident = " " ; <nl> + if ( token ! = null ) { <nl> + ident = FullIdent . createFullIdent ( token . findFirstToken ( TokenTypes . DOT ) ) . getText ( ) ; <nl> } <nl> + return ident ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheck . java <nl> index 7e247f4 . . 4c53ccc 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheck . java <nl> @ @ - 123 , 11 + 123 , 13 @ @ public class IllegalImportCheck <nl> * @ return if { @ code importText } contains an illegal package prefix <nl> * / <nl> private boolean isIllegalImport ( String importText ) { <nl> + boolean isIllegal = false ; <nl> for ( String element : illegalPkgs ) { <nl> if ( importText . startsWith ( element + " . " ) ) { <nl> - return true ; <nl> + isIllegal = true ; <nl> + break ; <nl> } <nl> } <nl> - return false ; <nl> + return isIllegal ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java <nl> index c7dcd9e . . c490202 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java <nl> @ @ - 271 , 19 + 271 , 19 @ @ class ImportControl { <nl> * @ param inPkg the package doing the import . <nl> * @ return an { @ link AccessResult } . <nl> * / <nl> - private AccessResult localCheckAccess ( final String inPkg , <nl> - final String forImport ) { <nl> - for ( AbstractImportRule r : rules ) { <nl> + private AccessResult localCheckAccess ( final String inPkg , final String forImport ) { <nl> + AccessResult localCheckAccessResult = AccessResult . UNKNOWN ; <nl> + for ( AbstractImportRule importRule : rules ) { <nl> / / Check if an import rule is only meant to be applied locally . <nl> - if ( r . isLocalOnly ( ) & & ! matchesExactly ( inPkg ) ) { <nl> - continue ; <nl> - } <nl> - final AccessResult result = r . verifyImport ( forImport ) ; <nl> - if ( result ! = AccessResult . UNKNOWN ) { <nl> - return result ; <nl> + if ( ! importRule . isLocalOnly ( ) | | matchesExactly ( inPkg ) ) { <nl> + final AccessResult result = importRule . verifyImport ( forImport ) ; <nl> + if ( result ! = AccessResult . UNKNOWN ) { <nl> + localCheckAccessResult = result ; <nl> + break ; <nl> + } <nl> } <nl> } <nl> - return AccessResult . UNKNOWN ; <nl> + return localCheckAccessResult ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java <nl> index ccb2496 . . 4d7da9f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java <nl> @ @ - 113 , 15 + 113 , 17 @ @ public class LocalVariableNameCheck <nl> <nl> @ Override <nl> protected final boolean mustCheckName ( DetailAST ast ) { <nl> + final boolean result ; <nl> if ( allowOneCharVarInForLoop & & isForLoopVariable ( ast ) ) { <nl> - final String variableName = <nl> - ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> - return ! SINGLE _ CHAR . matcher ( variableName ) . find ( ) ; <nl> + final String variableName = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + result = ! SINGLE _ CHAR . matcher ( variableName ) . find ( ) ; <nl> } <nl> - final DetailAST modifiersAST = <nl> - ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - final boolean isFinal = modifiersAST . branchContains ( TokenTypes . FINAL ) ; <nl> - return ! isFinal & & ScopeUtils . isLocalVariableDef ( ast ) ; <nl> + else { <nl> + final DetailAST modifiersAST = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + final boolean isFinal = modifiersAST . branchContains ( TokenTypes . FINAL ) ; <nl> + result = ! isFinal & & ScopeUtils . isLocalVariableDef ( ast ) ; <nl> + } <nl> + return result ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java <nl> index 94a702c . . 2b73218 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java <nl> @ @ - 117 , 15 + 117 , 14 @ @ public final class DetectorOptions { <nl> * @ return the pattern to use when matching . <nl> * / <nl> public Pattern getPattern ( ) { <nl> - if ( pattern ! = null ) { <nl> - return pattern ; <nl> - } <nl> - int options = compileFlags ; <nl> + if ( pattern = = null ) { <nl> + int options = compileFlags ; <nl> <nl> - if ( ignoreCase ) { <nl> - options | = Pattern . CASE _ INSENSITIVE ; <nl> + if ( ignoreCase ) { <nl> + options | = Pattern . CASE _ INSENSITIVE ; <nl> + } <nl> + pattern = Pattern . compile ( format , options ) ; <nl> } <nl> - pattern = Pattern . compile ( format , options ) ; <nl> return pattern ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java <nl> index 0533924 . . 0ff4916 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java <nl> @ @ - 252 , 14 + 252 , 11 @ @ public final class MethodCountCheck extends AbstractCheck { <nl> * @ return the value of a scope counter <nl> * / <nl> private int value ( Scope scope ) { <nl> - final Integer value = counts . get ( scope ) ; <nl> - <nl> + Integer value = counts . get ( scope ) ; <nl> if ( value = = null ) { <nl> - return 0 ; <nl> - } <nl> - else { <nl> - return value ; <nl> + value = 0 ; <nl> } <nl> + return value ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / . ci / run - link - check - plugin . sh b / . ci / run - link - check - plugin . sh <nl> index ce27f18 . . 0090d36 100755 <nl> - - - a / . ci / run - link - check - plugin . sh <nl> + + + b / . ci / run - link - check - plugin . sh <nl> @ @ - 7 , 6 + 7 , 7 @ @ mvn - - version <nl> curl - I https : / / sourceforge . net / projects / checkstyle / <nl> mvn clean site - Dcheckstyle . ant . skip = true - DskipTests - DskipITs - Dpmd . skip = true - Dfindbugs . skip = true - Dcobertura . skip = true - Dcheckstyle . skip = true <nl> echo " - - - - - - - - - - - - grep of linkcheck . html - - BEGIN " <nl> + # " grep . . . | cat " is required command is running in " set - e " mode and grep could return exit code 1 if nothing is matching <nl> grep externalLink target / site / linkcheck . html | cat <nl> echo " - - - - - - - - - - - - grep of linkcheck . html - - END " <nl> RESULT = $ ( grep externalLink target / site / linkcheck . html | grep - v ' Read timed out ' | wc - l )

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index dc4ed62 . . 2d23421 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 92 , 6 + 92 , 5 @ @ 
 
 < ! - - Until https : / / github . com / checkstyle / checkstyle / issues / 3496 - - > 
 < suppress id = " returnCountMaxOne " files = " . * [ \ \ / ] ant [ \ \ / ] | . * [ \ \ / ] filters [ \ \ / ] | . * [ \ \ / ] api [ \ \ / ] | . * [ \ \ / ] annotation [ \ \ / ] | 
 - | . * [ \ \ / ] coding [ \ \ / ] | . * [ \ \ / ] design [ \ \ / ] | . * [ \ \ / ] imports [ \ \ / ] | . * [ \ \ / ] indentation [ \ \ / ] | . * [ \ \ / ] javadoc [ \ \ / ] | 
 - | . * [ \ \ / ] naming [ \ \ / ] | . * [ \ \ / ] regexp [ \ \ / ] | . * [ \ \ / ] sizes [ \ \ / ] " / > 
 + | . * [ \ \ / ] coding [ \ \ / ] | . * [ \ \ / ] indentation [ \ \ / ] | . * [ \ \ / ] javadoc [ \ \ / ] " / > 
 < / suppressions > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 index cd39fad . . 70d558c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 @ @ - 157 , 6 + 157 , 7 @ @ public final class MutableExceptionCheck extends AbstractCheck { 
 * @ return true if extended class name conforms to specified format 
 * / 
 private boolean isExtendedClassNamedAsException ( DetailAST ast ) { 
 + boolean result = false ; 
 final DetailAST extendsClause = ast . findFirstToken ( TokenTypes . EXTENDS _ CLAUSE ) ; 
 if ( extendsClause ! = null ) { 
 DetailAST currentNode = extendsClause ; 
 @ @ - 164 , 8 + 165 , 8 @ @ public final class MutableExceptionCheck extends AbstractCheck { 
 currentNode = currentNode . getLastChild ( ) ; 
 } 
 final String extendedClassName = currentNode . getText ( ) ; 
 - return extendedClassNameFormat . matcher ( extendedClassName ) . matches ( ) ; 
 + result = extendedClassNameFormat . matcher ( extendedClassName ) . matches ( ) ; 
 } 
 - return false ; 
 + return result ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java 
 index feb3dd5 . . 54a0b72 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java 
 @ @ - 593 , 12 + 593 , 14 @ @ public class CustomImportOrderCheck extends AbstractCheck { 
 * true , if current group contains at least one import . 
 * / 
 private boolean hasAnyImportInCurrentGroup ( String currentGroup ) { 
 + boolean result = false ; 
 for ( ImportDetails currentImport : importToGroupList ) { 
 if ( currentGroup . equals ( currentImport . getImportGroup ( ) ) ) { 
 - return true ; 
 + result = true ; 
 + break ; 
 } 
 } 
 - return false ; 
 + return result ; 
 } 
 
 / * * 
 @ @ - 723 , 12 + 725 , 11 @ @ public class CustomImportOrderCheck extends AbstractCheck { 
 * @ return full path or null . 
 * / 
 private static String getFullImportIdent ( DetailAST token ) { 
 - if ( token = = null ) { 
 - return " " ; 
 - } 
 - else { 
 - return FullIdent . createFullIdent ( token . findFirstToken ( TokenTypes . DOT ) ) . getText ( ) ; 
 + String ident = " " ; 
 + if ( token ! = null ) { 
 + ident = FullIdent . createFullIdent ( token . findFirstToken ( TokenTypes . DOT ) ) . getText ( ) ; 
 } 
 + return ident ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheck . java 
 index 7e247f4 . . 4c53ccc 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / IllegalImportCheck . java 
 @ @ - 123 , 11 + 123 , 13 @ @ public class IllegalImportCheck 
 * @ return if { @ code importText } contains an illegal package prefix 
 * / 
 private boolean isIllegalImport ( String importText ) { 
 + boolean isIllegal = false ; 
 for ( String element : illegalPkgs ) { 
 if ( importText . startsWith ( element + " . " ) ) { 
 - return true ; 
 + isIllegal = true ; 
 + break ; 
 } 
 } 
 - return false ; 
 + return isIllegal ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java 
 index c7dcd9e . . c490202 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControl . java 
 @ @ - 271 , 19 + 271 , 19 @ @ class ImportControl { 
 * @ param inPkg the package doing the import . 
 * @ return an { @ link AccessResult } . 
 * / 
 - private AccessResult localCheckAccess ( final String inPkg , 
 - final String forImport ) { 
 - for ( AbstractImportRule r : rules ) { 
 + private AccessResult localCheckAccess ( final String inPkg , final String forImport ) { 
 + AccessResult localCheckAccessResult = AccessResult . UNKNOWN ; 
 + for ( AbstractImportRule importRule : rules ) { 
 / / Check if an import rule is only meant to be applied locally . 
 - if ( r . isLocalOnly ( ) & & ! matchesExactly ( inPkg ) ) { 
 - continue ; 
 - } 
 - final AccessResult result = r . verifyImport ( forImport ) ; 
 - if ( result ! = AccessResult . UNKNOWN ) { 
 - return result ; 
 + if ( ! importRule . isLocalOnly ( ) | | matchesExactly ( inPkg ) ) { 
 + final AccessResult result = importRule . verifyImport ( forImport ) ; 
 + if ( result ! = AccessResult . UNKNOWN ) { 
 + localCheckAccessResult = result ; 
 + break ; 
 + } 
 } 
 } 
 - return AccessResult . UNKNOWN ; 
 + return localCheckAccessResult ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java 
 index ccb2496 . . 4d7da9f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LocalVariableNameCheck . java 
 @ @ - 113 , 15 + 113 , 17 @ @ public class LocalVariableNameCheck 
 
 @ Override 
 protected final boolean mustCheckName ( DetailAST ast ) { 
 + final boolean result ; 
 if ( allowOneCharVarInForLoop & & isForLoopVariable ( ast ) ) { 
 - final String variableName = 
 - ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 - return ! SINGLE _ CHAR . matcher ( variableName ) . find ( ) ; 
 + final String variableName = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + result = ! SINGLE _ CHAR . matcher ( variableName ) . find ( ) ; 
 } 
 - final DetailAST modifiersAST = 
 - ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - final boolean isFinal = modifiersAST . branchContains ( TokenTypes . FINAL ) ; 
 - return ! isFinal & & ScopeUtils . isLocalVariableDef ( ast ) ; 
 + else { 
 + final DetailAST modifiersAST = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + final boolean isFinal = modifiersAST . branchContains ( TokenTypes . FINAL ) ; 
 + result = ! isFinal & & ScopeUtils . isLocalVariableDef ( ast ) ; 
 + } 
 + return result ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java 
 index 94a702c . . 2b73218 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java 
 @ @ - 117 , 15 + 117 , 14 @ @ public final class DetectorOptions { 
 * @ return the pattern to use when matching . 
 * / 
 public Pattern getPattern ( ) { 
 - if ( pattern ! = null ) { 
 - return pattern ; 
 - } 
 - int options = compileFlags ; 
 + if ( pattern = = null ) { 
 + int options = compileFlags ; 
 
 - if ( ignoreCase ) { 
 - options | = Pattern . CASE _ INSENSITIVE ; 
 + if ( ignoreCase ) { 
 + options | = Pattern . CASE _ INSENSITIVE ; 
 + } 
 + pattern = Pattern . compile ( format , options ) ; 
 } 
 - pattern = Pattern . compile ( format , options ) ; 
 return pattern ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java 
 index 0533924 . . 0ff4916 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheck . java 
 @ @ - 252 , 14 + 252 , 11 @ @ public final class MethodCountCheck extends AbstractCheck { 
 * @ return the value of a scope counter 
 * / 
 private int value ( Scope scope ) { 
 - final Integer value = counts . get ( scope ) ; 
 - 
 + Integer value = counts . get ( scope ) ; 
 if ( value = = null ) { 
 - return 0 ; 
 - } 
 - else { 
 - return value ; 
 + value = 0 ; 
 } 
 + return value ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / . ci / run - link - check - plugin . sh b / . ci / run - link - check - plugin . sh 
 index ce27f18 . . 0090d36 100755 
 - - - a / . ci / run - link - check - plugin . sh 
 + + + b / . ci / run - link - check - plugin . sh 
 @ @ - 7 , 6 + 7 , 7 @ @ mvn - - version 
 curl - I https : / / sourceforge . net / projects / checkstyle / 
 mvn clean site - Dcheckstyle . ant . skip = true - DskipTests - DskipITs - Dpmd . skip = true - Dfindbugs . skip = true - Dcobertura . skip = true - Dcheckstyle . skip = true 
 echo " - - - - - - - - - - - - grep of linkcheck . html - - BEGIN " 
 + # " grep . . . | cat " is required command is running in " set - e " mode and grep could return exit code 1 if nothing is matching 
 grep externalLink target / site / linkcheck . html | cat 
 echo " - - - - - - - - - - - - grep of linkcheck . html - - END " 
 RESULT = $ ( grep externalLink target / site / linkcheck . html | grep - v ' Read timed out ' | wc - l )
