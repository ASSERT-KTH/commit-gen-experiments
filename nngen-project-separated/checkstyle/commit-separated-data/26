BLEU SCORE: 0.0534741036489421

TEST MSG: config : remove dtds folder from sourceforge
GENERATED MSG: config : update release . sh to restore folder with links to old versions

TEST DIFF (one line): diff - - git a / . ci / copy - site - to - sourceforge . sh b / . ci / copy - site - to - sourceforge . sh <nl> index d178738 . . 100c747 100755 <nl> - - - a / . ci / copy - site - to - sourceforge . sh <nl> + + + b / . ci / copy - site - to - sourceforge . sh <nl> @ @ - 48 , 6 + 48 , 8 @ @ tar - xzvf checkstyle . github . io . tar . gz <nl> mv htdocs htdocs - $ PREV _ RELEASE <nl> mv checkstyle . github . io htdocs <nl> ln - s / home / project - web / checkstyle / reports htdocs / reports <nl> + echo " remove dtds folder from unsecure web site " <nl> + rm - r htdocs / dtds <nl> echo " restore folder with links to old releases " <nl> mv htdocs - $ PREV _ RELEASE / version htdocs <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index d028f6f . . 1fc67c1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 361 , 6 + 361 , 7 @ @ public class ImportOrderCheck <nl> / / - @ cs [ CyclomaticComplexity ] SWITCH was transformed into IF - ELSE . <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> + final int line = ast . getLineNo ( ) ; <nl> final FullIdent ident ; <nl> final boolean isStatic ; <nl> <nl> @ @ - 384 , 7 + 385 , 7 @ @ public class ImportOrderCheck <nl> lastGroup = Integer . MIN _ VALUE ; <nl> lastImport = " " ; <nl> } <nl> - doVisitToken ( ident , isStatic , isStaticAndNotLastImport ) ; <nl> + doVisitToken ( ident , isStatic , isStaticAndNotLastImport , line ) ; <nl> <nl> if ( isStaticAndNotLastImport & & ! beforeFirstImport ) { <nl> log ( ident . getLineNo ( ) , MSG _ ORDERING , ident . getText ( ) ) ; <nl> @ @ - 395 , 7 + 396 , 7 @ @ public class ImportOrderCheck <nl> lastGroup = Integer . MIN _ VALUE ; <nl> lastImport = " " ; <nl> } <nl> - doVisitToken ( ident , isStatic , isLastImportAndNonStatic ) ; <nl> + doVisitToken ( ident , isStatic , isLastImportAndNonStatic , line ) ; <nl> <nl> if ( isLastImportAndNonStatic ) { <nl> log ( ident . getLineNo ( ) , MSG _ ORDERING , ident . getText ( ) ) ; <nl> @ @ - 403 , 14 + 404 , 14 @ @ public class ImportOrderCheck <nl> } <nl> else if ( option = = ImportOrderOption . ABOVE ) { <nl> / / previous non - static but current is static <nl> - doVisitToken ( ident , isStatic , isStaticAndNotLastImport ) ; <nl> + doVisitToken ( ident , isStatic , isStaticAndNotLastImport , line ) ; <nl> } <nl> else if ( option = = ImportOrderOption . UNDER ) { <nl> - doVisitToken ( ident , isStatic , isLastImportAndNonStatic ) ; <nl> + doVisitToken ( ident , isStatic , isLastImportAndNonStatic , line ) ; <nl> } <nl> else if ( option = = ImportOrderOption . INFLOW ) { <nl> / / " previous " argument is useless here <nl> - doVisitToken ( ident , isStatic , true ) ; <nl> + doVisitToken ( ident , isStatic , true , line ) ; <nl> } <nl> else { <nl> throw new IllegalStateException ( <nl> @ @ - 429 , 12 + 430 , 11 @ @ public class ImportOrderCheck <nl> * @ param isStatic whether the token is static or not . <nl> * @ param previous previous non - static but current is static ( above ) , or <nl> * previous static but current is non - static ( under ) . <nl> + * @ param line the line of the current import . <nl> * / <nl> - private void doVisitToken ( FullIdent ident , boolean isStatic , <nl> - boolean previous ) { <nl> + private void doVisitToken ( FullIdent ident , boolean isStatic , boolean previous , int line ) { <nl> final String name = ident . getText ( ) ; <nl> final int groupIdx = getGroupNumber ( name ) ; <nl> - final int line = ident . getLineNo ( ) ; <nl> <nl> if ( groupIdx > lastGroup ) { <nl> if ( ! beforeFirstImport & & separated & & line - lastImportLine < 2 <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> index 9587a2b . . 02f9935 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> @ @ - 77 , 6 + 77 , 14 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testMultilineImport ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , getNonCompilablePath ( " InputImportOrderMultiline . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testGroups ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; <nl> checkConfig . addAttribute ( " groups " , " java . awt " ) ; <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderMultiline . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderMultiline . java <nl> new file mode 100644 <nl> index 0000000 . . 2d66fd0 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderMultiline . java <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; <nl> + / * * <nl> + * This test - input is intended to be checked using following configuration : <nl> + * <nl> + * caseSensitive = true <nl> + * groups = { } <nl> + * option = UNDER <nl> + * ordered = true <nl> + * separated = false <nl> + * sortStaticImportsAlphabetically = false <nl> + * useContainerOrderingForStatic = false <nl> + * <nl> + * / <nl> + import <nl> + java . awt . Button ; <nl> + import java . awt . Dialog <nl> + ; <nl> + import <nl> + java . awt . Frame ; <nl> + import java <nl> + . awt . event . <nl> + ActionEvent <nl> + ; <nl> + import <nl> + java . io . File <nl> + ; <nl> + import java . <nl> + io . <nl> + IOException ; <nl> + import java . io . InputStream ; <nl> + import <nl> + static java . awt . Button . ABORT ; <nl> + import static <nl> + java . io . File . createTempFile ; <nl> + import static javax . swing <nl> + . WindowConstants . * <nl> + ; <nl> + public class InputImportOrderMultiline { <nl> + }

TEST DIFF:
diff - - git a / . ci / copy - site - to - sourceforge . sh b / . ci / copy - site - to - sourceforge . sh 
 index d178738 . . 100c747 100755 
 - - - a / . ci / copy - site - to - sourceforge . sh 
 + + + b / . ci / copy - site - to - sourceforge . sh 
 @ @ - 48 , 6 + 48 , 8 @ @ tar - xzvf checkstyle . github . io . tar . gz 
 mv htdocs htdocs - $ PREV _ RELEASE 
 mv checkstyle . github . io htdocs 
 ln - s / home / project - web / checkstyle / reports htdocs / reports 
 + echo " remove dtds folder from unsecure web site " 
 + rm - r htdocs / dtds 
 echo " restore folder with links to old releases " 
 mv htdocs - $ PREV _ RELEASE / version htdocs 


NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index d028f6f . . 1fc67c1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 361 , 6 + 361 , 7 @ @ public class ImportOrderCheck 
 / / - @ cs [ CyclomaticComplexity ] SWITCH was transformed into IF - ELSE . 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 + final int line = ast . getLineNo ( ) ; 
 final FullIdent ident ; 
 final boolean isStatic ; 
 
 @ @ - 384 , 7 + 385 , 7 @ @ public class ImportOrderCheck 
 lastGroup = Integer . MIN _ VALUE ; 
 lastImport = " " ; 
 } 
 - doVisitToken ( ident , isStatic , isStaticAndNotLastImport ) ; 
 + doVisitToken ( ident , isStatic , isStaticAndNotLastImport , line ) ; 
 
 if ( isStaticAndNotLastImport & & ! beforeFirstImport ) { 
 log ( ident . getLineNo ( ) , MSG _ ORDERING , ident . getText ( ) ) ; 
 @ @ - 395 , 7 + 396 , 7 @ @ public class ImportOrderCheck 
 lastGroup = Integer . MIN _ VALUE ; 
 lastImport = " " ; 
 } 
 - doVisitToken ( ident , isStatic , isLastImportAndNonStatic ) ; 
 + doVisitToken ( ident , isStatic , isLastImportAndNonStatic , line ) ; 
 
 if ( isLastImportAndNonStatic ) { 
 log ( ident . getLineNo ( ) , MSG _ ORDERING , ident . getText ( ) ) ; 
 @ @ - 403 , 14 + 404 , 14 @ @ public class ImportOrderCheck 
 } 
 else if ( option = = ImportOrderOption . ABOVE ) { 
 / / previous non - static but current is static 
 - doVisitToken ( ident , isStatic , isStaticAndNotLastImport ) ; 
 + doVisitToken ( ident , isStatic , isStaticAndNotLastImport , line ) ; 
 } 
 else if ( option = = ImportOrderOption . UNDER ) { 
 - doVisitToken ( ident , isStatic , isLastImportAndNonStatic ) ; 
 + doVisitToken ( ident , isStatic , isLastImportAndNonStatic , line ) ; 
 } 
 else if ( option = = ImportOrderOption . INFLOW ) { 
 / / " previous " argument is useless here 
 - doVisitToken ( ident , isStatic , true ) ; 
 + doVisitToken ( ident , isStatic , true , line ) ; 
 } 
 else { 
 throw new IllegalStateException ( 
 @ @ - 429 , 12 + 430 , 11 @ @ public class ImportOrderCheck 
 * @ param isStatic whether the token is static or not . 
 * @ param previous previous non - static but current is static ( above ) , or 
 * previous static but current is non - static ( under ) . 
 + * @ param line the line of the current import . 
 * / 
 - private void doVisitToken ( FullIdent ident , boolean isStatic , 
 - boolean previous ) { 
 + private void doVisitToken ( FullIdent ident , boolean isStatic , boolean previous , int line ) { 
 final String name = ident . getText ( ) ; 
 final int groupIdx = getGroupNumber ( name ) ; 
 - final int line = ident . getLineNo ( ) ; 
 
 if ( groupIdx > lastGroup ) { 
 if ( ! beforeFirstImport & & separated & & line - lastImportLine < 2 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 index 9587a2b . . 02f9935 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 @ @ - 77 , 6 + 77 , 14 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testMultilineImport ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , getNonCompilablePath ( " InputImportOrderMultiline . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testGroups ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( ImportOrderCheck . class ) ; 
 checkConfig . addAttribute ( " groups " , " java . awt " ) ; 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderMultiline . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderMultiline . java 
 new file mode 100644 
 index 0000000 . . 2d66fd0 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderMultiline . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; 
 + / * * 
 + * This test - input is intended to be checked using following configuration : 
 + * 
 + * caseSensitive = true 
 + * groups = { } 
 + * option = UNDER 
 + * ordered = true 
 + * separated = false 
 + * sortStaticImportsAlphabetically = false 
 + * useContainerOrderingForStatic = false 
 + * 
 + * / 
 + import 
 + java . awt . Button ; 
 + import java . awt . Dialog 
 + ; 
 + import 
 + java . awt . Frame ; 
 + import java 
 + . awt . event . 
 + ActionEvent 
 + ; 
 + import 
 + java . io . File 
 + ; 
 + import java . 
 + io . 
 + IOException ; 
 + import java . io . InputStream ; 
 + import 
 + static java . awt . Button . ABORT ; 
 + import static 
 + java . io . File . createTempFile ; 
 + import static javax . swing 
 + . WindowConstants . * 
 + ; 
 + public class InputImportOrderMultiline { 
 + }
