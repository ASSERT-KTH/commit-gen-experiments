BLEU SCORE: 0.05448844552389354

TEST MSG: Issue # 4592 : Added AbstractPathTestSupport and CheckstyleAntTaskTest , SuppressionsLoaderTest now extends from it
GENERATED MSG: Issue # 4400 : increase coverage of pitest - checkstyle - common profile to 95 %

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractPathTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractPathTestSupport . java <nl> new file mode 100644 <nl> index 0000000 . . ad8f167 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractPathTestSupport . java <nl> @ @ - 0 , 0 + 1 , 45 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + public abstract class AbstractPathTestSupport { <nl> + / * * <nl> + * Returns the exact location for the package where the file is present . <nl> + * @ return path for the package name for the file . <nl> + * / <nl> + protected abstract String getPackageLocation ( ) ; <nl> + <nl> + / * * <nl> + * Returns canonical path for the file with the given file name . <nl> + * The path is formed base on the root location . <nl> + * This implementation uses ' src / test / resources / ' <nl> + * as a root location . <nl> + * @ param filename file name . <nl> + * @ return canonical path for the file name . <nl> + * @ throws IOException if I / O exception occurs while forming the path . <nl> + * / <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return new File ( " src / test / resources / " + getPackageLocation ( ) + " / " + filename ) <nl> + . getCanonicalPath ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> index fa40d3e . . 19f2f2f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> @ @ - 58 , 7 + 58 , 7 @ @ import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> import com . google . common . io . Closeables ; <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . AbstractPathTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . CheckerStub ; <nl> import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> import com . puppycrawl . tools . checkstyle . Definitions ; <nl> @ @ - 70 , 22 + 70 , 26 @ @ import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> <nl> @ RunWith ( PowerMockRunner . class ) <nl> @ PrepareForTest ( { CheckstyleAntTask . class , Closeables . class } ) <nl> - public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> + public class CheckstyleAntTaskTest extends AbstractPathTestSupport { <nl> <nl> private static final String FLAWLESS _ INPUT = <nl> - " / ant / checkstyleanttask / InputCheckstyleAntTaskFlawless . java " ; <nl> + " InputCheckstyleAntTaskFlawless . java " ; <nl> private static final String VIOLATED _ INPUT = <nl> - " ant / checkstyleanttask / InputCheckstyleAntTaskError . java " ; <nl> + " InputCheckstyleAntTaskError . java " ; <nl> private static final String WARNING _ INPUT = <nl> - " ant / checkstyleanttask / InputCheckstyleAntTaskWarning . java " ; <nl> + " InputCheckstyleAntTaskWarning . java " ; <nl> private static final String CONFIG _ FILE = <nl> - " ant / checkstyleanttask / InputCheckstyleAntTaskTestChecks . xml " ; <nl> - private static final String CONFIG _ RESOURCE = " / com / puppycrawl / tools / checkstyle / " + CONFIG _ FILE ; <nl> + " InputCheckstyleAntTaskTestChecks . xml " ; <nl> private static final String CUSTOM _ ROOT _ CONFIG _ FILE = <nl> - " ant / checkstyleanttask / InputCheckstyleAntTaskConfigCustomRootModule . xml " ; <nl> + " InputCheckstyleAntTaskConfigCustomRootModule . xml " ; <nl> private static final String NOT _ EXISTING _ FILE = " target / not _ existing . xml " ; <nl> private static final String FAILURE _ PROPERTY _ VALUE = " myValue " ; <nl> <nl> + @ Override <nl> + protected String getPackageLocation ( ) { <nl> + return " com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / " ; <nl> + } <nl> + <nl> private CheckstyleAntTask getCheckstyleAntTask ( ) throws IOException { <nl> return getCheckstyleAntTask ( CONFIG _ FILE ) ; <nl> } <nl> @ @ - 181 , 7 + 185 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> antTask . setProject ( new Project ( ) ) ; <nl> <nl> final FileResource fileResource = new FileResource ( <nl> - antTask . getProject ( ) , getPath ( " ant / checkstyleanttask / " ) ) ; <nl> + antTask . getProject ( ) , getPath ( " " ) ) ; <nl> final Path sourcePath = new Path ( antTask . getProject ( ) ) ; <nl> sourcePath . add ( fileResource ) ; <nl> antTask . addPath ( sourcePath ) ; <nl> @ @ - 265 , 7 + 269 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> @ Test <nl> public final void testEmptyConfigFile ( ) throws IOException { <nl> final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; <nl> - antTask . setConfig ( getPath ( " ant / InputCheckstyleAntTaskEmptyConfig . xml " ) ) ; <nl> + antTask . setConfig ( getPath ( " InputCheckstyleAntTaskEmptyConfig . xml " ) ) ; <nl> antTask . setProject ( new Project ( ) ) ; <nl> antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> try { <nl> @ @ - 430 , 7 + 434 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> public final void testConfigurationByResource ( ) throws IOException { <nl> final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; <nl> antTask . setProject ( new Project ( ) ) ; <nl> - antTask . setConfig ( CONFIG _ RESOURCE ) ; <nl> + antTask . setConfig ( getPath ( CONFIG _ FILE ) ) ; <nl> antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; <nl> <nl> final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; <nl> @ @ - 477 , 8 + 481 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> <nl> final CheckstyleAntTask antTask = getCheckstyleAntTask ( CUSTOM _ ROOT _ CONFIG _ FILE ) ; <nl> antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; <nl> - antTask . setProperties ( new File ( getPath ( " ant / checkstyleanttask / " <nl> - + " InputCheckstyleAntTaskCheckstyleAntTest . properties " ) ) ) ; <nl> + antTask . setProperties ( new File ( getPath ( <nl> + " InputCheckstyleAntTaskCheckstyleAntTest . properties " ) ) ) ; <nl> antTask . execute ( ) ; <nl> <nl> assertEquals ( " Property is not set " , <nl> @ @ - 517 , 7 + 521 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> antTask . execute ( ) ; <nl> <nl> final List < String > expected = FileUtils . readLines ( <nl> - new File ( getPath ( " ant / checkstyleanttask / InputCheckstyleAntTaskXmlOutput . xml " ) ) ) ; <nl> + new File ( getPath ( " InputCheckstyleAntTaskXmlOutput . xml " ) ) ) ; <nl> final List < String > actual = FileUtils . readLines ( outputFile ) ; <nl> for ( int i = 0 ; i < expected . size ( ) ; i + + ) { <nl> final String line = expected . get ( i ) ; <nl> @ @ - 591 , 7 + 595 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> <nl> @ Test <nl> public void testSetFileValueByFile ( ) throws IOException { <nl> - final String filename = getPath ( " ant / InputCheckstyleAntTaskCheckstyleAntTest . properties " ) ; <nl> + final String filename = getPath ( " InputCheckstyleAntTaskCheckstyleAntTest . properties " ) ; <nl> final CheckstyleAntTask . Property property = new CheckstyleAntTask . Property ( ) ; <nl> property . setFile ( new File ( filename ) ) ; <nl> assertEquals ( " File path is unexpected " , <nl> @ @ - 727 , 8 + 731 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> CheckerStub . reset ( ) ; <nl> <nl> final CheckstyleAntTask antTask = <nl> - getCheckstyleAntTask ( " ant / checkstyleanttask / " <nl> - + " InputCheckstyleAntTaskConfigCustomCheckerRootModule . xml " ) ; <nl> + getCheckstyleAntTask ( <nl> + " InputCheckstyleAntTaskConfigCustomCheckerRootModule . xml " ) ; <nl> antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; <nl> <nl> antTask . execute ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java <nl> index 8b6e127 . . 17fd097 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java <nl> @ @ - 36 , 7 + 36 , 7 @ @ import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> import org . xml . sax . InputSource ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . AbstractPathTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . FilterSet ; <nl> <nl> @ @ - 47 , 18 + 47 , 17 @ @ import com . puppycrawl . tools . checkstyle . api . FilterSet ; <nl> * / <nl> @ RunWith ( PowerMockRunner . class ) <nl> @ PrepareForTest ( { SuppressionsLoader . class , SuppressionsLoaderTest . class } ) <nl> - public class SuppressionsLoaderTest extends BaseCheckTestSupport { <nl> + public class SuppressionsLoaderTest extends AbstractPathTestSupport { <nl> @ Rule <nl> public final ExpectedException thrown = ExpectedException . none ( ) ; <nl> <nl> @ Override <nl> - protected String getPath ( String filename ) { <nl> - return " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " + filename ; <nl> + protected String getPackageLocation ( ) { <nl> + return " com / puppycrawl / tools / checkstyle / filters " ; <nl> } <nl> <nl> @ Test <nl> - public void testNoSuppressions ( ) <nl> - throws CheckstyleException { <nl> + public void testNoSuppressions ( ) throws Exception { <nl> final FilterSet fc = <nl> SuppressionsLoader . loadSuppressions ( getPath ( " suppressions _ none . xml " ) ) ; <nl> final FilterSet fc2 = new FilterSet ( ) ; <nl> @ @ - 114 , 8 + 113 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testMultipleSuppression ( ) <nl> - throws CheckstyleException { <nl> + public void testMultipleSuppression ( ) throws Exception { <nl> final FilterSet fc = <nl> SuppressionsLoader . loadSuppressions ( getPath ( " suppressions _ multiple . xml " ) ) ; <nl> final FilterSet fc2 = new FilterSet ( ) ; <nl> @ @ - 139 , 7 + 137 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testNoFile ( ) { <nl> + public void testNoFile ( ) throws IOException { <nl> final String fn = getPath ( " suppressions _ no _ file . xml " ) ; <nl> try { <nl> SuppressionsLoader . loadSuppressions ( fn ) ; <nl> @ @ - 156 , 7 + 154 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testNoCheck ( ) { <nl> + public void testNoCheck ( ) throws IOException { <nl> final String fn = getPath ( " suppressions _ no _ check . xml " ) ; <nl> try { <nl> SuppressionsLoader . loadSuppressions ( fn ) ; <nl> @ @ - 173 , 7 + 171 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testBadInt ( ) { <nl> + public void testBadInt ( ) throws IOException { <nl> final String fn = getPath ( " suppressions _ bad _ int . xml " ) ; <nl> try { <nl> SuppressionsLoader . loadSuppressions ( fn ) ; <nl> @ @ - 259 , 7 + 257 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testNoCheckNoId ( ) { <nl> + public void testNoCheckNoId ( ) throws IOException { <nl> final String fn = getPath ( " suppressions _ no _ check _ and _ id . xml " ) ; <nl> try { <nl> SuppressionsLoader . loadSuppressions ( fn ) ; <nl> @ @ - 280 , 7 + 278 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testInvalidFileFormat ( ) { <nl> + public void testInvalidFileFormat ( ) throws IOException { <nl> final String fn = getPath ( " suppressions _ invalid _ file . xml " ) ; <nl> try { <nl> SuppressionsLoader . loadSuppressions ( fn ) ; <nl> @ @ - 293 , 8 + 291 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testLoadFromClasspath ( ) <nl> - throws CheckstyleException { <nl> + public void testLoadFromClasspath ( ) throws Exception { <nl> final FilterSet fc = <nl> SuppressionsLoader . loadSuppressions ( getPath ( " suppressions _ none . xml " ) ) ; <nl> final FilterSet fc2 = new FilterSet ( ) ;
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 300ba6e . . 4240b62 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2081 , 8 + 2081 , 23 @ @ <nl> < / targetClasses > <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . utils . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . AstTreeStringPrinterTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . DetailNodeTreeStringPrinterTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . PackageObjectFactoryTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . FinalParametersCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . TranslationCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . coding . MultipleVariableDeclarationsCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . design . FinalClassCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . javadoc . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . regexp . RegexpOnFilenameCheckTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . checks . whitespace . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . filters . SuppressionCommentFilter < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . filters . SuppressWithNearbyCommentFilterTest < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . internal . AllChecksTest < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 67 < / mutationThreshold > <nl> + < mutationThreshold > 99 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java <nl> index 1fd6561 . . a1703a0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . utils ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> import java . lang . reflect . InvocationTargetException ; <nl> <nl> @ @ - 91 , 7 + 92 , 7 @ @ public class AnnotationUtilityTest { <nl> final DetailAST ast3 = new DetailAST ( ) ; <nl> ast3 . setType ( TokenTypes . ANNOTATION ) ; <nl> ast2 . addChild ( ast3 ) ; <nl> - Assert . assertTrue ( AnnotationUtility . containsAnnotation ( ast ) ) ; <nl> + assertTrue ( AnnotationUtility . containsAnnotation ( ast ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 137 , 4 + 138 , 37 @ @ public class AnnotationUtilityTest { <nl> assertEquals ( " the annotation is empty or spaces " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void testContainsAnnotationWithNull ( ) { <nl> + try { <nl> + AnnotationUtility . getAnnotation ( null , " " ) ; <nl> + Assert . fail ( " IllegalArgumentException is expected " ) ; <nl> + } <nl> + catch ( IllegalArgumentException ex ) { <nl> + assertEquals ( " the ast is null " , ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testContainsAnnotation ( ) { <nl> + final DetailAST astForTest = new DetailAST ( ) ; <nl> + astForTest . setType ( TokenTypes . PACKAGE _ DEF ) ; <nl> + final DetailAST child = new DetailAST ( ) ; <nl> + final DetailAST annotations = new DetailAST ( ) ; <nl> + final DetailAST annotation = new DetailAST ( ) ; <nl> + final DetailAST annotationNameHolder = new DetailAST ( ) ; <nl> + final DetailAST annotationName = new DetailAST ( ) ; <nl> + annotations . setType ( TokenTypes . ANNOTATIONS ) ; <nl> + annotation . setType ( TokenTypes . ANNOTATION ) ; <nl> + annotationName . setText ( " Annotation " ) ; <nl> + <nl> + annotationNameHolder . setNextSibling ( annotationName ) ; <nl> + annotation . setFirstChild ( annotationNameHolder ) ; <nl> + annotations . setFirstChild ( annotation ) ; <nl> + child . setNextSibling ( annotations ) ; <nl> + astForTest . setFirstChild ( child ) ; <nl> + <nl> + assertTrue ( AnnotationUtility . containsAnnotation ( astForTest , " Annotation " ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java <nl> new file mode 100644 <nl> index 0000000 . . ecda34a <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java <nl> @ @ - 0 , 0 + 1 , 115 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . utils ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + import java . util . function . Function ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; <nl> + <nl> + public class BlockCommentPositionTest { <nl> + <nl> + @ Test <nl> + public void testJavaDocsRecognition ( ) throws Exception { <nl> + final List < BlockCommentPositionTestMetadata > metadataList = Arrays . asList ( <nl> + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnClass . java " , <nl> + BlockCommentPosition : : isOnClass , 3 ) , <nl> + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnMethod . java " , <nl> + BlockCommentPosition : : isOnMethod , 3 ) , <nl> + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnField . java " , <nl> + BlockCommentPosition : : isOnField , 3 ) , <nl> + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnEnum . java " , <nl> + BlockCommentPosition : : isOnEnum , 3 ) , <nl> + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnConstructor . java " , <nl> + BlockCommentPosition : : isOnConstructor , 3 ) , <nl> + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnInterface . java " , <nl> + BlockCommentPosition : : isOnInterface , 3 ) , <nl> + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnAnnotation . java " , <nl> + BlockCommentPosition : : isOnAnnotationDef , 3 ) , <nl> + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnEnumMember . java " , <nl> + BlockCommentPosition : : isOnEnumConstant , 2 ) <nl> + ) ; <nl> + <nl> + for ( BlockCommentPositionTestMetadata metadata : metadataList ) { <nl> + final DetailAST ast = TestUtils . parseFile ( <nl> + new File ( getPath ( metadata . getFileName ( ) ) ) <nl> + ) ; <nl> + final int matches = getJavadocsCount ( ast , metadata . getAssertion ( ) ) ; <nl> + assertEquals ( metadata . getMatchesNum ( ) , matches ) ; <nl> + } <nl> + } <nl> + <nl> + private static int getJavadocsCount ( DetailAST detailAST , <nl> + Function < DetailAST , Boolean > assertion ) { <nl> + int matchFound = 0 ; <nl> + DetailAST node = detailAST ; <nl> + while ( node ! = null ) { <nl> + if ( node . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN <nl> + & & JavadocUtils . isJavadocComment ( node ) ) { <nl> + if ( ! assertion . apply ( node ) ) { <nl> + throw new IllegalStateException ( " Position of comment is defined correctly " ) ; <nl> + } <nl> + matchFound + + ; <nl> + } <nl> + matchFound + = getJavadocsCount ( node . getFirstChild ( ) , assertion ) ; <nl> + node = node . getNextSibling ( ) ; <nl> + } <nl> + return matchFound ; <nl> + } <nl> + <nl> + private static String getPath ( String filename ) { <nl> + return " src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / " <nl> + + filename ; <nl> + } <nl> + <nl> + private static final class BlockCommentPositionTestMetadata { <nl> + <nl> + private final String fileName ; <nl> + private final Function < DetailAST , Boolean > assertion ; <nl> + private final int matchesNum ; <nl> + <nl> + private BlockCommentPositionTestMetadata ( String fileName , Function < DetailAST , <nl> + Boolean > assertion , int matchesNum ) { <nl> + this . fileName = fileName ; <nl> + this . assertion = assertion ; <nl> + this . matchesNum = matchesNum ; <nl> + } <nl> + <nl> + public String getFileName ( ) { <nl> + return fileName ; <nl> + } <nl> + <nl> + public Function < DetailAST , Boolean > getAssertion ( ) { <nl> + return assertion ; <nl> + } <nl> + <nl> + public int getMatchesNum ( ) { <nl> + return matchesNum ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java <nl> index c3f49fb . . 5df378e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . Comment ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; <nl> @ @ - 247 , 4 + 248 , 40 @ @ public class JavadocUtilsTest { <nl> assertEquals ( " Unknown javadoc token name . Given name " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void testGetTokenId ( ) { <nl> + final int tokenId = JavadocUtils . getTokenId ( " JAVADOC " ) ; <nl> + <nl> + assertEquals ( JavadocTokenTypes . JAVADOC , tokenId ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetJavadocCommentContent ( ) { <nl> + final DetailAST detailAST = new DetailAST ( ) ; <nl> + final DetailAST javadoc = new DetailAST ( ) ; <nl> + <nl> + javadoc . setText ( " 1javadoc " ) ; <nl> + detailAST . setFirstChild ( javadoc ) ; <nl> + final String commentContent = JavadocUtils . getJavadocCommentContent ( detailAST ) ; <nl> + <nl> + assertEquals ( " javadoc " , commentContent ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetFirstToken ( ) { <nl> + final JavadocNodeImpl javadocNode = new JavadocNodeImpl ( ) ; <nl> + final JavadocNodeImpl basetag = new JavadocNodeImpl ( ) ; <nl> + basetag . setType ( JavadocTokenTypes . BASE _ TAG ) ; <nl> + final JavadocNodeImpl body = new JavadocNodeImpl ( ) ; <nl> + body . setType ( JavadocTokenTypes . BODY ) ; <nl> + <nl> + body . setParent ( javadocNode ) ; <nl> + basetag . setParent ( javadocNode ) ; <nl> + javadocNode . setChildren ( basetag , body ) ; <nl> + <nl> + final DetailNode result = JavadocUtils . findFirstToken ( javadocNode , JavadocTokenTypes . BODY ) ; <nl> + <nl> + assertEquals ( body , result ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java <nl> index c6b63ce . . 7c480d1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java <nl> @ @ - 26 , 9 + 26 , 12 @ @ import static org . junit . Assert . fail ; <nl> <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . Modifier ; <nl> + import java . util . Arrays ; <nl> + import java . util . Optional ; <nl> <nl> import org . junit . Test ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class TokenUtilsTest { <nl> @ @ - 62 , 14 + 65 , 45 @ @ public class TokenUtilsTest { <nl> } <nl> <nl> @ Test <nl> - public void testTokenValueIncorrect ( ) { <nl> - final Integer id = Integer . MAX _ VALUE - 1 ; <nl> + public void testTokenValueIncorrect ( ) throws IllegalAccessException { <nl> + int maxId = 0 ; <nl> + final Field [ ] fields = TokenTypes . class . getDeclaredFields ( ) ; <nl> + for ( final Field field : fields ) { <nl> + / / Only process the int declarations . <nl> + if ( field . getType ( ) ! = Integer . TYPE ) { <nl> + continue ; <nl> + } <nl> + <nl> + final String name = field . getName ( ) ; <nl> + final int id = field . getInt ( name ) ; <nl> + if ( id > maxId ) { <nl> + maxId = id ; <nl> + } <nl> + } <nl> + <nl> + final int nextAfterMaxId = maxId + 1 ; <nl> try { <nl> - TokenUtils . getTokenName ( id ) ; <nl> + TokenUtils . getTokenName ( nextAfterMaxId ) ; <nl> fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException expected ) { <nl> - assertEquals ( " given id " + id , expected . getMessage ( ) ) ; <nl> + assertEquals ( " given id " + nextAfterMaxId , expected . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testTokenValueCorrect ( ) throws IllegalAccessException { <nl> + final Field [ ] fields = TokenTypes . class . getDeclaredFields ( ) ; <nl> + for ( final Field field : fields ) { <nl> + / / Only process the int declarations . <nl> + if ( field . getType ( ) ! = Integer . TYPE ) { <nl> + continue ; <nl> + } <nl> + <nl> + final String name = field . getName ( ) ; <nl> + final int id = field . getInt ( name ) ; <nl> + <nl> + assertEquals ( name , TokenUtils . getTokenName ( id ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 138 , 6 + 172 , 66 @ @ public class TokenUtilsTest { <nl> assertTrue ( TokenUtils . isCommentType ( TokenTypes . BLOCK _ COMMENT _ BEGIN ) ) ; <nl> assertTrue ( TokenUtils . isCommentType ( TokenTypes . BLOCK _ COMMENT _ END ) ) ; <nl> assertTrue ( TokenUtils . isCommentType ( TokenTypes . COMMENT _ CONTENT ) ) ; <nl> + assertTrue ( TokenUtils . isCommentType ( " COMMENT _ CONTENT " ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void tetsGetTokenTypesTotalNumber ( ) { <nl> + final int tokenTypesTotalNumber = TokenUtils . getTokenTypesTotalNumber ( ) ; <nl> + <nl> + assertEquals ( 169 , tokenTypesTotalNumber ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetAllTokenIds ( ) { <nl> + final int [ ] allTokenIds = TokenUtils . getAllTokenIds ( ) ; <nl> + final int sum = Arrays . stream ( allTokenIds ) . sum ( ) ; <nl> + <nl> + assertEquals ( 169 , allTokenIds . length ) ; <nl> + assertEquals ( 15662 , sum ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetTokenNameWithGreatestPossibleId ( ) { <nl> + final Integer id = TokenTypes . COMMENT _ CONTENT ; <nl> + final String tokenName = TokenUtils . getTokenName ( id ) ; <nl> + <nl> + assertEquals ( " COMMENT _ CONTENT " , tokenName ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCorrectBehaviourOfGetTokenId ( ) { <nl> + final String id = " EOF " ; <nl> + <nl> + assertEquals ( TokenTypes . EOF , TokenUtils . getTokenId ( id ) ) ; <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testCorrectBehaviourOfShortDescription ( ) { <nl> + final String id = " EOF " ; <nl> + final String shortDescription = TokenUtils . getShortDescription ( id ) ; <nl> + <nl> + assertEquals ( " The end of file token . " , shortDescription ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFindFirstTokenByPredicate ( ) { <nl> + final DetailAST astForTest = new DetailAST ( ) ; <nl> + final DetailAST child = new DetailAST ( ) ; <nl> + final DetailAST firstSibling = new DetailAST ( ) ; <nl> + final DetailAST secondSibling = new DetailAST ( ) ; <nl> + final DetailAST thirdSibling = new DetailAST ( ) ; <nl> + firstSibling . setText ( " first " ) ; <nl> + secondSibling . setText ( " second " ) ; <nl> + thirdSibling . setText ( " third " ) ; <nl> + secondSibling . setNextSibling ( thirdSibling ) ; <nl> + firstSibling . setNextSibling ( secondSibling ) ; <nl> + child . setNextSibling ( firstSibling ) ; <nl> + astForTest . setFirstChild ( child ) ; <nl> + final Optional < DetailAST > result = TokenUtils . findFirstTokenByPredicate ( astForTest , <nl> + ast - > " second " . equals ( ast . getText ( ) ) ) ; <nl> + <nl> + assertEquals ( secondSibling , result . get ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnAnnotation . java <nl> new file mode 100644 <nl> index 0000000 . . ca82df7 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnAnnotation . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + public @ interface InputBlockCommentPositionOnAnnotation { <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + @ interface InputBlockCommentPositionOnAnnotation1 { <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + @ Deprecated <nl> + @ interface InputBlockCommentPositionOnAnnotation2 { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnClass . java <nl> new file mode 100644 <nl> index 0000000 . . 69f4877 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnClass . java <nl> @ @ - 0 , 0 + 1 , 23 @ @ <nl> + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + public class InputBlockCommentPositionOnClass { <nl> + <nl> + } <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + class JavaDocOnClass1 { <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + @ Deprecated <nl> + class JavaDocOnClass2 { <nl> + } <nl> + <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnConstructor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnConstructor . java <nl> new file mode 100644 <nl> index 0000000 . . 85b0b37 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnConstructor . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; <nl> + <nl> + <nl> + public class InputBlockCommentPositionOnConstructor { <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + public InputBlockCommentPositionOnConstructor ( ) { <nl> + <nl> + } <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + InputBlockCommentPositionOnConstructor ( int a ) { <nl> + <nl> + } <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + @ Deprecated <nl> + public InputBlockCommentPositionOnConstructor ( String s ) { <nl> + <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnEnum . java <nl> new file mode 100644 <nl> index 0000000 . . 0e0816f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnEnum . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + public enum InputBlockCommentPositionOnEnum { <nl> + } <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + enum BlockCommentPositionOnEnumInput1 { <nl> + } <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + @ Deprecated <nl> + enum BlockCommentPositionOnEnumInput2 { <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnEnumMember . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnEnumMember . java <nl> new file mode 100644 <nl> index 0000000 . . e96a22e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnEnumMember . java <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; <nl> + <nl> + <nl> + public enum InputBlockCommentPositionOnEnumMember { <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + A , <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + @ Deprecated <nl> + B , <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnField . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnField . java <nl> new file mode 100644 <nl> index 0000000 . . ef3bc55 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnField . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; <nl> + <nl> + public class InputBlockCommentPositionOnField { <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + int a ; <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + private int b ; <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + @ Deprecated <nl> + int c ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnInterface . java <nl> new file mode 100644 <nl> index 0000000 . . 8692d89 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnInterface . java <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + public interface InputBlockCommentPositionOnInterface { <nl> + } <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + interface InputBlockCommentPositionOnInterface1 { <nl> + } <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + @ Deprecated <nl> + interface InputBlockCommentPositionOnInterface2 { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnMethod . java <nl> new file mode 100644 <nl> index 0000000 . . e2b5a0b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnMethod . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; <nl> + <nl> + public class InputBlockCommentPositionOnMethod { <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + int method ( ) { <nl> + return 0 ; <nl> + } <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + public int method1 ( ) { <nl> + return 0 ; <nl> + } <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + @ Deprecated <nl> + int method2 ( ) { <nl> + return 0 ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractPathTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractPathTestSupport . java 
 new file mode 100644 
 index 0000000 . . ad8f167 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractPathTestSupport . java 
 @ @ - 0 , 0 + 1 , 45 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + public abstract class AbstractPathTestSupport { 
 + / * * 
 + * Returns the exact location for the package where the file is present . 
 + * @ return path for the package name for the file . 
 + * / 
 + protected abstract String getPackageLocation ( ) ; 
 + 
 + / * * 
 + * Returns canonical path for the file with the given file name . 
 + * The path is formed base on the root location . 
 + * This implementation uses ' src / test / resources / ' 
 + * as a root location . 
 + * @ param filename file name . 
 + * @ return canonical path for the file name . 
 + * @ throws IOException if I / O exception occurs while forming the path . 
 + * / 
 + protected String getPath ( String filename ) throws IOException { 
 + return new File ( " src / test / resources / " + getPackageLocation ( ) + " / " + filename ) 
 + . getCanonicalPath ( ) ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 index fa40d3e . . 19f2f2f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 @ @ - 58 , 7 + 58 , 7 @ @ import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 import com . google . common . io . Closeables ; 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . AbstractPathTestSupport ; 
 import com . puppycrawl . tools . checkstyle . CheckerStub ; 
 import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 import com . puppycrawl . tools . checkstyle . Definitions ; 
 @ @ - 70 , 22 + 70 , 26 @ @ import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 
 @ RunWith ( PowerMockRunner . class ) 
 @ PrepareForTest ( { CheckstyleAntTask . class , Closeables . class } ) 
 - public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 + public class CheckstyleAntTaskTest extends AbstractPathTestSupport { 
 
 private static final String FLAWLESS _ INPUT = 
 - " / ant / checkstyleanttask / InputCheckstyleAntTaskFlawless . java " ; 
 + " InputCheckstyleAntTaskFlawless . java " ; 
 private static final String VIOLATED _ INPUT = 
 - " ant / checkstyleanttask / InputCheckstyleAntTaskError . java " ; 
 + " InputCheckstyleAntTaskError . java " ; 
 private static final String WARNING _ INPUT = 
 - " ant / checkstyleanttask / InputCheckstyleAntTaskWarning . java " ; 
 + " InputCheckstyleAntTaskWarning . java " ; 
 private static final String CONFIG _ FILE = 
 - " ant / checkstyleanttask / InputCheckstyleAntTaskTestChecks . xml " ; 
 - private static final String CONFIG _ RESOURCE = " / com / puppycrawl / tools / checkstyle / " + CONFIG _ FILE ; 
 + " InputCheckstyleAntTaskTestChecks . xml " ; 
 private static final String CUSTOM _ ROOT _ CONFIG _ FILE = 
 - " ant / checkstyleanttask / InputCheckstyleAntTaskConfigCustomRootModule . xml " ; 
 + " InputCheckstyleAntTaskConfigCustomRootModule . xml " ; 
 private static final String NOT _ EXISTING _ FILE = " target / not _ existing . xml " ; 
 private static final String FAILURE _ PROPERTY _ VALUE = " myValue " ; 
 
 + @ Override 
 + protected String getPackageLocation ( ) { 
 + return " com / puppycrawl / tools / checkstyle / ant / checkstyleanttask / " ; 
 + } 
 + 
 private CheckstyleAntTask getCheckstyleAntTask ( ) throws IOException { 
 return getCheckstyleAntTask ( CONFIG _ FILE ) ; 
 } 
 @ @ - 181 , 7 + 185 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 antTask . setProject ( new Project ( ) ) ; 
 
 final FileResource fileResource = new FileResource ( 
 - antTask . getProject ( ) , getPath ( " ant / checkstyleanttask / " ) ) ; 
 + antTask . getProject ( ) , getPath ( " " ) ) ; 
 final Path sourcePath = new Path ( antTask . getProject ( ) ) ; 
 sourcePath . add ( fileResource ) ; 
 antTask . addPath ( sourcePath ) ; 
 @ @ - 265 , 7 + 269 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 @ Test 
 public final void testEmptyConfigFile ( ) throws IOException { 
 final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; 
 - antTask . setConfig ( getPath ( " ant / InputCheckstyleAntTaskEmptyConfig . xml " ) ) ; 
 + antTask . setConfig ( getPath ( " InputCheckstyleAntTaskEmptyConfig . xml " ) ) ; 
 antTask . setProject ( new Project ( ) ) ; 
 antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 try { 
 @ @ - 430 , 7 + 434 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 public final void testConfigurationByResource ( ) throws IOException { 
 final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; 
 antTask . setProject ( new Project ( ) ) ; 
 - antTask . setConfig ( CONFIG _ RESOURCE ) ; 
 + antTask . setConfig ( getPath ( CONFIG _ FILE ) ) ; 
 antTask . setFile ( new File ( getPath ( FLAWLESS _ INPUT ) ) ) ; 
 
 final CheckstyleAntTask . Formatter formatter = new CheckstyleAntTask . Formatter ( ) ; 
 @ @ - 477 , 8 + 481 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 
 final CheckstyleAntTask antTask = getCheckstyleAntTask ( CUSTOM _ ROOT _ CONFIG _ FILE ) ; 
 antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; 
 - antTask . setProperties ( new File ( getPath ( " ant / checkstyleanttask / " 
 - + " InputCheckstyleAntTaskCheckstyleAntTest . properties " ) ) ) ; 
 + antTask . setProperties ( new File ( getPath ( 
 + " InputCheckstyleAntTaskCheckstyleAntTest . properties " ) ) ) ; 
 antTask . execute ( ) ; 
 
 assertEquals ( " Property is not set " , 
 @ @ - 517 , 7 + 521 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 antTask . execute ( ) ; 
 
 final List < String > expected = FileUtils . readLines ( 
 - new File ( getPath ( " ant / checkstyleanttask / InputCheckstyleAntTaskXmlOutput . xml " ) ) ) ; 
 + new File ( getPath ( " InputCheckstyleAntTaskXmlOutput . xml " ) ) ) ; 
 final List < String > actual = FileUtils . readLines ( outputFile ) ; 
 for ( int i = 0 ; i < expected . size ( ) ; i + + ) { 
 final String line = expected . get ( i ) ; 
 @ @ - 591 , 7 + 595 , 7 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 
 @ Test 
 public void testSetFileValueByFile ( ) throws IOException { 
 - final String filename = getPath ( " ant / InputCheckstyleAntTaskCheckstyleAntTest . properties " ) ; 
 + final String filename = getPath ( " InputCheckstyleAntTaskCheckstyleAntTest . properties " ) ; 
 final CheckstyleAntTask . Property property = new CheckstyleAntTask . Property ( ) ; 
 property . setFile ( new File ( filename ) ) ; 
 assertEquals ( " File path is unexpected " , 
 @ @ - 727 , 8 + 731 , 8 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 CheckerStub . reset ( ) ; 
 
 final CheckstyleAntTask antTask = 
 - getCheckstyleAntTask ( " ant / checkstyleanttask / " 
 - + " InputCheckstyleAntTaskConfigCustomCheckerRootModule . xml " ) ; 
 + getCheckstyleAntTask ( 
 + " InputCheckstyleAntTaskConfigCustomCheckerRootModule . xml " ) ; 
 antTask . setFile ( new File ( getPath ( VIOLATED _ INPUT ) ) ) ; 
 
 antTask . execute ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java 
 index 8b6e127 . . 17fd097 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java 
 @ @ - 36 , 7 + 36 , 7 @ @ import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 import org . xml . sax . InputSource ; 
 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . AbstractPathTestSupport ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . FilterSet ; 
 
 @ @ - 47 , 18 + 47 , 17 @ @ import com . puppycrawl . tools . checkstyle . api . FilterSet ; 
 * / 
 @ RunWith ( PowerMockRunner . class ) 
 @ PrepareForTest ( { SuppressionsLoader . class , SuppressionsLoaderTest . class } ) 
 - public class SuppressionsLoaderTest extends BaseCheckTestSupport { 
 + public class SuppressionsLoaderTest extends AbstractPathTestSupport { 
 @ Rule 
 public final ExpectedException thrown = ExpectedException . none ( ) ; 
 
 @ Override 
 - protected String getPath ( String filename ) { 
 - return " src / test / resources / com / puppycrawl / tools / checkstyle / filters / " + filename ; 
 + protected String getPackageLocation ( ) { 
 + return " com / puppycrawl / tools / checkstyle / filters " ; 
 } 
 
 @ Test 
 - public void testNoSuppressions ( ) 
 - throws CheckstyleException { 
 + public void testNoSuppressions ( ) throws Exception { 
 final FilterSet fc = 
 SuppressionsLoader . loadSuppressions ( getPath ( " suppressions _ none . xml " ) ) ; 
 final FilterSet fc2 = new FilterSet ( ) ; 
 @ @ - 114 , 8 + 113 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testMultipleSuppression ( ) 
 - throws CheckstyleException { 
 + public void testMultipleSuppression ( ) throws Exception { 
 final FilterSet fc = 
 SuppressionsLoader . loadSuppressions ( getPath ( " suppressions _ multiple . xml " ) ) ; 
 final FilterSet fc2 = new FilterSet ( ) ; 
 @ @ - 139 , 7 + 137 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testNoFile ( ) { 
 + public void testNoFile ( ) throws IOException { 
 final String fn = getPath ( " suppressions _ no _ file . xml " ) ; 
 try { 
 SuppressionsLoader . loadSuppressions ( fn ) ; 
 @ @ - 156 , 7 + 154 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testNoCheck ( ) { 
 + public void testNoCheck ( ) throws IOException { 
 final String fn = getPath ( " suppressions _ no _ check . xml " ) ; 
 try { 
 SuppressionsLoader . loadSuppressions ( fn ) ; 
 @ @ - 173 , 7 + 171 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testBadInt ( ) { 
 + public void testBadInt ( ) throws IOException { 
 final String fn = getPath ( " suppressions _ bad _ int . xml " ) ; 
 try { 
 SuppressionsLoader . loadSuppressions ( fn ) ; 
 @ @ - 259 , 7 + 257 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testNoCheckNoId ( ) { 
 + public void testNoCheckNoId ( ) throws IOException { 
 final String fn = getPath ( " suppressions _ no _ check _ and _ id . xml " ) ; 
 try { 
 SuppressionsLoader . loadSuppressions ( fn ) ; 
 @ @ - 280 , 7 + 278 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testInvalidFileFormat ( ) { 
 + public void testInvalidFileFormat ( ) throws IOException { 
 final String fn = getPath ( " suppressions _ invalid _ file . xml " ) ; 
 try { 
 SuppressionsLoader . loadSuppressions ( fn ) ; 
 @ @ - 293 , 8 + 291 , 7 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testLoadFromClasspath ( ) 
 - throws CheckstyleException { 
 + public void testLoadFromClasspath ( ) throws Exception { 
 final FilterSet fc = 
 SuppressionsLoader . loadSuppressions ( getPath ( " suppressions _ none . xml " ) ) ; 
 final FilterSet fc2 = new FilterSet ( ) ;

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 300ba6e . . 4240b62 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2081 , 8 + 2081 , 23 @ @ 
 < / targetClasses > 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . utils . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . AstTreeStringPrinterTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . DetailNodeTreeStringPrinterTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . PackageObjectFactoryTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . FinalParametersCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . TranslationCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . coding . MultipleVariableDeclarationsCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . design . FinalClassCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . javadoc . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . regexp . RegexpOnFilenameCheckTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . checks . whitespace . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . filters . SuppressionCommentFilter < / param > 
 + < param > com . puppycrawl . tools . checkstyle . filters . SuppressWithNearbyCommentFilterTest < / param > 
 + < param > com . puppycrawl . tools . checkstyle . internal . AllChecksTest < / param > 
 < / targetTests > 
 - < mutationThreshold > 67 < / mutationThreshold > 
 + < mutationThreshold > 99 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java 
 index 1fd6561 . . a1703a0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . utils ; 
 
 import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 
 import java . lang . reflect . InvocationTargetException ; 
 
 @ @ - 91 , 7 + 92 , 7 @ @ public class AnnotationUtilityTest { 
 final DetailAST ast3 = new DetailAST ( ) ; 
 ast3 . setType ( TokenTypes . ANNOTATION ) ; 
 ast2 . addChild ( ast3 ) ; 
 - Assert . assertTrue ( AnnotationUtility . containsAnnotation ( ast ) ) ; 
 + assertTrue ( AnnotationUtility . containsAnnotation ( ast ) ) ; 
 } 
 
 @ Test 
 @ @ - 137 , 4 + 138 , 37 @ @ public class AnnotationUtilityTest { 
 assertEquals ( " the annotation is empty or spaces " , ex . getMessage ( ) ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void testContainsAnnotationWithNull ( ) { 
 + try { 
 + AnnotationUtility . getAnnotation ( null , " " ) ; 
 + Assert . fail ( " IllegalArgumentException is expected " ) ; 
 + } 
 + catch ( IllegalArgumentException ex ) { 
 + assertEquals ( " the ast is null " , ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testContainsAnnotation ( ) { 
 + final DetailAST astForTest = new DetailAST ( ) ; 
 + astForTest . setType ( TokenTypes . PACKAGE _ DEF ) ; 
 + final DetailAST child = new DetailAST ( ) ; 
 + final DetailAST annotations = new DetailAST ( ) ; 
 + final DetailAST annotation = new DetailAST ( ) ; 
 + final DetailAST annotationNameHolder = new DetailAST ( ) ; 
 + final DetailAST annotationName = new DetailAST ( ) ; 
 + annotations . setType ( TokenTypes . ANNOTATIONS ) ; 
 + annotation . setType ( TokenTypes . ANNOTATION ) ; 
 + annotationName . setText ( " Annotation " ) ; 
 + 
 + annotationNameHolder . setNextSibling ( annotationName ) ; 
 + annotation . setFirstChild ( annotationNameHolder ) ; 
 + annotations . setFirstChild ( annotation ) ; 
 + child . setNextSibling ( annotations ) ; 
 + astForTest . setFirstChild ( child ) ; 
 + 
 + assertTrue ( AnnotationUtility . containsAnnotation ( astForTest , " Annotation " ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java 
 new file mode 100644 
 index 0000000 . . ecda34a 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPositionTest . java 
 @ @ - 0 , 0 + 1 , 115 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . utils ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + import java . io . File ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + import java . util . function . Function ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; 
 + 
 + public class BlockCommentPositionTest { 
 + 
 + @ Test 
 + public void testJavaDocsRecognition ( ) throws Exception { 
 + final List < BlockCommentPositionTestMetadata > metadataList = Arrays . asList ( 
 + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnClass . java " , 
 + BlockCommentPosition : : isOnClass , 3 ) , 
 + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnMethod . java " , 
 + BlockCommentPosition : : isOnMethod , 3 ) , 
 + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnField . java " , 
 + BlockCommentPosition : : isOnField , 3 ) , 
 + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnEnum . java " , 
 + BlockCommentPosition : : isOnEnum , 3 ) , 
 + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnConstructor . java " , 
 + BlockCommentPosition : : isOnConstructor , 3 ) , 
 + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnInterface . java " , 
 + BlockCommentPosition : : isOnInterface , 3 ) , 
 + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnAnnotation . java " , 
 + BlockCommentPosition : : isOnAnnotationDef , 3 ) , 
 + new BlockCommentPositionTestMetadata ( " InputBlockCommentPositionOnEnumMember . java " , 
 + BlockCommentPosition : : isOnEnumConstant , 2 ) 
 + ) ; 
 + 
 + for ( BlockCommentPositionTestMetadata metadata : metadataList ) { 
 + final DetailAST ast = TestUtils . parseFile ( 
 + new File ( getPath ( metadata . getFileName ( ) ) ) 
 + ) ; 
 + final int matches = getJavadocsCount ( ast , metadata . getAssertion ( ) ) ; 
 + assertEquals ( metadata . getMatchesNum ( ) , matches ) ; 
 + } 
 + } 
 + 
 + private static int getJavadocsCount ( DetailAST detailAST , 
 + Function < DetailAST , Boolean > assertion ) { 
 + int matchFound = 0 ; 
 + DetailAST node = detailAST ; 
 + while ( node ! = null ) { 
 + if ( node . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN 
 + & & JavadocUtils . isJavadocComment ( node ) ) { 
 + if ( ! assertion . apply ( node ) ) { 
 + throw new IllegalStateException ( " Position of comment is defined correctly " ) ; 
 + } 
 + matchFound + + ; 
 + } 
 + matchFound + = getJavadocsCount ( node . getFirstChild ( ) , assertion ) ; 
 + node = node . getNextSibling ( ) ; 
 + } 
 + return matchFound ; 
 + } 
 + 
 + private static String getPath ( String filename ) { 
 + return " src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / " 
 + + filename ; 
 + } 
 + 
 + private static final class BlockCommentPositionTestMetadata { 
 + 
 + private final String fileName ; 
 + private final Function < DetailAST , Boolean > assertion ; 
 + private final int matchesNum ; 
 + 
 + private BlockCommentPositionTestMetadata ( String fileName , Function < DetailAST , 
 + Boolean > assertion , int matchesNum ) { 
 + this . fileName = fileName ; 
 + this . assertion = assertion ; 
 + this . matchesNum = matchesNum ; 
 + } 
 + 
 + public String getFileName ( ) { 
 + return fileName ; 
 + } 
 + 
 + public Function < DetailAST , Boolean > getAssertion ( ) { 
 + return assertion ; 
 + } 
 + 
 + public int getMatchesNum ( ) { 
 + return matchesNum ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java 
 index c3f49fb . . 5df378e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtilsTest . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . api . Comment ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; 
 @ @ - 247 , 4 + 248 , 40 @ @ public class JavadocUtilsTest { 
 assertEquals ( " Unknown javadoc token name . Given name " , ex . getMessage ( ) ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void testGetTokenId ( ) { 
 + final int tokenId = JavadocUtils . getTokenId ( " JAVADOC " ) ; 
 + 
 + assertEquals ( JavadocTokenTypes . JAVADOC , tokenId ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetJavadocCommentContent ( ) { 
 + final DetailAST detailAST = new DetailAST ( ) ; 
 + final DetailAST javadoc = new DetailAST ( ) ; 
 + 
 + javadoc . setText ( " 1javadoc " ) ; 
 + detailAST . setFirstChild ( javadoc ) ; 
 + final String commentContent = JavadocUtils . getJavadocCommentContent ( detailAST ) ; 
 + 
 + assertEquals ( " javadoc " , commentContent ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetFirstToken ( ) { 
 + final JavadocNodeImpl javadocNode = new JavadocNodeImpl ( ) ; 
 + final JavadocNodeImpl basetag = new JavadocNodeImpl ( ) ; 
 + basetag . setType ( JavadocTokenTypes . BASE _ TAG ) ; 
 + final JavadocNodeImpl body = new JavadocNodeImpl ( ) ; 
 + body . setType ( JavadocTokenTypes . BODY ) ; 
 + 
 + body . setParent ( javadocNode ) ; 
 + basetag . setParent ( javadocNode ) ; 
 + javadocNode . setChildren ( basetag , body ) ; 
 + 
 + final DetailNode result = JavadocUtils . findFirstToken ( javadocNode , JavadocTokenTypes . BODY ) ; 
 + 
 + assertEquals ( body , result ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java 
 index c6b63ce . . 7c480d1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java 
 @ @ - 26 , 9 + 26 , 12 @ @ import static org . junit . Assert . fail ; 
 
 import java . lang . reflect . Field ; 
 import java . lang . reflect . Modifier ; 
 + import java . util . Arrays ; 
 + import java . util . Optional ; 
 
 import org . junit . Test ; 
 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class TokenUtilsTest { 
 @ @ - 62 , 14 + 65 , 45 @ @ public class TokenUtilsTest { 
 } 
 
 @ Test 
 - public void testTokenValueIncorrect ( ) { 
 - final Integer id = Integer . MAX _ VALUE - 1 ; 
 + public void testTokenValueIncorrect ( ) throws IllegalAccessException { 
 + int maxId = 0 ; 
 + final Field [ ] fields = TokenTypes . class . getDeclaredFields ( ) ; 
 + for ( final Field field : fields ) { 
 + / / Only process the int declarations . 
 + if ( field . getType ( ) ! = Integer . TYPE ) { 
 + continue ; 
 + } 
 + 
 + final String name = field . getName ( ) ; 
 + final int id = field . getInt ( name ) ; 
 + if ( id > maxId ) { 
 + maxId = id ; 
 + } 
 + } 
 + 
 + final int nextAfterMaxId = maxId + 1 ; 
 try { 
 - TokenUtils . getTokenName ( id ) ; 
 + TokenUtils . getTokenName ( nextAfterMaxId ) ; 
 fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException expected ) { 
 - assertEquals ( " given id " + id , expected . getMessage ( ) ) ; 
 + assertEquals ( " given id " + nextAfterMaxId , expected . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testTokenValueCorrect ( ) throws IllegalAccessException { 
 + final Field [ ] fields = TokenTypes . class . getDeclaredFields ( ) ; 
 + for ( final Field field : fields ) { 
 + / / Only process the int declarations . 
 + if ( field . getType ( ) ! = Integer . TYPE ) { 
 + continue ; 
 + } 
 + 
 + final String name = field . getName ( ) ; 
 + final int id = field . getInt ( name ) ; 
 + 
 + assertEquals ( name , TokenUtils . getTokenName ( id ) ) ; 
 } 
 } 
 
 @ @ - 138 , 6 + 172 , 66 @ @ public class TokenUtilsTest { 
 assertTrue ( TokenUtils . isCommentType ( TokenTypes . BLOCK _ COMMENT _ BEGIN ) ) ; 
 assertTrue ( TokenUtils . isCommentType ( TokenTypes . BLOCK _ COMMENT _ END ) ) ; 
 assertTrue ( TokenUtils . isCommentType ( TokenTypes . COMMENT _ CONTENT ) ) ; 
 + assertTrue ( TokenUtils . isCommentType ( " COMMENT _ CONTENT " ) ) ; 
 } 
 
 + @ Test 
 + public void tetsGetTokenTypesTotalNumber ( ) { 
 + final int tokenTypesTotalNumber = TokenUtils . getTokenTypesTotalNumber ( ) ; 
 + 
 + assertEquals ( 169 , tokenTypesTotalNumber ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetAllTokenIds ( ) { 
 + final int [ ] allTokenIds = TokenUtils . getAllTokenIds ( ) ; 
 + final int sum = Arrays . stream ( allTokenIds ) . sum ( ) ; 
 + 
 + assertEquals ( 169 , allTokenIds . length ) ; 
 + assertEquals ( 15662 , sum ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetTokenNameWithGreatestPossibleId ( ) { 
 + final Integer id = TokenTypes . COMMENT _ CONTENT ; 
 + final String tokenName = TokenUtils . getTokenName ( id ) ; 
 + 
 + assertEquals ( " COMMENT _ CONTENT " , tokenName ) ; 
 + } 
 + 
 + @ Test 
 + public void testCorrectBehaviourOfGetTokenId ( ) { 
 + final String id = " EOF " ; 
 + 
 + assertEquals ( TokenTypes . EOF , TokenUtils . getTokenId ( id ) ) ; 
 + 
 + } 
 + 
 + @ Test 
 + public void testCorrectBehaviourOfShortDescription ( ) { 
 + final String id = " EOF " ; 
 + final String shortDescription = TokenUtils . getShortDescription ( id ) ; 
 + 
 + assertEquals ( " The end of file token . " , shortDescription ) ; 
 + } 
 + 
 + @ Test 
 + public void testFindFirstTokenByPredicate ( ) { 
 + final DetailAST astForTest = new DetailAST ( ) ; 
 + final DetailAST child = new DetailAST ( ) ; 
 + final DetailAST firstSibling = new DetailAST ( ) ; 
 + final DetailAST secondSibling = new DetailAST ( ) ; 
 + final DetailAST thirdSibling = new DetailAST ( ) ; 
 + firstSibling . setText ( " first " ) ; 
 + secondSibling . setText ( " second " ) ; 
 + thirdSibling . setText ( " third " ) ; 
 + secondSibling . setNextSibling ( thirdSibling ) ; 
 + firstSibling . setNextSibling ( secondSibling ) ; 
 + child . setNextSibling ( firstSibling ) ; 
 + astForTest . setFirstChild ( child ) ; 
 + final Optional < DetailAST > result = TokenUtils . findFirstTokenByPredicate ( astForTest , 
 + ast - > " second " . equals ( ast . getText ( ) ) ) ; 
 + 
 + assertEquals ( secondSibling , result . get ( ) ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnAnnotation . java 
 new file mode 100644 
 index 0000000 . . ca82df7 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnAnnotation . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + public @ interface InputBlockCommentPositionOnAnnotation { 
 + } 
 + 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + @ interface InputBlockCommentPositionOnAnnotation1 { 
 + } 
 + 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + @ Deprecated 
 + @ interface InputBlockCommentPositionOnAnnotation2 { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnClass . java 
 new file mode 100644 
 index 0000000 . . 69f4877 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnClass . java 
 @ @ - 0 , 0 + 1 , 23 @ @ 
 + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + public class InputBlockCommentPositionOnClass { 
 + 
 + } 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + class JavaDocOnClass1 { 
 + } 
 + 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + @ Deprecated 
 + class JavaDocOnClass2 { 
 + } 
 + 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnConstructor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnConstructor . java 
 new file mode 100644 
 index 0000000 . . 85b0b37 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnConstructor . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; 
 + 
 + 
 + public class InputBlockCommentPositionOnConstructor { 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + public InputBlockCommentPositionOnConstructor ( ) { 
 + 
 + } 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + InputBlockCommentPositionOnConstructor ( int a ) { 
 + 
 + } 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + @ Deprecated 
 + public InputBlockCommentPositionOnConstructor ( String s ) { 
 + 
 + } 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnEnum . java 
 new file mode 100644 
 index 0000000 . . 0e0816f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnEnum . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + public enum InputBlockCommentPositionOnEnum { 
 + } 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + enum BlockCommentPositionOnEnumInput1 { 
 + } 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + @ Deprecated 
 + enum BlockCommentPositionOnEnumInput2 { 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnEnumMember . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnEnumMember . java 
 new file mode 100644 
 index 0000000 . . e96a22e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnEnumMember . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; 
 + 
 + 
 + public enum InputBlockCommentPositionOnEnumMember { 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + A , 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + @ Deprecated 
 + B , 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnField . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnField . java 
 new file mode 100644 
 index 0000000 . . ef3bc55 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnField . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; 
 + 
 + public class InputBlockCommentPositionOnField { 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + int a ; 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + private int b ; 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + @ Deprecated 
 + int c ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnInterface . java 
 new file mode 100644 
 index 0000000 . . 8692d89 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnInterface . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + public interface InputBlockCommentPositionOnInterface { 
 + } 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + interface InputBlockCommentPositionOnInterface1 { 
 + } 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + @ Deprecated 
 + interface InputBlockCommentPositionOnInterface2 { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnMethod . java b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnMethod . java 
 new file mode 100644 
 index 0000000 . . e2b5a0b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / utils / blockcommentposition / InputBlockCommentPositionOnMethod . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package com . puppycrawl . tools . checkstyle . utils . blockcommentposition ; 
 + 
 + public class InputBlockCommentPositionOnMethod { 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + int method ( ) { 
 + return 0 ; 
 + } 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + public int method1 ( ) { 
 + return 0 ; 
 + } 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + @ Deprecated 
 + int method2 ( ) { 
 + return 0 ; 
 + } 
 + }
