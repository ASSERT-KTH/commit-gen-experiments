BLEU SCORE: 0.0156963464356626

TEST MSG: spelling : tests
GENERATED MSG: Issue # 49 . Added comments to existing test inputs .

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java <nl> index d55737d . . 245854f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java <nl> @ @ - 132 , 7 + 132 , 7 @ @ public class AbstractCheckTest extends AbstractPathTestSupport { <nl> } <nl> } ; <nl> check . setFileContents ( new FileContents ( new FileText ( <nl> - new File ( getPath ( " InputAbstractCheckTestFileContence . java " ) ) , <nl> + new File ( getPath ( " InputAbstractCheckTestFileContents . java " ) ) , <nl> Charset . defaultCharset ( ) . name ( ) ) ) ) ; <nl> <nl> Assert . assertEquals ( " Invalid line content " , " * I ' m a javadoc " , check . getLine ( 3 ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> index 72c9c80 . . b4105c6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> @ @ - 368 , 7 + 368 , 7 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { <nl> " 7 : 45 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 45 ) , <nl> " 7 : 47 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 47 ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputRightCurlySingelineIfBlocks . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRightCurlySinglelineIfBlocks . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / api / abstractcheck / InputAbstractCheckTestFileContence . java b / src / test / resources / com / puppycrawl / tools / checkstyle / api / abstractcheck / InputAbstractCheckTestFileContence . java <nl> deleted file mode 100644 <nl> index 8c7a977 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / api / abstractcheck / InputAbstractCheckTestFileContence . java <nl> + + + / dev / null <nl> @ @ - 1 , 24 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . api . abstractcheck ; <nl> - <nl> - / * * <nl> - * I ' m a javadoc <nl> - * / <nl> - public class InputAbstractCheckTestFileContence { <nl> - private int variable ; <nl> - <nl> - public InputAbstractCheckTestFileContence ( int variable ) { <nl> - this . variable = variable ; <nl> - } <nl> - <nl> - public int getVariable ( ) { <nl> - return variable ; <nl> - } <nl> - <nl> - public void setVariable ( int variable ) { <nl> - this . variable = variable ; <nl> - } <nl> - <nl> - public int multiplyBy ( int multiplier ) { <nl> - return variable * multiplier ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / api / abstractcheck / InputAbstractCheckTestFileContents . java b / src / test / resources / com / puppycrawl / tools / checkstyle / api / abstractcheck / InputAbstractCheckTestFileContents . java <nl> new file mode 100644 <nl> index 0000000 . . e860a02 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / api / abstractcheck / InputAbstractCheckTestFileContents . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + package com . puppycrawl . tools . checkstyle . api . abstractcheck ; <nl> + <nl> + / * * <nl> + * I ' m a javadoc <nl> + * / <nl> + public class InputAbstractCheckTestFileContents { <nl> + private int variable ; <nl> + <nl> + public InputAbstractCheckTestFileContents ( int variable ) { <nl> + this . variable = variable ; <nl> + } <nl> + <nl> + public int getVariable ( ) { <nl> + return variable ; <nl> + } <nl> + <nl> + public void setVariable ( int variable ) { <nl> + this . variable = variable ; <nl> + } <nl> + <nl> + public int multiplyBy ( int multiplier ) { <nl> + return variable * multiplier ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptycatchblock / InputEmptyCatchBlockDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptycatchblock / InputEmptyCatchBlockDefault . java <nl> index bc3fff3 . . acdaa5b 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptycatchblock / InputEmptyCatchBlockDefault . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptycatchblock / InputEmptyCatchBlockDefault . java <nl> @ @ - 233 , 7 + 233 , 7 @ @ public class InputEmptyCatchBlockDefault <nl> } <nl> } <nl> <nl> - private void emptyMultilineComent ( ) { <nl> + private void emptyMultilineComment ( ) { <nl> try { <nl> throw new IOException ( ) ; <nl> } catch ( IOException e ) { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlySingelineIfBlocks . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlySingelineIfBlocks . java <nl> deleted file mode 100644 <nl> index 3a358af . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlySingelineIfBlocks . java <nl> + + + / dev / null <nl> @ @ - 1 , 9 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . blocks . rightcurly ; <nl> - <nl> - public class InputRightCurlySingelineIfBlocks { <nl> - void foo1 ( ) { <nl> - if ( true ) { int a = 5 ; } / / violation <nl> - <nl> - if ( true ) { if ( false ) { int b = 6 ; } } / / violation <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlySinglelineIfBlocks . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlySinglelineIfBlocks . java <nl> new file mode 100644 <nl> index 0000000 . . afb3bf1 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlySinglelineIfBlocks . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks . rightcurly ; <nl> + <nl> + public class InputRightCurlySinglelineIfBlocks { <nl> + void foo1 ( ) { <nl> + if ( true ) { int a = 5 ; } / / violation <nl> + <nl> + if ( true ) { if ( false ) { int b = 6 ; } } / / violation <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java <nl> index cac0d61 . . 36e796f 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ public class InputDeclarationOrderForwardReference { <nl> public static final String FIRST = COMMON _ PART + " 2 " ; <nl> <nl> private static final String SECOND = String . valueOf ( TokenTypes . ELIST ) + FIRST ; <nl> - public static final String THIDRD = FIRST ; <nl> + public static final String THIRD = FIRST ; <nl> <nl> private static int ID = 5 ; <nl> public static final String FOURTH = " 1 " <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / missingctor / InputMissingCtor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / missingctor / InputMissingCtor . java <nl> index d741408 . . 52f337b 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / missingctor / InputMissingCtor . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / missingctor / InputMissingCtor . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ public class InputMissingCtor <nl> { <nl> } <nl> / / we shouldn ' t flag abstract classes <nl> - abstract class AbstactClass { <nl> + abstract class AbstractClass { <nl> } <nl> <nl> / / this class has ctor <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / overloadmethodsdeclarationorder / InputOverloadMethodsDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / overloadmethodsdeclarationorder / InputOverloadMethodsDeclarationOrder . java <nl> index 2aa3520 . . 05919ac 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / overloadmethodsdeclarationorder / InputOverloadMethodsDeclarationOrder . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / overloadmethodsdeclarationorder / InputOverloadMethodsDeclarationOrder . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ class OverloadInput <nl> / / some foo code <nl> } <nl> <nl> - OverloadInput anonynous = new OverloadInput ( ) <nl> + OverloadInput anonymous = new OverloadInput ( ) <nl> { <nl> public void overloadMethod ( int i ) <nl> { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java <nl> index 2d901fa . . d0d5895 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ public class InputUnnecessaryParenthesesLambdas { <nl> return y ; <nl> } <nl> <nl> - static < T > CheckedFunction1 < T , T > identitity ( ) { <nl> + static < T > CheckedFunction1 < T , T > identity ( ) { <nl> return t - > t ; <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java <nl> index 330abb8 . . 9abbde4 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java <nl> @ @ - 504 , 7 + 504 , 7 @ @ public class InputVariableDeclarationUsageDistance { <nl> int count = 0 ; <nl> String [ ] files = { } ; <nl> <nl> - System . identityHashCode ( " Data archivation started " ) ; <nl> + System . identityHashCode ( " Data archival started " ) ; <nl> files . notify ( ) ; <nl> System . identityHashCode ( " sss " ) ; <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / finalclass / InputFinalClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / finalclass / InputFinalClass . java <nl> index e006b08 . . 71bc4af 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / finalclass / InputFinalClass . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / finalclass / InputFinalClass . java <nl> @ @ - 66 , 13 + 66 , 13 @ @ abstract class Operation <nl> <nl> / / Typesafe enum with operation <nl> / / abstract classes cannot be final , see bug # 837012 <nl> - interface Evaluatable <nl> + interface Evaluable <nl> { <nl> double eval ( double a , double b ) ; <nl> } <nl> <nl> / / abstract class without it ' s own abstract method decl <nl> - abstract class Operation2 implements Evaluatable <nl> + abstract class Operation2 implements Evaluable <nl> { <nl> <nl> public static final Operation2 PLUS = <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCount . java <nl> index cb42005 . . cd8a61e 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCount . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCount . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ public class InputThrowsCount { <nl> { <nl> } <nl> <nl> - void methdo2 ( ) throws java . awt . AWTException <nl> + void method2 ( ) throws java . awt . AWTException <nl> { <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationAnonymousClasses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationAnonymousClasses . java <nl> index e0c69e2 . . 5746b5c 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationAnonymousClasses . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationAnonymousClasses . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ public class / / indent : 0 exp : 0 <nl> void foo2 ( StrangeInstance instance ) { } / / indent : 2 exp : 2 <nl> } / / indent : 0 exp : 0 <nl> <nl> - class WithAnonnymousClass { / / indent : 0 exp : 0 <nl> + class WithAnonymousClass { / / indent : 0 exp : 0 <nl> public static final InputIndentationAnonymousClasses anon = new InputIndentationAnonymousClasses ( " Looooooooooooooooong " , / / indent : 2 exp : 2 <nl> " SecondLoooooooooooong " ) { / / indent : 6 exp : 6 <nl> @ Override public boolean foo ( ) { / / indent : 4 exp : 4 <nl> @ @ - 41 , 7 + 41 , 7 @ @ class WithAnonnymousClass { / / indent : 0 exp : 0 <nl> @ Override public boolean foo ( ) { / / indent : 10 exp : 10 <nl> InputIndentationAnonymousClasses InputIndentationAnonymousClasses = new InputIndentationAnonymousClasses ( " " , " " ) ; / / indent : 12 exp : 12 <nl> InputIndentationAnonymousClasses . equals ( new StrangeInstance ( new InputIndentationAnonymousClasses ( " " , " " ) ) { / / indent : 12 exp : 12 <nl> - @ Override void foo ( String loongString , String secondLongString ) { } / / indent : 14 exp : 14 <nl> + @ Override void foo ( String longString , String secondLongString ) { } / / indent : 14 exp : 14 <nl> } ) ; / / indent : 12 exp : 12 <nl> return false ; / / indent : 12 exp : 12 <nl> } / / indent : 10 exp : 10 <nl> @ @ - 51 , 7 + 51 , 7 @ @ class WithAnonnymousClass { / / indent : 0 exp : 0 <nl> <nl> class StrangeInstance { / / indent : 0 exp : 0 <nl> public StrangeInstance ( InputIndentationAnonymousClasses InputIndentationAnonymousClasses ) { } / / indent : 2 exp : 2 <nl> - void foo ( String loongString , String secondLongString ) { } / / indent : 2 exp : 2 <nl> + void foo ( String longString , String secondLongString ) { } / / indent : 2 exp : 2 <nl> } / / indent : 0 exp : 0 <nl> <nl> @ interface MyAnnotation1 { } / / indent : 0 exp : 0 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCorrectIfAndParameter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCorrectIfAndParameter . java <nl> index e37c742 . . 17a939c 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCorrectIfAndParameter . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCorrectIfAndParameter . java <nl> @ @ - 150 , 7 + 150 , 7 @ @ class SecondClassWithVeryVeryVeryLongName { / / indent : 0 exp : 0 <nl> return false ; / / indent : 4 exp : 4 <nl> } / / indent : 2 exp : 2 <nl> <nl> - SecondClassWithVeryVeryVeryLongName getInstanse ( ) { / / indent : 2 exp : 2 <nl> + SecondClassWithVeryVeryVeryLongName getInstance ( ) { / / indent : 2 exp : 2 <nl> return new SecondClassWithVeryVeryVeryLongName ( " VeryLoooooooooo " / / indent : 4 exp : 4 <nl> + " oongString " ) ; / / indent : 8 exp : 8 <nl> } / / indent : 2 exp : 2 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCustomAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCustomAnnotation . java <nl> index cfc53d7 . . ef84b61 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCustomAnnotation . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCustomAnnotation . java <nl> @ @ - 47 , 7 + 47 , 7 @ @ String author ( ) default " author " ; / / indent : 0 exp : 4 warn <nl> <nl> @ interface Ann { } / / indent : 0 exp : 0 <nl> <nl> - class InnerAnnonClass { / / indent : 0 exp : 0 <nl> + class InnerAnonClass { / / indent : 0 exp : 0 <nl> @ interface MyInnerAnno { / / indent : 4 exp : 4 <nl> String author ( ) ; / / indent : 8 exp : 8 <nl> } / / indent : 4 exp : 4 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationMembers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationMembers . java <nl> index 7615b98 . . 13d7e41 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationMembers . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationMembers . java <nl> @ @ - 75 , 7 + 75 , 7 @ @ class SecondFieldClassWithVeryVeryVeryLongName { / / indent : 0 exp : 0 <nl> return false ; / / indent : 4 exp : 4 <nl> } / / indent : 2 exp : 2 <nl> <nl> - SecondFieldClassWithVeryVeryVeryLongName getInstanse ( ) { / / indent : 2 exp : 2 <nl> + SecondFieldClassWithVeryVeryVeryLongName getInstance ( ) { / / indent : 2 exp : 2 <nl> return new SecondFieldClassWithVeryVeryVeryLongName ( " VeryLoooooooooo " / / indent : 4 exp : 4 <nl> + " oongString " ) ; / / indent : 8 exp : 8 <nl> } / / indent : 2 exp : 2 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbreviationaswordinname / InputAbbreviationAsWordInNameType . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbreviationaswordinname / InputAbbreviationAsWordInNameType . java <nl> index 8519b29 . . 4802b3d 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbreviationaswordinname / InputAbbreviationAsWordInNameType . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbreviationaswordinname / InputAbbreviationAsWordInNameType . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ interface Directions { <nl> int DOWN = 4 ; <nl> } <nl> <nl> - interface BadNameForInterfeis <nl> + interface BadNameForInterface <nl> { <nl> void interfaceMethod ( ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / suppresswarningsholder / InputSuppressWarningsHolder5 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / suppresswarningsholder / InputSuppressWarningsHolder5 . java <nl> index bdf1349 . . a019bd7 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / suppresswarningsholder / InputSuppressWarningsHolder5 . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / suppresswarningsholder / InputSuppressWarningsHolder5 . java <nl> @ @ - 8 , 32 + 8 , 32 @ @ import java . util . Map ; <nl> <nl> public class InputSuppressWarningsHolder5 { <nl> <nl> - public static Object foo1 ( @ SuppressWarnings ( " unsused " ) Object str ) { <nl> - String myString = ( @ SuppressWarnings ( " unsused " ) String ) str ; <nl> - Object object = new @ SuppressWarnings ( " unsused " ) Object ( ) ; <nl> + public static Object foo1 ( @ SuppressWarnings ( " unused " ) Object str ) { <nl> + String myString = ( @ SuppressWarnings ( " unused " ) String ) str ; <nl> + Object object = new @ SuppressWarnings ( " unused " ) Object ( ) ; <nl> try { <nl> return null ; <nl> <nl> - } catch ( @ SuppressWarnings ( " unsused " ) Exception ex ) { <nl> + } catch ( @ SuppressWarnings ( " unused " ) Exception ex ) { <nl> return " " ; <nl> } <nl> } <nl> <nl> - void foo2 ( ) throws @ SuppressWarnings ( " unsused " ) Exception { } <nl> + void foo2 ( ) throws @ SuppressWarnings ( " unused " ) Exception { } <nl> <nl> public void foo3 ( ) { <nl> - Map . @ SuppressWarnings ( " unsused " ) Entry entry ; <nl> + Map . @ SuppressWarnings ( " unused " ) Entry entry ; <nl> MyObject myObject = new MyObject ( ) ; <nl> - myObject . < @ SuppressWarnings ( " unsused " ) String > myMethod ( ) ; <nl> - myObject . new @ SuppressWarnings ( " unsused " ) MyObject2 ( ) ; <nl> + myObject . < @ SuppressWarnings ( " unused " ) String > myMethod ( ) ; <nl> + myObject . new @ SuppressWarnings ( " unused " ) MyObject2 ( ) ; <nl> } <nl> <nl> public static < T > void foo4 ( Object str ) { <nl> - List < @ SuppressWarnings ( " unsused " ) ? extends Comparable < T > > unchangeable ; <nl> + List < @ SuppressWarnings ( " unused " ) ? extends Comparable < T > > unchangeable ; <nl> } <nl> <nl> abstract class UnmodifiableList < T > <nl> - implements @ SuppressWarnings ( " unsused " ) List < @ SuppressWarnings ( " unsused " ) T > { <nl> + implements @ SuppressWarnings ( " unused " ) List < @ SuppressWarnings ( " unused " ) T > { <nl> } <nl> <nl> class MyObject { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java <nl> index 7ed823a . . 51b8410 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java <nl> @ @ - 5 , 10 + 5 , 10 @ @ import java . lang . annotation . Target ; <nl> <nl> public class InputNoWhitespaceAfterArrayDeclarations3 <nl> { <nl> - public void testWithAnnotationInMidle1 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct <nl> - public void testWithAnnotationInMidle2 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct <nl> - public void testWithAnnotationInMidle3 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct <nl> - public void testWithAnnotationInMidle4 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct <nl> + public void testWithAnnotationInMiddle1 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct <nl> + public void testWithAnnotationInMiddle2 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct <nl> + public void testWithAnnotationInMiddle3 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct <nl> + public void testWithAnnotationInMiddle4 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct <nl> <nl> @ Target ( ElementType . TYPE _ USE ) <nl> @ interface AnnotationAfterTest { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java <nl> index f2bd37e . . 368be86 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ class InputNoWhitespaceAfterSynchronized { <nl> } <nl> } <nl> <nl> - public void synchronzed ( ) { <nl> + public void synchronized _ ( ) { <nl> synchronized ( this ) { } <nl> synchronized <nl> ( this ) { }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> index 99e923c . . 5081b85 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> @ @ - 29 , 11 + 29 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> * " & lt ; " and " & gt ; " are correct to the < i > typical < / i > convention . <nl> * The convention is not configurable . <nl> * < / p > <nl> - * < br / > <nl> + * < br > <nl> * < p > <nl> * Left angle bracket ( " & lt ; " ) : <nl> * < / p > <nl> - * < br / > <nl> + * < br > <nl> * < ul > <nl> * < li > should be preceded with whitespace only <nl> * in generic methods definitions . < / li > <nl> @ @ - 41 , 26 + 41 , 26 @ @ import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> * when it is precede method name or following type name . < / li > <nl> * < li > should not be followed with whitespace in all cases . < / li > <nl> * < / ul > <nl> - * < br / > <nl> + * < br > <nl> * < p > <nl> * Right angle bracket ( " & gt ; " ) : <nl> * < / p > <nl> - * < br / > <nl> + * < br > <nl> * < ul > <nl> * < li > should not be preceded with whitespace in all cases . < / li > <nl> * < li > should be followed with whitespace in almost all cases , <nl> * except diamond operators and when preceding method name . < / li > < / ul > <nl> - * < br / > <nl> + * < br > <nl> * < p > <nl> * Examples with correct spacing : <nl> * < / p > <nl> - * < br / > <nl> + * < br > <nl> * < pre > <nl> - * public void & lt ; K , V extends Number & gt ; boolean foo ( K , V ) { } / / Generic methods definitions <nl> - * class name & lt ; T1 , T2 , . . . , Tn & gt ; { } / / Generic type definition <nl> - * OrderedPair & lt ; String , Box & lt ; Integer & gt ; & gt ; p ; / / Generic type reference <nl> - * boolean same = Util . & lt ; Integer , String & gt ; compare ( p1 , p2 ) ; / / Generic preceded method name <nl> - * Pair & lt ; Integer , String > p1 = new Pair & lt ; & gt ; ( 1 , " apple " ) ; / / Diamond operator <nl> + * public void & lt ; K , V extends Number & gt ; boolean foo ( K , V ) { } / / Generic methods definitions <nl> + * class name & lt ; T1 , T2 , . . . , Tn & gt ; { } / / Generic type definition <nl> + * OrderedPair & lt ; String , Box & lt ; Integer & gt ; & gt ; p ; / / Generic type reference <nl> + * boolean same = Util . & lt ; Integer , String & gt ; compare ( p1 , p2 ) ; / / Generic preceded method name <nl> + * Pair & lt ; Integer , String & gt ; p1 = new Pair & lt ; & gt ; ( 1 , " apple " ) ; / / Diamond operator <nl> * < / pre > <nl> * @ author Oliver Burn <nl> * / <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> index 8b9b965 . . 0d7e3f8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> / * * <nl> * < p > <nl> * Checks that a token is surrounded by whitespace . <nl> - * < / p > <nl> + * <nl> * < p > By default the check will check the following operators : <nl> * { @ link TokenTypes # LITERAL _ ASSERT ASSERT } , <nl> * { @ link TokenTypes # ASSIGN ASSIGN } , <nl> @ @ - 78 , 22 + 78 , 24 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * { @ link TokenTypes # STAR _ ASSIGN STAR _ ASSIGN } , <nl> * { @ link TokenTypes # LITERAL _ ASSERT LITERAL _ ASSERT } , <nl> * { @ link TokenTypes # TYPE _ EXTENSION _ AND TYPE _ EXTENSION _ AND } . <nl> - * < / p > <nl> + * <nl> * < p > <nl> * An example of how to configure the check is : <nl> - * < / p > <nl> + * <nl> * < pre > <nl> * & lt ; module name = " WhitespaceAround " / & gt ; <nl> * < / pre > <nl> + * <nl> * < p > An example of how to configure the check for whitespace only around <nl> * assignment operators is : <nl> - * < / p > <nl> + * <nl> * < pre > <nl> * & lt ; module name = " WhitespaceAround " & gt ; <nl> * & lt ; property name = " tokens " <nl> * value = " ASSIGN , DIV _ ASSIGN , PLUS _ ASSIGN , MINUS _ ASSIGN , STAR _ ASSIGN , MOD _ ASSIGN , SR _ ASSIGN , BSR _ ASSIGN , SL _ ASSIGN , BXOR _ ASSIGN , BOR _ ASSIGN , BAND _ ASSIGN " / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> + * <nl> * < p > <nl> * In addition , this check can be configured to allow empty methods , types , <nl> * for , while , do - while loops and constructor bodies .

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java 
 index d55737d . . 245854f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractCheckTest . java 
 @ @ - 132 , 7 + 132 , 7 @ @ public class AbstractCheckTest extends AbstractPathTestSupport { 
 } 
 } ; 
 check . setFileContents ( new FileContents ( new FileText ( 
 - new File ( getPath ( " InputAbstractCheckTestFileContence . java " ) ) , 
 + new File ( getPath ( " InputAbstractCheckTestFileContents . java " ) ) , 
 Charset . defaultCharset ( ) . name ( ) ) ) ) ; 
 
 Assert . assertEquals ( " Invalid line content " , " * I ' m a javadoc " , check . getLine ( 3 ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 index 72c9c80 . . b4105c6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 @ @ - 368 , 7 + 368 , 7 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { 
 " 7 : 45 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 45 ) , 
 " 7 : 47 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 47 ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputRightCurlySingelineIfBlocks . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRightCurlySinglelineIfBlocks . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / api / abstractcheck / InputAbstractCheckTestFileContence . java b / src / test / resources / com / puppycrawl / tools / checkstyle / api / abstractcheck / InputAbstractCheckTestFileContence . java 
 deleted file mode 100644 
 index 8c7a977 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / api / abstractcheck / InputAbstractCheckTestFileContence . java 
 + + + / dev / null 
 @ @ - 1 , 24 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . api . abstractcheck ; 
 - 
 - / * * 
 - * I ' m a javadoc 
 - * / 
 - public class InputAbstractCheckTestFileContence { 
 - private int variable ; 
 - 
 - public InputAbstractCheckTestFileContence ( int variable ) { 
 - this . variable = variable ; 
 - } 
 - 
 - public int getVariable ( ) { 
 - return variable ; 
 - } 
 - 
 - public void setVariable ( int variable ) { 
 - this . variable = variable ; 
 - } 
 - 
 - public int multiplyBy ( int multiplier ) { 
 - return variable * multiplier ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / api / abstractcheck / InputAbstractCheckTestFileContents . java b / src / test / resources / com / puppycrawl / tools / checkstyle / api / abstractcheck / InputAbstractCheckTestFileContents . java 
 new file mode 100644 
 index 0000000 . . e860a02 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / api / abstractcheck / InputAbstractCheckTestFileContents . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package com . puppycrawl . tools . checkstyle . api . abstractcheck ; 
 + 
 + / * * 
 + * I ' m a javadoc 
 + * / 
 + public class InputAbstractCheckTestFileContents { 
 + private int variable ; 
 + 
 + public InputAbstractCheckTestFileContents ( int variable ) { 
 + this . variable = variable ; 
 + } 
 + 
 + public int getVariable ( ) { 
 + return variable ; 
 + } 
 + 
 + public void setVariable ( int variable ) { 
 + this . variable = variable ; 
 + } 
 + 
 + public int multiplyBy ( int multiplier ) { 
 + return variable * multiplier ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptycatchblock / InputEmptyCatchBlockDefault . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptycatchblock / InputEmptyCatchBlockDefault . java 
 index bc3fff3 . . acdaa5b 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptycatchblock / InputEmptyCatchBlockDefault . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / emptycatchblock / InputEmptyCatchBlockDefault . java 
 @ @ - 233 , 7 + 233 , 7 @ @ public class InputEmptyCatchBlockDefault 
 } 
 } 
 
 - private void emptyMultilineComent ( ) { 
 + private void emptyMultilineComment ( ) { 
 try { 
 throw new IOException ( ) ; 
 } catch ( IOException e ) { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlySingelineIfBlocks . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlySingelineIfBlocks . java 
 deleted file mode 100644 
 index 3a358af . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlySingelineIfBlocks . java 
 + + + / dev / null 
 @ @ - 1 , 9 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . blocks . rightcurly ; 
 - 
 - public class InputRightCurlySingelineIfBlocks { 
 - void foo1 ( ) { 
 - if ( true ) { int a = 5 ; } / / violation 
 - 
 - if ( true ) { if ( false ) { int b = 6 ; } } / / violation 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlySinglelineIfBlocks . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlySinglelineIfBlocks . java 
 new file mode 100644 
 index 0000000 . . afb3bf1 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / rightcurly / InputRightCurlySinglelineIfBlocks . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks . rightcurly ; 
 + 
 + public class InputRightCurlySinglelineIfBlocks { 
 + void foo1 ( ) { 
 + if ( true ) { int a = 5 ; } / / violation 
 + 
 + if ( true ) { if ( false ) { int b = 6 ; } } / / violation 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java 
 index cac0d61 . . 36e796f 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java 
 @ @ - 27 , 7 + 27 , 7 @ @ public class InputDeclarationOrderForwardReference { 
 public static final String FIRST = COMMON _ PART + " 2 " ; 
 
 private static final String SECOND = String . valueOf ( TokenTypes . ELIST ) + FIRST ; 
 - public static final String THIDRD = FIRST ; 
 + public static final String THIRD = FIRST ; 
 
 private static int ID = 5 ; 
 public static final String FOURTH = " 1 " 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / missingctor / InputMissingCtor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / missingctor / InputMissingCtor . java 
 index d741408 . . 52f337b 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / missingctor / InputMissingCtor . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / missingctor / InputMissingCtor . java 
 @ @ - 4 , 7 + 4 , 7 @ @ public class InputMissingCtor 
 { 
 } 
 / / we shouldn ' t flag abstract classes 
 - abstract class AbstactClass { 
 + abstract class AbstractClass { 
 } 
 
 / / this class has ctor 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / overloadmethodsdeclarationorder / InputOverloadMethodsDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / overloadmethodsdeclarationorder / InputOverloadMethodsDeclarationOrder . java 
 index 2aa3520 . . 05919ac 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / overloadmethodsdeclarationorder / InputOverloadMethodsDeclarationOrder . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / overloadmethodsdeclarationorder / InputOverloadMethodsDeclarationOrder . java 
 @ @ - 30 , 7 + 30 , 7 @ @ class OverloadInput 
 / / some foo code 
 } 
 
 - OverloadInput anonynous = new OverloadInput ( ) 
 + OverloadInput anonymous = new OverloadInput ( ) 
 { 
 public void overloadMethod ( int i ) 
 { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java 
 index 2d901fa . . d0d5895 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesLambdas . java 
 @ @ - 20 , 7 + 20 , 7 @ @ public class InputUnnecessaryParenthesesLambdas { 
 return y ; 
 } 
 
 - static < T > CheckedFunction1 < T , T > identitity ( ) { 
 + static < T > CheckedFunction1 < T , T > identity ( ) { 
 return t - > t ; 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java 
 index 330abb8 . . 9abbde4 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java 
 @ @ - 504 , 7 + 504 , 7 @ @ public class InputVariableDeclarationUsageDistance { 
 int count = 0 ; 
 String [ ] files = { } ; 
 
 - System . identityHashCode ( " Data archivation started " ) ; 
 + System . identityHashCode ( " Data archival started " ) ; 
 files . notify ( ) ; 
 System . identityHashCode ( " sss " ) ; 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / finalclass / InputFinalClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / finalclass / InputFinalClass . java 
 index e006b08 . . 71bc4af 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / finalclass / InputFinalClass . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / finalclass / InputFinalClass . java 
 @ @ - 66 , 13 + 66 , 13 @ @ abstract class Operation 
 
 / / Typesafe enum with operation 
 / / abstract classes cannot be final , see bug # 837012 
 - interface Evaluatable 
 + interface Evaluable 
 { 
 double eval ( double a , double b ) ; 
 } 
 
 / / abstract class without it ' s own abstract method decl 
 - abstract class Operation2 implements Evaluatable 
 + abstract class Operation2 implements Evaluable 
 { 
 
 public static final Operation2 PLUS = 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCount . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCount . java 
 index cb42005 . . cd8a61e 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCount . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCount . java 
 @ @ - 10 , 7 + 10 , 7 @ @ public class InputThrowsCount { 
 { 
 } 
 
 - void methdo2 ( ) throws java . awt . AWTException 
 + void method2 ( ) throws java . awt . AWTException 
 { 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationAnonymousClasses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationAnonymousClasses . java 
 index e0c69e2 . . 5746b5c 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationAnonymousClasses . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationAnonymousClasses . java 
 @ @ - 27 , 7 + 27 , 7 @ @ public class / / indent : 0 exp : 0 
 void foo2 ( StrangeInstance instance ) { } / / indent : 2 exp : 2 
 } / / indent : 0 exp : 0 
 
 - class WithAnonnymousClass { / / indent : 0 exp : 0 
 + class WithAnonymousClass { / / indent : 0 exp : 0 
 public static final InputIndentationAnonymousClasses anon = new InputIndentationAnonymousClasses ( " Looooooooooooooooong " , / / indent : 2 exp : 2 
 " SecondLoooooooooooong " ) { / / indent : 6 exp : 6 
 @ Override public boolean foo ( ) { / / indent : 4 exp : 4 
 @ @ - 41 , 7 + 41 , 7 @ @ class WithAnonnymousClass { / / indent : 0 exp : 0 
 @ Override public boolean foo ( ) { / / indent : 10 exp : 10 
 InputIndentationAnonymousClasses InputIndentationAnonymousClasses = new InputIndentationAnonymousClasses ( " " , " " ) ; / / indent : 12 exp : 12 
 InputIndentationAnonymousClasses . equals ( new StrangeInstance ( new InputIndentationAnonymousClasses ( " " , " " ) ) { / / indent : 12 exp : 12 
 - @ Override void foo ( String loongString , String secondLongString ) { } / / indent : 14 exp : 14 
 + @ Override void foo ( String longString , String secondLongString ) { } / / indent : 14 exp : 14 
 } ) ; / / indent : 12 exp : 12 
 return false ; / / indent : 12 exp : 12 
 } / / indent : 10 exp : 10 
 @ @ - 51 , 7 + 51 , 7 @ @ class WithAnonnymousClass { / / indent : 0 exp : 0 
 
 class StrangeInstance { / / indent : 0 exp : 0 
 public StrangeInstance ( InputIndentationAnonymousClasses InputIndentationAnonymousClasses ) { } / / indent : 2 exp : 2 
 - void foo ( String loongString , String secondLongString ) { } / / indent : 2 exp : 2 
 + void foo ( String longString , String secondLongString ) { } / / indent : 2 exp : 2 
 } / / indent : 0 exp : 0 
 
 @ interface MyAnnotation1 { } / / indent : 0 exp : 0 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCorrectIfAndParameter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCorrectIfAndParameter . java 
 index e37c742 . . 17a939c 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCorrectIfAndParameter . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCorrectIfAndParameter . java 
 @ @ - 150 , 7 + 150 , 7 @ @ class SecondClassWithVeryVeryVeryLongName { / / indent : 0 exp : 0 
 return false ; / / indent : 4 exp : 4 
 } / / indent : 2 exp : 2 
 
 - SecondClassWithVeryVeryVeryLongName getInstanse ( ) { / / indent : 2 exp : 2 
 + SecondClassWithVeryVeryVeryLongName getInstance ( ) { / / indent : 2 exp : 2 
 return new SecondClassWithVeryVeryVeryLongName ( " VeryLoooooooooo " / / indent : 4 exp : 4 
 + " oongString " ) ; / / indent : 8 exp : 8 
 } / / indent : 2 exp : 2 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCustomAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCustomAnnotation . java 
 index cfc53d7 . . ef84b61 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCustomAnnotation . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationCustomAnnotation . java 
 @ @ - 47 , 7 + 47 , 7 @ @ String author ( ) default " author " ; / / indent : 0 exp : 4 warn 
 
 @ interface Ann { } / / indent : 0 exp : 0 
 
 - class InnerAnnonClass { / / indent : 0 exp : 0 
 + class InnerAnonClass { / / indent : 0 exp : 0 
 @ interface MyInnerAnno { / / indent : 4 exp : 4 
 String author ( ) ; / / indent : 8 exp : 8 
 } / / indent : 4 exp : 4 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationMembers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationMembers . java 
 index 7615b98 . . 13d7e41 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationMembers . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / indentation / InputIndentationMembers . java 
 @ @ - 75 , 7 + 75 , 7 @ @ class SecondFieldClassWithVeryVeryVeryLongName { / / indent : 0 exp : 0 
 return false ; / / indent : 4 exp : 4 
 } / / indent : 2 exp : 2 
 
 - SecondFieldClassWithVeryVeryVeryLongName getInstanse ( ) { / / indent : 2 exp : 2 
 + SecondFieldClassWithVeryVeryVeryLongName getInstance ( ) { / / indent : 2 exp : 2 
 return new SecondFieldClassWithVeryVeryVeryLongName ( " VeryLoooooooooo " / / indent : 4 exp : 4 
 + " oongString " ) ; / / indent : 8 exp : 8 
 } / / indent : 2 exp : 2 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbreviationaswordinname / InputAbbreviationAsWordInNameType . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbreviationaswordinname / InputAbbreviationAsWordInNameType . java 
 index 8519b29 . . 4802b3d 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbreviationaswordinname / InputAbbreviationAsWordInNameType . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abbreviationaswordinname / InputAbbreviationAsWordInNameType . java 
 @ @ - 49 , 7 + 49 , 7 @ @ interface Directions { 
 int DOWN = 4 ; 
 } 
 
 - interface BadNameForInterfeis 
 + interface BadNameForInterface 
 { 
 void interfaceMethod ( ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / suppresswarningsholder / InputSuppressWarningsHolder5 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / suppresswarningsholder / InputSuppressWarningsHolder5 . java 
 index bdf1349 . . a019bd7 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / suppresswarningsholder / InputSuppressWarningsHolder5 . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / suppresswarningsholder / InputSuppressWarningsHolder5 . java 
 @ @ - 8 , 32 + 8 , 32 @ @ import java . util . Map ; 
 
 public class InputSuppressWarningsHolder5 { 
 
 - public static Object foo1 ( @ SuppressWarnings ( " unsused " ) Object str ) { 
 - String myString = ( @ SuppressWarnings ( " unsused " ) String ) str ; 
 - Object object = new @ SuppressWarnings ( " unsused " ) Object ( ) ; 
 + public static Object foo1 ( @ SuppressWarnings ( " unused " ) Object str ) { 
 + String myString = ( @ SuppressWarnings ( " unused " ) String ) str ; 
 + Object object = new @ SuppressWarnings ( " unused " ) Object ( ) ; 
 try { 
 return null ; 
 
 - } catch ( @ SuppressWarnings ( " unsused " ) Exception ex ) { 
 + } catch ( @ SuppressWarnings ( " unused " ) Exception ex ) { 
 return " " ; 
 } 
 } 
 
 - void foo2 ( ) throws @ SuppressWarnings ( " unsused " ) Exception { } 
 + void foo2 ( ) throws @ SuppressWarnings ( " unused " ) Exception { } 
 
 public void foo3 ( ) { 
 - Map . @ SuppressWarnings ( " unsused " ) Entry entry ; 
 + Map . @ SuppressWarnings ( " unused " ) Entry entry ; 
 MyObject myObject = new MyObject ( ) ; 
 - myObject . < @ SuppressWarnings ( " unsused " ) String > myMethod ( ) ; 
 - myObject . new @ SuppressWarnings ( " unsused " ) MyObject2 ( ) ; 
 + myObject . < @ SuppressWarnings ( " unused " ) String > myMethod ( ) ; 
 + myObject . new @ SuppressWarnings ( " unused " ) MyObject2 ( ) ; 
 } 
 
 public static < T > void foo4 ( Object str ) { 
 - List < @ SuppressWarnings ( " unsused " ) ? extends Comparable < T > > unchangeable ; 
 + List < @ SuppressWarnings ( " unused " ) ? extends Comparable < T > > unchangeable ; 
 } 
 
 abstract class UnmodifiableList < T > 
 - implements @ SuppressWarnings ( " unsused " ) List < @ SuppressWarnings ( " unsused " ) T > { 
 + implements @ SuppressWarnings ( " unused " ) List < @ SuppressWarnings ( " unused " ) T > { 
 } 
 
 class MyObject { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java 
 index 7ed823a . . 51b8410 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations3 . java 
 @ @ - 5 , 10 + 5 , 10 @ @ import java . lang . annotation . Target ; 
 
 public class InputNoWhitespaceAfterArrayDeclarations3 
 { 
 - public void testWithAnnotationInMidle1 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct 
 - public void testWithAnnotationInMidle2 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct 
 - public void testWithAnnotationInMidle3 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct 
 - public void testWithAnnotationInMidle4 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct 
 + public void testWithAnnotationInMiddle1 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct 
 + public void testWithAnnotationInMiddle2 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct 
 + public void testWithAnnotationInMiddle3 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct 
 + public void testWithAnnotationInMiddle4 ( final char @ AnnotationAfterTest [ ] a ) { } / / Correct 
 
 @ Target ( ElementType . TYPE _ USE ) 
 @ interface AnnotationAfterTest { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java 
 index f2bd37e . . 368be86 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java 
 @ @ - 7 , 7 + 7 , 7 @ @ class InputNoWhitespaceAfterSynchronized { 
 } 
 } 
 
 - public void synchronzed ( ) { 
 + public void synchronized _ ( ) { 
 synchronized ( this ) { } 
 synchronized 
 ( this ) { }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 index 99e923c . . 5081b85 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 @ @ - 29 , 11 + 29 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . Utils ; 
 * " & lt ; " and " & gt ; " are correct to the < i > typical < / i > convention . 
 * The convention is not configurable . 
 * < / p > 
 - * < br / > 
 + * < br > 
 * < p > 
 * Left angle bracket ( " & lt ; " ) : 
 * < / p > 
 - * < br / > 
 + * < br > 
 * < ul > 
 * < li > should be preceded with whitespace only 
 * in generic methods definitions . < / li > 
 @ @ - 41 , 26 + 41 , 26 @ @ import com . puppycrawl . tools . checkstyle . api . Utils ; 
 * when it is precede method name or following type name . < / li > 
 * < li > should not be followed with whitespace in all cases . < / li > 
 * < / ul > 
 - * < br / > 
 + * < br > 
 * < p > 
 * Right angle bracket ( " & gt ; " ) : 
 * < / p > 
 - * < br / > 
 + * < br > 
 * < ul > 
 * < li > should not be preceded with whitespace in all cases . < / li > 
 * < li > should be followed with whitespace in almost all cases , 
 * except diamond operators and when preceding method name . < / li > < / ul > 
 - * < br / > 
 + * < br > 
 * < p > 
 * Examples with correct spacing : 
 * < / p > 
 - * < br / > 
 + * < br > 
 * < pre > 
 - * public void & lt ; K , V extends Number & gt ; boolean foo ( K , V ) { } / / Generic methods definitions 
 - * class name & lt ; T1 , T2 , . . . , Tn & gt ; { } / / Generic type definition 
 - * OrderedPair & lt ; String , Box & lt ; Integer & gt ; & gt ; p ; / / Generic type reference 
 - * boolean same = Util . & lt ; Integer , String & gt ; compare ( p1 , p2 ) ; / / Generic preceded method name 
 - * Pair & lt ; Integer , String > p1 = new Pair & lt ; & gt ; ( 1 , " apple " ) ; / / Diamond operator 
 + * public void & lt ; K , V extends Number & gt ; boolean foo ( K , V ) { } / / Generic methods definitions 
 + * class name & lt ; T1 , T2 , . . . , Tn & gt ; { } / / Generic type definition 
 + * OrderedPair & lt ; String , Box & lt ; Integer & gt ; & gt ; p ; / / Generic type reference 
 + * boolean same = Util . & lt ; Integer , String & gt ; compare ( p1 , p2 ) ; / / Generic preceded method name 
 + * Pair & lt ; Integer , String & gt ; p1 = new Pair & lt ; & gt ; ( 1 , " apple " ) ; / / Diamond operator 
 * < / pre > 
 * @ author Oliver Burn 
 * / 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 index 8b9b965 . . 0d7e3f8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 @ @ - 25 , 7 + 25 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 / * * 
 * < p > 
 * Checks that a token is surrounded by whitespace . 
 - * < / p > 
 + * 
 * < p > By default the check will check the following operators : 
 * { @ link TokenTypes # LITERAL _ ASSERT ASSERT } , 
 * { @ link TokenTypes # ASSIGN ASSIGN } , 
 @ @ - 78 , 22 + 78 , 24 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * { @ link TokenTypes # STAR _ ASSIGN STAR _ ASSIGN } , 
 * { @ link TokenTypes # LITERAL _ ASSERT LITERAL _ ASSERT } , 
 * { @ link TokenTypes # TYPE _ EXTENSION _ AND TYPE _ EXTENSION _ AND } . 
 - * < / p > 
 + * 
 * < p > 
 * An example of how to configure the check is : 
 - * < / p > 
 + * 
 * < pre > 
 * & lt ; module name = " WhitespaceAround " / & gt ; 
 * < / pre > 
 + * 
 * < p > An example of how to configure the check for whitespace only around 
 * assignment operators is : 
 - * < / p > 
 + * 
 * < pre > 
 * & lt ; module name = " WhitespaceAround " & gt ; 
 * & lt ; property name = " tokens " 
 * value = " ASSIGN , DIV _ ASSIGN , PLUS _ ASSIGN , MINUS _ ASSIGN , STAR _ ASSIGN , MOD _ ASSIGN , SR _ ASSIGN , BSR _ ASSIGN , SL _ ASSIGN , BXOR _ ASSIGN , BOR _ ASSIGN , BAND _ ASSIGN " / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 + * 
 * < p > 
 * In addition , this check can be configured to allow empty methods , types , 
 * for , while , do - while loops and constructor bodies .
