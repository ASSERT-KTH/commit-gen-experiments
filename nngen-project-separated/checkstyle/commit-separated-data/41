BLEU SCORE: 0.05095335964988338

TEST MSG: Issue # 6578 : Enable PMD rule LinguisticNaming
GENERATED MSG: Issue # 5005 : increase coverage of pitest - checks - metrics to 97 %

TEST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 5a1a0f4 . . 97b3861 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 71 , 8 + 71 , 6 @ @ <nl> < ! - - Calling super ( ) is completely pointless , no matter if class inherits anything or not ; <nl> it is meaningful only if you do not call implicit constructor of the base class . - - > <nl> < exclude name = " CallSuperInConstructor " / > <nl> - < ! - - Till https : / / github . com / checkstyle / checkstyle / issues / 6578 - - > <nl> - < exclude name = " LinguisticNaming " / > <nl> < ! - - Pollutes code with modifiers . - - > <nl> < exclude name = " LocalVariableCouldBeFinal " / > <nl> < ! - - Pollutes the code with modifiers . We use the ParameterAssignmentCheck to protect the <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java <nl> index 6c5a577 . . d752bc7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java <nl> @ @ - 61 , 7 + 61 , 7 @ @ public final class NPathComplexityCheck extends AbstractCheck { <nl> private final Deque < Integer > expressionValues = new ArrayDeque < > ( ) ; <nl> <nl> / * * Stack of belongs to range values for question operator . * / <nl> - private final Deque < Boolean > isAfterValues = new ArrayDeque < > ( ) ; <nl> + private final Deque < Boolean > afterValues = new ArrayDeque < > ( ) ; <nl> <nl> / * * <nl> * Range of the last processed expression . Used for checking that ternary operation <nl> @ @ - 122 , 7 + 122 , 7 @ @ public final class NPathComplexityCheck extends AbstractCheck { <nl> public void beginTree ( DetailAST rootAST ) { <nl> rangeValues . clear ( ) ; <nl> expressionValues . clear ( ) ; <nl> - isAfterValues . clear ( ) ; <nl> + afterValues . clear ( ) ; <nl> processingTokenEnd . reset ( ) ; <nl> currentRangeValue = INITIAL _ VALUE ; <nl> branchVisited = false ; <nl> @ @ - 237 , 7 + 237 , 7 @ @ public final class NPathComplexityCheck extends AbstractCheck { <nl> * / <nl> private void visitUnitaryOperator ( DetailAST ast , int basicBranchingFactor ) { <nl> final boolean isAfter = processingTokenEnd . isAfter ( ast ) ; <nl> - isAfterValues . push ( isAfter ) ; <nl> + afterValues . push ( isAfter ) ; <nl> if ( ! isAfter ) { <nl> processingTokenEnd . setToken ( getLastToken ( ast ) ) ; <nl> final int expressionValue = basicBranchingFactor + countConditionalOperators ( ast ) ; <nl> @ @ - 249 , 7 + 249 , 7 @ @ public final class NPathComplexityCheck extends AbstractCheck { <nl> * Leaves ternary operator ( ? : ) and return tokens . <nl> * / <nl> private void leaveUnitaryOperator ( ) { <nl> - if ( ! isAfterValues . pop ( ) ) { <nl> + if ( ! afterValues . pop ( ) ) { <nl> final Values valuePair = popValue ( ) ; <nl> BigInteger basicRangeValue = valuePair . getRangeValue ( ) ; <nl> BigInteger expressionValue = valuePair . getExpressionValue ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> index a5e74af . . 2f5522c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> @ @ - 490 , 11 + 490 , 11 @ @ public class VisibilityModifierCheckTest <nl> new File ( getPath ( " InputVisibilityModifierIsStarImport . java " ) ) , <nl> JavaParser . Options . WITHOUT _ COMMENTS ) . getNextSibling ( ) ; <nl> final VisibilityModifierCheck check = new VisibilityModifierCheck ( ) ; <nl> - final Method isStarImport = Whitebox . getMethod ( VisibilityModifierCheck . class , <nl> + final Method method = Whitebox . getMethod ( VisibilityModifierCheck . class , <nl> " isStarImport " , DetailAST . class ) ; <nl> <nl> assertTrue ( " Should return true when star import is passed " , <nl> - ( boolean ) isStarImport . invoke ( check , importAst ) ) ; <nl> + ( boolean ) method . invoke ( check , importAst ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java <nl> index 9927f4e . . c925d5d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java <nl> @ @ - 47 , 11 + 47 , 11 @ @ public class AbstractTypeAwareCheckTest extends AbstractModuleTestSupport { <nl> @ Test <nl> public void testIsSubclassWithNulls ( ) throws Exception { <nl> final JavadocMethodCheck check = new JavadocMethodCheck ( ) ; <nl> - final Method isSubclass = check . getClass ( ) . getSuperclass ( ) <nl> + final Method method = check . getClass ( ) . getSuperclass ( ) <nl> . getDeclaredMethod ( " isSubclass " , Class . class , Class . class ) ; <nl> - isSubclass . setAccessible ( true ) ; <nl> + method . setAccessible ( true ) ; <nl> assertFalse ( " Should return false if at least one of the params is null " , <nl> - ( boolean ) isSubclass . invoke ( check , null , null ) ) ; <nl> + ( boolean ) method . invoke ( check , null , null ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> index 80172d5 . . 35c535f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> @ @ - 156 , 7 + 156 , 7 @ @ public class NPathComplexityCheckTest extends AbstractModuleTestSupport { <nl> <nl> final NPathComplexityCheck check = new NPathComplexityCheck ( ) ; <nl> Assert . assertTrue ( " Stateful field is not cleared after beginTree " , <nl> - TestUtil . isStatefulFieldClearedDuringBeginTree ( check , ast , " isAfterValues " , <nl> + TestUtil . isStatefulFieldClearedDuringBeginTree ( check , ast , " afterValues " , <nl> isAfterValues - > ( ( Collection < Context > ) isAfterValues ) . isEmpty ( ) ) ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / . ci / eclipse - compiler - javac . sh b / . ci / eclipse - compiler - javac . sh <nl> index 5d1c037 . . a8e109e 100755 <nl> - - - a / . ci / eclipse - compiler - javac . sh <nl> + + + b / . ci / eclipse - compiler - javac . sh <nl> @ @ - 22 , 8 + 22 , 8 @ @ java - jar $ ECJ _ PATH - target 1 . 8 - source 1 . 8 - cp $ 1 \ <nl> - enableJavadoc src / main / java target / generated - sources / antlr - properties config / org . eclipse . jdt . core . prefs \ <nl> > $ RESULT _ FILE 2 > & 1 | true <nl> <nl> - echo " Checking for ERRORs in $ RESULT _ FILE . . . " <nl> - if [ [ $ ( grep ERROR $ RESULT _ FILE | cat | wc - l ) > 0 ] ] ; then <nl> + echo " Checking for ERROR | WARNING | INFO in $ RESULT _ FILE . . . " <nl> + if [ [ $ ( grep - E " ERROR | WARNING | INFO " $ RESULT _ FILE | cat | wc - l ) > 0 ] ] ; then <nl> cat $ RESULT _ FILE <nl> false <nl> fi <nl> diff - - git a / config / org . eclipse . jdt . core . prefs b / config / org . eclipse . jdt . core . prefs <nl> index 4edab5e . . 415ba57 100644 <nl> - - - a / config / org . eclipse . jdt . core . prefs <nl> + + + b / config / org . eclipse . jdt . core . prefs <nl> @ @ - 72 , 10 + 72 , 10 @ @ org . eclipse . jdt . core . compiler . annotation . missingNonNullByDefaultAnnotation = ignor <nl> org . eclipse . jdt . core . compiler . problem . autoboxing = ignore <nl> org . eclipse . jdt . core . compiler . problem . potentiallyUnclosedCloseable = ignore <nl> org . eclipse . jdt . core . compiler . problem . potentialNullReference = ignore <nl> - org . eclipse . jdt . core . compiler . problem . rawTypeReference = ignore <nl> + org . eclipse . jdt . core . compiler . problem . rawTypeReference = warning <nl> org . eclipse . jdt . core . compiler . problem . reportMethodCanBePotentiallyStatic = ignore <nl> org . eclipse . jdt . core . compiler . problem . syntheticAccessEmulation = ignore <nl> - org . eclipse . jdt . core . compiler . problem . uncheckedTypeOperation = ignore <nl> + org . eclipse . jdt . core . compiler . problem . uncheckedTypeOperation = warning <nl> org . eclipse . jdt . core . compiler . problem . unnecessaryElse = ignore <nl> org . eclipse . jdt . core . compiler . problem . unnecessaryTypeCheck = ignore <nl> org . eclipse . jdt . core . compiler . problem . unqualifiedFieldAccess = ignore <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index 2a5661d . . 3fc3282 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 46 , 8 + 46 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> * @ author Oliver Burn <nl> * @ author Rick Giles <nl> * @ author o _ sukhodoslky <nl> + * <nl> + * @ noinspection deprecation <nl> * / <nl> - @ SuppressWarnings ( " deprecation " ) <nl> public class JavadocMethodCheck extends AbstractTypeAwareCheck { <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java b / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java <nl> index 3b1c072 . . 6a69971 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java <nl> @ @ - 146 , 7 + 146 , 7 @ @ public abstract class AbstractNode implements NodeInfo { <nl> * @ return namespace array <nl> * / <nl> @ Override <nl> - public final NamespaceBinding [ ] getDeclaredNamespaces ( NamespaceBinding . . . namespaceBindings ) { <nl> + public final NamespaceBinding [ ] getDeclaredNamespaces ( NamespaceBinding [ ] namespaceBindings ) { <nl> throw throwUnsupportedOperationException ( ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java <nl> index 253b16b . . 2ebea4d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java <nl> @ @ - 132 , 7 + 132 , 8 @ @ public class RootNodeTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testGetDeclaredNamespaces ( ) throws Exception { <nl> try { <nl> - rootNode . getDeclaredNamespaces ( new NamespaceBinding ( " prefix " , " uri " ) ) ; <nl> + rootNode . getDeclaredNamespaces ( <nl> + new NamespaceBinding [ ] { new NamespaceBinding ( " prefix " , " uri " ) } ) ; <nl> fail ( " Exception is excepted " ) ; <nl> } <nl> catch ( UnsupportedOperationException ex ) {

TEST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 5a1a0f4 . . 97b3861 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 71 , 8 + 71 , 6 @ @ 
 < ! - - Calling super ( ) is completely pointless , no matter if class inherits anything or not ; 
 it is meaningful only if you do not call implicit constructor of the base class . - - > 
 < exclude name = " CallSuperInConstructor " / > 
 - < ! - - Till https : / / github . com / checkstyle / checkstyle / issues / 6578 - - > 
 - < exclude name = " LinguisticNaming " / > 
 < ! - - Pollutes code with modifiers . - - > 
 < exclude name = " LocalVariableCouldBeFinal " / > 
 < ! - - Pollutes the code with modifiers . We use the ParameterAssignmentCheck to protect the 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java 
 index 6c5a577 . . d752bc7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java 
 @ @ - 61 , 7 + 61 , 7 @ @ public final class NPathComplexityCheck extends AbstractCheck { 
 private final Deque < Integer > expressionValues = new ArrayDeque < > ( ) ; 
 
 / * * Stack of belongs to range values for question operator . * / 
 - private final Deque < Boolean > isAfterValues = new ArrayDeque < > ( ) ; 
 + private final Deque < Boolean > afterValues = new ArrayDeque < > ( ) ; 
 
 / * * 
 * Range of the last processed expression . Used for checking that ternary operation 
 @ @ - 122 , 7 + 122 , 7 @ @ public final class NPathComplexityCheck extends AbstractCheck { 
 public void beginTree ( DetailAST rootAST ) { 
 rangeValues . clear ( ) ; 
 expressionValues . clear ( ) ; 
 - isAfterValues . clear ( ) ; 
 + afterValues . clear ( ) ; 
 processingTokenEnd . reset ( ) ; 
 currentRangeValue = INITIAL _ VALUE ; 
 branchVisited = false ; 
 @ @ - 237 , 7 + 237 , 7 @ @ public final class NPathComplexityCheck extends AbstractCheck { 
 * / 
 private void visitUnitaryOperator ( DetailAST ast , int basicBranchingFactor ) { 
 final boolean isAfter = processingTokenEnd . isAfter ( ast ) ; 
 - isAfterValues . push ( isAfter ) ; 
 + afterValues . push ( isAfter ) ; 
 if ( ! isAfter ) { 
 processingTokenEnd . setToken ( getLastToken ( ast ) ) ; 
 final int expressionValue = basicBranchingFactor + countConditionalOperators ( ast ) ; 
 @ @ - 249 , 7 + 249 , 7 @ @ public final class NPathComplexityCheck extends AbstractCheck { 
 * Leaves ternary operator ( ? : ) and return tokens . 
 * / 
 private void leaveUnitaryOperator ( ) { 
 - if ( ! isAfterValues . pop ( ) ) { 
 + if ( ! afterValues . pop ( ) ) { 
 final Values valuePair = popValue ( ) ; 
 BigInteger basicRangeValue = valuePair . getRangeValue ( ) ; 
 BigInteger expressionValue = valuePair . getExpressionValue ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 index a5e74af . . 2f5522c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 @ @ - 490 , 11 + 490 , 11 @ @ public class VisibilityModifierCheckTest 
 new File ( getPath ( " InputVisibilityModifierIsStarImport . java " ) ) , 
 JavaParser . Options . WITHOUT _ COMMENTS ) . getNextSibling ( ) ; 
 final VisibilityModifierCheck check = new VisibilityModifierCheck ( ) ; 
 - final Method isStarImport = Whitebox . getMethod ( VisibilityModifierCheck . class , 
 + final Method method = Whitebox . getMethod ( VisibilityModifierCheck . class , 
 " isStarImport " , DetailAST . class ) ; 
 
 assertTrue ( " Should return true when star import is passed " , 
 - ( boolean ) isStarImport . invoke ( check , importAst ) ) ; 
 + ( boolean ) method . invoke ( check , importAst ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java 
 index 9927f4e . . c925d5d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractTypeAwareCheckTest . java 
 @ @ - 47 , 11 + 47 , 11 @ @ public class AbstractTypeAwareCheckTest extends AbstractModuleTestSupport { 
 @ Test 
 public void testIsSubclassWithNulls ( ) throws Exception { 
 final JavadocMethodCheck check = new JavadocMethodCheck ( ) ; 
 - final Method isSubclass = check . getClass ( ) . getSuperclass ( ) 
 + final Method method = check . getClass ( ) . getSuperclass ( ) 
 . getDeclaredMethod ( " isSubclass " , Class . class , Class . class ) ; 
 - isSubclass . setAccessible ( true ) ; 
 + method . setAccessible ( true ) ; 
 assertFalse ( " Should return false if at least one of the params is null " , 
 - ( boolean ) isSubclass . invoke ( check , null , null ) ) ; 
 + ( boolean ) method . invoke ( check , null , null ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 index 80172d5 . . 35c535f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 @ @ - 156 , 7 + 156 , 7 @ @ public class NPathComplexityCheckTest extends AbstractModuleTestSupport { 
 
 final NPathComplexityCheck check = new NPathComplexityCheck ( ) ; 
 Assert . assertTrue ( " Stateful field is not cleared after beginTree " , 
 - TestUtil . isStatefulFieldClearedDuringBeginTree ( check , ast , " isAfterValues " , 
 + TestUtil . isStatefulFieldClearedDuringBeginTree ( check , ast , " afterValues " , 
 isAfterValues - > ( ( Collection < Context > ) isAfterValues ) . isEmpty ( ) ) ) ; 
 } 


NEAREST DIFF:
diff - - git a / . ci / eclipse - compiler - javac . sh b / . ci / eclipse - compiler - javac . sh 
 index 5d1c037 . . a8e109e 100755 
 - - - a / . ci / eclipse - compiler - javac . sh 
 + + + b / . ci / eclipse - compiler - javac . sh 
 @ @ - 22 , 8 + 22 , 8 @ @ java - jar $ ECJ _ PATH - target 1 . 8 - source 1 . 8 - cp $ 1 \ 
 - enableJavadoc src / main / java target / generated - sources / antlr - properties config / org . eclipse . jdt . core . prefs \ 
 > $ RESULT _ FILE 2 > & 1 | true 
 
 - echo " Checking for ERRORs in $ RESULT _ FILE . . . " 
 - if [ [ $ ( grep ERROR $ RESULT _ FILE | cat | wc - l ) > 0 ] ] ; then 
 + echo " Checking for ERROR | WARNING | INFO in $ RESULT _ FILE . . . " 
 + if [ [ $ ( grep - E " ERROR | WARNING | INFO " $ RESULT _ FILE | cat | wc - l ) > 0 ] ] ; then 
 cat $ RESULT _ FILE 
 false 
 fi 
 diff - - git a / config / org . eclipse . jdt . core . prefs b / config / org . eclipse . jdt . core . prefs 
 index 4edab5e . . 415ba57 100644 
 - - - a / config / org . eclipse . jdt . core . prefs 
 + + + b / config / org . eclipse . jdt . core . prefs 
 @ @ - 72 , 10 + 72 , 10 @ @ org . eclipse . jdt . core . compiler . annotation . missingNonNullByDefaultAnnotation = ignor 
 org . eclipse . jdt . core . compiler . problem . autoboxing = ignore 
 org . eclipse . jdt . core . compiler . problem . potentiallyUnclosedCloseable = ignore 
 org . eclipse . jdt . core . compiler . problem . potentialNullReference = ignore 
 - org . eclipse . jdt . core . compiler . problem . rawTypeReference = ignore 
 + org . eclipse . jdt . core . compiler . problem . rawTypeReference = warning 
 org . eclipse . jdt . core . compiler . problem . reportMethodCanBePotentiallyStatic = ignore 
 org . eclipse . jdt . core . compiler . problem . syntheticAccessEmulation = ignore 
 - org . eclipse . jdt . core . compiler . problem . uncheckedTypeOperation = ignore 
 + org . eclipse . jdt . core . compiler . problem . uncheckedTypeOperation = warning 
 org . eclipse . jdt . core . compiler . problem . unnecessaryElse = ignore 
 org . eclipse . jdt . core . compiler . problem . unnecessaryTypeCheck = ignore 
 org . eclipse . jdt . core . compiler . problem . unqualifiedFieldAccess = ignore 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index 2a5661d . . 3fc3282 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 46 , 8 + 46 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 * @ author Oliver Burn 
 * @ author Rick Giles 
 * @ author o _ sukhodoslky 
 + * 
 + * @ noinspection deprecation 
 * / 
 - @ SuppressWarnings ( " deprecation " ) 
 public class JavadocMethodCheck extends AbstractTypeAwareCheck { 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java b / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java 
 index 3b1c072 . . 6a69971 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java 
 @ @ - 146 , 7 + 146 , 7 @ @ public abstract class AbstractNode implements NodeInfo { 
 * @ return namespace array 
 * / 
 @ Override 
 - public final NamespaceBinding [ ] getDeclaredNamespaces ( NamespaceBinding . . . namespaceBindings ) { 
 + public final NamespaceBinding [ ] getDeclaredNamespaces ( NamespaceBinding [ ] namespaceBindings ) { 
 throw throwUnsupportedOperationException ( ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java 
 index 253b16b . . 2ebea4d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java 
 @ @ - 132 , 7 + 132 , 8 @ @ public class RootNodeTest extends AbstractPathTestSupport { 
 @ Test 
 public void testGetDeclaredNamespaces ( ) throws Exception { 
 try { 
 - rootNode . getDeclaredNamespaces ( new NamespaceBinding ( " prefix " , " uri " ) ) ; 
 + rootNode . getDeclaredNamespaces ( 
 + new NamespaceBinding [ ] { new NamespaceBinding ( " prefix " , " uri " ) } ) ; 
 fail ( " Exception is excepted " ) ; 
 } 
 catch ( UnsupportedOperationException ex ) {
