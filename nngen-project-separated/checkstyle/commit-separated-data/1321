BLEU SCORE: 0.013139808552042212

TEST MSG: Issue # 924 : Fix enforcement of declaration order which leads to illegal forward reference
GENERATED MSG: DeclarationOrder check contibuted by Roland Auckenthaler

TEST DIFF (one line): diff - - git a / config / findbugs - exclude . xml b / config / findbugs - exclude . xml <nl> index 1ed5459 . . 78c1920 100644 <nl> - - - a / config / findbugs - exclude . xml <nl> + + + b / config / findbugs - exclude . xml <nl> @ @ - 78 , 6 + 78 , 7 @ @ <nl> < Or > <nl> < Class name = " com . puppycrawl . tools . checkstyle . checks . AbstractDeclarationCollector " / > <nl> < Class name = " com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck " / > <nl> + < Class name = " com . puppycrawl . tools . checkstyle . checks . coding . DeclarationOrderCheck " / > <nl> < Class name = " com . puppycrawl . tools . checkstyle . checks . OuterTypeFilenameCheck " / > <nl> < Class name = " com . puppycrawl . tools . checkstyle . checks . regexp . RegexpCheck " / > <nl> < ! - - createJavadocNode is private and can not be launched without visitToken - - > <nl> diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index df31414 . . 04cb8b8 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 21 , 14 + 21 , 16 @ @ <nl> < properties > <nl> < property name = " showClassesComplexity " value = " false " / > <nl> < property name = " reportLevel " value = " 11 " / > <nl> - < ! - - validateCli is not reasonable to split as encapsulation of logic will be damaged <nl> + < ! - - DeclarationOrder - ' visitToken ' has just big SWITCH block which contains IF blocks . <nl> + If we split the block to several methods it will demage readibility . <nl> + validateCli is not reasonable to split as encapsulation of logic will be damaged <nl> getDetails - huge Switch , it has to be monolithic <nl> JavadocMethodCheck , JavadocStyleCheck , JavadocUtils . getJavadocTags ( ) - deprecated <nl> FinalLocalVariableCheck . visitToken ( ) - it is just big switch , not could be done <nl> GenericWhitespaceCheck . processSingleGeneric ( ) - it contains a lot of similar to each other and very simple condition <nl> VariableDeclarationUsageDistanceCheck , CustomImportOrderCheck - it is not OK to have such a complicated logic need to be refactored . <nl> - - > <nl> - < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' validateCli ' and . . / . . / . . [ @ Image = ' Main ' ] ] | / / MethodDeclaration [ @ Name = ' processSingleGeneric ' and . . / . . / . . [ @ Image = ' GenericWhitespaceCheck ' ] ] | / / MethodDeclaration [ @ Name = ' visitToken ' and . . / . . / . . [ @ Image = ' FinalLocalVariableCheck ' ] ] | / / MethodDeclaration [ @ Name = ' getJavadocTags ' and . . / . . / . . [ @ Image = ' JavadocUtils ' ] ] | / / MethodDeclaration [ @ Name = ' getDetails ' and . . / . . / . . [ @ Image = ' RightCurlyCheck ' ] ] | / / ClassOrInterfaceDeclaration [ @ Image = ' JavadocMethodCheck ' or @ Image = ' JavadocStyleCheck ' or @ Image = ' VariableDeclarationUsageDistanceCheck ' or @ Image = ' CustomImportOrderCheck ' ] " / > <nl> + < property name = " violationSuppressXPath " value = " / / DeclarationOrder [ @ Name = ' visitToken ' ] and / / MethodDeclaration [ @ Name = ' validateCli ' and . . / . . / . . [ @ Image = ' Main ' ] ] | / / MethodDeclaration [ @ Name = ' processSingleGeneric ' and . . / . . / . . [ @ Image = ' GenericWhitespaceCheck ' ] ] | / / MethodDeclaration [ @ Name = ' visitToken ' and . . / . . / . . [ @ Image = ' FinalLocalVariableCheck ' ] ] | / / MethodDeclaration [ @ Name = ' getJavadocTags ' and . . / . . / . . [ @ Image = ' JavadocUtils ' ] ] | / / MethodDeclaration [ @ Name = ' getDetails ' and . . / . . / . . [ @ Image = ' RightCurlyCheck ' ] ] | / / ClassOrInterfaceDeclaration [ @ Image = ' JavadocMethodCheck ' or @ Image = ' JavadocStyleCheck ' or @ Image = ' VariableDeclarationUsageDistanceCheck ' or @ Image = ' CustomImportOrderCheck ' ] " / > <nl> < / properties > <nl> < / rule > <nl> < rule ref = " rulesets / java / codesize . xml / NPathComplexity " > <nl> diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 6f44797 . . 9b4a41e 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 143 , 6 + 143 , 10 @ @ <nl> < ! - - SWITCH was transformed into IF - ELSE - - > <nl> < suppress checks = " CyclomaticComplexity " files = " ImportOrderCheck \ . java " lines = " 344 " / > <nl> <nl> + < ! - - Just big SWITCH block which contains IF blocks in ' visitToken ' . <nl> + If we split the block to several methods it will demage readibility . - - > <nl> + < suppress checks = " CyclomaticComplexity " files = " DeclarationOrderCheck \ . java " lines = " 189 " / > <nl> + <nl> < ! - - LocalizedMessage class is immutable , we need that amount of arguments . - - > <nl> < suppress checks = " ParameterNumber " <nl> files = " LocalizedMessage . java " <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> index 7300676 . . 8864230 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> @ @ - 19 , 9 + 19 , 11 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> - import java . util . ArrayDeque ; <nl> import java . util . Deque ; <nl> + import java . util . Set ; <nl> <nl> + import com . google . common . collect . Queues ; <nl> + import com . google . common . collect . Sets ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . Scope ; <nl> @ @ - 31 , 9 + 33 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> / * * <nl> * Checks that the parts of a class or interface declaration <nl> * appear in the order suggested by the <nl> - * < a <nl> - * href = " http : / / www . oracle . com / technetwork / java / javase / documentation / codeconventions - 141855 . html # 1852 " <nl> - * > Code Conventions for the Java Programming Language < / a > . <nl> + * < a href = <nl> + * " http : / / www . oracle . com / technetwork / java / javase / documentation / codeconventions - 141855 . html # 1852 " > <nl> + * Code Conventions for the Java Programming Language < / a > . <nl> * <nl> * <nl> * < ol > <nl> @ @ - 47 , 6 + 49 , 18 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> * < li > Methods < / li > <nl> * < / ol > <nl> * <nl> + * < p > ATTENTION : the check skips class fields which have <nl> + * < a href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 8 . html # jls - 8 . 3 . 3 " > <nl> + * forward references < / a > from validation due to the fact that we have Checkstyle ' s limitations <nl> + * to clearly detect user intention of fields location and grouping . For example , <nl> + * < pre > { @ code <nl> + * public class A { <nl> + * private double x = 1 . 0 ; <nl> + * private double y = 2 . 0 ; <nl> + * public double slope = x / y ; / / will be skipped from validation due to forward reference <nl> + * } <nl> + * } < / pre > <nl> + * <nl> * < p > Available options : <nl> * < ul > <nl> * < li > ignoreModifiers < / li > <nl> @ @ - 133 , 9 + 147 , 12 @ @ public class DeclarationOrderCheck extends AbstractCheck { <nl> <nl> / * * <nl> * List of Declaration States . This is necessary due to <nl> - * inner classes that have their own state <nl> + * inner classes that have their own state . <nl> * / <nl> - private final Deque < ScopeState > scopeStates = new ArrayDeque < > ( ) ; <nl> + private Deque < ScopeState > scopeStates ; <nl> + <nl> + / * * Set of all class field names . * / <nl> + private Set < String > classFieldNames ; <nl> <nl> / * * If true , ignores the check to constructors . * / <nl> private boolean ignoreConstructors ; <nl> @ @ - 154 , 6 + 171 , 7 @ @ public class DeclarationOrderCheck extends AbstractCheck { <nl> TokenTypes . METHOD _ DEF , <nl> TokenTypes . MODIFIERS , <nl> TokenTypes . OBJBLOCK , <nl> + TokenTypes . VARIABLE _ DEF , <nl> } ; <nl> } <nl> <nl> @ @ - 163 , 6 + 181 , 12 @ @ public class DeclarationOrderCheck extends AbstractCheck { <nl> } <nl> <nl> @ Override <nl> + public void beginTree ( DetailAST rootAST ) { <nl> + scopeStates = Queues . newArrayDeque ( ) ; <nl> + classFieldNames = Sets . newHashSet ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> final int parentType = ast . getParent ( ) . getType ( ) ; <nl> <nl> @ @ - 188 , 14 + 212 , 20 @ @ public class DeclarationOrderCheck extends AbstractCheck { <nl> state . currentScopeState = STATE _ METHOD _ DEF ; <nl> } <nl> break ; <nl> + case TokenTypes . VARIABLE _ DEF : <nl> + if ( ScopeUtils . isClassFieldDef ( ast ) ) { <nl> + final DetailAST fieldDef = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> + classFieldNames . add ( fieldDef . getText ( ) ) ; <nl> + } <nl> + break ; <nl> default : <nl> break ; <nl> } <nl> } <nl> <nl> / * * <nl> - * Process constructor . <nl> - * @ param ast constructor AST <nl> + * Processes constructor . <nl> + * @ param ast constructor AST . <nl> * / <nl> private void processConstructor ( DetailAST ast ) { <nl> <nl> @ @ - 211 , 8 + 241 , 8 @ @ public class DeclarationOrderCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Process modifiers . <nl> - * @ param ast ast of Modifiers <nl> + * Processes modifiers . <nl> + * @ param ast ast of Modifiers . <nl> * / <nl> private void processModifiers ( DetailAST ast ) { <nl> <nl> @ @ - 240 , 7 + 270 , 8 @ @ public class DeclarationOrderCheck extends AbstractCheck { <nl> <nl> final Scope access = ScopeUtils . getScopeFromMods ( ast ) ; <nl> if ( state . declarationAccess . compareTo ( access ) > 0 ) { <nl> - if ( ! ignoreModifiers ) { <nl> + if ( ! ignoreModifiers <nl> + & & ! isForwardReference ( ast . getParent ( ) ) ) { <nl> log ( ast , MSG _ ACCESS ) ; <nl> } <nl> } <nl> @ @ - 249 , 6 + 280 , 51 @ @ public class DeclarationOrderCheck extends AbstractCheck { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Checks whether an identifier references a field which has been already defined in class . <nl> + * @ param fieldDef a field definition . <nl> + * @ return true if an identifier references a field which has been already defined in class . <nl> + * / <nl> + private boolean isForwardReference ( DetailAST fieldDef ) { <nl> + final DetailAST exprStartIdent = fieldDef . findFirstToken ( TokenTypes . IDENT ) ; <nl> + final Set < DetailAST > exprIdents = getAllTokensOfType ( exprStartIdent , TokenTypes . IDENT ) ; <nl> + boolean forwardReference = false ; <nl> + for ( DetailAST ident : exprIdents ) { <nl> + if ( classFieldNames . contains ( ident . getText ( ) ) ) { <nl> + forwardReference = true ; <nl> + break ; <nl> + } <nl> + } <nl> + return forwardReference ; <nl> + } <nl> + <nl> + / * * <nl> + * Collects all tokens of specific type starting with the current ast node . <nl> + * @ param ast ast node . <nl> + * @ param tokenType token type . <nl> + * @ return a set of all tokens of specific type starting with the current ast node . <nl> + * / <nl> + private static Set < DetailAST > getAllTokensOfType ( DetailAST ast , int tokenType ) { <nl> + DetailAST vertex = ast ; <nl> + final Set < DetailAST > result = Sets . newHashSet ( ) ; <nl> + final Deque < DetailAST > stack = Queues . newArrayDeque ( ) ; <nl> + while ( vertex ! = null | | ! stack . isEmpty ( ) ) { <nl> + if ( ! stack . isEmpty ( ) ) { <nl> + vertex = stack . pop ( ) ; <nl> + } <nl> + while ( vertex ! = null ) { <nl> + if ( vertex . getType ( ) = = tokenType & & ! vertex . equals ( ast ) ) { <nl> + result . add ( vertex ) ; <nl> + } <nl> + if ( vertex . getNextSibling ( ) ! = null ) { <nl> + stack . push ( vertex . getNextSibling ( ) ) ; <nl> + } <nl> + vertex = vertex . getFirstChild ( ) ; <nl> + } <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> @ Override <nl> public void leaveToken ( DetailAST ast ) { <nl> if ( ast . getType ( ) = = TokenTypes . OBJBLOCK ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java <nl> index 3bd30d7 . . e0c00e5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java <nl> @ @ - 267 , 6 + 267 , 17 @ @ public final class ScopeUtils { <nl> } <nl> <nl> / * * <nl> + * Determines whether a node is a class field definition . <nl> + * I . e . if it is not declared in a code block , a for initializer , <nl> + * or a catch parameter . <nl> + * @ param node the node to check . <nl> + * @ return whether a node is a class field definition . <nl> + * / <nl> + public static boolean isClassFieldDef ( DetailAST node ) { <nl> + return ! isLocalVariableDef ( node ) ; <nl> + } <nl> + <nl> + / * * <nl> * Checks whether ast node is in a specific scope . <nl> * @ param ast the node to check . <nl> * @ param scope a { @ code Scope } value . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> index 5bda760 . . ee9d29c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> @ @ - 171 , 4 + 171 , 21 @ @ public class DeclarationOrderCheckTest <nl> final DeclarationOrderCheck check = new DeclarationOrderCheck ( ) ; <nl> check . visitToken ( array ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testForwardReference ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( DeclarationOrderCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 12 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 13 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 14 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 15 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 16 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 17 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 23 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 41 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + " 41 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputDeclarationOrderForwardReference . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrderForwardReference . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrderForwardReference . java <nl> new file mode 100644 <nl> index 0000000 . . 9337096 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrderForwardReference . java <nl> @ @ - 0 , 0 + 1 , 47 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> + public class InputDeclarationOrderForwardReference { <nl> + <nl> + public static final int TAB _ LENGTH = 4 ; <nl> + private static final ArrayList < String > EMPTY _ ARRAY _ LIST = new ArrayList < String > ( ) ; <nl> + public static final int MAX _ INT = Integer . MAX _ VALUE ; / / violation <nl> + public static final int MAX _ BYTE = Byte . MIN _ VALUE ; / / violation <nl> + public static final int ROWS = 18 ; / / violation <nl> + public static final int COLUMNS = 18 ; / / violation <nl> + public static final int TYPE _ SIZE = 12 ; / / violation <nl> + public static final int TABLE _ SIZE = 184 ; / / violation <nl> + public static final int INFRASTRUCTURE _ SIZE = TYPE _ SIZE <nl> + + MAX _ BYTE <nl> + + TABLE _ SIZE ; <nl> + public static final int MAX _ LINE _ LENGTH = 96 + TAB _ LENGTH ; <nl> + <nl> + public static final double MIN _ MATCH = 0 . 60 ; / / violation <nl> + public static final double EXACT _ CLASS _ NAME _ MATCH = MIN _ MATCH + 0 . 1 ; <nl> + <nl> + private static final String COMMON _ PART = " common _ part " ; <nl> + public static final String FIRST = COMMON _ PART + " 2 " ; <nl> + <nl> + private static final String SECOND = String . valueOf ( TokenTypes . ELIST ) + FIRST ; <nl> + public static final String THIDRD = FIRST ; <nl> + <nl> + private static int ID = 5 ; <nl> + public static final String FOURTH = " 1 " <nl> + + ID <nl> + + COMMON _ PART ; <nl> + <nl> + private int a = 1 ; <nl> + public int b = a + 2 ; <nl> + <nl> + public static void foo1 ( ) { } <nl> + public static final double MAX = 0 . 60 ; / / violation <nl> + public static void foo2 ( ) { } <nl> + <nl> + void foo3 ( ) { <nl> + int i = 5 ; <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index a20ad57 . . 20b61d9 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 300 , 6 + 300 , 20 @ @ class Test { <nl> < p > <nl> Purpose of < b > ignore * < / b > option is to ignore related violations , however it still impacts on other class members . <nl> < / p > <nl> + <nl> + < p > <nl> + ATTENTION : the check skips class fields which have <nl> + < a href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 8 . html # jls - 8 . 3 . 3 " > forward references < / a > <nl> + from validation due to the fact that we have Checkstyle ' s limitations to clearly <nl> + detect user intention of fields location and grouping . For example , <nl> + < source > <nl> + public class A { <nl> + private double x = 1 . 0 ; <nl> + private double y = 2 . 0 ; <nl> + public double slope = x / y ; / / will be skipped from validation due to forward reference <nl> + } <nl> + < / source > <nl> + < / p > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " >
NEAREST DIFF (one line): diff - - git a / docs / config _ coding . html b / docs / config _ coding . html <nl> index ff5cce2 . . 11f2745 100644 <nl> - - - a / docs / config _ coding . html <nl> + + + b / docs / config _ coding . html <nl> @ @ - 59 , 6 + 59 , 9 @ @ <nl> < a href = " # InnerAssignment " > InnerAssignment < / a > <nl> < / li > <nl> < li > <nl> + < a href = " # JUnitTestCase " > JUnitTestCase < / a > <nl> + < / li > <nl> + < li > <nl> < a href = " # MagicNumber " > MagicNumber < / a > <nl> < / li > <nl> < li > <nl> @ @ - 1088 , 6 + 1091 , 35 @ @ return ! valid ( ) ; <nl> < a href = " config . html # treewalker " > TreeWalker < / a > <nl> < / p > <nl> <nl> + < ! - - - - > < a name = " JUnitTestCase " > < / a > < h2 > JUnitTestCase < / h2 > <nl> + < h4 > Description < / h4 > <nl> + < p class = " body " > <nl> + Ensures that the setUp ( ) , tearDown ( ) methods are named correctly , <nl> + have no arguments , return void and are either public or protected . < br > <nl> + Also ensures that suite ( ) is named correctly , have no arguments , return <nl> + junit . framewotk . Test , public and static . <nl> + < / p > <nl> + < p class = " body " > <nl> + Rationale : often times developers will misname one or more of these <nl> + methods and not realise that the method is not being called . <nl> + < / p > <nl> + <nl> + < h4 > Examples < / h4 > <nl> + < p class = " body " > <nl> + To configure the check : <nl> + < / p > <nl> + < pre class = " body " > <nl> + & lt ; module name = & quot ; JUnitTestCase & quot ; / & gt ; <nl> + < / pre > <nl> + < h4 > Package < / h4 > <nl> + < p class = " body " > <nl> + com . puppycrawl . tools . checkstyle . checks . coding <nl> + < / p > <nl> + < h4 > Parent Module < / h4 > <nl> + < p class = " body " > <nl> + < a href = " config . html # treewalker " > TreeWalker < / a > <nl> + < / p > <nl> + <nl> < / td > <nl> < / tr > <nl> < / table > <nl> diff - - git a / docs / releasenotes . html b / docs / releasenotes . html <nl> index 445a1aa . . a172752 100644 <nl> - - - a / docs / releasenotes . html <nl> + + + b / docs / releasenotes . html <nl> @ @ - 145 , 6 + 145 , 8 @ @ <nl> <nl> < li class = " body " > Added PackageDeclaration check . ( request 750753 ) . < / li > <nl> <nl> + < li class = " body " > Added JUnitTestCase check . ( request 750761 ) . < / li > <nl> + <nl> < / ul > <nl> <nl> < p class = " body " > <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 1ccd996 <nl> - - - / dev / null <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheck . java <nl> @ @ - 0 , 0 + 1 , 228 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2003 Oliver Burn <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . CheckUtils ; <nl> + <nl> + / * * <nl> + * Ensures that the setUp ( ) , tearDown ( ) methods are named correctly , <nl> + * have no arguments , return void and are either public or protected . <nl> + * Also ensures that suite ( ) is named correctly , have no arguments , return <nl> + * junit . framewotk . Test , public and static . <nl> + * <nl> + * Rationale : often times developers will misname one or more of these <nl> + * methods and not realise that the method is not being called . <nl> + * <nl> + * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > <nl> + * / <nl> + public final class JUnitTestCaseCheck extends Check <nl> + { <nl> + / * * < code > setUp ( ) < / code > method name . * / <nl> + private static final String SET _ UP _ METHOD _ NAME = " setUp " ; <nl> + / * * < code > tearDown ( ) < / code > method name . * / <nl> + private static final String TEAR _ DOWN _ METHOD _ NAME = " tearDown " ; <nl> + / * * < code > suite ( ) < / code > method name . * / <nl> + private static final String SUITE _ METHOD _ NAME = " suite " ; <nl> + <nl> + / * * @ see Check * / <nl> + public int [ ] getDefaultTokens ( ) <nl> + { <nl> + return new int [ ] { TokenTypes . METHOD _ DEF } ; <nl> + } <nl> + <nl> + / * * @ see Check * / <nl> + public int [ ] getRequiredTokens ( ) <nl> + { <nl> + return getDefaultTokens ( ) ; <nl> + } <nl> + <nl> + / * * @ see Check * / <nl> + public void visitToken ( DetailAST aAST ) <nl> + { <nl> + switch ( aAST . getType ( ) ) { <nl> + case TokenTypes . METHOD _ DEF : <nl> + visitMethodDef ( aAST ) ; <nl> + break ; <nl> + default : <nl> + throw new IllegalStateException ( aAST . toString ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks given method definition . <nl> + * @ param aAST a method def node for check <nl> + * / <nl> + private void visitMethodDef ( DetailAST aAST ) <nl> + { <nl> + String name = aAST . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + <nl> + if ( name . equalsIgnoreCase ( SET _ UP _ METHOD _ NAME ) ) { <nl> + checkSetUpTearDownMethod ( aAST , name , SET _ UP _ METHOD _ NAME ) ; <nl> + } <nl> + else if ( name . equalsIgnoreCase ( TEAR _ DOWN _ METHOD _ NAME ) ) { <nl> + checkSetUpTearDownMethod ( aAST , name , TEAR _ DOWN _ METHOD _ NAME ) ; <nl> + } <nl> + else if ( name . equalsIgnoreCase ( SUITE _ METHOD _ NAME ) ) { <nl> + checkSuiteMethod ( aAST , name ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks signature / name of < code > suite ( ) < / code > . <nl> + * @ param aAST method definition node <nl> + * @ param aActualName method name <nl> + * / <nl> + private void checkSuiteMethod ( DetailAST aAST , String aActualName ) <nl> + { <nl> + if ( ! aActualName . equals ( SUITE _ METHOD _ NAME ) ) { <nl> + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , <nl> + " junit . method . name " , SUITE _ METHOD _ NAME ) ; <nl> + } <nl> + <nl> + if ( ! isPublicAndStatic ( aAST ) ) { <nl> + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , <nl> + " junit . method . public . and . static " , SUITE _ METHOD _ NAME ) ; <nl> + } <nl> + <nl> + / / let ' s check return type <nl> + DetailAST typeAST = aAST . findFirstToken ( TokenTypes . TYPE ) ; <nl> + boolean isArray = <nl> + ( typeAST . findFirstToken ( TokenTypes . ARRAY _ DECLARATOR ) ! = null ) ; <nl> + String type = CheckUtils . createFullType ( typeAST ) . getText ( ) ; <nl> + if ( isArray <nl> + | | ! " Test " . equals ( type ) <nl> + & & ! " junit . framework . Test " . equals ( type ) ) <nl> + { <nl> + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , <nl> + " junit . method . return . type " , SUITE _ METHOD _ NAME , <nl> + " junit . framework . Test " ) ; <nl> + } <nl> + checkParameters ( aAST , SUITE _ METHOD _ NAME ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks signature / name of < code > setUp ( ) < / code > / < code > tearDown < / code > . <nl> + * @ param aAST method definition node <nl> + * @ param aActualName actual method name <nl> + * @ param aExpectedName expected method name <nl> + * / <nl> + private void checkSetUpTearDownMethod ( DetailAST aAST , String aActualName , <nl> + String aExpectedName ) <nl> + { <nl> + if ( ! aActualName . equals ( aExpectedName ) ) { <nl> + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , <nl> + " junit . method . name " , aActualName , aExpectedName ) ; <nl> + } <nl> + <nl> + if ( ! isPublicOrProtected ( aAST ) ) { <nl> + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , <nl> + " junit . method . protected . or . public " , aExpectedName ) ; <nl> + } <nl> + <nl> + if ( isStatic ( aAST ) ) { <nl> + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , <nl> + " junit . method . static " , aExpectedName ) ; <nl> + } <nl> + <nl> + checkReturnValue ( aAST , TEAR _ DOWN _ METHOD _ NAME ) ; <nl> + checkParameters ( aAST , TEAR _ DOWN _ METHOD _ NAME ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks that given method returns < code > void < / code > . <nl> + * @ param aAST method definition node <nl> + * @ param aName method name <nl> + * / <nl> + private void checkReturnValue ( DetailAST aAST , String aName ) <nl> + { <nl> + DetailAST returnValueAST = aAST . findFirstToken ( TokenTypes . TYPE ) ; <nl> + <nl> + if ( returnValueAST . findFirstToken ( TokenTypes . LITERAL _ VOID ) = = null ) { <nl> + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , <nl> + " junit . method . return . type " , aName , " void " ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks return value of given method . <nl> + * @ param aAST method definition node <nl> + * @ param aName method name <nl> + * / <nl> + private void checkParameters ( DetailAST aAST , String aName ) <nl> + { <nl> + DetailAST parametersAST = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> + <nl> + if ( parametersAST . getChildCount ( ) ! = 0 ) { <nl> + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , <nl> + " junit . method . parameters " , aName ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks if given method declared as public or <nl> + * protected and non - static . <nl> + * @ param aAST method definition node <nl> + * @ return true if given method is declared as public or protected <nl> + * / <nl> + private boolean isPublicOrProtected ( DetailAST aAST ) <nl> + { <nl> + DetailAST modifiersAST = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + DetailAST publicAST = <nl> + modifiersAST . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ; <nl> + DetailAST protectedAST = <nl> + modifiersAST . findFirstToken ( TokenTypes . LITERAL _ PROTECTED ) ; <nl> + <nl> + return ( publicAST ! = null ) | | ( protectedAST ! = null ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if given method declared as < code > public < / code > and <nl> + * < code > static < / code > . <nl> + * @ param aAST method definition node <nl> + * @ return true if given method is declared as public and static <nl> + * / <nl> + private boolean isPublicAndStatic ( DetailAST aAST ) <nl> + { <nl> + DetailAST modifiersAST = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + DetailAST publicAST = <nl> + modifiersAST . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ; <nl> + DetailAST staticAST = <nl> + modifiersAST . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ; <nl> + <nl> + return ( publicAST ! = null ) & & ( staticAST ! = null ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if given method declared as static . <nl> + * @ param aAST method definition node <nl> + * @ return true if given method is declared as static <nl> + * / <nl> + private boolean isStatic ( DetailAST aAST ) <nl> + { <nl> + DetailAST modifiersAST = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + DetailAST staticAST = <nl> + modifiersAST . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ; <nl> + <nl> + return ( staticAST ! = null ) ; <nl> + } <nl> + } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> index 6a4fa5f . . 3f4ed1a 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> @ @ - 38 , 3 + 38 , 11 @ @ string . literal . equality = Literal Strings should be compared using equals ( ) , not ' <nl> <nl> illegal . catch = Catching ' ' { 0 } ' ' is not allowed . <nl> missing . package . declaration = Missing package declaration . <nl> + <nl> + junit . method . name = The method ' ' { 0 } ' ' should be named ' ' { 1 } ' ' . <nl> + junit . method . public . or . protected = The method { 0 } must be declared public or protected . <nl> + junit . method . return . type = The method ' ' { 0 } ' ' must be declared with a { 1 } return type . <nl> + junit . method . parameters = The method ' ' { 0 } ' ' must be declared with no parameters . <nl> + junit . method . public . and . static = The method ' ' { 0 } ' ' must be declared static . <nl> + junit . method . protected . or . public = The method ' ' { 0 } ' ' must be public or protected . <nl> + junit . method . static = The method ' ' { 0 } ' ' shouldn ' ' t be static . <nl> diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java <nl> new file mode 100644 <nl> index 0000000 . . 15dd7bf <nl> - - - / dev / null <nl> + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + import junit . framework . * ; <nl> + <nl> + public class InputJUnitTest extends TestCase <nl> + { <nl> + public static Test suite ( ) { return new TestSuite ( " " ) ; } / / correct <nl> + protected void setUp ( ) { } / / correct <nl> + public void tearDown ( ) { } / / correct <nl> + } <nl> + <nl> + class BadTest1 extends TestCase <nl> + { <nl> + private void setUp ( ) { } / / private ! ! ! <nl> + public static void tearDown ( ) { } / / static ! ! ! <nl> + static Test suite ( ) { return new TestSuite ( " " ) ; } / / non - public <nl> + } <nl> + <nl> + class BadTest2 extends TestCase <nl> + { <nl> + public void SetUp ( ) { } / / wrong name <nl> + public int tearDown ( ) { } / / wrong return type <nl> + public static Test [ ] suite ( ) { } / / wrong return type <nl> + } <nl> + <nl> + class BadTest3 extends TestCase <nl> + { <nl> + public void setUp ( int i ) { } / / too many args <nl> + public void tear _ down ( ) { } / / correct ( unchecked ) <nl> + public Test suite ( ) { return new TestSuite ( " " ) ; } / / non - static <nl> + } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / AllTests . java b / src / tests / com / puppycrawl / tools / checkstyle / AllTests . java <nl> index f7c7178 . . b1afd2f 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / AllTests . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / AllTests . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import com . puppycrawl . tools . checkstyle . checks . coding . IllegalInstantiationCheckTe <nl> import com . puppycrawl . tools . checkstyle . checks . coding . IllegalTokenCheckTest ; <nl> import com . puppycrawl . tools . checkstyle . checks . coding . IllegalTokenTextCheckTest ; <nl> import com . puppycrawl . tools . checkstyle . checks . coding . InnerAssignmentCheckTest ; <nl> + import com . puppycrawl . tools . checkstyle . checks . coding . JUnitTestCaseCheckTest ; <nl> import com . puppycrawl . tools . checkstyle . checks . coding . MagicNumberCheckTest ; <nl> import com . puppycrawl . tools . checkstyle . checks . coding . MissingSwitchDefaultCheckTest ; <nl> import com . puppycrawl . tools . checkstyle . checks . coding . NestedIfDepthCheckTest ; <nl> @ @ - 154 , 6 + 155 , 7 @ @ public class AllTests { <nl> suite . addTest ( new TestSuite ( JavadocStyleCheckTest . class ) ) ; <nl> suite . addTest ( new TestSuite ( JavadocTypeCheckTest . class ) ) ; <nl> suite . addTest ( new TestSuite ( JavadocVariableCheckTest . class ) ) ; <nl> + suite . addTest ( new TestSuite ( JUnitTestCaseCheckTest . class ) ) ; <nl> suite . addTest ( new TestSuite ( LineLengthCheckTest . class ) ) ; <nl> suite . addTest ( new TestSuite ( LocalFinalVariableNameCheckTest . class ) ) ; <nl> suite . addTest ( new TestSuite ( LocalVariableNameCheckTest . class ) ) ; <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java <nl> new file mode 100644 <nl> index 0000000 . . c45d6ac <nl> - - - / dev / null <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestCase ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + public class JUnitTestCaseCheckTest extends BaseCheckTestCase <nl> + { <nl> + public void testDefault ( ) throws Exception <nl> + { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( JUnitTestCaseCheck . class ) ; <nl> + <nl> + String [ ] expected = { <nl> + " 14 : 5 : The method ' setUp ' must be public or protected . " , <nl> + " 15 : 5 : The method ' tearDown ' shouldn ' t be static . " , <nl> + " 16 : 5 : The method ' suite ' must be declared static . " , <nl> + " 21 : 5 : The method ' SetUp ' should be named ' setUp ' . " , <nl> + " 22 : 5 : The method ' tearDown ' must be declared with a void return type . " , <nl> + " 23 : 5 : The method ' suite ' must be declared with a junit . framework . Test return type . " , <nl> + " 28 : 5 : The method ' tearDown ' must be declared with no parameters . " , <nl> + " 30 : 5 : The method ' suite ' must be declared static . " , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " coding " + File . separator + " InputJUnitTest . java " ) , expected ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / config / findbugs - exclude . xml b / config / findbugs - exclude . xml 
 index 1ed5459 . . 78c1920 100644 
 - - - a / config / findbugs - exclude . xml 
 + + + b / config / findbugs - exclude . xml 
 @ @ - 78 , 6 + 78 , 7 @ @ 
 < Or > 
 < Class name = " com . puppycrawl . tools . checkstyle . checks . AbstractDeclarationCollector " / > 
 < Class name = " com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck " / > 
 + < Class name = " com . puppycrawl . tools . checkstyle . checks . coding . DeclarationOrderCheck " / > 
 < Class name = " com . puppycrawl . tools . checkstyle . checks . OuterTypeFilenameCheck " / > 
 < Class name = " com . puppycrawl . tools . checkstyle . checks . regexp . RegexpCheck " / > 
 < ! - - createJavadocNode is private and can not be launched without visitToken - - > 
 diff - - git a / config / pmd . xml b / config / pmd . xml 
 index df31414 . . 04cb8b8 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 21 , 14 + 21 , 16 @ @ 
 < properties > 
 < property name = " showClassesComplexity " value = " false " / > 
 < property name = " reportLevel " value = " 11 " / > 
 - < ! - - validateCli is not reasonable to split as encapsulation of logic will be damaged 
 + < ! - - DeclarationOrder - ' visitToken ' has just big SWITCH block which contains IF blocks . 
 + If we split the block to several methods it will demage readibility . 
 + validateCli is not reasonable to split as encapsulation of logic will be damaged 
 getDetails - huge Switch , it has to be monolithic 
 JavadocMethodCheck , JavadocStyleCheck , JavadocUtils . getJavadocTags ( ) - deprecated 
 FinalLocalVariableCheck . visitToken ( ) - it is just big switch , not could be done 
 GenericWhitespaceCheck . processSingleGeneric ( ) - it contains a lot of similar to each other and very simple condition 
 VariableDeclarationUsageDistanceCheck , CustomImportOrderCheck - it is not OK to have such a complicated logic need to be refactored . 
 - - > 
 - < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' validateCli ' and . . / . . / . . [ @ Image = ' Main ' ] ] | / / MethodDeclaration [ @ Name = ' processSingleGeneric ' and . . / . . / . . [ @ Image = ' GenericWhitespaceCheck ' ] ] | / / MethodDeclaration [ @ Name = ' visitToken ' and . . / . . / . . [ @ Image = ' FinalLocalVariableCheck ' ] ] | / / MethodDeclaration [ @ Name = ' getJavadocTags ' and . . / . . / . . [ @ Image = ' JavadocUtils ' ] ] | / / MethodDeclaration [ @ Name = ' getDetails ' and . . / . . / . . [ @ Image = ' RightCurlyCheck ' ] ] | / / ClassOrInterfaceDeclaration [ @ Image = ' JavadocMethodCheck ' or @ Image = ' JavadocStyleCheck ' or @ Image = ' VariableDeclarationUsageDistanceCheck ' or @ Image = ' CustomImportOrderCheck ' ] " / > 
 + < property name = " violationSuppressXPath " value = " / / DeclarationOrder [ @ Name = ' visitToken ' ] and / / MethodDeclaration [ @ Name = ' validateCli ' and . . / . . / . . [ @ Image = ' Main ' ] ] | / / MethodDeclaration [ @ Name = ' processSingleGeneric ' and . . / . . / . . [ @ Image = ' GenericWhitespaceCheck ' ] ] | / / MethodDeclaration [ @ Name = ' visitToken ' and . . / . . / . . [ @ Image = ' FinalLocalVariableCheck ' ] ] | / / MethodDeclaration [ @ Name = ' getJavadocTags ' and . . / . . / . . [ @ Image = ' JavadocUtils ' ] ] | / / MethodDeclaration [ @ Name = ' getDetails ' and . . / . . / . . [ @ Image = ' RightCurlyCheck ' ] ] | / / ClassOrInterfaceDeclaration [ @ Image = ' JavadocMethodCheck ' or @ Image = ' JavadocStyleCheck ' or @ Image = ' VariableDeclarationUsageDistanceCheck ' or @ Image = ' CustomImportOrderCheck ' ] " / > 
 < / properties > 
 < / rule > 
 < rule ref = " rulesets / java / codesize . xml / NPathComplexity " > 
 diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 6f44797 . . 9b4a41e 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 143 , 6 + 143 , 10 @ @ 
 < ! - - SWITCH was transformed into IF - ELSE - - > 
 < suppress checks = " CyclomaticComplexity " files = " ImportOrderCheck \ . java " lines = " 344 " / > 
 
 + < ! - - Just big SWITCH block which contains IF blocks in ' visitToken ' . 
 + If we split the block to several methods it will demage readibility . - - > 
 + < suppress checks = " CyclomaticComplexity " files = " DeclarationOrderCheck \ . java " lines = " 189 " / > 
 + 
 < ! - - LocalizedMessage class is immutable , we need that amount of arguments . - - > 
 < suppress checks = " ParameterNumber " 
 files = " LocalizedMessage . java " 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 index 7300676 . . 8864230 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 @ @ - 19 , 9 + 19 , 11 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 - import java . util . ArrayDeque ; 
 import java . util . Deque ; 
 + import java . util . Set ; 
 
 + import com . google . common . collect . Queues ; 
 + import com . google . common . collect . Sets ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . Scope ; 
 @ @ - 31 , 9 + 33 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 / * * 
 * Checks that the parts of a class or interface declaration 
 * appear in the order suggested by the 
 - * < a 
 - * href = " http : / / www . oracle . com / technetwork / java / javase / documentation / codeconventions - 141855 . html # 1852 " 
 - * > Code Conventions for the Java Programming Language < / a > . 
 + * < a href = 
 + * " http : / / www . oracle . com / technetwork / java / javase / documentation / codeconventions - 141855 . html # 1852 " > 
 + * Code Conventions for the Java Programming Language < / a > . 
 * 
 * 
 * < ol > 
 @ @ - 47 , 6 + 49 , 18 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 * < li > Methods < / li > 
 * < / ol > 
 * 
 + * < p > ATTENTION : the check skips class fields which have 
 + * < a href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 8 . html # jls - 8 . 3 . 3 " > 
 + * forward references < / a > from validation due to the fact that we have Checkstyle ' s limitations 
 + * to clearly detect user intention of fields location and grouping . For example , 
 + * < pre > { @ code 
 + * public class A { 
 + * private double x = 1 . 0 ; 
 + * private double y = 2 . 0 ; 
 + * public double slope = x / y ; / / will be skipped from validation due to forward reference 
 + * } 
 + * } < / pre > 
 + * 
 * < p > Available options : 
 * < ul > 
 * < li > ignoreModifiers < / li > 
 @ @ - 133 , 9 + 147 , 12 @ @ public class DeclarationOrderCheck extends AbstractCheck { 
 
 / * * 
 * List of Declaration States . This is necessary due to 
 - * inner classes that have their own state 
 + * inner classes that have their own state . 
 * / 
 - private final Deque < ScopeState > scopeStates = new ArrayDeque < > ( ) ; 
 + private Deque < ScopeState > scopeStates ; 
 + 
 + / * * Set of all class field names . * / 
 + private Set < String > classFieldNames ; 
 
 / * * If true , ignores the check to constructors . * / 
 private boolean ignoreConstructors ; 
 @ @ - 154 , 6 + 171 , 7 @ @ public class DeclarationOrderCheck extends AbstractCheck { 
 TokenTypes . METHOD _ DEF , 
 TokenTypes . MODIFIERS , 
 TokenTypes . OBJBLOCK , 
 + TokenTypes . VARIABLE _ DEF , 
 } ; 
 } 
 
 @ @ - 163 , 6 + 181 , 12 @ @ public class DeclarationOrderCheck extends AbstractCheck { 
 } 
 
 @ Override 
 + public void beginTree ( DetailAST rootAST ) { 
 + scopeStates = Queues . newArrayDeque ( ) ; 
 + classFieldNames = Sets . newHashSet ( ) ; 
 + } 
 + 
 + @ Override 
 public void visitToken ( DetailAST ast ) { 
 final int parentType = ast . getParent ( ) . getType ( ) ; 
 
 @ @ - 188 , 14 + 212 , 20 @ @ public class DeclarationOrderCheck extends AbstractCheck { 
 state . currentScopeState = STATE _ METHOD _ DEF ; 
 } 
 break ; 
 + case TokenTypes . VARIABLE _ DEF : 
 + if ( ScopeUtils . isClassFieldDef ( ast ) ) { 
 + final DetailAST fieldDef = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 + classFieldNames . add ( fieldDef . getText ( ) ) ; 
 + } 
 + break ; 
 default : 
 break ; 
 } 
 } 
 
 / * * 
 - * Process constructor . 
 - * @ param ast constructor AST 
 + * Processes constructor . 
 + * @ param ast constructor AST . 
 * / 
 private void processConstructor ( DetailAST ast ) { 
 
 @ @ - 211 , 8 + 241 , 8 @ @ public class DeclarationOrderCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Process modifiers . 
 - * @ param ast ast of Modifiers 
 + * Processes modifiers . 
 + * @ param ast ast of Modifiers . 
 * / 
 private void processModifiers ( DetailAST ast ) { 
 
 @ @ - 240 , 7 + 270 , 8 @ @ public class DeclarationOrderCheck extends AbstractCheck { 
 
 final Scope access = ScopeUtils . getScopeFromMods ( ast ) ; 
 if ( state . declarationAccess . compareTo ( access ) > 0 ) { 
 - if ( ! ignoreModifiers ) { 
 + if ( ! ignoreModifiers 
 + & & ! isForwardReference ( ast . getParent ( ) ) ) { 
 log ( ast , MSG _ ACCESS ) ; 
 } 
 } 
 @ @ - 249 , 6 + 280 , 51 @ @ public class DeclarationOrderCheck extends AbstractCheck { 
 } 
 } 
 
 + / * * 
 + * Checks whether an identifier references a field which has been already defined in class . 
 + * @ param fieldDef a field definition . 
 + * @ return true if an identifier references a field which has been already defined in class . 
 + * / 
 + private boolean isForwardReference ( DetailAST fieldDef ) { 
 + final DetailAST exprStartIdent = fieldDef . findFirstToken ( TokenTypes . IDENT ) ; 
 + final Set < DetailAST > exprIdents = getAllTokensOfType ( exprStartIdent , TokenTypes . IDENT ) ; 
 + boolean forwardReference = false ; 
 + for ( DetailAST ident : exprIdents ) { 
 + if ( classFieldNames . contains ( ident . getText ( ) ) ) { 
 + forwardReference = true ; 
 + break ; 
 + } 
 + } 
 + return forwardReference ; 
 + } 
 + 
 + / * * 
 + * Collects all tokens of specific type starting with the current ast node . 
 + * @ param ast ast node . 
 + * @ param tokenType token type . 
 + * @ return a set of all tokens of specific type starting with the current ast node . 
 + * / 
 + private static Set < DetailAST > getAllTokensOfType ( DetailAST ast , int tokenType ) { 
 + DetailAST vertex = ast ; 
 + final Set < DetailAST > result = Sets . newHashSet ( ) ; 
 + final Deque < DetailAST > stack = Queues . newArrayDeque ( ) ; 
 + while ( vertex ! = null | | ! stack . isEmpty ( ) ) { 
 + if ( ! stack . isEmpty ( ) ) { 
 + vertex = stack . pop ( ) ; 
 + } 
 + while ( vertex ! = null ) { 
 + if ( vertex . getType ( ) = = tokenType & & ! vertex . equals ( ast ) ) { 
 + result . add ( vertex ) ; 
 + } 
 + if ( vertex . getNextSibling ( ) ! = null ) { 
 + stack . push ( vertex . getNextSibling ( ) ) ; 
 + } 
 + vertex = vertex . getFirstChild ( ) ; 
 + } 
 + } 
 + return result ; 
 + } 
 + 
 @ Override 
 public void leaveToken ( DetailAST ast ) { 
 if ( ast . getType ( ) = = TokenTypes . OBJBLOCK ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java 
 index 3bd30d7 . . e0c00e5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / ScopeUtils . java 
 @ @ - 267 , 6 + 267 , 17 @ @ public final class ScopeUtils { 
 } 
 
 / * * 
 + * Determines whether a node is a class field definition . 
 + * I . e . if it is not declared in a code block , a for initializer , 
 + * or a catch parameter . 
 + * @ param node the node to check . 
 + * @ return whether a node is a class field definition . 
 + * / 
 + public static boolean isClassFieldDef ( DetailAST node ) { 
 + return ! isLocalVariableDef ( node ) ; 
 + } 
 + 
 + / * * 
 * Checks whether ast node is in a specific scope . 
 * @ param ast the node to check . 
 * @ param scope a { @ code Scope } value . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 index 5bda760 . . ee9d29c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 @ @ - 171 , 4 + 171 , 21 @ @ public class DeclarationOrderCheckTest 
 final DeclarationOrderCheck check = new DeclarationOrderCheck ( ) ; 
 check . visitToken ( array ) ; 
 } 
 + 
 + @ Test 
 + public void testForwardReference ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( DeclarationOrderCheck . class ) ; 
 + final String [ ] expected = { 
 + " 12 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 13 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 14 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 15 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 16 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 17 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 23 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 41 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 + " 41 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputDeclarationOrderForwardReference . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrderForwardReference . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrderForwardReference . java 
 new file mode 100644 
 index 0000000 . . 9337096 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputDeclarationOrderForwardReference . java 
 @ @ - 0 , 0 + 1 , 47 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 + public class InputDeclarationOrderForwardReference { 
 + 
 + public static final int TAB _ LENGTH = 4 ; 
 + private static final ArrayList < String > EMPTY _ ARRAY _ LIST = new ArrayList < String > ( ) ; 
 + public static final int MAX _ INT = Integer . MAX _ VALUE ; / / violation 
 + public static final int MAX _ BYTE = Byte . MIN _ VALUE ; / / violation 
 + public static final int ROWS = 18 ; / / violation 
 + public static final int COLUMNS = 18 ; / / violation 
 + public static final int TYPE _ SIZE = 12 ; / / violation 
 + public static final int TABLE _ SIZE = 184 ; / / violation 
 + public static final int INFRASTRUCTURE _ SIZE = TYPE _ SIZE 
 + + MAX _ BYTE 
 + + TABLE _ SIZE ; 
 + public static final int MAX _ LINE _ LENGTH = 96 + TAB _ LENGTH ; 
 + 
 + public static final double MIN _ MATCH = 0 . 60 ; / / violation 
 + public static final double EXACT _ CLASS _ NAME _ MATCH = MIN _ MATCH + 0 . 1 ; 
 + 
 + private static final String COMMON _ PART = " common _ part " ; 
 + public static final String FIRST = COMMON _ PART + " 2 " ; 
 + 
 + private static final String SECOND = String . valueOf ( TokenTypes . ELIST ) + FIRST ; 
 + public static final String THIDRD = FIRST ; 
 + 
 + private static int ID = 5 ; 
 + public static final String FOURTH = " 1 " 
 + + ID 
 + + COMMON _ PART ; 
 + 
 + private int a = 1 ; 
 + public int b = a + 2 ; 
 + 
 + public static void foo1 ( ) { } 
 + public static final double MAX = 0 . 60 ; / / violation 
 + public static void foo2 ( ) { } 
 + 
 + void foo3 ( ) { 
 + int i = 5 ; 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index a20ad57 . . 20b61d9 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 300 , 6 + 300 , 20 @ @ class Test { 
 < p > 
 Purpose of < b > ignore * < / b > option is to ignore related violations , however it still impacts on other class members . 
 < / p > 
 + 
 + < p > 
 + ATTENTION : the check skips class fields which have 
 + < a href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 8 . html # jls - 8 . 3 . 3 " > forward references < / a > 
 + from validation due to the fact that we have Checkstyle ' s limitations to clearly 
 + detect user intention of fields location and grouping . For example , 
 + < source > 
 + public class A { 
 + private double x = 1 . 0 ; 
 + private double y = 2 . 0 ; 
 + public double slope = x / y ; / / will be skipped from validation due to forward reference 
 + } 
 + < / source > 
 + < / p > 
 < / subsection > 
 
 < subsection name = " Properties " >

NEAREST DIFF:
diff - - git a / docs / config _ coding . html b / docs / config _ coding . html 
 index ff5cce2 . . 11f2745 100644 
 - - - a / docs / config _ coding . html 
 + + + b / docs / config _ coding . html 
 @ @ - 59 , 6 + 59 , 9 @ @ 
 < a href = " # InnerAssignment " > InnerAssignment < / a > 
 < / li > 
 < li > 
 + < a href = " # JUnitTestCase " > JUnitTestCase < / a > 
 + < / li > 
 + < li > 
 < a href = " # MagicNumber " > MagicNumber < / a > 
 < / li > 
 < li > 
 @ @ - 1088 , 6 + 1091 , 35 @ @ return ! valid ( ) ; 
 < a href = " config . html # treewalker " > TreeWalker < / a > 
 < / p > 
 
 + < ! - - - - > < a name = " JUnitTestCase " > < / a > < h2 > JUnitTestCase < / h2 > 
 + < h4 > Description < / h4 > 
 + < p class = " body " > 
 + Ensures that the setUp ( ) , tearDown ( ) methods are named correctly , 
 + have no arguments , return void and are either public or protected . < br > 
 + Also ensures that suite ( ) is named correctly , have no arguments , return 
 + junit . framewotk . Test , public and static . 
 + < / p > 
 + < p class = " body " > 
 + Rationale : often times developers will misname one or more of these 
 + methods and not realise that the method is not being called . 
 + < / p > 
 + 
 + < h4 > Examples < / h4 > 
 + < p class = " body " > 
 + To configure the check : 
 + < / p > 
 + < pre class = " body " > 
 + & lt ; module name = & quot ; JUnitTestCase & quot ; / & gt ; 
 + < / pre > 
 + < h4 > Package < / h4 > 
 + < p class = " body " > 
 + com . puppycrawl . tools . checkstyle . checks . coding 
 + < / p > 
 + < h4 > Parent Module < / h4 > 
 + < p class = " body " > 
 + < a href = " config . html # treewalker " > TreeWalker < / a > 
 + < / p > 
 + 
 < / td > 
 < / tr > 
 < / table > 
 diff - - git a / docs / releasenotes . html b / docs / releasenotes . html 
 index 445a1aa . . a172752 100644 
 - - - a / docs / releasenotes . html 
 + + + b / docs / releasenotes . html 
 @ @ - 145 , 6 + 145 , 8 @ @ 
 
 < li class = " body " > Added PackageDeclaration check . ( request 750753 ) . < / li > 
 
 + < li class = " body " > Added JUnitTestCase check . ( request 750761 ) . < / li > 
 + 
 < / ul > 
 
 < p class = " body " > 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheck . java 
 new file mode 100644 
 index 0000000 . . 1ccd996 
 - - - / dev / null 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheck . java 
 @ @ - 0 , 0 + 1 , 228 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2003 Oliver Burn 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . CheckUtils ; 
 + 
 + / * * 
 + * Ensures that the setUp ( ) , tearDown ( ) methods are named correctly , 
 + * have no arguments , return void and are either public or protected . 
 + * Also ensures that suite ( ) is named correctly , have no arguments , return 
 + * junit . framewotk . Test , public and static . 
 + * 
 + * Rationale : often times developers will misname one or more of these 
 + * methods and not realise that the method is not being called . 
 + * 
 + * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > 
 + * / 
 + public final class JUnitTestCaseCheck extends Check 
 + { 
 + / * * < code > setUp ( ) < / code > method name . * / 
 + private static final String SET _ UP _ METHOD _ NAME = " setUp " ; 
 + / * * < code > tearDown ( ) < / code > method name . * / 
 + private static final String TEAR _ DOWN _ METHOD _ NAME = " tearDown " ; 
 + / * * < code > suite ( ) < / code > method name . * / 
 + private static final String SUITE _ METHOD _ NAME = " suite " ; 
 + 
 + / * * @ see Check * / 
 + public int [ ] getDefaultTokens ( ) 
 + { 
 + return new int [ ] { TokenTypes . METHOD _ DEF } ; 
 + } 
 + 
 + / * * @ see Check * / 
 + public int [ ] getRequiredTokens ( ) 
 + { 
 + return getDefaultTokens ( ) ; 
 + } 
 + 
 + / * * @ see Check * / 
 + public void visitToken ( DetailAST aAST ) 
 + { 
 + switch ( aAST . getType ( ) ) { 
 + case TokenTypes . METHOD _ DEF : 
 + visitMethodDef ( aAST ) ; 
 + break ; 
 + default : 
 + throw new IllegalStateException ( aAST . toString ( ) ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Checks given method definition . 
 + * @ param aAST a method def node for check 
 + * / 
 + private void visitMethodDef ( DetailAST aAST ) 
 + { 
 + String name = aAST . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + 
 + if ( name . equalsIgnoreCase ( SET _ UP _ METHOD _ NAME ) ) { 
 + checkSetUpTearDownMethod ( aAST , name , SET _ UP _ METHOD _ NAME ) ; 
 + } 
 + else if ( name . equalsIgnoreCase ( TEAR _ DOWN _ METHOD _ NAME ) ) { 
 + checkSetUpTearDownMethod ( aAST , name , TEAR _ DOWN _ METHOD _ NAME ) ; 
 + } 
 + else if ( name . equalsIgnoreCase ( SUITE _ METHOD _ NAME ) ) { 
 + checkSuiteMethod ( aAST , name ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Checks signature / name of < code > suite ( ) < / code > . 
 + * @ param aAST method definition node 
 + * @ param aActualName method name 
 + * / 
 + private void checkSuiteMethod ( DetailAST aAST , String aActualName ) 
 + { 
 + if ( ! aActualName . equals ( SUITE _ METHOD _ NAME ) ) { 
 + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , 
 + " junit . method . name " , SUITE _ METHOD _ NAME ) ; 
 + } 
 + 
 + if ( ! isPublicAndStatic ( aAST ) ) { 
 + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , 
 + " junit . method . public . and . static " , SUITE _ METHOD _ NAME ) ; 
 + } 
 + 
 + / / let ' s check return type 
 + DetailAST typeAST = aAST . findFirstToken ( TokenTypes . TYPE ) ; 
 + boolean isArray = 
 + ( typeAST . findFirstToken ( TokenTypes . ARRAY _ DECLARATOR ) ! = null ) ; 
 + String type = CheckUtils . createFullType ( typeAST ) . getText ( ) ; 
 + if ( isArray 
 + | | ! " Test " . equals ( type ) 
 + & & ! " junit . framework . Test " . equals ( type ) ) 
 + { 
 + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , 
 + " junit . method . return . type " , SUITE _ METHOD _ NAME , 
 + " junit . framework . Test " ) ; 
 + } 
 + checkParameters ( aAST , SUITE _ METHOD _ NAME ) ; 
 + } 
 + 
 + / * * 
 + * Checks signature / name of < code > setUp ( ) < / code > / < code > tearDown < / code > . 
 + * @ param aAST method definition node 
 + * @ param aActualName actual method name 
 + * @ param aExpectedName expected method name 
 + * / 
 + private void checkSetUpTearDownMethod ( DetailAST aAST , String aActualName , 
 + String aExpectedName ) 
 + { 
 + if ( ! aActualName . equals ( aExpectedName ) ) { 
 + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , 
 + " junit . method . name " , aActualName , aExpectedName ) ; 
 + } 
 + 
 + if ( ! isPublicOrProtected ( aAST ) ) { 
 + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , 
 + " junit . method . protected . or . public " , aExpectedName ) ; 
 + } 
 + 
 + if ( isStatic ( aAST ) ) { 
 + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , 
 + " junit . method . static " , aExpectedName ) ; 
 + } 
 + 
 + checkReturnValue ( aAST , TEAR _ DOWN _ METHOD _ NAME ) ; 
 + checkParameters ( aAST , TEAR _ DOWN _ METHOD _ NAME ) ; 
 + } 
 + 
 + / * * 
 + * Checks that given method returns < code > void < / code > . 
 + * @ param aAST method definition node 
 + * @ param aName method name 
 + * / 
 + private void checkReturnValue ( DetailAST aAST , String aName ) 
 + { 
 + DetailAST returnValueAST = aAST . findFirstToken ( TokenTypes . TYPE ) ; 
 + 
 + if ( returnValueAST . findFirstToken ( TokenTypes . LITERAL _ VOID ) = = null ) { 
 + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , 
 + " junit . method . return . type " , aName , " void " ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Checks return value of given method . 
 + * @ param aAST method definition node 
 + * @ param aName method name 
 + * / 
 + private void checkParameters ( DetailAST aAST , String aName ) 
 + { 
 + DetailAST parametersAST = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 + 
 + if ( parametersAST . getChildCount ( ) ! = 0 ) { 
 + log ( aAST . getLineNo ( ) , aAST . getColumnNo ( ) , 
 + " junit . method . parameters " , aName ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Checks if given method declared as public or 
 + * protected and non - static . 
 + * @ param aAST method definition node 
 + * @ return true if given method is declared as public or protected 
 + * / 
 + private boolean isPublicOrProtected ( DetailAST aAST ) 
 + { 
 + DetailAST modifiersAST = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + DetailAST publicAST = 
 + modifiersAST . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ; 
 + DetailAST protectedAST = 
 + modifiersAST . findFirstToken ( TokenTypes . LITERAL _ PROTECTED ) ; 
 + 
 + return ( publicAST ! = null ) | | ( protectedAST ! = null ) ; 
 + } 
 + 
 + / * * 
 + * Checks if given method declared as < code > public < / code > and 
 + * < code > static < / code > . 
 + * @ param aAST method definition node 
 + * @ return true if given method is declared as public and static 
 + * / 
 + private boolean isPublicAndStatic ( DetailAST aAST ) 
 + { 
 + DetailAST modifiersAST = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + DetailAST publicAST = 
 + modifiersAST . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ; 
 + DetailAST staticAST = 
 + modifiersAST . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ; 
 + 
 + return ( publicAST ! = null ) & & ( staticAST ! = null ) ; 
 + } 
 + 
 + / * * 
 + * Checks if given method declared as static . 
 + * @ param aAST method definition node 
 + * @ return true if given method is declared as static 
 + * / 
 + private boolean isStatic ( DetailAST aAST ) 
 + { 
 + DetailAST modifiersAST = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + DetailAST staticAST = 
 + modifiersAST . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ; 
 + 
 + return ( staticAST ! = null ) ; 
 + } 
 + } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 index 6a4fa5f . . 3f4ed1a 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 @ @ - 38 , 3 + 38 , 11 @ @ string . literal . equality = Literal Strings should be compared using equals ( ) , not ' 
 
 illegal . catch = Catching ' ' { 0 } ' ' is not allowed . 
 missing . package . declaration = Missing package declaration . 
 + 
 + junit . method . name = The method ' ' { 0 } ' ' should be named ' ' { 1 } ' ' . 
 + junit . method . public . or . protected = The method { 0 } must be declared public or protected . 
 + junit . method . return . type = The method ' ' { 0 } ' ' must be declared with a { 1 } return type . 
 + junit . method . parameters = The method ' ' { 0 } ' ' must be declared with no parameters . 
 + junit . method . public . and . static = The method ' ' { 0 } ' ' must be declared static . 
 + junit . method . protected . or . public = The method ' ' { 0 } ' ' must be public or protected . 
 + junit . method . static = The method ' ' { 0 } ' ' shouldn ' ' t be static . 
 diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java 
 new file mode 100644 
 index 0000000 . . 15dd7bf 
 - - - / dev / null 
 + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + import junit . framework . * ; 
 + 
 + public class InputJUnitTest extends TestCase 
 + { 
 + public static Test suite ( ) { return new TestSuite ( " " ) ; } / / correct 
 + protected void setUp ( ) { } / / correct 
 + public void tearDown ( ) { } / / correct 
 + } 
 + 
 + class BadTest1 extends TestCase 
 + { 
 + private void setUp ( ) { } / / private ! ! ! 
 + public static void tearDown ( ) { } / / static ! ! ! 
 + static Test suite ( ) { return new TestSuite ( " " ) ; } / / non - public 
 + } 
 + 
 + class BadTest2 extends TestCase 
 + { 
 + public void SetUp ( ) { } / / wrong name 
 + public int tearDown ( ) { } / / wrong return type 
 + public static Test [ ] suite ( ) { } / / wrong return type 
 + } 
 + 
 + class BadTest3 extends TestCase 
 + { 
 + public void setUp ( int i ) { } / / too many args 
 + public void tear _ down ( ) { } / / correct ( unchecked ) 
 + public Test suite ( ) { return new TestSuite ( " " ) ; } / / non - static 
 + } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / AllTests . java b / src / tests / com / puppycrawl / tools / checkstyle / AllTests . java 
 index f7c7178 . . b1afd2f 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / AllTests . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / AllTests . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import com . puppycrawl . tools . checkstyle . checks . coding . IllegalInstantiationCheckTe 
 import com . puppycrawl . tools . checkstyle . checks . coding . IllegalTokenCheckTest ; 
 import com . puppycrawl . tools . checkstyle . checks . coding . IllegalTokenTextCheckTest ; 
 import com . puppycrawl . tools . checkstyle . checks . coding . InnerAssignmentCheckTest ; 
 + import com . puppycrawl . tools . checkstyle . checks . coding . JUnitTestCaseCheckTest ; 
 import com . puppycrawl . tools . checkstyle . checks . coding . MagicNumberCheckTest ; 
 import com . puppycrawl . tools . checkstyle . checks . coding . MissingSwitchDefaultCheckTest ; 
 import com . puppycrawl . tools . checkstyle . checks . coding . NestedIfDepthCheckTest ; 
 @ @ - 154 , 6 + 155 , 7 @ @ public class AllTests { 
 suite . addTest ( new TestSuite ( JavadocStyleCheckTest . class ) ) ; 
 suite . addTest ( new TestSuite ( JavadocTypeCheckTest . class ) ) ; 
 suite . addTest ( new TestSuite ( JavadocVariableCheckTest . class ) ) ; 
 + suite . addTest ( new TestSuite ( JUnitTestCaseCheckTest . class ) ) ; 
 suite . addTest ( new TestSuite ( LineLengthCheckTest . class ) ) ; 
 suite . addTest ( new TestSuite ( LocalFinalVariableNameCheckTest . class ) ) ; 
 suite . addTest ( new TestSuite ( LocalVariableNameCheckTest . class ) ) ; 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java 
 new file mode 100644 
 index 0000000 . . c45d6ac 
 - - - / dev / null 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestCase ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + 
 + import java . io . File ; 
 + 
 + public class JUnitTestCaseCheckTest extends BaseCheckTestCase 
 + { 
 + public void testDefault ( ) throws Exception 
 + { 
 + DefaultConfiguration checkConfig = createCheckConfig ( JUnitTestCaseCheck . class ) ; 
 + 
 + String [ ] expected = { 
 + " 14 : 5 : The method ' setUp ' must be public or protected . " , 
 + " 15 : 5 : The method ' tearDown ' shouldn ' t be static . " , 
 + " 16 : 5 : The method ' suite ' must be declared static . " , 
 + " 21 : 5 : The method ' SetUp ' should be named ' setUp ' . " , 
 + " 22 : 5 : The method ' tearDown ' must be declared with a void return type . " , 
 + " 23 : 5 : The method ' suite ' must be declared with a junit . framework . Test return type . " , 
 + " 28 : 5 : The method ' tearDown ' must be declared with no parameters . " , 
 + " 30 : 5 : The method ' suite ' must be declared static . " , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " coding " + File . separator + " InputJUnitTest . java " ) , expected ) ; 
 + } 
 + }
