BLEU SCORE: 0.02383853510228548

TEST MSG: Issue # 5008 : increased pitest of coding package
GENERATED MSG: Fix for SuperClone and SuperFinalize checks reporting violations on

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> index ab45bd2 . . ef2891c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> @ @ - 447 , 7 + 447 , 6 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> * @ noinspection WeakerAccess <nl> * / <nl> public void setLegalAbstractClassNames ( String . . . classNames ) { <nl> - legalAbstractClassNames . clear ( ) ; <nl> Collections . addAll ( legalAbstractClassNames , classNames ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> index 096e14a . . f13541e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> @ @ - 527 , 16 + 527 , 17 @ @ public class VariableDeclarationUsageDistanceCheck extends AbstractCheck { <nl> variableUsageAst = exprWithVariableUsage ; <nl> } <nl> } <nl> + <nl> + / / If there ' s no any variable usage , then distance = 0 . <nl> + else if ( variableUsageExpressions . isEmpty ( ) ) { <nl> + variableUsageAst = null ; <nl> + } <nl> / / If variable usage exists in different scopes , then distance = <nl> / / distance until variable first usage . <nl> - else if ( variableUsageExpressions . size ( ) > 1 ) { <nl> + else { <nl> dist + + ; <nl> variableUsageAst = variableUsageExpressions . get ( 0 ) ; <nl> } <nl> - / / If there ' s no any variable usage , then distance = 0 . <nl> - else { <nl> - variableUsageAst = null ; <nl> - } <nl> } <nl> return new SimpleEntry < > ( variableUsageAst , dist ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java <nl> index 78113a1 . . d35d928 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java <nl> @ @ - 53 , 7 + 53 , 9 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { <nl> " 424 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 436 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 446 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> - <nl> + " 555 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 556 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 557 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputFallThrough . java " ) , <nl> @ @ - 82 , 6 + 84 , 9 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { <nl> " 424 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 436 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 446 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 555 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 556 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 557 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputFallThrough . java " ) , <nl> @ @ - 133 , 6 + 138 , 9 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { <nl> " 507 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 514 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> " 546 : 12 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 555 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 556 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> + " 557 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputFallThrough . java " ) , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java <nl> index 2d891ff . . b5b851f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java <nl> @ @ - 57 , 6 + 57 , 7 @ @ public class ModifiedControlVariableCheckTest <nl> " 56 : 14 : " + getCheckMessage ( MSG _ KEY , " m " ) , <nl> " 67 : 15 : " + getCheckMessage ( MSG _ KEY , " i " ) , <nl> " 68 : 15 : " + getCheckMessage ( MSG _ KEY , " k " ) , <nl> + " 78 : 15 : " + getCheckMessage ( MSG _ KEY , " v " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputModifiedControlVariableBothForLoops . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheckTest . java <nl> index 41caf84 . . fc537ab 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheckTest . java <nl> @ @ - 46 , 6 + 46 , 9 @ @ public class MultipleVariableDeclarationsCheckTest extends AbstractModuleTestSup <nl> " 9 : 9 : " + getCheckMessage ( MSG _ MULTIPLE ) , <nl> " 13 : 5 : " + getCheckMessage ( MSG _ MULTIPLE ) , <nl> " 16 : 5 : " + getCheckMessage ( MSG _ MULTIPLE ) , <nl> + " 35 : 9 : " + getCheckMessage ( MSG _ MULTIPLE ) , <nl> + " 35 : 31 : " + getCheckMessage ( MSG _ MULTIPLE ) , <nl> + " 35 : 44 : " + getCheckMessage ( MSG _ MULTIPLE ) , <nl> } ; <nl> <nl> verify ( checkConfig , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index 48fe463 . . 6474fc4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 58 , 6 + 58 , 7 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { <nl> " 121 : 13 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " Issue2240 . " ) , <nl> " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , <nl> " 134 : 9 : " + getCheckMessage ( MSG _ METHOD , " foo " , " " ) , <nl> + " 142 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s " , " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputRequireThisEnumInnerClassesAndBugs . java " ) , <nl> @ @ - 95 , 6 + 96 , 7 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { <nl> " 113 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " " ) , <nl> " 114 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " " ) , <nl> " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , <nl> + " 142 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s " , " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputRequireThisEnumInnerClassesAndBugs . java " ) , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java <nl> index 5c12d04 . . 5e54ba7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java <nl> @ @ - 77 , 6 + 77 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends <nl> " 891 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 1 ) , <nl> " 901 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 1 ) , <nl> " 967 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 1 ) , <nl> + " 978 : " + getCheckMessage ( MSG _ KEY , " a " , 2 , 1 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; <nl> } <nl> @ @ - 171 , 6 + 172 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends <nl> " 505 : " + getCheckMessage ( MSG _ KEY , " files " , 2 , 1 ) , <nl> " 540 : " + getCheckMessage ( MSG _ KEY , " id " , 2 , 1 ) , <nl> " 542 : " + getCheckMessage ( MSG _ KEY , " parentId " , 4 , 1 ) , <nl> + " 978 : " + getCheckMessage ( MSG _ KEY , " a " , 2 , 1 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java <nl> index a3c745e . . 384499f 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java <nl> @ @ - 547 , 4 + 547 , 17 @ @ public class InputFallThrough <nl> break ; <nl> } <nl> } <nl> + <nl> + void multipleCasesOnOneLine ( ) { <nl> + int i = 0 ; <nl> + switch ( i ) { <nl> + case 0 : case 1 : i * = i ; / / fall through <nl> + case 2 : case 3 : i * = i ; / / fall through <nl> + case 4 : case 5 : i * = i ; / / fall through <nl> + case 6 : case 7 : i * = i ; <nl> + break ; <nl> + default : <nl> + throw new RuntimeException ( ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java <nl> index d3f57c7 . . 01c2414 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java <nl> @ @ - 70 , 6 + 70 , 13 @ @ class InputModifiedControlVariableBothForLoops <nl> for ( int i = 0 , j = 0 ; i < 10 ; i + + ) { <nl> j + + ; <nl> } <nl> + <nl> + for ( String v : sa ) { <nl> + new NestedClass ( ) { <nl> + public void method ( ) { } <nl> + } ; <nl> + v = " bad " ; <nl> + } <nl> } <nl> private int i ; <nl> } <nl> @ @ - 83 , 3 + 90 , 6 @ @ class VariableDeclaredBeforeTheFirstBlockBegins { <nl> } <nl> } <nl> } <nl> + abstract class NestedClass { <nl> + public abstract void method ( ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java <nl> index 16487fb . . d178fbf 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java <nl> @ @ - 30 , 4 + 30 , 8 @ @ public class InputMultipleVariableDeclarations <nl> int k = 7 ; <nl> } <nl> } <nl> + <nl> + void method3 ( ) { <nl> + java . lang . Object obj ; Object obj1 ; Object obj2 ; Object obj3 ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java <nl> index a0bd746 . . bf87c8a 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java <nl> @ @ - 134 , 3 + 134 , 19 @ @ class Issue2539 { <nl> foo ( ) ; <nl> } <nl> } <nl> + class NestedRechange { <nl> + final String s = " " ; <nl> + <nl> + NestedRechange ( ) { <nl> + String s = " t " ; <nl> + s = s . substring ( 0 ) ; <nl> + } <nl> + <nl> + private static class NestedStatic { <nl> + static final String s = " " ; <nl> + <nl> + public void method ( ) { <nl> + s . substring ( 0 ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java <nl> index 57ca5e7 . . 330abb8 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java <nl> @ @ - 973 , 5 + 973 , 16 @ @ class New { <nl> } <nl> catch ( Exception e ) { } <nl> } <nl> + <nl> + void m ( ) { <nl> + final int a = 1 ; <nl> + int b = 0 ; <nl> + <nl> + if ( b = = 1 ) { <nl> + System . lineSeparator ( ) ; <nl> + } <nl> + <nl> + final int c = a + 1 ; <nl> + } <nl> <nl> }
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index d769c67 . . 3799217 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1115 , 7 + 1115 , 6 @ @ <nl> < regex > < pattern > . * . checks . annotation . AnnotationLocationCheck < / pattern > < branchRate > 75 < / branchRate > < lineRate > 78 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . annotation . AnnotationUseStyleCheck < / pattern > < branchRate > 93 < / branchRate > < lineRate > 96 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . annotation . MissingDeprecatedCheck < / pattern > < branchRate > 92 < / branchRate > < lineRate > 96 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . checks . annotation . MissingOverrideCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 96 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . annotation . PackageAnnotationCheck < / pattern > < branchRate > 50 < / branchRate > < lineRate > 77 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . annotation . SuppressWarningsCheck < / pattern > < branchRate > 79 < / branchRate > < lineRate > 96 < / lineRate > < / regex > <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheckTest . java <nl> index eb1e5cf . . 843f441 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheckTest . java <nl> @ @ - 19 , 15 + 19 , 17 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . annotation ; <nl> <nl> - import java . io . File ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . annotation . MissingOverrideCheck . MSG _ KEY _ ANNOTATION _ MISSING _ OVERRIDE ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . annotation . MissingOverrideCheck . MSG _ KEY _ TAG _ NOT _ VALID _ ON ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import java . io . File ; <nl> <nl> + import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> - import static com . puppycrawl . tools . checkstyle . checks . annotation . MissingOverrideCheck . MSG _ KEY _ ANNOTATION _ MISSING _ OVERRIDE ; <nl> - import static com . puppycrawl . tools . checkstyle . checks . annotation . MissingOverrideCheck . MSG _ KEY _ TAG _ NOT _ VALID _ ON ; <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class MissingOverrideCheckTest extends BaseCheckTestSupport { <nl> / * * <nl> @ @ - 245 , 4 + 247 , 14 @ @ public class MissingOverrideCheckTest extends BaseCheckTestSupport { <nl> <nl> verify ( checkConfig , getPath ( " annotation " + File . separator + " GoodAnnonOverride . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testGetAcceptableTockens ( ) throws Exception { <nl> + int [ ] expectedTokens = { TokenTypes . METHOD _ DEF } ; <nl> + MissingOverrideCheck check = new MissingOverrideCheck ( ) ; <nl> + int [ ] actual = check . getAcceptableTokens ( ) ; <nl> + Assert . assertTrue ( actual . length = = 1 ) ; <nl> + Assert . assertArrayEquals ( expectedTokens , actual ) ; <nl> + } <nl> } <nl> +

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 index ab45bd2 . . ef2891c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 @ @ - 447 , 7 + 447 , 6 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 * @ noinspection WeakerAccess 
 * / 
 public void setLegalAbstractClassNames ( String . . . classNames ) { 
 - legalAbstractClassNames . clear ( ) ; 
 Collections . addAll ( legalAbstractClassNames , classNames ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 index 096e14a . . f13541e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 @ @ - 527 , 16 + 527 , 17 @ @ public class VariableDeclarationUsageDistanceCheck extends AbstractCheck { 
 variableUsageAst = exprWithVariableUsage ; 
 } 
 } 
 + 
 + / / If there ' s no any variable usage , then distance = 0 . 
 + else if ( variableUsageExpressions . isEmpty ( ) ) { 
 + variableUsageAst = null ; 
 + } 
 / / If variable usage exists in different scopes , then distance = 
 / / distance until variable first usage . 
 - else if ( variableUsageExpressions . size ( ) > 1 ) { 
 + else { 
 dist + + ; 
 variableUsageAst = variableUsageExpressions . get ( 0 ) ; 
 } 
 - / / If there ' s no any variable usage , then distance = 0 . 
 - else { 
 - variableUsageAst = null ; 
 - } 
 } 
 return new SimpleEntry < > ( variableUsageAst , dist ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java 
 index 78113a1 . . d35d928 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheckTest . java 
 @ @ - 53 , 7 + 53 , 9 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { 
 " 424 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 436 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 446 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 - 
 + " 555 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 556 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 557 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputFallThrough . java " ) , 
 @ @ - 82 , 6 + 84 , 9 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { 
 " 424 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 436 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 446 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 555 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 556 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 557 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputFallThrough . java " ) , 
 @ @ - 133 , 6 + 138 , 9 @ @ public class FallThroughCheckTest extends AbstractModuleTestSupport { 
 " 507 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 514 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 " 546 : 12 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 555 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 556 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 + " 557 : 9 : " + getCheckMessage ( MSG _ FALL _ THROUGH ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputFallThrough . java " ) , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java 
 index 2d891ff . . b5b851f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java 
 @ @ - 57 , 6 + 57 , 7 @ @ public class ModifiedControlVariableCheckTest 
 " 56 : 14 : " + getCheckMessage ( MSG _ KEY , " m " ) , 
 " 67 : 15 : " + getCheckMessage ( MSG _ KEY , " i " ) , 
 " 68 : 15 : " + getCheckMessage ( MSG _ KEY , " k " ) , 
 + " 78 : 15 : " + getCheckMessage ( MSG _ KEY , " v " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputModifiedControlVariableBothForLoops . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheckTest . java 
 index 41caf84 . . fc537ab 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheckTest . java 
 @ @ - 46 , 6 + 46 , 9 @ @ public class MultipleVariableDeclarationsCheckTest extends AbstractModuleTestSup 
 " 9 : 9 : " + getCheckMessage ( MSG _ MULTIPLE ) , 
 " 13 : 5 : " + getCheckMessage ( MSG _ MULTIPLE ) , 
 " 16 : 5 : " + getCheckMessage ( MSG _ MULTIPLE ) , 
 + " 35 : 9 : " + getCheckMessage ( MSG _ MULTIPLE ) , 
 + " 35 : 31 : " + getCheckMessage ( MSG _ MULTIPLE ) , 
 + " 35 : 44 : " + getCheckMessage ( MSG _ MULTIPLE ) , 
 } ; 
 
 verify ( checkConfig , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index 48fe463 . . 6474fc4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 58 , 6 + 58 , 7 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { 
 " 121 : 13 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " Issue2240 . " ) , 
 " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , 
 " 134 : 9 : " + getCheckMessage ( MSG _ METHOD , " foo " , " " ) , 
 + " 142 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s " , " " ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputRequireThisEnumInnerClassesAndBugs . java " ) , 
 @ @ - 95 , 6 + 96 , 7 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { 
 " 113 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " " ) , 
 " 114 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " " ) , 
 " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , 
 + " 142 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s " , " " ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputRequireThisEnumInnerClassesAndBugs . java " ) , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java 
 index 5c12d04 . . 5e54ba7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java 
 @ @ - 77 , 6 + 77 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends 
 " 891 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 1 ) , 
 " 901 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 1 ) , 
 " 967 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 1 ) , 
 + " 978 : " + getCheckMessage ( MSG _ KEY , " a " , 2 , 1 ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; 
 } 
 @ @ - 171 , 6 + 172 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends 
 " 505 : " + getCheckMessage ( MSG _ KEY , " files " , 2 , 1 ) , 
 " 540 : " + getCheckMessage ( MSG _ KEY , " id " , 2 , 1 ) , 
 " 542 : " + getCheckMessage ( MSG _ KEY , " parentId " , 4 , 1 ) , 
 + " 978 : " + getCheckMessage ( MSG _ KEY , " a " , 2 , 1 ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java 
 index a3c745e . . 384499f 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / fallthrough / InputFallThrough . java 
 @ @ - 547 , 4 + 547 , 17 @ @ public class InputFallThrough 
 break ; 
 } 
 } 
 + 
 + void multipleCasesOnOneLine ( ) { 
 + int i = 0 ; 
 + switch ( i ) { 
 + case 0 : case 1 : i * = i ; / / fall through 
 + case 2 : case 3 : i * = i ; / / fall through 
 + case 4 : case 5 : i * = i ; / / fall through 
 + case 6 : case 7 : i * = i ; 
 + break ; 
 + default : 
 + throw new RuntimeException ( ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java 
 index d3f57c7 . . 01c2414 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java 
 @ @ - 70 , 6 + 70 , 13 @ @ class InputModifiedControlVariableBothForLoops 
 for ( int i = 0 , j = 0 ; i < 10 ; i + + ) { 
 j + + ; 
 } 
 + 
 + for ( String v : sa ) { 
 + new NestedClass ( ) { 
 + public void method ( ) { } 
 + } ; 
 + v = " bad " ; 
 + } 
 } 
 private int i ; 
 } 
 @ @ - 83 , 3 + 90 , 6 @ @ class VariableDeclaredBeforeTheFirstBlockBegins { 
 } 
 } 
 } 
 + abstract class NestedClass { 
 + public abstract void method ( ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java 
 index 16487fb . . d178fbf 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java 
 @ @ - 30 , 4 + 30 , 8 @ @ public class InputMultipleVariableDeclarations 
 int k = 7 ; 
 } 
 } 
 + 
 + void method3 ( ) { 
 + java . lang . Object obj ; Object obj1 ; Object obj2 ; Object obj3 ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java 
 index a0bd746 . . bf87c8a 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java 
 @ @ - 134 , 3 + 134 , 19 @ @ class Issue2539 { 
 foo ( ) ; 
 } 
 } 
 + class NestedRechange { 
 + final String s = " " ; 
 + 
 + NestedRechange ( ) { 
 + String s = " t " ; 
 + s = s . substring ( 0 ) ; 
 + } 
 + 
 + private static class NestedStatic { 
 + static final String s = " " ; 
 + 
 + public void method ( ) { 
 + s . substring ( 0 ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java 
 index 57ca5e7 . . 330abb8 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java 
 @ @ - 973 , 5 + 973 , 16 @ @ class New { 
 } 
 catch ( Exception e ) { } 
 } 
 + 
 + void m ( ) { 
 + final int a = 1 ; 
 + int b = 0 ; 
 + 
 + if ( b = = 1 ) { 
 + System . lineSeparator ( ) ; 
 + } 
 + 
 + final int c = a + 1 ; 
 + } 
 
 }

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index d769c67 . . 3799217 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1115 , 7 + 1115 , 6 @ @ 
 < regex > < pattern > . * . checks . annotation . AnnotationLocationCheck < / pattern > < branchRate > 75 < / branchRate > < lineRate > 78 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . annotation . AnnotationUseStyleCheck < / pattern > < branchRate > 93 < / branchRate > < lineRate > 96 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . annotation . MissingDeprecatedCheck < / pattern > < branchRate > 92 < / branchRate > < lineRate > 96 < / lineRate > < / regex > 
 - < regex > < pattern > . * . checks . annotation . MissingOverrideCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 96 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . annotation . PackageAnnotationCheck < / pattern > < branchRate > 50 < / branchRate > < lineRate > 77 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . annotation . SuppressWarningsCheck < / pattern > < branchRate > 79 < / branchRate > < lineRate > 96 < / lineRate > < / regex > 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheckTest . java 
 index eb1e5cf . . 843f441 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheckTest . java 
 @ @ - 19 , 15 + 19 , 17 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . annotation ; 
 
 - import java . io . File ; 
 + import static com . puppycrawl . tools . checkstyle . checks . annotation . MissingOverrideCheck . MSG _ KEY _ ANNOTATION _ MISSING _ OVERRIDE ; 
 + import static com . puppycrawl . tools . checkstyle . checks . annotation . MissingOverrideCheck . MSG _ KEY _ TAG _ NOT _ VALID _ ON ; 
 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import java . io . File ; 
 
 + import org . junit . Assert ; 
 import org . junit . Test ; 
 
 - import static com . puppycrawl . tools . checkstyle . checks . annotation . MissingOverrideCheck . MSG _ KEY _ ANNOTATION _ MISSING _ OVERRIDE ; 
 - import static com . puppycrawl . tools . checkstyle . checks . annotation . MissingOverrideCheck . MSG _ KEY _ TAG _ NOT _ VALID _ ON ; 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class MissingOverrideCheckTest extends BaseCheckTestSupport { 
 / * * 
 @ @ - 245 , 4 + 247 , 14 @ @ public class MissingOverrideCheckTest extends BaseCheckTestSupport { 
 
 verify ( checkConfig , getPath ( " annotation " + File . separator + " GoodAnnonOverride . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testGetAcceptableTockens ( ) throws Exception { 
 + int [ ] expectedTokens = { TokenTypes . METHOD _ DEF } ; 
 + MissingOverrideCheck check = new MissingOverrideCheck ( ) ; 
 + int [ ] actual = check . getAcceptableTokens ( ) ; 
 + Assert . assertTrue ( actual . length = = 1 ) ; 
 + Assert . assertArrayEquals ( expectedTokens , actual ) ; 
 + } 
 } 
 +
