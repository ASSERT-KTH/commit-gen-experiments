BLEU SCORE: 0.09548450962056532

TEST MSG: Issue # 4587 : Moved resources for FileSet check test
GENERATED MSG: Issue # 2161 : unify test input locations for metrics package

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> index c7604b1 . . 908e042 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> @ @ - 43 , 7 + 43 , 10 @ @ public class FileSetCheckLifecycleTest <nl> extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> - return super . getPath ( " checks " + File . separator + filename ) ; <nl> + return super . getPath ( " checks " + File . separator <nl> + + " misc " + File . separator <nl> + + " fileset " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 66 , 7 + 69 , 7 @ @ public class FileSetCheckLifecycleTest <nl> final Configuration checkConfig = <nl> createCheckConfig ( TestFileSetCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputFileSetIllegalTokens . java " ) , expected ) ; <nl> <nl> assertTrue ( " destroy ( ) not called by Checker " , TestFileSetCheck . isDestroyed ( ) ) ; <nl> } <nl> @ @ - 93 , 7 + 96 , 7 @ @ public class FileSetCheckLifecycleTest <nl> <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checker , getPath ( " InputIllegalTokens . java " ) , expected ) ; <nl> + verify ( checker , getPath ( " InputFileSetIllegalTokens . java " ) , expected ) ; <nl> <nl> assertTrue ( " FileContent should be available during finishProcessing ( ) call " , <nl> TestFileSetCheck . isFileContentAvailable ( ) ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / fileset / InputFileSetIllegalTokens . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / fileset / InputFileSetIllegalTokens . java <nl> new file mode 100644 <nl> index 0000000 . . 8bb5af9 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / fileset / InputFileSetIllegalTokens . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . misc . fileset ; <nl> + <nl> + public class InputFileSetIllegalTokens <nl> + { <nl> + public void methodWithPreviouslyIllegalTokens ( ) <nl> + { <nl> + int i = 0 ; <nl> + switch ( i ) <nl> + { <nl> + default : <nl> + i - - ; <nl> + i + + ; <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + public native void nativeMethod ( ) ; <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> index d9c8b97 . . 37f29c9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> @ @ - 283 , 7 + 283 , 12 @ @ public class NeedBracesCheck extends Check { <nl> else if ( literalFor . getParent ( ) . getType ( ) = = TokenTypes . SLIST <nl> & & literalFor . getLastChild ( ) . getType ( ) ! = TokenTypes . SLIST ) { <nl> final DetailAST block = findExpressionBlockInForLoop ( literalFor ) ; <nl> - result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; <nl> + if ( block = = null ) { <nl> + result = literalFor . getLineNo ( ) = = literalFor . getLastChild ( ) . getLineNo ( ) ; <nl> + } <nl> + else { <nl> + result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; <nl> + } <nl> } <nl> return result ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> index e1d3561 . . e3b1443 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> @ @ - 67 , 10 + 67 , 11 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> " 38 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> " 46 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " while " ) , <nl> " 53 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " do " ) , <nl> - " 59 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , <nl> - " 88 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> - " 92 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , <nl> - " 104 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> + " 56 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , <nl> + " 62 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , <nl> + " 91 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> + " 95 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , <nl> + " 107 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; <nl> } <nl> @ @ - 96 , 8 + 97 , 8 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " tokens " , " LITERAL _ CASE , LITERAL _ DEFAULT " ) ; <nl> checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; <nl> final String [ ] expected = { <nl> - " 69 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> " 72 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> + " 75 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java <nl> index 0a9c5c2 . . 9d04f7f 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java <nl> @ @ - 53 , 6 + 53 , 9 @ @ public class InputBracesSingleLineStatements <nl> do <nl> this . notify ( ) ; <nl> while ( o ! = null ) ; <nl> + for ( ; ; ) <nl> + break ; <nl> + for ( ; ; ) break ; <nl> for ( int i = 0 ; i < 10 ; i + + ) { <nl> this . notify ( ) ; <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 index c7604b1 . . 908e042 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 @ @ - 43 , 7 + 43 , 10 @ @ public class FileSetCheckLifecycleTest 
 extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 - return super . getPath ( " checks " + File . separator + filename ) ; 
 + return super . getPath ( " checks " + File . separator 
 + + " misc " + File . separator 
 + + " fileset " + File . separator 
 + + filename ) ; 
 } 
 
 @ Override 
 @ @ - 66 , 7 + 69 , 7 @ @ public class FileSetCheckLifecycleTest 
 final Configuration checkConfig = 
 createCheckConfig ( TestFileSetCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputFileSetIllegalTokens . java " ) , expected ) ; 
 
 assertTrue ( " destroy ( ) not called by Checker " , TestFileSetCheck . isDestroyed ( ) ) ; 
 } 
 @ @ - 93 , 7 + 96 , 7 @ @ public class FileSetCheckLifecycleTest 
 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checker , getPath ( " InputIllegalTokens . java " ) , expected ) ; 
 + verify ( checker , getPath ( " InputFileSetIllegalTokens . java " ) , expected ) ; 
 
 assertTrue ( " FileContent should be available during finishProcessing ( ) call " , 
 TestFileSetCheck . isFileContentAvailable ( ) ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / fileset / InputFileSetIllegalTokens . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / fileset / InputFileSetIllegalTokens . java 
 new file mode 100644 
 index 0000000 . . 8bb5af9 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / fileset / InputFileSetIllegalTokens . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . misc . fileset ; 
 + 
 + public class InputFileSetIllegalTokens 
 + { 
 + public void methodWithPreviouslyIllegalTokens ( ) 
 + { 
 + int i = 0 ; 
 + switch ( i ) 
 + { 
 + default : 
 + i - - ; 
 + i + + ; 
 + break ; 
 + } 
 + } 
 + 
 + public native void nativeMethod ( ) ; 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 index d9c8b97 . . 37f29c9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 @ @ - 283 , 7 + 283 , 12 @ @ public class NeedBracesCheck extends Check { 
 else if ( literalFor . getParent ( ) . getType ( ) = = TokenTypes . SLIST 
 & & literalFor . getLastChild ( ) . getType ( ) ! = TokenTypes . SLIST ) { 
 final DetailAST block = findExpressionBlockInForLoop ( literalFor ) ; 
 - result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; 
 + if ( block = = null ) { 
 + result = literalFor . getLineNo ( ) = = literalFor . getLastChild ( ) . getLineNo ( ) ; 
 + } 
 + else { 
 + result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; 
 + } 
 } 
 return result ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 index e1d3561 . . e3b1443 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 @ @ - 67 , 10 + 67 , 11 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 " 38 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 " 46 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " while " ) , 
 " 53 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " do " ) , 
 - " 59 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , 
 - " 88 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 - " 92 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , 
 - " 104 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 + " 56 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , 
 + " 62 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , 
 + " 91 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 + " 95 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , 
 + " 107 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; 
 } 
 @ @ - 96 , 8 + 97 , 8 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " tokens " , " LITERAL _ CASE , LITERAL _ DEFAULT " ) ; 
 checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; 
 final String [ ] expected = { 
 - " 69 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 " 72 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 + " 75 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java 
 index 0a9c5c2 . . 9d04f7f 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java 
 @ @ - 53 , 6 + 53 , 9 @ @ public class InputBracesSingleLineStatements 
 do 
 this . notify ( ) ; 
 while ( o ! = null ) ; 
 + for ( ; ; ) 
 + break ; 
 + for ( ; ; ) break ; 
 for ( int i = 0 ; i < 10 ; i + + ) { 
 this . notify ( ) ; 
 }
