BLEU SCORE: 0.8633400213704505

TEST MSG: Issue # 2451 : removed excess hierarchy from TrailingCommentCheck
GENERATED MSG: Issue # 2451 : removed excess hierarchy from PackageNameCheck

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index cf7f7a8 . . 311af6a 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 37 , 7 + 37 , 7 @ @ <nl> files = " AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java " / > <nl> <nl> < ! - - Tone down the checking for test code - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 323 " / > <nl> + < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 322 " / > <nl> < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > <nl> < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> < suppress checks = " Javadoc " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> index d765977 . . fea76f8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . util . regex . Pattern ; <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> <nl> import com . google . common . collect . Sets ; <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TextBlock ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> @ @ - 98 , 7 + 99 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * <nl> * @ author o _ sukhodolsky <nl> * / <nl> - public class TrailingCommentCheck extends AbstractFormatCheck { <nl> + public class TrailingCommentCheck extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 106 , 25 + 107 , 31 @ @ public class TrailingCommentCheck extends AbstractFormatCheck { <nl> * / <nl> public static final String MSG _ KEY = " trailing . comments " ; <nl> <nl> - / * * Default format for allowed blank line . * / <nl> - private static final String DEFAULT _ FORMAT = " ^ [ \ \ s \ \ } \ \ ) ; ] * $ " ; <nl> - <nl> / * * Pattern for legal trailing comment . * / <nl> private Pattern legalComment ; <nl> <nl> + / * * The format string of the regexp . * / <nl> + private String format = " ^ [ \ \ s \ \ } \ \ ) ; ] * $ " ; <nl> + <nl> + / * * The regexp to match against . * / <nl> + private Pattern regexp = Pattern . compile ( format ) ; <nl> + <nl> / * * <nl> - * Creates new instance of the check . <nl> + * Sets patter for legal trailing comments . <nl> + * @ param legalComment format to set . <nl> * / <nl> - public TrailingCommentCheck ( ) { <nl> - super ( DEFAULT _ FORMAT ) ; <nl> + public void setLegalComment ( final String legalComment ) { <nl> + this . legalComment = CommonUtils . createPattern ( legalComment ) ; <nl> } <nl> <nl> / * * <nl> - * Sets patter for legal trailing comments . <nl> - * @ param format format to set . <nl> + * Set the format to the specified regular expression . <nl> + * @ param format a { @ code String } value <nl> + * @ throws org . apache . commons . beanutils . ConversionException unable to parse format <nl> * / <nl> - public void setLegalComment ( final String format ) { <nl> - legalComment = CommonUtils . createPattern ( format ) ; <nl> + public final void setFormat ( String format ) { <nl> + this . format = format ; <nl> + regexp = CommonUtils . createPattern ( format ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 149 , 7 + 156 , 6 @ @ public class TrailingCommentCheck extends AbstractFormatCheck { <nl> <nl> @ Override <nl> public void beginTree ( DetailAST rootAST ) { <nl> - final Pattern blankLinePattern = getRegexp ( ) ; <nl> final Map < Integer , TextBlock > cppComments = getFileContents ( ) <nl> . getCppComments ( ) ; <nl> final Map < Integer , List < TextBlock > > cComments = getFileContents ( ) <nl> @ @ - 177 , 7 + 183 , 7 @ @ public class TrailingCommentCheck extends AbstractFormatCheck { <nl> continue ; <nl> } <nl> } <nl> - if ( ! blankLinePattern . matcher ( lineBefore ) . find ( ) <nl> + if ( ! regexp . matcher ( lineBefore ) . find ( ) <nl> & & ! isLegalComment ( comment ) ) { <nl> log ( lineNo , MSG _ KEY ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> index dc50d61 . . 20b4e4b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> @ @ - 115 , 7 + 115 , 6 @ @ public class XDocsPagesTest { <nl> " ReturnCountCheck . compileFlags " , <nl> " IllegalTypeCheck . compileFlags " , <nl> " MutableExceptionCheck . compileFlags " , <nl> - " TrailingCommentCheck . compileFlags " , <nl> " AbstractClassNameCheck . compileFlags " , <nl> " ClassTypeParameterNameCheck . compileFlags " , <nl> " ConstantNameCheck . compileFlags " ,
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> index f04e800 . . da90b2f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> @ @ - 306 , 7 + 306 , 7 @ @ public class SuppressWarningsHolder <nl> * @ return get target of annotation <nl> * / <nl> private static DetailAST getAnnotationTarget ( DetailAST ast ) { <nl> - DetailAST targetAST = null ; <nl> + DetailAST targetAST ; <nl> final DetailAST parentAST = ast . getParent ( ) ; <nl> switch ( parentAST . getType ( ) ) { <nl> case TokenTypes . MODIFIERS :

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index cf7f7a8 . . 311af6a 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 37 , 7 + 37 , 7 @ @ 
 files = " AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java " / > 
 
 < ! - - Tone down the checking for test code - - > 
 - < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 323 " / > 
 + < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 322 " / > 
 < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > 
 < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 < suppress checks = " Javadoc " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 index d765977 . . fea76f8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . util . regex . Pattern ; 
 import org . apache . commons . lang3 . ArrayUtils ; 
 
 import com . google . common . collect . Sets ; 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TextBlock ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 @ @ - 98 , 7 + 99 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * 
 * @ author o _ sukhodolsky 
 * / 
 - public class TrailingCommentCheck extends AbstractFormatCheck { 
 + public class TrailingCommentCheck extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 106 , 25 + 107 , 31 @ @ public class TrailingCommentCheck extends AbstractFormatCheck { 
 * / 
 public static final String MSG _ KEY = " trailing . comments " ; 
 
 - / * * Default format for allowed blank line . * / 
 - private static final String DEFAULT _ FORMAT = " ^ [ \ \ s \ \ } \ \ ) ; ] * $ " ; 
 - 
 / * * Pattern for legal trailing comment . * / 
 private Pattern legalComment ; 
 
 + / * * The format string of the regexp . * / 
 + private String format = " ^ [ \ \ s \ \ } \ \ ) ; ] * $ " ; 
 + 
 + / * * The regexp to match against . * / 
 + private Pattern regexp = Pattern . compile ( format ) ; 
 + 
 / * * 
 - * Creates new instance of the check . 
 + * Sets patter for legal trailing comments . 
 + * @ param legalComment format to set . 
 * / 
 - public TrailingCommentCheck ( ) { 
 - super ( DEFAULT _ FORMAT ) ; 
 + public void setLegalComment ( final String legalComment ) { 
 + this . legalComment = CommonUtils . createPattern ( legalComment ) ; 
 } 
 
 / * * 
 - * Sets patter for legal trailing comments . 
 - * @ param format format to set . 
 + * Set the format to the specified regular expression . 
 + * @ param format a { @ code String } value 
 + * @ throws org . apache . commons . beanutils . ConversionException unable to parse format 
 * / 
 - public void setLegalComment ( final String format ) { 
 - legalComment = CommonUtils . createPattern ( format ) ; 
 + public final void setFormat ( String format ) { 
 + this . format = format ; 
 + regexp = CommonUtils . createPattern ( format ) ; 
 } 
 
 @ Override 
 @ @ - 149 , 7 + 156 , 6 @ @ public class TrailingCommentCheck extends AbstractFormatCheck { 
 
 @ Override 
 public void beginTree ( DetailAST rootAST ) { 
 - final Pattern blankLinePattern = getRegexp ( ) ; 
 final Map < Integer , TextBlock > cppComments = getFileContents ( ) 
 . getCppComments ( ) ; 
 final Map < Integer , List < TextBlock > > cComments = getFileContents ( ) 
 @ @ - 177 , 7 + 183 , 7 @ @ public class TrailingCommentCheck extends AbstractFormatCheck { 
 continue ; 
 } 
 } 
 - if ( ! blankLinePattern . matcher ( lineBefore ) . find ( ) 
 + if ( ! regexp . matcher ( lineBefore ) . find ( ) 
 & & ! isLegalComment ( comment ) ) { 
 log ( lineNo , MSG _ KEY ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 index dc50d61 . . 20b4e4b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 @ @ - 115 , 7 + 115 , 6 @ @ public class XDocsPagesTest { 
 " ReturnCountCheck . compileFlags " , 
 " IllegalTypeCheck . compileFlags " , 
 " MutableExceptionCheck . compileFlags " , 
 - " TrailingCommentCheck . compileFlags " , 
 " AbstractClassNameCheck . compileFlags " , 
 " ClassTypeParameterNameCheck . compileFlags " , 
 " ConstantNameCheck . compileFlags " ,

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 index f04e800 . . da90b2f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 @ @ - 306 , 7 + 306 , 7 @ @ public class SuppressWarningsHolder 
 * @ return get target of annotation 
 * / 
 private static DetailAST getAnnotationTarget ( DetailAST ast ) { 
 - DetailAST targetAST = null ; 
 + DetailAST targetAST ; 
 final DetailAST parentAST = ast . getParent ( ) ; 
 switch ( parentAST . getType ( ) ) { 
 case TokenTypes . MODIFIERS :
