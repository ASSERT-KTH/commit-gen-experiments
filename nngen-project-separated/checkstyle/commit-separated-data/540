BLEU SCORE: 0.10552670315936319

TEST MSG: Issue # 4999 : XpathQueryGenerator should consider tabWith parameter
GENERATED MSG: Issue # 4901 : Implement xpath query generator

TEST DIFF (one line): diff - - git a / config / import - control . xml b / config / import - control . xml <nl> index cab9f3d . . 5fdb1de 100644 <nl> - - - a / config / import - control . xml <nl> + + + b / config / import - control . xml <nl> @ @ - 170 , 6 + 170 , 7 @ @ <nl> < subpackage name = " xpath " > <nl> < allow pkg = " net . sf . saxon " / > <nl> < allow class = " java . lang . reflect . Field " / > <nl> + < allow class = " java . nio . charset . StandardCharsets " local - only = " true " / > <nl> < allow pkg = " com . puppycrawl . tools . checkstyle . utils " local - only = " true " / > <nl> < / subpackage > <nl> < / import - control > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGenerator . java b / src / main / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGenerator . java <nl> index 85f01d2 . . 7cf945f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGenerator . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGenerator . java <nl> @ @ - 24 , 7 + 24 , 9 @ @ import java . util . List ; <nl> import java . util . stream . Collectors ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> <nl> / * * <nl> @ @ - 75 , 6 + 77 , 10 @ @ public class XpathQueryGenerator { <nl> private final int lineNumber ; <nl> / * * The column number of the element for which the query should be generated . * / <nl> private final int columnNumber ; <nl> + / * * The { @ code FileText } object , representing content of the file . * / <nl> + private final FileText fileText ; <nl> + / * * The distance between tab stop position . * / <nl> + private final int tabWidth ; <nl> <nl> / * * <nl> * Creates a new { @ code XpathQueryGenerator } instance . <nl> @ @ - 82 , 11 + 88 , 16 @ @ public class XpathQueryGenerator { <nl> * @ param rootAst root ast <nl> * @ param lineNumber line number of the element for which the query should be generated <nl> * @ param columnNumber column number of the element for which the query should be generated <nl> + * @ param fileText the { @ code FileText } object <nl> + * @ param tabWidth distance between tab stop position <nl> * / <nl> - public XpathQueryGenerator ( DetailAST rootAst , int lineNumber , int columnNumber ) { <nl> + public XpathQueryGenerator ( DetailAST rootAst , int lineNumber , int columnNumber , <nl> + FileText fileText , int tabWidth ) { <nl> this . rootAst = rootAst ; <nl> this . lineNumber = lineNumber ; <nl> this . columnNumber = columnNumber ; <nl> + this . fileText = fileText ; <nl> + this . tabWidth = tabWidth ; <nl> } <nl> <nl> / * * <nl> @ @ - 95 , 7 + 106 , 7 @ @ public class XpathQueryGenerator { <nl> * @ return list of xpath queries of nodes , matching line and column number <nl> * / <nl> public List < String > generate ( ) { <nl> - return getMatchingAstElements ( rootAst , lineNumber , columnNumber ) <nl> + return getMatchingAstElements ( ) <nl> . stream ( ) <nl> . map ( XpathQueryGenerator : : generateXpathQuery ) <nl> . collect ( Collectors . toList ( ) ) ; <nl> @ @ - 132 , 19 + 143 , 13 @ @ public class XpathQueryGenerator { <nl> <nl> / * * <nl> * Returns list of nodes matching defined line and column number . <nl> - * @ param root { @ code DetailAST } root ast <nl> - * @ param lineNumber line number <nl> - * @ param columnNumber column number <nl> * @ return list of nodes matching defined line and column number <nl> * / <nl> - private static List < DetailAST > getMatchingAstElements ( DetailAST root , int lineNumber , <nl> - int columnNumber ) { <nl> + private List < DetailAST > getMatchingAstElements ( ) { <nl> final List < DetailAST > result = new ArrayList < > ( ) ; <nl> - DetailAST curNode = root ; <nl> + DetailAST curNode = rootAst ; <nl> while ( curNode ! = null & & curNode . getLineNo ( ) < = lineNumber ) { <nl> - if ( curNode . getLineNo ( ) = = lineNumber <nl> - & & curNode . getColumnNo ( ) = = columnNumber <nl> - & & curNode . getType ( ) ! = TokenTypes . IDENT ) { <nl> + if ( isMatchingByLineAndColumnAndNotIdent ( curNode ) ) { <nl> result . add ( curNode ) ; <nl> } <nl> DetailAST toVisit = curNode . getFirstChild ( ) ; <nl> @ @ - 219 , 6 + 224 , 28 @ @ public class XpathQueryGenerator { <nl> } <nl> <nl> / * * <nl> + * Returns the column number with tabs expanded . <nl> + * @ param ast { @ code DetailAST } root ast <nl> + * @ return the column number with tabs expanded <nl> + * / <nl> + private int expandedTabColumn ( DetailAST ast ) { <nl> + return 1 + CommonUtils . lengthExpandedTabs ( fileText . get ( lineNumber - 1 ) , <nl> + ast . getColumnNo ( ) , tabWidth ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if the given { @ code DetailAST } node is matching line and column number and <nl> + * it is not { @ link TokenTypes # IDENT } . <nl> + * @ param ast { @ code DetailAST } ast element <nl> + * @ return true if the given { @ code DetailAST } node is matching <nl> + * / <nl> + private boolean isMatchingByLineAndColumnAndNotIdent ( DetailAST ast ) { <nl> + return ast . getType ( ) ! = TokenTypes . IDENT <nl> + & & ast . getLineNo ( ) = = lineNumber <nl> + & & expandedTabColumn ( ast ) = = columnNumber ; <nl> + } <nl> + <nl> + / * * <nl> * To be sure that generated xpath query will return exactly required ast element , the element <nl> * should be checked for uniqueness . If ast element has { @ link TokenTypes # IDENT } as the child <nl> * or there is no sibling with the same { @ code TokenTypes } then element is supposed to be <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGeneratorTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGeneratorTest . java <nl> index c3dda3c . . 7318025 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGeneratorTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGeneratorTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> import java . io . File ; <nl> + import java . nio . charset . StandardCharsets ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> @ @ - 32 , 12 + 33 , 17 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . AbstractPathTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . internal . TestUtils ; <nl> <nl> public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> <nl> + private static final int DEFAULT _ TAB _ WIDTH = 4 ; <nl> + <nl> private static DetailAST rootAst ; <nl> <nl> + private static FileText fileText ; <nl> + <nl> @ Override <nl> protected String getPackageLocation ( ) { <nl> return " com / puppycrawl / tools / checkstyle / xpath / xpathquerygenerator " ; <nl> @ @ - 46 , 15 + 52 , 17 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Before <nl> public void init ( ) throws Exception { <nl> final File file = new File ( getPath ( " InputXpathQueryGenerator . java " ) ) ; <nl> + fileText = new FileText ( file , <nl> + StandardCharsets . UTF _ 8 . name ( ) ) ; <nl> rootAst = TestUtils . parseFile ( file ) ; <nl> } <nl> <nl> @ Test <nl> public void testClassDef ( ) { <nl> final int lineNumber = 12 ; <nl> - final int columnNumber = 0 ; <nl> + final int columnNumber = 1 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Arrays . asList ( <nl> " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] " , <nl> @ @ - 66 , 9 + 74 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testMethodDef ( ) { <nl> final int lineNumber = 45 ; <nl> - final int columnNumber = 4 ; <nl> + final int columnNumber = 5 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Arrays . asList ( <nl> " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] " <nl> @ @ - 83 , 9 + 91 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testVariableDef ( ) { <nl> final int lineNumber = 53 ; <nl> - final int columnNumber = 12 ; <nl> + final int columnNumber = 13 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Arrays . asList ( <nl> " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " <nl> @ @ - 106 , 9 + 114 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testLcurly ( ) { <nl> final int lineNumber = 37 ; <nl> - final int columnNumber = 19 ; <nl> + final int columnNumber = 20 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Collections . singletonList ( <nl> " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK / METHOD _ DEF [ @ text = ' Label ' ] " <nl> @ @ - 119 , 9 + 127 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testRcurly ( ) { <nl> final int lineNumber = 25 ; <nl> - final int columnNumber = 4 ; <nl> + final int columnNumber = 5 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Collections . singletonList ( <nl> " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK / INSTANCE _ INIT " <nl> @ @ - 132 , 9 + 140 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testExpr ( ) { <nl> final int lineNumber = 17 ; <nl> - final int columnNumber = 49 ; <nl> + final int columnNumber = 50 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Arrays . asList ( <nl> " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " <nl> @ @ - 147 , 9 + 155 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testLparen ( ) { <nl> final int lineNumber = 45 ; <nl> - final int columnNumber = 30 ; <nl> + final int columnNumber = 31 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Collections . singletonList ( <nl> " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " <nl> @ @ - 162 , 7 + 170 , 7 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> final int lineNumber = 300 ; <nl> final int columnNumber = 300 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> assertTrue ( " Result should be empty " , actual . isEmpty ( ) ) ; <nl> } <nl> @ @ - 170 , 9 + 178 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testPackage ( ) { <nl> final int lineNumber = 2 ; <nl> - final int columnNumber = 0 ; <nl> + final int columnNumber = 1 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Collections . singletonList ( <nl> " / PACKAGE _ DEF " ) ; <nl> @ @ - 182 , 9 + 190 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testImport ( ) { <nl> final int lineNumber = 5 ; <nl> - final int columnNumber = 0 ; <nl> + final int columnNumber = 1 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Collections . singletonList ( <nl> " / IMPORT [ . / DOT [ @ text = ' File ' ] ] " ) ; <nl> @ @ - 194 , 9 + 202 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testMethodParams ( ) { <nl> final int lineNumber = 72 ; <nl> - final int columnNumber = 29 ; <nl> + final int columnNumber = 30 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Arrays . asList ( <nl> " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " <nl> @ @ - 215 , 9 + 223 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testSwitch ( ) { <nl> final int lineNumber = 37 ; <nl> - final int columnNumber = 8 ; <nl> + final int columnNumber = 9 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Collections . singletonList ( <nl> " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " <nl> @ @ - 228 , 9 + 236 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testSwitchCase ( ) { <nl> final int lineNumber = 38 ; <nl> - final int columnNumber = 12 ; <nl> + final int columnNumber = 13 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Arrays . asList ( <nl> " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK / METHOD _ DEF [ @ text = ' Label ' ] " <nl> @ @ - 243 , 9 + 251 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testVariableStringLiteral ( ) { <nl> final int lineNumber = 47 ; <nl> - final int columnNumber = 25 ; <nl> + final int columnNumber = 26 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Arrays . asList ( <nl> " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " <nl> @ @ - 260 , 9 + 268 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testComma ( ) { <nl> final int lineNumber = 66 ; <nl> - final int columnNumber = 35 ; <nl> + final int columnNumber = 36 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Collections . singletonList ( <nl> " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK / METHOD _ DEF [ @ text = ' foo ' ] " <nl> @ @ - 273 , 9 + 281 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testLiteralVoid ( ) { <nl> final int lineNumber = 65 ; <nl> - final int columnNumber = 11 ; <nl> + final int columnNumber = 12 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Arrays . asList ( <nl> " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " <nl> @ @ - 288 , 9 + 296 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testFirstImport ( ) { <nl> final int lineNumber = 4 ; <nl> - final int columnNumber = 0 ; <nl> + final int columnNumber = 1 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Collections . singletonList ( <nl> " / IMPORT [ . / DOT [ @ text = ' JToolBar ' ] ] " ) ; <nl> @ @ - 300 , 12 + 308 , 90 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testLastImport ( ) { <nl> final int lineNumber = 8 ; <nl> - final int columnNumber = 0 ; <nl> + final int columnNumber = 1 ; <nl> final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , <nl> - columnNumber ) ; <nl> + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; <nl> final List < String > actual = queryGenerator . generate ( ) ; <nl> final List < String > expected = Collections . singletonList ( <nl> " / IMPORT [ . / DOT [ @ text = ' Iterator ' ] ] " ) ; <nl> assertEquals ( " Generated queries do not match expected ones " , expected , actual ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testTabWidthBeforeMethodDef ( ) throws Exception { <nl> + final File testFile = new File ( getPath ( " InputXpathQueryGeneratorTabWidth . java " ) ) ; <nl> + final FileText testFileText = new FileText ( testFile , <nl> + StandardCharsets . UTF _ 8 . name ( ) ) ; <nl> + final DetailAST detailAst = TestUtils . parseFile ( testFile ) ; <nl> + final int lineNumber = 4 ; <nl> + final int columnNumber = 13 ; <nl> + final int tabWidth = 4 ; <nl> + final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( detailAst , lineNumber , <nl> + columnNumber , testFileText , tabWidth ) ; <nl> + final List < String > actual = queryGenerator . generate ( ) ; <nl> + final List < String > expected = Arrays . asList ( <nl> + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' toString ' ] " , <nl> + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' toString ' ] / MODIFIERS " , <nl> + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' toString ' ] / MODIFIERS / LITERAL _ PUBLIC " ) ; <nl> + assertEquals ( " Generated queries do not match expected ones " , expected , actual ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTabWidthAfterVoidLiteral ( ) throws Exception { <nl> + final File testFile = new File ( getPath ( " InputXpathQueryGeneratorTabWidth . java " ) ) ; <nl> + final FileText testFileText = new FileText ( testFile , <nl> + StandardCharsets . UTF _ 8 . name ( ) ) ; <nl> + final DetailAST detailAst = TestUtils . parseFile ( testFile ) ; <nl> + final int lineNumber = 8 ; <nl> + final int columnNumber = 41 ; <nl> + final int tabWidth = 8 ; <nl> + final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( detailAst , lineNumber , <nl> + columnNumber , testFileText , tabWidth ) ; <nl> + final List < String > actual = queryGenerator . generate ( ) ; <nl> + final List < String > expected = Arrays . asList ( <nl> + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' getName ' ] / TYPE " , <nl> + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' getName ' ] / TYPE / LITERAL _ VOID " ) ; <nl> + assertEquals ( " Generated queries do not match expected ones " , expected , actual ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTabWidthBeforeSlist ( ) throws Exception { <nl> + final File testFile = new File ( getPath ( " InputXpathQueryGeneratorTabWidth . java " ) ) ; <nl> + final FileText testFileText = new FileText ( testFile , <nl> + StandardCharsets . UTF _ 8 . name ( ) ) ; <nl> + final DetailAST detailAst = TestUtils . parseFile ( testFile ) ; <nl> + final int lineNumber = 12 ; <nl> + final int columnNumber = 57 ; <nl> + final int tabWidth = 8 ; <nl> + final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( detailAst , lineNumber , <nl> + columnNumber , testFileText , tabWidth ) ; <nl> + final List < String > actual = queryGenerator . generate ( ) ; <nl> + final List < String > expected = Collections . singletonList ( <nl> + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' tabAfterMe ' ] / SLIST " ) ; <nl> + assertEquals ( " Generated queries do not match expected ones " , expected , actual ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTabWidthEndOfLine ( ) throws Exception { <nl> + final File testFile = new File ( getPath ( " InputXpathQueryGeneratorTabWidth . java " ) ) ; <nl> + final FileText testFileText = new FileText ( testFile , <nl> + StandardCharsets . UTF _ 8 . name ( ) ) ; <nl> + final DetailAST detailAst = TestUtils . parseFile ( testFile ) ; <nl> + final int lineNumber = 16 ; <nl> + final int columnNumber = 58 ; <nl> + final int tabWidth = 8 ; <nl> + final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( detailAst , lineNumber , <nl> + columnNumber , testFileText , tabWidth ) ; <nl> + final List < String > actual = queryGenerator . generate ( ) ; <nl> + final List < String > expected = Collections . singletonList ( <nl> + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " <nl> + + " / VARIABLE _ DEF [ @ text = ' endLineTab ' ] / SEMI " ) ; <nl> + assertEquals ( " Generated queries do not match expected ones " , expected , actual ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / xpath / xpathquerygenerator / InputXpathQueryGeneratorTabWidth . java b / src / test / resources / com / puppycrawl / tools / checkstyle / xpath / xpathquerygenerator / InputXpathQueryGeneratorTabWidth . java <nl> new file mode 100644 <nl> index 0000000 . . 03545c1 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / xpath / xpathquerygenerator / InputXpathQueryGeneratorTabWidth . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . puppycrawl . tools . checkstyle . xpath . xpathquerygenerator ; <nl> + <nl> + public class InputXpathQueryGeneratorTabWidth { <nl> + 	 	 	 public String toString ( ) { <nl> + 	 	 	 	 return " " ; <nl> + 	 	 	 } <nl> + <nl> + 	 	 	 public 	 	 void getName ( ) { <nl> + <nl> + 	 	 	 } <nl> + <nl> + 	 	 	 private int tabAfterMe ( ) 	 { <nl> + 	 	 	 	 return 1 ; <nl> + 	 	 	 } <nl> + <nl> + 	 	 	 private String endLineTab = " qwe " ; <nl> + <nl> + <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java <nl> index eb41650 . . b47853d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java <nl> @ @ - 82 , 7 + 82 , 8 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport <nl> <nl> try { <nl> final Class < ? > moduleClass = Class . forName ( moduleConfig . getName ( ) ) ; <nl> - if ( ModuleReflectionUtils . isCheckstyleCheck ( moduleClass ) ) { <nl> + if ( ModuleReflectionUtils . isCheckstyleCheck ( moduleClass ) <nl> + | | ModuleReflectionUtils . isTreeWalkerFilterModule ( moduleClass ) ) { <nl> addTreeWalker = true ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> index 4690ad3 . . b4adb4c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . checks . imports . ImportControlCheck ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> + import com . puppycrawl . tools . checkstyle . utils . ModuleReflectionUtils ; <nl> <nl> public class AllChecksTest extends AbstractModuleTestSupport { <nl> private static final Locale [ ] ALL _ LOCALES = { <nl> @ @ - 236 , 20 + 237 , 24 @ @ public class AllChecksTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testAllChecksWithDefaultConfiguration ( ) throws Exception { <nl> + public void testAllModulesWithDefaultConfiguration ( ) throws Exception { <nl> final String inputFilePath = getPath ( " InputAllChecksDefaultConfig . java " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - for ( Class < ? > check : CheckUtil . getCheckstyleChecks ( ) ) { <nl> - final DefaultConfiguration checkConfig = createModuleConfig ( check ) ; <nl> + for ( Class < ? > module : CheckUtil . getCheckstyleModules ( ) ) { <nl> + if ( ModuleReflectionUtils . isRootModule ( module ) ) { <nl> + continue ; <nl> + } <nl> + <nl> + final DefaultConfiguration moduleConfig = createModuleConfig ( module ) ; <nl> final Checker checker ; <nl> - if ( check . equals ( ImportControlCheck . class ) ) { <nl> + if ( module . equals ( ImportControlCheck . class ) ) { <nl> / / ImportControlCheck must have the import control configuration file to avoid <nl> / / violation . <nl> - checkConfig . addAttribute ( " file " , getPath ( <nl> + moduleConfig . addAttribute ( " file " , getPath ( <nl> " InputAllChecksImport - control _ complete . xml " ) ) ; <nl> } <nl> - checker = createChecker ( checkConfig ) ; <nl> + checker = createChecker ( moduleConfig ) ; <nl> verify ( checker , inputFilePath , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / internal / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / internal / package - info . java <nl> new file mode 100644 <nl> index 0000000 . . d221a79 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / internal / package - info . java <nl> @ @ - 0 , 0 + 1 @ @ <nl> + package com . puppycrawl . tools . checkstyle . internal ;

TEST DIFF:
diff - - git a / config / import - control . xml b / config / import - control . xml 
 index cab9f3d . . 5fdb1de 100644 
 - - - a / config / import - control . xml 
 + + + b / config / import - control . xml 
 @ @ - 170 , 6 + 170 , 7 @ @ 
 < subpackage name = " xpath " > 
 < allow pkg = " net . sf . saxon " / > 
 < allow class = " java . lang . reflect . Field " / > 
 + < allow class = " java . nio . charset . StandardCharsets " local - only = " true " / > 
 < allow pkg = " com . puppycrawl . tools . checkstyle . utils " local - only = " true " / > 
 < / subpackage > 
 < / import - control > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGenerator . java b / src / main / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGenerator . java 
 index 85f01d2 . . 7cf945f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGenerator . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGenerator . java 
 @ @ - 24 , 7 + 24 , 9 @ @ import java . util . List ; 
 import java . util . stream . Collectors ; 
 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 
 / * * 
 @ @ - 75 , 6 + 77 , 10 @ @ public class XpathQueryGenerator { 
 private final int lineNumber ; 
 / * * The column number of the element for which the query should be generated . * / 
 private final int columnNumber ; 
 + / * * The { @ code FileText } object , representing content of the file . * / 
 + private final FileText fileText ; 
 + / * * The distance between tab stop position . * / 
 + private final int tabWidth ; 
 
 / * * 
 * Creates a new { @ code XpathQueryGenerator } instance . 
 @ @ - 82 , 11 + 88 , 16 @ @ public class XpathQueryGenerator { 
 * @ param rootAst root ast 
 * @ param lineNumber line number of the element for which the query should be generated 
 * @ param columnNumber column number of the element for which the query should be generated 
 + * @ param fileText the { @ code FileText } object 
 + * @ param tabWidth distance between tab stop position 
 * / 
 - public XpathQueryGenerator ( DetailAST rootAst , int lineNumber , int columnNumber ) { 
 + public XpathQueryGenerator ( DetailAST rootAst , int lineNumber , int columnNumber , 
 + FileText fileText , int tabWidth ) { 
 this . rootAst = rootAst ; 
 this . lineNumber = lineNumber ; 
 this . columnNumber = columnNumber ; 
 + this . fileText = fileText ; 
 + this . tabWidth = tabWidth ; 
 } 
 
 / * * 
 @ @ - 95 , 7 + 106 , 7 @ @ public class XpathQueryGenerator { 
 * @ return list of xpath queries of nodes , matching line and column number 
 * / 
 public List < String > generate ( ) { 
 - return getMatchingAstElements ( rootAst , lineNumber , columnNumber ) 
 + return getMatchingAstElements ( ) 
 . stream ( ) 
 . map ( XpathQueryGenerator : : generateXpathQuery ) 
 . collect ( Collectors . toList ( ) ) ; 
 @ @ - 132 , 19 + 143 , 13 @ @ public class XpathQueryGenerator { 
 
 / * * 
 * Returns list of nodes matching defined line and column number . 
 - * @ param root { @ code DetailAST } root ast 
 - * @ param lineNumber line number 
 - * @ param columnNumber column number 
 * @ return list of nodes matching defined line and column number 
 * / 
 - private static List < DetailAST > getMatchingAstElements ( DetailAST root , int lineNumber , 
 - int columnNumber ) { 
 + private List < DetailAST > getMatchingAstElements ( ) { 
 final List < DetailAST > result = new ArrayList < > ( ) ; 
 - DetailAST curNode = root ; 
 + DetailAST curNode = rootAst ; 
 while ( curNode ! = null & & curNode . getLineNo ( ) < = lineNumber ) { 
 - if ( curNode . getLineNo ( ) = = lineNumber 
 - & & curNode . getColumnNo ( ) = = columnNumber 
 - & & curNode . getType ( ) ! = TokenTypes . IDENT ) { 
 + if ( isMatchingByLineAndColumnAndNotIdent ( curNode ) ) { 
 result . add ( curNode ) ; 
 } 
 DetailAST toVisit = curNode . getFirstChild ( ) ; 
 @ @ - 219 , 6 + 224 , 28 @ @ public class XpathQueryGenerator { 
 } 
 
 / * * 
 + * Returns the column number with tabs expanded . 
 + * @ param ast { @ code DetailAST } root ast 
 + * @ return the column number with tabs expanded 
 + * / 
 + private int expandedTabColumn ( DetailAST ast ) { 
 + return 1 + CommonUtils . lengthExpandedTabs ( fileText . get ( lineNumber - 1 ) , 
 + ast . getColumnNo ( ) , tabWidth ) ; 
 + } 
 + 
 + / * * 
 + * Checks if the given { @ code DetailAST } node is matching line and column number and 
 + * it is not { @ link TokenTypes # IDENT } . 
 + * @ param ast { @ code DetailAST } ast element 
 + * @ return true if the given { @ code DetailAST } node is matching 
 + * / 
 + private boolean isMatchingByLineAndColumnAndNotIdent ( DetailAST ast ) { 
 + return ast . getType ( ) ! = TokenTypes . IDENT 
 + & & ast . getLineNo ( ) = = lineNumber 
 + & & expandedTabColumn ( ast ) = = columnNumber ; 
 + } 
 + 
 + / * * 
 * To be sure that generated xpath query will return exactly required ast element , the element 
 * should be checked for uniqueness . If ast element has { @ link TokenTypes # IDENT } as the child 
 * or there is no sibling with the same { @ code TokenTypes } then element is supposed to be 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGeneratorTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGeneratorTest . java 
 index c3dda3c . . 7318025 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGeneratorTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / xpath / XpathQueryGeneratorTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 
 import java . io . File ; 
 + import java . nio . charset . StandardCharsets ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . List ; 
 @ @ - 32 , 12 + 33 , 17 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . AbstractPathTestSupport ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . internal . TestUtils ; 
 
 public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 
 + private static final int DEFAULT _ TAB _ WIDTH = 4 ; 
 + 
 private static DetailAST rootAst ; 
 
 + private static FileText fileText ; 
 + 
 @ Override 
 protected String getPackageLocation ( ) { 
 return " com / puppycrawl / tools / checkstyle / xpath / xpathquerygenerator " ; 
 @ @ - 46 , 15 + 52 , 17 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Before 
 public void init ( ) throws Exception { 
 final File file = new File ( getPath ( " InputXpathQueryGenerator . java " ) ) ; 
 + fileText = new FileText ( file , 
 + StandardCharsets . UTF _ 8 . name ( ) ) ; 
 rootAst = TestUtils . parseFile ( file ) ; 
 } 
 
 @ Test 
 public void testClassDef ( ) { 
 final int lineNumber = 12 ; 
 - final int columnNumber = 0 ; 
 + final int columnNumber = 1 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Arrays . asList ( 
 " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] " , 
 @ @ - 66 , 9 + 74 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testMethodDef ( ) { 
 final int lineNumber = 45 ; 
 - final int columnNumber = 4 ; 
 + final int columnNumber = 5 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Arrays . asList ( 
 " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] " 
 @ @ - 83 , 9 + 91 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testVariableDef ( ) { 
 final int lineNumber = 53 ; 
 - final int columnNumber = 12 ; 
 + final int columnNumber = 13 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Arrays . asList ( 
 " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " 
 @ @ - 106 , 9 + 114 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testLcurly ( ) { 
 final int lineNumber = 37 ; 
 - final int columnNumber = 19 ; 
 + final int columnNumber = 20 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Collections . singletonList ( 
 " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK / METHOD _ DEF [ @ text = ' Label ' ] " 
 @ @ - 119 , 9 + 127 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testRcurly ( ) { 
 final int lineNumber = 25 ; 
 - final int columnNumber = 4 ; 
 + final int columnNumber = 5 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Collections . singletonList ( 
 " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK / INSTANCE _ INIT " 
 @ @ - 132 , 9 + 140 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testExpr ( ) { 
 final int lineNumber = 17 ; 
 - final int columnNumber = 49 ; 
 + final int columnNumber = 50 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Arrays . asList ( 
 " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " 
 @ @ - 147 , 9 + 155 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testLparen ( ) { 
 final int lineNumber = 45 ; 
 - final int columnNumber = 30 ; 
 + final int columnNumber = 31 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Collections . singletonList ( 
 " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " 
 @ @ - 162 , 7 + 170 , 7 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 final int lineNumber = 300 ; 
 final int columnNumber = 300 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 assertTrue ( " Result should be empty " , actual . isEmpty ( ) ) ; 
 } 
 @ @ - 170 , 9 + 178 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testPackage ( ) { 
 final int lineNumber = 2 ; 
 - final int columnNumber = 0 ; 
 + final int columnNumber = 1 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Collections . singletonList ( 
 " / PACKAGE _ DEF " ) ; 
 @ @ - 182 , 9 + 190 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testImport ( ) { 
 final int lineNumber = 5 ; 
 - final int columnNumber = 0 ; 
 + final int columnNumber = 1 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Collections . singletonList ( 
 " / IMPORT [ . / DOT [ @ text = ' File ' ] ] " ) ; 
 @ @ - 194 , 9 + 202 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testMethodParams ( ) { 
 final int lineNumber = 72 ; 
 - final int columnNumber = 29 ; 
 + final int columnNumber = 30 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Arrays . asList ( 
 " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " 
 @ @ - 215 , 9 + 223 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testSwitch ( ) { 
 final int lineNumber = 37 ; 
 - final int columnNumber = 8 ; 
 + final int columnNumber = 9 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Collections . singletonList ( 
 " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " 
 @ @ - 228 , 9 + 236 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testSwitchCase ( ) { 
 final int lineNumber = 38 ; 
 - final int columnNumber = 12 ; 
 + final int columnNumber = 13 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Arrays . asList ( 
 " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK / METHOD _ DEF [ @ text = ' Label ' ] " 
 @ @ - 243 , 9 + 251 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testVariableStringLiteral ( ) { 
 final int lineNumber = 47 ; 
 - final int columnNumber = 25 ; 
 + final int columnNumber = 26 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Arrays . asList ( 
 " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " 
 @ @ - 260 , 9 + 268 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testComma ( ) { 
 final int lineNumber = 66 ; 
 - final int columnNumber = 35 ; 
 + final int columnNumber = 36 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Collections . singletonList ( 
 " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK / METHOD _ DEF [ @ text = ' foo ' ] " 
 @ @ - 273 , 9 + 281 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testLiteralVoid ( ) { 
 final int lineNumber = 65 ; 
 - final int columnNumber = 11 ; 
 + final int columnNumber = 12 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Arrays . asList ( 
 " / CLASS _ DEF [ @ text = ' InputXpathQueryGenerator ' ] / OBJBLOCK " 
 @ @ - 288 , 9 + 296 , 9 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testFirstImport ( ) { 
 final int lineNumber = 4 ; 
 - final int columnNumber = 0 ; 
 + final int columnNumber = 1 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Collections . singletonList ( 
 " / IMPORT [ . / DOT [ @ text = ' JToolBar ' ] ] " ) ; 
 @ @ - 300 , 12 + 308 , 90 @ @ public class XpathQueryGeneratorTest extends AbstractPathTestSupport { 
 @ Test 
 public void testLastImport ( ) { 
 final int lineNumber = 8 ; 
 - final int columnNumber = 0 ; 
 + final int columnNumber = 1 ; 
 final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( rootAst , lineNumber , 
 - columnNumber ) ; 
 + columnNumber , fileText , DEFAULT _ TAB _ WIDTH ) ; 
 final List < String > actual = queryGenerator . generate ( ) ; 
 final List < String > expected = Collections . singletonList ( 
 " / IMPORT [ . / DOT [ @ text = ' Iterator ' ] ] " ) ; 
 assertEquals ( " Generated queries do not match expected ones " , expected , actual ) ; 
 } 
 + 
 + @ Test 
 + public void testTabWidthBeforeMethodDef ( ) throws Exception { 
 + final File testFile = new File ( getPath ( " InputXpathQueryGeneratorTabWidth . java " ) ) ; 
 + final FileText testFileText = new FileText ( testFile , 
 + StandardCharsets . UTF _ 8 . name ( ) ) ; 
 + final DetailAST detailAst = TestUtils . parseFile ( testFile ) ; 
 + final int lineNumber = 4 ; 
 + final int columnNumber = 13 ; 
 + final int tabWidth = 4 ; 
 + final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( detailAst , lineNumber , 
 + columnNumber , testFileText , tabWidth ) ; 
 + final List < String > actual = queryGenerator . generate ( ) ; 
 + final List < String > expected = Arrays . asList ( 
 + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' toString ' ] " , 
 + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' toString ' ] / MODIFIERS " , 
 + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' toString ' ] / MODIFIERS / LITERAL _ PUBLIC " ) ; 
 + assertEquals ( " Generated queries do not match expected ones " , expected , actual ) ; 
 + } 
 + 
 + @ Test 
 + public void testTabWidthAfterVoidLiteral ( ) throws Exception { 
 + final File testFile = new File ( getPath ( " InputXpathQueryGeneratorTabWidth . java " ) ) ; 
 + final FileText testFileText = new FileText ( testFile , 
 + StandardCharsets . UTF _ 8 . name ( ) ) ; 
 + final DetailAST detailAst = TestUtils . parseFile ( testFile ) ; 
 + final int lineNumber = 8 ; 
 + final int columnNumber = 41 ; 
 + final int tabWidth = 8 ; 
 + final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( detailAst , lineNumber , 
 + columnNumber , testFileText , tabWidth ) ; 
 + final List < String > actual = queryGenerator . generate ( ) ; 
 + final List < String > expected = Arrays . asList ( 
 + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' getName ' ] / TYPE " , 
 + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' getName ' ] / TYPE / LITERAL _ VOID " ) ; 
 + assertEquals ( " Generated queries do not match expected ones " , expected , actual ) ; 
 + } 
 + 
 + @ Test 
 + public void testTabWidthBeforeSlist ( ) throws Exception { 
 + final File testFile = new File ( getPath ( " InputXpathQueryGeneratorTabWidth . java " ) ) ; 
 + final FileText testFileText = new FileText ( testFile , 
 + StandardCharsets . UTF _ 8 . name ( ) ) ; 
 + final DetailAST detailAst = TestUtils . parseFile ( testFile ) ; 
 + final int lineNumber = 12 ; 
 + final int columnNumber = 57 ; 
 + final int tabWidth = 8 ; 
 + final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( detailAst , lineNumber , 
 + columnNumber , testFileText , tabWidth ) ; 
 + final List < String > actual = queryGenerator . generate ( ) ; 
 + final List < String > expected = Collections . singletonList ( 
 + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' tabAfterMe ' ] / SLIST " ) ; 
 + assertEquals ( " Generated queries do not match expected ones " , expected , actual ) ; 
 + } 
 + 
 + @ Test 
 + public void testTabWidthEndOfLine ( ) throws Exception { 
 + final File testFile = new File ( getPath ( " InputXpathQueryGeneratorTabWidth . java " ) ) ; 
 + final FileText testFileText = new FileText ( testFile , 
 + StandardCharsets . UTF _ 8 . name ( ) ) ; 
 + final DetailAST detailAst = TestUtils . parseFile ( testFile ) ; 
 + final int lineNumber = 16 ; 
 + final int columnNumber = 58 ; 
 + final int tabWidth = 8 ; 
 + final XpathQueryGenerator queryGenerator = new XpathQueryGenerator ( detailAst , lineNumber , 
 + columnNumber , testFileText , tabWidth ) ; 
 + final List < String > actual = queryGenerator . generate ( ) ; 
 + final List < String > expected = Collections . singletonList ( 
 + " / CLASS _ DEF [ @ text = ' InputXpathQueryGeneratorTabWidth ' ] / OBJBLOCK " 
 + + " / VARIABLE _ DEF [ @ text = ' endLineTab ' ] / SEMI " ) ; 
 + assertEquals ( " Generated queries do not match expected ones " , expected , actual ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / xpath / xpathquerygenerator / InputXpathQueryGeneratorTabWidth . java b / src / test / resources / com / puppycrawl / tools / checkstyle / xpath / xpathquerygenerator / InputXpathQueryGeneratorTabWidth . java 
 new file mode 100644 
 index 0000000 . . 03545c1 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / xpath / xpathquerygenerator / InputXpathQueryGeneratorTabWidth . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . puppycrawl . tools . checkstyle . xpath . xpathquerygenerator ; 
 + 
 + public class InputXpathQueryGeneratorTabWidth { 
 + 	 	 	 public String toString ( ) { 
 + 	 	 	 	 return " " ; 
 + 	 	 	 } 
 + 
 + 	 	 	 public 	 	 void getName ( ) { 
 + 
 + 	 	 	 } 
 + 
 + 	 	 	 private int tabAfterMe ( ) 	 { 
 + 	 	 	 	 return 1 ; 
 + 	 	 	 } 
 + 
 + 	 	 	 private String endLineTab = " qwe " ; 
 + 
 + 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java 
 index eb41650 . . b47853d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractModuleTestSupport . java 
 @ @ - 82 , 7 + 82 , 8 @ @ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport 
 
 try { 
 final Class < ? > moduleClass = Class . forName ( moduleConfig . getName ( ) ) ; 
 - if ( ModuleReflectionUtils . isCheckstyleCheck ( moduleClass ) ) { 
 + if ( ModuleReflectionUtils . isCheckstyleCheck ( moduleClass ) 
 + | | ModuleReflectionUtils . isTreeWalkerFilterModule ( moduleClass ) ) { 
 addTreeWalker = true ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 index 4690ad3 . . b4adb4c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 @ @ - 47 , 6 + 47 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . checks . imports . ImportControlCheck ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 + import com . puppycrawl . tools . checkstyle . utils . ModuleReflectionUtils ; 
 
 public class AllChecksTest extends AbstractModuleTestSupport { 
 private static final Locale [ ] ALL _ LOCALES = { 
 @ @ - 236 , 20 + 237 , 24 @ @ public class AllChecksTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 - public void testAllChecksWithDefaultConfiguration ( ) throws Exception { 
 + public void testAllModulesWithDefaultConfiguration ( ) throws Exception { 
 final String inputFilePath = getPath ( " InputAllChecksDefaultConfig . java " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 
 - for ( Class < ? > check : CheckUtil . getCheckstyleChecks ( ) ) { 
 - final DefaultConfiguration checkConfig = createModuleConfig ( check ) ; 
 + for ( Class < ? > module : CheckUtil . getCheckstyleModules ( ) ) { 
 + if ( ModuleReflectionUtils . isRootModule ( module ) ) { 
 + continue ; 
 + } 
 + 
 + final DefaultConfiguration moduleConfig = createModuleConfig ( module ) ; 
 final Checker checker ; 
 - if ( check . equals ( ImportControlCheck . class ) ) { 
 + if ( module . equals ( ImportControlCheck . class ) ) { 
 / / ImportControlCheck must have the import control configuration file to avoid 
 / / violation . 
 - checkConfig . addAttribute ( " file " , getPath ( 
 + moduleConfig . addAttribute ( " file " , getPath ( 
 " InputAllChecksImport - control _ complete . xml " ) ) ; 
 } 
 - checker = createChecker ( checkConfig ) ; 
 + checker = createChecker ( moduleConfig ) ; 
 verify ( checker , inputFilePath , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / internal / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / internal / package - info . java 
 new file mode 100644 
 index 0000000 . . d221a79 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / internal / package - info . java 
 @ @ - 0 , 0 + 1 @ @ 
 + package com . puppycrawl . tools . checkstyle . internal ;
