BLEU SCORE: 0.020980574531482755

TEST MSG: Issue # 6532 : aligned javadoc / xdoc for AvoidNestedBlocks
GENERATED MSG: Added allowInSwitchCase property to AvoidNestedBlocksCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java <nl> index a4a8c2f . . 488d616 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java <nl> @ @ - 25 , 30 + 25 , 35 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> - * Finds nested blocks . <nl> - * <nl> * < p > <nl> - * For example this Check flags confusing code like <nl> + * Finds nested blocks , i . e . blocks that are used freely in the code . <nl> + * < / p > <nl> + * < p > <nl> + * Rationale : Nested blocks are often leftovers from the <nl> + * debugging process , they confuse the reader . <nl> + * < / p > <nl> + * < p > <nl> + * For example this Check finds the obsolete braces in <nl> * < / p > <nl> * < pre > <nl> * public void guessTheOutput ( ) <nl> * { <nl> - * int whichIsWhich = 0 ; <nl> - * { <nl> - * int whichIsWhich = 2 ; <nl> - * } <nl> - * System . out . println ( " value = " + whichIsWhich ) ; <nl> + * int whichIsWhich = 0 ; <nl> + * { <nl> + * int whichIsWhich = 2 ; <nl> + * } <nl> + * System . out . println ( " value = " + whichIsWhich ) ; <nl> * } <nl> * < / pre > <nl> + * < p > <nl> * and debugging / refactoring leftovers such as <nl> - * <nl> + * < / p > <nl> * < pre > <nl> - * / / if ( someOldCondition ) <nl> + * / / if ( conditionThatIsNotUsedAnyLonger ) <nl> * { <nl> - * System . out . println ( " unconditional " ) ; <nl> + * System . out . println ( " unconditional " ) ; <nl> * } <nl> * < / pre > <nl> - * <nl> * < p > <nl> * A case in a switch statement does not implicitly form a block . <nl> * Thus to be able to introduce local variables that have case scope <nl> @ @ - 56 , 33 + 61 , 46 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * the allowInSwitchCase property to true and include all statements <nl> * of the case in the block . <nl> * < / p > <nl> - * <nl> * < pre > <nl> * switch ( a ) <nl> * { <nl> - * case 0 : <nl> - * / / Never OK , break outside block <nl> - * { <nl> - * x = 1 ; <nl> - * } <nl> - * break ; <nl> - * case 1 : <nl> - * / / Never OK , statement outside block <nl> - * System . out . println ( " Hello " ) ; <nl> - * { <nl> - * x = 2 ; <nl> - * break ; <nl> - * } <nl> - * case 1 : <nl> - * / / OK if allowInSwitchCase is true <nl> - * { <nl> - * System . out . println ( " Hello " ) ; <nl> - * x = 2 ; <nl> - * break ; <nl> - * } <nl> + * case 0 : <nl> + * / / Never OK , break outside block <nl> + * { <nl> + * x = 1 ; <nl> + * } <nl> + * break ; <nl> + * case 1 : <nl> + * / / Never OK , statement outside block <nl> + * System . out . println ( " Hello " ) ; <nl> + * { <nl> + * x = 2 ; <nl> + * break ; <nl> + * } <nl> + * case 2 : <nl> + * / / OK if allowInSwitchCase is true <nl> + * { <nl> + * System . out . println ( " Hello " ) ; <nl> + * x = 3 ; <nl> + * break ; <nl> + * } <nl> * } <nl> * < / pre > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code allowInSwitchCase } - Allow nested blocks if they are the <nl> + * only child of a switch case . <nl> + * Default value is { @ code false } . <nl> + * < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * To configure the check : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = " AvoidNestedBlocks " / & gt ; <nl> + * < / pre > <nl> * <nl> + * @ since 3 . 1 <nl> * / <nl> @ StatelessCheck <nl> public class AvoidNestedBlocksCheck extends AbstractCheck { <nl> @ @ - 94 , 8 + 112 , 7 @ @ public class AvoidNestedBlocksCheck extends AbstractCheck { <nl> public static final String MSG _ KEY _ BLOCK _ NESTED = " block . nested " ; <nl> <nl> / * * <nl> - * Whether nested blocks are allowed if they are the <nl> - * only child of a switch case . <nl> + * Allow nested blocks if they are the only child of a switch case . <nl> * / <nl> private boolean allowInSwitchCase ; <nl> <nl> @ @ - 125 , 7 + 142 , 7 @ @ public class AvoidNestedBlocksCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Setter for allowInSwitchCase property . <nl> + * Setter to allow nested blocks if they are the only child of a switch case . <nl> * @ param allowInSwitchCase whether nested blocks are allowed <nl> * if they are the only child of a switch case . <nl> * / <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index f51123a . . b434a89 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 74 , 6 + 74 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " AnnotationOnSameLine " , <nl> " AnnotationUseStyle " , <nl> " AtclauseOrder " , <nl> + " AvoidNestedBlocks " , <nl> " CatchParameterName " , <nl> " ClassMemberImpliedModifier " , <nl> " ClassTypeParameterName " , <nl> diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml <nl> index 02f26c4 . . b92b953 100644 <nl> - - - a / src / xdocs / config _ blocks . xml <nl> + + + b / src / xdocs / config _ blocks . xml <nl> @ @ - 23 , 8 + 23 , 8 @ @ <nl> < / section > <nl> <nl> < section name = " AvoidNestedBlocks " > <nl> + < p > Since Checkstyle 3 . 1 < / p > <nl> < subsection name = " Description " id = " AvoidNestedBlocks _ Description " > <nl> - < p > Since Checkstyle 3 . 1 < / p > <nl> < p > <nl> Finds nested blocks , i . e . blocks that are used freely in the code . <nl> < / p > <nl> @ @ - 42 , 7 + 42 , 7 @ @ public void guessTheOutput ( ) <nl> { <nl> int whichIsWhich = 0 ; <nl> { <nl> - int whichIsWhich = 2 ; <nl> + int whichIsWhich = 2 ; <nl> } <nl> System . out . println ( " value = " + whichIsWhich ) ; <nl> } <nl> @ @ - 79 , 11 + 79 , 11 @ @ switch ( a ) <nl> x = 2 ; <nl> break ; <nl> } <nl> - case 1 : <nl> + case 2 : <nl> / / OK if allowInSwitchCase is true <nl> { <nl> System . out . println ( " Hello " ) ; <nl> - x = 2 ; <nl> + x = 3 ; <nl> break ; <nl> } <nl> } <nl> @ @ - 101 , 7 + 101 , 7 @ @ switch ( a ) <nl> < / tr > <nl> < tr > <nl> < td > allowInSwitchCase < / td > <nl> - < td > Allow nested blocks in case statements < / td > <nl> + < td > Allow nested blocks if they are the only child of a switch case . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > < code > false < / code > < / td > <nl> < td > 3 . 2 < / td >
NEAREST DIFF (one line): diff - - git a / docs / config . html b / docs / config . html <nl> index e58276a . . 7b143f3 100644 <nl> - - - a / docs / config . html <nl> + + + b / docs / config . html <nl> @ @ - 425 , 7 + 425 , 7 @ @ <nl> a check is < span class = " default " > error < / span > . <nl> < / p > <nl> < p class = " body " > <nl> - You can use the security property to control the output of the plain formatter for the < a href = " cmdline . html " > command <nl> + You can use the severity property to control the output of the plain formatter for the < a href = " cmdline . html " > command <nl> line tool < / a > and the < a href = " anttask . html " > ANT task < / a > . The plain formatter does not report violations with severity level <nl> < span class = " default " > ignore < / span > , and notes violations with severity level <nl> < span class = " default " > warning < / span > . For example , according to the following configuration fragment ,

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java 
 index a4a8c2f . . 488d616 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java 
 @ @ - 25 , 30 + 25 , 35 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 - * Finds nested blocks . 
 - * 
 * < p > 
 - * For example this Check flags confusing code like 
 + * Finds nested blocks , i . e . blocks that are used freely in the code . 
 + * < / p > 
 + * < p > 
 + * Rationale : Nested blocks are often leftovers from the 
 + * debugging process , they confuse the reader . 
 + * < / p > 
 + * < p > 
 + * For example this Check finds the obsolete braces in 
 * < / p > 
 * < pre > 
 * public void guessTheOutput ( ) 
 * { 
 - * int whichIsWhich = 0 ; 
 - * { 
 - * int whichIsWhich = 2 ; 
 - * } 
 - * System . out . println ( " value = " + whichIsWhich ) ; 
 + * int whichIsWhich = 0 ; 
 + * { 
 + * int whichIsWhich = 2 ; 
 + * } 
 + * System . out . println ( " value = " + whichIsWhich ) ; 
 * } 
 * < / pre > 
 + * < p > 
 * and debugging / refactoring leftovers such as 
 - * 
 + * < / p > 
 * < pre > 
 - * / / if ( someOldCondition ) 
 + * / / if ( conditionThatIsNotUsedAnyLonger ) 
 * { 
 - * System . out . println ( " unconditional " ) ; 
 + * System . out . println ( " unconditional " ) ; 
 * } 
 * < / pre > 
 - * 
 * < p > 
 * A case in a switch statement does not implicitly form a block . 
 * Thus to be able to introduce local variables that have case scope 
 @ @ - 56 , 33 + 61 , 46 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * the allowInSwitchCase property to true and include all statements 
 * of the case in the block . 
 * < / p > 
 - * 
 * < pre > 
 * switch ( a ) 
 * { 
 - * case 0 : 
 - * / / Never OK , break outside block 
 - * { 
 - * x = 1 ; 
 - * } 
 - * break ; 
 - * case 1 : 
 - * / / Never OK , statement outside block 
 - * System . out . println ( " Hello " ) ; 
 - * { 
 - * x = 2 ; 
 - * break ; 
 - * } 
 - * case 1 : 
 - * / / OK if allowInSwitchCase is true 
 - * { 
 - * System . out . println ( " Hello " ) ; 
 - * x = 2 ; 
 - * break ; 
 - * } 
 + * case 0 : 
 + * / / Never OK , break outside block 
 + * { 
 + * x = 1 ; 
 + * } 
 + * break ; 
 + * case 1 : 
 + * / / Never OK , statement outside block 
 + * System . out . println ( " Hello " ) ; 
 + * { 
 + * x = 2 ; 
 + * break ; 
 + * } 
 + * case 2 : 
 + * / / OK if allowInSwitchCase is true 
 + * { 
 + * System . out . println ( " Hello " ) ; 
 + * x = 3 ; 
 + * break ; 
 + * } 
 * } 
 * < / pre > 
 + * < ul > 
 + * < li > 
 + * Property { @ code allowInSwitchCase } - Allow nested blocks if they are the 
 + * only child of a switch case . 
 + * Default value is { @ code false } . 
 + * < / li > 
 + * < / ul > 
 + * < p > 
 + * To configure the check : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = " AvoidNestedBlocks " / & gt ; 
 + * < / pre > 
 * 
 + * @ since 3 . 1 
 * / 
 @ StatelessCheck 
 public class AvoidNestedBlocksCheck extends AbstractCheck { 
 @ @ - 94 , 8 + 112 , 7 @ @ public class AvoidNestedBlocksCheck extends AbstractCheck { 
 public static final String MSG _ KEY _ BLOCK _ NESTED = " block . nested " ; 
 
 / * * 
 - * Whether nested blocks are allowed if they are the 
 - * only child of a switch case . 
 + * Allow nested blocks if they are the only child of a switch case . 
 * / 
 private boolean allowInSwitchCase ; 
 
 @ @ - 125 , 7 + 142 , 7 @ @ public class AvoidNestedBlocksCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Setter for allowInSwitchCase property . 
 + * Setter to allow nested blocks if they are the only child of a switch case . 
 * @ param allowInSwitchCase whether nested blocks are allowed 
 * if they are the only child of a switch case . 
 * / 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index f51123a . . b434a89 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 74 , 6 + 74 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " AnnotationOnSameLine " , 
 " AnnotationUseStyle " , 
 " AtclauseOrder " , 
 + " AvoidNestedBlocks " , 
 " CatchParameterName " , 
 " ClassMemberImpliedModifier " , 
 " ClassTypeParameterName " , 
 diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml 
 index 02f26c4 . . b92b953 100644 
 - - - a / src / xdocs / config _ blocks . xml 
 + + + b / src / xdocs / config _ blocks . xml 
 @ @ - 23 , 8 + 23 , 8 @ @ 
 < / section > 
 
 < section name = " AvoidNestedBlocks " > 
 + < p > Since Checkstyle 3 . 1 < / p > 
 < subsection name = " Description " id = " AvoidNestedBlocks _ Description " > 
 - < p > Since Checkstyle 3 . 1 < / p > 
 < p > 
 Finds nested blocks , i . e . blocks that are used freely in the code . 
 < / p > 
 @ @ - 42 , 7 + 42 , 7 @ @ public void guessTheOutput ( ) 
 { 
 int whichIsWhich = 0 ; 
 { 
 - int whichIsWhich = 2 ; 
 + int whichIsWhich = 2 ; 
 } 
 System . out . println ( " value = " + whichIsWhich ) ; 
 } 
 @ @ - 79 , 11 + 79 , 11 @ @ switch ( a ) 
 x = 2 ; 
 break ; 
 } 
 - case 1 : 
 + case 2 : 
 / / OK if allowInSwitchCase is true 
 { 
 System . out . println ( " Hello " ) ; 
 - x = 2 ; 
 + x = 3 ; 
 break ; 
 } 
 } 
 @ @ - 101 , 7 + 101 , 7 @ @ switch ( a ) 
 < / tr > 
 < tr > 
 < td > allowInSwitchCase < / td > 
 - < td > Allow nested blocks in case statements < / td > 
 + < td > Allow nested blocks if they are the only child of a switch case . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > < code > false < / code > < / td > 
 < td > 3 . 2 < / td >

NEAREST DIFF:
diff - - git a / docs / config . html b / docs / config . html 
 index e58276a . . 7b143f3 100644 
 - - - a / docs / config . html 
 + + + b / docs / config . html 
 @ @ - 425 , 7 + 425 , 7 @ @ 
 a check is < span class = " default " > error < / span > . 
 < / p > 
 < p class = " body " > 
 - You can use the security property to control the output of the plain formatter for the < a href = " cmdline . html " > command 
 + You can use the severity property to control the output of the plain formatter for the < a href = " cmdline . html " > command 
 line tool < / a > and the < a href = " anttask . html " > ANT task < / a > . The plain formatter does not report violations with severity level 
 < span class = " default " > ignore < / span > , and notes violations with severity level 
 < span class = " default " > warning < / span > . For example , according to the following configuration fragment ,
