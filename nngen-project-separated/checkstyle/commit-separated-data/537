BLEU SCORE: 0.059118530529348866

TEST MSG: Issue # 4425 : fixed multidimensional array types
GENERATED MSG: Magic Number annotation detection enhanced for arbitary parent nodes , Issue # 926

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java <nl> index 05de49d . . b122291 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java <nl> @ @ - 76 , 18 + 76 , 15 @ @ public final class CheckUtils { <nl> * @ param typeAST a type node . <nl> * @ return { @ code FullIdent } for given type . <nl> * / <nl> - public static FullIdent createFullType ( DetailAST typeAST ) { <nl> - final DetailAST arrayDeclaratorAST = <nl> - typeAST . findFirstToken ( TokenTypes . ARRAY _ DECLARATOR ) ; <nl> - final FullIdent fullType ; <nl> + public static FullIdent createFullType ( final DetailAST typeAST ) { <nl> + DetailAST ast = typeAST ; <nl> <nl> - if ( arrayDeclaratorAST = = null ) { <nl> - fullType = createFullTypeNoArrays ( typeAST ) ; <nl> + / / ignore array part of type <nl> + while ( ast . findFirstToken ( TokenTypes . ARRAY _ DECLARATOR ) ! = null ) { <nl> + ast = ast . findFirstToken ( TokenTypes . ARRAY _ DECLARATOR ) ; <nl> } <nl> - else { <nl> - fullType = createFullTypeNoArrays ( arrayDeclaratorAST ) ; <nl> - } <nl> - return fullType ; <nl> + <nl> + return FullIdent . createFullIdent ( ast . getFirstChild ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 152 , 15 + 149 , 6 @ @ public final class CheckUtils { <nl> } <nl> <nl> / * * <nl> - * Returns FullIndent for given type . <nl> - * @ param typeAST a type node ( no array ) <nl> - * @ return { @ code FullIdent } for given type . <nl> - * / <nl> - private static FullIdent createFullTypeNoArrays ( DetailAST typeAST ) { <nl> - return FullIdent . createFullIdent ( typeAST . getFirstChild ( ) ) ; <nl> - } <nl> - <nl> - / * * <nl> * Returns the value represented by the specified string of the specified <nl> * type . Returns 0 for types other than float , double , int , and long . <nl> * @ param text the string to be parsed . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> index 4c0302b . . ba35878 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> @ @ - 135 , 7 + 135 , 7 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { <nl> @ Test <nl> public void testSameFileNameGeneral ( ) throws Exception { <nl> checkConfig . addAttribute ( " illegalClassNames " , <nl> - " List , InputIllegalTypeGregorianCalendar , java . io . File , ArrayList " ) ; <nl> + " List , InputIllegalTypeGregorianCalendar , java . io . File , ArrayList , Boolean " ) ; <nl> final String [ ] expected = { <nl> " 10 : 5 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , <nl> " 16 : 23 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , <nl> @ @ - 143 , 6 + 143 , 9 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { <nl> " 25 : 9 : " + getCheckMessage ( MSG _ KEY , " java . io . File " ) , <nl> " 27 : 5 : " + getCheckMessage ( MSG _ KEY , " java . util . List " ) , <nl> " 28 : 13 : " + getCheckMessage ( MSG _ KEY , " ArrayList " ) , <nl> + " 29 : 13 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 30 : 13 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> + " 31 : 13 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputIllegalTypeSameFileName . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java <nl> index b39ece6 . . 8735f53 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java <nl> @ @ - 26 , 4 + 26 , 7 @ @ public class InputIllegalTypeSameFileName <nl> } <nl> java . util . List < Integer > list = new ArrayList < > ( ) ; / / WARNING <nl> private ArrayList < String > values ; <nl> + private Boolean d ; / / WARNING <nl> + private Boolean [ ] d1 ; / / WARNING <nl> + private Boolean [ ] [ ] d2 ; / / WARNING <nl> } <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index e982531 . . 554b8ae 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 2010 , 7 + 2010 , 7 @ @ class SomeClass <nl> < p > Since Checkstyle 3 . 2 < / p > <nl> < p > <nl> Checks that particular classes are never used as types in variable <nl> - declarations , return values or parameters . <nl> + declarations , one - dimensional and multi - dimensional arrays , return values or parameters . <nl> < / p > <nl> <nl> < p >
NEAREST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 5a65a40 . . 83615f1 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 163 , 7 + 163 , 6 @ @ <nl> < rule ref = " rulesets / java / naming . xml " > <nl> < exclude name = " AbstractNaming " / > <nl> < exclude name = " AvoidFieldNameMatchingMethodName " / > <nl> - < exclude name = " AvoidFieldNameMatchingTypeName " / > <nl> < exclude name = " BooleanGetMethodName " / > <nl> < exclude name = " LongVariable " / > <nl> < exclude name = " ShortClassName " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> index 708fa33 . . 5da02bb 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java <nl> @ @ - 112 , 7 + 112 , 7 @ @ public class DeclarationOrderCheck extends Check <nl> private static class ScopeState <nl> { <nl> / * * The state the check is in * / <nl> - private int scopeState = STATE _ STATIC _ VARIABLE _ DEF ; <nl> + private int currentScopeState = STATE _ STATIC _ VARIABLE _ DEF ; <nl> <nl> / * * The sub - state the check is in * / <nl> private Scope declarationAccess = Scope . PUBLIC ; <nl> @ @ - 164 , 13 + 164 , 13 @ @ public class DeclarationOrderCheck extends Check <nl> } <nl> <nl> state = scopeStates . peek ( ) ; <nl> - if ( state . scopeState > STATE _ CTOR _ DEF ) { <nl> + if ( state . currentScopeState > STATE _ CTOR _ DEF ) { <nl> if ( ! ignoreConstructors ) { <nl> log ( ast , MSG _ CONSTRUCTOR ) ; <nl> } <nl> } <nl> else { <nl> - state . scopeState = STATE _ CTOR _ DEF ; <nl> + state . currentScopeState = STATE _ CTOR _ DEF ; <nl> } <nl> break ; <nl> <nl> @ @ - 180 , 13 + 180 , 13 @ @ public class DeclarationOrderCheck extends Check <nl> return ; <nl> } <nl> <nl> - if ( state . scopeState > STATE _ METHOD _ DEF ) { <nl> + if ( state . currentScopeState > STATE _ METHOD _ DEF ) { <nl> if ( ! ignoreMethods ) { <nl> log ( ast , MSG _ METHOD ) ; <nl> } <nl> } <nl> else { <nl> - state . scopeState = STATE _ METHOD _ DEF ; <nl> + state . currentScopeState = STATE _ METHOD _ DEF ; <nl> } <nl> break ; <nl> <nl> @ @ - 200 , 24 + 200 , 24 @ @ public class DeclarationOrderCheck extends Check <nl> <nl> state = scopeStates . peek ( ) ; <nl> if ( ast . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ) { <nl> - if ( state . scopeState > STATE _ STATIC _ VARIABLE _ DEF ) { <nl> + if ( state . currentScopeState > STATE _ STATIC _ VARIABLE _ DEF ) { <nl> if ( ! ignoreModifiers <nl> - | | state . scopeState > STATE _ INSTANCE _ VARIABLE _ DEF ) <nl> + | | state . currentScopeState > STATE _ INSTANCE _ VARIABLE _ DEF ) <nl> { <nl> log ( ast , MSG _ STATIC ) ; <nl> } <nl> } <nl> else { <nl> - state . scopeState = STATE _ STATIC _ VARIABLE _ DEF ; <nl> + state . currentScopeState = STATE _ STATIC _ VARIABLE _ DEF ; <nl> } <nl> } <nl> else { <nl> - if ( state . scopeState > STATE _ INSTANCE _ VARIABLE _ DEF ) { <nl> + if ( state . currentScopeState > STATE _ INSTANCE _ VARIABLE _ DEF ) { <nl> log ( ast , MSG _ INSTANCE ) ; <nl> } <nl> - else if ( state . scopeState = = STATE _ STATIC _ VARIABLE _ DEF ) { <nl> + else if ( state . currentScopeState = = STATE _ STATIC _ VARIABLE _ DEF ) { <nl> state . declarationAccess = Scope . PUBLIC ; <nl> - state . scopeState = STATE _ INSTANCE _ VARIABLE _ DEF ; <nl> + state . currentScopeState = STATE _ INSTANCE _ VARIABLE _ DEF ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java 
 index 05de49d . . b122291 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java 
 @ @ - 76 , 18 + 76 , 15 @ @ public final class CheckUtils { 
 * @ param typeAST a type node . 
 * @ return { @ code FullIdent } for given type . 
 * / 
 - public static FullIdent createFullType ( DetailAST typeAST ) { 
 - final DetailAST arrayDeclaratorAST = 
 - typeAST . findFirstToken ( TokenTypes . ARRAY _ DECLARATOR ) ; 
 - final FullIdent fullType ; 
 + public static FullIdent createFullType ( final DetailAST typeAST ) { 
 + DetailAST ast = typeAST ; 
 
 - if ( arrayDeclaratorAST = = null ) { 
 - fullType = createFullTypeNoArrays ( typeAST ) ; 
 + / / ignore array part of type 
 + while ( ast . findFirstToken ( TokenTypes . ARRAY _ DECLARATOR ) ! = null ) { 
 + ast = ast . findFirstToken ( TokenTypes . ARRAY _ DECLARATOR ) ; 
 } 
 - else { 
 - fullType = createFullTypeNoArrays ( arrayDeclaratorAST ) ; 
 - } 
 - return fullType ; 
 + 
 + return FullIdent . createFullIdent ( ast . getFirstChild ( ) ) ; 
 } 
 
 / * * 
 @ @ - 152 , 15 + 149 , 6 @ @ public final class CheckUtils { 
 } 
 
 / * * 
 - * Returns FullIndent for given type . 
 - * @ param typeAST a type node ( no array ) 
 - * @ return { @ code FullIdent } for given type . 
 - * / 
 - private static FullIdent createFullTypeNoArrays ( DetailAST typeAST ) { 
 - return FullIdent . createFullIdent ( typeAST . getFirstChild ( ) ) ; 
 - } 
 - 
 - / * * 
 * Returns the value represented by the specified string of the specified 
 * type . Returns 0 for types other than float , double , int , and long . 
 * @ param text the string to be parsed . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 index 4c0302b . . ba35878 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 @ @ - 135 , 7 + 135 , 7 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { 
 @ Test 
 public void testSameFileNameGeneral ( ) throws Exception { 
 checkConfig . addAttribute ( " illegalClassNames " , 
 - " List , InputIllegalTypeGregorianCalendar , java . io . File , ArrayList " ) ; 
 + " List , InputIllegalTypeGregorianCalendar , java . io . File , ArrayList , Boolean " ) ; 
 final String [ ] expected = { 
 " 10 : 5 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , 
 " 16 : 23 : " + getCheckMessage ( MSG _ KEY , " InputIllegalTypeGregorianCalendar " ) , 
 @ @ - 143 , 6 + 143 , 9 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { 
 " 25 : 9 : " + getCheckMessage ( MSG _ KEY , " java . io . File " ) , 
 " 27 : 5 : " + getCheckMessage ( MSG _ KEY , " java . util . List " ) , 
 " 28 : 13 : " + getCheckMessage ( MSG _ KEY , " ArrayList " ) , 
 + " 29 : 13 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 30 : 13 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 + " 31 : 13 : " + getCheckMessage ( MSG _ KEY , " Boolean " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputIllegalTypeSameFileName . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java 
 index b39ece6 . . 8735f53 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeSameFileName . java 
 @ @ - 26 , 4 + 26 , 7 @ @ public class InputIllegalTypeSameFileName 
 } 
 java . util . List < Integer > list = new ArrayList < > ( ) ; / / WARNING 
 private ArrayList < String > values ; 
 + private Boolean d ; / / WARNING 
 + private Boolean [ ] d1 ; / / WARNING 
 + private Boolean [ ] [ ] d2 ; / / WARNING 
 } 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index e982531 . . 554b8ae 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 2010 , 7 + 2010 , 7 @ @ class SomeClass 
 < p > Since Checkstyle 3 . 2 < / p > 
 < p > 
 Checks that particular classes are never used as types in variable 
 - declarations , return values or parameters . 
 + declarations , one - dimensional and multi - dimensional arrays , return values or parameters . 
 < / p > 
 
 < p >

NEAREST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 5a65a40 . . 83615f1 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 163 , 7 + 163 , 6 @ @ 
 < rule ref = " rulesets / java / naming . xml " > 
 < exclude name = " AbstractNaming " / > 
 < exclude name = " AvoidFieldNameMatchingMethodName " / > 
 - < exclude name = " AvoidFieldNameMatchingTypeName " / > 
 < exclude name = " BooleanGetMethodName " / > 
 < exclude name = " LongVariable " / > 
 < exclude name = " ShortClassName " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 index 708fa33 . . 5da02bb 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheck . java 
 @ @ - 112 , 7 + 112 , 7 @ @ public class DeclarationOrderCheck extends Check 
 private static class ScopeState 
 { 
 / * * The state the check is in * / 
 - private int scopeState = STATE _ STATIC _ VARIABLE _ DEF ; 
 + private int currentScopeState = STATE _ STATIC _ VARIABLE _ DEF ; 
 
 / * * The sub - state the check is in * / 
 private Scope declarationAccess = Scope . PUBLIC ; 
 @ @ - 164 , 13 + 164 , 13 @ @ public class DeclarationOrderCheck extends Check 
 } 
 
 state = scopeStates . peek ( ) ; 
 - if ( state . scopeState > STATE _ CTOR _ DEF ) { 
 + if ( state . currentScopeState > STATE _ CTOR _ DEF ) { 
 if ( ! ignoreConstructors ) { 
 log ( ast , MSG _ CONSTRUCTOR ) ; 
 } 
 } 
 else { 
 - state . scopeState = STATE _ CTOR _ DEF ; 
 + state . currentScopeState = STATE _ CTOR _ DEF ; 
 } 
 break ; 
 
 @ @ - 180 , 13 + 180 , 13 @ @ public class DeclarationOrderCheck extends Check 
 return ; 
 } 
 
 - if ( state . scopeState > STATE _ METHOD _ DEF ) { 
 + if ( state . currentScopeState > STATE _ METHOD _ DEF ) { 
 if ( ! ignoreMethods ) { 
 log ( ast , MSG _ METHOD ) ; 
 } 
 } 
 else { 
 - state . scopeState = STATE _ METHOD _ DEF ; 
 + state . currentScopeState = STATE _ METHOD _ DEF ; 
 } 
 break ; 
 
 @ @ - 200 , 24 + 200 , 24 @ @ public class DeclarationOrderCheck extends Check 
 
 state = scopeStates . peek ( ) ; 
 if ( ast . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ! = null ) { 
 - if ( state . scopeState > STATE _ STATIC _ VARIABLE _ DEF ) { 
 + if ( state . currentScopeState > STATE _ STATIC _ VARIABLE _ DEF ) { 
 if ( ! ignoreModifiers 
 - | | state . scopeState > STATE _ INSTANCE _ VARIABLE _ DEF ) 
 + | | state . currentScopeState > STATE _ INSTANCE _ VARIABLE _ DEF ) 
 { 
 log ( ast , MSG _ STATIC ) ; 
 } 
 } 
 else { 
 - state . scopeState = STATE _ STATIC _ VARIABLE _ DEF ; 
 + state . currentScopeState = STATE _ STATIC _ VARIABLE _ DEF ; 
 } 
 } 
 else { 
 - if ( state . scopeState > STATE _ INSTANCE _ VARIABLE _ DEF ) { 
 + if ( state . currentScopeState > STATE _ INSTANCE _ VARIABLE _ DEF ) { 
 log ( ast , MSG _ INSTANCE ) ; 
 } 
 - else if ( state . scopeState = = STATE _ STATIC _ VARIABLE _ DEF ) { 
 + else if ( state . currentScopeState = = STATE _ STATIC _ VARIABLE _ DEF ) { 
 state . declarationAccess = Scope . PUBLIC ; 
 - state . scopeState = STATE _ INSTANCE _ VARIABLE _ DEF ; 
 + state . currentScopeState = STATE _ INSTANCE _ VARIABLE _ DEF ; 
 } 
 } 

