BLEU SCORE: 0.12600736402830257

TEST MSG: doc : Fix incorrect documentation for SuppressWithNearbyCommentFilter
GENERATED MSG: doc : Add example for ParameterName into xdoc

TEST DIFF (one line): diff - - git a / src / xdocs / config _ filters . xml b / src / xdocs / config _ filters . xml <nl> index ae65ce4 . . 2405135 100644 <nl> - - - a / src / xdocs / config _ filters . xml <nl> + + + b / src / xdocs / config _ filters . xml <nl> @ @ - 901 , 13 + 901 , 13 @ @ private int D2 ; <nl> < / p > <nl> < source > <nl> & lt ; module name = " SuppressWithNearbyCommentFilter & quot ; & gt ; <nl> - & lt ; property name = " commentFormat " value = " @ cs . suppress \ [ ( \ w ( \ | \ w ) * ) \ ] \ w [ - \ . ' ` , : ; \ w ] { 14 , } " / & gt ; <nl> + & lt ; property name = " commentFormat " value = " @ cs \ . suppress \ [ ( \ w + ( \ | \ w + ) * ) \ ] \ w [ - \ . ' ` , : ; \ w ] { 14 , } " / & gt ; <nl> & lt ; property name = " checkFormat " value = " $ 1 " / & gt ; <nl> & lt ; property name = " influenceFormat " value = " 1 " / & gt ; <nl> & lt ; / module > <nl> < / source > <nl> < source > <nl> - public static final int [ ] array ; / / @ cs . suppress ConstantName | NoWhitespaceAfter <nl> + public static final int [ ] array ; / / @ cs . suppress [ ConstantName | NoWhitespaceAfter ] A comment here <nl> < / source > <nl> < p > <nl> It is possible to specify an ID of checks , so that it can be leveraged by the
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java <nl> index 44ff7b0 . . b2e0d5a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java <nl> @ @ - 19 , 12 + 19 , 15 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> <nl> + import java . util . Locale ; <nl> + <nl> + import org . apache . commons . beanutils . ConversionException ; <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . apache . commons . lang3 . StringUtils ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - import com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> @ @ - 90 , 7 + 93 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * @ author Rick Giles <nl> * / <nl> public class OperatorWrapCheck <nl> - extends AbstractOptionCheck < WrapOption > { <nl> + extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 104 , 11 + 107 , 21 @ @ public class OperatorWrapCheck <nl> * / <nl> public static final String LINE _ PREVIOUS = " line . previous " ; <nl> <nl> + / * * The policy to enforce . * / <nl> + private WrapOption option = WrapOption . NL ; <nl> + <nl> / * * <nl> - * Sets the operator wrap option to new line . <nl> + * Set the option to enforce . <nl> + * @ param optionStr string to decode option from <nl> + * @ throws ConversionException if unable to decode <nl> * / <nl> - public OperatorWrapCheck ( ) { <nl> - super ( WrapOption . NL , WrapOption . class ) ; <nl> + public void setOption ( String optionStr ) { <nl> + try { <nl> + option = WrapOption . valueOf ( optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; <nl> + } <nl> + catch ( IllegalArgumentException iae ) { <nl> + throw new ConversionException ( " unable to parse " + optionStr , iae ) ; <nl> + } <nl> } <nl> <nl> @ Override <nl> @ @ - 197 , 7 + 210 , 6 @ @ public class OperatorWrapCheck <nl> return ; <nl> } <nl> } <nl> - final WrapOption wOp = getAbstractOption ( ) ; <nl> <nl> final String text = ast . getText ( ) ; <nl> final int colNo = ast . getColumnNo ( ) ; <nl> @ @ - 207 , 12 + 219 , 12 @ @ public class OperatorWrapCheck <nl> / / Check if rest of line is whitespace , and not just the operator <nl> / / by itself . This last bit is to handle the operator on a line by <nl> / / itself . <nl> - if ( wOp = = WrapOption . NL <nl> + if ( option = = WrapOption . NL <nl> & & ! text . equals ( currentLine . trim ( ) ) <nl> & & StringUtils . isBlank ( currentLine . substring ( colNo + text . length ( ) ) ) ) { <nl> log ( lineNo , colNo , LINE _ NEW , text ) ; <nl> } <nl> - else if ( wOp = = WrapOption . EOL <nl> + else if ( option = = WrapOption . EOL <nl> & & CommonUtils . hasWhitespaceBefore ( colNo - 1 , currentLine ) ) { <nl> log ( lineNo , colNo , LINE _ PREVIOUS , text ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java <nl> index c809293 . . 295ff1f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java <nl> @ @ - 25 , 11 + 25 , 13 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . OperatorWrapChec <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> + import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> <nl> public class OperatorWrapCheckTest <nl> extends BaseCheckTestSupport { <nl> @ @ - 81 , 4 + 83 , 12 @ @ public class OperatorWrapCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputOpWrap . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test ( expected = CheckstyleException . class ) <nl> + public void testInvalidOption ( ) throws Exception { <nl> + checkConfig . addAttribute ( " option " , " invalid _ option " ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputOpWrap . java " ) , expected ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / xdocs / config _ filters . xml b / src / xdocs / config _ filters . xml 
 index ae65ce4 . . 2405135 100644 
 - - - a / src / xdocs / config _ filters . xml 
 + + + b / src / xdocs / config _ filters . xml 
 @ @ - 901 , 13 + 901 , 13 @ @ private int D2 ; 
 < / p > 
 < source > 
 & lt ; module name = " SuppressWithNearbyCommentFilter & quot ; & gt ; 
 - & lt ; property name = " commentFormat " value = " @ cs . suppress \ [ ( \ w ( \ | \ w ) * ) \ ] \ w [ - \ . ' ` , : ; \ w ] { 14 , } " / & gt ; 
 + & lt ; property name = " commentFormat " value = " @ cs \ . suppress \ [ ( \ w + ( \ | \ w + ) * ) \ ] \ w [ - \ . ' ` , : ; \ w ] { 14 , } " / & gt ; 
 & lt ; property name = " checkFormat " value = " $ 1 " / & gt ; 
 & lt ; property name = " influenceFormat " value = " 1 " / & gt ; 
 & lt ; / module > 
 < / source > 
 < source > 
 - public static final int [ ] array ; / / @ cs . suppress ConstantName | NoWhitespaceAfter 
 + public static final int [ ] array ; / / @ cs . suppress [ ConstantName | NoWhitespaceAfter ] A comment here 
 < / source > 
 < p > 
 It is possible to specify an ID of checks , so that it can be leveraged by the

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java 
 index 44ff7b0 . . b2e0d5a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheck . java 
 @ @ - 19 , 12 + 19 , 15 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 
 + import java . util . Locale ; 
 + 
 + import org . apache . commons . beanutils . ConversionException ; 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . apache . commons . lang3 . StringUtils ; 
 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - import com . puppycrawl . tools . checkstyle . checks . AbstractOptionCheck ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 @ @ - 90 , 7 + 93 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * @ author Rick Giles 
 * / 
 public class OperatorWrapCheck 
 - extends AbstractOptionCheck < WrapOption > { 
 + extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 104 , 11 + 107 , 21 @ @ public class OperatorWrapCheck 
 * / 
 public static final String LINE _ PREVIOUS = " line . previous " ; 
 
 + / * * The policy to enforce . * / 
 + private WrapOption option = WrapOption . NL ; 
 + 
 / * * 
 - * Sets the operator wrap option to new line . 
 + * Set the option to enforce . 
 + * @ param optionStr string to decode option from 
 + * @ throws ConversionException if unable to decode 
 * / 
 - public OperatorWrapCheck ( ) { 
 - super ( WrapOption . NL , WrapOption . class ) ; 
 + public void setOption ( String optionStr ) { 
 + try { 
 + option = WrapOption . valueOf ( optionStr . trim ( ) . toUpperCase ( Locale . ENGLISH ) ) ; 
 + } 
 + catch ( IllegalArgumentException iae ) { 
 + throw new ConversionException ( " unable to parse " + optionStr , iae ) ; 
 + } 
 } 
 
 @ Override 
 @ @ - 197 , 7 + 210 , 6 @ @ public class OperatorWrapCheck 
 return ; 
 } 
 } 
 - final WrapOption wOp = getAbstractOption ( ) ; 
 
 final String text = ast . getText ( ) ; 
 final int colNo = ast . getColumnNo ( ) ; 
 @ @ - 207 , 12 + 219 , 12 @ @ public class OperatorWrapCheck 
 / / Check if rest of line is whitespace , and not just the operator 
 / / by itself . This last bit is to handle the operator on a line by 
 / / itself . 
 - if ( wOp = = WrapOption . NL 
 + if ( option = = WrapOption . NL 
 & & ! text . equals ( currentLine . trim ( ) ) 
 & & StringUtils . isBlank ( currentLine . substring ( colNo + text . length ( ) ) ) ) { 
 log ( lineNo , colNo , LINE _ NEW , text ) ; 
 } 
 - else if ( wOp = = WrapOption . EOL 
 + else if ( option = = WrapOption . EOL 
 & & CommonUtils . hasWhitespaceBefore ( colNo - 1 , currentLine ) ) { 
 log ( lineNo , colNo , LINE _ PREVIOUS , text ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java 
 index c809293 . . 295ff1f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java 
 @ @ - 25 , 11 + 25 , 13 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . OperatorWrapChec 
 import java . io . File ; 
 import java . io . IOException ; 
 
 + import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 
 public class OperatorWrapCheckTest 
 extends BaseCheckTestSupport { 
 @ @ - 81 , 4 + 83 , 12 @ @ public class OperatorWrapCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputOpWrap . java " ) , expected ) ; 
 } 
 + 
 + @ Test ( expected = CheckstyleException . class ) 
 + public void testInvalidOption ( ) throws Exception { 
 + checkConfig . addAttribute ( " option " , " invalid _ option " ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , getPath ( " InputOpWrap . java " ) , expected ) ; 
 + } 
 }
