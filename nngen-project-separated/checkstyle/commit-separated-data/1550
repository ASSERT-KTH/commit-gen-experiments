BLEU SCORE: 0.04873498938813619

TEST MSG: Issue # 2161 : unify test input locations
GENERATED MSG: Issue 10 . Lambda support has been added .

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java <nl> index 388f148 . . 9d1ddb1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java <nl> @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . design ; <nl> import static com . puppycrawl . tools . checkstyle . checks . design . DesignForExtensionCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> @ @ - 30 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class DesignForExtensionCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " design " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java <nl> index 87ccf47 . . a6969dd 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . design . HideUtilityClassCons <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> @ @ - 33 , 6 + 34 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class HideUtilityClassConstructorCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " design " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> @ @ - 49 , 7 + 55 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> final String [ ] expected = { <nl> " 3 : 1 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " UtilityClassConstructor . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " UtilityClassConstructor . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 59 , 7 + 65 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> final String [ ] expected = { <nl> " 3 : 1 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " UtilityClassConstructorPublic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " UtilityClassConstructorPublic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 67 , 7 + 73 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " UtilityClassConstructorPrivate . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " UtilityClassConstructorPrivate . java " ) , expected ) ; <nl> } <nl> <nl> / * * Non - static methods - always OK . * / <nl> @ @ - 84 , 7 + 90 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " InputNonUtilityClass . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNonUtilityClass . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 92 , 7 + 98 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " InputRegression1762702 . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegression1762702 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 100 , 7 + 106 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " HideUtilityClassContructor3041574 _ 1 . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " HideUtilityClassContructor3041574 _ 1 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 108 , 7 + 114 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " HideUtilityClassContructor3041574 _ 2 . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " HideUtilityClassContructor3041574 _ 2 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 116 , 7 + 122 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " HideUtilityClassContructor3041574 _ 3 . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " HideUtilityClassContructor3041574 _ 3 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 124 , 7 + 130 , 7 @ @ public class HideUtilityClassConstructorCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " HideUtilityClassConstructor . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " HideUtilityClassConstructor . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputDesignForExtension . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputDesignForExtension . java <nl> deleted file mode 100644 <nl> index 79f730c . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputDesignForExtension . java <nl> + + + / dev / null <nl> @ @ - 1 , 122 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - / * * <nl> - * Test case for the " design for inheritance " check . <nl> - * @ author Lars K Ã¼ hne <nl> - * * / <nl> - public abstract class InputDesignForExtension <nl> - { <nl> - / / some methods that are OK <nl> - <nl> - public interface InterfaceOK <nl> - { <nl> - void implicitlyAbstract ( ) ; <nl> - } <nl> - <nl> - final class ClassOK <nl> - { <nl> - protected void finalThroughClassDef ( ) <nl> - { <nl> - System . out . println ( " no way to override " ) ; <nl> - } <nl> - } <nl> - <nl> - protected void nonFinalButEmpty ( ) <nl> - { <nl> - } <nl> - <nl> - public void nonFinalButEmpty2 ( ) <nl> - { <nl> - / / comments don ' t count as content . . . <nl> - } <nl> - <nl> - private void aPrivateMethod ( ) <nl> - { <nl> - System . out . println ( " no way to override " ) ; <nl> - } <nl> - <nl> - protected abstract void nonFinalButAbstract ( ) ; <nl> - <nl> - / / this one is bad : neither abstract , final , or empty <nl> - <nl> - protected void doh ( ) <nl> - { <nl> - System . out . println ( " nonempty and overriding possible " ) ; <nl> - } <nl> - <nl> - / / has a potentially complex implementation in native code . <nl> - / / We can ' t check that , so to be safe DesignForExtension requires <nl> - / / native methods to also be final <nl> - public native void aNativeMethod ( ) ; <nl> - <nl> - public final void aFinalMethod ( ) <nl> - { <nl> - 	 System . out . println ( " no way to override " ) ; <nl> - } <nl> - <nl> - public static void aStaticMethod ( ) <nl> - { <nl> - 	 System . out . println ( " no way to override " ) ; <nl> - } <nl> - <nl> - / / tries to trigger bug # 884035 <nl> - / / MyComparator is a private class , so there cannot be subclasses <nl> - / / and it should not be neccessary to declare compare ( ) as final <nl> - private class MyComparator implements java . util . Comparator <nl> - { <nl> - public int compare ( Object o1 , Object o2 ) <nl> - { <nl> - / / some complex stuff that would normally trigger an error report <nl> - if ( o1 . hashCode ( ) > o2 . hashCode ( ) ) { <nl> - return - 1 ; <nl> - } <nl> - else { <nl> - return 1 ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - public final class aFinalClass <nl> - { <nl> - public void someMethod ( ) <nl> - { <nl> - 	 System . out . println ( " nonempty and overriding is possible " ) ; <nl> - } <nl> - } <nl> - <nl> - public class nonFinalClass <nl> - { <nl> - 	 / / private ctor <nl> - 	 private nonFinalClass ( ) { } 	 <nl> - public void someMethod ( ) <nl> - { <nl> - 	 System . out . println ( " nonempty and overriding is possible " ) ; <nl> - } <nl> - } <nl> - <nl> - public class anotherNonFinalClass <nl> - { <nl> - 	 / / nonPrivate ctor <nl> - 	 public anotherNonFinalClass ( ) { } 	 <nl> - public void someMethod ( ) <nl> - { <nl> - 	 System . out . println ( " nonempty and overriding is possible " ) ; <nl> - } <nl> - } <nl> - <nl> - / / enums should be skipped <nl> - public enum TEnum <nl> - { <nl> - FIRST , <nl> - SECOND ; <nl> - <nl> - public int value ( ) <nl> - { <nl> - return 3 ; <nl> - } <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor . java <nl> new file mode 100644 <nl> index 0000000 . . ef8d5d5 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + public class HideUtilityClassConstructor { <nl> + <nl> + protected HideUtilityClassConstructor ( ) { <nl> + / / does nothing <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 1 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 1 . java <nl> new file mode 100644 <nl> index 0000000 . . 8c5e3fe <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 1 . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import java . io . Serializable ; <nl> + / * input file * / <nl> + public abstract class HideUtilityClassContructor3041574 _ 1 implements Serializable { <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 2 . java <nl> new file mode 100644 <nl> index 0000000 . . 946f931 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 2 . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import java . io . Serializable ; <nl> + / * input file * / <nl> + public class HideUtilityClassContructor3041574 _ 2 implements Serializable { <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 3 . java <nl> new file mode 100644 <nl> index 0000000 . . 55d53a1 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 3 . java <nl> @ @ - 0 , 0 + 1 , 48 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import java . io . Serializable ; <nl> + <nl> + public class HideUtilityClassContructor3041574 _ 3 implements Serializable { <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> + public HideUtilityClassContructor3041574 _ 3 ( int i ) { <nl> + / / no code <nl> + } <nl> + <nl> + public String getValue ( ) { <nl> + return " " ; <nl> + } <nl> + <nl> + / / It is NOT Utility Inner class <nl> + @ SuppressWarnings ( " unused " ) <nl> + public static class Event { <nl> + / / Top level class have access to fields - no need in public getters <nl> + private String ind ; <nl> + private String ind1 ; <nl> + <nl> + public Event ( String value ) { <nl> + / / do a lot of calculations <nl> + } <nl> + <nl> + / / static because this method is utility <nl> + public static String getEmptyString ( ) { <nl> + return " " ; <nl> + } <nl> + } <nl> + <nl> + / / It is Utility Inner class <nl> + @ SuppressWarnings ( " unused " ) <nl> + public static class Event1 { <nl> + private String ind ; <nl> + private String ind1 ; <nl> + <nl> + private Event1 ( ) { <nl> + / / do a lot of calculations <nl> + } <nl> + <nl> + / / static because this method is utility <nl> + public static String getEmptyString ( ) { <nl> + return " " ; <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtension . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtension . java <nl> new file mode 100644 <nl> index 0000000 . . b35e087 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtension . java <nl> @ @ - 0 , 0 + 1 , 122 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + / * * <nl> + * Test case for the " design for inheritance " check . <nl> + * @ author Lars K Ã¼ hne <nl> + * * / <nl> + public abstract class InputDesignForExtension <nl> + { <nl> + / / some methods that are OK <nl> + <nl> + public interface InterfaceOK <nl> + { <nl> + void implicitlyAbstract ( ) ; <nl> + } <nl> + <nl> + final class ClassOK <nl> + { <nl> + protected void finalThroughClassDef ( ) <nl> + { <nl> + System . out . println ( " no way to override " ) ; <nl> + } <nl> + } <nl> + <nl> + protected void nonFinalButEmpty ( ) <nl> + { <nl> + } <nl> + <nl> + public void nonFinalButEmpty2 ( ) <nl> + { <nl> + / / comments don ' t count as content . . . <nl> + } <nl> + <nl> + private void aPrivateMethod ( ) <nl> + { <nl> + System . out . println ( " no way to override " ) ; <nl> + } <nl> + <nl> + protected abstract void nonFinalButAbstract ( ) ; <nl> + <nl> + / / this one is bad : neither abstract , final , or empty <nl> + <nl> + protected void doh ( ) <nl> + { <nl> + System . out . println ( " nonempty and overriding possible " ) ; <nl> + } <nl> + <nl> + / / has a potentially complex implementation in native code . <nl> + / / We can ' t check that , so to be safe DesignForExtension requires <nl> + / / native methods to also be final <nl> + public native void aNativeMethod ( ) ; <nl> + <nl> + public final void aFinalMethod ( ) <nl> + { <nl> + 	 System . out . println ( " no way to override " ) ; <nl> + } <nl> + <nl> + public static void aStaticMethod ( ) <nl> + { <nl> + 	 System . out . println ( " no way to override " ) ; <nl> + } <nl> + <nl> + / / tries to trigger bug # 884035 <nl> + / / MyComparator is a private class , so there cannot be subclasses <nl> + / / and it should not be neccessary to declare compare ( ) as final <nl> + private class MyComparator implements java . util . Comparator <nl> + { <nl> + public int compare ( Object o1 , Object o2 ) <nl> + { <nl> + / / some complex stuff that would normally trigger an error report <nl> + if ( o1 . hashCode ( ) > o2 . hashCode ( ) ) { <nl> + return - 1 ; <nl> + } <nl> + else { <nl> + return 1 ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public final class aFinalClass <nl> + { <nl> + public void someMethod ( ) <nl> + { <nl> + 	 System . out . println ( " nonempty and overriding is possible " ) ; <nl> + } <nl> + } <nl> + <nl> + public class nonFinalClass <nl> + { <nl> + 	 / / private ctor <nl> + 	 private nonFinalClass ( ) { } 	 <nl> + public void someMethod ( ) <nl> + { <nl> + 	 System . out . println ( " nonempty and overriding is possible " ) ; <nl> + } <nl> + } <nl> + <nl> + public class anotherNonFinalClass <nl> + { <nl> + 	 / / nonPrivate ctor <nl> + 	 public anotherNonFinalClass ( ) { } 	 <nl> + public void someMethod ( ) <nl> + { <nl> + 	 System . out . println ( " nonempty and overriding is possible " ) ; <nl> + } <nl> + } <nl> + <nl> + / / enums should be skipped <nl> + public enum TEnum <nl> + { <nl> + FIRST , <nl> + SECOND ; <nl> + <nl> + public int value ( ) <nl> + { <nl> + return 3 ; <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputNonUtilityClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputNonUtilityClass . java <nl> new file mode 100644 <nl> index 0000000 . . 57fa5e0 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputNonUtilityClass . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import java . awt . Dimension ; <nl> + import javax . swing . JPanel ; <nl> + <nl> + / * * <nl> + * Not a util class because it ' s not directly derived from java . lang . Object . <nl> + * / <nl> + public class InputNonUtilityClass extends JPanel <nl> + { <nl> + / * * HideUtilityClassConstructorCheck should not report this * / <nl> + public InputNonUtilityClass ( ) <nl> + { <nl> + 	 this . setPreferredSize ( new Dimension ( 100 , 100 ) ) ; <nl> + } <nl> + <nl> + public static void utilMethod ( ) <nl> + { <nl> + 	 System . out . println ( " I ' m a utility method " ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputRegression1762702 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputRegression1762702 . java <nl> new file mode 100644 <nl> index 0000000 . . 58cb58d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputRegression1762702 . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + / * * <nl> + * Input for HideUtilityClassConstructorCheck , a non utility class that has <nl> + * <nl> + * @ author lkuehne <nl> + * / <nl> + public class InputRegression1762702 <nl> + { <nl> + public long constructionTime = System . currentTimeMillis ( ) ; <nl> + <nl> + public static InputRegression1762702 create ( ) <nl> + { <nl> + return new InputRegression1762702 ( ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructor . java <nl> new file mode 100644 <nl> index 0000000 . . fb87ba2 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructor . java <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + public class UtilityClassConstructor { <nl> + private static int value = 0 ; <nl> + public static void foo ( int val ) { value = val ; } <nl> + <nl> + public static class Inner { <nl> + public int foo ; <nl> + } <nl> + <nl> + public static class Inner2 { <nl> + public static int foo ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructorPrivate . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructorPrivate . java <nl> new file mode 100644 <nl> index 0000000 . . 546fcb1 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructorPrivate . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + public class UtilityClassConstructorPrivate { <nl> + private UtilityClassConstructorPrivate ( ) { } <nl> + <nl> + private static int value = 0 ; <nl> + public static void foo ( int val ) { value = val ; } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructorPublic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructorPublic . java <nl> new file mode 100644 <nl> index 0000000 . . e978c8c <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructorPublic . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + public class UtilityClassConstructorPublic { <nl> + public UtilityClassConstructorPublic ( ) { } <nl> + <nl> + private static int value = 0 ; <nl> + public static void foo ( int val ) { value = val ; } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassConstructor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassConstructor . java <nl> deleted file mode 100644 <nl> index 4365345 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassConstructor . java <nl> + + + / dev / null <nl> @ @ - 1 , 8 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - public class HideUtilityClassConstructor { <nl> - <nl> - protected HideUtilityClassConstructor ( ) { <nl> - / / does nothing <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 1 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 1 . java <nl> deleted file mode 100644 <nl> index 238f62c . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 1 . java <nl> + + + / dev / null <nl> @ @ - 1 , 8 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - import java . io . Serializable ; <nl> - / * input file * / <nl> - public abstract class HideUtilityClassContructor3041574 _ 1 implements Serializable { <nl> - private static final long serialVersionUID = 1L ; <nl> - <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 2 . java <nl> deleted file mode 100644 <nl> index 02cd0dc . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 8 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - import java . io . Serializable ; <nl> - / * input file * / <nl> - public class HideUtilityClassContructor3041574 _ 2 implements Serializable { <nl> - private static final long serialVersionUID = 1L ; <nl> - <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 3 . java <nl> deleted file mode 100644 <nl> index 2fc8da0 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 3 . java <nl> + + + / dev / null <nl> @ @ - 1 , 48 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - import java . io . Serializable ; <nl> - <nl> - public class HideUtilityClassContructor3041574 _ 3 implements Serializable { <nl> - private static final long serialVersionUID = 1L ; <nl> - <nl> - public HideUtilityClassContructor3041574 _ 3 ( int i ) { <nl> - / / no code <nl> - } <nl> - <nl> - public String getValue ( ) { <nl> - return " " ; <nl> - } <nl> - <nl> - / / It is NOT Utility Inner class <nl> - @ SuppressWarnings ( " unused " ) <nl> - public static class Event { <nl> - / / Top level class have access to fields - no need in public getters <nl> - private String ind ; <nl> - private String ind1 ; <nl> - <nl> - public Event ( String value ) { <nl> - / / do a lot of calculations <nl> - } <nl> - <nl> - / / static because this method is utility <nl> - public static String getEmptyString ( ) { <nl> - return " " ; <nl> - } <nl> - } <nl> - <nl> - / / It is Utility Inner class <nl> - @ SuppressWarnings ( " unused " ) <nl> - public static class Event1 { <nl> - private String ind ; <nl> - private String ind1 ; <nl> - <nl> - private Event1 ( ) { <nl> - / / do a lot of calculations <nl> - } <nl> - <nl> - / / static because this method is utility <nl> - public static String getEmptyString ( ) { <nl> - return " " ; <nl> - } <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputNonUtilityClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputNonUtilityClass . java <nl> deleted file mode 100644 <nl> index bc1488e . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputNonUtilityClass . java <nl> + + + / dev / null <nl> @ @ - 1 , 21 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - import java . awt . Dimension ; <nl> - import javax . swing . JPanel ; <nl> - <nl> - / * * <nl> - * Not a util class because it ' s not directly derived from java . lang . Object . <nl> - * / <nl> - public class InputNonUtilityClass extends JPanel <nl> - { <nl> - / * * HideUtilityClassConstructorCheck should not report this * / <nl> - public InputNonUtilityClass ( ) <nl> - { <nl> - 	 this . setPreferredSize ( new Dimension ( 100 , 100 ) ) ; <nl> - } <nl> - <nl> - public static void utilMethod ( ) <nl> - { <nl> - 	 System . out . println ( " I ' m a utility method " ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputRegression1762702 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputRegression1762702 . java <nl> deleted file mode 100644 <nl> index da3c8c7 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputRegression1762702 . java <nl> + + + / dev / null <nl> @ @ - 1 , 16 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - / * * <nl> - * Input for HideUtilityClassConstructorCheck , a non utility class that has <nl> - * <nl> - * @ author lkuehne <nl> - * / <nl> - public class InputRegression1762702 <nl> - { <nl> - public long constructionTime = System . currentTimeMillis ( ) ; <nl> - <nl> - public static InputRegression1762702 create ( ) <nl> - { <nl> - return new InputRegression1762702 ( ) ; <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructor . java <nl> deleted file mode 100644 <nl> index bc55229 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructor . java <nl> + + + / dev / null <nl> @ @ - 1 , 14 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - public class UtilityClassConstructor { <nl> - private static int value = 0 ; <nl> - public static void foo ( int val ) { value = val ; } <nl> - <nl> - public static class Inner { <nl> - public int foo ; <nl> - } <nl> - <nl> - public static class Inner2 { <nl> - public static int foo ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructorPrivate . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructorPrivate . java <nl> deleted file mode 100644 <nl> index 616909c . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructorPrivate . java <nl> + + + / dev / null <nl> @ @ - 1 , 8 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - public class UtilityClassConstructorPrivate { <nl> - private UtilityClassConstructorPrivate ( ) { } <nl> - <nl> - private static int value = 0 ; <nl> - public static void foo ( int val ) { value = val ; } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructorPublic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructorPublic . java <nl> deleted file mode 100644 <nl> index d055fb5 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructorPublic . java <nl> + + + / dev / null <nl> @ @ - 1 , 8 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - public class UtilityClassConstructorPublic { <nl> - public UtilityClassConstructorPublic ( ) { } <nl> - <nl> - private static int value = 0 ; <nl> - public static void foo ( int val ) { value = val ; } <nl> - }
NEAREST DIFF (one line): diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / metrics / messages _ de . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / metrics / messages _ de . properties <nl> index 6af9168 . . 80ba17e 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / metrics / messages _ de . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / metrics / messages _ de . properties <nl> @ @ - 1 , 29 + 1 , 29 @ @ <nl> - booleanExpressionComplexity = Komplexit Ã¤ t des Boole ' schen Ausdrucks betr Ã¤ gt { 0 , number , integer } ( Obergrenze ist { 1 , number , integer } ) . <nl> - classDataAbstractionCoupling = Class Data Abstraction Coupling betr Ã¤ gt { 0 , number , integer } ( Obergrenze ist { 1 , number , integer } ) Klassen { 2 } . <nl> - classFanOutComplexity = Class Fan - Out Complexity betr Ã¤ gt { 0 , number , integer } ( Obergrenze ist { 1 , number , integer } ) . <nl> - cyclomaticComplexity = Zyklomatische Komplexit Ã¤ t betr Ã¤ gt { 0 , number , integer } ( Obergrenze ist { 1 , number , integer } ) . <nl> - duplicateLiteral = Mehrfaches Auftreten des selben Literals ' ' { 0 } ' ' ist unzul Ã¤ ssig . <nl> + booleanExpressio

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java 
 index 388f148 . . 9d1ddb1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheckTest . java 
 @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . design ; 
 import static com . puppycrawl . tools . checkstyle . checks . design . DesignForExtensionCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 @ @ - 30 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class DesignForExtensionCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " design " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java 
 index 87ccf47 . . a6969dd 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheckTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . design . HideUtilityClassCons 
 import static org . junit . Assert . assertArrayEquals ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 @ @ - 33 , 6 + 34 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class HideUtilityClassConstructorCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " design " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 @ @ - 49 , 7 + 55 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 final String [ ] expected = { 
 " 3 : 1 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 - verify ( checkConfig , getPath ( " design " + File . separator + " UtilityClassConstructor . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " UtilityClassConstructor . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 59 , 7 + 65 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 final String [ ] expected = { 
 " 3 : 1 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 - verify ( checkConfig , getPath ( " design " + File . separator + " UtilityClassConstructorPublic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " UtilityClassConstructorPublic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 67 , 7 + 73 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " design " + File . separator + " UtilityClassConstructorPrivate . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " UtilityClassConstructorPrivate . java " ) , expected ) ; 
 } 
 
 / * * Non - static methods - always OK . * / 
 @ @ - 84 , 7 + 90 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " design " + File . separator + " InputNonUtilityClass . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNonUtilityClass . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 92 , 7 + 98 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " design " + File . separator + " InputRegression1762702 . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegression1762702 . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 100 , 7 + 106 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " design " + File . separator + " HideUtilityClassContructor3041574 _ 1 . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " HideUtilityClassContructor3041574 _ 1 . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 108 , 7 + 114 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " design " + File . separator + " HideUtilityClassContructor3041574 _ 2 . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " HideUtilityClassContructor3041574 _ 2 . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 116 , 7 + 122 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " design " + File . separator + " HideUtilityClassContructor3041574 _ 3 . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " HideUtilityClassContructor3041574 _ 3 . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 124 , 7 + 130 , 7 @ @ public class HideUtilityClassConstructorCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( HideUtilityClassConstructorCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " design " + File . separator + " HideUtilityClassConstructor . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " HideUtilityClassConstructor . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputDesignForExtension . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputDesignForExtension . java 
 deleted file mode 100644 
 index 79f730c . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputDesignForExtension . java 
 + + + / dev / null 
 @ @ - 1 , 122 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - / * * 
 - * Test case for the " design for inheritance " check . 
 - * @ author Lars K Ã¼ hne 
 - * * / 
 - public abstract class InputDesignForExtension 
 - { 
 - / / some methods that are OK 
 - 
 - public interface InterfaceOK 
 - { 
 - void implicitlyAbstract ( ) ; 
 - } 
 - 
 - final class ClassOK 
 - { 
 - protected void finalThroughClassDef ( ) 
 - { 
 - System . out . println ( " no way to override " ) ; 
 - } 
 - } 
 - 
 - protected void nonFinalButEmpty ( ) 
 - { 
 - } 
 - 
 - public void nonFinalButEmpty2 ( ) 
 - { 
 - / / comments don ' t count as content . . . 
 - } 
 - 
 - private void aPrivateMethod ( ) 
 - { 
 - System . out . println ( " no way to override " ) ; 
 - } 
 - 
 - protected abstract void nonFinalButAbstract ( ) ; 
 - 
 - / / this one is bad : neither abstract , final , or empty 
 - 
 - protected void doh ( ) 
 - { 
 - System . out . println ( " nonempty and overriding possible " ) ; 
 - } 
 - 
 - / / has a potentially complex implementation in native code . 
 - / / We can ' t check that , so to be safe DesignForExtension requires 
 - / / native methods to also be final 
 - public native void aNativeMethod ( ) ; 
 - 
 - public final void aFinalMethod ( ) 
 - { 
 - 	 System . out . println ( " no way to override " ) ; 
 - } 
 - 
 - public static void aStaticMethod ( ) 
 - { 
 - 	 System . out . println ( " no way to override " ) ; 
 - } 
 - 
 - / / tries to trigger bug # 884035 
 - / / MyComparator is a private class , so there cannot be subclasses 
 - / / and it should not be neccessary to declare compare ( ) as final 
 - private class MyComparator implements java . util . Comparator 
 - { 
 - public int compare ( Object o1 , Object o2 ) 
 - { 
 - / / some complex stuff that would normally trigger an error report 
 - if ( o1 . hashCode ( ) > o2 . hashCode ( ) ) { 
 - return - 1 ; 
 - } 
 - else { 
 - return 1 ; 
 - } 
 - } 
 - } 
 - 
 - public final class aFinalClass 
 - { 
 - public void someMethod ( ) 
 - { 
 - 	 System . out . println ( " nonempty and overriding is possible " ) ; 
 - } 
 - } 
 - 
 - public class nonFinalClass 
 - { 
 - 	 / / private ctor 
 - 	 private nonFinalClass ( ) { } 	 
 - public void someMethod ( ) 
 - { 
 - 	 System . out . println ( " nonempty and overriding is possible " ) ; 
 - } 
 - } 
 - 
 - public class anotherNonFinalClass 
 - { 
 - 	 / / nonPrivate ctor 
 - 	 public anotherNonFinalClass ( ) { } 	 
 - public void someMethod ( ) 
 - { 
 - 	 System . out . println ( " nonempty and overriding is possible " ) ; 
 - } 
 - } 
 - 
 - / / enums should be skipped 
 - public enum TEnum 
 - { 
 - FIRST , 
 - SECOND ; 
 - 
 - public int value ( ) 
 - { 
 - return 3 ; 
 - } 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor . java 
 new file mode 100644 
 index 0000000 . . ef8d5d5 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructor . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + public class HideUtilityClassConstructor { 
 + 
 + protected HideUtilityClassConstructor ( ) { 
 + / / does nothing 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 1 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 1 . java 
 new file mode 100644 
 index 0000000 . . 8c5e3fe 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 1 . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import java . io . Serializable ; 
 + / * input file * / 
 + public abstract class HideUtilityClassContructor3041574 _ 1 implements Serializable { 
 + private static final long serialVersionUID = 1L ; 
 + 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 2 . java 
 new file mode 100644 
 index 0000000 . . 946f931 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 2 . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import java . io . Serializable ; 
 + / * input file * / 
 + public class HideUtilityClassContructor3041574 _ 2 implements Serializable { 
 + private static final long serialVersionUID = 1L ; 
 + 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 3 . java 
 new file mode 100644 
 index 0000000 . . 55d53a1 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassContructor3041574 _ 3 . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import java . io . Serializable ; 
 + 
 + public class HideUtilityClassContructor3041574 _ 3 implements Serializable { 
 + private static final long serialVersionUID = 1L ; 
 + 
 + public HideUtilityClassContructor3041574 _ 3 ( int i ) { 
 + / / no code 
 + } 
 + 
 + public String getValue ( ) { 
 + return " " ; 
 + } 
 + 
 + / / It is NOT Utility Inner class 
 + @ SuppressWarnings ( " unused " ) 
 + public static class Event { 
 + / / Top level class have access to fields - no need in public getters 
 + private String ind ; 
 + private String ind1 ; 
 + 
 + public Event ( String value ) { 
 + / / do a lot of calculations 
 + } 
 + 
 + / / static because this method is utility 
 + public static String getEmptyString ( ) { 
 + return " " ; 
 + } 
 + } 
 + 
 + / / It is Utility Inner class 
 + @ SuppressWarnings ( " unused " ) 
 + public static class Event1 { 
 + private String ind ; 
 + private String ind1 ; 
 + 
 + private Event1 ( ) { 
 + / / do a lot of calculations 
 + } 
 + 
 + / / static because this method is utility 
 + public static String getEmptyString ( ) { 
 + return " " ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtension . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtension . java 
 new file mode 100644 
 index 0000000 . . b35e087 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtension . java 
 @ @ - 0 , 0 + 1 , 122 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + / * * 
 + * Test case for the " design for inheritance " check . 
 + * @ author Lars K Ã¼ hne 
 + * * / 
 + public abstract class InputDesignForExtension 
 + { 
 + / / some methods that are OK 
 + 
 + public interface InterfaceOK 
 + { 
 + void implicitlyAbstract ( ) ; 
 + } 
 + 
 + final class ClassOK 
 + { 
 + protected void finalThroughClassDef ( ) 
 + { 
 + System . out . println ( " no way to override " ) ; 
 + } 
 + } 
 + 
 + protected void nonFinalButEmpty ( ) 
 + { 
 + } 
 + 
 + public void nonFinalButEmpty2 ( ) 
 + { 
 + / / comments don ' t count as content . . . 
 + } 
 + 
 + private void aPrivateMethod ( ) 
 + { 
 + System . out . println ( " no way to override " ) ; 
 + } 
 + 
 + protected abstract void nonFinalButAbstract ( ) ; 
 + 
 + / / this one is bad : neither abstract , final , or empty 
 + 
 + protected void doh ( ) 
 + { 
 + System . out . println ( " nonempty and overriding possible " ) ; 
 + } 
 + 
 + / / has a potentially complex implementation in native code . 
 + / / We can ' t check that , so to be safe DesignForExtension requires 
 + / / native methods to also be final 
 + public native void aNativeMethod ( ) ; 
 + 
 + public final void aFinalMethod ( ) 
 + { 
 + 	 System . out . println ( " no way to override " ) ; 
 + } 
 + 
 + public static void aStaticMethod ( ) 
 + { 
 + 	 System . out . println ( " no way to override " ) ; 
 + } 
 + 
 + / / tries to trigger bug # 884035 
 + / / MyComparator is a private class , so there cannot be subclasses 
 + / / and it should not be neccessary to declare compare ( ) as final 
 + private class MyComparator implements java . util . Comparator 
 + { 
 + public int compare ( Object o1 , Object o2 ) 
 + { 
 + / / some complex stuff that would normally trigger an error report 
 + if ( o1 . hashCode ( ) > o2 . hashCode ( ) ) { 
 + return - 1 ; 
 + } 
 + else { 
 + return 1 ; 
 + } 
 + } 
 + } 
 + 
 + public final class aFinalClass 
 + { 
 + public void someMethod ( ) 
 + { 
 + 	 System . out . println ( " nonempty and overriding is possible " ) ; 
 + } 
 + } 
 + 
 + public class nonFinalClass 
 + { 
 + 	 / / private ctor 
 + 	 private nonFinalClass ( ) { } 	 
 + public void someMethod ( ) 
 + { 
 + 	 System . out . println ( " nonempty and overriding is possible " ) ; 
 + } 
 + } 
 + 
 + public class anotherNonFinalClass 
 + { 
 + 	 / / nonPrivate ctor 
 + 	 public anotherNonFinalClass ( ) { } 	 
 + public void someMethod ( ) 
 + { 
 + 	 System . out . println ( " nonempty and overriding is possible " ) ; 
 + } 
 + } 
 + 
 + / / enums should be skipped 
 + public enum TEnum 
 + { 
 + FIRST , 
 + SECOND ; 
 + 
 + public int value ( ) 
 + { 
 + return 3 ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputNonUtilityClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputNonUtilityClass . java 
 new file mode 100644 
 index 0000000 . . 57fa5e0 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputNonUtilityClass . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import java . awt . Dimension ; 
 + import javax . swing . JPanel ; 
 + 
 + / * * 
 + * Not a util class because it ' s not directly derived from java . lang . Object . 
 + * / 
 + public class InputNonUtilityClass extends JPanel 
 + { 
 + / * * HideUtilityClassConstructorCheck should not report this * / 
 + public InputNonUtilityClass ( ) 
 + { 
 + 	 this . setPreferredSize ( new Dimension ( 100 , 100 ) ) ; 
 + } 
 + 
 + public static void utilMethod ( ) 
 + { 
 + 	 System . out . println ( " I ' m a utility method " ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputRegression1762702 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputRegression1762702 . java 
 new file mode 100644 
 index 0000000 . . 58cb58d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputRegression1762702 . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + / * * 
 + * Input for HideUtilityClassConstructorCheck , a non utility class that has 
 + * 
 + * @ author lkuehne 
 + * / 
 + public class InputRegression1762702 
 + { 
 + public long constructionTime = System . currentTimeMillis ( ) ; 
 + 
 + public static InputRegression1762702 create ( ) 
 + { 
 + return new InputRegression1762702 ( ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructor . java 
 new file mode 100644 
 index 0000000 . . fb87ba2 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructor . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + public class UtilityClassConstructor { 
 + private static int value = 0 ; 
 + public static void foo ( int val ) { value = val ; } 
 + 
 + public static class Inner { 
 + public int foo ; 
 + } 
 + 
 + public static class Inner2 { 
 + public static int foo ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructorPrivate . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructorPrivate . java 
 new file mode 100644 
 index 0000000 . . 546fcb1 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructorPrivate . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + public class UtilityClassConstructorPrivate { 
 + private UtilityClassConstructorPrivate ( ) { } 
 + 
 + private static int value = 0 ; 
 + public static void foo ( int val ) { value = val ; } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructorPublic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructorPublic . java 
 new file mode 100644 
 index 0000000 . . e978c8c 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / UtilityClassConstructorPublic . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + public class UtilityClassConstructorPublic { 
 + public UtilityClassConstructorPublic ( ) { } 
 + 
 + private static int value = 0 ; 
 + public static void foo ( int val ) { value = val ; } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassConstructor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassConstructor . java 
 deleted file mode 100644 
 index 4365345 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassConstructor . java 
 + + + / dev / null 
 @ @ - 1 , 8 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - public class HideUtilityClassConstructor { 
 - 
 - protected HideUtilityClassConstructor ( ) { 
 - / / does nothing 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 1 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 1 . java 
 deleted file mode 100644 
 index 238f62c . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 1 . java 
 + + + / dev / null 
 @ @ - 1 , 8 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - import java . io . Serializable ; 
 - / * input file * / 
 - public abstract class HideUtilityClassContructor3041574 _ 1 implements Serializable { 
 - private static final long serialVersionUID = 1L ; 
 - 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 2 . java 
 deleted file mode 100644 
 index 02cd0dc . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 2 . java 
 + + + / dev / null 
 @ @ - 1 , 8 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - import java . io . Serializable ; 
 - / * input file * / 
 - public class HideUtilityClassContructor3041574 _ 2 implements Serializable { 
 - private static final long serialVersionUID = 1L ; 
 - 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 3 . java 
 deleted file mode 100644 
 index 2fc8da0 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / HideUtilityClassContructor3041574 _ 3 . java 
 + + + / dev / null 
 @ @ - 1 , 48 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - import java . io . Serializable ; 
 - 
 - public class HideUtilityClassContructor3041574 _ 3 implements Serializable { 
 - private static final long serialVersionUID = 1L ; 
 - 
 - public HideUtilityClassContructor3041574 _ 3 ( int i ) { 
 - / / no code 
 - } 
 - 
 - public String getValue ( ) { 
 - return " " ; 
 - } 
 - 
 - / / It is NOT Utility Inner class 
 - @ SuppressWarnings ( " unused " ) 
 - public static class Event { 
 - / / Top level class have access to fields - no need in public getters 
 - private String ind ; 
 - private String ind1 ; 
 - 
 - public Event ( String value ) { 
 - / / do a lot of calculations 
 - } 
 - 
 - / / static because this method is utility 
 - public static String getEmptyString ( ) { 
 - return " " ; 
 - } 
 - } 
 - 
 - / / It is Utility Inner class 
 - @ SuppressWarnings ( " unused " ) 
 - public static class Event1 { 
 - private String ind ; 
 - private String ind1 ; 
 - 
 - private Event1 ( ) { 
 - / / do a lot of calculations 
 - } 
 - 
 - / / static because this method is utility 
 - public static String getEmptyString ( ) { 
 - return " " ; 
 - } 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputNonUtilityClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputNonUtilityClass . java 
 deleted file mode 100644 
 index bc1488e . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputNonUtilityClass . java 
 + + + / dev / null 
 @ @ - 1 , 21 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - import java . awt . Dimension ; 
 - import javax . swing . JPanel ; 
 - 
 - / * * 
 - * Not a util class because it ' s not directly derived from java . lang . Object . 
 - * / 
 - public class InputNonUtilityClass extends JPanel 
 - { 
 - / * * HideUtilityClassConstructorCheck should not report this * / 
 - public InputNonUtilityClass ( ) 
 - { 
 - 	 this . setPreferredSize ( new Dimension ( 100 , 100 ) ) ; 
 - } 
 - 
 - public static void utilMethod ( ) 
 - { 
 - 	 System . out . println ( " I ' m a utility method " ) ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputRegression1762702 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputRegression1762702 . java 
 deleted file mode 100644 
 index da3c8c7 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputRegression1762702 . java 
 + + + / dev / null 
 @ @ - 1 , 16 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - / * * 
 - * Input for HideUtilityClassConstructorCheck , a non utility class that has 
 - * 
 - * @ author lkuehne 
 - * / 
 - public class InputRegression1762702 
 - { 
 - public long constructionTime = System . currentTimeMillis ( ) ; 
 - 
 - public static InputRegression1762702 create ( ) 
 - { 
 - return new InputRegression1762702 ( ) ; 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructor . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructor . java 
 deleted file mode 100644 
 index bc55229 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructor . java 
 + + + / dev / null 
 @ @ - 1 , 14 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - public class UtilityClassConstructor { 
 - private static int value = 0 ; 
 - public static void foo ( int val ) { value = val ; } 
 - 
 - public static class Inner { 
 - public int foo ; 
 - } 
 - 
 - public static class Inner2 { 
 - public static int foo ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructorPrivate . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructorPrivate . java 
 deleted file mode 100644 
 index 616909c . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructorPrivate . java 
 + + + / dev / null 
 @ @ - 1 , 8 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - public class UtilityClassConstructorPrivate { 
 - private UtilityClassConstructorPrivate ( ) { } 
 - 
 - private static int value = 0 ; 
 - public static void foo ( int val ) { value = val ; } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructorPublic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructorPublic . java 
 deleted file mode 100644 
 index d055fb5 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / UtilityClassConstructorPublic . java 
 + + + / dev / null 
 @ @ - 1 , 8 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - public class UtilityClassConstructorPublic { 
 - public UtilityClassConstructorPublic ( ) { } 
 - 
 - private static int value = 0 ; 
 - public static void foo ( int val ) { value = val ; } 
 - }

NEAREST DIFF:
diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / metrics / messages _ de . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / metrics / messages _ de . properties 
 index 6af9168 . . 80ba17e 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / metrics / messages _ de . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / metrics / messages _ de . properties 
 @ @ - 1 , 29 + 1 , 29 @ @ 
 - booleanExpressionComplexity = Komplexit Ã¤ t des Boole ' schen Ausdrucks betr Ã¤ gt { 0 , number , integer } ( Obergrenze ist { 1 , number , integer } ) . 
 - classDataAbstractionCoupling = Class Data Abstraction Coupling betr Ã¤ gt { 0 , number , integer } ( Obergrenze ist { 1 , number , integer } ) Klassen { 2 } . 
 - classFanOutComplexity = Class Fan - Out Complexity betr Ã¤ gt { 0 , number , integer } ( Obergrenze ist { 1 , number , integer } ) . 
 - cyclomaticComplexity = Zyklomatische Komplexit Ã¤ t betr Ã¤ gt { 0 , number , integer } ( Obergrenze ist { 1 , number , integer } ) . 
 - duplicateLiteral = Mehrfaches Auftreten des selben Literals ' ' { 0 } ' ' ist unzul Ã¤ ssig . 
 + booleanExpressio
