BLEU SCORE: 0.031251907639724415

TEST MSG: minor : update wercker . yml to do quite svn checkout to reduce log size
GENERATED MSG: config : upgrade to latest Orekit commit

TEST DIFF (one line): diff - - git a / wercker . yml b / wercker . yml <nl> index fe524ba . . 61e91c0 100644 <nl> - - - a / wercker . yml <nl> + + + b / wercker . yml <nl> @ @ - 70 , 8 + 70 , 10 @ @ build : <nl> mvn clean install - Pno - validations <nl> & & CS _ POM _ VERSION = $ ( mvn - q - Dexec . executable = ' echo ' - Dexec . args = ' $ { project . version } ' - - non - recursive org . codehaus . mojo : exec - maven - plugin : 1 . 3 . 1 : exec ) <nl> & & echo CS _ version : $ { CS _ POM _ VERSION } <nl> - & & svn export https : / / svn . code . sf . net / p / htmlunit / code / trunk / htmlunit htmlunit <nl> + & & echo " checkouting project sources . . . " <nl> + & & svn - q export https : / / svn . code . sf . net / p / htmlunit / code / trunk / htmlunit htmlunit <nl> & & cd htmlunit <nl> + & & echo " Running checkstyle validation . . . " <nl> & & mvn compile checkstyle : check - Dcheckstyle . version = $ { CS _ POM _ VERSION } <nl> <nl> # NoExceptiontest - Apache Struts ( oraclejdk8 )
NEAREST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java <nl> index ac2bffc . . bab33e9 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java <nl> @ @ - 63 , 6 + 63 , 11 @ @ public class ParameterNameTest extends BaseCheckTestSupport { <nl> " 26 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " bB " , format ) , <nl> " 49 : 22 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " llll _ llll " , format ) , <nl> " 50 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " bB " , format ) , <nl> + " 60 : 23 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , <nl> + " 63 : 24 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , <nl> + " 69 : 31 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , <nl> + " 74 : 41 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , <nl> + " 77 : 44 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , <nl> } ; <nl> <nl> final String filePath = getPath ( " InputParameterNameSimple . java " ) ; <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java <nl> index cd63896 . . 6f7bf9c 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java <nl> @ @ - 49 , 3 + 49 , 30 @ @ enum MyEnum1 <nl> 	 	 long llll _ llll , / / warn <nl> boolean bB ) { } / / warn <nl> } <nl> + <nl> + / * * Test public vs private method parameter naming check . * / <nl> + class InputParameterNameSimple <nl> + { <nl> + / * * Valid : public and more than one char Long * / <nl> + public void a ( int par , int parA ) { } <nl> + <nl> + / * * Invalid : public and one char long * / <nl> + public void b ( int p ) { } / / warn <nl> + <nl> + / * * Invalid : private and one char long . * / <nl> + private void c ( int p ) { } / / warn <nl> + <nl> + / * * Holder for inner anonymous classes * / <nl> + private void d ( int param ) { <nl> + new Object ( ) { <nl> + / * * Invalid : public and one char long . * / <nl> + public void e ( int p ) { } / / warn <nl> + } ; <nl> + } <nl> + <nl> + / * * Invalid : public constructor and one char long * / <nl> + public InputParameterNameSimple ( int p ) { } / / warn <nl> + <nl> + / * * Invalid : private constructor and one char long * / <nl> + private InputParameterNameSimple ( float p ) { } / / warn <nl> + } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> index e709dae . . d31c845 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> @ @ - 22 , 8 + 22 , 10 @ @ package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> import java . util . Optional ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . Scope ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; <nl> + import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 33 , 9 + 35 , 13 @ @ import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; <nl> * and defaults to <nl> * < strong > ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ < / strong > . <nl> * < / p > <nl> - * < p > The check has the following option : < / p > <nl> + * < p > The check has the following options : < / p > <nl> * < p > < b > ignoreOverridden < / b > - allows to skip methods with Override annotation from <nl> * validation . Default values is < b > false < / b > . < / p > <nl> + * < p > < b > scope < / b > - visibility scope of methods to be checked . <nl> + * Default value is < b > anoninner < / b > . < / p > <nl> + * < p > < b > excludeScope < / b > - visibility scope of methods not to be checked . <nl> + * Default value is < b > null < / b > . < / p > <nl> * < p > <nl> * An example of how to configure the check is : <nl> * < / p > <nl> @ @ - 72 , 6 + 78 , 12 @ @ public class ParameterNameCheck <nl> * / <nl> private boolean ignoreOverridden ; <nl> <nl> + / * * The visibility scope where methods are checked . * / <nl> + private Scope scope = Scope . ANONINNER ; <nl> + <nl> + / * * The visibility scope where methods shouldn ' t be checked . * / <nl> + private Scope excludeScope ; <nl> + <nl> / * * <nl> * Creates a new { @ code ParameterNameCheck } instance . <nl> * / <nl> @ @ - 88 , 6 + 100 , 22 @ @ public class ParameterNameCheck <nl> this . ignoreOverridden = ignoreOverridden ; <nl> } <nl> <nl> + / * * <nl> + * Set the scope . <nl> + * @ param from a { @ code String } value <nl> + * / <nl> + public void setScope ( String from ) { <nl> + scope = Scope . getInstance ( from ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the excludeScope . <nl> + * @ param excludeScope a { @ code String } value <nl> + * / <nl> + public void setExcludeScope ( String excludeScope ) { <nl> + this . excludeScope = Scope . getInstance ( excludeScope ) ; <nl> + } <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> return getAcceptableTokens ( ) ; <nl> @ @ - 106 , 15 + 134 , 56 @ @ public class ParameterNameCheck <nl> @ Override <nl> protected boolean mustCheckName ( DetailAST ast ) { <nl> boolean checkName = true ; <nl> + final boolean isDefault = scope = = Scope . ANONINNER & & excludeScope = = null ; <nl> + <nl> if ( ignoreOverridden & & isOverriddenMethod ( ast ) <nl> | | ast . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ CATCH <nl> - | | CheckUtils . isReceiverParameter ( ast ) ) { <nl> + | | CheckUtils . isReceiverParameter ( ast ) <nl> + | | ! isDefault & & ! matchScope ( calculateScope ( ast ) ) ) { <nl> checkName = false ; <nl> } <nl> return checkName ; <nl> } <nl> <nl> / * * <nl> + * Returns the scope for the method / constructor at the specified AST . If <nl> + * the method is in an interface or annotation block , the scope is assumed <nl> + * to be public . <nl> + * <nl> + * @ param ast the token of the method / constructor <nl> + * @ return the scope of the method / constructor <nl> + * / <nl> + private static Scope calculateScope ( final DetailAST ast ) { <nl> + final DetailAST params = ast . getParent ( ) ; <nl> + final DetailAST meth = params . getParent ( ) ; <nl> + Scope scope = Scope . PRIVATE ; <nl> + <nl> + if ( meth . getType ( ) = = TokenTypes . METHOD _ DEF <nl> + | | meth . getType ( ) = = TokenTypes . CTOR _ DEF ) { <nl> + if ( ScopeUtils . isInInterfaceOrAnnotationBlock ( ast ) ) { <nl> + scope = Scope . PUBLIC ; <nl> + } <nl> + else { <nl> + final DetailAST mods = meth . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + scope = ScopeUtils . getScopeFromMods ( mods ) ; <nl> + } <nl> + } <nl> + <nl> + return scope ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks whether a method has the correct scope to be checked . <nl> + * @ param nodeScope the scope of the method <nl> + * @ return whether the method matches the expected scope <nl> + * / <nl> + private boolean matchScope ( final Scope nodeScope ) { <nl> + return nodeScope . isIn ( scope ) <nl> + & & ( excludeScope = = null <nl> + | | ! nodeScope . isIn ( excludeScope ) ) ; <nl> + } <nl> + <nl> + / * * <nl> * Checks whether a method is annotated with Override annotation . <nl> * @ param ast method parameter definition token . <nl> * @ return true if a method is annotated with Override annotation . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> index b356014 . . cc0cc7c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . Scope ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ @ - 139 , 6 + 140 , 68 @ @ public class ParameterNameCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testScope ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ParameterNameCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , " ^ h $ " ) ; <nl> + checkConfig . addAttribute ( " scope " , Scope . PUBLIC . getName ( ) ) ; <nl> + <nl> + final String pattern = " ^ h $ " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 5 : 27 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubconstr " , pattern ) , <nl> + " 9 : 31 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " inner " , pattern ) , <nl> + " 19 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubpub " , pattern ) , <nl> + " 30 : 21 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubifc " , pattern ) , <nl> + " 44 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " packpub " , pattern ) , <nl> + " 60 : 21 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " packifc " , pattern ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputScope . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testExcludeScope ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ParameterNameCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , " ^ h $ " ) ; <nl> + checkConfig . addAttribute ( " excludeScope " , Scope . PROTECTED . getName ( ) ) ; <nl> + <nl> + final String pattern = " ^ h $ " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 23 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubpack " , pattern ) , <nl> + " 25 : 25 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubpriv " , pattern ) , <nl> + " 48 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " packpack " , pattern ) , <nl> + " 50 : 25 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " packpriv " , pattern ) , <nl> + " 68 : 27 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " lexp " , pattern ) , <nl> + " 70 : 23 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " limp " , pattern ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputScope . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testScopeExcludeScope ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ParameterNameCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , " ^ h $ " ) ; <nl> + checkConfig . addAttribute ( " scope " , Scope . PACKAGE . getName ( ) ) ; <nl> + checkConfig . addAttribute ( " excludeScope " , Scope . PUBLIC . getName ( ) ) ; <nl> + <nl> + final String pattern = " ^ h $ " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 21 : 27 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubprot " , pattern ) , <nl> + " 23 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubpack " , pattern ) , <nl> + " 46 : 27 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " packprot " , pattern ) , <nl> + " 48 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " packpack " , pattern ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputScope . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testIsOverriddenNoNullPointerException ( ) <nl> throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( ParameterNameCheck . class ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputScope . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputScope . java <nl> new file mode 100644 <nl> index 0000000 . . aae4a4c <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputScope . java <nl> @ @ - 0 , 0 + 1 , 74 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + public class InputScope { <nl> + <nl> + public InputScope ( int pubconstr ) { } <nl> + <nl> + public void v1 ( int h ) { <nl> + new Object ( ) { <nl> + public void i ( int inner ) { } <nl> + } ; <nl> + } <nl> + <nl> + protected void v4 ( int h ) { } <nl> + <nl> + void v2 ( int h ) { } <nl> + <nl> + private void v3 ( int h ) { } <nl> + <nl> + public void i1 ( int pubpub ) { } <nl> + <nl> + protected void i4 ( int pubprot ) { } <nl> + <nl> + void i2 ( int pubpack ) { } <nl> + <nl> + private void i3 ( int pubpriv ) { } <nl> + <nl> + public interface InterfaceScope { <nl> + void v1 ( int h ) ; <nl> + <nl> + void i1 ( int pubifc ) ; <nl> + } <nl> + } <nl> + <nl> + class PrivateScope { <nl> + <nl> + public void v1 ( int h ) { } <nl> + <nl> + protected void v4 ( int h ) { } <nl> + <nl> + void v2 ( int h ) { } <nl> + <nl> + private void v3 ( int h ) { } <nl> + <nl> + public void i1 ( int packpub ) { } <nl> + <nl> + protected void i4 ( int packprot ) { } <nl> + <nl> + void i2 ( int packpack ) { } <nl> + <nl> + private void i3 ( int packpriv ) { <nl> + try { <nl> + / * Make sure catch var is ignored * / <nl> + } catch ( Exception exc ) { <nl> + } <nl> + } <nl> + <nl> + interface InterfaceScope { <nl> + void v1 ( int h ) ; <nl> + <nl> + void i1 ( int packifc ) ; <nl> + } <nl> + <nl> + interface FuncIfc { <nl> + void a ( int h ) ; <nl> + } <nl> + <nl> + public void l ( ) { <nl> + FuncIfc l1 = ( int lexp ) - > { } ; <nl> + <nl> + FuncIfc l2 = ( limp ) - > { } ; <nl> + } <nl> + } <nl> + <nl> + <nl> diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml <nl> index fce538a . . e1ba125 100644 <nl> - - - a / src / xdocs / config _ naming . xml <nl> + + + b / src / xdocs / config _ naming . xml <nl> @ @ - 1145 , 7 + 1145 , 8 @ @ class MyClass { <nl> < subsection name = " Description " > <nl> < p > <nl> Checks that method and < code > catch < / code > parameter names conform to a format specified <nl> - by the format property . <nl> + by the format property . By using < code > scope < / code > and < code > excludeScope < / code > properties <nl> + it is possible to specify different formats for methods at different visibility levels . <nl> < / p > <nl> < / subsection > <nl> <nl> @ @ - 1179 , 6 + 1180 , 18 @ @ public boolean equals ( Object o ) { <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > < code > false < / code > < / td > <nl> < / tr > <nl> + < tr > <nl> + < td > scope < / td > <nl> + < td > Visibility scope of methods where parameters are checked . < / td > <nl> + < td > < a href = " property _ types . html # scope " > scope < / a > < / td > <nl> + < td > < code > anoninner < / code > < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > excludeScope < / td > <nl> + < td > Visibility scope of methods where parameters are not checked . < / td > <nl> + < td > < a href = " property _ types . html # scope " > scope < / a > < / td > <nl> + < td > < code > null < / code > < / td > <nl> + < / tr > <nl> < / table > <nl> < / subsection > <nl> <nl> @ @ - 1207 , 6 + 1220 , 25 @ @ public boolean equals ( Object o ) { <nl> & lt ; property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> + < p > <nl> + The following configuration checks that the parameters always start with two <nl> + lowercase characters and , in addition , that public method parameters cannot be one character <nl> + long : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; ParameterName & quot ; & gt ; <nl> + & lt ; property name = & quot ; format & quot ; value = & quot ; ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ & quot ; / & gt ; <nl> + & lt ; property name = & quot ; excludeScope & quot ; value = & quot ; public & quot ; / & gt ; <nl> + & lt ; message key = & quot ; name . invalidPattern & quot ; <nl> + value = & quot ; Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + & lt ; module name = & quot ; ParameterName & quot ; & gt ; <nl> + & lt ; property name = & quot ; format & quot ; value = & quot ; ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ & quot ; / & gt ; <nl> + & lt ; property name = & quot ; scope & quot ; value = & quot ; public & quot ; / & gt ; <nl> + & lt ; message key = & quot ; name . invalidPattern & quot ; <nl> + value = & quot ; Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " >

TEST DIFF:
diff - - git a / wercker . yml b / wercker . yml 
 index fe524ba . . 61e91c0 100644 
 - - - a / wercker . yml 
 + + + b / wercker . yml 
 @ @ - 70 , 8 + 70 , 10 @ @ build : 
 mvn clean install - Pno - validations 
 & & CS _ POM _ VERSION = $ ( mvn - q - Dexec . executable = ' echo ' - Dexec . args = ' $ { project . version } ' - - non - recursive org . codehaus . mojo : exec - maven - plugin : 1 . 3 . 1 : exec ) 
 & & echo CS _ version : $ { CS _ POM _ VERSION } 
 - & & svn export https : / / svn . code . sf . net / p / htmlunit / code / trunk / htmlunit htmlunit 
 + & & echo " checkouting project sources . . . " 
 + & & svn - q export https : / / svn . code . sf . net / p / htmlunit / code / trunk / htmlunit htmlunit 
 & & cd htmlunit 
 + & & echo " Running checkstyle validation . . . " 
 & & mvn compile checkstyle : check - Dcheckstyle . version = $ { CS _ POM _ VERSION } 
 
 # NoExceptiontest - Apache Struts ( oraclejdk8 )

NEAREST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java 
 index ac2bffc . . bab33e9 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java 
 @ @ - 63 , 6 + 63 , 11 @ @ public class ParameterNameTest extends BaseCheckTestSupport { 
 " 26 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " bB " , format ) , 
 " 49 : 22 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " llll _ llll " , format ) , 
 " 50 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " bB " , format ) , 
 + " 60 : 23 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , 
 + " 63 : 24 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , 
 + " 69 : 31 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , 
 + " 74 : 41 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , 
 + " 77 : 44 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " p " , format ) , 
 } ; 
 
 final String filePath = getPath ( " InputParameterNameSimple . java " ) ; 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java 
 index cd63896 . . 6f7bf9c 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputParameterNameSimple . java 
 @ @ - 49 , 3 + 49 , 30 @ @ enum MyEnum1 
 	 	 long llll _ llll , / / warn 
 boolean bB ) { } / / warn 
 } 
 + 
 + / * * Test public vs private method parameter naming check . * / 
 + class InputParameterNameSimple 
 + { 
 + / * * Valid : public and more than one char Long * / 
 + public void a ( int par , int parA ) { } 
 + 
 + / * * Invalid : public and one char long * / 
 + public void b ( int p ) { } / / warn 
 + 
 + / * * Invalid : private and one char long . * / 
 + private void c ( int p ) { } / / warn 
 + 
 + / * * Holder for inner anonymous classes * / 
 + private void d ( int param ) { 
 + new Object ( ) { 
 + / * * Invalid : public and one char long . * / 
 + public void e ( int p ) { } / / warn 
 + } ; 
 + } 
 + 
 + / * * Invalid : public constructor and one char long * / 
 + public InputParameterNameSimple ( int p ) { } / / warn 
 + 
 + / * * Invalid : private constructor and one char long * / 
 + private InputParameterNameSimple ( float p ) { } / / warn 
 + } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 index e709dae . . d31c845 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 @ @ - 22 , 8 + 22 , 10 @ @ package com . puppycrawl . tools . checkstyle . checks . naming ; 
 import java . util . Optional ; 
 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . Scope ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; 
 + import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 
 / * * 
 * < p > 
 @ @ - 33 , 9 + 35 , 13 @ @ import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; 
 * and defaults to 
 * < strong > ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ < / strong > . 
 * < / p > 
 - * < p > The check has the following option : < / p > 
 + * < p > The check has the following options : < / p > 
 * < p > < b > ignoreOverridden < / b > - allows to skip methods with Override annotation from 
 * validation . Default values is < b > false < / b > . < / p > 
 + * < p > < b > scope < / b > - visibility scope of methods to be checked . 
 + * Default value is < b > anoninner < / b > . < / p > 
 + * < p > < b > excludeScope < / b > - visibility scope of methods not to be checked . 
 + * Default value is < b > null < / b > . < / p > 
 * < p > 
 * An example of how to configure the check is : 
 * < / p > 
 @ @ - 72 , 6 + 78 , 12 @ @ public class ParameterNameCheck 
 * / 
 private boolean ignoreOverridden ; 
 
 + / * * The visibility scope where methods are checked . * / 
 + private Scope scope = Scope . ANONINNER ; 
 + 
 + / * * The visibility scope where methods shouldn ' t be checked . * / 
 + private Scope excludeScope ; 
 + 
 / * * 
 * Creates a new { @ code ParameterNameCheck } instance . 
 * / 
 @ @ - 88 , 6 + 100 , 22 @ @ public class ParameterNameCheck 
 this . ignoreOverridden = ignoreOverridden ; 
 } 
 
 + / * * 
 + * Set the scope . 
 + * @ param from a { @ code String } value 
 + * / 
 + public void setScope ( String from ) { 
 + scope = Scope . getInstance ( from ) ; 
 + } 
 + 
 + / * * 
 + * Set the excludeScope . 
 + * @ param excludeScope a { @ code String } value 
 + * / 
 + public void setExcludeScope ( String excludeScope ) { 
 + this . excludeScope = Scope . getInstance ( excludeScope ) ; 
 + } 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 return getAcceptableTokens ( ) ; 
 @ @ - 106 , 15 + 134 , 56 @ @ public class ParameterNameCheck 
 @ Override 
 protected boolean mustCheckName ( DetailAST ast ) { 
 boolean checkName = true ; 
 + final boolean isDefault = scope = = Scope . ANONINNER & & excludeScope = = null ; 
 + 
 if ( ignoreOverridden & & isOverriddenMethod ( ast ) 
 | | ast . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ CATCH 
 - | | CheckUtils . isReceiverParameter ( ast ) ) { 
 + | | CheckUtils . isReceiverParameter ( ast ) 
 + | | ! isDefault & & ! matchScope ( calculateScope ( ast ) ) ) { 
 checkName = false ; 
 } 
 return checkName ; 
 } 
 
 / * * 
 + * Returns the scope for the method / constructor at the specified AST . If 
 + * the method is in an interface or annotation block , the scope is assumed 
 + * to be public . 
 + * 
 + * @ param ast the token of the method / constructor 
 + * @ return the scope of the method / constructor 
 + * / 
 + private static Scope calculateScope ( final DetailAST ast ) { 
 + final DetailAST params = ast . getParent ( ) ; 
 + final DetailAST meth = params . getParent ( ) ; 
 + Scope scope = Scope . PRIVATE ; 
 + 
 + if ( meth . getType ( ) = = TokenTypes . METHOD _ DEF 
 + | | meth . getType ( ) = = TokenTypes . CTOR _ DEF ) { 
 + if ( ScopeUtils . isInInterfaceOrAnnotationBlock ( ast ) ) { 
 + scope = Scope . PUBLIC ; 
 + } 
 + else { 
 + final DetailAST mods = meth . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + scope = ScopeUtils . getScopeFromMods ( mods ) ; 
 + } 
 + } 
 + 
 + return scope ; 
 + } 
 + 
 + / * * 
 + * Checks whether a method has the correct scope to be checked . 
 + * @ param nodeScope the scope of the method 
 + * @ return whether the method matches the expected scope 
 + * / 
 + private boolean matchScope ( final Scope nodeScope ) { 
 + return nodeScope . isIn ( scope ) 
 + & & ( excludeScope = = null 
 + | | ! nodeScope . isIn ( excludeScope ) ) ; 
 + } 
 + 
 + / * * 
 * Checks whether a method is annotated with Override annotation . 
 * @ param ast method parameter definition token . 
 * @ return true if a method is annotated with Override annotation . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 index b356014 . . cc0cc7c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . Scope ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ @ - 139 , 6 + 140 , 68 @ @ public class ParameterNameCheckTest 
 } 
 
 @ Test 
 + public void testScope ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ParameterNameCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , " ^ h $ " ) ; 
 + checkConfig . addAttribute ( " scope " , Scope . PUBLIC . getName ( ) ) ; 
 + 
 + final String pattern = " ^ h $ " ; 
 + 
 + final String [ ] expected = { 
 + " 5 : 27 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubconstr " , pattern ) , 
 + " 9 : 31 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " inner " , pattern ) , 
 + " 19 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubpub " , pattern ) , 
 + " 30 : 21 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubifc " , pattern ) , 
 + " 44 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " packpub " , pattern ) , 
 + " 60 : 21 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " packifc " , pattern ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputScope . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testExcludeScope ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ParameterNameCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , " ^ h $ " ) ; 
 + checkConfig . addAttribute ( " excludeScope " , Scope . PROTECTED . getName ( ) ) ; 
 + 
 + final String pattern = " ^ h $ " ; 
 + 
 + final String [ ] expected = { 
 + " 23 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubpack " , pattern ) , 
 + " 25 : 25 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubpriv " , pattern ) , 
 + " 48 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " packpack " , pattern ) , 
 + " 50 : 25 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " packpriv " , pattern ) , 
 + " 68 : 27 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " lexp " , pattern ) , 
 + " 70 : 23 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " limp " , pattern ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputScope . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testScopeExcludeScope ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ParameterNameCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , " ^ h $ " ) ; 
 + checkConfig . addAttribute ( " scope " , Scope . PACKAGE . getName ( ) ) ; 
 + checkConfig . addAttribute ( " excludeScope " , Scope . PUBLIC . getName ( ) ) ; 
 + 
 + final String pattern = " ^ h $ " ; 
 + 
 + final String [ ] expected = { 
 + " 21 : 27 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubprot " , pattern ) , 
 + " 23 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " pubpack " , pattern ) , 
 + " 46 : 27 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " packprot " , pattern ) , 
 + " 48 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " packpack " , pattern ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputScope . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testIsOverriddenNoNullPointerException ( ) 
 throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( ParameterNameCheck . class ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputScope . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputScope . java 
 new file mode 100644 
 index 0000000 . . aae4a4c 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputScope . java 
 @ @ - 0 , 0 + 1 , 74 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + public class InputScope { 
 + 
 + public InputScope ( int pubconstr ) { } 
 + 
 + public void v1 ( int h ) { 
 + new Object ( ) { 
 + public void i ( int inner ) { } 
 + } ; 
 + } 
 + 
 + protected void v4 ( int h ) { } 
 + 
 + void v2 ( int h ) { } 
 + 
 + private void v3 ( int h ) { } 
 + 
 + public void i1 ( int pubpub ) { } 
 + 
 + protected void i4 ( int pubprot ) { } 
 + 
 + void i2 ( int pubpack ) { } 
 + 
 + private void i3 ( int pubpriv ) { } 
 + 
 + public interface InterfaceScope { 
 + void v1 ( int h ) ; 
 + 
 + void i1 ( int pubifc ) ; 
 + } 
 + } 
 + 
 + class PrivateScope { 
 + 
 + public void v1 ( int h ) { } 
 + 
 + protected void v4 ( int h ) { } 
 + 
 + void v2 ( int h ) { } 
 + 
 + private void v3 ( int h ) { } 
 + 
 + public void i1 ( int packpub ) { } 
 + 
 + protected void i4 ( int packprot ) { } 
 + 
 + void i2 ( int packpack ) { } 
 + 
 + private void i3 ( int packpriv ) { 
 + try { 
 + / * Make sure catch var is ignored * / 
 + } catch ( Exception exc ) { 
 + } 
 + } 
 + 
 + interface InterfaceScope { 
 + void v1 ( int h ) ; 
 + 
 + void i1 ( int packifc ) ; 
 + } 
 + 
 + interface FuncIfc { 
 + void a ( int h ) ; 
 + } 
 + 
 + public void l ( ) { 
 + FuncIfc l1 = ( int lexp ) - > { } ; 
 + 
 + FuncIfc l2 = ( limp ) - > { } ; 
 + } 
 + } 
 + 
 + 
 diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml 
 index fce538a . . e1ba125 100644 
 - - - a / src / xdocs / config _ naming . xml 
 + + + b / src / xdocs / config _ naming . xml 
 @ @ - 1145 , 7 + 1145 , 8 @ @ class MyClass { 
 < subsection name = " Description " > 
 < p > 
 Checks that method and < code > catch < / code > parameter names conform to a format specified 
 - by the format property . 
 + by the format property . By using < code > scope < / code > and < code > excludeScope < / code > properties 
 + it is possible to specify different formats for methods at different visibility levels . 
 < / p > 
 < / subsection > 
 
 @ @ - 1179 , 6 + 1180 , 18 @ @ public boolean equals ( Object o ) { 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > < code > false < / code > < / td > 
 < / tr > 
 + < tr > 
 + < td > scope < / td > 
 + < td > Visibility scope of methods where parameters are checked . < / td > 
 + < td > < a href = " property _ types . html # scope " > scope < / a > < / td > 
 + < td > < code > anoninner < / code > < / td > 
 + < / tr > 
 + < tr > 
 + < td > excludeScope < / td > 
 + < td > Visibility scope of methods where parameters are not checked . < / td > 
 + < td > < a href = " property _ types . html # scope " > scope < / a > < / td > 
 + < td > < code > null < / code > < / td > 
 + < / tr > 
 < / table > 
 < / subsection > 
 
 @ @ - 1207 , 6 + 1220 , 25 @ @ public boolean equals ( Object o ) { 
 & lt ; property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 + < p > 
 + The following configuration checks that the parameters always start with two 
 + lowercase characters and , in addition , that public method parameters cannot be one character 
 + long : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; ParameterName & quot ; & gt ; 
 + & lt ; property name = & quot ; format & quot ; value = & quot ; ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ & quot ; / & gt ; 
 + & lt ; property name = & quot ; excludeScope & quot ; value = & quot ; public & quot ; / & gt ; 
 + & lt ; message key = & quot ; name . invalidPattern & quot ; 
 + value = & quot ; Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + & lt ; module name = & quot ; ParameterName & quot ; & gt ; 
 + & lt ; property name = & quot ; format & quot ; value = & quot ; ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ & quot ; / & gt ; 
 + & lt ; property name = & quot ; scope & quot ; value = & quot ; public & quot ; / & gt ; 
 + & lt ; message key = & quot ; name . invalidPattern & quot ; 
 + value = & quot ; Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Example of Usage " >
