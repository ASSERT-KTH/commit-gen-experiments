BLEU SCORE: 0.024455939372403628

TEST MSG: Issue # 2290 : Add ' ignoreOverridden ' option to skip methods with @ Override annotation
GENERATED MSG: LocalVariableNameUpdate # 192 . Allowed one char variables in

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> index 862bd54 . . 9152f70 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> @ @ - 30 , 6 + 30 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * and defaults to <nl> * < strong > ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ < / strong > . <nl> * < / p > <nl> + * < p > The check has the following option : < / p > <nl> + * < p > < b > ignoreOverridden < / b > - allows to skip methods with Override annotation from <nl> + * validation . Default values is < b > false < / b > . < / p > <nl> * < p > <nl> * An example of how to configure the check is : <nl> * < / p > <nl> @ @ - 45 , 11 + 48 , 27 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * & lt ; property name = " format " value = " ^ ^ [ a - z ] ( _ ? [ a - zA - Z0 - 9 ] + ) * $ " / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> + * < p > <nl> + * An example of how to configure the check to skip methods with Override annotation from <nl> + * validation : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = " ParameterName " & gt ; <nl> + * & lt ; property name = " ignoreOverridden " value = " true " / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> * <nl> * @ author Oliver Burn <nl> + * @ author Andrei Selkin <nl> * / <nl> public class ParameterNameCheck <nl> extends AbstractNameCheck { <nl> + <nl> + / * * <nl> + * Allows to skip methods with Override annotation from validation . <nl> + * / <nl> + private boolean ignoreOverridden ; <nl> + <nl> / * * <nl> * Creates a new { @ code ParameterNameCheck } instance . <nl> * / <nl> @ @ - 57 , 6 + 76 , 15 @ @ public class ParameterNameCheck <nl> super ( " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) ; <nl> } <nl> <nl> + / * * <nl> + * Sets whether to skip methods with Override annotation from validation . <nl> + * <nl> + * @ param ignoreOverridden Flag for skipping methods with Override annotation . <nl> + * / <nl> + public void setIgnoreOverridden ( boolean ignoreOverridden ) { <nl> + this . ignoreOverridden = ignoreOverridden ; <nl> + } <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> return getAcceptableTokens ( ) ; <nl> @ @ - 74 , 6 + 102 , 29 @ @ public class ParameterNameCheck <nl> <nl> @ Override <nl> protected boolean mustCheckName ( DetailAST ast ) { <nl> - return ast . getParent ( ) . getType ( ) ! = TokenTypes . LITERAL _ CATCH ; <nl> + boolean checkName = true ; <nl> + if ( ignoreOverridden & & isOverriddenMethod ( ast ) <nl> + | | ast . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ CATCH ) { <nl> + checkName = false ; <nl> + } <nl> + return checkName ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks whether a method is annotated with Override annotation . <nl> + * @ param ast method parameter definition token . <nl> + * @ return true if a method is annotated with Override annotation . <nl> + * / <nl> + private static boolean isOverriddenMethod ( DetailAST ast ) { <nl> + boolean overridden = false ; <nl> + final DetailAST parent = ast . getParent ( ) . getParent ( ) ; <nl> + final DetailAST annotation = parent . getFirstChild ( ) . getFirstChild ( ) ; <nl> + if ( annotation . getType ( ) = = TokenTypes . ANNOTATION ) { <nl> + final DetailAST overrideToken = annotation . findFirstToken ( TokenTypes . IDENT ) ; <nl> + if ( " Override " . equals ( overrideToken . getText ( ) ) ) { <nl> + overridden = true ; <nl> + } <nl> + } <nl> + return overridden ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> index c0bbc38 . . e595e49 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> @ @ - 92 , 4 + 92 , 39 @ @ public class ParameterNameCheckTest <nl> } ; <nl> assertArrayEquals ( expected , actual ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testSkipMethodsWithOverrideAnnotationTrue ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ParameterNameCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , " ^ h $ " ) ; <nl> + checkConfig . addAttribute ( " ignoreOverridden " , " true " ) ; <nl> + <nl> + final String pattern = " ^ h $ " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 11 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " object " , pattern ) , <nl> + " 15 : 30 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " aaaa " , pattern ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputOverrideAnnotation . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSkipMethodsWithOverrideAnnotationFalse ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ParameterNameCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , " ^ h $ " ) ; <nl> + checkConfig . addAttribute ( " ignoreOverridden " , " false " ) ; <nl> + <nl> + final String pattern = " ^ h $ " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 6 : 34 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " o " , pattern ) , <nl> + " 11 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " object " , pattern ) , <nl> + " 15 : 30 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " aaaa " , pattern ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputOverrideAnnotation . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotation . java <nl> new file mode 100644 <nl> index 0000000 . . 82d9950 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotation . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + public class InputOverrideAnnotation { <nl> + <nl> + @ Override <nl> + public boolean equals ( Object o ) { <nl> + return super . equals ( o ) ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " " ) <nl> + public void foo ( Object object ) { <nl> + <nl> + } <nl> + <nl> + public void foo2 ( Integer aaaa ) { } <nl> + } <nl> diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml <nl> index 9538fa3 . . 25673e5 100644 <nl> - - - a / src / xdocs / config _ naming . xml <nl> + + + b / src / xdocs / config _ naming . xml <nl> @ @ - 907 , 6 + 907 , 22 @ @ class MyClass { <nl> < td > < a href = " property _ types . html # regexp " > regular expression < / a > < / td > <nl> < td > < code > ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ < / code > < / td > <nl> < / tr > <nl> + < tr > <nl> + < td > ignoreOverridden < / td > <nl> + < td > <nl> + Allows to skip methods with Override annotation from validation . For example , the <nl> + following method ' s parameter will be skipped from validation , if <nl> + ignoreOverridden is true : <nl> + < pre > <nl> + @ Override <nl> + public boolean equals ( Object o ) { <nl> + return super . equals ( o ) ; <nl> + } <nl> + < / pre > <nl> + < / td > <nl> + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> + < td > < code > false < / code > < / td > <nl> + < / tr > <nl> < / table > <nl> < / subsection > <nl> <nl> @ @ - 917 , 6 + 933 , 15 @ @ class MyClass { <nl> < source > <nl> & lt ; module name = & quot ; ParameterName & quot ; / & gt ; <nl> < / source > <nl> + < p > <nl> + An example of how to configure the check to skip methods with Override annotation from <nl> + validation : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = " ParameterName " & gt ; <nl> + & lt ; property name = " ignoreOverridden " value = " true " / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " >
NEAREST DIFF (one line): diff - - git a / README . md b / README . md <nl> index 344a605 . . b9f986a 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> - " ! https : / / secure . travis - ci . org / checkstyle / checkstyle . png ! " : http : / / travis - ci . org / checkstyle / checkstyle " ! https : / / d2weczhvl823v0 . cloudfront . net / romani / checkstyle / trend . png ! " : https : / / bitdeli . com / free <nl> + [ ! [ ] [ travis img ] ] [ travis ] <nl> + [ ! [ ] [ trend img ] ] [ trend ] <nl> <nl> CHECKSTYLE <nl> = = = = = = = = = = <nl> @ @ - 35 , 7 + 36 , 7 @ @ directory . <nl> <nl> Continuous integration <nl> = = = = = = = = = = = = = = = = = = = = = = <nl> - Travis : " ! https : / / secure . travis - ci . org / checkstyle / checkstyle . png ! " : http : / / travis - ci . org / checkstyle / checkstyle <nl> + Travis : [ ! [ ] [ travis img ] ] [ travis ] <nl> <nl> <nl> Feedback <nl> @ @ - 46 , 6 + 47 , 11 @ @ Please send any feedback to https : / / groups . google . com / forum / ? hl = en # ! forum / checks <nl> Bugs should be reported to the checkstyle bugtracker at <nl> https : / / github . com / checkstyle / checkstyle / issues <nl> <nl> + [ travis ] : http : / / travis - ci . org / checkstyle / checkstyle <nl> + [ travis img ] : https : / / secure . travis - ci . org / checkstyle / checkstyle . png <nl> + <nl> + [ trend img ] : https : / / d2weczhvl823v0 . cloudfront . net / romani / checkstyle / trend . png <nl> + [ trend ] : https : / / bitdeli . com / free <nl> <nl> Thanks for trying out checkstyle ! <nl>

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 index 862bd54 . . 9152f70 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 @ @ - 30 , 6 + 30 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * and defaults to 
 * < strong > ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ < / strong > . 
 * < / p > 
 + * < p > The check has the following option : < / p > 
 + * < p > < b > ignoreOverridden < / b > - allows to skip methods with Override annotation from 
 + * validation . Default values is < b > false < / b > . < / p > 
 * < p > 
 * An example of how to configure the check is : 
 * < / p > 
 @ @ - 45 , 11 + 48 , 27 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * & lt ; property name = " format " value = " ^ ^ [ a - z ] ( _ ? [ a - zA - Z0 - 9 ] + ) * $ " / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 + * < p > 
 + * An example of how to configure the check to skip methods with Override annotation from 
 + * validation : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = " ParameterName " & gt ; 
 + * & lt ; property name = " ignoreOverridden " value = " true " / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 * 
 * @ author Oliver Burn 
 + * @ author Andrei Selkin 
 * / 
 public class ParameterNameCheck 
 extends AbstractNameCheck { 
 + 
 + / * * 
 + * Allows to skip methods with Override annotation from validation . 
 + * / 
 + private boolean ignoreOverridden ; 
 + 
 / * * 
 * Creates a new { @ code ParameterNameCheck } instance . 
 * / 
 @ @ - 57 , 6 + 76 , 15 @ @ public class ParameterNameCheck 
 super ( " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) ; 
 } 
 
 + / * * 
 + * Sets whether to skip methods with Override annotation from validation . 
 + * 
 + * @ param ignoreOverridden Flag for skipping methods with Override annotation . 
 + * / 
 + public void setIgnoreOverridden ( boolean ignoreOverridden ) { 
 + this . ignoreOverridden = ignoreOverridden ; 
 + } 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 return getAcceptableTokens ( ) ; 
 @ @ - 74 , 6 + 102 , 29 @ @ public class ParameterNameCheck 
 
 @ Override 
 protected boolean mustCheckName ( DetailAST ast ) { 
 - return ast . getParent ( ) . getType ( ) ! = TokenTypes . LITERAL _ CATCH ; 
 + boolean checkName = true ; 
 + if ( ignoreOverridden & & isOverriddenMethod ( ast ) 
 + | | ast . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ CATCH ) { 
 + checkName = false ; 
 + } 
 + return checkName ; 
 + } 
 + 
 + / * * 
 + * Checks whether a method is annotated with Override annotation . 
 + * @ param ast method parameter definition token . 
 + * @ return true if a method is annotated with Override annotation . 
 + * / 
 + private static boolean isOverriddenMethod ( DetailAST ast ) { 
 + boolean overridden = false ; 
 + final DetailAST parent = ast . getParent ( ) . getParent ( ) ; 
 + final DetailAST annotation = parent . getFirstChild ( ) . getFirstChild ( ) ; 
 + if ( annotation . getType ( ) = = TokenTypes . ANNOTATION ) { 
 + final DetailAST overrideToken = annotation . findFirstToken ( TokenTypes . IDENT ) ; 
 + if ( " Override " . equals ( overrideToken . getText ( ) ) ) { 
 + overridden = true ; 
 + } 
 + } 
 + return overridden ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 index c0bbc38 . . e595e49 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 @ @ - 92 , 4 + 92 , 39 @ @ public class ParameterNameCheckTest 
 } ; 
 assertArrayEquals ( expected , actual ) ; 
 } 
 + 
 + @ Test 
 + public void testSkipMethodsWithOverrideAnnotationTrue ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ParameterNameCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , " ^ h $ " ) ; 
 + checkConfig . addAttribute ( " ignoreOverridden " , " true " ) ; 
 + 
 + final String pattern = " ^ h $ " ; 
 + 
 + final String [ ] expected = { 
 + " 11 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " object " , pattern ) , 
 + " 15 : 30 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " aaaa " , pattern ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputOverrideAnnotation . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testSkipMethodsWithOverrideAnnotationFalse ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ParameterNameCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , " ^ h $ " ) ; 
 + checkConfig . addAttribute ( " ignoreOverridden " , " false " ) ; 
 + 
 + final String pattern = " ^ h $ " ; 
 + 
 + final String [ ] expected = { 
 + " 6 : 34 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " o " , pattern ) , 
 + " 11 : 28 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " object " , pattern ) , 
 + " 15 : 30 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " aaaa " , pattern ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputOverrideAnnotation . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotation . java 
 new file mode 100644 
 index 0000000 . . 82d9950 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotation . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + public class InputOverrideAnnotation { 
 + 
 + @ Override 
 + public boolean equals ( Object o ) { 
 + return super . equals ( o ) ; 
 + } 
 + 
 + @ SuppressWarnings ( " " ) 
 + public void foo ( Object object ) { 
 + 
 + } 
 + 
 + public void foo2 ( Integer aaaa ) { } 
 + } 
 diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml 
 index 9538fa3 . . 25673e5 100644 
 - - - a / src / xdocs / config _ naming . xml 
 + + + b / src / xdocs / config _ naming . xml 
 @ @ - 907 , 6 + 907 , 22 @ @ class MyClass { 
 < td > < a href = " property _ types . html # regexp " > regular expression < / a > < / td > 
 < td > < code > ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ < / code > < / td > 
 < / tr > 
 + < tr > 
 + < td > ignoreOverridden < / td > 
 + < td > 
 + Allows to skip methods with Override annotation from validation . For example , the 
 + following method ' s parameter will be skipped from validation , if 
 + ignoreOverridden is true : 
 + < pre > 
 + @ Override 
 + public boolean equals ( Object o ) { 
 + return super . equals ( o ) ; 
 + } 
 + < / pre > 
 + < / td > 
 + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 + < td > < code > false < / code > < / td > 
 + < / tr > 
 < / table > 
 < / subsection > 
 
 @ @ - 917 , 6 + 933 , 15 @ @ class MyClass { 
 < source > 
 & lt ; module name = & quot ; ParameterName & quot ; / & gt ; 
 < / source > 
 + < p > 
 + An example of how to configure the check to skip methods with Override annotation from 
 + validation : 
 + < / p > 
 + < source > 
 + & lt ; module name = " ParameterName " & gt ; 
 + & lt ; property name = " ignoreOverridden " value = " true " / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Example of Usage " >

NEAREST DIFF:
diff - - git a / README . md b / README . md 
 index 344a605 . . b9f986a 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 - " ! https : / / secure . travis - ci . org / checkstyle / checkstyle . png ! " : http : / / travis - ci . org / checkstyle / checkstyle " ! https : / / d2weczhvl823v0 . cloudfront . net / romani / checkstyle / trend . png ! " : https : / / bitdeli . com / free 
 + [ ! [ ] [ travis img ] ] [ travis ] 
 + [ ! [ ] [ trend img ] ] [ trend ] 
 
 CHECKSTYLE 
 = = = = = = = = = = 
 @ @ - 35 , 7 + 36 , 7 @ @ directory . 
 
 Continuous integration 
 = = = = = = = = = = = = = = = = = = = = = = 
 - Travis : " ! https : / / secure . travis - ci . org / checkstyle / checkstyle . png ! " : http : / / travis - ci . org / checkstyle / checkstyle 
 + Travis : [ ! [ ] [ travis img ] ] [ travis ] 
 
 
 Feedback 
 @ @ - 46 , 6 + 47 , 11 @ @ Please send any feedback to https : / / groups . google . com / forum / ? hl = en # ! forum / checks 
 Bugs should be reported to the checkstyle bugtracker at 
 https : / / github . com / checkstyle / checkstyle / issues 
 
 + [ travis ] : http : / / travis - ci . org / checkstyle / checkstyle 
 + [ travis img ] : https : / / secure . travis - ci . org / checkstyle / checkstyle . png 
 + 
 + [ trend img ] : https : / / d2weczhvl823v0 . cloudfront . net / romani / checkstyle / trend . png 
 + [ trend ] : https : / / bitdeli . com / free 
 
 Thanks for trying out checkstyle ! 

