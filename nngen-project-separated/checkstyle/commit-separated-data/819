BLEU SCORE: 0.07807646168419155

TEST MSG: Issue # 56 : fix NPathComplexityCheck
GENERATED MSG: Issue # 2161 : unify test input locations for metrics package

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 35f715b . . ad8ed39 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 29 , 6 + 29 , 7 @ @ <nl> <nl> < ! - - Tone down the checking for test code - - > <nl> < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XdocsPagesTest \ . java " / > <nl> + < suppress checks = " NPathComplexity " files = " [ \ \ / ] XdocsPagesTest \ . java " / > <nl> < suppress checks = " IllegalCatch " files = " [ \ \ / ] internal [ \ \ / ] \ w + Util \ . java " / > <nl> < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > <nl> < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java <nl> index 57f8c60 . . b202ecd 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java <nl> @ @ - 50 , 20 + 50 , 36 @ @ public final class NPathComplexityCheck extends AbstractCheck { <nl> private static final int DEFAULT _ MAX = 200 ; <nl> <nl> / * * The initial current value . * / <nl> - private static final BigInteger INITIAL _ VALUE = BigInteger . ONE ; <nl> + private static final BigInteger INITIAL _ VALUE = BigInteger . ZERO ; <nl> <nl> - / * * Stack of values - all but the current value . * / <nl> - private final Deque < BigInteger > valueStack = new ArrayDeque < > ( ) ; <nl> + / * * <nl> + * Stack of NP values for ranges . <nl> + * / <nl> + private final Deque < BigInteger > rangeValues = new ArrayDeque < > ( ) ; <nl> + <nl> + / * * Stack of NP values for expressions . * / <nl> + private final Deque < Integer > expressionValues = new ArrayDeque < > ( ) ; <nl> + <nl> + / * * Stack of belongs to range values for question operator . * / <nl> + private final Deque < Boolean > isAfterValues = new ArrayDeque < > ( ) ; <nl> + <nl> + / * * <nl> + * Range of the last processed expression . Used for checking that ternary operation <nl> + * which is a part of expression won ' t be processed for second time . <nl> + * / <nl> + private final TokenEnd processingTokenEnd = new TokenEnd ( ) ; <nl> <nl> - / * * The current value . * / <nl> - private BigInteger currentValue = INITIAL _ VALUE ; <nl> + / * * NP value for current range . * / <nl> + private BigInteger currentRangeValue = INITIAL _ VALUE ; <nl> <nl> / * * Threshold to report error for . * / <nl> private int max = DEFAULT _ MAX ; <nl> <nl> + / * * True , when branch is visited , but not leaved . * / <nl> + private boolean branchVisited ; <nl> + <nl> / * * <nl> * Set the maximum threshold allowed . <nl> - * <nl> * @ param max the maximum threshold <nl> * / <nl> public void setMax ( int max ) { <nl> @ @ - 88 , 10 + 104 , 12 @ @ public final class NPathComplexityCheck extends AbstractCheck { <nl> TokenTypes . LITERAL _ IF , <nl> TokenTypes . LITERAL _ ELSE , <nl> TokenTypes . LITERAL _ SWITCH , <nl> - TokenTypes . LITERAL _ CASE , <nl> + TokenTypes . CASE _ GROUP , <nl> TokenTypes . LITERAL _ TRY , <nl> TokenTypes . LITERAL _ CATCH , <nl> TokenTypes . QUESTION , <nl> + TokenTypes . LITERAL _ RETURN , <nl> + TokenTypes . LITERAL _ DEFAULT , <nl> } ; <nl> } <nl> <nl> @ @ - 101 , 27 + 119 , 53 @ @ public final class NPathComplexityCheck extends AbstractCheck { <nl> } <nl> <nl> @ Override <nl> + public void beginTree ( DetailAST rootAST ) { <nl> + rangeValues . clear ( ) ; <nl> + expressionValues . clear ( ) ; <nl> + isAfterValues . clear ( ) ; <nl> + processingTokenEnd . reset ( ) ; <nl> + currentRangeValue = INITIAL _ VALUE ; <nl> + branchVisited = false ; <nl> + } <nl> + <nl> + @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> switch ( ast . getType ( ) ) { <nl> + case TokenTypes . LITERAL _ IF : <nl> + case TokenTypes . LITERAL _ SWITCH : <nl> case TokenTypes . LITERAL _ WHILE : <nl> case TokenTypes . LITERAL _ DO : <nl> case TokenTypes . LITERAL _ FOR : <nl> - case TokenTypes . LITERAL _ IF : <nl> + visitConditional ( ast , 1 ) ; <nl> + break ; <nl> case TokenTypes . QUESTION : <nl> - case TokenTypes . LITERAL _ TRY : <nl> - case TokenTypes . LITERAL _ SWITCH : <nl> - visitMultiplyingConditional ( ) ; <nl> + visitUnitaryOperator ( ast , 2 ) ; <nl> + break ; <nl> + case TokenTypes . LITERAL _ RETURN : <nl> + visitUnitaryOperator ( ast , 0 ) ; <nl> + break ; <nl> + case TokenTypes . CASE _ GROUP : <nl> + final int caseNumber = countCaseTokens ( ast ) ; <nl> + branchVisited = true ; <nl> + pushValue ( caseNumber ) ; <nl> break ; <nl> case TokenTypes . LITERAL _ ELSE : <nl> + branchVisited = true ; <nl> + if ( currentRangeValue . equals ( BigInteger . ZERO ) ) { <nl> + currentRangeValue = BigInteger . ONE ; <nl> + } <nl> + pushValue ( 0 ) ; <nl> + break ; <nl> + case TokenTypes . LITERAL _ TRY : <nl> case TokenTypes . LITERAL _ CATCH : <nl> - case TokenTypes . LITERAL _ CASE : <nl> - visitAddingConditional ( ) ; <nl> + case TokenTypes . LITERAL _ DEFAULT : <nl> + pushValue ( 1 ) ; <nl> break ; <nl> case TokenTypes . CTOR _ DEF : <nl> case TokenTypes . METHOD _ DEF : <nl> case TokenTypes . INSTANCE _ INIT : <nl> case TokenTypes . STATIC _ INIT : <nl> - visitMethodDef ( ) ; <nl> + pushValue ( 0 ) ; <nl> break ; <nl> default : <nl> break ; <nl> @ @ - 135 , 16 + 179 , 27 @ @ public final class NPathComplexityCheck extends AbstractCheck { <nl> case TokenTypes . LITERAL _ DO : <nl> case TokenTypes . LITERAL _ FOR : <nl> case TokenTypes . LITERAL _ IF : <nl> - case TokenTypes . QUESTION : <nl> - case TokenTypes . LITERAL _ TRY : <nl> case TokenTypes . LITERAL _ SWITCH : <nl> + leaveConditional ( ) ; <nl> + break ; <nl> + case TokenTypes . LITERAL _ TRY : <nl> leaveMultiplyingConditional ( ) ; <nl> break ; <nl> - case TokenTypes . LITERAL _ ELSE : <nl> + case TokenTypes . LITERAL _ RETURN : <nl> + case TokenTypes . QUESTION : <nl> + leaveUnitaryOperator ( ) ; <nl> + break ; <nl> case TokenTypes . LITERAL _ CATCH : <nl> - case TokenTypes . LITERAL _ CASE : <nl> leaveAddingConditional ( ) ; <nl> break ; <nl> + case TokenTypes . LITERAL _ DEFAULT : <nl> + leaveBranch ( ) ; <nl> + break ; <nl> + case TokenTypes . LITERAL _ ELSE : <nl> + case TokenTypes . CASE _ GROUP : <nl> + leaveBranch ( ) ; <nl> + branchVisited = false ; <nl> + break ; <nl> case TokenTypes . CTOR _ DEF : <nl> case TokenTypes . METHOD _ DEF : <nl> case TokenTypes . INSTANCE _ INIT : <nl> @ @ - 156 , 56 + 211 , 272 @ @ public final class NPathComplexityCheck extends AbstractCheck { <nl> } <nl> } <nl> <nl> - / * * Visits else , catch or case . * / <nl> - private void visitAddingConditional ( ) { <nl> - pushValue ( ) ; <nl> + / * * <nl> + * Visits if , while , do - while , for and switch tokens - all of them have expression in <nl> + * parentheses which is used for calculation . <nl> + * @ param ast visited token . <nl> + * @ param basicBranchingFactor default number of branches added . <nl> + * / <nl> + private void visitConditional ( DetailAST ast , int basicBranchingFactor ) { <nl> + int expressionValue = basicBranchingFactor ; <nl> + DetailAST bracketed ; <nl> + for ( bracketed = ast . findFirstToken ( TokenTypes . LPAREN ) . getNextSibling ( ) ; <nl> + bracketed . getType ( ) ! = TokenTypes . RPAREN ; <nl> + bracketed = bracketed . getNextSibling ( ) ) { <nl> + expressionValue + = countConditionalOperators ( bracketed ) ; <nl> + } <nl> + processingTokenEnd . setToken ( bracketed ) ; <nl> + pushValue ( expressionValue ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Visits ternary operator ( ? : ) and return tokens . They differ from those processed by <nl> + * visitConditional method in that their expression isn ' t bracketed . <nl> + * @ param ast visited token . <nl> + * @ param basicBranchingFactor number of branches inherently added by this token . <nl> + * / <nl> + private void visitUnitaryOperator ( DetailAST ast , int basicBranchingFactor ) { <nl> + final boolean isAfter = processingTokenEnd . isAfter ( ast ) ; <nl> + isAfterValues . push ( isAfter ) ; <nl> + if ( ! isAfter ) { <nl> + processingTokenEnd . setToken ( getLastToken ( ast ) ) ; <nl> + final int expressionValue = basicBranchingFactor + countConditionalOperators ( ast ) ; <nl> + pushValue ( expressionValue ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Leaves ternary operator ( ? : ) and return tokens . <nl> + * / <nl> + private void leaveUnitaryOperator ( ) { <nl> + if ( ! isAfterValues . pop ( ) ) { <nl> + final Values valuePair = popValue ( ) ; <nl> + BigInteger basicRangeValue = valuePair . getRangeValue ( ) ; <nl> + BigInteger expressionValue = valuePair . getExpressionValue ( ) ; <nl> + if ( expressionValue . equals ( BigInteger . ZERO ) ) { <nl> + expressionValue = BigInteger . ONE ; <nl> + } <nl> + if ( basicRangeValue . equals ( BigInteger . ZERO ) ) { <nl> + basicRangeValue = BigInteger . ONE ; <nl> + } <nl> + currentRangeValue = currentRangeValue . add ( expressionValue ) . multiply ( basicRangeValue ) ; <nl> + } <nl> + } <nl> + <nl> + / * * Leaves while , do , for , if , ternary ( ? : : ) , return or switch . * / <nl> + private void leaveConditional ( ) { <nl> + final Values valuePair = popValue ( ) ; <nl> + final BigInteger expressionValue = valuePair . getExpressionValue ( ) ; <nl> + BigInteger basicRangeValue = valuePair . getRangeValue ( ) ; <nl> + if ( currentRangeValue . equals ( BigInteger . ZERO ) ) { <nl> + currentRangeValue = BigInteger . ONE ; <nl> + } <nl> + if ( basicRangeValue . equals ( BigInteger . ZERO ) ) { <nl> + basicRangeValue = BigInteger . ONE ; <nl> + } <nl> + currentRangeValue = currentRangeValue . add ( expressionValue ) . multiply ( basicRangeValue ) ; <nl> + } <nl> + <nl> + / * * Leaves else , default or case group tokens . * / <nl> + private void leaveBranch ( ) { <nl> + final Values valuePair = popValue ( ) ; <nl> + final BigInteger basicRangeValue = valuePair . getRangeValue ( ) ; <nl> + final BigInteger expressionValue = valuePair . getExpressionValue ( ) ; <nl> + if ( branchVisited & & currentRangeValue . equals ( BigInteger . ZERO ) ) { <nl> + currentRangeValue = BigInteger . ONE ; <nl> + } <nl> + currentRangeValue = currentRangeValue . subtract ( BigInteger . ONE ) <nl> + . add ( basicRangeValue ) <nl> + . add ( expressionValue ) ; <nl> } <nl> <nl> - / * * Leaves else , catch or case . * / <nl> + / * * <nl> + * Process the end of a method definition . <nl> + * @ param ast the token type representing the method definition <nl> + * / <nl> + private void leaveMethodDef ( DetailAST ast ) { <nl> + final BigInteger bigIntegerMax = BigInteger . valueOf ( max ) ; <nl> + if ( currentRangeValue . compareTo ( bigIntegerMax ) > 0 ) { <nl> + log ( ast , MSG _ KEY , currentRangeValue , bigIntegerMax ) ; <nl> + } <nl> + popValue ( ) ; <nl> + currentRangeValue = INITIAL _ VALUE ; <nl> + } <nl> + <nl> + / * * Leaves catch . * / <nl> private void leaveAddingConditional ( ) { <nl> - currentValue = currentValue . subtract ( BigInteger . ONE ) . add ( popValue ( ) ) ; <nl> + currentRangeValue = currentRangeValue . add ( popValue ( ) . getRangeValue ( ) . add ( BigInteger . ONE ) ) ; <nl> } <nl> <nl> - / * * Visits while , do , for , if , try , ? ( in ? : : ) or switch . * / <nl> - private void visitMultiplyingConditional ( ) { <nl> - pushValue ( ) ; <nl> + / * * <nl> + * Pushes the current range value on the range value stack . Pushes this token expression value <nl> + * on the expression value stack . <nl> + * @ param expressionValue value of expression calculated for current token . <nl> + * / <nl> + private void pushValue ( Integer expressionValue ) { <nl> + rangeValues . push ( currentRangeValue ) ; <nl> + expressionValues . push ( expressionValue ) ; <nl> + currentRangeValue = INITIAL _ VALUE ; <nl> } <nl> <nl> - / * * Leaves while , do , for , if , try , ? ( in ? : : ) or switch . * / <nl> + / * * <nl> + * Pops values from both stack of expression values and stack of range values . <nl> + * @ return pair of head values from both of the stacks . <nl> + * / <nl> + private Values popValue ( ) { <nl> + final int expressionValue = expressionValues . pop ( ) ; <nl> + return new Values ( rangeValues . pop ( ) , BigInteger . valueOf ( expressionValue ) ) ; <nl> + } <nl> + <nl> + / * * Leaves try . * / <nl> private void leaveMultiplyingConditional ( ) { <nl> - currentValue = currentValue . add ( BigInteger . ONE ) . multiply ( popValue ( ) ) ; <nl> + currentRangeValue = currentRangeValue . add ( BigInteger . ONE ) <nl> + . multiply ( popValue ( ) . getRangeValue ( ) . add ( BigInteger . ONE ) ) ; <nl> } <nl> <nl> - / * * Push the current value on the stack . * / <nl> - private void pushValue ( ) { <nl> - valueStack . push ( currentValue ) ; <nl> - currentValue = INITIAL _ VALUE ; <nl> + / * * <nl> + * Calculates number of conditional operators , including inline ternary operatior , for a token . <nl> + * @ param ast inspected token . <nl> + * @ return number of conditional operators . <nl> + * @ see < a href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 15 . html # jls - 15 . 23 " > <nl> + * Java Language Specification , & sect ; 15 . 23 < / a > <nl> + * @ see < a href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 15 . html # jls - 15 . 24 " > <nl> + * Java Language Specification , & sect ; 15 . 24 < / a > <nl> + * @ see < a href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 15 . html # jls - 15 . 25 " > <nl> + * Java Language Specification , & sect ; 15 . 25 < / a > <nl> + * / <nl> + private static int countConditionalOperators ( DetailAST ast ) { <nl> + int number = 0 ; <nl> + for ( DetailAST child = ast . getFirstChild ( ) ; child ! = null ; <nl> + child = child . getNextSibling ( ) ) { <nl> + final int type = child . getType ( ) ; <nl> + if ( type = = TokenTypes . LOR | | type = = TokenTypes . LAND ) { <nl> + number + + ; <nl> + } <nl> + else if ( type = = TokenTypes . QUESTION ) { <nl> + number + = 2 ; <nl> + } <nl> + number + = countConditionalOperators ( child ) ; <nl> + } <nl> + return number ; <nl> } <nl> <nl> / * * <nl> - * Pops a value off the stack and makes it the current value . <nl> - * @ return pop a value off the stack and make it the current value <nl> + * Finds a leaf , which is the most distant from the root . <nl> + * @ param ast the root of tree . <nl> + * @ return the leaf . <nl> * / <nl> - private BigInteger popValue ( ) { <nl> - currentValue = valueStack . pop ( ) ; <nl> - return currentValue ; <nl> + private static DetailAST getLastToken ( DetailAST ast ) { <nl> + final DetailAST lastChild = ast . getLastChild ( ) ; <nl> + final DetailAST result ; <nl> + if ( lastChild . getFirstChild ( ) = = null ) { <nl> + result = lastChild ; <nl> + } <nl> + else { <nl> + result = getLastToken ( lastChild ) ; <nl> + } <nl> + return result ; <nl> } <nl> <nl> - / * * Process the start of the method definition . * / <nl> - private void visitMethodDef ( ) { <nl> - pushValue ( ) ; <nl> + / * * <nl> + * Counts number of case tokens subject to a case group token . <nl> + * @ param ast case group token . <nl> + * @ return number of case tokens . <nl> + * / <nl> + private static int countCaseTokens ( DetailAST ast ) { <nl> + int counter = 0 ; <nl> + for ( DetailAST iterator = ast . getFirstChild ( ) ; iterator ! = null ; <nl> + iterator = iterator . getNextSibling ( ) ) { <nl> + if ( iterator . getType ( ) = = TokenTypes . LITERAL _ CASE ) { <nl> + counter + + ; <nl> + } <nl> + } <nl> + return counter ; <nl> } <nl> <nl> / * * <nl> - * Process the end of a method definition . <nl> - * <nl> - * @ param ast the token representing the method definition <nl> + * Coordinates of token end . Used to prevent inline ternary <nl> + * operator from being processed twice . <nl> * / <nl> - private void leaveMethodDef ( DetailAST ast ) { <nl> - final BigInteger bigIntegerMax = BigInteger . valueOf ( max ) ; <nl> - if ( currentValue . compareTo ( bigIntegerMax ) > 0 ) { <nl> - log ( ast , MSG _ KEY , currentValue , bigIntegerMax ) ; <nl> + private static class TokenEnd { <nl> + / * * End line of token . * / <nl> + private int endLineNo ; <nl> + <nl> + / * * End column of token . * / <nl> + private int endColumnNo ; <nl> + <nl> + / * * <nl> + * Sets end coordinates from given token . <nl> + * @ param endToken token . <nl> + * / <nl> + public void setToken ( DetailAST endToken ) { <nl> + if ( ! isAfter ( endToken ) ) { <nl> + endLineNo = endToken . getLineNo ( ) ; <nl> + endColumnNo = endToken . getColumnNo ( ) ; <nl> + } <nl> } <nl> - popValue ( ) ; <nl> + <nl> + / * * Sets end token coordinates to the start of the file . * / <nl> + public void reset ( ) { <nl> + endLineNo = 0 ; <nl> + endColumnNo = 0 ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if saved coordinates located after given token . <nl> + * @ param ast given token . <nl> + * @ return true , if saved coordinates located after given token . <nl> + * / <nl> + public boolean isAfter ( DetailAST ast ) { <nl> + final int lineNo = ast . getLineNo ( ) ; <nl> + final int columnNo = ast . getColumnNo ( ) ; <nl> + boolean isAfter = true ; <nl> + if ( lineNo > endLineNo <nl> + | | lineNo = = endLineNo <nl> + & & columnNo > endColumnNo ) { <nl> + isAfter = false ; <nl> + } <nl> + return isAfter ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Class that store range value and expression value . <nl> + * / <nl> + private static class Values { <nl> + <nl> + / * * NP value for range . * / <nl> + private final BigInteger rangeValue ; <nl> + <nl> + / * * NP value for expression . * / <nl> + private final BigInteger expressionValue ; <nl> + <nl> + / * * <nl> + * Constructor that assigns all of class fields . <nl> + * @ param valueOfRange NP value for range <nl> + * @ param valueOfExpression NP value for expression <nl> + * / <nl> + Values ( BigInteger valueOfRange , BigInteger valueOfExpression ) { <nl> + rangeValue = valueOfRange ; <nl> + expressionValue = valueOfExpression ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns NP value for range . <nl> + * @ return NP value for range <nl> + * / <nl> + public BigInteger getRangeValue ( ) { <nl> + return rangeValue ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns NP value for expression . <nl> + * @ return NP value for expression <nl> + * / <nl> + public BigInteger getExpressionValue ( ) { <nl> + return expressionValue ; <nl> + } <nl> + <nl> } <nl> + <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java <nl> index c0c9782 . . 2d1131b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java <nl> @ @ - 76 , 16 + 76 , 16 @ @ public class CyclomaticComplexityCheckTest <nl> checkConfig . addAttribute ( " max " , " 0 " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 4 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> - " 7 : 17 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> - " 17 : 5 : " + getCheckMessage ( MSG _ KEY , 6 , 0 ) , <nl> - " 27 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> - " 34 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , <nl> - " 48 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> - " 58 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> - " 67 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> - " 76 : 5 : " + getCheckMessage ( MSG _ KEY , 1 , 0 ) , <nl> - " 79 : 13 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> + " 5 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> + " 10 : 17 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> + " 22 : 5 : " + getCheckMessage ( MSG _ KEY , 6 , 0 ) , <nl> + " 35 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> + " 45 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , <nl> + " 63 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> + " 76 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> + " 88 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> + " 100 : 5 : " + getCheckMessage ( MSG _ KEY , 1 , 0 ) , <nl> + " 104 : 13 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputComplexity . java " ) , expected ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> index a7c8d3f . . 9171576 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> @ @ - 49 , 22 + 49 , 47 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { <nl> <nl> checkConfig . addAttribute ( " max " , " 0 " ) ; <nl> final String [ ] expected = { <nl> - " 4 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> - " 7 : 17 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> - " 17 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , <nl> - " 27 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> - " 34 : 5 : " + getCheckMessage ( MSG _ KEY , 7 , 0 ) , <nl> - " 48 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> - " 58 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> - " 67 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> - " 76 : 5 : " + getCheckMessage ( MSG _ KEY , 1 , 0 ) , <nl> - " 79 : 13 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> + " 5 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> + " 10 : 17 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> + " 22 : 5 : " + getCheckMessage ( MSG _ KEY , 10 , 0 ) , <nl> + " 35 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> + " 45 : 5 : " + getCheckMessage ( MSG _ KEY , 7 , 0 ) , <nl> + " 63 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> + " 76 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> + " 88 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , <nl> + " 104 : 13 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputComplexity . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> + public void testCalculation2 ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( NPathComplexityCheck . class ) ; <nl> + <nl> + checkConfig . addAttribute ( " max " , " 0 " ) ; <nl> + final String [ ] expected = { <nl> + " 5 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , <nl> + " 11 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , <nl> + " 18 : 5 : " + getCheckMessage ( MSG _ KEY , 4 , 0 ) , <nl> + " 33 : 5 : " + getCheckMessage ( MSG _ KEY , 4 , 0 ) , <nl> + " 49 : 5 : " + getCheckMessage ( MSG _ KEY , 6 , 0 ) , <nl> + " 65 : 5 : " + getCheckMessage ( MSG _ KEY , 15 , 0 ) , <nl> + " 90 : 5 : " + getCheckMessage ( MSG _ KEY , 11 , 0 ) , <nl> + " 100 : 5 : " + getCheckMessage ( MSG _ KEY , 8 , 0 ) , <nl> + " 113 : 5 : " + getCheckMessage ( MSG _ KEY , 120 , 0 ) , <nl> + " 125 : 5 : " + getCheckMessage ( MSG _ KEY , 6 , 0 ) , <nl> + " 135 : 5 : " + getCheckMessage ( MSG _ KEY , 21 , 0 ) , <nl> + " 148 : 5 : " + getCheckMessage ( MSG _ KEY , 35 , 0 ) , <nl> + " 156 : 5 : " + getCheckMessage ( MSG _ KEY , 25 , 0 ) , <nl> + " 171 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputNPathComplexity . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testIntegerOverflow ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( NPathComplexityCheck . class ) ; <nl> @ @ - 74 , 7 + 99 , 7 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { <nl> final long largerThanMaxInt = 3 _ 486 _ 784 _ 401L ; <nl> <nl> final String [ ] expected = { <nl> - " 9 : 5 : " + getCheckMessage ( MSG _ KEY , largerThanMaxInt , 0 ) , <nl> + " 13 : 5 : " + getCheckMessage ( MSG _ KEY , largerThanMaxInt , 0 ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputComplexityOverflow . java " ) , expected ) ; <nl> @ @ - 105 , 10 + 130 , 12 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { <nl> TokenTypes . LITERAL _ IF , <nl> TokenTypes . LITERAL _ ELSE , <nl> TokenTypes . LITERAL _ SWITCH , <nl> - TokenTypes . LITERAL _ CASE , <nl> + TokenTypes . CASE _ GROUP , <nl> TokenTypes . LITERAL _ TRY , <nl> TokenTypes . LITERAL _ CATCH , <nl> TokenTypes . QUESTION , <nl> + TokenTypes . LITERAL _ RETURN , <nl> + TokenTypes . LITERAL _ DEFAULT , <nl> } ; <nl> Assert . assertNotNull ( actual ) ; <nl> Assert . assertArrayEquals ( expected , actual ) ; <nl> @ @ - 129 , 10 + 156 , 12 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { <nl> TokenTypes . LITERAL _ IF , <nl> TokenTypes . LITERAL _ ELSE , <nl> TokenTypes . LITERAL _ SWITCH , <nl> - TokenTypes . LITERAL _ CASE , <nl> + TokenTypes . CASE _ GROUP , <nl> TokenTypes . LITERAL _ TRY , <nl> TokenTypes . LITERAL _ CATCH , <nl> TokenTypes . QUESTION , <nl> + TokenTypes . LITERAL _ RETURN , <nl> + TokenTypes . LITERAL _ DEFAULT , <nl> } ; <nl> Assert . assertNotNull ( actual ) ; <nl> Assert . assertArrayEquals ( expected , actual ) ; <nl> @ @ - 146 , 4 + 175 , 51 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { <nl> npathComplexityCheckObj . visitToken ( ast ) ; <nl> npathComplexityCheckObj . leaveToken ( ast ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testVisitTokenBeforeExpressionRange ( ) { <nl> + / / Create first ast <nl> + final DetailAST astIf = mockAST ( TokenTypes . LITERAL _ IF , " if " , " mockfile " , 2 , 2 ) ; <nl> + final DetailAST astIfLeftParen = mockAST ( TokenTypes . LPAREN , " ( " , " mockfile " , 3 , 3 ) ; <nl> + astIf . addChild ( astIfLeftParen ) ; <nl> + final DetailAST astIfTrue = <nl> + mockAST ( TokenTypes . LITERAL _ TRUE , " true " , " mockfile " , 3 , 3 ) ; <nl> + astIf . addChild ( astIfTrue ) ; <nl> + final DetailAST astIfRightParen = mockAST ( TokenTypes . RPAREN , " ) " , " mockfile " , 4 , 4 ) ; <nl> + astIf . addChild ( astIfRightParen ) ; <nl> + / / Create ternary ast <nl> + final DetailAST astTernary = mockAST ( TokenTypes . QUESTION , " ? " , " mockfile " , 1 , 1 ) ; <nl> + final DetailAST astTernaryTrue = <nl> + mockAST ( TokenTypes . LITERAL _ TRUE , " true " , " mockfile " , 1 , 2 ) ; <nl> + astTernary . addChild ( astTernaryTrue ) ; <nl> + <nl> + final NPathComplexityCheck mock = new NPathComplexityCheck ( ) ; <nl> + / / visiting first ast , set expressionSpatialRange to [ 2 , 2 - 4 , 4 ] <nl> + mock . visitToken ( astIf ) ; <nl> + / / visiting ternary , it lies before expressionSpatialRange <nl> + mock . visitToken ( astTernary ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Creates MOCK lexical token and returns AST node for this token . <nl> + * @ param tokenType type of token <nl> + * @ param tokenText text of token <nl> + * @ param tokenFileName file name of token <nl> + * @ param tokenRow token position in a file ( row ) <nl> + * @ param tokenColumn token position in a file ( column ) <nl> + * @ return AST node for the token <nl> + * / <nl> + private static DetailAST mockAST ( final int tokenType , final String tokenText , <nl> + final String tokenFileName , final int tokenRow , final int tokenColumn ) { <nl> + final CommonHiddenStreamToken tokenImportSemi = new CommonHiddenStreamToken ( ) ; <nl> + tokenImportSemi . setType ( tokenType ) ; <nl> + tokenImportSemi . setText ( tokenText ) ; <nl> + tokenImportSemi . setLine ( tokenRow ) ; <nl> + tokenImportSemi . setColumn ( tokenColumn ) ; <nl> + tokenImportSemi . setFilename ( tokenFileName ) ; <nl> + final DetailAST astSemi = new DetailAST ( ) ; <nl> + astSemi . initialize ( tokenImportSemi ) ; <nl> + return astSemi ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java <nl> index 56f095e . . 0d44a79 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java <nl> @ @ - 1 , 10 + 1 , 14 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> <nl> public class InputComplexity { <nl> + / / NP = 2 <nl> public void foo ( ) { <nl> + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 <nl> while ( true ) { <nl> Runnable runnable = new Runnable ( ) { <nl> + / / NP = 2 <nl> public void run ( ) { <nl> + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 <nl> while ( true ) { <nl> } <nl> } <nl> @ @ - 14 , 69 + 18 , 91 @ @ public class InputComplexity { <nl> } <nl> } <nl> <nl> + / / NP = 10 <nl> public void bar ( ) { <nl> + / / NP = ( if - range = 3 * 3 ) + ( expr = 0 ) + 1 = 10 <nl> if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 1 ) = 3 <nl> if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { <nl> } <nl> - <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 1 ) = 3 <nl> if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { <nl> } <nl> } <nl> } <nl> <nl> + / / NP = 3 <nl> public void simpleElseIf ( ) { <nl> + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 <nl> if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 <nl> } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> } else { <nl> } <nl> } <nl> <nl> + / / NP = 7 <nl> public void stupidElseIf ( ) { <nl> + / / NP = ( if - range = 1 ) + ( else - range = 3 * 2 ) + ( expr = 0 ) = 7 <nl> if ( System . currentTimeMillis ( ) = = 0 ) { <nl> } else { <nl> + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + ( expr = 0 ) = 3 <nl> if ( System . currentTimeMillis ( ) = = 0 ) { <nl> } else { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> if ( System . currentTimeMillis ( ) = = 0 ) { <nl> } <nl> } <nl> - <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> if ( System . currentTimeMillis ( ) = = 0 ) { <nl> } <nl> } <nl> } <nl> <nl> + / / NP = 3 <nl> public InputComplexity ( ) <nl> { <nl> int i = 1 ; <nl> + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 <nl> if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 <nl> } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> } else { <nl> } <nl> } <nl> <nl> - / / STATIC _ INIT <nl> + / / STATIC _ INIT <nl> + / / NP = 3 <nl> static { <nl> int i = 1 ; <nl> + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 <nl> if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 <nl> } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> } else { <nl> } <nl> } <nl> <nl> - / / INSTANCE _ INIT <nl> + / / INSTANCE _ INIT <nl> + / / NP = 3 <nl> { <nl> int i = 1 ; <nl> + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 <nl> if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 <nl> } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> } else { <nl> } <nl> } <nl> <nl> / * * Inner * / <nl> + / / NP = 0 <nl> public InputComplexity ( int aParam ) <nl> { <nl> Runnable runnable = new Runnable ( ) { <nl> + / / NP = 2 <nl> public void run ( ) { <nl> + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 <nl> while ( true ) { <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java <nl> index f669d97 . . 6a49ca2 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java <nl> @ @ - 6 , 15 + 6 , 27 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> * / <nl> public class InputComplexityOverflow { <nl> <nl> + / * NP = ( if - range [ 1 ] = 9 ) * ( if - range [ 2 ] = 9 ) * ( if - range [ 3 ] = 9 ) * ( if - range [ 4 ] = 9 ) <nl> + * ( if - range [ 5 ] = 9 ) * ( if - range [ 6 ] = 9 ) * ( if - range [ 7 ] = 9 ) * ( if - range [ 8 ] = 9 ) <nl> + * ( if - range [ 9 ] = 9 ) * ( if - range [ 10 ] = 9 ) = 3486784401 <nl> + * / <nl> public void provokeNpathIntegerOverflow ( ) <nl> { <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> if ( true ) { <nl> } <nl> } <nl> @ @ - 24 , 13 + 36 , 21 @ @ public class InputComplexityOverflow { <nl> } <nl> } <nl> } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> if ( true ) { <nl> } <nl> } <nl> @ @ - 40 , 13 + 60 , 21 @ @ public class InputComplexityOverflow { <nl> } <nl> } <nl> } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> if ( true ) { <nl> } <nl> } <nl> @ @ - 56 , 13 + 84 , 21 @ @ public class InputComplexityOverflow { <nl> } <nl> } <nl> } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> if ( true ) { <nl> } <nl> } <nl> @ @ - 72 , 13 + 108 , 21 @ @ public class InputComplexityOverflow { <nl> } <nl> } <nl> } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> if ( true ) { <nl> } <nl> } <nl> @ @ - 88 , 13 + 132 , 21 @ @ public class InputComplexityOverflow { <nl> } <nl> } <nl> } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> if ( true ) { <nl> } <nl> } <nl> @ @ - 104 , 13 + 156 , 21 @ @ public class InputComplexityOverflow { <nl> } <nl> } <nl> } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> if ( true ) { <nl> } <nl> } <nl> @ @ - 120 , 13 + 180 , 21 @ @ public class InputComplexityOverflow { <nl> } <nl> } <nl> } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> if ( true ) { <nl> } <nl> } <nl> @ @ - 136 , 13 + 204 , 21 @ @ public class InputComplexityOverflow { <nl> } <nl> } <nl> } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> if ( true ) { <nl> } <nl> } <nl> @ @ - 152 , 13 + 228 , 21 @ @ public class InputComplexityOverflow { <nl> } <nl> } <nl> } <nl> + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 <nl> if ( true ) { <nl> + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 <nl> if ( true ) { <nl> + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 <nl> if ( true ) { <nl> + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 <nl> if ( true ) { <nl> + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 <nl> if ( true ) { <nl> + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 <nl> if ( true ) { <nl> + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 <nl> if ( true ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> if ( true ) { <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputNPathComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputNPathComplexity . java <nl> new file mode 100644 <nl> index 0000000 . . c4ce470 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputNPathComplexity . java <nl> @ @ - 0 , 0 + 1 , 178 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> + / / Advise : for lack of ambiguity try to make all factors prime numbers <nl> + public class InputNPathComplexity { <nl> + / / NP = 5 <nl> + void testIfWithExpression ( ) { <nl> + / / NP = ( if - range = 1 ) + 1 + ( expr = 3 ) = 5 <nl> + if ( true & & true | | ( true | | true ) ) { } <nl> + } <nl> + <nl> + / / NP = 5 <nl> + void testIfElseWithExpression ( ) { <nl> + / / NP = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 3 ) = 5 <nl> + if ( true & & true | | ( true | | true ) ) { } <nl> + else { } <nl> + } <nl> + <nl> + / / NP = 4 <nl> + int testSimpleSwitch ( ) { <nl> + int a = 0 ; <nl> + / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) <nl> + / / + ( default - range = 1 ) + ( expr = 0 ) = 4 <nl> + switch ( a ) { <nl> + case 1 : <nl> + break ; <nl> + case 2 : <nl> + case 3 : <nl> + break ; <nl> + } <nl> + return a ; <nl> + } <nl> + <nl> + / / NP = 4 <nl> + void testSimpleSwitchWithDefault ( ) { <nl> + int a = 0 ; <nl> + / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) <nl> + / / + ( default - range = 1 ) + ( expr = 0 ) = 4 <nl> + switch ( a ) { <nl> + case 1 : <nl> + break ; <nl> + case 2 : <nl> + case 3 : <nl> + break ; <nl> + default : <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + / / NP = 6 <nl> + void testSwitchWithExpression ( ) { <nl> + int a = 0 ; <nl> + / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) <nl> + / / + ( default - range = 1 ) + ( expr = 2 ) = 6 <nl> + switch ( true ? a : a ) { <nl> + case 1 : <nl> + break ; <nl> + case 2 : <nl> + case 3 : <nl> + break ; <nl> + default : <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + / / NP = 15 <nl> + void testComplexSwitch ( ) { <nl> + int a = 0 ; <nl> + / / NP = ( case - range [ 1 ] = 2 ) + ( case - range [ 2 ] = 5 * 2 ) + ( case - range [ 3 ] = 2 ) <nl> + / / + ( default - range = 1 ) + ( expr = 0 ) = 15 <nl> + switch ( a ) { <nl> + case 1 : <nl> + / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { } <nl> + break ; <nl> + case 2 : <nl> + / / NP ( case - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 3 ) = 5 <nl> + if ( true & & true | | ( true | | true ) ) { } <nl> + else { } <nl> + / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { } <nl> + case 3 : <nl> + / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 <nl> + if ( true ) { } <nl> + break ; <nl> + default : <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + / / NP = 11 <nl> + void testComplexIfElse ( ) { <nl> + / / NP = ( if - range = 1 ) + ( else - range = 9 ) + ( expr = 1 ) = 11 <nl> + if ( true & & true ) { } <nl> + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 6 ) + ( expr = 2 ) = 9 <nl> + else if ( true | | true | | true ) { } <nl> + / / NP ( else - range ) = ( if - range = 1 ) + 1 + ( expr = 4 ) = 6 <nl> + else if ( true & & true & & true | | true | | true ) { } <nl> + } <nl> + <nl> + / / NP = 8 <nl> + boolean testComplexReturn ( ) { <nl> + / / NP = ( if - range = 3 ) + ( else - range = 4 ) + ( expr = 1 ) = 8 <nl> + if ( true & & true ) { <nl> + / / NP ( if - range ) = 3 <nl> + return true & & true | | ( true & & true ) ; <nl> + } else { <nl> + / / NP ( else - range ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 ) + ( expr ( 3 ) = 1 ) + 2 = 4 <nl> + return true ? true & & true : true | | true ; <nl> + } <nl> + } <nl> + <nl> + / / NP = ( for - statement [ 1 ] = 2 ) * ( for - statement [ 2 ] = 3 ) <nl> + / / * ( for - statement [ 3 ] = 4 ) * ( for - statement [ 4 ] = 5 ) = 120 <nl> + void testForCyclesComplex ( ) { <nl> + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 0 ) + 1 = 2 <nl> + for ( int i = 0 ; i < 10 ; i + + ) ; <nl> + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 ) + ( expr ( 3 ) = 0 ) + 1 = 3 <nl> + for ( int i = 0 ; i < 10 & & true ; i + + ) ; <nl> + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 2 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 0 ) + 1 = 4 <nl> + for ( int i = true ? 0 : 0 ; i < 10 ; i + + ) ; <nl> + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 + 2 ) + ( expr ( 3 ) = 0 ) + 1 = 5 <nl> + for ( int i = 0 ; true ? i < 10 : true | | true ; i + + ) ; <nl> + } <nl> + <nl> + / / NP = ( while - statement [ 1 ] = 2 ) * ( while - statement [ 2 ] = 3 ) = 6 <nl> + boolean testWhileCyclesComplex ( ) { <nl> + int a = 0 ; <nl> + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 <nl> + while ( a ! = 0 ) { } <nl> + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 1 ) + 1 = 3 <nl> + while ( a ! = 0 & & a = = 0 ) { return a = = 0 | | a = = 0 ; } <nl> + return true ; <nl> + } <nl> + <nl> + / / NP = ( do - statement [ 1 ] = 6 ) * ( do - statement [ 2 ] = 3 ) = 21 <nl> + void testDoWhileCyclesComplex ( ) { <nl> + int a = 0 ; <nl> + / / NP ( do - statement ) = ( do - range = 1 ) + ( expr = 1 ) + 1 = 3 <nl> + do { } while ( a < 10 & & true ) ; <nl> + / / NP ( do - statement ) = <nl> + / / ( do - range = 3 ) + ( ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 1 ) + 2 ) + 1 = 7 <nl> + do { <nl> + / / NP ( do - range ) = ( do - range = 1 ) + ( expr = 1 ) + 1 = 3 <nl> + do { } while ( a < 10 | | true ) ; <nl> + } while ( true ? a > 10 : ( a < 10 | | true ) ) ; <nl> + } <nl> + <nl> + / / NP = ( question - statement [ 1 ] = 5 ) * ( question - statement [ 2 ] = 7 ) = 35 <nl> + void testComplexTernaryOperator ( ) { <nl> + / / NP ( question - statement ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 2 ) + ( expr ( 3 ) = 1 + 2 ) + 2 = 7 <nl> + boolean a = true ? ( true ? true : true ) : ( false ? ( true | | false ) : true ) ; <nl> + / / NP ( question - statement ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 2 ) + ( expr ( 3 ) = 1 ) + 2 = 5 ; <nl> + boolean b = true ? ( true ? true : true ) : true | | true ; <nl> + } <nl> + <nl> + / / NP = ( if - expression [ 1 ] = 5 ) * ( if - expression [ 2 ] = 5 ) = 25 <nl> + void testSimpleTernaryBadFormatting ( ) { <nl> + / / NP ( if - expression ) = ( if - range = 2 ) + 1 + ( expr = 2 ) = 5 <nl> + if ( <nl> + true ? true : true <nl> + ) { boolean a = true ? true <nl> + : true ; <nl> + } <nl> + / / NP ( if - expression ) = ( if - range = 2 ) + 1 + ( expr = 2 ) = 5 <nl> + if ( <nl> + true ? true : true ) { boolean b = true ? true : true ; <nl> + } <nl> + } <nl> + <nl> + / / Calculation for try - catch is wrong now <nl> + / / See issue # 3814 https : / / github . com / checkstyle / checkstyle / issues / 3814 <nl> + void testTryCatch ( ) { <nl> + try { <nl> + } <nl> + catch ( Exception e ) { <nl> + } <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / xdocs / config _ metrics . xml b / src / xdocs / config _ metrics . xml <nl> index 2f71e45 . . 8a8af6e 100644 <nl> - - - a / src / xdocs / config _ metrics . xml <nl> + + + b / src / xdocs / config _ metrics . xml <nl> @ @ - 1018 , 7 + 1018 , 7 @ @ class SwitchExample { <nl> The NPATH metric computes the number of possible execution <nl> paths through a function ( method ) . It takes into account the nesting of <nl> conditional statements and multi - part boolean expressions <nl> - ( e . g . , A & amp ; & amp ; B , C | | D , etc . ) . <nl> + ( A & amp ; & amp ; B , C | | D , E ? F : G and their combinations ) . <nl> < br / > <nl> The NPATH metric was designed base on Cyclomatic complexity to <nl> avoid problem of Cyclomatic complexity metric like nesting level within a function ( method ) .
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> index d9c8b97 . . 37f29c9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> @ @ - 283 , 7 + 283 , 12 @ @ public class NeedBracesCheck extends Check { <nl> else if ( literalFor . getParent ( ) . getType ( ) = = TokenTypes . SLIST <nl> & & literalFor . getLastChild ( ) . getType ( ) ! = TokenTypes . SLIST ) { <nl> final DetailAST block = findExpressionBlockInForLoop ( literalFor ) ; <nl> - result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; <nl> + if ( block = = null ) { <nl> + result = literalFor . getLineNo ( ) = = literalFor . getLastChild ( ) . getLineNo ( ) ; <nl> + } <nl> + else { <nl> + result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; <nl> + } <nl> } <nl> return result ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> index e1d3561 . . e3b1443 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java <nl> @ @ - 67 , 10 + 67 , 11 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> " 38 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> " 46 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " while " ) , <nl> " 53 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " do " ) , <nl> - " 59 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , <nl> - " 88 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> - " 92 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , <nl> - " 104 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> + " 56 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , <nl> + " 62 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , <nl> + " 91 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> + " 95 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , <nl> + " 107 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; <nl> } <nl> @ @ - 96 , 8 + 97 , 8 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " tokens " , " LITERAL _ CASE , LITERAL _ DEFAULT " ) ; <nl> checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; <nl> final String [ ] expected = { <nl> - " 69 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> " 72 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> + " 75 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java <nl> index 0a9c5c2 . . 9d04f7f 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java <nl> @ @ - 53 , 6 + 53 , 9 @ @ public class InputBracesSingleLineStatements <nl> do <nl> this . notify ( ) ; <nl> while ( o ! = null ) ; <nl> + for ( ; ; ) <nl> + break ; <nl> + for ( ; ; ) break ; <nl> for ( int i = 0 ; i < 10 ; i + + ) { <nl> this . notify ( ) ; <nl> }

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 35f715b . . ad8ed39 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 29 , 6 + 29 , 7 @ @ 
 
 < ! - - Tone down the checking for test code - - > 
 < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XdocsPagesTest \ . java " / > 
 + < suppress checks = " NPathComplexity " files = " [ \ \ / ] XdocsPagesTest \ . java " / > 
 < suppress checks = " IllegalCatch " files = " [ \ \ / ] internal [ \ \ / ] \ w + Util \ . java " / > 
 < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > 
 < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java 
 index 57f8c60 . . b202ecd 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java 
 @ @ - 50 , 20 + 50 , 36 @ @ public final class NPathComplexityCheck extends AbstractCheck { 
 private static final int DEFAULT _ MAX = 200 ; 
 
 / * * The initial current value . * / 
 - private static final BigInteger INITIAL _ VALUE = BigInteger . ONE ; 
 + private static final BigInteger INITIAL _ VALUE = BigInteger . ZERO ; 
 
 - / * * Stack of values - all but the current value . * / 
 - private final Deque < BigInteger > valueStack = new ArrayDeque < > ( ) ; 
 + / * * 
 + * Stack of NP values for ranges . 
 + * / 
 + private final Deque < BigInteger > rangeValues = new ArrayDeque < > ( ) ; 
 + 
 + / * * Stack of NP values for expressions . * / 
 + private final Deque < Integer > expressionValues = new ArrayDeque < > ( ) ; 
 + 
 + / * * Stack of belongs to range values for question operator . * / 
 + private final Deque < Boolean > isAfterValues = new ArrayDeque < > ( ) ; 
 + 
 + / * * 
 + * Range of the last processed expression . Used for checking that ternary operation 
 + * which is a part of expression won ' t be processed for second time . 
 + * / 
 + private final TokenEnd processingTokenEnd = new TokenEnd ( ) ; 
 
 - / * * The current value . * / 
 - private BigInteger currentValue = INITIAL _ VALUE ; 
 + / * * NP value for current range . * / 
 + private BigInteger currentRangeValue = INITIAL _ VALUE ; 
 
 / * * Threshold to report error for . * / 
 private int max = DEFAULT _ MAX ; 
 
 + / * * True , when branch is visited , but not leaved . * / 
 + private boolean branchVisited ; 
 + 
 / * * 
 * Set the maximum threshold allowed . 
 - * 
 * @ param max the maximum threshold 
 * / 
 public void setMax ( int max ) { 
 @ @ - 88 , 10 + 104 , 12 @ @ public final class NPathComplexityCheck extends AbstractCheck { 
 TokenTypes . LITERAL _ IF , 
 TokenTypes . LITERAL _ ELSE , 
 TokenTypes . LITERAL _ SWITCH , 
 - TokenTypes . LITERAL _ CASE , 
 + TokenTypes . CASE _ GROUP , 
 TokenTypes . LITERAL _ TRY , 
 TokenTypes . LITERAL _ CATCH , 
 TokenTypes . QUESTION , 
 + TokenTypes . LITERAL _ RETURN , 
 + TokenTypes . LITERAL _ DEFAULT , 
 } ; 
 } 
 
 @ @ - 101 , 27 + 119 , 53 @ @ public final class NPathComplexityCheck extends AbstractCheck { 
 } 
 
 @ Override 
 + public void beginTree ( DetailAST rootAST ) { 
 + rangeValues . clear ( ) ; 
 + expressionValues . clear ( ) ; 
 + isAfterValues . clear ( ) ; 
 + processingTokenEnd . reset ( ) ; 
 + currentRangeValue = INITIAL _ VALUE ; 
 + branchVisited = false ; 
 + } 
 + 
 + @ Override 
 public void visitToken ( DetailAST ast ) { 
 switch ( ast . getType ( ) ) { 
 + case TokenTypes . LITERAL _ IF : 
 + case TokenTypes . LITERAL _ SWITCH : 
 case TokenTypes . LITERAL _ WHILE : 
 case TokenTypes . LITERAL _ DO : 
 case TokenTypes . LITERAL _ FOR : 
 - case TokenTypes . LITERAL _ IF : 
 + visitConditional ( ast , 1 ) ; 
 + break ; 
 case TokenTypes . QUESTION : 
 - case TokenTypes . LITERAL _ TRY : 
 - case TokenTypes . LITERAL _ SWITCH : 
 - visitMultiplyingConditional ( ) ; 
 + visitUnitaryOperator ( ast , 2 ) ; 
 + break ; 
 + case TokenTypes . LITERAL _ RETURN : 
 + visitUnitaryOperator ( ast , 0 ) ; 
 + break ; 
 + case TokenTypes . CASE _ GROUP : 
 + final int caseNumber = countCaseTokens ( ast ) ; 
 + branchVisited = true ; 
 + pushValue ( caseNumber ) ; 
 break ; 
 case TokenTypes . LITERAL _ ELSE : 
 + branchVisited = true ; 
 + if ( currentRangeValue . equals ( BigInteger . ZERO ) ) { 
 + currentRangeValue = BigInteger . ONE ; 
 + } 
 + pushValue ( 0 ) ; 
 + break ; 
 + case TokenTypes . LITERAL _ TRY : 
 case TokenTypes . LITERAL _ CATCH : 
 - case TokenTypes . LITERAL _ CASE : 
 - visitAddingConditional ( ) ; 
 + case TokenTypes . LITERAL _ DEFAULT : 
 + pushValue ( 1 ) ; 
 break ; 
 case TokenTypes . CTOR _ DEF : 
 case TokenTypes . METHOD _ DEF : 
 case TokenTypes . INSTANCE _ INIT : 
 case TokenTypes . STATIC _ INIT : 
 - visitMethodDef ( ) ; 
 + pushValue ( 0 ) ; 
 break ; 
 default : 
 break ; 
 @ @ - 135 , 16 + 179 , 27 @ @ public final class NPathComplexityCheck extends AbstractCheck { 
 case TokenTypes . LITERAL _ DO : 
 case TokenTypes . LITERAL _ FOR : 
 case TokenTypes . LITERAL _ IF : 
 - case TokenTypes . QUESTION : 
 - case TokenTypes . LITERAL _ TRY : 
 case TokenTypes . LITERAL _ SWITCH : 
 + leaveConditional ( ) ; 
 + break ; 
 + case TokenTypes . LITERAL _ TRY : 
 leaveMultiplyingConditional ( ) ; 
 break ; 
 - case TokenTypes . LITERAL _ ELSE : 
 + case TokenTypes . LITERAL _ RETURN : 
 + case TokenTypes . QUESTION : 
 + leaveUnitaryOperator ( ) ; 
 + break ; 
 case TokenTypes . LITERAL _ CATCH : 
 - case TokenTypes . LITERAL _ CASE : 
 leaveAddingConditional ( ) ; 
 break ; 
 + case TokenTypes . LITERAL _ DEFAULT : 
 + leaveBranch ( ) ; 
 + break ; 
 + case TokenTypes . LITERAL _ ELSE : 
 + case TokenTypes . CASE _ GROUP : 
 + leaveBranch ( ) ; 
 + branchVisited = false ; 
 + break ; 
 case TokenTypes . CTOR _ DEF : 
 case TokenTypes . METHOD _ DEF : 
 case TokenTypes . INSTANCE _ INIT : 
 @ @ - 156 , 56 + 211 , 272 @ @ public final class NPathComplexityCheck extends AbstractCheck { 
 } 
 } 
 
 - / * * Visits else , catch or case . * / 
 - private void visitAddingConditional ( ) { 
 - pushValue ( ) ; 
 + / * * 
 + * Visits if , while , do - while , for and switch tokens - all of them have expression in 
 + * parentheses which is used for calculation . 
 + * @ param ast visited token . 
 + * @ param basicBranchingFactor default number of branches added . 
 + * / 
 + private void visitConditional ( DetailAST ast , int basicBranchingFactor ) { 
 + int expressionValue = basicBranchingFactor ; 
 + DetailAST bracketed ; 
 + for ( bracketed = ast . findFirstToken ( TokenTypes . LPAREN ) . getNextSibling ( ) ; 
 + bracketed . getType ( ) ! = TokenTypes . RPAREN ; 
 + bracketed = bracketed . getNextSibling ( ) ) { 
 + expressionValue + = countConditionalOperators ( bracketed ) ; 
 + } 
 + processingTokenEnd . setToken ( bracketed ) ; 
 + pushValue ( expressionValue ) ; 
 + } 
 + 
 + / * * 
 + * Visits ternary operator ( ? : ) and return tokens . They differ from those processed by 
 + * visitConditional method in that their expression isn ' t bracketed . 
 + * @ param ast visited token . 
 + * @ param basicBranchingFactor number of branches inherently added by this token . 
 + * / 
 + private void visitUnitaryOperator ( DetailAST ast , int basicBranchingFactor ) { 
 + final boolean isAfter = processingTokenEnd . isAfter ( ast ) ; 
 + isAfterValues . push ( isAfter ) ; 
 + if ( ! isAfter ) { 
 + processingTokenEnd . setToken ( getLastToken ( ast ) ) ; 
 + final int expressionValue = basicBranchingFactor + countConditionalOperators ( ast ) ; 
 + pushValue ( expressionValue ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Leaves ternary operator ( ? : ) and return tokens . 
 + * / 
 + private void leaveUnitaryOperator ( ) { 
 + if ( ! isAfterValues . pop ( ) ) { 
 + final Values valuePair = popValue ( ) ; 
 + BigInteger basicRangeValue = valuePair . getRangeValue ( ) ; 
 + BigInteger expressionValue = valuePair . getExpressionValue ( ) ; 
 + if ( expressionValue . equals ( BigInteger . ZERO ) ) { 
 + expressionValue = BigInteger . ONE ; 
 + } 
 + if ( basicRangeValue . equals ( BigInteger . ZERO ) ) { 
 + basicRangeValue = BigInteger . ONE ; 
 + } 
 + currentRangeValue = currentRangeValue . add ( expressionValue ) . multiply ( basicRangeValue ) ; 
 + } 
 + } 
 + 
 + / * * Leaves while , do , for , if , ternary ( ? : : ) , return or switch . * / 
 + private void leaveConditional ( ) { 
 + final Values valuePair = popValue ( ) ; 
 + final BigInteger expressionValue = valuePair . getExpressionValue ( ) ; 
 + BigInteger basicRangeValue = valuePair . getRangeValue ( ) ; 
 + if ( currentRangeValue . equals ( BigInteger . ZERO ) ) { 
 + currentRangeValue = BigInteger . ONE ; 
 + } 
 + if ( basicRangeValue . equals ( BigInteger . ZERO ) ) { 
 + basicRangeValue = BigInteger . ONE ; 
 + } 
 + currentRangeValue = currentRangeValue . add ( expressionValue ) . multiply ( basicRangeValue ) ; 
 + } 
 + 
 + / * * Leaves else , default or case group tokens . * / 
 + private void leaveBranch ( ) { 
 + final Values valuePair = popValue ( ) ; 
 + final BigInteger basicRangeValue = valuePair . getRangeValue ( ) ; 
 + final BigInteger expressionValue = valuePair . getExpressionValue ( ) ; 
 + if ( branchVisited & & currentRangeValue . equals ( BigInteger . ZERO ) ) { 
 + currentRangeValue = BigInteger . ONE ; 
 + } 
 + currentRangeValue = currentRangeValue . subtract ( BigInteger . ONE ) 
 + . add ( basicRangeValue ) 
 + . add ( expressionValue ) ; 
 } 
 
 - / * * Leaves else , catch or case . * / 
 + / * * 
 + * Process the end of a method definition . 
 + * @ param ast the token type representing the method definition 
 + * / 
 + private void leaveMethodDef ( DetailAST ast ) { 
 + final BigInteger bigIntegerMax = BigInteger . valueOf ( max ) ; 
 + if ( currentRangeValue . compareTo ( bigIntegerMax ) > 0 ) { 
 + log ( ast , MSG _ KEY , currentRangeValue , bigIntegerMax ) ; 
 + } 
 + popValue ( ) ; 
 + currentRangeValue = INITIAL _ VALUE ; 
 + } 
 + 
 + / * * Leaves catch . * / 
 private void leaveAddingConditional ( ) { 
 - currentValue = currentValue . subtract ( BigInteger . ONE ) . add ( popValue ( ) ) ; 
 + currentRangeValue = currentRangeValue . add ( popValue ( ) . getRangeValue ( ) . add ( BigInteger . ONE ) ) ; 
 } 
 
 - / * * Visits while , do , for , if , try , ? ( in ? : : ) or switch . * / 
 - private void visitMultiplyingConditional ( ) { 
 - pushValue ( ) ; 
 + / * * 
 + * Pushes the current range value on the range value stack . Pushes this token expression value 
 + * on the expression value stack . 
 + * @ param expressionValue value of expression calculated for current token . 
 + * / 
 + private void pushValue ( Integer expressionValue ) { 
 + rangeValues . push ( currentRangeValue ) ; 
 + expressionValues . push ( expressionValue ) ; 
 + currentRangeValue = INITIAL _ VALUE ; 
 } 
 
 - / * * Leaves while , do , for , if , try , ? ( in ? : : ) or switch . * / 
 + / * * 
 + * Pops values from both stack of expression values and stack of range values . 
 + * @ return pair of head values from both of the stacks . 
 + * / 
 + private Values popValue ( ) { 
 + final int expressionValue = expressionValues . pop ( ) ; 
 + return new Values ( rangeValues . pop ( ) , BigInteger . valueOf ( expressionValue ) ) ; 
 + } 
 + 
 + / * * Leaves try . * / 
 private void leaveMultiplyingConditional ( ) { 
 - currentValue = currentValue . add ( BigInteger . ONE ) . multiply ( popValue ( ) ) ; 
 + currentRangeValue = currentRangeValue . add ( BigInteger . ONE ) 
 + . multiply ( popValue ( ) . getRangeValue ( ) . add ( BigInteger . ONE ) ) ; 
 } 
 
 - / * * Push the current value on the stack . * / 
 - private void pushValue ( ) { 
 - valueStack . push ( currentValue ) ; 
 - currentValue = INITIAL _ VALUE ; 
 + / * * 
 + * Calculates number of conditional operators , including inline ternary operatior , for a token . 
 + * @ param ast inspected token . 
 + * @ return number of conditional operators . 
 + * @ see < a href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 15 . html # jls - 15 . 23 " > 
 + * Java Language Specification , & sect ; 15 . 23 < / a > 
 + * @ see < a href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 15 . html # jls - 15 . 24 " > 
 + * Java Language Specification , & sect ; 15 . 24 < / a > 
 + * @ see < a href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 15 . html # jls - 15 . 25 " > 
 + * Java Language Specification , & sect ; 15 . 25 < / a > 
 + * / 
 + private static int countConditionalOperators ( DetailAST ast ) { 
 + int number = 0 ; 
 + for ( DetailAST child = ast . getFirstChild ( ) ; child ! = null ; 
 + child = child . getNextSibling ( ) ) { 
 + final int type = child . getType ( ) ; 
 + if ( type = = TokenTypes . LOR | | type = = TokenTypes . LAND ) { 
 + number + + ; 
 + } 
 + else if ( type = = TokenTypes . QUESTION ) { 
 + number + = 2 ; 
 + } 
 + number + = countConditionalOperators ( child ) ; 
 + } 
 + return number ; 
 } 
 
 / * * 
 - * Pops a value off the stack and makes it the current value . 
 - * @ return pop a value off the stack and make it the current value 
 + * Finds a leaf , which is the most distant from the root . 
 + * @ param ast the root of tree . 
 + * @ return the leaf . 
 * / 
 - private BigInteger popValue ( ) { 
 - currentValue = valueStack . pop ( ) ; 
 - return currentValue ; 
 + private static DetailAST getLastToken ( DetailAST ast ) { 
 + final DetailAST lastChild = ast . getLastChild ( ) ; 
 + final DetailAST result ; 
 + if ( lastChild . getFirstChild ( ) = = null ) { 
 + result = lastChild ; 
 + } 
 + else { 
 + result = getLastToken ( lastChild ) ; 
 + } 
 + return result ; 
 } 
 
 - / * * Process the start of the method definition . * / 
 - private void visitMethodDef ( ) { 
 - pushValue ( ) ; 
 + / * * 
 + * Counts number of case tokens subject to a case group token . 
 + * @ param ast case group token . 
 + * @ return number of case tokens . 
 + * / 
 + private static int countCaseTokens ( DetailAST ast ) { 
 + int counter = 0 ; 
 + for ( DetailAST iterator = ast . getFirstChild ( ) ; iterator ! = null ; 
 + iterator = iterator . getNextSibling ( ) ) { 
 + if ( iterator . getType ( ) = = TokenTypes . LITERAL _ CASE ) { 
 + counter + + ; 
 + } 
 + } 
 + return counter ; 
 } 
 
 / * * 
 - * Process the end of a method definition . 
 - * 
 - * @ param ast the token representing the method definition 
 + * Coordinates of token end . Used to prevent inline ternary 
 + * operator from being processed twice . 
 * / 
 - private void leaveMethodDef ( DetailAST ast ) { 
 - final BigInteger bigIntegerMax = BigInteger . valueOf ( max ) ; 
 - if ( currentValue . compareTo ( bigIntegerMax ) > 0 ) { 
 - log ( ast , MSG _ KEY , currentValue , bigIntegerMax ) ; 
 + private static class TokenEnd { 
 + / * * End line of token . * / 
 + private int endLineNo ; 
 + 
 + / * * End column of token . * / 
 + private int endColumnNo ; 
 + 
 + / * * 
 + * Sets end coordinates from given token . 
 + * @ param endToken token . 
 + * / 
 + public void setToken ( DetailAST endToken ) { 
 + if ( ! isAfter ( endToken ) ) { 
 + endLineNo = endToken . getLineNo ( ) ; 
 + endColumnNo = endToken . getColumnNo ( ) ; 
 + } 
 } 
 - popValue ( ) ; 
 + 
 + / * * Sets end token coordinates to the start of the file . * / 
 + public void reset ( ) { 
 + endLineNo = 0 ; 
 + endColumnNo = 0 ; 
 + } 
 + 
 + / * * 
 + * Checks if saved coordinates located after given token . 
 + * @ param ast given token . 
 + * @ return true , if saved coordinates located after given token . 
 + * / 
 + public boolean isAfter ( DetailAST ast ) { 
 + final int lineNo = ast . getLineNo ( ) ; 
 + final int columnNo = ast . getColumnNo ( ) ; 
 + boolean isAfter = true ; 
 + if ( lineNo > endLineNo 
 + | | lineNo = = endLineNo 
 + & & columnNo > endColumnNo ) { 
 + isAfter = false ; 
 + } 
 + return isAfter ; 
 + } 
 + } 
 + 
 + / * * 
 + * Class that store range value and expression value . 
 + * / 
 + private static class Values { 
 + 
 + / * * NP value for range . * / 
 + private final BigInteger rangeValue ; 
 + 
 + / * * NP value for expression . * / 
 + private final BigInteger expressionValue ; 
 + 
 + / * * 
 + * Constructor that assigns all of class fields . 
 + * @ param valueOfRange NP value for range 
 + * @ param valueOfExpression NP value for expression 
 + * / 
 + Values ( BigInteger valueOfRange , BigInteger valueOfExpression ) { 
 + rangeValue = valueOfRange ; 
 + expressionValue = valueOfExpression ; 
 + } 
 + 
 + / * * 
 + * Returns NP value for range . 
 + * @ return NP value for range 
 + * / 
 + public BigInteger getRangeValue ( ) { 
 + return rangeValue ; 
 + } 
 + 
 + / * * 
 + * Returns NP value for expression . 
 + * @ return NP value for expression 
 + * / 
 + public BigInteger getExpressionValue ( ) { 
 + return expressionValue ; 
 + } 
 + 
 } 
 + 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java 
 index c0c9782 . . 2d1131b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheckTest . java 
 @ @ - 76 , 16 + 76 , 16 @ @ public class CyclomaticComplexityCheckTest 
 checkConfig . addAttribute ( " max " , " 0 " ) ; 
 
 final String [ ] expected = { 
 - " 4 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 - " 7 : 17 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 - " 17 : 5 : " + getCheckMessage ( MSG _ KEY , 6 , 0 ) , 
 - " 27 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 - " 34 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , 
 - " 48 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 - " 58 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 - " 67 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 - " 76 : 5 : " + getCheckMessage ( MSG _ KEY , 1 , 0 ) , 
 - " 79 : 13 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 + " 5 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 + " 10 : 17 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 + " 22 : 5 : " + getCheckMessage ( MSG _ KEY , 6 , 0 ) , 
 + " 35 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 + " 45 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , 
 + " 63 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 + " 76 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 + " 88 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 + " 100 : 5 : " + getCheckMessage ( MSG _ KEY , 1 , 0 ) , 
 + " 104 : 13 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputComplexity . java " ) , expected ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 index a7c8d3f . . 9171576 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 @ @ - 49 , 22 + 49 , 47 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { 
 
 checkConfig . addAttribute ( " max " , " 0 " ) ; 
 final String [ ] expected = { 
 - " 4 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 - " 7 : 17 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 - " 17 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , 
 - " 27 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 - " 34 : 5 : " + getCheckMessage ( MSG _ KEY , 7 , 0 ) , 
 - " 48 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 - " 58 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 - " 67 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 - " 76 : 5 : " + getCheckMessage ( MSG _ KEY , 1 , 0 ) , 
 - " 79 : 13 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 + " 5 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 + " 10 : 17 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 + " 22 : 5 : " + getCheckMessage ( MSG _ KEY , 10 , 0 ) , 
 + " 35 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 + " 45 : 5 : " + getCheckMessage ( MSG _ KEY , 7 , 0 ) , 
 + " 63 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 + " 76 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 + " 88 : 5 : " + getCheckMessage ( MSG _ KEY , 3 , 0 ) , 
 + " 104 : 13 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputComplexity . java " ) , expected ) ; 
 } 
 
 @ Test 
 + public void testCalculation2 ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( NPathComplexityCheck . class ) ; 
 + 
 + checkConfig . addAttribute ( " max " , " 0 " ) ; 
 + final String [ ] expected = { 
 + " 5 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , 
 + " 11 : 5 : " + getCheckMessage ( MSG _ KEY , 5 , 0 ) , 
 + " 18 : 5 : " + getCheckMessage ( MSG _ KEY , 4 , 0 ) , 
 + " 33 : 5 : " + getCheckMessage ( MSG _ KEY , 4 , 0 ) , 
 + " 49 : 5 : " + getCheckMessage ( MSG _ KEY , 6 , 0 ) , 
 + " 65 : 5 : " + getCheckMessage ( MSG _ KEY , 15 , 0 ) , 
 + " 90 : 5 : " + getCheckMessage ( MSG _ KEY , 11 , 0 ) , 
 + " 100 : 5 : " + getCheckMessage ( MSG _ KEY , 8 , 0 ) , 
 + " 113 : 5 : " + getCheckMessage ( MSG _ KEY , 120 , 0 ) , 
 + " 125 : 5 : " + getCheckMessage ( MSG _ KEY , 6 , 0 ) , 
 + " 135 : 5 : " + getCheckMessage ( MSG _ KEY , 21 , 0 ) , 
 + " 148 : 5 : " + getCheckMessage ( MSG _ KEY , 35 , 0 ) , 
 + " 156 : 5 : " + getCheckMessage ( MSG _ KEY , 25 , 0 ) , 
 + " 171 : 5 : " + getCheckMessage ( MSG _ KEY , 2 , 0 ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " InputNPathComplexity . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testIntegerOverflow ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( NPathComplexityCheck . class ) ; 
 @ @ - 74 , 7 + 99 , 7 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { 
 final long largerThanMaxInt = 3 _ 486 _ 784 _ 401L ; 
 
 final String [ ] expected = { 
 - " 9 : 5 : " + getCheckMessage ( MSG _ KEY , largerThanMaxInt , 0 ) , 
 + " 13 : 5 : " + getCheckMessage ( MSG _ KEY , largerThanMaxInt , 0 ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputComplexityOverflow . java " ) , expected ) ; 
 @ @ - 105 , 10 + 130 , 12 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { 
 TokenTypes . LITERAL _ IF , 
 TokenTypes . LITERAL _ ELSE , 
 TokenTypes . LITERAL _ SWITCH , 
 - TokenTypes . LITERAL _ CASE , 
 + TokenTypes . CASE _ GROUP , 
 TokenTypes . LITERAL _ TRY , 
 TokenTypes . LITERAL _ CATCH , 
 TokenTypes . QUESTION , 
 + TokenTypes . LITERAL _ RETURN , 
 + TokenTypes . LITERAL _ DEFAULT , 
 } ; 
 Assert . assertNotNull ( actual ) ; 
 Assert . assertArrayEquals ( expected , actual ) ; 
 @ @ - 129 , 10 + 156 , 12 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { 
 TokenTypes . LITERAL _ IF , 
 TokenTypes . LITERAL _ ELSE , 
 TokenTypes . LITERAL _ SWITCH , 
 - TokenTypes . LITERAL _ CASE , 
 + TokenTypes . CASE _ GROUP , 
 TokenTypes . LITERAL _ TRY , 
 TokenTypes . LITERAL _ CATCH , 
 TokenTypes . QUESTION , 
 + TokenTypes . LITERAL _ RETURN , 
 + TokenTypes . LITERAL _ DEFAULT , 
 } ; 
 Assert . assertNotNull ( actual ) ; 
 Assert . assertArrayEquals ( expected , actual ) ; 
 @ @ - 146 , 4 + 175 , 51 @ @ public class NPathComplexityCheckTest extends BaseCheckTestSupport { 
 npathComplexityCheckObj . visitToken ( ast ) ; 
 npathComplexityCheckObj . leaveToken ( ast ) ; 
 } 
 + 
 + @ Test 
 + public void testVisitTokenBeforeExpressionRange ( ) { 
 + / / Create first ast 
 + final DetailAST astIf = mockAST ( TokenTypes . LITERAL _ IF , " if " , " mockfile " , 2 , 2 ) ; 
 + final DetailAST astIfLeftParen = mockAST ( TokenTypes . LPAREN , " ( " , " mockfile " , 3 , 3 ) ; 
 + astIf . addChild ( astIfLeftParen ) ; 
 + final DetailAST astIfTrue = 
 + mockAST ( TokenTypes . LITERAL _ TRUE , " true " , " mockfile " , 3 , 3 ) ; 
 + astIf . addChild ( astIfTrue ) ; 
 + final DetailAST astIfRightParen = mockAST ( TokenTypes . RPAREN , " ) " , " mockfile " , 4 , 4 ) ; 
 + astIf . addChild ( astIfRightParen ) ; 
 + / / Create ternary ast 
 + final DetailAST astTernary = mockAST ( TokenTypes . QUESTION , " ? " , " mockfile " , 1 , 1 ) ; 
 + final DetailAST astTernaryTrue = 
 + mockAST ( TokenTypes . LITERAL _ TRUE , " true " , " mockfile " , 1 , 2 ) ; 
 + astTernary . addChild ( astTernaryTrue ) ; 
 + 
 + final NPathComplexityCheck mock = new NPathComplexityCheck ( ) ; 
 + / / visiting first ast , set expressionSpatialRange to [ 2 , 2 - 4 , 4 ] 
 + mock . visitToken ( astIf ) ; 
 + / / visiting ternary , it lies before expressionSpatialRange 
 + mock . visitToken ( astTernary ) ; 
 + } 
 + 
 + / * * 
 + * Creates MOCK lexical token and returns AST node for this token . 
 + * @ param tokenType type of token 
 + * @ param tokenText text of token 
 + * @ param tokenFileName file name of token 
 + * @ param tokenRow token position in a file ( row ) 
 + * @ param tokenColumn token position in a file ( column ) 
 + * @ return AST node for the token 
 + * / 
 + private static DetailAST mockAST ( final int tokenType , final String tokenText , 
 + final String tokenFileName , final int tokenRow , final int tokenColumn ) { 
 + final CommonHiddenStreamToken tokenImportSemi = new CommonHiddenStreamToken ( ) ; 
 + tokenImportSemi . setType ( tokenType ) ; 
 + tokenImportSemi . setText ( tokenText ) ; 
 + tokenImportSemi . setLine ( tokenRow ) ; 
 + tokenImportSemi . setColumn ( tokenColumn ) ; 
 + tokenImportSemi . setFilename ( tokenFileName ) ; 
 + final DetailAST astSemi = new DetailAST ( ) ; 
 + astSemi . initialize ( tokenImportSemi ) ; 
 + return astSemi ; 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java 
 index 56f095e . . 0d44a79 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexity . java 
 @ @ - 1 , 10 + 1 , 14 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 
 public class InputComplexity { 
 + / / NP = 2 
 public void foo ( ) { 
 + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 
 while ( true ) { 
 Runnable runnable = new Runnable ( ) { 
 + / / NP = 2 
 public void run ( ) { 
 + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 
 while ( true ) { 
 } 
 } 
 @ @ - 14 , 69 + 18 , 91 @ @ public class InputComplexity { 
 } 
 } 
 
 + / / NP = 10 
 public void bar ( ) { 
 + / / NP = ( if - range = 3 * 3 ) + ( expr = 0 ) + 1 = 10 
 if ( System . currentTimeMillis ( ) = = 0 ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 1 ) = 3 
 if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { 
 } 
 - 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 1 ) = 3 
 if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { 
 } 
 } 
 } 
 
 + / / NP = 3 
 public void simpleElseIf ( ) { 
 + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 
 if ( System . currentTimeMillis ( ) = = 0 ) { 
 + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 
 } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 } else { 
 } 
 } 
 
 + / / NP = 7 
 public void stupidElseIf ( ) { 
 + / / NP = ( if - range = 1 ) + ( else - range = 3 * 2 ) + ( expr = 0 ) = 7 
 if ( System . currentTimeMillis ( ) = = 0 ) { 
 } else { 
 + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + ( expr = 0 ) = 3 
 if ( System . currentTimeMillis ( ) = = 0 ) { 
 } else { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 if ( System . currentTimeMillis ( ) = = 0 ) { 
 } 
 } 
 - 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 if ( System . currentTimeMillis ( ) = = 0 ) { 
 } 
 } 
 } 
 
 + / / NP = 3 
 public InputComplexity ( ) 
 { 
 int i = 1 ; 
 + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 
 if ( System . currentTimeMillis ( ) = = 0 ) { 
 + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 
 } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 } else { 
 } 
 } 
 
 - / / STATIC _ INIT 
 + / / STATIC _ INIT 
 + / / NP = 3 
 static { 
 int i = 1 ; 
 + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 
 if ( System . currentTimeMillis ( ) = = 0 ) { 
 + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 
 } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 } else { 
 } 
 } 
 
 - / / INSTANCE _ INIT 
 + / / INSTANCE _ INIT 
 + / / NP = 3 
 { 
 int i = 1 ; 
 + / / NP = ( if - range = 1 ) + ( else - range = 2 ) + 0 = 3 
 if ( System . currentTimeMillis ( ) = = 0 ) { 
 + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 0 ) = 2 
 } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 } else { 
 } 
 } 
 
 / * * Inner * / 
 + / / NP = 0 
 public InputComplexity ( int aParam ) 
 { 
 Runnable runnable = new Runnable ( ) { 
 + / / NP = 2 
 public void run ( ) { 
 + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 
 while ( true ) { 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java 
 index f669d97 . . 6a49ca2 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputComplexityOverflow . java 
 @ @ - 6 , 15 + 6 , 27 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 * / 
 public class InputComplexityOverflow { 
 
 + / * NP = ( if - range [ 1 ] = 9 ) * ( if - range [ 2 ] = 9 ) * ( if - range [ 3 ] = 9 ) * ( if - range [ 4 ] = 9 ) 
 + * ( if - range [ 5 ] = 9 ) * ( if - range [ 6 ] = 9 ) * ( if - range [ 7 ] = 9 ) * ( if - range [ 8 ] = 9 ) 
 + * ( if - range [ 9 ] = 9 ) * ( if - range [ 10 ] = 9 ) = 3486784401 
 + * / 
 public void provokeNpathIntegerOverflow ( ) 
 { 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 if ( true ) { 
 } 
 } 
 @ @ - 24 , 13 + 36 , 21 @ @ public class InputComplexityOverflow { 
 } 
 } 
 } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 if ( true ) { 
 } 
 } 
 @ @ - 40 , 13 + 60 , 21 @ @ public class InputComplexityOverflow { 
 } 
 } 
 } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 if ( true ) { 
 } 
 } 
 @ @ - 56 , 13 + 84 , 21 @ @ public class InputComplexityOverflow { 
 } 
 } 
 } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 if ( true ) { 
 } 
 } 
 @ @ - 72 , 13 + 108 , 21 @ @ public class InputComplexityOverflow { 
 } 
 } 
 } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 if ( true ) { 
 } 
 } 
 @ @ - 88 , 13 + 132 , 21 @ @ public class InputComplexityOverflow { 
 } 
 } 
 } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 if ( true ) { 
 } 
 } 
 @ @ - 104 , 13 + 156 , 21 @ @ public class InputComplexityOverflow { 
 } 
 } 
 } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 if ( true ) { 
 } 
 } 
 @ @ - 120 , 13 + 180 , 21 @ @ public class InputComplexityOverflow { 
 } 
 } 
 } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 if ( true ) { 
 } 
 } 
 @ @ - 136 , 13 + 204 , 21 @ @ public class InputComplexityOverflow { 
 } 
 } 
 } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 if ( true ) { 
 } 
 } 
 @ @ - 152 , 13 + 228 , 21 @ @ public class InputComplexityOverflow { 
 } 
 } 
 } 
 + / / NP = ( if - range = 8 ) + 1 + ( expr = 0 ) = 9 
 if ( true ) { 
 + / / NP = ( if - range = 7 ) + 1 + ( expr = 0 ) = 8 
 if ( true ) { 
 + / / NP = ( if - range = 6 ) + 1 + ( expr = 0 ) = 7 
 if ( true ) { 
 + / / NP = ( if - range = 5 ) + 1 + ( expr = 0 ) = 6 
 if ( true ) { 
 + / / NP = ( if - range = 4 ) + 1 + ( expr = 0 ) = 5 
 if ( true ) { 
 + / / NP = ( if - range = 3 ) + 1 + ( expr = 0 ) = 4 
 if ( true ) { 
 + / / NP = ( if - range = 2 ) + 1 + ( expr = 0 ) = 3 
 if ( true ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 if ( true ) { 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputNPathComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputNPathComplexity . java 
 new file mode 100644 
 index 0000000 . . c4ce470 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / InputNPathComplexity . java 
 @ @ - 0 , 0 + 1 , 178 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 + / / Advise : for lack of ambiguity try to make all factors prime numbers 
 + public class InputNPathComplexity { 
 + / / NP = 5 
 + void testIfWithExpression ( ) { 
 + / / NP = ( if - range = 1 ) + 1 + ( expr = 3 ) = 5 
 + if ( true & & true | | ( true | | true ) ) { } 
 + } 
 + 
 + / / NP = 5 
 + void testIfElseWithExpression ( ) { 
 + / / NP = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 3 ) = 5 
 + if ( true & & true | | ( true | | true ) ) { } 
 + else { } 
 + } 
 + 
 + / / NP = 4 
 + int testSimpleSwitch ( ) { 
 + int a = 0 ; 
 + / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) 
 + / / + ( default - range = 1 ) + ( expr = 0 ) = 4 
 + switch ( a ) { 
 + case 1 : 
 + break ; 
 + case 2 : 
 + case 3 : 
 + break ; 
 + } 
 + return a ; 
 + } 
 + 
 + / / NP = 4 
 + void testSimpleSwitchWithDefault ( ) { 
 + int a = 0 ; 
 + / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) 
 + / / + ( default - range = 1 ) + ( expr = 0 ) = 4 
 + switch ( a ) { 
 + case 1 : 
 + break ; 
 + case 2 : 
 + case 3 : 
 + break ; 
 + default : 
 + break ; 
 + } 
 + } 
 + 
 + / / NP = 6 
 + void testSwitchWithExpression ( ) { 
 + int a = 0 ; 
 + / / NP = ( case - range [ 1 ] = 1 ) + ( case - range [ 2 ] = 1 ) + ( case - range [ 3 ] = 1 ) 
 + / / + ( default - range = 1 ) + ( expr = 2 ) = 6 
 + switch ( true ? a : a ) { 
 + case 1 : 
 + break ; 
 + case 2 : 
 + case 3 : 
 + break ; 
 + default : 
 + break ; 
 + } 
 + } 
 + 
 + / / NP = 15 
 + void testComplexSwitch ( ) { 
 + int a = 0 ; 
 + / / NP = ( case - range [ 1 ] = 2 ) + ( case - range [ 2 ] = 5 * 2 ) + ( case - range [ 3 ] = 2 ) 
 + / / + ( default - range = 1 ) + ( expr = 0 ) = 15 
 + switch ( a ) { 
 + case 1 : 
 + / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { } 
 + break ; 
 + case 2 : 
 + / / NP ( case - range ) = ( if - range = 1 ) + ( else - range = 1 ) + ( expr = 3 ) = 5 
 + if ( true & & true | | ( true | | true ) ) { } 
 + else { } 
 + / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { } 
 + case 3 : 
 + / / NP ( case - range ) = ( if - range = 1 ) + 1 + ( expr = 0 ) = 2 
 + if ( true ) { } 
 + break ; 
 + default : 
 + break ; 
 + } 
 + } 
 + 
 + / / NP = 11 
 + void testComplexIfElse ( ) { 
 + / / NP = ( if - range = 1 ) + ( else - range = 9 ) + ( expr = 1 ) = 11 
 + if ( true & & true ) { } 
 + / / NP ( else - range ) = ( if - range = 1 ) + ( else - range = 6 ) + ( expr = 2 ) = 9 
 + else if ( true | | true | | true ) { } 
 + / / NP ( else - range ) = ( if - range = 1 ) + 1 + ( expr = 4 ) = 6 
 + else if ( true & & true & & true | | true | | true ) { } 
 + } 
 + 
 + / / NP = 8 
 + boolean testComplexReturn ( ) { 
 + / / NP = ( if - range = 3 ) + ( else - range = 4 ) + ( expr = 1 ) = 8 
 + if ( true & & true ) { 
 + / / NP ( if - range ) = 3 
 + return true & & true | | ( true & & true ) ; 
 + } else { 
 + / / NP ( else - range ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 ) + ( expr ( 3 ) = 1 ) + 2 = 4 
 + return true ? true & & true : true | | true ; 
 + } 
 + } 
 + 
 + / / NP = ( for - statement [ 1 ] = 2 ) * ( for - statement [ 2 ] = 3 ) 
 + / / * ( for - statement [ 3 ] = 4 ) * ( for - statement [ 4 ] = 5 ) = 120 
 + void testForCyclesComplex ( ) { 
 + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 0 ) + 1 = 2 
 + for ( int i = 0 ; i < 10 ; i + + ) ; 
 + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 ) + ( expr ( 3 ) = 0 ) + 1 = 3 
 + for ( int i = 0 ; i < 10 & & true ; i + + ) ; 
 + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 2 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 0 ) + 1 = 4 
 + for ( int i = true ? 0 : 0 ; i < 10 ; i + + ) ; 
 + / / NP ( for - statement ) = ( for - range = 1 ) + ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 1 + 2 ) + ( expr ( 3 ) = 0 ) + 1 = 5 
 + for ( int i = 0 ; true ? i < 10 : true | | true ; i + + ) ; 
 + } 
 + 
 + / / NP = ( while - statement [ 1 ] = 2 ) * ( while - statement [ 2 ] = 3 ) = 6 
 + boolean testWhileCyclesComplex ( ) { 
 + int a = 0 ; 
 + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 0 ) + 1 = 2 
 + while ( a ! = 0 ) { } 
 + / / NP ( while - statement ) = ( while - range = 1 ) + ( expr = 1 ) + 1 = 3 
 + while ( a ! = 0 & & a = = 0 ) { return a = = 0 | | a = = 0 ; } 
 + return true ; 
 + } 
 + 
 + / / NP = ( do - statement [ 1 ] = 6 ) * ( do - statement [ 2 ] = 3 ) = 21 
 + void testDoWhileCyclesComplex ( ) { 
 + int a = 0 ; 
 + / / NP ( do - statement ) = ( do - range = 1 ) + ( expr = 1 ) + 1 = 3 
 + do { } while ( a < 10 & & true ) ; 
 + / / NP ( do - statement ) = 
 + / / ( do - range = 3 ) + ( ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 0 ) + ( expr ( 3 ) = 1 ) + 2 ) + 1 = 7 
 + do { 
 + / / NP ( do - range ) = ( do - range = 1 ) + ( expr = 1 ) + 1 = 3 
 + do { } while ( a < 10 | | true ) ; 
 + } while ( true ? a > 10 : ( a < 10 | | true ) ) ; 
 + } 
 + 
 + / / NP = ( question - statement [ 1 ] = 5 ) * ( question - statement [ 2 ] = 7 ) = 35 
 + void testComplexTernaryOperator ( ) { 
 + / / NP ( question - statement ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 2 ) + ( expr ( 3 ) = 1 + 2 ) + 2 = 7 
 + boolean a = true ? ( true ? true : true ) : ( false ? ( true | | false ) : true ) ; 
 + / / NP ( question - statement ) = ( expr ( 1 ) = 0 ) + ( expr ( 2 ) = 2 ) + ( expr ( 3 ) = 1 ) + 2 = 5 ; 
 + boolean b = true ? ( true ? true : true ) : true | | true ; 
 + } 
 + 
 + / / NP = ( if - expression [ 1 ] = 5 ) * ( if - expression [ 2 ] = 5 ) = 25 
 + void testSimpleTernaryBadFormatting ( ) { 
 + / / NP ( if - expression ) = ( if - range = 2 ) + 1 + ( expr = 2 ) = 5 
 + if ( 
 + true ? true : true 
 + ) { boolean a = true ? true 
 + : true ; 
 + } 
 + / / NP ( if - expression ) = ( if - range = 2 ) + 1 + ( expr = 2 ) = 5 
 + if ( 
 + true ? true : true ) { boolean b = true ? true : true ; 
 + } 
 + } 
 + 
 + / / Calculation for try - catch is wrong now 
 + / / See issue # 3814 https : / / github . com / checkstyle / checkstyle / issues / 3814 
 + void testTryCatch ( ) { 
 + try { 
 + } 
 + catch ( Exception e ) { 
 + } 
 + } 
 + 
 + } 
 diff - - git a / src / xdocs / config _ metrics . xml b / src / xdocs / config _ metrics . xml 
 index 2f71e45 . . 8a8af6e 100644 
 - - - a / src / xdocs / config _ metrics . xml 
 + + + b / src / xdocs / config _ metrics . xml 
 @ @ - 1018 , 7 + 1018 , 7 @ @ class SwitchExample { 
 The NPATH metric computes the number of possible execution 
 paths through a function ( method ) . It takes into account the nesting of 
 conditional statements and multi - part boolean expressions 
 - ( e . g . , A & amp ; & amp ; B , C | | D , etc . ) . 
 + ( A & amp ; & amp ; B , C | | D , E ? F : G and their combinations ) . 
 < br / > 
 The NPATH metric was designed base on Cyclomatic complexity to 
 avoid problem of Cyclomatic complexity metric like nesting level within a function ( method ) .

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 index d9c8b97 . . 37f29c9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 @ @ - 283 , 7 + 283 , 12 @ @ public class NeedBracesCheck extends Check { 
 else if ( literalFor . getParent ( ) . getType ( ) = = TokenTypes . SLIST 
 & & literalFor . getLastChild ( ) . getType ( ) ! = TokenTypes . SLIST ) { 
 final DetailAST block = findExpressionBlockInForLoop ( literalFor ) ; 
 - result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; 
 + if ( block = = null ) { 
 + result = literalFor . getLineNo ( ) = = literalFor . getLastChild ( ) . getLineNo ( ) ; 
 + } 
 + else { 
 + result = literalFor . getLineNo ( ) = = block . getLineNo ( ) ; 
 + } 
 } 
 return result ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 index e1d3561 . . e3b1443 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheckTest . java 
 @ @ - 67 , 10 + 67 , 11 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 " 38 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 " 46 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " while " ) , 
 " 53 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " do " ) , 
 - " 59 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , 
 - " 88 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 - " 92 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , 
 - " 104 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 + " 56 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , 
 + " 62 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " for " ) , 
 + " 91 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 + " 95 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " else " ) , 
 + " 107 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " if " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; 
 } 
 @ @ - 96 , 8 + 97 , 8 @ @ public class NeedBracesCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " tokens " , " LITERAL _ CASE , LITERAL _ DEFAULT " ) ; 
 checkConfig . addAttribute ( " allowSingleLineStatement " , " true " ) ; 
 final String [ ] expected = { 
 - " 69 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 " 72 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 + " 75 : " + getCheckMessage ( MSG _ KEY _ NEED _ BRACES , " case " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputBracesSingleLineStatements . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java 
 index 0a9c5c2 . . 9d04f7f 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputBracesSingleLineStatements . java 
 @ @ - 53 , 6 + 53 , 9 @ @ public class InputBracesSingleLineStatements 
 do 
 this . notify ( ) ; 
 while ( o ! = null ) ; 
 + for ( ; ; ) 
 + break ; 
 + for ( ; ; ) break ; 
 for ( int i = 0 ; i < 10 ; i + + ) { 
 this . notify ( ) ; 
 }
