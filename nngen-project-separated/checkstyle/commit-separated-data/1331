BLEU SCORE: 0.15270725349716185

TEST MSG: Issue # 2645 : fixed StringIndexOutOfBoundsException in Indentation check
GENERATED MSG: Add test coverage to BlockParentHandler in Indentation check . # 1270

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java <nl> index c3c3769 . . ad70a26 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java <nl> @ @ - 228 , 7 + 228 , 7 @ @ public abstract class AbstractExpressionHandler { <nl> * / <nl> protected final int getLineStart ( String line ) { <nl> int index = 0 ; <nl> - while ( Character . isWhitespace ( line . charAt ( index ) ) ) { <nl> + while ( index < line . length ( ) & & Character . isWhitespace ( line . charAt ( index ) ) ) { <nl> index + + ; <nl> } <nl> return CommonUtils . lengthExpandedTabs ( <nl> @ @ - 328 , 9 + 328 , 11 @ @ public abstract class AbstractExpressionHandler { <nl> * / <nl> private void checkLineIndent ( int lineNum , IndentLevel indentLevel ) { <nl> final String line = indentCheck . getLine ( lineNum - 1 ) ; <nl> - final int start = getLineStart ( line ) ; <nl> - if ( indentLevel . isGreaterThan ( start ) ) { <nl> - logChildError ( lineNum , start , indentLevel ) ; <nl> + if ( ! line . isEmpty ( ) ) { <nl> + final int start = getLineStart ( line ) ; <nl> + if ( indentLevel . isGreaterThan ( start ) ) { <nl> + logChildError ( lineNum , start , indentLevel ) ; <nl> + } <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index 0c123d5 . . ea9b522 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 52 , 12 + 52 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * @ author jrichard <nl> * / <nl> public class IndentationCheckTest extends BaseCheckTestSupport { <nl> - private static final Pattern NONEMPTY _ LINE _ REGEX = <nl> - Pattern . compile ( " . * ? \ \ S + . * ? " ) ; <nl> - <nl> private static final Pattern LINE _ WITH _ COMMENT _ REGEX = <nl> - Pattern . compile ( " . * ? \ \ S + . * ? ( / / indent : ( \ \ d + ) " <nl> - + " exp : ( ( > = \ \ d + ) | ( \ \ d + ( , \ \ d + ) * ? ) ) ( warn ) ? ) " ) ; <nl> + Pattern . compile ( " . * ? ( / / indent : ( \ \ d + ) " <nl> + + " exp : ( ( > = \ \ d + ) | ( \ \ d + ( , \ \ d + ) * ? ) ) ( warn ) ? ) $ " ) ; <nl> <nl> private static final Pattern GET _ INDENT _ FROM _ COMMENT _ REGEX = <nl> Pattern . compile ( " / / indent : ( \ \ d + ) . * ? " ) ; <nl> @ @ - 108 , 7 + 105 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> lineNumber ) ) ; <nl> } <nl> } <nl> - else if ( NONEMPTY _ LINE _ REGEX . matcher ( line ) . matches ( ) ) { <nl> + else if ( ! line . isEmpty ( ) ) { <nl> throw new IllegalStateException ( String . format ( Locale . ROOT , <nl> " File \ " % 1 $ s \ " has no indentation comment or its format " <nl> + " malformed . Error on line : % 2 $ d " , <nl> @ @ - 1639 , 4 + 1636 , 22 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = EMPTY _ EXPECTED ; <nl> verifyWarns ( checkConfig , getNonCompilablePath ( " InputLambda2 . java " ) , expected , 0 ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testSeparatedStatements ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( IndentationCheck . class ) ; <nl> + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> + final String fileName = getPath ( " InputSeparatedStatements . java " ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSeparatedLineWithJustSpaces ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( IndentationCheck . class ) ; <nl> + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> + final String fileName = getPath ( " InputSeparatedStatementWithSpaces . java " ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , fileName , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputFromGuava . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputFromGuava . java <nl> index 9bd30ac . . f278b50 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputFromGuava . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputFromGuava . java <nl> @ @ - 216 , 7 + 216 , 7 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > <nl> { / / indent : 2 exp : 2 <nl> return null ; / / indent : 4 exp : 4 <nl> } / / indent : 2 exp : 2 <nl> - <nl> + <nl> private static class ValueReference < T1 , T2 > { / / indent : 2 exp : 2 <nl> <nl> } / / indent : 2 exp : 2 <nl> @ @ - 239 , 7 + 239 , 7 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > <nl> } / / indent : 4 exp : 4 <nl> <nl> } / / indent : 2 exp : 2 <nl> - <nl> + <nl> private static class StrongValueReference < T1 , T2 > { / / indent : 2 exp : 2 <nl> <nl> public StrongValueReference ( int value ) / / indent : 4 exp : 4 <nl> @ @ - 248 , 7 + 248 , 7 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > <nl> } / / indent : 4 exp : 4 <nl> <nl> } / / indent : 2 exp : 2 <nl> - <nl> + <nl> private static class WeightedStrongValueReference < T1 , T2 > { / / indent : 2 exp : 2 <nl> <nl> public WeightedStrongValueReference ( int value , int weight ) / / indent : 4 exp : 4 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputSeparatedStatementWithSpaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputSeparatedStatementWithSpaces . java <nl> new file mode 100644 <nl> index 0000000 . . e169ad7 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputSeparatedStatementWithSpaces . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + / / test file has no expected comments to test out blank line with just spaces <nl> + package com . puppycrawl . tools . checkstyle . checks . indentation ; <nl> + <nl> + import java . util . * <nl> + / / next line should be empty with just spaces , indented correctly <nl> + <nl> + ; <nl> + <nl> + public class InputSeparatedStatementWithSpaces { <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputSeparatedStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputSeparatedStatements . java <nl> new file mode 100644 <nl> index 0000000 . . 1889cd5 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputSeparatedStatements . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . indentation ; / / indent : 0 exp : 0 <nl> + <nl> + import java . io . * / / indent : 0 exp : 0 <nl> + <nl> + ; / / indent : 4 exp : 4 <nl> + <nl> + import java . util . * / / indent : 0 exp : 0 <nl> + / / indent : 4 exp : 4 <nl> + ; / / indent : 4 exp : 4 <nl> + <nl> + public class InputSeparatedStatements { / / indent : 0 exp : 0 <nl> + } / / indent : 0 exp : 0
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 6ad8a45 . . d769c67 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1185 , 7 + 1185 , 7 @ @ <nl> < regex > < pattern > . * . checks . javadoc . JavadocStyleCheck < / pattern > < branchRate > 89 < / branchRate > < lineRate > 98 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . javadoc . JavadocTagContinuationIndentationCheck < / pattern > < branchRate > 81 < / branchRate > < lineRate > 86 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . javadoc . JavadocTypeCheck < / pattern > < branchRate > 95 < / branchRate > < lineRate > 93 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . checks . javadoc . JavadocUtils < / pattern > < branchRate > 94 < / branchRate > < lineRate > 98 < / lineRate > < / regex > <nl> + < regex > < pattern > . * . checks . javadoc . JavadocUtils < / pattern > < branchRate > 94 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . javadoc . SummaryJavadocCheck < / pattern > < branchRate > 93 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . javadoc . TagParser < / pattern > < branchRate > 92 < / branchRate > < lineRate > 98 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . javadoc . WriteTagCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 91 < / lineRate > < / regex > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java b / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java <nl> index 235d03d . . 8b6c551 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java <nl> @ @ - 58 , 7 + 58 , 7 @ @ public final class Utils { <nl> } <nl> <nl> final String name = f . getName ( ) ; <nl> - final int tokenValue = getTokenFieldValue ( f , name ) ; <nl> + final int tokenValue = getIntFromField ( f , name ) ; <nl> builder . put ( name , tokenValue ) ; <nl> if ( tokenValue > tempTokenValueToName . length - 1 ) { <nl> final String [ ] temp = new String [ tokenValue + 1 ] ; <nl> @ @ - 365 , 19 + 365 , 21 @ @ public final class Utils { <nl> } <nl> <nl> / * * <nl> - * That method exists as workaround for code - coverage 100 % target to let test <nl> - * catch block ( originally it was in static area ) . <nl> - * @ param field token field <nl> - * @ param name token name <nl> - * @ return value of field <nl> + * Gets the value of a static or instance field of type int or of another primitive type <nl> + * convertible to type int via a widening conversion . Does not throw any checked exceptions . <nl> + * @ param field from which the int should be extracted <nl> + * @ param object to extract the int value from <nl> + * @ return the value of the field converted to type int <nl> + * @ throws IllegalStateException if this Field object is enforcing Java language access control <nl> + * and the underlying field is inaccessible <nl> + * @ see Field # getInt ( Object ) <nl> * / <nl> - private static int getTokenFieldValue ( Field field , String name ) { <nl> + public static int getIntFromField ( Field field , Object object ) { <nl> try { <nl> - return field . getInt ( name ) ; <nl> + return field . getInt ( object ) ; <nl> } <nl> - catch ( final IllegalArgumentException | IllegalAccessException e ) { <nl> - throw new IllegalStateException ( <nl> - " Failed to instantiate collection of Java tokens " , e ) ; <nl> + catch ( final IllegalAccessException exception ) { <nl> + throw new IllegalStateException ( exception ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java <nl> index 45494f1 . . 9bf4e44 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . util . regex . Pattern ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Lists ; <nl> + import com . puppycrawl . tools . checkstyle . Utils ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTagInfo ; <nl> @ @ - 62 , 25 + 63 , 18 @ @ public final class JavadocUtils { <nl> <nl> final String name = f . getName ( ) ; <nl> <nl> - try { <nl> - final int tokenValue = f . getInt ( name ) ; <nl> - builder . put ( name , tokenValue ) ; <nl> - if ( tokenValue > tempTokenValueToName . length - 1 ) { <nl> - final String [ ] temp = new String [ tokenValue + 1 ] ; <nl> - System . arraycopy ( tempTokenValueToName , 0 , temp , 0 , tempTokenValueToName . length ) ; <nl> - tempTokenValueToName = temp ; <nl> - } <nl> - if ( tokenValue = = - 1 ) { <nl> - tempTokenValueToName [ 0 ] = name ; <nl> - } <nl> - else { <nl> - tempTokenValueToName [ tokenValue ] = name ; <nl> - } <nl> + final int tokenValue = Utils . getIntFromField ( f , name ) ; <nl> + builder . put ( name , tokenValue ) ; <nl> + if ( tokenValue > tempTokenValueToName . length - 1 ) { <nl> + final String [ ] temp = new String [ tokenValue + 1 ] ; <nl> + System . arraycopy ( tempTokenValueToName , 0 , temp , 0 , tempTokenValueToName . length ) ; <nl> + tempTokenValueToName = temp ; <nl> + } <nl> + if ( tokenValue = = - 1 ) { <nl> + tempTokenValueToName [ 0 ] = name ; <nl> } <nl> - catch ( IllegalAccessException ex ) { <nl> - / / rethrow as unchecked exception <nl> - throw new IllegalStateException ( <nl> - " Failed to instantiate collection of Javadoc tokens " , ex ) ; <nl> + else { <nl> + tempTokenValueToName [ tokenValue ] = name ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / UtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / UtilsTest . java <nl> index 39327df . . 253742b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / UtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / UtilsTest . java <nl> @ @ - 28 , 8 + 28 , 6 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . Field ; <nl> - import java . lang . reflect . InvocationTargetException ; <nl> - import java . lang . reflect . Method ; <nl> import java . lang . reflect . Modifier ; <nl> import java . util . Dictionary ; <nl> <nl> @ @ - 172 , 6 + 170 , 25 @ @ public class UtilsTest { <nl> } <nl> <nl> @ Test <nl> + public void testGetIntFromAccessibleField ( ) throws NoSuchFieldException { <nl> + Field field = Integer . class . getField ( " MAX _ VALUE " ) ; <nl> + <nl> + assertEquals ( Integer . MAX _ VALUE , Utils . getIntFromField ( field , 0 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetIntFromInaccessibleField ( ) throws NoSuchFieldException { <nl> + Field field = Integer . class . getDeclaredField ( " value " ) ; <nl> + <nl> + try { <nl> + Utils . getIntFromField ( field , 0 ) ; <nl> + } <nl> + catch ( IllegalStateException expected ) { <nl> + / / expected <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> public void testTokenValueIncorrect ( ) throws NoSuchMethodException { <nl> Integer id = Integer . MAX _ VALUE - 1 ; <nl> try { <nl> @ @ - 252 , 29 + 269 , 4 @ @ public class UtilsTest { <nl> Assert . assertTrue ( Utils . isCommentType ( TokenTypes . BLOCK _ COMMENT _ END ) ) ; <nl> Assert . assertTrue ( Utils . isCommentType ( TokenTypes . COMMENT _ CONTENT ) ) ; <nl> } <nl> - <nl> - @ Test <nl> - public void testGetTokenFieldValue ( ) throws NoSuchMethodException { <nl> - Integer id = 0 ; <nl> - try { <nl> - / / overwrite static field with new value <nl> - Method method = Utils . class . getDeclaredMethod ( " getTokenFieldValue " , <nl> - Field . class , String . class ) ; <nl> - method . setAccessible ( true ) ; <nl> - method . invoke ( null , Field . class . getDeclaredField ( " modifiers " ) , " smth _ strange " ) ; <nl> - <nl> - fail ( ) ; <nl> - } <nl> - catch ( InvocationTargetException expected ) { <nl> - / / in method we throw IllegalStateException , <nl> - / / but JDK wrap that in InvocationTargetException <nl> - assertEquals ( IllegalStateException . class , expected . getCause ( ) . getClass ( ) ) ; <nl> - assertEquals ( " Failed to instantiate collection of Java tokens " , <nl> - expected . getCause ( ) . getMessage ( ) ) ; <nl> - } <nl> - catch ( Exception e ) { <nl> - fail ( ) ; <nl> - } <nl> - } <nl> - <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java 
 index c3c3769 . . ad70a26 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java 
 @ @ - 228 , 7 + 228 , 7 @ @ public abstract class AbstractExpressionHandler { 
 * / 
 protected final int getLineStart ( String line ) { 
 int index = 0 ; 
 - while ( Character . isWhitespace ( line . charAt ( index ) ) ) { 
 + while ( index < line . length ( ) & & Character . isWhitespace ( line . charAt ( index ) ) ) { 
 index + + ; 
 } 
 return CommonUtils . lengthExpandedTabs ( 
 @ @ - 328 , 9 + 328 , 11 @ @ public abstract class AbstractExpressionHandler { 
 * / 
 private void checkLineIndent ( int lineNum , IndentLevel indentLevel ) { 
 final String line = indentCheck . getLine ( lineNum - 1 ) ; 
 - final int start = getLineStart ( line ) ; 
 - if ( indentLevel . isGreaterThan ( start ) ) { 
 - logChildError ( lineNum , start , indentLevel ) ; 
 + if ( ! line . isEmpty ( ) ) { 
 + final int start = getLineStart ( line ) ; 
 + if ( indentLevel . isGreaterThan ( start ) ) { 
 + logChildError ( lineNum , start , indentLevel ) ; 
 + } 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index 0c123d5 . . ea9b522 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 52 , 12 + 52 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * @ author jrichard 
 * / 
 public class IndentationCheckTest extends BaseCheckTestSupport { 
 - private static final Pattern NONEMPTY _ LINE _ REGEX = 
 - Pattern . compile ( " . * ? \ \ S + . * ? " ) ; 
 - 
 private static final Pattern LINE _ WITH _ COMMENT _ REGEX = 
 - Pattern . compile ( " . * ? \ \ S + . * ? ( / / indent : ( \ \ d + ) " 
 - + " exp : ( ( > = \ \ d + ) | ( \ \ d + ( , \ \ d + ) * ? ) ) ( warn ) ? ) " ) ; 
 + Pattern . compile ( " . * ? ( / / indent : ( \ \ d + ) " 
 + + " exp : ( ( > = \ \ d + ) | ( \ \ d + ( , \ \ d + ) * ? ) ) ( warn ) ? ) $ " ) ; 
 
 private static final Pattern GET _ INDENT _ FROM _ COMMENT _ REGEX = 
 Pattern . compile ( " / / indent : ( \ \ d + ) . * ? " ) ; 
 @ @ - 108 , 7 + 105 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 lineNumber ) ) ; 
 } 
 } 
 - else if ( NONEMPTY _ LINE _ REGEX . matcher ( line ) . matches ( ) ) { 
 + else if ( ! line . isEmpty ( ) ) { 
 throw new IllegalStateException ( String . format ( Locale . ROOT , 
 " File \ " % 1 $ s \ " has no indentation comment or its format " 
 + " malformed . Error on line : % 2 $ d " , 
 @ @ - 1639 , 4 + 1636 , 22 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = EMPTY _ EXPECTED ; 
 verifyWarns ( checkConfig , getNonCompilablePath ( " InputLambda2 . java " ) , expected , 0 ) ; 
 } 
 + 
 + @ Test 
 + public void testSeparatedStatements ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( IndentationCheck . class ) ; 
 + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 + final String fileName = getPath ( " InputSeparatedStatements . java " ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testSeparatedLineWithJustSpaces ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( IndentationCheck . class ) ; 
 + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 + final String fileName = getPath ( " InputSeparatedStatementWithSpaces . java " ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , fileName , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputFromGuava . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputFromGuava . java 
 index 9bd30ac . . f278b50 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputFromGuava . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputFromGuava . java 
 @ @ - 216 , 7 + 216 , 7 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > 
 { / / indent : 2 exp : 2 
 return null ; / / indent : 4 exp : 4 
 } / / indent : 2 exp : 2 
 - 
 + 
 private static class ValueReference < T1 , T2 > { / / indent : 2 exp : 2 
 
 } / / indent : 2 exp : 2 
 @ @ - 239 , 7 + 239 , 7 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > 
 } / / indent : 4 exp : 4 
 
 } / / indent : 2 exp : 2 
 - 
 + 
 private static class StrongValueReference < T1 , T2 > { / / indent : 2 exp : 2 
 
 public StrongValueReference ( int value ) / / indent : 4 exp : 4 
 @ @ - 248 , 7 + 248 , 7 @ @ class LocalCache < K , V > extends AbstractMap < K , V > implements ConcurrentMap < K , V > 
 } / / indent : 4 exp : 4 
 
 } / / indent : 2 exp : 2 
 - 
 + 
 private static class WeightedStrongValueReference < T1 , T2 > { / / indent : 2 exp : 2 
 
 public WeightedStrongValueReference ( int value , int weight ) / / indent : 4 exp : 4 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputSeparatedStatementWithSpaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputSeparatedStatementWithSpaces . java 
 new file mode 100644 
 index 0000000 . . e169ad7 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputSeparatedStatementWithSpaces . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + / / test file has no expected comments to test out blank line with just spaces 
 + package com . puppycrawl . tools . checkstyle . checks . indentation ; 
 + 
 + import java . util . * 
 + / / next line should be empty with just spaces , indented correctly 
 + 
 + ; 
 + 
 + public class InputSeparatedStatementWithSpaces { 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputSeparatedStatements . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputSeparatedStatements . java 
 new file mode 100644 
 index 0000000 . . 1889cd5 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputSeparatedStatements . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . indentation ; / / indent : 0 exp : 0 
 + 
 + import java . io . * / / indent : 0 exp : 0 
 + 
 + ; / / indent : 4 exp : 4 
 + 
 + import java . util . * / / indent : 0 exp : 0 
 + / / indent : 4 exp : 4 
 + ; / / indent : 4 exp : 4 
 + 
 + public class InputSeparatedStatements { / / indent : 0 exp : 0 
 + } / / indent : 0 exp : 0

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 6ad8a45 . . d769c67 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1185 , 7 + 1185 , 7 @ @ 
 < regex > < pattern > . * . checks . javadoc . JavadocStyleCheck < / pattern > < branchRate > 89 < / branchRate > < lineRate > 98 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . javadoc . JavadocTagContinuationIndentationCheck < / pattern > < branchRate > 81 < / branchRate > < lineRate > 86 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . javadoc . JavadocTypeCheck < / pattern > < branchRate > 95 < / branchRate > < lineRate > 93 < / lineRate > < / regex > 
 - < regex > < pattern > . * . checks . javadoc . JavadocUtils < / pattern > < branchRate > 94 < / branchRate > < lineRate > 98 < / lineRate > < / regex > 
 + < regex > < pattern > . * . checks . javadoc . JavadocUtils < / pattern > < branchRate > 94 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . javadoc . SummaryJavadocCheck < / pattern > < branchRate > 93 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . javadoc . TagParser < / pattern > < branchRate > 92 < / branchRate > < lineRate > 98 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . javadoc . WriteTagCheck < / pattern > < branchRate > 100 < / branchRate > < lineRate > 91 < / lineRate > < / regex > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java b / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java 
 index 235d03d . . 8b6c551 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java 
 @ @ - 58 , 7 + 58 , 7 @ @ public final class Utils { 
 } 
 
 final String name = f . getName ( ) ; 
 - final int tokenValue = getTokenFieldValue ( f , name ) ; 
 + final int tokenValue = getIntFromField ( f , name ) ; 
 builder . put ( name , tokenValue ) ; 
 if ( tokenValue > tempTokenValueToName . length - 1 ) { 
 final String [ ] temp = new String [ tokenValue + 1 ] ; 
 @ @ - 365 , 19 + 365 , 21 @ @ public final class Utils { 
 } 
 
 / * * 
 - * That method exists as workaround for code - coverage 100 % target to let test 
 - * catch block ( originally it was in static area ) . 
 - * @ param field token field 
 - * @ param name token name 
 - * @ return value of field 
 + * Gets the value of a static or instance field of type int or of another primitive type 
 + * convertible to type int via a widening conversion . Does not throw any checked exceptions . 
 + * @ param field from which the int should be extracted 
 + * @ param object to extract the int value from 
 + * @ return the value of the field converted to type int 
 + * @ throws IllegalStateException if this Field object is enforcing Java language access control 
 + * and the underlying field is inaccessible 
 + * @ see Field # getInt ( Object ) 
 * / 
 - private static int getTokenFieldValue ( Field field , String name ) { 
 + public static int getIntFromField ( Field field , Object object ) { 
 try { 
 - return field . getInt ( name ) ; 
 + return field . getInt ( object ) ; 
 } 
 - catch ( final IllegalArgumentException | IllegalAccessException e ) { 
 - throw new IllegalStateException ( 
 - " Failed to instantiate collection of Java tokens " , e ) ; 
 + catch ( final IllegalAccessException exception ) { 
 + throw new IllegalStateException ( exception ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java 
 index 45494f1 . . 9bf4e44 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocUtils . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . util . regex . Pattern ; 
 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . Lists ; 
 + import com . puppycrawl . tools . checkstyle . Utils ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTagInfo ; 
 @ @ - 62 , 25 + 63 , 18 @ @ public final class JavadocUtils { 
 
 final String name = f . getName ( ) ; 
 
 - try { 
 - final int tokenValue = f . getInt ( name ) ; 
 - builder . put ( name , tokenValue ) ; 
 - if ( tokenValue > tempTokenValueToName . length - 1 ) { 
 - final String [ ] temp = new String [ tokenValue + 1 ] ; 
 - System . arraycopy ( tempTokenValueToName , 0 , temp , 0 , tempTokenValueToName . length ) ; 
 - tempTokenValueToName = temp ; 
 - } 
 - if ( tokenValue = = - 1 ) { 
 - tempTokenValueToName [ 0 ] = name ; 
 - } 
 - else { 
 - tempTokenValueToName [ tokenValue ] = name ; 
 - } 
 + final int tokenValue = Utils . getIntFromField ( f , name ) ; 
 + builder . put ( name , tokenValue ) ; 
 + if ( tokenValue > tempTokenValueToName . length - 1 ) { 
 + final String [ ] temp = new String [ tokenValue + 1 ] ; 
 + System . arraycopy ( tempTokenValueToName , 0 , temp , 0 , tempTokenValueToName . length ) ; 
 + tempTokenValueToName = temp ; 
 + } 
 + if ( tokenValue = = - 1 ) { 
 + tempTokenValueToName [ 0 ] = name ; 
 } 
 - catch ( IllegalAccessException ex ) { 
 - / / rethrow as unchecked exception 
 - throw new IllegalStateException ( 
 - " Failed to instantiate collection of Javadoc tokens " , ex ) ; 
 + else { 
 + tempTokenValueToName [ tokenValue ] = name ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / UtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / UtilsTest . java 
 index 39327df . . 253742b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / UtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / UtilsTest . java 
 @ @ - 28 , 8 + 28 , 6 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . Field ; 
 - import java . lang . reflect . InvocationTargetException ; 
 - import java . lang . reflect . Method ; 
 import java . lang . reflect . Modifier ; 
 import java . util . Dictionary ; 
 
 @ @ - 172 , 6 + 170 , 25 @ @ public class UtilsTest { 
 } 
 
 @ Test 
 + public void testGetIntFromAccessibleField ( ) throws NoSuchFieldException { 
 + Field field = Integer . class . getField ( " MAX _ VALUE " ) ; 
 + 
 + assertEquals ( Integer . MAX _ VALUE , Utils . getIntFromField ( field , 0 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetIntFromInaccessibleField ( ) throws NoSuchFieldException { 
 + Field field = Integer . class . getDeclaredField ( " value " ) ; 
 + 
 + try { 
 + Utils . getIntFromField ( field , 0 ) ; 
 + } 
 + catch ( IllegalStateException expected ) { 
 + / / expected 
 + } 
 + } 
 + 
 + @ Test 
 public void testTokenValueIncorrect ( ) throws NoSuchMethodException { 
 Integer id = Integer . MAX _ VALUE - 1 ; 
 try { 
 @ @ - 252 , 29 + 269 , 4 @ @ public class UtilsTest { 
 Assert . assertTrue ( Utils . isCommentType ( TokenTypes . BLOCK _ COMMENT _ END ) ) ; 
 Assert . assertTrue ( Utils . isCommentType ( TokenTypes . COMMENT _ CONTENT ) ) ; 
 } 
 - 
 - @ Test 
 - public void testGetTokenFieldValue ( ) throws NoSuchMethodException { 
 - Integer id = 0 ; 
 - try { 
 - / / overwrite static field with new value 
 - Method method = Utils . class . getDeclaredMethod ( " getTokenFieldValue " , 
 - Field . class , String . class ) ; 
 - method . setAccessible ( true ) ; 
 - method . invoke ( null , Field . class . getDeclaredField ( " modifiers " ) , " smth _ strange " ) ; 
 - 
 - fail ( ) ; 
 - } 
 - catch ( InvocationTargetException expected ) { 
 - / / in method we throw IllegalStateException , 
 - / / but JDK wrap that in InvocationTargetException 
 - assertEquals ( IllegalStateException . class , expected . getCause ( ) . getClass ( ) ) ; 
 - assertEquals ( " Failed to instantiate collection of Java tokens " , 
 - expected . getCause ( ) . getMessage ( ) ) ; 
 - } 
 - catch ( Exception e ) { 
 - fail ( ) ; 
 - } 
 - } 
 - 
 }
