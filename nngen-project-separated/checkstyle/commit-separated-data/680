BLEU SCORE: 0.06837203339116285

TEST MSG: Issue # 4606 : Support parameter imports for block - level javadoc tags
GENERATED MSG: Issue # 3157 : Javadoc value tag can reference import

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java <nl> index 4813cf6 . . b18f5b7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> <nl> + import java . util . ArrayList ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> @ @ - 248 , 15 + 249 , 15 @ @ public class UnusedImportsCheck extends AbstractCheck { <nl> * / <nl> private static Set < String > collectReferencesFromJavadoc ( TextBlock textBlock ) { <nl> final Set < String > references = new HashSet < > ( ) ; <nl> - / / process all the @ link type tags <nl> + final List < JavadocTag > tags = new ArrayList < > ( ) ; <nl> + / / gather all the inline tags , like @ link <nl> / / INLINE tags inside BLOCKs get hidden when using ALL <nl> - getValidTags ( textBlock , JavadocUtils . JavadocTagType . INLINE ) . stream ( ) <nl> + tags . addAll ( getValidTags ( textBlock , JavadocUtils . JavadocTagType . INLINE ) ) ; <nl> + / / gather all the block - level tags , like @ throws and @ see <nl> + tags . addAll ( getValidTags ( textBlock , JavadocUtils . JavadocTagType . BLOCK ) ) ; <nl> + tags . stream ( ) <nl> . filter ( JavadocTag : : canReferenceImports ) <nl> . forEach ( tag - > references . addAll ( processJavadocTag ( tag ) ) ) ; <nl> - / / process all the @ throws type tags <nl> - getValidTags ( textBlock , JavadocUtils . JavadocTagType . BLOCK ) . stream ( ) <nl> - . filter ( JavadocTag : : canReferenceImports ) <nl> - . forEach ( tag - > references . addAll ( matchPattern ( tag . getFirstArg ( ) , FIRST _ CLASS _ NAME ) ) ) ; <nl> return references ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java <nl> index c684b7e . . 3a8cde2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java <nl> @ @ - 114 , 6 + 114 , 13 @ @ public class UnusedImportsCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testProcessJavadocWithBlockTagContainingMethodParameters ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( UnusedImportsCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputUnusedImportWithBlockMethodParameters . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testAnnotations ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( UnusedImportsCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / unusedimports / InputUnusedImportWithBlockMethodParameters . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / unusedimports / InputUnusedImportWithBlockMethodParameters . java <nl> new file mode 100644 <nl> index 0000000 . . e176ca1 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / unusedimports / InputUnusedImportWithBlockMethodParameters . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports . unusedimports ; <nl> + <nl> + import java . util . Collection ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + public class InputUnusedImportWithBlockMethodParameters { <nl> + <nl> + / * * <nl> + * @ see ExecutorService # invokeAll ( Collection , long , TimeUnit ) <nl> + * / <nl> + public int calculate ( ) { <nl> + return 0 ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / config / findbugs - exclude . xml b / config / findbugs - exclude . xml <nl> index 78c1920 . . 05a337e 100644 <nl> - - - a / config / findbugs - exclude . xml <nl> + + + b / config / findbugs - exclude . xml <nl> @ @ - 77 , 6 + 77 , 7 @ @ <nl> < ! - - false positive , beginTree is a kind of constructor for Checks - - > <nl> < Or > <nl> < Class name = " com . puppycrawl . tools . checkstyle . checks . AbstractDeclarationCollector " / > <nl> + < Class name = " com . puppycrawl . tools . checkstyle . checks . AvoidEscapedUnicodeCharactersCheck " / > <nl> < Class name = " com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck " / > <nl> < Class name = " com . puppycrawl . tools . checkstyle . checks . coding . DeclarationOrderCheck " / > <nl> < Class name = " com . puppycrawl . tools . checkstyle . checks . OuterTypeFilenameCheck " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> index ee7f03f . . 393081c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> @ @ - 19 , 11 + 19 , 14 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TextBlock ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> @ @ - 121 , 10 + 124 , 6 @ @ public class AvoidEscapedUnicodeCharactersCheck <nl> + " | 180 ( e | E ) | 200 [ b - fB - F ] | 202 [ b - eB - E ] | 206 [ 0 - 4a - fA - F ] " <nl> + " | [ fF ] { 3 } [ 9a - bA - B ] | [ fF ] [ eE ] [ fF ] { 2 } ) " ) ; <nl> <nl> - / * * Regular expression for trail comment . * / <nl> - private static final Pattern COMMENT _ REGEXP = Pattern . compile ( " ; [ ] * / / + " <nl> - + " [ a - zA - Z0 - 9 ] * | ; [ ] * / [ * ] + [ a - zA - Z0 - 9 ] * " ) ; <nl> - <nl> / * * Regular expression for all escaped chars . * / <nl> private static final Pattern ALL _ ESCAPED _ CHARS = <nl> Pattern . compile ( " ^ ( ( \ \ \ \ u ) [ a - fA - F0 - 9 ] { 4 } " <nl> @ @ - 152 , 6 + 151 , 11 @ @ public class AvoidEscapedUnicodeCharactersCheck <nl> + " | \ \ \ \ u2028 | \ \ \ \ u2007 | \ \ \ \ u2004 | \ \ \ \ u2028 | \ \ \ \ u2007 | \ \ \ \ u2025 " <nl> + " | \ \ \ \ u ( f | F ) { 2 } 0 ( e | E ) | \ \ \ \ u ( f | F ) { 2 } 61 " ) ; <nl> <nl> + / * * Cpp style comments . * / <nl> + private Map < Integer , TextBlock > singlelineComments ; <nl> + / * * C style comments . * / <nl> + private Map < Integer , List < TextBlock > > blockComments ; <nl> + <nl> / * * Allow use escapes for non - printable ( control ) characters . * / <nl> private boolean allowEscapesForControlCharacters ; <nl> <nl> @ @ - 212 , 6 + 216 , 12 @ @ public class AvoidEscapedUnicodeCharactersCheck <nl> } <nl> <nl> @ Override <nl> + public void beginTree ( DetailAST rootAST ) { <nl> + singlelineComments = getFileContents ( ) . getCppComments ( ) ; <nl> + blockComments = getFileContents ( ) . getCComments ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> <nl> final String literal = ast . getText ( ) ; <nl> @ @ - 255 , 34 + 265 , 34 @ @ public class AvoidEscapedUnicodeCharactersCheck <nl> * @ return true if trail comment is present after ast token . <nl> * / <nl> private boolean hasTrailComment ( DetailAST ast ) { <nl> - final DetailAST variableDef = getVariableDef ( ast ) ; <nl> - DetailAST semi ; <nl> - <nl> - if ( variableDef = = null ) { <nl> - semi = getSemi ( ast ) ; <nl> + boolean result = false ; <nl> + final int lineNo = ast . getLineNo ( ) ; <nl> + if ( singlelineComments . containsKey ( lineNo ) ) { <nl> + result = true ; <nl> } <nl> else { <nl> - semi = variableDef . getNextSibling ( ) ; <nl> - <nl> - if ( semi . getType ( ) ! = TokenTypes . SEMI ) { <nl> - semi = variableDef . getLastChild ( ) ; <nl> + final String line = getLines ( ) [ lineNo - 1 ] ; <nl> + final List < TextBlock > commentList = blockComments . get ( lineNo ) ; <nl> + if ( commentList ! = null ) { <nl> + final TextBlock comment = commentList . get ( commentList . size ( ) - 1 ) ; <nl> + result = isTrailingCComent ( comment , line ) ; <nl> } <nl> } <nl> - <nl> - boolean result = false ; <nl> - if ( semi ! = null ) { <nl> - final int lineNo = semi . getLineNo ( ) ; <nl> - final String currentLine = getLine ( lineNo - 1 ) ; <nl> - <nl> - if ( COMMENT _ REGEXP . matcher ( currentLine ) . find ( ) ) { <nl> - result = true ; <nl> - } <nl> - } <nl> - <nl> return result ; <nl> } <nl> <nl> / * * <nl> + * Whether the C style comment is trailing . <nl> + * @ param comment the comment to check . <nl> + * @ param line the line where the comment starts . <nl> + * @ return true if the comment is trailing . <nl> + * / <nl> + private static boolean isTrailingCComent ( TextBlock comment , String line ) { <nl> + return comment . getText ( ) . length ! = 1 <nl> + | | line . substring ( comment . getEndColNo ( ) + 1 ) . trim ( ) . isEmpty ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Count regexp matches into String literal . <nl> * @ param pattern pattern . <nl> * @ param target String literal . <nl> @ @ - 298 , 37 + 308 , 6 @ @ public class AvoidEscapedUnicodeCharactersCheck <nl> } <nl> <nl> / * * <nl> - * Get variable definition . <nl> - * @ param ast current token . <nl> - * @ return variable definition . <nl> - * / <nl> - private static DetailAST getVariableDef ( DetailAST ast ) { <nl> - DetailAST result = ast . getParent ( ) ; <nl> - while ( result ! = null <nl> - & & result . getType ( ) ! = TokenTypes . VARIABLE _ DEF ) { <nl> - result = result . getParent ( ) ; <nl> - } <nl> - return result ; <nl> - } <nl> - <nl> - / * * <nl> - * Get semi token . <nl> - * @ param ast current token . <nl> - * @ return semi token or null . <nl> - * / <nl> - private static DetailAST getSemi ( DetailAST ast ) { <nl> - DetailAST result = ast . getParent ( ) ; <nl> - while ( result ! = null <nl> - & & result . getLastChild ( ) . getType ( ) ! = TokenTypes . SEMI ) { <nl> - result = result . getParent ( ) ; <nl> - } <nl> - if ( result ! = null ) { <nl> - result = result . getLastChild ( ) ; <nl> - } <nl> - return result ; <nl> - } <nl> - <nl> - / * * <nl> * Checks if all characters in String literal is escaped . <nl> * @ param literal current literal . <nl> * @ return true if all characters in String literal is escaped . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> index 79170d8 . . 563e673 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> @ @ - 79 , 6 + 79 , 14 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport <nl> " 77 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 79 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 82 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 86 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 87 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 88 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 89 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 92 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 93 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 94 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 98 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; <nl> } <nl> @ @ - 112 , 6 + 120 , 13 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport <nl> " 77 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 79 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 82 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 86 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 87 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 88 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 89 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 92 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 94 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 98 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; <nl> } <nl> @ @ - 132 , 7 + 147 , 6 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport <nl> " 60 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 61 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 62 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 72 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 73 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 74 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 75 : " + getCheckMessage ( MSG _ KEY ) , <nl> @ @ - 140 , 6 + 154 , 8 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport <nl> " 77 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 79 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 82 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 92 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 98 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; <nl> } <nl> @ @ - 159 , 6 + 175 , 11 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport <nl> " 32 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 33 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 42 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 86 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 87 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 88 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 89 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 98 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; <nl> } <nl> @ @ - 181 , 6 + 202 , 13 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport <nl> " 33 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 34 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 42 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 86 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 87 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 88 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 89 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 93 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 94 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 98 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAvoidEscapedUnicodeCharacters . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAvoidEscapedUnicodeCharacters . java <nl> index d7b7e74 . . 63bbb97 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAvoidEscapedUnicodeCharacters . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAvoidEscapedUnicodeCharacters . java <nl> @ @ - 69 , 7 + 69 , 7 @ @ public class InputAvoidEscapedUnicodeCharacters { <nl> 	 case ' \ f ' : <nl> 	 case ' \ r ' : <nl> 	 case ' ' : <nl> - 	 case ' \ u0085 ' : <nl> + 	 case ' \ u0085 ' : / / some comment <nl> 	 case ' \ u1680 ' : <nl> 	 case ' \ u2028 ' : <nl> 	 case ' \ u2029 ' : <nl> @ @ - 82 , 4 + 82 , 18 @ @ public class InputAvoidEscapedUnicodeCharacters { <nl> 	 return c > = ' \ u2000 ' & & c < = ' \ u200a ' ; <nl> 	 } <nl> 	 } <nl> + <nl> + 	 private String unitAbbrev5 = " \ u03bcs " ; 	 / / comment is separated by space + tab <nl> + 	 private String unitAbbrev6 = " \ u03bcs " ; 	 / / comment is separated by tab <nl> + 	 private String unitAbbrev7 = " \ u03bcs " ; 	 / * comment is separated by tab * / <nl> + 	 private String unitAbbrev8 = " \ u03bcs " ; / * comment <nl> + 	 has 2 lines * / <nl> + 	 void foo ( ) { <nl> + 	 	 for ( char c = ' \ u0000 ' ; c < ' \ uffff ' ; c + + ) { <nl> + 	 	 	 if ( c = = ' \ u001b ' | | / / ESC <nl> + 	 	 	 	 	 c = = ' \ u2014 ' ) / / Em - Dash ? <nl> + 	 	 	 	 continue ; <nl> + 	 	 } <nl> + 	 } <nl> + 	 private String unitAbbrev9 = " \ u03bcs " ; / * comment * / int i ; <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java 
 index 4813cf6 . . b18f5b7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheck . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . imports ; 
 
 + import java . util . ArrayList ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . Set ; 
 @ @ - 248 , 15 + 249 , 15 @ @ public class UnusedImportsCheck extends AbstractCheck { 
 * / 
 private static Set < String > collectReferencesFromJavadoc ( TextBlock textBlock ) { 
 final Set < String > references = new HashSet < > ( ) ; 
 - / / process all the @ link type tags 
 + final List < JavadocTag > tags = new ArrayList < > ( ) ; 
 + / / gather all the inline tags , like @ link 
 / / INLINE tags inside BLOCKs get hidden when using ALL 
 - getValidTags ( textBlock , JavadocUtils . JavadocTagType . INLINE ) . stream ( ) 
 + tags . addAll ( getValidTags ( textBlock , JavadocUtils . JavadocTagType . INLINE ) ) ; 
 + / / gather all the block - level tags , like @ throws and @ see 
 + tags . addAll ( getValidTags ( textBlock , JavadocUtils . JavadocTagType . BLOCK ) ) ; 
 + tags . stream ( ) 
 . filter ( JavadocTag : : canReferenceImports ) 
 . forEach ( tag - > references . addAll ( processJavadocTag ( tag ) ) ) ; 
 - / / process all the @ throws type tags 
 - getValidTags ( textBlock , JavadocUtils . JavadocTagType . BLOCK ) . stream ( ) 
 - . filter ( JavadocTag : : canReferenceImports ) 
 - . forEach ( tag - > references . addAll ( matchPattern ( tag . getFirstArg ( ) , FIRST _ CLASS _ NAME ) ) ) ; 
 return references ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java 
 index c684b7e . . 3a8cde2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / UnusedImportsCheckTest . java 
 @ @ - 114 , 6 + 114 , 13 @ @ public class UnusedImportsCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public void testProcessJavadocWithBlockTagContainingMethodParameters ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( UnusedImportsCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputUnusedImportWithBlockMethodParameters . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testAnnotations ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( UnusedImportsCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / unusedimports / InputUnusedImportWithBlockMethodParameters . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / unusedimports / InputUnusedImportWithBlockMethodParameters . java 
 new file mode 100644 
 index 0000000 . . e176ca1 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / unusedimports / InputUnusedImportWithBlockMethodParameters . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports . unusedimports ; 
 + 
 + import java . util . Collection ; 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + public class InputUnusedImportWithBlockMethodParameters { 
 + 
 + / * * 
 + * @ see ExecutorService # invokeAll ( Collection , long , TimeUnit ) 
 + * / 
 + public int calculate ( ) { 
 + return 0 ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / config / findbugs - exclude . xml b / config / findbugs - exclude . xml 
 index 78c1920 . . 05a337e 100644 
 - - - a / config / findbugs - exclude . xml 
 + + + b / config / findbugs - exclude . xml 
 @ @ - 77 , 6 + 77 , 7 @ @ 
 < ! - - false positive , beginTree is a kind of constructor for Checks - - > 
 < Or > 
 < Class name = " com . puppycrawl . tools . checkstyle . checks . AbstractDeclarationCollector " / > 
 + < Class name = " com . puppycrawl . tools . checkstyle . checks . AvoidEscapedUnicodeCharactersCheck " / > 
 < Class name = " com . puppycrawl . tools . checkstyle . checks . coding . RequireThisCheck " / > 
 < Class name = " com . puppycrawl . tools . checkstyle . checks . coding . DeclarationOrderCheck " / > 
 < Class name = " com . puppycrawl . tools . checkstyle . checks . OuterTypeFilenameCheck " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 index ee7f03f . . 393081c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 @ @ - 19 , 11 + 19 , 14 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 + import java . util . List ; 
 + import java . util . Map ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TextBlock ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 @ @ - 121 , 10 + 124 , 6 @ @ public class AvoidEscapedUnicodeCharactersCheck 
 + " | 180 ( e | E ) | 200 [ b - fB - F ] | 202 [ b - eB - E ] | 206 [ 0 - 4a - fA - F ] " 
 + " | [ fF ] { 3 } [ 9a - bA - B ] | [ fF ] [ eE ] [ fF ] { 2 } ) " ) ; 
 
 - / * * Regular expression for trail comment . * / 
 - private static final Pattern COMMENT _ REGEXP = Pattern . compile ( " ; [ ] * / / + " 
 - + " [ a - zA - Z0 - 9 ] * | ; [ ] * / [ * ] + [ a - zA - Z0 - 9 ] * " ) ; 
 - 
 / * * Regular expression for all escaped chars . * / 
 private static final Pattern ALL _ ESCAPED _ CHARS = 
 Pattern . compile ( " ^ ( ( \ \ \ \ u ) [ a - fA - F0 - 9 ] { 4 } " 
 @ @ - 152 , 6 + 151 , 11 @ @ public class AvoidEscapedUnicodeCharactersCheck 
 + " | \ \ \ \ u2028 | \ \ \ \ u2007 | \ \ \ \ u2004 | \ \ \ \ u2028 | \ \ \ \ u2007 | \ \ \ \ u2025 " 
 + " | \ \ \ \ u ( f | F ) { 2 } 0 ( e | E ) | \ \ \ \ u ( f | F ) { 2 } 61 " ) ; 
 
 + / * * Cpp style comments . * / 
 + private Map < Integer , TextBlock > singlelineComments ; 
 + / * * C style comments . * / 
 + private Map < Integer , List < TextBlock > > blockComments ; 
 + 
 / * * Allow use escapes for non - printable ( control ) characters . * / 
 private boolean allowEscapesForControlCharacters ; 
 
 @ @ - 212 , 6 + 216 , 12 @ @ public class AvoidEscapedUnicodeCharactersCheck 
 } 
 
 @ Override 
 + public void beginTree ( DetailAST rootAST ) { 
 + singlelineComments = getFileContents ( ) . getCppComments ( ) ; 
 + blockComments = getFileContents ( ) . getCComments ( ) ; 
 + } 
 + 
 + @ Override 
 public void visitToken ( DetailAST ast ) { 
 
 final String literal = ast . getText ( ) ; 
 @ @ - 255 , 34 + 265 , 34 @ @ public class AvoidEscapedUnicodeCharactersCheck 
 * @ return true if trail comment is present after ast token . 
 * / 
 private boolean hasTrailComment ( DetailAST ast ) { 
 - final DetailAST variableDef = getVariableDef ( ast ) ; 
 - DetailAST semi ; 
 - 
 - if ( variableDef = = null ) { 
 - semi = getSemi ( ast ) ; 
 + boolean result = false ; 
 + final int lineNo = ast . getLineNo ( ) ; 
 + if ( singlelineComments . containsKey ( lineNo ) ) { 
 + result = true ; 
 } 
 else { 
 - semi = variableDef . getNextSibling ( ) ; 
 - 
 - if ( semi . getType ( ) ! = TokenTypes . SEMI ) { 
 - semi = variableDef . getLastChild ( ) ; 
 + final String line = getLines ( ) [ lineNo - 1 ] ; 
 + final List < TextBlock > commentList = blockComments . get ( lineNo ) ; 
 + if ( commentList ! = null ) { 
 + final TextBlock comment = commentList . get ( commentList . size ( ) - 1 ) ; 
 + result = isTrailingCComent ( comment , line ) ; 
 } 
 } 
 - 
 - boolean result = false ; 
 - if ( semi ! = null ) { 
 - final int lineNo = semi . getLineNo ( ) ; 
 - final String currentLine = getLine ( lineNo - 1 ) ; 
 - 
 - if ( COMMENT _ REGEXP . matcher ( currentLine ) . find ( ) ) { 
 - result = true ; 
 - } 
 - } 
 - 
 return result ; 
 } 
 
 / * * 
 + * Whether the C style comment is trailing . 
 + * @ param comment the comment to check . 
 + * @ param line the line where the comment starts . 
 + * @ return true if the comment is trailing . 
 + * / 
 + private static boolean isTrailingCComent ( TextBlock comment , String line ) { 
 + return comment . getText ( ) . length ! = 1 
 + | | line . substring ( comment . getEndColNo ( ) + 1 ) . trim ( ) . isEmpty ( ) ; 
 + } 
 + 
 + / * * 
 * Count regexp matches into String literal . 
 * @ param pattern pattern . 
 * @ param target String literal . 
 @ @ - 298 , 37 + 308 , 6 @ @ public class AvoidEscapedUnicodeCharactersCheck 
 } 
 
 / * * 
 - * Get variable definition . 
 - * @ param ast current token . 
 - * @ return variable definition . 
 - * / 
 - private static DetailAST getVariableDef ( DetailAST ast ) { 
 - DetailAST result = ast . getParent ( ) ; 
 - while ( result ! = null 
 - & & result . getType ( ) ! = TokenTypes . VARIABLE _ DEF ) { 
 - result = result . getParent ( ) ; 
 - } 
 - return result ; 
 - } 
 - 
 - / * * 
 - * Get semi token . 
 - * @ param ast current token . 
 - * @ return semi token or null . 
 - * / 
 - private static DetailAST getSemi ( DetailAST ast ) { 
 - DetailAST result = ast . getParent ( ) ; 
 - while ( result ! = null 
 - & & result . getLastChild ( ) . getType ( ) ! = TokenTypes . SEMI ) { 
 - result = result . getParent ( ) ; 
 - } 
 - if ( result ! = null ) { 
 - result = result . getLastChild ( ) ; 
 - } 
 - return result ; 
 - } 
 - 
 - / * * 
 * Checks if all characters in String literal is escaped . 
 * @ param literal current literal . 
 * @ return true if all characters in String literal is escaped . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 index 79170d8 . . 563e673 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 @ @ - 79 , 6 + 79 , 14 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport 
 " 77 : " + getCheckMessage ( MSG _ KEY ) , 
 " 79 : " + getCheckMessage ( MSG _ KEY ) , 
 " 82 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 86 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 87 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 88 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 89 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 92 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 93 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 94 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 98 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; 
 } 
 @ @ - 112 , 6 + 120 , 13 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport 
 " 77 : " + getCheckMessage ( MSG _ KEY ) , 
 " 79 : " + getCheckMessage ( MSG _ KEY ) , 
 " 82 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 86 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 87 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 88 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 89 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 92 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 94 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 98 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; 
 } 
 @ @ - 132 , 7 + 147 , 6 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport 
 " 60 : " + getCheckMessage ( MSG _ KEY ) , 
 " 61 : " + getCheckMessage ( MSG _ KEY ) , 
 " 62 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 72 : " + getCheckMessage ( MSG _ KEY ) , 
 " 73 : " + getCheckMessage ( MSG _ KEY ) , 
 " 74 : " + getCheckMessage ( MSG _ KEY ) , 
 " 75 : " + getCheckMessage ( MSG _ KEY ) , 
 @ @ - 140 , 6 + 154 , 8 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport 
 " 77 : " + getCheckMessage ( MSG _ KEY ) , 
 " 79 : " + getCheckMessage ( MSG _ KEY ) , 
 " 82 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 92 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 98 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; 
 } 
 @ @ - 159 , 6 + 175 , 11 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport 
 " 32 : " + getCheckMessage ( MSG _ KEY ) , 
 " 33 : " + getCheckMessage ( MSG _ KEY ) , 
 " 42 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 86 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 87 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 88 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 89 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 98 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; 
 } 
 @ @ - 181 , 6 + 202 , 13 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport 
 " 33 : " + getCheckMessage ( MSG _ KEY ) , 
 " 34 : " + getCheckMessage ( MSG _ KEY ) , 
 " 42 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 86 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 87 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 88 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 89 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 93 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 94 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 98 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputAvoidEscapedUnicodeCharacters . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAvoidEscapedUnicodeCharacters . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAvoidEscapedUnicodeCharacters . java 
 index d7b7e74 . . 63bbb97 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAvoidEscapedUnicodeCharacters . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputAvoidEscapedUnicodeCharacters . java 
 @ @ - 69 , 7 + 69 , 7 @ @ public class InputAvoidEscapedUnicodeCharacters { 
 	 case ' \ f ' : 
 	 case ' \ r ' : 
 	 case ' ' : 
 - 	 case ' \ u0085 ' : 
 + 	 case ' \ u0085 ' : / / some comment 
 	 case ' \ u1680 ' : 
 	 case ' \ u2028 ' : 
 	 case ' \ u2029 ' : 
 @ @ - 82 , 4 + 82 , 18 @ @ public class InputAvoidEscapedUnicodeCharacters { 
 	 return c > = ' \ u2000 ' & & c < = ' \ u200a ' ; 
 	 } 
 	 } 
 + 
 + 	 private String unitAbbrev5 = " \ u03bcs " ; 	 / / comment is separated by space + tab 
 + 	 private String unitAbbrev6 = " \ u03bcs " ; 	 / / comment is separated by tab 
 + 	 private String unitAbbrev7 = " \ u03bcs " ; 	 / * comment is separated by tab * / 
 + 	 private String unitAbbrev8 = " \ u03bcs " ; / * comment 
 + 	 has 2 lines * / 
 + 	 void foo ( ) { 
 + 	 	 for ( char c = ' \ u0000 ' ; c < ' \ uffff ' ; c + + ) { 
 + 	 	 	 if ( c = = ' \ u001b ' | | / / ESC 
 + 	 	 	 	 	 c = = ' \ u2014 ' ) / / Em - Dash ? 
 + 	 	 	 	 continue ; 
 + 	 	 } 
 + 	 } 
 + 	 private String unitAbbrev9 = " \ u03bcs " ; / * comment * / int i ; 
 }
