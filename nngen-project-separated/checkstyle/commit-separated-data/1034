BLEU SCORE: 0.026048484532717218

TEST MSG: Issue # 3333 : add new tokens in WhitespaceAfterCheck
GENERATED MSG: RightCurly . Force line break before ' } ' in case SAME option . # 250

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> old mode 100644 <nl> new mode 100755 <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheck . java <nl> old mode 100644 <nl> new mode 100755 <nl> index 303bb8f . . e3c9cca <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheck . java <nl> @ @ - 34 , 7 + 34 , 13 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < p > By default the check will check the following tokens : <nl> * { @ link TokenTypes # COMMA COMMA } , <nl> * { @ link TokenTypes # SEMI SEMI } , <nl> - * { @ link TokenTypes # TYPECAST TYPECAST } . <nl> + * { @ link TokenTypes # TYPECAST TYPECAST } , <nl> + * { @ link TokenTypes # LITERAL _ IF LITERAL _ IF } , <nl> + * { @ link TokenTypes # LITERAL _ ELSE LITERAL _ ELSE } , <nl> + * { @ link TokenTypes # LITERAL _ WHILE LITERAL _ WHILE } , <nl> + * { @ link TokenTypes # LITERAL _ FOR LITERAL _ FOR } , <nl> + * { @ link TokenTypes # LITERAL _ DO LITERAL _ DO } , <nl> + * { @ link TokenTypes # DO _ WHILE DO _ WHILE } . <nl> * < / p > <nl> * < p > <nl> * An example of how to configure the check is : <nl> @ @ - 79 , 6 + 85 , 12 @ @ public class WhitespaceAfterCheck <nl> TokenTypes . COMMA , <nl> TokenTypes . SEMI , <nl> TokenTypes . TYPECAST , <nl> + TokenTypes . LITERAL _ IF , <nl> + TokenTypes . LITERAL _ ELSE , <nl> + TokenTypes . LITERAL _ WHILE , <nl> + TokenTypes . LITERAL _ DO , <nl> + TokenTypes . LITERAL _ FOR , <nl> + TokenTypes . DO _ WHILE , <nl> } ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheckTest . java <nl> old mode 100644 <nl> new mode 100755 <nl> index cd65f00 . . 4e7cd31 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheckTest . java <nl> @ @ - 65 , 20 + 65 , 92 @ @ public class WhitespaceAfterCheckTest <nl> <nl> @ Test <nl> public void testCast ( ) throws Exception { <nl> + final DefaultConfiguration configurationTestCast = <nl> + createCheckConfig ( WhitespaceAfterCheck . class ) ; <nl> + configurationTestCast . addAttribute ( " tokens " , " TYPECAST " ) ; <nl> final String [ ] expected = { <nl> " 88 : 21 : " + getCheckMessage ( MSG _ WS _ TYPECAST ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; <nl> + verify ( configurationTestCast , getPath ( " InputWhitespace . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> public void testSemi ( ) throws Exception { <nl> + final DefaultConfiguration configurationTestSemi = <nl> + createCheckConfig ( WhitespaceAfterCheck . class ) ; <nl> + configurationTestSemi . addAttribute ( " tokens " , " SEMI " ) ; <nl> final String [ ] expected = { <nl> " 54 : 23 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " ; " ) , <nl> " 54 : 29 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " ; " ) , <nl> " 103 : 19 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " ; " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputBraces . java " ) , expected ) ; <nl> + verify ( configurationTestSemi , getPath ( " InputBraces . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testLiteralWhile ( ) throws Exception { <nl> + final DefaultConfiguration configurationTestLiteralWhile = <nl> + createCheckConfig ( WhitespaceAfterCheck . class ) ; <nl> + configurationTestLiteralWhile . addAttribute ( " tokens " , " LITERAL _ WHILE " ) ; <nl> + final String [ ] expected = { <nl> + " 39 : 14 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " while " ) , <nl> + } ; <nl> + verify ( configurationTestLiteralWhile , getPath ( " InputWhitespaceAfter . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testLiteralIf ( ) throws Exception { <nl> + final DefaultConfiguration configurationTestLiteralIf = <nl> + createCheckConfig ( WhitespaceAfterCheck . class ) ; <nl> + configurationTestLiteralIf . addAttribute ( " tokens " , " LITERAL _ IF " ) ; <nl> + final String [ ] expected = { <nl> + " 18 : 11 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " if " ) , <nl> + } ; <nl> + verify ( configurationTestLiteralIf , getPath ( " InputWhitespaceAfter . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testLiteralElse ( ) throws Exception { <nl> + final DefaultConfiguration configurationTestLiteralElse = <nl> + createCheckConfig ( WhitespaceAfterCheck . class ) ; <nl> + configurationTestLiteralElse . addAttribute ( " tokens " , " LITERAL _ ELSE " ) ; <nl> + final String [ ] expected = { <nl> + " 27 : 15 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " else " ) , <nl> + } ; <nl> + verify ( configurationTestLiteralElse , getPath ( " InputWhitespaceAfter . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testLiteralFor ( ) throws Exception { <nl> + final DefaultConfiguration configurationTestLiteralFor = <nl> + createCheckConfig ( WhitespaceAfterCheck . class ) ; <nl> + configurationTestLiteralFor . addAttribute ( " tokens " , " LITERAL _ FOR " ) ; <nl> + final String [ ] expected = { <nl> + " 51 : 12 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " for " ) , <nl> + } ; <nl> + verify ( configurationTestLiteralFor , getPath ( " InputWhitespaceAfter . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testLiteralDo ( ) throws Exception { <nl> + final DefaultConfiguration configurationTestLiteralDo = <nl> + createCheckConfig ( WhitespaceAfterCheck . class ) ; <nl> + configurationTestLiteralDo . addAttribute ( " tokens " , " LITERAL _ DO " ) ; <nl> + final String [ ] expected = { <nl> + " 63 : 11 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " do " ) , <nl> + } ; <nl> + verify ( configurationTestLiteralDo , getPath ( " InputWhitespaceAfter . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDoWhile ( ) throws Exception { <nl> + final DefaultConfiguration configurationTestDoWhile = <nl> + createCheckConfig ( WhitespaceAfterCheck . class ) ; <nl> + configurationTestDoWhile . addAttribute ( " tokens " , " DO _ WHILE " ) ; <nl> + final String [ ] expected = { <nl> + " 18 : 16 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " while " ) , <nl> + } ; <nl> + verify ( configurationTestDoWhile , getPath ( " InputDoWhile . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJavaTokenTypesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJavaTokenTypesTest . java <nl> old mode 100644 <nl> new mode 100755 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputDoWhile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputDoWhile . java <nl> new file mode 100755 <nl> index 0000000 . . 80a710c <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputDoWhile . java <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> + <nl> + public class InputDoWhile { <nl> + <nl> + boolean condition ( ) { <nl> + return false ; <nl> + } <nl> + <nl> + void testDoWhile ( ) { <nl> + / / Valid <nl> + do { <nl> + testDoWhile ( ) ; <nl> + } while ( condition ( ) ) ; <nl> + <nl> + / / Invalid <nl> + do { <nl> + testDoWhile ( ) ; <nl> + } while ( condition ( ) ) ; / / violation <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAfter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAfter . java <nl> new file mode 100755 <nl> index 0000000 . . 8e49855 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAfter . java <nl> @ @ - 0 , 0 + 1 , 67 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> + <nl> + public class InputWhitespaceAfter { <nl> + <nl> + boolean condition ( ) { <nl> + return false ; <nl> + } <nl> + <nl> + void testIfElse ( ) { <nl> + / / Valid <nl> + if ( condition ( ) ) { <nl> + testIfElse ( ) ; <nl> + } else { <nl> + testIfElse ( ) ; <nl> + } <nl> + <nl> + / / Invalid <nl> + if ( condition ( ) ) { / / violation <nl> + testIfElse ( ) ; <nl> + } else { <nl> + testIfElse ( ) ; <nl> + } <nl> + <nl> + / / Invalid <nl> + if ( condition ( ) ) { <nl> + testIfElse ( ) ; <nl> + } else { / / violation <nl> + testIfElse ( ) ; <nl> + } <nl> + } <nl> + <nl> + void testWhile ( ) { <nl> + / / Valid <nl> + while ( condition ( ) ) { <nl> + testWhile ( ) ; <nl> + } <nl> + <nl> + / / Invalid <nl> + while ( condition ( ) ) { / / violation <nl> + testWhile ( ) ; <nl> + } <nl> + } <nl> + <nl> + void testFor ( ) { <nl> + / / Valid <nl> + for ( int i = 0 ; i < 5 ; i + + ) { <nl> + testFor ( ) ; <nl> + } <nl> + <nl> + / / Invalid <nl> + for ( int i = 0 ; i < 5 ; i + + ) { / / violation <nl> + testFor ( ) ; <nl> + } <nl> + } <nl> + <nl> + void testDo ( ) { <nl> + / / Valid <nl> + do { <nl> + testDo ( ) ; <nl> + } while ( condition ( ) ) ; <nl> + <nl> + / / Invalid <nl> + do { / / violation <nl> + testDo ( ) ; <nl> + } while ( condition ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml <nl> old mode 100644 <nl> new mode 100755 <nl> index 5eefaa2 . . a62c44d <nl> - - - a / src / xdocs / config _ whitespace . xml <nl> + + + b / src / xdocs / config _ whitespace . xml <nl> @ @ - 1884 , 7 + 1884 , 19 @ @ public long toMicros ( long d ) { return d / ( C1 / C0 ) ; } <nl> < a <nl> href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SEMI " > SEMI < / a > , <nl> < a <nl> - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # TYPECAST " > TYPECAST < / a > . <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # TYPECAST " > TYPECAST < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ IF " > LITERAL _ IF < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ ELSE " > LITERAL _ ELSE < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ WHILE " > LITERAL _ WHILE < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > LITERAL _ DO < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ FOR " > LITERAL _ FOR < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > DO _ WHILE < / a > . <nl> < / td > <nl> <nl> < td > <nl> @ @ - 1893 , 7 + 1905 , 19 @ @ public long toMicros ( long d ) { return d / ( C1 / C0 ) ; } <nl> < a <nl> href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SEMI " > SEMI < / a > , <nl> < a <nl> - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # TYPECAST " > TYPECAST < / a > . <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # TYPECAST " > TYPECAST < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ IF " > LITERAL _ IF < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ ELSE " > LITERAL _ ELSE < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ WHILE " > LITERAL _ WHILE < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > LITERAL _ DO < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ FOR " > LITERAL _ FOR < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > DO _ WHILE < / a > . <nl> < / td > <nl> < / tr > <nl> < / table >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> index 757eb6c . . 3210410 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> @ @ - 110 , 6 + 110 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check <nl> TokenTypes . PACKAGE _ DEF , <nl> TokenTypes . IMPORT , <nl> TokenTypes . CLASS _ DEF , <nl> + TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . ENUM _ DEF , <nl> } ; <nl> } <nl> @ @ - 136 , 6 + 137 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check <nl> processImport ( aAST ) ; <nl> } <nl> else if ( ( aAST . getType ( ) = = TokenTypes . CLASS _ DEF ) <nl> + | | ( aAST . getType ( ) = = TokenTypes . INTERFACE _ DEF ) <nl> | | ( aAST . getType ( ) = = TokenTypes . ENUM _ DEF ) ) <nl> { <nl> processClass ( aAST ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> index c3a1a58 . . 119f72c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> @ @ - 83 , 6 + 83 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck <nl> TokenTypes . PACKAGE _ DEF , <nl> TokenTypes . IMPORT , <nl> TokenTypes . CLASS _ DEF , <nl> + TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . ENUM _ DEF , <nl> TokenTypes . METHOD _ DEF , <nl> TokenTypes . CTOR _ DEF , <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index 1c2693e . . 1191359 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 233 , 6 + 233 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> { <nl> return new int [ ] { TokenTypes . PACKAGE _ DEF , TokenTypes . IMPORT , <nl> TokenTypes . CLASS _ DEF , TokenTypes . ENUM _ DEF , <nl> + TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . METHOD _ DEF , TokenTypes . CTOR _ DEF , <nl> TokenTypes . ANNOTATION _ FIELD _ DEF , <nl> } ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java b / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java <nl> index 79ed647 . . 28ae00f 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java <nl> @ @ - 45 , 4 + 45 , 19 @ @ public class TestGenerics < E extends java . lang . Exception , <nl> { <nl> } <nl> } <nl> + <nl> + / * * <nl> + * @ param < T > some parameter <nl> + * @ param < E2 > some exception parameter <nl> + * / <nl> + public interface InnerInterface < T , E2 extends Throwable > { <nl> + / * * <nl> + * Some javadoc . <nl> + * @ param t a parameter <nl> + * @ throws E2 in some case . <nl> + * @ return some string <nl> + * / <nl> + public abstract String doStuff ( T t ) throws E2 ; <nl> + } <nl> } <nl> +

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 old mode 100644 
 new mode 100755 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheck . java 
 old mode 100644 
 new mode 100755 
 index 303bb8f . . e3c9cca 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheck . java 
 @ @ - 34 , 7 + 34 , 13 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < p > By default the check will check the following tokens : 
 * { @ link TokenTypes # COMMA COMMA } , 
 * { @ link TokenTypes # SEMI SEMI } , 
 - * { @ link TokenTypes # TYPECAST TYPECAST } . 
 + * { @ link TokenTypes # TYPECAST TYPECAST } , 
 + * { @ link TokenTypes # LITERAL _ IF LITERAL _ IF } , 
 + * { @ link TokenTypes # LITERAL _ ELSE LITERAL _ ELSE } , 
 + * { @ link TokenTypes # LITERAL _ WHILE LITERAL _ WHILE } , 
 + * { @ link TokenTypes # LITERAL _ FOR LITERAL _ FOR } , 
 + * { @ link TokenTypes # LITERAL _ DO LITERAL _ DO } , 
 + * { @ link TokenTypes # DO _ WHILE DO _ WHILE } . 
 * < / p > 
 * < p > 
 * An example of how to configure the check is : 
 @ @ - 79 , 6 + 85 , 12 @ @ public class WhitespaceAfterCheck 
 TokenTypes . COMMA , 
 TokenTypes . SEMI , 
 TokenTypes . TYPECAST , 
 + TokenTypes . LITERAL _ IF , 
 + TokenTypes . LITERAL _ ELSE , 
 + TokenTypes . LITERAL _ WHILE , 
 + TokenTypes . LITERAL _ DO , 
 + TokenTypes . LITERAL _ FOR , 
 + TokenTypes . DO _ WHILE , 
 } ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheckTest . java 
 old mode 100644 
 new mode 100755 
 index cd65f00 . . 4e7cd31 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAfterCheckTest . java 
 @ @ - 65 , 20 + 65 , 92 @ @ public class WhitespaceAfterCheckTest 
 
 @ Test 
 public void testCast ( ) throws Exception { 
 + final DefaultConfiguration configurationTestCast = 
 + createCheckConfig ( WhitespaceAfterCheck . class ) ; 
 + configurationTestCast . addAttribute ( " tokens " , " TYPECAST " ) ; 
 final String [ ] expected = { 
 " 88 : 21 : " + getCheckMessage ( MSG _ WS _ TYPECAST ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; 
 + verify ( configurationTestCast , getPath ( " InputWhitespace . java " ) , expected ) ; 
 } 
 
 @ Test 
 public void testSemi ( ) throws Exception { 
 + final DefaultConfiguration configurationTestSemi = 
 + createCheckConfig ( WhitespaceAfterCheck . class ) ; 
 + configurationTestSemi . addAttribute ( " tokens " , " SEMI " ) ; 
 final String [ ] expected = { 
 " 54 : 23 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " ; " ) , 
 " 54 : 29 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " ; " ) , 
 " 103 : 19 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " ; " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputBraces . java " ) , expected ) ; 
 + verify ( configurationTestSemi , getPath ( " InputBraces . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testLiteralWhile ( ) throws Exception { 
 + final DefaultConfiguration configurationTestLiteralWhile = 
 + createCheckConfig ( WhitespaceAfterCheck . class ) ; 
 + configurationTestLiteralWhile . addAttribute ( " tokens " , " LITERAL _ WHILE " ) ; 
 + final String [ ] expected = { 
 + " 39 : 14 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " while " ) , 
 + } ; 
 + verify ( configurationTestLiteralWhile , getPath ( " InputWhitespaceAfter . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testLiteralIf ( ) throws Exception { 
 + final DefaultConfiguration configurationTestLiteralIf = 
 + createCheckConfig ( WhitespaceAfterCheck . class ) ; 
 + configurationTestLiteralIf . addAttribute ( " tokens " , " LITERAL _ IF " ) ; 
 + final String [ ] expected = { 
 + " 18 : 11 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " if " ) , 
 + } ; 
 + verify ( configurationTestLiteralIf , getPath ( " InputWhitespaceAfter . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testLiteralElse ( ) throws Exception { 
 + final DefaultConfiguration configurationTestLiteralElse = 
 + createCheckConfig ( WhitespaceAfterCheck . class ) ; 
 + configurationTestLiteralElse . addAttribute ( " tokens " , " LITERAL _ ELSE " ) ; 
 + final String [ ] expected = { 
 + " 27 : 15 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " else " ) , 
 + } ; 
 + verify ( configurationTestLiteralElse , getPath ( " InputWhitespaceAfter . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testLiteralFor ( ) throws Exception { 
 + final DefaultConfiguration configurationTestLiteralFor = 
 + createCheckConfig ( WhitespaceAfterCheck . class ) ; 
 + configurationTestLiteralFor . addAttribute ( " tokens " , " LITERAL _ FOR " ) ; 
 + final String [ ] expected = { 
 + " 51 : 12 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " for " ) , 
 + } ; 
 + verify ( configurationTestLiteralFor , getPath ( " InputWhitespaceAfter . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testLiteralDo ( ) throws Exception { 
 + final DefaultConfiguration configurationTestLiteralDo = 
 + createCheckConfig ( WhitespaceAfterCheck . class ) ; 
 + configurationTestLiteralDo . addAttribute ( " tokens " , " LITERAL _ DO " ) ; 
 + final String [ ] expected = { 
 + " 63 : 11 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " do " ) , 
 + } ; 
 + verify ( configurationTestLiteralDo , getPath ( " InputWhitespaceAfter . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testDoWhile ( ) throws Exception { 
 + final DefaultConfiguration configurationTestDoWhile = 
 + createCheckConfig ( WhitespaceAfterCheck . class ) ; 
 + configurationTestDoWhile . addAttribute ( " tokens " , " DO _ WHILE " ) ; 
 + final String [ ] expected = { 
 + " 18 : 16 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " while " ) , 
 + } ; 
 + verify ( configurationTestDoWhile , getPath ( " InputDoWhile . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJavaTokenTypesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / GeneratedJavaTokenTypesTest . java 
 old mode 100644 
 new mode 100755 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputDoWhile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputDoWhile . java 
 new file mode 100755 
 index 0000000 . . 80a710c 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputDoWhile . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 + 
 + public class InputDoWhile { 
 + 
 + boolean condition ( ) { 
 + return false ; 
 + } 
 + 
 + void testDoWhile ( ) { 
 + / / Valid 
 + do { 
 + testDoWhile ( ) ; 
 + } while ( condition ( ) ) ; 
 + 
 + / / Invalid 
 + do { 
 + testDoWhile ( ) ; 
 + } while ( condition ( ) ) ; / / violation 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAfter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAfter . java 
 new file mode 100755 
 index 0000000 . . 8e49855 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAfter . java 
 @ @ - 0 , 0 + 1 , 67 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 + 
 + public class InputWhitespaceAfter { 
 + 
 + boolean condition ( ) { 
 + return false ; 
 + } 
 + 
 + void testIfElse ( ) { 
 + / / Valid 
 + if ( condition ( ) ) { 
 + testIfElse ( ) ; 
 + } else { 
 + testIfElse ( ) ; 
 + } 
 + 
 + / / Invalid 
 + if ( condition ( ) ) { / / violation 
 + testIfElse ( ) ; 
 + } else { 
 + testIfElse ( ) ; 
 + } 
 + 
 + / / Invalid 
 + if ( condition ( ) ) { 
 + testIfElse ( ) ; 
 + } else { / / violation 
 + testIfElse ( ) ; 
 + } 
 + } 
 + 
 + void testWhile ( ) { 
 + / / Valid 
 + while ( condition ( ) ) { 
 + testWhile ( ) ; 
 + } 
 + 
 + / / Invalid 
 + while ( condition ( ) ) { / / violation 
 + testWhile ( ) ; 
 + } 
 + } 
 + 
 + void testFor ( ) { 
 + / / Valid 
 + for ( int i = 0 ; i < 5 ; i + + ) { 
 + testFor ( ) ; 
 + } 
 + 
 + / / Invalid 
 + for ( int i = 0 ; i < 5 ; i + + ) { / / violation 
 + testFor ( ) ; 
 + } 
 + } 
 + 
 + void testDo ( ) { 
 + / / Valid 
 + do { 
 + testDo ( ) ; 
 + } while ( condition ( ) ) ; 
 + 
 + / / Invalid 
 + do { / / violation 
 + testDo ( ) ; 
 + } while ( condition ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml 
 old mode 100644 
 new mode 100755 
 index 5eefaa2 . . a62c44d 
 - - - a / src / xdocs / config _ whitespace . xml 
 + + + b / src / xdocs / config _ whitespace . xml 
 @ @ - 1884 , 7 + 1884 , 19 @ @ public long toMicros ( long d ) { return d / ( C1 / C0 ) ; } 
 < a 
 href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SEMI " > SEMI < / a > , 
 < a 
 - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # TYPECAST " > TYPECAST < / a > . 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # TYPECAST " > TYPECAST < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ IF " > LITERAL _ IF < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ ELSE " > LITERAL _ ELSE < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ WHILE " > LITERAL _ WHILE < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > LITERAL _ DO < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ FOR " > LITERAL _ FOR < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > DO _ WHILE < / a > . 
 < / td > 
 
 < td > 
 @ @ - 1893 , 7 + 1905 , 19 @ @ public long toMicros ( long d ) { return d / ( C1 / C0 ) ; } 
 < a 
 href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # SEMI " > SEMI < / a > , 
 < a 
 - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # TYPECAST " > TYPECAST < / a > . 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # TYPECAST " > TYPECAST < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ IF " > LITERAL _ IF < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ ELSE " > LITERAL _ ELSE < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ WHILE " > LITERAL _ WHILE < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > LITERAL _ DO < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ FOR " > LITERAL _ FOR < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > DO _ WHILE < / a > . 
 < / td > 
 < / tr > 
 < / table >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 index 757eb6c . . 3210410 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 @ @ - 110 , 6 + 110 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check 
 TokenTypes . PACKAGE _ DEF , 
 TokenTypes . IMPORT , 
 TokenTypes . CLASS _ DEF , 
 + TokenTypes . INTERFACE _ DEF , 
 TokenTypes . ENUM _ DEF , 
 } ; 
 } 
 @ @ - 136 , 6 + 137 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check 
 processImport ( aAST ) ; 
 } 
 else if ( ( aAST . getType ( ) = = TokenTypes . CLASS _ DEF ) 
 + | | ( aAST . getType ( ) = = TokenTypes . INTERFACE _ DEF ) 
 | | ( aAST . getType ( ) = = TokenTypes . ENUM _ DEF ) ) 
 { 
 processClass ( aAST ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 index c3a1a58 . . 119f72c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 @ @ - 83 , 6 + 83 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck 
 TokenTypes . PACKAGE _ DEF , 
 TokenTypes . IMPORT , 
 TokenTypes . CLASS _ DEF , 
 + TokenTypes . INTERFACE _ DEF , 
 TokenTypes . ENUM _ DEF , 
 TokenTypes . METHOD _ DEF , 
 TokenTypes . CTOR _ DEF , 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index 1c2693e . . 1191359 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 233 , 6 + 233 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 { 
 return new int [ ] { TokenTypes . PACKAGE _ DEF , TokenTypes . IMPORT , 
 TokenTypes . CLASS _ DEF , TokenTypes . ENUM _ DEF , 
 + TokenTypes . INTERFACE _ DEF , 
 TokenTypes . METHOD _ DEF , TokenTypes . CTOR _ DEF , 
 TokenTypes . ANNOTATION _ FIELD _ DEF , 
 } ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java b / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java 
 index 79ed647 . . 28ae00f 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java 
 @ @ - 45 , 4 + 45 , 19 @ @ public class TestGenerics < E extends java . lang . Exception , 
 { 
 } 
 } 
 + 
 + / * * 
 + * @ param < T > some parameter 
 + * @ param < E2 > some exception parameter 
 + * / 
 + public interface InnerInterface < T , E2 extends Throwable > { 
 + / * * 
 + * Some javadoc . 
 + * @ param t a parameter 
 + * @ throws E2 in some case . 
 + * @ return some string 
 + * / 
 + public abstract String doStuff ( T t ) throws E2 ; 
 + } 
 } 
 +
