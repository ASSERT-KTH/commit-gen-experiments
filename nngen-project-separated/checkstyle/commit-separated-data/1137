BLEU SCORE: 0.024617934274488044

TEST MSG: Issue # 3209 : add example to TokenTypes for FOR _ EACH _ CLAUSE
GENERATED MSG: Final Parameters Check , added option allows ignoring primitive types as params , issue # 446

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> index 91380cb . . 05ac22b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> @ @ - 2858 , 6 + 2858 , 37 @ @ public final class TokenTypes { <nl> * < code > LITERAL _ FOR < / code > . The children of this element may be <nl> * a parameter definition , the colon literal and an expression . <nl> * <nl> + * < p > For example : < / p > <nl> + * < pre > <nl> + * for ( int value : values ) { <nl> + * doSmth ( ) ; <nl> + * } <nl> + * < / pre > <nl> + * < p > parses as : < / p > <nl> + * < pre > <nl> + * - - LITERAL _ FOR ( for ) <nl> + * | - - LPAREN ( ( ) <nl> + * | - - FOR _ EACH _ CLAUSE <nl> + * | | - - VARIABLE _ DEF <nl> + * | | | - - MODIFIERS <nl> + * | | | - - TYPE <nl> + * | | | ` - - LITERAL _ INT ( int ) <nl> + * | | ` - - IDENT ( value ) <nl> + * | | - - COLON ( : ) <nl> + * | ` - - EXPR <nl> + * | ` - - IDENT ( values <nl> + * | - - RPAREN ( ) ) <nl> + * ` - - SLIST ( { ) <nl> + * | - - EXPR <nl> + * | ` - - METHOD _ CALL ( ( ) <nl> + * | | - - IDENT ( doSmth ) <nl> + * | | - - ELIST <nl> + * | ` - - RPAREN ( ) ) <nl> + * | - - SEMI ( ; ) <nl> + * ` - - RCURLY ( } ) <nl> + * <nl> + * < / pre > <nl> + * <nl> * @ see # VARIABLE _ DEF <nl> * @ see # ELIST <nl> * @ see # LITERAL _ FOR
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java <nl> index 030216b . . 7e642a0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java <nl> @ @ - 31 , 15 + 31 , 12 @ @ public class JUnitTestCaseCheckTest extends BaseCheckTestSupport <nl> DefaultConfiguration checkConfig = createCheckConfig ( JUnitTestCaseCheck . class ) ; <nl> <nl> String [ ] expected = { <nl> - " 14 : 5 : The method ' setUp ' must be public or protected . " , <nl> - " 15 : 5 : The method ' tearDown ' shouldn ' t be static . " , <nl> " 16 : 5 : The method ' suite ' must be declared static . " , <nl> " 21 : 5 : The method ' SetUp ' should be named ' setUp ' . " , <nl> - " 22 : 5 : The method ' tearDown ' must be declared with a void return type . " , <nl> " 23 : 5 : The method ' suite ' must be declared with a junit . framework . Test return type . " , <nl> - " 28 : 5 : The method ' setUp ' must be declared with no parameters . " , <nl> - " 30 : 5 : The method ' suite ' must be declared static . " , <nl> - " 31 : 5 : The method ' tearDown ' must be declared with no parameters . " , <nl> + " 29 : 5 : The method ' setUp ' must be declared with no parameters . " , <nl> + " 31 : 5 : The method ' suite ' must be declared static . " , <nl> + " 32 : 5 : The method ' tearDown ' must be declared with no parameters . " , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " coding " + File . separator + " InputJUnitTest . java " ) , expected ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java <nl> index 31cd9c8 . . 7caf4cb 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java <nl> @ @ - 1 , 32 + 1 , 33 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + package com . puppycrawl . tools . checkstyle . coding ; <nl> <nl> import junit . framework . * ; <nl> <nl> public class InputJUnitTest extends TestCase <nl> { <nl> - public static Test suite ( ) { return new TestSuite ( " " ) ; } / / correct <nl> + public static Test suite ( ) { return new Test ( ) ; } / / correct <nl> protected void setUp ( ) { } / / correct <nl> public void tearDown ( ) { } / / correct <nl> } <nl> <nl> class BadTest1 extends TestCase <nl> { <nl> - private void setUp ( ) { } / / private ! ! ! <nl> - public static void tearDown ( ) { } / / static ! ! ! <nl> - static Test suite ( ) { return new TestSuite ( " " ) ; } / / non - public <nl> + public void setUp ( ) { } <nl> + public void tearDown ( ) { } <nl> + static Test suite ( ) { return new Test ( ) ; } / / non - public <nl> } <nl> <nl> class BadTest2 extends TestCase <nl> { <nl> public void SetUp ( ) { } / / wrong name <nl> - public int tearDown ( ) { } / / wrong return type <nl> - public static Test [ ] suite ( ) { } / / wrong return type <nl> + public void tearDown ( ) { } <nl> + public static Test [ ] suite ( ) { <nl> + 	 	 return null ; } / / wrong return type <nl> } <nl> <nl> class BadTest3 extends TestCase <nl> { <nl> public void setUp ( int i ) { } / / too many args <nl> public void tear _ down ( ) { } / / correct ( unchecked ) <nl> - public Test suite ( ) { return new TestSuite ( " " ) ; } / / non - static <nl> + public Test suite ( ) { return new Test ( ) ; } / / non - static <nl> public void tearDown ( int i ) { } / / too many args <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 index 91380cb . . 05ac22b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 @ @ - 2858 , 6 + 2858 , 37 @ @ public final class TokenTypes { 
 * < code > LITERAL _ FOR < / code > . The children of this element may be 
 * a parameter definition , the colon literal and an expression . 
 * 
 + * < p > For example : < / p > 
 + * < pre > 
 + * for ( int value : values ) { 
 + * doSmth ( ) ; 
 + * } 
 + * < / pre > 
 + * < p > parses as : < / p > 
 + * < pre > 
 + * - - LITERAL _ FOR ( for ) 
 + * | - - LPAREN ( ( ) 
 + * | - - FOR _ EACH _ CLAUSE 
 + * | | - - VARIABLE _ DEF 
 + * | | | - - MODIFIERS 
 + * | | | - - TYPE 
 + * | | | ` - - LITERAL _ INT ( int ) 
 + * | | ` - - IDENT ( value ) 
 + * | | - - COLON ( : ) 
 + * | ` - - EXPR 
 + * | ` - - IDENT ( values 
 + * | - - RPAREN ( ) ) 
 + * ` - - SLIST ( { ) 
 + * | - - EXPR 
 + * | ` - - METHOD _ CALL ( ( ) 
 + * | | - - IDENT ( doSmth ) 
 + * | | - - ELIST 
 + * | ` - - RPAREN ( ) ) 
 + * | - - SEMI ( ; ) 
 + * ` - - RCURLY ( } ) 
 + * 
 + * < / pre > 
 + * 
 * @ see # VARIABLE _ DEF 
 * @ see # ELIST 
 * @ see # LITERAL _ FOR

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java 
 index 030216b . . 7e642a0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / JUnitTestCaseCheckTest . java 
 @ @ - 31 , 15 + 31 , 12 @ @ public class JUnitTestCaseCheckTest extends BaseCheckTestSupport 
 DefaultConfiguration checkConfig = createCheckConfig ( JUnitTestCaseCheck . class ) ; 
 
 String [ ] expected = { 
 - " 14 : 5 : The method ' setUp ' must be public or protected . " , 
 - " 15 : 5 : The method ' tearDown ' shouldn ' t be static . " , 
 " 16 : 5 : The method ' suite ' must be declared static . " , 
 " 21 : 5 : The method ' SetUp ' should be named ' setUp ' . " , 
 - " 22 : 5 : The method ' tearDown ' must be declared with a void return type . " , 
 " 23 : 5 : The method ' suite ' must be declared with a junit . framework . Test return type . " , 
 - " 28 : 5 : The method ' setUp ' must be declared with no parameters . " , 
 - " 30 : 5 : The method ' suite ' must be declared static . " , 
 - " 31 : 5 : The method ' tearDown ' must be declared with no parameters . " , 
 + " 29 : 5 : The method ' setUp ' must be declared with no parameters . " , 
 + " 31 : 5 : The method ' suite ' must be declared static . " , 
 + " 32 : 5 : The method ' tearDown ' must be declared with no parameters . " , 
 } ; 
 
 verify ( checkConfig , getPath ( " coding " + File . separator + " InputJUnitTest . java " ) , expected ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java 
 index 31cd9c8 . . 7caf4cb 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputJUnitTest . java 
 @ @ - 1 , 32 + 1 , 33 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + package com . puppycrawl . tools . checkstyle . coding ; 
 
 import junit . framework . * ; 
 
 public class InputJUnitTest extends TestCase 
 { 
 - public static Test suite ( ) { return new TestSuite ( " " ) ; } / / correct 
 + public static Test suite ( ) { return new Test ( ) ; } / / correct 
 protected void setUp ( ) { } / / correct 
 public void tearDown ( ) { } / / correct 
 } 
 
 class BadTest1 extends TestCase 
 { 
 - private void setUp ( ) { } / / private ! ! ! 
 - public static void tearDown ( ) { } / / static ! ! ! 
 - static Test suite ( ) { return new TestSuite ( " " ) ; } / / non - public 
 + public void setUp ( ) { } 
 + public void tearDown ( ) { } 
 + static Test suite ( ) { return new Test ( ) ; } / / non - public 
 } 
 
 class BadTest2 extends TestCase 
 { 
 public void SetUp ( ) { } / / wrong name 
 - public int tearDown ( ) { } / / wrong return type 
 - public static Test [ ] suite ( ) { } / / wrong return type 
 + public void tearDown ( ) { } 
 + public static Test [ ] suite ( ) { 
 + 	 	 return null ; } / / wrong return type 
 } 
 
 class BadTest3 extends TestCase 
 { 
 public void setUp ( int i ) { } / / too many args 
 public void tear _ down ( ) { } / / correct ( unchecked ) 
 - public Test suite ( ) { return new TestSuite ( " " ) ; } / / non - static 
 + public Test suite ( ) { return new Test ( ) ; } / / non - static 
 public void tearDown ( int i ) { } / / too many args 
 }
