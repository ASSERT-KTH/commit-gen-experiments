BLEU SCORE: 0.06766165252145301

TEST MSG: Issue # 3225 : fixed cr lines in TreeWalker
GENERATED MSG: Coverage has been increased to 100 % in UncommentedMainCheck . Issue # 1290

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index 5933f06 . . 0860815 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 690 , 15 + 690 , 29 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> String text , int initialLinesCnt , int initialColumnsCnt ) { <nl> int lines = initialLinesCnt ; <nl> int columns = initialColumnsCnt ; <nl> + boolean foundCr = false ; <nl> for ( char c : text . toCharArray ( ) ) { <nl> if ( c = = ' \ n ' ) { <nl> + foundCr = false ; <nl> lines + + ; <nl> columns = 0 ; <nl> } <nl> else { <nl> + if ( foundCr ) { <nl> + foundCr = false ; <nl> + lines + + ; <nl> + columns = 0 ; <nl> + } <nl> + if ( c = = ' \ r ' ) { <nl> + foundCr = true ; <nl> + } <nl> columns + + ; <nl> } <nl> } <nl> + if ( foundCr ) { <nl> + lines + + ; <nl> + columns = 0 ; <nl> + } <nl> return new SimpleEntry < > ( lines , columns ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> index 34c48fa . . 6e022b0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> @ @ - 162 , 6 + 162 , 12 @ @ public class AstRegressionTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testNewlineCr ( ) throws Exception { <nl> + verifyAst ( super . getPath ( " / checks / InputNewlineCrAtEndOfFileAst . txt " ) , <nl> + super . getPath ( " / checks / InputNewlineCrAtEndOfFile . java " ) , true ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testImpossibleExceptions ( ) throws Exception { <nl> AssertGeneratedJavaLexer . verifyFail ( " mSTD _ ESC " , ' a ' ) ; <nl> AssertGeneratedJavaLexer . verifyFail ( " mSTD _ ESC " , ' 0 ' , ( char ) 0xFFFF ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java <nl> index 1305a0c . . 8c097b1 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java <nl> @ @ - 1 + 1 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> / / Test case file for checkstyle . <nl> / / Created : 2015 <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> / * * <nl> * Test case for detection of an existing CR newline at EOF , using the <nl> * NewlineAtEndOfFileCheck . <nl> * @ author Martin Steiger <nl> * * / <nl> public interface InputNewlineCrAtEndOfFile <nl> { <nl> } <nl> \ No newline at end of file <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> / / Test case file for checkstyle . <nl> / / Created : 2015 <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> / * * <nl> * Test case for detection of an existing CR newline at EOF , using the <nl> * NewlineAtEndOfFileCheck . <nl> * @ author Martin Steiger <nl> * * / <nl> public interface InputNewlineCrAtEndOfFile <nl> { <nl> / * * Test with ending with CR newline <nl> * / <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt <nl> new file mode 100644 <nl> index 0000000 . . 9d1e889 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt <nl> @ @ - 0 , 0 + 1 , 34 @ @ <nl> + SINGLE _ LINE _ COMMENT - > / / [ 1 : 0 ] <nl> + ` - - COMMENT _ CONTENT - > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / \ r [ 1 : 2 ] <nl> + SINGLE _ LINE _ COMMENT - > / / [ 2 : 0 ] <nl> + ` - - COMMENT _ CONTENT - > Test case file for checkstyle . \ r [ 2 : 2 ] <nl> + SINGLE _ LINE _ COMMENT - > / / [ 3 : 0 ] <nl> + ` - - COMMENT _ CONTENT - > Created : 2015 \ r [ 3 : 2 ] <nl> + SINGLE _ LINE _ COMMENT - > / / [ 4 : 0 ] <nl> + ` - - COMMENT _ CONTENT - > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / \ r [ 4 : 2 ] <nl> + PACKAGE _ DEF - > package [ 5 : 0 ] <nl> + | - - ANNOTATIONS - > ANNOTATIONS [ 5 : 39 ] <nl> + | - - DOT - > . [ 5 : 39 ] <nl> + | | - - DOT - > . [ 5 : 28 ] <nl> + | | | - - DOT - > . [ 5 : 22 ] <nl> + | | | | - - DOT - > . [ 5 : 11 ] <nl> + | | | | | - - IDENT - > com [ 5 : 8 ] <nl> + | | | | ` - - IDENT - > puppycrawl [ 5 : 12 ] <nl> + | | | ` - - IDENT - > tools [ 5 : 23 ] <nl> + | | ` - - IDENT - > checkstyle [ 5 : 29 ] <nl> + | ` - - IDENT - > checks [ 5 : 40 ] <nl> + ` - - SEMI - > ; [ 5 : 46 ] <nl> + INTERFACE _ DEF - > INTERFACE _ DEF [ 12 : 0 ] <nl> + | - - MODIFIERS - > MODIFIERS [ 12 : 0 ] <nl> + | | - - BLOCK _ COMMENT _ BEGIN - > / * [ 7 : 0 ] <nl> + | | | - - COMMENT _ CONTENT - > * \ r * Test case for detection of an existing CR newline at EOF , using the \ r * NewlineAtEndOfFileCheck . \ r * @ author Martin Steiger \ r * [ 7 : 2 ] <nl> + | | ` - - BLOCK _ COMMENT _ END - > * / [ 11 : 2 ] <nl> + | ` - - LITERAL _ PUBLIC - > public [ 12 : 0 ] <nl> + | - - LITERAL _ INTERFACE - > interface [ 12 : 7 ] <nl> + | - - IDENT - > InputNewlineCrAtEndOfFile [ 12 : 17 ] <nl> + ` - - OBJBLOCK - > OBJBLOCK [ 13 : 0 ] <nl> + | - - LCURLY - > { [ 13 : 0 ] <nl> + | - - BLOCK _ COMMENT _ BEGIN - > / * [ 14 : 0 ] <nl> + | | - - COMMENT _ CONTENT - > * Test with ending with CR newline \ r [ 14 : 2 ] <nl> + | ` - - BLOCK _ COMMENT _ END - > * / [ 15 : 0 ] <nl> + ` - - RCURLY - > } [ 16 : 0 ]
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> index 0d84a0e . . 99e9cca 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> + <nl> / * * <nl> * Checks for redundant modifiers in interface and annotation definitions . <nl> * Also checks for redundant final modifiers on methods of final classes <nl> @ @ - 53 , 13 + 54 , 7 @ @ public class RedundantModifierCheck <nl> <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> - return new int [ ] { <nl> - TokenTypes . METHOD _ DEF , <nl> - TokenTypes . VARIABLE _ DEF , <nl> - TokenTypes . ANNOTATION _ FIELD _ DEF , <nl> - TokenTypes . INTERFACE _ DEF , <nl> - TokenTypes . CTOR _ DEF , <nl> - } ; <nl> + return getAcceptableTokens ( ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 75 , 6 + 70 , 8 @ @ public class RedundantModifierCheck <nl> TokenTypes . ANNOTATION _ FIELD _ DEF , <nl> TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . CTOR _ DEF , <nl> + TokenTypes . CLASS _ DEF , <nl> + TokenTypes . ENUM _ DEF , <nl> } ; <nl> } <nl> <nl> @ @ - 206 , 9 + 203 , 11 @ @ public class RedundantModifierCheck <nl> * @ return true or false <nl> * / <nl> private static boolean isInterfaceOrAnnotationMember ( DetailAST ast ) { <nl> - final DetailAST parentTypeDef = ast . getParent ( ) . getParent ( ) ; <nl> - return parentTypeDef . getType ( ) = = TokenTypes . INTERFACE _ DEF <nl> - | | parentTypeDef . getType ( ) = = TokenTypes . ANNOTATION _ DEF ; <nl> + final DetailAST parentTypeDef = <nl> + ast . getParent ( ) ! = null ? ast . getParent ( ) . getParent ( ) : null ; <nl> + return parentTypeDef ! = null <nl> + & & ( parentTypeDef . getType ( ) = = TokenTypes . INTERFACE _ DEF <nl> + | | parentTypeDef . getType ( ) = = TokenTypes . ANNOTATION _ DEF ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java <nl> index e34c01d . . eb82b7f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java <nl> @ @ - 93 , 6 + 93 , 17 @ @ public class RedundantModifierTest <nl> } <nl> <nl> @ Test <nl> + public void testInnerTypeInInterfaceIsImplicitlyStatic ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( RedundantModifierCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 8 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , <nl> + " 12 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputRedundantStaticModifierInInnerTypeOfInterface . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testGetAcceptableTokens ( ) { <nl> RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck ( ) ; <nl> int [ ] actual = redundantModifierCheckObj . getAcceptableTokens ( ) ; <nl> @ @ - 102 , 6 + 113 , 8 @ @ public class RedundantModifierTest <nl> TokenTypes . ANNOTATION _ FIELD _ DEF , <nl> TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . CTOR _ DEF , <nl> + TokenTypes . CLASS _ DEF , <nl> + TokenTypes . ENUM _ DEF , <nl> } ; <nl> Assert . assertNotNull ( actual ) ; <nl> Assert . assertArrayEquals ( expected , actual ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInInnerTypeOfInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInInnerTypeOfInterface . java <nl> new file mode 100644 <nl> index 0000000 . . eab97ca <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInInnerTypeOfInterface . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2015 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + public interface InputRedundantStaticModifierInInnerTypeOfInterface { <nl> + static class MyInnerClass { } <nl> + <nl> + class MyInnerClass2 { } <nl> + <nl> + static enum MyInnerEnum { } <nl> + <nl> + enum MyInnerEnum2 { } <nl> + }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index 5933f06 . . 0860815 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 690 , 15 + 690 , 29 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 String text , int initialLinesCnt , int initialColumnsCnt ) { 
 int lines = initialLinesCnt ; 
 int columns = initialColumnsCnt ; 
 + boolean foundCr = false ; 
 for ( char c : text . toCharArray ( ) ) { 
 if ( c = = ' \ n ' ) { 
 + foundCr = false ; 
 lines + + ; 
 columns = 0 ; 
 } 
 else { 
 + if ( foundCr ) { 
 + foundCr = false ; 
 + lines + + ; 
 + columns = 0 ; 
 + } 
 + if ( c = = ' \ r ' ) { 
 + foundCr = true ; 
 + } 
 columns + + ; 
 } 
 } 
 + if ( foundCr ) { 
 + lines + + ; 
 + columns = 0 ; 
 + } 
 return new SimpleEntry < > ( lines , columns ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 index 34c48fa . . 6e022b0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 @ @ - 162 , 6 + 162 , 12 @ @ public class AstRegressionTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public void testNewlineCr ( ) throws Exception { 
 + verifyAst ( super . getPath ( " / checks / InputNewlineCrAtEndOfFileAst . txt " ) , 
 + super . getPath ( " / checks / InputNewlineCrAtEndOfFile . java " ) , true ) ; 
 + } 
 + 
 + @ Test 
 public void testImpossibleExceptions ( ) throws Exception { 
 AssertGeneratedJavaLexer . verifyFail ( " mSTD _ ESC " , ' a ' ) ; 
 AssertGeneratedJavaLexer . verifyFail ( " mSTD _ ESC " , ' 0 ' , ( char ) 0xFFFF ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java 
 index 1305a0c . . 8c097b1 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFile . java 
 @ @ - 1 + 1 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Test case file for checkstyle . 
 / / Created : 2015 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 / * * 
 * Test case for detection of an existing CR newline at EOF , using the 
 * NewlineAtEndOfFileCheck . 
 * @ author Martin Steiger 
 * * / 
 public interface InputNewlineCrAtEndOfFile 
 { 
 } 
 \ No newline at end of file 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Test case file for checkstyle . 
 / / Created : 2015 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks ; 
 
 / * * 
 * Test case for detection of an existing CR newline at EOF , using the 
 * NewlineAtEndOfFileCheck . 
 * @ author Martin Steiger 
 * * / 
 public interface InputNewlineCrAtEndOfFile 
 { 
 / * * Test with ending with CR newline 
 * / 
 } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt 
 new file mode 100644 
 index 0000000 . . 9d1e889 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputNewlineCrAtEndOfFileAst . txt 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + SINGLE _ LINE _ COMMENT - > / / [ 1 : 0 ] 
 + ` - - COMMENT _ CONTENT - > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / \ r [ 1 : 2 ] 
 + SINGLE _ LINE _ COMMENT - > / / [ 2 : 0 ] 
 + ` - - COMMENT _ CONTENT - > Test case file for checkstyle . \ r [ 2 : 2 ] 
 + SINGLE _ LINE _ COMMENT - > / / [ 3 : 0 ] 
 + ` - - COMMENT _ CONTENT - > Created : 2015 \ r [ 3 : 2 ] 
 + SINGLE _ LINE _ COMMENT - > / / [ 4 : 0 ] 
 + ` - - COMMENT _ CONTENT - > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / \ r [ 4 : 2 ] 
 + PACKAGE _ DEF - > package [ 5 : 0 ] 
 + | - - ANNOTATIONS - > ANNOTATIONS [ 5 : 39 ] 
 + | - - DOT - > . [ 5 : 39 ] 
 + | | - - DOT - > . [ 5 : 28 ] 
 + | | | - - DOT - > . [ 5 : 22 ] 
 + | | | | - - DOT - > . [ 5 : 11 ] 
 + | | | | | - - IDENT - > com [ 5 : 8 ] 
 + | | | | ` - - IDENT - > puppycrawl [ 5 : 12 ] 
 + | | | ` - - IDENT - > tools [ 5 : 23 ] 
 + | | ` - - IDENT - > checkstyle [ 5 : 29 ] 
 + | ` - - IDENT - > checks [ 5 : 40 ] 
 + ` - - SEMI - > ; [ 5 : 46 ] 
 + INTERFACE _ DEF - > INTERFACE _ DEF [ 12 : 0 ] 
 + | - - MODIFIERS - > MODIFIERS [ 12 : 0 ] 
 + | | - - BLOCK _ COMMENT _ BEGIN - > / * [ 7 : 0 ] 
 + | | | - - COMMENT _ CONTENT - > * \ r * Test case for detection of an existing CR newline at EOF , using the \ r * NewlineAtEndOfFileCheck . \ r * @ author Martin Steiger \ r * [ 7 : 2 ] 
 + | | ` - - BLOCK _ COMMENT _ END - > * / [ 11 : 2 ] 
 + | ` - - LITERAL _ PUBLIC - > public [ 12 : 0 ] 
 + | - - LITERAL _ INTERFACE - > interface [ 12 : 7 ] 
 + | - - IDENT - > InputNewlineCrAtEndOfFile [ 12 : 17 ] 
 + ` - - OBJBLOCK - > OBJBLOCK [ 13 : 0 ] 
 + | - - LCURLY - > { [ 13 : 0 ] 
 + | - - BLOCK _ COMMENT _ BEGIN - > / * [ 14 : 0 ] 
 + | | - - COMMENT _ CONTENT - > * Test with ending with CR newline \ r [ 14 : 2 ] 
 + | ` - - BLOCK _ COMMENT _ END - > * / [ 15 : 0 ] 
 + ` - - RCURLY - > } [ 16 : 0 ]

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 index 0d84a0e . . 99e9cca 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 + 
 / * * 
 * Checks for redundant modifiers in interface and annotation definitions . 
 * Also checks for redundant final modifiers on methods of final classes 
 @ @ - 53 , 13 + 54 , 7 @ @ public class RedundantModifierCheck 
 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 - return new int [ ] { 
 - TokenTypes . METHOD _ DEF , 
 - TokenTypes . VARIABLE _ DEF , 
 - TokenTypes . ANNOTATION _ FIELD _ DEF , 
 - TokenTypes . INTERFACE _ DEF , 
 - TokenTypes . CTOR _ DEF , 
 - } ; 
 + return getAcceptableTokens ( ) ; 
 } 
 
 @ Override 
 @ @ - 75 , 6 + 70 , 8 @ @ public class RedundantModifierCheck 
 TokenTypes . ANNOTATION _ FIELD _ DEF , 
 TokenTypes . INTERFACE _ DEF , 
 TokenTypes . CTOR _ DEF , 
 + TokenTypes . CLASS _ DEF , 
 + TokenTypes . ENUM _ DEF , 
 } ; 
 } 
 
 @ @ - 206 , 9 + 203 , 11 @ @ public class RedundantModifierCheck 
 * @ return true or false 
 * / 
 private static boolean isInterfaceOrAnnotationMember ( DetailAST ast ) { 
 - final DetailAST parentTypeDef = ast . getParent ( ) . getParent ( ) ; 
 - return parentTypeDef . getType ( ) = = TokenTypes . INTERFACE _ DEF 
 - | | parentTypeDef . getType ( ) = = TokenTypes . ANNOTATION _ DEF ; 
 + final DetailAST parentTypeDef = 
 + ast . getParent ( ) ! = null ? ast . getParent ( ) . getParent ( ) : null ; 
 + return parentTypeDef ! = null 
 + & & ( parentTypeDef . getType ( ) = = TokenTypes . INTERFACE _ DEF 
 + | | parentTypeDef . getType ( ) = = TokenTypes . ANNOTATION _ DEF ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java 
 index e34c01d . . eb82b7f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierTest . java 
 @ @ - 93 , 6 + 93 , 17 @ @ public class RedundantModifierTest 
 } 
 
 @ Test 
 + public void testInnerTypeInInterfaceIsImplicitlyStatic ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( RedundantModifierCheck . class ) ; 
 + final String [ ] expected = { 
 + " 8 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , 
 + " 12 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputRedundantStaticModifierInInnerTypeOfInterface . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testGetAcceptableTokens ( ) { 
 RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck ( ) ; 
 int [ ] actual = redundantModifierCheckObj . getAcceptableTokens ( ) ; 
 @ @ - 102 , 6 + 113 , 8 @ @ public class RedundantModifierTest 
 TokenTypes . ANNOTATION _ FIELD _ DEF , 
 TokenTypes . INTERFACE _ DEF , 
 TokenTypes . CTOR _ DEF , 
 + TokenTypes . CLASS _ DEF , 
 + TokenTypes . ENUM _ DEF , 
 } ; 
 Assert . assertNotNull ( actual ) ; 
 Assert . assertArrayEquals ( expected , actual ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInInnerTypeOfInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInInnerTypeOfInterface . java 
 new file mode 100644 
 index 0000000 . . eab97ca 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputRedundantStaticModifierInInnerTypeOfInterface . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2015 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + public interface InputRedundantStaticModifierInInnerTypeOfInterface { 
 + static class MyInnerClass { } 
 + 
 + class MyInnerClass2 { } 
 + 
 + static enum MyInnerEnum { } 
 + 
 + enum MyInnerEnum2 { } 
 + }
