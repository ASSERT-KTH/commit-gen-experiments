BLEU SCORE: 0.024455939372403628

TEST MSG: Issue # 2080 : resolving ' TestNG fail ( ) without message ' TCBuild = 436
GENERATED MSG: Simplify JUnit assertions . # 1555

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 2a400b4 . . a6ff663 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 471 , 7 + 471 , 7 @ @ public class MainTest { <nl> method . setAccessible ( true ) ; <nl> try { <nl> method . invoke ( null , " myformat " , null ) ; <nl> - fail ( ) ; <nl> + fail ( " InvocationTargetException is expected " ) ; <nl> } <nl> catch ( InvocationTargetException ex ) { <nl> assertTrue ( ex . getCause ( ) instanceof IllegalStateException ) ; <nl> @ @ - 487 , 7 + 487 , 7 @ @ public class MainTest { <nl> final String outDir = " myfolder123 " ; <nl> try { <nl> method . invoke ( null , " myformat " , outDir ) ; <nl> - fail ( ) ; <nl> + fail ( " InvocationTargetException is expected " ) ; <nl> } <nl> catch ( InvocationTargetException ex ) { <nl> assertTrue ( ex . getCause ( ) instanceof IllegalStateException ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> index dcf8652 . . 506d360 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> @ @ - 129 , 7 + 129 , 7 @ @ public class PackageNamesLoaderTest { <nl> <nl> try { <nl> PackageNamesLoader . getPackageNames ( classLoader ) ; <nl> - fail ( ) ; <nl> + fail ( " CheckstyleException is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> assertTrue ( ex . getCause ( ) instanceof SAXException ) ; <nl> @ @ - 154 , 7 + 154 , 7 @ @ public class PackageNamesLoaderTest { <nl> <nl> try { <nl> PackageNamesLoader . getPackageNames ( classLoader ) ; <nl> - fail ( ) ; <nl> + fail ( " CheckstyleException is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> assertTrue ( ex . getCause ( ) instanceof IOException ) ; <nl> @ @ - 171 , 7 + 171 , 7 @ @ public class PackageNamesLoaderTest { <nl> <nl> try { <nl> PackageNamesLoader . getPackageNames ( classLoader ) ; <nl> - fail ( ) ; <nl> + fail ( " CheckstyleException is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> assertTrue ( ex . getCause ( ) instanceof IOException ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> index 73f9645 . . f4bb66c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> @ @ - 107 , 7 + 107 , 7 @ @ public class PropertyCacheFileTest { <nl> method . setAccessible ( true ) ; <nl> try { <nl> method . invoke ( cache , config ) ; <nl> - fail ( ) ; <nl> + fail ( " InvocationTargetException is expected " ) ; <nl> } <nl> catch ( InvocationTargetException ex ) { <nl> assertTrue ( ex . getCause ( ) . getCause ( ) instanceof NoSuchAlgorithmException ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index 5664aff . . 0b69994 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 91 , 7 + 91 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> try { <nl> verify ( checkConfig , getPath ( " InputMain . java " ) , expected ) ; <nl> - fail ( ) ; <nl> + fail ( " CheckstyleException is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> final String errorMsg = ex . getMessage ( ) ; <nl> @ @ - 118 , 7 + 118 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> <nl> try { <nl> verify ( checkConfig , temporaryFolder . newFile ( ) . getPath ( ) , expected ) ; <nl> - fail ( ) ; <nl> + fail ( " CheckstyleException is expected " ) ; <nl> } <nl> catch ( CheckstyleException exception ) { <nl> assertTrue ( exception . getMessage ( ) . contains ( " TreeWalker is not allowed as a parent of " ) ) ; <nl> @ @ - 318 , 7 + 318 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> <nl> try { <nl> verify ( checkConfig , pathToEmptyFile , expected ) ; <nl> - fail ( ) ; <nl> + fail ( " CheckstyleException is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> assertTrue ( ex . getMessage ( ) . startsWith ( " cannot initialize module " <nl> @ @ - 340 , 7 + 340 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> } <nl> catch ( CheckstyleException ignored ) { <nl> / / unexpected <nl> - fail ( ) ; <nl> + fail ( " CheckstyleException is NOT expected " ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> index 56d19a6 . . ffdb812 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class AutomaticBeanTest { <nl> context . add ( " exceptionalMethod " , 123 . 0f ) ; <nl> try { <nl> testBean . contextualize ( context ) ; <nl> - fail ( ) ; <nl> + fail ( " InvocationTargetException is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> assertTrue ( ex . getCause ( ) instanceof InvocationTargetException ) ; <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class AutomaticBeanTest { <nl> context . add ( " val " , " some string " ) ; <nl> try { <nl> testBean . contextualize ( context ) ; <nl> - fail ( ) ; <nl> + fail ( " InvocationTargetException is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> assertTrue ( ex . getCause ( ) instanceof ConversionException ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> index 0d64a90 . . e48c621 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> @ @ - 35 , 7 + 35 , 7 @ @ public class FileTextTest { <nl> final String charsetName = " STRANGE _ CHARSET " ; <nl> try { <nl> new FileText ( new File ( " any name " ) , charsetName ) ; <nl> - fail ( ) ; <nl> + fail ( " UnsupportedEncodingException is expected " ) ; <nl> } <nl> catch ( UnsupportedEncodingException ex ) { <nl> assertEquals ( " Unsupported charset : " + charsetName , ex . getMessage ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ClassResolverTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ClassResolverTest . java <nl> index 7ab2097 . . ae8662b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ClassResolverTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ClassResolverTest . java <nl> @ @ - 61 , 7 + 61 , 7 @ @ public class ClassResolverTest { <nl> <nl> try { <nl> classResolver . resolve ( " ChoiceFormat " , " " ) ; <nl> - fail ( ) ; <nl> + fail ( " ClassNotFoundException is expected " ) ; <nl> } <nl> catch ( ClassNotFoundException ex ) { <nl> / / expected <nl> @ @ - 77 , 7 + 77 , 7 @ @ public class ClassResolverTest { <nl> javaUtilClassResolver . resolve ( " List " , " " ) ; <nl> try { <nl> javaUtilClassResolver . resolve ( " two . nil . england " , " " ) ; <nl> - fail ( ) ; <nl> + fail ( " ClassNotFoundException is expected " ) ; <nl> } <nl> catch ( ClassNotFoundException ex ) { <nl> / / expected <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java <nl> index 9ebe768 . . 8d8677d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java <nl> @ @ - 91 , 7 + 91 , 7 @ @ public class TrailingCommentCheckTest extends BaseCheckTestSupport { <nl> final TrailingCommentCheck check = new TrailingCommentCheck ( ) ; <nl> try { <nl> check . visitToken ( new DetailAST ( ) ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> assertEquals ( " visitToken ( ) shouldn ' t be called . " , ex . getMessage ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> index 8cfabf4 . . 4e3ea92 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> @ @ - 108 , 7 + 108 , 7 @ @ public class UncommentedMainCheckTest <nl> ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . CTOR _ DEF , " ctor " ) ) ; <nl> try { <nl> check . visitToken ( ast ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> assertEquals ( ast . toString ( ) , ex . getMessage ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java <nl> index 75ffd85 . . 3bdaae1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java <nl> @ @ - 265 , 13 + 265 , 12 @ @ public class AnnotationUseStyleCheckTest extends BaseCheckTestSupport { <nl> final AnnotationUseStyleCheck check = new AnnotationUseStyleCheck ( ) ; <nl> try { <nl> check . setElementStyle ( " SHOULD _ PRODUCE _ ERROR " ) ; <nl> + Assert . fail ( " ConversionException is expected " ) ; <nl> } <nl> catch ( ConversionException ex ) { <nl> assertTrue ( ex . getMessage ( ) . startsWith ( " unable to parse " ) ) ; <nl> return ; <nl> } <nl> - <nl> - Assert . fail ( ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> index c98584f . . 0d7294d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> @ @ - 178 , 7 + 178 , 7 @ @ public class FinalLocalVariableCheckTest <nl> <nl> try { <nl> check . visitToken ( lambdaAst ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> / / it is OK <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> index 87e4192 . . 08d59eb 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> @ @ - 183 , 7 + 183 , 7 @ @ public class IllegalInstantiationCheckTest <nl> <nl> try { <nl> check . visitToken ( lambdaAst ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> / / it is OK <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> index c0395bc . . 180e11a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> @ @ - 210 , 7 + 210 , 7 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { <nl> <nl> try { <nl> check . visitToken ( classDefAst ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> / / it is OK <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java <nl> index 80fa0d0 . . c75c3d6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java <nl> @ @ - 98 , 7 + 98 , 7 @ @ public class ModifiedControlVariableCheckTest <nl> <nl> try { <nl> check . visitToken ( classDefAst ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> / / it is OK <nl> @ @ - 106 , 7 + 106 , 7 @ @ public class ModifiedControlVariableCheckTest <nl> <nl> try { <nl> check . leaveToken ( classDefAst ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> / / it is OK <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java <nl> index ad31866 . . d092827 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class ParameterAssignmentCheckTest extends BaseCheckTestSupport { <nl> <nl> try { <nl> check . visitToken ( classDefAst ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> / / it is OK <nl> @ @ - 79 , 7 + 79 , 7 @ @ public class ParameterAssignmentCheckTest extends BaseCheckTestSupport { <nl> <nl> try { <nl> check . leaveToken ( classDefAst ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> / / it is OK <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java <nl> index e6df187 . . 548c59a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java <nl> @ @ - 124 , 7 + 124 , 7 @ @ public class ReturnCountCheckTest extends BaseCheckTestSupport { <nl> <nl> try { <nl> check . visitToken ( classDefAst ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> / / it is OK <nl> @ @ - 132 , 7 + 132 , 7 @ @ public class ReturnCountCheckTest extends BaseCheckTestSupport { <nl> <nl> try { <nl> check . leaveToken ( classDefAst ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> / / it is OK <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> index dffba0c . . 4c8a382 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> @ @ - 99 , 7 + 99 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { <nl> ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . INTERFACE _ DEF , " interface " ) ) ; <nl> try { <nl> obj . visitToken ( ast ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> / / expected <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> index 953a205 . . 94b61ea 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> @ @ - 90 , 7 + 90 , 7 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { <nl> ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . CLASS _ DEF , " class " ) ) ; <nl> try { <nl> obj . visitToken ( ast ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> assertEquals ( ast . toString ( ) , ex . getMessage ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> index d00ad04 . . 4b662fc 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> @ @ - 77 , 7 + 77 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { <nl> } <nl> catch ( CheckstyleException ex ) { <nl> / / Exception is not expected <nl> - fail ( ) ; <nl> + fail ( " Exception is not expected " ) ; <nl> } <nl> } <nl> <nl> @ @ - 87 , 7 + 87 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { <nl> checkConfig . addAttribute ( " headerFile " , getPath ( " nonExisting . file " ) ) ; <nl> try { <nl> createChecker ( checkConfig ) ; <nl> - fail ( ) ; <nl> + fail ( " CheckstyleException is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> assertTrue ( ex . getMessage ( ) <nl> @ @ - 105 , 7 + 105 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { <nl> checkConfig . addAttribute ( " charset " , " XSO - 8859 - 1 " ) ; <nl> try { <nl> createChecker ( checkConfig ) ; <nl> - fail ( ) ; <nl> + fail ( " CheckstyleException is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> assertEquals ( " cannot initialize module " <nl> @ @ - 160 , 7 + 160 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { <nl> check . setHeader ( " Header " ) ; <nl> try { <nl> check . setHeader ( " Header2 " ) ; <nl> - fail ( ) ; <nl> + fail ( " ConversionException is expected " ) ; <nl> } <nl> catch ( ConversionException ex ) { <nl> assertEquals ( " header has already been set - " <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfoTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfoTest . java <nl> index b7950ed . . 9f7d5b7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfoTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfoTest . java <nl> @ @ - 356 , 7 + 356 , 7 @ @ public class JavadocTagInfoTest { <nl> <nl> try { <nl> JavadocTagInfo . fromName ( null ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " the name is null " , ex . getMessage ( ) ) ; <nl> @ @ - 364 , 7 + 364 , 7 @ @ public class JavadocTagInfoTest { <nl> <nl> try { <nl> JavadocTagInfo . fromName ( " myname " ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " the name [ myname ] is not a valid Javadoc tag name " , ex . getMessage ( ) ) ; <nl> @ @ - 372 , 7 + 372 , 7 @ @ public class JavadocTagInfoTest { <nl> <nl> try { <nl> JavadocTagInfo . fromText ( null ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " the text is null " , ex . getMessage ( ) ) ; <nl> @ @ - 380 , 7 + 380 , 7 @ @ public class JavadocTagInfoTest { <nl> <nl> try { <nl> JavadocTagInfo . fromText ( " myname " ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " the text [ myname ] is not a valid Javadoc tag text " , ex . getMessage ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java <nl> index ea111de . . a1aaa87 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java <nl> @ @ - 65 , 7 + 65 , 7 @ @ public class ConstantNameCheckTest <nl> checkConfig . addAttribute ( " format " , " \ \ " ) ; <nl> try { <nl> createChecker ( checkConfig ) ; <nl> - fail ( ) ; <nl> + fail ( " CheckstyleException is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> assertEquals ( " cannot initialize module " <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java <nl> index 27a1882 . . f9cd099 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java <nl> @ @ - 114 , 7 + 114 , 7 @ @ public class FileLengthCheckTest <nl> assertEquals ( " extension should be the same " , " . java " , check . getFileExtensions ( ) [ 0 ] ) ; <nl> try { <nl> check . setFileExtensions ( ( String [ ] ) null ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " Extensions array can not be null " , ex . getMessage ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java <nl> index 1a2ed44 . . 0495066 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java <nl> @ @ - 121 , 7 + 121 , 7 @ @ public class TokenTypesDocletTest { <nl> <nl> try { <nl> TokenTypesDoclet . start ( rootDoc ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException expected ) { <nl> / / Token types must have first sentence of Javadoc summary <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java <nl> index 05c3b2e . . 52dff3b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java <nl> @ @ - 46 , 7 + 46 , 7 @ @ public class AnnotationUtilityTest { <nl> public void testContainsAnnotationNull ( ) { <nl> try { <nl> AnnotationUtility . containsAnnotation ( null ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " the ast is null " , ex . getMessage ( ) ) ; <nl> @ @ - 57 , 7 + 57 , 7 @ @ public class AnnotationUtilityTest { <nl> public void testContainsAnnotationNull2 ( ) { <nl> try { <nl> AnnotationUtility . containsAnnotation ( null , " " ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " the ast is null " , ex . getMessage ( ) ) ; <nl> @ @ - 98 , 7 + 98 , 7 @ @ public class AnnotationUtilityTest { <nl> public void testAnnotationHolderNull ( ) { <nl> try { <nl> AnnotationUtility . getAnnotationHolder ( null ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " the ast is null " , ex . getMessage ( ) ) ; <nl> @ @ - 109 , 7 + 109 , 7 @ @ public class AnnotationUtilityTest { <nl> public void testAnnotationNull ( ) { <nl> try { <nl> AnnotationUtility . getAnnotation ( null , null ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " the ast is null " , ex . getMessage ( ) ) ; <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class AnnotationUtilityTest { <nl> public void testAnnotationNull2 ( ) { <nl> try { <nl> AnnotationUtility . getAnnotation ( new DetailAST ( ) , null ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " the annotation is null " , ex . getMessage ( ) ) ; <nl> @ @ - 131 , 7 + 131 , 7 @ @ public class AnnotationUtilityTest { <nl> public void testAnnotationEmpty ( ) { <nl> try { <nl> AnnotationUtility . getAnnotation ( new DetailAST ( ) , " " ) ; <nl> - Assert . fail ( ) ; <nl> + Assert . fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> assertEquals ( " the annotation is empty or spaces " , ex . getMessage ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> index cc0bfac . . 33c9240 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> @ @ - 157 , 7 + 157 , 7 @ @ public class CommonUtilsTest { <nl> public void testGetNonExistingConstructor ( ) { <nl> try { <nl> CommonUtils . getConstructor ( Math . class ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException expected ) { <nl> assertSame ( NoSuchMethodException . class , expected . getCause ( ) . getClass ( ) ) ; <nl> @ @ - 180 , 7 + 180 , 7 @ @ public class CommonUtilsTest { <nl> <nl> try { <nl> CommonUtils . invokeConstructor ( constructor ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException expected ) { <nl> assertSame ( InstantiationException . class , expected . getCause ( ) . getClass ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java <nl> index 7e927f9 . . b87d296 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java <nl> @ @ - 51 , 7 + 51 , 7 @ @ public class TokenUtilsTest { <nl> <nl> try { <nl> TokenUtils . getIntFromField ( field , 0 ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException expected ) { <nl> assertTrue ( expected . getMessage ( ) . startsWith ( <nl> @ @ - 66 , 7 + 66 , 7 @ @ public class TokenUtilsTest { <nl> final Integer id = Integer . MAX _ VALUE - 1 ; <nl> try { <nl> TokenUtils . getTokenName ( id ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException expected ) { <nl> assertEquals ( " given id " + id , expected . getMessage ( ) ) ; <nl> @ @ - 104 , 7 + 104 , 7 @ @ public class TokenUtilsTest { <nl> <nl> } <nl> catch ( IllegalAccessException | NoSuchFieldException ex ) { <nl> - fail ( ) ; <nl> + fail ( " Exception is expected " ) ; <nl> } <nl> } <nl> <nl> @ @ - 113 , 7 + 113 , 7 @ @ public class TokenUtilsTest { <nl> final String id = " NON _ EXISTING _ VALUE " ; <nl> try { <nl> TokenUtils . getTokenId ( id ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException expected ) { <nl> assertEquals ( " given name " + id , expected . getMessage ( ) ) ; <nl> @ @ - 125 , 7 + 125 , 7 @ @ public class TokenUtilsTest { <nl> final String id = " NON _ EXISTING _ VALUE " ; <nl> try { <nl> TokenUtils . getShortDescription ( id ) ; <nl> - fail ( ) ; <nl> + fail ( " IllegalArgumentException is expected " ) ; <nl> } <nl> catch ( IllegalArgumentException expected ) { <nl> assertEquals ( " given name " + id , expected . getMessage ( ) ) ;
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index 9cb39c4 . . 12c15b0 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 299 , 9 + 299 , 10 @ @ <nl> < module name = " CommentsIndentation " / > <nl> < module name = " HiddenField " > <nl> < property name = " ignoreConstructorParameter " value = " true " / > <nl> - 	 	 < property name = " ignoreSetter " value = " true " / > <nl> + < property name = " ignoreSetter " value = " true " / > <nl> < property name = " setterCanReturnItsClass " value = " true " / > <nl> < / module > <nl> + < module name = " InnerTypeLast " / > <nl> <nl> < module name = " ModifiedControlVariable " / > <nl> <nl> @ @ - 314 , 7 + 315 , 6 @ @ <nl> < module name = " FinalParameters " / > <nl> < module name = " IllegalToken " / > <nl> < module name = " IllegalType " / > <nl> - < module name = " InnerTypeLast " / > <nl> < module name = " JavadocParagraph " / > <nl> < module name = " JavadocTagContinuationIndentation " / > <nl> < module name = " JavaNCSS " / > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index c43b976 . . 6564dad 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 237 , 13 + 237 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> verify ( checkConfig , pathToEmptyFile , expected ) ; <nl> } <nl> <nl> - public static class BadJavaDocCheck extends Check { <nl> - @ Override <nl> - public int [ ] getDefaultTokens ( ) { <nl> - return new int [ ] { TokenTypes . SINGLE _ LINE _ COMMENT } ; <nl> - } <nl> - } <nl> - <nl> @ Test <nl> public void testProcessNonJavaFiles ( ) throws Exception { <nl> final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> @ @ - 300 , 4 + 293 , 11 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> <nl> treeWalker . processFiltered ( file , lines ) ; <nl> } <nl> + <nl> + public static class BadJavaDocCheck extends Check { <nl> + @ Override <nl> + public int [ ] getDefaultTokens ( ) { <nl> + return new int [ ] { TokenTypes . SINGLE _ LINE _ COMMENT } ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> index 0a02db4 . . c04062f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> @ @ - 33 , 39 + 33 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultContext ; <nl> <nl> public class AutomaticBeanTest { <nl> <nl> - public class TestBean extends AutomaticBean { <nl> - <nl> - private String privateField ; <nl> - <nl> - private String wrong ; <nl> - <nl> - private int val ; <nl> - <nl> - public void setWrong ( String wrong ) { <nl> - this . wrong = wrong ; <nl> - } <nl> - <nl> - public void setVal ( int val ) { <nl> - this . val = val ; <nl> - } <nl> - <nl> - public void setExceptionalMethod ( String value ) { <nl> - throw new IllegalStateException ( " for UT " ) ; <nl> - } <nl> - <nl> - public void setName ( String name ) { <nl> - } <nl> - <nl> - / * * <nl> - * just for code coverage <nl> - * @ param childConf a child of this component ' s Configuration <nl> - * / <nl> - @ Override <nl> - protected void setupChild ( Configuration childConf ) throws CheckstyleException { <nl> - super . setupChild ( childConf ) ; <nl> - } <nl> - } <nl> - <nl> @ Test <nl> public void testConfigure _ NoSuchAttribute ( ) { <nl> final TestBean testBean = new TestBean ( ) ; <nl> @ @ - 130 , 4 + 97 , 36 @ @ public class AutomaticBeanTest { <nl> } <nl> } <nl> <nl> + public class TestBean extends AutomaticBean { <nl> + <nl> + private String privateField ; <nl> + <nl> + private String wrong ; <nl> + <nl> + private int val ; <nl> + <nl> + public void setWrong ( String wrong ) { <nl> + this . wrong = wrong ; <nl> + } <nl> + <nl> + public void setVal ( int val ) { <nl> + this . val = val ; <nl> + } <nl> + <nl> + public void setExceptionalMethod ( String value ) { <nl> + throw new IllegalStateException ( " for UT " ) ; <nl> + } <nl> + <nl> + public void setName ( String name ) { <nl> + } <nl> + <nl> + / * * <nl> + * just for code coverage <nl> + * @ param childConf a child of this component ' s Configuration <nl> + * / <nl> + @ Override <nl> + protected void setupChild ( Configuration childConf ) throws CheckstyleException { <nl> + super . setupChild ( childConf ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> index 168528b . . 2ac7f53 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> @ @ - 45 , 33 + 45 , 6 @ @ public class FileSetCheckLifecycleTest <nl> return dc ; <nl> } <nl> <nl> - public static class TestFileSetCheck extends AbstractFileSetCheck { <nl> - private static boolean destroyed ; <nl> - private static boolean fileContentAvailable ; <nl> - <nl> - @ Override <nl> - public void destroy ( ) { <nl> - destroyed = true ; <nl> - } <nl> - <nl> - public static boolean isDestroyed ( ) { <nl> - return destroyed ; <nl> - } <nl> - <nl> - public static boolean isFileContentAvailable ( ) { <nl> - return fileContentAvailable ; <nl> - } <nl> - <nl> - @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> - } <nl> - <nl> - @ Override <nl> - public void finishProcessing ( ) { <nl> - fileContentAvailable = FileContentsHolder . getContents ( ) ! = null ; <nl> - } <nl> - } <nl> - <nl> @ Test <nl> public void testTranslation ( ) throws Exception { <nl> final Configuration checkConfig = <nl> @ @ - 111 , 4 + 84 , 31 @ @ public class FileSetCheckLifecycleTest <nl> assertTrue ( " FileContent should be available during finishProcessing ( ) call " , <nl> TestFileSetCheck . isFileContentAvailable ( ) ) ; <nl> } <nl> + <nl> + public static class TestFileSetCheck extends AbstractFileSetCheck { <nl> + private static boolean destroyed ; <nl> + private static boolean fileContentAvailable ; <nl> + <nl> + @ Override <nl> + public void destroy ( ) { <nl> + destroyed = true ; <nl> + } <nl> + <nl> + public static boolean isDestroyed ( ) { <nl> + return destroyed ; <nl> + } <nl> + <nl> + public static boolean isFileContentAvailable ( ) { <nl> + return fileContentAvailable ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void processFiltered ( File file , List < String > lines ) { <nl> + } <nl> + <nl> + @ Override <nl> + public void finishProcessing ( ) { <nl> + fileContentAvailable = FileContentsHolder . getContents ( ) ! = null ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> index a02d6a3 . . 5be3c7f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> @ @ - 33 , 19 + 33 , 6 @ @ import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> <nl> public class AbstractJavadocCheckTest extends BaseCheckTestSupport { <nl> - public static class TempCheck extends AbstractJavadocCheck { <nl> - <nl> - @ Override <nl> - public int [ ] getDefaultJavadocTokens ( ) { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public void visitJavadocToken ( DetailNode ast ) { <nl> - / / do nothing <nl> - } <nl> - <nl> - } <nl> <nl> @ Test <nl> public void testNumberFormatException ( ) throws Exception { <nl> @ @ - 92 , 4 + 79 , 17 @ @ public class AbstractJavadocCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> verify ( checker , getPath ( " javadoc / InputCorrectJavaDocParagraphCheck . java " ) , expected ) ; <nl> } <nl> + <nl> + public static class TempCheck extends AbstractJavadocCheck { <nl> + <nl> + @ Override <nl> + public int [ ] getDefaultJavadocTokens ( ) { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visitJavadocToken ( DetailNode ast ) { <nl> + / / do nothing <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java <nl> index 59149dd . . cea443a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java <nl> @ @ - 38 , 6 + 38 , 15 @ @ public class AllBlockCommentsTest extends BaseCheckTestSupport { <nl> <nl> private static final String LINE _ SEPARATOR = System . getProperty ( " line . separator " ) ; <nl> <nl> + @ Test <nl> + public void testAllBlockComments ( ) throws Exception { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( BlockCommentListenerCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " comments " + File . separator <nl> + + " InputFullOfBlockComments . java " ) , expected ) ; <nl> + Assert . assertTrue ( allComments . isEmpty ( ) ) ; <nl> + } <nl> + <nl> public static class BlockCommentListenerCheck extends Check { <nl> @ Override <nl> public boolean isCommentNodesRequired ( ) { <nl> @ @ - 74 , 15 + 83 , 5 @ @ public class AllBlockCommentsTest extends BaseCheckTestSupport { <nl> Assert . fail ( " Unexpected comment : " + commentContent ) ; <nl> } <nl> } <nl> - <nl> - } <nl> - <nl> - @ Test <nl> - public void testAllBlockComments ( ) throws Exception { <nl> - DefaultConfiguration checkConfig = createCheckConfig ( BlockCommentListenerCheck . class ) ; <nl> - final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " comments " + File . separator <nl> - + " InputFullOfBlockComments . java " ) , expected ) ; <nl> - Assert . assertTrue ( allComments . isEmpty ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java <nl> index becdd12 . . e9b6023 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java <nl> @ @ - 37 , 6 + 37 , 15 @ @ public class AllSinglelineCommentsTest extends BaseCheckTestSupport { <nl> <nl> private static final String LINE _ SEPARATOR = System . getProperty ( " line . separator " ) ; <nl> <nl> + @ Test <nl> + public void testAllBlockComments ( ) throws Exception { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( SinglelineCommentListenerCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " comments " + File . separator <nl> + + " InputFullOfSinglelineComments . java " ) , expected ) ; <nl> + Assert . assertTrue ( allComments . isEmpty ( ) ) ; <nl> + } <nl> + <nl> public static class SinglelineCommentListenerCheck extends Check { <nl> @ Override <nl> public boolean isCommentNodesRequired ( ) { <nl> @ @ - 69 , 15 + 78 , 5 @ @ public class AllSinglelineCommentsTest extends BaseCheckTestSupport { <nl> Assert . fail ( " Unexpected comment : " + commentContent ) ; <nl> } <nl> } <nl> - <nl> - } <nl> - <nl> - @ Test <nl> - public void testAllBlockComments ( ) throws Exception { <nl> - DefaultConfiguration checkConfig = createCheckConfig ( SinglelineCommentListenerCheck . class ) ; <nl> - final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " comments " + File . separator <nl> - + " InputFullOfSinglelineComments . java " ) , expected ) ; <nl> - Assert . assertTrue ( allComments . isEmpty ( ) ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 2a400b4 . . a6ff663 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 471 , 7 + 471 , 7 @ @ public class MainTest { 
 method . setAccessible ( true ) ; 
 try { 
 method . invoke ( null , " myformat " , null ) ; 
 - fail ( ) ; 
 + fail ( " InvocationTargetException is expected " ) ; 
 } 
 catch ( InvocationTargetException ex ) { 
 assertTrue ( ex . getCause ( ) instanceof IllegalStateException ) ; 
 @ @ - 487 , 7 + 487 , 7 @ @ public class MainTest { 
 final String outDir = " myfolder123 " ; 
 try { 
 method . invoke ( null , " myformat " , outDir ) ; 
 - fail ( ) ; 
 + fail ( " InvocationTargetException is expected " ) ; 
 } 
 catch ( InvocationTargetException ex ) { 
 assertTrue ( ex . getCause ( ) instanceof IllegalStateException ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 index dcf8652 . . 506d360 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 @ @ - 129 , 7 + 129 , 7 @ @ public class PackageNamesLoaderTest { 
 
 try { 
 PackageNamesLoader . getPackageNames ( classLoader ) ; 
 - fail ( ) ; 
 + fail ( " CheckstyleException is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 assertTrue ( ex . getCause ( ) instanceof SAXException ) ; 
 @ @ - 154 , 7 + 154 , 7 @ @ public class PackageNamesLoaderTest { 
 
 try { 
 PackageNamesLoader . getPackageNames ( classLoader ) ; 
 - fail ( ) ; 
 + fail ( " CheckstyleException is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 assertTrue ( ex . getCause ( ) instanceof IOException ) ; 
 @ @ - 171 , 7 + 171 , 7 @ @ public class PackageNamesLoaderTest { 
 
 try { 
 PackageNamesLoader . getPackageNames ( classLoader ) ; 
 - fail ( ) ; 
 + fail ( " CheckstyleException is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 assertTrue ( ex . getCause ( ) instanceof IOException ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 index 73f9645 . . f4bb66c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 @ @ - 107 , 7 + 107 , 7 @ @ public class PropertyCacheFileTest { 
 method . setAccessible ( true ) ; 
 try { 
 method . invoke ( cache , config ) ; 
 - fail ( ) ; 
 + fail ( " InvocationTargetException is expected " ) ; 
 } 
 catch ( InvocationTargetException ex ) { 
 assertTrue ( ex . getCause ( ) . getCause ( ) instanceof NoSuchAlgorithmException ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index 5664aff . . 0b69994 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 91 , 7 + 91 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 try { 
 verify ( checkConfig , getPath ( " InputMain . java " ) , expected ) ; 
 - fail ( ) ; 
 + fail ( " CheckstyleException is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 final String errorMsg = ex . getMessage ( ) ; 
 @ @ - 118 , 7 + 118 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 
 try { 
 verify ( checkConfig , temporaryFolder . newFile ( ) . getPath ( ) , expected ) ; 
 - fail ( ) ; 
 + fail ( " CheckstyleException is expected " ) ; 
 } 
 catch ( CheckstyleException exception ) { 
 assertTrue ( exception . getMessage ( ) . contains ( " TreeWalker is not allowed as a parent of " ) ) ; 
 @ @ - 318 , 7 + 318 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 
 try { 
 verify ( checkConfig , pathToEmptyFile , expected ) ; 
 - fail ( ) ; 
 + fail ( " CheckstyleException is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 assertTrue ( ex . getMessage ( ) . startsWith ( " cannot initialize module " 
 @ @ - 340 , 7 + 340 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 } 
 catch ( CheckstyleException ignored ) { 
 / / unexpected 
 - fail ( ) ; 
 + fail ( " CheckstyleException is NOT expected " ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 index 56d19a6 . . ffdb812 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 @ @ - 74 , 7 + 74 , 7 @ @ public class AutomaticBeanTest { 
 context . add ( " exceptionalMethod " , 123 . 0f ) ; 
 try { 
 testBean . contextualize ( context ) ; 
 - fail ( ) ; 
 + fail ( " InvocationTargetException is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 assertTrue ( ex . getCause ( ) instanceof InvocationTargetException ) ; 
 @ @ - 89 , 7 + 89 , 7 @ @ public class AutomaticBeanTest { 
 context . add ( " val " , " some string " ) ; 
 try { 
 testBean . contextualize ( context ) ; 
 - fail ( ) ; 
 + fail ( " InvocationTargetException is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 assertTrue ( ex . getCause ( ) instanceof ConversionException ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 index 0d64a90 . . e48c621 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 @ @ - 35 , 7 + 35 , 7 @ @ public class FileTextTest { 
 final String charsetName = " STRANGE _ CHARSET " ; 
 try { 
 new FileText ( new File ( " any name " ) , charsetName ) ; 
 - fail ( ) ; 
 + fail ( " UnsupportedEncodingException is expected " ) ; 
 } 
 catch ( UnsupportedEncodingException ex ) { 
 assertEquals ( " Unsupported charset : " + charsetName , ex . getMessage ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ClassResolverTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ClassResolverTest . java 
 index 7ab2097 . . ae8662b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ClassResolverTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ClassResolverTest . java 
 @ @ - 61 , 7 + 61 , 7 @ @ public class ClassResolverTest { 
 
 try { 
 classResolver . resolve ( " ChoiceFormat " , " " ) ; 
 - fail ( ) ; 
 + fail ( " ClassNotFoundException is expected " ) ; 
 } 
 catch ( ClassNotFoundException ex ) { 
 / / expected 
 @ @ - 77 , 7 + 77 , 7 @ @ public class ClassResolverTest { 
 javaUtilClassResolver . resolve ( " List " , " " ) ; 
 try { 
 javaUtilClassResolver . resolve ( " two . nil . england " , " " ) ; 
 - fail ( ) ; 
 + fail ( " ClassNotFoundException is expected " ) ; 
 } 
 catch ( ClassNotFoundException ex ) { 
 / / expected 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java 
 index 9ebe768 . . 8d8677d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java 
 @ @ - 91 , 7 + 91 , 7 @ @ public class TrailingCommentCheckTest extends BaseCheckTestSupport { 
 final TrailingCommentCheck check = new TrailingCommentCheck ( ) ; 
 try { 
 check . visitToken ( new DetailAST ( ) ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 assertEquals ( " visitToken ( ) shouldn ' t be called . " , ex . getMessage ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 index 8cfabf4 . . 4e3ea92 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 @ @ - 108 , 7 + 108 , 7 @ @ public class UncommentedMainCheckTest 
 ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . CTOR _ DEF , " ctor " ) ) ; 
 try { 
 check . visitToken ( ast ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 assertEquals ( ast . toString ( ) , ex . getMessage ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java 
 index 75ffd85 . . 3bdaae1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheckTest . java 
 @ @ - 265 , 13 + 265 , 12 @ @ public class AnnotationUseStyleCheckTest extends BaseCheckTestSupport { 
 final AnnotationUseStyleCheck check = new AnnotationUseStyleCheck ( ) ; 
 try { 
 check . setElementStyle ( " SHOULD _ PRODUCE _ ERROR " ) ; 
 + Assert . fail ( " ConversionException is expected " ) ; 
 } 
 catch ( ConversionException ex ) { 
 assertTrue ( ex . getMessage ( ) . startsWith ( " unable to parse " ) ) ; 
 return ; 
 } 
 - 
 - Assert . fail ( ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 index c98584f . . 0d7294d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 @ @ - 178 , 7 + 178 , 7 @ @ public class FinalLocalVariableCheckTest 
 
 try { 
 check . visitToken ( lambdaAst ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 / / it is OK 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 index 87e4192 . . 08d59eb 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 @ @ - 183 , 7 + 183 , 7 @ @ public class IllegalInstantiationCheckTest 
 
 try { 
 check . visitToken ( lambdaAst ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 / / it is OK 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 index c0395bc . . 180e11a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 @ @ - 210 , 7 + 210 , 7 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { 
 
 try { 
 check . visitToken ( classDefAst ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 / / it is OK 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java 
 index 80fa0d0 . . c75c3d6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java 
 @ @ - 98 , 7 + 98 , 7 @ @ public class ModifiedControlVariableCheckTest 
 
 try { 
 check . visitToken ( classDefAst ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 / / it is OK 
 @ @ - 106 , 7 + 106 , 7 @ @ public class ModifiedControlVariableCheckTest 
 
 try { 
 check . leaveToken ( classDefAst ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 / / it is OK 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java 
 index ad31866 . . d092827 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public class ParameterAssignmentCheckTest extends BaseCheckTestSupport { 
 
 try { 
 check . visitToken ( classDefAst ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 / / it is OK 
 @ @ - 79 , 7 + 79 , 7 @ @ public class ParameterAssignmentCheckTest extends BaseCheckTestSupport { 
 
 try { 
 check . leaveToken ( classDefAst ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 / / it is OK 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java 
 index e6df187 . . 548c59a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java 
 @ @ - 124 , 7 + 124 , 7 @ @ public class ReturnCountCheckTest extends BaseCheckTestSupport { 
 
 try { 
 check . visitToken ( classDefAst ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 / / it is OK 
 @ @ - 132 , 7 + 132 , 7 @ @ public class ReturnCountCheckTest extends BaseCheckTestSupport { 
 
 try { 
 check . leaveToken ( classDefAst ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 / / it is OK 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 index dffba0c . . 4c8a382 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 @ @ - 99 , 7 + 99 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { 
 ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . INTERFACE _ DEF , " interface " ) ) ; 
 try { 
 obj . visitToken ( ast ) ; 
 - fail ( ) ; 
 + fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 / / expected 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 index 953a205 . . 94b61ea 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 @ @ - 90 , 7 + 90 , 7 @ @ public class ThrowsCountCheckTest extends BaseCheckTestSupport { 
 ast . initialize ( new CommonHiddenStreamToken ( TokenTypes . CLASS _ DEF , " class " ) ) ; 
 try { 
 obj . visitToken ( ast ) ; 
 - fail ( ) ; 
 + fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 assertEquals ( ast . toString ( ) , ex . getMessage ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 index d00ad04 . . 4b662fc 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 @ @ - 77 , 7 + 77 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { 
 } 
 catch ( CheckstyleException ex ) { 
 / / Exception is not expected 
 - fail ( ) ; 
 + fail ( " Exception is not expected " ) ; 
 } 
 } 
 
 @ @ - 87 , 7 + 87 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { 
 checkConfig . addAttribute ( " headerFile " , getPath ( " nonExisting . file " ) ) ; 
 try { 
 createChecker ( checkConfig ) ; 
 - fail ( ) ; 
 + fail ( " CheckstyleException is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 assertTrue ( ex . getMessage ( ) 
 @ @ - 105 , 7 + 105 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { 
 checkConfig . addAttribute ( " charset " , " XSO - 8859 - 1 " ) ; 
 try { 
 createChecker ( checkConfig ) ; 
 - fail ( ) ; 
 + fail ( " CheckstyleException is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 assertEquals ( " cannot initialize module " 
 @ @ - 160 , 7 + 160 , 7 @ @ public class HeaderCheckTest extends BaseFileSetCheckTestSupport { 
 check . setHeader ( " Header " ) ; 
 try { 
 check . setHeader ( " Header2 " ) ; 
 - fail ( ) ; 
 + fail ( " ConversionException is expected " ) ; 
 } 
 catch ( ConversionException ex ) { 
 assertEquals ( " header has already been set - " 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfoTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfoTest . java 
 index b7950ed . . 9f7d5b7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfoTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagInfoTest . java 
 @ @ - 356 , 7 + 356 , 7 @ @ public class JavadocTagInfoTest { 
 
 try { 
 JavadocTagInfo . fromName ( null ) ; 
 - fail ( ) ; 
 + fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " the name is null " , ex . getMessage ( ) ) ; 
 @ @ - 364 , 7 + 364 , 7 @ @ public class JavadocTagInfoTest { 
 
 try { 
 JavadocTagInfo . fromName ( " myname " ) ; 
 - fail ( ) ; 
 + fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " the name [ myname ] is not a valid Javadoc tag name " , ex . getMessage ( ) ) ; 
 @ @ - 372 , 7 + 372 , 7 @ @ public class JavadocTagInfoTest { 
 
 try { 
 JavadocTagInfo . fromText ( null ) ; 
 - fail ( ) ; 
 + fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " the text is null " , ex . getMessage ( ) ) ; 
 @ @ - 380 , 7 + 380 , 7 @ @ public class JavadocTagInfoTest { 
 
 try { 
 JavadocTagInfo . fromText ( " myname " ) ; 
 - fail ( ) ; 
 + fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " the text [ myname ] is not a valid Javadoc tag text " , ex . getMessage ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java 
 index ea111de . . a1aaa87 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java 
 @ @ - 65 , 7 + 65 , 7 @ @ public class ConstantNameCheckTest 
 checkConfig . addAttribute ( " format " , " \ \ " ) ; 
 try { 
 createChecker ( checkConfig ) ; 
 - fail ( ) ; 
 + fail ( " CheckstyleException is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 assertEquals ( " cannot initialize module " 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java 
 index 27a1882 . . f9cd099 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java 
 @ @ - 114 , 7 + 114 , 7 @ @ public class FileLengthCheckTest 
 assertEquals ( " extension should be the same " , " . java " , check . getFileExtensions ( ) [ 0 ] ) ; 
 try { 
 check . setFileExtensions ( ( String [ ] ) null ) ; 
 - fail ( ) ; 
 + fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " Extensions array can not be null " , ex . getMessage ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java 
 index 1a2ed44 . . 0495066 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDocletTest . java 
 @ @ - 121 , 7 + 121 , 7 @ @ public class TokenTypesDocletTest { 
 
 try { 
 TokenTypesDoclet . start ( rootDoc ) ; 
 - fail ( ) ; 
 + fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException expected ) { 
 / / Token types must have first sentence of Javadoc summary 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java 
 index 05c3b2e . . 52dff3b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtilityTest . java 
 @ @ - 46 , 7 + 46 , 7 @ @ public class AnnotationUtilityTest { 
 public void testContainsAnnotationNull ( ) { 
 try { 
 AnnotationUtility . containsAnnotation ( null ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " the ast is null " , ex . getMessage ( ) ) ; 
 @ @ - 57 , 7 + 57 , 7 @ @ public class AnnotationUtilityTest { 
 public void testContainsAnnotationNull2 ( ) { 
 try { 
 AnnotationUtility . containsAnnotation ( null , " " ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " the ast is null " , ex . getMessage ( ) ) ; 
 @ @ - 98 , 7 + 98 , 7 @ @ public class AnnotationUtilityTest { 
 public void testAnnotationHolderNull ( ) { 
 try { 
 AnnotationUtility . getAnnotationHolder ( null ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " the ast is null " , ex . getMessage ( ) ) ; 
 @ @ - 109 , 7 + 109 , 7 @ @ public class AnnotationUtilityTest { 
 public void testAnnotationNull ( ) { 
 try { 
 AnnotationUtility . getAnnotation ( null , null ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " the ast is null " , ex . getMessage ( ) ) ; 
 @ @ - 120 , 7 + 120 , 7 @ @ public class AnnotationUtilityTest { 
 public void testAnnotationNull2 ( ) { 
 try { 
 AnnotationUtility . getAnnotation ( new DetailAST ( ) , null ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " the annotation is null " , ex . getMessage ( ) ) ; 
 @ @ - 131 , 7 + 131 , 7 @ @ public class AnnotationUtilityTest { 
 public void testAnnotationEmpty ( ) { 
 try { 
 AnnotationUtility . getAnnotation ( new DetailAST ( ) , " " ) ; 
 - Assert . fail ( ) ; 
 + Assert . fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 assertEquals ( " the annotation is empty or spaces " , ex . getMessage ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 index cc0bfac . . 33c9240 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 @ @ - 157 , 7 + 157 , 7 @ @ public class CommonUtilsTest { 
 public void testGetNonExistingConstructor ( ) { 
 try { 
 CommonUtils . getConstructor ( Math . class ) ; 
 - fail ( ) ; 
 + fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException expected ) { 
 assertSame ( NoSuchMethodException . class , expected . getCause ( ) . getClass ( ) ) ; 
 @ @ - 180 , 7 + 180 , 7 @ @ public class CommonUtilsTest { 
 
 try { 
 CommonUtils . invokeConstructor ( constructor ) ; 
 - fail ( ) ; 
 + fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException expected ) { 
 assertSame ( InstantiationException . class , expected . getCause ( ) . getClass ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java 
 index 7e927f9 . . b87d296 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / TokenUtilsTest . java 
 @ @ - 51 , 7 + 51 , 7 @ @ public class TokenUtilsTest { 
 
 try { 
 TokenUtils . getIntFromField ( field , 0 ) ; 
 - fail ( ) ; 
 + fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException expected ) { 
 assertTrue ( expected . getMessage ( ) . startsWith ( 
 @ @ - 66 , 7 + 66 , 7 @ @ public class TokenUtilsTest { 
 final Integer id = Integer . MAX _ VALUE - 1 ; 
 try { 
 TokenUtils . getTokenName ( id ) ; 
 - fail ( ) ; 
 + fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException expected ) { 
 assertEquals ( " given id " + id , expected . getMessage ( ) ) ; 
 @ @ - 104 , 7 + 104 , 7 @ @ public class TokenUtilsTest { 
 
 } 
 catch ( IllegalAccessException | NoSuchFieldException ex ) { 
 - fail ( ) ; 
 + fail ( " Exception is expected " ) ; 
 } 
 } 
 
 @ @ - 113 , 7 + 113 , 7 @ @ public class TokenUtilsTest { 
 final String id = " NON _ EXISTING _ VALUE " ; 
 try { 
 TokenUtils . getTokenId ( id ) ; 
 - fail ( ) ; 
 + fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException expected ) { 
 assertEquals ( " given name " + id , expected . getMessage ( ) ) ; 
 @ @ - 125 , 7 + 125 , 7 @ @ public class TokenUtilsTest { 
 final String id = " NON _ EXISTING _ VALUE " ; 
 try { 
 TokenUtils . getShortDescription ( id ) ; 
 - fail ( ) ; 
 + fail ( " IllegalArgumentException is expected " ) ; 
 } 
 catch ( IllegalArgumentException expected ) { 
 assertEquals ( " given name " + id , expected . getMessage ( ) ) ;

NEAREST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index 9cb39c4 . . 12c15b0 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 299 , 9 + 299 , 10 @ @ 
 < module name = " CommentsIndentation " / > 
 < module name = " HiddenField " > 
 < property name = " ignoreConstructorParameter " value = " true " / > 
 - 	 	 < property name = " ignoreSetter " value = " true " / > 
 + < property name = " ignoreSetter " value = " true " / > 
 < property name = " setterCanReturnItsClass " value = " true " / > 
 < / module > 
 + < module name = " InnerTypeLast " / > 
 
 < module name = " ModifiedControlVariable " / > 
 
 @ @ - 314 , 7 + 315 , 6 @ @ 
 < module name = " FinalParameters " / > 
 < module name = " IllegalToken " / > 
 < module name = " IllegalType " / > 
 - < module name = " InnerTypeLast " / > 
 < module name = " JavadocParagraph " / > 
 < module name = " JavadocTagContinuationIndentation " / > 
 < module name = " JavaNCSS " / > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index c43b976 . . 6564dad 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 237 , 13 + 237 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 verify ( checkConfig , pathToEmptyFile , expected ) ; 
 } 
 
 - public static class BadJavaDocCheck extends Check { 
 - @ Override 
 - public int [ ] getDefaultTokens ( ) { 
 - return new int [ ] { TokenTypes . SINGLE _ LINE _ COMMENT } ; 
 - } 
 - } 
 - 
 @ Test 
 public void testProcessNonJavaFiles ( ) throws Exception { 
 final TreeWalker treeWalker = new TreeWalker ( ) ; 
 @ @ - 300 , 4 + 293 , 11 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 
 treeWalker . processFiltered ( file , lines ) ; 
 } 
 + 
 + public static class BadJavaDocCheck extends Check { 
 + @ Override 
 + public int [ ] getDefaultTokens ( ) { 
 + return new int [ ] { TokenTypes . SINGLE _ LINE _ COMMENT } ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 index 0a02db4 . . c04062f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 @ @ - 33 , 39 + 33 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultContext ; 
 
 public class AutomaticBeanTest { 
 
 - public class TestBean extends AutomaticBean { 
 - 
 - private String privateField ; 
 - 
 - private String wrong ; 
 - 
 - private int val ; 
 - 
 - public void setWrong ( String wrong ) { 
 - this . wrong = wrong ; 
 - } 
 - 
 - public void setVal ( int val ) { 
 - this . val = val ; 
 - } 
 - 
 - public void setExceptionalMethod ( String value ) { 
 - throw new IllegalStateException ( " for UT " ) ; 
 - } 
 - 
 - public void setName ( String name ) { 
 - } 
 - 
 - / * * 
 - * just for code coverage 
 - * @ param childConf a child of this component ' s Configuration 
 - * / 
 - @ Override 
 - protected void setupChild ( Configuration childConf ) throws CheckstyleException { 
 - super . setupChild ( childConf ) ; 
 - } 
 - } 
 - 
 @ Test 
 public void testConfigure _ NoSuchAttribute ( ) { 
 final TestBean testBean = new TestBean ( ) ; 
 @ @ - 130 , 4 + 97 , 36 @ @ public class AutomaticBeanTest { 
 } 
 } 
 
 + public class TestBean extends AutomaticBean { 
 + 
 + private String privateField ; 
 + 
 + private String wrong ; 
 + 
 + private int val ; 
 + 
 + public void setWrong ( String wrong ) { 
 + this . wrong = wrong ; 
 + } 
 + 
 + public void setVal ( int val ) { 
 + this . val = val ; 
 + } 
 + 
 + public void setExceptionalMethod ( String value ) { 
 + throw new IllegalStateException ( " for UT " ) ; 
 + } 
 + 
 + public void setName ( String name ) { 
 + } 
 + 
 + / * * 
 + * just for code coverage 
 + * @ param childConf a child of this component ' s Configuration 
 + * / 
 + @ Override 
 + protected void setupChild ( Configuration childConf ) throws CheckstyleException { 
 + super . setupChild ( childConf ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 index 168528b . . 2ac7f53 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 @ @ - 45 , 33 + 45 , 6 @ @ public class FileSetCheckLifecycleTest 
 return dc ; 
 } 
 
 - public static class TestFileSetCheck extends AbstractFileSetCheck { 
 - private static boolean destroyed ; 
 - private static boolean fileContentAvailable ; 
 - 
 - @ Override 
 - public void destroy ( ) { 
 - destroyed = true ; 
 - } 
 - 
 - public static boolean isDestroyed ( ) { 
 - return destroyed ; 
 - } 
 - 
 - public static boolean isFileContentAvailable ( ) { 
 - return fileContentAvailable ; 
 - } 
 - 
 - @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 - } 
 - 
 - @ Override 
 - public void finishProcessing ( ) { 
 - fileContentAvailable = FileContentsHolder . getContents ( ) ! = null ; 
 - } 
 - } 
 - 
 @ Test 
 public void testTranslation ( ) throws Exception { 
 final Configuration checkConfig = 
 @ @ - 111 , 4 + 84 , 31 @ @ public class FileSetCheckLifecycleTest 
 assertTrue ( " FileContent should be available during finishProcessing ( ) call " , 
 TestFileSetCheck . isFileContentAvailable ( ) ) ; 
 } 
 + 
 + public static class TestFileSetCheck extends AbstractFileSetCheck { 
 + private static boolean destroyed ; 
 + private static boolean fileContentAvailable ; 
 + 
 + @ Override 
 + public void destroy ( ) { 
 + destroyed = true ; 
 + } 
 + 
 + public static boolean isDestroyed ( ) { 
 + return destroyed ; 
 + } 
 + 
 + public static boolean isFileContentAvailable ( ) { 
 + return fileContentAvailable ; 
 + } 
 + 
 + @ Override 
 + protected void processFiltered ( File file , List < String > lines ) { 
 + } 
 + 
 + @ Override 
 + public void finishProcessing ( ) { 
 + fileContentAvailable = FileContentsHolder . getContents ( ) ! = null ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 index a02d6a3 . . 5be3c7f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 @ @ - 33 , 19 + 33 , 6 @ @ import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 
 public class AbstractJavadocCheckTest extends BaseCheckTestSupport { 
 - public static class TempCheck extends AbstractJavadocCheck { 
 - 
 - @ Override 
 - public int [ ] getDefaultJavadocTokens ( ) { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public void visitJavadocToken ( DetailNode ast ) { 
 - / / do nothing 
 - } 
 - 
 - } 
 
 @ Test 
 public void testNumberFormatException ( ) throws Exception { 
 @ @ - 92 , 4 + 79 , 17 @ @ public class AbstractJavadocCheckTest extends BaseCheckTestSupport { 
 } ; 
 verify ( checker , getPath ( " javadoc / InputCorrectJavaDocParagraphCheck . java " ) , expected ) ; 
 } 
 + 
 + public static class TempCheck extends AbstractJavadocCheck { 
 + 
 + @ Override 
 + public int [ ] getDefaultJavadocTokens ( ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public void visitJavadocToken ( DetailNode ast ) { 
 + / / do nothing 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java 
 index 59149dd . . cea443a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java 
 @ @ - 38 , 6 + 38 , 15 @ @ public class AllBlockCommentsTest extends BaseCheckTestSupport { 
 
 private static final String LINE _ SEPARATOR = System . getProperty ( " line . separator " ) ; 
 
 + @ Test 
 + public void testAllBlockComments ( ) throws Exception { 
 + DefaultConfiguration checkConfig = createCheckConfig ( BlockCommentListenerCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " comments " + File . separator 
 + + " InputFullOfBlockComments . java " ) , expected ) ; 
 + Assert . assertTrue ( allComments . isEmpty ( ) ) ; 
 + } 
 + 
 public static class BlockCommentListenerCheck extends Check { 
 @ Override 
 public boolean isCommentNodesRequired ( ) { 
 @ @ - 74 , 15 + 83 , 5 @ @ public class AllBlockCommentsTest extends BaseCheckTestSupport { 
 Assert . fail ( " Unexpected comment : " + commentContent ) ; 
 } 
 } 
 - 
 - } 
 - 
 - @ Test 
 - public void testAllBlockComments ( ) throws Exception { 
 - DefaultConfiguration checkConfig = createCheckConfig ( BlockCommentListenerCheck . class ) ; 
 - final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " comments " + File . separator 
 - + " InputFullOfBlockComments . java " ) , expected ) ; 
 - Assert . assertTrue ( allComments . isEmpty ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java 
 index becdd12 . . e9b6023 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java 
 @ @ - 37 , 6 + 37 , 15 @ @ public class AllSinglelineCommentsTest extends BaseCheckTestSupport { 
 
 private static final String LINE _ SEPARATOR = System . getProperty ( " line . separator " ) ; 
 
 + @ Test 
 + public void testAllBlockComments ( ) throws Exception { 
 + DefaultConfiguration checkConfig = createCheckConfig ( SinglelineCommentListenerCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " comments " + File . separator 
 + + " InputFullOfSinglelineComments . java " ) , expected ) ; 
 + Assert . assertTrue ( allComments . isEmpty ( ) ) ; 
 + } 
 + 
 public static class SinglelineCommentListenerCheck extends Check { 
 @ Override 
 public boolean isCommentNodesRequired ( ) { 
 @ @ - 69 , 15 + 78 , 5 @ @ public class AllSinglelineCommentsTest extends BaseCheckTestSupport { 
 Assert . fail ( " Unexpected comment : " + commentContent ) ; 
 } 
 } 
 - 
 - } 
 - 
 - @ Test 
 - public void testAllBlockComments ( ) throws Exception { 
 - DefaultConfiguration checkConfig = createCheckConfig ( SinglelineCommentListenerCheck . class ) ; 
 - final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " comments " + File . separator 
 - + " InputFullOfSinglelineComments . java " ) , expected ) ; 
 - Assert . assertTrue ( allComments . isEmpty ( ) ) ; 
 } 
 }
