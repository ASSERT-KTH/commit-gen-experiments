BLEU SCORE: 0.02383853510228548

TEST MSG: minor : fix commands at begining of development page
GENERATED MSG: Fix double check locking

TEST DIFF (one line): diff - - git a / . ci / jsoref - spellchecker / whitelist . words b / . ci / jsoref - spellchecker / whitelist . words <nl> index eed170e . . 0d36f75 100644 <nl> - - - a / . ci / jsoref - spellchecker / whitelist . words <nl> + + + b / . ci / jsoref - spellchecker / whitelist . words <nl> @ @ - 282 , 6 + 282 , 7 @ @ Daniil <nl> daniilyar <nl> Darguments <nl> Datasource <nl> + davidwalsh <nl> Dcheckstyle <nl> dcm <nl> DDDD <nl> diff - - git a / src / xdocs / beginning _ development . xml b / src / xdocs / beginning _ development . xml <nl> index 5a170ee . . 9093397 100644 <nl> - - - a / src / xdocs / beginning _ development . xml <nl> + + + b / src / xdocs / beginning _ development . xml <nl> @ @ - 70 , 23 + 70 , 35 @ @ git commit - m " commit message " <nl> git push origin my - new - check <nl> < / source > <nl> 5 ) Repeat steps 3 - 4 till development is complete < br / > <nl> + All additional commits , please < a href = " https : / / davidwalsh . name / squash - commits - git " > <nl> + squash to first < / a > . Please read all rules for PullRequest at <nl> + our < a href = " https : / / github . com / checkstyle / checkstyle / wiki / PR - rules " > wiki < / a > . <nl> + < source class = " wrap - content " > <nl> + git rebase - i master <nl> + git push - - force origin my - new - check <nl> + < / source > <nl> 6 ) Update current branch and local master by pulling changes that were done < br / > <nl> by other contributors : <nl> < source class = " wrap - content " > <nl> - git pull - - rebase main master <nl> + git pull main master <nl> + git push origin master <nl> + < / source > <nl> + 7 ) Rebase your branch over your updated master <nl> + < source class = " wrap - content " > <nl> + git rebase master <nl> < / source > <nl> - 7 ) In the process of the rebase , it may discover conflicts . < br / > <nl> + 8 ) In the process of the rebase , it may discover conflicts . < br / > <nl> In that case it will stop and allow you to fix the conflicts . < br / > <nl> After fixing conflicts , use git add . to update the index with those contents , < br / > <nl> and then just run : <nl> < source class = " wrap - content " > <nl> git rebase - - continue <nl> < / source > <nl> - 8 ) Push branch to GitHub ( with all your final changes and actual code of Checkstyle ) : <nl> + 9 ) Push branch to GitHub ( with all your final changes and actual code of Checkstyle ) : <nl> < source class = " wrap - content " > <nl> git push - - force origin my - new - check <nl> < / source > <nl> - 9 ) Only after all content is finished and testing is done - send a <nl> + 10 ) Only after all content is finished and testing is done - send a <nl> < a href = " https : / / help . github . com / articles / using - pull - requests / " > Pull Request < / a > <nl> < / p > <nl> < / section >
NEAREST DIFF (one line): diff - - git a / . hgignore b / . hgignore <nl> index fc33994 . . 22ff4c4 100644 <nl> - - - a / . hgignore <nl> + + + b / . hgignore <nl> @ @ - 5 , 3 + 5 , 5 @ @ syntax : glob <nl> nbactions . xml <nl> nb - configuration . xml <nl> target <nl> + glob : checkstyle . iml <nl> + glob : . idea <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> index ad607d4 . . b6f7435 100755 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> @ @ - 18 , 9 + 18 , 11 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> + import com . google . common . collect . Sets ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import java . util . Set ; <nl> <nl> / * * <nl> * Throwing java . lang . Error or java . lang . RuntimeException <nl> @ @ - 29 , 6 + 31 , 15 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * / <nl> public final class IllegalThrowsCheck extends AbstractIllegalCheck <nl> { <nl> + <nl> + / * * Default ignored method names . * / <nl> + private static final String [ ] DEFAULT _ IGNORED _ METHOD _ NAMES = { <nl> + " finalize " , <nl> + } ; <nl> + <nl> + / * * methods which should be ignored . * / <nl> + private final Set < String > mIgnoredMethodNames = Sets . newHashSet ( ) ; <nl> + <nl> / * * Creates new instance of the check . * / <nl> public IllegalThrowsCheck ( ) <nl> { <nl> @ @ - 38 , 6 + 49 , 7 @ @ public final class IllegalThrowsCheck extends AbstractIllegalCheck <nl> " java . lang . RuntimeException " , <nl> " java . lang . Throwable " , <nl> } ) ; <nl> + setIgnoredMethodNames ( DEFAULT _ IGNORED _ METHOD _ NAMES ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 56 , 15 + 68 , 41 @ @ public final class IllegalThrowsCheck extends AbstractIllegalCheck <nl> public void visitToken ( DetailAST aDetailAST ) <nl> { <nl> DetailAST token = aDetailAST . getFirstChild ( ) ; <nl> - while ( token ! = null ) { <nl> - if ( token . getType ( ) ! = TokenTypes . COMMA ) { <nl> - final FullIdent ident = FullIdent . createFullIdent ( token ) ; <nl> - if ( isIllegalClassName ( ident . getText ( ) ) ) { <nl> - log ( token , " illegal . throw " , ident . getText ( ) ) ; <nl> + / / Check if the method with the given name should be ignored . <nl> + if ( ! ( shouldIgnoreMethod ( aDetailAST . getParent ( ) . findFirstToken ( <nl> + TokenTypes . IDENT ) . getText ( ) ) ) ) <nl> + { <nl> + while ( token ! = null ) { <nl> + if ( token . getType ( ) ! = TokenTypes . COMMA ) { <nl> + final FullIdent ident = FullIdent . createFullIdent ( token ) ; <nl> + if ( isIllegalClassName ( ident . getText ( ) ) ) { <nl> + log ( token , " illegal . throw " , ident . getText ( ) ) ; <nl> + } <nl> } <nl> + token = token . getNextSibling ( ) ; <nl> } <nl> + } <nl> + } <nl> <nl> - token = token . getNextSibling ( ) ; <nl> + / * * <nl> + * Check if the method is specified in the ignore method list <nl> + * @ param aName the name to check <nl> + * @ return whether the method with the passed name should be ignored <nl> + * / <nl> + private boolean shouldIgnoreMethod ( String aName ) <nl> + { <nl> + return mIgnoredMethodNames . contains ( aName ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the list of ignore method names . <nl> + * @ param aMethodNames array of ignored method names <nl> + * / <nl> + public void setIgnoredMethodNames ( String [ ] aMethodNames ) <nl> + { <nl> + mIgnoredMethodNames . clear ( ) ; <nl> + for ( String element : aMethodNames ) { <nl> + mIgnoredMethodNames . add ( element ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java <nl> index 902fae6 . . cc5cb13 100755 <nl> - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java <nl> + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java <nl> @ @ - 14 , 4 + 14 , 8 @ @ public class InputIllegalThrowsCheck { <nl> public void methodTwo ( ) throws java . lang . RuntimeException , java . lang . Error <nl> { <nl> } <nl> + <nl> + public void finalize ( ) throws Throwable { <nl> + <nl> + } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java <nl> index ff4ebb5 . . f0ec813 100755 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java <nl> @ @ - 20 , 9 + 20 , 10 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> - import java . io . File ; <nl> import org . junit . Test ; <nl> <nl> + import java . io . File ; <nl> + <nl> public class IllegalThrowsCheckTest extends BaseCheckTestSupport <nl> { <nl> @ Test <nl> @ @ - 53 , 4 + 54 , 42 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport <nl> <nl> verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> } <nl> + <nl> + / * * <nl> + * Test to validate the IllegalThrowsCheck with ignoredMethodNames attribute <nl> + * @ throws Exception <nl> + * / <nl> + @ Test <nl> + public void testIgnoreMethodNames ( ) throws Exception <nl> + { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( IllegalThrowsCheck . class ) ; <nl> + checkConfig . addAttribute ( " ignoredMethodNames " , " methodTwo " ) ; <nl> + <nl> + String [ ] expected = { <nl> + " 9 : 51 : Throwing ' RuntimeException ' is not allowed . " , <nl> + " 18 : 35 : Throwing ' Throwable ' is not allowed . " , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Test to validate the IllegalThrowsCheck with both the attributes specified <nl> + * @ throws Exception <nl> + * / <nl> + @ Test <nl> + public void testIllegalClassNamesWithIgnoreMethodNames ( ) throws Exception <nl> + { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( IllegalThrowsCheck . class ) ; <nl> + checkConfig . addAttribute ( " illegalClassNames " , <nl> + " java . lang . Error , java . lang . Exception , NullPointerException , Throwable " ) ; <nl> + checkConfig . addAttribute ( " ignoredMethodNames " , " methodTwo " ) ; <nl> + <nl> + String [ ] expected = { <nl> + " 5 : 33 : Throwing ' NullPointerException ' is not allowed . " , <nl> + " 18 : 35 : Throwing ' Throwable ' is not allowed . " , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java <nl> index 95d4e60 . . ed70b6a 100755 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java <nl> @ @ - 50 , 6 + 50 , 6 @ @ public class NoFinalizerCheckTest <nl> createCheckConfig ( NoFinalizerCheck . class ) ; <nl> final String [ ] expected = { <nl> } ; <nl> - verify ( checkConfig , getPath ( " coding / InputIllegalThrowsCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " coding / InputFallThrough . java " ) , expected ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / . ci / jsoref - spellchecker / whitelist . words b / . ci / jsoref - spellchecker / whitelist . words 
 index eed170e . . 0d36f75 100644 
 - - - a / . ci / jsoref - spellchecker / whitelist . words 
 + + + b / . ci / jsoref - spellchecker / whitelist . words 
 @ @ - 282 , 6 + 282 , 7 @ @ Daniil 
 daniilyar 
 Darguments 
 Datasource 
 + davidwalsh 
 Dcheckstyle 
 dcm 
 DDDD 
 diff - - git a / src / xdocs / beginning _ development . xml b / src / xdocs / beginning _ development . xml 
 index 5a170ee . . 9093397 100644 
 - - - a / src / xdocs / beginning _ development . xml 
 + + + b / src / xdocs / beginning _ development . xml 
 @ @ - 70 , 23 + 70 , 35 @ @ git commit - m " commit message " 
 git push origin my - new - check 
 < / source > 
 5 ) Repeat steps 3 - 4 till development is complete < br / > 
 + All additional commits , please < a href = " https : / / davidwalsh . name / squash - commits - git " > 
 + squash to first < / a > . Please read all rules for PullRequest at 
 + our < a href = " https : / / github . com / checkstyle / checkstyle / wiki / PR - rules " > wiki < / a > . 
 + < source class = " wrap - content " > 
 + git rebase - i master 
 + git push - - force origin my - new - check 
 + < / source > 
 6 ) Update current branch and local master by pulling changes that were done < br / > 
 by other contributors : 
 < source class = " wrap - content " > 
 - git pull - - rebase main master 
 + git pull main master 
 + git push origin master 
 + < / source > 
 + 7 ) Rebase your branch over your updated master 
 + < source class = " wrap - content " > 
 + git rebase master 
 < / source > 
 - 7 ) In the process of the rebase , it may discover conflicts . < br / > 
 + 8 ) In the process of the rebase , it may discover conflicts . < br / > 
 In that case it will stop and allow you to fix the conflicts . < br / > 
 After fixing conflicts , use git add . to update the index with those contents , < br / > 
 and then just run : 
 < source class = " wrap - content " > 
 git rebase - - continue 
 < / source > 
 - 8 ) Push branch to GitHub ( with all your final changes and actual code of Checkstyle ) : 
 + 9 ) Push branch to GitHub ( with all your final changes and actual code of Checkstyle ) : 
 < source class = " wrap - content " > 
 git push - - force origin my - new - check 
 < / source > 
 - 9 ) Only after all content is finished and testing is done - send a 
 + 10 ) Only after all content is finished and testing is done - send a 
 < a href = " https : / / help . github . com / articles / using - pull - requests / " > Pull Request < / a > 
 < / p > 
 < / section >

NEAREST DIFF:
diff - - git a / . hgignore b / . hgignore 
 index fc33994 . . 22ff4c4 100644 
 - - - a / . hgignore 
 + + + b / . hgignore 
 @ @ - 5 , 3 + 5 , 5 @ @ syntax : glob 
 nbactions . xml 
 nb - configuration . xml 
 target 
 + glob : checkstyle . iml 
 + glob : . idea 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 index ad607d4 . . b6f7435 100755 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 @ @ - 18 , 9 + 18 , 11 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 + import com . google . common . collect . Sets ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import java . util . Set ; 
 
 / * * 
 * Throwing java . lang . Error or java . lang . RuntimeException 
 @ @ - 29 , 6 + 31 , 15 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * / 
 public final class IllegalThrowsCheck extends AbstractIllegalCheck 
 { 
 + 
 + / * * Default ignored method names . * / 
 + private static final String [ ] DEFAULT _ IGNORED _ METHOD _ NAMES = { 
 + " finalize " , 
 + } ; 
 + 
 + / * * methods which should be ignored . * / 
 + private final Set < String > mIgnoredMethodNames = Sets . newHashSet ( ) ; 
 + 
 / * * Creates new instance of the check . * / 
 public IllegalThrowsCheck ( ) 
 { 
 @ @ - 38 , 6 + 49 , 7 @ @ public final class IllegalThrowsCheck extends AbstractIllegalCheck 
 " java . lang . RuntimeException " , 
 " java . lang . Throwable " , 
 } ) ; 
 + setIgnoredMethodNames ( DEFAULT _ IGNORED _ METHOD _ NAMES ) ; 
 } 
 
 @ Override 
 @ @ - 56 , 15 + 68 , 41 @ @ public final class IllegalThrowsCheck extends AbstractIllegalCheck 
 public void visitToken ( DetailAST aDetailAST ) 
 { 
 DetailAST token = aDetailAST . getFirstChild ( ) ; 
 - while ( token ! = null ) { 
 - if ( token . getType ( ) ! = TokenTypes . COMMA ) { 
 - final FullIdent ident = FullIdent . createFullIdent ( token ) ; 
 - if ( isIllegalClassName ( ident . getText ( ) ) ) { 
 - log ( token , " illegal . throw " , ident . getText ( ) ) ; 
 + / / Check if the method with the given name should be ignored . 
 + if ( ! ( shouldIgnoreMethod ( aDetailAST . getParent ( ) . findFirstToken ( 
 + TokenTypes . IDENT ) . getText ( ) ) ) ) 
 + { 
 + while ( token ! = null ) { 
 + if ( token . getType ( ) ! = TokenTypes . COMMA ) { 
 + final FullIdent ident = FullIdent . createFullIdent ( token ) ; 
 + if ( isIllegalClassName ( ident . getText ( ) ) ) { 
 + log ( token , " illegal . throw " , ident . getText ( ) ) ; 
 + } 
 } 
 + token = token . getNextSibling ( ) ; 
 } 
 + } 
 + } 
 
 - token = token . getNextSibling ( ) ; 
 + / * * 
 + * Check if the method is specified in the ignore method list 
 + * @ param aName the name to check 
 + * @ return whether the method with the passed name should be ignored 
 + * / 
 + private boolean shouldIgnoreMethod ( String aName ) 
 + { 
 + return mIgnoredMethodNames . contains ( aName ) ; 
 + } 
 + 
 + / * * 
 + * Set the list of ignore method names . 
 + * @ param aMethodNames array of ignored method names 
 + * / 
 + public void setIgnoredMethodNames ( String [ ] aMethodNames ) 
 + { 
 + mIgnoredMethodNames . clear ( ) ; 
 + for ( String element : aMethodNames ) { 
 + mIgnoredMethodNames . add ( element ) ; 
 } 
 } 
 } 
 diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java 
 index 902fae6 . . cc5cb13 100755 
 - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java 
 + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java 
 @ @ - 14 , 4 + 14 , 8 @ @ public class InputIllegalThrowsCheck { 
 public void methodTwo ( ) throws java . lang . RuntimeException , java . lang . Error 
 { 
 } 
 + 
 + public void finalize ( ) throws Throwable { 
 + 
 + } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java 
 index ff4ebb5 . . f0ec813 100755 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java 
 @ @ - 20 , 9 + 20 , 10 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 - import java . io . File ; 
 import org . junit . Test ; 
 
 + import java . io . File ; 
 + 
 public class IllegalThrowsCheckTest extends BaseCheckTestSupport 
 { 
 @ Test 
 @ @ - 53 , 4 + 54 , 42 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport 
 
 verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; 
 } 
 + 
 + / * * 
 + * Test to validate the IllegalThrowsCheck with ignoredMethodNames attribute 
 + * @ throws Exception 
 + * / 
 + @ Test 
 + public void testIgnoreMethodNames ( ) throws Exception 
 + { 
 + DefaultConfiguration checkConfig = createCheckConfig ( IllegalThrowsCheck . class ) ; 
 + checkConfig . addAttribute ( " ignoredMethodNames " , " methodTwo " ) ; 
 + 
 + String [ ] expected = { 
 + " 9 : 51 : Throwing ' RuntimeException ' is not allowed . " , 
 + " 18 : 35 : Throwing ' Throwable ' is not allowed . " , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; 
 + } 
 + 
 + / * * 
 + * Test to validate the IllegalThrowsCheck with both the attributes specified 
 + * @ throws Exception 
 + * / 
 + @ Test 
 + public void testIllegalClassNamesWithIgnoreMethodNames ( ) throws Exception 
 + { 
 + DefaultConfiguration checkConfig = createCheckConfig ( IllegalThrowsCheck . class ) ; 
 + checkConfig . addAttribute ( " illegalClassNames " , 
 + " java . lang . Error , java . lang . Exception , NullPointerException , Throwable " ) ; 
 + checkConfig . addAttribute ( " ignoredMethodNames " , " methodTwo " ) ; 
 + 
 + String [ ] expected = { 
 + " 5 : 33 : Throwing ' NullPointerException ' is not allowed . " , 
 + " 18 : 35 : Throwing ' Throwable ' is not allowed . " , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java 
 index 95d4e60 . . ed70b6a 100755 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java 
 @ @ - 50 , 6 + 50 , 6 @ @ public class NoFinalizerCheckTest 
 createCheckConfig ( NoFinalizerCheck . class ) ; 
 final String [ ] expected = { 
 } ; 
 - verify ( checkConfig , getPath ( " coding / InputIllegalThrowsCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " coding / InputFallThrough . java " ) , expected ) ; 
 } 
 }
