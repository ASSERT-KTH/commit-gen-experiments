BLEU SCORE: 0.7016035864257111

TEST MSG: Issue # 4137 : Split and Organize Checkstyle inputs by Test for ClassTypeParameterName
GENERATED MSG: Issue # 4168 : Split and Organize Checkstyle inputs by Test for MethodTypeParameterName

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java <nl> index c54a142 . . 7ca811f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java <nl> @ @ - 36 , 7 + 36 , 9 @ @ public class ClassTypeParameterNameCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " naming " + File . separator + filename ) ; <nl> + + " naming " + File . separator <nl> + + " classtypeparametername " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 56 , 11 + 58 , 11 @ @ public class ClassTypeParameterNameCheckTest <nl> final String pattern = " ^ [ A - Z ] $ " ; <nl> <nl> final String [ ] expected = { <nl> - " 5 : 38 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t " , pattern ) , <nl> + " 5 : 42 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t " , pattern ) , <nl> " 13 : 14 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , <nl> " 27 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputClassTypeParameterName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 73 , 10 + 75 , 10 @ @ public class ClassTypeParameterNameCheckTest <nl> final String pattern = " ^ foo $ " ; <nl> <nl> final String [ ] expected = { <nl> - " 5 : 38 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t " , pattern ) , <nl> + " 5 : 42 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t " , pattern ) , <nl> " 33 : 18 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputClassTypeParameterName . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / classtypeparametername / InputClassTypeParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / classtypeparametername / InputClassTypeParameterName . java <nl> new file mode 100644 <nl> index 0000000 . . 101bbc8 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / classtypeparametername / InputClassTypeParameterName . java <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . classtypeparametername ; <nl> + <nl> + import java . io . Serializable ; <nl> + <nl> + public class InputClassTypeParameterName < t > <nl> + { <nl> + public < TT > void foo ( ) { } <nl> + <nl> + < e _ e > void foo ( int i ) { <nl> + } <nl> + } <nl> + <nl> + class Other < foo extends Serializable & Cloneable > { <nl> + <nl> + foo getOne ( ) { <nl> + 	 return null ; / / comment <nl> + } <nl> + <nl> + < Tfo $ o2T extends foo > / * comment * / Tfo $ o2T getTwo ( Tfo $ o2T a ) { <nl> + 	 return null ; <nl> + } <nl> + <nl> + < foo extends Runnable > foo getShadow ( ) { <nl> + 	 return null ; <nl> + } <nl> + <nl> + static class Junk < foo > { <nl> + < _ fo extends foo > void getMoreFoo ( ) { <nl> + 	 } <nl> + } <nl> + } <nl> + <nl> + class MoreOther < T extends Cloneable > { <nl> + <nl> + < E extends T > void getMore ( ) { <nl> + new Other ( ) { <nl> + < T > void getMoreFoo ( ) { <nl> + 	 } <nl> + 	 } ; <nl> + <nl> + / / Other o = new Other ( ) { <nl> + / / < EE > void getMoreFoo ( ) { <nl> + / / } <nl> + / / } ; <nl> + } <nl> + } <nl> + <nl> + interface Boo < Input > { <nl> + Input boo ( ) ; <nl> + } <nl> + <nl> + interface FooInterface < T > { <nl> + T foo ( ) ; <nl> + } <nl> + <nl> + interface FooInterface2 { <nl> + Input foo ( ) ; <nl> + } <nl> + <nl> + class Input { <nl> + <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java <nl> index 1ae1312 . . 37d4502 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java <nl> @ @ - 35 , 7 + 35 , 7 @ @ public class ArrayTrailingCommaCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator + " arraytrailingcomma " + File . separator + filename ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputArrayTrailingComma . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputArrayTrailingComma . java <nl> deleted file mode 100644 <nl> index 2e52819 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputArrayTrailingComma . java <nl> + + + / dev / null <nl> @ @ - 1 , 41 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - public class InputArrayTrailingComma <nl> - { <nl> - int [ ] a1 = new int [ ] <nl> - { <nl> - 1 , <nl> - 2 , <nl> - 3 , <nl> - } ; <nl> - <nl> - int [ ] a2 = new int [ ] <nl> - { <nl> - 1 , <nl> - 2 , <nl> - 3 <nl> - } ; <nl> - <nl> - int [ ] b1 = new int [ ] { 1 , 2 , 3 , } ; <nl> - int [ ] b2 = new int [ ] { 1 , 2 , 3 } ; <nl> - <nl> - int [ ] [ ] c1 = new int [ ] [ ] { { 1 , 2 , } , { 3 , 3 , } , { 5 , 6 , } , } ; <nl> - int [ ] [ ] c2 = new int [ ] [ ] { { 1 , 2 } , { 3 , 3 , } , { 5 , 6 , } } ; <nl> - <nl> - int [ ] [ ] d1 = new int [ ] [ ] <nl> - { <nl> - { 1 , 2 , } , <nl> - { 3 , 3 , } , <nl> - { 5 , 6 , } , <nl> - } ; <nl> - int [ ] [ ] d2 = new int [ ] [ ] <nl> - { <nl> - { 1 , <nl> - 2 } , <nl> - { 3 , 3 , } , <nl> - { 5 , 6 , } <nl> - } ; <nl> - <nl> - int [ ] e1 = new int [ ] { <nl> - } ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java <nl> new file mode 100644 <nl> index 0000000 . . 44f696b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java <nl> @ @ - 0 , 0 + 1 , 41 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . arraytrailingcomma ; <nl> + <nl> + public class InputArrayTrailingComma <nl> + { <nl> + int [ ] a1 = new int [ ] <nl> + { <nl> + 1 , <nl> + 2 , <nl> + 3 , <nl> + } ; <nl> + <nl> + int [ ] a2 = new int [ ] <nl> + { <nl> + 1 , <nl> + 2 , <nl> + 3 <nl> + } ; <nl> + <nl> + int [ ] b1 = new int [ ] { 1 , 2 , 3 , } ; <nl> + int [ ] b2 = new int [ ] { 1 , 2 , 3 } ; <nl> + <nl> + int [ ] [ ] c1 = new int [ ] [ ] { { 1 , 2 , } , { 3 , 3 , } , { 5 , 6 , } , } ; <nl> + int [ ] [ ] c2 = new int [ ] [ ] { { 1 , 2 } , { 3 , 3 , } , { 5 , 6 , } } ; <nl> + <nl> + int [ ] [ ] d1 = new int [ ] [ ] <nl> + { <nl> + { 1 , 2 , } , <nl> + { 3 , 3 , } , <nl> + { 5 , 6 , } , <nl> + } ; <nl> + int [ ] [ ] d2 = new int [ ] [ ] <nl> + { <nl> + { 1 , <nl> + 2 } , <nl> + { 3 , 3 , } , <nl> + { 5 , 6 , } <nl> + } ; <nl> + <nl> + int [ ] e1 = new int [ ] { <nl> + } ; <nl> + }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java 
 index c54a142 . . 7ca811f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ClassTypeParameterNameCheckTest . java 
 @ @ - 36 , 7 + 36 , 9 @ @ public class ClassTypeParameterNameCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " naming " + File . separator + filename ) ; 
 + + " naming " + File . separator 
 + + " classtypeparametername " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 56 , 11 + 58 , 11 @ @ public class ClassTypeParameterNameCheckTest 
 final String pattern = " ^ [ A - Z ] $ " ; 
 
 final String [ ] expected = { 
 - " 5 : 38 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t " , pattern ) , 
 + " 5 : 42 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t " , pattern ) , 
 " 13 : 14 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , 
 " 27 : 24 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " foo " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputClassTypeParameterName . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 73 , 10 + 75 , 10 @ @ public class ClassTypeParameterNameCheckTest 
 final String pattern = " ^ foo $ " ; 
 
 final String [ ] expected = { 
 - " 5 : 38 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t " , pattern ) , 
 + " 5 : 42 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " t " , pattern ) , 
 " 33 : 18 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " T " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputTypeParameterName . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputClassTypeParameterName . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / classtypeparametername / InputClassTypeParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / classtypeparametername / InputClassTypeParameterName . java 
 new file mode 100644 
 index 0000000 . . 101bbc8 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / classtypeparametername / InputClassTypeParameterName . java 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . classtypeparametername ; 
 + 
 + import java . io . Serializable ; 
 + 
 + public class InputClassTypeParameterName < t > 
 + { 
 + public < TT > void foo ( ) { } 
 + 
 + < e _ e > void foo ( int i ) { 
 + } 
 + } 
 + 
 + class Other < foo extends Serializable & Cloneable > { 
 + 
 + foo getOne ( ) { 
 + 	 return null ; / / comment 
 + } 
 + 
 + < Tfo $ o2T extends foo > / * comment * / Tfo $ o2T getTwo ( Tfo $ o2T a ) { 
 + 	 return null ; 
 + } 
 + 
 + < foo extends Runnable > foo getShadow ( ) { 
 + 	 return null ; 
 + } 
 + 
 + static class Junk < foo > { 
 + < _ fo extends foo > void getMoreFoo ( ) { 
 + 	 } 
 + } 
 + } 
 + 
 + class MoreOther < T extends Cloneable > { 
 + 
 + < E extends T > void getMore ( ) { 
 + new Other ( ) { 
 + < T > void getMoreFoo ( ) { 
 + 	 } 
 + 	 } ; 
 + 
 + / / Other o = new Other ( ) { 
 + / / < EE > void getMoreFoo ( ) { 
 + / / } 
 + / / } ; 
 + } 
 + } 
 + 
 + interface Boo < Input > { 
 + Input boo ( ) ; 
 + } 
 + 
 + interface FooInterface < T > { 
 + T foo ( ) ; 
 + } 
 + 
 + interface FooInterface2 { 
 + Input foo ( ) ; 
 + } 
 + 
 + class Input { 
 + 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java 
 index 1ae1312 . . 37d4502 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java 
 @ @ - 35 , 7 + 35 , 7 @ @ public class ArrayTrailingCommaCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator + " arraytrailingcomma " + File . separator + filename ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputArrayTrailingComma . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputArrayTrailingComma . java 
 deleted file mode 100644 
 index 2e52819 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputArrayTrailingComma . java 
 + + + / dev / null 
 @ @ - 1 , 41 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - public class InputArrayTrailingComma 
 - { 
 - int [ ] a1 = new int [ ] 
 - { 
 - 1 , 
 - 2 , 
 - 3 , 
 - } ; 
 - 
 - int [ ] a2 = new int [ ] 
 - { 
 - 1 , 
 - 2 , 
 - 3 
 - } ; 
 - 
 - int [ ] b1 = new int [ ] { 1 , 2 , 3 , } ; 
 - int [ ] b2 = new int [ ] { 1 , 2 , 3 } ; 
 - 
 - int [ ] [ ] c1 = new int [ ] [ ] { { 1 , 2 , } , { 3 , 3 , } , { 5 , 6 , } , } ; 
 - int [ ] [ ] c2 = new int [ ] [ ] { { 1 , 2 } , { 3 , 3 , } , { 5 , 6 , } } ; 
 - 
 - int [ ] [ ] d1 = new int [ ] [ ] 
 - { 
 - { 1 , 2 , } , 
 - { 3 , 3 , } , 
 - { 5 , 6 , } , 
 - } ; 
 - int [ ] [ ] d2 = new int [ ] [ ] 
 - { 
 - { 1 , 
 - 2 } , 
 - { 3 , 3 , } , 
 - { 5 , 6 , } 
 - } ; 
 - 
 - int [ ] e1 = new int [ ] { 
 - } ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java 
 new file mode 100644 
 index 0000000 . . 44f696b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . arraytrailingcomma ; 
 + 
 + public class InputArrayTrailingComma 
 + { 
 + int [ ] a1 = new int [ ] 
 + { 
 + 1 , 
 + 2 , 
 + 3 , 
 + } ; 
 + 
 + int [ ] a2 = new int [ ] 
 + { 
 + 1 , 
 + 2 , 
 + 3 
 + } ; 
 + 
 + int [ ] b1 = new int [ ] { 1 , 2 , 3 , } ; 
 + int [ ] b2 = new int [ ] { 1 , 2 , 3 } ; 
 + 
 + int [ ] [ ] c1 = new int [ ] [ ] { { 1 , 2 , } , { 3 , 3 , } , { 5 , 6 , } , } ; 
 + int [ ] [ ] c2 = new int [ ] [ ] { { 1 , 2 } , { 3 , 3 , } , { 5 , 6 , } } ; 
 + 
 + int [ ] [ ] d1 = new int [ ] [ ] 
 + { 
 + { 1 , 2 , } , 
 + { 3 , 3 , } , 
 + { 5 , 6 , } , 
 + } ; 
 + int [ ] [ ] d2 = new int [ ] [ ] 
 + { 
 + { 1 , 
 + 2 } , 
 + { 3 , 3 , } , 
 + { 5 , 6 , } 
 + } ; 
 + 
 + int [ ] e1 = new int [ ] { 
 + } ; 
 + }
