BLEU SCORE: 0.031251907639724415

TEST MSG: Issue # 5008 : increase coverage of pitest - checks - coding to 97 %
GENERATED MSG: Refactored UTs , checks package , issue # 537

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index a0ba149 . . e454669 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1761 , 7 + 1761 , 7 @ @ <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . checks . coding . * < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 96 < / mutationThreshold > <nl> + < mutationThreshold > 97 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> index 11c0e44 . . fd5a890 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> @ @ - 167 , 8 + 167 , 5 @ @ public class EqualsHashCodeCheck <nl> objBlockWithHashCode . forEach ( ( key , equalsAST ) - > { <nl> log ( equalsAST . getLineNo ( ) , equalsAST . getColumnNo ( ) , MSG _ KEY _ EQUALS ) ; <nl> } ) ; <nl> - <nl> - objBlockWithEquals . clear ( ) ; <nl> - objBlockWithHashCode . clear ( ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> index e41d7ba . . 991e1c0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> @ @ - 219 , 7 + 219 , 8 @ @ public class HiddenFieldCheck <nl> final DetailAST firstChild = ast . getFirstChild ( ) ; <nl> if ( firstChild . getType ( ) = = TokenTypes . IDENT ) { <nl> final String untypedLambdaParameterName = firstChild . getText ( ) ; <nl> - if ( isStaticOrInstanceField ( firstChild , untypedLambdaParameterName ) ) { <nl> + if ( frame . containsStaticField ( untypedLambdaParameterName ) <nl> + | | isInstanceField ( firstChild , untypedLambdaParameterName ) ) { <nl> log ( firstChild , MSG _ KEY , untypedLambdaParameterName ) ; <nl> } <nl> } <nl> @ @ - 306 , 8 + 307 , 7 @ @ public class HiddenFieldCheck <nl> final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> final String name = nameAST . getText ( ) ; <nl> <nl> - if ( ( isStaticFieldHiddenFromAnonymousClass ( ast , name ) <nl> - | | isStaticOrInstanceField ( ast , name ) ) <nl> + if ( ( frame . containsStaticField ( name ) | | isInstanceField ( ast , name ) ) <nl> & & ! isMatchingRegexp ( name ) <nl> & & ! isIgnoredParam ( ast , name ) ) { <nl> log ( nameAST , MSG _ KEY , name ) ; <nl> @ @ - 316 , 17 + 316 , 6 @ @ public class HiddenFieldCheck <nl> } <nl> <nl> / * * <nl> - * Checks whether a static field is hidden from closure . <nl> - * @ param nameAST local variable or parameter . <nl> - * @ param name field name . <nl> - * @ return true if static field is hidden from closure . <nl> - * / <nl> - private boolean isStaticFieldHiddenFromAnonymousClass ( DetailAST nameAST , String name ) { <nl> - return isInStatic ( nameAST ) <nl> - & & frame . containsStaticField ( name ) ; <nl> - } <nl> - <nl> - / * * <nl> * Checks whether method or constructor parameter is ignored . <nl> * @ param ast the parameter token . <nl> * @ param name the parameter name . <nl> @ @ - 339 , 14 + 328 , 13 @ @ public class HiddenFieldCheck <nl> } <nl> <nl> / * * <nl> - * Check for static or instance field . <nl> + * Check for instance field . <nl> * @ param ast token <nl> * @ param name identifier of token <nl> - * @ return true if static or instance field <nl> + * @ return true if instance field <nl> * / <nl> - private boolean isStaticOrInstanceField ( DetailAST ast , String name ) { <nl> - return frame . containsStaticField ( name ) <nl> - | | ! isInStatic ( ast ) & & frame . containsInstanceField ( name ) ; <nl> + private boolean isInstanceField ( DetailAST ast , String name ) { <nl> + return ! isInStatic ( ast ) & & frame . containsInstanceField ( name ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> index 3926362 . . 6e75fab 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> @ @ - 172 , 7 + 172 , 6 @ @ public final class ModifiedControlVariableCheck extends AbstractCheck { <nl> public void beginTree ( DetailAST rootAST ) { <nl> / / clear data <nl> variableStack . clear ( ) ; <nl> - variableStack . push ( new ArrayDeque < > ( ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 279 , 7 + 278 , 8 @ @ public final class ModifiedControlVariableCheck extends AbstractCheck { <nl> * @ param ast ident to check . <nl> * / <nl> private void checkIdent ( DetailAST ast ) { <nl> - if ( ! getCurrentVariables ( ) . isEmpty ( ) ) { <nl> + final Deque < String > currentVariables = getCurrentVariables ( ) ; <nl> + if ( currentVariables ! = null & & ! currentVariables . isEmpty ( ) ) { <nl> final DetailAST identAST = ast . getFirstChild ( ) ; <nl> <nl> if ( identAST ! = null & & identAST . getType ( ) = = TokenTypes . IDENT <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> index 6812b37 . . 6c0be80 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> @ @ - 167 , 7 + 167 , 6 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { <nl> <nl> @ Override <nl> public void beginTree ( DetailAST rootAST ) { <nl> - super . beginTree ( rootAST ) ; <nl> stringMap . clear ( ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> index 59ae414 . . 22c8e00 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> @ @ - 270 , 8 + 270 , 6 @ @ public class UnnecessaryParenthesesCheck extends AbstractCheck { <nl> else if ( isInTokenList ( type , ASSIGNMENTS ) ) { <nl> assignDepth - - ; <nl> } <nl> - <nl> - super . leaveToken ( ast ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> index d466467 . . aba3ce8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> @ @ - 55 , 22 + 55 , 21 @ @ public class DeclarationOrderCheckTest <nl> " 21 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 27 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> " 34 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 45 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 54 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , <nl> - " 80 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> - <nl> - " 92 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 100 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 106 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 111 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 116 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 119 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 125 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 132 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 143 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 152 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , <nl> - " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> - " 182 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 52 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + " 61 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , <nl> + " 87 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> + " 99 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 107 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + " 113 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 118 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 123 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 126 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 132 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + " 139 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 150 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + " 159 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , <nl> + " 185 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> + " 189 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; <nl> } <nl> @ @ - 83 , 13 + 82 , 13 @ @ public class DeclarationOrderCheckTest <nl> checkConfig . addAttribute ( " ignoreModifiers " , " true " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 45 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 54 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , <nl> - " 80 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> - " 100 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 143 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 152 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , <nl> - " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> + " 52 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + " 61 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , <nl> + " 87 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> + " 107 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + " 150 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + " 159 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , <nl> + " 185 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; <nl> } <nl> @ @ - 108 , 20 + 107 , 19 @ @ public class DeclarationOrderCheckTest <nl> " 21 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 27 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> " 34 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 45 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 80 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> - <nl> - " 92 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 100 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 106 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 111 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 116 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 119 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 125 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 132 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> - " 143 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> - " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> - " 182 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 52 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + " 87 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> + " 99 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 107 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + " 113 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 118 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 123 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 126 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 132 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + " 139 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + " 150 : 9 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + " 185 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , <nl> + " 189 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java <nl> index 741caf0 . . 90afd76 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java <nl> @ @ - 22 , 9 + 22 , 15 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . EqualsHashCodeCheck . MSG _ KEY _ EQUALS ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . EqualsHashCodeCheck . MSG _ KEY _ HASHCODE ; <nl> <nl> + import java . io . File ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> + import com . google . common . collect . ImmutableMap ; <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> @ @ - 65 , 6 + 71 , 37 @ @ public class EqualsHashCodeCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testMultipleInputs ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( EqualsHashCodeCheck . class ) ; <nl> + <nl> + final List < String > expectedFirstInputErrors = Collections . singletonList ( <nl> + " 4 : 5 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) <nl> + ) ; <nl> + final List < String > expectedSecondInputErrors = Collections . singletonList ( <nl> + " 94 : 13 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) <nl> + ) ; <nl> + final List < String > expectedThirdInputErrors = <nl> + Arrays . asList ( CommonUtils . EMPTY _ STRING _ ARRAY ) ; <nl> + <nl> + final String firstInput = getPath ( " InputEqualsHashCodeNoEquals . java " ) ; <nl> + final String secondInput = getPath ( " InputEqualsHashCodeSemantic . java " ) ; <nl> + final String thirdInput = getPath ( " InputEqualsHashCode . java " ) ; <nl> + <nl> + final File [ ] inputs = { <nl> + new File ( firstInput ) , <nl> + new File ( secondInput ) , <nl> + new File ( thirdInput ) , <nl> + } ; <nl> + <nl> + verify ( createChecker ( checkConfig ) , inputs , ImmutableMap . of ( <nl> + firstInput , expectedFirstInputErrors , <nl> + secondInput , expectedSecondInputErrors , <nl> + thirdInput , expectedThirdInputErrors <nl> + ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testEqualsParameter ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createModuleConfig ( EqualsHashCodeCheck . class ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java <nl> index 53dd4b0 . . 9472884 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java <nl> @ @ - 253 , 7 + 253 , 8 @ @ public class MagicNumberCheckTest <nl> public void testIgnoreNegativeOctalHex ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createModuleConfig ( MagicNumberCheck . class ) ; <nl> - checkConfig . addAttribute ( " ignoreNumbers " , " - 9223372036854775808 , - 2147483648 , - 1 , 0 , 1 , 2 " ) ; <nl> + checkConfig . addAttribute ( " ignoreNumbers " , <nl> + " - 9223372036854775808 , - 2147483648 , - 1 , 0 , 1 , 2 , - 2 " ) ; <nl> checkConfig . addAttribute ( " tokens " , " NUM _ INT , NUM _ LONG " ) ; <nl> checkConfig . addAttribute ( " ignoreAnnotation " , " true " ) ; <nl> final String [ ] expected = { <nl> @ @ - 278 , 7 + 279 , 6 @ @ public class MagicNumberCheckTest <nl> " 85 : 28 : " + getCheckMessage ( MSG _ KEY , " 3 " ) , <nl> " 92 : 14 : " + getCheckMessage ( MSG _ KEY , " 0xffffffffL " ) , <nl> " 100 : 30 : " + getCheckMessage ( MSG _ KEY , " + 3 " ) , <nl> - " 101 : 29 : " + getCheckMessage ( MSG _ KEY , " - 2 " ) , <nl> " 131 : 20 : " + getCheckMessage ( MSG _ KEY , " 378 " ) , <nl> " 160 : 16 : " + getCheckMessage ( MSG _ KEY , " 31 " ) , <nl> " 165 : 16 : " + getCheckMessage ( MSG _ KEY , " 42 " ) , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java <nl> index c894166 . . 313a3af 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java <nl> @ @ - 20 , 6 + 20 , 12 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . ModifiedControlVariableCheck . MSG _ KEY ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . Collection ; <nl> + import java . util . Optional ; <nl> + import java . util . Set ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 28 , 6 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class ModifiedControlVariableCheckTest <nl> @ @ - 121 , 4 + 128 , 27 @ @ public class ModifiedControlVariableCheckTest <nl> / / it is OK <nl> } <nl> } <nl> + <nl> + / * * <nl> + * We cannot reproduce situation when visitToken is called and leaveToken is not . <nl> + * So , we have to use reflection to be sure that even in such situation <nl> + * state of the field will be cleared . <nl> + * <nl> + * @ throws Exception when code tested throws exception <nl> + * / <nl> + @ Test <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public void testClearState ( ) throws Exception { <nl> + final ModifiedControlVariableCheck check = new ModifiedControlVariableCheck ( ) ; <nl> + final Optional < DetailAST > methodDef = TestUtils . findTokenInAstByPredicate ( <nl> + TestUtils . parseFile ( new File ( <nl> + getPath ( " InputModifiedControlVariableEnhancedForLoopVariable . java " ) ) ) , <nl> + ast - > ast . getType ( ) = = TokenTypes . OBJBLOCK ) ; <nl> + <nl> + assertTrue ( " Ast should contain METHOD _ DEF " , methodDef . isPresent ( ) ) ; <nl> + assertTrue ( " State is not cleared on beginTree " , <nl> + TestUtils . isStatefulFieldClearedDuringBeginTree ( check , methodDef . get ( ) , <nl> + " variableStack " , <nl> + variableStack - > ( ( Collection < Set < String > > ) variableStack ) . isEmpty ( ) ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheckTest . java <nl> index 913a930 . . fc081aa 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheckTest . java <nl> @ @ - 21 , 11 + 21 , 17 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . MultipleStringLiteralsCheck . MSG _ KEY ; <nl> <nl> + import java . io . File ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> + import com . google . common . collect . ImmutableMap ; <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class MultipleStringLiteralsCheckTest extends AbstractModuleTestSupport { <nl> @ Override <nl> @ @ - 68 , 6 + 74 , 28 @ @ public class MultipleStringLiteralsCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testMultipleInputs ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( MultipleStringLiteralsCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowedDuplicates " , " 2 " ) ; <nl> + <nl> + final String firstInput = getPath ( " InputMultipleStringLiterals . java " ) ; <nl> + final String secondInput = getPath ( " InputMultipleStringLiteralsNoWarnings . java " ) ; <nl> + <nl> + final File [ ] inputs = { new File ( firstInput ) , new File ( secondInput ) } ; <nl> + <nl> + final List < String > expectedFirstInput = Arrays . asList ( <nl> + " 5 : 16 : " + getCheckMessage ( MSG _ KEY , " \ " StringContents \ " " , 3 ) , <nl> + " 10 : 23 : " + getCheckMessage ( MSG _ KEY , " \ " , \ " " , 3 ) <nl> + ) ; <nl> + final List < String > expectedSecondInput = Arrays . asList ( CommonUtils . EMPTY _ STRING _ ARRAY ) ; <nl> + <nl> + verify ( createChecker ( checkConfig ) , inputs , <nl> + ImmutableMap . of ( firstInput , expectedFirstInput , <nl> + secondInput , expectedSecondInput ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testItIgnoreEmptyAndComspace ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createModuleConfig ( MultipleStringLiteralsCheck . class ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java <nl> index 1afe7c5 . . fa74e90 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java <nl> @ @ - 20 , 6 + 20 , 12 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . ParameterAssignmentCheck . MSG _ KEY ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . Collection ; <nl> + import java . util . Optional ; <nl> + import java . util . Set ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 28 , 6 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class ParameterAssignmentCheckTest extends AbstractModuleTestSupport { <nl> @ @ - 89 , 4 + 96 , 26 @ @ public class ParameterAssignmentCheckTest extends AbstractModuleTestSupport { <nl> / / it is OK <nl> } <nl> } <nl> + <nl> + / * * <nl> + * We cannot reproduce situation when visitToken is called and leaveToken is not . <nl> + * So , we have to use reflection to be sure that even in such situation <nl> + * state of the field will be cleared . <nl> + * <nl> + * @ throws Exception when code tested throws exception <nl> + * / <nl> + @ Test <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public void testClearState ( ) throws Exception { <nl> + final ParameterAssignmentCheck check = new ParameterAssignmentCheck ( ) ; <nl> + final Optional < DetailAST > methodDef = TestUtils . findTokenInAstByPredicate ( <nl> + TestUtils . parseFile ( new File ( getPath ( " InputParameterAssignmentReceiver . java " ) ) ) , <nl> + ast - > ast . getType ( ) = = TokenTypes . METHOD _ DEF ) ; <nl> + <nl> + assertTrue ( " Ast should contain METHOD _ DEF " , methodDef . isPresent ( ) ) ; <nl> + assertTrue ( " State is not cleared on beginTree " , <nl> + TestUtils . isStatefulFieldClearedDuringBeginTree ( check , methodDef . get ( ) , <nl> + " parameterNamesStack " , <nl> + parameterNamesStack - > ( ( Collection < Set < String > > ) parameterNamesStack ) . isEmpty ( ) ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java <nl> index b506e15 . . 2d6a8b2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java <nl> @ @ - 20 , 6 + 20 , 12 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . ReturnCountCheck . MSG _ KEY ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . Collection ; <nl> + import java . util . Optional ; <nl> + import java . util . Set ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 28 , 6 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class ReturnCountCheckTest extends AbstractModuleTestSupport { <nl> @ @ - 146 , 4 + 153 , 26 @ @ public class ReturnCountCheckTest extends AbstractModuleTestSupport { <nl> } ; <nl> verify ( checkConfig , getPath ( " InputReturnCountVoid . java " ) , expected ) ; <nl> } <nl> + <nl> + / * * <nl> + * We cannot reproduce situation when visitToken is called and leaveToken is not . <nl> + * So , we have to use reflection to be sure that even in such situation <nl> + * state of the field will be cleared . <nl> + * <nl> + * @ throws Exception when code tested throws exception <nl> + * / <nl> + @ Test <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public void testClearState ( ) throws Exception { <nl> + final ReturnCountCheck check = new ReturnCountCheck ( ) ; <nl> + final Optional < DetailAST > methodDef = TestUtils . findTokenInAstByPredicate ( <nl> + TestUtils . parseFile ( new File ( getPath ( " InputReturnCountVoid . java " ) ) ) , <nl> + ast - > ast . getType ( ) = = TokenTypes . METHOD _ DEF ) ; <nl> + <nl> + assertTrue ( " Ast should contain METHOD _ DEF " , methodDef . isPresent ( ) ) ; <nl> + assertTrue ( " State is not cleared on beginTree " , <nl> + TestUtils . isStatefulFieldClearedDuringBeginTree ( check , methodDef . get ( ) , <nl> + " contextStack " , <nl> + contextStack - > ( ( Collection < Set < String > > ) contextStack ) . isEmpty ( ) ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> index 24be7e2 . . 5358ec0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> @ @ - 20 , 12 + 20 , 21 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . AbstractSuperCheck . MSG _ KEY ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . Collection ; <nl> + import java . util . Optional ; <nl> + import java . util . Set ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; <nl> <nl> public class SuperCloneCheckTest <nl> extends AbstractModuleTestSupport { <nl> @ @ - 63 , 4 + 72 , 26 @ @ public class SuperCloneCheckTest <nl> Assert . assertNotNull ( " Default tokens should not be null " , check . getDefaultTokens ( ) ) ; <nl> Assert . assertNotNull ( " Required tokens should not be null " , check . getRequiredTokens ( ) ) ; <nl> } <nl> + <nl> + / * * <nl> + * We cannot reproduce situation when visitToken is called and leaveToken is not . <nl> + * So , we have to use reflection to be sure that even in such situation <nl> + * state of the field will be cleared . <nl> + * <nl> + * @ throws Exception when code tested throws exception <nl> + * / <nl> + @ Test <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public void testClearState ( ) throws Exception { <nl> + final AbstractSuperCheck check = new SuperCloneCheck ( ) ; <nl> + final Optional < DetailAST > methodDef = TestUtils . findTokenInAstByPredicate ( <nl> + TestUtils . parseFile ( new File ( getPath ( " InputSuperCloneWithoutWarnings . java " ) ) ) , <nl> + ast - > ast . getType ( ) = = TokenTypes . METHOD _ DEF ) ; <nl> + <nl> + assertTrue ( " Ast should contain METHOD _ DEF " , methodDef . isPresent ( ) ) ; <nl> + assertTrue ( " State is not cleared on beginTree " , <nl> + TestUtils . isStatefulFieldClearedDuringBeginTree ( check , methodDef . get ( ) , <nl> + " methodStack " , <nl> + methodStack - > ( ( Collection < Set < String > > ) methodStack ) . isEmpty ( ) ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java <nl> index 8ad6444 . . a5142c0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . io . IOException ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . Modifier ; <nl> + import java . util . Arrays ; <nl> import java . util . Optional ; <nl> import java . util . Set ; <nl> import java . util . function . Predicate ; <nl> @ @ - 89 , 9 + 90 , 17 @ @ public final class TestUtils { <nl> check . beginTree ( astToVisit ) ; <nl> check . visitToken ( astToVisit ) ; <nl> check . beginTree ( null ) ; <nl> - final Field field = check . getClass ( ) . getDeclaredField ( fieldName ) ; <nl> - field . setAccessible ( true ) ; <nl> - return isClear . test ( field . get ( check ) ) ; <nl> + final Optional < Field > classField = Arrays . stream ( check . getClass ( ) . getDeclaredFields ( ) ) <nl> + . filter ( field - > fieldName . equals ( field . getName ( ) ) ) . findFirst ( ) ; <nl> + final Field resultField ; <nl> + if ( classField . isPresent ( ) ) { <nl> + resultField = classField . get ( ) ; <nl> + } <nl> + else { <nl> + resultField = check . getClass ( ) . getSuperclass ( ) . getDeclaredField ( fieldName ) ; <nl> + } <nl> + resultField . setAccessible ( true ) ; <nl> + return isClear . test ( resultField . get ( check ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrder . java <nl> index 7ddbb89 . . 9c0303b 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrder . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrder . java <nl> @ @ - 40 , 6 + 40 , 13 @ @ public class InputDeclarationOrder <nl> foo + = INNER _ FOO3 ; <nl> } <nl> <nl> + public InnerClass ( int start ) <nl> + { <nl> + int foo = start ; <nl> + foo + = INNER _ FOO2 ; <nl> + foo + = INNER _ FOO3 ; <nl> + } <nl> + <nl> / / error member variables should be before methods or ctors <nl> / / error public before private <nl> public static final int INNER _ FOO3 = 2 ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplestringliterals / InputMultipleStringLiteralsNoWarnings . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplestringliterals / InputMultipleStringLiteralsNoWarnings . java <nl> new file mode 100644 <nl> index 0000000 . . f33d30b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplestringliterals / InputMultipleStringLiteralsNoWarnings . java <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . multiplestringliterals ; <nl> + <nl> + public class InputMultipleStringLiteralsNoWarnings { <nl> + private final String m4 = " " + " " ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperCloneWithoutWarnings . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperCloneWithoutWarnings . java <nl> new file mode 100644 <nl> index 0000000 . . afc0740 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperCloneWithoutWarnings . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . superclone ; <nl> + <nl> + public class InputSuperCloneWithoutWarnings { <nl> + @ Override <nl> + protected final Object clone ( ) throws CloneNotSupportedException { <nl> + return new InputSuperCloneWithoutWarnings ( ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / checkstyle _ checks . xml b / checkstyle _ checks . xml <nl> index 5612ed1 . . 76934e4 100644 <nl> - - - a / checkstyle _ checks . xml <nl> + + + b / checkstyle _ checks . xml <nl> @ @ - 188 , 7 + 188 , 7 @ @ <nl> < module name = " Indentation " > <nl> < property name = " basicOffset " value = " 4 " / > <nl> < property name = " braceAdjustment " value = " 0 " / > <nl> - < property name = " caseIndent " value = " 0 " / > <nl> + < property name = " caseIndent " value = " 4 " / > <nl> < / module > <nl> < module name = " ArrayTrailingComma " / > <nl> < module name = " FinalLocalVariable " / >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index a0ba149 . . e454669 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1761 , 7 + 1761 , 7 @ @ 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . checks . coding . * < / param > 
 < / targetTests > 
 - < mutationThreshold > 96 < / mutationThreshold > 
 + < mutationThreshold > 97 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 index 11c0e44 . . fd5a890 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 @ @ - 167 , 8 + 167 , 5 @ @ public class EqualsHashCodeCheck 
 objBlockWithHashCode . forEach ( ( key , equalsAST ) - > { 
 log ( equalsAST . getLineNo ( ) , equalsAST . getColumnNo ( ) , MSG _ KEY _ EQUALS ) ; 
 } ) ; 
 - 
 - objBlockWithEquals . clear ( ) ; 
 - objBlockWithHashCode . clear ( ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 index e41d7ba . . 991e1c0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 @ @ - 219 , 7 + 219 , 8 @ @ public class HiddenFieldCheck 
 final DetailAST firstChild = ast . getFirstChild ( ) ; 
 if ( firstChild . getType ( ) = = TokenTypes . IDENT ) { 
 final String untypedLambdaParameterName = firstChild . getText ( ) ; 
 - if ( isStaticOrInstanceField ( firstChild , untypedLambdaParameterName ) ) { 
 + if ( frame . containsStaticField ( untypedLambdaParameterName ) 
 + | | isInstanceField ( firstChild , untypedLambdaParameterName ) ) { 
 log ( firstChild , MSG _ KEY , untypedLambdaParameterName ) ; 
 } 
 } 
 @ @ - 306 , 8 + 307 , 7 @ @ public class HiddenFieldCheck 
 final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 final String name = nameAST . getText ( ) ; 
 
 - if ( ( isStaticFieldHiddenFromAnonymousClass ( ast , name ) 
 - | | isStaticOrInstanceField ( ast , name ) ) 
 + if ( ( frame . containsStaticField ( name ) | | isInstanceField ( ast , name ) ) 
 & & ! isMatchingRegexp ( name ) 
 & & ! isIgnoredParam ( ast , name ) ) { 
 log ( nameAST , MSG _ KEY , name ) ; 
 @ @ - 316 , 17 + 316 , 6 @ @ public class HiddenFieldCheck 
 } 
 
 / * * 
 - * Checks whether a static field is hidden from closure . 
 - * @ param nameAST local variable or parameter . 
 - * @ param name field name . 
 - * @ return true if static field is hidden from closure . 
 - * / 
 - private boolean isStaticFieldHiddenFromAnonymousClass ( DetailAST nameAST , String name ) { 
 - return isInStatic ( nameAST ) 
 - & & frame . containsStaticField ( name ) ; 
 - } 
 - 
 - / * * 
 * Checks whether method or constructor parameter is ignored . 
 * @ param ast the parameter token . 
 * @ param name the parameter name . 
 @ @ - 339 , 14 + 328 , 13 @ @ public class HiddenFieldCheck 
 } 
 
 / * * 
 - * Check for static or instance field . 
 + * Check for instance field . 
 * @ param ast token 
 * @ param name identifier of token 
 - * @ return true if static or instance field 
 + * @ return true if instance field 
 * / 
 - private boolean isStaticOrInstanceField ( DetailAST ast , String name ) { 
 - return frame . containsStaticField ( name ) 
 - | | ! isInStatic ( ast ) & & frame . containsInstanceField ( name ) ; 
 + private boolean isInstanceField ( DetailAST ast , String name ) { 
 + return ! isInStatic ( ast ) & & frame . containsInstanceField ( name ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 index 3926362 . . 6e75fab 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 @ @ - 172 , 7 + 172 , 6 @ @ public final class ModifiedControlVariableCheck extends AbstractCheck { 
 public void beginTree ( DetailAST rootAST ) { 
 / / clear data 
 variableStack . clear ( ) ; 
 - variableStack . push ( new ArrayDeque < > ( ) ) ; 
 } 
 
 @ Override 
 @ @ - 279 , 7 + 278 , 8 @ @ public final class ModifiedControlVariableCheck extends AbstractCheck { 
 * @ param ast ident to check . 
 * / 
 private void checkIdent ( DetailAST ast ) { 
 - if ( ! getCurrentVariables ( ) . isEmpty ( ) ) { 
 + final Deque < String > currentVariables = getCurrentVariables ( ) ; 
 + if ( currentVariables ! = null & & ! currentVariables . isEmpty ( ) ) { 
 final DetailAST identAST = ast . getFirstChild ( ) ; 
 
 if ( identAST ! = null & & identAST . getType ( ) = = TokenTypes . IDENT 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 index 6812b37 . . 6c0be80 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 @ @ - 167 , 7 + 167 , 6 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { 
 
 @ Override 
 public void beginTree ( DetailAST rootAST ) { 
 - super . beginTree ( rootAST ) ; 
 stringMap . clear ( ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 index 59ae414 . . 22c8e00 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 @ @ - 270 , 8 + 270 , 6 @ @ public class UnnecessaryParenthesesCheck extends AbstractCheck { 
 else if ( isInTokenList ( type , ASSIGNMENTS ) ) { 
 assignDepth - - ; 
 } 
 - 
 - super . leaveToken ( ast ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 index d466467 . . aba3ce8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 @ @ - 55 , 22 + 55 , 21 @ @ public class DeclarationOrderCheckTest 
 " 21 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 27 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 " 34 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 45 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 54 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , 
 - " 80 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 - 
 - " 92 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 100 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 106 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 111 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 116 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 119 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 125 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 132 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 143 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 152 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , 
 - " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 - " 182 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 52 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 + " 61 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , 
 + " 87 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 + " 99 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 107 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 + " 113 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 118 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 123 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 126 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 132 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 + " 139 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 150 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 + " 159 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , 
 + " 185 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 + " 189 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; 
 } 
 @ @ - 83 , 13 + 82 , 13 @ @ public class DeclarationOrderCheckTest 
 checkConfig . addAttribute ( " ignoreModifiers " , " true " ) ; 
 
 final String [ ] expected = { 
 - " 45 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 54 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , 
 - " 80 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 - " 100 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 143 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 152 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , 
 - " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 + " 52 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 + " 61 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , 
 + " 87 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 + " 107 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 + " 150 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 + " 159 : 5 : " + getCheckMessage ( MSG _ CONSTRUCTOR ) , 
 + " 185 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; 
 } 
 @ @ - 108 , 20 + 107 , 19 @ @ public class DeclarationOrderCheckTest 
 " 21 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 27 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 " 34 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 45 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 80 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 - 
 - " 92 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 100 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 106 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 111 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 116 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 119 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 125 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 132 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 - " 143 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 - " 178 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 - " 182 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 52 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 + " 87 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 + " 99 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 107 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 + " 113 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 118 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 123 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 126 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 132 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 + " 139 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + " 150 : 9 : " + getCheckMessage ( MSG _ STATIC ) , 
 + " 185 : 5 : " + getCheckMessage ( MSG _ INSTANCE ) , 
 + " 189 : 9 : " + getCheckMessage ( MSG _ ACCESS ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputDeclarationOrder . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java 
 index 741caf0 . . 90afd76 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java 
 @ @ - 22 , 9 + 22 , 15 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . EqualsHashCodeCheck . MSG _ KEY _ EQUALS ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . EqualsHashCodeCheck . MSG _ KEY _ HASHCODE ; 
 
 + import java . io . File ; 
 + import java . util . Arrays ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 + import com . google . common . collect . ImmutableMap ; 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 @ @ - 65 , 6 + 71 , 37 @ @ public class EqualsHashCodeCheckTest 
 } 
 
 @ Test 
 + public void testMultipleInputs ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( EqualsHashCodeCheck . class ) ; 
 + 
 + final List < String > expectedFirstInputErrors = Collections . singletonList ( 
 + " 4 : 5 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) 
 + ) ; 
 + final List < String > expectedSecondInputErrors = Collections . singletonList ( 
 + " 94 : 13 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) 
 + ) ; 
 + final List < String > expectedThirdInputErrors = 
 + Arrays . asList ( CommonUtils . EMPTY _ STRING _ ARRAY ) ; 
 + 
 + final String firstInput = getPath ( " InputEqualsHashCodeNoEquals . java " ) ; 
 + final String secondInput = getPath ( " InputEqualsHashCodeSemantic . java " ) ; 
 + final String thirdInput = getPath ( " InputEqualsHashCode . java " ) ; 
 + 
 + final File [ ] inputs = { 
 + new File ( firstInput ) , 
 + new File ( secondInput ) , 
 + new File ( thirdInput ) , 
 + } ; 
 + 
 + verify ( createChecker ( checkConfig ) , inputs , ImmutableMap . of ( 
 + firstInput , expectedFirstInputErrors , 
 + secondInput , expectedSecondInputErrors , 
 + thirdInput , expectedThirdInputErrors 
 + ) ) ; 
 + } 
 + 
 + @ Test 
 public void testEqualsParameter ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createModuleConfig ( EqualsHashCodeCheck . class ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java 
 index 53dd4b0 . . 9472884 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MagicNumberCheckTest . java 
 @ @ - 253 , 7 + 253 , 8 @ @ public class MagicNumberCheckTest 
 public void testIgnoreNegativeOctalHex ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createModuleConfig ( MagicNumberCheck . class ) ; 
 - checkConfig . addAttribute ( " ignoreNumbers " , " - 9223372036854775808 , - 2147483648 , - 1 , 0 , 1 , 2 " ) ; 
 + checkConfig . addAttribute ( " ignoreNumbers " , 
 + " - 9223372036854775808 , - 2147483648 , - 1 , 0 , 1 , 2 , - 2 " ) ; 
 checkConfig . addAttribute ( " tokens " , " NUM _ INT , NUM _ LONG " ) ; 
 checkConfig . addAttribute ( " ignoreAnnotation " , " true " ) ; 
 final String [ ] expected = { 
 @ @ - 278 , 7 + 279 , 6 @ @ public class MagicNumberCheckTest 
 " 85 : 28 : " + getCheckMessage ( MSG _ KEY , " 3 " ) , 
 " 92 : 14 : " + getCheckMessage ( MSG _ KEY , " 0xffffffffL " ) , 
 " 100 : 30 : " + getCheckMessage ( MSG _ KEY , " + 3 " ) , 
 - " 101 : 29 : " + getCheckMessage ( MSG _ KEY , " - 2 " ) , 
 " 131 : 20 : " + getCheckMessage ( MSG _ KEY , " 378 " ) , 
 " 160 : 16 : " + getCheckMessage ( MSG _ KEY , " 31 " ) , 
 " 165 : 16 : " + getCheckMessage ( MSG _ KEY , " 42 " ) , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java 
 index c894166 . . 313a3af 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheckTest . java 
 @ @ - 20 , 6 + 20 , 12 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . ModifiedControlVariableCheck . MSG _ KEY ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + import java . io . File ; 
 + import java . util . Collection ; 
 + import java . util . Optional ; 
 + import java . util . Set ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 28 , 6 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class ModifiedControlVariableCheckTest 
 @ @ - 121 , 4 + 128 , 27 @ @ public class ModifiedControlVariableCheckTest 
 / / it is OK 
 } 
 } 
 + 
 + / * * 
 + * We cannot reproduce situation when visitToken is called and leaveToken is not . 
 + * So , we have to use reflection to be sure that even in such situation 
 + * state of the field will be cleared . 
 + * 
 + * @ throws Exception when code tested throws exception 
 + * / 
 + @ Test 
 + @ SuppressWarnings ( " unchecked " ) 
 + public void testClearState ( ) throws Exception { 
 + final ModifiedControlVariableCheck check = new ModifiedControlVariableCheck ( ) ; 
 + final Optional < DetailAST > methodDef = TestUtils . findTokenInAstByPredicate ( 
 + TestUtils . parseFile ( new File ( 
 + getPath ( " InputModifiedControlVariableEnhancedForLoopVariable . java " ) ) ) , 
 + ast - > ast . getType ( ) = = TokenTypes . OBJBLOCK ) ; 
 + 
 + assertTrue ( " Ast should contain METHOD _ DEF " , methodDef . isPresent ( ) ) ; 
 + assertTrue ( " State is not cleared on beginTree " , 
 + TestUtils . isStatefulFieldClearedDuringBeginTree ( check , methodDef . get ( ) , 
 + " variableStack " , 
 + variableStack - > ( ( Collection < Set < String > > ) variableStack ) . isEmpty ( ) ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheckTest . java 
 index 913a930 . . fc081aa 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheckTest . java 
 @ @ - 21 , 11 + 21 , 17 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . MultipleStringLiteralsCheck . MSG _ KEY ; 
 
 + import java . io . File ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 + import com . google . common . collect . ImmutableMap ; 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class MultipleStringLiteralsCheckTest extends AbstractModuleTestSupport { 
 @ Override 
 @ @ - 68 , 6 + 74 , 28 @ @ public class MultipleStringLiteralsCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testMultipleInputs ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( MultipleStringLiteralsCheck . class ) ; 
 + checkConfig . addAttribute ( " allowedDuplicates " , " 2 " ) ; 
 + 
 + final String firstInput = getPath ( " InputMultipleStringLiterals . java " ) ; 
 + final String secondInput = getPath ( " InputMultipleStringLiteralsNoWarnings . java " ) ; 
 + 
 + final File [ ] inputs = { new File ( firstInput ) , new File ( secondInput ) } ; 
 + 
 + final List < String > expectedFirstInput = Arrays . asList ( 
 + " 5 : 16 : " + getCheckMessage ( MSG _ KEY , " \ " StringContents \ " " , 3 ) , 
 + " 10 : 23 : " + getCheckMessage ( MSG _ KEY , " \ " , \ " " , 3 ) 
 + ) ; 
 + final List < String > expectedSecondInput = Arrays . asList ( CommonUtils . EMPTY _ STRING _ ARRAY ) ; 
 + 
 + verify ( createChecker ( checkConfig ) , inputs , 
 + ImmutableMap . of ( firstInput , expectedFirstInput , 
 + secondInput , expectedSecondInput ) ) ; 
 + } 
 + 
 + @ Test 
 public void testItIgnoreEmptyAndComspace ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createModuleConfig ( MultipleStringLiteralsCheck . class ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java 
 index 1afe7c5 . . fa74e90 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java 
 @ @ - 20 , 6 + 20 , 12 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . ParameterAssignmentCheck . MSG _ KEY ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + import java . io . File ; 
 + import java . util . Collection ; 
 + import java . util . Optional ; 
 + import java . util . Set ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 28 , 6 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class ParameterAssignmentCheckTest extends AbstractModuleTestSupport { 
 @ @ - 89 , 4 + 96 , 26 @ @ public class ParameterAssignmentCheckTest extends AbstractModuleTestSupport { 
 / / it is OK 
 } 
 } 
 + 
 + / * * 
 + * We cannot reproduce situation when visitToken is called and leaveToken is not . 
 + * So , we have to use reflection to be sure that even in such situation 
 + * state of the field will be cleared . 
 + * 
 + * @ throws Exception when code tested throws exception 
 + * / 
 + @ Test 
 + @ SuppressWarnings ( " unchecked " ) 
 + public void testClearState ( ) throws Exception { 
 + final ParameterAssignmentCheck check = new ParameterAssignmentCheck ( ) ; 
 + final Optional < DetailAST > methodDef = TestUtils . findTokenInAstByPredicate ( 
 + TestUtils . parseFile ( new File ( getPath ( " InputParameterAssignmentReceiver . java " ) ) ) , 
 + ast - > ast . getType ( ) = = TokenTypes . METHOD _ DEF ) ; 
 + 
 + assertTrue ( " Ast should contain METHOD _ DEF " , methodDef . isPresent ( ) ) ; 
 + assertTrue ( " State is not cleared on beginTree " , 
 + TestUtils . isStatefulFieldClearedDuringBeginTree ( check , methodDef . get ( ) , 
 + " parameterNamesStack " , 
 + parameterNamesStack - > ( ( Collection < Set < String > > ) parameterNamesStack ) . isEmpty ( ) ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java 
 index b506e15 . . 2d6a8b2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheckTest . java 
 @ @ - 20 , 6 + 20 , 12 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . ReturnCountCheck . MSG _ KEY ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + import java . io . File ; 
 + import java . util . Collection ; 
 + import java . util . Optional ; 
 + import java . util . Set ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 28 , 6 + 34 , 7 @ @ import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class ReturnCountCheckTest extends AbstractModuleTestSupport { 
 @ @ - 146 , 4 + 153 , 26 @ @ public class ReturnCountCheckTest extends AbstractModuleTestSupport { 
 } ; 
 verify ( checkConfig , getPath ( " InputReturnCountVoid . java " ) , expected ) ; 
 } 
 + 
 + / * * 
 + * We cannot reproduce situation when visitToken is called and leaveToken is not . 
 + * So , we have to use reflection to be sure that even in such situation 
 + * state of the field will be cleared . 
 + * 
 + * @ throws Exception when code tested throws exception 
 + * / 
 + @ Test 
 + @ SuppressWarnings ( " unchecked " ) 
 + public void testClearState ( ) throws Exception { 
 + final ReturnCountCheck check = new ReturnCountCheck ( ) ; 
 + final Optional < DetailAST > methodDef = TestUtils . findTokenInAstByPredicate ( 
 + TestUtils . parseFile ( new File ( getPath ( " InputReturnCountVoid . java " ) ) ) , 
 + ast - > ast . getType ( ) = = TokenTypes . METHOD _ DEF ) ; 
 + 
 + assertTrue ( " Ast should contain METHOD _ DEF " , methodDef . isPresent ( ) ) ; 
 + assertTrue ( " State is not cleared on beginTree " , 
 + TestUtils . isStatefulFieldClearedDuringBeginTree ( check , methodDef . get ( ) , 
 + " contextStack " , 
 + contextStack - > ( ( Collection < Set < String > > ) contextStack ) . isEmpty ( ) ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 index 24be7e2 . . 5358ec0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 @ @ - 20 , 12 + 20 , 21 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . AbstractSuperCheck . MSG _ KEY ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + import java . io . File ; 
 + import java . util . Collection ; 
 + import java . util . Optional ; 
 + import java . util . Set ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; 
 
 public class SuperCloneCheckTest 
 extends AbstractModuleTestSupport { 
 @ @ - 63 , 4 + 72 , 26 @ @ public class SuperCloneCheckTest 
 Assert . assertNotNull ( " Default tokens should not be null " , check . getDefaultTokens ( ) ) ; 
 Assert . assertNotNull ( " Required tokens should not be null " , check . getRequiredTokens ( ) ) ; 
 } 
 + 
 + / * * 
 + * We cannot reproduce situation when visitToken is called and leaveToken is not . 
 + * So , we have to use reflection to be sure that even in such situation 
 + * state of the field will be cleared . 
 + * 
 + * @ throws Exception when code tested throws exception 
 + * / 
 + @ Test 
 + @ SuppressWarnings ( " unchecked " ) 
 + public void testClearState ( ) throws Exception { 
 + final AbstractSuperCheck check = new SuperCloneCheck ( ) ; 
 + final Optional < DetailAST > methodDef = TestUtils . findTokenInAstByPredicate ( 
 + TestUtils . parseFile ( new File ( getPath ( " InputSuperCloneWithoutWarnings . java " ) ) ) , 
 + ast - > ast . getType ( ) = = TokenTypes . METHOD _ DEF ) ; 
 + 
 + assertTrue ( " Ast should contain METHOD _ DEF " , methodDef . isPresent ( ) ) ; 
 + assertTrue ( " State is not cleared on beginTree " , 
 + TestUtils . isStatefulFieldClearedDuringBeginTree ( check , methodDef . get ( ) , 
 + " methodStack " , 
 + methodStack - > ( ( Collection < Set < String > > ) methodStack ) . isEmpty ( ) ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java 
 index 8ad6444 . . a5142c0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . io . IOException ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . Field ; 
 import java . lang . reflect . Modifier ; 
 + import java . util . Arrays ; 
 import java . util . Optional ; 
 import java . util . Set ; 
 import java . util . function . Predicate ; 
 @ @ - 89 , 9 + 90 , 17 @ @ public final class TestUtils { 
 check . beginTree ( astToVisit ) ; 
 check . visitToken ( astToVisit ) ; 
 check . beginTree ( null ) ; 
 - final Field field = check . getClass ( ) . getDeclaredField ( fieldName ) ; 
 - field . setAccessible ( true ) ; 
 - return isClear . test ( field . get ( check ) ) ; 
 + final Optional < Field > classField = Arrays . stream ( check . getClass ( ) . getDeclaredFields ( ) ) 
 + . filter ( field - > fieldName . equals ( field . getName ( ) ) ) . findFirst ( ) ; 
 + final Field resultField ; 
 + if ( classField . isPresent ( ) ) { 
 + resultField = classField . get ( ) ; 
 + } 
 + else { 
 + resultField = check . getClass ( ) . getSuperclass ( ) . getDeclaredField ( fieldName ) ; 
 + } 
 + resultField . setAccessible ( true ) ; 
 + return isClear . test ( resultField . get ( check ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrder . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrder . java 
 index 7ddbb89 . . 9c0303b 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrder . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrder . java 
 @ @ - 40 , 6 + 40 , 13 @ @ public class InputDeclarationOrder 
 foo + = INNER _ FOO3 ; 
 } 
 
 + public InnerClass ( int start ) 
 + { 
 + int foo = start ; 
 + foo + = INNER _ FOO2 ; 
 + foo + = INNER _ FOO3 ; 
 + } 
 + 
 / / error member variables should be before methods or ctors 
 / / error public before private 
 public static final int INNER _ FOO3 = 2 ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplestringliterals / InputMultipleStringLiteralsNoWarnings . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplestringliterals / InputMultipleStringLiteralsNoWarnings . java 
 new file mode 100644 
 index 0000000 . . f33d30b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplestringliterals / InputMultipleStringLiteralsNoWarnings . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . multiplestringliterals ; 
 + 
 + public class InputMultipleStringLiteralsNoWarnings { 
 + private final String m4 = " " + " " ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperCloneWithoutWarnings . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperCloneWithoutWarnings . java 
 new file mode 100644 
 index 0000000 . . afc0740 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / superclone / InputSuperCloneWithoutWarnings . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . superclone ; 
 + 
 + public class InputSuperCloneWithoutWarnings { 
 + @ Override 
 + protected final Object clone ( ) throws CloneNotSupportedException { 
 + return new InputSuperCloneWithoutWarnings ( ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / checkstyle _ checks . xml b / checkstyle _ checks . xml 
 index 5612ed1 . . 76934e4 100644 
 - - - a / checkstyle _ checks . xml 
 + + + b / checkstyle _ checks . xml 
 @ @ - 188 , 7 + 188 , 7 @ @ 
 < module name = " Indentation " > 
 < property name = " basicOffset " value = " 4 " / > 
 < property name = " braceAdjustment " value = " 0 " / > 
 - < property name = " caseIndent " value = " 0 " / > 
 + < property name = " caseIndent " value = " 4 " / > 
 < / module > 
 < module name = " ArrayTrailingComma " / > 
 < module name = " FinalLocalVariable " / >
