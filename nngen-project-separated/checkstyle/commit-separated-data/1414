BLEU SCORE: 0.0241596535992123

TEST MSG: Issue # 2678 : Fix NPE in ParameterNameCheck
GENERATED MSG: Redundant Modifier Check fixed bug with warning on final variables in default methods issue # 364

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> index b5cf4a7 . . 6e54b90 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> <nl> + import com . google . common . base . Optional ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> @ @ - 117 , 14 + 118 , 16 @ @ public class ParameterNameCheck <nl> * / <nl> private static boolean isOverriddenMethod ( DetailAST ast ) { <nl> boolean overridden = false ; <nl> + <nl> final DetailAST parent = ast . getParent ( ) . getParent ( ) ; <nl> - if ( parent . getFirstChild ( ) . getFirstChild ( ) ! = null ) { <nl> - final DetailAST annotation = parent . getFirstChild ( ) . getFirstChild ( ) ; <nl> - if ( annotation . getType ( ) = = TokenTypes . ANNOTATION ) { <nl> - final DetailAST overrideToken = annotation . findFirstToken ( TokenTypes . IDENT ) ; <nl> - if ( " Override " . equals ( overrideToken . getText ( ) ) ) { <nl> - overridden = true ; <nl> - } <nl> + final Optional < DetailAST > annotation = <nl> + Optional . fromNullable ( parent . getFirstChild ( ) . getFirstChild ( ) ) ; <nl> + <nl> + if ( annotation . isPresent ( ) & & annotation . get ( ) . getType ( ) = = TokenTypes . ANNOTATION ) { <nl> + final Optional < DetailAST > overrideToken = <nl> + Optional . fromNullable ( annotation . get ( ) . findFirstToken ( TokenTypes . IDENT ) ) ; <nl> + if ( overrideToken . isPresent ( ) & & " Override " . equals ( overrideToken . get ( ) . getText ( ) ) ) { <nl> + overridden = true ; <nl> } <nl> } <nl> return overridden ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> index 1c35fd3 . . 28b363d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> @ @ - 137 , 4 + 137 , 14 @ @ public class ParameterNameCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputOverrideAnnotation . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testIsOverriddenNoNullPointerException ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( ParameterNameCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) ; <nl> + checkConfig . addAttribute ( " ignoreOverridden " , " true " ) ; <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputOverrideAnnotationNoNPE . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotationNoNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotationNoNPE . java <nl> new file mode 100644 <nl> index 0000000 . . 8295a12 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotationNoNPE . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + class InputOverrideAnnotationNoNPE <nl> + { <nl> + / / method with many parameters <nl> + void myMethod ( int a , int b ) { <nl> + <nl> + } <nl> + <nl> + / / method with many parameters <nl> + void myMethod2 ( int a , int b ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + class Test extends InputOverrideAnnotationNoNPE <nl> + { <nl> + @ Override <nl> + void myMethod ( int a , int b ) { <nl> + <nl> + } <nl> + <nl> + @ java . lang . Override <nl> + void myMethod2 ( int a , int b ) { <nl> + <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / annotation / BadDeprecatedAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / annotation / BadDeprecatedAnnotation . java <nl> index 7935ccc . . 927c7ab 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / annotation / BadDeprecatedAnnotation . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / annotation / BadDeprecatedAnnotation . java <nl> @ @ - 35 , 7 + 35 , 7 @ @ public class BadDeprecatedAnnotation <nl> / * * <nl> * @ deprecated stuff <nl> * / <nl> - interface Foo { <nl> + interface Foo1 { <nl> <nl> / * * <nl> * @ deprecated stuff

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 index b5cf4a7 . . 6e54b90 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . naming ; 
 
 + import com . google . common . base . Optional ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 @ @ - 117 , 14 + 118 , 16 @ @ public class ParameterNameCheck 
 * / 
 private static boolean isOverriddenMethod ( DetailAST ast ) { 
 boolean overridden = false ; 
 + 
 final DetailAST parent = ast . getParent ( ) . getParent ( ) ; 
 - if ( parent . getFirstChild ( ) . getFirstChild ( ) ! = null ) { 
 - final DetailAST annotation = parent . getFirstChild ( ) . getFirstChild ( ) ; 
 - if ( annotation . getType ( ) = = TokenTypes . ANNOTATION ) { 
 - final DetailAST overrideToken = annotation . findFirstToken ( TokenTypes . IDENT ) ; 
 - if ( " Override " . equals ( overrideToken . getText ( ) ) ) { 
 - overridden = true ; 
 - } 
 + final Optional < DetailAST > annotation = 
 + Optional . fromNullable ( parent . getFirstChild ( ) . getFirstChild ( ) ) ; 
 + 
 + if ( annotation . isPresent ( ) & & annotation . get ( ) . getType ( ) = = TokenTypes . ANNOTATION ) { 
 + final Optional < DetailAST > overrideToken = 
 + Optional . fromNullable ( annotation . get ( ) . findFirstToken ( TokenTypes . IDENT ) ) ; 
 + if ( overrideToken . isPresent ( ) & & " Override " . equals ( overrideToken . get ( ) . getText ( ) ) ) { 
 + overridden = true ; 
 } 
 } 
 return overridden ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 index 1c35fd3 . . 28b363d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 @ @ - 137 , 4 + 137 , 14 @ @ public class ParameterNameCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputOverrideAnnotation . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testIsOverriddenNoNullPointerException ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( ParameterNameCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) ; 
 + checkConfig . addAttribute ( " ignoreOverridden " , " true " ) ; 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputOverrideAnnotationNoNPE . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotationNoNPE . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotationNoNPE . java 
 new file mode 100644 
 index 0000000 . . 8295a12 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputOverrideAnnotationNoNPE . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + class InputOverrideAnnotationNoNPE 
 + { 
 + / / method with many parameters 
 + void myMethod ( int a , int b ) { 
 + 
 + } 
 + 
 + / / method with many parameters 
 + void myMethod2 ( int a , int b ) { 
 + 
 + } 
 + } 
 + 
 + class Test extends InputOverrideAnnotationNoNPE 
 + { 
 + @ Override 
 + void myMethod ( int a , int b ) { 
 + 
 + } 
 + 
 + @ java . lang . Override 
 + void myMethod2 ( int a , int b ) { 
 + 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / annotation / BadDeprecatedAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / annotation / BadDeprecatedAnnotation . java 
 index 7935ccc . . 927c7ab 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / annotation / BadDeprecatedAnnotation . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / annotation / BadDeprecatedAnnotation . java 
 @ @ - 35 , 7 + 35 , 7 @ @ public class BadDeprecatedAnnotation 
 / * * 
 * @ deprecated stuff 
 * / 
 - interface Foo { 
 + interface Foo1 { 
 
 / * * 
 * @ deprecated stuff
