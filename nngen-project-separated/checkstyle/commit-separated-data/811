BLEU SCORE: 0.7016035864257111

TEST MSG: Issue # 4151 : Split and Organize Checkstyle inputs by Test for MemberName
GENERATED MSG: Issue # 4150 : Split and Organize Checkstyle inputs by Test for LocalVariableName

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java <nl> index b3bfe18 . . cdf214d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java <nl> @ @ - 36 , 7 + 36 , 9 @ @ public class MemberNameCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " naming " + File . separator + filename ) ; <nl> + + " naming " + File . separator <nl> + + " membername " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 59 , 7 + 61 , 7 @ @ public class MemberNameCheckTest <nl> " 35 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " badMember " , pattern ) , <nl> " 224 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " someMember " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputMemberNameSimple . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 73 , 7 + 75 , 7 @ @ public class MemberNameCheckTest <nl> final String [ ] expected = { <nl> " 56 : 25 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " ABC " , pattern ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputInner . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputMemberNameInner . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputInner . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputInner . java <nl> deleted file mode 100644 <nl> index 86f1d3e . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputInner . java <nl> + + + / dev / null <nl> @ @ - 1 , 79 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> - <nl> - / * * <nl> - * Tests having inner types <nl> - * @ author Oliver Burn <nl> - * * / <nl> - class InputInner <nl> - { <nl> - / / Ignore - two errors <nl> - class InnerInner2 <nl> - { <nl> - / / Ignore <nl> - public int fData ; <nl> - } <nl> - <nl> - / / Ignore - 2 errors <nl> - interface InnerInterface2 <nl> - { <nl> - / / Ignore - should be all upper case <nl> - String data = " zxzc " ; <nl> - <nl> - / / Ignore <nl> - class InnerInterfaceInnerClass <nl> - { <nl> - / / Ignore - need Javadoc and made private <nl> - public int rData ; <nl> - <nl> - / * * needs to be made private unless allowProtected . * / <nl> - protected int protectedVariable ; <nl> - <nl> - / * * needs to be made private unless allowPackage . * / <nl> - int packageVariable ; <nl> - } <nl> - } <nl> - <nl> - / * * demonstrate bug in handling static final * * / <nl> - protected static Object sWeird = new Object ( ) ; <nl> - / * * demonstrate bug in handling static final * * / <nl> - static Object sWeird2 = new Object ( ) ; <nl> - <nl> - / * * demonstrate bug in local final variable * / <nl> - public interface Inter <nl> - { <nl> - } <nl> - <nl> - public static void main ( ) <nl> - { <nl> - Inter m = new Inter ( ) <nl> - { <nl> - private static final int CDS = 1 ; <nl> - <nl> - private int ABC ; <nl> - } ; <nl> - } <nl> - <nl> - / * * annotation field incorrectly named . * / <nl> - @ interface InnerAnnotation <nl> - { <nl> - / * * Ignore - should be all upper case . * / <nl> - String data = " zxzc " ; <nl> - } <nl> - <nl> - / * * enum with public member variable * / <nl> - enum InnerEnum <nl> - { <nl> - / * * First constant * / <nl> - A , <nl> - <nl> - / * * Second constant * / <nl> - B ; <nl> - <nl> - / * * Should be private * / <nl> - public int someValue ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputMemberName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputMemberName . java <nl> deleted file mode 100644 <nl> index 4e1bf7e . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputMemberName . java <nl> + + + / dev / null <nl> @ @ - 1 , 14 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> - <nl> - public class InputMemberName <nl> - { <nl> - public int mPublic ; <nl> - protected int mProtected ; <nl> - int mPackage ; / / comment <nl> - private int mPrivate ; <nl> - <nl> - public int _ public ; <nl> - protected int _ protected ; <nl> - int _ package ; <nl> - private int _ private ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputMemberNameExtended . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputMemberNameExtended . java <nl> deleted file mode 100644 <nl> index e1a0f49 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputMemberNameExtended . java <nl> + + + / dev / null <nl> @ @ - 1 , 83 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> - <nl> - <nl> - <nl> - <nl> - public class InputMemberNameExtended <nl> - { <nl> - public int mPublic ; <nl> - protected int mProtected ; <nl> - int mPackage ; <nl> - private int mPrivate ; <nl> - <nl> - public int _ public ; <nl> - protected int _ protected ; <nl> - int _ package ; <nl> - private int _ private ; <nl> - <nl> - class Inner { <nl> - public int mPublic ; <nl> - protected int mProtected ; <nl> - int mPackage ; <nl> - private int mPrivate ; <nl> - <nl> - public int _ public ; <nl> - protected int _ protected ; <nl> - int _ package ; <nl> - private int _ private ; <nl> - } <nl> - <nl> - Inner anon = new Inner ( ) { <nl> - public int mPublic ; <nl> - protected int mProtected ; <nl> - int mPackage ; <nl> - private int mPrivate ; <nl> - <nl> - public int _ public ; <nl> - protected int _ protected ; <nl> - int _ package ; <nl> - private int _ private ; <nl> - } ; <nl> - } <nl> - <nl> - interface In <nl> - { <nl> - public int mPublic = 0 ; <nl> - int mProtected = 0 ; <nl> - int mPackage = 0 ; <nl> - int mPrivate = 0 ; <nl> - <nl> - public int _ public = 0 ; <nl> - int _ protected = 0 ; <nl> - int _ package = 0 ; <nl> - int _ private = 0 ; <nl> - } <nl> - <nl> - enum Direction { <nl> - <nl> - NORTH ( 1 ) , <nl> - SOUTH ( - 1 ) , <nl> - EAST ( - 2 ) , <nl> - WEST ( 2 ) ; <nl> - <nl> - public int mPublic = 0 ; <nl> - int mProtected = 0 ; <nl> - int mPackage = 0 ; <nl> - int mPrivate = 0 ; <nl> - <nl> - public int _ public = 0 ; <nl> - int _ protected = 0 ; <nl> - int _ package = 0 ; <nl> - int _ private = 0 ; <nl> - <nl> - Direction ( int code ) { <nl> - this . code = code ; <nl> - } <nl> - protected int code ; <nl> - public int getCode ( ) { <nl> - return this . code ; <nl> - } <nl> - static Direction getOppositeDirection ( Direction d ) { <nl> - return null ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberName . java <nl> new file mode 100644 <nl> index 0000000 . . 9d85cbe <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberName . java <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . membername ; <nl> + <nl> + public class InputMemberName <nl> + { <nl> + public int mPublic ; <nl> + protected int mProtected ; <nl> + int mPackage ; / / comment <nl> + private int mPrivate ; <nl> + <nl> + public int _ public ; <nl> + protected int _ protected ; <nl> + int _ package ; <nl> + private int _ private ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameExtended . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameExtended . java <nl> new file mode 100644 <nl> index 0000000 . . 10178a9 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameExtended . java <nl> @ @ - 0 , 0 + 1 , 83 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . membername ; <nl> + <nl> + <nl> + <nl> + <nl> + public class InputMemberNameExtended <nl> + { <nl> + public int mPublic ; <nl> + protected int mProtected ; <nl> + int mPackage ; <nl> + private int mPrivate ; <nl> + <nl> + public int _ public ; <nl> + protected int _ protected ; <nl> + int _ package ; <nl> + private int _ private ; <nl> + <nl> + class Inner { <nl> + public int mPublic ; <nl> + protected int mProtected ; <nl> + int mPackage ; <nl> + private int mPrivate ; <nl> + <nl> + public int _ public ; <nl> + protected int _ protected ; <nl> + int _ package ; <nl> + private int _ private ; <nl> + } <nl> + <nl> + Inner anon = new Inner ( ) { <nl> + public int mPublic ; <nl> + protected int mProtected ; <nl> + int mPackage ; <nl> + private int mPrivate ; <nl> + <nl> + public int _ public ; <nl> + protected int _ protected ; <nl> + int _ package ; <nl> + private int _ private ; <nl> + } ; <nl> + } <nl> + <nl> + interface In <nl> + { <nl> + public int mPublic = 0 ; <nl> + int mProtected = 0 ; <nl> + int mPackage = 0 ; <nl> + int mPrivate = 0 ; <nl> + <nl> + public int _ public = 0 ; <nl> + int _ protected = 0 ; <nl> + int _ package = 0 ; <nl> + int _ private = 0 ; <nl> + } <nl> + <nl> + enum Direction { <nl> + <nl> + NORTH ( 1 ) , <nl> + SOUTH ( - 1 ) , <nl> + EAST ( - 2 ) , <nl> + WEST ( 2 ) ; <nl> + <nl> + public int mPublic = 0 ; <nl> + int mProtected = 0 ; <nl> + int mPackage = 0 ; <nl> + int mPrivate = 0 ; <nl> + <nl> + public int _ public = 0 ; <nl> + int _ protected = 0 ; <nl> + int _ package = 0 ; <nl> + int _ private = 0 ; <nl> + <nl> + Direction ( int code ) { <nl> + this . code = code ; <nl> + } <nl> + protected int code ; <nl> + public int getCode ( ) { <nl> + return this . code ; <nl> + } <nl> + static Direction getOppositeDirection ( Direction d ) { <nl> + return null ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameInner . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameInner . java <nl> new file mode 100644 <nl> index 0000000 . . 289ae7d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameInner . java <nl> @ @ - 0 , 0 + 1 , 79 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . membername ; <nl> + <nl> + / * * <nl> + * Tests having inner types <nl> + * @ author Oliver Burn <nl> + * * / <nl> + class InputMemberNameInner <nl> + { <nl> + / / Ignore - two errors <nl> + class InnerInner2 <nl> + { <nl> + / / Ignore <nl> + public int fData ; <nl> + } <nl> + <nl> + / / Ignore - 2 errors <nl> + interface InnerInterface2 <nl> + { <nl> + / / Ignore - should be all upper case <nl> + String data = " zxzc " ; <nl> + <nl> + / / Ignore <nl> + class InnerInterfaceInnerClass <nl> + { <nl> + / / Ignore - need Javadoc and made private <nl> + public int rData ; <nl> + <nl> + / * * needs to be made private unless allowProtected . * / <nl> + protected int protectedVariable ; <nl> + <nl> + / * * needs to be made private unless allowPackage . * / <nl> + int packageVariable ; <nl> + } <nl> + } <nl> + <nl> + / * * demonstrate bug in handling static final * * / <nl> + protected static Object sWeird = new Object ( ) ; <nl> + / * * demonstrate bug in handling static final * * / <nl> + static Object sWeird2 = new Object ( ) ; <nl> + <nl> + / * * demonstrate bug in local final variable * / <nl> + public interface Inter <nl> + { <nl> + } <nl> + <nl> + public static void main ( ) <nl> + { <nl> + Inter m = new Inter ( ) <nl> + { <nl> + private static final int CDS = 1 ; <nl> + <nl> + private int ABC ; <nl> + } ; <nl> + } <nl> + <nl> + / * * annotation field incorrectly named . * / <nl> + @ interface InnerAnnotation <nl> + { <nl> + / * * Ignore - should be all upper case . * / <nl> + String data = " zxzc " ; <nl> + } <nl> + <nl> + / * * enum with public member variable * / <nl> + enum InnerEnum <nl> + { <nl> + / * * First constant * / <nl> + A , <nl> + <nl> + / * * Second constant * / <nl> + B ; <nl> + <nl> + / * * Should be private * / <nl> + public int someValue ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameSimple . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameSimple . java <nl> new file mode 100644 <nl> index 0000000 . . 9ac762f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameSimple . java <nl> @ @ - 0 , 0 + 1 , 225 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : Feb - 2001 <nl> + / / Ignore error <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . membername ; <nl> + import java . io . * ; <nl> + / * * <nl> + * Contains simple mistakes : <nl> + * - Long lines <nl> + * - Tabs <nl> + * - Format of variables and parameters <nl> + * - Order of modifiers <nl> + * @ author Oliver Burn <nl> + * * / <nl> + final class InputMemberNameSimple <nl> + { <nl> + / / Long line - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + / / Contains a tab - > 	 < - <nl> + / / Contains trailing whitespace - > <nl> + <nl> + / / Name format tests <nl> + / / <nl> + / * * Invalid format * * / <nl> + public static final int badConstant = 2 ; <nl> + / * * Valid format * * / <nl> + public static final int MAX _ ROWS = 2 ; <nl> + <nl> + / * * Invalid format * * / <nl> + private static int badStatic = 2 ; <nl> + / * * Valid format * * / <nl> + private static int sNumCreated = 0 ; <nl> + <nl> + / * * Invalid format * * / <nl> + private int badMember = 2 ; <nl> + / * * Valid format * * / <nl> + private int mNumCreated1 = 0 ; <nl> + / * * Valid format * * / <nl> + protected int mNumCreated2 = 0 ; <nl> + <nl> + / * * commas are wrong * * / <nl> + private int [ ] mInts = new int [ ] { 1 , 2 , 3 , <nl> + 4 } ; <nl> + <nl> + / / <nl> + / / Accessor tests <nl> + / / <nl> + / * * should be private * * / <nl> + public static int sTest1 ; <nl> + / * * should be private * * / <nl> + protected static int sTest3 ; <nl> + / * * should be private * * / <nl> + static int sTest2 ; <nl> + <nl> + / * * should be private * * / <nl> + int mTest1 ; <nl> + / * * should be private * * / <nl> + public int mTest2 ; <nl> + <nl> + / / <nl> + / / Parameter name format tests <nl> + / / <nl> + <nl> + / * * <nl> + * @ return hack <nl> + * @ param badFormat1 bad format <nl> + * @ param badFormat2 bad format <nl> + * @ param badFormat3 bad format <nl> + * @ throws java . lang . Exception abc <nl> + * * / <nl> + int test1 ( int badFormat1 , int badFormat2 , <nl> + final int badFormat3 ) <nl> + throws java . lang . Exception <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + / * * method that is 20 lines long * * / <nl> + private void longMethod ( ) <nl> + { <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + } <nl> + <nl> + / * * constructor that is 10 lines long * * / <nl> + private InputMemberNameSimple ( ) <nl> + { <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + / / a line <nl> + } <nl> + <nl> + / * * test local variables * / <nl> + private void localVariables ( ) <nl> + { <nl> + / / normal decl <nl> + int abc = 0 ; <nl> + int ABC = 0 ; <nl> + <nl> + / / final decls <nl> + final int cde = 0 ; <nl> + final int CDE = 0 ; <nl> + <nl> + / / decl in for loop init statement <nl> + for ( int k = 0 ; k < 1 ; k + + ) <nl> + { <nl> + String innerBlockVariable = " " ; <nl> + } <nl> + for ( int I = 0 ; I < 1 ; I + + ) <nl> + { <nl> + String InnerBlockVariable = " " ; <nl> + } <nl> + } <nl> + <nl> + / * * test method pattern * / <nl> + void ALL _ UPPERCASE _ METHOD ( ) <nl> + { <nl> + } <nl> + <nl> + / * * test illegal constant * * / <nl> + private static final int BAD _ _ NAME = 3 ; <nl> + <nl> + / / A very , very long line that is OK because it matches the regexp " ^ . * is OK . * regexp . * $ " <nl> + / / long line that has a tab - > 	 < - and would be OK if tab counted as 1 char <nl> + / / tabs that count as one char because of their position - > 	 < - - > 	 < - , OK <nl> + <nl> + / * * some lines to test the error column after tabs * / <nl> + void errorColumnAfterTabs ( ) <nl> + { <nl> + / / with tab - width 8 all statements below start at the same column , <nl> + / / with different combinations of ' ' and ' \ t ' before the statement <nl> + int tab0 = 1 ; <nl> + 	 int tab1 = 1 ; <nl> + 	 int tab2 = 1 ; <nl> + 	 	 int tab3 = 1 ; <nl> + 	 	 int tab4 = 1 ; <nl> + 	 int tab5 = 1 ; <nl> + } <nl> + <nl> + / / FIXME : <nl> + / * FIXME : a <nl> + * FIXME : <nl> + * TODO <nl> + * / <nl> + / * NOTHING * / <nl> + / * YES * / / * FIXME : x * / / * YES ! ! * / <nl> + <nl> + / * * test long comments * * / <nl> + void veryLong ( ) <nl> + { <nl> + / * <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + blah blah blah blah <nl> + enough talk * / <nl> + } <nl> + <nl> + / * * <nl> + * @ see to lazy to document all args . Testing excessive # args <nl> + * * / <nl> + void toManyArgs ( int aArg1 , int aArg2 , int aArg3 , int aArg4 , int aArg5 , <nl> + int aArg6 , int aArg7 , int aArg8 , int aArg9 ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + / * * Test class for variable naming in for each clauses . * / <nl> + class InputMemberNameSimple2 <nl> + { <nl> + / * * Some more Javadoc . * / <nl> + public void doSomething ( ) <nl> + { <nl> + / / " O " should be named " o " <nl> + for ( Object O : new java . util . ArrayList ( ) ) <nl> + { <nl> + <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * Test enum for member naming check * / <nl> + enum MyEnum1 <nl> + { <nl> + / * * ABC constant * / <nl> + ABC , <nl> + <nl> + / * * XYZ constant * / <nl> + XYZ ; <nl> + <nl> + / * * Should be mSomeMemeber * / <nl> + private int someMember ; <nl> + }
NEAREST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> index 471b9d1 . . caf9fb8 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> @ @ - 53 , 7 + 53 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class BaseCheckTestSupport { <nl> private static final Pattern WARN _ PATTERN = CommonUtils <nl> - . createPattern ( " . * [ ] * / / [ ] * warn [ ] * | / [ * ] warn [ * ] / " ) ; <nl> + . createPattern ( " . * [ ] * / / [ ] * warn [ ] * | / [ * ] \ \ s ? warn \ \ s ? [ * ] / " ) ; <nl> <nl> private static final String XML _ NAME = " / google _ checks . xml " ; <nl>

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java 
 index b3bfe18 . . cdf214d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java 
 @ @ - 36 , 7 + 36 , 9 @ @ public class MemberNameCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " naming " + File . separator + filename ) ; 
 + + " naming " + File . separator 
 + + " membername " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 59 , 7 + 61 , 7 @ @ public class MemberNameCheckTest 
 " 35 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " badMember " , pattern ) , 
 " 224 : 17 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " someMember " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputMemberNameSimple . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 73 , 7 + 75 , 7 @ @ public class MemberNameCheckTest 
 final String [ ] expected = { 
 " 56 : 25 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " ABC " , pattern ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputInner . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputMemberNameInner . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputInner . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputInner . java 
 deleted file mode 100644 
 index 86f1d3e . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputInner . java 
 + + + / dev / null 
 @ @ - 1 , 79 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . naming ; 
 - 
 - / * * 
 - * Tests having inner types 
 - * @ author Oliver Burn 
 - * * / 
 - class InputInner 
 - { 
 - / / Ignore - two errors 
 - class InnerInner2 
 - { 
 - / / Ignore 
 - public int fData ; 
 - } 
 - 
 - / / Ignore - 2 errors 
 - interface InnerInterface2 
 - { 
 - / / Ignore - should be all upper case 
 - String data = " zxzc " ; 
 - 
 - / / Ignore 
 - class InnerInterfaceInnerClass 
 - { 
 - / / Ignore - need Javadoc and made private 
 - public int rData ; 
 - 
 - / * * needs to be made private unless allowProtected . * / 
 - protected int protectedVariable ; 
 - 
 - / * * needs to be made private unless allowPackage . * / 
 - int packageVariable ; 
 - } 
 - } 
 - 
 - / * * demonstrate bug in handling static final * * / 
 - protected static Object sWeird = new Object ( ) ; 
 - / * * demonstrate bug in handling static final * * / 
 - static Object sWeird2 = new Object ( ) ; 
 - 
 - / * * demonstrate bug in local final variable * / 
 - public interface Inter 
 - { 
 - } 
 - 
 - public static void main ( ) 
 - { 
 - Inter m = new Inter ( ) 
 - { 
 - private static final int CDS = 1 ; 
 - 
 - private int ABC ; 
 - } ; 
 - } 
 - 
 - / * * annotation field incorrectly named . * / 
 - @ interface InnerAnnotation 
 - { 
 - / * * Ignore - should be all upper case . * / 
 - String data = " zxzc " ; 
 - } 
 - 
 - / * * enum with public member variable * / 
 - enum InnerEnum 
 - { 
 - / * * First constant * / 
 - A , 
 - 
 - / * * Second constant * / 
 - B ; 
 - 
 - / * * Should be private * / 
 - public int someValue ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputMemberName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputMemberName . java 
 deleted file mode 100644 
 index 4e1bf7e . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputMemberName . java 
 + + + / dev / null 
 @ @ - 1 , 14 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . naming ; 
 - 
 - public class InputMemberName 
 - { 
 - public int mPublic ; 
 - protected int mProtected ; 
 - int mPackage ; / / comment 
 - private int mPrivate ; 
 - 
 - public int _ public ; 
 - protected int _ protected ; 
 - int _ package ; 
 - private int _ private ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputMemberNameExtended . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputMemberNameExtended . java 
 deleted file mode 100644 
 index e1a0f49 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputMemberNameExtended . java 
 + + + / dev / null 
 @ @ - 1 , 83 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . naming ; 
 - 
 - 
 - 
 - 
 - public class InputMemberNameExtended 
 - { 
 - public int mPublic ; 
 - protected int mProtected ; 
 - int mPackage ; 
 - private int mPrivate ; 
 - 
 - public int _ public ; 
 - protected int _ protected ; 
 - int _ package ; 
 - private int _ private ; 
 - 
 - class Inner { 
 - public int mPublic ; 
 - protected int mProtected ; 
 - int mPackage ; 
 - private int mPrivate ; 
 - 
 - public int _ public ; 
 - protected int _ protected ; 
 - int _ package ; 
 - private int _ private ; 
 - } 
 - 
 - Inner anon = new Inner ( ) { 
 - public int mPublic ; 
 - protected int mProtected ; 
 - int mPackage ; 
 - private int mPrivate ; 
 - 
 - public int _ public ; 
 - protected int _ protected ; 
 - int _ package ; 
 - private int _ private ; 
 - } ; 
 - } 
 - 
 - interface In 
 - { 
 - public int mPublic = 0 ; 
 - int mProtected = 0 ; 
 - int mPackage = 0 ; 
 - int mPrivate = 0 ; 
 - 
 - public int _ public = 0 ; 
 - int _ protected = 0 ; 
 - int _ package = 0 ; 
 - int _ private = 0 ; 
 - } 
 - 
 - enum Direction { 
 - 
 - NORTH ( 1 ) , 
 - SOUTH ( - 1 ) , 
 - EAST ( - 2 ) , 
 - WEST ( 2 ) ; 
 - 
 - public int mPublic = 0 ; 
 - int mProtected = 0 ; 
 - int mPackage = 0 ; 
 - int mPrivate = 0 ; 
 - 
 - public int _ public = 0 ; 
 - int _ protected = 0 ; 
 - int _ package = 0 ; 
 - int _ private = 0 ; 
 - 
 - Direction ( int code ) { 
 - this . code = code ; 
 - } 
 - protected int code ; 
 - public int getCode ( ) { 
 - return this . code ; 
 - } 
 - static Direction getOppositeDirection ( Direction d ) { 
 - return null ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberName . java 
 new file mode 100644 
 index 0000000 . . 9d85cbe 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberName . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . membername ; 
 + 
 + public class InputMemberName 
 + { 
 + public int mPublic ; 
 + protected int mProtected ; 
 + int mPackage ; / / comment 
 + private int mPrivate ; 
 + 
 + public int _ public ; 
 + protected int _ protected ; 
 + int _ package ; 
 + private int _ private ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameExtended . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameExtended . java 
 new file mode 100644 
 index 0000000 . . 10178a9 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameExtended . java 
 @ @ - 0 , 0 + 1 , 83 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . membername ; 
 + 
 + 
 + 
 + 
 + public class InputMemberNameExtended 
 + { 
 + public int mPublic ; 
 + protected int mProtected ; 
 + int mPackage ; 
 + private int mPrivate ; 
 + 
 + public int _ public ; 
 + protected int _ protected ; 
 + int _ package ; 
 + private int _ private ; 
 + 
 + class Inner { 
 + public int mPublic ; 
 + protected int mProtected ; 
 + int mPackage ; 
 + private int mPrivate ; 
 + 
 + public int _ public ; 
 + protected int _ protected ; 
 + int _ package ; 
 + private int _ private ; 
 + } 
 + 
 + Inner anon = new Inner ( ) { 
 + public int mPublic ; 
 + protected int mProtected ; 
 + int mPackage ; 
 + private int mPrivate ; 
 + 
 + public int _ public ; 
 + protected int _ protected ; 
 + int _ package ; 
 + private int _ private ; 
 + } ; 
 + } 
 + 
 + interface In 
 + { 
 + public int mPublic = 0 ; 
 + int mProtected = 0 ; 
 + int mPackage = 0 ; 
 + int mPrivate = 0 ; 
 + 
 + public int _ public = 0 ; 
 + int _ protected = 0 ; 
 + int _ package = 0 ; 
 + int _ private = 0 ; 
 + } 
 + 
 + enum Direction { 
 + 
 + NORTH ( 1 ) , 
 + SOUTH ( - 1 ) , 
 + EAST ( - 2 ) , 
 + WEST ( 2 ) ; 
 + 
 + public int mPublic = 0 ; 
 + int mProtected = 0 ; 
 + int mPackage = 0 ; 
 + int mPrivate = 0 ; 
 + 
 + public int _ public = 0 ; 
 + int _ protected = 0 ; 
 + int _ package = 0 ; 
 + int _ private = 0 ; 
 + 
 + Direction ( int code ) { 
 + this . code = code ; 
 + } 
 + protected int code ; 
 + public int getCode ( ) { 
 + return this . code ; 
 + } 
 + static Direction getOppositeDirection ( Direction d ) { 
 + return null ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameInner . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameInner . java 
 new file mode 100644 
 index 0000000 . . 289ae7d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameInner . java 
 @ @ - 0 , 0 + 1 , 79 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . naming . membername ; 
 + 
 + / * * 
 + * Tests having inner types 
 + * @ author Oliver Burn 
 + * * / 
 + class InputMemberNameInner 
 + { 
 + / / Ignore - two errors 
 + class InnerInner2 
 + { 
 + / / Ignore 
 + public int fData ; 
 + } 
 + 
 + / / Ignore - 2 errors 
 + interface InnerInterface2 
 + { 
 + / / Ignore - should be all upper case 
 + String data = " zxzc " ; 
 + 
 + / / Ignore 
 + class InnerInterfaceInnerClass 
 + { 
 + / / Ignore - need Javadoc and made private 
 + public int rData ; 
 + 
 + / * * needs to be made private unless allowProtected . * / 
 + protected int protectedVariable ; 
 + 
 + / * * needs to be made private unless allowPackage . * / 
 + int packageVariable ; 
 + } 
 + } 
 + 
 + / * * demonstrate bug in handling static final * * / 
 + protected static Object sWeird = new Object ( ) ; 
 + / * * demonstrate bug in handling static final * * / 
 + static Object sWeird2 = new Object ( ) ; 
 + 
 + / * * demonstrate bug in local final variable * / 
 + public interface Inter 
 + { 
 + } 
 + 
 + public static void main ( ) 
 + { 
 + Inter m = new Inter ( ) 
 + { 
 + private static final int CDS = 1 ; 
 + 
 + private int ABC ; 
 + } ; 
 + } 
 + 
 + / * * annotation field incorrectly named . * / 
 + @ interface InnerAnnotation 
 + { 
 + / * * Ignore - should be all upper case . * / 
 + String data = " zxzc " ; 
 + } 
 + 
 + / * * enum with public member variable * / 
 + enum InnerEnum 
 + { 
 + / * * First constant * / 
 + A , 
 + 
 + / * * Second constant * / 
 + B ; 
 + 
 + / * * Should be private * / 
 + public int someValue ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameSimple . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameSimple . java 
 new file mode 100644 
 index 0000000 . . 9ac762f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / membername / InputMemberNameSimple . java 
 @ @ - 0 , 0 + 1 , 225 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : Feb - 2001 
 + / / Ignore error 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . naming . membername ; 
 + import java . io . * ; 
 + / * * 
 + * Contains simple mistakes : 
 + * - Long lines 
 + * - Tabs 
 + * - Format of variables and parameters 
 + * - Order of modifiers 
 + * @ author Oliver Burn 
 + * * / 
 + final class InputMemberNameSimple 
 + { 
 + / / Long line - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + / / Contains a tab - > 	 < - 
 + / / Contains trailing whitespace - > 
 + 
 + / / Name format tests 
 + / / 
 + / * * Invalid format * * / 
 + public static final int badConstant = 2 ; 
 + / * * Valid format * * / 
 + public static final int MAX _ ROWS = 2 ; 
 + 
 + / * * Invalid format * * / 
 + private static int badStatic = 2 ; 
 + / * * Valid format * * / 
 + private static int sNumCreated = 0 ; 
 + 
 + / * * Invalid format * * / 
 + private int badMember = 2 ; 
 + / * * Valid format * * / 
 + private int mNumCreated1 = 0 ; 
 + / * * Valid format * * / 
 + protected int mNumCreated2 = 0 ; 
 + 
 + / * * commas are wrong * * / 
 + private int [ ] mInts = new int [ ] { 1 , 2 , 3 , 
 + 4 } ; 
 + 
 + / / 
 + / / Accessor tests 
 + / / 
 + / * * should be private * * / 
 + public static int sTest1 ; 
 + / * * should be private * * / 
 + protected static int sTest3 ; 
 + / * * should be private * * / 
 + static int sTest2 ; 
 + 
 + / * * should be private * * / 
 + int mTest1 ; 
 + / * * should be private * * / 
 + public int mTest2 ; 
 + 
 + / / 
 + / / Parameter name format tests 
 + / / 
 + 
 + / * * 
 + * @ return hack 
 + * @ param badFormat1 bad format 
 + * @ param badFormat2 bad format 
 + * @ param badFormat3 bad format 
 + * @ throws java . lang . Exception abc 
 + * * / 
 + int test1 ( int badFormat1 , int badFormat2 , 
 + final int badFormat3 ) 
 + throws java . lang . Exception 
 + { 
 + return 0 ; 
 + } 
 + 
 + / * * method that is 20 lines long * * / 
 + private void longMethod ( ) 
 + { 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + } 
 + 
 + / * * constructor that is 10 lines long * * / 
 + private InputMemberNameSimple ( ) 
 + { 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + / / a line 
 + } 
 + 
 + / * * test local variables * / 
 + private void localVariables ( ) 
 + { 
 + / / normal decl 
 + int abc = 0 ; 
 + int ABC = 0 ; 
 + 
 + / / final decls 
 + final int cde = 0 ; 
 + final int CDE = 0 ; 
 + 
 + / / decl in for loop init statement 
 + for ( int k = 0 ; k < 1 ; k + + ) 
 + { 
 + String innerBlockVariable = " " ; 
 + } 
 + for ( int I = 0 ; I < 1 ; I + + ) 
 + { 
 + String InnerBlockVariable = " " ; 
 + } 
 + } 
 + 
 + / * * test method pattern * / 
 + void ALL _ UPPERCASE _ METHOD ( ) 
 + { 
 + } 
 + 
 + / * * test illegal constant * * / 
 + private static final int BAD _ _ NAME = 3 ; 
 + 
 + / / A very , very long line that is OK because it matches the regexp " ^ . * is OK . * regexp . * $ " 
 + / / long line that has a tab - > 	 < - and would be OK if tab counted as 1 char 
 + / / tabs that count as one char because of their position - > 	 < - - > 	 < - , OK 
 + 
 + / * * some lines to test the error column after tabs * / 
 + void errorColumnAfterTabs ( ) 
 + { 
 + / / with tab - width 8 all statements below start at the same column , 
 + / / with different combinations of ' ' and ' \ t ' before the statement 
 + int tab0 = 1 ; 
 + 	 int tab1 = 1 ; 
 + 	 int tab2 = 1 ; 
 + 	 	 int tab3 = 1 ; 
 + 	 	 int tab4 = 1 ; 
 + 	 int tab5 = 1 ; 
 + } 
 + 
 + / / FIXME : 
 + / * FIXME : a 
 + * FIXME : 
 + * TODO 
 + * / 
 + / * NOTHING * / 
 + / * YES * / / * FIXME : x * / / * YES ! ! * / 
 + 
 + / * * test long comments * * / 
 + void veryLong ( ) 
 + { 
 + / * 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + blah blah blah blah 
 + enough talk * / 
 + } 
 + 
 + / * * 
 + * @ see to lazy to document all args . Testing excessive # args 
 + * * / 
 + void toManyArgs ( int aArg1 , int aArg2 , int aArg3 , int aArg4 , int aArg5 , 
 + int aArg6 , int aArg7 , int aArg8 , int aArg9 ) 
 + { 
 + } 
 + } 
 + 
 + / * * Test class for variable naming in for each clauses . * / 
 + class InputMemberNameSimple2 
 + { 
 + / * * Some more Javadoc . * / 
 + public void doSomething ( ) 
 + { 
 + / / " O " should be named " o " 
 + for ( Object O : new java . util . ArrayList ( ) ) 
 + { 
 + 
 + } 
 + } 
 + } 
 + 
 + / * * Test enum for member naming check * / 
 + enum MyEnum1 
 + { 
 + / * * ABC constant * / 
 + ABC , 
 + 
 + / * * XYZ constant * / 
 + XYZ ; 
 + 
 + / * * Should be mSomeMemeber * / 
 + private int someMember ; 
 + }

NEAREST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 index 471b9d1 . . caf9fb8 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 @ @ - 53 , 7 + 53 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class BaseCheckTestSupport { 
 private static final Pattern WARN _ PATTERN = CommonUtils 
 - . createPattern ( " . * [ ] * / / [ ] * warn [ ] * | / [ * ] warn [ * ] / " ) ; 
 + . createPattern ( " . * [ ] * / / [ ] * warn [ ] * | / [ * ] \ \ s ? warn \ \ s ? [ * ] / " ) ; 
 
 private static final String XML _ NAME = " / google _ checks . xml " ; 

