BLEU SCORE: 0.008468871289992021

TEST MSG: Issue # 2161 : unify test input locations
GENERATED MSG: New check OuterTypeNumber for enforcing the maximum number of outer types per file . Inspired by patch # 1145023 from Alexander Jesse .

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java <nl> index 8065e68 . . 9bf0301 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java <nl> @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> @ @ - 33 , 6 + 36 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * <nl> * / <nl> public class EmptyCatchBlockCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " blocks " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> @ @ - 78 , 5 + 86 , 4 @ @ public class EmptyCatchBlockCheckTest extends BaseCheckTestSupport { <nl> int [ ] expected = { TokenTypes . LITERAL _ CATCH } ; <nl> assertArrayEquals ( expected , actual ) ; <nl> } <nl> - <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java <nl> deleted file mode 100644 <nl> index 7593b9d . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 244 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - import java . io . IOException ; <nl> - public class InputEmptyCatchBlockCheck <nl> - { <nl> - <nl> - private void foo ( ) { <nl> - try { <nl> - throw new RuntimeException ( ) ; <nl> - } catch ( Exception expected ) { <nl> - / / Expected <nl> - } <nl> - } <nl> - <nl> - private void foo1 ( ) { <nl> - try { <nl> - throw new RuntimeException ( ) ; <nl> - } catch ( Exception e ) { } <nl> - <nl> - } <nl> - <nl> - private void foo2 ( ) { <nl> - try { <nl> - throw new IOException ( ) ; <nl> - } catch ( IOException | NullPointerException | ArithmeticException ignore ) { <nl> - } <nl> - } <nl> - <nl> - private void foo3 ( ) { / / comment <nl> - try { <nl> - throw new IOException ( ) ; <nl> - } catch ( IOException | NullPointerException | ArithmeticException e ) { / / This is expected <nl> - } <nl> - } <nl> - <nl> - private void foo4 ( ) { <nl> - try { <nl> - throw new IOException ( ) ; <nl> - } catch ( IOException | NullPointerException | ArithmeticException e ) { / * This is expected * / <nl> - } <nl> - } <nl> - <nl> - private void foo5 ( ) { <nl> - try { <nl> - throw new IOException ( ) ; <nl> - } catch ( IOException | NullPointerException | ArithmeticException e ) { / / Some singleline comment <nl> - } <nl> - } <nl> - <nl> - private void foo6 ( ) { <nl> - try { <nl> - throw new IOException ( ) ; <nl> - } catch ( IOException expected ) { / / This is expected <nl> - int k = 0 ; <nl> - } <nl> - } <nl> - <nl> - public void testTryCatch ( ) <nl> - { <nl> - try { <nl> - int y = 0 ; <nl> - int u = 8 ; <nl> - int e = u - y ; <nl> - return ; <nl> - } <nl> - catch ( Exception e ) { <nl> - System . out . println ( e ) ; <nl> - return ; <nl> - } <nl> - finally <nl> - { <nl> - return ; <nl> - } <nl> - } <nl> - <nl> - public void testTryCatch2 ( ) <nl> - { <nl> - try { <nl> - } <nl> - catch ( Exception e ) { / / OK <nl> - / / This is expected <nl> - / * This is expected * / <nl> - / * * This is expected * / <nl> - } <nl> - finally <nl> - { <nl> - } <nl> - } <nl> - <nl> - public void testTryCatch3 ( ) <nl> - { <nl> - try { <nl> - int y = 0 ; <nl> - int u = 8 ; <nl> - int e = u - y ; <nl> - } <nl> - catch ( IllegalArgumentException e ) { <nl> - System . out . println ( e ) ; / / some comment <nl> - return ; <nl> - } <nl> - catch ( IllegalStateException ex ) { <nl> - System . out . println ( ex ) ; <nl> - return ; <nl> - } <nl> - } <nl> - <nl> - public void testTryCatch4 ( ) <nl> - { <nl> - int y = 0 ; <nl> - int u = 8 ; <nl> - try { <nl> - int e = u - y ; <nl> - } <nl> - catch ( IllegalArgumentException e ) { <nl> - System . out . println ( e ) ; <nl> - return ; <nl> - } <nl> - } <nl> - public void setFormats ( ) { <nl> - try { <nl> - int k = 4 ; <nl> - } catch ( Exception e ) { <nl> - Object k = null ; <nl> - if ( k ! = null ) <nl> - k = " ss " ; <nl> - else { <nl> - return ; <nl> - } <nl> - } <nl> - } <nl> - public void setFormats1 ( ) { <nl> - try { <nl> - int k = 4 ; <nl> - } catch ( Exception e ) { <nl> - Object k = null ; <nl> - if ( k ! = null ) { <nl> - k = " ss " ; <nl> - } else { <nl> - return ; <nl> - } <nl> - } <nl> - } <nl> - public void setFormats2 ( ) { <nl> - try { <nl> - int k = 4 ; <nl> - } catch ( Exception e ) { <nl> - Object k = null ; <nl> - if ( k ! = null ) { <nl> - k = " ss " ; <nl> - return ; <nl> - } <nl> - } <nl> - } <nl> - public void setFormats3 ( ) { <nl> - try { <nl> - int k = 4 ; <nl> - } catch ( Exception e ) { <nl> - Object k = null ; <nl> - if ( k ! = null ) { <nl> - k = " ss " ; <nl> - <nl> - } <nl> - } <nl> - } <nl> - <nl> - private void some ( ) { <nl> - try { <nl> - throw new IOException ( ) ; <nl> - } catch ( IOException e ) { <nl> - / * ololo <nl> - * blalba <nl> - * / <nl> - } <nl> - } <nl> - private void some1 ( ) { <nl> - try { <nl> - throw new IOException ( ) ; <nl> - } catch ( IOException e ) { <nl> - / * lalala <nl> - * This is expected <nl> - * / <nl> - } <nl> - } <nl> - private void some2 ( ) { <nl> - try { <nl> - throw new IOException ( ) ; <nl> - } catch ( IOException e ) { <nl> - / * <nl> - * This is expected <nl> - * lalala <nl> - * / <nl> - } <nl> - } <nl> - private void some3 ( ) { <nl> - try { <nl> - throw new IOException ( ) ; <nl> - } catch ( IOException e ) { <nl> - / / some comment <nl> - / / This is expected <nl> - } <nl> - } <nl> - private void some4 ( ) { <nl> - try { <nl> - throw new IOException ( ) ; <nl> - } catch ( IOException e ) { <nl> - / / This is expected <nl> - / / some comment <nl> - } <nl> - } <nl> - private void some5 ( ) { <nl> - try { <nl> - throw new IOException ( ) ; <nl> - } catch ( IOException e ) { <nl> - / * some comment * / <nl> - / / This is expected <nl> - } <nl> - } <nl> - <nl> - private void emptyMultilineComent ( ) { <nl> - try { <nl> - throw new IOException ( ) ; <nl> - } catch ( IOException e ) { <nl> - / * <nl> - * / <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyCatchBlockCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyCatchBlockCheck . java <nl> new file mode 100644 <nl> index 0000000 . . d398c8f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyCatchBlockCheck . java <nl> @ @ - 0 , 0 + 1 , 244 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> + import java . io . IOException ; <nl> + public class InputEmptyCatchBlockCheck <nl> + { <nl> + <nl> + private void foo ( ) { <nl> + try { <nl> + throw new RuntimeException ( ) ; <nl> + } catch ( Exception expected ) { <nl> + / / Expected <nl> + } <nl> + } <nl> + <nl> + private void foo1 ( ) { <nl> + try { <nl> + throw new RuntimeException ( ) ; <nl> + } catch ( Exception e ) { } <nl> + <nl> + } <nl> + <nl> + private void foo2 ( ) { <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException | NullPointerException | ArithmeticException ignore ) { <nl> + } <nl> + } <nl> + <nl> + private void foo3 ( ) { / / comment <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException | NullPointerException | ArithmeticException e ) { / / This is expected <nl> + } <nl> + } <nl> + <nl> + private void foo4 ( ) { <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException | NullPointerException | ArithmeticException e ) { / * This is expected * / <nl> + } <nl> + } <nl> + <nl> + private void foo5 ( ) { <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException | NullPointerException | ArithmeticException e ) { / / Some singleline comment <nl> + } <nl> + } <nl> + <nl> + private void foo6 ( ) { <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException expected ) { / / This is expected <nl> + int k = 0 ; <nl> + } <nl> + } <nl> + <nl> + public void testTryCatch ( ) <nl> + { <nl> + try { <nl> + int y = 0 ; <nl> + int u = 8 ; <nl> + int e = u - y ; <nl> + return ; <nl> + } <nl> + catch ( Exception e ) { <nl> + System . out . println ( e ) ; <nl> + return ; <nl> + } <nl> + finally <nl> + { <nl> + return ; <nl> + } <nl> + } <nl> + <nl> + public void testTryCatch2 ( ) <nl> + { <nl> + try { <nl> + } <nl> + catch ( Exception e ) { / / OK <nl> + / / This is expected <nl> + / * This is expected * / <nl> + / * * This is expected * / <nl> + } <nl> + finally <nl> + { <nl> + } <nl> + } <nl> + <nl> + public void testTryCatch3 ( ) <nl> + { <nl> + try { <nl> + int y = 0 ; <nl> + int u = 8 ; <nl> + int e = u - y ; <nl> + } <nl> + catch ( IllegalArgumentException e ) { <nl> + System . out . println ( e ) ; / / some comment <nl> + return ; <nl> + } <nl> + catch ( IllegalStateException ex ) { <nl> + System . out . println ( ex ) ; <nl> + return ; <nl> + } <nl> + } <nl> + <nl> + public void testTryCatch4 ( ) <nl> + { <nl> + int y = 0 ; <nl> + int u = 8 ; <nl> + try { <nl> + int e = u - y ; <nl> + } <nl> + catch ( IllegalArgumentException e ) { <nl> + System . out . println ( e ) ; <nl> + return ; <nl> + } <nl> + } <nl> + public void setFormats ( ) { <nl> + try { <nl> + int k = 4 ; <nl> + } catch ( Exception e ) { <nl> + Object k = null ; <nl> + if ( k ! = null ) <nl> + k = " ss " ; <nl> + else { <nl> + return ; <nl> + } <nl> + } <nl> + } <nl> + public void setFormats1 ( ) { <nl> + try { <nl> + int k = 4 ; <nl> + } catch ( Exception e ) { <nl> + Object k = null ; <nl> + if ( k ! = null ) { <nl> + k = " ss " ; <nl> + } else { <nl> + return ; <nl> + } <nl> + } <nl> + } <nl> + public void setFormats2 ( ) { <nl> + try { <nl> + int k = 4 ; <nl> + } catch ( Exception e ) { <nl> + Object k = null ; <nl> + if ( k ! = null ) { <nl> + k = " ss " ; <nl> + return ; <nl> + } <nl> + } <nl> + } <nl> + public void setFormats3 ( ) { <nl> + try { <nl> + int k = 4 ; <nl> + } catch ( Exception e ) { <nl> + Object k = null ; <nl> + if ( k ! = null ) { <nl> + k = " ss " ; <nl> + <nl> + } <nl> + } <nl> + } <nl> + <nl> + private void some ( ) { <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException e ) { <nl> + / * ololo <nl> + * blalba <nl> + * / <nl> + } <nl> + } <nl> + private void some1 ( ) { <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException e ) { <nl> + / * lalala <nl> + * This is expected <nl> + * / <nl> + } <nl> + } <nl> + private void some2 ( ) { <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException e ) { <nl> + / * <nl> + * This is expected <nl> + * lalala <nl> + * / <nl> + } <nl> + } <nl> + private void some3 ( ) { <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException e ) { <nl> + / / some comment <nl> + / / This is expected <nl> + } <nl> + } <nl> + private void some4 ( ) { <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException e ) { <nl> + / / This is expected <nl> + / / some comment <nl> + } <nl> + } <nl> + private void some5 ( ) { <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException e ) { <nl> + / * some comment * / <nl> + / / This is expected <nl> + } <nl> + } <nl> + <nl> + private void emptyMultilineComent ( ) { <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException e ) { <nl> + / * <nl> + * / <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 6fab664 <nl> - - - / dev / null <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java <nl> @ @ - 0 , 0 + 1 , 59 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2008 Oliver Burn <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> + / * * <nl> + * Checks that no method having zero parameters is defined <nl> + * using the name < em > finalize < / em > . <nl> + * <nl> + * @ author fqian @ google . com ( Feng Qian ) <nl> + * @ author smckay @ google . com ( Steve McKay ) <nl> + * @ author lkuehne <nl> + * / <nl> + public class NoFinalizerCheck extends Check <nl> + { <nl> + <nl> + @ Override <nl> + public int [ ] getDefaultTokens ( ) <nl> + { <nl> + return new int [ ] { TokenTypes . METHOD _ DEF } ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visitToken ( DetailAST aAST ) <nl> + { <nl> + final DetailAST mid = aAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> + final String methodName = mid . getText ( ) ; <nl> + <nl> + if ( methodName . equals ( " finalize " ) ) { <nl> + <nl> + final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> + final boolean hasEmptyParamList = <nl> + ! params . branchContains ( TokenTypes . PARAMETER _ DEF ) ; <nl> + <nl> + if ( hasEmptyParamList ) { <nl> + log ( aAST . getLineNo ( ) , " avoid . finalizer . method " ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> index c5163da . . 76ad1b1 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> array . trailing . comma = Array should contain trailing comma . <nl> assignment . inner . avoid = Inner assignments should be avoided . <nl> + avoid . finalizer . method = Avoid using finalizer method . <nl> covariant . equals = covariant equals without overriding equals ( java . lang . Object ) . <nl> declaration . order . constructor = Constructor definition in wrong order . <nl> declaration . order . method = Method definition in wrong order . <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> index 6a8b644 . . 38207b4 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> array . trailing . comma = Array sollte mit einem Komma abheschlossen werden . <nl> assignment . inner . avoid = Innere Zuweisungen sollten vermieden werden . <nl> + avoid . finalizer . method = Die Verwendung von finalizer Methoden sollte vermieden werden . <nl> covariant . equals = Kovariante Definition von equals ( ) ohne equ

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java 
 index 8065e68 . . 9bf0301 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java 
 @ @ - 21 , 6 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 
 import static org . junit . Assert . assertArrayEquals ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 @ @ - 33 , 6 + 36 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * 
 * / 
 public class EmptyCatchBlockCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " blocks " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 @ @ - 78 , 5 + 86 , 4 @ @ public class EmptyCatchBlockCheckTest extends BaseCheckTestSupport { 
 int [ ] expected = { TokenTypes . LITERAL _ CATCH } ; 
 assertArrayEquals ( expected , actual ) ; 
 } 
 - 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java 
 deleted file mode 100644 
 index 7593b9d . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java 
 + + + / dev / null 
 @ @ - 1 , 244 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle ; 
 - import java . io . IOException ; 
 - public class InputEmptyCatchBlockCheck 
 - { 
 - 
 - private void foo ( ) { 
 - try { 
 - throw new RuntimeException ( ) ; 
 - } catch ( Exception expected ) { 
 - / / Expected 
 - } 
 - } 
 - 
 - private void foo1 ( ) { 
 - try { 
 - throw new RuntimeException ( ) ; 
 - } catch ( Exception e ) { } 
 - 
 - } 
 - 
 - private void foo2 ( ) { 
 - try { 
 - throw new IOException ( ) ; 
 - } catch ( IOException | NullPointerException | ArithmeticException ignore ) { 
 - } 
 - } 
 - 
 - private void foo3 ( ) { / / comment 
 - try { 
 - throw new IOException ( ) ; 
 - } catch ( IOException | NullPointerException | ArithmeticException e ) { / / This is expected 
 - } 
 - } 
 - 
 - private void foo4 ( ) { 
 - try { 
 - throw new IOException ( ) ; 
 - } catch ( IOException | NullPointerException | ArithmeticException e ) { / * This is expected * / 
 - } 
 - } 
 - 
 - private void foo5 ( ) { 
 - try { 
 - throw new IOException ( ) ; 
 - } catch ( IOException | NullPointerException | ArithmeticException e ) { / / Some singleline comment 
 - } 
 - } 
 - 
 - private void foo6 ( ) { 
 - try { 
 - throw new IOException ( ) ; 
 - } catch ( IOException expected ) { / / This is expected 
 - int k = 0 ; 
 - } 
 - } 
 - 
 - public void testTryCatch ( ) 
 - { 
 - try { 
 - int y = 0 ; 
 - int u = 8 ; 
 - int e = u - y ; 
 - return ; 
 - } 
 - catch ( Exception e ) { 
 - System . out . println ( e ) ; 
 - return ; 
 - } 
 - finally 
 - { 
 - return ; 
 - } 
 - } 
 - 
 - public void testTryCatch2 ( ) 
 - { 
 - try { 
 - } 
 - catch ( Exception e ) { / / OK 
 - / / This is expected 
 - / * This is expected * / 
 - / * * This is expected * / 
 - } 
 - finally 
 - { 
 - } 
 - } 
 - 
 - public void testTryCatch3 ( ) 
 - { 
 - try { 
 - int y = 0 ; 
 - int u = 8 ; 
 - int e = u - y ; 
 - } 
 - catch ( IllegalArgumentException e ) { 
 - System . out . println ( e ) ; / / some comment 
 - return ; 
 - } 
 - catch ( IllegalStateException ex ) { 
 - System . out . println ( ex ) ; 
 - return ; 
 - } 
 - } 
 - 
 - public void testTryCatch4 ( ) 
 - { 
 - int y = 0 ; 
 - int u = 8 ; 
 - try { 
 - int e = u - y ; 
 - } 
 - catch ( IllegalArgumentException e ) { 
 - System . out . println ( e ) ; 
 - return ; 
 - } 
 - } 
 - public void setFormats ( ) { 
 - try { 
 - int k = 4 ; 
 - } catch ( Exception e ) { 
 - Object k = null ; 
 - if ( k ! = null ) 
 - k = " ss " ; 
 - else { 
 - return ; 
 - } 
 - } 
 - } 
 - public void setFormats1 ( ) { 
 - try { 
 - int k = 4 ; 
 - } catch ( Exception e ) { 
 - Object k = null ; 
 - if ( k ! = null ) { 
 - k = " ss " ; 
 - } else { 
 - return ; 
 - } 
 - } 
 - } 
 - public void setFormats2 ( ) { 
 - try { 
 - int k = 4 ; 
 - } catch ( Exception e ) { 
 - Object k = null ; 
 - if ( k ! = null ) { 
 - k = " ss " ; 
 - return ; 
 - } 
 - } 
 - } 
 - public void setFormats3 ( ) { 
 - try { 
 - int k = 4 ; 
 - } catch ( Exception e ) { 
 - Object k = null ; 
 - if ( k ! = null ) { 
 - k = " ss " ; 
 - 
 - } 
 - } 
 - } 
 - 
 - private void some ( ) { 
 - try { 
 - throw new IOException ( ) ; 
 - } catch ( IOException e ) { 
 - / * ololo 
 - * blalba 
 - * / 
 - } 
 - } 
 - private void some1 ( ) { 
 - try { 
 - throw new IOException ( ) ; 
 - } catch ( IOException e ) { 
 - / * lalala 
 - * This is expected 
 - * / 
 - } 
 - } 
 - private void some2 ( ) { 
 - try { 
 - throw new IOException ( ) ; 
 - } catch ( IOException e ) { 
 - / * 
 - * This is expected 
 - * lalala 
 - * / 
 - } 
 - } 
 - private void some3 ( ) { 
 - try { 
 - throw new IOException ( ) ; 
 - } catch ( IOException e ) { 
 - / / some comment 
 - / / This is expected 
 - } 
 - } 
 - private void some4 ( ) { 
 - try { 
 - throw new IOException ( ) ; 
 - } catch ( IOException e ) { 
 - / / This is expected 
 - / / some comment 
 - } 
 - } 
 - private void some5 ( ) { 
 - try { 
 - throw new IOException ( ) ; 
 - } catch ( IOException e ) { 
 - / * some comment * / 
 - / / This is expected 
 - } 
 - } 
 - 
 - private void emptyMultilineComent ( ) { 
 - try { 
 - throw new IOException ( ) ; 
 - } catch ( IOException e ) { 
 - / * 
 - * / 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyCatchBlockCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyCatchBlockCheck . java 
 new file mode 100644 
 index 0000000 . . d398c8f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputEmptyCatchBlockCheck . java 
 @ @ - 0 , 0 + 1 , 244 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 + import java . io . IOException ; 
 + public class InputEmptyCatchBlockCheck 
 + { 
 + 
 + private void foo ( ) { 
 + try { 
 + throw new RuntimeException ( ) ; 
 + } catch ( Exception expected ) { 
 + / / Expected 
 + } 
 + } 
 + 
 + private void foo1 ( ) { 
 + try { 
 + throw new RuntimeException ( ) ; 
 + } catch ( Exception e ) { } 
 + 
 + } 
 + 
 + private void foo2 ( ) { 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException | NullPointerException | ArithmeticException ignore ) { 
 + } 
 + } 
 + 
 + private void foo3 ( ) { / / comment 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException | NullPointerException | ArithmeticException e ) { / / This is expected 
 + } 
 + } 
 + 
 + private void foo4 ( ) { 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException | NullPointerException | ArithmeticException e ) { / * This is expected * / 
 + } 
 + } 
 + 
 + private void foo5 ( ) { 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException | NullPointerException | ArithmeticException e ) { / / Some singleline comment 
 + } 
 + } 
 + 
 + private void foo6 ( ) { 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException expected ) { / / This is expected 
 + int k = 0 ; 
 + } 
 + } 
 + 
 + public void testTryCatch ( ) 
 + { 
 + try { 
 + int y = 0 ; 
 + int u = 8 ; 
 + int e = u - y ; 
 + return ; 
 + } 
 + catch ( Exception e ) { 
 + System . out . println ( e ) ; 
 + return ; 
 + } 
 + finally 
 + { 
 + return ; 
 + } 
 + } 
 + 
 + public void testTryCatch2 ( ) 
 + { 
 + try { 
 + } 
 + catch ( Exception e ) { / / OK 
 + / / This is expected 
 + / * This is expected * / 
 + / * * This is expected * / 
 + } 
 + finally 
 + { 
 + } 
 + } 
 + 
 + public void testTryCatch3 ( ) 
 + { 
 + try { 
 + int y = 0 ; 
 + int u = 8 ; 
 + int e = u - y ; 
 + } 
 + catch ( IllegalArgumentException e ) { 
 + System . out . println ( e ) ; / / some comment 
 + return ; 
 + } 
 + catch ( IllegalStateException ex ) { 
 + System . out . println ( ex ) ; 
 + return ; 
 + } 
 + } 
 + 
 + public void testTryCatch4 ( ) 
 + { 
 + int y = 0 ; 
 + int u = 8 ; 
 + try { 
 + int e = u - y ; 
 + } 
 + catch ( IllegalArgumentException e ) { 
 + System . out . println ( e ) ; 
 + return ; 
 + } 
 + } 
 + public void setFormats ( ) { 
 + try { 
 + int k = 4 ; 
 + } catch ( Exception e ) { 
 + Object k = null ; 
 + if ( k ! = null ) 
 + k = " ss " ; 
 + else { 
 + return ; 
 + } 
 + } 
 + } 
 + public void setFormats1 ( ) { 
 + try { 
 + int k = 4 ; 
 + } catch ( Exception e ) { 
 + Object k = null ; 
 + if ( k ! = null ) { 
 + k = " ss " ; 
 + } else { 
 + return ; 
 + } 
 + } 
 + } 
 + public void setFormats2 ( ) { 
 + try { 
 + int k = 4 ; 
 + } catch ( Exception e ) { 
 + Object k = null ; 
 + if ( k ! = null ) { 
 + k = " ss " ; 
 + return ; 
 + } 
 + } 
 + } 
 + public void setFormats3 ( ) { 
 + try { 
 + int k = 4 ; 
 + } catch ( Exception e ) { 
 + Object k = null ; 
 + if ( k ! = null ) { 
 + k = " ss " ; 
 + 
 + } 
 + } 
 + } 
 + 
 + private void some ( ) { 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException e ) { 
 + / * ololo 
 + * blalba 
 + * / 
 + } 
 + } 
 + private void some1 ( ) { 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException e ) { 
 + / * lalala 
 + * This is expected 
 + * / 
 + } 
 + } 
 + private void some2 ( ) { 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException e ) { 
 + / * 
 + * This is expected 
 + * lalala 
 + * / 
 + } 
 + } 
 + private void some3 ( ) { 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException e ) { 
 + / / some comment 
 + / / This is expected 
 + } 
 + } 
 + private void some4 ( ) { 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException e ) { 
 + / / This is expected 
 + / / some comment 
 + } 
 + } 
 + private void some5 ( ) { 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException e ) { 
 + / * some comment * / 
 + / / This is expected 
 + } 
 + } 
 + 
 + private void emptyMultilineComent ( ) { 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException e ) { 
 + / * 
 + * / 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java 
 new file mode 100644 
 index 0000000 . . 6fab664 
 - - - / dev / null 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheck . java 
 @ @ - 0 , 0 + 1 , 59 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2008 Oliver Burn 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 + / * * 
 + * Checks that no method having zero parameters is defined 
 + * using the name < em > finalize < / em > . 
 + * 
 + * @ author fqian @ google . com ( Feng Qian ) 
 + * @ author smckay @ google . com ( Steve McKay ) 
 + * @ author lkuehne 
 + * / 
 + public class NoFinalizerCheck extends Check 
 + { 
 + 
 + @ Override 
 + public int [ ] getDefaultTokens ( ) 
 + { 
 + return new int [ ] { TokenTypes . METHOD _ DEF } ; 
 + } 
 + 
 + @ Override 
 + public void visitToken ( DetailAST aAST ) 
 + { 
 + final DetailAST mid = aAST . findFirstToken ( TokenTypes . IDENT ) ; 
 + final String methodName = mid . getText ( ) ; 
 + 
 + if ( methodName . equals ( " finalize " ) ) { 
 + 
 + final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 + final boolean hasEmptyParamList = 
 + ! params . branchContains ( TokenTypes . PARAMETER _ DEF ) ; 
 + 
 + if ( hasEmptyParamList ) { 
 + log ( aAST . getLineNo ( ) , " avoid . finalizer . method " ) ; 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 index c5163da . . 76ad1b1 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 array . trailing . comma = Array should contain trailing comma . 
 assignment . inner . avoid = Inner assignments should be avoided . 
 + avoid . finalizer . method = Avoid using finalizer method . 
 covariant . equals = covariant equals without overriding equals ( java . lang . Object ) . 
 declaration . order . constructor = Constructor definition in wrong order . 
 declaration . order . method = Method definition in wrong order . 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 index 6a8b644 . . 38207b4 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 array . trailing . comma = Array sollte mit einem Komma abheschlossen werden . 
 assignment . inner . avoid = Innere Zuweisungen sollten vermieden werden . 
 + avoid . finalizer . method = Die Verwendung von finalizer Methoden sollte vermieden werden . 
 covariant . equals = Kovariante Definition von equals ( ) ohne equ
