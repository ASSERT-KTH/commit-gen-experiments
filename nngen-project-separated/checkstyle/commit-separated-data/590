BLEU SCORE: 0.02637407736896916

TEST MSG: Issue # 2600 : add eclipse violation check as a maven plugin
GENERATED MSG: till MECLIPSE - 735 we will keep Eclipse project files in repository . # 1219

TEST DIFF (one line): diff - - git a / . ci / eclipse - compiler - javac . sh b / . ci / eclipse - compiler - javac . sh <nl> new file mode 100755 <nl> index 0000000 . . 55cd64f <nl> - - - / dev / null <nl> + + + b / . ci / eclipse - compiler - javac . sh <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + # ! / bin / sh <nl> + set - e <nl> + <nl> + ECJ _ VERSION = " 4 . 7 " <nl> + mkdir - p target / classes <nl> + mkdir - p target / eclipse <nl> + <nl> + if [ ! - e ~ / . m2 / repository / ecj - $ ECJ _ VERSION . jar ] ; then <nl> + wget http : / / ftp - stud . fht - esslingen . de / pub / Mirrors / eclipse / eclipse / downloads / drops4 / R - 4 . 7 - 201706120950 / " ecj - $ ECJ _ VERSION . jar " - P ~ / . m2 / repository / <nl> + fi <nl> + <nl> + java - jar ~ / . m2 / repository / ecj - $ ECJ _ VERSION . jar - target 1 . 8 - source 1 . 8 - cp $ 1 \ <nl> + - nowarn : [ . / target / generated - sources / antlr ] - d target / eclipse - compile \ <nl> + - enableJavadoc src / main / java target / generated - sources / antlr - properties config / org . eclipse . jdt . core . prefs \ <nl> + \ <nl> + > target / eclipse / report . txt 2 > & 1 <nl> diff - - git a / . travis . yml b / . travis . yml <nl> index d6c5a12 . . d3bfe7b 100644 <nl> - - - a / . travis . yml <nl> + + + b / . travis . yml <nl> @ @ - 58 , 6 + 58 , 12 @ @ matrix : <nl> - DESC = " findbugs , spotbugs and pmd " <nl> - CMD = " mvn clean compile pmd : check findbugs : check spotbugs : check " <nl> <nl> + # eclipse static analysis <nl> + - jdk : oraclejdk8 <nl> + env : <nl> + - DESC = " eclipse static analysis " <nl> + - CMD = " mvn clean compile exec : exec - Peclipse - compiler " <nl> + <nl> # Releasenotes generation - validaton <nl> - jdk : oraclejdk8 <nl> env : <nl> diff - - git a / config / org . eclipse . jdt . core . prefs b / config / org . eclipse . jdt . core . prefs <nl> new file mode 100644 <nl> index 0000000 . . 5ba759c <nl> - - - / dev / null <nl> + + + b / config / org . eclipse . jdt . core . prefs <nl> @ @ - 0 , 0 + 1 , 74 @ @ <nl> + org . eclipse . jdt . core . compiler . annotation . inheritNullAnnotations = enabled <nl> + org . eclipse . jdt . core . compiler . annotation . nullanalysis = enabled <nl> + org . eclipse . jdt . core . compiler . problem . comparingIdentical = error <nl> + org . eclipse . jdt . core . compiler . problem . deadCode = error <nl> + org . eclipse . jdt . core . compiler . problem . deprecationInDeprecatedCode = enabled <nl> + org . eclipse . jdt . core . compiler . problem . deprecationWhenOverridingDeprecatedMethod = enabled <nl> + org . eclipse . jdt . core . compiler . problem . discouragedReference = error <nl> + org . eclipse . jdt . core . compiler . problem . emptyStatement = error <nl> + org . eclipse . jdt . core . compiler . problem . fallthroughCase = error <nl> + org . eclipse . jdt . core . compiler . problem . fatalOptionalError = disabled <nl> + org . eclipse . jdt . core . compiler . problem . finallyBlockNotCompletingNormally = error <nl> + org . eclipse . jdt . core . compiler . problem . finalParameterBound = error <nl> + org . eclipse . jdt . core . compiler . problem . hiddenCatchBlock = error <nl> + org . eclipse . jdt . core . compiler . problem . includeNullInfoFromAsserts = enabled <nl> + org . eclipse . jdt . core . compiler . problem . incompatibleNonInheritedInterfaceMethod = error <nl> + org . eclipse . jdt . core . compiler . problem . incompleteEnumSwitch = error <nl> + org . eclipse . jdt . core . compiler . problem . indirectStaticAccess = error <nl> + org . eclipse . jdt . core . compiler . problem . localVariableHiding = error <nl> + org . eclipse . jdt . core . compiler . problem . methodWithConstructorName = error <nl> + org . eclipse . jdt . core . compiler . problem . missingDefaultCase = error <nl> + org . eclipse . jdt . core . compiler . problem . missingEnumCaseDespiteDefault = enabled <nl> + org . eclipse . jdt . core . compiler . problem . missingHashCodeMethod = error <nl> + org . eclipse . jdt . core . compiler . problem . missingSerialVersion = error <nl> + org . eclipse . jdt . core . compiler . problem . missingSynchronizedOnInheritedMethod = error <nl> + org . eclipse . jdt . core . compiler . problem . noEffectAssignment = error <nl> + org . eclipse . jdt . core . compiler . problem . noImplicitStringConversion = error <nl> + org . eclipse . jdt . core . compiler . problem . nonnullParameterAnnotationDropped = error <nl> + org . eclipse . jdt . core . compiler . problem . nonnullTypeVariableFromLegacyInvocation = error <nl> + org . eclipse . jdt . core . compiler . problem . nullReference = error <nl> + org . eclipse . jdt . core . compiler . problem . nullUncheckedConversion = error <nl> + org . eclipse . jdt . core . compiler . problem . overridingPackageDefaultMethod = error <nl> + org . eclipse . jdt . core . compiler . problem . parameterAssignment = error <nl> + org . eclipse . jdt . core . compiler . problem . pessimisticNullAnalysisForFreeTypeVariables = error <nl> + org . eclipse . jdt . core . compiler . problem . possibleAccidentalBooleanAssignment = error <nl> + org . eclipse . jdt . core . compiler . problem . redundantNullAnnotation = error <nl> + org . eclipse . jdt . core . compiler . problem . redundantNullCheck = error <nl> + org . eclipse . jdt . core . compiler . problem . redundantSpecificationOfTypeArguments = error <nl> + org . eclipse . jdt . core . compiler . problem . redundantSuperinterface = error <nl> + org . eclipse . jdt . core . compiler . problem . reportMethodCanBeStatic = error <nl> + org . eclipse . jdt . core . compiler . problem . staticAccessReceiver = error <nl> + org . eclipse . jdt . core . compiler . problem . syntacticNullAnalysisForFields = enabled <nl> + org . eclipse . jdt . core . compiler . problem . unclosedCloseable = error <nl> + org . eclipse . jdt . core . compiler . problem . undocumentedEmptyBlock = error <nl> + org . eclipse . jdt . core . compiler . problem . unlikelyCollectionMethodArgumentType = error <nl> + org . eclipse . jdt . core . compiler . problem . unlikelyCollectionMethodArgumentTypeStrict = enabled <nl> + org . eclipse . jdt . core . compiler . problem . unlikelyEqualsArgumentType = error <nl> + org . eclipse . jdt . core . compiler . problem . unusedDeclaredThrownException = error <nl> + org . eclipse . jdt . core . compiler . problem . unusedImport = error <nl> + org . eclipse . jdt . core . compiler . problem . unusedLabel = error <nl> + org . eclipse . jdt . core . compiler . problem . unusedLocal = error <nl> + org . eclipse . jdt . core . compiler . problem . unusedObjectAllocation = error <nl> + org . eclipse . jdt . core . compiler . problem . unusedParameter = error <nl> + org . eclipse . jdt . core . compiler . problem . unusedPrivateMember = error <nl> + org . eclipse . jdt . core . compiler . problem . unusedTypeParameter = error <nl> + org . eclipse . jdt . core . compiler . problem . varargsArgumentNeedCast = error <nl> + <nl> + org . eclipse . jdt . core . compiler . annotation . missingNonNullByDefaultAnnotation = ignore <nl> + org . eclipse . jdt . core . compiler . problem . autoboxing = ignore <nl> + org . eclipse . jdt . core . compiler . problem . deprecation = ignore <nl> + org . eclipse . jdt . core . compiler . problem . explicitlyClosedAutoCloseable = ignore <nl> + org . eclipse . jdt . core . compiler . problem . fieldHiding = ignore <nl> + org . eclipse . jdt . core . compiler . problem . nonExternalizedStringLiteral = ignore <nl> + org . eclipse . jdt . core . compiler . problem . potentiallyUnclosedCloseable = ignore <nl> + org . eclipse . jdt . core . compiler . problem . potentialNullReference = ignore <nl> + org . eclipse . jdt . core . compiler . problem . rawTypeReference = ignore <nl> + org . eclipse . jdt . core . compiler . problem . reportMethodCanBePotentiallyStatic = ignore <nl> + org . eclipse . jdt . core . compiler . problem . specialParameterHidingField = ignore <nl> + org . eclipse . jdt . core . compiler . problem . syntheticAccessEmulation = ignore <nl> + org . eclipse . jdt . core . compiler . problem . typeParameterHiding = ignore <nl> + org . eclipse . jdt . core . compiler . problem . uncheckedTypeOperation = ignore <nl> + org . eclipse . jdt . core . compiler . problem . unnecessaryElse = ignore <nl> + org . eclipse . jdt . core . compiler . problem . unnecessaryTypeCheck = ignore <nl> + org . eclipse . jdt . core . compiler . problem . unqualifiedFieldAccess = ignore <nl> + org . eclipse . jdt . core . compiler . problem . unusedExceptionParameter = ignore <nl> diff - - git a / pom . xml b / pom . xml <nl> index 4cc2294 . . 63d55f9 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1029 , 6 + 1029 , 7 @ @ <nl> < excludes > <nl> < exclude > java . header < / exclude > <nl> < exclude > java _ regexp . header < / exclude > <nl> + < exclude > org . eclipse . jdt . core . prefs < / exclude > <nl> < / excludes > <nl> < / validationSet > <nl> < validationSet > <nl> @ @ - 2306 , 6 + 2307 , 25 @ @ <nl> < / build > <nl> < / profile > <nl> < profile > <nl> + < id > eclipse - compiler < / id > <nl> + < build > <nl> + < plugins > <nl> + < plugin > <nl> + < groupId > org . codehaus . mojo < / groupId > <nl> + < artifactId > exec - maven - plugin < / artifactId > <nl> + < version > 1 . 6 . 0 < / version > <nl> + < configuration > <nl> + < executable > . ci / eclipse - compiler - javac . sh < / executable > <nl> + < classpathScope > compile < / classpathScope > <nl> + < arguments > <nl> + < classpath / > <nl> + < / arguments > <nl> + < / configuration > <nl> + < / plugin > <nl> + < / plugins > <nl> + < / build > <nl> + < / profile > <nl> + < profile > <nl> < id > pitest - checkstyle - xpath < / id > <nl> < build > <nl> < plugins > <nl> diff - - git a / src / xdocs / eclipse . xml b / src / xdocs / eclipse . xml <nl> index 483a3b8 . . a16a386 100644 <nl> - - - a / src / xdocs / eclipse . xml <nl> + + + b / src / xdocs / eclipse . xml <nl> @ @ - 86 , 6 + 86 , 11 @ @ <nl> < p > <nl> < img alt = " screenshot " src = " images / gui _ screenshot _ eclipse _ ignore _ warnings . png " / > <nl> < / p > <nl> + < br / > <nl> + < p > <nl> + Next , you need to put < i > . ci / org . eclipse . jdt . core . prefs < / i > file to the < i > . settings / org . eclipse . jdt . core . prefs < / i > <nl> + to setup Eclipse compiler . <nl> + < / p > <nl> < / section > <nl> <nl> < section name = " Organize Imports " >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> index d4b1556 . . 34f0d1b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> @ @ - 74 , 30 + 74 , 15 @ @ public class ExplicitInitializationCheck extends Check { <nl> <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> - / / do not check local variables and <nl> - / / fields declared in interface / annotations <nl> - if ( ScopeUtils . isLocalVariableDef ( ast ) <nl> - | | ScopeUtils . inInterfaceOrAnnotationBlock ( ast ) ) { <nl> - return ; <nl> - } <nl> - <nl> - final DetailAST assign = ast . findFirstToken ( TokenTypes . ASSIGN ) ; <nl> - if ( assign = = null ) { <nl> - / / no assign - no check <nl> - return ; <nl> - } <nl> - <nl> - final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - if ( modifiers ! = null <nl> - & & modifiers . branchContains ( TokenTypes . FINAL ) ) { <nl> - / / do not check final variables <nl> + if ( isSkipCase ( ast ) ) { <nl> return ; <nl> } <nl> <nl> - final DetailAST type = ast . findFirstToken ( TokenTypes . TYPE ) ; <nl> final DetailAST ident = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> + final DetailAST assign = ast . findFirstToken ( TokenTypes . ASSIGN ) ; <nl> final DetailAST exprStart = <nl> assign . getFirstChild ( ) . getFirstChild ( ) ; <nl> + final DetailAST type = ast . findFirstToken ( TokenTypes . TYPE ) ; <nl> if ( isObjectType ( type ) <nl> & & exprStart . getType ( ) = = TokenTypes . LITERAL _ NULL ) { <nl> log ( ident , MSG _ KEY , ident . getText ( ) , " null " ) ; <nl> @ @ - 112 , 14 + 97 , 51 @ @ public class ExplicitInitializationCheck extends Check { <nl> log ( ident , MSG _ KEY , ident . getText ( ) , " 0 " ) ; <nl> } <nl> if ( primitiveType = = TokenTypes . LITERAL _ CHAR <nl> - & & ( isZero ( exprStart ) <nl> - | | exprStart . getType ( ) = = TokenTypes . CHAR _ LITERAL <nl> - & & " ' \ \ 0 ' " . equals ( exprStart . getText ( ) ) ) ) { <nl> + & & isZeroChar ( exprStart ) ) { <nl> log ( ident , MSG _ KEY , ident . getText ( ) , " \ \ 0 " ) ; <nl> } <nl> } <nl> <nl> / * * <nl> + * examin Char literal for initializing to default value <nl> + * @ param exprStart exprssion <nl> + * @ return true is literal is initialized by zero symbol <nl> + * / <nl> + private boolean isZeroChar ( DetailAST exprStart ) { <nl> + return isZero ( exprStart ) <nl> + | | exprStart . getType ( ) = = TokenTypes . CHAR _ LITERAL <nl> + & & " ' \ \ 0 ' " . equals ( exprStart . getText ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * chekc for cases that should be skipped : no assignment , local variable , final variables <nl> + * @ param ast Variable def AST <nl> + * @ return true is that is a case that need to be skipped . <nl> + * / <nl> + private boolean isSkipCase ( DetailAST ast ) { <nl> + / / do not check local variables and <nl> + / / fields declared in interface / annotations <nl> + if ( ScopeUtils . isLocalVariableDef ( ast ) <nl> + | | ScopeUtils . inInterfaceOrAnnotationBlock ( ast ) ) { <nl> + return true ; <nl> + } <nl> + <nl> + final DetailAST assign = ast . findFirstToken ( TokenTypes . ASSIGN ) ; <nl> + if ( assign = = null ) { <nl> + / / no assign - no check <nl> + return true ; <nl> + } <nl> + <nl> + final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + if ( modifiers ! = null <nl> + & & modifiers . branchContains ( TokenTypes . FINAL ) ) { <nl> + / / do not check final variables <nl> + return true ; <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> + / * * <nl> * Determines if a giiven type is an object type . <nl> * @ param type type to check . <nl> * @ return true if it is an object type .

TEST DIFF:
diff - - git a / . ci / eclipse - compiler - javac . sh b / . ci / eclipse - compiler - javac . sh 
 new file mode 100755 
 index 0000000 . . 55cd64f 
 - - - / dev / null 
 + + + b / . ci / eclipse - compiler - javac . sh 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + # ! / bin / sh 
 + set - e 
 + 
 + ECJ _ VERSION = " 4 . 7 " 
 + mkdir - p target / classes 
 + mkdir - p target / eclipse 
 + 
 + if [ ! - e ~ / . m2 / repository / ecj - $ ECJ _ VERSION . jar ] ; then 
 + wget http : / / ftp - stud . fht - esslingen . de / pub / Mirrors / eclipse / eclipse / downloads / drops4 / R - 4 . 7 - 201706120950 / " ecj - $ ECJ _ VERSION . jar " - P ~ / . m2 / repository / 
 + fi 
 + 
 + java - jar ~ / . m2 / repository / ecj - $ ECJ _ VERSION . jar - target 1 . 8 - source 1 . 8 - cp $ 1 \ 
 + - nowarn : [ . / target / generated - sources / antlr ] - d target / eclipse - compile \ 
 + - enableJavadoc src / main / java target / generated - sources / antlr - properties config / org . eclipse . jdt . core . prefs \ 
 + \ 
 + > target / eclipse / report . txt 2 > & 1 
 diff - - git a / . travis . yml b / . travis . yml 
 index d6c5a12 . . d3bfe7b 100644 
 - - - a / . travis . yml 
 + + + b / . travis . yml 
 @ @ - 58 , 6 + 58 , 12 @ @ matrix : 
 - DESC = " findbugs , spotbugs and pmd " 
 - CMD = " mvn clean compile pmd : check findbugs : check spotbugs : check " 
 
 + # eclipse static analysis 
 + - jdk : oraclejdk8 
 + env : 
 + - DESC = " eclipse static analysis " 
 + - CMD = " mvn clean compile exec : exec - Peclipse - compiler " 
 + 
 # Releasenotes generation - validaton 
 - jdk : oraclejdk8 
 env : 
 diff - - git a / config / org . eclipse . jdt . core . prefs b / config / org . eclipse . jdt . core . prefs 
 new file mode 100644 
 index 0000000 . . 5ba759c 
 - - - / dev / null 
 + + + b / config / org . eclipse . jdt . core . prefs 
 @ @ - 0 , 0 + 1 , 74 @ @ 
 + org . eclipse . jdt . core . compiler . annotation . inheritNullAnnotations = enabled 
 + org . eclipse . jdt . core . compiler . annotation . nullanalysis = enabled 
 + org . eclipse . jdt . core . compiler . problem . comparingIdentical = error 
 + org . eclipse . jdt . core . compiler . problem . deadCode = error 
 + org . eclipse . jdt . core . compiler . problem . deprecationInDeprecatedCode = enabled 
 + org . eclipse . jdt . core . compiler . problem . deprecationWhenOverridingDeprecatedMethod = enabled 
 + org . eclipse . jdt . core . compiler . problem . discouragedReference = error 
 + org . eclipse . jdt . core . compiler . problem . emptyStatement = error 
 + org . eclipse . jdt . core . compiler . problem . fallthroughCase = error 
 + org . eclipse . jdt . core . compiler . problem . fatalOptionalError = disabled 
 + org . eclipse . jdt . core . compiler . problem . finallyBlockNotCompletingNormally = error 
 + org . eclipse . jdt . core . compiler . problem . finalParameterBound = error 
 + org . eclipse . jdt . core . compiler . problem . hiddenCatchBlock = error 
 + org . eclipse . jdt . core . compiler . problem . includeNullInfoFromAsserts = enabled 
 + org . eclipse . jdt . core . compiler . problem . incompatibleNonInheritedInterfaceMethod = error 
 + org . eclipse . jdt . core . compiler . problem . incompleteEnumSwitch = error 
 + org . eclipse . jdt . core . compiler . problem . indirectStaticAccess = error 
 + org . eclipse . jdt . core . compiler . problem . localVariableHiding = error 
 + org . eclipse . jdt . core . compiler . problem . methodWithConstructorName = error 
 + org . eclipse . jdt . core . compiler . problem . missingDefaultCase = error 
 + org . eclipse . jdt . core . compiler . problem . missingEnumCaseDespiteDefault = enabled 
 + org . eclipse . jdt . core . compiler . problem . missingHashCodeMethod = error 
 + org . eclipse . jdt . core . compiler . problem . missingSerialVersion = error 
 + org . eclipse . jdt . core . compiler . problem . missingSynchronizedOnInheritedMethod = error 
 + org . eclipse . jdt . core . compiler . problem . noEffectAssignment = error 
 + org . eclipse . jdt . core . compiler . problem . noImplicitStringConversion = error 
 + org . eclipse . jdt . core . compiler . problem . nonnullParameterAnnotationDropped = error 
 + org . eclipse . jdt . core . compiler . problem . nonnullTypeVariableFromLegacyInvocation = error 
 + org . eclipse . jdt . core . compiler . problem . nullReference = error 
 + org . eclipse . jdt . core . compiler . problem . nullUncheckedConversion = error 
 + org . eclipse . jdt . core . compiler . problem . overridingPackageDefaultMethod = error 
 + org . eclipse . jdt . core . compiler . problem . parameterAssignment = error 
 + org . eclipse . jdt . core . compiler . problem . pessimisticNullAnalysisForFreeTypeVariables = error 
 + org . eclipse . jdt . core . compiler . problem . possibleAccidentalBooleanAssignment = error 
 + org . eclipse . jdt . core . compiler . problem . redundantNullAnnotation = error 
 + org . eclipse . jdt . core . compiler . problem . redundantNullCheck = error 
 + org . eclipse . jdt . core . compiler . problem . redundantSpecificationOfTypeArguments = error 
 + org . eclipse . jdt . core . compiler . problem . redundantSuperinterface = error 
 + org . eclipse . jdt . core . compiler . problem . reportMethodCanBeStatic = error 
 + org . eclipse . jdt . core . compiler . problem . staticAccessReceiver = error 
 + org . eclipse . jdt . core . compiler . problem . syntacticNullAnalysisForFields = enabled 
 + org . eclipse . jdt . core . compiler . problem . unclosedCloseable = error 
 + org . eclipse . jdt . core . compiler . problem . undocumentedEmptyBlock = error 
 + org . eclipse . jdt . core . compiler . problem . unlikelyCollectionMethodArgumentType = error 
 + org . eclipse . jdt . core . compiler . problem . unlikelyCollectionMethodArgumentTypeStrict = enabled 
 + org . eclipse . jdt . core . compiler . problem . unlikelyEqualsArgumentType = error 
 + org . eclipse . jdt . core . compiler . problem . unusedDeclaredThrownException = error 
 + org . eclipse . jdt . core . compiler . problem . unusedImport = error 
 + org . eclipse . jdt . core . compiler . problem . unusedLabel = error 
 + org . eclipse . jdt . core . compiler . problem . unusedLocal = error 
 + org . eclipse . jdt . core . compiler . problem . unusedObjectAllocation = error 
 + org . eclipse . jdt . core . compiler . problem . unusedParameter = error 
 + org . eclipse . jdt . core . compiler . problem . unusedPrivateMember = error 
 + org . eclipse . jdt . core . compiler . problem . unusedTypeParameter = error 
 + org . eclipse . jdt . core . compiler . problem . varargsArgumentNeedCast = error 
 + 
 + org . eclipse . jdt . core . compiler . annotation . missingNonNullByDefaultAnnotation = ignore 
 + org . eclipse . jdt . core . compiler . problem . autoboxing = ignore 
 + org . eclipse . jdt . core . compiler . problem . deprecation = ignore 
 + org . eclipse . jdt . core . compiler . problem . explicitlyClosedAutoCloseable = ignore 
 + org . eclipse . jdt . core . compiler . problem . fieldHiding = ignore 
 + org . eclipse . jdt . core . compiler . problem . nonExternalizedStringLiteral = ignore 
 + org . eclipse . jdt . core . compiler . problem . potentiallyUnclosedCloseable = ignore 
 + org . eclipse . jdt . core . compiler . problem . potentialNullReference = ignore 
 + org . eclipse . jdt . core . compiler . problem . rawTypeReference = ignore 
 + org . eclipse . jdt . core . compiler . problem . reportMethodCanBePotentiallyStatic = ignore 
 + org . eclipse . jdt . core . compiler . problem . specialParameterHidingField = ignore 
 + org . eclipse . jdt . core . compiler . problem . syntheticAccessEmulation = ignore 
 + org . eclipse . jdt . core . compiler . problem . typeParameterHiding = ignore 
 + org . eclipse . jdt . core . compiler . problem . uncheckedTypeOperation = ignore 
 + org . eclipse . jdt . core . compiler . problem . unnecessaryElse = ignore 
 + org . eclipse . jdt . core . compiler . problem . unnecessaryTypeCheck = ignore 
 + org . eclipse . jdt . core . compiler . problem . unqualifiedFieldAccess = ignore 
 + org . eclipse . jdt . core . compiler . problem . unusedExceptionParameter = ignore 
 diff - - git a / pom . xml b / pom . xml 
 index 4cc2294 . . 63d55f9 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1029 , 6 + 1029 , 7 @ @ 
 < excludes > 
 < exclude > java . header < / exclude > 
 < exclude > java _ regexp . header < / exclude > 
 + < exclude > org . eclipse . jdt . core . prefs < / exclude > 
 < / excludes > 
 < / validationSet > 
 < validationSet > 
 @ @ - 2306 , 6 + 2307 , 25 @ @ 
 < / build > 
 < / profile > 
 < profile > 
 + < id > eclipse - compiler < / id > 
 + < build > 
 + < plugins > 
 + < plugin > 
 + < groupId > org . codehaus . mojo < / groupId > 
 + < artifactId > exec - maven - plugin < / artifactId > 
 + < version > 1 . 6 . 0 < / version > 
 + < configuration > 
 + < executable > . ci / eclipse - compiler - javac . sh < / executable > 
 + < classpathScope > compile < / classpathScope > 
 + < arguments > 
 + < classpath / > 
 + < / arguments > 
 + < / configuration > 
 + < / plugin > 
 + < / plugins > 
 + < / build > 
 + < / profile > 
 + < profile > 
 < id > pitest - checkstyle - xpath < / id > 
 < build > 
 < plugins > 
 diff - - git a / src / xdocs / eclipse . xml b / src / xdocs / eclipse . xml 
 index 483a3b8 . . a16a386 100644 
 - - - a / src / xdocs / eclipse . xml 
 + + + b / src / xdocs / eclipse . xml 
 @ @ - 86 , 6 + 86 , 11 @ @ 
 < p > 
 < img alt = " screenshot " src = " images / gui _ screenshot _ eclipse _ ignore _ warnings . png " / > 
 < / p > 
 + < br / > 
 + < p > 
 + Next , you need to put < i > . ci / org . eclipse . jdt . core . prefs < / i > file to the < i > . settings / org . eclipse . jdt . core . prefs < / i > 
 + to setup Eclipse compiler . 
 + < / p > 
 < / section > 
 
 < section name = " Organize Imports " >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 index d4b1556 . . 34f0d1b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 @ @ - 74 , 30 + 74 , 15 @ @ public class ExplicitInitializationCheck extends Check { 
 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 - / / do not check local variables and 
 - / / fields declared in interface / annotations 
 - if ( ScopeUtils . isLocalVariableDef ( ast ) 
 - | | ScopeUtils . inInterfaceOrAnnotationBlock ( ast ) ) { 
 - return ; 
 - } 
 - 
 - final DetailAST assign = ast . findFirstToken ( TokenTypes . ASSIGN ) ; 
 - if ( assign = = null ) { 
 - / / no assign - no check 
 - return ; 
 - } 
 - 
 - final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - if ( modifiers ! = null 
 - & & modifiers . branchContains ( TokenTypes . FINAL ) ) { 
 - / / do not check final variables 
 + if ( isSkipCase ( ast ) ) { 
 return ; 
 } 
 
 - final DetailAST type = ast . findFirstToken ( TokenTypes . TYPE ) ; 
 final DetailAST ident = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 + final DetailAST assign = ast . findFirstToken ( TokenTypes . ASSIGN ) ; 
 final DetailAST exprStart = 
 assign . getFirstChild ( ) . getFirstChild ( ) ; 
 + final DetailAST type = ast . findFirstToken ( TokenTypes . TYPE ) ; 
 if ( isObjectType ( type ) 
 & & exprStart . getType ( ) = = TokenTypes . LITERAL _ NULL ) { 
 log ( ident , MSG _ KEY , ident . getText ( ) , " null " ) ; 
 @ @ - 112 , 14 + 97 , 51 @ @ public class ExplicitInitializationCheck extends Check { 
 log ( ident , MSG _ KEY , ident . getText ( ) , " 0 " ) ; 
 } 
 if ( primitiveType = = TokenTypes . LITERAL _ CHAR 
 - & & ( isZero ( exprStart ) 
 - | | exprStart . getType ( ) = = TokenTypes . CHAR _ LITERAL 
 - & & " ' \ \ 0 ' " . equals ( exprStart . getText ( ) ) ) ) { 
 + & & isZeroChar ( exprStart ) ) { 
 log ( ident , MSG _ KEY , ident . getText ( ) , " \ \ 0 " ) ; 
 } 
 } 
 
 / * * 
 + * examin Char literal for initializing to default value 
 + * @ param exprStart exprssion 
 + * @ return true is literal is initialized by zero symbol 
 + * / 
 + private boolean isZeroChar ( DetailAST exprStart ) { 
 + return isZero ( exprStart ) 
 + | | exprStart . getType ( ) = = TokenTypes . CHAR _ LITERAL 
 + & & " ' \ \ 0 ' " . equals ( exprStart . getText ( ) ) ; 
 + } 
 + 
 + / * * 
 + * chekc for cases that should be skipped : no assignment , local variable , final variables 
 + * @ param ast Variable def AST 
 + * @ return true is that is a case that need to be skipped . 
 + * / 
 + private boolean isSkipCase ( DetailAST ast ) { 
 + / / do not check local variables and 
 + / / fields declared in interface / annotations 
 + if ( ScopeUtils . isLocalVariableDef ( ast ) 
 + | | ScopeUtils . inInterfaceOrAnnotationBlock ( ast ) ) { 
 + return true ; 
 + } 
 + 
 + final DetailAST assign = ast . findFirstToken ( TokenTypes . ASSIGN ) ; 
 + if ( assign = = null ) { 
 + / / no assign - no check 
 + return true ; 
 + } 
 + 
 + final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + if ( modifiers ! = null 
 + & & modifiers . branchContains ( TokenTypes . FINAL ) ) { 
 + / / do not check final variables 
 + return true ; 
 + } 
 + return false ; 
 + } 
 + 
 + / * * 
 * Determines if a giiven type is an object type . 
 * @ param type type to check . 
 * @ return true if it is an object type .
