BLEU SCORE: 0.003976388001785548

TEST MSG: spelling : corrected sentence
GENERATED MSG: removed snippet from writingchecks , probably a copy / paste error during the transition to xdocs

TEST DIFF (one line): diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm <nl> index 98edae2 . . ff7dee5 100644 <nl> - - - a / src / xdocs / writingjavadocchecks . xml . vm <nl> + + + b / src / xdocs / writingjavadocchecks . xml . vm <nl> @ @ - 195 , 7 + 195 , 7 @ @ CLASS _ DEF - > CLASS _ DEF [ 5 : 0 ] <nl> < p > <nl> As you see very small java file transforms to a huge Abstract Syntax Tree , because that is the most detailed tree including all components of the java file : classes , methods , comments , etc . <nl> < / p > <nl> - < p > In most cases while developing Javadoc Check you need only parse tree of the exact Javadoc comment . <nl> + < p > In most cases while developing Javadoc Check , you need to only parse the tree of the exact Javadoc comment . <nl> To do that just copy Javadoc comment to separate file and remove < b > / * * < / b > at the begining and < b > * / < / b > at the end . After that , run checkstyle with < b > - j < / b > argument . <nl> < / p > <nl> < p > MyJavadocComment . javadoc file : < / p >
NEAREST DIFF (one line): diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / RequiredRegexpCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / RequiredRegexpCheckTest . java <nl> index 7aebb28 . . d94ae61 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / RequiredRegexpCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / RequiredRegexpCheckTest . java <nl> @ @ - 1 , 45 + 1 , 45 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestCase ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> - <nl> - public class RequiredRegexpCheckTest <nl> - extends BaseCheckTestCase <nl> - { <nl> - public void testExistingInDoc ( ) <nl> - throws Exception <nl> - { <nl> - final String required = " Test case file " ; <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( RequiredRegexpCheck . class ) ; <nl> - checkConfig . addAttribute ( " format " , required ) ; <nl> - final String [ ] expected = { <nl> - } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> - } <nl> - <nl> - public void testExistingInCode ( ) <nl> - throws Exception <nl> - { <nl> - final String required = " package " ; <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( RequiredRegexpCheck . class ) ; <nl> - checkConfig . addAttribute ( " format " , required ) ; <nl> - final String [ ] expected = { <nl> - } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> - } <nl> - <nl> - public void testMissing ( ) <nl> - throws Exception <nl> - { <nl> - final String required = " This text is not in the file " ; <nl> - final DefaultConfiguration checkConfig = <nl> - createCheckConfig ( RequiredRegexpCheck . class ) ; <nl> - checkConfig . addAttribute ( " format " , required ) ; <nl> - final String [ ] expected = { <nl> - " 0 : Required pattern ' " + required + " ' missing in file . " <nl> - } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> - } <nl> - } <nl> + package com . puppycrawl . tools . checkstyle . checks ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestCase ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + <nl> + public class RequiredRegexpCheckTest <nl> + extends BaseCheckTestCase <nl> + { <nl> + public void testExistingInDoc ( ) <nl> + throws Exception <nl> + { <nl> + final String required = " Test case file " ; <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( RequiredRegexpCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , required ) ; <nl> + final String [ ] expected = { <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + } <nl> + <nl> + public void testExistingInCode ( ) <nl> + throws Exception <nl> + { <nl> + final String required = " package " ; <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( RequiredRegexpCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , required ) ; <nl> + final String [ ] expected = { <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + } <nl> + <nl> + public void testMissing ( ) <nl> + throws Exception <nl> + { <nl> + final String required = " This text is not in the file " ; <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( RequiredRegexpCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , required ) ; <nl> + final String [ ] expected = { <nl> + " 0 : Required pattern ' " + required + " ' missing in file . " <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm 
 index 98edae2 . . ff7dee5 100644 
 - - - a / src / xdocs / writingjavadocchecks . xml . vm 
 + + + b / src / xdocs / writingjavadocchecks . xml . vm 
 @ @ - 195 , 7 + 195 , 7 @ @ CLASS _ DEF - > CLASS _ DEF [ 5 : 0 ] 
 < p > 
 As you see very small java file transforms to a huge Abstract Syntax Tree , because that is the most detailed tree including all components of the java file : classes , methods , comments , etc . 
 < / p > 
 - < p > In most cases while developing Javadoc Check you need only parse tree of the exact Javadoc comment . 
 + < p > In most cases while developing Javadoc Check , you need to only parse the tree of the exact Javadoc comment . 
 To do that just copy Javadoc comment to separate file and remove < b > / * * < / b > at the begining and < b > * / < / b > at the end . After that , run checkstyle with < b > - j < / b > argument . 
 < / p > 
 < p > MyJavadocComment . javadoc file : < / p >

NEAREST DIFF:
diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / RequiredRegexpCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / RequiredRegexpCheckTest . java 
 index 7aebb28 . . d94ae61 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / RequiredRegexpCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / RequiredRegexpCheckTest . java 
 @ @ - 1 , 45 + 1 , 45 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks ; 
 - 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestCase ; 
 - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 - 
 - public class RequiredRegexpCheckTest 
 - extends BaseCheckTestCase 
 - { 
 - public void testExistingInDoc ( ) 
 - throws Exception 
 - { 
 - final String required = " Test case file " ; 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( RequiredRegexpCheck . class ) ; 
 - checkConfig . addAttribute ( " format " , required ) ; 
 - final String [ ] expected = { 
 - } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 - } 
 - 
 - public void testExistingInCode ( ) 
 - throws Exception 
 - { 
 - final String required = " package " ; 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( RequiredRegexpCheck . class ) ; 
 - checkConfig . addAttribute ( " format " , required ) ; 
 - final String [ ] expected = { 
 - } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 - } 
 - 
 - public void testMissing ( ) 
 - throws Exception 
 - { 
 - final String required = " This text is not in the file " ; 
 - final DefaultConfiguration checkConfig = 
 - createCheckConfig ( RequiredRegexpCheck . class ) ; 
 - checkConfig . addAttribute ( " format " , required ) ; 
 - final String [ ] expected = { 
 - " 0 : Required pattern ' " + required + " ' missing in file . " 
 - } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 - } 
 - } 
 + package com . puppycrawl . tools . checkstyle . checks ; 
 + 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestCase ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + 
 + public class RequiredRegexpCheckTest 
 + extends BaseCheckTestCase 
 + { 
 + public void testExistingInDoc ( ) 
 + throws Exception 
 + { 
 + final String required = " Test case file " ; 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( RequiredRegexpCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , required ) ; 
 + final String [ ] expected = { 
 + } ; 
 + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + } 
 + 
 + public void testExistingInCode ( ) 
 + throws Exception 
 + { 
 + final String required = " package " ; 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( RequiredRegexpCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , required ) ; 
 + final String [ ] expected = { 
 + } ; 
 + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + } 
 + 
 + public void testMissing ( ) 
 + throws Exception 
 + { 
 + final String required = " This text is not in the file " ; 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( RequiredRegexpCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , required ) ; 
 + final String [ ] expected = { 
 + " 0 : Required pattern ' " + required + " ' missing in file . " 
 + } ; 
 + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + } 
 + }
