BLEU SCORE: 0.014199193612838947

TEST MSG: Issue # 2646 : Fix inability to suppress checkstyle violations with @ SuppressWarnings annotation
GENERATED MSG: fixing typo in SuppressionCommentFilter most likely it ' s the cause of 1084654 )

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> index 50af412 . . 3a8e0d1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> @ @ - 156 , 7 + 156 , 8 @ @ public class SuppressWarningsHolder <nl> final boolean afterStart = <nl> entry . getFirstLine ( ) < line <nl> | | entry . getFirstLine ( ) = = line <nl> - & & entry . getFirstColumn ( ) < = column ; <nl> + & & ( entry . getFirstColumn ( ) < = column <nl> + | | column = = 0 ) ; <nl> final boolean beforeEnd = <nl> entry . getLastLine ( ) > line <nl> | | entry . getLastLine ( ) = = line & & entry <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java <nl> index 91b4bca . . 04357ef 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java <nl> @ @ - 35 , 7 + 35 , 9 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . checks . SuppressWarningsHolder ; <nl> + import com . puppycrawl . tools . checkstyle . checks . UncommentedMainCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . coding . IllegalCatchCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTypeCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . sizes . ParameterNumberCheck ; <nl> @ @ - 43 , 6 + 45 , 9 @ @ import com . puppycrawl . tools . checkstyle . checks . sizes . ParameterNumberCheck ; <nl> public class SuppressWarningsFilterTest <nl> extends BaseCheckTestSupport { <nl> private static final String [ ] ALL _ MESSAGES = { <nl> + " 16 : Missing a Javadoc comment . " , <nl> + " 17 : Missing a Javadoc comment . " , <nl> + " 19 : Missing a Javadoc comment . " , <nl> " 22 : 45 : Name ' I ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> " 24 : 17 : Name ' J ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> " 25 : 17 : Name ' K ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> @ @ - 53 , 6 + 58 , 15 @ @ public class SuppressWarningsFilterTest <nl> " 39 : 17 : More than 7 parameters ( found 8 ) . " , <nl> " 45 : 9 : Catching ' Exception ' is not allowed . " , <nl> " 56 : 9 : Catching ' Exception ' is not allowed . " , <nl> + " 61 : Missing a Javadoc comment . " , <nl> + " 71 : Uncommented main method found . " , <nl> + " 76 : Missing a Javadoc comment . " , <nl> + " 77 : Uncommented main method found . " , <nl> + " 83 : Missing a Javadoc comment . " , <nl> + " 84 : Uncommented main method found . " , <nl> + " 90 : Missing a Javadoc comment . " , <nl> + " 91 : Uncommented main method found . " , <nl> + " 97 : Missing a Javadoc comment . " , <nl> } ; <nl> <nl> @ Override <nl> @ @ - 77 , 6 + 91 , 11 @ @ public class SuppressWarningsFilterTest <nl> " 33 : 30 : Name ' m ' must match pattern ' ^ [ A - Z ] [ A - Z0 - 9 ] * ( _ [ A - Z0 - 9 ] + ) * $ ' . " , <nl> " 39 : 17 : More than 7 parameters ( found 8 ) . " , <nl> " 56 : 9 : Catching ' Exception ' is not allowed . " , <nl> + " 71 : Uncommented main method found . " , <nl> + " 77 : Uncommented main method found . " , <nl> + " 84 : Uncommented main method found . " , <nl> + " 91 : Uncommented main method found . " , <nl> + " 97 : Missing a Javadoc comment . " , <nl> } ; <nl> verifySuppressed ( filterConfig , suppressed ) ; <nl> } <nl> @ @ - 109 , 6 + 128 , 8 @ @ public class SuppressWarningsFilterTest <nl> checksConfig . addChild ( createCheckConfig ( ConstantNameCheck . class ) ) ; <nl> checksConfig . addChild ( createCheckConfig ( ParameterNumberCheck . class ) ) ; <nl> checksConfig . addChild ( createCheckConfig ( IllegalCatchCheck . class ) ) ; <nl> + checksConfig . addChild ( createCheckConfig ( UncommentedMainCheck . class ) ) ; <nl> + checksConfig . addChild ( createCheckConfig ( JavadocTypeCheck . class ) ) ; <nl> checkerConfig . addChild ( checksConfig ) ; <nl> if ( checkConfig ! = null ) { <nl> checkerConfig . addChild ( checkConfig ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / filters / InputSuppressWarningsFilter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / filters / InputSuppressWarningsFilter . java <nl> index 4efd42c . . 57a8cb6 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / filters / InputSuppressWarningsFilter . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / filters / InputSuppressWarningsFilter . java <nl> @ @ - 67 , 4 + 67 , 34 @ @ class InputSuppressWarningsFilter <nl> @ SuppressWarnings ( UNUSED ) <nl> public void annotationUsingStringConstantValue ( ) { <nl> } <nl> + <nl> + @ SuppressWarnings ( " checkstyle : uncommentedmain " ) <nl> + public static void main ( String [ ] args ) { <nl> + <nl> + } <nl> + <nl> + static class TestClass1 { <nl> + @ SuppressWarnings ( " uncommentedmain " ) <nl> + public static void main ( String [ ] args ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + static class TestClass2 { <nl> + @ SuppressWarnings ( " UncommentedMain " ) <nl> + public static void main ( String [ ] args ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + static class TestClass3 { <nl> + @ SuppressWarnings ( " checkstyle : UncommentedMain " ) <nl> + public static void main ( String [ ] args ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + @ SuppressWarnings ( " checkstyle : javadoctype " ) <nl> + public static abstract class Task { <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> index 45bdc07 . . 779b8fc 100755 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java <nl> @ @ - 25 , 24 + 25 , 24 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> - * Checks if unnecessary parentheses are used in a statement or expression . <nl> - * The check will flag the following with warnings . <nl> * < p > <nl> - * < pre > return ( x ) ; / / parens around identifier <nl> + * Checks if unnecessary parentheses are used in a statement or expression . <nl> + * The check will flag the following with warnings : <nl> + * < / p > <nl> + * < pre > <nl> + * return ( x ) ; / / parens around identifier <nl> * return ( x + 1 ) ; / / parens around return value <nl> * int x = ( y / 2 + 1 ) ; / / parens around assignment rhs <nl> * for ( int i = ( 0 ) ; i & lt ; 10 ; i + + ) { / / parens around literal <nl> * t - = ( z + 1 ) ; / / parens around assignment rhs < / pre > <nl> - * < / p > <nl> * < p > <nl> * The check is not " type aware " , that is to say , it can ' t tell if parentheses <nl> * are unnecessary based on the types in an expression . It also doesn ' t know <nl> * about operator precedence and associatvity ; therefore it won ' t catch <nl> * something like <nl> * < / p > <nl> - * < p > <nl> - * < pre > int x = ( a + b ) + c ; < / pre > <nl> - * < / p > <nl> + * < pre > <nl> + * int x = ( a + b ) + c ; < / pre > <nl> * < p > <nl> * In the above case , given that < em > a < / em > , < em > b < / em > , and < em > c < / em > are <nl> * all < code > int < / code > variables , the parentheses around < code > a + b < / code >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 index 50af412 . . 3a8e0d1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 @ @ - 156 , 7 + 156 , 8 @ @ public class SuppressWarningsHolder 
 final boolean afterStart = 
 entry . getFirstLine ( ) < line 
 | | entry . getFirstLine ( ) = = line 
 - & & entry . getFirstColumn ( ) < = column ; 
 + & & ( entry . getFirstColumn ( ) < = column 
 + | | column = = 0 ) ; 
 final boolean beforeEnd = 
 entry . getLastLine ( ) > line 
 | | entry . getLastLine ( ) = = line & & entry 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java 
 index 91b4bca . . 04357ef 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java 
 @ @ - 35 , 7 + 35 , 9 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . checks . SuppressWarningsHolder ; 
 + import com . puppycrawl . tools . checkstyle . checks . UncommentedMainCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . coding . IllegalCatchCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTypeCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . naming . MemberNameCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . sizes . ParameterNumberCheck ; 
 @ @ - 43 , 6 + 45 , 9 @ @ import com . puppycrawl . tools . checkstyle . checks . sizes . ParameterNumberCheck ; 
 public class SuppressWarningsFilterTest 
 extends BaseCheckTestSupport { 
 private static final String [ ] ALL _ MESSAGES = { 
 + " 16 : Missing a Javadoc comment . " , 
 + " 17 : Missing a Javadoc comment . " , 
 + " 19 : Missing a Javadoc comment . " , 
 " 22 : 45 : Name ' I ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 " 24 : 17 : Name ' J ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 " 25 : 17 : Name ' K ' must match pattern ' ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 @ @ - 53 , 6 + 58 , 15 @ @ public class SuppressWarningsFilterTest 
 " 39 : 17 : More than 7 parameters ( found 8 ) . " , 
 " 45 : 9 : Catching ' Exception ' is not allowed . " , 
 " 56 : 9 : Catching ' Exception ' is not allowed . " , 
 + " 61 : Missing a Javadoc comment . " , 
 + " 71 : Uncommented main method found . " , 
 + " 76 : Missing a Javadoc comment . " , 
 + " 77 : Uncommented main method found . " , 
 + " 83 : Missing a Javadoc comment . " , 
 + " 84 : Uncommented main method found . " , 
 + " 90 : Missing a Javadoc comment . " , 
 + " 91 : Uncommented main method found . " , 
 + " 97 : Missing a Javadoc comment . " , 
 } ; 
 
 @ Override 
 @ @ - 77 , 6 + 91 , 11 @ @ public class SuppressWarningsFilterTest 
 " 33 : 30 : Name ' m ' must match pattern ' ^ [ A - Z ] [ A - Z0 - 9 ] * ( _ [ A - Z0 - 9 ] + ) * $ ' . " , 
 " 39 : 17 : More than 7 parameters ( found 8 ) . " , 
 " 56 : 9 : Catching ' Exception ' is not allowed . " , 
 + " 71 : Uncommented main method found . " , 
 + " 77 : Uncommented main method found . " , 
 + " 84 : Uncommented main method found . " , 
 + " 91 : Uncommented main method found . " , 
 + " 97 : Missing a Javadoc comment . " , 
 } ; 
 verifySuppressed ( filterConfig , suppressed ) ; 
 } 
 @ @ - 109 , 6 + 128 , 8 @ @ public class SuppressWarningsFilterTest 
 checksConfig . addChild ( createCheckConfig ( ConstantNameCheck . class ) ) ; 
 checksConfig . addChild ( createCheckConfig ( ParameterNumberCheck . class ) ) ; 
 checksConfig . addChild ( createCheckConfig ( IllegalCatchCheck . class ) ) ; 
 + checksConfig . addChild ( createCheckConfig ( UncommentedMainCheck . class ) ) ; 
 + checksConfig . addChild ( createCheckConfig ( JavadocTypeCheck . class ) ) ; 
 checkerConfig . addChild ( checksConfig ) ; 
 if ( checkConfig ! = null ) { 
 checkerConfig . addChild ( checkConfig ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / filters / InputSuppressWarningsFilter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / filters / InputSuppressWarningsFilter . java 
 index 4efd42c . . 57a8cb6 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / filters / InputSuppressWarningsFilter . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / filters / InputSuppressWarningsFilter . java 
 @ @ - 67 , 4 + 67 , 34 @ @ class InputSuppressWarningsFilter 
 @ SuppressWarnings ( UNUSED ) 
 public void annotationUsingStringConstantValue ( ) { 
 } 
 + 
 + @ SuppressWarnings ( " checkstyle : uncommentedmain " ) 
 + public static void main ( String [ ] args ) { 
 + 
 + } 
 + 
 + static class TestClass1 { 
 + @ SuppressWarnings ( " uncommentedmain " ) 
 + public static void main ( String [ ] args ) { 
 + 
 + } 
 + } 
 + 
 + static class TestClass2 { 
 + @ SuppressWarnings ( " UncommentedMain " ) 
 + public static void main ( String [ ] args ) { 
 + 
 + } 
 + } 
 + 
 + static class TestClass3 { 
 + @ SuppressWarnings ( " checkstyle : UncommentedMain " ) 
 + public static void main ( String [ ] args ) { 
 + 
 + } 
 + } 
 + 
 + @ SuppressWarnings ( " checkstyle : javadoctype " ) 
 + public static abstract class Task { 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 index 45bdc07 . . 779b8fc 100755 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheck . java 
 @ @ - 25 , 24 + 25 , 24 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 - * Checks if unnecessary parentheses are used in a statement or expression . 
 - * The check will flag the following with warnings . 
 * < p > 
 - * < pre > return ( x ) ; / / parens around identifier 
 + * Checks if unnecessary parentheses are used in a statement or expression . 
 + * The check will flag the following with warnings : 
 + * < / p > 
 + * < pre > 
 + * return ( x ) ; / / parens around identifier 
 * return ( x + 1 ) ; / / parens around return value 
 * int x = ( y / 2 + 1 ) ; / / parens around assignment rhs 
 * for ( int i = ( 0 ) ; i & lt ; 10 ; i + + ) { / / parens around literal 
 * t - = ( z + 1 ) ; / / parens around assignment rhs < / pre > 
 - * < / p > 
 * < p > 
 * The check is not " type aware " , that is to say , it can ' t tell if parentheses 
 * are unnecessary based on the types in an expression . It also doesn ' t know 
 * about operator precedence and associatvity ; therefore it won ' t catch 
 * something like 
 * < / p > 
 - * < p > 
 - * < pre > int x = ( a + b ) + c ; < / pre > 
 - * < / p > 
 + * < pre > 
 + * int x = ( a + b ) + c ; < / pre > 
 * < p > 
 * In the above case , given that < em > a < / em > , < em > b < / em > , and < em > c < / em > are 
 * all < code > int < / code > variables , the parentheses around < code > a + b < / code >
