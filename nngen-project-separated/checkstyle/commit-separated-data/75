BLEU SCORE: 0.02083728995486933

TEST MSG: Issue # 6474 : disable external dtd load by default
GENERATED MSG: Improve ConfigurationLoader to use a InputSource . Thanks to Martin von Gagern for patch # 2782627 .

TEST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 1ff824a . . 3ad8ae3 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 96 , 13 + 96 , 13 @ @ <nl> < / rule > <nl> < rule ref = " category / java / codestyle . xml / ClassNamingConventions " > <nl> < properties > <nl> - < ! - - Definitions and XmlLoader . FeaturesForVerySecureJavaInstallations aren ' t utility classes . <nl> + < ! - - Definitions and XmlLoader . LoadExternalDtdFeatureProvider aren ' t utility classes . <nl> JavadocTokenTypes and TokenTypes aren ' t utility classes . <nl> They are token definition classes . Also , they are part of the API . - - > <nl> < property name = " violationSuppressXPath " <nl> value = " / / ClassOrInterfaceDeclaration [ @ Image = ' Definitions ' <nl> or @ Image = ' JavadocTokenTypes ' or @ Image = ' TokenTypes ' <nl> - or @ Image = ' FeaturesForVerySecureJavaInstallations ' ] " / > <nl> + or @ Image = ' LoadExternalDtdFeatureProvider ' ] " / > <nl> < / properties > <nl> < / rule > <nl> < rule ref = " category / java / codestyle . xml / ConfusingTernary " > <nl> diff - - git a / pom . xml b / pom . xml <nl> index c1bcbac . . 039e39f 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2678 , 12 + 2678 , 12 @ @ <nl> < / targetTests > <nl> < excludedMethods > <nl> < ! - - cause of https : / / github . com / checkstyle / checkstyle / issues / 3605 - - > <nl> - < param > addFeaturesForVerySecureJavaInstallations < / param > <nl> + < param > setFeaturesBySystemProperty < / param > <nl> < / excludedMethods > <nl> < avoidCallsTo > <nl> < ! - - cause of https : / / github . com / checkstyle / checkstyle / issues / 3605 - - > <nl> < avoidCallsTo > <nl> - com . puppycrawl . tools . checkstyle . XmlLoader $ FeaturesForVerySecureJavaInstallations <nl> + com . puppycrawl . tools . checkstyle . XmlLoader $ LoadExternalDtdFeatureProvider <nl> < / avoidCallsTo > <nl> < / avoidCallsTo > <nl> < coverageThreshold > 100 < / coverageThreshold > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XmlLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / XmlLoader . java <nl> index 792a9da . . df664a9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XmlLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XmlLoader . java <nl> @ @ - 65 , 7 + 65 , 7 @ @ public class XmlLoader <nl> throws SAXException , ParserConfigurationException { <nl> this . publicIdToResourceNameMap = new HashMap < > ( publicIdToResourceNameMap ) ; <nl> final SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; <nl> - FeaturesForVerySecureJavaInstallations . addFeaturesForVerySecureJavaInstallations ( factory ) ; <nl> + LoadExternalDtdFeatureProvider . setFeaturesBySystemProperty ( factory ) ; <nl> factory . setValidating ( true ) ; <nl> parser = factory . newSAXParser ( ) . getXMLReader ( ) ; <nl> parser . setContentHandler ( this ) ; <nl> @ @ - 113 , 7 + 113 , 10 @ @ public class XmlLoader <nl> * Used for setting specific for secure java installations features to SAXParserFactory . <nl> * Pulled out as a separate class in order to suppress Pitest mutations . <nl> * / <nl> - public static final class FeaturesForVerySecureJavaInstallations { <nl> + public static final class LoadExternalDtdFeatureProvider { <nl> + <nl> + / * * System property name to enable external DTD load . * / <nl> + public static final String ENABLE _ EXTERNAL _ DTD _ LOAD = " checkstyle . enableExternalDtdLoad " ; <nl> <nl> / * * Feature that enables loading external DTD when loading XML files . * / <nl> private static final String LOAD _ EXTERNAL _ DTD = <nl> @ @ - 123 , 20 + 126 , 26 @ @ public class XmlLoader <nl> " http : / / xml . org / sax / features / external - general - entities " ; <nl> <nl> / * * Stop instances being created . * * / <nl> - private FeaturesForVerySecureJavaInstallations ( ) { <nl> + private LoadExternalDtdFeatureProvider ( ) { <nl> } <nl> <nl> / * * <nl> * Configures SAXParserFactory with features required <nl> - * for execution on very secured environments . <nl> + * to use external DTD file loading , this is not activated by default to no allow <nl> + * usage of schema files that checkstyle do not know <nl> + * it is even security problem to allow files from outside . <nl> * @ param factory factory to be configured with special features <nl> * @ throws SAXException if an error occurs <nl> * @ throws ParserConfigurationException if an error occurs <nl> * / <nl> - public static void addFeaturesForVerySecureJavaInstallations ( SAXParserFactory factory ) <nl> + public static void setFeaturesBySystemProperty ( SAXParserFactory factory ) <nl> throws SAXException , ParserConfigurationException { <nl> - factory . setFeature ( LOAD _ EXTERNAL _ DTD , true ) ; <nl> - factory . setFeature ( EXTERNAL _ GENERAL _ ENTITIES , true ) ; <nl> + <nl> + final boolean enableExternalDtdLoad = Boolean . valueOf ( <nl> + System . getProperty ( ENABLE _ EXTERNAL _ DTD _ LOAD , " false " ) ) ; <nl> + <nl> + factory . setFeature ( LOAD _ EXTERNAL _ DTD , enableExternalDtdLoad ) ; <nl> + factory . setFeature ( EXTERNAL _ GENERAL _ ENTITIES , enableExternalDtdLoad ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index 3b2d208 . . 50dde99 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 406 , 6 + 406 , 9 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { <nl> final Properties props = new Properties ( ) ; <nl> props . setProperty ( " checkstyle . basedir " , " basedir " ) ; <nl> <nl> + System . setProperty ( <nl> + XmlLoader . LoadExternalDtdFeatureProvider . ENABLE _ EXTERNAL _ DTD _ LOAD , " true " ) ; <nl> + <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) loadConfiguration ( <nl> " InputConfigurationLoaderExternalEntity . xml " , props ) ; <nl> @ @ - 421 , 6 + 424 , 9 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { <nl> final Properties props = new Properties ( ) ; <nl> props . setProperty ( " checkstyle . basedir " , " basedir " ) ; <nl> <nl> + System . setProperty ( <nl> + XmlLoader . LoadExternalDtdFeatureProvider . ENABLE _ EXTERNAL _ DTD _ LOAD , " true " ) ; <nl> + <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) loadConfiguration ( <nl> " subdir / InputConfigurationLoaderExternalEntitySubDir . xml " , props ) ; <nl> @ @ - 436 , 6 + 442 , 9 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { <nl> final Properties props = new Properties ( ) ; <nl> props . setProperty ( " checkstyle . basedir " , " basedir " ) ; <nl> <nl> + System . setProperty ( <nl> + XmlLoader . LoadExternalDtdFeatureProvider . ENABLE _ EXTERNAL _ DTD _ LOAD , " true " ) ; <nl> + <nl> final File file = new File ( <nl> getPath ( " subdir / InputConfigurationLoaderExternalEntitySubDir . xml " ) ) ; <nl> final DefaultConfiguration config = <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java <nl> index 8ee873f . . 026d985 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java <nl> @ @ - 47 , 7 + 47 , 7 @ @ public class XmlLoaderTest { <nl> @ Test <nl> public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { <nl> assertTrue ( " Constructor is not private " , isUtilsClassHasPrivateConstructor ( <nl> - XmlLoader . FeaturesForVerySecureJavaInstallations . class , true ) ) ; <nl> + XmlLoader . LoadExternalDtdFeatureProvider . class , true ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / xdocs / config _ reporting . xml b / src / xdocs / config _ reporting . xml <nl> index a2c2584 . . c5f868a 100644 <nl> - - - a / src / xdocs / config _ reporting . xml <nl> + + + b / src / xdocs / config _ reporting . xml <nl> @ @ - 69 , 5 + 69 , 16 @ @ <nl> to an empty string . <nl> < / p > <nl> < / section > <nl> + <nl> + < section name = " Enable External DTD load " > <nl> + < p > <nl> + The property < code > checkstyle . enableExternalDtdLoad < / code > <nl> + defines ability use custom DTD files inconfig and load them from some location . <nl> + The property type <nl> + is < a href = " property _ types . html # boolean " > boolean < / a > and defaults <nl> + to < code > false < / code > . <nl> + < / p > <nl> + < / section > <nl> + <nl> < / body > <nl> < / document >
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java <nl> new file mode 100644 <nl> index 0000000 . . f56f6c1 <nl> - - - / dev / null <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java <nl> @ @ - 0 , 0 + 1 , 126 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2008 Oliver Burn <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . regexp ; <nl> + <nl> + import com . google . common . collect . Lists ; <nl> + import java . util . List ; <nl> + import java . util . regex . Matcher ; <nl> + <nl> + / * * <nl> + * A detector that matches across multiple lines . <nl> + * @ author oliver <nl> + * / <nl> + class MultilineDetector <nl> + { <nl> + / * * The detection options to use . * / <nl> + private final DetectorOptions mOptions ; <nl> + / * * Tracks the number of matches . * / <nl> + private int mCurrentMatches ; <nl> + / * * Relates StringBuffer positions to line # and column * / <nl> + private final List < Integer [ ] > mCharacters = Lists . newArrayList ( ) ; <nl> + / * * The mMatcher * / <nl> + private Matcher mMatcher ; <nl> + <nl> + / * * <nl> + * Creates an instance . <nl> + * @ param aOptions the options to use . <nl> + * / <nl> + public MultilineDetector ( DetectorOptions aOptions ) <nl> + { <nl> + mOptions = aOptions ; <nl> + } <nl> + <nl> + / * * <nl> + * Processes a set of lines looking for matches . <nl> + * @ param aLines the lines to process . <nl> + * / <nl> + public void processLines ( List < String > aLines ) <nl> + { <nl> + resetState ( ) ; <nl> + final StringBuffer sb = new StringBuffer ( ) ; <nl> + int lineno = 1 ; <nl> + for ( String line : aLines ) { <nl> + sb . append ( line ) ; <nl> + sb . append ( ' \ n ' ) ; <nl> + for ( int j = 0 ; j < ( line . length ( ) + 1 ) ; j + + ) { <nl> + mCharacters . add ( new Integer [ ] { lineno , j } ) ; <nl> + } <nl> + lineno + + ; <nl> + } <nl> + mMatcher = mOptions . getPattern ( ) . matcher ( sb . toString ( ) ) ; <nl> + findMatch ( ) ; <nl> + finish ( ) ; <nl> + } <nl> + <nl> + / * * recursive method that finds the matches . * / <nl> + private void findMatch ( ) <nl> + { <nl> + final boolean foundMatch = mMatcher . find ( ) ; <nl> + if ( ! foundMatch ) { <nl> + return ; <nl> + } <nl> + <nl> + final int startLine = ( mCharacters . get ( mMatcher . start ( ) ) ) [ 0 ] . intValue ( ) ; <nl> + final int startColumn = ( mCharacters . get ( mMatcher . start ( ) ) ) [ 1 ] <nl> + . intValue ( ) ; <nl> + final int endLine = ( mCharacters . get ( mMatcher . end ( ) - 1 ) ) [ 0 ] . intValue ( ) ; <nl> + final int endColumn = ( mCharacters . get ( mMatcher . end ( ) - 1 ) ) [ 1 ] <nl> + . intValue ( ) ; <nl> + <nl> + <nl> + if ( ! mOptions . getSuppressor ( ) . shouldSuppress ( startLine , startColumn , <nl> + endLine , endColumn ) ) <nl> + { <nl> + mCurrentMatches + + ; <nl> + if ( mCurrentMatches > mOptions . getMaximum ( ) ) { <nl> + if ( " " . equals ( mOptions . getMessage ( ) ) ) { <nl> + mOptions . getReporter ( ) . log ( startLine , " regexp . exceeded " , <nl> + mMatcher . pattern ( ) . toString ( ) ) ; <nl> + } <nl> + else { <nl> + mOptions . getReporter ( ) <nl> + . log ( startLine , mOptions . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + findMatch ( ) ; <nl> + } <nl> + / * * Perform processing at the end of a set of lines . * / <nl> + private void finish ( ) <nl> + { <nl> + if ( mCurrentMatches < mOptions . getMinimum ( ) ) { <nl> + if ( " " . equals ( mOptions . getMessage ( ) ) ) { <nl> + mOptions . getReporter ( ) . log ( 0 , " regexp . minimum " , <nl> + mOptions . getMinimum ( ) , mOptions . getFormat ( ) ) ; <nl> + } <nl> + else { <nl> + mOptions . getReporter ( ) . log ( 0 , mOptions . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Reset the state of the detector . <nl> + * / <nl> + private void resetState ( ) <nl> + { <nl> + mCurrentMatches = 0 ; <nl> + mCharacters . clear ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 6596297 <nl> - - - / dev / null <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java <nl> @ @ - 0 , 0 + 1 , 96 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2008 Oliver Burn <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . regexp ; <nl> + <nl> + import java . util . regex . Pattern ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> + import java . io . File ; <nl> + import java . util . List ; <nl> + <nl> + / * * <nl> + * Implementation of a check that looks for a single line in any file type . <nl> + * @ author Oliver Burn <nl> + * / <nl> + public class RegexpMultilineCheck extends AbstractFileSetCheck <nl> + { <nl> + / * * The detection options to use . * / <nl> + private DetectorOptions mOptions = new DetectorOptions ( Pattern . MULTILINE , <nl> + this ) ; <nl> + / * * The detector to use . * / <nl> + private MultilineDetector mDetector ; <nl> + <nl> + @ Override <nl> + public void beginProcessing ( String aCharset ) <nl> + { <nl> + super . beginProcessing ( aCharset ) ; <nl> + mDetector = new MultilineDetector ( mOptions ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void processFiltered ( File aFile , List < String > aLines ) <nl> + { <nl> + mDetector . processLines ( aLines ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the format of the regular expression to match . <nl> + * @ param aFormat the format of the regular expression to match . <nl> + * / <nl> + public void setFormat ( String aFormat ) <nl> + { <nl> + mOptions . setFormat ( aFormat ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the message to report for a match . <nl> + * @ param aMessage the message to report for a match . <nl> + * / <nl> + public void setMessage ( String aMessage ) <nl> + { <nl> + mOptions . setMessage ( aMessage ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the minimum number of matches required per file . <nl> + * @ param aMinimum the minimum number of matches required per file . <nl> + * / <nl> + public void setMinimum ( int aMinimum ) <nl> + { <nl> + mOptions . setMinimum ( aMinimum ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the maximum number of matches required per file . <nl> + * @ param aMaximum the maximum number of matches required per file . <nl> + * / <nl> + public void setMaximum ( int aMaximum ) <nl> + { <nl> + mOptions . setMaximum ( aMaximum ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Set whether to ignore case when matching . <nl> + * @ param aIgnore whether to ignore case when matching . <nl> + * / <nl> + public void setIgnoreCase ( boolean aIgnore ) <nl> + { <nl> + mOptions . setIgnoreCase ( aIgnore ) ; <nl> + } <nl> + } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / AllRegexpTests . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / AllRegexpTests . java <nl> index bfffcc0 . . 03ff973 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / AllRegexpTests . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / AllRegexpTests . java <nl> @ @ - 5 , 7 + 5 , 7 @ @ import org . junit . runners . Suite ; <nl> <nl> @ RunWith ( Suite . class ) <nl> @ Suite . SuiteClasses ( { RegexpSinglelineCheckTest . class , <nl> - RegexpSinglelineJavaCheckTest . class } ) <nl> + RegexpSinglelineJavaCheckTest . class , RegexpMultilineCheckTest . class } ) <nl> public class AllRegexpTests <nl> { <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> new file mode 100644 <nl> index 0000000 . . 8ac0eea <nl> - - - / dev / null <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java <nl> @ @ - 0 , 0 + 1 , 83 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . regexp ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . RegexpCheck ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import org . junit . Before ; <nl> + import org . junit . Test ; <nl> + <nl> + public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport <nl> + { <nl> + private DefaultConfiguration mCheckConfig ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) <nl> + { <nl> + mCheckConfig = createCheckConfig ( RegexpMultilineCheck . class ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIt ( ) <nl> + throws Exception <nl> + { <nl> + final String illegal = " System \ \ . ( out ) | ( err ) \ \ . print ( ln ) ? \ \ ( " ; <nl> + mCheckConfig . addAttribute ( " format " , illegal ) ; <nl> + final String [ ] expected = { <nl> + " 69 : Line matches the illegal pattern ' " + illegal + " ' . " <nl> + } ; <nl> + verify ( mCheckConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMessageProperty ( ) <nl> + throws Exception <nl> + { <nl> + final String illegal = " System \ \ . ( out ) | ( err ) \ \ . print ( ln ) ? \ \ ( " ; <nl> + final String message = " Bad line : ( " ; <nl> + mCheckConfig . addAttribute ( " format " , illegal ) ; <nl> + mCheckConfig . addAttribute ( " message " , message ) ; <nl> + final String [ ] expected = { <nl> + " 69 : " + message , <nl> + } ; <nl> + verify ( mCheckConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIgnoreCaseTrue ( ) <nl> + throws Exception <nl> + { <nl> + final String illegal = " SYSTEM \ \ . ( OUT ) | ( ERR ) \ \ . PRINT ( LN ) ? \ \ ( " ; <nl> + mCheckConfig . addAttribute ( " format " , illegal ) ; <nl> + mCheckConfig . addAttribute ( " ignoreCase " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 69 : Line matches the illegal pattern ' " + illegal + " ' . " <nl> + } ; <nl> + verify ( mCheckConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIgnoreCaseFalse ( ) <nl> + throws Exception <nl> + { <nl> + final String illegal = " SYSTEM \ \ . ( OUT ) | ( ERR ) \ \ . PRINT ( LN ) ? \ \ ( " ; <nl> + mCheckConfig . addAttribute ( " format " , illegal ) ; <nl> + mCheckConfig . addAttribute ( " ignoreCase " , " false " ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( mCheckConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIllegalFailBelowErrorLimit ( ) <nl> + throws Exception <nl> + { <nl> + final String illegal = " ^ import " ; <nl> + mCheckConfig . addAttribute ( " format " , illegal ) ; <nl> + final String [ ] expected = { <nl> + " 7 : Line matches the illegal pattern ' " + illegal + " ' . " , <nl> + " 8 : Line matches the illegal pattern ' " + illegal + " ' . " , <nl> + " 9 : Line matches the illegal pattern ' " + illegal + " ' . " <nl> + } ; <nl> + verify ( mCheckConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 1ff824a . . 3ad8ae3 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 96 , 13 + 96 , 13 @ @ 
 < / rule > 
 < rule ref = " category / java / codestyle . xml / ClassNamingConventions " > 
 < properties > 
 - < ! - - Definitions and XmlLoader . FeaturesForVerySecureJavaInstallations aren ' t utility classes . 
 + < ! - - Definitions and XmlLoader . LoadExternalDtdFeatureProvider aren ' t utility classes . 
 JavadocTokenTypes and TokenTypes aren ' t utility classes . 
 They are token definition classes . Also , they are part of the API . - - > 
 < property name = " violationSuppressXPath " 
 value = " / / ClassOrInterfaceDeclaration [ @ Image = ' Definitions ' 
 or @ Image = ' JavadocTokenTypes ' or @ Image = ' TokenTypes ' 
 - or @ Image = ' FeaturesForVerySecureJavaInstallations ' ] " / > 
 + or @ Image = ' LoadExternalDtdFeatureProvider ' ] " / > 
 < / properties > 
 < / rule > 
 < rule ref = " category / java / codestyle . xml / ConfusingTernary " > 
 diff - - git a / pom . xml b / pom . xml 
 index c1bcbac . . 039e39f 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2678 , 12 + 2678 , 12 @ @ 
 < / targetTests > 
 < excludedMethods > 
 < ! - - cause of https : / / github . com / checkstyle / checkstyle / issues / 3605 - - > 
 - < param > addFeaturesForVerySecureJavaInstallations < / param > 
 + < param > setFeaturesBySystemProperty < / param > 
 < / excludedMethods > 
 < avoidCallsTo > 
 < ! - - cause of https : / / github . com / checkstyle / checkstyle / issues / 3605 - - > 
 < avoidCallsTo > 
 - com . puppycrawl . tools . checkstyle . XmlLoader $ FeaturesForVerySecureJavaInstallations 
 + com . puppycrawl . tools . checkstyle . XmlLoader $ LoadExternalDtdFeatureProvider 
 < / avoidCallsTo > 
 < / avoidCallsTo > 
 < coverageThreshold > 100 < / coverageThreshold > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XmlLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / XmlLoader . java 
 index 792a9da . . df664a9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XmlLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XmlLoader . java 
 @ @ - 65 , 7 + 65 , 7 @ @ public class XmlLoader 
 throws SAXException , ParserConfigurationException { 
 this . publicIdToResourceNameMap = new HashMap < > ( publicIdToResourceNameMap ) ; 
 final SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; 
 - FeaturesForVerySecureJavaInstallations . addFeaturesForVerySecureJavaInstallations ( factory ) ; 
 + LoadExternalDtdFeatureProvider . setFeaturesBySystemProperty ( factory ) ; 
 factory . setValidating ( true ) ; 
 parser = factory . newSAXParser ( ) . getXMLReader ( ) ; 
 parser . setContentHandler ( this ) ; 
 @ @ - 113 , 7 + 113 , 10 @ @ public class XmlLoader 
 * Used for setting specific for secure java installations features to SAXParserFactory . 
 * Pulled out as a separate class in order to suppress Pitest mutations . 
 * / 
 - public static final class FeaturesForVerySecureJavaInstallations { 
 + public static final class LoadExternalDtdFeatureProvider { 
 + 
 + / * * System property name to enable external DTD load . * / 
 + public static final String ENABLE _ EXTERNAL _ DTD _ LOAD = " checkstyle . enableExternalDtdLoad " ; 
 
 / * * Feature that enables loading external DTD when loading XML files . * / 
 private static final String LOAD _ EXTERNAL _ DTD = 
 @ @ - 123 , 20 + 126 , 26 @ @ public class XmlLoader 
 " http : / / xml . org / sax / features / external - general - entities " ; 
 
 / * * Stop instances being created . * * / 
 - private FeaturesForVerySecureJavaInstallations ( ) { 
 + private LoadExternalDtdFeatureProvider ( ) { 
 } 
 
 / * * 
 * Configures SAXParserFactory with features required 
 - * for execution on very secured environments . 
 + * to use external DTD file loading , this is not activated by default to no allow 
 + * usage of schema files that checkstyle do not know 
 + * it is even security problem to allow files from outside . 
 * @ param factory factory to be configured with special features 
 * @ throws SAXException if an error occurs 
 * @ throws ParserConfigurationException if an error occurs 
 * / 
 - public static void addFeaturesForVerySecureJavaInstallations ( SAXParserFactory factory ) 
 + public static void setFeaturesBySystemProperty ( SAXParserFactory factory ) 
 throws SAXException , ParserConfigurationException { 
 - factory . setFeature ( LOAD _ EXTERNAL _ DTD , true ) ; 
 - factory . setFeature ( EXTERNAL _ GENERAL _ ENTITIES , true ) ; 
 + 
 + final boolean enableExternalDtdLoad = Boolean . valueOf ( 
 + System . getProperty ( ENABLE _ EXTERNAL _ DTD _ LOAD , " false " ) ) ; 
 + 
 + factory . setFeature ( LOAD _ EXTERNAL _ DTD , enableExternalDtdLoad ) ; 
 + factory . setFeature ( EXTERNAL _ GENERAL _ ENTITIES , enableExternalDtdLoad ) ; 
 } 
 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index 3b2d208 . . 50dde99 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 406 , 6 + 406 , 9 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { 
 final Properties props = new Properties ( ) ; 
 props . setProperty ( " checkstyle . basedir " , " basedir " ) ; 
 
 + System . setProperty ( 
 + XmlLoader . LoadExternalDtdFeatureProvider . ENABLE _ EXTERNAL _ DTD _ LOAD , " true " ) ; 
 + 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) loadConfiguration ( 
 " InputConfigurationLoaderExternalEntity . xml " , props ) ; 
 @ @ - 421 , 6 + 424 , 9 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { 
 final Properties props = new Properties ( ) ; 
 props . setProperty ( " checkstyle . basedir " , " basedir " ) ; 
 
 + System . setProperty ( 
 + XmlLoader . LoadExternalDtdFeatureProvider . ENABLE _ EXTERNAL _ DTD _ LOAD , " true " ) ; 
 + 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) loadConfiguration ( 
 " subdir / InputConfigurationLoaderExternalEntitySubDir . xml " , props ) ; 
 @ @ - 436 , 6 + 442 , 9 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { 
 final Properties props = new Properties ( ) ; 
 props . setProperty ( " checkstyle . basedir " , " basedir " ) ; 
 
 + System . setProperty ( 
 + XmlLoader . LoadExternalDtdFeatureProvider . ENABLE _ EXTERNAL _ DTD _ LOAD , " true " ) ; 
 + 
 final File file = new File ( 
 getPath ( " subdir / InputConfigurationLoaderExternalEntitySubDir . xml " ) ) ; 
 final DefaultConfiguration config = 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java 
 index 8ee873f . . 026d985 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XmlLoaderTest . java 
 @ @ - 47 , 7 + 47 , 7 @ @ public class XmlLoaderTest { 
 @ Test 
 public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { 
 assertTrue ( " Constructor is not private " , isUtilsClassHasPrivateConstructor ( 
 - XmlLoader . FeaturesForVerySecureJavaInstallations . class , true ) ) ; 
 + XmlLoader . LoadExternalDtdFeatureProvider . class , true ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / xdocs / config _ reporting . xml b / src / xdocs / config _ reporting . xml 
 index a2c2584 . . c5f868a 100644 
 - - - a / src / xdocs / config _ reporting . xml 
 + + + b / src / xdocs / config _ reporting . xml 
 @ @ - 69 , 5 + 69 , 16 @ @ 
 to an empty string . 
 < / p > 
 < / section > 
 + 
 + < section name = " Enable External DTD load " > 
 + < p > 
 + The property < code > checkstyle . enableExternalDtdLoad < / code > 
 + defines ability use custom DTD files inconfig and load them from some location . 
 + The property type 
 + is < a href = " property _ types . html # boolean " > boolean < / a > and defaults 
 + to < code > false < / code > . 
 + < / p > 
 + < / section > 
 + 
 < / body > 
 < / document >

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java 
 new file mode 100644 
 index 0000000 . . f56f6c1 
 - - - / dev / null 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / regexp / MultilineDetector . java 
 @ @ - 0 , 0 + 1 , 126 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2008 Oliver Burn 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . regexp ; 
 + 
 + import com . google . common . collect . Lists ; 
 + import java . util . List ; 
 + import java . util . regex . Matcher ; 
 + 
 + / * * 
 + * A detector that matches across multiple lines . 
 + * @ author oliver 
 + * / 
 + class MultilineDetector 
 + { 
 + / * * The detection options to use . * / 
 + private final DetectorOptions mOptions ; 
 + / * * Tracks the number of matches . * / 
 + private int mCurrentMatches ; 
 + / * * Relates StringBuffer positions to line # and column * / 
 + private final List < Integer [ ] > mCharacters = Lists . newArrayList ( ) ; 
 + / * * The mMatcher * / 
 + private Matcher mMatcher ; 
 + 
 + / * * 
 + * Creates an instance . 
 + * @ param aOptions the options to use . 
 + * / 
 + public MultilineDetector ( DetectorOptions aOptions ) 
 + { 
 + mOptions = aOptions ; 
 + } 
 + 
 + / * * 
 + * Processes a set of lines looking for matches . 
 + * @ param aLines the lines to process . 
 + * / 
 + public void processLines ( List < String > aLines ) 
 + { 
 + resetState ( ) ; 
 + final StringBuffer sb = new StringBuffer ( ) ; 
 + int lineno = 1 ; 
 + for ( String line : aLines ) { 
 + sb . append ( line ) ; 
 + sb . append ( ' \ n ' ) ; 
 + for ( int j = 0 ; j < ( line . length ( ) + 1 ) ; j + + ) { 
 + mCharacters . add ( new Integer [ ] { lineno , j } ) ; 
 + } 
 + lineno + + ; 
 + } 
 + mMatcher = mOptions . getPattern ( ) . matcher ( sb . toString ( ) ) ; 
 + findMatch ( ) ; 
 + finish ( ) ; 
 + } 
 + 
 + / * * recursive method that finds the matches . * / 
 + private void findMatch ( ) 
 + { 
 + final boolean foundMatch = mMatcher . find ( ) ; 
 + if ( ! foundMatch ) { 
 + return ; 
 + } 
 + 
 + final int startLine = ( mCharacters . get ( mMatcher . start ( ) ) ) [ 0 ] . intValue ( ) ; 
 + final int startColumn = ( mCharacters . get ( mMatcher . start ( ) ) ) [ 1 ] 
 + . intValue ( ) ; 
 + final int endLine = ( mCharacters . get ( mMatcher . end ( ) - 1 ) ) [ 0 ] . intValue ( ) ; 
 + final int endColumn = ( mCharacters . get ( mMatcher . end ( ) - 1 ) ) [ 1 ] 
 + . intValue ( ) ; 
 + 
 + 
 + if ( ! mOptions . getSuppressor ( ) . shouldSuppress ( startLine , startColumn , 
 + endLine , endColumn ) ) 
 + { 
 + mCurrentMatches + + ; 
 + if ( mCurrentMatches > mOptions . getMaximum ( ) ) { 
 + if ( " " . equals ( mOptions . getMessage ( ) ) ) { 
 + mOptions . getReporter ( ) . log ( startLine , " regexp . exceeded " , 
 + mMatcher . pattern ( ) . toString ( ) ) ; 
 + } 
 + else { 
 + mOptions . getReporter ( ) 
 + . log ( startLine , mOptions . getMessage ( ) ) ; 
 + } 
 + } 
 + } 
 + findMatch ( ) ; 
 + } 
 + / * * Perform processing at the end of a set of lines . * / 
 + private void finish ( ) 
 + { 
 + if ( mCurrentMatches < mOptions . getMinimum ( ) ) { 
 + if ( " " . equals ( mOptions . getMessage ( ) ) ) { 
 + mOptions . getReporter ( ) . log ( 0 , " regexp . minimum " , 
 + mOptions . getMinimum ( ) , mOptions . getFormat ( ) ) ; 
 + } 
 + else { 
 + mOptions . getReporter ( ) . log ( 0 , mOptions . getMessage ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 + * Reset the state of the detector . 
 + * / 
 + private void resetState ( ) 
 + { 
 + mCurrentMatches = 0 ; 
 + mCharacters . clear ( ) ; 
 + } 
 + } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java 
 new file mode 100644 
 index 0000000 . . 6596297 
 - - - / dev / null 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java 
 @ @ - 0 , 0 + 1 , 96 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2008 Oliver Burn 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . regexp ; 
 + 
 + import java . util . regex . Pattern ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 + import java . io . File ; 
 + import java . util . List ; 
 + 
 + / * * 
 + * Implementation of a check that looks for a single line in any file type . 
 + * @ author Oliver Burn 
 + * / 
 + public class RegexpMultilineCheck extends AbstractFileSetCheck 
 + { 
 + / * * The detection options to use . * / 
 + private DetectorOptions mOptions = new DetectorOptions ( Pattern . MULTILINE , 
 + this ) ; 
 + / * * The detector to use . * / 
 + private MultilineDetector mDetector ; 
 + 
 + @ Override 
 + public void beginProcessing ( String aCharset ) 
 + { 
 + super . beginProcessing ( aCharset ) ; 
 + mDetector = new MultilineDetector ( mOptions ) ; 
 + } 
 + 
 + @ Override 
 + protected void processFiltered ( File aFile , List < String > aLines ) 
 + { 
 + mDetector . processLines ( aLines ) ; 
 + } 
 + 
 + / * * 
 + * Set the format of the regular expression to match . 
 + * @ param aFormat the format of the regular expression to match . 
 + * / 
 + public void setFormat ( String aFormat ) 
 + { 
 + mOptions . setFormat ( aFormat ) ; 
 + } 
 + 
 + / * * 
 + * Set the message to report for a match . 
 + * @ param aMessage the message to report for a match . 
 + * / 
 + public void setMessage ( String aMessage ) 
 + { 
 + mOptions . setMessage ( aMessage ) ; 
 + } 
 + 
 + / * * 
 + * Set the minimum number of matches required per file . 
 + * @ param aMinimum the minimum number of matches required per file . 
 + * / 
 + public void setMinimum ( int aMinimum ) 
 + { 
 + mOptions . setMinimum ( aMinimum ) ; 
 + } 
 + 
 + / * * 
 + * Set the maximum number of matches required per file . 
 + * @ param aMaximum the maximum number of matches required per file . 
 + * / 
 + public void setMaximum ( int aMaximum ) 
 + { 
 + mOptions . setMaximum ( aMaximum ) ; 
 + } 
 + 
 + / * * 
 + * Set whether to ignore case when matching . 
 + * @ param aIgnore whether to ignore case when matching . 
 + * / 
 + public void setIgnoreCase ( boolean aIgnore ) 
 + { 
 + mOptions . setIgnoreCase ( aIgnore ) ; 
 + } 
 + } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / AllRegexpTests . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / AllRegexpTests . java 
 index bfffcc0 . . 03ff973 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / AllRegexpTests . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / AllRegexpTests . java 
 @ @ - 5 , 7 + 5 , 7 @ @ import org . junit . runners . Suite ; 
 
 @ RunWith ( Suite . class ) 
 @ Suite . SuiteClasses ( { RegexpSinglelineCheckTest . class , 
 - RegexpSinglelineJavaCheckTest . class } ) 
 + RegexpSinglelineJavaCheckTest . class , RegexpMultilineCheckTest . class } ) 
 public class AllRegexpTests 
 { 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 new file mode 100644 
 index 0000000 . . 8ac0eea 
 - - - / dev / null 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheckTest . java 
 @ @ - 0 , 0 + 1 , 83 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . regexp ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . RegexpCheck ; 
 + 
 + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import org . junit . Before ; 
 + import org . junit . Test ; 
 + 
 + public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport 
 + { 
 + private DefaultConfiguration mCheckConfig ; 
 + 
 + @ Before 
 + public void setUp ( ) 
 + { 
 + mCheckConfig = createCheckConfig ( RegexpMultilineCheck . class ) ; 
 + } 
 + 
 + @ Test 
 + public void testIt ( ) 
 + throws Exception 
 + { 
 + final String illegal = " System \ \ . ( out ) | ( err ) \ \ . print ( ln ) ? \ \ ( " ; 
 + mCheckConfig . addAttribute ( " format " , illegal ) ; 
 + final String [ ] expected = { 
 + " 69 : Line matches the illegal pattern ' " + illegal + " ' . " 
 + } ; 
 + verify ( mCheckConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testMessageProperty ( ) 
 + throws Exception 
 + { 
 + final String illegal = " System \ \ . ( out ) | ( err ) \ \ . print ( ln ) ? \ \ ( " ; 
 + final String message = " Bad line : ( " ; 
 + mCheckConfig . addAttribute ( " format " , illegal ) ; 
 + mCheckConfig . addAttribute ( " message " , message ) ; 
 + final String [ ] expected = { 
 + " 69 : " + message , 
 + } ; 
 + verify ( mCheckConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testIgnoreCaseTrue ( ) 
 + throws Exception 
 + { 
 + final String illegal = " SYSTEM \ \ . ( OUT ) | ( ERR ) \ \ . PRINT ( LN ) ? \ \ ( " ; 
 + mCheckConfig . addAttribute ( " format " , illegal ) ; 
 + mCheckConfig . addAttribute ( " ignoreCase " , " true " ) ; 
 + final String [ ] expected = { 
 + " 69 : Line matches the illegal pattern ' " + illegal + " ' . " 
 + } ; 
 + verify ( mCheckConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testIgnoreCaseFalse ( ) 
 + throws Exception 
 + { 
 + final String illegal = " SYSTEM \ \ . ( OUT ) | ( ERR ) \ \ . PRINT ( LN ) ? \ \ ( " ; 
 + mCheckConfig . addAttribute ( " format " , illegal ) ; 
 + mCheckConfig . addAttribute ( " ignoreCase " , " false " ) ; 
 + final String [ ] expected = { } ; 
 + verify ( mCheckConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testIllegalFailBelowErrorLimit ( ) 
 + throws Exception 
 + { 
 + final String illegal = " ^ import " ; 
 + mCheckConfig . addAttribute ( " format " , illegal ) ; 
 + final String [ ] expected = { 
 + " 7 : Line matches the illegal pattern ' " + illegal + " ' . " , 
 + " 8 : Line matches the illegal pattern ' " + illegal + " ' . " , 
 + " 9 : Line matches the illegal pattern ' " + illegal + " ' . " 
 + } ; 
 + verify ( mCheckConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + } 
 + }
