BLEU SCORE: 0.012622239405701922

TEST MSG: Issue # 2807 : FinalLocalVariable doesn ' t report variable when condition separates 2 assignments
GENERATED MSG: Added option in ModifiedControlVariable Check to ignore validation of variables defined in for which are not change in for iterator part , fix issue # 286

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> index 9e3b884 . . 5049bed 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> @ @ - 115 , 6 + 115 , 10 @ @ public class FinalLocalVariableCheck extends Check { <nl> / * * Scope Deque . * / <nl> private final Deque < ScopeData > scopeStack = new ArrayDeque < > ( ) ; <nl> <nl> + / * * Uninitialized variables of previous scope . * / <nl> + private final Deque < Deque < DetailAST > > prevScopeUninitializedVariables = <nl> + new ArrayDeque < > ( ) ; <nl> + <nl> / * * Controls whether to check enhanced for - loop variable . * / <nl> private boolean validateEnhancedForLoopVariable ; <nl> <nl> @ @ - 180 , 6 + 184 , 7 @ @ public class FinalLocalVariableCheck extends Check { <nl> if ( ast . getParent ( ) . getType ( ) ! = TokenTypes . CASE _ GROUP <nl> | | ast . getParent ( ) . getParent ( ) . findFirstToken ( TokenTypes . CASE _ GROUP ) <nl> = = ast . getParent ( ) ) { <nl> + storePrevScopeUninitializedVariableData ( ) ; <nl> scopeStack . push ( new ScopeData ( ) ) ; <nl> } <nl> break ; <nl> @ @ - 223 , 10 + 228 , 17 @ @ public class FinalLocalVariableCheck extends Check { <nl> scope = scopeStack . pop ( ) . scope ; <nl> break ; <nl> case TokenTypes . SLIST : <nl> + final Deque < DetailAST > prevScopeUnitializedVariableData = <nl> + prevScopeUninitializedVariables . peek ( ) ; <nl> if ( ast . getParent ( ) . getType ( ) ! = TokenTypes . CASE _ GROUP <nl> - | | findLastToken ( ast . getParent ( ) . getParent ( ) , TokenTypes . CASE _ GROUP , <nl> - TokenTypes . SLIST ) = = ast . getParent ( ) ) { <nl> + | | findLastChildWhichContainsSpecifiedToken ( ast . getParent ( ) . getParent ( ) , <nl> + TokenTypes . CASE _ GROUP , TokenTypes . SLIST ) = = ast . getParent ( ) ) { <nl> scope = scopeStack . pop ( ) . scope ; <nl> + prevScopeUninitializedVariables . pop ( ) ; <nl> + } <nl> + final DetailAST parent = ast . getParent ( ) ; <nl> + if ( shouldUpdateUninitializedVariables ( parent ) ) { <nl> + updateUninitializedVariables ( prevScopeUnitializedVariableData ) ; <nl> } <nl> break ; <nl> default : <nl> @ @ - 240 , 6 + 252 , 64 @ @ public class FinalLocalVariableCheck extends Check { <nl> } <nl> <nl> / * * <nl> + * Store un - initialized variables in a temporary stack for future use . <nl> + * / <nl> + private void storePrevScopeUninitializedVariableData ( ) { <nl> + final ScopeData scopeData = scopeStack . peek ( ) ; <nl> + final Deque < DetailAST > prevScopeUnitializedVariableData = <nl> + new ArrayDeque < > ( ) ; <nl> + for ( DetailAST variable : scopeData . uninitializedVariables ) { <nl> + prevScopeUnitializedVariableData . push ( variable ) ; <nl> + } <nl> + prevScopeUninitializedVariables . push ( prevScopeUnitializedVariableData ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Update current scope data uninitialized variable according to the previous scope data . <nl> + * @ param prevScopeUnitializedVariableData variable for previous stack of uninitialized <nl> + * variables <nl> + * / <nl> + private void updateUninitializedVariables ( Deque < DetailAST > <nl> + prevScopeUnitializedVariableData ) { <nl> + / / Check for only previous scope <nl> + for ( DetailAST variable : prevScopeUnitializedVariableData ) { <nl> + for ( ScopeData scopeData : scopeStack ) { <nl> + final DetailAST storedVariable = scopeData . scope . get ( variable . getText ( ) ) ; <nl> + if ( storedVariable ! = null & & isSameVariables ( storedVariable , variable ) <nl> + & & ! scopeData . uninitializedVariables . contains ( storedVariable ) ) { <nl> + scopeData . uninitializedVariables . push ( variable ) ; <nl> + } <nl> + } <nl> + } <nl> + / / Check for rest of the scope <nl> + for ( Deque < DetailAST > unitializedVariableData : prevScopeUninitializedVariables ) { <nl> + for ( DetailAST variable : unitializedVariableData ) { <nl> + for ( ScopeData scopeData : scopeStack ) { <nl> + final DetailAST storedVariable = scopeData . scope . get ( variable . getText ( ) ) ; <nl> + if ( storedVariable ! = null <nl> + & & isSameVariables ( storedVariable , variable ) <nl> + & & ! scopeData . uninitializedVariables . contains ( storedVariable ) ) { <nl> + scopeData . uninitializedVariables . push ( variable ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * If token is LITERAL _ TRY , LITERAL _ CATCH , LITERAL _ FINALLY , or LITERAL _ ELSE , then do not <nl> + * update the uninitialized variables . <nl> + * @ param ast token to be checked <nl> + * @ return true if should be updated , else false <nl> + * / <nl> + private boolean shouldUpdateUninitializedVariables ( DetailAST ast ) { <nl> + return ast . getType ( ) ! = TokenTypes . LITERAL _ TRY <nl> + & & ast . getType ( ) ! = TokenTypes . LITERAL _ CATCH <nl> + & & ast . getType ( ) ! = TokenTypes . LITERAL _ FINALLY <nl> + & & ast . getType ( ) ! = TokenTypes . LITERAL _ ELSE ; <nl> + } <nl> + <nl> + / * * <nl> * Returns the last child token that makes a specified type and contains containType in <nl> * its branch . <nl> * @ param ast token to be tested <nl> @ @ - 247 , 7 + 317 , 8 @ @ public class FinalLocalVariableCheck extends Check { <nl> * @ param containType the token type which has to be present in the branch <nl> * @ return the matching token , or null if no match <nl> * / <nl> - public DetailAST findLastToken ( DetailAST ast , int childType , int containType ) { <nl> + public DetailAST findLastChildWhichContainsSpecifiedToken ( DetailAST ast , int childType , <nl> + int containType ) { <nl> DetailAST returnValue = null ; <nl> for ( DetailAST astIterator = ast . getFirstChild ( ) ; astIterator ! = null ; <nl> astIterator = astIterator . getNextSibling ( ) ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> index 95e42f1 . . 5c541d4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> @ @ - 81 , 6 + 81 , 15 @ @ public class FinalLocalVariableCheckTest <nl> " 247 : 17 : " + getCheckMessage ( MSG _ KEY , " n " ) , <nl> " 259 : 17 : " + getCheckMessage ( MSG _ KEY , " t " ) , <nl> " 269 : 21 : " + getCheckMessage ( MSG _ KEY , " foo " ) , <nl> + " 288 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , <nl> + " 300 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , <nl> + " 344 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , <nl> + " 357 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , <nl> + " 360 : 21 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , <nl> + " 375 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , <nl> + " 386 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , <nl> + " 418 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , <nl> + " 421 : 21 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputFinalLocalVariable . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalLocalVariable . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalLocalVariable . java <nl> index 5f00bbe . . 2fefa27 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalLocalVariable . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalLocalVariable . java <nl> @ @ - 281 , 3 + 281 , 155 @ @ class classs3 { <nl> } <nl> } <nl> } <nl> + <nl> + class Class3 { <nl> + public void test1 ( ) { <nl> + final boolean b = true ; <nl> + int shouldBeFinal ; / / Violation <nl> + <nl> + if ( b ) { <nl> + shouldBeFinal = 1 ; <nl> + } <nl> + else { <nl> + shouldBeFinal = 2 ; <nl> + } <nl> + } <nl> + <nl> + public void test2 ( ) { <nl> + final int b = 10 ; <nl> + int shouldBeFinal ; / / Violation <nl> + <nl> + switch ( b ) { <nl> + case 0 : <nl> + shouldBeFinal = 1 ; <nl> + break ; <nl> + default : <nl> + shouldBeFinal = 2 ; <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + public void test3 ( ) { <nl> + int x ; / / No Violation <nl> + try { <nl> + x = 0 ; <nl> + } catch ( final Exception e ) { <nl> + x = 1 ; <nl> + } <nl> + <nl> + int y ; / / No Violation <nl> + try { <nl> + y = 0 ; <nl> + } finally { <nl> + y = 1 ; <nl> + } <nl> + } <nl> + <nl> + public void test4 ( ) { <nl> + final boolean b = false ; <nl> + int x ; / / No Violation <nl> + if ( b ) { <nl> + x = 1 ; <nl> + } else { <nl> + x = 2 ; <nl> + } <nl> + <nl> + if ( b ) { <nl> + x = 3 ; <nl> + } <nl> + } <nl> + <nl> + public void test5 ( ) { <nl> + final boolean b = false ; <nl> + int shouldBeFinal ; / / Violation <nl> + if ( b ) { <nl> + } <nl> + if ( b ) { <nl> + shouldBeFinal = 1 ; <nl> + } else { <nl> + shouldBeFinal = 2 ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + class class4 { <nl> + public void foo ( ) { <nl> + int shouldBeFinal ; / / violation <nl> + class Bar { <nl> + void bar ( ) { <nl> + int shouldBeFinal ; / / Violation <nl> + final boolean b = false ; <nl> + if ( b ) { <nl> + shouldBeFinal = 1 ; <nl> + } else { <nl> + shouldBeFinal = 2 ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + class class5 { <nl> + public void test1 ( ) { <nl> + final boolean b = false ; <nl> + int shouldBeFinal ; / / Violation <nl> + if ( b ) { <nl> + if ( b ) { <nl> + shouldBeFinal = 1 ; <nl> + } else { <nl> + shouldBeFinal = 2 ; <nl> + } <nl> + } <nl> + } <nl> + public void test2 ( ) { <nl> + final int b = 10 ; <nl> + int shouldBeFinal ; / / Violation <nl> + <nl> + switch ( b ) { <nl> + case 0 : <nl> + switch ( b ) { <nl> + case 0 : <nl> + shouldBeFinal = 1 ; <nl> + break ; <nl> + default : <nl> + shouldBeFinal = 2 ; <nl> + break ; <nl> + } <nl> + break ; <nl> + default : <nl> + shouldBeFinal = 3 ; <nl> + break ; <nl> + } <nl> + } <nl> + public void test3 ( ) { <nl> + int x ; / / No Violation <nl> + try { <nl> + x = 0 ; <nl> + try { <nl> + x = 0 ; <nl> + } catch ( final Exception e ) { <nl> + x = 1 ; <nl> + } <nl> + } catch ( final Exception e ) { <nl> + x = 1 ; <nl> + } <nl> + } <nl> + public void test4 ( ) { <nl> + int shouldBeFinal ; / / violation <nl> + class Bar { <nl> + void bar ( ) { <nl> + int shouldBeFinal ; / / Violation <nl> + final boolean b = false ; <nl> + if ( b ) { <nl> + if ( b ) { <nl> + shouldBeFinal = 1 ; <nl> + } else { <nl> + shouldBeFinal = 2 ; <nl> + } <nl> + } else { <nl> + shouldBeFinal = 2 ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> index 132d707 . . f5f776a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> @ @ - 487 , 7 + 487 , 7 @ @ public final class TokenTypes <nl> * initialization block . < / p > <nl> * <nl> * @ see < a <nl> - * href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 10 . htm " > Java <nl> + * href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 10 . html " > Java <nl> * Language Specification & sect ; 10 < / a > <nl> * @ see # TYPE <nl> * @ see # ARRAY _ INIT

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 index 9e3b884 . . 5049bed 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 @ @ - 115 , 6 + 115 , 10 @ @ public class FinalLocalVariableCheck extends Check { 
 / * * Scope Deque . * / 
 private final Deque < ScopeData > scopeStack = new ArrayDeque < > ( ) ; 
 
 + / * * Uninitialized variables of previous scope . * / 
 + private final Deque < Deque < DetailAST > > prevScopeUninitializedVariables = 
 + new ArrayDeque < > ( ) ; 
 + 
 / * * Controls whether to check enhanced for - loop variable . * / 
 private boolean validateEnhancedForLoopVariable ; 
 
 @ @ - 180 , 6 + 184 , 7 @ @ public class FinalLocalVariableCheck extends Check { 
 if ( ast . getParent ( ) . getType ( ) ! = TokenTypes . CASE _ GROUP 
 | | ast . getParent ( ) . getParent ( ) . findFirstToken ( TokenTypes . CASE _ GROUP ) 
 = = ast . getParent ( ) ) { 
 + storePrevScopeUninitializedVariableData ( ) ; 
 scopeStack . push ( new ScopeData ( ) ) ; 
 } 
 break ; 
 @ @ - 223 , 10 + 228 , 17 @ @ public class FinalLocalVariableCheck extends Check { 
 scope = scopeStack . pop ( ) . scope ; 
 break ; 
 case TokenTypes . SLIST : 
 + final Deque < DetailAST > prevScopeUnitializedVariableData = 
 + prevScopeUninitializedVariables . peek ( ) ; 
 if ( ast . getParent ( ) . getType ( ) ! = TokenTypes . CASE _ GROUP 
 - | | findLastToken ( ast . getParent ( ) . getParent ( ) , TokenTypes . CASE _ GROUP , 
 - TokenTypes . SLIST ) = = ast . getParent ( ) ) { 
 + | | findLastChildWhichContainsSpecifiedToken ( ast . getParent ( ) . getParent ( ) , 
 + TokenTypes . CASE _ GROUP , TokenTypes . SLIST ) = = ast . getParent ( ) ) { 
 scope = scopeStack . pop ( ) . scope ; 
 + prevScopeUninitializedVariables . pop ( ) ; 
 + } 
 + final DetailAST parent = ast . getParent ( ) ; 
 + if ( shouldUpdateUninitializedVariables ( parent ) ) { 
 + updateUninitializedVariables ( prevScopeUnitializedVariableData ) ; 
 } 
 break ; 
 default : 
 @ @ - 240 , 6 + 252 , 64 @ @ public class FinalLocalVariableCheck extends Check { 
 } 
 
 / * * 
 + * Store un - initialized variables in a temporary stack for future use . 
 + * / 
 + private void storePrevScopeUninitializedVariableData ( ) { 
 + final ScopeData scopeData = scopeStack . peek ( ) ; 
 + final Deque < DetailAST > prevScopeUnitializedVariableData = 
 + new ArrayDeque < > ( ) ; 
 + for ( DetailAST variable : scopeData . uninitializedVariables ) { 
 + prevScopeUnitializedVariableData . push ( variable ) ; 
 + } 
 + prevScopeUninitializedVariables . push ( prevScopeUnitializedVariableData ) ; 
 + } 
 + 
 + / * * 
 + * Update current scope data uninitialized variable according to the previous scope data . 
 + * @ param prevScopeUnitializedVariableData variable for previous stack of uninitialized 
 + * variables 
 + * / 
 + private void updateUninitializedVariables ( Deque < DetailAST > 
 + prevScopeUnitializedVariableData ) { 
 + / / Check for only previous scope 
 + for ( DetailAST variable : prevScopeUnitializedVariableData ) { 
 + for ( ScopeData scopeData : scopeStack ) { 
 + final DetailAST storedVariable = scopeData . scope . get ( variable . getText ( ) ) ; 
 + if ( storedVariable ! = null & & isSameVariables ( storedVariable , variable ) 
 + & & ! scopeData . uninitializedVariables . contains ( storedVariable ) ) { 
 + scopeData . uninitializedVariables . push ( variable ) ; 
 + } 
 + } 
 + } 
 + / / Check for rest of the scope 
 + for ( Deque < DetailAST > unitializedVariableData : prevScopeUninitializedVariables ) { 
 + for ( DetailAST variable : unitializedVariableData ) { 
 + for ( ScopeData scopeData : scopeStack ) { 
 + final DetailAST storedVariable = scopeData . scope . get ( variable . getText ( ) ) ; 
 + if ( storedVariable ! = null 
 + & & isSameVariables ( storedVariable , variable ) 
 + & & ! scopeData . uninitializedVariables . contains ( storedVariable ) ) { 
 + scopeData . uninitializedVariables . push ( variable ) ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 + 
 + / * * 
 + * If token is LITERAL _ TRY , LITERAL _ CATCH , LITERAL _ FINALLY , or LITERAL _ ELSE , then do not 
 + * update the uninitialized variables . 
 + * @ param ast token to be checked 
 + * @ return true if should be updated , else false 
 + * / 
 + private boolean shouldUpdateUninitializedVariables ( DetailAST ast ) { 
 + return ast . getType ( ) ! = TokenTypes . LITERAL _ TRY 
 + & & ast . getType ( ) ! = TokenTypes . LITERAL _ CATCH 
 + & & ast . getType ( ) ! = TokenTypes . LITERAL _ FINALLY 
 + & & ast . getType ( ) ! = TokenTypes . LITERAL _ ELSE ; 
 + } 
 + 
 + / * * 
 * Returns the last child token that makes a specified type and contains containType in 
 * its branch . 
 * @ param ast token to be tested 
 @ @ - 247 , 7 + 317 , 8 @ @ public class FinalLocalVariableCheck extends Check { 
 * @ param containType the token type which has to be present in the branch 
 * @ return the matching token , or null if no match 
 * / 
 - public DetailAST findLastToken ( DetailAST ast , int childType , int containType ) { 
 + public DetailAST findLastChildWhichContainsSpecifiedToken ( DetailAST ast , int childType , 
 + int containType ) { 
 DetailAST returnValue = null ; 
 for ( DetailAST astIterator = ast . getFirstChild ( ) ; astIterator ! = null ; 
 astIterator = astIterator . getNextSibling ( ) ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 index 95e42f1 . . 5c541d4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 @ @ - 81 , 6 + 81 , 15 @ @ public class FinalLocalVariableCheckTest 
 " 247 : 17 : " + getCheckMessage ( MSG _ KEY , " n " ) , 
 " 259 : 17 : " + getCheckMessage ( MSG _ KEY , " t " ) , 
 " 269 : 21 : " + getCheckMessage ( MSG _ KEY , " foo " ) , 
 + " 288 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , 
 + " 300 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , 
 + " 344 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , 
 + " 357 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , 
 + " 360 : 21 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , 
 + " 375 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , 
 + " 386 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , 
 + " 418 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , 
 + " 421 : 21 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputFinalLocalVariable . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalLocalVariable . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalLocalVariable . java 
 index 5f00bbe . . 2fefa27 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalLocalVariable . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputFinalLocalVariable . java 
 @ @ - 281 , 3 + 281 , 155 @ @ class classs3 { 
 } 
 } 
 } 
 + 
 + class Class3 { 
 + public void test1 ( ) { 
 + final boolean b = true ; 
 + int shouldBeFinal ; / / Violation 
 + 
 + if ( b ) { 
 + shouldBeFinal = 1 ; 
 + } 
 + else { 
 + shouldBeFinal = 2 ; 
 + } 
 + } 
 + 
 + public void test2 ( ) { 
 + final int b = 10 ; 
 + int shouldBeFinal ; / / Violation 
 + 
 + switch ( b ) { 
 + case 0 : 
 + shouldBeFinal = 1 ; 
 + break ; 
 + default : 
 + shouldBeFinal = 2 ; 
 + break ; 
 + } 
 + } 
 + 
 + public void test3 ( ) { 
 + int x ; / / No Violation 
 + try { 
 + x = 0 ; 
 + } catch ( final Exception e ) { 
 + x = 1 ; 
 + } 
 + 
 + int y ; / / No Violation 
 + try { 
 + y = 0 ; 
 + } finally { 
 + y = 1 ; 
 + } 
 + } 
 + 
 + public void test4 ( ) { 
 + final boolean b = false ; 
 + int x ; / / No Violation 
 + if ( b ) { 
 + x = 1 ; 
 + } else { 
 + x = 2 ; 
 + } 
 + 
 + if ( b ) { 
 + x = 3 ; 
 + } 
 + } 
 + 
 + public void test5 ( ) { 
 + final boolean b = false ; 
 + int shouldBeFinal ; / / Violation 
 + if ( b ) { 
 + } 
 + if ( b ) { 
 + shouldBeFinal = 1 ; 
 + } else { 
 + shouldBeFinal = 2 ; 
 + } 
 + } 
 + } 
 + 
 + class class4 { 
 + public void foo ( ) { 
 + int shouldBeFinal ; / / violation 
 + class Bar { 
 + void bar ( ) { 
 + int shouldBeFinal ; / / Violation 
 + final boolean b = false ; 
 + if ( b ) { 
 + shouldBeFinal = 1 ; 
 + } else { 
 + shouldBeFinal = 2 ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 + 
 + class class5 { 
 + public void test1 ( ) { 
 + final boolean b = false ; 
 + int shouldBeFinal ; / / Violation 
 + if ( b ) { 
 + if ( b ) { 
 + shouldBeFinal = 1 ; 
 + } else { 
 + shouldBeFinal = 2 ; 
 + } 
 + } 
 + } 
 + public void test2 ( ) { 
 + final int b = 10 ; 
 + int shouldBeFinal ; / / Violation 
 + 
 + switch ( b ) { 
 + case 0 : 
 + switch ( b ) { 
 + case 0 : 
 + shouldBeFinal = 1 ; 
 + break ; 
 + default : 
 + shouldBeFinal = 2 ; 
 + break ; 
 + } 
 + break ; 
 + default : 
 + shouldBeFinal = 3 ; 
 + break ; 
 + } 
 + } 
 + public void test3 ( ) { 
 + int x ; / / No Violation 
 + try { 
 + x = 0 ; 
 + try { 
 + x = 0 ; 
 + } catch ( final Exception e ) { 
 + x = 1 ; 
 + } 
 + } catch ( final Exception e ) { 
 + x = 1 ; 
 + } 
 + } 
 + public void test4 ( ) { 
 + int shouldBeFinal ; / / violation 
 + class Bar { 
 + void bar ( ) { 
 + int shouldBeFinal ; / / Violation 
 + final boolean b = false ; 
 + if ( b ) { 
 + if ( b ) { 
 + shouldBeFinal = 1 ; 
 + } else { 
 + shouldBeFinal = 2 ; 
 + } 
 + } else { 
 + shouldBeFinal = 2 ; 
 + } 
 + } 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 index 132d707 . . f5f776a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 @ @ - 487 , 7 + 487 , 7 @ @ public final class TokenTypes 
 * initialization block . < / p > 
 * 
 * @ see < a 
 - * href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 10 . htm " > Java 
 + * href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 10 . html " > Java 
 * Language Specification & sect ; 10 < / a > 
 * @ see # TYPE 
 * @ see # ARRAY _ INIT
