BLEU SCORE: 0.0370865905565703

TEST MSG: minor : refactor paths for spellchecker script
GENERATED MSG: Issue # 6046 : Spell check failing to get words file

TEST DIFF (one line): diff - - git a / . ci / test - spelling - unknown - words . sh b / . ci / test - spelling - unknown - words . sh <nl> index 8da2067 . . 8fbd02a 100755 <nl> - - - a / . ci / test - spelling - unknown - words . sh <nl> + + + b / . ci / test - spelling - unknown - words . sh <nl> @ @ - 6 , 14 + 6 , 15 @ @ <nl> set - e <nl> <nl> spellchecker = . ci / jsoref - spellchecker <nl> - whitelist _ path = . ci / jsoref - spellchecker / whitelist . words <nl> - dict = . ci - temp / english . words <nl> + temp = . ci - temp <nl> + whitelist _ path = $ spellchecker / whitelist . words <nl> + dict = $ temp / english . words <nl> word _ splitter = $ spellchecker / spelling - unknown - word - splitter . pl <nl> run _ output = $ spellchecker / unknown . words <nl> if [ ! - e $ dict ] ; then <nl> - mkdir - p . ci - temp <nl> + mkdir - p $ temp <nl> echo " Retrieve . / usr / share / dict / linux . words " <nl> - words _ rpm = . ci - temp / words . rpm <nl> + words _ rpm = $ temp / words . rpm <nl> mirror = " https : / / rpmfind . net " <nl> file _ path = " / linux / fedora / linux / development / rawhide / Everything / aarch64 / os / Packages / w / " <nl> file _ name = $ ( curl - s " $ { mirror } $ { file _ path } " | grep - o " words - . * . noarch . rpm " ) <nl> @ @ - 37 , 7 + 38 , 7 @ @ rm - f $ run _ output <nl> <nl> echo " Run w " <nl> ( git ' ls - files ' - z 2 > / dev / null | | hg locate - 0 ) | \ <nl> - . ci / jsoref - spellchecker / exclude . pl | \ <nl> + $ spellchecker / exclude . pl | \ <nl> xargs - 0 $ word _ splitter | \ <nl> $ word _ splitter | \ <nl> perl - p - n - e ' s / \ ( . * / / ' > $ run _ output
NEAREST DIFF (one line): diff - - git a / . ci / jsoref - spellchecker / whitelist . words b / . ci / jsoref - spellchecker / whitelist . words <nl> index fa63d25 . . 859686c 100644 <nl> - - - a / . ci / jsoref - spellchecker / whitelist . words <nl> + + + b / . ci / jsoref - spellchecker / whitelist . words <nl> @ @ - 700 , 6 + 700 , 7 @ @ konstantinos <nl> Kordas <nl> Kotlin <nl> kused <nl> + lambdaparametername <nl> lbc <nl> LBRACK <nl> lbt <nl> diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index 71a79a1 . . b878272 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 514 , 6 + 514 , 9 @ @ <nl> < property name = " format " value = " ^ ( id ) | ( [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] + ) $ " / > <nl> < property name = " ignoreOverridden " value = " true " / > <nl> < / module > <nl> + < module name = " LambdaParameterName " > <nl> + < property name = " format " value = " ^ ( id ) | ( [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] + ) $ " / > <nl> + < / module > <nl> < module name = " CatchParameterName " > <nl> < property name = " format " value = " ^ ( ex | [ a - z ] [ a - z ] [ a - zA - Z ] + ) $ " / > <nl> < / module > <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / LambdaParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / LambdaParameterNameTest . java <nl> new file mode 100644 <nl> index 0000000 . . d0bc32a <nl> - - - / dev / null <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / LambdaParameterNameTest . java <nl> @ @ - 0 , 0 + 1 , 55 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2018 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . google . checkstyle . test . chapter5naming . rule526parameternames ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . google . checkstyle . test . base . AbstractModuleTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + <nl> + public class LambdaParameterNameTest extends AbstractModuleTestSupport { <nl> + <nl> + public static final String MSG _ INVALID _ PATTERN = " name . invalidPattern " ; <nl> + <nl> + @ Override <nl> + protected String getPackageLocation ( ) { <nl> + return " com / google / checkstyle / test / chapter5naming / rule526parameternames " ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testLambdaParameterName ( ) throws Exception { <nl> + final Configuration config = getModuleConfig ( " LambdaParameterName " ) ; <nl> + final String format = config . getAttribute ( " format " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 9 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ INVALID _ PATTERN , " S " , format ) , <nl> + " 12 : 14 : " + getCheckMessage ( config . getMessages ( ) , MSG _ INVALID _ PATTERN , " sT " , format ) , <nl> + " 14 : 65 : " + getCheckMessage ( config . getMessages ( ) , MSG _ INVALID _ PATTERN , " sT1 " , format ) , <nl> + " 14 : 70 : " + getCheckMessage ( config . getMessages ( ) , MSG _ INVALID _ PATTERN , " sT2 " , format ) , <nl> + " 17 : 21 : " + getCheckMessage ( config . getMessages ( ) , MSG _ INVALID _ PATTERN , " _ s " , format ) , <nl> + } ; <nl> + <nl> + final String filePath = getPath ( " InputLambdaParameterName . java " ) ; <nl> + <nl> + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> + verify ( config , filePath , expected , warnList ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputLambdaParameterName . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputLambdaParameterName . java <nl> new file mode 100644 <nl> index 0000000 . . f440cbb <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputLambdaParameterName . java <nl> @ @ - 0 , 0 + 1 , 28 @ @ <nl> + package com . google . checkstyle . test . chapter5naming . rule526parameternames ; <nl> + <nl> + import java . util . function . BiFunction ; <nl> + import java . util . function . Function ; <nl> + <nl> + public class InputLambdaParameterName { <nl> + <nl> + Function < String , String > badNamedParameterWithoutParenthesis = <nl> + S - > S . trim ( ) . toLowerCase ( ) ; / / warn <nl> + <nl> + Function < String , String > badNamedParameterWithParenthesis = <nl> + ( sT ) - > sT . trim ( ) . toLowerCase ( ) ; / / warn <nl> + <nl> + BiFunction < String , String , String > twoBadNamedParameters = ( sT1 , sT2 ) - > sT1 + sT2 ; / / warn <nl> + <nl> + BiFunction < String , String , String > badNamedParameterInBiFunction = <nl> + ( first , _ s ) - > first + _ s ; / / warn <nl> + <nl> + Function < String , Integer > goodNamedParameterWithoutParenthesis = <nl> + notTrimmedString - > notTrimmedString . trim ( ) . length ( ) ; <nl> + <nl> + Function < String , Integer > goodNamedParameterWithParenthesis = <nl> + ( notTrimmedString ) - > notTrimmedString . trim ( ) . length ( ) ; <nl> + <nl> + BiFunction < String , String , Integer > goodNamedParameters = <nl> + ( first , second ) - > ( first + second ) . length ( ) ; <nl> + <nl> + } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> index 739f0f2 . . 90be700 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> @ @ - 672 , 6 + 672 , 8 @ @ public class PackageObjectFactory implements ModuleFactory { <nl> BASE _ PACKAGE + " . checks . naming . ConstantNameCheck " ) ; <nl> NAME _ TO _ FULL _ MODULE _ NAME . put ( " InterfaceTypeParameterNameCheck " , <nl> BASE _ PACKAGE + " . checks . naming . InterfaceTypeParameterNameCheck " ) ; <nl> + NAME _ TO _ FULL _ MODULE _ NAME . put ( " LambdaParameterNameCheck " , <nl> + BASE _ PACKAGE + " . checks . naming . LambdaParameterNameCheck " ) ; <nl> NAME _ TO _ FULL _ MODULE _ NAME . put ( " LocalFinalVariableNameCheck " , <nl> BASE _ PACKAGE + " . checks . naming . LocalFinalVariableNameCheck " ) ; <nl> NAME _ TO _ FULL _ MODULE _ NAME . put ( " LocalVariableNameCheck " , <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LambdaParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LambdaParameterNameCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 2d64811 <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LambdaParameterNameCheck . java <nl> @ @ - 0 , 0 + 1 , 118 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2018 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> + / * * <nl> + * < p > <nl> + * Check to verify lambda parameter names . <nl> + * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code format } - Specifies valid identifiers . <nl> + * Default value is { @ code " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " } . <nl> + * < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * An example of how to configure the check is : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = " LambdaParameterName " / & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * An example of how to configure the check for names that begin <nl> + * with a lower case letter , followed by letters is : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = " LambdaParameterName " & gt ; <nl> + * & lt ; property name = " format " value = " ^ [ a - z ] ( [ a - zA - Z ] + ) * $ " / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * Example of checking with this config : <nl> + * < / p > <nl> + * < pre > <nl> + * public class TestClass { <nl> + * <nl> + * Function & lt ; String , String & gt ; function1 = str - & gt ; str . toUpperCase ( ) . trim ( ) ; <nl> + * <nl> + * Function & lt ; String , String & gt ; function2 = _ s - & gt ; _ s . trim ( ) . toUpperCase ( ) ; / / violation <nl> + * <nl> + * public boolean testMethod ( String sentence ) { <nl> + * return Stream . of ( sentence . split ( " " ) ) <nl> + * . map ( word - & gt ; word . trim ( ) ) <nl> + * . anyMatch ( Word - & gt ; " in " . equals ( Word ) ) ; / / violation <nl> + * } <nl> + * <nl> + * } <nl> + * <nl> + * < / pre > <nl> + * <nl> + * @ since 8 . 11 <nl> + * / <nl> + public class LambdaParameterNameCheck extends AbstractNameCheck { <nl> + <nl> + / * * Creates new instance of { @ code LambdaParameterNameCheck } . * / <nl> + public LambdaParameterNameCheck ( ) { <nl> + super ( " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getDefaultTokens ( ) { <nl> + return getRequiredTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getAcceptableTokens ( ) { <nl> + return getRequiredTokens ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return new int [ ] { <nl> + TokenTypes . LAMBDA , <nl> + } ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visitToken ( DetailAST ast ) { <nl> + final DetailAST parametersNode = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> + if ( parametersNode = = null ) { <nl> + super . visitToken ( ast ) ; <nl> + } <nl> + else { <nl> + for ( DetailAST parameterDef = parametersNode . getFirstChild ( ) ; <nl> + parameterDef ! = null ; <nl> + parameterDef = parameterDef . getNextSibling ( ) ) { <nl> + if ( parameterDef . getType ( ) = = TokenTypes . PARAMETER _ DEF ) { <nl> + super . visitToken ( parameterDef ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + protected boolean mustCheckName ( DetailAST ast ) { <nl> + return true ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml <nl> index 3a50a40 . . 2ad6787 100644 <nl> - - - a / src / main / resources / google _ checks . xml <nl> + + + b / src / main / resources / google _ checks . xml <nl> @ @ - 134 , 6 + 134 , 11 @ @ <nl> < message key = " name . invalidPattern " <nl> value = " Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > <nl> < / module > <nl> + < module name = " LambdaParameterName " > <nl> + < property name = " format " value = " ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ " / > <nl> + < message key = " name . invalidPattern " <nl> + value = " Lambda parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > <nl> + < / module > <nl> < module name = " CatchParameterName " > <nl> < property name = " format " value = " ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ " / > <nl> < message key = " name . invalidPattern " <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LambdaParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LambdaParameterNameCheckTest . java <nl> new file mode 100644 <nl> index 0000000 . . cafa628 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LambdaParameterNameCheckTest . java <nl> @ @ - 0 , 0 + 1 , 79 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2018 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MSG _ INVALID _ PATTERN ; <nl> + <nl> + import org . junit . Assert ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> + public class LambdaParameterNameCheckTest extends AbstractModuleTestSupport { <nl> + <nl> + @ Override <nl> + protected String getPackageLocation ( ) { <nl> + return " com / puppycrawl / tools / checkstyle / checks / naming / lambdaparametername " ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetRequiredTokens ( ) { <nl> + final int [ ] expected = { <nl> + TokenTypes . LAMBDA , <nl> + } ; <nl> + <nl> + final LambdaParameterNameCheck check = new LambdaParameterNameCheck ( ) ; <nl> + final int [ ] requiredTokens = check . getRequiredTokens ( ) ; <nl> + Assert . assertArrayEquals ( " Invalid required tokens " , expected , requiredTokens ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAcceptableTokens ( ) { <nl> + final int [ ] expected = { <nl> + TokenTypes . LAMBDA , <nl> + } ; <nl> + <nl> + final LambdaParameterNameCheck check = new LambdaParameterNameCheck ( ) ; <nl> + final int [ ] acceptableTokens = check . getAcceptableTokens ( ) ; <nl> + Assert . assertArrayEquals ( " Invalid acceptable tokens " , expected , acceptableTokens ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testParametersInLambda ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( LambdaParameterNameCheck . class ) ; <nl> + <nl> + checkConfig . addAttribute ( " format " , " ^ ( id ) | ( [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] + ) $ " ) ; <nl> + <nl> + final String pattern = " ^ ( id ) | ( [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] + ) $ " ; <nl> + <nl> + final String [ ] expected = { <nl> + " 8 : 68 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " s " , pattern ) , <nl> + " 10 : 66 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " st " , pattern ) , <nl> + " 12 : 65 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " s1 " , pattern ) , <nl> + " 12 : 69 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " s2 " , pattern ) , <nl> + " 14 : 80 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " s " , pattern ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputLambdaParameterName . java " ) , expected ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 6ea9c80 . . edbef5c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 111 , 6 + 111 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> & & ! " ClassTypeParameterName " . equals ( sectionName ) <nl> & & ! " ConstantName " . equals ( sectionName ) <nl> & & ! " InterfaceTypeParameterName " . equals ( sectionName ) <nl> + & & ! " LambdaParameterName " . equals ( sectionName ) <nl> & & ! " LocalFinalVariableName " . equals ( sectionName ) <nl> & & ! " LocalVariableName " . equals ( sectionName ) <nl> & & ! " MemberName " . equals ( sectionName ) <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / lambdaparametername / InputLambdaParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / lambdaparametername / InputLambdaParameterName . java <nl> new file mode 100644 <nl> index 0000000 . . 036b557 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / lambdaparametername / InputLambdaParameterName . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . lambdaparametername ; <nl> + <nl> + import java . util . function . BiFunction ; <nl> + import java . util . function . Function ; <nl> + <nl> + public class InputLambdaParameterName { <nl> + <nl> + Function < String , String > badNamedParameterWithoutParenthesis = s - > s . trim ( ) . toLowerCase ( ) ; <nl> + <nl> + Function < String , String > badNamedParameterWithParenthesis = ( st ) - > st . trim ( ) . toLowerCase ( ) ; <nl> + <nl> + BiFunction < String , String , String > twoBadNamedParameters = ( s1 , s2 ) - > s1 + s2 ; <nl> + <nl> + BiFunction < String , String , String > badNamedParameterInBiFunction = ( first , s ) - > first + s ; <nl> + <nl> + Function < String , Integer > goodNamedParameterWithoutParenthesis = <nl> + notTrimmedString - > notTrimmedString . trim ( ) . length ( ) ; <nl> + <nl> + Function < String , Integer > goodNamedParameterWithParenthesis = <nl> + ( notTrimmedString ) - > notTrimmedString . trim ( ) . length ( ) ; <nl> + <nl> + BiFunction < String , String , Integer > goodNamedParameters = <nl> + ( first , second ) - > ( first + second ) . length ( ) ; <nl> + <nl> + } <nl> diff - - git a / src / xdocs / checks . xml b / src / xdocs / checks . xml <nl> index 7219a7f . . bbae86f 100644 <nl> - - - a / src / xdocs / checks . xml <nl> + + + b / src / xdocs / checks . xml <nl> @ @ - 388 , 6 + 388 , 10 @ @ <nl> Java source files and methods . < / td > <nl> < / tr > <nl> < tr > <nl> + < td > < a href = " config _ naming . html # LambdaParameterName " > LambdaParameterName < / a > < / td > <nl> + < td > Check to verify lambda parameter names . < / td > <nl> + < / tr > <nl> + < tr > <nl> < td > < a href = " config _ blocks . html # LeftCurly " > LeftCurly < / a > < / td > <nl> < td > <nl> Checks the placement of left curly braces on types , methods and <nl> diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml <nl> index 98b985a . . ba9f676 100644 <nl> - - - a / src / xdocs / config _ naming . xml <nl> + + + b / src / xdocs / config _ naming . xml <nl> @ @ - 690 , 6 + 690 , 105 @ @ <nl> < / subsection > <nl> < / section > <nl> <nl> + < section name = " LambdaParameterName " > <nl> + < p > Since Checkstyle 8 . 11 < / p > <nl> + < subsection name = " Description " > <nl> + < p > <nl> + Check to verify lambda parameter names . <nl> + < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Properties " > <nl> + < table > <nl> + < tr > <nl> + < th > name < / th > <nl> + < th > description < / th > <nl> + < th > type < / th > <nl> + < th > default value < / th > <nl> + < th > since < / th > <nl> + < / tr > <nl> + < tr > <nl> + < td > format < / td > <nl> + < td > Specifies valid identifiers . < / td > <nl> + < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td > <nl> + < td > < code > " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " < / code > < / td > <nl> + < td > 8 . 11 < / td > <nl> + < / tr > <nl> + < / table > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Examples " > <nl> + < p > <nl> + An example of how to configure the check is : <nl> + < / p > <nl> + <nl> + < source > <nl> + & lt ; module name = " LambdaParameterName " / & gt ; <nl> + < / source > <nl> + <nl> + < p > <nl> + An example of how to configure the check for names that begin with a lower case letter , <nl> + followed by letters is : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = " LambdaParameterName " & gt ; <nl> + & lt ; property name = " format " value = " ^ [ a - z ] ( [ a - zA - Z ] + ) * $ " / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < p > Example of checking with this config : < / p > <nl> + < source > <nl> + public class TestClass { <nl> + <nl> + Function & lt ; String , String & gt ; function1 = str - > str . toUpperCase ( ) . trim ( ) ; <nl> + <nl> + Function & lt ; String , String & gt ; function2 = _ s - > _ s . trim ( ) . toUpperCase ( ) ; / / violation <nl> + <nl> + public boolean testMethod ( String sentence ) { <nl> + return Stream . of ( sentence . split ( " " ) ) <nl> + . map ( word - > word . trim ( ) ) <nl> + . anyMatch ( Word - > " in " . equals ( Word ) ) ; / / violation <nl> + } <nl> + <nl> + } <nl> + < / source > <nl> + <nl> + < / subsection > <nl> + <nl> + < subsection name = " Example of Usage " > <nl> + < ul > <nl> + < li > <nl> + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + LambdaParameterName " > <nl> + Google Style < / a > <nl> + < / li > <nl> + < li > <nl> + < a href = " https : / / github . com / search ? q = path % 3Aconfig + filename % 3Acheckstyle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + LambdaParameterName " > <nl> + Checkstyle Style < / a > <nl> + < / li > <nl> + < / ul > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Error Messages " > <nl> + < ul > <nl> + < li > <nl> + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources % 2Fcom % 2Fpuppycrawl % 2Ftools % 2Fcheckstyle % 2Fchecks % 2Fnaming + filename % 3Amessages * . properties + repo % 3Acheckstyle % 2Fcheckstyle + % 22name . invalidPattern % 22 " > <nl> + name . invalidPattern < / a > <nl> + < / li > <nl> + < / ul > <nl> + < p > <nl> + All messages can be customized if the default message doesn ' t suit you . <nl> + Please < a href = " config . html # Custom _ messages " > see the documentation < / a > to learn how to . <nl> + < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Package " > <nl> + < p > com . puppycrawl . tools . checkstyle . checks . naming < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Parent Module " > <nl> + < p > < a href = " config . html # TreeWalker " > TreeWalker < / a > < / p > <nl> + < / subsection > <nl> + < / section > <nl> + <nl> < section name = " LocalFinalVariableName " > <nl> < p > Since Checkstyle 3 . 0 < / p > <nl> < subsection name = " Description " > <nl> diff - - git a / src / xdocs / google _ style . xml b / src / xdocs / google _ style . xml <nl> index e9edf5f . . 53c2b84 100644 <nl> - - - a / src / xdocs / google _ style . xml <nl> + + + b / src / xdocs / google _ style . xml <nl> @ @ - 1569 , 6 + 1569 , 11 @ @ <nl> < img src = " images / ok _ green . png " alt = " " / > <nl> < a href = " config _ naming . html # CatchParameterName " > <nl> CatchParameterName < / a > <nl> + < br / > <nl> + < br / > <nl> + < img src = " images / ok _ green . png " alt = " " / > <nl> + < a href = " config _ naming . html # LambdaParameterName " > <nl> + LambdaParameterName < / a > <nl> < / td > <nl> < td > <nl> < a <nl> @ @ - 1586 , 6 + 1591 , 14 @ @ <nl> < a href = " https : / / github . com / checkstyle / checkstyle / blob / master / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java " > <nl> test <nl> < / a > <nl> + < br / > <nl> + < a <nl> + href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + LambdaParameterName " > <nl> + config < / a > <nl> + < br / > <nl> + < a <nl> + href = " https : / / github . com / checkstyle / checkstyle / blob / master / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / LambdaParameterNameTest . java " > <nl> + test < / a > <nl> < / td > <nl> < / tr > <nl> < tr >

TEST DIFF:
diff - - git a / . ci / test - spelling - unknown - words . sh b / . ci / test - spelling - unknown - words . sh 
 index 8da2067 . . 8fbd02a 100755 
 - - - a / . ci / test - spelling - unknown - words . sh 
 + + + b / . ci / test - spelling - unknown - words . sh 
 @ @ - 6 , 14 + 6 , 15 @ @ 
 set - e 
 
 spellchecker = . ci / jsoref - spellchecker 
 - whitelist _ path = . ci / jsoref - spellchecker / whitelist . words 
 - dict = . ci - temp / english . words 
 + temp = . ci - temp 
 + whitelist _ path = $ spellchecker / whitelist . words 
 + dict = $ temp / english . words 
 word _ splitter = $ spellchecker / spelling - unknown - word - splitter . pl 
 run _ output = $ spellchecker / unknown . words 
 if [ ! - e $ dict ] ; then 
 - mkdir - p . ci - temp 
 + mkdir - p $ temp 
 echo " Retrieve . / usr / share / dict / linux . words " 
 - words _ rpm = . ci - temp / words . rpm 
 + words _ rpm = $ temp / words . rpm 
 mirror = " https : / / rpmfind . net " 
 file _ path = " / linux / fedora / linux / development / rawhide / Everything / aarch64 / os / Packages / w / " 
 file _ name = $ ( curl - s " $ { mirror } $ { file _ path } " | grep - o " words - . * . noarch . rpm " ) 
 @ @ - 37 , 7 + 38 , 7 @ @ rm - f $ run _ output 
 
 echo " Run w " 
 ( git ' ls - files ' - z 2 > / dev / null | | hg locate - 0 ) | \ 
 - . ci / jsoref - spellchecker / exclude . pl | \ 
 + $ spellchecker / exclude . pl | \ 
 xargs - 0 $ word _ splitter | \ 
 $ word _ splitter | \ 
 perl - p - n - e ' s / \ ( . * / / ' > $ run _ output

NEAREST DIFF:
diff - - git a / . ci / jsoref - spellchecker / whitelist . words b / . ci / jsoref - spellchecker / whitelist . words 
 index fa63d25 . . 859686c 100644 
 - - - a / . ci / jsoref - spellchecker / whitelist . words 
 + + + b / . ci / jsoref - spellchecker / whitelist . words 
 @ @ - 700 , 6 + 700 , 7 @ @ konstantinos 
 Kordas 
 Kotlin 
 kused 
 + lambdaparametername 
 lbc 
 LBRACK 
 lbt 
 diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index 71a79a1 . . b878272 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 514 , 6 + 514 , 9 @ @ 
 < property name = " format " value = " ^ ( id ) | ( [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] + ) $ " / > 
 < property name = " ignoreOverridden " value = " true " / > 
 < / module > 
 + < module name = " LambdaParameterName " > 
 + < property name = " format " value = " ^ ( id ) | ( [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] + ) $ " / > 
 + < / module > 
 < module name = " CatchParameterName " > 
 < property name = " format " value = " ^ ( ex | [ a - z ] [ a - z ] [ a - zA - Z ] + ) $ " / > 
 < / module > 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / LambdaParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / LambdaParameterNameTest . java 
 new file mode 100644 
 index 0000000 . . d0bc32a 
 - - - / dev / null 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / LambdaParameterNameTest . java 
 @ @ - 0 , 0 + 1 , 55 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2018 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . google . checkstyle . test . chapter5naming . rule526parameternames ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . google . checkstyle . test . base . AbstractModuleTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + 
 + public class LambdaParameterNameTest extends AbstractModuleTestSupport { 
 + 
 + public static final String MSG _ INVALID _ PATTERN = " name . invalidPattern " ; 
 + 
 + @ Override 
 + protected String getPackageLocation ( ) { 
 + return " com / google / checkstyle / test / chapter5naming / rule526parameternames " ; 
 + } 
 + 
 + @ Test 
 + public void testLambdaParameterName ( ) throws Exception { 
 + final Configuration config = getModuleConfig ( " LambdaParameterName " ) ; 
 + final String format = config . getAttribute ( " format " ) ; 
 + 
 + final String [ ] expected = { 
 + " 9 : 13 : " + getCheckMessage ( config . getMessages ( ) , MSG _ INVALID _ PATTERN , " S " , format ) , 
 + " 12 : 14 : " + getCheckMessage ( config . getMessages ( ) , MSG _ INVALID _ PATTERN , " sT " , format ) , 
 + " 14 : 65 : " + getCheckMessage ( config . getMessages ( ) , MSG _ INVALID _ PATTERN , " sT1 " , format ) , 
 + " 14 : 70 : " + getCheckMessage ( config . getMessages ( ) , MSG _ INVALID _ PATTERN , " sT2 " , format ) , 
 + " 17 : 21 : " + getCheckMessage ( config . getMessages ( ) , MSG _ INVALID _ PATTERN , " _ s " , format ) , 
 + } ; 
 + 
 + final String filePath = getPath ( " InputLambdaParameterName . java " ) ; 
 + 
 + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 + verify ( config , filePath , expected , warnList ) ; 
 + } 
 + 
 + } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputLambdaParameterName . java b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputLambdaParameterName . java 
 new file mode 100644 
 index 0000000 . . f440cbb 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter5naming / rule526parameternames / InputLambdaParameterName . java 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + package com . google . checkstyle . test . chapter5naming . rule526parameternames ; 
 + 
 + import java . util . function . BiFunction ; 
 + import java . util . function . Function ; 
 + 
 + public class InputLambdaParameterName { 
 + 
 + Function < String , String > badNamedParameterWithoutParenthesis = 
 + S - > S . trim ( ) . toLowerCase ( ) ; / / warn 
 + 
 + Function < String , String > badNamedParameterWithParenthesis = 
 + ( sT ) - > sT . trim ( ) . toLowerCase ( ) ; / / warn 
 + 
 + BiFunction < String , String , String > twoBadNamedParameters = ( sT1 , sT2 ) - > sT1 + sT2 ; / / warn 
 + 
 + BiFunction < String , String , String > badNamedParameterInBiFunction = 
 + ( first , _ s ) - > first + _ s ; / / warn 
 + 
 + Function < String , Integer > goodNamedParameterWithoutParenthesis = 
 + notTrimmedString - > notTrimmedString . trim ( ) . length ( ) ; 
 + 
 + Function < String , Integer > goodNamedParameterWithParenthesis = 
 + ( notTrimmedString ) - > notTrimmedString . trim ( ) . length ( ) ; 
 + 
 + BiFunction < String , String , Integer > goodNamedParameters = 
 + ( first , second ) - > ( first + second ) . length ( ) ; 
 + 
 + } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 index 739f0f2 . . 90be700 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 @ @ - 672 , 6 + 672 , 8 @ @ public class PackageObjectFactory implements ModuleFactory { 
 BASE _ PACKAGE + " . checks . naming . ConstantNameCheck " ) ; 
 NAME _ TO _ FULL _ MODULE _ NAME . put ( " InterfaceTypeParameterNameCheck " , 
 BASE _ PACKAGE + " . checks . naming . InterfaceTypeParameterNameCheck " ) ; 
 + NAME _ TO _ FULL _ MODULE _ NAME . put ( " LambdaParameterNameCheck " , 
 + BASE _ PACKAGE + " . checks . naming . LambdaParameterNameCheck " ) ; 
 NAME _ TO _ FULL _ MODULE _ NAME . put ( " LocalFinalVariableNameCheck " , 
 BASE _ PACKAGE + " . checks . naming . LocalFinalVariableNameCheck " ) ; 
 NAME _ TO _ FULL _ MODULE _ NAME . put ( " LocalVariableNameCheck " , 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LambdaParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LambdaParameterNameCheck . java 
 new file mode 100644 
 index 0000000 . . 2d64811 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / LambdaParameterNameCheck . java 
 @ @ - 0 , 0 + 1 , 118 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2018 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 + / * * 
 + * < p > 
 + * Check to verify lambda parameter names . 
 + * < / p > 
 + * < ul > 
 + * < li > 
 + * Property { @ code format } - Specifies valid identifiers . 
 + * Default value is { @ code " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " } . 
 + * < / li > 
 + * < / ul > 
 + * < p > 
 + * An example of how to configure the check is : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = " LambdaParameterName " / & gt ; 
 + * < / pre > 
 + * < p > 
 + * An example of how to configure the check for names that begin 
 + * with a lower case letter , followed by letters is : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = " LambdaParameterName " & gt ; 
 + * & lt ; property name = " format " value = " ^ [ a - z ] ( [ a - zA - Z ] + ) * $ " / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * Example of checking with this config : 
 + * < / p > 
 + * < pre > 
 + * public class TestClass { 
 + * 
 + * Function & lt ; String , String & gt ; function1 = str - & gt ; str . toUpperCase ( ) . trim ( ) ; 
 + * 
 + * Function & lt ; String , String & gt ; function2 = _ s - & gt ; _ s . trim ( ) . toUpperCase ( ) ; / / violation 
 + * 
 + * public boolean testMethod ( String sentence ) { 
 + * return Stream . of ( sentence . split ( " " ) ) 
 + * . map ( word - & gt ; word . trim ( ) ) 
 + * . anyMatch ( Word - & gt ; " in " . equals ( Word ) ) ; / / violation 
 + * } 
 + * 
 + * } 
 + * 
 + * < / pre > 
 + * 
 + * @ since 8 . 11 
 + * / 
 + public class LambdaParameterNameCheck extends AbstractNameCheck { 
 + 
 + / * * Creates new instance of { @ code LambdaParameterNameCheck } . * / 
 + public LambdaParameterNameCheck ( ) { 
 + super ( " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getDefaultTokens ( ) { 
 + return getRequiredTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getAcceptableTokens ( ) { 
 + return getRequiredTokens ( ) ; 
 + } 
 + 
 + @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return new int [ ] { 
 + TokenTypes . LAMBDA , 
 + } ; 
 + } 
 + 
 + @ Override 
 + public void visitToken ( DetailAST ast ) { 
 + final DetailAST parametersNode = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 + if ( parametersNode = = null ) { 
 + super . visitToken ( ast ) ; 
 + } 
 + else { 
 + for ( DetailAST parameterDef = parametersNode . getFirstChild ( ) ; 
 + parameterDef ! = null ; 
 + parameterDef = parameterDef . getNextSibling ( ) ) { 
 + if ( parameterDef . getType ( ) = = TokenTypes . PARAMETER _ DEF ) { 
 + super . visitToken ( parameterDef ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + @ Override 
 + protected boolean mustCheckName ( DetailAST ast ) { 
 + return true ; 
 + } 
 + 
 + } 
 diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml 
 index 3a50a40 . . 2ad6787 100644 
 - - - a / src / main / resources / google _ checks . xml 
 + + + b / src / main / resources / google _ checks . xml 
 @ @ - 134 , 6 + 134 , 11 @ @ 
 < message key = " name . invalidPattern " 
 value = " Parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > 
 < / module > 
 + < module name = " LambdaParameterName " > 
 + < property name = " format " value = " ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ " / > 
 + < message key = " name . invalidPattern " 
 + value = " Lambda parameter name ' ' { 0 } ' ' must match pattern ' ' { 1 } ' ' . " / > 
 + < / module > 
 < module name = " CatchParameterName " > 
 < property name = " format " value = " ^ [ a - z ] ( [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * ) ? $ " / > 
 < message key = " name . invalidPattern " 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LambdaParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LambdaParameterNameCheckTest . java 
 new file mode 100644 
 index 0000000 . . cafa628 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / LambdaParameterNameCheckTest . java 
 @ @ - 0 , 0 + 1 , 79 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2018 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MSG _ INVALID _ PATTERN ; 
 + 
 + import org . junit . Assert ; 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 + public class LambdaParameterNameCheckTest extends AbstractModuleTestSupport { 
 + 
 + @ Override 
 + protected String getPackageLocation ( ) { 
 + return " com / puppycrawl / tools / checkstyle / checks / naming / lambdaparametername " ; 
 + } 
 + 
 + @ Test 
 + public void testGetRequiredTokens ( ) { 
 + final int [ ] expected = { 
 + TokenTypes . LAMBDA , 
 + } ; 
 + 
 + final LambdaParameterNameCheck check = new LambdaParameterNameCheck ( ) ; 
 + final int [ ] requiredTokens = check . getRequiredTokens ( ) ; 
 + Assert . assertArrayEquals ( " Invalid required tokens " , expected , requiredTokens ) ; 
 + } 
 + 
 + @ Test 
 + public void testAcceptableTokens ( ) { 
 + final int [ ] expected = { 
 + TokenTypes . LAMBDA , 
 + } ; 
 + 
 + final LambdaParameterNameCheck check = new LambdaParameterNameCheck ( ) ; 
 + final int [ ] acceptableTokens = check . getAcceptableTokens ( ) ; 
 + Assert . assertArrayEquals ( " Invalid acceptable tokens " , expected , acceptableTokens ) ; 
 + } 
 + 
 + @ Test 
 + public void testParametersInLambda ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( LambdaParameterNameCheck . class ) ; 
 + 
 + checkConfig . addAttribute ( " format " , " ^ ( id ) | ( [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] + ) $ " ) ; 
 + 
 + final String pattern = " ^ ( id ) | ( [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] + ) $ " ; 
 + 
 + final String [ ] expected = { 
 + " 8 : 68 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " s " , pattern ) , 
 + " 10 : 66 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " st " , pattern ) , 
 + " 12 : 65 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " s1 " , pattern ) , 
 + " 12 : 69 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " s2 " , pattern ) , 
 + " 14 : 80 : " + getCheckMessage ( MSG _ INVALID _ PATTERN , " s " , pattern ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputLambdaParameterName . java " ) , expected ) ; 
 + } 
 + 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 6ea9c80 . . edbef5c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 111 , 6 + 111 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 & & ! " ClassTypeParameterName " . equals ( sectionName ) 
 & & ! " ConstantName " . equals ( sectionName ) 
 & & ! " InterfaceTypeParameterName " . equals ( sectionName ) 
 + & & ! " LambdaParameterName " . equals ( sectionName ) 
 & & ! " LocalFinalVariableName " . equals ( sectionName ) 
 & & ! " LocalVariableName " . equals ( sectionName ) 
 & & ! " MemberName " . equals ( sectionName ) 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / lambdaparametername / InputLambdaParameterName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / lambdaparametername / InputLambdaParameterName . java 
 new file mode 100644 
 index 0000000 . . 036b557 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / lambdaparametername / InputLambdaParameterName . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . lambdaparametername ; 
 + 
 + import java . util . function . BiFunction ; 
 + import java . util . function . Function ; 
 + 
 + public class InputLambdaParameterName { 
 + 
 + Function < String , String > badNamedParameterWithoutParenthesis = s - > s . trim ( ) . toLowerCase ( ) ; 
 + 
 + Function < String , String > badNamedParameterWithParenthesis = ( st ) - > st . trim ( ) . toLowerCase ( ) ; 
 + 
 + BiFunction < String , String , String > twoBadNamedParameters = ( s1 , s2 ) - > s1 + s2 ; 
 + 
 + BiFunction < String , String , String > badNamedParameterInBiFunction = ( first , s ) - > first + s ; 
 + 
 + Function < String , Integer > goodNamedParameterWithoutParenthesis = 
 + notTrimmedString - > notTrimmedString . trim ( ) . length ( ) ; 
 + 
 + Function < String , Integer > goodNamedParameterWithParenthesis = 
 + ( notTrimmedString ) - > notTrimmedString . trim ( ) . length ( ) ; 
 + 
 + BiFunction < String , String , Integer > goodNamedParameters = 
 + ( first , second ) - > ( first + second ) . length ( ) ; 
 + 
 + } 
 diff - - git a / src / xdocs / checks . xml b / src / xdocs / checks . xml 
 index 7219a7f . . bbae86f 100644 
 - - - a / src / xdocs / checks . xml 
 + + + b / src / xdocs / checks . xml 
 @ @ - 388 , 6 + 388 , 10 @ @ 
 Java source files and methods . < / td > 
 < / tr > 
 < tr > 
 + < td > < a href = " config _ naming . html # LambdaParameterName " > LambdaParameterName < / a > < / td > 
 + < td > Check to verify lambda parameter names . < / td > 
 + < / tr > 
 + < tr > 
 < td > < a href = " config _ blocks . html # LeftCurly " > LeftCurly < / a > < / td > 
 < td > 
 Checks the placement of left curly braces on types , methods and 
 diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml 
 index 98b985a . . ba9f676 100644 
 - - - a / src / xdocs / config _ naming . xml 
 + + + b / src / xdocs / config _ naming . xml 
 @ @ - 690 , 6 + 690 , 105 @ @ 
 < / subsection > 
 < / section > 
 
 + < section name = " LambdaParameterName " > 
 + < p > Since Checkstyle 8 . 11 < / p > 
 + < subsection name = " Description " > 
 + < p > 
 + Check to verify lambda parameter names . 
 + < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Properties " > 
 + < table > 
 + < tr > 
 + < th > name < / th > 
 + < th > description < / th > 
 + < th > type < / th > 
 + < th > default value < / th > 
 + < th > since < / th > 
 + < / tr > 
 + < tr > 
 + < td > format < / td > 
 + < td > Specifies valid identifiers . < / td > 
 + < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td > 
 + < td > < code > " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " < / code > < / td > 
 + < td > 8 . 11 < / td > 
 + < / tr > 
 + < / table > 
 + < / subsection > 
 + 
 + < subsection name = " Examples " > 
 + < p > 
 + An example of how to configure the check is : 
 + < / p > 
 + 
 + < source > 
 + & lt ; module name = " LambdaParameterName " / & gt ; 
 + < / source > 
 + 
 + < p > 
 + An example of how to configure the check for names that begin with a lower case letter , 
 + followed by letters is : 
 + < / p > 
 + < source > 
 + & lt ; module name = " LambdaParameterName " & gt ; 
 + & lt ; property name = " format " value = " ^ [ a - z ] ( [ a - zA - Z ] + ) * $ " / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < p > Example of checking with this config : < / p > 
 + < source > 
 + public class TestClass { 
 + 
 + Function & lt ; String , String & gt ; function1 = str - > str . toUpperCase ( ) . trim ( ) ; 
 + 
 + Function & lt ; String , String & gt ; function2 = _ s - > _ s . trim ( ) . toUpperCase ( ) ; / / violation 
 + 
 + public boolean testMethod ( String sentence ) { 
 + return Stream . of ( sentence . split ( " " ) ) 
 + . map ( word - > word . trim ( ) ) 
 + . anyMatch ( Word - > " in " . equals ( Word ) ) ; / / violation 
 + } 
 + 
 + } 
 + < / source > 
 + 
 + < / subsection > 
 + 
 + < subsection name = " Example of Usage " > 
 + < ul > 
 + < li > 
 + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + LambdaParameterName " > 
 + Google Style < / a > 
 + < / li > 
 + < li > 
 + < a href = " https : / / github . com / search ? q = path % 3Aconfig + filename % 3Acheckstyle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + LambdaParameterName " > 
 + Checkstyle Style < / a > 
 + < / li > 
 + < / ul > 
 + < / subsection > 
 + 
 + < subsection name = " Error Messages " > 
 + < ul > 
 + < li > 
 + < a href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources % 2Fcom % 2Fpuppycrawl % 2Ftools % 2Fcheckstyle % 2Fchecks % 2Fnaming + filename % 3Amessages * . properties + repo % 3Acheckstyle % 2Fcheckstyle + % 22name . invalidPattern % 22 " > 
 + name . invalidPattern < / a > 
 + < / li > 
 + < / ul > 
 + < p > 
 + All messages can be customized if the default message doesn ' t suit you . 
 + Please < a href = " config . html # Custom _ messages " > see the documentation < / a > to learn how to . 
 + < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Package " > 
 + < p > com . puppycrawl . tools . checkstyle . checks . naming < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Parent Module " > 
 + < p > < a href = " config . html # TreeWalker " > TreeWalker < / a > < / p > 
 + < / subsection > 
 + < / section > 
 + 
 < section name = " LocalFinalVariableName " > 
 < p > Since Checkstyle 3 . 0 < / p > 
 < subsection name = " Description " > 
 diff - - git a / src / xdocs / google _ style . xml b / src / xdocs / google _ style . xml 
 index e9edf5f . . 53c2b84 100644 
 - - - a / src / xdocs / google _ style . xml 
 + + + b / src / xdocs / google _ style . xml 
 @ @ - 1569 , 6 + 1569 , 11 @ @ 
 < img src = " images / ok _ green . png " alt = " " / > 
 < a href = " config _ naming . html # CatchParameterName " > 
 CatchParameterName < / a > 
 + < br / > 
 + < br / > 
 + < img src = " images / ok _ green . png " alt = " " / > 
 + < a href = " config _ naming . html # LambdaParameterName " > 
 + LambdaParameterName < / a > 
 < / td > 
 < td > 
 < a 
 @ @ - 1586 , 6 + 1591 , 14 @ @ 
 < a href = " https : / / github . com / checkstyle / checkstyle / blob / master / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java " > 
 test 
 < / a > 
 + < br / > 
 + < a 
 + href = " https : / / github . com / search ? q = path % 3Asrc % 2Fmain % 2Fresources + filename % 3Agoogle _ checks . xml + repo % 3Acheckstyle % 2Fcheckstyle + LambdaParameterName " > 
 + config < / a > 
 + < br / > 
 + < a 
 + href = " https : / / github . com / checkstyle / checkstyle / blob / master / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / LambdaParameterNameTest . java " > 
 + test < / a > 
 < / td > 
 < / tr > 
 < tr >
