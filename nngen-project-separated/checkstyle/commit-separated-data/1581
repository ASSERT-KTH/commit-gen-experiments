BLEU SCORE: 0.09980099403873663

TEST MSG: Issue # 985 : Fix PMD violations for ShortVariable rule
GENERATED MSG: Issue # 1566 : AvoidInlineConditional violations fixed

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> index 1992fb1 . . 77f9a20 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> @ @ - 61 , 12 + 61 , 12 @ @ public class DefaultLogger <nl> <nl> / * * <nl> * Creates a new { @ code DefaultLogger } instance . <nl> - * @ param os where to log infos and errors <nl> + * @ param outputStream where to log infos and errors <nl> * @ param closeStreamsAfterUse if oS should be closed in auditFinished ( ) <nl> * / <nl> - public DefaultLogger ( OutputStream os , boolean closeStreamsAfterUse ) { <nl> + public DefaultLogger ( OutputStream outputStream , boolean closeStreamsAfterUse ) { <nl> / / no need to close oS twice <nl> - this ( os , closeStreamsAfterUse , os , false ) ; <nl> + this ( outputStream , closeStreamsAfterUse , outputStream , false ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index 79491ed . . 6750215 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 404 , 8 + 404 , 8 @ @ public final class Main { <nl> <nl> / * * Prints the usage information . * * / <nl> private static void printUsage ( ) { <nl> - final HelpFormatter hf = new HelpFormatter ( ) ; <nl> - hf . printHelp ( String . format ( " java % s [ options ] - c < config . xml > file . . . " , <nl> + final HelpFormatter formatter = new HelpFormatter ( ) ; <nl> + formatter . printHelp ( String . format ( " java % s [ options ] - c < config . xml > file . . . " , <nl> Main . class . getName ( ) ) , buildOptions ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> index 29845be . . 863845a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java <nl> @ @ - 197 , 10 + 197 , 10 @ @ final class PropertyCacheFile { <nl> / / use a message digest here to keep the length of the <nl> / / hashcode reasonable <nl> <nl> - final MessageDigest md = MessageDigest . getInstance ( " SHA - 1 " ) ; <nl> - md . update ( outputStream . toByteArray ( ) ) ; <nl> + final MessageDigest digest = MessageDigest . getInstance ( " SHA - 1 " ) ; <nl> + digest . update ( outputStream . toByteArray ( ) ) ; <nl> <nl> - return hexEncode ( md . digest ( ) ) ; <nl> + return hexEncode ( digest . digest ( ) ) ; <nl> } <nl> catch ( final IOException | NoSuchAlgorithmException ex ) { <nl> / / rethrow as unchecked exception <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index 482c39b . . 856735e 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 446 , 8 + 446 , 8 @ @ public final class TreeWalker <nl> public static DetailAST parse ( FileContents contents ) <nl> throws RecognitionException , TokenStreamException { <nl> final String fullText = contents . getText ( ) . getFullText ( ) . toString ( ) ; <nl> - final Reader sr = new StringReader ( fullText ) ; <nl> - final GeneratedJavaLexer lexer = new GeneratedJavaLexer ( sr ) ; <nl> + final Reader reader = new StringReader ( fullText ) ; <nl> + final GeneratedJavaLexer lexer = new GeneratedJavaLexer ( reader ) ; <nl> lexer . setFilename ( contents . getFileName ( ) ) ; <nl> lexer . setCommentListener ( contents ) ; <nl> lexer . setTreatAssertAsKeyword ( true ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> index d47f0a0 . . b87e278 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> @ @ - 62 , 20 + 62 , 20 @ @ public class XMLLogger <nl> / * * <nl> * Creates a new { @ code XMLLogger } instance . <nl> * Sets the output to a defined stream . <nl> - * @ param os the stream to write logs to . <nl> + * @ param outputStream the stream to write logs to . <nl> * @ param closeStream close oS in auditFinished <nl> * / <nl> - public XMLLogger ( OutputStream os , boolean closeStream ) { <nl> - setOutputStream ( os ) ; <nl> + public XMLLogger ( OutputStream outputStream , boolean closeStream ) { <nl> + setOutputStream ( outputStream ) ; <nl> this . closeStream = closeStream ; <nl> } <nl> <nl> / * * <nl> * Sets the OutputStream . <nl> - * @ param oS the OutputStream to use <nl> + * @ param outputStream the OutputStream to use <nl> * * / <nl> - private void setOutputStream ( OutputStream oS ) { <nl> - final OutputStreamWriter osw = new OutputStreamWriter ( oS , StandardCharsets . UTF _ 8 ) ; <nl> + private void setOutputStream ( OutputStream outputStream ) { <nl> + final OutputStreamWriter osw = new OutputStreamWriter ( outputStream , StandardCharsets . UTF _ 8 ) ; <nl> writer = new PrintWriter ( osw ) ; <nl> } <nl> <nl> @ @ - 133 , 15 + 133 , 15 @ @ public class XMLLogger <nl> <nl> @ Override <nl> public void addException ( AuditEvent evt , Throwable throwable ) { <nl> - final StringWriter sw = new StringWriter ( ) ; <nl> - final PrintWriter pw = new PrintWriter ( sw ) ; <nl> - pw . println ( " < exception > " ) ; <nl> - pw . println ( " < ! [ CDATA [ " ) ; <nl> - throwable . printStackTrace ( pw ) ; <nl> - pw . println ( " ] ] > " ) ; <nl> - pw . println ( " < / exception > " ) ; <nl> - pw . flush ( ) ; <nl> - writer . println ( encode ( sw . toString ( ) ) ) ; <nl> + final StringWriter stringWriter = new StringWriter ( ) ; <nl> + final PrintWriter printer = new PrintWriter ( stringWriter ) ; <nl> + printer . println ( " < exception > " ) ; <nl> + printer . println ( " < ! [ CDATA [ " ) ; <nl> + throwable . printStackTrace ( printer ) ; <nl> + printer . println ( " ] ] > " ) ; <nl> + printer . println ( " < / exception > " ) ; <nl> + printer . flush ( ) ; <nl> + this . writer . println ( encode ( stringWriter . toString ( ) ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> index 0cb8724 . . 6ca2f03 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> @ @ - 150 , 10 + 150 , 10 @ @ public class CheckstyleAntTask extends Task { <nl> <nl> / * * <nl> * Adds set of files ( nested fileset attribute ) . <nl> - * @ param fS the file set to add <nl> + * @ param fileSet the file set to add <nl> * / <nl> - public void addFileset ( FileSet fS ) { <nl> - fileSets . add ( fS ) ; <nl> + public void addFileset ( FileSet fileSet ) { <nl> + fileSets . add ( fileSet ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 357 , 10 + 357 , 10 @ @ public class CheckstyleAntTask extends Task { <nl> throw new BuildException ( " Unable to process files : " + files , e ) ; <nl> } <nl> final int numWarnings = warningCounter . getCount ( ) ; <nl> - final boolean ok = numErrs < = maxErrors & & numWarnings < = maxWarnings ; <nl> + final boolean okStatus = numErrs < = maxErrors & & numWarnings < = maxWarnings ; <nl> <nl> / / Handle the return status <nl> - if ( ! ok ) { <nl> + if ( ! okStatus ) { <nl> final String failureMsg = <nl> " Got " + numErrs + " errors and " + numWarnings <nl> + " warnings . " ; <nl> @ @ - 491 , 16 + 491 , 16 @ @ public class CheckstyleAntTask extends Task { <nl> list . add ( new File ( fileName ) ) ; <nl> } <nl> for ( int i = 0 ; i < fileSets . size ( ) ; i + + ) { <nl> - final FileSet fs = fileSets . get ( i ) ; <nl> - final DirectoryScanner ds = fs . getDirectoryScanner ( getProject ( ) ) ; <nl> - ds . scan ( ) ; <nl> + final FileSet fileSet = fileSets . get ( i ) ; <nl> + final DirectoryScanner scanner = fileSet . getDirectoryScanner ( getProject ( ) ) ; <nl> + scanner . scan ( ) ; <nl> <nl> - final String [ ] names = ds . getIncludedFiles ( ) ; <nl> + final String [ ] names = scanner . getIncludedFiles ( ) ; <nl> log ( i + " ) Adding " + names . length + " files from directory " <nl> - + ds . getBasedir ( ) , Project . MSG _ VERBOSE ) ; <nl> + + scanner . getBasedir ( ) , Project . MSG _ VERBOSE ) ; <nl> <nl> for ( String element : names ) { <nl> - final String pathname = ds . getBasedir ( ) + File . separator <nl> + final String pathname = scanner . getBasedir ( ) + File . separator <nl> + element ; <nl> list . add ( new File ( pathname ) ) ; <nl> } <nl> @ @ - 550 , 10 + 550 , 10 @ @ public class CheckstyleAntTask extends Task { <nl> <nl> / * * <nl> * Set the file to output to . <nl> - * @ param to the file to output to <nl> + * @ TreeWalker : 262param destination the file to output to <nl> * / <nl> - public void setTofile ( File to ) { <nl> - toFile = to ; <nl> + public void setTofile ( File destination ) { <nl> + toFile = destination ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java <nl> index 9cca497 . . ef9cfb3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java <nl> @ @ - 116 , 12 + 116 , 12 @ @ public abstract class AbstractLoader <nl> } <nl> <nl> @ Override <nl> - public void error ( SAXParseException ex ) throws SAXException { <nl> - throw ex ; <nl> + public void error ( SAXParseException exception ) throws SAXException { <nl> + throw exception ; <nl> } <nl> <nl> @ Override <nl> - public void fatalError ( SAXParseException ex ) throws SAXException { <nl> - throw ex ; <nl> + public void fatalError ( SAXParseException exception ) throws SAXException { <nl> + throw exception ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> index 4277e1d . . fb4c427 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> @ @ - 156 , 9 + 156 , 9 @ @ public class AutomaticBean <nl> / / BeanUtilsBean . copyProperties silently ignores missing setters <nl> / / for key , so we have to go through great lengths here to <nl> / / figure out if the bean property really exists . <nl> - final PropertyDescriptor pd = <nl> + final PropertyDescriptor descriptor = <nl> PropertyUtils . getPropertyDescriptor ( this , key ) ; <nl> - if ( pd = = null ) { <nl> + if ( descriptor = = null ) { <nl> final String message = String . format ( " Property ' % s ' in module % s does not " <nl> + " exist , please check the documentation " , key , moduleName ) ; <nl> throw new CheckstyleException ( message ) ; <nl> @ @ - 245 , 12 + 245 , 12 @ @ public class AutomaticBean <nl> @ Override <nl> public Object convert ( Class type , Object value ) { <nl> / / Convert to a String and trim it for the tokenizer . <nl> - final StringTokenizer st = new StringTokenizer ( <nl> + final StringTokenizer tokenizer = new StringTokenizer ( <nl> value . toString ( ) . trim ( ) , " , " ) ; <nl> final List < String > result = Lists . newArrayList ( ) ; <nl> <nl> - while ( st . hasMoreTokens ( ) ) { <nl> - final String token = st . nextToken ( ) ; <nl> + while ( tokenizer . hasMoreTokens ( ) ) { <nl> + final String token = tokenizer . nextToken ( ) ; <nl> result . add ( token . trim ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> index 3b46850 . . 9557a9d 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java <nl> @ @ - 74 , 13 + 74 , 13 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { <nl> <nl> @ Override <nl> public void initialize ( AST ast ) { <nl> - final DetailAST da = ( DetailAST ) ast ; <nl> - setText ( da . getText ( ) ) ; <nl> - setType ( da . getType ( ) ) ; <nl> - lineNo = da . getLineNo ( ) ; <nl> - columnNo = da . getColumnNo ( ) ; <nl> - hiddenAfter = da . getHiddenAfter ( ) ; <nl> - hiddenBefore = da . getHiddenBefore ( ) ; <nl> + final DetailAST detailAst = ( DetailAST ) ast ; <nl> + setText ( detailAst . getText ( ) ) ; <nl> + setType ( detailAst . getType ( ) ) ; <nl> + lineNo = detailAst . getLineNo ( ) ; <nl> + columnNo = detailAst . getColumnNo ( ) ; <nl> + hiddenAfter = detailAst . getHiddenAfter ( ) ; <nl> + hiddenBefore = detailAst . getHiddenBefore ( ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java <nl> index 6553ba9 . . de132ae 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java <nl> @ @ - 136 , 10 + 136 , 10 @ @ public final class FileText extends AbstractList < String > { <nl> / / is about 30 % faster than using the <nl> / / LINE _ TERMINATOR . split ( fullText , - 1 ) method <nl> final ArrayList < String > textLines = new ArrayList < > ( ) ; <nl> - final BufferedReader br = <nl> + final BufferedReader reader = <nl> new BufferedReader ( new StringReader ( fullText ) ) ; <nl> while ( true ) { <nl> - final String line = br . readLine ( ) ; <nl> + final String line = reader . readLine ( ) ; <nl> if ( line = = null ) { <nl> break ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java <nl> index 1a076c2 . . abbbbae 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java <nl> @ @ - 110 , 9 + 110 , 9 @ @ public final class FullIdent { <nl> * @ return a { @ code FullIdent } value <nl> * / <nl> public static FullIdent createFullIdent ( DetailAST ast ) { <nl> - final FullIdent fi = new FullIdent ( ) ; <nl> - extractFullIdent ( fi , ast ) ; <nl> - return fi ; <nl> + final FullIdent ident = new FullIdent ( ) ; <nl> + extractFullIdent ( ident , ast ) ; <nl> + return ident ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> index 8dea646 . . 01879e9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> @ @ - 322 , 9 + 322 , 9 @ @ public abstract class AbstractTypeAwareCheck extends Check { <nl> if ( bounds ! = null ) { <nl> final FullIdent name = <nl> FullIdent . createFullIdentBelow ( bounds ) ; <nl> - final AbstractClassInfo ci = <nl> + final AbstractClassInfo classInfo = <nl> createClassInfo ( new Token ( name ) , currentClassName ) ; <nl> - paramsMap . put ( alias , ci ) ; <nl> + paramsMap . put ( alias , classInfo ) ; <nl> } <nl> } <nl> } <nl> @ @ - 361 , 9 + 361 , 9 @ @ public abstract class AbstractTypeAwareCheck extends Check { <nl> * / <nl> protected final AbstractClassInfo createClassInfo ( final Token name , <nl> final String surroundingClass ) { <nl> - final AbstractClassInfo ci = findClassAlias ( name . getText ( ) ) ; <nl> - if ( ci ! = null ) { <nl> - return new ClassAlias ( name , ci ) ; <nl> + final AbstractClassInfo classInfo = findClassAlias ( name . getText ( ) ) ; <nl> + if ( classInfo ! = null ) { <nl> + return new ClassAlias ( name , classInfo ) ; <nl> } <nl> return new RegularClass ( name , surroundingClass , this ) ; <nl> } <nl> @ @ - 374 , 16 + 374 , 16 @ @ public abstract class AbstractTypeAwareCheck extends Check { <nl> * @ return ClassInfo for alias if it exists , null otherwise <nl> * / <nl> protected final AbstractClassInfo findClassAlias ( final String name ) { <nl> - AbstractClassInfo ci = null ; <nl> + AbstractClassInfo classInfo = null ; <nl> final Iterator < Map < String , AbstractClassInfo > > iterator = typeParams . descendingIterator ( ) ; <nl> while ( iterator . hasNext ( ) ) { <nl> final Map < String , AbstractClassInfo > paramMap = iterator . next ( ) ; <nl> - ci = paramMap . get ( name ) ; <nl> - if ( ci ! = null ) { <nl> + classInfo = paramMap . get ( name ) ; <nl> + if ( classInfo ! = null ) { <nl> break ; <nl> } <nl> } <nl> - return ci ; <nl> + return classInfo ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java <nl> index 8077f3a . . 298c9ac 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java <nl> @ @ - 339 , 10 + 339 , 10 @ @ public class DescendantTokenCheck extends Check { <nl> / / Any tokens set by property ' tokens ' are acceptable <nl> final Set < String > tokenNames = getTokenNames ( ) ; <nl> final int [ ] result = new int [ tokenNames . size ( ) ] ; <nl> - int i = 0 ; <nl> + int index = 0 ; <nl> for ( String name : tokenNames ) { <nl> - result [ i ] = TokenUtils . getTokenId ( name ) ; <nl> - i + + ; <nl> + result [ index ] = TokenUtils . getTokenId ( name ) ; <nl> + index + + ; <nl> } <nl> return result ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> index 2c98649 . . 3ffe485 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> @ @ - 384 , 9 + 384 , 9 @ @ public class TranslationCheck <nl> props . load ( inStream ) ; <nl> <nl> / / Gather the keys and put them into a set <nl> - final Enumeration < ? > e = props . propertyNames ( ) ; <nl> - while ( e . hasMoreElements ( ) ) { <nl> - keys . add ( e . nextElement ( ) ) ; <nl> + final Enumeration < ? > element = props . propertyNames ( ) ; <nl> + while ( element . hasMoreElements ( ) ) { <nl> + keys . add ( element . nextElement ( ) ) ; <nl> } <nl> } <nl> catch ( final IOException e ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java <nl> index 7a8470f . . d18934f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java <nl> @ @ - 204 , 14 + 204 , 14 @ @ public final class MissingDeprecatedCheck extends Check { <nl> * @ param lines all lines <nl> * @ param foundBefore flag from parent method <nl> * @ param currentLine current line <nl> - * @ param i som index <nl> + * @ param index som index <nl> * @ return true if Tag is found <nl> * / <nl> private boolean checkTagAtTheRestOfComment ( String [ ] lines , boolean foundBefore , <nl> - int currentLine , int i ) { <nl> + int currentLine , int index ) { <nl> <nl> boolean found = false ; <nl> - for ( int reindex = i + 1 ; <nl> + for ( int reindex = index + 1 ; <nl> reindex < lines . length ; ) { <nl> final Matcher multilineCont = MATCH _ DEPRECATED _ MULTILINE _ CONT . matcher ( lines [ reindex ] ) ; <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> index f2dc13c . . 1862c39 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> @ @ - 778 , 9 + 778 , 9 @ @ public class VisibilityModifierCheck <nl> for ( DetailAST child = holder . getFirstChild ( ) ; <nl> child ! = null ; child = child . getNextSibling ( ) ) { <nl> if ( child . getType ( ) = = TokenTypes . ANNOTATION ) { <nl> - final DetailAST at = child . getFirstChild ( ) ; <nl> + final DetailAST ast = child . getFirstChild ( ) ; <nl> final String name = <nl> - FullIdent . createFullIdent ( at . getNextSibling ( ) ) . getText ( ) ; <nl> + FullIdent . createFullIdent ( ast . getNextSibling ( ) ) . getText ( ) ; <nl> if ( ignoreAnnotationCanonicalNames . contains ( name ) <nl> | | ignoreAnnotationShortNames . contains ( name ) ) { <nl> matchingAnnotation = child ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> index db156a0 . . 5016ed8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> @ @ - 88 , 9 + 88 , 9 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { <nl> } <nl> else { <nl> int headerLineNo = 0 ; <nl> - int i ; <nl> - for ( i = 0 ; headerLineNo < headerSize & & i < fileSize ; i + + ) { <nl> - final String line = lines . get ( i ) ; <nl> + int index ; <nl> + for ( index = 0 ; headerLineNo < headerSize & & index < fileSize ; index + + ) { <nl> + final String line = lines . get ( index ) ; <nl> boolean isMatch = isMatch ( line , headerLineNo ) ; <nl> while ( ! isMatch & & isMultiLine ( headerLineNo ) ) { <nl> headerLineNo + + ; <nl> @ @ - 98 , 7 + 98 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { <nl> | | isMatch ( line , headerLineNo ) ; <nl> } <nl> if ( ! isMatch ) { <nl> - log ( i + 1 , MSG _ HEADER _ MISMATCH , getHeaderLines ( ) . get ( <nl> + log ( index + 1 , MSG _ HEADER _ MISMATCH , getHeaderLines ( ) . get ( <nl> headerLineNo ) ) ; <nl> break ; <nl> } <nl> @ @ - 106 , 7 + 106 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { <nl> headerLineNo + + ; <nl> } <nl> } <nl> - if ( i = = fileSize ) { <nl> + if ( index = = fileSize ) { <nl> / / if file finished , but we have at least one non - multi - line <nl> / / header isn ' t completed <nl> logFirstSinglelineLine ( headerLineNo , headerSize ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java <nl> index 8e15564 . . faf5384 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java <nl> @ @ - 109 , 21 + 109 , 21 @ @ final class ImportControlLoader extends AbstractLoader { <nl> final boolean isLocalOnly = attributes . getValue ( " local - only " ) ! = null ; <nl> final String pkg = attributes . getValue ( PKG _ ATTRIBUTE _ NAME ) ; <nl> final boolean regex = attributes . getValue ( " regex " ) ! = null ; <nl> - final Guard g ; <nl> + final Guard guard ; <nl> if ( pkg ! = null ) { <nl> final boolean exactMatch = <nl> attributes . getValue ( " exact - match " ) ! = null ; <nl> - g = new Guard ( isAllow , isLocalOnly , pkg , exactMatch , regex ) ; <nl> + guard = new Guard ( isAllow , isLocalOnly , pkg , exactMatch , regex ) ; <nl> } <nl> else { <nl> / / handle class names which can be normal class names or regular <nl> / / expressions <nl> final String clazz = safeGet ( attributes , " class " ) ; <nl> - g = new Guard ( isAllow , isLocalOnly , clazz , regex ) ; <nl> + guard = new Guard ( isAllow , isLocalOnly , clazz , regex ) ; <nl> } <nl> <nl> - final PkgControl pc = stack . peek ( ) ; <nl> - pc . addGuard ( g ) ; <nl> + final PkgControl pkgControl = stack . peek ( ) ; <nl> + pkgControl . addGuard ( guard ) ; <nl> } <nl> } <nl> <nl> @ @ - 142 , 9 + 142 , 9 @ @ final class ImportControlLoader extends AbstractLoader { <nl> * @ throws CheckstyleException if an error occurs . <nl> * / <nl> static PkgControl load ( final URI uri ) throws CheckstyleException { <nl> - InputStream is ; <nl> + InputStream inputStream ; <nl> try { <nl> - is = uri . toURL ( ) . openStream ( ) ; <nl> + inputStream = uri . toURL ( ) . openStream ( ) ; <nl> } <nl> catch ( final MalformedURLException e ) { <nl> throw new CheckstyleException ( " syntax error in url " + uri , e ) ; <nl> @ @ - 152 , 7 + 152 , 7 @ @ final class ImportControlLoader extends AbstractLoader { <nl> catch ( final IOException e ) { <nl> throw new CheckstyleException ( " unable to find " + uri , e ) ; <nl> } <nl> - final InputSource source = new InputSource ( is ) ; <nl> + final InputSource source = new InputSource ( inputStream ) ; <nl> return load ( source , uri ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java <nl> index 6923e40 . . 7e263fe 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java <nl> @ @ - 198 , 17 + 198 , 17 @ @ class TagParser { <nl> / * * <nl> * Skips HTML comments . <nl> * @ param text text of javadoc comments . <nl> - * @ param from start position of HTML - comments <nl> + * @ param fromPoint start position of HTML - comments <nl> * @ return position after HTML - comments <nl> * / <nl> - private static Point skipHtmlComment ( String [ ] text , Point from ) { <nl> - Point to = from ; <nl> - to = findChar ( text , ' > ' , to ) ; <nl> - while ( ! text [ to . getLineNo ( ) ] <nl> - . substring ( 0 , to . getColumnNo ( ) + 1 ) . endsWith ( " - - > " ) ) { <nl> - to = findChar ( text , ' > ' , getNextCharPos ( text , to ) ) ; <nl> + private static Point skipHtmlComment ( String [ ] text , Point fromPoint ) { <nl> + Point toPoint = fromPoint ; <nl> + toPoint = findChar ( text , ' > ' , toPoint ) ; <nl> + while ( ! text [ toPoint . getLineNo ( ) ] <nl> + . substring ( 0 , toPoint . getColumnNo ( ) + 1 ) . endsWith ( " - - > " ) ) { <nl> + toPoint = findChar ( text , ' > ' , getNextCharPos ( text , toPoint ) ) ; <nl> } <nl> - return to ; <nl> + return toPoint ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java <nl> index a4cdf0a . . 691cd07 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java <nl> @ @ - 180 , 12 + 180 , 12 @ @ public class WriteTagCheck <nl> <nl> int tagCount = 0 ; <nl> for ( int i = 0 ; i < comment . length ; i + + ) { <nl> - final String s = comment [ i ] ; <nl> - final Matcher matcher = tagRE . matcher ( s ) ; <nl> + final String commentValue = comment [ i ] ; <nl> + final Matcher matcher = tagRE . matcher ( commentValue ) ; <nl> if ( matcher . find ( ) ) { <nl> tagCount + = 1 ; <nl> final int contentStart = matcher . start ( 1 ) ; <nl> - final String content = s . substring ( contentStart ) ; <nl> + final String content = commentValue . substring ( contentStart ) ; <nl> if ( tagFormatRE ! = null & & ! tagFormatRE . matcher ( content ) . find ( ) ) { <nl> log ( lineNo + i - comment . length , TAG _ FORMAT , tag , tagFormat ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java <nl> index 173d107 . . caf4ca0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java <nl> @ @ - 139 , 16 + 139 , 16 @ @ public class ModifierOrderCheck <nl> * modifier AST . <nl> * / <nl> static DetailAST checkOrderSuggestedByJLS ( List < DetailAST > modifiers ) { <nl> - final Iterator < DetailAST > it = modifiers . iterator ( ) ; <nl> + final Iterator < DetailAST > iterator = modifiers . iterator ( ) ; <nl> <nl> / / Speed past all initial annotations <nl> - DetailAST modifier = skipAnnotations ( it ) ; <nl> + DetailAST modifier = skipAnnotations ( iterator ) ; <nl> <nl> DetailAST offendingModifier = null ; <nl> <nl> / / All modifiers are annotations , no problem <nl> if ( modifier . getType ( ) ! = TokenTypes . ANNOTATION ) { <nl> - int i = 0 ; <nl> + int index = 0 ; <nl> <nl> while ( modifier ! = null <nl> & & offendingModifier = = null ) { <nl> @ @ - 159 , 17 + 159 , 17 @ @ public class ModifierOrderCheck <nl> break ; <nl> } <nl> <nl> - while ( i < JLS _ ORDER . length <nl> - & & ! JLS _ ORDER [ i ] . equals ( modifier . getText ( ) ) ) { <nl> - i + + ; <nl> + while ( index < JLS _ ORDER . length <nl> + & & ! JLS _ ORDER [ index ] . equals ( modifier . getText ( ) ) ) { <nl> + index + + ; <nl> } <nl> <nl> - if ( i = = JLS _ ORDER . length ) { <nl> + if ( index = = JLS _ ORDER . length ) { <nl> / / Current modifier is out of JLS order <nl> offendingModifier = modifier ; <nl> } <nl> - else if ( it . hasNext ( ) ) { <nl> - modifier = it . next ( ) ; <nl> + else if ( iterator . hasNext ( ) ) { <nl> + modifier = iterator . next ( ) ; <nl> } <nl> else { <nl> / / Reached end of modifiers without problem <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheck . java <nl> index 7c5473f . . 552990f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheck . java <nl> @ @ - 86 , 9 + 86 , 9 @ @ public class OuterTypeNumberCheck extends Check { <nl> <nl> / * * <nl> * Sets the maximum allowed number of outer types . <nl> - * @ param to the new number . <nl> + * @ param max the new number . <nl> * / <nl> - public void setMax ( int to ) { <nl> - max = to ; <nl> + public void setMax ( int max ) { <nl> + this . max = max ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDoclet . java b / src / main / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDoclet . java <nl> index 11ebcb6 . . f3cdc07 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDoclet . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDoclet . java <nl> @ @ - 60 , 7 + 60 , 7 @ @ public final class TokenTypesDoclet { <nl> final String fileName = getDestFileName ( root . options ( ) ) ; <nl> final FileOutputStream fos = new FileOutputStream ( fileName ) ; <nl> final Writer osw = new OutputStreamWriter ( fos , StandardCharsets . UTF _ 8 ) ; <nl> - final PrintWriter pw = new PrintWriter ( osw , false ) ; <nl> + final PrintWriter writer = new PrintWriter ( osw , false ) ; <nl> <nl> try { <nl> final ClassDoc [ ] classes = root . classes ( ) ; <nl> @ @ - 72 , 13 + 72 , 13 @ @ public final class TokenTypesDoclet { <nl> final String message = " Should be only one tag . " ; <nl> throw new IllegalArgumentException ( message ) ; <nl> } <nl> - pw . println ( field . name ( ) + " = " <nl> - + field . firstSentenceTags ( ) [ 0 ] . text ( ) ) ; <nl> + writer . println ( field . name ( ) + " = " <nl> + + field . firstSentenceTags ( ) [ 0 ] . text ( ) ) ; <nl> } <nl> } <nl> } <nl> finally { <nl> - pw . close ( ) ; <nl> + writer . close ( ) ; <nl> } <nl> <nl> return true ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java <nl> index b000607 . . 98d99a8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java <nl> @ @ - 157 , 9 + 157 , 9 @ @ public final class AnnotationUtility { <nl> for ( DetailAST child = holder . getFirstChild ( ) ; <nl> child ! = null ; child = child . getNextSibling ( ) ) { <nl> if ( child . getType ( ) = = TokenTypes . ANNOTATION ) { <nl> - final DetailAST at = child . getFirstChild ( ) ; <nl> + final DetailAST firstChild = child . getFirstChild ( ) ; <nl> final String name = <nl> - FullIdent . createFullIdent ( at . getNextSibling ( ) ) . getText ( ) ; <nl> + FullIdent . createFullIdent ( firstChild . getNextSibling ( ) ) . getText ( ) ; <nl> if ( annotation . equals ( name ) ) { <nl> return child ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> index a121317 . . 245b219 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> @ @ - 198 , 13 + 198 , 13 @ @ public final class CommonUtils { <nl> * @ return the base class name from a fully qualified name <nl> * / <nl> public static String baseClassName ( String type ) { <nl> - final int i = type . lastIndexOf ( ' . ' ) ; <nl> + final int index = type . lastIndexOf ( ' . ' ) ; <nl> <nl> - if ( i = = - 1 ) { <nl> + if ( index = = - 1 ) { <nl> return type ; <nl> } <nl> else { <nl> - return type . substring ( i + 1 ) ; <nl> + return type . substring ( index + 1 ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> index ba4c31a . . a566ab7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java <nl> @ @ - 109 , 12 + 109 , 12 @ @ public final class JavadocUtils { <nl> final List < InvalidJavadocTag > invalidTags = Lists . newArrayList ( ) ; <nl> Pattern blockTagPattern = Pattern . compile ( " / \ \ * { 2 , } \ \ s * @ ( \ \ p { Alpha } + ) \ \ s " ) ; <nl> for ( int i = 0 ; i < text . length ; i + + ) { <nl> - final String s = text [ i ] ; <nl> - final Matcher blockTagMatcher = blockTagPattern . matcher ( s ) ; <nl> + final String textValue = text [ i ] ; <nl> + final Matcher blockTagMatcher = blockTagPattern . matcher ( textValue ) ; <nl> if ( ( tagType = = JavadocTagType . ALL | | tagType = = JavadocTagType . BLOCK ) <nl> & & blockTagMatcher . find ( ) ) { <nl> final String tagName = blockTagMatcher . group ( 1 ) ; <nl> - String content = s . substring ( blockTagMatcher . end ( 1 ) ) ; <nl> + String content = textValue . substring ( blockTagMatcher . end ( 1 ) ) ; <nl> if ( content . endsWith ( " * / " ) ) { <nl> content = content . substring ( 0 , content . length ( ) - 2 ) ; <nl> } <nl> @ @ - 149 , 10 + 149 , 10 @ @ public final class JavadocUtils { <nl> * / <nl> private static void lookForInlineTags ( TextBlock comment , int lineNumber , <nl> final List < JavadocTag > validTags , final List < InvalidJavadocTag > invalidTags ) { <nl> - final String s = comment . getText ( ) [ lineNumber ] ; <nl> + final String text = comment . getText ( ) [ lineNumber ] ; <nl> / / Match Javadoc text after comment characters <nl> final Pattern commentPattern = Pattern . compile ( " ^ \ \ s * ( ? : / \ \ * { 2 , } | \ \ * + ) \ \ s * ( . * ) " ) ; <nl> - final Matcher commentMatcher = commentPattern . matcher ( s ) ; <nl> + final Matcher commentMatcher = commentPattern . matcher ( text ) ; <nl> final String commentContents ; <nl> <nl> / / offset including comment characters <nl> @ @ - 164 , 7 + 164 , 7 @ @ public final class JavadocUtils { <nl> } <nl> else { <nl> / / No leading asterisks , still valid <nl> - commentContents = s ; <nl> + commentContents = text ; <nl> commentOffset = 0 ; <nl> } <nl> final Pattern tagPattern = Pattern . compile ( " . * ? \ \ { @ ( \ \ p { Alpha } + ) \ \ s + ( . * ? ) \ \ } " ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java <nl> index 1e8a350 . . 5e71df7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java <nl> @ @ - 42 , 13 + 42 , 13 @ @ import javax . swing . JTextArea ; <nl> import javax . swing . SwingUtilities ; <nl> import javax . swing . filechooser . FileFilter ; <nl> <nl> + import antlr . ANTLRException ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> <nl> - import antlr . ANTLRException ; <nl> - <nl> / * * <nl> * Displays information about a parse tree . <nl> * The user can change the file that is parsed and displayed

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 index 1992fb1 . . 77f9a20 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 @ @ - 61 , 12 + 61 , 12 @ @ public class DefaultLogger 
 
 / * * 
 * Creates a new { @ code DefaultLogger } instance . 
 - * @ param os where to log infos and errors 
 + * @ param outputStream where to log infos and errors 
 * @ param closeStreamsAfterUse if oS should be closed in auditFinished ( ) 
 * / 
 - public DefaultLogger ( OutputStream os , boolean closeStreamsAfterUse ) { 
 + public DefaultLogger ( OutputStream outputStream , boolean closeStreamsAfterUse ) { 
 / / no need to close oS twice 
 - this ( os , closeStreamsAfterUse , os , false ) ; 
 + this ( outputStream , closeStreamsAfterUse , outputStream , false ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index 79491ed . . 6750215 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 404 , 8 + 404 , 8 @ @ public final class Main { 
 
 / * * Prints the usage information . * * / 
 private static void printUsage ( ) { 
 - final HelpFormatter hf = new HelpFormatter ( ) ; 
 - hf . printHelp ( String . format ( " java % s [ options ] - c < config . xml > file . . . " , 
 + final HelpFormatter formatter = new HelpFormatter ( ) ; 
 + formatter . printHelp ( String . format ( " java % s [ options ] - c < config . xml > file . . . " , 
 Main . class . getName ( ) ) , buildOptions ( ) ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 index 29845be . . 863845a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PropertyCacheFile . java 
 @ @ - 197 , 10 + 197 , 10 @ @ final class PropertyCacheFile { 
 / / use a message digest here to keep the length of the 
 / / hashcode reasonable 
 
 - final MessageDigest md = MessageDigest . getInstance ( " SHA - 1 " ) ; 
 - md . update ( outputStream . toByteArray ( ) ) ; 
 + final MessageDigest digest = MessageDigest . getInstance ( " SHA - 1 " ) ; 
 + digest . update ( outputStream . toByteArray ( ) ) ; 
 
 - return hexEncode ( md . digest ( ) ) ; 
 + return hexEncode ( digest . digest ( ) ) ; 
 } 
 catch ( final IOException | NoSuchAlgorithmException ex ) { 
 / / rethrow as unchecked exception 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index 482c39b . . 856735e 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 446 , 8 + 446 , 8 @ @ public final class TreeWalker 
 public static DetailAST parse ( FileContents contents ) 
 throws RecognitionException , TokenStreamException { 
 final String fullText = contents . getText ( ) . getFullText ( ) . toString ( ) ; 
 - final Reader sr = new StringReader ( fullText ) ; 
 - final GeneratedJavaLexer lexer = new GeneratedJavaLexer ( sr ) ; 
 + final Reader reader = new StringReader ( fullText ) ; 
 + final GeneratedJavaLexer lexer = new GeneratedJavaLexer ( reader ) ; 
 lexer . setFilename ( contents . getFileName ( ) ) ; 
 lexer . setCommentListener ( contents ) ; 
 lexer . setTreatAssertAsKeyword ( true ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 index d47f0a0 . . b87e278 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 @ @ - 62 , 20 + 62 , 20 @ @ public class XMLLogger 
 / * * 
 * Creates a new { @ code XMLLogger } instance . 
 * Sets the output to a defined stream . 
 - * @ param os the stream to write logs to . 
 + * @ param outputStream the stream to write logs to . 
 * @ param closeStream close oS in auditFinished 
 * / 
 - public XMLLogger ( OutputStream os , boolean closeStream ) { 
 - setOutputStream ( os ) ; 
 + public XMLLogger ( OutputStream outputStream , boolean closeStream ) { 
 + setOutputStream ( outputStream ) ; 
 this . closeStream = closeStream ; 
 } 
 
 / * * 
 * Sets the OutputStream . 
 - * @ param oS the OutputStream to use 
 + * @ param outputStream the OutputStream to use 
 * * / 
 - private void setOutputStream ( OutputStream oS ) { 
 - final OutputStreamWriter osw = new OutputStreamWriter ( oS , StandardCharsets . UTF _ 8 ) ; 
 + private void setOutputStream ( OutputStream outputStream ) { 
 + final OutputStreamWriter osw = new OutputStreamWriter ( outputStream , StandardCharsets . UTF _ 8 ) ; 
 writer = new PrintWriter ( osw ) ; 
 } 
 
 @ @ - 133 , 15 + 133 , 15 @ @ public class XMLLogger 
 
 @ Override 
 public void addException ( AuditEvent evt , Throwable throwable ) { 
 - final StringWriter sw = new StringWriter ( ) ; 
 - final PrintWriter pw = new PrintWriter ( sw ) ; 
 - pw . println ( " < exception > " ) ; 
 - pw . println ( " < ! [ CDATA [ " ) ; 
 - throwable . printStackTrace ( pw ) ; 
 - pw . println ( " ] ] > " ) ; 
 - pw . println ( " < / exception > " ) ; 
 - pw . flush ( ) ; 
 - writer . println ( encode ( sw . toString ( ) ) ) ; 
 + final StringWriter stringWriter = new StringWriter ( ) ; 
 + final PrintWriter printer = new PrintWriter ( stringWriter ) ; 
 + printer . println ( " < exception > " ) ; 
 + printer . println ( " < ! [ CDATA [ " ) ; 
 + throwable . printStackTrace ( printer ) ; 
 + printer . println ( " ] ] > " ) ; 
 + printer . println ( " < / exception > " ) ; 
 + printer . flush ( ) ; 
 + this . writer . println ( encode ( stringWriter . toString ( ) ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 index 0cb8724 . . 6ca2f03 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 @ @ - 150 , 10 + 150 , 10 @ @ public class CheckstyleAntTask extends Task { 
 
 / * * 
 * Adds set of files ( nested fileset attribute ) . 
 - * @ param fS the file set to add 
 + * @ param fileSet the file set to add 
 * / 
 - public void addFileset ( FileSet fS ) { 
 - fileSets . add ( fS ) ; 
 + public void addFileset ( FileSet fileSet ) { 
 + fileSets . add ( fileSet ) ; 
 } 
 
 / * * 
 @ @ - 357 , 10 + 357 , 10 @ @ public class CheckstyleAntTask extends Task { 
 throw new BuildException ( " Unable to process files : " + files , e ) ; 
 } 
 final int numWarnings = warningCounter . getCount ( ) ; 
 - final boolean ok = numErrs < = maxErrors & & numWarnings < = maxWarnings ; 
 + final boolean okStatus = numErrs < = maxErrors & & numWarnings < = maxWarnings ; 
 
 / / Handle the return status 
 - if ( ! ok ) { 
 + if ( ! okStatus ) { 
 final String failureMsg = 
 " Got " + numErrs + " errors and " + numWarnings 
 + " warnings . " ; 
 @ @ - 491 , 16 + 491 , 16 @ @ public class CheckstyleAntTask extends Task { 
 list . add ( new File ( fileName ) ) ; 
 } 
 for ( int i = 0 ; i < fileSets . size ( ) ; i + + ) { 
 - final FileSet fs = fileSets . get ( i ) ; 
 - final DirectoryScanner ds = fs . getDirectoryScanner ( getProject ( ) ) ; 
 - ds . scan ( ) ; 
 + final FileSet fileSet = fileSets . get ( i ) ; 
 + final DirectoryScanner scanner = fileSet . getDirectoryScanner ( getProject ( ) ) ; 
 + scanner . scan ( ) ; 
 
 - final String [ ] names = ds . getIncludedFiles ( ) ; 
 + final String [ ] names = scanner . getIncludedFiles ( ) ; 
 log ( i + " ) Adding " + names . length + " files from directory " 
 - + ds . getBasedir ( ) , Project . MSG _ VERBOSE ) ; 
 + + scanner . getBasedir ( ) , Project . MSG _ VERBOSE ) ; 
 
 for ( String element : names ) { 
 - final String pathname = ds . getBasedir ( ) + File . separator 
 + final String pathname = scanner . getBasedir ( ) + File . separator 
 + element ; 
 list . add ( new File ( pathname ) ) ; 
 } 
 @ @ - 550 , 10 + 550 , 10 @ @ public class CheckstyleAntTask extends Task { 
 
 / * * 
 * Set the file to output to . 
 - * @ param to the file to output to 
 + * @ TreeWalker : 262param destination the file to output to 
 * / 
 - public void setTofile ( File to ) { 
 - toFile = to ; 
 + public void setTofile ( File destination ) { 
 + toFile = destination ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java 
 index 9cca497 . . ef9cfb3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractLoader . java 
 @ @ - 116 , 12 + 116 , 12 @ @ public abstract class AbstractLoader 
 } 
 
 @ Override 
 - public void error ( SAXParseException ex ) throws SAXException { 
 - throw ex ; 
 + public void error ( SAXParseException exception ) throws SAXException { 
 + throw exception ; 
 } 
 
 @ Override 
 - public void fatalError ( SAXParseException ex ) throws SAXException { 
 - throw ex ; 
 + public void fatalError ( SAXParseException exception ) throws SAXException { 
 + throw exception ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 index 4277e1d . . fb4c427 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 @ @ - 156 , 9 + 156 , 9 @ @ public class AutomaticBean 
 / / BeanUtilsBean . copyProperties silently ignores missing setters 
 / / for key , so we have to go through great lengths here to 
 / / figure out if the bean property really exists . 
 - final PropertyDescriptor pd = 
 + final PropertyDescriptor descriptor = 
 PropertyUtils . getPropertyDescriptor ( this , key ) ; 
 - if ( pd = = null ) { 
 + if ( descriptor = = null ) { 
 final String message = String . format ( " Property ' % s ' in module % s does not " 
 + " exist , please check the documentation " , key , moduleName ) ; 
 throw new CheckstyleException ( message ) ; 
 @ @ - 245 , 12 + 245 , 12 @ @ public class AutomaticBean 
 @ Override 
 public Object convert ( Class type , Object value ) { 
 / / Convert to a String and trim it for the tokenizer . 
 - final StringTokenizer st = new StringTokenizer ( 
 + final StringTokenizer tokenizer = new StringTokenizer ( 
 value . toString ( ) . trim ( ) , " , " ) ; 
 final List < String > result = Lists . newArrayList ( ) ; 
 
 - while ( st . hasMoreTokens ( ) ) { 
 - final String token = st . nextToken ( ) ; 
 + while ( tokenizer . hasMoreTokens ( ) ) { 
 + final String token = tokenizer . nextToken ( ) ; 
 result . add ( token . trim ( ) ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 index 3b46850 . . 9557a9d 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / DetailAST . java 
 @ @ - 74 , 13 + 74 , 13 @ @ public final class DetailAST extends CommonASTWithHiddenTokens { 
 
 @ Override 
 public void initialize ( AST ast ) { 
 - final DetailAST da = ( DetailAST ) ast ; 
 - setText ( da . getText ( ) ) ; 
 - setType ( da . getType ( ) ) ; 
 - lineNo = da . getLineNo ( ) ; 
 - columnNo = da . getColumnNo ( ) ; 
 - hiddenAfter = da . getHiddenAfter ( ) ; 
 - hiddenBefore = da . getHiddenBefore ( ) ; 
 + final DetailAST detailAst = ( DetailAST ) ast ; 
 + setText ( detailAst . getText ( ) ) ; 
 + setType ( detailAst . getType ( ) ) ; 
 + lineNo = detailAst . getLineNo ( ) ; 
 + columnNo = detailAst . getColumnNo ( ) ; 
 + hiddenAfter = detailAst . getHiddenAfter ( ) ; 
 + hiddenBefore = detailAst . getHiddenBefore ( ) ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java 
 index 6553ba9 . . de132ae 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileText . java 
 @ @ - 136 , 10 + 136 , 10 @ @ public final class FileText extends AbstractList < String > { 
 / / is about 30 % faster than using the 
 / / LINE _ TERMINATOR . split ( fullText , - 1 ) method 
 final ArrayList < String > textLines = new ArrayList < > ( ) ; 
 - final BufferedReader br = 
 + final BufferedReader reader = 
 new BufferedReader ( new StringReader ( fullText ) ) ; 
 while ( true ) { 
 - final String line = br . readLine ( ) ; 
 + final String line = reader . readLine ( ) ; 
 if ( line = = null ) { 
 break ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java 
 index 1a076c2 . . abbbbae 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FullIdent . java 
 @ @ - 110 , 9 + 110 , 9 @ @ public final class FullIdent { 
 * @ return a { @ code FullIdent } value 
 * / 
 public static FullIdent createFullIdent ( DetailAST ast ) { 
 - final FullIdent fi = new FullIdent ( ) ; 
 - extractFullIdent ( fi , ast ) ; 
 - return fi ; 
 + final FullIdent ident = new FullIdent ( ) ; 
 + extractFullIdent ( ident , ast ) ; 
 + return ident ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 index 8dea646 . . 01879e9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 @ @ - 322 , 9 + 322 , 9 @ @ public abstract class AbstractTypeAwareCheck extends Check { 
 if ( bounds ! = null ) { 
 final FullIdent name = 
 FullIdent . createFullIdentBelow ( bounds ) ; 
 - final AbstractClassInfo ci = 
 + final AbstractClassInfo classInfo = 
 createClassInfo ( new Token ( name ) , currentClassName ) ; 
 - paramsMap . put ( alias , ci ) ; 
 + paramsMap . put ( alias , classInfo ) ; 
 } 
 } 
 } 
 @ @ - 361 , 9 + 361 , 9 @ @ public abstract class AbstractTypeAwareCheck extends Check { 
 * / 
 protected final AbstractClassInfo createClassInfo ( final Token name , 
 final String surroundingClass ) { 
 - final AbstractClassInfo ci = findClassAlias ( name . getText ( ) ) ; 
 - if ( ci ! = null ) { 
 - return new ClassAlias ( name , ci ) ; 
 + final AbstractClassInfo classInfo = findClassAlias ( name . getText ( ) ) ; 
 + if ( classInfo ! = null ) { 
 + return new ClassAlias ( name , classInfo ) ; 
 } 
 return new RegularClass ( name , surroundingClass , this ) ; 
 } 
 @ @ - 374 , 16 + 374 , 16 @ @ public abstract class AbstractTypeAwareCheck extends Check { 
 * @ return ClassInfo for alias if it exists , null otherwise 
 * / 
 protected final AbstractClassInfo findClassAlias ( final String name ) { 
 - AbstractClassInfo ci = null ; 
 + AbstractClassInfo classInfo = null ; 
 final Iterator < Map < String , AbstractClassInfo > > iterator = typeParams . descendingIterator ( ) ; 
 while ( iterator . hasNext ( ) ) { 
 final Map < String , AbstractClassInfo > paramMap = iterator . next ( ) ; 
 - ci = paramMap . get ( name ) ; 
 - if ( ci ! = null ) { 
 + classInfo = paramMap . get ( name ) ; 
 + if ( classInfo ! = null ) { 
 break ; 
 } 
 } 
 - return ci ; 
 + return classInfo ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java 
 index 8077f3a . . 298c9ac 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java 
 @ @ - 339 , 10 + 339 , 10 @ @ public class DescendantTokenCheck extends Check { 
 / / Any tokens set by property ' tokens ' are acceptable 
 final Set < String > tokenNames = getTokenNames ( ) ; 
 final int [ ] result = new int [ tokenNames . size ( ) ] ; 
 - int i = 0 ; 
 + int index = 0 ; 
 for ( String name : tokenNames ) { 
 - result [ i ] = TokenUtils . getTokenId ( name ) ; 
 - i + + ; 
 + result [ index ] = TokenUtils . getTokenId ( name ) ; 
 + index + + ; 
 } 
 return result ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 index 2c98649 . . 3ffe485 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 @ @ - 384 , 9 + 384 , 9 @ @ public class TranslationCheck 
 props . load ( inStream ) ; 
 
 / / Gather the keys and put them into a set 
 - final Enumeration < ? > e = props . propertyNames ( ) ; 
 - while ( e . hasMoreElements ( ) ) { 
 - keys . add ( e . nextElement ( ) ) ; 
 + final Enumeration < ? > element = props . propertyNames ( ) ; 
 + while ( element . hasMoreElements ( ) ) { 
 + keys . add ( element . nextElement ( ) ) ; 
 } 
 } 
 catch ( final IOException e ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java 
 index 7a8470f . . d18934f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java 
 @ @ - 204 , 14 + 204 , 14 @ @ public final class MissingDeprecatedCheck extends Check { 
 * @ param lines all lines 
 * @ param foundBefore flag from parent method 
 * @ param currentLine current line 
 - * @ param i som index 
 + * @ param index som index 
 * @ return true if Tag is found 
 * / 
 private boolean checkTagAtTheRestOfComment ( String [ ] lines , boolean foundBefore , 
 - int currentLine , int i ) { 
 + int currentLine , int index ) { 
 
 boolean found = false ; 
 - for ( int reindex = i + 1 ; 
 + for ( int reindex = index + 1 ; 
 reindex < lines . length ; ) { 
 final Matcher multilineCont = MATCH _ DEPRECATED _ MULTILINE _ CONT . matcher ( lines [ reindex ] ) ; 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 index f2dc13c . . 1862c39 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 @ @ - 778 , 9 + 778 , 9 @ @ public class VisibilityModifierCheck 
 for ( DetailAST child = holder . getFirstChild ( ) ; 
 child ! = null ; child = child . getNextSibling ( ) ) { 
 if ( child . getType ( ) = = TokenTypes . ANNOTATION ) { 
 - final DetailAST at = child . getFirstChild ( ) ; 
 + final DetailAST ast = child . getFirstChild ( ) ; 
 final String name = 
 - FullIdent . createFullIdent ( at . getNextSibling ( ) ) . getText ( ) ; 
 + FullIdent . createFullIdent ( ast . getNextSibling ( ) ) . getText ( ) ; 
 if ( ignoreAnnotationCanonicalNames . contains ( name ) 
 | | ignoreAnnotationShortNames . contains ( name ) ) { 
 matchingAnnotation = child ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 index db156a0 . . 5016ed8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 @ @ - 88 , 9 + 88 , 9 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { 
 } 
 else { 
 int headerLineNo = 0 ; 
 - int i ; 
 - for ( i = 0 ; headerLineNo < headerSize & & i < fileSize ; i + + ) { 
 - final String line = lines . get ( i ) ; 
 + int index ; 
 + for ( index = 0 ; headerLineNo < headerSize & & index < fileSize ; index + + ) { 
 + final String line = lines . get ( index ) ; 
 boolean isMatch = isMatch ( line , headerLineNo ) ; 
 while ( ! isMatch & & isMultiLine ( headerLineNo ) ) { 
 headerLineNo + + ; 
 @ @ - 98 , 7 + 98 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { 
 | | isMatch ( line , headerLineNo ) ; 
 } 
 if ( ! isMatch ) { 
 - log ( i + 1 , MSG _ HEADER _ MISMATCH , getHeaderLines ( ) . get ( 
 + log ( index + 1 , MSG _ HEADER _ MISMATCH , getHeaderLines ( ) . get ( 
 headerLineNo ) ) ; 
 break ; 
 } 
 @ @ - 106 , 7 + 106 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { 
 headerLineNo + + ; 
 } 
 } 
 - if ( i = = fileSize ) { 
 + if ( index = = fileSize ) { 
 / / if file finished , but we have at least one non - multi - line 
 / / header isn ' t completed 
 logFirstSinglelineLine ( headerLineNo , headerSize ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java 
 index 8e15564 . . faf5384 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlLoader . java 
 @ @ - 109 , 21 + 109 , 21 @ @ final class ImportControlLoader extends AbstractLoader { 
 final boolean isLocalOnly = attributes . getValue ( " local - only " ) ! = null ; 
 final String pkg = attributes . getValue ( PKG _ ATTRIBUTE _ NAME ) ; 
 final boolean regex = attributes . getValue ( " regex " ) ! = null ; 
 - final Guard g ; 
 + final Guard guard ; 
 if ( pkg ! = null ) { 
 final boolean exactMatch = 
 attributes . getValue ( " exact - match " ) ! = null ; 
 - g = new Guard ( isAllow , isLocalOnly , pkg , exactMatch , regex ) ; 
 + guard = new Guard ( isAllow , isLocalOnly , pkg , exactMatch , regex ) ; 
 } 
 else { 
 / / handle class names which can be normal class names or regular 
 / / expressions 
 final String clazz = safeGet ( attributes , " class " ) ; 
 - g = new Guard ( isAllow , isLocalOnly , clazz , regex ) ; 
 + guard = new Guard ( isAllow , isLocalOnly , clazz , regex ) ; 
 } 
 
 - final PkgControl pc = stack . peek ( ) ; 
 - pc . addGuard ( g ) ; 
 + final PkgControl pkgControl = stack . peek ( ) ; 
 + pkgControl . addGuard ( guard ) ; 
 } 
 } 
 
 @ @ - 142 , 9 + 142 , 9 @ @ final class ImportControlLoader extends AbstractLoader { 
 * @ throws CheckstyleException if an error occurs . 
 * / 
 static PkgControl load ( final URI uri ) throws CheckstyleException { 
 - InputStream is ; 
 + InputStream inputStream ; 
 try { 
 - is = uri . toURL ( ) . openStream ( ) ; 
 + inputStream = uri . toURL ( ) . openStream ( ) ; 
 } 
 catch ( final MalformedURLException e ) { 
 throw new CheckstyleException ( " syntax error in url " + uri , e ) ; 
 @ @ - 152 , 7 + 152 , 7 @ @ final class ImportControlLoader extends AbstractLoader { 
 catch ( final IOException e ) { 
 throw new CheckstyleException ( " unable to find " + uri , e ) ; 
 } 
 - final InputSource source = new InputSource ( is ) ; 
 + final InputSource source = new InputSource ( inputStream ) ; 
 return load ( source , uri ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java 
 index 6923e40 . . 7e263fe 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / TagParser . java 
 @ @ - 198 , 17 + 198 , 17 @ @ class TagParser { 
 / * * 
 * Skips HTML comments . 
 * @ param text text of javadoc comments . 
 - * @ param from start position of HTML - comments 
 + * @ param fromPoint start position of HTML - comments 
 * @ return position after HTML - comments 
 * / 
 - private static Point skipHtmlComment ( String [ ] text , Point from ) { 
 - Point to = from ; 
 - to = findChar ( text , ' > ' , to ) ; 
 - while ( ! text [ to . getLineNo ( ) ] 
 - . substring ( 0 , to . getColumnNo ( ) + 1 ) . endsWith ( " - - > " ) ) { 
 - to = findChar ( text , ' > ' , getNextCharPos ( text , to ) ) ; 
 + private static Point skipHtmlComment ( String [ ] text , Point fromPoint ) { 
 + Point toPoint = fromPoint ; 
 + toPoint = findChar ( text , ' > ' , toPoint ) ; 
 + while ( ! text [ toPoint . getLineNo ( ) ] 
 + . substring ( 0 , toPoint . getColumnNo ( ) + 1 ) . endsWith ( " - - > " ) ) { 
 + toPoint = findChar ( text , ' > ' , getNextCharPos ( text , toPoint ) ) ; 
 } 
 - return to ; 
 + return toPoint ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java 
 index a4cdf0a . . 691cd07 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheck . java 
 @ @ - 180 , 12 + 180 , 12 @ @ public class WriteTagCheck 
 
 int tagCount = 0 ; 
 for ( int i = 0 ; i < comment . length ; i + + ) { 
 - final String s = comment [ i ] ; 
 - final Matcher matcher = tagRE . matcher ( s ) ; 
 + final String commentValue = comment [ i ] ; 
 + final Matcher matcher = tagRE . matcher ( commentValue ) ; 
 if ( matcher . find ( ) ) { 
 tagCount + = 1 ; 
 final int contentStart = matcher . start ( 1 ) ; 
 - final String content = s . substring ( contentStart ) ; 
 + final String content = commentValue . substring ( contentStart ) ; 
 if ( tagFormatRE ! = null & & ! tagFormatRE . matcher ( content ) . find ( ) ) { 
 log ( lineNo + i - comment . length , TAG _ FORMAT , tag , tagFormat ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java 
 index 173d107 . . caf4ca0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java 
 @ @ - 139 , 16 + 139 , 16 @ @ public class ModifierOrderCheck 
 * modifier AST . 
 * / 
 static DetailAST checkOrderSuggestedByJLS ( List < DetailAST > modifiers ) { 
 - final Iterator < DetailAST > it = modifiers . iterator ( ) ; 
 + final Iterator < DetailAST > iterator = modifiers . iterator ( ) ; 
 
 / / Speed past all initial annotations 
 - DetailAST modifier = skipAnnotations ( it ) ; 
 + DetailAST modifier = skipAnnotations ( iterator ) ; 
 
 DetailAST offendingModifier = null ; 
 
 / / All modifiers are annotations , no problem 
 if ( modifier . getType ( ) ! = TokenTypes . ANNOTATION ) { 
 - int i = 0 ; 
 + int index = 0 ; 
 
 while ( modifier ! = null 
 & & offendingModifier = = null ) { 
 @ @ - 159 , 17 + 159 , 17 @ @ public class ModifierOrderCheck 
 break ; 
 } 
 
 - while ( i < JLS _ ORDER . length 
 - & & ! JLS _ ORDER [ i ] . equals ( modifier . getText ( ) ) ) { 
 - i + + ; 
 + while ( index < JLS _ ORDER . length 
 + & & ! JLS _ ORDER [ index ] . equals ( modifier . getText ( ) ) ) { 
 + index + + ; 
 } 
 
 - if ( i = = JLS _ ORDER . length ) { 
 + if ( index = = JLS _ ORDER . length ) { 
 / / Current modifier is out of JLS order 
 offendingModifier = modifier ; 
 } 
 - else if ( it . hasNext ( ) ) { 
 - modifier = it . next ( ) ; 
 + else if ( iterator . hasNext ( ) ) { 
 + modifier = iterator . next ( ) ; 
 } 
 else { 
 / / Reached end of modifiers without problem 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheck . java 
 index 7c5473f . . 552990f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / OuterTypeNumberCheck . java 
 @ @ - 86 , 9 + 86 , 9 @ @ public class OuterTypeNumberCheck extends Check { 
 
 / * * 
 * Sets the maximum allowed number of outer types . 
 - * @ param to the new number . 
 + * @ param max the new number . 
 * / 
 - public void setMax ( int to ) { 
 - max = to ; 
 + public void setMax ( int max ) { 
 + this . max = max ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDoclet . java b / src / main / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDoclet . java 
 index 11ebcb6 . . f3cdc07 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDoclet . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / doclets / TokenTypesDoclet . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public final class TokenTypesDoclet { 
 final String fileName = getDestFileName ( root . options ( ) ) ; 
 final FileOutputStream fos = new FileOutputStream ( fileName ) ; 
 final Writer osw = new OutputStreamWriter ( fos , StandardCharsets . UTF _ 8 ) ; 
 - final PrintWriter pw = new PrintWriter ( osw , false ) ; 
 + final PrintWriter writer = new PrintWriter ( osw , false ) ; 
 
 try { 
 final ClassDoc [ ] classes = root . classes ( ) ; 
 @ @ - 72 , 13 + 72 , 13 @ @ public final class TokenTypesDoclet { 
 final String message = " Should be only one tag . " ; 
 throw new IllegalArgumentException ( message ) ; 
 } 
 - pw . println ( field . name ( ) + " = " 
 - + field . firstSentenceTags ( ) [ 0 ] . text ( ) ) ; 
 + writer . println ( field . name ( ) + " = " 
 + + field . firstSentenceTags ( ) [ 0 ] . text ( ) ) ; 
 } 
 } 
 } 
 finally { 
 - pw . close ( ) ; 
 + writer . close ( ) ; 
 } 
 
 return true ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java 
 index b000607 . . 98d99a8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java 
 @ @ - 157 , 9 + 157 , 9 @ @ public final class AnnotationUtility { 
 for ( DetailAST child = holder . getFirstChild ( ) ; 
 child ! = null ; child = child . getNextSibling ( ) ) { 
 if ( child . getType ( ) = = TokenTypes . ANNOTATION ) { 
 - final DetailAST at = child . getFirstChild ( ) ; 
 + final DetailAST firstChild = child . getFirstChild ( ) ; 
 final String name = 
 - FullIdent . createFullIdent ( at . getNextSibling ( ) ) . getText ( ) ; 
 + FullIdent . createFullIdent ( firstChild . getNextSibling ( ) ) . getText ( ) ; 
 if ( annotation . equals ( name ) ) { 
 return child ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 index a121317 . . 245b219 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 @ @ - 198 , 13 + 198 , 13 @ @ public final class CommonUtils { 
 * @ return the base class name from a fully qualified name 
 * / 
 public static String baseClassName ( String type ) { 
 - final int i = type . lastIndexOf ( ' . ' ) ; 
 + final int index = type . lastIndexOf ( ' . ' ) ; 
 
 - if ( i = = - 1 ) { 
 + if ( index = = - 1 ) { 
 return type ; 
 } 
 else { 
 - return type . substring ( i + 1 ) ; 
 + return type . substring ( index + 1 ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 index ba4c31a . . a566ab7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtils . java 
 @ @ - 109 , 12 + 109 , 12 @ @ public final class JavadocUtils { 
 final List < InvalidJavadocTag > invalidTags = Lists . newArrayList ( ) ; 
 Pattern blockTagPattern = Pattern . compile ( " / \ \ * { 2 , } \ \ s * @ ( \ \ p { Alpha } + ) \ \ s " ) ; 
 for ( int i = 0 ; i < text . length ; i + + ) { 
 - final String s = text [ i ] ; 
 - final Matcher blockTagMatcher = blockTagPattern . matcher ( s ) ; 
 + final String textValue = text [ i ] ; 
 + final Matcher blockTagMatcher = blockTagPattern . matcher ( textValue ) ; 
 if ( ( tagType = = JavadocTagType . ALL | | tagType = = JavadocTagType . BLOCK ) 
 & & blockTagMatcher . find ( ) ) { 
 final String tagName = blockTagMatcher . group ( 1 ) ; 
 - String content = s . substring ( blockTagMatcher . end ( 1 ) ) ; 
 + String content = textValue . substring ( blockTagMatcher . end ( 1 ) ) ; 
 if ( content . endsWith ( " * / " ) ) { 
 content = content . substring ( 0 , content . length ( ) - 2 ) ; 
 } 
 @ @ - 149 , 10 + 149 , 10 @ @ public final class JavadocUtils { 
 * / 
 private static void lookForInlineTags ( TextBlock comment , int lineNumber , 
 final List < JavadocTag > validTags , final List < InvalidJavadocTag > invalidTags ) { 
 - final String s = comment . getText ( ) [ lineNumber ] ; 
 + final String text = comment . getText ( ) [ lineNumber ] ; 
 / / Match Javadoc text after comment characters 
 final Pattern commentPattern = Pattern . compile ( " ^ \ \ s * ( ? : / \ \ * { 2 , } | \ \ * + ) \ \ s * ( . * ) " ) ; 
 - final Matcher commentMatcher = commentPattern . matcher ( s ) ; 
 + final Matcher commentMatcher = commentPattern . matcher ( text ) ; 
 final String commentContents ; 
 
 / / offset including comment characters 
 @ @ - 164 , 7 + 164 , 7 @ @ public final class JavadocUtils { 
 } 
 else { 
 / / No leading asterisks , still valid 
 - commentContents = s ; 
 + commentContents = text ; 
 commentOffset = 0 ; 
 } 
 final Pattern tagPattern = Pattern . compile ( " . * ? \ \ { @ ( \ \ p { Alpha } + ) \ \ s + ( . * ? ) \ \ } " ) ;

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java 
 index 1e8a350 . . 5e71df7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java 
 @ @ - 42 , 13 + 42 , 13 @ @ import javax . swing . JTextArea ; 
 import javax . swing . SwingUtilities ; 
 import javax . swing . filechooser . FileFilter ; 
 
 + import antlr . ANTLRException ; 
 + 
 import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 
 - import antlr . ANTLRException ; 
 - 
 / * * 
 * Displays information about a parse tree . 
 * The user can change the file that is parsed and displayed
