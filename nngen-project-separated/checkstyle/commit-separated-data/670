BLEU SCORE: 0.0403311308263466

TEST MSG: Issue # 4726 : fix easy cases of the fifth part of idea violations
GENERATED MSG: Issue # 4250 : suppression of some IntellijIdea inspections till GSoC project completion , to let TC web service pass the build

TEST DIFF (one line): diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index e46928f . . 8840803 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 364 , 9 + 364 , 8 @ @ <nl> < inspection _ tool class = " CollectionAddedToSelf " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CollectionContainsUrl " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " CollectionsFieldAccessReplaceableByMethodCall " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> - < inspection _ tool class = " CollectionsMustHaveInitialCapacity " enabled = " false " level = " WARNING " enabled _ by _ default = " true " > <nl> - < scope name = " Tests " level = " WARNING " enabled = " false " / > <nl> - < / inspection _ tool > <nl> + < ! - - we do not know initial size in most cases , it could make uncovered mutation problems for pitest that value more - - > <nl> + < inspection _ tool class = " CollectionsMustHaveInitialCapacity " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " CommaExpressionJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ComparableImplementedButEqualsNotOverridden " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ComparatorMethodParameterNotUsed " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 394 , 7 + 393 , 8 @ @ <nl> < inspection _ tool class = " ConstantAssertCondition " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ConstantConditionalExpression " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ConstantConditionalExpressionJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> - < inspection _ tool class = " ConstantConditions " enabled = " false " level = " WARNING " enabled _ by _ default = " false " > <nl> + < inspection _ tool class = " ConstantConditions " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > <nl> + < scope name = " Tests " enabled = " false " / > <nl> < option name = " SUGGEST _ NULLABLE _ ANNOTATIONS " value = " false " / > <nl> < option name = " DONT _ REPORT _ TRUE _ ASSERT _ STATEMENTS " value = " false " / > <nl> < / inspection _ tool > <nl> @ @ - 547 , 10 + 547 , 11 @ @ <nl> < option name = " ignoreMethodCalls " value = " false " / > <nl> < / inspection _ tool > <nl> < inspection _ tool class = " DuplicateConditionJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> - < inspection _ tool class = " DuplicatePropertyInspection " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> + < inspection _ tool class = " DuplicatePropertyInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> < option name = " CURRENT _ FILE " value = " true " / > <nl> < option name = " MODULE _ WITH _ DEPENDENCIES " value = " false " / > <nl> - < option name = " CHECK _ DUPLICATE _ VALUES " value = " true " / > <nl> + < ! - - Different properties could have the same value , but could change at any time . - - > <nl> + < option name = " CHECK _ DUPLICATE _ VALUES " value = " false " / > <nl> < option name = " CHECK _ DUPLICATE _ KEYS " value = " true " / > <nl> < option name = " CHECK _ DUPLICATE _ KEYS _ WITH _ DIFFERENT _ VALUES " value = " true " / > <nl> < / inspection _ tool > <nl> @ @ - 935 , 9 + 936 , 9 @ @ <nl> < option name = " ignoreToString " value = " false " / > <nl> < option name = " nonNlsCommentPattern " value = " NON - NLS " / > <nl> < / inspection _ tool > <nl> - < inspection _ tool class = " HardcodedFileSeparators " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> - < option name = " m _ recognizeExampleMediaType " value = " false " / > <nl> - < / inspection _ tool > <nl> + < ! - - there are too much false positives in RegExps and javadoc start / end symbols in paths from classpath etc . - - > <nl> + < inspection _ tool class = " HardcodedFileSeparators " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> + < ! - - there are too much false positives in RegExps and javadoc start / end symbols in paths from classpath etc . - - > <nl> < inspection _ tool class = " HardcodedLineSeparators " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " HardwiredNamespacePrefix " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " HashCodeUsesNonFinalVariable " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> @ @ - 1269 , 6 + 1270 , 9 @ @ <nl> < option name = " ignoreLibraryCalls " value = " true " / > <nl> < / inspection _ tool > <nl> < inspection _ tool class = " LengthOneStringInIndexOf " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> + < ! - - it is not critical parts of our application and benefit is minimal and only for special applications <nl> + that use such concatenations alot - <nl> + https : / / stackoverflow . com / questions / 24859500 / concatenate - char - literal - x - vs - single - char - string - literal - x - - > <nl> < inspection _ tool class = " LengthOneStringsInConcatenation " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " LessResolvedByNameOnly " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " LessUnresolvedMixin " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> @ @ - 1317 , 6 + 1321 , 7 @ @ <nl> < inspection _ tool class = " LossyEncoding " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " MVCPathVariableInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " MagicCharacter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> + < ! - - false positive is reported , we have enough of MagicNumber validations - - > <nl> < inspection _ tool class = " MagicConstant " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " MagicNumber " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> < scope name = " Tests " level = " ERROR " enabled = " false " / > <nl> @ @ - 1543 , 12 + 1548 , 10 @ @ <nl> < inspection _ tool class = " NumericOverflow " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " NumericToString " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ObjectAllocationIgnoredJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> + < ! - - no options in inspection , there are number of wontfix cases : creation of wrappers etc . - - > <nl> < inspection _ tool class = " ObjectAllocationInLoop " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> - < inspection _ tool class = " ObjectEquality " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> - < option name = " m _ ignoreEnums " value = " true " / > <nl> - < option name = " m _ ignoreClassObjects " value = " false " / > <nl> - < option name = " m _ ignorePrivateConstructors " value = " false " / > <nl> - < / inspection _ tool > <nl> + < ! - - we like comparison of DetailAst by = = , probably one day we will be punished for this - - > <nl> + < inspection _ tool class = " ObjectEquality " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " ObjectEqualsNull " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ObjectNotify " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ObjectToString " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> @ @ - 1774 , 12 + 1777 , 8 @ @ <nl> < inspection _ tool class = " ResultSetIndexZero " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ReturnFromFinallyBlock " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ReturnFromFinallyBlockJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> - < inspection _ tool class = " ReturnNull " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> - < option name = " m _ reportObjectMethods " value = " true " / > <nl> - < option name = " m _ reportArrayMethods " value = " true " / > <nl> - < option name = " m _ reportCollectionMethods " value = " true " / > <nl> - < option name = " m _ ignorePrivateMethods " value = " false " / > <nl> - < / inspection _ tool > <nl> + < ! - - we are not ready to migrate to java . util . Optional for now - - > <nl> + < inspection _ tool class = " ReturnNull " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " ReturnOfCollectionField " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > <nl> < option name = " ignorePrivateMethods " value = " true " / > <nl> < / inspection _ tool > <nl> @ @ - 2051 , 11 + 2050 , 12 @ @ <nl> < option value = " NoopMethodInAbstractClass " / > <nl> < ! - - Main class is a wrapper command line program for the Checker - - > <nl> < option value = " UseOfSystemOutOrSystemErr " / > <nl> + < option value = " SuspiciousArrayCast " / > <nl> < / list > <nl> < / option > <nl> < / inspection _ tool > <nl> < inspection _ tool class = " SuspiciousArrayCast " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > <nl> - < scope name = " Production " level = " WARNING " enabled = " false " / > <nl> + < scope name = " Production " level = " WARNING " enabled = " true " / > <nl> < / inspection _ tool > <nl> < inspection _ tool class = " SuspiciousGetterSetter " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> < option name = " onlyWarnWhenFieldPresent " value = " true " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java <nl> index ebf78be . . ad29a2b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java <nl> @ @ - 183 , 6 + 183 , 7 @ @ public class JavadocDetailNodeParser { <nl> * <nl> * @ param parseTreeNode root node of ParseTree <nl> * @ return root of DetailNode tree <nl> + * @ noinspection SuspiciousArrayCast <nl> * / <nl> private DetailNode convertParseTreeToDetailNode ( ParseTree parseTreeNode ) { <nl> final JavadocNodeImpl rootJavadocNode = createRootJavadocNode ( parseTreeNode ) ;
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java <nl> index 9f20cca . . 0a0bb70 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java <nl> @ @ - 35 , 7 + 35 , 7 @ @ public class CovariantEqualsCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator + " covariantequals " + File . separator + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 51 , 7 + 51 , 7 @ @ public class CovariantEqualsCheckTest <nl> " 134 : 20 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 138 : 9 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputCovariant . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputCovariantEquals . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputCovariant . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputCovariant . java <nl> deleted file mode 100644 <nl> index f0e2f25 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputCovariant . java <nl> + + + / dev / null <nl> @ @ - 1 , 141 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - / * * <nl> - * Test file for covariant equals methods . <nl> - * @ author Rick Giles <nl> - * / <nl> - public class InputCovariant <nl> - { <nl> - private class Inner <nl> - { <nl> - public boolean equals ( Inner aInner ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - private class Inner2 <nl> - { <nl> - public boolean equals ( Inner2 aInner2 ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - public boolean equals ( Object aObj ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - public boolean equals ( InputCovariant aInputCovariant ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - class InputCovariant2 <nl> - { <nl> - public boolean equals ( InputCovariant2 aInputCovariant2 ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - public boolean equals ( Object aObject ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - class InputCovariant3 <nl> - { <nl> - public boolean equals ( InputCovariant3 aInputCovariant3 ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - public boolean equals ( java . lang . Object aObject ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - class InputCovariant4 <nl> - { <nl> - public boolean equals ( int i ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - class AnonymousIC <nl> - { <nl> - Comparable comp = new Comparable ( ) <nl> - { <nl> - public int compareTo ( Object aObject ) <nl> - { <nl> - return 0 ; <nl> - } <nl> - public boolean equals ( String aString ) <nl> - { <nl> - return false ; <nl> - } <nl> - } ; <nl> - <nl> - public boolean equals ( Object aObject ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - public void method ( ) <nl> - { <nl> - Double d = new Double ( 1 ) ; <nl> - } <nl> - } <nl> - <nl> - abstract class InputCovariant5 <nl> - { <nl> - public abstract boolean equals ( InputCovariant4 aInputCovariant4 ) ; <nl> - } <nl> - <nl> - interface InputCovariant6 <nl> - { <nl> - public boolean equals ( InputCovariant5 aInputCovariant5 ) ; <nl> - } <nl> - <nl> - class InputGenericCovariant7 <nl> - { <nl> - public < A > boolean equals ( InputGenericCovariant7 aInputCovariant7 ) <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - public boolean equals ( Object aObject ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - class InputGenericCovariant8 <nl> - { <nl> - public < A > boolean equals ( InputGenericCovariant8 aInputCovariant8 ) <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - public boolean equals ( Object aObject ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - enum InputEnumCovariant { <nl> - EQUALS ; <nl> - <nl> - public boolean equals ( InputEnumCovariant inputEnumCovariant ) { <nl> - return false ; <nl> - } <nl> - <nl> - int equals ( Integer integer ) { <nl> - return 0 ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / covariantequals / InputCovariantEquals . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / covariantequals / InputCovariantEquals . java <nl> new file mode 100644 <nl> index 0000000 . . b011ef0 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / covariantequals / InputCovariantEquals . java <nl> @ @ - 0 , 0 + 1 , 141 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . covariantequals ; <nl> + <nl> + / * * <nl> + * Test file for covariant equals methods . <nl> + * @ author Rick Giles <nl> + * / <nl> + public class InputCovariantEquals <nl> + { <nl> + private class Inner <nl> + { <nl> + public boolean equals ( Inner aInner ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + private class Inner2 <nl> + { <nl> + public boolean equals ( Inner2 aInner2 ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public boolean equals ( Object aObj ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + public boolean equals ( InputCovariantEquals aInputCovariantEquals ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + class InputCovariant2 <nl> + { <nl> + public boolean equals ( InputCovariant2 aInputCovariant2 ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public boolean equals ( Object aObject ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + class InputCovariant3 <nl> + { <nl> + public boolean equals ( InputCovariant3 aInputCovariant3 ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public boolean equals ( java . lang . Object aObject ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + class InputCovariant4 <nl> + { <nl> + public boolean equals ( int i ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + class AnonymousIC <nl> + { <nl> + Comparable comp = new Comparable ( ) <nl> + { <nl> + public int compareTo ( Object aObject ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + public boolean equals ( String aString ) <nl> + { <nl> + return false ; <nl> + } <nl> + } ; <nl> + <nl> + public boolean equals ( Object aObject ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public void method ( ) <nl> + { <nl> + Double d = new Double ( 1 ) ; <nl> + } <nl> + } <nl> + <nl> + abstract class InputCovariant5 <nl> + { <nl> + public abstract boolean equals ( InputCovariant4 aInputCovariant4 ) ; <nl> + } <nl> + <nl> + interface InputCovariant6 <nl> + { <nl> + public boolean equals ( InputCovariant5 aInputCovariant5 ) ; <nl> + } <nl> + <nl> + class InputGenericCovariant7 <nl> + { <nl> + public < A > boolean equals ( InputGenericCovariant7 aInputCovariant7 ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + public boolean equals ( Object aObject ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + class InputGenericCovariant8 <nl> + { <nl> + public < A > boolean equals ( InputGenericCovariant8 aInputCovariant8 ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + public boolean equals ( Object aObject ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + enum InputEnumCovariant { <nl> + EQUALS ; <nl> + <nl> + public boolean equals ( InputEnumCovariant inputEnumCovariant ) { <nl> + return false ; <nl> + } <nl> + <nl> + int equals ( Integer integer ) { <nl> + return 0 ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index e46928f . . 8840803 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 364 , 9 + 364 , 8 @ @ 
 < inspection _ tool class = " CollectionAddedToSelf " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CollectionContainsUrl " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " CollectionsFieldAccessReplaceableByMethodCall " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 - < inspection _ tool class = " CollectionsMustHaveInitialCapacity " enabled = " false " level = " WARNING " enabled _ by _ default = " true " > 
 - < scope name = " Tests " level = " WARNING " enabled = " false " / > 
 - < / inspection _ tool > 
 + < ! - - we do not know initial size in most cases , it could make uncovered mutation problems for pitest that value more - - > 
 + < inspection _ tool class = " CollectionsMustHaveInitialCapacity " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " CommaExpressionJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ComparableImplementedButEqualsNotOverridden " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ComparatorMethodParameterNotUsed " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 394 , 7 + 393 , 8 @ @ 
 < inspection _ tool class = " ConstantAssertCondition " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ConstantConditionalExpression " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ConstantConditionalExpressionJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 - < inspection _ tool class = " ConstantConditions " enabled = " false " level = " WARNING " enabled _ by _ default = " false " > 
 + < inspection _ tool class = " ConstantConditions " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > 
 + < scope name = " Tests " enabled = " false " / > 
 < option name = " SUGGEST _ NULLABLE _ ANNOTATIONS " value = " false " / > 
 < option name = " DONT _ REPORT _ TRUE _ ASSERT _ STATEMENTS " value = " false " / > 
 < / inspection _ tool > 
 @ @ - 547 , 10 + 547 , 11 @ @ 
 < option name = " ignoreMethodCalls " value = " false " / > 
 < / inspection _ tool > 
 < inspection _ tool class = " DuplicateConditionJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 - < inspection _ tool class = " DuplicatePropertyInspection " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 + < inspection _ tool class = " DuplicatePropertyInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 < option name = " CURRENT _ FILE " value = " true " / > 
 < option name = " MODULE _ WITH _ DEPENDENCIES " value = " false " / > 
 - < option name = " CHECK _ DUPLICATE _ VALUES " value = " true " / > 
 + < ! - - Different properties could have the same value , but could change at any time . - - > 
 + < option name = " CHECK _ DUPLICATE _ VALUES " value = " false " / > 
 < option name = " CHECK _ DUPLICATE _ KEYS " value = " true " / > 
 < option name = " CHECK _ DUPLICATE _ KEYS _ WITH _ DIFFERENT _ VALUES " value = " true " / > 
 < / inspection _ tool > 
 @ @ - 935 , 9 + 936 , 9 @ @ 
 < option name = " ignoreToString " value = " false " / > 
 < option name = " nonNlsCommentPattern " value = " NON - NLS " / > 
 < / inspection _ tool > 
 - < inspection _ tool class = " HardcodedFileSeparators " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 - < option name = " m _ recognizeExampleMediaType " value = " false " / > 
 - < / inspection _ tool > 
 + < ! - - there are too much false positives in RegExps and javadoc start / end symbols in paths from classpath etc . - - > 
 + < inspection _ tool class = " HardcodedFileSeparators " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 + < ! - - there are too much false positives in RegExps and javadoc start / end symbols in paths from classpath etc . - - > 
 < inspection _ tool class = " HardcodedLineSeparators " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " HardwiredNamespacePrefix " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " HashCodeUsesNonFinalVariable " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 @ @ - 1269 , 6 + 1270 , 9 @ @ 
 < option name = " ignoreLibraryCalls " value = " true " / > 
 < / inspection _ tool > 
 < inspection _ tool class = " LengthOneStringInIndexOf " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 + < ! - - it is not critical parts of our application and benefit is minimal and only for special applications 
 + that use such concatenations alot - 
 + https : / / stackoverflow . com / questions / 24859500 / concatenate - char - literal - x - vs - single - char - string - literal - x - - > 
 < inspection _ tool class = " LengthOneStringsInConcatenation " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " LessResolvedByNameOnly " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " LessUnresolvedMixin " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 @ @ - 1317 , 6 + 1321 , 7 @ @ 
 < inspection _ tool class = " LossyEncoding " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " MVCPathVariableInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " MagicCharacter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 + < ! - - false positive is reported , we have enough of MagicNumber validations - - > 
 < inspection _ tool class = " MagicConstant " enabled = " false " level = " WARNING " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " MagicNumber " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 < scope name = " Tests " level = " ERROR " enabled = " false " / > 
 @ @ - 1543 , 12 + 1548 , 10 @ @ 
 < inspection _ tool class = " NumericOverflow " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " NumericToString " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ObjectAllocationIgnoredJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 + < ! - - no options in inspection , there are number of wontfix cases : creation of wrappers etc . - - > 
 < inspection _ tool class = " ObjectAllocationInLoop " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 - < inspection _ tool class = " ObjectEquality " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 - < option name = " m _ ignoreEnums " value = " true " / > 
 - < option name = " m _ ignoreClassObjects " value = " false " / > 
 - < option name = " m _ ignorePrivateConstructors " value = " false " / > 
 - < / inspection _ tool > 
 + < ! - - we like comparison of DetailAst by = = , probably one day we will be punished for this - - > 
 + < inspection _ tool class = " ObjectEquality " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " ObjectEqualsNull " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ObjectNotify " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ObjectToString " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 @ @ - 1774 , 12 + 1777 , 8 @ @ 
 < inspection _ tool class = " ResultSetIndexZero " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ReturnFromFinallyBlock " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ReturnFromFinallyBlockJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 - < inspection _ tool class = " ReturnNull " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 - < option name = " m _ reportObjectMethods " value = " true " / > 
 - < option name = " m _ reportArrayMethods " value = " true " / > 
 - < option name = " m _ reportCollectionMethods " value = " true " / > 
 - < option name = " m _ ignorePrivateMethods " value = " false " / > 
 - < / inspection _ tool > 
 + < ! - - we are not ready to migrate to java . util . Optional for now - - > 
 + < inspection _ tool class = " ReturnNull " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " ReturnOfCollectionField " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > 
 < option name = " ignorePrivateMethods " value = " true " / > 
 < / inspection _ tool > 
 @ @ - 2051 , 11 + 2050 , 12 @ @ 
 < option value = " NoopMethodInAbstractClass " / > 
 < ! - - Main class is a wrapper command line program for the Checker - - > 
 < option value = " UseOfSystemOutOrSystemErr " / > 
 + < option value = " SuspiciousArrayCast " / > 
 < / list > 
 < / option > 
 < / inspection _ tool > 
 < inspection _ tool class = " SuspiciousArrayCast " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > 
 - < scope name = " Production " level = " WARNING " enabled = " false " / > 
 + < scope name = " Production " level = " WARNING " enabled = " true " / > 
 < / inspection _ tool > 
 < inspection _ tool class = " SuspiciousGetterSetter " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 < option name = " onlyWarnWhenFieldPresent " value = " true " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java 
 index ebf78be . . ad29a2b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java 
 @ @ - 183 , 6 + 183 , 7 @ @ public class JavadocDetailNodeParser { 
 * 
 * @ param parseTreeNode root node of ParseTree 
 * @ return root of DetailNode tree 
 + * @ noinspection SuspiciousArrayCast 
 * / 
 private DetailNode convertParseTreeToDetailNode ( ParseTree parseTreeNode ) { 
 final JavadocNodeImpl rootJavadocNode = createRootJavadocNode ( parseTreeNode ) ;

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java 
 index 9f20cca . . 0a0bb70 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheckTest . java 
 @ @ - 35 , 7 + 35 , 7 @ @ public class CovariantEqualsCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator + " covariantequals " + File . separator + filename ) ; 
 } 
 
 @ Test 
 @ @ - 51 , 7 + 51 , 7 @ @ public class CovariantEqualsCheckTest 
 " 134 : 20 : " + getCheckMessage ( MSG _ KEY ) , 
 " 138 : 9 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputCovariant . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputCovariantEquals . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputCovariant . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputCovariant . java 
 deleted file mode 100644 
 index f0e2f25 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputCovariant . java 
 + + + / dev / null 
 @ @ - 1 , 141 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - / * * 
 - * Test file for covariant equals methods . 
 - * @ author Rick Giles 
 - * / 
 - public class InputCovariant 
 - { 
 - private class Inner 
 - { 
 - public boolean equals ( Inner aInner ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - private class Inner2 
 - { 
 - public boolean equals ( Inner2 aInner2 ) 
 - { 
 - return false ; 
 - } 
 - 
 - public boolean equals ( Object aObj ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - public boolean equals ( InputCovariant aInputCovariant ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - class InputCovariant2 
 - { 
 - public boolean equals ( InputCovariant2 aInputCovariant2 ) 
 - { 
 - return false ; 
 - } 
 - 
 - public boolean equals ( Object aObject ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - class InputCovariant3 
 - { 
 - public boolean equals ( InputCovariant3 aInputCovariant3 ) 
 - { 
 - return false ; 
 - } 
 - 
 - public boolean equals ( java . lang . Object aObject ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - class InputCovariant4 
 - { 
 - public boolean equals ( int i ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - class AnonymousIC 
 - { 
 - Comparable comp = new Comparable ( ) 
 - { 
 - public int compareTo ( Object aObject ) 
 - { 
 - return 0 ; 
 - } 
 - public boolean equals ( String aString ) 
 - { 
 - return false ; 
 - } 
 - } ; 
 - 
 - public boolean equals ( Object aObject ) 
 - { 
 - return false ; 
 - } 
 - 
 - public void method ( ) 
 - { 
 - Double d = new Double ( 1 ) ; 
 - } 
 - } 
 - 
 - abstract class InputCovariant5 
 - { 
 - public abstract boolean equals ( InputCovariant4 aInputCovariant4 ) ; 
 - } 
 - 
 - interface InputCovariant6 
 - { 
 - public boolean equals ( InputCovariant5 aInputCovariant5 ) ; 
 - } 
 - 
 - class InputGenericCovariant7 
 - { 
 - public < A > boolean equals ( InputGenericCovariant7 aInputCovariant7 ) 
 - { 
 - return true ; 
 - } 
 - 
 - public boolean equals ( Object aObject ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - class InputGenericCovariant8 
 - { 
 - public < A > boolean equals ( InputGenericCovariant8 aInputCovariant8 ) 
 - { 
 - return true ; 
 - } 
 - 
 - public boolean equals ( Object aObject ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - enum InputEnumCovariant { 
 - EQUALS ; 
 - 
 - public boolean equals ( InputEnumCovariant inputEnumCovariant ) { 
 - return false ; 
 - } 
 - 
 - int equals ( Integer integer ) { 
 - return 0 ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / covariantequals / InputCovariantEquals . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / covariantequals / InputCovariantEquals . java 
 new file mode 100644 
 index 0000000 . . b011ef0 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / covariantequals / InputCovariantEquals . java 
 @ @ - 0 , 0 + 1 , 141 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . covariantequals ; 
 + 
 + / * * 
 + * Test file for covariant equals methods . 
 + * @ author Rick Giles 
 + * / 
 + public class InputCovariantEquals 
 + { 
 + private class Inner 
 + { 
 + public boolean equals ( Inner aInner ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + private class Inner2 
 + { 
 + public boolean equals ( Inner2 aInner2 ) 
 + { 
 + return false ; 
 + } 
 + 
 + public boolean equals ( Object aObj ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + public boolean equals ( InputCovariantEquals aInputCovariantEquals ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + class InputCovariant2 
 + { 
 + public boolean equals ( InputCovariant2 aInputCovariant2 ) 
 + { 
 + return false ; 
 + } 
 + 
 + public boolean equals ( Object aObject ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + class InputCovariant3 
 + { 
 + public boolean equals ( InputCovariant3 aInputCovariant3 ) 
 + { 
 + return false ; 
 + } 
 + 
 + public boolean equals ( java . lang . Object aObject ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + class InputCovariant4 
 + { 
 + public boolean equals ( int i ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + class AnonymousIC 
 + { 
 + Comparable comp = new Comparable ( ) 
 + { 
 + public int compareTo ( Object aObject ) 
 + { 
 + return 0 ; 
 + } 
 + public boolean equals ( String aString ) 
 + { 
 + return false ; 
 + } 
 + } ; 
 + 
 + public boolean equals ( Object aObject ) 
 + { 
 + return false ; 
 + } 
 + 
 + public void method ( ) 
 + { 
 + Double d = new Double ( 1 ) ; 
 + } 
 + } 
 + 
 + abstract class InputCovariant5 
 + { 
 + public abstract boolean equals ( InputCovariant4 aInputCovariant4 ) ; 
 + } 
 + 
 + interface InputCovariant6 
 + { 
 + public boolean equals ( InputCovariant5 aInputCovariant5 ) ; 
 + } 
 + 
 + class InputGenericCovariant7 
 + { 
 + public < A > boolean equals ( InputGenericCovariant7 aInputCovariant7 ) 
 + { 
 + return true ; 
 + } 
 + 
 + public boolean equals ( Object aObject ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + class InputGenericCovariant8 
 + { 
 + public < A > boolean equals ( InputGenericCovariant8 aInputCovariant8 ) 
 + { 
 + return true ; 
 + } 
 + 
 + public boolean equals ( Object aObject ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + enum InputEnumCovariant { 
 + EQUALS ; 
 + 
 + public boolean equals ( InputEnumCovariant inputEnumCovariant ) { 
 + return false ; 
 + } 
 + 
 + int equals ( Integer integer ) { 
 + return 0 ; 
 + } 
 + }
