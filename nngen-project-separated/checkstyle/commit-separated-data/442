BLEU SCORE: 0.08295193507109855

TEST MSG: Issue # 5141 : fixed broken translation check because of ordering
GENERATED MSG: Issue # 3891 : reorganized CheckerTest inputs

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> index f94a1a1 . . 9395843 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> @ @ - 57 , 7 + 57 , 7 @ @ import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . io . Closeables ; <nl> - import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . AbstractXmlTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . XMLLogger ; <nl> @ @ - 68 , 11 + 68 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; <nl> import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; <nl> import com . puppycrawl . tools . checkstyle . api . SeverityLevelCounter ; <nl> + import com . puppycrawl . tools . checkstyle . internal . utils . XmlUtil ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> @ RunWith ( PowerMockRunner . class ) <nl> @ PrepareForTest ( Closeables . class ) <nl> - public class TranslationCheckTest extends AbstractModuleTestSupport { <nl> + public class TranslationCheckTest extends AbstractXmlTestSupport { <nl> @ Captor <nl> private ArgumentCaptor < SortedSet < LocalizedMessage > > captor ; <nl> <nl> @ @ - 144 , 6 + 145 , 7 @ @ public class TranslationCheckTest extends AbstractModuleTestSupport { <nl> checkConfig . addAttribute ( " requiredTranslations " , " ja , de " ) ; <nl> checkConfig . addAttribute ( " baseName " , " ^ InputTranslation . * $ " ) ; <nl> final Checker checker = createChecker ( checkConfig ) ; <nl> + checker . setBasedir ( getPath ( " " ) ) ; <nl> final ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; <nl> final XMLLogger logger = new XMLLogger ( out , AutomaticBean . OutputStreamOptions . NONE ) ; <nl> checker . addListener ( logger ) ; <nl> @ @ - 162 , 8 + 164 , 21 @ @ public class TranslationCheckTest extends AbstractModuleTestSupport { <nl> final String secondErrorMessage = getCheckMessage ( MSG _ KEY , " anotherKey " ) ; <nl> <nl> verify ( checker , propertyFiles , ImmutableMap . of ( <nl> - getPath ( " " ) , Collections . singletonList ( line + firstErrorMessage ) , <nl> - translationProps , Collections . singletonList ( line + secondErrorMessage ) ) ) ; <nl> + " : 0 " , Collections . singletonList ( " " + firstErrorMessage ) , <nl> + " InputTranslationCheckFireErrors _ de . properties " , <nl> + Collections . singletonList ( line + secondErrorMessage ) ) ) ; <nl> + <nl> + verifyXml ( getPath ( " ExpectedTranslationLog . xml " ) , out , ( expected , actual ) - > { <nl> + / / order is not always maintained here for an unknown reason . <nl> + / / File names can appear in different orders depending on the OS and VM . <nl> + / / This ensures we pick up the correct file based on its name and the <nl> + / / number of children it has . <nl> + return ! " file " . equals ( expected . getNodeName ( ) ) <nl> + | | expected . getAttributes ( ) . getNamedItem ( " name " ) . getNodeValue ( ) <nl> + . equals ( actual . getAttributes ( ) . getNamedItem ( " name " ) . getNodeValue ( ) ) <nl> + & & XmlUtil . getChildrenElements ( expected ) . size ( ) = = XmlUtil <nl> + . getChildrenElements ( actual ) . size ( ) ; <nl> + } , firstErrorMessage , secondErrorMessage ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / ExpectedTranslationLog . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / ExpectedTranslationLog . xml <nl> new file mode 100644 <nl> index 0000000 . . 7f7a772 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / ExpectedTranslationLog . xml <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> + < checkstyle version = " 8 . 3 - SNAPSHOT " > <nl> + < file name = " InputTranslationCheckFireErrors . properties " > <nl> + < / file > <nl> + < file name = " InputTranslationCheckFireErrors _ de . properties " > <nl> + < / file > <nl> + < file name = " " > <nl> + < error line = " 0 " severity = " error " message = " $ 0 " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > <nl> + < / file > <nl> + < file name = " InputTranslationCheckFireErrors . properties " > <nl> + < / file > <nl> + < file name = " InputTranslationCheckFireErrors _ de . properties " > <nl> + < error line = " 0 " severity = " error " message = " $ 1 " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > <nl> + < / file > <nl> + < / checkstyle > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckLinux . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckLinux . xml <nl> deleted file mode 100644 <nl> index 34a16cb . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckLinux . xml <nl> + + + / dev / null <nl> @ @ - 1 , 15 + 0 , 0 @ @ <nl> - < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> - < checkstyle version = " 8 . 3 - SNAPSHOT " > <nl> - < file name = " path _ to _ file / InputTranslationCheckFireErrors . properties " > <nl> - < / file > <nl> - < file name = " path _ to _ file / InputTranslationCheckFireErrors _ de . properties " > <nl> - < / file > <nl> - < file name = " path _ to _ file " > <nl> - < error line = " 0 " severity = " error " message = " % s " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > <nl> - < / file > <nl> - < file name = " path _ to _ file / InputTranslationCheckFireErrors . properties " > <nl> - < / file > <nl> - < file name = " path _ to _ file / InputTranslationCheckFireErrors _ de . properties " > <nl> - < error line = " 0 " severity = " error " message = " % s " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > <nl> - < / file > <nl> - < / checkstyle > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckMacOS . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckMacOS . xml <nl> deleted file mode 100644 <nl> index 865791f . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckMacOS . xml <nl> + + + / dev / null <nl> @ @ - 1 , 15 + 0 , 0 @ @ <nl> - < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> - < checkstyle version = " 8 . 3 - SNAPSHOT " > <nl> - < file name = " path _ to _ file / InputTranslationCheckFireErrors . properties " > <nl> - < / file > <nl> - < file name = " path _ to _ file / InputTranslationCheckFireErrors _ de . properties " > <nl> - < / file > <nl> - < file name = " path _ to _ file " > <nl> - < error line = " 0 " severity = " error " message = " % s " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > <nl> - < / file > <nl> - < file name = " path _ to _ file / InputTranslationCheckFireErrors _ de . properties " > <nl> - < error line = " 0 " severity = " error " message = " % s " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > <nl> - < / file > <nl> - < file name = " path _ to _ file / InputTranslationCheckFireErrors . properties " > <nl> - < / file > <nl> - < / checkstyle > <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckWindows . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckWindows . xml <nl> deleted file mode 100644 <nl> index 443bba3 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckWindows . xml <nl> + + + / dev / null <nl> @ @ - 1 , 15 + 0 , 0 @ @ <nl> - < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> - < checkstyle version = " 8 . 3 - SNAPSHOT " > <nl> - < file name = " path _ to _ file \ InputTranslationCheckFireErrors . properties " > <nl> - < / file > <nl> - < file name = " path _ to _ file \ InputTranslationCheckFireErrors _ de . properties " > <nl> - < / file > <nl> - < file name = " path _ to _ file " > <nl> - < error line = " 0 " severity = " error " message = " % s " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > <nl> - < / file > <nl> - < file name = " path _ to _ file \ InputTranslationCheckFireErrors . properties " > <nl> - < / file > <nl> - < file name = " path _ to _ file \ InputTranslationCheckFireErrors _ de . properties " > <nl> - < error line = " 0 " severity = " error " message = " % s " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > <nl> - < / file > <nl> - < / checkstyle >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 28f3742 . . 34f94b7 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1773 , 7 + 1773 , 7 @ @ <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . checks . design . * < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 98 < / mutationThreshold > <nl> + < mutationThreshold > 100 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / shippable . yml b / shippable . yml <nl> index 372cac1 . . 1054930 100644 <nl> - - - a / shippable . yml <nl> + + + b / shippable . yml <nl> @ @ - 11 , 13 + 11 , 13 @ @ env : <nl> - PROFILE = " - Ppitest - checks - javadoc , no - validations " <nl> - PROFILE = " - Ppitest - checks - imports , no - validations " <nl> - PROFILE = " - Ppitest - checks - metrics , no - validations " <nl> - - PROFILE = " - Ppitest - checks - regexp , no - validations " <nl> + - PROFILE = " - Ppitest - checks - regexp , no - validations " ; POST _ ACTION = check _ survived <nl> - PROFILE = " - Ppitest - checks - sizes , no - validations " ; POST _ ACTION = check _ survived <nl> - PROFILE = " - Ppitest - checks - whitespace , no - validations " <nl> - PROFILE = " - Ppitest - checks - misc , no - validations " <nl> - PROFILE = " - Ppitest - checks - blocks , no - validations " <nl> - PROFILE = " - Ppitest - checks - coding , no - validations " <nl> - - PROFILE = " - Ppitest - checks - design , no - validations " <nl> + - PROFILE = " - Ppitest - checks - design , no - validations " ; POST _ ACTION = check _ survived <nl> - PROFILE = " - Ppitest - checks - annotation , no - validations " <nl> - PROFILE = " - Ppitest - checks - header , no - validations " ; POST _ ACTION = check _ survived <nl> - PROFILE = " - Ppitest - checks - modifier , no - validations " ; POST _ ACTION = check _ survived <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java <nl> index c69b74a . . 315f3c6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import org . junit . Test ; <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class InnerTypeLastCheckTest extends AbstractModuleTestSupport { <nl> @ Override <nl> @ @ - 57 , 6 + 58 , 14 @ @ public class InnerTypeLastCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testIfRootClassChecked ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( InnerTypeLastCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputInnerTypeLastClassRootClass . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testGetAcceptableTokens ( ) { <nl> final InnerTypeLastCheck obj = new InnerTypeLastCheck ( ) ; <nl> final int [ ] expected = { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> index 4ffcc65 . . 59b03ba 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> @ @ - 23 , 9 + 23 , 14 @ @ import static com . puppycrawl . tools . checkstyle . checks . design . MutableExceptionChec <nl> import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . fail ; <nl> <nl> + import java . io . File ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import antlr . CommonHiddenStreamToken ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> @ @ - 62 , 6 + 67 , 26 @ @ public class MutableExceptionCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testMultipleInputs ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( MutableExceptionCheck . class ) ; <nl> + final String filePath1 = getPath ( " InputMutableException . java " ) ; <nl> + final String filePath2 = getPath ( " InputMutableExceptionMultipleInputs . java " ) ; <nl> + <nl> + final List < String > expected1 = Arrays . asList ( <nl> + " 6 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , <nl> + " 23 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , <nl> + " 46 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) ) ; <nl> + final List < String > expected2 = Arrays . asList ( <nl> + " 6 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , <nl> + " 10 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) ) ; <nl> + <nl> + final File [ ] inputs = { new File ( filePath1 ) , new File ( filePath2 ) } ; <nl> + <nl> + verify ( createChecker ( checkConfig ) , inputs , <nl> + ImmutableMap . of ( filePath1 , expected1 , filePath2 , expected2 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testFormat ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( MutableExceptionCheck . class ) ; <nl> checkConfig . addAttribute ( " format " , " ^ . * Failure $ " ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> index fd76a29 . . 4090865 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> @ @ - 22 , 9 + 22 , 15 @ @ package com . puppycrawl . tools . checkstyle . checks . design ; <nl> import static com . puppycrawl . tools . checkstyle . checks . design . OneTopLevelClassCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> + import java . io . File ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> + import com . google . common . collect . ImmutableMap ; <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> @ @ - 43 , 6 + 49 , 29 @ @ public class OneTopLevelClassCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testClearState ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( OneTopLevelClassCheck . class ) ; <nl> + final String firstInputFilePath = getPath ( " InputOneTopLevelClassDeclarationOrder . java " ) ; <nl> + final String secondInputFilePath = getPath ( " InputOneTopLevelInterface2 . java " ) ; <nl> + <nl> + final File [ ] inputs = { <nl> + new File ( firstInputFilePath ) , <nl> + new File ( secondInputFilePath ) , <nl> + } ; <nl> + <nl> + final List < String > expectedFirstInput = Collections . singletonList ( <nl> + " 10 : " + getCheckMessage ( MSG _ KEY , " InputDeclarationOrderEnum " ) ) ; <nl> + final List < String > expectedSecondInput = Arrays . asList ( <nl> + " 3 : " + getCheckMessage ( MSG _ KEY , " InputOneTopLevelInterface2inner1 " ) , <nl> + " 11 : " + getCheckMessage ( MSG _ KEY , " InputOneTopLevelInterface2inner2 " ) ) ; <nl> + <nl> + verify ( createChecker ( checkConfig ) , inputs , <nl> + ImmutableMap . of ( firstInputFilePath , expectedFirstInput , <nl> + secondInputFilePath , expectedSecondInput ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testAcceptableTokens ( ) { <nl> final OneTopLevelClassCheck check = new OneTopLevelClassCheck ( ) ; <nl> check . getAcceptableTokens ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> index 00b1490 . . 435c530 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java <nl> @ @ - 107 , 4 + 107 , 13 @ @ public class ThrowsCountCheckTest extends AbstractModuleTestSupport { <nl> } ; <nl> verify ( checkConfig , getPath ( " InputThrowsCount . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testMethodWithAnnotation ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( ThrowsCountCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 18 : 26 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputThrowsCountMwthodWithAnnotation . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> index a478020 . . 09ea0fa 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> @ @ - 22 , 9 + 22 , 14 @ @ package com . puppycrawl . tools . checkstyle . checks . design ; <nl> import static com . puppycrawl . tools . checkstyle . checks . design . VisibilityModifierCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> + import java . io . File ; <nl> + import java . lang . reflect . Method ; <nl> + <nl> import org . junit . Test ; <nl> + import org . powermock . reflect . Whitebox ; <nl> <nl> import antlr . CommonHiddenStreamToken ; <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> @ @ - 32 , 6 + 37 , 7 @ @ import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class VisibilityModifierCheckTest <nl> @ @ - 435 , 4 + 441 , 25 @ @ public class VisibilityModifierCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputVisibilityModifierGenerics . java " ) , expected ) ; <nl> } <nl> + <nl> + / * * <nl> + * We can not cover this mutation because it force all imports to be non static , <nl> + * but static imports are ignored , so we will not see any affect on validation . <nl> + * We could remove this method at all , and it will work correctly as we can not use <nl> + * class with name " " , but in this case internal collection will have short names <nl> + * as " " that will not make problems , but will be weird in debug . <nl> + * <nl> + * @ throws Exception when exception occured during execution . <nl> + * / <nl> + @ Test <nl> + public void testIsStarImportNullAst ( ) throws Exception { <nl> + final DetailAST importAst = TestUtils . parseFile ( new File ( getPath ( <nl> + " InputVisibilityModifierIsStarImport . java " ) ) ) . getNextSibling ( ) ; <nl> + final VisibilityModifierCheck check = new VisibilityModifierCheck ( ) ; <nl> + final Method isStarImport = Whitebox . getMethod ( VisibilityModifierCheck . class , <nl> + " isStarImport " , DetailAST . class ) ; <nl> + <nl> + assertTrue ( " Should return true when star import is passed " , <nl> + ( boolean ) isStarImport . invoke ( check , importAst ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java <nl> index e3a46a2 . . 602d3fc 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java <nl> @ @ - 82 , 7 + 82 , 7 @ @ public final class TestUtils { <nl> String fieldName , <nl> Predicate < Object > isClear ) <nl> throws NoSuchFieldException , IllegalAccessException { <nl> - check . beginTree ( null ) ; <nl> + check . beginTree ( astToVisit ) ; <nl> check . visitToken ( astToVisit ) ; <nl> check . beginTree ( null ) ; <nl> final Field field = check . getClass ( ) . getDeclaredField ( fieldName ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / innertypelast / InputInnerTypeLastClassRootClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / innertypelast / InputInnerTypeLastClassRootClass . java <nl> new file mode 100644 <nl> index 0000000 . . 1c2df5a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / innertypelast / InputInnerTypeLastClassRootClass . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design . innertypelast ; <nl> + <nl> + public enum InputInnerTypeLastClassRootClass { <nl> + <nl> + ALWAYS ( Bits . YES ) , NEVER ( Bits . NO ) ; <nl> + <nl> + private interface Bits { <nl> + public static final int YES = 1 ; <nl> + <nl> + public static final int NO = 4 ; <nl> + } <nl> + <nl> + private final int bits ; <nl> + <nl> + private InputInnerTypeLastClassRootClass ( int bits ) { <nl> + this . bits = bits ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / mutableexception / InputMutableExceptionMultipleInputs . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / mutableexception / InputMutableExceptionMultipleInputs . java <nl> new file mode 100644 <nl> index 0000000 . . 036f2d1 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / mutableexception / InputMutableExceptionMultipleInputs . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design . mutableexception ; <nl> + <nl> + public class InputMutableExceptionMultipleInputs { <nl> + <nl> + public class BarError extends Throwable { <nl> + private int errorCode ; <nl> + } <nl> + <nl> + class CustomMutableException extends java . lang . Exception { <nl> + int errorCode ; <nl> + final int errorCount = 6 ; <nl> + } <nl> + <nl> + private String variable ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCountMwthodWithAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCountMwthodWithAnnotation . java <nl> new file mode 100644 <nl> index 0000000 . . 8793435 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCountMwthodWithAnnotation . java <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design . throwscount ; <nl> + <nl> + import java . awt . AWTException ; <nl> + import java . io . EOFException ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . nio . file . FileAlreadyExistsException ; <nl> + import java . sql . SQLException ; <nl> + <nl> + public class InputThrowsCountMwthodWithAnnotation extends ParentClass { <nl> + @ Override <nl> + public void method ( ) throws AWTException , SQLException , FileNotFoundException , <nl> + EOFException , FileAlreadyExistsException { <nl> + super . method ( ) ; <nl> + } <nl> + } <nl> + <nl> + class ParentClass { <nl> + public void method ( ) throws AWTException , SQLException , <nl> + FileNotFoundException , EOFException , FileAlreadyExistsException { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / visibilitymodifier / InputVisibilityModifierIsStarImport . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / visibilitymodifier / InputVisibilityModifierIsStarImport . java <nl> new file mode 100644 <nl> index 0000000 . . 56a7d07 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / visibilitymodifier / InputVisibilityModifierIsStarImport . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design . visibilitymodifier ; <nl> + <nl> + import com . puppycrawl . * ; <nl> + <nl> + public class InputVisibilityModifierIsStarImport { <nl> + }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 index f94a1a1 . . 9395843 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 @ @ - 57 , 7 + 57 , 7 @ @ import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . io . Closeables ; 
 - import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . AbstractXmlTestSupport ; 
 import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . XMLLogger ; 
 @ @ - 68 , 11 + 68 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; 
 import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; 
 import com . puppycrawl . tools . checkstyle . api . SeverityLevelCounter ; 
 + import com . puppycrawl . tools . checkstyle . internal . utils . XmlUtil ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 @ RunWith ( PowerMockRunner . class ) 
 @ PrepareForTest ( Closeables . class ) 
 - public class TranslationCheckTest extends AbstractModuleTestSupport { 
 + public class TranslationCheckTest extends AbstractXmlTestSupport { 
 @ Captor 
 private ArgumentCaptor < SortedSet < LocalizedMessage > > captor ; 
 
 @ @ - 144 , 6 + 145 , 7 @ @ public class TranslationCheckTest extends AbstractModuleTestSupport { 
 checkConfig . addAttribute ( " requiredTranslations " , " ja , de " ) ; 
 checkConfig . addAttribute ( " baseName " , " ^ InputTranslation . * $ " ) ; 
 final Checker checker = createChecker ( checkConfig ) ; 
 + checker . setBasedir ( getPath ( " " ) ) ; 
 final ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; 
 final XMLLogger logger = new XMLLogger ( out , AutomaticBean . OutputStreamOptions . NONE ) ; 
 checker . addListener ( logger ) ; 
 @ @ - 162 , 8 + 164 , 21 @ @ public class TranslationCheckTest extends AbstractModuleTestSupport { 
 final String secondErrorMessage = getCheckMessage ( MSG _ KEY , " anotherKey " ) ; 
 
 verify ( checker , propertyFiles , ImmutableMap . of ( 
 - getPath ( " " ) , Collections . singletonList ( line + firstErrorMessage ) , 
 - translationProps , Collections . singletonList ( line + secondErrorMessage ) ) ) ; 
 + " : 0 " , Collections . singletonList ( " " + firstErrorMessage ) , 
 + " InputTranslationCheckFireErrors _ de . properties " , 
 + Collections . singletonList ( line + secondErrorMessage ) ) ) ; 
 + 
 + verifyXml ( getPath ( " ExpectedTranslationLog . xml " ) , out , ( expected , actual ) - > { 
 + / / order is not always maintained here for an unknown reason . 
 + / / File names can appear in different orders depending on the OS and VM . 
 + / / This ensures we pick up the correct file based on its name and the 
 + / / number of children it has . 
 + return ! " file " . equals ( expected . getNodeName ( ) ) 
 + | | expected . getAttributes ( ) . getNamedItem ( " name " ) . getNodeValue ( ) 
 + . equals ( actual . getAttributes ( ) . getNamedItem ( " name " ) . getNodeValue ( ) ) 
 + & & XmlUtil . getChildrenElements ( expected ) . size ( ) = = XmlUtil 
 + . getChildrenElements ( actual ) . size ( ) ; 
 + } , firstErrorMessage , secondErrorMessage ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / ExpectedTranslationLog . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / ExpectedTranslationLog . xml 
 new file mode 100644 
 index 0000000 . . 7f7a772 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / ExpectedTranslationLog . xml 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 + < checkstyle version = " 8 . 3 - SNAPSHOT " > 
 + < file name = " InputTranslationCheckFireErrors . properties " > 
 + < / file > 
 + < file name = " InputTranslationCheckFireErrors _ de . properties " > 
 + < / file > 
 + < file name = " " > 
 + < error line = " 0 " severity = " error " message = " $ 0 " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > 
 + < / file > 
 + < file name = " InputTranslationCheckFireErrors . properties " > 
 + < / file > 
 + < file name = " InputTranslationCheckFireErrors _ de . properties " > 
 + < error line = " 0 " severity = " error " message = " $ 1 " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > 
 + < / file > 
 + < / checkstyle > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckLinux . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckLinux . xml 
 deleted file mode 100644 
 index 34a16cb . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckLinux . xml 
 + + + / dev / null 
 @ @ - 1 , 15 + 0 , 0 @ @ 
 - < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 - < checkstyle version = " 8 . 3 - SNAPSHOT " > 
 - < file name = " path _ to _ file / InputTranslationCheckFireErrors . properties " > 
 - < / file > 
 - < file name = " path _ to _ file / InputTranslationCheckFireErrors _ de . properties " > 
 - < / file > 
 - < file name = " path _ to _ file " > 
 - < error line = " 0 " severity = " error " message = " % s " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > 
 - < / file > 
 - < file name = " path _ to _ file / InputTranslationCheckFireErrors . properties " > 
 - < / file > 
 - < file name = " path _ to _ file / InputTranslationCheckFireErrors _ de . properties " > 
 - < error line = " 0 " severity = " error " message = " % s " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > 
 - < / file > 
 - < / checkstyle > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckMacOS . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckMacOS . xml 
 deleted file mode 100644 
 index 865791f . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckMacOS . xml 
 + + + / dev / null 
 @ @ - 1 , 15 + 0 , 0 @ @ 
 - < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 - < checkstyle version = " 8 . 3 - SNAPSHOT " > 
 - < file name = " path _ to _ file / InputTranslationCheckFireErrors . properties " > 
 - < / file > 
 - < file name = " path _ to _ file / InputTranslationCheckFireErrors _ de . properties " > 
 - < / file > 
 - < file name = " path _ to _ file " > 
 - < error line = " 0 " severity = " error " message = " % s " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > 
 - < / file > 
 - < file name = " path _ to _ file / InputTranslationCheckFireErrors _ de . properties " > 
 - < error line = " 0 " severity = " error " message = " % s " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > 
 - < / file > 
 - < file name = " path _ to _ file / InputTranslationCheckFireErrors . properties " > 
 - < / file > 
 - < / checkstyle > 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckWindows . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckWindows . xml 
 deleted file mode 100644 
 index 443bba3 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / translation / OutputTranslationCheckWindows . xml 
 + + + / dev / null 
 @ @ - 1 , 15 + 0 , 0 @ @ 
 - < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 - < checkstyle version = " 8 . 3 - SNAPSHOT " > 
 - < file name = " path _ to _ file \ InputTranslationCheckFireErrors . properties " > 
 - < / file > 
 - < file name = " path _ to _ file \ InputTranslationCheckFireErrors _ de . properties " > 
 - < / file > 
 - < file name = " path _ to _ file " > 
 - < error line = " 0 " severity = " error " message = " % s " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > 
 - < / file > 
 - < file name = " path _ to _ file \ InputTranslationCheckFireErrors . properties " > 
 - < / file > 
 - < file name = " path _ to _ file \ InputTranslationCheckFireErrors _ de . properties " > 
 - < error line = " 0 " severity = " error " message = " % s " source = " com . puppycrawl . tools . checkstyle . checks . TranslationCheck " / > 
 - < / file > 
 - < / checkstyle >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 28f3742 . . 34f94b7 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1773 , 7 + 1773 , 7 @ @ 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . checks . design . * < / param > 
 < / targetTests > 
 - < mutationThreshold > 98 < / mutationThreshold > 
 + < mutationThreshold > 100 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / shippable . yml b / shippable . yml 
 index 372cac1 . . 1054930 100644 
 - - - a / shippable . yml 
 + + + b / shippable . yml 
 @ @ - 11 , 13 + 11 , 13 @ @ env : 
 - PROFILE = " - Ppitest - checks - javadoc , no - validations " 
 - PROFILE = " - Ppitest - checks - imports , no - validations " 
 - PROFILE = " - Ppitest - checks - metrics , no - validations " 
 - - PROFILE = " - Ppitest - checks - regexp , no - validations " 
 + - PROFILE = " - Ppitest - checks - regexp , no - validations " ; POST _ ACTION = check _ survived 
 - PROFILE = " - Ppitest - checks - sizes , no - validations " ; POST _ ACTION = check _ survived 
 - PROFILE = " - Ppitest - checks - whitespace , no - validations " 
 - PROFILE = " - Ppitest - checks - misc , no - validations " 
 - PROFILE = " - Ppitest - checks - blocks , no - validations " 
 - PROFILE = " - Ppitest - checks - coding , no - validations " 
 - - PROFILE = " - Ppitest - checks - design , no - validations " 
 + - PROFILE = " - Ppitest - checks - design , no - validations " ; POST _ ACTION = check _ survived 
 - PROFILE = " - Ppitest - checks - annotation , no - validations " 
 - PROFILE = " - Ppitest - checks - header , no - validations " ; POST _ ACTION = check _ survived 
 - PROFILE = " - Ppitest - checks - modifier , no - validations " ; POST _ ACTION = check _ survived 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java 
 index c69b74a . . 315f3c6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import org . junit . Test ; 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class InnerTypeLastCheckTest extends AbstractModuleTestSupport { 
 @ Override 
 @ @ - 57 , 6 + 58 , 14 @ @ public class InnerTypeLastCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testIfRootClassChecked ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( InnerTypeLastCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputInnerTypeLastClassRootClass . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testGetAcceptableTokens ( ) { 
 final InnerTypeLastCheck obj = new InnerTypeLastCheck ( ) ; 
 final int [ ] expected = { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 index 4ffcc65 . . 59b03ba 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 @ @ - 23 , 9 + 23 , 14 @ @ import static com . puppycrawl . tools . checkstyle . checks . design . MutableExceptionChec 
 import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . fail ; 
 
 + import java . io . File ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 import org . junit . Test ; 
 
 import antlr . CommonHiddenStreamToken ; 
 + import com . google . common . collect . ImmutableMap ; 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 @ @ - 62 , 6 + 67 , 26 @ @ public class MutableExceptionCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testMultipleInputs ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( MutableExceptionCheck . class ) ; 
 + final String filePath1 = getPath ( " InputMutableException . java " ) ; 
 + final String filePath2 = getPath ( " InputMutableExceptionMultipleInputs . java " ) ; 
 + 
 + final List < String > expected1 = Arrays . asList ( 
 + " 6 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , 
 + " 23 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , 
 + " 46 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) ) ; 
 + final List < String > expected2 = Arrays . asList ( 
 + " 6 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , 
 + " 10 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) ) ; 
 + 
 + final File [ ] inputs = { new File ( filePath1 ) , new File ( filePath2 ) } ; 
 + 
 + verify ( createChecker ( checkConfig ) , inputs , 
 + ImmutableMap . of ( filePath1 , expected1 , filePath2 , expected2 ) ) ; 
 + } 
 + 
 + @ Test 
 public void testFormat ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( MutableExceptionCheck . class ) ; 
 checkConfig . addAttribute ( " format " , " ^ . * Failure $ " ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 index fd76a29 . . 4090865 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 @ @ - 22 , 9 + 22 , 15 @ @ package com . puppycrawl . tools . checkstyle . checks . design ; 
 import static com . puppycrawl . tools . checkstyle . checks . design . OneTopLevelClassCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 
 + import java . io . File ; 
 + import java . util . Arrays ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 + import com . google . common . collect . ImmutableMap ; 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 @ @ - 43 , 6 + 49 , 29 @ @ public class OneTopLevelClassCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testClearState ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( OneTopLevelClassCheck . class ) ; 
 + final String firstInputFilePath = getPath ( " InputOneTopLevelClassDeclarationOrder . java " ) ; 
 + final String secondInputFilePath = getPath ( " InputOneTopLevelInterface2 . java " ) ; 
 + 
 + final File [ ] inputs = { 
 + new File ( firstInputFilePath ) , 
 + new File ( secondInputFilePath ) , 
 + } ; 
 + 
 + final List < String > expectedFirstInput = Collections . singletonList ( 
 + " 10 : " + getCheckMessage ( MSG _ KEY , " InputDeclarationOrderEnum " ) ) ; 
 + final List < String > expectedSecondInput = Arrays . asList ( 
 + " 3 : " + getCheckMessage ( MSG _ KEY , " InputOneTopLevelInterface2inner1 " ) , 
 + " 11 : " + getCheckMessage ( MSG _ KEY , " InputOneTopLevelInterface2inner2 " ) ) ; 
 + 
 + verify ( createChecker ( checkConfig ) , inputs , 
 + ImmutableMap . of ( firstInputFilePath , expectedFirstInput , 
 + secondInputFilePath , expectedSecondInput ) ) ; 
 + } 
 + 
 + @ Test 
 public void testAcceptableTokens ( ) { 
 final OneTopLevelClassCheck check = new OneTopLevelClassCheck ( ) ; 
 check . getAcceptableTokens ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 index 00b1490 . . 435c530 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheckTest . java 
 @ @ - 107 , 4 + 107 , 13 @ @ public class ThrowsCountCheckTest extends AbstractModuleTestSupport { 
 } ; 
 verify ( checkConfig , getPath ( " InputThrowsCount . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testMethodWithAnnotation ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( ThrowsCountCheck . class ) ; 
 + final String [ ] expected = { 
 + " 18 : 26 : " + getCheckMessage ( MSG _ KEY , 5 , 4 ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputThrowsCountMwthodWithAnnotation . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 index a478020 . . 09ea0fa 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 @ @ - 22 , 9 + 22 , 14 @ @ package com . puppycrawl . tools . checkstyle . checks . design ; 
 import static com . puppycrawl . tools . checkstyle . checks . design . VisibilityModifierCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 + import java . io . File ; 
 + import java . lang . reflect . Method ; 
 + 
 import org . junit . Test ; 
 + import org . powermock . reflect . Whitebox ; 
 
 import antlr . CommonHiddenStreamToken ; 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 @ @ - 32 , 6 + 37 , 7 @ @ import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . internal . TestUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class VisibilityModifierCheckTest 
 @ @ - 435 , 4 + 441 , 25 @ @ public class VisibilityModifierCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputVisibilityModifierGenerics . java " ) , expected ) ; 
 } 
 + 
 + / * * 
 + * We can not cover this mutation because it force all imports to be non static , 
 + * but static imports are ignored , so we will not see any affect on validation . 
 + * We could remove this method at all , and it will work correctly as we can not use 
 + * class with name " " , but in this case internal collection will have short names 
 + * as " " that will not make problems , but will be weird in debug . 
 + * 
 + * @ throws Exception when exception occured during execution . 
 + * / 
 + @ Test 
 + public void testIsStarImportNullAst ( ) throws Exception { 
 + final DetailAST importAst = TestUtils . parseFile ( new File ( getPath ( 
 + " InputVisibilityModifierIsStarImport . java " ) ) ) . getNextSibling ( ) ; 
 + final VisibilityModifierCheck check = new VisibilityModifierCheck ( ) ; 
 + final Method isStarImport = Whitebox . getMethod ( VisibilityModifierCheck . class , 
 + " isStarImport " , DetailAST . class ) ; 
 + 
 + assertTrue ( " Should return true when star import is passed " , 
 + ( boolean ) isStarImport . invoke ( check , importAst ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java 
 index e3a46a2 . . 602d3fc 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java 
 @ @ - 82 , 7 + 82 , 7 @ @ public final class TestUtils { 
 String fieldName , 
 Predicate < Object > isClear ) 
 throws NoSuchFieldException , IllegalAccessException { 
 - check . beginTree ( null ) ; 
 + check . beginTree ( astToVisit ) ; 
 check . visitToken ( astToVisit ) ; 
 check . beginTree ( null ) ; 
 final Field field = check . getClass ( ) . getDeclaredField ( fieldName ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / innertypelast / InputInnerTypeLastClassRootClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / innertypelast / InputInnerTypeLastClassRootClass . java 
 new file mode 100644 
 index 0000000 . . 1c2df5a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / innertypelast / InputInnerTypeLastClassRootClass . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design . innertypelast ; 
 + 
 + public enum InputInnerTypeLastClassRootClass { 
 + 
 + ALWAYS ( Bits . YES ) , NEVER ( Bits . NO ) ; 
 + 
 + private interface Bits { 
 + public static final int YES = 1 ; 
 + 
 + public static final int NO = 4 ; 
 + } 
 + 
 + private final int bits ; 
 + 
 + private InputInnerTypeLastClassRootClass ( int bits ) { 
 + this . bits = bits ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / mutableexception / InputMutableExceptionMultipleInputs . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / mutableexception / InputMutableExceptionMultipleInputs . java 
 new file mode 100644 
 index 0000000 . . 036f2d1 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / mutableexception / InputMutableExceptionMultipleInputs . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design . mutableexception ; 
 + 
 + public class InputMutableExceptionMultipleInputs { 
 + 
 + public class BarError extends Throwable { 
 + private int errorCode ; 
 + } 
 + 
 + class CustomMutableException extends java . lang . Exception { 
 + int errorCode ; 
 + final int errorCount = 6 ; 
 + } 
 + 
 + private String variable ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCountMwthodWithAnnotation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCountMwthodWithAnnotation . java 
 new file mode 100644 
 index 0000000 . . 8793435 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / throwscount / InputThrowsCountMwthodWithAnnotation . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design . throwscount ; 
 + 
 + import java . awt . AWTException ; 
 + import java . io . EOFException ; 
 + import java . io . FileNotFoundException ; 
 + import java . nio . file . FileAlreadyExistsException ; 
 + import java . sql . SQLException ; 
 + 
 + public class InputThrowsCountMwthodWithAnnotation extends ParentClass { 
 + @ Override 
 + public void method ( ) throws AWTException , SQLException , FileNotFoundException , 
 + EOFException , FileAlreadyExistsException { 
 + super . method ( ) ; 
 + } 
 + } 
 + 
 + class ParentClass { 
 + public void method ( ) throws AWTException , SQLException , 
 + FileNotFoundException , EOFException , FileAlreadyExistsException { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / visibilitymodifier / InputVisibilityModifierIsStarImport . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / visibilitymodifier / InputVisibilityModifierIsStarImport . java 
 new file mode 100644 
 index 0000000 . . 56a7d07 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / visibilitymodifier / InputVisibilityModifierIsStarImport . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design . visibilitymodifier ; 
 + 
 + import com . puppycrawl . * ; 
 + 
 + public class InputVisibilityModifierIsStarImport { 
 + }
