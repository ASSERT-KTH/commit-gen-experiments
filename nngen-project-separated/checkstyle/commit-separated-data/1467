BLEU SCORE: 0.7598356856515925

TEST MSG: Issue # 2451 : deprecated AbstractIllegalMethodCheck
GENERATED MSG: Issue # 2451 : deprecated AbstractIllegalCheck

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index dfc325f . . 4b0bd1a 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1733 , 6 + 1733 , 7 @ @ <nl> < exclude > com / puppycrawl / tools / checkstyle / checks / AbstractFormatCheck . class < / exclude > <nl> < exclude > com / puppycrawl / tools / checkstyle / checks / AbstractDeclarationCollector * . class < / exclude > <nl> < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . class < / exclude > <nl> + < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . class < / exclude > <nl> < / excludes > <nl> < / instrumentation > <nl> < / configuration > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java <nl> index 296b493 . . c70f9b6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java <nl> @ @ - 26 , 8 + 26 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> / * * <nl> * Provide support for checking for a method with a specified name and no <nl> * arguments . <nl> + * @ deprecated Checkstyle will not support abstract checks anymore . Use { @ link Check } instead . <nl> * @ author Oliver Burn <nl> + * @ noinspection AbstractClassNeverImplemented <nl> * / <nl> + @ Deprecated <nl> public abstract class AbstractIllegalMethodCheck extends Check { <nl> / * * Name of method to disallow . * / <nl> private final String methodName ;
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> index ff452d1 . . 50693a6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> @ @ - 35 , 6 + 35 , 8 @ @ import javax . xml . parsers . ParserConfigurationException ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> + import org . w3c . dom . Document ; <nl> + import org . w3c . dom . NodeList ; <nl> import org . xml . sax . InputSource ; <nl> import org . xml . sax . SAXException ; <nl> <nl> @ @ - 119 , 22 + 121 , 15 @ @ public class XDocsPagesTest { <nl> continue ; <nl> } <nl> <nl> - final String source = Files . toString ( file , UTF _ 8 ) ; <nl> - int position = - 1 ; <nl> - <nl> - while ( true ) { <nl> - position = source . indexOf ( " < source > " , position + 1 ) ; <nl> - <nl> - if ( position = = - 1 ) { <nl> - break ; <nl> - } <nl> + final String input = Files . toString ( file , UTF _ 8 ) ; <nl> + final String fileName = file . getName ( ) ; <nl> <nl> - final int nextPosition = source . indexOf ( " < / source > " , position ) ; <nl> - final String unserializedSource = source . substring ( position + 8 , nextPosition ) <nl> - . trim ( ) . replace ( " & lt ; " , " < " ) . replace ( " & gt ; " , " > " ) . replace ( " & quot ; " , " \ " " ) <nl> - . replace ( " & amp ; " , " & " ) . replace ( " . . . " , " " ) ; <nl> + final Document document = getRawXml ( fileName , input , input ) ; <nl> + final NodeList sources = document . getElementsByTagName ( " source " ) ; <nl> <nl> - position = nextPosition ; <nl> + for ( int position = 0 ; position < sources . getLength ( ) ; position + + ) { <nl> + final String unserializedSource = sources . item ( position ) . getTextContent ( ) <nl> + . replace ( " . . . " , " " ) . trim ( ) ; <nl> <nl> if ( unserializedSource . charAt ( 0 ) ! = ' < ' <nl> | | unserializedSource . charAt ( unserializedSource . length ( ) - 1 ) ! = ' > ' ) { <nl> @ @ - 146 , 7 + 141 , 7 @ @ public class XDocsPagesTest { <nl> continue ; <nl> } <nl> <nl> - buildAndTestXml ( file . getName ( ) , unserializedSource ) ; <nl> + buildAndTestXml ( fileName , unserializedSource ) ; <nl> } <nl> } <nl> } <nl> @ @ - 172 , 7 + 167 , 8 @ @ public class XDocsPagesTest { <nl> + code ; <nl> } <nl> <nl> - testRawXml ( fileName , code , unserializedSource ) ; <nl> + / / test only <nl> + getRawXml ( fileName , code , unserializedSource ) ; <nl> <nl> / / can ' t test ant structure , or old and outdated checks <nl> if ( ! fileName . startsWith ( " anttask " ) & & ! fileName . startsWith ( " releasenotes " ) ) { <nl> @ @ - 193 , 7 + 189 , 7 @ @ public class XDocsPagesTest { <nl> return found ; <nl> } <nl> <nl> - private static void testRawXml ( String fileName , String code , String unserializedSource ) <nl> + private static Document getRawXml ( String fileName , String code , String unserializedSource ) <nl> throws ParserConfigurationException { <nl> try { <nl> final DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; <nl> @ @ - 202 , 12 + 198 , 14 @ @ public class XDocsPagesTest { <nl> <nl> final DocumentBuilder builder = factory . newDocumentBuilder ( ) ; <nl> <nl> - builder . parse ( new InputSource ( new StringReader ( code ) ) ) ; <nl> + return builder . parse ( new InputSource ( new StringReader ( code ) ) ) ; <nl> } <nl> catch ( IOException | SAXException e ) { <nl> Assert . fail ( fileName + " has invalid xml ( " + e . getMessage ( ) + " ) : " <nl> + unserializedSource ) ; <nl> } <nl> + <nl> + return null ; <nl> } <nl> <nl> private static void testCheckstyleXml ( String fileName , String code , String unserializedSource ) <nl> diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml <nl> index 400f936 . . 0bac8c3 100644 <nl> - - - a / src / xdocs / config . xml <nl> + + + b / src / xdocs / config . xml <nl> @ @ - 457 , 6 + 457 , 8 @ @ <nl> & lt ; module name = & quot ; TreeWalker & quot ; & gt ; <nl> & lt ; property name = & quot ; fileExtensions & quot ; value = & quot ; java , ejb , jpf & quot ; / & gt ; <nl> . . . <nl> + & lt ; / module & gt ; <nl> + & lt ; / module & gt ; <nl> < / source > <nl> <nl> < p >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index dfc325f . . 4b0bd1a 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1733 , 6 + 1733 , 7 @ @ 
 < exclude > com / puppycrawl / tools / checkstyle / checks / AbstractFormatCheck . class < / exclude > 
 < exclude > com / puppycrawl / tools / checkstyle / checks / AbstractDeclarationCollector * . class < / exclude > 
 < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . class < / exclude > 
 + < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . class < / exclude > 
 < / excludes > 
 < / instrumentation > 
 < / configuration > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java 
 index 296b493 . . c70f9b6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalMethodCheck . java 
 @ @ - 26 , 8 + 26 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 / * * 
 * Provide support for checking for a method with a specified name and no 
 * arguments . 
 + * @ deprecated Checkstyle will not support abstract checks anymore . Use { @ link Check } instead . 
 * @ author Oliver Burn 
 + * @ noinspection AbstractClassNeverImplemented 
 * / 
 + @ Deprecated 
 public abstract class AbstractIllegalMethodCheck extends Check { 
 / * * Name of method to disallow . * / 
 private final String methodName ;

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 index ff452d1 . . 50693a6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 @ @ - 35 , 6 + 35 , 8 @ @ import javax . xml . parsers . ParserConfigurationException ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 + import org . w3c . dom . Document ; 
 + import org . w3c . dom . NodeList ; 
 import org . xml . sax . InputSource ; 
 import org . xml . sax . SAXException ; 
 
 @ @ - 119 , 22 + 121 , 15 @ @ public class XDocsPagesTest { 
 continue ; 
 } 
 
 - final String source = Files . toString ( file , UTF _ 8 ) ; 
 - int position = - 1 ; 
 - 
 - while ( true ) { 
 - position = source . indexOf ( " < source > " , position + 1 ) ; 
 - 
 - if ( position = = - 1 ) { 
 - break ; 
 - } 
 + final String input = Files . toString ( file , UTF _ 8 ) ; 
 + final String fileName = file . getName ( ) ; 
 
 - final int nextPosition = source . indexOf ( " < / source > " , position ) ; 
 - final String unserializedSource = source . substring ( position + 8 , nextPosition ) 
 - . trim ( ) . replace ( " & lt ; " , " < " ) . replace ( " & gt ; " , " > " ) . replace ( " & quot ; " , " \ " " ) 
 - . replace ( " & amp ; " , " & " ) . replace ( " . . . " , " " ) ; 
 + final Document document = getRawXml ( fileName , input , input ) ; 
 + final NodeList sources = document . getElementsByTagName ( " source " ) ; 
 
 - position = nextPosition ; 
 + for ( int position = 0 ; position < sources . getLength ( ) ; position + + ) { 
 + final String unserializedSource = sources . item ( position ) . getTextContent ( ) 
 + . replace ( " . . . " , " " ) . trim ( ) ; 
 
 if ( unserializedSource . charAt ( 0 ) ! = ' < ' 
 | | unserializedSource . charAt ( unserializedSource . length ( ) - 1 ) ! = ' > ' ) { 
 @ @ - 146 , 7 + 141 , 7 @ @ public class XDocsPagesTest { 
 continue ; 
 } 
 
 - buildAndTestXml ( file . getName ( ) , unserializedSource ) ; 
 + buildAndTestXml ( fileName , unserializedSource ) ; 
 } 
 } 
 } 
 @ @ - 172 , 7 + 167 , 8 @ @ public class XDocsPagesTest { 
 + code ; 
 } 
 
 - testRawXml ( fileName , code , unserializedSource ) ; 
 + / / test only 
 + getRawXml ( fileName , code , unserializedSource ) ; 
 
 / / can ' t test ant structure , or old and outdated checks 
 if ( ! fileName . startsWith ( " anttask " ) & & ! fileName . startsWith ( " releasenotes " ) ) { 
 @ @ - 193 , 7 + 189 , 7 @ @ public class XDocsPagesTest { 
 return found ; 
 } 
 
 - private static void testRawXml ( String fileName , String code , String unserializedSource ) 
 + private static Document getRawXml ( String fileName , String code , String unserializedSource ) 
 throws ParserConfigurationException { 
 try { 
 final DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; 
 @ @ - 202 , 12 + 198 , 14 @ @ public class XDocsPagesTest { 
 
 final DocumentBuilder builder = factory . newDocumentBuilder ( ) ; 
 
 - builder . parse ( new InputSource ( new StringReader ( code ) ) ) ; 
 + return builder . parse ( new InputSource ( new StringReader ( code ) ) ) ; 
 } 
 catch ( IOException | SAXException e ) { 
 Assert . fail ( fileName + " has invalid xml ( " + e . getMessage ( ) + " ) : " 
 + unserializedSource ) ; 
 } 
 + 
 + return null ; 
 } 
 
 private static void testCheckstyleXml ( String fileName , String code , String unserializedSource ) 
 diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml 
 index 400f936 . . 0bac8c3 100644 
 - - - a / src / xdocs / config . xml 
 + + + b / src / xdocs / config . xml 
 @ @ - 457 , 6 + 457 , 8 @ @ 
 & lt ; module name = & quot ; TreeWalker & quot ; & gt ; 
 & lt ; property name = & quot ; fileExtensions & quot ; value = & quot ; java , ejb , jpf & quot ; / & gt ; 
 . . . 
 + & lt ; / module & gt ; 
 + & lt ; / module & gt ; 
 < / source > 
 
 < p >
