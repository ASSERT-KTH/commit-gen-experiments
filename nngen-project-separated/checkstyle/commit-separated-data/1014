BLEU SCORE: 0.29765372490051634

TEST MSG: minor : fix for linkcheck plugin violation
GENERATED MSG: minor : fix for linkcheck plugin validation ( googlewebtoolkit . blogspot . com )

TEST DIFF (one line): diff - - git a / src / xdocs / google _ style . xml b / src / xdocs / google _ style . xml <nl> index 49b04f5 . . 2aa5f87 100644 <nl> - - - a / src / xdocs / google _ style . xml <nl> + + + b / src / xdocs / google _ style . xml <nl> @ @ - 575 , 7 + 575 , 7 @ @ <nl> < br / > <nl> We can detect URL with protocol type as http : / / , https : / / etc . <nl> < br / > <nl> - < a href = " https : / / googlewebtoolkit . blogspot . com / 2008 / 07 / getting - to - really - know - gwt - part - 1 - jsni . html " > JSNI < / a > <nl> + < a href = " https : / / webtoolkit . googleblog . com / 2008 / 07 / getting - to - really - know - gwt - part - 1 - jsni . html " > JSNI < / a > <nl> could not be detected right now , but might be possible after comments and <nl> javadoc support appear in Checkstyle <nl> < / td >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> index b3283de . . ce18e33 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> @ @ - 53 , 7 + 53 , 26 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * <nl> * < p > Enums by definition are static implicit subclasses of java . lang . Enum & # 60 ; E & # 62 ; . <nl> * So , the < code > static < / code > modifier on the enums is redundant . In addition , <nl> - * if enum is inside of interface , < code > public < / code > modifier is also redundant . <nl> + * if enum is inside of interface , < code > public < / code > modifier is also redundant . < / p > <nl> + * <nl> + * < p > Enums can also contain abstract methods and methods which can be overridden by the declared <nl> + * enumeration fields . <nl> + * See the following example : < / p > <nl> + * < pre > <nl> + * public enum EnumClass { <nl> + * FIELD _ 1 , <nl> + * FIELD _ 2 { <nl> + * & # 64 ; Override <nl> + * public final void method1 ( ) { } / / violation expected <nl> + * } ; <nl> + * <nl> + * public void method1 ( ) { } <nl> + * public final void method2 ( ) { } / / no violation expected <nl> + * } <nl> + * < / pre > <nl> + * <nl> + * < p > Since these methods can be overridden in these situations , the final methods are not <nl> + * marked as redundant even though they can ' t be extended by other classes / enums . < / p > <nl> * <nl> * < p > Final classes by definition cannot be extended so the < code > final < / code > <nl> * modifier on the method of a final class is redundant . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java <nl> index 8528623 . . 8bf986b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java <nl> @ @ - 223 , 4 + 223 , 11 @ @ public class RedundantModifierCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputFinalInAbstractMethods . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testEnumMethods ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( RedundantModifierCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputFinalInEnumMethods . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInEnumMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInEnumMethods . java <nl> new file mode 100644 <nl> index 0000000 . . 3dae26e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInEnumMethods . java <nl> @ @ - 0 , 0 + 1 , 32 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> + <nl> + public enum InputFinalInEnumMethods { <nl> + E1 , <nl> + E2 { <nl> + @ Override <nl> + public final void v ( ) { <nl> + } <nl> + } ; <nl> + <nl> + public void v ( ) { <nl> + } <nl> + <nl> + / / not redundant since field can override this method if ' final ' is removed <nl> + / / and that may not be desirable <nl> + public final void v2 ( ) { <nl> + } <nl> + } <nl> + enum InputFinalInEnumMethods2 { <nl> + E1 { <nl> + @ Override <nl> + public final void v ( ) { <nl> + } <nl> + } , <nl> + E2 { <nl> + @ Override <nl> + public void v ( ) { <nl> + } <nl> + } ; <nl> + <nl> + public abstract void v ( ) ; <nl> + } <nl> diff - - git a / src / xdocs / config _ modifier . xml b / src / xdocs / config _ modifier . xml <nl> index 6a9c3e6 . . 6ac8294 100644 <nl> - - - a / src / xdocs / config _ modifier . xml <nl> + + + b / src / xdocs / config _ modifier . xml <nl> @ @ - 187 , 6 + 187 , 30 @ @ <nl> < / p > <nl> <nl> < p > <nl> + Enums can also contain abstract methods and methods which can be overridden by the declared <nl> + enumeration fields . <nl> + See the following example : <nl> + < / p > <nl> + <nl> + < source > <nl> + public enum EnumClass { <nl> + FIELD _ 1 , <nl> + FIELD _ 2 { <nl> + & # 64 ; Override <nl> + public final void method1 ( ) { } / / violation expected <nl> + } ; <nl> + <nl> + public void method1 ( ) { } <nl> + public final void method2 ( ) { } / / no violation expected <nl> + } <nl> + < / source > <nl> + <nl> + < p > <nl> + Since these methods can be overridden in these situations , the final methods are not <nl> + marked as redundant even though they can ' t be extended by other classes / enums . <nl> + < / p > <nl> + <nl> + < p > <nl> Nested < code > enum < / code > types are always static by default . <nl> < / p > <nl>

TEST DIFF:
diff - - git a / src / xdocs / google _ style . xml b / src / xdocs / google _ style . xml 
 index 49b04f5 . . 2aa5f87 100644 
 - - - a / src / xdocs / google _ style . xml 
 + + + b / src / xdocs / google _ style . xml 
 @ @ - 575 , 7 + 575 , 7 @ @ 
 < br / > 
 We can detect URL with protocol type as http : / / , https : / / etc . 
 < br / > 
 - < a href = " https : / / googlewebtoolkit . blogspot . com / 2008 / 07 / getting - to - really - know - gwt - part - 1 - jsni . html " > JSNI < / a > 
 + < a href = " https : / / webtoolkit . googleblog . com / 2008 / 07 / getting - to - really - know - gwt - part - 1 - jsni . html " > JSNI < / a > 
 could not be detected right now , but might be possible after comments and 
 javadoc support appear in Checkstyle 
 < / td >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 index b3283de . . ce18e33 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 @ @ - 53 , 7 + 53 , 26 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * 
 * < p > Enums by definition are static implicit subclasses of java . lang . Enum & # 60 ; E & # 62 ; . 
 * So , the < code > static < / code > modifier on the enums is redundant . In addition , 
 - * if enum is inside of interface , < code > public < / code > modifier is also redundant . 
 + * if enum is inside of interface , < code > public < / code > modifier is also redundant . < / p > 
 + * 
 + * < p > Enums can also contain abstract methods and methods which can be overridden by the declared 
 + * enumeration fields . 
 + * See the following example : < / p > 
 + * < pre > 
 + * public enum EnumClass { 
 + * FIELD _ 1 , 
 + * FIELD _ 2 { 
 + * & # 64 ; Override 
 + * public final void method1 ( ) { } / / violation expected 
 + * } ; 
 + * 
 + * public void method1 ( ) { } 
 + * public final void method2 ( ) { } / / no violation expected 
 + * } 
 + * < / pre > 
 + * 
 + * < p > Since these methods can be overridden in these situations , the final methods are not 
 + * marked as redundant even though they can ' t be extended by other classes / enums . < / p > 
 * 
 * < p > Final classes by definition cannot be extended so the < code > final < / code > 
 * modifier on the method of a final class is redundant . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java 
 index 8528623 . . 8bf986b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java 
 @ @ - 223 , 4 + 223 , 11 @ @ public class RedundantModifierCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputFinalInAbstractMethods . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testEnumMethods ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( RedundantModifierCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputFinalInEnumMethods . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInEnumMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInEnumMethods . java 
 new file mode 100644 
 index 0000000 . . 3dae26e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInEnumMethods . java 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 + 
 + public enum InputFinalInEnumMethods { 
 + E1 , 
 + E2 { 
 + @ Override 
 + public final void v ( ) { 
 + } 
 + } ; 
 + 
 + public void v ( ) { 
 + } 
 + 
 + / / not redundant since field can override this method if ' final ' is removed 
 + / / and that may not be desirable 
 + public final void v2 ( ) { 
 + } 
 + } 
 + enum InputFinalInEnumMethods2 { 
 + E1 { 
 + @ Override 
 + public final void v ( ) { 
 + } 
 + } , 
 + E2 { 
 + @ Override 
 + public void v ( ) { 
 + } 
 + } ; 
 + 
 + public abstract void v ( ) ; 
 + } 
 diff - - git a / src / xdocs / config _ modifier . xml b / src / xdocs / config _ modifier . xml 
 index 6a9c3e6 . . 6ac8294 100644 
 - - - a / src / xdocs / config _ modifier . xml 
 + + + b / src / xdocs / config _ modifier . xml 
 @ @ - 187 , 6 + 187 , 30 @ @ 
 < / p > 
 
 < p > 
 + Enums can also contain abstract methods and methods which can be overridden by the declared 
 + enumeration fields . 
 + See the following example : 
 + < / p > 
 + 
 + < source > 
 + public enum EnumClass { 
 + FIELD _ 1 , 
 + FIELD _ 2 { 
 + & # 64 ; Override 
 + public final void method1 ( ) { } / / violation expected 
 + } ; 
 + 
 + public void method1 ( ) { } 
 + public final void method2 ( ) { } / / no violation expected 
 + } 
 + < / source > 
 + 
 + < p > 
 + Since these methods can be overridden in these situations , the final methods are not 
 + marked as redundant even though they can ' t be extended by other classes / enums . 
 + < / p > 
 + 
 + < p > 
 Nested < code > enum < / code > types are always static by default . 
 < / p > 

