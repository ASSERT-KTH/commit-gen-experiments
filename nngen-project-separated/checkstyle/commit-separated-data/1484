BLEU SCORE: 0.0379680177759557

TEST MSG: Issue # 2451 : ignore deprecated classes from code coverage
GENERATED MSG: cobertura : generated files grammar / javadoc was added to exclude

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index d037fc9 . . b9d9f9b 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1729 , 6 + 1729 , 8 @ @ <nl> < exclude > com / puppycrawl / tools / checkstyle / grammars / * . class < / exclude > <nl> < exclude > com / puppycrawl / tools / checkstyle / grammars / javadoc / * . class < / exclude > <nl> < exclude > com / puppycrawl / tools / checkstyle / gui / * . class < / exclude > <nl> + < ! - - deprecated classes - - > <nl> + < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . class < / exclude > <nl> < / excludes > <nl> < / instrumentation > <nl> < / configuration >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / CheckUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / CheckUtils . java <nl> index 1af3696 . . f890427 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / CheckUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / CheckUtils . java <nl> @ @ - 154 , 35 + 154 , 35 @ @ public final class CheckUtils <nl> String txt = text . replaceAll ( " _ " , " " ) ; <nl> double result = 0 ; <nl> switch ( type ) { <nl> - case TokenTypes . NUM _ FLOAT : <nl> - case TokenTypes . NUM _ DOUBLE : <nl> - result = Double . parseDouble ( txt ) ; <nl> - break ; <nl> - case TokenTypes . NUM _ INT : <nl> - case TokenTypes . NUM _ LONG : <nl> - int radix = BASE _ 10 ; <nl> - if ( txt . startsWith ( " 0x " ) | | txt . startsWith ( " 0X " ) ) { <nl> - radix = BASE _ 16 ; <nl> - txt = txt . substring ( 2 ) ; <nl> - } <nl> - else if ( txt . charAt ( 0 ) = = ' 0 ' ) { <nl> - radix = BASE _ 8 ; <nl> - txt = txt . substring ( 1 ) ; <nl> - } <nl> - if ( ( txt . endsWith ( " L " ) ) | | ( txt . endsWith ( " l " ) ) ) { <nl> - txt = txt . substring ( 0 , txt . length ( ) - 1 ) ; <nl> - } <nl> - if ( txt . length ( ) > 0 ) { <nl> - if ( type = = TokenTypes . NUM _ INT ) { <nl> - result = parseInt ( txt , radix ) ; <nl> + case TokenTypes . NUM _ FLOAT : <nl> + case TokenTypes . NUM _ DOUBLE : <nl> + result = Double . parseDouble ( txt ) ; <nl> + break ; <nl> + case TokenTypes . NUM _ INT : <nl> + case TokenTypes . NUM _ LONG : <nl> + int radix = BASE _ 10 ; <nl> + if ( txt . startsWith ( " 0x " ) | | txt . startsWith ( " 0X " ) ) { <nl> + radix = BASE _ 16 ; <nl> + txt = txt . substring ( 2 ) ; <nl> } <nl> - else { <nl> - result = parseLong ( txt , radix ) ; <nl> + else if ( txt . charAt ( 0 ) = = ' 0 ' ) { <nl> + radix = BASE _ 8 ; <nl> + txt = txt . substring ( 1 ) ; <nl> } <nl> - } <nl> - break ; <nl> - default : <nl> - break ; <nl> + if ( ( txt . endsWith ( " L " ) ) | | ( txt . endsWith ( " l " ) ) ) { <nl> + txt = txt . substring ( 0 , txt . length ( ) - 1 ) ; <nl> + } <nl> + if ( txt . length ( ) > 0 ) { <nl> + if ( type = = TokenTypes . NUM _ INT ) { <nl> + result = parseInt ( txt , radix ) ; <nl> + } <nl> + else { <nl> + result = parseLong ( txt , radix ) ; <nl> + } <nl> + } <nl> + break ; <nl> + default : <nl> + break ; <nl> } <nl> return result ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java <nl> index a1c7401 . . b6fcf6e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java <nl> @ @ - 76 , 17 + 76 , 17 @ @ public abstract class DeclarationCollector extends Check <nl> public void visitToken ( DetailAST ast ) <nl> { <nl> switch ( ast . getType ( ) ) { <nl> - case TokenTypes . CLASS _ DEF : <nl> - case TokenTypes . INTERFACE _ DEF : <nl> - case TokenTypes . ENUM _ DEF : <nl> - case TokenTypes . ANNOTATION _ DEF : <nl> - case TokenTypes . SLIST : <nl> - case TokenTypes . METHOD _ DEF : <nl> - case TokenTypes . CTOR _ DEF : <nl> - this . current = this . frames . get ( ast ) ; <nl> - break ; <nl> - default : <nl> - / / do nothing <nl> + case TokenTypes . CLASS _ DEF : <nl> + case TokenTypes . INTERFACE _ DEF : <nl> + case TokenTypes . ENUM _ DEF : <nl> + case TokenTypes . ANNOTATION _ DEF : <nl> + case TokenTypes . SLIST : <nl> + case TokenTypes . METHOD _ DEF : <nl> + case TokenTypes . CTOR _ DEF : <nl> + this . current = this . frames . get ( ast ) ; <nl> + break ; <nl> + default : <nl> + / / do nothing <nl> } <nl> } / / end visitToken <nl> <nl> @ @ - 101 , 61 + 101 , 61 @ @ public abstract class DeclarationCollector extends Check <nl> { <nl> final LexicalFrame frame = frameStack . peek ( ) ; <nl> switch ( ast . getType ( ) ) { <nl> - case TokenTypes . VARIABLE _ DEF : { <nl> - final String name = <nl> - ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> - if ( frame instanceof ClassFrame ) { <nl> - final DetailAST mods = <nl> - ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - if ( ScopeUtils . inInterfaceBlock ( ast ) <nl> - | | mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) <nl> - { <nl> - ( ( ClassFrame ) frame ) . addStaticMember ( name ) ; <nl> + case TokenTypes . VARIABLE _ DEF : { <nl> + final String name = <nl> + ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + if ( frame instanceof ClassFrame ) { <nl> + final DetailAST mods = <nl> + ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + if ( ScopeUtils . inInterfaceBlock ( ast ) <nl> + | | mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) <nl> + { <nl> + ( ( ClassFrame ) frame ) . addStaticMember ( name ) ; <nl> + } <nl> + else { <nl> + ( ( ClassFrame ) frame ) . addInstanceMember ( name ) ; <nl> + } <nl> } <nl> else { <nl> - ( ( ClassFrame ) frame ) . addInstanceMember ( name ) ; <nl> + frame . addName ( name ) ; <nl> } <nl> + break ; <nl> } <nl> - else { <nl> - frame . addName ( name ) ; <nl> + case TokenTypes . PARAMETER _ DEF : { <nl> + final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> + frame . addName ( nameAST . getText ( ) ) ; <nl> + break ; <nl> } <nl> - break ; <nl> - } <nl> - case TokenTypes . PARAMETER _ DEF : { <nl> - final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> - frame . addName ( nameAST . getText ( ) ) ; <nl> - break ; <nl> - } <nl> - case TokenTypes . CLASS _ DEF : <nl> - case TokenTypes . INTERFACE _ DEF : <nl> - case TokenTypes . ENUM _ DEF : <nl> - case TokenTypes . ANNOTATION _ DEF : { <nl> - final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> - frame . addName ( nameAST . getText ( ) ) ; <nl> - frameStack . addFirst ( new ClassFrame ( frame ) ) ; <nl> - break ; <nl> - } <nl> - case TokenTypes . SLIST : <nl> - frameStack . addFirst ( new BlockFrame ( frame ) ) ; <nl> - break ; <nl> - case TokenTypes . METHOD _ DEF : { <nl> - final String name = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> - if ( frame instanceof ClassFrame ) { <nl> - final DetailAST mods = <nl> - ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { <nl> - ( ( ClassFrame ) frame ) . addStaticMethod ( name ) ; <nl> - } <nl> - else { <nl> - ( ( ClassFrame ) frame ) . addInstanceMethod ( name ) ; <nl> + case TokenTypes . CLASS _ DEF : <nl> + case TokenTypes . INTERFACE _ DEF : <nl> + case TokenTypes . ENUM _ DEF : <nl> + case TokenTypes . ANNOTATION _ DEF : { <nl> + final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> + frame . addName ( nameAST . getText ( ) ) ; <nl> + frameStack . addFirst ( new ClassFrame ( frame ) ) ; <nl> + break ; <nl> + } <nl> + case TokenTypes . SLIST : <nl> + frameStack . addFirst ( new BlockFrame ( frame ) ) ; <nl> + break ; <nl> + case TokenTypes . METHOD _ DEF : { <nl> + final String name = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + if ( frame instanceof ClassFrame ) { <nl> + final DetailAST mods = <nl> + ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { <nl> + ( ( ClassFrame ) frame ) . addStaticMethod ( name ) ; <nl> + } <nl> + else { <nl> + ( ( ClassFrame ) frame ) . addInstanceMethod ( name ) ; <nl> + } <nl> } <nl> } <nl> - } <nl> - case TokenTypes . CTOR _ DEF : <nl> - frameStack . addFirst ( new MethodFrame ( frame ) ) ; <nl> - break ; <nl> - default : <nl> - / / do nothing <nl> + case TokenTypes . CTOR _ DEF : <nl> + frameStack . addFirst ( new MethodFrame ( frame ) ) ; <nl> + break ; <nl> + default : <nl> + / / do nothing <nl> } <nl> } <nl> <nl> @ @ - 170 , 17 + 170 , 17 @ @ public abstract class DeclarationCollector extends Check <nl> DetailAST ast ) <nl> { <nl> switch ( ast . getType ( ) ) { <nl> - case TokenTypes . CLASS _ DEF : <nl> - case TokenTypes . INTERFACE _ DEF : <nl> - case TokenTypes . ENUM _ DEF : <nl> - case TokenTypes . ANNOTATION _ DEF : <nl> - case TokenTypes . SLIST : <nl> - case TokenTypes . METHOD _ DEF : <nl> - case TokenTypes . CTOR _ DEF : <nl> - this . frames . put ( ast , frameStack . poll ( ) ) ; <nl> - break ; <nl> - default : <nl> - / / do nothing <nl> + case TokenTypes . CLASS _ DEF : <nl> + case TokenTypes . INTERFACE _ DEF : <nl> + case TokenTypes . ENUM _ DEF : <nl> + case TokenTypes . ANNOTATION _ DEF : <nl> + case TokenTypes . SLIST : <nl> + case TokenTypes . METHOD _ DEF : <nl> + case TokenTypes . CTOR _ DEF : <nl> + this . frames . put ( ast , frameStack . poll ( ) ) ; <nl> + break ; <nl> + default : <nl> + / / do nothing <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> index 5c7707c . . 9c53075 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> @ @ - 256 , 23 + 256 , 23 @ @ public class SuppressWarningsHolder <nl> if ( nextAST ! = null ) { <nl> final int nextType = nextAST . getType ( ) ; <nl> switch ( nextType ) { <nl> - case TokenTypes . EXPR : <nl> - case TokenTypes . ANNOTATION _ ARRAY _ INIT : <nl> - values = getAnnotationValues ( nextAST ) ; <nl> - break ; <nl> + case TokenTypes . EXPR : <nl> + case TokenTypes . ANNOTATION _ ARRAY _ INIT : <nl> + values = getAnnotationValues ( nextAST ) ; <nl> + break ; <nl> <nl> - case TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR : <nl> - / / expected children : IDENT ASSIGN ( EXPR | <nl> - / / ANNOTATION _ ARRAY _ INIT ) <nl> - values = getAnnotationValues ( getNthChild ( nextAST , 2 ) ) ; <nl> - break ; <nl> + case TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR : <nl> + / / expected children : IDENT ASSIGN ( EXPR | <nl> + / / ANNOTATION _ ARRAY _ INIT ) <nl> + values = getAnnotationValues ( getNthChild ( nextAST , 2 ) ) ; <nl> + break ; <nl> <nl> - case TokenTypes . RPAREN : <nl> - / / no value present ( not valid Java ) <nl> - break ; <nl> + case TokenTypes . RPAREN : <nl> + / / no value present ( not valid Java ) <nl> + break ; <nl> <nl> - default : <nl> - / / unknown annotation value type ( new syntax ? ) <nl> + default : <nl> + / / unknown annotation value type ( new syntax ? ) <nl> } <nl> } <nl> } <nl> @ @ - 286 , 32 + 286 , 32 @ @ public class SuppressWarningsHolder <nl> DetailAST parentAST = ast . getParent ( ) ; <nl> if ( parentAST ! = null ) { <nl> switch ( parentAST . getType ( ) ) { <nl> - case TokenTypes . MODIFIERS : <nl> - case TokenTypes . ANNOTATIONS : <nl> - parentAST = parentAST . getParent ( ) ; <nl> - if ( parentAST ! = null ) { <nl> - switch ( parentAST . getType ( ) ) { <nl> - case TokenTypes . ANNOTATION _ DEF : <nl> - case TokenTypes . PACKAGE _ DEF : <nl> - case TokenTypes . CLASS _ DEF : <nl> - case TokenTypes . INTERFACE _ DEF : <nl> - case TokenTypes . ENUM _ DEF : <nl> - case TokenTypes . ENUM _ CONSTANT _ DEF : <nl> - case TokenTypes . CTOR _ DEF : <nl> - case TokenTypes . METHOD _ DEF : <nl> - case TokenTypes . PARAMETER _ DEF : <nl> - case TokenTypes . VARIABLE _ DEF : <nl> - targetAST = parentAST ; <nl> - break ; <nl> - <nl> - default : <nl> - / / unexpected target type <nl> + case TokenTypes . MODIFIERS : <nl> + case TokenTypes . ANNOTATIONS : <nl> + parentAST = parentAST . getParent ( ) ; <nl> + if ( parentAST ! = null ) { <nl> + switch ( parentAST . getType ( ) ) { <nl> + case TokenTypes . ANNOTATION _ DEF : <nl> + case TokenTypes . PACKAGE _ DEF : <nl> + case TokenTypes . CLASS _ DEF : <nl> + case TokenTypes . INTERFACE _ DEF : <nl> + case TokenTypes . ENUM _ DEF : <nl> + case TokenTypes . ENUM _ CONSTANT _ DEF : <nl> + case TokenTypes . CTOR _ DEF : <nl> + case TokenTypes . METHOD _ DEF : <nl> + case TokenTypes . PARAMETER _ DEF : <nl> + case TokenTypes . VARIABLE _ DEF : <nl> + targetAST = parentAST ; <nl> + break ; <nl> + <nl> + default : <nl> + / / unexpected target type <nl> + } <nl> } <nl> - } <nl> - break ; <nl> + break ; <nl> <nl> - default : <nl> - / / unexpected container type <nl> + default : <nl> + / / unexpected container type <nl> } <nl> } <nl> if ( targetAST = = null ) { <nl> @ @ - 396 , 15 + 396 , 15 @ @ public class SuppressWarningsHolder <nl> if ( ast ! = null & & ast . getType ( ) = = TokenTypes . EXPR ) { <nl> final DetailAST firstChild = ast . getFirstChild ( ) ; <nl> switch ( firstChild . getType ( ) ) { <nl> - case TokenTypes . STRING _ LITERAL : <nl> - / / NOTE : escaped characters are not unescaped <nl> - final String quotedText = firstChild . getText ( ) ; <nl> - return quotedText . substring ( 1 , quotedText . length ( ) - 1 ) ; <nl> - case TokenTypes . IDENT : <nl> - return firstChild . getText ( ) ; <nl> - default : <nl> - throw new IllegalArgumentException ( " String literal AST expected : " <nl> - + firstChild ) ; <nl> + case TokenTypes . STRING _ LITERAL : <nl> + / / NOTE : escaped characters are not unescaped <nl> + final String quotedText = firstChild . getText ( ) ; <nl> + return quotedText . substring ( 1 , quotedText . length ( ) - 1 ) ; <nl> + case TokenTypes . IDENT : <nl> + return firstChild . getText ( ) ; <nl> + default : <nl> + throw new IllegalArgumentException ( " String literal AST expected : " <nl> + + firstChild ) ; <nl> } <nl> } <nl> throw new IllegalArgumentException ( " Expression AST expected : " + ast ) ; <nl> @ @ - 420 , 21 + 420 , 21 @ @ public class SuppressWarningsHolder <nl> private static List < String > getAnnotationValues ( DetailAST ast ) <nl> { <nl> switch ( ast . getType ( ) ) { <nl> - case TokenTypes . EXPR : <nl> - return ImmutableList . of ( getStringExpr ( ast ) ) ; <nl> - <nl> - case TokenTypes . ANNOTATION _ ARRAY _ INIT : <nl> - final List < String > valueList = Lists . newLinkedList ( ) ; <nl> - DetailAST childAST = ast . getFirstChild ( ) ; <nl> - while ( childAST ! = null ) { <nl> - if ( childAST . getType ( ) = = TokenTypes . EXPR ) { <nl> - valueList . add ( getStringExpr ( childAST ) ) ; <nl> + case TokenTypes . EXPR : <nl> + return ImmutableList . of ( getStringExpr ( ast ) ) ; <nl> + <nl> + case TokenTypes . ANNOTATION _ ARRAY _ INIT : <nl> + final List < String > valueList = Lists . newLinkedList ( ) ; <nl> + DetailAST childAST = ast . getFirstChild ( ) ; <nl> + while ( childAST ! = null ) { <nl> + if ( childAST . getType ( ) = = TokenTypes . EXPR ) { <nl> + valueList . add ( getStringExpr ( childAST ) ) ; <nl> + } <nl> + childAST = childAST . getNextSibling ( ) ; <nl> } <nl> - childAST = childAST . getNextSibling ( ) ; <nl> - } <nl> - return valueList ; <nl> + return valueList ; <nl> <nl> - default : <nl> + default : <nl> } <nl> throw new IllegalArgumentException ( <nl> " Expression or annotation array initializer AST expected : " + ast ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> index f9bd65b . . 0f908b1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java <nl> @ @ - 114 , 17 + 114 , 17 @ @ public class UncommentedMainCheck <nl> public void visitToken ( DetailAST ast ) <nl> { <nl> switch ( ast . getType ( ) ) { <nl> - case TokenTypes . PACKAGE _ DEF : <nl> - visitPackageDef ( ast ) ; <nl> - break ; <nl> - case TokenTypes . CLASS _ DEF : <nl> - visitClassDef ( ast ) ; <nl> - break ; <nl> - case TokenTypes . METHOD _ DEF : <nl> - visitMethodDef ( ast ) ; <nl> - break ; <nl> - default : <nl> - throw new IllegalStateException ( ast . toString ( ) ) ; <nl> + case TokenTypes . PACKAGE _ DEF : <nl> + visitPackageDef ( ast ) ; <nl> + break ; <nl> + case TokenTypes . CLASS _ DEF : <nl> + visitClassDef ( ast ) ; <nl> + break ; <nl> + case TokenTypes . METHOD _ DEF : <nl> + visitMethodDef ( ast ) ; <nl> + break ; <nl> + default : <nl> + throw new IllegalStateException ( ast . toString ( ) ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index d037fc9 . . b9d9f9b 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1729 , 6 + 1729 , 8 @ @ 
 < exclude > com / puppycrawl / tools / checkstyle / grammars / * . class < / exclude > 
 < exclude > com / puppycrawl / tools / checkstyle / grammars / javadoc / * . class < / exclude > 
 < exclude > com / puppycrawl / tools / checkstyle / gui / * . class < / exclude > 
 + < ! - - deprecated classes - - > 
 + < exclude > com / puppycrawl / tools / checkstyle / checks / coding / AbstractIllegalCheck . class < / exclude > 
 < / excludes > 
 < / instrumentation > 
 < / configuration >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / CheckUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / CheckUtils . java 
 index 1af3696 . . f890427 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / CheckUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / CheckUtils . java 
 @ @ - 154 , 35 + 154 , 35 @ @ public final class CheckUtils 
 String txt = text . replaceAll ( " _ " , " " ) ; 
 double result = 0 ; 
 switch ( type ) { 
 - case TokenTypes . NUM _ FLOAT : 
 - case TokenTypes . NUM _ DOUBLE : 
 - result = Double . parseDouble ( txt ) ; 
 - break ; 
 - case TokenTypes . NUM _ INT : 
 - case TokenTypes . NUM _ LONG : 
 - int radix = BASE _ 10 ; 
 - if ( txt . startsWith ( " 0x " ) | | txt . startsWith ( " 0X " ) ) { 
 - radix = BASE _ 16 ; 
 - txt = txt . substring ( 2 ) ; 
 - } 
 - else if ( txt . charAt ( 0 ) = = ' 0 ' ) { 
 - radix = BASE _ 8 ; 
 - txt = txt . substring ( 1 ) ; 
 - } 
 - if ( ( txt . endsWith ( " L " ) ) | | ( txt . endsWith ( " l " ) ) ) { 
 - txt = txt . substring ( 0 , txt . length ( ) - 1 ) ; 
 - } 
 - if ( txt . length ( ) > 0 ) { 
 - if ( type = = TokenTypes . NUM _ INT ) { 
 - result = parseInt ( txt , radix ) ; 
 + case TokenTypes . NUM _ FLOAT : 
 + case TokenTypes . NUM _ DOUBLE : 
 + result = Double . parseDouble ( txt ) ; 
 + break ; 
 + case TokenTypes . NUM _ INT : 
 + case TokenTypes . NUM _ LONG : 
 + int radix = BASE _ 10 ; 
 + if ( txt . startsWith ( " 0x " ) | | txt . startsWith ( " 0X " ) ) { 
 + radix = BASE _ 16 ; 
 + txt = txt . substring ( 2 ) ; 
 } 
 - else { 
 - result = parseLong ( txt , radix ) ; 
 + else if ( txt . charAt ( 0 ) = = ' 0 ' ) { 
 + radix = BASE _ 8 ; 
 + txt = txt . substring ( 1 ) ; 
 } 
 - } 
 - break ; 
 - default : 
 - break ; 
 + if ( ( txt . endsWith ( " L " ) ) | | ( txt . endsWith ( " l " ) ) ) { 
 + txt = txt . substring ( 0 , txt . length ( ) - 1 ) ; 
 + } 
 + if ( txt . length ( ) > 0 ) { 
 + if ( type = = TokenTypes . NUM _ INT ) { 
 + result = parseInt ( txt , radix ) ; 
 + } 
 + else { 
 + result = parseLong ( txt , radix ) ; 
 + } 
 + } 
 + break ; 
 + default : 
 + break ; 
 } 
 return result ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java 
 index a1c7401 . . b6fcf6e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DeclarationCollector . java 
 @ @ - 76 , 17 + 76 , 17 @ @ public abstract class DeclarationCollector extends Check 
 public void visitToken ( DetailAST ast ) 
 { 
 switch ( ast . getType ( ) ) { 
 - case TokenTypes . CLASS _ DEF : 
 - case TokenTypes . INTERFACE _ DEF : 
 - case TokenTypes . ENUM _ DEF : 
 - case TokenTypes . ANNOTATION _ DEF : 
 - case TokenTypes . SLIST : 
 - case TokenTypes . METHOD _ DEF : 
 - case TokenTypes . CTOR _ DEF : 
 - this . current = this . frames . get ( ast ) ; 
 - break ; 
 - default : 
 - / / do nothing 
 + case TokenTypes . CLASS _ DEF : 
 + case TokenTypes . INTERFACE _ DEF : 
 + case TokenTypes . ENUM _ DEF : 
 + case TokenTypes . ANNOTATION _ DEF : 
 + case TokenTypes . SLIST : 
 + case TokenTypes . METHOD _ DEF : 
 + case TokenTypes . CTOR _ DEF : 
 + this . current = this . frames . get ( ast ) ; 
 + break ; 
 + default : 
 + / / do nothing 
 } 
 } / / end visitToken 
 
 @ @ - 101 , 61 + 101 , 61 @ @ public abstract class DeclarationCollector extends Check 
 { 
 final LexicalFrame frame = frameStack . peek ( ) ; 
 switch ( ast . getType ( ) ) { 
 - case TokenTypes . VARIABLE _ DEF : { 
 - final String name = 
 - ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 - if ( frame instanceof ClassFrame ) { 
 - final DetailAST mods = 
 - ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - if ( ScopeUtils . inInterfaceBlock ( ast ) 
 - | | mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) 
 - { 
 - ( ( ClassFrame ) frame ) . addStaticMember ( name ) ; 
 + case TokenTypes . VARIABLE _ DEF : { 
 + final String name = 
 + ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + if ( frame instanceof ClassFrame ) { 
 + final DetailAST mods = 
 + ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + if ( ScopeUtils . inInterfaceBlock ( ast ) 
 + | | mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) 
 + { 
 + ( ( ClassFrame ) frame ) . addStaticMember ( name ) ; 
 + } 
 + else { 
 + ( ( ClassFrame ) frame ) . addInstanceMember ( name ) ; 
 + } 
 } 
 else { 
 - ( ( ClassFrame ) frame ) . addInstanceMember ( name ) ; 
 + frame . addName ( name ) ; 
 } 
 + break ; 
 } 
 - else { 
 - frame . addName ( name ) ; 
 + case TokenTypes . PARAMETER _ DEF : { 
 + final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 + frame . addName ( nameAST . getText ( ) ) ; 
 + break ; 
 } 
 - break ; 
 - } 
 - case TokenTypes . PARAMETER _ DEF : { 
 - final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 - frame . addName ( nameAST . getText ( ) ) ; 
 - break ; 
 - } 
 - case TokenTypes . CLASS _ DEF : 
 - case TokenTypes . INTERFACE _ DEF : 
 - case TokenTypes . ENUM _ DEF : 
 - case TokenTypes . ANNOTATION _ DEF : { 
 - final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 - frame . addName ( nameAST . getText ( ) ) ; 
 - frameStack . addFirst ( new ClassFrame ( frame ) ) ; 
 - break ; 
 - } 
 - case TokenTypes . SLIST : 
 - frameStack . addFirst ( new BlockFrame ( frame ) ) ; 
 - break ; 
 - case TokenTypes . METHOD _ DEF : { 
 - final String name = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 - if ( frame instanceof ClassFrame ) { 
 - final DetailAST mods = 
 - ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { 
 - ( ( ClassFrame ) frame ) . addStaticMethod ( name ) ; 
 - } 
 - else { 
 - ( ( ClassFrame ) frame ) . addInstanceMethod ( name ) ; 
 + case TokenTypes . CLASS _ DEF : 
 + case TokenTypes . INTERFACE _ DEF : 
 + case TokenTypes . ENUM _ DEF : 
 + case TokenTypes . ANNOTATION _ DEF : { 
 + final DetailAST nameAST = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 + frame . addName ( nameAST . getText ( ) ) ; 
 + frameStack . addFirst ( new ClassFrame ( frame ) ) ; 
 + break ; 
 + } 
 + case TokenTypes . SLIST : 
 + frameStack . addFirst ( new BlockFrame ( frame ) ) ; 
 + break ; 
 + case TokenTypes . METHOD _ DEF : { 
 + final String name = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + if ( frame instanceof ClassFrame ) { 
 + final DetailAST mods = 
 + ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + if ( mods . branchContains ( TokenTypes . LITERAL _ STATIC ) ) { 
 + ( ( ClassFrame ) frame ) . addStaticMethod ( name ) ; 
 + } 
 + else { 
 + ( ( ClassFrame ) frame ) . addInstanceMethod ( name ) ; 
 + } 
 } 
 } 
 - } 
 - case TokenTypes . CTOR _ DEF : 
 - frameStack . addFirst ( new MethodFrame ( frame ) ) ; 
 - break ; 
 - default : 
 - / / do nothing 
 + case TokenTypes . CTOR _ DEF : 
 + frameStack . addFirst ( new MethodFrame ( frame ) ) ; 
 + break ; 
 + default : 
 + / / do nothing 
 } 
 } 
 
 @ @ - 170 , 17 + 170 , 17 @ @ public abstract class DeclarationCollector extends Check 
 DetailAST ast ) 
 { 
 switch ( ast . getType ( ) ) { 
 - case TokenTypes . CLASS _ DEF : 
 - case TokenTypes . INTERFACE _ DEF : 
 - case TokenTypes . ENUM _ DEF : 
 - case TokenTypes . ANNOTATION _ DEF : 
 - case TokenTypes . SLIST : 
 - case TokenTypes . METHOD _ DEF : 
 - case TokenTypes . CTOR _ DEF : 
 - this . frames . put ( ast , frameStack . poll ( ) ) ; 
 - break ; 
 - default : 
 - / / do nothing 
 + case TokenTypes . CLASS _ DEF : 
 + case TokenTypes . INTERFACE _ DEF : 
 + case TokenTypes . ENUM _ DEF : 
 + case TokenTypes . ANNOTATION _ DEF : 
 + case TokenTypes . SLIST : 
 + case TokenTypes . METHOD _ DEF : 
 + case TokenTypes . CTOR _ DEF : 
 + this . frames . put ( ast , frameStack . poll ( ) ) ; 
 + break ; 
 + default : 
 + / / do nothing 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 index 5c7707c . . 9c53075 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 @ @ - 256 , 23 + 256 , 23 @ @ public class SuppressWarningsHolder 
 if ( nextAST ! = null ) { 
 final int nextType = nextAST . getType ( ) ; 
 switch ( nextType ) { 
 - case TokenTypes . EXPR : 
 - case TokenTypes . ANNOTATION _ ARRAY _ INIT : 
 - values = getAnnotationValues ( nextAST ) ; 
 - break ; 
 + case TokenTypes . EXPR : 
 + case TokenTypes . ANNOTATION _ ARRAY _ INIT : 
 + values = getAnnotationValues ( nextAST ) ; 
 + break ; 
 
 - case TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR : 
 - / / expected children : IDENT ASSIGN ( EXPR | 
 - / / ANNOTATION _ ARRAY _ INIT ) 
 - values = getAnnotationValues ( getNthChild ( nextAST , 2 ) ) ; 
 - break ; 
 + case TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR : 
 + / / expected children : IDENT ASSIGN ( EXPR | 
 + / / ANNOTATION _ ARRAY _ INIT ) 
 + values = getAnnotationValues ( getNthChild ( nextAST , 2 ) ) ; 
 + break ; 
 
 - case TokenTypes . RPAREN : 
 - / / no value present ( not valid Java ) 
 - break ; 
 + case TokenTypes . RPAREN : 
 + / / no value present ( not valid Java ) 
 + break ; 
 
 - default : 
 - / / unknown annotation value type ( new syntax ? ) 
 + default : 
 + / / unknown annotation value type ( new syntax ? ) 
 } 
 } 
 } 
 @ @ - 286 , 32 + 286 , 32 @ @ public class SuppressWarningsHolder 
 DetailAST parentAST = ast . getParent ( ) ; 
 if ( parentAST ! = null ) { 
 switch ( parentAST . getType ( ) ) { 
 - case TokenTypes . MODIFIERS : 
 - case TokenTypes . ANNOTATIONS : 
 - parentAST = parentAST . getParent ( ) ; 
 - if ( parentAST ! = null ) { 
 - switch ( parentAST . getType ( ) ) { 
 - case TokenTypes . ANNOTATION _ DEF : 
 - case TokenTypes . PACKAGE _ DEF : 
 - case TokenTypes . CLASS _ DEF : 
 - case TokenTypes . INTERFACE _ DEF : 
 - case TokenTypes . ENUM _ DEF : 
 - case TokenTypes . ENUM _ CONSTANT _ DEF : 
 - case TokenTypes . CTOR _ DEF : 
 - case TokenTypes . METHOD _ DEF : 
 - case TokenTypes . PARAMETER _ DEF : 
 - case TokenTypes . VARIABLE _ DEF : 
 - targetAST = parentAST ; 
 - break ; 
 - 
 - default : 
 - / / unexpected target type 
 + case TokenTypes . MODIFIERS : 
 + case TokenTypes . ANNOTATIONS : 
 + parentAST = parentAST . getParent ( ) ; 
 + if ( parentAST ! = null ) { 
 + switch ( parentAST . getType ( ) ) { 
 + case TokenTypes . ANNOTATION _ DEF : 
 + case TokenTypes . PACKAGE _ DEF : 
 + case TokenTypes . CLASS _ DEF : 
 + case TokenTypes . INTERFACE _ DEF : 
 + case TokenTypes . ENUM _ DEF : 
 + case TokenTypes . ENUM _ CONSTANT _ DEF : 
 + case TokenTypes . CTOR _ DEF : 
 + case TokenTypes . METHOD _ DEF : 
 + case TokenTypes . PARAMETER _ DEF : 
 + case TokenTypes . VARIABLE _ DEF : 
 + targetAST = parentAST ; 
 + break ; 
 + 
 + default : 
 + / / unexpected target type 
 + } 
 } 
 - } 
 - break ; 
 + break ; 
 
 - default : 
 - / / unexpected container type 
 + default : 
 + / / unexpected container type 
 } 
 } 
 if ( targetAST = = null ) { 
 @ @ - 396 , 15 + 396 , 15 @ @ public class SuppressWarningsHolder 
 if ( ast ! = null & & ast . getType ( ) = = TokenTypes . EXPR ) { 
 final DetailAST firstChild = ast . getFirstChild ( ) ; 
 switch ( firstChild . getType ( ) ) { 
 - case TokenTypes . STRING _ LITERAL : 
 - / / NOTE : escaped characters are not unescaped 
 - final String quotedText = firstChild . getText ( ) ; 
 - return quotedText . substring ( 1 , quotedText . length ( ) - 1 ) ; 
 - case TokenTypes . IDENT : 
 - return firstChild . getText ( ) ; 
 - default : 
 - throw new IllegalArgumentException ( " String literal AST expected : " 
 - + firstChild ) ; 
 + case TokenTypes . STRING _ LITERAL : 
 + / / NOTE : escaped characters are not unescaped 
 + final String quotedText = firstChild . getText ( ) ; 
 + return quotedText . substring ( 1 , quotedText . length ( ) - 1 ) ; 
 + case TokenTypes . IDENT : 
 + return firstChild . getText ( ) ; 
 + default : 
 + throw new IllegalArgumentException ( " String literal AST expected : " 
 + + firstChild ) ; 
 } 
 } 
 throw new IllegalArgumentException ( " Expression AST expected : " + ast ) ; 
 @ @ - 420 , 21 + 420 , 21 @ @ public class SuppressWarningsHolder 
 private static List < String > getAnnotationValues ( DetailAST ast ) 
 { 
 switch ( ast . getType ( ) ) { 
 - case TokenTypes . EXPR : 
 - return ImmutableList . of ( getStringExpr ( ast ) ) ; 
 - 
 - case TokenTypes . ANNOTATION _ ARRAY _ INIT : 
 - final List < String > valueList = Lists . newLinkedList ( ) ; 
 - DetailAST childAST = ast . getFirstChild ( ) ; 
 - while ( childAST ! = null ) { 
 - if ( childAST . getType ( ) = = TokenTypes . EXPR ) { 
 - valueList . add ( getStringExpr ( childAST ) ) ; 
 + case TokenTypes . EXPR : 
 + return ImmutableList . of ( getStringExpr ( ast ) ) ; 
 + 
 + case TokenTypes . ANNOTATION _ ARRAY _ INIT : 
 + final List < String > valueList = Lists . newLinkedList ( ) ; 
 + DetailAST childAST = ast . getFirstChild ( ) ; 
 + while ( childAST ! = null ) { 
 + if ( childAST . getType ( ) = = TokenTypes . EXPR ) { 
 + valueList . add ( getStringExpr ( childAST ) ) ; 
 + } 
 + childAST = childAST . getNextSibling ( ) ; 
 } 
 - childAST = childAST . getNextSibling ( ) ; 
 - } 
 - return valueList ; 
 + return valueList ; 
 
 - default : 
 + default : 
 } 
 throw new IllegalArgumentException ( 
 " Expression or annotation array initializer AST expected : " + ast ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 index f9bd65b . . 0f908b1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheck . java 
 @ @ - 114 , 17 + 114 , 17 @ @ public class UncommentedMainCheck 
 public void visitToken ( DetailAST ast ) 
 { 
 switch ( ast . getType ( ) ) { 
 - case TokenTypes . PACKAGE _ DEF : 
 - visitPackageDef ( ast ) ; 
 - break ; 
 - case TokenTypes . CLASS _ DEF : 
 - visitClassDef ( ast ) ; 
 - break ; 
 - case TokenTypes . METHOD _ DEF : 
 - visitMethodDef ( ast ) ; 
 - break ; 
 - default : 
 - throw new IllegalStateException ( ast . toString ( ) ) ; 
 + case TokenTypes . PACKAGE _ DEF : 
 + visitPackageDef ( ast ) ; 
 + break ; 
 + case TokenTypes . CLASS _ DEF : 
 + visitClassDef ( ast ) ; 
 + break ; 
 + case TokenTypes . METHOD _ DEF : 
 + visitMethodDef ( ast ) ; 
 + break ; 
 + default : 
 + throw new IllegalStateException ( ast . toString ( ) ) ; 
 } 
 } 

