BLEU SCORE: 0.03089055318156698

TEST MSG: Issue # 2666 : Print name of the Check after printing violation message
GENERATED MSG: Fix typos in import and java8 packages . # 1555

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> index 6a2f42a . . 306a762 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ import java . util . Properties ; <nl> import java . util . regex . Pattern ; <nl> <nl> import com . google . common . collect . Lists ; <nl> + import com . puppycrawl . tools . checkstyle . BriefUtLogger ; <nl> import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . ConfigurationLoader ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> @ @ - 85 , 7 + 86 , 7 @ @ public class BaseCheckTestSupport { <nl> checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . configure ( dc ) ; <nl> - checker . addListener ( new BriefLogger ( stream ) ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> return checker ; <nl> } <nl> <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / BriefLogger . java b / src / it / java / com / google / checkstyle / test / base / BriefLogger . java <nl> deleted file mode 100644 <nl> index 495a7b8 . . 0000000 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / BriefLogger . java <nl> + + + / dev / null <nl> @ @ - 1 , 35 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . google . checkstyle . test . base ; <nl> - <nl> - import java . io . OutputStream ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> - import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> - <nl> - / * * A brief logger that only display info about errors . * / <nl> - class BriefLogger extends DefaultLogger { <nl> - BriefLogger ( OutputStream out ) { <nl> - super ( out , true , out , false , false ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void auditStarted ( AuditEvent event ) { } <nl> - } <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java b / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java <nl> index 85eec3f . . 03d6ad1 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import java . util . Locale ; <nl> <nl> import org . junit . Test ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . BriefUtLogger ; <nl> import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> <nl> @ @ - 42 , 7 + 43 , 7 @ @ public class ConfigValidationTest extends BaseCheckTestSupport { <nl> checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . configure ( checkerConfig ) ; <nl> - checker . addListener ( new BriefLogger ( stream ) ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> <nl> final List < File > files = new ArrayList < > ( ) ; <nl> listFiles ( files , new File ( " src / it / " ) , " java " ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / AuditEvemtFormatter . java b / src / main / java / com / puppycrawl / tools / checkstyle / AuditEvemtFormatter . java <nl> new file mode 100644 <nl> index 0000000 . . 6538e3e <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / AuditEvemtFormatter . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> + <nl> + / * * <nl> + * Represents the formatter interface for log message . <nl> + * @ author Andrei Selkin <nl> + * / <nl> + public interface AuditEvemtFormatter { <nl> + / * * <nl> + * Formats an error message . <nl> + * @ param event audit event . <nl> + * @ return string representation of error message . <nl> + * / <nl> + String format ( AuditEvent event ) ; <nl> + } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatter . java b / src / main / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatter . java <nl> new file mode 100644 <nl> index 0000000 . . a8a296f <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatter . java <nl> @ @ - 0 , 0 + 1 , 93 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import java . util . Locale ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> + import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; <nl> + <nl> + / * * <nl> + * Represents the default formatter for log message . <nl> + * Default log message format is : [ SEVERITY LEVEL ] filePath : lineNo : columnNo : message . [ CheckName ] <nl> + * @ author Andrei Selkin <nl> + * / <nl> + public class AuditEventDefaultFormatter implements AuditEvemtFormatter { <nl> + <nl> + / * * Length of all separators . * / <nl> + private static final int LENGTH _ OF _ ALL _ SEPARATORS = 10 ; <nl> + <nl> + @ Override <nl> + public String format ( AuditEvent event ) { <nl> + final String fileName = event . getFileName ( ) ; <nl> + final String message = event . getMessage ( ) ; <nl> + <nl> + final SeverityLevel severityLevel = event . getSeverityLevel ( ) ; <nl> + final String severityLevelName ; <nl> + if ( severityLevel = = SeverityLevel . WARNING ) { <nl> + / / We change the name of severity level intentionally <nl> + / / to shorten the length of the log message . <nl> + severityLevelName = " WARN " ; <nl> + } <nl> + else { <nl> + severityLevelName = severityLevel . getName ( ) . toUpperCase ( Locale . US ) ; <nl> + } <nl> + <nl> + / / Avoid StringBuffer . expandCapacity <nl> + final int bufLen = calculateBufferLength ( event , severityLevelName . length ( ) ) ; <nl> + final StringBuilder sb = new StringBuilder ( bufLen ) ; <nl> + <nl> + sb . append ( ' [ ' ) . append ( severityLevelName ) . append ( " ] " ) <nl> + . append ( fileName ) . append ( ' : ' ) . append ( event . getLine ( ) ) ; <nl> + if ( event . getColumn ( ) > 0 ) { <nl> + sb . append ( ' : ' ) . append ( event . getColumn ( ) ) ; <nl> + } <nl> + sb . append ( " : " ) . append ( message ) ; <nl> + final String checkShortName = getCheckShortName ( event ) ; <nl> + sb . append ( " [ " ) . append ( checkShortName ) . append ( ' ] ' ) ; <nl> + <nl> + return sb . toString ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the length of the buffer for StringBuilder . <nl> + * bufferLength = fileNameLength + messageLength + lengthOfAllSeparators + <nl> + * + severityNameLength + checkNameLength . <nl> + * @ param event audit event . <nl> + * @ param severityLevelNameLength length of severity level name . <nl> + * @ return the length of the buffer for StringBuilder . <nl> + * / <nl> + private static int calculateBufferLength ( AuditEvent event , int severityLevelNameLength ) { <nl> + return LENGTH _ OF _ ALL _ SEPARATORS + event . getFileName ( ) . length ( ) <nl> + + event . getMessage ( ) . length ( ) + severityLevelNameLength <nl> + + getCheckShortName ( event ) . length ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns check name without ' Check ' suffix . <nl> + * @ param event audit ivent . <nl> + * @ return check name without ' Check ' suffix . <nl> + * / <nl> + private static String getCheckShortName ( AuditEvent event ) { <nl> + final String checkFullName = event . getSourceName ( ) ; <nl> + return checkFullName . substring ( checkFullName . lastIndexOf ( ' . ' ) + 1 , <nl> + checkFullName . lastIndexOf ( " Check " ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> index 3c8edc2 . . 8c3fbc4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> @ @ - 40 , 11 + 40 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; <nl> * @ author < a href = " mailto : stephane . bailliez @ wanadoo . fr " > Stephane Bailliez < / a > <nl> * @ see XMLLogger <nl> * / <nl> - public class DefaultLogger <nl> - extends AutomaticBean <nl> - implements AuditListener { <nl> - / * * Cushion for avoiding StringBuffer . expandCapacity * / <nl> - private static final int BUFFER _ CUSHION = 12 ; <nl> + public class DefaultLogger extends AutomaticBean implements AuditListener { <nl> <nl> / * * Where to write info messages . * * / <nl> private final PrintWriter infoWriter ; <nl> @ @ - 56 , 8 + 52 , 8 @ @ public class DefaultLogger <nl> / * * Close error stream after use . * / <nl> private final boolean closeError ; <nl> <nl> - / * * Print severity level . * / <nl> - private boolean printSeverity = true ; <nl> + / * * Formatter for the log message . * / <nl> + private final AuditEvemtFormatter formatter ; <nl> <nl> / * * <nl> * Creates a new { @ code DefaultLogger } instance . <nl> @ @ - 75 , 15 + 71 , 13 @ @ public class DefaultLogger <nl> * @ param closeInfoAfterUse auditFinished should close infoStream . <nl> * @ param errorStream the { @ code OutputStream } for error messages . <nl> * @ param closeErrorAfterUse auditFinished should close errorStream <nl> - * @ param printSeverity if severity level should be printed . <nl> * / <nl> public DefaultLogger ( OutputStream infoStream , <nl> boolean closeInfoAfterUse , <nl> OutputStream errorStream , <nl> - boolean closeErrorAfterUse , <nl> - boolean printSeverity ) { <nl> - this ( infoStream , closeInfoAfterUse , errorStream , closeErrorAfterUse ) ; <nl> - this . printSeverity = printSeverity ; <nl> + boolean closeErrorAfterUse ) { <nl> + this ( infoStream , closeInfoAfterUse , errorStream , closeErrorAfterUse , <nl> + new AuditEventDefaultFormatter ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 93 , 11 + 87 , 13 @ @ public class DefaultLogger <nl> * @ param closeInfoAfterUse auditFinished should close infoStream <nl> * @ param errorStream the { @ code OutputStream } for error messages <nl> * @ param closeErrorAfterUse auditFinished should close errorStream <nl> + * @ param messageFormatter formatter for the log message . <nl> * / <nl> public DefaultLogger ( OutputStream infoStream , <nl> boolean closeInfoAfterUse , <nl> OutputStream errorStream , <nl> - boolean closeErrorAfterUse ) { <nl> + boolean closeErrorAfterUse , <nl> + AuditEvemtFormatter messageFormatter ) { <nl> closeInfo = closeInfoAfterUse ; <nl> closeError = closeErrorAfterUse ; <nl> final Writer infoStreamWriter = new OutputStreamWriter ( infoStream , StandardCharsets . UTF _ 8 ) ; <nl> @ @ - 111 , 6 + 107 , 7 @ @ public class DefaultLogger <nl> else { <nl> errorWriter = new PrintWriter ( errorStreamWriter ) ; <nl> } <nl> + formatter = messageFormatter ; <nl> } <nl> <nl> / * * <nl> @ @ - 122 , 25 + 119 , 8 @ @ public class DefaultLogger <nl> public void addError ( AuditEvent event ) { <nl> final SeverityLevel severityLevel = event . getSeverityLevel ( ) ; <nl> if ( severityLevel ! = SeverityLevel . IGNORE ) { <nl> - <nl> - final String fileName = event . getFileName ( ) ; <nl> - final String message = event . getMessage ( ) ; <nl> - <nl> - / / avoid StringBuffer . expandCapacity <nl> - final int bufLen = fileName . length ( ) + message . length ( ) <nl> - + BUFFER _ CUSHION ; <nl> - final StringBuilder sb = new StringBuilder ( bufLen ) ; <nl> - <nl> - sb . append ( fileName ) . append ( ' : ' ) . append ( event . getLine ( ) ) ; <nl> - if ( event . getColumn ( ) > 0 ) { <nl> - sb . append ( ' : ' ) . append ( event . getColumn ( ) ) ; <nl> - } <nl> - final String errorMessageSeparator = " : " ; <nl> - if ( printSeverity ) { <nl> - sb . append ( errorMessageSeparator ) . append ( severityLevel . getName ( ) ) ; <nl> - } <nl> - sb . append ( errorMessageSeparator ) . append ( message ) ; <nl> - errorWriter . println ( sb ) ; <nl> + final String errorMessage = formatter . format ( event ) ; <nl> + errorWriter . println ( errorMessage ) ; <nl> } <nl> } <nl> <nl> @ @ - 159 , 8 + 139 , 9 @ @ public class DefaultLogger <nl> } <nl> <nl> @ Override <nl> - public void fileFinished ( AuditEvent event ) { <nl> - infoWriter . flush ( ) ; <nl> + public void auditFinished ( AuditEvent event ) { <nl> + infoWriter . println ( " Audit done . " ) ; <nl> + closeStreams ( ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 169 , 9 + 150 , 8 @ @ public class DefaultLogger <nl> } <nl> <nl> @ Override <nl> - public void auditFinished ( AuditEvent event ) { <nl> - infoWriter . println ( " Audit done . " ) ; <nl> - closeStreams ( ) ; <nl> + public void fileFinished ( AuditEvent event ) { <nl> + infoWriter . flush ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index 66af80e . . 12f6c22 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 342 , 7 + 342 , 7 @ @ public final class Main { <nl> <nl> } <nl> else if ( PLAIN _ FORMAT _ NAME . equals ( format ) ) { <nl> - listener = new DefaultLogger ( out , closeOutputStream , out , false , true ) ; <nl> + listener = new DefaultLogger ( out , closeOutputStream , out , false ) ; <nl> <nl> } <nl> else { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> index d9a7717 . . f095ab1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java <nl> @ @ - 473 , 7 + 473 , 7 @ @ public class CheckstyleAntTask extends Task { <nl> if ( formatters . isEmpty ( ) ) { <nl> final OutputStream debug = new LogOutputStream ( this , Project . MSG _ DEBUG ) ; <nl> final OutputStream err = new LogOutputStream ( this , Project . MSG _ ERR ) ; <nl> - listeners [ 0 ] = new DefaultLogger ( debug , true , err , true , true ) ; <nl> + listeners [ 0 ] = new DefaultLogger ( debug , true , err , true ) ; <nl> } <nl> else { <nl> for ( int i = 0 ; i < formatterCount ; i + + ) { <nl> @ @ - 603 , 7 + 603 , 7 @ @ public class CheckstyleAntTask extends Task { <nl> true , new LogOutputStream ( task , Project . MSG _ ERR ) , true ) ; <nl> } <nl> final FileOutputStream infoStream = new FileOutputStream ( toFile ) ; <nl> - return new DefaultLogger ( infoStream , true , infoStream , false , true ) ; <nl> + return new DefaultLogger ( infoStream , true , infoStream , false ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java <nl> index 2f581e1 . . 91488db 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java <nl> @ @ - 35 , 13 + 35 , 13 @ @ import java . util . Locale ; <nl> * @ author Mehmet Can C ö mert <nl> * / <nl> public enum SeverityLevel { <nl> - / * * Security level ignore . * / <nl> + / * * Severity level ignore . * / <nl> IGNORE , <nl> - / * * Security level info . * / <nl> + / * * Severity level info . * / <nl> INFO , <nl> - / * * Security level warning . * / <nl> + / * * Severity level warning . * / <nl> WARNING , <nl> - / * * Security level error . * / <nl> + / * * Severity level error . * / <nl> ERROR ; <nl> <nl> @ Override <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventUtFormatter . java b / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventUtFormatter . java <nl> new file mode 100644 <nl> index 0000000 . . a10a526 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventUtFormatter . java <nl> @ @ - 0 , 0 + 1 , 52 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> + <nl> + / * * <nl> + * Represents the formatter for log message which is used in UTs . <nl> + * Message format is : filePath : lineNo : columnNo : message . <nl> + * @ author Andrei Selkin <nl> + * / <nl> + public class AuditEventUtFormatter implements AuditEvemtFormatter { <nl> + <nl> + / * * Length of all separators . * / <nl> + private static final int LENGTH _ OF _ ALL _ SEPARATORS = 4 ; <nl> + <nl> + @ Override <nl> + public String format ( AuditEvent event ) { <nl> + final String fileName = event . getFileName ( ) ; <nl> + final String message = event . getMessage ( ) ; <nl> + <nl> + / / avoid StringBuffer . expandCapacity <nl> + final int bufLen = event . getFileName ( ) . length ( ) + event . getMessage ( ) . length ( ) <nl> + + LENGTH _ OF _ ALL _ SEPARATORS ; <nl> + final StringBuilder sb = new StringBuilder ( bufLen ) ; <nl> + <nl> + sb . append ( fileName ) . append ( ' : ' ) . append ( event . getLine ( ) ) ; <nl> + if ( event . getColumn ( ) > 0 ) { <nl> + sb . append ( ' : ' ) . append ( event . getColumn ( ) ) ; <nl> + } <nl> + sb . append ( " : " ) . append ( message ) ; <nl> + <nl> + return sb . toString ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> index 7dd3796 . . 3f403bc 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> @ @ - 28 , 7 + 28 , 6 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> import java . io . LineNumberReader ; <nl> - import java . io . OutputStream ; <nl> import java . nio . charset . StandardCharsets ; <nl> import java . text . MessageFormat ; <nl> import java . util . ArrayList ; <nl> @ @ - 44 , 7 + 43 , 6 @ @ import com . google . common . collect . Lists ; <nl> import com . google . common . collect . MapDifference ; <nl> import com . google . common . collect . MapDifference . ValueDifference ; <nl> import com . google . common . collect . Maps ; <nl> - import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> <nl> public class BaseCheckTestSupport { <nl> @ @ - 65 , 23 + 63 , 7 @ @ public class BaseCheckTestSupport { <nl> checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . configure ( dc ) ; <nl> - checker . addListener ( new BriefLogger ( stream ) ) ; <nl> - return checker ; <nl> - } <nl> - <nl> - protected Checker createChecker ( Configuration checkConfig , boolean printSeverity ) <nl> - throws Exception { <nl> - <nl> - final DefaultConfiguration dc = createCheckerConfig ( checkConfig ) ; <nl> - final Checker checker = new Checker ( ) ; <nl> - / / make sure the tests always run with english error messages <nl> - / / so the tests don ' t fail in supported locales like german <nl> - final Locale locale = Locale . ENGLISH ; <nl> - checker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - checker . configure ( dc ) ; <nl> - checker . addListener ( new BriefLogger ( stream , printSeverity ) ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> return checker ; <nl> } <nl> <nl> @ @ - 121 , 11 + 103 , 6 @ @ public class BaseCheckTestSupport { <nl> verify ( createChecker ( aConfig ) , fileName , fileName , expected ) ; <nl> } <nl> <nl> - protected void verify ( Configuration aConfig , boolean printSeverity , <nl> - String filename , String . . . expected ) throws Exception { <nl> - verify ( createChecker ( aConfig , printSeverity ) , filename , filename , expected ) ; <nl> - } <nl> - <nl> protected void verify ( Checker checker , String fileName , String . . . expected ) <nl> throws Exception { <nl> verify ( checker , fileName , fileName , expected ) ; <nl> @ @ - 276 , 22 + 253 , 4 @ @ public class BaseCheckTestSupport { <nl> Locale . ROOT ) ; <nl> return formatter . format ( arguments ) ; <nl> } <nl> - <nl> - / * * <nl> - * A brief logger that only display info about errors . <nl> - * / <nl> - protected static class BriefLogger <nl> - extends DefaultLogger { <nl> - public BriefLogger ( OutputStream out ) { <nl> - super ( out , true , out , false , false ) ; <nl> - } <nl> - <nl> - public BriefLogger ( OutputStream out , boolean printSeverity ) { <nl> - super ( out , true , out , false , printSeverity ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void auditStarted ( AuditEvent event ) { <nl> - } <nl> - } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BriefUtLogger . java b / src / test / java / com / puppycrawl / tools / checkstyle / BriefUtLogger . java <nl> new file mode 100644 <nl> index 0000000 . . f20a80a <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BriefUtLogger . java <nl> @ @ - 0 , 0 + 1 , 48 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import java . io . OutputStream ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> + <nl> + / * * <nl> + * A brief logger that only display info about errors . <nl> + * @ author Andrei Selkin <nl> + * / <nl> + public class BriefUtLogger extends DefaultLogger { <nl> + <nl> + / * * <nl> + * Creates BriefLogger object . <nl> + * @ param out output stream for info messages and errors . <nl> + * / <nl> + public BriefUtLogger ( OutputStream out ) { <nl> + super ( out , true , out , false , new AuditEventUtFormatter ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void auditStarted ( AuditEvent event ) { <nl> + } <nl> + <nl> + @ Override <nl> + public void auditFinished ( AuditEvent event ) { <nl> + super . auditFinished ( event ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index a6ff663 . . b770a5a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 259 , 12 + 259 , 12 @ @ public class MainTest { <nl> public void checkAssertion ( ) throws IOException { <nl> final String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> - + " % 1 $ s : 3 : 14 : " <nl> - + " warning : Name ' InputMain ' must match pattern " <nl> - + " ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> - + " % 1 $ s : 5 : 7 : " <nl> - + " warning : Name ' InputMainInner ' must match pattern " <nl> - + " ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> + + " [ WARN ] % 1 $ s : 3 : 14 : " <nl> + + " Name ' InputMain ' must match pattern " <nl> + + " ' ^ [ a - z0 - 9 ] * $ ' . [ TypeName ] % n " <nl> + + " [ WARN ] % 1 $ s : 5 : 7 : " <nl> + + " Name ' InputMainInner ' must match pattern " <nl> + + " ' ^ [ a - z0 - 9 ] * $ ' . [ TypeName ] % n " <nl> + " Audit done . % n " , expectedPath ) , <nl> systemOut . getLog ( ) ) ; <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> @ @ - 283 , 10 + 283 , 10 @ @ public class MainTest { <nl> public void checkAssertion ( ) throws IOException { <nl> final String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> - + " % 1 $ s : 3 : 14 : error : " <nl> - + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> - + " % 1 $ s : 5 : 7 : error : " <nl> - + " Name ' InputMainInner ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> + + " [ ERROR ] % 1 $ s : 3 : 14 : " <nl> + + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . [ TypeName ] % n " <nl> + + " [ ERROR ] % 1 $ s : 5 : 7 : " <nl> + + " Name ' InputMainInner ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . [ TypeName ] % n " <nl> + " Audit done . % n " <nl> + " Checkstyle ends with 2 errors . % n " , expectedPath ) , systemOut . getLog ( ) ) ; <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> @ @ - 513 , 8 + 513 , 8 @ @ public class MainTest { <nl> final String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; <nl> final StringBuilder sb = new StringBuilder ( ) ; <nl> sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> - final String format = " % s . java : % s : warning : File length is % s lines " <nl> - + " ( max allowed is 170 ) . " ; <nl> + final String format = " [ WARN ] % s . java : % s : File length is % s lines " <nl> + + " ( max allowed is 170 ) . [ FileLength ] " ; <nl> for ( String [ ] outputValue : outputValues ) { <nl> final String line = String . format ( Locale . ROOT , format , <nl> expectedPath + outputValue [ 0 ] , outputValue [ 1 ] , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index 2e1f958 . . cd4e11a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 202 , 7 + 202 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . configure ( checkerConfig ) ; <nl> - checker . addListener ( new BriefLogger ( stream ) ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> <nl> final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> @ @ - 230 , 7 + 230 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . configure ( checkerConfig ) ; <nl> - checker . addListener ( new BriefLogger ( stream ) ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> <nl> final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> @ @ - 246 , 7 + 246 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> otherChecker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> otherChecker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> otherChecker . configure ( checkerConfig ) ; <nl> - otherChecker . addListener ( new BriefLogger ( stream ) ) ; <nl> + otherChecker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> / / here is diff with previous checker <nl> checkerConfig . addAttribute ( " fileExtensions " , " java , javax " ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> index cff3839 . . 206e156 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . BriefUtLogger ; <nl> import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> @ @ - 85 , 7 + 86 , 7 @ @ public class FileSetCheckLifecycleTest <nl> checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . configure ( dc ) ; <nl> - checker . addListener ( new BriefLogger ( stream ) ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> <nl> checker . addFileSetCheck ( new TestFileSetCheck ( ) ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java <nl> index a86e516 . . eb8ec7a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java <nl> @ @ - 87 , 28 + 87 , 14 @ @ public class WriteTagCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void testTagPrintSeverityTrue ( ) throws Exception { <nl> + public void testTagIncomplete ( ) throws Exception { <nl> checkConfig . addAttribute ( " tag " , " @ incomplete " ) ; <nl> checkConfig . addAttribute ( " tagFormat " , " \ \ S " ) ; <nl> - checkConfig . addAttribute ( " tagSeverity " , " warning " ) ; <nl> final String [ ] expected = { <nl> - " 11 : " + getCheckMessage ( WRITE _ TAG , " warning : @ incomplete " , <nl> + " 11 : " + getCheckMessage ( WRITE _ TAG , " @ incomplete " , <nl> " This class needs more code . . . " ) , <nl> } ; <nl> - final boolean printSeverity = true ; <nl> - verify ( checkConfig , printSeverity , getPath ( " InputWriteTag . java " ) , expected ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testTagPrintSeverityFalse ( ) throws Exception { <nl> - checkConfig . addAttribute ( " tag " , " @ incomplete " ) ; <nl> - checkConfig . addAttribute ( " tagFormat " , " \ \ S " ) ; <nl> - checkConfig . addAttribute ( " tagSeverity " , " warning " ) ; <nl> - final String [ ] expected = { <nl> - " 11 : " + getCheckMessage ( WRITE _ TAG , " @ incomplete " , " This class needs more code . . . " ) , <nl> - } ; <nl> - final boolean printSeverity = false ; <nl> - verify ( checkConfig , printSeverity , getPath ( " InputWriteTag . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputWriteTag . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java <nl> index 04357ef . . d7c65ed 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . google . common . collect . Lists ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . BriefUtLogger ; <nl> import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> @ @ - 141 , 7 + 142 , 7 @ @ public class SuppressWarningsFilterTest <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) <nl> . getContextClassLoader ( ) ) ; <nl> checker . configure ( checkerConfig ) ; <nl> - checker . addListener ( new BriefLogger ( stream ) ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> return checker ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java <nl> index 70f0ff2 . . b6efa5e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java <nl> @ @ - 34 , 6 + 34 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . google . common . collect . Lists ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . BriefUtLogger ; <nl> import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> @ @ - 229 , 7 + 230 , 7 @ @ public class SuppressWithNearbyCommentFilterTest <nl> checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . configure ( checkerConfig ) ; <nl> - checker . addListener ( new BriefLogger ( stream ) ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> return checker ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> index 68739a8 . . 0a2fb0a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> @ @ - 34 , 6 + 34 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . google . common . collect . Lists ; <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . BriefUtLogger ; <nl> import com . puppycrawl . tools . checkstyle . Checker ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> @ @ - 229 , 7 + 230 , 7 @ @ public class SuppressionCommentFilterTest <nl> checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> checker . configure ( checkerConfig ) ; <nl> - checker . addListener ( new BriefLogger ( stream ) ) ; <nl> + checker . addListener ( new BriefUtLogger ( stream ) ) ; <nl> return checker ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index d677359 . . 5972a28 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 463 , 7 + 463 , 7 @ @ <nl> < version > 1 . 6 < / version > <nl> < / requireJavaVersion > <nl> < ! - - we can not use this as it require <nl> - compilation on 1 . 6 only , due to dependecy to ' tools ' <nl> + compilation on 1 . 6 only , due to dependency to ' tools ' <nl> < enforceBytecodeVersion > <nl> < maxJdkVersion > 1 . 6 < / maxJdkVersion > <nl> < / enforceBytecodeVersion > <nl> @ @ - 473 , 7 + 473 , 7 @ @ <nl> < / execution > <nl> < / executions > <nl> < ! - - we can not use this as it require <nl> - compilation on 1 . 6 only , due to dependecy to ' tool ' <nl> + compilation on 1 . 6 only , due to dependency to ' tool ' <nl> < dependencies > <nl> < dependency > <nl> < groupId > org . codehaus . mojo < / groupId > <nl> @ @ - 555 , 7 + 555 , 7 @ @ <nl> < / configuration > <nl> < / execution > <nl> < execution > <nl> - < id > add - ittest - source < / id > <nl> + < id > add - it - test - source < / id > <nl> < phase > process - resources < / phase > <nl> < goals > <nl> < goal > add - test - source < / goal > <nl> @ @ - 567 , 7 + 567 , 7 @ @ <nl> < / configuration > <nl> < / execution > <nl> < execution > <nl> - < id > add - ittest - resource < / id > <nl> + < id > add - it - test - resource < / id > <nl> < phase > process - resources < / phase > <nl> < goals > <nl> < goal > add - test - source < / goal > <nl> @ @ - 964 , 10 + 964 , 10 @ @ <nl> < excludedLink > http : / / search . maven . org / * < / excludedLink > <nl> < excludedLink > http : / / junit . org < / excludedLink > <nl> < excludedLink > http : / / sonar - plugins . codehaus . org / maven - report < / excludedLink > <nl> - < ! - - Excluded due to checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 <nl> + < ! - - Excluded due to Checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 <nl> and http : / / jira . codehaus . org / browse / DOXIA - 525 and http : / / jira . codehaus . org / browse / MLINKCHECK - 21 will be fixed - - > <nl> < excludedLink > * * / com / puppycrawl / * * < / excludedLink > <nl> - < ! - - Excluded due to checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 will be fixed - - > <nl> + < ! - - Excluded due to Checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 will be fixed - - > <nl> < excludedLink > http : / / docs . oracle . com / javase / 7 / docs / api / org / xml / sax / helpers . DefaultHandler . html ? * < / excludedLink > <nl> < ! - - Excluded due to Maven Enforcer Plugin ' s issue # 234 : https : / / issues . apache . org / jira / browse / MENFORCER - 234 - - > <nl> < excludedLink > http : / / maven . apache . org / enforcer / maven - enforcer - plugin < / excludedLink > <nl> @ @ - 1013 , 7 + 1013 , 7 @ @ <nl> < profiles > <nl> <nl> < ! - - Bring in tools . jar for platforms which provide it <nl> - that is required for javadoc docklets that are in use - - > <nl> + that is required for javadoc doclets that are in use - - > <nl> < profile > <nl> < id > default - tools . jar - oracle < / id > <nl> < activation > <nl> @ @ - 1402 , 11 + 1402 , 11 @ @ <nl> <nl> < / profiles > <nl> <nl> - < ! - - that repositories are required for tesing plugin ' s snapshot version - - > <nl> + < ! - - that repositories are required for testing plugin ' s snapshot version - - > <nl> < pluginRepositories > <nl> < pluginRepository > <nl> < id > nexus - snapshot < / id > <nl> - < name > Oficial Maven Apache Repo < / name > <nl> + < name > Official Maven Apache Repo < / name > <nl> < url > https : / / nexus . codehaus . org / content / repositories / snapshots / < / url > <nl> < / pluginRepository > <nl> < / pluginRepositories >

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 index 6a2f42a . . 306a762 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 @ @ - 41 , 6 + 41 , 7 @ @ import java . util . Properties ; 
 import java . util . regex . Pattern ; 
 
 import com . google . common . collect . Lists ; 
 + import com . puppycrawl . tools . checkstyle . BriefUtLogger ; 
 import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . ConfigurationLoader ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 @ @ - 85 , 7 + 86 , 7 @ @ public class BaseCheckTestSupport { 
 checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . configure ( dc ) ; 
 - checker . addListener ( new BriefLogger ( stream ) ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 return checker ; 
 } 
 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / BriefLogger . java b / src / it / java / com / google / checkstyle / test / base / BriefLogger . java 
 deleted file mode 100644 
 index 495a7b8 . . 0000000 
 - - - a / src / it / java / com / google / checkstyle / test / base / BriefLogger . java 
 + + + / dev / null 
 @ @ - 1 , 35 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . google . checkstyle . test . base ; 
 - 
 - import java . io . OutputStream ; 
 - 
 - import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 - import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 - 
 - / * * A brief logger that only display info about errors . * / 
 - class BriefLogger extends DefaultLogger { 
 - BriefLogger ( OutputStream out ) { 
 - super ( out , true , out , false , false ) ; 
 - } 
 - 
 - @ Override 
 - public void auditStarted ( AuditEvent event ) { } 
 - } 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java b / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java 
 index 85eec3f . . 03d6ad1 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / ConfigValidationTest . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import java . util . Locale ; 
 
 import org . junit . Test ; 
 
 + import com . puppycrawl . tools . checkstyle . BriefUtLogger ; 
 import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 
 @ @ - 42 , 7 + 43 , 7 @ @ public class ConfigValidationTest extends BaseCheckTestSupport { 
 checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . configure ( checkerConfig ) ; 
 - checker . addListener ( new BriefLogger ( stream ) ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 
 final List < File > files = new ArrayList < > ( ) ; 
 listFiles ( files , new File ( " src / it / " ) , " java " ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / AuditEvemtFormatter . java b / src / main / java / com / puppycrawl / tools / checkstyle / AuditEvemtFormatter . java 
 new file mode 100644 
 index 0000000 . . 6538e3e 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / AuditEvemtFormatter . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 + 
 + / * * 
 + * Represents the formatter interface for log message . 
 + * @ author Andrei Selkin 
 + * / 
 + public interface AuditEvemtFormatter { 
 + / * * 
 + * Formats an error message . 
 + * @ param event audit event . 
 + * @ return string representation of error message . 
 + * / 
 + String format ( AuditEvent event ) ; 
 + } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatter . java b / src / main / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatter . java 
 new file mode 100644 
 index 0000000 . . a8a296f 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatter . java 
 @ @ - 0 , 0 + 1 , 93 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import java . util . Locale ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 + import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; 
 + 
 + / * * 
 + * Represents the default formatter for log message . 
 + * Default log message format is : [ SEVERITY LEVEL ] filePath : lineNo : columnNo : message . [ CheckName ] 
 + * @ author Andrei Selkin 
 + * / 
 + public class AuditEventDefaultFormatter implements AuditEvemtFormatter { 
 + 
 + / * * Length of all separators . * / 
 + private static final int LENGTH _ OF _ ALL _ SEPARATORS = 10 ; 
 + 
 + @ Override 
 + public String format ( AuditEvent event ) { 
 + final String fileName = event . getFileName ( ) ; 
 + final String message = event . getMessage ( ) ; 
 + 
 + final SeverityLevel severityLevel = event . getSeverityLevel ( ) ; 
 + final String severityLevelName ; 
 + if ( severityLevel = = SeverityLevel . WARNING ) { 
 + / / We change the name of severity level intentionally 
 + / / to shorten the length of the log message . 
 + severityLevelName = " WARN " ; 
 + } 
 + else { 
 + severityLevelName = severityLevel . getName ( ) . toUpperCase ( Locale . US ) ; 
 + } 
 + 
 + / / Avoid StringBuffer . expandCapacity 
 + final int bufLen = calculateBufferLength ( event , severityLevelName . length ( ) ) ; 
 + final StringBuilder sb = new StringBuilder ( bufLen ) ; 
 + 
 + sb . append ( ' [ ' ) . append ( severityLevelName ) . append ( " ] " ) 
 + . append ( fileName ) . append ( ' : ' ) . append ( event . getLine ( ) ) ; 
 + if ( event . getColumn ( ) > 0 ) { 
 + sb . append ( ' : ' ) . append ( event . getColumn ( ) ) ; 
 + } 
 + sb . append ( " : " ) . append ( message ) ; 
 + final String checkShortName = getCheckShortName ( event ) ; 
 + sb . append ( " [ " ) . append ( checkShortName ) . append ( ' ] ' ) ; 
 + 
 + return sb . toString ( ) ; 
 + } 
 + 
 + / * * 
 + * Returns the length of the buffer for StringBuilder . 
 + * bufferLength = fileNameLength + messageLength + lengthOfAllSeparators + 
 + * + severityNameLength + checkNameLength . 
 + * @ param event audit event . 
 + * @ param severityLevelNameLength length of severity level name . 
 + * @ return the length of the buffer for StringBuilder . 
 + * / 
 + private static int calculateBufferLength ( AuditEvent event , int severityLevelNameLength ) { 
 + return LENGTH _ OF _ ALL _ SEPARATORS + event . getFileName ( ) . length ( ) 
 + + event . getMessage ( ) . length ( ) + severityLevelNameLength 
 + + getCheckShortName ( event ) . length ( ) ; 
 + } 
 + 
 + / * * 
 + * Returns check name without ' Check ' suffix . 
 + * @ param event audit ivent . 
 + * @ return check name without ' Check ' suffix . 
 + * / 
 + private static String getCheckShortName ( AuditEvent event ) { 
 + final String checkFullName = event . getSourceName ( ) ; 
 + return checkFullName . substring ( checkFullName . lastIndexOf ( ' . ' ) + 1 , 
 + checkFullName . lastIndexOf ( " Check " ) ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 index 3c8edc2 . . 8c3fbc4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 @ @ - 40 , 11 + 40 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . SeverityLevel ; 
 * @ author < a href = " mailto : stephane . bailliez @ wanadoo . fr " > Stephane Bailliez < / a > 
 * @ see XMLLogger 
 * / 
 - public class DefaultLogger 
 - extends AutomaticBean 
 - implements AuditListener { 
 - / * * Cushion for avoiding StringBuffer . expandCapacity * / 
 - private static final int BUFFER _ CUSHION = 12 ; 
 + public class DefaultLogger extends AutomaticBean implements AuditListener { 
 
 / * * Where to write info messages . * * / 
 private final PrintWriter infoWriter ; 
 @ @ - 56 , 8 + 52 , 8 @ @ public class DefaultLogger 
 / * * Close error stream after use . * / 
 private final boolean closeError ; 
 
 - / * * Print severity level . * / 
 - private boolean printSeverity = true ; 
 + / * * Formatter for the log message . * / 
 + private final AuditEvemtFormatter formatter ; 
 
 / * * 
 * Creates a new { @ code DefaultLogger } instance . 
 @ @ - 75 , 15 + 71 , 13 @ @ public class DefaultLogger 
 * @ param closeInfoAfterUse auditFinished should close infoStream . 
 * @ param errorStream the { @ code OutputStream } for error messages . 
 * @ param closeErrorAfterUse auditFinished should close errorStream 
 - * @ param printSeverity if severity level should be printed . 
 * / 
 public DefaultLogger ( OutputStream infoStream , 
 boolean closeInfoAfterUse , 
 OutputStream errorStream , 
 - boolean closeErrorAfterUse , 
 - boolean printSeverity ) { 
 - this ( infoStream , closeInfoAfterUse , errorStream , closeErrorAfterUse ) ; 
 - this . printSeverity = printSeverity ; 
 + boolean closeErrorAfterUse ) { 
 + this ( infoStream , closeInfoAfterUse , errorStream , closeErrorAfterUse , 
 + new AuditEventDefaultFormatter ( ) ) ; 
 } 
 
 / * * 
 @ @ - 93 , 11 + 87 , 13 @ @ public class DefaultLogger 
 * @ param closeInfoAfterUse auditFinished should close infoStream 
 * @ param errorStream the { @ code OutputStream } for error messages 
 * @ param closeErrorAfterUse auditFinished should close errorStream 
 + * @ param messageFormatter formatter for the log message . 
 * / 
 public DefaultLogger ( OutputStream infoStream , 
 boolean closeInfoAfterUse , 
 OutputStream errorStream , 
 - boolean closeErrorAfterUse ) { 
 + boolean closeErrorAfterUse , 
 + AuditEvemtFormatter messageFormatter ) { 
 closeInfo = closeInfoAfterUse ; 
 closeError = closeErrorAfterUse ; 
 final Writer infoStreamWriter = new OutputStreamWriter ( infoStream , StandardCharsets . UTF _ 8 ) ; 
 @ @ - 111 , 6 + 107 , 7 @ @ public class DefaultLogger 
 else { 
 errorWriter = new PrintWriter ( errorStreamWriter ) ; 
 } 
 + formatter = messageFormatter ; 
 } 
 
 / * * 
 @ @ - 122 , 25 + 119 , 8 @ @ public class DefaultLogger 
 public void addError ( AuditEvent event ) { 
 final SeverityLevel severityLevel = event . getSeverityLevel ( ) ; 
 if ( severityLevel ! = SeverityLevel . IGNORE ) { 
 - 
 - final String fileName = event . getFileName ( ) ; 
 - final String message = event . getMessage ( ) ; 
 - 
 - / / avoid StringBuffer . expandCapacity 
 - final int bufLen = fileName . length ( ) + message . length ( ) 
 - + BUFFER _ CUSHION ; 
 - final StringBuilder sb = new StringBuilder ( bufLen ) ; 
 - 
 - sb . append ( fileName ) . append ( ' : ' ) . append ( event . getLine ( ) ) ; 
 - if ( event . getColumn ( ) > 0 ) { 
 - sb . append ( ' : ' ) . append ( event . getColumn ( ) ) ; 
 - } 
 - final String errorMessageSeparator = " : " ; 
 - if ( printSeverity ) { 
 - sb . append ( errorMessageSeparator ) . append ( severityLevel . getName ( ) ) ; 
 - } 
 - sb . append ( errorMessageSeparator ) . append ( message ) ; 
 - errorWriter . println ( sb ) ; 
 + final String errorMessage = formatter . format ( event ) ; 
 + errorWriter . println ( errorMessage ) ; 
 } 
 } 
 
 @ @ - 159 , 8 + 139 , 9 @ @ public class DefaultLogger 
 } 
 
 @ Override 
 - public void fileFinished ( AuditEvent event ) { 
 - infoWriter . flush ( ) ; 
 + public void auditFinished ( AuditEvent event ) { 
 + infoWriter . println ( " Audit done . " ) ; 
 + closeStreams ( ) ; 
 } 
 
 @ Override 
 @ @ - 169 , 9 + 150 , 8 @ @ public class DefaultLogger 
 } 
 
 @ Override 
 - public void auditFinished ( AuditEvent event ) { 
 - infoWriter . println ( " Audit done . " ) ; 
 - closeStreams ( ) ; 
 + public void fileFinished ( AuditEvent event ) { 
 + infoWriter . flush ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index 66af80e . . 12f6c22 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 342 , 7 + 342 , 7 @ @ public final class Main { 
 
 } 
 else if ( PLAIN _ FORMAT _ NAME . equals ( format ) ) { 
 - listener = new DefaultLogger ( out , closeOutputStream , out , false , true ) ; 
 + listener = new DefaultLogger ( out , closeOutputStream , out , false ) ; 
 
 } 
 else { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 index d9a7717 . . f095ab1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTask . java 
 @ @ - 473 , 7 + 473 , 7 @ @ public class CheckstyleAntTask extends Task { 
 if ( formatters . isEmpty ( ) ) { 
 final OutputStream debug = new LogOutputStream ( this , Project . MSG _ DEBUG ) ; 
 final OutputStream err = new LogOutputStream ( this , Project . MSG _ ERR ) ; 
 - listeners [ 0 ] = new DefaultLogger ( debug , true , err , true , true ) ; 
 + listeners [ 0 ] = new DefaultLogger ( debug , true , err , true ) ; 
 } 
 else { 
 for ( int i = 0 ; i < formatterCount ; i + + ) { 
 @ @ - 603 , 7 + 603 , 7 @ @ public class CheckstyleAntTask extends Task { 
 true , new LogOutputStream ( task , Project . MSG _ ERR ) , true ) ; 
 } 
 final FileOutputStream infoStream = new FileOutputStream ( toFile ) ; 
 - return new DefaultLogger ( infoStream , true , infoStream , false , true ) ; 
 + return new DefaultLogger ( infoStream , true , infoStream , false ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java 
 index 2f581e1 . . 91488db 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / SeverityLevel . java 
 @ @ - 35 , 13 + 35 , 13 @ @ import java . util . Locale ; 
 * @ author Mehmet Can C ö mert 
 * / 
 public enum SeverityLevel { 
 - / * * Security level ignore . * / 
 + / * * Severity level ignore . * / 
 IGNORE , 
 - / * * Security level info . * / 
 + / * * Severity level info . * / 
 INFO , 
 - / * * Security level warning . * / 
 + / * * Severity level warning . * / 
 WARNING , 
 - / * * Security level error . * / 
 + / * * Severity level error . * / 
 ERROR ; 
 
 @ Override 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventUtFormatter . java b / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventUtFormatter . java 
 new file mode 100644 
 index 0000000 . . a10a526 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventUtFormatter . java 
 @ @ - 0 , 0 + 1 , 52 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 + 
 + / * * 
 + * Represents the formatter for log message which is used in UTs . 
 + * Message format is : filePath : lineNo : columnNo : message . 
 + * @ author Andrei Selkin 
 + * / 
 + public class AuditEventUtFormatter implements AuditEvemtFormatter { 
 + 
 + / * * Length of all separators . * / 
 + private static final int LENGTH _ OF _ ALL _ SEPARATORS = 4 ; 
 + 
 + @ Override 
 + public String format ( AuditEvent event ) { 
 + final String fileName = event . getFileName ( ) ; 
 + final String message = event . getMessage ( ) ; 
 + 
 + / / avoid StringBuffer . expandCapacity 
 + final int bufLen = event . getFileName ( ) . length ( ) + event . getMessage ( ) . length ( ) 
 + + LENGTH _ OF _ ALL _ SEPARATORS ; 
 + final StringBuilder sb = new StringBuilder ( bufLen ) ; 
 + 
 + sb . append ( fileName ) . append ( ' : ' ) . append ( event . getLine ( ) ) ; 
 + if ( event . getColumn ( ) > 0 ) { 
 + sb . append ( ' : ' ) . append ( event . getColumn ( ) ) ; 
 + } 
 + sb . append ( " : " ) . append ( message ) ; 
 + 
 + return sb . toString ( ) ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 index 7dd3796 . . 3f403bc 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 @ @ - 28 , 7 + 28 , 6 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 import java . io . LineNumberReader ; 
 - import java . io . OutputStream ; 
 import java . nio . charset . StandardCharsets ; 
 import java . text . MessageFormat ; 
 import java . util . ArrayList ; 
 @ @ - 44 , 7 + 43 , 6 @ @ import com . google . common . collect . Lists ; 
 import com . google . common . collect . MapDifference ; 
 import com . google . common . collect . MapDifference . ValueDifference ; 
 import com . google . common . collect . Maps ; 
 - import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 
 public class BaseCheckTestSupport { 
 @ @ - 65 , 23 + 63 , 7 @ @ public class BaseCheckTestSupport { 
 checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . configure ( dc ) ; 
 - checker . addListener ( new BriefLogger ( stream ) ) ; 
 - return checker ; 
 - } 
 - 
 - protected Checker createChecker ( Configuration checkConfig , boolean printSeverity ) 
 - throws Exception { 
 - 
 - final DefaultConfiguration dc = createCheckerConfig ( checkConfig ) ; 
 - final Checker checker = new Checker ( ) ; 
 - / / make sure the tests always run with english error messages 
 - / / so the tests don ' t fail in supported locales like german 
 - final Locale locale = Locale . ENGLISH ; 
 - checker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - checker . configure ( dc ) ; 
 - checker . addListener ( new BriefLogger ( stream , printSeverity ) ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 return checker ; 
 } 
 
 @ @ - 121 , 11 + 103 , 6 @ @ public class BaseCheckTestSupport { 
 verify ( createChecker ( aConfig ) , fileName , fileName , expected ) ; 
 } 
 
 - protected void verify ( Configuration aConfig , boolean printSeverity , 
 - String filename , String . . . expected ) throws Exception { 
 - verify ( createChecker ( aConfig , printSeverity ) , filename , filename , expected ) ; 
 - } 
 - 
 protected void verify ( Checker checker , String fileName , String . . . expected ) 
 throws Exception { 
 verify ( checker , fileName , fileName , expected ) ; 
 @ @ - 276 , 22 + 253 , 4 @ @ public class BaseCheckTestSupport { 
 Locale . ROOT ) ; 
 return formatter . format ( arguments ) ; 
 } 
 - 
 - / * * 
 - * A brief logger that only display info about errors . 
 - * / 
 - protected static class BriefLogger 
 - extends DefaultLogger { 
 - public BriefLogger ( OutputStream out ) { 
 - super ( out , true , out , false , false ) ; 
 - } 
 - 
 - public BriefLogger ( OutputStream out , boolean printSeverity ) { 
 - super ( out , true , out , false , printSeverity ) ; 
 - } 
 - 
 - @ Override 
 - public void auditStarted ( AuditEvent event ) { 
 - } 
 - } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BriefUtLogger . java b / src / test / java / com / puppycrawl / tools / checkstyle / BriefUtLogger . java 
 new file mode 100644 
 index 0000000 . . f20a80a 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BriefUtLogger . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import java . io . OutputStream ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 + 
 + / * * 
 + * A brief logger that only display info about errors . 
 + * @ author Andrei Selkin 
 + * / 
 + public class BriefUtLogger extends DefaultLogger { 
 + 
 + / * * 
 + * Creates BriefLogger object . 
 + * @ param out output stream for info messages and errors . 
 + * / 
 + public BriefUtLogger ( OutputStream out ) { 
 + super ( out , true , out , false , new AuditEventUtFormatter ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public void auditStarted ( AuditEvent event ) { 
 + } 
 + 
 + @ Override 
 + public void auditFinished ( AuditEvent event ) { 
 + super . auditFinished ( event ) ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index a6ff663 . . b770a5a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 259 , 12 + 259 , 12 @ @ public class MainTest { 
 public void checkAssertion ( ) throws IOException { 
 final String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 - + " % 1 $ s : 3 : 14 : " 
 - + " warning : Name ' InputMain ' must match pattern " 
 - + " ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 - + " % 1 $ s : 5 : 7 : " 
 - + " warning : Name ' InputMainInner ' must match pattern " 
 - + " ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 + + " [ WARN ] % 1 $ s : 3 : 14 : " 
 + + " Name ' InputMain ' must match pattern " 
 + + " ' ^ [ a - z0 - 9 ] * $ ' . [ TypeName ] % n " 
 + + " [ WARN ] % 1 $ s : 5 : 7 : " 
 + + " Name ' InputMainInner ' must match pattern " 
 + + " ' ^ [ a - z0 - 9 ] * $ ' . [ TypeName ] % n " 
 + " Audit done . % n " , expectedPath ) , 
 systemOut . getLog ( ) ) ; 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 @ @ - 283 , 10 + 283 , 10 @ @ public class MainTest { 
 public void checkAssertion ( ) throws IOException { 
 final String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 - + " % 1 $ s : 3 : 14 : error : " 
 - + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 - + " % 1 $ s : 5 : 7 : error : " 
 - + " Name ' InputMainInner ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 + + " [ ERROR ] % 1 $ s : 3 : 14 : " 
 + + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . [ TypeName ] % n " 
 + + " [ ERROR ] % 1 $ s : 5 : 7 : " 
 + + " Name ' InputMainInner ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . [ TypeName ] % n " 
 + " Audit done . % n " 
 + " Checkstyle ends with 2 errors . % n " , expectedPath ) , systemOut . getLog ( ) ) ; 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 @ @ - 513 , 8 + 513 , 8 @ @ public class MainTest { 
 final String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; 
 final StringBuilder sb = new StringBuilder ( ) ; 
 sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; 
 - final String format = " % s . java : % s : warning : File length is % s lines " 
 - + " ( max allowed is 170 ) . " ; 
 + final String format = " [ WARN ] % s . java : % s : File length is % s lines " 
 + + " ( max allowed is 170 ) . [ FileLength ] " ; 
 for ( String [ ] outputValue : outputValues ) { 
 final String line = String . format ( Locale . ROOT , format , 
 expectedPath + outputValue [ 0 ] , outputValue [ 1 ] , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index 2e1f958 . . cd4e11a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 202 , 7 + 202 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . configure ( checkerConfig ) ; 
 - checker . addListener ( new BriefLogger ( stream ) ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 
 final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 @ @ - 230 , 7 + 230 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . configure ( checkerConfig ) ; 
 - checker . addListener ( new BriefLogger ( stream ) ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 
 final String pathToEmptyFile = temporaryFolder . newFile ( " file . java " ) . getPath ( ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 @ @ - 246 , 7 + 246 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 otherChecker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 otherChecker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 otherChecker . configure ( checkerConfig ) ; 
 - otherChecker . addListener ( new BriefLogger ( stream ) ) ; 
 + otherChecker . addListener ( new BriefUtLogger ( stream ) ) ; 
 / / here is diff with previous checker 
 checkerConfig . addAttribute ( " fileExtensions " , " java , javax " ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 index cff3839 . . 206e156 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . BriefUtLogger ; 
 import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 @ @ - 85 , 7 + 86 , 7 @ @ public class FileSetCheckLifecycleTest 
 checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . configure ( dc ) ; 
 - checker . addListener ( new BriefLogger ( stream ) ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 
 checker . addFileSetCheck ( new TestFileSetCheck ( ) ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java 
 index a86e516 . . eb8ec7a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java 
 @ @ - 87 , 28 + 87 , 14 @ @ public class WriteTagCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void testTagPrintSeverityTrue ( ) throws Exception { 
 + public void testTagIncomplete ( ) throws Exception { 
 checkConfig . addAttribute ( " tag " , " @ incomplete " ) ; 
 checkConfig . addAttribute ( " tagFormat " , " \ \ S " ) ; 
 - checkConfig . addAttribute ( " tagSeverity " , " warning " ) ; 
 final String [ ] expected = { 
 - " 11 : " + getCheckMessage ( WRITE _ TAG , " warning : @ incomplete " , 
 + " 11 : " + getCheckMessage ( WRITE _ TAG , " @ incomplete " , 
 " This class needs more code . . . " ) , 
 } ; 
 - final boolean printSeverity = true ; 
 - verify ( checkConfig , printSeverity , getPath ( " InputWriteTag . java " ) , expected ) ; 
 - } 
 - 
 - @ Test 
 - public void testTagPrintSeverityFalse ( ) throws Exception { 
 - checkConfig . addAttribute ( " tag " , " @ incomplete " ) ; 
 - checkConfig . addAttribute ( " tagFormat " , " \ \ S " ) ; 
 - checkConfig . addAttribute ( " tagSeverity " , " warning " ) ; 
 - final String [ ] expected = { 
 - " 11 : " + getCheckMessage ( WRITE _ TAG , " @ incomplete " , " This class needs more code . . . " ) , 
 - } ; 
 - final boolean printSeverity = false ; 
 - verify ( checkConfig , printSeverity , getPath ( " InputWriteTag . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputWriteTag . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java 
 index 04357ef . . d7c65ed 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWarningsFilterTest . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . junit . Test ; 
 
 import com . google . common . collect . Lists ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . BriefUtLogger ; 
 import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 @ @ - 141 , 7 + 142 , 7 @ @ public class SuppressWarningsFilterTest 
 checker . setModuleClassLoader ( Thread . currentThread ( ) 
 . getContextClassLoader ( ) ) ; 
 checker . configure ( checkerConfig ) ; 
 - checker . addListener ( new BriefLogger ( stream ) ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 return checker ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java 
 index 70f0ff2 . . b6efa5e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressWithNearbyCommentFilterTest . java 
 @ @ - 34 , 6 + 34 , 7 @ @ import org . junit . Test ; 
 
 import com . google . common . collect . Lists ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . BriefUtLogger ; 
 import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 @ @ - 229 , 7 + 230 , 7 @ @ public class SuppressWithNearbyCommentFilterTest 
 checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . configure ( checkerConfig ) ; 
 - checker . addListener ( new BriefLogger ( stream ) ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 return checker ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 index 68739a8 . . 0a2fb0a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 @ @ - 34 , 6 + 34 , 7 @ @ import org . junit . Test ; 
 
 import com . google . common . collect . Lists ; 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . BriefUtLogger ; 
 import com . puppycrawl . tools . checkstyle . Checker ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 @ @ - 229 , 7 + 230 , 7 @ @ public class SuppressionCommentFilterTest 
 checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 checker . configure ( checkerConfig ) ; 
 - checker . addListener ( new BriefLogger ( stream ) ) ; 
 + checker . addListener ( new BriefUtLogger ( stream ) ) ; 
 return checker ; 
 } 


NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index d677359 . . 5972a28 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 463 , 7 + 463 , 7 @ @ 
 < version > 1 . 6 < / version > 
 < / requireJavaVersion > 
 < ! - - we can not use this as it require 
 - compilation on 1 . 6 only , due to dependecy to ' tools ' 
 + compilation on 1 . 6 only , due to dependency to ' tools ' 
 < enforceBytecodeVersion > 
 < maxJdkVersion > 1 . 6 < / maxJdkVersion > 
 < / enforceBytecodeVersion > 
 @ @ - 473 , 7 + 473 , 7 @ @ 
 < / execution > 
 < / executions > 
 < ! - - we can not use this as it require 
 - compilation on 1 . 6 only , due to dependecy to ' tool ' 
 + compilation on 1 . 6 only , due to dependency to ' tool ' 
 < dependencies > 
 < dependency > 
 < groupId > org . codehaus . mojo < / groupId > 
 @ @ - 555 , 7 + 555 , 7 @ @ 
 < / configuration > 
 < / execution > 
 < execution > 
 - < id > add - ittest - source < / id > 
 + < id > add - it - test - source < / id > 
 < phase > process - resources < / phase > 
 < goals > 
 < goal > add - test - source < / goal > 
 @ @ - 567 , 7 + 567 , 7 @ @ 
 < / configuration > 
 < / execution > 
 < execution > 
 - < id > add - ittest - resource < / id > 
 + < id > add - it - test - resource < / id > 
 < phase > process - resources < / phase > 
 < goals > 
 < goal > add - test - source < / goal > 
 @ @ - 964 , 10 + 964 , 10 @ @ 
 < excludedLink > http : / / search . maven . org / * < / excludedLink > 
 < excludedLink > http : / / junit . org < / excludedLink > 
 < excludedLink > http : / / sonar - plugins . codehaus . org / maven - report < / excludedLink > 
 - < ! - - Excluded due to checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 
 + < ! - - Excluded due to Checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 
 and http : / / jira . codehaus . org / browse / DOXIA - 525 and http : / / jira . codehaus . org / browse / MLINKCHECK - 21 will be fixed - - > 
 < excludedLink > * * / com / puppycrawl / * * < / excludedLink > 
 - < ! - - Excluded due to checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 will be fixed - - > 
 + < ! - - Excluded due to Checkstyle ' s issue # 549 until https : / / issues . apache . org / jira / browse / MJAVADOC - 428 will be fixed - - > 
 < excludedLink > http : / / docs . oracle . com / javase / 7 / docs / api / org / xml / sax / helpers . DefaultHandler . html ? * < / excludedLink > 
 < ! - - Excluded due to Maven Enforcer Plugin ' s issue # 234 : https : / / issues . apache . org / jira / browse / MENFORCER - 234 - - > 
 < excludedLink > http : / / maven . apache . org / enforcer / maven - enforcer - plugin < / excludedLink > 
 @ @ - 1013 , 7 + 1013 , 7 @ @ 
 < profiles > 
 
 < ! - - Bring in tools . jar for platforms which provide it 
 - that is required for javadoc docklets that are in use - - > 
 + that is required for javadoc doclets that are in use - - > 
 < profile > 
 < id > default - tools . jar - oracle < / id > 
 < activation > 
 @ @ - 1402 , 11 + 1402 , 11 @ @ 
 
 < / profiles > 
 
 - < ! - - that repositories are required for tesing plugin ' s snapshot version - - > 
 + < ! - - that repositories are required for testing plugin ' s snapshot version - - > 
 < pluginRepositories > 
 < pluginRepository > 
 < id > nexus - snapshot < / id > 
 - < name > Oficial Maven Apache Repo < / name > 
 + < name > Official Maven Apache Repo < / name > 
 < url > https : / / nexus . codehaus . org / content / repositories / snapshots / < / url > 
 < / pluginRepository > 
 < / pluginRepositories >
