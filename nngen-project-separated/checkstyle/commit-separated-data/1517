BLEU SCORE: 0.08295193507109855

TEST MSG: Issue # 2421 : Cyclomatic Complexity and ReturnCount violations are resovled
GENERATED MSG: Issue # 1555 : Avoid reusing variables

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 3112ef7 . . fbacbdc 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 60 , 9 + 60 , 6 @ @ <nl> < suppress checks = " ReturnCount " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > <nl> < suppress checks = " SeparatorWrap " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > <nl> <nl> - < ! - - quesionable suppressions , should be permanent ? - - > <nl> - < suppress checks = " CyclomaticComplexity " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > <nl> - <nl> < ! - - <nl> Turn off all checks for Generated and Test code . Fixes issues with using <nl> Eclipse plug - in . <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java b / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java <nl> index c6d982c . . 9fc434a 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java <nl> @ @ - 64 , 6 + 64 , 10 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder { <nl> return getLinesWithWarnAndCheckComments ( aFileName , TAB _ WIDTH ) ; <nl> } <nl> <nl> + private enum CommentType { <nl> + MULTILEVEL , SINGLE _ LEVEL , NON _ STRICT _ LEVEL , UNKNOWN <nl> + } <nl> + <nl> private static Integer [ ] getLinesWithWarnAndCheckComments ( String aFileName , <nl> final int tabWidth ) <nl> throws IOException { <nl> @ @ - 127 , 34 + 131 , 83 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder { <nl> final int indentInComment = getIndentFromComment ( comment ) ; <nl> final boolean isWarnComment = isWarnComment ( comment ) ; <nl> <nl> - Matcher multilevelMatch = MULTILEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> - if ( multilevelMatch . matches ( ) ) { <nl> - final String [ ] levels = multilevelMatch . group ( 1 ) . split ( " , " ) ; <nl> - final String indentInCommentStr = String . valueOf ( indentInComment ) ; <nl> - final boolean containsActualLevel = <nl> - Arrays . asList ( levels ) . contains ( indentInCommentStr ) ; <nl> + boolean result ; <nl> + CommentType type = getCommentType ( comment ) ; <nl> + switch ( type ) { <nl> + case MULTILEVEL : <nl> + result = isMultiLevelCommentConsistent ( comment , indentInComment , isWarnComment ) ; <nl> + break ; <nl> <nl> - return containsActualLevel & & ! isWarnComment <nl> - | | ! containsActualLevel & & isWarnComment ; <nl> - } <nl> + case SINGLE _ LEVEL : <nl> + result = isSingleLevelCommentConsistent ( comment , indentInComment , isWarnComment ) ; <nl> + break ; <nl> <nl> - Matcher singleLevelMatch = SINGLE _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> - if ( singleLevelMatch . matches ( ) ) { <nl> - final int expectedLevel = Integer . parseInt ( singleLevelMatch . group ( 1 ) ) ; <nl> + case NON _ STRICT _ LEVEL : <nl> + result = isNonStrictCommentConsistent ( comment , indentInComment , isWarnComment ) ; <nl> + break ; <nl> + <nl> + case UNKNOWN : <nl> + throw new IllegalArgumentException ( " Cannot determine comment consistent " ) ; <nl> + <nl> + default : <nl> + throw new IllegalStateException ( " Cannot determine comment is consistent " ) ; <nl> <nl> - return expectedLevel = = indentInComment & & ! isWarnComment <nl> - | | expectedLevel ! = indentInComment & & isWarnComment ; <nl> } <nl> + return result ; <nl> + } <nl> <nl> + private static boolean isNonStrictCommentConsistent ( String comment <nl> + , int indentInComment , boolean isWarnComment ) { <nl> Matcher nonStrictLevelMatch = NON _ STRICT _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> - if ( nonStrictLevelMatch . matches ( ) ) { <nl> - final int expectedMinimalIndent = Integer . parseInt ( nonStrictLevelMatch . group ( 1 ) ) ; <nl> + nonStrictLevelMatch . matches ( ) ; <nl> + final int expectedMinimalIndent = Integer . parseInt ( nonStrictLevelMatch . group ( 1 ) ) ; <nl> <nl> - return indentInComment > = expectedMinimalIndent & & ! isWarnComment <nl> - | | indentInComment < expectedMinimalIndent & & isWarnComment ; <nl> - } <nl> + return indentInComment > = expectedMinimalIndent & & ! isWarnComment <nl> + | | indentInComment < expectedMinimalIndent & & isWarnComment ; <nl> + } <nl> + <nl> + private static boolean isSingleLevelCommentConsistent ( String comment <nl> + , int indentInComment , boolean isWarnComment ) { <nl> + Matcher singleLevelMatch = SINGLE _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> + singleLevelMatch . matches ( ) ; <nl> + final int expectedLevel = Integer . parseInt ( singleLevelMatch . group ( 1 ) ) ; <nl> <nl> - throw new IllegalArgumentException ( " Cannot determine if commit is consistent " ) ; <nl> + return expectedLevel = = indentInComment & & ! isWarnComment <nl> + | | expectedLevel ! = indentInComment & & isWarnComment ; <nl> + } <nl> + <nl> + private static boolean isMultiLevelCommentConsistent ( String comment <nl> + , int indentInComment , boolean isWarnComment ) { <nl> + Matcher multilevelMatch = MULTILEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> + multilevelMatch . matches ( ) ; <nl> + final String [ ] levels = multilevelMatch . group ( 1 ) . split ( " , " ) ; <nl> + final String indentInCommentStr = String . valueOf ( indentInComment ) ; <nl> + final boolean containsActualLevel = <nl> + Arrays . asList ( levels ) . contains ( indentInCommentStr ) ; <nl> + <nl> + return containsActualLevel & & ! isWarnComment <nl> + | | ! containsActualLevel & & isWarnComment ; <nl> + } <nl> + <nl> + private static CommentType getCommentType ( String comment ) { <nl> + CommentType result = CommentType . UNKNOWN ; <nl> + Matcher multilevelMatch = MULTILEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> + if ( multilevelMatch . matches ( ) ) { <nl> + result = CommentType . MULTILEVEL ; <nl> + } <nl> + else { <nl> + Matcher singleLevelMatch = SINGLE _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> + if ( singleLevelMatch . matches ( ) ) { <nl> + result = CommentType . SINGLE _ LEVEL ; <nl> + } <nl> + else { <nl> + Matcher nonStrictLevelMatch = NON _ STRICT _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> + if ( nonStrictLevelMatch . matches ( ) ) { <nl> + result = CommentType . NON _ STRICT _ LEVEL ; <nl> + } <nl> + } <nl> + } <nl> + return result ; <nl> } <nl> <nl> private static int getLineStart ( String line , final int tabWidth ) {
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index e178c39 . . 08e065d 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 325 , 6 + 325 , 8 @ @ <nl> < property name = " max " value = " 30 " / > <nl> < / module > <nl> <nl> + < module name = " NPathComplexity " / > <nl> + <nl> < ! - - <nl> < module name = " ClassDataAbstractionCoupling " / > <nl> < module name = " ClassFanOutComplexity " / > <nl> @ @ - 334 , 7 + 336 , 6 @ @ <nl> < module name = " JavadocTagContinuationIndentation " / > <nl> < module name = " JavaNCSS " / > <nl> < module name = " MissingCtor " / > <nl> - < module name = " NPathComplexity " / > <nl> < module name = " OneTopLevelClass " / > <nl> < module name = " OverloadMethodsDeclarationOrder " / > <nl> < module name = " PackageDeclaration " / >

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 3112ef7 . . fbacbdc 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 60 , 9 + 60 , 6 @ @ 
 < suppress checks = " ReturnCount " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > 
 < suppress checks = " SeparatorWrap " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > 
 
 - < ! - - quesionable suppressions , should be permanent ? - - > 
 - < suppress checks = " CyclomaticComplexity " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > 
 - 
 < ! - - 
 Turn off all checks for Generated and Test code . Fixes issues with using 
 Eclipse plug - in . 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java b / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java 
 index c6d982c . . 9fc434a 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java 
 @ @ - 64 , 6 + 64 , 10 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder { 
 return getLinesWithWarnAndCheckComments ( aFileName , TAB _ WIDTH ) ; 
 } 
 
 + private enum CommentType { 
 + MULTILEVEL , SINGLE _ LEVEL , NON _ STRICT _ LEVEL , UNKNOWN 
 + } 
 + 
 private static Integer [ ] getLinesWithWarnAndCheckComments ( String aFileName , 
 final int tabWidth ) 
 throws IOException { 
 @ @ - 127 , 34 + 131 , 83 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder { 
 final int indentInComment = getIndentFromComment ( comment ) ; 
 final boolean isWarnComment = isWarnComment ( comment ) ; 
 
 - Matcher multilevelMatch = MULTILEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 - if ( multilevelMatch . matches ( ) ) { 
 - final String [ ] levels = multilevelMatch . group ( 1 ) . split ( " , " ) ; 
 - final String indentInCommentStr = String . valueOf ( indentInComment ) ; 
 - final boolean containsActualLevel = 
 - Arrays . asList ( levels ) . contains ( indentInCommentStr ) ; 
 + boolean result ; 
 + CommentType type = getCommentType ( comment ) ; 
 + switch ( type ) { 
 + case MULTILEVEL : 
 + result = isMultiLevelCommentConsistent ( comment , indentInComment , isWarnComment ) ; 
 + break ; 
 
 - return containsActualLevel & & ! isWarnComment 
 - | | ! containsActualLevel & & isWarnComment ; 
 - } 
 + case SINGLE _ LEVEL : 
 + result = isSingleLevelCommentConsistent ( comment , indentInComment , isWarnComment ) ; 
 + break ; 
 
 - Matcher singleLevelMatch = SINGLE _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 - if ( singleLevelMatch . matches ( ) ) { 
 - final int expectedLevel = Integer . parseInt ( singleLevelMatch . group ( 1 ) ) ; 
 + case NON _ STRICT _ LEVEL : 
 + result = isNonStrictCommentConsistent ( comment , indentInComment , isWarnComment ) ; 
 + break ; 
 + 
 + case UNKNOWN : 
 + throw new IllegalArgumentException ( " Cannot determine comment consistent " ) ; 
 + 
 + default : 
 + throw new IllegalStateException ( " Cannot determine comment is consistent " ) ; 
 
 - return expectedLevel = = indentInComment & & ! isWarnComment 
 - | | expectedLevel ! = indentInComment & & isWarnComment ; 
 } 
 + return result ; 
 + } 
 
 + private static boolean isNonStrictCommentConsistent ( String comment 
 + , int indentInComment , boolean isWarnComment ) { 
 Matcher nonStrictLevelMatch = NON _ STRICT _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 - if ( nonStrictLevelMatch . matches ( ) ) { 
 - final int expectedMinimalIndent = Integer . parseInt ( nonStrictLevelMatch . group ( 1 ) ) ; 
 + nonStrictLevelMatch . matches ( ) ; 
 + final int expectedMinimalIndent = Integer . parseInt ( nonStrictLevelMatch . group ( 1 ) ) ; 
 
 - return indentInComment > = expectedMinimalIndent & & ! isWarnComment 
 - | | indentInComment < expectedMinimalIndent & & isWarnComment ; 
 - } 
 + return indentInComment > = expectedMinimalIndent & & ! isWarnComment 
 + | | indentInComment < expectedMinimalIndent & & isWarnComment ; 
 + } 
 + 
 + private static boolean isSingleLevelCommentConsistent ( String comment 
 + , int indentInComment , boolean isWarnComment ) { 
 + Matcher singleLevelMatch = SINGLE _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 + singleLevelMatch . matches ( ) ; 
 + final int expectedLevel = Integer . parseInt ( singleLevelMatch . group ( 1 ) ) ; 
 
 - throw new IllegalArgumentException ( " Cannot determine if commit is consistent " ) ; 
 + return expectedLevel = = indentInComment & & ! isWarnComment 
 + | | expectedLevel ! = indentInComment & & isWarnComment ; 
 + } 
 + 
 + private static boolean isMultiLevelCommentConsistent ( String comment 
 + , int indentInComment , boolean isWarnComment ) { 
 + Matcher multilevelMatch = MULTILEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 + multilevelMatch . matches ( ) ; 
 + final String [ ] levels = multilevelMatch . group ( 1 ) . split ( " , " ) ; 
 + final String indentInCommentStr = String . valueOf ( indentInComment ) ; 
 + final boolean containsActualLevel = 
 + Arrays . asList ( levels ) . contains ( indentInCommentStr ) ; 
 + 
 + return containsActualLevel & & ! isWarnComment 
 + | | ! containsActualLevel & & isWarnComment ; 
 + } 
 + 
 + private static CommentType getCommentType ( String comment ) { 
 + CommentType result = CommentType . UNKNOWN ; 
 + Matcher multilevelMatch = MULTILEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 + if ( multilevelMatch . matches ( ) ) { 
 + result = CommentType . MULTILEVEL ; 
 + } 
 + else { 
 + Matcher singleLevelMatch = SINGLE _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 + if ( singleLevelMatch . matches ( ) ) { 
 + result = CommentType . SINGLE _ LEVEL ; 
 + } 
 + else { 
 + Matcher nonStrictLevelMatch = NON _ STRICT _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 + if ( nonStrictLevelMatch . matches ( ) ) { 
 + result = CommentType . NON _ STRICT _ LEVEL ; 
 + } 
 + } 
 + } 
 + return result ; 
 } 
 
 private static int getLineStart ( String line , final int tabWidth ) {

NEAREST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index e178c39 . . 08e065d 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 325 , 6 + 325 , 8 @ @ 
 < property name = " max " value = " 30 " / > 
 < / module > 
 
 + < module name = " NPathComplexity " / > 
 + 
 < ! - - 
 < module name = " ClassDataAbstractionCoupling " / > 
 < module name = " ClassFanOutComplexity " / > 
 @ @ - 334 , 7 + 336 , 6 @ @ 
 < module name = " JavadocTagContinuationIndentation " / > 
 < module name = " JavaNCSS " / > 
 < module name = " MissingCtor " / > 
 - < module name = " NPathComplexity " / > 
 < module name = " OneTopLevelClass " / > 
 < module name = " OverloadMethodsDeclarationOrder " / > 
 < module name = " PackageDeclaration " / >
