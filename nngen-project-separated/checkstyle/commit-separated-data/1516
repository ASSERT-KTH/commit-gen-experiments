BLEU SCORE: 1.0

TEST MSG: Issue # 2421 : enabling checking on it folder
GENERATED MSG: Issue # 2421 : enabling checking on it folder

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index fbacbdc . . d29f6cc 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 53 , 10 + 53 , 6 @ @ <nl> < ! - - Suppressions to remove over time for sure - - > <nl> < suppress checks = " FinalLocalVariable " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > <nl> < suppress checks = " LineLength " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > <nl> - < suppress checks = " NoWhitespaceBefore " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > <nl> - < suppress checks = " WhitespaceAfter " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > <nl> - < suppress checks = " WhitespaceAround " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > <nl> - < suppress checks = " AbbreviationAsWordInName " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > <nl> < suppress checks = " ReturnCount " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > <nl> < suppress checks = " SeparatorWrap " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > <nl> <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java b / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java <nl> index c64cfa8 . . 41a3b56 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java <nl> @ @ - 49 , 8 + 49 , 8 @ @ public class ConfigurationBuilder extends BaseCheckTestSupport { <nl> <nl> private final Pattern warnPattern = CommonUtils . createPattern ( " . * [ ] * / / [ ] * warn [ ] * | / [ * ] warn [ * ] / " ) ; <nl> <nl> - public ConfigurationBuilder ( File aROOT ) { <nl> - root = aROOT ; <nl> + public ConfigurationBuilder ( File aRoot ) { <nl> + root = aRoot ; <nl> configuration = getConfigurationFromXML ( XML _ NAME , System . getProperties ( ) ) ; <nl> listFiles ( files , root , " java " ) ; <nl> } <nl> @ @ - 94 , 7 + 94 , 7 @ @ public class ConfigurationBuilder extends BaseCheckTestSupport { <nl> String rootPath = absoluteRootPath . substring ( 0 , <nl> absoluteRootPath . lastIndexOf ( " src " ) ) ; <nl> for ( File file : files ) { <nl> - if ( file . toString ( ) . endsWith ( aFileName + " . java " ) ) { <nl> + if ( file . toString ( ) . endsWith ( aFileName + " . java " ) ) { <nl> return rootPath + file ; <nl> } <nl> } <nl> @ @ - 125 , 7 + 125 , 7 @ @ public class ConfigurationBuilder extends BaseCheckTestSupport { <nl> <nl> public Integer [ ] getLinesWithWarn ( String aFileName ) throws IOException { <nl> List < Integer > result = new ArrayList < > ( ) ; <nl> - try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( <nl> + try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( <nl> new FileInputStream ( aFileName ) , StandardCharsets . UTF _ 8 ) ) ) { <nl> int lineNumber = 1 ; <nl> while ( true ) { <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java b / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java <nl> index 9fc434a . . 51ed801 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java <nl> @ @ - 55 , 8 + 55 , 8 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder { <nl> private static final Pattern NON _ STRICT _ LEVEL _ COMMENT _ REGEX = <nl> Pattern . compile ( " / / indent : \ \ d + exp : > = ( \ \ d + ) ( warn ) ? " ) ; <nl> <nl> - public IndentationConfigurationBuilder ( File aROOT ) { <nl> - super ( aROOT ) ; <nl> + public IndentationConfigurationBuilder ( File aRoot ) { <nl> + super ( aRoot ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 156 , 8 + 156 , 8 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder { <nl> return result ; <nl> } <nl> <nl> - private static boolean isNonStrictCommentConsistent ( String comment <nl> - , int indentInComment , boolean isWarnComment ) { <nl> + private static boolean isNonStrictCommentConsistent ( String comment , <nl> + int indentInComment , boolean isWarnComment ) { <nl> Matcher nonStrictLevelMatch = NON _ STRICT _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> nonStrictLevelMatch . matches ( ) ; <nl> final int expectedMinimalIndent = Integer . parseInt ( nonStrictLevelMatch . group ( 1 ) ) ; <nl> @ @ - 166 , 8 + 166 , 8 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder { <nl> | | indentInComment < expectedMinimalIndent & & isWarnComment ; <nl> } <nl> <nl> - private static boolean isSingleLevelCommentConsistent ( String comment <nl> - , int indentInComment , boolean isWarnComment ) { <nl> + private static boolean isSingleLevelCommentConsistent ( String comment , <nl> + int indentInComment , boolean isWarnComment ) { <nl> Matcher singleLevelMatch = SINGLE _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> singleLevelMatch . matches ( ) ; <nl> final int expectedLevel = Integer . parseInt ( singleLevelMatch . group ( 1 ) ) ; <nl> @ @ - 176 , 8 + 176 , 8 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder { <nl> | | expectedLevel ! = indentInComment & & isWarnComment ; <nl> } <nl> <nl> - private static boolean isMultiLevelCommentConsistent ( String comment <nl> - , int indentInComment , boolean isWarnComment ) { <nl> + private static boolean isMultiLevelCommentConsistent ( String comment , <nl> + int indentInComment , boolean isWarnComment ) { <nl> Matcher multilevelMatch = MULTILEVEL _ COMMENT _ REGEX . matcher ( comment ) ; <nl> multilevelMatch . matches ( ) ; <nl> final String [ ] levels = multilevelMatch . group ( 1 ) . split ( " , " ) ; <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule231filetab / FileTabCharacterTest . java b / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule231filetab / FileTabCharacterTest . java <nl> index 3194b53 . . e101086 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule231filetab / FileTabCharacterTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule231filetab / FileTabCharacterTest . java <nl> @ @ - 65 , 7 + 65 , 7 @ @ public class FileTabCharacterTest extends BaseCheckTestSupport { <nl> <nl> String filePath = builder . getFilePath ( " FileTabCharacterInput " ) ; <nl> Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> - verify ( createChecker ( checkConfig ) , filePath , <nl> + verify ( createChecker ( checkConfig ) , filePath , <nl> expected , warnList ) ; <nl> } <nl> <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule711generalform / SingleLineJavadocTest . java b / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule711generalform / SingleLineJavadocTest . java <nl> index a65f99d . . ee1f408 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule711generalform / SingleLineJavadocTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule711generalform / SingleLineJavadocTest . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class SingleLineJavadocTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test ( expected = Exception . class ) <nl> - public void customInlineTagTest ( ) throws Exception { <nl> + public void customInlineTagTest ( ) throws Exception { <nl> String msg = getCheckMessage ( SingleLineJavadocCheck . class , " singleline . javadoc " ) ; <nl> <nl> Configuration checkConfig = builder . getCheckConfig ( " SingleLineJavadocCheck " ) ;
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> index 21c529d . . 75bf336 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> @ @ - 36 , 6 + 37 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class MutableExceptionCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " design " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testClassExtendsGenericClass ( ) throws Exception { <nl> @ @ - 43 , 8 + 49 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { <nl> <nl> String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checkConfig , getPath ( " design " + File . separator <nl> - + " InputMutableExceptionClassExtendsGenericClass . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputMutableExceptionClassExtendsGenericClass . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 57 , 7 + 62 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { <nl> " 46 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " InputMutableException . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputMutableException . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 69 , 7 + 74 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { <nl> " 34 : 13 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " design " + File . separator + " InputMutableException . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputMutableException . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableException . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableException . java <nl> new file mode 100644 <nl> index 0000000 . . 7b0febc <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableException . java <nl> @ @ - 0 , 0 + 1 , 48 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + public class InputMutableException { <nl> + public class FooException extends Exception { <nl> + private final int finalErrorCode ; <nl> + private int errorCode = 1 ; <nl> + <nl> + public FooException ( ) { <nl> + finalErrorCode = 1 ; <nl> + } <nl> + <nl> + public class FooExceptionThisIsNot extends RuntimeException { <nl> + private final int finalErrorCode ; <nl> + private int errorCode = 1 ; <nl> + / * * constructor * / <nl> + public FooExceptionThisIsNot ( ) { <nl> + finalErrorCode = 1 ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public class BarError extends Throwable { <nl> + private int errorCode ; <nl> + } <nl> + <nl> + public class BazDoesNotExtendError { <nl> + private int errorCode ; <nl> + } <nl> + <nl> + public class CustomProblem extends ThreadDeath { <nl> + private int errorCode ; <nl> + <nl> + public class CustomFailure extends ThreadDeath { <nl> + private int errorCode ; <nl> + public void someMethod ( ) { <nl> + if ( true ) { <nl> + final int i = 0 ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + class CustomException extends java . lang . Exception { } <nl> + <nl> + class CustomMutableException extends java . lang . Exception { <nl> + int errorCode ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableExceptionClassExtendsGenericClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableExceptionClassExtendsGenericClass . java <nl> new file mode 100644 <nl> index 0000000 . . 6b12a88 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableExceptionClassExtendsGenericClass . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import java . util . concurrent . atomic . AtomicReference ; <nl> + <nl> + / * * <nl> + * Convenience class for holding an { @ link Exception } in a thread - safe way <nl> + * / <nl> + public class InputMutableExceptionClassExtendsGenericClass extends AtomicReference < Exception > { / / NPE is not expected <nl> + <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableException . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableException . java <nl> deleted file mode 100644 <nl> index 8f1a7f2 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableException . java <nl> + + + / dev / null <nl> @ @ - 1 , 48 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - public class InputMutableException { <nl> - public class FooException extends Exception { <nl> - private final int finalErrorCode ; <nl> - private int errorCode = 1 ; <nl> - <nl> - public FooException ( ) { <nl> - finalErrorCode = 1 ; <nl> - } <nl> - <nl> - public class FooExceptionThisIsNot extends RuntimeException { <nl> - private final int finalErrorCode ; <nl> - private int errorCode = 1 ; <nl> - / * * constructor * / <nl> - public FooExceptionThisIsNot ( ) { <nl> - finalErrorCode = 1 ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - public class BarError extends Throwable { <nl> - private int errorCode ; <nl> - } <nl> - <nl> - public class BazDoesNotExtendError { <nl> - private int errorCode ; <nl> - } <nl> - <nl> - public class CustomProblem extends ThreadDeath { <nl> - private int errorCode ; <nl> - <nl> - public class CustomFailure extends ThreadDeath { <nl> - private int errorCode ; <nl> - public void someMethod ( ) { <nl> - if ( true ) { <nl> - final int i = 0 ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> - class CustomException extends java . lang . Exception { } <nl> - <nl> - class CustomMutableException extends java . lang . Exception { <nl> - int errorCode ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java <nl> deleted file mode 100644 <nl> index 931128e . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java <nl> + + + / dev / null <nl> @ @ - 1 , 12 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . design ; <nl> - <nl> - import java . util . concurrent . atomic . AtomicReference ; <nl> - <nl> - / * * <nl> - * Convenience class for holding an { @ link Exception } in a thread - safe way <nl> - * / <nl> - public class InputMutableExceptionClassExtendsGenericClass extends AtomicReference < Exception > { / / NPE is not expected <nl> - <nl> - private static final long serialVersionUID = 1L ; <nl> - <nl> - } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index fbacbdc . . d29f6cc 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 53 , 10 + 53 , 6 @ @ 
 < ! - - Suppressions to remove over time for sure - - > 
 < suppress checks = " FinalLocalVariable " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > 
 < suppress checks = " LineLength " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > 
 - < suppress checks = " NoWhitespaceBefore " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > 
 - < suppress checks = " WhitespaceAfter " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > 
 - < suppress checks = " WhitespaceAround " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > 
 - < suppress checks = " AbbreviationAsWordInName " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > 
 < suppress checks = " ReturnCount " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > 
 < suppress checks = " SeparatorWrap " files = " . * [ \ \ / ] src [ \ \ / ] it [ \ \ / ] " / > 
 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java b / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java 
 index c64cfa8 . . 41a3b56 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / ConfigurationBuilder . java 
 @ @ - 49 , 8 + 49 , 8 @ @ public class ConfigurationBuilder extends BaseCheckTestSupport { 
 
 private final Pattern warnPattern = CommonUtils . createPattern ( " . * [ ] * / / [ ] * warn [ ] * | / [ * ] warn [ * ] / " ) ; 
 
 - public ConfigurationBuilder ( File aROOT ) { 
 - root = aROOT ; 
 + public ConfigurationBuilder ( File aRoot ) { 
 + root = aRoot ; 
 configuration = getConfigurationFromXML ( XML _ NAME , System . getProperties ( ) ) ; 
 listFiles ( files , root , " java " ) ; 
 } 
 @ @ - 94 , 7 + 94 , 7 @ @ public class ConfigurationBuilder extends BaseCheckTestSupport { 
 String rootPath = absoluteRootPath . substring ( 0 , 
 absoluteRootPath . lastIndexOf ( " src " ) ) ; 
 for ( File file : files ) { 
 - if ( file . toString ( ) . endsWith ( aFileName + " . java " ) ) { 
 + if ( file . toString ( ) . endsWith ( aFileName + " . java " ) ) { 
 return rootPath + file ; 
 } 
 } 
 @ @ - 125 , 7 + 125 , 7 @ @ public class ConfigurationBuilder extends BaseCheckTestSupport { 
 
 public Integer [ ] getLinesWithWarn ( String aFileName ) throws IOException { 
 List < Integer > result = new ArrayList < > ( ) ; 
 - try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( 
 + try ( BufferedReader br = new BufferedReader ( new InputStreamReader ( 
 new FileInputStream ( aFileName ) , StandardCharsets . UTF _ 8 ) ) ) { 
 int lineNumber = 1 ; 
 while ( true ) { 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java b / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java 
 index 9fc434a . . 51ed801 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java 
 @ @ - 55 , 8 + 55 , 8 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder { 
 private static final Pattern NON _ STRICT _ LEVEL _ COMMENT _ REGEX = 
 Pattern . compile ( " / / indent : \ \ d + exp : > = ( \ \ d + ) ( warn ) ? " ) ; 
 
 - public IndentationConfigurationBuilder ( File aROOT ) { 
 - super ( aROOT ) ; 
 + public IndentationConfigurationBuilder ( File aRoot ) { 
 + super ( aRoot ) ; 
 } 
 
 @ Override 
 @ @ - 156 , 8 + 156 , 8 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder { 
 return result ; 
 } 
 
 - private static boolean isNonStrictCommentConsistent ( String comment 
 - , int indentInComment , boolean isWarnComment ) { 
 + private static boolean isNonStrictCommentConsistent ( String comment , 
 + int indentInComment , boolean isWarnComment ) { 
 Matcher nonStrictLevelMatch = NON _ STRICT _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 nonStrictLevelMatch . matches ( ) ; 
 final int expectedMinimalIndent = Integer . parseInt ( nonStrictLevelMatch . group ( 1 ) ) ; 
 @ @ - 166 , 8 + 166 , 8 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder { 
 | | indentInComment < expectedMinimalIndent & & isWarnComment ; 
 } 
 
 - private static boolean isSingleLevelCommentConsistent ( String comment 
 - , int indentInComment , boolean isWarnComment ) { 
 + private static boolean isSingleLevelCommentConsistent ( String comment , 
 + int indentInComment , boolean isWarnComment ) { 
 Matcher singleLevelMatch = SINGLE _ LEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 singleLevelMatch . matches ( ) ; 
 final int expectedLevel = Integer . parseInt ( singleLevelMatch . group ( 1 ) ) ; 
 @ @ - 176 , 8 + 176 , 8 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder { 
 | | expectedLevel ! = indentInComment & & isWarnComment ; 
 } 
 
 - private static boolean isMultiLevelCommentConsistent ( String comment 
 - , int indentInComment , boolean isWarnComment ) { 
 + private static boolean isMultiLevelCommentConsistent ( String comment , 
 + int indentInComment , boolean isWarnComment ) { 
 Matcher multilevelMatch = MULTILEVEL _ COMMENT _ REGEX . matcher ( comment ) ; 
 multilevelMatch . matches ( ) ; 
 final String [ ] levels = multilevelMatch . group ( 1 ) . split ( " , " ) ; 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule231filetab / FileTabCharacterTest . java b / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule231filetab / FileTabCharacterTest . java 
 index 3194b53 . . e101086 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule231filetab / FileTabCharacterTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter2filebasic / rule231filetab / FileTabCharacterTest . java 
 @ @ - 65 , 7 + 65 , 7 @ @ public class FileTabCharacterTest extends BaseCheckTestSupport { 
 
 String filePath = builder . getFilePath ( " FileTabCharacterInput " ) ; 
 Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 - verify ( createChecker ( checkConfig ) , filePath , 
 + verify ( createChecker ( checkConfig ) , filePath , 
 expected , warnList ) ; 
 } 
 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule711generalform / SingleLineJavadocTest . java b / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule711generalform / SingleLineJavadocTest . java 
 index a65f99d . . ee1f408 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule711generalform / SingleLineJavadocTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter7javadoc / rule711generalform / SingleLineJavadocTest . java 
 @ @ - 63 , 7 + 63 , 7 @ @ public class SingleLineJavadocTest extends BaseCheckTestSupport { 
 } 
 
 @ Test ( expected = Exception . class ) 
 - public void customInlineTagTest ( ) throws Exception { 
 + public void customInlineTagTest ( ) throws Exception { 
 String msg = getCheckMessage ( SingleLineJavadocCheck . class , " singleline . javadoc " ) ; 
 
 Configuration checkConfig = builder . getCheckConfig ( " SingleLineJavadocCheck " ) ;

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 index 21c529d . . 75bf336 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . fail ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 @ @ - 36 , 6 + 37 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class MutableExceptionCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " design " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testClassExtendsGenericClass ( ) throws Exception { 
 @ @ - 43 , 8 + 49 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { 
 
 String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checkConfig , getPath ( " design " + File . separator 
 - + " InputMutableExceptionClassExtendsGenericClass . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputMutableExceptionClassExtendsGenericClass . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 57 , 7 + 62 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { 
 " 46 : 9 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " design " + File . separator + " InputMutableException . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputMutableException . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 69 , 7 + 74 , 7 @ @ public class MutableExceptionCheckTest extends BaseCheckTestSupport { 
 " 34 : 13 : " + getCheckMessage ( MSG _ KEY , " errorCode " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " design " + File . separator + " InputMutableException . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputMutableException . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableException . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableException . java 
 new file mode 100644 
 index 0000000 . . 7b0febc 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableException . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + public class InputMutableException { 
 + public class FooException extends Exception { 
 + private final int finalErrorCode ; 
 + private int errorCode = 1 ; 
 + 
 + public FooException ( ) { 
 + finalErrorCode = 1 ; 
 + } 
 + 
 + public class FooExceptionThisIsNot extends RuntimeException { 
 + private final int finalErrorCode ; 
 + private int errorCode = 1 ; 
 + / * * constructor * / 
 + public FooExceptionThisIsNot ( ) { 
 + finalErrorCode = 1 ; 
 + } 
 + } 
 + } 
 + 
 + public class BarError extends Throwable { 
 + private int errorCode ; 
 + } 
 + 
 + public class BazDoesNotExtendError { 
 + private int errorCode ; 
 + } 
 + 
 + public class CustomProblem extends ThreadDeath { 
 + private int errorCode ; 
 + 
 + public class CustomFailure extends ThreadDeath { 
 + private int errorCode ; 
 + public void someMethod ( ) { 
 + if ( true ) { 
 + final int i = 0 ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + class CustomException extends java . lang . Exception { } 
 + 
 + class CustomMutableException extends java . lang . Exception { 
 + int errorCode ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableExceptionClassExtendsGenericClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableExceptionClassExtendsGenericClass . java 
 new file mode 100644 
 index 0000000 . . 6b12a88 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputMutableExceptionClassExtendsGenericClass . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import java . util . concurrent . atomic . AtomicReference ; 
 + 
 + / * * 
 + * Convenience class for holding an { @ link Exception } in a thread - safe way 
 + * / 
 + public class InputMutableExceptionClassExtendsGenericClass extends AtomicReference < Exception > { / / NPE is not expected 
 + 
 + private static final long serialVersionUID = 1L ; 
 + 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableException . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableException . java 
 deleted file mode 100644 
 index 8f1a7f2 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableException . java 
 + + + / dev / null 
 @ @ - 1 , 48 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - public class InputMutableException { 
 - public class FooException extends Exception { 
 - private final int finalErrorCode ; 
 - private int errorCode = 1 ; 
 - 
 - public FooException ( ) { 
 - finalErrorCode = 1 ; 
 - } 
 - 
 - public class FooExceptionThisIsNot extends RuntimeException { 
 - private final int finalErrorCode ; 
 - private int errorCode = 1 ; 
 - / * * constructor * / 
 - public FooExceptionThisIsNot ( ) { 
 - finalErrorCode = 1 ; 
 - } 
 - } 
 - } 
 - 
 - public class BarError extends Throwable { 
 - private int errorCode ; 
 - } 
 - 
 - public class BazDoesNotExtendError { 
 - private int errorCode ; 
 - } 
 - 
 - public class CustomProblem extends ThreadDeath { 
 - private int errorCode ; 
 - 
 - public class CustomFailure extends ThreadDeath { 
 - private int errorCode ; 
 - public void someMethod ( ) { 
 - if ( true ) { 
 - final int i = 0 ; 
 - } 
 - } 
 - } 
 - } 
 - 
 - class CustomException extends java . lang . Exception { } 
 - 
 - class CustomMutableException extends java . lang . Exception { 
 - int errorCode ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java 
 deleted file mode 100644 
 index 931128e . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java 
 + + + / dev / null 
 @ @ - 1 , 12 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . design ; 
 - 
 - import java . util . concurrent . atomic . AtomicReference ; 
 - 
 - / * * 
 - * Convenience class for holding an { @ link Exception } in a thread - safe way 
 - * / 
 - public class InputMutableExceptionClassExtendsGenericClass extends AtomicReference < Exception > { / / NPE is not expected 
 - 
 - private static final long serialVersionUID = 1L ; 
 - 
 - } 
 \ No newline at end of file
