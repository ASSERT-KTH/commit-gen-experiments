BLEU SCORE: 0.010738456044579523

TEST MSG: Issue # 4165 : Split and Organize Checkstyle inputs by Test for checks in coding package : NoFinalizer
GENERATED MSG: FallThrough check , request 754438 .

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java <nl> index 8283130 . . 0e5c973 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java <nl> @ @ - 40 , 7 + 40 , 9 @ @ public class NoFinalizerCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " nofinalizer " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 51 , 7 + 53 , 7 @ @ public class NoFinalizerCheckTest <nl> final String [ ] expected = { <nl> " 5 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputHasFinalizer . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNoFinalizerHasFinalizer . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 60 , 6 + 62 , 6 @ @ public class NoFinalizerCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( NoFinalizerCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputFallThrough . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNoFinalizerFallThrough . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHasFinalizer . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHasFinalizer . java <nl> deleted file mode 100644 <nl> index f09ee90 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHasFinalizer . java <nl> + + + / dev / null <nl> @ @ - 1 , 27 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - public class InputHasFinalizer <nl> - { <nl> - public void finalize ( ) <nl> - { <nl> - / / It ' s not enough to check if the METHOD _ DEF branch contains a PARAMETER _ DEF , as that would <nl> - / / treat this method as having a parameter . <nl> - Runnable runnable = new Runnable ( ) { <nl> - <nl> - public void run ( ) { <nl> - reallyFinalize ( " hi " ) ; <nl> - } <nl> - <nl> - / / generates a PARAMETER _ DEF AST inside the METHOD _ DEF of finalize ( ) <nl> - private void reallyFinalize ( String s ) <nl> - { <nl> - } <nl> - } ; <nl> - runnable . run ( ) ; <nl> - } <nl> - <nl> - / / should not be reported by NoFinalizer check <nl> - public void finalize ( String x ) <nl> - { <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java <nl> new file mode 100644 <nl> index 0000000 . . 6d7f6e3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java <nl> @ @ - 0 , 0 + 1 , 524 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . nofinalizer ; <nl> + <nl> + public class InputNoFinalizerFallThrough <nl> + { <nl> + void method ( int i , int j , boolean cond ) { <nl> + while ( true ) { <nl> + switch ( i ) { <nl> + case 0 : / / no problem <nl> + case 1 : <nl> + i + + ; <nl> + break ; <nl> + case 2 : <nl> + i + + ; <nl> + case 3 : / / fall through ! ! ! <nl> + i + + ; <nl> + break ; <nl> + case 4 : <nl> + return ; <nl> + case 5 : <nl> + throw new RuntimeException ( " " ) ; <nl> + case 6 : <nl> + continue ; <nl> + case 7 : { <nl> + break ; <nl> + } <nl> + case 8 : { <nl> + return ; <nl> + } <nl> + case 9 : { <nl> + throw new RuntimeException ( " " ) ; <nl> + } <nl> + case 10 : { <nl> + continue ; <nl> + } <nl> + case 11 : { <nl> + i + + ; <nl> + } <nl> + case 12 : / / fall through ! ! ! <nl> + if ( false ) <nl> + break ; <nl> + else <nl> + break ; <nl> + case 13 : <nl> + if ( true ) { <nl> + return ; <nl> + } <nl> + case 14 : <nl> + if ( true ) { <nl> + return ; <nl> + } else { <nl> + / / do nothing <nl> + } <nl> + case 15 : / / fall through ! ! ! <nl> + do { <nl> + System . identityHashCode ( " something " ) ; <nl> + return ; <nl> + } while ( true ) ; <nl> + case 16 : <nl> + for ( int j1 = 0 ; j1 < 10 ; j1 + + ) { <nl> + String . valueOf ( " something " ) ; <nl> + return ; <nl> + } <nl> + case 17 : <nl> + while ( true ) <nl> + throw new RuntimeException ( " " ) ; <nl> + case 18 : <nl> + while ( cond ) { <nl> + break ; <nl> + } <nl> + case 19 : / / fall through ! ! ! <nl> + try { <nl> + i + + ; <nl> + break ; <nl> + } catch ( RuntimeException e ) { <nl> + break ; <nl> + } catch ( Error e ) { <nl> + return ; <nl> + } <nl> + case 20 : <nl> + try { <nl> + i + + ; <nl> + break ; <nl> + } catch ( RuntimeException e ) { <nl> + } catch ( Error e ) { <nl> + return ; <nl> + } <nl> + case 21 : / / fall through ! ! ! <nl> + try { <nl> + i + + ; <nl> + } catch ( RuntimeException e ) { <nl> + i - - ; <nl> + } finally { <nl> + break ; <nl> + } <nl> + case 22 : <nl> + try { <nl> + i + + ; <nl> + break ; <nl> + } catch ( RuntimeException e ) { <nl> + i - - ; <nl> + break ; <nl> + } finally { <nl> + i + + ; <nl> + } <nl> + case 23 : <nl> + switch ( j ) { <nl> + case 1 : <nl> + continue ; <nl> + case 2 : <nl> + return ; <nl> + default : <nl> + return ; <nl> + } <nl> + case 24 : <nl> + switch ( j ) { <nl> + case 1 : <nl> + continue ; <nl> + case 2 : <nl> + break ; <nl> + default : <nl> + return ; <nl> + } <nl> + default : / / fall through ! ! ! <nl> + / / this is the last label <nl> + i + + ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + <nl> + <nl> + / * Like above , but all fall throughs with relief comment * / <nl> + void methodFallThru ( int i , int j , boolean cond ) { <nl> + while ( true ) { <nl> + switch ( i ) { <nl> + case - 1 : / / FALLTHRU <nl> + <nl> + case 0 : / / no problem <nl> + case 1 : <nl> + i + + ; <nl> + break ; <nl> + case 2 : <nl> + i + + ; <nl> + / / fallthru <nl> + case 3 : <nl> + i + + ; <nl> + break ; <nl> + case 4 : <nl> + return ; <nl> + case 5 : <nl> + throw new RuntimeException ( " " ) ; <nl> + case 6 : <nl> + continue ; <nl> + case 7 : { <nl> + break ; <nl> + } <nl> + case 8 : { <nl> + return ; <nl> + } <nl> + case 9 : { <nl> + throw new RuntimeException ( " " ) ; <nl> + } <nl> + case 10 : { <nl> + continue ; <nl> + } <nl> + case 11 : { <nl> + i + + ; <nl> + } <nl> + / / fallthru <nl> + case 12 : <nl> + if ( false ) <nl> + break ; <nl> + else <nl> + break ; <nl> + case 13 : <nl> + if ( true ) { <nl> + return ; <nl> + } <nl> + case 14 : <nl> + if ( true ) { <nl> + return ; <nl> + } else { <nl> + / / do nothing <nl> + } <nl> + / / fallthru <nl> + case 15 : <nl> + do { <nl> + System . identityHashCode ( " something " ) ; <nl> + return ; <nl> + } while ( true ) ; <nl> + case 16 : <nl> + for ( int j1 = 0 ; j1 < 10 ; j1 + + ) { <nl> + String . valueOf ( " something " ) ; <nl> + return ; <nl> + } <nl> + case 17 : <nl> + while ( cond ) <nl> + throw new RuntimeException ( " " ) ; <nl> + case 18 : <nl> + while ( cond ) { <nl> + break ; <nl> + } <nl> + / / fallthru <nl> + case 19 : <nl> + try { <nl> + i + + ; <nl> + break ; <nl> + } catch ( RuntimeException e ) { <nl> + break ; <nl> + } catch ( Error e ) { <nl> + return ; <nl> + } <nl> + case 20 : <nl> + try { <nl> + i + + ; <nl> + break ; <nl> + } catch ( RuntimeException e ) { <nl> + } catch ( Error e ) { <nl> + return ; <nl> + } <nl> + / / fallthru <nl> + case 21 : <nl> + try { <nl> + i + + ; <nl> + } catch ( RuntimeException e ) { <nl> + i - - ; <nl> + } finally { <nl> + break ; <nl> + } <nl> + case 22 : <nl> + try { <nl> + i + + ; <nl> + break ; <nl> + } catch ( RuntimeException e ) { <nl> + i - - ; <nl> + break ; <nl> + } finally { <nl> + i + + ; <nl> + } <nl> + <nl> + case 23 : <nl> + switch ( j ) { <nl> + case 1 : <nl> + continue ; <nl> + case 2 : <nl> + return ; <nl> + default : <nl> + return ; <nl> + } <nl> + case 24 : <nl> + i + + ; <nl> + / * fallthru * / case 25 : <nl> + i + + ; <nl> + break ; <nl> + <nl> + case 26 : <nl> + switch ( j ) { <nl> + case 1 : <nl> + continue ; <nl> + case 2 : <nl> + break ; <nl> + default : <nl> + return ; <nl> + } <nl> + / / fallthru <nl> + default : <nl> + / / this is the last label <nl> + i + + ; <nl> + / / fallthru <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * Test relief comment . * / <nl> + void methodFallThruCC ( int i , int j , boolean cond ) { <nl> + while ( true ) { <nl> + switch ( i ) { <nl> + case 0 : <nl> + i + + ; / / fallthru <nl> + <nl> + case 1 : <nl> + i + + ; <nl> + / / fallthru <nl> + case 2 : { <nl> + i + + ; <nl> + } <nl> + / / fallthru <nl> + case 3 : <nl> + i + + ; <nl> + / * fallthru * / case 4 : <nl> + break ; <nl> + case 5 : <nl> + i + + ; <nl> + / / fallthru <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * Like above , but C - style comments . * / <nl> + void methodFallThruC ( int i , int j , boolean cond ) { <nl> + while ( true ) { <nl> + switch ( i ) { <nl> + case 0 : <nl> + i + + ; / * fallthru * / <nl> + <nl> + case 1 : <nl> + i + + ; <nl> + / * fallthru * / <nl> + case 2 : <nl> + i + + ; <nl> + / * fallthru * / case 3 : <nl> + break ; <nl> + case 4 : <nl> + i + + ; <nl> + / * fallthru * / <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * Like above , but C - style comments with no spaces . * / <nl> + void methodFallThruC2 ( int i , int j , boolean cond ) { <nl> + while ( true ) { <nl> + switch ( i ) { <nl> + case 0 : <nl> + i + + ; / * fallthru * / <nl> + <nl> + case 1 : <nl> + i + + ; <nl> + / * fallthru * / <nl> + case 2 : <nl> + i + + ; <nl> + / * fallthru * / case 3 : <nl> + break ; <nl> + case 4 : <nl> + i + + ; <nl> + / * fallthru * / <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * C - style comments with other default fallthru - comment . * / <nl> + void methodFallThruCOtherWords ( int i , int j , boolean cond ) { <nl> + while ( true ) { <nl> + switch ( i ) { <nl> + case 0 : <nl> + i + + ; / * falls through * / <nl> + <nl> + case 1 : <nl> + i + + ; <nl> + / * falls through * / <nl> + case 2 : <nl> + i + + ; <nl> + / * falls through * / case 3 : <nl> + break ; <nl> + case 4 : <nl> + i + + ; <nl> + / * falls through * / <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * C - style comments with custom fallthru - comment . * / <nl> + void methodFallThruCCustomWords ( int i , int j , boolean cond ) { <nl> + while ( true ) { <nl> + switch ( i ) { <nl> + case 0 : <nl> + i + + ; / * Continue with next case * / <nl> + <nl> + case 1 : <nl> + i + + ; <nl> + / * Continue with next case * / <nl> + case 2 : <nl> + i + + ; <nl> + / * Continue with next case * / case 3 : <nl> + break ; <nl> + case 4 : <nl> + i + + ; <nl> + / * Continue with next case * / <nl> + } <nl> + } <nl> + } <nl> + <nl> + void methodFallThruLastCaseGroup ( int i , int j , boolean cond ) { <nl> + while ( true ) { <nl> + switch ( i ) { <nl> + case 0 : <nl> + i + + ; / / fallthru <nl> + } <nl> + switch ( i ) { <nl> + case 0 : <nl> + i + + ; <nl> + / / fallthru <nl> + } <nl> + switch ( i ) { <nl> + case 0 : <nl> + i + + ; <nl> + / * fallthru * / } <nl> + } <nl> + } <nl> + <nl> + void method1472228 ( int i ) { <nl> + switch ( i ) { <nl> + case 2 : <nl> + / / do nothing <nl> + break ; <nl> + default : <nl> + } <nl> + } <nl> + <nl> + void nestedSwitches ( ) { <nl> + switch ( hashCode ( ) ) { <nl> + case 1 : <nl> + switch ( hashCode ( ) ) { / / causing NullPointerException in the past <nl> + case 1 : <nl> + } <nl> + default : / / violation - no fall through comment <nl> + } <nl> + } <nl> + <nl> + void nextedSwitches2 ( ) { <nl> + switch ( hashCode ( ) ) { <nl> + case 1 : <nl> + switch ( hashCode ( ) ) { } <nl> + case 2 : <nl> + System . lineSeparator ( ) ; <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + void ifWithoutBreak ( ) { <nl> + switch ( hashCode ( ) ) { <nl> + case 1 : <nl> + if ( true ) { <nl> + System . lineSeparator ( ) ; <nl> + } <nl> + case 2 : <nl> + System . lineSeparator ( ) ; <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + void noCommentAtTheEnd ( ) { <nl> + switch ( hashCode ( ) ) { <nl> + case 1 : System . lineSeparator ( ) ; <nl> + <nl> + case 2 : <nl> + System . lineSeparator ( ) ; <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + void tryResource ( ) throws Exception { <nl> + switch ( hashCode ( ) ) { <nl> + case 1 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + case 2 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + finally { <nl> + return ; <nl> + } <nl> + case 3 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + catch ( Exception ex ) { <nl> + return ; <nl> + } <nl> + case 4 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + finally { <nl> + return ; <nl> + } <nl> + case 5 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + finally { <nl> + } <nl> + case 6 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + catch ( Exception ex ) { <nl> + return ; <nl> + } <nl> + / / fallthru <nl> + case 7 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + / / fallthru <nl> + case 8 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + finally { <nl> + } <nl> + / / fallthru <nl> + case 9 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + } <nl> + catch ( Exception ex ) { <nl> + } <nl> + / / fallthru <nl> + case 10 : <nl> + try ( final Resource resource = new Resource ( ) ) { <nl> + return ; <nl> + } <nl> + catch ( Exception ex ) { <nl> + } <nl> + / / fallthru <nl> + default : <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + private static class Resource implements AutoCloseable { <nl> + @ Override <nl> + public void close ( ) throws Exception { <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerHasFinalizer . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerHasFinalizer . java <nl> new file mode 100644 <nl> index 0000000 . . f366987 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerHasFinalizer . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . nofinalizer ; <nl> + <nl> + public class InputNoFinalizerHasFinalizer <nl> + { <nl> + public void finalize ( ) <nl> + { <nl> + / / It ' s not enough to check if the METHOD _ DEF branch contains a PARAMETER _ DEF , as that would <nl> + / / treat this method as having a parameter . <nl> + Runnable runnable = new Runnable ( ) { <nl> + <nl> + public void run ( ) { <nl> + reallyFinalize ( " hi " ) ; <nl> + } <nl> + <nl> + / / generates a PARAMETER _ DEF AST inside the METHOD _ DEF of finalize ( ) <nl> + private void reallyFinalize ( String s ) <nl> + { <nl> + } <nl> + } ; <nl> + runnable . run ( ) ; <nl> + } <nl> + <nl> + / / should not be reported by NoFinalizer check <nl> + public void finalize ( String x ) <nl> + { <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / docs / releasenotes . html b / docs / releasenotes . html <nl> index babf878 . . 588c0c1 100644 <nl> - - - a / docs / releasenotes . html <nl> + + + b / docs / releasenotes . html <nl> @ @ - 100 , 6 + 100 , 9 @ @ <nl> < li class = " body " > Fixed several typos in documentation ( patch 848483 <nl> from Ville Skytta ( scop ) ) . < / li > <nl> <nl> + < li class = " body " > xmllogger . dtd is out - of - date <nl> + ( bug 847974 ) . < / li > <nl> + <nl> < / ul > <nl> <nl> < a name = " release3 _ 2 " > < / a > <nl> diff - - git a / docs / xmllogger . dtd b / docs / xmllogger . dtd <nl> index 4e2335f . . 3799cf2 100644 <nl> - - - a / docs / xmllogger . dtd <nl> + + + b / docs / xmllogger . dtd <nl> @ @ - 1 , 16 + 1 , 16 @ @ <nl> < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> < ! - - DTD for XMLLogger output - - > <nl> <nl> - < ! ELEMENT checkstyle ( file | error | exception ) * > <nl> + < ! ELEMENT checkstyle ( file ) * > <nl> <nl> - < ! ELEMENT file ( error | exception ) * > <nl> + < ! ELEMENT file ( error ) * > <nl> < ! ATTLIST file name CDATA # REQUIRED > <nl> <nl> < ! ELEMENT error EMPTY > <nl> < ! ATTLIST error <nl> line NMTOKEN # REQUIRED <nl> column NMTOKEN # IMPLIED <nl> + severity CDATA # REQUIRED <nl> message CDATA # REQUIRED <nl> + source CDATA # REQUIRED <nl> > <nl> - <nl> - < ! ELEMENT exception ( # PCDATA ) > <nl> \ No newline at end of file <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AuditListener . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AuditListener . java <nl> index 743c1a1 . . 4f62d4d 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AuditListener . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AuditListener . java <nl> @ @ - 28 , 9 + 28 , 7 @ @ import java . util . EventListener ; <nl> * auditStarted <nl> * ( fileStarted <nl> * ( addError ) * <nl> - * ( addException ) * <nl> * fileFinished ) * <nl> - * ( addException ) * <nl> * auditFinished <nl> * < / pre > <nl> * @ author < a href = " mailto : stephane . bailliez @ wanadoo . fr " > Stephane Bailliez < / a >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java 
 index 8283130 . . 0e5c973 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java 
 @ @ - 40 , 7 + 40 , 9 @ @ public class NoFinalizerCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " nofinalizer " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 51 , 7 + 53 , 7 @ @ public class NoFinalizerCheckTest 
 final String [ ] expected = { 
 " 5 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputHasFinalizer . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNoFinalizerHasFinalizer . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 60 , 6 + 62 , 6 @ @ public class NoFinalizerCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( NoFinalizerCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputFallThrough . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNoFinalizerFallThrough . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHasFinalizer . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHasFinalizer . java 
 deleted file mode 100644 
 index f09ee90 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHasFinalizer . java 
 + + + / dev / null 
 @ @ - 1 , 27 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - public class InputHasFinalizer 
 - { 
 - public void finalize ( ) 
 - { 
 - / / It ' s not enough to check if the METHOD _ DEF branch contains a PARAMETER _ DEF , as that would 
 - / / treat this method as having a parameter . 
 - Runnable runnable = new Runnable ( ) { 
 - 
 - public void run ( ) { 
 - reallyFinalize ( " hi " ) ; 
 - } 
 - 
 - / / generates a PARAMETER _ DEF AST inside the METHOD _ DEF of finalize ( ) 
 - private void reallyFinalize ( String s ) 
 - { 
 - } 
 - } ; 
 - runnable . run ( ) ; 
 - } 
 - 
 - / / should not be reported by NoFinalizer check 
 - public void finalize ( String x ) 
 - { 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java 
 new file mode 100644 
 index 0000000 . . 6d7f6e3 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerFallThrough . java 
 @ @ - 0 , 0 + 1 , 524 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . nofinalizer ; 
 + 
 + public class InputNoFinalizerFallThrough 
 + { 
 + void method ( int i , int j , boolean cond ) { 
 + while ( true ) { 
 + switch ( i ) { 
 + case 0 : / / no problem 
 + case 1 : 
 + i + + ; 
 + break ; 
 + case 2 : 
 + i + + ; 
 + case 3 : / / fall through ! ! ! 
 + i + + ; 
 + break ; 
 + case 4 : 
 + return ; 
 + case 5 : 
 + throw new RuntimeException ( " " ) ; 
 + case 6 : 
 + continue ; 
 + case 7 : { 
 + break ; 
 + } 
 + case 8 : { 
 + return ; 
 + } 
 + case 9 : { 
 + throw new RuntimeException ( " " ) ; 
 + } 
 + case 10 : { 
 + continue ; 
 + } 
 + case 11 : { 
 + i + + ; 
 + } 
 + case 12 : / / fall through ! ! ! 
 + if ( false ) 
 + break ; 
 + else 
 + break ; 
 + case 13 : 
 + if ( true ) { 
 + return ; 
 + } 
 + case 14 : 
 + if ( true ) { 
 + return ; 
 + } else { 
 + / / do nothing 
 + } 
 + case 15 : / / fall through ! ! ! 
 + do { 
 + System . identityHashCode ( " something " ) ; 
 + return ; 
 + } while ( true ) ; 
 + case 16 : 
 + for ( int j1 = 0 ; j1 < 10 ; j1 + + ) { 
 + String . valueOf ( " something " ) ; 
 + return ; 
 + } 
 + case 17 : 
 + while ( true ) 
 + throw new RuntimeException ( " " ) ; 
 + case 18 : 
 + while ( cond ) { 
 + break ; 
 + } 
 + case 19 : / / fall through ! ! ! 
 + try { 
 + i + + ; 
 + break ; 
 + } catch ( RuntimeException e ) { 
 + break ; 
 + } catch ( Error e ) { 
 + return ; 
 + } 
 + case 20 : 
 + try { 
 + i + + ; 
 + break ; 
 + } catch ( RuntimeException e ) { 
 + } catch ( Error e ) { 
 + return ; 
 + } 
 + case 21 : / / fall through ! ! ! 
 + try { 
 + i + + ; 
 + } catch ( RuntimeException e ) { 
 + i - - ; 
 + } finally { 
 + break ; 
 + } 
 + case 22 : 
 + try { 
 + i + + ; 
 + break ; 
 + } catch ( RuntimeException e ) { 
 + i - - ; 
 + break ; 
 + } finally { 
 + i + + ; 
 + } 
 + case 23 : 
 + switch ( j ) { 
 + case 1 : 
 + continue ; 
 + case 2 : 
 + return ; 
 + default : 
 + return ; 
 + } 
 + case 24 : 
 + switch ( j ) { 
 + case 1 : 
 + continue ; 
 + case 2 : 
 + break ; 
 + default : 
 + return ; 
 + } 
 + default : / / fall through ! ! ! 
 + / / this is the last label 
 + i + + ; 
 + } 
 + } 
 + } 
 + 
 + 
 + 
 + / * Like above , but all fall throughs with relief comment * / 
 + void methodFallThru ( int i , int j , boolean cond ) { 
 + while ( true ) { 
 + switch ( i ) { 
 + case - 1 : / / FALLTHRU 
 + 
 + case 0 : / / no problem 
 + case 1 : 
 + i + + ; 
 + break ; 
 + case 2 : 
 + i + + ; 
 + / / fallthru 
 + case 3 : 
 + i + + ; 
 + break ; 
 + case 4 : 
 + return ; 
 + case 5 : 
 + throw new RuntimeException ( " " ) ; 
 + case 6 : 
 + continue ; 
 + case 7 : { 
 + break ; 
 + } 
 + case 8 : { 
 + return ; 
 + } 
 + case 9 : { 
 + throw new RuntimeException ( " " ) ; 
 + } 
 + case 10 : { 
 + continue ; 
 + } 
 + case 11 : { 
 + i + + ; 
 + } 
 + / / fallthru 
 + case 12 : 
 + if ( false ) 
 + break ; 
 + else 
 + break ; 
 + case 13 : 
 + if ( true ) { 
 + return ; 
 + } 
 + case 14 : 
 + if ( true ) { 
 + return ; 
 + } else { 
 + / / do nothing 
 + } 
 + / / fallthru 
 + case 15 : 
 + do { 
 + System . identityHashCode ( " something " ) ; 
 + return ; 
 + } while ( true ) ; 
 + case 16 : 
 + for ( int j1 = 0 ; j1 < 10 ; j1 + + ) { 
 + String . valueOf ( " something " ) ; 
 + return ; 
 + } 
 + case 17 : 
 + while ( cond ) 
 + throw new RuntimeException ( " " ) ; 
 + case 18 : 
 + while ( cond ) { 
 + break ; 
 + } 
 + / / fallthru 
 + case 19 : 
 + try { 
 + i + + ; 
 + break ; 
 + } catch ( RuntimeException e ) { 
 + break ; 
 + } catch ( Error e ) { 
 + return ; 
 + } 
 + case 20 : 
 + try { 
 + i + + ; 
 + break ; 
 + } catch ( RuntimeException e ) { 
 + } catch ( Error e ) { 
 + return ; 
 + } 
 + / / fallthru 
 + case 21 : 
 + try { 
 + i + + ; 
 + } catch ( RuntimeException e ) { 
 + i - - ; 
 + } finally { 
 + break ; 
 + } 
 + case 22 : 
 + try { 
 + i + + ; 
 + break ; 
 + } catch ( RuntimeException e ) { 
 + i - - ; 
 + break ; 
 + } finally { 
 + i + + ; 
 + } 
 + 
 + case 23 : 
 + switch ( j ) { 
 + case 1 : 
 + continue ; 
 + case 2 : 
 + return ; 
 + default : 
 + return ; 
 + } 
 + case 24 : 
 + i + + ; 
 + / * fallthru * / case 25 : 
 + i + + ; 
 + break ; 
 + 
 + case 26 : 
 + switch ( j ) { 
 + case 1 : 
 + continue ; 
 + case 2 : 
 + break ; 
 + default : 
 + return ; 
 + } 
 + / / fallthru 
 + default : 
 + / / this is the last label 
 + i + + ; 
 + / / fallthru 
 + } 
 + } 
 + } 
 + 
 + / * Test relief comment . * / 
 + void methodFallThruCC ( int i , int j , boolean cond ) { 
 + while ( true ) { 
 + switch ( i ) { 
 + case 0 : 
 + i + + ; / / fallthru 
 + 
 + case 1 : 
 + i + + ; 
 + / / fallthru 
 + case 2 : { 
 + i + + ; 
 + } 
 + / / fallthru 
 + case 3 : 
 + i + + ; 
 + / * fallthru * / case 4 : 
 + break ; 
 + case 5 : 
 + i + + ; 
 + / / fallthru 
 + } 
 + } 
 + } 
 + 
 + / * Like above , but C - style comments . * / 
 + void methodFallThruC ( int i , int j , boolean cond ) { 
 + while ( true ) { 
 + switch ( i ) { 
 + case 0 : 
 + i + + ; / * fallthru * / 
 + 
 + case 1 : 
 + i + + ; 
 + / * fallthru * / 
 + case 2 : 
 + i + + ; 
 + / * fallthru * / case 3 : 
 + break ; 
 + case 4 : 
 + i + + ; 
 + / * fallthru * / 
 + } 
 + } 
 + } 
 + 
 + / * Like above , but C - style comments with no spaces . * / 
 + void methodFallThruC2 ( int i , int j , boolean cond ) { 
 + while ( true ) { 
 + switch ( i ) { 
 + case 0 : 
 + i + + ; / * fallthru * / 
 + 
 + case 1 : 
 + i + + ; 
 + / * fallthru * / 
 + case 2 : 
 + i + + ; 
 + / * fallthru * / case 3 : 
 + break ; 
 + case 4 : 
 + i + + ; 
 + / * fallthru * / 
 + } 
 + } 
 + } 
 + 
 + / * C - style comments with other default fallthru - comment . * / 
 + void methodFallThruCOtherWords ( int i , int j , boolean cond ) { 
 + while ( true ) { 
 + switch ( i ) { 
 + case 0 : 
 + i + + ; / * falls through * / 
 + 
 + case 1 : 
 + i + + ; 
 + / * falls through * / 
 + case 2 : 
 + i + + ; 
 + / * falls through * / case 3 : 
 + break ; 
 + case 4 : 
 + i + + ; 
 + / * falls through * / 
 + } 
 + } 
 + } 
 + 
 + / * C - style comments with custom fallthru - comment . * / 
 + void methodFallThruCCustomWords ( int i , int j , boolean cond ) { 
 + while ( true ) { 
 + switch ( i ) { 
 + case 0 : 
 + i + + ; / * Continue with next case * / 
 + 
 + case 1 : 
 + i + + ; 
 + / * Continue with next case * / 
 + case 2 : 
 + i + + ; 
 + / * Continue with next case * / case 3 : 
 + break ; 
 + case 4 : 
 + i + + ; 
 + / * Continue with next case * / 
 + } 
 + } 
 + } 
 + 
 + void methodFallThruLastCaseGroup ( int i , int j , boolean cond ) { 
 + while ( true ) { 
 + switch ( i ) { 
 + case 0 : 
 + i + + ; / / fallthru 
 + } 
 + switch ( i ) { 
 + case 0 : 
 + i + + ; 
 + / / fallthru 
 + } 
 + switch ( i ) { 
 + case 0 : 
 + i + + ; 
 + / * fallthru * / } 
 + } 
 + } 
 + 
 + void method1472228 ( int i ) { 
 + switch ( i ) { 
 + case 2 : 
 + / / do nothing 
 + break ; 
 + default : 
 + } 
 + } 
 + 
 + void nestedSwitches ( ) { 
 + switch ( hashCode ( ) ) { 
 + case 1 : 
 + switch ( hashCode ( ) ) { / / causing NullPointerException in the past 
 + case 1 : 
 + } 
 + default : / / violation - no fall through comment 
 + } 
 + } 
 + 
 + void nextedSwitches2 ( ) { 
 + switch ( hashCode ( ) ) { 
 + case 1 : 
 + switch ( hashCode ( ) ) { } 
 + case 2 : 
 + System . lineSeparator ( ) ; 
 + break ; 
 + } 
 + } 
 + 
 + void ifWithoutBreak ( ) { 
 + switch ( hashCode ( ) ) { 
 + case 1 : 
 + if ( true ) { 
 + System . lineSeparator ( ) ; 
 + } 
 + case 2 : 
 + System . lineSeparator ( ) ; 
 + break ; 
 + } 
 + } 
 + 
 + void noCommentAtTheEnd ( ) { 
 + switch ( hashCode ( ) ) { 
 + case 1 : System . lineSeparator ( ) ; 
 + 
 + case 2 : 
 + System . lineSeparator ( ) ; 
 + break ; 
 + } 
 + } 
 + 
 + void tryResource ( ) throws Exception { 
 + switch ( hashCode ( ) ) { 
 + case 1 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + case 2 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + finally { 
 + return ; 
 + } 
 + case 3 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + catch ( Exception ex ) { 
 + return ; 
 + } 
 + case 4 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + finally { 
 + return ; 
 + } 
 + case 5 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + finally { 
 + } 
 + case 6 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + catch ( Exception ex ) { 
 + return ; 
 + } 
 + / / fallthru 
 + case 7 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + / / fallthru 
 + case 8 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + finally { 
 + } 
 + / / fallthru 
 + case 9 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + } 
 + catch ( Exception ex ) { 
 + } 
 + / / fallthru 
 + case 10 : 
 + try ( final Resource resource = new Resource ( ) ) { 
 + return ; 
 + } 
 + catch ( Exception ex ) { 
 + } 
 + / / fallthru 
 + default : 
 + break ; 
 + } 
 + } 
 + 
 + private static class Resource implements AutoCloseable { 
 + @ Override 
 + public void close ( ) throws Exception { 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerHasFinalizer . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerHasFinalizer . java 
 new file mode 100644 
 index 0000000 . . f366987 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nofinalizer / InputNoFinalizerHasFinalizer . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . nofinalizer ; 
 + 
 + public class InputNoFinalizerHasFinalizer 
 + { 
 + public void finalize ( ) 
 + { 
 + / / It ' s not enough to check if the METHOD _ DEF branch contains a PARAMETER _ DEF , as that would 
 + / / treat this method as having a parameter . 
 + Runnable runnable = new Runnable ( ) { 
 + 
 + public void run ( ) { 
 + reallyFinalize ( " hi " ) ; 
 + } 
 + 
 + / / generates a PARAMETER _ DEF AST inside the METHOD _ DEF of finalize ( ) 
 + private void reallyFinalize ( String s ) 
 + { 
 + } 
 + } ; 
 + runnable . run ( ) ; 
 + } 
 + 
 + / / should not be reported by NoFinalizer check 
 + public void finalize ( String x ) 
 + { 
 + } 
 + }

NEAREST DIFF:
diff - - git a / docs / releasenotes . html b / docs / releasenotes . html 
 index babf878 . . 588c0c1 100644 
 - - - a / docs / releasenotes . html 
 + + + b / docs / releasenotes . html 
 @ @ - 100 , 6 + 100 , 9 @ @ 
 < li class = " body " > Fixed several typos in documentation ( patch 848483 
 from Ville Skytta ( scop ) ) . < / li > 
 
 + < li class = " body " > xmllogger . dtd is out - of - date 
 + ( bug 847974 ) . < / li > 
 + 
 < / ul > 
 
 < a name = " release3 _ 2 " > < / a > 
 diff - - git a / docs / xmllogger . dtd b / docs / xmllogger . dtd 
 index 4e2335f . . 3799cf2 100644 
 - - - a / docs / xmllogger . dtd 
 + + + b / docs / xmllogger . dtd 
 @ @ - 1 , 16 + 1 , 16 @ @ 
 < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 < ! - - DTD for XMLLogger output - - > 
 
 - < ! ELEMENT checkstyle ( file | error | exception ) * > 
 + < ! ELEMENT checkstyle ( file ) * > 
 
 - < ! ELEMENT file ( error | exception ) * > 
 + < ! ELEMENT file ( error ) * > 
 < ! ATTLIST file name CDATA # REQUIRED > 
 
 < ! ELEMENT error EMPTY > 
 < ! ATTLIST error 
 line NMTOKEN # REQUIRED 
 column NMTOKEN # IMPLIED 
 + severity CDATA # REQUIRED 
 message CDATA # REQUIRED 
 + source CDATA # REQUIRED 
 > 
 - 
 - < ! ELEMENT exception ( # PCDATA ) > 
 \ No newline at end of file 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AuditListener . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AuditListener . java 
 index 743c1a1 . . 4f62d4d 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AuditListener . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / AuditListener . java 
 @ @ - 28 , 9 + 28 , 7 @ @ import java . util . EventListener ; 
 * auditStarted 
 * ( fileStarted 
 * ( addError ) * 
 - * ( addException ) * 
 * fileFinished ) * 
 - * ( addException ) * 
 * auditFinished 
 * < / pre > 
 * @ author < a href = " mailto : stephane . bailliez @ wanadoo . fr " > Stephane Bailliez < / a >
