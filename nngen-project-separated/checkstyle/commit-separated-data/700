BLEU SCORE: 0.04484347726929453

TEST MSG: Issue # 4587 : Moved all resources for TrailingComment check
GENERATED MSG: Issue # 4165 : Split and Organize Checkstyle inputs by Test for checks in coding package : IllegalToken

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java <nl> index d3b610d . . 9022f76 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java <nl> @ @ - 45 , 7 + 45 , 10 @ @ public class TrailingCommentCheckTest extends BaseCheckTestSupport { <nl> <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> - return super . getPath ( " checks " + File . separator + filename ) ; <nl> + return super . getPath ( " checks " + File . separator <nl> + + " misc " + File . separator <nl> + + " trailingcomment " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputTrailingComment . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputTrailingComment . java <nl> deleted file mode 100644 <nl> index d6cdeb1 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputTrailingComment . java <nl> + + + / dev / null <nl> @ @ - 1 , 30 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks ; <nl> - <nl> - public class InputTrailingComment { <nl> - int i ; / / don ' t use trailing comments : ) <nl> - / / it fine to have comment w / o any statement <nl> - / * good c - style comment . * / <nl> - int j ; / * bad c - style comment . * / <nl> - void method1 ( ) { / * some c - style multi - line <nl> - comment * / <nl> - Runnable r = ( new Runnable ( ) { <nl> - public void run ( ) { <nl> - } <nl> - } ) ; / * we should allow this * / <nl> - } / / we should allow this <nl> - / * <nl> - Let ' s check multi - line comments . <nl> - * / <nl> - / * c - style * / / / cpp - style <nl> - / * c - style 1 * / / * c - style 2 * / <nl> - <nl> - void method2 ( long ms / * we should ignore this * / ) { <nl> - / * comment before text * / int z ; <nl> - / * int y * / int y / * * / ; <nl> - } <nl> - <nl> - / * * <nl> - * comment with trailing space <nl> - * / <nl> - final static public String NAME = " Some Name " ; / / NOI18N <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / trailingcomment / InputTrailingComment . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / trailingcomment / InputTrailingComment . java <nl> new file mode 100644 <nl> index 0000000 . . 55b0100 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / trailingcomment / InputTrailingComment . java <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . misc . trailingcomment ; <nl> + <nl> + public class InputTrailingComment { <nl> + int i ; / / don ' t use trailing comments : ) <nl> + / / it fine to have comment w / o any statement <nl> + / * good c - style comment . * / <nl> + int j ; / * bad c - style comment . * / <nl> + void method1 ( ) { / * some c - style multi - line <nl> + comment * / <nl> + Runnable r = ( new Runnable ( ) { <nl> + public void run ( ) { <nl> + } <nl> + } ) ; / * we should allow this * / <nl> + } / / we should allow this <nl> + / * <nl> + Let ' s check multi - line comments . <nl> + * / <nl> + / * c - style * / / / cpp - style <nl> + / * c - style 1 * / / * c - style 2 * / <nl> + <nl> + void method2 ( long ms / * we should ignore this * / ) { <nl> + / * comment before text * / int z ; <nl> + / * int y * / int y / * * / ; <nl> + } <nl> + <nl> + / * * <nl> + * comment with trailing space <nl> + * / <nl> + final static public String NAME = " Some Name " ; / / NOI18N <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java <nl> index 5179821 . . 7dc5ec1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java <nl> @ @ - 29 , 9 + 29 , 57 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * < / p > <nl> * < p > <nl> * Rationale : Putting this comma in make is easier to change the <nl> - * order of the elements or add new elements on the end . <nl> + * order of the elements or add new elements on the end . Main benefit of a trailing <nl> + * comma is that when you add new entry to an array , no surrounding lines are changed . <nl> * < / p > <nl> * < p > <nl> + * The check demands a comma at the end if neither left nor right curly braces <nl> + * are on the same line as the last element of the array . <nl> + * < / p > <nl> + * < pre > <nl> + * return new int [ ] { 0 } ; <nl> + * return new int [ ] { 0 <nl> + * } ; <nl> + * return new int [ ] { <nl> + * 0 } ; <nl> + * < / pre > <nl> + * < pre > <nl> + * { <nl> + * 100000000000000000000 , <nl> + * 200000000000000000000 , / / OK <nl> + * } <nl> + * <nl> + * { <nl> + * 100000000000000000000 , <nl> + * 200000000000000000000 , <nl> + * 300000000000000000000 , / / Just this line added , no other changes <nl> + * } <nl> + * < / pre > <nl> + * < p > <nl> + * If closing brace is on the same line as training comma , this benefit is gone <nl> + * ( as the Check does not demand a certain location of curly braces the following <nl> + * two cases will not produce a violation ) : <nl> + * < / p > <nl> + * < pre > <nl> + * { 100000000000000000000 , <nl> + * 200000000000000000000 , } / / Trailing comma not needed , line needs to be modified anyway <nl> + * <nl> + * { 100000000000000000000 , <nl> + * 200000000000000000000 , / / Modified line <nl> + * 300000000000000000000 , } / / Added line <nl> + * < / pre > <nl> + * < p > <nl> + * If opening brace is on the same line as training comma there ' s also ( more arguable ) problem : <nl> + * < / p > <nl> + * < pre > <nl> + * { 100000000000000000000 , / / Line cannot be just duplicated to slightly modify entry <nl> + * } <nl> + * <nl> + * { 100000000000000000000 , <nl> + * 100000000000000000001 , / / More work needed to duplicate <nl> + * } <nl> + * < / pre > <nl> + * < p > <nl> * An example of how to configure the check is : <nl> * < / p > <nl> * < pre > <nl> @ @ - 65 , 15 + 113 , 14 @ @ public class ArrayTrailingCommaCheck extends AbstractCheck { <nl> @ Override <nl> public void visitToken ( DetailAST arrayInit ) { <nl> final DetailAST rcurly = arrayInit . findFirstToken ( TokenTypes . RCURLY ) ; <nl> + final DetailAST previousSibling = rcurly . getPreviousSibling ( ) ; <nl> <nl> - / / if curlies are on the same line <nl> - / / or array is empty then check nothing <nl> if ( arrayInit . getLineNo ( ) ! = rcurly . getLineNo ( ) <nl> - & & arrayInit . getChildCount ( ) ! = 1 ) { <nl> - final DetailAST prev = rcurly . getPreviousSibling ( ) ; <nl> - if ( prev . getType ( ) ! = TokenTypes . COMMA ) { <nl> - log ( rcurly . getLineNo ( ) , MSG _ KEY ) ; <nl> - } <nl> + & & arrayInit . getChildCount ( ) ! = 1 <nl> + & & rcurly . getLineNo ( ) ! = previousSibling . getLineNo ( ) <nl> + & & arrayInit . getLineNo ( ) ! = previousSibling . getLineNo ( ) <nl> + & & previousSibling . getType ( ) ! = TokenTypes . COMMA ) { <nl> + log ( rcurly . getLineNo ( ) , MSG _ KEY ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java <nl> index 37d4502 . . 6d71600 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java <nl> @ @ - 45 , 7 + 45 , 6 @ @ public class ArrayTrailingCommaCheckTest <nl> createCheckConfig ( ArrayTrailingCommaCheck . class ) ; <nl> final String [ ] expected = { <nl> " 17 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 34 : " + getCheckMessage ( MSG _ KEY ) , <nl> " 37 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputArrayTrailingComma . java " ) , expected ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java <nl> index 44f696b . . f0160b6 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java <nl> @ @ - 38 , 4 + 38 , 24 @ @ public class InputArrayTrailingComma <nl> <nl> int [ ] e1 = new int [ ] { <nl> } ; <nl> + <nl> + int [ ] f1 = new int [ ] { 0 , 1 <nl> + } ; <nl> + <nl> + int [ ] [ ] f2 = new int [ ] [ ] <nl> + { <nl> + { 1 , <nl> + 2 , } , <nl> + } ; <nl> + <nl> + int [ ] f3 = new int [ ] { <nl> + 1 , <nl> + 2 <nl> + , <nl> + } ; <nl> + <nl> + int [ ] f4 = new int [ ] { <nl> + 1 , <nl> + 2 <nl> + , } ; <nl> } <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index bb3e155 . . 7b31e70 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 36 , 17 + 36 , 58 @ @ int [ ] a = new int [ ] <nl> < / source > <nl> <nl> < p > <nl> - The check allows leaving out the comma at the end if both the left and right curly brackets <nl> - are on the same line . <nl> + The check demands a comma at the end if neither left nor right curly braces <nl> + are on the same line as the last element of the array . <nl> < / p > <nl> < source > <nl> return new int [ ] { 0 } ; <nl> + return new int [ ] { 0 <nl> + } ; <nl> + return new int [ ] { <nl> + 0 } ; <nl> < / source > <nl> <nl> < p > <nl> Rationale : Putting this comma in makes it easier to change the order <nl> - of the elements or add new elements on the end . <nl> + of the elements or add new elements on the end . Main benefit of a trailing <nl> + comma is that when you add new entry to an array , no surrounding lines are changed . <nl> < / p > <nl> + < source > <nl> + { <nl> + 100000000000000000000 , <nl> + 200000000000000000000 , / / OK <nl> + } <nl> + <nl> + { <nl> + 100000000000000000000 , <nl> + 200000000000000000000 , <nl> + 300000000000000000000 , / / Just this line added , no other changes <nl> + } <nl> + < / source > <nl> + < p > <nl> + If closing brace is on the same line as training comma , this benefit is gone <nl> + ( as the Check does not demand a certain location of curly braces the following <nl> + two cases will not produce a violation ) : <nl> + < / p > <nl> + < source > <nl> + { 100000000000000000000 , <nl> + 200000000000000000000 , } / / Trailing comma not needed , line needs to be modified anyway <nl> + <nl> + { 100000000000000000000 , <nl> + 200000000000000000000 , / / Modified line <nl> + 300000000000000000000 , } / / Added line <nl> + < / source > <nl> + < p > <nl> + If opening brace is on the same line as training comma there ' s also ( more arguable ) problem : <nl> + < / p > <nl> + < source > <nl> + { 100000000000000000000 , / / Line cannot be just duplicated to slightly modify entry <nl> + } <nl> + <nl> + { 100000000000000000000 , <nl> + 100000000000000000001 , / / More work needed to duplicate <nl> + } <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Examples " > <nl> @ @ - 73 , 7 + 114 , 24 @ @ return new int [ ] { 0 } ; <nl> { 0 . 5 , 2 . 3 , 1 . 1 , } , / / no violation <nl> { 1 . 7 , 1 . 9 , 0 . 6 } , <nl> { 0 . 8 , 7 . 4 , 6 . 5 } <nl> - } ; / / violation <nl> + } ; / / violation as previous line misses a comma <nl> + <nl> + char [ ] chars = { ' a ' , ' b ' , ' c ' <nl> + } ; / / no violation <nl> + <nl> + String [ ] letters = { <nl> + " a " , " b " , " c " } ; / / no violation <nl> + <nl> + int [ ] a1 = new int [ ] { <nl> + 1 , <nl> + 2 <nl> + , <nl> + } ; / / no violation <nl> + <nl> + int [ ] a2 = new int [ ] { <nl> + 1 , <nl> + 2 <nl> + , } ; / / no violation <nl> < / source > <nl> < / subsection > <nl>

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java 
 index d3b610d . . 9022f76 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java 
 @ @ - 45 , 7 + 45 , 10 @ @ public class TrailingCommentCheckTest extends BaseCheckTestSupport { 
 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 - return super . getPath ( " checks " + File . separator + filename ) ; 
 + return super . getPath ( " checks " + File . separator 
 + + " misc " + File . separator 
 + + " trailingcomment " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputTrailingComment . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputTrailingComment . java 
 deleted file mode 100644 
 index d6cdeb1 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputTrailingComment . java 
 + + + / dev / null 
 @ @ - 1 , 30 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks ; 
 - 
 - public class InputTrailingComment { 
 - int i ; / / don ' t use trailing comments : ) 
 - / / it fine to have comment w / o any statement 
 - / * good c - style comment . * / 
 - int j ; / * bad c - style comment . * / 
 - void method1 ( ) { / * some c - style multi - line 
 - comment * / 
 - Runnable r = ( new Runnable ( ) { 
 - public void run ( ) { 
 - } 
 - } ) ; / * we should allow this * / 
 - } / / we should allow this 
 - / * 
 - Let ' s check multi - line comments . 
 - * / 
 - / * c - style * / / / cpp - style 
 - / * c - style 1 * / / * c - style 2 * / 
 - 
 - void method2 ( long ms / * we should ignore this * / ) { 
 - / * comment before text * / int z ; 
 - / * int y * / int y / * * / ; 
 - } 
 - 
 - / * * 
 - * comment with trailing space 
 - * / 
 - final static public String NAME = " Some Name " ; / / NOI18N 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / trailingcomment / InputTrailingComment . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / trailingcomment / InputTrailingComment . java 
 new file mode 100644 
 index 0000000 . . 55b0100 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / trailingcomment / InputTrailingComment . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . misc . trailingcomment ; 
 + 
 + public class InputTrailingComment { 
 + int i ; / / don ' t use trailing comments : ) 
 + / / it fine to have comment w / o any statement 
 + / * good c - style comment . * / 
 + int j ; / * bad c - style comment . * / 
 + void method1 ( ) { / * some c - style multi - line 
 + comment * / 
 + Runnable r = ( new Runnable ( ) { 
 + public void run ( ) { 
 + } 
 + } ) ; / * we should allow this * / 
 + } / / we should allow this 
 + / * 
 + Let ' s check multi - line comments . 
 + * / 
 + / * c - style * / / / cpp - style 
 + / * c - style 1 * / / * c - style 2 * / 
 + 
 + void method2 ( long ms / * we should ignore this * / ) { 
 + / * comment before text * / int z ; 
 + / * int y * / int y / * * / ; 
 + } 
 + 
 + / * * 
 + * comment with trailing space 
 + * / 
 + final static public String NAME = " Some Name " ; / / NOI18N 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java 
 index 5179821 . . 7dc5ec1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheck . java 
 @ @ - 29 , 9 + 29 , 57 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * < / p > 
 * < p > 
 * Rationale : Putting this comma in make is easier to change the 
 - * order of the elements or add new elements on the end . 
 + * order of the elements or add new elements on the end . Main benefit of a trailing 
 + * comma is that when you add new entry to an array , no surrounding lines are changed . 
 * < / p > 
 * < p > 
 + * The check demands a comma at the end if neither left nor right curly braces 
 + * are on the same line as the last element of the array . 
 + * < / p > 
 + * < pre > 
 + * return new int [ ] { 0 } ; 
 + * return new int [ ] { 0 
 + * } ; 
 + * return new int [ ] { 
 + * 0 } ; 
 + * < / pre > 
 + * < pre > 
 + * { 
 + * 100000000000000000000 , 
 + * 200000000000000000000 , / / OK 
 + * } 
 + * 
 + * { 
 + * 100000000000000000000 , 
 + * 200000000000000000000 , 
 + * 300000000000000000000 , / / Just this line added , no other changes 
 + * } 
 + * < / pre > 
 + * < p > 
 + * If closing brace is on the same line as training comma , this benefit is gone 
 + * ( as the Check does not demand a certain location of curly braces the following 
 + * two cases will not produce a violation ) : 
 + * < / p > 
 + * < pre > 
 + * { 100000000000000000000 , 
 + * 200000000000000000000 , } / / Trailing comma not needed , line needs to be modified anyway 
 + * 
 + * { 100000000000000000000 , 
 + * 200000000000000000000 , / / Modified line 
 + * 300000000000000000000 , } / / Added line 
 + * < / pre > 
 + * < p > 
 + * If opening brace is on the same line as training comma there ' s also ( more arguable ) problem : 
 + * < / p > 
 + * < pre > 
 + * { 100000000000000000000 , / / Line cannot be just duplicated to slightly modify entry 
 + * } 
 + * 
 + * { 100000000000000000000 , 
 + * 100000000000000000001 , / / More work needed to duplicate 
 + * } 
 + * < / pre > 
 + * < p > 
 * An example of how to configure the check is : 
 * < / p > 
 * < pre > 
 @ @ - 65 , 15 + 113 , 14 @ @ public class ArrayTrailingCommaCheck extends AbstractCheck { 
 @ Override 
 public void visitToken ( DetailAST arrayInit ) { 
 final DetailAST rcurly = arrayInit . findFirstToken ( TokenTypes . RCURLY ) ; 
 + final DetailAST previousSibling = rcurly . getPreviousSibling ( ) ; 
 
 - / / if curlies are on the same line 
 - / / or array is empty then check nothing 
 if ( arrayInit . getLineNo ( ) ! = rcurly . getLineNo ( ) 
 - & & arrayInit . getChildCount ( ) ! = 1 ) { 
 - final DetailAST prev = rcurly . getPreviousSibling ( ) ; 
 - if ( prev . getType ( ) ! = TokenTypes . COMMA ) { 
 - log ( rcurly . getLineNo ( ) , MSG _ KEY ) ; 
 - } 
 + & & arrayInit . getChildCount ( ) ! = 1 
 + & & rcurly . getLineNo ( ) ! = previousSibling . getLineNo ( ) 
 + & & arrayInit . getLineNo ( ) ! = previousSibling . getLineNo ( ) 
 + & & previousSibling . getType ( ) ! = TokenTypes . COMMA ) { 
 + log ( rcurly . getLineNo ( ) , MSG _ KEY ) ; 
 } 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java 
 index 37d4502 . . 6d71600 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ArrayTrailingCommaCheckTest . java 
 @ @ - 45 , 7 + 45 , 6 @ @ public class ArrayTrailingCommaCheckTest 
 createCheckConfig ( ArrayTrailingCommaCheck . class ) ; 
 final String [ ] expected = { 
 " 17 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 34 : " + getCheckMessage ( MSG _ KEY ) , 
 " 37 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputArrayTrailingComma . java " ) , expected ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java 
 index 44f696b . . f0160b6 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / arraytrailingcomma / InputArrayTrailingComma . java 
 @ @ - 38 , 4 + 38 , 24 @ @ public class InputArrayTrailingComma 
 
 int [ ] e1 = new int [ ] { 
 } ; 
 + 
 + int [ ] f1 = new int [ ] { 0 , 1 
 + } ; 
 + 
 + int [ ] [ ] f2 = new int [ ] [ ] 
 + { 
 + { 1 , 
 + 2 , } , 
 + } ; 
 + 
 + int [ ] f3 = new int [ ] { 
 + 1 , 
 + 2 
 + , 
 + } ; 
 + 
 + int [ ] f4 = new int [ ] { 
 + 1 , 
 + 2 
 + , } ; 
 } 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index bb3e155 . . 7b31e70 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 36 , 17 + 36 , 58 @ @ int [ ] a = new int [ ] 
 < / source > 
 
 < p > 
 - The check allows leaving out the comma at the end if both the left and right curly brackets 
 - are on the same line . 
 + The check demands a comma at the end if neither left nor right curly braces 
 + are on the same line as the last element of the array . 
 < / p > 
 < source > 
 return new int [ ] { 0 } ; 
 + return new int [ ] { 0 
 + } ; 
 + return new int [ ] { 
 + 0 } ; 
 < / source > 
 
 < p > 
 Rationale : Putting this comma in makes it easier to change the order 
 - of the elements or add new elements on the end . 
 + of the elements or add new elements on the end . Main benefit of a trailing 
 + comma is that when you add new entry to an array , no surrounding lines are changed . 
 < / p > 
 + < source > 
 + { 
 + 100000000000000000000 , 
 + 200000000000000000000 , / / OK 
 + } 
 + 
 + { 
 + 100000000000000000000 , 
 + 200000000000000000000 , 
 + 300000000000000000000 , / / Just this line added , no other changes 
 + } 
 + < / source > 
 + < p > 
 + If closing brace is on the same line as training comma , this benefit is gone 
 + ( as the Check does not demand a certain location of curly braces the following 
 + two cases will not produce a violation ) : 
 + < / p > 
 + < source > 
 + { 100000000000000000000 , 
 + 200000000000000000000 , } / / Trailing comma not needed , line needs to be modified anyway 
 + 
 + { 100000000000000000000 , 
 + 200000000000000000000 , / / Modified line 
 + 300000000000000000000 , } / / Added line 
 + < / source > 
 + < p > 
 + If opening brace is on the same line as training comma there ' s also ( more arguable ) problem : 
 + < / p > 
 + < source > 
 + { 100000000000000000000 , / / Line cannot be just duplicated to slightly modify entry 
 + } 
 + 
 + { 100000000000000000000 , 
 + 100000000000000000001 , / / More work needed to duplicate 
 + } 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Examples " > 
 @ @ - 73 , 7 + 114 , 24 @ @ return new int [ ] { 0 } ; 
 { 0 . 5 , 2 . 3 , 1 . 1 , } , / / no violation 
 { 1 . 7 , 1 . 9 , 0 . 6 } , 
 { 0 . 8 , 7 . 4 , 6 . 5 } 
 - } ; / / violation 
 + } ; / / violation as previous line misses a comma 
 + 
 + char [ ] chars = { ' a ' , ' b ' , ' c ' 
 + } ; / / no violation 
 + 
 + String [ ] letters = { 
 + " a " , " b " , " c " } ; / / no violation 
 + 
 + int [ ] a1 = new int [ ] { 
 + 1 , 
 + 2 
 + , 
 + } ; / / no violation 
 + 
 + int [ ] a2 = new int [ ] { 
 + 1 , 
 + 2 
 + , } ; / / no violation 
 < / source > 
 < / subsection > 

