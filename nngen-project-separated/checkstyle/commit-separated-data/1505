BLEU SCORE: 0.37817904276524744

TEST MSG: Issue # 2482 : Exclude lines with package in LineLength check
GENERATED MSG: Issue # 2433 : Exclude lines with imports in LineLength check

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheck . java <nl> index c8ccf23 . . e2f388c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheck . java <nl> @ @ - 37 , 7 + 37 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < / p > <nl> * <nl> * < p > <nl> - * Import statements ( lines matching pattern { @ code ^ import . * } ) are not verified by this check . <nl> + * Package statements and import statements ( lines matching pattern <nl> + * { @ code ^ ( package | import ) . * } ) , and are not verified by this check . <nl> * < / p > <nl> * < p > <nl> * The default maximum allowable line length is 80 characters . To change the <nl> @ @ - 84 , 8 + 85 , 8 @ @ public class LineLengthCheck extends Check { <nl> / * * Default maximum number of columns in a line . * / <nl> private static final int DEFAULT _ MAX _ COLUMNS = 80 ; <nl> <nl> - / * * Pattern matching import and import static statements . * / <nl> - private static final Pattern IMPORT _ PATTERN = Pattern . compile ( " ^ import . * " ) ; <nl> + / * * Patterns matching package , import , and import static statements . * / <nl> + private static final Pattern IGNORE _ PATTERN = Pattern . compile ( " ^ ( package | import ) . * " ) ; <nl> <nl> / * * The maximum number of columns in a line . * / <nl> private int max = DEFAULT _ MAX _ COLUMNS ; <nl> @ @ - 124 , 7 + 125 , 7 @ @ public class LineLengthCheck extends Check { <nl> final int realLength = CommonUtils . lengthExpandedTabs ( <nl> line , line . length ( ) , getTabWidth ( ) ) ; <nl> <nl> - if ( realLength > max & & ! IMPORT _ PATTERN . matcher ( line ) . find ( ) <nl> + if ( realLength > max & & ! IGNORE _ PATTERN . matcher ( line ) . find ( ) <nl> & & ! ignorePattern . matcher ( line ) . find ( ) ) { <nl> log ( i + 1 , MSG _ KEY , max , realLength ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java <nl> index 2e0f206 . . ec447e8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java <nl> @ @ - 38 , 6 + 38 , 12 @ @ public class LineLengthCheckTest extends BaseCheckTestSupport { <nl> + " sizes " + File . separator + filename ) ; <nl> } <nl> <nl> + @ Override <nl> + protected String getNonCompilablePath ( String filename ) throws IOException { <nl> + return super . getNonCompilablePath ( " checks " + File . separator <nl> + + " sizes " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> final LineLengthCheck checkObj = new LineLengthCheck ( ) ; <nl> @ @ - 89 , 4 + 95 , 15 @ @ public class LineLengthCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> verify ( checkConfig , getPath ( " InputLongImportStatements . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void shouldNotLogLongPackageStatements ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( LineLengthCheck . class ) ; <nl> + checkConfig . addAttribute ( " max " , " 80 " ) ; <nl> + final String [ ] expected = { <nl> + " 6 : " + getCheckMessage ( MSG _ KEY , 80 , 88 ) , <nl> + } ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputLongPackageStatement . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / sizes / InputLongPackageStatement . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / sizes / InputLongPackageStatement . java <nl> new file mode 100644 <nl> index 0000000 . . a14b064 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / sizes / InputLongPackageStatement . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . nameofcompany . nameofdivision . nameofproject . systemtests . parallel . areaoftest . featuretested . flowtested ; <nl> + <nl> + public class InputLongImportStatements { <nl> + @ Override <nl> + public String toString ( ) { <nl> + return " This is very long line that should be logged because it is not package " ; <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ sizes . xml b / src / xdocs / config _ sizes . xml <nl> index 64bd09a . . 9936f6e 100644 <nl> - - - a / src / xdocs / config _ sizes . xml <nl> + + + b / src / xdocs / config _ sizes . xml <nl> @ @ - 245 , 7 + 245 , 7 @ @ <nl> property < code > tabWidth < / code > for < code > LineLength < / code > alone . <nl> < / li > <nl> < li > <nl> - Import statements ( lines matching pattern < code > ^ import . * < / code > ) are not verified by <nl> + Package and import statements ( lines matching pattern < code > ^ ( package | import ) . * < / code > ) are not verified by <nl> this check . <nl> < / li > <nl> < / ul >
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java <nl> index 6d981f2 . . 4de4169 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java <nl> @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . design ; <nl> import static com . puppycrawl . tools . checkstyle . checks . design . FinalClassCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> @ @ - 30 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class FinalClassCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " design " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputFinalClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputFinalClass . java <nl> deleted file mode 100644 <nl> index 1af79cb . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputFinalClass . java <nl> + + + / dev / null <nl> @ @ - 1 , 125 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2003 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - public class InputFinalClass <nl> - { <nl> - private InputFinalClass ( ) { } <nl> - } <nl> - <nl> - final class test2 { } <nl> - class test3 <nl> - { <nl> - class test4 <nl> - { <nl> - private test4 ( ) { } <nl> - } <nl> - } <nl> - <nl> - class test5 <nl> - { <nl> - private test5 ( ) { } <nl> - test5 ( int i ) { } <nl> - } <nl> - <nl> - class test6 <nl> - { <nl> - public test6 ( ) { } <nl> - } <nl> - <nl> - / / Typesafe enum with operation <nl> - / / abstract classes cannot be final , see bug # 837012 <nl> - abstract class Operation <nl> - { <nl> - abstract double eval ( double a , double b ) ; <nl> - <nl> - public static final Operation PLUS = <nl> - 	 new Operation ( " + " ) <nl> - 	 { <nl> - 	 double eval ( double a , double b ) <nl> - 	 { <nl> - 	 	 return a + b ; <nl> - 	 } <nl> - 	 } ; <nl> - <nl> - public static final Operation MINUS = <nl> - 	 new Operation ( " - " ) <nl> - 	 { <nl> - 	 double eval ( double a , double b ) <nl> - 	 { <nl> - 	 	 return a - b ; <nl> - 	 } <nl> - 	 } ; <nl> - <nl> - private String _ name ; <nl> - private Operation ( String name ) <nl> - { <nl> - 	 this . _ name = name ; <nl> - } <nl> - } <nl> - <nl> - / / Typesafe enum with operation <nl> - / / abstract classes cannot be final , see bug # 837012 <nl> - interface Evaluatable <nl> - { <nl> - double eval ( double a , double b ) ; <nl> - } <nl> - <nl> - / / abstract class without it ' s own abstract method decl <nl> - abstract class Operation2 implements Evaluatable <nl> - { <nl> - <nl> - public static final Operation2 PLUS = <nl> - 	 new Operation2 ( " + " ) <nl> - 	 { <nl> - 	 public double eval ( double a , double b ) <nl> - 	 { <nl> - 	 	 return a + b ; <nl> - 	 } <nl> - 	 } ; <nl> - <nl> - public static final Operation2 MINUS = <nl> - 	 new Operation2 ( " - " ) <nl> - 	 { <nl> - 	 public double eval ( double a , double b ) <nl> - 	 { <nl> - 	 	 return a - b ; <nl> - 	 } <nl> - 	 } ; <nl> - <nl> - private String _ name ; <nl> - private Operation2 ( String name ) <nl> - { <nl> - 	 this . _ name = name ; <nl> - } <nl> - } <nl> - <nl> - enum testenum1 <nl> - { <nl> - A , B ; <nl> - testenum1 ( ) { } <nl> - } <nl> - <nl> - enum testenum2 <nl> - { <nl> - A , B ; <nl> - <nl> - public static class someinnerClass <nl> - { <nl> - private someinnerClass ( ) { } <nl> - } <nl> - } <nl> - <nl> - interface TestInterface { <nl> - class SomeClass { <nl> - private SomeClass ( ) { } <nl> - } <nl> - } <nl> - <nl> - @ interface SomeAnnotation { <nl> - class SomeClass { <nl> - private SomeClass ( ) { } <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputFinalClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputFinalClass . java <nl> new file mode 100644 <nl> index 0000000 . . 96cbc79 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputFinalClass . java <nl> @ @ - 0 , 0 + 1 , 125 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2003 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + public class InputFinalClass <nl> + { <nl> + private InputFinalClass ( ) { } <nl> + } <nl> + <nl> + final class test2 { } <nl> + class test3 <nl> + { <nl> + class test4 <nl> + { <nl> + private test4 ( ) { } <nl> + } <nl> + } <nl> + <nl> + class test5 <nl> + { <nl> + private test5 ( ) { } <nl> + test5 ( int i ) { } <nl> + } <nl> + <nl> + class test6 <nl> + { <nl> + public test6 ( ) { } <nl> + } <nl> + <nl> + / / Typesafe enum with operation <nl> + / / abstract classes cannot be final , see bug # 837012 <nl> + abstract class Operation <nl> + { <nl> + abstract double eval ( double a , double b ) ; <nl> + <nl> + public static final Operation PLUS = <nl> + 	 new Operation ( " + " ) <nl> + 	 { <nl> + 	 double eval ( double a , double b ) <nl> + 	 { <nl> + 	 	 return a + b ; <nl> + 	 } <nl> + 	 } ; <nl> + <nl> + public static final Operation MINUS = <nl> + 	 new Operation ( " - " ) <nl> + 	 { <nl> + 	 double eval ( double a , double b ) <nl> + 	 { <nl> + 	 	 return a - b ; <nl> + 	 } <nl> + 	 } ; <nl> + <nl> + private String _ name ; <nl> + private Operation ( String name ) <nl> + { <nl> + 	 this . _ name = name ; <nl> + } <nl> + } <nl> + <nl> + / / Typesafe enum with operation <nl> + / / abstract classes cannot be final , see bug # 837012 <nl> + interface Evaluatable <nl> + { <nl> + double eval ( double a , double b ) ; <nl> + } <nl> + <nl> + / / abstract class without it ' s own abstract method decl <nl> + abstract class Operation2 implements Evaluatable <nl> + { <nl> + <nl> + public static final Operation2 PLUS = <nl> + 	 new Operation2 ( " + " ) <nl> + 	 { <nl> + 	 public double eval ( double a , double b ) <nl> + 	 { <nl> + 	 	 return a + b ; <nl> + 	 } <nl> + 	 } ; <nl> + <nl> + public static final Operation2 MINUS = <nl> + 	 new Operation2 ( " - " ) <nl> + 	 { <nl> + 	 public double eval ( double a , double b ) <nl> + 	 { <nl> + 	 	 return a - b ; <nl> + 	 } <nl> + 	 } ; <nl> + <nl> + private String _ name ; <nl> + private Operation2 ( String name ) <nl> + { <nl> + 	 this . _ name = name ; <nl> + } <nl> + } <nl> + <nl> + enum testenum1 <nl> + { <nl> + A , B ; <nl> + testenum1 ( ) { } <nl> + } <nl> + <nl> + enum testenum2 <nl> + { <nl> + A , B ; <nl> + <nl> + public static class someinnerClass <nl> + { <nl> + private someinnerClass ( ) { } <nl> + } <nl> + } <nl> + <nl> + interface TestInterface { <nl> + class SomeClass { <nl> + private SomeClass ( ) { } <nl> + } <nl> + } <nl> + <nl> + @ interface SomeAnnotation { <nl> + class SomeClass { <nl> + private SomeClass ( ) { } <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheck . java 
 index c8ccf23 . . e2f388c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheck . java 
 @ @ - 37 , 7 + 37 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < / p > 
 * 
 * < p > 
 - * Import statements ( lines matching pattern { @ code ^ import . * } ) are not verified by this check . 
 + * Package statements and import statements ( lines matching pattern 
 + * { @ code ^ ( package | import ) . * } ) , and are not verified by this check . 
 * < / p > 
 * < p > 
 * The default maximum allowable line length is 80 characters . To change the 
 @ @ - 84 , 8 + 85 , 8 @ @ public class LineLengthCheck extends Check { 
 / * * Default maximum number of columns in a line . * / 
 private static final int DEFAULT _ MAX _ COLUMNS = 80 ; 
 
 - / * * Pattern matching import and import static statements . * / 
 - private static final Pattern IMPORT _ PATTERN = Pattern . compile ( " ^ import . * " ) ; 
 + / * * Patterns matching package , import , and import static statements . * / 
 + private static final Pattern IGNORE _ PATTERN = Pattern . compile ( " ^ ( package | import ) . * " ) ; 
 
 / * * The maximum number of columns in a line . * / 
 private int max = DEFAULT _ MAX _ COLUMNS ; 
 @ @ - 124 , 7 + 125 , 7 @ @ public class LineLengthCheck extends Check { 
 final int realLength = CommonUtils . lengthExpandedTabs ( 
 line , line . length ( ) , getTabWidth ( ) ) ; 
 
 - if ( realLength > max & & ! IMPORT _ PATTERN . matcher ( line ) . find ( ) 
 + if ( realLength > max & & ! IGNORE _ PATTERN . matcher ( line ) . find ( ) 
 & & ! ignorePattern . matcher ( line ) . find ( ) ) { 
 log ( i + 1 , MSG _ KEY , max , realLength ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java 
 index 2e0f206 . . ec447e8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / LineLengthCheckTest . java 
 @ @ - 38 , 6 + 38 , 12 @ @ public class LineLengthCheckTest extends BaseCheckTestSupport { 
 + " sizes " + File . separator + filename ) ; 
 } 
 
 + @ Override 
 + protected String getNonCompilablePath ( String filename ) throws IOException { 
 + return super . getNonCompilablePath ( " checks " + File . separator 
 + + " sizes " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 final LineLengthCheck checkObj = new LineLengthCheck ( ) ; 
 @ @ - 89 , 4 + 95 , 15 @ @ public class LineLengthCheckTest extends BaseCheckTestSupport { 
 } ; 
 verify ( checkConfig , getPath ( " InputLongImportStatements . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void shouldNotLogLongPackageStatements ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( LineLengthCheck . class ) ; 
 + checkConfig . addAttribute ( " max " , " 80 " ) ; 
 + final String [ ] expected = { 
 + " 6 : " + getCheckMessage ( MSG _ KEY , 80 , 88 ) , 
 + } ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputLongPackageStatement . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / sizes / InputLongPackageStatement . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / sizes / InputLongPackageStatement . java 
 new file mode 100644 
 index 0000000 . . a14b064 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / sizes / InputLongPackageStatement . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . nameofcompany . nameofdivision . nameofproject . systemtests . parallel . areaoftest . featuretested . flowtested ; 
 + 
 + public class InputLongImportStatements { 
 + @ Override 
 + public String toString ( ) { 
 + return " This is very long line that should be logged because it is not package " ; 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ sizes . xml b / src / xdocs / config _ sizes . xml 
 index 64bd09a . . 9936f6e 100644 
 - - - a / src / xdocs / config _ sizes . xml 
 + + + b / src / xdocs / config _ sizes . xml 
 @ @ - 245 , 7 + 245 , 7 @ @ 
 property < code > tabWidth < / code > for < code > LineLength < / code > alone . 
 < / li > 
 < li > 
 - Import statements ( lines matching pattern < code > ^ import . * < / code > ) are not verified by 
 + Package and import statements ( lines matching pattern < code > ^ ( package | import ) . * < / code > ) are not verified by 
 this check . 
 < / li > 
 < / ul >

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java 
 index 6d981f2 . . 4de4169 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / FinalClassCheckTest . java 
 @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . design ; 
 import static com . puppycrawl . tools . checkstyle . checks . design . FinalClassCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 @ @ - 30 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class FinalClassCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " design " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputFinalClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputFinalClass . java 
 deleted file mode 100644 
 index 1af79cb . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputFinalClass . java 
 + + + / dev / null 
 @ @ - 1 , 125 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2003 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - public class InputFinalClass 
 - { 
 - private InputFinalClass ( ) { } 
 - } 
 - 
 - final class test2 { } 
 - class test3 
 - { 
 - class test4 
 - { 
 - private test4 ( ) { } 
 - } 
 - } 
 - 
 - class test5 
 - { 
 - private test5 ( ) { } 
 - test5 ( int i ) { } 
 - } 
 - 
 - class test6 
 - { 
 - public test6 ( ) { } 
 - } 
 - 
 - / / Typesafe enum with operation 
 - / / abstract classes cannot be final , see bug # 837012 
 - abstract class Operation 
 - { 
 - abstract double eval ( double a , double b ) ; 
 - 
 - public static final Operation PLUS = 
 - 	 new Operation ( " + " ) 
 - 	 { 
 - 	 double eval ( double a , double b ) 
 - 	 { 
 - 	 	 return a + b ; 
 - 	 } 
 - 	 } ; 
 - 
 - public static final Operation MINUS = 
 - 	 new Operation ( " - " ) 
 - 	 { 
 - 	 double eval ( double a , double b ) 
 - 	 { 
 - 	 	 return a - b ; 
 - 	 } 
 - 	 } ; 
 - 
 - private String _ name ; 
 - private Operation ( String name ) 
 - { 
 - 	 this . _ name = name ; 
 - } 
 - } 
 - 
 - / / Typesafe enum with operation 
 - / / abstract classes cannot be final , see bug # 837012 
 - interface Evaluatable 
 - { 
 - double eval ( double a , double b ) ; 
 - } 
 - 
 - / / abstract class without it ' s own abstract method decl 
 - abstract class Operation2 implements Evaluatable 
 - { 
 - 
 - public static final Operation2 PLUS = 
 - 	 new Operation2 ( " + " ) 
 - 	 { 
 - 	 public double eval ( double a , double b ) 
 - 	 { 
 - 	 	 return a + b ; 
 - 	 } 
 - 	 } ; 
 - 
 - public static final Operation2 MINUS = 
 - 	 new Operation2 ( " - " ) 
 - 	 { 
 - 	 public double eval ( double a , double b ) 
 - 	 { 
 - 	 	 return a - b ; 
 - 	 } 
 - 	 } ; 
 - 
 - private String _ name ; 
 - private Operation2 ( String name ) 
 - { 
 - 	 this . _ name = name ; 
 - } 
 - } 
 - 
 - enum testenum1 
 - { 
 - A , B ; 
 - testenum1 ( ) { } 
 - } 
 - 
 - enum testenum2 
 - { 
 - A , B ; 
 - 
 - public static class someinnerClass 
 - { 
 - private someinnerClass ( ) { } 
 - } 
 - } 
 - 
 - interface TestInterface { 
 - class SomeClass { 
 - private SomeClass ( ) { } 
 - } 
 - } 
 - 
 - @ interface SomeAnnotation { 
 - class SomeClass { 
 - private SomeClass ( ) { } 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputFinalClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputFinalClass . java 
 new file mode 100644 
 index 0000000 . . 96cbc79 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputFinalClass . java 
 @ @ - 0 , 0 + 1 , 125 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2003 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + public class InputFinalClass 
 + { 
 + private InputFinalClass ( ) { } 
 + } 
 + 
 + final class test2 { } 
 + class test3 
 + { 
 + class test4 
 + { 
 + private test4 ( ) { } 
 + } 
 + } 
 + 
 + class test5 
 + { 
 + private test5 ( ) { } 
 + test5 ( int i ) { } 
 + } 
 + 
 + class test6 
 + { 
 + public test6 ( ) { } 
 + } 
 + 
 + / / Typesafe enum with operation 
 + / / abstract classes cannot be final , see bug # 837012 
 + abstract class Operation 
 + { 
 + abstract double eval ( double a , double b ) ; 
 + 
 + public static final Operation PLUS = 
 + 	 new Operation ( " + " ) 
 + 	 { 
 + 	 double eval ( double a , double b ) 
 + 	 { 
 + 	 	 return a + b ; 
 + 	 } 
 + 	 } ; 
 + 
 + public static final Operation MINUS = 
 + 	 new Operation ( " - " ) 
 + 	 { 
 + 	 double eval ( double a , double b ) 
 + 	 { 
 + 	 	 return a - b ; 
 + 	 } 
 + 	 } ; 
 + 
 + private String _ name ; 
 + private Operation ( String name ) 
 + { 
 + 	 this . _ name = name ; 
 + } 
 + } 
 + 
 + / / Typesafe enum with operation 
 + / / abstract classes cannot be final , see bug # 837012 
 + interface Evaluatable 
 + { 
 + double eval ( double a , double b ) ; 
 + } 
 + 
 + / / abstract class without it ' s own abstract method decl 
 + abstract class Operation2 implements Evaluatable 
 + { 
 + 
 + public static final Operation2 PLUS = 
 + 	 new Operation2 ( " + " ) 
 + 	 { 
 + 	 public double eval ( double a , double b ) 
 + 	 { 
 + 	 	 return a + b ; 
 + 	 } 
 + 	 } ; 
 + 
 + public static final Operation2 MINUS = 
 + 	 new Operation2 ( " - " ) 
 + 	 { 
 + 	 public double eval ( double a , double b ) 
 + 	 { 
 + 	 	 return a - b ; 
 + 	 } 
 + 	 } ; 
 + 
 + private String _ name ; 
 + private Operation2 ( String name ) 
 + { 
 + 	 this . _ name = name ; 
 + } 
 + } 
 + 
 + enum testenum1 
 + { 
 + A , B ; 
 + testenum1 ( ) { } 
 + } 
 + 
 + enum testenum2 
 + { 
 + A , B ; 
 + 
 + public static class someinnerClass 
 + { 
 + private someinnerClass ( ) { } 
 + } 
 + } 
 + 
 + interface TestInterface { 
 + class SomeClass { 
 + private SomeClass ( ) { } 
 + } 
 + } 
 + 
 + @ interface SomeAnnotation { 
 + class SomeClass { 
 + private SomeClass ( ) { } 
 + } 
 + } 
 \ No newline at end of file
