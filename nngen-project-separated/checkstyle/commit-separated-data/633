BLEU SCORE: 0.05439330544349821

TEST MSG: Issue # 4707 : fix all violations of BooleanParameter idea check except those addressed in separate task
GENERATED MSG: Issue # 985 : Fix PMD violations for ShortVariable rule

TEST DIFF (one line): diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index 2b1697a . . acf9b92 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 196 , 7 + 196 , 7 @ @ <nl> < option name = " onlyWarnOnBaseMethods " value = " true " / > <nl> < option name = " questionString " value = " is , can , has , should , could , will , shall , check , contains , equals , add , put , remove , starts , ends , are , was , matches , start , must , accept " / > <nl> < / inspection _ tool > <nl> - < inspection _ tool class = " BooleanParameter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> + < inspection _ tool class = " BooleanParameter " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < ! - - even it is always negated , it is better than possible negation / inversion of negated term - - > <nl> < inspection _ tool class = " BooleanVariableAlwaysNegated " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " BoxingBoxedValue " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java <nl> index 2a97a8f . . c27e8f1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java <nl> @ @ - 41 , 6 + 41 , 20 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> * / <nl> public final class AstTreeStringPrinter { <nl> <nl> + / * * <nl> + * Enum to be used for test if comments should be printed . <nl> + * / <nl> + public enum PrintOptions { <nl> + / * * <nl> + * Comments has to be printed . <nl> + * / <nl> + WITH _ COMMENTS , <nl> + / * * <nl> + * Comments has NOT to be printed . <nl> + * / <nl> + WITHOUT _ COMMENTS <nl> + } <nl> + <nl> / * * Newline pattern . * / <nl> private static final Pattern NEWLINE = Pattern . compile ( " \ n " ) ; <nl> / * * Return pattern . * / <nl> @ @ - 64 , 7 + 78 , 7 @ @ public final class AstTreeStringPrinter { <nl> * @ throws IOException if the file could not be read . <nl> * @ throws CheckstyleException if the file is not a Java source . <nl> * / <nl> - public static String printFileAst ( File file , boolean withComments ) <nl> + public static String printFileAst ( File file , PrintOptions withComments ) <nl> throws IOException , CheckstyleException { <nl> return printTree ( parseFile ( file , withComments ) ) ; <nl> } <nl> @ @ - 78 , 7 + 92 , 7 @ @ public final class AstTreeStringPrinter { <nl> * / <nl> public static String printJavaAndJavadocTree ( File file ) <nl> throws IOException , CheckstyleException { <nl> - final DetailAST tree = parseFile ( file , true ) ; <nl> + final DetailAST tree = parseFile ( file , PrintOptions . WITH _ COMMENTS ) ; <nl> return printJavaAndJavadocTree ( tree ) ; <nl> } <nl> <nl> @ @ - 130 , 7 + 144 , 8 @ @ public final class AstTreeStringPrinter { <nl> * @ return the AST of the file in String form . <nl> * @ throws CheckstyleException if the file is not a Java source . <nl> * / <nl> - public static String printAst ( FileText text , boolean withComments ) throws CheckstyleException { <nl> + public static String printAst ( FileText text , <nl> + PrintOptions withComments ) throws CheckstyleException { <nl> return printTree ( parseFileText ( text , withComments ) ) ; <nl> } <nl> <nl> @ @ - 216 , 7 + 231 , 7 @ @ public final class AstTreeStringPrinter { <nl> * @ throws IOException if the file could not be read . <nl> * @ throws CheckstyleException if the file is not a Java source . <nl> * / <nl> - private static DetailAST parseFile ( File file , boolean withComments ) <nl> + private static DetailAST parseFile ( File file , PrintOptions withComments ) <nl> throws IOException , CheckstyleException { <nl> final FileText text = new FileText ( file . getAbsoluteFile ( ) , <nl> System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; <nl> @ @ - 230 , 12 + 245 , 12 @ @ public final class AstTreeStringPrinter { <nl> * @ return the root node of the parse tree . <nl> * @ throws CheckstyleException if the file is not a Java source . <nl> * / <nl> - private static DetailAST parseFileText ( FileText text , boolean withComments ) <nl> + private static DetailAST parseFileText ( FileText text , PrintOptions withComments ) <nl> throws CheckstyleException { <nl> final FileContents contents = new FileContents ( text ) ; <nl> final DetailAST result ; <nl> try { <nl> - if ( withComments ) { <nl> + if ( withComments = = PrintOptions . WITH _ COMMENTS ) { <nl> result = TreeWalker . parseWithComments ( contents ) ; <nl> } <nl> else { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> index 64f4805 . . 55e7235 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> @ @ - 205 , 6 + 205 , 7 @ @ public final class ConfigurationLoader { <nl> * ' ignore ' should be omitted , { @ code false } otherwise <nl> * @ return the check configurations <nl> * @ throws CheckstyleException if an error occurs <nl> + * @ noinspection BooleanParameter <nl> * / <nl> public static Configuration loadConfiguration ( String config , <nl> PropertyResolver overridePropsResolver , boolean omitIgnoredModules ) <nl> @ @ - 223 , 6 + 224 , 7 @ @ public final class ConfigurationLoader { <nl> * @ param threadModeSettings the thread mode configuration <nl> * @ return the check configurations <nl> * @ throws CheckstyleException if an error occurs <nl> + * @ noinspection BooleanParameter <nl> * / <nl> public static Configuration loadConfiguration ( String config , <nl> PropertyResolver overridePropsResolver , <nl> @ @ - 251 , 6 + 253 , 7 @ @ public final class ConfigurationLoader { <nl> * { @ link # loadConfiguration ( InputSource , PropertyResolver , boolean ) <nl> * version using an InputSource } <nl> * should be used instead <nl> + * @ noinspection BooleanParameter <nl> * / <nl> @ Deprecated <nl> public static Configuration loadConfiguration ( InputStream configStream , <nl> @ @ - 271 , 6 + 274 , 7 @ @ public final class ConfigurationLoader { <nl> * ' ignore ' should be omitted , { @ code false } otherwise <nl> * @ return the check configurations <nl> * @ throws CheckstyleException if an error occurs <nl> + * @ noinspection BooleanParameter <nl> * / <nl> public static Configuration loadConfiguration ( InputSource configSource , <nl> PropertyResolver overridePropsResolver , boolean omitIgnoredModules ) <nl> @ @ - 291 , 6 + 295 , 7 @ @ public final class ConfigurationLoader { <nl> * @ param threadModeSettings the thread mode configuration <nl> * @ return the check configurations <nl> * @ throws CheckstyleException if an error occurs <nl> + * @ noinspection BooleanParameter <nl> * / <nl> public static Configuration loadConfiguration ( InputSource configSource , <nl> PropertyResolver overridePropsResolver , <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> index 3a14fcc . . 5810354 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> @ @ - 76 , 6 + 76 , 7 @ @ public class DefaultLogger extends AutomaticBean implements AuditListener { <nl> * Creates a new { @ code DefaultLogger } instance . <nl> * @ param outputStream where to log infos and errors <nl> * @ param closeStreamsAfterUse if oS should be closed in auditFinished ( ) <nl> + * @ noinspection BooleanParameter <nl> * / <nl> public DefaultLogger ( OutputStream outputStream , boolean closeStreamsAfterUse ) { <nl> / / no need to close oS twice <nl> @ @ - 88 , 6 + 89 , 7 @ @ public class DefaultLogger extends AutomaticBean implements AuditListener { <nl> * @ param closeInfoAfterUse auditFinished should close infoStream . <nl> * @ param errorStream the { @ code OutputStream } for error messages . <nl> * @ param closeErrorAfterUse auditFinished should close errorStream <nl> + * @ noinspection BooleanParameter <nl> * / <nl> public DefaultLogger ( OutputStream infoStream , <nl> boolean closeInfoAfterUse , <nl> @ @ - 105 , 6 + 107 , 7 @ @ public class DefaultLogger extends AutomaticBean implements AuditListener { <nl> * @ param errorStream the { @ code OutputStream } for error messages <nl> * @ param closeErrorAfterUse auditFinished should close errorStream <nl> * @ param messageFormatter formatter for the log message . <nl> + * @ noinspection BooleanParameter <nl> * / <nl> public DefaultLogger ( OutputStream infoStream , <nl> boolean closeInfoAfterUse , <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index df2e0d2 . . 22215ac 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 390 , 12 + 390 , 14 @ @ public final class Main { <nl> if ( commandLine . hasOption ( OPTION _ T _ NAME ) ) { <nl> / / print AST <nl> final File file = config . files . get ( 0 ) ; <nl> - final String stringAst = AstTreeStringPrinter . printFileAst ( file , false ) ; <nl> + final String stringAst = AstTreeStringPrinter . printFileAst ( file , <nl> + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; <nl> System . out . print ( stringAst ) ; <nl> } <nl> else if ( commandLine . hasOption ( OPTION _ CAPITAL _ T _ NAME ) ) { <nl> final File file = config . files . get ( 0 ) ; <nl> - final String stringAst = AstTreeStringPrinter . printFileAst ( file , true ) ; <nl> + final String stringAst = AstTreeStringPrinter . printFileAst ( file , <nl> + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; <nl> System . out . print ( stringAst ) ; <nl> } <nl> else if ( commandLine . hasOption ( OPTION _ J _ NAME ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> index 19818f5 . . db7be51 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> @ @ - 67 , 6 + 67 , 7 @ @ public class XMLLogger <nl> * Sets the output to a defined stream . <nl> * @ param outputStream the stream to write logs to . <nl> * @ param closeStream close oS in auditFinished <nl> + * @ noinspection BooleanParameter <nl> * / <nl> public XMLLogger ( OutputStream outputStream , boolean closeStream ) { <nl> setOutputStream ( outputStream ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java <nl> index f6a6b1b . . 72b7487 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java <nl> @ @ - 147 , 6 + 147 , 7 @ @ public class IllegalTokenTextCheck <nl> / * * <nl> * Set whether or not the match is case sensitive . <nl> * @ param caseInsensitive true if the match is case insensitive . <nl> + * @ noinspection BooleanParameter <nl> * / <nl> public void setIgnoreCase ( boolean caseInsensitive ) { <nl> if ( caseInsensitive ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java <nl> index c22cefc . . 433802d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java <nl> @ @ - 353 , 7 + 353 , 8 @ @ public abstract class AbstractExpressionHandler { <nl> protected void checkWrappingIndentation ( DetailAST firstNode , DetailAST lastNode , <nl> int wrappedIndentLevel , int startIndent , boolean ignoreFirstLine ) { <nl> indentCheck . getLineWrappingHandler ( ) . checkIndentation ( firstNode , lastNode , <nl> - wrappedIndentLevel , startIndent , ignoreFirstLine ) ; <nl> + wrappedIndentLevel , startIndent , <nl> + LineWrappingHandler . LineWrappingOptions . ofBoolean ( ignoreFirstLine ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> index 9ee72d8 . . 6ad00c6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> @ @ - 39 , 6 + 39 , 36 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> public class LineWrappingHandler { <nl> <nl> / * * <nl> + * Enum to be used for test if first line ' s indentation should be checked or not . <nl> + * / <nl> + public enum LineWrappingOptions { <nl> + / * * <nl> + * First line ' s indentation should NOT be checked . <nl> + * / <nl> + IGNORE _ FIRST _ LINE , <nl> + / * * <nl> + * First line ' s indentation should be checked . <nl> + * / <nl> + NONE ; <nl> + <nl> + / * * <nl> + * Builds enum value from boolean . <nl> + * @ param val value . <nl> + * @ return enum instance . <nl> + * <nl> + * @ noinspection BooleanParameter <nl> + * / <nl> + public static LineWrappingOptions ofBoolean ( boolean val ) { <nl> + if ( val ) { <nl> + return IGNORE _ FIRST _ LINE ; <nl> + } <nl> + else { <nl> + return NONE ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * The current instance of { @ code IndentationCheck } class using this <nl> * handler . This field used to get access to private fields of <nl> * IndentationCheck instance . <nl> @ @ - 74 , 7 + 104 , 8 @ @ public class LineWrappingHandler { <nl> * @ param indentLevel Indentation all wrapped lines should use . <nl> * / <nl> public void checkIndentation ( DetailAST firstNode , DetailAST lastNode , int indentLevel ) { <nl> - checkIndentation ( firstNode , lastNode , indentLevel , - 1 , true ) ; <nl> + checkIndentation ( firstNode , lastNode , indentLevel , <nl> + - 1 , LineWrappingOptions . IGNORE _ FIRST _ LINE ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 87 , 7 + 118 , 7 @ @ public class LineWrappingHandler { <nl> * @ param ignoreFirstLine Test if first line ' s indentation should be checked or not . <nl> * / <nl> public void checkIndentation ( DetailAST firstNode , DetailAST lastNode , int indentLevel , <nl> - int startIndent , boolean ignoreFirstLine ) { <nl> + int startIndent , LineWrappingOptions ignoreFirstLine ) { <nl> final NavigableMap < Integer , DetailAST > firstNodesOnLines = collectFirstNodes ( firstNode , <nl> lastNode ) ; <nl> <nl> @ @ - 110 , 7 + 141 , 7 @ @ public class LineWrappingHandler { <nl> } <nl> } <nl> <nl> - if ( ignoreFirstLine ) { <nl> + if ( ignoreFirstLine = = LineWrappingOptions . IGNORE _ FIRST _ LINE ) { <nl> / / First node should be removed because it was already checked before . <nl> firstNodesOnLines . remove ( firstNodesOnLines . firstKey ( ) ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java <nl> index 2b73218 . . 083419f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java <nl> @ @ - 202 , 7 + 202 , 7 @ @ public final class DetectorOptions { <nl> * Specifies whether to ignore case when matching and returns Builder object . <nl> * @ param val whether to ignore case when matching . <nl> * @ return Builder object . <nl> - * @ noinspection ReturnOfInnerClass <nl> + * @ noinspection ReturnOfInnerClass , BooleanParameter <nl> * / <nl> public Builder ignoreCase ( boolean val ) { <nl> ignoreCase = val ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> index dd8c7d7 . . b2e4b09 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java <nl> @ @ - 62 , 6 + 62 , 20 @ @ public class SuppressionCommentFilter <nl> extends AutomaticBean <nl> implements TreeWalkerFilter { <nl> <nl> + / * * <nl> + * Enum to be used for switching checkstyle reporting for tags . <nl> + * / <nl> + public enum TagType { <nl> + / * * <nl> + * Switch reporting on . <nl> + * / <nl> + ON , <nl> + / * * <nl> + * Switch reporting off . <nl> + * / <nl> + OFF <nl> + } <nl> + <nl> / * * Turns checkstyle reporting off . * / <nl> private static final String DEFAULT _ OFF _ FORMAT = " CHECKSTYLE : OFF " ; <nl> <nl> @ @ - 183 , 7 + 197 , 7 @ @ public class SuppressionCommentFilter <nl> tagSuppressions ( ) ; <nl> } <nl> final Tag matchTag = findNearestMatch ( event ) ; <nl> - accepted = matchTag = = null | | matchTag . isReportingOn ( ) ; <nl> + accepted = matchTag = = null | | matchTag . getTagType ( ) = = TagType . ON ; <nl> } <nl> return accepted ; <nl> } <nl> @ @ - 253 , 12 + 267 , 12 @ @ public class SuppressionCommentFilter <nl> private void tagCommentLine ( String text , int line , int column ) { <nl> final Matcher offMatcher = offCommentFormat . matcher ( text ) ; <nl> if ( offMatcher . find ( ) ) { <nl> - addTag ( offMatcher . group ( 0 ) , line , column , false ) ; <nl> + addTag ( offMatcher . group ( 0 ) , line , column , TagType . OFF ) ; <nl> } <nl> else { <nl> final Matcher onMatcher = onCommentFormat . matcher ( text ) ; <nl> if ( onMatcher . find ( ) ) { <nl> - addTag ( onMatcher . group ( 0 ) , line , column , true ) ; <nl> + addTag ( onMatcher . group ( 0 ) , line , column , TagType . ON ) ; <nl> } <nl> } <nl> } <nl> @ @ - 270 , 7 + 284 , 7 @ @ public class SuppressionCommentFilter <nl> * @ param column the column number of the tag . <nl> * @ param reportingOn { @ code true } if the tag turns checkstyle reporting on . <nl> * / <nl> - private void addTag ( String text , int line , int column , boolean reportingOn ) { <nl> + private void addTag ( String text , int line , int column , TagType reportingOn ) { <nl> final Tag tag = new Tag ( line , column , text , reportingOn , this ) ; <nl> tags . add ( tag ) ; <nl> } <nl> @ @ - 292 , 7 + 306 , 7 @ @ public class SuppressionCommentFilter <nl> private final int column ; <nl> <nl> / * * Determines whether the suppression turns checkstyle reporting on . * / <nl> - private final boolean reportingOn ; <nl> + private final TagType tagType ; <nl> <nl> / * * The parsed check regexp , expanded for the text of this tag . * / <nl> private final Pattern tagCheckRegexp ; <nl> @ @ - 305 , 22 + 319 , 22 @ @ public class SuppressionCommentFilter <nl> * @ param line the line number . <nl> * @ param column the column number . <nl> * @ param text the text of the suppression . <nl> - * @ param reportingOn { @ code true } if the tag turns checkstyle reporting . <nl> + * @ param tagType { @ code ON } if the tag turns checkstyle reporting . <nl> * @ param filter the { @ code SuppressionCommentFilter } with the context <nl> * @ throws IllegalArgumentException if unable to parse expanded text . <nl> * / <nl> - public Tag ( int line , int column , String text , boolean reportingOn , <nl> + public Tag ( int line , int column , String text , TagType tagType , <nl> SuppressionCommentFilter filter ) { <nl> this . line = line ; <nl> this . column = column ; <nl> this . text = text ; <nl> - this . reportingOn = reportingOn ; <nl> + this . tagType = tagType ; <nl> <nl> / / Expand regexp for check and message <nl> / / Does not intern Patterns with Utils . getPattern ( ) <nl> String format = " " ; <nl> try { <nl> - if ( reportingOn ) { <nl> + if ( this . tagType = = TagType . ON ) { <nl> format = CommonUtils . fillTemplateWithStringsByRegexp ( <nl> filter . checkFormat , text , filter . onCommentFormat ) ; <nl> tagCheckRegexp = Pattern . compile ( format ) ; <nl> @ @ - 374 , 10 + 388 , 10 @ @ public class SuppressionCommentFilter <nl> / * * <nl> * Determines whether the suppression turns checkstyle reporting on or <nl> * off . <nl> - * @ return { @ code true } if the suppression turns reporting on . <nl> + * @ return { @ code ON } if the suppression turns reporting on . <nl> * / <nl> - public boolean isReportingOn ( ) { <nl> - return reportingOn ; <nl> + public TagType getTagType ( ) { <nl> + return tagType ; <nl> } <nl> <nl> / * * <nl> @ @ - 411 , 7 + 425 , 7 @ @ public class SuppressionCommentFilter <nl> final Tag tag = ( Tag ) other ; <nl> return Objects . equals ( line , tag . line ) <nl> & & Objects . equals ( column , tag . column ) <nl> - & & Objects . equals ( reportingOn , tag . reportingOn ) <nl> + & & Objects . equals ( tagType , tag . tagType ) <nl> & & Objects . equals ( text , tag . text ) <nl> & & Objects . equals ( tagCheckRegexp , tag . tagCheckRegexp ) <nl> & & Objects . equals ( tagMessageRegexp , tag . tagMessageRegexp ) ; <nl> @ @ - 419 , 7 + 433 , 7 @ @ public class SuppressionCommentFilter <nl> <nl> @ Override <nl> public int hashCode ( ) { <nl> - return Objects . hash ( text , line , column , reportingOn , tagCheckRegexp , tagMessageRegexp ) ; <nl> + return Objects . hash ( text , line , column , tagType , tagCheckRegexp , tagMessageRegexp ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 452 , 7 + 466 , 7 @ @ public class SuppressionCommentFilter <nl> return " Tag [ text = ' " + text + ' \ ' ' <nl> + " , line = " + line <nl> + " , column = " + column <nl> - + " , on = " + reportingOn <nl> + + " , type = " + tagType <nl> + " , tagCheckRegexp = " + tagCheckRegexp <nl> + " , tagMessageRegexp = " + tagMessageRegexp + ' ] ' ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java <nl> index 84b463b . . 0b41cbf 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java <nl> @ @ - 55 , 7 + 55 , 8 @ @ public abstract class AbstractTreeTestSupport extends AbstractPathTestSupport { <nl> * @ throws Exception if exception occurs during verification . <nl> * / <nl> protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName , <nl> - boolean withComments ) throws Exception { <nl> + AstTreeStringPrinter . PrintOptions withComments ) <nl> + throws Exception { <nl> final String expectedContents = readFile ( expectedTextPrintFileName ) ; <nl> <nl> final String actualContents = AstTreeStringPrinter . printFileAst ( <nl> @ @ - 67 , 7 + 68 , 8 @ @ public abstract class AbstractTreeTestSupport extends AbstractPathTestSupport { <nl> <nl> / * * <nl> * Performs verification of the given text ast tree representation . <nl> - * This implementation uses { @ link BaseCheckTestSupport # verifyAst ( String , String , boolean ) } <nl> + * This implementation uses <nl> + * { @ link BaseCheckTestSupport # verifyAst ( String , String , AstTreeStringPrinter . PrintOptions ) } <nl> * method inside . <nl> * @ param expectedTextPrintFileName expected text ast tree representation . <nl> * @ param actualJavaFileName actual text ast tree representation . <nl> @ @ - 75 , 7 + 77 , 8 @ @ public abstract class AbstractTreeTestSupport extends AbstractPathTestSupport { <nl> * / <nl> protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName ) <nl> throws Exception { <nl> - verifyAst ( expectedTextPrintFileName , actualJavaFileName , false ) ; <nl> + verifyAst ( expectedTextPrintFileName , actualJavaFileName , <nl> + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java <nl> index 51d950e . . 23da551 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java <nl> @ @ - 49 , 7 + 49 , 8 @ @ public class AstTreeStringPrinterTest extends AbstractTreeTestSupport { <nl> public void testParseFileThrowable ( ) throws Exception { <nl> try { <nl> AstTreeStringPrinter . printFileAst ( <nl> - new File ( getNonCompilablePath ( " InputAstTreeStringPrinter . java " ) ) , false ) ; <nl> + new File ( getNonCompilablePath ( " InputAstTreeStringPrinter . java " ) ) , <nl> + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; <nl> Assert . fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> @ @ - 63 , 7 + 64 , 8 @ @ public class AstTreeStringPrinterTest extends AbstractTreeTestSupport { <nl> @ Test <nl> public void testParseFile ( ) throws Exception { <nl> verifyAst ( getPath ( " expectedInputAstTreeStringPrinter . txt " ) , <nl> - getPath ( " InputAstTreeStringPrinterComments . java " ) , false ) ; <nl> + getPath ( " InputAstTreeStringPrinterComments . java " ) , <nl> + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 71 , 7 + 73 , 8 @ @ public class AstTreeStringPrinterTest extends AbstractTreeTestSupport { <nl> final FileText text = new FileText ( <nl> new File ( getPath ( " InputAstTreeStringPrinterComments . java " ) ) . getAbsoluteFile ( ) , <nl> System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; <nl> - final String actual = AstTreeStringPrinter . printAst ( text , false ) ; <nl> + final String actual = AstTreeStringPrinter . printAst ( text , <nl> + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; <nl> final String expected = new String ( Files . readAllBytes ( Paths . get ( <nl> getPath ( " expectedInputAstTreeStringPrinter . txt " ) ) ) , StandardCharsets . UTF _ 8 ) ; <nl> <nl> @ @ - 81 , 7 + 84 , 8 @ @ public class AstTreeStringPrinterTest extends AbstractTreeTestSupport { <nl> @ Test <nl> public void testParseFileWithComments ( ) throws Exception { <nl> verifyAst ( getPath ( " expectedInputAstTreeStringPrinterComments . txt " ) , <nl> - getPath ( " InputAstTreeStringPrinterComments . java " ) , true ) ; <nl> + getPath ( " InputAstTreeStringPrinterComments . java " ) , <nl> + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 113 , 12 + 117 , 14 @ @ public class AstTreeStringPrinterTest extends AbstractTreeTestSupport { <nl> @ Test <nl> public void testAstTreeBlockComments ( ) throws Exception { <nl> verifyAst ( getPath ( " InputFullOfBlockCommentsAst . txt " ) , <nl> - getPath ( " InputFullOfBlockComments . java " ) , true ) ; <nl> + getPath ( " InputFullOfBlockComments . java " ) , <nl> + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; <nl> } <nl> <nl> @ Test <nl> public void testAstTreeSingleLineComments ( ) throws Exception { <nl> verifyAst ( getPath ( " InputFullOfSinglelineCommentsAst . txt " ) , <nl> - getPath ( " InputFullOfSinglelineComments . java " ) , true ) ; <nl> + getPath ( " InputFullOfSinglelineComments . java " ) , <nl> + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> index a1e40a6 . . 4afe6b4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> @ @ - 146 , 7 + 146 , 8 @ @ public class BaseCheckTestSupport { <nl> <nl> / * * <nl> * Performs verification of the given text ast tree representation . <nl> - * This implementation uses { @ link BaseCheckTestSupport # verifyAst ( String , String , boolean ) } <nl> + * This implementation uses <nl> + * { @ link BaseCheckTestSupport # verifyAst ( String , String , AstTreeStringPrinter . PrintOptions ) } <nl> * method inside . <nl> * @ param expectedTextPrintFileName expected text ast tree representation . <nl> * @ param actualJavaFileName actual text ast tree representation . <nl> @ @ - 154 , 7 + 155 , 8 @ @ public class BaseCheckTestSupport { <nl> * / <nl> protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName ) <nl> throws Exception { <nl> - verifyAst ( expectedTextPrintFileName , actualJavaFileName , false ) ; <nl> + verifyAst ( expectedTextPrintFileName , actualJavaFileName , <nl> + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 165 , 7 + 167 , 8 @ @ public class BaseCheckTestSupport { <nl> * @ throws Exception if exception occurs during verification . <nl> * / <nl> protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName , <nl> - boolean withComments ) throws Exception { <nl> + AstTreeStringPrinter . PrintOptions withComments ) <nl> + throws Exception { <nl> final String expectedContents = readFile ( expectedTextPrintFileName ) ; <nl> <nl> final String actualContents = AstTreeStringPrinter . printFileAst ( <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> index 890ba17 . . 136aadc 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java <nl> @ @ - 252 , 11 + 252 , 12 @ @ public class SuppressionCommentFilterTest <nl> @ Test <nl> public void testToStringOfTagClass ( ) { <nl> final SuppressionCommentFilter . Tag tag = new SuppressionCommentFilter . Tag ( <nl> - 0 , 1 , " text " , false , new SuppressionCommentFilter ( ) <nl> + 0 , 1 , " text " , <nl> + SuppressionCommentFilter . TagType . OFF , new SuppressionCommentFilter ( ) <nl> ) ; <nl> <nl> assertEquals ( " Invalid toString result " , <nl> - " Tag [ text = ' text ' , line = 0 , column = 1 , on = false , " <nl> + " Tag [ text = ' text ' , line = 0 , column = 1 , type = OFF , " <nl> + " tagCheckRegexp = . * , tagMessageRegexp = null ] " , tag . toString ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> index ac85833 . . ab656d5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> @ @ - 137 , 19 + 137 , 25 @ @ public class AstRegressionTest extends AbstractTreeTestSupport { <nl> verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ r \ r " ) ; <nl> verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ r " ) ; <nl> verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ u000c \ f " ) ; <nl> - verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ n " , true ) ; <nl> - verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ r " , true ) ; <nl> - verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ r \ n " , true ) ; <nl> - verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ n * / " , true ) ; <nl> - verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ r \ n * / " , true ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ n " , <nl> + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ r " , <nl> + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ r \ n " , <nl> + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ n * / " , <nl> + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; <nl> + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ r \ n * / " , <nl> + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; <nl> verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ r " + " \ u0000 \ u0000 " + " * / " , <nl> - true ) ; <nl> + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; <nl> } <nl> <nl> @ Test <nl> public void testNewlineCr ( ) throws Exception { <nl> verifyAst ( getPath ( " InputNewlineCrAtEndOfFileAst . txt " ) , <nl> - getPath ( " InputAstRegressionNewlineCrAtEndOfFile . java " ) , true ) ; <nl> + getPath ( " InputAstRegressionNewlineCrAtEndOfFile . java " ) , <nl> + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 203 , 11 + 209 , 12 @ @ public class AstRegressionTest extends AbstractTreeTestSupport { <nl> <nl> private static void verifyAstRaw ( String expectedTextPrintFileName , String actualJava ) <nl> throws Exception { <nl> - verifyAstRaw ( expectedTextPrintFileName , actualJava , false ) ; <nl> + verifyAstRaw ( expectedTextPrintFileName , actualJava , <nl> + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; <nl> } <nl> <nl> private static void verifyAstRaw ( String expectedTextPrintFileName , String actualJava , <nl> - boolean withComments ) throws Exception { <nl> + AstTreeStringPrinter . PrintOptions withComments ) throws Exception { <nl> final File expectedFile = new File ( expectedTextPrintFileName ) ; <nl> final String expectedContents = new FileText ( expectedFile , System . getProperty ( <nl> " file . encoding " , " UTF - 8 " ) ) . getFullText ( ) . toString ( ) . replace ( " \ r " , " " ) ; <nl> @ @ - 242 , 7 + 249 , 7 @ @ public class AstRegressionTest extends AbstractTreeTestSupport { <nl> verify ( methodName , false , 1 , laResults ) ; <nl> } <nl> <nl> - public static void verify ( String methodName , boolean expectPass , int guessing , <nl> + private static void verify ( String methodName , boolean expectPass , int guessing , <nl> char . . . laResults ) throws Exception { <nl> final AssertGeneratedJavaLexer instance = new AssertGeneratedJavaLexer ( ) ; <nl> instance . laPosition = 0 ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java <nl> index 1817904 . . a762219 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . AbstractTreeTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . AstTreeStringPrinter ; <nl> import com . puppycrawl . tools . checkstyle . api . Comment ; <nl> <nl> public class CommentsTest extends AbstractTreeTestSupport { <nl> @ @ - 33 , 12 + 34 , 14 @ @ public class CommentsTest extends AbstractTreeTestSupport { <nl> <nl> @ Test <nl> public void testCompareExpectedTreeWithInput1 ( ) throws Exception { <nl> - verifyAst ( getPath ( " InputComments1Ast . txt " ) , getPath ( " InputComments1 . java " ) , true ) ; <nl> + verifyAst ( getPath ( " InputComments1Ast . txt " ) , getPath ( " InputComments1 . java " ) , <nl> + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; <nl> } <nl> <nl> @ Test <nl> public void testCompareExpectedTreeWithInput2 ( ) throws Exception { <nl> - verifyAst ( getPath ( " InputComments2Ast . txt " ) , getPath ( " InputComments2 . java " ) , true ) ; <nl> + verifyAst ( getPath ( " InputComments2Ast . txt " ) , getPath ( " InputComments2 . java " ) , <nl> + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java <nl> index 13252de . . bfea081 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java <nl> @ @ - 50 , 6 + 50 , 7 @ @ public final class TestUtils { <nl> * @ param checkConstructorIsPrivate flag to skip check for private visibility , it is useful <nl> * for Classes that are mocked by PowerMockRunner that make <nl> * private c - tors as public <nl> + * @ noinspection BooleanParameter <nl> * / <nl> public static void assertUtilsClassHasPrivateConstructor ( final Class < ? > utilClass , <nl> boolean checkConstructorIsPrivate )
NEAREST DIFF (one line): diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm <nl> index 6c8b75f . . 5b45118 100644 <nl> - - - a / src / xdocs / index . xml . vm <nl> + + + b / src / xdocs / index . xml . vm <nl> @ @ - 313 , 7 + 313 , 7 @ @ <nl> < tr > <nl> < td > < a href = " https : / / bitbucket . org / atlassian / bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in < / a > < / td > <nl> < td > Atlassian ( formerly by Ross Rowe and Stephan Paulicke ) < / td > <nl> - < td > < a href = " https : / / marketplace . atlassian . com / plugins / com . atlassian . bamboo . plugins . bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in Atlassian Marketplace page < / a > < / td > <nl> + < td > < a href = " https : / / marketplace . atlassian . com / archive / com . atlassian . bamboo . plugins . bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in Atlassian Marketplace page < / a > < / td > <nl> < td > An add - on that will parse and record CheckStyle reports and report your style violations over time . < / td > <nl> < / tr > <nl> < / table > <nl> diff - - git a / src / xdocs / releasenotes _ old . xml b / src / xdocs / releasenotes _ old . xml <nl> index c21cbb8 . . 1f5ca03 100644 <nl> - - - a / src / xdocs / releasenotes _ old . xml <nl> + + + b / src / xdocs / releasenotes _ old . xml <nl> @ @ - 489 , 8 + 489 , 8 @ @ <nl> < li > < a href = " config _ coding . html # NoFinalizer " > NoFinalizer < / a > < / li > <nl> < li > < a href = " config _ imports . html # AvoidStaticImport " > AvoidStaticImport < / a > < / li > <nl> < li > < a href = " config _ javadoc . html # JavadocPackage " > JavadocPackage < / a > < / li > <nl> - < li > < a href = " config _ naming . html # Modules " > ClassTypeParameterName < / a > < / li > <nl> - < li > < a href = " config _ naming . html # Modules " > MethodTypeParameterName < / a > < / li > <nl> + < li > < a href = " config _ naming . html # ClassTypeParameterName " > ClassTypeParameterName < / a > < / li > <nl> + < li > < a href = " config _ naming . html # MethodTypeParameterName " > MethodTypeParameterName < / a > < / li > <nl> < li > < a href = " config _ regexp . html # RegexpMultiline " > RegexpMultiline < / a > < / li > <nl> < li > < a href = " config _ regexp . html # RegexpSingleline " > RegexpSingleline < / a > < / li > <nl> < li > < a href = " config _ regexp . html # RegexpSinglelineJava " > RegexpSinglelineJava < / a > < / li > <nl> @ @ - 771 , 9 + 771 , 9 @ @ <nl> Schneeberger for providing patch # 1947417 . <nl> < / li > <nl> < li > <nl> - New checks < a href = " config _ naming . html # Modules " > <nl> + New checks < a href = " config _ naming . html # ClassTypeParameterName " > <nl> ClassTypeParameterName < / a > and <nl> - < a href = " config _ naming . html # Modules " > <nl> + < a href = " config _ naming . html # MethodTypeParameterName " > <nl> MethodTypeParameterName < / a > <nl> for type name formats . Thanks to Travis Schneeberger for providing <nl> patch # 1956561 .

TEST DIFF:
diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index 2b1697a . . acf9b92 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 196 , 7 + 196 , 7 @ @ 
 < option name = " onlyWarnOnBaseMethods " value = " true " / > 
 < option name = " questionString " value = " is , can , has , should , could , will , shall , check , contains , equals , add , put , remove , starts , ends , are , was , matches , start , must , accept " / > 
 < / inspection _ tool > 
 - < inspection _ tool class = " BooleanParameter " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 + < inspection _ tool class = " BooleanParameter " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < ! - - even it is always negated , it is better than possible negation / inversion of negated term - - > 
 < inspection _ tool class = " BooleanVariableAlwaysNegated " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " BoxingBoxedValue " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java 
 index 2a97a8f . . c27e8f1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java 
 @ @ - 41 , 6 + 41 , 20 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 * / 
 public final class AstTreeStringPrinter { 
 
 + / * * 
 + * Enum to be used for test if comments should be printed . 
 + * / 
 + public enum PrintOptions { 
 + / * * 
 + * Comments has to be printed . 
 + * / 
 + WITH _ COMMENTS , 
 + / * * 
 + * Comments has NOT to be printed . 
 + * / 
 + WITHOUT _ COMMENTS 
 + } 
 + 
 / * * Newline pattern . * / 
 private static final Pattern NEWLINE = Pattern . compile ( " \ n " ) ; 
 / * * Return pattern . * / 
 @ @ - 64 , 7 + 78 , 7 @ @ public final class AstTreeStringPrinter { 
 * @ throws IOException if the file could not be read . 
 * @ throws CheckstyleException if the file is not a Java source . 
 * / 
 - public static String printFileAst ( File file , boolean withComments ) 
 + public static String printFileAst ( File file , PrintOptions withComments ) 
 throws IOException , CheckstyleException { 
 return printTree ( parseFile ( file , withComments ) ) ; 
 } 
 @ @ - 78 , 7 + 92 , 7 @ @ public final class AstTreeStringPrinter { 
 * / 
 public static String printJavaAndJavadocTree ( File file ) 
 throws IOException , CheckstyleException { 
 - final DetailAST tree = parseFile ( file , true ) ; 
 + final DetailAST tree = parseFile ( file , PrintOptions . WITH _ COMMENTS ) ; 
 return printJavaAndJavadocTree ( tree ) ; 
 } 
 
 @ @ - 130 , 7 + 144 , 8 @ @ public final class AstTreeStringPrinter { 
 * @ return the AST of the file in String form . 
 * @ throws CheckstyleException if the file is not a Java source . 
 * / 
 - public static String printAst ( FileText text , boolean withComments ) throws CheckstyleException { 
 + public static String printAst ( FileText text , 
 + PrintOptions withComments ) throws CheckstyleException { 
 return printTree ( parseFileText ( text , withComments ) ) ; 
 } 
 
 @ @ - 216 , 7 + 231 , 7 @ @ public final class AstTreeStringPrinter { 
 * @ throws IOException if the file could not be read . 
 * @ throws CheckstyleException if the file is not a Java source . 
 * / 
 - private static DetailAST parseFile ( File file , boolean withComments ) 
 + private static DetailAST parseFile ( File file , PrintOptions withComments ) 
 throws IOException , CheckstyleException { 
 final FileText text = new FileText ( file . getAbsoluteFile ( ) , 
 System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; 
 @ @ - 230 , 12 + 245 , 12 @ @ public final class AstTreeStringPrinter { 
 * @ return the root node of the parse tree . 
 * @ throws CheckstyleException if the file is not a Java source . 
 * / 
 - private static DetailAST parseFileText ( FileText text , boolean withComments ) 
 + private static DetailAST parseFileText ( FileText text , PrintOptions withComments ) 
 throws CheckstyleException { 
 final FileContents contents = new FileContents ( text ) ; 
 final DetailAST result ; 
 try { 
 - if ( withComments ) { 
 + if ( withComments = = PrintOptions . WITH _ COMMENTS ) { 
 result = TreeWalker . parseWithComments ( contents ) ; 
 } 
 else { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 index 64f4805 . . 55e7235 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 @ @ - 205 , 6 + 205 , 7 @ @ public final class ConfigurationLoader { 
 * ' ignore ' should be omitted , { @ code false } otherwise 
 * @ return the check configurations 
 * @ throws CheckstyleException if an error occurs 
 + * @ noinspection BooleanParameter 
 * / 
 public static Configuration loadConfiguration ( String config , 
 PropertyResolver overridePropsResolver , boolean omitIgnoredModules ) 
 @ @ - 223 , 6 + 224 , 7 @ @ public final class ConfigurationLoader { 
 * @ param threadModeSettings the thread mode configuration 
 * @ return the check configurations 
 * @ throws CheckstyleException if an error occurs 
 + * @ noinspection BooleanParameter 
 * / 
 public static Configuration loadConfiguration ( String config , 
 PropertyResolver overridePropsResolver , 
 @ @ - 251 , 6 + 253 , 7 @ @ public final class ConfigurationLoader { 
 * { @ link # loadConfiguration ( InputSource , PropertyResolver , boolean ) 
 * version using an InputSource } 
 * should be used instead 
 + * @ noinspection BooleanParameter 
 * / 
 @ Deprecated 
 public static Configuration loadConfiguration ( InputStream configStream , 
 @ @ - 271 , 6 + 274 , 7 @ @ public final class ConfigurationLoader { 
 * ' ignore ' should be omitted , { @ code false } otherwise 
 * @ return the check configurations 
 * @ throws CheckstyleException if an error occurs 
 + * @ noinspection BooleanParameter 
 * / 
 public static Configuration loadConfiguration ( InputSource configSource , 
 PropertyResolver overridePropsResolver , boolean omitIgnoredModules ) 
 @ @ - 291 , 6 + 295 , 7 @ @ public final class ConfigurationLoader { 
 * @ param threadModeSettings the thread mode configuration 
 * @ return the check configurations 
 * @ throws CheckstyleException if an error occurs 
 + * @ noinspection BooleanParameter 
 * / 
 public static Configuration loadConfiguration ( InputSource configSource , 
 PropertyResolver overridePropsResolver , 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 index 3a14fcc . . 5810354 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 @ @ - 76 , 6 + 76 , 7 @ @ public class DefaultLogger extends AutomaticBean implements AuditListener { 
 * Creates a new { @ code DefaultLogger } instance . 
 * @ param outputStream where to log infos and errors 
 * @ param closeStreamsAfterUse if oS should be closed in auditFinished ( ) 
 + * @ noinspection BooleanParameter 
 * / 
 public DefaultLogger ( OutputStream outputStream , boolean closeStreamsAfterUse ) { 
 / / no need to close oS twice 
 @ @ - 88 , 6 + 89 , 7 @ @ public class DefaultLogger extends AutomaticBean implements AuditListener { 
 * @ param closeInfoAfterUse auditFinished should close infoStream . 
 * @ param errorStream the { @ code OutputStream } for error messages . 
 * @ param closeErrorAfterUse auditFinished should close errorStream 
 + * @ noinspection BooleanParameter 
 * / 
 public DefaultLogger ( OutputStream infoStream , 
 boolean closeInfoAfterUse , 
 @ @ - 105 , 6 + 107 , 7 @ @ public class DefaultLogger extends AutomaticBean implements AuditListener { 
 * @ param errorStream the { @ code OutputStream } for error messages 
 * @ param closeErrorAfterUse auditFinished should close errorStream 
 * @ param messageFormatter formatter for the log message . 
 + * @ noinspection BooleanParameter 
 * / 
 public DefaultLogger ( OutputStream infoStream , 
 boolean closeInfoAfterUse , 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index df2e0d2 . . 22215ac 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 390 , 12 + 390 , 14 @ @ public final class Main { 
 if ( commandLine . hasOption ( OPTION _ T _ NAME ) ) { 
 / / print AST 
 final File file = config . files . get ( 0 ) ; 
 - final String stringAst = AstTreeStringPrinter . printFileAst ( file , false ) ; 
 + final String stringAst = AstTreeStringPrinter . printFileAst ( file , 
 + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; 
 System . out . print ( stringAst ) ; 
 } 
 else if ( commandLine . hasOption ( OPTION _ CAPITAL _ T _ NAME ) ) { 
 final File file = config . files . get ( 0 ) ; 
 - final String stringAst = AstTreeStringPrinter . printFileAst ( file , true ) ; 
 + final String stringAst = AstTreeStringPrinter . printFileAst ( file , 
 + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; 
 System . out . print ( stringAst ) ; 
 } 
 else if ( commandLine . hasOption ( OPTION _ J _ NAME ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 index 19818f5 . . db7be51 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 @ @ - 67 , 6 + 67 , 7 @ @ public class XMLLogger 
 * Sets the output to a defined stream . 
 * @ param outputStream the stream to write logs to . 
 * @ param closeStream close oS in auditFinished 
 + * @ noinspection BooleanParameter 
 * / 
 public XMLLogger ( OutputStream outputStream , boolean closeStream ) { 
 setOutputStream ( outputStream ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java 
 index f6a6b1b . . 72b7487 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheck . java 
 @ @ - 147 , 6 + 147 , 7 @ @ public class IllegalTokenTextCheck 
 / * * 
 * Set whether or not the match is case sensitive . 
 * @ param caseInsensitive true if the match is case insensitive . 
 + * @ noinspection BooleanParameter 
 * / 
 public void setIgnoreCase ( boolean caseInsensitive ) { 
 if ( caseInsensitive ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java 
 index c22cefc . . 433802d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java 
 @ @ - 353 , 7 + 353 , 8 @ @ public abstract class AbstractExpressionHandler { 
 protected void checkWrappingIndentation ( DetailAST firstNode , DetailAST lastNode , 
 int wrappedIndentLevel , int startIndent , boolean ignoreFirstLine ) { 
 indentCheck . getLineWrappingHandler ( ) . checkIndentation ( firstNode , lastNode , 
 - wrappedIndentLevel , startIndent , ignoreFirstLine ) ; 
 + wrappedIndentLevel , startIndent , 
 + LineWrappingHandler . LineWrappingOptions . ofBoolean ( ignoreFirstLine ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 index 9ee72d8 . . 6ad00c6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 @ @ - 39 , 6 + 39 , 36 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 public class LineWrappingHandler { 
 
 / * * 
 + * Enum to be used for test if first line ' s indentation should be checked or not . 
 + * / 
 + public enum LineWrappingOptions { 
 + / * * 
 + * First line ' s indentation should NOT be checked . 
 + * / 
 + IGNORE _ FIRST _ LINE , 
 + / * * 
 + * First line ' s indentation should be checked . 
 + * / 
 + NONE ; 
 + 
 + / * * 
 + * Builds enum value from boolean . 
 + * @ param val value . 
 + * @ return enum instance . 
 + * 
 + * @ noinspection BooleanParameter 
 + * / 
 + public static LineWrappingOptions ofBoolean ( boolean val ) { 
 + if ( val ) { 
 + return IGNORE _ FIRST _ LINE ; 
 + } 
 + else { 
 + return NONE ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 * The current instance of { @ code IndentationCheck } class using this 
 * handler . This field used to get access to private fields of 
 * IndentationCheck instance . 
 @ @ - 74 , 7 + 104 , 8 @ @ public class LineWrappingHandler { 
 * @ param indentLevel Indentation all wrapped lines should use . 
 * / 
 public void checkIndentation ( DetailAST firstNode , DetailAST lastNode , int indentLevel ) { 
 - checkIndentation ( firstNode , lastNode , indentLevel , - 1 , true ) ; 
 + checkIndentation ( firstNode , lastNode , indentLevel , 
 + - 1 , LineWrappingOptions . IGNORE _ FIRST _ LINE ) ; 
 } 
 
 / * * 
 @ @ - 87 , 7 + 118 , 7 @ @ public class LineWrappingHandler { 
 * @ param ignoreFirstLine Test if first line ' s indentation should be checked or not . 
 * / 
 public void checkIndentation ( DetailAST firstNode , DetailAST lastNode , int indentLevel , 
 - int startIndent , boolean ignoreFirstLine ) { 
 + int startIndent , LineWrappingOptions ignoreFirstLine ) { 
 final NavigableMap < Integer , DetailAST > firstNodesOnLines = collectFirstNodes ( firstNode , 
 lastNode ) ; 
 
 @ @ - 110 , 7 + 141 , 7 @ @ public class LineWrappingHandler { 
 } 
 } 
 
 - if ( ignoreFirstLine ) { 
 + if ( ignoreFirstLine = = LineWrappingOptions . IGNORE _ FIRST _ LINE ) { 
 / / First node should be removed because it was already checked before . 
 firstNodesOnLines . remove ( firstNodesOnLines . firstKey ( ) ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java 
 index 2b73218 . . 083419f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java 
 @ @ - 202 , 7 + 202 , 7 @ @ public final class DetectorOptions { 
 * Specifies whether to ignore case when matching and returns Builder object . 
 * @ param val whether to ignore case when matching . 
 * @ return Builder object . 
 - * @ noinspection ReturnOfInnerClass 
 + * @ noinspection ReturnOfInnerClass , BooleanParameter 
 * / 
 public Builder ignoreCase ( boolean val ) { 
 ignoreCase = val ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 index dd8c7d7 . . b2e4b09 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilter . java 
 @ @ - 62 , 6 + 62 , 20 @ @ public class SuppressionCommentFilter 
 extends AutomaticBean 
 implements TreeWalkerFilter { 
 
 + / * * 
 + * Enum to be used for switching checkstyle reporting for tags . 
 + * / 
 + public enum TagType { 
 + / * * 
 + * Switch reporting on . 
 + * / 
 + ON , 
 + / * * 
 + * Switch reporting off . 
 + * / 
 + OFF 
 + } 
 + 
 / * * Turns checkstyle reporting off . * / 
 private static final String DEFAULT _ OFF _ FORMAT = " CHECKSTYLE : OFF " ; 
 
 @ @ - 183 , 7 + 197 , 7 @ @ public class SuppressionCommentFilter 
 tagSuppressions ( ) ; 
 } 
 final Tag matchTag = findNearestMatch ( event ) ; 
 - accepted = matchTag = = null | | matchTag . isReportingOn ( ) ; 
 + accepted = matchTag = = null | | matchTag . getTagType ( ) = = TagType . ON ; 
 } 
 return accepted ; 
 } 
 @ @ - 253 , 12 + 267 , 12 @ @ public class SuppressionCommentFilter 
 private void tagCommentLine ( String text , int line , int column ) { 
 final Matcher offMatcher = offCommentFormat . matcher ( text ) ; 
 if ( offMatcher . find ( ) ) { 
 - addTag ( offMatcher . group ( 0 ) , line , column , false ) ; 
 + addTag ( offMatcher . group ( 0 ) , line , column , TagType . OFF ) ; 
 } 
 else { 
 final Matcher onMatcher = onCommentFormat . matcher ( text ) ; 
 if ( onMatcher . find ( ) ) { 
 - addTag ( onMatcher . group ( 0 ) , line , column , true ) ; 
 + addTag ( onMatcher . group ( 0 ) , line , column , TagType . ON ) ; 
 } 
 } 
 } 
 @ @ - 270 , 7 + 284 , 7 @ @ public class SuppressionCommentFilter 
 * @ param column the column number of the tag . 
 * @ param reportingOn { @ code true } if the tag turns checkstyle reporting on . 
 * / 
 - private void addTag ( String text , int line , int column , boolean reportingOn ) { 
 + private void addTag ( String text , int line , int column , TagType reportingOn ) { 
 final Tag tag = new Tag ( line , column , text , reportingOn , this ) ; 
 tags . add ( tag ) ; 
 } 
 @ @ - 292 , 7 + 306 , 7 @ @ public class SuppressionCommentFilter 
 private final int column ; 
 
 / * * Determines whether the suppression turns checkstyle reporting on . * / 
 - private final boolean reportingOn ; 
 + private final TagType tagType ; 
 
 / * * The parsed check regexp , expanded for the text of this tag . * / 
 private final Pattern tagCheckRegexp ; 
 @ @ - 305 , 22 + 319 , 22 @ @ public class SuppressionCommentFilter 
 * @ param line the line number . 
 * @ param column the column number . 
 * @ param text the text of the suppression . 
 - * @ param reportingOn { @ code true } if the tag turns checkstyle reporting . 
 + * @ param tagType { @ code ON } if the tag turns checkstyle reporting . 
 * @ param filter the { @ code SuppressionCommentFilter } with the context 
 * @ throws IllegalArgumentException if unable to parse expanded text . 
 * / 
 - public Tag ( int line , int column , String text , boolean reportingOn , 
 + public Tag ( int line , int column , String text , TagType tagType , 
 SuppressionCommentFilter filter ) { 
 this . line = line ; 
 this . column = column ; 
 this . text = text ; 
 - this . reportingOn = reportingOn ; 
 + this . tagType = tagType ; 
 
 / / Expand regexp for check and message 
 / / Does not intern Patterns with Utils . getPattern ( ) 
 String format = " " ; 
 try { 
 - if ( reportingOn ) { 
 + if ( this . tagType = = TagType . ON ) { 
 format = CommonUtils . fillTemplateWithStringsByRegexp ( 
 filter . checkFormat , text , filter . onCommentFormat ) ; 
 tagCheckRegexp = Pattern . compile ( format ) ; 
 @ @ - 374 , 10 + 388 , 10 @ @ public class SuppressionCommentFilter 
 / * * 
 * Determines whether the suppression turns checkstyle reporting on or 
 * off . 
 - * @ return { @ code true } if the suppression turns reporting on . 
 + * @ return { @ code ON } if the suppression turns reporting on . 
 * / 
 - public boolean isReportingOn ( ) { 
 - return reportingOn ; 
 + public TagType getTagType ( ) { 
 + return tagType ; 
 } 
 
 / * * 
 @ @ - 411 , 7 + 425 , 7 @ @ public class SuppressionCommentFilter 
 final Tag tag = ( Tag ) other ; 
 return Objects . equals ( line , tag . line ) 
 & & Objects . equals ( column , tag . column ) 
 - & & Objects . equals ( reportingOn , tag . reportingOn ) 
 + & & Objects . equals ( tagType , tag . tagType ) 
 & & Objects . equals ( text , tag . text ) 
 & & Objects . equals ( tagCheckRegexp , tag . tagCheckRegexp ) 
 & & Objects . equals ( tagMessageRegexp , tag . tagMessageRegexp ) ; 
 @ @ - 419 , 7 + 433 , 7 @ @ public class SuppressionCommentFilter 
 
 @ Override 
 public int hashCode ( ) { 
 - return Objects . hash ( text , line , column , reportingOn , tagCheckRegexp , tagMessageRegexp ) ; 
 + return Objects . hash ( text , line , column , tagType , tagCheckRegexp , tagMessageRegexp ) ; 
 } 
 
 / * * 
 @ @ - 452 , 7 + 466 , 7 @ @ public class SuppressionCommentFilter 
 return " Tag [ text = ' " + text + ' \ ' ' 
 + " , line = " + line 
 + " , column = " + column 
 - + " , on = " + reportingOn 
 + + " , type = " + tagType 
 + " , tagCheckRegexp = " + tagCheckRegexp 
 + " , tagMessageRegexp = " + tagMessageRegexp + ' ] ' ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java 
 index 84b463b . . 0b41cbf 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AbstractTreeTestSupport . java 
 @ @ - 55 , 7 + 55 , 8 @ @ public abstract class AbstractTreeTestSupport extends AbstractPathTestSupport { 
 * @ throws Exception if exception occurs during verification . 
 * / 
 protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName , 
 - boolean withComments ) throws Exception { 
 + AstTreeStringPrinter . PrintOptions withComments ) 
 + throws Exception { 
 final String expectedContents = readFile ( expectedTextPrintFileName ) ; 
 
 final String actualContents = AstTreeStringPrinter . printFileAst ( 
 @ @ - 67 , 7 + 68 , 8 @ @ public abstract class AbstractTreeTestSupport extends AbstractPathTestSupport { 
 
 / * * 
 * Performs verification of the given text ast tree representation . 
 - * This implementation uses { @ link BaseCheckTestSupport # verifyAst ( String , String , boolean ) } 
 + * This implementation uses 
 + * { @ link BaseCheckTestSupport # verifyAst ( String , String , AstTreeStringPrinter . PrintOptions ) } 
 * method inside . 
 * @ param expectedTextPrintFileName expected text ast tree representation . 
 * @ param actualJavaFileName actual text ast tree representation . 
 @ @ - 75 , 7 + 77 , 8 @ @ public abstract class AbstractTreeTestSupport extends AbstractPathTestSupport { 
 * / 
 protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName ) 
 throws Exception { 
 - verifyAst ( expectedTextPrintFileName , actualJavaFileName , false ) ; 
 + verifyAst ( expectedTextPrintFileName , actualJavaFileName , 
 + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java 
 index 51d950e . . 23da551 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinterTest . java 
 @ @ - 49 , 7 + 49 , 8 @ @ public class AstTreeStringPrinterTest extends AbstractTreeTestSupport { 
 public void testParseFileThrowable ( ) throws Exception { 
 try { 
 AstTreeStringPrinter . printFileAst ( 
 - new File ( getNonCompilablePath ( " InputAstTreeStringPrinter . java " ) ) , false ) ; 
 + new File ( getNonCompilablePath ( " InputAstTreeStringPrinter . java " ) ) , 
 + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; 
 Assert . fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 @ @ - 63 , 7 + 64 , 8 @ @ public class AstTreeStringPrinterTest extends AbstractTreeTestSupport { 
 @ Test 
 public void testParseFile ( ) throws Exception { 
 verifyAst ( getPath ( " expectedInputAstTreeStringPrinter . txt " ) , 
 - getPath ( " InputAstTreeStringPrinterComments . java " ) , false ) ; 
 + getPath ( " InputAstTreeStringPrinterComments . java " ) , 
 + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; 
 } 
 
 @ Test 
 @ @ - 71 , 7 + 73 , 8 @ @ public class AstTreeStringPrinterTest extends AbstractTreeTestSupport { 
 final FileText text = new FileText ( 
 new File ( getPath ( " InputAstTreeStringPrinterComments . java " ) ) . getAbsoluteFile ( ) , 
 System . getProperty ( " file . encoding " , " UTF - 8 " ) ) ; 
 - final String actual = AstTreeStringPrinter . printAst ( text , false ) ; 
 + final String actual = AstTreeStringPrinter . printAst ( text , 
 + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; 
 final String expected = new String ( Files . readAllBytes ( Paths . get ( 
 getPath ( " expectedInputAstTreeStringPrinter . txt " ) ) ) , StandardCharsets . UTF _ 8 ) ; 
 
 @ @ - 81 , 7 + 84 , 8 @ @ public class AstTreeStringPrinterTest extends AbstractTreeTestSupport { 
 @ Test 
 public void testParseFileWithComments ( ) throws Exception { 
 verifyAst ( getPath ( " expectedInputAstTreeStringPrinterComments . txt " ) , 
 - getPath ( " InputAstTreeStringPrinterComments . java " ) , true ) ; 
 + getPath ( " InputAstTreeStringPrinterComments . java " ) , 
 + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; 
 } 
 
 @ Test 
 @ @ - 113 , 12 + 117 , 14 @ @ public class AstTreeStringPrinterTest extends AbstractTreeTestSupport { 
 @ Test 
 public void testAstTreeBlockComments ( ) throws Exception { 
 verifyAst ( getPath ( " InputFullOfBlockCommentsAst . txt " ) , 
 - getPath ( " InputFullOfBlockComments . java " ) , true ) ; 
 + getPath ( " InputFullOfBlockComments . java " ) , 
 + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; 
 } 
 
 @ Test 
 public void testAstTreeSingleLineComments ( ) throws Exception { 
 verifyAst ( getPath ( " InputFullOfSinglelineCommentsAst . txt " ) , 
 - getPath ( " InputFullOfSinglelineComments . java " ) , true ) ; 
 + getPath ( " InputFullOfSinglelineComments . java " ) , 
 + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 index a1e40a6 . . 4afe6b4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 @ @ - 146 , 7 + 146 , 8 @ @ public class BaseCheckTestSupport { 
 
 / * * 
 * Performs verification of the given text ast tree representation . 
 - * This implementation uses { @ link BaseCheckTestSupport # verifyAst ( String , String , boolean ) } 
 + * This implementation uses 
 + * { @ link BaseCheckTestSupport # verifyAst ( String , String , AstTreeStringPrinter . PrintOptions ) } 
 * method inside . 
 * @ param expectedTextPrintFileName expected text ast tree representation . 
 * @ param actualJavaFileName actual text ast tree representation . 
 @ @ - 154 , 7 + 155 , 8 @ @ public class BaseCheckTestSupport { 
 * / 
 protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName ) 
 throws Exception { 
 - verifyAst ( expectedTextPrintFileName , actualJavaFileName , false ) ; 
 + verifyAst ( expectedTextPrintFileName , actualJavaFileName , 
 + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; 
 } 
 
 / * * 
 @ @ - 165 , 7 + 167 , 8 @ @ public class BaseCheckTestSupport { 
 * @ throws Exception if exception occurs during verification . 
 * / 
 protected static void verifyAst ( String expectedTextPrintFileName , String actualJavaFileName , 
 - boolean withComments ) throws Exception { 
 + AstTreeStringPrinter . PrintOptions withComments ) 
 + throws Exception { 
 final String expectedContents = readFile ( expectedTextPrintFileName ) ; 
 
 final String actualContents = AstTreeStringPrinter . printFileAst ( 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 index 890ba17 . . 136aadc 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionCommentFilterTest . java 
 @ @ - 252 , 11 + 252 , 12 @ @ public class SuppressionCommentFilterTest 
 @ Test 
 public void testToStringOfTagClass ( ) { 
 final SuppressionCommentFilter . Tag tag = new SuppressionCommentFilter . Tag ( 
 - 0 , 1 , " text " , false , new SuppressionCommentFilter ( ) 
 + 0 , 1 , " text " , 
 + SuppressionCommentFilter . TagType . OFF , new SuppressionCommentFilter ( ) 
 ) ; 
 
 assertEquals ( " Invalid toString result " , 
 - " Tag [ text = ' text ' , line = 0 , column = 1 , on = false , " 
 + " Tag [ text = ' text ' , line = 0 , column = 1 , type = OFF , " 
 + " tagCheckRegexp = . * , tagMessageRegexp = null ] " , tag . toString ( ) ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 index ac85833 . . ab656d5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 @ @ - 137 , 19 + 137 , 25 @ @ public class AstRegressionTest extends AbstractTreeTestSupport { 
 verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ r \ r " ) ; 
 verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ r " ) ; 
 verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " \ u000c \ f " ) ; 
 - verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ n " , true ) ; 
 - verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ r " , true ) ; 
 - verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ r \ n " , true ) ; 
 - verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ n * / " , true ) ; 
 - verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ r \ n * / " , true ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ n " , 
 + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ r " , 
 + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / / \ r \ n " , 
 + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ n * / " , 
 + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; 
 + verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ r \ n * / " , 
 + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; 
 verifyAstRaw ( getPath ( " InputRegressionEmptyAst . txt " ) , " / * \ r " + " \ u0000 \ u0000 " + " * / " , 
 - true ) ; 
 + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; 
 } 
 
 @ Test 
 public void testNewlineCr ( ) throws Exception { 
 verifyAst ( getPath ( " InputNewlineCrAtEndOfFileAst . txt " ) , 
 - getPath ( " InputAstRegressionNewlineCrAtEndOfFile . java " ) , true ) ; 
 + getPath ( " InputAstRegressionNewlineCrAtEndOfFile . java " ) , 
 + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; 
 } 
 
 @ Test 
 @ @ - 203 , 11 + 209 , 12 @ @ public class AstRegressionTest extends AbstractTreeTestSupport { 
 
 private static void verifyAstRaw ( String expectedTextPrintFileName , String actualJava ) 
 throws Exception { 
 - verifyAstRaw ( expectedTextPrintFileName , actualJava , false ) ; 
 + verifyAstRaw ( expectedTextPrintFileName , actualJava , 
 + AstTreeStringPrinter . PrintOptions . WITHOUT _ COMMENTS ) ; 
 } 
 
 private static void verifyAstRaw ( String expectedTextPrintFileName , String actualJava , 
 - boolean withComments ) throws Exception { 
 + AstTreeStringPrinter . PrintOptions withComments ) throws Exception { 
 final File expectedFile = new File ( expectedTextPrintFileName ) ; 
 final String expectedContents = new FileText ( expectedFile , System . getProperty ( 
 " file . encoding " , " UTF - 8 " ) ) . getFullText ( ) . toString ( ) . replace ( " \ r " , " " ) ; 
 @ @ - 242 , 7 + 249 , 7 @ @ public class AstRegressionTest extends AbstractTreeTestSupport { 
 verify ( methodName , false , 1 , laResults ) ; 
 } 
 
 - public static void verify ( String methodName , boolean expectPass , int guessing , 
 + private static void verify ( String methodName , boolean expectPass , int guessing , 
 char . . . laResults ) throws Exception { 
 final AssertGeneratedJavaLexer instance = new AssertGeneratedJavaLexer ( ) ; 
 instance . laPosition = 0 ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java 
 index 1817904 . . a762219 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / comments / CommentsTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import org . junit . Assert ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . AbstractTreeTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . AstTreeStringPrinter ; 
 import com . puppycrawl . tools . checkstyle . api . Comment ; 
 
 public class CommentsTest extends AbstractTreeTestSupport { 
 @ @ - 33 , 12 + 34 , 14 @ @ public class CommentsTest extends AbstractTreeTestSupport { 
 
 @ Test 
 public void testCompareExpectedTreeWithInput1 ( ) throws Exception { 
 - verifyAst ( getPath ( " InputComments1Ast . txt " ) , getPath ( " InputComments1 . java " ) , true ) ; 
 + verifyAst ( getPath ( " InputComments1Ast . txt " ) , getPath ( " InputComments1 . java " ) , 
 + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; 
 } 
 
 @ Test 
 public void testCompareExpectedTreeWithInput2 ( ) throws Exception { 
 - verifyAst ( getPath ( " InputComments2Ast . txt " ) , getPath ( " InputComments2 . java " ) , true ) ; 
 + verifyAst ( getPath ( " InputComments2Ast . txt " ) , getPath ( " InputComments2 . java " ) , 
 + AstTreeStringPrinter . PrintOptions . WITH _ COMMENTS ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java 
 index 13252de . . bfea081 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / TestUtils . java 
 @ @ - 50 , 6 + 50 , 7 @ @ public final class TestUtils { 
 * @ param checkConstructorIsPrivate flag to skip check for private visibility , it is useful 
 * for Classes that are mocked by PowerMockRunner that make 
 * private c - tors as public 
 + * @ noinspection BooleanParameter 
 * / 
 public static void assertUtilsClassHasPrivateConstructor ( final Class < ? > utilClass , 
 boolean checkConstructorIsPrivate )

NEAREST DIFF:
diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm 
 index 6c8b75f . . 5b45118 100644 
 - - - a / src / xdocs / index . xml . vm 
 + + + b / src / xdocs / index . xml . vm 
 @ @ - 313 , 7 + 313 , 7 @ @ 
 < tr > 
 < td > < a href = " https : / / bitbucket . org / atlassian / bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in < / a > < / td > 
 < td > Atlassian ( formerly by Ross Rowe and Stephan Paulicke ) < / td > 
 - < td > < a href = " https : / / marketplace . atlassian . com / plugins / com . atlassian . bamboo . plugins . bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in Atlassian Marketplace page < / a > < / td > 
 + < td > < a href = " https : / / marketplace . atlassian . com / archive / com . atlassian . bamboo . plugins . bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in Atlassian Marketplace page < / a > < / td > 
 < td > An add - on that will parse and record CheckStyle reports and report your style violations over time . < / td > 
 < / tr > 
 < / table > 
 diff - - git a / src / xdocs / releasenotes _ old . xml b / src / xdocs / releasenotes _ old . xml 
 index c21cbb8 . . 1f5ca03 100644 
 - - - a / src / xdocs / releasenotes _ old . xml 
 + + + b / src / xdocs / releasenotes _ old . xml 
 @ @ - 489 , 8 + 489 , 8 @ @ 
 < li > < a href = " config _ coding . html # NoFinalizer " > NoFinalizer < / a > < / li > 
 < li > < a href = " config _ imports . html # AvoidStaticImport " > AvoidStaticImport < / a > < / li > 
 < li > < a href = " config _ javadoc . html # JavadocPackage " > JavadocPackage < / a > < / li > 
 - < li > < a href = " config _ naming . html # Modules " > ClassTypeParameterName < / a > < / li > 
 - < li > < a href = " config _ naming . html # Modules " > MethodTypeParameterName < / a > < / li > 
 + < li > < a href = " config _ naming . html # ClassTypeParameterName " > ClassTypeParameterName < / a > < / li > 
 + < li > < a href = " config _ naming . html # MethodTypeParameterName " > MethodTypeParameterName < / a > < / li > 
 < li > < a href = " config _ regexp . html # RegexpMultiline " > RegexpMultiline < / a > < / li > 
 < li > < a href = " config _ regexp . html # RegexpSingleline " > RegexpSingleline < / a > < / li > 
 < li > < a href = " config _ regexp . html # RegexpSinglelineJava " > RegexpSinglelineJava < / a > < / li > 
 @ @ - 771 , 9 + 771 , 9 @ @ 
 Schneeberger for providing patch # 1947417 . 
 < / li > 
 < li > 
 - New checks < a href = " config _ naming . html # Modules " > 
 + New checks < a href = " config _ naming . html # ClassTypeParameterName " > 
 ClassTypeParameterName < / a > and 
 - < a href = " config _ naming . html # Modules " > 
 + < a href = " config _ naming . html # MethodTypeParameterName " > 
 MethodTypeParameterName < / a > 
 for type name formats . Thanks to Travis Schneeberger for providing 
 patch # 1956561 .
